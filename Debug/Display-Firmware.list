
Display-Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006924  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e8  08006ab4  08006ab4  00016ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d9c  08006d9c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08006d9c  08006d9c  00016d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006da4  08006da4  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006da4  08006da4  00016da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006da8  08006da8  00016da8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08006dac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002e30  20000078  08006e24  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002ea8  08006e24  00022ea8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017bdb  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003256  00000000  00000000  00037c83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014a8  00000000  00000000  0003aee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001368  00000000  00000000  0003c388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024a59  00000000  00000000  0003d6f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019a67  00000000  00000000  00062149  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d54f2  00000000  00000000  0007bbb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001510a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060f4  00000000  00000000  001510f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006a9c 	.word	0x08006a9c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08006a9c 	.word	0x08006a9c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <Init_LCD>:
void delay_ms(__IO uint32_t nCount1);
void pwm_backlight_set(unsigned int pwm);
void ili9488_showArray_wo_coordinates(uint16_t *data, uint32_t count);
void ili9488_set_coordinates(uint16_t x1,uint16_t y1, uint16_t x2, uint16_t y2);
void Init_LCD()
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
	interrupt_initialize_priorities();		// initialize IRQ
 8000588:	f000 f809 	bl	800059e <interrupt_initialize_priorities>
	//*****************************************************************************
		iopins_ini();							// initialize IO pins
 800058c:	f000 f80e 	bl	80005ac <iopins_ini>

	//*****************************************************************************
		initialize_ili9488();					// initialize LCD
 8000590:	f000 fa14 	bl	80009bc <initialize_ili9488>
		pwm_backlight_set(100);
 8000594:	2064      	movs	r0, #100	; 0x64
 8000596:	f000 fb71 	bl	8000c7c <pwm_backlight_set>
}
 800059a:	bf00      	nop
 800059c:	bd80      	pop	{r7, pc}

0800059e <interrupt_initialize_priorities>:

void interrupt_initialize_priorities()
{
 800059e:	b580      	push	{r7, lr}
 80005a0:	af00      	add	r7, sp, #0
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4); //4 bits for preemp priority 0 bit for sub priority
 80005a2:	2003      	movs	r0, #3
 80005a4:	f002 f896 	bl	80026d4 <HAL_NVIC_SetPriorityGrouping>
}
 80005a8:	bf00      	nop
 80005aa:	bd80      	pop	{r7, pc}

080005ac <iopins_ini>:

void iopins_ini()
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b098      	sub	sp, #96	; 0x60
 80005b0:	af00      	add	r7, sp, #0

	 __GPIOC_CLK_ENABLE();
 80005b2:	2300      	movs	r3, #0
 80005b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80005b6:	4bac      	ldr	r3, [pc, #688]	; (8000868 <iopins_ini+0x2bc>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ba:	4aab      	ldr	r2, [pc, #684]	; (8000868 <iopins_ini+0x2bc>)
 80005bc:	f043 0304 	orr.w	r3, r3, #4
 80005c0:	6313      	str	r3, [r2, #48]	; 0x30
 80005c2:	4ba9      	ldr	r3, [pc, #676]	; (8000868 <iopins_ini+0x2bc>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	f003 0304 	and.w	r3, r3, #4
 80005ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80005cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
	 __GPIOD_CLK_ENABLE();
 80005ce:	2300      	movs	r3, #0
 80005d0:	647b      	str	r3, [r7, #68]	; 0x44
 80005d2:	4ba5      	ldr	r3, [pc, #660]	; (8000868 <iopins_ini+0x2bc>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d6:	4aa4      	ldr	r2, [pc, #656]	; (8000868 <iopins_ini+0x2bc>)
 80005d8:	f043 0308 	orr.w	r3, r3, #8
 80005dc:	6313      	str	r3, [r2, #48]	; 0x30
 80005de:	4ba2      	ldr	r3, [pc, #648]	; (8000868 <iopins_ini+0x2bc>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	f003 0308 	and.w	r3, r3, #8
 80005e6:	647b      	str	r3, [r7, #68]	; 0x44
 80005e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
	 __GPIOA_CLK_ENABLE();
 80005ea:	2300      	movs	r3, #0
 80005ec:	643b      	str	r3, [r7, #64]	; 0x40
 80005ee:	4b9e      	ldr	r3, [pc, #632]	; (8000868 <iopins_ini+0x2bc>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	4a9d      	ldr	r2, [pc, #628]	; (8000868 <iopins_ini+0x2bc>)
 80005f4:	f043 0301 	orr.w	r3, r3, #1
 80005f8:	6313      	str	r3, [r2, #48]	; 0x30
 80005fa:	4b9b      	ldr	r3, [pc, #620]	; (8000868 <iopins_ini+0x2bc>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	f003 0301 	and.w	r3, r3, #1
 8000602:	643b      	str	r3, [r7, #64]	; 0x40
 8000604:	6c3b      	ldr	r3, [r7, #64]	; 0x40
	 __GPIOB_CLK_ENABLE();
 8000606:	2300      	movs	r3, #0
 8000608:	63fb      	str	r3, [r7, #60]	; 0x3c
 800060a:	4b97      	ldr	r3, [pc, #604]	; (8000868 <iopins_ini+0x2bc>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	4a96      	ldr	r2, [pc, #600]	; (8000868 <iopins_ini+0x2bc>)
 8000610:	f043 0302 	orr.w	r3, r3, #2
 8000614:	6313      	str	r3, [r2, #48]	; 0x30
 8000616:	4b94      	ldr	r3, [pc, #592]	; (8000868 <iopins_ini+0x2bc>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	f003 0302 	and.w	r3, r3, #2
 800061e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
	GPIO_InitTypeDef GPIO_InitStruct;

    BUZZER_PORT_RCC();
 8000622:	2300      	movs	r3, #0
 8000624:	63bb      	str	r3, [r7, #56]	; 0x38
 8000626:	4b90      	ldr	r3, [pc, #576]	; (8000868 <iopins_ini+0x2bc>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	4a8f      	ldr	r2, [pc, #572]	; (8000868 <iopins_ini+0x2bc>)
 800062c:	f043 0308 	orr.w	r3, r3, #8
 8000630:	6313      	str	r3, [r2, #48]	; 0x30
 8000632:	4b8d      	ldr	r3, [pc, #564]	; (8000868 <iopins_ini+0x2bc>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	f003 0308 	and.w	r3, r3, #8
 800063a:	63bb      	str	r3, [r7, #56]	; 0x38
 800063c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Pin = BUZZER;
 800063e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000642:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000644:	2301      	movs	r3, #1
 8000646:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000648:	2300      	movs	r3, #0
 800064a:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(BUZZER_PORT, &GPIO_InitStruct);
 800064c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000650:	4619      	mov	r1, r3
 8000652:	4886      	ldr	r0, [pc, #536]	; (800086c <iopins_ini+0x2c0>)
 8000654:	f002 f912 	bl	800287c <HAL_GPIO_Init>

    RS485DIR_PORT_RCC();
 8000658:	2300      	movs	r3, #0
 800065a:	637b      	str	r3, [r7, #52]	; 0x34
 800065c:	4b82      	ldr	r3, [pc, #520]	; (8000868 <iopins_ini+0x2bc>)
 800065e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000660:	4a81      	ldr	r2, [pc, #516]	; (8000868 <iopins_ini+0x2bc>)
 8000662:	f043 0301 	orr.w	r3, r3, #1
 8000666:	6313      	str	r3, [r2, #48]	; 0x30
 8000668:	4b7f      	ldr	r3, [pc, #508]	; (8000868 <iopins_ini+0x2bc>)
 800066a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066c:	f003 0301 	and.w	r3, r3, #1
 8000670:	637b      	str	r3, [r7, #52]	; 0x34
 8000672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Pin = RS485DIR;
 8000674:	2302      	movs	r3, #2
 8000676:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000678:	2301      	movs	r3, #1
 800067a:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067c:	2300      	movs	r3, #0
 800067e:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(RS485DIR_PORT, &GPIO_InitStruct);
 8000680:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000684:	4619      	mov	r1, r3
 8000686:	487a      	ldr	r0, [pc, #488]	; (8000870 <iopins_ini+0x2c4>)
 8000688:	f002 f8f8 	bl	800287c <HAL_GPIO_Init>
//	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
//	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//	 HAL_GPIO_Init(LCD_BACKLIGHT_PORT, &GPIO_InitStruct);
//	HAL_GPIO_WritePin(LCD_BACKLIGHT_PORT,LCD_BACKLIGHT);

    LCD_CS_PORT_RCC();
 800068c:	2300      	movs	r3, #0
 800068e:	633b      	str	r3, [r7, #48]	; 0x30
 8000690:	4b75      	ldr	r3, [pc, #468]	; (8000868 <iopins_ini+0x2bc>)
 8000692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000694:	4a74      	ldr	r2, [pc, #464]	; (8000868 <iopins_ini+0x2bc>)
 8000696:	f043 0308 	orr.w	r3, r3, #8
 800069a:	6313      	str	r3, [r2, #48]	; 0x30
 800069c:	4b72      	ldr	r3, [pc, #456]	; (8000868 <iopins_ini+0x2bc>)
 800069e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a0:	f003 0308 	and.w	r3, r3, #8
 80006a4:	633b      	str	r3, [r7, #48]	; 0x30
 80006a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pin = LCD_CS;
 80006a8:	2380      	movs	r3, #128	; 0x80
 80006aa:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ac:	2301      	movs	r3, #1
 80006ae:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006b0:	2303      	movs	r3, #3
 80006b2:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(LCD_CS_PORT, &GPIO_InitStruct);
 80006b4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80006b8:	4619      	mov	r1, r3
 80006ba:	486c      	ldr	r0, [pc, #432]	; (800086c <iopins_ini+0x2c0>)
 80006bc:	f002 f8de 	bl	800287c <HAL_GPIO_Init>
	HAL_GPIO_WritePin(LCD_CS_PORT,LCD_CS,GPIO_PIN_SET);
 80006c0:	2201      	movs	r2, #1
 80006c2:	2180      	movs	r1, #128	; 0x80
 80006c4:	4869      	ldr	r0, [pc, #420]	; (800086c <iopins_ini+0x2c0>)
 80006c6:	f002 fa75 	bl	8002bb4 <HAL_GPIO_WritePin>

    LCD_RES_PORT_RCC();
 80006ca:	2300      	movs	r3, #0
 80006cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80006ce:	4b66      	ldr	r3, [pc, #408]	; (8000868 <iopins_ini+0x2bc>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	4a65      	ldr	r2, [pc, #404]	; (8000868 <iopins_ini+0x2bc>)
 80006d4:	f043 0301 	orr.w	r3, r3, #1
 80006d8:	6313      	str	r3, [r2, #48]	; 0x30
 80006da:	4b63      	ldr	r3, [pc, #396]	; (8000868 <iopins_ini+0x2bc>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	f003 0301 	and.w	r3, r3, #1
 80006e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80006e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Pin = LCD_RES;
 80006e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ea:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ec:	2301      	movs	r3, #1
 80006ee:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed =GPIO_SPEED_FREQ_VERY_HIGH;
 80006f0:	2303      	movs	r3, #3
 80006f2:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(LCD_RES_PORT, &GPIO_InitStruct);
 80006f4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80006f8:	4619      	mov	r1, r3
 80006fa:	485d      	ldr	r0, [pc, #372]	; (8000870 <iopins_ini+0x2c4>)
 80006fc:	f002 f8be 	bl	800287c <HAL_GPIO_Init>

	HAL_GPIO_WritePin(LCD_RES_PORT,LCD_RES,GPIO_PIN_RESET);
 8000700:	2200      	movs	r2, #0
 8000702:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000706:	485a      	ldr	r0, [pc, #360]	; (8000870 <iopins_ini+0x2c4>)
 8000708:	f002 fa54 	bl	8002bb4 <HAL_GPIO_WritePin>
	delay_ms(50);
 800070c:	2032      	movs	r0, #50	; 0x32
 800070e:	f000 f9cf 	bl	8000ab0 <delay_ms>
	HAL_GPIO_WritePin(LCD_RES_PORT,LCD_RES,GPIO_PIN_SET);
 8000712:	2201      	movs	r2, #1
 8000714:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000718:	4855      	ldr	r0, [pc, #340]	; (8000870 <iopins_ini+0x2c4>)
 800071a:	f002 fa4b 	bl	8002bb4 <HAL_GPIO_WritePin>

    LCD_DCX_PORT_RCC();
 800071e:	2300      	movs	r3, #0
 8000720:	62bb      	str	r3, [r7, #40]	; 0x28
 8000722:	4b51      	ldr	r3, [pc, #324]	; (8000868 <iopins_ini+0x2bc>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a50      	ldr	r2, [pc, #320]	; (8000868 <iopins_ini+0x2bc>)
 8000728:	f043 0308 	orr.w	r3, r3, #8
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b4e      	ldr	r3, [pc, #312]	; (8000868 <iopins_ini+0x2bc>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f003 0308 	and.w	r3, r3, #8
 8000736:	62bb      	str	r3, [r7, #40]	; 0x28
 8000738:	6abb      	ldr	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pin = LCD_DCX;
 800073a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800073e:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000740:	2301      	movs	r3, #1
 8000742:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed =GPIO_SPEED_FREQ_VERY_HIGH;
 8000744:	2303      	movs	r3, #3
 8000746:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(LCD_DCX_PORT, &GPIO_InitStruct);
 8000748:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800074c:	4619      	mov	r1, r3
 800074e:	4847      	ldr	r0, [pc, #284]	; (800086c <iopins_ini+0x2c0>)
 8000750:	f002 f894 	bl	800287c <HAL_GPIO_Init>
	HAL_GPIO_WritePin(LCD_DCX_PORT,LCD_DCX,GPIO_PIN_SET);
 8000754:	2201      	movs	r2, #1
 8000756:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800075a:	4844      	ldr	r0, [pc, #272]	; (800086c <iopins_ini+0x2c0>)
 800075c:	f002 fa2a 	bl	8002bb4 <HAL_GPIO_WritePin>

    FLASH_CS_PORT_RCC();
 8000760:	2300      	movs	r3, #0
 8000762:	627b      	str	r3, [r7, #36]	; 0x24
 8000764:	4b40      	ldr	r3, [pc, #256]	; (8000868 <iopins_ini+0x2bc>)
 8000766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000768:	4a3f      	ldr	r2, [pc, #252]	; (8000868 <iopins_ini+0x2bc>)
 800076a:	f043 0301 	orr.w	r3, r3, #1
 800076e:	6313      	str	r3, [r2, #48]	; 0x30
 8000770:	4b3d      	ldr	r3, [pc, #244]	; (8000868 <iopins_ini+0x2bc>)
 8000772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000774:	f003 0301 	and.w	r3, r3, #1
 8000778:	627b      	str	r3, [r7, #36]	; 0x24
 800077a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Pin = FLASH_CS;
 800077c:	2310      	movs	r3, #16
 800077e:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000780:	2301      	movs	r3, #1
 8000782:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed =GPIO_SPEED_FREQ_VERY_HIGH;
 8000784:	2303      	movs	r3, #3
 8000786:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(FLASH_CS_PORT, &GPIO_InitStruct);
 8000788:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800078c:	4619      	mov	r1, r3
 800078e:	4838      	ldr	r0, [pc, #224]	; (8000870 <iopins_ini+0x2c4>)
 8000790:	f002 f874 	bl	800287c <HAL_GPIO_Init>
	HAL_GPIO_WritePin(FLASH_CS_PORT,FLASH_CS,GPIO_PIN_SET);
 8000794:	2201      	movs	r2, #1
 8000796:	2110      	movs	r1, #16
 8000798:	4835      	ldr	r0, [pc, #212]	; (8000870 <iopins_ini+0x2c4>)
 800079a:	f002 fa0b 	bl	8002bb4 <HAL_GPIO_WritePin>

    FLASH_WP_PORT_RCC();
 800079e:	2300      	movs	r3, #0
 80007a0:	623b      	str	r3, [r7, #32]
 80007a2:	4b31      	ldr	r3, [pc, #196]	; (8000868 <iopins_ini+0x2bc>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a30      	ldr	r2, [pc, #192]	; (8000868 <iopins_ini+0x2bc>)
 80007a8:	f043 0304 	orr.w	r3, r3, #4
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b2e      	ldr	r3, [pc, #184]	; (8000868 <iopins_ini+0x2bc>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0304 	and.w	r3, r3, #4
 80007b6:	623b      	str	r3, [r7, #32]
 80007b8:	6a3b      	ldr	r3, [r7, #32]
	GPIO_InitStruct.Pin = FLASH_WP;
 80007ba:	2310      	movs	r3, #16
 80007bc:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007be:	2301      	movs	r3, #1
 80007c0:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c2:	2300      	movs	r3, #0
 80007c4:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(FLASH_WP_PORT, &GPIO_InitStruct);
 80007c6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80007ca:	4619      	mov	r1, r3
 80007cc:	4829      	ldr	r0, [pc, #164]	; (8000874 <iopins_ini+0x2c8>)
 80007ce:	f002 f855 	bl	800287c <HAL_GPIO_Init>
	 HAL_GPIO_WritePin(FLASH_WP_PORT,FLASH_WP,GPIO_PIN_RESET);
 80007d2:	2200      	movs	r2, #0
 80007d4:	2110      	movs	r1, #16
 80007d6:	4827      	ldr	r0, [pc, #156]	; (8000874 <iopins_ini+0x2c8>)
 80007d8:	f002 f9ec 	bl	8002bb4 <HAL_GPIO_WritePin>

    FRAM_CS_PORT_RCC();
 80007dc:	2300      	movs	r3, #0
 80007de:	61fb      	str	r3, [r7, #28]
 80007e0:	4b21      	ldr	r3, [pc, #132]	; (8000868 <iopins_ini+0x2bc>)
 80007e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e4:	4a20      	ldr	r2, [pc, #128]	; (8000868 <iopins_ini+0x2bc>)
 80007e6:	f043 0302 	orr.w	r3, r3, #2
 80007ea:	6313      	str	r3, [r2, #48]	; 0x30
 80007ec:	4b1e      	ldr	r3, [pc, #120]	; (8000868 <iopins_ini+0x2bc>)
 80007ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f0:	f003 0302 	and.w	r3, r3, #2
 80007f4:	61fb      	str	r3, [r7, #28]
 80007f6:	69fb      	ldr	r3, [r7, #28]
	GPIO_InitStruct.Pin = FRAM_CS;
 80007f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007fc:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fe:	2301      	movs	r3, #1
 8000800:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed =GPIO_SPEED_FREQ_VERY_HIGH;
 8000802:	2303      	movs	r3, #3
 8000804:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(FRAM_CS_PORT, &GPIO_InitStruct);
 8000806:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800080a:	4619      	mov	r1, r3
 800080c:	481a      	ldr	r0, [pc, #104]	; (8000878 <iopins_ini+0x2cc>)
 800080e:	f002 f835 	bl	800287c <HAL_GPIO_Init>
	HAL_GPIO_WritePin(FRAM_CS_PORT,FRAM_CS,GPIO_PIN_SET);
 8000812:	2201      	movs	r2, #1
 8000814:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000818:	4817      	ldr	r0, [pc, #92]	; (8000878 <iopins_ini+0x2cc>)
 800081a:	f002 f9cb 	bl	8002bb4 <HAL_GPIO_WritePin>

    FRAM_HOLD_PORT_RCC();
 800081e:	2300      	movs	r3, #0
 8000820:	61bb      	str	r3, [r7, #24]
 8000822:	4b11      	ldr	r3, [pc, #68]	; (8000868 <iopins_ini+0x2bc>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a10      	ldr	r2, [pc, #64]	; (8000868 <iopins_ini+0x2bc>)
 8000828:	f043 0304 	orr.w	r3, r3, #4
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <iopins_ini+0x2bc>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0304 	and.w	r3, r3, #4
 8000836:	61bb      	str	r3, [r7, #24]
 8000838:	69bb      	ldr	r3, [r7, #24]
	GPIO_InitStruct.Pin = FRAM_HOLD;
 800083a:	2302      	movs	r3, #2
 800083c:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083e:	2301      	movs	r3, #1
 8000840:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed =GPIO_SPEED_FREQ_VERY_HIGH;
 8000842:	2303      	movs	r3, #3
 8000844:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(FRAM_HOLD_PORT, &GPIO_InitStruct);
 8000846:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800084a:	4619      	mov	r1, r3
 800084c:	4809      	ldr	r0, [pc, #36]	; (8000874 <iopins_ini+0x2c8>)
 800084e:	f002 f815 	bl	800287c <HAL_GPIO_Init>
	HAL_GPIO_WritePin(FRAM_HOLD_PORT,FRAM_HOLD,GPIO_PIN_SET);
 8000852:	2201      	movs	r2, #1
 8000854:	2102      	movs	r1, #2
 8000856:	4807      	ldr	r0, [pc, #28]	; (8000874 <iopins_ini+0x2c8>)
 8000858:	f002 f9ac 	bl	8002bb4 <HAL_GPIO_WritePin>

    FRAM_WP_PORT_RCC();
 800085c:	2300      	movs	r3, #0
 800085e:	617b      	str	r3, [r7, #20]
 8000860:	4b01      	ldr	r3, [pc, #4]	; (8000868 <iopins_ini+0x2bc>)
 8000862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000864:	e00a      	b.n	800087c <iopins_ini+0x2d0>
 8000866:	bf00      	nop
 8000868:	40023800 	.word	0x40023800
 800086c:	40020c00 	.word	0x40020c00
 8000870:	40020000 	.word	0x40020000
 8000874:	40020800 	.word	0x40020800
 8000878:	40020400 	.word	0x40020400
 800087c:	4a4b      	ldr	r2, [pc, #300]	; (80009ac <iopins_ini+0x400>)
 800087e:	f043 0304 	orr.w	r3, r3, #4
 8000882:	6313      	str	r3, [r2, #48]	; 0x30
 8000884:	4b49      	ldr	r3, [pc, #292]	; (80009ac <iopins_ini+0x400>)
 8000886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000888:	f003 0304 	and.w	r3, r3, #4
 800088c:	617b      	str	r3, [r7, #20]
 800088e:	697b      	ldr	r3, [r7, #20]
	GPIO_InitStruct.Pin = FRAM_WP;
 8000890:	2301      	movs	r3, #1
 8000892:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000894:	2301      	movs	r3, #1
 8000896:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000898:	2300      	movs	r3, #0
 800089a:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(FRAM_WP_PORT, &GPIO_InitStruct);
 800089c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80008a0:	4619      	mov	r1, r3
 80008a2:	4843      	ldr	r0, [pc, #268]	; (80009b0 <iopins_ini+0x404>)
 80008a4:	f001 ffea 	bl	800287c <HAL_GPIO_Init>
	HAL_GPIO_WritePin(FRAM_WP_PORT,FRAM_WP,GPIO_PIN_SET);
 80008a8:	2201      	movs	r2, #1
 80008aa:	2101      	movs	r1, #1
 80008ac:	4840      	ldr	r0, [pc, #256]	; (80009b0 <iopins_ini+0x404>)
 80008ae:	f002 f981 	bl	8002bb4 <HAL_GPIO_WritePin>


    LED_DBG_PORT_RCC();
 80008b2:	2300      	movs	r3, #0
 80008b4:	613b      	str	r3, [r7, #16]
 80008b6:	4b3d      	ldr	r3, [pc, #244]	; (80009ac <iopins_ini+0x400>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a3c      	ldr	r2, [pc, #240]	; (80009ac <iopins_ini+0x400>)
 80008bc:	f043 0302 	orr.w	r3, r3, #2
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b3a      	ldr	r3, [pc, #232]	; (80009ac <iopins_ini+0x400>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0302 	and.w	r3, r3, #2
 80008ca:	613b      	str	r3, [r7, #16]
 80008cc:	693b      	ldr	r3, [r7, #16]
	GPIO_InitStruct.Pin = LED_DBG_1;
 80008ce:	2308      	movs	r3, #8
 80008d0:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d2:	2301      	movs	r3, #1
 80008d4:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d6:	2300      	movs	r3, #0
 80008d8:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(LED_DBG_PORT, &GPIO_InitStruct);
 80008da:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80008de:	4619      	mov	r1, r3
 80008e0:	4834      	ldr	r0, [pc, #208]	; (80009b4 <iopins_ini+0x408>)
 80008e2:	f001 ffcb 	bl	800287c <HAL_GPIO_Init>
	HAL_GPIO_WritePin(LED_DBG_PORT,LED_DBG_1,GPIO_PIN_SET);
 80008e6:	2201      	movs	r2, #1
 80008e8:	2108      	movs	r1, #8
 80008ea:	4832      	ldr	r0, [pc, #200]	; (80009b4 <iopins_ini+0x408>)
 80008ec:	f002 f962 	bl	8002bb4 <HAL_GPIO_WritePin>


    BUTTON_0_PORT_RCC();
 80008f0:	2300      	movs	r3, #0
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	4b2d      	ldr	r3, [pc, #180]	; (80009ac <iopins_ini+0x400>)
 80008f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f8:	4a2c      	ldr	r2, [pc, #176]	; (80009ac <iopins_ini+0x400>)
 80008fa:	f043 0301 	orr.w	r3, r3, #1
 80008fe:	6313      	str	r3, [r2, #48]	; 0x30
 8000900:	4b2a      	ldr	r3, [pc, #168]	; (80009ac <iopins_ini+0x400>)
 8000902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000904:	f003 0301 	and.w	r3, r3, #1
 8000908:	60fb      	str	r3, [r7, #12]
 800090a:	68fb      	ldr	r3, [r7, #12]
	GPIO_InitStruct.Pin = BUTTON_0;
 800090c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000910:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000912:	2300      	movs	r3, #0
 8000914:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Pull= GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	657b      	str	r3, [r7, #84]	; 0x54
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091a:	2300      	movs	r3, #0
 800091c:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(BUTTON_0_PORT, &GPIO_InitStruct);
 800091e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000922:	4619      	mov	r1, r3
 8000924:	4824      	ldr	r0, [pc, #144]	; (80009b8 <iopins_ini+0x40c>)
 8000926:	f001 ffa9 	bl	800287c <HAL_GPIO_Init>

    BUTTON_1_PORT_RCC();
 800092a:	2300      	movs	r3, #0
 800092c:	60bb      	str	r3, [r7, #8]
 800092e:	4b1f      	ldr	r3, [pc, #124]	; (80009ac <iopins_ini+0x400>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	4a1e      	ldr	r2, [pc, #120]	; (80009ac <iopins_ini+0x400>)
 8000934:	f043 0304 	orr.w	r3, r3, #4
 8000938:	6313      	str	r3, [r2, #48]	; 0x30
 800093a:	4b1c      	ldr	r3, [pc, #112]	; (80009ac <iopins_ini+0x400>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	f003 0304 	and.w	r3, r3, #4
 8000942:	60bb      	str	r3, [r7, #8]
 8000944:	68bb      	ldr	r3, [r7, #8]
	GPIO_InitStruct.Pin = BUTTON_1;
 8000946:	f44f 7300 	mov.w	r3, #512	; 0x200
 800094a:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800094c:	2300      	movs	r3, #0
 800094e:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Pull= GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	657b      	str	r3, [r7, #84]	; 0x54
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000954:	2300      	movs	r3, #0
 8000956:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(BUTTON_1_PORT, &GPIO_InitStruct);
 8000958:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800095c:	4619      	mov	r1, r3
 800095e:	4814      	ldr	r0, [pc, #80]	; (80009b0 <iopins_ini+0x404>)
 8000960:	f001 ff8c 	bl	800287c <HAL_GPIO_Init>


    TOUCH_RESET_PORT_RCC();
 8000964:	2300      	movs	r3, #0
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	4b10      	ldr	r3, [pc, #64]	; (80009ac <iopins_ini+0x400>)
 800096a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096c:	4a0f      	ldr	r2, [pc, #60]	; (80009ac <iopins_ini+0x400>)
 800096e:	f043 0302 	orr.w	r3, r3, #2
 8000972:	6313      	str	r3, [r2, #48]	; 0x30
 8000974:	4b0d      	ldr	r3, [pc, #52]	; (80009ac <iopins_ini+0x400>)
 8000976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000978:	f003 0302 	and.w	r3, r3, #2
 800097c:	607b      	str	r3, [r7, #4]
 800097e:	687b      	ldr	r3, [r7, #4]
	GPIO_InitStruct.Pin = TOUCH_RESET;
 8000980:	2320      	movs	r3, #32
 8000982:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000984:	2301      	movs	r3, #1
 8000986:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000988:	2300      	movs	r3, #0
 800098a:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(TOUCH_RESET_PORT, &GPIO_InitStruct);
 800098c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000990:	4619      	mov	r1, r3
 8000992:	4808      	ldr	r0, [pc, #32]	; (80009b4 <iopins_ini+0x408>)
 8000994:	f001 ff72 	bl	800287c <HAL_GPIO_Init>

	HAL_GPIO_WritePin(TOUCH_RESET_PORT,TOUCH_RESET,GPIO_PIN_SET);
 8000998:	2201      	movs	r2, #1
 800099a:	2120      	movs	r1, #32
 800099c:	4805      	ldr	r0, [pc, #20]	; (80009b4 <iopins_ini+0x408>)
 800099e:	f002 f909 	bl	8002bb4 <HAL_GPIO_WritePin>
}
 80009a2:	bf00      	nop
 80009a4:	3760      	adds	r7, #96	; 0x60
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40023800 	.word	0x40023800
 80009b0:	40020800 	.word	0x40020800
 80009b4:	40020400 	.word	0x40020400
 80009b8:	40020000 	.word	0x40020000

080009bc <initialize_ili9488>:
//*****************************************************************************
void initialize_ili9488()
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af02      	add	r7, sp, #8
	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_RESET);
 80009c2:	2200      	movs	r2, #0
 80009c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009c8:	4838      	ldr	r0, [pc, #224]	; (8000aac <initialize_ili9488+0xf0>)
 80009ca:	f002 f8f3 	bl	8002bb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_RESET);
 80009ce:	2200      	movs	r2, #0
 80009d0:	2180      	movs	r1, #128	; 0x80
 80009d2:	4836      	ldr	r0, [pc, #216]	; (8000aac <initialize_ili9488+0xf0>)
 80009d4:	f002 f8ee 	bl	8002bb4 <HAL_GPIO_WritePin>
	TFT_REG=0x0011;
 80009d8:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80009dc:	2211      	movs	r2, #17
 80009de:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_SET);
 80009e0:	2201      	movs	r2, #1
 80009e2:	2180      	movs	r1, #128	; 0x80
 80009e4:	4831      	ldr	r0, [pc, #196]	; (8000aac <initialize_ili9488+0xf0>)
 80009e6:	f002 f8e5 	bl	8002bb4 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_RESET);
 80009ea:	2200      	movs	r2, #0
 80009ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009f0:	482e      	ldr	r0, [pc, #184]	; (8000aac <initialize_ili9488+0xf0>)
 80009f2:	f002 f8df 	bl	8002bb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS, GPIO_PIN_RESET);
 80009f6:	2200      	movs	r2, #0
 80009f8:	2180      	movs	r1, #128	; 0x80
 80009fa:	482c      	ldr	r0, [pc, #176]	; (8000aac <initialize_ili9488+0xf0>)
 80009fc:	f002 f8da 	bl	8002bb4 <HAL_GPIO_WritePin>
	TFT_REG=0x0029;
 8000a00:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000a04:	2229      	movs	r2, #41	; 0x29
 8000a06:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS, GPIO_PIN_SET);
 8000a08:	2201      	movs	r2, #1
 8000a0a:	2180      	movs	r1, #128	; 0x80
 8000a0c:	4827      	ldr	r0, [pc, #156]	; (8000aac <initialize_ili9488+0xf0>)
 8000a0e:	f002 f8d1 	bl	8002bb4 <HAL_GPIO_WritePin>


	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_RESET);
 8000a12:	2200      	movs	r2, #0
 8000a14:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a18:	4824      	ldr	r0, [pc, #144]	; (8000aac <initialize_ili9488+0xf0>)
 8000a1a:	f002 f8cb 	bl	8002bb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_RESET);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2180      	movs	r1, #128	; 0x80
 8000a22:	4822      	ldr	r0, [pc, #136]	; (8000aac <initialize_ili9488+0xf0>)
 8000a24:	f002 f8c6 	bl	8002bb4 <HAL_GPIO_WritePin>
	TFT_REG=0x003A;
 8000a28:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000a2c:	223a      	movs	r2, #58	; 0x3a
 8000a2e:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_SET);
 8000a30:	2201      	movs	r2, #1
 8000a32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a36:	481d      	ldr	r0, [pc, #116]	; (8000aac <initialize_ili9488+0xf0>)
 8000a38:	f002 f8bc 	bl	8002bb4 <HAL_GPIO_WritePin>
	TFT_REG=0x0055;
 8000a3c:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000a40:	2255      	movs	r2, #85	; 0x55
 8000a42:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS, GPIO_PIN_RESET);
 8000a44:	2200      	movs	r2, #0
 8000a46:	2180      	movs	r1, #128	; 0x80
 8000a48:	4818      	ldr	r0, [pc, #96]	; (8000aac <initialize_ili9488+0xf0>)
 8000a4a:	f002 f8b3 	bl	8002bb4 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_RESET);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a54:	4815      	ldr	r0, [pc, #84]	; (8000aac <initialize_ili9488+0xf0>)
 8000a56:	f002 f8ad 	bl	8002bb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_RESET);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2180      	movs	r1, #128	; 0x80
 8000a5e:	4813      	ldr	r0, [pc, #76]	; (8000aac <initialize_ili9488+0xf0>)
 8000a60:	f002 f8a8 	bl	8002bb4 <HAL_GPIO_WritePin>
	TFT_REG=0x0036;
 8000a64:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000a68:	2236      	movs	r2, #54	; 0x36
 8000a6a:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_SET);
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a72:	480e      	ldr	r0, [pc, #56]	; (8000aac <initialize_ili9488+0xf0>)
 8000a74:	f002 f89e 	bl	8002bb4 <HAL_GPIO_WritePin>
	TFT_REG=0x00E8;
 8000a78:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000a7c:	22e8      	movs	r2, #232	; 0xe8
 8000a7e:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_RESET);
 8000a80:	2200      	movs	r2, #0
 8000a82:	2180      	movs	r1, #128	; 0x80
 8000a84:	4809      	ldr	r0, [pc, #36]	; (8000aac <initialize_ili9488+0xf0>)
 8000a86:	f002 f895 	bl	8002bb4 <HAL_GPIO_WritePin>

	delay_ms(100);
 8000a8a:	2064      	movs	r0, #100	; 0x64
 8000a8c:	f000 f810 	bl	8000ab0 <delay_ms>
	ili9488_fillRect(0,0,LCD_PIXEL_WIDTH,LCD_PIXEL_HEIGHT,ORANGE);
 8000a90:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8000a94:	9300      	str	r3, [sp, #0]
 8000a96:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000a9a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	2000      	movs	r0, #0
 8000aa2:	f000 f81d 	bl	8000ae0 <ili9488_fillRect>
}
 8000aa6:	bf00      	nop
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	40020c00 	.word	0x40020c00

08000ab0 <delay_ms>:
void delay_ms(__IO uint32_t nCount1) {
 8000ab0:	b480      	push	{r7}
 8000ab2:	b085      	sub	sp, #20
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
	__IO uint32_t nCount=nCount1*23666;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	f645 4272 	movw	r2, #23666	; 0x5c72
 8000abe:	fb02 f303 	mul.w	r3, r2, r3
 8000ac2:	60fb      	str	r3, [r7, #12]
	while(nCount--) {
 8000ac4:	bf00      	nop
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	1e5a      	subs	r2, r3, #1
 8000aca:	60fa      	str	r2, [r7, #12]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d1fa      	bne.n	8000ac6 <delay_ms+0x16>
  }
}
 8000ad0:	bf00      	nop
 8000ad2:	bf00      	nop
 8000ad4:	3714      	adds	r7, #20
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
	...

08000ae0 <ili9488_fillRect>:
void ili9488_fillRect(uint16_t x1, uint16_t y1, uint16_t w, uint16_t h, uint16_t color)
{
 8000ae0:	b590      	push	{r4, r7, lr}
 8000ae2:	b085      	sub	sp, #20
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4604      	mov	r4, r0
 8000ae8:	4608      	mov	r0, r1
 8000aea:	4611      	mov	r1, r2
 8000aec:	461a      	mov	r2, r3
 8000aee:	4623      	mov	r3, r4
 8000af0:	80fb      	strh	r3, [r7, #6]
 8000af2:	4603      	mov	r3, r0
 8000af4:	80bb      	strh	r3, [r7, #4]
 8000af6:	460b      	mov	r3, r1
 8000af8:	807b      	strh	r3, [r7, #2]
 8000afa:	4613      	mov	r3, r2
 8000afc:	803b      	strh	r3, [r7, #0]
	uint32_t count = w * h;
 8000afe:	887b      	ldrh	r3, [r7, #2]
 8000b00:	883a      	ldrh	r2, [r7, #0]
 8000b02:	fb02 f303 	mul.w	r3, r2, r3
 8000b06:	60bb      	str	r3, [r7, #8]
	ili9488_set_coordinates(x1, y1, (uint16_t) (x1 + w - 1), (uint16_t) (y1 + h - 1));
 8000b08:	88fa      	ldrh	r2, [r7, #6]
 8000b0a:	887b      	ldrh	r3, [r7, #2]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	b29b      	uxth	r3, r3
 8000b10:	3b01      	subs	r3, #1
 8000b12:	b29c      	uxth	r4, r3
 8000b14:	88ba      	ldrh	r2, [r7, #4]
 8000b16:	883b      	ldrh	r3, [r7, #0]
 8000b18:	4413      	add	r3, r2
 8000b1a:	b29b      	uxth	r3, r3
 8000b1c:	3b01      	subs	r3, #1
 8000b1e:	b29b      	uxth	r3, r3
 8000b20:	88b9      	ldrh	r1, [r7, #4]
 8000b22:	88f8      	ldrh	r0, [r7, #6]
 8000b24:	4622      	mov	r2, r4
 8000b26:	f000 f82f 	bl	8000b88 <ili9488_set_coordinates>

	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_RESET);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b30:	4814      	ldr	r0, [pc, #80]	; (8000b84 <ili9488_fillRect+0xa4>)
 8000b32:	f002 f83f 	bl	8002bb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_RESET);
 8000b36:	2200      	movs	r2, #0
 8000b38:	2180      	movs	r1, #128	; 0x80
 8000b3a:	4812      	ldr	r0, [pc, #72]	; (8000b84 <ili9488_fillRect+0xa4>)
 8000b3c:	f002 f83a 	bl	8002bb4 <HAL_GPIO_WritePin>
	TFT_REG=0x002C;
 8000b40:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000b44:	222c      	movs	r2, #44	; 0x2c
 8000b46:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_SET);
 8000b48:	2201      	movs	r2, #1
 8000b4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b4e:	480d      	ldr	r0, [pc, #52]	; (8000b84 <ili9488_fillRect+0xa4>)
 8000b50:	f002 f830 	bl	8002bb4 <HAL_GPIO_WritePin>

	for(unsigned int i=0; i<count; i++)
 8000b54:	2300      	movs	r3, #0
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	e006      	b.n	8000b68 <ili9488_fillRect+0x88>
	{
		TFT_REG=color;
 8000b5a:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000b5e:	8c3b      	ldrh	r3, [r7, #32]
 8000b60:	8013      	strh	r3, [r2, #0]
	for(unsigned int i=0; i<count; i++)
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	3301      	adds	r3, #1
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	68fa      	ldr	r2, [r7, #12]
 8000b6a:	68bb      	ldr	r3, [r7, #8]
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	d3f4      	bcc.n	8000b5a <ili9488_fillRect+0x7a>
	}
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_SET);
 8000b70:	2201      	movs	r2, #1
 8000b72:	2180      	movs	r1, #128	; 0x80
 8000b74:	4803      	ldr	r0, [pc, #12]	; (8000b84 <ili9488_fillRect+0xa4>)
 8000b76:	f002 f81d 	bl	8002bb4 <HAL_GPIO_WritePin>
}
 8000b7a:	bf00      	nop
 8000b7c:	3714      	adds	r7, #20
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd90      	pop	{r4, r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40020c00 	.word	0x40020c00

08000b88 <ili9488_set_coordinates>:
void ili9488_set_coordinates(uint16_t x1,uint16_t y1, uint16_t x2, uint16_t y2)
{
 8000b88:	b590      	push	{r4, r7, lr}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	4604      	mov	r4, r0
 8000b90:	4608      	mov	r0, r1
 8000b92:	4611      	mov	r1, r2
 8000b94:	461a      	mov	r2, r3
 8000b96:	4623      	mov	r3, r4
 8000b98:	80fb      	strh	r3, [r7, #6]
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	80bb      	strh	r3, [r7, #4]
 8000b9e:	460b      	mov	r3, r1
 8000ba0:	807b      	strh	r3, [r7, #2]
 8000ba2:	4613      	mov	r3, r2
 8000ba4:	803b      	strh	r3, [r7, #0]
	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_RESET);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bac:	4832      	ldr	r0, [pc, #200]	; (8000c78 <ili9488_set_coordinates+0xf0>)
 8000bae:	f002 f801 	bl	8002bb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_RESET);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	2180      	movs	r1, #128	; 0x80
 8000bb6:	4830      	ldr	r0, [pc, #192]	; (8000c78 <ili9488_set_coordinates+0xf0>)
 8000bb8:	f001 fffc 	bl	8002bb4 <HAL_GPIO_WritePin>
	TFT_REG=0x002A;
 8000bbc:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000bc0:	222a      	movs	r2, #42	; 0x2a
 8000bc2:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_SET);
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bca:	482b      	ldr	r0, [pc, #172]	; (8000c78 <ili9488_set_coordinates+0xf0>)
 8000bcc:	f001 fff2 	bl	8002bb4 <HAL_GPIO_WritePin>
	TFT_REG=x1>>8;
 8000bd0:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000bd4:	88fb      	ldrh	r3, [r7, #6]
 8000bd6:	0a1b      	lsrs	r3, r3, #8
 8000bd8:	b29b      	uxth	r3, r3
 8000bda:	8013      	strh	r3, [r2, #0]
	TFT_REG=x1&0xFF;
 8000bdc:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000be0:	88fa      	ldrh	r2, [r7, #6]
 8000be2:	b2d2      	uxtb	r2, r2
 8000be4:	b292      	uxth	r2, r2
 8000be6:	801a      	strh	r2, [r3, #0]
	TFT_REG=x2>>8;
 8000be8:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000bec:	887b      	ldrh	r3, [r7, #2]
 8000bee:	0a1b      	lsrs	r3, r3, #8
 8000bf0:	b29b      	uxth	r3, r3
 8000bf2:	8013      	strh	r3, [r2, #0]
	TFT_REG=x2&0xFF;
 8000bf4:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000bf8:	887a      	ldrh	r2, [r7, #2]
 8000bfa:	b2d2      	uxtb	r2, r2
 8000bfc:	b292      	uxth	r2, r2
 8000bfe:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_SET);
 8000c00:	2201      	movs	r2, #1
 8000c02:	2180      	movs	r1, #128	; 0x80
 8000c04:	481c      	ldr	r0, [pc, #112]	; (8000c78 <ili9488_set_coordinates+0xf0>)
 8000c06:	f001 ffd5 	bl	8002bb4 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_RESET);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c10:	4819      	ldr	r0, [pc, #100]	; (8000c78 <ili9488_set_coordinates+0xf0>)
 8000c12:	f001 ffcf 	bl	8002bb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_RESET);
 8000c16:	2200      	movs	r2, #0
 8000c18:	2180      	movs	r1, #128	; 0x80
 8000c1a:	4817      	ldr	r0, [pc, #92]	; (8000c78 <ili9488_set_coordinates+0xf0>)
 8000c1c:	f001 ffca 	bl	8002bb4 <HAL_GPIO_WritePin>
	TFT_REG=0x002B;
 8000c20:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000c24:	222b      	movs	r2, #43	; 0x2b
 8000c26:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_SET);
 8000c28:	2201      	movs	r2, #1
 8000c2a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c2e:	4812      	ldr	r0, [pc, #72]	; (8000c78 <ili9488_set_coordinates+0xf0>)
 8000c30:	f001 ffc0 	bl	8002bb4 <HAL_GPIO_WritePin>
	TFT_REG=y1>>8;
 8000c34:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000c38:	88bb      	ldrh	r3, [r7, #4]
 8000c3a:	0a1b      	lsrs	r3, r3, #8
 8000c3c:	b29b      	uxth	r3, r3
 8000c3e:	8013      	strh	r3, [r2, #0]
	TFT_REG=y1&0xFF;
 8000c40:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000c44:	88ba      	ldrh	r2, [r7, #4]
 8000c46:	b2d2      	uxtb	r2, r2
 8000c48:	b292      	uxth	r2, r2
 8000c4a:	801a      	strh	r2, [r3, #0]
	TFT_REG=y2>>8;
 8000c4c:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000c50:	883b      	ldrh	r3, [r7, #0]
 8000c52:	0a1b      	lsrs	r3, r3, #8
 8000c54:	b29b      	uxth	r3, r3
 8000c56:	8013      	strh	r3, [r2, #0]
	TFT_REG=y2&0xFF;
 8000c58:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000c5c:	883a      	ldrh	r2, [r7, #0]
 8000c5e:	b2d2      	uxtb	r2, r2
 8000c60:	b292      	uxth	r2, r2
 8000c62:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_SET);
 8000c64:	2201      	movs	r2, #1
 8000c66:	2180      	movs	r1, #128	; 0x80
 8000c68:	4803      	ldr	r0, [pc, #12]	; (8000c78 <ili9488_set_coordinates+0xf0>)
 8000c6a:	f001 ffa3 	bl	8002bb4 <HAL_GPIO_WritePin>
}
 8000c6e:	bf00      	nop
 8000c70:	370c      	adds	r7, #12
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd90      	pop	{r4, r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40020c00 	.word	0x40020c00

08000c7c <pwm_backlight_set>:
void pwm_backlight_set(unsigned int pwm)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b0a6      	sub	sp, #152	; 0x98
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]

	if(pwm>=100)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2b63      	cmp	r3, #99	; 0x63
 8000c88:	d902      	bls.n	8000c90 <pwm_backlight_set+0x14>
	{
		pwm=100;
 8000c8a:	2364      	movs	r3, #100	; 0x64
 8000c8c:	607b      	str	r3, [r7, #4]
 8000c8e:	e004      	b.n	8000c9a <pwm_backlight_set+0x1e>
	}else if(pwm <= 0)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d101      	bne.n	8000c9a <pwm_backlight_set+0x1e>
	{
		pwm = 0;
 8000c96:	2300      	movs	r3, #0
 8000c98:	607b      	str	r3, [r7, #4]
	}

	pwm=(unsigned int)((MAX_PWM_PULSE * pwm)/100);
 8000c9a:	687a      	ldr	r2, [r7, #4]
 8000c9c:	4613      	mov	r3, r2
 8000c9e:	041b      	lsls	r3, r3, #16
 8000ca0:	1a9b      	subs	r3, r3, r2
 8000ca2:	4a47      	ldr	r2, [pc, #284]	; (8000dc0 <pwm_backlight_set+0x144>)
 8000ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ca8:	095b      	lsrs	r3, r3, #5
 8000caa:	607b      	str	r3, [r7, #4]

	/* Common settings */
      TIM_HandleTypeDef htim1;
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	605a      	str	r2, [r3, #4]
 8000cc0:	609a      	str	r2, [r3, #8]
 8000cc2:	60da      	str	r2, [r3, #12]
 8000cc4:	611a      	str	r2, [r3, #16]
 8000cc6:	615a      	str	r2, [r3, #20]
 8000cc8:	619a      	str	r2, [r3, #24]
	  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000cca:	f107 030c 	add.w	r3, r7, #12
 8000cce:	2220      	movs	r2, #32
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f004 fcfa 	bl	80056cc <memset>

	  htim1.Instance = TIM1;
 8000cd8:	4b3a      	ldr	r3, [pc, #232]	; (8000dc4 <pwm_backlight_set+0x148>)
 8000cda:	653b      	str	r3, [r7, #80]	; 0x50
	  htim1.Init.Prescaler = 0;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	657b      	str	r3, [r7, #84]	; 0x54
	  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	65bb      	str	r3, [r7, #88]	; 0x58
	  htim1.Init.Period = 65535;
 8000ce4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ce8:	65fb      	str	r3, [r7, #92]	; 0x5c
	  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cea:	2300      	movs	r3, #0
 8000cec:	663b      	str	r3, [r7, #96]	; 0x60
	  htim1.Init.RepetitionCounter = 0;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	667b      	str	r3, [r7, #100]	; 0x64
	  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	66bb      	str	r3, [r7, #104]	; 0x68
	  HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_4);
 8000cf6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000cfa:	210c      	movs	r1, #12
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f002 ff59 	bl	8003bb4 <HAL_TIM_PWM_Stop>
	  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000d02:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000d06:	4618      	mov	r0, r3
 8000d08:	f002 fe3d 	bl	8003986 <HAL_TIM_PWM_Init>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <pwm_backlight_set+0x9a>
	  {
	    Error_Handler();
 8000d12:	f000 fd33 	bl	800177c <Error_Handler>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d16:	2300      	movs	r3, #0
 8000d18:	64bb      	str	r3, [r7, #72]	; 0x48
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	64fb      	str	r3, [r7, #76]	; 0x4c
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d1e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000d22:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000d26:	4611      	mov	r1, r2
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f003 faeb 	bl	8004304 <HAL_TIMEx_MasterConfigSynchronization>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <pwm_backlight_set+0xbc>
	  {
	    Error_Handler();
 8000d34:	f000 fd22 	bl	800177c <Error_Handler>
	  }
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d38:	2360      	movs	r3, #96	; 0x60
 8000d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
	  sConfigOC.Pulse = pwm;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	633b      	str	r3, [r7, #48]	; 0x30
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d40:	2300      	movs	r3, #0
 8000d42:	637b      	str	r3, [r7, #52]	; 0x34
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d44:	2300      	movs	r3, #0
 8000d46:	63fb      	str	r3, [r7, #60]	; 0x3c
	  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	643b      	str	r3, [r7, #64]	; 0x40
	  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	647b      	str	r3, [r7, #68]	; 0x44
	  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d50:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8000d54:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000d58:	220c      	movs	r2, #12
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f002 ff9a 	bl	8003c94 <HAL_TIM_PWM_ConfigChannel>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <pwm_backlight_set+0xee>
	  {
	    Error_Handler();
 8000d66:	f000 fd09 	bl	800177c <Error_Handler>
	  }
	  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	60fb      	str	r3, [r7, #12]
	  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	613b      	str	r3, [r7, #16]
	  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d72:	2300      	movs	r3, #0
 8000d74:	617b      	str	r3, [r7, #20]
	  sBreakDeadTimeConfig.DeadTime = 0;
 8000d76:	2300      	movs	r3, #0
 8000d78:	61bb      	str	r3, [r7, #24]
	  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	61fb      	str	r3, [r7, #28]
	  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d82:	623b      	str	r3, [r7, #32]
	  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d84:	2300      	movs	r3, #0
 8000d86:	62bb      	str	r3, [r7, #40]	; 0x28
	  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d88:	f107 020c 	add.w	r2, r7, #12
 8000d8c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000d90:	4611      	mov	r1, r2
 8000d92:	4618      	mov	r0, r3
 8000d94:	f003 fb32 	bl	80043fc <HAL_TIMEx_ConfigBreakDeadTime>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <pwm_backlight_set+0x126>
	  {
	    Error_Handler();
 8000d9e:	f000 fced 	bl	800177c <Error_Handler>
	  }

	  HAL_TIM_MspPostInit(&htim1);
 8000da2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000da6:	4618      	mov	r0, r3
 8000da8:	f000 fdf4 	bl	8001994 <HAL_TIM_MspPostInit>
	  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_4);
 8000dac:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000db0:	210c      	movs	r1, #12
 8000db2:	4618      	mov	r0, r3
 8000db4:	f002 fe36 	bl	8003a24 <HAL_TIM_PWM_Start>


}
 8000db8:	bf00      	nop
 8000dba:	3798      	adds	r7, #152	; 0x98
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	51eb851f 	.word	0x51eb851f
 8000dc4:	40010000 	.word	0x40010000

08000dc8 <LCD_WritePixel>:
inline void LCD_WritePixel(uint16_t x, uint16_t y, uint16_t color) {
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	80fb      	strh	r3, [r7, #6]
 8000dd2:	460b      	mov	r3, r1
 8000dd4:	80bb      	strh	r3, [r7, #4]
 8000dd6:	4613      	mov	r3, r2
 8000dd8:	807b      	strh	r3, [r7, #2]

	ili9488_set_coordinates(x,y,x,y);
 8000dda:	88bb      	ldrh	r3, [r7, #4]
 8000ddc:	88fa      	ldrh	r2, [r7, #6]
 8000dde:	88b9      	ldrh	r1, [r7, #4]
 8000de0:	88f8      	ldrh	r0, [r7, #6]
 8000de2:	f7ff fed1 	bl	8000b88 <ili9488_set_coordinates>
	ili9488_showArray_wo_coordinates(color,1);
 8000de6:	887b      	ldrh	r3, [r7, #2]
 8000de8:	2101      	movs	r1, #1
 8000dea:	4618      	mov	r0, r3
 8000dec:	f000 f804 	bl	8000df8 <ili9488_showArray_wo_coordinates>
}
 8000df0:	bf00      	nop
 8000df2:	3708      	adds	r7, #8
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <ili9488_showArray_wo_coordinates>:
void ili9488_showArray_wo_coordinates(uint16_t *data, uint32_t count)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX, GPIO_PIN_RESET);
 8000e02:	2200      	movs	r2, #0
 8000e04:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e08:	4816      	ldr	r0, [pc, #88]	; (8000e64 <ili9488_showArray_wo_coordinates+0x6c>)
 8000e0a:	f001 fed3 	bl	8002bb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_RESET);
 8000e0e:	2200      	movs	r2, #0
 8000e10:	2180      	movs	r1, #128	; 0x80
 8000e12:	4814      	ldr	r0, [pc, #80]	; (8000e64 <ili9488_showArray_wo_coordinates+0x6c>)
 8000e14:	f001 fece 	bl	8002bb4 <HAL_GPIO_WritePin>
	TFT_REG=0x002C;
 8000e18:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000e1c:	222c      	movs	r2, #44	; 0x2c
 8000e1e:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_SET);
 8000e20:	2201      	movs	r2, #1
 8000e22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e26:	480f      	ldr	r0, [pc, #60]	; (8000e64 <ili9488_showArray_wo_coordinates+0x6c>)
 8000e28:	f001 fec4 	bl	8002bb4 <HAL_GPIO_WritePin>

	for(unsigned int i=0; i<count; i++)
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	e00a      	b.n	8000e48 <ili9488_showArray_wo_coordinates+0x50>
	{
		TFT_REG=data[i];
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	005b      	lsls	r3, r3, #1
 8000e36:	687a      	ldr	r2, [r7, #4]
 8000e38:	4413      	add	r3, r2
 8000e3a:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000e3e:	881b      	ldrh	r3, [r3, #0]
 8000e40:	8013      	strh	r3, [r2, #0]
	for(unsigned int i=0; i<count; i++)
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	3301      	adds	r3, #1
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	68fa      	ldr	r2, [r7, #12]
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	d3f0      	bcc.n	8000e32 <ili9488_showArray_wo_coordinates+0x3a>
	}
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_SET);
 8000e50:	2201      	movs	r2, #1
 8000e52:	2180      	movs	r1, #128	; 0x80
 8000e54:	4803      	ldr	r0, [pc, #12]	; (8000e64 <ili9488_showArray_wo_coordinates+0x6c>)
 8000e56:	f001 fead 	bl	8002bb4 <HAL_GPIO_WritePin>
}
 8000e5a:	bf00      	nop
 8000e5c:	3710      	adds	r7, #16
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40020c00 	.word	0x40020c00

08000e68 <flashCSSet>:
#include "spiRoutines.h"
#include <stm32f4xx_hal.h>
#include <stm32f4xx_hal_gpio.h>
#include <stdio.h>

void flashCSSet(){
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	2110      	movs	r1, #16
 8000e70:	4802      	ldr	r0, [pc, #8]	; (8000e7c <flashCSSet+0x14>)
 8000e72:	f001 fe9f 	bl	8002bb4 <HAL_GPIO_WritePin>
}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40020000 	.word	0x40020000

08000e80 <flashCSReset>:

void flashCSReset(){
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8000e84:	2200      	movs	r2, #0
 8000e86:	2110      	movs	r1, #16
 8000e88:	4802      	ldr	r0, [pc, #8]	; (8000e94 <flashCSReset+0x14>)
 8000e8a:	f001 fe93 	bl	8002bb4 <HAL_GPIO_WritePin>
}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40020000 	.word	0x40020000

08000e98 <ext_flash_erase_4kB>:
	flashCSSet();
	return id_data;
}

void ext_flash_erase_4kB(unsigned int sector_adress)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
	unsigned int i;

	ext_flash_wren();
 8000ea0:	f000 f8d2 	bl	8001048 <ext_flash_wren>

	flashCSReset();
 8000ea4:	f7ff ffec 	bl	8000e80 <flashCSReset>


	SPI1_Transfer(0x20);
 8000ea8:	2020      	movs	r0, #32
 8000eaa:	f000 fc6d 	bl	8001788 <SPI1_Transfer>
	SPI1_Transfer((sector_adress>>16)&0xFF);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	0c1b      	lsrs	r3, r3, #16
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f000 fc67 	bl	8001788 <SPI1_Transfer>
	SPI1_Transfer((sector_adress>>8)&0xFF);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	0a1b      	lsrs	r3, r3, #8
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f000 fc61 	bl	8001788 <SPI1_Transfer>
	SPI1_Transfer(sector_adress&0xFF);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f000 fc5c 	bl	8001788 <SPI1_Transfer>
	flashCSSet();
 8000ed0:	f7ff ffca 	bl	8000e68 <flashCSSet>

	for(i=0;i<1000;i++)
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	e00a      	b.n	8000ef0 <ext_flash_erase_4kB+0x58>
	{
		HAL_Delay(1);
 8000eda:	2001      	movs	r0, #1
 8000edc:	f001 fb06 	bl	80024ec <HAL_Delay>
		if(ext_flash_read_status_register_1()==0x00)
 8000ee0:	f000 f89e 	bl	8001020 <ext_flash_read_status_register_1>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d007      	beq.n	8000efa <ext_flash_erase_4kB+0x62>
	for(i=0;i<1000;i++)
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	3301      	adds	r3, #1
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ef6:	d3f0      	bcc.n	8000eda <ext_flash_erase_4kB+0x42>
		{
			break;
		}
	}
}
 8000ef8:	e000      	b.n	8000efc <ext_flash_erase_4kB+0x64>
			break;
 8000efa:	bf00      	nop
}
 8000efc:	bf00      	nop
 8000efe:	3710      	adds	r7, #16
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <ext_flash_write>:

void ext_flash_write(unsigned int sector_adress, char *buff, unsigned int len)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b086      	sub	sp, #24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	60f8      	str	r0, [r7, #12]
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	607a      	str	r2, [r7, #4]
	unsigned int i;

	ext_flash_wren();
 8000f10:	f000 f89a 	bl	8001048 <ext_flash_wren>

	flashCSReset();
 8000f14:	f7ff ffb4 	bl	8000e80 <flashCSReset>
	SPI1_Transfer(0x02);
 8000f18:	2002      	movs	r0, #2
 8000f1a:	f000 fc35 	bl	8001788 <SPI1_Transfer>
	SPI1_Transfer((sector_adress>>16)&0xFF);
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	0c1b      	lsrs	r3, r3, #16
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	4618      	mov	r0, r3
 8000f26:	f000 fc2f 	bl	8001788 <SPI1_Transfer>
	SPI1_Transfer((sector_adress>>8)&0xFF);
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	0a1b      	lsrs	r3, r3, #8
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	4618      	mov	r0, r3
 8000f32:	f000 fc29 	bl	8001788 <SPI1_Transfer>
	SPI1_Transfer(sector_adress&0xFF);
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f000 fc24 	bl	8001788 <SPI1_Transfer>

	for(i=0;i<len;i++)
 8000f40:	2300      	movs	r3, #0
 8000f42:	617b      	str	r3, [r7, #20]
 8000f44:	e009      	b.n	8000f5a <ext_flash_write+0x56>
	{
		SPI1_Transfer(buff[i]);
 8000f46:	68ba      	ldr	r2, [r7, #8]
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f000 fc1a 	bl	8001788 <SPI1_Transfer>
	for(i=0;i<len;i++)
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	3301      	adds	r3, #1
 8000f58:	617b      	str	r3, [r7, #20]
 8000f5a:	697a      	ldr	r2, [r7, #20]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	429a      	cmp	r2, r3
 8000f60:	d3f1      	bcc.n	8000f46 <ext_flash_write+0x42>
	}
	flashCSSet();
 8000f62:	f7ff ff81 	bl	8000e68 <flashCSSet>

	for(i=0;i<1000;i++)
 8000f66:	2300      	movs	r3, #0
 8000f68:	617b      	str	r3, [r7, #20]
 8000f6a:	e00a      	b.n	8000f82 <ext_flash_write+0x7e>
	{
		HAL_Delay(1);
 8000f6c:	2001      	movs	r0, #1
 8000f6e:	f001 fabd 	bl	80024ec <HAL_Delay>
		if(ext_flash_read_status_register_1()==0x00)
 8000f72:	f000 f855 	bl	8001020 <ext_flash_read_status_register_1>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d007      	beq.n	8000f8c <ext_flash_write+0x88>
	for(i=0;i<1000;i++)
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	617b      	str	r3, [r7, #20]
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f88:	d3f0      	bcc.n	8000f6c <ext_flash_write+0x68>
		{
			break;
		}
	}
}
 8000f8a:	e000      	b.n	8000f8e <ext_flash_write+0x8a>
			break;
 8000f8c:	bf00      	nop
}
 8000f8e:	bf00      	nop
 8000f90:	3718      	adds	r7, #24
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <ext_flash_read>:
void ext_flash_read(unsigned int sector_adress, char *buff, unsigned int len)
{
 8000f96:	b590      	push	{r4, r7, lr}
 8000f98:	b087      	sub	sp, #28
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	60f8      	str	r0, [r7, #12]
 8000f9e:	60b9      	str	r1, [r7, #8]
 8000fa0:	607a      	str	r2, [r7, #4]
	unsigned char command[4];

	command[0]=0x03;
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	743b      	strb	r3, [r7, #16]
	command[1]=((char *)&sector_adress)[3];
 8000fa6:	f107 030c 	add.w	r3, r7, #12
 8000faa:	3303      	adds	r3, #3
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	747b      	strb	r3, [r7, #17]
	command[2]=((char *)&sector_adress)[2];
 8000fb0:	f107 030c 	add.w	r3, r7, #12
 8000fb4:	3302      	adds	r3, #2
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	74bb      	strb	r3, [r7, #18]
	command[3]=((char *)&sector_adress)[1];
 8000fba:	f107 030c 	add.w	r3, r7, #12
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	74fb      	strb	r3, [r7, #19]

	flashCSReset();
 8000fc4:	f7ff ff5c 	bl	8000e80 <flashCSReset>

	SPI1_Transfer(0x03);
 8000fc8:	2003      	movs	r0, #3
 8000fca:	f000 fbdd 	bl	8001788 <SPI1_Transfer>
	SPI1_Transfer((sector_adress>>16)&0xFF);
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	0c1b      	lsrs	r3, r3, #16
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f000 fbd7 	bl	8001788 <SPI1_Transfer>
	SPI1_Transfer((sector_adress>>8)&0xFF);
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	0a1b      	lsrs	r3, r3, #8
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f000 fbd1 	bl	8001788 <SPI1_Transfer>
	SPI1_Transfer(sector_adress&0xFF);
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	4618      	mov	r0, r3
 8000fec:	f000 fbcc 	bl	8001788 <SPI1_Transfer>

	//dmaReceiveDataCont8_FLASH(command, 4, buff, len); //Can't figure out how to get this to work with HAL, so reading without DMA instead:

	for(unsigned int i = 0; i<len; i++){
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	617b      	str	r3, [r7, #20]
 8000ff4:	e00a      	b.n	800100c <ext_flash_read+0x76>
		*(buff+i) = SPI1_Transfer(0x00);
 8000ff6:	68ba      	ldr	r2, [r7, #8]
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	18d4      	adds	r4, r2, r3
 8000ffc:	2000      	movs	r0, #0
 8000ffe:	f000 fbc3 	bl	8001788 <SPI1_Transfer>
 8001002:	4603      	mov	r3, r0
 8001004:	7023      	strb	r3, [r4, #0]
	for(unsigned int i = 0; i<len; i++){
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	3301      	adds	r3, #1
 800100a:	617b      	str	r3, [r7, #20]
 800100c:	697a      	ldr	r2, [r7, #20]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	429a      	cmp	r2, r3
 8001012:	d3f0      	bcc.n	8000ff6 <ext_flash_read+0x60>
	}

	flashCSSet();
 8001014:	f7ff ff28 	bl	8000e68 <flashCSSet>
}
 8001018:	bf00      	nop
 800101a:	371c      	adds	r7, #28
 800101c:	46bd      	mov	sp, r7
 800101e:	bd90      	pop	{r4, r7, pc}

08001020 <ext_flash_read_status_register_1>:

	return data;
}

unsigned char ext_flash_read_status_register_1()
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
	char data;
	flashCSReset();
 8001026:	f7ff ff2b 	bl	8000e80 <flashCSReset>
	SPI1_Transfer(0x05);
 800102a:	2005      	movs	r0, #5
 800102c:	f000 fbac 	bl	8001788 <SPI1_Transfer>
	data=SPI1_Transfer(0x00);
 8001030:	2000      	movs	r0, #0
 8001032:	f000 fba9 	bl	8001788 <SPI1_Transfer>
 8001036:	4603      	mov	r3, r0
 8001038:	71fb      	strb	r3, [r7, #7]
	flashCSSet();
 800103a:	f7ff ff15 	bl	8000e68 <flashCSSet>

	return data;
 800103e:	79fb      	ldrb	r3, [r7, #7]
}
 8001040:	4618      	mov	r0, r3
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <ext_flash_wren>:

void ext_flash_wren()
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
	flashCSReset();
 800104c:	f7ff ff18 	bl	8000e80 <flashCSReset>
	SPI1_Transfer(0x06);
 8001050:	2006      	movs	r0, #6
 8001052:	f000 fb99 	bl	8001788 <SPI1_Transfer>
	flashCSSet();
 8001056:	f7ff ff07 	bl	8000e68 <flashCSSet>
}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
	...

08001060 <flashDemoPrintLast>:
#include <string.h>
#include "extFlash.h"

#define demoFlashAddr 0x00

void flashDemoPrintLast(){
 8001060:	b580      	push	{r7, lr}
 8001062:	b090      	sub	sp, #64	; 0x40
 8001064:	af00      	add	r7, sp, #0
	char flashMsg[64];
	ext_flash_read(demoFlashAddr, flashMsg, 64);
 8001066:	463b      	mov	r3, r7
 8001068:	2240      	movs	r2, #64	; 0x40
 800106a:	4619      	mov	r1, r3
 800106c:	2000      	movs	r0, #0
 800106e:	f7ff ff92 	bl	8000f96 <ext_flash_read>
	flashMsg[63] = 0; //just to be safe
 8001072:	2300      	movs	r3, #0
 8001074:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	printf("[FLASH demo] Read message from flash: \"%s\".\r\n", flashMsg);
 8001078:	463b      	mov	r3, r7
 800107a:	4619      	mov	r1, r3
 800107c:	4803      	ldr	r0, [pc, #12]	; (800108c <flashDemoPrintLast+0x2c>)
 800107e:	f004 fb2d 	bl	80056dc <iprintf>
}
 8001082:	bf00      	nop
 8001084:	3740      	adds	r7, #64	; 0x40
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	08006ab4 	.word	0x08006ab4

08001090 <flashDemoLoop>:

int flashDemoLoop(){
 8001090:	b580      	push	{r7, lr}
 8001092:	b092      	sub	sp, #72	; 0x48
 8001094:	af00      	add	r7, sp, #0

		char delimiter = 13;
 8001096:	230d      	movs	r3, #13
 8001098:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		char msg[64];

		int count = read_usart_message(msg, &huart1, sizeof(msg), delimiter);
 800109c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80010a0:	4638      	mov	r0, r7
 80010a2:	2240      	movs	r2, #64	; 0x40
 80010a4:	4914      	ldr	r1, [pc, #80]	; (80010f8 <flashDemoLoop+0x68>)
 80010a6:	f001 f897 	bl	80021d8 <read_usart_message>
 80010aa:	4603      	mov	r3, r0
 80010ac:	643b      	str	r3, [r7, #64]	; 0x40

		if(count == 0){
 80010ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d104      	bne.n	80010be <flashDemoLoop+0x2e>
			//While reading buffer of received chars, delimiter char was not encountered.
			printf("[FLASH demo] message not yet ready.\r\n");
 80010b4:	4811      	ldr	r0, [pc, #68]	; (80010fc <flashDemoLoop+0x6c>)
 80010b6:	f004 fb97 	bl	80057e8 <puts>
			return 0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	e018      	b.n	80010f0 <flashDemoLoop+0x60>
		}

		msg[count-1] = 0; //null terminate received string
 80010be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80010c0:	3b01      	subs	r3, #1
 80010c2:	3348      	adds	r3, #72	; 0x48
 80010c4:	443b      	add	r3, r7
 80010c6:	2200      	movs	r2, #0
 80010c8:	f803 2c48 	strb.w	r2, [r3, #-72]

		printf("[FLASH demo] Saving message to flash: \"%s\".\r\n", msg);
 80010cc:	463b      	mov	r3, r7
 80010ce:	4619      	mov	r1, r3
 80010d0:	480b      	ldr	r0, [pc, #44]	; (8001100 <flashDemoLoop+0x70>)
 80010d2:	f004 fb03 	bl	80056dc <iprintf>

		ext_flash_erase_4kB(demoFlashAddr);
 80010d6:	2000      	movs	r0, #0
 80010d8:	f7ff fede 	bl	8000e98 <ext_flash_erase_4kB>
		ext_flash_write(demoFlashAddr, msg, count);
 80010dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80010de:	463b      	mov	r3, r7
 80010e0:	4619      	mov	r1, r3
 80010e2:	2000      	movs	r0, #0
 80010e4:	f7ff ff0e 	bl	8000f04 <ext_flash_write>

		printf("[FLASH demo] Done.\n\r");
 80010e8:	4806      	ldr	r0, [pc, #24]	; (8001104 <flashDemoLoop+0x74>)
 80010ea:	f004 faf7 	bl	80056dc <iprintf>
		return 1;
 80010ee:	2301      	movs	r3, #1

}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3748      	adds	r7, #72	; 0x48
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20000188 	.word	0x20000188
 80010fc:	08006ae4 	.word	0x08006ae4
 8001100:	08006b0c 	.word	0x08006b0c
 8001104:	08006b3c 	.word	0x08006b3c

08001108 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800110e:	f001 f97b 	bl	8002408 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001112:	f000 f857 	bl	80011c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001116:	f000 fa11 	bl	800153c <MX_GPIO_Init>
  MX_FSMC_Init();
 800111a:	f000 fab5 	bl	8001688 <MX_FSMC_Init>
  MX_USART1_UART_Init();
 800111e:	f000 f9a9 	bl	8001474 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001122:	f000 f8b9 	bl	8001298 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001126:	f000 f9d7 	bl	80014d8 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800112a:	f000 f8e3 	bl	80012f4 <MX_SPI1_Init>
  MX_TIM1_Init();
 800112e:	f000 f91f 	bl	8001370 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  //enable uart interrupt
  uint16_t count = 0;
 8001132:	2300      	movs	r3, #0
 8001134:	81fb      	strh	r3, [r7, #14]
  Init_LCD();
 8001136:	f7ff fa25 	bl	8000584 <Init_LCD>
  while(count<=200)
 800113a:	e00c      	b.n	8001156 <main+0x4e>
  {
	  count++;
 800113c:	89fb      	ldrh	r3, [r7, #14]
 800113e:	3301      	adds	r3, #1
 8001140:	81fb      	strh	r3, [r7, #14]
	  LCD_WritePixel(count,0x10,BLUE);
 8001142:	89fb      	ldrh	r3, [r7, #14]
 8001144:	221f      	movs	r2, #31
 8001146:	2110      	movs	r1, #16
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff fe3d 	bl	8000dc8 <LCD_WritePixel>
	  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_4);
 800114e:	210c      	movs	r1, #12
 8001150:	4818      	ldr	r0, [pc, #96]	; (80011b4 <main+0xac>)
 8001152:	f002 fc67 	bl	8003a24 <HAL_TIM_PWM_Start>
  while(count<=200)
 8001156:	89fb      	ldrh	r3, [r7, #14]
 8001158:	2bc8      	cmp	r3, #200	; 0xc8
 800115a:	d9ef      	bls.n	800113c <main+0x34>
  static int blOn = 0;
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("Entering main loop\n\r");
 800115c:	4816      	ldr	r0, [pc, #88]	; (80011b8 <main+0xb0>)
 800115e:	f004 fabd 	bl	80056dc <iprintf>

  flashDemoPrintLast();
 8001162:	f7ff ff7d 	bl	8001060 <flashDemoPrintLast>

  int loopNumber = 0;
 8001166:	2300      	movs	r3, #0
 8001168:	60bb      	str	r3, [r7, #8]

  while (1)
  {
	int secSleep = 1;
 800116a:	2301      	movs	r3, #1
 800116c:	607b      	str	r3, [r7, #4]
	int msecSleep = 500;
 800116e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001172:	603b      	str	r3, [r7, #0]
	printf("Sleeping %d.%d secs. LN %d\r\n", secSleep, msecSleep, loopNumber++);
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	1c5a      	adds	r2, r3, #1
 8001178:	60ba      	str	r2, [r7, #8]
 800117a:	683a      	ldr	r2, [r7, #0]
 800117c:	6879      	ldr	r1, [r7, #4]
 800117e:	480f      	ldr	r0, [pc, #60]	; (80011bc <main+0xb4>)
 8001180:	f004 faac 	bl	80056dc <iprintf>
	HAL_Delay(1000*secSleep + msecSleep);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800118a:	fb03 f202 	mul.w	r2, r3, r2
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	4413      	add	r3, r2
 8001192:	4618      	mov	r0, r3
 8001194:	f001 f9aa 	bl	80024ec <HAL_Delay>

	static int flashDone = 0;
	if(!flashDone){
 8001198:	4b09      	ldr	r3, [pc, #36]	; (80011c0 <main+0xb8>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d105      	bne.n	80011ac <main+0xa4>
		flashDone = flashDemoLoop();
 80011a0:	f7ff ff76 	bl	8001090 <flashDemoLoop>
 80011a4:	4603      	mov	r3, r0
 80011a6:	4a06      	ldr	r2, [pc, #24]	; (80011c0 <main+0xb8>)
 80011a8:	6013      	str	r3, [r2, #0]
		continue;
 80011aa:	e001      	b.n	80011b0 <main+0xa8>
	}

	uartDemoLoop();
 80011ac:	f001 f89c 	bl	80022e8 <uartDemoLoop>
  {
 80011b0:	e7db      	b.n	800116a <main+0x62>
 80011b2:	bf00      	nop
 80011b4:	20000140 	.word	0x20000140
 80011b8:	08006b54 	.word	0x08006b54
 80011bc:	08006b6c 	.word	0x08006b6c
 80011c0:	20000260 	.word	0x20000260

080011c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b094      	sub	sp, #80	; 0x50
 80011c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ca:	f107 0320 	add.w	r3, r7, #32
 80011ce:	2230      	movs	r2, #48	; 0x30
 80011d0:	2100      	movs	r1, #0
 80011d2:	4618      	mov	r0, r3
 80011d4:	f004 fa7a 	bl	80056cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011d8:	f107 030c 	add.w	r3, r7, #12
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	60da      	str	r2, [r3, #12]
 80011e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011e8:	2300      	movs	r3, #0
 80011ea:	60bb      	str	r3, [r7, #8]
 80011ec:	4b28      	ldr	r3, [pc, #160]	; (8001290 <SystemClock_Config+0xcc>)
 80011ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f0:	4a27      	ldr	r2, [pc, #156]	; (8001290 <SystemClock_Config+0xcc>)
 80011f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011f6:	6413      	str	r3, [r2, #64]	; 0x40
 80011f8:	4b25      	ldr	r3, [pc, #148]	; (8001290 <SystemClock_Config+0xcc>)
 80011fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001200:	60bb      	str	r3, [r7, #8]
 8001202:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001204:	2300      	movs	r3, #0
 8001206:	607b      	str	r3, [r7, #4]
 8001208:	4b22      	ldr	r3, [pc, #136]	; (8001294 <SystemClock_Config+0xd0>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a21      	ldr	r2, [pc, #132]	; (8001294 <SystemClock_Config+0xd0>)
 800120e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001212:	6013      	str	r3, [r2, #0]
 8001214:	4b1f      	ldr	r3, [pc, #124]	; (8001294 <SystemClock_Config+0xd0>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800121c:	607b      	str	r3, [r7, #4]
 800121e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001220:	2301      	movs	r3, #1
 8001222:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001224:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001228:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800122a:	2302      	movs	r3, #2
 800122c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800122e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001232:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001234:	2308      	movs	r3, #8
 8001236:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001238:	23a8      	movs	r3, #168	; 0xa8
 800123a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800123c:	2302      	movs	r3, #2
 800123e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001240:	2304      	movs	r3, #4
 8001242:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001244:	f107 0320 	add.w	r3, r7, #32
 8001248:	4618      	mov	r0, r3
 800124a:	f001 fe35 	bl	8002eb8 <HAL_RCC_OscConfig>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001254:	f000 fa92 	bl	800177c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001258:	230f      	movs	r3, #15
 800125a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800125c:	2302      	movs	r3, #2
 800125e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001260:	2300      	movs	r3, #0
 8001262:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001264:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001268:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800126a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800126e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001270:	f107 030c 	add.w	r3, r7, #12
 8001274:	2105      	movs	r1, #5
 8001276:	4618      	mov	r0, r3
 8001278:	f002 f896 	bl	80033a8 <HAL_RCC_ClockConfig>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001282:	f000 fa7b 	bl	800177c <Error_Handler>
  }
}
 8001286:	bf00      	nop
 8001288:	3750      	adds	r7, #80	; 0x50
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40023800 	.word	0x40023800
 8001294:	40007000 	.word	0x40007000

08001298 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800129c:	4b12      	ldr	r3, [pc, #72]	; (80012e8 <MX_I2C1_Init+0x50>)
 800129e:	4a13      	ldr	r2, [pc, #76]	; (80012ec <MX_I2C1_Init+0x54>)
 80012a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012a2:	4b11      	ldr	r3, [pc, #68]	; (80012e8 <MX_I2C1_Init+0x50>)
 80012a4:	4a12      	ldr	r2, [pc, #72]	; (80012f0 <MX_I2C1_Init+0x58>)
 80012a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012a8:	4b0f      	ldr	r3, [pc, #60]	; (80012e8 <MX_I2C1_Init+0x50>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012ae:	4b0e      	ldr	r3, [pc, #56]	; (80012e8 <MX_I2C1_Init+0x50>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012b4:	4b0c      	ldr	r3, [pc, #48]	; (80012e8 <MX_I2C1_Init+0x50>)
 80012b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012bc:	4b0a      	ldr	r3, [pc, #40]	; (80012e8 <MX_I2C1_Init+0x50>)
 80012be:	2200      	movs	r2, #0
 80012c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012c2:	4b09      	ldr	r3, [pc, #36]	; (80012e8 <MX_I2C1_Init+0x50>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012c8:	4b07      	ldr	r3, [pc, #28]	; (80012e8 <MX_I2C1_Init+0x50>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012ce:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <MX_I2C1_Init+0x50>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012d4:	4804      	ldr	r0, [pc, #16]	; (80012e8 <MX_I2C1_Init+0x50>)
 80012d6:	f001 fcab 	bl	8002c30 <HAL_I2C_Init>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012e0:	f000 fa4c 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012e4:	bf00      	nop
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	20000094 	.word	0x20000094
 80012ec:	40005400 	.word	0x40005400
 80012f0:	000186a0 	.word	0x000186a0

080012f4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80012f8:	4b1b      	ldr	r3, [pc, #108]	; (8001368 <MX_SPI1_Init+0x74>)
 80012fa:	4a1c      	ldr	r2, [pc, #112]	; (800136c <MX_SPI1_Init+0x78>)
 80012fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012fe:	4b1a      	ldr	r3, [pc, #104]	; (8001368 <MX_SPI1_Init+0x74>)
 8001300:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001304:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001306:	4b18      	ldr	r3, [pc, #96]	; (8001368 <MX_SPI1_Init+0x74>)
 8001308:	2200      	movs	r2, #0
 800130a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800130c:	4b16      	ldr	r3, [pc, #88]	; (8001368 <MX_SPI1_Init+0x74>)
 800130e:	2200      	movs	r2, #0
 8001310:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001312:	4b15      	ldr	r3, [pc, #84]	; (8001368 <MX_SPI1_Init+0x74>)
 8001314:	2202      	movs	r2, #2
 8001316:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001318:	4b13      	ldr	r3, [pc, #76]	; (8001368 <MX_SPI1_Init+0x74>)
 800131a:	2201      	movs	r2, #1
 800131c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800131e:	4b12      	ldr	r3, [pc, #72]	; (8001368 <MX_SPI1_Init+0x74>)
 8001320:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001324:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001326:	4b10      	ldr	r3, [pc, #64]	; (8001368 <MX_SPI1_Init+0x74>)
 8001328:	2200      	movs	r2, #0
 800132a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800132c:	4b0e      	ldr	r3, [pc, #56]	; (8001368 <MX_SPI1_Init+0x74>)
 800132e:	2200      	movs	r2, #0
 8001330:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001332:	4b0d      	ldr	r3, [pc, #52]	; (8001368 <MX_SPI1_Init+0x74>)
 8001334:	2200      	movs	r2, #0
 8001336:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001338:	4b0b      	ldr	r3, [pc, #44]	; (8001368 <MX_SPI1_Init+0x74>)
 800133a:	2200      	movs	r2, #0
 800133c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800133e:	4b0a      	ldr	r3, [pc, #40]	; (8001368 <MX_SPI1_Init+0x74>)
 8001340:	220a      	movs	r2, #10
 8001342:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001344:	4808      	ldr	r0, [pc, #32]	; (8001368 <MX_SPI1_Init+0x74>)
 8001346:	f002 fa4d 	bl	80037e4 <HAL_SPI_Init>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001350:	f000 fa14 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  __HAL_SPI_ENABLE(&hspi1);
 8001354:	4b04      	ldr	r3, [pc, #16]	; (8001368 <MX_SPI1_Init+0x74>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	4b03      	ldr	r3, [pc, #12]	; (8001368 <MX_SPI1_Init+0x74>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001362:	601a      	str	r2, [r3, #0]
  /* USER CODE END SPI1_Init 2 */

}
 8001364:	bf00      	nop
 8001366:	bd80      	pop	{r7, pc}
 8001368:	200000e8 	.word	0x200000e8
 800136c:	40013000 	.word	0x40013000

08001370 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b092      	sub	sp, #72	; 0x48
 8001374:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001376:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001380:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	609a      	str	r2, [r3, #8]
 800138c:	60da      	str	r2, [r3, #12]
 800138e:	611a      	str	r2, [r3, #16]
 8001390:	615a      	str	r2, [r3, #20]
 8001392:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001394:	1d3b      	adds	r3, r7, #4
 8001396:	2220      	movs	r2, #32
 8001398:	2100      	movs	r1, #0
 800139a:	4618      	mov	r0, r3
 800139c:	f004 f996 	bl	80056cc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013a0:	4b32      	ldr	r3, [pc, #200]	; (800146c <MX_TIM1_Init+0xfc>)
 80013a2:	4a33      	ldr	r2, [pc, #204]	; (8001470 <MX_TIM1_Init+0x100>)
 80013a4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80013a6:	4b31      	ldr	r3, [pc, #196]	; (800146c <MX_TIM1_Init+0xfc>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ac:	4b2f      	ldr	r3, [pc, #188]	; (800146c <MX_TIM1_Init+0xfc>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80013b2:	4b2e      	ldr	r3, [pc, #184]	; (800146c <MX_TIM1_Init+0xfc>)
 80013b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013b8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ba:	4b2c      	ldr	r3, [pc, #176]	; (800146c <MX_TIM1_Init+0xfc>)
 80013bc:	2200      	movs	r2, #0
 80013be:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013c0:	4b2a      	ldr	r3, [pc, #168]	; (800146c <MX_TIM1_Init+0xfc>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013c6:	4b29      	ldr	r3, [pc, #164]	; (800146c <MX_TIM1_Init+0xfc>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80013cc:	4827      	ldr	r0, [pc, #156]	; (800146c <MX_TIM1_Init+0xfc>)
 80013ce:	f002 fada 	bl	8003986 <HAL_TIM_PWM_Init>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80013d8:	f000 f9d0 	bl	800177c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013dc:	2300      	movs	r3, #0
 80013de:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013e0:	2300      	movs	r3, #0
 80013e2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013e8:	4619      	mov	r1, r3
 80013ea:	4820      	ldr	r0, [pc, #128]	; (800146c <MX_TIM1_Init+0xfc>)
 80013ec:	f002 ff8a 	bl	8004304 <HAL_TIMEx_MasterConfigSynchronization>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80013f6:	f000 f9c1 	bl	800177c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013fa:	2360      	movs	r3, #96	; 0x60
 80013fc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 65535;
 80013fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001402:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001404:	2300      	movs	r3, #0
 8001406:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001408:	2300      	movs	r3, #0
 800140a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800140c:	2300      	movs	r3, #0
 800140e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001410:	2300      	movs	r3, #0
 8001412:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001414:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001418:	220c      	movs	r2, #12
 800141a:	4619      	mov	r1, r3
 800141c:	4813      	ldr	r0, [pc, #76]	; (800146c <MX_TIM1_Init+0xfc>)
 800141e:	f002 fc39 	bl	8003c94 <HAL_TIM_PWM_ConfigChannel>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8001428:	f000 f9a8 	bl	800177c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800142c:	2300      	movs	r3, #0
 800142e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001430:	2300      	movs	r3, #0
 8001432:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001434:	2300      	movs	r3, #0
 8001436:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001438:	2300      	movs	r3, #0
 800143a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800143c:	2300      	movs	r3, #0
 800143e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001440:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001444:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001446:	2300      	movs	r3, #0
 8001448:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800144a:	1d3b      	adds	r3, r7, #4
 800144c:	4619      	mov	r1, r3
 800144e:	4807      	ldr	r0, [pc, #28]	; (800146c <MX_TIM1_Init+0xfc>)
 8001450:	f002 ffd4 	bl	80043fc <HAL_TIMEx_ConfigBreakDeadTime>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 800145a:	f000 f98f 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800145e:	4803      	ldr	r0, [pc, #12]	; (800146c <MX_TIM1_Init+0xfc>)
 8001460:	f000 fa98 	bl	8001994 <HAL_TIM_MspPostInit>

}
 8001464:	bf00      	nop
 8001466:	3748      	adds	r7, #72	; 0x48
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	20000140 	.word	0x20000140
 8001470:	40010000 	.word	0x40010000

08001474 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001478:	4b15      	ldr	r3, [pc, #84]	; (80014d0 <MX_USART1_UART_Init+0x5c>)
 800147a:	4a16      	ldr	r2, [pc, #88]	; (80014d4 <MX_USART1_UART_Init+0x60>)
 800147c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800147e:	4b14      	ldr	r3, [pc, #80]	; (80014d0 <MX_USART1_UART_Init+0x5c>)
 8001480:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001484:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001486:	4b12      	ldr	r3, [pc, #72]	; (80014d0 <MX_USART1_UART_Init+0x5c>)
 8001488:	2200      	movs	r2, #0
 800148a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800148c:	4b10      	ldr	r3, [pc, #64]	; (80014d0 <MX_USART1_UART_Init+0x5c>)
 800148e:	2200      	movs	r2, #0
 8001490:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001492:	4b0f      	ldr	r3, [pc, #60]	; (80014d0 <MX_USART1_UART_Init+0x5c>)
 8001494:	2200      	movs	r2, #0
 8001496:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001498:	4b0d      	ldr	r3, [pc, #52]	; (80014d0 <MX_USART1_UART_Init+0x5c>)
 800149a:	220c      	movs	r2, #12
 800149c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800149e:	4b0c      	ldr	r3, [pc, #48]	; (80014d0 <MX_USART1_UART_Init+0x5c>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014a4:	4b0a      	ldr	r3, [pc, #40]	; (80014d0 <MX_USART1_UART_Init+0x5c>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014aa:	4809      	ldr	r0, [pc, #36]	; (80014d0 <MX_USART1_UART_Init+0x5c>)
 80014ac:	f002 fff8 	bl	80044a0 <HAL_UART_Init>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80014b6:	f000 f961 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE); //turn on rx interrupt forever
 80014ba:	4b05      	ldr	r3, [pc, #20]	; (80014d0 <MX_USART1_UART_Init+0x5c>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	68da      	ldr	r2, [r3, #12]
 80014c0:	4b03      	ldr	r3, [pc, #12]	; (80014d0 <MX_USART1_UART_Init+0x5c>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f042 0220 	orr.w	r2, r2, #32
 80014c8:	60da      	str	r2, [r3, #12]
  /* USER CODE END USART1_Init 2 */

}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	20000188 	.word	0x20000188
 80014d4:	40011000 	.word	0x40011000

080014d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014dc:	4b15      	ldr	r3, [pc, #84]	; (8001534 <MX_USART2_UART_Init+0x5c>)
 80014de:	4a16      	ldr	r2, [pc, #88]	; (8001538 <MX_USART2_UART_Init+0x60>)
 80014e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014e2:	4b14      	ldr	r3, [pc, #80]	; (8001534 <MX_USART2_UART_Init+0x5c>)
 80014e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014ea:	4b12      	ldr	r3, [pc, #72]	; (8001534 <MX_USART2_UART_Init+0x5c>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014f0:	4b10      	ldr	r3, [pc, #64]	; (8001534 <MX_USART2_UART_Init+0x5c>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014f6:	4b0f      	ldr	r3, [pc, #60]	; (8001534 <MX_USART2_UART_Init+0x5c>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014fc:	4b0d      	ldr	r3, [pc, #52]	; (8001534 <MX_USART2_UART_Init+0x5c>)
 80014fe:	220c      	movs	r2, #12
 8001500:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001502:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <MX_USART2_UART_Init+0x5c>)
 8001504:	2200      	movs	r2, #0
 8001506:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001508:	4b0a      	ldr	r3, [pc, #40]	; (8001534 <MX_USART2_UART_Init+0x5c>)
 800150a:	2200      	movs	r2, #0
 800150c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800150e:	4809      	ldr	r0, [pc, #36]	; (8001534 <MX_USART2_UART_Init+0x5c>)
 8001510:	f002 ffc6 	bl	80044a0 <HAL_UART_Init>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800151a:	f000 f92f 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE); //turn on rx interrupt forever
 800151e:	4b05      	ldr	r3, [pc, #20]	; (8001534 <MX_USART2_UART_Init+0x5c>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	68da      	ldr	r2, [r3, #12]
 8001524:	4b03      	ldr	r3, [pc, #12]	; (8001534 <MX_USART2_UART_Init+0x5c>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f042 0220 	orr.w	r2, r2, #32
 800152c:	60da      	str	r2, [r3, #12]
  /* USER CODE END USART2_Init 2 */

}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	200001cc 	.word	0x200001cc
 8001538:	40004400 	.word	0x40004400

0800153c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08a      	sub	sp, #40	; 0x28
 8001540:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001542:	f107 0314 	add.w	r3, r7, #20
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	605a      	str	r2, [r3, #4]
 800154c:	609a      	str	r2, [r3, #8]
 800154e:	60da      	str	r2, [r3, #12]
 8001550:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	613b      	str	r3, [r7, #16]
 8001556:	4b49      	ldr	r3, [pc, #292]	; (800167c <MX_GPIO_Init+0x140>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	4a48      	ldr	r2, [pc, #288]	; (800167c <MX_GPIO_Init+0x140>)
 800155c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001560:	6313      	str	r3, [r2, #48]	; 0x30
 8001562:	4b46      	ldr	r3, [pc, #280]	; (800167c <MX_GPIO_Init+0x140>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800156a:	613b      	str	r3, [r7, #16]
 800156c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	60fb      	str	r3, [r7, #12]
 8001572:	4b42      	ldr	r3, [pc, #264]	; (800167c <MX_GPIO_Init+0x140>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	4a41      	ldr	r2, [pc, #260]	; (800167c <MX_GPIO_Init+0x140>)
 8001578:	f043 0301 	orr.w	r3, r3, #1
 800157c:	6313      	str	r3, [r2, #48]	; 0x30
 800157e:	4b3f      	ldr	r3, [pc, #252]	; (800167c <MX_GPIO_Init+0x140>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	60bb      	str	r3, [r7, #8]
 800158e:	4b3b      	ldr	r3, [pc, #236]	; (800167c <MX_GPIO_Init+0x140>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	4a3a      	ldr	r2, [pc, #232]	; (800167c <MX_GPIO_Init+0x140>)
 8001594:	f043 0310 	orr.w	r3, r3, #16
 8001598:	6313      	str	r3, [r2, #48]	; 0x30
 800159a:	4b38      	ldr	r3, [pc, #224]	; (800167c <MX_GPIO_Init+0x140>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	f003 0310 	and.w	r3, r3, #16
 80015a2:	60bb      	str	r3, [r7, #8]
 80015a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	607b      	str	r3, [r7, #4]
 80015aa:	4b34      	ldr	r3, [pc, #208]	; (800167c <MX_GPIO_Init+0x140>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	4a33      	ldr	r2, [pc, #204]	; (800167c <MX_GPIO_Init+0x140>)
 80015b0:	f043 0308 	orr.w	r3, r3, #8
 80015b4:	6313      	str	r3, [r2, #48]	; 0x30
 80015b6:	4b31      	ldr	r3, [pc, #196]	; (800167c <MX_GPIO_Init+0x140>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	f003 0308 	and.w	r3, r3, #8
 80015be:	607b      	str	r3, [r7, #4]
 80015c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	603b      	str	r3, [r7, #0]
 80015c6:	4b2d      	ldr	r3, [pc, #180]	; (800167c <MX_GPIO_Init+0x140>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	4a2c      	ldr	r2, [pc, #176]	; (800167c <MX_GPIO_Init+0x140>)
 80015cc:	f043 0302 	orr.w	r3, r3, #2
 80015d0:	6313      	str	r3, [r2, #48]	; 0x30
 80015d2:	4b2a      	ldr	r3, [pc, #168]	; (800167c <MX_GPIO_Init+0x140>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	f003 0302 	and.w	r3, r3, #2
 80015da:	603b      	str	r3, [r7, #0]
 80015dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LCD_RES_Pin, GPIO_PIN_RESET);
 80015de:	2200      	movs	r2, #0
 80015e0:	f241 0110 	movw	r1, #4112	; 0x1010
 80015e4:	4826      	ldr	r0, [pc, #152]	; (8001680 <MX_GPIO_Init+0x144>)
 80015e6:	f001 fae5 	bl	8002bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_5, GPIO_PIN_RESET);
 80015ea:	2200      	movs	r2, #0
 80015ec:	2128      	movs	r1, #40	; 0x28
 80015ee:	4825      	ldr	r0, [pc, #148]	; (8001684 <MX_GPIO_Init+0x148>)
 80015f0:	f001 fae0 	bl	8002bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80015f4:	2310      	movs	r3, #16
 80015f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f8:	2301      	movs	r3, #1
 80015fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001600:	2300      	movs	r3, #0
 8001602:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001604:	f107 0314 	add.w	r3, r7, #20
 8001608:	4619      	mov	r1, r3
 800160a:	481d      	ldr	r0, [pc, #116]	; (8001680 <MX_GPIO_Init+0x144>)
 800160c:	f001 f936 	bl	800287c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RES_Pin */
  GPIO_InitStruct.Pin = LCD_RES_Pin;
 8001610:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001614:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001616:	2301      	movs	r3, #1
 8001618:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800161a:	2301      	movs	r3, #1
 800161c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800161e:	2303      	movs	r3, #3
 8001620:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_RES_GPIO_Port, &GPIO_InitStruct);
 8001622:	f107 0314 	add.w	r3, r7, #20
 8001626:	4619      	mov	r1, r3
 8001628:	4815      	ldr	r0, [pc, #84]	; (8001680 <MX_GPIO_Init+0x144>)
 800162a:	f001 f927 	bl	800287c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800162e:	2328      	movs	r3, #40	; 0x28
 8001630:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001632:	2301      	movs	r3, #1
 8001634:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001636:	2300      	movs	r3, #0
 8001638:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163a:	2300      	movs	r3, #0
 800163c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800163e:	f107 0314 	add.w	r3, r7, #20
 8001642:	4619      	mov	r1, r3
 8001644:	480f      	ldr	r0, [pc, #60]	; (8001684 <MX_GPIO_Init+0x148>)
 8001646:	f001 f919 	bl	800287c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800164a:	2310      	movs	r3, #16
 800164c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800164e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001652:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001654:	2300      	movs	r3, #0
 8001656:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001658:	f107 0314 	add.w	r3, r7, #20
 800165c:	4619      	mov	r1, r3
 800165e:	4809      	ldr	r0, [pc, #36]	; (8001684 <MX_GPIO_Init+0x148>)
 8001660:	f001 f90c 	bl	800287c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001664:	2200      	movs	r2, #0
 8001666:	2100      	movs	r1, #0
 8001668:	200a      	movs	r0, #10
 800166a:	f001 f83e 	bl	80026ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800166e:	200a      	movs	r0, #10
 8001670:	f001 f857 	bl	8002722 <HAL_NVIC_EnableIRQ>

}
 8001674:	bf00      	nop
 8001676:	3728      	adds	r7, #40	; 0x28
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	40023800 	.word	0x40023800
 8001680:	40020000 	.word	0x40020000
 8001684:	40020400 	.word	0x40020400

08001688 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b08e      	sub	sp, #56	; 0x38
 800168c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800168e:	f107 031c 	add.w	r3, r7, #28
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]
 8001696:	605a      	str	r2, [r3, #4]
 8001698:	609a      	str	r2, [r3, #8]
 800169a:	60da      	str	r2, [r3, #12]
 800169c:	611a      	str	r2, [r3, #16]
 800169e:	615a      	str	r2, [r3, #20]
 80016a0:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 80016a2:	463b      	mov	r3, r7
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	611a      	str	r2, [r3, #16]
 80016b0:	615a      	str	r2, [r3, #20]
 80016b2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80016b4:	4b2f      	ldr	r3, [pc, #188]	; (8001774 <MX_FSMC_Init+0xec>)
 80016b6:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80016ba:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80016bc:	4b2d      	ldr	r3, [pc, #180]	; (8001774 <MX_FSMC_Init+0xec>)
 80016be:	4a2e      	ldr	r2, [pc, #184]	; (8001778 <MX_FSMC_Init+0xf0>)
 80016c0:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80016c2:	4b2c      	ldr	r3, [pc, #176]	; (8001774 <MX_FSMC_Init+0xec>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80016c8:	4b2a      	ldr	r3, [pc, #168]	; (8001774 <MX_FSMC_Init+0xec>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80016ce:	4b29      	ldr	r3, [pc, #164]	; (8001774 <MX_FSMC_Init+0xec>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80016d4:	4b27      	ldr	r3, [pc, #156]	; (8001774 <MX_FSMC_Init+0xec>)
 80016d6:	2210      	movs	r2, #16
 80016d8:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80016da:	4b26      	ldr	r3, [pc, #152]	; (8001774 <MX_FSMC_Init+0xec>)
 80016dc:	2200      	movs	r2, #0
 80016de:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80016e0:	4b24      	ldr	r3, [pc, #144]	; (8001774 <MX_FSMC_Init+0xec>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80016e6:	4b23      	ldr	r3, [pc, #140]	; (8001774 <MX_FSMC_Init+0xec>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80016ec:	4b21      	ldr	r3, [pc, #132]	; (8001774 <MX_FSMC_Init+0xec>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80016f2:	4b20      	ldr	r3, [pc, #128]	; (8001774 <MX_FSMC_Init+0xec>)
 80016f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80016f8:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80016fa:	4b1e      	ldr	r3, [pc, #120]	; (8001774 <MX_FSMC_Init+0xec>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8001700:	4b1c      	ldr	r3, [pc, #112]	; (8001774 <MX_FSMC_Init+0xec>)
 8001702:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001706:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001708:	4b1a      	ldr	r3, [pc, #104]	; (8001774 <MX_FSMC_Init+0xec>)
 800170a:	2200      	movs	r2, #0
 800170c:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800170e:	4b19      	ldr	r3, [pc, #100]	; (8001774 <MX_FSMC_Init+0xec>)
 8001710:	2200      	movs	r2, #0
 8001712:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001714:	4b17      	ldr	r3, [pc, #92]	; (8001774 <MX_FSMC_Init+0xec>)
 8001716:	2200      	movs	r2, #0
 8001718:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 800171a:	230f      	movs	r3, #15
 800171c:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 800171e:	230f      	movs	r3, #15
 8001720:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 40;
 8001722:	2328      	movs	r3, #40	; 0x28
 8001724:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 8001726:	2300      	movs	r3, #0
 8001728:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 800172a:	2310      	movs	r3, #16
 800172c:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 800172e:	2311      	movs	r3, #17
 8001730:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001732:	2300      	movs	r3, #0
 8001734:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 2;
 8001736:	2302      	movs	r3, #2
 8001738:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 800173a:	230f      	movs	r3, #15
 800173c:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 4;
 800173e:	2304      	movs	r3, #4
 8001740:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8001742:	2300      	movs	r3, #0
 8001744:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8001746:	2310      	movs	r3, #16
 8001748:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 800174a:	2311      	movs	r3, #17
 800174c:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 800174e:	2300      	movs	r3, #0
 8001750:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8001752:	463a      	mov	r2, r7
 8001754:	f107 031c 	add.w	r3, r7, #28
 8001758:	4619      	mov	r1, r3
 800175a:	4806      	ldr	r0, [pc, #24]	; (8001774 <MX_FSMC_Init+0xec>)
 800175c:	f002 f8cb 	bl	80038f6 <HAL_SRAM_Init>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8001766:	f000 f809 	bl	800177c <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800176a:	bf00      	nop
 800176c:	3738      	adds	r7, #56	; 0x38
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	20000210 	.word	0x20000210
 8001778:	a0000104 	.word	0xa0000104

0800177c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001780:	b672      	cpsid	i
}
 8001782:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001784:	e7fe      	b.n	8001784 <Error_Handler+0x8>
	...

08001788 <SPI1_Transfer>:
#include <stm32f4xx_hal_gpio.h>
#include <stdio.h>


uint8_t SPI1_Transfer(uint8_t data)
{
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	71fb      	strb	r3, [r7, #7]
	SPI_TypeDef *SPI1inst = hspi1.Instance;
 8001792:	4b12      	ldr	r3, [pc, #72]	; (80017dc <SPI1_Transfer+0x54>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	60fb      	str	r3, [r7, #12]
    SPI1inst->DR = data;
 8001798:	79fa      	ldrb	r2, [r7, #7]
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	60da      	str	r2, [r3, #12]
    while (!(SPI1inst->SR & (SPI_FLAG_TXE)));
 800179e:	bf00      	nop
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	f003 0302 	and.w	r3, r3, #2
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d0f9      	beq.n	80017a0 <SPI1_Transfer+0x18>
    while (!(SPI1inst->SR & (SPI_FLAG_RXNE)));
 80017ac:	bf00      	nop
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d0f9      	beq.n	80017ae <SPI1_Transfer+0x26>
    while (SPI1inst->SR & (SPI_FLAG_BSY));
 80017ba:	bf00      	nop
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d1f9      	bne.n	80017bc <SPI1_Transfer+0x34>
    return SPI1inst->DR;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	b2db      	uxtb	r3, r3
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3714      	adds	r7, #20
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	200000e8 	.word	0x200000e8

080017e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	607b      	str	r3, [r7, #4]
 80017ea:	4b10      	ldr	r3, [pc, #64]	; (800182c <HAL_MspInit+0x4c>)
 80017ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ee:	4a0f      	ldr	r2, [pc, #60]	; (800182c <HAL_MspInit+0x4c>)
 80017f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017f4:	6453      	str	r3, [r2, #68]	; 0x44
 80017f6:	4b0d      	ldr	r3, [pc, #52]	; (800182c <HAL_MspInit+0x4c>)
 80017f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017fe:	607b      	str	r3, [r7, #4]
 8001800:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	603b      	str	r3, [r7, #0]
 8001806:	4b09      	ldr	r3, [pc, #36]	; (800182c <HAL_MspInit+0x4c>)
 8001808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180a:	4a08      	ldr	r2, [pc, #32]	; (800182c <HAL_MspInit+0x4c>)
 800180c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001810:	6413      	str	r3, [r2, #64]	; 0x40
 8001812:	4b06      	ldr	r3, [pc, #24]	; (800182c <HAL_MspInit+0x4c>)
 8001814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800181a:	603b      	str	r3, [r7, #0]
 800181c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800181e:	bf00      	nop
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	40023800 	.word	0x40023800

08001830 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b08a      	sub	sp, #40	; 0x28
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001838:	f107 0314 	add.w	r3, r7, #20
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	605a      	str	r2, [r3, #4]
 8001842:	609a      	str	r2, [r3, #8]
 8001844:	60da      	str	r2, [r3, #12]
 8001846:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a19      	ldr	r2, [pc, #100]	; (80018b4 <HAL_I2C_MspInit+0x84>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d12b      	bne.n	80018aa <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	613b      	str	r3, [r7, #16]
 8001856:	4b18      	ldr	r3, [pc, #96]	; (80018b8 <HAL_I2C_MspInit+0x88>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	4a17      	ldr	r2, [pc, #92]	; (80018b8 <HAL_I2C_MspInit+0x88>)
 800185c:	f043 0302 	orr.w	r3, r3, #2
 8001860:	6313      	str	r3, [r2, #48]	; 0x30
 8001862:	4b15      	ldr	r3, [pc, #84]	; (80018b8 <HAL_I2C_MspInit+0x88>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	613b      	str	r3, [r7, #16]
 800186c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800186e:	23c0      	movs	r3, #192	; 0xc0
 8001870:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001872:	2312      	movs	r3, #18
 8001874:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001876:	2301      	movs	r3, #1
 8001878:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800187a:	2303      	movs	r3, #3
 800187c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800187e:	2304      	movs	r3, #4
 8001880:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001882:	f107 0314 	add.w	r3, r7, #20
 8001886:	4619      	mov	r1, r3
 8001888:	480c      	ldr	r0, [pc, #48]	; (80018bc <HAL_I2C_MspInit+0x8c>)
 800188a:	f000 fff7 	bl	800287c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	60fb      	str	r3, [r7, #12]
 8001892:	4b09      	ldr	r3, [pc, #36]	; (80018b8 <HAL_I2C_MspInit+0x88>)
 8001894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001896:	4a08      	ldr	r2, [pc, #32]	; (80018b8 <HAL_I2C_MspInit+0x88>)
 8001898:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800189c:	6413      	str	r3, [r2, #64]	; 0x40
 800189e:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <HAL_I2C_MspInit+0x88>)
 80018a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80018aa:	bf00      	nop
 80018ac:	3728      	adds	r7, #40	; 0x28
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	40005400 	.word	0x40005400
 80018b8:	40023800 	.word	0x40023800
 80018bc:	40020400 	.word	0x40020400

080018c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b08a      	sub	sp, #40	; 0x28
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c8:	f107 0314 	add.w	r3, r7, #20
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	605a      	str	r2, [r3, #4]
 80018d2:	609a      	str	r2, [r3, #8]
 80018d4:	60da      	str	r2, [r3, #12]
 80018d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a19      	ldr	r2, [pc, #100]	; (8001944 <HAL_SPI_MspInit+0x84>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d12b      	bne.n	800193a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	613b      	str	r3, [r7, #16]
 80018e6:	4b18      	ldr	r3, [pc, #96]	; (8001948 <HAL_SPI_MspInit+0x88>)
 80018e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ea:	4a17      	ldr	r2, [pc, #92]	; (8001948 <HAL_SPI_MspInit+0x88>)
 80018ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018f0:	6453      	str	r3, [r2, #68]	; 0x44
 80018f2:	4b15      	ldr	r3, [pc, #84]	; (8001948 <HAL_SPI_MspInit+0x88>)
 80018f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018fa:	613b      	str	r3, [r7, #16]
 80018fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018fe:	2300      	movs	r3, #0
 8001900:	60fb      	str	r3, [r7, #12]
 8001902:	4b11      	ldr	r3, [pc, #68]	; (8001948 <HAL_SPI_MspInit+0x88>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001906:	4a10      	ldr	r2, [pc, #64]	; (8001948 <HAL_SPI_MspInit+0x88>)
 8001908:	f043 0301 	orr.w	r3, r3, #1
 800190c:	6313      	str	r3, [r2, #48]	; 0x30
 800190e:	4b0e      	ldr	r3, [pc, #56]	; (8001948 <HAL_SPI_MspInit+0x88>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001912:	f003 0301 	and.w	r3, r3, #1
 8001916:	60fb      	str	r3, [r7, #12]
 8001918:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800191a:	23e0      	movs	r3, #224	; 0xe0
 800191c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191e:	2302      	movs	r3, #2
 8001920:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001922:	2300      	movs	r3, #0
 8001924:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001926:	2303      	movs	r3, #3
 8001928:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800192a:	2305      	movs	r3, #5
 800192c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800192e:	f107 0314 	add.w	r3, r7, #20
 8001932:	4619      	mov	r1, r3
 8001934:	4805      	ldr	r0, [pc, #20]	; (800194c <HAL_SPI_MspInit+0x8c>)
 8001936:	f000 ffa1 	bl	800287c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800193a:	bf00      	nop
 800193c:	3728      	adds	r7, #40	; 0x28
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40013000 	.word	0x40013000
 8001948:	40023800 	.word	0x40023800
 800194c:	40020000 	.word	0x40020000

08001950 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001950:	b480      	push	{r7}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a0b      	ldr	r2, [pc, #44]	; (800198c <HAL_TIM_PWM_MspInit+0x3c>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d10d      	bne.n	800197e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001962:	2300      	movs	r3, #0
 8001964:	60fb      	str	r3, [r7, #12]
 8001966:	4b0a      	ldr	r3, [pc, #40]	; (8001990 <HAL_TIM_PWM_MspInit+0x40>)
 8001968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196a:	4a09      	ldr	r2, [pc, #36]	; (8001990 <HAL_TIM_PWM_MspInit+0x40>)
 800196c:	f043 0301 	orr.w	r3, r3, #1
 8001970:	6453      	str	r3, [r2, #68]	; 0x44
 8001972:	4b07      	ldr	r3, [pc, #28]	; (8001990 <HAL_TIM_PWM_MspInit+0x40>)
 8001974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800197e:	bf00      	nop
 8001980:	3714      	adds	r7, #20
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	40010000 	.word	0x40010000
 8001990:	40023800 	.word	0x40023800

08001994 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b088      	sub	sp, #32
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800199c:	f107 030c 	add.w	r3, r7, #12
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	605a      	str	r2, [r3, #4]
 80019a6:	609a      	str	r2, [r3, #8]
 80019a8:	60da      	str	r2, [r3, #12]
 80019aa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a12      	ldr	r2, [pc, #72]	; (80019fc <HAL_TIM_MspPostInit+0x68>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d11e      	bne.n	80019f4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	60bb      	str	r3, [r7, #8]
 80019ba:	4b11      	ldr	r3, [pc, #68]	; (8001a00 <HAL_TIM_MspPostInit+0x6c>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019be:	4a10      	ldr	r2, [pc, #64]	; (8001a00 <HAL_TIM_MspPostInit+0x6c>)
 80019c0:	f043 0301 	orr.w	r3, r3, #1
 80019c4:	6313      	str	r3, [r2, #48]	; 0x30
 80019c6:	4b0e      	ldr	r3, [pc, #56]	; (8001a00 <HAL_TIM_MspPostInit+0x6c>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	60bb      	str	r3, [r7, #8]
 80019d0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = LCD_BL_Pin;
 80019d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80019d6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d8:	2302      	movs	r3, #2
 80019da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019dc:	2300      	movs	r3, #0
 80019de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e0:	2300      	movs	r3, #0
 80019e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80019e4:	2301      	movs	r3, #1
 80019e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 80019e8:	f107 030c 	add.w	r3, r7, #12
 80019ec:	4619      	mov	r1, r3
 80019ee:	4805      	ldr	r0, [pc, #20]	; (8001a04 <HAL_TIM_MspPostInit+0x70>)
 80019f0:	f000 ff44 	bl	800287c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80019f4:	bf00      	nop
 80019f6:	3720      	adds	r7, #32
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	40010000 	.word	0x40010000
 8001a00:	40023800 	.word	0x40023800
 8001a04:	40020000 	.word	0x40020000

08001a08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b08c      	sub	sp, #48	; 0x30
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a10:	f107 031c 	add.w	r3, r7, #28
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	605a      	str	r2, [r3, #4]
 8001a1a:	609a      	str	r2, [r3, #8]
 8001a1c:	60da      	str	r2, [r3, #12]
 8001a1e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a3a      	ldr	r2, [pc, #232]	; (8001b10 <HAL_UART_MspInit+0x108>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d135      	bne.n	8001a96 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	61bb      	str	r3, [r7, #24]
 8001a2e:	4b39      	ldr	r3, [pc, #228]	; (8001b14 <HAL_UART_MspInit+0x10c>)
 8001a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a32:	4a38      	ldr	r2, [pc, #224]	; (8001b14 <HAL_UART_MspInit+0x10c>)
 8001a34:	f043 0310 	orr.w	r3, r3, #16
 8001a38:	6453      	str	r3, [r2, #68]	; 0x44
 8001a3a:	4b36      	ldr	r3, [pc, #216]	; (8001b14 <HAL_UART_MspInit+0x10c>)
 8001a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3e:	f003 0310 	and.w	r3, r3, #16
 8001a42:	61bb      	str	r3, [r7, #24]
 8001a44:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	617b      	str	r3, [r7, #20]
 8001a4a:	4b32      	ldr	r3, [pc, #200]	; (8001b14 <HAL_UART_MspInit+0x10c>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	4a31      	ldr	r2, [pc, #196]	; (8001b14 <HAL_UART_MspInit+0x10c>)
 8001a50:	f043 0301 	orr.w	r3, r3, #1
 8001a54:	6313      	str	r3, [r2, #48]	; 0x30
 8001a56:	4b2f      	ldr	r3, [pc, #188]	; (8001b14 <HAL_UART_MspInit+0x10c>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	617b      	str	r3, [r7, #20]
 8001a60:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001a62:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001a66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a68:	2302      	movs	r3, #2
 8001a6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a70:	2303      	movs	r3, #3
 8001a72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a74:	2307      	movs	r3, #7
 8001a76:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a78:	f107 031c 	add.w	r3, r7, #28
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4826      	ldr	r0, [pc, #152]	; (8001b18 <HAL_UART_MspInit+0x110>)
 8001a80:	f000 fefc 	bl	800287c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001a84:	2200      	movs	r2, #0
 8001a86:	2100      	movs	r1, #0
 8001a88:	2025      	movs	r0, #37	; 0x25
 8001a8a:	f000 fe2e 	bl	80026ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a8e:	2025      	movs	r0, #37	; 0x25
 8001a90:	f000 fe47 	bl	8002722 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a94:	e038      	b.n	8001b08 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a20      	ldr	r2, [pc, #128]	; (8001b1c <HAL_UART_MspInit+0x114>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d133      	bne.n	8001b08 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	613b      	str	r3, [r7, #16]
 8001aa4:	4b1b      	ldr	r3, [pc, #108]	; (8001b14 <HAL_UART_MspInit+0x10c>)
 8001aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa8:	4a1a      	ldr	r2, [pc, #104]	; (8001b14 <HAL_UART_MspInit+0x10c>)
 8001aaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001aae:	6413      	str	r3, [r2, #64]	; 0x40
 8001ab0:	4b18      	ldr	r3, [pc, #96]	; (8001b14 <HAL_UART_MspInit+0x10c>)
 8001ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab8:	613b      	str	r3, [r7, #16]
 8001aba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001abc:	2300      	movs	r3, #0
 8001abe:	60fb      	str	r3, [r7, #12]
 8001ac0:	4b14      	ldr	r3, [pc, #80]	; (8001b14 <HAL_UART_MspInit+0x10c>)
 8001ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac4:	4a13      	ldr	r2, [pc, #76]	; (8001b14 <HAL_UART_MspInit+0x10c>)
 8001ac6:	f043 0301 	orr.w	r3, r3, #1
 8001aca:	6313      	str	r3, [r2, #48]	; 0x30
 8001acc:	4b11      	ldr	r3, [pc, #68]	; (8001b14 <HAL_UART_MspInit+0x10c>)
 8001ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad0:	f003 0301 	and.w	r3, r3, #1
 8001ad4:	60fb      	str	r3, [r7, #12]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001ad8:	230c      	movs	r3, #12
 8001ada:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001adc:	2302      	movs	r3, #2
 8001ade:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ae8:	2307      	movs	r3, #7
 8001aea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aec:	f107 031c 	add.w	r3, r7, #28
 8001af0:	4619      	mov	r1, r3
 8001af2:	4809      	ldr	r0, [pc, #36]	; (8001b18 <HAL_UART_MspInit+0x110>)
 8001af4:	f000 fec2 	bl	800287c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001af8:	2200      	movs	r2, #0
 8001afa:	2100      	movs	r1, #0
 8001afc:	2026      	movs	r0, #38	; 0x26
 8001afe:	f000 fdf4 	bl	80026ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001b02:	2026      	movs	r0, #38	; 0x26
 8001b04:	f000 fe0d 	bl	8002722 <HAL_NVIC_EnableIRQ>
}
 8001b08:	bf00      	nop
 8001b0a:	3730      	adds	r7, #48	; 0x30
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	40011000 	.word	0x40011000
 8001b14:	40023800 	.word	0x40023800
 8001b18:	40020000 	.word	0x40020000
 8001b1c:	40004400 	.word	0x40004400

08001b20 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001b26:	1d3b      	adds	r3, r7, #4
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	605a      	str	r2, [r3, #4]
 8001b2e:	609a      	str	r2, [r3, #8]
 8001b30:	60da      	str	r2, [r3, #12]
 8001b32:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001b34:	4b1c      	ldr	r3, [pc, #112]	; (8001ba8 <HAL_FSMC_MspInit+0x88>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d131      	bne.n	8001ba0 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8001b3c:	4b1a      	ldr	r3, [pc, #104]	; (8001ba8 <HAL_FSMC_MspInit+0x88>)
 8001b3e:	2201      	movs	r2, #1
 8001b40:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001b42:	2300      	movs	r3, #0
 8001b44:	603b      	str	r3, [r7, #0]
 8001b46:	4b19      	ldr	r3, [pc, #100]	; (8001bac <HAL_FSMC_MspInit+0x8c>)
 8001b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b4a:	4a18      	ldr	r2, [pc, #96]	; (8001bac <HAL_FSMC_MspInit+0x8c>)
 8001b4c:	f043 0301 	orr.w	r3, r3, #1
 8001b50:	6393      	str	r3, [r2, #56]	; 0x38
 8001b52:	4b16      	ldr	r3, [pc, #88]	; (8001bac <HAL_FSMC_MspInit+0x8c>)
 8001b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b56:	f003 0301 	and.w	r3, r3, #1
 8001b5a:	603b      	str	r3, [r7, #0]
 8001b5c:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001b5e:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001b62:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b64:	2302      	movs	r3, #2
 8001b66:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001b70:	230c      	movs	r3, #12
 8001b72:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b74:	1d3b      	adds	r3, r7, #4
 8001b76:	4619      	mov	r1, r3
 8001b78:	480d      	ldr	r0, [pc, #52]	; (8001bb0 <HAL_FSMC_MspInit+0x90>)
 8001b7a:	f000 fe7f 	bl	800287c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13
 8001b7e:	f24e 73b3 	movw	r3, #59315	; 0xe7b3
 8001b82:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b84:	2302      	movs	r3, #2
 8001b86:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001b90:	230c      	movs	r3, #12
 8001b92:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b94:	1d3b      	adds	r3, r7, #4
 8001b96:	4619      	mov	r1, r3
 8001b98:	4806      	ldr	r0, [pc, #24]	; (8001bb4 <HAL_FSMC_MspInit+0x94>)
 8001b9a:	f000 fe6f 	bl	800287c <HAL_GPIO_Init>
 8001b9e:	e000      	b.n	8001ba2 <HAL_FSMC_MspInit+0x82>
    return;
 8001ba0:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001ba2:	3718      	adds	r7, #24
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	20000264 	.word	0x20000264
 8001bac:	40023800 	.word	0x40023800
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	40020c00 	.word	0x40020c00

08001bb8 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001bc0:	f7ff ffae 	bl	8001b20 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001bc4:	bf00      	nop
 8001bc6:	3708      	adds	r7, #8
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bd0:	e7fe      	b.n	8001bd0 <NMI_Handler+0x4>

08001bd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bd6:	e7fe      	b.n	8001bd6 <HardFault_Handler+0x4>

08001bd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bdc:	e7fe      	b.n	8001bdc <MemManage_Handler+0x4>

08001bde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bde:	b480      	push	{r7}
 8001be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001be2:	e7fe      	b.n	8001be2 <BusFault_Handler+0x4>

08001be4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001be8:	e7fe      	b.n	8001be8 <UsageFault_Handler+0x4>

08001bea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bea:	b480      	push	{r7}
 8001bec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bfc:	bf00      	nop
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c06:	b480      	push	{r7}
 8001c08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c0a:	bf00      	nop
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c18:	f000 fc48 	bl	80024ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c1c:	bf00      	nop
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001c24:	2010      	movs	r0, #16
 8001c26:	f000 ffdf 	bl	8002be8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001c2a:	bf00      	nop
 8001c2c:	bd80      	pop	{r7, pc}
	...

08001c30 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  static int ledVal = 0;
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, ledVal);
 8001c36:	4b24      	ldr	r3, [pc, #144]	; (8001cc8 <USART1_IRQHandler+0x98>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	2108      	movs	r1, #8
 8001c40:	4822      	ldr	r0, [pc, #136]	; (8001ccc <USART1_IRQHandler+0x9c>)
 8001c42:	f000 ffb7 	bl	8002bb4 <HAL_GPIO_WritePin>
  ledVal = !ledVal;
 8001c46:	4b20      	ldr	r3, [pc, #128]	; (8001cc8 <USART1_IRQHandler+0x98>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	bf0c      	ite	eq
 8001c4e:	2301      	moveq	r3, #1
 8001c50:	2300      	movne	r3, #0
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	461a      	mov	r2, r3
 8001c56:	4b1c      	ldr	r3, [pc, #112]	; (8001cc8 <USART1_IRQHandler+0x98>)
 8001c58:	601a      	str	r2, [r3, #0]
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c5a:	481d      	ldr	r0, [pc, #116]	; (8001cd0 <USART1_IRQHandler+0xa0>)
 8001c5c:	f002 fd00 	bl	8004660 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  volatile unsigned int IIR;
  IIR = USART1->SR;
 8001c60:	4b1c      	ldr	r3, [pc, #112]	; (8001cd4 <USART1_IRQHandler+0xa4>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	603b      	str	r3, [r7, #0]
  if(IIR & UART_FLAG_RXNE){
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	f003 0320 	and.w	r3, r3, #32
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d009      	beq.n	8001c84 <USART1_IRQHandler+0x54>
  		//Read Data Register Not Empty
  		char t = USART1->DR; // the character from the USART1 data register is saved in t
 8001c70:	4b18      	ldr	r3, [pc, #96]	; (8001cd4 <USART1_IRQHandler+0xa4>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	71fb      	strb	r3, [r7, #7]
  		put_in_rx_buffer(t,DBG_UART);
 8001c76:	4b18      	ldr	r3, [pc, #96]	; (8001cd8 <USART1_IRQHandler+0xa8>)
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	79fb      	ldrb	r3, [r7, #7]
 8001c7c:	4611      	mov	r1, r2
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f000 f93c 	bl	8001efc <put_in_rx_buffer>
      }
  if(IIR & UART_FLAG_TXE){
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d018      	beq.n	8001cc0 <USART1_IRQHandler+0x90>
  		if(wr_pointer_dbg==rd_pointer_dbg){
 8001c8e:	4b13      	ldr	r3, [pc, #76]	; (8001cdc <USART1_IRQHandler+0xac>)
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	4b13      	ldr	r3, [pc, #76]	; (8001ce0 <USART1_IRQHandler+0xb0>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d108      	bne.n	8001cac <USART1_IRQHandler+0x7c>
  			__HAL_UART_DISABLE_IT(&huart1, UART_IT_TXE); //whole message transmitted
 8001c9a:	4b0d      	ldr	r3, [pc, #52]	; (8001cd0 <USART1_IRQHandler+0xa0>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	68da      	ldr	r2, [r3, #12]
 8001ca0:	4b0b      	ldr	r3, [pc, #44]	; (8001cd0 <USART1_IRQHandler+0xa0>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ca8:	60da      	str	r2, [r3, #12]
  		}
  	}


  /* USER CODE END USART1_IRQn 1 */
}
 8001caa:	e009      	b.n	8001cc0 <USART1_IRQHandler+0x90>
  			DBG_UART->DR = get_from_tx_buffer(DBG_UART);
 8001cac:	4b0a      	ldr	r3, [pc, #40]	; (8001cd8 <USART1_IRQHandler+0xa8>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f000 f9c7 	bl	8002044 <get_from_tx_buffer>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	461a      	mov	r2, r3
 8001cba:	4b07      	ldr	r3, [pc, #28]	; (8001cd8 <USART1_IRQHandler+0xa8>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	605a      	str	r2, [r3, #4]
}
 8001cc0:	bf00      	nop
 8001cc2:	3708      	adds	r7, #8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	20000268 	.word	0x20000268
 8001ccc:	40020400 	.word	0x40020400
 8001cd0:	20000188 	.word	0x20000188
 8001cd4:	40011000 	.word	0x40011000
 8001cd8:	20000008 	.word	0x20000008
 8001cdc:	20000a7c 	.word	0x20000a7c
 8001ce0:	20000a78 	.word	0x20000a78

08001ce4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001cea:	481b      	ldr	r0, [pc, #108]	; (8001d58 <USART2_IRQHandler+0x74>)
 8001cec:	f002 fcb8 	bl	8004660 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  volatile unsigned int IIR;
  	IIR=USART2->SR;
 8001cf0:	4b1a      	ldr	r3, [pc, #104]	; (8001d5c <USART2_IRQHandler+0x78>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	603b      	str	r3, [r7, #0]
    if(IIR & UART_FLAG_RXNE){
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	f003 0320 	and.w	r3, r3, #32
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d009      	beq.n	8001d14 <USART2_IRQHandler+0x30>
  		// check if the USART6 receive interrupt flag was set
  		char t = USART2->DR; // the character from the USART1 data register is saved in t
 8001d00:	4b16      	ldr	r3, [pc, #88]	; (8001d5c <USART2_IRQHandler+0x78>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	71fb      	strb	r3, [r7, #7]
  		put_in_rx_buffer(t,RS485_UART);
 8001d06:	4b16      	ldr	r3, [pc, #88]	; (8001d60 <USART2_IRQHandler+0x7c>)
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	79fb      	ldrb	r3, [r7, #7]
 8001d0c:	4611      	mov	r1, r2
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f000 f8f4 	bl	8001efc <put_in_rx_buffer>
      }
  	if(IIR & UART_FLAG_TXE){
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d017      	beq.n	8001d4e <USART2_IRQHandler+0x6a>
  		if(wr_pointer_rs485==rd_pointer_rs485){
 8001d1e:	4b11      	ldr	r3, [pc, #68]	; (8001d64 <USART2_IRQHandler+0x80>)
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	4b11      	ldr	r3, [pc, #68]	; (8001d68 <USART2_IRQHandler+0x84>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d108      	bne.n	8001d3c <USART2_IRQHandler+0x58>
  			__HAL_UART_DISABLE_IT(&huart2, UART_IT_TXE);
 8001d2a:	4b0b      	ldr	r3, [pc, #44]	; (8001d58 <USART2_IRQHandler+0x74>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	68da      	ldr	r2, [r3, #12]
 8001d30:	4b09      	ldr	r3, [pc, #36]	; (8001d58 <USART2_IRQHandler+0x74>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d38:	60da      	str	r2, [r3, #12]
  			USART2->DR = get_from_tx_buffer(RS485_UART);
  		}
  	}

  /* USER CODE END USART2_IRQn 1 */
}
 8001d3a:	e008      	b.n	8001d4e <USART2_IRQHandler+0x6a>
  			USART2->DR = get_from_tx_buffer(RS485_UART);
 8001d3c:	4b08      	ldr	r3, [pc, #32]	; (8001d60 <USART2_IRQHandler+0x7c>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f000 f97f 	bl	8002044 <get_from_tx_buffer>
 8001d46:	4603      	mov	r3, r0
 8001d48:	461a      	mov	r2, r3
 8001d4a:	4b04      	ldr	r3, [pc, #16]	; (8001d5c <USART2_IRQHandler+0x78>)
 8001d4c:	605a      	str	r2, [r3, #4]
}
 8001d4e:	bf00      	nop
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	200001cc 	.word	0x200001cc
 8001d5c:	40004400 	.word	0x40004400
 8001d60:	20000004 	.word	0x20000004
 8001d64:	20000674 	.word	0x20000674
 8001d68:	20000670 	.word	0x20000670

08001d6c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b086      	sub	sp, #24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d78:	2300      	movs	r3, #0
 8001d7a:	617b      	str	r3, [r7, #20]
 8001d7c:	e00a      	b.n	8001d94 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d7e:	f3af 8000 	nop.w
 8001d82:	4601      	mov	r1, r0
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	1c5a      	adds	r2, r3, #1
 8001d88:	60ba      	str	r2, [r7, #8]
 8001d8a:	b2ca      	uxtb	r2, r1
 8001d8c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	3301      	adds	r3, #1
 8001d92:	617b      	str	r3, [r7, #20]
 8001d94:	697a      	ldr	r2, [r7, #20]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	dbf0      	blt.n	8001d7e <_read+0x12>
	}

return len;
 8001d9c:	687b      	ldr	r3, [r7, #4]
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3718      	adds	r7, #24
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b086      	sub	sp, #24
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	60f8      	str	r0, [r7, #12]
 8001dae:	60b9      	str	r1, [r7, #8]
 8001db0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001db2:	2300      	movs	r3, #0
 8001db4:	617b      	str	r3, [r7, #20]
 8001db6:	e009      	b.n	8001dcc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	1c5a      	adds	r2, r3, #1
 8001dbc:	60ba      	str	r2, [r7, #8]
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f000 f889 	bl	8001ed8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	617b      	str	r3, [r7, #20]
 8001dcc:	697a      	ldr	r2, [r7, #20]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	dbf1      	blt.n	8001db8 <_write+0x12>
	}
	return len;
 8001dd4:	687b      	ldr	r3, [r7, #4]
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3718      	adds	r7, #24
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <_close>:

int _close(int file)
{
 8001dde:	b480      	push	{r7}
 8001de0:	b083      	sub	sp, #12
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
	return -1;
 8001de6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr

08001df6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001df6:	b480      	push	{r7}
 8001df8:	b083      	sub	sp, #12
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
 8001dfe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e06:	605a      	str	r2, [r3, #4]
	return 0;
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr

08001e16 <_isatty>:

int _isatty(int file)
{
 8001e16:	b480      	push	{r7}
 8001e18:	b083      	sub	sp, #12
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
	return 1;
 8001e1e:	2301      	movs	r3, #1
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	60b9      	str	r1, [r7, #8]
 8001e36:	607a      	str	r2, [r7, #4]
	return 0;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3714      	adds	r7, #20
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
	...

08001e48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e50:	4a14      	ldr	r2, [pc, #80]	; (8001ea4 <_sbrk+0x5c>)
 8001e52:	4b15      	ldr	r3, [pc, #84]	; (8001ea8 <_sbrk+0x60>)
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e5c:	4b13      	ldr	r3, [pc, #76]	; (8001eac <_sbrk+0x64>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d102      	bne.n	8001e6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e64:	4b11      	ldr	r3, [pc, #68]	; (8001eac <_sbrk+0x64>)
 8001e66:	4a12      	ldr	r2, [pc, #72]	; (8001eb0 <_sbrk+0x68>)
 8001e68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e6a:	4b10      	ldr	r3, [pc, #64]	; (8001eac <_sbrk+0x64>)
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4413      	add	r3, r2
 8001e72:	693a      	ldr	r2, [r7, #16]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d207      	bcs.n	8001e88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e78:	f003 fbfe 	bl	8005678 <__errno>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	220c      	movs	r2, #12
 8001e80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e82:	f04f 33ff 	mov.w	r3, #4294967295
 8001e86:	e009      	b.n	8001e9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e88:	4b08      	ldr	r3, [pc, #32]	; (8001eac <_sbrk+0x64>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e8e:	4b07      	ldr	r3, [pc, #28]	; (8001eac <_sbrk+0x64>)
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4413      	add	r3, r2
 8001e96:	4a05      	ldr	r2, [pc, #20]	; (8001eac <_sbrk+0x64>)
 8001e98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3718      	adds	r7, #24
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	20020000 	.word	0x20020000
 8001ea8:	00000400 	.word	0x00000400
 8001eac:	2000026c 	.word	0x2000026c
 8001eb0:	20002ea8 	.word	0x20002ea8

08001eb4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001eb8:	4b06      	ldr	r3, [pc, #24]	; (8001ed4 <SystemInit+0x20>)
 8001eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ebe:	4a05      	ldr	r2, [pc, #20]	; (8001ed4 <SystemInit+0x20>)
 8001ec0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ec4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ec8:	bf00      	nop
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	e000ed00 	.word	0xe000ed00

08001ed8 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

//redirect printf to uart1.
PUTCHAR_PROTOTYPE{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 0xffff);
 8001ee0:	1d39      	adds	r1, r7, #4
 8001ee2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	4803      	ldr	r0, [pc, #12]	; (8001ef8 <__io_putchar+0x20>)
 8001eea:	f002 fb26 	bl	800453a <HAL_UART_Transmit>
	return ch;
 8001eee:	687b      	ldr	r3, [r7, #4]
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3708      	adds	r7, #8
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	20000188 	.word	0x20000188

08001efc <put_in_rx_buffer>:

void put_in_rx_buffer(char data, USART_TypeDef* USARTx)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	4603      	mov	r3, r0
 8001f04:	6039      	str	r1, [r7, #0]
 8001f06:	71fb      	strb	r3, [r7, #7]
	if(USARTx == DBG_UART)
 8001f08:	4b1d      	ldr	r3, [pc, #116]	; (8001f80 <put_in_rx_buffer+0x84>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	683a      	ldr	r2, [r7, #0]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d114      	bne.n	8001f3c <put_in_rx_buffer+0x40>
	{
		if(SIO_RBUFLEN_DBG>=LEN_RX_BUFFER_DBG)
 8001f12:	4b1c      	ldr	r3, [pc, #112]	; (8001f84 <put_in_rx_buffer+0x88>)
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	4b1c      	ldr	r3, [pc, #112]	; (8001f88 <put_in_rx_buffer+0x8c>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f20:	d226      	bcs.n	8001f70 <put_in_rx_buffer+0x74>
			{
				return;
			}
		rx_buffer_dbg[wr_pointer_rx_dbg & (LEN_RX_BUFFER_DBG - 1)]=data;
 8001f22:	4b18      	ldr	r3, [pc, #96]	; (8001f84 <put_in_rx_buffer+0x88>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001f2a:	4918      	ldr	r1, [pc, #96]	; (8001f8c <put_in_rx_buffer+0x90>)
 8001f2c:	79fa      	ldrb	r2, [r7, #7]
 8001f2e:	54ca      	strb	r2, [r1, r3]
		wr_pointer_rx_dbg++;
 8001f30:	4b14      	ldr	r3, [pc, #80]	; (8001f84 <put_in_rx_buffer+0x88>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	3301      	adds	r3, #1
 8001f36:	4a13      	ldr	r2, [pc, #76]	; (8001f84 <put_in_rx_buffer+0x88>)
 8001f38:	6013      	str	r3, [r2, #0]
 8001f3a:	e01c      	b.n	8001f76 <put_in_rx_buffer+0x7a>
	}
	else if(USARTx == RS485_UART)
 8001f3c:	4b14      	ldr	r3, [pc, #80]	; (8001f90 <put_in_rx_buffer+0x94>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	683a      	ldr	r2, [r7, #0]
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d117      	bne.n	8001f76 <put_in_rx_buffer+0x7a>
	{
		if(SIO_RBUFLEN_RS485>=LEN_RX_BUFFER_RS485)
 8001f46:	4b13      	ldr	r3, [pc, #76]	; (8001f94 <put_in_rx_buffer+0x98>)
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	4b13      	ldr	r3, [pc, #76]	; (8001f98 <put_in_rx_buffer+0x9c>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f54:	d20e      	bcs.n	8001f74 <put_in_rx_buffer+0x78>
			{
				return;
			}
		rx_buffer_rs485[wr_pointer_rx_rs485 & (LEN_RX_BUFFER_RS485 - 1)]=data;
 8001f56:	4b0f      	ldr	r3, [pc, #60]	; (8001f94 <put_in_rx_buffer+0x98>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f5e:	490f      	ldr	r1, [pc, #60]	; (8001f9c <put_in_rx_buffer+0xa0>)
 8001f60:	79fa      	ldrb	r2, [r7, #7]
 8001f62:	54ca      	strb	r2, [r1, r3]
		wr_pointer_rx_rs485++;
 8001f64:	4b0b      	ldr	r3, [pc, #44]	; (8001f94 <put_in_rx_buffer+0x98>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	3301      	adds	r3, #1
 8001f6a:	4a0a      	ldr	r2, [pc, #40]	; (8001f94 <put_in_rx_buffer+0x98>)
 8001f6c:	6013      	str	r3, [r2, #0]
 8001f6e:	e002      	b.n	8001f76 <put_in_rx_buffer+0x7a>
				return;
 8001f70:	bf00      	nop
 8001f72:	e000      	b.n	8001f76 <put_in_rx_buffer+0x7a>
				return;
 8001f74:	bf00      	nop
	}
}
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr
 8001f80:	20000008 	.word	0x20000008
 8001f84:	20002e8c 	.word	0x20002e8c
 8001f88:	20002e88 	.word	0x20002e88
 8001f8c:	20000e88 	.word	0x20000e88
 8001f90:	20000004 	.word	0x20000004
 8001f94:	20000e84 	.word	0x20000e84
 8001f98:	20000e80 	.word	0x20000e80
 8001f9c:	20000a80 	.word	0x20000a80

08001fa0 <put_in_tx_buffer>:

void put_in_tx_buffer(char data, USART_TypeDef* USARTx)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	6039      	str	r1, [r7, #0]
 8001faa:	71fb      	strb	r3, [r7, #7]
	if(USARTx == RS485_UART)
 8001fac:	4b1d      	ldr	r3, [pc, #116]	; (8002024 <put_in_tx_buffer+0x84>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	683a      	ldr	r2, [r7, #0]
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d114      	bne.n	8001fe0 <put_in_tx_buffer+0x40>
	{
		if(SIO_TBUFLEN_RS485>=LEN_TX_BUFFER_RS485)
 8001fb6:	4b1c      	ldr	r3, [pc, #112]	; (8002028 <put_in_tx_buffer+0x88>)
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	4b1c      	ldr	r3, [pc, #112]	; (800202c <put_in_tx_buffer+0x8c>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fc4:	d227      	bcs.n	8002016 <put_in_tx_buffer+0x76>
			{
				return;
			}
		tx_buffer_rs485[wr_pointer_rs485 & (LEN_TX_BUFFER_RS485 - 1)]=data;
 8001fc6:	4b18      	ldr	r3, [pc, #96]	; (8002028 <put_in_tx_buffer+0x88>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fce:	4918      	ldr	r1, [pc, #96]	; (8002030 <put_in_tx_buffer+0x90>)
 8001fd0:	79fa      	ldrb	r2, [r7, #7]
 8001fd2:	54ca      	strb	r2, [r1, r3]
		wr_pointer_rs485++;
 8001fd4:	4b14      	ldr	r3, [pc, #80]	; (8002028 <put_in_tx_buffer+0x88>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	3301      	adds	r3, #1
 8001fda:	4a13      	ldr	r2, [pc, #76]	; (8002028 <put_in_tx_buffer+0x88>)
 8001fdc:	6013      	str	r3, [r2, #0]
 8001fde:	e01b      	b.n	8002018 <put_in_tx_buffer+0x78>
	}
	else if(USARTx == DBG_UART)
 8001fe0:	4b14      	ldr	r3, [pc, #80]	; (8002034 <put_in_tx_buffer+0x94>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	683a      	ldr	r2, [r7, #0]
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d116      	bne.n	8002018 <put_in_tx_buffer+0x78>
	{
		while(SIO_TBUFLEN_DBG>=LEN_TX_BUFFER_DBG)
 8001fea:	bf00      	nop
 8001fec:	4b12      	ldr	r3, [pc, #72]	; (8002038 <put_in_tx_buffer+0x98>)
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	4b12      	ldr	r3, [pc, #72]	; (800203c <put_in_tx_buffer+0x9c>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ffa:	d2f7      	bcs.n	8001fec <put_in_tx_buffer+0x4c>
			{
				//return;
			}
		tx_buffer_dbg[wr_pointer_dbg & (LEN_TX_BUFFER_DBG - 1)]=data;
 8001ffc:	4b0e      	ldr	r3, [pc, #56]	; (8002038 <put_in_tx_buffer+0x98>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002004:	490e      	ldr	r1, [pc, #56]	; (8002040 <put_in_tx_buffer+0xa0>)
 8002006:	79fa      	ldrb	r2, [r7, #7]
 8002008:	54ca      	strb	r2, [r1, r3]
		wr_pointer_dbg++;
 800200a:	4b0b      	ldr	r3, [pc, #44]	; (8002038 <put_in_tx_buffer+0x98>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	3301      	adds	r3, #1
 8002010:	4a09      	ldr	r2, [pc, #36]	; (8002038 <put_in_tx_buffer+0x98>)
 8002012:	6013      	str	r3, [r2, #0]
 8002014:	e000      	b.n	8002018 <put_in_tx_buffer+0x78>
				return;
 8002016:	bf00      	nop
	}
}
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	20000004 	.word	0x20000004
 8002028:	20000674 	.word	0x20000674
 800202c:	20000670 	.word	0x20000670
 8002030:	20000270 	.word	0x20000270
 8002034:	20000008 	.word	0x20000008
 8002038:	20000a7c 	.word	0x20000a7c
 800203c:	20000a78 	.word	0x20000a78
 8002040:	20000678 	.word	0x20000678

08002044 <get_from_tx_buffer>:
char get_from_tx_buffer(USART_TypeDef* USARTx)
{
 8002044:	b480      	push	{r7}
 8002046:	b085      	sub	sp, #20
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
	char data;

	if(USARTx == RS485_UART)
 800204c:	4b14      	ldr	r3, [pc, #80]	; (80020a0 <get_from_tx_buffer+0x5c>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	429a      	cmp	r2, r3
 8002054:	d10c      	bne.n	8002070 <get_from_tx_buffer+0x2c>
	{

		data=tx_buffer_rs485[rd_pointer_rs485 & (LEN_TX_BUFFER_RS485-1)];
 8002056:	4b13      	ldr	r3, [pc, #76]	; (80020a4 <get_from_tx_buffer+0x60>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800205e:	4a12      	ldr	r2, [pc, #72]	; (80020a8 <get_from_tx_buffer+0x64>)
 8002060:	5cd3      	ldrb	r3, [r2, r3]
 8002062:	73fb      	strb	r3, [r7, #15]
		rd_pointer_rs485++;
 8002064:	4b0f      	ldr	r3, [pc, #60]	; (80020a4 <get_from_tx_buffer+0x60>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	3301      	adds	r3, #1
 800206a:	4a0e      	ldr	r2, [pc, #56]	; (80020a4 <get_from_tx_buffer+0x60>)
 800206c:	6013      	str	r3, [r2, #0]
 800206e:	e010      	b.n	8002092 <get_from_tx_buffer+0x4e>
	}
	else if(USARTx == DBG_UART)
 8002070:	4b0e      	ldr	r3, [pc, #56]	; (80020ac <get_from_tx_buffer+0x68>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	429a      	cmp	r2, r3
 8002078:	d10b      	bne.n	8002092 <get_from_tx_buffer+0x4e>
	{

		data=tx_buffer_dbg[rd_pointer_dbg & (LEN_TX_BUFFER_DBG-1)];
 800207a:	4b0d      	ldr	r3, [pc, #52]	; (80020b0 <get_from_tx_buffer+0x6c>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002082:	4a0c      	ldr	r2, [pc, #48]	; (80020b4 <get_from_tx_buffer+0x70>)
 8002084:	5cd3      	ldrb	r3, [r2, r3]
 8002086:	73fb      	strb	r3, [r7, #15]
		rd_pointer_dbg++;
 8002088:	4b09      	ldr	r3, [pc, #36]	; (80020b0 <get_from_tx_buffer+0x6c>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	3301      	adds	r3, #1
 800208e:	4a08      	ldr	r2, [pc, #32]	; (80020b0 <get_from_tx_buffer+0x6c>)
 8002090:	6013      	str	r3, [r2, #0]
	}
	return data;
 8002092:	7bfb      	ldrb	r3, [r7, #15]
}
 8002094:	4618      	mov	r0, r3
 8002096:	3714      	adds	r7, #20
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr
 80020a0:	20000004 	.word	0x20000004
 80020a4:	20000670 	.word	0x20000670
 80020a8:	20000270 	.word	0x20000270
 80020ac:	20000008 	.word	0x20000008
 80020b0:	20000a78 	.word	0x20000a78
 80020b4:	20000678 	.word	0x20000678

080020b8 <get_from_rx_buffer>:
char get_from_rx_buffer(USART_TypeDef* USARTx)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b085      	sub	sp, #20
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
	char data;

	if(USARTx == RS485_UART)
 80020c0:	4b14      	ldr	r3, [pc, #80]	; (8002114 <get_from_rx_buffer+0x5c>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d10c      	bne.n	80020e4 <get_from_rx_buffer+0x2c>
	{

		data=rx_buffer_rs485[rd_pointer_rx_rs485 & (LEN_RX_BUFFER_RS485-1)];
 80020ca:	4b13      	ldr	r3, [pc, #76]	; (8002118 <get_from_rx_buffer+0x60>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020d2:	4a12      	ldr	r2, [pc, #72]	; (800211c <get_from_rx_buffer+0x64>)
 80020d4:	5cd3      	ldrb	r3, [r2, r3]
 80020d6:	73fb      	strb	r3, [r7, #15]
		rd_pointer_rx_rs485++;
 80020d8:	4b0f      	ldr	r3, [pc, #60]	; (8002118 <get_from_rx_buffer+0x60>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	3301      	adds	r3, #1
 80020de:	4a0e      	ldr	r2, [pc, #56]	; (8002118 <get_from_rx_buffer+0x60>)
 80020e0:	6013      	str	r3, [r2, #0]
 80020e2:	e010      	b.n	8002106 <get_from_rx_buffer+0x4e>
	}
	else if(USARTx == DBG_UART)
 80020e4:	4b0e      	ldr	r3, [pc, #56]	; (8002120 <get_from_rx_buffer+0x68>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d10b      	bne.n	8002106 <get_from_rx_buffer+0x4e>
	{

		data=rx_buffer_dbg[rd_pointer_rx_dbg & (LEN_RX_BUFFER_DBG-1)];
 80020ee:	4b0d      	ldr	r3, [pc, #52]	; (8002124 <get_from_rx_buffer+0x6c>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80020f6:	4a0c      	ldr	r2, [pc, #48]	; (8002128 <get_from_rx_buffer+0x70>)
 80020f8:	5cd3      	ldrb	r3, [r2, r3]
 80020fa:	73fb      	strb	r3, [r7, #15]
		rd_pointer_rx_dbg++;
 80020fc:	4b09      	ldr	r3, [pc, #36]	; (8002124 <get_from_rx_buffer+0x6c>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	3301      	adds	r3, #1
 8002102:	4a08      	ldr	r2, [pc, #32]	; (8002124 <get_from_rx_buffer+0x6c>)
 8002104:	6013      	str	r3, [r2, #0]
	}
	return data;
 8002106:	7bfb      	ldrb	r3, [r7, #15]
}
 8002108:	4618      	mov	r0, r3
 800210a:	3714      	adds	r7, #20
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr
 8002114:	20000004 	.word	0x20000004
 8002118:	20000e80 	.word	0x20000e80
 800211c:	20000a80 	.word	0x20000a80
 8002120:	20000008 	.word	0x20000008
 8002124:	20002e88 	.word	0x20002e88
 8002128:	20000e88 	.word	0x20000e88

0800212c <usart_message_ready>:

	return 0;
}
//**************************************************************************************
char usart_message_ready(USART_TypeDef* USARTx, char delimiter)
{
 800212c:	b480      	push	{r7}
 800212e:	b085      	sub	sp, #20
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	460b      	mov	r3, r1
 8002136:	70fb      	strb	r3, [r7, #3]
	if (USARTx == DBG_UART)
 8002138:	4b1f      	ldr	r3, [pc, #124]	; (80021b8 <usart_message_ready+0x8c>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	429a      	cmp	r2, r3
 8002140:	d117      	bne.n	8002172 <usart_message_ready+0x46>
	{
		unsigned long tail = rd_pointer_rx_dbg;
 8002142:	4b1e      	ldr	r3, [pc, #120]	; (80021bc <usart_message_ready+0x90>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	60fb      	str	r3, [r7, #12]

		while ((wr_pointer_rx_dbg - tail) != 0)
 8002148:	e00d      	b.n	8002166 <usart_message_ready+0x3a>
		{
			if (rx_buffer_dbg[tail & (LEN_RX_BUFFER_DBG - 1)] == delimiter)
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002150:	4a1b      	ldr	r2, [pc, #108]	; (80021c0 <usart_message_ready+0x94>)
 8002152:	5cd3      	ldrb	r3, [r2, r3]
 8002154:	b2db      	uxtb	r3, r3
 8002156:	78fa      	ldrb	r2, [r7, #3]
 8002158:	429a      	cmp	r2, r3
 800215a:	d101      	bne.n	8002160 <usart_message_ready+0x34>
				return 1;
 800215c:	2301      	movs	r3, #1
 800215e:	e025      	b.n	80021ac <usart_message_ready+0x80>
			++tail;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	3301      	adds	r3, #1
 8002164:	60fb      	str	r3, [r7, #12]
		while ((wr_pointer_rx_dbg - tail) != 0)
 8002166:	4b17      	ldr	r3, [pc, #92]	; (80021c4 <usart_message_ready+0x98>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	68fa      	ldr	r2, [r7, #12]
 800216c:	429a      	cmp	r2, r3
 800216e:	d1ec      	bne.n	800214a <usart_message_ready+0x1e>
 8002170:	e01b      	b.n	80021aa <usart_message_ready+0x7e>
		}
	}
	else if (USARTx == RS485_UART)
 8002172:	4b15      	ldr	r3, [pc, #84]	; (80021c8 <usart_message_ready+0x9c>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	429a      	cmp	r2, r3
 800217a:	d116      	bne.n	80021aa <usart_message_ready+0x7e>
	{
		unsigned long tail = rd_pointer_rx_rs485;
 800217c:	4b13      	ldr	r3, [pc, #76]	; (80021cc <usart_message_ready+0xa0>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	60bb      	str	r3, [r7, #8]

		while ((wr_pointer_rx_rs485 - tail) != 0)
 8002182:	e00d      	b.n	80021a0 <usart_message_ready+0x74>
		{
			if (rx_buffer_rs485[tail & (LEN_RX_BUFFER_RS485 - 1)] == delimiter)
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800218a:	4a11      	ldr	r2, [pc, #68]	; (80021d0 <usart_message_ready+0xa4>)
 800218c:	5cd3      	ldrb	r3, [r2, r3]
 800218e:	b2db      	uxtb	r3, r3
 8002190:	78fa      	ldrb	r2, [r7, #3]
 8002192:	429a      	cmp	r2, r3
 8002194:	d101      	bne.n	800219a <usart_message_ready+0x6e>
				return 1;
 8002196:	2301      	movs	r3, #1
 8002198:	e008      	b.n	80021ac <usart_message_ready+0x80>
			++tail;
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	3301      	adds	r3, #1
 800219e:	60bb      	str	r3, [r7, #8]
		while ((wr_pointer_rx_rs485 - tail) != 0)
 80021a0:	4b0c      	ldr	r3, [pc, #48]	; (80021d4 <usart_message_ready+0xa8>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	68ba      	ldr	r2, [r7, #8]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d1ec      	bne.n	8002184 <usart_message_ready+0x58>
		}
	}
	return 0;
 80021aa:	2300      	movs	r3, #0
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3714      	adds	r7, #20
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr
 80021b8:	20000008 	.word	0x20000008
 80021bc:	20002e88 	.word	0x20002e88
 80021c0:	20000e88 	.word	0x20000e88
 80021c4:	20002e8c 	.word	0x20002e8c
 80021c8:	20000004 	.word	0x20000004
 80021cc:	20000e80 	.word	0x20000e80
 80021d0:	20000a80 	.word	0x20000a80
 80021d4:	20000e84 	.word	0x20000e84

080021d8 <read_usart_message>:
/*
 * Reads message from specified uart rx buffer into @dst until @delimiter character is encountered or @max_len exceeded.
 * Returns: number of characters read if successful, zero when there is no message ready to be read.
 */
unsigned int read_usart_message(char* dst, UART_HandleTypeDef* huart, int max_len, char delimiter)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b086      	sub	sp, #24
 80021dc:	af00      	add	r7, sp, #0
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	60b9      	str	r1, [r7, #8]
 80021e2:	607a      	str	r2, [r7, #4]
 80021e4:	70fb      	strb	r3, [r7, #3]
	USART_TypeDef* USARTx = huart->Instance;
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	613b      	str	r3, [r7, #16]
	if (usart_message_ready(USARTx,delimiter))
 80021ec:	78fb      	ldrb	r3, [r7, #3]
 80021ee:	4619      	mov	r1, r3
 80021f0:	6938      	ldr	r0, [r7, #16]
 80021f2:	f7ff ff9b 	bl	800212c <usart_message_ready>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d018      	beq.n	800222e <read_usart_message+0x56>
	{
		int nr = 0;
 80021fc:	2300      	movs	r3, #0
 80021fe:	617b      	str	r3, [r7, #20]
		do
		{
			*dst = get_from_rx_buffer(USARTx);
 8002200:	6938      	ldr	r0, [r7, #16]
 8002202:	f7ff ff59 	bl	80020b8 <get_from_rx_buffer>
 8002206:	4603      	mov	r3, r0
 8002208:	461a      	mov	r2, r3
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	701a      	strb	r2, [r3, #0]
			++nr;
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	3301      	adds	r3, #1
 8002212:	617b      	str	r3, [r7, #20]
		} while (*dst++ != delimiter && nr < max_len);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	1c5a      	adds	r2, r3, #1
 8002218:	60fa      	str	r2, [r7, #12]
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	78fa      	ldrb	r2, [r7, #3]
 800221e:	429a      	cmp	r2, r3
 8002220:	d003      	beq.n	800222a <read_usart_message+0x52>
 8002222:	697a      	ldr	r2, [r7, #20]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	429a      	cmp	r2, r3
 8002228:	dbea      	blt.n	8002200 <read_usart_message+0x28>

		return nr;
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	e000      	b.n	8002230 <read_usart_message+0x58>
	}
	return 0;
 800222e:	2300      	movs	r3, #0
}
 8002230:	4618      	mov	r0, r3
 8002232:	3718      	adds	r7, #24
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}

08002238 <send_usart_message>:
/*
 * Sends @size bytes from @src via specified uart. Nonblocking.
 * Returns: 0 when operation fails due to another message being transmitted, number of bytes written to uart buffer otherwise.
 */

unsigned int send_usart_message(char* src, UART_HandleTypeDef* huart, int size){
 8002238:	b580      	push	{r7, lr}
 800223a:	b086      	sub	sp, #24
 800223c:	af00      	add	r7, sp, #0
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	60b9      	str	r1, [r7, #8]
 8002242:	607a      	str	r2, [r7, #4]
	USART_TypeDef* USARTx = huart->Instance;
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	613b      	str	r3, [r7, #16]
	if (USARTx == DBG_UART){
 800224a:	4b21      	ldr	r3, [pc, #132]	; (80022d0 <send_usart_message+0x98>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	693a      	ldr	r2, [r7, #16]
 8002250:	429a      	cmp	r2, r3
 8002252:	d107      	bne.n	8002264 <send_usart_message+0x2c>
		if(wr_pointer_dbg!=rd_pointer_dbg){
 8002254:	4b1f      	ldr	r3, [pc, #124]	; (80022d4 <send_usart_message+0x9c>)
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	4b1f      	ldr	r3, [pc, #124]	; (80022d8 <send_usart_message+0xa0>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	429a      	cmp	r2, r3
 800225e:	d00e      	beq.n	800227e <send_usart_message+0x46>
			return 0;//another message is in progress.
 8002260:	2300      	movs	r3, #0
 8002262:	e030      	b.n	80022c6 <send_usart_message+0x8e>
		}

	}
	else if (USARTx == RS485_UART){
 8002264:	4b1d      	ldr	r3, [pc, #116]	; (80022dc <send_usart_message+0xa4>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	693a      	ldr	r2, [r7, #16]
 800226a:	429a      	cmp	r2, r3
 800226c:	d107      	bne.n	800227e <send_usart_message+0x46>
		if(wr_pointer_rs485!=rd_pointer_rs485){
 800226e:	4b1c      	ldr	r3, [pc, #112]	; (80022e0 <send_usart_message+0xa8>)
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	4b1c      	ldr	r3, [pc, #112]	; (80022e4 <send_usart_message+0xac>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	429a      	cmp	r2, r3
 8002278:	d001      	beq.n	800227e <send_usart_message+0x46>
			return 0;//another message is in progress.
 800227a:	2300      	movs	r3, #0
 800227c:	e023      	b.n	80022c6 <send_usart_message+0x8e>
		}
	}

	int nr = 0;
 800227e:	2300      	movs	r3, #0
 8002280:	617b      	str	r3, [r7, #20]
	do{
		put_in_tx_buffer(*(src + nr), USARTx);
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	68fa      	ldr	r2, [r7, #12]
 8002286:	4413      	add	r3, r2
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	6939      	ldr	r1, [r7, #16]
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff fe87 	bl	8001fa0 <put_in_tx_buffer>
		nr++;
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	3301      	adds	r3, #1
 8002296:	617b      	str	r3, [r7, #20]
	} while (nr < size);
 8002298:	697a      	ldr	r2, [r7, #20]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	429a      	cmp	r2, r3
 800229e:	dbf0      	blt.n	8002282 <send_usart_message+0x4a>

	if(nr>0){
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	dd0e      	ble.n	80022c4 <send_usart_message+0x8c>
		USARTx->DR = get_from_tx_buffer(USARTx);
 80022a6:	6938      	ldr	r0, [r7, #16]
 80022a8:	f7ff fecc 	bl	8002044 <get_from_tx_buffer>
 80022ac:	4603      	mov	r3, r0
 80022ae:	461a      	mov	r2, r3
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	605a      	str	r2, [r3, #4]
		__HAL_UART_ENABLE_IT(huart, UART_IT_TXE); //turn on tx interrupt forever (until turned off in IRQ handler)
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	68da      	ldr	r2, [r3, #12]
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80022c2:	60da      	str	r2, [r3, #12]
	}
	return nr;
 80022c4:	697b      	ldr	r3, [r7, #20]
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3718      	adds	r7, #24
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	20000008 	.word	0x20000008
 80022d4:	20000a7c 	.word	0x20000a7c
 80022d8:	20000a78 	.word	0x20000a78
 80022dc:	20000004 	.word	0x20000004
 80022e0:	20000674 	.word	0x20000674
 80022e4:	20000670 	.word	0x20000670

080022e8 <uartDemoLoop>:
#include <stm32f4xx_hal.h>
#include <string.h>



void uartDemoLoop(){
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b0d4      	sub	sp, #336	; 0x150
 80022ec:	af00      	add	r7, sp, #0

	static int firstFlag = 0;

	if(firstFlag == 0){
 80022ee:	4b29      	ldr	r3, [pc, #164]	; (8002394 <uartDemoLoop+0xac>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d105      	bne.n	8002302 <uartDemoLoop+0x1a>
		firstFlag = 1;
 80022f6:	4b27      	ldr	r3, [pc, #156]	; (8002394 <uartDemoLoop+0xac>)
 80022f8:	2201      	movs	r2, #1
 80022fa:	601a      	str	r2, [r3, #0]
		printf("[UART demo] Send a string over debug uart and terminate it by ENTER (ascii 13).\r\n");
 80022fc:	4826      	ldr	r0, [pc, #152]	; (8002398 <uartDemoLoop+0xb0>)
 80022fe:	f003 fa73 	bl	80057e8 <puts>
	}

	char delimiter = 13;
 8002302:	230d      	movs	r3, #13
 8002304:	f887 314f 	strb.w	r3, [r7, #335]	; 0x14f
	char msg[64];

	int count = read_usart_message(msg, &huart1, sizeof(msg), delimiter);
 8002308:	f897 314f 	ldrb.w	r3, [r7, #335]	; 0x14f
 800230c:	f507 7082 	add.w	r0, r7, #260	; 0x104
 8002310:	2240      	movs	r2, #64	; 0x40
 8002312:	4922      	ldr	r1, [pc, #136]	; (800239c <uartDemoLoop+0xb4>)
 8002314:	f7ff ff60 	bl	80021d8 <read_usart_message>
 8002318:	4603      	mov	r3, r0
 800231a:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148

	if(count == 0){
 800231e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8002322:	2b00      	cmp	r3, #0
 8002324:	d103      	bne.n	800232e <uartDemoLoop+0x46>
		//While reading buffer of received chars, delimiter char was not encountered.
		printf("[UART demo] message not yet ready.\r\n");
 8002326:	481e      	ldr	r0, [pc, #120]	; (80023a0 <uartDemoLoop+0xb8>)
 8002328:	f003 fa5e 	bl	80057e8 <puts>
 800232c:	e02e      	b.n	800238c <uartDemoLoop+0xa4>
		return;
	}

	printf("[UART demo] message ready!\r\n");
 800232e:	481d      	ldr	r0, [pc, #116]	; (80023a4 <uartDemoLoop+0xbc>)
 8002330:	f003 fa5a 	bl	80057e8 <puts>

	msg[count-1] = 0; //null terminate received string
 8002334:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8002338:	3b01      	subs	r3, #1
 800233a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800233e:	443b      	add	r3, r7
 8002340:	2200      	movs	r2, #0
 8002342:	f803 2c4c 	strb.w	r2, [r3, #-76]

	char reply[256];

	sprintf(reply, " Sending this as a buffer instead of printf just for demonstration. \n\r The message I got was \"%s\". \n\r", msg);
 8002346:	f507 7282 	add.w	r2, r7, #260	; 0x104
 800234a:	1d3b      	adds	r3, r7, #4
 800234c:	4916      	ldr	r1, [pc, #88]	; (80023a8 <uartDemoLoop+0xc0>)
 800234e:	4618      	mov	r0, r3
 8002350:	f003 fa52 	bl	80057f8 <siprintf>

	int ret = send_usart_message(reply, &huart1, strlen(reply));
 8002354:	1d3b      	adds	r3, r7, #4
 8002356:	4618      	mov	r0, r3
 8002358:	f7fd ff3a 	bl	80001d0 <strlen>
 800235c:	4603      	mov	r3, r0
 800235e:	461a      	mov	r2, r3
 8002360:	1d3b      	adds	r3, r7, #4
 8002362:	490e      	ldr	r1, [pc, #56]	; (800239c <uartDemoLoop+0xb4>)
 8002364:	4618      	mov	r0, r3
 8002366:	f7ff ff67 	bl	8002238 <send_usart_message>
 800236a:	4603      	mov	r3, r0
 800236c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144

	if(ret == 0){
 8002370:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002374:	2b00      	cmp	r3, #0
 8002376:	d102      	bne.n	800237e <uartDemoLoop+0x96>
		printf("[UART demo] Fail: Cannot transmit now, another transmission in progress.\n\r");
 8002378:	480c      	ldr	r0, [pc, #48]	; (80023ac <uartDemoLoop+0xc4>)
 800237a:	f003 f9af 	bl	80056dc <iprintf>
	}

	HAL_Delay(500); //sleep for a bit so that next printf does not interfere with send_uart_message();
 800237e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002382:	f000 f8b3 	bl	80024ec <HAL_Delay>

	printf("[UART demo] Success.\n\r");
 8002386:	480a      	ldr	r0, [pc, #40]	; (80023b0 <uartDemoLoop+0xc8>)
 8002388:	f003 f9a8 	bl	80056dc <iprintf>

}
 800238c:	f507 77a8 	add.w	r7, r7, #336	; 0x150
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	20002e90 	.word	0x20002e90
 8002398:	08006b8c 	.word	0x08006b8c
 800239c:	20000188 	.word	0x20000188
 80023a0:	08006be0 	.word	0x08006be0
 80023a4:	08006c04 	.word	0x08006c04
 80023a8:	08006c20 	.word	0x08006c20
 80023ac:	08006c88 	.word	0x08006c88
 80023b0:	08006cd4 	.word	0x08006cd4

080023b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80023b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023ec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023b8:	480d      	ldr	r0, [pc, #52]	; (80023f0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80023ba:	490e      	ldr	r1, [pc, #56]	; (80023f4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80023bc:	4a0e      	ldr	r2, [pc, #56]	; (80023f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023c0:	e002      	b.n	80023c8 <LoopCopyDataInit>

080023c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023c6:	3304      	adds	r3, #4

080023c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023cc:	d3f9      	bcc.n	80023c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023ce:	4a0b      	ldr	r2, [pc, #44]	; (80023fc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80023d0:	4c0b      	ldr	r4, [pc, #44]	; (8002400 <LoopFillZerobss+0x26>)
  movs r3, #0
 80023d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023d4:	e001      	b.n	80023da <LoopFillZerobss>

080023d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023d8:	3204      	adds	r2, #4

080023da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023dc:	d3fb      	bcc.n	80023d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80023de:	f7ff fd69 	bl	8001eb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023e2:	f003 f94f 	bl	8005684 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023e6:	f7fe fe8f 	bl	8001108 <main>
  bx  lr    
 80023ea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80023ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80023f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023f4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80023f8:	08006dac 	.word	0x08006dac
  ldr r2, =_sbss
 80023fc:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002400:	20002ea8 	.word	0x20002ea8

08002404 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002404:	e7fe      	b.n	8002404 <ADC_IRQHandler>
	...

08002408 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800240c:	4b0e      	ldr	r3, [pc, #56]	; (8002448 <HAL_Init+0x40>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a0d      	ldr	r2, [pc, #52]	; (8002448 <HAL_Init+0x40>)
 8002412:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002416:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002418:	4b0b      	ldr	r3, [pc, #44]	; (8002448 <HAL_Init+0x40>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a0a      	ldr	r2, [pc, #40]	; (8002448 <HAL_Init+0x40>)
 800241e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002422:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002424:	4b08      	ldr	r3, [pc, #32]	; (8002448 <HAL_Init+0x40>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a07      	ldr	r2, [pc, #28]	; (8002448 <HAL_Init+0x40>)
 800242a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800242e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002430:	2003      	movs	r0, #3
 8002432:	f000 f94f 	bl	80026d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002436:	2000      	movs	r0, #0
 8002438:	f000 f808 	bl	800244c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800243c:	f7ff f9d0 	bl	80017e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	40023c00 	.word	0x40023c00

0800244c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002454:	4b12      	ldr	r3, [pc, #72]	; (80024a0 <HAL_InitTick+0x54>)
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	4b12      	ldr	r3, [pc, #72]	; (80024a4 <HAL_InitTick+0x58>)
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	4619      	mov	r1, r3
 800245e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002462:	fbb3 f3f1 	udiv	r3, r3, r1
 8002466:	fbb2 f3f3 	udiv	r3, r2, r3
 800246a:	4618      	mov	r0, r3
 800246c:	f000 f967 	bl	800273e <HAL_SYSTICK_Config>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e00e      	b.n	8002498 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2b0f      	cmp	r3, #15
 800247e:	d80a      	bhi.n	8002496 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002480:	2200      	movs	r2, #0
 8002482:	6879      	ldr	r1, [r7, #4]
 8002484:	f04f 30ff 	mov.w	r0, #4294967295
 8002488:	f000 f92f 	bl	80026ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800248c:	4a06      	ldr	r2, [pc, #24]	; (80024a8 <HAL_InitTick+0x5c>)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002492:	2300      	movs	r3, #0
 8002494:	e000      	b.n	8002498 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
}
 8002498:	4618      	mov	r0, r3
 800249a:	3708      	adds	r7, #8
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	20000000 	.word	0x20000000
 80024a4:	20000010 	.word	0x20000010
 80024a8:	2000000c 	.word	0x2000000c

080024ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024b0:	4b06      	ldr	r3, [pc, #24]	; (80024cc <HAL_IncTick+0x20>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	461a      	mov	r2, r3
 80024b6:	4b06      	ldr	r3, [pc, #24]	; (80024d0 <HAL_IncTick+0x24>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4413      	add	r3, r2
 80024bc:	4a04      	ldr	r2, [pc, #16]	; (80024d0 <HAL_IncTick+0x24>)
 80024be:	6013      	str	r3, [r2, #0]
}
 80024c0:	bf00      	nop
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	20000010 	.word	0x20000010
 80024d0:	20002e94 	.word	0x20002e94

080024d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  return uwTick;
 80024d8:	4b03      	ldr	r3, [pc, #12]	; (80024e8 <HAL_GetTick+0x14>)
 80024da:	681b      	ldr	r3, [r3, #0]
}
 80024dc:	4618      	mov	r0, r3
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	20002e94 	.word	0x20002e94

080024ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024f4:	f7ff ffee 	bl	80024d4 <HAL_GetTick>
 80024f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002504:	d005      	beq.n	8002512 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002506:	4b0a      	ldr	r3, [pc, #40]	; (8002530 <HAL_Delay+0x44>)
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	461a      	mov	r2, r3
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	4413      	add	r3, r2
 8002510:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002512:	bf00      	nop
 8002514:	f7ff ffde 	bl	80024d4 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	429a      	cmp	r2, r3
 8002522:	d8f7      	bhi.n	8002514 <HAL_Delay+0x28>
  {
  }
}
 8002524:	bf00      	nop
 8002526:	bf00      	nop
 8002528:	3710      	adds	r7, #16
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	20000010 	.word	0x20000010

08002534 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002534:	b480      	push	{r7}
 8002536:	b085      	sub	sp, #20
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f003 0307 	and.w	r3, r3, #7
 8002542:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002544:	4b0c      	ldr	r3, [pc, #48]	; (8002578 <__NVIC_SetPriorityGrouping+0x44>)
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800254a:	68ba      	ldr	r2, [r7, #8]
 800254c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002550:	4013      	ands	r3, r2
 8002552:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800255c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002560:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002564:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002566:	4a04      	ldr	r2, [pc, #16]	; (8002578 <__NVIC_SetPriorityGrouping+0x44>)
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	60d3      	str	r3, [r2, #12]
}
 800256c:	bf00      	nop
 800256e:	3714      	adds	r7, #20
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr
 8002578:	e000ed00 	.word	0xe000ed00

0800257c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002580:	4b04      	ldr	r3, [pc, #16]	; (8002594 <__NVIC_GetPriorityGrouping+0x18>)
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	0a1b      	lsrs	r3, r3, #8
 8002586:	f003 0307 	and.w	r3, r3, #7
}
 800258a:	4618      	mov	r0, r3
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr
 8002594:	e000ed00 	.word	0xe000ed00

08002598 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	4603      	mov	r3, r0
 80025a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	db0b      	blt.n	80025c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025aa:	79fb      	ldrb	r3, [r7, #7]
 80025ac:	f003 021f 	and.w	r2, r3, #31
 80025b0:	4907      	ldr	r1, [pc, #28]	; (80025d0 <__NVIC_EnableIRQ+0x38>)
 80025b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b6:	095b      	lsrs	r3, r3, #5
 80025b8:	2001      	movs	r0, #1
 80025ba:	fa00 f202 	lsl.w	r2, r0, r2
 80025be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025c2:	bf00      	nop
 80025c4:	370c      	adds	r7, #12
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	e000e100 	.word	0xe000e100

080025d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	4603      	mov	r3, r0
 80025dc:	6039      	str	r1, [r7, #0]
 80025de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	db0a      	blt.n	80025fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	b2da      	uxtb	r2, r3
 80025ec:	490c      	ldr	r1, [pc, #48]	; (8002620 <__NVIC_SetPriority+0x4c>)
 80025ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f2:	0112      	lsls	r2, r2, #4
 80025f4:	b2d2      	uxtb	r2, r2
 80025f6:	440b      	add	r3, r1
 80025f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025fc:	e00a      	b.n	8002614 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	b2da      	uxtb	r2, r3
 8002602:	4908      	ldr	r1, [pc, #32]	; (8002624 <__NVIC_SetPriority+0x50>)
 8002604:	79fb      	ldrb	r3, [r7, #7]
 8002606:	f003 030f 	and.w	r3, r3, #15
 800260a:	3b04      	subs	r3, #4
 800260c:	0112      	lsls	r2, r2, #4
 800260e:	b2d2      	uxtb	r2, r2
 8002610:	440b      	add	r3, r1
 8002612:	761a      	strb	r2, [r3, #24]
}
 8002614:	bf00      	nop
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr
 8002620:	e000e100 	.word	0xe000e100
 8002624:	e000ed00 	.word	0xe000ed00

08002628 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002628:	b480      	push	{r7}
 800262a:	b089      	sub	sp, #36	; 0x24
 800262c:	af00      	add	r7, sp, #0
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	60b9      	str	r1, [r7, #8]
 8002632:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f003 0307 	and.w	r3, r3, #7
 800263a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	f1c3 0307 	rsb	r3, r3, #7
 8002642:	2b04      	cmp	r3, #4
 8002644:	bf28      	it	cs
 8002646:	2304      	movcs	r3, #4
 8002648:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	3304      	adds	r3, #4
 800264e:	2b06      	cmp	r3, #6
 8002650:	d902      	bls.n	8002658 <NVIC_EncodePriority+0x30>
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	3b03      	subs	r3, #3
 8002656:	e000      	b.n	800265a <NVIC_EncodePriority+0x32>
 8002658:	2300      	movs	r3, #0
 800265a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800265c:	f04f 32ff 	mov.w	r2, #4294967295
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	fa02 f303 	lsl.w	r3, r2, r3
 8002666:	43da      	mvns	r2, r3
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	401a      	ands	r2, r3
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002670:	f04f 31ff 	mov.w	r1, #4294967295
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	fa01 f303 	lsl.w	r3, r1, r3
 800267a:	43d9      	mvns	r1, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002680:	4313      	orrs	r3, r2
         );
}
 8002682:	4618      	mov	r0, r3
 8002684:	3724      	adds	r7, #36	; 0x24
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
	...

08002690 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	3b01      	subs	r3, #1
 800269c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026a0:	d301      	bcc.n	80026a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026a2:	2301      	movs	r3, #1
 80026a4:	e00f      	b.n	80026c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026a6:	4a0a      	ldr	r2, [pc, #40]	; (80026d0 <SysTick_Config+0x40>)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	3b01      	subs	r3, #1
 80026ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026ae:	210f      	movs	r1, #15
 80026b0:	f04f 30ff 	mov.w	r0, #4294967295
 80026b4:	f7ff ff8e 	bl	80025d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026b8:	4b05      	ldr	r3, [pc, #20]	; (80026d0 <SysTick_Config+0x40>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026be:	4b04      	ldr	r3, [pc, #16]	; (80026d0 <SysTick_Config+0x40>)
 80026c0:	2207      	movs	r2, #7
 80026c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3708      	adds	r7, #8
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	e000e010 	.word	0xe000e010

080026d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f7ff ff29 	bl	8002534 <__NVIC_SetPriorityGrouping>
}
 80026e2:	bf00      	nop
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}

080026ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b086      	sub	sp, #24
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	4603      	mov	r3, r0
 80026f2:	60b9      	str	r1, [r7, #8]
 80026f4:	607a      	str	r2, [r7, #4]
 80026f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026f8:	2300      	movs	r3, #0
 80026fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026fc:	f7ff ff3e 	bl	800257c <__NVIC_GetPriorityGrouping>
 8002700:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	68b9      	ldr	r1, [r7, #8]
 8002706:	6978      	ldr	r0, [r7, #20]
 8002708:	f7ff ff8e 	bl	8002628 <NVIC_EncodePriority>
 800270c:	4602      	mov	r2, r0
 800270e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002712:	4611      	mov	r1, r2
 8002714:	4618      	mov	r0, r3
 8002716:	f7ff ff5d 	bl	80025d4 <__NVIC_SetPriority>
}
 800271a:	bf00      	nop
 800271c:	3718      	adds	r7, #24
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002722:	b580      	push	{r7, lr}
 8002724:	b082      	sub	sp, #8
 8002726:	af00      	add	r7, sp, #0
 8002728:	4603      	mov	r3, r0
 800272a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800272c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002730:	4618      	mov	r0, r3
 8002732:	f7ff ff31 	bl	8002598 <__NVIC_EnableIRQ>
}
 8002736:	bf00      	nop
 8002738:	3708      	adds	r7, #8
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800273e:	b580      	push	{r7, lr}
 8002740:	b082      	sub	sp, #8
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f7ff ffa2 	bl	8002690 <SysTick_Config>
 800274c:	4603      	mov	r3, r0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}

08002756 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002756:	b580      	push	{r7, lr}
 8002758:	b084      	sub	sp, #16
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002762:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002764:	f7ff feb6 	bl	80024d4 <HAL_GetTick>
 8002768:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002770:	b2db      	uxtb	r3, r3
 8002772:	2b02      	cmp	r3, #2
 8002774:	d008      	beq.n	8002788 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2280      	movs	r2, #128	; 0x80
 800277a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e052      	b.n	800282e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f022 0216 	bic.w	r2, r2, #22
 8002796:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	695a      	ldr	r2, [r3, #20]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027a6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d103      	bne.n	80027b8 <HAL_DMA_Abort+0x62>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d007      	beq.n	80027c8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f022 0208 	bic.w	r2, r2, #8
 80027c6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f022 0201 	bic.w	r2, r2, #1
 80027d6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027d8:	e013      	b.n	8002802 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027da:	f7ff fe7b 	bl	80024d4 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	2b05      	cmp	r3, #5
 80027e6:	d90c      	bls.n	8002802 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2220      	movs	r2, #32
 80027ec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2203      	movs	r2, #3
 80027f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e015      	b.n	800282e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0301 	and.w	r3, r3, #1
 800280c:	2b00      	cmp	r3, #0
 800280e:	d1e4      	bne.n	80027da <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002814:	223f      	movs	r2, #63	; 0x3f
 8002816:	409a      	lsls	r2, r3
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3710      	adds	r7, #16
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002836:	b480      	push	{r7}
 8002838:	b083      	sub	sp, #12
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002844:	b2db      	uxtb	r3, r3
 8002846:	2b02      	cmp	r3, #2
 8002848:	d004      	beq.n	8002854 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2280      	movs	r2, #128	; 0x80
 800284e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e00c      	b.n	800286e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2205      	movs	r2, #5
 8002858:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f022 0201 	bic.w	r2, r2, #1
 800286a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
	...

0800287c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800287c:	b480      	push	{r7}
 800287e:	b089      	sub	sp, #36	; 0x24
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002886:	2300      	movs	r3, #0
 8002888:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800288a:	2300      	movs	r3, #0
 800288c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800288e:	2300      	movs	r3, #0
 8002890:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002892:	2300      	movs	r3, #0
 8002894:	61fb      	str	r3, [r7, #28]
 8002896:	e16b      	b.n	8002b70 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002898:	2201      	movs	r2, #1
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	fa02 f303 	lsl.w	r3, r2, r3
 80028a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	697a      	ldr	r2, [r7, #20]
 80028a8:	4013      	ands	r3, r2
 80028aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028ac:	693a      	ldr	r2, [r7, #16]
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	f040 815a 	bne.w	8002b6a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f003 0303 	and.w	r3, r3, #3
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d005      	beq.n	80028ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d130      	bne.n	8002930 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	005b      	lsls	r3, r3, #1
 80028d8:	2203      	movs	r2, #3
 80028da:	fa02 f303 	lsl.w	r3, r2, r3
 80028de:	43db      	mvns	r3, r3
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	4013      	ands	r3, r2
 80028e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	68da      	ldr	r2, [r3, #12]
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	fa02 f303 	lsl.w	r3, r2, r3
 80028f2:	69ba      	ldr	r2, [r7, #24]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	69ba      	ldr	r2, [r7, #24]
 80028fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002904:	2201      	movs	r2, #1
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	fa02 f303 	lsl.w	r3, r2, r3
 800290c:	43db      	mvns	r3, r3
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	4013      	ands	r3, r2
 8002912:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	091b      	lsrs	r3, r3, #4
 800291a:	f003 0201 	and.w	r2, r3, #1
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	fa02 f303 	lsl.w	r3, r2, r3
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	4313      	orrs	r3, r2
 8002928:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f003 0303 	and.w	r3, r3, #3
 8002938:	2b03      	cmp	r3, #3
 800293a:	d017      	beq.n	800296c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	2203      	movs	r2, #3
 8002948:	fa02 f303 	lsl.w	r3, r2, r3
 800294c:	43db      	mvns	r3, r3
 800294e:	69ba      	ldr	r2, [r7, #24]
 8002950:	4013      	ands	r3, r2
 8002952:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	689a      	ldr	r2, [r3, #8]
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	005b      	lsls	r3, r3, #1
 800295c:	fa02 f303 	lsl.w	r3, r2, r3
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	4313      	orrs	r3, r2
 8002964:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f003 0303 	and.w	r3, r3, #3
 8002974:	2b02      	cmp	r3, #2
 8002976:	d123      	bne.n	80029c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	08da      	lsrs	r2, r3, #3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	3208      	adds	r2, #8
 8002980:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002984:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	f003 0307 	and.w	r3, r3, #7
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	220f      	movs	r2, #15
 8002990:	fa02 f303 	lsl.w	r3, r2, r3
 8002994:	43db      	mvns	r3, r3
 8002996:	69ba      	ldr	r2, [r7, #24]
 8002998:	4013      	ands	r3, r2
 800299a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	691a      	ldr	r2, [r3, #16]
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	f003 0307 	and.w	r3, r3, #7
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	08da      	lsrs	r2, r3, #3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	3208      	adds	r2, #8
 80029ba:	69b9      	ldr	r1, [r7, #24]
 80029bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	005b      	lsls	r3, r3, #1
 80029ca:	2203      	movs	r2, #3
 80029cc:	fa02 f303 	lsl.w	r3, r2, r3
 80029d0:	43db      	mvns	r3, r3
 80029d2:	69ba      	ldr	r2, [r7, #24]
 80029d4:	4013      	ands	r3, r2
 80029d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f003 0203 	and.w	r2, r3, #3
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	005b      	lsls	r3, r3, #1
 80029e4:	fa02 f303 	lsl.w	r3, r2, r3
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	f000 80b4 	beq.w	8002b6a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a02:	2300      	movs	r3, #0
 8002a04:	60fb      	str	r3, [r7, #12]
 8002a06:	4b60      	ldr	r3, [pc, #384]	; (8002b88 <HAL_GPIO_Init+0x30c>)
 8002a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a0a:	4a5f      	ldr	r2, [pc, #380]	; (8002b88 <HAL_GPIO_Init+0x30c>)
 8002a0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a10:	6453      	str	r3, [r2, #68]	; 0x44
 8002a12:	4b5d      	ldr	r3, [pc, #372]	; (8002b88 <HAL_GPIO_Init+0x30c>)
 8002a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a1a:	60fb      	str	r3, [r7, #12]
 8002a1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a1e:	4a5b      	ldr	r2, [pc, #364]	; (8002b8c <HAL_GPIO_Init+0x310>)
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	089b      	lsrs	r3, r3, #2
 8002a24:	3302      	adds	r3, #2
 8002a26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	f003 0303 	and.w	r3, r3, #3
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	220f      	movs	r2, #15
 8002a36:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3a:	43db      	mvns	r3, r3
 8002a3c:	69ba      	ldr	r2, [r7, #24]
 8002a3e:	4013      	ands	r3, r2
 8002a40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a52      	ldr	r2, [pc, #328]	; (8002b90 <HAL_GPIO_Init+0x314>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d02b      	beq.n	8002aa2 <HAL_GPIO_Init+0x226>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a51      	ldr	r2, [pc, #324]	; (8002b94 <HAL_GPIO_Init+0x318>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d025      	beq.n	8002a9e <HAL_GPIO_Init+0x222>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a50      	ldr	r2, [pc, #320]	; (8002b98 <HAL_GPIO_Init+0x31c>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d01f      	beq.n	8002a9a <HAL_GPIO_Init+0x21e>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a4f      	ldr	r2, [pc, #316]	; (8002b9c <HAL_GPIO_Init+0x320>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d019      	beq.n	8002a96 <HAL_GPIO_Init+0x21a>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a4e      	ldr	r2, [pc, #312]	; (8002ba0 <HAL_GPIO_Init+0x324>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d013      	beq.n	8002a92 <HAL_GPIO_Init+0x216>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a4d      	ldr	r2, [pc, #308]	; (8002ba4 <HAL_GPIO_Init+0x328>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d00d      	beq.n	8002a8e <HAL_GPIO_Init+0x212>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a4c      	ldr	r2, [pc, #304]	; (8002ba8 <HAL_GPIO_Init+0x32c>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d007      	beq.n	8002a8a <HAL_GPIO_Init+0x20e>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a4b      	ldr	r2, [pc, #300]	; (8002bac <HAL_GPIO_Init+0x330>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d101      	bne.n	8002a86 <HAL_GPIO_Init+0x20a>
 8002a82:	2307      	movs	r3, #7
 8002a84:	e00e      	b.n	8002aa4 <HAL_GPIO_Init+0x228>
 8002a86:	2308      	movs	r3, #8
 8002a88:	e00c      	b.n	8002aa4 <HAL_GPIO_Init+0x228>
 8002a8a:	2306      	movs	r3, #6
 8002a8c:	e00a      	b.n	8002aa4 <HAL_GPIO_Init+0x228>
 8002a8e:	2305      	movs	r3, #5
 8002a90:	e008      	b.n	8002aa4 <HAL_GPIO_Init+0x228>
 8002a92:	2304      	movs	r3, #4
 8002a94:	e006      	b.n	8002aa4 <HAL_GPIO_Init+0x228>
 8002a96:	2303      	movs	r3, #3
 8002a98:	e004      	b.n	8002aa4 <HAL_GPIO_Init+0x228>
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	e002      	b.n	8002aa4 <HAL_GPIO_Init+0x228>
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e000      	b.n	8002aa4 <HAL_GPIO_Init+0x228>
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	69fa      	ldr	r2, [r7, #28]
 8002aa6:	f002 0203 	and.w	r2, r2, #3
 8002aaa:	0092      	lsls	r2, r2, #2
 8002aac:	4093      	lsls	r3, r2
 8002aae:	69ba      	ldr	r2, [r7, #24]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ab4:	4935      	ldr	r1, [pc, #212]	; (8002b8c <HAL_GPIO_Init+0x310>)
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	089b      	lsrs	r3, r3, #2
 8002aba:	3302      	adds	r3, #2
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ac2:	4b3b      	ldr	r3, [pc, #236]	; (8002bb0 <HAL_GPIO_Init+0x334>)
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	43db      	mvns	r3, r3
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	4013      	ands	r3, r2
 8002ad0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d003      	beq.n	8002ae6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002ade:	69ba      	ldr	r2, [r7, #24]
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ae6:	4a32      	ldr	r2, [pc, #200]	; (8002bb0 <HAL_GPIO_Init+0x334>)
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002aec:	4b30      	ldr	r3, [pc, #192]	; (8002bb0 <HAL_GPIO_Init+0x334>)
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	43db      	mvns	r3, r3
 8002af6:	69ba      	ldr	r2, [r7, #24]
 8002af8:	4013      	ands	r3, r2
 8002afa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d003      	beq.n	8002b10 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b10:	4a27      	ldr	r2, [pc, #156]	; (8002bb0 <HAL_GPIO_Init+0x334>)
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b16:	4b26      	ldr	r3, [pc, #152]	; (8002bb0 <HAL_GPIO_Init+0x334>)
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	43db      	mvns	r3, r3
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	4013      	ands	r3, r2
 8002b24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d003      	beq.n	8002b3a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002b32:	69ba      	ldr	r2, [r7, #24]
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b3a:	4a1d      	ldr	r2, [pc, #116]	; (8002bb0 <HAL_GPIO_Init+0x334>)
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b40:	4b1b      	ldr	r3, [pc, #108]	; (8002bb0 <HAL_GPIO_Init+0x334>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	43db      	mvns	r3, r3
 8002b4a:	69ba      	ldr	r2, [r7, #24]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d003      	beq.n	8002b64 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b64:	4a12      	ldr	r2, [pc, #72]	; (8002bb0 <HAL_GPIO_Init+0x334>)
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	61fb      	str	r3, [r7, #28]
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	2b0f      	cmp	r3, #15
 8002b74:	f67f ae90 	bls.w	8002898 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b78:	bf00      	nop
 8002b7a:	bf00      	nop
 8002b7c:	3724      	adds	r7, #36	; 0x24
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	40023800 	.word	0x40023800
 8002b8c:	40013800 	.word	0x40013800
 8002b90:	40020000 	.word	0x40020000
 8002b94:	40020400 	.word	0x40020400
 8002b98:	40020800 	.word	0x40020800
 8002b9c:	40020c00 	.word	0x40020c00
 8002ba0:	40021000 	.word	0x40021000
 8002ba4:	40021400 	.word	0x40021400
 8002ba8:	40021800 	.word	0x40021800
 8002bac:	40021c00 	.word	0x40021c00
 8002bb0:	40013c00 	.word	0x40013c00

08002bb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	807b      	strh	r3, [r7, #2]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bc4:	787b      	ldrb	r3, [r7, #1]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d003      	beq.n	8002bd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bca:	887a      	ldrh	r2, [r7, #2]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002bd0:	e003      	b.n	8002bda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002bd2:	887b      	ldrh	r3, [r7, #2]
 8002bd4:	041a      	lsls	r2, r3, #16
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	619a      	str	r2, [r3, #24]
}
 8002bda:	bf00      	nop
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
	...

08002be8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	4603      	mov	r3, r0
 8002bf0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002bf2:	4b08      	ldr	r3, [pc, #32]	; (8002c14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bf4:	695a      	ldr	r2, [r3, #20]
 8002bf6:	88fb      	ldrh	r3, [r7, #6]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d006      	beq.n	8002c0c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002bfe:	4a05      	ldr	r2, [pc, #20]	; (8002c14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c00:	88fb      	ldrh	r3, [r7, #6]
 8002c02:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c04:	88fb      	ldrh	r3, [r7, #6]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f000 f806 	bl	8002c18 <HAL_GPIO_EXTI_Callback>
  }
}
 8002c0c:	bf00      	nop
 8002c0e:	3708      	adds	r7, #8
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	40013c00 	.word	0x40013c00

08002c18 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	4603      	mov	r3, r0
 8002c20:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002c22:	bf00      	nop
 8002c24:	370c      	adds	r7, #12
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr
	...

08002c30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d101      	bne.n	8002c42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e12b      	b.n	8002e9a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d106      	bne.n	8002c5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f7fe fdea 	bl	8001830 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2224      	movs	r2, #36	; 0x24
 8002c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f022 0201 	bic.w	r2, r2, #1
 8002c72:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c82:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c92:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c94:	f000 fd7e 	bl	8003794 <HAL_RCC_GetPCLK1Freq>
 8002c98:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	4a81      	ldr	r2, [pc, #516]	; (8002ea4 <HAL_I2C_Init+0x274>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d807      	bhi.n	8002cb4 <HAL_I2C_Init+0x84>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	4a80      	ldr	r2, [pc, #512]	; (8002ea8 <HAL_I2C_Init+0x278>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	bf94      	ite	ls
 8002cac:	2301      	movls	r3, #1
 8002cae:	2300      	movhi	r3, #0
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	e006      	b.n	8002cc2 <HAL_I2C_Init+0x92>
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	4a7d      	ldr	r2, [pc, #500]	; (8002eac <HAL_I2C_Init+0x27c>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	bf94      	ite	ls
 8002cbc:	2301      	movls	r3, #1
 8002cbe:	2300      	movhi	r3, #0
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e0e7      	b.n	8002e9a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	4a78      	ldr	r2, [pc, #480]	; (8002eb0 <HAL_I2C_Init+0x280>)
 8002cce:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd2:	0c9b      	lsrs	r3, r3, #18
 8002cd4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	68ba      	ldr	r2, [r7, #8]
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	6a1b      	ldr	r3, [r3, #32]
 8002cf0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	4a6a      	ldr	r2, [pc, #424]	; (8002ea4 <HAL_I2C_Init+0x274>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d802      	bhi.n	8002d04 <HAL_I2C_Init+0xd4>
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	3301      	adds	r3, #1
 8002d02:	e009      	b.n	8002d18 <HAL_I2C_Init+0xe8>
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d0a:	fb02 f303 	mul.w	r3, r2, r3
 8002d0e:	4a69      	ldr	r2, [pc, #420]	; (8002eb4 <HAL_I2C_Init+0x284>)
 8002d10:	fba2 2303 	umull	r2, r3, r2, r3
 8002d14:	099b      	lsrs	r3, r3, #6
 8002d16:	3301      	adds	r3, #1
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	6812      	ldr	r2, [r2, #0]
 8002d1c:	430b      	orrs	r3, r1
 8002d1e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	69db      	ldr	r3, [r3, #28]
 8002d26:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d2a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	495c      	ldr	r1, [pc, #368]	; (8002ea4 <HAL_I2C_Init+0x274>)
 8002d34:	428b      	cmp	r3, r1
 8002d36:	d819      	bhi.n	8002d6c <HAL_I2C_Init+0x13c>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	1e59      	subs	r1, r3, #1
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d46:	1c59      	adds	r1, r3, #1
 8002d48:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002d4c:	400b      	ands	r3, r1
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d00a      	beq.n	8002d68 <HAL_I2C_Init+0x138>
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	1e59      	subs	r1, r3, #1
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d60:	3301      	adds	r3, #1
 8002d62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d66:	e051      	b.n	8002e0c <HAL_I2C_Init+0x1dc>
 8002d68:	2304      	movs	r3, #4
 8002d6a:	e04f      	b.n	8002e0c <HAL_I2C_Init+0x1dc>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d111      	bne.n	8002d98 <HAL_I2C_Init+0x168>
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	1e58      	subs	r0, r3, #1
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6859      	ldr	r1, [r3, #4]
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	440b      	add	r3, r1
 8002d82:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d86:	3301      	adds	r3, #1
 8002d88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	bf0c      	ite	eq
 8002d90:	2301      	moveq	r3, #1
 8002d92:	2300      	movne	r3, #0
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	e012      	b.n	8002dbe <HAL_I2C_Init+0x18e>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	1e58      	subs	r0, r3, #1
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6859      	ldr	r1, [r3, #4]
 8002da0:	460b      	mov	r3, r1
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	440b      	add	r3, r1
 8002da6:	0099      	lsls	r1, r3, #2
 8002da8:	440b      	add	r3, r1
 8002daa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dae:	3301      	adds	r3, #1
 8002db0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	bf0c      	ite	eq
 8002db8:	2301      	moveq	r3, #1
 8002dba:	2300      	movne	r3, #0
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <HAL_I2C_Init+0x196>
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e022      	b.n	8002e0c <HAL_I2C_Init+0x1dc>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d10e      	bne.n	8002dec <HAL_I2C_Init+0x1bc>
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	1e58      	subs	r0, r3, #1
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6859      	ldr	r1, [r3, #4]
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	440b      	add	r3, r1
 8002ddc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002de0:	3301      	adds	r3, #1
 8002de2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002de6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dea:	e00f      	b.n	8002e0c <HAL_I2C_Init+0x1dc>
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	1e58      	subs	r0, r3, #1
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6859      	ldr	r1, [r3, #4]
 8002df4:	460b      	mov	r3, r1
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	440b      	add	r3, r1
 8002dfa:	0099      	lsls	r1, r3, #2
 8002dfc:	440b      	add	r3, r1
 8002dfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e02:	3301      	adds	r3, #1
 8002e04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e0c:	6879      	ldr	r1, [r7, #4]
 8002e0e:	6809      	ldr	r1, [r1, #0]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	69da      	ldr	r2, [r3, #28]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a1b      	ldr	r3, [r3, #32]
 8002e26:	431a      	orrs	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e3a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	6911      	ldr	r1, [r2, #16]
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	68d2      	ldr	r2, [r2, #12]
 8002e46:	4311      	orrs	r1, r2
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	6812      	ldr	r2, [r2, #0]
 8002e4c:	430b      	orrs	r3, r1
 8002e4e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	695a      	ldr	r2, [r3, #20]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	699b      	ldr	r3, [r3, #24]
 8002e62:	431a      	orrs	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	430a      	orrs	r2, r1
 8002e6a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f042 0201 	orr.w	r2, r2, #1
 8002e7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2220      	movs	r2, #32
 8002e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3710      	adds	r7, #16
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	000186a0 	.word	0x000186a0
 8002ea8:	001e847f 	.word	0x001e847f
 8002eac:	003d08ff 	.word	0x003d08ff
 8002eb0:	431bde83 	.word	0x431bde83
 8002eb4:	10624dd3 	.word	0x10624dd3

08002eb8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b086      	sub	sp, #24
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d101      	bne.n	8002eca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e267      	b.n	800339a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0301 	and.w	r3, r3, #1
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d075      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ed6:	4b88      	ldr	r3, [pc, #544]	; (80030f8 <HAL_RCC_OscConfig+0x240>)
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f003 030c 	and.w	r3, r3, #12
 8002ede:	2b04      	cmp	r3, #4
 8002ee0:	d00c      	beq.n	8002efc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ee2:	4b85      	ldr	r3, [pc, #532]	; (80030f8 <HAL_RCC_OscConfig+0x240>)
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002eea:	2b08      	cmp	r3, #8
 8002eec:	d112      	bne.n	8002f14 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002eee:	4b82      	ldr	r3, [pc, #520]	; (80030f8 <HAL_RCC_OscConfig+0x240>)
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ef6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002efa:	d10b      	bne.n	8002f14 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002efc:	4b7e      	ldr	r3, [pc, #504]	; (80030f8 <HAL_RCC_OscConfig+0x240>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d05b      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x108>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d157      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e242      	b.n	800339a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f1c:	d106      	bne.n	8002f2c <HAL_RCC_OscConfig+0x74>
 8002f1e:	4b76      	ldr	r3, [pc, #472]	; (80030f8 <HAL_RCC_OscConfig+0x240>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a75      	ldr	r2, [pc, #468]	; (80030f8 <HAL_RCC_OscConfig+0x240>)
 8002f24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f28:	6013      	str	r3, [r2, #0]
 8002f2a:	e01d      	b.n	8002f68 <HAL_RCC_OscConfig+0xb0>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f34:	d10c      	bne.n	8002f50 <HAL_RCC_OscConfig+0x98>
 8002f36:	4b70      	ldr	r3, [pc, #448]	; (80030f8 <HAL_RCC_OscConfig+0x240>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a6f      	ldr	r2, [pc, #444]	; (80030f8 <HAL_RCC_OscConfig+0x240>)
 8002f3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f40:	6013      	str	r3, [r2, #0]
 8002f42:	4b6d      	ldr	r3, [pc, #436]	; (80030f8 <HAL_RCC_OscConfig+0x240>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a6c      	ldr	r2, [pc, #432]	; (80030f8 <HAL_RCC_OscConfig+0x240>)
 8002f48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f4c:	6013      	str	r3, [r2, #0]
 8002f4e:	e00b      	b.n	8002f68 <HAL_RCC_OscConfig+0xb0>
 8002f50:	4b69      	ldr	r3, [pc, #420]	; (80030f8 <HAL_RCC_OscConfig+0x240>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a68      	ldr	r2, [pc, #416]	; (80030f8 <HAL_RCC_OscConfig+0x240>)
 8002f56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f5a:	6013      	str	r3, [r2, #0]
 8002f5c:	4b66      	ldr	r3, [pc, #408]	; (80030f8 <HAL_RCC_OscConfig+0x240>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a65      	ldr	r2, [pc, #404]	; (80030f8 <HAL_RCC_OscConfig+0x240>)
 8002f62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d013      	beq.n	8002f98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f70:	f7ff fab0 	bl	80024d4 <HAL_GetTick>
 8002f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f76:	e008      	b.n	8002f8a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f78:	f7ff faac 	bl	80024d4 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b64      	cmp	r3, #100	; 0x64
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e207      	b.n	800339a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f8a:	4b5b      	ldr	r3, [pc, #364]	; (80030f8 <HAL_RCC_OscConfig+0x240>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d0f0      	beq.n	8002f78 <HAL_RCC_OscConfig+0xc0>
 8002f96:	e014      	b.n	8002fc2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f98:	f7ff fa9c 	bl	80024d4 <HAL_GetTick>
 8002f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f9e:	e008      	b.n	8002fb2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fa0:	f7ff fa98 	bl	80024d4 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b64      	cmp	r3, #100	; 0x64
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e1f3      	b.n	800339a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fb2:	4b51      	ldr	r3, [pc, #324]	; (80030f8 <HAL_RCC_OscConfig+0x240>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1f0      	bne.n	8002fa0 <HAL_RCC_OscConfig+0xe8>
 8002fbe:	e000      	b.n	8002fc2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d063      	beq.n	8003096 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fce:	4b4a      	ldr	r3, [pc, #296]	; (80030f8 <HAL_RCC_OscConfig+0x240>)
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f003 030c 	and.w	r3, r3, #12
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d00b      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fda:	4b47      	ldr	r3, [pc, #284]	; (80030f8 <HAL_RCC_OscConfig+0x240>)
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fe2:	2b08      	cmp	r3, #8
 8002fe4:	d11c      	bne.n	8003020 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fe6:	4b44      	ldr	r3, [pc, #272]	; (80030f8 <HAL_RCC_OscConfig+0x240>)
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d116      	bne.n	8003020 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ff2:	4b41      	ldr	r3, [pc, #260]	; (80030f8 <HAL_RCC_OscConfig+0x240>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d005      	beq.n	800300a <HAL_RCC_OscConfig+0x152>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	2b01      	cmp	r3, #1
 8003004:	d001      	beq.n	800300a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e1c7      	b.n	800339a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800300a:	4b3b      	ldr	r3, [pc, #236]	; (80030f8 <HAL_RCC_OscConfig+0x240>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	4937      	ldr	r1, [pc, #220]	; (80030f8 <HAL_RCC_OscConfig+0x240>)
 800301a:	4313      	orrs	r3, r2
 800301c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800301e:	e03a      	b.n	8003096 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d020      	beq.n	800306a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003028:	4b34      	ldr	r3, [pc, #208]	; (80030fc <HAL_RCC_OscConfig+0x244>)
 800302a:	2201      	movs	r2, #1
 800302c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800302e:	f7ff fa51 	bl	80024d4 <HAL_GetTick>
 8003032:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003034:	e008      	b.n	8003048 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003036:	f7ff fa4d 	bl	80024d4 <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	2b02      	cmp	r3, #2
 8003042:	d901      	bls.n	8003048 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	e1a8      	b.n	800339a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003048:	4b2b      	ldr	r3, [pc, #172]	; (80030f8 <HAL_RCC_OscConfig+0x240>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0302 	and.w	r3, r3, #2
 8003050:	2b00      	cmp	r3, #0
 8003052:	d0f0      	beq.n	8003036 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003054:	4b28      	ldr	r3, [pc, #160]	; (80030f8 <HAL_RCC_OscConfig+0x240>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	691b      	ldr	r3, [r3, #16]
 8003060:	00db      	lsls	r3, r3, #3
 8003062:	4925      	ldr	r1, [pc, #148]	; (80030f8 <HAL_RCC_OscConfig+0x240>)
 8003064:	4313      	orrs	r3, r2
 8003066:	600b      	str	r3, [r1, #0]
 8003068:	e015      	b.n	8003096 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800306a:	4b24      	ldr	r3, [pc, #144]	; (80030fc <HAL_RCC_OscConfig+0x244>)
 800306c:	2200      	movs	r2, #0
 800306e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003070:	f7ff fa30 	bl	80024d4 <HAL_GetTick>
 8003074:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003076:	e008      	b.n	800308a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003078:	f7ff fa2c 	bl	80024d4 <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	2b02      	cmp	r3, #2
 8003084:	d901      	bls.n	800308a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e187      	b.n	800339a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800308a:	4b1b      	ldr	r3, [pc, #108]	; (80030f8 <HAL_RCC_OscConfig+0x240>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d1f0      	bne.n	8003078 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0308 	and.w	r3, r3, #8
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d036      	beq.n	8003110 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	695b      	ldr	r3, [r3, #20]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d016      	beq.n	80030d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030aa:	4b15      	ldr	r3, [pc, #84]	; (8003100 <HAL_RCC_OscConfig+0x248>)
 80030ac:	2201      	movs	r2, #1
 80030ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030b0:	f7ff fa10 	bl	80024d4 <HAL_GetTick>
 80030b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030b6:	e008      	b.n	80030ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030b8:	f7ff fa0c 	bl	80024d4 <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e167      	b.n	800339a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030ca:	4b0b      	ldr	r3, [pc, #44]	; (80030f8 <HAL_RCC_OscConfig+0x240>)
 80030cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030ce:	f003 0302 	and.w	r3, r3, #2
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d0f0      	beq.n	80030b8 <HAL_RCC_OscConfig+0x200>
 80030d6:	e01b      	b.n	8003110 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030d8:	4b09      	ldr	r3, [pc, #36]	; (8003100 <HAL_RCC_OscConfig+0x248>)
 80030da:	2200      	movs	r2, #0
 80030dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030de:	f7ff f9f9 	bl	80024d4 <HAL_GetTick>
 80030e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030e4:	e00e      	b.n	8003104 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030e6:	f7ff f9f5 	bl	80024d4 <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d907      	bls.n	8003104 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e150      	b.n	800339a <HAL_RCC_OscConfig+0x4e2>
 80030f8:	40023800 	.word	0x40023800
 80030fc:	42470000 	.word	0x42470000
 8003100:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003104:	4b88      	ldr	r3, [pc, #544]	; (8003328 <HAL_RCC_OscConfig+0x470>)
 8003106:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003108:	f003 0302 	and.w	r3, r3, #2
 800310c:	2b00      	cmp	r3, #0
 800310e:	d1ea      	bne.n	80030e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0304 	and.w	r3, r3, #4
 8003118:	2b00      	cmp	r3, #0
 800311a:	f000 8097 	beq.w	800324c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800311e:	2300      	movs	r3, #0
 8003120:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003122:	4b81      	ldr	r3, [pc, #516]	; (8003328 <HAL_RCC_OscConfig+0x470>)
 8003124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d10f      	bne.n	800314e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800312e:	2300      	movs	r3, #0
 8003130:	60bb      	str	r3, [r7, #8]
 8003132:	4b7d      	ldr	r3, [pc, #500]	; (8003328 <HAL_RCC_OscConfig+0x470>)
 8003134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003136:	4a7c      	ldr	r2, [pc, #496]	; (8003328 <HAL_RCC_OscConfig+0x470>)
 8003138:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800313c:	6413      	str	r3, [r2, #64]	; 0x40
 800313e:	4b7a      	ldr	r3, [pc, #488]	; (8003328 <HAL_RCC_OscConfig+0x470>)
 8003140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003146:	60bb      	str	r3, [r7, #8]
 8003148:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800314a:	2301      	movs	r3, #1
 800314c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800314e:	4b77      	ldr	r3, [pc, #476]	; (800332c <HAL_RCC_OscConfig+0x474>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003156:	2b00      	cmp	r3, #0
 8003158:	d118      	bne.n	800318c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800315a:	4b74      	ldr	r3, [pc, #464]	; (800332c <HAL_RCC_OscConfig+0x474>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a73      	ldr	r2, [pc, #460]	; (800332c <HAL_RCC_OscConfig+0x474>)
 8003160:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003164:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003166:	f7ff f9b5 	bl	80024d4 <HAL_GetTick>
 800316a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800316c:	e008      	b.n	8003180 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800316e:	f7ff f9b1 	bl	80024d4 <HAL_GetTick>
 8003172:	4602      	mov	r2, r0
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	2b02      	cmp	r3, #2
 800317a:	d901      	bls.n	8003180 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800317c:	2303      	movs	r3, #3
 800317e:	e10c      	b.n	800339a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003180:	4b6a      	ldr	r3, [pc, #424]	; (800332c <HAL_RCC_OscConfig+0x474>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003188:	2b00      	cmp	r3, #0
 800318a:	d0f0      	beq.n	800316e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	2b01      	cmp	r3, #1
 8003192:	d106      	bne.n	80031a2 <HAL_RCC_OscConfig+0x2ea>
 8003194:	4b64      	ldr	r3, [pc, #400]	; (8003328 <HAL_RCC_OscConfig+0x470>)
 8003196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003198:	4a63      	ldr	r2, [pc, #396]	; (8003328 <HAL_RCC_OscConfig+0x470>)
 800319a:	f043 0301 	orr.w	r3, r3, #1
 800319e:	6713      	str	r3, [r2, #112]	; 0x70
 80031a0:	e01c      	b.n	80031dc <HAL_RCC_OscConfig+0x324>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	2b05      	cmp	r3, #5
 80031a8:	d10c      	bne.n	80031c4 <HAL_RCC_OscConfig+0x30c>
 80031aa:	4b5f      	ldr	r3, [pc, #380]	; (8003328 <HAL_RCC_OscConfig+0x470>)
 80031ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ae:	4a5e      	ldr	r2, [pc, #376]	; (8003328 <HAL_RCC_OscConfig+0x470>)
 80031b0:	f043 0304 	orr.w	r3, r3, #4
 80031b4:	6713      	str	r3, [r2, #112]	; 0x70
 80031b6:	4b5c      	ldr	r3, [pc, #368]	; (8003328 <HAL_RCC_OscConfig+0x470>)
 80031b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ba:	4a5b      	ldr	r2, [pc, #364]	; (8003328 <HAL_RCC_OscConfig+0x470>)
 80031bc:	f043 0301 	orr.w	r3, r3, #1
 80031c0:	6713      	str	r3, [r2, #112]	; 0x70
 80031c2:	e00b      	b.n	80031dc <HAL_RCC_OscConfig+0x324>
 80031c4:	4b58      	ldr	r3, [pc, #352]	; (8003328 <HAL_RCC_OscConfig+0x470>)
 80031c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c8:	4a57      	ldr	r2, [pc, #348]	; (8003328 <HAL_RCC_OscConfig+0x470>)
 80031ca:	f023 0301 	bic.w	r3, r3, #1
 80031ce:	6713      	str	r3, [r2, #112]	; 0x70
 80031d0:	4b55      	ldr	r3, [pc, #340]	; (8003328 <HAL_RCC_OscConfig+0x470>)
 80031d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d4:	4a54      	ldr	r2, [pc, #336]	; (8003328 <HAL_RCC_OscConfig+0x470>)
 80031d6:	f023 0304 	bic.w	r3, r3, #4
 80031da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d015      	beq.n	8003210 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e4:	f7ff f976 	bl	80024d4 <HAL_GetTick>
 80031e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031ea:	e00a      	b.n	8003202 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031ec:	f7ff f972 	bl	80024d4 <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e0cb      	b.n	800339a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003202:	4b49      	ldr	r3, [pc, #292]	; (8003328 <HAL_RCC_OscConfig+0x470>)
 8003204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	2b00      	cmp	r3, #0
 800320c:	d0ee      	beq.n	80031ec <HAL_RCC_OscConfig+0x334>
 800320e:	e014      	b.n	800323a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003210:	f7ff f960 	bl	80024d4 <HAL_GetTick>
 8003214:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003216:	e00a      	b.n	800322e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003218:	f7ff f95c 	bl	80024d4 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	f241 3288 	movw	r2, #5000	; 0x1388
 8003226:	4293      	cmp	r3, r2
 8003228:	d901      	bls.n	800322e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e0b5      	b.n	800339a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800322e:	4b3e      	ldr	r3, [pc, #248]	; (8003328 <HAL_RCC_OscConfig+0x470>)
 8003230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003232:	f003 0302 	and.w	r3, r3, #2
 8003236:	2b00      	cmp	r3, #0
 8003238:	d1ee      	bne.n	8003218 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800323a:	7dfb      	ldrb	r3, [r7, #23]
 800323c:	2b01      	cmp	r3, #1
 800323e:	d105      	bne.n	800324c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003240:	4b39      	ldr	r3, [pc, #228]	; (8003328 <HAL_RCC_OscConfig+0x470>)
 8003242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003244:	4a38      	ldr	r2, [pc, #224]	; (8003328 <HAL_RCC_OscConfig+0x470>)
 8003246:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800324a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	699b      	ldr	r3, [r3, #24]
 8003250:	2b00      	cmp	r3, #0
 8003252:	f000 80a1 	beq.w	8003398 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003256:	4b34      	ldr	r3, [pc, #208]	; (8003328 <HAL_RCC_OscConfig+0x470>)
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	f003 030c 	and.w	r3, r3, #12
 800325e:	2b08      	cmp	r3, #8
 8003260:	d05c      	beq.n	800331c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	699b      	ldr	r3, [r3, #24]
 8003266:	2b02      	cmp	r3, #2
 8003268:	d141      	bne.n	80032ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800326a:	4b31      	ldr	r3, [pc, #196]	; (8003330 <HAL_RCC_OscConfig+0x478>)
 800326c:	2200      	movs	r2, #0
 800326e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003270:	f7ff f930 	bl	80024d4 <HAL_GetTick>
 8003274:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003276:	e008      	b.n	800328a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003278:	f7ff f92c 	bl	80024d4 <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	2b02      	cmp	r3, #2
 8003284:	d901      	bls.n	800328a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e087      	b.n	800339a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800328a:	4b27      	ldr	r3, [pc, #156]	; (8003328 <HAL_RCC_OscConfig+0x470>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d1f0      	bne.n	8003278 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	69da      	ldr	r2, [r3, #28]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a1b      	ldr	r3, [r3, #32]
 800329e:	431a      	orrs	r2, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a4:	019b      	lsls	r3, r3, #6
 80032a6:	431a      	orrs	r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ac:	085b      	lsrs	r3, r3, #1
 80032ae:	3b01      	subs	r3, #1
 80032b0:	041b      	lsls	r3, r3, #16
 80032b2:	431a      	orrs	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b8:	061b      	lsls	r3, r3, #24
 80032ba:	491b      	ldr	r1, [pc, #108]	; (8003328 <HAL_RCC_OscConfig+0x470>)
 80032bc:	4313      	orrs	r3, r2
 80032be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032c0:	4b1b      	ldr	r3, [pc, #108]	; (8003330 <HAL_RCC_OscConfig+0x478>)
 80032c2:	2201      	movs	r2, #1
 80032c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c6:	f7ff f905 	bl	80024d4 <HAL_GetTick>
 80032ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032cc:	e008      	b.n	80032e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032ce:	f7ff f901 	bl	80024d4 <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d901      	bls.n	80032e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e05c      	b.n	800339a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032e0:	4b11      	ldr	r3, [pc, #68]	; (8003328 <HAL_RCC_OscConfig+0x470>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d0f0      	beq.n	80032ce <HAL_RCC_OscConfig+0x416>
 80032ec:	e054      	b.n	8003398 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ee:	4b10      	ldr	r3, [pc, #64]	; (8003330 <HAL_RCC_OscConfig+0x478>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f4:	f7ff f8ee 	bl	80024d4 <HAL_GetTick>
 80032f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032fa:	e008      	b.n	800330e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032fc:	f7ff f8ea 	bl	80024d4 <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	2b02      	cmp	r3, #2
 8003308:	d901      	bls.n	800330e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e045      	b.n	800339a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800330e:	4b06      	ldr	r3, [pc, #24]	; (8003328 <HAL_RCC_OscConfig+0x470>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d1f0      	bne.n	80032fc <HAL_RCC_OscConfig+0x444>
 800331a:	e03d      	b.n	8003398 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	699b      	ldr	r3, [r3, #24]
 8003320:	2b01      	cmp	r3, #1
 8003322:	d107      	bne.n	8003334 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e038      	b.n	800339a <HAL_RCC_OscConfig+0x4e2>
 8003328:	40023800 	.word	0x40023800
 800332c:	40007000 	.word	0x40007000
 8003330:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003334:	4b1b      	ldr	r3, [pc, #108]	; (80033a4 <HAL_RCC_OscConfig+0x4ec>)
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	2b01      	cmp	r3, #1
 8003340:	d028      	beq.n	8003394 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800334c:	429a      	cmp	r2, r3
 800334e:	d121      	bne.n	8003394 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800335a:	429a      	cmp	r2, r3
 800335c:	d11a      	bne.n	8003394 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800335e:	68fa      	ldr	r2, [r7, #12]
 8003360:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003364:	4013      	ands	r3, r2
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800336a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800336c:	4293      	cmp	r3, r2
 800336e:	d111      	bne.n	8003394 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800337a:	085b      	lsrs	r3, r3, #1
 800337c:	3b01      	subs	r3, #1
 800337e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003380:	429a      	cmp	r2, r3
 8003382:	d107      	bne.n	8003394 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003390:	429a      	cmp	r2, r3
 8003392:	d001      	beq.n	8003398 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e000      	b.n	800339a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3718      	adds	r7, #24
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	40023800 	.word	0x40023800

080033a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d101      	bne.n	80033bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e0cc      	b.n	8003556 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033bc:	4b68      	ldr	r3, [pc, #416]	; (8003560 <HAL_RCC_ClockConfig+0x1b8>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0307 	and.w	r3, r3, #7
 80033c4:	683a      	ldr	r2, [r7, #0]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d90c      	bls.n	80033e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ca:	4b65      	ldr	r3, [pc, #404]	; (8003560 <HAL_RCC_ClockConfig+0x1b8>)
 80033cc:	683a      	ldr	r2, [r7, #0]
 80033ce:	b2d2      	uxtb	r2, r2
 80033d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033d2:	4b63      	ldr	r3, [pc, #396]	; (8003560 <HAL_RCC_ClockConfig+0x1b8>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0307 	and.w	r3, r3, #7
 80033da:	683a      	ldr	r2, [r7, #0]
 80033dc:	429a      	cmp	r2, r3
 80033de:	d001      	beq.n	80033e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e0b8      	b.n	8003556 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0302 	and.w	r3, r3, #2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d020      	beq.n	8003432 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0304 	and.w	r3, r3, #4
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d005      	beq.n	8003408 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033fc:	4b59      	ldr	r3, [pc, #356]	; (8003564 <HAL_RCC_ClockConfig+0x1bc>)
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	4a58      	ldr	r2, [pc, #352]	; (8003564 <HAL_RCC_ClockConfig+0x1bc>)
 8003402:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003406:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0308 	and.w	r3, r3, #8
 8003410:	2b00      	cmp	r3, #0
 8003412:	d005      	beq.n	8003420 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003414:	4b53      	ldr	r3, [pc, #332]	; (8003564 <HAL_RCC_ClockConfig+0x1bc>)
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	4a52      	ldr	r2, [pc, #328]	; (8003564 <HAL_RCC_ClockConfig+0x1bc>)
 800341a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800341e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003420:	4b50      	ldr	r3, [pc, #320]	; (8003564 <HAL_RCC_ClockConfig+0x1bc>)
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	494d      	ldr	r1, [pc, #308]	; (8003564 <HAL_RCC_ClockConfig+0x1bc>)
 800342e:	4313      	orrs	r3, r2
 8003430:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0301 	and.w	r3, r3, #1
 800343a:	2b00      	cmp	r3, #0
 800343c:	d044      	beq.n	80034c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	2b01      	cmp	r3, #1
 8003444:	d107      	bne.n	8003456 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003446:	4b47      	ldr	r3, [pc, #284]	; (8003564 <HAL_RCC_ClockConfig+0x1bc>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d119      	bne.n	8003486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e07f      	b.n	8003556 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	2b02      	cmp	r3, #2
 800345c:	d003      	beq.n	8003466 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003462:	2b03      	cmp	r3, #3
 8003464:	d107      	bne.n	8003476 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003466:	4b3f      	ldr	r3, [pc, #252]	; (8003564 <HAL_RCC_ClockConfig+0x1bc>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d109      	bne.n	8003486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e06f      	b.n	8003556 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003476:	4b3b      	ldr	r3, [pc, #236]	; (8003564 <HAL_RCC_ClockConfig+0x1bc>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	2b00      	cmp	r3, #0
 8003480:	d101      	bne.n	8003486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e067      	b.n	8003556 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003486:	4b37      	ldr	r3, [pc, #220]	; (8003564 <HAL_RCC_ClockConfig+0x1bc>)
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f023 0203 	bic.w	r2, r3, #3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	4934      	ldr	r1, [pc, #208]	; (8003564 <HAL_RCC_ClockConfig+0x1bc>)
 8003494:	4313      	orrs	r3, r2
 8003496:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003498:	f7ff f81c 	bl	80024d4 <HAL_GetTick>
 800349c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800349e:	e00a      	b.n	80034b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034a0:	f7ff f818 	bl	80024d4 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e04f      	b.n	8003556 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034b6:	4b2b      	ldr	r3, [pc, #172]	; (8003564 <HAL_RCC_ClockConfig+0x1bc>)
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	f003 020c 	and.w	r2, r3, #12
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d1eb      	bne.n	80034a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034c8:	4b25      	ldr	r3, [pc, #148]	; (8003560 <HAL_RCC_ClockConfig+0x1b8>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0307 	and.w	r3, r3, #7
 80034d0:	683a      	ldr	r2, [r7, #0]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d20c      	bcs.n	80034f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034d6:	4b22      	ldr	r3, [pc, #136]	; (8003560 <HAL_RCC_ClockConfig+0x1b8>)
 80034d8:	683a      	ldr	r2, [r7, #0]
 80034da:	b2d2      	uxtb	r2, r2
 80034dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034de:	4b20      	ldr	r3, [pc, #128]	; (8003560 <HAL_RCC_ClockConfig+0x1b8>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0307 	and.w	r3, r3, #7
 80034e6:	683a      	ldr	r2, [r7, #0]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d001      	beq.n	80034f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e032      	b.n	8003556 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0304 	and.w	r3, r3, #4
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d008      	beq.n	800350e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034fc:	4b19      	ldr	r3, [pc, #100]	; (8003564 <HAL_RCC_ClockConfig+0x1bc>)
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	4916      	ldr	r1, [pc, #88]	; (8003564 <HAL_RCC_ClockConfig+0x1bc>)
 800350a:	4313      	orrs	r3, r2
 800350c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0308 	and.w	r3, r3, #8
 8003516:	2b00      	cmp	r3, #0
 8003518:	d009      	beq.n	800352e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800351a:	4b12      	ldr	r3, [pc, #72]	; (8003564 <HAL_RCC_ClockConfig+0x1bc>)
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	00db      	lsls	r3, r3, #3
 8003528:	490e      	ldr	r1, [pc, #56]	; (8003564 <HAL_RCC_ClockConfig+0x1bc>)
 800352a:	4313      	orrs	r3, r2
 800352c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800352e:	f000 f821 	bl	8003574 <HAL_RCC_GetSysClockFreq>
 8003532:	4602      	mov	r2, r0
 8003534:	4b0b      	ldr	r3, [pc, #44]	; (8003564 <HAL_RCC_ClockConfig+0x1bc>)
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	091b      	lsrs	r3, r3, #4
 800353a:	f003 030f 	and.w	r3, r3, #15
 800353e:	490a      	ldr	r1, [pc, #40]	; (8003568 <HAL_RCC_ClockConfig+0x1c0>)
 8003540:	5ccb      	ldrb	r3, [r1, r3]
 8003542:	fa22 f303 	lsr.w	r3, r2, r3
 8003546:	4a09      	ldr	r2, [pc, #36]	; (800356c <HAL_RCC_ClockConfig+0x1c4>)
 8003548:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800354a:	4b09      	ldr	r3, [pc, #36]	; (8003570 <HAL_RCC_ClockConfig+0x1c8>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4618      	mov	r0, r3
 8003550:	f7fe ff7c 	bl	800244c <HAL_InitTick>

  return HAL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3710      	adds	r7, #16
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	40023c00 	.word	0x40023c00
 8003564:	40023800 	.word	0x40023800
 8003568:	08006cec 	.word	0x08006cec
 800356c:	20000000 	.word	0x20000000
 8003570:	2000000c 	.word	0x2000000c

08003574 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003574:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003578:	b094      	sub	sp, #80	; 0x50
 800357a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800357c:	2300      	movs	r3, #0
 800357e:	647b      	str	r3, [r7, #68]	; 0x44
 8003580:	2300      	movs	r3, #0
 8003582:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003584:	2300      	movs	r3, #0
 8003586:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003588:	2300      	movs	r3, #0
 800358a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800358c:	4b79      	ldr	r3, [pc, #484]	; (8003774 <HAL_RCC_GetSysClockFreq+0x200>)
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	f003 030c 	and.w	r3, r3, #12
 8003594:	2b08      	cmp	r3, #8
 8003596:	d00d      	beq.n	80035b4 <HAL_RCC_GetSysClockFreq+0x40>
 8003598:	2b08      	cmp	r3, #8
 800359a:	f200 80e1 	bhi.w	8003760 <HAL_RCC_GetSysClockFreq+0x1ec>
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d002      	beq.n	80035a8 <HAL_RCC_GetSysClockFreq+0x34>
 80035a2:	2b04      	cmp	r3, #4
 80035a4:	d003      	beq.n	80035ae <HAL_RCC_GetSysClockFreq+0x3a>
 80035a6:	e0db      	b.n	8003760 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035a8:	4b73      	ldr	r3, [pc, #460]	; (8003778 <HAL_RCC_GetSysClockFreq+0x204>)
 80035aa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80035ac:	e0db      	b.n	8003766 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035ae:	4b72      	ldr	r3, [pc, #456]	; (8003778 <HAL_RCC_GetSysClockFreq+0x204>)
 80035b0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035b2:	e0d8      	b.n	8003766 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035b4:	4b6f      	ldr	r3, [pc, #444]	; (8003774 <HAL_RCC_GetSysClockFreq+0x200>)
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035bc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035be:	4b6d      	ldr	r3, [pc, #436]	; (8003774 <HAL_RCC_GetSysClockFreq+0x200>)
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d063      	beq.n	8003692 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035ca:	4b6a      	ldr	r3, [pc, #424]	; (8003774 <HAL_RCC_GetSysClockFreq+0x200>)
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	099b      	lsrs	r3, r3, #6
 80035d0:	2200      	movs	r2, #0
 80035d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80035d4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80035d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035dc:	633b      	str	r3, [r7, #48]	; 0x30
 80035de:	2300      	movs	r3, #0
 80035e0:	637b      	str	r3, [r7, #52]	; 0x34
 80035e2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80035e6:	4622      	mov	r2, r4
 80035e8:	462b      	mov	r3, r5
 80035ea:	f04f 0000 	mov.w	r0, #0
 80035ee:	f04f 0100 	mov.w	r1, #0
 80035f2:	0159      	lsls	r1, r3, #5
 80035f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035f8:	0150      	lsls	r0, r2, #5
 80035fa:	4602      	mov	r2, r0
 80035fc:	460b      	mov	r3, r1
 80035fe:	4621      	mov	r1, r4
 8003600:	1a51      	subs	r1, r2, r1
 8003602:	6139      	str	r1, [r7, #16]
 8003604:	4629      	mov	r1, r5
 8003606:	eb63 0301 	sbc.w	r3, r3, r1
 800360a:	617b      	str	r3, [r7, #20]
 800360c:	f04f 0200 	mov.w	r2, #0
 8003610:	f04f 0300 	mov.w	r3, #0
 8003614:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003618:	4659      	mov	r1, fp
 800361a:	018b      	lsls	r3, r1, #6
 800361c:	4651      	mov	r1, sl
 800361e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003622:	4651      	mov	r1, sl
 8003624:	018a      	lsls	r2, r1, #6
 8003626:	4651      	mov	r1, sl
 8003628:	ebb2 0801 	subs.w	r8, r2, r1
 800362c:	4659      	mov	r1, fp
 800362e:	eb63 0901 	sbc.w	r9, r3, r1
 8003632:	f04f 0200 	mov.w	r2, #0
 8003636:	f04f 0300 	mov.w	r3, #0
 800363a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800363e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003642:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003646:	4690      	mov	r8, r2
 8003648:	4699      	mov	r9, r3
 800364a:	4623      	mov	r3, r4
 800364c:	eb18 0303 	adds.w	r3, r8, r3
 8003650:	60bb      	str	r3, [r7, #8]
 8003652:	462b      	mov	r3, r5
 8003654:	eb49 0303 	adc.w	r3, r9, r3
 8003658:	60fb      	str	r3, [r7, #12]
 800365a:	f04f 0200 	mov.w	r2, #0
 800365e:	f04f 0300 	mov.w	r3, #0
 8003662:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003666:	4629      	mov	r1, r5
 8003668:	028b      	lsls	r3, r1, #10
 800366a:	4621      	mov	r1, r4
 800366c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003670:	4621      	mov	r1, r4
 8003672:	028a      	lsls	r2, r1, #10
 8003674:	4610      	mov	r0, r2
 8003676:	4619      	mov	r1, r3
 8003678:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800367a:	2200      	movs	r2, #0
 800367c:	62bb      	str	r3, [r7, #40]	; 0x28
 800367e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003680:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003684:	f7fc fdfc 	bl	8000280 <__aeabi_uldivmod>
 8003688:	4602      	mov	r2, r0
 800368a:	460b      	mov	r3, r1
 800368c:	4613      	mov	r3, r2
 800368e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003690:	e058      	b.n	8003744 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003692:	4b38      	ldr	r3, [pc, #224]	; (8003774 <HAL_RCC_GetSysClockFreq+0x200>)
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	099b      	lsrs	r3, r3, #6
 8003698:	2200      	movs	r2, #0
 800369a:	4618      	mov	r0, r3
 800369c:	4611      	mov	r1, r2
 800369e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80036a2:	623b      	str	r3, [r7, #32]
 80036a4:	2300      	movs	r3, #0
 80036a6:	627b      	str	r3, [r7, #36]	; 0x24
 80036a8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80036ac:	4642      	mov	r2, r8
 80036ae:	464b      	mov	r3, r9
 80036b0:	f04f 0000 	mov.w	r0, #0
 80036b4:	f04f 0100 	mov.w	r1, #0
 80036b8:	0159      	lsls	r1, r3, #5
 80036ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036be:	0150      	lsls	r0, r2, #5
 80036c0:	4602      	mov	r2, r0
 80036c2:	460b      	mov	r3, r1
 80036c4:	4641      	mov	r1, r8
 80036c6:	ebb2 0a01 	subs.w	sl, r2, r1
 80036ca:	4649      	mov	r1, r9
 80036cc:	eb63 0b01 	sbc.w	fp, r3, r1
 80036d0:	f04f 0200 	mov.w	r2, #0
 80036d4:	f04f 0300 	mov.w	r3, #0
 80036d8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80036dc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80036e0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80036e4:	ebb2 040a 	subs.w	r4, r2, sl
 80036e8:	eb63 050b 	sbc.w	r5, r3, fp
 80036ec:	f04f 0200 	mov.w	r2, #0
 80036f0:	f04f 0300 	mov.w	r3, #0
 80036f4:	00eb      	lsls	r3, r5, #3
 80036f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036fa:	00e2      	lsls	r2, r4, #3
 80036fc:	4614      	mov	r4, r2
 80036fe:	461d      	mov	r5, r3
 8003700:	4643      	mov	r3, r8
 8003702:	18e3      	adds	r3, r4, r3
 8003704:	603b      	str	r3, [r7, #0]
 8003706:	464b      	mov	r3, r9
 8003708:	eb45 0303 	adc.w	r3, r5, r3
 800370c:	607b      	str	r3, [r7, #4]
 800370e:	f04f 0200 	mov.w	r2, #0
 8003712:	f04f 0300 	mov.w	r3, #0
 8003716:	e9d7 4500 	ldrd	r4, r5, [r7]
 800371a:	4629      	mov	r1, r5
 800371c:	028b      	lsls	r3, r1, #10
 800371e:	4621      	mov	r1, r4
 8003720:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003724:	4621      	mov	r1, r4
 8003726:	028a      	lsls	r2, r1, #10
 8003728:	4610      	mov	r0, r2
 800372a:	4619      	mov	r1, r3
 800372c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800372e:	2200      	movs	r2, #0
 8003730:	61bb      	str	r3, [r7, #24]
 8003732:	61fa      	str	r2, [r7, #28]
 8003734:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003738:	f7fc fda2 	bl	8000280 <__aeabi_uldivmod>
 800373c:	4602      	mov	r2, r0
 800373e:	460b      	mov	r3, r1
 8003740:	4613      	mov	r3, r2
 8003742:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003744:	4b0b      	ldr	r3, [pc, #44]	; (8003774 <HAL_RCC_GetSysClockFreq+0x200>)
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	0c1b      	lsrs	r3, r3, #16
 800374a:	f003 0303 	and.w	r3, r3, #3
 800374e:	3301      	adds	r3, #1
 8003750:	005b      	lsls	r3, r3, #1
 8003752:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003754:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003756:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003758:	fbb2 f3f3 	udiv	r3, r2, r3
 800375c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800375e:	e002      	b.n	8003766 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003760:	4b05      	ldr	r3, [pc, #20]	; (8003778 <HAL_RCC_GetSysClockFreq+0x204>)
 8003762:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003764:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003766:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003768:	4618      	mov	r0, r3
 800376a:	3750      	adds	r7, #80	; 0x50
 800376c:	46bd      	mov	sp, r7
 800376e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003772:	bf00      	nop
 8003774:	40023800 	.word	0x40023800
 8003778:	00f42400 	.word	0x00f42400

0800377c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800377c:	b480      	push	{r7}
 800377e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003780:	4b03      	ldr	r3, [pc, #12]	; (8003790 <HAL_RCC_GetHCLKFreq+0x14>)
 8003782:	681b      	ldr	r3, [r3, #0]
}
 8003784:	4618      	mov	r0, r3
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	20000000 	.word	0x20000000

08003794 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003798:	f7ff fff0 	bl	800377c <HAL_RCC_GetHCLKFreq>
 800379c:	4602      	mov	r2, r0
 800379e:	4b05      	ldr	r3, [pc, #20]	; (80037b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	0a9b      	lsrs	r3, r3, #10
 80037a4:	f003 0307 	and.w	r3, r3, #7
 80037a8:	4903      	ldr	r1, [pc, #12]	; (80037b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037aa:	5ccb      	ldrb	r3, [r1, r3]
 80037ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	40023800 	.word	0x40023800
 80037b8:	08006cfc 	.word	0x08006cfc

080037bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80037c0:	f7ff ffdc 	bl	800377c <HAL_RCC_GetHCLKFreq>
 80037c4:	4602      	mov	r2, r0
 80037c6:	4b05      	ldr	r3, [pc, #20]	; (80037dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	0b5b      	lsrs	r3, r3, #13
 80037cc:	f003 0307 	and.w	r3, r3, #7
 80037d0:	4903      	ldr	r1, [pc, #12]	; (80037e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037d2:	5ccb      	ldrb	r3, [r1, r3]
 80037d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037d8:	4618      	mov	r0, r3
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	40023800 	.word	0x40023800
 80037e0:	08006cfc 	.word	0x08006cfc

080037e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d101      	bne.n	80037f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e07b      	b.n	80038ee <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d108      	bne.n	8003810 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003806:	d009      	beq.n	800381c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	61da      	str	r2, [r3, #28]
 800380e:	e005      	b.n	800381c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003828:	b2db      	uxtb	r3, r3
 800382a:	2b00      	cmp	r3, #0
 800382c:	d106      	bne.n	800383c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f7fe f842 	bl	80018c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2202      	movs	r2, #2
 8003840:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003852:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003864:	431a      	orrs	r2, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800386e:	431a      	orrs	r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	691b      	ldr	r3, [r3, #16]
 8003874:	f003 0302 	and.w	r3, r3, #2
 8003878:	431a      	orrs	r2, r3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	f003 0301 	and.w	r3, r3, #1
 8003882:	431a      	orrs	r2, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	699b      	ldr	r3, [r3, #24]
 8003888:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800388c:	431a      	orrs	r2, r3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	69db      	ldr	r3, [r3, #28]
 8003892:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003896:	431a      	orrs	r2, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a1b      	ldr	r3, [r3, #32]
 800389c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038a0:	ea42 0103 	orr.w	r1, r2, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	430a      	orrs	r2, r1
 80038b2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	699b      	ldr	r3, [r3, #24]
 80038b8:	0c1b      	lsrs	r3, r3, #16
 80038ba:	f003 0104 	and.w	r1, r3, #4
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c2:	f003 0210 	and.w	r2, r3, #16
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	430a      	orrs	r2, r1
 80038cc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	69da      	ldr	r2, [r3, #28]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038dc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3708      	adds	r7, #8
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}

080038f6 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80038f6:	b580      	push	{r7, lr}
 80038f8:	b084      	sub	sp, #16
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	60f8      	str	r0, [r7, #12]
 80038fe:	60b9      	str	r1, [r7, #8]
 8003900:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d101      	bne.n	800390c <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e038      	b.n	800397e <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8003912:	b2db      	uxtb	r3, r3
 8003914:	2b00      	cmp	r3, #0
 8003916:	d106      	bne.n	8003926 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2200      	movs	r2, #0
 800391c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8003920:	68f8      	ldr	r0, [r7, #12]
 8003922:	f7fe f949 	bl	8001bb8 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	3308      	adds	r3, #8
 800392e:	4619      	mov	r1, r3
 8003930:	4610      	mov	r0, r2
 8003932:	f001 fdc9 	bl	80054c8 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6818      	ldr	r0, [r3, #0]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	461a      	mov	r2, r3
 8003940:	68b9      	ldr	r1, [r7, #8]
 8003942:	f001 fe2b 	bl	800559c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6858      	ldr	r0, [r3, #4]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	689a      	ldr	r2, [r3, #8]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003952:	6879      	ldr	r1, [r7, #4]
 8003954:	f001 fe58 	bl	8005608 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68fa      	ldr	r2, [r7, #12]
 800395e:	6892      	ldr	r2, [r2, #8]
 8003960:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68fa      	ldr	r2, [r7, #12]
 800396a:	6892      	ldr	r2, [r2, #8]
 800396c:	f041 0101 	orr.w	r1, r1, #1
 8003970:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3710      	adds	r7, #16
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}

08003986 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003986:	b580      	push	{r7, lr}
 8003988:	b082      	sub	sp, #8
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d101      	bne.n	8003998 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e041      	b.n	8003a1c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d106      	bne.n	80039b2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f7fd ffcf 	bl	8001950 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2202      	movs	r2, #2
 80039b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	3304      	adds	r3, #4
 80039c2:	4619      	mov	r1, r3
 80039c4:	4610      	mov	r0, r2
 80039c6:	f000 fa27 	bl	8003e18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2201      	movs	r2, #1
 80039ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2201      	movs	r2, #1
 80039d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2201      	movs	r2, #1
 80039de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2201      	movs	r2, #1
 80039e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2201      	movs	r2, #1
 80039ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2201      	movs	r2, #1
 80039f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2201      	movs	r2, #1
 80039fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2201      	movs	r2, #1
 8003a06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2201      	movs	r2, #1
 8003a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a1a:	2300      	movs	r3, #0
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3708      	adds	r7, #8
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d109      	bne.n	8003a48 <HAL_TIM_PWM_Start+0x24>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	bf14      	ite	ne
 8003a40:	2301      	movne	r3, #1
 8003a42:	2300      	moveq	r3, #0
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	e022      	b.n	8003a8e <HAL_TIM_PWM_Start+0x6a>
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	2b04      	cmp	r3, #4
 8003a4c:	d109      	bne.n	8003a62 <HAL_TIM_PWM_Start+0x3e>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	bf14      	ite	ne
 8003a5a:	2301      	movne	r3, #1
 8003a5c:	2300      	moveq	r3, #0
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	e015      	b.n	8003a8e <HAL_TIM_PWM_Start+0x6a>
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	2b08      	cmp	r3, #8
 8003a66:	d109      	bne.n	8003a7c <HAL_TIM_PWM_Start+0x58>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	bf14      	ite	ne
 8003a74:	2301      	movne	r3, #1
 8003a76:	2300      	moveq	r3, #0
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	e008      	b.n	8003a8e <HAL_TIM_PWM_Start+0x6a>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	bf14      	ite	ne
 8003a88:	2301      	movne	r3, #1
 8003a8a:	2300      	moveq	r3, #0
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d001      	beq.n	8003a96 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e07c      	b.n	8003b90 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d104      	bne.n	8003aa6 <HAL_TIM_PWM_Start+0x82>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2202      	movs	r2, #2
 8003aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003aa4:	e013      	b.n	8003ace <HAL_TIM_PWM_Start+0xaa>
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	2b04      	cmp	r3, #4
 8003aaa:	d104      	bne.n	8003ab6 <HAL_TIM_PWM_Start+0x92>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2202      	movs	r2, #2
 8003ab0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ab4:	e00b      	b.n	8003ace <HAL_TIM_PWM_Start+0xaa>
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	2b08      	cmp	r3, #8
 8003aba:	d104      	bne.n	8003ac6 <HAL_TIM_PWM_Start+0xa2>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2202      	movs	r2, #2
 8003ac0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ac4:	e003      	b.n	8003ace <HAL_TIM_PWM_Start+0xaa>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2202      	movs	r2, #2
 8003aca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	6839      	ldr	r1, [r7, #0]
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f000 fbee 	bl	80042b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a2d      	ldr	r2, [pc, #180]	; (8003b98 <HAL_TIM_PWM_Start+0x174>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d004      	beq.n	8003af0 <HAL_TIM_PWM_Start+0xcc>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a2c      	ldr	r2, [pc, #176]	; (8003b9c <HAL_TIM_PWM_Start+0x178>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d101      	bne.n	8003af4 <HAL_TIM_PWM_Start+0xd0>
 8003af0:	2301      	movs	r3, #1
 8003af2:	e000      	b.n	8003af6 <HAL_TIM_PWM_Start+0xd2>
 8003af4:	2300      	movs	r3, #0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d007      	beq.n	8003b0a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b08:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a22      	ldr	r2, [pc, #136]	; (8003b98 <HAL_TIM_PWM_Start+0x174>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d022      	beq.n	8003b5a <HAL_TIM_PWM_Start+0x136>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b1c:	d01d      	beq.n	8003b5a <HAL_TIM_PWM_Start+0x136>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a1f      	ldr	r2, [pc, #124]	; (8003ba0 <HAL_TIM_PWM_Start+0x17c>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d018      	beq.n	8003b5a <HAL_TIM_PWM_Start+0x136>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a1d      	ldr	r2, [pc, #116]	; (8003ba4 <HAL_TIM_PWM_Start+0x180>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d013      	beq.n	8003b5a <HAL_TIM_PWM_Start+0x136>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a1c      	ldr	r2, [pc, #112]	; (8003ba8 <HAL_TIM_PWM_Start+0x184>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d00e      	beq.n	8003b5a <HAL_TIM_PWM_Start+0x136>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a16      	ldr	r2, [pc, #88]	; (8003b9c <HAL_TIM_PWM_Start+0x178>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d009      	beq.n	8003b5a <HAL_TIM_PWM_Start+0x136>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a18      	ldr	r2, [pc, #96]	; (8003bac <HAL_TIM_PWM_Start+0x188>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d004      	beq.n	8003b5a <HAL_TIM_PWM_Start+0x136>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a16      	ldr	r2, [pc, #88]	; (8003bb0 <HAL_TIM_PWM_Start+0x18c>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d111      	bne.n	8003b7e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f003 0307 	and.w	r3, r3, #7
 8003b64:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2b06      	cmp	r3, #6
 8003b6a:	d010      	beq.n	8003b8e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f042 0201 	orr.w	r2, r2, #1
 8003b7a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b7c:	e007      	b.n	8003b8e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f042 0201 	orr.w	r2, r2, #1
 8003b8c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b8e:	2300      	movs	r3, #0
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3710      	adds	r7, #16
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	40010000 	.word	0x40010000
 8003b9c:	40010400 	.word	0x40010400
 8003ba0:	40000400 	.word	0x40000400
 8003ba4:	40000800 	.word	0x40000800
 8003ba8:	40000c00 	.word	0x40000c00
 8003bac:	40014000 	.word	0x40014000
 8003bb0:	40001800 	.word	0x40001800

08003bb4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b082      	sub	sp, #8
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	6839      	ldr	r1, [r7, #0]
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f000 fb76 	bl	80042b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a2e      	ldr	r2, [pc, #184]	; (8003c8c <HAL_TIM_PWM_Stop+0xd8>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d004      	beq.n	8003be0 <HAL_TIM_PWM_Stop+0x2c>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a2d      	ldr	r2, [pc, #180]	; (8003c90 <HAL_TIM_PWM_Stop+0xdc>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d101      	bne.n	8003be4 <HAL_TIM_PWM_Stop+0x30>
 8003be0:	2301      	movs	r3, #1
 8003be2:	e000      	b.n	8003be6 <HAL_TIM_PWM_Stop+0x32>
 8003be4:	2300      	movs	r3, #0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d017      	beq.n	8003c1a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	6a1a      	ldr	r2, [r3, #32]
 8003bf0:	f241 1311 	movw	r3, #4369	; 0x1111
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d10f      	bne.n	8003c1a <HAL_TIM_PWM_Stop+0x66>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	6a1a      	ldr	r2, [r3, #32]
 8003c00:	f240 4344 	movw	r3, #1092	; 0x444
 8003c04:	4013      	ands	r3, r2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d107      	bne.n	8003c1a <HAL_TIM_PWM_Stop+0x66>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c18:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	6a1a      	ldr	r2, [r3, #32]
 8003c20:	f241 1311 	movw	r3, #4369	; 0x1111
 8003c24:	4013      	ands	r3, r2
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d10f      	bne.n	8003c4a <HAL_TIM_PWM_Stop+0x96>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	6a1a      	ldr	r2, [r3, #32]
 8003c30:	f240 4344 	movw	r3, #1092	; 0x444
 8003c34:	4013      	ands	r3, r2
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d107      	bne.n	8003c4a <HAL_TIM_PWM_Stop+0x96>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f022 0201 	bic.w	r2, r2, #1
 8003c48:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d104      	bne.n	8003c5a <HAL_TIM_PWM_Stop+0xa6>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c58:	e013      	b.n	8003c82 <HAL_TIM_PWM_Stop+0xce>
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	2b04      	cmp	r3, #4
 8003c5e:	d104      	bne.n	8003c6a <HAL_TIM_PWM_Stop+0xb6>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c68:	e00b      	b.n	8003c82 <HAL_TIM_PWM_Stop+0xce>
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	2b08      	cmp	r3, #8
 8003c6e:	d104      	bne.n	8003c7a <HAL_TIM_PWM_Stop+0xc6>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c78:	e003      	b.n	8003c82 <HAL_TIM_PWM_Stop+0xce>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3708      	adds	r7, #8
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	40010000 	.word	0x40010000
 8003c90:	40010400 	.word	0x40010400

08003c94 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b086      	sub	sp, #24
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	60b9      	str	r1, [r7, #8]
 8003c9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d101      	bne.n	8003cb2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003cae:	2302      	movs	r3, #2
 8003cb0:	e0ae      	b.n	8003e10 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2b0c      	cmp	r3, #12
 8003cbe:	f200 809f 	bhi.w	8003e00 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003cc2:	a201      	add	r2, pc, #4	; (adr r2, 8003cc8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc8:	08003cfd 	.word	0x08003cfd
 8003ccc:	08003e01 	.word	0x08003e01
 8003cd0:	08003e01 	.word	0x08003e01
 8003cd4:	08003e01 	.word	0x08003e01
 8003cd8:	08003d3d 	.word	0x08003d3d
 8003cdc:	08003e01 	.word	0x08003e01
 8003ce0:	08003e01 	.word	0x08003e01
 8003ce4:	08003e01 	.word	0x08003e01
 8003ce8:	08003d7f 	.word	0x08003d7f
 8003cec:	08003e01 	.word	0x08003e01
 8003cf0:	08003e01 	.word	0x08003e01
 8003cf4:	08003e01 	.word	0x08003e01
 8003cf8:	08003dbf 	.word	0x08003dbf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	68b9      	ldr	r1, [r7, #8]
 8003d02:	4618      	mov	r0, r3
 8003d04:	f000 f928 	bl	8003f58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	699a      	ldr	r2, [r3, #24]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f042 0208 	orr.w	r2, r2, #8
 8003d16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	699a      	ldr	r2, [r3, #24]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f022 0204 	bic.w	r2, r2, #4
 8003d26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	6999      	ldr	r1, [r3, #24]
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	691a      	ldr	r2, [r3, #16]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	430a      	orrs	r2, r1
 8003d38:	619a      	str	r2, [r3, #24]
      break;
 8003d3a:	e064      	b.n	8003e06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	68b9      	ldr	r1, [r7, #8]
 8003d42:	4618      	mov	r0, r3
 8003d44:	f000 f978 	bl	8004038 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	699a      	ldr	r2, [r3, #24]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	699a      	ldr	r2, [r3, #24]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	6999      	ldr	r1, [r3, #24]
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	021a      	lsls	r2, r3, #8
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	430a      	orrs	r2, r1
 8003d7a:	619a      	str	r2, [r3, #24]
      break;
 8003d7c:	e043      	b.n	8003e06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	68b9      	ldr	r1, [r7, #8]
 8003d84:	4618      	mov	r0, r3
 8003d86:	f000 f9cd 	bl	8004124 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	69da      	ldr	r2, [r3, #28]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f042 0208 	orr.w	r2, r2, #8
 8003d98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	69da      	ldr	r2, [r3, #28]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f022 0204 	bic.w	r2, r2, #4
 8003da8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	69d9      	ldr	r1, [r3, #28]
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	691a      	ldr	r2, [r3, #16]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	430a      	orrs	r2, r1
 8003dba:	61da      	str	r2, [r3, #28]
      break;
 8003dbc:	e023      	b.n	8003e06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	68b9      	ldr	r1, [r7, #8]
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f000 fa21 	bl	800420c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	69da      	ldr	r2, [r3, #28]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	69da      	ldr	r2, [r3, #28]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003de8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	69d9      	ldr	r1, [r3, #28]
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	691b      	ldr	r3, [r3, #16]
 8003df4:	021a      	lsls	r2, r3, #8
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	430a      	orrs	r2, r1
 8003dfc:	61da      	str	r2, [r3, #28]
      break;
 8003dfe:	e002      	b.n	8003e06 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	75fb      	strb	r3, [r7, #23]
      break;
 8003e04:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3718      	adds	r7, #24
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b085      	sub	sp, #20
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	4a40      	ldr	r2, [pc, #256]	; (8003f2c <TIM_Base_SetConfig+0x114>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d013      	beq.n	8003e58 <TIM_Base_SetConfig+0x40>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e36:	d00f      	beq.n	8003e58 <TIM_Base_SetConfig+0x40>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4a3d      	ldr	r2, [pc, #244]	; (8003f30 <TIM_Base_SetConfig+0x118>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d00b      	beq.n	8003e58 <TIM_Base_SetConfig+0x40>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4a3c      	ldr	r2, [pc, #240]	; (8003f34 <TIM_Base_SetConfig+0x11c>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d007      	beq.n	8003e58 <TIM_Base_SetConfig+0x40>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4a3b      	ldr	r2, [pc, #236]	; (8003f38 <TIM_Base_SetConfig+0x120>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d003      	beq.n	8003e58 <TIM_Base_SetConfig+0x40>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a3a      	ldr	r2, [pc, #232]	; (8003f3c <TIM_Base_SetConfig+0x124>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d108      	bne.n	8003e6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	68fa      	ldr	r2, [r7, #12]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a2f      	ldr	r2, [pc, #188]	; (8003f2c <TIM_Base_SetConfig+0x114>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d02b      	beq.n	8003eca <TIM_Base_SetConfig+0xb2>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e78:	d027      	beq.n	8003eca <TIM_Base_SetConfig+0xb2>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a2c      	ldr	r2, [pc, #176]	; (8003f30 <TIM_Base_SetConfig+0x118>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d023      	beq.n	8003eca <TIM_Base_SetConfig+0xb2>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a2b      	ldr	r2, [pc, #172]	; (8003f34 <TIM_Base_SetConfig+0x11c>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d01f      	beq.n	8003eca <TIM_Base_SetConfig+0xb2>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a2a      	ldr	r2, [pc, #168]	; (8003f38 <TIM_Base_SetConfig+0x120>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d01b      	beq.n	8003eca <TIM_Base_SetConfig+0xb2>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a29      	ldr	r2, [pc, #164]	; (8003f3c <TIM_Base_SetConfig+0x124>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d017      	beq.n	8003eca <TIM_Base_SetConfig+0xb2>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a28      	ldr	r2, [pc, #160]	; (8003f40 <TIM_Base_SetConfig+0x128>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d013      	beq.n	8003eca <TIM_Base_SetConfig+0xb2>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a27      	ldr	r2, [pc, #156]	; (8003f44 <TIM_Base_SetConfig+0x12c>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d00f      	beq.n	8003eca <TIM_Base_SetConfig+0xb2>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a26      	ldr	r2, [pc, #152]	; (8003f48 <TIM_Base_SetConfig+0x130>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d00b      	beq.n	8003eca <TIM_Base_SetConfig+0xb2>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a25      	ldr	r2, [pc, #148]	; (8003f4c <TIM_Base_SetConfig+0x134>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d007      	beq.n	8003eca <TIM_Base_SetConfig+0xb2>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a24      	ldr	r2, [pc, #144]	; (8003f50 <TIM_Base_SetConfig+0x138>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d003      	beq.n	8003eca <TIM_Base_SetConfig+0xb2>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a23      	ldr	r2, [pc, #140]	; (8003f54 <TIM_Base_SetConfig+0x13c>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d108      	bne.n	8003edc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ed0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	695b      	ldr	r3, [r3, #20]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	68fa      	ldr	r2, [r7, #12]
 8003eee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	689a      	ldr	r2, [r3, #8]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a0a      	ldr	r2, [pc, #40]	; (8003f2c <TIM_Base_SetConfig+0x114>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d003      	beq.n	8003f10 <TIM_Base_SetConfig+0xf8>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	4a0c      	ldr	r2, [pc, #48]	; (8003f3c <TIM_Base_SetConfig+0x124>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d103      	bne.n	8003f18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	691a      	ldr	r2, [r3, #16]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	615a      	str	r2, [r3, #20]
}
 8003f1e:	bf00      	nop
 8003f20:	3714      	adds	r7, #20
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	40010000 	.word	0x40010000
 8003f30:	40000400 	.word	0x40000400
 8003f34:	40000800 	.word	0x40000800
 8003f38:	40000c00 	.word	0x40000c00
 8003f3c:	40010400 	.word	0x40010400
 8003f40:	40014000 	.word	0x40014000
 8003f44:	40014400 	.word	0x40014400
 8003f48:	40014800 	.word	0x40014800
 8003f4c:	40001800 	.word	0x40001800
 8003f50:	40001c00 	.word	0x40001c00
 8003f54:	40002000 	.word	0x40002000

08003f58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b087      	sub	sp, #28
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a1b      	ldr	r3, [r3, #32]
 8003f66:	f023 0201 	bic.w	r2, r3, #1
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a1b      	ldr	r3, [r3, #32]
 8003f72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f023 0303 	bic.w	r3, r3, #3
 8003f8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68fa      	ldr	r2, [r7, #12]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	f023 0302 	bic.w	r3, r3, #2
 8003fa0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	697a      	ldr	r2, [r7, #20]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4a20      	ldr	r2, [pc, #128]	; (8004030 <TIM_OC1_SetConfig+0xd8>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d003      	beq.n	8003fbc <TIM_OC1_SetConfig+0x64>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4a1f      	ldr	r2, [pc, #124]	; (8004034 <TIM_OC1_SetConfig+0xdc>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d10c      	bne.n	8003fd6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	f023 0308 	bic.w	r3, r3, #8
 8003fc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	697a      	ldr	r2, [r7, #20]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	f023 0304 	bic.w	r3, r3, #4
 8003fd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a15      	ldr	r2, [pc, #84]	; (8004030 <TIM_OC1_SetConfig+0xd8>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d003      	beq.n	8003fe6 <TIM_OC1_SetConfig+0x8e>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a14      	ldr	r2, [pc, #80]	; (8004034 <TIM_OC1_SetConfig+0xdc>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d111      	bne.n	800400a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ff4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	695b      	ldr	r3, [r3, #20]
 8003ffa:	693a      	ldr	r2, [r7, #16]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	699b      	ldr	r3, [r3, #24]
 8004004:	693a      	ldr	r2, [r7, #16]
 8004006:	4313      	orrs	r3, r2
 8004008:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	693a      	ldr	r2, [r7, #16]
 800400e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	68fa      	ldr	r2, [r7, #12]
 8004014:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	685a      	ldr	r2, [r3, #4]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	697a      	ldr	r2, [r7, #20]
 8004022:	621a      	str	r2, [r3, #32]
}
 8004024:	bf00      	nop
 8004026:	371c      	adds	r7, #28
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr
 8004030:	40010000 	.word	0x40010000
 8004034:	40010400 	.word	0x40010400

08004038 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004038:	b480      	push	{r7}
 800403a:	b087      	sub	sp, #28
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a1b      	ldr	r3, [r3, #32]
 8004046:	f023 0210 	bic.w	r2, r3, #16
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a1b      	ldr	r3, [r3, #32]
 8004052:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004066:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800406e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	021b      	lsls	r3, r3, #8
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	4313      	orrs	r3, r2
 800407a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	f023 0320 	bic.w	r3, r3, #32
 8004082:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	011b      	lsls	r3, r3, #4
 800408a:	697a      	ldr	r2, [r7, #20]
 800408c:	4313      	orrs	r3, r2
 800408e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a22      	ldr	r2, [pc, #136]	; (800411c <TIM_OC2_SetConfig+0xe4>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d003      	beq.n	80040a0 <TIM_OC2_SetConfig+0x68>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	4a21      	ldr	r2, [pc, #132]	; (8004120 <TIM_OC2_SetConfig+0xe8>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d10d      	bne.n	80040bc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	011b      	lsls	r3, r3, #4
 80040ae:	697a      	ldr	r2, [r7, #20]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4a17      	ldr	r2, [pc, #92]	; (800411c <TIM_OC2_SetConfig+0xe4>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d003      	beq.n	80040cc <TIM_OC2_SetConfig+0x94>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	4a16      	ldr	r2, [pc, #88]	; (8004120 <TIM_OC2_SetConfig+0xe8>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d113      	bne.n	80040f4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80040da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	695b      	ldr	r3, [r3, #20]
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	693a      	ldr	r2, [r7, #16]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	699b      	ldr	r3, [r3, #24]
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	693a      	ldr	r2, [r7, #16]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	693a      	ldr	r2, [r7, #16]
 80040f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	68fa      	ldr	r2, [r7, #12]
 80040fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	685a      	ldr	r2, [r3, #4]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	697a      	ldr	r2, [r7, #20]
 800410c:	621a      	str	r2, [r3, #32]
}
 800410e:	bf00      	nop
 8004110:	371c      	adds	r7, #28
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr
 800411a:	bf00      	nop
 800411c:	40010000 	.word	0x40010000
 8004120:	40010400 	.word	0x40010400

08004124 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004124:	b480      	push	{r7}
 8004126:	b087      	sub	sp, #28
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a1b      	ldr	r3, [r3, #32]
 8004132:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a1b      	ldr	r3, [r3, #32]
 800413e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	69db      	ldr	r3, [r3, #28]
 800414a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004152:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f023 0303 	bic.w	r3, r3, #3
 800415a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	68fa      	ldr	r2, [r7, #12]
 8004162:	4313      	orrs	r3, r2
 8004164:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800416c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	021b      	lsls	r3, r3, #8
 8004174:	697a      	ldr	r2, [r7, #20]
 8004176:	4313      	orrs	r3, r2
 8004178:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a21      	ldr	r2, [pc, #132]	; (8004204 <TIM_OC3_SetConfig+0xe0>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d003      	beq.n	800418a <TIM_OC3_SetConfig+0x66>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a20      	ldr	r2, [pc, #128]	; (8004208 <TIM_OC3_SetConfig+0xe4>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d10d      	bne.n	80041a6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004190:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	021b      	lsls	r3, r3, #8
 8004198:	697a      	ldr	r2, [r7, #20]
 800419a:	4313      	orrs	r3, r2
 800419c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a16      	ldr	r2, [pc, #88]	; (8004204 <TIM_OC3_SetConfig+0xe0>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d003      	beq.n	80041b6 <TIM_OC3_SetConfig+0x92>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a15      	ldr	r2, [pc, #84]	; (8004208 <TIM_OC3_SetConfig+0xe4>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d113      	bne.n	80041de <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80041c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	695b      	ldr	r3, [r3, #20]
 80041ca:	011b      	lsls	r3, r3, #4
 80041cc:	693a      	ldr	r2, [r7, #16]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	699b      	ldr	r3, [r3, #24]
 80041d6:	011b      	lsls	r3, r3, #4
 80041d8:	693a      	ldr	r2, [r7, #16]
 80041da:	4313      	orrs	r3, r2
 80041dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	693a      	ldr	r2, [r7, #16]
 80041e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	68fa      	ldr	r2, [r7, #12]
 80041e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	685a      	ldr	r2, [r3, #4]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	697a      	ldr	r2, [r7, #20]
 80041f6:	621a      	str	r2, [r3, #32]
}
 80041f8:	bf00      	nop
 80041fa:	371c      	adds	r7, #28
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr
 8004204:	40010000 	.word	0x40010000
 8004208:	40010400 	.word	0x40010400

0800420c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800420c:	b480      	push	{r7}
 800420e:	b087      	sub	sp, #28
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a1b      	ldr	r3, [r3, #32]
 800421a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a1b      	ldr	r3, [r3, #32]
 8004226:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	69db      	ldr	r3, [r3, #28]
 8004232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800423a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004242:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	021b      	lsls	r3, r3, #8
 800424a:	68fa      	ldr	r2, [r7, #12]
 800424c:	4313      	orrs	r3, r2
 800424e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004256:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	031b      	lsls	r3, r3, #12
 800425e:	693a      	ldr	r2, [r7, #16]
 8004260:	4313      	orrs	r3, r2
 8004262:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	4a12      	ldr	r2, [pc, #72]	; (80042b0 <TIM_OC4_SetConfig+0xa4>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d003      	beq.n	8004274 <TIM_OC4_SetConfig+0x68>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4a11      	ldr	r2, [pc, #68]	; (80042b4 <TIM_OC4_SetConfig+0xa8>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d109      	bne.n	8004288 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800427a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	695b      	ldr	r3, [r3, #20]
 8004280:	019b      	lsls	r3, r3, #6
 8004282:	697a      	ldr	r2, [r7, #20]
 8004284:	4313      	orrs	r3, r2
 8004286:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	697a      	ldr	r2, [r7, #20]
 800428c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	68fa      	ldr	r2, [r7, #12]
 8004292:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	685a      	ldr	r2, [r3, #4]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	693a      	ldr	r2, [r7, #16]
 80042a0:	621a      	str	r2, [r3, #32]
}
 80042a2:	bf00      	nop
 80042a4:	371c      	adds	r7, #28
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	40010000 	.word	0x40010000
 80042b4:	40010400 	.word	0x40010400

080042b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b087      	sub	sp, #28
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	f003 031f 	and.w	r3, r3, #31
 80042ca:	2201      	movs	r2, #1
 80042cc:	fa02 f303 	lsl.w	r3, r2, r3
 80042d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6a1a      	ldr	r2, [r3, #32]
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	43db      	mvns	r3, r3
 80042da:	401a      	ands	r2, r3
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6a1a      	ldr	r2, [r3, #32]
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	f003 031f 	and.w	r3, r3, #31
 80042ea:	6879      	ldr	r1, [r7, #4]
 80042ec:	fa01 f303 	lsl.w	r3, r1, r3
 80042f0:	431a      	orrs	r2, r3
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	621a      	str	r2, [r3, #32]
}
 80042f6:	bf00      	nop
 80042f8:	371c      	adds	r7, #28
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr
	...

08004304 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004304:	b480      	push	{r7}
 8004306:	b085      	sub	sp, #20
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004314:	2b01      	cmp	r3, #1
 8004316:	d101      	bne.n	800431c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004318:	2302      	movs	r3, #2
 800431a:	e05a      	b.n	80043d2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2202      	movs	r2, #2
 8004328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004342:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	68fa      	ldr	r2, [r7, #12]
 800434a:	4313      	orrs	r3, r2
 800434c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68fa      	ldr	r2, [r7, #12]
 8004354:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a21      	ldr	r2, [pc, #132]	; (80043e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d022      	beq.n	80043a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004368:	d01d      	beq.n	80043a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a1d      	ldr	r2, [pc, #116]	; (80043e4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d018      	beq.n	80043a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a1b      	ldr	r2, [pc, #108]	; (80043e8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d013      	beq.n	80043a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a1a      	ldr	r2, [pc, #104]	; (80043ec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d00e      	beq.n	80043a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a18      	ldr	r2, [pc, #96]	; (80043f0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d009      	beq.n	80043a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a17      	ldr	r2, [pc, #92]	; (80043f4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d004      	beq.n	80043a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a15      	ldr	r2, [pc, #84]	; (80043f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d10c      	bne.n	80043c0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	68ba      	ldr	r2, [r7, #8]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68ba      	ldr	r2, [r7, #8]
 80043be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3714      	adds	r7, #20
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr
 80043de:	bf00      	nop
 80043e0:	40010000 	.word	0x40010000
 80043e4:	40000400 	.word	0x40000400
 80043e8:	40000800 	.word	0x40000800
 80043ec:	40000c00 	.word	0x40000c00
 80043f0:	40010400 	.word	0x40010400
 80043f4:	40014000 	.word	0x40014000
 80043f8:	40001800 	.word	0x40001800

080043fc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b085      	sub	sp, #20
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004406:	2300      	movs	r3, #0
 8004408:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004410:	2b01      	cmp	r3, #1
 8004412:	d101      	bne.n	8004418 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004414:	2302      	movs	r3, #2
 8004416:	e03d      	b.n	8004494 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	4313      	orrs	r3, r2
 800442c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	4313      	orrs	r3, r2
 800443a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	4313      	orrs	r3, r2
 8004448:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4313      	orrs	r3, r2
 8004456:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	691b      	ldr	r3, [r3, #16]
 8004462:	4313      	orrs	r3, r2
 8004464:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	695b      	ldr	r3, [r3, #20]
 8004470:	4313      	orrs	r3, r2
 8004472:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	69db      	ldr	r3, [r3, #28]
 800447e:	4313      	orrs	r3, r2
 8004480:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	68fa      	ldr	r2, [r7, #12]
 8004488:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004492:	2300      	movs	r3, #0
}
 8004494:	4618      	mov	r0, r3
 8004496:	3714      	adds	r7, #20
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d101      	bne.n	80044b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e03f      	b.n	8004532 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d106      	bne.n	80044cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f7fd fa9e 	bl	8001a08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2224      	movs	r2, #36	; 0x24
 80044d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	68da      	ldr	r2, [r3, #12]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f000 fd7b 	bl	8004fe0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	691a      	ldr	r2, [r3, #16]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	695a      	ldr	r2, [r3, #20]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004508:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	68da      	ldr	r2, [r3, #12]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004518:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2220      	movs	r2, #32
 8004524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2220      	movs	r2, #32
 800452c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004530:	2300      	movs	r3, #0
}
 8004532:	4618      	mov	r0, r3
 8004534:	3708      	adds	r7, #8
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}

0800453a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800453a:	b580      	push	{r7, lr}
 800453c:	b08a      	sub	sp, #40	; 0x28
 800453e:	af02      	add	r7, sp, #8
 8004540:	60f8      	str	r0, [r7, #12]
 8004542:	60b9      	str	r1, [r7, #8]
 8004544:	603b      	str	r3, [r7, #0]
 8004546:	4613      	mov	r3, r2
 8004548:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800454a:	2300      	movs	r3, #0
 800454c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004554:	b2db      	uxtb	r3, r3
 8004556:	2b20      	cmp	r3, #32
 8004558:	d17c      	bne.n	8004654 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d002      	beq.n	8004566 <HAL_UART_Transmit+0x2c>
 8004560:	88fb      	ldrh	r3, [r7, #6]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d101      	bne.n	800456a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e075      	b.n	8004656 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004570:	2b01      	cmp	r3, #1
 8004572:	d101      	bne.n	8004578 <HAL_UART_Transmit+0x3e>
 8004574:	2302      	movs	r3, #2
 8004576:	e06e      	b.n	8004656 <HAL_UART_Transmit+0x11c>
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2200      	movs	r2, #0
 8004584:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2221      	movs	r2, #33	; 0x21
 800458a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800458e:	f7fd ffa1 	bl	80024d4 <HAL_GetTick>
 8004592:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	88fa      	ldrh	r2, [r7, #6]
 8004598:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	88fa      	ldrh	r2, [r7, #6]
 800459e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045a8:	d108      	bne.n	80045bc <HAL_UART_Transmit+0x82>
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d104      	bne.n	80045bc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80045b2:	2300      	movs	r3, #0
 80045b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	61bb      	str	r3, [r7, #24]
 80045ba:	e003      	b.n	80045c4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045c0:	2300      	movs	r3, #0
 80045c2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80045cc:	e02a      	b.n	8004624 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	9300      	str	r3, [sp, #0]
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	2200      	movs	r2, #0
 80045d6:	2180      	movs	r1, #128	; 0x80
 80045d8:	68f8      	ldr	r0, [r7, #12]
 80045da:	f000 faf9 	bl	8004bd0 <UART_WaitOnFlagUntilTimeout>
 80045de:	4603      	mov	r3, r0
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d001      	beq.n	80045e8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	e036      	b.n	8004656 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d10b      	bne.n	8004606 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045ee:	69bb      	ldr	r3, [r7, #24]
 80045f0:	881b      	ldrh	r3, [r3, #0]
 80045f2:	461a      	mov	r2, r3
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80045fe:	69bb      	ldr	r3, [r7, #24]
 8004600:	3302      	adds	r3, #2
 8004602:	61bb      	str	r3, [r7, #24]
 8004604:	e007      	b.n	8004616 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	781a      	ldrb	r2, [r3, #0]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	3301      	adds	r3, #1
 8004614:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800461a:	b29b      	uxth	r3, r3
 800461c:	3b01      	subs	r3, #1
 800461e:	b29a      	uxth	r2, r3
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004628:	b29b      	uxth	r3, r3
 800462a:	2b00      	cmp	r3, #0
 800462c:	d1cf      	bne.n	80045ce <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	9300      	str	r3, [sp, #0]
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	2200      	movs	r2, #0
 8004636:	2140      	movs	r1, #64	; 0x40
 8004638:	68f8      	ldr	r0, [r7, #12]
 800463a:	f000 fac9 	bl	8004bd0 <UART_WaitOnFlagUntilTimeout>
 800463e:	4603      	mov	r3, r0
 8004640:	2b00      	cmp	r3, #0
 8004642:	d001      	beq.n	8004648 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	e006      	b.n	8004656 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2220      	movs	r2, #32
 800464c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004650:	2300      	movs	r3, #0
 8004652:	e000      	b.n	8004656 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004654:	2302      	movs	r3, #2
  }
}
 8004656:	4618      	mov	r0, r3
 8004658:	3720      	adds	r7, #32
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
	...

08004660 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b0ba      	sub	sp, #232	; 0xe8
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	695b      	ldr	r3, [r3, #20]
 8004682:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004686:	2300      	movs	r3, #0
 8004688:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800468c:	2300      	movs	r3, #0
 800468e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004696:	f003 030f 	and.w	r3, r3, #15
 800469a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800469e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d10f      	bne.n	80046c6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80046a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046aa:	f003 0320 	and.w	r3, r3, #32
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d009      	beq.n	80046c6 <HAL_UART_IRQHandler+0x66>
 80046b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046b6:	f003 0320 	and.w	r3, r3, #32
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d003      	beq.n	80046c6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 fbd3 	bl	8004e6a <UART_Receive_IT>
      return;
 80046c4:	e256      	b.n	8004b74 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80046c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	f000 80de 	beq.w	800488c <HAL_UART_IRQHandler+0x22c>
 80046d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046d4:	f003 0301 	and.w	r3, r3, #1
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d106      	bne.n	80046ea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80046dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046e0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	f000 80d1 	beq.w	800488c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80046ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046ee:	f003 0301 	and.w	r3, r3, #1
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d00b      	beq.n	800470e <HAL_UART_IRQHandler+0xae>
 80046f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d005      	beq.n	800470e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004706:	f043 0201 	orr.w	r2, r3, #1
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800470e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004712:	f003 0304 	and.w	r3, r3, #4
 8004716:	2b00      	cmp	r3, #0
 8004718:	d00b      	beq.n	8004732 <HAL_UART_IRQHandler+0xd2>
 800471a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800471e:	f003 0301 	and.w	r3, r3, #1
 8004722:	2b00      	cmp	r3, #0
 8004724:	d005      	beq.n	8004732 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472a:	f043 0202 	orr.w	r2, r3, #2
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004732:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004736:	f003 0302 	and.w	r3, r3, #2
 800473a:	2b00      	cmp	r3, #0
 800473c:	d00b      	beq.n	8004756 <HAL_UART_IRQHandler+0xf6>
 800473e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004742:	f003 0301 	and.w	r3, r3, #1
 8004746:	2b00      	cmp	r3, #0
 8004748:	d005      	beq.n	8004756 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474e:	f043 0204 	orr.w	r2, r3, #4
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800475a:	f003 0308 	and.w	r3, r3, #8
 800475e:	2b00      	cmp	r3, #0
 8004760:	d011      	beq.n	8004786 <HAL_UART_IRQHandler+0x126>
 8004762:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004766:	f003 0320 	and.w	r3, r3, #32
 800476a:	2b00      	cmp	r3, #0
 800476c:	d105      	bne.n	800477a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800476e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004772:	f003 0301 	and.w	r3, r3, #1
 8004776:	2b00      	cmp	r3, #0
 8004778:	d005      	beq.n	8004786 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477e:	f043 0208 	orr.w	r2, r3, #8
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478a:	2b00      	cmp	r3, #0
 800478c:	f000 81ed 	beq.w	8004b6a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004790:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004794:	f003 0320 	and.w	r3, r3, #32
 8004798:	2b00      	cmp	r3, #0
 800479a:	d008      	beq.n	80047ae <HAL_UART_IRQHandler+0x14e>
 800479c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047a0:	f003 0320 	and.w	r3, r3, #32
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d002      	beq.n	80047ae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f000 fb5e 	bl	8004e6a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	695b      	ldr	r3, [r3, #20]
 80047b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047b8:	2b40      	cmp	r3, #64	; 0x40
 80047ba:	bf0c      	ite	eq
 80047bc:	2301      	moveq	r3, #1
 80047be:	2300      	movne	r3, #0
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ca:	f003 0308 	and.w	r3, r3, #8
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d103      	bne.n	80047da <HAL_UART_IRQHandler+0x17a>
 80047d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d04f      	beq.n	800487a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f000 fa66 	bl	8004cac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	695b      	ldr	r3, [r3, #20]
 80047e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ea:	2b40      	cmp	r3, #64	; 0x40
 80047ec:	d141      	bne.n	8004872 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	3314      	adds	r3, #20
 80047f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80047fc:	e853 3f00 	ldrex	r3, [r3]
 8004800:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004804:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004808:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800480c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	3314      	adds	r3, #20
 8004816:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800481a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800481e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004822:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004826:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800482a:	e841 2300 	strex	r3, r2, [r1]
 800482e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004832:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d1d9      	bne.n	80047ee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800483e:	2b00      	cmp	r3, #0
 8004840:	d013      	beq.n	800486a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004846:	4a7d      	ldr	r2, [pc, #500]	; (8004a3c <HAL_UART_IRQHandler+0x3dc>)
 8004848:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800484e:	4618      	mov	r0, r3
 8004850:	f7fd fff1 	bl	8002836 <HAL_DMA_Abort_IT>
 8004854:	4603      	mov	r3, r0
 8004856:	2b00      	cmp	r3, #0
 8004858:	d016      	beq.n	8004888 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800485e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004864:	4610      	mov	r0, r2
 8004866:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004868:	e00e      	b.n	8004888 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f000 f99a 	bl	8004ba4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004870:	e00a      	b.n	8004888 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 f996 	bl	8004ba4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004878:	e006      	b.n	8004888 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 f992 	bl	8004ba4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004886:	e170      	b.n	8004b6a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004888:	bf00      	nop
    return;
 800488a:	e16e      	b.n	8004b6a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004890:	2b01      	cmp	r3, #1
 8004892:	f040 814a 	bne.w	8004b2a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004896:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800489a:	f003 0310 	and.w	r3, r3, #16
 800489e:	2b00      	cmp	r3, #0
 80048a0:	f000 8143 	beq.w	8004b2a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80048a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048a8:	f003 0310 	and.w	r3, r3, #16
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	f000 813c 	beq.w	8004b2a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80048b2:	2300      	movs	r3, #0
 80048b4:	60bb      	str	r3, [r7, #8]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	60bb      	str	r3, [r7, #8]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	60bb      	str	r3, [r7, #8]
 80048c6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	695b      	ldr	r3, [r3, #20]
 80048ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048d2:	2b40      	cmp	r3, #64	; 0x40
 80048d4:	f040 80b4 	bne.w	8004a40 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80048e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	f000 8140 	beq.w	8004b6e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80048f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80048f6:	429a      	cmp	r2, r3
 80048f8:	f080 8139 	bcs.w	8004b6e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004902:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004908:	69db      	ldr	r3, [r3, #28]
 800490a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800490e:	f000 8088 	beq.w	8004a22 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	330c      	adds	r3, #12
 8004918:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800491c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004920:	e853 3f00 	ldrex	r3, [r3]
 8004924:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004928:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800492c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004930:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	330c      	adds	r3, #12
 800493a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800493e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004942:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004946:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800494a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800494e:	e841 2300 	strex	r3, r2, [r1]
 8004952:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004956:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800495a:	2b00      	cmp	r3, #0
 800495c:	d1d9      	bne.n	8004912 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	3314      	adds	r3, #20
 8004964:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004966:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004968:	e853 3f00 	ldrex	r3, [r3]
 800496c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800496e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004970:	f023 0301 	bic.w	r3, r3, #1
 8004974:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	3314      	adds	r3, #20
 800497e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004982:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004986:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004988:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800498a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800498e:	e841 2300 	strex	r3, r2, [r1]
 8004992:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004994:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004996:	2b00      	cmp	r3, #0
 8004998:	d1e1      	bne.n	800495e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	3314      	adds	r3, #20
 80049a0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80049a4:	e853 3f00 	ldrex	r3, [r3]
 80049a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80049aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	3314      	adds	r3, #20
 80049ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80049be:	66fa      	str	r2, [r7, #108]	; 0x6c
 80049c0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80049c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80049c6:	e841 2300 	strex	r3, r2, [r1]
 80049ca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80049cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d1e3      	bne.n	800499a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2220      	movs	r2, #32
 80049d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2200      	movs	r2, #0
 80049de:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	330c      	adds	r3, #12
 80049e6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049ea:	e853 3f00 	ldrex	r3, [r3]
 80049ee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80049f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049f2:	f023 0310 	bic.w	r3, r3, #16
 80049f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	330c      	adds	r3, #12
 8004a00:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004a04:	65ba      	str	r2, [r7, #88]	; 0x58
 8004a06:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a08:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004a0a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004a0c:	e841 2300 	strex	r3, r2, [r1]
 8004a10:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004a12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d1e3      	bne.n	80049e0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f7fd fe9a 	bl	8002756 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	4619      	mov	r1, r3
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 f8c0 	bl	8004bb8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a38:	e099      	b.n	8004b6e <HAL_UART_IRQHandler+0x50e>
 8004a3a:	bf00      	nop
 8004a3c:	08004d73 	.word	0x08004d73
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	1ad3      	subs	r3, r2, r3
 8004a4c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	f000 808b 	beq.w	8004b72 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004a5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	f000 8086 	beq.w	8004b72 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	330c      	adds	r3, #12
 8004a6c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a70:	e853 3f00 	ldrex	r3, [r3]
 8004a74:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a78:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a7c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	330c      	adds	r3, #12
 8004a86:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004a8a:	647a      	str	r2, [r7, #68]	; 0x44
 8004a8c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a8e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004a90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a92:	e841 2300 	strex	r3, r2, [r1]
 8004a96:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004a98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d1e3      	bne.n	8004a66 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	3314      	adds	r3, #20
 8004aa4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa8:	e853 3f00 	ldrex	r3, [r3]
 8004aac:	623b      	str	r3, [r7, #32]
   return(result);
 8004aae:	6a3b      	ldr	r3, [r7, #32]
 8004ab0:	f023 0301 	bic.w	r3, r3, #1
 8004ab4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	3314      	adds	r3, #20
 8004abe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004ac2:	633a      	str	r2, [r7, #48]	; 0x30
 8004ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ac8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004aca:	e841 2300 	strex	r3, r2, [r1]
 8004ace:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d1e3      	bne.n	8004a9e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2220      	movs	r2, #32
 8004ada:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	330c      	adds	r3, #12
 8004aea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	e853 3f00 	ldrex	r3, [r3]
 8004af2:	60fb      	str	r3, [r7, #12]
   return(result);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f023 0310 	bic.w	r3, r3, #16
 8004afa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	330c      	adds	r3, #12
 8004b04:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004b08:	61fa      	str	r2, [r7, #28]
 8004b0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b0c:	69b9      	ldr	r1, [r7, #24]
 8004b0e:	69fa      	ldr	r2, [r7, #28]
 8004b10:	e841 2300 	strex	r3, r2, [r1]
 8004b14:	617b      	str	r3, [r7, #20]
   return(result);
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d1e3      	bne.n	8004ae4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004b20:	4619      	mov	r1, r3
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 f848 	bl	8004bb8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b28:	e023      	b.n	8004b72 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004b2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d009      	beq.n	8004b4a <HAL_UART_IRQHandler+0x4ea>
 8004b36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d003      	beq.n	8004b4a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f000 f929 	bl	8004d9a <UART_Transmit_IT>
    return;
 8004b48:	e014      	b.n	8004b74 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004b4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d00e      	beq.n	8004b74 <HAL_UART_IRQHandler+0x514>
 8004b56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d008      	beq.n	8004b74 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 f969 	bl	8004e3a <UART_EndTransmit_IT>
    return;
 8004b68:	e004      	b.n	8004b74 <HAL_UART_IRQHandler+0x514>
    return;
 8004b6a:	bf00      	nop
 8004b6c:	e002      	b.n	8004b74 <HAL_UART_IRQHandler+0x514>
      return;
 8004b6e:	bf00      	nop
 8004b70:	e000      	b.n	8004b74 <HAL_UART_IRQHandler+0x514>
      return;
 8004b72:	bf00      	nop
  }
}
 8004b74:	37e8      	adds	r7, #232	; 0xe8
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	bf00      	nop

08004b7c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004b84:	bf00      	nop
 8004b86:	370c      	adds	r7, #12
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr

08004b90 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004b98:	bf00      	nop
 8004b9a:	370c      	adds	r7, #12
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr

08004ba4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b083      	sub	sp, #12
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004bac:	bf00      	nop
 8004bae:	370c      	adds	r7, #12
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr

08004bb8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	460b      	mov	r3, r1
 8004bc2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004bc4:	bf00      	nop
 8004bc6:	370c      	adds	r7, #12
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b090      	sub	sp, #64	; 0x40
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	603b      	str	r3, [r7, #0]
 8004bdc:	4613      	mov	r3, r2
 8004bde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004be0:	e050      	b.n	8004c84 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004be2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004be8:	d04c      	beq.n	8004c84 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004bea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d007      	beq.n	8004c00 <UART_WaitOnFlagUntilTimeout+0x30>
 8004bf0:	f7fd fc70 	bl	80024d4 <HAL_GetTick>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d241      	bcs.n	8004c84 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	330c      	adds	r3, #12
 8004c06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c0a:	e853 3f00 	ldrex	r3, [r3]
 8004c0e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c12:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	330c      	adds	r3, #12
 8004c1e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c20:	637a      	str	r2, [r7, #52]	; 0x34
 8004c22:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c24:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c28:	e841 2300 	strex	r3, r2, [r1]
 8004c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d1e5      	bne.n	8004c00 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	3314      	adds	r3, #20
 8004c3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	e853 3f00 	ldrex	r3, [r3]
 8004c42:	613b      	str	r3, [r7, #16]
   return(result);
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	f023 0301 	bic.w	r3, r3, #1
 8004c4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	3314      	adds	r3, #20
 8004c52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c54:	623a      	str	r2, [r7, #32]
 8004c56:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c58:	69f9      	ldr	r1, [r7, #28]
 8004c5a:	6a3a      	ldr	r2, [r7, #32]
 8004c5c:	e841 2300 	strex	r3, r2, [r1]
 8004c60:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c62:	69bb      	ldr	r3, [r7, #24]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d1e5      	bne.n	8004c34 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2220      	movs	r2, #32
 8004c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2220      	movs	r2, #32
 8004c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004c80:	2303      	movs	r3, #3
 8004c82:	e00f      	b.n	8004ca4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	68ba      	ldr	r2, [r7, #8]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	bf0c      	ite	eq
 8004c94:	2301      	moveq	r3, #1
 8004c96:	2300      	movne	r3, #0
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	79fb      	ldrb	r3, [r7, #7]
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d09f      	beq.n	8004be2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ca2:	2300      	movs	r3, #0
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3740      	adds	r7, #64	; 0x40
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}

08004cac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b095      	sub	sp, #84	; 0x54
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	330c      	adds	r3, #12
 8004cba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cbe:	e853 3f00 	ldrex	r3, [r3]
 8004cc2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004cca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	330c      	adds	r3, #12
 8004cd2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004cd4:	643a      	str	r2, [r7, #64]	; 0x40
 8004cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004cda:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004cdc:	e841 2300 	strex	r3, r2, [r1]
 8004ce0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d1e5      	bne.n	8004cb4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	3314      	adds	r3, #20
 8004cee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cf0:	6a3b      	ldr	r3, [r7, #32]
 8004cf2:	e853 3f00 	ldrex	r3, [r3]
 8004cf6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	f023 0301 	bic.w	r3, r3, #1
 8004cfe:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	3314      	adds	r3, #20
 8004d06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d08:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d10:	e841 2300 	strex	r3, r2, [r1]
 8004d14:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d1e5      	bne.n	8004ce8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d119      	bne.n	8004d58 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	330c      	adds	r3, #12
 8004d2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	e853 3f00 	ldrex	r3, [r3]
 8004d32:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	f023 0310 	bic.w	r3, r3, #16
 8004d3a:	647b      	str	r3, [r7, #68]	; 0x44
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	330c      	adds	r3, #12
 8004d42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d44:	61ba      	str	r2, [r7, #24]
 8004d46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d48:	6979      	ldr	r1, [r7, #20]
 8004d4a:	69ba      	ldr	r2, [r7, #24]
 8004d4c:	e841 2300 	strex	r3, r2, [r1]
 8004d50:	613b      	str	r3, [r7, #16]
   return(result);
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d1e5      	bne.n	8004d24 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2220      	movs	r2, #32
 8004d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004d66:	bf00      	nop
 8004d68:	3754      	adds	r7, #84	; 0x54
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr

08004d72 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d72:	b580      	push	{r7, lr}
 8004d74:	b084      	sub	sp, #16
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d7e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2200      	movs	r2, #0
 8004d84:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d8c:	68f8      	ldr	r0, [r7, #12]
 8004d8e:	f7ff ff09 	bl	8004ba4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d92:	bf00      	nop
 8004d94:	3710      	adds	r7, #16
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}

08004d9a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004d9a:	b480      	push	{r7}
 8004d9c:	b085      	sub	sp, #20
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	2b21      	cmp	r3, #33	; 0x21
 8004dac:	d13e      	bne.n	8004e2c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004db6:	d114      	bne.n	8004de2 <UART_Transmit_IT+0x48>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	691b      	ldr	r3, [r3, #16]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d110      	bne.n	8004de2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6a1b      	ldr	r3, [r3, #32]
 8004dc4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	881b      	ldrh	r3, [r3, #0]
 8004dca:	461a      	mov	r2, r3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004dd4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6a1b      	ldr	r3, [r3, #32]
 8004dda:	1c9a      	adds	r2, r3, #2
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	621a      	str	r2, [r3, #32]
 8004de0:	e008      	b.n	8004df4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a1b      	ldr	r3, [r3, #32]
 8004de6:	1c59      	adds	r1, r3, #1
 8004de8:	687a      	ldr	r2, [r7, #4]
 8004dea:	6211      	str	r1, [r2, #32]
 8004dec:	781a      	ldrb	r2, [r3, #0]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	3b01      	subs	r3, #1
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	4619      	mov	r1, r3
 8004e02:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d10f      	bne.n	8004e28 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	68da      	ldr	r2, [r3, #12]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e16:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	68da      	ldr	r2, [r3, #12]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e26:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	e000      	b.n	8004e2e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004e2c:	2302      	movs	r3, #2
  }
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3714      	adds	r7, #20
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr

08004e3a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e3a:	b580      	push	{r7, lr}
 8004e3c:	b082      	sub	sp, #8
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	68da      	ldr	r2, [r3, #12]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e50:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2220      	movs	r2, #32
 8004e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f7ff fe8e 	bl	8004b7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004e60:	2300      	movs	r3, #0
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3708      	adds	r7, #8
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}

08004e6a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004e6a:	b580      	push	{r7, lr}
 8004e6c:	b08c      	sub	sp, #48	; 0x30
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	2b22      	cmp	r3, #34	; 0x22
 8004e7c:	f040 80ab 	bne.w	8004fd6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e88:	d117      	bne.n	8004eba <UART_Receive_IT+0x50>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d113      	bne.n	8004eba <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004e92:	2300      	movs	r3, #0
 8004e94:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e9a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ea8:	b29a      	uxth	r2, r3
 8004eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eac:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb2:	1c9a      	adds	r2, r3, #2
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	629a      	str	r2, [r3, #40]	; 0x28
 8004eb8:	e026      	b.n	8004f08 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ecc:	d007      	beq.n	8004ede <UART_Receive_IT+0x74>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d10a      	bne.n	8004eec <UART_Receive_IT+0x82>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d106      	bne.n	8004eec <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	b2da      	uxtb	r2, r3
 8004ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ee8:	701a      	strb	r2, [r3, #0]
 8004eea:	e008      	b.n	8004efe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ef8:	b2da      	uxtb	r2, r3
 8004efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004efc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f02:	1c5a      	adds	r2, r3, #1
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	3b01      	subs	r3, #1
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	4619      	mov	r1, r3
 8004f16:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d15a      	bne.n	8004fd2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	68da      	ldr	r2, [r3, #12]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f022 0220 	bic.w	r2, r2, #32
 8004f2a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	68da      	ldr	r2, [r3, #12]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f3a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	695a      	ldr	r2, [r3, #20]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f022 0201 	bic.w	r2, r2, #1
 8004f4a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2220      	movs	r2, #32
 8004f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d135      	bne.n	8004fc8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	330c      	adds	r3, #12
 8004f68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	e853 3f00 	ldrex	r3, [r3]
 8004f70:	613b      	str	r3, [r7, #16]
   return(result);
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	f023 0310 	bic.w	r3, r3, #16
 8004f78:	627b      	str	r3, [r7, #36]	; 0x24
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	330c      	adds	r3, #12
 8004f80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f82:	623a      	str	r2, [r7, #32]
 8004f84:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f86:	69f9      	ldr	r1, [r7, #28]
 8004f88:	6a3a      	ldr	r2, [r7, #32]
 8004f8a:	e841 2300 	strex	r3, r2, [r1]
 8004f8e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f90:	69bb      	ldr	r3, [r7, #24]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d1e5      	bne.n	8004f62 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 0310 	and.w	r3, r3, #16
 8004fa0:	2b10      	cmp	r3, #16
 8004fa2:	d10a      	bne.n	8004fba <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	60fb      	str	r3, [r7, #12]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	60fb      	str	r3, [r7, #12]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	60fb      	str	r3, [r7, #12]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f7ff fdf9 	bl	8004bb8 <HAL_UARTEx_RxEventCallback>
 8004fc6:	e002      	b.n	8004fce <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f7ff fde1 	bl	8004b90 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	e002      	b.n	8004fd8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	e000      	b.n	8004fd8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004fd6:	2302      	movs	r3, #2
  }
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3730      	adds	r7, #48	; 0x30
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fe0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fe4:	b0c0      	sub	sp, #256	; 0x100
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	691b      	ldr	r3, [r3, #16]
 8004ff4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ffc:	68d9      	ldr	r1, [r3, #12]
 8004ffe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	ea40 0301 	orr.w	r3, r0, r1
 8005008:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800500a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800500e:	689a      	ldr	r2, [r3, #8]
 8005010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	431a      	orrs	r2, r3
 8005018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800501c:	695b      	ldr	r3, [r3, #20]
 800501e:	431a      	orrs	r2, r3
 8005020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005024:	69db      	ldr	r3, [r3, #28]
 8005026:	4313      	orrs	r3, r2
 8005028:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800502c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005038:	f021 010c 	bic.w	r1, r1, #12
 800503c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005046:	430b      	orrs	r3, r1
 8005048:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800504a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	695b      	ldr	r3, [r3, #20]
 8005052:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800505a:	6999      	ldr	r1, [r3, #24]
 800505c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	ea40 0301 	orr.w	r3, r0, r1
 8005066:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	4b8f      	ldr	r3, [pc, #572]	; (80052ac <UART_SetConfig+0x2cc>)
 8005070:	429a      	cmp	r2, r3
 8005072:	d005      	beq.n	8005080 <UART_SetConfig+0xa0>
 8005074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	4b8d      	ldr	r3, [pc, #564]	; (80052b0 <UART_SetConfig+0x2d0>)
 800507c:	429a      	cmp	r2, r3
 800507e:	d104      	bne.n	800508a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005080:	f7fe fb9c 	bl	80037bc <HAL_RCC_GetPCLK2Freq>
 8005084:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005088:	e003      	b.n	8005092 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800508a:	f7fe fb83 	bl	8003794 <HAL_RCC_GetPCLK1Freq>
 800508e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005096:	69db      	ldr	r3, [r3, #28]
 8005098:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800509c:	f040 810c 	bne.w	80052b8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80050a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050a4:	2200      	movs	r2, #0
 80050a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80050aa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80050ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80050b2:	4622      	mov	r2, r4
 80050b4:	462b      	mov	r3, r5
 80050b6:	1891      	adds	r1, r2, r2
 80050b8:	65b9      	str	r1, [r7, #88]	; 0x58
 80050ba:	415b      	adcs	r3, r3
 80050bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80050c2:	4621      	mov	r1, r4
 80050c4:	eb12 0801 	adds.w	r8, r2, r1
 80050c8:	4629      	mov	r1, r5
 80050ca:	eb43 0901 	adc.w	r9, r3, r1
 80050ce:	f04f 0200 	mov.w	r2, #0
 80050d2:	f04f 0300 	mov.w	r3, #0
 80050d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80050da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80050de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80050e2:	4690      	mov	r8, r2
 80050e4:	4699      	mov	r9, r3
 80050e6:	4623      	mov	r3, r4
 80050e8:	eb18 0303 	adds.w	r3, r8, r3
 80050ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80050f0:	462b      	mov	r3, r5
 80050f2:	eb49 0303 	adc.w	r3, r9, r3
 80050f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80050fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005106:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800510a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800510e:	460b      	mov	r3, r1
 8005110:	18db      	adds	r3, r3, r3
 8005112:	653b      	str	r3, [r7, #80]	; 0x50
 8005114:	4613      	mov	r3, r2
 8005116:	eb42 0303 	adc.w	r3, r2, r3
 800511a:	657b      	str	r3, [r7, #84]	; 0x54
 800511c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005120:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005124:	f7fb f8ac 	bl	8000280 <__aeabi_uldivmod>
 8005128:	4602      	mov	r2, r0
 800512a:	460b      	mov	r3, r1
 800512c:	4b61      	ldr	r3, [pc, #388]	; (80052b4 <UART_SetConfig+0x2d4>)
 800512e:	fba3 2302 	umull	r2, r3, r3, r2
 8005132:	095b      	lsrs	r3, r3, #5
 8005134:	011c      	lsls	r4, r3, #4
 8005136:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800513a:	2200      	movs	r2, #0
 800513c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005140:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005144:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005148:	4642      	mov	r2, r8
 800514a:	464b      	mov	r3, r9
 800514c:	1891      	adds	r1, r2, r2
 800514e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005150:	415b      	adcs	r3, r3
 8005152:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005154:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005158:	4641      	mov	r1, r8
 800515a:	eb12 0a01 	adds.w	sl, r2, r1
 800515e:	4649      	mov	r1, r9
 8005160:	eb43 0b01 	adc.w	fp, r3, r1
 8005164:	f04f 0200 	mov.w	r2, #0
 8005168:	f04f 0300 	mov.w	r3, #0
 800516c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005170:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005174:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005178:	4692      	mov	sl, r2
 800517a:	469b      	mov	fp, r3
 800517c:	4643      	mov	r3, r8
 800517e:	eb1a 0303 	adds.w	r3, sl, r3
 8005182:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005186:	464b      	mov	r3, r9
 8005188:	eb4b 0303 	adc.w	r3, fp, r3
 800518c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800519c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80051a0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80051a4:	460b      	mov	r3, r1
 80051a6:	18db      	adds	r3, r3, r3
 80051a8:	643b      	str	r3, [r7, #64]	; 0x40
 80051aa:	4613      	mov	r3, r2
 80051ac:	eb42 0303 	adc.w	r3, r2, r3
 80051b0:	647b      	str	r3, [r7, #68]	; 0x44
 80051b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80051b6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80051ba:	f7fb f861 	bl	8000280 <__aeabi_uldivmod>
 80051be:	4602      	mov	r2, r0
 80051c0:	460b      	mov	r3, r1
 80051c2:	4611      	mov	r1, r2
 80051c4:	4b3b      	ldr	r3, [pc, #236]	; (80052b4 <UART_SetConfig+0x2d4>)
 80051c6:	fba3 2301 	umull	r2, r3, r3, r1
 80051ca:	095b      	lsrs	r3, r3, #5
 80051cc:	2264      	movs	r2, #100	; 0x64
 80051ce:	fb02 f303 	mul.w	r3, r2, r3
 80051d2:	1acb      	subs	r3, r1, r3
 80051d4:	00db      	lsls	r3, r3, #3
 80051d6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80051da:	4b36      	ldr	r3, [pc, #216]	; (80052b4 <UART_SetConfig+0x2d4>)
 80051dc:	fba3 2302 	umull	r2, r3, r3, r2
 80051e0:	095b      	lsrs	r3, r3, #5
 80051e2:	005b      	lsls	r3, r3, #1
 80051e4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80051e8:	441c      	add	r4, r3
 80051ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051ee:	2200      	movs	r2, #0
 80051f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80051f4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80051f8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80051fc:	4642      	mov	r2, r8
 80051fe:	464b      	mov	r3, r9
 8005200:	1891      	adds	r1, r2, r2
 8005202:	63b9      	str	r1, [r7, #56]	; 0x38
 8005204:	415b      	adcs	r3, r3
 8005206:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005208:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800520c:	4641      	mov	r1, r8
 800520e:	1851      	adds	r1, r2, r1
 8005210:	6339      	str	r1, [r7, #48]	; 0x30
 8005212:	4649      	mov	r1, r9
 8005214:	414b      	adcs	r3, r1
 8005216:	637b      	str	r3, [r7, #52]	; 0x34
 8005218:	f04f 0200 	mov.w	r2, #0
 800521c:	f04f 0300 	mov.w	r3, #0
 8005220:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005224:	4659      	mov	r1, fp
 8005226:	00cb      	lsls	r3, r1, #3
 8005228:	4651      	mov	r1, sl
 800522a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800522e:	4651      	mov	r1, sl
 8005230:	00ca      	lsls	r2, r1, #3
 8005232:	4610      	mov	r0, r2
 8005234:	4619      	mov	r1, r3
 8005236:	4603      	mov	r3, r0
 8005238:	4642      	mov	r2, r8
 800523a:	189b      	adds	r3, r3, r2
 800523c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005240:	464b      	mov	r3, r9
 8005242:	460a      	mov	r2, r1
 8005244:	eb42 0303 	adc.w	r3, r2, r3
 8005248:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800524c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005258:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800525c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005260:	460b      	mov	r3, r1
 8005262:	18db      	adds	r3, r3, r3
 8005264:	62bb      	str	r3, [r7, #40]	; 0x28
 8005266:	4613      	mov	r3, r2
 8005268:	eb42 0303 	adc.w	r3, r2, r3
 800526c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800526e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005272:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005276:	f7fb f803 	bl	8000280 <__aeabi_uldivmod>
 800527a:	4602      	mov	r2, r0
 800527c:	460b      	mov	r3, r1
 800527e:	4b0d      	ldr	r3, [pc, #52]	; (80052b4 <UART_SetConfig+0x2d4>)
 8005280:	fba3 1302 	umull	r1, r3, r3, r2
 8005284:	095b      	lsrs	r3, r3, #5
 8005286:	2164      	movs	r1, #100	; 0x64
 8005288:	fb01 f303 	mul.w	r3, r1, r3
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	00db      	lsls	r3, r3, #3
 8005290:	3332      	adds	r3, #50	; 0x32
 8005292:	4a08      	ldr	r2, [pc, #32]	; (80052b4 <UART_SetConfig+0x2d4>)
 8005294:	fba2 2303 	umull	r2, r3, r2, r3
 8005298:	095b      	lsrs	r3, r3, #5
 800529a:	f003 0207 	and.w	r2, r3, #7
 800529e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4422      	add	r2, r4
 80052a6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80052a8:	e105      	b.n	80054b6 <UART_SetConfig+0x4d6>
 80052aa:	bf00      	nop
 80052ac:	40011000 	.word	0x40011000
 80052b0:	40011400 	.word	0x40011400
 80052b4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80052b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052bc:	2200      	movs	r2, #0
 80052be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80052c2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80052c6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80052ca:	4642      	mov	r2, r8
 80052cc:	464b      	mov	r3, r9
 80052ce:	1891      	adds	r1, r2, r2
 80052d0:	6239      	str	r1, [r7, #32]
 80052d2:	415b      	adcs	r3, r3
 80052d4:	627b      	str	r3, [r7, #36]	; 0x24
 80052d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80052da:	4641      	mov	r1, r8
 80052dc:	1854      	adds	r4, r2, r1
 80052de:	4649      	mov	r1, r9
 80052e0:	eb43 0501 	adc.w	r5, r3, r1
 80052e4:	f04f 0200 	mov.w	r2, #0
 80052e8:	f04f 0300 	mov.w	r3, #0
 80052ec:	00eb      	lsls	r3, r5, #3
 80052ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80052f2:	00e2      	lsls	r2, r4, #3
 80052f4:	4614      	mov	r4, r2
 80052f6:	461d      	mov	r5, r3
 80052f8:	4643      	mov	r3, r8
 80052fa:	18e3      	adds	r3, r4, r3
 80052fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005300:	464b      	mov	r3, r9
 8005302:	eb45 0303 	adc.w	r3, r5, r3
 8005306:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800530a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005316:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800531a:	f04f 0200 	mov.w	r2, #0
 800531e:	f04f 0300 	mov.w	r3, #0
 8005322:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005326:	4629      	mov	r1, r5
 8005328:	008b      	lsls	r3, r1, #2
 800532a:	4621      	mov	r1, r4
 800532c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005330:	4621      	mov	r1, r4
 8005332:	008a      	lsls	r2, r1, #2
 8005334:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005338:	f7fa ffa2 	bl	8000280 <__aeabi_uldivmod>
 800533c:	4602      	mov	r2, r0
 800533e:	460b      	mov	r3, r1
 8005340:	4b60      	ldr	r3, [pc, #384]	; (80054c4 <UART_SetConfig+0x4e4>)
 8005342:	fba3 2302 	umull	r2, r3, r3, r2
 8005346:	095b      	lsrs	r3, r3, #5
 8005348:	011c      	lsls	r4, r3, #4
 800534a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800534e:	2200      	movs	r2, #0
 8005350:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005354:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005358:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800535c:	4642      	mov	r2, r8
 800535e:	464b      	mov	r3, r9
 8005360:	1891      	adds	r1, r2, r2
 8005362:	61b9      	str	r1, [r7, #24]
 8005364:	415b      	adcs	r3, r3
 8005366:	61fb      	str	r3, [r7, #28]
 8005368:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800536c:	4641      	mov	r1, r8
 800536e:	1851      	adds	r1, r2, r1
 8005370:	6139      	str	r1, [r7, #16]
 8005372:	4649      	mov	r1, r9
 8005374:	414b      	adcs	r3, r1
 8005376:	617b      	str	r3, [r7, #20]
 8005378:	f04f 0200 	mov.w	r2, #0
 800537c:	f04f 0300 	mov.w	r3, #0
 8005380:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005384:	4659      	mov	r1, fp
 8005386:	00cb      	lsls	r3, r1, #3
 8005388:	4651      	mov	r1, sl
 800538a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800538e:	4651      	mov	r1, sl
 8005390:	00ca      	lsls	r2, r1, #3
 8005392:	4610      	mov	r0, r2
 8005394:	4619      	mov	r1, r3
 8005396:	4603      	mov	r3, r0
 8005398:	4642      	mov	r2, r8
 800539a:	189b      	adds	r3, r3, r2
 800539c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80053a0:	464b      	mov	r3, r9
 80053a2:	460a      	mov	r2, r1
 80053a4:	eb42 0303 	adc.w	r3, r2, r3
 80053a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80053ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	67bb      	str	r3, [r7, #120]	; 0x78
 80053b6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80053b8:	f04f 0200 	mov.w	r2, #0
 80053bc:	f04f 0300 	mov.w	r3, #0
 80053c0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80053c4:	4649      	mov	r1, r9
 80053c6:	008b      	lsls	r3, r1, #2
 80053c8:	4641      	mov	r1, r8
 80053ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053ce:	4641      	mov	r1, r8
 80053d0:	008a      	lsls	r2, r1, #2
 80053d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80053d6:	f7fa ff53 	bl	8000280 <__aeabi_uldivmod>
 80053da:	4602      	mov	r2, r0
 80053dc:	460b      	mov	r3, r1
 80053de:	4b39      	ldr	r3, [pc, #228]	; (80054c4 <UART_SetConfig+0x4e4>)
 80053e0:	fba3 1302 	umull	r1, r3, r3, r2
 80053e4:	095b      	lsrs	r3, r3, #5
 80053e6:	2164      	movs	r1, #100	; 0x64
 80053e8:	fb01 f303 	mul.w	r3, r1, r3
 80053ec:	1ad3      	subs	r3, r2, r3
 80053ee:	011b      	lsls	r3, r3, #4
 80053f0:	3332      	adds	r3, #50	; 0x32
 80053f2:	4a34      	ldr	r2, [pc, #208]	; (80054c4 <UART_SetConfig+0x4e4>)
 80053f4:	fba2 2303 	umull	r2, r3, r2, r3
 80053f8:	095b      	lsrs	r3, r3, #5
 80053fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053fe:	441c      	add	r4, r3
 8005400:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005404:	2200      	movs	r2, #0
 8005406:	673b      	str	r3, [r7, #112]	; 0x70
 8005408:	677a      	str	r2, [r7, #116]	; 0x74
 800540a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800540e:	4642      	mov	r2, r8
 8005410:	464b      	mov	r3, r9
 8005412:	1891      	adds	r1, r2, r2
 8005414:	60b9      	str	r1, [r7, #8]
 8005416:	415b      	adcs	r3, r3
 8005418:	60fb      	str	r3, [r7, #12]
 800541a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800541e:	4641      	mov	r1, r8
 8005420:	1851      	adds	r1, r2, r1
 8005422:	6039      	str	r1, [r7, #0]
 8005424:	4649      	mov	r1, r9
 8005426:	414b      	adcs	r3, r1
 8005428:	607b      	str	r3, [r7, #4]
 800542a:	f04f 0200 	mov.w	r2, #0
 800542e:	f04f 0300 	mov.w	r3, #0
 8005432:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005436:	4659      	mov	r1, fp
 8005438:	00cb      	lsls	r3, r1, #3
 800543a:	4651      	mov	r1, sl
 800543c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005440:	4651      	mov	r1, sl
 8005442:	00ca      	lsls	r2, r1, #3
 8005444:	4610      	mov	r0, r2
 8005446:	4619      	mov	r1, r3
 8005448:	4603      	mov	r3, r0
 800544a:	4642      	mov	r2, r8
 800544c:	189b      	adds	r3, r3, r2
 800544e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005450:	464b      	mov	r3, r9
 8005452:	460a      	mov	r2, r1
 8005454:	eb42 0303 	adc.w	r3, r2, r3
 8005458:	66fb      	str	r3, [r7, #108]	; 0x6c
 800545a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	663b      	str	r3, [r7, #96]	; 0x60
 8005464:	667a      	str	r2, [r7, #100]	; 0x64
 8005466:	f04f 0200 	mov.w	r2, #0
 800546a:	f04f 0300 	mov.w	r3, #0
 800546e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005472:	4649      	mov	r1, r9
 8005474:	008b      	lsls	r3, r1, #2
 8005476:	4641      	mov	r1, r8
 8005478:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800547c:	4641      	mov	r1, r8
 800547e:	008a      	lsls	r2, r1, #2
 8005480:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005484:	f7fa fefc 	bl	8000280 <__aeabi_uldivmod>
 8005488:	4602      	mov	r2, r0
 800548a:	460b      	mov	r3, r1
 800548c:	4b0d      	ldr	r3, [pc, #52]	; (80054c4 <UART_SetConfig+0x4e4>)
 800548e:	fba3 1302 	umull	r1, r3, r3, r2
 8005492:	095b      	lsrs	r3, r3, #5
 8005494:	2164      	movs	r1, #100	; 0x64
 8005496:	fb01 f303 	mul.w	r3, r1, r3
 800549a:	1ad3      	subs	r3, r2, r3
 800549c:	011b      	lsls	r3, r3, #4
 800549e:	3332      	adds	r3, #50	; 0x32
 80054a0:	4a08      	ldr	r2, [pc, #32]	; (80054c4 <UART_SetConfig+0x4e4>)
 80054a2:	fba2 2303 	umull	r2, r3, r2, r3
 80054a6:	095b      	lsrs	r3, r3, #5
 80054a8:	f003 020f 	and.w	r2, r3, #15
 80054ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4422      	add	r2, r4
 80054b4:	609a      	str	r2, [r3, #8]
}
 80054b6:	bf00      	nop
 80054b8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80054bc:	46bd      	mov	sp, r7
 80054be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054c2:	bf00      	nop
 80054c4:	51eb851f 	.word	0x51eb851f

080054c8 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b087      	sub	sp, #28
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054dc:	683a      	ldr	r2, [r7, #0]
 80054de:	6812      	ldr	r2, [r2, #0]
 80054e0:	f023 0101 	bic.w	r1, r3, #1
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	2b08      	cmp	r3, #8
 80054f0:	d102      	bne.n	80054f8 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80054f2:	2340      	movs	r3, #64	; 0x40
 80054f4:	617b      	str	r3, [r7, #20]
 80054f6:	e001      	b.n	80054fc <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80054f8:	2300      	movs	r3, #0
 80054fa:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8005508:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800550e:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8005514:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800551a:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8005520:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8005526:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 800552c:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8005532:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8005538:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 800553e:	4313      	orrs	r3, r2
 8005540:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	699b      	ldr	r3, [r3, #24]
 8005546:	693a      	ldr	r2, [r7, #16]
 8005548:	4313      	orrs	r3, r2
 800554a:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005550:	693a      	ldr	r2, [r7, #16]
 8005552:	4313      	orrs	r3, r2
 8005554:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 8005556:	4b10      	ldr	r3, [pc, #64]	; (8005598 <FSMC_NORSRAM_Init+0xd0>)
 8005558:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005560:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8005568:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	43db      	mvns	r3, r3
 8005578:	ea02 0103 	and.w	r1, r2, r3
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	4319      	orrs	r1, r3
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 800558a:	2300      	movs	r3, #0
}
 800558c:	4618      	mov	r0, r3
 800558e:	371c      	adds	r7, #28
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr
 8005598:	0008fb7f 	.word	0x0008fb7f

0800559c <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800559c:	b480      	push	{r7}
 800559e:	b085      	sub	sp, #20
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	60b9      	str	r1, [r7, #8]
 80055a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	1c5a      	adds	r2, r3, #1
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055b2:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	011b      	lsls	r3, r3, #4
 80055c0:	431a      	orrs	r2, r3
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	021b      	lsls	r3, r3, #8
 80055c8:	431a      	orrs	r2, r3
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	041b      	lsls	r3, r3, #16
 80055d0:	431a      	orrs	r2, r3
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	3b01      	subs	r3, #1
 80055d8:	051b      	lsls	r3, r3, #20
 80055da:	431a      	orrs	r2, r3
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	695b      	ldr	r3, [r3, #20]
 80055e0:	3b02      	subs	r3, #2
 80055e2:	061b      	lsls	r3, r3, #24
 80055e4:	431a      	orrs	r2, r3
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	699b      	ldr	r3, [r3, #24]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	687a      	ldr	r2, [r7, #4]
 80055ee:	3201      	adds	r2, #1
 80055f0:	4319      	orrs	r1, r3
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 80055f8:	2300      	movs	r3, #0
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3714      	adds	r7, #20
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr
	...

08005608 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8005608:	b480      	push	{r7}
 800560a:	b085      	sub	sp, #20
 800560c:	af00      	add	r7, sp, #0
 800560e:	60f8      	str	r0, [r7, #12]
 8005610:	60b9      	str	r1, [r7, #8]
 8005612:	607a      	str	r2, [r7, #4]
 8005614:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800561c:	d11d      	bne.n	800565a <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005626:	4b13      	ldr	r3, [pc, #76]	; (8005674 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8005628:	4013      	ands	r3, r2
 800562a:	68ba      	ldr	r2, [r7, #8]
 800562c:	6811      	ldr	r1, [r2, #0]
 800562e:	68ba      	ldr	r2, [r7, #8]
 8005630:	6852      	ldr	r2, [r2, #4]
 8005632:	0112      	lsls	r2, r2, #4
 8005634:	4311      	orrs	r1, r2
 8005636:	68ba      	ldr	r2, [r7, #8]
 8005638:	6892      	ldr	r2, [r2, #8]
 800563a:	0212      	lsls	r2, r2, #8
 800563c:	4311      	orrs	r1, r2
 800563e:	68ba      	ldr	r2, [r7, #8]
 8005640:	6992      	ldr	r2, [r2, #24]
 8005642:	4311      	orrs	r1, r2
 8005644:	68ba      	ldr	r2, [r7, #8]
 8005646:	68d2      	ldr	r2, [r2, #12]
 8005648:	0412      	lsls	r2, r2, #16
 800564a:	430a      	orrs	r2, r1
 800564c:	ea43 0102 	orr.w	r1, r3, r2
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005658:	e005      	b.n	8005666 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8005662:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8005666:	2300      	movs	r3, #0
}
 8005668:	4618      	mov	r0, r3
 800566a:	3714      	adds	r7, #20
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr
 8005674:	cff00000 	.word	0xcff00000

08005678 <__errno>:
 8005678:	4b01      	ldr	r3, [pc, #4]	; (8005680 <__errno+0x8>)
 800567a:	6818      	ldr	r0, [r3, #0]
 800567c:	4770      	bx	lr
 800567e:	bf00      	nop
 8005680:	20000014 	.word	0x20000014

08005684 <__libc_init_array>:
 8005684:	b570      	push	{r4, r5, r6, lr}
 8005686:	4d0d      	ldr	r5, [pc, #52]	; (80056bc <__libc_init_array+0x38>)
 8005688:	4c0d      	ldr	r4, [pc, #52]	; (80056c0 <__libc_init_array+0x3c>)
 800568a:	1b64      	subs	r4, r4, r5
 800568c:	10a4      	asrs	r4, r4, #2
 800568e:	2600      	movs	r6, #0
 8005690:	42a6      	cmp	r6, r4
 8005692:	d109      	bne.n	80056a8 <__libc_init_array+0x24>
 8005694:	4d0b      	ldr	r5, [pc, #44]	; (80056c4 <__libc_init_array+0x40>)
 8005696:	4c0c      	ldr	r4, [pc, #48]	; (80056c8 <__libc_init_array+0x44>)
 8005698:	f001 fa00 	bl	8006a9c <_init>
 800569c:	1b64      	subs	r4, r4, r5
 800569e:	10a4      	asrs	r4, r4, #2
 80056a0:	2600      	movs	r6, #0
 80056a2:	42a6      	cmp	r6, r4
 80056a4:	d105      	bne.n	80056b2 <__libc_init_array+0x2e>
 80056a6:	bd70      	pop	{r4, r5, r6, pc}
 80056a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80056ac:	4798      	blx	r3
 80056ae:	3601      	adds	r6, #1
 80056b0:	e7ee      	b.n	8005690 <__libc_init_array+0xc>
 80056b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80056b6:	4798      	blx	r3
 80056b8:	3601      	adds	r6, #1
 80056ba:	e7f2      	b.n	80056a2 <__libc_init_array+0x1e>
 80056bc:	08006da4 	.word	0x08006da4
 80056c0:	08006da4 	.word	0x08006da4
 80056c4:	08006da4 	.word	0x08006da4
 80056c8:	08006da8 	.word	0x08006da8

080056cc <memset>:
 80056cc:	4402      	add	r2, r0
 80056ce:	4603      	mov	r3, r0
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d100      	bne.n	80056d6 <memset+0xa>
 80056d4:	4770      	bx	lr
 80056d6:	f803 1b01 	strb.w	r1, [r3], #1
 80056da:	e7f9      	b.n	80056d0 <memset+0x4>

080056dc <iprintf>:
 80056dc:	b40f      	push	{r0, r1, r2, r3}
 80056de:	4b0a      	ldr	r3, [pc, #40]	; (8005708 <iprintf+0x2c>)
 80056e0:	b513      	push	{r0, r1, r4, lr}
 80056e2:	681c      	ldr	r4, [r3, #0]
 80056e4:	b124      	cbz	r4, 80056f0 <iprintf+0x14>
 80056e6:	69a3      	ldr	r3, [r4, #24]
 80056e8:	b913      	cbnz	r3, 80056f0 <iprintf+0x14>
 80056ea:	4620      	mov	r0, r4
 80056ec:	f000 fa7e 	bl	8005bec <__sinit>
 80056f0:	ab05      	add	r3, sp, #20
 80056f2:	9a04      	ldr	r2, [sp, #16]
 80056f4:	68a1      	ldr	r1, [r4, #8]
 80056f6:	9301      	str	r3, [sp, #4]
 80056f8:	4620      	mov	r0, r4
 80056fa:	f000 fde3 	bl	80062c4 <_vfiprintf_r>
 80056fe:	b002      	add	sp, #8
 8005700:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005704:	b004      	add	sp, #16
 8005706:	4770      	bx	lr
 8005708:	20000014 	.word	0x20000014

0800570c <_puts_r>:
 800570c:	b570      	push	{r4, r5, r6, lr}
 800570e:	460e      	mov	r6, r1
 8005710:	4605      	mov	r5, r0
 8005712:	b118      	cbz	r0, 800571c <_puts_r+0x10>
 8005714:	6983      	ldr	r3, [r0, #24]
 8005716:	b90b      	cbnz	r3, 800571c <_puts_r+0x10>
 8005718:	f000 fa68 	bl	8005bec <__sinit>
 800571c:	69ab      	ldr	r3, [r5, #24]
 800571e:	68ac      	ldr	r4, [r5, #8]
 8005720:	b913      	cbnz	r3, 8005728 <_puts_r+0x1c>
 8005722:	4628      	mov	r0, r5
 8005724:	f000 fa62 	bl	8005bec <__sinit>
 8005728:	4b2c      	ldr	r3, [pc, #176]	; (80057dc <_puts_r+0xd0>)
 800572a:	429c      	cmp	r4, r3
 800572c:	d120      	bne.n	8005770 <_puts_r+0x64>
 800572e:	686c      	ldr	r4, [r5, #4]
 8005730:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005732:	07db      	lsls	r3, r3, #31
 8005734:	d405      	bmi.n	8005742 <_puts_r+0x36>
 8005736:	89a3      	ldrh	r3, [r4, #12]
 8005738:	0598      	lsls	r0, r3, #22
 800573a:	d402      	bmi.n	8005742 <_puts_r+0x36>
 800573c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800573e:	f000 faf3 	bl	8005d28 <__retarget_lock_acquire_recursive>
 8005742:	89a3      	ldrh	r3, [r4, #12]
 8005744:	0719      	lsls	r1, r3, #28
 8005746:	d51d      	bpl.n	8005784 <_puts_r+0x78>
 8005748:	6923      	ldr	r3, [r4, #16]
 800574a:	b1db      	cbz	r3, 8005784 <_puts_r+0x78>
 800574c:	3e01      	subs	r6, #1
 800574e:	68a3      	ldr	r3, [r4, #8]
 8005750:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005754:	3b01      	subs	r3, #1
 8005756:	60a3      	str	r3, [r4, #8]
 8005758:	bb39      	cbnz	r1, 80057aa <_puts_r+0x9e>
 800575a:	2b00      	cmp	r3, #0
 800575c:	da38      	bge.n	80057d0 <_puts_r+0xc4>
 800575e:	4622      	mov	r2, r4
 8005760:	210a      	movs	r1, #10
 8005762:	4628      	mov	r0, r5
 8005764:	f000 f868 	bl	8005838 <__swbuf_r>
 8005768:	3001      	adds	r0, #1
 800576a:	d011      	beq.n	8005790 <_puts_r+0x84>
 800576c:	250a      	movs	r5, #10
 800576e:	e011      	b.n	8005794 <_puts_r+0x88>
 8005770:	4b1b      	ldr	r3, [pc, #108]	; (80057e0 <_puts_r+0xd4>)
 8005772:	429c      	cmp	r4, r3
 8005774:	d101      	bne.n	800577a <_puts_r+0x6e>
 8005776:	68ac      	ldr	r4, [r5, #8]
 8005778:	e7da      	b.n	8005730 <_puts_r+0x24>
 800577a:	4b1a      	ldr	r3, [pc, #104]	; (80057e4 <_puts_r+0xd8>)
 800577c:	429c      	cmp	r4, r3
 800577e:	bf08      	it	eq
 8005780:	68ec      	ldreq	r4, [r5, #12]
 8005782:	e7d5      	b.n	8005730 <_puts_r+0x24>
 8005784:	4621      	mov	r1, r4
 8005786:	4628      	mov	r0, r5
 8005788:	f000 f8a8 	bl	80058dc <__swsetup_r>
 800578c:	2800      	cmp	r0, #0
 800578e:	d0dd      	beq.n	800574c <_puts_r+0x40>
 8005790:	f04f 35ff 	mov.w	r5, #4294967295
 8005794:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005796:	07da      	lsls	r2, r3, #31
 8005798:	d405      	bmi.n	80057a6 <_puts_r+0x9a>
 800579a:	89a3      	ldrh	r3, [r4, #12]
 800579c:	059b      	lsls	r3, r3, #22
 800579e:	d402      	bmi.n	80057a6 <_puts_r+0x9a>
 80057a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80057a2:	f000 fac2 	bl	8005d2a <__retarget_lock_release_recursive>
 80057a6:	4628      	mov	r0, r5
 80057a8:	bd70      	pop	{r4, r5, r6, pc}
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	da04      	bge.n	80057b8 <_puts_r+0xac>
 80057ae:	69a2      	ldr	r2, [r4, #24]
 80057b0:	429a      	cmp	r2, r3
 80057b2:	dc06      	bgt.n	80057c2 <_puts_r+0xb6>
 80057b4:	290a      	cmp	r1, #10
 80057b6:	d004      	beq.n	80057c2 <_puts_r+0xb6>
 80057b8:	6823      	ldr	r3, [r4, #0]
 80057ba:	1c5a      	adds	r2, r3, #1
 80057bc:	6022      	str	r2, [r4, #0]
 80057be:	7019      	strb	r1, [r3, #0]
 80057c0:	e7c5      	b.n	800574e <_puts_r+0x42>
 80057c2:	4622      	mov	r2, r4
 80057c4:	4628      	mov	r0, r5
 80057c6:	f000 f837 	bl	8005838 <__swbuf_r>
 80057ca:	3001      	adds	r0, #1
 80057cc:	d1bf      	bne.n	800574e <_puts_r+0x42>
 80057ce:	e7df      	b.n	8005790 <_puts_r+0x84>
 80057d0:	6823      	ldr	r3, [r4, #0]
 80057d2:	250a      	movs	r5, #10
 80057d4:	1c5a      	adds	r2, r3, #1
 80057d6:	6022      	str	r2, [r4, #0]
 80057d8:	701d      	strb	r5, [r3, #0]
 80057da:	e7db      	b.n	8005794 <_puts_r+0x88>
 80057dc:	08006d28 	.word	0x08006d28
 80057e0:	08006d48 	.word	0x08006d48
 80057e4:	08006d08 	.word	0x08006d08

080057e8 <puts>:
 80057e8:	4b02      	ldr	r3, [pc, #8]	; (80057f4 <puts+0xc>)
 80057ea:	4601      	mov	r1, r0
 80057ec:	6818      	ldr	r0, [r3, #0]
 80057ee:	f7ff bf8d 	b.w	800570c <_puts_r>
 80057f2:	bf00      	nop
 80057f4:	20000014 	.word	0x20000014

080057f8 <siprintf>:
 80057f8:	b40e      	push	{r1, r2, r3}
 80057fa:	b500      	push	{lr}
 80057fc:	b09c      	sub	sp, #112	; 0x70
 80057fe:	ab1d      	add	r3, sp, #116	; 0x74
 8005800:	9002      	str	r0, [sp, #8]
 8005802:	9006      	str	r0, [sp, #24]
 8005804:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005808:	4809      	ldr	r0, [pc, #36]	; (8005830 <siprintf+0x38>)
 800580a:	9107      	str	r1, [sp, #28]
 800580c:	9104      	str	r1, [sp, #16]
 800580e:	4909      	ldr	r1, [pc, #36]	; (8005834 <siprintf+0x3c>)
 8005810:	f853 2b04 	ldr.w	r2, [r3], #4
 8005814:	9105      	str	r1, [sp, #20]
 8005816:	6800      	ldr	r0, [r0, #0]
 8005818:	9301      	str	r3, [sp, #4]
 800581a:	a902      	add	r1, sp, #8
 800581c:	f000 fc28 	bl	8006070 <_svfiprintf_r>
 8005820:	9b02      	ldr	r3, [sp, #8]
 8005822:	2200      	movs	r2, #0
 8005824:	701a      	strb	r2, [r3, #0]
 8005826:	b01c      	add	sp, #112	; 0x70
 8005828:	f85d eb04 	ldr.w	lr, [sp], #4
 800582c:	b003      	add	sp, #12
 800582e:	4770      	bx	lr
 8005830:	20000014 	.word	0x20000014
 8005834:	ffff0208 	.word	0xffff0208

08005838 <__swbuf_r>:
 8005838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800583a:	460e      	mov	r6, r1
 800583c:	4614      	mov	r4, r2
 800583e:	4605      	mov	r5, r0
 8005840:	b118      	cbz	r0, 800584a <__swbuf_r+0x12>
 8005842:	6983      	ldr	r3, [r0, #24]
 8005844:	b90b      	cbnz	r3, 800584a <__swbuf_r+0x12>
 8005846:	f000 f9d1 	bl	8005bec <__sinit>
 800584a:	4b21      	ldr	r3, [pc, #132]	; (80058d0 <__swbuf_r+0x98>)
 800584c:	429c      	cmp	r4, r3
 800584e:	d12b      	bne.n	80058a8 <__swbuf_r+0x70>
 8005850:	686c      	ldr	r4, [r5, #4]
 8005852:	69a3      	ldr	r3, [r4, #24]
 8005854:	60a3      	str	r3, [r4, #8]
 8005856:	89a3      	ldrh	r3, [r4, #12]
 8005858:	071a      	lsls	r2, r3, #28
 800585a:	d52f      	bpl.n	80058bc <__swbuf_r+0x84>
 800585c:	6923      	ldr	r3, [r4, #16]
 800585e:	b36b      	cbz	r3, 80058bc <__swbuf_r+0x84>
 8005860:	6923      	ldr	r3, [r4, #16]
 8005862:	6820      	ldr	r0, [r4, #0]
 8005864:	1ac0      	subs	r0, r0, r3
 8005866:	6963      	ldr	r3, [r4, #20]
 8005868:	b2f6      	uxtb	r6, r6
 800586a:	4283      	cmp	r3, r0
 800586c:	4637      	mov	r7, r6
 800586e:	dc04      	bgt.n	800587a <__swbuf_r+0x42>
 8005870:	4621      	mov	r1, r4
 8005872:	4628      	mov	r0, r5
 8005874:	f000 f926 	bl	8005ac4 <_fflush_r>
 8005878:	bb30      	cbnz	r0, 80058c8 <__swbuf_r+0x90>
 800587a:	68a3      	ldr	r3, [r4, #8]
 800587c:	3b01      	subs	r3, #1
 800587e:	60a3      	str	r3, [r4, #8]
 8005880:	6823      	ldr	r3, [r4, #0]
 8005882:	1c5a      	adds	r2, r3, #1
 8005884:	6022      	str	r2, [r4, #0]
 8005886:	701e      	strb	r6, [r3, #0]
 8005888:	6963      	ldr	r3, [r4, #20]
 800588a:	3001      	adds	r0, #1
 800588c:	4283      	cmp	r3, r0
 800588e:	d004      	beq.n	800589a <__swbuf_r+0x62>
 8005890:	89a3      	ldrh	r3, [r4, #12]
 8005892:	07db      	lsls	r3, r3, #31
 8005894:	d506      	bpl.n	80058a4 <__swbuf_r+0x6c>
 8005896:	2e0a      	cmp	r6, #10
 8005898:	d104      	bne.n	80058a4 <__swbuf_r+0x6c>
 800589a:	4621      	mov	r1, r4
 800589c:	4628      	mov	r0, r5
 800589e:	f000 f911 	bl	8005ac4 <_fflush_r>
 80058a2:	b988      	cbnz	r0, 80058c8 <__swbuf_r+0x90>
 80058a4:	4638      	mov	r0, r7
 80058a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058a8:	4b0a      	ldr	r3, [pc, #40]	; (80058d4 <__swbuf_r+0x9c>)
 80058aa:	429c      	cmp	r4, r3
 80058ac:	d101      	bne.n	80058b2 <__swbuf_r+0x7a>
 80058ae:	68ac      	ldr	r4, [r5, #8]
 80058b0:	e7cf      	b.n	8005852 <__swbuf_r+0x1a>
 80058b2:	4b09      	ldr	r3, [pc, #36]	; (80058d8 <__swbuf_r+0xa0>)
 80058b4:	429c      	cmp	r4, r3
 80058b6:	bf08      	it	eq
 80058b8:	68ec      	ldreq	r4, [r5, #12]
 80058ba:	e7ca      	b.n	8005852 <__swbuf_r+0x1a>
 80058bc:	4621      	mov	r1, r4
 80058be:	4628      	mov	r0, r5
 80058c0:	f000 f80c 	bl	80058dc <__swsetup_r>
 80058c4:	2800      	cmp	r0, #0
 80058c6:	d0cb      	beq.n	8005860 <__swbuf_r+0x28>
 80058c8:	f04f 37ff 	mov.w	r7, #4294967295
 80058cc:	e7ea      	b.n	80058a4 <__swbuf_r+0x6c>
 80058ce:	bf00      	nop
 80058d0:	08006d28 	.word	0x08006d28
 80058d4:	08006d48 	.word	0x08006d48
 80058d8:	08006d08 	.word	0x08006d08

080058dc <__swsetup_r>:
 80058dc:	4b32      	ldr	r3, [pc, #200]	; (80059a8 <__swsetup_r+0xcc>)
 80058de:	b570      	push	{r4, r5, r6, lr}
 80058e0:	681d      	ldr	r5, [r3, #0]
 80058e2:	4606      	mov	r6, r0
 80058e4:	460c      	mov	r4, r1
 80058e6:	b125      	cbz	r5, 80058f2 <__swsetup_r+0x16>
 80058e8:	69ab      	ldr	r3, [r5, #24]
 80058ea:	b913      	cbnz	r3, 80058f2 <__swsetup_r+0x16>
 80058ec:	4628      	mov	r0, r5
 80058ee:	f000 f97d 	bl	8005bec <__sinit>
 80058f2:	4b2e      	ldr	r3, [pc, #184]	; (80059ac <__swsetup_r+0xd0>)
 80058f4:	429c      	cmp	r4, r3
 80058f6:	d10f      	bne.n	8005918 <__swsetup_r+0x3c>
 80058f8:	686c      	ldr	r4, [r5, #4]
 80058fa:	89a3      	ldrh	r3, [r4, #12]
 80058fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005900:	0719      	lsls	r1, r3, #28
 8005902:	d42c      	bmi.n	800595e <__swsetup_r+0x82>
 8005904:	06dd      	lsls	r5, r3, #27
 8005906:	d411      	bmi.n	800592c <__swsetup_r+0x50>
 8005908:	2309      	movs	r3, #9
 800590a:	6033      	str	r3, [r6, #0]
 800590c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005910:	81a3      	strh	r3, [r4, #12]
 8005912:	f04f 30ff 	mov.w	r0, #4294967295
 8005916:	e03e      	b.n	8005996 <__swsetup_r+0xba>
 8005918:	4b25      	ldr	r3, [pc, #148]	; (80059b0 <__swsetup_r+0xd4>)
 800591a:	429c      	cmp	r4, r3
 800591c:	d101      	bne.n	8005922 <__swsetup_r+0x46>
 800591e:	68ac      	ldr	r4, [r5, #8]
 8005920:	e7eb      	b.n	80058fa <__swsetup_r+0x1e>
 8005922:	4b24      	ldr	r3, [pc, #144]	; (80059b4 <__swsetup_r+0xd8>)
 8005924:	429c      	cmp	r4, r3
 8005926:	bf08      	it	eq
 8005928:	68ec      	ldreq	r4, [r5, #12]
 800592a:	e7e6      	b.n	80058fa <__swsetup_r+0x1e>
 800592c:	0758      	lsls	r0, r3, #29
 800592e:	d512      	bpl.n	8005956 <__swsetup_r+0x7a>
 8005930:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005932:	b141      	cbz	r1, 8005946 <__swsetup_r+0x6a>
 8005934:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005938:	4299      	cmp	r1, r3
 800593a:	d002      	beq.n	8005942 <__swsetup_r+0x66>
 800593c:	4630      	mov	r0, r6
 800593e:	f000 fa5b 	bl	8005df8 <_free_r>
 8005942:	2300      	movs	r3, #0
 8005944:	6363      	str	r3, [r4, #52]	; 0x34
 8005946:	89a3      	ldrh	r3, [r4, #12]
 8005948:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800594c:	81a3      	strh	r3, [r4, #12]
 800594e:	2300      	movs	r3, #0
 8005950:	6063      	str	r3, [r4, #4]
 8005952:	6923      	ldr	r3, [r4, #16]
 8005954:	6023      	str	r3, [r4, #0]
 8005956:	89a3      	ldrh	r3, [r4, #12]
 8005958:	f043 0308 	orr.w	r3, r3, #8
 800595c:	81a3      	strh	r3, [r4, #12]
 800595e:	6923      	ldr	r3, [r4, #16]
 8005960:	b94b      	cbnz	r3, 8005976 <__swsetup_r+0x9a>
 8005962:	89a3      	ldrh	r3, [r4, #12]
 8005964:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005968:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800596c:	d003      	beq.n	8005976 <__swsetup_r+0x9a>
 800596e:	4621      	mov	r1, r4
 8005970:	4630      	mov	r0, r6
 8005972:	f000 fa01 	bl	8005d78 <__smakebuf_r>
 8005976:	89a0      	ldrh	r0, [r4, #12]
 8005978:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800597c:	f010 0301 	ands.w	r3, r0, #1
 8005980:	d00a      	beq.n	8005998 <__swsetup_r+0xbc>
 8005982:	2300      	movs	r3, #0
 8005984:	60a3      	str	r3, [r4, #8]
 8005986:	6963      	ldr	r3, [r4, #20]
 8005988:	425b      	negs	r3, r3
 800598a:	61a3      	str	r3, [r4, #24]
 800598c:	6923      	ldr	r3, [r4, #16]
 800598e:	b943      	cbnz	r3, 80059a2 <__swsetup_r+0xc6>
 8005990:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005994:	d1ba      	bne.n	800590c <__swsetup_r+0x30>
 8005996:	bd70      	pop	{r4, r5, r6, pc}
 8005998:	0781      	lsls	r1, r0, #30
 800599a:	bf58      	it	pl
 800599c:	6963      	ldrpl	r3, [r4, #20]
 800599e:	60a3      	str	r3, [r4, #8]
 80059a0:	e7f4      	b.n	800598c <__swsetup_r+0xb0>
 80059a2:	2000      	movs	r0, #0
 80059a4:	e7f7      	b.n	8005996 <__swsetup_r+0xba>
 80059a6:	bf00      	nop
 80059a8:	20000014 	.word	0x20000014
 80059ac:	08006d28 	.word	0x08006d28
 80059b0:	08006d48 	.word	0x08006d48
 80059b4:	08006d08 	.word	0x08006d08

080059b8 <__sflush_r>:
 80059b8:	898a      	ldrh	r2, [r1, #12]
 80059ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059be:	4605      	mov	r5, r0
 80059c0:	0710      	lsls	r0, r2, #28
 80059c2:	460c      	mov	r4, r1
 80059c4:	d458      	bmi.n	8005a78 <__sflush_r+0xc0>
 80059c6:	684b      	ldr	r3, [r1, #4]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	dc05      	bgt.n	80059d8 <__sflush_r+0x20>
 80059cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	dc02      	bgt.n	80059d8 <__sflush_r+0x20>
 80059d2:	2000      	movs	r0, #0
 80059d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80059da:	2e00      	cmp	r6, #0
 80059dc:	d0f9      	beq.n	80059d2 <__sflush_r+0x1a>
 80059de:	2300      	movs	r3, #0
 80059e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80059e4:	682f      	ldr	r7, [r5, #0]
 80059e6:	602b      	str	r3, [r5, #0]
 80059e8:	d032      	beq.n	8005a50 <__sflush_r+0x98>
 80059ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80059ec:	89a3      	ldrh	r3, [r4, #12]
 80059ee:	075a      	lsls	r2, r3, #29
 80059f0:	d505      	bpl.n	80059fe <__sflush_r+0x46>
 80059f2:	6863      	ldr	r3, [r4, #4]
 80059f4:	1ac0      	subs	r0, r0, r3
 80059f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80059f8:	b10b      	cbz	r3, 80059fe <__sflush_r+0x46>
 80059fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80059fc:	1ac0      	subs	r0, r0, r3
 80059fe:	2300      	movs	r3, #0
 8005a00:	4602      	mov	r2, r0
 8005a02:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a04:	6a21      	ldr	r1, [r4, #32]
 8005a06:	4628      	mov	r0, r5
 8005a08:	47b0      	blx	r6
 8005a0a:	1c43      	adds	r3, r0, #1
 8005a0c:	89a3      	ldrh	r3, [r4, #12]
 8005a0e:	d106      	bne.n	8005a1e <__sflush_r+0x66>
 8005a10:	6829      	ldr	r1, [r5, #0]
 8005a12:	291d      	cmp	r1, #29
 8005a14:	d82c      	bhi.n	8005a70 <__sflush_r+0xb8>
 8005a16:	4a2a      	ldr	r2, [pc, #168]	; (8005ac0 <__sflush_r+0x108>)
 8005a18:	40ca      	lsrs	r2, r1
 8005a1a:	07d6      	lsls	r6, r2, #31
 8005a1c:	d528      	bpl.n	8005a70 <__sflush_r+0xb8>
 8005a1e:	2200      	movs	r2, #0
 8005a20:	6062      	str	r2, [r4, #4]
 8005a22:	04d9      	lsls	r1, r3, #19
 8005a24:	6922      	ldr	r2, [r4, #16]
 8005a26:	6022      	str	r2, [r4, #0]
 8005a28:	d504      	bpl.n	8005a34 <__sflush_r+0x7c>
 8005a2a:	1c42      	adds	r2, r0, #1
 8005a2c:	d101      	bne.n	8005a32 <__sflush_r+0x7a>
 8005a2e:	682b      	ldr	r3, [r5, #0]
 8005a30:	b903      	cbnz	r3, 8005a34 <__sflush_r+0x7c>
 8005a32:	6560      	str	r0, [r4, #84]	; 0x54
 8005a34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a36:	602f      	str	r7, [r5, #0]
 8005a38:	2900      	cmp	r1, #0
 8005a3a:	d0ca      	beq.n	80059d2 <__sflush_r+0x1a>
 8005a3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a40:	4299      	cmp	r1, r3
 8005a42:	d002      	beq.n	8005a4a <__sflush_r+0x92>
 8005a44:	4628      	mov	r0, r5
 8005a46:	f000 f9d7 	bl	8005df8 <_free_r>
 8005a4a:	2000      	movs	r0, #0
 8005a4c:	6360      	str	r0, [r4, #52]	; 0x34
 8005a4e:	e7c1      	b.n	80059d4 <__sflush_r+0x1c>
 8005a50:	6a21      	ldr	r1, [r4, #32]
 8005a52:	2301      	movs	r3, #1
 8005a54:	4628      	mov	r0, r5
 8005a56:	47b0      	blx	r6
 8005a58:	1c41      	adds	r1, r0, #1
 8005a5a:	d1c7      	bne.n	80059ec <__sflush_r+0x34>
 8005a5c:	682b      	ldr	r3, [r5, #0]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d0c4      	beq.n	80059ec <__sflush_r+0x34>
 8005a62:	2b1d      	cmp	r3, #29
 8005a64:	d001      	beq.n	8005a6a <__sflush_r+0xb2>
 8005a66:	2b16      	cmp	r3, #22
 8005a68:	d101      	bne.n	8005a6e <__sflush_r+0xb6>
 8005a6a:	602f      	str	r7, [r5, #0]
 8005a6c:	e7b1      	b.n	80059d2 <__sflush_r+0x1a>
 8005a6e:	89a3      	ldrh	r3, [r4, #12]
 8005a70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a74:	81a3      	strh	r3, [r4, #12]
 8005a76:	e7ad      	b.n	80059d4 <__sflush_r+0x1c>
 8005a78:	690f      	ldr	r7, [r1, #16]
 8005a7a:	2f00      	cmp	r7, #0
 8005a7c:	d0a9      	beq.n	80059d2 <__sflush_r+0x1a>
 8005a7e:	0793      	lsls	r3, r2, #30
 8005a80:	680e      	ldr	r6, [r1, #0]
 8005a82:	bf08      	it	eq
 8005a84:	694b      	ldreq	r3, [r1, #20]
 8005a86:	600f      	str	r7, [r1, #0]
 8005a88:	bf18      	it	ne
 8005a8a:	2300      	movne	r3, #0
 8005a8c:	eba6 0807 	sub.w	r8, r6, r7
 8005a90:	608b      	str	r3, [r1, #8]
 8005a92:	f1b8 0f00 	cmp.w	r8, #0
 8005a96:	dd9c      	ble.n	80059d2 <__sflush_r+0x1a>
 8005a98:	6a21      	ldr	r1, [r4, #32]
 8005a9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005a9c:	4643      	mov	r3, r8
 8005a9e:	463a      	mov	r2, r7
 8005aa0:	4628      	mov	r0, r5
 8005aa2:	47b0      	blx	r6
 8005aa4:	2800      	cmp	r0, #0
 8005aa6:	dc06      	bgt.n	8005ab6 <__sflush_r+0xfe>
 8005aa8:	89a3      	ldrh	r3, [r4, #12]
 8005aaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005aae:	81a3      	strh	r3, [r4, #12]
 8005ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ab4:	e78e      	b.n	80059d4 <__sflush_r+0x1c>
 8005ab6:	4407      	add	r7, r0
 8005ab8:	eba8 0800 	sub.w	r8, r8, r0
 8005abc:	e7e9      	b.n	8005a92 <__sflush_r+0xda>
 8005abe:	bf00      	nop
 8005ac0:	20400001 	.word	0x20400001

08005ac4 <_fflush_r>:
 8005ac4:	b538      	push	{r3, r4, r5, lr}
 8005ac6:	690b      	ldr	r3, [r1, #16]
 8005ac8:	4605      	mov	r5, r0
 8005aca:	460c      	mov	r4, r1
 8005acc:	b913      	cbnz	r3, 8005ad4 <_fflush_r+0x10>
 8005ace:	2500      	movs	r5, #0
 8005ad0:	4628      	mov	r0, r5
 8005ad2:	bd38      	pop	{r3, r4, r5, pc}
 8005ad4:	b118      	cbz	r0, 8005ade <_fflush_r+0x1a>
 8005ad6:	6983      	ldr	r3, [r0, #24]
 8005ad8:	b90b      	cbnz	r3, 8005ade <_fflush_r+0x1a>
 8005ada:	f000 f887 	bl	8005bec <__sinit>
 8005ade:	4b14      	ldr	r3, [pc, #80]	; (8005b30 <_fflush_r+0x6c>)
 8005ae0:	429c      	cmp	r4, r3
 8005ae2:	d11b      	bne.n	8005b1c <_fflush_r+0x58>
 8005ae4:	686c      	ldr	r4, [r5, #4]
 8005ae6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d0ef      	beq.n	8005ace <_fflush_r+0xa>
 8005aee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005af0:	07d0      	lsls	r0, r2, #31
 8005af2:	d404      	bmi.n	8005afe <_fflush_r+0x3a>
 8005af4:	0599      	lsls	r1, r3, #22
 8005af6:	d402      	bmi.n	8005afe <_fflush_r+0x3a>
 8005af8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005afa:	f000 f915 	bl	8005d28 <__retarget_lock_acquire_recursive>
 8005afe:	4628      	mov	r0, r5
 8005b00:	4621      	mov	r1, r4
 8005b02:	f7ff ff59 	bl	80059b8 <__sflush_r>
 8005b06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b08:	07da      	lsls	r2, r3, #31
 8005b0a:	4605      	mov	r5, r0
 8005b0c:	d4e0      	bmi.n	8005ad0 <_fflush_r+0xc>
 8005b0e:	89a3      	ldrh	r3, [r4, #12]
 8005b10:	059b      	lsls	r3, r3, #22
 8005b12:	d4dd      	bmi.n	8005ad0 <_fflush_r+0xc>
 8005b14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b16:	f000 f908 	bl	8005d2a <__retarget_lock_release_recursive>
 8005b1a:	e7d9      	b.n	8005ad0 <_fflush_r+0xc>
 8005b1c:	4b05      	ldr	r3, [pc, #20]	; (8005b34 <_fflush_r+0x70>)
 8005b1e:	429c      	cmp	r4, r3
 8005b20:	d101      	bne.n	8005b26 <_fflush_r+0x62>
 8005b22:	68ac      	ldr	r4, [r5, #8]
 8005b24:	e7df      	b.n	8005ae6 <_fflush_r+0x22>
 8005b26:	4b04      	ldr	r3, [pc, #16]	; (8005b38 <_fflush_r+0x74>)
 8005b28:	429c      	cmp	r4, r3
 8005b2a:	bf08      	it	eq
 8005b2c:	68ec      	ldreq	r4, [r5, #12]
 8005b2e:	e7da      	b.n	8005ae6 <_fflush_r+0x22>
 8005b30:	08006d28 	.word	0x08006d28
 8005b34:	08006d48 	.word	0x08006d48
 8005b38:	08006d08 	.word	0x08006d08

08005b3c <std>:
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	b510      	push	{r4, lr}
 8005b40:	4604      	mov	r4, r0
 8005b42:	e9c0 3300 	strd	r3, r3, [r0]
 8005b46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005b4a:	6083      	str	r3, [r0, #8]
 8005b4c:	8181      	strh	r1, [r0, #12]
 8005b4e:	6643      	str	r3, [r0, #100]	; 0x64
 8005b50:	81c2      	strh	r2, [r0, #14]
 8005b52:	6183      	str	r3, [r0, #24]
 8005b54:	4619      	mov	r1, r3
 8005b56:	2208      	movs	r2, #8
 8005b58:	305c      	adds	r0, #92	; 0x5c
 8005b5a:	f7ff fdb7 	bl	80056cc <memset>
 8005b5e:	4b05      	ldr	r3, [pc, #20]	; (8005b74 <std+0x38>)
 8005b60:	6263      	str	r3, [r4, #36]	; 0x24
 8005b62:	4b05      	ldr	r3, [pc, #20]	; (8005b78 <std+0x3c>)
 8005b64:	62a3      	str	r3, [r4, #40]	; 0x28
 8005b66:	4b05      	ldr	r3, [pc, #20]	; (8005b7c <std+0x40>)
 8005b68:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005b6a:	4b05      	ldr	r3, [pc, #20]	; (8005b80 <std+0x44>)
 8005b6c:	6224      	str	r4, [r4, #32]
 8005b6e:	6323      	str	r3, [r4, #48]	; 0x30
 8005b70:	bd10      	pop	{r4, pc}
 8005b72:	bf00      	nop
 8005b74:	0800686d 	.word	0x0800686d
 8005b78:	0800688f 	.word	0x0800688f
 8005b7c:	080068c7 	.word	0x080068c7
 8005b80:	080068eb 	.word	0x080068eb

08005b84 <_cleanup_r>:
 8005b84:	4901      	ldr	r1, [pc, #4]	; (8005b8c <_cleanup_r+0x8>)
 8005b86:	f000 b8af 	b.w	8005ce8 <_fwalk_reent>
 8005b8a:	bf00      	nop
 8005b8c:	08005ac5 	.word	0x08005ac5

08005b90 <__sfmoreglue>:
 8005b90:	b570      	push	{r4, r5, r6, lr}
 8005b92:	2268      	movs	r2, #104	; 0x68
 8005b94:	1e4d      	subs	r5, r1, #1
 8005b96:	4355      	muls	r5, r2
 8005b98:	460e      	mov	r6, r1
 8005b9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005b9e:	f000 f997 	bl	8005ed0 <_malloc_r>
 8005ba2:	4604      	mov	r4, r0
 8005ba4:	b140      	cbz	r0, 8005bb8 <__sfmoreglue+0x28>
 8005ba6:	2100      	movs	r1, #0
 8005ba8:	e9c0 1600 	strd	r1, r6, [r0]
 8005bac:	300c      	adds	r0, #12
 8005bae:	60a0      	str	r0, [r4, #8]
 8005bb0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005bb4:	f7ff fd8a 	bl	80056cc <memset>
 8005bb8:	4620      	mov	r0, r4
 8005bba:	bd70      	pop	{r4, r5, r6, pc}

08005bbc <__sfp_lock_acquire>:
 8005bbc:	4801      	ldr	r0, [pc, #4]	; (8005bc4 <__sfp_lock_acquire+0x8>)
 8005bbe:	f000 b8b3 	b.w	8005d28 <__retarget_lock_acquire_recursive>
 8005bc2:	bf00      	nop
 8005bc4:	20002e99 	.word	0x20002e99

08005bc8 <__sfp_lock_release>:
 8005bc8:	4801      	ldr	r0, [pc, #4]	; (8005bd0 <__sfp_lock_release+0x8>)
 8005bca:	f000 b8ae 	b.w	8005d2a <__retarget_lock_release_recursive>
 8005bce:	bf00      	nop
 8005bd0:	20002e99 	.word	0x20002e99

08005bd4 <__sinit_lock_acquire>:
 8005bd4:	4801      	ldr	r0, [pc, #4]	; (8005bdc <__sinit_lock_acquire+0x8>)
 8005bd6:	f000 b8a7 	b.w	8005d28 <__retarget_lock_acquire_recursive>
 8005bda:	bf00      	nop
 8005bdc:	20002e9a 	.word	0x20002e9a

08005be0 <__sinit_lock_release>:
 8005be0:	4801      	ldr	r0, [pc, #4]	; (8005be8 <__sinit_lock_release+0x8>)
 8005be2:	f000 b8a2 	b.w	8005d2a <__retarget_lock_release_recursive>
 8005be6:	bf00      	nop
 8005be8:	20002e9a 	.word	0x20002e9a

08005bec <__sinit>:
 8005bec:	b510      	push	{r4, lr}
 8005bee:	4604      	mov	r4, r0
 8005bf0:	f7ff fff0 	bl	8005bd4 <__sinit_lock_acquire>
 8005bf4:	69a3      	ldr	r3, [r4, #24]
 8005bf6:	b11b      	cbz	r3, 8005c00 <__sinit+0x14>
 8005bf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bfc:	f7ff bff0 	b.w	8005be0 <__sinit_lock_release>
 8005c00:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005c04:	6523      	str	r3, [r4, #80]	; 0x50
 8005c06:	4b13      	ldr	r3, [pc, #76]	; (8005c54 <__sinit+0x68>)
 8005c08:	4a13      	ldr	r2, [pc, #76]	; (8005c58 <__sinit+0x6c>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	62a2      	str	r2, [r4, #40]	; 0x28
 8005c0e:	42a3      	cmp	r3, r4
 8005c10:	bf04      	itt	eq
 8005c12:	2301      	moveq	r3, #1
 8005c14:	61a3      	streq	r3, [r4, #24]
 8005c16:	4620      	mov	r0, r4
 8005c18:	f000 f820 	bl	8005c5c <__sfp>
 8005c1c:	6060      	str	r0, [r4, #4]
 8005c1e:	4620      	mov	r0, r4
 8005c20:	f000 f81c 	bl	8005c5c <__sfp>
 8005c24:	60a0      	str	r0, [r4, #8]
 8005c26:	4620      	mov	r0, r4
 8005c28:	f000 f818 	bl	8005c5c <__sfp>
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	60e0      	str	r0, [r4, #12]
 8005c30:	2104      	movs	r1, #4
 8005c32:	6860      	ldr	r0, [r4, #4]
 8005c34:	f7ff ff82 	bl	8005b3c <std>
 8005c38:	68a0      	ldr	r0, [r4, #8]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	2109      	movs	r1, #9
 8005c3e:	f7ff ff7d 	bl	8005b3c <std>
 8005c42:	68e0      	ldr	r0, [r4, #12]
 8005c44:	2202      	movs	r2, #2
 8005c46:	2112      	movs	r1, #18
 8005c48:	f7ff ff78 	bl	8005b3c <std>
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	61a3      	str	r3, [r4, #24]
 8005c50:	e7d2      	b.n	8005bf8 <__sinit+0xc>
 8005c52:	bf00      	nop
 8005c54:	08006d04 	.word	0x08006d04
 8005c58:	08005b85 	.word	0x08005b85

08005c5c <__sfp>:
 8005c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c5e:	4607      	mov	r7, r0
 8005c60:	f7ff ffac 	bl	8005bbc <__sfp_lock_acquire>
 8005c64:	4b1e      	ldr	r3, [pc, #120]	; (8005ce0 <__sfp+0x84>)
 8005c66:	681e      	ldr	r6, [r3, #0]
 8005c68:	69b3      	ldr	r3, [r6, #24]
 8005c6a:	b913      	cbnz	r3, 8005c72 <__sfp+0x16>
 8005c6c:	4630      	mov	r0, r6
 8005c6e:	f7ff ffbd 	bl	8005bec <__sinit>
 8005c72:	3648      	adds	r6, #72	; 0x48
 8005c74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005c78:	3b01      	subs	r3, #1
 8005c7a:	d503      	bpl.n	8005c84 <__sfp+0x28>
 8005c7c:	6833      	ldr	r3, [r6, #0]
 8005c7e:	b30b      	cbz	r3, 8005cc4 <__sfp+0x68>
 8005c80:	6836      	ldr	r6, [r6, #0]
 8005c82:	e7f7      	b.n	8005c74 <__sfp+0x18>
 8005c84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005c88:	b9d5      	cbnz	r5, 8005cc0 <__sfp+0x64>
 8005c8a:	4b16      	ldr	r3, [pc, #88]	; (8005ce4 <__sfp+0x88>)
 8005c8c:	60e3      	str	r3, [r4, #12]
 8005c8e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005c92:	6665      	str	r5, [r4, #100]	; 0x64
 8005c94:	f000 f847 	bl	8005d26 <__retarget_lock_init_recursive>
 8005c98:	f7ff ff96 	bl	8005bc8 <__sfp_lock_release>
 8005c9c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005ca0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005ca4:	6025      	str	r5, [r4, #0]
 8005ca6:	61a5      	str	r5, [r4, #24]
 8005ca8:	2208      	movs	r2, #8
 8005caa:	4629      	mov	r1, r5
 8005cac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005cb0:	f7ff fd0c 	bl	80056cc <memset>
 8005cb4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005cb8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005cbc:	4620      	mov	r0, r4
 8005cbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cc0:	3468      	adds	r4, #104	; 0x68
 8005cc2:	e7d9      	b.n	8005c78 <__sfp+0x1c>
 8005cc4:	2104      	movs	r1, #4
 8005cc6:	4638      	mov	r0, r7
 8005cc8:	f7ff ff62 	bl	8005b90 <__sfmoreglue>
 8005ccc:	4604      	mov	r4, r0
 8005cce:	6030      	str	r0, [r6, #0]
 8005cd0:	2800      	cmp	r0, #0
 8005cd2:	d1d5      	bne.n	8005c80 <__sfp+0x24>
 8005cd4:	f7ff ff78 	bl	8005bc8 <__sfp_lock_release>
 8005cd8:	230c      	movs	r3, #12
 8005cda:	603b      	str	r3, [r7, #0]
 8005cdc:	e7ee      	b.n	8005cbc <__sfp+0x60>
 8005cde:	bf00      	nop
 8005ce0:	08006d04 	.word	0x08006d04
 8005ce4:	ffff0001 	.word	0xffff0001

08005ce8 <_fwalk_reent>:
 8005ce8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005cec:	4606      	mov	r6, r0
 8005cee:	4688      	mov	r8, r1
 8005cf0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005cf4:	2700      	movs	r7, #0
 8005cf6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005cfa:	f1b9 0901 	subs.w	r9, r9, #1
 8005cfe:	d505      	bpl.n	8005d0c <_fwalk_reent+0x24>
 8005d00:	6824      	ldr	r4, [r4, #0]
 8005d02:	2c00      	cmp	r4, #0
 8005d04:	d1f7      	bne.n	8005cf6 <_fwalk_reent+0xe>
 8005d06:	4638      	mov	r0, r7
 8005d08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d0c:	89ab      	ldrh	r3, [r5, #12]
 8005d0e:	2b01      	cmp	r3, #1
 8005d10:	d907      	bls.n	8005d22 <_fwalk_reent+0x3a>
 8005d12:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005d16:	3301      	adds	r3, #1
 8005d18:	d003      	beq.n	8005d22 <_fwalk_reent+0x3a>
 8005d1a:	4629      	mov	r1, r5
 8005d1c:	4630      	mov	r0, r6
 8005d1e:	47c0      	blx	r8
 8005d20:	4307      	orrs	r7, r0
 8005d22:	3568      	adds	r5, #104	; 0x68
 8005d24:	e7e9      	b.n	8005cfa <_fwalk_reent+0x12>

08005d26 <__retarget_lock_init_recursive>:
 8005d26:	4770      	bx	lr

08005d28 <__retarget_lock_acquire_recursive>:
 8005d28:	4770      	bx	lr

08005d2a <__retarget_lock_release_recursive>:
 8005d2a:	4770      	bx	lr

08005d2c <__swhatbuf_r>:
 8005d2c:	b570      	push	{r4, r5, r6, lr}
 8005d2e:	460e      	mov	r6, r1
 8005d30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d34:	2900      	cmp	r1, #0
 8005d36:	b096      	sub	sp, #88	; 0x58
 8005d38:	4614      	mov	r4, r2
 8005d3a:	461d      	mov	r5, r3
 8005d3c:	da08      	bge.n	8005d50 <__swhatbuf_r+0x24>
 8005d3e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005d42:	2200      	movs	r2, #0
 8005d44:	602a      	str	r2, [r5, #0]
 8005d46:	061a      	lsls	r2, r3, #24
 8005d48:	d410      	bmi.n	8005d6c <__swhatbuf_r+0x40>
 8005d4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d4e:	e00e      	b.n	8005d6e <__swhatbuf_r+0x42>
 8005d50:	466a      	mov	r2, sp
 8005d52:	f000 fdf1 	bl	8006938 <_fstat_r>
 8005d56:	2800      	cmp	r0, #0
 8005d58:	dbf1      	blt.n	8005d3e <__swhatbuf_r+0x12>
 8005d5a:	9a01      	ldr	r2, [sp, #4]
 8005d5c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005d60:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005d64:	425a      	negs	r2, r3
 8005d66:	415a      	adcs	r2, r3
 8005d68:	602a      	str	r2, [r5, #0]
 8005d6a:	e7ee      	b.n	8005d4a <__swhatbuf_r+0x1e>
 8005d6c:	2340      	movs	r3, #64	; 0x40
 8005d6e:	2000      	movs	r0, #0
 8005d70:	6023      	str	r3, [r4, #0]
 8005d72:	b016      	add	sp, #88	; 0x58
 8005d74:	bd70      	pop	{r4, r5, r6, pc}
	...

08005d78 <__smakebuf_r>:
 8005d78:	898b      	ldrh	r3, [r1, #12]
 8005d7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005d7c:	079d      	lsls	r5, r3, #30
 8005d7e:	4606      	mov	r6, r0
 8005d80:	460c      	mov	r4, r1
 8005d82:	d507      	bpl.n	8005d94 <__smakebuf_r+0x1c>
 8005d84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005d88:	6023      	str	r3, [r4, #0]
 8005d8a:	6123      	str	r3, [r4, #16]
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	6163      	str	r3, [r4, #20]
 8005d90:	b002      	add	sp, #8
 8005d92:	bd70      	pop	{r4, r5, r6, pc}
 8005d94:	ab01      	add	r3, sp, #4
 8005d96:	466a      	mov	r2, sp
 8005d98:	f7ff ffc8 	bl	8005d2c <__swhatbuf_r>
 8005d9c:	9900      	ldr	r1, [sp, #0]
 8005d9e:	4605      	mov	r5, r0
 8005da0:	4630      	mov	r0, r6
 8005da2:	f000 f895 	bl	8005ed0 <_malloc_r>
 8005da6:	b948      	cbnz	r0, 8005dbc <__smakebuf_r+0x44>
 8005da8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005dac:	059a      	lsls	r2, r3, #22
 8005dae:	d4ef      	bmi.n	8005d90 <__smakebuf_r+0x18>
 8005db0:	f023 0303 	bic.w	r3, r3, #3
 8005db4:	f043 0302 	orr.w	r3, r3, #2
 8005db8:	81a3      	strh	r3, [r4, #12]
 8005dba:	e7e3      	b.n	8005d84 <__smakebuf_r+0xc>
 8005dbc:	4b0d      	ldr	r3, [pc, #52]	; (8005df4 <__smakebuf_r+0x7c>)
 8005dbe:	62b3      	str	r3, [r6, #40]	; 0x28
 8005dc0:	89a3      	ldrh	r3, [r4, #12]
 8005dc2:	6020      	str	r0, [r4, #0]
 8005dc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dc8:	81a3      	strh	r3, [r4, #12]
 8005dca:	9b00      	ldr	r3, [sp, #0]
 8005dcc:	6163      	str	r3, [r4, #20]
 8005dce:	9b01      	ldr	r3, [sp, #4]
 8005dd0:	6120      	str	r0, [r4, #16]
 8005dd2:	b15b      	cbz	r3, 8005dec <__smakebuf_r+0x74>
 8005dd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005dd8:	4630      	mov	r0, r6
 8005dda:	f000 fdbf 	bl	800695c <_isatty_r>
 8005dde:	b128      	cbz	r0, 8005dec <__smakebuf_r+0x74>
 8005de0:	89a3      	ldrh	r3, [r4, #12]
 8005de2:	f023 0303 	bic.w	r3, r3, #3
 8005de6:	f043 0301 	orr.w	r3, r3, #1
 8005dea:	81a3      	strh	r3, [r4, #12]
 8005dec:	89a0      	ldrh	r0, [r4, #12]
 8005dee:	4305      	orrs	r5, r0
 8005df0:	81a5      	strh	r5, [r4, #12]
 8005df2:	e7cd      	b.n	8005d90 <__smakebuf_r+0x18>
 8005df4:	08005b85 	.word	0x08005b85

08005df8 <_free_r>:
 8005df8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005dfa:	2900      	cmp	r1, #0
 8005dfc:	d044      	beq.n	8005e88 <_free_r+0x90>
 8005dfe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e02:	9001      	str	r0, [sp, #4]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	f1a1 0404 	sub.w	r4, r1, #4
 8005e0a:	bfb8      	it	lt
 8005e0c:	18e4      	addlt	r4, r4, r3
 8005e0e:	f000 fdef 	bl	80069f0 <__malloc_lock>
 8005e12:	4a1e      	ldr	r2, [pc, #120]	; (8005e8c <_free_r+0x94>)
 8005e14:	9801      	ldr	r0, [sp, #4]
 8005e16:	6813      	ldr	r3, [r2, #0]
 8005e18:	b933      	cbnz	r3, 8005e28 <_free_r+0x30>
 8005e1a:	6063      	str	r3, [r4, #4]
 8005e1c:	6014      	str	r4, [r2, #0]
 8005e1e:	b003      	add	sp, #12
 8005e20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005e24:	f000 bdea 	b.w	80069fc <__malloc_unlock>
 8005e28:	42a3      	cmp	r3, r4
 8005e2a:	d908      	bls.n	8005e3e <_free_r+0x46>
 8005e2c:	6825      	ldr	r5, [r4, #0]
 8005e2e:	1961      	adds	r1, r4, r5
 8005e30:	428b      	cmp	r3, r1
 8005e32:	bf01      	itttt	eq
 8005e34:	6819      	ldreq	r1, [r3, #0]
 8005e36:	685b      	ldreq	r3, [r3, #4]
 8005e38:	1949      	addeq	r1, r1, r5
 8005e3a:	6021      	streq	r1, [r4, #0]
 8005e3c:	e7ed      	b.n	8005e1a <_free_r+0x22>
 8005e3e:	461a      	mov	r2, r3
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	b10b      	cbz	r3, 8005e48 <_free_r+0x50>
 8005e44:	42a3      	cmp	r3, r4
 8005e46:	d9fa      	bls.n	8005e3e <_free_r+0x46>
 8005e48:	6811      	ldr	r1, [r2, #0]
 8005e4a:	1855      	adds	r5, r2, r1
 8005e4c:	42a5      	cmp	r5, r4
 8005e4e:	d10b      	bne.n	8005e68 <_free_r+0x70>
 8005e50:	6824      	ldr	r4, [r4, #0]
 8005e52:	4421      	add	r1, r4
 8005e54:	1854      	adds	r4, r2, r1
 8005e56:	42a3      	cmp	r3, r4
 8005e58:	6011      	str	r1, [r2, #0]
 8005e5a:	d1e0      	bne.n	8005e1e <_free_r+0x26>
 8005e5c:	681c      	ldr	r4, [r3, #0]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	6053      	str	r3, [r2, #4]
 8005e62:	4421      	add	r1, r4
 8005e64:	6011      	str	r1, [r2, #0]
 8005e66:	e7da      	b.n	8005e1e <_free_r+0x26>
 8005e68:	d902      	bls.n	8005e70 <_free_r+0x78>
 8005e6a:	230c      	movs	r3, #12
 8005e6c:	6003      	str	r3, [r0, #0]
 8005e6e:	e7d6      	b.n	8005e1e <_free_r+0x26>
 8005e70:	6825      	ldr	r5, [r4, #0]
 8005e72:	1961      	adds	r1, r4, r5
 8005e74:	428b      	cmp	r3, r1
 8005e76:	bf04      	itt	eq
 8005e78:	6819      	ldreq	r1, [r3, #0]
 8005e7a:	685b      	ldreq	r3, [r3, #4]
 8005e7c:	6063      	str	r3, [r4, #4]
 8005e7e:	bf04      	itt	eq
 8005e80:	1949      	addeq	r1, r1, r5
 8005e82:	6021      	streq	r1, [r4, #0]
 8005e84:	6054      	str	r4, [r2, #4]
 8005e86:	e7ca      	b.n	8005e1e <_free_r+0x26>
 8005e88:	b003      	add	sp, #12
 8005e8a:	bd30      	pop	{r4, r5, pc}
 8005e8c:	20002e9c 	.word	0x20002e9c

08005e90 <sbrk_aligned>:
 8005e90:	b570      	push	{r4, r5, r6, lr}
 8005e92:	4e0e      	ldr	r6, [pc, #56]	; (8005ecc <sbrk_aligned+0x3c>)
 8005e94:	460c      	mov	r4, r1
 8005e96:	6831      	ldr	r1, [r6, #0]
 8005e98:	4605      	mov	r5, r0
 8005e9a:	b911      	cbnz	r1, 8005ea2 <sbrk_aligned+0x12>
 8005e9c:	f000 fcd6 	bl	800684c <_sbrk_r>
 8005ea0:	6030      	str	r0, [r6, #0]
 8005ea2:	4621      	mov	r1, r4
 8005ea4:	4628      	mov	r0, r5
 8005ea6:	f000 fcd1 	bl	800684c <_sbrk_r>
 8005eaa:	1c43      	adds	r3, r0, #1
 8005eac:	d00a      	beq.n	8005ec4 <sbrk_aligned+0x34>
 8005eae:	1cc4      	adds	r4, r0, #3
 8005eb0:	f024 0403 	bic.w	r4, r4, #3
 8005eb4:	42a0      	cmp	r0, r4
 8005eb6:	d007      	beq.n	8005ec8 <sbrk_aligned+0x38>
 8005eb8:	1a21      	subs	r1, r4, r0
 8005eba:	4628      	mov	r0, r5
 8005ebc:	f000 fcc6 	bl	800684c <_sbrk_r>
 8005ec0:	3001      	adds	r0, #1
 8005ec2:	d101      	bne.n	8005ec8 <sbrk_aligned+0x38>
 8005ec4:	f04f 34ff 	mov.w	r4, #4294967295
 8005ec8:	4620      	mov	r0, r4
 8005eca:	bd70      	pop	{r4, r5, r6, pc}
 8005ecc:	20002ea0 	.word	0x20002ea0

08005ed0 <_malloc_r>:
 8005ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ed4:	1ccd      	adds	r5, r1, #3
 8005ed6:	f025 0503 	bic.w	r5, r5, #3
 8005eda:	3508      	adds	r5, #8
 8005edc:	2d0c      	cmp	r5, #12
 8005ede:	bf38      	it	cc
 8005ee0:	250c      	movcc	r5, #12
 8005ee2:	2d00      	cmp	r5, #0
 8005ee4:	4607      	mov	r7, r0
 8005ee6:	db01      	blt.n	8005eec <_malloc_r+0x1c>
 8005ee8:	42a9      	cmp	r1, r5
 8005eea:	d905      	bls.n	8005ef8 <_malloc_r+0x28>
 8005eec:	230c      	movs	r3, #12
 8005eee:	603b      	str	r3, [r7, #0]
 8005ef0:	2600      	movs	r6, #0
 8005ef2:	4630      	mov	r0, r6
 8005ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ef8:	4e2e      	ldr	r6, [pc, #184]	; (8005fb4 <_malloc_r+0xe4>)
 8005efa:	f000 fd79 	bl	80069f0 <__malloc_lock>
 8005efe:	6833      	ldr	r3, [r6, #0]
 8005f00:	461c      	mov	r4, r3
 8005f02:	bb34      	cbnz	r4, 8005f52 <_malloc_r+0x82>
 8005f04:	4629      	mov	r1, r5
 8005f06:	4638      	mov	r0, r7
 8005f08:	f7ff ffc2 	bl	8005e90 <sbrk_aligned>
 8005f0c:	1c43      	adds	r3, r0, #1
 8005f0e:	4604      	mov	r4, r0
 8005f10:	d14d      	bne.n	8005fae <_malloc_r+0xde>
 8005f12:	6834      	ldr	r4, [r6, #0]
 8005f14:	4626      	mov	r6, r4
 8005f16:	2e00      	cmp	r6, #0
 8005f18:	d140      	bne.n	8005f9c <_malloc_r+0xcc>
 8005f1a:	6823      	ldr	r3, [r4, #0]
 8005f1c:	4631      	mov	r1, r6
 8005f1e:	4638      	mov	r0, r7
 8005f20:	eb04 0803 	add.w	r8, r4, r3
 8005f24:	f000 fc92 	bl	800684c <_sbrk_r>
 8005f28:	4580      	cmp	r8, r0
 8005f2a:	d13a      	bne.n	8005fa2 <_malloc_r+0xd2>
 8005f2c:	6821      	ldr	r1, [r4, #0]
 8005f2e:	3503      	adds	r5, #3
 8005f30:	1a6d      	subs	r5, r5, r1
 8005f32:	f025 0503 	bic.w	r5, r5, #3
 8005f36:	3508      	adds	r5, #8
 8005f38:	2d0c      	cmp	r5, #12
 8005f3a:	bf38      	it	cc
 8005f3c:	250c      	movcc	r5, #12
 8005f3e:	4629      	mov	r1, r5
 8005f40:	4638      	mov	r0, r7
 8005f42:	f7ff ffa5 	bl	8005e90 <sbrk_aligned>
 8005f46:	3001      	adds	r0, #1
 8005f48:	d02b      	beq.n	8005fa2 <_malloc_r+0xd2>
 8005f4a:	6823      	ldr	r3, [r4, #0]
 8005f4c:	442b      	add	r3, r5
 8005f4e:	6023      	str	r3, [r4, #0]
 8005f50:	e00e      	b.n	8005f70 <_malloc_r+0xa0>
 8005f52:	6822      	ldr	r2, [r4, #0]
 8005f54:	1b52      	subs	r2, r2, r5
 8005f56:	d41e      	bmi.n	8005f96 <_malloc_r+0xc6>
 8005f58:	2a0b      	cmp	r2, #11
 8005f5a:	d916      	bls.n	8005f8a <_malloc_r+0xba>
 8005f5c:	1961      	adds	r1, r4, r5
 8005f5e:	42a3      	cmp	r3, r4
 8005f60:	6025      	str	r5, [r4, #0]
 8005f62:	bf18      	it	ne
 8005f64:	6059      	strne	r1, [r3, #4]
 8005f66:	6863      	ldr	r3, [r4, #4]
 8005f68:	bf08      	it	eq
 8005f6a:	6031      	streq	r1, [r6, #0]
 8005f6c:	5162      	str	r2, [r4, r5]
 8005f6e:	604b      	str	r3, [r1, #4]
 8005f70:	4638      	mov	r0, r7
 8005f72:	f104 060b 	add.w	r6, r4, #11
 8005f76:	f000 fd41 	bl	80069fc <__malloc_unlock>
 8005f7a:	f026 0607 	bic.w	r6, r6, #7
 8005f7e:	1d23      	adds	r3, r4, #4
 8005f80:	1af2      	subs	r2, r6, r3
 8005f82:	d0b6      	beq.n	8005ef2 <_malloc_r+0x22>
 8005f84:	1b9b      	subs	r3, r3, r6
 8005f86:	50a3      	str	r3, [r4, r2]
 8005f88:	e7b3      	b.n	8005ef2 <_malloc_r+0x22>
 8005f8a:	6862      	ldr	r2, [r4, #4]
 8005f8c:	42a3      	cmp	r3, r4
 8005f8e:	bf0c      	ite	eq
 8005f90:	6032      	streq	r2, [r6, #0]
 8005f92:	605a      	strne	r2, [r3, #4]
 8005f94:	e7ec      	b.n	8005f70 <_malloc_r+0xa0>
 8005f96:	4623      	mov	r3, r4
 8005f98:	6864      	ldr	r4, [r4, #4]
 8005f9a:	e7b2      	b.n	8005f02 <_malloc_r+0x32>
 8005f9c:	4634      	mov	r4, r6
 8005f9e:	6876      	ldr	r6, [r6, #4]
 8005fa0:	e7b9      	b.n	8005f16 <_malloc_r+0x46>
 8005fa2:	230c      	movs	r3, #12
 8005fa4:	603b      	str	r3, [r7, #0]
 8005fa6:	4638      	mov	r0, r7
 8005fa8:	f000 fd28 	bl	80069fc <__malloc_unlock>
 8005fac:	e7a1      	b.n	8005ef2 <_malloc_r+0x22>
 8005fae:	6025      	str	r5, [r4, #0]
 8005fb0:	e7de      	b.n	8005f70 <_malloc_r+0xa0>
 8005fb2:	bf00      	nop
 8005fb4:	20002e9c 	.word	0x20002e9c

08005fb8 <__ssputs_r>:
 8005fb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fbc:	688e      	ldr	r6, [r1, #8]
 8005fbe:	429e      	cmp	r6, r3
 8005fc0:	4682      	mov	sl, r0
 8005fc2:	460c      	mov	r4, r1
 8005fc4:	4690      	mov	r8, r2
 8005fc6:	461f      	mov	r7, r3
 8005fc8:	d838      	bhi.n	800603c <__ssputs_r+0x84>
 8005fca:	898a      	ldrh	r2, [r1, #12]
 8005fcc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005fd0:	d032      	beq.n	8006038 <__ssputs_r+0x80>
 8005fd2:	6825      	ldr	r5, [r4, #0]
 8005fd4:	6909      	ldr	r1, [r1, #16]
 8005fd6:	eba5 0901 	sub.w	r9, r5, r1
 8005fda:	6965      	ldr	r5, [r4, #20]
 8005fdc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005fe0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005fe4:	3301      	adds	r3, #1
 8005fe6:	444b      	add	r3, r9
 8005fe8:	106d      	asrs	r5, r5, #1
 8005fea:	429d      	cmp	r5, r3
 8005fec:	bf38      	it	cc
 8005fee:	461d      	movcc	r5, r3
 8005ff0:	0553      	lsls	r3, r2, #21
 8005ff2:	d531      	bpl.n	8006058 <__ssputs_r+0xa0>
 8005ff4:	4629      	mov	r1, r5
 8005ff6:	f7ff ff6b 	bl	8005ed0 <_malloc_r>
 8005ffa:	4606      	mov	r6, r0
 8005ffc:	b950      	cbnz	r0, 8006014 <__ssputs_r+0x5c>
 8005ffe:	230c      	movs	r3, #12
 8006000:	f8ca 3000 	str.w	r3, [sl]
 8006004:	89a3      	ldrh	r3, [r4, #12]
 8006006:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800600a:	81a3      	strh	r3, [r4, #12]
 800600c:	f04f 30ff 	mov.w	r0, #4294967295
 8006010:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006014:	6921      	ldr	r1, [r4, #16]
 8006016:	464a      	mov	r2, r9
 8006018:	f000 fcc2 	bl	80069a0 <memcpy>
 800601c:	89a3      	ldrh	r3, [r4, #12]
 800601e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006022:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006026:	81a3      	strh	r3, [r4, #12]
 8006028:	6126      	str	r6, [r4, #16]
 800602a:	6165      	str	r5, [r4, #20]
 800602c:	444e      	add	r6, r9
 800602e:	eba5 0509 	sub.w	r5, r5, r9
 8006032:	6026      	str	r6, [r4, #0]
 8006034:	60a5      	str	r5, [r4, #8]
 8006036:	463e      	mov	r6, r7
 8006038:	42be      	cmp	r6, r7
 800603a:	d900      	bls.n	800603e <__ssputs_r+0x86>
 800603c:	463e      	mov	r6, r7
 800603e:	6820      	ldr	r0, [r4, #0]
 8006040:	4632      	mov	r2, r6
 8006042:	4641      	mov	r1, r8
 8006044:	f000 fcba 	bl	80069bc <memmove>
 8006048:	68a3      	ldr	r3, [r4, #8]
 800604a:	1b9b      	subs	r3, r3, r6
 800604c:	60a3      	str	r3, [r4, #8]
 800604e:	6823      	ldr	r3, [r4, #0]
 8006050:	4433      	add	r3, r6
 8006052:	6023      	str	r3, [r4, #0]
 8006054:	2000      	movs	r0, #0
 8006056:	e7db      	b.n	8006010 <__ssputs_r+0x58>
 8006058:	462a      	mov	r2, r5
 800605a:	f000 fcd5 	bl	8006a08 <_realloc_r>
 800605e:	4606      	mov	r6, r0
 8006060:	2800      	cmp	r0, #0
 8006062:	d1e1      	bne.n	8006028 <__ssputs_r+0x70>
 8006064:	6921      	ldr	r1, [r4, #16]
 8006066:	4650      	mov	r0, sl
 8006068:	f7ff fec6 	bl	8005df8 <_free_r>
 800606c:	e7c7      	b.n	8005ffe <__ssputs_r+0x46>
	...

08006070 <_svfiprintf_r>:
 8006070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006074:	4698      	mov	r8, r3
 8006076:	898b      	ldrh	r3, [r1, #12]
 8006078:	061b      	lsls	r3, r3, #24
 800607a:	b09d      	sub	sp, #116	; 0x74
 800607c:	4607      	mov	r7, r0
 800607e:	460d      	mov	r5, r1
 8006080:	4614      	mov	r4, r2
 8006082:	d50e      	bpl.n	80060a2 <_svfiprintf_r+0x32>
 8006084:	690b      	ldr	r3, [r1, #16]
 8006086:	b963      	cbnz	r3, 80060a2 <_svfiprintf_r+0x32>
 8006088:	2140      	movs	r1, #64	; 0x40
 800608a:	f7ff ff21 	bl	8005ed0 <_malloc_r>
 800608e:	6028      	str	r0, [r5, #0]
 8006090:	6128      	str	r0, [r5, #16]
 8006092:	b920      	cbnz	r0, 800609e <_svfiprintf_r+0x2e>
 8006094:	230c      	movs	r3, #12
 8006096:	603b      	str	r3, [r7, #0]
 8006098:	f04f 30ff 	mov.w	r0, #4294967295
 800609c:	e0d1      	b.n	8006242 <_svfiprintf_r+0x1d2>
 800609e:	2340      	movs	r3, #64	; 0x40
 80060a0:	616b      	str	r3, [r5, #20]
 80060a2:	2300      	movs	r3, #0
 80060a4:	9309      	str	r3, [sp, #36]	; 0x24
 80060a6:	2320      	movs	r3, #32
 80060a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80060ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80060b0:	2330      	movs	r3, #48	; 0x30
 80060b2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800625c <_svfiprintf_r+0x1ec>
 80060b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80060ba:	f04f 0901 	mov.w	r9, #1
 80060be:	4623      	mov	r3, r4
 80060c0:	469a      	mov	sl, r3
 80060c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060c6:	b10a      	cbz	r2, 80060cc <_svfiprintf_r+0x5c>
 80060c8:	2a25      	cmp	r2, #37	; 0x25
 80060ca:	d1f9      	bne.n	80060c0 <_svfiprintf_r+0x50>
 80060cc:	ebba 0b04 	subs.w	fp, sl, r4
 80060d0:	d00b      	beq.n	80060ea <_svfiprintf_r+0x7a>
 80060d2:	465b      	mov	r3, fp
 80060d4:	4622      	mov	r2, r4
 80060d6:	4629      	mov	r1, r5
 80060d8:	4638      	mov	r0, r7
 80060da:	f7ff ff6d 	bl	8005fb8 <__ssputs_r>
 80060de:	3001      	adds	r0, #1
 80060e0:	f000 80aa 	beq.w	8006238 <_svfiprintf_r+0x1c8>
 80060e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060e6:	445a      	add	r2, fp
 80060e8:	9209      	str	r2, [sp, #36]	; 0x24
 80060ea:	f89a 3000 	ldrb.w	r3, [sl]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	f000 80a2 	beq.w	8006238 <_svfiprintf_r+0x1c8>
 80060f4:	2300      	movs	r3, #0
 80060f6:	f04f 32ff 	mov.w	r2, #4294967295
 80060fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80060fe:	f10a 0a01 	add.w	sl, sl, #1
 8006102:	9304      	str	r3, [sp, #16]
 8006104:	9307      	str	r3, [sp, #28]
 8006106:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800610a:	931a      	str	r3, [sp, #104]	; 0x68
 800610c:	4654      	mov	r4, sl
 800610e:	2205      	movs	r2, #5
 8006110:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006114:	4851      	ldr	r0, [pc, #324]	; (800625c <_svfiprintf_r+0x1ec>)
 8006116:	f7fa f863 	bl	80001e0 <memchr>
 800611a:	9a04      	ldr	r2, [sp, #16]
 800611c:	b9d8      	cbnz	r0, 8006156 <_svfiprintf_r+0xe6>
 800611e:	06d0      	lsls	r0, r2, #27
 8006120:	bf44      	itt	mi
 8006122:	2320      	movmi	r3, #32
 8006124:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006128:	0711      	lsls	r1, r2, #28
 800612a:	bf44      	itt	mi
 800612c:	232b      	movmi	r3, #43	; 0x2b
 800612e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006132:	f89a 3000 	ldrb.w	r3, [sl]
 8006136:	2b2a      	cmp	r3, #42	; 0x2a
 8006138:	d015      	beq.n	8006166 <_svfiprintf_r+0xf6>
 800613a:	9a07      	ldr	r2, [sp, #28]
 800613c:	4654      	mov	r4, sl
 800613e:	2000      	movs	r0, #0
 8006140:	f04f 0c0a 	mov.w	ip, #10
 8006144:	4621      	mov	r1, r4
 8006146:	f811 3b01 	ldrb.w	r3, [r1], #1
 800614a:	3b30      	subs	r3, #48	; 0x30
 800614c:	2b09      	cmp	r3, #9
 800614e:	d94e      	bls.n	80061ee <_svfiprintf_r+0x17e>
 8006150:	b1b0      	cbz	r0, 8006180 <_svfiprintf_r+0x110>
 8006152:	9207      	str	r2, [sp, #28]
 8006154:	e014      	b.n	8006180 <_svfiprintf_r+0x110>
 8006156:	eba0 0308 	sub.w	r3, r0, r8
 800615a:	fa09 f303 	lsl.w	r3, r9, r3
 800615e:	4313      	orrs	r3, r2
 8006160:	9304      	str	r3, [sp, #16]
 8006162:	46a2      	mov	sl, r4
 8006164:	e7d2      	b.n	800610c <_svfiprintf_r+0x9c>
 8006166:	9b03      	ldr	r3, [sp, #12]
 8006168:	1d19      	adds	r1, r3, #4
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	9103      	str	r1, [sp, #12]
 800616e:	2b00      	cmp	r3, #0
 8006170:	bfbb      	ittet	lt
 8006172:	425b      	neglt	r3, r3
 8006174:	f042 0202 	orrlt.w	r2, r2, #2
 8006178:	9307      	strge	r3, [sp, #28]
 800617a:	9307      	strlt	r3, [sp, #28]
 800617c:	bfb8      	it	lt
 800617e:	9204      	strlt	r2, [sp, #16]
 8006180:	7823      	ldrb	r3, [r4, #0]
 8006182:	2b2e      	cmp	r3, #46	; 0x2e
 8006184:	d10c      	bne.n	80061a0 <_svfiprintf_r+0x130>
 8006186:	7863      	ldrb	r3, [r4, #1]
 8006188:	2b2a      	cmp	r3, #42	; 0x2a
 800618a:	d135      	bne.n	80061f8 <_svfiprintf_r+0x188>
 800618c:	9b03      	ldr	r3, [sp, #12]
 800618e:	1d1a      	adds	r2, r3, #4
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	9203      	str	r2, [sp, #12]
 8006194:	2b00      	cmp	r3, #0
 8006196:	bfb8      	it	lt
 8006198:	f04f 33ff 	movlt.w	r3, #4294967295
 800619c:	3402      	adds	r4, #2
 800619e:	9305      	str	r3, [sp, #20]
 80061a0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800626c <_svfiprintf_r+0x1fc>
 80061a4:	7821      	ldrb	r1, [r4, #0]
 80061a6:	2203      	movs	r2, #3
 80061a8:	4650      	mov	r0, sl
 80061aa:	f7fa f819 	bl	80001e0 <memchr>
 80061ae:	b140      	cbz	r0, 80061c2 <_svfiprintf_r+0x152>
 80061b0:	2340      	movs	r3, #64	; 0x40
 80061b2:	eba0 000a 	sub.w	r0, r0, sl
 80061b6:	fa03 f000 	lsl.w	r0, r3, r0
 80061ba:	9b04      	ldr	r3, [sp, #16]
 80061bc:	4303      	orrs	r3, r0
 80061be:	3401      	adds	r4, #1
 80061c0:	9304      	str	r3, [sp, #16]
 80061c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061c6:	4826      	ldr	r0, [pc, #152]	; (8006260 <_svfiprintf_r+0x1f0>)
 80061c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80061cc:	2206      	movs	r2, #6
 80061ce:	f7fa f807 	bl	80001e0 <memchr>
 80061d2:	2800      	cmp	r0, #0
 80061d4:	d038      	beq.n	8006248 <_svfiprintf_r+0x1d8>
 80061d6:	4b23      	ldr	r3, [pc, #140]	; (8006264 <_svfiprintf_r+0x1f4>)
 80061d8:	bb1b      	cbnz	r3, 8006222 <_svfiprintf_r+0x1b2>
 80061da:	9b03      	ldr	r3, [sp, #12]
 80061dc:	3307      	adds	r3, #7
 80061de:	f023 0307 	bic.w	r3, r3, #7
 80061e2:	3308      	adds	r3, #8
 80061e4:	9303      	str	r3, [sp, #12]
 80061e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061e8:	4433      	add	r3, r6
 80061ea:	9309      	str	r3, [sp, #36]	; 0x24
 80061ec:	e767      	b.n	80060be <_svfiprintf_r+0x4e>
 80061ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80061f2:	460c      	mov	r4, r1
 80061f4:	2001      	movs	r0, #1
 80061f6:	e7a5      	b.n	8006144 <_svfiprintf_r+0xd4>
 80061f8:	2300      	movs	r3, #0
 80061fa:	3401      	adds	r4, #1
 80061fc:	9305      	str	r3, [sp, #20]
 80061fe:	4619      	mov	r1, r3
 8006200:	f04f 0c0a 	mov.w	ip, #10
 8006204:	4620      	mov	r0, r4
 8006206:	f810 2b01 	ldrb.w	r2, [r0], #1
 800620a:	3a30      	subs	r2, #48	; 0x30
 800620c:	2a09      	cmp	r2, #9
 800620e:	d903      	bls.n	8006218 <_svfiprintf_r+0x1a8>
 8006210:	2b00      	cmp	r3, #0
 8006212:	d0c5      	beq.n	80061a0 <_svfiprintf_r+0x130>
 8006214:	9105      	str	r1, [sp, #20]
 8006216:	e7c3      	b.n	80061a0 <_svfiprintf_r+0x130>
 8006218:	fb0c 2101 	mla	r1, ip, r1, r2
 800621c:	4604      	mov	r4, r0
 800621e:	2301      	movs	r3, #1
 8006220:	e7f0      	b.n	8006204 <_svfiprintf_r+0x194>
 8006222:	ab03      	add	r3, sp, #12
 8006224:	9300      	str	r3, [sp, #0]
 8006226:	462a      	mov	r2, r5
 8006228:	4b0f      	ldr	r3, [pc, #60]	; (8006268 <_svfiprintf_r+0x1f8>)
 800622a:	a904      	add	r1, sp, #16
 800622c:	4638      	mov	r0, r7
 800622e:	f3af 8000 	nop.w
 8006232:	1c42      	adds	r2, r0, #1
 8006234:	4606      	mov	r6, r0
 8006236:	d1d6      	bne.n	80061e6 <_svfiprintf_r+0x176>
 8006238:	89ab      	ldrh	r3, [r5, #12]
 800623a:	065b      	lsls	r3, r3, #25
 800623c:	f53f af2c 	bmi.w	8006098 <_svfiprintf_r+0x28>
 8006240:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006242:	b01d      	add	sp, #116	; 0x74
 8006244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006248:	ab03      	add	r3, sp, #12
 800624a:	9300      	str	r3, [sp, #0]
 800624c:	462a      	mov	r2, r5
 800624e:	4b06      	ldr	r3, [pc, #24]	; (8006268 <_svfiprintf_r+0x1f8>)
 8006250:	a904      	add	r1, sp, #16
 8006252:	4638      	mov	r0, r7
 8006254:	f000 f9d4 	bl	8006600 <_printf_i>
 8006258:	e7eb      	b.n	8006232 <_svfiprintf_r+0x1c2>
 800625a:	bf00      	nop
 800625c:	08006d68 	.word	0x08006d68
 8006260:	08006d72 	.word	0x08006d72
 8006264:	00000000 	.word	0x00000000
 8006268:	08005fb9 	.word	0x08005fb9
 800626c:	08006d6e 	.word	0x08006d6e

08006270 <__sfputc_r>:
 8006270:	6893      	ldr	r3, [r2, #8]
 8006272:	3b01      	subs	r3, #1
 8006274:	2b00      	cmp	r3, #0
 8006276:	b410      	push	{r4}
 8006278:	6093      	str	r3, [r2, #8]
 800627a:	da08      	bge.n	800628e <__sfputc_r+0x1e>
 800627c:	6994      	ldr	r4, [r2, #24]
 800627e:	42a3      	cmp	r3, r4
 8006280:	db01      	blt.n	8006286 <__sfputc_r+0x16>
 8006282:	290a      	cmp	r1, #10
 8006284:	d103      	bne.n	800628e <__sfputc_r+0x1e>
 8006286:	f85d 4b04 	ldr.w	r4, [sp], #4
 800628a:	f7ff bad5 	b.w	8005838 <__swbuf_r>
 800628e:	6813      	ldr	r3, [r2, #0]
 8006290:	1c58      	adds	r0, r3, #1
 8006292:	6010      	str	r0, [r2, #0]
 8006294:	7019      	strb	r1, [r3, #0]
 8006296:	4608      	mov	r0, r1
 8006298:	f85d 4b04 	ldr.w	r4, [sp], #4
 800629c:	4770      	bx	lr

0800629e <__sfputs_r>:
 800629e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062a0:	4606      	mov	r6, r0
 80062a2:	460f      	mov	r7, r1
 80062a4:	4614      	mov	r4, r2
 80062a6:	18d5      	adds	r5, r2, r3
 80062a8:	42ac      	cmp	r4, r5
 80062aa:	d101      	bne.n	80062b0 <__sfputs_r+0x12>
 80062ac:	2000      	movs	r0, #0
 80062ae:	e007      	b.n	80062c0 <__sfputs_r+0x22>
 80062b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062b4:	463a      	mov	r2, r7
 80062b6:	4630      	mov	r0, r6
 80062b8:	f7ff ffda 	bl	8006270 <__sfputc_r>
 80062bc:	1c43      	adds	r3, r0, #1
 80062be:	d1f3      	bne.n	80062a8 <__sfputs_r+0xa>
 80062c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080062c4 <_vfiprintf_r>:
 80062c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062c8:	460d      	mov	r5, r1
 80062ca:	b09d      	sub	sp, #116	; 0x74
 80062cc:	4614      	mov	r4, r2
 80062ce:	4698      	mov	r8, r3
 80062d0:	4606      	mov	r6, r0
 80062d2:	b118      	cbz	r0, 80062dc <_vfiprintf_r+0x18>
 80062d4:	6983      	ldr	r3, [r0, #24]
 80062d6:	b90b      	cbnz	r3, 80062dc <_vfiprintf_r+0x18>
 80062d8:	f7ff fc88 	bl	8005bec <__sinit>
 80062dc:	4b89      	ldr	r3, [pc, #548]	; (8006504 <_vfiprintf_r+0x240>)
 80062de:	429d      	cmp	r5, r3
 80062e0:	d11b      	bne.n	800631a <_vfiprintf_r+0x56>
 80062e2:	6875      	ldr	r5, [r6, #4]
 80062e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80062e6:	07d9      	lsls	r1, r3, #31
 80062e8:	d405      	bmi.n	80062f6 <_vfiprintf_r+0x32>
 80062ea:	89ab      	ldrh	r3, [r5, #12]
 80062ec:	059a      	lsls	r2, r3, #22
 80062ee:	d402      	bmi.n	80062f6 <_vfiprintf_r+0x32>
 80062f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80062f2:	f7ff fd19 	bl	8005d28 <__retarget_lock_acquire_recursive>
 80062f6:	89ab      	ldrh	r3, [r5, #12]
 80062f8:	071b      	lsls	r3, r3, #28
 80062fa:	d501      	bpl.n	8006300 <_vfiprintf_r+0x3c>
 80062fc:	692b      	ldr	r3, [r5, #16]
 80062fe:	b9eb      	cbnz	r3, 800633c <_vfiprintf_r+0x78>
 8006300:	4629      	mov	r1, r5
 8006302:	4630      	mov	r0, r6
 8006304:	f7ff faea 	bl	80058dc <__swsetup_r>
 8006308:	b1c0      	cbz	r0, 800633c <_vfiprintf_r+0x78>
 800630a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800630c:	07dc      	lsls	r4, r3, #31
 800630e:	d50e      	bpl.n	800632e <_vfiprintf_r+0x6a>
 8006310:	f04f 30ff 	mov.w	r0, #4294967295
 8006314:	b01d      	add	sp, #116	; 0x74
 8006316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800631a:	4b7b      	ldr	r3, [pc, #492]	; (8006508 <_vfiprintf_r+0x244>)
 800631c:	429d      	cmp	r5, r3
 800631e:	d101      	bne.n	8006324 <_vfiprintf_r+0x60>
 8006320:	68b5      	ldr	r5, [r6, #8]
 8006322:	e7df      	b.n	80062e4 <_vfiprintf_r+0x20>
 8006324:	4b79      	ldr	r3, [pc, #484]	; (800650c <_vfiprintf_r+0x248>)
 8006326:	429d      	cmp	r5, r3
 8006328:	bf08      	it	eq
 800632a:	68f5      	ldreq	r5, [r6, #12]
 800632c:	e7da      	b.n	80062e4 <_vfiprintf_r+0x20>
 800632e:	89ab      	ldrh	r3, [r5, #12]
 8006330:	0598      	lsls	r0, r3, #22
 8006332:	d4ed      	bmi.n	8006310 <_vfiprintf_r+0x4c>
 8006334:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006336:	f7ff fcf8 	bl	8005d2a <__retarget_lock_release_recursive>
 800633a:	e7e9      	b.n	8006310 <_vfiprintf_r+0x4c>
 800633c:	2300      	movs	r3, #0
 800633e:	9309      	str	r3, [sp, #36]	; 0x24
 8006340:	2320      	movs	r3, #32
 8006342:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006346:	f8cd 800c 	str.w	r8, [sp, #12]
 800634a:	2330      	movs	r3, #48	; 0x30
 800634c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006510 <_vfiprintf_r+0x24c>
 8006350:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006354:	f04f 0901 	mov.w	r9, #1
 8006358:	4623      	mov	r3, r4
 800635a:	469a      	mov	sl, r3
 800635c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006360:	b10a      	cbz	r2, 8006366 <_vfiprintf_r+0xa2>
 8006362:	2a25      	cmp	r2, #37	; 0x25
 8006364:	d1f9      	bne.n	800635a <_vfiprintf_r+0x96>
 8006366:	ebba 0b04 	subs.w	fp, sl, r4
 800636a:	d00b      	beq.n	8006384 <_vfiprintf_r+0xc0>
 800636c:	465b      	mov	r3, fp
 800636e:	4622      	mov	r2, r4
 8006370:	4629      	mov	r1, r5
 8006372:	4630      	mov	r0, r6
 8006374:	f7ff ff93 	bl	800629e <__sfputs_r>
 8006378:	3001      	adds	r0, #1
 800637a:	f000 80aa 	beq.w	80064d2 <_vfiprintf_r+0x20e>
 800637e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006380:	445a      	add	r2, fp
 8006382:	9209      	str	r2, [sp, #36]	; 0x24
 8006384:	f89a 3000 	ldrb.w	r3, [sl]
 8006388:	2b00      	cmp	r3, #0
 800638a:	f000 80a2 	beq.w	80064d2 <_vfiprintf_r+0x20e>
 800638e:	2300      	movs	r3, #0
 8006390:	f04f 32ff 	mov.w	r2, #4294967295
 8006394:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006398:	f10a 0a01 	add.w	sl, sl, #1
 800639c:	9304      	str	r3, [sp, #16]
 800639e:	9307      	str	r3, [sp, #28]
 80063a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80063a4:	931a      	str	r3, [sp, #104]	; 0x68
 80063a6:	4654      	mov	r4, sl
 80063a8:	2205      	movs	r2, #5
 80063aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063ae:	4858      	ldr	r0, [pc, #352]	; (8006510 <_vfiprintf_r+0x24c>)
 80063b0:	f7f9 ff16 	bl	80001e0 <memchr>
 80063b4:	9a04      	ldr	r2, [sp, #16]
 80063b6:	b9d8      	cbnz	r0, 80063f0 <_vfiprintf_r+0x12c>
 80063b8:	06d1      	lsls	r1, r2, #27
 80063ba:	bf44      	itt	mi
 80063bc:	2320      	movmi	r3, #32
 80063be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80063c2:	0713      	lsls	r3, r2, #28
 80063c4:	bf44      	itt	mi
 80063c6:	232b      	movmi	r3, #43	; 0x2b
 80063c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80063cc:	f89a 3000 	ldrb.w	r3, [sl]
 80063d0:	2b2a      	cmp	r3, #42	; 0x2a
 80063d2:	d015      	beq.n	8006400 <_vfiprintf_r+0x13c>
 80063d4:	9a07      	ldr	r2, [sp, #28]
 80063d6:	4654      	mov	r4, sl
 80063d8:	2000      	movs	r0, #0
 80063da:	f04f 0c0a 	mov.w	ip, #10
 80063de:	4621      	mov	r1, r4
 80063e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80063e4:	3b30      	subs	r3, #48	; 0x30
 80063e6:	2b09      	cmp	r3, #9
 80063e8:	d94e      	bls.n	8006488 <_vfiprintf_r+0x1c4>
 80063ea:	b1b0      	cbz	r0, 800641a <_vfiprintf_r+0x156>
 80063ec:	9207      	str	r2, [sp, #28]
 80063ee:	e014      	b.n	800641a <_vfiprintf_r+0x156>
 80063f0:	eba0 0308 	sub.w	r3, r0, r8
 80063f4:	fa09 f303 	lsl.w	r3, r9, r3
 80063f8:	4313      	orrs	r3, r2
 80063fa:	9304      	str	r3, [sp, #16]
 80063fc:	46a2      	mov	sl, r4
 80063fe:	e7d2      	b.n	80063a6 <_vfiprintf_r+0xe2>
 8006400:	9b03      	ldr	r3, [sp, #12]
 8006402:	1d19      	adds	r1, r3, #4
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	9103      	str	r1, [sp, #12]
 8006408:	2b00      	cmp	r3, #0
 800640a:	bfbb      	ittet	lt
 800640c:	425b      	neglt	r3, r3
 800640e:	f042 0202 	orrlt.w	r2, r2, #2
 8006412:	9307      	strge	r3, [sp, #28]
 8006414:	9307      	strlt	r3, [sp, #28]
 8006416:	bfb8      	it	lt
 8006418:	9204      	strlt	r2, [sp, #16]
 800641a:	7823      	ldrb	r3, [r4, #0]
 800641c:	2b2e      	cmp	r3, #46	; 0x2e
 800641e:	d10c      	bne.n	800643a <_vfiprintf_r+0x176>
 8006420:	7863      	ldrb	r3, [r4, #1]
 8006422:	2b2a      	cmp	r3, #42	; 0x2a
 8006424:	d135      	bne.n	8006492 <_vfiprintf_r+0x1ce>
 8006426:	9b03      	ldr	r3, [sp, #12]
 8006428:	1d1a      	adds	r2, r3, #4
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	9203      	str	r2, [sp, #12]
 800642e:	2b00      	cmp	r3, #0
 8006430:	bfb8      	it	lt
 8006432:	f04f 33ff 	movlt.w	r3, #4294967295
 8006436:	3402      	adds	r4, #2
 8006438:	9305      	str	r3, [sp, #20]
 800643a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006520 <_vfiprintf_r+0x25c>
 800643e:	7821      	ldrb	r1, [r4, #0]
 8006440:	2203      	movs	r2, #3
 8006442:	4650      	mov	r0, sl
 8006444:	f7f9 fecc 	bl	80001e0 <memchr>
 8006448:	b140      	cbz	r0, 800645c <_vfiprintf_r+0x198>
 800644a:	2340      	movs	r3, #64	; 0x40
 800644c:	eba0 000a 	sub.w	r0, r0, sl
 8006450:	fa03 f000 	lsl.w	r0, r3, r0
 8006454:	9b04      	ldr	r3, [sp, #16]
 8006456:	4303      	orrs	r3, r0
 8006458:	3401      	adds	r4, #1
 800645a:	9304      	str	r3, [sp, #16]
 800645c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006460:	482c      	ldr	r0, [pc, #176]	; (8006514 <_vfiprintf_r+0x250>)
 8006462:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006466:	2206      	movs	r2, #6
 8006468:	f7f9 feba 	bl	80001e0 <memchr>
 800646c:	2800      	cmp	r0, #0
 800646e:	d03f      	beq.n	80064f0 <_vfiprintf_r+0x22c>
 8006470:	4b29      	ldr	r3, [pc, #164]	; (8006518 <_vfiprintf_r+0x254>)
 8006472:	bb1b      	cbnz	r3, 80064bc <_vfiprintf_r+0x1f8>
 8006474:	9b03      	ldr	r3, [sp, #12]
 8006476:	3307      	adds	r3, #7
 8006478:	f023 0307 	bic.w	r3, r3, #7
 800647c:	3308      	adds	r3, #8
 800647e:	9303      	str	r3, [sp, #12]
 8006480:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006482:	443b      	add	r3, r7
 8006484:	9309      	str	r3, [sp, #36]	; 0x24
 8006486:	e767      	b.n	8006358 <_vfiprintf_r+0x94>
 8006488:	fb0c 3202 	mla	r2, ip, r2, r3
 800648c:	460c      	mov	r4, r1
 800648e:	2001      	movs	r0, #1
 8006490:	e7a5      	b.n	80063de <_vfiprintf_r+0x11a>
 8006492:	2300      	movs	r3, #0
 8006494:	3401      	adds	r4, #1
 8006496:	9305      	str	r3, [sp, #20]
 8006498:	4619      	mov	r1, r3
 800649a:	f04f 0c0a 	mov.w	ip, #10
 800649e:	4620      	mov	r0, r4
 80064a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80064a4:	3a30      	subs	r2, #48	; 0x30
 80064a6:	2a09      	cmp	r2, #9
 80064a8:	d903      	bls.n	80064b2 <_vfiprintf_r+0x1ee>
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d0c5      	beq.n	800643a <_vfiprintf_r+0x176>
 80064ae:	9105      	str	r1, [sp, #20]
 80064b0:	e7c3      	b.n	800643a <_vfiprintf_r+0x176>
 80064b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80064b6:	4604      	mov	r4, r0
 80064b8:	2301      	movs	r3, #1
 80064ba:	e7f0      	b.n	800649e <_vfiprintf_r+0x1da>
 80064bc:	ab03      	add	r3, sp, #12
 80064be:	9300      	str	r3, [sp, #0]
 80064c0:	462a      	mov	r2, r5
 80064c2:	4b16      	ldr	r3, [pc, #88]	; (800651c <_vfiprintf_r+0x258>)
 80064c4:	a904      	add	r1, sp, #16
 80064c6:	4630      	mov	r0, r6
 80064c8:	f3af 8000 	nop.w
 80064cc:	4607      	mov	r7, r0
 80064ce:	1c78      	adds	r0, r7, #1
 80064d0:	d1d6      	bne.n	8006480 <_vfiprintf_r+0x1bc>
 80064d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80064d4:	07d9      	lsls	r1, r3, #31
 80064d6:	d405      	bmi.n	80064e4 <_vfiprintf_r+0x220>
 80064d8:	89ab      	ldrh	r3, [r5, #12]
 80064da:	059a      	lsls	r2, r3, #22
 80064dc:	d402      	bmi.n	80064e4 <_vfiprintf_r+0x220>
 80064de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80064e0:	f7ff fc23 	bl	8005d2a <__retarget_lock_release_recursive>
 80064e4:	89ab      	ldrh	r3, [r5, #12]
 80064e6:	065b      	lsls	r3, r3, #25
 80064e8:	f53f af12 	bmi.w	8006310 <_vfiprintf_r+0x4c>
 80064ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80064ee:	e711      	b.n	8006314 <_vfiprintf_r+0x50>
 80064f0:	ab03      	add	r3, sp, #12
 80064f2:	9300      	str	r3, [sp, #0]
 80064f4:	462a      	mov	r2, r5
 80064f6:	4b09      	ldr	r3, [pc, #36]	; (800651c <_vfiprintf_r+0x258>)
 80064f8:	a904      	add	r1, sp, #16
 80064fa:	4630      	mov	r0, r6
 80064fc:	f000 f880 	bl	8006600 <_printf_i>
 8006500:	e7e4      	b.n	80064cc <_vfiprintf_r+0x208>
 8006502:	bf00      	nop
 8006504:	08006d28 	.word	0x08006d28
 8006508:	08006d48 	.word	0x08006d48
 800650c:	08006d08 	.word	0x08006d08
 8006510:	08006d68 	.word	0x08006d68
 8006514:	08006d72 	.word	0x08006d72
 8006518:	00000000 	.word	0x00000000
 800651c:	0800629f 	.word	0x0800629f
 8006520:	08006d6e 	.word	0x08006d6e

08006524 <_printf_common>:
 8006524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006528:	4616      	mov	r6, r2
 800652a:	4699      	mov	r9, r3
 800652c:	688a      	ldr	r2, [r1, #8]
 800652e:	690b      	ldr	r3, [r1, #16]
 8006530:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006534:	4293      	cmp	r3, r2
 8006536:	bfb8      	it	lt
 8006538:	4613      	movlt	r3, r2
 800653a:	6033      	str	r3, [r6, #0]
 800653c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006540:	4607      	mov	r7, r0
 8006542:	460c      	mov	r4, r1
 8006544:	b10a      	cbz	r2, 800654a <_printf_common+0x26>
 8006546:	3301      	adds	r3, #1
 8006548:	6033      	str	r3, [r6, #0]
 800654a:	6823      	ldr	r3, [r4, #0]
 800654c:	0699      	lsls	r1, r3, #26
 800654e:	bf42      	ittt	mi
 8006550:	6833      	ldrmi	r3, [r6, #0]
 8006552:	3302      	addmi	r3, #2
 8006554:	6033      	strmi	r3, [r6, #0]
 8006556:	6825      	ldr	r5, [r4, #0]
 8006558:	f015 0506 	ands.w	r5, r5, #6
 800655c:	d106      	bne.n	800656c <_printf_common+0x48>
 800655e:	f104 0a19 	add.w	sl, r4, #25
 8006562:	68e3      	ldr	r3, [r4, #12]
 8006564:	6832      	ldr	r2, [r6, #0]
 8006566:	1a9b      	subs	r3, r3, r2
 8006568:	42ab      	cmp	r3, r5
 800656a:	dc26      	bgt.n	80065ba <_printf_common+0x96>
 800656c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006570:	1e13      	subs	r3, r2, #0
 8006572:	6822      	ldr	r2, [r4, #0]
 8006574:	bf18      	it	ne
 8006576:	2301      	movne	r3, #1
 8006578:	0692      	lsls	r2, r2, #26
 800657a:	d42b      	bmi.n	80065d4 <_printf_common+0xb0>
 800657c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006580:	4649      	mov	r1, r9
 8006582:	4638      	mov	r0, r7
 8006584:	47c0      	blx	r8
 8006586:	3001      	adds	r0, #1
 8006588:	d01e      	beq.n	80065c8 <_printf_common+0xa4>
 800658a:	6823      	ldr	r3, [r4, #0]
 800658c:	68e5      	ldr	r5, [r4, #12]
 800658e:	6832      	ldr	r2, [r6, #0]
 8006590:	f003 0306 	and.w	r3, r3, #6
 8006594:	2b04      	cmp	r3, #4
 8006596:	bf08      	it	eq
 8006598:	1aad      	subeq	r5, r5, r2
 800659a:	68a3      	ldr	r3, [r4, #8]
 800659c:	6922      	ldr	r2, [r4, #16]
 800659e:	bf0c      	ite	eq
 80065a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80065a4:	2500      	movne	r5, #0
 80065a6:	4293      	cmp	r3, r2
 80065a8:	bfc4      	itt	gt
 80065aa:	1a9b      	subgt	r3, r3, r2
 80065ac:	18ed      	addgt	r5, r5, r3
 80065ae:	2600      	movs	r6, #0
 80065b0:	341a      	adds	r4, #26
 80065b2:	42b5      	cmp	r5, r6
 80065b4:	d11a      	bne.n	80065ec <_printf_common+0xc8>
 80065b6:	2000      	movs	r0, #0
 80065b8:	e008      	b.n	80065cc <_printf_common+0xa8>
 80065ba:	2301      	movs	r3, #1
 80065bc:	4652      	mov	r2, sl
 80065be:	4649      	mov	r1, r9
 80065c0:	4638      	mov	r0, r7
 80065c2:	47c0      	blx	r8
 80065c4:	3001      	adds	r0, #1
 80065c6:	d103      	bne.n	80065d0 <_printf_common+0xac>
 80065c8:	f04f 30ff 	mov.w	r0, #4294967295
 80065cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065d0:	3501      	adds	r5, #1
 80065d2:	e7c6      	b.n	8006562 <_printf_common+0x3e>
 80065d4:	18e1      	adds	r1, r4, r3
 80065d6:	1c5a      	adds	r2, r3, #1
 80065d8:	2030      	movs	r0, #48	; 0x30
 80065da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80065de:	4422      	add	r2, r4
 80065e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80065e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80065e8:	3302      	adds	r3, #2
 80065ea:	e7c7      	b.n	800657c <_printf_common+0x58>
 80065ec:	2301      	movs	r3, #1
 80065ee:	4622      	mov	r2, r4
 80065f0:	4649      	mov	r1, r9
 80065f2:	4638      	mov	r0, r7
 80065f4:	47c0      	blx	r8
 80065f6:	3001      	adds	r0, #1
 80065f8:	d0e6      	beq.n	80065c8 <_printf_common+0xa4>
 80065fa:	3601      	adds	r6, #1
 80065fc:	e7d9      	b.n	80065b2 <_printf_common+0x8e>
	...

08006600 <_printf_i>:
 8006600:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006604:	7e0f      	ldrb	r7, [r1, #24]
 8006606:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006608:	2f78      	cmp	r7, #120	; 0x78
 800660a:	4691      	mov	r9, r2
 800660c:	4680      	mov	r8, r0
 800660e:	460c      	mov	r4, r1
 8006610:	469a      	mov	sl, r3
 8006612:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006616:	d807      	bhi.n	8006628 <_printf_i+0x28>
 8006618:	2f62      	cmp	r7, #98	; 0x62
 800661a:	d80a      	bhi.n	8006632 <_printf_i+0x32>
 800661c:	2f00      	cmp	r7, #0
 800661e:	f000 80d8 	beq.w	80067d2 <_printf_i+0x1d2>
 8006622:	2f58      	cmp	r7, #88	; 0x58
 8006624:	f000 80a3 	beq.w	800676e <_printf_i+0x16e>
 8006628:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800662c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006630:	e03a      	b.n	80066a8 <_printf_i+0xa8>
 8006632:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006636:	2b15      	cmp	r3, #21
 8006638:	d8f6      	bhi.n	8006628 <_printf_i+0x28>
 800663a:	a101      	add	r1, pc, #4	; (adr r1, 8006640 <_printf_i+0x40>)
 800663c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006640:	08006699 	.word	0x08006699
 8006644:	080066ad 	.word	0x080066ad
 8006648:	08006629 	.word	0x08006629
 800664c:	08006629 	.word	0x08006629
 8006650:	08006629 	.word	0x08006629
 8006654:	08006629 	.word	0x08006629
 8006658:	080066ad 	.word	0x080066ad
 800665c:	08006629 	.word	0x08006629
 8006660:	08006629 	.word	0x08006629
 8006664:	08006629 	.word	0x08006629
 8006668:	08006629 	.word	0x08006629
 800666c:	080067b9 	.word	0x080067b9
 8006670:	080066dd 	.word	0x080066dd
 8006674:	0800679b 	.word	0x0800679b
 8006678:	08006629 	.word	0x08006629
 800667c:	08006629 	.word	0x08006629
 8006680:	080067db 	.word	0x080067db
 8006684:	08006629 	.word	0x08006629
 8006688:	080066dd 	.word	0x080066dd
 800668c:	08006629 	.word	0x08006629
 8006690:	08006629 	.word	0x08006629
 8006694:	080067a3 	.word	0x080067a3
 8006698:	682b      	ldr	r3, [r5, #0]
 800669a:	1d1a      	adds	r2, r3, #4
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	602a      	str	r2, [r5, #0]
 80066a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80066a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80066a8:	2301      	movs	r3, #1
 80066aa:	e0a3      	b.n	80067f4 <_printf_i+0x1f4>
 80066ac:	6820      	ldr	r0, [r4, #0]
 80066ae:	6829      	ldr	r1, [r5, #0]
 80066b0:	0606      	lsls	r6, r0, #24
 80066b2:	f101 0304 	add.w	r3, r1, #4
 80066b6:	d50a      	bpl.n	80066ce <_printf_i+0xce>
 80066b8:	680e      	ldr	r6, [r1, #0]
 80066ba:	602b      	str	r3, [r5, #0]
 80066bc:	2e00      	cmp	r6, #0
 80066be:	da03      	bge.n	80066c8 <_printf_i+0xc8>
 80066c0:	232d      	movs	r3, #45	; 0x2d
 80066c2:	4276      	negs	r6, r6
 80066c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066c8:	485e      	ldr	r0, [pc, #376]	; (8006844 <_printf_i+0x244>)
 80066ca:	230a      	movs	r3, #10
 80066cc:	e019      	b.n	8006702 <_printf_i+0x102>
 80066ce:	680e      	ldr	r6, [r1, #0]
 80066d0:	602b      	str	r3, [r5, #0]
 80066d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80066d6:	bf18      	it	ne
 80066d8:	b236      	sxthne	r6, r6
 80066da:	e7ef      	b.n	80066bc <_printf_i+0xbc>
 80066dc:	682b      	ldr	r3, [r5, #0]
 80066de:	6820      	ldr	r0, [r4, #0]
 80066e0:	1d19      	adds	r1, r3, #4
 80066e2:	6029      	str	r1, [r5, #0]
 80066e4:	0601      	lsls	r1, r0, #24
 80066e6:	d501      	bpl.n	80066ec <_printf_i+0xec>
 80066e8:	681e      	ldr	r6, [r3, #0]
 80066ea:	e002      	b.n	80066f2 <_printf_i+0xf2>
 80066ec:	0646      	lsls	r6, r0, #25
 80066ee:	d5fb      	bpl.n	80066e8 <_printf_i+0xe8>
 80066f0:	881e      	ldrh	r6, [r3, #0]
 80066f2:	4854      	ldr	r0, [pc, #336]	; (8006844 <_printf_i+0x244>)
 80066f4:	2f6f      	cmp	r7, #111	; 0x6f
 80066f6:	bf0c      	ite	eq
 80066f8:	2308      	moveq	r3, #8
 80066fa:	230a      	movne	r3, #10
 80066fc:	2100      	movs	r1, #0
 80066fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006702:	6865      	ldr	r5, [r4, #4]
 8006704:	60a5      	str	r5, [r4, #8]
 8006706:	2d00      	cmp	r5, #0
 8006708:	bfa2      	ittt	ge
 800670a:	6821      	ldrge	r1, [r4, #0]
 800670c:	f021 0104 	bicge.w	r1, r1, #4
 8006710:	6021      	strge	r1, [r4, #0]
 8006712:	b90e      	cbnz	r6, 8006718 <_printf_i+0x118>
 8006714:	2d00      	cmp	r5, #0
 8006716:	d04d      	beq.n	80067b4 <_printf_i+0x1b4>
 8006718:	4615      	mov	r5, r2
 800671a:	fbb6 f1f3 	udiv	r1, r6, r3
 800671e:	fb03 6711 	mls	r7, r3, r1, r6
 8006722:	5dc7      	ldrb	r7, [r0, r7]
 8006724:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006728:	4637      	mov	r7, r6
 800672a:	42bb      	cmp	r3, r7
 800672c:	460e      	mov	r6, r1
 800672e:	d9f4      	bls.n	800671a <_printf_i+0x11a>
 8006730:	2b08      	cmp	r3, #8
 8006732:	d10b      	bne.n	800674c <_printf_i+0x14c>
 8006734:	6823      	ldr	r3, [r4, #0]
 8006736:	07de      	lsls	r6, r3, #31
 8006738:	d508      	bpl.n	800674c <_printf_i+0x14c>
 800673a:	6923      	ldr	r3, [r4, #16]
 800673c:	6861      	ldr	r1, [r4, #4]
 800673e:	4299      	cmp	r1, r3
 8006740:	bfde      	ittt	le
 8006742:	2330      	movle	r3, #48	; 0x30
 8006744:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006748:	f105 35ff 	addle.w	r5, r5, #4294967295
 800674c:	1b52      	subs	r2, r2, r5
 800674e:	6122      	str	r2, [r4, #16]
 8006750:	f8cd a000 	str.w	sl, [sp]
 8006754:	464b      	mov	r3, r9
 8006756:	aa03      	add	r2, sp, #12
 8006758:	4621      	mov	r1, r4
 800675a:	4640      	mov	r0, r8
 800675c:	f7ff fee2 	bl	8006524 <_printf_common>
 8006760:	3001      	adds	r0, #1
 8006762:	d14c      	bne.n	80067fe <_printf_i+0x1fe>
 8006764:	f04f 30ff 	mov.w	r0, #4294967295
 8006768:	b004      	add	sp, #16
 800676a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800676e:	4835      	ldr	r0, [pc, #212]	; (8006844 <_printf_i+0x244>)
 8006770:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006774:	6829      	ldr	r1, [r5, #0]
 8006776:	6823      	ldr	r3, [r4, #0]
 8006778:	f851 6b04 	ldr.w	r6, [r1], #4
 800677c:	6029      	str	r1, [r5, #0]
 800677e:	061d      	lsls	r5, r3, #24
 8006780:	d514      	bpl.n	80067ac <_printf_i+0x1ac>
 8006782:	07df      	lsls	r7, r3, #31
 8006784:	bf44      	itt	mi
 8006786:	f043 0320 	orrmi.w	r3, r3, #32
 800678a:	6023      	strmi	r3, [r4, #0]
 800678c:	b91e      	cbnz	r6, 8006796 <_printf_i+0x196>
 800678e:	6823      	ldr	r3, [r4, #0]
 8006790:	f023 0320 	bic.w	r3, r3, #32
 8006794:	6023      	str	r3, [r4, #0]
 8006796:	2310      	movs	r3, #16
 8006798:	e7b0      	b.n	80066fc <_printf_i+0xfc>
 800679a:	6823      	ldr	r3, [r4, #0]
 800679c:	f043 0320 	orr.w	r3, r3, #32
 80067a0:	6023      	str	r3, [r4, #0]
 80067a2:	2378      	movs	r3, #120	; 0x78
 80067a4:	4828      	ldr	r0, [pc, #160]	; (8006848 <_printf_i+0x248>)
 80067a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80067aa:	e7e3      	b.n	8006774 <_printf_i+0x174>
 80067ac:	0659      	lsls	r1, r3, #25
 80067ae:	bf48      	it	mi
 80067b0:	b2b6      	uxthmi	r6, r6
 80067b2:	e7e6      	b.n	8006782 <_printf_i+0x182>
 80067b4:	4615      	mov	r5, r2
 80067b6:	e7bb      	b.n	8006730 <_printf_i+0x130>
 80067b8:	682b      	ldr	r3, [r5, #0]
 80067ba:	6826      	ldr	r6, [r4, #0]
 80067bc:	6961      	ldr	r1, [r4, #20]
 80067be:	1d18      	adds	r0, r3, #4
 80067c0:	6028      	str	r0, [r5, #0]
 80067c2:	0635      	lsls	r5, r6, #24
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	d501      	bpl.n	80067cc <_printf_i+0x1cc>
 80067c8:	6019      	str	r1, [r3, #0]
 80067ca:	e002      	b.n	80067d2 <_printf_i+0x1d2>
 80067cc:	0670      	lsls	r0, r6, #25
 80067ce:	d5fb      	bpl.n	80067c8 <_printf_i+0x1c8>
 80067d0:	8019      	strh	r1, [r3, #0]
 80067d2:	2300      	movs	r3, #0
 80067d4:	6123      	str	r3, [r4, #16]
 80067d6:	4615      	mov	r5, r2
 80067d8:	e7ba      	b.n	8006750 <_printf_i+0x150>
 80067da:	682b      	ldr	r3, [r5, #0]
 80067dc:	1d1a      	adds	r2, r3, #4
 80067de:	602a      	str	r2, [r5, #0]
 80067e0:	681d      	ldr	r5, [r3, #0]
 80067e2:	6862      	ldr	r2, [r4, #4]
 80067e4:	2100      	movs	r1, #0
 80067e6:	4628      	mov	r0, r5
 80067e8:	f7f9 fcfa 	bl	80001e0 <memchr>
 80067ec:	b108      	cbz	r0, 80067f2 <_printf_i+0x1f2>
 80067ee:	1b40      	subs	r0, r0, r5
 80067f0:	6060      	str	r0, [r4, #4]
 80067f2:	6863      	ldr	r3, [r4, #4]
 80067f4:	6123      	str	r3, [r4, #16]
 80067f6:	2300      	movs	r3, #0
 80067f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067fc:	e7a8      	b.n	8006750 <_printf_i+0x150>
 80067fe:	6923      	ldr	r3, [r4, #16]
 8006800:	462a      	mov	r2, r5
 8006802:	4649      	mov	r1, r9
 8006804:	4640      	mov	r0, r8
 8006806:	47d0      	blx	sl
 8006808:	3001      	adds	r0, #1
 800680a:	d0ab      	beq.n	8006764 <_printf_i+0x164>
 800680c:	6823      	ldr	r3, [r4, #0]
 800680e:	079b      	lsls	r3, r3, #30
 8006810:	d413      	bmi.n	800683a <_printf_i+0x23a>
 8006812:	68e0      	ldr	r0, [r4, #12]
 8006814:	9b03      	ldr	r3, [sp, #12]
 8006816:	4298      	cmp	r0, r3
 8006818:	bfb8      	it	lt
 800681a:	4618      	movlt	r0, r3
 800681c:	e7a4      	b.n	8006768 <_printf_i+0x168>
 800681e:	2301      	movs	r3, #1
 8006820:	4632      	mov	r2, r6
 8006822:	4649      	mov	r1, r9
 8006824:	4640      	mov	r0, r8
 8006826:	47d0      	blx	sl
 8006828:	3001      	adds	r0, #1
 800682a:	d09b      	beq.n	8006764 <_printf_i+0x164>
 800682c:	3501      	adds	r5, #1
 800682e:	68e3      	ldr	r3, [r4, #12]
 8006830:	9903      	ldr	r1, [sp, #12]
 8006832:	1a5b      	subs	r3, r3, r1
 8006834:	42ab      	cmp	r3, r5
 8006836:	dcf2      	bgt.n	800681e <_printf_i+0x21e>
 8006838:	e7eb      	b.n	8006812 <_printf_i+0x212>
 800683a:	2500      	movs	r5, #0
 800683c:	f104 0619 	add.w	r6, r4, #25
 8006840:	e7f5      	b.n	800682e <_printf_i+0x22e>
 8006842:	bf00      	nop
 8006844:	08006d79 	.word	0x08006d79
 8006848:	08006d8a 	.word	0x08006d8a

0800684c <_sbrk_r>:
 800684c:	b538      	push	{r3, r4, r5, lr}
 800684e:	4d06      	ldr	r5, [pc, #24]	; (8006868 <_sbrk_r+0x1c>)
 8006850:	2300      	movs	r3, #0
 8006852:	4604      	mov	r4, r0
 8006854:	4608      	mov	r0, r1
 8006856:	602b      	str	r3, [r5, #0]
 8006858:	f7fb faf6 	bl	8001e48 <_sbrk>
 800685c:	1c43      	adds	r3, r0, #1
 800685e:	d102      	bne.n	8006866 <_sbrk_r+0x1a>
 8006860:	682b      	ldr	r3, [r5, #0]
 8006862:	b103      	cbz	r3, 8006866 <_sbrk_r+0x1a>
 8006864:	6023      	str	r3, [r4, #0]
 8006866:	bd38      	pop	{r3, r4, r5, pc}
 8006868:	20002ea4 	.word	0x20002ea4

0800686c <__sread>:
 800686c:	b510      	push	{r4, lr}
 800686e:	460c      	mov	r4, r1
 8006870:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006874:	f000 f8f8 	bl	8006a68 <_read_r>
 8006878:	2800      	cmp	r0, #0
 800687a:	bfab      	itete	ge
 800687c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800687e:	89a3      	ldrhlt	r3, [r4, #12]
 8006880:	181b      	addge	r3, r3, r0
 8006882:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006886:	bfac      	ite	ge
 8006888:	6563      	strge	r3, [r4, #84]	; 0x54
 800688a:	81a3      	strhlt	r3, [r4, #12]
 800688c:	bd10      	pop	{r4, pc}

0800688e <__swrite>:
 800688e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006892:	461f      	mov	r7, r3
 8006894:	898b      	ldrh	r3, [r1, #12]
 8006896:	05db      	lsls	r3, r3, #23
 8006898:	4605      	mov	r5, r0
 800689a:	460c      	mov	r4, r1
 800689c:	4616      	mov	r6, r2
 800689e:	d505      	bpl.n	80068ac <__swrite+0x1e>
 80068a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068a4:	2302      	movs	r3, #2
 80068a6:	2200      	movs	r2, #0
 80068a8:	f000 f868 	bl	800697c <_lseek_r>
 80068ac:	89a3      	ldrh	r3, [r4, #12]
 80068ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80068b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80068b6:	81a3      	strh	r3, [r4, #12]
 80068b8:	4632      	mov	r2, r6
 80068ba:	463b      	mov	r3, r7
 80068bc:	4628      	mov	r0, r5
 80068be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80068c2:	f000 b817 	b.w	80068f4 <_write_r>

080068c6 <__sseek>:
 80068c6:	b510      	push	{r4, lr}
 80068c8:	460c      	mov	r4, r1
 80068ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068ce:	f000 f855 	bl	800697c <_lseek_r>
 80068d2:	1c43      	adds	r3, r0, #1
 80068d4:	89a3      	ldrh	r3, [r4, #12]
 80068d6:	bf15      	itete	ne
 80068d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80068da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80068de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80068e2:	81a3      	strheq	r3, [r4, #12]
 80068e4:	bf18      	it	ne
 80068e6:	81a3      	strhne	r3, [r4, #12]
 80068e8:	bd10      	pop	{r4, pc}

080068ea <__sclose>:
 80068ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068ee:	f000 b813 	b.w	8006918 <_close_r>
	...

080068f4 <_write_r>:
 80068f4:	b538      	push	{r3, r4, r5, lr}
 80068f6:	4d07      	ldr	r5, [pc, #28]	; (8006914 <_write_r+0x20>)
 80068f8:	4604      	mov	r4, r0
 80068fa:	4608      	mov	r0, r1
 80068fc:	4611      	mov	r1, r2
 80068fe:	2200      	movs	r2, #0
 8006900:	602a      	str	r2, [r5, #0]
 8006902:	461a      	mov	r2, r3
 8006904:	f7fb fa4f 	bl	8001da6 <_write>
 8006908:	1c43      	adds	r3, r0, #1
 800690a:	d102      	bne.n	8006912 <_write_r+0x1e>
 800690c:	682b      	ldr	r3, [r5, #0]
 800690e:	b103      	cbz	r3, 8006912 <_write_r+0x1e>
 8006910:	6023      	str	r3, [r4, #0]
 8006912:	bd38      	pop	{r3, r4, r5, pc}
 8006914:	20002ea4 	.word	0x20002ea4

08006918 <_close_r>:
 8006918:	b538      	push	{r3, r4, r5, lr}
 800691a:	4d06      	ldr	r5, [pc, #24]	; (8006934 <_close_r+0x1c>)
 800691c:	2300      	movs	r3, #0
 800691e:	4604      	mov	r4, r0
 8006920:	4608      	mov	r0, r1
 8006922:	602b      	str	r3, [r5, #0]
 8006924:	f7fb fa5b 	bl	8001dde <_close>
 8006928:	1c43      	adds	r3, r0, #1
 800692a:	d102      	bne.n	8006932 <_close_r+0x1a>
 800692c:	682b      	ldr	r3, [r5, #0]
 800692e:	b103      	cbz	r3, 8006932 <_close_r+0x1a>
 8006930:	6023      	str	r3, [r4, #0]
 8006932:	bd38      	pop	{r3, r4, r5, pc}
 8006934:	20002ea4 	.word	0x20002ea4

08006938 <_fstat_r>:
 8006938:	b538      	push	{r3, r4, r5, lr}
 800693a:	4d07      	ldr	r5, [pc, #28]	; (8006958 <_fstat_r+0x20>)
 800693c:	2300      	movs	r3, #0
 800693e:	4604      	mov	r4, r0
 8006940:	4608      	mov	r0, r1
 8006942:	4611      	mov	r1, r2
 8006944:	602b      	str	r3, [r5, #0]
 8006946:	f7fb fa56 	bl	8001df6 <_fstat>
 800694a:	1c43      	adds	r3, r0, #1
 800694c:	d102      	bne.n	8006954 <_fstat_r+0x1c>
 800694e:	682b      	ldr	r3, [r5, #0]
 8006950:	b103      	cbz	r3, 8006954 <_fstat_r+0x1c>
 8006952:	6023      	str	r3, [r4, #0]
 8006954:	bd38      	pop	{r3, r4, r5, pc}
 8006956:	bf00      	nop
 8006958:	20002ea4 	.word	0x20002ea4

0800695c <_isatty_r>:
 800695c:	b538      	push	{r3, r4, r5, lr}
 800695e:	4d06      	ldr	r5, [pc, #24]	; (8006978 <_isatty_r+0x1c>)
 8006960:	2300      	movs	r3, #0
 8006962:	4604      	mov	r4, r0
 8006964:	4608      	mov	r0, r1
 8006966:	602b      	str	r3, [r5, #0]
 8006968:	f7fb fa55 	bl	8001e16 <_isatty>
 800696c:	1c43      	adds	r3, r0, #1
 800696e:	d102      	bne.n	8006976 <_isatty_r+0x1a>
 8006970:	682b      	ldr	r3, [r5, #0]
 8006972:	b103      	cbz	r3, 8006976 <_isatty_r+0x1a>
 8006974:	6023      	str	r3, [r4, #0]
 8006976:	bd38      	pop	{r3, r4, r5, pc}
 8006978:	20002ea4 	.word	0x20002ea4

0800697c <_lseek_r>:
 800697c:	b538      	push	{r3, r4, r5, lr}
 800697e:	4d07      	ldr	r5, [pc, #28]	; (800699c <_lseek_r+0x20>)
 8006980:	4604      	mov	r4, r0
 8006982:	4608      	mov	r0, r1
 8006984:	4611      	mov	r1, r2
 8006986:	2200      	movs	r2, #0
 8006988:	602a      	str	r2, [r5, #0]
 800698a:	461a      	mov	r2, r3
 800698c:	f7fb fa4e 	bl	8001e2c <_lseek>
 8006990:	1c43      	adds	r3, r0, #1
 8006992:	d102      	bne.n	800699a <_lseek_r+0x1e>
 8006994:	682b      	ldr	r3, [r5, #0]
 8006996:	b103      	cbz	r3, 800699a <_lseek_r+0x1e>
 8006998:	6023      	str	r3, [r4, #0]
 800699a:	bd38      	pop	{r3, r4, r5, pc}
 800699c:	20002ea4 	.word	0x20002ea4

080069a0 <memcpy>:
 80069a0:	440a      	add	r2, r1
 80069a2:	4291      	cmp	r1, r2
 80069a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80069a8:	d100      	bne.n	80069ac <memcpy+0xc>
 80069aa:	4770      	bx	lr
 80069ac:	b510      	push	{r4, lr}
 80069ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80069b6:	4291      	cmp	r1, r2
 80069b8:	d1f9      	bne.n	80069ae <memcpy+0xe>
 80069ba:	bd10      	pop	{r4, pc}

080069bc <memmove>:
 80069bc:	4288      	cmp	r0, r1
 80069be:	b510      	push	{r4, lr}
 80069c0:	eb01 0402 	add.w	r4, r1, r2
 80069c4:	d902      	bls.n	80069cc <memmove+0x10>
 80069c6:	4284      	cmp	r4, r0
 80069c8:	4623      	mov	r3, r4
 80069ca:	d807      	bhi.n	80069dc <memmove+0x20>
 80069cc:	1e43      	subs	r3, r0, #1
 80069ce:	42a1      	cmp	r1, r4
 80069d0:	d008      	beq.n	80069e4 <memmove+0x28>
 80069d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80069d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80069da:	e7f8      	b.n	80069ce <memmove+0x12>
 80069dc:	4402      	add	r2, r0
 80069de:	4601      	mov	r1, r0
 80069e0:	428a      	cmp	r2, r1
 80069e2:	d100      	bne.n	80069e6 <memmove+0x2a>
 80069e4:	bd10      	pop	{r4, pc}
 80069e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80069ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80069ee:	e7f7      	b.n	80069e0 <memmove+0x24>

080069f0 <__malloc_lock>:
 80069f0:	4801      	ldr	r0, [pc, #4]	; (80069f8 <__malloc_lock+0x8>)
 80069f2:	f7ff b999 	b.w	8005d28 <__retarget_lock_acquire_recursive>
 80069f6:	bf00      	nop
 80069f8:	20002e98 	.word	0x20002e98

080069fc <__malloc_unlock>:
 80069fc:	4801      	ldr	r0, [pc, #4]	; (8006a04 <__malloc_unlock+0x8>)
 80069fe:	f7ff b994 	b.w	8005d2a <__retarget_lock_release_recursive>
 8006a02:	bf00      	nop
 8006a04:	20002e98 	.word	0x20002e98

08006a08 <_realloc_r>:
 8006a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a0c:	4680      	mov	r8, r0
 8006a0e:	4614      	mov	r4, r2
 8006a10:	460e      	mov	r6, r1
 8006a12:	b921      	cbnz	r1, 8006a1e <_realloc_r+0x16>
 8006a14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a18:	4611      	mov	r1, r2
 8006a1a:	f7ff ba59 	b.w	8005ed0 <_malloc_r>
 8006a1e:	b92a      	cbnz	r2, 8006a2c <_realloc_r+0x24>
 8006a20:	f7ff f9ea 	bl	8005df8 <_free_r>
 8006a24:	4625      	mov	r5, r4
 8006a26:	4628      	mov	r0, r5
 8006a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a2c:	f000 f82e 	bl	8006a8c <_malloc_usable_size_r>
 8006a30:	4284      	cmp	r4, r0
 8006a32:	4607      	mov	r7, r0
 8006a34:	d802      	bhi.n	8006a3c <_realloc_r+0x34>
 8006a36:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006a3a:	d812      	bhi.n	8006a62 <_realloc_r+0x5a>
 8006a3c:	4621      	mov	r1, r4
 8006a3e:	4640      	mov	r0, r8
 8006a40:	f7ff fa46 	bl	8005ed0 <_malloc_r>
 8006a44:	4605      	mov	r5, r0
 8006a46:	2800      	cmp	r0, #0
 8006a48:	d0ed      	beq.n	8006a26 <_realloc_r+0x1e>
 8006a4a:	42bc      	cmp	r4, r7
 8006a4c:	4622      	mov	r2, r4
 8006a4e:	4631      	mov	r1, r6
 8006a50:	bf28      	it	cs
 8006a52:	463a      	movcs	r2, r7
 8006a54:	f7ff ffa4 	bl	80069a0 <memcpy>
 8006a58:	4631      	mov	r1, r6
 8006a5a:	4640      	mov	r0, r8
 8006a5c:	f7ff f9cc 	bl	8005df8 <_free_r>
 8006a60:	e7e1      	b.n	8006a26 <_realloc_r+0x1e>
 8006a62:	4635      	mov	r5, r6
 8006a64:	e7df      	b.n	8006a26 <_realloc_r+0x1e>
	...

08006a68 <_read_r>:
 8006a68:	b538      	push	{r3, r4, r5, lr}
 8006a6a:	4d07      	ldr	r5, [pc, #28]	; (8006a88 <_read_r+0x20>)
 8006a6c:	4604      	mov	r4, r0
 8006a6e:	4608      	mov	r0, r1
 8006a70:	4611      	mov	r1, r2
 8006a72:	2200      	movs	r2, #0
 8006a74:	602a      	str	r2, [r5, #0]
 8006a76:	461a      	mov	r2, r3
 8006a78:	f7fb f978 	bl	8001d6c <_read>
 8006a7c:	1c43      	adds	r3, r0, #1
 8006a7e:	d102      	bne.n	8006a86 <_read_r+0x1e>
 8006a80:	682b      	ldr	r3, [r5, #0]
 8006a82:	b103      	cbz	r3, 8006a86 <_read_r+0x1e>
 8006a84:	6023      	str	r3, [r4, #0]
 8006a86:	bd38      	pop	{r3, r4, r5, pc}
 8006a88:	20002ea4 	.word	0x20002ea4

08006a8c <_malloc_usable_size_r>:
 8006a8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a90:	1f18      	subs	r0, r3, #4
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	bfbc      	itt	lt
 8006a96:	580b      	ldrlt	r3, [r1, r0]
 8006a98:	18c0      	addlt	r0, r0, r3
 8006a9a:	4770      	bx	lr

08006a9c <_init>:
 8006a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a9e:	bf00      	nop
 8006aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006aa2:	bc08      	pop	{r3}
 8006aa4:	469e      	mov	lr, r3
 8006aa6:	4770      	bx	lr

08006aa8 <_fini>:
 8006aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aaa:	bf00      	nop
 8006aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006aae:	bc08      	pop	{r3}
 8006ab0:	469e      	mov	lr, r3
 8006ab2:	4770      	bx	lr
