
Display-Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007bf0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000388  08007d80  08007d80  00017d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008108  08008108  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08008108  08008108  00018108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008110  08008110  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008110  08008110  00018110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008114  08008114  00018114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08008118  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002edc  20000078  08008190  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002f54  08008190  00022f54  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001865d  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000349b  00000000  00000000  00038705  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001500  00000000  00000000  0003bba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013b0  00000000  00000000  0003d0a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024e77  00000000  00000000  0003e450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a4f9  00000000  00000000  000632c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d5681  00000000  00000000  0007d7c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00152e41  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000621c  00000000  00000000  00152e94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007d68 	.word	0x08007d68

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08007d68 	.word	0x08007d68

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <Init_LCD>:
static void delay_ms(__IO uint32_t nCount1);
static void iopins_ini();
static void ili9488_showArray_wo_coordinates(uint16_t *data, uint32_t count);

void Init_LCD()
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
	interrupt_initialize_priorities();		// initialize IRQ
 8000588:	f000 f99a 	bl	80008c0 <interrupt_initialize_priorities>
	//*****************************************************************************
		iopins_ini();							// initialize IO pins
 800058c:	f000 f9a0 	bl	80008d0 <iopins_ini>

	//*****************************************************************************
		initialize_ili9488();					// initialize LCD
 8000590:	f000 fba6 	bl	8000ce0 <initialize_ili9488>
		LCD_backlight_set(100);
 8000594:	2064      	movs	r0, #100	; 0x64
 8000596:	f000 f8d1 	bl	800073c <LCD_backlight_set>
}
 800059a:	bf00      	nop
 800059c:	bd80      	pop	{r7, pc}
	...

080005a0 <LCD_fillRect>:
void LCD_fillRect(uint16_t x1, uint16_t y1, uint16_t w, uint16_t h, uint16_t color)
{
 80005a0:	b590      	push	{r4, r7, lr}
 80005a2:	b085      	sub	sp, #20
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4604      	mov	r4, r0
 80005a8:	4608      	mov	r0, r1
 80005aa:	4611      	mov	r1, r2
 80005ac:	461a      	mov	r2, r3
 80005ae:	4623      	mov	r3, r4
 80005b0:	80fb      	strh	r3, [r7, #6]
 80005b2:	4603      	mov	r3, r0
 80005b4:	80bb      	strh	r3, [r7, #4]
 80005b6:	460b      	mov	r3, r1
 80005b8:	807b      	strh	r3, [r7, #2]
 80005ba:	4613      	mov	r3, r2
 80005bc:	803b      	strh	r3, [r7, #0]
	uint32_t count = w * h;
 80005be:	887b      	ldrh	r3, [r7, #2]
 80005c0:	883a      	ldrh	r2, [r7, #0]
 80005c2:	fb02 f303 	mul.w	r3, r2, r3
 80005c6:	60bb      	str	r3, [r7, #8]
	LCD_set_coordinates(x1, y1, (uint16_t) (x1 + w - 1), (uint16_t) (y1 + h - 1));
 80005c8:	88fa      	ldrh	r2, [r7, #6]
 80005ca:	887b      	ldrh	r3, [r7, #2]
 80005cc:	4413      	add	r3, r2
 80005ce:	b29b      	uxth	r3, r3
 80005d0:	3b01      	subs	r3, #1
 80005d2:	b29c      	uxth	r4, r3
 80005d4:	88ba      	ldrh	r2, [r7, #4]
 80005d6:	883b      	ldrh	r3, [r7, #0]
 80005d8:	4413      	add	r3, r2
 80005da:	b29b      	uxth	r3, r3
 80005dc:	3b01      	subs	r3, #1
 80005de:	b29b      	uxth	r3, r3
 80005e0:	88b9      	ldrh	r1, [r7, #4]
 80005e2:	88f8      	ldrh	r0, [r7, #6]
 80005e4:	4622      	mov	r2, r4
 80005e6:	f000 f82f 	bl	8000648 <LCD_set_coordinates>

	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_RESET);
 80005ea:	2200      	movs	r2, #0
 80005ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005f0:	4814      	ldr	r0, [pc, #80]	; (8000644 <LCD_fillRect+0xa4>)
 80005f2:	f002 fc55 	bl	8002ea0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_RESET);
 80005f6:	2200      	movs	r2, #0
 80005f8:	2180      	movs	r1, #128	; 0x80
 80005fa:	4812      	ldr	r0, [pc, #72]	; (8000644 <LCD_fillRect+0xa4>)
 80005fc:	f002 fc50 	bl	8002ea0 <HAL_GPIO_WritePin>
	TFT_REG=0x002C;
 8000600:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000604:	222c      	movs	r2, #44	; 0x2c
 8000606:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_SET);
 8000608:	2201      	movs	r2, #1
 800060a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800060e:	480d      	ldr	r0, [pc, #52]	; (8000644 <LCD_fillRect+0xa4>)
 8000610:	f002 fc46 	bl	8002ea0 <HAL_GPIO_WritePin>

	for(unsigned int i=0; i<count; i++)
 8000614:	2300      	movs	r3, #0
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	e006      	b.n	8000628 <LCD_fillRect+0x88>
	{
		TFT_REG=color;
 800061a:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 800061e:	8c3b      	ldrh	r3, [r7, #32]
 8000620:	8013      	strh	r3, [r2, #0]
	for(unsigned int i=0; i<count; i++)
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	3301      	adds	r3, #1
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	68fa      	ldr	r2, [r7, #12]
 800062a:	68bb      	ldr	r3, [r7, #8]
 800062c:	429a      	cmp	r2, r3
 800062e:	d3f4      	bcc.n	800061a <LCD_fillRect+0x7a>
	}
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_SET);
 8000630:	2201      	movs	r2, #1
 8000632:	2180      	movs	r1, #128	; 0x80
 8000634:	4803      	ldr	r0, [pc, #12]	; (8000644 <LCD_fillRect+0xa4>)
 8000636:	f002 fc33 	bl	8002ea0 <HAL_GPIO_WritePin>
}
 800063a:	bf00      	nop
 800063c:	3714      	adds	r7, #20
 800063e:	46bd      	mov	sp, r7
 8000640:	bd90      	pop	{r4, r7, pc}
 8000642:	bf00      	nop
 8000644:	40020c00 	.word	0x40020c00

08000648 <LCD_set_coordinates>:
void LCD_set_coordinates(uint16_t x1,uint16_t y1, uint16_t x2, uint16_t y2)
{
 8000648:	b590      	push	{r4, r7, lr}
 800064a:	b083      	sub	sp, #12
 800064c:	af00      	add	r7, sp, #0
 800064e:	4604      	mov	r4, r0
 8000650:	4608      	mov	r0, r1
 8000652:	4611      	mov	r1, r2
 8000654:	461a      	mov	r2, r3
 8000656:	4623      	mov	r3, r4
 8000658:	80fb      	strh	r3, [r7, #6]
 800065a:	4603      	mov	r3, r0
 800065c:	80bb      	strh	r3, [r7, #4]
 800065e:	460b      	mov	r3, r1
 8000660:	807b      	strh	r3, [r7, #2]
 8000662:	4613      	mov	r3, r2
 8000664:	803b      	strh	r3, [r7, #0]
	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_RESET);
 8000666:	2200      	movs	r2, #0
 8000668:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800066c:	4832      	ldr	r0, [pc, #200]	; (8000738 <LCD_set_coordinates+0xf0>)
 800066e:	f002 fc17 	bl	8002ea0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_RESET);
 8000672:	2200      	movs	r2, #0
 8000674:	2180      	movs	r1, #128	; 0x80
 8000676:	4830      	ldr	r0, [pc, #192]	; (8000738 <LCD_set_coordinates+0xf0>)
 8000678:	f002 fc12 	bl	8002ea0 <HAL_GPIO_WritePin>
	TFT_REG=0x002A;
 800067c:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000680:	222a      	movs	r2, #42	; 0x2a
 8000682:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_SET);
 8000684:	2201      	movs	r2, #1
 8000686:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800068a:	482b      	ldr	r0, [pc, #172]	; (8000738 <LCD_set_coordinates+0xf0>)
 800068c:	f002 fc08 	bl	8002ea0 <HAL_GPIO_WritePin>
	TFT_REG=x1>>8;
 8000690:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000694:	88fb      	ldrh	r3, [r7, #6]
 8000696:	0a1b      	lsrs	r3, r3, #8
 8000698:	b29b      	uxth	r3, r3
 800069a:	8013      	strh	r3, [r2, #0]
	TFT_REG=x1&0xFF;
 800069c:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80006a0:	88fa      	ldrh	r2, [r7, #6]
 80006a2:	b2d2      	uxtb	r2, r2
 80006a4:	b292      	uxth	r2, r2
 80006a6:	801a      	strh	r2, [r3, #0]
	TFT_REG=x2>>8;
 80006a8:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80006ac:	887b      	ldrh	r3, [r7, #2]
 80006ae:	0a1b      	lsrs	r3, r3, #8
 80006b0:	b29b      	uxth	r3, r3
 80006b2:	8013      	strh	r3, [r2, #0]
	TFT_REG=x2&0xFF;
 80006b4:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80006b8:	887a      	ldrh	r2, [r7, #2]
 80006ba:	b2d2      	uxtb	r2, r2
 80006bc:	b292      	uxth	r2, r2
 80006be:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_SET);
 80006c0:	2201      	movs	r2, #1
 80006c2:	2180      	movs	r1, #128	; 0x80
 80006c4:	481c      	ldr	r0, [pc, #112]	; (8000738 <LCD_set_coordinates+0xf0>)
 80006c6:	f002 fbeb 	bl	8002ea0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_RESET);
 80006ca:	2200      	movs	r2, #0
 80006cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006d0:	4819      	ldr	r0, [pc, #100]	; (8000738 <LCD_set_coordinates+0xf0>)
 80006d2:	f002 fbe5 	bl	8002ea0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_RESET);
 80006d6:	2200      	movs	r2, #0
 80006d8:	2180      	movs	r1, #128	; 0x80
 80006da:	4817      	ldr	r0, [pc, #92]	; (8000738 <LCD_set_coordinates+0xf0>)
 80006dc:	f002 fbe0 	bl	8002ea0 <HAL_GPIO_WritePin>
	TFT_REG=0x002B;
 80006e0:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80006e4:	222b      	movs	r2, #43	; 0x2b
 80006e6:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_SET);
 80006e8:	2201      	movs	r2, #1
 80006ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006ee:	4812      	ldr	r0, [pc, #72]	; (8000738 <LCD_set_coordinates+0xf0>)
 80006f0:	f002 fbd6 	bl	8002ea0 <HAL_GPIO_WritePin>
	TFT_REG=y1>>8;
 80006f4:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80006f8:	88bb      	ldrh	r3, [r7, #4]
 80006fa:	0a1b      	lsrs	r3, r3, #8
 80006fc:	b29b      	uxth	r3, r3
 80006fe:	8013      	strh	r3, [r2, #0]
	TFT_REG=y1&0xFF;
 8000700:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000704:	88ba      	ldrh	r2, [r7, #4]
 8000706:	b2d2      	uxtb	r2, r2
 8000708:	b292      	uxth	r2, r2
 800070a:	801a      	strh	r2, [r3, #0]
	TFT_REG=y2>>8;
 800070c:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000710:	883b      	ldrh	r3, [r7, #0]
 8000712:	0a1b      	lsrs	r3, r3, #8
 8000714:	b29b      	uxth	r3, r3
 8000716:	8013      	strh	r3, [r2, #0]
	TFT_REG=y2&0xFF;
 8000718:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800071c:	883a      	ldrh	r2, [r7, #0]
 800071e:	b2d2      	uxtb	r2, r2
 8000720:	b292      	uxth	r2, r2
 8000722:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_SET);
 8000724:	2201      	movs	r2, #1
 8000726:	2180      	movs	r1, #128	; 0x80
 8000728:	4803      	ldr	r0, [pc, #12]	; (8000738 <LCD_set_coordinates+0xf0>)
 800072a:	f002 fbb9 	bl	8002ea0 <HAL_GPIO_WritePin>
}
 800072e:	bf00      	nop
 8000730:	370c      	adds	r7, #12
 8000732:	46bd      	mov	sp, r7
 8000734:	bd90      	pop	{r4, r7, pc}
 8000736:	bf00      	nop
 8000738:	40020c00 	.word	0x40020c00

0800073c <LCD_backlight_set>:
void LCD_backlight_set(uint16_t pwm)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b0a6      	sub	sp, #152	; 0x98
 8000740:	af00      	add	r7, sp, #0
 8000742:	4603      	mov	r3, r0
 8000744:	80fb      	strh	r3, [r7, #6]

	if(pwm>=100)
 8000746:	88fb      	ldrh	r3, [r7, #6]
 8000748:	2b63      	cmp	r3, #99	; 0x63
 800074a:	d902      	bls.n	8000752 <LCD_backlight_set+0x16>
	{
		pwm=100;
 800074c:	2364      	movs	r3, #100	; 0x64
 800074e:	80fb      	strh	r3, [r7, #6]
 8000750:	e004      	b.n	800075c <LCD_backlight_set+0x20>
	}else if(pwm <= 0)
 8000752:	88fb      	ldrh	r3, [r7, #6]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d101      	bne.n	800075c <LCD_backlight_set+0x20>
	{
		pwm = 0;
 8000758:	2300      	movs	r3, #0
 800075a:	80fb      	strh	r3, [r7, #6]
	}

	pwm=(unsigned int)((MAX_PWM_PULSE * pwm)/100);
 800075c:	88fa      	ldrh	r2, [r7, #6]
 800075e:	4613      	mov	r3, r2
 8000760:	041b      	lsls	r3, r3, #16
 8000762:	1a9b      	subs	r3, r3, r2
 8000764:	4a48      	ldr	r2, [pc, #288]	; (8000888 <LCD_backlight_set+0x14c>)
 8000766:	fb82 1203 	smull	r1, r2, r2, r3
 800076a:	1152      	asrs	r2, r2, #5
 800076c:	17db      	asrs	r3, r3, #31
 800076e:	1ad3      	subs	r3, r2, r3
 8000770:	80fb      	strh	r3, [r7, #6]

	/* Common settings */
      TIM_HandleTypeDef htim1;
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000772:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 800077c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	609a      	str	r2, [r3, #8]
 8000788:	60da      	str	r2, [r3, #12]
 800078a:	611a      	str	r2, [r3, #16]
 800078c:	615a      	str	r2, [r3, #20]
 800078e:	619a      	str	r2, [r3, #24]
	  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000790:	f107 030c 	add.w	r3, r7, #12
 8000794:	2220      	movs	r2, #32
 8000796:	2100      	movs	r1, #0
 8000798:	4618      	mov	r0, r3
 800079a:	f006 f90b 	bl	80069b4 <memset>

	  htim1.Instance = TIM1;
 800079e:	4b3b      	ldr	r3, [pc, #236]	; (800088c <LCD_backlight_set+0x150>)
 80007a0:	653b      	str	r3, [r7, #80]	; 0x50
	  htim1.Init.Prescaler = 0;
 80007a2:	2300      	movs	r3, #0
 80007a4:	657b      	str	r3, [r7, #84]	; 0x54
	  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007a6:	2300      	movs	r3, #0
 80007a8:	65bb      	str	r3, [r7, #88]	; 0x58
	  htim1.Init.Period = 65535;
 80007aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007ae:	65fb      	str	r3, [r7, #92]	; 0x5c
	  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007b0:	2300      	movs	r3, #0
 80007b2:	663b      	str	r3, [r7, #96]	; 0x60
	  htim1.Init.RepetitionCounter = 0;
 80007b4:	2300      	movs	r3, #0
 80007b6:	667b      	str	r3, [r7, #100]	; 0x64
	  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007b8:	2300      	movs	r3, #0
 80007ba:	66bb      	str	r3, [r7, #104]	; 0x68
	  HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_4);
 80007bc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80007c0:	210c      	movs	r1, #12
 80007c2:	4618      	mov	r0, r3
 80007c4:	f004 fb5c 	bl	8004e80 <HAL_TIM_PWM_Stop>
	  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007c8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80007cc:	4618      	mov	r0, r3
 80007ce:	f004 fa40 	bl	8004c52 <HAL_TIM_PWM_Init>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <LCD_backlight_set+0xa0>
	  {
	    Error_Handler();
 80007d8:	f001 f946 	bl	8001a68 <Error_Handler>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007dc:	2300      	movs	r3, #0
 80007de:	64bb      	str	r3, [r7, #72]	; 0x48
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007e0:	2300      	movs	r3, #0
 80007e2:	64fb      	str	r3, [r7, #76]	; 0x4c
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007e4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80007e8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80007ec:	4611      	mov	r1, r2
 80007ee:	4618      	mov	r0, r3
 80007f0:	f004 feee 	bl	80055d0 <HAL_TIMEx_MasterConfigSynchronization>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <LCD_backlight_set+0xc2>
	  {
	    Error_Handler();
 80007fa:	f001 f935 	bl	8001a68 <Error_Handler>
	  }
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007fe:	2360      	movs	r3, #96	; 0x60
 8000800:	62fb      	str	r3, [r7, #44]	; 0x2c
	  sConfigOC.Pulse = pwm;
 8000802:	88fb      	ldrh	r3, [r7, #6]
 8000804:	633b      	str	r3, [r7, #48]	; 0x30
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000806:	2300      	movs	r3, #0
 8000808:	637b      	str	r3, [r7, #52]	; 0x34
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800080a:	2300      	movs	r3, #0
 800080c:	63fb      	str	r3, [r7, #60]	; 0x3c
	  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800080e:	2300      	movs	r3, #0
 8000810:	643b      	str	r3, [r7, #64]	; 0x40
	  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000812:	2300      	movs	r3, #0
 8000814:	647b      	str	r3, [r7, #68]	; 0x44
	  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000816:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800081a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800081e:	220c      	movs	r2, #12
 8000820:	4618      	mov	r0, r3
 8000822:	f004 fb9d 	bl	8004f60 <HAL_TIM_PWM_ConfigChannel>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <LCD_backlight_set+0xf4>
	  {
	    Error_Handler();
 800082c:	f001 f91c 	bl	8001a68 <Error_Handler>
	  }
	  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000830:	2300      	movs	r3, #0
 8000832:	60fb      	str	r3, [r7, #12]
	  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000834:	2300      	movs	r3, #0
 8000836:	613b      	str	r3, [r7, #16]
	  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000838:	2300      	movs	r3, #0
 800083a:	617b      	str	r3, [r7, #20]
	  sBreakDeadTimeConfig.DeadTime = 0;
 800083c:	2300      	movs	r3, #0
 800083e:	61bb      	str	r3, [r7, #24]
	  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000840:	2300      	movs	r3, #0
 8000842:	61fb      	str	r3, [r7, #28]
	  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000844:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000848:	623b      	str	r3, [r7, #32]
	  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800084a:	2300      	movs	r3, #0
 800084c:	62bb      	str	r3, [r7, #40]	; 0x28
	  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800084e:	f107 020c 	add.w	r2, r7, #12
 8000852:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000856:	4611      	mov	r1, r2
 8000858:	4618      	mov	r0, r3
 800085a:	f004 ff35 	bl	80056c8 <HAL_TIMEx_ConfigBreakDeadTime>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <LCD_backlight_set+0x12c>
	  {
	    Error_Handler();
 8000864:	f001 f900 	bl	8001a68 <Error_Handler>
	  }

	  HAL_TIM_MspPostInit(&htim1);
 8000868:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800086c:	4618      	mov	r0, r3
 800086e:	f001 fa07 	bl	8001c80 <HAL_TIM_MspPostInit>
	  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_4);
 8000872:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000876:	210c      	movs	r1, #12
 8000878:	4618      	mov	r0, r3
 800087a:	f004 fa39 	bl	8004cf0 <HAL_TIM_PWM_Start>


}
 800087e:	bf00      	nop
 8000880:	3798      	adds	r7, #152	; 0x98
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	51eb851f 	.word	0x51eb851f
 800088c:	40010000 	.word	0x40010000

08000890 <LCD_WritePixel>:
inline void LCD_WritePixel(uint16_t x, uint16_t y, uint16_t color){
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	80fb      	strh	r3, [r7, #6]
 800089a:	460b      	mov	r3, r1
 800089c:	80bb      	strh	r3, [r7, #4]
 800089e:	4613      	mov	r3, r2
 80008a0:	807b      	strh	r3, [r7, #2]

	LCD_set_coordinates(x,y,x,y);
 80008a2:	88bb      	ldrh	r3, [r7, #4]
 80008a4:	88fa      	ldrh	r2, [r7, #6]
 80008a6:	88b9      	ldrh	r1, [r7, #4]
 80008a8:	88f8      	ldrh	r0, [r7, #6]
 80008aa:	f7ff fecd 	bl	8000648 <LCD_set_coordinates>
	ili9488_showArray_wo_coordinates(color,1);
 80008ae:	887b      	ldrh	r3, [r7, #2]
 80008b0:	2101      	movs	r1, #1
 80008b2:	4618      	mov	r0, r3
 80008b4:	f000 fa8e 	bl	8000dd4 <ili9488_showArray_wo_coordinates>
}
 80008b8:	bf00      	nop
 80008ba:	3708      	adds	r7, #8
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}

080008c0 <interrupt_initialize_priorities>:
static void interrupt_initialize_priorities()
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4); //4 bits for preemp priority 0 bit for sub priority
 80008c4:	2003      	movs	r0, #3
 80008c6:	f002 f87b 	bl	80029c0 <HAL_NVIC_SetPriorityGrouping>
}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
	...

080008d0 <iopins_ini>:
static void iopins_ini()
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b098      	sub	sp, #96	; 0x60
 80008d4:	af00      	add	r7, sp, #0

	 __GPIOC_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80008da:	4bac      	ldr	r3, [pc, #688]	; (8000b8c <iopins_ini+0x2bc>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	4aab      	ldr	r2, [pc, #684]	; (8000b8c <iopins_ini+0x2bc>)
 80008e0:	f043 0304 	orr.w	r3, r3, #4
 80008e4:	6313      	str	r3, [r2, #48]	; 0x30
 80008e6:	4ba9      	ldr	r3, [pc, #676]	; (8000b8c <iopins_ini+0x2bc>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	f003 0304 	and.w	r3, r3, #4
 80008ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80008f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
	 __GPIOD_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	647b      	str	r3, [r7, #68]	; 0x44
 80008f6:	4ba5      	ldr	r3, [pc, #660]	; (8000b8c <iopins_ini+0x2bc>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	4aa4      	ldr	r2, [pc, #656]	; (8000b8c <iopins_ini+0x2bc>)
 80008fc:	f043 0308 	orr.w	r3, r3, #8
 8000900:	6313      	str	r3, [r2, #48]	; 0x30
 8000902:	4ba2      	ldr	r3, [pc, #648]	; (8000b8c <iopins_ini+0x2bc>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	f003 0308 	and.w	r3, r3, #8
 800090a:	647b      	str	r3, [r7, #68]	; 0x44
 800090c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
	 __GPIOA_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	643b      	str	r3, [r7, #64]	; 0x40
 8000912:	4b9e      	ldr	r3, [pc, #632]	; (8000b8c <iopins_ini+0x2bc>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	4a9d      	ldr	r2, [pc, #628]	; (8000b8c <iopins_ini+0x2bc>)
 8000918:	f043 0301 	orr.w	r3, r3, #1
 800091c:	6313      	str	r3, [r2, #48]	; 0x30
 800091e:	4b9b      	ldr	r3, [pc, #620]	; (8000b8c <iopins_ini+0x2bc>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	f003 0301 	and.w	r3, r3, #1
 8000926:	643b      	str	r3, [r7, #64]	; 0x40
 8000928:	6c3b      	ldr	r3, [r7, #64]	; 0x40
	 __GPIOB_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800092e:	4b97      	ldr	r3, [pc, #604]	; (8000b8c <iopins_ini+0x2bc>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	4a96      	ldr	r2, [pc, #600]	; (8000b8c <iopins_ini+0x2bc>)
 8000934:	f043 0302 	orr.w	r3, r3, #2
 8000938:	6313      	str	r3, [r2, #48]	; 0x30
 800093a:	4b94      	ldr	r3, [pc, #592]	; (8000b8c <iopins_ini+0x2bc>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	f003 0302 	and.w	r3, r3, #2
 8000942:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000944:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
	GPIO_InitTypeDef GPIO_InitStruct;

    BUZZER_PORT_RCC();
 8000946:	2300      	movs	r3, #0
 8000948:	63bb      	str	r3, [r7, #56]	; 0x38
 800094a:	4b90      	ldr	r3, [pc, #576]	; (8000b8c <iopins_ini+0x2bc>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	4a8f      	ldr	r2, [pc, #572]	; (8000b8c <iopins_ini+0x2bc>)
 8000950:	f043 0308 	orr.w	r3, r3, #8
 8000954:	6313      	str	r3, [r2, #48]	; 0x30
 8000956:	4b8d      	ldr	r3, [pc, #564]	; (8000b8c <iopins_ini+0x2bc>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	f003 0308 	and.w	r3, r3, #8
 800095e:	63bb      	str	r3, [r7, #56]	; 0x38
 8000960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Pin = BUZZER;
 8000962:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000966:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000968:	2301      	movs	r3, #1
 800096a:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096c:	2300      	movs	r3, #0
 800096e:	65bb      	str	r3, [r7, #88]	; 0x58
	HAL_GPIO_Init(BUZZER_PORT, &GPIO_InitStruct);
 8000970:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000974:	4619      	mov	r1, r3
 8000976:	4886      	ldr	r0, [pc, #536]	; (8000b90 <iopins_ini+0x2c0>)
 8000978:	f002 f8f6 	bl	8002b68 <HAL_GPIO_Init>

    RS485DIR_PORT_RCC();
 800097c:	2300      	movs	r3, #0
 800097e:	637b      	str	r3, [r7, #52]	; 0x34
 8000980:	4b82      	ldr	r3, [pc, #520]	; (8000b8c <iopins_ini+0x2bc>)
 8000982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000984:	4a81      	ldr	r2, [pc, #516]	; (8000b8c <iopins_ini+0x2bc>)
 8000986:	f043 0301 	orr.w	r3, r3, #1
 800098a:	6313      	str	r3, [r2, #48]	; 0x30
 800098c:	4b7f      	ldr	r3, [pc, #508]	; (8000b8c <iopins_ini+0x2bc>)
 800098e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000990:	f003 0301 	and.w	r3, r3, #1
 8000994:	637b      	str	r3, [r7, #52]	; 0x34
 8000996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Pin = RS485DIR;
 8000998:	2302      	movs	r3, #2
 800099a:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099c:	2301      	movs	r3, #1
 800099e:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a0:	2300      	movs	r3, #0
 80009a2:	65bb      	str	r3, [r7, #88]	; 0x58
	HAL_GPIO_Init(RS485DIR_PORT, &GPIO_InitStruct);
 80009a4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80009a8:	4619      	mov	r1, r3
 80009aa:	487a      	ldr	r0, [pc, #488]	; (8000b94 <iopins_ini+0x2c4>)
 80009ac:	f002 f8dc 	bl	8002b68 <HAL_GPIO_Init>

    LCD_CS_PORT_RCC();
 80009b0:	2300      	movs	r3, #0
 80009b2:	633b      	str	r3, [r7, #48]	; 0x30
 80009b4:	4b75      	ldr	r3, [pc, #468]	; (8000b8c <iopins_ini+0x2bc>)
 80009b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b8:	4a74      	ldr	r2, [pc, #464]	; (8000b8c <iopins_ini+0x2bc>)
 80009ba:	f043 0308 	orr.w	r3, r3, #8
 80009be:	6313      	str	r3, [r2, #48]	; 0x30
 80009c0:	4b72      	ldr	r3, [pc, #456]	; (8000b8c <iopins_ini+0x2bc>)
 80009c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c4:	f003 0308 	and.w	r3, r3, #8
 80009c8:	633b      	str	r3, [r7, #48]	; 0x30
 80009ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pin = LCD_CS;
 80009cc:	2380      	movs	r3, #128	; 0x80
 80009ce:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d0:	2301      	movs	r3, #1
 80009d2:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d4:	2303      	movs	r3, #3
 80009d6:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(LCD_CS_PORT, &GPIO_InitStruct);
 80009d8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80009dc:	4619      	mov	r1, r3
 80009de:	486c      	ldr	r0, [pc, #432]	; (8000b90 <iopins_ini+0x2c0>)
 80009e0:	f002 f8c2 	bl	8002b68 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(LCD_CS_PORT,LCD_CS,GPIO_PIN_SET);
 80009e4:	2201      	movs	r2, #1
 80009e6:	2180      	movs	r1, #128	; 0x80
 80009e8:	4869      	ldr	r0, [pc, #420]	; (8000b90 <iopins_ini+0x2c0>)
 80009ea:	f002 fa59 	bl	8002ea0 <HAL_GPIO_WritePin>

    LCD_RES_PORT_RCC();
 80009ee:	2300      	movs	r3, #0
 80009f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80009f2:	4b66      	ldr	r3, [pc, #408]	; (8000b8c <iopins_ini+0x2bc>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	4a65      	ldr	r2, [pc, #404]	; (8000b8c <iopins_ini+0x2bc>)
 80009f8:	f043 0301 	orr.w	r3, r3, #1
 80009fc:	6313      	str	r3, [r2, #48]	; 0x30
 80009fe:	4b63      	ldr	r3, [pc, #396]	; (8000b8c <iopins_ini+0x2bc>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	f003 0301 	and.w	r3, r3, #1
 8000a06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Pin = LCD_RES;
 8000a0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a0e:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a10:	2301      	movs	r3, #1
 8000a12:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed =GPIO_SPEED_FREQ_VERY_HIGH;
 8000a14:	2303      	movs	r3, #3
 8000a16:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(LCD_RES_PORT, &GPIO_InitStruct);
 8000a18:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	485d      	ldr	r0, [pc, #372]	; (8000b94 <iopins_ini+0x2c4>)
 8000a20:	f002 f8a2 	bl	8002b68 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(LCD_RES_PORT,LCD_RES,GPIO_PIN_RESET);
 8000a24:	2200      	movs	r2, #0
 8000a26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a2a:	485a      	ldr	r0, [pc, #360]	; (8000b94 <iopins_ini+0x2c4>)
 8000a2c:	f002 fa38 	bl	8002ea0 <HAL_GPIO_WritePin>
	delay_ms(50);
 8000a30:	2032      	movs	r0, #50	; 0x32
 8000a32:	f000 fa07 	bl	8000e44 <delay_ms>
	HAL_GPIO_WritePin(LCD_RES_PORT,LCD_RES,GPIO_PIN_SET);
 8000a36:	2201      	movs	r2, #1
 8000a38:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a3c:	4855      	ldr	r0, [pc, #340]	; (8000b94 <iopins_ini+0x2c4>)
 8000a3e:	f002 fa2f 	bl	8002ea0 <HAL_GPIO_WritePin>

    LCD_DCX_PORT_RCC();
 8000a42:	2300      	movs	r3, #0
 8000a44:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a46:	4b51      	ldr	r3, [pc, #324]	; (8000b8c <iopins_ini+0x2bc>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	4a50      	ldr	r2, [pc, #320]	; (8000b8c <iopins_ini+0x2bc>)
 8000a4c:	f043 0308 	orr.w	r3, r3, #8
 8000a50:	6313      	str	r3, [r2, #48]	; 0x30
 8000a52:	4b4e      	ldr	r3, [pc, #312]	; (8000b8c <iopins_ini+0x2bc>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	f003 0308 	and.w	r3, r3, #8
 8000a5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pin = LCD_DCX;
 8000a5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a62:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a64:	2301      	movs	r3, #1
 8000a66:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed =GPIO_SPEED_FREQ_VERY_HIGH;
 8000a68:	2303      	movs	r3, #3
 8000a6a:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(LCD_DCX_PORT, &GPIO_InitStruct);
 8000a6c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a70:	4619      	mov	r1, r3
 8000a72:	4847      	ldr	r0, [pc, #284]	; (8000b90 <iopins_ini+0x2c0>)
 8000a74:	f002 f878 	bl	8002b68 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(LCD_DCX_PORT,LCD_DCX,GPIO_PIN_SET);
 8000a78:	2201      	movs	r2, #1
 8000a7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a7e:	4844      	ldr	r0, [pc, #272]	; (8000b90 <iopins_ini+0x2c0>)
 8000a80:	f002 fa0e 	bl	8002ea0 <HAL_GPIO_WritePin>

    FLASH_CS_PORT_RCC();
 8000a84:	2300      	movs	r3, #0
 8000a86:	627b      	str	r3, [r7, #36]	; 0x24
 8000a88:	4b40      	ldr	r3, [pc, #256]	; (8000b8c <iopins_ini+0x2bc>)
 8000a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8c:	4a3f      	ldr	r2, [pc, #252]	; (8000b8c <iopins_ini+0x2bc>)
 8000a8e:	f043 0301 	orr.w	r3, r3, #1
 8000a92:	6313      	str	r3, [r2, #48]	; 0x30
 8000a94:	4b3d      	ldr	r3, [pc, #244]	; (8000b8c <iopins_ini+0x2bc>)
 8000a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a98:	f003 0301 	and.w	r3, r3, #1
 8000a9c:	627b      	str	r3, [r7, #36]	; 0x24
 8000a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Pin = FLASH_CS;
 8000aa0:	2310      	movs	r3, #16
 8000aa2:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed =GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa8:	2303      	movs	r3, #3
 8000aaa:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(FLASH_CS_PORT, &GPIO_InitStruct);
 8000aac:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4838      	ldr	r0, [pc, #224]	; (8000b94 <iopins_ini+0x2c4>)
 8000ab4:	f002 f858 	bl	8002b68 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(FLASH_CS_PORT,FLASH_CS,GPIO_PIN_SET);
 8000ab8:	2201      	movs	r2, #1
 8000aba:	2110      	movs	r1, #16
 8000abc:	4835      	ldr	r0, [pc, #212]	; (8000b94 <iopins_ini+0x2c4>)
 8000abe:	f002 f9ef 	bl	8002ea0 <HAL_GPIO_WritePin>

    FLASH_WP_PORT_RCC();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	623b      	str	r3, [r7, #32]
 8000ac6:	4b31      	ldr	r3, [pc, #196]	; (8000b8c <iopins_ini+0x2bc>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	4a30      	ldr	r2, [pc, #192]	; (8000b8c <iopins_ini+0x2bc>)
 8000acc:	f043 0304 	orr.w	r3, r3, #4
 8000ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad2:	4b2e      	ldr	r3, [pc, #184]	; (8000b8c <iopins_ini+0x2bc>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	f003 0304 	and.w	r3, r3, #4
 8000ada:	623b      	str	r3, [r7, #32]
 8000adc:	6a3b      	ldr	r3, [r7, #32]
	GPIO_InitStruct.Pin = FLASH_WP;
 8000ade:	2310      	movs	r3, #16
 8000ae0:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(FLASH_WP_PORT, &GPIO_InitStruct);
 8000aea:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000aee:	4619      	mov	r1, r3
 8000af0:	4829      	ldr	r0, [pc, #164]	; (8000b98 <iopins_ini+0x2c8>)
 8000af2:	f002 f839 	bl	8002b68 <HAL_GPIO_Init>
	 HAL_GPIO_WritePin(FLASH_WP_PORT,FLASH_WP,GPIO_PIN_RESET);
 8000af6:	2200      	movs	r2, #0
 8000af8:	2110      	movs	r1, #16
 8000afa:	4827      	ldr	r0, [pc, #156]	; (8000b98 <iopins_ini+0x2c8>)
 8000afc:	f002 f9d0 	bl	8002ea0 <HAL_GPIO_WritePin>

    FRAM_CS_PORT_RCC();
 8000b00:	2300      	movs	r3, #0
 8000b02:	61fb      	str	r3, [r7, #28]
 8000b04:	4b21      	ldr	r3, [pc, #132]	; (8000b8c <iopins_ini+0x2bc>)
 8000b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b08:	4a20      	ldr	r2, [pc, #128]	; (8000b8c <iopins_ini+0x2bc>)
 8000b0a:	f043 0302 	orr.w	r3, r3, #2
 8000b0e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b10:	4b1e      	ldr	r3, [pc, #120]	; (8000b8c <iopins_ini+0x2bc>)
 8000b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b14:	f003 0302 	and.w	r3, r3, #2
 8000b18:	61fb      	str	r3, [r7, #28]
 8000b1a:	69fb      	ldr	r3, [r7, #28]
	GPIO_InitStruct.Pin = FRAM_CS;
 8000b1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b20:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b22:	2301      	movs	r3, #1
 8000b24:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed =GPIO_SPEED_FREQ_VERY_HIGH;
 8000b26:	2303      	movs	r3, #3
 8000b28:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(FRAM_CS_PORT, &GPIO_InitStruct);
 8000b2a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000b2e:	4619      	mov	r1, r3
 8000b30:	481a      	ldr	r0, [pc, #104]	; (8000b9c <iopins_ini+0x2cc>)
 8000b32:	f002 f819 	bl	8002b68 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(FRAM_CS_PORT,FRAM_CS,GPIO_PIN_SET);
 8000b36:	2201      	movs	r2, #1
 8000b38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b3c:	4817      	ldr	r0, [pc, #92]	; (8000b9c <iopins_ini+0x2cc>)
 8000b3e:	f002 f9af 	bl	8002ea0 <HAL_GPIO_WritePin>

    FRAM_HOLD_PORT_RCC();
 8000b42:	2300      	movs	r3, #0
 8000b44:	61bb      	str	r3, [r7, #24]
 8000b46:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <iopins_ini+0x2bc>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	4a10      	ldr	r2, [pc, #64]	; (8000b8c <iopins_ini+0x2bc>)
 8000b4c:	f043 0304 	orr.w	r3, r3, #4
 8000b50:	6313      	str	r3, [r2, #48]	; 0x30
 8000b52:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <iopins_ini+0x2bc>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	f003 0304 	and.w	r3, r3, #4
 8000b5a:	61bb      	str	r3, [r7, #24]
 8000b5c:	69bb      	ldr	r3, [r7, #24]
	GPIO_InitStruct.Pin = FRAM_HOLD;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b62:	2301      	movs	r3, #1
 8000b64:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed =GPIO_SPEED_FREQ_VERY_HIGH;
 8000b66:	2303      	movs	r3, #3
 8000b68:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(FRAM_HOLD_PORT, &GPIO_InitStruct);
 8000b6a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4809      	ldr	r0, [pc, #36]	; (8000b98 <iopins_ini+0x2c8>)
 8000b72:	f001 fff9 	bl	8002b68 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(FRAM_HOLD_PORT,FRAM_HOLD,GPIO_PIN_SET);
 8000b76:	2201      	movs	r2, #1
 8000b78:	2102      	movs	r1, #2
 8000b7a:	4807      	ldr	r0, [pc, #28]	; (8000b98 <iopins_ini+0x2c8>)
 8000b7c:	f002 f990 	bl	8002ea0 <HAL_GPIO_WritePin>

    FRAM_WP_PORT_RCC();
 8000b80:	2300      	movs	r3, #0
 8000b82:	617b      	str	r3, [r7, #20]
 8000b84:	4b01      	ldr	r3, [pc, #4]	; (8000b8c <iopins_ini+0x2bc>)
 8000b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b88:	e00a      	b.n	8000ba0 <iopins_ini+0x2d0>
 8000b8a:	bf00      	nop
 8000b8c:	40023800 	.word	0x40023800
 8000b90:	40020c00 	.word	0x40020c00
 8000b94:	40020000 	.word	0x40020000
 8000b98:	40020800 	.word	0x40020800
 8000b9c:	40020400 	.word	0x40020400
 8000ba0:	4a4b      	ldr	r2, [pc, #300]	; (8000cd0 <iopins_ini+0x400>)
 8000ba2:	f043 0304 	orr.w	r3, r3, #4
 8000ba6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba8:	4b49      	ldr	r3, [pc, #292]	; (8000cd0 <iopins_ini+0x400>)
 8000baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bac:	f003 0304 	and.w	r3, r3, #4
 8000bb0:	617b      	str	r3, [r7, #20]
 8000bb2:	697b      	ldr	r3, [r7, #20]
	GPIO_InitStruct.Pin = FRAM_WP;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(FRAM_WP_PORT, &GPIO_InitStruct);
 8000bc0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4843      	ldr	r0, [pc, #268]	; (8000cd4 <iopins_ini+0x404>)
 8000bc8:	f001 ffce 	bl	8002b68 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(FRAM_WP_PORT,FRAM_WP,GPIO_PIN_SET);
 8000bcc:	2201      	movs	r2, #1
 8000bce:	2101      	movs	r1, #1
 8000bd0:	4840      	ldr	r0, [pc, #256]	; (8000cd4 <iopins_ini+0x404>)
 8000bd2:	f002 f965 	bl	8002ea0 <HAL_GPIO_WritePin>


    LED_DBG_PORT_RCC();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	613b      	str	r3, [r7, #16]
 8000bda:	4b3d      	ldr	r3, [pc, #244]	; (8000cd0 <iopins_ini+0x400>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	4a3c      	ldr	r2, [pc, #240]	; (8000cd0 <iopins_ini+0x400>)
 8000be0:	f043 0302 	orr.w	r3, r3, #2
 8000be4:	6313      	str	r3, [r2, #48]	; 0x30
 8000be6:	4b3a      	ldr	r3, [pc, #232]	; (8000cd0 <iopins_ini+0x400>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	f003 0302 	and.w	r3, r3, #2
 8000bee:	613b      	str	r3, [r7, #16]
 8000bf0:	693b      	ldr	r3, [r7, #16]
	GPIO_InitStruct.Pin = LED_DBG_1;
 8000bf2:	2308      	movs	r3, #8
 8000bf4:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(LED_DBG_PORT, &GPIO_InitStruct);
 8000bfe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000c02:	4619      	mov	r1, r3
 8000c04:	4834      	ldr	r0, [pc, #208]	; (8000cd8 <iopins_ini+0x408>)
 8000c06:	f001 ffaf 	bl	8002b68 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(LED_DBG_PORT,LED_DBG_1,GPIO_PIN_SET);
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	2108      	movs	r1, #8
 8000c0e:	4832      	ldr	r0, [pc, #200]	; (8000cd8 <iopins_ini+0x408>)
 8000c10:	f002 f946 	bl	8002ea0 <HAL_GPIO_WritePin>


    BUTTON_0_PORT_RCC();
 8000c14:	2300      	movs	r3, #0
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	4b2d      	ldr	r3, [pc, #180]	; (8000cd0 <iopins_ini+0x400>)
 8000c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1c:	4a2c      	ldr	r2, [pc, #176]	; (8000cd0 <iopins_ini+0x400>)
 8000c1e:	f043 0301 	orr.w	r3, r3, #1
 8000c22:	6313      	str	r3, [r2, #48]	; 0x30
 8000c24:	4b2a      	ldr	r3, [pc, #168]	; (8000cd0 <iopins_ini+0x400>)
 8000c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c28:	f003 0301 	and.w	r3, r3, #1
 8000c2c:	60fb      	str	r3, [r7, #12]
 8000c2e:	68fb      	ldr	r3, [r7, #12]
	GPIO_InitStruct.Pin = BUTTON_0;
 8000c30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c34:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c36:	2300      	movs	r3, #0
 8000c38:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Pull= GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	657b      	str	r3, [r7, #84]	; 0x54
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(BUTTON_0_PORT, &GPIO_InitStruct);
 8000c42:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000c46:	4619      	mov	r1, r3
 8000c48:	4824      	ldr	r0, [pc, #144]	; (8000cdc <iopins_ini+0x40c>)
 8000c4a:	f001 ff8d 	bl	8002b68 <HAL_GPIO_Init>

    BUTTON_1_PORT_RCC();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60bb      	str	r3, [r7, #8]
 8000c52:	4b1f      	ldr	r3, [pc, #124]	; (8000cd0 <iopins_ini+0x400>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	4a1e      	ldr	r2, [pc, #120]	; (8000cd0 <iopins_ini+0x400>)
 8000c58:	f043 0304 	orr.w	r3, r3, #4
 8000c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5e:	4b1c      	ldr	r3, [pc, #112]	; (8000cd0 <iopins_ini+0x400>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	f003 0304 	and.w	r3, r3, #4
 8000c66:	60bb      	str	r3, [r7, #8]
 8000c68:	68bb      	ldr	r3, [r7, #8]
	GPIO_InitStruct.Pin = BUTTON_1;
 8000c6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c6e:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c70:	2300      	movs	r3, #0
 8000c72:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Pull= GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	657b      	str	r3, [r7, #84]	; 0x54
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(BUTTON_1_PORT, &GPIO_InitStruct);
 8000c7c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000c80:	4619      	mov	r1, r3
 8000c82:	4814      	ldr	r0, [pc, #80]	; (8000cd4 <iopins_ini+0x404>)
 8000c84:	f001 ff70 	bl	8002b68 <HAL_GPIO_Init>


    TOUCH_RESET_PORT_RCC();
 8000c88:	2300      	movs	r3, #0
 8000c8a:	607b      	str	r3, [r7, #4]
 8000c8c:	4b10      	ldr	r3, [pc, #64]	; (8000cd0 <iopins_ini+0x400>)
 8000c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c90:	4a0f      	ldr	r2, [pc, #60]	; (8000cd0 <iopins_ini+0x400>)
 8000c92:	f043 0302 	orr.w	r3, r3, #2
 8000c96:	6313      	str	r3, [r2, #48]	; 0x30
 8000c98:	4b0d      	ldr	r3, [pc, #52]	; (8000cd0 <iopins_ini+0x400>)
 8000c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9c:	f003 0302 	and.w	r3, r3, #2
 8000ca0:	607b      	str	r3, [r7, #4]
 8000ca2:	687b      	ldr	r3, [r7, #4]
	GPIO_InitStruct.Pin = TOUCH_RESET;
 8000ca4:	2320      	movs	r3, #32
 8000ca6:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cac:	2300      	movs	r3, #0
 8000cae:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(TOUCH_RESET_PORT, &GPIO_InitStruct);
 8000cb0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4808      	ldr	r0, [pc, #32]	; (8000cd8 <iopins_ini+0x408>)
 8000cb8:	f001 ff56 	bl	8002b68 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(TOUCH_RESET_PORT,TOUCH_RESET,GPIO_PIN_SET);
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	2120      	movs	r1, #32
 8000cc0:	4805      	ldr	r0, [pc, #20]	; (8000cd8 <iopins_ini+0x408>)
 8000cc2:	f002 f8ed 	bl	8002ea0 <HAL_GPIO_WritePin>
}
 8000cc6:	bf00      	nop
 8000cc8:	3760      	adds	r7, #96	; 0x60
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40023800 	.word	0x40023800
 8000cd4:	40020800 	.word	0x40020800
 8000cd8:	40020400 	.word	0x40020400
 8000cdc:	40020000 	.word	0x40020000

08000ce0 <initialize_ili9488>:
static void initialize_ili9488()
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af02      	add	r7, sp, #8
	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_RESET);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cec:	4838      	ldr	r0, [pc, #224]	; (8000dd0 <initialize_ili9488+0xf0>)
 8000cee:	f002 f8d7 	bl	8002ea0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_RESET);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	2180      	movs	r1, #128	; 0x80
 8000cf6:	4836      	ldr	r0, [pc, #216]	; (8000dd0 <initialize_ili9488+0xf0>)
 8000cf8:	f002 f8d2 	bl	8002ea0 <HAL_GPIO_WritePin>
	TFT_REG=0x0011;
 8000cfc:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000d00:	2211      	movs	r2, #17
 8000d02:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_SET);
 8000d04:	2201      	movs	r2, #1
 8000d06:	2180      	movs	r1, #128	; 0x80
 8000d08:	4831      	ldr	r0, [pc, #196]	; (8000dd0 <initialize_ili9488+0xf0>)
 8000d0a:	f002 f8c9 	bl	8002ea0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_RESET);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d14:	482e      	ldr	r0, [pc, #184]	; (8000dd0 <initialize_ili9488+0xf0>)
 8000d16:	f002 f8c3 	bl	8002ea0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS, GPIO_PIN_RESET);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2180      	movs	r1, #128	; 0x80
 8000d1e:	482c      	ldr	r0, [pc, #176]	; (8000dd0 <initialize_ili9488+0xf0>)
 8000d20:	f002 f8be 	bl	8002ea0 <HAL_GPIO_WritePin>
	TFT_REG=0x0029;
 8000d24:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000d28:	2229      	movs	r2, #41	; 0x29
 8000d2a:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS, GPIO_PIN_SET);
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	2180      	movs	r1, #128	; 0x80
 8000d30:	4827      	ldr	r0, [pc, #156]	; (8000dd0 <initialize_ili9488+0xf0>)
 8000d32:	f002 f8b5 	bl	8002ea0 <HAL_GPIO_WritePin>


	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_RESET);
 8000d36:	2200      	movs	r2, #0
 8000d38:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d3c:	4824      	ldr	r0, [pc, #144]	; (8000dd0 <initialize_ili9488+0xf0>)
 8000d3e:	f002 f8af 	bl	8002ea0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_RESET);
 8000d42:	2200      	movs	r2, #0
 8000d44:	2180      	movs	r1, #128	; 0x80
 8000d46:	4822      	ldr	r0, [pc, #136]	; (8000dd0 <initialize_ili9488+0xf0>)
 8000d48:	f002 f8aa 	bl	8002ea0 <HAL_GPIO_WritePin>
	TFT_REG=0x003A;
 8000d4c:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000d50:	223a      	movs	r2, #58	; 0x3a
 8000d52:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_SET);
 8000d54:	2201      	movs	r2, #1
 8000d56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d5a:	481d      	ldr	r0, [pc, #116]	; (8000dd0 <initialize_ili9488+0xf0>)
 8000d5c:	f002 f8a0 	bl	8002ea0 <HAL_GPIO_WritePin>
	TFT_REG=0x0055;
 8000d60:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000d64:	2255      	movs	r2, #85	; 0x55
 8000d66:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS, GPIO_PIN_RESET);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	2180      	movs	r1, #128	; 0x80
 8000d6c:	4818      	ldr	r0, [pc, #96]	; (8000dd0 <initialize_ili9488+0xf0>)
 8000d6e:	f002 f897 	bl	8002ea0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_RESET);
 8000d72:	2200      	movs	r2, #0
 8000d74:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d78:	4815      	ldr	r0, [pc, #84]	; (8000dd0 <initialize_ili9488+0xf0>)
 8000d7a:	f002 f891 	bl	8002ea0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_RESET);
 8000d7e:	2200      	movs	r2, #0
 8000d80:	2180      	movs	r1, #128	; 0x80
 8000d82:	4813      	ldr	r0, [pc, #76]	; (8000dd0 <initialize_ili9488+0xf0>)
 8000d84:	f002 f88c 	bl	8002ea0 <HAL_GPIO_WritePin>
	TFT_REG=0x0036;
 8000d88:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000d8c:	2236      	movs	r2, #54	; 0x36
 8000d8e:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_SET);
 8000d90:	2201      	movs	r2, #1
 8000d92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d96:	480e      	ldr	r0, [pc, #56]	; (8000dd0 <initialize_ili9488+0xf0>)
 8000d98:	f002 f882 	bl	8002ea0 <HAL_GPIO_WritePin>
	TFT_REG=0x00E8;
 8000d9c:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000da0:	22e8      	movs	r2, #232	; 0xe8
 8000da2:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_RESET);
 8000da4:	2200      	movs	r2, #0
 8000da6:	2180      	movs	r1, #128	; 0x80
 8000da8:	4809      	ldr	r0, [pc, #36]	; (8000dd0 <initialize_ili9488+0xf0>)
 8000daa:	f002 f879 	bl	8002ea0 <HAL_GPIO_WritePin>

	delay_ms(100);
 8000dae:	2064      	movs	r0, #100	; 0x64
 8000db0:	f000 f848 	bl	8000e44 <delay_ms>
	LCD_fillRect(0,0,LCD_PIXEL_WIDTH,LCD_PIXEL_HEIGHT,ORANGE);
 8000db4:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8000db8:	9300      	str	r3, [sp, #0]
 8000dba:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000dbe:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	2000      	movs	r0, #0
 8000dc6:	f7ff fbeb 	bl	80005a0 <LCD_fillRect>
}
 8000dca:	bf00      	nop
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	40020c00 	.word	0x40020c00

08000dd4 <ili9488_showArray_wo_coordinates>:

static void ili9488_showArray_wo_coordinates(uint16_t *data, uint32_t count)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX, GPIO_PIN_RESET);
 8000dde:	2200      	movs	r2, #0
 8000de0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000de4:	4816      	ldr	r0, [pc, #88]	; (8000e40 <ili9488_showArray_wo_coordinates+0x6c>)
 8000de6:	f002 f85b 	bl	8002ea0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_RESET);
 8000dea:	2200      	movs	r2, #0
 8000dec:	2180      	movs	r1, #128	; 0x80
 8000dee:	4814      	ldr	r0, [pc, #80]	; (8000e40 <ili9488_showArray_wo_coordinates+0x6c>)
 8000df0:	f002 f856 	bl	8002ea0 <HAL_GPIO_WritePin>
	TFT_REG=0x002C;
 8000df4:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000df8:	222c      	movs	r2, #44	; 0x2c
 8000dfa:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_SET);
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e02:	480f      	ldr	r0, [pc, #60]	; (8000e40 <ili9488_showArray_wo_coordinates+0x6c>)
 8000e04:	f002 f84c 	bl	8002ea0 <HAL_GPIO_WritePin>

	for(unsigned int i=0; i<count; i++)
 8000e08:	2300      	movs	r3, #0
 8000e0a:	60fb      	str	r3, [r7, #12]
 8000e0c:	e00a      	b.n	8000e24 <ili9488_showArray_wo_coordinates+0x50>
	{
		TFT_REG=data[i];
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	687a      	ldr	r2, [r7, #4]
 8000e14:	4413      	add	r3, r2
 8000e16:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000e1a:	881b      	ldrh	r3, [r3, #0]
 8000e1c:	8013      	strh	r3, [r2, #0]
	for(unsigned int i=0; i<count; i++)
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	3301      	adds	r3, #1
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	68fa      	ldr	r2, [r7, #12]
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	d3f0      	bcc.n	8000e0e <ili9488_showArray_wo_coordinates+0x3a>
	}
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_SET);
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	2180      	movs	r1, #128	; 0x80
 8000e30:	4803      	ldr	r0, [pc, #12]	; (8000e40 <ili9488_showArray_wo_coordinates+0x6c>)
 8000e32:	f002 f835 	bl	8002ea0 <HAL_GPIO_WritePin>
}
 8000e36:	bf00      	nop
 8000e38:	3710      	adds	r7, #16
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40020c00 	.word	0x40020c00

08000e44 <delay_ms>:
static void delay_ms(__IO uint32_t nCount1) {
 8000e44:	b480      	push	{r7}
 8000e46:	b085      	sub	sp, #20
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
	__IO uint32_t nCount=nCount1*23666;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f645 4272 	movw	r2, #23666	; 0x5c72
 8000e52:	fb02 f303 	mul.w	r3, r2, r3
 8000e56:	60fb      	str	r3, [r7, #12]
	while(nCount--) {
 8000e58:	bf00      	nop
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	1e5a      	subs	r2, r3, #1
 8000e5e:	60fa      	str	r2, [r7, #12]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d1fa      	bne.n	8000e5a <delay_ms+0x16>
  }
}
 8000e64:	bf00      	nop
 8000e66:	bf00      	nop
 8000e68:	3714      	adds	r7, #20
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
	...

08000e74 <Init_TOUCH>:
static void touch_write_control(unsigned char ctrl);
static void touch_write_register(uint8_t adr, uint16_t val);
static void delay_ms(__IO uint32_t nCount1);

void Init_TOUCH(I2C_HandleTypeDef def)
{
 8000e74:	b084      	sub	sp, #16
 8000e76:	b580      	push	{r7, lr}
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	f107 0c08 	add.w	ip, r7, #8
 8000e7e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	hi2c1_touch = def;
 8000e82:	4b0b      	ldr	r3, [pc, #44]	; (8000eb0 <Init_TOUCH+0x3c>)
 8000e84:	4618      	mov	r0, r3
 8000e86:	f107 0308 	add.w	r3, r7, #8
 8000e8a:	2254      	movs	r2, #84	; 0x54
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	f005 fd83 	bl	8006998 <memcpy>
	touch_write_register(0x0E,0xC000);
 8000e92:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000e96:	200e      	movs	r0, #14
 8000e98:	f000 f830 	bl	8000efc <touch_write_register>
	touch_write_control(0x80);
 8000e9c:	2080      	movs	r0, #128	; 0x80
 8000e9e:	f000 f809 	bl	8000eb4 <touch_write_control>
}
 8000ea2:	bf00      	nop
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000eaa:	b004      	add	sp, #16
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	20000094 	.word	0x20000094

08000eb4 <touch_write_control>:
static void touch_write_control(unsigned char ctrl)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b086      	sub	sp, #24
 8000eb8:	af02      	add	r7, sp, #8
 8000eba:	4603      	mov	r3, r0
 8000ebc:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status =0;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	73fb      	strb	r3, [r7, #15]
	status = HAL_I2C_Master_Transmit(&hi2c1_touch, (uint16_t)SLAVE_ADDRESS_TOUCH, &ctrl, 1 ,I2C_DELAY);
 8000ec2:	1dfa      	adds	r2, r7, #7
 8000ec4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ec8:	9300      	str	r3, [sp, #0]
 8000eca:	2301      	movs	r3, #1
 8000ecc:	2190      	movs	r1, #144	; 0x90
 8000ece:	4808      	ldr	r0, [pc, #32]	; (8000ef0 <touch_write_control+0x3c>)
 8000ed0:	f002 f95c 	bl	800318c <HAL_I2C_Master_Transmit>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	73fb      	strb	r3, [r7, #15]
	//I2C_start(I2C1, SLAVE_ADDRESS_TOUCH, I2C_Direction_Transmitter); // start a transmission in Master transmitter mode
	//I2C_write(I2C1, ctrl); // write one byte to the slave
	//I2C_stop(I2C1); // stop the transmissio;
	printf("Write control I2C\n\r");
 8000ed8:	4806      	ldr	r0, [pc, #24]	; (8000ef4 <touch_write_control+0x40>)
 8000eda:	f005 fd73 	bl	80069c4 <iprintf>
	printf ("%d",status);
 8000ede:	7bfb      	ldrb	r3, [r7, #15]
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4805      	ldr	r0, [pc, #20]	; (8000ef8 <touch_write_control+0x44>)
 8000ee4:	f005 fd6e 	bl	80069c4 <iprintf>
}
 8000ee8:	bf00      	nop
 8000eea:	3710      	adds	r7, #16
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	20000094 	.word	0x20000094
 8000ef4:	08007d80 	.word	0x08007d80
 8000ef8:	08007d94 	.word	0x08007d94

08000efc <touch_write_register>:
static void touch_write_register(uint8_t adr, uint16_t val)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b088      	sub	sp, #32
 8000f00:	af04      	add	r7, sp, #16
 8000f02:	4603      	mov	r3, r0
 8000f04:	460a      	mov	r2, r1
 8000f06:	71fb      	strb	r3, [r7, #7]
 8000f08:	4613      	mov	r3, r2
 8000f0a:	80bb      	strh	r3, [r7, #4]

	HAL_StatusTypeDef status =0;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	73fb      	strb	r3, [r7, #15]
	uint8_t data[2];
	data[0] = val>>8;
 8000f10:	88bb      	ldrh	r3, [r7, #4]
 8000f12:	0a1b      	lsrs	r3, r3, #8
 8000f14:	b29b      	uxth	r3, r3
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	733b      	strb	r3, [r7, #12]
	data[1] = (uint8_t)val;
 8000f1a:	88bb      	ldrh	r3, [r7, #4]
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	737b      	strb	r3, [r7, #13]
	status = HAL_I2C_Mem_Write(&hi2c1_touch, (uint16_t)SLAVE_ADDRESS_TOUCH,(adr<<3),I2C_MEMADD_SIZE_8BIT,data,2,I2C_DELAY);
 8000f20:	79fb      	ldrb	r3, [r7, #7]
 8000f22:	b29b      	uxth	r3, r3
 8000f24:	00db      	lsls	r3, r3, #3
 8000f26:	b29a      	uxth	r2, r3
 8000f28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f2c:	9302      	str	r3, [sp, #8]
 8000f2e:	2302      	movs	r3, #2
 8000f30:	9301      	str	r3, [sp, #4]
 8000f32:	f107 030c 	add.w	r3, r7, #12
 8000f36:	9300      	str	r3, [sp, #0]
 8000f38:	2301      	movs	r3, #1
 8000f3a:	2190      	movs	r1, #144	; 0x90
 8000f3c:	4808      	ldr	r0, [pc, #32]	; (8000f60 <touch_write_register+0x64>)
 8000f3e:	f002 fa23 	bl	8003388 <HAL_I2C_Mem_Write>
 8000f42:	4603      	mov	r3, r0
 8000f44:	73fb      	strb	r3, [r7, #15]
	printf ("I2C write register\n\r");
 8000f46:	4807      	ldr	r0, [pc, #28]	; (8000f64 <touch_write_register+0x68>)
 8000f48:	f005 fd3c 	bl	80069c4 <iprintf>
	printf ("status %d \n\r",status);
 8000f4c:	7bfb      	ldrb	r3, [r7, #15]
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4805      	ldr	r0, [pc, #20]	; (8000f68 <touch_write_register+0x6c>)
 8000f52:	f005 fd37 	bl	80069c4 <iprintf>
}
 8000f56:	bf00      	nop
 8000f58:	3710      	adds	r7, #16
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	20000094 	.word	0x20000094
 8000f64:	08007d98 	.word	0x08007d98
 8000f68:	08007db0 	.word	0x08007db0

08000f6c <touch_read>:
static unsigned short touch_read(unsigned char adr)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b088      	sub	sp, #32
 8000f70:	af04      	add	r7, sp, #16
 8000f72:	4603      	mov	r3, r0
 8000f74:	71fb      	strb	r3, [r7, #7]
	unsigned char adr_i2c= 0x01;
 8000f76:	2301      	movs	r3, #1
 8000f78:	73fb      	strb	r3, [r7, #15]
	adr_i2c+=adr<<3;
 8000f7a:	79fb      	ldrb	r3, [r7, #7]
 8000f7c:	00db      	lsls	r3, r3, #3
 8000f7e:	b2da      	uxtb	r2, r3
 8000f80:	7bfb      	ldrb	r3, [r7, #15]
 8000f82:	4413      	add	r3, r2
 8000f84:	73fb      	strb	r3, [r7, #15]
	printf("%d",adr_i2c);
 8000f86:	7bfb      	ldrb	r3, [r7, #15]
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4811      	ldr	r0, [pc, #68]	; (8000fd0 <touch_read+0x64>)
 8000f8c:	f005 fd1a 	bl	80069c4 <iprintf>
	uint8_t data[2];
	HAL_StatusTypeDef status =0;
 8000f90:	2300      	movs	r3, #0
 8000f92:	73bb      	strb	r3, [r7, #14]
	//status = HAL_I2C_Master_Transmit(&hi2c1_touch, (uint16_t)SLAVE_ADDRESS_TOUCH + 0x01, &adr_i2c, 1 ,I2C_DELAY);
	status = HAL_I2C_Mem_Read(&hi2c1_touch, (uint16_t)SLAVE_ADDRESS_TOUCH ,adr_i2c,I2C_MEMADD_SIZE_8BIT,data, 2, I2C_DELAY);
 8000f94:	7bfb      	ldrb	r3, [r7, #15]
 8000f96:	b29a      	uxth	r2, r3
 8000f98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f9c:	9302      	str	r3, [sp, #8]
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	9301      	str	r3, [sp, #4]
 8000fa2:	f107 0308 	add.w	r3, r7, #8
 8000fa6:	9300      	str	r3, [sp, #0]
 8000fa8:	2301      	movs	r3, #1
 8000faa:	2190      	movs	r1, #144	; 0x90
 8000fac:	4809      	ldr	r0, [pc, #36]	; (8000fd4 <touch_read+0x68>)
 8000fae:	f002 fae5 	bl	800357c <HAL_I2C_Mem_Read>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	73bb      	strb	r3, [r7, #14]
	uint16_t result = (data[0] << 8) | (data[1] & 0xFF);
 8000fb6:	7a3b      	ldrb	r3, [r7, #8]
 8000fb8:	021b      	lsls	r3, r3, #8
 8000fba:	b21a      	sxth	r2, r3
 8000fbc:	7a7b      	ldrb	r3, [r7, #9]
 8000fbe:	b21b      	sxth	r3, r3
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	b21b      	sxth	r3, r3
 8000fc4:	81bb      	strh	r3, [r7, #12]
	return result;
 8000fc6:	89bb      	ldrh	r3, [r7, #12]
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3710      	adds	r7, #16
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	08007d94 	.word	0x08007d94
 8000fd4:	20000094 	.word	0x20000094

08000fd8 <touch_reset>:
void touch_reset()
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
 	HAL_GPIO_WritePin(TOUCH_RESET_PORT,TOUCH_RESET,GPIO_PIN_RESET);
 8000fdc:	2200      	movs	r2, #0
 8000fde:	2120      	movs	r1, #32
 8000fe0:	4807      	ldr	r0, [pc, #28]	; (8001000 <touch_reset+0x28>)
 8000fe2:	f001 ff5d 	bl	8002ea0 <HAL_GPIO_WritePin>
 	delay_ms(10);
 8000fe6:	200a      	movs	r0, #10
 8000fe8:	f000 f882 	bl	80010f0 <delay_ms>
 	HAL_GPIO_WritePin(TOUCH_RESET_PORT,TOUCH_RESET,GPIO_PIN_SET);
 8000fec:	2201      	movs	r2, #1
 8000fee:	2120      	movs	r1, #32
 8000ff0:	4803      	ldr	r0, [pc, #12]	; (8001000 <touch_reset+0x28>)
 8000ff2:	f001 ff55 	bl	8002ea0 <HAL_GPIO_WritePin>
 	delay_ms(50);
 8000ff6:	2032      	movs	r0, #50	; 0x32
 8000ff8:	f000 f87a 	bl	80010f0 <delay_ms>
}
 8000ffc:	bf00      	nop
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	40020400 	.word	0x40020400

08001004 <touch_periodic_process>:
//**************************************************************************
void touch_periodic_process()
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0

	if(touch.pressed==1)
 8001008:	4b29      	ldr	r3, [pc, #164]	; (80010b0 <touch_periodic_process+0xac>)
 800100a:	7a1b      	ldrb	r3, [r3, #8]
 800100c:	2b01      	cmp	r3, #1
 800100e:	d14d      	bne.n	80010ac <touch_periodic_process+0xa8>
	{
		touch.pressed=0;
 8001010:	4b27      	ldr	r3, [pc, #156]	; (80010b0 <touch_periodic_process+0xac>)
 8001012:	2200      	movs	r2, #0
 8001014:	721a      	strb	r2, [r3, #8]

		touch.x=touch_read(0x00);
 8001016:	2000      	movs	r0, #0
 8001018:	f7ff ffa8 	bl	8000f6c <touch_read>
 800101c:	4603      	mov	r3, r0
 800101e:	461a      	mov	r2, r3
 8001020:	4b23      	ldr	r3, [pc, #140]	; (80010b0 <touch_periodic_process+0xac>)
 8001022:	801a      	strh	r2, [r3, #0]
		touch.x1=touch_read(0x01);
 8001024:	2001      	movs	r0, #1
 8001026:	f7ff ffa1 	bl	8000f6c <touch_read>
 800102a:	4603      	mov	r3, r0
 800102c:	461a      	mov	r2, r3
 800102e:	4b20      	ldr	r3, [pc, #128]	; (80010b0 <touch_periodic_process+0xac>)
 8001030:	809a      	strh	r2, [r3, #4]
		touch.y=touch_read(0x02);
 8001032:	2002      	movs	r0, #2
 8001034:	f7ff ff9a 	bl	8000f6c <touch_read>
 8001038:	4603      	mov	r3, r0
 800103a:	461a      	mov	r2, r3
 800103c:	4b1c      	ldr	r3, [pc, #112]	; (80010b0 <touch_periodic_process+0xac>)
 800103e:	805a      	strh	r2, [r3, #2]
		touch.y1=touch_read(0x03);
 8001040:	2003      	movs	r0, #3
 8001042:	f7ff ff93 	bl	8000f6c <touch_read>
 8001046:	4603      	mov	r3, r0
 8001048:	461a      	mov	r2, r3
 800104a:	4b19      	ldr	r3, [pc, #100]	; (80010b0 <touch_periodic_process+0xac>)
 800104c:	80da      	strh	r2, [r3, #6]
		printf("TOUCH x %d\n\r", touch.x);
 800104e:	4b18      	ldr	r3, [pc, #96]	; (80010b0 <touch_periodic_process+0xac>)
 8001050:	881b      	ldrh	r3, [r3, #0]
 8001052:	4619      	mov	r1, r3
 8001054:	4817      	ldr	r0, [pc, #92]	; (80010b4 <touch_periodic_process+0xb0>)
 8001056:	f005 fcb5 	bl	80069c4 <iprintf>
		printf("TOUCH x1 %d\n\r", touch.x1);
 800105a:	4b15      	ldr	r3, [pc, #84]	; (80010b0 <touch_periodic_process+0xac>)
 800105c:	889b      	ldrh	r3, [r3, #4]
 800105e:	4619      	mov	r1, r3
 8001060:	4815      	ldr	r0, [pc, #84]	; (80010b8 <touch_periodic_process+0xb4>)
 8001062:	f005 fcaf 	bl	80069c4 <iprintf>
		printf("TOUCH y %d\n\r", touch.y);
 8001066:	4b12      	ldr	r3, [pc, #72]	; (80010b0 <touch_periodic_process+0xac>)
 8001068:	885b      	ldrh	r3, [r3, #2]
 800106a:	4619      	mov	r1, r3
 800106c:	4813      	ldr	r0, [pc, #76]	; (80010bc <touch_periodic_process+0xb8>)
 800106e:	f005 fca9 	bl	80069c4 <iprintf>
		printf("TOUCH y1 %d\n\r", touch.y1);
 8001072:	4b0f      	ldr	r3, [pc, #60]	; (80010b0 <touch_periodic_process+0xac>)
 8001074:	88db      	ldrh	r3, [r3, #6]
 8001076:	4619      	mov	r1, r3
 8001078:	4811      	ldr	r0, [pc, #68]	; (80010c0 <touch_periodic_process+0xbc>)
 800107a:	f005 fca3 	bl	80069c4 <iprintf>
		touch.y=touch.x1;
 800107e:	4b0c      	ldr	r3, [pc, #48]	; (80010b0 <touch_periodic_process+0xac>)
 8001080:	889a      	ldrh	r2, [r3, #4]
 8001082:	4b0b      	ldr	r3, [pc, #44]	; (80010b0 <touch_periodic_process+0xac>)
 8001084:	805a      	strh	r2, [r3, #2]
		touch.x=1024-touch.y1;
 8001086:	4b0a      	ldr	r3, [pc, #40]	; (80010b0 <touch_periodic_process+0xac>)
 8001088:	88db      	ldrh	r3, [r3, #6]
 800108a:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 800108e:	b29a      	uxth	r2, r3
 8001090:	4b07      	ldr	r3, [pc, #28]	; (80010b0 <touch_periodic_process+0xac>)
 8001092:	801a      	strh	r2, [r3, #0]

		//if(validate_touch_coordinates()==1)
		//{
			//if(touch_ignore<rtc)
			//{
				printf("TOUCH = %d,%d\n\r",touch.x,touch.y);
 8001094:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <touch_periodic_process+0xac>)
 8001096:	881b      	ldrh	r3, [r3, #0]
 8001098:	4619      	mov	r1, r3
 800109a:	4b05      	ldr	r3, [pc, #20]	; (80010b0 <touch_periodic_process+0xac>)
 800109c:	885b      	ldrh	r3, [r3, #2]
 800109e:	461a      	mov	r2, r3
 80010a0:	4808      	ldr	r0, [pc, #32]	; (80010c4 <touch_periodic_process+0xc0>)
 80010a2:	f005 fc8f 	bl	80069c4 <iprintf>
			//}
		//}

		//make_beep();

		touch_write_control(0x80);
 80010a6:	2080      	movs	r0, #128	; 0x80
 80010a8:	f7ff ff04 	bl	8000eb4 <touch_write_control>
	}
}
 80010ac:	bf00      	nop
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	200000e8 	.word	0x200000e8
 80010b4:	08007dc0 	.word	0x08007dc0
 80010b8:	08007dd0 	.word	0x08007dd0
 80010bc:	08007de0 	.word	0x08007de0
 80010c0:	08007df0 	.word	0x08007df0
 80010c4:	08007e00 	.word	0x08007e00

080010c8 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	80fb      	strh	r3, [r7, #6]
	touch.pressed=1;
 80010d2:	4b05      	ldr	r3, [pc, #20]	; (80010e8 <HAL_GPIO_EXTI_Callback+0x20>)
 80010d4:	2201      	movs	r2, #1
 80010d6:	721a      	strb	r2, [r3, #8]
	printf("Interrupt touch");
 80010d8:	4804      	ldr	r0, [pc, #16]	; (80010ec <HAL_GPIO_EXTI_Callback+0x24>)
 80010da:	f005 fc73 	bl	80069c4 <iprintf>
}
 80010de:	bf00      	nop
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	200000e8 	.word	0x200000e8
 80010ec:	08007e10 	.word	0x08007e10

080010f0 <delay_ms>:


static void delay_ms(__IO uint32_t nCount1) {
 80010f0:	b480      	push	{r7}
 80010f2:	b085      	sub	sp, #20
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
	__IO uint32_t nCount=nCount1*23666;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f645 4272 	movw	r2, #23666	; 0x5c72
 80010fe:	fb02 f303 	mul.w	r3, r2, r3
 8001102:	60fb      	str	r3, [r7, #12]
	while(nCount--) {
 8001104:	bf00      	nop
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	1e5a      	subs	r2, r3, #1
 800110a:	60fa      	str	r2, [r7, #12]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d1fa      	bne.n	8001106 <delay_ms+0x16>
  }
}
 8001110:	bf00      	nop
 8001112:	bf00      	nop
 8001114:	3714      	adds	r7, #20
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
	...

08001120 <flashCSSet>:
#include "spiRoutines.h"
#include <stm32f4xx_hal.h>
#include <stm32f4xx_hal_gpio.h>
#include <stdio.h>

void flashCSSet(){
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001124:	2201      	movs	r2, #1
 8001126:	2110      	movs	r1, #16
 8001128:	4802      	ldr	r0, [pc, #8]	; (8001134 <flashCSSet+0x14>)
 800112a:	f001 feb9 	bl	8002ea0 <HAL_GPIO_WritePin>
}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40020000 	.word	0x40020000

08001138 <flashCSReset>:

void flashCSReset(){
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800113c:	2200      	movs	r2, #0
 800113e:	2110      	movs	r1, #16
 8001140:	4802      	ldr	r0, [pc, #8]	; (800114c <flashCSReset+0x14>)
 8001142:	f001 fead 	bl	8002ea0 <HAL_GPIO_WritePin>
}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40020000 	.word	0x40020000

08001150 <ext_flash_erase_4kB>:
	flashCSSet();
	return id_data;
}

void ext_flash_erase_4kB(unsigned int sector_adress)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
	unsigned int i;

	ext_flash_wren();
 8001158:	f000 f8d2 	bl	8001300 <ext_flash_wren>

	flashCSReset();
 800115c:	f7ff ffec 	bl	8001138 <flashCSReset>


	SPI1_Transfer(0x20);
 8001160:	2020      	movs	r0, #32
 8001162:	f000 fc87 	bl	8001a74 <SPI1_Transfer>
	SPI1_Transfer((sector_adress>>16)&0xFF);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	0c1b      	lsrs	r3, r3, #16
 800116a:	b2db      	uxtb	r3, r3
 800116c:	4618      	mov	r0, r3
 800116e:	f000 fc81 	bl	8001a74 <SPI1_Transfer>
	SPI1_Transfer((sector_adress>>8)&0xFF);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	0a1b      	lsrs	r3, r3, #8
 8001176:	b2db      	uxtb	r3, r3
 8001178:	4618      	mov	r0, r3
 800117a:	f000 fc7b 	bl	8001a74 <SPI1_Transfer>
	SPI1_Transfer(sector_adress&0xFF);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	b2db      	uxtb	r3, r3
 8001182:	4618      	mov	r0, r3
 8001184:	f000 fc76 	bl	8001a74 <SPI1_Transfer>
	flashCSSet();
 8001188:	f7ff ffca 	bl	8001120 <flashCSSet>

	for(i=0;i<1000;i++)
 800118c:	2300      	movs	r3, #0
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	e00a      	b.n	80011a8 <ext_flash_erase_4kB+0x58>
	{
		HAL_Delay(1);
 8001192:	2001      	movs	r0, #1
 8001194:	f001 fb20 	bl	80027d8 <HAL_Delay>
		if(ext_flash_read_status_register_1()==0x00)
 8001198:	f000 f89e 	bl	80012d8 <ext_flash_read_status_register_1>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d007      	beq.n	80011b2 <ext_flash_erase_4kB+0x62>
	for(i=0;i<1000;i++)
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	3301      	adds	r3, #1
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011ae:	d3f0      	bcc.n	8001192 <ext_flash_erase_4kB+0x42>
		{
			break;
		}
	}
}
 80011b0:	e000      	b.n	80011b4 <ext_flash_erase_4kB+0x64>
			break;
 80011b2:	bf00      	nop
}
 80011b4:	bf00      	nop
 80011b6:	3710      	adds	r7, #16
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}

080011bc <ext_flash_write>:

void ext_flash_write(unsigned int sector_adress, char *buff, unsigned int len)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	607a      	str	r2, [r7, #4]
	unsigned int i;

	ext_flash_wren();
 80011c8:	f000 f89a 	bl	8001300 <ext_flash_wren>

	flashCSReset();
 80011cc:	f7ff ffb4 	bl	8001138 <flashCSReset>
	SPI1_Transfer(0x02);
 80011d0:	2002      	movs	r0, #2
 80011d2:	f000 fc4f 	bl	8001a74 <SPI1_Transfer>
	SPI1_Transfer((sector_adress>>16)&0xFF);
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	0c1b      	lsrs	r3, r3, #16
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	4618      	mov	r0, r3
 80011de:	f000 fc49 	bl	8001a74 <SPI1_Transfer>
	SPI1_Transfer((sector_adress>>8)&0xFF);
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	0a1b      	lsrs	r3, r3, #8
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	4618      	mov	r0, r3
 80011ea:	f000 fc43 	bl	8001a74 <SPI1_Transfer>
	SPI1_Transfer(sector_adress&0xFF);
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	4618      	mov	r0, r3
 80011f4:	f000 fc3e 	bl	8001a74 <SPI1_Transfer>

	for(i=0;i<len;i++)
 80011f8:	2300      	movs	r3, #0
 80011fa:	617b      	str	r3, [r7, #20]
 80011fc:	e009      	b.n	8001212 <ext_flash_write+0x56>
	{
		SPI1_Transfer(buff[i]);
 80011fe:	68ba      	ldr	r2, [r7, #8]
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	4413      	add	r3, r2
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	4618      	mov	r0, r3
 8001208:	f000 fc34 	bl	8001a74 <SPI1_Transfer>
	for(i=0;i<len;i++)
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	3301      	adds	r3, #1
 8001210:	617b      	str	r3, [r7, #20]
 8001212:	697a      	ldr	r2, [r7, #20]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	429a      	cmp	r2, r3
 8001218:	d3f1      	bcc.n	80011fe <ext_flash_write+0x42>
	}
	flashCSSet();
 800121a:	f7ff ff81 	bl	8001120 <flashCSSet>

	for(i=0;i<1000;i++)
 800121e:	2300      	movs	r3, #0
 8001220:	617b      	str	r3, [r7, #20]
 8001222:	e00a      	b.n	800123a <ext_flash_write+0x7e>
	{
		HAL_Delay(1);
 8001224:	2001      	movs	r0, #1
 8001226:	f001 fad7 	bl	80027d8 <HAL_Delay>
		if(ext_flash_read_status_register_1()==0x00)
 800122a:	f000 f855 	bl	80012d8 <ext_flash_read_status_register_1>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d007      	beq.n	8001244 <ext_flash_write+0x88>
	for(i=0;i<1000;i++)
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	3301      	adds	r3, #1
 8001238:	617b      	str	r3, [r7, #20]
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001240:	d3f0      	bcc.n	8001224 <ext_flash_write+0x68>
		{
			break;
		}
	}
}
 8001242:	e000      	b.n	8001246 <ext_flash_write+0x8a>
			break;
 8001244:	bf00      	nop
}
 8001246:	bf00      	nop
 8001248:	3718      	adds	r7, #24
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <ext_flash_read>:
void ext_flash_read(unsigned int sector_adress, char *buff, unsigned int len)
{
 800124e:	b590      	push	{r4, r7, lr}
 8001250:	b087      	sub	sp, #28
 8001252:	af00      	add	r7, sp, #0
 8001254:	60f8      	str	r0, [r7, #12]
 8001256:	60b9      	str	r1, [r7, #8]
 8001258:	607a      	str	r2, [r7, #4]
	unsigned char command[4];

	command[0]=0x03;
 800125a:	2303      	movs	r3, #3
 800125c:	743b      	strb	r3, [r7, #16]
	command[1]=((char *)&sector_adress)[3];
 800125e:	f107 030c 	add.w	r3, r7, #12
 8001262:	3303      	adds	r3, #3
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	747b      	strb	r3, [r7, #17]
	command[2]=((char *)&sector_adress)[2];
 8001268:	f107 030c 	add.w	r3, r7, #12
 800126c:	3302      	adds	r3, #2
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	74bb      	strb	r3, [r7, #18]
	command[3]=((char *)&sector_adress)[1];
 8001272:	f107 030c 	add.w	r3, r7, #12
 8001276:	3301      	adds	r3, #1
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	74fb      	strb	r3, [r7, #19]

	flashCSReset();
 800127c:	f7ff ff5c 	bl	8001138 <flashCSReset>

	SPI1_Transfer(0x03);
 8001280:	2003      	movs	r0, #3
 8001282:	f000 fbf7 	bl	8001a74 <SPI1_Transfer>
	SPI1_Transfer((sector_adress>>16)&0xFF);
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	0c1b      	lsrs	r3, r3, #16
 800128a:	b2db      	uxtb	r3, r3
 800128c:	4618      	mov	r0, r3
 800128e:	f000 fbf1 	bl	8001a74 <SPI1_Transfer>
	SPI1_Transfer((sector_adress>>8)&0xFF);
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	0a1b      	lsrs	r3, r3, #8
 8001296:	b2db      	uxtb	r3, r3
 8001298:	4618      	mov	r0, r3
 800129a:	f000 fbeb 	bl	8001a74 <SPI1_Transfer>
	SPI1_Transfer(sector_adress&0xFF);
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	4618      	mov	r0, r3
 80012a4:	f000 fbe6 	bl	8001a74 <SPI1_Transfer>

	//dmaReceiveDataCont8_FLASH(command, 4, buff, len); //Can't figure out how to get this to work with HAL, so reading without DMA instead:

	for(unsigned int i = 0; i<len; i++){
 80012a8:	2300      	movs	r3, #0
 80012aa:	617b      	str	r3, [r7, #20]
 80012ac:	e00a      	b.n	80012c4 <ext_flash_read+0x76>
		*(buff+i) = SPI1_Transfer(0x00);
 80012ae:	68ba      	ldr	r2, [r7, #8]
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	18d4      	adds	r4, r2, r3
 80012b4:	2000      	movs	r0, #0
 80012b6:	f000 fbdd 	bl	8001a74 <SPI1_Transfer>
 80012ba:	4603      	mov	r3, r0
 80012bc:	7023      	strb	r3, [r4, #0]
	for(unsigned int i = 0; i<len; i++){
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	3301      	adds	r3, #1
 80012c2:	617b      	str	r3, [r7, #20]
 80012c4:	697a      	ldr	r2, [r7, #20]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d3f0      	bcc.n	80012ae <ext_flash_read+0x60>
	}

	flashCSSet();
 80012cc:	f7ff ff28 	bl	8001120 <flashCSSet>
}
 80012d0:	bf00      	nop
 80012d2:	371c      	adds	r7, #28
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd90      	pop	{r4, r7, pc}

080012d8 <ext_flash_read_status_register_1>:

	return data;
}

unsigned char ext_flash_read_status_register_1()
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
	char data;
	flashCSReset();
 80012de:	f7ff ff2b 	bl	8001138 <flashCSReset>
	SPI1_Transfer(0x05);
 80012e2:	2005      	movs	r0, #5
 80012e4:	f000 fbc6 	bl	8001a74 <SPI1_Transfer>
	data=SPI1_Transfer(0x00);
 80012e8:	2000      	movs	r0, #0
 80012ea:	f000 fbc3 	bl	8001a74 <SPI1_Transfer>
 80012ee:	4603      	mov	r3, r0
 80012f0:	71fb      	strb	r3, [r7, #7]
	flashCSSet();
 80012f2:	f7ff ff15 	bl	8001120 <flashCSSet>

	return data;
 80012f6:	79fb      	ldrb	r3, [r7, #7]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <ext_flash_wren>:

void ext_flash_wren()
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
	flashCSReset();
 8001304:	f7ff ff18 	bl	8001138 <flashCSReset>
	SPI1_Transfer(0x06);
 8001308:	2006      	movs	r0, #6
 800130a:	f000 fbb3 	bl	8001a74 <SPI1_Transfer>
	flashCSSet();
 800130e:	f7ff ff07 	bl	8001120 <flashCSSet>
}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
	...

08001318 <flashDemoPrintLast>:
#include <string.h>
#include "extFlash.h"

#define demoFlashAddr 0x00

void flashDemoPrintLast(){
 8001318:	b580      	push	{r7, lr}
 800131a:	b090      	sub	sp, #64	; 0x40
 800131c:	af00      	add	r7, sp, #0
	char flashMsg[64];
	ext_flash_read(demoFlashAddr, flashMsg, 64);
 800131e:	463b      	mov	r3, r7
 8001320:	2240      	movs	r2, #64	; 0x40
 8001322:	4619      	mov	r1, r3
 8001324:	2000      	movs	r0, #0
 8001326:	f7ff ff92 	bl	800124e <ext_flash_read>
	flashMsg[63] = 0; //just to be safe
 800132a:	2300      	movs	r3, #0
 800132c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	printf("[FLASH demo] Read message from flash: \"%s\".\r\n", flashMsg);
 8001330:	463b      	mov	r3, r7
 8001332:	4619      	mov	r1, r3
 8001334:	4803      	ldr	r0, [pc, #12]	; (8001344 <flashDemoPrintLast+0x2c>)
 8001336:	f005 fb45 	bl	80069c4 <iprintf>
}
 800133a:	bf00      	nop
 800133c:	3740      	adds	r7, #64	; 0x40
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	08007e20 	.word	0x08007e20

08001348 <flashDemoLoop>:

int flashDemoLoop(){
 8001348:	b580      	push	{r7, lr}
 800134a:	b092      	sub	sp, #72	; 0x48
 800134c:	af00      	add	r7, sp, #0

		char delimiter = 13;
 800134e:	230d      	movs	r3, #13
 8001350:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		char msg[64];

		int count = read_usart_message(msg, &huart1, sizeof(msg), delimiter);
 8001354:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001358:	4638      	mov	r0, r7
 800135a:	2240      	movs	r2, #64	; 0x40
 800135c:	4914      	ldr	r1, [pc, #80]	; (80013b0 <flashDemoLoop+0x68>)
 800135e:	f001 f8b1 	bl	80024c4 <read_usart_message>
 8001362:	4603      	mov	r3, r0
 8001364:	643b      	str	r3, [r7, #64]	; 0x40

		if(count == 0){
 8001366:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001368:	2b00      	cmp	r3, #0
 800136a:	d104      	bne.n	8001376 <flashDemoLoop+0x2e>
			//While reading buffer of received chars, delimiter char was not encountered.
			printf("[FLASH demo] message not yet ready.\r\n");
 800136c:	4811      	ldr	r0, [pc, #68]	; (80013b4 <flashDemoLoop+0x6c>)
 800136e:	f005 fbaf 	bl	8006ad0 <puts>
			return 0;
 8001372:	2300      	movs	r3, #0
 8001374:	e018      	b.n	80013a8 <flashDemoLoop+0x60>
		}

		msg[count-1] = 0; //null terminate received string
 8001376:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001378:	3b01      	subs	r3, #1
 800137a:	3348      	adds	r3, #72	; 0x48
 800137c:	443b      	add	r3, r7
 800137e:	2200      	movs	r2, #0
 8001380:	f803 2c48 	strb.w	r2, [r3, #-72]

		printf("[FLASH demo] Saving message to flash: \"%s\".\r\n", msg);
 8001384:	463b      	mov	r3, r7
 8001386:	4619      	mov	r1, r3
 8001388:	480b      	ldr	r0, [pc, #44]	; (80013b8 <flashDemoLoop+0x70>)
 800138a:	f005 fb1b 	bl	80069c4 <iprintf>

		ext_flash_erase_4kB(demoFlashAddr);
 800138e:	2000      	movs	r0, #0
 8001390:	f7ff fede 	bl	8001150 <ext_flash_erase_4kB>
		ext_flash_write(demoFlashAddr, msg, count);
 8001394:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001396:	463b      	mov	r3, r7
 8001398:	4619      	mov	r1, r3
 800139a:	2000      	movs	r0, #0
 800139c:	f7ff ff0e 	bl	80011bc <ext_flash_write>

		printf("[FLASH demo] Done.\n\r");
 80013a0:	4806      	ldr	r0, [pc, #24]	; (80013bc <flashDemoLoop+0x74>)
 80013a2:	f005 fb0f 	bl	80069c4 <iprintf>
		return 1;
 80013a6:	2301      	movs	r3, #1

}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3748      	adds	r7, #72	; 0x48
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	20000234 	.word	0x20000234
 80013b4:	08007e50 	.word	0x08007e50
 80013b8:	08007e78 	.word	0x08007e78
 80013bc:	08007ea8 	.word	0x08007ea8

080013c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013c0:	b590      	push	{r4, r7, lr}
 80013c2:	b097      	sub	sp, #92	; 0x5c
 80013c4:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013c6:	f001 f995 	bl	80026f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013ca:	f000 f869 	bl	80014a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013ce:	f000 fa2b 	bl	8001828 <MX_GPIO_Init>
  MX_FSMC_Init();
 80013d2:	f000 facf 	bl	8001974 <MX_FSMC_Init>
  MX_USART1_UART_Init();
 80013d6:	f000 f9c3 	bl	8001760 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80013da:	f000 f8cb 	bl	8001574 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80013de:	f000 f9f1 	bl	80017c4 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80013e2:	f000 f8fd 	bl	80015e0 <MX_SPI1_Init>
  MX_TIM1_Init();
 80013e6:	f000 f939 	bl	800165c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  //enable uart interrupt
  uint16_t count = 0;
 80013ea:	2300      	movs	r3, #0
 80013ec:	81fb      	strh	r3, [r7, #14]
  Init_LCD();
 80013ee:	f7ff f8c9 	bl	8000584 <Init_LCD>
  touch_reset();
 80013f2:	f7ff fdf1 	bl	8000fd8 <touch_reset>
  Init_TOUCH(hi2c1);
 80013f6:	4c25      	ldr	r4, [pc, #148]	; (800148c <main+0xcc>)
 80013f8:	4668      	mov	r0, sp
 80013fa:	f104 0310 	add.w	r3, r4, #16
 80013fe:	2244      	movs	r2, #68	; 0x44
 8001400:	4619      	mov	r1, r3
 8001402:	f005 fac9 	bl	8006998 <memcpy>
 8001406:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800140a:	f7ff fd33 	bl	8000e74 <Init_TOUCH>
  while(count<=200)
 800140e:	e00c      	b.n	800142a <main+0x6a>
  {
	  count++;
 8001410:	89fb      	ldrh	r3, [r7, #14]
 8001412:	3301      	adds	r3, #1
 8001414:	81fb      	strh	r3, [r7, #14]
	  LCD_WritePixel(count,0x10,BLUE);
 8001416:	89fb      	ldrh	r3, [r7, #14]
 8001418:	221f      	movs	r2, #31
 800141a:	2110      	movs	r1, #16
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff fa37 	bl	8000890 <LCD_WritePixel>
	  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_4);
 8001422:	210c      	movs	r1, #12
 8001424:	481a      	ldr	r0, [pc, #104]	; (8001490 <main+0xd0>)
 8001426:	f003 fc63 	bl	8004cf0 <HAL_TIM_PWM_Start>
  while(count<=200)
 800142a:	89fb      	ldrh	r3, [r7, #14]
 800142c:	2bc8      	cmp	r3, #200	; 0xc8
 800142e:	d9ef      	bls.n	8001410 <main+0x50>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("Entering main loop\n\r");
 8001430:	4818      	ldr	r0, [pc, #96]	; (8001494 <main+0xd4>)
 8001432:	f005 fac7 	bl	80069c4 <iprintf>

  flashDemoPrintLast();
 8001436:	f7ff ff6f 	bl	8001318 <flashDemoPrintLast>

  int loopNumber = 0;
 800143a:	2300      	movs	r3, #0
 800143c:	60bb      	str	r3, [r7, #8]

  while (1)
  {
	int secSleep = 1;
 800143e:	2301      	movs	r3, #1
 8001440:	607b      	str	r3, [r7, #4]
	int msecSleep = 500;
 8001442:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001446:	603b      	str	r3, [r7, #0]
	printf("Sleeping %d.%d secs. LN %d\r\n", secSleep, msecSleep, loopNumber++);
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	1c5a      	adds	r2, r3, #1
 800144c:	60ba      	str	r2, [r7, #8]
 800144e:	683a      	ldr	r2, [r7, #0]
 8001450:	6879      	ldr	r1, [r7, #4]
 8001452:	4811      	ldr	r0, [pc, #68]	; (8001498 <main+0xd8>)
 8001454:	f005 fab6 	bl	80069c4 <iprintf>
	HAL_Delay(1000*secSleep + msecSleep);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800145e:	fb03 f202 	mul.w	r2, r3, r2
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	4413      	add	r3, r2
 8001466:	4618      	mov	r0, r3
 8001468:	f001 f9b6 	bl	80027d8 <HAL_Delay>
	touch_periodic_process();
 800146c:	f7ff fdca 	bl	8001004 <touch_periodic_process>
	static int flashDone = 0;
	if(!flashDone){
 8001470:	4b0a      	ldr	r3, [pc, #40]	; (800149c <main+0xdc>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d105      	bne.n	8001484 <main+0xc4>
		flashDone = flashDemoLoop();
 8001478:	f7ff ff66 	bl	8001348 <flashDemoLoop>
 800147c:	4603      	mov	r3, r0
 800147e:	4a07      	ldr	r2, [pc, #28]	; (800149c <main+0xdc>)
 8001480:	6013      	str	r3, [r2, #0]
		continue;
 8001482:	e001      	b.n	8001488 <main+0xc8>
	}

	uartDemoLoop();
 8001484:	f001 f8a6 	bl	80025d4 <uartDemoLoop>
  {
 8001488:	e7d9      	b.n	800143e <main+0x7e>
 800148a:	bf00      	nop
 800148c:	20000140 	.word	0x20000140
 8001490:	200001ec 	.word	0x200001ec
 8001494:	08007ec0 	.word	0x08007ec0
 8001498:	08007ed8 	.word	0x08007ed8
 800149c:	2000030c 	.word	0x2000030c

080014a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b094      	sub	sp, #80	; 0x50
 80014a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014a6:	f107 0320 	add.w	r3, r7, #32
 80014aa:	2230      	movs	r2, #48	; 0x30
 80014ac:	2100      	movs	r1, #0
 80014ae:	4618      	mov	r0, r3
 80014b0:	f005 fa80 	bl	80069b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014b4:	f107 030c 	add.w	r3, r7, #12
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	60da      	str	r2, [r3, #12]
 80014c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014c4:	2300      	movs	r3, #0
 80014c6:	60bb      	str	r3, [r7, #8]
 80014c8:	4b28      	ldr	r3, [pc, #160]	; (800156c <SystemClock_Config+0xcc>)
 80014ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014cc:	4a27      	ldr	r2, [pc, #156]	; (800156c <SystemClock_Config+0xcc>)
 80014ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014d2:	6413      	str	r3, [r2, #64]	; 0x40
 80014d4:	4b25      	ldr	r3, [pc, #148]	; (800156c <SystemClock_Config+0xcc>)
 80014d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014dc:	60bb      	str	r3, [r7, #8]
 80014de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014e0:	2300      	movs	r3, #0
 80014e2:	607b      	str	r3, [r7, #4]
 80014e4:	4b22      	ldr	r3, [pc, #136]	; (8001570 <SystemClock_Config+0xd0>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a21      	ldr	r2, [pc, #132]	; (8001570 <SystemClock_Config+0xd0>)
 80014ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014ee:	6013      	str	r3, [r2, #0]
 80014f0:	4b1f      	ldr	r3, [pc, #124]	; (8001570 <SystemClock_Config+0xd0>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014f8:	607b      	str	r3, [r7, #4]
 80014fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014fc:	2301      	movs	r3, #1
 80014fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001500:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001504:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001506:	2302      	movs	r3, #2
 8001508:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800150a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800150e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001510:	2308      	movs	r3, #8
 8001512:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001514:	23a8      	movs	r3, #168	; 0xa8
 8001516:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001518:	2302      	movs	r3, #2
 800151a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800151c:	2304      	movs	r3, #4
 800151e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001520:	f107 0320 	add.w	r3, r7, #32
 8001524:	4618      	mov	r0, r3
 8001526:	f002 fe2d 	bl	8004184 <HAL_RCC_OscConfig>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001530:	f000 fa9a 	bl	8001a68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001534:	230f      	movs	r3, #15
 8001536:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001538:	2302      	movs	r3, #2
 800153a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800153c:	2300      	movs	r3, #0
 800153e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001540:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001544:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001546:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800154a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800154c:	f107 030c 	add.w	r3, r7, #12
 8001550:	2105      	movs	r1, #5
 8001552:	4618      	mov	r0, r3
 8001554:	f003 f88e 	bl	8004674 <HAL_RCC_ClockConfig>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800155e:	f000 fa83 	bl	8001a68 <Error_Handler>
  }
}
 8001562:	bf00      	nop
 8001564:	3750      	adds	r7, #80	; 0x50
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40023800 	.word	0x40023800
 8001570:	40007000 	.word	0x40007000

08001574 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001578:	4b16      	ldr	r3, [pc, #88]	; (80015d4 <MX_I2C1_Init+0x60>)
 800157a:	4a17      	ldr	r2, [pc, #92]	; (80015d8 <MX_I2C1_Init+0x64>)
 800157c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800157e:	4b15      	ldr	r3, [pc, #84]	; (80015d4 <MX_I2C1_Init+0x60>)
 8001580:	4a16      	ldr	r2, [pc, #88]	; (80015dc <MX_I2C1_Init+0x68>)
 8001582:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001584:	4b13      	ldr	r3, [pc, #76]	; (80015d4 <MX_I2C1_Init+0x60>)
 8001586:	2200      	movs	r2, #0
 8001588:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800158a:	4b12      	ldr	r3, [pc, #72]	; (80015d4 <MX_I2C1_Init+0x60>)
 800158c:	2200      	movs	r2, #0
 800158e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001590:	4b10      	ldr	r3, [pc, #64]	; (80015d4 <MX_I2C1_Init+0x60>)
 8001592:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001596:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001598:	4b0e      	ldr	r3, [pc, #56]	; (80015d4 <MX_I2C1_Init+0x60>)
 800159a:	2200      	movs	r2, #0
 800159c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800159e:	4b0d      	ldr	r3, [pc, #52]	; (80015d4 <MX_I2C1_Init+0x60>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015a4:	4b0b      	ldr	r3, [pc, #44]	; (80015d4 <MX_I2C1_Init+0x60>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015aa:	4b0a      	ldr	r3, [pc, #40]	; (80015d4 <MX_I2C1_Init+0x60>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015b0:	4808      	ldr	r0, [pc, #32]	; (80015d4 <MX_I2C1_Init+0x60>)
 80015b2:	f001 fca7 	bl	8002f04 <HAL_I2C_Init>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015bc:	f000 fa54 	bl	8001a68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  __HAL_I2C_ENABLE(&hi2c1);
 80015c0:	4b04      	ldr	r3, [pc, #16]	; (80015d4 <MX_I2C1_Init+0x60>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	4b03      	ldr	r3, [pc, #12]	; (80015d4 <MX_I2C1_Init+0x60>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f042 0201 	orr.w	r2, r2, #1
 80015ce:	601a      	str	r2, [r3, #0]
  /* USER CODE END I2C1_Init 2 */

}
 80015d0:	bf00      	nop
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	20000140 	.word	0x20000140
 80015d8:	40005400 	.word	0x40005400
 80015dc:	000186a0 	.word	0x000186a0

080015e0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80015e4:	4b1b      	ldr	r3, [pc, #108]	; (8001654 <MX_SPI1_Init+0x74>)
 80015e6:	4a1c      	ldr	r2, [pc, #112]	; (8001658 <MX_SPI1_Init+0x78>)
 80015e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015ea:	4b1a      	ldr	r3, [pc, #104]	; (8001654 <MX_SPI1_Init+0x74>)
 80015ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015f2:	4b18      	ldr	r3, [pc, #96]	; (8001654 <MX_SPI1_Init+0x74>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80015f8:	4b16      	ldr	r3, [pc, #88]	; (8001654 <MX_SPI1_Init+0x74>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80015fe:	4b15      	ldr	r3, [pc, #84]	; (8001654 <MX_SPI1_Init+0x74>)
 8001600:	2202      	movs	r2, #2
 8001602:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001604:	4b13      	ldr	r3, [pc, #76]	; (8001654 <MX_SPI1_Init+0x74>)
 8001606:	2201      	movs	r2, #1
 8001608:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800160a:	4b12      	ldr	r3, [pc, #72]	; (8001654 <MX_SPI1_Init+0x74>)
 800160c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001610:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001612:	4b10      	ldr	r3, [pc, #64]	; (8001654 <MX_SPI1_Init+0x74>)
 8001614:	2200      	movs	r2, #0
 8001616:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001618:	4b0e      	ldr	r3, [pc, #56]	; (8001654 <MX_SPI1_Init+0x74>)
 800161a:	2200      	movs	r2, #0
 800161c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800161e:	4b0d      	ldr	r3, [pc, #52]	; (8001654 <MX_SPI1_Init+0x74>)
 8001620:	2200      	movs	r2, #0
 8001622:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001624:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <MX_SPI1_Init+0x74>)
 8001626:	2200      	movs	r2, #0
 8001628:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800162a:	4b0a      	ldr	r3, [pc, #40]	; (8001654 <MX_SPI1_Init+0x74>)
 800162c:	220a      	movs	r2, #10
 800162e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001630:	4808      	ldr	r0, [pc, #32]	; (8001654 <MX_SPI1_Init+0x74>)
 8001632:	f003 fa3d 	bl	8004ab0 <HAL_SPI_Init>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800163c:	f000 fa14 	bl	8001a68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  __HAL_SPI_ENABLE(&hspi1);
 8001640:	4b04      	ldr	r3, [pc, #16]	; (8001654 <MX_SPI1_Init+0x74>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	4b03      	ldr	r3, [pc, #12]	; (8001654 <MX_SPI1_Init+0x74>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800164e:	601a      	str	r2, [r3, #0]
  /* USER CODE END SPI1_Init 2 */

}
 8001650:	bf00      	nop
 8001652:	bd80      	pop	{r7, pc}
 8001654:	20000194 	.word	0x20000194
 8001658:	40013000 	.word	0x40013000

0800165c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b092      	sub	sp, #72	; 0x48
 8001660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001662:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800166c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	605a      	str	r2, [r3, #4]
 8001676:	609a      	str	r2, [r3, #8]
 8001678:	60da      	str	r2, [r3, #12]
 800167a:	611a      	str	r2, [r3, #16]
 800167c:	615a      	str	r2, [r3, #20]
 800167e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001680:	1d3b      	adds	r3, r7, #4
 8001682:	2220      	movs	r2, #32
 8001684:	2100      	movs	r1, #0
 8001686:	4618      	mov	r0, r3
 8001688:	f005 f994 	bl	80069b4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800168c:	4b32      	ldr	r3, [pc, #200]	; (8001758 <MX_TIM1_Init+0xfc>)
 800168e:	4a33      	ldr	r2, [pc, #204]	; (800175c <MX_TIM1_Init+0x100>)
 8001690:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001692:	4b31      	ldr	r3, [pc, #196]	; (8001758 <MX_TIM1_Init+0xfc>)
 8001694:	2200      	movs	r2, #0
 8001696:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001698:	4b2f      	ldr	r3, [pc, #188]	; (8001758 <MX_TIM1_Init+0xfc>)
 800169a:	2200      	movs	r2, #0
 800169c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800169e:	4b2e      	ldr	r3, [pc, #184]	; (8001758 <MX_TIM1_Init+0xfc>)
 80016a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016a4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016a6:	4b2c      	ldr	r3, [pc, #176]	; (8001758 <MX_TIM1_Init+0xfc>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016ac:	4b2a      	ldr	r3, [pc, #168]	; (8001758 <MX_TIM1_Init+0xfc>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016b2:	4b29      	ldr	r3, [pc, #164]	; (8001758 <MX_TIM1_Init+0xfc>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80016b8:	4827      	ldr	r0, [pc, #156]	; (8001758 <MX_TIM1_Init+0xfc>)
 80016ba:	f003 faca 	bl	8004c52 <HAL_TIM_PWM_Init>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80016c4:	f000 f9d0 	bl	8001a68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016c8:	2300      	movs	r3, #0
 80016ca:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016cc:	2300      	movs	r3, #0
 80016ce:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016d0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80016d4:	4619      	mov	r1, r3
 80016d6:	4820      	ldr	r0, [pc, #128]	; (8001758 <MX_TIM1_Init+0xfc>)
 80016d8:	f003 ff7a 	bl	80055d0 <HAL_TIMEx_MasterConfigSynchronization>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80016e2:	f000 f9c1 	bl	8001a68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016e6:	2360      	movs	r3, #96	; 0x60
 80016e8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 65535;
 80016ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016ee:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016f0:	2300      	movs	r3, #0
 80016f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016f4:	2300      	movs	r3, #0
 80016f6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016f8:	2300      	movs	r3, #0
 80016fa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016fc:	2300      	movs	r3, #0
 80016fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001700:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001704:	220c      	movs	r2, #12
 8001706:	4619      	mov	r1, r3
 8001708:	4813      	ldr	r0, [pc, #76]	; (8001758 <MX_TIM1_Init+0xfc>)
 800170a:	f003 fc29 	bl	8004f60 <HAL_TIM_PWM_ConfigChannel>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8001714:	f000 f9a8 	bl	8001a68 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001718:	2300      	movs	r3, #0
 800171a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800171c:	2300      	movs	r3, #0
 800171e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001720:	2300      	movs	r3, #0
 8001722:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001724:	2300      	movs	r3, #0
 8001726:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001728:	2300      	movs	r3, #0
 800172a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800172c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001730:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001732:	2300      	movs	r3, #0
 8001734:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001736:	1d3b      	adds	r3, r7, #4
 8001738:	4619      	mov	r1, r3
 800173a:	4807      	ldr	r0, [pc, #28]	; (8001758 <MX_TIM1_Init+0xfc>)
 800173c:	f003 ffc4 	bl	80056c8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8001746:	f000 f98f 	bl	8001a68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800174a:	4803      	ldr	r0, [pc, #12]	; (8001758 <MX_TIM1_Init+0xfc>)
 800174c:	f000 fa98 	bl	8001c80 <HAL_TIM_MspPostInit>

}
 8001750:	bf00      	nop
 8001752:	3748      	adds	r7, #72	; 0x48
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	200001ec 	.word	0x200001ec
 800175c:	40010000 	.word	0x40010000

08001760 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001764:	4b15      	ldr	r3, [pc, #84]	; (80017bc <MX_USART1_UART_Init+0x5c>)
 8001766:	4a16      	ldr	r2, [pc, #88]	; (80017c0 <MX_USART1_UART_Init+0x60>)
 8001768:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800176a:	4b14      	ldr	r3, [pc, #80]	; (80017bc <MX_USART1_UART_Init+0x5c>)
 800176c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001770:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001772:	4b12      	ldr	r3, [pc, #72]	; (80017bc <MX_USART1_UART_Init+0x5c>)
 8001774:	2200      	movs	r2, #0
 8001776:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001778:	4b10      	ldr	r3, [pc, #64]	; (80017bc <MX_USART1_UART_Init+0x5c>)
 800177a:	2200      	movs	r2, #0
 800177c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800177e:	4b0f      	ldr	r3, [pc, #60]	; (80017bc <MX_USART1_UART_Init+0x5c>)
 8001780:	2200      	movs	r2, #0
 8001782:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001784:	4b0d      	ldr	r3, [pc, #52]	; (80017bc <MX_USART1_UART_Init+0x5c>)
 8001786:	220c      	movs	r2, #12
 8001788:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800178a:	4b0c      	ldr	r3, [pc, #48]	; (80017bc <MX_USART1_UART_Init+0x5c>)
 800178c:	2200      	movs	r2, #0
 800178e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001790:	4b0a      	ldr	r3, [pc, #40]	; (80017bc <MX_USART1_UART_Init+0x5c>)
 8001792:	2200      	movs	r2, #0
 8001794:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001796:	4809      	ldr	r0, [pc, #36]	; (80017bc <MX_USART1_UART_Init+0x5c>)
 8001798:	f003 ffe8 	bl	800576c <HAL_UART_Init>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80017a2:	f000 f961 	bl	8001a68 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE); //turn on rx interrupt forever
 80017a6:	4b05      	ldr	r3, [pc, #20]	; (80017bc <MX_USART1_UART_Init+0x5c>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	68da      	ldr	r2, [r3, #12]
 80017ac:	4b03      	ldr	r3, [pc, #12]	; (80017bc <MX_USART1_UART_Init+0x5c>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f042 0220 	orr.w	r2, r2, #32
 80017b4:	60da      	str	r2, [r3, #12]
  /* USER CODE END USART1_Init 2 */

}
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	20000234 	.word	0x20000234
 80017c0:	40011000 	.word	0x40011000

080017c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017c8:	4b15      	ldr	r3, [pc, #84]	; (8001820 <MX_USART2_UART_Init+0x5c>)
 80017ca:	4a16      	ldr	r2, [pc, #88]	; (8001824 <MX_USART2_UART_Init+0x60>)
 80017cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017ce:	4b14      	ldr	r3, [pc, #80]	; (8001820 <MX_USART2_UART_Init+0x5c>)
 80017d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017d6:	4b12      	ldr	r3, [pc, #72]	; (8001820 <MX_USART2_UART_Init+0x5c>)
 80017d8:	2200      	movs	r2, #0
 80017da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017dc:	4b10      	ldr	r3, [pc, #64]	; (8001820 <MX_USART2_UART_Init+0x5c>)
 80017de:	2200      	movs	r2, #0
 80017e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017e2:	4b0f      	ldr	r3, [pc, #60]	; (8001820 <MX_USART2_UART_Init+0x5c>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017e8:	4b0d      	ldr	r3, [pc, #52]	; (8001820 <MX_USART2_UART_Init+0x5c>)
 80017ea:	220c      	movs	r2, #12
 80017ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ee:	4b0c      	ldr	r3, [pc, #48]	; (8001820 <MX_USART2_UART_Init+0x5c>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017f4:	4b0a      	ldr	r3, [pc, #40]	; (8001820 <MX_USART2_UART_Init+0x5c>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017fa:	4809      	ldr	r0, [pc, #36]	; (8001820 <MX_USART2_UART_Init+0x5c>)
 80017fc:	f003 ffb6 	bl	800576c <HAL_UART_Init>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001806:	f000 f92f 	bl	8001a68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE); //turn on rx interrupt forever
 800180a:	4b05      	ldr	r3, [pc, #20]	; (8001820 <MX_USART2_UART_Init+0x5c>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	68da      	ldr	r2, [r3, #12]
 8001810:	4b03      	ldr	r3, [pc, #12]	; (8001820 <MX_USART2_UART_Init+0x5c>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f042 0220 	orr.w	r2, r2, #32
 8001818:	60da      	str	r2, [r3, #12]
  /* USER CODE END USART2_Init 2 */

}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	20000278 	.word	0x20000278
 8001824:	40004400 	.word	0x40004400

08001828 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b08a      	sub	sp, #40	; 0x28
 800182c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800182e:	f107 0314 	add.w	r3, r7, #20
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	605a      	str	r2, [r3, #4]
 8001838:	609a      	str	r2, [r3, #8]
 800183a:	60da      	str	r2, [r3, #12]
 800183c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	613b      	str	r3, [r7, #16]
 8001842:	4b49      	ldr	r3, [pc, #292]	; (8001968 <MX_GPIO_Init+0x140>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	4a48      	ldr	r2, [pc, #288]	; (8001968 <MX_GPIO_Init+0x140>)
 8001848:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800184c:	6313      	str	r3, [r2, #48]	; 0x30
 800184e:	4b46      	ldr	r3, [pc, #280]	; (8001968 <MX_GPIO_Init+0x140>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001856:	613b      	str	r3, [r7, #16]
 8001858:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	60fb      	str	r3, [r7, #12]
 800185e:	4b42      	ldr	r3, [pc, #264]	; (8001968 <MX_GPIO_Init+0x140>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	4a41      	ldr	r2, [pc, #260]	; (8001968 <MX_GPIO_Init+0x140>)
 8001864:	f043 0301 	orr.w	r3, r3, #1
 8001868:	6313      	str	r3, [r2, #48]	; 0x30
 800186a:	4b3f      	ldr	r3, [pc, #252]	; (8001968 <MX_GPIO_Init+0x140>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	60bb      	str	r3, [r7, #8]
 800187a:	4b3b      	ldr	r3, [pc, #236]	; (8001968 <MX_GPIO_Init+0x140>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	4a3a      	ldr	r2, [pc, #232]	; (8001968 <MX_GPIO_Init+0x140>)
 8001880:	f043 0310 	orr.w	r3, r3, #16
 8001884:	6313      	str	r3, [r2, #48]	; 0x30
 8001886:	4b38      	ldr	r3, [pc, #224]	; (8001968 <MX_GPIO_Init+0x140>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	f003 0310 	and.w	r3, r3, #16
 800188e:	60bb      	str	r3, [r7, #8]
 8001890:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	607b      	str	r3, [r7, #4]
 8001896:	4b34      	ldr	r3, [pc, #208]	; (8001968 <MX_GPIO_Init+0x140>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	4a33      	ldr	r2, [pc, #204]	; (8001968 <MX_GPIO_Init+0x140>)
 800189c:	f043 0302 	orr.w	r3, r3, #2
 80018a0:	6313      	str	r3, [r2, #48]	; 0x30
 80018a2:	4b31      	ldr	r3, [pc, #196]	; (8001968 <MX_GPIO_Init+0x140>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	607b      	str	r3, [r7, #4]
 80018ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	603b      	str	r3, [r7, #0]
 80018b2:	4b2d      	ldr	r3, [pc, #180]	; (8001968 <MX_GPIO_Init+0x140>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	4a2c      	ldr	r2, [pc, #176]	; (8001968 <MX_GPIO_Init+0x140>)
 80018b8:	f043 0308 	orr.w	r3, r3, #8
 80018bc:	6313      	str	r3, [r2, #48]	; 0x30
 80018be:	4b2a      	ldr	r3, [pc, #168]	; (8001968 <MX_GPIO_Init+0x140>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	f003 0308 	and.w	r3, r3, #8
 80018c6:	603b      	str	r3, [r7, #0]
 80018c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LCD_RES_Pin, GPIO_PIN_RESET);
 80018ca:	2200      	movs	r2, #0
 80018cc:	f241 0110 	movw	r1, #4112	; 0x1010
 80018d0:	4826      	ldr	r0, [pc, #152]	; (800196c <MX_GPIO_Init+0x144>)
 80018d2:	f001 fae5 	bl	8002ea0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_5, GPIO_PIN_RESET);
 80018d6:	2200      	movs	r2, #0
 80018d8:	2128      	movs	r1, #40	; 0x28
 80018da:	4825      	ldr	r0, [pc, #148]	; (8001970 <MX_GPIO_Init+0x148>)
 80018dc:	f001 fae0 	bl	8002ea0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80018e0:	2310      	movs	r3, #16
 80018e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e4:	2301      	movs	r3, #1
 80018e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e8:	2300      	movs	r3, #0
 80018ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ec:	2300      	movs	r3, #0
 80018ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f0:	f107 0314 	add.w	r3, r7, #20
 80018f4:	4619      	mov	r1, r3
 80018f6:	481d      	ldr	r0, [pc, #116]	; (800196c <MX_GPIO_Init+0x144>)
 80018f8:	f001 f936 	bl	8002b68 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RES_Pin */
  GPIO_InitStruct.Pin = LCD_RES_Pin;
 80018fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001900:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001902:	2301      	movs	r3, #1
 8001904:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001906:	2301      	movs	r3, #1
 8001908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800190a:	2303      	movs	r3, #3
 800190c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_RES_GPIO_Port, &GPIO_InitStruct);
 800190e:	f107 0314 	add.w	r3, r7, #20
 8001912:	4619      	mov	r1, r3
 8001914:	4815      	ldr	r0, [pc, #84]	; (800196c <MX_GPIO_Init+0x144>)
 8001916:	f001 f927 	bl	8002b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800191a:	2328      	movs	r3, #40	; 0x28
 800191c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800191e:	2301      	movs	r3, #1
 8001920:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001922:	2300      	movs	r3, #0
 8001924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001926:	2300      	movs	r3, #0
 8001928:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800192a:	f107 0314 	add.w	r3, r7, #20
 800192e:	4619      	mov	r1, r3
 8001930:	480f      	ldr	r0, [pc, #60]	; (8001970 <MX_GPIO_Init+0x148>)
 8001932:	f001 f919 	bl	8002b68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001936:	2310      	movs	r3, #16
 8001938:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800193a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800193e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001940:	2301      	movs	r3, #1
 8001942:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001944:	f107 0314 	add.w	r3, r7, #20
 8001948:	4619      	mov	r1, r3
 800194a:	4809      	ldr	r0, [pc, #36]	; (8001970 <MX_GPIO_Init+0x148>)
 800194c:	f001 f90c 	bl	8002b68 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001950:	2200      	movs	r2, #0
 8001952:	2100      	movs	r1, #0
 8001954:	200a      	movs	r0, #10
 8001956:	f001 f83e 	bl	80029d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800195a:	200a      	movs	r0, #10
 800195c:	f001 f857 	bl	8002a0e <HAL_NVIC_EnableIRQ>

}
 8001960:	bf00      	nop
 8001962:	3728      	adds	r7, #40	; 0x28
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40023800 	.word	0x40023800
 800196c:	40020000 	.word	0x40020000
 8001970:	40020400 	.word	0x40020400

08001974 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b08e      	sub	sp, #56	; 0x38
 8001978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800197a:	f107 031c 	add.w	r3, r7, #28
 800197e:	2200      	movs	r2, #0
 8001980:	601a      	str	r2, [r3, #0]
 8001982:	605a      	str	r2, [r3, #4]
 8001984:	609a      	str	r2, [r3, #8]
 8001986:	60da      	str	r2, [r3, #12]
 8001988:	611a      	str	r2, [r3, #16]
 800198a:	615a      	str	r2, [r3, #20]
 800198c:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 800198e:	463b      	mov	r3, r7
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	605a      	str	r2, [r3, #4]
 8001996:	609a      	str	r2, [r3, #8]
 8001998:	60da      	str	r2, [r3, #12]
 800199a:	611a      	str	r2, [r3, #16]
 800199c:	615a      	str	r2, [r3, #20]
 800199e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80019a0:	4b2f      	ldr	r3, [pc, #188]	; (8001a60 <MX_FSMC_Init+0xec>)
 80019a2:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80019a6:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80019a8:	4b2d      	ldr	r3, [pc, #180]	; (8001a60 <MX_FSMC_Init+0xec>)
 80019aa:	4a2e      	ldr	r2, [pc, #184]	; (8001a64 <MX_FSMC_Init+0xf0>)
 80019ac:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80019ae:	4b2c      	ldr	r3, [pc, #176]	; (8001a60 <MX_FSMC_Init+0xec>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80019b4:	4b2a      	ldr	r3, [pc, #168]	; (8001a60 <MX_FSMC_Init+0xec>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80019ba:	4b29      	ldr	r3, [pc, #164]	; (8001a60 <MX_FSMC_Init+0xec>)
 80019bc:	2200      	movs	r2, #0
 80019be:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80019c0:	4b27      	ldr	r3, [pc, #156]	; (8001a60 <MX_FSMC_Init+0xec>)
 80019c2:	2210      	movs	r2, #16
 80019c4:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80019c6:	4b26      	ldr	r3, [pc, #152]	; (8001a60 <MX_FSMC_Init+0xec>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80019cc:	4b24      	ldr	r3, [pc, #144]	; (8001a60 <MX_FSMC_Init+0xec>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80019d2:	4b23      	ldr	r3, [pc, #140]	; (8001a60 <MX_FSMC_Init+0xec>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80019d8:	4b21      	ldr	r3, [pc, #132]	; (8001a60 <MX_FSMC_Init+0xec>)
 80019da:	2200      	movs	r2, #0
 80019dc:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80019de:	4b20      	ldr	r3, [pc, #128]	; (8001a60 <MX_FSMC_Init+0xec>)
 80019e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019e4:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80019e6:	4b1e      	ldr	r3, [pc, #120]	; (8001a60 <MX_FSMC_Init+0xec>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80019ec:	4b1c      	ldr	r3, [pc, #112]	; (8001a60 <MX_FSMC_Init+0xec>)
 80019ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019f2:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80019f4:	4b1a      	ldr	r3, [pc, #104]	; (8001a60 <MX_FSMC_Init+0xec>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80019fa:	4b19      	ldr	r3, [pc, #100]	; (8001a60 <MX_FSMC_Init+0xec>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001a00:	4b17      	ldr	r3, [pc, #92]	; (8001a60 <MX_FSMC_Init+0xec>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8001a06:	230f      	movs	r3, #15
 8001a08:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8001a0a:	230f      	movs	r3, #15
 8001a0c:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 40;
 8001a0e:	2328      	movs	r3, #40	; 0x28
 8001a10:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 8001a12:	2300      	movs	r3, #0
 8001a14:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8001a16:	2310      	movs	r3, #16
 8001a18:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8001a1a:	2311      	movs	r3, #17
 8001a1c:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 2;
 8001a22:	2302      	movs	r3, #2
 8001a24:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8001a26:	230f      	movs	r3, #15
 8001a28:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 4;
 8001a2a:	2304      	movs	r3, #4
 8001a2c:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8001a32:	2310      	movs	r3, #16
 8001a34:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8001a36:	2311      	movs	r3, #17
 8001a38:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8001a3e:	463a      	mov	r2, r7
 8001a40:	f107 031c 	add.w	r3, r7, #28
 8001a44:	4619      	mov	r1, r3
 8001a46:	4806      	ldr	r0, [pc, #24]	; (8001a60 <MX_FSMC_Init+0xec>)
 8001a48:	f003 f8bb 	bl	8004bc2 <HAL_SRAM_Init>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8001a52:	f000 f809 	bl	8001a68 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001a56:	bf00      	nop
 8001a58:	3738      	adds	r7, #56	; 0x38
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	200002bc 	.word	0x200002bc
 8001a64:	a0000104 	.word	0xa0000104

08001a68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a6c:	b672      	cpsid	i
}
 8001a6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a70:	e7fe      	b.n	8001a70 <Error_Handler+0x8>
	...

08001a74 <SPI1_Transfer>:
#include <stm32f4xx_hal_gpio.h>
#include <stdio.h>


uint8_t SPI1_Transfer(uint8_t data)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b085      	sub	sp, #20
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	71fb      	strb	r3, [r7, #7]
	SPI_TypeDef *SPI1inst = hspi1.Instance;
 8001a7e:	4b12      	ldr	r3, [pc, #72]	; (8001ac8 <SPI1_Transfer+0x54>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	60fb      	str	r3, [r7, #12]
    SPI1inst->DR = data;
 8001a84:	79fa      	ldrb	r2, [r7, #7]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	60da      	str	r2, [r3, #12]
    while (!(SPI1inst->SR & (SPI_FLAG_TXE)));
 8001a8a:	bf00      	nop
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f003 0302 	and.w	r3, r3, #2
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d0f9      	beq.n	8001a8c <SPI1_Transfer+0x18>
    while (!(SPI1inst->SR & (SPI_FLAG_RXNE)));
 8001a98:	bf00      	nop
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d0f9      	beq.n	8001a9a <SPI1_Transfer+0x26>
    while (SPI1inst->SR & (SPI_FLAG_BSY));
 8001aa6:	bf00      	nop
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d1f9      	bne.n	8001aa8 <SPI1_Transfer+0x34>
    return SPI1inst->DR;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	b2db      	uxtb	r3, r3
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3714      	adds	r7, #20
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	20000194 	.word	0x20000194

08001acc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	607b      	str	r3, [r7, #4]
 8001ad6:	4b10      	ldr	r3, [pc, #64]	; (8001b18 <HAL_MspInit+0x4c>)
 8001ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ada:	4a0f      	ldr	r2, [pc, #60]	; (8001b18 <HAL_MspInit+0x4c>)
 8001adc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ae0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ae2:	4b0d      	ldr	r3, [pc, #52]	; (8001b18 <HAL_MspInit+0x4c>)
 8001ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aea:	607b      	str	r3, [r7, #4]
 8001aec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	603b      	str	r3, [r7, #0]
 8001af2:	4b09      	ldr	r3, [pc, #36]	; (8001b18 <HAL_MspInit+0x4c>)
 8001af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af6:	4a08      	ldr	r2, [pc, #32]	; (8001b18 <HAL_MspInit+0x4c>)
 8001af8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001afc:	6413      	str	r3, [r2, #64]	; 0x40
 8001afe:	4b06      	ldr	r3, [pc, #24]	; (8001b18 <HAL_MspInit+0x4c>)
 8001b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b06:	603b      	str	r3, [r7, #0]
 8001b08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b0a:	bf00      	nop
 8001b0c:	370c      	adds	r7, #12
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	40023800 	.word	0x40023800

08001b1c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b08a      	sub	sp, #40	; 0x28
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b24:	f107 0314 	add.w	r3, r7, #20
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	605a      	str	r2, [r3, #4]
 8001b2e:	609a      	str	r2, [r3, #8]
 8001b30:	60da      	str	r2, [r3, #12]
 8001b32:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a19      	ldr	r2, [pc, #100]	; (8001ba0 <HAL_I2C_MspInit+0x84>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d12b      	bne.n	8001b96 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b3e:	2300      	movs	r3, #0
 8001b40:	613b      	str	r3, [r7, #16]
 8001b42:	4b18      	ldr	r3, [pc, #96]	; (8001ba4 <HAL_I2C_MspInit+0x88>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	4a17      	ldr	r2, [pc, #92]	; (8001ba4 <HAL_I2C_MspInit+0x88>)
 8001b48:	f043 0302 	orr.w	r3, r3, #2
 8001b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b4e:	4b15      	ldr	r3, [pc, #84]	; (8001ba4 <HAL_I2C_MspInit+0x88>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b52:	f003 0302 	and.w	r3, r3, #2
 8001b56:	613b      	str	r3, [r7, #16]
 8001b58:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b5a:	23c0      	movs	r3, #192	; 0xc0
 8001b5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b5e:	2312      	movs	r3, #18
 8001b60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b62:	2301      	movs	r3, #1
 8001b64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b66:	2303      	movs	r3, #3
 8001b68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b6a:	2304      	movs	r3, #4
 8001b6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b6e:	f107 0314 	add.w	r3, r7, #20
 8001b72:	4619      	mov	r1, r3
 8001b74:	480c      	ldr	r0, [pc, #48]	; (8001ba8 <HAL_I2C_MspInit+0x8c>)
 8001b76:	f000 fff7 	bl	8002b68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60fb      	str	r3, [r7, #12]
 8001b7e:	4b09      	ldr	r3, [pc, #36]	; (8001ba4 <HAL_I2C_MspInit+0x88>)
 8001b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b82:	4a08      	ldr	r2, [pc, #32]	; (8001ba4 <HAL_I2C_MspInit+0x88>)
 8001b84:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b88:	6413      	str	r3, [r2, #64]	; 0x40
 8001b8a:	4b06      	ldr	r3, [pc, #24]	; (8001ba4 <HAL_I2C_MspInit+0x88>)
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b92:	60fb      	str	r3, [r7, #12]
 8001b94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b96:	bf00      	nop
 8001b98:	3728      	adds	r7, #40	; 0x28
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40005400 	.word	0x40005400
 8001ba4:	40023800 	.word	0x40023800
 8001ba8:	40020400 	.word	0x40020400

08001bac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b08a      	sub	sp, #40	; 0x28
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb4:	f107 0314 	add.w	r3, r7, #20
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	605a      	str	r2, [r3, #4]
 8001bbe:	609a      	str	r2, [r3, #8]
 8001bc0:	60da      	str	r2, [r3, #12]
 8001bc2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a19      	ldr	r2, [pc, #100]	; (8001c30 <HAL_SPI_MspInit+0x84>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d12b      	bne.n	8001c26 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001bce:	2300      	movs	r3, #0
 8001bd0:	613b      	str	r3, [r7, #16]
 8001bd2:	4b18      	ldr	r3, [pc, #96]	; (8001c34 <HAL_SPI_MspInit+0x88>)
 8001bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd6:	4a17      	ldr	r2, [pc, #92]	; (8001c34 <HAL_SPI_MspInit+0x88>)
 8001bd8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001bdc:	6453      	str	r3, [r2, #68]	; 0x44
 8001bde:	4b15      	ldr	r3, [pc, #84]	; (8001c34 <HAL_SPI_MspInit+0x88>)
 8001be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001be6:	613b      	str	r3, [r7, #16]
 8001be8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bea:	2300      	movs	r3, #0
 8001bec:	60fb      	str	r3, [r7, #12]
 8001bee:	4b11      	ldr	r3, [pc, #68]	; (8001c34 <HAL_SPI_MspInit+0x88>)
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf2:	4a10      	ldr	r2, [pc, #64]	; (8001c34 <HAL_SPI_MspInit+0x88>)
 8001bf4:	f043 0301 	orr.w	r3, r3, #1
 8001bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfa:	4b0e      	ldr	r3, [pc, #56]	; (8001c34 <HAL_SPI_MspInit+0x88>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfe:	f003 0301 	and.w	r3, r3, #1
 8001c02:	60fb      	str	r3, [r7, #12]
 8001c04:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001c06:	23e0      	movs	r3, #224	; 0xe0
 8001c08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c12:	2303      	movs	r3, #3
 8001c14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c16:	2305      	movs	r3, #5
 8001c18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c1a:	f107 0314 	add.w	r3, r7, #20
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4805      	ldr	r0, [pc, #20]	; (8001c38 <HAL_SPI_MspInit+0x8c>)
 8001c22:	f000 ffa1 	bl	8002b68 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001c26:	bf00      	nop
 8001c28:	3728      	adds	r7, #40	; 0x28
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	40013000 	.word	0x40013000
 8001c34:	40023800 	.word	0x40023800
 8001c38:	40020000 	.word	0x40020000

08001c3c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a0b      	ldr	r2, [pc, #44]	; (8001c78 <HAL_TIM_PWM_MspInit+0x3c>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d10d      	bne.n	8001c6a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c4e:	2300      	movs	r3, #0
 8001c50:	60fb      	str	r3, [r7, #12]
 8001c52:	4b0a      	ldr	r3, [pc, #40]	; (8001c7c <HAL_TIM_PWM_MspInit+0x40>)
 8001c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c56:	4a09      	ldr	r2, [pc, #36]	; (8001c7c <HAL_TIM_PWM_MspInit+0x40>)
 8001c58:	f043 0301 	orr.w	r3, r3, #1
 8001c5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c5e:	4b07      	ldr	r3, [pc, #28]	; (8001c7c <HAL_TIM_PWM_MspInit+0x40>)
 8001c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	60fb      	str	r3, [r7, #12]
 8001c68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001c6a:	bf00      	nop
 8001c6c:	3714      	adds	r7, #20
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	40010000 	.word	0x40010000
 8001c7c:	40023800 	.word	0x40023800

08001c80 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b088      	sub	sp, #32
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c88:	f107 030c 	add.w	r3, r7, #12
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	605a      	str	r2, [r3, #4]
 8001c92:	609a      	str	r2, [r3, #8]
 8001c94:	60da      	str	r2, [r3, #12]
 8001c96:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a12      	ldr	r2, [pc, #72]	; (8001ce8 <HAL_TIM_MspPostInit+0x68>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d11e      	bne.n	8001ce0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	60bb      	str	r3, [r7, #8]
 8001ca6:	4b11      	ldr	r3, [pc, #68]	; (8001cec <HAL_TIM_MspPostInit+0x6c>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001caa:	4a10      	ldr	r2, [pc, #64]	; (8001cec <HAL_TIM_MspPostInit+0x6c>)
 8001cac:	f043 0301 	orr.w	r3, r3, #1
 8001cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb2:	4b0e      	ldr	r3, [pc, #56]	; (8001cec <HAL_TIM_MspPostInit+0x6c>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	60bb      	str	r3, [r7, #8]
 8001cbc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = LCD_BL_Pin;
 8001cbe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001cc2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8001cd4:	f107 030c 	add.w	r3, r7, #12
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4805      	ldr	r0, [pc, #20]	; (8001cf0 <HAL_TIM_MspPostInit+0x70>)
 8001cdc:	f000 ff44 	bl	8002b68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001ce0:	bf00      	nop
 8001ce2:	3720      	adds	r7, #32
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	40010000 	.word	0x40010000
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	40020000 	.word	0x40020000

08001cf4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b08c      	sub	sp, #48	; 0x30
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cfc:	f107 031c 	add.w	r3, r7, #28
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]
 8001d04:	605a      	str	r2, [r3, #4]
 8001d06:	609a      	str	r2, [r3, #8]
 8001d08:	60da      	str	r2, [r3, #12]
 8001d0a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a3a      	ldr	r2, [pc, #232]	; (8001dfc <HAL_UART_MspInit+0x108>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d135      	bne.n	8001d82 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d16:	2300      	movs	r3, #0
 8001d18:	61bb      	str	r3, [r7, #24]
 8001d1a:	4b39      	ldr	r3, [pc, #228]	; (8001e00 <HAL_UART_MspInit+0x10c>)
 8001d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d1e:	4a38      	ldr	r2, [pc, #224]	; (8001e00 <HAL_UART_MspInit+0x10c>)
 8001d20:	f043 0310 	orr.w	r3, r3, #16
 8001d24:	6453      	str	r3, [r2, #68]	; 0x44
 8001d26:	4b36      	ldr	r3, [pc, #216]	; (8001e00 <HAL_UART_MspInit+0x10c>)
 8001d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2a:	f003 0310 	and.w	r3, r3, #16
 8001d2e:	61bb      	str	r3, [r7, #24]
 8001d30:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d32:	2300      	movs	r3, #0
 8001d34:	617b      	str	r3, [r7, #20]
 8001d36:	4b32      	ldr	r3, [pc, #200]	; (8001e00 <HAL_UART_MspInit+0x10c>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3a:	4a31      	ldr	r2, [pc, #196]	; (8001e00 <HAL_UART_MspInit+0x10c>)
 8001d3c:	f043 0301 	orr.w	r3, r3, #1
 8001d40:	6313      	str	r3, [r2, #48]	; 0x30
 8001d42:	4b2f      	ldr	r3, [pc, #188]	; (8001e00 <HAL_UART_MspInit+0x10c>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	617b      	str	r3, [r7, #20]
 8001d4c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001d4e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001d52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d54:	2302      	movs	r3, #2
 8001d56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d60:	2307      	movs	r3, #7
 8001d62:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d64:	f107 031c 	add.w	r3, r7, #28
 8001d68:	4619      	mov	r1, r3
 8001d6a:	4826      	ldr	r0, [pc, #152]	; (8001e04 <HAL_UART_MspInit+0x110>)
 8001d6c:	f000 fefc 	bl	8002b68 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001d70:	2200      	movs	r2, #0
 8001d72:	2100      	movs	r1, #0
 8001d74:	2025      	movs	r0, #37	; 0x25
 8001d76:	f000 fe2e 	bl	80029d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d7a:	2025      	movs	r0, #37	; 0x25
 8001d7c:	f000 fe47 	bl	8002a0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d80:	e038      	b.n	8001df4 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a20      	ldr	r2, [pc, #128]	; (8001e08 <HAL_UART_MspInit+0x114>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d133      	bne.n	8001df4 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	613b      	str	r3, [r7, #16]
 8001d90:	4b1b      	ldr	r3, [pc, #108]	; (8001e00 <HAL_UART_MspInit+0x10c>)
 8001d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d94:	4a1a      	ldr	r2, [pc, #104]	; (8001e00 <HAL_UART_MspInit+0x10c>)
 8001d96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d9a:	6413      	str	r3, [r2, #64]	; 0x40
 8001d9c:	4b18      	ldr	r3, [pc, #96]	; (8001e00 <HAL_UART_MspInit+0x10c>)
 8001d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da4:	613b      	str	r3, [r7, #16]
 8001da6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da8:	2300      	movs	r3, #0
 8001daa:	60fb      	str	r3, [r7, #12]
 8001dac:	4b14      	ldr	r3, [pc, #80]	; (8001e00 <HAL_UART_MspInit+0x10c>)
 8001dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db0:	4a13      	ldr	r2, [pc, #76]	; (8001e00 <HAL_UART_MspInit+0x10c>)
 8001db2:	f043 0301 	orr.w	r3, r3, #1
 8001db6:	6313      	str	r3, [r2, #48]	; 0x30
 8001db8:	4b11      	ldr	r3, [pc, #68]	; (8001e00 <HAL_UART_MspInit+0x10c>)
 8001dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbc:	f003 0301 	and.w	r3, r3, #1
 8001dc0:	60fb      	str	r3, [r7, #12]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001dc4:	230c      	movs	r3, #12
 8001dc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc8:	2302      	movs	r3, #2
 8001dca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001dd4:	2307      	movs	r3, #7
 8001dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd8:	f107 031c 	add.w	r3, r7, #28
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4809      	ldr	r0, [pc, #36]	; (8001e04 <HAL_UART_MspInit+0x110>)
 8001de0:	f000 fec2 	bl	8002b68 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001de4:	2200      	movs	r2, #0
 8001de6:	2100      	movs	r1, #0
 8001de8:	2026      	movs	r0, #38	; 0x26
 8001dea:	f000 fdf4 	bl	80029d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001dee:	2026      	movs	r0, #38	; 0x26
 8001df0:	f000 fe0d 	bl	8002a0e <HAL_NVIC_EnableIRQ>
}
 8001df4:	bf00      	nop
 8001df6:	3730      	adds	r7, #48	; 0x30
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	40011000 	.word	0x40011000
 8001e00:	40023800 	.word	0x40023800
 8001e04:	40020000 	.word	0x40020000
 8001e08:	40004400 	.word	0x40004400

08001e0c <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b086      	sub	sp, #24
 8001e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001e12:	1d3b      	adds	r3, r7, #4
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	605a      	str	r2, [r3, #4]
 8001e1a:	609a      	str	r2, [r3, #8]
 8001e1c:	60da      	str	r2, [r3, #12]
 8001e1e:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001e20:	4b1c      	ldr	r3, [pc, #112]	; (8001e94 <HAL_FSMC_MspInit+0x88>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d131      	bne.n	8001e8c <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8001e28:	4b1a      	ldr	r3, [pc, #104]	; (8001e94 <HAL_FSMC_MspInit+0x88>)
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001e2e:	2300      	movs	r3, #0
 8001e30:	603b      	str	r3, [r7, #0]
 8001e32:	4b19      	ldr	r3, [pc, #100]	; (8001e98 <HAL_FSMC_MspInit+0x8c>)
 8001e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e36:	4a18      	ldr	r2, [pc, #96]	; (8001e98 <HAL_FSMC_MspInit+0x8c>)
 8001e38:	f043 0301 	orr.w	r3, r3, #1
 8001e3c:	6393      	str	r3, [r2, #56]	; 0x38
 8001e3e:	4b16      	ldr	r3, [pc, #88]	; (8001e98 <HAL_FSMC_MspInit+0x8c>)
 8001e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e42:	f003 0301 	and.w	r3, r3, #1
 8001e46:	603b      	str	r3, [r7, #0]
 8001e48:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001e4a:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001e4e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e50:	2302      	movs	r3, #2
 8001e52:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e54:	2300      	movs	r3, #0
 8001e56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001e5c:	230c      	movs	r3, #12
 8001e5e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e60:	1d3b      	adds	r3, r7, #4
 8001e62:	4619      	mov	r1, r3
 8001e64:	480d      	ldr	r0, [pc, #52]	; (8001e9c <HAL_FSMC_MspInit+0x90>)
 8001e66:	f000 fe7f 	bl	8002b68 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13
 8001e6a:	f24e 73b3 	movw	r3, #59315	; 0xe7b3
 8001e6e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e70:	2302      	movs	r3, #2
 8001e72:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e74:	2300      	movs	r3, #0
 8001e76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001e7c:	230c      	movs	r3, #12
 8001e7e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e80:	1d3b      	adds	r3, r7, #4
 8001e82:	4619      	mov	r1, r3
 8001e84:	4806      	ldr	r0, [pc, #24]	; (8001ea0 <HAL_FSMC_MspInit+0x94>)
 8001e86:	f000 fe6f 	bl	8002b68 <HAL_GPIO_Init>
 8001e8a:	e000      	b.n	8001e8e <HAL_FSMC_MspInit+0x82>
    return;
 8001e8c:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001e8e:	3718      	adds	r7, #24
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	20000310 	.word	0x20000310
 8001e98:	40023800 	.word	0x40023800
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	40020c00 	.word	0x40020c00

08001ea4 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001eac:	f7ff ffae 	bl	8001e0c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001eb0:	bf00      	nop
 8001eb2:	3708      	adds	r7, #8
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ebc:	e7fe      	b.n	8001ebc <NMI_Handler+0x4>

08001ebe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ec2:	e7fe      	b.n	8001ec2 <HardFault_Handler+0x4>

08001ec4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ec8:	e7fe      	b.n	8001ec8 <MemManage_Handler+0x4>

08001eca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ece:	e7fe      	b.n	8001ece <BusFault_Handler+0x4>

08001ed0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ed4:	e7fe      	b.n	8001ed4 <UsageFault_Handler+0x4>

08001ed6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001eda:	bf00      	nop
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ee8:	bf00      	nop
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr

08001ef2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ef6:	bf00      	nop
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f04:	f000 fc48 	bl	8002798 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f08:	bf00      	nop
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001f10:	2010      	movs	r0, #16
 8001f12:	f000 ffdf 	bl	8002ed4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001f16:	bf00      	nop
 8001f18:	bd80      	pop	{r7, pc}
	...

08001f1c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  static int ledVal = 0;
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, ledVal);
 8001f22:	4b24      	ldr	r3, [pc, #144]	; (8001fb4 <USART1_IRQHandler+0x98>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	461a      	mov	r2, r3
 8001f2a:	2108      	movs	r1, #8
 8001f2c:	4822      	ldr	r0, [pc, #136]	; (8001fb8 <USART1_IRQHandler+0x9c>)
 8001f2e:	f000 ffb7 	bl	8002ea0 <HAL_GPIO_WritePin>
  ledVal = !ledVal;
 8001f32:	4b20      	ldr	r3, [pc, #128]	; (8001fb4 <USART1_IRQHandler+0x98>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	bf0c      	ite	eq
 8001f3a:	2301      	moveq	r3, #1
 8001f3c:	2300      	movne	r3, #0
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	461a      	mov	r2, r3
 8001f42:	4b1c      	ldr	r3, [pc, #112]	; (8001fb4 <USART1_IRQHandler+0x98>)
 8001f44:	601a      	str	r2, [r3, #0]
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001f46:	481d      	ldr	r0, [pc, #116]	; (8001fbc <USART1_IRQHandler+0xa0>)
 8001f48:	f003 fcf0 	bl	800592c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  volatile unsigned int IIR;
  IIR = USART1->SR;
 8001f4c:	4b1c      	ldr	r3, [pc, #112]	; (8001fc0 <USART1_IRQHandler+0xa4>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	603b      	str	r3, [r7, #0]
  if(IIR & UART_FLAG_RXNE){
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	f003 0320 	and.w	r3, r3, #32
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d009      	beq.n	8001f70 <USART1_IRQHandler+0x54>
  		//Read Data Register Not Empty
  		char t = USART1->DR; // the character from the USART1 data register is saved in t
 8001f5c:	4b18      	ldr	r3, [pc, #96]	; (8001fc0 <USART1_IRQHandler+0xa4>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	71fb      	strb	r3, [r7, #7]
  		put_in_rx_buffer(t,DBG_UART);
 8001f62:	4b18      	ldr	r3, [pc, #96]	; (8001fc4 <USART1_IRQHandler+0xa8>)
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	79fb      	ldrb	r3, [r7, #7]
 8001f68:	4611      	mov	r1, r2
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f000 f93c 	bl	80021e8 <put_in_rx_buffer>
      }
  if(IIR & UART_FLAG_TXE){
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d018      	beq.n	8001fac <USART1_IRQHandler+0x90>
  		if(wr_pointer_dbg==rd_pointer_dbg){
 8001f7a:	4b13      	ldr	r3, [pc, #76]	; (8001fc8 <USART1_IRQHandler+0xac>)
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	4b13      	ldr	r3, [pc, #76]	; (8001fcc <USART1_IRQHandler+0xb0>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d108      	bne.n	8001f98 <USART1_IRQHandler+0x7c>
  			__HAL_UART_DISABLE_IT(&huart1, UART_IT_TXE); //whole message transmitted
 8001f86:	4b0d      	ldr	r3, [pc, #52]	; (8001fbc <USART1_IRQHandler+0xa0>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	68da      	ldr	r2, [r3, #12]
 8001f8c:	4b0b      	ldr	r3, [pc, #44]	; (8001fbc <USART1_IRQHandler+0xa0>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f94:	60da      	str	r2, [r3, #12]
  		}
  	}


  /* USER CODE END USART1_IRQn 1 */
}
 8001f96:	e009      	b.n	8001fac <USART1_IRQHandler+0x90>
  			DBG_UART->DR = get_from_tx_buffer(DBG_UART);
 8001f98:	4b0a      	ldr	r3, [pc, #40]	; (8001fc4 <USART1_IRQHandler+0xa8>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f000 f9c7 	bl	8002330 <get_from_tx_buffer>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	4b07      	ldr	r3, [pc, #28]	; (8001fc4 <USART1_IRQHandler+0xa8>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	605a      	str	r2, [r3, #4]
}
 8001fac:	bf00      	nop
 8001fae:	3708      	adds	r7, #8
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	20000314 	.word	0x20000314
 8001fb8:	40020400 	.word	0x40020400
 8001fbc:	20000234 	.word	0x20000234
 8001fc0:	40011000 	.word	0x40011000
 8001fc4:	20000008 	.word	0x20000008
 8001fc8:	20000b28 	.word	0x20000b28
 8001fcc:	20000b24 	.word	0x20000b24

08001fd0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001fd6:	481b      	ldr	r0, [pc, #108]	; (8002044 <USART2_IRQHandler+0x74>)
 8001fd8:	f003 fca8 	bl	800592c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  volatile unsigned int IIR;
  	IIR=USART2->SR;
 8001fdc:	4b1a      	ldr	r3, [pc, #104]	; (8002048 <USART2_IRQHandler+0x78>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	603b      	str	r3, [r7, #0]
    if(IIR & UART_FLAG_RXNE){
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	f003 0320 	and.w	r3, r3, #32
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d009      	beq.n	8002000 <USART2_IRQHandler+0x30>
  		// check if the USART6 receive interrupt flag was set
  		char t = USART2->DR; // the character from the USART1 data register is saved in t
 8001fec:	4b16      	ldr	r3, [pc, #88]	; (8002048 <USART2_IRQHandler+0x78>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	71fb      	strb	r3, [r7, #7]
  		put_in_rx_buffer(t,RS485_UART);
 8001ff2:	4b16      	ldr	r3, [pc, #88]	; (800204c <USART2_IRQHandler+0x7c>)
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	79fb      	ldrb	r3, [r7, #7]
 8001ff8:	4611      	mov	r1, r2
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f000 f8f4 	bl	80021e8 <put_in_rx_buffer>
      }
  	if(IIR & UART_FLAG_TXE){
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002006:	2b00      	cmp	r3, #0
 8002008:	d017      	beq.n	800203a <USART2_IRQHandler+0x6a>
  		if(wr_pointer_rs485==rd_pointer_rs485){
 800200a:	4b11      	ldr	r3, [pc, #68]	; (8002050 <USART2_IRQHandler+0x80>)
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	4b11      	ldr	r3, [pc, #68]	; (8002054 <USART2_IRQHandler+0x84>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	429a      	cmp	r2, r3
 8002014:	d108      	bne.n	8002028 <USART2_IRQHandler+0x58>
  			__HAL_UART_DISABLE_IT(&huart2, UART_IT_TXE);
 8002016:	4b0b      	ldr	r3, [pc, #44]	; (8002044 <USART2_IRQHandler+0x74>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	68da      	ldr	r2, [r3, #12]
 800201c:	4b09      	ldr	r3, [pc, #36]	; (8002044 <USART2_IRQHandler+0x74>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002024:	60da      	str	r2, [r3, #12]
  			USART2->DR = get_from_tx_buffer(RS485_UART);
  		}
  	}

  /* USER CODE END USART2_IRQn 1 */
}
 8002026:	e008      	b.n	800203a <USART2_IRQHandler+0x6a>
  			USART2->DR = get_from_tx_buffer(RS485_UART);
 8002028:	4b08      	ldr	r3, [pc, #32]	; (800204c <USART2_IRQHandler+0x7c>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4618      	mov	r0, r3
 800202e:	f000 f97f 	bl	8002330 <get_from_tx_buffer>
 8002032:	4603      	mov	r3, r0
 8002034:	461a      	mov	r2, r3
 8002036:	4b04      	ldr	r3, [pc, #16]	; (8002048 <USART2_IRQHandler+0x78>)
 8002038:	605a      	str	r2, [r3, #4]
}
 800203a:	bf00      	nop
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	20000278 	.word	0x20000278
 8002048:	40004400 	.word	0x40004400
 800204c:	20000004 	.word	0x20000004
 8002050:	20000720 	.word	0x20000720
 8002054:	2000071c 	.word	0x2000071c

08002058 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af00      	add	r7, sp, #0
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002064:	2300      	movs	r3, #0
 8002066:	617b      	str	r3, [r7, #20]
 8002068:	e00a      	b.n	8002080 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800206a:	f3af 8000 	nop.w
 800206e:	4601      	mov	r1, r0
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	1c5a      	adds	r2, r3, #1
 8002074:	60ba      	str	r2, [r7, #8]
 8002076:	b2ca      	uxtb	r2, r1
 8002078:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	3301      	adds	r3, #1
 800207e:	617b      	str	r3, [r7, #20]
 8002080:	697a      	ldr	r2, [r7, #20]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	429a      	cmp	r2, r3
 8002086:	dbf0      	blt.n	800206a <_read+0x12>
	}

return len;
 8002088:	687b      	ldr	r3, [r7, #4]
}
 800208a:	4618      	mov	r0, r3
 800208c:	3718      	adds	r7, #24
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	b086      	sub	sp, #24
 8002096:	af00      	add	r7, sp, #0
 8002098:	60f8      	str	r0, [r7, #12]
 800209a:	60b9      	str	r1, [r7, #8]
 800209c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800209e:	2300      	movs	r3, #0
 80020a0:	617b      	str	r3, [r7, #20]
 80020a2:	e009      	b.n	80020b8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	1c5a      	adds	r2, r3, #1
 80020a8:	60ba      	str	r2, [r7, #8]
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f000 f889 	bl	80021c4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	3301      	adds	r3, #1
 80020b6:	617b      	str	r3, [r7, #20]
 80020b8:	697a      	ldr	r2, [r7, #20]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	429a      	cmp	r2, r3
 80020be:	dbf1      	blt.n	80020a4 <_write+0x12>
	}
	return len;
 80020c0:	687b      	ldr	r3, [r7, #4]
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3718      	adds	r7, #24
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <_close>:

int _close(int file)
{
 80020ca:	b480      	push	{r7}
 80020cc:	b083      	sub	sp, #12
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
	return -1;
 80020d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr

080020e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020e2:	b480      	push	{r7}
 80020e4:	b083      	sub	sp, #12
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
 80020ea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020f2:	605a      	str	r2, [r3, #4]
	return 0;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr

08002102 <_isatty>:

int _isatty(int file)
{
 8002102:	b480      	push	{r7}
 8002104:	b083      	sub	sp, #12
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
	return 1;
 800210a:	2301      	movs	r3, #1
}
 800210c:	4618      	mov	r0, r3
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002118:	b480      	push	{r7}
 800211a:	b085      	sub	sp, #20
 800211c:	af00      	add	r7, sp, #0
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	60b9      	str	r1, [r7, #8]
 8002122:	607a      	str	r2, [r7, #4]
	return 0;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3714      	adds	r7, #20
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
	...

08002134 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800213c:	4a14      	ldr	r2, [pc, #80]	; (8002190 <_sbrk+0x5c>)
 800213e:	4b15      	ldr	r3, [pc, #84]	; (8002194 <_sbrk+0x60>)
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002148:	4b13      	ldr	r3, [pc, #76]	; (8002198 <_sbrk+0x64>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d102      	bne.n	8002156 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002150:	4b11      	ldr	r3, [pc, #68]	; (8002198 <_sbrk+0x64>)
 8002152:	4a12      	ldr	r2, [pc, #72]	; (800219c <_sbrk+0x68>)
 8002154:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002156:	4b10      	ldr	r3, [pc, #64]	; (8002198 <_sbrk+0x64>)
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4413      	add	r3, r2
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	429a      	cmp	r2, r3
 8002162:	d207      	bcs.n	8002174 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002164:	f004 fbee 	bl	8006944 <__errno>
 8002168:	4603      	mov	r3, r0
 800216a:	220c      	movs	r2, #12
 800216c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800216e:	f04f 33ff 	mov.w	r3, #4294967295
 8002172:	e009      	b.n	8002188 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002174:	4b08      	ldr	r3, [pc, #32]	; (8002198 <_sbrk+0x64>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800217a:	4b07      	ldr	r3, [pc, #28]	; (8002198 <_sbrk+0x64>)
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4413      	add	r3, r2
 8002182:	4a05      	ldr	r2, [pc, #20]	; (8002198 <_sbrk+0x64>)
 8002184:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002186:	68fb      	ldr	r3, [r7, #12]
}
 8002188:	4618      	mov	r0, r3
 800218a:	3718      	adds	r7, #24
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	20020000 	.word	0x20020000
 8002194:	00000400 	.word	0x00000400
 8002198:	20000318 	.word	0x20000318
 800219c:	20002f58 	.word	0x20002f58

080021a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021a4:	4b06      	ldr	r3, [pc, #24]	; (80021c0 <SystemInit+0x20>)
 80021a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021aa:	4a05      	ldr	r2, [pc, #20]	; (80021c0 <SystemInit+0x20>)
 80021ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021b4:	bf00      	nop
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	e000ed00 	.word	0xe000ed00

080021c4 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

//redirect printf to uart1.
PUTCHAR_PROTOTYPE{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 0xffff);
 80021cc:	1d39      	adds	r1, r7, #4
 80021ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021d2:	2201      	movs	r2, #1
 80021d4:	4803      	ldr	r0, [pc, #12]	; (80021e4 <__io_putchar+0x20>)
 80021d6:	f003 fb16 	bl	8005806 <HAL_UART_Transmit>
	return ch;
 80021da:	687b      	ldr	r3, [r7, #4]
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3708      	adds	r7, #8
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	20000234 	.word	0x20000234

080021e8 <put_in_rx_buffer>:

void put_in_rx_buffer(char data, USART_TypeDef* USARTx)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	4603      	mov	r3, r0
 80021f0:	6039      	str	r1, [r7, #0]
 80021f2:	71fb      	strb	r3, [r7, #7]
	if(USARTx == DBG_UART)
 80021f4:	4b1d      	ldr	r3, [pc, #116]	; (800226c <put_in_rx_buffer+0x84>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	683a      	ldr	r2, [r7, #0]
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d114      	bne.n	8002228 <put_in_rx_buffer+0x40>
	{
		if(SIO_RBUFLEN_DBG>=LEN_RX_BUFFER_DBG)
 80021fe:	4b1c      	ldr	r3, [pc, #112]	; (8002270 <put_in_rx_buffer+0x88>)
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	4b1c      	ldr	r3, [pc, #112]	; (8002274 <put_in_rx_buffer+0x8c>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800220c:	d226      	bcs.n	800225c <put_in_rx_buffer+0x74>
			{
				return;
			}
		rx_buffer_dbg[wr_pointer_rx_dbg & (LEN_RX_BUFFER_DBG - 1)]=data;
 800220e:	4b18      	ldr	r3, [pc, #96]	; (8002270 <put_in_rx_buffer+0x88>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002216:	4918      	ldr	r1, [pc, #96]	; (8002278 <put_in_rx_buffer+0x90>)
 8002218:	79fa      	ldrb	r2, [r7, #7]
 800221a:	54ca      	strb	r2, [r1, r3]
		wr_pointer_rx_dbg++;
 800221c:	4b14      	ldr	r3, [pc, #80]	; (8002270 <put_in_rx_buffer+0x88>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	3301      	adds	r3, #1
 8002222:	4a13      	ldr	r2, [pc, #76]	; (8002270 <put_in_rx_buffer+0x88>)
 8002224:	6013      	str	r3, [r2, #0]
 8002226:	e01c      	b.n	8002262 <put_in_rx_buffer+0x7a>
	}
	else if(USARTx == RS485_UART)
 8002228:	4b14      	ldr	r3, [pc, #80]	; (800227c <put_in_rx_buffer+0x94>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	683a      	ldr	r2, [r7, #0]
 800222e:	429a      	cmp	r2, r3
 8002230:	d117      	bne.n	8002262 <put_in_rx_buffer+0x7a>
	{
		if(SIO_RBUFLEN_RS485>=LEN_RX_BUFFER_RS485)
 8002232:	4b13      	ldr	r3, [pc, #76]	; (8002280 <put_in_rx_buffer+0x98>)
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	4b13      	ldr	r3, [pc, #76]	; (8002284 <put_in_rx_buffer+0x9c>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002240:	d20e      	bcs.n	8002260 <put_in_rx_buffer+0x78>
			{
				return;
			}
		rx_buffer_rs485[wr_pointer_rx_rs485 & (LEN_RX_BUFFER_RS485 - 1)]=data;
 8002242:	4b0f      	ldr	r3, [pc, #60]	; (8002280 <put_in_rx_buffer+0x98>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800224a:	490f      	ldr	r1, [pc, #60]	; (8002288 <put_in_rx_buffer+0xa0>)
 800224c:	79fa      	ldrb	r2, [r7, #7]
 800224e:	54ca      	strb	r2, [r1, r3]
		wr_pointer_rx_rs485++;
 8002250:	4b0b      	ldr	r3, [pc, #44]	; (8002280 <put_in_rx_buffer+0x98>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	3301      	adds	r3, #1
 8002256:	4a0a      	ldr	r2, [pc, #40]	; (8002280 <put_in_rx_buffer+0x98>)
 8002258:	6013      	str	r3, [r2, #0]
 800225a:	e002      	b.n	8002262 <put_in_rx_buffer+0x7a>
				return;
 800225c:	bf00      	nop
 800225e:	e000      	b.n	8002262 <put_in_rx_buffer+0x7a>
				return;
 8002260:	bf00      	nop
	}
}
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr
 800226c:	20000008 	.word	0x20000008
 8002270:	20002f38 	.word	0x20002f38
 8002274:	20002f34 	.word	0x20002f34
 8002278:	20000f34 	.word	0x20000f34
 800227c:	20000004 	.word	0x20000004
 8002280:	20000f30 	.word	0x20000f30
 8002284:	20000f2c 	.word	0x20000f2c
 8002288:	20000b2c 	.word	0x20000b2c

0800228c <put_in_tx_buffer>:

void put_in_tx_buffer(char data, USART_TypeDef* USARTx)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	4603      	mov	r3, r0
 8002294:	6039      	str	r1, [r7, #0]
 8002296:	71fb      	strb	r3, [r7, #7]
	if(USARTx == RS485_UART)
 8002298:	4b1d      	ldr	r3, [pc, #116]	; (8002310 <put_in_tx_buffer+0x84>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d114      	bne.n	80022cc <put_in_tx_buffer+0x40>
	{
		if(SIO_TBUFLEN_RS485>=LEN_TX_BUFFER_RS485)
 80022a2:	4b1c      	ldr	r3, [pc, #112]	; (8002314 <put_in_tx_buffer+0x88>)
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	4b1c      	ldr	r3, [pc, #112]	; (8002318 <put_in_tx_buffer+0x8c>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022b0:	d227      	bcs.n	8002302 <put_in_tx_buffer+0x76>
			{
				return;
			}
		tx_buffer_rs485[wr_pointer_rs485 & (LEN_TX_BUFFER_RS485 - 1)]=data;
 80022b2:	4b18      	ldr	r3, [pc, #96]	; (8002314 <put_in_tx_buffer+0x88>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022ba:	4918      	ldr	r1, [pc, #96]	; (800231c <put_in_tx_buffer+0x90>)
 80022bc:	79fa      	ldrb	r2, [r7, #7]
 80022be:	54ca      	strb	r2, [r1, r3]
		wr_pointer_rs485++;
 80022c0:	4b14      	ldr	r3, [pc, #80]	; (8002314 <put_in_tx_buffer+0x88>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	3301      	adds	r3, #1
 80022c6:	4a13      	ldr	r2, [pc, #76]	; (8002314 <put_in_tx_buffer+0x88>)
 80022c8:	6013      	str	r3, [r2, #0]
 80022ca:	e01b      	b.n	8002304 <put_in_tx_buffer+0x78>
	}
	else if(USARTx == DBG_UART)
 80022cc:	4b14      	ldr	r3, [pc, #80]	; (8002320 <put_in_tx_buffer+0x94>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	683a      	ldr	r2, [r7, #0]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d116      	bne.n	8002304 <put_in_tx_buffer+0x78>
	{
		while(SIO_TBUFLEN_DBG>=LEN_TX_BUFFER_DBG)
 80022d6:	bf00      	nop
 80022d8:	4b12      	ldr	r3, [pc, #72]	; (8002324 <put_in_tx_buffer+0x98>)
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	4b12      	ldr	r3, [pc, #72]	; (8002328 <put_in_tx_buffer+0x9c>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022e6:	d2f7      	bcs.n	80022d8 <put_in_tx_buffer+0x4c>
			{
				//return;
			}
		tx_buffer_dbg[wr_pointer_dbg & (LEN_TX_BUFFER_DBG - 1)]=data;
 80022e8:	4b0e      	ldr	r3, [pc, #56]	; (8002324 <put_in_tx_buffer+0x98>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022f0:	490e      	ldr	r1, [pc, #56]	; (800232c <put_in_tx_buffer+0xa0>)
 80022f2:	79fa      	ldrb	r2, [r7, #7]
 80022f4:	54ca      	strb	r2, [r1, r3]
		wr_pointer_dbg++;
 80022f6:	4b0b      	ldr	r3, [pc, #44]	; (8002324 <put_in_tx_buffer+0x98>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	3301      	adds	r3, #1
 80022fc:	4a09      	ldr	r2, [pc, #36]	; (8002324 <put_in_tx_buffer+0x98>)
 80022fe:	6013      	str	r3, [r2, #0]
 8002300:	e000      	b.n	8002304 <put_in_tx_buffer+0x78>
				return;
 8002302:	bf00      	nop
	}
}
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	20000004 	.word	0x20000004
 8002314:	20000720 	.word	0x20000720
 8002318:	2000071c 	.word	0x2000071c
 800231c:	2000031c 	.word	0x2000031c
 8002320:	20000008 	.word	0x20000008
 8002324:	20000b28 	.word	0x20000b28
 8002328:	20000b24 	.word	0x20000b24
 800232c:	20000724 	.word	0x20000724

08002330 <get_from_tx_buffer>:
char get_from_tx_buffer(USART_TypeDef* USARTx)
{
 8002330:	b480      	push	{r7}
 8002332:	b085      	sub	sp, #20
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
	char data;

	if(USARTx == RS485_UART)
 8002338:	4b14      	ldr	r3, [pc, #80]	; (800238c <get_from_tx_buffer+0x5c>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	429a      	cmp	r2, r3
 8002340:	d10c      	bne.n	800235c <get_from_tx_buffer+0x2c>
	{

		data=tx_buffer_rs485[rd_pointer_rs485 & (LEN_TX_BUFFER_RS485-1)];
 8002342:	4b13      	ldr	r3, [pc, #76]	; (8002390 <get_from_tx_buffer+0x60>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800234a:	4a12      	ldr	r2, [pc, #72]	; (8002394 <get_from_tx_buffer+0x64>)
 800234c:	5cd3      	ldrb	r3, [r2, r3]
 800234e:	73fb      	strb	r3, [r7, #15]
		rd_pointer_rs485++;
 8002350:	4b0f      	ldr	r3, [pc, #60]	; (8002390 <get_from_tx_buffer+0x60>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	3301      	adds	r3, #1
 8002356:	4a0e      	ldr	r2, [pc, #56]	; (8002390 <get_from_tx_buffer+0x60>)
 8002358:	6013      	str	r3, [r2, #0]
 800235a:	e010      	b.n	800237e <get_from_tx_buffer+0x4e>
	}
	else if(USARTx == DBG_UART)
 800235c:	4b0e      	ldr	r3, [pc, #56]	; (8002398 <get_from_tx_buffer+0x68>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	429a      	cmp	r2, r3
 8002364:	d10b      	bne.n	800237e <get_from_tx_buffer+0x4e>
	{

		data=tx_buffer_dbg[rd_pointer_dbg & (LEN_TX_BUFFER_DBG-1)];
 8002366:	4b0d      	ldr	r3, [pc, #52]	; (800239c <get_from_tx_buffer+0x6c>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800236e:	4a0c      	ldr	r2, [pc, #48]	; (80023a0 <get_from_tx_buffer+0x70>)
 8002370:	5cd3      	ldrb	r3, [r2, r3]
 8002372:	73fb      	strb	r3, [r7, #15]
		rd_pointer_dbg++;
 8002374:	4b09      	ldr	r3, [pc, #36]	; (800239c <get_from_tx_buffer+0x6c>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	3301      	adds	r3, #1
 800237a:	4a08      	ldr	r2, [pc, #32]	; (800239c <get_from_tx_buffer+0x6c>)
 800237c:	6013      	str	r3, [r2, #0]
	}
	return data;
 800237e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002380:	4618      	mov	r0, r3
 8002382:	3714      	adds	r7, #20
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr
 800238c:	20000004 	.word	0x20000004
 8002390:	2000071c 	.word	0x2000071c
 8002394:	2000031c 	.word	0x2000031c
 8002398:	20000008 	.word	0x20000008
 800239c:	20000b24 	.word	0x20000b24
 80023a0:	20000724 	.word	0x20000724

080023a4 <get_from_rx_buffer>:
char get_from_rx_buffer(USART_TypeDef* USARTx)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b085      	sub	sp, #20
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
	char data;

	if(USARTx == RS485_UART)
 80023ac:	4b14      	ldr	r3, [pc, #80]	; (8002400 <get_from_rx_buffer+0x5c>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d10c      	bne.n	80023d0 <get_from_rx_buffer+0x2c>
	{

		data=rx_buffer_rs485[rd_pointer_rx_rs485 & (LEN_RX_BUFFER_RS485-1)];
 80023b6:	4b13      	ldr	r3, [pc, #76]	; (8002404 <get_from_rx_buffer+0x60>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023be:	4a12      	ldr	r2, [pc, #72]	; (8002408 <get_from_rx_buffer+0x64>)
 80023c0:	5cd3      	ldrb	r3, [r2, r3]
 80023c2:	73fb      	strb	r3, [r7, #15]
		rd_pointer_rx_rs485++;
 80023c4:	4b0f      	ldr	r3, [pc, #60]	; (8002404 <get_from_rx_buffer+0x60>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	3301      	adds	r3, #1
 80023ca:	4a0e      	ldr	r2, [pc, #56]	; (8002404 <get_from_rx_buffer+0x60>)
 80023cc:	6013      	str	r3, [r2, #0]
 80023ce:	e010      	b.n	80023f2 <get_from_rx_buffer+0x4e>
	}
	else if(USARTx == DBG_UART)
 80023d0:	4b0e      	ldr	r3, [pc, #56]	; (800240c <get_from_rx_buffer+0x68>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d10b      	bne.n	80023f2 <get_from_rx_buffer+0x4e>
	{

		data=rx_buffer_dbg[rd_pointer_rx_dbg & (LEN_RX_BUFFER_DBG-1)];
 80023da:	4b0d      	ldr	r3, [pc, #52]	; (8002410 <get_from_rx_buffer+0x6c>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80023e2:	4a0c      	ldr	r2, [pc, #48]	; (8002414 <get_from_rx_buffer+0x70>)
 80023e4:	5cd3      	ldrb	r3, [r2, r3]
 80023e6:	73fb      	strb	r3, [r7, #15]
		rd_pointer_rx_dbg++;
 80023e8:	4b09      	ldr	r3, [pc, #36]	; (8002410 <get_from_rx_buffer+0x6c>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	3301      	adds	r3, #1
 80023ee:	4a08      	ldr	r2, [pc, #32]	; (8002410 <get_from_rx_buffer+0x6c>)
 80023f0:	6013      	str	r3, [r2, #0]
	}
	return data;
 80023f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3714      	adds	r7, #20
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr
 8002400:	20000004 	.word	0x20000004
 8002404:	20000f2c 	.word	0x20000f2c
 8002408:	20000b2c 	.word	0x20000b2c
 800240c:	20000008 	.word	0x20000008
 8002410:	20002f34 	.word	0x20002f34
 8002414:	20000f34 	.word	0x20000f34

08002418 <usart_message_ready>:

	return 0;
}
//**************************************************************************************
char usart_message_ready(USART_TypeDef* USARTx, char delimiter)
{
 8002418:	b480      	push	{r7}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	460b      	mov	r3, r1
 8002422:	70fb      	strb	r3, [r7, #3]
	if (USARTx == DBG_UART)
 8002424:	4b1f      	ldr	r3, [pc, #124]	; (80024a4 <usart_message_ready+0x8c>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	429a      	cmp	r2, r3
 800242c:	d117      	bne.n	800245e <usart_message_ready+0x46>
	{
		unsigned long tail = rd_pointer_rx_dbg;
 800242e:	4b1e      	ldr	r3, [pc, #120]	; (80024a8 <usart_message_ready+0x90>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	60fb      	str	r3, [r7, #12]

		while ((wr_pointer_rx_dbg - tail) != 0)
 8002434:	e00d      	b.n	8002452 <usart_message_ready+0x3a>
		{
			if (rx_buffer_dbg[tail & (LEN_RX_BUFFER_DBG - 1)] == delimiter)
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800243c:	4a1b      	ldr	r2, [pc, #108]	; (80024ac <usart_message_ready+0x94>)
 800243e:	5cd3      	ldrb	r3, [r2, r3]
 8002440:	b2db      	uxtb	r3, r3
 8002442:	78fa      	ldrb	r2, [r7, #3]
 8002444:	429a      	cmp	r2, r3
 8002446:	d101      	bne.n	800244c <usart_message_ready+0x34>
				return 1;
 8002448:	2301      	movs	r3, #1
 800244a:	e025      	b.n	8002498 <usart_message_ready+0x80>
			++tail;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	3301      	adds	r3, #1
 8002450:	60fb      	str	r3, [r7, #12]
		while ((wr_pointer_rx_dbg - tail) != 0)
 8002452:	4b17      	ldr	r3, [pc, #92]	; (80024b0 <usart_message_ready+0x98>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	68fa      	ldr	r2, [r7, #12]
 8002458:	429a      	cmp	r2, r3
 800245a:	d1ec      	bne.n	8002436 <usart_message_ready+0x1e>
 800245c:	e01b      	b.n	8002496 <usart_message_ready+0x7e>
		}
	}
	else if (USARTx == RS485_UART)
 800245e:	4b15      	ldr	r3, [pc, #84]	; (80024b4 <usart_message_ready+0x9c>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	429a      	cmp	r2, r3
 8002466:	d116      	bne.n	8002496 <usart_message_ready+0x7e>
	{
		unsigned long tail = rd_pointer_rx_rs485;
 8002468:	4b13      	ldr	r3, [pc, #76]	; (80024b8 <usart_message_ready+0xa0>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	60bb      	str	r3, [r7, #8]

		while ((wr_pointer_rx_rs485 - tail) != 0)
 800246e:	e00d      	b.n	800248c <usart_message_ready+0x74>
		{
			if (rx_buffer_rs485[tail & (LEN_RX_BUFFER_RS485 - 1)] == delimiter)
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002476:	4a11      	ldr	r2, [pc, #68]	; (80024bc <usart_message_ready+0xa4>)
 8002478:	5cd3      	ldrb	r3, [r2, r3]
 800247a:	b2db      	uxtb	r3, r3
 800247c:	78fa      	ldrb	r2, [r7, #3]
 800247e:	429a      	cmp	r2, r3
 8002480:	d101      	bne.n	8002486 <usart_message_ready+0x6e>
				return 1;
 8002482:	2301      	movs	r3, #1
 8002484:	e008      	b.n	8002498 <usart_message_ready+0x80>
			++tail;
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	3301      	adds	r3, #1
 800248a:	60bb      	str	r3, [r7, #8]
		while ((wr_pointer_rx_rs485 - tail) != 0)
 800248c:	4b0c      	ldr	r3, [pc, #48]	; (80024c0 <usart_message_ready+0xa8>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	68ba      	ldr	r2, [r7, #8]
 8002492:	429a      	cmp	r2, r3
 8002494:	d1ec      	bne.n	8002470 <usart_message_ready+0x58>
		}
	}
	return 0;
 8002496:	2300      	movs	r3, #0
}
 8002498:	4618      	mov	r0, r3
 800249a:	3714      	adds	r7, #20
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr
 80024a4:	20000008 	.word	0x20000008
 80024a8:	20002f34 	.word	0x20002f34
 80024ac:	20000f34 	.word	0x20000f34
 80024b0:	20002f38 	.word	0x20002f38
 80024b4:	20000004 	.word	0x20000004
 80024b8:	20000f2c 	.word	0x20000f2c
 80024bc:	20000b2c 	.word	0x20000b2c
 80024c0:	20000f30 	.word	0x20000f30

080024c4 <read_usart_message>:
/*
 * Reads message from specified uart rx buffer into @dst until @delimiter character is encountered or @max_len exceeded.
 * Returns: number of characters read if successful, zero when there is no message ready to be read.
 */
unsigned int read_usart_message(char* dst, UART_HandleTypeDef* huart, int max_len, char delimiter)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b086      	sub	sp, #24
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	60b9      	str	r1, [r7, #8]
 80024ce:	607a      	str	r2, [r7, #4]
 80024d0:	70fb      	strb	r3, [r7, #3]
	USART_TypeDef* USARTx = huart->Instance;
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	613b      	str	r3, [r7, #16]
	if (usart_message_ready(USARTx,delimiter))
 80024d8:	78fb      	ldrb	r3, [r7, #3]
 80024da:	4619      	mov	r1, r3
 80024dc:	6938      	ldr	r0, [r7, #16]
 80024de:	f7ff ff9b 	bl	8002418 <usart_message_ready>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d018      	beq.n	800251a <read_usart_message+0x56>
	{
		int nr = 0;
 80024e8:	2300      	movs	r3, #0
 80024ea:	617b      	str	r3, [r7, #20]
		do
		{
			*dst = get_from_rx_buffer(USARTx);
 80024ec:	6938      	ldr	r0, [r7, #16]
 80024ee:	f7ff ff59 	bl	80023a4 <get_from_rx_buffer>
 80024f2:	4603      	mov	r3, r0
 80024f4:	461a      	mov	r2, r3
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	701a      	strb	r2, [r3, #0]
			++nr;
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	3301      	adds	r3, #1
 80024fe:	617b      	str	r3, [r7, #20]
		} while (*dst++ != delimiter && nr < max_len);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	1c5a      	adds	r2, r3, #1
 8002504:	60fa      	str	r2, [r7, #12]
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	78fa      	ldrb	r2, [r7, #3]
 800250a:	429a      	cmp	r2, r3
 800250c:	d003      	beq.n	8002516 <read_usart_message+0x52>
 800250e:	697a      	ldr	r2, [r7, #20]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	429a      	cmp	r2, r3
 8002514:	dbea      	blt.n	80024ec <read_usart_message+0x28>

		return nr;
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	e000      	b.n	800251c <read_usart_message+0x58>
	}
	return 0;
 800251a:	2300      	movs	r3, #0
}
 800251c:	4618      	mov	r0, r3
 800251e:	3718      	adds	r7, #24
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <send_usart_message>:
/*
 * Sends @size bytes from @src via specified uart. Nonblocking.
 * Returns: 0 when operation fails due to another message being transmitted, number of bytes written to uart buffer otherwise.
 */

unsigned int send_usart_message(char* src, UART_HandleTypeDef* huart, int size){
 8002524:	b580      	push	{r7, lr}
 8002526:	b086      	sub	sp, #24
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	607a      	str	r2, [r7, #4]
	USART_TypeDef* USARTx = huart->Instance;
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	613b      	str	r3, [r7, #16]
	if (USARTx == DBG_UART){
 8002536:	4b21      	ldr	r3, [pc, #132]	; (80025bc <send_usart_message+0x98>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	693a      	ldr	r2, [r7, #16]
 800253c:	429a      	cmp	r2, r3
 800253e:	d107      	bne.n	8002550 <send_usart_message+0x2c>
		if(wr_pointer_dbg!=rd_pointer_dbg){
 8002540:	4b1f      	ldr	r3, [pc, #124]	; (80025c0 <send_usart_message+0x9c>)
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	4b1f      	ldr	r3, [pc, #124]	; (80025c4 <send_usart_message+0xa0>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	429a      	cmp	r2, r3
 800254a:	d00e      	beq.n	800256a <send_usart_message+0x46>
			return 0;//another message is in progress.
 800254c:	2300      	movs	r3, #0
 800254e:	e030      	b.n	80025b2 <send_usart_message+0x8e>
		}

	}
	else if (USARTx == RS485_UART){
 8002550:	4b1d      	ldr	r3, [pc, #116]	; (80025c8 <send_usart_message+0xa4>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	693a      	ldr	r2, [r7, #16]
 8002556:	429a      	cmp	r2, r3
 8002558:	d107      	bne.n	800256a <send_usart_message+0x46>
		if(wr_pointer_rs485!=rd_pointer_rs485){
 800255a:	4b1c      	ldr	r3, [pc, #112]	; (80025cc <send_usart_message+0xa8>)
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	4b1c      	ldr	r3, [pc, #112]	; (80025d0 <send_usart_message+0xac>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	429a      	cmp	r2, r3
 8002564:	d001      	beq.n	800256a <send_usart_message+0x46>
			return 0;//another message is in progress.
 8002566:	2300      	movs	r3, #0
 8002568:	e023      	b.n	80025b2 <send_usart_message+0x8e>
		}
	}

	int nr = 0;
 800256a:	2300      	movs	r3, #0
 800256c:	617b      	str	r3, [r7, #20]
	do{
		put_in_tx_buffer(*(src + nr), USARTx);
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	68fa      	ldr	r2, [r7, #12]
 8002572:	4413      	add	r3, r2
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	6939      	ldr	r1, [r7, #16]
 8002578:	4618      	mov	r0, r3
 800257a:	f7ff fe87 	bl	800228c <put_in_tx_buffer>
		nr++;
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	3301      	adds	r3, #1
 8002582:	617b      	str	r3, [r7, #20]
	} while (nr < size);
 8002584:	697a      	ldr	r2, [r7, #20]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	429a      	cmp	r2, r3
 800258a:	dbf0      	blt.n	800256e <send_usart_message+0x4a>

	if(nr>0){
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	2b00      	cmp	r3, #0
 8002590:	dd0e      	ble.n	80025b0 <send_usart_message+0x8c>
		USARTx->DR = get_from_tx_buffer(USARTx);
 8002592:	6938      	ldr	r0, [r7, #16]
 8002594:	f7ff fecc 	bl	8002330 <get_from_tx_buffer>
 8002598:	4603      	mov	r3, r0
 800259a:	461a      	mov	r2, r3
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	605a      	str	r2, [r3, #4]
		__HAL_UART_ENABLE_IT(huart, UART_IT_TXE); //turn on tx interrupt forever (until turned off in IRQ handler)
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68da      	ldr	r2, [r3, #12]
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025ae:	60da      	str	r2, [r3, #12]
	}
	return nr;
 80025b0:	697b      	ldr	r3, [r7, #20]
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3718      	adds	r7, #24
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	20000008 	.word	0x20000008
 80025c0:	20000b28 	.word	0x20000b28
 80025c4:	20000b24 	.word	0x20000b24
 80025c8:	20000004 	.word	0x20000004
 80025cc:	20000720 	.word	0x20000720
 80025d0:	2000071c 	.word	0x2000071c

080025d4 <uartDemoLoop>:
#include <stm32f4xx_hal.h>
#include <string.h>



void uartDemoLoop(){
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b0d4      	sub	sp, #336	; 0x150
 80025d8:	af00      	add	r7, sp, #0

	static int firstFlag = 0;

	if(firstFlag == 0){
 80025da:	4b29      	ldr	r3, [pc, #164]	; (8002680 <uartDemoLoop+0xac>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d105      	bne.n	80025ee <uartDemoLoop+0x1a>
		firstFlag = 1;
 80025e2:	4b27      	ldr	r3, [pc, #156]	; (8002680 <uartDemoLoop+0xac>)
 80025e4:	2201      	movs	r2, #1
 80025e6:	601a      	str	r2, [r3, #0]
		printf("[UART demo] Send a string over debug uart and terminate it by ENTER (ascii 13).\r\n");
 80025e8:	4826      	ldr	r0, [pc, #152]	; (8002684 <uartDemoLoop+0xb0>)
 80025ea:	f004 fa71 	bl	8006ad0 <puts>
	}

	char delimiter = 13;
 80025ee:	230d      	movs	r3, #13
 80025f0:	f887 314f 	strb.w	r3, [r7, #335]	; 0x14f
	char msg[64];

	int count = read_usart_message(msg, &huart1, sizeof(msg), delimiter);
 80025f4:	f897 314f 	ldrb.w	r3, [r7, #335]	; 0x14f
 80025f8:	f507 7082 	add.w	r0, r7, #260	; 0x104
 80025fc:	2240      	movs	r2, #64	; 0x40
 80025fe:	4922      	ldr	r1, [pc, #136]	; (8002688 <uartDemoLoop+0xb4>)
 8002600:	f7ff ff60 	bl	80024c4 <read_usart_message>
 8002604:	4603      	mov	r3, r0
 8002606:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148

	if(count == 0){
 800260a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800260e:	2b00      	cmp	r3, #0
 8002610:	d103      	bne.n	800261a <uartDemoLoop+0x46>
		//While reading buffer of received chars, delimiter char was not encountered.
		printf("[UART demo] message not yet ready.\r\n");
 8002612:	481e      	ldr	r0, [pc, #120]	; (800268c <uartDemoLoop+0xb8>)
 8002614:	f004 fa5c 	bl	8006ad0 <puts>
 8002618:	e02e      	b.n	8002678 <uartDemoLoop+0xa4>
		return;
	}

	printf("[UART demo] message ready!\r\n");
 800261a:	481d      	ldr	r0, [pc, #116]	; (8002690 <uartDemoLoop+0xbc>)
 800261c:	f004 fa58 	bl	8006ad0 <puts>

	msg[count-1] = 0; //null terminate received string
 8002620:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8002624:	3b01      	subs	r3, #1
 8002626:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800262a:	443b      	add	r3, r7
 800262c:	2200      	movs	r2, #0
 800262e:	f803 2c4c 	strb.w	r2, [r3, #-76]

	char reply[256];

	sprintf(reply, " Sending this as a buffer instead of printf just for demonstration. \n\r The message I got was \"%s\". \n\r", msg);
 8002632:	f507 7282 	add.w	r2, r7, #260	; 0x104
 8002636:	1d3b      	adds	r3, r7, #4
 8002638:	4916      	ldr	r1, [pc, #88]	; (8002694 <uartDemoLoop+0xc0>)
 800263a:	4618      	mov	r0, r3
 800263c:	f004 fa50 	bl	8006ae0 <siprintf>

	int ret = send_usart_message(reply, &huart1, strlen(reply));
 8002640:	1d3b      	adds	r3, r7, #4
 8002642:	4618      	mov	r0, r3
 8002644:	f7fd fdc4 	bl	80001d0 <strlen>
 8002648:	4603      	mov	r3, r0
 800264a:	461a      	mov	r2, r3
 800264c:	1d3b      	adds	r3, r7, #4
 800264e:	490e      	ldr	r1, [pc, #56]	; (8002688 <uartDemoLoop+0xb4>)
 8002650:	4618      	mov	r0, r3
 8002652:	f7ff ff67 	bl	8002524 <send_usart_message>
 8002656:	4603      	mov	r3, r0
 8002658:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144

	if(ret == 0){
 800265c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002660:	2b00      	cmp	r3, #0
 8002662:	d102      	bne.n	800266a <uartDemoLoop+0x96>
		printf("[UART demo] Fail: Cannot transmit now, another transmission in progress.\n\r");
 8002664:	480c      	ldr	r0, [pc, #48]	; (8002698 <uartDemoLoop+0xc4>)
 8002666:	f004 f9ad 	bl	80069c4 <iprintf>
	}

	HAL_Delay(500); //sleep for a bit so that next printf does not interfere with send_uart_message();
 800266a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800266e:	f000 f8b3 	bl	80027d8 <HAL_Delay>

	printf("[UART demo] Success.\n\r");
 8002672:	480a      	ldr	r0, [pc, #40]	; (800269c <uartDemoLoop+0xc8>)
 8002674:	f004 f9a6 	bl	80069c4 <iprintf>

}
 8002678:	f507 77a8 	add.w	r7, r7, #336	; 0x150
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	20002f3c 	.word	0x20002f3c
 8002684:	08007ef8 	.word	0x08007ef8
 8002688:	20000234 	.word	0x20000234
 800268c:	08007f4c 	.word	0x08007f4c
 8002690:	08007f70 	.word	0x08007f70
 8002694:	08007f8c 	.word	0x08007f8c
 8002698:	08007ff4 	.word	0x08007ff4
 800269c:	08008040 	.word	0x08008040

080026a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80026a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026a4:	480d      	ldr	r0, [pc, #52]	; (80026dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80026a6:	490e      	ldr	r1, [pc, #56]	; (80026e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80026a8:	4a0e      	ldr	r2, [pc, #56]	; (80026e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80026aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026ac:	e002      	b.n	80026b4 <LoopCopyDataInit>

080026ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026b2:	3304      	adds	r3, #4

080026b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026b8:	d3f9      	bcc.n	80026ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026ba:	4a0b      	ldr	r2, [pc, #44]	; (80026e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80026bc:	4c0b      	ldr	r4, [pc, #44]	; (80026ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80026be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026c0:	e001      	b.n	80026c6 <LoopFillZerobss>

080026c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026c4:	3204      	adds	r2, #4

080026c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026c8:	d3fb      	bcc.n	80026c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80026ca:	f7ff fd69 	bl	80021a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026ce:	f004 f93f 	bl	8006950 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026d2:	f7fe fe75 	bl	80013c0 <main>
  bx  lr    
 80026d6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80026d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80026dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026e0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80026e4:	08008118 	.word	0x08008118
  ldr r2, =_sbss
 80026e8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80026ec:	20002f54 	.word	0x20002f54

080026f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026f0:	e7fe      	b.n	80026f0 <ADC_IRQHandler>
	...

080026f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80026f8:	4b0e      	ldr	r3, [pc, #56]	; (8002734 <HAL_Init+0x40>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a0d      	ldr	r2, [pc, #52]	; (8002734 <HAL_Init+0x40>)
 80026fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002702:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002704:	4b0b      	ldr	r3, [pc, #44]	; (8002734 <HAL_Init+0x40>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a0a      	ldr	r2, [pc, #40]	; (8002734 <HAL_Init+0x40>)
 800270a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800270e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002710:	4b08      	ldr	r3, [pc, #32]	; (8002734 <HAL_Init+0x40>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a07      	ldr	r2, [pc, #28]	; (8002734 <HAL_Init+0x40>)
 8002716:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800271a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800271c:	2003      	movs	r0, #3
 800271e:	f000 f94f 	bl	80029c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002722:	2000      	movs	r0, #0
 8002724:	f000 f808 	bl	8002738 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002728:	f7ff f9d0 	bl	8001acc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	40023c00 	.word	0x40023c00

08002738 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002740:	4b12      	ldr	r3, [pc, #72]	; (800278c <HAL_InitTick+0x54>)
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	4b12      	ldr	r3, [pc, #72]	; (8002790 <HAL_InitTick+0x58>)
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	4619      	mov	r1, r3
 800274a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800274e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002752:	fbb2 f3f3 	udiv	r3, r2, r3
 8002756:	4618      	mov	r0, r3
 8002758:	f000 f967 	bl	8002a2a <HAL_SYSTICK_Config>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e00e      	b.n	8002784 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2b0f      	cmp	r3, #15
 800276a:	d80a      	bhi.n	8002782 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800276c:	2200      	movs	r2, #0
 800276e:	6879      	ldr	r1, [r7, #4]
 8002770:	f04f 30ff 	mov.w	r0, #4294967295
 8002774:	f000 f92f 	bl	80029d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002778:	4a06      	ldr	r2, [pc, #24]	; (8002794 <HAL_InitTick+0x5c>)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800277e:	2300      	movs	r3, #0
 8002780:	e000      	b.n	8002784 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
}
 8002784:	4618      	mov	r0, r3
 8002786:	3708      	adds	r7, #8
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	20000000 	.word	0x20000000
 8002790:	20000010 	.word	0x20000010
 8002794:	2000000c 	.word	0x2000000c

08002798 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800279c:	4b06      	ldr	r3, [pc, #24]	; (80027b8 <HAL_IncTick+0x20>)
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	461a      	mov	r2, r3
 80027a2:	4b06      	ldr	r3, [pc, #24]	; (80027bc <HAL_IncTick+0x24>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4413      	add	r3, r2
 80027a8:	4a04      	ldr	r2, [pc, #16]	; (80027bc <HAL_IncTick+0x24>)
 80027aa:	6013      	str	r3, [r2, #0]
}
 80027ac:	bf00      	nop
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	20000010 	.word	0x20000010
 80027bc:	20002f40 	.word	0x20002f40

080027c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
  return uwTick;
 80027c4:	4b03      	ldr	r3, [pc, #12]	; (80027d4 <HAL_GetTick+0x14>)
 80027c6:	681b      	ldr	r3, [r3, #0]
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	20002f40 	.word	0x20002f40

080027d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027e0:	f7ff ffee 	bl	80027c0 <HAL_GetTick>
 80027e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027f0:	d005      	beq.n	80027fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027f2:	4b0a      	ldr	r3, [pc, #40]	; (800281c <HAL_Delay+0x44>)
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	461a      	mov	r2, r3
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	4413      	add	r3, r2
 80027fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80027fe:	bf00      	nop
 8002800:	f7ff ffde 	bl	80027c0 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	68fa      	ldr	r2, [r7, #12]
 800280c:	429a      	cmp	r2, r3
 800280e:	d8f7      	bhi.n	8002800 <HAL_Delay+0x28>
  {
  }
}
 8002810:	bf00      	nop
 8002812:	bf00      	nop
 8002814:	3710      	adds	r7, #16
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	20000010 	.word	0x20000010

08002820 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002820:	b480      	push	{r7}
 8002822:	b085      	sub	sp, #20
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f003 0307 	and.w	r3, r3, #7
 800282e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002830:	4b0c      	ldr	r3, [pc, #48]	; (8002864 <__NVIC_SetPriorityGrouping+0x44>)
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002836:	68ba      	ldr	r2, [r7, #8]
 8002838:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800283c:	4013      	ands	r3, r2
 800283e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002848:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800284c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002850:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002852:	4a04      	ldr	r2, [pc, #16]	; (8002864 <__NVIC_SetPriorityGrouping+0x44>)
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	60d3      	str	r3, [r2, #12]
}
 8002858:	bf00      	nop
 800285a:	3714      	adds	r7, #20
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr
 8002864:	e000ed00 	.word	0xe000ed00

08002868 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800286c:	4b04      	ldr	r3, [pc, #16]	; (8002880 <__NVIC_GetPriorityGrouping+0x18>)
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	0a1b      	lsrs	r3, r3, #8
 8002872:	f003 0307 	and.w	r3, r3, #7
}
 8002876:	4618      	mov	r0, r3
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr
 8002880:	e000ed00 	.word	0xe000ed00

08002884 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	4603      	mov	r3, r0
 800288c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800288e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002892:	2b00      	cmp	r3, #0
 8002894:	db0b      	blt.n	80028ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002896:	79fb      	ldrb	r3, [r7, #7]
 8002898:	f003 021f 	and.w	r2, r3, #31
 800289c:	4907      	ldr	r1, [pc, #28]	; (80028bc <__NVIC_EnableIRQ+0x38>)
 800289e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a2:	095b      	lsrs	r3, r3, #5
 80028a4:	2001      	movs	r0, #1
 80028a6:	fa00 f202 	lsl.w	r2, r0, r2
 80028aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028ae:	bf00      	nop
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
 80028ba:	bf00      	nop
 80028bc:	e000e100 	.word	0xe000e100

080028c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	4603      	mov	r3, r0
 80028c8:	6039      	str	r1, [r7, #0]
 80028ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	db0a      	blt.n	80028ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	b2da      	uxtb	r2, r3
 80028d8:	490c      	ldr	r1, [pc, #48]	; (800290c <__NVIC_SetPriority+0x4c>)
 80028da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028de:	0112      	lsls	r2, r2, #4
 80028e0:	b2d2      	uxtb	r2, r2
 80028e2:	440b      	add	r3, r1
 80028e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028e8:	e00a      	b.n	8002900 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	b2da      	uxtb	r2, r3
 80028ee:	4908      	ldr	r1, [pc, #32]	; (8002910 <__NVIC_SetPriority+0x50>)
 80028f0:	79fb      	ldrb	r3, [r7, #7]
 80028f2:	f003 030f 	and.w	r3, r3, #15
 80028f6:	3b04      	subs	r3, #4
 80028f8:	0112      	lsls	r2, r2, #4
 80028fa:	b2d2      	uxtb	r2, r2
 80028fc:	440b      	add	r3, r1
 80028fe:	761a      	strb	r2, [r3, #24]
}
 8002900:	bf00      	nop
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr
 800290c:	e000e100 	.word	0xe000e100
 8002910:	e000ed00 	.word	0xe000ed00

08002914 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002914:	b480      	push	{r7}
 8002916:	b089      	sub	sp, #36	; 0x24
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f003 0307 	and.w	r3, r3, #7
 8002926:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	f1c3 0307 	rsb	r3, r3, #7
 800292e:	2b04      	cmp	r3, #4
 8002930:	bf28      	it	cs
 8002932:	2304      	movcs	r3, #4
 8002934:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	3304      	adds	r3, #4
 800293a:	2b06      	cmp	r3, #6
 800293c:	d902      	bls.n	8002944 <NVIC_EncodePriority+0x30>
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	3b03      	subs	r3, #3
 8002942:	e000      	b.n	8002946 <NVIC_EncodePriority+0x32>
 8002944:	2300      	movs	r3, #0
 8002946:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002948:	f04f 32ff 	mov.w	r2, #4294967295
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	fa02 f303 	lsl.w	r3, r2, r3
 8002952:	43da      	mvns	r2, r3
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	401a      	ands	r2, r3
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800295c:	f04f 31ff 	mov.w	r1, #4294967295
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	fa01 f303 	lsl.w	r3, r1, r3
 8002966:	43d9      	mvns	r1, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800296c:	4313      	orrs	r3, r2
         );
}
 800296e:	4618      	mov	r0, r3
 8002970:	3724      	adds	r7, #36	; 0x24
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
	...

0800297c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	3b01      	subs	r3, #1
 8002988:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800298c:	d301      	bcc.n	8002992 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800298e:	2301      	movs	r3, #1
 8002990:	e00f      	b.n	80029b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002992:	4a0a      	ldr	r2, [pc, #40]	; (80029bc <SysTick_Config+0x40>)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	3b01      	subs	r3, #1
 8002998:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800299a:	210f      	movs	r1, #15
 800299c:	f04f 30ff 	mov.w	r0, #4294967295
 80029a0:	f7ff ff8e 	bl	80028c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029a4:	4b05      	ldr	r3, [pc, #20]	; (80029bc <SysTick_Config+0x40>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029aa:	4b04      	ldr	r3, [pc, #16]	; (80029bc <SysTick_Config+0x40>)
 80029ac:	2207      	movs	r2, #7
 80029ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3708      	adds	r7, #8
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	e000e010 	.word	0xe000e010

080029c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f7ff ff29 	bl	8002820 <__NVIC_SetPriorityGrouping>
}
 80029ce:	bf00      	nop
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029d6:	b580      	push	{r7, lr}
 80029d8:	b086      	sub	sp, #24
 80029da:	af00      	add	r7, sp, #0
 80029dc:	4603      	mov	r3, r0
 80029de:	60b9      	str	r1, [r7, #8]
 80029e0:	607a      	str	r2, [r7, #4]
 80029e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029e4:	2300      	movs	r3, #0
 80029e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029e8:	f7ff ff3e 	bl	8002868 <__NVIC_GetPriorityGrouping>
 80029ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	68b9      	ldr	r1, [r7, #8]
 80029f2:	6978      	ldr	r0, [r7, #20]
 80029f4:	f7ff ff8e 	bl	8002914 <NVIC_EncodePriority>
 80029f8:	4602      	mov	r2, r0
 80029fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029fe:	4611      	mov	r1, r2
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7ff ff5d 	bl	80028c0 <__NVIC_SetPriority>
}
 8002a06:	bf00      	nop
 8002a08:	3718      	adds	r7, #24
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}

08002a0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b082      	sub	sp, #8
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	4603      	mov	r3, r0
 8002a16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7ff ff31 	bl	8002884 <__NVIC_EnableIRQ>
}
 8002a22:	bf00      	nop
 8002a24:	3708      	adds	r7, #8
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}

08002a2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a2a:	b580      	push	{r7, lr}
 8002a2c:	b082      	sub	sp, #8
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f7ff ffa2 	bl	800297c <SysTick_Config>
 8002a38:	4603      	mov	r3, r0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3708      	adds	r7, #8
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b084      	sub	sp, #16
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a4e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002a50:	f7ff feb6 	bl	80027c0 <HAL_GetTick>
 8002a54:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d008      	beq.n	8002a74 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2280      	movs	r2, #128	; 0x80
 8002a66:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e052      	b.n	8002b1a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f022 0216 	bic.w	r2, r2, #22
 8002a82:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	695a      	ldr	r2, [r3, #20]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a92:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d103      	bne.n	8002aa4 <HAL_DMA_Abort+0x62>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d007      	beq.n	8002ab4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f022 0208 	bic.w	r2, r2, #8
 8002ab2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f022 0201 	bic.w	r2, r2, #1
 8002ac2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ac4:	e013      	b.n	8002aee <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ac6:	f7ff fe7b 	bl	80027c0 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	2b05      	cmp	r3, #5
 8002ad2:	d90c      	bls.n	8002aee <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2220      	movs	r2, #32
 8002ad8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2203      	movs	r2, #3
 8002ade:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e015      	b.n	8002b1a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0301 	and.w	r3, r3, #1
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d1e4      	bne.n	8002ac6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b00:	223f      	movs	r2, #63	; 0x3f
 8002b02:	409a      	lsls	r2, r3
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3710      	adds	r7, #16
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b22:	b480      	push	{r7}
 8002b24:	b083      	sub	sp, #12
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d004      	beq.n	8002b40 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2280      	movs	r2, #128	; 0x80
 8002b3a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e00c      	b.n	8002b5a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2205      	movs	r2, #5
 8002b44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f022 0201 	bic.w	r2, r2, #1
 8002b56:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
	...

08002b68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b089      	sub	sp, #36	; 0x24
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b72:	2300      	movs	r3, #0
 8002b74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b76:	2300      	movs	r3, #0
 8002b78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b7e:	2300      	movs	r3, #0
 8002b80:	61fb      	str	r3, [r7, #28]
 8002b82:	e16b      	b.n	8002e5c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b84:	2201      	movs	r2, #1
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	697a      	ldr	r2, [r7, #20]
 8002b94:	4013      	ands	r3, r2
 8002b96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b98:	693a      	ldr	r2, [r7, #16]
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	f040 815a 	bne.w	8002e56 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f003 0303 	and.w	r3, r3, #3
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d005      	beq.n	8002bba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d130      	bne.n	8002c1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	005b      	lsls	r3, r3, #1
 8002bc4:	2203      	movs	r2, #3
 8002bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bca:	43db      	mvns	r3, r3
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	4013      	ands	r3, r2
 8002bd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	68da      	ldr	r2, [r3, #12]
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	005b      	lsls	r3, r3, #1
 8002bda:	fa02 f303 	lsl.w	r3, r2, r3
 8002bde:	69ba      	ldr	r2, [r7, #24]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	69ba      	ldr	r2, [r7, #24]
 8002be8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf8:	43db      	mvns	r3, r3
 8002bfa:	69ba      	ldr	r2, [r7, #24]
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	091b      	lsrs	r3, r3, #4
 8002c06:	f003 0201 	and.w	r2, r3, #1
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c10:	69ba      	ldr	r2, [r7, #24]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f003 0303 	and.w	r3, r3, #3
 8002c24:	2b03      	cmp	r3, #3
 8002c26:	d017      	beq.n	8002c58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	2203      	movs	r2, #3
 8002c34:	fa02 f303 	lsl.w	r3, r2, r3
 8002c38:	43db      	mvns	r3, r3
 8002c3a:	69ba      	ldr	r2, [r7, #24]
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	689a      	ldr	r2, [r3, #8]
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	005b      	lsls	r3, r3, #1
 8002c48:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4c:	69ba      	ldr	r2, [r7, #24]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f003 0303 	and.w	r3, r3, #3
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d123      	bne.n	8002cac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	08da      	lsrs	r2, r3, #3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	3208      	adds	r2, #8
 8002c6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	f003 0307 	and.w	r3, r3, #7
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	220f      	movs	r2, #15
 8002c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c80:	43db      	mvns	r3, r3
 8002c82:	69ba      	ldr	r2, [r7, #24]
 8002c84:	4013      	ands	r3, r2
 8002c86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	691a      	ldr	r2, [r3, #16]
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	f003 0307 	and.w	r3, r3, #7
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	fa02 f303 	lsl.w	r3, r2, r3
 8002c98:	69ba      	ldr	r2, [r7, #24]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	08da      	lsrs	r2, r3, #3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	3208      	adds	r2, #8
 8002ca6:	69b9      	ldr	r1, [r7, #24]
 8002ca8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	005b      	lsls	r3, r3, #1
 8002cb6:	2203      	movs	r2, #3
 8002cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbc:	43db      	mvns	r3, r3
 8002cbe:	69ba      	ldr	r2, [r7, #24]
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f003 0203 	and.w	r2, r3, #3
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	005b      	lsls	r3, r3, #1
 8002cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	69ba      	ldr	r2, [r7, #24]
 8002cde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	f000 80b4 	beq.w	8002e56 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cee:	2300      	movs	r3, #0
 8002cf0:	60fb      	str	r3, [r7, #12]
 8002cf2:	4b60      	ldr	r3, [pc, #384]	; (8002e74 <HAL_GPIO_Init+0x30c>)
 8002cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf6:	4a5f      	ldr	r2, [pc, #380]	; (8002e74 <HAL_GPIO_Init+0x30c>)
 8002cf8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cfc:	6453      	str	r3, [r2, #68]	; 0x44
 8002cfe:	4b5d      	ldr	r3, [pc, #372]	; (8002e74 <HAL_GPIO_Init+0x30c>)
 8002d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d06:	60fb      	str	r3, [r7, #12]
 8002d08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d0a:	4a5b      	ldr	r2, [pc, #364]	; (8002e78 <HAL_GPIO_Init+0x310>)
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	089b      	lsrs	r3, r3, #2
 8002d10:	3302      	adds	r3, #2
 8002d12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	f003 0303 	and.w	r3, r3, #3
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	220f      	movs	r2, #15
 8002d22:	fa02 f303 	lsl.w	r3, r2, r3
 8002d26:	43db      	mvns	r3, r3
 8002d28:	69ba      	ldr	r2, [r7, #24]
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a52      	ldr	r2, [pc, #328]	; (8002e7c <HAL_GPIO_Init+0x314>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d02b      	beq.n	8002d8e <HAL_GPIO_Init+0x226>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a51      	ldr	r2, [pc, #324]	; (8002e80 <HAL_GPIO_Init+0x318>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d025      	beq.n	8002d8a <HAL_GPIO_Init+0x222>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a50      	ldr	r2, [pc, #320]	; (8002e84 <HAL_GPIO_Init+0x31c>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d01f      	beq.n	8002d86 <HAL_GPIO_Init+0x21e>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a4f      	ldr	r2, [pc, #316]	; (8002e88 <HAL_GPIO_Init+0x320>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d019      	beq.n	8002d82 <HAL_GPIO_Init+0x21a>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a4e      	ldr	r2, [pc, #312]	; (8002e8c <HAL_GPIO_Init+0x324>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d013      	beq.n	8002d7e <HAL_GPIO_Init+0x216>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a4d      	ldr	r2, [pc, #308]	; (8002e90 <HAL_GPIO_Init+0x328>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d00d      	beq.n	8002d7a <HAL_GPIO_Init+0x212>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a4c      	ldr	r2, [pc, #304]	; (8002e94 <HAL_GPIO_Init+0x32c>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d007      	beq.n	8002d76 <HAL_GPIO_Init+0x20e>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a4b      	ldr	r2, [pc, #300]	; (8002e98 <HAL_GPIO_Init+0x330>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d101      	bne.n	8002d72 <HAL_GPIO_Init+0x20a>
 8002d6e:	2307      	movs	r3, #7
 8002d70:	e00e      	b.n	8002d90 <HAL_GPIO_Init+0x228>
 8002d72:	2308      	movs	r3, #8
 8002d74:	e00c      	b.n	8002d90 <HAL_GPIO_Init+0x228>
 8002d76:	2306      	movs	r3, #6
 8002d78:	e00a      	b.n	8002d90 <HAL_GPIO_Init+0x228>
 8002d7a:	2305      	movs	r3, #5
 8002d7c:	e008      	b.n	8002d90 <HAL_GPIO_Init+0x228>
 8002d7e:	2304      	movs	r3, #4
 8002d80:	e006      	b.n	8002d90 <HAL_GPIO_Init+0x228>
 8002d82:	2303      	movs	r3, #3
 8002d84:	e004      	b.n	8002d90 <HAL_GPIO_Init+0x228>
 8002d86:	2302      	movs	r3, #2
 8002d88:	e002      	b.n	8002d90 <HAL_GPIO_Init+0x228>
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e000      	b.n	8002d90 <HAL_GPIO_Init+0x228>
 8002d8e:	2300      	movs	r3, #0
 8002d90:	69fa      	ldr	r2, [r7, #28]
 8002d92:	f002 0203 	and.w	r2, r2, #3
 8002d96:	0092      	lsls	r2, r2, #2
 8002d98:	4093      	lsls	r3, r2
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002da0:	4935      	ldr	r1, [pc, #212]	; (8002e78 <HAL_GPIO_Init+0x310>)
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	089b      	lsrs	r3, r3, #2
 8002da6:	3302      	adds	r3, #2
 8002da8:	69ba      	ldr	r2, [r7, #24]
 8002daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dae:	4b3b      	ldr	r3, [pc, #236]	; (8002e9c <HAL_GPIO_Init+0x334>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	43db      	mvns	r3, r3
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	4013      	ands	r3, r2
 8002dbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d003      	beq.n	8002dd2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002dca:	69ba      	ldr	r2, [r7, #24]
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002dd2:	4a32      	ldr	r2, [pc, #200]	; (8002e9c <HAL_GPIO_Init+0x334>)
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002dd8:	4b30      	ldr	r3, [pc, #192]	; (8002e9c <HAL_GPIO_Init+0x334>)
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	43db      	mvns	r3, r3
 8002de2:	69ba      	ldr	r2, [r7, #24]
 8002de4:	4013      	ands	r3, r2
 8002de6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d003      	beq.n	8002dfc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002dfc:	4a27      	ldr	r2, [pc, #156]	; (8002e9c <HAL_GPIO_Init+0x334>)
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e02:	4b26      	ldr	r3, [pc, #152]	; (8002e9c <HAL_GPIO_Init+0x334>)
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	43db      	mvns	r3, r3
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	4013      	ands	r3, r2
 8002e10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d003      	beq.n	8002e26 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e26:	4a1d      	ldr	r2, [pc, #116]	; (8002e9c <HAL_GPIO_Init+0x334>)
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e2c:	4b1b      	ldr	r3, [pc, #108]	; (8002e9c <HAL_GPIO_Init+0x334>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	43db      	mvns	r3, r3
 8002e36:	69ba      	ldr	r2, [r7, #24]
 8002e38:	4013      	ands	r3, r2
 8002e3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d003      	beq.n	8002e50 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e50:	4a12      	ldr	r2, [pc, #72]	; (8002e9c <HAL_GPIO_Init+0x334>)
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	3301      	adds	r3, #1
 8002e5a:	61fb      	str	r3, [r7, #28]
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	2b0f      	cmp	r3, #15
 8002e60:	f67f ae90 	bls.w	8002b84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e64:	bf00      	nop
 8002e66:	bf00      	nop
 8002e68:	3724      	adds	r7, #36	; 0x24
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	40023800 	.word	0x40023800
 8002e78:	40013800 	.word	0x40013800
 8002e7c:	40020000 	.word	0x40020000
 8002e80:	40020400 	.word	0x40020400
 8002e84:	40020800 	.word	0x40020800
 8002e88:	40020c00 	.word	0x40020c00
 8002e8c:	40021000 	.word	0x40021000
 8002e90:	40021400 	.word	0x40021400
 8002e94:	40021800 	.word	0x40021800
 8002e98:	40021c00 	.word	0x40021c00
 8002e9c:	40013c00 	.word	0x40013c00

08002ea0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	460b      	mov	r3, r1
 8002eaa:	807b      	strh	r3, [r7, #2]
 8002eac:	4613      	mov	r3, r2
 8002eae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002eb0:	787b      	ldrb	r3, [r7, #1]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d003      	beq.n	8002ebe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002eb6:	887a      	ldrh	r2, [r7, #2]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ebc:	e003      	b.n	8002ec6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ebe:	887b      	ldrh	r3, [r7, #2]
 8002ec0:	041a      	lsls	r2, r3, #16
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	619a      	str	r2, [r3, #24]
}
 8002ec6:	bf00      	nop
 8002ec8:	370c      	adds	r7, #12
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
	...

08002ed4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	4603      	mov	r3, r0
 8002edc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002ede:	4b08      	ldr	r3, [pc, #32]	; (8002f00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ee0:	695a      	ldr	r2, [r3, #20]
 8002ee2:	88fb      	ldrh	r3, [r7, #6]
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d006      	beq.n	8002ef8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002eea:	4a05      	ldr	r2, [pc, #20]	; (8002f00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002eec:	88fb      	ldrh	r3, [r7, #6]
 8002eee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ef0:	88fb      	ldrh	r3, [r7, #6]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f7fe f8e8 	bl	80010c8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ef8:	bf00      	nop
 8002efa:	3708      	adds	r7, #8
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	40013c00 	.word	0x40013c00

08002f04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d101      	bne.n	8002f16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e12b      	b.n	800316e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d106      	bne.n	8002f30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f7fe fdf6 	bl	8001b1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2224      	movs	r2, #36	; 0x24
 8002f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f022 0201 	bic.w	r2, r2, #1
 8002f46:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f56:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f66:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f68:	f001 fd7a 	bl	8004a60 <HAL_RCC_GetPCLK1Freq>
 8002f6c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	4a81      	ldr	r2, [pc, #516]	; (8003178 <HAL_I2C_Init+0x274>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d807      	bhi.n	8002f88 <HAL_I2C_Init+0x84>
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	4a80      	ldr	r2, [pc, #512]	; (800317c <HAL_I2C_Init+0x278>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	bf94      	ite	ls
 8002f80:	2301      	movls	r3, #1
 8002f82:	2300      	movhi	r3, #0
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	e006      	b.n	8002f96 <HAL_I2C_Init+0x92>
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	4a7d      	ldr	r2, [pc, #500]	; (8003180 <HAL_I2C_Init+0x27c>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	bf94      	ite	ls
 8002f90:	2301      	movls	r3, #1
 8002f92:	2300      	movhi	r3, #0
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d001      	beq.n	8002f9e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e0e7      	b.n	800316e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	4a78      	ldr	r2, [pc, #480]	; (8003184 <HAL_I2C_Init+0x280>)
 8002fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa6:	0c9b      	lsrs	r3, r3, #18
 8002fa8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	68ba      	ldr	r2, [r7, #8]
 8002fba:	430a      	orrs	r2, r1
 8002fbc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	6a1b      	ldr	r3, [r3, #32]
 8002fc4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	4a6a      	ldr	r2, [pc, #424]	; (8003178 <HAL_I2C_Init+0x274>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d802      	bhi.n	8002fd8 <HAL_I2C_Init+0xd4>
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	e009      	b.n	8002fec <HAL_I2C_Init+0xe8>
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002fde:	fb02 f303 	mul.w	r3, r2, r3
 8002fe2:	4a69      	ldr	r2, [pc, #420]	; (8003188 <HAL_I2C_Init+0x284>)
 8002fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe8:	099b      	lsrs	r3, r3, #6
 8002fea:	3301      	adds	r3, #1
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	6812      	ldr	r2, [r2, #0]
 8002ff0:	430b      	orrs	r3, r1
 8002ff2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	69db      	ldr	r3, [r3, #28]
 8002ffa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002ffe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	495c      	ldr	r1, [pc, #368]	; (8003178 <HAL_I2C_Init+0x274>)
 8003008:	428b      	cmp	r3, r1
 800300a:	d819      	bhi.n	8003040 <HAL_I2C_Init+0x13c>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	1e59      	subs	r1, r3, #1
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	005b      	lsls	r3, r3, #1
 8003016:	fbb1 f3f3 	udiv	r3, r1, r3
 800301a:	1c59      	adds	r1, r3, #1
 800301c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003020:	400b      	ands	r3, r1
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00a      	beq.n	800303c <HAL_I2C_Init+0x138>
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	1e59      	subs	r1, r3, #1
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	005b      	lsls	r3, r3, #1
 8003030:	fbb1 f3f3 	udiv	r3, r1, r3
 8003034:	3301      	adds	r3, #1
 8003036:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800303a:	e051      	b.n	80030e0 <HAL_I2C_Init+0x1dc>
 800303c:	2304      	movs	r3, #4
 800303e:	e04f      	b.n	80030e0 <HAL_I2C_Init+0x1dc>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d111      	bne.n	800306c <HAL_I2C_Init+0x168>
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	1e58      	subs	r0, r3, #1
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6859      	ldr	r1, [r3, #4]
 8003050:	460b      	mov	r3, r1
 8003052:	005b      	lsls	r3, r3, #1
 8003054:	440b      	add	r3, r1
 8003056:	fbb0 f3f3 	udiv	r3, r0, r3
 800305a:	3301      	adds	r3, #1
 800305c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003060:	2b00      	cmp	r3, #0
 8003062:	bf0c      	ite	eq
 8003064:	2301      	moveq	r3, #1
 8003066:	2300      	movne	r3, #0
 8003068:	b2db      	uxtb	r3, r3
 800306a:	e012      	b.n	8003092 <HAL_I2C_Init+0x18e>
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	1e58      	subs	r0, r3, #1
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6859      	ldr	r1, [r3, #4]
 8003074:	460b      	mov	r3, r1
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	440b      	add	r3, r1
 800307a:	0099      	lsls	r1, r3, #2
 800307c:	440b      	add	r3, r1
 800307e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003082:	3301      	adds	r3, #1
 8003084:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003088:	2b00      	cmp	r3, #0
 800308a:	bf0c      	ite	eq
 800308c:	2301      	moveq	r3, #1
 800308e:	2300      	movne	r3, #0
 8003090:	b2db      	uxtb	r3, r3
 8003092:	2b00      	cmp	r3, #0
 8003094:	d001      	beq.n	800309a <HAL_I2C_Init+0x196>
 8003096:	2301      	movs	r3, #1
 8003098:	e022      	b.n	80030e0 <HAL_I2C_Init+0x1dc>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d10e      	bne.n	80030c0 <HAL_I2C_Init+0x1bc>
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	1e58      	subs	r0, r3, #1
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6859      	ldr	r1, [r3, #4]
 80030aa:	460b      	mov	r3, r1
 80030ac:	005b      	lsls	r3, r3, #1
 80030ae:	440b      	add	r3, r1
 80030b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80030b4:	3301      	adds	r3, #1
 80030b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030be:	e00f      	b.n	80030e0 <HAL_I2C_Init+0x1dc>
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	1e58      	subs	r0, r3, #1
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6859      	ldr	r1, [r3, #4]
 80030c8:	460b      	mov	r3, r1
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	440b      	add	r3, r1
 80030ce:	0099      	lsls	r1, r3, #2
 80030d0:	440b      	add	r3, r1
 80030d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80030d6:	3301      	adds	r3, #1
 80030d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030e0:	6879      	ldr	r1, [r7, #4]
 80030e2:	6809      	ldr	r1, [r1, #0]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	69da      	ldr	r2, [r3, #28]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a1b      	ldr	r3, [r3, #32]
 80030fa:	431a      	orrs	r2, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	430a      	orrs	r2, r1
 8003102:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800310e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	6911      	ldr	r1, [r2, #16]
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	68d2      	ldr	r2, [r2, #12]
 800311a:	4311      	orrs	r1, r2
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	6812      	ldr	r2, [r2, #0]
 8003120:	430b      	orrs	r3, r1
 8003122:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	695a      	ldr	r2, [r3, #20]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	699b      	ldr	r3, [r3, #24]
 8003136:	431a      	orrs	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	430a      	orrs	r2, r1
 800313e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f042 0201 	orr.w	r2, r2, #1
 800314e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2220      	movs	r2, #32
 800315a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3710      	adds	r7, #16
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	000186a0 	.word	0x000186a0
 800317c:	001e847f 	.word	0x001e847f
 8003180:	003d08ff 	.word	0x003d08ff
 8003184:	431bde83 	.word	0x431bde83
 8003188:	10624dd3 	.word	0x10624dd3

0800318c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b088      	sub	sp, #32
 8003190:	af02      	add	r7, sp, #8
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	607a      	str	r2, [r7, #4]
 8003196:	461a      	mov	r2, r3
 8003198:	460b      	mov	r3, r1
 800319a:	817b      	strh	r3, [r7, #10]
 800319c:	4613      	mov	r3, r2
 800319e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80031a0:	f7ff fb0e 	bl	80027c0 <HAL_GetTick>
 80031a4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b20      	cmp	r3, #32
 80031b0:	f040 80e0 	bne.w	8003374 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	9300      	str	r3, [sp, #0]
 80031b8:	2319      	movs	r3, #25
 80031ba:	2201      	movs	r2, #1
 80031bc:	4970      	ldr	r1, [pc, #448]	; (8003380 <HAL_I2C_Master_Transmit+0x1f4>)
 80031be:	68f8      	ldr	r0, [r7, #12]
 80031c0:	f000 fe02 	bl	8003dc8 <I2C_WaitOnFlagUntilTimeout>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d001      	beq.n	80031ce <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80031ca:	2302      	movs	r3, #2
 80031cc:	e0d3      	b.n	8003376 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d101      	bne.n	80031dc <HAL_I2C_Master_Transmit+0x50>
 80031d8:	2302      	movs	r3, #2
 80031da:	e0cc      	b.n	8003376 <HAL_I2C_Master_Transmit+0x1ea>
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d007      	beq.n	8003202 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f042 0201 	orr.w	r2, r2, #1
 8003200:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003210:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2221      	movs	r2, #33	; 0x21
 8003216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2210      	movs	r2, #16
 800321e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2200      	movs	r2, #0
 8003226:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	893a      	ldrh	r2, [r7, #8]
 8003232:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003238:	b29a      	uxth	r2, r3
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	4a50      	ldr	r2, [pc, #320]	; (8003384 <HAL_I2C_Master_Transmit+0x1f8>)
 8003242:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003244:	8979      	ldrh	r1, [r7, #10]
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	6a3a      	ldr	r2, [r7, #32]
 800324a:	68f8      	ldr	r0, [r7, #12]
 800324c:	f000 fbbc 	bl	80039c8 <I2C_MasterRequestWrite>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d001      	beq.n	800325a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e08d      	b.n	8003376 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800325a:	2300      	movs	r3, #0
 800325c:	613b      	str	r3, [r7, #16]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	695b      	ldr	r3, [r3, #20]
 8003264:	613b      	str	r3, [r7, #16]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	699b      	ldr	r3, [r3, #24]
 800326c:	613b      	str	r3, [r7, #16]
 800326e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003270:	e066      	b.n	8003340 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003272:	697a      	ldr	r2, [r7, #20]
 8003274:	6a39      	ldr	r1, [r7, #32]
 8003276:	68f8      	ldr	r0, [r7, #12]
 8003278:	f000 fe7c 	bl	8003f74 <I2C_WaitOnTXEFlagUntilTimeout>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00d      	beq.n	800329e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003286:	2b04      	cmp	r3, #4
 8003288:	d107      	bne.n	800329a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003298:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e06b      	b.n	8003376 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a2:	781a      	ldrb	r2, [r3, #0]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ae:	1c5a      	adds	r2, r3, #1
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	3b01      	subs	r3, #1
 80032bc:	b29a      	uxth	r2, r3
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032c6:	3b01      	subs	r3, #1
 80032c8:	b29a      	uxth	r2, r3
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	695b      	ldr	r3, [r3, #20]
 80032d4:	f003 0304 	and.w	r3, r3, #4
 80032d8:	2b04      	cmp	r3, #4
 80032da:	d11b      	bne.n	8003314 <HAL_I2C_Master_Transmit+0x188>
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d017      	beq.n	8003314 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e8:	781a      	ldrb	r2, [r3, #0]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f4:	1c5a      	adds	r2, r3, #1
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032fe:	b29b      	uxth	r3, r3
 8003300:	3b01      	subs	r3, #1
 8003302:	b29a      	uxth	r2, r3
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800330c:	3b01      	subs	r3, #1
 800330e:	b29a      	uxth	r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003314:	697a      	ldr	r2, [r7, #20]
 8003316:	6a39      	ldr	r1, [r7, #32]
 8003318:	68f8      	ldr	r0, [r7, #12]
 800331a:	f000 fe6c 	bl	8003ff6 <I2C_WaitOnBTFFlagUntilTimeout>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d00d      	beq.n	8003340 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003328:	2b04      	cmp	r3, #4
 800332a:	d107      	bne.n	800333c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800333a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e01a      	b.n	8003376 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003344:	2b00      	cmp	r3, #0
 8003346:	d194      	bne.n	8003272 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003356:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2220      	movs	r2, #32
 800335c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003370:	2300      	movs	r3, #0
 8003372:	e000      	b.n	8003376 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003374:	2302      	movs	r3, #2
  }
}
 8003376:	4618      	mov	r0, r3
 8003378:	3718      	adds	r7, #24
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	00100002 	.word	0x00100002
 8003384:	ffff0000 	.word	0xffff0000

08003388 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b088      	sub	sp, #32
 800338c:	af02      	add	r7, sp, #8
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	4608      	mov	r0, r1
 8003392:	4611      	mov	r1, r2
 8003394:	461a      	mov	r2, r3
 8003396:	4603      	mov	r3, r0
 8003398:	817b      	strh	r3, [r7, #10]
 800339a:	460b      	mov	r3, r1
 800339c:	813b      	strh	r3, [r7, #8]
 800339e:	4613      	mov	r3, r2
 80033a0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80033a2:	f7ff fa0d 	bl	80027c0 <HAL_GetTick>
 80033a6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	2b20      	cmp	r3, #32
 80033b2:	f040 80d9 	bne.w	8003568 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	9300      	str	r3, [sp, #0]
 80033ba:	2319      	movs	r3, #25
 80033bc:	2201      	movs	r2, #1
 80033be:	496d      	ldr	r1, [pc, #436]	; (8003574 <HAL_I2C_Mem_Write+0x1ec>)
 80033c0:	68f8      	ldr	r0, [r7, #12]
 80033c2:	f000 fd01 	bl	8003dc8 <I2C_WaitOnFlagUntilTimeout>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d001      	beq.n	80033d0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80033cc:	2302      	movs	r3, #2
 80033ce:	e0cc      	b.n	800356a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d101      	bne.n	80033de <HAL_I2C_Mem_Write+0x56>
 80033da:	2302      	movs	r3, #2
 80033dc:	e0c5      	b.n	800356a <HAL_I2C_Mem_Write+0x1e2>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2201      	movs	r2, #1
 80033e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0301 	and.w	r3, r3, #1
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d007      	beq.n	8003404 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f042 0201 	orr.w	r2, r2, #1
 8003402:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003412:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2221      	movs	r2, #33	; 0x21
 8003418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2240      	movs	r2, #64	; 0x40
 8003420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2200      	movs	r2, #0
 8003428:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6a3a      	ldr	r2, [r7, #32]
 800342e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003434:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800343a:	b29a      	uxth	r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	4a4d      	ldr	r2, [pc, #308]	; (8003578 <HAL_I2C_Mem_Write+0x1f0>)
 8003444:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003446:	88f8      	ldrh	r0, [r7, #6]
 8003448:	893a      	ldrh	r2, [r7, #8]
 800344a:	8979      	ldrh	r1, [r7, #10]
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	9301      	str	r3, [sp, #4]
 8003450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003452:	9300      	str	r3, [sp, #0]
 8003454:	4603      	mov	r3, r0
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	f000 fb38 	bl	8003acc <I2C_RequestMemoryWrite>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d052      	beq.n	8003508 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e081      	b.n	800356a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003466:	697a      	ldr	r2, [r7, #20]
 8003468:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800346a:	68f8      	ldr	r0, [r7, #12]
 800346c:	f000 fd82 	bl	8003f74 <I2C_WaitOnTXEFlagUntilTimeout>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00d      	beq.n	8003492 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347a:	2b04      	cmp	r3, #4
 800347c:	d107      	bne.n	800348e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800348c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e06b      	b.n	800356a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003496:	781a      	ldrb	r2, [r3, #0]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a2:	1c5a      	adds	r2, r3, #1
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ac:	3b01      	subs	r3, #1
 80034ae:	b29a      	uxth	r2, r3
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	3b01      	subs	r3, #1
 80034bc:	b29a      	uxth	r2, r3
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	695b      	ldr	r3, [r3, #20]
 80034c8:	f003 0304 	and.w	r3, r3, #4
 80034cc:	2b04      	cmp	r3, #4
 80034ce:	d11b      	bne.n	8003508 <HAL_I2C_Mem_Write+0x180>
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d017      	beq.n	8003508 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034dc:	781a      	ldrb	r2, [r3, #0]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e8:	1c5a      	adds	r2, r3, #1
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034f2:	3b01      	subs	r3, #1
 80034f4:	b29a      	uxth	r2, r3
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034fe:	b29b      	uxth	r3, r3
 8003500:	3b01      	subs	r3, #1
 8003502:	b29a      	uxth	r2, r3
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800350c:	2b00      	cmp	r3, #0
 800350e:	d1aa      	bne.n	8003466 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003510:	697a      	ldr	r2, [r7, #20]
 8003512:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003514:	68f8      	ldr	r0, [r7, #12]
 8003516:	f000 fd6e 	bl	8003ff6 <I2C_WaitOnBTFFlagUntilTimeout>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d00d      	beq.n	800353c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003524:	2b04      	cmp	r3, #4
 8003526:	d107      	bne.n	8003538 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003536:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e016      	b.n	800356a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800354a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2220      	movs	r2, #32
 8003550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003564:	2300      	movs	r3, #0
 8003566:	e000      	b.n	800356a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003568:	2302      	movs	r3, #2
  }
}
 800356a:	4618      	mov	r0, r3
 800356c:	3718      	adds	r7, #24
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	00100002 	.word	0x00100002
 8003578:	ffff0000 	.word	0xffff0000

0800357c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b08c      	sub	sp, #48	; 0x30
 8003580:	af02      	add	r7, sp, #8
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	4608      	mov	r0, r1
 8003586:	4611      	mov	r1, r2
 8003588:	461a      	mov	r2, r3
 800358a:	4603      	mov	r3, r0
 800358c:	817b      	strh	r3, [r7, #10]
 800358e:	460b      	mov	r3, r1
 8003590:	813b      	strh	r3, [r7, #8]
 8003592:	4613      	mov	r3, r2
 8003594:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003596:	f7ff f913 	bl	80027c0 <HAL_GetTick>
 800359a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	2b20      	cmp	r3, #32
 80035a6:	f040 8208 	bne.w	80039ba <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ac:	9300      	str	r3, [sp, #0]
 80035ae:	2319      	movs	r3, #25
 80035b0:	2201      	movs	r2, #1
 80035b2:	497b      	ldr	r1, [pc, #492]	; (80037a0 <HAL_I2C_Mem_Read+0x224>)
 80035b4:	68f8      	ldr	r0, [r7, #12]
 80035b6:	f000 fc07 	bl	8003dc8 <I2C_WaitOnFlagUntilTimeout>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d001      	beq.n	80035c4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80035c0:	2302      	movs	r3, #2
 80035c2:	e1fb      	b.n	80039bc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d101      	bne.n	80035d2 <HAL_I2C_Mem_Read+0x56>
 80035ce:	2302      	movs	r3, #2
 80035d0:	e1f4      	b.n	80039bc <HAL_I2C_Mem_Read+0x440>
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2201      	movs	r2, #1
 80035d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0301 	and.w	r3, r3, #1
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d007      	beq.n	80035f8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f042 0201 	orr.w	r2, r2, #1
 80035f6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003606:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2222      	movs	r2, #34	; 0x22
 800360c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2240      	movs	r2, #64	; 0x40
 8003614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2200      	movs	r2, #0
 800361c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003622:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003628:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800362e:	b29a      	uxth	r2, r3
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	4a5b      	ldr	r2, [pc, #364]	; (80037a4 <HAL_I2C_Mem_Read+0x228>)
 8003638:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800363a:	88f8      	ldrh	r0, [r7, #6]
 800363c:	893a      	ldrh	r2, [r7, #8]
 800363e:	8979      	ldrh	r1, [r7, #10]
 8003640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003642:	9301      	str	r3, [sp, #4]
 8003644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003646:	9300      	str	r3, [sp, #0]
 8003648:	4603      	mov	r3, r0
 800364a:	68f8      	ldr	r0, [r7, #12]
 800364c:	f000 fad4 	bl	8003bf8 <I2C_RequestMemoryRead>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d001      	beq.n	800365a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e1b0      	b.n	80039bc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800365e:	2b00      	cmp	r3, #0
 8003660:	d113      	bne.n	800368a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003662:	2300      	movs	r3, #0
 8003664:	623b      	str	r3, [r7, #32]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	695b      	ldr	r3, [r3, #20]
 800366c:	623b      	str	r3, [r7, #32]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	699b      	ldr	r3, [r3, #24]
 8003674:	623b      	str	r3, [r7, #32]
 8003676:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003686:	601a      	str	r2, [r3, #0]
 8003688:	e184      	b.n	8003994 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800368e:	2b01      	cmp	r3, #1
 8003690:	d11b      	bne.n	80036ca <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036a2:	2300      	movs	r3, #0
 80036a4:	61fb      	str	r3, [r7, #28]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	695b      	ldr	r3, [r3, #20]
 80036ac:	61fb      	str	r3, [r7, #28]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	699b      	ldr	r3, [r3, #24]
 80036b4:	61fb      	str	r3, [r7, #28]
 80036b6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036c6:	601a      	str	r2, [r3, #0]
 80036c8:	e164      	b.n	8003994 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d11b      	bne.n	800370a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036e0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036f2:	2300      	movs	r3, #0
 80036f4:	61bb      	str	r3, [r7, #24]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	695b      	ldr	r3, [r3, #20]
 80036fc:	61bb      	str	r3, [r7, #24]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	699b      	ldr	r3, [r3, #24]
 8003704:	61bb      	str	r3, [r7, #24]
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	e144      	b.n	8003994 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800370a:	2300      	movs	r3, #0
 800370c:	617b      	str	r3, [r7, #20]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	695b      	ldr	r3, [r3, #20]
 8003714:	617b      	str	r3, [r7, #20]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	617b      	str	r3, [r7, #20]
 800371e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003720:	e138      	b.n	8003994 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003726:	2b03      	cmp	r3, #3
 8003728:	f200 80f1 	bhi.w	800390e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003730:	2b01      	cmp	r3, #1
 8003732:	d123      	bne.n	800377c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003734:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003736:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003738:	68f8      	ldr	r0, [r7, #12]
 800373a:	f000 fc9d 	bl	8004078 <I2C_WaitOnRXNEFlagUntilTimeout>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d001      	beq.n	8003748 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e139      	b.n	80039bc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	691a      	ldr	r2, [r3, #16]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003752:	b2d2      	uxtb	r2, r2
 8003754:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375a:	1c5a      	adds	r2, r3, #1
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003764:	3b01      	subs	r3, #1
 8003766:	b29a      	uxth	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003770:	b29b      	uxth	r3, r3
 8003772:	3b01      	subs	r3, #1
 8003774:	b29a      	uxth	r2, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	855a      	strh	r2, [r3, #42]	; 0x2a
 800377a:	e10b      	b.n	8003994 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003780:	2b02      	cmp	r3, #2
 8003782:	d14e      	bne.n	8003822 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003786:	9300      	str	r3, [sp, #0]
 8003788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800378a:	2200      	movs	r2, #0
 800378c:	4906      	ldr	r1, [pc, #24]	; (80037a8 <HAL_I2C_Mem_Read+0x22c>)
 800378e:	68f8      	ldr	r0, [r7, #12]
 8003790:	f000 fb1a 	bl	8003dc8 <I2C_WaitOnFlagUntilTimeout>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d008      	beq.n	80037ac <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e10e      	b.n	80039bc <HAL_I2C_Mem_Read+0x440>
 800379e:	bf00      	nop
 80037a0:	00100002 	.word	0x00100002
 80037a4:	ffff0000 	.word	0xffff0000
 80037a8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	691a      	ldr	r2, [r3, #16]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c6:	b2d2      	uxtb	r2, r2
 80037c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ce:	1c5a      	adds	r2, r3, #1
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037d8:	3b01      	subs	r3, #1
 80037da:	b29a      	uxth	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	3b01      	subs	r3, #1
 80037e8:	b29a      	uxth	r2, r3
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	691a      	ldr	r2, [r3, #16]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f8:	b2d2      	uxtb	r2, r2
 80037fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003800:	1c5a      	adds	r2, r3, #1
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800380a:	3b01      	subs	r3, #1
 800380c:	b29a      	uxth	r2, r3
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003816:	b29b      	uxth	r3, r3
 8003818:	3b01      	subs	r3, #1
 800381a:	b29a      	uxth	r2, r3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003820:	e0b8      	b.n	8003994 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003824:	9300      	str	r3, [sp, #0]
 8003826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003828:	2200      	movs	r2, #0
 800382a:	4966      	ldr	r1, [pc, #408]	; (80039c4 <HAL_I2C_Mem_Read+0x448>)
 800382c:	68f8      	ldr	r0, [r7, #12]
 800382e:	f000 facb 	bl	8003dc8 <I2C_WaitOnFlagUntilTimeout>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d001      	beq.n	800383c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e0bf      	b.n	80039bc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800384a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	691a      	ldr	r2, [r3, #16]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003856:	b2d2      	uxtb	r2, r2
 8003858:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385e:	1c5a      	adds	r2, r3, #1
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003868:	3b01      	subs	r3, #1
 800386a:	b29a      	uxth	r2, r3
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003874:	b29b      	uxth	r3, r3
 8003876:	3b01      	subs	r3, #1
 8003878:	b29a      	uxth	r2, r3
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800387e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003880:	9300      	str	r3, [sp, #0]
 8003882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003884:	2200      	movs	r2, #0
 8003886:	494f      	ldr	r1, [pc, #316]	; (80039c4 <HAL_I2C_Mem_Read+0x448>)
 8003888:	68f8      	ldr	r0, [r7, #12]
 800388a:	f000 fa9d 	bl	8003dc8 <I2C_WaitOnFlagUntilTimeout>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d001      	beq.n	8003898 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e091      	b.n	80039bc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	691a      	ldr	r2, [r3, #16]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b2:	b2d2      	uxtb	r2, r2
 80038b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ba:	1c5a      	adds	r2, r3, #1
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038c4:	3b01      	subs	r3, #1
 80038c6:	b29a      	uxth	r2, r3
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	3b01      	subs	r3, #1
 80038d4:	b29a      	uxth	r2, r3
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	691a      	ldr	r2, [r3, #16]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e4:	b2d2      	uxtb	r2, r2
 80038e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ec:	1c5a      	adds	r2, r3, #1
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038f6:	3b01      	subs	r3, #1
 80038f8:	b29a      	uxth	r2, r3
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003902:	b29b      	uxth	r3, r3
 8003904:	3b01      	subs	r3, #1
 8003906:	b29a      	uxth	r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800390c:	e042      	b.n	8003994 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800390e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003910:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003912:	68f8      	ldr	r0, [r7, #12]
 8003914:	f000 fbb0 	bl	8004078 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d001      	beq.n	8003922 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e04c      	b.n	80039bc <HAL_I2C_Mem_Read+0x440>
        }

        /*  data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	691a      	ldr	r2, [r3, #16]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392c:	b2d2      	uxtb	r2, r2
 800392e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003934:	1c5a      	adds	r2, r3, #1
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800393e:	3b01      	subs	r3, #1
 8003940:	b29a      	uxth	r2, r3
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800394a:	b29b      	uxth	r3, r3
 800394c:	3b01      	subs	r3, #1
 800394e:	b29a      	uxth	r2, r3
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	695b      	ldr	r3, [r3, #20]
 800395a:	f003 0304 	and.w	r3, r3, #4
 800395e:	2b04      	cmp	r3, #4
 8003960:	d118      	bne.n	8003994 <HAL_I2C_Mem_Read+0x418>
        {
          /*  data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	691a      	ldr	r2, [r3, #16]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396c:	b2d2      	uxtb	r2, r2
 800396e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003974:	1c5a      	adds	r2, r3, #1
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800397e:	3b01      	subs	r3, #1
 8003980:	b29a      	uxth	r2, r3
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800398a:	b29b      	uxth	r3, r3
 800398c:	3b01      	subs	r3, #1
 800398e:	b29a      	uxth	r2, r3
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003998:	2b00      	cmp	r3, #0
 800399a:	f47f aec2 	bne.w	8003722 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2220      	movs	r2, #32
 80039a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80039b6:	2300      	movs	r3, #0
 80039b8:	e000      	b.n	80039bc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80039ba:	2302      	movs	r3, #2
  }
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3728      	adds	r7, #40	; 0x28
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	00010004 	.word	0x00010004

080039c8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b088      	sub	sp, #32
 80039cc:	af02      	add	r7, sp, #8
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	607a      	str	r2, [r7, #4]
 80039d2:	603b      	str	r3, [r7, #0]
 80039d4:	460b      	mov	r3, r1
 80039d6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039dc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	2b08      	cmp	r3, #8
 80039e2:	d006      	beq.n	80039f2 <I2C_MasterRequestWrite+0x2a>
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d003      	beq.n	80039f2 <I2C_MasterRequestWrite+0x2a>
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80039f0:	d108      	bne.n	8003a04 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a00:	601a      	str	r2, [r3, #0]
 8003a02:	e00b      	b.n	8003a1c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a08:	2b12      	cmp	r3, #18
 8003a0a:	d107      	bne.n	8003a1c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a1a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	9300      	str	r3, [sp, #0]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a28:	68f8      	ldr	r0, [r7, #12]
 8003a2a:	f000 f9cd 	bl	8003dc8 <I2C_WaitOnFlagUntilTimeout>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d00d      	beq.n	8003a50 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a42:	d103      	bne.n	8003a4c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a4a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	e035      	b.n	8003abc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	691b      	ldr	r3, [r3, #16]
 8003a54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a58:	d108      	bne.n	8003a6c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a5a:	897b      	ldrh	r3, [r7, #10]
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	461a      	mov	r2, r3
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a68:	611a      	str	r2, [r3, #16]
 8003a6a:	e01b      	b.n	8003aa4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003a6c:	897b      	ldrh	r3, [r7, #10]
 8003a6e:	11db      	asrs	r3, r3, #7
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	f003 0306 	and.w	r3, r3, #6
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	f063 030f 	orn	r3, r3, #15
 8003a7c:	b2da      	uxtb	r2, r3
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	490e      	ldr	r1, [pc, #56]	; (8003ac4 <I2C_MasterRequestWrite+0xfc>)
 8003a8a:	68f8      	ldr	r0, [r7, #12]
 8003a8c:	f000 f9f3 	bl	8003e76 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d001      	beq.n	8003a9a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e010      	b.n	8003abc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003a9a:	897b      	ldrh	r3, [r7, #10]
 8003a9c:	b2da      	uxtb	r2, r3
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	4907      	ldr	r1, [pc, #28]	; (8003ac8 <I2C_MasterRequestWrite+0x100>)
 8003aaa:	68f8      	ldr	r0, [r7, #12]
 8003aac:	f000 f9e3 	bl	8003e76 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d001      	beq.n	8003aba <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e000      	b.n	8003abc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003aba:	2300      	movs	r3, #0
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3718      	adds	r7, #24
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	00010008 	.word	0x00010008
 8003ac8:	00010002 	.word	0x00010002

08003acc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b088      	sub	sp, #32
 8003ad0:	af02      	add	r7, sp, #8
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	4608      	mov	r0, r1
 8003ad6:	4611      	mov	r1, r2
 8003ad8:	461a      	mov	r2, r3
 8003ada:	4603      	mov	r3, r0
 8003adc:	817b      	strh	r3, [r7, #10]
 8003ade:	460b      	mov	r3, r1
 8003ae0:	813b      	strh	r3, [r7, #8]
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003af4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af8:	9300      	str	r3, [sp, #0]
 8003afa:	6a3b      	ldr	r3, [r7, #32]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b02:	68f8      	ldr	r0, [r7, #12]
 8003b04:	f000 f960 	bl	8003dc8 <I2C_WaitOnFlagUntilTimeout>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d00d      	beq.n	8003b2a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b1c:	d103      	bne.n	8003b26 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b24:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e05f      	b.n	8003bea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b2a:	897b      	ldrh	r3, [r7, #10]
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	461a      	mov	r2, r3
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b38:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3c:	6a3a      	ldr	r2, [r7, #32]
 8003b3e:	492d      	ldr	r1, [pc, #180]	; (8003bf4 <I2C_RequestMemoryWrite+0x128>)
 8003b40:	68f8      	ldr	r0, [r7, #12]
 8003b42:	f000 f998 	bl	8003e76 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d001      	beq.n	8003b50 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e04c      	b.n	8003bea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b50:	2300      	movs	r3, #0
 8003b52:	617b      	str	r3, [r7, #20]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	695b      	ldr	r3, [r3, #20]
 8003b5a:	617b      	str	r3, [r7, #20]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	699b      	ldr	r3, [r3, #24]
 8003b62:	617b      	str	r3, [r7, #20]
 8003b64:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b68:	6a39      	ldr	r1, [r7, #32]
 8003b6a:	68f8      	ldr	r0, [r7, #12]
 8003b6c:	f000 fa02 	bl	8003f74 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d00d      	beq.n	8003b92 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7a:	2b04      	cmp	r3, #4
 8003b7c:	d107      	bne.n	8003b8e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b8c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e02b      	b.n	8003bea <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b92:	88fb      	ldrh	r3, [r7, #6]
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d105      	bne.n	8003ba4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b98:	893b      	ldrh	r3, [r7, #8]
 8003b9a:	b2da      	uxtb	r2, r3
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	611a      	str	r2, [r3, #16]
 8003ba2:	e021      	b.n	8003be8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ba4:	893b      	ldrh	r3, [r7, #8]
 8003ba6:	0a1b      	lsrs	r3, r3, #8
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	b2da      	uxtb	r2, r3
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bb4:	6a39      	ldr	r1, [r7, #32]
 8003bb6:	68f8      	ldr	r0, [r7, #12]
 8003bb8:	f000 f9dc 	bl	8003f74 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d00d      	beq.n	8003bde <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc6:	2b04      	cmp	r3, #4
 8003bc8:	d107      	bne.n	8003bda <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bd8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e005      	b.n	8003bea <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003bde:	893b      	ldrh	r3, [r7, #8]
 8003be0:	b2da      	uxtb	r2, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003be8:	2300      	movs	r3, #0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3718      	adds	r7, #24
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	00010002 	.word	0x00010002

08003bf8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b088      	sub	sp, #32
 8003bfc:	af02      	add	r7, sp, #8
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	4608      	mov	r0, r1
 8003c02:	4611      	mov	r1, r2
 8003c04:	461a      	mov	r2, r3
 8003c06:	4603      	mov	r3, r0
 8003c08:	817b      	strh	r3, [r7, #10]
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	813b      	strh	r3, [r7, #8]
 8003c0e:	4613      	mov	r3, r2
 8003c10:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c20:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c30:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c34:	9300      	str	r3, [sp, #0]
 8003c36:	6a3b      	ldr	r3, [r7, #32]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c3e:	68f8      	ldr	r0, [r7, #12]
 8003c40:	f000 f8c2 	bl	8003dc8 <I2C_WaitOnFlagUntilTimeout>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00d      	beq.n	8003c66 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c58:	d103      	bne.n	8003c62 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c60:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e0aa      	b.n	8003dbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c66:	897b      	ldrh	r3, [r7, #10]
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003c74:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c78:	6a3a      	ldr	r2, [r7, #32]
 8003c7a:	4952      	ldr	r1, [pc, #328]	; (8003dc4 <I2C_RequestMemoryRead+0x1cc>)
 8003c7c:	68f8      	ldr	r0, [r7, #12]
 8003c7e:	f000 f8fa 	bl	8003e76 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d001      	beq.n	8003c8c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e097      	b.n	8003dbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	617b      	str	r3, [r7, #20]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	695b      	ldr	r3, [r3, #20]
 8003c96:	617b      	str	r3, [r7, #20]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	699b      	ldr	r3, [r3, #24]
 8003c9e:	617b      	str	r3, [r7, #20]
 8003ca0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ca2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ca4:	6a39      	ldr	r1, [r7, #32]
 8003ca6:	68f8      	ldr	r0, [r7, #12]
 8003ca8:	f000 f964 	bl	8003f74 <I2C_WaitOnTXEFlagUntilTimeout>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00d      	beq.n	8003cce <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb6:	2b04      	cmp	r3, #4
 8003cb8:	d107      	bne.n	8003cca <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cc8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e076      	b.n	8003dbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003cce:	88fb      	ldrh	r3, [r7, #6]
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d105      	bne.n	8003ce0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003cd4:	893b      	ldrh	r3, [r7, #8]
 8003cd6:	b2da      	uxtb	r2, r3
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	611a      	str	r2, [r3, #16]
 8003cde:	e021      	b.n	8003d24 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ce0:	893b      	ldrh	r3, [r7, #8]
 8003ce2:	0a1b      	lsrs	r3, r3, #8
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	b2da      	uxtb	r2, r3
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cf0:	6a39      	ldr	r1, [r7, #32]
 8003cf2:	68f8      	ldr	r0, [r7, #12]
 8003cf4:	f000 f93e 	bl	8003f74 <I2C_WaitOnTXEFlagUntilTimeout>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00d      	beq.n	8003d1a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d02:	2b04      	cmp	r3, #4
 8003d04:	d107      	bne.n	8003d16 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d14:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e050      	b.n	8003dbc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d1a:	893b      	ldrh	r3, [r7, #8]
 8003d1c:	b2da      	uxtb	r2, r3
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d26:	6a39      	ldr	r1, [r7, #32]
 8003d28:	68f8      	ldr	r0, [r7, #12]
 8003d2a:	f000 f923 	bl	8003f74 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d00d      	beq.n	8003d50 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d38:	2b04      	cmp	r3, #4
 8003d3a:	d107      	bne.n	8003d4c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d4a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e035      	b.n	8003dbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d5e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d62:	9300      	str	r3, [sp, #0]
 8003d64:	6a3b      	ldr	r3, [r7, #32]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d6c:	68f8      	ldr	r0, [r7, #12]
 8003d6e:	f000 f82b 	bl	8003dc8 <I2C_WaitOnFlagUntilTimeout>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d00d      	beq.n	8003d94 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d86:	d103      	bne.n	8003d90 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d8e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e013      	b.n	8003dbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003d94:	897b      	ldrh	r3, [r7, #10]
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	f043 0301 	orr.w	r3, r3, #1
 8003d9c:	b2da      	uxtb	r2, r3
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da6:	6a3a      	ldr	r2, [r7, #32]
 8003da8:	4906      	ldr	r1, [pc, #24]	; (8003dc4 <I2C_RequestMemoryRead+0x1cc>)
 8003daa:	68f8      	ldr	r0, [r7, #12]
 8003dac:	f000 f863 	bl	8003e76 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d001      	beq.n	8003dba <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e000      	b.n	8003dbc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003dba:	2300      	movs	r3, #0
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3718      	adds	r7, #24
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	00010002 	.word	0x00010002

08003dc8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	603b      	str	r3, [r7, #0]
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003dd8:	e025      	b.n	8003e26 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003de0:	d021      	beq.n	8003e26 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003de2:	f7fe fced 	bl	80027c0 <HAL_GetTick>
 8003de6:	4602      	mov	r2, r0
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	683a      	ldr	r2, [r7, #0]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d302      	bcc.n	8003df8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d116      	bne.n	8003e26 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2220      	movs	r2, #32
 8003e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e12:	f043 0220 	orr.w	r2, r3, #32
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e023      	b.n	8003e6e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	0c1b      	lsrs	r3, r3, #16
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d10d      	bne.n	8003e4c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	43da      	mvns	r2, r3
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	bf0c      	ite	eq
 8003e42:	2301      	moveq	r3, #1
 8003e44:	2300      	movne	r3, #0
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	461a      	mov	r2, r3
 8003e4a:	e00c      	b.n	8003e66 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	43da      	mvns	r2, r3
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	4013      	ands	r3, r2
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	bf0c      	ite	eq
 8003e5e:	2301      	moveq	r3, #1
 8003e60:	2300      	movne	r3, #0
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	461a      	mov	r2, r3
 8003e66:	79fb      	ldrb	r3, [r7, #7]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d0b6      	beq.n	8003dda <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3710      	adds	r7, #16
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}

08003e76 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003e76:	b580      	push	{r7, lr}
 8003e78:	b084      	sub	sp, #16
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	60f8      	str	r0, [r7, #12]
 8003e7e:	60b9      	str	r1, [r7, #8]
 8003e80:	607a      	str	r2, [r7, #4]
 8003e82:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e84:	e051      	b.n	8003f2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	695b      	ldr	r3, [r3, #20]
 8003e8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e94:	d123      	bne.n	8003ede <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ea4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003eae:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2220      	movs	r2, #32
 8003eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eca:	f043 0204 	orr.w	r2, r3, #4
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e046      	b.n	8003f6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ee4:	d021      	beq.n	8003f2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ee6:	f7fe fc6b 	bl	80027c0 <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d302      	bcc.n	8003efc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d116      	bne.n	8003f2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2200      	movs	r2, #0
 8003f00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2220      	movs	r2, #32
 8003f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f16:	f043 0220 	orr.w	r2, r3, #32
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e020      	b.n	8003f6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	0c1b      	lsrs	r3, r3, #16
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d10c      	bne.n	8003f4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	695b      	ldr	r3, [r3, #20]
 8003f3a:	43da      	mvns	r2, r3
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	4013      	ands	r3, r2
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	bf14      	ite	ne
 8003f46:	2301      	movne	r3, #1
 8003f48:	2300      	moveq	r3, #0
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	e00b      	b.n	8003f66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	699b      	ldr	r3, [r3, #24]
 8003f54:	43da      	mvns	r2, r3
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	4013      	ands	r3, r2
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	bf14      	ite	ne
 8003f60:	2301      	movne	r3, #1
 8003f62:	2300      	moveq	r3, #0
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d18d      	bne.n	8003e86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003f6a:	2300      	movs	r3, #0
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3710      	adds	r7, #16
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f80:	e02d      	b.n	8003fde <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f82:	68f8      	ldr	r0, [r7, #12]
 8003f84:	f000 f8ce 	bl	8004124 <I2C_IsAcknowledgeFailed>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d001      	beq.n	8003f92 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e02d      	b.n	8003fee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f98:	d021      	beq.n	8003fde <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f9a:	f7fe fc11 	bl	80027c0 <HAL_GetTick>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	68ba      	ldr	r2, [r7, #8]
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d302      	bcc.n	8003fb0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d116      	bne.n	8003fde <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2220      	movs	r2, #32
 8003fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fca:	f043 0220 	orr.w	r2, r3, #32
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e007      	b.n	8003fee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	695b      	ldr	r3, [r3, #20]
 8003fe4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fe8:	2b80      	cmp	r3, #128	; 0x80
 8003fea:	d1ca      	bne.n	8003f82 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003fec:	2300      	movs	r3, #0
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3710      	adds	r7, #16
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}

08003ff6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ff6:	b580      	push	{r7, lr}
 8003ff8:	b084      	sub	sp, #16
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	60f8      	str	r0, [r7, #12]
 8003ffe:	60b9      	str	r1, [r7, #8]
 8004000:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004002:	e02d      	b.n	8004060 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004004:	68f8      	ldr	r0, [r7, #12]
 8004006:	f000 f88d 	bl	8004124 <I2C_IsAcknowledgeFailed>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d001      	beq.n	8004014 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e02d      	b.n	8004070 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800401a:	d021      	beq.n	8004060 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800401c:	f7fe fbd0 	bl	80027c0 <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	68ba      	ldr	r2, [r7, #8]
 8004028:	429a      	cmp	r2, r3
 800402a:	d302      	bcc.n	8004032 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d116      	bne.n	8004060 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2200      	movs	r2, #0
 8004036:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2220      	movs	r2, #32
 800403c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2200      	movs	r2, #0
 8004044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404c:	f043 0220 	orr.w	r2, r3, #32
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2200      	movs	r2, #0
 8004058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e007      	b.n	8004070 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	695b      	ldr	r3, [r3, #20]
 8004066:	f003 0304 	and.w	r3, r3, #4
 800406a:	2b04      	cmp	r3, #4
 800406c:	d1ca      	bne.n	8004004 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800406e:	2300      	movs	r3, #0
}
 8004070:	4618      	mov	r0, r3
 8004072:	3710      	adds	r7, #16
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}

08004078 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0
 800407e:	60f8      	str	r0, [r7, #12]
 8004080:	60b9      	str	r1, [r7, #8]
 8004082:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004084:	e042      	b.n	800410c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	695b      	ldr	r3, [r3, #20]
 800408c:	f003 0310 	and.w	r3, r3, #16
 8004090:	2b10      	cmp	r3, #16
 8004092:	d119      	bne.n	80040c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f06f 0210 	mvn.w	r2, #16
 800409c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2200      	movs	r2, #0
 80040a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2220      	movs	r2, #32
 80040a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2200      	movs	r2, #0
 80040c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e029      	b.n	800411c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040c8:	f7fe fb7a 	bl	80027c0 <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	68ba      	ldr	r2, [r7, #8]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d302      	bcc.n	80040de <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d116      	bne.n	800410c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2200      	movs	r2, #0
 80040e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2220      	movs	r2, #32
 80040e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f8:	f043 0220 	orr.w	r2, r3, #32
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e007      	b.n	800411c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	695b      	ldr	r3, [r3, #20]
 8004112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004116:	2b40      	cmp	r3, #64	; 0x40
 8004118:	d1b5      	bne.n	8004086 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800411a:	2300      	movs	r3, #0
}
 800411c:	4618      	mov	r0, r3
 800411e:	3710      	adds	r7, #16
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}

08004124 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	695b      	ldr	r3, [r3, #20]
 8004132:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004136:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800413a:	d11b      	bne.n	8004174 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004144:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2220      	movs	r2, #32
 8004150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004160:	f043 0204 	orr.w	r2, r3, #4
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e000      	b.n	8004176 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	370c      	adds	r7, #12
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr
	...

08004184 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b086      	sub	sp, #24
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d101      	bne.n	8004196 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e267      	b.n	8004666 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0301 	and.w	r3, r3, #1
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d075      	beq.n	800428e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041a2:	4b88      	ldr	r3, [pc, #544]	; (80043c4 <HAL_RCC_OscConfig+0x240>)
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f003 030c 	and.w	r3, r3, #12
 80041aa:	2b04      	cmp	r3, #4
 80041ac:	d00c      	beq.n	80041c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041ae:	4b85      	ldr	r3, [pc, #532]	; (80043c4 <HAL_RCC_OscConfig+0x240>)
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041b6:	2b08      	cmp	r3, #8
 80041b8:	d112      	bne.n	80041e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041ba:	4b82      	ldr	r3, [pc, #520]	; (80043c4 <HAL_RCC_OscConfig+0x240>)
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041c6:	d10b      	bne.n	80041e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041c8:	4b7e      	ldr	r3, [pc, #504]	; (80043c4 <HAL_RCC_OscConfig+0x240>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d05b      	beq.n	800428c <HAL_RCC_OscConfig+0x108>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d157      	bne.n	800428c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e242      	b.n	8004666 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041e8:	d106      	bne.n	80041f8 <HAL_RCC_OscConfig+0x74>
 80041ea:	4b76      	ldr	r3, [pc, #472]	; (80043c4 <HAL_RCC_OscConfig+0x240>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a75      	ldr	r2, [pc, #468]	; (80043c4 <HAL_RCC_OscConfig+0x240>)
 80041f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041f4:	6013      	str	r3, [r2, #0]
 80041f6:	e01d      	b.n	8004234 <HAL_RCC_OscConfig+0xb0>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004200:	d10c      	bne.n	800421c <HAL_RCC_OscConfig+0x98>
 8004202:	4b70      	ldr	r3, [pc, #448]	; (80043c4 <HAL_RCC_OscConfig+0x240>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a6f      	ldr	r2, [pc, #444]	; (80043c4 <HAL_RCC_OscConfig+0x240>)
 8004208:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800420c:	6013      	str	r3, [r2, #0]
 800420e:	4b6d      	ldr	r3, [pc, #436]	; (80043c4 <HAL_RCC_OscConfig+0x240>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a6c      	ldr	r2, [pc, #432]	; (80043c4 <HAL_RCC_OscConfig+0x240>)
 8004214:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004218:	6013      	str	r3, [r2, #0]
 800421a:	e00b      	b.n	8004234 <HAL_RCC_OscConfig+0xb0>
 800421c:	4b69      	ldr	r3, [pc, #420]	; (80043c4 <HAL_RCC_OscConfig+0x240>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a68      	ldr	r2, [pc, #416]	; (80043c4 <HAL_RCC_OscConfig+0x240>)
 8004222:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004226:	6013      	str	r3, [r2, #0]
 8004228:	4b66      	ldr	r3, [pc, #408]	; (80043c4 <HAL_RCC_OscConfig+0x240>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a65      	ldr	r2, [pc, #404]	; (80043c4 <HAL_RCC_OscConfig+0x240>)
 800422e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004232:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d013      	beq.n	8004264 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800423c:	f7fe fac0 	bl	80027c0 <HAL_GetTick>
 8004240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004242:	e008      	b.n	8004256 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004244:	f7fe fabc 	bl	80027c0 <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	2b64      	cmp	r3, #100	; 0x64
 8004250:	d901      	bls.n	8004256 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e207      	b.n	8004666 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004256:	4b5b      	ldr	r3, [pc, #364]	; (80043c4 <HAL_RCC_OscConfig+0x240>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d0f0      	beq.n	8004244 <HAL_RCC_OscConfig+0xc0>
 8004262:	e014      	b.n	800428e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004264:	f7fe faac 	bl	80027c0 <HAL_GetTick>
 8004268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800426a:	e008      	b.n	800427e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800426c:	f7fe faa8 	bl	80027c0 <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	2b64      	cmp	r3, #100	; 0x64
 8004278:	d901      	bls.n	800427e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e1f3      	b.n	8004666 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800427e:	4b51      	ldr	r3, [pc, #324]	; (80043c4 <HAL_RCC_OscConfig+0x240>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d1f0      	bne.n	800426c <HAL_RCC_OscConfig+0xe8>
 800428a:	e000      	b.n	800428e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800428c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0302 	and.w	r3, r3, #2
 8004296:	2b00      	cmp	r3, #0
 8004298:	d063      	beq.n	8004362 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800429a:	4b4a      	ldr	r3, [pc, #296]	; (80043c4 <HAL_RCC_OscConfig+0x240>)
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	f003 030c 	and.w	r3, r3, #12
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00b      	beq.n	80042be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042a6:	4b47      	ldr	r3, [pc, #284]	; (80043c4 <HAL_RCC_OscConfig+0x240>)
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042ae:	2b08      	cmp	r3, #8
 80042b0:	d11c      	bne.n	80042ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042b2:	4b44      	ldr	r3, [pc, #272]	; (80043c4 <HAL_RCC_OscConfig+0x240>)
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d116      	bne.n	80042ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042be:	4b41      	ldr	r3, [pc, #260]	; (80043c4 <HAL_RCC_OscConfig+0x240>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0302 	and.w	r3, r3, #2
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d005      	beq.n	80042d6 <HAL_RCC_OscConfig+0x152>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d001      	beq.n	80042d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e1c7      	b.n	8004666 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042d6:	4b3b      	ldr	r3, [pc, #236]	; (80043c4 <HAL_RCC_OscConfig+0x240>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	00db      	lsls	r3, r3, #3
 80042e4:	4937      	ldr	r1, [pc, #220]	; (80043c4 <HAL_RCC_OscConfig+0x240>)
 80042e6:	4313      	orrs	r3, r2
 80042e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042ea:	e03a      	b.n	8004362 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d020      	beq.n	8004336 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042f4:	4b34      	ldr	r3, [pc, #208]	; (80043c8 <HAL_RCC_OscConfig+0x244>)
 80042f6:	2201      	movs	r2, #1
 80042f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042fa:	f7fe fa61 	bl	80027c0 <HAL_GetTick>
 80042fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004300:	e008      	b.n	8004314 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004302:	f7fe fa5d 	bl	80027c0 <HAL_GetTick>
 8004306:	4602      	mov	r2, r0
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	1ad3      	subs	r3, r2, r3
 800430c:	2b02      	cmp	r3, #2
 800430e:	d901      	bls.n	8004314 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004310:	2303      	movs	r3, #3
 8004312:	e1a8      	b.n	8004666 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004314:	4b2b      	ldr	r3, [pc, #172]	; (80043c4 <HAL_RCC_OscConfig+0x240>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0302 	and.w	r3, r3, #2
 800431c:	2b00      	cmp	r3, #0
 800431e:	d0f0      	beq.n	8004302 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004320:	4b28      	ldr	r3, [pc, #160]	; (80043c4 <HAL_RCC_OscConfig+0x240>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	691b      	ldr	r3, [r3, #16]
 800432c:	00db      	lsls	r3, r3, #3
 800432e:	4925      	ldr	r1, [pc, #148]	; (80043c4 <HAL_RCC_OscConfig+0x240>)
 8004330:	4313      	orrs	r3, r2
 8004332:	600b      	str	r3, [r1, #0]
 8004334:	e015      	b.n	8004362 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004336:	4b24      	ldr	r3, [pc, #144]	; (80043c8 <HAL_RCC_OscConfig+0x244>)
 8004338:	2200      	movs	r2, #0
 800433a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800433c:	f7fe fa40 	bl	80027c0 <HAL_GetTick>
 8004340:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004342:	e008      	b.n	8004356 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004344:	f7fe fa3c 	bl	80027c0 <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	2b02      	cmp	r3, #2
 8004350:	d901      	bls.n	8004356 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e187      	b.n	8004666 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004356:	4b1b      	ldr	r3, [pc, #108]	; (80043c4 <HAL_RCC_OscConfig+0x240>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0302 	and.w	r3, r3, #2
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1f0      	bne.n	8004344 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0308 	and.w	r3, r3, #8
 800436a:	2b00      	cmp	r3, #0
 800436c:	d036      	beq.n	80043dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	695b      	ldr	r3, [r3, #20]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d016      	beq.n	80043a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004376:	4b15      	ldr	r3, [pc, #84]	; (80043cc <HAL_RCC_OscConfig+0x248>)
 8004378:	2201      	movs	r2, #1
 800437a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800437c:	f7fe fa20 	bl	80027c0 <HAL_GetTick>
 8004380:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004382:	e008      	b.n	8004396 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004384:	f7fe fa1c 	bl	80027c0 <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	2b02      	cmp	r3, #2
 8004390:	d901      	bls.n	8004396 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e167      	b.n	8004666 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004396:	4b0b      	ldr	r3, [pc, #44]	; (80043c4 <HAL_RCC_OscConfig+0x240>)
 8004398:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800439a:	f003 0302 	and.w	r3, r3, #2
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d0f0      	beq.n	8004384 <HAL_RCC_OscConfig+0x200>
 80043a2:	e01b      	b.n	80043dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043a4:	4b09      	ldr	r3, [pc, #36]	; (80043cc <HAL_RCC_OscConfig+0x248>)
 80043a6:	2200      	movs	r2, #0
 80043a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043aa:	f7fe fa09 	bl	80027c0 <HAL_GetTick>
 80043ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043b0:	e00e      	b.n	80043d0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043b2:	f7fe fa05 	bl	80027c0 <HAL_GetTick>
 80043b6:	4602      	mov	r2, r0
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d907      	bls.n	80043d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80043c0:	2303      	movs	r3, #3
 80043c2:	e150      	b.n	8004666 <HAL_RCC_OscConfig+0x4e2>
 80043c4:	40023800 	.word	0x40023800
 80043c8:	42470000 	.word	0x42470000
 80043cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043d0:	4b88      	ldr	r3, [pc, #544]	; (80045f4 <HAL_RCC_OscConfig+0x470>)
 80043d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043d4:	f003 0302 	and.w	r3, r3, #2
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d1ea      	bne.n	80043b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0304 	and.w	r3, r3, #4
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	f000 8097 	beq.w	8004518 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043ea:	2300      	movs	r3, #0
 80043ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043ee:	4b81      	ldr	r3, [pc, #516]	; (80045f4 <HAL_RCC_OscConfig+0x470>)
 80043f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d10f      	bne.n	800441a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043fa:	2300      	movs	r3, #0
 80043fc:	60bb      	str	r3, [r7, #8]
 80043fe:	4b7d      	ldr	r3, [pc, #500]	; (80045f4 <HAL_RCC_OscConfig+0x470>)
 8004400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004402:	4a7c      	ldr	r2, [pc, #496]	; (80045f4 <HAL_RCC_OscConfig+0x470>)
 8004404:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004408:	6413      	str	r3, [r2, #64]	; 0x40
 800440a:	4b7a      	ldr	r3, [pc, #488]	; (80045f4 <HAL_RCC_OscConfig+0x470>)
 800440c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004412:	60bb      	str	r3, [r7, #8]
 8004414:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004416:	2301      	movs	r3, #1
 8004418:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800441a:	4b77      	ldr	r3, [pc, #476]	; (80045f8 <HAL_RCC_OscConfig+0x474>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004422:	2b00      	cmp	r3, #0
 8004424:	d118      	bne.n	8004458 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004426:	4b74      	ldr	r3, [pc, #464]	; (80045f8 <HAL_RCC_OscConfig+0x474>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a73      	ldr	r2, [pc, #460]	; (80045f8 <HAL_RCC_OscConfig+0x474>)
 800442c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004430:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004432:	f7fe f9c5 	bl	80027c0 <HAL_GetTick>
 8004436:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004438:	e008      	b.n	800444c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800443a:	f7fe f9c1 	bl	80027c0 <HAL_GetTick>
 800443e:	4602      	mov	r2, r0
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	2b02      	cmp	r3, #2
 8004446:	d901      	bls.n	800444c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	e10c      	b.n	8004666 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800444c:	4b6a      	ldr	r3, [pc, #424]	; (80045f8 <HAL_RCC_OscConfig+0x474>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004454:	2b00      	cmp	r3, #0
 8004456:	d0f0      	beq.n	800443a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	2b01      	cmp	r3, #1
 800445e:	d106      	bne.n	800446e <HAL_RCC_OscConfig+0x2ea>
 8004460:	4b64      	ldr	r3, [pc, #400]	; (80045f4 <HAL_RCC_OscConfig+0x470>)
 8004462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004464:	4a63      	ldr	r2, [pc, #396]	; (80045f4 <HAL_RCC_OscConfig+0x470>)
 8004466:	f043 0301 	orr.w	r3, r3, #1
 800446a:	6713      	str	r3, [r2, #112]	; 0x70
 800446c:	e01c      	b.n	80044a8 <HAL_RCC_OscConfig+0x324>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	2b05      	cmp	r3, #5
 8004474:	d10c      	bne.n	8004490 <HAL_RCC_OscConfig+0x30c>
 8004476:	4b5f      	ldr	r3, [pc, #380]	; (80045f4 <HAL_RCC_OscConfig+0x470>)
 8004478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800447a:	4a5e      	ldr	r2, [pc, #376]	; (80045f4 <HAL_RCC_OscConfig+0x470>)
 800447c:	f043 0304 	orr.w	r3, r3, #4
 8004480:	6713      	str	r3, [r2, #112]	; 0x70
 8004482:	4b5c      	ldr	r3, [pc, #368]	; (80045f4 <HAL_RCC_OscConfig+0x470>)
 8004484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004486:	4a5b      	ldr	r2, [pc, #364]	; (80045f4 <HAL_RCC_OscConfig+0x470>)
 8004488:	f043 0301 	orr.w	r3, r3, #1
 800448c:	6713      	str	r3, [r2, #112]	; 0x70
 800448e:	e00b      	b.n	80044a8 <HAL_RCC_OscConfig+0x324>
 8004490:	4b58      	ldr	r3, [pc, #352]	; (80045f4 <HAL_RCC_OscConfig+0x470>)
 8004492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004494:	4a57      	ldr	r2, [pc, #348]	; (80045f4 <HAL_RCC_OscConfig+0x470>)
 8004496:	f023 0301 	bic.w	r3, r3, #1
 800449a:	6713      	str	r3, [r2, #112]	; 0x70
 800449c:	4b55      	ldr	r3, [pc, #340]	; (80045f4 <HAL_RCC_OscConfig+0x470>)
 800449e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044a0:	4a54      	ldr	r2, [pc, #336]	; (80045f4 <HAL_RCC_OscConfig+0x470>)
 80044a2:	f023 0304 	bic.w	r3, r3, #4
 80044a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d015      	beq.n	80044dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044b0:	f7fe f986 	bl	80027c0 <HAL_GetTick>
 80044b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044b6:	e00a      	b.n	80044ce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044b8:	f7fe f982 	bl	80027c0 <HAL_GetTick>
 80044bc:	4602      	mov	r2, r0
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d901      	bls.n	80044ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e0cb      	b.n	8004666 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044ce:	4b49      	ldr	r3, [pc, #292]	; (80045f4 <HAL_RCC_OscConfig+0x470>)
 80044d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d2:	f003 0302 	and.w	r3, r3, #2
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d0ee      	beq.n	80044b8 <HAL_RCC_OscConfig+0x334>
 80044da:	e014      	b.n	8004506 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044dc:	f7fe f970 	bl	80027c0 <HAL_GetTick>
 80044e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044e2:	e00a      	b.n	80044fa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044e4:	f7fe f96c 	bl	80027c0 <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d901      	bls.n	80044fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	e0b5      	b.n	8004666 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044fa:	4b3e      	ldr	r3, [pc, #248]	; (80045f4 <HAL_RCC_OscConfig+0x470>)
 80044fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044fe:	f003 0302 	and.w	r3, r3, #2
 8004502:	2b00      	cmp	r3, #0
 8004504:	d1ee      	bne.n	80044e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004506:	7dfb      	ldrb	r3, [r7, #23]
 8004508:	2b01      	cmp	r3, #1
 800450a:	d105      	bne.n	8004518 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800450c:	4b39      	ldr	r3, [pc, #228]	; (80045f4 <HAL_RCC_OscConfig+0x470>)
 800450e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004510:	4a38      	ldr	r2, [pc, #224]	; (80045f4 <HAL_RCC_OscConfig+0x470>)
 8004512:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004516:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	699b      	ldr	r3, [r3, #24]
 800451c:	2b00      	cmp	r3, #0
 800451e:	f000 80a1 	beq.w	8004664 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004522:	4b34      	ldr	r3, [pc, #208]	; (80045f4 <HAL_RCC_OscConfig+0x470>)
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f003 030c 	and.w	r3, r3, #12
 800452a:	2b08      	cmp	r3, #8
 800452c:	d05c      	beq.n	80045e8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	699b      	ldr	r3, [r3, #24]
 8004532:	2b02      	cmp	r3, #2
 8004534:	d141      	bne.n	80045ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004536:	4b31      	ldr	r3, [pc, #196]	; (80045fc <HAL_RCC_OscConfig+0x478>)
 8004538:	2200      	movs	r2, #0
 800453a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800453c:	f7fe f940 	bl	80027c0 <HAL_GetTick>
 8004540:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004542:	e008      	b.n	8004556 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004544:	f7fe f93c 	bl	80027c0 <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	2b02      	cmp	r3, #2
 8004550:	d901      	bls.n	8004556 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e087      	b.n	8004666 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004556:	4b27      	ldr	r3, [pc, #156]	; (80045f4 <HAL_RCC_OscConfig+0x470>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d1f0      	bne.n	8004544 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	69da      	ldr	r2, [r3, #28]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a1b      	ldr	r3, [r3, #32]
 800456a:	431a      	orrs	r2, r3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004570:	019b      	lsls	r3, r3, #6
 8004572:	431a      	orrs	r2, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004578:	085b      	lsrs	r3, r3, #1
 800457a:	3b01      	subs	r3, #1
 800457c:	041b      	lsls	r3, r3, #16
 800457e:	431a      	orrs	r2, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004584:	061b      	lsls	r3, r3, #24
 8004586:	491b      	ldr	r1, [pc, #108]	; (80045f4 <HAL_RCC_OscConfig+0x470>)
 8004588:	4313      	orrs	r3, r2
 800458a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800458c:	4b1b      	ldr	r3, [pc, #108]	; (80045fc <HAL_RCC_OscConfig+0x478>)
 800458e:	2201      	movs	r2, #1
 8004590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004592:	f7fe f915 	bl	80027c0 <HAL_GetTick>
 8004596:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004598:	e008      	b.n	80045ac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800459a:	f7fe f911 	bl	80027c0 <HAL_GetTick>
 800459e:	4602      	mov	r2, r0
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	d901      	bls.n	80045ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80045a8:	2303      	movs	r3, #3
 80045aa:	e05c      	b.n	8004666 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045ac:	4b11      	ldr	r3, [pc, #68]	; (80045f4 <HAL_RCC_OscConfig+0x470>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d0f0      	beq.n	800459a <HAL_RCC_OscConfig+0x416>
 80045b8:	e054      	b.n	8004664 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045ba:	4b10      	ldr	r3, [pc, #64]	; (80045fc <HAL_RCC_OscConfig+0x478>)
 80045bc:	2200      	movs	r2, #0
 80045be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045c0:	f7fe f8fe 	bl	80027c0 <HAL_GetTick>
 80045c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045c6:	e008      	b.n	80045da <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045c8:	f7fe f8fa 	bl	80027c0 <HAL_GetTick>
 80045cc:	4602      	mov	r2, r0
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d901      	bls.n	80045da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e045      	b.n	8004666 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045da:	4b06      	ldr	r3, [pc, #24]	; (80045f4 <HAL_RCC_OscConfig+0x470>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d1f0      	bne.n	80045c8 <HAL_RCC_OscConfig+0x444>
 80045e6:	e03d      	b.n	8004664 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	699b      	ldr	r3, [r3, #24]
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d107      	bne.n	8004600 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e038      	b.n	8004666 <HAL_RCC_OscConfig+0x4e2>
 80045f4:	40023800 	.word	0x40023800
 80045f8:	40007000 	.word	0x40007000
 80045fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004600:	4b1b      	ldr	r3, [pc, #108]	; (8004670 <HAL_RCC_OscConfig+0x4ec>)
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	699b      	ldr	r3, [r3, #24]
 800460a:	2b01      	cmp	r3, #1
 800460c:	d028      	beq.n	8004660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004618:	429a      	cmp	r2, r3
 800461a:	d121      	bne.n	8004660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004626:	429a      	cmp	r2, r3
 8004628:	d11a      	bne.n	8004660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800462a:	68fa      	ldr	r2, [r7, #12]
 800462c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004630:	4013      	ands	r3, r2
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004636:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004638:	4293      	cmp	r3, r2
 800463a:	d111      	bne.n	8004660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004646:	085b      	lsrs	r3, r3, #1
 8004648:	3b01      	subs	r3, #1
 800464a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800464c:	429a      	cmp	r2, r3
 800464e:	d107      	bne.n	8004660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800465a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800465c:	429a      	cmp	r2, r3
 800465e:	d001      	beq.n	8004664 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e000      	b.n	8004666 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004664:	2300      	movs	r3, #0
}
 8004666:	4618      	mov	r0, r3
 8004668:	3718      	adds	r7, #24
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	40023800 	.word	0x40023800

08004674 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d101      	bne.n	8004688 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e0cc      	b.n	8004822 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004688:	4b68      	ldr	r3, [pc, #416]	; (800482c <HAL_RCC_ClockConfig+0x1b8>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0307 	and.w	r3, r3, #7
 8004690:	683a      	ldr	r2, [r7, #0]
 8004692:	429a      	cmp	r2, r3
 8004694:	d90c      	bls.n	80046b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004696:	4b65      	ldr	r3, [pc, #404]	; (800482c <HAL_RCC_ClockConfig+0x1b8>)
 8004698:	683a      	ldr	r2, [r7, #0]
 800469a:	b2d2      	uxtb	r2, r2
 800469c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800469e:	4b63      	ldr	r3, [pc, #396]	; (800482c <HAL_RCC_ClockConfig+0x1b8>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 0307 	and.w	r3, r3, #7
 80046a6:	683a      	ldr	r2, [r7, #0]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d001      	beq.n	80046b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e0b8      	b.n	8004822 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 0302 	and.w	r3, r3, #2
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d020      	beq.n	80046fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 0304 	and.w	r3, r3, #4
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d005      	beq.n	80046d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046c8:	4b59      	ldr	r3, [pc, #356]	; (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	4a58      	ldr	r2, [pc, #352]	; (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 80046ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80046d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0308 	and.w	r3, r3, #8
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d005      	beq.n	80046ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046e0:	4b53      	ldr	r3, [pc, #332]	; (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	4a52      	ldr	r2, [pc, #328]	; (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 80046e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80046ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046ec:	4b50      	ldr	r3, [pc, #320]	; (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	494d      	ldr	r1, [pc, #308]	; (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 80046fa:	4313      	orrs	r3, r2
 80046fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 0301 	and.w	r3, r3, #1
 8004706:	2b00      	cmp	r3, #0
 8004708:	d044      	beq.n	8004794 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	2b01      	cmp	r3, #1
 8004710:	d107      	bne.n	8004722 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004712:	4b47      	ldr	r3, [pc, #284]	; (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d119      	bne.n	8004752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e07f      	b.n	8004822 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	2b02      	cmp	r3, #2
 8004728:	d003      	beq.n	8004732 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800472e:	2b03      	cmp	r3, #3
 8004730:	d107      	bne.n	8004742 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004732:	4b3f      	ldr	r3, [pc, #252]	; (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d109      	bne.n	8004752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e06f      	b.n	8004822 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004742:	4b3b      	ldr	r3, [pc, #236]	; (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0302 	and.w	r3, r3, #2
 800474a:	2b00      	cmp	r3, #0
 800474c:	d101      	bne.n	8004752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e067      	b.n	8004822 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004752:	4b37      	ldr	r3, [pc, #220]	; (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	f023 0203 	bic.w	r2, r3, #3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	4934      	ldr	r1, [pc, #208]	; (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 8004760:	4313      	orrs	r3, r2
 8004762:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004764:	f7fe f82c 	bl	80027c0 <HAL_GetTick>
 8004768:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800476a:	e00a      	b.n	8004782 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800476c:	f7fe f828 	bl	80027c0 <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	f241 3288 	movw	r2, #5000	; 0x1388
 800477a:	4293      	cmp	r3, r2
 800477c:	d901      	bls.n	8004782 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	e04f      	b.n	8004822 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004782:	4b2b      	ldr	r3, [pc, #172]	; (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	f003 020c 	and.w	r2, r3, #12
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	429a      	cmp	r2, r3
 8004792:	d1eb      	bne.n	800476c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004794:	4b25      	ldr	r3, [pc, #148]	; (800482c <HAL_RCC_ClockConfig+0x1b8>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0307 	and.w	r3, r3, #7
 800479c:	683a      	ldr	r2, [r7, #0]
 800479e:	429a      	cmp	r2, r3
 80047a0:	d20c      	bcs.n	80047bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047a2:	4b22      	ldr	r3, [pc, #136]	; (800482c <HAL_RCC_ClockConfig+0x1b8>)
 80047a4:	683a      	ldr	r2, [r7, #0]
 80047a6:	b2d2      	uxtb	r2, r2
 80047a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047aa:	4b20      	ldr	r3, [pc, #128]	; (800482c <HAL_RCC_ClockConfig+0x1b8>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 0307 	and.w	r3, r3, #7
 80047b2:	683a      	ldr	r2, [r7, #0]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d001      	beq.n	80047bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e032      	b.n	8004822 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0304 	and.w	r3, r3, #4
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d008      	beq.n	80047da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047c8:	4b19      	ldr	r3, [pc, #100]	; (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	4916      	ldr	r1, [pc, #88]	; (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 80047d6:	4313      	orrs	r3, r2
 80047d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0308 	and.w	r3, r3, #8
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d009      	beq.n	80047fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047e6:	4b12      	ldr	r3, [pc, #72]	; (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	691b      	ldr	r3, [r3, #16]
 80047f2:	00db      	lsls	r3, r3, #3
 80047f4:	490e      	ldr	r1, [pc, #56]	; (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 80047f6:	4313      	orrs	r3, r2
 80047f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80047fa:	f000 f821 	bl	8004840 <HAL_RCC_GetSysClockFreq>
 80047fe:	4602      	mov	r2, r0
 8004800:	4b0b      	ldr	r3, [pc, #44]	; (8004830 <HAL_RCC_ClockConfig+0x1bc>)
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	091b      	lsrs	r3, r3, #4
 8004806:	f003 030f 	and.w	r3, r3, #15
 800480a:	490a      	ldr	r1, [pc, #40]	; (8004834 <HAL_RCC_ClockConfig+0x1c0>)
 800480c:	5ccb      	ldrb	r3, [r1, r3]
 800480e:	fa22 f303 	lsr.w	r3, r2, r3
 8004812:	4a09      	ldr	r2, [pc, #36]	; (8004838 <HAL_RCC_ClockConfig+0x1c4>)
 8004814:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004816:	4b09      	ldr	r3, [pc, #36]	; (800483c <HAL_RCC_ClockConfig+0x1c8>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4618      	mov	r0, r3
 800481c:	f7fd ff8c 	bl	8002738 <HAL_InitTick>

  return HAL_OK;
 8004820:	2300      	movs	r3, #0
}
 8004822:	4618      	mov	r0, r3
 8004824:	3710      	adds	r7, #16
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	40023c00 	.word	0x40023c00
 8004830:	40023800 	.word	0x40023800
 8004834:	08008058 	.word	0x08008058
 8004838:	20000000 	.word	0x20000000
 800483c:	2000000c 	.word	0x2000000c

08004840 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004840:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004844:	b094      	sub	sp, #80	; 0x50
 8004846:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004848:	2300      	movs	r3, #0
 800484a:	647b      	str	r3, [r7, #68]	; 0x44
 800484c:	2300      	movs	r3, #0
 800484e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004850:	2300      	movs	r3, #0
 8004852:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004854:	2300      	movs	r3, #0
 8004856:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004858:	4b79      	ldr	r3, [pc, #484]	; (8004a40 <HAL_RCC_GetSysClockFreq+0x200>)
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	f003 030c 	and.w	r3, r3, #12
 8004860:	2b08      	cmp	r3, #8
 8004862:	d00d      	beq.n	8004880 <HAL_RCC_GetSysClockFreq+0x40>
 8004864:	2b08      	cmp	r3, #8
 8004866:	f200 80e1 	bhi.w	8004a2c <HAL_RCC_GetSysClockFreq+0x1ec>
 800486a:	2b00      	cmp	r3, #0
 800486c:	d002      	beq.n	8004874 <HAL_RCC_GetSysClockFreq+0x34>
 800486e:	2b04      	cmp	r3, #4
 8004870:	d003      	beq.n	800487a <HAL_RCC_GetSysClockFreq+0x3a>
 8004872:	e0db      	b.n	8004a2c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004874:	4b73      	ldr	r3, [pc, #460]	; (8004a44 <HAL_RCC_GetSysClockFreq+0x204>)
 8004876:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004878:	e0db      	b.n	8004a32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800487a:	4b72      	ldr	r3, [pc, #456]	; (8004a44 <HAL_RCC_GetSysClockFreq+0x204>)
 800487c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800487e:	e0d8      	b.n	8004a32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004880:	4b6f      	ldr	r3, [pc, #444]	; (8004a40 <HAL_RCC_GetSysClockFreq+0x200>)
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004888:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800488a:	4b6d      	ldr	r3, [pc, #436]	; (8004a40 <HAL_RCC_GetSysClockFreq+0x200>)
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004892:	2b00      	cmp	r3, #0
 8004894:	d063      	beq.n	800495e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004896:	4b6a      	ldr	r3, [pc, #424]	; (8004a40 <HAL_RCC_GetSysClockFreq+0x200>)
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	099b      	lsrs	r3, r3, #6
 800489c:	2200      	movs	r2, #0
 800489e:	63bb      	str	r3, [r7, #56]	; 0x38
 80048a0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80048a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048a8:	633b      	str	r3, [r7, #48]	; 0x30
 80048aa:	2300      	movs	r3, #0
 80048ac:	637b      	str	r3, [r7, #52]	; 0x34
 80048ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80048b2:	4622      	mov	r2, r4
 80048b4:	462b      	mov	r3, r5
 80048b6:	f04f 0000 	mov.w	r0, #0
 80048ba:	f04f 0100 	mov.w	r1, #0
 80048be:	0159      	lsls	r1, r3, #5
 80048c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048c4:	0150      	lsls	r0, r2, #5
 80048c6:	4602      	mov	r2, r0
 80048c8:	460b      	mov	r3, r1
 80048ca:	4621      	mov	r1, r4
 80048cc:	1a51      	subs	r1, r2, r1
 80048ce:	6139      	str	r1, [r7, #16]
 80048d0:	4629      	mov	r1, r5
 80048d2:	eb63 0301 	sbc.w	r3, r3, r1
 80048d6:	617b      	str	r3, [r7, #20]
 80048d8:	f04f 0200 	mov.w	r2, #0
 80048dc:	f04f 0300 	mov.w	r3, #0
 80048e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80048e4:	4659      	mov	r1, fp
 80048e6:	018b      	lsls	r3, r1, #6
 80048e8:	4651      	mov	r1, sl
 80048ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80048ee:	4651      	mov	r1, sl
 80048f0:	018a      	lsls	r2, r1, #6
 80048f2:	4651      	mov	r1, sl
 80048f4:	ebb2 0801 	subs.w	r8, r2, r1
 80048f8:	4659      	mov	r1, fp
 80048fa:	eb63 0901 	sbc.w	r9, r3, r1
 80048fe:	f04f 0200 	mov.w	r2, #0
 8004902:	f04f 0300 	mov.w	r3, #0
 8004906:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800490a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800490e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004912:	4690      	mov	r8, r2
 8004914:	4699      	mov	r9, r3
 8004916:	4623      	mov	r3, r4
 8004918:	eb18 0303 	adds.w	r3, r8, r3
 800491c:	60bb      	str	r3, [r7, #8]
 800491e:	462b      	mov	r3, r5
 8004920:	eb49 0303 	adc.w	r3, r9, r3
 8004924:	60fb      	str	r3, [r7, #12]
 8004926:	f04f 0200 	mov.w	r2, #0
 800492a:	f04f 0300 	mov.w	r3, #0
 800492e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004932:	4629      	mov	r1, r5
 8004934:	028b      	lsls	r3, r1, #10
 8004936:	4621      	mov	r1, r4
 8004938:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800493c:	4621      	mov	r1, r4
 800493e:	028a      	lsls	r2, r1, #10
 8004940:	4610      	mov	r0, r2
 8004942:	4619      	mov	r1, r3
 8004944:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004946:	2200      	movs	r2, #0
 8004948:	62bb      	str	r3, [r7, #40]	; 0x28
 800494a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800494c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004950:	f7fb fc96 	bl	8000280 <__aeabi_uldivmod>
 8004954:	4602      	mov	r2, r0
 8004956:	460b      	mov	r3, r1
 8004958:	4613      	mov	r3, r2
 800495a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800495c:	e058      	b.n	8004a10 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800495e:	4b38      	ldr	r3, [pc, #224]	; (8004a40 <HAL_RCC_GetSysClockFreq+0x200>)
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	099b      	lsrs	r3, r3, #6
 8004964:	2200      	movs	r2, #0
 8004966:	4618      	mov	r0, r3
 8004968:	4611      	mov	r1, r2
 800496a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800496e:	623b      	str	r3, [r7, #32]
 8004970:	2300      	movs	r3, #0
 8004972:	627b      	str	r3, [r7, #36]	; 0x24
 8004974:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004978:	4642      	mov	r2, r8
 800497a:	464b      	mov	r3, r9
 800497c:	f04f 0000 	mov.w	r0, #0
 8004980:	f04f 0100 	mov.w	r1, #0
 8004984:	0159      	lsls	r1, r3, #5
 8004986:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800498a:	0150      	lsls	r0, r2, #5
 800498c:	4602      	mov	r2, r0
 800498e:	460b      	mov	r3, r1
 8004990:	4641      	mov	r1, r8
 8004992:	ebb2 0a01 	subs.w	sl, r2, r1
 8004996:	4649      	mov	r1, r9
 8004998:	eb63 0b01 	sbc.w	fp, r3, r1
 800499c:	f04f 0200 	mov.w	r2, #0
 80049a0:	f04f 0300 	mov.w	r3, #0
 80049a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80049a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80049ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80049b0:	ebb2 040a 	subs.w	r4, r2, sl
 80049b4:	eb63 050b 	sbc.w	r5, r3, fp
 80049b8:	f04f 0200 	mov.w	r2, #0
 80049bc:	f04f 0300 	mov.w	r3, #0
 80049c0:	00eb      	lsls	r3, r5, #3
 80049c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049c6:	00e2      	lsls	r2, r4, #3
 80049c8:	4614      	mov	r4, r2
 80049ca:	461d      	mov	r5, r3
 80049cc:	4643      	mov	r3, r8
 80049ce:	18e3      	adds	r3, r4, r3
 80049d0:	603b      	str	r3, [r7, #0]
 80049d2:	464b      	mov	r3, r9
 80049d4:	eb45 0303 	adc.w	r3, r5, r3
 80049d8:	607b      	str	r3, [r7, #4]
 80049da:	f04f 0200 	mov.w	r2, #0
 80049de:	f04f 0300 	mov.w	r3, #0
 80049e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80049e6:	4629      	mov	r1, r5
 80049e8:	028b      	lsls	r3, r1, #10
 80049ea:	4621      	mov	r1, r4
 80049ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80049f0:	4621      	mov	r1, r4
 80049f2:	028a      	lsls	r2, r1, #10
 80049f4:	4610      	mov	r0, r2
 80049f6:	4619      	mov	r1, r3
 80049f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049fa:	2200      	movs	r2, #0
 80049fc:	61bb      	str	r3, [r7, #24]
 80049fe:	61fa      	str	r2, [r7, #28]
 8004a00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a04:	f7fb fc3c 	bl	8000280 <__aeabi_uldivmod>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	460b      	mov	r3, r1
 8004a0c:	4613      	mov	r3, r2
 8004a0e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a10:	4b0b      	ldr	r3, [pc, #44]	; (8004a40 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	0c1b      	lsrs	r3, r3, #16
 8004a16:	f003 0303 	and.w	r3, r3, #3
 8004a1a:	3301      	adds	r3, #1
 8004a1c:	005b      	lsls	r3, r3, #1
 8004a1e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004a20:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a28:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a2a:	e002      	b.n	8004a32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a2c:	4b05      	ldr	r3, [pc, #20]	; (8004a44 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a2e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3750      	adds	r7, #80	; 0x50
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a3e:	bf00      	nop
 8004a40:	40023800 	.word	0x40023800
 8004a44:	00f42400 	.word	0x00f42400

08004a48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a4c:	4b03      	ldr	r3, [pc, #12]	; (8004a5c <HAL_RCC_GetHCLKFreq+0x14>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr
 8004a5a:	bf00      	nop
 8004a5c:	20000000 	.word	0x20000000

08004a60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004a64:	f7ff fff0 	bl	8004a48 <HAL_RCC_GetHCLKFreq>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	4b05      	ldr	r3, [pc, #20]	; (8004a80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	0a9b      	lsrs	r3, r3, #10
 8004a70:	f003 0307 	and.w	r3, r3, #7
 8004a74:	4903      	ldr	r1, [pc, #12]	; (8004a84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a76:	5ccb      	ldrb	r3, [r1, r3]
 8004a78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	40023800 	.word	0x40023800
 8004a84:	08008068 	.word	0x08008068

08004a88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004a8c:	f7ff ffdc 	bl	8004a48 <HAL_RCC_GetHCLKFreq>
 8004a90:	4602      	mov	r2, r0
 8004a92:	4b05      	ldr	r3, [pc, #20]	; (8004aa8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	0b5b      	lsrs	r3, r3, #13
 8004a98:	f003 0307 	and.w	r3, r3, #7
 8004a9c:	4903      	ldr	r1, [pc, #12]	; (8004aac <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a9e:	5ccb      	ldrb	r3, [r1, r3]
 8004aa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	40023800 	.word	0x40023800
 8004aac:	08008068 	.word	0x08008068

08004ab0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b082      	sub	sp, #8
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d101      	bne.n	8004ac2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e07b      	b.n	8004bba <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d108      	bne.n	8004adc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ad2:	d009      	beq.n	8004ae8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	61da      	str	r2, [r3, #28]
 8004ada:	e005      	b.n	8004ae8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d106      	bne.n	8004b08 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f7fd f852 	bl	8001bac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2202      	movs	r2, #2
 8004b0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b1e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004b30:	431a      	orrs	r2, r3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b3a:	431a      	orrs	r2, r3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	691b      	ldr	r3, [r3, #16]
 8004b40:	f003 0302 	and.w	r3, r3, #2
 8004b44:	431a      	orrs	r2, r3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	695b      	ldr	r3, [r3, #20]
 8004b4a:	f003 0301 	and.w	r3, r3, #1
 8004b4e:	431a      	orrs	r2, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	699b      	ldr	r3, [r3, #24]
 8004b54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b58:	431a      	orrs	r2, r3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	69db      	ldr	r3, [r3, #28]
 8004b5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b62:	431a      	orrs	r2, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6a1b      	ldr	r3, [r3, #32]
 8004b68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b6c:	ea42 0103 	orr.w	r1, r2, r3
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b74:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	430a      	orrs	r2, r1
 8004b7e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	699b      	ldr	r3, [r3, #24]
 8004b84:	0c1b      	lsrs	r3, r3, #16
 8004b86:	f003 0104 	and.w	r1, r3, #4
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8e:	f003 0210 	and.w	r2, r3, #16
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	430a      	orrs	r2, r1
 8004b98:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	69da      	ldr	r2, [r3, #28]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ba8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004bb8:	2300      	movs	r3, #0
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3708      	adds	r7, #8
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}

08004bc2 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8004bc2:	b580      	push	{r7, lr}
 8004bc4:	b084      	sub	sp, #16
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	60f8      	str	r0, [r7, #12]
 8004bca:	60b9      	str	r1, [r7, #8]
 8004bcc:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d101      	bne.n	8004bd8 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e038      	b.n	8004c4a <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d106      	bne.n	8004bf2 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8004bec:	68f8      	ldr	r0, [r7, #12]
 8004bee:	f7fd f959 	bl	8001ea4 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	3308      	adds	r3, #8
 8004bfa:	4619      	mov	r1, r3
 8004bfc:	4610      	mov	r0, r2
 8004bfe:	f001 fdc9 	bl	8006794 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	6818      	ldr	r0, [r3, #0]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	68b9      	ldr	r1, [r7, #8]
 8004c0e:	f001 fe2b 	bl	8006868 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	6858      	ldr	r0, [r3, #4]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	689a      	ldr	r2, [r3, #8]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c1e:	6879      	ldr	r1, [r7, #4]
 8004c20:	f001 fe58 	bl	80068d4 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	68fa      	ldr	r2, [r7, #12]
 8004c2a:	6892      	ldr	r2, [r2, #8]
 8004c2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	68fa      	ldr	r2, [r7, #12]
 8004c36:	6892      	ldr	r2, [r2, #8]
 8004c38:	f041 0101 	orr.w	r1, r1, #1
 8004c3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 8004c48:	2300      	movs	r3, #0
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3710      	adds	r7, #16
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}

08004c52 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c52:	b580      	push	{r7, lr}
 8004c54:	b082      	sub	sp, #8
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d101      	bne.n	8004c64 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e041      	b.n	8004ce8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d106      	bne.n	8004c7e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f7fc ffdf 	bl	8001c3c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2202      	movs	r2, #2
 8004c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	3304      	adds	r3, #4
 8004c8e:	4619      	mov	r1, r3
 8004c90:	4610      	mov	r0, r2
 8004c92:	f000 fa27 	bl	80050e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2201      	movs	r2, #1
 8004caa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2201      	movs	r2, #1
 8004cca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2201      	movs	r2, #1
 8004cda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ce6:	2300      	movs	r3, #0
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3708      	adds	r7, #8
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}

08004cf0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b084      	sub	sp, #16
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d109      	bne.n	8004d14 <HAL_TIM_PWM_Start+0x24>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	bf14      	ite	ne
 8004d0c:	2301      	movne	r3, #1
 8004d0e:	2300      	moveq	r3, #0
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	e022      	b.n	8004d5a <HAL_TIM_PWM_Start+0x6a>
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	2b04      	cmp	r3, #4
 8004d18:	d109      	bne.n	8004d2e <HAL_TIM_PWM_Start+0x3e>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	bf14      	ite	ne
 8004d26:	2301      	movne	r3, #1
 8004d28:	2300      	moveq	r3, #0
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	e015      	b.n	8004d5a <HAL_TIM_PWM_Start+0x6a>
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	2b08      	cmp	r3, #8
 8004d32:	d109      	bne.n	8004d48 <HAL_TIM_PWM_Start+0x58>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	bf14      	ite	ne
 8004d40:	2301      	movne	r3, #1
 8004d42:	2300      	moveq	r3, #0
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	e008      	b.n	8004d5a <HAL_TIM_PWM_Start+0x6a>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	bf14      	ite	ne
 8004d54:	2301      	movne	r3, #1
 8004d56:	2300      	moveq	r3, #0
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d001      	beq.n	8004d62 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e07c      	b.n	8004e5c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d104      	bne.n	8004d72 <HAL_TIM_PWM_Start+0x82>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2202      	movs	r2, #2
 8004d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d70:	e013      	b.n	8004d9a <HAL_TIM_PWM_Start+0xaa>
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	2b04      	cmp	r3, #4
 8004d76:	d104      	bne.n	8004d82 <HAL_TIM_PWM_Start+0x92>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2202      	movs	r2, #2
 8004d7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d80:	e00b      	b.n	8004d9a <HAL_TIM_PWM_Start+0xaa>
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	2b08      	cmp	r3, #8
 8004d86:	d104      	bne.n	8004d92 <HAL_TIM_PWM_Start+0xa2>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2202      	movs	r2, #2
 8004d8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d90:	e003      	b.n	8004d9a <HAL_TIM_PWM_Start+0xaa>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2202      	movs	r2, #2
 8004d96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	6839      	ldr	r1, [r7, #0]
 8004da2:	4618      	mov	r0, r3
 8004da4:	f000 fbee 	bl	8005584 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a2d      	ldr	r2, [pc, #180]	; (8004e64 <HAL_TIM_PWM_Start+0x174>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d004      	beq.n	8004dbc <HAL_TIM_PWM_Start+0xcc>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a2c      	ldr	r2, [pc, #176]	; (8004e68 <HAL_TIM_PWM_Start+0x178>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d101      	bne.n	8004dc0 <HAL_TIM_PWM_Start+0xd0>
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e000      	b.n	8004dc2 <HAL_TIM_PWM_Start+0xd2>
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d007      	beq.n	8004dd6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004dd4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a22      	ldr	r2, [pc, #136]	; (8004e64 <HAL_TIM_PWM_Start+0x174>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d022      	beq.n	8004e26 <HAL_TIM_PWM_Start+0x136>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004de8:	d01d      	beq.n	8004e26 <HAL_TIM_PWM_Start+0x136>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a1f      	ldr	r2, [pc, #124]	; (8004e6c <HAL_TIM_PWM_Start+0x17c>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d018      	beq.n	8004e26 <HAL_TIM_PWM_Start+0x136>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a1d      	ldr	r2, [pc, #116]	; (8004e70 <HAL_TIM_PWM_Start+0x180>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d013      	beq.n	8004e26 <HAL_TIM_PWM_Start+0x136>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a1c      	ldr	r2, [pc, #112]	; (8004e74 <HAL_TIM_PWM_Start+0x184>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d00e      	beq.n	8004e26 <HAL_TIM_PWM_Start+0x136>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a16      	ldr	r2, [pc, #88]	; (8004e68 <HAL_TIM_PWM_Start+0x178>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d009      	beq.n	8004e26 <HAL_TIM_PWM_Start+0x136>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a18      	ldr	r2, [pc, #96]	; (8004e78 <HAL_TIM_PWM_Start+0x188>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d004      	beq.n	8004e26 <HAL_TIM_PWM_Start+0x136>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a16      	ldr	r2, [pc, #88]	; (8004e7c <HAL_TIM_PWM_Start+0x18c>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d111      	bne.n	8004e4a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	f003 0307 	and.w	r3, r3, #7
 8004e30:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2b06      	cmp	r3, #6
 8004e36:	d010      	beq.n	8004e5a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f042 0201 	orr.w	r2, r2, #1
 8004e46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e48:	e007      	b.n	8004e5a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f042 0201 	orr.w	r2, r2, #1
 8004e58:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e5a:	2300      	movs	r3, #0
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3710      	adds	r7, #16
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	40010000 	.word	0x40010000
 8004e68:	40010400 	.word	0x40010400
 8004e6c:	40000400 	.word	0x40000400
 8004e70:	40000800 	.word	0x40000800
 8004e74:	40000c00 	.word	0x40000c00
 8004e78:	40014000 	.word	0x40014000
 8004e7c:	40001800 	.word	0x40001800

08004e80 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b082      	sub	sp, #8
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	6839      	ldr	r1, [r7, #0]
 8004e92:	4618      	mov	r0, r3
 8004e94:	f000 fb76 	bl	8005584 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a2e      	ldr	r2, [pc, #184]	; (8004f58 <HAL_TIM_PWM_Stop+0xd8>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d004      	beq.n	8004eac <HAL_TIM_PWM_Stop+0x2c>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a2d      	ldr	r2, [pc, #180]	; (8004f5c <HAL_TIM_PWM_Stop+0xdc>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d101      	bne.n	8004eb0 <HAL_TIM_PWM_Stop+0x30>
 8004eac:	2301      	movs	r3, #1
 8004eae:	e000      	b.n	8004eb2 <HAL_TIM_PWM_Stop+0x32>
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d017      	beq.n	8004ee6 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	6a1a      	ldr	r2, [r3, #32]
 8004ebc:	f241 1311 	movw	r3, #4369	; 0x1111
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d10f      	bne.n	8004ee6 <HAL_TIM_PWM_Stop+0x66>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	6a1a      	ldr	r2, [r3, #32]
 8004ecc:	f240 4344 	movw	r3, #1092	; 0x444
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d107      	bne.n	8004ee6 <HAL_TIM_PWM_Stop+0x66>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ee4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	6a1a      	ldr	r2, [r3, #32]
 8004eec:	f241 1311 	movw	r3, #4369	; 0x1111
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d10f      	bne.n	8004f16 <HAL_TIM_PWM_Stop+0x96>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	6a1a      	ldr	r2, [r3, #32]
 8004efc:	f240 4344 	movw	r3, #1092	; 0x444
 8004f00:	4013      	ands	r3, r2
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d107      	bne.n	8004f16 <HAL_TIM_PWM_Stop+0x96>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f022 0201 	bic.w	r2, r2, #1
 8004f14:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d104      	bne.n	8004f26 <HAL_TIM_PWM_Stop+0xa6>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f24:	e013      	b.n	8004f4e <HAL_TIM_PWM_Stop+0xce>
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	2b04      	cmp	r3, #4
 8004f2a:	d104      	bne.n	8004f36 <HAL_TIM_PWM_Stop+0xb6>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f34:	e00b      	b.n	8004f4e <HAL_TIM_PWM_Stop+0xce>
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	2b08      	cmp	r3, #8
 8004f3a:	d104      	bne.n	8004f46 <HAL_TIM_PWM_Stop+0xc6>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f44:	e003      	b.n	8004f4e <HAL_TIM_PWM_Stop+0xce>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2201      	movs	r2, #1
 8004f4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8004f4e:	2300      	movs	r3, #0
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3708      	adds	r7, #8
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	40010000 	.word	0x40010000
 8004f5c:	40010400 	.word	0x40010400

08004f60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b086      	sub	sp, #24
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	60f8      	str	r0, [r7, #12]
 8004f68:	60b9      	str	r1, [r7, #8]
 8004f6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d101      	bne.n	8004f7e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004f7a:	2302      	movs	r3, #2
 8004f7c:	e0ae      	b.n	80050dc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2201      	movs	r2, #1
 8004f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2b0c      	cmp	r3, #12
 8004f8a:	f200 809f 	bhi.w	80050cc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004f8e:	a201      	add	r2, pc, #4	; (adr r2, 8004f94 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f94:	08004fc9 	.word	0x08004fc9
 8004f98:	080050cd 	.word	0x080050cd
 8004f9c:	080050cd 	.word	0x080050cd
 8004fa0:	080050cd 	.word	0x080050cd
 8004fa4:	08005009 	.word	0x08005009
 8004fa8:	080050cd 	.word	0x080050cd
 8004fac:	080050cd 	.word	0x080050cd
 8004fb0:	080050cd 	.word	0x080050cd
 8004fb4:	0800504b 	.word	0x0800504b
 8004fb8:	080050cd 	.word	0x080050cd
 8004fbc:	080050cd 	.word	0x080050cd
 8004fc0:	080050cd 	.word	0x080050cd
 8004fc4:	0800508b 	.word	0x0800508b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	68b9      	ldr	r1, [r7, #8]
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f000 f928 	bl	8005224 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	699a      	ldr	r2, [r3, #24]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f042 0208 	orr.w	r2, r2, #8
 8004fe2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	699a      	ldr	r2, [r3, #24]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f022 0204 	bic.w	r2, r2, #4
 8004ff2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	6999      	ldr	r1, [r3, #24]
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	691a      	ldr	r2, [r3, #16]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	430a      	orrs	r2, r1
 8005004:	619a      	str	r2, [r3, #24]
      break;
 8005006:	e064      	b.n	80050d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	68b9      	ldr	r1, [r7, #8]
 800500e:	4618      	mov	r0, r3
 8005010:	f000 f978 	bl	8005304 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	699a      	ldr	r2, [r3, #24]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005022:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	699a      	ldr	r2, [r3, #24]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005032:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	6999      	ldr	r1, [r3, #24]
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	691b      	ldr	r3, [r3, #16]
 800503e:	021a      	lsls	r2, r3, #8
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	430a      	orrs	r2, r1
 8005046:	619a      	str	r2, [r3, #24]
      break;
 8005048:	e043      	b.n	80050d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	68b9      	ldr	r1, [r7, #8]
 8005050:	4618      	mov	r0, r3
 8005052:	f000 f9cd 	bl	80053f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	69da      	ldr	r2, [r3, #28]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f042 0208 	orr.w	r2, r2, #8
 8005064:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	69da      	ldr	r2, [r3, #28]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f022 0204 	bic.w	r2, r2, #4
 8005074:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	69d9      	ldr	r1, [r3, #28]
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	691a      	ldr	r2, [r3, #16]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	430a      	orrs	r2, r1
 8005086:	61da      	str	r2, [r3, #28]
      break;
 8005088:	e023      	b.n	80050d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	68b9      	ldr	r1, [r7, #8]
 8005090:	4618      	mov	r0, r3
 8005092:	f000 fa21 	bl	80054d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	69da      	ldr	r2, [r3, #28]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	69da      	ldr	r2, [r3, #28]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	69d9      	ldr	r1, [r3, #28]
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	691b      	ldr	r3, [r3, #16]
 80050c0:	021a      	lsls	r2, r3, #8
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	430a      	orrs	r2, r1
 80050c8:	61da      	str	r2, [r3, #28]
      break;
 80050ca:	e002      	b.n	80050d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	75fb      	strb	r3, [r7, #23]
      break;
 80050d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80050da:	7dfb      	ldrb	r3, [r7, #23]
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3718      	adds	r7, #24
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b085      	sub	sp, #20
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a40      	ldr	r2, [pc, #256]	; (80051f8 <TIM_Base_SetConfig+0x114>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d013      	beq.n	8005124 <TIM_Base_SetConfig+0x40>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005102:	d00f      	beq.n	8005124 <TIM_Base_SetConfig+0x40>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4a3d      	ldr	r2, [pc, #244]	; (80051fc <TIM_Base_SetConfig+0x118>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d00b      	beq.n	8005124 <TIM_Base_SetConfig+0x40>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4a3c      	ldr	r2, [pc, #240]	; (8005200 <TIM_Base_SetConfig+0x11c>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d007      	beq.n	8005124 <TIM_Base_SetConfig+0x40>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4a3b      	ldr	r2, [pc, #236]	; (8005204 <TIM_Base_SetConfig+0x120>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d003      	beq.n	8005124 <TIM_Base_SetConfig+0x40>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	4a3a      	ldr	r2, [pc, #232]	; (8005208 <TIM_Base_SetConfig+0x124>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d108      	bne.n	8005136 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800512a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	68fa      	ldr	r2, [r7, #12]
 8005132:	4313      	orrs	r3, r2
 8005134:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a2f      	ldr	r2, [pc, #188]	; (80051f8 <TIM_Base_SetConfig+0x114>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d02b      	beq.n	8005196 <TIM_Base_SetConfig+0xb2>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005144:	d027      	beq.n	8005196 <TIM_Base_SetConfig+0xb2>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a2c      	ldr	r2, [pc, #176]	; (80051fc <TIM_Base_SetConfig+0x118>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d023      	beq.n	8005196 <TIM_Base_SetConfig+0xb2>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a2b      	ldr	r2, [pc, #172]	; (8005200 <TIM_Base_SetConfig+0x11c>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d01f      	beq.n	8005196 <TIM_Base_SetConfig+0xb2>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a2a      	ldr	r2, [pc, #168]	; (8005204 <TIM_Base_SetConfig+0x120>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d01b      	beq.n	8005196 <TIM_Base_SetConfig+0xb2>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a29      	ldr	r2, [pc, #164]	; (8005208 <TIM_Base_SetConfig+0x124>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d017      	beq.n	8005196 <TIM_Base_SetConfig+0xb2>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a28      	ldr	r2, [pc, #160]	; (800520c <TIM_Base_SetConfig+0x128>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d013      	beq.n	8005196 <TIM_Base_SetConfig+0xb2>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a27      	ldr	r2, [pc, #156]	; (8005210 <TIM_Base_SetConfig+0x12c>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d00f      	beq.n	8005196 <TIM_Base_SetConfig+0xb2>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a26      	ldr	r2, [pc, #152]	; (8005214 <TIM_Base_SetConfig+0x130>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d00b      	beq.n	8005196 <TIM_Base_SetConfig+0xb2>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a25      	ldr	r2, [pc, #148]	; (8005218 <TIM_Base_SetConfig+0x134>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d007      	beq.n	8005196 <TIM_Base_SetConfig+0xb2>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a24      	ldr	r2, [pc, #144]	; (800521c <TIM_Base_SetConfig+0x138>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d003      	beq.n	8005196 <TIM_Base_SetConfig+0xb2>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a23      	ldr	r2, [pc, #140]	; (8005220 <TIM_Base_SetConfig+0x13c>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d108      	bne.n	80051a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800519c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	68db      	ldr	r3, [r3, #12]
 80051a2:	68fa      	ldr	r2, [r7, #12]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	695b      	ldr	r3, [r3, #20]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	68fa      	ldr	r2, [r7, #12]
 80051ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	689a      	ldr	r2, [r3, #8]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	4a0a      	ldr	r2, [pc, #40]	; (80051f8 <TIM_Base_SetConfig+0x114>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d003      	beq.n	80051dc <TIM_Base_SetConfig+0xf8>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4a0c      	ldr	r2, [pc, #48]	; (8005208 <TIM_Base_SetConfig+0x124>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d103      	bne.n	80051e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	691a      	ldr	r2, [r3, #16]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	615a      	str	r2, [r3, #20]
}
 80051ea:	bf00      	nop
 80051ec:	3714      	adds	r7, #20
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr
 80051f6:	bf00      	nop
 80051f8:	40010000 	.word	0x40010000
 80051fc:	40000400 	.word	0x40000400
 8005200:	40000800 	.word	0x40000800
 8005204:	40000c00 	.word	0x40000c00
 8005208:	40010400 	.word	0x40010400
 800520c:	40014000 	.word	0x40014000
 8005210:	40014400 	.word	0x40014400
 8005214:	40014800 	.word	0x40014800
 8005218:	40001800 	.word	0x40001800
 800521c:	40001c00 	.word	0x40001c00
 8005220:	40002000 	.word	0x40002000

08005224 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005224:	b480      	push	{r7}
 8005226:	b087      	sub	sp, #28
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a1b      	ldr	r3, [r3, #32]
 8005232:	f023 0201 	bic.w	r2, r3, #1
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6a1b      	ldr	r3, [r3, #32]
 800523e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	699b      	ldr	r3, [r3, #24]
 800524a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005252:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f023 0303 	bic.w	r3, r3, #3
 800525a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	68fa      	ldr	r2, [r7, #12]
 8005262:	4313      	orrs	r3, r2
 8005264:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	f023 0302 	bic.w	r3, r3, #2
 800526c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	697a      	ldr	r2, [r7, #20]
 8005274:	4313      	orrs	r3, r2
 8005276:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4a20      	ldr	r2, [pc, #128]	; (80052fc <TIM_OC1_SetConfig+0xd8>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d003      	beq.n	8005288 <TIM_OC1_SetConfig+0x64>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	4a1f      	ldr	r2, [pc, #124]	; (8005300 <TIM_OC1_SetConfig+0xdc>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d10c      	bne.n	80052a2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	f023 0308 	bic.w	r3, r3, #8
 800528e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	697a      	ldr	r2, [r7, #20]
 8005296:	4313      	orrs	r3, r2
 8005298:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	f023 0304 	bic.w	r3, r3, #4
 80052a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a15      	ldr	r2, [pc, #84]	; (80052fc <TIM_OC1_SetConfig+0xd8>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d003      	beq.n	80052b2 <TIM_OC1_SetConfig+0x8e>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a14      	ldr	r2, [pc, #80]	; (8005300 <TIM_OC1_SetConfig+0xdc>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d111      	bne.n	80052d6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	695b      	ldr	r3, [r3, #20]
 80052c6:	693a      	ldr	r2, [r7, #16]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	699b      	ldr	r3, [r3, #24]
 80052d0:	693a      	ldr	r2, [r7, #16]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	693a      	ldr	r2, [r7, #16]
 80052da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	68fa      	ldr	r2, [r7, #12]
 80052e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	685a      	ldr	r2, [r3, #4]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	697a      	ldr	r2, [r7, #20]
 80052ee:	621a      	str	r2, [r3, #32]
}
 80052f0:	bf00      	nop
 80052f2:	371c      	adds	r7, #28
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr
 80052fc:	40010000 	.word	0x40010000
 8005300:	40010400 	.word	0x40010400

08005304 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005304:	b480      	push	{r7}
 8005306:	b087      	sub	sp, #28
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a1b      	ldr	r3, [r3, #32]
 8005312:	f023 0210 	bic.w	r2, r3, #16
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a1b      	ldr	r3, [r3, #32]
 800531e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	699b      	ldr	r3, [r3, #24]
 800532a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005332:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800533a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	021b      	lsls	r3, r3, #8
 8005342:	68fa      	ldr	r2, [r7, #12]
 8005344:	4313      	orrs	r3, r2
 8005346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	f023 0320 	bic.w	r3, r3, #32
 800534e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	011b      	lsls	r3, r3, #4
 8005356:	697a      	ldr	r2, [r7, #20]
 8005358:	4313      	orrs	r3, r2
 800535a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	4a22      	ldr	r2, [pc, #136]	; (80053e8 <TIM_OC2_SetConfig+0xe4>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d003      	beq.n	800536c <TIM_OC2_SetConfig+0x68>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	4a21      	ldr	r2, [pc, #132]	; (80053ec <TIM_OC2_SetConfig+0xe8>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d10d      	bne.n	8005388 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005372:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	011b      	lsls	r3, r3, #4
 800537a:	697a      	ldr	r2, [r7, #20]
 800537c:	4313      	orrs	r3, r2
 800537e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005386:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	4a17      	ldr	r2, [pc, #92]	; (80053e8 <TIM_OC2_SetConfig+0xe4>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d003      	beq.n	8005398 <TIM_OC2_SetConfig+0x94>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	4a16      	ldr	r2, [pc, #88]	; (80053ec <TIM_OC2_SetConfig+0xe8>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d113      	bne.n	80053c0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800539e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	695b      	ldr	r3, [r3, #20]
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	693a      	ldr	r2, [r7, #16]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	699b      	ldr	r3, [r3, #24]
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	693a      	ldr	r2, [r7, #16]
 80053bc:	4313      	orrs	r3, r2
 80053be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	693a      	ldr	r2, [r7, #16]
 80053c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	68fa      	ldr	r2, [r7, #12]
 80053ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	685a      	ldr	r2, [r3, #4]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	697a      	ldr	r2, [r7, #20]
 80053d8:	621a      	str	r2, [r3, #32]
}
 80053da:	bf00      	nop
 80053dc:	371c      	adds	r7, #28
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr
 80053e6:	bf00      	nop
 80053e8:	40010000 	.word	0x40010000
 80053ec:	40010400 	.word	0x40010400

080053f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b087      	sub	sp, #28
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6a1b      	ldr	r3, [r3, #32]
 80053fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a1b      	ldr	r3, [r3, #32]
 800540a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	69db      	ldr	r3, [r3, #28]
 8005416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800541e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f023 0303 	bic.w	r3, r3, #3
 8005426:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	68fa      	ldr	r2, [r7, #12]
 800542e:	4313      	orrs	r3, r2
 8005430:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005438:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	021b      	lsls	r3, r3, #8
 8005440:	697a      	ldr	r2, [r7, #20]
 8005442:	4313      	orrs	r3, r2
 8005444:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4a21      	ldr	r2, [pc, #132]	; (80054d0 <TIM_OC3_SetConfig+0xe0>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d003      	beq.n	8005456 <TIM_OC3_SetConfig+0x66>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	4a20      	ldr	r2, [pc, #128]	; (80054d4 <TIM_OC3_SetConfig+0xe4>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d10d      	bne.n	8005472 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800545c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	021b      	lsls	r3, r3, #8
 8005464:	697a      	ldr	r2, [r7, #20]
 8005466:	4313      	orrs	r3, r2
 8005468:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005470:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4a16      	ldr	r2, [pc, #88]	; (80054d0 <TIM_OC3_SetConfig+0xe0>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d003      	beq.n	8005482 <TIM_OC3_SetConfig+0x92>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4a15      	ldr	r2, [pc, #84]	; (80054d4 <TIM_OC3_SetConfig+0xe4>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d113      	bne.n	80054aa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005488:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005490:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	695b      	ldr	r3, [r3, #20]
 8005496:	011b      	lsls	r3, r3, #4
 8005498:	693a      	ldr	r2, [r7, #16]
 800549a:	4313      	orrs	r3, r2
 800549c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	699b      	ldr	r3, [r3, #24]
 80054a2:	011b      	lsls	r3, r3, #4
 80054a4:	693a      	ldr	r2, [r7, #16]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	693a      	ldr	r2, [r7, #16]
 80054ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	68fa      	ldr	r2, [r7, #12]
 80054b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	685a      	ldr	r2, [r3, #4]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	697a      	ldr	r2, [r7, #20]
 80054c2:	621a      	str	r2, [r3, #32]
}
 80054c4:	bf00      	nop
 80054c6:	371c      	adds	r7, #28
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr
 80054d0:	40010000 	.word	0x40010000
 80054d4:	40010400 	.word	0x40010400

080054d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054d8:	b480      	push	{r7}
 80054da:	b087      	sub	sp, #28
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a1b      	ldr	r3, [r3, #32]
 80054e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a1b      	ldr	r3, [r3, #32]
 80054f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	69db      	ldr	r3, [r3, #28]
 80054fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005506:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800550e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	021b      	lsls	r3, r3, #8
 8005516:	68fa      	ldr	r2, [r7, #12]
 8005518:	4313      	orrs	r3, r2
 800551a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005522:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	031b      	lsls	r3, r3, #12
 800552a:	693a      	ldr	r2, [r7, #16]
 800552c:	4313      	orrs	r3, r2
 800552e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4a12      	ldr	r2, [pc, #72]	; (800557c <TIM_OC4_SetConfig+0xa4>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d003      	beq.n	8005540 <TIM_OC4_SetConfig+0x68>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4a11      	ldr	r2, [pc, #68]	; (8005580 <TIM_OC4_SetConfig+0xa8>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d109      	bne.n	8005554 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005546:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	695b      	ldr	r3, [r3, #20]
 800554c:	019b      	lsls	r3, r3, #6
 800554e:	697a      	ldr	r2, [r7, #20]
 8005550:	4313      	orrs	r3, r2
 8005552:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	697a      	ldr	r2, [r7, #20]
 8005558:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	68fa      	ldr	r2, [r7, #12]
 800555e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	685a      	ldr	r2, [r3, #4]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	693a      	ldr	r2, [r7, #16]
 800556c:	621a      	str	r2, [r3, #32]
}
 800556e:	bf00      	nop
 8005570:	371c      	adds	r7, #28
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr
 800557a:	bf00      	nop
 800557c:	40010000 	.word	0x40010000
 8005580:	40010400 	.word	0x40010400

08005584 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005584:	b480      	push	{r7}
 8005586:	b087      	sub	sp, #28
 8005588:	af00      	add	r7, sp, #0
 800558a:	60f8      	str	r0, [r7, #12]
 800558c:	60b9      	str	r1, [r7, #8]
 800558e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	f003 031f 	and.w	r3, r3, #31
 8005596:	2201      	movs	r2, #1
 8005598:	fa02 f303 	lsl.w	r3, r2, r3
 800559c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	6a1a      	ldr	r2, [r3, #32]
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	43db      	mvns	r3, r3
 80055a6:	401a      	ands	r2, r3
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6a1a      	ldr	r2, [r3, #32]
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	f003 031f 	and.w	r3, r3, #31
 80055b6:	6879      	ldr	r1, [r7, #4]
 80055b8:	fa01 f303 	lsl.w	r3, r1, r3
 80055bc:	431a      	orrs	r2, r3
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	621a      	str	r2, [r3, #32]
}
 80055c2:	bf00      	nop
 80055c4:	371c      	adds	r7, #28
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr
	...

080055d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b085      	sub	sp, #20
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d101      	bne.n	80055e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055e4:	2302      	movs	r3, #2
 80055e6:	e05a      	b.n	800569e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2202      	movs	r2, #2
 80055f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800560e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	68fa      	ldr	r2, [r7, #12]
 8005616:	4313      	orrs	r3, r2
 8005618:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	68fa      	ldr	r2, [r7, #12]
 8005620:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a21      	ldr	r2, [pc, #132]	; (80056ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d022      	beq.n	8005672 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005634:	d01d      	beq.n	8005672 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a1d      	ldr	r2, [pc, #116]	; (80056b0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d018      	beq.n	8005672 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a1b      	ldr	r2, [pc, #108]	; (80056b4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d013      	beq.n	8005672 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a1a      	ldr	r2, [pc, #104]	; (80056b8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d00e      	beq.n	8005672 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a18      	ldr	r2, [pc, #96]	; (80056bc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d009      	beq.n	8005672 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a17      	ldr	r2, [pc, #92]	; (80056c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d004      	beq.n	8005672 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a15      	ldr	r2, [pc, #84]	; (80056c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d10c      	bne.n	800568c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005678:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	68ba      	ldr	r2, [r7, #8]
 8005680:	4313      	orrs	r3, r2
 8005682:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	68ba      	ldr	r2, [r7, #8]
 800568a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2201      	movs	r2, #1
 8005690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800569c:	2300      	movs	r3, #0
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3714      	adds	r7, #20
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr
 80056aa:	bf00      	nop
 80056ac:	40010000 	.word	0x40010000
 80056b0:	40000400 	.word	0x40000400
 80056b4:	40000800 	.word	0x40000800
 80056b8:	40000c00 	.word	0x40000c00
 80056bc:	40010400 	.word	0x40010400
 80056c0:	40014000 	.word	0x40014000
 80056c4:	40001800 	.word	0x40001800

080056c8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b085      	sub	sp, #20
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80056d2:	2300      	movs	r3, #0
 80056d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d101      	bne.n	80056e4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80056e0:	2302      	movs	r3, #2
 80056e2:	e03d      	b.n	8005760 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	4313      	orrs	r3, r2
 8005706:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	4313      	orrs	r3, r2
 8005714:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4313      	orrs	r3, r2
 8005722:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	691b      	ldr	r3, [r3, #16]
 800572e:	4313      	orrs	r3, r2
 8005730:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	695b      	ldr	r3, [r3, #20]
 800573c:	4313      	orrs	r3, r2
 800573e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	69db      	ldr	r3, [r3, #28]
 800574a:	4313      	orrs	r3, r2
 800574c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	68fa      	ldr	r2, [r7, #12]
 8005754:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2200      	movs	r2, #0
 800575a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800575e:	2300      	movs	r3, #0
}
 8005760:	4618      	mov	r0, r3
 8005762:	3714      	adds	r7, #20
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr

0800576c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b082      	sub	sp, #8
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d101      	bne.n	800577e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	e03f      	b.n	80057fe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005784:	b2db      	uxtb	r3, r3
 8005786:	2b00      	cmp	r3, #0
 8005788:	d106      	bne.n	8005798 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2200      	movs	r2, #0
 800578e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f7fc faae 	bl	8001cf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2224      	movs	r2, #36	; 0x24
 800579c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	68da      	ldr	r2, [r3, #12]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f000 fd7b 	bl	80062ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	691a      	ldr	r2, [r3, #16]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80057c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	695a      	ldr	r2, [r3, #20]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80057d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	68da      	ldr	r2, [r3, #12]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80057e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2220      	movs	r2, #32
 80057f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2220      	movs	r2, #32
 80057f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80057fc:	2300      	movs	r3, #0
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3708      	adds	r7, #8
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}

08005806 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005806:	b580      	push	{r7, lr}
 8005808:	b08a      	sub	sp, #40	; 0x28
 800580a:	af02      	add	r7, sp, #8
 800580c:	60f8      	str	r0, [r7, #12]
 800580e:	60b9      	str	r1, [r7, #8]
 8005810:	603b      	str	r3, [r7, #0]
 8005812:	4613      	mov	r3, r2
 8005814:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005816:	2300      	movs	r3, #0
 8005818:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005820:	b2db      	uxtb	r3, r3
 8005822:	2b20      	cmp	r3, #32
 8005824:	d17c      	bne.n	8005920 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d002      	beq.n	8005832 <HAL_UART_Transmit+0x2c>
 800582c:	88fb      	ldrh	r3, [r7, #6]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d101      	bne.n	8005836 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e075      	b.n	8005922 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800583c:	2b01      	cmp	r3, #1
 800583e:	d101      	bne.n	8005844 <HAL_UART_Transmit+0x3e>
 8005840:	2302      	movs	r3, #2
 8005842:	e06e      	b.n	8005922 <HAL_UART_Transmit+0x11c>
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2200      	movs	r2, #0
 8005850:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2221      	movs	r2, #33	; 0x21
 8005856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800585a:	f7fc ffb1 	bl	80027c0 <HAL_GetTick>
 800585e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	88fa      	ldrh	r2, [r7, #6]
 8005864:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	88fa      	ldrh	r2, [r7, #6]
 800586a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005874:	d108      	bne.n	8005888 <HAL_UART_Transmit+0x82>
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	691b      	ldr	r3, [r3, #16]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d104      	bne.n	8005888 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800587e:	2300      	movs	r3, #0
 8005880:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	61bb      	str	r3, [r7, #24]
 8005886:	e003      	b.n	8005890 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800588c:	2300      	movs	r3, #0
 800588e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2200      	movs	r2, #0
 8005894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005898:	e02a      	b.n	80058f0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	9300      	str	r3, [sp, #0]
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	2200      	movs	r2, #0
 80058a2:	2180      	movs	r1, #128	; 0x80
 80058a4:	68f8      	ldr	r0, [r7, #12]
 80058a6:	f000 faf9 	bl	8005e9c <UART_WaitOnFlagUntilTimeout>
 80058aa:	4603      	mov	r3, r0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d001      	beq.n	80058b4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80058b0:	2303      	movs	r3, #3
 80058b2:	e036      	b.n	8005922 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d10b      	bne.n	80058d2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80058ba:	69bb      	ldr	r3, [r7, #24]
 80058bc:	881b      	ldrh	r3, [r3, #0]
 80058be:	461a      	mov	r2, r3
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058c8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80058ca:	69bb      	ldr	r3, [r7, #24]
 80058cc:	3302      	adds	r3, #2
 80058ce:	61bb      	str	r3, [r7, #24]
 80058d0:	e007      	b.n	80058e2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	781a      	ldrb	r2, [r3, #0]
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	3301      	adds	r3, #1
 80058e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	3b01      	subs	r3, #1
 80058ea:	b29a      	uxth	r2, r3
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d1cf      	bne.n	800589a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	9300      	str	r3, [sp, #0]
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	2200      	movs	r2, #0
 8005902:	2140      	movs	r1, #64	; 0x40
 8005904:	68f8      	ldr	r0, [r7, #12]
 8005906:	f000 fac9 	bl	8005e9c <UART_WaitOnFlagUntilTimeout>
 800590a:	4603      	mov	r3, r0
 800590c:	2b00      	cmp	r3, #0
 800590e:	d001      	beq.n	8005914 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005910:	2303      	movs	r3, #3
 8005912:	e006      	b.n	8005922 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2220      	movs	r2, #32
 8005918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800591c:	2300      	movs	r3, #0
 800591e:	e000      	b.n	8005922 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005920:	2302      	movs	r3, #2
  }
}
 8005922:	4618      	mov	r0, r3
 8005924:	3720      	adds	r7, #32
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}
	...

0800592c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b0ba      	sub	sp, #232	; 0xe8
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	695b      	ldr	r3, [r3, #20]
 800594e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005952:	2300      	movs	r3, #0
 8005954:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005958:	2300      	movs	r3, #0
 800595a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800595e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005962:	f003 030f 	and.w	r3, r3, #15
 8005966:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800596a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800596e:	2b00      	cmp	r3, #0
 8005970:	d10f      	bne.n	8005992 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005976:	f003 0320 	and.w	r3, r3, #32
 800597a:	2b00      	cmp	r3, #0
 800597c:	d009      	beq.n	8005992 <HAL_UART_IRQHandler+0x66>
 800597e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005982:	f003 0320 	and.w	r3, r3, #32
 8005986:	2b00      	cmp	r3, #0
 8005988:	d003      	beq.n	8005992 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 fbd3 	bl	8006136 <UART_Receive_IT>
      return;
 8005990:	e256      	b.n	8005e40 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005992:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005996:	2b00      	cmp	r3, #0
 8005998:	f000 80de 	beq.w	8005b58 <HAL_UART_IRQHandler+0x22c>
 800599c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059a0:	f003 0301 	and.w	r3, r3, #1
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d106      	bne.n	80059b6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80059a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059ac:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	f000 80d1 	beq.w	8005b58 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80059b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059ba:	f003 0301 	and.w	r3, r3, #1
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d00b      	beq.n	80059da <HAL_UART_IRQHandler+0xae>
 80059c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d005      	beq.n	80059da <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d2:	f043 0201 	orr.w	r2, r3, #1
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80059da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059de:	f003 0304 	and.w	r3, r3, #4
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d00b      	beq.n	80059fe <HAL_UART_IRQHandler+0xd2>
 80059e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059ea:	f003 0301 	and.w	r3, r3, #1
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d005      	beq.n	80059fe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f6:	f043 0202 	orr.w	r2, r3, #2
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80059fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a02:	f003 0302 	and.w	r3, r3, #2
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d00b      	beq.n	8005a22 <HAL_UART_IRQHandler+0xf6>
 8005a0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a0e:	f003 0301 	and.w	r3, r3, #1
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d005      	beq.n	8005a22 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a1a:	f043 0204 	orr.w	r2, r3, #4
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005a22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a26:	f003 0308 	and.w	r3, r3, #8
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d011      	beq.n	8005a52 <HAL_UART_IRQHandler+0x126>
 8005a2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a32:	f003 0320 	and.w	r3, r3, #32
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d105      	bne.n	8005a46 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005a3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a3e:	f003 0301 	and.w	r3, r3, #1
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d005      	beq.n	8005a52 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a4a:	f043 0208 	orr.w	r2, r3, #8
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	f000 81ed 	beq.w	8005e36 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a60:	f003 0320 	and.w	r3, r3, #32
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d008      	beq.n	8005a7a <HAL_UART_IRQHandler+0x14e>
 8005a68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a6c:	f003 0320 	and.w	r3, r3, #32
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d002      	beq.n	8005a7a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f000 fb5e 	bl	8006136 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	695b      	ldr	r3, [r3, #20]
 8005a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a84:	2b40      	cmp	r3, #64	; 0x40
 8005a86:	bf0c      	ite	eq
 8005a88:	2301      	moveq	r3, #1
 8005a8a:	2300      	movne	r3, #0
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a96:	f003 0308 	and.w	r3, r3, #8
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d103      	bne.n	8005aa6 <HAL_UART_IRQHandler+0x17a>
 8005a9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d04f      	beq.n	8005b46 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f000 fa66 	bl	8005f78 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	695b      	ldr	r3, [r3, #20]
 8005ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ab6:	2b40      	cmp	r3, #64	; 0x40
 8005ab8:	d141      	bne.n	8005b3e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	3314      	adds	r3, #20
 8005ac0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ac8:	e853 3f00 	ldrex	r3, [r3]
 8005acc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005ad0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ad4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ad8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	3314      	adds	r3, #20
 8005ae2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005ae6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005aea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005af2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005af6:	e841 2300 	strex	r3, r2, [r1]
 8005afa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005afe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d1d9      	bne.n	8005aba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d013      	beq.n	8005b36 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b12:	4a7d      	ldr	r2, [pc, #500]	; (8005d08 <HAL_UART_IRQHandler+0x3dc>)
 8005b14:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f7fd f801 	bl	8002b22 <HAL_DMA_Abort_IT>
 8005b20:	4603      	mov	r3, r0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d016      	beq.n	8005b54 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005b30:	4610      	mov	r0, r2
 8005b32:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b34:	e00e      	b.n	8005b54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f000 f99a 	bl	8005e70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b3c:	e00a      	b.n	8005b54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f000 f996 	bl	8005e70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b44:	e006      	b.n	8005b54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f000 f992 	bl	8005e70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005b52:	e170      	b.n	8005e36 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b54:	bf00      	nop
    return;
 8005b56:	e16e      	b.n	8005e36 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	f040 814a 	bne.w	8005df6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005b62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b66:	f003 0310 	and.w	r3, r3, #16
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	f000 8143 	beq.w	8005df6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005b70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b74:	f003 0310 	and.w	r3, r3, #16
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	f000 813c 	beq.w	8005df6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b7e:	2300      	movs	r3, #0
 8005b80:	60bb      	str	r3, [r7, #8]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	60bb      	str	r3, [r7, #8]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	60bb      	str	r3, [r7, #8]
 8005b92:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	695b      	ldr	r3, [r3, #20]
 8005b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b9e:	2b40      	cmp	r3, #64	; 0x40
 8005ba0:	f040 80b4 	bne.w	8005d0c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005bb0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	f000 8140 	beq.w	8005e3a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005bbe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	f080 8139 	bcs.w	8005e3a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005bce:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bd4:	69db      	ldr	r3, [r3, #28]
 8005bd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bda:	f000 8088 	beq.w	8005cee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	330c      	adds	r3, #12
 8005be4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005bec:	e853 3f00 	ldrex	r3, [r3]
 8005bf0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005bf4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005bf8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bfc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	330c      	adds	r3, #12
 8005c06:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005c0a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005c0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c12:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005c16:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005c1a:	e841 2300 	strex	r3, r2, [r1]
 8005c1e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005c22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d1d9      	bne.n	8005bde <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	3314      	adds	r3, #20
 8005c30:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c34:	e853 3f00 	ldrex	r3, [r3]
 8005c38:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005c3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c3c:	f023 0301 	bic.w	r3, r3, #1
 8005c40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	3314      	adds	r3, #20
 8005c4a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005c4e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005c52:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c54:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005c56:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005c5a:	e841 2300 	strex	r3, r2, [r1]
 8005c5e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005c60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d1e1      	bne.n	8005c2a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	3314      	adds	r3, #20
 8005c6c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c70:	e853 3f00 	ldrex	r3, [r3]
 8005c74:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005c76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	3314      	adds	r3, #20
 8005c86:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005c8a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005c8c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c8e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005c90:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005c92:	e841 2300 	strex	r3, r2, [r1]
 8005c96:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005c98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d1e3      	bne.n	8005c66 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2220      	movs	r2, #32
 8005ca2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	330c      	adds	r3, #12
 8005cb2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cb6:	e853 3f00 	ldrex	r3, [r3]
 8005cba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005cbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cbe:	f023 0310 	bic.w	r3, r3, #16
 8005cc2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	330c      	adds	r3, #12
 8005ccc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005cd0:	65ba      	str	r2, [r7, #88]	; 0x58
 8005cd2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005cd6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005cd8:	e841 2300 	strex	r3, r2, [r1]
 8005cdc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005cde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d1e3      	bne.n	8005cac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f7fc feaa 	bl	8002a42 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	1ad3      	subs	r3, r2, r3
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	4619      	mov	r1, r3
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f000 f8c0 	bl	8005e84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005d04:	e099      	b.n	8005e3a <HAL_UART_IRQHandler+0x50e>
 8005d06:	bf00      	nop
 8005d08:	0800603f 	.word	0x0800603f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d14:	b29b      	uxth	r3, r3
 8005d16:	1ad3      	subs	r3, r2, r3
 8005d18:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	f000 808b 	beq.w	8005e3e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005d28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	f000 8086 	beq.w	8005e3e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	330c      	adds	r3, #12
 8005d38:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d3c:	e853 3f00 	ldrex	r3, [r3]
 8005d40:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d48:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	330c      	adds	r3, #12
 8005d52:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005d56:	647a      	str	r2, [r7, #68]	; 0x44
 8005d58:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d5a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d5c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d5e:	e841 2300 	strex	r3, r2, [r1]
 8005d62:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005d64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d1e3      	bne.n	8005d32 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	3314      	adds	r3, #20
 8005d70:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d74:	e853 3f00 	ldrex	r3, [r3]
 8005d78:	623b      	str	r3, [r7, #32]
   return(result);
 8005d7a:	6a3b      	ldr	r3, [r7, #32]
 8005d7c:	f023 0301 	bic.w	r3, r3, #1
 8005d80:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	3314      	adds	r3, #20
 8005d8a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005d8e:	633a      	str	r2, [r7, #48]	; 0x30
 8005d90:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d96:	e841 2300 	strex	r3, r2, [r1]
 8005d9a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d1e3      	bne.n	8005d6a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2220      	movs	r2, #32
 8005da6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2200      	movs	r2, #0
 8005dae:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	330c      	adds	r3, #12
 8005db6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	e853 3f00 	ldrex	r3, [r3]
 8005dbe:	60fb      	str	r3, [r7, #12]
   return(result);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f023 0310 	bic.w	r3, r3, #16
 8005dc6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	330c      	adds	r3, #12
 8005dd0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005dd4:	61fa      	str	r2, [r7, #28]
 8005dd6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd8:	69b9      	ldr	r1, [r7, #24]
 8005dda:	69fa      	ldr	r2, [r7, #28]
 8005ddc:	e841 2300 	strex	r3, r2, [r1]
 8005de0:	617b      	str	r3, [r7, #20]
   return(result);
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d1e3      	bne.n	8005db0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005de8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005dec:	4619      	mov	r1, r3
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 f848 	bl	8005e84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005df4:	e023      	b.n	8005e3e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005df6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d009      	beq.n	8005e16 <HAL_UART_IRQHandler+0x4ea>
 8005e02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d003      	beq.n	8005e16 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f000 f929 	bl	8006066 <UART_Transmit_IT>
    return;
 8005e14:	e014      	b.n	8005e40 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005e16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d00e      	beq.n	8005e40 <HAL_UART_IRQHandler+0x514>
 8005e22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d008      	beq.n	8005e40 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 f969 	bl	8006106 <UART_EndTransmit_IT>
    return;
 8005e34:	e004      	b.n	8005e40 <HAL_UART_IRQHandler+0x514>
    return;
 8005e36:	bf00      	nop
 8005e38:	e002      	b.n	8005e40 <HAL_UART_IRQHandler+0x514>
      return;
 8005e3a:	bf00      	nop
 8005e3c:	e000      	b.n	8005e40 <HAL_UART_IRQHandler+0x514>
      return;
 8005e3e:	bf00      	nop
  }
}
 8005e40:	37e8      	adds	r7, #232	; 0xe8
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
 8005e46:	bf00      	nop

08005e48 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b083      	sub	sp, #12
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005e50:	bf00      	nop
 8005e52:	370c      	adds	r7, #12
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr

08005e5c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b083      	sub	sp, #12
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005e64:	bf00      	nop
 8005e66:	370c      	adds	r7, #12
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr

08005e70 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b083      	sub	sp, #12
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005e78:	bf00      	nop
 8005e7a:	370c      	adds	r7, #12
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr

08005e84 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b083      	sub	sp, #12
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	460b      	mov	r3, r1
 8005e8e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005e90:	bf00      	nop
 8005e92:	370c      	adds	r7, #12
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b090      	sub	sp, #64	; 0x40
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	60f8      	str	r0, [r7, #12]
 8005ea4:	60b9      	str	r1, [r7, #8]
 8005ea6:	603b      	str	r3, [r7, #0]
 8005ea8:	4613      	mov	r3, r2
 8005eaa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005eac:	e050      	b.n	8005f50 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005eae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eb4:	d04c      	beq.n	8005f50 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005eb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d007      	beq.n	8005ecc <UART_WaitOnFlagUntilTimeout+0x30>
 8005ebc:	f7fc fc80 	bl	80027c0 <HAL_GetTick>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	1ad3      	subs	r3, r2, r3
 8005ec6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d241      	bcs.n	8005f50 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	330c      	adds	r3, #12
 8005ed2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed6:	e853 3f00 	ldrex	r3, [r3]
 8005eda:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ede:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	330c      	adds	r3, #12
 8005eea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005eec:	637a      	str	r2, [r7, #52]	; 0x34
 8005eee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005ef2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ef4:	e841 2300 	strex	r3, r2, [r1]
 8005ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d1e5      	bne.n	8005ecc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	3314      	adds	r3, #20
 8005f06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	e853 3f00 	ldrex	r3, [r3]
 8005f0e:	613b      	str	r3, [r7, #16]
   return(result);
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	f023 0301 	bic.w	r3, r3, #1
 8005f16:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	3314      	adds	r3, #20
 8005f1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f20:	623a      	str	r2, [r7, #32]
 8005f22:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f24:	69f9      	ldr	r1, [r7, #28]
 8005f26:	6a3a      	ldr	r2, [r7, #32]
 8005f28:	e841 2300 	strex	r3, r2, [r1]
 8005f2c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f2e:	69bb      	ldr	r3, [r7, #24]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d1e5      	bne.n	8005f00 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2220      	movs	r2, #32
 8005f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2220      	movs	r2, #32
 8005f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2200      	movs	r2, #0
 8005f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005f4c:	2303      	movs	r3, #3
 8005f4e:	e00f      	b.n	8005f70 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	4013      	ands	r3, r2
 8005f5a:	68ba      	ldr	r2, [r7, #8]
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	bf0c      	ite	eq
 8005f60:	2301      	moveq	r3, #1
 8005f62:	2300      	movne	r3, #0
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	461a      	mov	r2, r3
 8005f68:	79fb      	ldrb	r3, [r7, #7]
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	d09f      	beq.n	8005eae <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005f6e:	2300      	movs	r3, #0
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3740      	adds	r7, #64	; 0x40
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}

08005f78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b095      	sub	sp, #84	; 0x54
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	330c      	adds	r3, #12
 8005f86:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f8a:	e853 3f00 	ldrex	r3, [r3]
 8005f8e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f92:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	330c      	adds	r3, #12
 8005f9e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005fa0:	643a      	str	r2, [r7, #64]	; 0x40
 8005fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005fa6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005fa8:	e841 2300 	strex	r3, r2, [r1]
 8005fac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d1e5      	bne.n	8005f80 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	3314      	adds	r3, #20
 8005fba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fbc:	6a3b      	ldr	r3, [r7, #32]
 8005fbe:	e853 3f00 	ldrex	r3, [r3]
 8005fc2:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fc4:	69fb      	ldr	r3, [r7, #28]
 8005fc6:	f023 0301 	bic.w	r3, r3, #1
 8005fca:	64bb      	str	r3, [r7, #72]	; 0x48
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	3314      	adds	r3, #20
 8005fd2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fd4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005fd6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005fda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fdc:	e841 2300 	strex	r3, r2, [r1]
 8005fe0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d1e5      	bne.n	8005fb4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d119      	bne.n	8006024 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	330c      	adds	r3, #12
 8005ff6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	e853 3f00 	ldrex	r3, [r3]
 8005ffe:	60bb      	str	r3, [r7, #8]
   return(result);
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	f023 0310 	bic.w	r3, r3, #16
 8006006:	647b      	str	r3, [r7, #68]	; 0x44
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	330c      	adds	r3, #12
 800600e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006010:	61ba      	str	r2, [r7, #24]
 8006012:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006014:	6979      	ldr	r1, [r7, #20]
 8006016:	69ba      	ldr	r2, [r7, #24]
 8006018:	e841 2300 	strex	r3, r2, [r1]
 800601c:	613b      	str	r3, [r7, #16]
   return(result);
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d1e5      	bne.n	8005ff0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2220      	movs	r2, #32
 8006028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2200      	movs	r2, #0
 8006030:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006032:	bf00      	nop
 8006034:	3754      	adds	r7, #84	; 0x54
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr

0800603e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800603e:	b580      	push	{r7, lr}
 8006040:	b084      	sub	sp, #16
 8006042:	af00      	add	r7, sp, #0
 8006044:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800604a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2200      	movs	r2, #0
 8006050:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2200      	movs	r2, #0
 8006056:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006058:	68f8      	ldr	r0, [r7, #12]
 800605a:	f7ff ff09 	bl	8005e70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800605e:	bf00      	nop
 8006060:	3710      	adds	r7, #16
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}

08006066 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006066:	b480      	push	{r7}
 8006068:	b085      	sub	sp, #20
 800606a:	af00      	add	r7, sp, #0
 800606c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006074:	b2db      	uxtb	r3, r3
 8006076:	2b21      	cmp	r3, #33	; 0x21
 8006078:	d13e      	bne.n	80060f8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006082:	d114      	bne.n	80060ae <UART_Transmit_IT+0x48>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	691b      	ldr	r3, [r3, #16]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d110      	bne.n	80060ae <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6a1b      	ldr	r3, [r3, #32]
 8006090:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	881b      	ldrh	r3, [r3, #0]
 8006096:	461a      	mov	r2, r3
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060a0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6a1b      	ldr	r3, [r3, #32]
 80060a6:	1c9a      	adds	r2, r3, #2
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	621a      	str	r2, [r3, #32]
 80060ac:	e008      	b.n	80060c0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6a1b      	ldr	r3, [r3, #32]
 80060b2:	1c59      	adds	r1, r3, #1
 80060b4:	687a      	ldr	r2, [r7, #4]
 80060b6:	6211      	str	r1, [r2, #32]
 80060b8:	781a      	ldrb	r2, [r3, #0]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	3b01      	subs	r3, #1
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	4619      	mov	r1, r3
 80060ce:	84d1      	strh	r1, [r2, #38]	; 0x26
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d10f      	bne.n	80060f4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	68da      	ldr	r2, [r3, #12]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80060e2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	68da      	ldr	r2, [r3, #12]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060f2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80060f4:	2300      	movs	r3, #0
 80060f6:	e000      	b.n	80060fa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80060f8:	2302      	movs	r3, #2
  }
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3714      	adds	r7, #20
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr

08006106 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006106:	b580      	push	{r7, lr}
 8006108:	b082      	sub	sp, #8
 800610a:	af00      	add	r7, sp, #0
 800610c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	68da      	ldr	r2, [r3, #12]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800611c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2220      	movs	r2, #32
 8006122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f7ff fe8e 	bl	8005e48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800612c:	2300      	movs	r3, #0
}
 800612e:	4618      	mov	r0, r3
 8006130:	3708      	adds	r7, #8
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}

08006136 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006136:	b580      	push	{r7, lr}
 8006138:	b08c      	sub	sp, #48	; 0x30
 800613a:	af00      	add	r7, sp, #0
 800613c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006144:	b2db      	uxtb	r3, r3
 8006146:	2b22      	cmp	r3, #34	; 0x22
 8006148:	f040 80ab 	bne.w	80062a2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006154:	d117      	bne.n	8006186 <UART_Receive_IT+0x50>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d113      	bne.n	8006186 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800615e:	2300      	movs	r3, #0
 8006160:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006166:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	b29b      	uxth	r3, r3
 8006170:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006174:	b29a      	uxth	r2, r3
 8006176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006178:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800617e:	1c9a      	adds	r2, r3, #2
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	629a      	str	r2, [r3, #40]	; 0x28
 8006184:	e026      	b.n	80061d4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800618a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800618c:	2300      	movs	r3, #0
 800618e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006198:	d007      	beq.n	80061aa <UART_Receive_IT+0x74>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d10a      	bne.n	80061b8 <UART_Receive_IT+0x82>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	691b      	ldr	r3, [r3, #16]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d106      	bne.n	80061b8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	b2da      	uxtb	r2, r3
 80061b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061b4:	701a      	strb	r2, [r3, #0]
 80061b6:	e008      	b.n	80061ca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	b2db      	uxtb	r3, r3
 80061c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061c4:	b2da      	uxtb	r2, r3
 80061c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061c8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ce:	1c5a      	adds	r2, r3, #1
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061d8:	b29b      	uxth	r3, r3
 80061da:	3b01      	subs	r3, #1
 80061dc:	b29b      	uxth	r3, r3
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	4619      	mov	r1, r3
 80061e2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d15a      	bne.n	800629e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	68da      	ldr	r2, [r3, #12]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f022 0220 	bic.w	r2, r2, #32
 80061f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	68da      	ldr	r2, [r3, #12]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006206:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	695a      	ldr	r2, [r3, #20]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f022 0201 	bic.w	r2, r2, #1
 8006216:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2220      	movs	r2, #32
 800621c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006224:	2b01      	cmp	r3, #1
 8006226:	d135      	bne.n	8006294 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2200      	movs	r2, #0
 800622c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	330c      	adds	r3, #12
 8006234:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	e853 3f00 	ldrex	r3, [r3]
 800623c:	613b      	str	r3, [r7, #16]
   return(result);
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	f023 0310 	bic.w	r3, r3, #16
 8006244:	627b      	str	r3, [r7, #36]	; 0x24
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	330c      	adds	r3, #12
 800624c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800624e:	623a      	str	r2, [r7, #32]
 8006250:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006252:	69f9      	ldr	r1, [r7, #28]
 8006254:	6a3a      	ldr	r2, [r7, #32]
 8006256:	e841 2300 	strex	r3, r2, [r1]
 800625a:	61bb      	str	r3, [r7, #24]
   return(result);
 800625c:	69bb      	ldr	r3, [r7, #24]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d1e5      	bne.n	800622e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f003 0310 	and.w	r3, r3, #16
 800626c:	2b10      	cmp	r3, #16
 800626e:	d10a      	bne.n	8006286 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006270:	2300      	movs	r3, #0
 8006272:	60fb      	str	r3, [r7, #12]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	60fb      	str	r3, [r7, #12]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	60fb      	str	r3, [r7, #12]
 8006284:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800628a:	4619      	mov	r1, r3
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f7ff fdf9 	bl	8005e84 <HAL_UARTEx_RxEventCallback>
 8006292:	e002      	b.n	800629a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f7ff fde1 	bl	8005e5c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800629a:	2300      	movs	r3, #0
 800629c:	e002      	b.n	80062a4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800629e:	2300      	movs	r3, #0
 80062a0:	e000      	b.n	80062a4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80062a2:	2302      	movs	r3, #2
  }
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3730      	adds	r7, #48	; 0x30
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}

080062ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80062b0:	b0c0      	sub	sp, #256	; 0x100
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80062c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062c8:	68d9      	ldr	r1, [r3, #12]
 80062ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	ea40 0301 	orr.w	r3, r0, r1
 80062d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80062d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062da:	689a      	ldr	r2, [r3, #8]
 80062dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062e0:	691b      	ldr	r3, [r3, #16]
 80062e2:	431a      	orrs	r2, r3
 80062e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062e8:	695b      	ldr	r3, [r3, #20]
 80062ea:	431a      	orrs	r2, r3
 80062ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062f0:	69db      	ldr	r3, [r3, #28]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80062f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	68db      	ldr	r3, [r3, #12]
 8006300:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006304:	f021 010c 	bic.w	r1, r1, #12
 8006308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800630c:	681a      	ldr	r2, [r3, #0]
 800630e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006312:	430b      	orrs	r3, r1
 8006314:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	695b      	ldr	r3, [r3, #20]
 800631e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006326:	6999      	ldr	r1, [r3, #24]
 8006328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	ea40 0301 	orr.w	r3, r0, r1
 8006332:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	4b8f      	ldr	r3, [pc, #572]	; (8006578 <UART_SetConfig+0x2cc>)
 800633c:	429a      	cmp	r2, r3
 800633e:	d005      	beq.n	800634c <UART_SetConfig+0xa0>
 8006340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	4b8d      	ldr	r3, [pc, #564]	; (800657c <UART_SetConfig+0x2d0>)
 8006348:	429a      	cmp	r2, r3
 800634a:	d104      	bne.n	8006356 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800634c:	f7fe fb9c 	bl	8004a88 <HAL_RCC_GetPCLK2Freq>
 8006350:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006354:	e003      	b.n	800635e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006356:	f7fe fb83 	bl	8004a60 <HAL_RCC_GetPCLK1Freq>
 800635a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800635e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006362:	69db      	ldr	r3, [r3, #28]
 8006364:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006368:	f040 810c 	bne.w	8006584 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800636c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006370:	2200      	movs	r2, #0
 8006372:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006376:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800637a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800637e:	4622      	mov	r2, r4
 8006380:	462b      	mov	r3, r5
 8006382:	1891      	adds	r1, r2, r2
 8006384:	65b9      	str	r1, [r7, #88]	; 0x58
 8006386:	415b      	adcs	r3, r3
 8006388:	65fb      	str	r3, [r7, #92]	; 0x5c
 800638a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800638e:	4621      	mov	r1, r4
 8006390:	eb12 0801 	adds.w	r8, r2, r1
 8006394:	4629      	mov	r1, r5
 8006396:	eb43 0901 	adc.w	r9, r3, r1
 800639a:	f04f 0200 	mov.w	r2, #0
 800639e:	f04f 0300 	mov.w	r3, #0
 80063a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80063a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80063aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80063ae:	4690      	mov	r8, r2
 80063b0:	4699      	mov	r9, r3
 80063b2:	4623      	mov	r3, r4
 80063b4:	eb18 0303 	adds.w	r3, r8, r3
 80063b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80063bc:	462b      	mov	r3, r5
 80063be:	eb49 0303 	adc.w	r3, r9, r3
 80063c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80063c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80063d2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80063d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80063da:	460b      	mov	r3, r1
 80063dc:	18db      	adds	r3, r3, r3
 80063de:	653b      	str	r3, [r7, #80]	; 0x50
 80063e0:	4613      	mov	r3, r2
 80063e2:	eb42 0303 	adc.w	r3, r2, r3
 80063e6:	657b      	str	r3, [r7, #84]	; 0x54
 80063e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80063ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80063f0:	f7f9 ff46 	bl	8000280 <__aeabi_uldivmod>
 80063f4:	4602      	mov	r2, r0
 80063f6:	460b      	mov	r3, r1
 80063f8:	4b61      	ldr	r3, [pc, #388]	; (8006580 <UART_SetConfig+0x2d4>)
 80063fa:	fba3 2302 	umull	r2, r3, r3, r2
 80063fe:	095b      	lsrs	r3, r3, #5
 8006400:	011c      	lsls	r4, r3, #4
 8006402:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006406:	2200      	movs	r2, #0
 8006408:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800640c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006410:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006414:	4642      	mov	r2, r8
 8006416:	464b      	mov	r3, r9
 8006418:	1891      	adds	r1, r2, r2
 800641a:	64b9      	str	r1, [r7, #72]	; 0x48
 800641c:	415b      	adcs	r3, r3
 800641e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006420:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006424:	4641      	mov	r1, r8
 8006426:	eb12 0a01 	adds.w	sl, r2, r1
 800642a:	4649      	mov	r1, r9
 800642c:	eb43 0b01 	adc.w	fp, r3, r1
 8006430:	f04f 0200 	mov.w	r2, #0
 8006434:	f04f 0300 	mov.w	r3, #0
 8006438:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800643c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006440:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006444:	4692      	mov	sl, r2
 8006446:	469b      	mov	fp, r3
 8006448:	4643      	mov	r3, r8
 800644a:	eb1a 0303 	adds.w	r3, sl, r3
 800644e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006452:	464b      	mov	r3, r9
 8006454:	eb4b 0303 	adc.w	r3, fp, r3
 8006458:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800645c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	2200      	movs	r2, #0
 8006464:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006468:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800646c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006470:	460b      	mov	r3, r1
 8006472:	18db      	adds	r3, r3, r3
 8006474:	643b      	str	r3, [r7, #64]	; 0x40
 8006476:	4613      	mov	r3, r2
 8006478:	eb42 0303 	adc.w	r3, r2, r3
 800647c:	647b      	str	r3, [r7, #68]	; 0x44
 800647e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006482:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006486:	f7f9 fefb 	bl	8000280 <__aeabi_uldivmod>
 800648a:	4602      	mov	r2, r0
 800648c:	460b      	mov	r3, r1
 800648e:	4611      	mov	r1, r2
 8006490:	4b3b      	ldr	r3, [pc, #236]	; (8006580 <UART_SetConfig+0x2d4>)
 8006492:	fba3 2301 	umull	r2, r3, r3, r1
 8006496:	095b      	lsrs	r3, r3, #5
 8006498:	2264      	movs	r2, #100	; 0x64
 800649a:	fb02 f303 	mul.w	r3, r2, r3
 800649e:	1acb      	subs	r3, r1, r3
 80064a0:	00db      	lsls	r3, r3, #3
 80064a2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80064a6:	4b36      	ldr	r3, [pc, #216]	; (8006580 <UART_SetConfig+0x2d4>)
 80064a8:	fba3 2302 	umull	r2, r3, r3, r2
 80064ac:	095b      	lsrs	r3, r3, #5
 80064ae:	005b      	lsls	r3, r3, #1
 80064b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80064b4:	441c      	add	r4, r3
 80064b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064ba:	2200      	movs	r2, #0
 80064bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80064c0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80064c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80064c8:	4642      	mov	r2, r8
 80064ca:	464b      	mov	r3, r9
 80064cc:	1891      	adds	r1, r2, r2
 80064ce:	63b9      	str	r1, [r7, #56]	; 0x38
 80064d0:	415b      	adcs	r3, r3
 80064d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80064d8:	4641      	mov	r1, r8
 80064da:	1851      	adds	r1, r2, r1
 80064dc:	6339      	str	r1, [r7, #48]	; 0x30
 80064de:	4649      	mov	r1, r9
 80064e0:	414b      	adcs	r3, r1
 80064e2:	637b      	str	r3, [r7, #52]	; 0x34
 80064e4:	f04f 0200 	mov.w	r2, #0
 80064e8:	f04f 0300 	mov.w	r3, #0
 80064ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80064f0:	4659      	mov	r1, fp
 80064f2:	00cb      	lsls	r3, r1, #3
 80064f4:	4651      	mov	r1, sl
 80064f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064fa:	4651      	mov	r1, sl
 80064fc:	00ca      	lsls	r2, r1, #3
 80064fe:	4610      	mov	r0, r2
 8006500:	4619      	mov	r1, r3
 8006502:	4603      	mov	r3, r0
 8006504:	4642      	mov	r2, r8
 8006506:	189b      	adds	r3, r3, r2
 8006508:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800650c:	464b      	mov	r3, r9
 800650e:	460a      	mov	r2, r1
 8006510:	eb42 0303 	adc.w	r3, r2, r3
 8006514:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	2200      	movs	r2, #0
 8006520:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006524:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006528:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800652c:	460b      	mov	r3, r1
 800652e:	18db      	adds	r3, r3, r3
 8006530:	62bb      	str	r3, [r7, #40]	; 0x28
 8006532:	4613      	mov	r3, r2
 8006534:	eb42 0303 	adc.w	r3, r2, r3
 8006538:	62fb      	str	r3, [r7, #44]	; 0x2c
 800653a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800653e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006542:	f7f9 fe9d 	bl	8000280 <__aeabi_uldivmod>
 8006546:	4602      	mov	r2, r0
 8006548:	460b      	mov	r3, r1
 800654a:	4b0d      	ldr	r3, [pc, #52]	; (8006580 <UART_SetConfig+0x2d4>)
 800654c:	fba3 1302 	umull	r1, r3, r3, r2
 8006550:	095b      	lsrs	r3, r3, #5
 8006552:	2164      	movs	r1, #100	; 0x64
 8006554:	fb01 f303 	mul.w	r3, r1, r3
 8006558:	1ad3      	subs	r3, r2, r3
 800655a:	00db      	lsls	r3, r3, #3
 800655c:	3332      	adds	r3, #50	; 0x32
 800655e:	4a08      	ldr	r2, [pc, #32]	; (8006580 <UART_SetConfig+0x2d4>)
 8006560:	fba2 2303 	umull	r2, r3, r2, r3
 8006564:	095b      	lsrs	r3, r3, #5
 8006566:	f003 0207 	and.w	r2, r3, #7
 800656a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4422      	add	r2, r4
 8006572:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006574:	e105      	b.n	8006782 <UART_SetConfig+0x4d6>
 8006576:	bf00      	nop
 8006578:	40011000 	.word	0x40011000
 800657c:	40011400 	.word	0x40011400
 8006580:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006584:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006588:	2200      	movs	r2, #0
 800658a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800658e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006592:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006596:	4642      	mov	r2, r8
 8006598:	464b      	mov	r3, r9
 800659a:	1891      	adds	r1, r2, r2
 800659c:	6239      	str	r1, [r7, #32]
 800659e:	415b      	adcs	r3, r3
 80065a0:	627b      	str	r3, [r7, #36]	; 0x24
 80065a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80065a6:	4641      	mov	r1, r8
 80065a8:	1854      	adds	r4, r2, r1
 80065aa:	4649      	mov	r1, r9
 80065ac:	eb43 0501 	adc.w	r5, r3, r1
 80065b0:	f04f 0200 	mov.w	r2, #0
 80065b4:	f04f 0300 	mov.w	r3, #0
 80065b8:	00eb      	lsls	r3, r5, #3
 80065ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80065be:	00e2      	lsls	r2, r4, #3
 80065c0:	4614      	mov	r4, r2
 80065c2:	461d      	mov	r5, r3
 80065c4:	4643      	mov	r3, r8
 80065c6:	18e3      	adds	r3, r4, r3
 80065c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80065cc:	464b      	mov	r3, r9
 80065ce:	eb45 0303 	adc.w	r3, r5, r3
 80065d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80065d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	2200      	movs	r2, #0
 80065de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80065e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80065e6:	f04f 0200 	mov.w	r2, #0
 80065ea:	f04f 0300 	mov.w	r3, #0
 80065ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80065f2:	4629      	mov	r1, r5
 80065f4:	008b      	lsls	r3, r1, #2
 80065f6:	4621      	mov	r1, r4
 80065f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80065fc:	4621      	mov	r1, r4
 80065fe:	008a      	lsls	r2, r1, #2
 8006600:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006604:	f7f9 fe3c 	bl	8000280 <__aeabi_uldivmod>
 8006608:	4602      	mov	r2, r0
 800660a:	460b      	mov	r3, r1
 800660c:	4b60      	ldr	r3, [pc, #384]	; (8006790 <UART_SetConfig+0x4e4>)
 800660e:	fba3 2302 	umull	r2, r3, r3, r2
 8006612:	095b      	lsrs	r3, r3, #5
 8006614:	011c      	lsls	r4, r3, #4
 8006616:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800661a:	2200      	movs	r2, #0
 800661c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006620:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006624:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006628:	4642      	mov	r2, r8
 800662a:	464b      	mov	r3, r9
 800662c:	1891      	adds	r1, r2, r2
 800662e:	61b9      	str	r1, [r7, #24]
 8006630:	415b      	adcs	r3, r3
 8006632:	61fb      	str	r3, [r7, #28]
 8006634:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006638:	4641      	mov	r1, r8
 800663a:	1851      	adds	r1, r2, r1
 800663c:	6139      	str	r1, [r7, #16]
 800663e:	4649      	mov	r1, r9
 8006640:	414b      	adcs	r3, r1
 8006642:	617b      	str	r3, [r7, #20]
 8006644:	f04f 0200 	mov.w	r2, #0
 8006648:	f04f 0300 	mov.w	r3, #0
 800664c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006650:	4659      	mov	r1, fp
 8006652:	00cb      	lsls	r3, r1, #3
 8006654:	4651      	mov	r1, sl
 8006656:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800665a:	4651      	mov	r1, sl
 800665c:	00ca      	lsls	r2, r1, #3
 800665e:	4610      	mov	r0, r2
 8006660:	4619      	mov	r1, r3
 8006662:	4603      	mov	r3, r0
 8006664:	4642      	mov	r2, r8
 8006666:	189b      	adds	r3, r3, r2
 8006668:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800666c:	464b      	mov	r3, r9
 800666e:	460a      	mov	r2, r1
 8006670:	eb42 0303 	adc.w	r3, r2, r3
 8006674:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	67bb      	str	r3, [r7, #120]	; 0x78
 8006682:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006684:	f04f 0200 	mov.w	r2, #0
 8006688:	f04f 0300 	mov.w	r3, #0
 800668c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006690:	4649      	mov	r1, r9
 8006692:	008b      	lsls	r3, r1, #2
 8006694:	4641      	mov	r1, r8
 8006696:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800669a:	4641      	mov	r1, r8
 800669c:	008a      	lsls	r2, r1, #2
 800669e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80066a2:	f7f9 fded 	bl	8000280 <__aeabi_uldivmod>
 80066a6:	4602      	mov	r2, r0
 80066a8:	460b      	mov	r3, r1
 80066aa:	4b39      	ldr	r3, [pc, #228]	; (8006790 <UART_SetConfig+0x4e4>)
 80066ac:	fba3 1302 	umull	r1, r3, r3, r2
 80066b0:	095b      	lsrs	r3, r3, #5
 80066b2:	2164      	movs	r1, #100	; 0x64
 80066b4:	fb01 f303 	mul.w	r3, r1, r3
 80066b8:	1ad3      	subs	r3, r2, r3
 80066ba:	011b      	lsls	r3, r3, #4
 80066bc:	3332      	adds	r3, #50	; 0x32
 80066be:	4a34      	ldr	r2, [pc, #208]	; (8006790 <UART_SetConfig+0x4e4>)
 80066c0:	fba2 2303 	umull	r2, r3, r2, r3
 80066c4:	095b      	lsrs	r3, r3, #5
 80066c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80066ca:	441c      	add	r4, r3
 80066cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066d0:	2200      	movs	r2, #0
 80066d2:	673b      	str	r3, [r7, #112]	; 0x70
 80066d4:	677a      	str	r2, [r7, #116]	; 0x74
 80066d6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80066da:	4642      	mov	r2, r8
 80066dc:	464b      	mov	r3, r9
 80066de:	1891      	adds	r1, r2, r2
 80066e0:	60b9      	str	r1, [r7, #8]
 80066e2:	415b      	adcs	r3, r3
 80066e4:	60fb      	str	r3, [r7, #12]
 80066e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80066ea:	4641      	mov	r1, r8
 80066ec:	1851      	adds	r1, r2, r1
 80066ee:	6039      	str	r1, [r7, #0]
 80066f0:	4649      	mov	r1, r9
 80066f2:	414b      	adcs	r3, r1
 80066f4:	607b      	str	r3, [r7, #4]
 80066f6:	f04f 0200 	mov.w	r2, #0
 80066fa:	f04f 0300 	mov.w	r3, #0
 80066fe:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006702:	4659      	mov	r1, fp
 8006704:	00cb      	lsls	r3, r1, #3
 8006706:	4651      	mov	r1, sl
 8006708:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800670c:	4651      	mov	r1, sl
 800670e:	00ca      	lsls	r2, r1, #3
 8006710:	4610      	mov	r0, r2
 8006712:	4619      	mov	r1, r3
 8006714:	4603      	mov	r3, r0
 8006716:	4642      	mov	r2, r8
 8006718:	189b      	adds	r3, r3, r2
 800671a:	66bb      	str	r3, [r7, #104]	; 0x68
 800671c:	464b      	mov	r3, r9
 800671e:	460a      	mov	r2, r1
 8006720:	eb42 0303 	adc.w	r3, r2, r3
 8006724:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006726:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	2200      	movs	r2, #0
 800672e:	663b      	str	r3, [r7, #96]	; 0x60
 8006730:	667a      	str	r2, [r7, #100]	; 0x64
 8006732:	f04f 0200 	mov.w	r2, #0
 8006736:	f04f 0300 	mov.w	r3, #0
 800673a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800673e:	4649      	mov	r1, r9
 8006740:	008b      	lsls	r3, r1, #2
 8006742:	4641      	mov	r1, r8
 8006744:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006748:	4641      	mov	r1, r8
 800674a:	008a      	lsls	r2, r1, #2
 800674c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006750:	f7f9 fd96 	bl	8000280 <__aeabi_uldivmod>
 8006754:	4602      	mov	r2, r0
 8006756:	460b      	mov	r3, r1
 8006758:	4b0d      	ldr	r3, [pc, #52]	; (8006790 <UART_SetConfig+0x4e4>)
 800675a:	fba3 1302 	umull	r1, r3, r3, r2
 800675e:	095b      	lsrs	r3, r3, #5
 8006760:	2164      	movs	r1, #100	; 0x64
 8006762:	fb01 f303 	mul.w	r3, r1, r3
 8006766:	1ad3      	subs	r3, r2, r3
 8006768:	011b      	lsls	r3, r3, #4
 800676a:	3332      	adds	r3, #50	; 0x32
 800676c:	4a08      	ldr	r2, [pc, #32]	; (8006790 <UART_SetConfig+0x4e4>)
 800676e:	fba2 2303 	umull	r2, r3, r2, r3
 8006772:	095b      	lsrs	r3, r3, #5
 8006774:	f003 020f 	and.w	r2, r3, #15
 8006778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4422      	add	r2, r4
 8006780:	609a      	str	r2, [r3, #8]
}
 8006782:	bf00      	nop
 8006784:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006788:	46bd      	mov	sp, r7
 800678a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800678e:	bf00      	nop
 8006790:	51eb851f 	.word	0x51eb851f

08006794 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8006794:	b480      	push	{r7}
 8006796:	b087      	sub	sp, #28
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
 800679c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	681a      	ldr	r2, [r3, #0]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067a8:	683a      	ldr	r2, [r7, #0]
 80067aa:	6812      	ldr	r2, [r2, #0]
 80067ac:	f023 0101 	bic.w	r1, r3, #1
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	2b08      	cmp	r3, #8
 80067bc:	d102      	bne.n	80067c4 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80067be:	2340      	movs	r3, #64	; 0x40
 80067c0:	617b      	str	r3, [r7, #20]
 80067c2:	e001      	b.n	80067c8 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80067c4:	2300      	movs	r3, #0
 80067c6:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80067d4:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80067da:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80067e0:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80067e6:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 80067ec:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 80067f2:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 80067f8:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 80067fe:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8006804:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 800680a:	4313      	orrs	r3, r2
 800680c:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	699b      	ldr	r3, [r3, #24]
 8006812:	693a      	ldr	r2, [r7, #16]
 8006814:	4313      	orrs	r3, r2
 8006816:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800681c:	693a      	ldr	r2, [r7, #16]
 800681e:	4313      	orrs	r3, r2
 8006820:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 8006822:	4b10      	ldr	r3, [pc, #64]	; (8006864 <FSMC_NORSRAM_Init+0xd0>)
 8006824:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800682c:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8006834:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	43db      	mvns	r3, r3
 8006844:	ea02 0103 	and.w	r1, r2, r3
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	4319      	orrs	r1, r3
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 8006856:	2300      	movs	r3, #0
}
 8006858:	4618      	mov	r0, r3
 800685a:	371c      	adds	r7, #28
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr
 8006864:	0008fb7f 	.word	0x0008fb7f

08006868 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006868:	b480      	push	{r7}
 800686a:	b085      	sub	sp, #20
 800686c:	af00      	add	r7, sp, #0
 800686e:	60f8      	str	r0, [r7, #12]
 8006870:	60b9      	str	r1, [r7, #8]
 8006872:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	1c5a      	adds	r2, r3, #1
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800687e:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	681a      	ldr	r2, [r3, #0]
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	011b      	lsls	r3, r3, #4
 800688c:	431a      	orrs	r2, r3
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	689b      	ldr	r3, [r3, #8]
 8006892:	021b      	lsls	r3, r3, #8
 8006894:	431a      	orrs	r2, r3
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	68db      	ldr	r3, [r3, #12]
 800689a:	041b      	lsls	r3, r3, #16
 800689c:	431a      	orrs	r2, r3
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	691b      	ldr	r3, [r3, #16]
 80068a2:	3b01      	subs	r3, #1
 80068a4:	051b      	lsls	r3, r3, #20
 80068a6:	431a      	orrs	r2, r3
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	695b      	ldr	r3, [r3, #20]
 80068ac:	3b02      	subs	r3, #2
 80068ae:	061b      	lsls	r3, r3, #24
 80068b0:	431a      	orrs	r2, r3
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	699b      	ldr	r3, [r3, #24]
 80068b6:	4313      	orrs	r3, r2
 80068b8:	687a      	ldr	r2, [r7, #4]
 80068ba:	3201      	adds	r2, #1
 80068bc:	4319      	orrs	r1, r3
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 80068c4:	2300      	movs	r3, #0
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3714      	adds	r7, #20
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr
	...

080068d4 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b085      	sub	sp, #20
 80068d8:	af00      	add	r7, sp, #0
 80068da:	60f8      	str	r0, [r7, #12]
 80068dc:	60b9      	str	r1, [r7, #8]
 80068de:	607a      	str	r2, [r7, #4]
 80068e0:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80068e8:	d11d      	bne.n	8006926 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	687a      	ldr	r2, [r7, #4]
 80068ee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80068f2:	4b13      	ldr	r3, [pc, #76]	; (8006940 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 80068f4:	4013      	ands	r3, r2
 80068f6:	68ba      	ldr	r2, [r7, #8]
 80068f8:	6811      	ldr	r1, [r2, #0]
 80068fa:	68ba      	ldr	r2, [r7, #8]
 80068fc:	6852      	ldr	r2, [r2, #4]
 80068fe:	0112      	lsls	r2, r2, #4
 8006900:	4311      	orrs	r1, r2
 8006902:	68ba      	ldr	r2, [r7, #8]
 8006904:	6892      	ldr	r2, [r2, #8]
 8006906:	0212      	lsls	r2, r2, #8
 8006908:	4311      	orrs	r1, r2
 800690a:	68ba      	ldr	r2, [r7, #8]
 800690c:	6992      	ldr	r2, [r2, #24]
 800690e:	4311      	orrs	r1, r2
 8006910:	68ba      	ldr	r2, [r7, #8]
 8006912:	68d2      	ldr	r2, [r2, #12]
 8006914:	0412      	lsls	r2, r2, #16
 8006916:	430a      	orrs	r2, r1
 8006918:	ea43 0102 	orr.w	r1, r3, r2
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006924:	e005      	b.n	8006932 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	687a      	ldr	r2, [r7, #4]
 800692a:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800692e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8006932:	2300      	movs	r3, #0
}
 8006934:	4618      	mov	r0, r3
 8006936:	3714      	adds	r7, #20
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr
 8006940:	cff00000 	.word	0xcff00000

08006944 <__errno>:
 8006944:	4b01      	ldr	r3, [pc, #4]	; (800694c <__errno+0x8>)
 8006946:	6818      	ldr	r0, [r3, #0]
 8006948:	4770      	bx	lr
 800694a:	bf00      	nop
 800694c:	20000014 	.word	0x20000014

08006950 <__libc_init_array>:
 8006950:	b570      	push	{r4, r5, r6, lr}
 8006952:	4d0d      	ldr	r5, [pc, #52]	; (8006988 <__libc_init_array+0x38>)
 8006954:	4c0d      	ldr	r4, [pc, #52]	; (800698c <__libc_init_array+0x3c>)
 8006956:	1b64      	subs	r4, r4, r5
 8006958:	10a4      	asrs	r4, r4, #2
 800695a:	2600      	movs	r6, #0
 800695c:	42a6      	cmp	r6, r4
 800695e:	d109      	bne.n	8006974 <__libc_init_array+0x24>
 8006960:	4d0b      	ldr	r5, [pc, #44]	; (8006990 <__libc_init_array+0x40>)
 8006962:	4c0c      	ldr	r4, [pc, #48]	; (8006994 <__libc_init_array+0x44>)
 8006964:	f001 fa00 	bl	8007d68 <_init>
 8006968:	1b64      	subs	r4, r4, r5
 800696a:	10a4      	asrs	r4, r4, #2
 800696c:	2600      	movs	r6, #0
 800696e:	42a6      	cmp	r6, r4
 8006970:	d105      	bne.n	800697e <__libc_init_array+0x2e>
 8006972:	bd70      	pop	{r4, r5, r6, pc}
 8006974:	f855 3b04 	ldr.w	r3, [r5], #4
 8006978:	4798      	blx	r3
 800697a:	3601      	adds	r6, #1
 800697c:	e7ee      	b.n	800695c <__libc_init_array+0xc>
 800697e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006982:	4798      	blx	r3
 8006984:	3601      	adds	r6, #1
 8006986:	e7f2      	b.n	800696e <__libc_init_array+0x1e>
 8006988:	08008110 	.word	0x08008110
 800698c:	08008110 	.word	0x08008110
 8006990:	08008110 	.word	0x08008110
 8006994:	08008114 	.word	0x08008114

08006998 <memcpy>:
 8006998:	440a      	add	r2, r1
 800699a:	4291      	cmp	r1, r2
 800699c:	f100 33ff 	add.w	r3, r0, #4294967295
 80069a0:	d100      	bne.n	80069a4 <memcpy+0xc>
 80069a2:	4770      	bx	lr
 80069a4:	b510      	push	{r4, lr}
 80069a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80069ae:	4291      	cmp	r1, r2
 80069b0:	d1f9      	bne.n	80069a6 <memcpy+0xe>
 80069b2:	bd10      	pop	{r4, pc}

080069b4 <memset>:
 80069b4:	4402      	add	r2, r0
 80069b6:	4603      	mov	r3, r0
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d100      	bne.n	80069be <memset+0xa>
 80069bc:	4770      	bx	lr
 80069be:	f803 1b01 	strb.w	r1, [r3], #1
 80069c2:	e7f9      	b.n	80069b8 <memset+0x4>

080069c4 <iprintf>:
 80069c4:	b40f      	push	{r0, r1, r2, r3}
 80069c6:	4b0a      	ldr	r3, [pc, #40]	; (80069f0 <iprintf+0x2c>)
 80069c8:	b513      	push	{r0, r1, r4, lr}
 80069ca:	681c      	ldr	r4, [r3, #0]
 80069cc:	b124      	cbz	r4, 80069d8 <iprintf+0x14>
 80069ce:	69a3      	ldr	r3, [r4, #24]
 80069d0:	b913      	cbnz	r3, 80069d8 <iprintf+0x14>
 80069d2:	4620      	mov	r0, r4
 80069d4:	f000 fa7e 	bl	8006ed4 <__sinit>
 80069d8:	ab05      	add	r3, sp, #20
 80069da:	9a04      	ldr	r2, [sp, #16]
 80069dc:	68a1      	ldr	r1, [r4, #8]
 80069de:	9301      	str	r3, [sp, #4]
 80069e0:	4620      	mov	r0, r4
 80069e2:	f000 fde3 	bl	80075ac <_vfiprintf_r>
 80069e6:	b002      	add	sp, #8
 80069e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069ec:	b004      	add	sp, #16
 80069ee:	4770      	bx	lr
 80069f0:	20000014 	.word	0x20000014

080069f4 <_puts_r>:
 80069f4:	b570      	push	{r4, r5, r6, lr}
 80069f6:	460e      	mov	r6, r1
 80069f8:	4605      	mov	r5, r0
 80069fa:	b118      	cbz	r0, 8006a04 <_puts_r+0x10>
 80069fc:	6983      	ldr	r3, [r0, #24]
 80069fe:	b90b      	cbnz	r3, 8006a04 <_puts_r+0x10>
 8006a00:	f000 fa68 	bl	8006ed4 <__sinit>
 8006a04:	69ab      	ldr	r3, [r5, #24]
 8006a06:	68ac      	ldr	r4, [r5, #8]
 8006a08:	b913      	cbnz	r3, 8006a10 <_puts_r+0x1c>
 8006a0a:	4628      	mov	r0, r5
 8006a0c:	f000 fa62 	bl	8006ed4 <__sinit>
 8006a10:	4b2c      	ldr	r3, [pc, #176]	; (8006ac4 <_puts_r+0xd0>)
 8006a12:	429c      	cmp	r4, r3
 8006a14:	d120      	bne.n	8006a58 <_puts_r+0x64>
 8006a16:	686c      	ldr	r4, [r5, #4]
 8006a18:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a1a:	07db      	lsls	r3, r3, #31
 8006a1c:	d405      	bmi.n	8006a2a <_puts_r+0x36>
 8006a1e:	89a3      	ldrh	r3, [r4, #12]
 8006a20:	0598      	lsls	r0, r3, #22
 8006a22:	d402      	bmi.n	8006a2a <_puts_r+0x36>
 8006a24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a26:	f000 faf3 	bl	8007010 <__retarget_lock_acquire_recursive>
 8006a2a:	89a3      	ldrh	r3, [r4, #12]
 8006a2c:	0719      	lsls	r1, r3, #28
 8006a2e:	d51d      	bpl.n	8006a6c <_puts_r+0x78>
 8006a30:	6923      	ldr	r3, [r4, #16]
 8006a32:	b1db      	cbz	r3, 8006a6c <_puts_r+0x78>
 8006a34:	3e01      	subs	r6, #1
 8006a36:	68a3      	ldr	r3, [r4, #8]
 8006a38:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006a3c:	3b01      	subs	r3, #1
 8006a3e:	60a3      	str	r3, [r4, #8]
 8006a40:	bb39      	cbnz	r1, 8006a92 <_puts_r+0x9e>
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	da38      	bge.n	8006ab8 <_puts_r+0xc4>
 8006a46:	4622      	mov	r2, r4
 8006a48:	210a      	movs	r1, #10
 8006a4a:	4628      	mov	r0, r5
 8006a4c:	f000 f868 	bl	8006b20 <__swbuf_r>
 8006a50:	3001      	adds	r0, #1
 8006a52:	d011      	beq.n	8006a78 <_puts_r+0x84>
 8006a54:	250a      	movs	r5, #10
 8006a56:	e011      	b.n	8006a7c <_puts_r+0x88>
 8006a58:	4b1b      	ldr	r3, [pc, #108]	; (8006ac8 <_puts_r+0xd4>)
 8006a5a:	429c      	cmp	r4, r3
 8006a5c:	d101      	bne.n	8006a62 <_puts_r+0x6e>
 8006a5e:	68ac      	ldr	r4, [r5, #8]
 8006a60:	e7da      	b.n	8006a18 <_puts_r+0x24>
 8006a62:	4b1a      	ldr	r3, [pc, #104]	; (8006acc <_puts_r+0xd8>)
 8006a64:	429c      	cmp	r4, r3
 8006a66:	bf08      	it	eq
 8006a68:	68ec      	ldreq	r4, [r5, #12]
 8006a6a:	e7d5      	b.n	8006a18 <_puts_r+0x24>
 8006a6c:	4621      	mov	r1, r4
 8006a6e:	4628      	mov	r0, r5
 8006a70:	f000 f8a8 	bl	8006bc4 <__swsetup_r>
 8006a74:	2800      	cmp	r0, #0
 8006a76:	d0dd      	beq.n	8006a34 <_puts_r+0x40>
 8006a78:	f04f 35ff 	mov.w	r5, #4294967295
 8006a7c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a7e:	07da      	lsls	r2, r3, #31
 8006a80:	d405      	bmi.n	8006a8e <_puts_r+0x9a>
 8006a82:	89a3      	ldrh	r3, [r4, #12]
 8006a84:	059b      	lsls	r3, r3, #22
 8006a86:	d402      	bmi.n	8006a8e <_puts_r+0x9a>
 8006a88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a8a:	f000 fac2 	bl	8007012 <__retarget_lock_release_recursive>
 8006a8e:	4628      	mov	r0, r5
 8006a90:	bd70      	pop	{r4, r5, r6, pc}
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	da04      	bge.n	8006aa0 <_puts_r+0xac>
 8006a96:	69a2      	ldr	r2, [r4, #24]
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	dc06      	bgt.n	8006aaa <_puts_r+0xb6>
 8006a9c:	290a      	cmp	r1, #10
 8006a9e:	d004      	beq.n	8006aaa <_puts_r+0xb6>
 8006aa0:	6823      	ldr	r3, [r4, #0]
 8006aa2:	1c5a      	adds	r2, r3, #1
 8006aa4:	6022      	str	r2, [r4, #0]
 8006aa6:	7019      	strb	r1, [r3, #0]
 8006aa8:	e7c5      	b.n	8006a36 <_puts_r+0x42>
 8006aaa:	4622      	mov	r2, r4
 8006aac:	4628      	mov	r0, r5
 8006aae:	f000 f837 	bl	8006b20 <__swbuf_r>
 8006ab2:	3001      	adds	r0, #1
 8006ab4:	d1bf      	bne.n	8006a36 <_puts_r+0x42>
 8006ab6:	e7df      	b.n	8006a78 <_puts_r+0x84>
 8006ab8:	6823      	ldr	r3, [r4, #0]
 8006aba:	250a      	movs	r5, #10
 8006abc:	1c5a      	adds	r2, r3, #1
 8006abe:	6022      	str	r2, [r4, #0]
 8006ac0:	701d      	strb	r5, [r3, #0]
 8006ac2:	e7db      	b.n	8006a7c <_puts_r+0x88>
 8006ac4:	08008094 	.word	0x08008094
 8006ac8:	080080b4 	.word	0x080080b4
 8006acc:	08008074 	.word	0x08008074

08006ad0 <puts>:
 8006ad0:	4b02      	ldr	r3, [pc, #8]	; (8006adc <puts+0xc>)
 8006ad2:	4601      	mov	r1, r0
 8006ad4:	6818      	ldr	r0, [r3, #0]
 8006ad6:	f7ff bf8d 	b.w	80069f4 <_puts_r>
 8006ada:	bf00      	nop
 8006adc:	20000014 	.word	0x20000014

08006ae0 <siprintf>:
 8006ae0:	b40e      	push	{r1, r2, r3}
 8006ae2:	b500      	push	{lr}
 8006ae4:	b09c      	sub	sp, #112	; 0x70
 8006ae6:	ab1d      	add	r3, sp, #116	; 0x74
 8006ae8:	9002      	str	r0, [sp, #8]
 8006aea:	9006      	str	r0, [sp, #24]
 8006aec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006af0:	4809      	ldr	r0, [pc, #36]	; (8006b18 <siprintf+0x38>)
 8006af2:	9107      	str	r1, [sp, #28]
 8006af4:	9104      	str	r1, [sp, #16]
 8006af6:	4909      	ldr	r1, [pc, #36]	; (8006b1c <siprintf+0x3c>)
 8006af8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006afc:	9105      	str	r1, [sp, #20]
 8006afe:	6800      	ldr	r0, [r0, #0]
 8006b00:	9301      	str	r3, [sp, #4]
 8006b02:	a902      	add	r1, sp, #8
 8006b04:	f000 fc28 	bl	8007358 <_svfiprintf_r>
 8006b08:	9b02      	ldr	r3, [sp, #8]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	701a      	strb	r2, [r3, #0]
 8006b0e:	b01c      	add	sp, #112	; 0x70
 8006b10:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b14:	b003      	add	sp, #12
 8006b16:	4770      	bx	lr
 8006b18:	20000014 	.word	0x20000014
 8006b1c:	ffff0208 	.word	0xffff0208

08006b20 <__swbuf_r>:
 8006b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b22:	460e      	mov	r6, r1
 8006b24:	4614      	mov	r4, r2
 8006b26:	4605      	mov	r5, r0
 8006b28:	b118      	cbz	r0, 8006b32 <__swbuf_r+0x12>
 8006b2a:	6983      	ldr	r3, [r0, #24]
 8006b2c:	b90b      	cbnz	r3, 8006b32 <__swbuf_r+0x12>
 8006b2e:	f000 f9d1 	bl	8006ed4 <__sinit>
 8006b32:	4b21      	ldr	r3, [pc, #132]	; (8006bb8 <__swbuf_r+0x98>)
 8006b34:	429c      	cmp	r4, r3
 8006b36:	d12b      	bne.n	8006b90 <__swbuf_r+0x70>
 8006b38:	686c      	ldr	r4, [r5, #4]
 8006b3a:	69a3      	ldr	r3, [r4, #24]
 8006b3c:	60a3      	str	r3, [r4, #8]
 8006b3e:	89a3      	ldrh	r3, [r4, #12]
 8006b40:	071a      	lsls	r2, r3, #28
 8006b42:	d52f      	bpl.n	8006ba4 <__swbuf_r+0x84>
 8006b44:	6923      	ldr	r3, [r4, #16]
 8006b46:	b36b      	cbz	r3, 8006ba4 <__swbuf_r+0x84>
 8006b48:	6923      	ldr	r3, [r4, #16]
 8006b4a:	6820      	ldr	r0, [r4, #0]
 8006b4c:	1ac0      	subs	r0, r0, r3
 8006b4e:	6963      	ldr	r3, [r4, #20]
 8006b50:	b2f6      	uxtb	r6, r6
 8006b52:	4283      	cmp	r3, r0
 8006b54:	4637      	mov	r7, r6
 8006b56:	dc04      	bgt.n	8006b62 <__swbuf_r+0x42>
 8006b58:	4621      	mov	r1, r4
 8006b5a:	4628      	mov	r0, r5
 8006b5c:	f000 f926 	bl	8006dac <_fflush_r>
 8006b60:	bb30      	cbnz	r0, 8006bb0 <__swbuf_r+0x90>
 8006b62:	68a3      	ldr	r3, [r4, #8]
 8006b64:	3b01      	subs	r3, #1
 8006b66:	60a3      	str	r3, [r4, #8]
 8006b68:	6823      	ldr	r3, [r4, #0]
 8006b6a:	1c5a      	adds	r2, r3, #1
 8006b6c:	6022      	str	r2, [r4, #0]
 8006b6e:	701e      	strb	r6, [r3, #0]
 8006b70:	6963      	ldr	r3, [r4, #20]
 8006b72:	3001      	adds	r0, #1
 8006b74:	4283      	cmp	r3, r0
 8006b76:	d004      	beq.n	8006b82 <__swbuf_r+0x62>
 8006b78:	89a3      	ldrh	r3, [r4, #12]
 8006b7a:	07db      	lsls	r3, r3, #31
 8006b7c:	d506      	bpl.n	8006b8c <__swbuf_r+0x6c>
 8006b7e:	2e0a      	cmp	r6, #10
 8006b80:	d104      	bne.n	8006b8c <__swbuf_r+0x6c>
 8006b82:	4621      	mov	r1, r4
 8006b84:	4628      	mov	r0, r5
 8006b86:	f000 f911 	bl	8006dac <_fflush_r>
 8006b8a:	b988      	cbnz	r0, 8006bb0 <__swbuf_r+0x90>
 8006b8c:	4638      	mov	r0, r7
 8006b8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b90:	4b0a      	ldr	r3, [pc, #40]	; (8006bbc <__swbuf_r+0x9c>)
 8006b92:	429c      	cmp	r4, r3
 8006b94:	d101      	bne.n	8006b9a <__swbuf_r+0x7a>
 8006b96:	68ac      	ldr	r4, [r5, #8]
 8006b98:	e7cf      	b.n	8006b3a <__swbuf_r+0x1a>
 8006b9a:	4b09      	ldr	r3, [pc, #36]	; (8006bc0 <__swbuf_r+0xa0>)
 8006b9c:	429c      	cmp	r4, r3
 8006b9e:	bf08      	it	eq
 8006ba0:	68ec      	ldreq	r4, [r5, #12]
 8006ba2:	e7ca      	b.n	8006b3a <__swbuf_r+0x1a>
 8006ba4:	4621      	mov	r1, r4
 8006ba6:	4628      	mov	r0, r5
 8006ba8:	f000 f80c 	bl	8006bc4 <__swsetup_r>
 8006bac:	2800      	cmp	r0, #0
 8006bae:	d0cb      	beq.n	8006b48 <__swbuf_r+0x28>
 8006bb0:	f04f 37ff 	mov.w	r7, #4294967295
 8006bb4:	e7ea      	b.n	8006b8c <__swbuf_r+0x6c>
 8006bb6:	bf00      	nop
 8006bb8:	08008094 	.word	0x08008094
 8006bbc:	080080b4 	.word	0x080080b4
 8006bc0:	08008074 	.word	0x08008074

08006bc4 <__swsetup_r>:
 8006bc4:	4b32      	ldr	r3, [pc, #200]	; (8006c90 <__swsetup_r+0xcc>)
 8006bc6:	b570      	push	{r4, r5, r6, lr}
 8006bc8:	681d      	ldr	r5, [r3, #0]
 8006bca:	4606      	mov	r6, r0
 8006bcc:	460c      	mov	r4, r1
 8006bce:	b125      	cbz	r5, 8006bda <__swsetup_r+0x16>
 8006bd0:	69ab      	ldr	r3, [r5, #24]
 8006bd2:	b913      	cbnz	r3, 8006bda <__swsetup_r+0x16>
 8006bd4:	4628      	mov	r0, r5
 8006bd6:	f000 f97d 	bl	8006ed4 <__sinit>
 8006bda:	4b2e      	ldr	r3, [pc, #184]	; (8006c94 <__swsetup_r+0xd0>)
 8006bdc:	429c      	cmp	r4, r3
 8006bde:	d10f      	bne.n	8006c00 <__swsetup_r+0x3c>
 8006be0:	686c      	ldr	r4, [r5, #4]
 8006be2:	89a3      	ldrh	r3, [r4, #12]
 8006be4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006be8:	0719      	lsls	r1, r3, #28
 8006bea:	d42c      	bmi.n	8006c46 <__swsetup_r+0x82>
 8006bec:	06dd      	lsls	r5, r3, #27
 8006bee:	d411      	bmi.n	8006c14 <__swsetup_r+0x50>
 8006bf0:	2309      	movs	r3, #9
 8006bf2:	6033      	str	r3, [r6, #0]
 8006bf4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006bf8:	81a3      	strh	r3, [r4, #12]
 8006bfa:	f04f 30ff 	mov.w	r0, #4294967295
 8006bfe:	e03e      	b.n	8006c7e <__swsetup_r+0xba>
 8006c00:	4b25      	ldr	r3, [pc, #148]	; (8006c98 <__swsetup_r+0xd4>)
 8006c02:	429c      	cmp	r4, r3
 8006c04:	d101      	bne.n	8006c0a <__swsetup_r+0x46>
 8006c06:	68ac      	ldr	r4, [r5, #8]
 8006c08:	e7eb      	b.n	8006be2 <__swsetup_r+0x1e>
 8006c0a:	4b24      	ldr	r3, [pc, #144]	; (8006c9c <__swsetup_r+0xd8>)
 8006c0c:	429c      	cmp	r4, r3
 8006c0e:	bf08      	it	eq
 8006c10:	68ec      	ldreq	r4, [r5, #12]
 8006c12:	e7e6      	b.n	8006be2 <__swsetup_r+0x1e>
 8006c14:	0758      	lsls	r0, r3, #29
 8006c16:	d512      	bpl.n	8006c3e <__swsetup_r+0x7a>
 8006c18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c1a:	b141      	cbz	r1, 8006c2e <__swsetup_r+0x6a>
 8006c1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c20:	4299      	cmp	r1, r3
 8006c22:	d002      	beq.n	8006c2a <__swsetup_r+0x66>
 8006c24:	4630      	mov	r0, r6
 8006c26:	f000 fa5b 	bl	80070e0 <_free_r>
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	6363      	str	r3, [r4, #52]	; 0x34
 8006c2e:	89a3      	ldrh	r3, [r4, #12]
 8006c30:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006c34:	81a3      	strh	r3, [r4, #12]
 8006c36:	2300      	movs	r3, #0
 8006c38:	6063      	str	r3, [r4, #4]
 8006c3a:	6923      	ldr	r3, [r4, #16]
 8006c3c:	6023      	str	r3, [r4, #0]
 8006c3e:	89a3      	ldrh	r3, [r4, #12]
 8006c40:	f043 0308 	orr.w	r3, r3, #8
 8006c44:	81a3      	strh	r3, [r4, #12]
 8006c46:	6923      	ldr	r3, [r4, #16]
 8006c48:	b94b      	cbnz	r3, 8006c5e <__swsetup_r+0x9a>
 8006c4a:	89a3      	ldrh	r3, [r4, #12]
 8006c4c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006c50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c54:	d003      	beq.n	8006c5e <__swsetup_r+0x9a>
 8006c56:	4621      	mov	r1, r4
 8006c58:	4630      	mov	r0, r6
 8006c5a:	f000 fa01 	bl	8007060 <__smakebuf_r>
 8006c5e:	89a0      	ldrh	r0, [r4, #12]
 8006c60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c64:	f010 0301 	ands.w	r3, r0, #1
 8006c68:	d00a      	beq.n	8006c80 <__swsetup_r+0xbc>
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	60a3      	str	r3, [r4, #8]
 8006c6e:	6963      	ldr	r3, [r4, #20]
 8006c70:	425b      	negs	r3, r3
 8006c72:	61a3      	str	r3, [r4, #24]
 8006c74:	6923      	ldr	r3, [r4, #16]
 8006c76:	b943      	cbnz	r3, 8006c8a <__swsetup_r+0xc6>
 8006c78:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006c7c:	d1ba      	bne.n	8006bf4 <__swsetup_r+0x30>
 8006c7e:	bd70      	pop	{r4, r5, r6, pc}
 8006c80:	0781      	lsls	r1, r0, #30
 8006c82:	bf58      	it	pl
 8006c84:	6963      	ldrpl	r3, [r4, #20]
 8006c86:	60a3      	str	r3, [r4, #8]
 8006c88:	e7f4      	b.n	8006c74 <__swsetup_r+0xb0>
 8006c8a:	2000      	movs	r0, #0
 8006c8c:	e7f7      	b.n	8006c7e <__swsetup_r+0xba>
 8006c8e:	bf00      	nop
 8006c90:	20000014 	.word	0x20000014
 8006c94:	08008094 	.word	0x08008094
 8006c98:	080080b4 	.word	0x080080b4
 8006c9c:	08008074 	.word	0x08008074

08006ca0 <__sflush_r>:
 8006ca0:	898a      	ldrh	r2, [r1, #12]
 8006ca2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ca6:	4605      	mov	r5, r0
 8006ca8:	0710      	lsls	r0, r2, #28
 8006caa:	460c      	mov	r4, r1
 8006cac:	d458      	bmi.n	8006d60 <__sflush_r+0xc0>
 8006cae:	684b      	ldr	r3, [r1, #4]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	dc05      	bgt.n	8006cc0 <__sflush_r+0x20>
 8006cb4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	dc02      	bgt.n	8006cc0 <__sflush_r+0x20>
 8006cba:	2000      	movs	r0, #0
 8006cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cc0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006cc2:	2e00      	cmp	r6, #0
 8006cc4:	d0f9      	beq.n	8006cba <__sflush_r+0x1a>
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006ccc:	682f      	ldr	r7, [r5, #0]
 8006cce:	602b      	str	r3, [r5, #0]
 8006cd0:	d032      	beq.n	8006d38 <__sflush_r+0x98>
 8006cd2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006cd4:	89a3      	ldrh	r3, [r4, #12]
 8006cd6:	075a      	lsls	r2, r3, #29
 8006cd8:	d505      	bpl.n	8006ce6 <__sflush_r+0x46>
 8006cda:	6863      	ldr	r3, [r4, #4]
 8006cdc:	1ac0      	subs	r0, r0, r3
 8006cde:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006ce0:	b10b      	cbz	r3, 8006ce6 <__sflush_r+0x46>
 8006ce2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006ce4:	1ac0      	subs	r0, r0, r3
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	4602      	mov	r2, r0
 8006cea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006cec:	6a21      	ldr	r1, [r4, #32]
 8006cee:	4628      	mov	r0, r5
 8006cf0:	47b0      	blx	r6
 8006cf2:	1c43      	adds	r3, r0, #1
 8006cf4:	89a3      	ldrh	r3, [r4, #12]
 8006cf6:	d106      	bne.n	8006d06 <__sflush_r+0x66>
 8006cf8:	6829      	ldr	r1, [r5, #0]
 8006cfa:	291d      	cmp	r1, #29
 8006cfc:	d82c      	bhi.n	8006d58 <__sflush_r+0xb8>
 8006cfe:	4a2a      	ldr	r2, [pc, #168]	; (8006da8 <__sflush_r+0x108>)
 8006d00:	40ca      	lsrs	r2, r1
 8006d02:	07d6      	lsls	r6, r2, #31
 8006d04:	d528      	bpl.n	8006d58 <__sflush_r+0xb8>
 8006d06:	2200      	movs	r2, #0
 8006d08:	6062      	str	r2, [r4, #4]
 8006d0a:	04d9      	lsls	r1, r3, #19
 8006d0c:	6922      	ldr	r2, [r4, #16]
 8006d0e:	6022      	str	r2, [r4, #0]
 8006d10:	d504      	bpl.n	8006d1c <__sflush_r+0x7c>
 8006d12:	1c42      	adds	r2, r0, #1
 8006d14:	d101      	bne.n	8006d1a <__sflush_r+0x7a>
 8006d16:	682b      	ldr	r3, [r5, #0]
 8006d18:	b903      	cbnz	r3, 8006d1c <__sflush_r+0x7c>
 8006d1a:	6560      	str	r0, [r4, #84]	; 0x54
 8006d1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d1e:	602f      	str	r7, [r5, #0]
 8006d20:	2900      	cmp	r1, #0
 8006d22:	d0ca      	beq.n	8006cba <__sflush_r+0x1a>
 8006d24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d28:	4299      	cmp	r1, r3
 8006d2a:	d002      	beq.n	8006d32 <__sflush_r+0x92>
 8006d2c:	4628      	mov	r0, r5
 8006d2e:	f000 f9d7 	bl	80070e0 <_free_r>
 8006d32:	2000      	movs	r0, #0
 8006d34:	6360      	str	r0, [r4, #52]	; 0x34
 8006d36:	e7c1      	b.n	8006cbc <__sflush_r+0x1c>
 8006d38:	6a21      	ldr	r1, [r4, #32]
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	4628      	mov	r0, r5
 8006d3e:	47b0      	blx	r6
 8006d40:	1c41      	adds	r1, r0, #1
 8006d42:	d1c7      	bne.n	8006cd4 <__sflush_r+0x34>
 8006d44:	682b      	ldr	r3, [r5, #0]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d0c4      	beq.n	8006cd4 <__sflush_r+0x34>
 8006d4a:	2b1d      	cmp	r3, #29
 8006d4c:	d001      	beq.n	8006d52 <__sflush_r+0xb2>
 8006d4e:	2b16      	cmp	r3, #22
 8006d50:	d101      	bne.n	8006d56 <__sflush_r+0xb6>
 8006d52:	602f      	str	r7, [r5, #0]
 8006d54:	e7b1      	b.n	8006cba <__sflush_r+0x1a>
 8006d56:	89a3      	ldrh	r3, [r4, #12]
 8006d58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d5c:	81a3      	strh	r3, [r4, #12]
 8006d5e:	e7ad      	b.n	8006cbc <__sflush_r+0x1c>
 8006d60:	690f      	ldr	r7, [r1, #16]
 8006d62:	2f00      	cmp	r7, #0
 8006d64:	d0a9      	beq.n	8006cba <__sflush_r+0x1a>
 8006d66:	0793      	lsls	r3, r2, #30
 8006d68:	680e      	ldr	r6, [r1, #0]
 8006d6a:	bf08      	it	eq
 8006d6c:	694b      	ldreq	r3, [r1, #20]
 8006d6e:	600f      	str	r7, [r1, #0]
 8006d70:	bf18      	it	ne
 8006d72:	2300      	movne	r3, #0
 8006d74:	eba6 0807 	sub.w	r8, r6, r7
 8006d78:	608b      	str	r3, [r1, #8]
 8006d7a:	f1b8 0f00 	cmp.w	r8, #0
 8006d7e:	dd9c      	ble.n	8006cba <__sflush_r+0x1a>
 8006d80:	6a21      	ldr	r1, [r4, #32]
 8006d82:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006d84:	4643      	mov	r3, r8
 8006d86:	463a      	mov	r2, r7
 8006d88:	4628      	mov	r0, r5
 8006d8a:	47b0      	blx	r6
 8006d8c:	2800      	cmp	r0, #0
 8006d8e:	dc06      	bgt.n	8006d9e <__sflush_r+0xfe>
 8006d90:	89a3      	ldrh	r3, [r4, #12]
 8006d92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d96:	81a3      	strh	r3, [r4, #12]
 8006d98:	f04f 30ff 	mov.w	r0, #4294967295
 8006d9c:	e78e      	b.n	8006cbc <__sflush_r+0x1c>
 8006d9e:	4407      	add	r7, r0
 8006da0:	eba8 0800 	sub.w	r8, r8, r0
 8006da4:	e7e9      	b.n	8006d7a <__sflush_r+0xda>
 8006da6:	bf00      	nop
 8006da8:	20400001 	.word	0x20400001

08006dac <_fflush_r>:
 8006dac:	b538      	push	{r3, r4, r5, lr}
 8006dae:	690b      	ldr	r3, [r1, #16]
 8006db0:	4605      	mov	r5, r0
 8006db2:	460c      	mov	r4, r1
 8006db4:	b913      	cbnz	r3, 8006dbc <_fflush_r+0x10>
 8006db6:	2500      	movs	r5, #0
 8006db8:	4628      	mov	r0, r5
 8006dba:	bd38      	pop	{r3, r4, r5, pc}
 8006dbc:	b118      	cbz	r0, 8006dc6 <_fflush_r+0x1a>
 8006dbe:	6983      	ldr	r3, [r0, #24]
 8006dc0:	b90b      	cbnz	r3, 8006dc6 <_fflush_r+0x1a>
 8006dc2:	f000 f887 	bl	8006ed4 <__sinit>
 8006dc6:	4b14      	ldr	r3, [pc, #80]	; (8006e18 <_fflush_r+0x6c>)
 8006dc8:	429c      	cmp	r4, r3
 8006dca:	d11b      	bne.n	8006e04 <_fflush_r+0x58>
 8006dcc:	686c      	ldr	r4, [r5, #4]
 8006dce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d0ef      	beq.n	8006db6 <_fflush_r+0xa>
 8006dd6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006dd8:	07d0      	lsls	r0, r2, #31
 8006dda:	d404      	bmi.n	8006de6 <_fflush_r+0x3a>
 8006ddc:	0599      	lsls	r1, r3, #22
 8006dde:	d402      	bmi.n	8006de6 <_fflush_r+0x3a>
 8006de0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006de2:	f000 f915 	bl	8007010 <__retarget_lock_acquire_recursive>
 8006de6:	4628      	mov	r0, r5
 8006de8:	4621      	mov	r1, r4
 8006dea:	f7ff ff59 	bl	8006ca0 <__sflush_r>
 8006dee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006df0:	07da      	lsls	r2, r3, #31
 8006df2:	4605      	mov	r5, r0
 8006df4:	d4e0      	bmi.n	8006db8 <_fflush_r+0xc>
 8006df6:	89a3      	ldrh	r3, [r4, #12]
 8006df8:	059b      	lsls	r3, r3, #22
 8006dfa:	d4dd      	bmi.n	8006db8 <_fflush_r+0xc>
 8006dfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006dfe:	f000 f908 	bl	8007012 <__retarget_lock_release_recursive>
 8006e02:	e7d9      	b.n	8006db8 <_fflush_r+0xc>
 8006e04:	4b05      	ldr	r3, [pc, #20]	; (8006e1c <_fflush_r+0x70>)
 8006e06:	429c      	cmp	r4, r3
 8006e08:	d101      	bne.n	8006e0e <_fflush_r+0x62>
 8006e0a:	68ac      	ldr	r4, [r5, #8]
 8006e0c:	e7df      	b.n	8006dce <_fflush_r+0x22>
 8006e0e:	4b04      	ldr	r3, [pc, #16]	; (8006e20 <_fflush_r+0x74>)
 8006e10:	429c      	cmp	r4, r3
 8006e12:	bf08      	it	eq
 8006e14:	68ec      	ldreq	r4, [r5, #12]
 8006e16:	e7da      	b.n	8006dce <_fflush_r+0x22>
 8006e18:	08008094 	.word	0x08008094
 8006e1c:	080080b4 	.word	0x080080b4
 8006e20:	08008074 	.word	0x08008074

08006e24 <std>:
 8006e24:	2300      	movs	r3, #0
 8006e26:	b510      	push	{r4, lr}
 8006e28:	4604      	mov	r4, r0
 8006e2a:	e9c0 3300 	strd	r3, r3, [r0]
 8006e2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e32:	6083      	str	r3, [r0, #8]
 8006e34:	8181      	strh	r1, [r0, #12]
 8006e36:	6643      	str	r3, [r0, #100]	; 0x64
 8006e38:	81c2      	strh	r2, [r0, #14]
 8006e3a:	6183      	str	r3, [r0, #24]
 8006e3c:	4619      	mov	r1, r3
 8006e3e:	2208      	movs	r2, #8
 8006e40:	305c      	adds	r0, #92	; 0x5c
 8006e42:	f7ff fdb7 	bl	80069b4 <memset>
 8006e46:	4b05      	ldr	r3, [pc, #20]	; (8006e5c <std+0x38>)
 8006e48:	6263      	str	r3, [r4, #36]	; 0x24
 8006e4a:	4b05      	ldr	r3, [pc, #20]	; (8006e60 <std+0x3c>)
 8006e4c:	62a3      	str	r3, [r4, #40]	; 0x28
 8006e4e:	4b05      	ldr	r3, [pc, #20]	; (8006e64 <std+0x40>)
 8006e50:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006e52:	4b05      	ldr	r3, [pc, #20]	; (8006e68 <std+0x44>)
 8006e54:	6224      	str	r4, [r4, #32]
 8006e56:	6323      	str	r3, [r4, #48]	; 0x30
 8006e58:	bd10      	pop	{r4, pc}
 8006e5a:	bf00      	nop
 8006e5c:	08007b55 	.word	0x08007b55
 8006e60:	08007b77 	.word	0x08007b77
 8006e64:	08007baf 	.word	0x08007baf
 8006e68:	08007bd3 	.word	0x08007bd3

08006e6c <_cleanup_r>:
 8006e6c:	4901      	ldr	r1, [pc, #4]	; (8006e74 <_cleanup_r+0x8>)
 8006e6e:	f000 b8af 	b.w	8006fd0 <_fwalk_reent>
 8006e72:	bf00      	nop
 8006e74:	08006dad 	.word	0x08006dad

08006e78 <__sfmoreglue>:
 8006e78:	b570      	push	{r4, r5, r6, lr}
 8006e7a:	2268      	movs	r2, #104	; 0x68
 8006e7c:	1e4d      	subs	r5, r1, #1
 8006e7e:	4355      	muls	r5, r2
 8006e80:	460e      	mov	r6, r1
 8006e82:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006e86:	f000 f997 	bl	80071b8 <_malloc_r>
 8006e8a:	4604      	mov	r4, r0
 8006e8c:	b140      	cbz	r0, 8006ea0 <__sfmoreglue+0x28>
 8006e8e:	2100      	movs	r1, #0
 8006e90:	e9c0 1600 	strd	r1, r6, [r0]
 8006e94:	300c      	adds	r0, #12
 8006e96:	60a0      	str	r0, [r4, #8]
 8006e98:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006e9c:	f7ff fd8a 	bl	80069b4 <memset>
 8006ea0:	4620      	mov	r0, r4
 8006ea2:	bd70      	pop	{r4, r5, r6, pc}

08006ea4 <__sfp_lock_acquire>:
 8006ea4:	4801      	ldr	r0, [pc, #4]	; (8006eac <__sfp_lock_acquire+0x8>)
 8006ea6:	f000 b8b3 	b.w	8007010 <__retarget_lock_acquire_recursive>
 8006eaa:	bf00      	nop
 8006eac:	20002f45 	.word	0x20002f45

08006eb0 <__sfp_lock_release>:
 8006eb0:	4801      	ldr	r0, [pc, #4]	; (8006eb8 <__sfp_lock_release+0x8>)
 8006eb2:	f000 b8ae 	b.w	8007012 <__retarget_lock_release_recursive>
 8006eb6:	bf00      	nop
 8006eb8:	20002f45 	.word	0x20002f45

08006ebc <__sinit_lock_acquire>:
 8006ebc:	4801      	ldr	r0, [pc, #4]	; (8006ec4 <__sinit_lock_acquire+0x8>)
 8006ebe:	f000 b8a7 	b.w	8007010 <__retarget_lock_acquire_recursive>
 8006ec2:	bf00      	nop
 8006ec4:	20002f46 	.word	0x20002f46

08006ec8 <__sinit_lock_release>:
 8006ec8:	4801      	ldr	r0, [pc, #4]	; (8006ed0 <__sinit_lock_release+0x8>)
 8006eca:	f000 b8a2 	b.w	8007012 <__retarget_lock_release_recursive>
 8006ece:	bf00      	nop
 8006ed0:	20002f46 	.word	0x20002f46

08006ed4 <__sinit>:
 8006ed4:	b510      	push	{r4, lr}
 8006ed6:	4604      	mov	r4, r0
 8006ed8:	f7ff fff0 	bl	8006ebc <__sinit_lock_acquire>
 8006edc:	69a3      	ldr	r3, [r4, #24]
 8006ede:	b11b      	cbz	r3, 8006ee8 <__sinit+0x14>
 8006ee0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ee4:	f7ff bff0 	b.w	8006ec8 <__sinit_lock_release>
 8006ee8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006eec:	6523      	str	r3, [r4, #80]	; 0x50
 8006eee:	4b13      	ldr	r3, [pc, #76]	; (8006f3c <__sinit+0x68>)
 8006ef0:	4a13      	ldr	r2, [pc, #76]	; (8006f40 <__sinit+0x6c>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	62a2      	str	r2, [r4, #40]	; 0x28
 8006ef6:	42a3      	cmp	r3, r4
 8006ef8:	bf04      	itt	eq
 8006efa:	2301      	moveq	r3, #1
 8006efc:	61a3      	streq	r3, [r4, #24]
 8006efe:	4620      	mov	r0, r4
 8006f00:	f000 f820 	bl	8006f44 <__sfp>
 8006f04:	6060      	str	r0, [r4, #4]
 8006f06:	4620      	mov	r0, r4
 8006f08:	f000 f81c 	bl	8006f44 <__sfp>
 8006f0c:	60a0      	str	r0, [r4, #8]
 8006f0e:	4620      	mov	r0, r4
 8006f10:	f000 f818 	bl	8006f44 <__sfp>
 8006f14:	2200      	movs	r2, #0
 8006f16:	60e0      	str	r0, [r4, #12]
 8006f18:	2104      	movs	r1, #4
 8006f1a:	6860      	ldr	r0, [r4, #4]
 8006f1c:	f7ff ff82 	bl	8006e24 <std>
 8006f20:	68a0      	ldr	r0, [r4, #8]
 8006f22:	2201      	movs	r2, #1
 8006f24:	2109      	movs	r1, #9
 8006f26:	f7ff ff7d 	bl	8006e24 <std>
 8006f2a:	68e0      	ldr	r0, [r4, #12]
 8006f2c:	2202      	movs	r2, #2
 8006f2e:	2112      	movs	r1, #18
 8006f30:	f7ff ff78 	bl	8006e24 <std>
 8006f34:	2301      	movs	r3, #1
 8006f36:	61a3      	str	r3, [r4, #24]
 8006f38:	e7d2      	b.n	8006ee0 <__sinit+0xc>
 8006f3a:	bf00      	nop
 8006f3c:	08008070 	.word	0x08008070
 8006f40:	08006e6d 	.word	0x08006e6d

08006f44 <__sfp>:
 8006f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f46:	4607      	mov	r7, r0
 8006f48:	f7ff ffac 	bl	8006ea4 <__sfp_lock_acquire>
 8006f4c:	4b1e      	ldr	r3, [pc, #120]	; (8006fc8 <__sfp+0x84>)
 8006f4e:	681e      	ldr	r6, [r3, #0]
 8006f50:	69b3      	ldr	r3, [r6, #24]
 8006f52:	b913      	cbnz	r3, 8006f5a <__sfp+0x16>
 8006f54:	4630      	mov	r0, r6
 8006f56:	f7ff ffbd 	bl	8006ed4 <__sinit>
 8006f5a:	3648      	adds	r6, #72	; 0x48
 8006f5c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006f60:	3b01      	subs	r3, #1
 8006f62:	d503      	bpl.n	8006f6c <__sfp+0x28>
 8006f64:	6833      	ldr	r3, [r6, #0]
 8006f66:	b30b      	cbz	r3, 8006fac <__sfp+0x68>
 8006f68:	6836      	ldr	r6, [r6, #0]
 8006f6a:	e7f7      	b.n	8006f5c <__sfp+0x18>
 8006f6c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006f70:	b9d5      	cbnz	r5, 8006fa8 <__sfp+0x64>
 8006f72:	4b16      	ldr	r3, [pc, #88]	; (8006fcc <__sfp+0x88>)
 8006f74:	60e3      	str	r3, [r4, #12]
 8006f76:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006f7a:	6665      	str	r5, [r4, #100]	; 0x64
 8006f7c:	f000 f847 	bl	800700e <__retarget_lock_init_recursive>
 8006f80:	f7ff ff96 	bl	8006eb0 <__sfp_lock_release>
 8006f84:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006f88:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006f8c:	6025      	str	r5, [r4, #0]
 8006f8e:	61a5      	str	r5, [r4, #24]
 8006f90:	2208      	movs	r2, #8
 8006f92:	4629      	mov	r1, r5
 8006f94:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006f98:	f7ff fd0c 	bl	80069b4 <memset>
 8006f9c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006fa0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006fa4:	4620      	mov	r0, r4
 8006fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fa8:	3468      	adds	r4, #104	; 0x68
 8006faa:	e7d9      	b.n	8006f60 <__sfp+0x1c>
 8006fac:	2104      	movs	r1, #4
 8006fae:	4638      	mov	r0, r7
 8006fb0:	f7ff ff62 	bl	8006e78 <__sfmoreglue>
 8006fb4:	4604      	mov	r4, r0
 8006fb6:	6030      	str	r0, [r6, #0]
 8006fb8:	2800      	cmp	r0, #0
 8006fba:	d1d5      	bne.n	8006f68 <__sfp+0x24>
 8006fbc:	f7ff ff78 	bl	8006eb0 <__sfp_lock_release>
 8006fc0:	230c      	movs	r3, #12
 8006fc2:	603b      	str	r3, [r7, #0]
 8006fc4:	e7ee      	b.n	8006fa4 <__sfp+0x60>
 8006fc6:	bf00      	nop
 8006fc8:	08008070 	.word	0x08008070
 8006fcc:	ffff0001 	.word	0xffff0001

08006fd0 <_fwalk_reent>:
 8006fd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fd4:	4606      	mov	r6, r0
 8006fd6:	4688      	mov	r8, r1
 8006fd8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006fdc:	2700      	movs	r7, #0
 8006fde:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006fe2:	f1b9 0901 	subs.w	r9, r9, #1
 8006fe6:	d505      	bpl.n	8006ff4 <_fwalk_reent+0x24>
 8006fe8:	6824      	ldr	r4, [r4, #0]
 8006fea:	2c00      	cmp	r4, #0
 8006fec:	d1f7      	bne.n	8006fde <_fwalk_reent+0xe>
 8006fee:	4638      	mov	r0, r7
 8006ff0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ff4:	89ab      	ldrh	r3, [r5, #12]
 8006ff6:	2b01      	cmp	r3, #1
 8006ff8:	d907      	bls.n	800700a <_fwalk_reent+0x3a>
 8006ffa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006ffe:	3301      	adds	r3, #1
 8007000:	d003      	beq.n	800700a <_fwalk_reent+0x3a>
 8007002:	4629      	mov	r1, r5
 8007004:	4630      	mov	r0, r6
 8007006:	47c0      	blx	r8
 8007008:	4307      	orrs	r7, r0
 800700a:	3568      	adds	r5, #104	; 0x68
 800700c:	e7e9      	b.n	8006fe2 <_fwalk_reent+0x12>

0800700e <__retarget_lock_init_recursive>:
 800700e:	4770      	bx	lr

08007010 <__retarget_lock_acquire_recursive>:
 8007010:	4770      	bx	lr

08007012 <__retarget_lock_release_recursive>:
 8007012:	4770      	bx	lr

08007014 <__swhatbuf_r>:
 8007014:	b570      	push	{r4, r5, r6, lr}
 8007016:	460e      	mov	r6, r1
 8007018:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800701c:	2900      	cmp	r1, #0
 800701e:	b096      	sub	sp, #88	; 0x58
 8007020:	4614      	mov	r4, r2
 8007022:	461d      	mov	r5, r3
 8007024:	da08      	bge.n	8007038 <__swhatbuf_r+0x24>
 8007026:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800702a:	2200      	movs	r2, #0
 800702c:	602a      	str	r2, [r5, #0]
 800702e:	061a      	lsls	r2, r3, #24
 8007030:	d410      	bmi.n	8007054 <__swhatbuf_r+0x40>
 8007032:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007036:	e00e      	b.n	8007056 <__swhatbuf_r+0x42>
 8007038:	466a      	mov	r2, sp
 800703a:	f000 fdf1 	bl	8007c20 <_fstat_r>
 800703e:	2800      	cmp	r0, #0
 8007040:	dbf1      	blt.n	8007026 <__swhatbuf_r+0x12>
 8007042:	9a01      	ldr	r2, [sp, #4]
 8007044:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007048:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800704c:	425a      	negs	r2, r3
 800704e:	415a      	adcs	r2, r3
 8007050:	602a      	str	r2, [r5, #0]
 8007052:	e7ee      	b.n	8007032 <__swhatbuf_r+0x1e>
 8007054:	2340      	movs	r3, #64	; 0x40
 8007056:	2000      	movs	r0, #0
 8007058:	6023      	str	r3, [r4, #0]
 800705a:	b016      	add	sp, #88	; 0x58
 800705c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007060 <__smakebuf_r>:
 8007060:	898b      	ldrh	r3, [r1, #12]
 8007062:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007064:	079d      	lsls	r5, r3, #30
 8007066:	4606      	mov	r6, r0
 8007068:	460c      	mov	r4, r1
 800706a:	d507      	bpl.n	800707c <__smakebuf_r+0x1c>
 800706c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007070:	6023      	str	r3, [r4, #0]
 8007072:	6123      	str	r3, [r4, #16]
 8007074:	2301      	movs	r3, #1
 8007076:	6163      	str	r3, [r4, #20]
 8007078:	b002      	add	sp, #8
 800707a:	bd70      	pop	{r4, r5, r6, pc}
 800707c:	ab01      	add	r3, sp, #4
 800707e:	466a      	mov	r2, sp
 8007080:	f7ff ffc8 	bl	8007014 <__swhatbuf_r>
 8007084:	9900      	ldr	r1, [sp, #0]
 8007086:	4605      	mov	r5, r0
 8007088:	4630      	mov	r0, r6
 800708a:	f000 f895 	bl	80071b8 <_malloc_r>
 800708e:	b948      	cbnz	r0, 80070a4 <__smakebuf_r+0x44>
 8007090:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007094:	059a      	lsls	r2, r3, #22
 8007096:	d4ef      	bmi.n	8007078 <__smakebuf_r+0x18>
 8007098:	f023 0303 	bic.w	r3, r3, #3
 800709c:	f043 0302 	orr.w	r3, r3, #2
 80070a0:	81a3      	strh	r3, [r4, #12]
 80070a2:	e7e3      	b.n	800706c <__smakebuf_r+0xc>
 80070a4:	4b0d      	ldr	r3, [pc, #52]	; (80070dc <__smakebuf_r+0x7c>)
 80070a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80070a8:	89a3      	ldrh	r3, [r4, #12]
 80070aa:	6020      	str	r0, [r4, #0]
 80070ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070b0:	81a3      	strh	r3, [r4, #12]
 80070b2:	9b00      	ldr	r3, [sp, #0]
 80070b4:	6163      	str	r3, [r4, #20]
 80070b6:	9b01      	ldr	r3, [sp, #4]
 80070b8:	6120      	str	r0, [r4, #16]
 80070ba:	b15b      	cbz	r3, 80070d4 <__smakebuf_r+0x74>
 80070bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070c0:	4630      	mov	r0, r6
 80070c2:	f000 fdbf 	bl	8007c44 <_isatty_r>
 80070c6:	b128      	cbz	r0, 80070d4 <__smakebuf_r+0x74>
 80070c8:	89a3      	ldrh	r3, [r4, #12]
 80070ca:	f023 0303 	bic.w	r3, r3, #3
 80070ce:	f043 0301 	orr.w	r3, r3, #1
 80070d2:	81a3      	strh	r3, [r4, #12]
 80070d4:	89a0      	ldrh	r0, [r4, #12]
 80070d6:	4305      	orrs	r5, r0
 80070d8:	81a5      	strh	r5, [r4, #12]
 80070da:	e7cd      	b.n	8007078 <__smakebuf_r+0x18>
 80070dc:	08006e6d 	.word	0x08006e6d

080070e0 <_free_r>:
 80070e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80070e2:	2900      	cmp	r1, #0
 80070e4:	d044      	beq.n	8007170 <_free_r+0x90>
 80070e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070ea:	9001      	str	r0, [sp, #4]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	f1a1 0404 	sub.w	r4, r1, #4
 80070f2:	bfb8      	it	lt
 80070f4:	18e4      	addlt	r4, r4, r3
 80070f6:	f000 fde1 	bl	8007cbc <__malloc_lock>
 80070fa:	4a1e      	ldr	r2, [pc, #120]	; (8007174 <_free_r+0x94>)
 80070fc:	9801      	ldr	r0, [sp, #4]
 80070fe:	6813      	ldr	r3, [r2, #0]
 8007100:	b933      	cbnz	r3, 8007110 <_free_r+0x30>
 8007102:	6063      	str	r3, [r4, #4]
 8007104:	6014      	str	r4, [r2, #0]
 8007106:	b003      	add	sp, #12
 8007108:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800710c:	f000 bddc 	b.w	8007cc8 <__malloc_unlock>
 8007110:	42a3      	cmp	r3, r4
 8007112:	d908      	bls.n	8007126 <_free_r+0x46>
 8007114:	6825      	ldr	r5, [r4, #0]
 8007116:	1961      	adds	r1, r4, r5
 8007118:	428b      	cmp	r3, r1
 800711a:	bf01      	itttt	eq
 800711c:	6819      	ldreq	r1, [r3, #0]
 800711e:	685b      	ldreq	r3, [r3, #4]
 8007120:	1949      	addeq	r1, r1, r5
 8007122:	6021      	streq	r1, [r4, #0]
 8007124:	e7ed      	b.n	8007102 <_free_r+0x22>
 8007126:	461a      	mov	r2, r3
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	b10b      	cbz	r3, 8007130 <_free_r+0x50>
 800712c:	42a3      	cmp	r3, r4
 800712e:	d9fa      	bls.n	8007126 <_free_r+0x46>
 8007130:	6811      	ldr	r1, [r2, #0]
 8007132:	1855      	adds	r5, r2, r1
 8007134:	42a5      	cmp	r5, r4
 8007136:	d10b      	bne.n	8007150 <_free_r+0x70>
 8007138:	6824      	ldr	r4, [r4, #0]
 800713a:	4421      	add	r1, r4
 800713c:	1854      	adds	r4, r2, r1
 800713e:	42a3      	cmp	r3, r4
 8007140:	6011      	str	r1, [r2, #0]
 8007142:	d1e0      	bne.n	8007106 <_free_r+0x26>
 8007144:	681c      	ldr	r4, [r3, #0]
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	6053      	str	r3, [r2, #4]
 800714a:	4421      	add	r1, r4
 800714c:	6011      	str	r1, [r2, #0]
 800714e:	e7da      	b.n	8007106 <_free_r+0x26>
 8007150:	d902      	bls.n	8007158 <_free_r+0x78>
 8007152:	230c      	movs	r3, #12
 8007154:	6003      	str	r3, [r0, #0]
 8007156:	e7d6      	b.n	8007106 <_free_r+0x26>
 8007158:	6825      	ldr	r5, [r4, #0]
 800715a:	1961      	adds	r1, r4, r5
 800715c:	428b      	cmp	r3, r1
 800715e:	bf04      	itt	eq
 8007160:	6819      	ldreq	r1, [r3, #0]
 8007162:	685b      	ldreq	r3, [r3, #4]
 8007164:	6063      	str	r3, [r4, #4]
 8007166:	bf04      	itt	eq
 8007168:	1949      	addeq	r1, r1, r5
 800716a:	6021      	streq	r1, [r4, #0]
 800716c:	6054      	str	r4, [r2, #4]
 800716e:	e7ca      	b.n	8007106 <_free_r+0x26>
 8007170:	b003      	add	sp, #12
 8007172:	bd30      	pop	{r4, r5, pc}
 8007174:	20002f48 	.word	0x20002f48

08007178 <sbrk_aligned>:
 8007178:	b570      	push	{r4, r5, r6, lr}
 800717a:	4e0e      	ldr	r6, [pc, #56]	; (80071b4 <sbrk_aligned+0x3c>)
 800717c:	460c      	mov	r4, r1
 800717e:	6831      	ldr	r1, [r6, #0]
 8007180:	4605      	mov	r5, r0
 8007182:	b911      	cbnz	r1, 800718a <sbrk_aligned+0x12>
 8007184:	f000 fcd6 	bl	8007b34 <_sbrk_r>
 8007188:	6030      	str	r0, [r6, #0]
 800718a:	4621      	mov	r1, r4
 800718c:	4628      	mov	r0, r5
 800718e:	f000 fcd1 	bl	8007b34 <_sbrk_r>
 8007192:	1c43      	adds	r3, r0, #1
 8007194:	d00a      	beq.n	80071ac <sbrk_aligned+0x34>
 8007196:	1cc4      	adds	r4, r0, #3
 8007198:	f024 0403 	bic.w	r4, r4, #3
 800719c:	42a0      	cmp	r0, r4
 800719e:	d007      	beq.n	80071b0 <sbrk_aligned+0x38>
 80071a0:	1a21      	subs	r1, r4, r0
 80071a2:	4628      	mov	r0, r5
 80071a4:	f000 fcc6 	bl	8007b34 <_sbrk_r>
 80071a8:	3001      	adds	r0, #1
 80071aa:	d101      	bne.n	80071b0 <sbrk_aligned+0x38>
 80071ac:	f04f 34ff 	mov.w	r4, #4294967295
 80071b0:	4620      	mov	r0, r4
 80071b2:	bd70      	pop	{r4, r5, r6, pc}
 80071b4:	20002f4c 	.word	0x20002f4c

080071b8 <_malloc_r>:
 80071b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071bc:	1ccd      	adds	r5, r1, #3
 80071be:	f025 0503 	bic.w	r5, r5, #3
 80071c2:	3508      	adds	r5, #8
 80071c4:	2d0c      	cmp	r5, #12
 80071c6:	bf38      	it	cc
 80071c8:	250c      	movcc	r5, #12
 80071ca:	2d00      	cmp	r5, #0
 80071cc:	4607      	mov	r7, r0
 80071ce:	db01      	blt.n	80071d4 <_malloc_r+0x1c>
 80071d0:	42a9      	cmp	r1, r5
 80071d2:	d905      	bls.n	80071e0 <_malloc_r+0x28>
 80071d4:	230c      	movs	r3, #12
 80071d6:	603b      	str	r3, [r7, #0]
 80071d8:	2600      	movs	r6, #0
 80071da:	4630      	mov	r0, r6
 80071dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071e0:	4e2e      	ldr	r6, [pc, #184]	; (800729c <_malloc_r+0xe4>)
 80071e2:	f000 fd6b 	bl	8007cbc <__malloc_lock>
 80071e6:	6833      	ldr	r3, [r6, #0]
 80071e8:	461c      	mov	r4, r3
 80071ea:	bb34      	cbnz	r4, 800723a <_malloc_r+0x82>
 80071ec:	4629      	mov	r1, r5
 80071ee:	4638      	mov	r0, r7
 80071f0:	f7ff ffc2 	bl	8007178 <sbrk_aligned>
 80071f4:	1c43      	adds	r3, r0, #1
 80071f6:	4604      	mov	r4, r0
 80071f8:	d14d      	bne.n	8007296 <_malloc_r+0xde>
 80071fa:	6834      	ldr	r4, [r6, #0]
 80071fc:	4626      	mov	r6, r4
 80071fe:	2e00      	cmp	r6, #0
 8007200:	d140      	bne.n	8007284 <_malloc_r+0xcc>
 8007202:	6823      	ldr	r3, [r4, #0]
 8007204:	4631      	mov	r1, r6
 8007206:	4638      	mov	r0, r7
 8007208:	eb04 0803 	add.w	r8, r4, r3
 800720c:	f000 fc92 	bl	8007b34 <_sbrk_r>
 8007210:	4580      	cmp	r8, r0
 8007212:	d13a      	bne.n	800728a <_malloc_r+0xd2>
 8007214:	6821      	ldr	r1, [r4, #0]
 8007216:	3503      	adds	r5, #3
 8007218:	1a6d      	subs	r5, r5, r1
 800721a:	f025 0503 	bic.w	r5, r5, #3
 800721e:	3508      	adds	r5, #8
 8007220:	2d0c      	cmp	r5, #12
 8007222:	bf38      	it	cc
 8007224:	250c      	movcc	r5, #12
 8007226:	4629      	mov	r1, r5
 8007228:	4638      	mov	r0, r7
 800722a:	f7ff ffa5 	bl	8007178 <sbrk_aligned>
 800722e:	3001      	adds	r0, #1
 8007230:	d02b      	beq.n	800728a <_malloc_r+0xd2>
 8007232:	6823      	ldr	r3, [r4, #0]
 8007234:	442b      	add	r3, r5
 8007236:	6023      	str	r3, [r4, #0]
 8007238:	e00e      	b.n	8007258 <_malloc_r+0xa0>
 800723a:	6822      	ldr	r2, [r4, #0]
 800723c:	1b52      	subs	r2, r2, r5
 800723e:	d41e      	bmi.n	800727e <_malloc_r+0xc6>
 8007240:	2a0b      	cmp	r2, #11
 8007242:	d916      	bls.n	8007272 <_malloc_r+0xba>
 8007244:	1961      	adds	r1, r4, r5
 8007246:	42a3      	cmp	r3, r4
 8007248:	6025      	str	r5, [r4, #0]
 800724a:	bf18      	it	ne
 800724c:	6059      	strne	r1, [r3, #4]
 800724e:	6863      	ldr	r3, [r4, #4]
 8007250:	bf08      	it	eq
 8007252:	6031      	streq	r1, [r6, #0]
 8007254:	5162      	str	r2, [r4, r5]
 8007256:	604b      	str	r3, [r1, #4]
 8007258:	4638      	mov	r0, r7
 800725a:	f104 060b 	add.w	r6, r4, #11
 800725e:	f000 fd33 	bl	8007cc8 <__malloc_unlock>
 8007262:	f026 0607 	bic.w	r6, r6, #7
 8007266:	1d23      	adds	r3, r4, #4
 8007268:	1af2      	subs	r2, r6, r3
 800726a:	d0b6      	beq.n	80071da <_malloc_r+0x22>
 800726c:	1b9b      	subs	r3, r3, r6
 800726e:	50a3      	str	r3, [r4, r2]
 8007270:	e7b3      	b.n	80071da <_malloc_r+0x22>
 8007272:	6862      	ldr	r2, [r4, #4]
 8007274:	42a3      	cmp	r3, r4
 8007276:	bf0c      	ite	eq
 8007278:	6032      	streq	r2, [r6, #0]
 800727a:	605a      	strne	r2, [r3, #4]
 800727c:	e7ec      	b.n	8007258 <_malloc_r+0xa0>
 800727e:	4623      	mov	r3, r4
 8007280:	6864      	ldr	r4, [r4, #4]
 8007282:	e7b2      	b.n	80071ea <_malloc_r+0x32>
 8007284:	4634      	mov	r4, r6
 8007286:	6876      	ldr	r6, [r6, #4]
 8007288:	e7b9      	b.n	80071fe <_malloc_r+0x46>
 800728a:	230c      	movs	r3, #12
 800728c:	603b      	str	r3, [r7, #0]
 800728e:	4638      	mov	r0, r7
 8007290:	f000 fd1a 	bl	8007cc8 <__malloc_unlock>
 8007294:	e7a1      	b.n	80071da <_malloc_r+0x22>
 8007296:	6025      	str	r5, [r4, #0]
 8007298:	e7de      	b.n	8007258 <_malloc_r+0xa0>
 800729a:	bf00      	nop
 800729c:	20002f48 	.word	0x20002f48

080072a0 <__ssputs_r>:
 80072a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072a4:	688e      	ldr	r6, [r1, #8]
 80072a6:	429e      	cmp	r6, r3
 80072a8:	4682      	mov	sl, r0
 80072aa:	460c      	mov	r4, r1
 80072ac:	4690      	mov	r8, r2
 80072ae:	461f      	mov	r7, r3
 80072b0:	d838      	bhi.n	8007324 <__ssputs_r+0x84>
 80072b2:	898a      	ldrh	r2, [r1, #12]
 80072b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80072b8:	d032      	beq.n	8007320 <__ssputs_r+0x80>
 80072ba:	6825      	ldr	r5, [r4, #0]
 80072bc:	6909      	ldr	r1, [r1, #16]
 80072be:	eba5 0901 	sub.w	r9, r5, r1
 80072c2:	6965      	ldr	r5, [r4, #20]
 80072c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80072c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80072cc:	3301      	adds	r3, #1
 80072ce:	444b      	add	r3, r9
 80072d0:	106d      	asrs	r5, r5, #1
 80072d2:	429d      	cmp	r5, r3
 80072d4:	bf38      	it	cc
 80072d6:	461d      	movcc	r5, r3
 80072d8:	0553      	lsls	r3, r2, #21
 80072da:	d531      	bpl.n	8007340 <__ssputs_r+0xa0>
 80072dc:	4629      	mov	r1, r5
 80072de:	f7ff ff6b 	bl	80071b8 <_malloc_r>
 80072e2:	4606      	mov	r6, r0
 80072e4:	b950      	cbnz	r0, 80072fc <__ssputs_r+0x5c>
 80072e6:	230c      	movs	r3, #12
 80072e8:	f8ca 3000 	str.w	r3, [sl]
 80072ec:	89a3      	ldrh	r3, [r4, #12]
 80072ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072f2:	81a3      	strh	r3, [r4, #12]
 80072f4:	f04f 30ff 	mov.w	r0, #4294967295
 80072f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072fc:	6921      	ldr	r1, [r4, #16]
 80072fe:	464a      	mov	r2, r9
 8007300:	f7ff fb4a 	bl	8006998 <memcpy>
 8007304:	89a3      	ldrh	r3, [r4, #12]
 8007306:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800730a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800730e:	81a3      	strh	r3, [r4, #12]
 8007310:	6126      	str	r6, [r4, #16]
 8007312:	6165      	str	r5, [r4, #20]
 8007314:	444e      	add	r6, r9
 8007316:	eba5 0509 	sub.w	r5, r5, r9
 800731a:	6026      	str	r6, [r4, #0]
 800731c:	60a5      	str	r5, [r4, #8]
 800731e:	463e      	mov	r6, r7
 8007320:	42be      	cmp	r6, r7
 8007322:	d900      	bls.n	8007326 <__ssputs_r+0x86>
 8007324:	463e      	mov	r6, r7
 8007326:	6820      	ldr	r0, [r4, #0]
 8007328:	4632      	mov	r2, r6
 800732a:	4641      	mov	r1, r8
 800732c:	f000 fcac 	bl	8007c88 <memmove>
 8007330:	68a3      	ldr	r3, [r4, #8]
 8007332:	1b9b      	subs	r3, r3, r6
 8007334:	60a3      	str	r3, [r4, #8]
 8007336:	6823      	ldr	r3, [r4, #0]
 8007338:	4433      	add	r3, r6
 800733a:	6023      	str	r3, [r4, #0]
 800733c:	2000      	movs	r0, #0
 800733e:	e7db      	b.n	80072f8 <__ssputs_r+0x58>
 8007340:	462a      	mov	r2, r5
 8007342:	f000 fcc7 	bl	8007cd4 <_realloc_r>
 8007346:	4606      	mov	r6, r0
 8007348:	2800      	cmp	r0, #0
 800734a:	d1e1      	bne.n	8007310 <__ssputs_r+0x70>
 800734c:	6921      	ldr	r1, [r4, #16]
 800734e:	4650      	mov	r0, sl
 8007350:	f7ff fec6 	bl	80070e0 <_free_r>
 8007354:	e7c7      	b.n	80072e6 <__ssputs_r+0x46>
	...

08007358 <_svfiprintf_r>:
 8007358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800735c:	4698      	mov	r8, r3
 800735e:	898b      	ldrh	r3, [r1, #12]
 8007360:	061b      	lsls	r3, r3, #24
 8007362:	b09d      	sub	sp, #116	; 0x74
 8007364:	4607      	mov	r7, r0
 8007366:	460d      	mov	r5, r1
 8007368:	4614      	mov	r4, r2
 800736a:	d50e      	bpl.n	800738a <_svfiprintf_r+0x32>
 800736c:	690b      	ldr	r3, [r1, #16]
 800736e:	b963      	cbnz	r3, 800738a <_svfiprintf_r+0x32>
 8007370:	2140      	movs	r1, #64	; 0x40
 8007372:	f7ff ff21 	bl	80071b8 <_malloc_r>
 8007376:	6028      	str	r0, [r5, #0]
 8007378:	6128      	str	r0, [r5, #16]
 800737a:	b920      	cbnz	r0, 8007386 <_svfiprintf_r+0x2e>
 800737c:	230c      	movs	r3, #12
 800737e:	603b      	str	r3, [r7, #0]
 8007380:	f04f 30ff 	mov.w	r0, #4294967295
 8007384:	e0d1      	b.n	800752a <_svfiprintf_r+0x1d2>
 8007386:	2340      	movs	r3, #64	; 0x40
 8007388:	616b      	str	r3, [r5, #20]
 800738a:	2300      	movs	r3, #0
 800738c:	9309      	str	r3, [sp, #36]	; 0x24
 800738e:	2320      	movs	r3, #32
 8007390:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007394:	f8cd 800c 	str.w	r8, [sp, #12]
 8007398:	2330      	movs	r3, #48	; 0x30
 800739a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007544 <_svfiprintf_r+0x1ec>
 800739e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80073a2:	f04f 0901 	mov.w	r9, #1
 80073a6:	4623      	mov	r3, r4
 80073a8:	469a      	mov	sl, r3
 80073aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80073ae:	b10a      	cbz	r2, 80073b4 <_svfiprintf_r+0x5c>
 80073b0:	2a25      	cmp	r2, #37	; 0x25
 80073b2:	d1f9      	bne.n	80073a8 <_svfiprintf_r+0x50>
 80073b4:	ebba 0b04 	subs.w	fp, sl, r4
 80073b8:	d00b      	beq.n	80073d2 <_svfiprintf_r+0x7a>
 80073ba:	465b      	mov	r3, fp
 80073bc:	4622      	mov	r2, r4
 80073be:	4629      	mov	r1, r5
 80073c0:	4638      	mov	r0, r7
 80073c2:	f7ff ff6d 	bl	80072a0 <__ssputs_r>
 80073c6:	3001      	adds	r0, #1
 80073c8:	f000 80aa 	beq.w	8007520 <_svfiprintf_r+0x1c8>
 80073cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80073ce:	445a      	add	r2, fp
 80073d0:	9209      	str	r2, [sp, #36]	; 0x24
 80073d2:	f89a 3000 	ldrb.w	r3, [sl]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	f000 80a2 	beq.w	8007520 <_svfiprintf_r+0x1c8>
 80073dc:	2300      	movs	r3, #0
 80073de:	f04f 32ff 	mov.w	r2, #4294967295
 80073e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80073e6:	f10a 0a01 	add.w	sl, sl, #1
 80073ea:	9304      	str	r3, [sp, #16]
 80073ec:	9307      	str	r3, [sp, #28]
 80073ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80073f2:	931a      	str	r3, [sp, #104]	; 0x68
 80073f4:	4654      	mov	r4, sl
 80073f6:	2205      	movs	r2, #5
 80073f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073fc:	4851      	ldr	r0, [pc, #324]	; (8007544 <_svfiprintf_r+0x1ec>)
 80073fe:	f7f8 feef 	bl	80001e0 <memchr>
 8007402:	9a04      	ldr	r2, [sp, #16]
 8007404:	b9d8      	cbnz	r0, 800743e <_svfiprintf_r+0xe6>
 8007406:	06d0      	lsls	r0, r2, #27
 8007408:	bf44      	itt	mi
 800740a:	2320      	movmi	r3, #32
 800740c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007410:	0711      	lsls	r1, r2, #28
 8007412:	bf44      	itt	mi
 8007414:	232b      	movmi	r3, #43	; 0x2b
 8007416:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800741a:	f89a 3000 	ldrb.w	r3, [sl]
 800741e:	2b2a      	cmp	r3, #42	; 0x2a
 8007420:	d015      	beq.n	800744e <_svfiprintf_r+0xf6>
 8007422:	9a07      	ldr	r2, [sp, #28]
 8007424:	4654      	mov	r4, sl
 8007426:	2000      	movs	r0, #0
 8007428:	f04f 0c0a 	mov.w	ip, #10
 800742c:	4621      	mov	r1, r4
 800742e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007432:	3b30      	subs	r3, #48	; 0x30
 8007434:	2b09      	cmp	r3, #9
 8007436:	d94e      	bls.n	80074d6 <_svfiprintf_r+0x17e>
 8007438:	b1b0      	cbz	r0, 8007468 <_svfiprintf_r+0x110>
 800743a:	9207      	str	r2, [sp, #28]
 800743c:	e014      	b.n	8007468 <_svfiprintf_r+0x110>
 800743e:	eba0 0308 	sub.w	r3, r0, r8
 8007442:	fa09 f303 	lsl.w	r3, r9, r3
 8007446:	4313      	orrs	r3, r2
 8007448:	9304      	str	r3, [sp, #16]
 800744a:	46a2      	mov	sl, r4
 800744c:	e7d2      	b.n	80073f4 <_svfiprintf_r+0x9c>
 800744e:	9b03      	ldr	r3, [sp, #12]
 8007450:	1d19      	adds	r1, r3, #4
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	9103      	str	r1, [sp, #12]
 8007456:	2b00      	cmp	r3, #0
 8007458:	bfbb      	ittet	lt
 800745a:	425b      	neglt	r3, r3
 800745c:	f042 0202 	orrlt.w	r2, r2, #2
 8007460:	9307      	strge	r3, [sp, #28]
 8007462:	9307      	strlt	r3, [sp, #28]
 8007464:	bfb8      	it	lt
 8007466:	9204      	strlt	r2, [sp, #16]
 8007468:	7823      	ldrb	r3, [r4, #0]
 800746a:	2b2e      	cmp	r3, #46	; 0x2e
 800746c:	d10c      	bne.n	8007488 <_svfiprintf_r+0x130>
 800746e:	7863      	ldrb	r3, [r4, #1]
 8007470:	2b2a      	cmp	r3, #42	; 0x2a
 8007472:	d135      	bne.n	80074e0 <_svfiprintf_r+0x188>
 8007474:	9b03      	ldr	r3, [sp, #12]
 8007476:	1d1a      	adds	r2, r3, #4
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	9203      	str	r2, [sp, #12]
 800747c:	2b00      	cmp	r3, #0
 800747e:	bfb8      	it	lt
 8007480:	f04f 33ff 	movlt.w	r3, #4294967295
 8007484:	3402      	adds	r4, #2
 8007486:	9305      	str	r3, [sp, #20]
 8007488:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007554 <_svfiprintf_r+0x1fc>
 800748c:	7821      	ldrb	r1, [r4, #0]
 800748e:	2203      	movs	r2, #3
 8007490:	4650      	mov	r0, sl
 8007492:	f7f8 fea5 	bl	80001e0 <memchr>
 8007496:	b140      	cbz	r0, 80074aa <_svfiprintf_r+0x152>
 8007498:	2340      	movs	r3, #64	; 0x40
 800749a:	eba0 000a 	sub.w	r0, r0, sl
 800749e:	fa03 f000 	lsl.w	r0, r3, r0
 80074a2:	9b04      	ldr	r3, [sp, #16]
 80074a4:	4303      	orrs	r3, r0
 80074a6:	3401      	adds	r4, #1
 80074a8:	9304      	str	r3, [sp, #16]
 80074aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074ae:	4826      	ldr	r0, [pc, #152]	; (8007548 <_svfiprintf_r+0x1f0>)
 80074b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80074b4:	2206      	movs	r2, #6
 80074b6:	f7f8 fe93 	bl	80001e0 <memchr>
 80074ba:	2800      	cmp	r0, #0
 80074bc:	d038      	beq.n	8007530 <_svfiprintf_r+0x1d8>
 80074be:	4b23      	ldr	r3, [pc, #140]	; (800754c <_svfiprintf_r+0x1f4>)
 80074c0:	bb1b      	cbnz	r3, 800750a <_svfiprintf_r+0x1b2>
 80074c2:	9b03      	ldr	r3, [sp, #12]
 80074c4:	3307      	adds	r3, #7
 80074c6:	f023 0307 	bic.w	r3, r3, #7
 80074ca:	3308      	adds	r3, #8
 80074cc:	9303      	str	r3, [sp, #12]
 80074ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074d0:	4433      	add	r3, r6
 80074d2:	9309      	str	r3, [sp, #36]	; 0x24
 80074d4:	e767      	b.n	80073a6 <_svfiprintf_r+0x4e>
 80074d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80074da:	460c      	mov	r4, r1
 80074dc:	2001      	movs	r0, #1
 80074de:	e7a5      	b.n	800742c <_svfiprintf_r+0xd4>
 80074e0:	2300      	movs	r3, #0
 80074e2:	3401      	adds	r4, #1
 80074e4:	9305      	str	r3, [sp, #20]
 80074e6:	4619      	mov	r1, r3
 80074e8:	f04f 0c0a 	mov.w	ip, #10
 80074ec:	4620      	mov	r0, r4
 80074ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074f2:	3a30      	subs	r2, #48	; 0x30
 80074f4:	2a09      	cmp	r2, #9
 80074f6:	d903      	bls.n	8007500 <_svfiprintf_r+0x1a8>
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d0c5      	beq.n	8007488 <_svfiprintf_r+0x130>
 80074fc:	9105      	str	r1, [sp, #20]
 80074fe:	e7c3      	b.n	8007488 <_svfiprintf_r+0x130>
 8007500:	fb0c 2101 	mla	r1, ip, r1, r2
 8007504:	4604      	mov	r4, r0
 8007506:	2301      	movs	r3, #1
 8007508:	e7f0      	b.n	80074ec <_svfiprintf_r+0x194>
 800750a:	ab03      	add	r3, sp, #12
 800750c:	9300      	str	r3, [sp, #0]
 800750e:	462a      	mov	r2, r5
 8007510:	4b0f      	ldr	r3, [pc, #60]	; (8007550 <_svfiprintf_r+0x1f8>)
 8007512:	a904      	add	r1, sp, #16
 8007514:	4638      	mov	r0, r7
 8007516:	f3af 8000 	nop.w
 800751a:	1c42      	adds	r2, r0, #1
 800751c:	4606      	mov	r6, r0
 800751e:	d1d6      	bne.n	80074ce <_svfiprintf_r+0x176>
 8007520:	89ab      	ldrh	r3, [r5, #12]
 8007522:	065b      	lsls	r3, r3, #25
 8007524:	f53f af2c 	bmi.w	8007380 <_svfiprintf_r+0x28>
 8007528:	9809      	ldr	r0, [sp, #36]	; 0x24
 800752a:	b01d      	add	sp, #116	; 0x74
 800752c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007530:	ab03      	add	r3, sp, #12
 8007532:	9300      	str	r3, [sp, #0]
 8007534:	462a      	mov	r2, r5
 8007536:	4b06      	ldr	r3, [pc, #24]	; (8007550 <_svfiprintf_r+0x1f8>)
 8007538:	a904      	add	r1, sp, #16
 800753a:	4638      	mov	r0, r7
 800753c:	f000 f9d4 	bl	80078e8 <_printf_i>
 8007540:	e7eb      	b.n	800751a <_svfiprintf_r+0x1c2>
 8007542:	bf00      	nop
 8007544:	080080d4 	.word	0x080080d4
 8007548:	080080de 	.word	0x080080de
 800754c:	00000000 	.word	0x00000000
 8007550:	080072a1 	.word	0x080072a1
 8007554:	080080da 	.word	0x080080da

08007558 <__sfputc_r>:
 8007558:	6893      	ldr	r3, [r2, #8]
 800755a:	3b01      	subs	r3, #1
 800755c:	2b00      	cmp	r3, #0
 800755e:	b410      	push	{r4}
 8007560:	6093      	str	r3, [r2, #8]
 8007562:	da08      	bge.n	8007576 <__sfputc_r+0x1e>
 8007564:	6994      	ldr	r4, [r2, #24]
 8007566:	42a3      	cmp	r3, r4
 8007568:	db01      	blt.n	800756e <__sfputc_r+0x16>
 800756a:	290a      	cmp	r1, #10
 800756c:	d103      	bne.n	8007576 <__sfputc_r+0x1e>
 800756e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007572:	f7ff bad5 	b.w	8006b20 <__swbuf_r>
 8007576:	6813      	ldr	r3, [r2, #0]
 8007578:	1c58      	adds	r0, r3, #1
 800757a:	6010      	str	r0, [r2, #0]
 800757c:	7019      	strb	r1, [r3, #0]
 800757e:	4608      	mov	r0, r1
 8007580:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007584:	4770      	bx	lr

08007586 <__sfputs_r>:
 8007586:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007588:	4606      	mov	r6, r0
 800758a:	460f      	mov	r7, r1
 800758c:	4614      	mov	r4, r2
 800758e:	18d5      	adds	r5, r2, r3
 8007590:	42ac      	cmp	r4, r5
 8007592:	d101      	bne.n	8007598 <__sfputs_r+0x12>
 8007594:	2000      	movs	r0, #0
 8007596:	e007      	b.n	80075a8 <__sfputs_r+0x22>
 8007598:	f814 1b01 	ldrb.w	r1, [r4], #1
 800759c:	463a      	mov	r2, r7
 800759e:	4630      	mov	r0, r6
 80075a0:	f7ff ffda 	bl	8007558 <__sfputc_r>
 80075a4:	1c43      	adds	r3, r0, #1
 80075a6:	d1f3      	bne.n	8007590 <__sfputs_r+0xa>
 80075a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080075ac <_vfiprintf_r>:
 80075ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075b0:	460d      	mov	r5, r1
 80075b2:	b09d      	sub	sp, #116	; 0x74
 80075b4:	4614      	mov	r4, r2
 80075b6:	4698      	mov	r8, r3
 80075b8:	4606      	mov	r6, r0
 80075ba:	b118      	cbz	r0, 80075c4 <_vfiprintf_r+0x18>
 80075bc:	6983      	ldr	r3, [r0, #24]
 80075be:	b90b      	cbnz	r3, 80075c4 <_vfiprintf_r+0x18>
 80075c0:	f7ff fc88 	bl	8006ed4 <__sinit>
 80075c4:	4b89      	ldr	r3, [pc, #548]	; (80077ec <_vfiprintf_r+0x240>)
 80075c6:	429d      	cmp	r5, r3
 80075c8:	d11b      	bne.n	8007602 <_vfiprintf_r+0x56>
 80075ca:	6875      	ldr	r5, [r6, #4]
 80075cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80075ce:	07d9      	lsls	r1, r3, #31
 80075d0:	d405      	bmi.n	80075de <_vfiprintf_r+0x32>
 80075d2:	89ab      	ldrh	r3, [r5, #12]
 80075d4:	059a      	lsls	r2, r3, #22
 80075d6:	d402      	bmi.n	80075de <_vfiprintf_r+0x32>
 80075d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80075da:	f7ff fd19 	bl	8007010 <__retarget_lock_acquire_recursive>
 80075de:	89ab      	ldrh	r3, [r5, #12]
 80075e0:	071b      	lsls	r3, r3, #28
 80075e2:	d501      	bpl.n	80075e8 <_vfiprintf_r+0x3c>
 80075e4:	692b      	ldr	r3, [r5, #16]
 80075e6:	b9eb      	cbnz	r3, 8007624 <_vfiprintf_r+0x78>
 80075e8:	4629      	mov	r1, r5
 80075ea:	4630      	mov	r0, r6
 80075ec:	f7ff faea 	bl	8006bc4 <__swsetup_r>
 80075f0:	b1c0      	cbz	r0, 8007624 <_vfiprintf_r+0x78>
 80075f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80075f4:	07dc      	lsls	r4, r3, #31
 80075f6:	d50e      	bpl.n	8007616 <_vfiprintf_r+0x6a>
 80075f8:	f04f 30ff 	mov.w	r0, #4294967295
 80075fc:	b01d      	add	sp, #116	; 0x74
 80075fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007602:	4b7b      	ldr	r3, [pc, #492]	; (80077f0 <_vfiprintf_r+0x244>)
 8007604:	429d      	cmp	r5, r3
 8007606:	d101      	bne.n	800760c <_vfiprintf_r+0x60>
 8007608:	68b5      	ldr	r5, [r6, #8]
 800760a:	e7df      	b.n	80075cc <_vfiprintf_r+0x20>
 800760c:	4b79      	ldr	r3, [pc, #484]	; (80077f4 <_vfiprintf_r+0x248>)
 800760e:	429d      	cmp	r5, r3
 8007610:	bf08      	it	eq
 8007612:	68f5      	ldreq	r5, [r6, #12]
 8007614:	e7da      	b.n	80075cc <_vfiprintf_r+0x20>
 8007616:	89ab      	ldrh	r3, [r5, #12]
 8007618:	0598      	lsls	r0, r3, #22
 800761a:	d4ed      	bmi.n	80075f8 <_vfiprintf_r+0x4c>
 800761c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800761e:	f7ff fcf8 	bl	8007012 <__retarget_lock_release_recursive>
 8007622:	e7e9      	b.n	80075f8 <_vfiprintf_r+0x4c>
 8007624:	2300      	movs	r3, #0
 8007626:	9309      	str	r3, [sp, #36]	; 0x24
 8007628:	2320      	movs	r3, #32
 800762a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800762e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007632:	2330      	movs	r3, #48	; 0x30
 8007634:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80077f8 <_vfiprintf_r+0x24c>
 8007638:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800763c:	f04f 0901 	mov.w	r9, #1
 8007640:	4623      	mov	r3, r4
 8007642:	469a      	mov	sl, r3
 8007644:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007648:	b10a      	cbz	r2, 800764e <_vfiprintf_r+0xa2>
 800764a:	2a25      	cmp	r2, #37	; 0x25
 800764c:	d1f9      	bne.n	8007642 <_vfiprintf_r+0x96>
 800764e:	ebba 0b04 	subs.w	fp, sl, r4
 8007652:	d00b      	beq.n	800766c <_vfiprintf_r+0xc0>
 8007654:	465b      	mov	r3, fp
 8007656:	4622      	mov	r2, r4
 8007658:	4629      	mov	r1, r5
 800765a:	4630      	mov	r0, r6
 800765c:	f7ff ff93 	bl	8007586 <__sfputs_r>
 8007660:	3001      	adds	r0, #1
 8007662:	f000 80aa 	beq.w	80077ba <_vfiprintf_r+0x20e>
 8007666:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007668:	445a      	add	r2, fp
 800766a:	9209      	str	r2, [sp, #36]	; 0x24
 800766c:	f89a 3000 	ldrb.w	r3, [sl]
 8007670:	2b00      	cmp	r3, #0
 8007672:	f000 80a2 	beq.w	80077ba <_vfiprintf_r+0x20e>
 8007676:	2300      	movs	r3, #0
 8007678:	f04f 32ff 	mov.w	r2, #4294967295
 800767c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007680:	f10a 0a01 	add.w	sl, sl, #1
 8007684:	9304      	str	r3, [sp, #16]
 8007686:	9307      	str	r3, [sp, #28]
 8007688:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800768c:	931a      	str	r3, [sp, #104]	; 0x68
 800768e:	4654      	mov	r4, sl
 8007690:	2205      	movs	r2, #5
 8007692:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007696:	4858      	ldr	r0, [pc, #352]	; (80077f8 <_vfiprintf_r+0x24c>)
 8007698:	f7f8 fda2 	bl	80001e0 <memchr>
 800769c:	9a04      	ldr	r2, [sp, #16]
 800769e:	b9d8      	cbnz	r0, 80076d8 <_vfiprintf_r+0x12c>
 80076a0:	06d1      	lsls	r1, r2, #27
 80076a2:	bf44      	itt	mi
 80076a4:	2320      	movmi	r3, #32
 80076a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076aa:	0713      	lsls	r3, r2, #28
 80076ac:	bf44      	itt	mi
 80076ae:	232b      	movmi	r3, #43	; 0x2b
 80076b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076b4:	f89a 3000 	ldrb.w	r3, [sl]
 80076b8:	2b2a      	cmp	r3, #42	; 0x2a
 80076ba:	d015      	beq.n	80076e8 <_vfiprintf_r+0x13c>
 80076bc:	9a07      	ldr	r2, [sp, #28]
 80076be:	4654      	mov	r4, sl
 80076c0:	2000      	movs	r0, #0
 80076c2:	f04f 0c0a 	mov.w	ip, #10
 80076c6:	4621      	mov	r1, r4
 80076c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80076cc:	3b30      	subs	r3, #48	; 0x30
 80076ce:	2b09      	cmp	r3, #9
 80076d0:	d94e      	bls.n	8007770 <_vfiprintf_r+0x1c4>
 80076d2:	b1b0      	cbz	r0, 8007702 <_vfiprintf_r+0x156>
 80076d4:	9207      	str	r2, [sp, #28]
 80076d6:	e014      	b.n	8007702 <_vfiprintf_r+0x156>
 80076d8:	eba0 0308 	sub.w	r3, r0, r8
 80076dc:	fa09 f303 	lsl.w	r3, r9, r3
 80076e0:	4313      	orrs	r3, r2
 80076e2:	9304      	str	r3, [sp, #16]
 80076e4:	46a2      	mov	sl, r4
 80076e6:	e7d2      	b.n	800768e <_vfiprintf_r+0xe2>
 80076e8:	9b03      	ldr	r3, [sp, #12]
 80076ea:	1d19      	adds	r1, r3, #4
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	9103      	str	r1, [sp, #12]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	bfbb      	ittet	lt
 80076f4:	425b      	neglt	r3, r3
 80076f6:	f042 0202 	orrlt.w	r2, r2, #2
 80076fa:	9307      	strge	r3, [sp, #28]
 80076fc:	9307      	strlt	r3, [sp, #28]
 80076fe:	bfb8      	it	lt
 8007700:	9204      	strlt	r2, [sp, #16]
 8007702:	7823      	ldrb	r3, [r4, #0]
 8007704:	2b2e      	cmp	r3, #46	; 0x2e
 8007706:	d10c      	bne.n	8007722 <_vfiprintf_r+0x176>
 8007708:	7863      	ldrb	r3, [r4, #1]
 800770a:	2b2a      	cmp	r3, #42	; 0x2a
 800770c:	d135      	bne.n	800777a <_vfiprintf_r+0x1ce>
 800770e:	9b03      	ldr	r3, [sp, #12]
 8007710:	1d1a      	adds	r2, r3, #4
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	9203      	str	r2, [sp, #12]
 8007716:	2b00      	cmp	r3, #0
 8007718:	bfb8      	it	lt
 800771a:	f04f 33ff 	movlt.w	r3, #4294967295
 800771e:	3402      	adds	r4, #2
 8007720:	9305      	str	r3, [sp, #20]
 8007722:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007808 <_vfiprintf_r+0x25c>
 8007726:	7821      	ldrb	r1, [r4, #0]
 8007728:	2203      	movs	r2, #3
 800772a:	4650      	mov	r0, sl
 800772c:	f7f8 fd58 	bl	80001e0 <memchr>
 8007730:	b140      	cbz	r0, 8007744 <_vfiprintf_r+0x198>
 8007732:	2340      	movs	r3, #64	; 0x40
 8007734:	eba0 000a 	sub.w	r0, r0, sl
 8007738:	fa03 f000 	lsl.w	r0, r3, r0
 800773c:	9b04      	ldr	r3, [sp, #16]
 800773e:	4303      	orrs	r3, r0
 8007740:	3401      	adds	r4, #1
 8007742:	9304      	str	r3, [sp, #16]
 8007744:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007748:	482c      	ldr	r0, [pc, #176]	; (80077fc <_vfiprintf_r+0x250>)
 800774a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800774e:	2206      	movs	r2, #6
 8007750:	f7f8 fd46 	bl	80001e0 <memchr>
 8007754:	2800      	cmp	r0, #0
 8007756:	d03f      	beq.n	80077d8 <_vfiprintf_r+0x22c>
 8007758:	4b29      	ldr	r3, [pc, #164]	; (8007800 <_vfiprintf_r+0x254>)
 800775a:	bb1b      	cbnz	r3, 80077a4 <_vfiprintf_r+0x1f8>
 800775c:	9b03      	ldr	r3, [sp, #12]
 800775e:	3307      	adds	r3, #7
 8007760:	f023 0307 	bic.w	r3, r3, #7
 8007764:	3308      	adds	r3, #8
 8007766:	9303      	str	r3, [sp, #12]
 8007768:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800776a:	443b      	add	r3, r7
 800776c:	9309      	str	r3, [sp, #36]	; 0x24
 800776e:	e767      	b.n	8007640 <_vfiprintf_r+0x94>
 8007770:	fb0c 3202 	mla	r2, ip, r2, r3
 8007774:	460c      	mov	r4, r1
 8007776:	2001      	movs	r0, #1
 8007778:	e7a5      	b.n	80076c6 <_vfiprintf_r+0x11a>
 800777a:	2300      	movs	r3, #0
 800777c:	3401      	adds	r4, #1
 800777e:	9305      	str	r3, [sp, #20]
 8007780:	4619      	mov	r1, r3
 8007782:	f04f 0c0a 	mov.w	ip, #10
 8007786:	4620      	mov	r0, r4
 8007788:	f810 2b01 	ldrb.w	r2, [r0], #1
 800778c:	3a30      	subs	r2, #48	; 0x30
 800778e:	2a09      	cmp	r2, #9
 8007790:	d903      	bls.n	800779a <_vfiprintf_r+0x1ee>
 8007792:	2b00      	cmp	r3, #0
 8007794:	d0c5      	beq.n	8007722 <_vfiprintf_r+0x176>
 8007796:	9105      	str	r1, [sp, #20]
 8007798:	e7c3      	b.n	8007722 <_vfiprintf_r+0x176>
 800779a:	fb0c 2101 	mla	r1, ip, r1, r2
 800779e:	4604      	mov	r4, r0
 80077a0:	2301      	movs	r3, #1
 80077a2:	e7f0      	b.n	8007786 <_vfiprintf_r+0x1da>
 80077a4:	ab03      	add	r3, sp, #12
 80077a6:	9300      	str	r3, [sp, #0]
 80077a8:	462a      	mov	r2, r5
 80077aa:	4b16      	ldr	r3, [pc, #88]	; (8007804 <_vfiprintf_r+0x258>)
 80077ac:	a904      	add	r1, sp, #16
 80077ae:	4630      	mov	r0, r6
 80077b0:	f3af 8000 	nop.w
 80077b4:	4607      	mov	r7, r0
 80077b6:	1c78      	adds	r0, r7, #1
 80077b8:	d1d6      	bne.n	8007768 <_vfiprintf_r+0x1bc>
 80077ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80077bc:	07d9      	lsls	r1, r3, #31
 80077be:	d405      	bmi.n	80077cc <_vfiprintf_r+0x220>
 80077c0:	89ab      	ldrh	r3, [r5, #12]
 80077c2:	059a      	lsls	r2, r3, #22
 80077c4:	d402      	bmi.n	80077cc <_vfiprintf_r+0x220>
 80077c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80077c8:	f7ff fc23 	bl	8007012 <__retarget_lock_release_recursive>
 80077cc:	89ab      	ldrh	r3, [r5, #12]
 80077ce:	065b      	lsls	r3, r3, #25
 80077d0:	f53f af12 	bmi.w	80075f8 <_vfiprintf_r+0x4c>
 80077d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80077d6:	e711      	b.n	80075fc <_vfiprintf_r+0x50>
 80077d8:	ab03      	add	r3, sp, #12
 80077da:	9300      	str	r3, [sp, #0]
 80077dc:	462a      	mov	r2, r5
 80077de:	4b09      	ldr	r3, [pc, #36]	; (8007804 <_vfiprintf_r+0x258>)
 80077e0:	a904      	add	r1, sp, #16
 80077e2:	4630      	mov	r0, r6
 80077e4:	f000 f880 	bl	80078e8 <_printf_i>
 80077e8:	e7e4      	b.n	80077b4 <_vfiprintf_r+0x208>
 80077ea:	bf00      	nop
 80077ec:	08008094 	.word	0x08008094
 80077f0:	080080b4 	.word	0x080080b4
 80077f4:	08008074 	.word	0x08008074
 80077f8:	080080d4 	.word	0x080080d4
 80077fc:	080080de 	.word	0x080080de
 8007800:	00000000 	.word	0x00000000
 8007804:	08007587 	.word	0x08007587
 8007808:	080080da 	.word	0x080080da

0800780c <_printf_common>:
 800780c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007810:	4616      	mov	r6, r2
 8007812:	4699      	mov	r9, r3
 8007814:	688a      	ldr	r2, [r1, #8]
 8007816:	690b      	ldr	r3, [r1, #16]
 8007818:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800781c:	4293      	cmp	r3, r2
 800781e:	bfb8      	it	lt
 8007820:	4613      	movlt	r3, r2
 8007822:	6033      	str	r3, [r6, #0]
 8007824:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007828:	4607      	mov	r7, r0
 800782a:	460c      	mov	r4, r1
 800782c:	b10a      	cbz	r2, 8007832 <_printf_common+0x26>
 800782e:	3301      	adds	r3, #1
 8007830:	6033      	str	r3, [r6, #0]
 8007832:	6823      	ldr	r3, [r4, #0]
 8007834:	0699      	lsls	r1, r3, #26
 8007836:	bf42      	ittt	mi
 8007838:	6833      	ldrmi	r3, [r6, #0]
 800783a:	3302      	addmi	r3, #2
 800783c:	6033      	strmi	r3, [r6, #0]
 800783e:	6825      	ldr	r5, [r4, #0]
 8007840:	f015 0506 	ands.w	r5, r5, #6
 8007844:	d106      	bne.n	8007854 <_printf_common+0x48>
 8007846:	f104 0a19 	add.w	sl, r4, #25
 800784a:	68e3      	ldr	r3, [r4, #12]
 800784c:	6832      	ldr	r2, [r6, #0]
 800784e:	1a9b      	subs	r3, r3, r2
 8007850:	42ab      	cmp	r3, r5
 8007852:	dc26      	bgt.n	80078a2 <_printf_common+0x96>
 8007854:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007858:	1e13      	subs	r3, r2, #0
 800785a:	6822      	ldr	r2, [r4, #0]
 800785c:	bf18      	it	ne
 800785e:	2301      	movne	r3, #1
 8007860:	0692      	lsls	r2, r2, #26
 8007862:	d42b      	bmi.n	80078bc <_printf_common+0xb0>
 8007864:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007868:	4649      	mov	r1, r9
 800786a:	4638      	mov	r0, r7
 800786c:	47c0      	blx	r8
 800786e:	3001      	adds	r0, #1
 8007870:	d01e      	beq.n	80078b0 <_printf_common+0xa4>
 8007872:	6823      	ldr	r3, [r4, #0]
 8007874:	68e5      	ldr	r5, [r4, #12]
 8007876:	6832      	ldr	r2, [r6, #0]
 8007878:	f003 0306 	and.w	r3, r3, #6
 800787c:	2b04      	cmp	r3, #4
 800787e:	bf08      	it	eq
 8007880:	1aad      	subeq	r5, r5, r2
 8007882:	68a3      	ldr	r3, [r4, #8]
 8007884:	6922      	ldr	r2, [r4, #16]
 8007886:	bf0c      	ite	eq
 8007888:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800788c:	2500      	movne	r5, #0
 800788e:	4293      	cmp	r3, r2
 8007890:	bfc4      	itt	gt
 8007892:	1a9b      	subgt	r3, r3, r2
 8007894:	18ed      	addgt	r5, r5, r3
 8007896:	2600      	movs	r6, #0
 8007898:	341a      	adds	r4, #26
 800789a:	42b5      	cmp	r5, r6
 800789c:	d11a      	bne.n	80078d4 <_printf_common+0xc8>
 800789e:	2000      	movs	r0, #0
 80078a0:	e008      	b.n	80078b4 <_printf_common+0xa8>
 80078a2:	2301      	movs	r3, #1
 80078a4:	4652      	mov	r2, sl
 80078a6:	4649      	mov	r1, r9
 80078a8:	4638      	mov	r0, r7
 80078aa:	47c0      	blx	r8
 80078ac:	3001      	adds	r0, #1
 80078ae:	d103      	bne.n	80078b8 <_printf_common+0xac>
 80078b0:	f04f 30ff 	mov.w	r0, #4294967295
 80078b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078b8:	3501      	adds	r5, #1
 80078ba:	e7c6      	b.n	800784a <_printf_common+0x3e>
 80078bc:	18e1      	adds	r1, r4, r3
 80078be:	1c5a      	adds	r2, r3, #1
 80078c0:	2030      	movs	r0, #48	; 0x30
 80078c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80078c6:	4422      	add	r2, r4
 80078c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80078cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80078d0:	3302      	adds	r3, #2
 80078d2:	e7c7      	b.n	8007864 <_printf_common+0x58>
 80078d4:	2301      	movs	r3, #1
 80078d6:	4622      	mov	r2, r4
 80078d8:	4649      	mov	r1, r9
 80078da:	4638      	mov	r0, r7
 80078dc:	47c0      	blx	r8
 80078de:	3001      	adds	r0, #1
 80078e0:	d0e6      	beq.n	80078b0 <_printf_common+0xa4>
 80078e2:	3601      	adds	r6, #1
 80078e4:	e7d9      	b.n	800789a <_printf_common+0x8e>
	...

080078e8 <_printf_i>:
 80078e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80078ec:	7e0f      	ldrb	r7, [r1, #24]
 80078ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80078f0:	2f78      	cmp	r7, #120	; 0x78
 80078f2:	4691      	mov	r9, r2
 80078f4:	4680      	mov	r8, r0
 80078f6:	460c      	mov	r4, r1
 80078f8:	469a      	mov	sl, r3
 80078fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80078fe:	d807      	bhi.n	8007910 <_printf_i+0x28>
 8007900:	2f62      	cmp	r7, #98	; 0x62
 8007902:	d80a      	bhi.n	800791a <_printf_i+0x32>
 8007904:	2f00      	cmp	r7, #0
 8007906:	f000 80d8 	beq.w	8007aba <_printf_i+0x1d2>
 800790a:	2f58      	cmp	r7, #88	; 0x58
 800790c:	f000 80a3 	beq.w	8007a56 <_printf_i+0x16e>
 8007910:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007914:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007918:	e03a      	b.n	8007990 <_printf_i+0xa8>
 800791a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800791e:	2b15      	cmp	r3, #21
 8007920:	d8f6      	bhi.n	8007910 <_printf_i+0x28>
 8007922:	a101      	add	r1, pc, #4	; (adr r1, 8007928 <_printf_i+0x40>)
 8007924:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007928:	08007981 	.word	0x08007981
 800792c:	08007995 	.word	0x08007995
 8007930:	08007911 	.word	0x08007911
 8007934:	08007911 	.word	0x08007911
 8007938:	08007911 	.word	0x08007911
 800793c:	08007911 	.word	0x08007911
 8007940:	08007995 	.word	0x08007995
 8007944:	08007911 	.word	0x08007911
 8007948:	08007911 	.word	0x08007911
 800794c:	08007911 	.word	0x08007911
 8007950:	08007911 	.word	0x08007911
 8007954:	08007aa1 	.word	0x08007aa1
 8007958:	080079c5 	.word	0x080079c5
 800795c:	08007a83 	.word	0x08007a83
 8007960:	08007911 	.word	0x08007911
 8007964:	08007911 	.word	0x08007911
 8007968:	08007ac3 	.word	0x08007ac3
 800796c:	08007911 	.word	0x08007911
 8007970:	080079c5 	.word	0x080079c5
 8007974:	08007911 	.word	0x08007911
 8007978:	08007911 	.word	0x08007911
 800797c:	08007a8b 	.word	0x08007a8b
 8007980:	682b      	ldr	r3, [r5, #0]
 8007982:	1d1a      	adds	r2, r3, #4
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	602a      	str	r2, [r5, #0]
 8007988:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800798c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007990:	2301      	movs	r3, #1
 8007992:	e0a3      	b.n	8007adc <_printf_i+0x1f4>
 8007994:	6820      	ldr	r0, [r4, #0]
 8007996:	6829      	ldr	r1, [r5, #0]
 8007998:	0606      	lsls	r6, r0, #24
 800799a:	f101 0304 	add.w	r3, r1, #4
 800799e:	d50a      	bpl.n	80079b6 <_printf_i+0xce>
 80079a0:	680e      	ldr	r6, [r1, #0]
 80079a2:	602b      	str	r3, [r5, #0]
 80079a4:	2e00      	cmp	r6, #0
 80079a6:	da03      	bge.n	80079b0 <_printf_i+0xc8>
 80079a8:	232d      	movs	r3, #45	; 0x2d
 80079aa:	4276      	negs	r6, r6
 80079ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079b0:	485e      	ldr	r0, [pc, #376]	; (8007b2c <_printf_i+0x244>)
 80079b2:	230a      	movs	r3, #10
 80079b4:	e019      	b.n	80079ea <_printf_i+0x102>
 80079b6:	680e      	ldr	r6, [r1, #0]
 80079b8:	602b      	str	r3, [r5, #0]
 80079ba:	f010 0f40 	tst.w	r0, #64	; 0x40
 80079be:	bf18      	it	ne
 80079c0:	b236      	sxthne	r6, r6
 80079c2:	e7ef      	b.n	80079a4 <_printf_i+0xbc>
 80079c4:	682b      	ldr	r3, [r5, #0]
 80079c6:	6820      	ldr	r0, [r4, #0]
 80079c8:	1d19      	adds	r1, r3, #4
 80079ca:	6029      	str	r1, [r5, #0]
 80079cc:	0601      	lsls	r1, r0, #24
 80079ce:	d501      	bpl.n	80079d4 <_printf_i+0xec>
 80079d0:	681e      	ldr	r6, [r3, #0]
 80079d2:	e002      	b.n	80079da <_printf_i+0xf2>
 80079d4:	0646      	lsls	r6, r0, #25
 80079d6:	d5fb      	bpl.n	80079d0 <_printf_i+0xe8>
 80079d8:	881e      	ldrh	r6, [r3, #0]
 80079da:	4854      	ldr	r0, [pc, #336]	; (8007b2c <_printf_i+0x244>)
 80079dc:	2f6f      	cmp	r7, #111	; 0x6f
 80079de:	bf0c      	ite	eq
 80079e0:	2308      	moveq	r3, #8
 80079e2:	230a      	movne	r3, #10
 80079e4:	2100      	movs	r1, #0
 80079e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80079ea:	6865      	ldr	r5, [r4, #4]
 80079ec:	60a5      	str	r5, [r4, #8]
 80079ee:	2d00      	cmp	r5, #0
 80079f0:	bfa2      	ittt	ge
 80079f2:	6821      	ldrge	r1, [r4, #0]
 80079f4:	f021 0104 	bicge.w	r1, r1, #4
 80079f8:	6021      	strge	r1, [r4, #0]
 80079fa:	b90e      	cbnz	r6, 8007a00 <_printf_i+0x118>
 80079fc:	2d00      	cmp	r5, #0
 80079fe:	d04d      	beq.n	8007a9c <_printf_i+0x1b4>
 8007a00:	4615      	mov	r5, r2
 8007a02:	fbb6 f1f3 	udiv	r1, r6, r3
 8007a06:	fb03 6711 	mls	r7, r3, r1, r6
 8007a0a:	5dc7      	ldrb	r7, [r0, r7]
 8007a0c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007a10:	4637      	mov	r7, r6
 8007a12:	42bb      	cmp	r3, r7
 8007a14:	460e      	mov	r6, r1
 8007a16:	d9f4      	bls.n	8007a02 <_printf_i+0x11a>
 8007a18:	2b08      	cmp	r3, #8
 8007a1a:	d10b      	bne.n	8007a34 <_printf_i+0x14c>
 8007a1c:	6823      	ldr	r3, [r4, #0]
 8007a1e:	07de      	lsls	r6, r3, #31
 8007a20:	d508      	bpl.n	8007a34 <_printf_i+0x14c>
 8007a22:	6923      	ldr	r3, [r4, #16]
 8007a24:	6861      	ldr	r1, [r4, #4]
 8007a26:	4299      	cmp	r1, r3
 8007a28:	bfde      	ittt	le
 8007a2a:	2330      	movle	r3, #48	; 0x30
 8007a2c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007a30:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007a34:	1b52      	subs	r2, r2, r5
 8007a36:	6122      	str	r2, [r4, #16]
 8007a38:	f8cd a000 	str.w	sl, [sp]
 8007a3c:	464b      	mov	r3, r9
 8007a3e:	aa03      	add	r2, sp, #12
 8007a40:	4621      	mov	r1, r4
 8007a42:	4640      	mov	r0, r8
 8007a44:	f7ff fee2 	bl	800780c <_printf_common>
 8007a48:	3001      	adds	r0, #1
 8007a4a:	d14c      	bne.n	8007ae6 <_printf_i+0x1fe>
 8007a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a50:	b004      	add	sp, #16
 8007a52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a56:	4835      	ldr	r0, [pc, #212]	; (8007b2c <_printf_i+0x244>)
 8007a58:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007a5c:	6829      	ldr	r1, [r5, #0]
 8007a5e:	6823      	ldr	r3, [r4, #0]
 8007a60:	f851 6b04 	ldr.w	r6, [r1], #4
 8007a64:	6029      	str	r1, [r5, #0]
 8007a66:	061d      	lsls	r5, r3, #24
 8007a68:	d514      	bpl.n	8007a94 <_printf_i+0x1ac>
 8007a6a:	07df      	lsls	r7, r3, #31
 8007a6c:	bf44      	itt	mi
 8007a6e:	f043 0320 	orrmi.w	r3, r3, #32
 8007a72:	6023      	strmi	r3, [r4, #0]
 8007a74:	b91e      	cbnz	r6, 8007a7e <_printf_i+0x196>
 8007a76:	6823      	ldr	r3, [r4, #0]
 8007a78:	f023 0320 	bic.w	r3, r3, #32
 8007a7c:	6023      	str	r3, [r4, #0]
 8007a7e:	2310      	movs	r3, #16
 8007a80:	e7b0      	b.n	80079e4 <_printf_i+0xfc>
 8007a82:	6823      	ldr	r3, [r4, #0]
 8007a84:	f043 0320 	orr.w	r3, r3, #32
 8007a88:	6023      	str	r3, [r4, #0]
 8007a8a:	2378      	movs	r3, #120	; 0x78
 8007a8c:	4828      	ldr	r0, [pc, #160]	; (8007b30 <_printf_i+0x248>)
 8007a8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007a92:	e7e3      	b.n	8007a5c <_printf_i+0x174>
 8007a94:	0659      	lsls	r1, r3, #25
 8007a96:	bf48      	it	mi
 8007a98:	b2b6      	uxthmi	r6, r6
 8007a9a:	e7e6      	b.n	8007a6a <_printf_i+0x182>
 8007a9c:	4615      	mov	r5, r2
 8007a9e:	e7bb      	b.n	8007a18 <_printf_i+0x130>
 8007aa0:	682b      	ldr	r3, [r5, #0]
 8007aa2:	6826      	ldr	r6, [r4, #0]
 8007aa4:	6961      	ldr	r1, [r4, #20]
 8007aa6:	1d18      	adds	r0, r3, #4
 8007aa8:	6028      	str	r0, [r5, #0]
 8007aaa:	0635      	lsls	r5, r6, #24
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	d501      	bpl.n	8007ab4 <_printf_i+0x1cc>
 8007ab0:	6019      	str	r1, [r3, #0]
 8007ab2:	e002      	b.n	8007aba <_printf_i+0x1d2>
 8007ab4:	0670      	lsls	r0, r6, #25
 8007ab6:	d5fb      	bpl.n	8007ab0 <_printf_i+0x1c8>
 8007ab8:	8019      	strh	r1, [r3, #0]
 8007aba:	2300      	movs	r3, #0
 8007abc:	6123      	str	r3, [r4, #16]
 8007abe:	4615      	mov	r5, r2
 8007ac0:	e7ba      	b.n	8007a38 <_printf_i+0x150>
 8007ac2:	682b      	ldr	r3, [r5, #0]
 8007ac4:	1d1a      	adds	r2, r3, #4
 8007ac6:	602a      	str	r2, [r5, #0]
 8007ac8:	681d      	ldr	r5, [r3, #0]
 8007aca:	6862      	ldr	r2, [r4, #4]
 8007acc:	2100      	movs	r1, #0
 8007ace:	4628      	mov	r0, r5
 8007ad0:	f7f8 fb86 	bl	80001e0 <memchr>
 8007ad4:	b108      	cbz	r0, 8007ada <_printf_i+0x1f2>
 8007ad6:	1b40      	subs	r0, r0, r5
 8007ad8:	6060      	str	r0, [r4, #4]
 8007ada:	6863      	ldr	r3, [r4, #4]
 8007adc:	6123      	str	r3, [r4, #16]
 8007ade:	2300      	movs	r3, #0
 8007ae0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ae4:	e7a8      	b.n	8007a38 <_printf_i+0x150>
 8007ae6:	6923      	ldr	r3, [r4, #16]
 8007ae8:	462a      	mov	r2, r5
 8007aea:	4649      	mov	r1, r9
 8007aec:	4640      	mov	r0, r8
 8007aee:	47d0      	blx	sl
 8007af0:	3001      	adds	r0, #1
 8007af2:	d0ab      	beq.n	8007a4c <_printf_i+0x164>
 8007af4:	6823      	ldr	r3, [r4, #0]
 8007af6:	079b      	lsls	r3, r3, #30
 8007af8:	d413      	bmi.n	8007b22 <_printf_i+0x23a>
 8007afa:	68e0      	ldr	r0, [r4, #12]
 8007afc:	9b03      	ldr	r3, [sp, #12]
 8007afe:	4298      	cmp	r0, r3
 8007b00:	bfb8      	it	lt
 8007b02:	4618      	movlt	r0, r3
 8007b04:	e7a4      	b.n	8007a50 <_printf_i+0x168>
 8007b06:	2301      	movs	r3, #1
 8007b08:	4632      	mov	r2, r6
 8007b0a:	4649      	mov	r1, r9
 8007b0c:	4640      	mov	r0, r8
 8007b0e:	47d0      	blx	sl
 8007b10:	3001      	adds	r0, #1
 8007b12:	d09b      	beq.n	8007a4c <_printf_i+0x164>
 8007b14:	3501      	adds	r5, #1
 8007b16:	68e3      	ldr	r3, [r4, #12]
 8007b18:	9903      	ldr	r1, [sp, #12]
 8007b1a:	1a5b      	subs	r3, r3, r1
 8007b1c:	42ab      	cmp	r3, r5
 8007b1e:	dcf2      	bgt.n	8007b06 <_printf_i+0x21e>
 8007b20:	e7eb      	b.n	8007afa <_printf_i+0x212>
 8007b22:	2500      	movs	r5, #0
 8007b24:	f104 0619 	add.w	r6, r4, #25
 8007b28:	e7f5      	b.n	8007b16 <_printf_i+0x22e>
 8007b2a:	bf00      	nop
 8007b2c:	080080e5 	.word	0x080080e5
 8007b30:	080080f6 	.word	0x080080f6

08007b34 <_sbrk_r>:
 8007b34:	b538      	push	{r3, r4, r5, lr}
 8007b36:	4d06      	ldr	r5, [pc, #24]	; (8007b50 <_sbrk_r+0x1c>)
 8007b38:	2300      	movs	r3, #0
 8007b3a:	4604      	mov	r4, r0
 8007b3c:	4608      	mov	r0, r1
 8007b3e:	602b      	str	r3, [r5, #0]
 8007b40:	f7fa faf8 	bl	8002134 <_sbrk>
 8007b44:	1c43      	adds	r3, r0, #1
 8007b46:	d102      	bne.n	8007b4e <_sbrk_r+0x1a>
 8007b48:	682b      	ldr	r3, [r5, #0]
 8007b4a:	b103      	cbz	r3, 8007b4e <_sbrk_r+0x1a>
 8007b4c:	6023      	str	r3, [r4, #0]
 8007b4e:	bd38      	pop	{r3, r4, r5, pc}
 8007b50:	20002f50 	.word	0x20002f50

08007b54 <__sread>:
 8007b54:	b510      	push	{r4, lr}
 8007b56:	460c      	mov	r4, r1
 8007b58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b5c:	f000 f8ea 	bl	8007d34 <_read_r>
 8007b60:	2800      	cmp	r0, #0
 8007b62:	bfab      	itete	ge
 8007b64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007b66:	89a3      	ldrhlt	r3, [r4, #12]
 8007b68:	181b      	addge	r3, r3, r0
 8007b6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007b6e:	bfac      	ite	ge
 8007b70:	6563      	strge	r3, [r4, #84]	; 0x54
 8007b72:	81a3      	strhlt	r3, [r4, #12]
 8007b74:	bd10      	pop	{r4, pc}

08007b76 <__swrite>:
 8007b76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b7a:	461f      	mov	r7, r3
 8007b7c:	898b      	ldrh	r3, [r1, #12]
 8007b7e:	05db      	lsls	r3, r3, #23
 8007b80:	4605      	mov	r5, r0
 8007b82:	460c      	mov	r4, r1
 8007b84:	4616      	mov	r6, r2
 8007b86:	d505      	bpl.n	8007b94 <__swrite+0x1e>
 8007b88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b8c:	2302      	movs	r3, #2
 8007b8e:	2200      	movs	r2, #0
 8007b90:	f000 f868 	bl	8007c64 <_lseek_r>
 8007b94:	89a3      	ldrh	r3, [r4, #12]
 8007b96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b9e:	81a3      	strh	r3, [r4, #12]
 8007ba0:	4632      	mov	r2, r6
 8007ba2:	463b      	mov	r3, r7
 8007ba4:	4628      	mov	r0, r5
 8007ba6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007baa:	f000 b817 	b.w	8007bdc <_write_r>

08007bae <__sseek>:
 8007bae:	b510      	push	{r4, lr}
 8007bb0:	460c      	mov	r4, r1
 8007bb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bb6:	f000 f855 	bl	8007c64 <_lseek_r>
 8007bba:	1c43      	adds	r3, r0, #1
 8007bbc:	89a3      	ldrh	r3, [r4, #12]
 8007bbe:	bf15      	itete	ne
 8007bc0:	6560      	strne	r0, [r4, #84]	; 0x54
 8007bc2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007bc6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007bca:	81a3      	strheq	r3, [r4, #12]
 8007bcc:	bf18      	it	ne
 8007bce:	81a3      	strhne	r3, [r4, #12]
 8007bd0:	bd10      	pop	{r4, pc}

08007bd2 <__sclose>:
 8007bd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bd6:	f000 b813 	b.w	8007c00 <_close_r>
	...

08007bdc <_write_r>:
 8007bdc:	b538      	push	{r3, r4, r5, lr}
 8007bde:	4d07      	ldr	r5, [pc, #28]	; (8007bfc <_write_r+0x20>)
 8007be0:	4604      	mov	r4, r0
 8007be2:	4608      	mov	r0, r1
 8007be4:	4611      	mov	r1, r2
 8007be6:	2200      	movs	r2, #0
 8007be8:	602a      	str	r2, [r5, #0]
 8007bea:	461a      	mov	r2, r3
 8007bec:	f7fa fa51 	bl	8002092 <_write>
 8007bf0:	1c43      	adds	r3, r0, #1
 8007bf2:	d102      	bne.n	8007bfa <_write_r+0x1e>
 8007bf4:	682b      	ldr	r3, [r5, #0]
 8007bf6:	b103      	cbz	r3, 8007bfa <_write_r+0x1e>
 8007bf8:	6023      	str	r3, [r4, #0]
 8007bfa:	bd38      	pop	{r3, r4, r5, pc}
 8007bfc:	20002f50 	.word	0x20002f50

08007c00 <_close_r>:
 8007c00:	b538      	push	{r3, r4, r5, lr}
 8007c02:	4d06      	ldr	r5, [pc, #24]	; (8007c1c <_close_r+0x1c>)
 8007c04:	2300      	movs	r3, #0
 8007c06:	4604      	mov	r4, r0
 8007c08:	4608      	mov	r0, r1
 8007c0a:	602b      	str	r3, [r5, #0]
 8007c0c:	f7fa fa5d 	bl	80020ca <_close>
 8007c10:	1c43      	adds	r3, r0, #1
 8007c12:	d102      	bne.n	8007c1a <_close_r+0x1a>
 8007c14:	682b      	ldr	r3, [r5, #0]
 8007c16:	b103      	cbz	r3, 8007c1a <_close_r+0x1a>
 8007c18:	6023      	str	r3, [r4, #0]
 8007c1a:	bd38      	pop	{r3, r4, r5, pc}
 8007c1c:	20002f50 	.word	0x20002f50

08007c20 <_fstat_r>:
 8007c20:	b538      	push	{r3, r4, r5, lr}
 8007c22:	4d07      	ldr	r5, [pc, #28]	; (8007c40 <_fstat_r+0x20>)
 8007c24:	2300      	movs	r3, #0
 8007c26:	4604      	mov	r4, r0
 8007c28:	4608      	mov	r0, r1
 8007c2a:	4611      	mov	r1, r2
 8007c2c:	602b      	str	r3, [r5, #0]
 8007c2e:	f7fa fa58 	bl	80020e2 <_fstat>
 8007c32:	1c43      	adds	r3, r0, #1
 8007c34:	d102      	bne.n	8007c3c <_fstat_r+0x1c>
 8007c36:	682b      	ldr	r3, [r5, #0]
 8007c38:	b103      	cbz	r3, 8007c3c <_fstat_r+0x1c>
 8007c3a:	6023      	str	r3, [r4, #0]
 8007c3c:	bd38      	pop	{r3, r4, r5, pc}
 8007c3e:	bf00      	nop
 8007c40:	20002f50 	.word	0x20002f50

08007c44 <_isatty_r>:
 8007c44:	b538      	push	{r3, r4, r5, lr}
 8007c46:	4d06      	ldr	r5, [pc, #24]	; (8007c60 <_isatty_r+0x1c>)
 8007c48:	2300      	movs	r3, #0
 8007c4a:	4604      	mov	r4, r0
 8007c4c:	4608      	mov	r0, r1
 8007c4e:	602b      	str	r3, [r5, #0]
 8007c50:	f7fa fa57 	bl	8002102 <_isatty>
 8007c54:	1c43      	adds	r3, r0, #1
 8007c56:	d102      	bne.n	8007c5e <_isatty_r+0x1a>
 8007c58:	682b      	ldr	r3, [r5, #0]
 8007c5a:	b103      	cbz	r3, 8007c5e <_isatty_r+0x1a>
 8007c5c:	6023      	str	r3, [r4, #0]
 8007c5e:	bd38      	pop	{r3, r4, r5, pc}
 8007c60:	20002f50 	.word	0x20002f50

08007c64 <_lseek_r>:
 8007c64:	b538      	push	{r3, r4, r5, lr}
 8007c66:	4d07      	ldr	r5, [pc, #28]	; (8007c84 <_lseek_r+0x20>)
 8007c68:	4604      	mov	r4, r0
 8007c6a:	4608      	mov	r0, r1
 8007c6c:	4611      	mov	r1, r2
 8007c6e:	2200      	movs	r2, #0
 8007c70:	602a      	str	r2, [r5, #0]
 8007c72:	461a      	mov	r2, r3
 8007c74:	f7fa fa50 	bl	8002118 <_lseek>
 8007c78:	1c43      	adds	r3, r0, #1
 8007c7a:	d102      	bne.n	8007c82 <_lseek_r+0x1e>
 8007c7c:	682b      	ldr	r3, [r5, #0]
 8007c7e:	b103      	cbz	r3, 8007c82 <_lseek_r+0x1e>
 8007c80:	6023      	str	r3, [r4, #0]
 8007c82:	bd38      	pop	{r3, r4, r5, pc}
 8007c84:	20002f50 	.word	0x20002f50

08007c88 <memmove>:
 8007c88:	4288      	cmp	r0, r1
 8007c8a:	b510      	push	{r4, lr}
 8007c8c:	eb01 0402 	add.w	r4, r1, r2
 8007c90:	d902      	bls.n	8007c98 <memmove+0x10>
 8007c92:	4284      	cmp	r4, r0
 8007c94:	4623      	mov	r3, r4
 8007c96:	d807      	bhi.n	8007ca8 <memmove+0x20>
 8007c98:	1e43      	subs	r3, r0, #1
 8007c9a:	42a1      	cmp	r1, r4
 8007c9c:	d008      	beq.n	8007cb0 <memmove+0x28>
 8007c9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007ca2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007ca6:	e7f8      	b.n	8007c9a <memmove+0x12>
 8007ca8:	4402      	add	r2, r0
 8007caa:	4601      	mov	r1, r0
 8007cac:	428a      	cmp	r2, r1
 8007cae:	d100      	bne.n	8007cb2 <memmove+0x2a>
 8007cb0:	bd10      	pop	{r4, pc}
 8007cb2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007cb6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007cba:	e7f7      	b.n	8007cac <memmove+0x24>

08007cbc <__malloc_lock>:
 8007cbc:	4801      	ldr	r0, [pc, #4]	; (8007cc4 <__malloc_lock+0x8>)
 8007cbe:	f7ff b9a7 	b.w	8007010 <__retarget_lock_acquire_recursive>
 8007cc2:	bf00      	nop
 8007cc4:	20002f44 	.word	0x20002f44

08007cc8 <__malloc_unlock>:
 8007cc8:	4801      	ldr	r0, [pc, #4]	; (8007cd0 <__malloc_unlock+0x8>)
 8007cca:	f7ff b9a2 	b.w	8007012 <__retarget_lock_release_recursive>
 8007cce:	bf00      	nop
 8007cd0:	20002f44 	.word	0x20002f44

08007cd4 <_realloc_r>:
 8007cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cd8:	4680      	mov	r8, r0
 8007cda:	4614      	mov	r4, r2
 8007cdc:	460e      	mov	r6, r1
 8007cde:	b921      	cbnz	r1, 8007cea <_realloc_r+0x16>
 8007ce0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ce4:	4611      	mov	r1, r2
 8007ce6:	f7ff ba67 	b.w	80071b8 <_malloc_r>
 8007cea:	b92a      	cbnz	r2, 8007cf8 <_realloc_r+0x24>
 8007cec:	f7ff f9f8 	bl	80070e0 <_free_r>
 8007cf0:	4625      	mov	r5, r4
 8007cf2:	4628      	mov	r0, r5
 8007cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cf8:	f000 f82e 	bl	8007d58 <_malloc_usable_size_r>
 8007cfc:	4284      	cmp	r4, r0
 8007cfe:	4607      	mov	r7, r0
 8007d00:	d802      	bhi.n	8007d08 <_realloc_r+0x34>
 8007d02:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007d06:	d812      	bhi.n	8007d2e <_realloc_r+0x5a>
 8007d08:	4621      	mov	r1, r4
 8007d0a:	4640      	mov	r0, r8
 8007d0c:	f7ff fa54 	bl	80071b8 <_malloc_r>
 8007d10:	4605      	mov	r5, r0
 8007d12:	2800      	cmp	r0, #0
 8007d14:	d0ed      	beq.n	8007cf2 <_realloc_r+0x1e>
 8007d16:	42bc      	cmp	r4, r7
 8007d18:	4622      	mov	r2, r4
 8007d1a:	4631      	mov	r1, r6
 8007d1c:	bf28      	it	cs
 8007d1e:	463a      	movcs	r2, r7
 8007d20:	f7fe fe3a 	bl	8006998 <memcpy>
 8007d24:	4631      	mov	r1, r6
 8007d26:	4640      	mov	r0, r8
 8007d28:	f7ff f9da 	bl	80070e0 <_free_r>
 8007d2c:	e7e1      	b.n	8007cf2 <_realloc_r+0x1e>
 8007d2e:	4635      	mov	r5, r6
 8007d30:	e7df      	b.n	8007cf2 <_realloc_r+0x1e>
	...

08007d34 <_read_r>:
 8007d34:	b538      	push	{r3, r4, r5, lr}
 8007d36:	4d07      	ldr	r5, [pc, #28]	; (8007d54 <_read_r+0x20>)
 8007d38:	4604      	mov	r4, r0
 8007d3a:	4608      	mov	r0, r1
 8007d3c:	4611      	mov	r1, r2
 8007d3e:	2200      	movs	r2, #0
 8007d40:	602a      	str	r2, [r5, #0]
 8007d42:	461a      	mov	r2, r3
 8007d44:	f7fa f988 	bl	8002058 <_read>
 8007d48:	1c43      	adds	r3, r0, #1
 8007d4a:	d102      	bne.n	8007d52 <_read_r+0x1e>
 8007d4c:	682b      	ldr	r3, [r5, #0]
 8007d4e:	b103      	cbz	r3, 8007d52 <_read_r+0x1e>
 8007d50:	6023      	str	r3, [r4, #0]
 8007d52:	bd38      	pop	{r3, r4, r5, pc}
 8007d54:	20002f50 	.word	0x20002f50

08007d58 <_malloc_usable_size_r>:
 8007d58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d5c:	1f18      	subs	r0, r3, #4
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	bfbc      	itt	lt
 8007d62:	580b      	ldrlt	r3, [r1, r0]
 8007d64:	18c0      	addlt	r0, r0, r3
 8007d66:	4770      	bx	lr

08007d68 <_init>:
 8007d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d6a:	bf00      	nop
 8007d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d6e:	bc08      	pop	{r3}
 8007d70:	469e      	mov	lr, r3
 8007d72:	4770      	bx	lr

08007d74 <_fini>:
 8007d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d76:	bf00      	nop
 8007d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d7a:	bc08      	pop	{r3}
 8007d7c:	469e      	mov	lr, r3
 8007d7e:	4770      	bx	lr
