
display_new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b18  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e8  08005ca8  08005ca8  00015ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f90  08005f90  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08005f90  08005f90  00015f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f98  08005f98  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f98  08005f98  00015f98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f9c  08005f9c  00015f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005fa0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002e40  20000078  08006018  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002eb8  08006018  00022eb8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000125aa  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c2f  00000000  00000000  00032652  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f58  00000000  00000000  00035288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e38  00000000  00000000  000361e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023b68  00000000  00000000  00037018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014441  00000000  00000000  0005ab80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cce93  00000000  00000000  0006efc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013be54  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004878  00000000  00000000  0013bea4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005c90 	.word	0x08005c90

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08005c90 	.word	0x08005c90

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <Init_LCD>:
void ili9488_fillRect(uint16_t x1, uint16_t y1, uint16_t w, uint16_t h, uint16_t color);
void delay_ms(__IO uint32_t nCount1);
void ili9488_set_coordinates(uint16_t x1,uint16_t y1, uint16_t x2,uint16_t y2);

void Init_LCD()
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
	interrupt_initialize_priorities();		// initialize IRQ
 8000588:	f000 f806 	bl	8000598 <interrupt_initialize_priorities>
	//*****************************************************************************
		iopins_ini();							// initialize IO pins
 800058c:	f000 f80c 	bl	80005a8 <iopins_ini>

	//*****************************************************************************
		initialize_ili9488();					// initialize LCD
 8000590:	f000 fa12 	bl	80009b8 <initialize_ili9488>
}
 8000594:	bf00      	nop
 8000596:	bd80      	pop	{r7, pc}

08000598 <interrupt_initialize_priorities>:

void interrupt_initialize_priorities()
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4); //4 bits for preemp priority 0 bit for sub priority
 800059c:	2003      	movs	r0, #3
 800059e:	f001 ff45 	bl	800242c <HAL_NVIC_SetPriorityGrouping>
}
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}
	...

080005a8 <iopins_ini>:

void iopins_ini()
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b098      	sub	sp, #96	; 0x60
 80005ac:	af00      	add	r7, sp, #0

	 __GPIOC_CLK_ENABLE();
 80005ae:	2300      	movs	r3, #0
 80005b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80005b2:	4bac      	ldr	r3, [pc, #688]	; (8000864 <iopins_ini+0x2bc>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	4aab      	ldr	r2, [pc, #684]	; (8000864 <iopins_ini+0x2bc>)
 80005b8:	f043 0304 	orr.w	r3, r3, #4
 80005bc:	6313      	str	r3, [r2, #48]	; 0x30
 80005be:	4ba9      	ldr	r3, [pc, #676]	; (8000864 <iopins_ini+0x2bc>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	f003 0304 	and.w	r3, r3, #4
 80005c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80005c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
	 __GPIOD_CLK_ENABLE();
 80005ca:	2300      	movs	r3, #0
 80005cc:	647b      	str	r3, [r7, #68]	; 0x44
 80005ce:	4ba5      	ldr	r3, [pc, #660]	; (8000864 <iopins_ini+0x2bc>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	4aa4      	ldr	r2, [pc, #656]	; (8000864 <iopins_ini+0x2bc>)
 80005d4:	f043 0308 	orr.w	r3, r3, #8
 80005d8:	6313      	str	r3, [r2, #48]	; 0x30
 80005da:	4ba2      	ldr	r3, [pc, #648]	; (8000864 <iopins_ini+0x2bc>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	f003 0308 	and.w	r3, r3, #8
 80005e2:	647b      	str	r3, [r7, #68]	; 0x44
 80005e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
	 __GPIOA_CLK_ENABLE();
 80005e6:	2300      	movs	r3, #0
 80005e8:	643b      	str	r3, [r7, #64]	; 0x40
 80005ea:	4b9e      	ldr	r3, [pc, #632]	; (8000864 <iopins_ini+0x2bc>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	4a9d      	ldr	r2, [pc, #628]	; (8000864 <iopins_ini+0x2bc>)
 80005f0:	f043 0301 	orr.w	r3, r3, #1
 80005f4:	6313      	str	r3, [r2, #48]	; 0x30
 80005f6:	4b9b      	ldr	r3, [pc, #620]	; (8000864 <iopins_ini+0x2bc>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	f003 0301 	and.w	r3, r3, #1
 80005fe:	643b      	str	r3, [r7, #64]	; 0x40
 8000600:	6c3b      	ldr	r3, [r7, #64]	; 0x40
	 __GPIOB_CLK_ENABLE();
 8000602:	2300      	movs	r3, #0
 8000604:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000606:	4b97      	ldr	r3, [pc, #604]	; (8000864 <iopins_ini+0x2bc>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	4a96      	ldr	r2, [pc, #600]	; (8000864 <iopins_ini+0x2bc>)
 800060c:	f043 0302 	orr.w	r3, r3, #2
 8000610:	6313      	str	r3, [r2, #48]	; 0x30
 8000612:	4b94      	ldr	r3, [pc, #592]	; (8000864 <iopins_ini+0x2bc>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	f003 0302 	and.w	r3, r3, #2
 800061a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800061c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
	GPIO_InitTypeDef GPIO_InitStruct;

    BUZZER_PORT_RCC();
 800061e:	2300      	movs	r3, #0
 8000620:	63bb      	str	r3, [r7, #56]	; 0x38
 8000622:	4b90      	ldr	r3, [pc, #576]	; (8000864 <iopins_ini+0x2bc>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	4a8f      	ldr	r2, [pc, #572]	; (8000864 <iopins_ini+0x2bc>)
 8000628:	f043 0308 	orr.w	r3, r3, #8
 800062c:	6313      	str	r3, [r2, #48]	; 0x30
 800062e:	4b8d      	ldr	r3, [pc, #564]	; (8000864 <iopins_ini+0x2bc>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	f003 0308 	and.w	r3, r3, #8
 8000636:	63bb      	str	r3, [r7, #56]	; 0x38
 8000638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Pin = BUZZER;
 800063a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800063e:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000640:	2301      	movs	r3, #1
 8000642:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000644:	2300      	movs	r3, #0
 8000646:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(BUZZER_PORT, &GPIO_InitStruct);
 8000648:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800064c:	4619      	mov	r1, r3
 800064e:	4886      	ldr	r0, [pc, #536]	; (8000868 <iopins_ini+0x2c0>)
 8000650:	f001 ffc0 	bl	80025d4 <HAL_GPIO_Init>

    RS485DIR_PORT_RCC();
 8000654:	2300      	movs	r3, #0
 8000656:	637b      	str	r3, [r7, #52]	; 0x34
 8000658:	4b82      	ldr	r3, [pc, #520]	; (8000864 <iopins_ini+0x2bc>)
 800065a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065c:	4a81      	ldr	r2, [pc, #516]	; (8000864 <iopins_ini+0x2bc>)
 800065e:	f043 0301 	orr.w	r3, r3, #1
 8000662:	6313      	str	r3, [r2, #48]	; 0x30
 8000664:	4b7f      	ldr	r3, [pc, #508]	; (8000864 <iopins_ini+0x2bc>)
 8000666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000668:	f003 0301 	and.w	r3, r3, #1
 800066c:	637b      	str	r3, [r7, #52]	; 0x34
 800066e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Pin = RS485DIR;
 8000670:	2302      	movs	r3, #2
 8000672:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000674:	2301      	movs	r3, #1
 8000676:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000678:	2300      	movs	r3, #0
 800067a:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(RS485DIR_PORT, &GPIO_InitStruct);
 800067c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000680:	4619      	mov	r1, r3
 8000682:	487a      	ldr	r0, [pc, #488]	; (800086c <iopins_ini+0x2c4>)
 8000684:	f001 ffa6 	bl	80025d4 <HAL_GPIO_Init>
//	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
//	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//	 HAL_GPIO_Init(LCD_BACKLIGHT_PORT, &GPIO_InitStruct);
//	HAL_GPIO_WritePin(LCD_BACKLIGHT_PORT,LCD_BACKLIGHT);

    LCD_CS_PORT_RCC();
 8000688:	2300      	movs	r3, #0
 800068a:	633b      	str	r3, [r7, #48]	; 0x30
 800068c:	4b75      	ldr	r3, [pc, #468]	; (8000864 <iopins_ini+0x2bc>)
 800068e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000690:	4a74      	ldr	r2, [pc, #464]	; (8000864 <iopins_ini+0x2bc>)
 8000692:	f043 0308 	orr.w	r3, r3, #8
 8000696:	6313      	str	r3, [r2, #48]	; 0x30
 8000698:	4b72      	ldr	r3, [pc, #456]	; (8000864 <iopins_ini+0x2bc>)
 800069a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069c:	f003 0308 	and.w	r3, r3, #8
 80006a0:	633b      	str	r3, [r7, #48]	; 0x30
 80006a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pin = LCD_CS;
 80006a4:	2380      	movs	r3, #128	; 0x80
 80006a6:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a8:	2301      	movs	r3, #1
 80006aa:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ac:	2303      	movs	r3, #3
 80006ae:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(LCD_CS_PORT, &GPIO_InitStruct);
 80006b0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80006b4:	4619      	mov	r1, r3
 80006b6:	486c      	ldr	r0, [pc, #432]	; (8000868 <iopins_ini+0x2c0>)
 80006b8:	f001 ff8c 	bl	80025d4 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(LCD_CS_PORT,LCD_CS,GPIO_PIN_SET);
 80006bc:	2201      	movs	r2, #1
 80006be:	2180      	movs	r1, #128	; 0x80
 80006c0:	4869      	ldr	r0, [pc, #420]	; (8000868 <iopins_ini+0x2c0>)
 80006c2:	f002 f923 	bl	800290c <HAL_GPIO_WritePin>

    LCD_RES_PORT_RCC();
 80006c6:	2300      	movs	r3, #0
 80006c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80006ca:	4b66      	ldr	r3, [pc, #408]	; (8000864 <iopins_ini+0x2bc>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	4a65      	ldr	r2, [pc, #404]	; (8000864 <iopins_ini+0x2bc>)
 80006d0:	f043 0301 	orr.w	r3, r3, #1
 80006d4:	6313      	str	r3, [r2, #48]	; 0x30
 80006d6:	4b63      	ldr	r3, [pc, #396]	; (8000864 <iopins_ini+0x2bc>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	f003 0301 	and.w	r3, r3, #1
 80006de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80006e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Pin = LCD_RES;
 80006e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e6:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e8:	2301      	movs	r3, #1
 80006ea:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed =GPIO_SPEED_FREQ_VERY_HIGH;
 80006ec:	2303      	movs	r3, #3
 80006ee:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(LCD_RES_PORT, &GPIO_InitStruct);
 80006f0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80006f4:	4619      	mov	r1, r3
 80006f6:	485d      	ldr	r0, [pc, #372]	; (800086c <iopins_ini+0x2c4>)
 80006f8:	f001 ff6c 	bl	80025d4 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(LCD_RES_PORT,LCD_RES,GPIO_PIN_RESET);
 80006fc:	2200      	movs	r2, #0
 80006fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000702:	485a      	ldr	r0, [pc, #360]	; (800086c <iopins_ini+0x2c4>)
 8000704:	f002 f902 	bl	800290c <HAL_GPIO_WritePin>
	delay_ms(50);
 8000708:	2032      	movs	r0, #50	; 0x32
 800070a:	f000 f9cf 	bl	8000aac <delay_ms>
	HAL_GPIO_WritePin(LCD_RES_PORT,LCD_RES,GPIO_PIN_SET);
 800070e:	2201      	movs	r2, #1
 8000710:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000714:	4855      	ldr	r0, [pc, #340]	; (800086c <iopins_ini+0x2c4>)
 8000716:	f002 f8f9 	bl	800290c <HAL_GPIO_WritePin>

    LCD_DCX_PORT_RCC();
 800071a:	2300      	movs	r3, #0
 800071c:	62bb      	str	r3, [r7, #40]	; 0x28
 800071e:	4b51      	ldr	r3, [pc, #324]	; (8000864 <iopins_ini+0x2bc>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4a50      	ldr	r2, [pc, #320]	; (8000864 <iopins_ini+0x2bc>)
 8000724:	f043 0308 	orr.w	r3, r3, #8
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
 800072a:	4b4e      	ldr	r3, [pc, #312]	; (8000864 <iopins_ini+0x2bc>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	f003 0308 	and.w	r3, r3, #8
 8000732:	62bb      	str	r3, [r7, #40]	; 0x28
 8000734:	6abb      	ldr	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pin = LCD_DCX;
 8000736:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800073a:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073c:	2301      	movs	r3, #1
 800073e:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed =GPIO_SPEED_FREQ_VERY_HIGH;
 8000740:	2303      	movs	r3, #3
 8000742:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(LCD_DCX_PORT, &GPIO_InitStruct);
 8000744:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000748:	4619      	mov	r1, r3
 800074a:	4847      	ldr	r0, [pc, #284]	; (8000868 <iopins_ini+0x2c0>)
 800074c:	f001 ff42 	bl	80025d4 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(LCD_DCX_PORT,LCD_DCX,GPIO_PIN_SET);
 8000750:	2201      	movs	r2, #1
 8000752:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000756:	4844      	ldr	r0, [pc, #272]	; (8000868 <iopins_ini+0x2c0>)
 8000758:	f002 f8d8 	bl	800290c <HAL_GPIO_WritePin>

    FLASH_CS_PORT_RCC();
 800075c:	2300      	movs	r3, #0
 800075e:	627b      	str	r3, [r7, #36]	; 0x24
 8000760:	4b40      	ldr	r3, [pc, #256]	; (8000864 <iopins_ini+0x2bc>)
 8000762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000764:	4a3f      	ldr	r2, [pc, #252]	; (8000864 <iopins_ini+0x2bc>)
 8000766:	f043 0301 	orr.w	r3, r3, #1
 800076a:	6313      	str	r3, [r2, #48]	; 0x30
 800076c:	4b3d      	ldr	r3, [pc, #244]	; (8000864 <iopins_ini+0x2bc>)
 800076e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000770:	f003 0301 	and.w	r3, r3, #1
 8000774:	627b      	str	r3, [r7, #36]	; 0x24
 8000776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Pin = FLASH_CS;
 8000778:	2310      	movs	r3, #16
 800077a:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077c:	2301      	movs	r3, #1
 800077e:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed =GPIO_SPEED_FREQ_VERY_HIGH;
 8000780:	2303      	movs	r3, #3
 8000782:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(FLASH_CS_PORT, &GPIO_InitStruct);
 8000784:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000788:	4619      	mov	r1, r3
 800078a:	4838      	ldr	r0, [pc, #224]	; (800086c <iopins_ini+0x2c4>)
 800078c:	f001 ff22 	bl	80025d4 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(FLASH_CS_PORT,FLASH_CS,GPIO_PIN_SET);
 8000790:	2201      	movs	r2, #1
 8000792:	2110      	movs	r1, #16
 8000794:	4835      	ldr	r0, [pc, #212]	; (800086c <iopins_ini+0x2c4>)
 8000796:	f002 f8b9 	bl	800290c <HAL_GPIO_WritePin>

    FLASH_WP_PORT_RCC();
 800079a:	2300      	movs	r3, #0
 800079c:	623b      	str	r3, [r7, #32]
 800079e:	4b31      	ldr	r3, [pc, #196]	; (8000864 <iopins_ini+0x2bc>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a30      	ldr	r2, [pc, #192]	; (8000864 <iopins_ini+0x2bc>)
 80007a4:	f043 0304 	orr.w	r3, r3, #4
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b2e      	ldr	r3, [pc, #184]	; (8000864 <iopins_ini+0x2bc>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0304 	and.w	r3, r3, #4
 80007b2:	623b      	str	r3, [r7, #32]
 80007b4:	6a3b      	ldr	r3, [r7, #32]
	GPIO_InitStruct.Pin = FLASH_WP;
 80007b6:	2310      	movs	r3, #16
 80007b8:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ba:	2301      	movs	r3, #1
 80007bc:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007be:	2300      	movs	r3, #0
 80007c0:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(FLASH_WP_PORT, &GPIO_InitStruct);
 80007c2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80007c6:	4619      	mov	r1, r3
 80007c8:	4829      	ldr	r0, [pc, #164]	; (8000870 <iopins_ini+0x2c8>)
 80007ca:	f001 ff03 	bl	80025d4 <HAL_GPIO_Init>
	 HAL_GPIO_WritePin(FLASH_WP_PORT,FLASH_WP,GPIO_PIN_RESET);
 80007ce:	2200      	movs	r2, #0
 80007d0:	2110      	movs	r1, #16
 80007d2:	4827      	ldr	r0, [pc, #156]	; (8000870 <iopins_ini+0x2c8>)
 80007d4:	f002 f89a 	bl	800290c <HAL_GPIO_WritePin>

    FRAM_CS_PORT_RCC();
 80007d8:	2300      	movs	r3, #0
 80007da:	61fb      	str	r3, [r7, #28]
 80007dc:	4b21      	ldr	r3, [pc, #132]	; (8000864 <iopins_ini+0x2bc>)
 80007de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e0:	4a20      	ldr	r2, [pc, #128]	; (8000864 <iopins_ini+0x2bc>)
 80007e2:	f043 0302 	orr.w	r3, r3, #2
 80007e6:	6313      	str	r3, [r2, #48]	; 0x30
 80007e8:	4b1e      	ldr	r3, [pc, #120]	; (8000864 <iopins_ini+0x2bc>)
 80007ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ec:	f003 0302 	and.w	r3, r3, #2
 80007f0:	61fb      	str	r3, [r7, #28]
 80007f2:	69fb      	ldr	r3, [r7, #28]
	GPIO_InitStruct.Pin = FRAM_CS;
 80007f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007f8:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fa:	2301      	movs	r3, #1
 80007fc:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed =GPIO_SPEED_FREQ_VERY_HIGH;
 80007fe:	2303      	movs	r3, #3
 8000800:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(FRAM_CS_PORT, &GPIO_InitStruct);
 8000802:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000806:	4619      	mov	r1, r3
 8000808:	481a      	ldr	r0, [pc, #104]	; (8000874 <iopins_ini+0x2cc>)
 800080a:	f001 fee3 	bl	80025d4 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(FRAM_CS_PORT,FRAM_CS,GPIO_PIN_SET);
 800080e:	2201      	movs	r2, #1
 8000810:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000814:	4817      	ldr	r0, [pc, #92]	; (8000874 <iopins_ini+0x2cc>)
 8000816:	f002 f879 	bl	800290c <HAL_GPIO_WritePin>

    FRAM_HOLD_PORT_RCC();
 800081a:	2300      	movs	r3, #0
 800081c:	61bb      	str	r3, [r7, #24]
 800081e:	4b11      	ldr	r3, [pc, #68]	; (8000864 <iopins_ini+0x2bc>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a10      	ldr	r2, [pc, #64]	; (8000864 <iopins_ini+0x2bc>)
 8000824:	f043 0304 	orr.w	r3, r3, #4
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <iopins_ini+0x2bc>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0304 	and.w	r3, r3, #4
 8000832:	61bb      	str	r3, [r7, #24]
 8000834:	69bb      	ldr	r3, [r7, #24]
	GPIO_InitStruct.Pin = FRAM_HOLD;
 8000836:	2302      	movs	r3, #2
 8000838:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083a:	2301      	movs	r3, #1
 800083c:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed =GPIO_SPEED_FREQ_VERY_HIGH;
 800083e:	2303      	movs	r3, #3
 8000840:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(FRAM_HOLD_PORT, &GPIO_InitStruct);
 8000842:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000846:	4619      	mov	r1, r3
 8000848:	4809      	ldr	r0, [pc, #36]	; (8000870 <iopins_ini+0x2c8>)
 800084a:	f001 fec3 	bl	80025d4 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(FRAM_HOLD_PORT,FRAM_HOLD,GPIO_PIN_SET);
 800084e:	2201      	movs	r2, #1
 8000850:	2102      	movs	r1, #2
 8000852:	4807      	ldr	r0, [pc, #28]	; (8000870 <iopins_ini+0x2c8>)
 8000854:	f002 f85a 	bl	800290c <HAL_GPIO_WritePin>

    FRAM_WP_PORT_RCC();
 8000858:	2300      	movs	r3, #0
 800085a:	617b      	str	r3, [r7, #20]
 800085c:	4b01      	ldr	r3, [pc, #4]	; (8000864 <iopins_ini+0x2bc>)
 800085e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000860:	e00a      	b.n	8000878 <iopins_ini+0x2d0>
 8000862:	bf00      	nop
 8000864:	40023800 	.word	0x40023800
 8000868:	40020c00 	.word	0x40020c00
 800086c:	40020000 	.word	0x40020000
 8000870:	40020800 	.word	0x40020800
 8000874:	40020400 	.word	0x40020400
 8000878:	4a4b      	ldr	r2, [pc, #300]	; (80009a8 <iopins_ini+0x400>)
 800087a:	f043 0304 	orr.w	r3, r3, #4
 800087e:	6313      	str	r3, [r2, #48]	; 0x30
 8000880:	4b49      	ldr	r3, [pc, #292]	; (80009a8 <iopins_ini+0x400>)
 8000882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000884:	f003 0304 	and.w	r3, r3, #4
 8000888:	617b      	str	r3, [r7, #20]
 800088a:	697b      	ldr	r3, [r7, #20]
	GPIO_InitStruct.Pin = FRAM_WP;
 800088c:	2301      	movs	r3, #1
 800088e:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000890:	2301      	movs	r3, #1
 8000892:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000894:	2300      	movs	r3, #0
 8000896:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(FRAM_WP_PORT, &GPIO_InitStruct);
 8000898:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800089c:	4619      	mov	r1, r3
 800089e:	4843      	ldr	r0, [pc, #268]	; (80009ac <iopins_ini+0x404>)
 80008a0:	f001 fe98 	bl	80025d4 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(FRAM_WP_PORT,FRAM_WP,GPIO_PIN_SET);
 80008a4:	2201      	movs	r2, #1
 80008a6:	2101      	movs	r1, #1
 80008a8:	4840      	ldr	r0, [pc, #256]	; (80009ac <iopins_ini+0x404>)
 80008aa:	f002 f82f 	bl	800290c <HAL_GPIO_WritePin>


    LED_DBG_PORT_RCC();
 80008ae:	2300      	movs	r3, #0
 80008b0:	613b      	str	r3, [r7, #16]
 80008b2:	4b3d      	ldr	r3, [pc, #244]	; (80009a8 <iopins_ini+0x400>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4a3c      	ldr	r2, [pc, #240]	; (80009a8 <iopins_ini+0x400>)
 80008b8:	f043 0302 	orr.w	r3, r3, #2
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
 80008be:	4b3a      	ldr	r3, [pc, #232]	; (80009a8 <iopins_ini+0x400>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	f003 0302 	and.w	r3, r3, #2
 80008c6:	613b      	str	r3, [r7, #16]
 80008c8:	693b      	ldr	r3, [r7, #16]
	GPIO_InitStruct.Pin = LED_DBG_1;
 80008ca:	2308      	movs	r3, #8
 80008cc:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ce:	2301      	movs	r3, #1
 80008d0:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d2:	2300      	movs	r3, #0
 80008d4:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(LED_DBG_PORT, &GPIO_InitStruct);
 80008d6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80008da:	4619      	mov	r1, r3
 80008dc:	4834      	ldr	r0, [pc, #208]	; (80009b0 <iopins_ini+0x408>)
 80008de:	f001 fe79 	bl	80025d4 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(LED_DBG_PORT,LED_DBG_1,GPIO_PIN_SET);
 80008e2:	2201      	movs	r2, #1
 80008e4:	2108      	movs	r1, #8
 80008e6:	4832      	ldr	r0, [pc, #200]	; (80009b0 <iopins_ini+0x408>)
 80008e8:	f002 f810 	bl	800290c <HAL_GPIO_WritePin>


    BUTTON_0_PORT_RCC();
 80008ec:	2300      	movs	r3, #0
 80008ee:	60fb      	str	r3, [r7, #12]
 80008f0:	4b2d      	ldr	r3, [pc, #180]	; (80009a8 <iopins_ini+0x400>)
 80008f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f4:	4a2c      	ldr	r2, [pc, #176]	; (80009a8 <iopins_ini+0x400>)
 80008f6:	f043 0301 	orr.w	r3, r3, #1
 80008fa:	6313      	str	r3, [r2, #48]	; 0x30
 80008fc:	4b2a      	ldr	r3, [pc, #168]	; (80009a8 <iopins_ini+0x400>)
 80008fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000900:	f003 0301 	and.w	r3, r3, #1
 8000904:	60fb      	str	r3, [r7, #12]
 8000906:	68fb      	ldr	r3, [r7, #12]
	GPIO_InitStruct.Pin = BUTTON_0;
 8000908:	f44f 7380 	mov.w	r3, #256	; 0x100
 800090c:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800090e:	2300      	movs	r3, #0
 8000910:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Pull= GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	657b      	str	r3, [r7, #84]	; 0x54
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000916:	2300      	movs	r3, #0
 8000918:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(BUTTON_0_PORT, &GPIO_InitStruct);
 800091a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800091e:	4619      	mov	r1, r3
 8000920:	4824      	ldr	r0, [pc, #144]	; (80009b4 <iopins_ini+0x40c>)
 8000922:	f001 fe57 	bl	80025d4 <HAL_GPIO_Init>

    BUTTON_1_PORT_RCC();
 8000926:	2300      	movs	r3, #0
 8000928:	60bb      	str	r3, [r7, #8]
 800092a:	4b1f      	ldr	r3, [pc, #124]	; (80009a8 <iopins_ini+0x400>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4a1e      	ldr	r2, [pc, #120]	; (80009a8 <iopins_ini+0x400>)
 8000930:	f043 0304 	orr.w	r3, r3, #4
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
 8000936:	4b1c      	ldr	r3, [pc, #112]	; (80009a8 <iopins_ini+0x400>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	f003 0304 	and.w	r3, r3, #4
 800093e:	60bb      	str	r3, [r7, #8]
 8000940:	68bb      	ldr	r3, [r7, #8]
	GPIO_InitStruct.Pin = BUTTON_1;
 8000942:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000946:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000948:	2300      	movs	r3, #0
 800094a:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Pull= GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	657b      	str	r3, [r7, #84]	; 0x54
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000950:	2300      	movs	r3, #0
 8000952:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(BUTTON_1_PORT, &GPIO_InitStruct);
 8000954:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000958:	4619      	mov	r1, r3
 800095a:	4814      	ldr	r0, [pc, #80]	; (80009ac <iopins_ini+0x404>)
 800095c:	f001 fe3a 	bl	80025d4 <HAL_GPIO_Init>


    TOUCH_RESET_PORT_RCC();
 8000960:	2300      	movs	r3, #0
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	4b10      	ldr	r3, [pc, #64]	; (80009a8 <iopins_ini+0x400>)
 8000966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000968:	4a0f      	ldr	r2, [pc, #60]	; (80009a8 <iopins_ini+0x400>)
 800096a:	f043 0302 	orr.w	r3, r3, #2
 800096e:	6313      	str	r3, [r2, #48]	; 0x30
 8000970:	4b0d      	ldr	r3, [pc, #52]	; (80009a8 <iopins_ini+0x400>)
 8000972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000974:	f003 0302 	and.w	r3, r3, #2
 8000978:	607b      	str	r3, [r7, #4]
 800097a:	687b      	ldr	r3, [r7, #4]
	GPIO_InitStruct.Pin = TOUCH_RESET;
 800097c:	2320      	movs	r3, #32
 800097e:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000980:	2301      	movs	r3, #1
 8000982:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000984:	2300      	movs	r3, #0
 8000986:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(TOUCH_RESET_PORT, &GPIO_InitStruct);
 8000988:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800098c:	4619      	mov	r1, r3
 800098e:	4808      	ldr	r0, [pc, #32]	; (80009b0 <iopins_ini+0x408>)
 8000990:	f001 fe20 	bl	80025d4 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(TOUCH_RESET_PORT,TOUCH_RESET,GPIO_PIN_SET);
 8000994:	2201      	movs	r2, #1
 8000996:	2120      	movs	r1, #32
 8000998:	4805      	ldr	r0, [pc, #20]	; (80009b0 <iopins_ini+0x408>)
 800099a:	f001 ffb7 	bl	800290c <HAL_GPIO_WritePin>
}
 800099e:	bf00      	nop
 80009a0:	3760      	adds	r7, #96	; 0x60
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40023800 	.word	0x40023800
 80009ac:	40020800 	.word	0x40020800
 80009b0:	40020400 	.word	0x40020400
 80009b4:	40020000 	.word	0x40020000

080009b8 <initialize_ili9488>:
//*****************************************************************************
void initialize_ili9488()
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af02      	add	r7, sp, #8
	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_RESET);
 80009be:	2200      	movs	r2, #0
 80009c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009c4:	4838      	ldr	r0, [pc, #224]	; (8000aa8 <initialize_ili9488+0xf0>)
 80009c6:	f001 ffa1 	bl	800290c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_RESET);
 80009ca:	2200      	movs	r2, #0
 80009cc:	2180      	movs	r1, #128	; 0x80
 80009ce:	4836      	ldr	r0, [pc, #216]	; (8000aa8 <initialize_ili9488+0xf0>)
 80009d0:	f001 ff9c 	bl	800290c <HAL_GPIO_WritePin>
	TFT_REG=0x0011;
 80009d4:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80009d8:	2211      	movs	r2, #17
 80009da:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_SET);
 80009dc:	2201      	movs	r2, #1
 80009de:	2180      	movs	r1, #128	; 0x80
 80009e0:	4831      	ldr	r0, [pc, #196]	; (8000aa8 <initialize_ili9488+0xf0>)
 80009e2:	f001 ff93 	bl	800290c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_RESET);
 80009e6:	2200      	movs	r2, #0
 80009e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009ec:	482e      	ldr	r0, [pc, #184]	; (8000aa8 <initialize_ili9488+0xf0>)
 80009ee:	f001 ff8d 	bl	800290c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS, GPIO_PIN_RESET);
 80009f2:	2200      	movs	r2, #0
 80009f4:	2180      	movs	r1, #128	; 0x80
 80009f6:	482c      	ldr	r0, [pc, #176]	; (8000aa8 <initialize_ili9488+0xf0>)
 80009f8:	f001 ff88 	bl	800290c <HAL_GPIO_WritePin>
	TFT_REG=0x0029;
 80009fc:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000a00:	2229      	movs	r2, #41	; 0x29
 8000a02:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS, GPIO_PIN_SET);
 8000a04:	2201      	movs	r2, #1
 8000a06:	2180      	movs	r1, #128	; 0x80
 8000a08:	4827      	ldr	r0, [pc, #156]	; (8000aa8 <initialize_ili9488+0xf0>)
 8000a0a:	f001 ff7f 	bl	800290c <HAL_GPIO_WritePin>


	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_RESET);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a14:	4824      	ldr	r0, [pc, #144]	; (8000aa8 <initialize_ili9488+0xf0>)
 8000a16:	f001 ff79 	bl	800290c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_RESET);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2180      	movs	r1, #128	; 0x80
 8000a1e:	4822      	ldr	r0, [pc, #136]	; (8000aa8 <initialize_ili9488+0xf0>)
 8000a20:	f001 ff74 	bl	800290c <HAL_GPIO_WritePin>
	TFT_REG=0x003A;
 8000a24:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000a28:	223a      	movs	r2, #58	; 0x3a
 8000a2a:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_SET);
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a32:	481d      	ldr	r0, [pc, #116]	; (8000aa8 <initialize_ili9488+0xf0>)
 8000a34:	f001 ff6a 	bl	800290c <HAL_GPIO_WritePin>
	TFT_REG=0x0055;
 8000a38:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000a3c:	2255      	movs	r2, #85	; 0x55
 8000a3e:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS, GPIO_PIN_RESET);
 8000a40:	2200      	movs	r2, #0
 8000a42:	2180      	movs	r1, #128	; 0x80
 8000a44:	4818      	ldr	r0, [pc, #96]	; (8000aa8 <initialize_ili9488+0xf0>)
 8000a46:	f001 ff61 	bl	800290c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_RESET);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a50:	4815      	ldr	r0, [pc, #84]	; (8000aa8 <initialize_ili9488+0xf0>)
 8000a52:	f001 ff5b 	bl	800290c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_RESET);
 8000a56:	2200      	movs	r2, #0
 8000a58:	2180      	movs	r1, #128	; 0x80
 8000a5a:	4813      	ldr	r0, [pc, #76]	; (8000aa8 <initialize_ili9488+0xf0>)
 8000a5c:	f001 ff56 	bl	800290c <HAL_GPIO_WritePin>
	TFT_REG=0x0036;
 8000a60:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000a64:	2236      	movs	r2, #54	; 0x36
 8000a66:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_SET);
 8000a68:	2201      	movs	r2, #1
 8000a6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a6e:	480e      	ldr	r0, [pc, #56]	; (8000aa8 <initialize_ili9488+0xf0>)
 8000a70:	f001 ff4c 	bl	800290c <HAL_GPIO_WritePin>
	TFT_REG=0x00E8;
 8000a74:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000a78:	22e8      	movs	r2, #232	; 0xe8
 8000a7a:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_RESET);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	2180      	movs	r1, #128	; 0x80
 8000a80:	4809      	ldr	r0, [pc, #36]	; (8000aa8 <initialize_ili9488+0xf0>)
 8000a82:	f001 ff43 	bl	800290c <HAL_GPIO_WritePin>

	delay_ms(100);
 8000a86:	2064      	movs	r0, #100	; 0x64
 8000a88:	f000 f810 	bl	8000aac <delay_ms>
	ili9488_fillRect(0,0,LCD_PIXEL_WIDTH,LCD_PIXEL_HEIGHT,ORANGE);
 8000a8c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8000a90:	9300      	str	r3, [sp, #0]
 8000a92:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000a96:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	2000      	movs	r0, #0
 8000a9e:	f000 f81d 	bl	8000adc <ili9488_fillRect>
}
 8000aa2:	bf00      	nop
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	40020c00 	.word	0x40020c00

08000aac <delay_ms>:
void delay_ms(__IO uint32_t nCount1) {
 8000aac:	b480      	push	{r7}
 8000aae:	b085      	sub	sp, #20
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
	__IO uint32_t nCount=nCount1*23666;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	f645 4272 	movw	r2, #23666	; 0x5c72
 8000aba:	fb02 f303 	mul.w	r3, r2, r3
 8000abe:	60fb      	str	r3, [r7, #12]
	while(nCount--) {
 8000ac0:	bf00      	nop
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	1e5a      	subs	r2, r3, #1
 8000ac6:	60fa      	str	r2, [r7, #12]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d1fa      	bne.n	8000ac2 <delay_ms+0x16>
  }
}
 8000acc:	bf00      	nop
 8000ace:	bf00      	nop
 8000ad0:	3714      	adds	r7, #20
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
	...

08000adc <ili9488_fillRect>:
void ili9488_fillRect(uint16_t x1, uint16_t y1, uint16_t w, uint16_t h, uint16_t color)
{
 8000adc:	b590      	push	{r4, r7, lr}
 8000ade:	b085      	sub	sp, #20
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4604      	mov	r4, r0
 8000ae4:	4608      	mov	r0, r1
 8000ae6:	4611      	mov	r1, r2
 8000ae8:	461a      	mov	r2, r3
 8000aea:	4623      	mov	r3, r4
 8000aec:	80fb      	strh	r3, [r7, #6]
 8000aee:	4603      	mov	r3, r0
 8000af0:	80bb      	strh	r3, [r7, #4]
 8000af2:	460b      	mov	r3, r1
 8000af4:	807b      	strh	r3, [r7, #2]
 8000af6:	4613      	mov	r3, r2
 8000af8:	803b      	strh	r3, [r7, #0]
	uint32_t count = w * h;
 8000afa:	887b      	ldrh	r3, [r7, #2]
 8000afc:	883a      	ldrh	r2, [r7, #0]
 8000afe:	fb02 f303 	mul.w	r3, r2, r3
 8000b02:	60bb      	str	r3, [r7, #8]
	ili9488_set_coordinates(x1, y1, (uint16_t) (x1 + w - 1), (uint16_t) (y1 + h - 1));
 8000b04:	88fa      	ldrh	r2, [r7, #6]
 8000b06:	887b      	ldrh	r3, [r7, #2]
 8000b08:	4413      	add	r3, r2
 8000b0a:	b29b      	uxth	r3, r3
 8000b0c:	3b01      	subs	r3, #1
 8000b0e:	b29c      	uxth	r4, r3
 8000b10:	88ba      	ldrh	r2, [r7, #4]
 8000b12:	883b      	ldrh	r3, [r7, #0]
 8000b14:	4413      	add	r3, r2
 8000b16:	b29b      	uxth	r3, r3
 8000b18:	3b01      	subs	r3, #1
 8000b1a:	b29b      	uxth	r3, r3
 8000b1c:	88b9      	ldrh	r1, [r7, #4]
 8000b1e:	88f8      	ldrh	r0, [r7, #6]
 8000b20:	4622      	mov	r2, r4
 8000b22:	f000 f82f 	bl	8000b84 <ili9488_set_coordinates>

	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_RESET);
 8000b26:	2200      	movs	r2, #0
 8000b28:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b2c:	4814      	ldr	r0, [pc, #80]	; (8000b80 <ili9488_fillRect+0xa4>)
 8000b2e:	f001 feed 	bl	800290c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_RESET);
 8000b32:	2200      	movs	r2, #0
 8000b34:	2180      	movs	r1, #128	; 0x80
 8000b36:	4812      	ldr	r0, [pc, #72]	; (8000b80 <ili9488_fillRect+0xa4>)
 8000b38:	f001 fee8 	bl	800290c <HAL_GPIO_WritePin>
	TFT_REG=0x002C;
 8000b3c:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000b40:	222c      	movs	r2, #44	; 0x2c
 8000b42:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_SET);
 8000b44:	2201      	movs	r2, #1
 8000b46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b4a:	480d      	ldr	r0, [pc, #52]	; (8000b80 <ili9488_fillRect+0xa4>)
 8000b4c:	f001 fede 	bl	800290c <HAL_GPIO_WritePin>

	for(unsigned int i=0; i<count; i++)
 8000b50:	2300      	movs	r3, #0
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	e006      	b.n	8000b64 <ili9488_fillRect+0x88>
	{
		TFT_REG=color;
 8000b56:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000b5a:	8c3b      	ldrh	r3, [r7, #32]
 8000b5c:	8013      	strh	r3, [r2, #0]
	for(unsigned int i=0; i<count; i++)
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	3301      	adds	r3, #1
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	68fa      	ldr	r2, [r7, #12]
 8000b66:	68bb      	ldr	r3, [r7, #8]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d3f4      	bcc.n	8000b56 <ili9488_fillRect+0x7a>
	}
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_SET);
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	2180      	movs	r1, #128	; 0x80
 8000b70:	4803      	ldr	r0, [pc, #12]	; (8000b80 <ili9488_fillRect+0xa4>)
 8000b72:	f001 fecb 	bl	800290c <HAL_GPIO_WritePin>
}
 8000b76:	bf00      	nop
 8000b78:	3714      	adds	r7, #20
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd90      	pop	{r4, r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40020c00 	.word	0x40020c00

08000b84 <ili9488_set_coordinates>:
void ili9488_set_coordinates(uint16_t x1,uint16_t y1, uint16_t x2, uint16_t y2)
{
 8000b84:	b590      	push	{r4, r7, lr}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4604      	mov	r4, r0
 8000b8c:	4608      	mov	r0, r1
 8000b8e:	4611      	mov	r1, r2
 8000b90:	461a      	mov	r2, r3
 8000b92:	4623      	mov	r3, r4
 8000b94:	80fb      	strh	r3, [r7, #6]
 8000b96:	4603      	mov	r3, r0
 8000b98:	80bb      	strh	r3, [r7, #4]
 8000b9a:	460b      	mov	r3, r1
 8000b9c:	807b      	strh	r3, [r7, #2]
 8000b9e:	4613      	mov	r3, r2
 8000ba0:	803b      	strh	r3, [r7, #0]
	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_RESET);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ba8:	4832      	ldr	r0, [pc, #200]	; (8000c74 <ili9488_set_coordinates+0xf0>)
 8000baa:	f001 feaf 	bl	800290c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_RESET);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2180      	movs	r1, #128	; 0x80
 8000bb2:	4830      	ldr	r0, [pc, #192]	; (8000c74 <ili9488_set_coordinates+0xf0>)
 8000bb4:	f001 feaa 	bl	800290c <HAL_GPIO_WritePin>
	TFT_REG=0x002A;
 8000bb8:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000bbc:	222a      	movs	r2, #42	; 0x2a
 8000bbe:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_SET);
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bc6:	482b      	ldr	r0, [pc, #172]	; (8000c74 <ili9488_set_coordinates+0xf0>)
 8000bc8:	f001 fea0 	bl	800290c <HAL_GPIO_WritePin>
	TFT_REG=x1>>8;
 8000bcc:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000bd0:	88fb      	ldrh	r3, [r7, #6]
 8000bd2:	0a1b      	lsrs	r3, r3, #8
 8000bd4:	b29b      	uxth	r3, r3
 8000bd6:	8013      	strh	r3, [r2, #0]
	TFT_REG=x1&0xFF;
 8000bd8:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000bdc:	88fa      	ldrh	r2, [r7, #6]
 8000bde:	b2d2      	uxtb	r2, r2
 8000be0:	b292      	uxth	r2, r2
 8000be2:	801a      	strh	r2, [r3, #0]
	TFT_REG=x2>>8;
 8000be4:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000be8:	887b      	ldrh	r3, [r7, #2]
 8000bea:	0a1b      	lsrs	r3, r3, #8
 8000bec:	b29b      	uxth	r3, r3
 8000bee:	8013      	strh	r3, [r2, #0]
	TFT_REG=x2&0xFF;
 8000bf0:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000bf4:	887a      	ldrh	r2, [r7, #2]
 8000bf6:	b2d2      	uxtb	r2, r2
 8000bf8:	b292      	uxth	r2, r2
 8000bfa:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_SET);
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	2180      	movs	r1, #128	; 0x80
 8000c00:	481c      	ldr	r0, [pc, #112]	; (8000c74 <ili9488_set_coordinates+0xf0>)
 8000c02:	f001 fe83 	bl	800290c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_RESET);
 8000c06:	2200      	movs	r2, #0
 8000c08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c0c:	4819      	ldr	r0, [pc, #100]	; (8000c74 <ili9488_set_coordinates+0xf0>)
 8000c0e:	f001 fe7d 	bl	800290c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_RESET);
 8000c12:	2200      	movs	r2, #0
 8000c14:	2180      	movs	r1, #128	; 0x80
 8000c16:	4817      	ldr	r0, [pc, #92]	; (8000c74 <ili9488_set_coordinates+0xf0>)
 8000c18:	f001 fe78 	bl	800290c <HAL_GPIO_WritePin>
	TFT_REG=0x002B;
 8000c1c:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000c20:	222b      	movs	r2, #43	; 0x2b
 8000c22:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_SET);
 8000c24:	2201      	movs	r2, #1
 8000c26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c2a:	4812      	ldr	r0, [pc, #72]	; (8000c74 <ili9488_set_coordinates+0xf0>)
 8000c2c:	f001 fe6e 	bl	800290c <HAL_GPIO_WritePin>
	TFT_REG=y1>>8;
 8000c30:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000c34:	88bb      	ldrh	r3, [r7, #4]
 8000c36:	0a1b      	lsrs	r3, r3, #8
 8000c38:	b29b      	uxth	r3, r3
 8000c3a:	8013      	strh	r3, [r2, #0]
	TFT_REG=y1&0xFF;
 8000c3c:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000c40:	88ba      	ldrh	r2, [r7, #4]
 8000c42:	b2d2      	uxtb	r2, r2
 8000c44:	b292      	uxth	r2, r2
 8000c46:	801a      	strh	r2, [r3, #0]
	TFT_REG=y2>>8;
 8000c48:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000c4c:	883b      	ldrh	r3, [r7, #0]
 8000c4e:	0a1b      	lsrs	r3, r3, #8
 8000c50:	b29b      	uxth	r3, r3
 8000c52:	8013      	strh	r3, [r2, #0]
	TFT_REG=y2&0xFF;
 8000c54:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000c58:	883a      	ldrh	r2, [r7, #0]
 8000c5a:	b2d2      	uxtb	r2, r2
 8000c5c:	b292      	uxth	r2, r2
 8000c5e:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_SET);
 8000c60:	2201      	movs	r2, #1
 8000c62:	2180      	movs	r1, #128	; 0x80
 8000c64:	4803      	ldr	r0, [pc, #12]	; (8000c74 <ili9488_set_coordinates+0xf0>)
 8000c66:	f001 fe51 	bl	800290c <HAL_GPIO_WritePin>
}
 8000c6a:	bf00      	nop
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd90      	pop	{r4, r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40020c00 	.word	0x40020c00

08000c78 <flashCSSet>:
#include "spiRoutines.h"
#include <stm32f4xx_hal.h>
#include <stm32f4xx_hal_gpio.h>
#include <stdio.h>

void flashCSSet(){
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	2110      	movs	r1, #16
 8000c80:	4802      	ldr	r0, [pc, #8]	; (8000c8c <flashCSSet+0x14>)
 8000c82:	f001 fe43 	bl	800290c <HAL_GPIO_WritePin>
}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40020000 	.word	0x40020000

08000c90 <flashCSReset>:

void flashCSReset(){
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8000c94:	2200      	movs	r2, #0
 8000c96:	2110      	movs	r1, #16
 8000c98:	4802      	ldr	r0, [pc, #8]	; (8000ca4 <flashCSReset+0x14>)
 8000c9a:	f001 fe37 	bl	800290c <HAL_GPIO_WritePin>
}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40020000 	.word	0x40020000

08000ca8 <ext_flash_erase_4kB>:
	flashCSSet();
	return id_data;
}

void ext_flash_erase_4kB(unsigned int sector_adress)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
	unsigned int i;

	ext_flash_wren();
 8000cb0:	f000 f8a0 	bl	8000df4 <ext_flash_wren>

	flashCSReset();
 8000cb4:	f7ff ffec 	bl	8000c90 <flashCSReset>
	SPI1_Transfer(0x20);
 8000cb8:	2020      	movs	r0, #32
 8000cba:	f000 fc1f 	bl	80014fc <SPI1_Transfer>
	SPI1_Transfer((sector_adress>>16)&0xFF);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	0c1b      	lsrs	r3, r3, #16
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f000 fc19 	bl	80014fc <SPI1_Transfer>
	SPI1_Transfer((sector_adress>>8)&0xFF);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	0a1b      	lsrs	r3, r3, #8
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f000 fc13 	bl	80014fc <SPI1_Transfer>
	SPI1_Transfer(sector_adress&0xFF);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f000 fc0e 	bl	80014fc <SPI1_Transfer>
	flashCSSet();
 8000ce0:	f7ff ffca 	bl	8000c78 <flashCSSet>

	for(i=0;i<1000;i++)
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	e00a      	b.n	8000d00 <ext_flash_erase_4kB+0x58>
	{
		HAL_Delay(1);
 8000cea:	2001      	movs	r0, #1
 8000cec:	f001 faaa 	bl	8002244 <HAL_Delay>
		if(ext_flash_read_status_register_1()==0x00)
 8000cf0:	f000 f86c 	bl	8000dcc <ext_flash_read_status_register_1>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d007      	beq.n	8000d0a <ext_flash_erase_4kB+0x62>
	for(i=0;i<1000;i++)
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000d06:	d3f0      	bcc.n	8000cea <ext_flash_erase_4kB+0x42>
		{
			break;
		}
	}
}
 8000d08:	e000      	b.n	8000d0c <ext_flash_erase_4kB+0x64>
			break;
 8000d0a:	bf00      	nop
}
 8000d0c:	bf00      	nop
 8000d0e:	3710      	adds	r7, #16
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <ext_flash_write>:

void ext_flash_write(unsigned int sector_adress, char *buff, unsigned int len)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b086      	sub	sp, #24
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	60f8      	str	r0, [r7, #12]
 8000d1c:	60b9      	str	r1, [r7, #8]
 8000d1e:	607a      	str	r2, [r7, #4]
	unsigned int i;

	ext_flash_wren();
 8000d20:	f000 f868 	bl	8000df4 <ext_flash_wren>

	flashCSReset();
 8000d24:	f7ff ffb4 	bl	8000c90 <flashCSReset>
	SPI1_Transfer(0x02);
 8000d28:	2002      	movs	r0, #2
 8000d2a:	f000 fbe7 	bl	80014fc <SPI1_Transfer>
	SPI1_Transfer((sector_adress>>16)&0xFF);
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	0c1b      	lsrs	r3, r3, #16
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	4618      	mov	r0, r3
 8000d36:	f000 fbe1 	bl	80014fc <SPI1_Transfer>
	SPI1_Transfer((sector_adress>>8)&0xFF);
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	0a1b      	lsrs	r3, r3, #8
 8000d3e:	b2db      	uxtb	r3, r3
 8000d40:	4618      	mov	r0, r3
 8000d42:	f000 fbdb 	bl	80014fc <SPI1_Transfer>
	SPI1_Transfer(sector_adress&0xFF);
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f000 fbd6 	bl	80014fc <SPI1_Transfer>

	for(i=0;i<len;i++)
 8000d50:	2300      	movs	r3, #0
 8000d52:	617b      	str	r3, [r7, #20]
 8000d54:	e009      	b.n	8000d6a <ext_flash_write+0x56>
	{
		SPI1_Transfer(buff[i]);
 8000d56:	68ba      	ldr	r2, [r7, #8]
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	4413      	add	r3, r2
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f000 fbcc 	bl	80014fc <SPI1_Transfer>
	for(i=0;i<len;i++)
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	3301      	adds	r3, #1
 8000d68:	617b      	str	r3, [r7, #20]
 8000d6a:	697a      	ldr	r2, [r7, #20]
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d3f1      	bcc.n	8000d56 <ext_flash_write+0x42>
	}
	flashCSSet();
 8000d72:	f7ff ff81 	bl	8000c78 <flashCSSet>

	for(i=0;i<1000;i++)
 8000d76:	2300      	movs	r3, #0
 8000d78:	617b      	str	r3, [r7, #20]
 8000d7a:	e00a      	b.n	8000d92 <ext_flash_write+0x7e>
	{
		HAL_Delay(1);
 8000d7c:	2001      	movs	r0, #1
 8000d7e:	f001 fa61 	bl	8002244 <HAL_Delay>
		if(ext_flash_read_status_register_1()==0x00)
 8000d82:	f000 f823 	bl	8000dcc <ext_flash_read_status_register_1>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d007      	beq.n	8000d9c <ext_flash_write+0x88>
	for(i=0;i<1000;i++)
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	617b      	str	r3, [r7, #20]
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000d98:	d3f0      	bcc.n	8000d7c <ext_flash_write+0x68>
		{
			break;
		}
	}
}
 8000d9a:	e000      	b.n	8000d9e <ext_flash_write+0x8a>
			break;
 8000d9c:	bf00      	nop
}
 8000d9e:	bf00      	nop
 8000da0:	3718      	adds	r7, #24
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <ext_flash_read>:
void ext_flash_read(unsigned int sector_adress, char *buff, unsigned int len)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b084      	sub	sp, #16
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	60f8      	str	r0, [r7, #12]
 8000dae:	60b9      	str	r1, [r7, #8]
 8000db0:	607a      	str	r2, [r7, #4]
	ext_flash_continuous_read_begin(sector_adress);
 8000db2:	68f8      	ldr	r0, [r7, #12]
 8000db4:	f000 f829 	bl	8000e0a <ext_flash_continuous_read_begin>
	ext_flash_continuous_read_read(buff, len);
 8000db8:	6879      	ldr	r1, [r7, #4]
 8000dba:	68b8      	ldr	r0, [r7, #8]
 8000dbc:	f000 f843 	bl	8000e46 <ext_flash_continuous_read_read>
	ext_flash_continuous_read_finish();
 8000dc0:	f000 f85d 	bl	8000e7e <ext_flash_continuous_read_finish>
}
 8000dc4:	bf00      	nop
 8000dc6:	3710      	adds	r7, #16
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <ext_flash_read_status_register_1>:

	return data;
}

unsigned char ext_flash_read_status_register_1()
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
	char data;
	flashCSReset();
 8000dd2:	f7ff ff5d 	bl	8000c90 <flashCSReset>
	SPI1_Transfer(0x05);
 8000dd6:	2005      	movs	r0, #5
 8000dd8:	f000 fb90 	bl	80014fc <SPI1_Transfer>
	data=SPI1_Transfer(0x00);
 8000ddc:	2000      	movs	r0, #0
 8000dde:	f000 fb8d 	bl	80014fc <SPI1_Transfer>
 8000de2:	4603      	mov	r3, r0
 8000de4:	71fb      	strb	r3, [r7, #7]
	flashCSSet();
 8000de6:	f7ff ff47 	bl	8000c78 <flashCSSet>

	return data;
 8000dea:	79fb      	ldrb	r3, [r7, #7]
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <ext_flash_wren>:

void ext_flash_wren()
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
	flashCSReset();
 8000df8:	f7ff ff4a 	bl	8000c90 <flashCSReset>
	SPI1_Transfer(0x06);
 8000dfc:	2006      	movs	r0, #6
 8000dfe:	f000 fb7d 	bl	80014fc <SPI1_Transfer>
	flashCSSet();
 8000e02:	f7ff ff39 	bl	8000c78 <flashCSSet>
}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <ext_flash_continuous_read_begin>:


//Continuous functions below keep conection open while reading, allowing for access to data not aligned to 4kB sectors
void ext_flash_continuous_read_begin(unsigned int sector_adress){
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b082      	sub	sp, #8
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	6078      	str	r0, [r7, #4]
	command[0]=0x03;
	command[1]=((char *)&sector_adress)[3];
	command[2]=((char *)&sector_adress)[2];
	command[3]=((char *)&sector_adress)[1];*/

	flashCSReset();
 8000e12:	f7ff ff3d 	bl	8000c90 <flashCSReset>

	SPI1_Transfer(0x03);
 8000e16:	2003      	movs	r0, #3
 8000e18:	f000 fb70 	bl	80014fc <SPI1_Transfer>
	SPI1_Transfer((sector_adress>>16)&0xFF);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	0c1b      	lsrs	r3, r3, #16
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	4618      	mov	r0, r3
 8000e24:	f000 fb6a 	bl	80014fc <SPI1_Transfer>
	SPI1_Transfer((sector_adress>>8)&0xFF);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	0a1b      	lsrs	r3, r3, #8
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f000 fb64 	bl	80014fc <SPI1_Transfer>
	SPI1_Transfer(sector_adress&0xFF);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f000 fb5f 	bl	80014fc <SPI1_Transfer>
}
 8000e3e:	bf00      	nop
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <ext_flash_continuous_read_read>:

void ext_flash_continuous_read_read(char *buff, unsigned int len){
 8000e46:	b590      	push	{r4, r7, lr}
 8000e48:	b085      	sub	sp, #20
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	6078      	str	r0, [r7, #4]
 8000e4e:	6039      	str	r1, [r7, #0]
	for(unsigned int i = 0; i<len; i++){
 8000e50:	2300      	movs	r3, #0
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	e00a      	b.n	8000e6c <ext_flash_continuous_read_read+0x26>
		*(buff+i) = SPI1_Transfer(0x00);
 8000e56:	687a      	ldr	r2, [r7, #4]
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	18d4      	adds	r4, r2, r3
 8000e5c:	2000      	movs	r0, #0
 8000e5e:	f000 fb4d 	bl	80014fc <SPI1_Transfer>
 8000e62:	4603      	mov	r3, r0
 8000e64:	7023      	strb	r3, [r4, #0]
	for(unsigned int i = 0; i<len; i++){
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	68fa      	ldr	r2, [r7, #12]
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d3f0      	bcc.n	8000e56 <ext_flash_continuous_read_read+0x10>
	}
}
 8000e74:	bf00      	nop
 8000e76:	bf00      	nop
 8000e78:	3714      	adds	r7, #20
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd90      	pop	{r4, r7, pc}

08000e7e <ext_flash_continuous_read_finish>:
void ext_flash_continuous_read_skip(unsigned int len){
	for(unsigned int i = 0; i<len; i++){
			SPI1_Transfer(0x00);
	}
}
void ext_flash_continuous_read_finish(){
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	af00      	add	r7, sp, #0
	flashCSSet();
 8000e82:	f7ff fef9 	bl	8000c78 <flashCSSet>
}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
	...

08000e8c <flashDemoPrintLast>:
#include <string.h>
#include "extFlash.h"

#define demoFlashAddr 0x00

void flashDemoPrintLast(){
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b090      	sub	sp, #64	; 0x40
 8000e90:	af00      	add	r7, sp, #0
	char flashMsg[64];
	ext_flash_read(demoFlashAddr, flashMsg, 64);
 8000e92:	463b      	mov	r3, r7
 8000e94:	2240      	movs	r2, #64	; 0x40
 8000e96:	4619      	mov	r1, r3
 8000e98:	2000      	movs	r0, #0
 8000e9a:	f7ff ff84 	bl	8000da6 <ext_flash_read>
	flashMsg[63] = 0; //just to be safe
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	printf("[FLASH demo] Read message from flash: \"%s\".\r\n", flashMsg);
 8000ea4:	463b      	mov	r3, r7
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4803      	ldr	r0, [pc, #12]	; (8000eb8 <flashDemoPrintLast+0x2c>)
 8000eaa:	f003 fd11 	bl	80048d0 <iprintf>
}
 8000eae:	bf00      	nop
 8000eb0:	3740      	adds	r7, #64	; 0x40
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	08005ca8 	.word	0x08005ca8

08000ebc <flashDemoLoop>:

int flashDemoLoop(){
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b092      	sub	sp, #72	; 0x48
 8000ec0:	af00      	add	r7, sp, #0

		char delimiter = 13;
 8000ec2:	230d      	movs	r3, #13
 8000ec4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		char msg[64];

		int count = read_usart_message(msg, &huart1, sizeof(msg), delimiter);
 8000ec8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000ecc:	4638      	mov	r0, r7
 8000ece:	2240      	movs	r2, #64	; 0x40
 8000ed0:	4914      	ldr	r1, [pc, #80]	; (8000f24 <flashDemoLoop+0x68>)
 8000ed2:	f001 f82d 	bl	8001f30 <read_usart_message>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	643b      	str	r3, [r7, #64]	; 0x40

		if(count == 0){
 8000eda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d104      	bne.n	8000eea <flashDemoLoop+0x2e>
			//While reading buffer of received chars, delimiter char was not encountered.
			printf("[FLASH demo] message not yet ready.\r\n");
 8000ee0:	4811      	ldr	r0, [pc, #68]	; (8000f28 <flashDemoLoop+0x6c>)
 8000ee2:	f003 fd7b 	bl	80049dc <puts>
			return 0;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	e018      	b.n	8000f1c <flashDemoLoop+0x60>
		}

		msg[count-1] = 0; //null terminate received string
 8000eea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000eec:	3b01      	subs	r3, #1
 8000eee:	3348      	adds	r3, #72	; 0x48
 8000ef0:	443b      	add	r3, r7
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	f803 2c48 	strb.w	r2, [r3, #-72]

		printf("[FLASH demo] Saving message to flash: \"%s\".\r\n", msg);
 8000ef8:	463b      	mov	r3, r7
 8000efa:	4619      	mov	r1, r3
 8000efc:	480b      	ldr	r0, [pc, #44]	; (8000f2c <flashDemoLoop+0x70>)
 8000efe:	f003 fce7 	bl	80048d0 <iprintf>

		ext_flash_erase_4kB(demoFlashAddr);
 8000f02:	2000      	movs	r0, #0
 8000f04:	f7ff fed0 	bl	8000ca8 <ext_flash_erase_4kB>
		ext_flash_write(demoFlashAddr, msg, count);
 8000f08:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000f0a:	463b      	mov	r3, r7
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	2000      	movs	r0, #0
 8000f10:	f7ff ff00 	bl	8000d14 <ext_flash_write>

		printf("[FLASH demo] Done.\n\r");
 8000f14:	4806      	ldr	r0, [pc, #24]	; (8000f30 <flashDemoLoop+0x74>)
 8000f16:	f003 fcdb 	bl	80048d0 <iprintf>
		return 1;
 8000f1a:	2301      	movs	r3, #1

}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3748      	adds	r7, #72	; 0x48
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	20000198 	.word	0x20000198
 8000f28:	08005cd8 	.word	0x08005cd8
 8000f2c:	08005d00 	.word	0x08005d00
 8000f30:	08005d30 	.word	0x08005d30

08000f34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f3a:	f001 f911 	bl	8002160 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f3e:	f000 f841 	bl	8000fc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f42:	f000 f9af 	bl	80012a4 <MX_GPIO_Init>
  MX_FSMC_Init();
 8000f46:	f000 fa59 	bl	80013fc <MX_FSMC_Init>
  MX_USART1_UART_Init();
 8000f4a:	f000 f947 	bl	80011dc <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000f4e:	f000 f8a3 	bl	8001098 <MX_I2C1_Init>
  MX_SPI3_Init();
 8000f52:	f000 f90d 	bl	8001170 <MX_SPI3_Init>
  MX_SPI1_Init();
 8000f56:	f000 f8cd 	bl	80010f4 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000f5a:	f000 f971 	bl	8001240 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  //enable uart interrupt
  Init_LCD();
 8000f5e:	f7ff fb11 	bl	8000584 <Init_LCD>
  static int blOn = 0;
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("Entering main loop\n\r");
 8000f62:	4815      	ldr	r0, [pc, #84]	; (8000fb8 <main+0x84>)
 8000f64:	f003 fcb4 	bl	80048d0 <iprintf>

  flashDemoPrintLast();
 8000f68:	f7ff ff90 	bl	8000e8c <flashDemoPrintLast>

  int loopNumber = 0;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	60fb      	str	r3, [r7, #12]

  while (1)
  {
	int secSleep = 1;
 8000f70:	2301      	movs	r3, #1
 8000f72:	60bb      	str	r3, [r7, #8]
	int msecSleep = 500;
 8000f74:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000f78:	607b      	str	r3, [r7, #4]
	printf("Sleeping %d.%d secs.  LN %d\r\n", secSleep, msecSleep, loopNumber++);
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	1c5a      	adds	r2, r3, #1
 8000f7e:	60fa      	str	r2, [r7, #12]
 8000f80:	687a      	ldr	r2, [r7, #4]
 8000f82:	68b9      	ldr	r1, [r7, #8]
 8000f84:	480d      	ldr	r0, [pc, #52]	; (8000fbc <main+0x88>)
 8000f86:	f003 fca3 	bl	80048d0 <iprintf>
	HAL_Delay(1000*secSleep + msecSleep);
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f90:	fb03 f202 	mul.w	r2, r3, r2
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	4413      	add	r3, r2
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f001 f953 	bl	8002244 <HAL_Delay>

	static int flashDone = 0;
	if(!flashDone){
 8000f9e:	4b08      	ldr	r3, [pc, #32]	; (8000fc0 <main+0x8c>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d105      	bne.n	8000fb2 <main+0x7e>
		flashDone = flashDemoLoop();
 8000fa6:	f7ff ff89 	bl	8000ebc <flashDemoLoop>
 8000faa:	4603      	mov	r3, r0
 8000fac:	4a04      	ldr	r2, [pc, #16]	; (8000fc0 <main+0x8c>)
 8000fae:	6013      	str	r3, [r2, #0]
		continue;
 8000fb0:	e001      	b.n	8000fb6 <main+0x82>
	}

	uartDemoLoop();
 8000fb2:	f001 f845 	bl	8002040 <uartDemoLoop>
  {
 8000fb6:	e7db      	b.n	8000f70 <main+0x3c>
 8000fb8:	08005d48 	.word	0x08005d48
 8000fbc:	08005d60 	.word	0x08005d60
 8000fc0:	20000270 	.word	0x20000270

08000fc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b094      	sub	sp, #80	; 0x50
 8000fc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fca:	f107 0320 	add.w	r3, r7, #32
 8000fce:	2230      	movs	r2, #48	; 0x30
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f003 fc74 	bl	80048c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fd8:	f107 030c 	add.w	r3, r7, #12
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60bb      	str	r3, [r7, #8]
 8000fec:	4b28      	ldr	r3, [pc, #160]	; (8001090 <SystemClock_Config+0xcc>)
 8000fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff0:	4a27      	ldr	r2, [pc, #156]	; (8001090 <SystemClock_Config+0xcc>)
 8000ff2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ff6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ff8:	4b25      	ldr	r3, [pc, #148]	; (8001090 <SystemClock_Config+0xcc>)
 8000ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001000:	60bb      	str	r3, [r7, #8]
 8001002:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001004:	2300      	movs	r3, #0
 8001006:	607b      	str	r3, [r7, #4]
 8001008:	4b22      	ldr	r3, [pc, #136]	; (8001094 <SystemClock_Config+0xd0>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a21      	ldr	r2, [pc, #132]	; (8001094 <SystemClock_Config+0xd0>)
 800100e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001012:	6013      	str	r3, [r2, #0]
 8001014:	4b1f      	ldr	r3, [pc, #124]	; (8001094 <SystemClock_Config+0xd0>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800101c:	607b      	str	r3, [r7, #4]
 800101e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001020:	2301      	movs	r3, #1
 8001022:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001024:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001028:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800102a:	2302      	movs	r3, #2
 800102c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800102e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001032:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001034:	2308      	movs	r3, #8
 8001036:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001038:	23a8      	movs	r3, #168	; 0xa8
 800103a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800103c:	2302      	movs	r3, #2
 800103e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001040:	2304      	movs	r3, #4
 8001042:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001044:	f107 0320 	add.w	r3, r7, #32
 8001048:	4618      	mov	r0, r3
 800104a:	f001 fdbd 	bl	8002bc8 <HAL_RCC_OscConfig>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001054:	f000 fa4c 	bl	80014f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001058:	230f      	movs	r3, #15
 800105a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800105c:	2302      	movs	r3, #2
 800105e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001064:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001068:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800106a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800106e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001070:	f107 030c 	add.w	r3, r7, #12
 8001074:	2105      	movs	r1, #5
 8001076:	4618      	mov	r0, r3
 8001078:	f002 f81e 	bl	80030b8 <HAL_RCC_ClockConfig>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001082:	f000 fa35 	bl	80014f0 <Error_Handler>
  }
}
 8001086:	bf00      	nop
 8001088:	3750      	adds	r7, #80	; 0x50
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40023800 	.word	0x40023800
 8001094:	40007000 	.word	0x40007000

08001098 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800109c:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <MX_I2C1_Init+0x50>)
 800109e:	4a13      	ldr	r2, [pc, #76]	; (80010ec <MX_I2C1_Init+0x54>)
 80010a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010a2:	4b11      	ldr	r3, [pc, #68]	; (80010e8 <MX_I2C1_Init+0x50>)
 80010a4:	4a12      	ldr	r2, [pc, #72]	; (80010f0 <MX_I2C1_Init+0x58>)
 80010a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010a8:	4b0f      	ldr	r3, [pc, #60]	; (80010e8 <MX_I2C1_Init+0x50>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010ae:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <MX_I2C1_Init+0x50>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010b4:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <MX_I2C1_Init+0x50>)
 80010b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010bc:	4b0a      	ldr	r3, [pc, #40]	; (80010e8 <MX_I2C1_Init+0x50>)
 80010be:	2200      	movs	r2, #0
 80010c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010c2:	4b09      	ldr	r3, [pc, #36]	; (80010e8 <MX_I2C1_Init+0x50>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010c8:	4b07      	ldr	r3, [pc, #28]	; (80010e8 <MX_I2C1_Init+0x50>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010ce:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <MX_I2C1_Init+0x50>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010d4:	4804      	ldr	r0, [pc, #16]	; (80010e8 <MX_I2C1_Init+0x50>)
 80010d6:	f001 fc33 	bl	8002940 <HAL_I2C_Init>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010e0:	f000 fa06 	bl	80014f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010e4:	bf00      	nop
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20000094 	.word	0x20000094
 80010ec:	40005400 	.word	0x40005400
 80010f0:	000186a0 	.word	0x000186a0

080010f4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80010f8:	4b1b      	ldr	r3, [pc, #108]	; (8001168 <MX_SPI1_Init+0x74>)
 80010fa:	4a1c      	ldr	r2, [pc, #112]	; (800116c <MX_SPI1_Init+0x78>)
 80010fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010fe:	4b1a      	ldr	r3, [pc, #104]	; (8001168 <MX_SPI1_Init+0x74>)
 8001100:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001104:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001106:	4b18      	ldr	r3, [pc, #96]	; (8001168 <MX_SPI1_Init+0x74>)
 8001108:	2200      	movs	r2, #0
 800110a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800110c:	4b16      	ldr	r3, [pc, #88]	; (8001168 <MX_SPI1_Init+0x74>)
 800110e:	2200      	movs	r2, #0
 8001110:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001112:	4b15      	ldr	r3, [pc, #84]	; (8001168 <MX_SPI1_Init+0x74>)
 8001114:	2202      	movs	r2, #2
 8001116:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001118:	4b13      	ldr	r3, [pc, #76]	; (8001168 <MX_SPI1_Init+0x74>)
 800111a:	2201      	movs	r2, #1
 800111c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800111e:	4b12      	ldr	r3, [pc, #72]	; (8001168 <MX_SPI1_Init+0x74>)
 8001120:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001124:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001126:	4b10      	ldr	r3, [pc, #64]	; (8001168 <MX_SPI1_Init+0x74>)
 8001128:	2200      	movs	r2, #0
 800112a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800112c:	4b0e      	ldr	r3, [pc, #56]	; (8001168 <MX_SPI1_Init+0x74>)
 800112e:	2200      	movs	r2, #0
 8001130:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001132:	4b0d      	ldr	r3, [pc, #52]	; (8001168 <MX_SPI1_Init+0x74>)
 8001134:	2200      	movs	r2, #0
 8001136:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001138:	4b0b      	ldr	r3, [pc, #44]	; (8001168 <MX_SPI1_Init+0x74>)
 800113a:	2200      	movs	r2, #0
 800113c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800113e:	4b0a      	ldr	r3, [pc, #40]	; (8001168 <MX_SPI1_Init+0x74>)
 8001140:	220a      	movs	r2, #10
 8001142:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001144:	4808      	ldr	r0, [pc, #32]	; (8001168 <MX_SPI1_Init+0x74>)
 8001146:	f002 f9d5 	bl	80034f4 <HAL_SPI_Init>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001150:	f000 f9ce 	bl	80014f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  __HAL_SPI_ENABLE(&hspi1);
 8001154:	4b04      	ldr	r3, [pc, #16]	; (8001168 <MX_SPI1_Init+0x74>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	4b03      	ldr	r3, [pc, #12]	; (8001168 <MX_SPI1_Init+0x74>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001162:	601a      	str	r2, [r3, #0]
  /* USER CODE END SPI1_Init 2 */

}
 8001164:	bf00      	nop
 8001166:	bd80      	pop	{r7, pc}
 8001168:	200000e8 	.word	0x200000e8
 800116c:	40013000 	.word	0x40013000

08001170 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001174:	4b17      	ldr	r3, [pc, #92]	; (80011d4 <MX_SPI3_Init+0x64>)
 8001176:	4a18      	ldr	r2, [pc, #96]	; (80011d8 <MX_SPI3_Init+0x68>)
 8001178:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800117a:	4b16      	ldr	r3, [pc, #88]	; (80011d4 <MX_SPI3_Init+0x64>)
 800117c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001180:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001182:	4b14      	ldr	r3, [pc, #80]	; (80011d4 <MX_SPI3_Init+0x64>)
 8001184:	2200      	movs	r2, #0
 8001186:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001188:	4b12      	ldr	r3, [pc, #72]	; (80011d4 <MX_SPI3_Init+0x64>)
 800118a:	2200      	movs	r2, #0
 800118c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800118e:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <MX_SPI3_Init+0x64>)
 8001190:	2200      	movs	r2, #0
 8001192:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001194:	4b0f      	ldr	r3, [pc, #60]	; (80011d4 <MX_SPI3_Init+0x64>)
 8001196:	2200      	movs	r2, #0
 8001198:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800119a:	4b0e      	ldr	r3, [pc, #56]	; (80011d4 <MX_SPI3_Init+0x64>)
 800119c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011a0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011a2:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <MX_SPI3_Init+0x64>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011a8:	4b0a      	ldr	r3, [pc, #40]	; (80011d4 <MX_SPI3_Init+0x64>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80011ae:	4b09      	ldr	r3, [pc, #36]	; (80011d4 <MX_SPI3_Init+0x64>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011b4:	4b07      	ldr	r3, [pc, #28]	; (80011d4 <MX_SPI3_Init+0x64>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80011ba:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <MX_SPI3_Init+0x64>)
 80011bc:	220a      	movs	r2, #10
 80011be:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80011c0:	4804      	ldr	r0, [pc, #16]	; (80011d4 <MX_SPI3_Init+0x64>)
 80011c2:	f002 f997 	bl	80034f4 <HAL_SPI_Init>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80011cc:	f000 f990 	bl	80014f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80011d0:	bf00      	nop
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	20000140 	.word	0x20000140
 80011d8:	40003c00 	.word	0x40003c00

080011dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011e0:	4b15      	ldr	r3, [pc, #84]	; (8001238 <MX_USART1_UART_Init+0x5c>)
 80011e2:	4a16      	ldr	r2, [pc, #88]	; (800123c <MX_USART1_UART_Init+0x60>)
 80011e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011e6:	4b14      	ldr	r3, [pc, #80]	; (8001238 <MX_USART1_UART_Init+0x5c>)
 80011e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011ee:	4b12      	ldr	r3, [pc, #72]	; (8001238 <MX_USART1_UART_Init+0x5c>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011f4:	4b10      	ldr	r3, [pc, #64]	; (8001238 <MX_USART1_UART_Init+0x5c>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011fa:	4b0f      	ldr	r3, [pc, #60]	; (8001238 <MX_USART1_UART_Init+0x5c>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001200:	4b0d      	ldr	r3, [pc, #52]	; (8001238 <MX_USART1_UART_Init+0x5c>)
 8001202:	220c      	movs	r2, #12
 8001204:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001206:	4b0c      	ldr	r3, [pc, #48]	; (8001238 <MX_USART1_UART_Init+0x5c>)
 8001208:	2200      	movs	r2, #0
 800120a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800120c:	4b0a      	ldr	r3, [pc, #40]	; (8001238 <MX_USART1_UART_Init+0x5c>)
 800120e:	2200      	movs	r2, #0
 8001210:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001212:	4809      	ldr	r0, [pc, #36]	; (8001238 <MX_USART1_UART_Init+0x5c>)
 8001214:	f002 fa3f 	bl	8003696 <HAL_UART_Init>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800121e:	f000 f967 	bl	80014f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE); //turn on rx interrupt forever
 8001222:	4b05      	ldr	r3, [pc, #20]	; (8001238 <MX_USART1_UART_Init+0x5c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	68da      	ldr	r2, [r3, #12]
 8001228:	4b03      	ldr	r3, [pc, #12]	; (8001238 <MX_USART1_UART_Init+0x5c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f042 0220 	orr.w	r2, r2, #32
 8001230:	60da      	str	r2, [r3, #12]
  /* USER CODE END USART1_Init 2 */

}
 8001232:	bf00      	nop
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	20000198 	.word	0x20000198
 800123c:	40011000 	.word	0x40011000

08001240 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001244:	4b15      	ldr	r3, [pc, #84]	; (800129c <MX_USART2_UART_Init+0x5c>)
 8001246:	4a16      	ldr	r2, [pc, #88]	; (80012a0 <MX_USART2_UART_Init+0x60>)
 8001248:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800124a:	4b14      	ldr	r3, [pc, #80]	; (800129c <MX_USART2_UART_Init+0x5c>)
 800124c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001250:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001252:	4b12      	ldr	r3, [pc, #72]	; (800129c <MX_USART2_UART_Init+0x5c>)
 8001254:	2200      	movs	r2, #0
 8001256:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001258:	4b10      	ldr	r3, [pc, #64]	; (800129c <MX_USART2_UART_Init+0x5c>)
 800125a:	2200      	movs	r2, #0
 800125c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800125e:	4b0f      	ldr	r3, [pc, #60]	; (800129c <MX_USART2_UART_Init+0x5c>)
 8001260:	2200      	movs	r2, #0
 8001262:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001264:	4b0d      	ldr	r3, [pc, #52]	; (800129c <MX_USART2_UART_Init+0x5c>)
 8001266:	220c      	movs	r2, #12
 8001268:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800126a:	4b0c      	ldr	r3, [pc, #48]	; (800129c <MX_USART2_UART_Init+0x5c>)
 800126c:	2200      	movs	r2, #0
 800126e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001270:	4b0a      	ldr	r3, [pc, #40]	; (800129c <MX_USART2_UART_Init+0x5c>)
 8001272:	2200      	movs	r2, #0
 8001274:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001276:	4809      	ldr	r0, [pc, #36]	; (800129c <MX_USART2_UART_Init+0x5c>)
 8001278:	f002 fa0d 	bl	8003696 <HAL_UART_Init>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001282:	f000 f935 	bl	80014f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE); //turn on rx interrupt forever
 8001286:	4b05      	ldr	r3, [pc, #20]	; (800129c <MX_USART2_UART_Init+0x5c>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	68da      	ldr	r2, [r3, #12]
 800128c:	4b03      	ldr	r3, [pc, #12]	; (800129c <MX_USART2_UART_Init+0x5c>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f042 0220 	orr.w	r2, r2, #32
 8001294:	60da      	str	r2, [r3, #12]
  /* USER CODE END USART2_Init 2 */

}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	200001dc 	.word	0x200001dc
 80012a0:	40004400 	.word	0x40004400

080012a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08c      	sub	sp, #48	; 0x30
 80012a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012aa:	f107 031c 	add.w	r3, r7, #28
 80012ae:	2200      	movs	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]
 80012b2:	605a      	str	r2, [r3, #4]
 80012b4:	609a      	str	r2, [r3, #8]
 80012b6:	60da      	str	r2, [r3, #12]
 80012b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	61bb      	str	r3, [r7, #24]
 80012be:	4b4c      	ldr	r3, [pc, #304]	; (80013f0 <MX_GPIO_Init+0x14c>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	4a4b      	ldr	r2, [pc, #300]	; (80013f0 <MX_GPIO_Init+0x14c>)
 80012c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012c8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ca:	4b49      	ldr	r3, [pc, #292]	; (80013f0 <MX_GPIO_Init+0x14c>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012d2:	61bb      	str	r3, [r7, #24]
 80012d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	617b      	str	r3, [r7, #20]
 80012da:	4b45      	ldr	r3, [pc, #276]	; (80013f0 <MX_GPIO_Init+0x14c>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	4a44      	ldr	r2, [pc, #272]	; (80013f0 <MX_GPIO_Init+0x14c>)
 80012e0:	f043 0301 	orr.w	r3, r3, #1
 80012e4:	6313      	str	r3, [r2, #48]	; 0x30
 80012e6:	4b42      	ldr	r3, [pc, #264]	; (80013f0 <MX_GPIO_Init+0x14c>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	617b      	str	r3, [r7, #20]
 80012f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	613b      	str	r3, [r7, #16]
 80012f6:	4b3e      	ldr	r3, [pc, #248]	; (80013f0 <MX_GPIO_Init+0x14c>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	4a3d      	ldr	r2, [pc, #244]	; (80013f0 <MX_GPIO_Init+0x14c>)
 80012fc:	f043 0310 	orr.w	r3, r3, #16
 8001300:	6313      	str	r3, [r2, #48]	; 0x30
 8001302:	4b3b      	ldr	r3, [pc, #236]	; (80013f0 <MX_GPIO_Init+0x14c>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	f003 0310 	and.w	r3, r3, #16
 800130a:	613b      	str	r3, [r7, #16]
 800130c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	60fb      	str	r3, [r7, #12]
 8001312:	4b37      	ldr	r3, [pc, #220]	; (80013f0 <MX_GPIO_Init+0x14c>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	4a36      	ldr	r2, [pc, #216]	; (80013f0 <MX_GPIO_Init+0x14c>)
 8001318:	f043 0308 	orr.w	r3, r3, #8
 800131c:	6313      	str	r3, [r2, #48]	; 0x30
 800131e:	4b34      	ldr	r3, [pc, #208]	; (80013f0 <MX_GPIO_Init+0x14c>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	f003 0308 	and.w	r3, r3, #8
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	60bb      	str	r3, [r7, #8]
 800132e:	4b30      	ldr	r3, [pc, #192]	; (80013f0 <MX_GPIO_Init+0x14c>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	4a2f      	ldr	r2, [pc, #188]	; (80013f0 <MX_GPIO_Init+0x14c>)
 8001334:	f043 0304 	orr.w	r3, r3, #4
 8001338:	6313      	str	r3, [r2, #48]	; 0x30
 800133a:	4b2d      	ldr	r3, [pc, #180]	; (80013f0 <MX_GPIO_Init+0x14c>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	f003 0304 	and.w	r3, r3, #4
 8001342:	60bb      	str	r3, [r7, #8]
 8001344:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	607b      	str	r3, [r7, #4]
 800134a:	4b29      	ldr	r3, [pc, #164]	; (80013f0 <MX_GPIO_Init+0x14c>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	4a28      	ldr	r2, [pc, #160]	; (80013f0 <MX_GPIO_Init+0x14c>)
 8001350:	f043 0302 	orr.w	r3, r3, #2
 8001354:	6313      	str	r3, [r2, #48]	; 0x30
 8001356:	4b26      	ldr	r3, [pc, #152]	; (80013f0 <MX_GPIO_Init+0x14c>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	607b      	str	r3, [r7, #4]
 8001360:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LCD_RES_Pin, GPIO_PIN_RESET);
 8001362:	2200      	movs	r2, #0
 8001364:	f241 0110 	movw	r1, #4112	; 0x1010
 8001368:	4822      	ldr	r0, [pc, #136]	; (80013f4 <MX_GPIO_Init+0x150>)
 800136a:	f001 facf 	bl	800290c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 800136e:	2200      	movs	r2, #0
 8001370:	2108      	movs	r1, #8
 8001372:	4821      	ldr	r0, [pc, #132]	; (80013f8 <MX_GPIO_Init+0x154>)
 8001374:	f001 faca 	bl	800290c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001378:	2310      	movs	r3, #16
 800137a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800137c:	2301      	movs	r3, #1
 800137e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	2300      	movs	r3, #0
 8001382:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001384:	2300      	movs	r3, #0
 8001386:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001388:	f107 031c 	add.w	r3, r7, #28
 800138c:	4619      	mov	r1, r3
 800138e:	4819      	ldr	r0, [pc, #100]	; (80013f4 <MX_GPIO_Init+0x150>)
 8001390:	f001 f920 	bl	80025d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001394:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001398:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800139a:	2300      	movs	r3, #0
 800139c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a2:	f107 031c 	add.w	r3, r7, #28
 80013a6:	4619      	mov	r1, r3
 80013a8:	4812      	ldr	r0, [pc, #72]	; (80013f4 <MX_GPIO_Init+0x150>)
 80013aa:	f001 f913 	bl	80025d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RES_Pin */
  GPIO_InitStruct.Pin = LCD_RES_Pin;
 80013ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b4:	2301      	movs	r3, #1
 80013b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013b8:	2301      	movs	r3, #1
 80013ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013bc:	2303      	movs	r3, #3
 80013be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_RES_GPIO_Port, &GPIO_InitStruct);
 80013c0:	f107 031c 	add.w	r3, r7, #28
 80013c4:	4619      	mov	r1, r3
 80013c6:	480b      	ldr	r0, [pc, #44]	; (80013f4 <MX_GPIO_Init+0x150>)
 80013c8:	f001 f904 	bl	80025d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013cc:	2308      	movs	r3, #8
 80013ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d0:	2301      	movs	r3, #1
 80013d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d8:	2300      	movs	r3, #0
 80013da:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013dc:	f107 031c 	add.w	r3, r7, #28
 80013e0:	4619      	mov	r1, r3
 80013e2:	4805      	ldr	r0, [pc, #20]	; (80013f8 <MX_GPIO_Init+0x154>)
 80013e4:	f001 f8f6 	bl	80025d4 <HAL_GPIO_Init>

}
 80013e8:	bf00      	nop
 80013ea:	3730      	adds	r7, #48	; 0x30
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40023800 	.word	0x40023800
 80013f4:	40020000 	.word	0x40020000
 80013f8:	40020400 	.word	0x40020400

080013fc <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08e      	sub	sp, #56	; 0x38
 8001400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001402:	f107 031c 	add.w	r3, r7, #28
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	605a      	str	r2, [r3, #4]
 800140c:	609a      	str	r2, [r3, #8]
 800140e:	60da      	str	r2, [r3, #12]
 8001410:	611a      	str	r2, [r3, #16]
 8001412:	615a      	str	r2, [r3, #20]
 8001414:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8001416:	463b      	mov	r3, r7
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	60da      	str	r2, [r3, #12]
 8001422:	611a      	str	r2, [r3, #16]
 8001424:	615a      	str	r2, [r3, #20]
 8001426:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001428:	4b2f      	ldr	r3, [pc, #188]	; (80014e8 <MX_FSMC_Init+0xec>)
 800142a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800142e:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001430:	4b2d      	ldr	r3, [pc, #180]	; (80014e8 <MX_FSMC_Init+0xec>)
 8001432:	4a2e      	ldr	r2, [pc, #184]	; (80014ec <MX_FSMC_Init+0xf0>)
 8001434:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001436:	4b2c      	ldr	r3, [pc, #176]	; (80014e8 <MX_FSMC_Init+0xec>)
 8001438:	2200      	movs	r2, #0
 800143a:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 800143c:	4b2a      	ldr	r3, [pc, #168]	; (80014e8 <MX_FSMC_Init+0xec>)
 800143e:	2200      	movs	r2, #0
 8001440:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001442:	4b29      	ldr	r3, [pc, #164]	; (80014e8 <MX_FSMC_Init+0xec>)
 8001444:	2200      	movs	r2, #0
 8001446:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001448:	4b27      	ldr	r3, [pc, #156]	; (80014e8 <MX_FSMC_Init+0xec>)
 800144a:	2210      	movs	r2, #16
 800144c:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800144e:	4b26      	ldr	r3, [pc, #152]	; (80014e8 <MX_FSMC_Init+0xec>)
 8001450:	2200      	movs	r2, #0
 8001452:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001454:	4b24      	ldr	r3, [pc, #144]	; (80014e8 <MX_FSMC_Init+0xec>)
 8001456:	2200      	movs	r2, #0
 8001458:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800145a:	4b23      	ldr	r3, [pc, #140]	; (80014e8 <MX_FSMC_Init+0xec>)
 800145c:	2200      	movs	r2, #0
 800145e:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001460:	4b21      	ldr	r3, [pc, #132]	; (80014e8 <MX_FSMC_Init+0xec>)
 8001462:	2200      	movs	r2, #0
 8001464:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001466:	4b20      	ldr	r3, [pc, #128]	; (80014e8 <MX_FSMC_Init+0xec>)
 8001468:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800146c:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800146e:	4b1e      	ldr	r3, [pc, #120]	; (80014e8 <MX_FSMC_Init+0xec>)
 8001470:	2200      	movs	r2, #0
 8001472:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8001474:	4b1c      	ldr	r3, [pc, #112]	; (80014e8 <MX_FSMC_Init+0xec>)
 8001476:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800147a:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800147c:	4b1a      	ldr	r3, [pc, #104]	; (80014e8 <MX_FSMC_Init+0xec>)
 800147e:	2200      	movs	r2, #0
 8001480:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001482:	4b19      	ldr	r3, [pc, #100]	; (80014e8 <MX_FSMC_Init+0xec>)
 8001484:	2200      	movs	r2, #0
 8001486:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001488:	4b17      	ldr	r3, [pc, #92]	; (80014e8 <MX_FSMC_Init+0xec>)
 800148a:	2200      	movs	r2, #0
 800148c:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 2;
 800148e:	2302      	movs	r3, #2
 8001490:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8001492:	230f      	movs	r3, #15
 8001494:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 4;
 8001496:	2304      	movs	r3, #4
 8001498:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 800149a:	2300      	movs	r3, #0
 800149c:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 800149e:	2310      	movs	r3, #16
 80014a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 80014a2:	2311      	movs	r3, #17
 80014a4:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80014a6:	2300      	movs	r3, #0
 80014a8:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 15;
 80014aa:	230f      	movs	r3, #15
 80014ac:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 80014ae:	230f      	movs	r3, #15
 80014b0:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 40;
 80014b2:	2328      	movs	r3, #40	; 0x28
 80014b4:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 80014b6:	2300      	movs	r3, #0
 80014b8:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 80014ba:	2310      	movs	r3, #16
 80014bc:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 80014be:	2311      	movs	r3, #17
 80014c0:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 80014c2:	2300      	movs	r3, #0
 80014c4:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 80014c6:	463a      	mov	r2, r7
 80014c8:	f107 031c 	add.w	r3, r7, #28
 80014cc:	4619      	mov	r1, r3
 80014ce:	4806      	ldr	r0, [pc, #24]	; (80014e8 <MX_FSMC_Init+0xec>)
 80014d0:	f002 f899 	bl	8003606 <HAL_SRAM_Init>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 80014da:	f000 f809 	bl	80014f0 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80014de:	bf00      	nop
 80014e0:	3738      	adds	r7, #56	; 0x38
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	20000220 	.word	0x20000220
 80014ec:	a0000104 	.word	0xa0000104

080014f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014f4:	b672      	cpsid	i
}
 80014f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014f8:	e7fe      	b.n	80014f8 <Error_Handler+0x8>
	...

080014fc <SPI1_Transfer>:
#include <stm32f4xx_hal_gpio.h>
#include <stdio.h>


uint8_t SPI1_Transfer(uint8_t data)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	71fb      	strb	r3, [r7, #7]
	SPI_TypeDef *SPI1inst = hspi1.Instance;
 8001506:	4b12      	ldr	r3, [pc, #72]	; (8001550 <SPI1_Transfer+0x54>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	60fb      	str	r3, [r7, #12]
    SPI1inst->DR = data;
 800150c:	79fa      	ldrb	r2, [r7, #7]
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	60da      	str	r2, [r3, #12]
    while (!(SPI1inst->SR & (SPI_FLAG_TXE)));
 8001512:	bf00      	nop
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	f003 0302 	and.w	r3, r3, #2
 800151c:	2b00      	cmp	r3, #0
 800151e:	d0f9      	beq.n	8001514 <SPI1_Transfer+0x18>
    while (!(SPI1inst->SR & (SPI_FLAG_RXNE)));
 8001520:	bf00      	nop
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	2b00      	cmp	r3, #0
 800152c:	d0f9      	beq.n	8001522 <SPI1_Transfer+0x26>
    while (SPI1inst->SR & (SPI_FLAG_BSY));
 800152e:	bf00      	nop
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001538:	2b00      	cmp	r3, #0
 800153a:	d1f9      	bne.n	8001530 <SPI1_Transfer+0x34>
    return SPI1inst->DR;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	b2db      	uxtb	r3, r3
}
 8001542:	4618      	mov	r0, r3
 8001544:	3714      	adds	r7, #20
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	200000e8 	.word	0x200000e8

08001554 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	607b      	str	r3, [r7, #4]
 800155e:	4b10      	ldr	r3, [pc, #64]	; (80015a0 <HAL_MspInit+0x4c>)
 8001560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001562:	4a0f      	ldr	r2, [pc, #60]	; (80015a0 <HAL_MspInit+0x4c>)
 8001564:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001568:	6453      	str	r3, [r2, #68]	; 0x44
 800156a:	4b0d      	ldr	r3, [pc, #52]	; (80015a0 <HAL_MspInit+0x4c>)
 800156c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001572:	607b      	str	r3, [r7, #4]
 8001574:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	603b      	str	r3, [r7, #0]
 800157a:	4b09      	ldr	r3, [pc, #36]	; (80015a0 <HAL_MspInit+0x4c>)
 800157c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157e:	4a08      	ldr	r2, [pc, #32]	; (80015a0 <HAL_MspInit+0x4c>)
 8001580:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001584:	6413      	str	r3, [r2, #64]	; 0x40
 8001586:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <HAL_MspInit+0x4c>)
 8001588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800158e:	603b      	str	r3, [r7, #0]
 8001590:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001592:	bf00      	nop
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	40023800 	.word	0x40023800

080015a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b08a      	sub	sp, #40	; 0x28
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ac:	f107 0314 	add.w	r3, r7, #20
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	605a      	str	r2, [r3, #4]
 80015b6:	609a      	str	r2, [r3, #8]
 80015b8:	60da      	str	r2, [r3, #12]
 80015ba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a19      	ldr	r2, [pc, #100]	; (8001628 <HAL_I2C_MspInit+0x84>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d12b      	bne.n	800161e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	613b      	str	r3, [r7, #16]
 80015ca:	4b18      	ldr	r3, [pc, #96]	; (800162c <HAL_I2C_MspInit+0x88>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	4a17      	ldr	r2, [pc, #92]	; (800162c <HAL_I2C_MspInit+0x88>)
 80015d0:	f043 0302 	orr.w	r3, r3, #2
 80015d4:	6313      	str	r3, [r2, #48]	; 0x30
 80015d6:	4b15      	ldr	r3, [pc, #84]	; (800162c <HAL_I2C_MspInit+0x88>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	613b      	str	r3, [r7, #16]
 80015e0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015e2:	23c0      	movs	r3, #192	; 0xc0
 80015e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015e6:	2312      	movs	r3, #18
 80015e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015ea:	2301      	movs	r3, #1
 80015ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ee:	2303      	movs	r3, #3
 80015f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015f2:	2304      	movs	r3, #4
 80015f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015f6:	f107 0314 	add.w	r3, r7, #20
 80015fa:	4619      	mov	r1, r3
 80015fc:	480c      	ldr	r0, [pc, #48]	; (8001630 <HAL_I2C_MspInit+0x8c>)
 80015fe:	f000 ffe9 	bl	80025d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	60fb      	str	r3, [r7, #12]
 8001606:	4b09      	ldr	r3, [pc, #36]	; (800162c <HAL_I2C_MspInit+0x88>)
 8001608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160a:	4a08      	ldr	r2, [pc, #32]	; (800162c <HAL_I2C_MspInit+0x88>)
 800160c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001610:	6413      	str	r3, [r2, #64]	; 0x40
 8001612:	4b06      	ldr	r3, [pc, #24]	; (800162c <HAL_I2C_MspInit+0x88>)
 8001614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001616:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800161e:	bf00      	nop
 8001620:	3728      	adds	r7, #40	; 0x28
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40005400 	.word	0x40005400
 800162c:	40023800 	.word	0x40023800
 8001630:	40020400 	.word	0x40020400

08001634 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b08c      	sub	sp, #48	; 0x30
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163c:	f107 031c 	add.w	r3, r7, #28
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]
 800164a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a41      	ldr	r2, [pc, #260]	; (8001758 <HAL_SPI_MspInit+0x124>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d12c      	bne.n	80016b0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	61bb      	str	r3, [r7, #24]
 800165a:	4b40      	ldr	r3, [pc, #256]	; (800175c <HAL_SPI_MspInit+0x128>)
 800165c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165e:	4a3f      	ldr	r2, [pc, #252]	; (800175c <HAL_SPI_MspInit+0x128>)
 8001660:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001664:	6453      	str	r3, [r2, #68]	; 0x44
 8001666:	4b3d      	ldr	r3, [pc, #244]	; (800175c <HAL_SPI_MspInit+0x128>)
 8001668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800166e:	61bb      	str	r3, [r7, #24]
 8001670:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	617b      	str	r3, [r7, #20]
 8001676:	4b39      	ldr	r3, [pc, #228]	; (800175c <HAL_SPI_MspInit+0x128>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	4a38      	ldr	r2, [pc, #224]	; (800175c <HAL_SPI_MspInit+0x128>)
 800167c:	f043 0301 	orr.w	r3, r3, #1
 8001680:	6313      	str	r3, [r2, #48]	; 0x30
 8001682:	4b36      	ldr	r3, [pc, #216]	; (800175c <HAL_SPI_MspInit+0x128>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	617b      	str	r3, [r7, #20]
 800168c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800168e:	23e0      	movs	r3, #224	; 0xe0
 8001690:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001692:	2302      	movs	r3, #2
 8001694:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001696:	2300      	movs	r3, #0
 8001698:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800169a:	2303      	movs	r3, #3
 800169c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800169e:	2305      	movs	r3, #5
 80016a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a2:	f107 031c 	add.w	r3, r7, #28
 80016a6:	4619      	mov	r1, r3
 80016a8:	482d      	ldr	r0, [pc, #180]	; (8001760 <HAL_SPI_MspInit+0x12c>)
 80016aa:	f000 ff93 	bl	80025d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80016ae:	e04f      	b.n	8001750 <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI3)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a2b      	ldr	r2, [pc, #172]	; (8001764 <HAL_SPI_MspInit+0x130>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d14a      	bne.n	8001750 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	613b      	str	r3, [r7, #16]
 80016be:	4b27      	ldr	r3, [pc, #156]	; (800175c <HAL_SPI_MspInit+0x128>)
 80016c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c2:	4a26      	ldr	r2, [pc, #152]	; (800175c <HAL_SPI_MspInit+0x128>)
 80016c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016c8:	6413      	str	r3, [r2, #64]	; 0x40
 80016ca:	4b24      	ldr	r3, [pc, #144]	; (800175c <HAL_SPI_MspInit+0x128>)
 80016cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016d2:	613b      	str	r3, [r7, #16]
 80016d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	60fb      	str	r3, [r7, #12]
 80016da:	4b20      	ldr	r3, [pc, #128]	; (800175c <HAL_SPI_MspInit+0x128>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	4a1f      	ldr	r2, [pc, #124]	; (800175c <HAL_SPI_MspInit+0x128>)
 80016e0:	f043 0304 	orr.w	r3, r3, #4
 80016e4:	6313      	str	r3, [r2, #48]	; 0x30
 80016e6:	4b1d      	ldr	r3, [pc, #116]	; (800175c <HAL_SPI_MspInit+0x128>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	f003 0304 	and.w	r3, r3, #4
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	60bb      	str	r3, [r7, #8]
 80016f6:	4b19      	ldr	r3, [pc, #100]	; (800175c <HAL_SPI_MspInit+0x128>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	4a18      	ldr	r2, [pc, #96]	; (800175c <HAL_SPI_MspInit+0x128>)
 80016fc:	f043 0302 	orr.w	r3, r3, #2
 8001700:	6313      	str	r3, [r2, #48]	; 0x30
 8001702:	4b16      	ldr	r3, [pc, #88]	; (800175c <HAL_SPI_MspInit+0x128>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	60bb      	str	r3, [r7, #8]
 800170c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800170e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001712:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001714:	2302      	movs	r3, #2
 8001716:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001718:	2300      	movs	r3, #0
 800171a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800171c:	2303      	movs	r3, #3
 800171e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001720:	2306      	movs	r3, #6
 8001722:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001724:	f107 031c 	add.w	r3, r7, #28
 8001728:	4619      	mov	r1, r3
 800172a:	480f      	ldr	r0, [pc, #60]	; (8001768 <HAL_SPI_MspInit+0x134>)
 800172c:	f000 ff52 	bl	80025d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001730:	2330      	movs	r3, #48	; 0x30
 8001732:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001734:	2302      	movs	r3, #2
 8001736:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001738:	2300      	movs	r3, #0
 800173a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800173c:	2303      	movs	r3, #3
 800173e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001740:	2306      	movs	r3, #6
 8001742:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001744:	f107 031c 	add.w	r3, r7, #28
 8001748:	4619      	mov	r1, r3
 800174a:	4808      	ldr	r0, [pc, #32]	; (800176c <HAL_SPI_MspInit+0x138>)
 800174c:	f000 ff42 	bl	80025d4 <HAL_GPIO_Init>
}
 8001750:	bf00      	nop
 8001752:	3730      	adds	r7, #48	; 0x30
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	40013000 	.word	0x40013000
 800175c:	40023800 	.word	0x40023800
 8001760:	40020000 	.word	0x40020000
 8001764:	40003c00 	.word	0x40003c00
 8001768:	40020800 	.word	0x40020800
 800176c:	40020400 	.word	0x40020400

08001770 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b08c      	sub	sp, #48	; 0x30
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001778:	f107 031c 	add.w	r3, r7, #28
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	605a      	str	r2, [r3, #4]
 8001782:	609a      	str	r2, [r3, #8]
 8001784:	60da      	str	r2, [r3, #12]
 8001786:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a3a      	ldr	r2, [pc, #232]	; (8001878 <HAL_UART_MspInit+0x108>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d135      	bne.n	80017fe <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	61bb      	str	r3, [r7, #24]
 8001796:	4b39      	ldr	r3, [pc, #228]	; (800187c <HAL_UART_MspInit+0x10c>)
 8001798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179a:	4a38      	ldr	r2, [pc, #224]	; (800187c <HAL_UART_MspInit+0x10c>)
 800179c:	f043 0310 	orr.w	r3, r3, #16
 80017a0:	6453      	str	r3, [r2, #68]	; 0x44
 80017a2:	4b36      	ldr	r3, [pc, #216]	; (800187c <HAL_UART_MspInit+0x10c>)
 80017a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a6:	f003 0310 	and.w	r3, r3, #16
 80017aa:	61bb      	str	r3, [r7, #24]
 80017ac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ae:	2300      	movs	r3, #0
 80017b0:	617b      	str	r3, [r7, #20]
 80017b2:	4b32      	ldr	r3, [pc, #200]	; (800187c <HAL_UART_MspInit+0x10c>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	4a31      	ldr	r2, [pc, #196]	; (800187c <HAL_UART_MspInit+0x10c>)
 80017b8:	f043 0301 	orr.w	r3, r3, #1
 80017bc:	6313      	str	r3, [r2, #48]	; 0x30
 80017be:	4b2f      	ldr	r3, [pc, #188]	; (800187c <HAL_UART_MspInit+0x10c>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	617b      	str	r3, [r7, #20]
 80017c8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80017ca:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80017ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d0:	2302      	movs	r3, #2
 80017d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d4:	2300      	movs	r3, #0
 80017d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d8:	2303      	movs	r3, #3
 80017da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80017dc:	2307      	movs	r3, #7
 80017de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e0:	f107 031c 	add.w	r3, r7, #28
 80017e4:	4619      	mov	r1, r3
 80017e6:	4826      	ldr	r0, [pc, #152]	; (8001880 <HAL_UART_MspInit+0x110>)
 80017e8:	f000 fef4 	bl	80025d4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80017ec:	2200      	movs	r2, #0
 80017ee:	2100      	movs	r1, #0
 80017f0:	2025      	movs	r0, #37	; 0x25
 80017f2:	f000 fe26 	bl	8002442 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80017f6:	2025      	movs	r0, #37	; 0x25
 80017f8:	f000 fe3f 	bl	800247a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017fc:	e038      	b.n	8001870 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a20      	ldr	r2, [pc, #128]	; (8001884 <HAL_UART_MspInit+0x114>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d133      	bne.n	8001870 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001808:	2300      	movs	r3, #0
 800180a:	613b      	str	r3, [r7, #16]
 800180c:	4b1b      	ldr	r3, [pc, #108]	; (800187c <HAL_UART_MspInit+0x10c>)
 800180e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001810:	4a1a      	ldr	r2, [pc, #104]	; (800187c <HAL_UART_MspInit+0x10c>)
 8001812:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001816:	6413      	str	r3, [r2, #64]	; 0x40
 8001818:	4b18      	ldr	r3, [pc, #96]	; (800187c <HAL_UART_MspInit+0x10c>)
 800181a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001820:	613b      	str	r3, [r7, #16]
 8001822:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001824:	2300      	movs	r3, #0
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	4b14      	ldr	r3, [pc, #80]	; (800187c <HAL_UART_MspInit+0x10c>)
 800182a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182c:	4a13      	ldr	r2, [pc, #76]	; (800187c <HAL_UART_MspInit+0x10c>)
 800182e:	f043 0301 	orr.w	r3, r3, #1
 8001832:	6313      	str	r3, [r2, #48]	; 0x30
 8001834:	4b11      	ldr	r3, [pc, #68]	; (800187c <HAL_UART_MspInit+0x10c>)
 8001836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001838:	f003 0301 	and.w	r3, r3, #1
 800183c:	60fb      	str	r3, [r7, #12]
 800183e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001840:	230c      	movs	r3, #12
 8001842:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001844:	2302      	movs	r3, #2
 8001846:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	2300      	movs	r3, #0
 800184a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800184c:	2303      	movs	r3, #3
 800184e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001850:	2307      	movs	r3, #7
 8001852:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001854:	f107 031c 	add.w	r3, r7, #28
 8001858:	4619      	mov	r1, r3
 800185a:	4809      	ldr	r0, [pc, #36]	; (8001880 <HAL_UART_MspInit+0x110>)
 800185c:	f000 feba 	bl	80025d4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001860:	2200      	movs	r2, #0
 8001862:	2100      	movs	r1, #0
 8001864:	2026      	movs	r0, #38	; 0x26
 8001866:	f000 fdec 	bl	8002442 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800186a:	2026      	movs	r0, #38	; 0x26
 800186c:	f000 fe05 	bl	800247a <HAL_NVIC_EnableIRQ>
}
 8001870:	bf00      	nop
 8001872:	3730      	adds	r7, #48	; 0x30
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	40011000 	.word	0x40011000
 800187c:	40023800 	.word	0x40023800
 8001880:	40020000 	.word	0x40020000
 8001884:	40004400 	.word	0x40004400

08001888 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800188e:	1d3b      	adds	r3, r7, #4
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	605a      	str	r2, [r3, #4]
 8001896:	609a      	str	r2, [r3, #8]
 8001898:	60da      	str	r2, [r3, #12]
 800189a:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 800189c:	4b1c      	ldr	r3, [pc, #112]	; (8001910 <HAL_FSMC_MspInit+0x88>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d131      	bne.n	8001908 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80018a4:	4b1a      	ldr	r3, [pc, #104]	; (8001910 <HAL_FSMC_MspInit+0x88>)
 80018a6:	2201      	movs	r2, #1
 80018a8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	603b      	str	r3, [r7, #0]
 80018ae:	4b19      	ldr	r3, [pc, #100]	; (8001914 <HAL_FSMC_MspInit+0x8c>)
 80018b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018b2:	4a18      	ldr	r2, [pc, #96]	; (8001914 <HAL_FSMC_MspInit+0x8c>)
 80018b4:	f043 0301 	orr.w	r3, r3, #1
 80018b8:	6393      	str	r3, [r2, #56]	; 0x38
 80018ba:	4b16      	ldr	r3, [pc, #88]	; (8001914 <HAL_FSMC_MspInit+0x8c>)
 80018bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	603b      	str	r3, [r7, #0]
 80018c4:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80018c6:	f64f 7380 	movw	r3, #65408	; 0xff80
 80018ca:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018cc:	2302      	movs	r3, #2
 80018ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d0:	2300      	movs	r3, #0
 80018d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d4:	2303      	movs	r3, #3
 80018d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80018d8:	230c      	movs	r3, #12
 80018da:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018dc:	1d3b      	adds	r3, r7, #4
 80018de:	4619      	mov	r1, r3
 80018e0:	480d      	ldr	r0, [pc, #52]	; (8001918 <HAL_FSMC_MspInit+0x90>)
 80018e2:	f000 fe77 	bl	80025d4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13
 80018e6:	f24e 73b3 	movw	r3, #59315	; 0xe7b3
 80018ea:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ec:	2302      	movs	r3, #2
 80018ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f0:	2300      	movs	r3, #0
 80018f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f4:	2303      	movs	r3, #3
 80018f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80018f8:	230c      	movs	r3, #12
 80018fa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018fc:	1d3b      	adds	r3, r7, #4
 80018fe:	4619      	mov	r1, r3
 8001900:	4806      	ldr	r0, [pc, #24]	; (800191c <HAL_FSMC_MspInit+0x94>)
 8001902:	f000 fe67 	bl	80025d4 <HAL_GPIO_Init>
 8001906:	e000      	b.n	800190a <HAL_FSMC_MspInit+0x82>
    return;
 8001908:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800190a:	3718      	adds	r7, #24
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	20000274 	.word	0x20000274
 8001914:	40023800 	.word	0x40023800
 8001918:	40021000 	.word	0x40021000
 800191c:	40020c00 	.word	0x40020c00

08001920 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001928:	f7ff ffae 	bl	8001888 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800192c:	bf00      	nop
 800192e:	3708      	adds	r7, #8
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}

08001934 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001938:	e7fe      	b.n	8001938 <NMI_Handler+0x4>

0800193a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800193a:	b480      	push	{r7}
 800193c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800193e:	e7fe      	b.n	800193e <HardFault_Handler+0x4>

08001940 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001944:	e7fe      	b.n	8001944 <MemManage_Handler+0x4>

08001946 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001946:	b480      	push	{r7}
 8001948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800194a:	e7fe      	b.n	800194a <BusFault_Handler+0x4>

0800194c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001950:	e7fe      	b.n	8001950 <UsageFault_Handler+0x4>

08001952 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001952:	b480      	push	{r7}
 8001954:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001956:	bf00      	nop
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001964:	bf00      	nop
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr

0800196e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800196e:	b480      	push	{r7}
 8001970:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001980:	f000 fc40 	bl	8002204 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001984:	bf00      	nop
 8001986:	bd80      	pop	{r7, pc}

08001988 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  static int ledVal = 0;
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, ledVal);
 800198e:	4b24      	ldr	r3, [pc, #144]	; (8001a20 <USART1_IRQHandler+0x98>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	b2db      	uxtb	r3, r3
 8001994:	461a      	mov	r2, r3
 8001996:	2108      	movs	r1, #8
 8001998:	4822      	ldr	r0, [pc, #136]	; (8001a24 <USART1_IRQHandler+0x9c>)
 800199a:	f000 ffb7 	bl	800290c <HAL_GPIO_WritePin>
  ledVal = !ledVal;
 800199e:	4b20      	ldr	r3, [pc, #128]	; (8001a20 <USART1_IRQHandler+0x98>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	bf0c      	ite	eq
 80019a6:	2301      	moveq	r3, #1
 80019a8:	2300      	movne	r3, #0
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	461a      	mov	r2, r3
 80019ae:	4b1c      	ldr	r3, [pc, #112]	; (8001a20 <USART1_IRQHandler+0x98>)
 80019b0:	601a      	str	r2, [r3, #0]
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80019b2:	481d      	ldr	r0, [pc, #116]	; (8001a28 <USART1_IRQHandler+0xa0>)
 80019b4:	f001 ff4e 	bl	8003854 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  volatile unsigned int IIR;
  IIR = USART1->SR;
 80019b8:	4b1c      	ldr	r3, [pc, #112]	; (8001a2c <USART1_IRQHandler+0xa4>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	603b      	str	r3, [r7, #0]
  if(IIR & UART_FLAG_RXNE){
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	f003 0320 	and.w	r3, r3, #32
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d009      	beq.n	80019dc <USART1_IRQHandler+0x54>
  		//Read Data Register Not Empty
  		char t = USART1->DR; // the character from the USART1 data register is saved in t
 80019c8:	4b18      	ldr	r3, [pc, #96]	; (8001a2c <USART1_IRQHandler+0xa4>)
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	71fb      	strb	r3, [r7, #7]
  		put_in_rx_buffer(t,DBG_UART);
 80019ce:	4b18      	ldr	r3, [pc, #96]	; (8001a30 <USART1_IRQHandler+0xa8>)
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	79fb      	ldrb	r3, [r7, #7]
 80019d4:	4611      	mov	r1, r2
 80019d6:	4618      	mov	r0, r3
 80019d8:	f000 f93c 	bl	8001c54 <put_in_rx_buffer>
      }
  if(IIR & UART_FLAG_TXE){
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d018      	beq.n	8001a18 <USART1_IRQHandler+0x90>
  		if(wr_pointer_dbg==rd_pointer_dbg){
 80019e6:	4b13      	ldr	r3, [pc, #76]	; (8001a34 <USART1_IRQHandler+0xac>)
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	4b13      	ldr	r3, [pc, #76]	; (8001a38 <USART1_IRQHandler+0xb0>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d108      	bne.n	8001a04 <USART1_IRQHandler+0x7c>
  			__HAL_UART_DISABLE_IT(&huart1, UART_IT_TXE); //whole message transmitted
 80019f2:	4b0d      	ldr	r3, [pc, #52]	; (8001a28 <USART1_IRQHandler+0xa0>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	68da      	ldr	r2, [r3, #12]
 80019f8:	4b0b      	ldr	r3, [pc, #44]	; (8001a28 <USART1_IRQHandler+0xa0>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a00:	60da      	str	r2, [r3, #12]
  		}
  	}


  /* USER CODE END USART1_IRQn 1 */
}
 8001a02:	e009      	b.n	8001a18 <USART1_IRQHandler+0x90>
  			DBG_UART->DR = get_from_tx_buffer(DBG_UART);
 8001a04:	4b0a      	ldr	r3, [pc, #40]	; (8001a30 <USART1_IRQHandler+0xa8>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f000 f9c7 	bl	8001d9c <get_from_tx_buffer>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	461a      	mov	r2, r3
 8001a12:	4b07      	ldr	r3, [pc, #28]	; (8001a30 <USART1_IRQHandler+0xa8>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	605a      	str	r2, [r3, #4]
}
 8001a18:	bf00      	nop
 8001a1a:	3708      	adds	r7, #8
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	20000278 	.word	0x20000278
 8001a24:	40020400 	.word	0x40020400
 8001a28:	20000198 	.word	0x20000198
 8001a2c:	40011000 	.word	0x40011000
 8001a30:	20000008 	.word	0x20000008
 8001a34:	20000a8c 	.word	0x20000a8c
 8001a38:	20000a88 	.word	0x20000a88

08001a3c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a42:	481b      	ldr	r0, [pc, #108]	; (8001ab0 <USART2_IRQHandler+0x74>)
 8001a44:	f001 ff06 	bl	8003854 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  volatile unsigned int IIR;
  	IIR=USART2->SR;
 8001a48:	4b1a      	ldr	r3, [pc, #104]	; (8001ab4 <USART2_IRQHandler+0x78>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	603b      	str	r3, [r7, #0]
    if(IIR & UART_FLAG_RXNE){
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	f003 0320 	and.w	r3, r3, #32
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d009      	beq.n	8001a6c <USART2_IRQHandler+0x30>
  		// check if the USART6 receive interrupt flag was set
  		char t = USART2->DR; // the character from the USART1 data register is saved in t
 8001a58:	4b16      	ldr	r3, [pc, #88]	; (8001ab4 <USART2_IRQHandler+0x78>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	71fb      	strb	r3, [r7, #7]
  		put_in_rx_buffer(t,RS485_UART);
 8001a5e:	4b16      	ldr	r3, [pc, #88]	; (8001ab8 <USART2_IRQHandler+0x7c>)
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	79fb      	ldrb	r3, [r7, #7]
 8001a64:	4611      	mov	r1, r2
 8001a66:	4618      	mov	r0, r3
 8001a68:	f000 f8f4 	bl	8001c54 <put_in_rx_buffer>
      }
  	if(IIR & UART_FLAG_TXE){
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d017      	beq.n	8001aa6 <USART2_IRQHandler+0x6a>
  		if(wr_pointer_rs485==rd_pointer_rs485){
 8001a76:	4b11      	ldr	r3, [pc, #68]	; (8001abc <USART2_IRQHandler+0x80>)
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	4b11      	ldr	r3, [pc, #68]	; (8001ac0 <USART2_IRQHandler+0x84>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d108      	bne.n	8001a94 <USART2_IRQHandler+0x58>
  			__HAL_UART_DISABLE_IT(&huart2, UART_IT_TXE);
 8001a82:	4b0b      	ldr	r3, [pc, #44]	; (8001ab0 <USART2_IRQHandler+0x74>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	68da      	ldr	r2, [r3, #12]
 8001a88:	4b09      	ldr	r3, [pc, #36]	; (8001ab0 <USART2_IRQHandler+0x74>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a90:	60da      	str	r2, [r3, #12]
  			USART2->DR = get_from_tx_buffer(RS485_UART);
  		}
  	}

  /* USER CODE END USART2_IRQn 1 */
}
 8001a92:	e008      	b.n	8001aa6 <USART2_IRQHandler+0x6a>
  			USART2->DR = get_from_tx_buffer(RS485_UART);
 8001a94:	4b08      	ldr	r3, [pc, #32]	; (8001ab8 <USART2_IRQHandler+0x7c>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f000 f97f 	bl	8001d9c <get_from_tx_buffer>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	4b04      	ldr	r3, [pc, #16]	; (8001ab4 <USART2_IRQHandler+0x78>)
 8001aa4:	605a      	str	r2, [r3, #4]
}
 8001aa6:	bf00      	nop
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	200001dc 	.word	0x200001dc
 8001ab4:	40004400 	.word	0x40004400
 8001ab8:	20000004 	.word	0x20000004
 8001abc:	20000684 	.word	0x20000684
 8001ac0:	20000680 	.word	0x20000680

08001ac4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b086      	sub	sp, #24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	60f8      	str	r0, [r7, #12]
 8001acc:	60b9      	str	r1, [r7, #8]
 8001ace:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	617b      	str	r3, [r7, #20]
 8001ad4:	e00a      	b.n	8001aec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001ad6:	f3af 8000 	nop.w
 8001ada:	4601      	mov	r1, r0
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	1c5a      	adds	r2, r3, #1
 8001ae0:	60ba      	str	r2, [r7, #8]
 8001ae2:	b2ca      	uxtb	r2, r1
 8001ae4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	617b      	str	r3, [r7, #20]
 8001aec:	697a      	ldr	r2, [r7, #20]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	dbf0      	blt.n	8001ad6 <_read+0x12>
	}

return len;
 8001af4:	687b      	ldr	r3, [r7, #4]
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3718      	adds	r7, #24
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b086      	sub	sp, #24
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	60f8      	str	r0, [r7, #12]
 8001b06:	60b9      	str	r1, [r7, #8]
 8001b08:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	617b      	str	r3, [r7, #20]
 8001b0e:	e009      	b.n	8001b24 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	1c5a      	adds	r2, r3, #1
 8001b14:	60ba      	str	r2, [r7, #8]
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f000 f889 	bl	8001c30 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	3301      	adds	r3, #1
 8001b22:	617b      	str	r3, [r7, #20]
 8001b24:	697a      	ldr	r2, [r7, #20]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	dbf1      	blt.n	8001b10 <_write+0x12>
	}
	return len;
 8001b2c:	687b      	ldr	r3, [r7, #4]
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3718      	adds	r7, #24
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <_close>:

int _close(int file)
{
 8001b36:	b480      	push	{r7}
 8001b38:	b083      	sub	sp, #12
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
	return -1;
 8001b3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr

08001b4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	b083      	sub	sp, #12
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
 8001b56:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b5e:	605a      	str	r2, [r3, #4]
	return 0;
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr

08001b6e <_isatty>:

int _isatty(int file)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	b083      	sub	sp, #12
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
	return 1;
 8001b76:	2301      	movs	r3, #1
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	60b9      	str	r1, [r7, #8]
 8001b8e:	607a      	str	r2, [r7, #4]
	return 0;
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3714      	adds	r7, #20
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
	...

08001ba0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ba8:	4a14      	ldr	r2, [pc, #80]	; (8001bfc <_sbrk+0x5c>)
 8001baa:	4b15      	ldr	r3, [pc, #84]	; (8001c00 <_sbrk+0x60>)
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bb4:	4b13      	ldr	r3, [pc, #76]	; (8001c04 <_sbrk+0x64>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d102      	bne.n	8001bc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bbc:	4b11      	ldr	r3, [pc, #68]	; (8001c04 <_sbrk+0x64>)
 8001bbe:	4a12      	ldr	r2, [pc, #72]	; (8001c08 <_sbrk+0x68>)
 8001bc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bc2:	4b10      	ldr	r3, [pc, #64]	; (8001c04 <_sbrk+0x64>)
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4413      	add	r3, r2
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d207      	bcs.n	8001be0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bd0:	f002 fe4c 	bl	800486c <__errno>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	220c      	movs	r2, #12
 8001bd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bda:	f04f 33ff 	mov.w	r3, #4294967295
 8001bde:	e009      	b.n	8001bf4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001be0:	4b08      	ldr	r3, [pc, #32]	; (8001c04 <_sbrk+0x64>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001be6:	4b07      	ldr	r3, [pc, #28]	; (8001c04 <_sbrk+0x64>)
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4413      	add	r3, r2
 8001bee:	4a05      	ldr	r2, [pc, #20]	; (8001c04 <_sbrk+0x64>)
 8001bf0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3718      	adds	r7, #24
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	20020000 	.word	0x20020000
 8001c00:	00000400 	.word	0x00000400
 8001c04:	2000027c 	.word	0x2000027c
 8001c08:	20002eb8 	.word	0x20002eb8

08001c0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c10:	4b06      	ldr	r3, [pc, #24]	; (8001c2c <SystemInit+0x20>)
 8001c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c16:	4a05      	ldr	r2, [pc, #20]	; (8001c2c <SystemInit+0x20>)
 8001c18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c20:	bf00      	nop
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	e000ed00 	.word	0xe000ed00

08001c30 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

//redirect printf to uart1.
PUTCHAR_PROTOTYPE{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 0xffff);
 8001c38:	1d39      	adds	r1, r7, #4
 8001c3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c3e:	2201      	movs	r2, #1
 8001c40:	4803      	ldr	r0, [pc, #12]	; (8001c50 <__io_putchar+0x20>)
 8001c42:	f001 fd75 	bl	8003730 <HAL_UART_Transmit>
	return ch;
 8001c46:	687b      	ldr	r3, [r7, #4]
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3708      	adds	r7, #8
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	20000198 	.word	0x20000198

08001c54 <put_in_rx_buffer>:

void put_in_rx_buffer(char data, USART_TypeDef* USARTx)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	6039      	str	r1, [r7, #0]
 8001c5e:	71fb      	strb	r3, [r7, #7]
	if(USARTx == DBG_UART)
 8001c60:	4b1d      	ldr	r3, [pc, #116]	; (8001cd8 <put_in_rx_buffer+0x84>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	683a      	ldr	r2, [r7, #0]
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d114      	bne.n	8001c94 <put_in_rx_buffer+0x40>
	{
		if(SIO_RBUFLEN_DBG>=LEN_RX_BUFFER_DBG)
 8001c6a:	4b1c      	ldr	r3, [pc, #112]	; (8001cdc <put_in_rx_buffer+0x88>)
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	4b1c      	ldr	r3, [pc, #112]	; (8001ce0 <put_in_rx_buffer+0x8c>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c78:	d226      	bcs.n	8001cc8 <put_in_rx_buffer+0x74>
			{
				return;
			}
		rx_buffer_dbg[wr_pointer_rx_dbg & (LEN_RX_BUFFER_DBG - 1)]=data;
 8001c7a:	4b18      	ldr	r3, [pc, #96]	; (8001cdc <put_in_rx_buffer+0x88>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001c82:	4918      	ldr	r1, [pc, #96]	; (8001ce4 <put_in_rx_buffer+0x90>)
 8001c84:	79fa      	ldrb	r2, [r7, #7]
 8001c86:	54ca      	strb	r2, [r1, r3]
		wr_pointer_rx_dbg++;
 8001c88:	4b14      	ldr	r3, [pc, #80]	; (8001cdc <put_in_rx_buffer+0x88>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	4a13      	ldr	r2, [pc, #76]	; (8001cdc <put_in_rx_buffer+0x88>)
 8001c90:	6013      	str	r3, [r2, #0]
 8001c92:	e01c      	b.n	8001cce <put_in_rx_buffer+0x7a>
	}
	else if(USARTx == RS485_UART)
 8001c94:	4b14      	ldr	r3, [pc, #80]	; (8001ce8 <put_in_rx_buffer+0x94>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	683a      	ldr	r2, [r7, #0]
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d117      	bne.n	8001cce <put_in_rx_buffer+0x7a>
	{
		if(SIO_RBUFLEN_RS485>=LEN_RX_BUFFER_RS485)
 8001c9e:	4b13      	ldr	r3, [pc, #76]	; (8001cec <put_in_rx_buffer+0x98>)
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	4b13      	ldr	r3, [pc, #76]	; (8001cf0 <put_in_rx_buffer+0x9c>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cac:	d20e      	bcs.n	8001ccc <put_in_rx_buffer+0x78>
			{
				return;
			}
		rx_buffer_rs485[wr_pointer_rx_rs485 & (LEN_RX_BUFFER_RS485 - 1)]=data;
 8001cae:	4b0f      	ldr	r3, [pc, #60]	; (8001cec <put_in_rx_buffer+0x98>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cb6:	490f      	ldr	r1, [pc, #60]	; (8001cf4 <put_in_rx_buffer+0xa0>)
 8001cb8:	79fa      	ldrb	r2, [r7, #7]
 8001cba:	54ca      	strb	r2, [r1, r3]
		wr_pointer_rx_rs485++;
 8001cbc:	4b0b      	ldr	r3, [pc, #44]	; (8001cec <put_in_rx_buffer+0x98>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	4a0a      	ldr	r2, [pc, #40]	; (8001cec <put_in_rx_buffer+0x98>)
 8001cc4:	6013      	str	r3, [r2, #0]
 8001cc6:	e002      	b.n	8001cce <put_in_rx_buffer+0x7a>
				return;
 8001cc8:	bf00      	nop
 8001cca:	e000      	b.n	8001cce <put_in_rx_buffer+0x7a>
				return;
 8001ccc:	bf00      	nop
	}
}
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr
 8001cd8:	20000008 	.word	0x20000008
 8001cdc:	20002e9c 	.word	0x20002e9c
 8001ce0:	20002e98 	.word	0x20002e98
 8001ce4:	20000e98 	.word	0x20000e98
 8001ce8:	20000004 	.word	0x20000004
 8001cec:	20000e94 	.word	0x20000e94
 8001cf0:	20000e90 	.word	0x20000e90
 8001cf4:	20000a90 	.word	0x20000a90

08001cf8 <put_in_tx_buffer>:

void put_in_tx_buffer(char data, USART_TypeDef* USARTx)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	4603      	mov	r3, r0
 8001d00:	6039      	str	r1, [r7, #0]
 8001d02:	71fb      	strb	r3, [r7, #7]
	if(USARTx == RS485_UART)
 8001d04:	4b1d      	ldr	r3, [pc, #116]	; (8001d7c <put_in_tx_buffer+0x84>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	683a      	ldr	r2, [r7, #0]
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d114      	bne.n	8001d38 <put_in_tx_buffer+0x40>
	{
		if(SIO_TBUFLEN_RS485>=LEN_TX_BUFFER_RS485)
 8001d0e:	4b1c      	ldr	r3, [pc, #112]	; (8001d80 <put_in_tx_buffer+0x88>)
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	4b1c      	ldr	r3, [pc, #112]	; (8001d84 <put_in_tx_buffer+0x8c>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d1c:	d227      	bcs.n	8001d6e <put_in_tx_buffer+0x76>
			{
				return;
			}
		tx_buffer_rs485[wr_pointer_rs485 & (LEN_TX_BUFFER_RS485 - 1)]=data;
 8001d1e:	4b18      	ldr	r3, [pc, #96]	; (8001d80 <put_in_tx_buffer+0x88>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d26:	4918      	ldr	r1, [pc, #96]	; (8001d88 <put_in_tx_buffer+0x90>)
 8001d28:	79fa      	ldrb	r2, [r7, #7]
 8001d2a:	54ca      	strb	r2, [r1, r3]
		wr_pointer_rs485++;
 8001d2c:	4b14      	ldr	r3, [pc, #80]	; (8001d80 <put_in_tx_buffer+0x88>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	3301      	adds	r3, #1
 8001d32:	4a13      	ldr	r2, [pc, #76]	; (8001d80 <put_in_tx_buffer+0x88>)
 8001d34:	6013      	str	r3, [r2, #0]
 8001d36:	e01b      	b.n	8001d70 <put_in_tx_buffer+0x78>
	}
	else if(USARTx == DBG_UART)
 8001d38:	4b14      	ldr	r3, [pc, #80]	; (8001d8c <put_in_tx_buffer+0x94>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	683a      	ldr	r2, [r7, #0]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d116      	bne.n	8001d70 <put_in_tx_buffer+0x78>
	{
		while(SIO_TBUFLEN_DBG>=LEN_TX_BUFFER_DBG)
 8001d42:	bf00      	nop
 8001d44:	4b12      	ldr	r3, [pc, #72]	; (8001d90 <put_in_tx_buffer+0x98>)
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	4b12      	ldr	r3, [pc, #72]	; (8001d94 <put_in_tx_buffer+0x9c>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d52:	d2f7      	bcs.n	8001d44 <put_in_tx_buffer+0x4c>
			{
				//return;
			}
		tx_buffer_dbg[wr_pointer_dbg & (LEN_TX_BUFFER_DBG - 1)]=data;
 8001d54:	4b0e      	ldr	r3, [pc, #56]	; (8001d90 <put_in_tx_buffer+0x98>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d5c:	490e      	ldr	r1, [pc, #56]	; (8001d98 <put_in_tx_buffer+0xa0>)
 8001d5e:	79fa      	ldrb	r2, [r7, #7]
 8001d60:	54ca      	strb	r2, [r1, r3]
		wr_pointer_dbg++;
 8001d62:	4b0b      	ldr	r3, [pc, #44]	; (8001d90 <put_in_tx_buffer+0x98>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	3301      	adds	r3, #1
 8001d68:	4a09      	ldr	r2, [pc, #36]	; (8001d90 <put_in_tx_buffer+0x98>)
 8001d6a:	6013      	str	r3, [r2, #0]
 8001d6c:	e000      	b.n	8001d70 <put_in_tx_buffer+0x78>
				return;
 8001d6e:	bf00      	nop
	}
}
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	20000004 	.word	0x20000004
 8001d80:	20000684 	.word	0x20000684
 8001d84:	20000680 	.word	0x20000680
 8001d88:	20000280 	.word	0x20000280
 8001d8c:	20000008 	.word	0x20000008
 8001d90:	20000a8c 	.word	0x20000a8c
 8001d94:	20000a88 	.word	0x20000a88
 8001d98:	20000688 	.word	0x20000688

08001d9c <get_from_tx_buffer>:
char get_from_tx_buffer(USART_TypeDef* USARTx)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
	char data;

	if(USARTx == RS485_UART)
 8001da4:	4b14      	ldr	r3, [pc, #80]	; (8001df8 <get_from_tx_buffer+0x5c>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d10c      	bne.n	8001dc8 <get_from_tx_buffer+0x2c>
	{

		data=tx_buffer_rs485[rd_pointer_rs485 & (LEN_TX_BUFFER_RS485-1)];
 8001dae:	4b13      	ldr	r3, [pc, #76]	; (8001dfc <get_from_tx_buffer+0x60>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001db6:	4a12      	ldr	r2, [pc, #72]	; (8001e00 <get_from_tx_buffer+0x64>)
 8001db8:	5cd3      	ldrb	r3, [r2, r3]
 8001dba:	73fb      	strb	r3, [r7, #15]
		rd_pointer_rs485++;
 8001dbc:	4b0f      	ldr	r3, [pc, #60]	; (8001dfc <get_from_tx_buffer+0x60>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	4a0e      	ldr	r2, [pc, #56]	; (8001dfc <get_from_tx_buffer+0x60>)
 8001dc4:	6013      	str	r3, [r2, #0]
 8001dc6:	e010      	b.n	8001dea <get_from_tx_buffer+0x4e>
	}
	else if(USARTx == DBG_UART)
 8001dc8:	4b0e      	ldr	r3, [pc, #56]	; (8001e04 <get_from_tx_buffer+0x68>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d10b      	bne.n	8001dea <get_from_tx_buffer+0x4e>
	{

		data=tx_buffer_dbg[rd_pointer_dbg & (LEN_TX_BUFFER_DBG-1)];
 8001dd2:	4b0d      	ldr	r3, [pc, #52]	; (8001e08 <get_from_tx_buffer+0x6c>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001dda:	4a0c      	ldr	r2, [pc, #48]	; (8001e0c <get_from_tx_buffer+0x70>)
 8001ddc:	5cd3      	ldrb	r3, [r2, r3]
 8001dde:	73fb      	strb	r3, [r7, #15]
		rd_pointer_dbg++;
 8001de0:	4b09      	ldr	r3, [pc, #36]	; (8001e08 <get_from_tx_buffer+0x6c>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	3301      	adds	r3, #1
 8001de6:	4a08      	ldr	r2, [pc, #32]	; (8001e08 <get_from_tx_buffer+0x6c>)
 8001de8:	6013      	str	r3, [r2, #0]
	}
	return data;
 8001dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3714      	adds	r7, #20
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr
 8001df8:	20000004 	.word	0x20000004
 8001dfc:	20000680 	.word	0x20000680
 8001e00:	20000280 	.word	0x20000280
 8001e04:	20000008 	.word	0x20000008
 8001e08:	20000a88 	.word	0x20000a88
 8001e0c:	20000688 	.word	0x20000688

08001e10 <get_from_rx_buffer>:
char get_from_rx_buffer(USART_TypeDef* USARTx)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b085      	sub	sp, #20
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
	char data;

	if(USARTx == RS485_UART)
 8001e18:	4b14      	ldr	r3, [pc, #80]	; (8001e6c <get_from_rx_buffer+0x5c>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d10c      	bne.n	8001e3c <get_from_rx_buffer+0x2c>
	{

		data=rx_buffer_rs485[rd_pointer_rx_rs485 & (LEN_RX_BUFFER_RS485-1)];
 8001e22:	4b13      	ldr	r3, [pc, #76]	; (8001e70 <get_from_rx_buffer+0x60>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e2a:	4a12      	ldr	r2, [pc, #72]	; (8001e74 <get_from_rx_buffer+0x64>)
 8001e2c:	5cd3      	ldrb	r3, [r2, r3]
 8001e2e:	73fb      	strb	r3, [r7, #15]
		rd_pointer_rx_rs485++;
 8001e30:	4b0f      	ldr	r3, [pc, #60]	; (8001e70 <get_from_rx_buffer+0x60>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	3301      	adds	r3, #1
 8001e36:	4a0e      	ldr	r2, [pc, #56]	; (8001e70 <get_from_rx_buffer+0x60>)
 8001e38:	6013      	str	r3, [r2, #0]
 8001e3a:	e010      	b.n	8001e5e <get_from_rx_buffer+0x4e>
	}
	else if(USARTx == DBG_UART)
 8001e3c:	4b0e      	ldr	r3, [pc, #56]	; (8001e78 <get_from_rx_buffer+0x68>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d10b      	bne.n	8001e5e <get_from_rx_buffer+0x4e>
	{

		data=rx_buffer_dbg[rd_pointer_rx_dbg & (LEN_RX_BUFFER_DBG-1)];
 8001e46:	4b0d      	ldr	r3, [pc, #52]	; (8001e7c <get_from_rx_buffer+0x6c>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001e4e:	4a0c      	ldr	r2, [pc, #48]	; (8001e80 <get_from_rx_buffer+0x70>)
 8001e50:	5cd3      	ldrb	r3, [r2, r3]
 8001e52:	73fb      	strb	r3, [r7, #15]
		rd_pointer_rx_dbg++;
 8001e54:	4b09      	ldr	r3, [pc, #36]	; (8001e7c <get_from_rx_buffer+0x6c>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	3301      	adds	r3, #1
 8001e5a:	4a08      	ldr	r2, [pc, #32]	; (8001e7c <get_from_rx_buffer+0x6c>)
 8001e5c:	6013      	str	r3, [r2, #0]
	}
	return data;
 8001e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3714      	adds	r7, #20
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr
 8001e6c:	20000004 	.word	0x20000004
 8001e70:	20000e90 	.word	0x20000e90
 8001e74:	20000a90 	.word	0x20000a90
 8001e78:	20000008 	.word	0x20000008
 8001e7c:	20002e98 	.word	0x20002e98
 8001e80:	20000e98 	.word	0x20000e98

08001e84 <usart_message_ready>:

	return 0;
}
//**************************************************************************************
char usart_message_ready(USART_TypeDef* USARTx, char delimiter)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	70fb      	strb	r3, [r7, #3]
	if (USARTx == DBG_UART)
 8001e90:	4b1f      	ldr	r3, [pc, #124]	; (8001f10 <usart_message_ready+0x8c>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d117      	bne.n	8001eca <usart_message_ready+0x46>
	{
		unsigned long tail = rd_pointer_rx_dbg;
 8001e9a:	4b1e      	ldr	r3, [pc, #120]	; (8001f14 <usart_message_ready+0x90>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	60fb      	str	r3, [r7, #12]

		while ((wr_pointer_rx_dbg - tail) != 0)
 8001ea0:	e00d      	b.n	8001ebe <usart_message_ready+0x3a>
		{
			if (rx_buffer_dbg[tail & (LEN_RX_BUFFER_DBG - 1)] == delimiter)
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001ea8:	4a1b      	ldr	r2, [pc, #108]	; (8001f18 <usart_message_ready+0x94>)
 8001eaa:	5cd3      	ldrb	r3, [r2, r3]
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	78fa      	ldrb	r2, [r7, #3]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d101      	bne.n	8001eb8 <usart_message_ready+0x34>
				return 1;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e025      	b.n	8001f04 <usart_message_ready+0x80>
			++tail;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	3301      	adds	r3, #1
 8001ebc:	60fb      	str	r3, [r7, #12]
		while ((wr_pointer_rx_dbg - tail) != 0)
 8001ebe:	4b17      	ldr	r3, [pc, #92]	; (8001f1c <usart_message_ready+0x98>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	68fa      	ldr	r2, [r7, #12]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d1ec      	bne.n	8001ea2 <usart_message_ready+0x1e>
 8001ec8:	e01b      	b.n	8001f02 <usart_message_ready+0x7e>
		}
	}
	else if (USARTx == RS485_UART)
 8001eca:	4b15      	ldr	r3, [pc, #84]	; (8001f20 <usart_message_ready+0x9c>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d116      	bne.n	8001f02 <usart_message_ready+0x7e>
	{
		unsigned long tail = rd_pointer_rx_rs485;
 8001ed4:	4b13      	ldr	r3, [pc, #76]	; (8001f24 <usart_message_ready+0xa0>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	60bb      	str	r3, [r7, #8]

		while ((wr_pointer_rx_rs485 - tail) != 0)
 8001eda:	e00d      	b.n	8001ef8 <usart_message_ready+0x74>
		{
			if (rx_buffer_rs485[tail & (LEN_RX_BUFFER_RS485 - 1)] == delimiter)
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ee2:	4a11      	ldr	r2, [pc, #68]	; (8001f28 <usart_message_ready+0xa4>)
 8001ee4:	5cd3      	ldrb	r3, [r2, r3]
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	78fa      	ldrb	r2, [r7, #3]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d101      	bne.n	8001ef2 <usart_message_ready+0x6e>
				return 1;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e008      	b.n	8001f04 <usart_message_ready+0x80>
			++tail;
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	60bb      	str	r3, [r7, #8]
		while ((wr_pointer_rx_rs485 - tail) != 0)
 8001ef8:	4b0c      	ldr	r3, [pc, #48]	; (8001f2c <usart_message_ready+0xa8>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	68ba      	ldr	r2, [r7, #8]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d1ec      	bne.n	8001edc <usart_message_ready+0x58>
		}
	}
	return 0;
 8001f02:	2300      	movs	r3, #0
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3714      	adds	r7, #20
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr
 8001f10:	20000008 	.word	0x20000008
 8001f14:	20002e98 	.word	0x20002e98
 8001f18:	20000e98 	.word	0x20000e98
 8001f1c:	20002e9c 	.word	0x20002e9c
 8001f20:	20000004 	.word	0x20000004
 8001f24:	20000e90 	.word	0x20000e90
 8001f28:	20000a90 	.word	0x20000a90
 8001f2c:	20000e94 	.word	0x20000e94

08001f30 <read_usart_message>:
/*
 * Reads message from specified uart rx buffer into @dst until @delimiter character is encountered or @max_len exceeded.
 * Returns: number of characters read if successful, zero when there is no message ready to be read.
 */
unsigned int read_usart_message(char* dst, UART_HandleTypeDef* huart, int max_len, char delimiter)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
 8001f3c:	70fb      	strb	r3, [r7, #3]
	USART_TypeDef* USARTx = huart->Instance;
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	613b      	str	r3, [r7, #16]
	if (usart_message_ready(USARTx,delimiter))
 8001f44:	78fb      	ldrb	r3, [r7, #3]
 8001f46:	4619      	mov	r1, r3
 8001f48:	6938      	ldr	r0, [r7, #16]
 8001f4a:	f7ff ff9b 	bl	8001e84 <usart_message_ready>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d018      	beq.n	8001f86 <read_usart_message+0x56>
	{
		int nr = 0;
 8001f54:	2300      	movs	r3, #0
 8001f56:	617b      	str	r3, [r7, #20]
		do
		{
			*dst = get_from_rx_buffer(USARTx);
 8001f58:	6938      	ldr	r0, [r7, #16]
 8001f5a:	f7ff ff59 	bl	8001e10 <get_from_rx_buffer>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	461a      	mov	r2, r3
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	701a      	strb	r2, [r3, #0]
			++nr;
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	3301      	adds	r3, #1
 8001f6a:	617b      	str	r3, [r7, #20]
		} while (*dst++ != delimiter && nr < max_len);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	1c5a      	adds	r2, r3, #1
 8001f70:	60fa      	str	r2, [r7, #12]
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	78fa      	ldrb	r2, [r7, #3]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d003      	beq.n	8001f82 <read_usart_message+0x52>
 8001f7a:	697a      	ldr	r2, [r7, #20]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	dbea      	blt.n	8001f58 <read_usart_message+0x28>

		return nr;
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	e000      	b.n	8001f88 <read_usart_message+0x58>
	}
	return 0;
 8001f86:	2300      	movs	r3, #0
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3718      	adds	r7, #24
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <send_usart_message>:
/*
 * Sends @size bytes from @src via specified uart. Nonblocking.
 * Returns: 0 when operation fails due to another message being transmitted, number of bytes written to uart buffer otherwise.
 */

unsigned int send_usart_message(char* src, UART_HandleTypeDef* huart, int size){
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b086      	sub	sp, #24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	60b9      	str	r1, [r7, #8]
 8001f9a:	607a      	str	r2, [r7, #4]
	USART_TypeDef* USARTx = huart->Instance;
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	613b      	str	r3, [r7, #16]
	if (USARTx == DBG_UART){
 8001fa2:	4b21      	ldr	r3, [pc, #132]	; (8002028 <send_usart_message+0x98>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	693a      	ldr	r2, [r7, #16]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d107      	bne.n	8001fbc <send_usart_message+0x2c>
		if(wr_pointer_dbg!=rd_pointer_dbg){
 8001fac:	4b1f      	ldr	r3, [pc, #124]	; (800202c <send_usart_message+0x9c>)
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	4b1f      	ldr	r3, [pc, #124]	; (8002030 <send_usart_message+0xa0>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d00e      	beq.n	8001fd6 <send_usart_message+0x46>
			return 0;//another message is in progress.
 8001fb8:	2300      	movs	r3, #0
 8001fba:	e030      	b.n	800201e <send_usart_message+0x8e>
		}

	}
	else if (USARTx == RS485_UART){
 8001fbc:	4b1d      	ldr	r3, [pc, #116]	; (8002034 <send_usart_message+0xa4>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d107      	bne.n	8001fd6 <send_usart_message+0x46>
		if(wr_pointer_rs485!=rd_pointer_rs485){
 8001fc6:	4b1c      	ldr	r3, [pc, #112]	; (8002038 <send_usart_message+0xa8>)
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	4b1c      	ldr	r3, [pc, #112]	; (800203c <send_usart_message+0xac>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d001      	beq.n	8001fd6 <send_usart_message+0x46>
			return 0;//another message is in progress.
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	e023      	b.n	800201e <send_usart_message+0x8e>
		}
	}

	int nr = 0;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	617b      	str	r3, [r7, #20]
	do{
		put_in_tx_buffer(*(src + nr), USARTx);
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	68fa      	ldr	r2, [r7, #12]
 8001fde:	4413      	add	r3, r2
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	6939      	ldr	r1, [r7, #16]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7ff fe87 	bl	8001cf8 <put_in_tx_buffer>
		nr++;
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	3301      	adds	r3, #1
 8001fee:	617b      	str	r3, [r7, #20]
	} while (nr < size);
 8001ff0:	697a      	ldr	r2, [r7, #20]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	dbf0      	blt.n	8001fda <send_usart_message+0x4a>

	if(nr>0){
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	dd0e      	ble.n	800201c <send_usart_message+0x8c>
		USARTx->DR = get_from_tx_buffer(USARTx);
 8001ffe:	6938      	ldr	r0, [r7, #16]
 8002000:	f7ff fecc 	bl	8001d9c <get_from_tx_buffer>
 8002004:	4603      	mov	r3, r0
 8002006:	461a      	mov	r2, r3
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	605a      	str	r2, [r3, #4]
		__HAL_UART_ENABLE_IT(huart, UART_IT_TXE); //turn on tx interrupt forever (until turned off in IRQ handler)
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	68da      	ldr	r2, [r3, #12]
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800201a:	60da      	str	r2, [r3, #12]
	}
	return nr;
 800201c:	697b      	ldr	r3, [r7, #20]
}
 800201e:	4618      	mov	r0, r3
 8002020:	3718      	adds	r7, #24
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	20000008 	.word	0x20000008
 800202c:	20000a8c 	.word	0x20000a8c
 8002030:	20000a88 	.word	0x20000a88
 8002034:	20000004 	.word	0x20000004
 8002038:	20000684 	.word	0x20000684
 800203c:	20000680 	.word	0x20000680

08002040 <uartDemoLoop>:
#include <stm32f4xx_hal.h>
#include <string.h>



void uartDemoLoop(){
 8002040:	b580      	push	{r7, lr}
 8002042:	b0d4      	sub	sp, #336	; 0x150
 8002044:	af00      	add	r7, sp, #0

	static int firstFlag = 0;

	if(firstFlag == 0){
 8002046:	4b29      	ldr	r3, [pc, #164]	; (80020ec <uartDemoLoop+0xac>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d105      	bne.n	800205a <uartDemoLoop+0x1a>
		firstFlag = 1;
 800204e:	4b27      	ldr	r3, [pc, #156]	; (80020ec <uartDemoLoop+0xac>)
 8002050:	2201      	movs	r2, #1
 8002052:	601a      	str	r2, [r3, #0]
		printf("[UART demo] Send a string over debug uart and terminate it by ENTER (ascii 13).\r\n");
 8002054:	4826      	ldr	r0, [pc, #152]	; (80020f0 <uartDemoLoop+0xb0>)
 8002056:	f002 fcc1 	bl	80049dc <puts>
	}

	char delimiter = 13;
 800205a:	230d      	movs	r3, #13
 800205c:	f887 314f 	strb.w	r3, [r7, #335]	; 0x14f
	char msg[64];

	int count = read_usart_message(msg, &huart1, sizeof(msg), delimiter);
 8002060:	f897 314f 	ldrb.w	r3, [r7, #335]	; 0x14f
 8002064:	f507 7082 	add.w	r0, r7, #260	; 0x104
 8002068:	2240      	movs	r2, #64	; 0x40
 800206a:	4922      	ldr	r1, [pc, #136]	; (80020f4 <uartDemoLoop+0xb4>)
 800206c:	f7ff ff60 	bl	8001f30 <read_usart_message>
 8002070:	4603      	mov	r3, r0
 8002072:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148

	if(count == 0){
 8002076:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800207a:	2b00      	cmp	r3, #0
 800207c:	d103      	bne.n	8002086 <uartDemoLoop+0x46>
		//While reading buffer of received chars, delimiter char was not encountered.
		printf("[UART demo] message not yet ready.\r\n");
 800207e:	481e      	ldr	r0, [pc, #120]	; (80020f8 <uartDemoLoop+0xb8>)
 8002080:	f002 fcac 	bl	80049dc <puts>
 8002084:	e02e      	b.n	80020e4 <uartDemoLoop+0xa4>
		return;
	}

	printf("[UART demo] message ready!\r\n");
 8002086:	481d      	ldr	r0, [pc, #116]	; (80020fc <uartDemoLoop+0xbc>)
 8002088:	f002 fca8 	bl	80049dc <puts>

	msg[count-1] = 0; //null terminate received string
 800208c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8002090:	3b01      	subs	r3, #1
 8002092:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002096:	443b      	add	r3, r7
 8002098:	2200      	movs	r2, #0
 800209a:	f803 2c4c 	strb.w	r2, [r3, #-76]

	char reply[256];

	sprintf(reply, " Sending this as a buffer instead of printf just for demonstration. \n\r The message I got was \"%s\". \n\r", msg);
 800209e:	f507 7282 	add.w	r2, r7, #260	; 0x104
 80020a2:	1d3b      	adds	r3, r7, #4
 80020a4:	4916      	ldr	r1, [pc, #88]	; (8002100 <uartDemoLoop+0xc0>)
 80020a6:	4618      	mov	r0, r3
 80020a8:	f002 fca0 	bl	80049ec <siprintf>

	int ret = send_usart_message(reply, &huart1, strlen(reply));
 80020ac:	1d3b      	adds	r3, r7, #4
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7fe f88e 	bl	80001d0 <strlen>
 80020b4:	4603      	mov	r3, r0
 80020b6:	461a      	mov	r2, r3
 80020b8:	1d3b      	adds	r3, r7, #4
 80020ba:	490e      	ldr	r1, [pc, #56]	; (80020f4 <uartDemoLoop+0xb4>)
 80020bc:	4618      	mov	r0, r3
 80020be:	f7ff ff67 	bl	8001f90 <send_usart_message>
 80020c2:	4603      	mov	r3, r0
 80020c4:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144

	if(ret == 0){
 80020c8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d102      	bne.n	80020d6 <uartDemoLoop+0x96>
		printf("[UART demo] Fail: Cannot transmit now, another transmission in progress.\n\r");
 80020d0:	480c      	ldr	r0, [pc, #48]	; (8002104 <uartDemoLoop+0xc4>)
 80020d2:	f002 fbfd 	bl	80048d0 <iprintf>
	}

	HAL_Delay(500); //sleep for a bit so that next printf does not interfere with send_uart_message();
 80020d6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80020da:	f000 f8b3 	bl	8002244 <HAL_Delay>

	printf("[UART demo] Success.\n\r");
 80020de:	480a      	ldr	r0, [pc, #40]	; (8002108 <uartDemoLoop+0xc8>)
 80020e0:	f002 fbf6 	bl	80048d0 <iprintf>

}
 80020e4:	f507 77a8 	add.w	r7, r7, #336	; 0x150
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	20002ea0 	.word	0x20002ea0
 80020f0:	08005d80 	.word	0x08005d80
 80020f4:	20000198 	.word	0x20000198
 80020f8:	08005dd4 	.word	0x08005dd4
 80020fc:	08005df8 	.word	0x08005df8
 8002100:	08005e14 	.word	0x08005e14
 8002104:	08005e7c 	.word	0x08005e7c
 8002108:	08005ec8 	.word	0x08005ec8

0800210c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800210c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002144 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002110:	480d      	ldr	r0, [pc, #52]	; (8002148 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002112:	490e      	ldr	r1, [pc, #56]	; (800214c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002114:	4a0e      	ldr	r2, [pc, #56]	; (8002150 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002116:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002118:	e002      	b.n	8002120 <LoopCopyDataInit>

0800211a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800211a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800211c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800211e:	3304      	adds	r3, #4

08002120 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002120:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002122:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002124:	d3f9      	bcc.n	800211a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002126:	4a0b      	ldr	r2, [pc, #44]	; (8002154 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002128:	4c0b      	ldr	r4, [pc, #44]	; (8002158 <LoopFillZerobss+0x26>)
  movs r3, #0
 800212a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800212c:	e001      	b.n	8002132 <LoopFillZerobss>

0800212e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800212e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002130:	3204      	adds	r2, #4

08002132 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002132:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002134:	d3fb      	bcc.n	800212e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002136:	f7ff fd69 	bl	8001c0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800213a:	f002 fb9d 	bl	8004878 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800213e:	f7fe fef9 	bl	8000f34 <main>
  bx  lr    
 8002142:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002144:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002148:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800214c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002150:	08005fa0 	.word	0x08005fa0
  ldr r2, =_sbss
 8002154:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002158:	20002eb8 	.word	0x20002eb8

0800215c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800215c:	e7fe      	b.n	800215c <ADC_IRQHandler>
	...

08002160 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002164:	4b0e      	ldr	r3, [pc, #56]	; (80021a0 <HAL_Init+0x40>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a0d      	ldr	r2, [pc, #52]	; (80021a0 <HAL_Init+0x40>)
 800216a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800216e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002170:	4b0b      	ldr	r3, [pc, #44]	; (80021a0 <HAL_Init+0x40>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a0a      	ldr	r2, [pc, #40]	; (80021a0 <HAL_Init+0x40>)
 8002176:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800217a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800217c:	4b08      	ldr	r3, [pc, #32]	; (80021a0 <HAL_Init+0x40>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a07      	ldr	r2, [pc, #28]	; (80021a0 <HAL_Init+0x40>)
 8002182:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002186:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002188:	2003      	movs	r0, #3
 800218a:	f000 f94f 	bl	800242c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800218e:	2000      	movs	r0, #0
 8002190:	f000 f808 	bl	80021a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002194:	f7ff f9de 	bl	8001554 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	40023c00 	.word	0x40023c00

080021a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021ac:	4b12      	ldr	r3, [pc, #72]	; (80021f8 <HAL_InitTick+0x54>)
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	4b12      	ldr	r3, [pc, #72]	; (80021fc <HAL_InitTick+0x58>)
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	4619      	mov	r1, r3
 80021b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80021be:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c2:	4618      	mov	r0, r3
 80021c4:	f000 f967 	bl	8002496 <HAL_SYSTICK_Config>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e00e      	b.n	80021f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2b0f      	cmp	r3, #15
 80021d6:	d80a      	bhi.n	80021ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021d8:	2200      	movs	r2, #0
 80021da:	6879      	ldr	r1, [r7, #4]
 80021dc:	f04f 30ff 	mov.w	r0, #4294967295
 80021e0:	f000 f92f 	bl	8002442 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021e4:	4a06      	ldr	r2, [pc, #24]	; (8002200 <HAL_InitTick+0x5c>)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021ea:	2300      	movs	r3, #0
 80021ec:	e000      	b.n	80021f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3708      	adds	r7, #8
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	20000000 	.word	0x20000000
 80021fc:	20000010 	.word	0x20000010
 8002200:	2000000c 	.word	0x2000000c

08002204 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002208:	4b06      	ldr	r3, [pc, #24]	; (8002224 <HAL_IncTick+0x20>)
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	461a      	mov	r2, r3
 800220e:	4b06      	ldr	r3, [pc, #24]	; (8002228 <HAL_IncTick+0x24>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4413      	add	r3, r2
 8002214:	4a04      	ldr	r2, [pc, #16]	; (8002228 <HAL_IncTick+0x24>)
 8002216:	6013      	str	r3, [r2, #0]
}
 8002218:	bf00      	nop
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	20000010 	.word	0x20000010
 8002228:	20002ea4 	.word	0x20002ea4

0800222c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  return uwTick;
 8002230:	4b03      	ldr	r3, [pc, #12]	; (8002240 <HAL_GetTick+0x14>)
 8002232:	681b      	ldr	r3, [r3, #0]
}
 8002234:	4618      	mov	r0, r3
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	20002ea4 	.word	0x20002ea4

08002244 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800224c:	f7ff ffee 	bl	800222c <HAL_GetTick>
 8002250:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800225c:	d005      	beq.n	800226a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800225e:	4b0a      	ldr	r3, [pc, #40]	; (8002288 <HAL_Delay+0x44>)
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	461a      	mov	r2, r3
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	4413      	add	r3, r2
 8002268:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800226a:	bf00      	nop
 800226c:	f7ff ffde 	bl	800222c <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	68fa      	ldr	r2, [r7, #12]
 8002278:	429a      	cmp	r2, r3
 800227a:	d8f7      	bhi.n	800226c <HAL_Delay+0x28>
  {
  }
}
 800227c:	bf00      	nop
 800227e:	bf00      	nop
 8002280:	3710      	adds	r7, #16
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	20000010 	.word	0x20000010

0800228c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800228c:	b480      	push	{r7}
 800228e:	b085      	sub	sp, #20
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f003 0307 	and.w	r3, r3, #7
 800229a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800229c:	4b0c      	ldr	r3, [pc, #48]	; (80022d0 <__NVIC_SetPriorityGrouping+0x44>)
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022a2:	68ba      	ldr	r2, [r7, #8]
 80022a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022a8:	4013      	ands	r3, r2
 80022aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022be:	4a04      	ldr	r2, [pc, #16]	; (80022d0 <__NVIC_SetPriorityGrouping+0x44>)
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	60d3      	str	r3, [r2, #12]
}
 80022c4:	bf00      	nop
 80022c6:	3714      	adds	r7, #20
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr
 80022d0:	e000ed00 	.word	0xe000ed00

080022d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022d8:	4b04      	ldr	r3, [pc, #16]	; (80022ec <__NVIC_GetPriorityGrouping+0x18>)
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	0a1b      	lsrs	r3, r3, #8
 80022de:	f003 0307 	and.w	r3, r3, #7
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr
 80022ec:	e000ed00 	.word	0xe000ed00

080022f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	4603      	mov	r3, r0
 80022f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	db0b      	blt.n	800231a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002302:	79fb      	ldrb	r3, [r7, #7]
 8002304:	f003 021f 	and.w	r2, r3, #31
 8002308:	4907      	ldr	r1, [pc, #28]	; (8002328 <__NVIC_EnableIRQ+0x38>)
 800230a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230e:	095b      	lsrs	r3, r3, #5
 8002310:	2001      	movs	r0, #1
 8002312:	fa00 f202 	lsl.w	r2, r0, r2
 8002316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800231a:	bf00      	nop
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	e000e100 	.word	0xe000e100

0800232c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	4603      	mov	r3, r0
 8002334:	6039      	str	r1, [r7, #0]
 8002336:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002338:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233c:	2b00      	cmp	r3, #0
 800233e:	db0a      	blt.n	8002356 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	b2da      	uxtb	r2, r3
 8002344:	490c      	ldr	r1, [pc, #48]	; (8002378 <__NVIC_SetPriority+0x4c>)
 8002346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234a:	0112      	lsls	r2, r2, #4
 800234c:	b2d2      	uxtb	r2, r2
 800234e:	440b      	add	r3, r1
 8002350:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002354:	e00a      	b.n	800236c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	b2da      	uxtb	r2, r3
 800235a:	4908      	ldr	r1, [pc, #32]	; (800237c <__NVIC_SetPriority+0x50>)
 800235c:	79fb      	ldrb	r3, [r7, #7]
 800235e:	f003 030f 	and.w	r3, r3, #15
 8002362:	3b04      	subs	r3, #4
 8002364:	0112      	lsls	r2, r2, #4
 8002366:	b2d2      	uxtb	r2, r2
 8002368:	440b      	add	r3, r1
 800236a:	761a      	strb	r2, [r3, #24]
}
 800236c:	bf00      	nop
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr
 8002378:	e000e100 	.word	0xe000e100
 800237c:	e000ed00 	.word	0xe000ed00

08002380 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002380:	b480      	push	{r7}
 8002382:	b089      	sub	sp, #36	; 0x24
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	f1c3 0307 	rsb	r3, r3, #7
 800239a:	2b04      	cmp	r3, #4
 800239c:	bf28      	it	cs
 800239e:	2304      	movcs	r3, #4
 80023a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	3304      	adds	r3, #4
 80023a6:	2b06      	cmp	r3, #6
 80023a8:	d902      	bls.n	80023b0 <NVIC_EncodePriority+0x30>
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	3b03      	subs	r3, #3
 80023ae:	e000      	b.n	80023b2 <NVIC_EncodePriority+0x32>
 80023b0:	2300      	movs	r3, #0
 80023b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023b4:	f04f 32ff 	mov.w	r2, #4294967295
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	fa02 f303 	lsl.w	r3, r2, r3
 80023be:	43da      	mvns	r2, r3
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	401a      	ands	r2, r3
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023c8:	f04f 31ff 	mov.w	r1, #4294967295
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	fa01 f303 	lsl.w	r3, r1, r3
 80023d2:	43d9      	mvns	r1, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d8:	4313      	orrs	r3, r2
         );
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3724      	adds	r7, #36	; 0x24
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
	...

080023e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	3b01      	subs	r3, #1
 80023f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023f8:	d301      	bcc.n	80023fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023fa:	2301      	movs	r3, #1
 80023fc:	e00f      	b.n	800241e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023fe:	4a0a      	ldr	r2, [pc, #40]	; (8002428 <SysTick_Config+0x40>)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	3b01      	subs	r3, #1
 8002404:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002406:	210f      	movs	r1, #15
 8002408:	f04f 30ff 	mov.w	r0, #4294967295
 800240c:	f7ff ff8e 	bl	800232c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002410:	4b05      	ldr	r3, [pc, #20]	; (8002428 <SysTick_Config+0x40>)
 8002412:	2200      	movs	r2, #0
 8002414:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002416:	4b04      	ldr	r3, [pc, #16]	; (8002428 <SysTick_Config+0x40>)
 8002418:	2207      	movs	r2, #7
 800241a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	e000e010 	.word	0xe000e010

0800242c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f7ff ff29 	bl	800228c <__NVIC_SetPriorityGrouping>
}
 800243a:	bf00      	nop
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002442:	b580      	push	{r7, lr}
 8002444:	b086      	sub	sp, #24
 8002446:	af00      	add	r7, sp, #0
 8002448:	4603      	mov	r3, r0
 800244a:	60b9      	str	r1, [r7, #8]
 800244c:	607a      	str	r2, [r7, #4]
 800244e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002450:	2300      	movs	r3, #0
 8002452:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002454:	f7ff ff3e 	bl	80022d4 <__NVIC_GetPriorityGrouping>
 8002458:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	68b9      	ldr	r1, [r7, #8]
 800245e:	6978      	ldr	r0, [r7, #20]
 8002460:	f7ff ff8e 	bl	8002380 <NVIC_EncodePriority>
 8002464:	4602      	mov	r2, r0
 8002466:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800246a:	4611      	mov	r1, r2
 800246c:	4618      	mov	r0, r3
 800246e:	f7ff ff5d 	bl	800232c <__NVIC_SetPriority>
}
 8002472:	bf00      	nop
 8002474:	3718      	adds	r7, #24
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800247a:	b580      	push	{r7, lr}
 800247c:	b082      	sub	sp, #8
 800247e:	af00      	add	r7, sp, #0
 8002480:	4603      	mov	r3, r0
 8002482:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002484:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002488:	4618      	mov	r0, r3
 800248a:	f7ff ff31 	bl	80022f0 <__NVIC_EnableIRQ>
}
 800248e:	bf00      	nop
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}

08002496 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002496:	b580      	push	{r7, lr}
 8002498:	b082      	sub	sp, #8
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f7ff ffa2 	bl	80023e8 <SysTick_Config>
 80024a4:	4603      	mov	r3, r0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}

080024ae <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024ae:	b580      	push	{r7, lr}
 80024b0:	b084      	sub	sp, #16
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ba:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80024bc:	f7ff feb6 	bl	800222c <HAL_GetTick>
 80024c0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d008      	beq.n	80024e0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2280      	movs	r2, #128	; 0x80
 80024d2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e052      	b.n	8002586 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f022 0216 	bic.w	r2, r2, #22
 80024ee:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	695a      	ldr	r2, [r3, #20]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024fe:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002504:	2b00      	cmp	r3, #0
 8002506:	d103      	bne.n	8002510 <HAL_DMA_Abort+0x62>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800250c:	2b00      	cmp	r3, #0
 800250e:	d007      	beq.n	8002520 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f022 0208 	bic.w	r2, r2, #8
 800251e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f022 0201 	bic.w	r2, r2, #1
 800252e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002530:	e013      	b.n	800255a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002532:	f7ff fe7b 	bl	800222c <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	2b05      	cmp	r3, #5
 800253e:	d90c      	bls.n	800255a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2220      	movs	r2, #32
 8002544:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2203      	movs	r2, #3
 800254a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e015      	b.n	8002586 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0301 	and.w	r3, r3, #1
 8002564:	2b00      	cmp	r3, #0
 8002566:	d1e4      	bne.n	8002532 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800256c:	223f      	movs	r2, #63	; 0x3f
 800256e:	409a      	lsls	r2, r3
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3710      	adds	r7, #16
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}

0800258e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800258e:	b480      	push	{r7}
 8002590:	b083      	sub	sp, #12
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d004      	beq.n	80025ac <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2280      	movs	r2, #128	; 0x80
 80025a6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e00c      	b.n	80025c6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2205      	movs	r2, #5
 80025b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f022 0201 	bic.w	r2, r2, #1
 80025c2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
	...

080025d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b089      	sub	sp, #36	; 0x24
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025de:	2300      	movs	r3, #0
 80025e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025e2:	2300      	movs	r3, #0
 80025e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025e6:	2300      	movs	r3, #0
 80025e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025ea:	2300      	movs	r3, #0
 80025ec:	61fb      	str	r3, [r7, #28]
 80025ee:	e16b      	b.n	80028c8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025f0:	2201      	movs	r2, #1
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	697a      	ldr	r2, [r7, #20]
 8002600:	4013      	ands	r3, r2
 8002602:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002604:	693a      	ldr	r2, [r7, #16]
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	429a      	cmp	r2, r3
 800260a:	f040 815a 	bne.w	80028c2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f003 0303 	and.w	r3, r3, #3
 8002616:	2b01      	cmp	r3, #1
 8002618:	d005      	beq.n	8002626 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002622:	2b02      	cmp	r3, #2
 8002624:	d130      	bne.n	8002688 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	2203      	movs	r2, #3
 8002632:	fa02 f303 	lsl.w	r3, r2, r3
 8002636:	43db      	mvns	r3, r3
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	4013      	ands	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	68da      	ldr	r2, [r3, #12]
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	005b      	lsls	r3, r3, #1
 8002646:	fa02 f303 	lsl.w	r3, r2, r3
 800264a:	69ba      	ldr	r2, [r7, #24]
 800264c:	4313      	orrs	r3, r2
 800264e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	69ba      	ldr	r2, [r7, #24]
 8002654:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800265c:	2201      	movs	r2, #1
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	fa02 f303 	lsl.w	r3, r2, r3
 8002664:	43db      	mvns	r3, r3
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	4013      	ands	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	091b      	lsrs	r3, r3, #4
 8002672:	f003 0201 	and.w	r2, r3, #1
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	fa02 f303 	lsl.w	r3, r2, r3
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	4313      	orrs	r3, r2
 8002680:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f003 0303 	and.w	r3, r3, #3
 8002690:	2b03      	cmp	r3, #3
 8002692:	d017      	beq.n	80026c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	2203      	movs	r2, #3
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	43db      	mvns	r3, r3
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	4013      	ands	r3, r2
 80026aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	689a      	ldr	r2, [r3, #8]
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	005b      	lsls	r3, r3, #1
 80026b4:	fa02 f303 	lsl.w	r3, r2, r3
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f003 0303 	and.w	r3, r3, #3
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d123      	bne.n	8002718 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	08da      	lsrs	r2, r3, #3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	3208      	adds	r2, #8
 80026d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	f003 0307 	and.w	r3, r3, #7
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	220f      	movs	r2, #15
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	43db      	mvns	r3, r3
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	4013      	ands	r3, r2
 80026f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	691a      	ldr	r2, [r3, #16]
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	f003 0307 	and.w	r3, r3, #7
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	fa02 f303 	lsl.w	r3, r2, r3
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	4313      	orrs	r3, r2
 8002708:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	08da      	lsrs	r2, r3, #3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	3208      	adds	r2, #8
 8002712:	69b9      	ldr	r1, [r7, #24]
 8002714:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	2203      	movs	r2, #3
 8002724:	fa02 f303 	lsl.w	r3, r2, r3
 8002728:	43db      	mvns	r3, r3
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	4013      	ands	r3, r2
 800272e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f003 0203 	and.w	r2, r3, #3
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	005b      	lsls	r3, r3, #1
 800273c:	fa02 f303 	lsl.w	r3, r2, r3
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	4313      	orrs	r3, r2
 8002744:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002754:	2b00      	cmp	r3, #0
 8002756:	f000 80b4 	beq.w	80028c2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800275a:	2300      	movs	r3, #0
 800275c:	60fb      	str	r3, [r7, #12]
 800275e:	4b60      	ldr	r3, [pc, #384]	; (80028e0 <HAL_GPIO_Init+0x30c>)
 8002760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002762:	4a5f      	ldr	r2, [pc, #380]	; (80028e0 <HAL_GPIO_Init+0x30c>)
 8002764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002768:	6453      	str	r3, [r2, #68]	; 0x44
 800276a:	4b5d      	ldr	r3, [pc, #372]	; (80028e0 <HAL_GPIO_Init+0x30c>)
 800276c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002772:	60fb      	str	r3, [r7, #12]
 8002774:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002776:	4a5b      	ldr	r2, [pc, #364]	; (80028e4 <HAL_GPIO_Init+0x310>)
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	089b      	lsrs	r3, r3, #2
 800277c:	3302      	adds	r3, #2
 800277e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002782:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	f003 0303 	and.w	r3, r3, #3
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	220f      	movs	r2, #15
 800278e:	fa02 f303 	lsl.w	r3, r2, r3
 8002792:	43db      	mvns	r3, r3
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	4013      	ands	r3, r2
 8002798:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a52      	ldr	r2, [pc, #328]	; (80028e8 <HAL_GPIO_Init+0x314>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d02b      	beq.n	80027fa <HAL_GPIO_Init+0x226>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a51      	ldr	r2, [pc, #324]	; (80028ec <HAL_GPIO_Init+0x318>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d025      	beq.n	80027f6 <HAL_GPIO_Init+0x222>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a50      	ldr	r2, [pc, #320]	; (80028f0 <HAL_GPIO_Init+0x31c>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d01f      	beq.n	80027f2 <HAL_GPIO_Init+0x21e>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a4f      	ldr	r2, [pc, #316]	; (80028f4 <HAL_GPIO_Init+0x320>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d019      	beq.n	80027ee <HAL_GPIO_Init+0x21a>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a4e      	ldr	r2, [pc, #312]	; (80028f8 <HAL_GPIO_Init+0x324>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d013      	beq.n	80027ea <HAL_GPIO_Init+0x216>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a4d      	ldr	r2, [pc, #308]	; (80028fc <HAL_GPIO_Init+0x328>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d00d      	beq.n	80027e6 <HAL_GPIO_Init+0x212>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a4c      	ldr	r2, [pc, #304]	; (8002900 <HAL_GPIO_Init+0x32c>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d007      	beq.n	80027e2 <HAL_GPIO_Init+0x20e>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a4b      	ldr	r2, [pc, #300]	; (8002904 <HAL_GPIO_Init+0x330>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d101      	bne.n	80027de <HAL_GPIO_Init+0x20a>
 80027da:	2307      	movs	r3, #7
 80027dc:	e00e      	b.n	80027fc <HAL_GPIO_Init+0x228>
 80027de:	2308      	movs	r3, #8
 80027e0:	e00c      	b.n	80027fc <HAL_GPIO_Init+0x228>
 80027e2:	2306      	movs	r3, #6
 80027e4:	e00a      	b.n	80027fc <HAL_GPIO_Init+0x228>
 80027e6:	2305      	movs	r3, #5
 80027e8:	e008      	b.n	80027fc <HAL_GPIO_Init+0x228>
 80027ea:	2304      	movs	r3, #4
 80027ec:	e006      	b.n	80027fc <HAL_GPIO_Init+0x228>
 80027ee:	2303      	movs	r3, #3
 80027f0:	e004      	b.n	80027fc <HAL_GPIO_Init+0x228>
 80027f2:	2302      	movs	r3, #2
 80027f4:	e002      	b.n	80027fc <HAL_GPIO_Init+0x228>
 80027f6:	2301      	movs	r3, #1
 80027f8:	e000      	b.n	80027fc <HAL_GPIO_Init+0x228>
 80027fa:	2300      	movs	r3, #0
 80027fc:	69fa      	ldr	r2, [r7, #28]
 80027fe:	f002 0203 	and.w	r2, r2, #3
 8002802:	0092      	lsls	r2, r2, #2
 8002804:	4093      	lsls	r3, r2
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	4313      	orrs	r3, r2
 800280a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800280c:	4935      	ldr	r1, [pc, #212]	; (80028e4 <HAL_GPIO_Init+0x310>)
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	089b      	lsrs	r3, r3, #2
 8002812:	3302      	adds	r3, #2
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800281a:	4b3b      	ldr	r3, [pc, #236]	; (8002908 <HAL_GPIO_Init+0x334>)
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	43db      	mvns	r3, r3
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	4013      	ands	r3, r2
 8002828:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d003      	beq.n	800283e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	4313      	orrs	r3, r2
 800283c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800283e:	4a32      	ldr	r2, [pc, #200]	; (8002908 <HAL_GPIO_Init+0x334>)
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002844:	4b30      	ldr	r3, [pc, #192]	; (8002908 <HAL_GPIO_Init+0x334>)
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	43db      	mvns	r3, r3
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	4013      	ands	r3, r2
 8002852:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d003      	beq.n	8002868 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	4313      	orrs	r3, r2
 8002866:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002868:	4a27      	ldr	r2, [pc, #156]	; (8002908 <HAL_GPIO_Init+0x334>)
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800286e:	4b26      	ldr	r3, [pc, #152]	; (8002908 <HAL_GPIO_Init+0x334>)
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	43db      	mvns	r3, r3
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	4013      	ands	r3, r2
 800287c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d003      	beq.n	8002892 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800288a:	69ba      	ldr	r2, [r7, #24]
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	4313      	orrs	r3, r2
 8002890:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002892:	4a1d      	ldr	r2, [pc, #116]	; (8002908 <HAL_GPIO_Init+0x334>)
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002898:	4b1b      	ldr	r3, [pc, #108]	; (8002908 <HAL_GPIO_Init+0x334>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	43db      	mvns	r3, r3
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	4013      	ands	r3, r2
 80028a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d003      	beq.n	80028bc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028bc:	4a12      	ldr	r2, [pc, #72]	; (8002908 <HAL_GPIO_Init+0x334>)
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	3301      	adds	r3, #1
 80028c6:	61fb      	str	r3, [r7, #28]
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	2b0f      	cmp	r3, #15
 80028cc:	f67f ae90 	bls.w	80025f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028d0:	bf00      	nop
 80028d2:	bf00      	nop
 80028d4:	3724      	adds	r7, #36	; 0x24
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	40023800 	.word	0x40023800
 80028e4:	40013800 	.word	0x40013800
 80028e8:	40020000 	.word	0x40020000
 80028ec:	40020400 	.word	0x40020400
 80028f0:	40020800 	.word	0x40020800
 80028f4:	40020c00 	.word	0x40020c00
 80028f8:	40021000 	.word	0x40021000
 80028fc:	40021400 	.word	0x40021400
 8002900:	40021800 	.word	0x40021800
 8002904:	40021c00 	.word	0x40021c00
 8002908:	40013c00 	.word	0x40013c00

0800290c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	460b      	mov	r3, r1
 8002916:	807b      	strh	r3, [r7, #2]
 8002918:	4613      	mov	r3, r2
 800291a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800291c:	787b      	ldrb	r3, [r7, #1]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d003      	beq.n	800292a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002922:	887a      	ldrh	r2, [r7, #2]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002928:	e003      	b.n	8002932 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800292a:	887b      	ldrh	r3, [r7, #2]
 800292c:	041a      	lsls	r2, r3, #16
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	619a      	str	r2, [r3, #24]
}
 8002932:	bf00      	nop
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
	...

08002940 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d101      	bne.n	8002952 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e12b      	b.n	8002baa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002958:	b2db      	uxtb	r3, r3
 800295a:	2b00      	cmp	r3, #0
 800295c:	d106      	bne.n	800296c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f7fe fe1c 	bl	80015a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2224      	movs	r2, #36	; 0x24
 8002970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f022 0201 	bic.w	r2, r2, #1
 8002982:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002992:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80029a4:	f000 fd7e 	bl	80034a4 <HAL_RCC_GetPCLK1Freq>
 80029a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	4a81      	ldr	r2, [pc, #516]	; (8002bb4 <HAL_I2C_Init+0x274>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d807      	bhi.n	80029c4 <HAL_I2C_Init+0x84>
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	4a80      	ldr	r2, [pc, #512]	; (8002bb8 <HAL_I2C_Init+0x278>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	bf94      	ite	ls
 80029bc:	2301      	movls	r3, #1
 80029be:	2300      	movhi	r3, #0
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	e006      	b.n	80029d2 <HAL_I2C_Init+0x92>
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	4a7d      	ldr	r2, [pc, #500]	; (8002bbc <HAL_I2C_Init+0x27c>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	bf94      	ite	ls
 80029cc:	2301      	movls	r3, #1
 80029ce:	2300      	movhi	r3, #0
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e0e7      	b.n	8002baa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	4a78      	ldr	r2, [pc, #480]	; (8002bc0 <HAL_I2C_Init+0x280>)
 80029de:	fba2 2303 	umull	r2, r3, r2, r3
 80029e2:	0c9b      	lsrs	r3, r3, #18
 80029e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	68ba      	ldr	r2, [r7, #8]
 80029f6:	430a      	orrs	r2, r1
 80029f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	6a1b      	ldr	r3, [r3, #32]
 8002a00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	4a6a      	ldr	r2, [pc, #424]	; (8002bb4 <HAL_I2C_Init+0x274>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d802      	bhi.n	8002a14 <HAL_I2C_Init+0xd4>
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	3301      	adds	r3, #1
 8002a12:	e009      	b.n	8002a28 <HAL_I2C_Init+0xe8>
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002a1a:	fb02 f303 	mul.w	r3, r2, r3
 8002a1e:	4a69      	ldr	r2, [pc, #420]	; (8002bc4 <HAL_I2C_Init+0x284>)
 8002a20:	fba2 2303 	umull	r2, r3, r2, r3
 8002a24:	099b      	lsrs	r3, r3, #6
 8002a26:	3301      	adds	r3, #1
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	6812      	ldr	r2, [r2, #0]
 8002a2c:	430b      	orrs	r3, r1
 8002a2e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	69db      	ldr	r3, [r3, #28]
 8002a36:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002a3a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	495c      	ldr	r1, [pc, #368]	; (8002bb4 <HAL_I2C_Init+0x274>)
 8002a44:	428b      	cmp	r3, r1
 8002a46:	d819      	bhi.n	8002a7c <HAL_I2C_Init+0x13c>
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	1e59      	subs	r1, r3, #1
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	005b      	lsls	r3, r3, #1
 8002a52:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a56:	1c59      	adds	r1, r3, #1
 8002a58:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002a5c:	400b      	ands	r3, r1
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d00a      	beq.n	8002a78 <HAL_I2C_Init+0x138>
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	1e59      	subs	r1, r3, #1
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	005b      	lsls	r3, r3, #1
 8002a6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a70:	3301      	adds	r3, #1
 8002a72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a76:	e051      	b.n	8002b1c <HAL_I2C_Init+0x1dc>
 8002a78:	2304      	movs	r3, #4
 8002a7a:	e04f      	b.n	8002b1c <HAL_I2C_Init+0x1dc>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d111      	bne.n	8002aa8 <HAL_I2C_Init+0x168>
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	1e58      	subs	r0, r3, #1
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6859      	ldr	r1, [r3, #4]
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	005b      	lsls	r3, r3, #1
 8002a90:	440b      	add	r3, r1
 8002a92:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a96:	3301      	adds	r3, #1
 8002a98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	bf0c      	ite	eq
 8002aa0:	2301      	moveq	r3, #1
 8002aa2:	2300      	movne	r3, #0
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	e012      	b.n	8002ace <HAL_I2C_Init+0x18e>
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	1e58      	subs	r0, r3, #1
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6859      	ldr	r1, [r3, #4]
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	440b      	add	r3, r1
 8002ab6:	0099      	lsls	r1, r3, #2
 8002ab8:	440b      	add	r3, r1
 8002aba:	fbb0 f3f3 	udiv	r3, r0, r3
 8002abe:	3301      	adds	r3, #1
 8002ac0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	bf0c      	ite	eq
 8002ac8:	2301      	moveq	r3, #1
 8002aca:	2300      	movne	r3, #0
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <HAL_I2C_Init+0x196>
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e022      	b.n	8002b1c <HAL_I2C_Init+0x1dc>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d10e      	bne.n	8002afc <HAL_I2C_Init+0x1bc>
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	1e58      	subs	r0, r3, #1
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6859      	ldr	r1, [r3, #4]
 8002ae6:	460b      	mov	r3, r1
 8002ae8:	005b      	lsls	r3, r3, #1
 8002aea:	440b      	add	r3, r1
 8002aec:	fbb0 f3f3 	udiv	r3, r0, r3
 8002af0:	3301      	adds	r3, #1
 8002af2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002af6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002afa:	e00f      	b.n	8002b1c <HAL_I2C_Init+0x1dc>
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	1e58      	subs	r0, r3, #1
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6859      	ldr	r1, [r3, #4]
 8002b04:	460b      	mov	r3, r1
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	440b      	add	r3, r1
 8002b0a:	0099      	lsls	r1, r3, #2
 8002b0c:	440b      	add	r3, r1
 8002b0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b12:	3301      	adds	r3, #1
 8002b14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b1c:	6879      	ldr	r1, [r7, #4]
 8002b1e:	6809      	ldr	r1, [r1, #0]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	69da      	ldr	r2, [r3, #28]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a1b      	ldr	r3, [r3, #32]
 8002b36:	431a      	orrs	r2, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	430a      	orrs	r2, r1
 8002b3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002b4a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	6911      	ldr	r1, [r2, #16]
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	68d2      	ldr	r2, [r2, #12]
 8002b56:	4311      	orrs	r1, r2
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	6812      	ldr	r2, [r2, #0]
 8002b5c:	430b      	orrs	r3, r1
 8002b5e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	695a      	ldr	r2, [r3, #20]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	699b      	ldr	r3, [r3, #24]
 8002b72:	431a      	orrs	r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f042 0201 	orr.w	r2, r2, #1
 8002b8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2220      	movs	r2, #32
 8002b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	000186a0 	.word	0x000186a0
 8002bb8:	001e847f 	.word	0x001e847f
 8002bbc:	003d08ff 	.word	0x003d08ff
 8002bc0:	431bde83 	.word	0x431bde83
 8002bc4:	10624dd3 	.word	0x10624dd3

08002bc8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b086      	sub	sp, #24
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d101      	bne.n	8002bda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e267      	b.n	80030aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d075      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002be6:	4b88      	ldr	r3, [pc, #544]	; (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f003 030c 	and.w	r3, r3, #12
 8002bee:	2b04      	cmp	r3, #4
 8002bf0:	d00c      	beq.n	8002c0c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bf2:	4b85      	ldr	r3, [pc, #532]	; (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bfa:	2b08      	cmp	r3, #8
 8002bfc:	d112      	bne.n	8002c24 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bfe:	4b82      	ldr	r3, [pc, #520]	; (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c0a:	d10b      	bne.n	8002c24 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c0c:	4b7e      	ldr	r3, [pc, #504]	; (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d05b      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x108>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d157      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e242      	b.n	80030aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c2c:	d106      	bne.n	8002c3c <HAL_RCC_OscConfig+0x74>
 8002c2e:	4b76      	ldr	r3, [pc, #472]	; (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a75      	ldr	r2, [pc, #468]	; (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002c34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c38:	6013      	str	r3, [r2, #0]
 8002c3a:	e01d      	b.n	8002c78 <HAL_RCC_OscConfig+0xb0>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c44:	d10c      	bne.n	8002c60 <HAL_RCC_OscConfig+0x98>
 8002c46:	4b70      	ldr	r3, [pc, #448]	; (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a6f      	ldr	r2, [pc, #444]	; (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002c4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c50:	6013      	str	r3, [r2, #0]
 8002c52:	4b6d      	ldr	r3, [pc, #436]	; (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a6c      	ldr	r2, [pc, #432]	; (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002c58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c5c:	6013      	str	r3, [r2, #0]
 8002c5e:	e00b      	b.n	8002c78 <HAL_RCC_OscConfig+0xb0>
 8002c60:	4b69      	ldr	r3, [pc, #420]	; (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a68      	ldr	r2, [pc, #416]	; (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002c66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c6a:	6013      	str	r3, [r2, #0]
 8002c6c:	4b66      	ldr	r3, [pc, #408]	; (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a65      	ldr	r2, [pc, #404]	; (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002c72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d013      	beq.n	8002ca8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c80:	f7ff fad4 	bl	800222c <HAL_GetTick>
 8002c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c86:	e008      	b.n	8002c9a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c88:	f7ff fad0 	bl	800222c <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b64      	cmp	r3, #100	; 0x64
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e207      	b.n	80030aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c9a:	4b5b      	ldr	r3, [pc, #364]	; (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d0f0      	beq.n	8002c88 <HAL_RCC_OscConfig+0xc0>
 8002ca6:	e014      	b.n	8002cd2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca8:	f7ff fac0 	bl	800222c <HAL_GetTick>
 8002cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cae:	e008      	b.n	8002cc2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cb0:	f7ff fabc 	bl	800222c <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b64      	cmp	r3, #100	; 0x64
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e1f3      	b.n	80030aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cc2:	4b51      	ldr	r3, [pc, #324]	; (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d1f0      	bne.n	8002cb0 <HAL_RCC_OscConfig+0xe8>
 8002cce:	e000      	b.n	8002cd2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d063      	beq.n	8002da6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cde:	4b4a      	ldr	r3, [pc, #296]	; (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f003 030c 	and.w	r3, r3, #12
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00b      	beq.n	8002d02 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cea:	4b47      	ldr	r3, [pc, #284]	; (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cf2:	2b08      	cmp	r3, #8
 8002cf4:	d11c      	bne.n	8002d30 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cf6:	4b44      	ldr	r3, [pc, #272]	; (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d116      	bne.n	8002d30 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d02:	4b41      	ldr	r3, [pc, #260]	; (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d005      	beq.n	8002d1a <HAL_RCC_OscConfig+0x152>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d001      	beq.n	8002d1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e1c7      	b.n	80030aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d1a:	4b3b      	ldr	r3, [pc, #236]	; (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	00db      	lsls	r3, r3, #3
 8002d28:	4937      	ldr	r1, [pc, #220]	; (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d2e:	e03a      	b.n	8002da6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d020      	beq.n	8002d7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d38:	4b34      	ldr	r3, [pc, #208]	; (8002e0c <HAL_RCC_OscConfig+0x244>)
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d3e:	f7ff fa75 	bl	800222c <HAL_GetTick>
 8002d42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d44:	e008      	b.n	8002d58 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d46:	f7ff fa71 	bl	800222c <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d901      	bls.n	8002d58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	e1a8      	b.n	80030aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d58:	4b2b      	ldr	r3, [pc, #172]	; (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0302 	and.w	r3, r3, #2
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d0f0      	beq.n	8002d46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d64:	4b28      	ldr	r3, [pc, #160]	; (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	00db      	lsls	r3, r3, #3
 8002d72:	4925      	ldr	r1, [pc, #148]	; (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	600b      	str	r3, [r1, #0]
 8002d78:	e015      	b.n	8002da6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d7a:	4b24      	ldr	r3, [pc, #144]	; (8002e0c <HAL_RCC_OscConfig+0x244>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d80:	f7ff fa54 	bl	800222c <HAL_GetTick>
 8002d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d86:	e008      	b.n	8002d9a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d88:	f7ff fa50 	bl	800222c <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e187      	b.n	80030aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d9a:	4b1b      	ldr	r3, [pc, #108]	; (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d1f0      	bne.n	8002d88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0308 	and.w	r3, r3, #8
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d036      	beq.n	8002e20 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	695b      	ldr	r3, [r3, #20]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d016      	beq.n	8002de8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dba:	4b15      	ldr	r3, [pc, #84]	; (8002e10 <HAL_RCC_OscConfig+0x248>)
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dc0:	f7ff fa34 	bl	800222c <HAL_GetTick>
 8002dc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dc6:	e008      	b.n	8002dda <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dc8:	f7ff fa30 	bl	800222c <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e167      	b.n	80030aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dda:	4b0b      	ldr	r3, [pc, #44]	; (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002ddc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d0f0      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x200>
 8002de6:	e01b      	b.n	8002e20 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002de8:	4b09      	ldr	r3, [pc, #36]	; (8002e10 <HAL_RCC_OscConfig+0x248>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dee:	f7ff fa1d 	bl	800222c <HAL_GetTick>
 8002df2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002df4:	e00e      	b.n	8002e14 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002df6:	f7ff fa19 	bl	800222c <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d907      	bls.n	8002e14 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e150      	b.n	80030aa <HAL_RCC_OscConfig+0x4e2>
 8002e08:	40023800 	.word	0x40023800
 8002e0c:	42470000 	.word	0x42470000
 8002e10:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e14:	4b88      	ldr	r3, [pc, #544]	; (8003038 <HAL_RCC_OscConfig+0x470>)
 8002e16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e18:	f003 0302 	and.w	r3, r3, #2
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d1ea      	bne.n	8002df6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0304 	and.w	r3, r3, #4
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	f000 8097 	beq.w	8002f5c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e32:	4b81      	ldr	r3, [pc, #516]	; (8003038 <HAL_RCC_OscConfig+0x470>)
 8002e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d10f      	bne.n	8002e5e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e3e:	2300      	movs	r3, #0
 8002e40:	60bb      	str	r3, [r7, #8]
 8002e42:	4b7d      	ldr	r3, [pc, #500]	; (8003038 <HAL_RCC_OscConfig+0x470>)
 8002e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e46:	4a7c      	ldr	r2, [pc, #496]	; (8003038 <HAL_RCC_OscConfig+0x470>)
 8002e48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e4c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e4e:	4b7a      	ldr	r3, [pc, #488]	; (8003038 <HAL_RCC_OscConfig+0x470>)
 8002e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e56:	60bb      	str	r3, [r7, #8]
 8002e58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e5e:	4b77      	ldr	r3, [pc, #476]	; (800303c <HAL_RCC_OscConfig+0x474>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d118      	bne.n	8002e9c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e6a:	4b74      	ldr	r3, [pc, #464]	; (800303c <HAL_RCC_OscConfig+0x474>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a73      	ldr	r2, [pc, #460]	; (800303c <HAL_RCC_OscConfig+0x474>)
 8002e70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e76:	f7ff f9d9 	bl	800222c <HAL_GetTick>
 8002e7a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e7c:	e008      	b.n	8002e90 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e7e:	f7ff f9d5 	bl	800222c <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d901      	bls.n	8002e90 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e10c      	b.n	80030aa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e90:	4b6a      	ldr	r3, [pc, #424]	; (800303c <HAL_RCC_OscConfig+0x474>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d0f0      	beq.n	8002e7e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d106      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x2ea>
 8002ea4:	4b64      	ldr	r3, [pc, #400]	; (8003038 <HAL_RCC_OscConfig+0x470>)
 8002ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea8:	4a63      	ldr	r2, [pc, #396]	; (8003038 <HAL_RCC_OscConfig+0x470>)
 8002eaa:	f043 0301 	orr.w	r3, r3, #1
 8002eae:	6713      	str	r3, [r2, #112]	; 0x70
 8002eb0:	e01c      	b.n	8002eec <HAL_RCC_OscConfig+0x324>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	2b05      	cmp	r3, #5
 8002eb8:	d10c      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x30c>
 8002eba:	4b5f      	ldr	r3, [pc, #380]	; (8003038 <HAL_RCC_OscConfig+0x470>)
 8002ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ebe:	4a5e      	ldr	r2, [pc, #376]	; (8003038 <HAL_RCC_OscConfig+0x470>)
 8002ec0:	f043 0304 	orr.w	r3, r3, #4
 8002ec4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ec6:	4b5c      	ldr	r3, [pc, #368]	; (8003038 <HAL_RCC_OscConfig+0x470>)
 8002ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eca:	4a5b      	ldr	r2, [pc, #364]	; (8003038 <HAL_RCC_OscConfig+0x470>)
 8002ecc:	f043 0301 	orr.w	r3, r3, #1
 8002ed0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ed2:	e00b      	b.n	8002eec <HAL_RCC_OscConfig+0x324>
 8002ed4:	4b58      	ldr	r3, [pc, #352]	; (8003038 <HAL_RCC_OscConfig+0x470>)
 8002ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed8:	4a57      	ldr	r2, [pc, #348]	; (8003038 <HAL_RCC_OscConfig+0x470>)
 8002eda:	f023 0301 	bic.w	r3, r3, #1
 8002ede:	6713      	str	r3, [r2, #112]	; 0x70
 8002ee0:	4b55      	ldr	r3, [pc, #340]	; (8003038 <HAL_RCC_OscConfig+0x470>)
 8002ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee4:	4a54      	ldr	r2, [pc, #336]	; (8003038 <HAL_RCC_OscConfig+0x470>)
 8002ee6:	f023 0304 	bic.w	r3, r3, #4
 8002eea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d015      	beq.n	8002f20 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ef4:	f7ff f99a 	bl	800222c <HAL_GetTick>
 8002ef8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002efa:	e00a      	b.n	8002f12 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002efc:	f7ff f996 	bl	800222c <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e0cb      	b.n	80030aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f12:	4b49      	ldr	r3, [pc, #292]	; (8003038 <HAL_RCC_OscConfig+0x470>)
 8002f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d0ee      	beq.n	8002efc <HAL_RCC_OscConfig+0x334>
 8002f1e:	e014      	b.n	8002f4a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f20:	f7ff f984 	bl	800222c <HAL_GetTick>
 8002f24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f26:	e00a      	b.n	8002f3e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f28:	f7ff f980 	bl	800222c <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e0b5      	b.n	80030aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f3e:	4b3e      	ldr	r3, [pc, #248]	; (8003038 <HAL_RCC_OscConfig+0x470>)
 8002f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f42:	f003 0302 	and.w	r3, r3, #2
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d1ee      	bne.n	8002f28 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f4a:	7dfb      	ldrb	r3, [r7, #23]
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d105      	bne.n	8002f5c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f50:	4b39      	ldr	r3, [pc, #228]	; (8003038 <HAL_RCC_OscConfig+0x470>)
 8002f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f54:	4a38      	ldr	r2, [pc, #224]	; (8003038 <HAL_RCC_OscConfig+0x470>)
 8002f56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f5a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	f000 80a1 	beq.w	80030a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f66:	4b34      	ldr	r3, [pc, #208]	; (8003038 <HAL_RCC_OscConfig+0x470>)
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f003 030c 	and.w	r3, r3, #12
 8002f6e:	2b08      	cmp	r3, #8
 8002f70:	d05c      	beq.n	800302c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d141      	bne.n	8002ffe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f7a:	4b31      	ldr	r3, [pc, #196]	; (8003040 <HAL_RCC_OscConfig+0x478>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f80:	f7ff f954 	bl	800222c <HAL_GetTick>
 8002f84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f86:	e008      	b.n	8002f9a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f88:	f7ff f950 	bl	800222c <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e087      	b.n	80030aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f9a:	4b27      	ldr	r3, [pc, #156]	; (8003038 <HAL_RCC_OscConfig+0x470>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d1f0      	bne.n	8002f88 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	69da      	ldr	r2, [r3, #28]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a1b      	ldr	r3, [r3, #32]
 8002fae:	431a      	orrs	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb4:	019b      	lsls	r3, r3, #6
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fbc:	085b      	lsrs	r3, r3, #1
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	041b      	lsls	r3, r3, #16
 8002fc2:	431a      	orrs	r2, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc8:	061b      	lsls	r3, r3, #24
 8002fca:	491b      	ldr	r1, [pc, #108]	; (8003038 <HAL_RCC_OscConfig+0x470>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fd0:	4b1b      	ldr	r3, [pc, #108]	; (8003040 <HAL_RCC_OscConfig+0x478>)
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd6:	f7ff f929 	bl	800222c <HAL_GetTick>
 8002fda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fdc:	e008      	b.n	8002ff0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fde:	f7ff f925 	bl	800222c <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d901      	bls.n	8002ff0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002fec:	2303      	movs	r3, #3
 8002fee:	e05c      	b.n	80030aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ff0:	4b11      	ldr	r3, [pc, #68]	; (8003038 <HAL_RCC_OscConfig+0x470>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d0f0      	beq.n	8002fde <HAL_RCC_OscConfig+0x416>
 8002ffc:	e054      	b.n	80030a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ffe:	4b10      	ldr	r3, [pc, #64]	; (8003040 <HAL_RCC_OscConfig+0x478>)
 8003000:	2200      	movs	r2, #0
 8003002:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003004:	f7ff f912 	bl	800222c <HAL_GetTick>
 8003008:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800300a:	e008      	b.n	800301e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800300c:	f7ff f90e 	bl	800222c <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b02      	cmp	r3, #2
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e045      	b.n	80030aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800301e:	4b06      	ldr	r3, [pc, #24]	; (8003038 <HAL_RCC_OscConfig+0x470>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1f0      	bne.n	800300c <HAL_RCC_OscConfig+0x444>
 800302a:	e03d      	b.n	80030a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	699b      	ldr	r3, [r3, #24]
 8003030:	2b01      	cmp	r3, #1
 8003032:	d107      	bne.n	8003044 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e038      	b.n	80030aa <HAL_RCC_OscConfig+0x4e2>
 8003038:	40023800 	.word	0x40023800
 800303c:	40007000 	.word	0x40007000
 8003040:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003044:	4b1b      	ldr	r3, [pc, #108]	; (80030b4 <HAL_RCC_OscConfig+0x4ec>)
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	2b01      	cmp	r3, #1
 8003050:	d028      	beq.n	80030a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800305c:	429a      	cmp	r2, r3
 800305e:	d121      	bne.n	80030a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800306a:	429a      	cmp	r2, r3
 800306c:	d11a      	bne.n	80030a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003074:	4013      	ands	r3, r2
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800307a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800307c:	4293      	cmp	r3, r2
 800307e:	d111      	bne.n	80030a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800308a:	085b      	lsrs	r3, r3, #1
 800308c:	3b01      	subs	r3, #1
 800308e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003090:	429a      	cmp	r2, r3
 8003092:	d107      	bne.n	80030a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800309e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d001      	beq.n	80030a8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e000      	b.n	80030aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3718      	adds	r7, #24
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	40023800 	.word	0x40023800

080030b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d101      	bne.n	80030cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e0cc      	b.n	8003266 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030cc:	4b68      	ldr	r3, [pc, #416]	; (8003270 <HAL_RCC_ClockConfig+0x1b8>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0307 	and.w	r3, r3, #7
 80030d4:	683a      	ldr	r2, [r7, #0]
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d90c      	bls.n	80030f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030da:	4b65      	ldr	r3, [pc, #404]	; (8003270 <HAL_RCC_ClockConfig+0x1b8>)
 80030dc:	683a      	ldr	r2, [r7, #0]
 80030de:	b2d2      	uxtb	r2, r2
 80030e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030e2:	4b63      	ldr	r3, [pc, #396]	; (8003270 <HAL_RCC_ClockConfig+0x1b8>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0307 	and.w	r3, r3, #7
 80030ea:	683a      	ldr	r2, [r7, #0]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d001      	beq.n	80030f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e0b8      	b.n	8003266 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0302 	and.w	r3, r3, #2
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d020      	beq.n	8003142 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0304 	and.w	r3, r3, #4
 8003108:	2b00      	cmp	r3, #0
 800310a:	d005      	beq.n	8003118 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800310c:	4b59      	ldr	r3, [pc, #356]	; (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	4a58      	ldr	r2, [pc, #352]	; (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 8003112:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003116:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0308 	and.w	r3, r3, #8
 8003120:	2b00      	cmp	r3, #0
 8003122:	d005      	beq.n	8003130 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003124:	4b53      	ldr	r3, [pc, #332]	; (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	4a52      	ldr	r2, [pc, #328]	; (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 800312a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800312e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003130:	4b50      	ldr	r3, [pc, #320]	; (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	494d      	ldr	r1, [pc, #308]	; (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 800313e:	4313      	orrs	r3, r2
 8003140:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0301 	and.w	r3, r3, #1
 800314a:	2b00      	cmp	r3, #0
 800314c:	d044      	beq.n	80031d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	2b01      	cmp	r3, #1
 8003154:	d107      	bne.n	8003166 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003156:	4b47      	ldr	r3, [pc, #284]	; (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d119      	bne.n	8003196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e07f      	b.n	8003266 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	2b02      	cmp	r3, #2
 800316c:	d003      	beq.n	8003176 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003172:	2b03      	cmp	r3, #3
 8003174:	d107      	bne.n	8003186 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003176:	4b3f      	ldr	r3, [pc, #252]	; (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d109      	bne.n	8003196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e06f      	b.n	8003266 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003186:	4b3b      	ldr	r3, [pc, #236]	; (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	2b00      	cmp	r3, #0
 8003190:	d101      	bne.n	8003196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e067      	b.n	8003266 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003196:	4b37      	ldr	r3, [pc, #220]	; (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f023 0203 	bic.w	r2, r3, #3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	4934      	ldr	r1, [pc, #208]	; (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031a8:	f7ff f840 	bl	800222c <HAL_GetTick>
 80031ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ae:	e00a      	b.n	80031c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031b0:	f7ff f83c 	bl	800222c <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80031be:	4293      	cmp	r3, r2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e04f      	b.n	8003266 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031c6:	4b2b      	ldr	r3, [pc, #172]	; (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f003 020c 	and.w	r2, r3, #12
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d1eb      	bne.n	80031b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031d8:	4b25      	ldr	r3, [pc, #148]	; (8003270 <HAL_RCC_ClockConfig+0x1b8>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0307 	and.w	r3, r3, #7
 80031e0:	683a      	ldr	r2, [r7, #0]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d20c      	bcs.n	8003200 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031e6:	4b22      	ldr	r3, [pc, #136]	; (8003270 <HAL_RCC_ClockConfig+0x1b8>)
 80031e8:	683a      	ldr	r2, [r7, #0]
 80031ea:	b2d2      	uxtb	r2, r2
 80031ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ee:	4b20      	ldr	r3, [pc, #128]	; (8003270 <HAL_RCC_ClockConfig+0x1b8>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0307 	and.w	r3, r3, #7
 80031f6:	683a      	ldr	r2, [r7, #0]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d001      	beq.n	8003200 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e032      	b.n	8003266 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0304 	and.w	r3, r3, #4
 8003208:	2b00      	cmp	r3, #0
 800320a:	d008      	beq.n	800321e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800320c:	4b19      	ldr	r3, [pc, #100]	; (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	4916      	ldr	r1, [pc, #88]	; (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 800321a:	4313      	orrs	r3, r2
 800321c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0308 	and.w	r3, r3, #8
 8003226:	2b00      	cmp	r3, #0
 8003228:	d009      	beq.n	800323e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800322a:	4b12      	ldr	r3, [pc, #72]	; (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	691b      	ldr	r3, [r3, #16]
 8003236:	00db      	lsls	r3, r3, #3
 8003238:	490e      	ldr	r1, [pc, #56]	; (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 800323a:	4313      	orrs	r3, r2
 800323c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800323e:	f000 f821 	bl	8003284 <HAL_RCC_GetSysClockFreq>
 8003242:	4602      	mov	r2, r0
 8003244:	4b0b      	ldr	r3, [pc, #44]	; (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	091b      	lsrs	r3, r3, #4
 800324a:	f003 030f 	and.w	r3, r3, #15
 800324e:	490a      	ldr	r1, [pc, #40]	; (8003278 <HAL_RCC_ClockConfig+0x1c0>)
 8003250:	5ccb      	ldrb	r3, [r1, r3]
 8003252:	fa22 f303 	lsr.w	r3, r2, r3
 8003256:	4a09      	ldr	r2, [pc, #36]	; (800327c <HAL_RCC_ClockConfig+0x1c4>)
 8003258:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800325a:	4b09      	ldr	r3, [pc, #36]	; (8003280 <HAL_RCC_ClockConfig+0x1c8>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4618      	mov	r0, r3
 8003260:	f7fe ffa0 	bl	80021a4 <HAL_InitTick>

  return HAL_OK;
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	3710      	adds	r7, #16
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	40023c00 	.word	0x40023c00
 8003274:	40023800 	.word	0x40023800
 8003278:	08005ee0 	.word	0x08005ee0
 800327c:	20000000 	.word	0x20000000
 8003280:	2000000c 	.word	0x2000000c

08003284 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003284:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003288:	b094      	sub	sp, #80	; 0x50
 800328a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800328c:	2300      	movs	r3, #0
 800328e:	647b      	str	r3, [r7, #68]	; 0x44
 8003290:	2300      	movs	r3, #0
 8003292:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003294:	2300      	movs	r3, #0
 8003296:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003298:	2300      	movs	r3, #0
 800329a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800329c:	4b79      	ldr	r3, [pc, #484]	; (8003484 <HAL_RCC_GetSysClockFreq+0x200>)
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f003 030c 	and.w	r3, r3, #12
 80032a4:	2b08      	cmp	r3, #8
 80032a6:	d00d      	beq.n	80032c4 <HAL_RCC_GetSysClockFreq+0x40>
 80032a8:	2b08      	cmp	r3, #8
 80032aa:	f200 80e1 	bhi.w	8003470 <HAL_RCC_GetSysClockFreq+0x1ec>
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d002      	beq.n	80032b8 <HAL_RCC_GetSysClockFreq+0x34>
 80032b2:	2b04      	cmp	r3, #4
 80032b4:	d003      	beq.n	80032be <HAL_RCC_GetSysClockFreq+0x3a>
 80032b6:	e0db      	b.n	8003470 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032b8:	4b73      	ldr	r3, [pc, #460]	; (8003488 <HAL_RCC_GetSysClockFreq+0x204>)
 80032ba:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80032bc:	e0db      	b.n	8003476 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032be:	4b72      	ldr	r3, [pc, #456]	; (8003488 <HAL_RCC_GetSysClockFreq+0x204>)
 80032c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032c2:	e0d8      	b.n	8003476 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032c4:	4b6f      	ldr	r3, [pc, #444]	; (8003484 <HAL_RCC_GetSysClockFreq+0x200>)
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032cc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032ce:	4b6d      	ldr	r3, [pc, #436]	; (8003484 <HAL_RCC_GetSysClockFreq+0x200>)
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d063      	beq.n	80033a2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032da:	4b6a      	ldr	r3, [pc, #424]	; (8003484 <HAL_RCC_GetSysClockFreq+0x200>)
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	099b      	lsrs	r3, r3, #6
 80032e0:	2200      	movs	r2, #0
 80032e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80032e4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80032e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032ec:	633b      	str	r3, [r7, #48]	; 0x30
 80032ee:	2300      	movs	r3, #0
 80032f0:	637b      	str	r3, [r7, #52]	; 0x34
 80032f2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80032f6:	4622      	mov	r2, r4
 80032f8:	462b      	mov	r3, r5
 80032fa:	f04f 0000 	mov.w	r0, #0
 80032fe:	f04f 0100 	mov.w	r1, #0
 8003302:	0159      	lsls	r1, r3, #5
 8003304:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003308:	0150      	lsls	r0, r2, #5
 800330a:	4602      	mov	r2, r0
 800330c:	460b      	mov	r3, r1
 800330e:	4621      	mov	r1, r4
 8003310:	1a51      	subs	r1, r2, r1
 8003312:	6139      	str	r1, [r7, #16]
 8003314:	4629      	mov	r1, r5
 8003316:	eb63 0301 	sbc.w	r3, r3, r1
 800331a:	617b      	str	r3, [r7, #20]
 800331c:	f04f 0200 	mov.w	r2, #0
 8003320:	f04f 0300 	mov.w	r3, #0
 8003324:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003328:	4659      	mov	r1, fp
 800332a:	018b      	lsls	r3, r1, #6
 800332c:	4651      	mov	r1, sl
 800332e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003332:	4651      	mov	r1, sl
 8003334:	018a      	lsls	r2, r1, #6
 8003336:	4651      	mov	r1, sl
 8003338:	ebb2 0801 	subs.w	r8, r2, r1
 800333c:	4659      	mov	r1, fp
 800333e:	eb63 0901 	sbc.w	r9, r3, r1
 8003342:	f04f 0200 	mov.w	r2, #0
 8003346:	f04f 0300 	mov.w	r3, #0
 800334a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800334e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003352:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003356:	4690      	mov	r8, r2
 8003358:	4699      	mov	r9, r3
 800335a:	4623      	mov	r3, r4
 800335c:	eb18 0303 	adds.w	r3, r8, r3
 8003360:	60bb      	str	r3, [r7, #8]
 8003362:	462b      	mov	r3, r5
 8003364:	eb49 0303 	adc.w	r3, r9, r3
 8003368:	60fb      	str	r3, [r7, #12]
 800336a:	f04f 0200 	mov.w	r2, #0
 800336e:	f04f 0300 	mov.w	r3, #0
 8003372:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003376:	4629      	mov	r1, r5
 8003378:	028b      	lsls	r3, r1, #10
 800337a:	4621      	mov	r1, r4
 800337c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003380:	4621      	mov	r1, r4
 8003382:	028a      	lsls	r2, r1, #10
 8003384:	4610      	mov	r0, r2
 8003386:	4619      	mov	r1, r3
 8003388:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800338a:	2200      	movs	r2, #0
 800338c:	62bb      	str	r3, [r7, #40]	; 0x28
 800338e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003390:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003394:	f7fc ff74 	bl	8000280 <__aeabi_uldivmod>
 8003398:	4602      	mov	r2, r0
 800339a:	460b      	mov	r3, r1
 800339c:	4613      	mov	r3, r2
 800339e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033a0:	e058      	b.n	8003454 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033a2:	4b38      	ldr	r3, [pc, #224]	; (8003484 <HAL_RCC_GetSysClockFreq+0x200>)
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	099b      	lsrs	r3, r3, #6
 80033a8:	2200      	movs	r2, #0
 80033aa:	4618      	mov	r0, r3
 80033ac:	4611      	mov	r1, r2
 80033ae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80033b2:	623b      	str	r3, [r7, #32]
 80033b4:	2300      	movs	r3, #0
 80033b6:	627b      	str	r3, [r7, #36]	; 0x24
 80033b8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80033bc:	4642      	mov	r2, r8
 80033be:	464b      	mov	r3, r9
 80033c0:	f04f 0000 	mov.w	r0, #0
 80033c4:	f04f 0100 	mov.w	r1, #0
 80033c8:	0159      	lsls	r1, r3, #5
 80033ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033ce:	0150      	lsls	r0, r2, #5
 80033d0:	4602      	mov	r2, r0
 80033d2:	460b      	mov	r3, r1
 80033d4:	4641      	mov	r1, r8
 80033d6:	ebb2 0a01 	subs.w	sl, r2, r1
 80033da:	4649      	mov	r1, r9
 80033dc:	eb63 0b01 	sbc.w	fp, r3, r1
 80033e0:	f04f 0200 	mov.w	r2, #0
 80033e4:	f04f 0300 	mov.w	r3, #0
 80033e8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80033ec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80033f0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80033f4:	ebb2 040a 	subs.w	r4, r2, sl
 80033f8:	eb63 050b 	sbc.w	r5, r3, fp
 80033fc:	f04f 0200 	mov.w	r2, #0
 8003400:	f04f 0300 	mov.w	r3, #0
 8003404:	00eb      	lsls	r3, r5, #3
 8003406:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800340a:	00e2      	lsls	r2, r4, #3
 800340c:	4614      	mov	r4, r2
 800340e:	461d      	mov	r5, r3
 8003410:	4643      	mov	r3, r8
 8003412:	18e3      	adds	r3, r4, r3
 8003414:	603b      	str	r3, [r7, #0]
 8003416:	464b      	mov	r3, r9
 8003418:	eb45 0303 	adc.w	r3, r5, r3
 800341c:	607b      	str	r3, [r7, #4]
 800341e:	f04f 0200 	mov.w	r2, #0
 8003422:	f04f 0300 	mov.w	r3, #0
 8003426:	e9d7 4500 	ldrd	r4, r5, [r7]
 800342a:	4629      	mov	r1, r5
 800342c:	028b      	lsls	r3, r1, #10
 800342e:	4621      	mov	r1, r4
 8003430:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003434:	4621      	mov	r1, r4
 8003436:	028a      	lsls	r2, r1, #10
 8003438:	4610      	mov	r0, r2
 800343a:	4619      	mov	r1, r3
 800343c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800343e:	2200      	movs	r2, #0
 8003440:	61bb      	str	r3, [r7, #24]
 8003442:	61fa      	str	r2, [r7, #28]
 8003444:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003448:	f7fc ff1a 	bl	8000280 <__aeabi_uldivmod>
 800344c:	4602      	mov	r2, r0
 800344e:	460b      	mov	r3, r1
 8003450:	4613      	mov	r3, r2
 8003452:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003454:	4b0b      	ldr	r3, [pc, #44]	; (8003484 <HAL_RCC_GetSysClockFreq+0x200>)
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	0c1b      	lsrs	r3, r3, #16
 800345a:	f003 0303 	and.w	r3, r3, #3
 800345e:	3301      	adds	r3, #1
 8003460:	005b      	lsls	r3, r3, #1
 8003462:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003464:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003466:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003468:	fbb2 f3f3 	udiv	r3, r2, r3
 800346c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800346e:	e002      	b.n	8003476 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003470:	4b05      	ldr	r3, [pc, #20]	; (8003488 <HAL_RCC_GetSysClockFreq+0x204>)
 8003472:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003474:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003476:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003478:	4618      	mov	r0, r3
 800347a:	3750      	adds	r7, #80	; 0x50
 800347c:	46bd      	mov	sp, r7
 800347e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003482:	bf00      	nop
 8003484:	40023800 	.word	0x40023800
 8003488:	00f42400 	.word	0x00f42400

0800348c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800348c:	b480      	push	{r7}
 800348e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003490:	4b03      	ldr	r3, [pc, #12]	; (80034a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003492:	681b      	ldr	r3, [r3, #0]
}
 8003494:	4618      	mov	r0, r3
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	20000000 	.word	0x20000000

080034a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80034a8:	f7ff fff0 	bl	800348c <HAL_RCC_GetHCLKFreq>
 80034ac:	4602      	mov	r2, r0
 80034ae:	4b05      	ldr	r3, [pc, #20]	; (80034c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	0a9b      	lsrs	r3, r3, #10
 80034b4:	f003 0307 	and.w	r3, r3, #7
 80034b8:	4903      	ldr	r1, [pc, #12]	; (80034c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034ba:	5ccb      	ldrb	r3, [r1, r3]
 80034bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	40023800 	.word	0x40023800
 80034c8:	08005ef0 	.word	0x08005ef0

080034cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80034d0:	f7ff ffdc 	bl	800348c <HAL_RCC_GetHCLKFreq>
 80034d4:	4602      	mov	r2, r0
 80034d6:	4b05      	ldr	r3, [pc, #20]	; (80034ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	0b5b      	lsrs	r3, r3, #13
 80034dc:	f003 0307 	and.w	r3, r3, #7
 80034e0:	4903      	ldr	r1, [pc, #12]	; (80034f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034e2:	5ccb      	ldrb	r3, [r1, r3]
 80034e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	40023800 	.word	0x40023800
 80034f0:	08005ef0 	.word	0x08005ef0

080034f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d101      	bne.n	8003506 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e07b      	b.n	80035fe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350a:	2b00      	cmp	r3, #0
 800350c:	d108      	bne.n	8003520 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003516:	d009      	beq.n	800352c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	61da      	str	r2, [r3, #28]
 800351e:	e005      	b.n	800352c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003538:	b2db      	uxtb	r3, r3
 800353a:	2b00      	cmp	r3, #0
 800353c:	d106      	bne.n	800354c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f7fe f874 	bl	8001634 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2202      	movs	r2, #2
 8003550:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003562:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003574:	431a      	orrs	r2, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800357e:	431a      	orrs	r2, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	f003 0302 	and.w	r3, r3, #2
 8003588:	431a      	orrs	r2, r3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	f003 0301 	and.w	r3, r3, #1
 8003592:	431a      	orrs	r2, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	699b      	ldr	r3, [r3, #24]
 8003598:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800359c:	431a      	orrs	r2, r3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	69db      	ldr	r3, [r3, #28]
 80035a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035a6:	431a      	orrs	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a1b      	ldr	r3, [r3, #32]
 80035ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b0:	ea42 0103 	orr.w	r1, r2, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	430a      	orrs	r2, r1
 80035c2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	699b      	ldr	r3, [r3, #24]
 80035c8:	0c1b      	lsrs	r3, r3, #16
 80035ca:	f003 0104 	and.w	r1, r3, #4
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d2:	f003 0210 	and.w	r2, r3, #16
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	430a      	orrs	r2, r1
 80035dc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	69da      	ldr	r2, [r3, #28]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035ec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3708      	adds	r7, #8
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}

08003606 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8003606:	b580      	push	{r7, lr}
 8003608:	b084      	sub	sp, #16
 800360a:	af00      	add	r7, sp, #0
 800360c:	60f8      	str	r0, [r7, #12]
 800360e:	60b9      	str	r1, [r7, #8]
 8003610:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d101      	bne.n	800361c <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e038      	b.n	800368e <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8003622:	b2db      	uxtb	r3, r3
 8003624:	2b00      	cmp	r3, #0
 8003626:	d106      	bne.n	8003636 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8003630:	68f8      	ldr	r0, [r7, #12]
 8003632:	f7fe f975 	bl	8001920 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	3308      	adds	r3, #8
 800363e:	4619      	mov	r1, r3
 8003640:	4610      	mov	r0, r2
 8003642:	f001 f83b 	bl	80046bc <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6818      	ldr	r0, [r3, #0]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	461a      	mov	r2, r3
 8003650:	68b9      	ldr	r1, [r7, #8]
 8003652:	f001 f89d 	bl	8004790 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6858      	ldr	r0, [r3, #4]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	689a      	ldr	r2, [r3, #8]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003662:	6879      	ldr	r1, [r7, #4]
 8003664:	f001 f8ca 	bl	80047fc <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68fa      	ldr	r2, [r7, #12]
 800366e:	6892      	ldr	r2, [r2, #8]
 8003670:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	68fa      	ldr	r2, [r7, #12]
 800367a:	6892      	ldr	r2, [r2, #8]
 800367c:	f041 0101 	orr.w	r1, r1, #1
 8003680:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3710      	adds	r7, #16
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}

08003696 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003696:	b580      	push	{r7, lr}
 8003698:	b082      	sub	sp, #8
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d101      	bne.n	80036a8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e03f      	b.n	8003728 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d106      	bne.n	80036c2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f7fe f857 	bl	8001770 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2224      	movs	r2, #36	; 0x24
 80036c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	68da      	ldr	r2, [r3, #12]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036d8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 fd7a 	bl	80041d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	691a      	ldr	r2, [r3, #16]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036ee:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	695a      	ldr	r2, [r3, #20]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036fe:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68da      	ldr	r2, [r3, #12]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800370e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2220      	movs	r2, #32
 800371a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2220      	movs	r2, #32
 8003722:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003726:	2300      	movs	r3, #0
}
 8003728:	4618      	mov	r0, r3
 800372a:	3708      	adds	r7, #8
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b08a      	sub	sp, #40	; 0x28
 8003734:	af02      	add	r7, sp, #8
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	60b9      	str	r1, [r7, #8]
 800373a:	603b      	str	r3, [r7, #0]
 800373c:	4613      	mov	r3, r2
 800373e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003740:	2300      	movs	r3, #0
 8003742:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800374a:	b2db      	uxtb	r3, r3
 800374c:	2b20      	cmp	r3, #32
 800374e:	d17c      	bne.n	800384a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d002      	beq.n	800375c <HAL_UART_Transmit+0x2c>
 8003756:	88fb      	ldrh	r3, [r7, #6]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d101      	bne.n	8003760 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e075      	b.n	800384c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003766:	2b01      	cmp	r3, #1
 8003768:	d101      	bne.n	800376e <HAL_UART_Transmit+0x3e>
 800376a:	2302      	movs	r3, #2
 800376c:	e06e      	b.n	800384c <HAL_UART_Transmit+0x11c>
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2201      	movs	r2, #1
 8003772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2200      	movs	r2, #0
 800377a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2221      	movs	r2, #33	; 0x21
 8003780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003784:	f7fe fd52 	bl	800222c <HAL_GetTick>
 8003788:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	88fa      	ldrh	r2, [r7, #6]
 800378e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	88fa      	ldrh	r2, [r7, #6]
 8003794:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800379e:	d108      	bne.n	80037b2 <HAL_UART_Transmit+0x82>
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	691b      	ldr	r3, [r3, #16]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d104      	bne.n	80037b2 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80037a8:	2300      	movs	r3, #0
 80037aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	61bb      	str	r3, [r7, #24]
 80037b0:	e003      	b.n	80037ba <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037b6:	2300      	movs	r3, #0
 80037b8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80037c2:	e02a      	b.n	800381a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	9300      	str	r3, [sp, #0]
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	2200      	movs	r2, #0
 80037cc:	2180      	movs	r1, #128	; 0x80
 80037ce:	68f8      	ldr	r0, [r7, #12]
 80037d0:	f000 faf8 	bl	8003dc4 <UART_WaitOnFlagUntilTimeout>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d001      	beq.n	80037de <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e036      	b.n	800384c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d10b      	bne.n	80037fc <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037e4:	69bb      	ldr	r3, [r7, #24]
 80037e6:	881b      	ldrh	r3, [r3, #0]
 80037e8:	461a      	mov	r2, r3
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037f2:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	3302      	adds	r3, #2
 80037f8:	61bb      	str	r3, [r7, #24]
 80037fa:	e007      	b.n	800380c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	781a      	ldrb	r2, [r3, #0]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	3301      	adds	r3, #1
 800380a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003810:	b29b      	uxth	r3, r3
 8003812:	3b01      	subs	r3, #1
 8003814:	b29a      	uxth	r2, r3
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800381e:	b29b      	uxth	r3, r3
 8003820:	2b00      	cmp	r3, #0
 8003822:	d1cf      	bne.n	80037c4 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	9300      	str	r3, [sp, #0]
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	2200      	movs	r2, #0
 800382c:	2140      	movs	r1, #64	; 0x40
 800382e:	68f8      	ldr	r0, [r7, #12]
 8003830:	f000 fac8 	bl	8003dc4 <UART_WaitOnFlagUntilTimeout>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d001      	beq.n	800383e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e006      	b.n	800384c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2220      	movs	r2, #32
 8003842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003846:	2300      	movs	r3, #0
 8003848:	e000      	b.n	800384c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800384a:	2302      	movs	r3, #2
  }
}
 800384c:	4618      	mov	r0, r3
 800384e:	3720      	adds	r7, #32
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b0ba      	sub	sp, #232	; 0xe8
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800387a:	2300      	movs	r3, #0
 800387c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003880:	2300      	movs	r3, #0
 8003882:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003886:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800388a:	f003 030f 	and.w	r3, r3, #15
 800388e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003892:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003896:	2b00      	cmp	r3, #0
 8003898:	d10f      	bne.n	80038ba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800389a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800389e:	f003 0320 	and.w	r3, r3, #32
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d009      	beq.n	80038ba <HAL_UART_IRQHandler+0x66>
 80038a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038aa:	f003 0320 	and.w	r3, r3, #32
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d003      	beq.n	80038ba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 fbd3 	bl	800405e <UART_Receive_IT>
      return;
 80038b8:	e256      	b.n	8003d68 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80038ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80038be:	2b00      	cmp	r3, #0
 80038c0:	f000 80de 	beq.w	8003a80 <HAL_UART_IRQHandler+0x22c>
 80038c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038c8:	f003 0301 	and.w	r3, r3, #1
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d106      	bne.n	80038de <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80038d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038d4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80038d8:	2b00      	cmp	r3, #0
 80038da:	f000 80d1 	beq.w	8003a80 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80038de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00b      	beq.n	8003902 <HAL_UART_IRQHandler+0xae>
 80038ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d005      	beq.n	8003902 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fa:	f043 0201 	orr.w	r2, r3, #1
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003906:	f003 0304 	and.w	r3, r3, #4
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00b      	beq.n	8003926 <HAL_UART_IRQHandler+0xd2>
 800390e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003912:	f003 0301 	and.w	r3, r3, #1
 8003916:	2b00      	cmp	r3, #0
 8003918:	d005      	beq.n	8003926 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391e:	f043 0202 	orr.w	r2, r3, #2
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800392a:	f003 0302 	and.w	r3, r3, #2
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00b      	beq.n	800394a <HAL_UART_IRQHandler+0xf6>
 8003932:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003936:	f003 0301 	and.w	r3, r3, #1
 800393a:	2b00      	cmp	r3, #0
 800393c:	d005      	beq.n	800394a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003942:	f043 0204 	orr.w	r2, r3, #4
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800394a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800394e:	f003 0308 	and.w	r3, r3, #8
 8003952:	2b00      	cmp	r3, #0
 8003954:	d011      	beq.n	800397a <HAL_UART_IRQHandler+0x126>
 8003956:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800395a:	f003 0320 	and.w	r3, r3, #32
 800395e:	2b00      	cmp	r3, #0
 8003960:	d105      	bne.n	800396e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003962:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	2b00      	cmp	r3, #0
 800396c:	d005      	beq.n	800397a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003972:	f043 0208 	orr.w	r2, r3, #8
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397e:	2b00      	cmp	r3, #0
 8003980:	f000 81ed 	beq.w	8003d5e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003984:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003988:	f003 0320 	and.w	r3, r3, #32
 800398c:	2b00      	cmp	r3, #0
 800398e:	d008      	beq.n	80039a2 <HAL_UART_IRQHandler+0x14e>
 8003990:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003994:	f003 0320 	and.w	r3, r3, #32
 8003998:	2b00      	cmp	r3, #0
 800399a:	d002      	beq.n	80039a2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f000 fb5e 	bl	800405e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	695b      	ldr	r3, [r3, #20]
 80039a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ac:	2b40      	cmp	r3, #64	; 0x40
 80039ae:	bf0c      	ite	eq
 80039b0:	2301      	moveq	r3, #1
 80039b2:	2300      	movne	r3, #0
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039be:	f003 0308 	and.w	r3, r3, #8
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d103      	bne.n	80039ce <HAL_UART_IRQHandler+0x17a>
 80039c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d04f      	beq.n	8003a6e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 fa66 	bl	8003ea0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039de:	2b40      	cmp	r3, #64	; 0x40
 80039e0:	d141      	bne.n	8003a66 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	3314      	adds	r3, #20
 80039e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80039f0:	e853 3f00 	ldrex	r3, [r3]
 80039f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80039f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80039fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	3314      	adds	r3, #20
 8003a0a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003a0e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003a12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a16:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003a1a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003a1e:	e841 2300 	strex	r3, r2, [r1]
 8003a22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003a26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d1d9      	bne.n	80039e2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d013      	beq.n	8003a5e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a3a:	4a7d      	ldr	r2, [pc, #500]	; (8003c30 <HAL_UART_IRQHandler+0x3dc>)
 8003a3c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a42:	4618      	mov	r0, r3
 8003a44:	f7fe fda3 	bl	800258e <HAL_DMA_Abort_IT>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d016      	beq.n	8003a7c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a58:	4610      	mov	r0, r2
 8003a5a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a5c:	e00e      	b.n	8003a7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 f99a 	bl	8003d98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a64:	e00a      	b.n	8003a7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f000 f996 	bl	8003d98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a6c:	e006      	b.n	8003a7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 f992 	bl	8003d98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003a7a:	e170      	b.n	8003d5e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a7c:	bf00      	nop
    return;
 8003a7e:	e16e      	b.n	8003d5e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	f040 814a 	bne.w	8003d1e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003a8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a8e:	f003 0310 	and.w	r3, r3, #16
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	f000 8143 	beq.w	8003d1e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003a98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a9c:	f003 0310 	and.w	r3, r3, #16
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	f000 813c 	beq.w	8003d1e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	60bb      	str	r3, [r7, #8]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	60bb      	str	r3, [r7, #8]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	60bb      	str	r3, [r7, #8]
 8003aba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ac6:	2b40      	cmp	r3, #64	; 0x40
 8003ac8:	f040 80b4 	bne.w	8003c34 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003ad8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	f000 8140 	beq.w	8003d62 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003ae6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003aea:	429a      	cmp	r2, r3
 8003aec:	f080 8139 	bcs.w	8003d62 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003af6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003afc:	69db      	ldr	r3, [r3, #28]
 8003afe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b02:	f000 8088 	beq.w	8003c16 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	330c      	adds	r3, #12
 8003b0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b10:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003b14:	e853 3f00 	ldrex	r3, [r3]
 8003b18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003b1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	330c      	adds	r3, #12
 8003b2e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003b32:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003b36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b3a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003b3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003b42:	e841 2300 	strex	r3, r2, [r1]
 8003b46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003b4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d1d9      	bne.n	8003b06 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	3314      	adds	r3, #20
 8003b58:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b5c:	e853 3f00 	ldrex	r3, [r3]
 8003b60:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003b62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b64:	f023 0301 	bic.w	r3, r3, #1
 8003b68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	3314      	adds	r3, #20
 8003b72:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003b76:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003b7a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b7c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003b7e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003b82:	e841 2300 	strex	r3, r2, [r1]
 8003b86:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003b88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1e1      	bne.n	8003b52 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	3314      	adds	r3, #20
 8003b94:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b98:	e853 3f00 	ldrex	r3, [r3]
 8003b9c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003b9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ba0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ba4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	3314      	adds	r3, #20
 8003bae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003bb2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003bb4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003bb8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003bba:	e841 2300 	strex	r3, r2, [r1]
 8003bbe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003bc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d1e3      	bne.n	8003b8e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2220      	movs	r2, #32
 8003bca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	330c      	adds	r3, #12
 8003bda:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bde:	e853 3f00 	ldrex	r3, [r3]
 8003be2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003be4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003be6:	f023 0310 	bic.w	r3, r3, #16
 8003bea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	330c      	adds	r3, #12
 8003bf4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003bf8:	65ba      	str	r2, [r7, #88]	; 0x58
 8003bfa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bfc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003bfe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c00:	e841 2300 	strex	r3, r2, [r1]
 8003c04:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003c06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d1e3      	bne.n	8003bd4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c10:	4618      	mov	r0, r3
 8003c12:	f7fe fc4c 	bl	80024ae <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	4619      	mov	r1, r3
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f000 f8c0 	bl	8003dac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003c2c:	e099      	b.n	8003d62 <HAL_UART_IRQHandler+0x50e>
 8003c2e:	bf00      	nop
 8003c30:	08003f67 	.word	0x08003f67
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	f000 808b 	beq.w	8003d66 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003c50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	f000 8086 	beq.w	8003d66 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	330c      	adds	r3, #12
 8003c60:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c64:	e853 3f00 	ldrex	r3, [r3]
 8003c68:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c70:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	330c      	adds	r3, #12
 8003c7a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003c7e:	647a      	str	r2, [r7, #68]	; 0x44
 8003c80:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c82:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003c84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c86:	e841 2300 	strex	r3, r2, [r1]
 8003c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003c8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1e3      	bne.n	8003c5a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	3314      	adds	r3, #20
 8003c98:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9c:	e853 3f00 	ldrex	r3, [r3]
 8003ca0:	623b      	str	r3, [r7, #32]
   return(result);
 8003ca2:	6a3b      	ldr	r3, [r7, #32]
 8003ca4:	f023 0301 	bic.w	r3, r3, #1
 8003ca8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	3314      	adds	r3, #20
 8003cb2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003cb6:	633a      	str	r2, [r7, #48]	; 0x30
 8003cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003cbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cbe:	e841 2300 	strex	r3, r2, [r1]
 8003cc2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1e3      	bne.n	8003c92 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2220      	movs	r2, #32
 8003cce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	330c      	adds	r3, #12
 8003cde:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	e853 3f00 	ldrex	r3, [r3]
 8003ce6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f023 0310 	bic.w	r3, r3, #16
 8003cee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	330c      	adds	r3, #12
 8003cf8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003cfc:	61fa      	str	r2, [r7, #28]
 8003cfe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d00:	69b9      	ldr	r1, [r7, #24]
 8003d02:	69fa      	ldr	r2, [r7, #28]
 8003d04:	e841 2300 	strex	r3, r2, [r1]
 8003d08:	617b      	str	r3, [r7, #20]
   return(result);
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d1e3      	bne.n	8003cd8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003d10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003d14:	4619      	mov	r1, r3
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f000 f848 	bl	8003dac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d1c:	e023      	b.n	8003d66 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003d1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d009      	beq.n	8003d3e <HAL_UART_IRQHandler+0x4ea>
 8003d2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d003      	beq.n	8003d3e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 f929 	bl	8003f8e <UART_Transmit_IT>
    return;
 8003d3c:	e014      	b.n	8003d68 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003d3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d00e      	beq.n	8003d68 <HAL_UART_IRQHandler+0x514>
 8003d4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d008      	beq.n	8003d68 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 f969 	bl	800402e <UART_EndTransmit_IT>
    return;
 8003d5c:	e004      	b.n	8003d68 <HAL_UART_IRQHandler+0x514>
    return;
 8003d5e:	bf00      	nop
 8003d60:	e002      	b.n	8003d68 <HAL_UART_IRQHandler+0x514>
      return;
 8003d62:	bf00      	nop
 8003d64:	e000      	b.n	8003d68 <HAL_UART_IRQHandler+0x514>
      return;
 8003d66:	bf00      	nop
  }
}
 8003d68:	37e8      	adds	r7, #232	; 0xe8
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop

08003d70 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003d78:	bf00      	nop
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003d8c:	bf00      	nop
 8003d8e:	370c      	adds	r7, #12
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003da0:	bf00      	nop
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	460b      	mov	r3, r1
 8003db6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003db8:	bf00      	nop
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr

08003dc4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b090      	sub	sp, #64	; 0x40
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	60f8      	str	r0, [r7, #12]
 8003dcc:	60b9      	str	r1, [r7, #8]
 8003dce:	603b      	str	r3, [r7, #0]
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dd4:	e050      	b.n	8003e78 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ddc:	d04c      	beq.n	8003e78 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003dde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d007      	beq.n	8003df4 <UART_WaitOnFlagUntilTimeout+0x30>
 8003de4:	f7fe fa22 	bl	800222c <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d241      	bcs.n	8003e78 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	330c      	adds	r3, #12
 8003dfa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dfe:	e853 3f00 	ldrex	r3, [r3]
 8003e02:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e06:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	330c      	adds	r3, #12
 8003e12:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e14:	637a      	str	r2, [r7, #52]	; 0x34
 8003e16:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e18:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e1c:	e841 2300 	strex	r3, r2, [r1]
 8003e20:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d1e5      	bne.n	8003df4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	3314      	adds	r3, #20
 8003e2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	e853 3f00 	ldrex	r3, [r3]
 8003e36:	613b      	str	r3, [r7, #16]
   return(result);
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	f023 0301 	bic.w	r3, r3, #1
 8003e3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	3314      	adds	r3, #20
 8003e46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e48:	623a      	str	r2, [r7, #32]
 8003e4a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e4c:	69f9      	ldr	r1, [r7, #28]
 8003e4e:	6a3a      	ldr	r2, [r7, #32]
 8003e50:	e841 2300 	strex	r3, r2, [r1]
 8003e54:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d1e5      	bne.n	8003e28 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2220      	movs	r2, #32
 8003e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2220      	movs	r2, #32
 8003e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	e00f      	b.n	8003e98 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	4013      	ands	r3, r2
 8003e82:	68ba      	ldr	r2, [r7, #8]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	bf0c      	ite	eq
 8003e88:	2301      	moveq	r3, #1
 8003e8a:	2300      	movne	r3, #0
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	461a      	mov	r2, r3
 8003e90:	79fb      	ldrb	r3, [r7, #7]
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d09f      	beq.n	8003dd6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e96:	2300      	movs	r3, #0
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3740      	adds	r7, #64	; 0x40
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b095      	sub	sp, #84	; 0x54
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	330c      	adds	r3, #12
 8003eae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eb2:	e853 3f00 	ldrex	r3, [r3]
 8003eb6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ebe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	330c      	adds	r3, #12
 8003ec6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ec8:	643a      	str	r2, [r7, #64]	; 0x40
 8003eca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ecc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003ece:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003ed0:	e841 2300 	strex	r3, r2, [r1]
 8003ed4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d1e5      	bne.n	8003ea8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	3314      	adds	r3, #20
 8003ee2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee4:	6a3b      	ldr	r3, [r7, #32]
 8003ee6:	e853 3f00 	ldrex	r3, [r3]
 8003eea:	61fb      	str	r3, [r7, #28]
   return(result);
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	f023 0301 	bic.w	r3, r3, #1
 8003ef2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	3314      	adds	r3, #20
 8003efa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003efc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003efe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f04:	e841 2300 	strex	r3, r2, [r1]
 8003f08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d1e5      	bne.n	8003edc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d119      	bne.n	8003f4c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	330c      	adds	r3, #12
 8003f1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	e853 3f00 	ldrex	r3, [r3]
 8003f26:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	f023 0310 	bic.w	r3, r3, #16
 8003f2e:	647b      	str	r3, [r7, #68]	; 0x44
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	330c      	adds	r3, #12
 8003f36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f38:	61ba      	str	r2, [r7, #24]
 8003f3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f3c:	6979      	ldr	r1, [r7, #20]
 8003f3e:	69ba      	ldr	r2, [r7, #24]
 8003f40:	e841 2300 	strex	r3, r2, [r1]
 8003f44:	613b      	str	r3, [r7, #16]
   return(result);
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d1e5      	bne.n	8003f18 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2220      	movs	r2, #32
 8003f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003f5a:	bf00      	nop
 8003f5c:	3754      	adds	r7, #84	; 0x54
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr

08003f66 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f66:	b580      	push	{r7, lr}
 8003f68:	b084      	sub	sp, #16
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f72:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2200      	movs	r2, #0
 8003f78:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f80:	68f8      	ldr	r0, [r7, #12]
 8003f82:	f7ff ff09 	bl	8003d98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f86:	bf00      	nop
 8003f88:	3710      	adds	r7, #16
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}

08003f8e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003f8e:	b480      	push	{r7}
 8003f90:	b085      	sub	sp, #20
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	2b21      	cmp	r3, #33	; 0x21
 8003fa0:	d13e      	bne.n	8004020 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003faa:	d114      	bne.n	8003fd6 <UART_Transmit_IT+0x48>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d110      	bne.n	8003fd6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6a1b      	ldr	r3, [r3, #32]
 8003fb8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	881b      	ldrh	r3, [r3, #0]
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fc8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a1b      	ldr	r3, [r3, #32]
 8003fce:	1c9a      	adds	r2, r3, #2
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	621a      	str	r2, [r3, #32]
 8003fd4:	e008      	b.n	8003fe8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a1b      	ldr	r3, [r3, #32]
 8003fda:	1c59      	adds	r1, r3, #1
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	6211      	str	r1, [r2, #32]
 8003fe0:	781a      	ldrb	r2, [r3, #0]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	4619      	mov	r1, r3
 8003ff6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d10f      	bne.n	800401c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68da      	ldr	r2, [r3, #12]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800400a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	68da      	ldr	r2, [r3, #12]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800401a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800401c:	2300      	movs	r3, #0
 800401e:	e000      	b.n	8004022 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004020:	2302      	movs	r3, #2
  }
}
 8004022:	4618      	mov	r0, r3
 8004024:	3714      	adds	r7, #20
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr

0800402e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800402e:	b580      	push	{r7, lr}
 8004030:	b082      	sub	sp, #8
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	68da      	ldr	r2, [r3, #12]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004044:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2220      	movs	r2, #32
 800404a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f7ff fe8e 	bl	8003d70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3708      	adds	r7, #8
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}

0800405e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800405e:	b580      	push	{r7, lr}
 8004060:	b08c      	sub	sp, #48	; 0x30
 8004062:	af00      	add	r7, sp, #0
 8004064:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800406c:	b2db      	uxtb	r3, r3
 800406e:	2b22      	cmp	r3, #34	; 0x22
 8004070:	f040 80ab 	bne.w	80041ca <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800407c:	d117      	bne.n	80040ae <UART_Receive_IT+0x50>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d113      	bne.n	80040ae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004086:	2300      	movs	r3, #0
 8004088:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800408e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	b29b      	uxth	r3, r3
 8004098:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800409c:	b29a      	uxth	r2, r3
 800409e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a6:	1c9a      	adds	r2, r3, #2
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	629a      	str	r2, [r3, #40]	; 0x28
 80040ac:	e026      	b.n	80040fc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80040b4:	2300      	movs	r3, #0
 80040b6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040c0:	d007      	beq.n	80040d2 <UART_Receive_IT+0x74>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d10a      	bne.n	80040e0 <UART_Receive_IT+0x82>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d106      	bne.n	80040e0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	b2da      	uxtb	r2, r3
 80040da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040dc:	701a      	strb	r2, [r3, #0]
 80040de:	e008      	b.n	80040f2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040ec:	b2da      	uxtb	r2, r3
 80040ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040f0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040f6:	1c5a      	adds	r2, r3, #1
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004100:	b29b      	uxth	r3, r3
 8004102:	3b01      	subs	r3, #1
 8004104:	b29b      	uxth	r3, r3
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	4619      	mov	r1, r3
 800410a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800410c:	2b00      	cmp	r3, #0
 800410e:	d15a      	bne.n	80041c6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	68da      	ldr	r2, [r3, #12]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f022 0220 	bic.w	r2, r2, #32
 800411e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	68da      	ldr	r2, [r3, #12]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800412e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	695a      	ldr	r2, [r3, #20]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f022 0201 	bic.w	r2, r2, #1
 800413e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2220      	movs	r2, #32
 8004144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800414c:	2b01      	cmp	r3, #1
 800414e:	d135      	bne.n	80041bc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	330c      	adds	r3, #12
 800415c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	e853 3f00 	ldrex	r3, [r3]
 8004164:	613b      	str	r3, [r7, #16]
   return(result);
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	f023 0310 	bic.w	r3, r3, #16
 800416c:	627b      	str	r3, [r7, #36]	; 0x24
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	330c      	adds	r3, #12
 8004174:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004176:	623a      	str	r2, [r7, #32]
 8004178:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800417a:	69f9      	ldr	r1, [r7, #28]
 800417c:	6a3a      	ldr	r2, [r7, #32]
 800417e:	e841 2300 	strex	r3, r2, [r1]
 8004182:	61bb      	str	r3, [r7, #24]
   return(result);
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d1e5      	bne.n	8004156 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0310 	and.w	r3, r3, #16
 8004194:	2b10      	cmp	r3, #16
 8004196:	d10a      	bne.n	80041ae <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004198:	2300      	movs	r3, #0
 800419a:	60fb      	str	r3, [r7, #12]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	60fb      	str	r3, [r7, #12]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	60fb      	str	r3, [r7, #12]
 80041ac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80041b2:	4619      	mov	r1, r3
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f7ff fdf9 	bl	8003dac <HAL_UARTEx_RxEventCallback>
 80041ba:	e002      	b.n	80041c2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f7ff fde1 	bl	8003d84 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80041c2:	2300      	movs	r3, #0
 80041c4:	e002      	b.n	80041cc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80041c6:	2300      	movs	r3, #0
 80041c8:	e000      	b.n	80041cc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80041ca:	2302      	movs	r3, #2
  }
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3730      	adds	r7, #48	; 0x30
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041d8:	b0c0      	sub	sp, #256	; 0x100
 80041da:	af00      	add	r7, sp, #0
 80041dc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	691b      	ldr	r3, [r3, #16]
 80041e8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80041ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041f0:	68d9      	ldr	r1, [r3, #12]
 80041f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	ea40 0301 	orr.w	r3, r0, r1
 80041fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80041fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004202:	689a      	ldr	r2, [r3, #8]
 8004204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004208:	691b      	ldr	r3, [r3, #16]
 800420a:	431a      	orrs	r2, r3
 800420c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004210:	695b      	ldr	r3, [r3, #20]
 8004212:	431a      	orrs	r2, r3
 8004214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004218:	69db      	ldr	r3, [r3, #28]
 800421a:	4313      	orrs	r3, r2
 800421c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800422c:	f021 010c 	bic.w	r1, r1, #12
 8004230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800423a:	430b      	orrs	r3, r1
 800423c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800423e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	695b      	ldr	r3, [r3, #20]
 8004246:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800424a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800424e:	6999      	ldr	r1, [r3, #24]
 8004250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	ea40 0301 	orr.w	r3, r0, r1
 800425a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800425c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	4b8f      	ldr	r3, [pc, #572]	; (80044a0 <UART_SetConfig+0x2cc>)
 8004264:	429a      	cmp	r2, r3
 8004266:	d005      	beq.n	8004274 <UART_SetConfig+0xa0>
 8004268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	4b8d      	ldr	r3, [pc, #564]	; (80044a4 <UART_SetConfig+0x2d0>)
 8004270:	429a      	cmp	r2, r3
 8004272:	d104      	bne.n	800427e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004274:	f7ff f92a 	bl	80034cc <HAL_RCC_GetPCLK2Freq>
 8004278:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800427c:	e003      	b.n	8004286 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800427e:	f7ff f911 	bl	80034a4 <HAL_RCC_GetPCLK1Freq>
 8004282:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800428a:	69db      	ldr	r3, [r3, #28]
 800428c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004290:	f040 810c 	bne.w	80044ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004294:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004298:	2200      	movs	r2, #0
 800429a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800429e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80042a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80042a6:	4622      	mov	r2, r4
 80042a8:	462b      	mov	r3, r5
 80042aa:	1891      	adds	r1, r2, r2
 80042ac:	65b9      	str	r1, [r7, #88]	; 0x58
 80042ae:	415b      	adcs	r3, r3
 80042b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80042b6:	4621      	mov	r1, r4
 80042b8:	eb12 0801 	adds.w	r8, r2, r1
 80042bc:	4629      	mov	r1, r5
 80042be:	eb43 0901 	adc.w	r9, r3, r1
 80042c2:	f04f 0200 	mov.w	r2, #0
 80042c6:	f04f 0300 	mov.w	r3, #0
 80042ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80042ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80042d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80042d6:	4690      	mov	r8, r2
 80042d8:	4699      	mov	r9, r3
 80042da:	4623      	mov	r3, r4
 80042dc:	eb18 0303 	adds.w	r3, r8, r3
 80042e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80042e4:	462b      	mov	r3, r5
 80042e6:	eb49 0303 	adc.w	r3, r9, r3
 80042ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80042ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80042fa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80042fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004302:	460b      	mov	r3, r1
 8004304:	18db      	adds	r3, r3, r3
 8004306:	653b      	str	r3, [r7, #80]	; 0x50
 8004308:	4613      	mov	r3, r2
 800430a:	eb42 0303 	adc.w	r3, r2, r3
 800430e:	657b      	str	r3, [r7, #84]	; 0x54
 8004310:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004314:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004318:	f7fb ffb2 	bl	8000280 <__aeabi_uldivmod>
 800431c:	4602      	mov	r2, r0
 800431e:	460b      	mov	r3, r1
 8004320:	4b61      	ldr	r3, [pc, #388]	; (80044a8 <UART_SetConfig+0x2d4>)
 8004322:	fba3 2302 	umull	r2, r3, r3, r2
 8004326:	095b      	lsrs	r3, r3, #5
 8004328:	011c      	lsls	r4, r3, #4
 800432a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800432e:	2200      	movs	r2, #0
 8004330:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004334:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004338:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800433c:	4642      	mov	r2, r8
 800433e:	464b      	mov	r3, r9
 8004340:	1891      	adds	r1, r2, r2
 8004342:	64b9      	str	r1, [r7, #72]	; 0x48
 8004344:	415b      	adcs	r3, r3
 8004346:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004348:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800434c:	4641      	mov	r1, r8
 800434e:	eb12 0a01 	adds.w	sl, r2, r1
 8004352:	4649      	mov	r1, r9
 8004354:	eb43 0b01 	adc.w	fp, r3, r1
 8004358:	f04f 0200 	mov.w	r2, #0
 800435c:	f04f 0300 	mov.w	r3, #0
 8004360:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004364:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004368:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800436c:	4692      	mov	sl, r2
 800436e:	469b      	mov	fp, r3
 8004370:	4643      	mov	r3, r8
 8004372:	eb1a 0303 	adds.w	r3, sl, r3
 8004376:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800437a:	464b      	mov	r3, r9
 800437c:	eb4b 0303 	adc.w	r3, fp, r3
 8004380:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004390:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004394:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004398:	460b      	mov	r3, r1
 800439a:	18db      	adds	r3, r3, r3
 800439c:	643b      	str	r3, [r7, #64]	; 0x40
 800439e:	4613      	mov	r3, r2
 80043a0:	eb42 0303 	adc.w	r3, r2, r3
 80043a4:	647b      	str	r3, [r7, #68]	; 0x44
 80043a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80043aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80043ae:	f7fb ff67 	bl	8000280 <__aeabi_uldivmod>
 80043b2:	4602      	mov	r2, r0
 80043b4:	460b      	mov	r3, r1
 80043b6:	4611      	mov	r1, r2
 80043b8:	4b3b      	ldr	r3, [pc, #236]	; (80044a8 <UART_SetConfig+0x2d4>)
 80043ba:	fba3 2301 	umull	r2, r3, r3, r1
 80043be:	095b      	lsrs	r3, r3, #5
 80043c0:	2264      	movs	r2, #100	; 0x64
 80043c2:	fb02 f303 	mul.w	r3, r2, r3
 80043c6:	1acb      	subs	r3, r1, r3
 80043c8:	00db      	lsls	r3, r3, #3
 80043ca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80043ce:	4b36      	ldr	r3, [pc, #216]	; (80044a8 <UART_SetConfig+0x2d4>)
 80043d0:	fba3 2302 	umull	r2, r3, r3, r2
 80043d4:	095b      	lsrs	r3, r3, #5
 80043d6:	005b      	lsls	r3, r3, #1
 80043d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80043dc:	441c      	add	r4, r3
 80043de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043e2:	2200      	movs	r2, #0
 80043e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80043e8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80043ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80043f0:	4642      	mov	r2, r8
 80043f2:	464b      	mov	r3, r9
 80043f4:	1891      	adds	r1, r2, r2
 80043f6:	63b9      	str	r1, [r7, #56]	; 0x38
 80043f8:	415b      	adcs	r3, r3
 80043fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004400:	4641      	mov	r1, r8
 8004402:	1851      	adds	r1, r2, r1
 8004404:	6339      	str	r1, [r7, #48]	; 0x30
 8004406:	4649      	mov	r1, r9
 8004408:	414b      	adcs	r3, r1
 800440a:	637b      	str	r3, [r7, #52]	; 0x34
 800440c:	f04f 0200 	mov.w	r2, #0
 8004410:	f04f 0300 	mov.w	r3, #0
 8004414:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004418:	4659      	mov	r1, fp
 800441a:	00cb      	lsls	r3, r1, #3
 800441c:	4651      	mov	r1, sl
 800441e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004422:	4651      	mov	r1, sl
 8004424:	00ca      	lsls	r2, r1, #3
 8004426:	4610      	mov	r0, r2
 8004428:	4619      	mov	r1, r3
 800442a:	4603      	mov	r3, r0
 800442c:	4642      	mov	r2, r8
 800442e:	189b      	adds	r3, r3, r2
 8004430:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004434:	464b      	mov	r3, r9
 8004436:	460a      	mov	r2, r1
 8004438:	eb42 0303 	adc.w	r3, r2, r3
 800443c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800444c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004450:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004454:	460b      	mov	r3, r1
 8004456:	18db      	adds	r3, r3, r3
 8004458:	62bb      	str	r3, [r7, #40]	; 0x28
 800445a:	4613      	mov	r3, r2
 800445c:	eb42 0303 	adc.w	r3, r2, r3
 8004460:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004462:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004466:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800446a:	f7fb ff09 	bl	8000280 <__aeabi_uldivmod>
 800446e:	4602      	mov	r2, r0
 8004470:	460b      	mov	r3, r1
 8004472:	4b0d      	ldr	r3, [pc, #52]	; (80044a8 <UART_SetConfig+0x2d4>)
 8004474:	fba3 1302 	umull	r1, r3, r3, r2
 8004478:	095b      	lsrs	r3, r3, #5
 800447a:	2164      	movs	r1, #100	; 0x64
 800447c:	fb01 f303 	mul.w	r3, r1, r3
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	00db      	lsls	r3, r3, #3
 8004484:	3332      	adds	r3, #50	; 0x32
 8004486:	4a08      	ldr	r2, [pc, #32]	; (80044a8 <UART_SetConfig+0x2d4>)
 8004488:	fba2 2303 	umull	r2, r3, r2, r3
 800448c:	095b      	lsrs	r3, r3, #5
 800448e:	f003 0207 	and.w	r2, r3, #7
 8004492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4422      	add	r2, r4
 800449a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800449c:	e105      	b.n	80046aa <UART_SetConfig+0x4d6>
 800449e:	bf00      	nop
 80044a0:	40011000 	.word	0x40011000
 80044a4:	40011400 	.word	0x40011400
 80044a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044b0:	2200      	movs	r2, #0
 80044b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80044b6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80044ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80044be:	4642      	mov	r2, r8
 80044c0:	464b      	mov	r3, r9
 80044c2:	1891      	adds	r1, r2, r2
 80044c4:	6239      	str	r1, [r7, #32]
 80044c6:	415b      	adcs	r3, r3
 80044c8:	627b      	str	r3, [r7, #36]	; 0x24
 80044ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80044ce:	4641      	mov	r1, r8
 80044d0:	1854      	adds	r4, r2, r1
 80044d2:	4649      	mov	r1, r9
 80044d4:	eb43 0501 	adc.w	r5, r3, r1
 80044d8:	f04f 0200 	mov.w	r2, #0
 80044dc:	f04f 0300 	mov.w	r3, #0
 80044e0:	00eb      	lsls	r3, r5, #3
 80044e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044e6:	00e2      	lsls	r2, r4, #3
 80044e8:	4614      	mov	r4, r2
 80044ea:	461d      	mov	r5, r3
 80044ec:	4643      	mov	r3, r8
 80044ee:	18e3      	adds	r3, r4, r3
 80044f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80044f4:	464b      	mov	r3, r9
 80044f6:	eb45 0303 	adc.w	r3, r5, r3
 80044fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80044fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800450a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800450e:	f04f 0200 	mov.w	r2, #0
 8004512:	f04f 0300 	mov.w	r3, #0
 8004516:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800451a:	4629      	mov	r1, r5
 800451c:	008b      	lsls	r3, r1, #2
 800451e:	4621      	mov	r1, r4
 8004520:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004524:	4621      	mov	r1, r4
 8004526:	008a      	lsls	r2, r1, #2
 8004528:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800452c:	f7fb fea8 	bl	8000280 <__aeabi_uldivmod>
 8004530:	4602      	mov	r2, r0
 8004532:	460b      	mov	r3, r1
 8004534:	4b60      	ldr	r3, [pc, #384]	; (80046b8 <UART_SetConfig+0x4e4>)
 8004536:	fba3 2302 	umull	r2, r3, r3, r2
 800453a:	095b      	lsrs	r3, r3, #5
 800453c:	011c      	lsls	r4, r3, #4
 800453e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004542:	2200      	movs	r2, #0
 8004544:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004548:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800454c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004550:	4642      	mov	r2, r8
 8004552:	464b      	mov	r3, r9
 8004554:	1891      	adds	r1, r2, r2
 8004556:	61b9      	str	r1, [r7, #24]
 8004558:	415b      	adcs	r3, r3
 800455a:	61fb      	str	r3, [r7, #28]
 800455c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004560:	4641      	mov	r1, r8
 8004562:	1851      	adds	r1, r2, r1
 8004564:	6139      	str	r1, [r7, #16]
 8004566:	4649      	mov	r1, r9
 8004568:	414b      	adcs	r3, r1
 800456a:	617b      	str	r3, [r7, #20]
 800456c:	f04f 0200 	mov.w	r2, #0
 8004570:	f04f 0300 	mov.w	r3, #0
 8004574:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004578:	4659      	mov	r1, fp
 800457a:	00cb      	lsls	r3, r1, #3
 800457c:	4651      	mov	r1, sl
 800457e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004582:	4651      	mov	r1, sl
 8004584:	00ca      	lsls	r2, r1, #3
 8004586:	4610      	mov	r0, r2
 8004588:	4619      	mov	r1, r3
 800458a:	4603      	mov	r3, r0
 800458c:	4642      	mov	r2, r8
 800458e:	189b      	adds	r3, r3, r2
 8004590:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004594:	464b      	mov	r3, r9
 8004596:	460a      	mov	r2, r1
 8004598:	eb42 0303 	adc.w	r3, r2, r3
 800459c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80045a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	67bb      	str	r3, [r7, #120]	; 0x78
 80045aa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80045ac:	f04f 0200 	mov.w	r2, #0
 80045b0:	f04f 0300 	mov.w	r3, #0
 80045b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80045b8:	4649      	mov	r1, r9
 80045ba:	008b      	lsls	r3, r1, #2
 80045bc:	4641      	mov	r1, r8
 80045be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045c2:	4641      	mov	r1, r8
 80045c4:	008a      	lsls	r2, r1, #2
 80045c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80045ca:	f7fb fe59 	bl	8000280 <__aeabi_uldivmod>
 80045ce:	4602      	mov	r2, r0
 80045d0:	460b      	mov	r3, r1
 80045d2:	4b39      	ldr	r3, [pc, #228]	; (80046b8 <UART_SetConfig+0x4e4>)
 80045d4:	fba3 1302 	umull	r1, r3, r3, r2
 80045d8:	095b      	lsrs	r3, r3, #5
 80045da:	2164      	movs	r1, #100	; 0x64
 80045dc:	fb01 f303 	mul.w	r3, r1, r3
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	011b      	lsls	r3, r3, #4
 80045e4:	3332      	adds	r3, #50	; 0x32
 80045e6:	4a34      	ldr	r2, [pc, #208]	; (80046b8 <UART_SetConfig+0x4e4>)
 80045e8:	fba2 2303 	umull	r2, r3, r2, r3
 80045ec:	095b      	lsrs	r3, r3, #5
 80045ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045f2:	441c      	add	r4, r3
 80045f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045f8:	2200      	movs	r2, #0
 80045fa:	673b      	str	r3, [r7, #112]	; 0x70
 80045fc:	677a      	str	r2, [r7, #116]	; 0x74
 80045fe:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004602:	4642      	mov	r2, r8
 8004604:	464b      	mov	r3, r9
 8004606:	1891      	adds	r1, r2, r2
 8004608:	60b9      	str	r1, [r7, #8]
 800460a:	415b      	adcs	r3, r3
 800460c:	60fb      	str	r3, [r7, #12]
 800460e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004612:	4641      	mov	r1, r8
 8004614:	1851      	adds	r1, r2, r1
 8004616:	6039      	str	r1, [r7, #0]
 8004618:	4649      	mov	r1, r9
 800461a:	414b      	adcs	r3, r1
 800461c:	607b      	str	r3, [r7, #4]
 800461e:	f04f 0200 	mov.w	r2, #0
 8004622:	f04f 0300 	mov.w	r3, #0
 8004626:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800462a:	4659      	mov	r1, fp
 800462c:	00cb      	lsls	r3, r1, #3
 800462e:	4651      	mov	r1, sl
 8004630:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004634:	4651      	mov	r1, sl
 8004636:	00ca      	lsls	r2, r1, #3
 8004638:	4610      	mov	r0, r2
 800463a:	4619      	mov	r1, r3
 800463c:	4603      	mov	r3, r0
 800463e:	4642      	mov	r2, r8
 8004640:	189b      	adds	r3, r3, r2
 8004642:	66bb      	str	r3, [r7, #104]	; 0x68
 8004644:	464b      	mov	r3, r9
 8004646:	460a      	mov	r2, r1
 8004648:	eb42 0303 	adc.w	r3, r2, r3
 800464c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800464e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	663b      	str	r3, [r7, #96]	; 0x60
 8004658:	667a      	str	r2, [r7, #100]	; 0x64
 800465a:	f04f 0200 	mov.w	r2, #0
 800465e:	f04f 0300 	mov.w	r3, #0
 8004662:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004666:	4649      	mov	r1, r9
 8004668:	008b      	lsls	r3, r1, #2
 800466a:	4641      	mov	r1, r8
 800466c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004670:	4641      	mov	r1, r8
 8004672:	008a      	lsls	r2, r1, #2
 8004674:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004678:	f7fb fe02 	bl	8000280 <__aeabi_uldivmod>
 800467c:	4602      	mov	r2, r0
 800467e:	460b      	mov	r3, r1
 8004680:	4b0d      	ldr	r3, [pc, #52]	; (80046b8 <UART_SetConfig+0x4e4>)
 8004682:	fba3 1302 	umull	r1, r3, r3, r2
 8004686:	095b      	lsrs	r3, r3, #5
 8004688:	2164      	movs	r1, #100	; 0x64
 800468a:	fb01 f303 	mul.w	r3, r1, r3
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	011b      	lsls	r3, r3, #4
 8004692:	3332      	adds	r3, #50	; 0x32
 8004694:	4a08      	ldr	r2, [pc, #32]	; (80046b8 <UART_SetConfig+0x4e4>)
 8004696:	fba2 2303 	umull	r2, r3, r2, r3
 800469a:	095b      	lsrs	r3, r3, #5
 800469c:	f003 020f 	and.w	r2, r3, #15
 80046a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4422      	add	r2, r4
 80046a8:	609a      	str	r2, [r3, #8]
}
 80046aa:	bf00      	nop
 80046ac:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80046b0:	46bd      	mov	sp, r7
 80046b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046b6:	bf00      	nop
 80046b8:	51eb851f 	.word	0x51eb851f

080046bc <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 80046bc:	b480      	push	{r7}
 80046be:	b087      	sub	sp, #28
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046d0:	683a      	ldr	r2, [r7, #0]
 80046d2:	6812      	ldr	r2, [r2, #0]
 80046d4:	f023 0101 	bic.w	r1, r3, #1
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	2b08      	cmp	r3, #8
 80046e4:	d102      	bne.n	80046ec <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80046e6:	2340      	movs	r3, #64	; 0x40
 80046e8:	617b      	str	r3, [r7, #20]
 80046ea:	e001      	b.n	80046f0 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80046ec:	2300      	movs	r3, #0
 80046ee:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80046fc:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8004702:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8004708:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800470e:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8004714:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 800471a:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8004720:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8004726:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 800472c:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8004732:	4313      	orrs	r3, r2
 8004734:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	699b      	ldr	r3, [r3, #24]
 800473a:	693a      	ldr	r2, [r7, #16]
 800473c:	4313      	orrs	r3, r2
 800473e:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004744:	693a      	ldr	r2, [r7, #16]
 8004746:	4313      	orrs	r3, r2
 8004748:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 800474a:	4b10      	ldr	r3, [pc, #64]	; (800478c <FSMC_NORSRAM_Init+0xd0>)
 800474c:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004754:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800475c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	43db      	mvns	r3, r3
 800476c:	ea02 0103 	and.w	r1, r2, r3
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	4319      	orrs	r1, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 800477e:	2300      	movs	r3, #0
}
 8004780:	4618      	mov	r0, r3
 8004782:	371c      	adds	r7, #28
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr
 800478c:	0008fb7f 	.word	0x0008fb7f

08004790 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8004790:	b480      	push	{r7}
 8004792:	b085      	sub	sp, #20
 8004794:	af00      	add	r7, sp, #0
 8004796:	60f8      	str	r0, [r7, #12]
 8004798:	60b9      	str	r1, [r7, #8]
 800479a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	1c5a      	adds	r2, r3, #1
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047a6:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	011b      	lsls	r3, r3, #4
 80047b4:	431a      	orrs	r2, r3
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	021b      	lsls	r3, r3, #8
 80047bc:	431a      	orrs	r2, r3
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	041b      	lsls	r3, r3, #16
 80047c4:	431a      	orrs	r2, r3
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	691b      	ldr	r3, [r3, #16]
 80047ca:	3b01      	subs	r3, #1
 80047cc:	051b      	lsls	r3, r3, #20
 80047ce:	431a      	orrs	r2, r3
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	695b      	ldr	r3, [r3, #20]
 80047d4:	3b02      	subs	r3, #2
 80047d6:	061b      	lsls	r3, r3, #24
 80047d8:	431a      	orrs	r2, r3
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	699b      	ldr	r3, [r3, #24]
 80047de:	4313      	orrs	r3, r2
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	3201      	adds	r2, #1
 80047e4:	4319      	orrs	r1, r3
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 80047ec:	2300      	movs	r3, #0
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3714      	adds	r7, #20
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr
	...

080047fc <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b085      	sub	sp, #20
 8004800:	af00      	add	r7, sp, #0
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	60b9      	str	r1, [r7, #8]
 8004806:	607a      	str	r2, [r7, #4]
 8004808:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004810:	d11d      	bne.n	800484e <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800481a:	4b13      	ldr	r3, [pc, #76]	; (8004868 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800481c:	4013      	ands	r3, r2
 800481e:	68ba      	ldr	r2, [r7, #8]
 8004820:	6811      	ldr	r1, [r2, #0]
 8004822:	68ba      	ldr	r2, [r7, #8]
 8004824:	6852      	ldr	r2, [r2, #4]
 8004826:	0112      	lsls	r2, r2, #4
 8004828:	4311      	orrs	r1, r2
 800482a:	68ba      	ldr	r2, [r7, #8]
 800482c:	6892      	ldr	r2, [r2, #8]
 800482e:	0212      	lsls	r2, r2, #8
 8004830:	4311      	orrs	r1, r2
 8004832:	68ba      	ldr	r2, [r7, #8]
 8004834:	6992      	ldr	r2, [r2, #24]
 8004836:	4311      	orrs	r1, r2
 8004838:	68ba      	ldr	r2, [r7, #8]
 800483a:	68d2      	ldr	r2, [r2, #12]
 800483c:	0412      	lsls	r2, r2, #16
 800483e:	430a      	orrs	r2, r1
 8004840:	ea43 0102 	orr.w	r1, r3, r2
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800484c:	e005      	b.n	800485a <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8004856:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800485a:	2300      	movs	r3, #0
}
 800485c:	4618      	mov	r0, r3
 800485e:	3714      	adds	r7, #20
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr
 8004868:	cff00000 	.word	0xcff00000

0800486c <__errno>:
 800486c:	4b01      	ldr	r3, [pc, #4]	; (8004874 <__errno+0x8>)
 800486e:	6818      	ldr	r0, [r3, #0]
 8004870:	4770      	bx	lr
 8004872:	bf00      	nop
 8004874:	20000014 	.word	0x20000014

08004878 <__libc_init_array>:
 8004878:	b570      	push	{r4, r5, r6, lr}
 800487a:	4d0d      	ldr	r5, [pc, #52]	; (80048b0 <__libc_init_array+0x38>)
 800487c:	4c0d      	ldr	r4, [pc, #52]	; (80048b4 <__libc_init_array+0x3c>)
 800487e:	1b64      	subs	r4, r4, r5
 8004880:	10a4      	asrs	r4, r4, #2
 8004882:	2600      	movs	r6, #0
 8004884:	42a6      	cmp	r6, r4
 8004886:	d109      	bne.n	800489c <__libc_init_array+0x24>
 8004888:	4d0b      	ldr	r5, [pc, #44]	; (80048b8 <__libc_init_array+0x40>)
 800488a:	4c0c      	ldr	r4, [pc, #48]	; (80048bc <__libc_init_array+0x44>)
 800488c:	f001 fa00 	bl	8005c90 <_init>
 8004890:	1b64      	subs	r4, r4, r5
 8004892:	10a4      	asrs	r4, r4, #2
 8004894:	2600      	movs	r6, #0
 8004896:	42a6      	cmp	r6, r4
 8004898:	d105      	bne.n	80048a6 <__libc_init_array+0x2e>
 800489a:	bd70      	pop	{r4, r5, r6, pc}
 800489c:	f855 3b04 	ldr.w	r3, [r5], #4
 80048a0:	4798      	blx	r3
 80048a2:	3601      	adds	r6, #1
 80048a4:	e7ee      	b.n	8004884 <__libc_init_array+0xc>
 80048a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80048aa:	4798      	blx	r3
 80048ac:	3601      	adds	r6, #1
 80048ae:	e7f2      	b.n	8004896 <__libc_init_array+0x1e>
 80048b0:	08005f98 	.word	0x08005f98
 80048b4:	08005f98 	.word	0x08005f98
 80048b8:	08005f98 	.word	0x08005f98
 80048bc:	08005f9c 	.word	0x08005f9c

080048c0 <memset>:
 80048c0:	4402      	add	r2, r0
 80048c2:	4603      	mov	r3, r0
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d100      	bne.n	80048ca <memset+0xa>
 80048c8:	4770      	bx	lr
 80048ca:	f803 1b01 	strb.w	r1, [r3], #1
 80048ce:	e7f9      	b.n	80048c4 <memset+0x4>

080048d0 <iprintf>:
 80048d0:	b40f      	push	{r0, r1, r2, r3}
 80048d2:	4b0a      	ldr	r3, [pc, #40]	; (80048fc <iprintf+0x2c>)
 80048d4:	b513      	push	{r0, r1, r4, lr}
 80048d6:	681c      	ldr	r4, [r3, #0]
 80048d8:	b124      	cbz	r4, 80048e4 <iprintf+0x14>
 80048da:	69a3      	ldr	r3, [r4, #24]
 80048dc:	b913      	cbnz	r3, 80048e4 <iprintf+0x14>
 80048de:	4620      	mov	r0, r4
 80048e0:	f000 fa7e 	bl	8004de0 <__sinit>
 80048e4:	ab05      	add	r3, sp, #20
 80048e6:	9a04      	ldr	r2, [sp, #16]
 80048e8:	68a1      	ldr	r1, [r4, #8]
 80048ea:	9301      	str	r3, [sp, #4]
 80048ec:	4620      	mov	r0, r4
 80048ee:	f000 fde3 	bl	80054b8 <_vfiprintf_r>
 80048f2:	b002      	add	sp, #8
 80048f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048f8:	b004      	add	sp, #16
 80048fa:	4770      	bx	lr
 80048fc:	20000014 	.word	0x20000014

08004900 <_puts_r>:
 8004900:	b570      	push	{r4, r5, r6, lr}
 8004902:	460e      	mov	r6, r1
 8004904:	4605      	mov	r5, r0
 8004906:	b118      	cbz	r0, 8004910 <_puts_r+0x10>
 8004908:	6983      	ldr	r3, [r0, #24]
 800490a:	b90b      	cbnz	r3, 8004910 <_puts_r+0x10>
 800490c:	f000 fa68 	bl	8004de0 <__sinit>
 8004910:	69ab      	ldr	r3, [r5, #24]
 8004912:	68ac      	ldr	r4, [r5, #8]
 8004914:	b913      	cbnz	r3, 800491c <_puts_r+0x1c>
 8004916:	4628      	mov	r0, r5
 8004918:	f000 fa62 	bl	8004de0 <__sinit>
 800491c:	4b2c      	ldr	r3, [pc, #176]	; (80049d0 <_puts_r+0xd0>)
 800491e:	429c      	cmp	r4, r3
 8004920:	d120      	bne.n	8004964 <_puts_r+0x64>
 8004922:	686c      	ldr	r4, [r5, #4]
 8004924:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004926:	07db      	lsls	r3, r3, #31
 8004928:	d405      	bmi.n	8004936 <_puts_r+0x36>
 800492a:	89a3      	ldrh	r3, [r4, #12]
 800492c:	0598      	lsls	r0, r3, #22
 800492e:	d402      	bmi.n	8004936 <_puts_r+0x36>
 8004930:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004932:	f000 faf3 	bl	8004f1c <__retarget_lock_acquire_recursive>
 8004936:	89a3      	ldrh	r3, [r4, #12]
 8004938:	0719      	lsls	r1, r3, #28
 800493a:	d51d      	bpl.n	8004978 <_puts_r+0x78>
 800493c:	6923      	ldr	r3, [r4, #16]
 800493e:	b1db      	cbz	r3, 8004978 <_puts_r+0x78>
 8004940:	3e01      	subs	r6, #1
 8004942:	68a3      	ldr	r3, [r4, #8]
 8004944:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004948:	3b01      	subs	r3, #1
 800494a:	60a3      	str	r3, [r4, #8]
 800494c:	bb39      	cbnz	r1, 800499e <_puts_r+0x9e>
 800494e:	2b00      	cmp	r3, #0
 8004950:	da38      	bge.n	80049c4 <_puts_r+0xc4>
 8004952:	4622      	mov	r2, r4
 8004954:	210a      	movs	r1, #10
 8004956:	4628      	mov	r0, r5
 8004958:	f000 f868 	bl	8004a2c <__swbuf_r>
 800495c:	3001      	adds	r0, #1
 800495e:	d011      	beq.n	8004984 <_puts_r+0x84>
 8004960:	250a      	movs	r5, #10
 8004962:	e011      	b.n	8004988 <_puts_r+0x88>
 8004964:	4b1b      	ldr	r3, [pc, #108]	; (80049d4 <_puts_r+0xd4>)
 8004966:	429c      	cmp	r4, r3
 8004968:	d101      	bne.n	800496e <_puts_r+0x6e>
 800496a:	68ac      	ldr	r4, [r5, #8]
 800496c:	e7da      	b.n	8004924 <_puts_r+0x24>
 800496e:	4b1a      	ldr	r3, [pc, #104]	; (80049d8 <_puts_r+0xd8>)
 8004970:	429c      	cmp	r4, r3
 8004972:	bf08      	it	eq
 8004974:	68ec      	ldreq	r4, [r5, #12]
 8004976:	e7d5      	b.n	8004924 <_puts_r+0x24>
 8004978:	4621      	mov	r1, r4
 800497a:	4628      	mov	r0, r5
 800497c:	f000 f8a8 	bl	8004ad0 <__swsetup_r>
 8004980:	2800      	cmp	r0, #0
 8004982:	d0dd      	beq.n	8004940 <_puts_r+0x40>
 8004984:	f04f 35ff 	mov.w	r5, #4294967295
 8004988:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800498a:	07da      	lsls	r2, r3, #31
 800498c:	d405      	bmi.n	800499a <_puts_r+0x9a>
 800498e:	89a3      	ldrh	r3, [r4, #12]
 8004990:	059b      	lsls	r3, r3, #22
 8004992:	d402      	bmi.n	800499a <_puts_r+0x9a>
 8004994:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004996:	f000 fac2 	bl	8004f1e <__retarget_lock_release_recursive>
 800499a:	4628      	mov	r0, r5
 800499c:	bd70      	pop	{r4, r5, r6, pc}
 800499e:	2b00      	cmp	r3, #0
 80049a0:	da04      	bge.n	80049ac <_puts_r+0xac>
 80049a2:	69a2      	ldr	r2, [r4, #24]
 80049a4:	429a      	cmp	r2, r3
 80049a6:	dc06      	bgt.n	80049b6 <_puts_r+0xb6>
 80049a8:	290a      	cmp	r1, #10
 80049aa:	d004      	beq.n	80049b6 <_puts_r+0xb6>
 80049ac:	6823      	ldr	r3, [r4, #0]
 80049ae:	1c5a      	adds	r2, r3, #1
 80049b0:	6022      	str	r2, [r4, #0]
 80049b2:	7019      	strb	r1, [r3, #0]
 80049b4:	e7c5      	b.n	8004942 <_puts_r+0x42>
 80049b6:	4622      	mov	r2, r4
 80049b8:	4628      	mov	r0, r5
 80049ba:	f000 f837 	bl	8004a2c <__swbuf_r>
 80049be:	3001      	adds	r0, #1
 80049c0:	d1bf      	bne.n	8004942 <_puts_r+0x42>
 80049c2:	e7df      	b.n	8004984 <_puts_r+0x84>
 80049c4:	6823      	ldr	r3, [r4, #0]
 80049c6:	250a      	movs	r5, #10
 80049c8:	1c5a      	adds	r2, r3, #1
 80049ca:	6022      	str	r2, [r4, #0]
 80049cc:	701d      	strb	r5, [r3, #0]
 80049ce:	e7db      	b.n	8004988 <_puts_r+0x88>
 80049d0:	08005f1c 	.word	0x08005f1c
 80049d4:	08005f3c 	.word	0x08005f3c
 80049d8:	08005efc 	.word	0x08005efc

080049dc <puts>:
 80049dc:	4b02      	ldr	r3, [pc, #8]	; (80049e8 <puts+0xc>)
 80049de:	4601      	mov	r1, r0
 80049e0:	6818      	ldr	r0, [r3, #0]
 80049e2:	f7ff bf8d 	b.w	8004900 <_puts_r>
 80049e6:	bf00      	nop
 80049e8:	20000014 	.word	0x20000014

080049ec <siprintf>:
 80049ec:	b40e      	push	{r1, r2, r3}
 80049ee:	b500      	push	{lr}
 80049f0:	b09c      	sub	sp, #112	; 0x70
 80049f2:	ab1d      	add	r3, sp, #116	; 0x74
 80049f4:	9002      	str	r0, [sp, #8]
 80049f6:	9006      	str	r0, [sp, #24]
 80049f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80049fc:	4809      	ldr	r0, [pc, #36]	; (8004a24 <siprintf+0x38>)
 80049fe:	9107      	str	r1, [sp, #28]
 8004a00:	9104      	str	r1, [sp, #16]
 8004a02:	4909      	ldr	r1, [pc, #36]	; (8004a28 <siprintf+0x3c>)
 8004a04:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a08:	9105      	str	r1, [sp, #20]
 8004a0a:	6800      	ldr	r0, [r0, #0]
 8004a0c:	9301      	str	r3, [sp, #4]
 8004a0e:	a902      	add	r1, sp, #8
 8004a10:	f000 fc28 	bl	8005264 <_svfiprintf_r>
 8004a14:	9b02      	ldr	r3, [sp, #8]
 8004a16:	2200      	movs	r2, #0
 8004a18:	701a      	strb	r2, [r3, #0]
 8004a1a:	b01c      	add	sp, #112	; 0x70
 8004a1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a20:	b003      	add	sp, #12
 8004a22:	4770      	bx	lr
 8004a24:	20000014 	.word	0x20000014
 8004a28:	ffff0208 	.word	0xffff0208

08004a2c <__swbuf_r>:
 8004a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a2e:	460e      	mov	r6, r1
 8004a30:	4614      	mov	r4, r2
 8004a32:	4605      	mov	r5, r0
 8004a34:	b118      	cbz	r0, 8004a3e <__swbuf_r+0x12>
 8004a36:	6983      	ldr	r3, [r0, #24]
 8004a38:	b90b      	cbnz	r3, 8004a3e <__swbuf_r+0x12>
 8004a3a:	f000 f9d1 	bl	8004de0 <__sinit>
 8004a3e:	4b21      	ldr	r3, [pc, #132]	; (8004ac4 <__swbuf_r+0x98>)
 8004a40:	429c      	cmp	r4, r3
 8004a42:	d12b      	bne.n	8004a9c <__swbuf_r+0x70>
 8004a44:	686c      	ldr	r4, [r5, #4]
 8004a46:	69a3      	ldr	r3, [r4, #24]
 8004a48:	60a3      	str	r3, [r4, #8]
 8004a4a:	89a3      	ldrh	r3, [r4, #12]
 8004a4c:	071a      	lsls	r2, r3, #28
 8004a4e:	d52f      	bpl.n	8004ab0 <__swbuf_r+0x84>
 8004a50:	6923      	ldr	r3, [r4, #16]
 8004a52:	b36b      	cbz	r3, 8004ab0 <__swbuf_r+0x84>
 8004a54:	6923      	ldr	r3, [r4, #16]
 8004a56:	6820      	ldr	r0, [r4, #0]
 8004a58:	1ac0      	subs	r0, r0, r3
 8004a5a:	6963      	ldr	r3, [r4, #20]
 8004a5c:	b2f6      	uxtb	r6, r6
 8004a5e:	4283      	cmp	r3, r0
 8004a60:	4637      	mov	r7, r6
 8004a62:	dc04      	bgt.n	8004a6e <__swbuf_r+0x42>
 8004a64:	4621      	mov	r1, r4
 8004a66:	4628      	mov	r0, r5
 8004a68:	f000 f926 	bl	8004cb8 <_fflush_r>
 8004a6c:	bb30      	cbnz	r0, 8004abc <__swbuf_r+0x90>
 8004a6e:	68a3      	ldr	r3, [r4, #8]
 8004a70:	3b01      	subs	r3, #1
 8004a72:	60a3      	str	r3, [r4, #8]
 8004a74:	6823      	ldr	r3, [r4, #0]
 8004a76:	1c5a      	adds	r2, r3, #1
 8004a78:	6022      	str	r2, [r4, #0]
 8004a7a:	701e      	strb	r6, [r3, #0]
 8004a7c:	6963      	ldr	r3, [r4, #20]
 8004a7e:	3001      	adds	r0, #1
 8004a80:	4283      	cmp	r3, r0
 8004a82:	d004      	beq.n	8004a8e <__swbuf_r+0x62>
 8004a84:	89a3      	ldrh	r3, [r4, #12]
 8004a86:	07db      	lsls	r3, r3, #31
 8004a88:	d506      	bpl.n	8004a98 <__swbuf_r+0x6c>
 8004a8a:	2e0a      	cmp	r6, #10
 8004a8c:	d104      	bne.n	8004a98 <__swbuf_r+0x6c>
 8004a8e:	4621      	mov	r1, r4
 8004a90:	4628      	mov	r0, r5
 8004a92:	f000 f911 	bl	8004cb8 <_fflush_r>
 8004a96:	b988      	cbnz	r0, 8004abc <__swbuf_r+0x90>
 8004a98:	4638      	mov	r0, r7
 8004a9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a9c:	4b0a      	ldr	r3, [pc, #40]	; (8004ac8 <__swbuf_r+0x9c>)
 8004a9e:	429c      	cmp	r4, r3
 8004aa0:	d101      	bne.n	8004aa6 <__swbuf_r+0x7a>
 8004aa2:	68ac      	ldr	r4, [r5, #8]
 8004aa4:	e7cf      	b.n	8004a46 <__swbuf_r+0x1a>
 8004aa6:	4b09      	ldr	r3, [pc, #36]	; (8004acc <__swbuf_r+0xa0>)
 8004aa8:	429c      	cmp	r4, r3
 8004aaa:	bf08      	it	eq
 8004aac:	68ec      	ldreq	r4, [r5, #12]
 8004aae:	e7ca      	b.n	8004a46 <__swbuf_r+0x1a>
 8004ab0:	4621      	mov	r1, r4
 8004ab2:	4628      	mov	r0, r5
 8004ab4:	f000 f80c 	bl	8004ad0 <__swsetup_r>
 8004ab8:	2800      	cmp	r0, #0
 8004aba:	d0cb      	beq.n	8004a54 <__swbuf_r+0x28>
 8004abc:	f04f 37ff 	mov.w	r7, #4294967295
 8004ac0:	e7ea      	b.n	8004a98 <__swbuf_r+0x6c>
 8004ac2:	bf00      	nop
 8004ac4:	08005f1c 	.word	0x08005f1c
 8004ac8:	08005f3c 	.word	0x08005f3c
 8004acc:	08005efc 	.word	0x08005efc

08004ad0 <__swsetup_r>:
 8004ad0:	4b32      	ldr	r3, [pc, #200]	; (8004b9c <__swsetup_r+0xcc>)
 8004ad2:	b570      	push	{r4, r5, r6, lr}
 8004ad4:	681d      	ldr	r5, [r3, #0]
 8004ad6:	4606      	mov	r6, r0
 8004ad8:	460c      	mov	r4, r1
 8004ada:	b125      	cbz	r5, 8004ae6 <__swsetup_r+0x16>
 8004adc:	69ab      	ldr	r3, [r5, #24]
 8004ade:	b913      	cbnz	r3, 8004ae6 <__swsetup_r+0x16>
 8004ae0:	4628      	mov	r0, r5
 8004ae2:	f000 f97d 	bl	8004de0 <__sinit>
 8004ae6:	4b2e      	ldr	r3, [pc, #184]	; (8004ba0 <__swsetup_r+0xd0>)
 8004ae8:	429c      	cmp	r4, r3
 8004aea:	d10f      	bne.n	8004b0c <__swsetup_r+0x3c>
 8004aec:	686c      	ldr	r4, [r5, #4]
 8004aee:	89a3      	ldrh	r3, [r4, #12]
 8004af0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004af4:	0719      	lsls	r1, r3, #28
 8004af6:	d42c      	bmi.n	8004b52 <__swsetup_r+0x82>
 8004af8:	06dd      	lsls	r5, r3, #27
 8004afa:	d411      	bmi.n	8004b20 <__swsetup_r+0x50>
 8004afc:	2309      	movs	r3, #9
 8004afe:	6033      	str	r3, [r6, #0]
 8004b00:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004b04:	81a3      	strh	r3, [r4, #12]
 8004b06:	f04f 30ff 	mov.w	r0, #4294967295
 8004b0a:	e03e      	b.n	8004b8a <__swsetup_r+0xba>
 8004b0c:	4b25      	ldr	r3, [pc, #148]	; (8004ba4 <__swsetup_r+0xd4>)
 8004b0e:	429c      	cmp	r4, r3
 8004b10:	d101      	bne.n	8004b16 <__swsetup_r+0x46>
 8004b12:	68ac      	ldr	r4, [r5, #8]
 8004b14:	e7eb      	b.n	8004aee <__swsetup_r+0x1e>
 8004b16:	4b24      	ldr	r3, [pc, #144]	; (8004ba8 <__swsetup_r+0xd8>)
 8004b18:	429c      	cmp	r4, r3
 8004b1a:	bf08      	it	eq
 8004b1c:	68ec      	ldreq	r4, [r5, #12]
 8004b1e:	e7e6      	b.n	8004aee <__swsetup_r+0x1e>
 8004b20:	0758      	lsls	r0, r3, #29
 8004b22:	d512      	bpl.n	8004b4a <__swsetup_r+0x7a>
 8004b24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b26:	b141      	cbz	r1, 8004b3a <__swsetup_r+0x6a>
 8004b28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004b2c:	4299      	cmp	r1, r3
 8004b2e:	d002      	beq.n	8004b36 <__swsetup_r+0x66>
 8004b30:	4630      	mov	r0, r6
 8004b32:	f000 fa5b 	bl	8004fec <_free_r>
 8004b36:	2300      	movs	r3, #0
 8004b38:	6363      	str	r3, [r4, #52]	; 0x34
 8004b3a:	89a3      	ldrh	r3, [r4, #12]
 8004b3c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004b40:	81a3      	strh	r3, [r4, #12]
 8004b42:	2300      	movs	r3, #0
 8004b44:	6063      	str	r3, [r4, #4]
 8004b46:	6923      	ldr	r3, [r4, #16]
 8004b48:	6023      	str	r3, [r4, #0]
 8004b4a:	89a3      	ldrh	r3, [r4, #12]
 8004b4c:	f043 0308 	orr.w	r3, r3, #8
 8004b50:	81a3      	strh	r3, [r4, #12]
 8004b52:	6923      	ldr	r3, [r4, #16]
 8004b54:	b94b      	cbnz	r3, 8004b6a <__swsetup_r+0x9a>
 8004b56:	89a3      	ldrh	r3, [r4, #12]
 8004b58:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004b5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b60:	d003      	beq.n	8004b6a <__swsetup_r+0x9a>
 8004b62:	4621      	mov	r1, r4
 8004b64:	4630      	mov	r0, r6
 8004b66:	f000 fa01 	bl	8004f6c <__smakebuf_r>
 8004b6a:	89a0      	ldrh	r0, [r4, #12]
 8004b6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004b70:	f010 0301 	ands.w	r3, r0, #1
 8004b74:	d00a      	beq.n	8004b8c <__swsetup_r+0xbc>
 8004b76:	2300      	movs	r3, #0
 8004b78:	60a3      	str	r3, [r4, #8]
 8004b7a:	6963      	ldr	r3, [r4, #20]
 8004b7c:	425b      	negs	r3, r3
 8004b7e:	61a3      	str	r3, [r4, #24]
 8004b80:	6923      	ldr	r3, [r4, #16]
 8004b82:	b943      	cbnz	r3, 8004b96 <__swsetup_r+0xc6>
 8004b84:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004b88:	d1ba      	bne.n	8004b00 <__swsetup_r+0x30>
 8004b8a:	bd70      	pop	{r4, r5, r6, pc}
 8004b8c:	0781      	lsls	r1, r0, #30
 8004b8e:	bf58      	it	pl
 8004b90:	6963      	ldrpl	r3, [r4, #20]
 8004b92:	60a3      	str	r3, [r4, #8]
 8004b94:	e7f4      	b.n	8004b80 <__swsetup_r+0xb0>
 8004b96:	2000      	movs	r0, #0
 8004b98:	e7f7      	b.n	8004b8a <__swsetup_r+0xba>
 8004b9a:	bf00      	nop
 8004b9c:	20000014 	.word	0x20000014
 8004ba0:	08005f1c 	.word	0x08005f1c
 8004ba4:	08005f3c 	.word	0x08005f3c
 8004ba8:	08005efc 	.word	0x08005efc

08004bac <__sflush_r>:
 8004bac:	898a      	ldrh	r2, [r1, #12]
 8004bae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bb2:	4605      	mov	r5, r0
 8004bb4:	0710      	lsls	r0, r2, #28
 8004bb6:	460c      	mov	r4, r1
 8004bb8:	d458      	bmi.n	8004c6c <__sflush_r+0xc0>
 8004bba:	684b      	ldr	r3, [r1, #4]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	dc05      	bgt.n	8004bcc <__sflush_r+0x20>
 8004bc0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	dc02      	bgt.n	8004bcc <__sflush_r+0x20>
 8004bc6:	2000      	movs	r0, #0
 8004bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bcc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004bce:	2e00      	cmp	r6, #0
 8004bd0:	d0f9      	beq.n	8004bc6 <__sflush_r+0x1a>
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004bd8:	682f      	ldr	r7, [r5, #0]
 8004bda:	602b      	str	r3, [r5, #0]
 8004bdc:	d032      	beq.n	8004c44 <__sflush_r+0x98>
 8004bde:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004be0:	89a3      	ldrh	r3, [r4, #12]
 8004be2:	075a      	lsls	r2, r3, #29
 8004be4:	d505      	bpl.n	8004bf2 <__sflush_r+0x46>
 8004be6:	6863      	ldr	r3, [r4, #4]
 8004be8:	1ac0      	subs	r0, r0, r3
 8004bea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004bec:	b10b      	cbz	r3, 8004bf2 <__sflush_r+0x46>
 8004bee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004bf0:	1ac0      	subs	r0, r0, r3
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004bf8:	6a21      	ldr	r1, [r4, #32]
 8004bfa:	4628      	mov	r0, r5
 8004bfc:	47b0      	blx	r6
 8004bfe:	1c43      	adds	r3, r0, #1
 8004c00:	89a3      	ldrh	r3, [r4, #12]
 8004c02:	d106      	bne.n	8004c12 <__sflush_r+0x66>
 8004c04:	6829      	ldr	r1, [r5, #0]
 8004c06:	291d      	cmp	r1, #29
 8004c08:	d82c      	bhi.n	8004c64 <__sflush_r+0xb8>
 8004c0a:	4a2a      	ldr	r2, [pc, #168]	; (8004cb4 <__sflush_r+0x108>)
 8004c0c:	40ca      	lsrs	r2, r1
 8004c0e:	07d6      	lsls	r6, r2, #31
 8004c10:	d528      	bpl.n	8004c64 <__sflush_r+0xb8>
 8004c12:	2200      	movs	r2, #0
 8004c14:	6062      	str	r2, [r4, #4]
 8004c16:	04d9      	lsls	r1, r3, #19
 8004c18:	6922      	ldr	r2, [r4, #16]
 8004c1a:	6022      	str	r2, [r4, #0]
 8004c1c:	d504      	bpl.n	8004c28 <__sflush_r+0x7c>
 8004c1e:	1c42      	adds	r2, r0, #1
 8004c20:	d101      	bne.n	8004c26 <__sflush_r+0x7a>
 8004c22:	682b      	ldr	r3, [r5, #0]
 8004c24:	b903      	cbnz	r3, 8004c28 <__sflush_r+0x7c>
 8004c26:	6560      	str	r0, [r4, #84]	; 0x54
 8004c28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c2a:	602f      	str	r7, [r5, #0]
 8004c2c:	2900      	cmp	r1, #0
 8004c2e:	d0ca      	beq.n	8004bc6 <__sflush_r+0x1a>
 8004c30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c34:	4299      	cmp	r1, r3
 8004c36:	d002      	beq.n	8004c3e <__sflush_r+0x92>
 8004c38:	4628      	mov	r0, r5
 8004c3a:	f000 f9d7 	bl	8004fec <_free_r>
 8004c3e:	2000      	movs	r0, #0
 8004c40:	6360      	str	r0, [r4, #52]	; 0x34
 8004c42:	e7c1      	b.n	8004bc8 <__sflush_r+0x1c>
 8004c44:	6a21      	ldr	r1, [r4, #32]
 8004c46:	2301      	movs	r3, #1
 8004c48:	4628      	mov	r0, r5
 8004c4a:	47b0      	blx	r6
 8004c4c:	1c41      	adds	r1, r0, #1
 8004c4e:	d1c7      	bne.n	8004be0 <__sflush_r+0x34>
 8004c50:	682b      	ldr	r3, [r5, #0]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d0c4      	beq.n	8004be0 <__sflush_r+0x34>
 8004c56:	2b1d      	cmp	r3, #29
 8004c58:	d001      	beq.n	8004c5e <__sflush_r+0xb2>
 8004c5a:	2b16      	cmp	r3, #22
 8004c5c:	d101      	bne.n	8004c62 <__sflush_r+0xb6>
 8004c5e:	602f      	str	r7, [r5, #0]
 8004c60:	e7b1      	b.n	8004bc6 <__sflush_r+0x1a>
 8004c62:	89a3      	ldrh	r3, [r4, #12]
 8004c64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c68:	81a3      	strh	r3, [r4, #12]
 8004c6a:	e7ad      	b.n	8004bc8 <__sflush_r+0x1c>
 8004c6c:	690f      	ldr	r7, [r1, #16]
 8004c6e:	2f00      	cmp	r7, #0
 8004c70:	d0a9      	beq.n	8004bc6 <__sflush_r+0x1a>
 8004c72:	0793      	lsls	r3, r2, #30
 8004c74:	680e      	ldr	r6, [r1, #0]
 8004c76:	bf08      	it	eq
 8004c78:	694b      	ldreq	r3, [r1, #20]
 8004c7a:	600f      	str	r7, [r1, #0]
 8004c7c:	bf18      	it	ne
 8004c7e:	2300      	movne	r3, #0
 8004c80:	eba6 0807 	sub.w	r8, r6, r7
 8004c84:	608b      	str	r3, [r1, #8]
 8004c86:	f1b8 0f00 	cmp.w	r8, #0
 8004c8a:	dd9c      	ble.n	8004bc6 <__sflush_r+0x1a>
 8004c8c:	6a21      	ldr	r1, [r4, #32]
 8004c8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004c90:	4643      	mov	r3, r8
 8004c92:	463a      	mov	r2, r7
 8004c94:	4628      	mov	r0, r5
 8004c96:	47b0      	blx	r6
 8004c98:	2800      	cmp	r0, #0
 8004c9a:	dc06      	bgt.n	8004caa <__sflush_r+0xfe>
 8004c9c:	89a3      	ldrh	r3, [r4, #12]
 8004c9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ca2:	81a3      	strh	r3, [r4, #12]
 8004ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ca8:	e78e      	b.n	8004bc8 <__sflush_r+0x1c>
 8004caa:	4407      	add	r7, r0
 8004cac:	eba8 0800 	sub.w	r8, r8, r0
 8004cb0:	e7e9      	b.n	8004c86 <__sflush_r+0xda>
 8004cb2:	bf00      	nop
 8004cb4:	20400001 	.word	0x20400001

08004cb8 <_fflush_r>:
 8004cb8:	b538      	push	{r3, r4, r5, lr}
 8004cba:	690b      	ldr	r3, [r1, #16]
 8004cbc:	4605      	mov	r5, r0
 8004cbe:	460c      	mov	r4, r1
 8004cc0:	b913      	cbnz	r3, 8004cc8 <_fflush_r+0x10>
 8004cc2:	2500      	movs	r5, #0
 8004cc4:	4628      	mov	r0, r5
 8004cc6:	bd38      	pop	{r3, r4, r5, pc}
 8004cc8:	b118      	cbz	r0, 8004cd2 <_fflush_r+0x1a>
 8004cca:	6983      	ldr	r3, [r0, #24]
 8004ccc:	b90b      	cbnz	r3, 8004cd2 <_fflush_r+0x1a>
 8004cce:	f000 f887 	bl	8004de0 <__sinit>
 8004cd2:	4b14      	ldr	r3, [pc, #80]	; (8004d24 <_fflush_r+0x6c>)
 8004cd4:	429c      	cmp	r4, r3
 8004cd6:	d11b      	bne.n	8004d10 <_fflush_r+0x58>
 8004cd8:	686c      	ldr	r4, [r5, #4]
 8004cda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d0ef      	beq.n	8004cc2 <_fflush_r+0xa>
 8004ce2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004ce4:	07d0      	lsls	r0, r2, #31
 8004ce6:	d404      	bmi.n	8004cf2 <_fflush_r+0x3a>
 8004ce8:	0599      	lsls	r1, r3, #22
 8004cea:	d402      	bmi.n	8004cf2 <_fflush_r+0x3a>
 8004cec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004cee:	f000 f915 	bl	8004f1c <__retarget_lock_acquire_recursive>
 8004cf2:	4628      	mov	r0, r5
 8004cf4:	4621      	mov	r1, r4
 8004cf6:	f7ff ff59 	bl	8004bac <__sflush_r>
 8004cfa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004cfc:	07da      	lsls	r2, r3, #31
 8004cfe:	4605      	mov	r5, r0
 8004d00:	d4e0      	bmi.n	8004cc4 <_fflush_r+0xc>
 8004d02:	89a3      	ldrh	r3, [r4, #12]
 8004d04:	059b      	lsls	r3, r3, #22
 8004d06:	d4dd      	bmi.n	8004cc4 <_fflush_r+0xc>
 8004d08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d0a:	f000 f908 	bl	8004f1e <__retarget_lock_release_recursive>
 8004d0e:	e7d9      	b.n	8004cc4 <_fflush_r+0xc>
 8004d10:	4b05      	ldr	r3, [pc, #20]	; (8004d28 <_fflush_r+0x70>)
 8004d12:	429c      	cmp	r4, r3
 8004d14:	d101      	bne.n	8004d1a <_fflush_r+0x62>
 8004d16:	68ac      	ldr	r4, [r5, #8]
 8004d18:	e7df      	b.n	8004cda <_fflush_r+0x22>
 8004d1a:	4b04      	ldr	r3, [pc, #16]	; (8004d2c <_fflush_r+0x74>)
 8004d1c:	429c      	cmp	r4, r3
 8004d1e:	bf08      	it	eq
 8004d20:	68ec      	ldreq	r4, [r5, #12]
 8004d22:	e7da      	b.n	8004cda <_fflush_r+0x22>
 8004d24:	08005f1c 	.word	0x08005f1c
 8004d28:	08005f3c 	.word	0x08005f3c
 8004d2c:	08005efc 	.word	0x08005efc

08004d30 <std>:
 8004d30:	2300      	movs	r3, #0
 8004d32:	b510      	push	{r4, lr}
 8004d34:	4604      	mov	r4, r0
 8004d36:	e9c0 3300 	strd	r3, r3, [r0]
 8004d3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004d3e:	6083      	str	r3, [r0, #8]
 8004d40:	8181      	strh	r1, [r0, #12]
 8004d42:	6643      	str	r3, [r0, #100]	; 0x64
 8004d44:	81c2      	strh	r2, [r0, #14]
 8004d46:	6183      	str	r3, [r0, #24]
 8004d48:	4619      	mov	r1, r3
 8004d4a:	2208      	movs	r2, #8
 8004d4c:	305c      	adds	r0, #92	; 0x5c
 8004d4e:	f7ff fdb7 	bl	80048c0 <memset>
 8004d52:	4b05      	ldr	r3, [pc, #20]	; (8004d68 <std+0x38>)
 8004d54:	6263      	str	r3, [r4, #36]	; 0x24
 8004d56:	4b05      	ldr	r3, [pc, #20]	; (8004d6c <std+0x3c>)
 8004d58:	62a3      	str	r3, [r4, #40]	; 0x28
 8004d5a:	4b05      	ldr	r3, [pc, #20]	; (8004d70 <std+0x40>)
 8004d5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004d5e:	4b05      	ldr	r3, [pc, #20]	; (8004d74 <std+0x44>)
 8004d60:	6224      	str	r4, [r4, #32]
 8004d62:	6323      	str	r3, [r4, #48]	; 0x30
 8004d64:	bd10      	pop	{r4, pc}
 8004d66:	bf00      	nop
 8004d68:	08005a61 	.word	0x08005a61
 8004d6c:	08005a83 	.word	0x08005a83
 8004d70:	08005abb 	.word	0x08005abb
 8004d74:	08005adf 	.word	0x08005adf

08004d78 <_cleanup_r>:
 8004d78:	4901      	ldr	r1, [pc, #4]	; (8004d80 <_cleanup_r+0x8>)
 8004d7a:	f000 b8af 	b.w	8004edc <_fwalk_reent>
 8004d7e:	bf00      	nop
 8004d80:	08004cb9 	.word	0x08004cb9

08004d84 <__sfmoreglue>:
 8004d84:	b570      	push	{r4, r5, r6, lr}
 8004d86:	2268      	movs	r2, #104	; 0x68
 8004d88:	1e4d      	subs	r5, r1, #1
 8004d8a:	4355      	muls	r5, r2
 8004d8c:	460e      	mov	r6, r1
 8004d8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004d92:	f000 f997 	bl	80050c4 <_malloc_r>
 8004d96:	4604      	mov	r4, r0
 8004d98:	b140      	cbz	r0, 8004dac <__sfmoreglue+0x28>
 8004d9a:	2100      	movs	r1, #0
 8004d9c:	e9c0 1600 	strd	r1, r6, [r0]
 8004da0:	300c      	adds	r0, #12
 8004da2:	60a0      	str	r0, [r4, #8]
 8004da4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004da8:	f7ff fd8a 	bl	80048c0 <memset>
 8004dac:	4620      	mov	r0, r4
 8004dae:	bd70      	pop	{r4, r5, r6, pc}

08004db0 <__sfp_lock_acquire>:
 8004db0:	4801      	ldr	r0, [pc, #4]	; (8004db8 <__sfp_lock_acquire+0x8>)
 8004db2:	f000 b8b3 	b.w	8004f1c <__retarget_lock_acquire_recursive>
 8004db6:	bf00      	nop
 8004db8:	20002ea9 	.word	0x20002ea9

08004dbc <__sfp_lock_release>:
 8004dbc:	4801      	ldr	r0, [pc, #4]	; (8004dc4 <__sfp_lock_release+0x8>)
 8004dbe:	f000 b8ae 	b.w	8004f1e <__retarget_lock_release_recursive>
 8004dc2:	bf00      	nop
 8004dc4:	20002ea9 	.word	0x20002ea9

08004dc8 <__sinit_lock_acquire>:
 8004dc8:	4801      	ldr	r0, [pc, #4]	; (8004dd0 <__sinit_lock_acquire+0x8>)
 8004dca:	f000 b8a7 	b.w	8004f1c <__retarget_lock_acquire_recursive>
 8004dce:	bf00      	nop
 8004dd0:	20002eaa 	.word	0x20002eaa

08004dd4 <__sinit_lock_release>:
 8004dd4:	4801      	ldr	r0, [pc, #4]	; (8004ddc <__sinit_lock_release+0x8>)
 8004dd6:	f000 b8a2 	b.w	8004f1e <__retarget_lock_release_recursive>
 8004dda:	bf00      	nop
 8004ddc:	20002eaa 	.word	0x20002eaa

08004de0 <__sinit>:
 8004de0:	b510      	push	{r4, lr}
 8004de2:	4604      	mov	r4, r0
 8004de4:	f7ff fff0 	bl	8004dc8 <__sinit_lock_acquire>
 8004de8:	69a3      	ldr	r3, [r4, #24]
 8004dea:	b11b      	cbz	r3, 8004df4 <__sinit+0x14>
 8004dec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004df0:	f7ff bff0 	b.w	8004dd4 <__sinit_lock_release>
 8004df4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004df8:	6523      	str	r3, [r4, #80]	; 0x50
 8004dfa:	4b13      	ldr	r3, [pc, #76]	; (8004e48 <__sinit+0x68>)
 8004dfc:	4a13      	ldr	r2, [pc, #76]	; (8004e4c <__sinit+0x6c>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	62a2      	str	r2, [r4, #40]	; 0x28
 8004e02:	42a3      	cmp	r3, r4
 8004e04:	bf04      	itt	eq
 8004e06:	2301      	moveq	r3, #1
 8004e08:	61a3      	streq	r3, [r4, #24]
 8004e0a:	4620      	mov	r0, r4
 8004e0c:	f000 f820 	bl	8004e50 <__sfp>
 8004e10:	6060      	str	r0, [r4, #4]
 8004e12:	4620      	mov	r0, r4
 8004e14:	f000 f81c 	bl	8004e50 <__sfp>
 8004e18:	60a0      	str	r0, [r4, #8]
 8004e1a:	4620      	mov	r0, r4
 8004e1c:	f000 f818 	bl	8004e50 <__sfp>
 8004e20:	2200      	movs	r2, #0
 8004e22:	60e0      	str	r0, [r4, #12]
 8004e24:	2104      	movs	r1, #4
 8004e26:	6860      	ldr	r0, [r4, #4]
 8004e28:	f7ff ff82 	bl	8004d30 <std>
 8004e2c:	68a0      	ldr	r0, [r4, #8]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	2109      	movs	r1, #9
 8004e32:	f7ff ff7d 	bl	8004d30 <std>
 8004e36:	68e0      	ldr	r0, [r4, #12]
 8004e38:	2202      	movs	r2, #2
 8004e3a:	2112      	movs	r1, #18
 8004e3c:	f7ff ff78 	bl	8004d30 <std>
 8004e40:	2301      	movs	r3, #1
 8004e42:	61a3      	str	r3, [r4, #24]
 8004e44:	e7d2      	b.n	8004dec <__sinit+0xc>
 8004e46:	bf00      	nop
 8004e48:	08005ef8 	.word	0x08005ef8
 8004e4c:	08004d79 	.word	0x08004d79

08004e50 <__sfp>:
 8004e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e52:	4607      	mov	r7, r0
 8004e54:	f7ff ffac 	bl	8004db0 <__sfp_lock_acquire>
 8004e58:	4b1e      	ldr	r3, [pc, #120]	; (8004ed4 <__sfp+0x84>)
 8004e5a:	681e      	ldr	r6, [r3, #0]
 8004e5c:	69b3      	ldr	r3, [r6, #24]
 8004e5e:	b913      	cbnz	r3, 8004e66 <__sfp+0x16>
 8004e60:	4630      	mov	r0, r6
 8004e62:	f7ff ffbd 	bl	8004de0 <__sinit>
 8004e66:	3648      	adds	r6, #72	; 0x48
 8004e68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004e6c:	3b01      	subs	r3, #1
 8004e6e:	d503      	bpl.n	8004e78 <__sfp+0x28>
 8004e70:	6833      	ldr	r3, [r6, #0]
 8004e72:	b30b      	cbz	r3, 8004eb8 <__sfp+0x68>
 8004e74:	6836      	ldr	r6, [r6, #0]
 8004e76:	e7f7      	b.n	8004e68 <__sfp+0x18>
 8004e78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004e7c:	b9d5      	cbnz	r5, 8004eb4 <__sfp+0x64>
 8004e7e:	4b16      	ldr	r3, [pc, #88]	; (8004ed8 <__sfp+0x88>)
 8004e80:	60e3      	str	r3, [r4, #12]
 8004e82:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004e86:	6665      	str	r5, [r4, #100]	; 0x64
 8004e88:	f000 f847 	bl	8004f1a <__retarget_lock_init_recursive>
 8004e8c:	f7ff ff96 	bl	8004dbc <__sfp_lock_release>
 8004e90:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004e94:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004e98:	6025      	str	r5, [r4, #0]
 8004e9a:	61a5      	str	r5, [r4, #24]
 8004e9c:	2208      	movs	r2, #8
 8004e9e:	4629      	mov	r1, r5
 8004ea0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004ea4:	f7ff fd0c 	bl	80048c0 <memset>
 8004ea8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004eac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004eb0:	4620      	mov	r0, r4
 8004eb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004eb4:	3468      	adds	r4, #104	; 0x68
 8004eb6:	e7d9      	b.n	8004e6c <__sfp+0x1c>
 8004eb8:	2104      	movs	r1, #4
 8004eba:	4638      	mov	r0, r7
 8004ebc:	f7ff ff62 	bl	8004d84 <__sfmoreglue>
 8004ec0:	4604      	mov	r4, r0
 8004ec2:	6030      	str	r0, [r6, #0]
 8004ec4:	2800      	cmp	r0, #0
 8004ec6:	d1d5      	bne.n	8004e74 <__sfp+0x24>
 8004ec8:	f7ff ff78 	bl	8004dbc <__sfp_lock_release>
 8004ecc:	230c      	movs	r3, #12
 8004ece:	603b      	str	r3, [r7, #0]
 8004ed0:	e7ee      	b.n	8004eb0 <__sfp+0x60>
 8004ed2:	bf00      	nop
 8004ed4:	08005ef8 	.word	0x08005ef8
 8004ed8:	ffff0001 	.word	0xffff0001

08004edc <_fwalk_reent>:
 8004edc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ee0:	4606      	mov	r6, r0
 8004ee2:	4688      	mov	r8, r1
 8004ee4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004ee8:	2700      	movs	r7, #0
 8004eea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004eee:	f1b9 0901 	subs.w	r9, r9, #1
 8004ef2:	d505      	bpl.n	8004f00 <_fwalk_reent+0x24>
 8004ef4:	6824      	ldr	r4, [r4, #0]
 8004ef6:	2c00      	cmp	r4, #0
 8004ef8:	d1f7      	bne.n	8004eea <_fwalk_reent+0xe>
 8004efa:	4638      	mov	r0, r7
 8004efc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f00:	89ab      	ldrh	r3, [r5, #12]
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d907      	bls.n	8004f16 <_fwalk_reent+0x3a>
 8004f06:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004f0a:	3301      	adds	r3, #1
 8004f0c:	d003      	beq.n	8004f16 <_fwalk_reent+0x3a>
 8004f0e:	4629      	mov	r1, r5
 8004f10:	4630      	mov	r0, r6
 8004f12:	47c0      	blx	r8
 8004f14:	4307      	orrs	r7, r0
 8004f16:	3568      	adds	r5, #104	; 0x68
 8004f18:	e7e9      	b.n	8004eee <_fwalk_reent+0x12>

08004f1a <__retarget_lock_init_recursive>:
 8004f1a:	4770      	bx	lr

08004f1c <__retarget_lock_acquire_recursive>:
 8004f1c:	4770      	bx	lr

08004f1e <__retarget_lock_release_recursive>:
 8004f1e:	4770      	bx	lr

08004f20 <__swhatbuf_r>:
 8004f20:	b570      	push	{r4, r5, r6, lr}
 8004f22:	460e      	mov	r6, r1
 8004f24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f28:	2900      	cmp	r1, #0
 8004f2a:	b096      	sub	sp, #88	; 0x58
 8004f2c:	4614      	mov	r4, r2
 8004f2e:	461d      	mov	r5, r3
 8004f30:	da08      	bge.n	8004f44 <__swhatbuf_r+0x24>
 8004f32:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004f36:	2200      	movs	r2, #0
 8004f38:	602a      	str	r2, [r5, #0]
 8004f3a:	061a      	lsls	r2, r3, #24
 8004f3c:	d410      	bmi.n	8004f60 <__swhatbuf_r+0x40>
 8004f3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f42:	e00e      	b.n	8004f62 <__swhatbuf_r+0x42>
 8004f44:	466a      	mov	r2, sp
 8004f46:	f000 fdf1 	bl	8005b2c <_fstat_r>
 8004f4a:	2800      	cmp	r0, #0
 8004f4c:	dbf1      	blt.n	8004f32 <__swhatbuf_r+0x12>
 8004f4e:	9a01      	ldr	r2, [sp, #4]
 8004f50:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004f54:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004f58:	425a      	negs	r2, r3
 8004f5a:	415a      	adcs	r2, r3
 8004f5c:	602a      	str	r2, [r5, #0]
 8004f5e:	e7ee      	b.n	8004f3e <__swhatbuf_r+0x1e>
 8004f60:	2340      	movs	r3, #64	; 0x40
 8004f62:	2000      	movs	r0, #0
 8004f64:	6023      	str	r3, [r4, #0]
 8004f66:	b016      	add	sp, #88	; 0x58
 8004f68:	bd70      	pop	{r4, r5, r6, pc}
	...

08004f6c <__smakebuf_r>:
 8004f6c:	898b      	ldrh	r3, [r1, #12]
 8004f6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004f70:	079d      	lsls	r5, r3, #30
 8004f72:	4606      	mov	r6, r0
 8004f74:	460c      	mov	r4, r1
 8004f76:	d507      	bpl.n	8004f88 <__smakebuf_r+0x1c>
 8004f78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004f7c:	6023      	str	r3, [r4, #0]
 8004f7e:	6123      	str	r3, [r4, #16]
 8004f80:	2301      	movs	r3, #1
 8004f82:	6163      	str	r3, [r4, #20]
 8004f84:	b002      	add	sp, #8
 8004f86:	bd70      	pop	{r4, r5, r6, pc}
 8004f88:	ab01      	add	r3, sp, #4
 8004f8a:	466a      	mov	r2, sp
 8004f8c:	f7ff ffc8 	bl	8004f20 <__swhatbuf_r>
 8004f90:	9900      	ldr	r1, [sp, #0]
 8004f92:	4605      	mov	r5, r0
 8004f94:	4630      	mov	r0, r6
 8004f96:	f000 f895 	bl	80050c4 <_malloc_r>
 8004f9a:	b948      	cbnz	r0, 8004fb0 <__smakebuf_r+0x44>
 8004f9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004fa0:	059a      	lsls	r2, r3, #22
 8004fa2:	d4ef      	bmi.n	8004f84 <__smakebuf_r+0x18>
 8004fa4:	f023 0303 	bic.w	r3, r3, #3
 8004fa8:	f043 0302 	orr.w	r3, r3, #2
 8004fac:	81a3      	strh	r3, [r4, #12]
 8004fae:	e7e3      	b.n	8004f78 <__smakebuf_r+0xc>
 8004fb0:	4b0d      	ldr	r3, [pc, #52]	; (8004fe8 <__smakebuf_r+0x7c>)
 8004fb2:	62b3      	str	r3, [r6, #40]	; 0x28
 8004fb4:	89a3      	ldrh	r3, [r4, #12]
 8004fb6:	6020      	str	r0, [r4, #0]
 8004fb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fbc:	81a3      	strh	r3, [r4, #12]
 8004fbe:	9b00      	ldr	r3, [sp, #0]
 8004fc0:	6163      	str	r3, [r4, #20]
 8004fc2:	9b01      	ldr	r3, [sp, #4]
 8004fc4:	6120      	str	r0, [r4, #16]
 8004fc6:	b15b      	cbz	r3, 8004fe0 <__smakebuf_r+0x74>
 8004fc8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004fcc:	4630      	mov	r0, r6
 8004fce:	f000 fdbf 	bl	8005b50 <_isatty_r>
 8004fd2:	b128      	cbz	r0, 8004fe0 <__smakebuf_r+0x74>
 8004fd4:	89a3      	ldrh	r3, [r4, #12]
 8004fd6:	f023 0303 	bic.w	r3, r3, #3
 8004fda:	f043 0301 	orr.w	r3, r3, #1
 8004fde:	81a3      	strh	r3, [r4, #12]
 8004fe0:	89a0      	ldrh	r0, [r4, #12]
 8004fe2:	4305      	orrs	r5, r0
 8004fe4:	81a5      	strh	r5, [r4, #12]
 8004fe6:	e7cd      	b.n	8004f84 <__smakebuf_r+0x18>
 8004fe8:	08004d79 	.word	0x08004d79

08004fec <_free_r>:
 8004fec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004fee:	2900      	cmp	r1, #0
 8004ff0:	d044      	beq.n	800507c <_free_r+0x90>
 8004ff2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ff6:	9001      	str	r0, [sp, #4]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	f1a1 0404 	sub.w	r4, r1, #4
 8004ffe:	bfb8      	it	lt
 8005000:	18e4      	addlt	r4, r4, r3
 8005002:	f000 fdef 	bl	8005be4 <__malloc_lock>
 8005006:	4a1e      	ldr	r2, [pc, #120]	; (8005080 <_free_r+0x94>)
 8005008:	9801      	ldr	r0, [sp, #4]
 800500a:	6813      	ldr	r3, [r2, #0]
 800500c:	b933      	cbnz	r3, 800501c <_free_r+0x30>
 800500e:	6063      	str	r3, [r4, #4]
 8005010:	6014      	str	r4, [r2, #0]
 8005012:	b003      	add	sp, #12
 8005014:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005018:	f000 bdea 	b.w	8005bf0 <__malloc_unlock>
 800501c:	42a3      	cmp	r3, r4
 800501e:	d908      	bls.n	8005032 <_free_r+0x46>
 8005020:	6825      	ldr	r5, [r4, #0]
 8005022:	1961      	adds	r1, r4, r5
 8005024:	428b      	cmp	r3, r1
 8005026:	bf01      	itttt	eq
 8005028:	6819      	ldreq	r1, [r3, #0]
 800502a:	685b      	ldreq	r3, [r3, #4]
 800502c:	1949      	addeq	r1, r1, r5
 800502e:	6021      	streq	r1, [r4, #0]
 8005030:	e7ed      	b.n	800500e <_free_r+0x22>
 8005032:	461a      	mov	r2, r3
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	b10b      	cbz	r3, 800503c <_free_r+0x50>
 8005038:	42a3      	cmp	r3, r4
 800503a:	d9fa      	bls.n	8005032 <_free_r+0x46>
 800503c:	6811      	ldr	r1, [r2, #0]
 800503e:	1855      	adds	r5, r2, r1
 8005040:	42a5      	cmp	r5, r4
 8005042:	d10b      	bne.n	800505c <_free_r+0x70>
 8005044:	6824      	ldr	r4, [r4, #0]
 8005046:	4421      	add	r1, r4
 8005048:	1854      	adds	r4, r2, r1
 800504a:	42a3      	cmp	r3, r4
 800504c:	6011      	str	r1, [r2, #0]
 800504e:	d1e0      	bne.n	8005012 <_free_r+0x26>
 8005050:	681c      	ldr	r4, [r3, #0]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	6053      	str	r3, [r2, #4]
 8005056:	4421      	add	r1, r4
 8005058:	6011      	str	r1, [r2, #0]
 800505a:	e7da      	b.n	8005012 <_free_r+0x26>
 800505c:	d902      	bls.n	8005064 <_free_r+0x78>
 800505e:	230c      	movs	r3, #12
 8005060:	6003      	str	r3, [r0, #0]
 8005062:	e7d6      	b.n	8005012 <_free_r+0x26>
 8005064:	6825      	ldr	r5, [r4, #0]
 8005066:	1961      	adds	r1, r4, r5
 8005068:	428b      	cmp	r3, r1
 800506a:	bf04      	itt	eq
 800506c:	6819      	ldreq	r1, [r3, #0]
 800506e:	685b      	ldreq	r3, [r3, #4]
 8005070:	6063      	str	r3, [r4, #4]
 8005072:	bf04      	itt	eq
 8005074:	1949      	addeq	r1, r1, r5
 8005076:	6021      	streq	r1, [r4, #0]
 8005078:	6054      	str	r4, [r2, #4]
 800507a:	e7ca      	b.n	8005012 <_free_r+0x26>
 800507c:	b003      	add	sp, #12
 800507e:	bd30      	pop	{r4, r5, pc}
 8005080:	20002eac 	.word	0x20002eac

08005084 <sbrk_aligned>:
 8005084:	b570      	push	{r4, r5, r6, lr}
 8005086:	4e0e      	ldr	r6, [pc, #56]	; (80050c0 <sbrk_aligned+0x3c>)
 8005088:	460c      	mov	r4, r1
 800508a:	6831      	ldr	r1, [r6, #0]
 800508c:	4605      	mov	r5, r0
 800508e:	b911      	cbnz	r1, 8005096 <sbrk_aligned+0x12>
 8005090:	f000 fcd6 	bl	8005a40 <_sbrk_r>
 8005094:	6030      	str	r0, [r6, #0]
 8005096:	4621      	mov	r1, r4
 8005098:	4628      	mov	r0, r5
 800509a:	f000 fcd1 	bl	8005a40 <_sbrk_r>
 800509e:	1c43      	adds	r3, r0, #1
 80050a0:	d00a      	beq.n	80050b8 <sbrk_aligned+0x34>
 80050a2:	1cc4      	adds	r4, r0, #3
 80050a4:	f024 0403 	bic.w	r4, r4, #3
 80050a8:	42a0      	cmp	r0, r4
 80050aa:	d007      	beq.n	80050bc <sbrk_aligned+0x38>
 80050ac:	1a21      	subs	r1, r4, r0
 80050ae:	4628      	mov	r0, r5
 80050b0:	f000 fcc6 	bl	8005a40 <_sbrk_r>
 80050b4:	3001      	adds	r0, #1
 80050b6:	d101      	bne.n	80050bc <sbrk_aligned+0x38>
 80050b8:	f04f 34ff 	mov.w	r4, #4294967295
 80050bc:	4620      	mov	r0, r4
 80050be:	bd70      	pop	{r4, r5, r6, pc}
 80050c0:	20002eb0 	.word	0x20002eb0

080050c4 <_malloc_r>:
 80050c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050c8:	1ccd      	adds	r5, r1, #3
 80050ca:	f025 0503 	bic.w	r5, r5, #3
 80050ce:	3508      	adds	r5, #8
 80050d0:	2d0c      	cmp	r5, #12
 80050d2:	bf38      	it	cc
 80050d4:	250c      	movcc	r5, #12
 80050d6:	2d00      	cmp	r5, #0
 80050d8:	4607      	mov	r7, r0
 80050da:	db01      	blt.n	80050e0 <_malloc_r+0x1c>
 80050dc:	42a9      	cmp	r1, r5
 80050de:	d905      	bls.n	80050ec <_malloc_r+0x28>
 80050e0:	230c      	movs	r3, #12
 80050e2:	603b      	str	r3, [r7, #0]
 80050e4:	2600      	movs	r6, #0
 80050e6:	4630      	mov	r0, r6
 80050e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050ec:	4e2e      	ldr	r6, [pc, #184]	; (80051a8 <_malloc_r+0xe4>)
 80050ee:	f000 fd79 	bl	8005be4 <__malloc_lock>
 80050f2:	6833      	ldr	r3, [r6, #0]
 80050f4:	461c      	mov	r4, r3
 80050f6:	bb34      	cbnz	r4, 8005146 <_malloc_r+0x82>
 80050f8:	4629      	mov	r1, r5
 80050fa:	4638      	mov	r0, r7
 80050fc:	f7ff ffc2 	bl	8005084 <sbrk_aligned>
 8005100:	1c43      	adds	r3, r0, #1
 8005102:	4604      	mov	r4, r0
 8005104:	d14d      	bne.n	80051a2 <_malloc_r+0xde>
 8005106:	6834      	ldr	r4, [r6, #0]
 8005108:	4626      	mov	r6, r4
 800510a:	2e00      	cmp	r6, #0
 800510c:	d140      	bne.n	8005190 <_malloc_r+0xcc>
 800510e:	6823      	ldr	r3, [r4, #0]
 8005110:	4631      	mov	r1, r6
 8005112:	4638      	mov	r0, r7
 8005114:	eb04 0803 	add.w	r8, r4, r3
 8005118:	f000 fc92 	bl	8005a40 <_sbrk_r>
 800511c:	4580      	cmp	r8, r0
 800511e:	d13a      	bne.n	8005196 <_malloc_r+0xd2>
 8005120:	6821      	ldr	r1, [r4, #0]
 8005122:	3503      	adds	r5, #3
 8005124:	1a6d      	subs	r5, r5, r1
 8005126:	f025 0503 	bic.w	r5, r5, #3
 800512a:	3508      	adds	r5, #8
 800512c:	2d0c      	cmp	r5, #12
 800512e:	bf38      	it	cc
 8005130:	250c      	movcc	r5, #12
 8005132:	4629      	mov	r1, r5
 8005134:	4638      	mov	r0, r7
 8005136:	f7ff ffa5 	bl	8005084 <sbrk_aligned>
 800513a:	3001      	adds	r0, #1
 800513c:	d02b      	beq.n	8005196 <_malloc_r+0xd2>
 800513e:	6823      	ldr	r3, [r4, #0]
 8005140:	442b      	add	r3, r5
 8005142:	6023      	str	r3, [r4, #0]
 8005144:	e00e      	b.n	8005164 <_malloc_r+0xa0>
 8005146:	6822      	ldr	r2, [r4, #0]
 8005148:	1b52      	subs	r2, r2, r5
 800514a:	d41e      	bmi.n	800518a <_malloc_r+0xc6>
 800514c:	2a0b      	cmp	r2, #11
 800514e:	d916      	bls.n	800517e <_malloc_r+0xba>
 8005150:	1961      	adds	r1, r4, r5
 8005152:	42a3      	cmp	r3, r4
 8005154:	6025      	str	r5, [r4, #0]
 8005156:	bf18      	it	ne
 8005158:	6059      	strne	r1, [r3, #4]
 800515a:	6863      	ldr	r3, [r4, #4]
 800515c:	bf08      	it	eq
 800515e:	6031      	streq	r1, [r6, #0]
 8005160:	5162      	str	r2, [r4, r5]
 8005162:	604b      	str	r3, [r1, #4]
 8005164:	4638      	mov	r0, r7
 8005166:	f104 060b 	add.w	r6, r4, #11
 800516a:	f000 fd41 	bl	8005bf0 <__malloc_unlock>
 800516e:	f026 0607 	bic.w	r6, r6, #7
 8005172:	1d23      	adds	r3, r4, #4
 8005174:	1af2      	subs	r2, r6, r3
 8005176:	d0b6      	beq.n	80050e6 <_malloc_r+0x22>
 8005178:	1b9b      	subs	r3, r3, r6
 800517a:	50a3      	str	r3, [r4, r2]
 800517c:	e7b3      	b.n	80050e6 <_malloc_r+0x22>
 800517e:	6862      	ldr	r2, [r4, #4]
 8005180:	42a3      	cmp	r3, r4
 8005182:	bf0c      	ite	eq
 8005184:	6032      	streq	r2, [r6, #0]
 8005186:	605a      	strne	r2, [r3, #4]
 8005188:	e7ec      	b.n	8005164 <_malloc_r+0xa0>
 800518a:	4623      	mov	r3, r4
 800518c:	6864      	ldr	r4, [r4, #4]
 800518e:	e7b2      	b.n	80050f6 <_malloc_r+0x32>
 8005190:	4634      	mov	r4, r6
 8005192:	6876      	ldr	r6, [r6, #4]
 8005194:	e7b9      	b.n	800510a <_malloc_r+0x46>
 8005196:	230c      	movs	r3, #12
 8005198:	603b      	str	r3, [r7, #0]
 800519a:	4638      	mov	r0, r7
 800519c:	f000 fd28 	bl	8005bf0 <__malloc_unlock>
 80051a0:	e7a1      	b.n	80050e6 <_malloc_r+0x22>
 80051a2:	6025      	str	r5, [r4, #0]
 80051a4:	e7de      	b.n	8005164 <_malloc_r+0xa0>
 80051a6:	bf00      	nop
 80051a8:	20002eac 	.word	0x20002eac

080051ac <__ssputs_r>:
 80051ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051b0:	688e      	ldr	r6, [r1, #8]
 80051b2:	429e      	cmp	r6, r3
 80051b4:	4682      	mov	sl, r0
 80051b6:	460c      	mov	r4, r1
 80051b8:	4690      	mov	r8, r2
 80051ba:	461f      	mov	r7, r3
 80051bc:	d838      	bhi.n	8005230 <__ssputs_r+0x84>
 80051be:	898a      	ldrh	r2, [r1, #12]
 80051c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80051c4:	d032      	beq.n	800522c <__ssputs_r+0x80>
 80051c6:	6825      	ldr	r5, [r4, #0]
 80051c8:	6909      	ldr	r1, [r1, #16]
 80051ca:	eba5 0901 	sub.w	r9, r5, r1
 80051ce:	6965      	ldr	r5, [r4, #20]
 80051d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80051d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80051d8:	3301      	adds	r3, #1
 80051da:	444b      	add	r3, r9
 80051dc:	106d      	asrs	r5, r5, #1
 80051de:	429d      	cmp	r5, r3
 80051e0:	bf38      	it	cc
 80051e2:	461d      	movcc	r5, r3
 80051e4:	0553      	lsls	r3, r2, #21
 80051e6:	d531      	bpl.n	800524c <__ssputs_r+0xa0>
 80051e8:	4629      	mov	r1, r5
 80051ea:	f7ff ff6b 	bl	80050c4 <_malloc_r>
 80051ee:	4606      	mov	r6, r0
 80051f0:	b950      	cbnz	r0, 8005208 <__ssputs_r+0x5c>
 80051f2:	230c      	movs	r3, #12
 80051f4:	f8ca 3000 	str.w	r3, [sl]
 80051f8:	89a3      	ldrh	r3, [r4, #12]
 80051fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051fe:	81a3      	strh	r3, [r4, #12]
 8005200:	f04f 30ff 	mov.w	r0, #4294967295
 8005204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005208:	6921      	ldr	r1, [r4, #16]
 800520a:	464a      	mov	r2, r9
 800520c:	f000 fcc2 	bl	8005b94 <memcpy>
 8005210:	89a3      	ldrh	r3, [r4, #12]
 8005212:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005216:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800521a:	81a3      	strh	r3, [r4, #12]
 800521c:	6126      	str	r6, [r4, #16]
 800521e:	6165      	str	r5, [r4, #20]
 8005220:	444e      	add	r6, r9
 8005222:	eba5 0509 	sub.w	r5, r5, r9
 8005226:	6026      	str	r6, [r4, #0]
 8005228:	60a5      	str	r5, [r4, #8]
 800522a:	463e      	mov	r6, r7
 800522c:	42be      	cmp	r6, r7
 800522e:	d900      	bls.n	8005232 <__ssputs_r+0x86>
 8005230:	463e      	mov	r6, r7
 8005232:	6820      	ldr	r0, [r4, #0]
 8005234:	4632      	mov	r2, r6
 8005236:	4641      	mov	r1, r8
 8005238:	f000 fcba 	bl	8005bb0 <memmove>
 800523c:	68a3      	ldr	r3, [r4, #8]
 800523e:	1b9b      	subs	r3, r3, r6
 8005240:	60a3      	str	r3, [r4, #8]
 8005242:	6823      	ldr	r3, [r4, #0]
 8005244:	4433      	add	r3, r6
 8005246:	6023      	str	r3, [r4, #0]
 8005248:	2000      	movs	r0, #0
 800524a:	e7db      	b.n	8005204 <__ssputs_r+0x58>
 800524c:	462a      	mov	r2, r5
 800524e:	f000 fcd5 	bl	8005bfc <_realloc_r>
 8005252:	4606      	mov	r6, r0
 8005254:	2800      	cmp	r0, #0
 8005256:	d1e1      	bne.n	800521c <__ssputs_r+0x70>
 8005258:	6921      	ldr	r1, [r4, #16]
 800525a:	4650      	mov	r0, sl
 800525c:	f7ff fec6 	bl	8004fec <_free_r>
 8005260:	e7c7      	b.n	80051f2 <__ssputs_r+0x46>
	...

08005264 <_svfiprintf_r>:
 8005264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005268:	4698      	mov	r8, r3
 800526a:	898b      	ldrh	r3, [r1, #12]
 800526c:	061b      	lsls	r3, r3, #24
 800526e:	b09d      	sub	sp, #116	; 0x74
 8005270:	4607      	mov	r7, r0
 8005272:	460d      	mov	r5, r1
 8005274:	4614      	mov	r4, r2
 8005276:	d50e      	bpl.n	8005296 <_svfiprintf_r+0x32>
 8005278:	690b      	ldr	r3, [r1, #16]
 800527a:	b963      	cbnz	r3, 8005296 <_svfiprintf_r+0x32>
 800527c:	2140      	movs	r1, #64	; 0x40
 800527e:	f7ff ff21 	bl	80050c4 <_malloc_r>
 8005282:	6028      	str	r0, [r5, #0]
 8005284:	6128      	str	r0, [r5, #16]
 8005286:	b920      	cbnz	r0, 8005292 <_svfiprintf_r+0x2e>
 8005288:	230c      	movs	r3, #12
 800528a:	603b      	str	r3, [r7, #0]
 800528c:	f04f 30ff 	mov.w	r0, #4294967295
 8005290:	e0d1      	b.n	8005436 <_svfiprintf_r+0x1d2>
 8005292:	2340      	movs	r3, #64	; 0x40
 8005294:	616b      	str	r3, [r5, #20]
 8005296:	2300      	movs	r3, #0
 8005298:	9309      	str	r3, [sp, #36]	; 0x24
 800529a:	2320      	movs	r3, #32
 800529c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80052a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80052a4:	2330      	movs	r3, #48	; 0x30
 80052a6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005450 <_svfiprintf_r+0x1ec>
 80052aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80052ae:	f04f 0901 	mov.w	r9, #1
 80052b2:	4623      	mov	r3, r4
 80052b4:	469a      	mov	sl, r3
 80052b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80052ba:	b10a      	cbz	r2, 80052c0 <_svfiprintf_r+0x5c>
 80052bc:	2a25      	cmp	r2, #37	; 0x25
 80052be:	d1f9      	bne.n	80052b4 <_svfiprintf_r+0x50>
 80052c0:	ebba 0b04 	subs.w	fp, sl, r4
 80052c4:	d00b      	beq.n	80052de <_svfiprintf_r+0x7a>
 80052c6:	465b      	mov	r3, fp
 80052c8:	4622      	mov	r2, r4
 80052ca:	4629      	mov	r1, r5
 80052cc:	4638      	mov	r0, r7
 80052ce:	f7ff ff6d 	bl	80051ac <__ssputs_r>
 80052d2:	3001      	adds	r0, #1
 80052d4:	f000 80aa 	beq.w	800542c <_svfiprintf_r+0x1c8>
 80052d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80052da:	445a      	add	r2, fp
 80052dc:	9209      	str	r2, [sp, #36]	; 0x24
 80052de:	f89a 3000 	ldrb.w	r3, [sl]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	f000 80a2 	beq.w	800542c <_svfiprintf_r+0x1c8>
 80052e8:	2300      	movs	r3, #0
 80052ea:	f04f 32ff 	mov.w	r2, #4294967295
 80052ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80052f2:	f10a 0a01 	add.w	sl, sl, #1
 80052f6:	9304      	str	r3, [sp, #16]
 80052f8:	9307      	str	r3, [sp, #28]
 80052fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80052fe:	931a      	str	r3, [sp, #104]	; 0x68
 8005300:	4654      	mov	r4, sl
 8005302:	2205      	movs	r2, #5
 8005304:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005308:	4851      	ldr	r0, [pc, #324]	; (8005450 <_svfiprintf_r+0x1ec>)
 800530a:	f7fa ff69 	bl	80001e0 <memchr>
 800530e:	9a04      	ldr	r2, [sp, #16]
 8005310:	b9d8      	cbnz	r0, 800534a <_svfiprintf_r+0xe6>
 8005312:	06d0      	lsls	r0, r2, #27
 8005314:	bf44      	itt	mi
 8005316:	2320      	movmi	r3, #32
 8005318:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800531c:	0711      	lsls	r1, r2, #28
 800531e:	bf44      	itt	mi
 8005320:	232b      	movmi	r3, #43	; 0x2b
 8005322:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005326:	f89a 3000 	ldrb.w	r3, [sl]
 800532a:	2b2a      	cmp	r3, #42	; 0x2a
 800532c:	d015      	beq.n	800535a <_svfiprintf_r+0xf6>
 800532e:	9a07      	ldr	r2, [sp, #28]
 8005330:	4654      	mov	r4, sl
 8005332:	2000      	movs	r0, #0
 8005334:	f04f 0c0a 	mov.w	ip, #10
 8005338:	4621      	mov	r1, r4
 800533a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800533e:	3b30      	subs	r3, #48	; 0x30
 8005340:	2b09      	cmp	r3, #9
 8005342:	d94e      	bls.n	80053e2 <_svfiprintf_r+0x17e>
 8005344:	b1b0      	cbz	r0, 8005374 <_svfiprintf_r+0x110>
 8005346:	9207      	str	r2, [sp, #28]
 8005348:	e014      	b.n	8005374 <_svfiprintf_r+0x110>
 800534a:	eba0 0308 	sub.w	r3, r0, r8
 800534e:	fa09 f303 	lsl.w	r3, r9, r3
 8005352:	4313      	orrs	r3, r2
 8005354:	9304      	str	r3, [sp, #16]
 8005356:	46a2      	mov	sl, r4
 8005358:	e7d2      	b.n	8005300 <_svfiprintf_r+0x9c>
 800535a:	9b03      	ldr	r3, [sp, #12]
 800535c:	1d19      	adds	r1, r3, #4
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	9103      	str	r1, [sp, #12]
 8005362:	2b00      	cmp	r3, #0
 8005364:	bfbb      	ittet	lt
 8005366:	425b      	neglt	r3, r3
 8005368:	f042 0202 	orrlt.w	r2, r2, #2
 800536c:	9307      	strge	r3, [sp, #28]
 800536e:	9307      	strlt	r3, [sp, #28]
 8005370:	bfb8      	it	lt
 8005372:	9204      	strlt	r2, [sp, #16]
 8005374:	7823      	ldrb	r3, [r4, #0]
 8005376:	2b2e      	cmp	r3, #46	; 0x2e
 8005378:	d10c      	bne.n	8005394 <_svfiprintf_r+0x130>
 800537a:	7863      	ldrb	r3, [r4, #1]
 800537c:	2b2a      	cmp	r3, #42	; 0x2a
 800537e:	d135      	bne.n	80053ec <_svfiprintf_r+0x188>
 8005380:	9b03      	ldr	r3, [sp, #12]
 8005382:	1d1a      	adds	r2, r3, #4
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	9203      	str	r2, [sp, #12]
 8005388:	2b00      	cmp	r3, #0
 800538a:	bfb8      	it	lt
 800538c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005390:	3402      	adds	r4, #2
 8005392:	9305      	str	r3, [sp, #20]
 8005394:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005460 <_svfiprintf_r+0x1fc>
 8005398:	7821      	ldrb	r1, [r4, #0]
 800539a:	2203      	movs	r2, #3
 800539c:	4650      	mov	r0, sl
 800539e:	f7fa ff1f 	bl	80001e0 <memchr>
 80053a2:	b140      	cbz	r0, 80053b6 <_svfiprintf_r+0x152>
 80053a4:	2340      	movs	r3, #64	; 0x40
 80053a6:	eba0 000a 	sub.w	r0, r0, sl
 80053aa:	fa03 f000 	lsl.w	r0, r3, r0
 80053ae:	9b04      	ldr	r3, [sp, #16]
 80053b0:	4303      	orrs	r3, r0
 80053b2:	3401      	adds	r4, #1
 80053b4:	9304      	str	r3, [sp, #16]
 80053b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053ba:	4826      	ldr	r0, [pc, #152]	; (8005454 <_svfiprintf_r+0x1f0>)
 80053bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80053c0:	2206      	movs	r2, #6
 80053c2:	f7fa ff0d 	bl	80001e0 <memchr>
 80053c6:	2800      	cmp	r0, #0
 80053c8:	d038      	beq.n	800543c <_svfiprintf_r+0x1d8>
 80053ca:	4b23      	ldr	r3, [pc, #140]	; (8005458 <_svfiprintf_r+0x1f4>)
 80053cc:	bb1b      	cbnz	r3, 8005416 <_svfiprintf_r+0x1b2>
 80053ce:	9b03      	ldr	r3, [sp, #12]
 80053d0:	3307      	adds	r3, #7
 80053d2:	f023 0307 	bic.w	r3, r3, #7
 80053d6:	3308      	adds	r3, #8
 80053d8:	9303      	str	r3, [sp, #12]
 80053da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053dc:	4433      	add	r3, r6
 80053de:	9309      	str	r3, [sp, #36]	; 0x24
 80053e0:	e767      	b.n	80052b2 <_svfiprintf_r+0x4e>
 80053e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80053e6:	460c      	mov	r4, r1
 80053e8:	2001      	movs	r0, #1
 80053ea:	e7a5      	b.n	8005338 <_svfiprintf_r+0xd4>
 80053ec:	2300      	movs	r3, #0
 80053ee:	3401      	adds	r4, #1
 80053f0:	9305      	str	r3, [sp, #20]
 80053f2:	4619      	mov	r1, r3
 80053f4:	f04f 0c0a 	mov.w	ip, #10
 80053f8:	4620      	mov	r0, r4
 80053fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80053fe:	3a30      	subs	r2, #48	; 0x30
 8005400:	2a09      	cmp	r2, #9
 8005402:	d903      	bls.n	800540c <_svfiprintf_r+0x1a8>
 8005404:	2b00      	cmp	r3, #0
 8005406:	d0c5      	beq.n	8005394 <_svfiprintf_r+0x130>
 8005408:	9105      	str	r1, [sp, #20]
 800540a:	e7c3      	b.n	8005394 <_svfiprintf_r+0x130>
 800540c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005410:	4604      	mov	r4, r0
 8005412:	2301      	movs	r3, #1
 8005414:	e7f0      	b.n	80053f8 <_svfiprintf_r+0x194>
 8005416:	ab03      	add	r3, sp, #12
 8005418:	9300      	str	r3, [sp, #0]
 800541a:	462a      	mov	r2, r5
 800541c:	4b0f      	ldr	r3, [pc, #60]	; (800545c <_svfiprintf_r+0x1f8>)
 800541e:	a904      	add	r1, sp, #16
 8005420:	4638      	mov	r0, r7
 8005422:	f3af 8000 	nop.w
 8005426:	1c42      	adds	r2, r0, #1
 8005428:	4606      	mov	r6, r0
 800542a:	d1d6      	bne.n	80053da <_svfiprintf_r+0x176>
 800542c:	89ab      	ldrh	r3, [r5, #12]
 800542e:	065b      	lsls	r3, r3, #25
 8005430:	f53f af2c 	bmi.w	800528c <_svfiprintf_r+0x28>
 8005434:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005436:	b01d      	add	sp, #116	; 0x74
 8005438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800543c:	ab03      	add	r3, sp, #12
 800543e:	9300      	str	r3, [sp, #0]
 8005440:	462a      	mov	r2, r5
 8005442:	4b06      	ldr	r3, [pc, #24]	; (800545c <_svfiprintf_r+0x1f8>)
 8005444:	a904      	add	r1, sp, #16
 8005446:	4638      	mov	r0, r7
 8005448:	f000 f9d4 	bl	80057f4 <_printf_i>
 800544c:	e7eb      	b.n	8005426 <_svfiprintf_r+0x1c2>
 800544e:	bf00      	nop
 8005450:	08005f5c 	.word	0x08005f5c
 8005454:	08005f66 	.word	0x08005f66
 8005458:	00000000 	.word	0x00000000
 800545c:	080051ad 	.word	0x080051ad
 8005460:	08005f62 	.word	0x08005f62

08005464 <__sfputc_r>:
 8005464:	6893      	ldr	r3, [r2, #8]
 8005466:	3b01      	subs	r3, #1
 8005468:	2b00      	cmp	r3, #0
 800546a:	b410      	push	{r4}
 800546c:	6093      	str	r3, [r2, #8]
 800546e:	da08      	bge.n	8005482 <__sfputc_r+0x1e>
 8005470:	6994      	ldr	r4, [r2, #24]
 8005472:	42a3      	cmp	r3, r4
 8005474:	db01      	blt.n	800547a <__sfputc_r+0x16>
 8005476:	290a      	cmp	r1, #10
 8005478:	d103      	bne.n	8005482 <__sfputc_r+0x1e>
 800547a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800547e:	f7ff bad5 	b.w	8004a2c <__swbuf_r>
 8005482:	6813      	ldr	r3, [r2, #0]
 8005484:	1c58      	adds	r0, r3, #1
 8005486:	6010      	str	r0, [r2, #0]
 8005488:	7019      	strb	r1, [r3, #0]
 800548a:	4608      	mov	r0, r1
 800548c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005490:	4770      	bx	lr

08005492 <__sfputs_r>:
 8005492:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005494:	4606      	mov	r6, r0
 8005496:	460f      	mov	r7, r1
 8005498:	4614      	mov	r4, r2
 800549a:	18d5      	adds	r5, r2, r3
 800549c:	42ac      	cmp	r4, r5
 800549e:	d101      	bne.n	80054a4 <__sfputs_r+0x12>
 80054a0:	2000      	movs	r0, #0
 80054a2:	e007      	b.n	80054b4 <__sfputs_r+0x22>
 80054a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054a8:	463a      	mov	r2, r7
 80054aa:	4630      	mov	r0, r6
 80054ac:	f7ff ffda 	bl	8005464 <__sfputc_r>
 80054b0:	1c43      	adds	r3, r0, #1
 80054b2:	d1f3      	bne.n	800549c <__sfputs_r+0xa>
 80054b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080054b8 <_vfiprintf_r>:
 80054b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054bc:	460d      	mov	r5, r1
 80054be:	b09d      	sub	sp, #116	; 0x74
 80054c0:	4614      	mov	r4, r2
 80054c2:	4698      	mov	r8, r3
 80054c4:	4606      	mov	r6, r0
 80054c6:	b118      	cbz	r0, 80054d0 <_vfiprintf_r+0x18>
 80054c8:	6983      	ldr	r3, [r0, #24]
 80054ca:	b90b      	cbnz	r3, 80054d0 <_vfiprintf_r+0x18>
 80054cc:	f7ff fc88 	bl	8004de0 <__sinit>
 80054d0:	4b89      	ldr	r3, [pc, #548]	; (80056f8 <_vfiprintf_r+0x240>)
 80054d2:	429d      	cmp	r5, r3
 80054d4:	d11b      	bne.n	800550e <_vfiprintf_r+0x56>
 80054d6:	6875      	ldr	r5, [r6, #4]
 80054d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80054da:	07d9      	lsls	r1, r3, #31
 80054dc:	d405      	bmi.n	80054ea <_vfiprintf_r+0x32>
 80054de:	89ab      	ldrh	r3, [r5, #12]
 80054e0:	059a      	lsls	r2, r3, #22
 80054e2:	d402      	bmi.n	80054ea <_vfiprintf_r+0x32>
 80054e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80054e6:	f7ff fd19 	bl	8004f1c <__retarget_lock_acquire_recursive>
 80054ea:	89ab      	ldrh	r3, [r5, #12]
 80054ec:	071b      	lsls	r3, r3, #28
 80054ee:	d501      	bpl.n	80054f4 <_vfiprintf_r+0x3c>
 80054f0:	692b      	ldr	r3, [r5, #16]
 80054f2:	b9eb      	cbnz	r3, 8005530 <_vfiprintf_r+0x78>
 80054f4:	4629      	mov	r1, r5
 80054f6:	4630      	mov	r0, r6
 80054f8:	f7ff faea 	bl	8004ad0 <__swsetup_r>
 80054fc:	b1c0      	cbz	r0, 8005530 <_vfiprintf_r+0x78>
 80054fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005500:	07dc      	lsls	r4, r3, #31
 8005502:	d50e      	bpl.n	8005522 <_vfiprintf_r+0x6a>
 8005504:	f04f 30ff 	mov.w	r0, #4294967295
 8005508:	b01d      	add	sp, #116	; 0x74
 800550a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800550e:	4b7b      	ldr	r3, [pc, #492]	; (80056fc <_vfiprintf_r+0x244>)
 8005510:	429d      	cmp	r5, r3
 8005512:	d101      	bne.n	8005518 <_vfiprintf_r+0x60>
 8005514:	68b5      	ldr	r5, [r6, #8]
 8005516:	e7df      	b.n	80054d8 <_vfiprintf_r+0x20>
 8005518:	4b79      	ldr	r3, [pc, #484]	; (8005700 <_vfiprintf_r+0x248>)
 800551a:	429d      	cmp	r5, r3
 800551c:	bf08      	it	eq
 800551e:	68f5      	ldreq	r5, [r6, #12]
 8005520:	e7da      	b.n	80054d8 <_vfiprintf_r+0x20>
 8005522:	89ab      	ldrh	r3, [r5, #12]
 8005524:	0598      	lsls	r0, r3, #22
 8005526:	d4ed      	bmi.n	8005504 <_vfiprintf_r+0x4c>
 8005528:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800552a:	f7ff fcf8 	bl	8004f1e <__retarget_lock_release_recursive>
 800552e:	e7e9      	b.n	8005504 <_vfiprintf_r+0x4c>
 8005530:	2300      	movs	r3, #0
 8005532:	9309      	str	r3, [sp, #36]	; 0x24
 8005534:	2320      	movs	r3, #32
 8005536:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800553a:	f8cd 800c 	str.w	r8, [sp, #12]
 800553e:	2330      	movs	r3, #48	; 0x30
 8005540:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005704 <_vfiprintf_r+0x24c>
 8005544:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005548:	f04f 0901 	mov.w	r9, #1
 800554c:	4623      	mov	r3, r4
 800554e:	469a      	mov	sl, r3
 8005550:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005554:	b10a      	cbz	r2, 800555a <_vfiprintf_r+0xa2>
 8005556:	2a25      	cmp	r2, #37	; 0x25
 8005558:	d1f9      	bne.n	800554e <_vfiprintf_r+0x96>
 800555a:	ebba 0b04 	subs.w	fp, sl, r4
 800555e:	d00b      	beq.n	8005578 <_vfiprintf_r+0xc0>
 8005560:	465b      	mov	r3, fp
 8005562:	4622      	mov	r2, r4
 8005564:	4629      	mov	r1, r5
 8005566:	4630      	mov	r0, r6
 8005568:	f7ff ff93 	bl	8005492 <__sfputs_r>
 800556c:	3001      	adds	r0, #1
 800556e:	f000 80aa 	beq.w	80056c6 <_vfiprintf_r+0x20e>
 8005572:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005574:	445a      	add	r2, fp
 8005576:	9209      	str	r2, [sp, #36]	; 0x24
 8005578:	f89a 3000 	ldrb.w	r3, [sl]
 800557c:	2b00      	cmp	r3, #0
 800557e:	f000 80a2 	beq.w	80056c6 <_vfiprintf_r+0x20e>
 8005582:	2300      	movs	r3, #0
 8005584:	f04f 32ff 	mov.w	r2, #4294967295
 8005588:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800558c:	f10a 0a01 	add.w	sl, sl, #1
 8005590:	9304      	str	r3, [sp, #16]
 8005592:	9307      	str	r3, [sp, #28]
 8005594:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005598:	931a      	str	r3, [sp, #104]	; 0x68
 800559a:	4654      	mov	r4, sl
 800559c:	2205      	movs	r2, #5
 800559e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055a2:	4858      	ldr	r0, [pc, #352]	; (8005704 <_vfiprintf_r+0x24c>)
 80055a4:	f7fa fe1c 	bl	80001e0 <memchr>
 80055a8:	9a04      	ldr	r2, [sp, #16]
 80055aa:	b9d8      	cbnz	r0, 80055e4 <_vfiprintf_r+0x12c>
 80055ac:	06d1      	lsls	r1, r2, #27
 80055ae:	bf44      	itt	mi
 80055b0:	2320      	movmi	r3, #32
 80055b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055b6:	0713      	lsls	r3, r2, #28
 80055b8:	bf44      	itt	mi
 80055ba:	232b      	movmi	r3, #43	; 0x2b
 80055bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055c0:	f89a 3000 	ldrb.w	r3, [sl]
 80055c4:	2b2a      	cmp	r3, #42	; 0x2a
 80055c6:	d015      	beq.n	80055f4 <_vfiprintf_r+0x13c>
 80055c8:	9a07      	ldr	r2, [sp, #28]
 80055ca:	4654      	mov	r4, sl
 80055cc:	2000      	movs	r0, #0
 80055ce:	f04f 0c0a 	mov.w	ip, #10
 80055d2:	4621      	mov	r1, r4
 80055d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80055d8:	3b30      	subs	r3, #48	; 0x30
 80055da:	2b09      	cmp	r3, #9
 80055dc:	d94e      	bls.n	800567c <_vfiprintf_r+0x1c4>
 80055de:	b1b0      	cbz	r0, 800560e <_vfiprintf_r+0x156>
 80055e0:	9207      	str	r2, [sp, #28]
 80055e2:	e014      	b.n	800560e <_vfiprintf_r+0x156>
 80055e4:	eba0 0308 	sub.w	r3, r0, r8
 80055e8:	fa09 f303 	lsl.w	r3, r9, r3
 80055ec:	4313      	orrs	r3, r2
 80055ee:	9304      	str	r3, [sp, #16]
 80055f0:	46a2      	mov	sl, r4
 80055f2:	e7d2      	b.n	800559a <_vfiprintf_r+0xe2>
 80055f4:	9b03      	ldr	r3, [sp, #12]
 80055f6:	1d19      	adds	r1, r3, #4
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	9103      	str	r1, [sp, #12]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	bfbb      	ittet	lt
 8005600:	425b      	neglt	r3, r3
 8005602:	f042 0202 	orrlt.w	r2, r2, #2
 8005606:	9307      	strge	r3, [sp, #28]
 8005608:	9307      	strlt	r3, [sp, #28]
 800560a:	bfb8      	it	lt
 800560c:	9204      	strlt	r2, [sp, #16]
 800560e:	7823      	ldrb	r3, [r4, #0]
 8005610:	2b2e      	cmp	r3, #46	; 0x2e
 8005612:	d10c      	bne.n	800562e <_vfiprintf_r+0x176>
 8005614:	7863      	ldrb	r3, [r4, #1]
 8005616:	2b2a      	cmp	r3, #42	; 0x2a
 8005618:	d135      	bne.n	8005686 <_vfiprintf_r+0x1ce>
 800561a:	9b03      	ldr	r3, [sp, #12]
 800561c:	1d1a      	adds	r2, r3, #4
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	9203      	str	r2, [sp, #12]
 8005622:	2b00      	cmp	r3, #0
 8005624:	bfb8      	it	lt
 8005626:	f04f 33ff 	movlt.w	r3, #4294967295
 800562a:	3402      	adds	r4, #2
 800562c:	9305      	str	r3, [sp, #20]
 800562e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005714 <_vfiprintf_r+0x25c>
 8005632:	7821      	ldrb	r1, [r4, #0]
 8005634:	2203      	movs	r2, #3
 8005636:	4650      	mov	r0, sl
 8005638:	f7fa fdd2 	bl	80001e0 <memchr>
 800563c:	b140      	cbz	r0, 8005650 <_vfiprintf_r+0x198>
 800563e:	2340      	movs	r3, #64	; 0x40
 8005640:	eba0 000a 	sub.w	r0, r0, sl
 8005644:	fa03 f000 	lsl.w	r0, r3, r0
 8005648:	9b04      	ldr	r3, [sp, #16]
 800564a:	4303      	orrs	r3, r0
 800564c:	3401      	adds	r4, #1
 800564e:	9304      	str	r3, [sp, #16]
 8005650:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005654:	482c      	ldr	r0, [pc, #176]	; (8005708 <_vfiprintf_r+0x250>)
 8005656:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800565a:	2206      	movs	r2, #6
 800565c:	f7fa fdc0 	bl	80001e0 <memchr>
 8005660:	2800      	cmp	r0, #0
 8005662:	d03f      	beq.n	80056e4 <_vfiprintf_r+0x22c>
 8005664:	4b29      	ldr	r3, [pc, #164]	; (800570c <_vfiprintf_r+0x254>)
 8005666:	bb1b      	cbnz	r3, 80056b0 <_vfiprintf_r+0x1f8>
 8005668:	9b03      	ldr	r3, [sp, #12]
 800566a:	3307      	adds	r3, #7
 800566c:	f023 0307 	bic.w	r3, r3, #7
 8005670:	3308      	adds	r3, #8
 8005672:	9303      	str	r3, [sp, #12]
 8005674:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005676:	443b      	add	r3, r7
 8005678:	9309      	str	r3, [sp, #36]	; 0x24
 800567a:	e767      	b.n	800554c <_vfiprintf_r+0x94>
 800567c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005680:	460c      	mov	r4, r1
 8005682:	2001      	movs	r0, #1
 8005684:	e7a5      	b.n	80055d2 <_vfiprintf_r+0x11a>
 8005686:	2300      	movs	r3, #0
 8005688:	3401      	adds	r4, #1
 800568a:	9305      	str	r3, [sp, #20]
 800568c:	4619      	mov	r1, r3
 800568e:	f04f 0c0a 	mov.w	ip, #10
 8005692:	4620      	mov	r0, r4
 8005694:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005698:	3a30      	subs	r2, #48	; 0x30
 800569a:	2a09      	cmp	r2, #9
 800569c:	d903      	bls.n	80056a6 <_vfiprintf_r+0x1ee>
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d0c5      	beq.n	800562e <_vfiprintf_r+0x176>
 80056a2:	9105      	str	r1, [sp, #20]
 80056a4:	e7c3      	b.n	800562e <_vfiprintf_r+0x176>
 80056a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80056aa:	4604      	mov	r4, r0
 80056ac:	2301      	movs	r3, #1
 80056ae:	e7f0      	b.n	8005692 <_vfiprintf_r+0x1da>
 80056b0:	ab03      	add	r3, sp, #12
 80056b2:	9300      	str	r3, [sp, #0]
 80056b4:	462a      	mov	r2, r5
 80056b6:	4b16      	ldr	r3, [pc, #88]	; (8005710 <_vfiprintf_r+0x258>)
 80056b8:	a904      	add	r1, sp, #16
 80056ba:	4630      	mov	r0, r6
 80056bc:	f3af 8000 	nop.w
 80056c0:	4607      	mov	r7, r0
 80056c2:	1c78      	adds	r0, r7, #1
 80056c4:	d1d6      	bne.n	8005674 <_vfiprintf_r+0x1bc>
 80056c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80056c8:	07d9      	lsls	r1, r3, #31
 80056ca:	d405      	bmi.n	80056d8 <_vfiprintf_r+0x220>
 80056cc:	89ab      	ldrh	r3, [r5, #12]
 80056ce:	059a      	lsls	r2, r3, #22
 80056d0:	d402      	bmi.n	80056d8 <_vfiprintf_r+0x220>
 80056d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80056d4:	f7ff fc23 	bl	8004f1e <__retarget_lock_release_recursive>
 80056d8:	89ab      	ldrh	r3, [r5, #12]
 80056da:	065b      	lsls	r3, r3, #25
 80056dc:	f53f af12 	bmi.w	8005504 <_vfiprintf_r+0x4c>
 80056e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80056e2:	e711      	b.n	8005508 <_vfiprintf_r+0x50>
 80056e4:	ab03      	add	r3, sp, #12
 80056e6:	9300      	str	r3, [sp, #0]
 80056e8:	462a      	mov	r2, r5
 80056ea:	4b09      	ldr	r3, [pc, #36]	; (8005710 <_vfiprintf_r+0x258>)
 80056ec:	a904      	add	r1, sp, #16
 80056ee:	4630      	mov	r0, r6
 80056f0:	f000 f880 	bl	80057f4 <_printf_i>
 80056f4:	e7e4      	b.n	80056c0 <_vfiprintf_r+0x208>
 80056f6:	bf00      	nop
 80056f8:	08005f1c 	.word	0x08005f1c
 80056fc:	08005f3c 	.word	0x08005f3c
 8005700:	08005efc 	.word	0x08005efc
 8005704:	08005f5c 	.word	0x08005f5c
 8005708:	08005f66 	.word	0x08005f66
 800570c:	00000000 	.word	0x00000000
 8005710:	08005493 	.word	0x08005493
 8005714:	08005f62 	.word	0x08005f62

08005718 <_printf_common>:
 8005718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800571c:	4616      	mov	r6, r2
 800571e:	4699      	mov	r9, r3
 8005720:	688a      	ldr	r2, [r1, #8]
 8005722:	690b      	ldr	r3, [r1, #16]
 8005724:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005728:	4293      	cmp	r3, r2
 800572a:	bfb8      	it	lt
 800572c:	4613      	movlt	r3, r2
 800572e:	6033      	str	r3, [r6, #0]
 8005730:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005734:	4607      	mov	r7, r0
 8005736:	460c      	mov	r4, r1
 8005738:	b10a      	cbz	r2, 800573e <_printf_common+0x26>
 800573a:	3301      	adds	r3, #1
 800573c:	6033      	str	r3, [r6, #0]
 800573e:	6823      	ldr	r3, [r4, #0]
 8005740:	0699      	lsls	r1, r3, #26
 8005742:	bf42      	ittt	mi
 8005744:	6833      	ldrmi	r3, [r6, #0]
 8005746:	3302      	addmi	r3, #2
 8005748:	6033      	strmi	r3, [r6, #0]
 800574a:	6825      	ldr	r5, [r4, #0]
 800574c:	f015 0506 	ands.w	r5, r5, #6
 8005750:	d106      	bne.n	8005760 <_printf_common+0x48>
 8005752:	f104 0a19 	add.w	sl, r4, #25
 8005756:	68e3      	ldr	r3, [r4, #12]
 8005758:	6832      	ldr	r2, [r6, #0]
 800575a:	1a9b      	subs	r3, r3, r2
 800575c:	42ab      	cmp	r3, r5
 800575e:	dc26      	bgt.n	80057ae <_printf_common+0x96>
 8005760:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005764:	1e13      	subs	r3, r2, #0
 8005766:	6822      	ldr	r2, [r4, #0]
 8005768:	bf18      	it	ne
 800576a:	2301      	movne	r3, #1
 800576c:	0692      	lsls	r2, r2, #26
 800576e:	d42b      	bmi.n	80057c8 <_printf_common+0xb0>
 8005770:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005774:	4649      	mov	r1, r9
 8005776:	4638      	mov	r0, r7
 8005778:	47c0      	blx	r8
 800577a:	3001      	adds	r0, #1
 800577c:	d01e      	beq.n	80057bc <_printf_common+0xa4>
 800577e:	6823      	ldr	r3, [r4, #0]
 8005780:	68e5      	ldr	r5, [r4, #12]
 8005782:	6832      	ldr	r2, [r6, #0]
 8005784:	f003 0306 	and.w	r3, r3, #6
 8005788:	2b04      	cmp	r3, #4
 800578a:	bf08      	it	eq
 800578c:	1aad      	subeq	r5, r5, r2
 800578e:	68a3      	ldr	r3, [r4, #8]
 8005790:	6922      	ldr	r2, [r4, #16]
 8005792:	bf0c      	ite	eq
 8005794:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005798:	2500      	movne	r5, #0
 800579a:	4293      	cmp	r3, r2
 800579c:	bfc4      	itt	gt
 800579e:	1a9b      	subgt	r3, r3, r2
 80057a0:	18ed      	addgt	r5, r5, r3
 80057a2:	2600      	movs	r6, #0
 80057a4:	341a      	adds	r4, #26
 80057a6:	42b5      	cmp	r5, r6
 80057a8:	d11a      	bne.n	80057e0 <_printf_common+0xc8>
 80057aa:	2000      	movs	r0, #0
 80057ac:	e008      	b.n	80057c0 <_printf_common+0xa8>
 80057ae:	2301      	movs	r3, #1
 80057b0:	4652      	mov	r2, sl
 80057b2:	4649      	mov	r1, r9
 80057b4:	4638      	mov	r0, r7
 80057b6:	47c0      	blx	r8
 80057b8:	3001      	adds	r0, #1
 80057ba:	d103      	bne.n	80057c4 <_printf_common+0xac>
 80057bc:	f04f 30ff 	mov.w	r0, #4294967295
 80057c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057c4:	3501      	adds	r5, #1
 80057c6:	e7c6      	b.n	8005756 <_printf_common+0x3e>
 80057c8:	18e1      	adds	r1, r4, r3
 80057ca:	1c5a      	adds	r2, r3, #1
 80057cc:	2030      	movs	r0, #48	; 0x30
 80057ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80057d2:	4422      	add	r2, r4
 80057d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80057d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80057dc:	3302      	adds	r3, #2
 80057de:	e7c7      	b.n	8005770 <_printf_common+0x58>
 80057e0:	2301      	movs	r3, #1
 80057e2:	4622      	mov	r2, r4
 80057e4:	4649      	mov	r1, r9
 80057e6:	4638      	mov	r0, r7
 80057e8:	47c0      	blx	r8
 80057ea:	3001      	adds	r0, #1
 80057ec:	d0e6      	beq.n	80057bc <_printf_common+0xa4>
 80057ee:	3601      	adds	r6, #1
 80057f0:	e7d9      	b.n	80057a6 <_printf_common+0x8e>
	...

080057f4 <_printf_i>:
 80057f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057f8:	7e0f      	ldrb	r7, [r1, #24]
 80057fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80057fc:	2f78      	cmp	r7, #120	; 0x78
 80057fe:	4691      	mov	r9, r2
 8005800:	4680      	mov	r8, r0
 8005802:	460c      	mov	r4, r1
 8005804:	469a      	mov	sl, r3
 8005806:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800580a:	d807      	bhi.n	800581c <_printf_i+0x28>
 800580c:	2f62      	cmp	r7, #98	; 0x62
 800580e:	d80a      	bhi.n	8005826 <_printf_i+0x32>
 8005810:	2f00      	cmp	r7, #0
 8005812:	f000 80d8 	beq.w	80059c6 <_printf_i+0x1d2>
 8005816:	2f58      	cmp	r7, #88	; 0x58
 8005818:	f000 80a3 	beq.w	8005962 <_printf_i+0x16e>
 800581c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005820:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005824:	e03a      	b.n	800589c <_printf_i+0xa8>
 8005826:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800582a:	2b15      	cmp	r3, #21
 800582c:	d8f6      	bhi.n	800581c <_printf_i+0x28>
 800582e:	a101      	add	r1, pc, #4	; (adr r1, 8005834 <_printf_i+0x40>)
 8005830:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005834:	0800588d 	.word	0x0800588d
 8005838:	080058a1 	.word	0x080058a1
 800583c:	0800581d 	.word	0x0800581d
 8005840:	0800581d 	.word	0x0800581d
 8005844:	0800581d 	.word	0x0800581d
 8005848:	0800581d 	.word	0x0800581d
 800584c:	080058a1 	.word	0x080058a1
 8005850:	0800581d 	.word	0x0800581d
 8005854:	0800581d 	.word	0x0800581d
 8005858:	0800581d 	.word	0x0800581d
 800585c:	0800581d 	.word	0x0800581d
 8005860:	080059ad 	.word	0x080059ad
 8005864:	080058d1 	.word	0x080058d1
 8005868:	0800598f 	.word	0x0800598f
 800586c:	0800581d 	.word	0x0800581d
 8005870:	0800581d 	.word	0x0800581d
 8005874:	080059cf 	.word	0x080059cf
 8005878:	0800581d 	.word	0x0800581d
 800587c:	080058d1 	.word	0x080058d1
 8005880:	0800581d 	.word	0x0800581d
 8005884:	0800581d 	.word	0x0800581d
 8005888:	08005997 	.word	0x08005997
 800588c:	682b      	ldr	r3, [r5, #0]
 800588e:	1d1a      	adds	r2, r3, #4
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	602a      	str	r2, [r5, #0]
 8005894:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005898:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800589c:	2301      	movs	r3, #1
 800589e:	e0a3      	b.n	80059e8 <_printf_i+0x1f4>
 80058a0:	6820      	ldr	r0, [r4, #0]
 80058a2:	6829      	ldr	r1, [r5, #0]
 80058a4:	0606      	lsls	r6, r0, #24
 80058a6:	f101 0304 	add.w	r3, r1, #4
 80058aa:	d50a      	bpl.n	80058c2 <_printf_i+0xce>
 80058ac:	680e      	ldr	r6, [r1, #0]
 80058ae:	602b      	str	r3, [r5, #0]
 80058b0:	2e00      	cmp	r6, #0
 80058b2:	da03      	bge.n	80058bc <_printf_i+0xc8>
 80058b4:	232d      	movs	r3, #45	; 0x2d
 80058b6:	4276      	negs	r6, r6
 80058b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058bc:	485e      	ldr	r0, [pc, #376]	; (8005a38 <_printf_i+0x244>)
 80058be:	230a      	movs	r3, #10
 80058c0:	e019      	b.n	80058f6 <_printf_i+0x102>
 80058c2:	680e      	ldr	r6, [r1, #0]
 80058c4:	602b      	str	r3, [r5, #0]
 80058c6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80058ca:	bf18      	it	ne
 80058cc:	b236      	sxthne	r6, r6
 80058ce:	e7ef      	b.n	80058b0 <_printf_i+0xbc>
 80058d0:	682b      	ldr	r3, [r5, #0]
 80058d2:	6820      	ldr	r0, [r4, #0]
 80058d4:	1d19      	adds	r1, r3, #4
 80058d6:	6029      	str	r1, [r5, #0]
 80058d8:	0601      	lsls	r1, r0, #24
 80058da:	d501      	bpl.n	80058e0 <_printf_i+0xec>
 80058dc:	681e      	ldr	r6, [r3, #0]
 80058de:	e002      	b.n	80058e6 <_printf_i+0xf2>
 80058e0:	0646      	lsls	r6, r0, #25
 80058e2:	d5fb      	bpl.n	80058dc <_printf_i+0xe8>
 80058e4:	881e      	ldrh	r6, [r3, #0]
 80058e6:	4854      	ldr	r0, [pc, #336]	; (8005a38 <_printf_i+0x244>)
 80058e8:	2f6f      	cmp	r7, #111	; 0x6f
 80058ea:	bf0c      	ite	eq
 80058ec:	2308      	moveq	r3, #8
 80058ee:	230a      	movne	r3, #10
 80058f0:	2100      	movs	r1, #0
 80058f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80058f6:	6865      	ldr	r5, [r4, #4]
 80058f8:	60a5      	str	r5, [r4, #8]
 80058fa:	2d00      	cmp	r5, #0
 80058fc:	bfa2      	ittt	ge
 80058fe:	6821      	ldrge	r1, [r4, #0]
 8005900:	f021 0104 	bicge.w	r1, r1, #4
 8005904:	6021      	strge	r1, [r4, #0]
 8005906:	b90e      	cbnz	r6, 800590c <_printf_i+0x118>
 8005908:	2d00      	cmp	r5, #0
 800590a:	d04d      	beq.n	80059a8 <_printf_i+0x1b4>
 800590c:	4615      	mov	r5, r2
 800590e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005912:	fb03 6711 	mls	r7, r3, r1, r6
 8005916:	5dc7      	ldrb	r7, [r0, r7]
 8005918:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800591c:	4637      	mov	r7, r6
 800591e:	42bb      	cmp	r3, r7
 8005920:	460e      	mov	r6, r1
 8005922:	d9f4      	bls.n	800590e <_printf_i+0x11a>
 8005924:	2b08      	cmp	r3, #8
 8005926:	d10b      	bne.n	8005940 <_printf_i+0x14c>
 8005928:	6823      	ldr	r3, [r4, #0]
 800592a:	07de      	lsls	r6, r3, #31
 800592c:	d508      	bpl.n	8005940 <_printf_i+0x14c>
 800592e:	6923      	ldr	r3, [r4, #16]
 8005930:	6861      	ldr	r1, [r4, #4]
 8005932:	4299      	cmp	r1, r3
 8005934:	bfde      	ittt	le
 8005936:	2330      	movle	r3, #48	; 0x30
 8005938:	f805 3c01 	strble.w	r3, [r5, #-1]
 800593c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005940:	1b52      	subs	r2, r2, r5
 8005942:	6122      	str	r2, [r4, #16]
 8005944:	f8cd a000 	str.w	sl, [sp]
 8005948:	464b      	mov	r3, r9
 800594a:	aa03      	add	r2, sp, #12
 800594c:	4621      	mov	r1, r4
 800594e:	4640      	mov	r0, r8
 8005950:	f7ff fee2 	bl	8005718 <_printf_common>
 8005954:	3001      	adds	r0, #1
 8005956:	d14c      	bne.n	80059f2 <_printf_i+0x1fe>
 8005958:	f04f 30ff 	mov.w	r0, #4294967295
 800595c:	b004      	add	sp, #16
 800595e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005962:	4835      	ldr	r0, [pc, #212]	; (8005a38 <_printf_i+0x244>)
 8005964:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005968:	6829      	ldr	r1, [r5, #0]
 800596a:	6823      	ldr	r3, [r4, #0]
 800596c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005970:	6029      	str	r1, [r5, #0]
 8005972:	061d      	lsls	r5, r3, #24
 8005974:	d514      	bpl.n	80059a0 <_printf_i+0x1ac>
 8005976:	07df      	lsls	r7, r3, #31
 8005978:	bf44      	itt	mi
 800597a:	f043 0320 	orrmi.w	r3, r3, #32
 800597e:	6023      	strmi	r3, [r4, #0]
 8005980:	b91e      	cbnz	r6, 800598a <_printf_i+0x196>
 8005982:	6823      	ldr	r3, [r4, #0]
 8005984:	f023 0320 	bic.w	r3, r3, #32
 8005988:	6023      	str	r3, [r4, #0]
 800598a:	2310      	movs	r3, #16
 800598c:	e7b0      	b.n	80058f0 <_printf_i+0xfc>
 800598e:	6823      	ldr	r3, [r4, #0]
 8005990:	f043 0320 	orr.w	r3, r3, #32
 8005994:	6023      	str	r3, [r4, #0]
 8005996:	2378      	movs	r3, #120	; 0x78
 8005998:	4828      	ldr	r0, [pc, #160]	; (8005a3c <_printf_i+0x248>)
 800599a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800599e:	e7e3      	b.n	8005968 <_printf_i+0x174>
 80059a0:	0659      	lsls	r1, r3, #25
 80059a2:	bf48      	it	mi
 80059a4:	b2b6      	uxthmi	r6, r6
 80059a6:	e7e6      	b.n	8005976 <_printf_i+0x182>
 80059a8:	4615      	mov	r5, r2
 80059aa:	e7bb      	b.n	8005924 <_printf_i+0x130>
 80059ac:	682b      	ldr	r3, [r5, #0]
 80059ae:	6826      	ldr	r6, [r4, #0]
 80059b0:	6961      	ldr	r1, [r4, #20]
 80059b2:	1d18      	adds	r0, r3, #4
 80059b4:	6028      	str	r0, [r5, #0]
 80059b6:	0635      	lsls	r5, r6, #24
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	d501      	bpl.n	80059c0 <_printf_i+0x1cc>
 80059bc:	6019      	str	r1, [r3, #0]
 80059be:	e002      	b.n	80059c6 <_printf_i+0x1d2>
 80059c0:	0670      	lsls	r0, r6, #25
 80059c2:	d5fb      	bpl.n	80059bc <_printf_i+0x1c8>
 80059c4:	8019      	strh	r1, [r3, #0]
 80059c6:	2300      	movs	r3, #0
 80059c8:	6123      	str	r3, [r4, #16]
 80059ca:	4615      	mov	r5, r2
 80059cc:	e7ba      	b.n	8005944 <_printf_i+0x150>
 80059ce:	682b      	ldr	r3, [r5, #0]
 80059d0:	1d1a      	adds	r2, r3, #4
 80059d2:	602a      	str	r2, [r5, #0]
 80059d4:	681d      	ldr	r5, [r3, #0]
 80059d6:	6862      	ldr	r2, [r4, #4]
 80059d8:	2100      	movs	r1, #0
 80059da:	4628      	mov	r0, r5
 80059dc:	f7fa fc00 	bl	80001e0 <memchr>
 80059e0:	b108      	cbz	r0, 80059e6 <_printf_i+0x1f2>
 80059e2:	1b40      	subs	r0, r0, r5
 80059e4:	6060      	str	r0, [r4, #4]
 80059e6:	6863      	ldr	r3, [r4, #4]
 80059e8:	6123      	str	r3, [r4, #16]
 80059ea:	2300      	movs	r3, #0
 80059ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059f0:	e7a8      	b.n	8005944 <_printf_i+0x150>
 80059f2:	6923      	ldr	r3, [r4, #16]
 80059f4:	462a      	mov	r2, r5
 80059f6:	4649      	mov	r1, r9
 80059f8:	4640      	mov	r0, r8
 80059fa:	47d0      	blx	sl
 80059fc:	3001      	adds	r0, #1
 80059fe:	d0ab      	beq.n	8005958 <_printf_i+0x164>
 8005a00:	6823      	ldr	r3, [r4, #0]
 8005a02:	079b      	lsls	r3, r3, #30
 8005a04:	d413      	bmi.n	8005a2e <_printf_i+0x23a>
 8005a06:	68e0      	ldr	r0, [r4, #12]
 8005a08:	9b03      	ldr	r3, [sp, #12]
 8005a0a:	4298      	cmp	r0, r3
 8005a0c:	bfb8      	it	lt
 8005a0e:	4618      	movlt	r0, r3
 8005a10:	e7a4      	b.n	800595c <_printf_i+0x168>
 8005a12:	2301      	movs	r3, #1
 8005a14:	4632      	mov	r2, r6
 8005a16:	4649      	mov	r1, r9
 8005a18:	4640      	mov	r0, r8
 8005a1a:	47d0      	blx	sl
 8005a1c:	3001      	adds	r0, #1
 8005a1e:	d09b      	beq.n	8005958 <_printf_i+0x164>
 8005a20:	3501      	adds	r5, #1
 8005a22:	68e3      	ldr	r3, [r4, #12]
 8005a24:	9903      	ldr	r1, [sp, #12]
 8005a26:	1a5b      	subs	r3, r3, r1
 8005a28:	42ab      	cmp	r3, r5
 8005a2a:	dcf2      	bgt.n	8005a12 <_printf_i+0x21e>
 8005a2c:	e7eb      	b.n	8005a06 <_printf_i+0x212>
 8005a2e:	2500      	movs	r5, #0
 8005a30:	f104 0619 	add.w	r6, r4, #25
 8005a34:	e7f5      	b.n	8005a22 <_printf_i+0x22e>
 8005a36:	bf00      	nop
 8005a38:	08005f6d 	.word	0x08005f6d
 8005a3c:	08005f7e 	.word	0x08005f7e

08005a40 <_sbrk_r>:
 8005a40:	b538      	push	{r3, r4, r5, lr}
 8005a42:	4d06      	ldr	r5, [pc, #24]	; (8005a5c <_sbrk_r+0x1c>)
 8005a44:	2300      	movs	r3, #0
 8005a46:	4604      	mov	r4, r0
 8005a48:	4608      	mov	r0, r1
 8005a4a:	602b      	str	r3, [r5, #0]
 8005a4c:	f7fc f8a8 	bl	8001ba0 <_sbrk>
 8005a50:	1c43      	adds	r3, r0, #1
 8005a52:	d102      	bne.n	8005a5a <_sbrk_r+0x1a>
 8005a54:	682b      	ldr	r3, [r5, #0]
 8005a56:	b103      	cbz	r3, 8005a5a <_sbrk_r+0x1a>
 8005a58:	6023      	str	r3, [r4, #0]
 8005a5a:	bd38      	pop	{r3, r4, r5, pc}
 8005a5c:	20002eb4 	.word	0x20002eb4

08005a60 <__sread>:
 8005a60:	b510      	push	{r4, lr}
 8005a62:	460c      	mov	r4, r1
 8005a64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a68:	f000 f8f8 	bl	8005c5c <_read_r>
 8005a6c:	2800      	cmp	r0, #0
 8005a6e:	bfab      	itete	ge
 8005a70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005a72:	89a3      	ldrhlt	r3, [r4, #12]
 8005a74:	181b      	addge	r3, r3, r0
 8005a76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005a7a:	bfac      	ite	ge
 8005a7c:	6563      	strge	r3, [r4, #84]	; 0x54
 8005a7e:	81a3      	strhlt	r3, [r4, #12]
 8005a80:	bd10      	pop	{r4, pc}

08005a82 <__swrite>:
 8005a82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a86:	461f      	mov	r7, r3
 8005a88:	898b      	ldrh	r3, [r1, #12]
 8005a8a:	05db      	lsls	r3, r3, #23
 8005a8c:	4605      	mov	r5, r0
 8005a8e:	460c      	mov	r4, r1
 8005a90:	4616      	mov	r6, r2
 8005a92:	d505      	bpl.n	8005aa0 <__swrite+0x1e>
 8005a94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a98:	2302      	movs	r3, #2
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	f000 f868 	bl	8005b70 <_lseek_r>
 8005aa0:	89a3      	ldrh	r3, [r4, #12]
 8005aa2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005aa6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005aaa:	81a3      	strh	r3, [r4, #12]
 8005aac:	4632      	mov	r2, r6
 8005aae:	463b      	mov	r3, r7
 8005ab0:	4628      	mov	r0, r5
 8005ab2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ab6:	f000 b817 	b.w	8005ae8 <_write_r>

08005aba <__sseek>:
 8005aba:	b510      	push	{r4, lr}
 8005abc:	460c      	mov	r4, r1
 8005abe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ac2:	f000 f855 	bl	8005b70 <_lseek_r>
 8005ac6:	1c43      	adds	r3, r0, #1
 8005ac8:	89a3      	ldrh	r3, [r4, #12]
 8005aca:	bf15      	itete	ne
 8005acc:	6560      	strne	r0, [r4, #84]	; 0x54
 8005ace:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005ad2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005ad6:	81a3      	strheq	r3, [r4, #12]
 8005ad8:	bf18      	it	ne
 8005ada:	81a3      	strhne	r3, [r4, #12]
 8005adc:	bd10      	pop	{r4, pc}

08005ade <__sclose>:
 8005ade:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ae2:	f000 b813 	b.w	8005b0c <_close_r>
	...

08005ae8 <_write_r>:
 8005ae8:	b538      	push	{r3, r4, r5, lr}
 8005aea:	4d07      	ldr	r5, [pc, #28]	; (8005b08 <_write_r+0x20>)
 8005aec:	4604      	mov	r4, r0
 8005aee:	4608      	mov	r0, r1
 8005af0:	4611      	mov	r1, r2
 8005af2:	2200      	movs	r2, #0
 8005af4:	602a      	str	r2, [r5, #0]
 8005af6:	461a      	mov	r2, r3
 8005af8:	f7fc f801 	bl	8001afe <_write>
 8005afc:	1c43      	adds	r3, r0, #1
 8005afe:	d102      	bne.n	8005b06 <_write_r+0x1e>
 8005b00:	682b      	ldr	r3, [r5, #0]
 8005b02:	b103      	cbz	r3, 8005b06 <_write_r+0x1e>
 8005b04:	6023      	str	r3, [r4, #0]
 8005b06:	bd38      	pop	{r3, r4, r5, pc}
 8005b08:	20002eb4 	.word	0x20002eb4

08005b0c <_close_r>:
 8005b0c:	b538      	push	{r3, r4, r5, lr}
 8005b0e:	4d06      	ldr	r5, [pc, #24]	; (8005b28 <_close_r+0x1c>)
 8005b10:	2300      	movs	r3, #0
 8005b12:	4604      	mov	r4, r0
 8005b14:	4608      	mov	r0, r1
 8005b16:	602b      	str	r3, [r5, #0]
 8005b18:	f7fc f80d 	bl	8001b36 <_close>
 8005b1c:	1c43      	adds	r3, r0, #1
 8005b1e:	d102      	bne.n	8005b26 <_close_r+0x1a>
 8005b20:	682b      	ldr	r3, [r5, #0]
 8005b22:	b103      	cbz	r3, 8005b26 <_close_r+0x1a>
 8005b24:	6023      	str	r3, [r4, #0]
 8005b26:	bd38      	pop	{r3, r4, r5, pc}
 8005b28:	20002eb4 	.word	0x20002eb4

08005b2c <_fstat_r>:
 8005b2c:	b538      	push	{r3, r4, r5, lr}
 8005b2e:	4d07      	ldr	r5, [pc, #28]	; (8005b4c <_fstat_r+0x20>)
 8005b30:	2300      	movs	r3, #0
 8005b32:	4604      	mov	r4, r0
 8005b34:	4608      	mov	r0, r1
 8005b36:	4611      	mov	r1, r2
 8005b38:	602b      	str	r3, [r5, #0]
 8005b3a:	f7fc f808 	bl	8001b4e <_fstat>
 8005b3e:	1c43      	adds	r3, r0, #1
 8005b40:	d102      	bne.n	8005b48 <_fstat_r+0x1c>
 8005b42:	682b      	ldr	r3, [r5, #0]
 8005b44:	b103      	cbz	r3, 8005b48 <_fstat_r+0x1c>
 8005b46:	6023      	str	r3, [r4, #0]
 8005b48:	bd38      	pop	{r3, r4, r5, pc}
 8005b4a:	bf00      	nop
 8005b4c:	20002eb4 	.word	0x20002eb4

08005b50 <_isatty_r>:
 8005b50:	b538      	push	{r3, r4, r5, lr}
 8005b52:	4d06      	ldr	r5, [pc, #24]	; (8005b6c <_isatty_r+0x1c>)
 8005b54:	2300      	movs	r3, #0
 8005b56:	4604      	mov	r4, r0
 8005b58:	4608      	mov	r0, r1
 8005b5a:	602b      	str	r3, [r5, #0]
 8005b5c:	f7fc f807 	bl	8001b6e <_isatty>
 8005b60:	1c43      	adds	r3, r0, #1
 8005b62:	d102      	bne.n	8005b6a <_isatty_r+0x1a>
 8005b64:	682b      	ldr	r3, [r5, #0]
 8005b66:	b103      	cbz	r3, 8005b6a <_isatty_r+0x1a>
 8005b68:	6023      	str	r3, [r4, #0]
 8005b6a:	bd38      	pop	{r3, r4, r5, pc}
 8005b6c:	20002eb4 	.word	0x20002eb4

08005b70 <_lseek_r>:
 8005b70:	b538      	push	{r3, r4, r5, lr}
 8005b72:	4d07      	ldr	r5, [pc, #28]	; (8005b90 <_lseek_r+0x20>)
 8005b74:	4604      	mov	r4, r0
 8005b76:	4608      	mov	r0, r1
 8005b78:	4611      	mov	r1, r2
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	602a      	str	r2, [r5, #0]
 8005b7e:	461a      	mov	r2, r3
 8005b80:	f7fc f800 	bl	8001b84 <_lseek>
 8005b84:	1c43      	adds	r3, r0, #1
 8005b86:	d102      	bne.n	8005b8e <_lseek_r+0x1e>
 8005b88:	682b      	ldr	r3, [r5, #0]
 8005b8a:	b103      	cbz	r3, 8005b8e <_lseek_r+0x1e>
 8005b8c:	6023      	str	r3, [r4, #0]
 8005b8e:	bd38      	pop	{r3, r4, r5, pc}
 8005b90:	20002eb4 	.word	0x20002eb4

08005b94 <memcpy>:
 8005b94:	440a      	add	r2, r1
 8005b96:	4291      	cmp	r1, r2
 8005b98:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b9c:	d100      	bne.n	8005ba0 <memcpy+0xc>
 8005b9e:	4770      	bx	lr
 8005ba0:	b510      	push	{r4, lr}
 8005ba2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ba6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005baa:	4291      	cmp	r1, r2
 8005bac:	d1f9      	bne.n	8005ba2 <memcpy+0xe>
 8005bae:	bd10      	pop	{r4, pc}

08005bb0 <memmove>:
 8005bb0:	4288      	cmp	r0, r1
 8005bb2:	b510      	push	{r4, lr}
 8005bb4:	eb01 0402 	add.w	r4, r1, r2
 8005bb8:	d902      	bls.n	8005bc0 <memmove+0x10>
 8005bba:	4284      	cmp	r4, r0
 8005bbc:	4623      	mov	r3, r4
 8005bbe:	d807      	bhi.n	8005bd0 <memmove+0x20>
 8005bc0:	1e43      	subs	r3, r0, #1
 8005bc2:	42a1      	cmp	r1, r4
 8005bc4:	d008      	beq.n	8005bd8 <memmove+0x28>
 8005bc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005bca:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005bce:	e7f8      	b.n	8005bc2 <memmove+0x12>
 8005bd0:	4402      	add	r2, r0
 8005bd2:	4601      	mov	r1, r0
 8005bd4:	428a      	cmp	r2, r1
 8005bd6:	d100      	bne.n	8005bda <memmove+0x2a>
 8005bd8:	bd10      	pop	{r4, pc}
 8005bda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005bde:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005be2:	e7f7      	b.n	8005bd4 <memmove+0x24>

08005be4 <__malloc_lock>:
 8005be4:	4801      	ldr	r0, [pc, #4]	; (8005bec <__malloc_lock+0x8>)
 8005be6:	f7ff b999 	b.w	8004f1c <__retarget_lock_acquire_recursive>
 8005bea:	bf00      	nop
 8005bec:	20002ea8 	.word	0x20002ea8

08005bf0 <__malloc_unlock>:
 8005bf0:	4801      	ldr	r0, [pc, #4]	; (8005bf8 <__malloc_unlock+0x8>)
 8005bf2:	f7ff b994 	b.w	8004f1e <__retarget_lock_release_recursive>
 8005bf6:	bf00      	nop
 8005bf8:	20002ea8 	.word	0x20002ea8

08005bfc <_realloc_r>:
 8005bfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c00:	4680      	mov	r8, r0
 8005c02:	4614      	mov	r4, r2
 8005c04:	460e      	mov	r6, r1
 8005c06:	b921      	cbnz	r1, 8005c12 <_realloc_r+0x16>
 8005c08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c0c:	4611      	mov	r1, r2
 8005c0e:	f7ff ba59 	b.w	80050c4 <_malloc_r>
 8005c12:	b92a      	cbnz	r2, 8005c20 <_realloc_r+0x24>
 8005c14:	f7ff f9ea 	bl	8004fec <_free_r>
 8005c18:	4625      	mov	r5, r4
 8005c1a:	4628      	mov	r0, r5
 8005c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c20:	f000 f82e 	bl	8005c80 <_malloc_usable_size_r>
 8005c24:	4284      	cmp	r4, r0
 8005c26:	4607      	mov	r7, r0
 8005c28:	d802      	bhi.n	8005c30 <_realloc_r+0x34>
 8005c2a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005c2e:	d812      	bhi.n	8005c56 <_realloc_r+0x5a>
 8005c30:	4621      	mov	r1, r4
 8005c32:	4640      	mov	r0, r8
 8005c34:	f7ff fa46 	bl	80050c4 <_malloc_r>
 8005c38:	4605      	mov	r5, r0
 8005c3a:	2800      	cmp	r0, #0
 8005c3c:	d0ed      	beq.n	8005c1a <_realloc_r+0x1e>
 8005c3e:	42bc      	cmp	r4, r7
 8005c40:	4622      	mov	r2, r4
 8005c42:	4631      	mov	r1, r6
 8005c44:	bf28      	it	cs
 8005c46:	463a      	movcs	r2, r7
 8005c48:	f7ff ffa4 	bl	8005b94 <memcpy>
 8005c4c:	4631      	mov	r1, r6
 8005c4e:	4640      	mov	r0, r8
 8005c50:	f7ff f9cc 	bl	8004fec <_free_r>
 8005c54:	e7e1      	b.n	8005c1a <_realloc_r+0x1e>
 8005c56:	4635      	mov	r5, r6
 8005c58:	e7df      	b.n	8005c1a <_realloc_r+0x1e>
	...

08005c5c <_read_r>:
 8005c5c:	b538      	push	{r3, r4, r5, lr}
 8005c5e:	4d07      	ldr	r5, [pc, #28]	; (8005c7c <_read_r+0x20>)
 8005c60:	4604      	mov	r4, r0
 8005c62:	4608      	mov	r0, r1
 8005c64:	4611      	mov	r1, r2
 8005c66:	2200      	movs	r2, #0
 8005c68:	602a      	str	r2, [r5, #0]
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	f7fb ff2a 	bl	8001ac4 <_read>
 8005c70:	1c43      	adds	r3, r0, #1
 8005c72:	d102      	bne.n	8005c7a <_read_r+0x1e>
 8005c74:	682b      	ldr	r3, [r5, #0]
 8005c76:	b103      	cbz	r3, 8005c7a <_read_r+0x1e>
 8005c78:	6023      	str	r3, [r4, #0]
 8005c7a:	bd38      	pop	{r3, r4, r5, pc}
 8005c7c:	20002eb4 	.word	0x20002eb4

08005c80 <_malloc_usable_size_r>:
 8005c80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c84:	1f18      	subs	r0, r3, #4
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	bfbc      	itt	lt
 8005c8a:	580b      	ldrlt	r3, [r1, r0]
 8005c8c:	18c0      	addlt	r0, r0, r3
 8005c8e:	4770      	bx	lr

08005c90 <_init>:
 8005c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c92:	bf00      	nop
 8005c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c96:	bc08      	pop	{r3}
 8005c98:	469e      	mov	lr, r3
 8005c9a:	4770      	bx	lr

08005c9c <_fini>:
 8005c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c9e:	bf00      	nop
 8005ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ca2:	bc08      	pop	{r3}
 8005ca4:	469e      	mov	lr, r3
 8005ca6:	4770      	bx	lr
