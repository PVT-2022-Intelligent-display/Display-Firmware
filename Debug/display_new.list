
display_new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004350  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000248  080044e0  080044e0  000144e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004728  08004728  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08004728  08004728  00014728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004730  08004730  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004730  08004730  00014730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004734  08004734  00014734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004738  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003e74  20000078  080047b0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003eec  080047b0  00023eec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d675  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f05  00000000  00000000  0002d71d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000800  00000000  00000000  0002f628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000748  00000000  00000000  0002fe28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000217c4  00000000  00000000  00030570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a7bc  00000000  00000000  00051d34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c453a  00000000  00000000  0005c4f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00120a2a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028a8  00000000  00000000  00120a80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080044c8 	.word	0x080044c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	080044c8 	.word	0x080044c8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057e:	f000 fe33 	bl	80011e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000582:	f000 f829 	bl	80005d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000586:	f000 f8eb 	bl	8000760 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800058a:	f000 f885 	bl	8000698 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800058e:	f000 f8b5 	bl	80006fc <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("Entering main loop\n\r");
 8000592:	480f      	ldr	r0, [pc, #60]	; (80005d0 <main+0x58>)
 8000594:	f002 fdfa 	bl	800318c <iprintf>
  int loopNumber = 0;
 8000598:	2300      	movs	r3, #0
 800059a:	60fb      	str	r3, [r7, #12]

  while (1)
  {
	int secSleep = 1;
 800059c:	2301      	movs	r3, #1
 800059e:	60bb      	str	r3, [r7, #8]
	int msecSleep = 500;
 80005a0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80005a4:	607b      	str	r3, [r7, #4]
	printf("Sleeping %d.%d secs. LN %d\r\n", secSleep, msecSleep, loopNumber++);
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	1c5a      	adds	r2, r3, #1
 80005aa:	60fa      	str	r2, [r7, #12]
 80005ac:	687a      	ldr	r2, [r7, #4]
 80005ae:	68b9      	ldr	r1, [r7, #8]
 80005b0:	4808      	ldr	r0, [pc, #32]	; (80005d4 <main+0x5c>)
 80005b2:	f002 fdeb 	bl	800318c <iprintf>
	HAL_Delay(1000*secSleep + msecSleep);
 80005b6:	68bb      	ldr	r3, [r7, #8]
 80005b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005bc:	fb02 f203 	mul.w	r2, r2, r3
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	4413      	add	r3, r2
 80005c4:	4618      	mov	r0, r3
 80005c6:	f000 fe81 	bl	80012cc <HAL_Delay>

	uartDemoLoop();
 80005ca:	f000 fd7d 	bl	80010c8 <uartDemoLoop>
  {
 80005ce:	e7e5      	b.n	800059c <main+0x24>
 80005d0:	080044e0 	.word	0x080044e0
 80005d4:	080044f8 	.word	0x080044f8

080005d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b094      	sub	sp, #80	; 0x50
 80005dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005de:	f107 0320 	add.w	r3, r7, #32
 80005e2:	2230      	movs	r2, #48	; 0x30
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f002 fdc8 	bl	800317c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ec:	f107 030c 	add.w	r3, r7, #12
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
 80005fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fc:	2300      	movs	r3, #0
 80005fe:	60bb      	str	r3, [r7, #8]
 8000600:	4b23      	ldr	r3, [pc, #140]	; (8000690 <SystemClock_Config+0xb8>)
 8000602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000604:	4a22      	ldr	r2, [pc, #136]	; (8000690 <SystemClock_Config+0xb8>)
 8000606:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800060a:	6413      	str	r3, [r2, #64]	; 0x40
 800060c:	4b20      	ldr	r3, [pc, #128]	; (8000690 <SystemClock_Config+0xb8>)
 800060e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000614:	60bb      	str	r3, [r7, #8]
 8000616:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000618:	2300      	movs	r3, #0
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	4b1d      	ldr	r3, [pc, #116]	; (8000694 <SystemClock_Config+0xbc>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a1c      	ldr	r2, [pc, #112]	; (8000694 <SystemClock_Config+0xbc>)
 8000622:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000626:	6013      	str	r3, [r2, #0]
 8000628:	4b1a      	ldr	r3, [pc, #104]	; (8000694 <SystemClock_Config+0xbc>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000630:	607b      	str	r3, [r7, #4]
 8000632:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000634:	2302      	movs	r3, #2
 8000636:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000638:	2301      	movs	r3, #1
 800063a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800063c:	2310      	movs	r3, #16
 800063e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000640:	2300      	movs	r3, #0
 8000642:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000644:	f107 0320 	add.w	r3, r7, #32
 8000648:	4618      	mov	r0, r3
 800064a:	f001 f9bd 	bl	80019c8 <HAL_RCC_OscConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000654:	f000 f8f8 	bl	8000848 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000658:	230f      	movs	r3, #15
 800065a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800065c:	2300      	movs	r3, #0
 800065e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000664:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000668:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800066a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800066e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f001 fc1e 	bl	8001eb8 <HAL_RCC_ClockConfig>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000682:	f000 f8e1 	bl	8000848 <Error_Handler>
  }
}
 8000686:	bf00      	nop
 8000688:	3750      	adds	r7, #80	; 0x50
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40023800 	.word	0x40023800
 8000694:	40007000 	.word	0x40007000

08000698 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800069c:	4b15      	ldr	r3, [pc, #84]	; (80006f4 <MX_USART1_UART_Init+0x5c>)
 800069e:	4a16      	ldr	r2, [pc, #88]	; (80006f8 <MX_USART1_UART_Init+0x60>)
 80006a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006a2:	4b14      	ldr	r3, [pc, #80]	; (80006f4 <MX_USART1_UART_Init+0x5c>)
 80006a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006aa:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <MX_USART1_UART_Init+0x5c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006b0:	4b10      	ldr	r3, [pc, #64]	; (80006f4 <MX_USART1_UART_Init+0x5c>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006b6:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <MX_USART1_UART_Init+0x5c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006bc:	4b0d      	ldr	r3, [pc, #52]	; (80006f4 <MX_USART1_UART_Init+0x5c>)
 80006be:	220c      	movs	r2, #12
 80006c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006c2:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <MX_USART1_UART_Init+0x5c>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006c8:	4b0a      	ldr	r3, [pc, #40]	; (80006f4 <MX_USART1_UART_Init+0x5c>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006ce:	4809      	ldr	r0, [pc, #36]	; (80006f4 <MX_USART1_UART_Init+0x5c>)
 80006d0:	f001 fdc2 	bl	8002258 <HAL_UART_Init>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80006da:	f000 f8b5 	bl	8000848 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE); //turn on rx interrupt forever
 80006de:	4b05      	ldr	r3, [pc, #20]	; (80006f4 <MX_USART1_UART_Init+0x5c>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	68da      	ldr	r2, [r3, #12]
 80006e4:	4b03      	ldr	r3, [pc, #12]	; (80006f4 <MX_USART1_UART_Init+0x5c>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f042 0220 	orr.w	r2, r2, #32
 80006ec:	60da      	str	r2, [r3, #12]
  //tx interrupt is enabled in send_usart_message() insead.
  //__HAL_UART_ENABLE_IT(&huart1, UART_IT_TXE); //turn on tx interrupt forever
  /* USER CODE END USART1_Init 2 */

}
 80006ee:	bf00      	nop
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	200000c8 	.word	0x200000c8
 80006f8:	40011000 	.word	0x40011000

080006fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000700:	4b15      	ldr	r3, [pc, #84]	; (8000758 <MX_USART2_UART_Init+0x5c>)
 8000702:	4a16      	ldr	r2, [pc, #88]	; (800075c <MX_USART2_UART_Init+0x60>)
 8000704:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000706:	4b14      	ldr	r3, [pc, #80]	; (8000758 <MX_USART2_UART_Init+0x5c>)
 8000708:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800070c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800070e:	4b12      	ldr	r3, [pc, #72]	; (8000758 <MX_USART2_UART_Init+0x5c>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000714:	4b10      	ldr	r3, [pc, #64]	; (8000758 <MX_USART2_UART_Init+0x5c>)
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800071a:	4b0f      	ldr	r3, [pc, #60]	; (8000758 <MX_USART2_UART_Init+0x5c>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000720:	4b0d      	ldr	r3, [pc, #52]	; (8000758 <MX_USART2_UART_Init+0x5c>)
 8000722:	220c      	movs	r2, #12
 8000724:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000726:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <MX_USART2_UART_Init+0x5c>)
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800072c:	4b0a      	ldr	r3, [pc, #40]	; (8000758 <MX_USART2_UART_Init+0x5c>)
 800072e:	2200      	movs	r2, #0
 8000730:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000732:	4809      	ldr	r0, [pc, #36]	; (8000758 <MX_USART2_UART_Init+0x5c>)
 8000734:	f001 fd90 	bl	8002258 <HAL_UART_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800073e:	f000 f883 	bl	8000848 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE); //turn on rx interrupt forever
 8000742:	4b05      	ldr	r3, [pc, #20]	; (8000758 <MX_USART2_UART_Init+0x5c>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	68da      	ldr	r2, [r3, #12]
 8000748:	4b03      	ldr	r3, [pc, #12]	; (8000758 <MX_USART2_UART_Init+0x5c>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f042 0220 	orr.w	r2, r2, #32
 8000750:	60da      	str	r2, [r3, #12]
  //tx interrupt is enabled in send_usart_message() insead.
  //__HAL_UART_ENABLE_IT(&huart2, UART_IT_TXE); //turn on tx interrupt forever
  /* USER CODE END USART2_Init 2 */

}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	2000010c 	.word	0x2000010c
 800075c:	40004400 	.word	0x40004400

08000760 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b088      	sub	sp, #32
 8000764:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000766:	f107 030c 	add.w	r3, r7, #12
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	60da      	str	r2, [r3, #12]
 8000774:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	60bb      	str	r3, [r7, #8]
 800077a:	4b30      	ldr	r3, [pc, #192]	; (800083c <MX_GPIO_Init+0xdc>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a2f      	ldr	r2, [pc, #188]	; (800083c <MX_GPIO_Init+0xdc>)
 8000780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b2d      	ldr	r3, [pc, #180]	; (800083c <MX_GPIO_Init+0xdc>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800078e:	60bb      	str	r3, [r7, #8]
 8000790:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	607b      	str	r3, [r7, #4]
 8000796:	4b29      	ldr	r3, [pc, #164]	; (800083c <MX_GPIO_Init+0xdc>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a28      	ldr	r2, [pc, #160]	; (800083c <MX_GPIO_Init+0xdc>)
 800079c:	f043 0301 	orr.w	r3, r3, #1
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b26      	ldr	r3, [pc, #152]	; (800083c <MX_GPIO_Init+0xdc>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0301 	and.w	r3, r3, #1
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	603b      	str	r3, [r7, #0]
 80007b2:	4b22      	ldr	r3, [pc, #136]	; (800083c <MX_GPIO_Init+0xdc>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a21      	ldr	r2, [pc, #132]	; (800083c <MX_GPIO_Init+0xdc>)
 80007b8:	f043 0302 	orr.w	r3, r3, #2
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b1f      	ldr	r3, [pc, #124]	; (800083c <MX_GPIO_Init+0xdc>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0302 	and.w	r3, r3, #2
 80007c6:	603b      	str	r3, [r7, #0]
 80007c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RES_GPIO_Port, LCD_RES_Pin, GPIO_PIN_RESET);
 80007ca:	2200      	movs	r2, #0
 80007cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007d0:	481b      	ldr	r0, [pc, #108]	; (8000840 <MX_GPIO_Init+0xe0>)
 80007d2:	f001 f8df 	bl	8001994 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2108      	movs	r1, #8
 80007da:	481a      	ldr	r0, [pc, #104]	; (8000844 <MX_GPIO_Init+0xe4>)
 80007dc:	f001 f8da 	bl	8001994 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80007e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80007e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007e6:	2300      	movs	r3, #0
 80007e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	2300      	movs	r3, #0
 80007ec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ee:	f107 030c 	add.w	r3, r7, #12
 80007f2:	4619      	mov	r1, r3
 80007f4:	4812      	ldr	r0, [pc, #72]	; (8000840 <MX_GPIO_Init+0xe0>)
 80007f6:	f000 ff31 	bl	800165c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RES_Pin */
  GPIO_InitStruct.Pin = LCD_RES_Pin;
 80007fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000800:	2301      	movs	r3, #1
 8000802:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000804:	2301      	movs	r3, #1
 8000806:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000808:	2303      	movs	r3, #3
 800080a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_RES_GPIO_Port, &GPIO_InitStruct);
 800080c:	f107 030c 	add.w	r3, r7, #12
 8000810:	4619      	mov	r1, r3
 8000812:	480b      	ldr	r0, [pc, #44]	; (8000840 <MX_GPIO_Init+0xe0>)
 8000814:	f000 ff22 	bl	800165c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000818:	2308      	movs	r3, #8
 800081a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081c:	2301      	movs	r3, #1
 800081e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000824:	2300      	movs	r3, #0
 8000826:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000828:	f107 030c 	add.w	r3, r7, #12
 800082c:	4619      	mov	r1, r3
 800082e:	4805      	ldr	r0, [pc, #20]	; (8000844 <MX_GPIO_Init+0xe4>)
 8000830:	f000 ff14 	bl	800165c <HAL_GPIO_Init>

}
 8000834:	bf00      	nop
 8000836:	3720      	adds	r7, #32
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40023800 	.word	0x40023800
 8000840:	40020000 	.word	0x40020000
 8000844:	40020400 	.word	0x40020400

08000848 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800084c:	b672      	cpsid	i
}
 800084e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000850:	e7fe      	b.n	8000850 <Error_Handler+0x8>
	...

08000854 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	607b      	str	r3, [r7, #4]
 800085e:	4b10      	ldr	r3, [pc, #64]	; (80008a0 <HAL_MspInit+0x4c>)
 8000860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000862:	4a0f      	ldr	r2, [pc, #60]	; (80008a0 <HAL_MspInit+0x4c>)
 8000864:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000868:	6453      	str	r3, [r2, #68]	; 0x44
 800086a:	4b0d      	ldr	r3, [pc, #52]	; (80008a0 <HAL_MspInit+0x4c>)
 800086c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800086e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	603b      	str	r3, [r7, #0]
 800087a:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <HAL_MspInit+0x4c>)
 800087c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087e:	4a08      	ldr	r2, [pc, #32]	; (80008a0 <HAL_MspInit+0x4c>)
 8000880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000884:	6413      	str	r3, [r2, #64]	; 0x40
 8000886:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <HAL_MspInit+0x4c>)
 8000888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800088e:	603b      	str	r3, [r7, #0]
 8000890:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000892:	bf00      	nop
 8000894:	370c      	adds	r7, #12
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	40023800 	.word	0x40023800

080008a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b08c      	sub	sp, #48	; 0x30
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ac:	f107 031c 	add.w	r3, r7, #28
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	605a      	str	r2, [r3, #4]
 80008b6:	609a      	str	r2, [r3, #8]
 80008b8:	60da      	str	r2, [r3, #12]
 80008ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a3a      	ldr	r2, [pc, #232]	; (80009ac <HAL_UART_MspInit+0x108>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d135      	bne.n	8000932 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	61bb      	str	r3, [r7, #24]
 80008ca:	4b39      	ldr	r3, [pc, #228]	; (80009b0 <HAL_UART_MspInit+0x10c>)
 80008cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ce:	4a38      	ldr	r2, [pc, #224]	; (80009b0 <HAL_UART_MspInit+0x10c>)
 80008d0:	f043 0310 	orr.w	r3, r3, #16
 80008d4:	6453      	str	r3, [r2, #68]	; 0x44
 80008d6:	4b36      	ldr	r3, [pc, #216]	; (80009b0 <HAL_UART_MspInit+0x10c>)
 80008d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008da:	f003 0310 	and.w	r3, r3, #16
 80008de:	61bb      	str	r3, [r7, #24]
 80008e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	617b      	str	r3, [r7, #20]
 80008e6:	4b32      	ldr	r3, [pc, #200]	; (80009b0 <HAL_UART_MspInit+0x10c>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	4a31      	ldr	r2, [pc, #196]	; (80009b0 <HAL_UART_MspInit+0x10c>)
 80008ec:	f043 0301 	orr.w	r3, r3, #1
 80008f0:	6313      	str	r3, [r2, #48]	; 0x30
 80008f2:	4b2f      	ldr	r3, [pc, #188]	; (80009b0 <HAL_UART_MspInit+0x10c>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	f003 0301 	and.w	r3, r3, #1
 80008fa:	617b      	str	r3, [r7, #20]
 80008fc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80008fe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000902:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000904:	2302      	movs	r3, #2
 8000906:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800090c:	2303      	movs	r3, #3
 800090e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000910:	2307      	movs	r3, #7
 8000912:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000914:	f107 031c 	add.w	r3, r7, #28
 8000918:	4619      	mov	r1, r3
 800091a:	4826      	ldr	r0, [pc, #152]	; (80009b4 <HAL_UART_MspInit+0x110>)
 800091c:	f000 fe9e 	bl	800165c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000920:	2200      	movs	r2, #0
 8000922:	2100      	movs	r1, #0
 8000924:	2025      	movs	r0, #37	; 0x25
 8000926:	f000 fdd0 	bl	80014ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800092a:	2025      	movs	r0, #37	; 0x25
 800092c:	f000 fde9 	bl	8001502 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000930:	e038      	b.n	80009a4 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4a20      	ldr	r2, [pc, #128]	; (80009b8 <HAL_UART_MspInit+0x114>)
 8000938:	4293      	cmp	r3, r2
 800093a:	d133      	bne.n	80009a4 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 800093c:	2300      	movs	r3, #0
 800093e:	613b      	str	r3, [r7, #16]
 8000940:	4b1b      	ldr	r3, [pc, #108]	; (80009b0 <HAL_UART_MspInit+0x10c>)
 8000942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000944:	4a1a      	ldr	r2, [pc, #104]	; (80009b0 <HAL_UART_MspInit+0x10c>)
 8000946:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800094a:	6413      	str	r3, [r2, #64]	; 0x40
 800094c:	4b18      	ldr	r3, [pc, #96]	; (80009b0 <HAL_UART_MspInit+0x10c>)
 800094e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000954:	613b      	str	r3, [r7, #16]
 8000956:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000958:	2300      	movs	r3, #0
 800095a:	60fb      	str	r3, [r7, #12]
 800095c:	4b14      	ldr	r3, [pc, #80]	; (80009b0 <HAL_UART_MspInit+0x10c>)
 800095e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000960:	4a13      	ldr	r2, [pc, #76]	; (80009b0 <HAL_UART_MspInit+0x10c>)
 8000962:	f043 0301 	orr.w	r3, r3, #1
 8000966:	6313      	str	r3, [r2, #48]	; 0x30
 8000968:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <HAL_UART_MspInit+0x10c>)
 800096a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096c:	f003 0301 	and.w	r3, r3, #1
 8000970:	60fb      	str	r3, [r7, #12]
 8000972:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000974:	230c      	movs	r3, #12
 8000976:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000978:	2302      	movs	r3, #2
 800097a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000980:	2303      	movs	r3, #3
 8000982:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000984:	2307      	movs	r3, #7
 8000986:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000988:	f107 031c 	add.w	r3, r7, #28
 800098c:	4619      	mov	r1, r3
 800098e:	4809      	ldr	r0, [pc, #36]	; (80009b4 <HAL_UART_MspInit+0x110>)
 8000990:	f000 fe64 	bl	800165c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000994:	2200      	movs	r2, #0
 8000996:	2100      	movs	r1, #0
 8000998:	2026      	movs	r0, #38	; 0x26
 800099a:	f000 fd96 	bl	80014ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800099e:	2026      	movs	r0, #38	; 0x26
 80009a0:	f000 fdaf 	bl	8001502 <HAL_NVIC_EnableIRQ>
}
 80009a4:	bf00      	nop
 80009a6:	3730      	adds	r7, #48	; 0x30
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	40011000 	.word	0x40011000
 80009b0:	40023800 	.word	0x40023800
 80009b4:	40020000 	.word	0x40020000
 80009b8:	40004400 	.word	0x40004400

080009bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <NMI_Handler+0x4>

080009c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009c6:	e7fe      	b.n	80009c6 <HardFault_Handler+0x4>

080009c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009cc:	e7fe      	b.n	80009cc <MemManage_Handler+0x4>

080009ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009d2:	e7fe      	b.n	80009d2 <BusFault_Handler+0x4>

080009d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d8:	e7fe      	b.n	80009d8 <UsageFault_Handler+0x4>

080009da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009da:	b480      	push	{r7}
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009de:	bf00      	nop
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr

080009e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr

080009f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009f6:	b480      	push	{r7}
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr

08000a04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a08:	f000 fc40 	bl	800128c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  static int ledVal = 0;
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, ledVal);
 8000a16:	4b24      	ldr	r3, [pc, #144]	; (8000aa8 <USART1_IRQHandler+0x98>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	2108      	movs	r1, #8
 8000a20:	4822      	ldr	r0, [pc, #136]	; (8000aac <USART1_IRQHandler+0x9c>)
 8000a22:	f000 ffb7 	bl	8001994 <HAL_GPIO_WritePin>
  ledVal = !ledVal;
 8000a26:	4b20      	ldr	r3, [pc, #128]	; (8000aa8 <USART1_IRQHandler+0x98>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	bf0c      	ite	eq
 8000a2e:	2301      	moveq	r3, #1
 8000a30:	2300      	movne	r3, #0
 8000a32:	b2db      	uxtb	r3, r3
 8000a34:	461a      	mov	r2, r3
 8000a36:	4b1c      	ldr	r3, [pc, #112]	; (8000aa8 <USART1_IRQHandler+0x98>)
 8000a38:	601a      	str	r2, [r3, #0]
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a3a:	481d      	ldr	r0, [pc, #116]	; (8000ab0 <USART1_IRQHandler+0xa0>)
 8000a3c:	f001 fcec 	bl	8002418 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  volatile unsigned int IIR;
  IIR = USART1->SR;
 8000a40:	4b1c      	ldr	r3, [pc, #112]	; (8000ab4 <USART1_IRQHandler+0xa4>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	603b      	str	r3, [r7, #0]
  if(IIR & UART_FLAG_RXNE){
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	f003 0320 	and.w	r3, r3, #32
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d009      	beq.n	8000a64 <USART1_IRQHandler+0x54>
  		//Read Data Register Not Empty
  		char t = USART1->DR; // the character from the USART1 data register is saved in t
 8000a50:	4b18      	ldr	r3, [pc, #96]	; (8000ab4 <USART1_IRQHandler+0xa4>)
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	71fb      	strb	r3, [r7, #7]
  		put_in_rx_buffer(t,DBG_UART);
 8000a56:	4b18      	ldr	r3, [pc, #96]	; (8000ab8 <USART1_IRQHandler+0xa8>)
 8000a58:	681a      	ldr	r2, [r3, #0]
 8000a5a:	79fb      	ldrb	r3, [r7, #7]
 8000a5c:	4611      	mov	r1, r2
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f000 f93c 	bl	8000cdc <put_in_rx_buffer>
      }
  if(IIR & UART_FLAG_TXE){
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d018      	beq.n	8000aa0 <USART1_IRQHandler+0x90>
  		if(wr_pointer_dbg==rd_pointer_dbg){
 8000a6e:	4b13      	ldr	r3, [pc, #76]	; (8000abc <USART1_IRQHandler+0xac>)
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	4b13      	ldr	r3, [pc, #76]	; (8000ac0 <USART1_IRQHandler+0xb0>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	429a      	cmp	r2, r3
 8000a78:	d108      	bne.n	8000a8c <USART1_IRQHandler+0x7c>
  			__HAL_UART_DISABLE_IT(&huart1, UART_IT_TXE); //whole message transmitted
 8000a7a:	4b0d      	ldr	r3, [pc, #52]	; (8000ab0 <USART1_IRQHandler+0xa0>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	68da      	ldr	r2, [r3, #12]
 8000a80:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <USART1_IRQHandler+0xa0>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000a88:	60da      	str	r2, [r3, #12]
  		}
  	}


  /* USER CODE END USART1_IRQn 1 */
}
 8000a8a:	e009      	b.n	8000aa0 <USART1_IRQHandler+0x90>
  			DBG_UART->DR = get_from_tx_buffer(DBG_UART);
 8000a8c:	4b0a      	ldr	r3, [pc, #40]	; (8000ab8 <USART1_IRQHandler+0xa8>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4618      	mov	r0, r3
 8000a92:	f000 f9c7 	bl	8000e24 <get_from_tx_buffer>
 8000a96:	4603      	mov	r3, r0
 8000a98:	461a      	mov	r2, r3
 8000a9a:	4b07      	ldr	r3, [pc, #28]	; (8000ab8 <USART1_IRQHandler+0xa8>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	605a      	str	r2, [r3, #4]
}
 8000aa0:	bf00      	nop
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	20000094 	.word	0x20000094
 8000aac:	40020400 	.word	0x40020400
 8000ab0:	200000c8 	.word	0x200000c8
 8000ab4:	40011000 	.word	0x40011000
 8000ab8:	20000008 	.word	0x20000008
 8000abc:	200000a8 	.word	0x200000a8
 8000ac0:	200000a4 	.word	0x200000a4

08000ac4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000aca:	481b      	ldr	r0, [pc, #108]	; (8000b38 <USART2_IRQHandler+0x74>)
 8000acc:	f001 fca4 	bl	8002418 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  volatile unsigned int IIR;
  	IIR=USART2->SR;
 8000ad0:	4b1a      	ldr	r3, [pc, #104]	; (8000b3c <USART2_IRQHandler+0x78>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	603b      	str	r3, [r7, #0]
    if(IIR & UART_FLAG_RXNE){
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	f003 0320 	and.w	r3, r3, #32
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d009      	beq.n	8000af4 <USART2_IRQHandler+0x30>
  		// check if the USART6 receive interrupt flag was set
  		char t = USART2->DR; // the character from the USART1 data register is saved in t
 8000ae0:	4b16      	ldr	r3, [pc, #88]	; (8000b3c <USART2_IRQHandler+0x78>)
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	71fb      	strb	r3, [r7, #7]
  		put_in_rx_buffer(t,RS485_UART);
 8000ae6:	4b16      	ldr	r3, [pc, #88]	; (8000b40 <USART2_IRQHandler+0x7c>)
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	79fb      	ldrb	r3, [r7, #7]
 8000aec:	4611      	mov	r1, r2
 8000aee:	4618      	mov	r0, r3
 8000af0:	f000 f8f4 	bl	8000cdc <put_in_rx_buffer>
      }
  	if(IIR & UART_FLAG_TXE){
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d017      	beq.n	8000b2e <USART2_IRQHandler+0x6a>
  		if(wr_pointer_rs485==rd_pointer_rs485){
 8000afe:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <USART2_IRQHandler+0x80>)
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <USART2_IRQHandler+0x84>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	429a      	cmp	r2, r3
 8000b08:	d108      	bne.n	8000b1c <USART2_IRQHandler+0x58>
  			__HAL_UART_DISABLE_IT(&huart2, UART_IT_TXE);
 8000b0a:	4b0b      	ldr	r3, [pc, #44]	; (8000b38 <USART2_IRQHandler+0x74>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	68da      	ldr	r2, [r3, #12]
 8000b10:	4b09      	ldr	r3, [pc, #36]	; (8000b38 <USART2_IRQHandler+0x74>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000b18:	60da      	str	r2, [r3, #12]
  		else{
  			USART2->DR = get_from_tx_buffer(RS485_UART);
  		}
  	}
  /* USER CODE END USART2_IRQn 1 */
}
 8000b1a:	e008      	b.n	8000b2e <USART2_IRQHandler+0x6a>
  			USART2->DR = get_from_tx_buffer(RS485_UART);
 8000b1c:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <USART2_IRQHandler+0x7c>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4618      	mov	r0, r3
 8000b22:	f000 f97f 	bl	8000e24 <get_from_tx_buffer>
 8000b26:	4603      	mov	r3, r0
 8000b28:	461a      	mov	r2, r3
 8000b2a:	4b04      	ldr	r3, [pc, #16]	; (8000b3c <USART2_IRQHandler+0x78>)
 8000b2c:	605a      	str	r2, [r3, #4]
}
 8000b2e:	bf00      	nop
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	2000010c 	.word	0x2000010c
 8000b3c:	40004400 	.word	0x40004400
 8000b40:	20000004 	.word	0x20000004
 8000b44:	200000a0 	.word	0x200000a0
 8000b48:	2000009c 	.word	0x2000009c

08000b4c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b086      	sub	sp, #24
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	60f8      	str	r0, [r7, #12]
 8000b54:	60b9      	str	r1, [r7, #8]
 8000b56:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b58:	2300      	movs	r3, #0
 8000b5a:	617b      	str	r3, [r7, #20]
 8000b5c:	e00a      	b.n	8000b74 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b5e:	f3af 8000 	nop.w
 8000b62:	4601      	mov	r1, r0
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	1c5a      	adds	r2, r3, #1
 8000b68:	60ba      	str	r2, [r7, #8]
 8000b6a:	b2ca      	uxtb	r2, r1
 8000b6c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	3301      	adds	r3, #1
 8000b72:	617b      	str	r3, [r7, #20]
 8000b74:	697a      	ldr	r2, [r7, #20]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	dbf0      	blt.n	8000b5e <_read+0x12>
	}

return len;
 8000b7c:	687b      	ldr	r3, [r7, #4]
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3718      	adds	r7, #24
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	b086      	sub	sp, #24
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	60f8      	str	r0, [r7, #12]
 8000b8e:	60b9      	str	r1, [r7, #8]
 8000b90:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b92:	2300      	movs	r3, #0
 8000b94:	617b      	str	r3, [r7, #20]
 8000b96:	e009      	b.n	8000bac <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	1c5a      	adds	r2, r3, #1
 8000b9c:	60ba      	str	r2, [r7, #8]
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f000 f889 	bl	8000cb8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	3301      	adds	r3, #1
 8000baa:	617b      	str	r3, [r7, #20]
 8000bac:	697a      	ldr	r2, [r7, #20]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	dbf1      	blt.n	8000b98 <_write+0x12>
	}
	return len;
 8000bb4:	687b      	ldr	r3, [r7, #4]
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3718      	adds	r7, #24
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <_close>:

int _close(int file)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	b083      	sub	sp, #12
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	6078      	str	r0, [r7, #4]
	return -1;
 8000bc6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr

08000bd6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	b083      	sub	sp, #12
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	6078      	str	r0, [r7, #4]
 8000bde:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000be6:	605a      	str	r2, [r3, #4]
	return 0;
 8000be8:	2300      	movs	r3, #0
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	370c      	adds	r7, #12
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr

08000bf6 <_isatty>:

int _isatty(int file)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	b083      	sub	sp, #12
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	6078      	str	r0, [r7, #4]
	return 1;
 8000bfe:	2301      	movs	r3, #1
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr

08000c0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b085      	sub	sp, #20
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	60f8      	str	r0, [r7, #12]
 8000c14:	60b9      	str	r1, [r7, #8]
 8000c16:	607a      	str	r2, [r7, #4]
	return 0;
 8000c18:	2300      	movs	r3, #0
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3714      	adds	r7, #20
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
	...

08000c28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b086      	sub	sp, #24
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c30:	4a14      	ldr	r2, [pc, #80]	; (8000c84 <_sbrk+0x5c>)
 8000c32:	4b15      	ldr	r3, [pc, #84]	; (8000c88 <_sbrk+0x60>)
 8000c34:	1ad3      	subs	r3, r2, r3
 8000c36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c3c:	4b13      	ldr	r3, [pc, #76]	; (8000c8c <_sbrk+0x64>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d102      	bne.n	8000c4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c44:	4b11      	ldr	r3, [pc, #68]	; (8000c8c <_sbrk+0x64>)
 8000c46:	4a12      	ldr	r2, [pc, #72]	; (8000c90 <_sbrk+0x68>)
 8000c48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c4a:	4b10      	ldr	r3, [pc, #64]	; (8000c8c <_sbrk+0x64>)
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4413      	add	r3, r2
 8000c52:	693a      	ldr	r2, [r7, #16]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d207      	bcs.n	8000c68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c58:	f002 fa66 	bl	8003128 <__errno>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	220c      	movs	r2, #12
 8000c60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c62:	f04f 33ff 	mov.w	r3, #4294967295
 8000c66:	e009      	b.n	8000c7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c68:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <_sbrk+0x64>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c6e:	4b07      	ldr	r3, [pc, #28]	; (8000c8c <_sbrk+0x64>)
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4413      	add	r3, r2
 8000c76:	4a05      	ldr	r2, [pc, #20]	; (8000c8c <_sbrk+0x64>)
 8000c78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c7a:	68fb      	ldr	r3, [r7, #12]
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3718      	adds	r7, #24
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	20020000 	.word	0x20020000
 8000c88:	00000400 	.word	0x00000400
 8000c8c:	20000098 	.word	0x20000098
 8000c90:	20003ef0 	.word	0x20003ef0

08000c94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c98:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <SystemInit+0x20>)
 8000c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c9e:	4a05      	ldr	r2, [pc, #20]	; (8000cb4 <SystemInit+0x20>)
 8000ca0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ca4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

//redirect printf to uart1.
PUTCHAR_PROTOTYPE{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 0xffff);
 8000cc0:	1d39      	adds	r1, r7, #4
 8000cc2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	4803      	ldr	r0, [pc, #12]	; (8000cd8 <__io_putchar+0x20>)
 8000cca:	f001 fb12 	bl	80022f2 <HAL_UART_Transmit>
	return ch;
 8000cce:	687b      	ldr	r3, [r7, #4]
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	200000c8 	.word	0x200000c8

08000cdc <put_in_rx_buffer>:

void put_in_rx_buffer(char data, USART_TypeDef* USARTx)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	6039      	str	r1, [r7, #0]
 8000ce6:	71fb      	strb	r3, [r7, #7]
	if(USARTx == DBG_UART)
 8000ce8:	4b1d      	ldr	r3, [pc, #116]	; (8000d60 <put_in_rx_buffer+0x84>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	683a      	ldr	r2, [r7, #0]
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	d114      	bne.n	8000d1c <put_in_rx_buffer+0x40>
	{
		if(SIO_RBUFLEN_DBG>=LEN_RX_BUFFER_DBG)
 8000cf2:	4b1c      	ldr	r3, [pc, #112]	; (8000d64 <put_in_rx_buffer+0x88>)
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	4b1c      	ldr	r3, [pc, #112]	; (8000d68 <put_in_rx_buffer+0x8c>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	1ad3      	subs	r3, r2, r3
 8000cfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d00:	d226      	bcs.n	8000d50 <put_in_rx_buffer+0x74>
			{
				return;
			}
		rx_buffer_dbg[wr_pointer_rx_dbg & (LEN_RX_BUFFER_DBG - 1)]=data;
 8000d02:	4b18      	ldr	r3, [pc, #96]	; (8000d64 <put_in_rx_buffer+0x88>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8000d0a:	4918      	ldr	r1, [pc, #96]	; (8000d6c <put_in_rx_buffer+0x90>)
 8000d0c:	79fa      	ldrb	r2, [r7, #7]
 8000d0e:	54ca      	strb	r2, [r1, r3]
		wr_pointer_rx_dbg++;
 8000d10:	4b14      	ldr	r3, [pc, #80]	; (8000d64 <put_in_rx_buffer+0x88>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	3301      	adds	r3, #1
 8000d16:	4a13      	ldr	r2, [pc, #76]	; (8000d64 <put_in_rx_buffer+0x88>)
 8000d18:	6013      	str	r3, [r2, #0]
 8000d1a:	e01c      	b.n	8000d56 <put_in_rx_buffer+0x7a>
	}
	else if(USARTx == RS485_UART)
 8000d1c:	4b14      	ldr	r3, [pc, #80]	; (8000d70 <put_in_rx_buffer+0x94>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	683a      	ldr	r2, [r7, #0]
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d117      	bne.n	8000d56 <put_in_rx_buffer+0x7a>
	{
		if(SIO_RBUFLEN_RS485>=LEN_RX_BUFFER_RS485)
 8000d26:	4b13      	ldr	r3, [pc, #76]	; (8000d74 <put_in_rx_buffer+0x98>)
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	4b13      	ldr	r3, [pc, #76]	; (8000d78 <put_in_rx_buffer+0x9c>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	1ad3      	subs	r3, r2, r3
 8000d30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d34:	d20e      	bcs.n	8000d54 <put_in_rx_buffer+0x78>
			{
				return;
			}
		rx_buffer_rs485[wr_pointer_rx_rs485 & (LEN_RX_BUFFER_RS485 - 1)]=data;
 8000d36:	4b0f      	ldr	r3, [pc, #60]	; (8000d74 <put_in_rx_buffer+0x98>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000d3e:	490f      	ldr	r1, [pc, #60]	; (8000d7c <put_in_rx_buffer+0xa0>)
 8000d40:	79fa      	ldrb	r2, [r7, #7]
 8000d42:	54ca      	strb	r2, [r1, r3]
		wr_pointer_rx_rs485++;
 8000d44:	4b0b      	ldr	r3, [pc, #44]	; (8000d74 <put_in_rx_buffer+0x98>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	3301      	adds	r3, #1
 8000d4a:	4a0a      	ldr	r2, [pc, #40]	; (8000d74 <put_in_rx_buffer+0x98>)
 8000d4c:	6013      	str	r3, [r2, #0]
 8000d4e:	e002      	b.n	8000d56 <put_in_rx_buffer+0x7a>
				return;
 8000d50:	bf00      	nop
 8000d52:	e000      	b.n	8000d56 <put_in_rx_buffer+0x7a>
				return;
 8000d54:	bf00      	nop
	}
}
 8000d56:	370c      	adds	r7, #12
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr
 8000d60:	20000008 	.word	0x20000008
 8000d64:	200000b8 	.word	0x200000b8
 8000d68:	200000b4 	.word	0x200000b4
 8000d6c:	20001a58 	.word	0x20001a58
 8000d70:	20000004 	.word	0x20000004
 8000d74:	200000b0 	.word	0x200000b0
 8000d78:	200000ac 	.word	0x200000ac
 8000d7c:	20000250 	.word	0x20000250

08000d80 <put_in_tx_buffer>:

void put_in_tx_buffer(char data, USART_TypeDef* USARTx)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	6039      	str	r1, [r7, #0]
 8000d8a:	71fb      	strb	r3, [r7, #7]
	if(USARTx == RS485_UART)
 8000d8c:	4b1d      	ldr	r3, [pc, #116]	; (8000e04 <put_in_tx_buffer+0x84>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	683a      	ldr	r2, [r7, #0]
 8000d92:	429a      	cmp	r2, r3
 8000d94:	d114      	bne.n	8000dc0 <put_in_tx_buffer+0x40>
	{
		if(SIO_TBUFLEN_RS485>=LEN_TX_BUFFER_RS485)
 8000d96:	4b1c      	ldr	r3, [pc, #112]	; (8000e08 <put_in_tx_buffer+0x88>)
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	4b1c      	ldr	r3, [pc, #112]	; (8000e0c <put_in_tx_buffer+0x8c>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	1ad3      	subs	r3, r2, r3
 8000da0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000da4:	d227      	bcs.n	8000df6 <put_in_tx_buffer+0x76>
			{
				return;
			}
		tx_buffer_rs485[wr_pointer_rs485 & (LEN_TX_BUFFER_RS485 - 1)]=data;
 8000da6:	4b18      	ldr	r3, [pc, #96]	; (8000e08 <put_in_tx_buffer+0x88>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000dae:	4918      	ldr	r1, [pc, #96]	; (8000e10 <put_in_tx_buffer+0x90>)
 8000db0:	79fa      	ldrb	r2, [r7, #7]
 8000db2:	54ca      	strb	r2, [r1, r3]
		wr_pointer_rs485++;
 8000db4:	4b14      	ldr	r3, [pc, #80]	; (8000e08 <put_in_tx_buffer+0x88>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	3301      	adds	r3, #1
 8000dba:	4a13      	ldr	r2, [pc, #76]	; (8000e08 <put_in_tx_buffer+0x88>)
 8000dbc:	6013      	str	r3, [r2, #0]
 8000dbe:	e01b      	b.n	8000df8 <put_in_tx_buffer+0x78>
	}
	else if(USARTx == DBG_UART)
 8000dc0:	4b14      	ldr	r3, [pc, #80]	; (8000e14 <put_in_tx_buffer+0x94>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	683a      	ldr	r2, [r7, #0]
 8000dc6:	429a      	cmp	r2, r3
 8000dc8:	d116      	bne.n	8000df8 <put_in_tx_buffer+0x78>
	{
		while(SIO_TBUFLEN_DBG>=LEN_TX_BUFFER_DBG)
 8000dca:	bf00      	nop
 8000dcc:	4b12      	ldr	r3, [pc, #72]	; (8000e18 <put_in_tx_buffer+0x98>)
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	4b12      	ldr	r3, [pc, #72]	; (8000e1c <put_in_tx_buffer+0x9c>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000dda:	d2f7      	bcs.n	8000dcc <put_in_tx_buffer+0x4c>
			{
				//return;
			}
		tx_buffer_dbg[wr_pointer_dbg & (LEN_TX_BUFFER_DBG - 1)]=data;
 8000ddc:	4b0e      	ldr	r3, [pc, #56]	; (8000e18 <put_in_tx_buffer+0x98>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000de4:	490e      	ldr	r1, [pc, #56]	; (8000e20 <put_in_tx_buffer+0xa0>)
 8000de6:	79fa      	ldrb	r2, [r7, #7]
 8000de8:	54ca      	strb	r2, [r1, r3]
		wr_pointer_dbg++;
 8000dea:	4b0b      	ldr	r3, [pc, #44]	; (8000e18 <put_in_tx_buffer+0x98>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	3301      	adds	r3, #1
 8000df0:	4a09      	ldr	r2, [pc, #36]	; (8000e18 <put_in_tx_buffer+0x98>)
 8000df2:	6013      	str	r3, [r2, #0]
 8000df4:	e000      	b.n	8000df8 <put_in_tx_buffer+0x78>
				return;
 8000df6:	bf00      	nop
	}
}
 8000df8:	370c      	adds	r7, #12
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	20000004 	.word	0x20000004
 8000e08:	200000a0 	.word	0x200000a0
 8000e0c:	2000009c 	.word	0x2000009c
 8000e10:	20000650 	.word	0x20000650
 8000e14:	20000008 	.word	0x20000008
 8000e18:	200000a8 	.word	0x200000a8
 8000e1c:	200000a4 	.word	0x200000a4
 8000e20:	20003a58 	.word	0x20003a58

08000e24 <get_from_tx_buffer>:
char get_from_tx_buffer(USART_TypeDef* USARTx)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b085      	sub	sp, #20
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
	char data;

	if(USARTx == RS485_UART)
 8000e2c:	4b14      	ldr	r3, [pc, #80]	; (8000e80 <get_from_tx_buffer+0x5c>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	687a      	ldr	r2, [r7, #4]
 8000e32:	429a      	cmp	r2, r3
 8000e34:	d10c      	bne.n	8000e50 <get_from_tx_buffer+0x2c>
	{

		data=tx_buffer_rs485[rd_pointer_rs485 & (LEN_TX_BUFFER_RS485-1)];
 8000e36:	4b13      	ldr	r3, [pc, #76]	; (8000e84 <get_from_tx_buffer+0x60>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000e3e:	4a12      	ldr	r2, [pc, #72]	; (8000e88 <get_from_tx_buffer+0x64>)
 8000e40:	5cd3      	ldrb	r3, [r2, r3]
 8000e42:	73fb      	strb	r3, [r7, #15]
		rd_pointer_rs485++;
 8000e44:	4b0f      	ldr	r3, [pc, #60]	; (8000e84 <get_from_tx_buffer+0x60>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	4a0e      	ldr	r2, [pc, #56]	; (8000e84 <get_from_tx_buffer+0x60>)
 8000e4c:	6013      	str	r3, [r2, #0]
 8000e4e:	e010      	b.n	8000e72 <get_from_tx_buffer+0x4e>
	}
	else if(USARTx == DBG_UART)
 8000e50:	4b0e      	ldr	r3, [pc, #56]	; (8000e8c <get_from_tx_buffer+0x68>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	687a      	ldr	r2, [r7, #4]
 8000e56:	429a      	cmp	r2, r3
 8000e58:	d10b      	bne.n	8000e72 <get_from_tx_buffer+0x4e>
	{

		data=tx_buffer_dbg[rd_pointer_dbg & (LEN_TX_BUFFER_DBG-1)];
 8000e5a:	4b0d      	ldr	r3, [pc, #52]	; (8000e90 <get_from_tx_buffer+0x6c>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000e62:	4a0c      	ldr	r2, [pc, #48]	; (8000e94 <get_from_tx_buffer+0x70>)
 8000e64:	5cd3      	ldrb	r3, [r2, r3]
 8000e66:	73fb      	strb	r3, [r7, #15]
		rd_pointer_dbg++;
 8000e68:	4b09      	ldr	r3, [pc, #36]	; (8000e90 <get_from_tx_buffer+0x6c>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	4a08      	ldr	r2, [pc, #32]	; (8000e90 <get_from_tx_buffer+0x6c>)
 8000e70:	6013      	str	r3, [r2, #0]
	}
	return data;
 8000e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3714      	adds	r7, #20
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr
 8000e80:	20000004 	.word	0x20000004
 8000e84:	2000009c 	.word	0x2000009c
 8000e88:	20000650 	.word	0x20000650
 8000e8c:	20000008 	.word	0x20000008
 8000e90:	200000a4 	.word	0x200000a4
 8000e94:	20003a58 	.word	0x20003a58

08000e98 <get_from_rx_buffer>:
char get_from_rx_buffer(USART_TypeDef* USARTx)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
	char data;

	if(USARTx == RS485_UART)
 8000ea0:	4b14      	ldr	r3, [pc, #80]	; (8000ef4 <get_from_rx_buffer+0x5c>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	687a      	ldr	r2, [r7, #4]
 8000ea6:	429a      	cmp	r2, r3
 8000ea8:	d10c      	bne.n	8000ec4 <get_from_rx_buffer+0x2c>
	{

		data=rx_buffer_rs485[rd_pointer_rx_rs485 & (LEN_RX_BUFFER_RS485-1)];
 8000eaa:	4b13      	ldr	r3, [pc, #76]	; (8000ef8 <get_from_rx_buffer+0x60>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000eb2:	4a12      	ldr	r2, [pc, #72]	; (8000efc <get_from_rx_buffer+0x64>)
 8000eb4:	5cd3      	ldrb	r3, [r2, r3]
 8000eb6:	73fb      	strb	r3, [r7, #15]
		rd_pointer_rx_rs485++;
 8000eb8:	4b0f      	ldr	r3, [pc, #60]	; (8000ef8 <get_from_rx_buffer+0x60>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	4a0e      	ldr	r2, [pc, #56]	; (8000ef8 <get_from_rx_buffer+0x60>)
 8000ec0:	6013      	str	r3, [r2, #0]
 8000ec2:	e010      	b.n	8000ee6 <get_from_rx_buffer+0x4e>
	}
	else if(USARTx == DBG_UART)
 8000ec4:	4b0e      	ldr	r3, [pc, #56]	; (8000f00 <get_from_rx_buffer+0x68>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	687a      	ldr	r2, [r7, #4]
 8000eca:	429a      	cmp	r2, r3
 8000ecc:	d10b      	bne.n	8000ee6 <get_from_rx_buffer+0x4e>
	{

		data=rx_buffer_dbg[rd_pointer_rx_dbg & (LEN_RX_BUFFER_DBG-1)];
 8000ece:	4b0d      	ldr	r3, [pc, #52]	; (8000f04 <get_from_rx_buffer+0x6c>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8000ed6:	4a0c      	ldr	r2, [pc, #48]	; (8000f08 <get_from_rx_buffer+0x70>)
 8000ed8:	5cd3      	ldrb	r3, [r2, r3]
 8000eda:	73fb      	strb	r3, [r7, #15]
		rd_pointer_rx_dbg++;
 8000edc:	4b09      	ldr	r3, [pc, #36]	; (8000f04 <get_from_rx_buffer+0x6c>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	4a08      	ldr	r2, [pc, #32]	; (8000f04 <get_from_rx_buffer+0x6c>)
 8000ee4:	6013      	str	r3, [r2, #0]
	}
	return data;
 8000ee6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3714      	adds	r7, #20
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr
 8000ef4:	20000004 	.word	0x20000004
 8000ef8:	200000ac 	.word	0x200000ac
 8000efc:	20000250 	.word	0x20000250
 8000f00:	20000008 	.word	0x20000008
 8000f04:	200000b4 	.word	0x200000b4
 8000f08:	20001a58 	.word	0x20001a58

08000f0c <usart_message_ready>:

	return 0;
}
//**************************************************************************************
char usart_message_ready(USART_TypeDef* USARTx, char delimiter)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	460b      	mov	r3, r1
 8000f16:	70fb      	strb	r3, [r7, #3]
	if (USARTx == DBG_UART)
 8000f18:	4b1f      	ldr	r3, [pc, #124]	; (8000f98 <usart_message_ready+0x8c>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	687a      	ldr	r2, [r7, #4]
 8000f1e:	429a      	cmp	r2, r3
 8000f20:	d117      	bne.n	8000f52 <usart_message_ready+0x46>
	{
		unsigned long tail = rd_pointer_rx_dbg;
 8000f22:	4b1e      	ldr	r3, [pc, #120]	; (8000f9c <usart_message_ready+0x90>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	60fb      	str	r3, [r7, #12]

		while ((wr_pointer_rx_dbg - tail) != 0)
 8000f28:	e00d      	b.n	8000f46 <usart_message_ready+0x3a>
		{
			if (rx_buffer_dbg[tail & (LEN_RX_BUFFER_DBG - 1)] == delimiter)
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8000f30:	4a1b      	ldr	r2, [pc, #108]	; (8000fa0 <usart_message_ready+0x94>)
 8000f32:	5cd3      	ldrb	r3, [r2, r3]
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	78fa      	ldrb	r2, [r7, #3]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	d101      	bne.n	8000f40 <usart_message_ready+0x34>
				return 1;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	e025      	b.n	8000f8c <usart_message_ready+0x80>
			++tail;
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	3301      	adds	r3, #1
 8000f44:	60fb      	str	r3, [r7, #12]
		while ((wr_pointer_rx_dbg - tail) != 0)
 8000f46:	4b17      	ldr	r3, [pc, #92]	; (8000fa4 <usart_message_ready+0x98>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	68fa      	ldr	r2, [r7, #12]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d1ec      	bne.n	8000f2a <usart_message_ready+0x1e>
 8000f50:	e01b      	b.n	8000f8a <usart_message_ready+0x7e>
		}
	}
	else if (USARTx == RS485_UART)
 8000f52:	4b15      	ldr	r3, [pc, #84]	; (8000fa8 <usart_message_ready+0x9c>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	687a      	ldr	r2, [r7, #4]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d116      	bne.n	8000f8a <usart_message_ready+0x7e>
	{
		unsigned long tail = rd_pointer_rx_rs485;
 8000f5c:	4b13      	ldr	r3, [pc, #76]	; (8000fac <usart_message_ready+0xa0>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	60bb      	str	r3, [r7, #8]

		while ((wr_pointer_rx_rs485 - tail) != 0)
 8000f62:	e00d      	b.n	8000f80 <usart_message_ready+0x74>
		{
			if (rx_buffer_rs485[tail & (LEN_RX_BUFFER_RS485 - 1)] == delimiter)
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000f6a:	4a11      	ldr	r2, [pc, #68]	; (8000fb0 <usart_message_ready+0xa4>)
 8000f6c:	5cd3      	ldrb	r3, [r2, r3]
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	78fa      	ldrb	r2, [r7, #3]
 8000f72:	429a      	cmp	r2, r3
 8000f74:	d101      	bne.n	8000f7a <usart_message_ready+0x6e>
				return 1;
 8000f76:	2301      	movs	r3, #1
 8000f78:	e008      	b.n	8000f8c <usart_message_ready+0x80>
			++tail;
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	60bb      	str	r3, [r7, #8]
		while ((wr_pointer_rx_rs485 - tail) != 0)
 8000f80:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <usart_message_ready+0xa8>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	68ba      	ldr	r2, [r7, #8]
 8000f86:	429a      	cmp	r2, r3
 8000f88:	d1ec      	bne.n	8000f64 <usart_message_ready+0x58>
		}
	}
	return 0;
 8000f8a:	2300      	movs	r3, #0
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3714      	adds	r7, #20
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	20000008 	.word	0x20000008
 8000f9c:	200000b4 	.word	0x200000b4
 8000fa0:	20001a58 	.word	0x20001a58
 8000fa4:	200000b8 	.word	0x200000b8
 8000fa8:	20000004 	.word	0x20000004
 8000fac:	200000ac 	.word	0x200000ac
 8000fb0:	20000250 	.word	0x20000250
 8000fb4:	200000b0 	.word	0x200000b0

08000fb8 <read_usart_message>:
/*
 * Reads message from specified uart rx buffer into @dst until @delimiter character is encountered or @max_len exceeded.
 * Returns: number of characters read if successful, zero when there is no message ready to be read.
 */
unsigned int read_usart_message(char* dst, UART_HandleTypeDef* huart, int max_len, char delimiter)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	60b9      	str	r1, [r7, #8]
 8000fc2:	607a      	str	r2, [r7, #4]
 8000fc4:	70fb      	strb	r3, [r7, #3]
	USART_TypeDef* USARTx = huart->Instance;
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	613b      	str	r3, [r7, #16]
	if (usart_message_ready(USARTx,delimiter))
 8000fcc:	78fb      	ldrb	r3, [r7, #3]
 8000fce:	4619      	mov	r1, r3
 8000fd0:	6938      	ldr	r0, [r7, #16]
 8000fd2:	f7ff ff9b 	bl	8000f0c <usart_message_ready>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d018      	beq.n	800100e <read_usart_message+0x56>
	{
		int nr = 0;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	617b      	str	r3, [r7, #20]
		do
		{
			*dst = get_from_rx_buffer(USARTx);
 8000fe0:	6938      	ldr	r0, [r7, #16]
 8000fe2:	f7ff ff59 	bl	8000e98 <get_from_rx_buffer>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	461a      	mov	r2, r3
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	701a      	strb	r2, [r3, #0]
			++nr;
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	617b      	str	r3, [r7, #20]
		} while (*dst++ != delimiter && nr < max_len);
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	1c5a      	adds	r2, r3, #1
 8000ff8:	60fa      	str	r2, [r7, #12]
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	78fa      	ldrb	r2, [r7, #3]
 8000ffe:	429a      	cmp	r2, r3
 8001000:	d003      	beq.n	800100a <read_usart_message+0x52>
 8001002:	697a      	ldr	r2, [r7, #20]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	429a      	cmp	r2, r3
 8001008:	dbea      	blt.n	8000fe0 <read_usart_message+0x28>

		return nr;
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	e000      	b.n	8001010 <read_usart_message+0x58>
	}
	return 0;
 800100e:	2300      	movs	r3, #0
}
 8001010:	4618      	mov	r0, r3
 8001012:	3718      	adds	r7, #24
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <send_usart_message>:
/*
 * Sends @size bytes from @src via specified uart. Nonblocking.
 * Returns: 0 when operation fails due to another message being transmitted, number of bytes written to uart buffer otherwise.
 */

unsigned int send_usart_message(char* src, UART_HandleTypeDef* huart, int size){
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
	USART_TypeDef* USARTx = huart->Instance;
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	613b      	str	r3, [r7, #16]
	if (USARTx == DBG_UART){
 800102a:	4b21      	ldr	r3, [pc, #132]	; (80010b0 <send_usart_message+0x98>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	429a      	cmp	r2, r3
 8001032:	d107      	bne.n	8001044 <send_usart_message+0x2c>
		if(wr_pointer_dbg!=rd_pointer_dbg){
 8001034:	4b1f      	ldr	r3, [pc, #124]	; (80010b4 <send_usart_message+0x9c>)
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	4b1f      	ldr	r3, [pc, #124]	; (80010b8 <send_usart_message+0xa0>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	429a      	cmp	r2, r3
 800103e:	d00e      	beq.n	800105e <send_usart_message+0x46>
			return 0;//another message is in progress.
 8001040:	2300      	movs	r3, #0
 8001042:	e030      	b.n	80010a6 <send_usart_message+0x8e>
		}

	}
	else if (USARTx == RS485_UART){
 8001044:	4b1d      	ldr	r3, [pc, #116]	; (80010bc <send_usart_message+0xa4>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	429a      	cmp	r2, r3
 800104c:	d107      	bne.n	800105e <send_usart_message+0x46>
		if(wr_pointer_rs485!=rd_pointer_rs485){
 800104e:	4b1c      	ldr	r3, [pc, #112]	; (80010c0 <send_usart_message+0xa8>)
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	4b1c      	ldr	r3, [pc, #112]	; (80010c4 <send_usart_message+0xac>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	429a      	cmp	r2, r3
 8001058:	d001      	beq.n	800105e <send_usart_message+0x46>
			return 0;//another message is in progress.
 800105a:	2300      	movs	r3, #0
 800105c:	e023      	b.n	80010a6 <send_usart_message+0x8e>
		}
	}

	int nr = 0;
 800105e:	2300      	movs	r3, #0
 8001060:	617b      	str	r3, [r7, #20]
	do{
		put_in_tx_buffer(*(src + nr), USARTx);
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	68fa      	ldr	r2, [r7, #12]
 8001066:	4413      	add	r3, r2
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	6939      	ldr	r1, [r7, #16]
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff fe87 	bl	8000d80 <put_in_tx_buffer>
		nr++;
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	3301      	adds	r3, #1
 8001076:	617b      	str	r3, [r7, #20]
	} while (nr < size);
 8001078:	697a      	ldr	r2, [r7, #20]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	429a      	cmp	r2, r3
 800107e:	dbf0      	blt.n	8001062 <send_usart_message+0x4a>

	if(nr>0){
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	2b00      	cmp	r3, #0
 8001084:	dd0e      	ble.n	80010a4 <send_usart_message+0x8c>
		USARTx->DR = get_from_tx_buffer(USARTx);
 8001086:	6938      	ldr	r0, [r7, #16]
 8001088:	f7ff fecc 	bl	8000e24 <get_from_tx_buffer>
 800108c:	4603      	mov	r3, r0
 800108e:	461a      	mov	r2, r3
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	605a      	str	r2, [r3, #4]
		__HAL_UART_ENABLE_IT(huart, UART_IT_TXE); //turn on tx interrupt forever (until turned off in IRQ handler)
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	68da      	ldr	r2, [r3, #12]
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80010a2:	60da      	str	r2, [r3, #12]
	}
	return nr;
 80010a4:	697b      	ldr	r3, [r7, #20]
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3718      	adds	r7, #24
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	20000008 	.word	0x20000008
 80010b4:	200000a8 	.word	0x200000a8
 80010b8:	200000a4 	.word	0x200000a4
 80010bc:	20000004 	.word	0x20000004
 80010c0:	200000a0 	.word	0x200000a0
 80010c4:	2000009c 	.word	0x2000009c

080010c8 <uartDemoLoop>:
#include <stm32f4xx_hal.h>
#include <string.h>



void uartDemoLoop(){
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b0d4      	sub	sp, #336	; 0x150
 80010cc:	af00      	add	r7, sp, #0

	static int firstFlag = 0;

	if(firstFlag == 0){
 80010ce:	4b29      	ldr	r3, [pc, #164]	; (8001174 <uartDemoLoop+0xac>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d105      	bne.n	80010e2 <uartDemoLoop+0x1a>
		firstFlag = 1;
 80010d6:	4b27      	ldr	r3, [pc, #156]	; (8001174 <uartDemoLoop+0xac>)
 80010d8:	2201      	movs	r2, #1
 80010da:	601a      	str	r2, [r3, #0]
		printf("[UART demo] Send a string over debug uart and terminate it by ENTER (ascii 13).\r\n");
 80010dc:	4826      	ldr	r0, [pc, #152]	; (8001178 <uartDemoLoop+0xb0>)
 80010de:	f002 f8db 	bl	8003298 <puts>
	}

	char delimiter = 13;
 80010e2:	230d      	movs	r3, #13
 80010e4:	f887 314f 	strb.w	r3, [r7, #335]	; 0x14f
	char msg[64];

	int count = read_usart_message(msg, &huart1, sizeof(msg), delimiter);
 80010e8:	f897 314f 	ldrb.w	r3, [r7, #335]	; 0x14f
 80010ec:	f507 7082 	add.w	r0, r7, #260	; 0x104
 80010f0:	2240      	movs	r2, #64	; 0x40
 80010f2:	4922      	ldr	r1, [pc, #136]	; (800117c <uartDemoLoop+0xb4>)
 80010f4:	f7ff ff60 	bl	8000fb8 <read_usart_message>
 80010f8:	4603      	mov	r3, r0
 80010fa:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148

	if(count == 0){
 80010fe:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8001102:	2b00      	cmp	r3, #0
 8001104:	d103      	bne.n	800110e <uartDemoLoop+0x46>
		printf("[UART demo] message not yet ready.\r\n");
 8001106:	481e      	ldr	r0, [pc, #120]	; (8001180 <uartDemoLoop+0xb8>)
 8001108:	f002 f8c6 	bl	8003298 <puts>
 800110c:	e02e      	b.n	800116c <uartDemoLoop+0xa4>
		return;
	}

	printf("[UART demo] message ready!\r\n");
 800110e:	481d      	ldr	r0, [pc, #116]	; (8001184 <uartDemoLoop+0xbc>)
 8001110:	f002 f8c2 	bl	8003298 <puts>

	msg[count-1] = 0; //null terminate received string
 8001114:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8001118:	3b01      	subs	r3, #1
 800111a:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 800111e:	4413      	add	r3, r2
 8001120:	2200      	movs	r2, #0
 8001122:	f803 2c4c 	strb.w	r2, [r3, #-76]

	char reply[256];

	sprintf(reply, " Sending this as a buffer instead of printf just for demonstration. \n\r The message I got was \"%s\". \n\r", msg);
 8001126:	f507 7282 	add.w	r2, r7, #260	; 0x104
 800112a:	1d3b      	adds	r3, r7, #4
 800112c:	4916      	ldr	r1, [pc, #88]	; (8001188 <uartDemoLoop+0xc0>)
 800112e:	4618      	mov	r0, r3
 8001130:	f002 f8ba 	bl	80032a8 <siprintf>

	int ret = send_usart_message(reply, &huart1, strlen(reply));
 8001134:	1d3b      	adds	r3, r7, #4
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff f84a 	bl	80001d0 <strlen>
 800113c:	4603      	mov	r3, r0
 800113e:	461a      	mov	r2, r3
 8001140:	1d3b      	adds	r3, r7, #4
 8001142:	490e      	ldr	r1, [pc, #56]	; (800117c <uartDemoLoop+0xb4>)
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff ff67 	bl	8001018 <send_usart_message>
 800114a:	4603      	mov	r3, r0
 800114c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144

	if(ret == 0){
 8001150:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001154:	2b00      	cmp	r3, #0
 8001156:	d102      	bne.n	800115e <uartDemoLoop+0x96>
		printf("[UART demo] Fail: Cannot transmit now, another transmission in progress.\n\r");
 8001158:	480c      	ldr	r0, [pc, #48]	; (800118c <uartDemoLoop+0xc4>)
 800115a:	f002 f817 	bl	800318c <iprintf>
	}

	HAL_Delay(500); //sleep for a bit so that next printf does not interfere with send_uart_message();
 800115e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001162:	f000 f8b3 	bl	80012cc <HAL_Delay>

	printf("[UART demo] Success.\n\r");
 8001166:	480a      	ldr	r0, [pc, #40]	; (8001190 <uartDemoLoop+0xc8>)
 8001168:	f002 f810 	bl	800318c <iprintf>

}
 800116c:	f507 77a8 	add.w	r7, r7, #336	; 0x150
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	200000bc 	.word	0x200000bc
 8001178:	08004518 	.word	0x08004518
 800117c:	200000c8 	.word	0x200000c8
 8001180:	0800456c 	.word	0x0800456c
 8001184:	08004590 	.word	0x08004590
 8001188:	080045ac 	.word	0x080045ac
 800118c:	08004614 	.word	0x08004614
 8001190:	08004660 	.word	0x08004660

08001194 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001194:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011cc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001198:	480d      	ldr	r0, [pc, #52]	; (80011d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800119a:	490e      	ldr	r1, [pc, #56]	; (80011d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800119c:	4a0e      	ldr	r2, [pc, #56]	; (80011d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800119e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011a0:	e002      	b.n	80011a8 <LoopCopyDataInit>

080011a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011a6:	3304      	adds	r3, #4

080011a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011ac:	d3f9      	bcc.n	80011a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ae:	4a0b      	ldr	r2, [pc, #44]	; (80011dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011b0:	4c0b      	ldr	r4, [pc, #44]	; (80011e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011b4:	e001      	b.n	80011ba <LoopFillZerobss>

080011b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011b8:	3204      	adds	r2, #4

080011ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011bc:	d3fb      	bcc.n	80011b6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80011be:	f7ff fd69 	bl	8000c94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011c2:	f001 ffb7 	bl	8003134 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011c6:	f7ff f9d7 	bl	8000578 <main>
  bx  lr    
 80011ca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80011cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011d4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80011d8:	08004738 	.word	0x08004738
  ldr r2, =_sbss
 80011dc:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80011e0:	20003eec 	.word	0x20003eec

080011e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011e4:	e7fe      	b.n	80011e4 <ADC_IRQHandler>
	...

080011e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011ec:	4b0e      	ldr	r3, [pc, #56]	; (8001228 <HAL_Init+0x40>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a0d      	ldr	r2, [pc, #52]	; (8001228 <HAL_Init+0x40>)
 80011f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011f8:	4b0b      	ldr	r3, [pc, #44]	; (8001228 <HAL_Init+0x40>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a0a      	ldr	r2, [pc, #40]	; (8001228 <HAL_Init+0x40>)
 80011fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001202:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001204:	4b08      	ldr	r3, [pc, #32]	; (8001228 <HAL_Init+0x40>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a07      	ldr	r2, [pc, #28]	; (8001228 <HAL_Init+0x40>)
 800120a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800120e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001210:	2003      	movs	r0, #3
 8001212:	f000 f94f 	bl	80014b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001216:	2000      	movs	r0, #0
 8001218:	f000 f808 	bl	800122c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800121c:	f7ff fb1a 	bl	8000854 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40023c00 	.word	0x40023c00

0800122c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001234:	4b12      	ldr	r3, [pc, #72]	; (8001280 <HAL_InitTick+0x54>)
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	4b12      	ldr	r3, [pc, #72]	; (8001284 <HAL_InitTick+0x58>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	4619      	mov	r1, r3
 800123e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001242:	fbb3 f3f1 	udiv	r3, r3, r1
 8001246:	fbb2 f3f3 	udiv	r3, r2, r3
 800124a:	4618      	mov	r0, r3
 800124c:	f000 f967 	bl	800151e <HAL_SYSTICK_Config>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e00e      	b.n	8001278 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2b0f      	cmp	r3, #15
 800125e:	d80a      	bhi.n	8001276 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001260:	2200      	movs	r2, #0
 8001262:	6879      	ldr	r1, [r7, #4]
 8001264:	f04f 30ff 	mov.w	r0, #4294967295
 8001268:	f000 f92f 	bl	80014ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800126c:	4a06      	ldr	r2, [pc, #24]	; (8001288 <HAL_InitTick+0x5c>)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001272:	2300      	movs	r3, #0
 8001274:	e000      	b.n	8001278 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
}
 8001278:	4618      	mov	r0, r3
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20000000 	.word	0x20000000
 8001284:	20000010 	.word	0x20000010
 8001288:	2000000c 	.word	0x2000000c

0800128c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001290:	4b06      	ldr	r3, [pc, #24]	; (80012ac <HAL_IncTick+0x20>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	461a      	mov	r2, r3
 8001296:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <HAL_IncTick+0x24>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4413      	add	r3, r2
 800129c:	4a04      	ldr	r2, [pc, #16]	; (80012b0 <HAL_IncTick+0x24>)
 800129e:	6013      	str	r3, [r2, #0]
}
 80012a0:	bf00      	nop
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	20000010 	.word	0x20000010
 80012b0:	20003ed8 	.word	0x20003ed8

080012b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  return uwTick;
 80012b8:	4b03      	ldr	r3, [pc, #12]	; (80012c8 <HAL_GetTick+0x14>)
 80012ba:	681b      	ldr	r3, [r3, #0]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	20003ed8 	.word	0x20003ed8

080012cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012d4:	f7ff ffee 	bl	80012b4 <HAL_GetTick>
 80012d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012e4:	d005      	beq.n	80012f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012e6:	4b0a      	ldr	r3, [pc, #40]	; (8001310 <HAL_Delay+0x44>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	461a      	mov	r2, r3
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	4413      	add	r3, r2
 80012f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012f2:	bf00      	nop
 80012f4:	f7ff ffde 	bl	80012b4 <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	68fa      	ldr	r2, [r7, #12]
 8001300:	429a      	cmp	r2, r3
 8001302:	d8f7      	bhi.n	80012f4 <HAL_Delay+0x28>
  {
  }
}
 8001304:	bf00      	nop
 8001306:	bf00      	nop
 8001308:	3710      	adds	r7, #16
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	20000010 	.word	0x20000010

08001314 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f003 0307 	and.w	r3, r3, #7
 8001322:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001324:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <__NVIC_SetPriorityGrouping+0x44>)
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800132a:	68ba      	ldr	r2, [r7, #8]
 800132c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001330:	4013      	ands	r3, r2
 8001332:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800133c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001340:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001344:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001346:	4a04      	ldr	r2, [pc, #16]	; (8001358 <__NVIC_SetPriorityGrouping+0x44>)
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	60d3      	str	r3, [r2, #12]
}
 800134c:	bf00      	nop
 800134e:	3714      	adds	r7, #20
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr
 8001358:	e000ed00 	.word	0xe000ed00

0800135c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001360:	4b04      	ldr	r3, [pc, #16]	; (8001374 <__NVIC_GetPriorityGrouping+0x18>)
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	0a1b      	lsrs	r3, r3, #8
 8001366:	f003 0307 	and.w	r3, r3, #7
}
 800136a:	4618      	mov	r0, r3
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	e000ed00 	.word	0xe000ed00

08001378 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001386:	2b00      	cmp	r3, #0
 8001388:	db0b      	blt.n	80013a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800138a:	79fb      	ldrb	r3, [r7, #7]
 800138c:	f003 021f 	and.w	r2, r3, #31
 8001390:	4907      	ldr	r1, [pc, #28]	; (80013b0 <__NVIC_EnableIRQ+0x38>)
 8001392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001396:	095b      	lsrs	r3, r3, #5
 8001398:	2001      	movs	r0, #1
 800139a:	fa00 f202 	lsl.w	r2, r0, r2
 800139e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013a2:	bf00      	nop
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	e000e100 	.word	0xe000e100

080013b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	4603      	mov	r3, r0
 80013bc:	6039      	str	r1, [r7, #0]
 80013be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	db0a      	blt.n	80013de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	b2da      	uxtb	r2, r3
 80013cc:	490c      	ldr	r1, [pc, #48]	; (8001400 <__NVIC_SetPriority+0x4c>)
 80013ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d2:	0112      	lsls	r2, r2, #4
 80013d4:	b2d2      	uxtb	r2, r2
 80013d6:	440b      	add	r3, r1
 80013d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013dc:	e00a      	b.n	80013f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	b2da      	uxtb	r2, r3
 80013e2:	4908      	ldr	r1, [pc, #32]	; (8001404 <__NVIC_SetPriority+0x50>)
 80013e4:	79fb      	ldrb	r3, [r7, #7]
 80013e6:	f003 030f 	and.w	r3, r3, #15
 80013ea:	3b04      	subs	r3, #4
 80013ec:	0112      	lsls	r2, r2, #4
 80013ee:	b2d2      	uxtb	r2, r2
 80013f0:	440b      	add	r3, r1
 80013f2:	761a      	strb	r2, [r3, #24]
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	e000e100 	.word	0xe000e100
 8001404:	e000ed00 	.word	0xe000ed00

08001408 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001408:	b480      	push	{r7}
 800140a:	b089      	sub	sp, #36	; 0x24
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	f003 0307 	and.w	r3, r3, #7
 800141a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	f1c3 0307 	rsb	r3, r3, #7
 8001422:	2b04      	cmp	r3, #4
 8001424:	bf28      	it	cs
 8001426:	2304      	movcs	r3, #4
 8001428:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	3304      	adds	r3, #4
 800142e:	2b06      	cmp	r3, #6
 8001430:	d902      	bls.n	8001438 <NVIC_EncodePriority+0x30>
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	3b03      	subs	r3, #3
 8001436:	e000      	b.n	800143a <NVIC_EncodePriority+0x32>
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800143c:	f04f 32ff 	mov.w	r2, #4294967295
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	43da      	mvns	r2, r3
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	401a      	ands	r2, r3
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001450:	f04f 31ff 	mov.w	r1, #4294967295
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	fa01 f303 	lsl.w	r3, r1, r3
 800145a:	43d9      	mvns	r1, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001460:	4313      	orrs	r3, r2
         );
}
 8001462:	4618      	mov	r0, r3
 8001464:	3724      	adds	r7, #36	; 0x24
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
	...

08001470 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	3b01      	subs	r3, #1
 800147c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001480:	d301      	bcc.n	8001486 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001482:	2301      	movs	r3, #1
 8001484:	e00f      	b.n	80014a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001486:	4a0a      	ldr	r2, [pc, #40]	; (80014b0 <SysTick_Config+0x40>)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	3b01      	subs	r3, #1
 800148c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800148e:	210f      	movs	r1, #15
 8001490:	f04f 30ff 	mov.w	r0, #4294967295
 8001494:	f7ff ff8e 	bl	80013b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001498:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <SysTick_Config+0x40>)
 800149a:	2200      	movs	r2, #0
 800149c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800149e:	4b04      	ldr	r3, [pc, #16]	; (80014b0 <SysTick_Config+0x40>)
 80014a0:	2207      	movs	r2, #7
 80014a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014a4:	2300      	movs	r3, #0
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	e000e010 	.word	0xe000e010

080014b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f7ff ff29 	bl	8001314 <__NVIC_SetPriorityGrouping>
}
 80014c2:	bf00      	nop
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b086      	sub	sp, #24
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	4603      	mov	r3, r0
 80014d2:	60b9      	str	r1, [r7, #8]
 80014d4:	607a      	str	r2, [r7, #4]
 80014d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014d8:	2300      	movs	r3, #0
 80014da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014dc:	f7ff ff3e 	bl	800135c <__NVIC_GetPriorityGrouping>
 80014e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014e2:	687a      	ldr	r2, [r7, #4]
 80014e4:	68b9      	ldr	r1, [r7, #8]
 80014e6:	6978      	ldr	r0, [r7, #20]
 80014e8:	f7ff ff8e 	bl	8001408 <NVIC_EncodePriority>
 80014ec:	4602      	mov	r2, r0
 80014ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014f2:	4611      	mov	r1, r2
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff ff5d 	bl	80013b4 <__NVIC_SetPriority>
}
 80014fa:	bf00      	nop
 80014fc:	3718      	adds	r7, #24
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	b082      	sub	sp, #8
 8001506:	af00      	add	r7, sp, #0
 8001508:	4603      	mov	r3, r0
 800150a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800150c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff ff31 	bl	8001378 <__NVIC_EnableIRQ>
}
 8001516:	bf00      	nop
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	b082      	sub	sp, #8
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f7ff ffa2 	bl	8001470 <SysTick_Config>
 800152c:	4603      	mov	r3, r0
}
 800152e:	4618      	mov	r0, r3
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	b084      	sub	sp, #16
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001542:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001544:	f7ff feb6 	bl	80012b4 <HAL_GetTick>
 8001548:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001550:	b2db      	uxtb	r3, r3
 8001552:	2b02      	cmp	r3, #2
 8001554:	d008      	beq.n	8001568 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2280      	movs	r2, #128	; 0x80
 800155a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2200      	movs	r2, #0
 8001560:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	e052      	b.n	800160e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f022 0216 	bic.w	r2, r2, #22
 8001576:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	695a      	ldr	r2, [r3, #20]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001586:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158c:	2b00      	cmp	r3, #0
 800158e:	d103      	bne.n	8001598 <HAL_DMA_Abort+0x62>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001594:	2b00      	cmp	r3, #0
 8001596:	d007      	beq.n	80015a8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f022 0208 	bic.w	r2, r2, #8
 80015a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f022 0201 	bic.w	r2, r2, #1
 80015b6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015b8:	e013      	b.n	80015e2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80015ba:	f7ff fe7b 	bl	80012b4 <HAL_GetTick>
 80015be:	4602      	mov	r2, r0
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	2b05      	cmp	r3, #5
 80015c6:	d90c      	bls.n	80015e2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2220      	movs	r2, #32
 80015cc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2203      	movs	r2, #3
 80015d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2200      	movs	r2, #0
 80015da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e015      	b.n	800160e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 0301 	and.w	r3, r3, #1
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d1e4      	bne.n	80015ba <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015f4:	223f      	movs	r2, #63	; 0x3f
 80015f6:	409a      	lsls	r2, r3
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2201      	movs	r2, #1
 8001600:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2200      	movs	r2, #0
 8001608:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	3710      	adds	r7, #16
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001616:	b480      	push	{r7}
 8001618:	b083      	sub	sp, #12
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001624:	b2db      	uxtb	r3, r3
 8001626:	2b02      	cmp	r3, #2
 8001628:	d004      	beq.n	8001634 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2280      	movs	r2, #128	; 0x80
 800162e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e00c      	b.n	800164e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2205      	movs	r2, #5
 8001638:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f022 0201 	bic.w	r2, r2, #1
 800164a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800164c:	2300      	movs	r3, #0
}
 800164e:	4618      	mov	r0, r3
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
	...

0800165c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800165c:	b480      	push	{r7}
 800165e:	b089      	sub	sp, #36	; 0x24
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001666:	2300      	movs	r3, #0
 8001668:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800166a:	2300      	movs	r3, #0
 800166c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800166e:	2300      	movs	r3, #0
 8001670:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001672:	2300      	movs	r3, #0
 8001674:	61fb      	str	r3, [r7, #28]
 8001676:	e16b      	b.n	8001950 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001678:	2201      	movs	r2, #1
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	697a      	ldr	r2, [r7, #20]
 8001688:	4013      	ands	r3, r2
 800168a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800168c:	693a      	ldr	r2, [r7, #16]
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	429a      	cmp	r2, r3
 8001692:	f040 815a 	bne.w	800194a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f003 0303 	and.w	r3, r3, #3
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d005      	beq.n	80016ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d130      	bne.n	8001710 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	2203      	movs	r2, #3
 80016ba:	fa02 f303 	lsl.w	r3, r2, r3
 80016be:	43db      	mvns	r3, r3
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	4013      	ands	r3, r2
 80016c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	68da      	ldr	r2, [r3, #12]
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	fa02 f303 	lsl.w	r3, r2, r3
 80016d2:	69ba      	ldr	r2, [r7, #24]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016e4:	2201      	movs	r2, #1
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ec:	43db      	mvns	r3, r3
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	4013      	ands	r3, r2
 80016f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	091b      	lsrs	r3, r3, #4
 80016fa:	f003 0201 	and.w	r2, r3, #1
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	4313      	orrs	r3, r2
 8001708:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f003 0303 	and.w	r3, r3, #3
 8001718:	2b03      	cmp	r3, #3
 800171a:	d017      	beq.n	800174c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	2203      	movs	r2, #3
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	43db      	mvns	r3, r3
 800172e:	69ba      	ldr	r2, [r7, #24]
 8001730:	4013      	ands	r3, r2
 8001732:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	689a      	ldr	r2, [r3, #8]
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	4313      	orrs	r3, r2
 8001744:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f003 0303 	and.w	r3, r3, #3
 8001754:	2b02      	cmp	r3, #2
 8001756:	d123      	bne.n	80017a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	08da      	lsrs	r2, r3, #3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	3208      	adds	r2, #8
 8001760:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001764:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	f003 0307 	and.w	r3, r3, #7
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	220f      	movs	r2, #15
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	43db      	mvns	r3, r3
 8001776:	69ba      	ldr	r2, [r7, #24]
 8001778:	4013      	ands	r3, r2
 800177a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	691a      	ldr	r2, [r3, #16]
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	f003 0307 	and.w	r3, r3, #7
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	4313      	orrs	r3, r2
 8001790:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	08da      	lsrs	r2, r3, #3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	3208      	adds	r2, #8
 800179a:	69b9      	ldr	r1, [r7, #24]
 800179c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	2203      	movs	r2, #3
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	43db      	mvns	r3, r3
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	4013      	ands	r3, r2
 80017b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f003 0203 	and.w	r2, r3, #3
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	005b      	lsls	r3, r3, #1
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017dc:	2b00      	cmp	r3, #0
 80017de:	f000 80b4 	beq.w	800194a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	60fb      	str	r3, [r7, #12]
 80017e6:	4b60      	ldr	r3, [pc, #384]	; (8001968 <HAL_GPIO_Init+0x30c>)
 80017e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ea:	4a5f      	ldr	r2, [pc, #380]	; (8001968 <HAL_GPIO_Init+0x30c>)
 80017ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017f0:	6453      	str	r3, [r2, #68]	; 0x44
 80017f2:	4b5d      	ldr	r3, [pc, #372]	; (8001968 <HAL_GPIO_Init+0x30c>)
 80017f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017fe:	4a5b      	ldr	r2, [pc, #364]	; (800196c <HAL_GPIO_Init+0x310>)
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	089b      	lsrs	r3, r3, #2
 8001804:	3302      	adds	r3, #2
 8001806:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800180a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	f003 0303 	and.w	r3, r3, #3
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	220f      	movs	r2, #15
 8001816:	fa02 f303 	lsl.w	r3, r2, r3
 800181a:	43db      	mvns	r3, r3
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	4013      	ands	r3, r2
 8001820:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a52      	ldr	r2, [pc, #328]	; (8001970 <HAL_GPIO_Init+0x314>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d02b      	beq.n	8001882 <HAL_GPIO_Init+0x226>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4a51      	ldr	r2, [pc, #324]	; (8001974 <HAL_GPIO_Init+0x318>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d025      	beq.n	800187e <HAL_GPIO_Init+0x222>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4a50      	ldr	r2, [pc, #320]	; (8001978 <HAL_GPIO_Init+0x31c>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d01f      	beq.n	800187a <HAL_GPIO_Init+0x21e>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4a4f      	ldr	r2, [pc, #316]	; (800197c <HAL_GPIO_Init+0x320>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d019      	beq.n	8001876 <HAL_GPIO_Init+0x21a>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4a4e      	ldr	r2, [pc, #312]	; (8001980 <HAL_GPIO_Init+0x324>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d013      	beq.n	8001872 <HAL_GPIO_Init+0x216>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4a4d      	ldr	r2, [pc, #308]	; (8001984 <HAL_GPIO_Init+0x328>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d00d      	beq.n	800186e <HAL_GPIO_Init+0x212>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4a4c      	ldr	r2, [pc, #304]	; (8001988 <HAL_GPIO_Init+0x32c>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d007      	beq.n	800186a <HAL_GPIO_Init+0x20e>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4a4b      	ldr	r2, [pc, #300]	; (800198c <HAL_GPIO_Init+0x330>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d101      	bne.n	8001866 <HAL_GPIO_Init+0x20a>
 8001862:	2307      	movs	r3, #7
 8001864:	e00e      	b.n	8001884 <HAL_GPIO_Init+0x228>
 8001866:	2308      	movs	r3, #8
 8001868:	e00c      	b.n	8001884 <HAL_GPIO_Init+0x228>
 800186a:	2306      	movs	r3, #6
 800186c:	e00a      	b.n	8001884 <HAL_GPIO_Init+0x228>
 800186e:	2305      	movs	r3, #5
 8001870:	e008      	b.n	8001884 <HAL_GPIO_Init+0x228>
 8001872:	2304      	movs	r3, #4
 8001874:	e006      	b.n	8001884 <HAL_GPIO_Init+0x228>
 8001876:	2303      	movs	r3, #3
 8001878:	e004      	b.n	8001884 <HAL_GPIO_Init+0x228>
 800187a:	2302      	movs	r3, #2
 800187c:	e002      	b.n	8001884 <HAL_GPIO_Init+0x228>
 800187e:	2301      	movs	r3, #1
 8001880:	e000      	b.n	8001884 <HAL_GPIO_Init+0x228>
 8001882:	2300      	movs	r3, #0
 8001884:	69fa      	ldr	r2, [r7, #28]
 8001886:	f002 0203 	and.w	r2, r2, #3
 800188a:	0092      	lsls	r2, r2, #2
 800188c:	4093      	lsls	r3, r2
 800188e:	69ba      	ldr	r2, [r7, #24]
 8001890:	4313      	orrs	r3, r2
 8001892:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001894:	4935      	ldr	r1, [pc, #212]	; (800196c <HAL_GPIO_Init+0x310>)
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	089b      	lsrs	r3, r3, #2
 800189a:	3302      	adds	r3, #2
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018a2:	4b3b      	ldr	r3, [pc, #236]	; (8001990 <HAL_GPIO_Init+0x334>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	43db      	mvns	r3, r3
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	4013      	ands	r3, r2
 80018b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d003      	beq.n	80018c6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80018be:	69ba      	ldr	r2, [r7, #24]
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018c6:	4a32      	ldr	r2, [pc, #200]	; (8001990 <HAL_GPIO_Init+0x334>)
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80018cc:	4b30      	ldr	r3, [pc, #192]	; (8001990 <HAL_GPIO_Init+0x334>)
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	43db      	mvns	r3, r3
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	4013      	ands	r3, r2
 80018da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d003      	beq.n	80018f0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018f0:	4a27      	ldr	r2, [pc, #156]	; (8001990 <HAL_GPIO_Init+0x334>)
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018f6:	4b26      	ldr	r3, [pc, #152]	; (8001990 <HAL_GPIO_Init+0x334>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	43db      	mvns	r3, r3
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	4013      	ands	r3, r2
 8001904:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d003      	beq.n	800191a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001912:	69ba      	ldr	r2, [r7, #24]
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	4313      	orrs	r3, r2
 8001918:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800191a:	4a1d      	ldr	r2, [pc, #116]	; (8001990 <HAL_GPIO_Init+0x334>)
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001920:	4b1b      	ldr	r3, [pc, #108]	; (8001990 <HAL_GPIO_Init+0x334>)
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	43db      	mvns	r3, r3
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	4013      	ands	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d003      	beq.n	8001944 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	4313      	orrs	r3, r2
 8001942:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001944:	4a12      	ldr	r2, [pc, #72]	; (8001990 <HAL_GPIO_Init+0x334>)
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	3301      	adds	r3, #1
 800194e:	61fb      	str	r3, [r7, #28]
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	2b0f      	cmp	r3, #15
 8001954:	f67f ae90 	bls.w	8001678 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001958:	bf00      	nop
 800195a:	bf00      	nop
 800195c:	3724      	adds	r7, #36	; 0x24
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	40023800 	.word	0x40023800
 800196c:	40013800 	.word	0x40013800
 8001970:	40020000 	.word	0x40020000
 8001974:	40020400 	.word	0x40020400
 8001978:	40020800 	.word	0x40020800
 800197c:	40020c00 	.word	0x40020c00
 8001980:	40021000 	.word	0x40021000
 8001984:	40021400 	.word	0x40021400
 8001988:	40021800 	.word	0x40021800
 800198c:	40021c00 	.word	0x40021c00
 8001990:	40013c00 	.word	0x40013c00

08001994 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	460b      	mov	r3, r1
 800199e:	807b      	strh	r3, [r7, #2]
 80019a0:	4613      	mov	r3, r2
 80019a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019a4:	787b      	ldrb	r3, [r7, #1]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d003      	beq.n	80019b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019aa:	887a      	ldrh	r2, [r7, #2]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019b0:	e003      	b.n	80019ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019b2:	887b      	ldrh	r3, [r7, #2]
 80019b4:	041a      	lsls	r2, r3, #16
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	619a      	str	r2, [r3, #24]
}
 80019ba:	bf00      	nop
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
	...

080019c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b086      	sub	sp, #24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d101      	bne.n	80019da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e264      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d075      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019e6:	4ba3      	ldr	r3, [pc, #652]	; (8001c74 <HAL_RCC_OscConfig+0x2ac>)
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	f003 030c 	and.w	r3, r3, #12
 80019ee:	2b04      	cmp	r3, #4
 80019f0:	d00c      	beq.n	8001a0c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019f2:	4ba0      	ldr	r3, [pc, #640]	; (8001c74 <HAL_RCC_OscConfig+0x2ac>)
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019fa:	2b08      	cmp	r3, #8
 80019fc:	d112      	bne.n	8001a24 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019fe:	4b9d      	ldr	r3, [pc, #628]	; (8001c74 <HAL_RCC_OscConfig+0x2ac>)
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a0a:	d10b      	bne.n	8001a24 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a0c:	4b99      	ldr	r3, [pc, #612]	; (8001c74 <HAL_RCC_OscConfig+0x2ac>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d05b      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x108>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d157      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e23f      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a2c:	d106      	bne.n	8001a3c <HAL_RCC_OscConfig+0x74>
 8001a2e:	4b91      	ldr	r3, [pc, #580]	; (8001c74 <HAL_RCC_OscConfig+0x2ac>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a90      	ldr	r2, [pc, #576]	; (8001c74 <HAL_RCC_OscConfig+0x2ac>)
 8001a34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a38:	6013      	str	r3, [r2, #0]
 8001a3a:	e01d      	b.n	8001a78 <HAL_RCC_OscConfig+0xb0>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a44:	d10c      	bne.n	8001a60 <HAL_RCC_OscConfig+0x98>
 8001a46:	4b8b      	ldr	r3, [pc, #556]	; (8001c74 <HAL_RCC_OscConfig+0x2ac>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a8a      	ldr	r2, [pc, #552]	; (8001c74 <HAL_RCC_OscConfig+0x2ac>)
 8001a4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a50:	6013      	str	r3, [r2, #0]
 8001a52:	4b88      	ldr	r3, [pc, #544]	; (8001c74 <HAL_RCC_OscConfig+0x2ac>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a87      	ldr	r2, [pc, #540]	; (8001c74 <HAL_RCC_OscConfig+0x2ac>)
 8001a58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a5c:	6013      	str	r3, [r2, #0]
 8001a5e:	e00b      	b.n	8001a78 <HAL_RCC_OscConfig+0xb0>
 8001a60:	4b84      	ldr	r3, [pc, #528]	; (8001c74 <HAL_RCC_OscConfig+0x2ac>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a83      	ldr	r2, [pc, #524]	; (8001c74 <HAL_RCC_OscConfig+0x2ac>)
 8001a66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a6a:	6013      	str	r3, [r2, #0]
 8001a6c:	4b81      	ldr	r3, [pc, #516]	; (8001c74 <HAL_RCC_OscConfig+0x2ac>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a80      	ldr	r2, [pc, #512]	; (8001c74 <HAL_RCC_OscConfig+0x2ac>)
 8001a72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d013      	beq.n	8001aa8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a80:	f7ff fc18 	bl	80012b4 <HAL_GetTick>
 8001a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a86:	e008      	b.n	8001a9a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a88:	f7ff fc14 	bl	80012b4 <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	2b64      	cmp	r3, #100	; 0x64
 8001a94:	d901      	bls.n	8001a9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e204      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a9a:	4b76      	ldr	r3, [pc, #472]	; (8001c74 <HAL_RCC_OscConfig+0x2ac>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d0f0      	beq.n	8001a88 <HAL_RCC_OscConfig+0xc0>
 8001aa6:	e014      	b.n	8001ad2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa8:	f7ff fc04 	bl	80012b4 <HAL_GetTick>
 8001aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aae:	e008      	b.n	8001ac2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ab0:	f7ff fc00 	bl	80012b4 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b64      	cmp	r3, #100	; 0x64
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e1f0      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ac2:	4b6c      	ldr	r3, [pc, #432]	; (8001c74 <HAL_RCC_OscConfig+0x2ac>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d1f0      	bne.n	8001ab0 <HAL_RCC_OscConfig+0xe8>
 8001ace:	e000      	b.n	8001ad2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ad0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d063      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ade:	4b65      	ldr	r3, [pc, #404]	; (8001c74 <HAL_RCC_OscConfig+0x2ac>)
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	f003 030c 	and.w	r3, r3, #12
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d00b      	beq.n	8001b02 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001aea:	4b62      	ldr	r3, [pc, #392]	; (8001c74 <HAL_RCC_OscConfig+0x2ac>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001af2:	2b08      	cmp	r3, #8
 8001af4:	d11c      	bne.n	8001b30 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001af6:	4b5f      	ldr	r3, [pc, #380]	; (8001c74 <HAL_RCC_OscConfig+0x2ac>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d116      	bne.n	8001b30 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b02:	4b5c      	ldr	r3, [pc, #368]	; (8001c74 <HAL_RCC_OscConfig+0x2ac>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d005      	beq.n	8001b1a <HAL_RCC_OscConfig+0x152>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d001      	beq.n	8001b1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e1c4      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b1a:	4b56      	ldr	r3, [pc, #344]	; (8001c74 <HAL_RCC_OscConfig+0x2ac>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	691b      	ldr	r3, [r3, #16]
 8001b26:	00db      	lsls	r3, r3, #3
 8001b28:	4952      	ldr	r1, [pc, #328]	; (8001c74 <HAL_RCC_OscConfig+0x2ac>)
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b2e:	e03a      	b.n	8001ba6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d020      	beq.n	8001b7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b38:	4b4f      	ldr	r3, [pc, #316]	; (8001c78 <HAL_RCC_OscConfig+0x2b0>)
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b3e:	f7ff fbb9 	bl	80012b4 <HAL_GetTick>
 8001b42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b44:	e008      	b.n	8001b58 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b46:	f7ff fbb5 	bl	80012b4 <HAL_GetTick>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d901      	bls.n	8001b58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b54:	2303      	movs	r3, #3
 8001b56:	e1a5      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b58:	4b46      	ldr	r3, [pc, #280]	; (8001c74 <HAL_RCC_OscConfig+0x2ac>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0302 	and.w	r3, r3, #2
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d0f0      	beq.n	8001b46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b64:	4b43      	ldr	r3, [pc, #268]	; (8001c74 <HAL_RCC_OscConfig+0x2ac>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	691b      	ldr	r3, [r3, #16]
 8001b70:	00db      	lsls	r3, r3, #3
 8001b72:	4940      	ldr	r1, [pc, #256]	; (8001c74 <HAL_RCC_OscConfig+0x2ac>)
 8001b74:	4313      	orrs	r3, r2
 8001b76:	600b      	str	r3, [r1, #0]
 8001b78:	e015      	b.n	8001ba6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b7a:	4b3f      	ldr	r3, [pc, #252]	; (8001c78 <HAL_RCC_OscConfig+0x2b0>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b80:	f7ff fb98 	bl	80012b4 <HAL_GetTick>
 8001b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b88:	f7ff fb94 	bl	80012b4 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e184      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b9a:	4b36      	ldr	r3, [pc, #216]	; (8001c74 <HAL_RCC_OscConfig+0x2ac>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d1f0      	bne.n	8001b88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0308 	and.w	r3, r3, #8
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d030      	beq.n	8001c14 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	695b      	ldr	r3, [r3, #20]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d016      	beq.n	8001be8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bba:	4b30      	ldr	r3, [pc, #192]	; (8001c7c <HAL_RCC_OscConfig+0x2b4>)
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bc0:	f7ff fb78 	bl	80012b4 <HAL_GetTick>
 8001bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bc6:	e008      	b.n	8001bda <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bc8:	f7ff fb74 	bl	80012b4 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e164      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bda:	4b26      	ldr	r3, [pc, #152]	; (8001c74 <HAL_RCC_OscConfig+0x2ac>)
 8001bdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d0f0      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x200>
 8001be6:	e015      	b.n	8001c14 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001be8:	4b24      	ldr	r3, [pc, #144]	; (8001c7c <HAL_RCC_OscConfig+0x2b4>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bee:	f7ff fb61 	bl	80012b4 <HAL_GetTick>
 8001bf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bf4:	e008      	b.n	8001c08 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bf6:	f7ff fb5d 	bl	80012b4 <HAL_GetTick>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d901      	bls.n	8001c08 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001c04:	2303      	movs	r3, #3
 8001c06:	e14d      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c08:	4b1a      	ldr	r3, [pc, #104]	; (8001c74 <HAL_RCC_OscConfig+0x2ac>)
 8001c0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c0c:	f003 0302 	and.w	r3, r3, #2
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d1f0      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0304 	and.w	r3, r3, #4
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	f000 80a0 	beq.w	8001d62 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c22:	2300      	movs	r3, #0
 8001c24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c26:	4b13      	ldr	r3, [pc, #76]	; (8001c74 <HAL_RCC_OscConfig+0x2ac>)
 8001c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d10f      	bne.n	8001c52 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c32:	2300      	movs	r3, #0
 8001c34:	60bb      	str	r3, [r7, #8]
 8001c36:	4b0f      	ldr	r3, [pc, #60]	; (8001c74 <HAL_RCC_OscConfig+0x2ac>)
 8001c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3a:	4a0e      	ldr	r2, [pc, #56]	; (8001c74 <HAL_RCC_OscConfig+0x2ac>)
 8001c3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c40:	6413      	str	r3, [r2, #64]	; 0x40
 8001c42:	4b0c      	ldr	r3, [pc, #48]	; (8001c74 <HAL_RCC_OscConfig+0x2ac>)
 8001c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c4a:	60bb      	str	r3, [r7, #8]
 8001c4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c52:	4b0b      	ldr	r3, [pc, #44]	; (8001c80 <HAL_RCC_OscConfig+0x2b8>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d121      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c5e:	4b08      	ldr	r3, [pc, #32]	; (8001c80 <HAL_RCC_OscConfig+0x2b8>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a07      	ldr	r2, [pc, #28]	; (8001c80 <HAL_RCC_OscConfig+0x2b8>)
 8001c64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c6a:	f7ff fb23 	bl	80012b4 <HAL_GetTick>
 8001c6e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c70:	e011      	b.n	8001c96 <HAL_RCC_OscConfig+0x2ce>
 8001c72:	bf00      	nop
 8001c74:	40023800 	.word	0x40023800
 8001c78:	42470000 	.word	0x42470000
 8001c7c:	42470e80 	.word	0x42470e80
 8001c80:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c84:	f7ff fb16 	bl	80012b4 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e106      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c96:	4b85      	ldr	r3, [pc, #532]	; (8001eac <HAL_RCC_OscConfig+0x4e4>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d0f0      	beq.n	8001c84 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d106      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x2f0>
 8001caa:	4b81      	ldr	r3, [pc, #516]	; (8001eb0 <HAL_RCC_OscConfig+0x4e8>)
 8001cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cae:	4a80      	ldr	r2, [pc, #512]	; (8001eb0 <HAL_RCC_OscConfig+0x4e8>)
 8001cb0:	f043 0301 	orr.w	r3, r3, #1
 8001cb4:	6713      	str	r3, [r2, #112]	; 0x70
 8001cb6:	e01c      	b.n	8001cf2 <HAL_RCC_OscConfig+0x32a>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	2b05      	cmp	r3, #5
 8001cbe:	d10c      	bne.n	8001cda <HAL_RCC_OscConfig+0x312>
 8001cc0:	4b7b      	ldr	r3, [pc, #492]	; (8001eb0 <HAL_RCC_OscConfig+0x4e8>)
 8001cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cc4:	4a7a      	ldr	r2, [pc, #488]	; (8001eb0 <HAL_RCC_OscConfig+0x4e8>)
 8001cc6:	f043 0304 	orr.w	r3, r3, #4
 8001cca:	6713      	str	r3, [r2, #112]	; 0x70
 8001ccc:	4b78      	ldr	r3, [pc, #480]	; (8001eb0 <HAL_RCC_OscConfig+0x4e8>)
 8001cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cd0:	4a77      	ldr	r2, [pc, #476]	; (8001eb0 <HAL_RCC_OscConfig+0x4e8>)
 8001cd2:	f043 0301 	orr.w	r3, r3, #1
 8001cd6:	6713      	str	r3, [r2, #112]	; 0x70
 8001cd8:	e00b      	b.n	8001cf2 <HAL_RCC_OscConfig+0x32a>
 8001cda:	4b75      	ldr	r3, [pc, #468]	; (8001eb0 <HAL_RCC_OscConfig+0x4e8>)
 8001cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cde:	4a74      	ldr	r2, [pc, #464]	; (8001eb0 <HAL_RCC_OscConfig+0x4e8>)
 8001ce0:	f023 0301 	bic.w	r3, r3, #1
 8001ce4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ce6:	4b72      	ldr	r3, [pc, #456]	; (8001eb0 <HAL_RCC_OscConfig+0x4e8>)
 8001ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cea:	4a71      	ldr	r2, [pc, #452]	; (8001eb0 <HAL_RCC_OscConfig+0x4e8>)
 8001cec:	f023 0304 	bic.w	r3, r3, #4
 8001cf0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d015      	beq.n	8001d26 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cfa:	f7ff fadb 	bl	80012b4 <HAL_GetTick>
 8001cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d00:	e00a      	b.n	8001d18 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d02:	f7ff fad7 	bl	80012b4 <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e0c5      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d18:	4b65      	ldr	r3, [pc, #404]	; (8001eb0 <HAL_RCC_OscConfig+0x4e8>)
 8001d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d1c:	f003 0302 	and.w	r3, r3, #2
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d0ee      	beq.n	8001d02 <HAL_RCC_OscConfig+0x33a>
 8001d24:	e014      	b.n	8001d50 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d26:	f7ff fac5 	bl	80012b4 <HAL_GetTick>
 8001d2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d2c:	e00a      	b.n	8001d44 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d2e:	f7ff fac1 	bl	80012b4 <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d901      	bls.n	8001d44 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e0af      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d44:	4b5a      	ldr	r3, [pc, #360]	; (8001eb0 <HAL_RCC_OscConfig+0x4e8>)
 8001d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d48:	f003 0302 	and.w	r3, r3, #2
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d1ee      	bne.n	8001d2e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d50:	7dfb      	ldrb	r3, [r7, #23]
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d105      	bne.n	8001d62 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d56:	4b56      	ldr	r3, [pc, #344]	; (8001eb0 <HAL_RCC_OscConfig+0x4e8>)
 8001d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5a:	4a55      	ldr	r2, [pc, #340]	; (8001eb0 <HAL_RCC_OscConfig+0x4e8>)
 8001d5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d60:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	699b      	ldr	r3, [r3, #24]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	f000 809b 	beq.w	8001ea2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d6c:	4b50      	ldr	r3, [pc, #320]	; (8001eb0 <HAL_RCC_OscConfig+0x4e8>)
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f003 030c 	and.w	r3, r3, #12
 8001d74:	2b08      	cmp	r3, #8
 8001d76:	d05c      	beq.n	8001e32 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	699b      	ldr	r3, [r3, #24]
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d141      	bne.n	8001e04 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d80:	4b4c      	ldr	r3, [pc, #304]	; (8001eb4 <HAL_RCC_OscConfig+0x4ec>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d86:	f7ff fa95 	bl	80012b4 <HAL_GetTick>
 8001d8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d8c:	e008      	b.n	8001da0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d8e:	f7ff fa91 	bl	80012b4 <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d901      	bls.n	8001da0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e081      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001da0:	4b43      	ldr	r3, [pc, #268]	; (8001eb0 <HAL_RCC_OscConfig+0x4e8>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d1f0      	bne.n	8001d8e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	69da      	ldr	r2, [r3, #28]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a1b      	ldr	r3, [r3, #32]
 8001db4:	431a      	orrs	r2, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dba:	019b      	lsls	r3, r3, #6
 8001dbc:	431a      	orrs	r2, r3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc2:	085b      	lsrs	r3, r3, #1
 8001dc4:	3b01      	subs	r3, #1
 8001dc6:	041b      	lsls	r3, r3, #16
 8001dc8:	431a      	orrs	r2, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dce:	061b      	lsls	r3, r3, #24
 8001dd0:	4937      	ldr	r1, [pc, #220]	; (8001eb0 <HAL_RCC_OscConfig+0x4e8>)
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dd6:	4b37      	ldr	r3, [pc, #220]	; (8001eb4 <HAL_RCC_OscConfig+0x4ec>)
 8001dd8:	2201      	movs	r2, #1
 8001dda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ddc:	f7ff fa6a 	bl	80012b4 <HAL_GetTick>
 8001de0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001de2:	e008      	b.n	8001df6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001de4:	f7ff fa66 	bl	80012b4 <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e056      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001df6:	4b2e      	ldr	r3, [pc, #184]	; (8001eb0 <HAL_RCC_OscConfig+0x4e8>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d0f0      	beq.n	8001de4 <HAL_RCC_OscConfig+0x41c>
 8001e02:	e04e      	b.n	8001ea2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e04:	4b2b      	ldr	r3, [pc, #172]	; (8001eb4 <HAL_RCC_OscConfig+0x4ec>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e0a:	f7ff fa53 	bl	80012b4 <HAL_GetTick>
 8001e0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e10:	e008      	b.n	8001e24 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e12:	f7ff fa4f 	bl	80012b4 <HAL_GetTick>
 8001e16:	4602      	mov	r2, r0
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d901      	bls.n	8001e24 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e03f      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e24:	4b22      	ldr	r3, [pc, #136]	; (8001eb0 <HAL_RCC_OscConfig+0x4e8>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d1f0      	bne.n	8001e12 <HAL_RCC_OscConfig+0x44a>
 8001e30:	e037      	b.n	8001ea2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	699b      	ldr	r3, [r3, #24]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d101      	bne.n	8001e3e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e032      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e3e:	4b1c      	ldr	r3, [pc, #112]	; (8001eb0 <HAL_RCC_OscConfig+0x4e8>)
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	699b      	ldr	r3, [r3, #24]
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d028      	beq.n	8001e9e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d121      	bne.n	8001e9e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d11a      	bne.n	8001e9e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e68:	68fa      	ldr	r2, [r7, #12]
 8001e6a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e6e:	4013      	ands	r3, r2
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e74:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d111      	bne.n	8001e9e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e84:	085b      	lsrs	r3, r3, #1
 8001e86:	3b01      	subs	r3, #1
 8001e88:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d107      	bne.n	8001e9e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e98:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d001      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e000      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3718      	adds	r7, #24
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	40007000 	.word	0x40007000
 8001eb0:	40023800 	.word	0x40023800
 8001eb4:	42470060 	.word	0x42470060

08001eb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d101      	bne.n	8001ecc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e0cc      	b.n	8002066 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ecc:	4b68      	ldr	r3, [pc, #416]	; (8002070 <HAL_RCC_ClockConfig+0x1b8>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0307 	and.w	r3, r3, #7
 8001ed4:	683a      	ldr	r2, [r7, #0]
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d90c      	bls.n	8001ef4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eda:	4b65      	ldr	r3, [pc, #404]	; (8002070 <HAL_RCC_ClockConfig+0x1b8>)
 8001edc:	683a      	ldr	r2, [r7, #0]
 8001ede:	b2d2      	uxtb	r2, r2
 8001ee0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ee2:	4b63      	ldr	r3, [pc, #396]	; (8002070 <HAL_RCC_ClockConfig+0x1b8>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0307 	and.w	r3, r3, #7
 8001eea:	683a      	ldr	r2, [r7, #0]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d001      	beq.n	8001ef4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e0b8      	b.n	8002066 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0302 	and.w	r3, r3, #2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d020      	beq.n	8001f42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0304 	and.w	r3, r3, #4
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d005      	beq.n	8001f18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f0c:	4b59      	ldr	r3, [pc, #356]	; (8002074 <HAL_RCC_ClockConfig+0x1bc>)
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	4a58      	ldr	r2, [pc, #352]	; (8002074 <HAL_RCC_ClockConfig+0x1bc>)
 8001f12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f16:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0308 	and.w	r3, r3, #8
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d005      	beq.n	8001f30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f24:	4b53      	ldr	r3, [pc, #332]	; (8002074 <HAL_RCC_ClockConfig+0x1bc>)
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	4a52      	ldr	r2, [pc, #328]	; (8002074 <HAL_RCC_ClockConfig+0x1bc>)
 8001f2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f30:	4b50      	ldr	r3, [pc, #320]	; (8002074 <HAL_RCC_ClockConfig+0x1bc>)
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	494d      	ldr	r1, [pc, #308]	; (8002074 <HAL_RCC_ClockConfig+0x1bc>)
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d044      	beq.n	8001fd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d107      	bne.n	8001f66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f56:	4b47      	ldr	r3, [pc, #284]	; (8002074 <HAL_RCC_ClockConfig+0x1bc>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d119      	bne.n	8001f96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e07f      	b.n	8002066 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d003      	beq.n	8001f76 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f72:	2b03      	cmp	r3, #3
 8001f74:	d107      	bne.n	8001f86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f76:	4b3f      	ldr	r3, [pc, #252]	; (8002074 <HAL_RCC_ClockConfig+0x1bc>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d109      	bne.n	8001f96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e06f      	b.n	8002066 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f86:	4b3b      	ldr	r3, [pc, #236]	; (8002074 <HAL_RCC_ClockConfig+0x1bc>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d101      	bne.n	8001f96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e067      	b.n	8002066 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f96:	4b37      	ldr	r3, [pc, #220]	; (8002074 <HAL_RCC_ClockConfig+0x1bc>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f023 0203 	bic.w	r2, r3, #3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	4934      	ldr	r1, [pc, #208]	; (8002074 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fa8:	f7ff f984 	bl	80012b4 <HAL_GetTick>
 8001fac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fae:	e00a      	b.n	8001fc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fb0:	f7ff f980 	bl	80012b4 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e04f      	b.n	8002066 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fc6:	4b2b      	ldr	r3, [pc, #172]	; (8002074 <HAL_RCC_ClockConfig+0x1bc>)
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	f003 020c 	and.w	r2, r3, #12
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d1eb      	bne.n	8001fb0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fd8:	4b25      	ldr	r3, [pc, #148]	; (8002070 <HAL_RCC_ClockConfig+0x1b8>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0307 	and.w	r3, r3, #7
 8001fe0:	683a      	ldr	r2, [r7, #0]
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d20c      	bcs.n	8002000 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fe6:	4b22      	ldr	r3, [pc, #136]	; (8002070 <HAL_RCC_ClockConfig+0x1b8>)
 8001fe8:	683a      	ldr	r2, [r7, #0]
 8001fea:	b2d2      	uxtb	r2, r2
 8001fec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fee:	4b20      	ldr	r3, [pc, #128]	; (8002070 <HAL_RCC_ClockConfig+0x1b8>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0307 	and.w	r3, r3, #7
 8001ff6:	683a      	ldr	r2, [r7, #0]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d001      	beq.n	8002000 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e032      	b.n	8002066 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0304 	and.w	r3, r3, #4
 8002008:	2b00      	cmp	r3, #0
 800200a:	d008      	beq.n	800201e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800200c:	4b19      	ldr	r3, [pc, #100]	; (8002074 <HAL_RCC_ClockConfig+0x1bc>)
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	4916      	ldr	r1, [pc, #88]	; (8002074 <HAL_RCC_ClockConfig+0x1bc>)
 800201a:	4313      	orrs	r3, r2
 800201c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0308 	and.w	r3, r3, #8
 8002026:	2b00      	cmp	r3, #0
 8002028:	d009      	beq.n	800203e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800202a:	4b12      	ldr	r3, [pc, #72]	; (8002074 <HAL_RCC_ClockConfig+0x1bc>)
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	00db      	lsls	r3, r3, #3
 8002038:	490e      	ldr	r1, [pc, #56]	; (8002074 <HAL_RCC_ClockConfig+0x1bc>)
 800203a:	4313      	orrs	r3, r2
 800203c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800203e:	f000 f821 	bl	8002084 <HAL_RCC_GetSysClockFreq>
 8002042:	4602      	mov	r2, r0
 8002044:	4b0b      	ldr	r3, [pc, #44]	; (8002074 <HAL_RCC_ClockConfig+0x1bc>)
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	091b      	lsrs	r3, r3, #4
 800204a:	f003 030f 	and.w	r3, r3, #15
 800204e:	490a      	ldr	r1, [pc, #40]	; (8002078 <HAL_RCC_ClockConfig+0x1c0>)
 8002050:	5ccb      	ldrb	r3, [r1, r3]
 8002052:	fa22 f303 	lsr.w	r3, r2, r3
 8002056:	4a09      	ldr	r2, [pc, #36]	; (800207c <HAL_RCC_ClockConfig+0x1c4>)
 8002058:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800205a:	4b09      	ldr	r3, [pc, #36]	; (8002080 <HAL_RCC_ClockConfig+0x1c8>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4618      	mov	r0, r3
 8002060:	f7ff f8e4 	bl	800122c <HAL_InitTick>

  return HAL_OK;
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	3710      	adds	r7, #16
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	40023c00 	.word	0x40023c00
 8002074:	40023800 	.word	0x40023800
 8002078:	08004678 	.word	0x08004678
 800207c:	20000000 	.word	0x20000000
 8002080:	2000000c 	.word	0x2000000c

08002084 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002084:	b5b0      	push	{r4, r5, r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800208a:	2100      	movs	r1, #0
 800208c:	6079      	str	r1, [r7, #4]
 800208e:	2100      	movs	r1, #0
 8002090:	60f9      	str	r1, [r7, #12]
 8002092:	2100      	movs	r1, #0
 8002094:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002096:	2100      	movs	r1, #0
 8002098:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800209a:	4952      	ldr	r1, [pc, #328]	; (80021e4 <HAL_RCC_GetSysClockFreq+0x160>)
 800209c:	6889      	ldr	r1, [r1, #8]
 800209e:	f001 010c 	and.w	r1, r1, #12
 80020a2:	2908      	cmp	r1, #8
 80020a4:	d00d      	beq.n	80020c2 <HAL_RCC_GetSysClockFreq+0x3e>
 80020a6:	2908      	cmp	r1, #8
 80020a8:	f200 8094 	bhi.w	80021d4 <HAL_RCC_GetSysClockFreq+0x150>
 80020ac:	2900      	cmp	r1, #0
 80020ae:	d002      	beq.n	80020b6 <HAL_RCC_GetSysClockFreq+0x32>
 80020b0:	2904      	cmp	r1, #4
 80020b2:	d003      	beq.n	80020bc <HAL_RCC_GetSysClockFreq+0x38>
 80020b4:	e08e      	b.n	80021d4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020b6:	4b4c      	ldr	r3, [pc, #304]	; (80021e8 <HAL_RCC_GetSysClockFreq+0x164>)
 80020b8:	60bb      	str	r3, [r7, #8]
       break;
 80020ba:	e08e      	b.n	80021da <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80020bc:	4b4b      	ldr	r3, [pc, #300]	; (80021ec <HAL_RCC_GetSysClockFreq+0x168>)
 80020be:	60bb      	str	r3, [r7, #8]
      break;
 80020c0:	e08b      	b.n	80021da <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020c2:	4948      	ldr	r1, [pc, #288]	; (80021e4 <HAL_RCC_GetSysClockFreq+0x160>)
 80020c4:	6849      	ldr	r1, [r1, #4]
 80020c6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80020ca:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020cc:	4945      	ldr	r1, [pc, #276]	; (80021e4 <HAL_RCC_GetSysClockFreq+0x160>)
 80020ce:	6849      	ldr	r1, [r1, #4]
 80020d0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80020d4:	2900      	cmp	r1, #0
 80020d6:	d024      	beq.n	8002122 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020d8:	4942      	ldr	r1, [pc, #264]	; (80021e4 <HAL_RCC_GetSysClockFreq+0x160>)
 80020da:	6849      	ldr	r1, [r1, #4]
 80020dc:	0989      	lsrs	r1, r1, #6
 80020de:	4608      	mov	r0, r1
 80020e0:	f04f 0100 	mov.w	r1, #0
 80020e4:	f240 14ff 	movw	r4, #511	; 0x1ff
 80020e8:	f04f 0500 	mov.w	r5, #0
 80020ec:	ea00 0204 	and.w	r2, r0, r4
 80020f0:	ea01 0305 	and.w	r3, r1, r5
 80020f4:	493d      	ldr	r1, [pc, #244]	; (80021ec <HAL_RCC_GetSysClockFreq+0x168>)
 80020f6:	fb01 f003 	mul.w	r0, r1, r3
 80020fa:	2100      	movs	r1, #0
 80020fc:	fb01 f102 	mul.w	r1, r1, r2
 8002100:	1844      	adds	r4, r0, r1
 8002102:	493a      	ldr	r1, [pc, #232]	; (80021ec <HAL_RCC_GetSysClockFreq+0x168>)
 8002104:	fba2 0101 	umull	r0, r1, r2, r1
 8002108:	1863      	adds	r3, r4, r1
 800210a:	4619      	mov	r1, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	461a      	mov	r2, r3
 8002110:	f04f 0300 	mov.w	r3, #0
 8002114:	f7fe f8b4 	bl	8000280 <__aeabi_uldivmod>
 8002118:	4602      	mov	r2, r0
 800211a:	460b      	mov	r3, r1
 800211c:	4613      	mov	r3, r2
 800211e:	60fb      	str	r3, [r7, #12]
 8002120:	e04a      	b.n	80021b8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002122:	4b30      	ldr	r3, [pc, #192]	; (80021e4 <HAL_RCC_GetSysClockFreq+0x160>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	099b      	lsrs	r3, r3, #6
 8002128:	461a      	mov	r2, r3
 800212a:	f04f 0300 	mov.w	r3, #0
 800212e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002132:	f04f 0100 	mov.w	r1, #0
 8002136:	ea02 0400 	and.w	r4, r2, r0
 800213a:	ea03 0501 	and.w	r5, r3, r1
 800213e:	4620      	mov	r0, r4
 8002140:	4629      	mov	r1, r5
 8002142:	f04f 0200 	mov.w	r2, #0
 8002146:	f04f 0300 	mov.w	r3, #0
 800214a:	014b      	lsls	r3, r1, #5
 800214c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002150:	0142      	lsls	r2, r0, #5
 8002152:	4610      	mov	r0, r2
 8002154:	4619      	mov	r1, r3
 8002156:	1b00      	subs	r0, r0, r4
 8002158:	eb61 0105 	sbc.w	r1, r1, r5
 800215c:	f04f 0200 	mov.w	r2, #0
 8002160:	f04f 0300 	mov.w	r3, #0
 8002164:	018b      	lsls	r3, r1, #6
 8002166:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800216a:	0182      	lsls	r2, r0, #6
 800216c:	1a12      	subs	r2, r2, r0
 800216e:	eb63 0301 	sbc.w	r3, r3, r1
 8002172:	f04f 0000 	mov.w	r0, #0
 8002176:	f04f 0100 	mov.w	r1, #0
 800217a:	00d9      	lsls	r1, r3, #3
 800217c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002180:	00d0      	lsls	r0, r2, #3
 8002182:	4602      	mov	r2, r0
 8002184:	460b      	mov	r3, r1
 8002186:	1912      	adds	r2, r2, r4
 8002188:	eb45 0303 	adc.w	r3, r5, r3
 800218c:	f04f 0000 	mov.w	r0, #0
 8002190:	f04f 0100 	mov.w	r1, #0
 8002194:	0299      	lsls	r1, r3, #10
 8002196:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800219a:	0290      	lsls	r0, r2, #10
 800219c:	4602      	mov	r2, r0
 800219e:	460b      	mov	r3, r1
 80021a0:	4610      	mov	r0, r2
 80021a2:	4619      	mov	r1, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	461a      	mov	r2, r3
 80021a8:	f04f 0300 	mov.w	r3, #0
 80021ac:	f7fe f868 	bl	8000280 <__aeabi_uldivmod>
 80021b0:	4602      	mov	r2, r0
 80021b2:	460b      	mov	r3, r1
 80021b4:	4613      	mov	r3, r2
 80021b6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80021b8:	4b0a      	ldr	r3, [pc, #40]	; (80021e4 <HAL_RCC_GetSysClockFreq+0x160>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	0c1b      	lsrs	r3, r3, #16
 80021be:	f003 0303 	and.w	r3, r3, #3
 80021c2:	3301      	adds	r3, #1
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80021c8:	68fa      	ldr	r2, [r7, #12]
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80021d0:	60bb      	str	r3, [r7, #8]
      break;
 80021d2:	e002      	b.n	80021da <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021d4:	4b04      	ldr	r3, [pc, #16]	; (80021e8 <HAL_RCC_GetSysClockFreq+0x164>)
 80021d6:	60bb      	str	r3, [r7, #8]
      break;
 80021d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021da:	68bb      	ldr	r3, [r7, #8]
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3710      	adds	r7, #16
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bdb0      	pop	{r4, r5, r7, pc}
 80021e4:	40023800 	.word	0x40023800
 80021e8:	00f42400 	.word	0x00f42400
 80021ec:	017d7840 	.word	0x017d7840

080021f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021f4:	4b03      	ldr	r3, [pc, #12]	; (8002204 <HAL_RCC_GetHCLKFreq+0x14>)
 80021f6:	681b      	ldr	r3, [r3, #0]
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	20000000 	.word	0x20000000

08002208 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800220c:	f7ff fff0 	bl	80021f0 <HAL_RCC_GetHCLKFreq>
 8002210:	4602      	mov	r2, r0
 8002212:	4b05      	ldr	r3, [pc, #20]	; (8002228 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	0a9b      	lsrs	r3, r3, #10
 8002218:	f003 0307 	and.w	r3, r3, #7
 800221c:	4903      	ldr	r1, [pc, #12]	; (800222c <HAL_RCC_GetPCLK1Freq+0x24>)
 800221e:	5ccb      	ldrb	r3, [r1, r3]
 8002220:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002224:	4618      	mov	r0, r3
 8002226:	bd80      	pop	{r7, pc}
 8002228:	40023800 	.word	0x40023800
 800222c:	08004688 	.word	0x08004688

08002230 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002234:	f7ff ffdc 	bl	80021f0 <HAL_RCC_GetHCLKFreq>
 8002238:	4602      	mov	r2, r0
 800223a:	4b05      	ldr	r3, [pc, #20]	; (8002250 <HAL_RCC_GetPCLK2Freq+0x20>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	0b5b      	lsrs	r3, r3, #13
 8002240:	f003 0307 	and.w	r3, r3, #7
 8002244:	4903      	ldr	r1, [pc, #12]	; (8002254 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002246:	5ccb      	ldrb	r3, [r1, r3]
 8002248:	fa22 f303 	lsr.w	r3, r2, r3
}
 800224c:	4618      	mov	r0, r3
 800224e:	bd80      	pop	{r7, pc}
 8002250:	40023800 	.word	0x40023800
 8002254:	08004688 	.word	0x08004688

08002258 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d101      	bne.n	800226a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e03f      	b.n	80022ea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002270:	b2db      	uxtb	r3, r3
 8002272:	2b00      	cmp	r3, #0
 8002274:	d106      	bne.n	8002284 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f7fe fb10 	bl	80008a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2224      	movs	r2, #36	; 0x24
 8002288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	68da      	ldr	r2, [r3, #12]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800229a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f000 fd7b 	bl	8002d98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	691a      	ldr	r2, [r3, #16]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	695a      	ldr	r2, [r3, #20]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	68da      	ldr	r2, [r3, #12]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2220      	movs	r2, #32
 80022dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2220      	movs	r2, #32
 80022e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022f2:	b580      	push	{r7, lr}
 80022f4:	b08a      	sub	sp, #40	; 0x28
 80022f6:	af02      	add	r7, sp, #8
 80022f8:	60f8      	str	r0, [r7, #12]
 80022fa:	60b9      	str	r1, [r7, #8]
 80022fc:	603b      	str	r3, [r7, #0]
 80022fe:	4613      	mov	r3, r2
 8002300:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002302:	2300      	movs	r3, #0
 8002304:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800230c:	b2db      	uxtb	r3, r3
 800230e:	2b20      	cmp	r3, #32
 8002310:	d17c      	bne.n	800240c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d002      	beq.n	800231e <HAL_UART_Transmit+0x2c>
 8002318:	88fb      	ldrh	r3, [r7, #6]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d101      	bne.n	8002322 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e075      	b.n	800240e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002328:	2b01      	cmp	r3, #1
 800232a:	d101      	bne.n	8002330 <HAL_UART_Transmit+0x3e>
 800232c:	2302      	movs	r3, #2
 800232e:	e06e      	b.n	800240e <HAL_UART_Transmit+0x11c>
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2200      	movs	r2, #0
 800233c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2221      	movs	r2, #33	; 0x21
 8002342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002346:	f7fe ffb5 	bl	80012b4 <HAL_GetTick>
 800234a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	88fa      	ldrh	r2, [r7, #6]
 8002350:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	88fa      	ldrh	r2, [r7, #6]
 8002356:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002360:	d108      	bne.n	8002374 <HAL_UART_Transmit+0x82>
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d104      	bne.n	8002374 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800236a:	2300      	movs	r3, #0
 800236c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	61bb      	str	r3, [r7, #24]
 8002372:	e003      	b.n	800237c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002378:	2300      	movs	r3, #0
 800237a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2200      	movs	r2, #0
 8002380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002384:	e02a      	b.n	80023dc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	9300      	str	r3, [sp, #0]
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	2200      	movs	r2, #0
 800238e:	2180      	movs	r1, #128	; 0x80
 8002390:	68f8      	ldr	r0, [r7, #12]
 8002392:	f000 faf9 	bl	8002988 <UART_WaitOnFlagUntilTimeout>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e036      	b.n	800240e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d10b      	bne.n	80023be <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	881b      	ldrh	r3, [r3, #0]
 80023aa:	461a      	mov	r2, r3
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	3302      	adds	r3, #2
 80023ba:	61bb      	str	r3, [r7, #24]
 80023bc:	e007      	b.n	80023ce <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	781a      	ldrb	r2, [r3, #0]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	3301      	adds	r3, #1
 80023cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	3b01      	subs	r3, #1
 80023d6:	b29a      	uxth	r2, r3
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1cf      	bne.n	8002386 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	9300      	str	r3, [sp, #0]
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	2200      	movs	r2, #0
 80023ee:	2140      	movs	r1, #64	; 0x40
 80023f0:	68f8      	ldr	r0, [r7, #12]
 80023f2:	f000 fac9 	bl	8002988 <UART_WaitOnFlagUntilTimeout>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e006      	b.n	800240e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2220      	movs	r2, #32
 8002404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002408:	2300      	movs	r3, #0
 800240a:	e000      	b.n	800240e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800240c:	2302      	movs	r3, #2
  }
}
 800240e:	4618      	mov	r0, r3
 8002410:	3720      	adds	r7, #32
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
	...

08002418 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b0ba      	sub	sp, #232	; 0xe8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	695b      	ldr	r3, [r3, #20]
 800243a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800243e:	2300      	movs	r3, #0
 8002440:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002444:	2300      	movs	r3, #0
 8002446:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800244a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800244e:	f003 030f 	and.w	r3, r3, #15
 8002452:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002456:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800245a:	2b00      	cmp	r3, #0
 800245c:	d10f      	bne.n	800247e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800245e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002462:	f003 0320 	and.w	r3, r3, #32
 8002466:	2b00      	cmp	r3, #0
 8002468:	d009      	beq.n	800247e <HAL_UART_IRQHandler+0x66>
 800246a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800246e:	f003 0320 	and.w	r3, r3, #32
 8002472:	2b00      	cmp	r3, #0
 8002474:	d003      	beq.n	800247e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f000 fbd3 	bl	8002c22 <UART_Receive_IT>
      return;
 800247c:	e256      	b.n	800292c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800247e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002482:	2b00      	cmp	r3, #0
 8002484:	f000 80de 	beq.w	8002644 <HAL_UART_IRQHandler+0x22c>
 8002488:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800248c:	f003 0301 	and.w	r3, r3, #1
 8002490:	2b00      	cmp	r3, #0
 8002492:	d106      	bne.n	80024a2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002494:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002498:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800249c:	2b00      	cmp	r3, #0
 800249e:	f000 80d1 	beq.w	8002644 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80024a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d00b      	beq.n	80024c6 <HAL_UART_IRQHandler+0xae>
 80024ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d005      	beq.n	80024c6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024be:	f043 0201 	orr.w	r2, r3, #1
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024ca:	f003 0304 	and.w	r3, r3, #4
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d00b      	beq.n	80024ea <HAL_UART_IRQHandler+0xd2>
 80024d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d005      	beq.n	80024ea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e2:	f043 0202 	orr.w	r2, r3, #2
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00b      	beq.n	800250e <HAL_UART_IRQHandler+0xf6>
 80024f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80024fa:	f003 0301 	and.w	r3, r3, #1
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d005      	beq.n	800250e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002506:	f043 0204 	orr.w	r2, r3, #4
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800250e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002512:	f003 0308 	and.w	r3, r3, #8
 8002516:	2b00      	cmp	r3, #0
 8002518:	d011      	beq.n	800253e <HAL_UART_IRQHandler+0x126>
 800251a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800251e:	f003 0320 	and.w	r3, r3, #32
 8002522:	2b00      	cmp	r3, #0
 8002524:	d105      	bne.n	8002532 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002526:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	2b00      	cmp	r3, #0
 8002530:	d005      	beq.n	800253e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002536:	f043 0208 	orr.w	r2, r3, #8
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002542:	2b00      	cmp	r3, #0
 8002544:	f000 81ed 	beq.w	8002922 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002548:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800254c:	f003 0320 	and.w	r3, r3, #32
 8002550:	2b00      	cmp	r3, #0
 8002552:	d008      	beq.n	8002566 <HAL_UART_IRQHandler+0x14e>
 8002554:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002558:	f003 0320 	and.w	r3, r3, #32
 800255c:	2b00      	cmp	r3, #0
 800255e:	d002      	beq.n	8002566 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f000 fb5e 	bl	8002c22 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	695b      	ldr	r3, [r3, #20]
 800256c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002570:	2b40      	cmp	r3, #64	; 0x40
 8002572:	bf0c      	ite	eq
 8002574:	2301      	moveq	r3, #1
 8002576:	2300      	movne	r3, #0
 8002578:	b2db      	uxtb	r3, r3
 800257a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002582:	f003 0308 	and.w	r3, r3, #8
 8002586:	2b00      	cmp	r3, #0
 8002588:	d103      	bne.n	8002592 <HAL_UART_IRQHandler+0x17a>
 800258a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800258e:	2b00      	cmp	r3, #0
 8002590:	d04f      	beq.n	8002632 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f000 fa66 	bl	8002a64 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	695b      	ldr	r3, [r3, #20]
 800259e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025a2:	2b40      	cmp	r3, #64	; 0x40
 80025a4:	d141      	bne.n	800262a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	3314      	adds	r3, #20
 80025ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80025b4:	e853 3f00 	ldrex	r3, [r3]
 80025b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80025bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80025c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80025c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	3314      	adds	r3, #20
 80025ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80025d2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80025d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80025de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80025e2:	e841 2300 	strex	r3, r2, [r1]
 80025e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80025ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d1d9      	bne.n	80025a6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d013      	beq.n	8002622 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025fe:	4a7d      	ldr	r2, [pc, #500]	; (80027f4 <HAL_UART_IRQHandler+0x3dc>)
 8002600:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002606:	4618      	mov	r0, r3
 8002608:	f7ff f805 	bl	8001616 <HAL_DMA_Abort_IT>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d016      	beq.n	8002640 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002616:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800261c:	4610      	mov	r0, r2
 800261e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002620:	e00e      	b.n	8002640 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f000 f99a 	bl	800295c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002628:	e00a      	b.n	8002640 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f000 f996 	bl	800295c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002630:	e006      	b.n	8002640 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 f992 	bl	800295c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800263e:	e170      	b.n	8002922 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002640:	bf00      	nop
    return;
 8002642:	e16e      	b.n	8002922 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002648:	2b01      	cmp	r3, #1
 800264a:	f040 814a 	bne.w	80028e2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800264e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002652:	f003 0310 	and.w	r3, r3, #16
 8002656:	2b00      	cmp	r3, #0
 8002658:	f000 8143 	beq.w	80028e2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800265c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002660:	f003 0310 	and.w	r3, r3, #16
 8002664:	2b00      	cmp	r3, #0
 8002666:	f000 813c 	beq.w	80028e2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800266a:	2300      	movs	r3, #0
 800266c:	60bb      	str	r3, [r7, #8]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	60bb      	str	r3, [r7, #8]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	60bb      	str	r3, [r7, #8]
 800267e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	695b      	ldr	r3, [r3, #20]
 8002686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800268a:	2b40      	cmp	r3, #64	; 0x40
 800268c:	f040 80b4 	bne.w	80027f8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800269c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	f000 8140 	beq.w	8002926 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80026aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80026ae:	429a      	cmp	r2, r3
 80026b0:	f080 8139 	bcs.w	8002926 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80026ba:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026c0:	69db      	ldr	r3, [r3, #28]
 80026c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026c6:	f000 8088 	beq.w	80027da <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	330c      	adds	r3, #12
 80026d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80026d8:	e853 3f00 	ldrex	r3, [r3]
 80026dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80026e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80026e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	330c      	adds	r3, #12
 80026f2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80026f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80026fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002702:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002706:	e841 2300 	strex	r3, r2, [r1]
 800270a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800270e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002712:	2b00      	cmp	r3, #0
 8002714:	d1d9      	bne.n	80026ca <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	3314      	adds	r3, #20
 800271c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800271e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002720:	e853 3f00 	ldrex	r3, [r3]
 8002724:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002726:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002728:	f023 0301 	bic.w	r3, r3, #1
 800272c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	3314      	adds	r3, #20
 8002736:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800273a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800273e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002740:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002742:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002746:	e841 2300 	strex	r3, r2, [r1]
 800274a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800274c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800274e:	2b00      	cmp	r3, #0
 8002750:	d1e1      	bne.n	8002716 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	3314      	adds	r3, #20
 8002758:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800275a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800275c:	e853 3f00 	ldrex	r3, [r3]
 8002760:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002762:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002764:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002768:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	3314      	adds	r3, #20
 8002772:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002776:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002778:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800277a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800277c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800277e:	e841 2300 	strex	r3, r2, [r1]
 8002782:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002784:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002786:	2b00      	cmp	r3, #0
 8002788:	d1e3      	bne.n	8002752 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2220      	movs	r2, #32
 800278e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	330c      	adds	r3, #12
 800279e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027a2:	e853 3f00 	ldrex	r3, [r3]
 80027a6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80027a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027aa:	f023 0310 	bic.w	r3, r3, #16
 80027ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	330c      	adds	r3, #12
 80027b8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80027bc:	65ba      	str	r2, [r7, #88]	; 0x58
 80027be:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80027c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80027c4:	e841 2300 	strex	r3, r2, [r1]
 80027c8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80027ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d1e3      	bne.n	8002798 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7fe feae 	bl	8001536 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	4619      	mov	r1, r3
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f000 f8c0 	bl	8002970 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80027f0:	e099      	b.n	8002926 <HAL_UART_IRQHandler+0x50e>
 80027f2:	bf00      	nop
 80027f4:	08002b2b 	.word	0x08002b2b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002800:	b29b      	uxth	r3, r3
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800280c:	b29b      	uxth	r3, r3
 800280e:	2b00      	cmp	r3, #0
 8002810:	f000 808b 	beq.w	800292a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002814:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002818:	2b00      	cmp	r3, #0
 800281a:	f000 8086 	beq.w	800292a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	330c      	adds	r3, #12
 8002824:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002828:	e853 3f00 	ldrex	r3, [r3]
 800282c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800282e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002830:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002834:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	330c      	adds	r3, #12
 800283e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002842:	647a      	str	r2, [r7, #68]	; 0x44
 8002844:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002846:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002848:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800284a:	e841 2300 	strex	r3, r2, [r1]
 800284e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002850:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002852:	2b00      	cmp	r3, #0
 8002854:	d1e3      	bne.n	800281e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	3314      	adds	r3, #20
 800285c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800285e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002860:	e853 3f00 	ldrex	r3, [r3]
 8002864:	623b      	str	r3, [r7, #32]
   return(result);
 8002866:	6a3b      	ldr	r3, [r7, #32]
 8002868:	f023 0301 	bic.w	r3, r3, #1
 800286c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	3314      	adds	r3, #20
 8002876:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800287a:	633a      	str	r2, [r7, #48]	; 0x30
 800287c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800287e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002880:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002882:	e841 2300 	strex	r3, r2, [r1]
 8002886:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800288a:	2b00      	cmp	r3, #0
 800288c:	d1e3      	bne.n	8002856 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2220      	movs	r2, #32
 8002892:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	330c      	adds	r3, #12
 80028a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	e853 3f00 	ldrex	r3, [r3]
 80028aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f023 0310 	bic.w	r3, r3, #16
 80028b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	330c      	adds	r3, #12
 80028bc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80028c0:	61fa      	str	r2, [r7, #28]
 80028c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028c4:	69b9      	ldr	r1, [r7, #24]
 80028c6:	69fa      	ldr	r2, [r7, #28]
 80028c8:	e841 2300 	strex	r3, r2, [r1]
 80028cc:	617b      	str	r3, [r7, #20]
   return(result);
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d1e3      	bne.n	800289c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80028d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80028d8:	4619      	mov	r1, r3
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 f848 	bl	8002970 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80028e0:	e023      	b.n	800292a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80028e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d009      	beq.n	8002902 <HAL_UART_IRQHandler+0x4ea>
 80028ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d003      	beq.n	8002902 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f000 f929 	bl	8002b52 <UART_Transmit_IT>
    return;
 8002900:	e014      	b.n	800292c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800290a:	2b00      	cmp	r3, #0
 800290c:	d00e      	beq.n	800292c <HAL_UART_IRQHandler+0x514>
 800290e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002916:	2b00      	cmp	r3, #0
 8002918:	d008      	beq.n	800292c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 f969 	bl	8002bf2 <UART_EndTransmit_IT>
    return;
 8002920:	e004      	b.n	800292c <HAL_UART_IRQHandler+0x514>
    return;
 8002922:	bf00      	nop
 8002924:	e002      	b.n	800292c <HAL_UART_IRQHandler+0x514>
      return;
 8002926:	bf00      	nop
 8002928:	e000      	b.n	800292c <HAL_UART_IRQHandler+0x514>
      return;
 800292a:	bf00      	nop
  }
}
 800292c:	37e8      	adds	r7, #232	; 0xe8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop

08002934 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800293c:	bf00      	nop
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002950:	bf00      	nop
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002964:	bf00      	nop
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	460b      	mov	r3, r1
 800297a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800297c:	bf00      	nop
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b090      	sub	sp, #64	; 0x40
 800298c:	af00      	add	r7, sp, #0
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	60b9      	str	r1, [r7, #8]
 8002992:	603b      	str	r3, [r7, #0]
 8002994:	4613      	mov	r3, r2
 8002996:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002998:	e050      	b.n	8002a3c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800299a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800299c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029a0:	d04c      	beq.n	8002a3c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80029a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d007      	beq.n	80029b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80029a8:	f7fe fc84 	bl	80012b4 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d241      	bcs.n	8002a3c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	330c      	adds	r3, #12
 80029be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029c2:	e853 3f00 	ldrex	r3, [r3]
 80029c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80029c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80029ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	330c      	adds	r3, #12
 80029d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80029d8:	637a      	str	r2, [r7, #52]	; 0x34
 80029da:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80029de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029e0:	e841 2300 	strex	r3, r2, [r1]
 80029e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80029e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d1e5      	bne.n	80029b8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	3314      	adds	r3, #20
 80029f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	e853 3f00 	ldrex	r3, [r3]
 80029fa:	613b      	str	r3, [r7, #16]
   return(result);
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	f023 0301 	bic.w	r3, r3, #1
 8002a02:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	3314      	adds	r3, #20
 8002a0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a0c:	623a      	str	r2, [r7, #32]
 8002a0e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a10:	69f9      	ldr	r1, [r7, #28]
 8002a12:	6a3a      	ldr	r2, [r7, #32]
 8002a14:	e841 2300 	strex	r3, r2, [r1]
 8002a18:	61bb      	str	r3, [r7, #24]
   return(result);
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d1e5      	bne.n	80029ec <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2220      	movs	r2, #32
 8002a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2220      	movs	r2, #32
 8002a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e00f      	b.n	8002a5c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	4013      	ands	r3, r2
 8002a46:	68ba      	ldr	r2, [r7, #8]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	bf0c      	ite	eq
 8002a4c:	2301      	moveq	r3, #1
 8002a4e:	2300      	movne	r3, #0
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	461a      	mov	r2, r3
 8002a54:	79fb      	ldrb	r3, [r7, #7]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d09f      	beq.n	800299a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3740      	adds	r7, #64	; 0x40
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b095      	sub	sp, #84	; 0x54
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	330c      	adds	r3, #12
 8002a72:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a76:	e853 3f00 	ldrex	r3, [r3]
 8002a7a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a7e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002a82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	330c      	adds	r3, #12
 8002a8a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a8c:	643a      	str	r2, [r7, #64]	; 0x40
 8002a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a90:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002a92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002a94:	e841 2300 	strex	r3, r2, [r1]
 8002a98:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d1e5      	bne.n	8002a6c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	3314      	adds	r3, #20
 8002aa6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aa8:	6a3b      	ldr	r3, [r7, #32]
 8002aaa:	e853 3f00 	ldrex	r3, [r3]
 8002aae:	61fb      	str	r3, [r7, #28]
   return(result);
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	f023 0301 	bic.w	r3, r3, #1
 8002ab6:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	3314      	adds	r3, #20
 8002abe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ac0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ac2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ac4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ac6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ac8:	e841 2300 	strex	r3, r2, [r1]
 8002acc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d1e5      	bne.n	8002aa0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d119      	bne.n	8002b10 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	330c      	adds	r3, #12
 8002ae2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	e853 3f00 	ldrex	r3, [r3]
 8002aea:	60bb      	str	r3, [r7, #8]
   return(result);
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	f023 0310 	bic.w	r3, r3, #16
 8002af2:	647b      	str	r3, [r7, #68]	; 0x44
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	330c      	adds	r3, #12
 8002afa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002afc:	61ba      	str	r2, [r7, #24]
 8002afe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b00:	6979      	ldr	r1, [r7, #20]
 8002b02:	69ba      	ldr	r2, [r7, #24]
 8002b04:	e841 2300 	strex	r3, r2, [r1]
 8002b08:	613b      	str	r3, [r7, #16]
   return(result);
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d1e5      	bne.n	8002adc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2220      	movs	r2, #32
 8002b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002b1e:	bf00      	nop
 8002b20:	3754      	adds	r7, #84	; 0x54
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr

08002b2a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002b2a:	b580      	push	{r7, lr}
 8002b2c:	b084      	sub	sp, #16
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b36:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2200      	movs	r2, #0
 8002b42:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002b44:	68f8      	ldr	r0, [r7, #12]
 8002b46:	f7ff ff09 	bl	800295c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002b4a:	bf00      	nop
 8002b4c:	3710      	adds	r7, #16
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002b52:	b480      	push	{r7}
 8002b54:	b085      	sub	sp, #20
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b21      	cmp	r3, #33	; 0x21
 8002b64:	d13e      	bne.n	8002be4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b6e:	d114      	bne.n	8002b9a <UART_Transmit_IT+0x48>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	691b      	ldr	r3, [r3, #16]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d110      	bne.n	8002b9a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6a1b      	ldr	r3, [r3, #32]
 8002b7c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	881b      	ldrh	r3, [r3, #0]
 8002b82:	461a      	mov	r2, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b8c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a1b      	ldr	r3, [r3, #32]
 8002b92:	1c9a      	adds	r2, r3, #2
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	621a      	str	r2, [r3, #32]
 8002b98:	e008      	b.n	8002bac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a1b      	ldr	r3, [r3, #32]
 8002b9e:	1c59      	adds	r1, r3, #1
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	6211      	str	r1, [r2, #32]
 8002ba4:	781a      	ldrb	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	4619      	mov	r1, r3
 8002bba:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d10f      	bne.n	8002be0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	68da      	ldr	r2, [r3, #12]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	68da      	ldr	r2, [r3, #12]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bde:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002be0:	2300      	movs	r3, #0
 8002be2:	e000      	b.n	8002be6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002be4:	2302      	movs	r3, #2
  }
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3714      	adds	r7, #20
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr

08002bf2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	b082      	sub	sp, #8
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	68da      	ldr	r2, [r3, #12]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c08:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2220      	movs	r2, #32
 8002c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f7ff fe8e 	bl	8002934 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3708      	adds	r7, #8
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002c22:	b580      	push	{r7, lr}
 8002c24:	b08c      	sub	sp, #48	; 0x30
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2b22      	cmp	r3, #34	; 0x22
 8002c34:	f040 80ab 	bne.w	8002d8e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c40:	d117      	bne.n	8002c72 <UART_Receive_IT+0x50>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d113      	bne.n	8002c72 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c52:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c60:	b29a      	uxth	r2, r3
 8002c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c64:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c6a:	1c9a      	adds	r2, r3, #2
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	629a      	str	r2, [r3, #40]	; 0x28
 8002c70:	e026      	b.n	8002cc0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c76:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c84:	d007      	beq.n	8002c96 <UART_Receive_IT+0x74>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d10a      	bne.n	8002ca4 <UART_Receive_IT+0x82>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d106      	bne.n	8002ca4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	b2da      	uxtb	r2, r3
 8002c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ca0:	701a      	strb	r2, [r3, #0]
 8002ca2:	e008      	b.n	8002cb6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002cb0:	b2da      	uxtb	r2, r3
 8002cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cb4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cba:	1c5a      	adds	r2, r3, #1
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	4619      	mov	r1, r3
 8002cce:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d15a      	bne.n	8002d8a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	68da      	ldr	r2, [r3, #12]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f022 0220 	bic.w	r2, r2, #32
 8002ce2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	68da      	ldr	r2, [r3, #12]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cf2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	695a      	ldr	r2, [r3, #20]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f022 0201 	bic.w	r2, r2, #1
 8002d02:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2220      	movs	r2, #32
 8002d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d135      	bne.n	8002d80 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	330c      	adds	r3, #12
 8002d20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	e853 3f00 	ldrex	r3, [r3]
 8002d28:	613b      	str	r3, [r7, #16]
   return(result);
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	f023 0310 	bic.w	r3, r3, #16
 8002d30:	627b      	str	r3, [r7, #36]	; 0x24
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	330c      	adds	r3, #12
 8002d38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d3a:	623a      	str	r2, [r7, #32]
 8002d3c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d3e:	69f9      	ldr	r1, [r7, #28]
 8002d40:	6a3a      	ldr	r2, [r7, #32]
 8002d42:	e841 2300 	strex	r3, r2, [r1]
 8002d46:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d1e5      	bne.n	8002d1a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0310 	and.w	r3, r3, #16
 8002d58:	2b10      	cmp	r3, #16
 8002d5a:	d10a      	bne.n	8002d72 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	60fb      	str	r3, [r7, #12]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	60fb      	str	r3, [r7, #12]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	60fb      	str	r3, [r7, #12]
 8002d70:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002d76:	4619      	mov	r1, r3
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f7ff fdf9 	bl	8002970 <HAL_UARTEx_RxEventCallback>
 8002d7e:	e002      	b.n	8002d86 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f7ff fde1 	bl	8002948 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002d86:	2300      	movs	r3, #0
 8002d88:	e002      	b.n	8002d90 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	e000      	b.n	8002d90 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002d8e:	2302      	movs	r3, #2
  }
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3730      	adds	r7, #48	; 0x30
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d9c:	b09f      	sub	sp, #124	; 0x7c
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002da2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002dac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dae:	68d9      	ldr	r1, [r3, #12]
 8002db0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	ea40 0301 	orr.w	r3, r0, r1
 8002db8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002dba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dbc:	689a      	ldr	r2, [r3, #8]
 8002dbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	431a      	orrs	r2, r3
 8002dc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dc6:	695b      	ldr	r3, [r3, #20]
 8002dc8:	431a      	orrs	r2, r3
 8002dca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dcc:	69db      	ldr	r3, [r3, #28]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002dd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002ddc:	f021 010c 	bic.w	r1, r1, #12
 8002de0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002de6:	430b      	orrs	r3, r1
 8002de8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002dea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	695b      	ldr	r3, [r3, #20]
 8002df0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002df4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002df6:	6999      	ldr	r1, [r3, #24]
 8002df8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	ea40 0301 	orr.w	r3, r0, r1
 8002e00:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	4bc5      	ldr	r3, [pc, #788]	; (800311c <UART_SetConfig+0x384>)
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d004      	beq.n	8002e16 <UART_SetConfig+0x7e>
 8002e0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	4bc3      	ldr	r3, [pc, #780]	; (8003120 <UART_SetConfig+0x388>)
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d103      	bne.n	8002e1e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e16:	f7ff fa0b 	bl	8002230 <HAL_RCC_GetPCLK2Freq>
 8002e1a:	6778      	str	r0, [r7, #116]	; 0x74
 8002e1c:	e002      	b.n	8002e24 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e1e:	f7ff f9f3 	bl	8002208 <HAL_RCC_GetPCLK1Freq>
 8002e22:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e26:	69db      	ldr	r3, [r3, #28]
 8002e28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e2c:	f040 80b6 	bne.w	8002f9c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e32:	461c      	mov	r4, r3
 8002e34:	f04f 0500 	mov.w	r5, #0
 8002e38:	4622      	mov	r2, r4
 8002e3a:	462b      	mov	r3, r5
 8002e3c:	1891      	adds	r1, r2, r2
 8002e3e:	6439      	str	r1, [r7, #64]	; 0x40
 8002e40:	415b      	adcs	r3, r3
 8002e42:	647b      	str	r3, [r7, #68]	; 0x44
 8002e44:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002e48:	1912      	adds	r2, r2, r4
 8002e4a:	eb45 0303 	adc.w	r3, r5, r3
 8002e4e:	f04f 0000 	mov.w	r0, #0
 8002e52:	f04f 0100 	mov.w	r1, #0
 8002e56:	00d9      	lsls	r1, r3, #3
 8002e58:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002e5c:	00d0      	lsls	r0, r2, #3
 8002e5e:	4602      	mov	r2, r0
 8002e60:	460b      	mov	r3, r1
 8002e62:	1911      	adds	r1, r2, r4
 8002e64:	6639      	str	r1, [r7, #96]	; 0x60
 8002e66:	416b      	adcs	r3, r5
 8002e68:	667b      	str	r3, [r7, #100]	; 0x64
 8002e6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	461a      	mov	r2, r3
 8002e70:	f04f 0300 	mov.w	r3, #0
 8002e74:	1891      	adds	r1, r2, r2
 8002e76:	63b9      	str	r1, [r7, #56]	; 0x38
 8002e78:	415b      	adcs	r3, r3
 8002e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e7c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002e80:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002e84:	f7fd f9fc 	bl	8000280 <__aeabi_uldivmod>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	4ba5      	ldr	r3, [pc, #660]	; (8003124 <UART_SetConfig+0x38c>)
 8002e8e:	fba3 2302 	umull	r2, r3, r3, r2
 8002e92:	095b      	lsrs	r3, r3, #5
 8002e94:	011e      	lsls	r6, r3, #4
 8002e96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e98:	461c      	mov	r4, r3
 8002e9a:	f04f 0500 	mov.w	r5, #0
 8002e9e:	4622      	mov	r2, r4
 8002ea0:	462b      	mov	r3, r5
 8002ea2:	1891      	adds	r1, r2, r2
 8002ea4:	6339      	str	r1, [r7, #48]	; 0x30
 8002ea6:	415b      	adcs	r3, r3
 8002ea8:	637b      	str	r3, [r7, #52]	; 0x34
 8002eaa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002eae:	1912      	adds	r2, r2, r4
 8002eb0:	eb45 0303 	adc.w	r3, r5, r3
 8002eb4:	f04f 0000 	mov.w	r0, #0
 8002eb8:	f04f 0100 	mov.w	r1, #0
 8002ebc:	00d9      	lsls	r1, r3, #3
 8002ebe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ec2:	00d0      	lsls	r0, r2, #3
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	460b      	mov	r3, r1
 8002ec8:	1911      	adds	r1, r2, r4
 8002eca:	65b9      	str	r1, [r7, #88]	; 0x58
 8002ecc:	416b      	adcs	r3, r5
 8002ece:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ed0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	f04f 0300 	mov.w	r3, #0
 8002eda:	1891      	adds	r1, r2, r2
 8002edc:	62b9      	str	r1, [r7, #40]	; 0x28
 8002ede:	415b      	adcs	r3, r3
 8002ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ee2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ee6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002eea:	f7fd f9c9 	bl	8000280 <__aeabi_uldivmod>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	4b8c      	ldr	r3, [pc, #560]	; (8003124 <UART_SetConfig+0x38c>)
 8002ef4:	fba3 1302 	umull	r1, r3, r3, r2
 8002ef8:	095b      	lsrs	r3, r3, #5
 8002efa:	2164      	movs	r1, #100	; 0x64
 8002efc:	fb01 f303 	mul.w	r3, r1, r3
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	00db      	lsls	r3, r3, #3
 8002f04:	3332      	adds	r3, #50	; 0x32
 8002f06:	4a87      	ldr	r2, [pc, #540]	; (8003124 <UART_SetConfig+0x38c>)
 8002f08:	fba2 2303 	umull	r2, r3, r2, r3
 8002f0c:	095b      	lsrs	r3, r3, #5
 8002f0e:	005b      	lsls	r3, r3, #1
 8002f10:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002f14:	441e      	add	r6, r3
 8002f16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f04f 0100 	mov.w	r1, #0
 8002f1e:	4602      	mov	r2, r0
 8002f20:	460b      	mov	r3, r1
 8002f22:	1894      	adds	r4, r2, r2
 8002f24:	623c      	str	r4, [r7, #32]
 8002f26:	415b      	adcs	r3, r3
 8002f28:	627b      	str	r3, [r7, #36]	; 0x24
 8002f2a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002f2e:	1812      	adds	r2, r2, r0
 8002f30:	eb41 0303 	adc.w	r3, r1, r3
 8002f34:	f04f 0400 	mov.w	r4, #0
 8002f38:	f04f 0500 	mov.w	r5, #0
 8002f3c:	00dd      	lsls	r5, r3, #3
 8002f3e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002f42:	00d4      	lsls	r4, r2, #3
 8002f44:	4622      	mov	r2, r4
 8002f46:	462b      	mov	r3, r5
 8002f48:	1814      	adds	r4, r2, r0
 8002f4a:	653c      	str	r4, [r7, #80]	; 0x50
 8002f4c:	414b      	adcs	r3, r1
 8002f4e:	657b      	str	r3, [r7, #84]	; 0x54
 8002f50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	461a      	mov	r2, r3
 8002f56:	f04f 0300 	mov.w	r3, #0
 8002f5a:	1891      	adds	r1, r2, r2
 8002f5c:	61b9      	str	r1, [r7, #24]
 8002f5e:	415b      	adcs	r3, r3
 8002f60:	61fb      	str	r3, [r7, #28]
 8002f62:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f66:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002f6a:	f7fd f989 	bl	8000280 <__aeabi_uldivmod>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	460b      	mov	r3, r1
 8002f72:	4b6c      	ldr	r3, [pc, #432]	; (8003124 <UART_SetConfig+0x38c>)
 8002f74:	fba3 1302 	umull	r1, r3, r3, r2
 8002f78:	095b      	lsrs	r3, r3, #5
 8002f7a:	2164      	movs	r1, #100	; 0x64
 8002f7c:	fb01 f303 	mul.w	r3, r1, r3
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	3332      	adds	r3, #50	; 0x32
 8002f86:	4a67      	ldr	r2, [pc, #412]	; (8003124 <UART_SetConfig+0x38c>)
 8002f88:	fba2 2303 	umull	r2, r3, r2, r3
 8002f8c:	095b      	lsrs	r3, r3, #5
 8002f8e:	f003 0207 	and.w	r2, r3, #7
 8002f92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4432      	add	r2, r6
 8002f98:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002f9a:	e0b9      	b.n	8003110 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f9e:	461c      	mov	r4, r3
 8002fa0:	f04f 0500 	mov.w	r5, #0
 8002fa4:	4622      	mov	r2, r4
 8002fa6:	462b      	mov	r3, r5
 8002fa8:	1891      	adds	r1, r2, r2
 8002faa:	6139      	str	r1, [r7, #16]
 8002fac:	415b      	adcs	r3, r3
 8002fae:	617b      	str	r3, [r7, #20]
 8002fb0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002fb4:	1912      	adds	r2, r2, r4
 8002fb6:	eb45 0303 	adc.w	r3, r5, r3
 8002fba:	f04f 0000 	mov.w	r0, #0
 8002fbe:	f04f 0100 	mov.w	r1, #0
 8002fc2:	00d9      	lsls	r1, r3, #3
 8002fc4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002fc8:	00d0      	lsls	r0, r2, #3
 8002fca:	4602      	mov	r2, r0
 8002fcc:	460b      	mov	r3, r1
 8002fce:	eb12 0804 	adds.w	r8, r2, r4
 8002fd2:	eb43 0905 	adc.w	r9, r3, r5
 8002fd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f04f 0100 	mov.w	r1, #0
 8002fe0:	f04f 0200 	mov.w	r2, #0
 8002fe4:	f04f 0300 	mov.w	r3, #0
 8002fe8:	008b      	lsls	r3, r1, #2
 8002fea:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002fee:	0082      	lsls	r2, r0, #2
 8002ff0:	4640      	mov	r0, r8
 8002ff2:	4649      	mov	r1, r9
 8002ff4:	f7fd f944 	bl	8000280 <__aeabi_uldivmod>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	4b49      	ldr	r3, [pc, #292]	; (8003124 <UART_SetConfig+0x38c>)
 8002ffe:	fba3 2302 	umull	r2, r3, r3, r2
 8003002:	095b      	lsrs	r3, r3, #5
 8003004:	011e      	lsls	r6, r3, #4
 8003006:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003008:	4618      	mov	r0, r3
 800300a:	f04f 0100 	mov.w	r1, #0
 800300e:	4602      	mov	r2, r0
 8003010:	460b      	mov	r3, r1
 8003012:	1894      	adds	r4, r2, r2
 8003014:	60bc      	str	r4, [r7, #8]
 8003016:	415b      	adcs	r3, r3
 8003018:	60fb      	str	r3, [r7, #12]
 800301a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800301e:	1812      	adds	r2, r2, r0
 8003020:	eb41 0303 	adc.w	r3, r1, r3
 8003024:	f04f 0400 	mov.w	r4, #0
 8003028:	f04f 0500 	mov.w	r5, #0
 800302c:	00dd      	lsls	r5, r3, #3
 800302e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003032:	00d4      	lsls	r4, r2, #3
 8003034:	4622      	mov	r2, r4
 8003036:	462b      	mov	r3, r5
 8003038:	1814      	adds	r4, r2, r0
 800303a:	64bc      	str	r4, [r7, #72]	; 0x48
 800303c:	414b      	adcs	r3, r1
 800303e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003040:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	4618      	mov	r0, r3
 8003046:	f04f 0100 	mov.w	r1, #0
 800304a:	f04f 0200 	mov.w	r2, #0
 800304e:	f04f 0300 	mov.w	r3, #0
 8003052:	008b      	lsls	r3, r1, #2
 8003054:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003058:	0082      	lsls	r2, r0, #2
 800305a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800305e:	f7fd f90f 	bl	8000280 <__aeabi_uldivmod>
 8003062:	4602      	mov	r2, r0
 8003064:	460b      	mov	r3, r1
 8003066:	4b2f      	ldr	r3, [pc, #188]	; (8003124 <UART_SetConfig+0x38c>)
 8003068:	fba3 1302 	umull	r1, r3, r3, r2
 800306c:	095b      	lsrs	r3, r3, #5
 800306e:	2164      	movs	r1, #100	; 0x64
 8003070:	fb01 f303 	mul.w	r3, r1, r3
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	011b      	lsls	r3, r3, #4
 8003078:	3332      	adds	r3, #50	; 0x32
 800307a:	4a2a      	ldr	r2, [pc, #168]	; (8003124 <UART_SetConfig+0x38c>)
 800307c:	fba2 2303 	umull	r2, r3, r2, r3
 8003080:	095b      	lsrs	r3, r3, #5
 8003082:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003086:	441e      	add	r6, r3
 8003088:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800308a:	4618      	mov	r0, r3
 800308c:	f04f 0100 	mov.w	r1, #0
 8003090:	4602      	mov	r2, r0
 8003092:	460b      	mov	r3, r1
 8003094:	1894      	adds	r4, r2, r2
 8003096:	603c      	str	r4, [r7, #0]
 8003098:	415b      	adcs	r3, r3
 800309a:	607b      	str	r3, [r7, #4]
 800309c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80030a0:	1812      	adds	r2, r2, r0
 80030a2:	eb41 0303 	adc.w	r3, r1, r3
 80030a6:	f04f 0400 	mov.w	r4, #0
 80030aa:	f04f 0500 	mov.w	r5, #0
 80030ae:	00dd      	lsls	r5, r3, #3
 80030b0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80030b4:	00d4      	lsls	r4, r2, #3
 80030b6:	4622      	mov	r2, r4
 80030b8:	462b      	mov	r3, r5
 80030ba:	eb12 0a00 	adds.w	sl, r2, r0
 80030be:	eb43 0b01 	adc.w	fp, r3, r1
 80030c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	4618      	mov	r0, r3
 80030c8:	f04f 0100 	mov.w	r1, #0
 80030cc:	f04f 0200 	mov.w	r2, #0
 80030d0:	f04f 0300 	mov.w	r3, #0
 80030d4:	008b      	lsls	r3, r1, #2
 80030d6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80030da:	0082      	lsls	r2, r0, #2
 80030dc:	4650      	mov	r0, sl
 80030de:	4659      	mov	r1, fp
 80030e0:	f7fd f8ce 	bl	8000280 <__aeabi_uldivmod>
 80030e4:	4602      	mov	r2, r0
 80030e6:	460b      	mov	r3, r1
 80030e8:	4b0e      	ldr	r3, [pc, #56]	; (8003124 <UART_SetConfig+0x38c>)
 80030ea:	fba3 1302 	umull	r1, r3, r3, r2
 80030ee:	095b      	lsrs	r3, r3, #5
 80030f0:	2164      	movs	r1, #100	; 0x64
 80030f2:	fb01 f303 	mul.w	r3, r1, r3
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	011b      	lsls	r3, r3, #4
 80030fa:	3332      	adds	r3, #50	; 0x32
 80030fc:	4a09      	ldr	r2, [pc, #36]	; (8003124 <UART_SetConfig+0x38c>)
 80030fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003102:	095b      	lsrs	r3, r3, #5
 8003104:	f003 020f 	and.w	r2, r3, #15
 8003108:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4432      	add	r2, r6
 800310e:	609a      	str	r2, [r3, #8]
}
 8003110:	bf00      	nop
 8003112:	377c      	adds	r7, #124	; 0x7c
 8003114:	46bd      	mov	sp, r7
 8003116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800311a:	bf00      	nop
 800311c:	40011000 	.word	0x40011000
 8003120:	40011400 	.word	0x40011400
 8003124:	51eb851f 	.word	0x51eb851f

08003128 <__errno>:
 8003128:	4b01      	ldr	r3, [pc, #4]	; (8003130 <__errno+0x8>)
 800312a:	6818      	ldr	r0, [r3, #0]
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	20000014 	.word	0x20000014

08003134 <__libc_init_array>:
 8003134:	b570      	push	{r4, r5, r6, lr}
 8003136:	4d0d      	ldr	r5, [pc, #52]	; (800316c <__libc_init_array+0x38>)
 8003138:	4c0d      	ldr	r4, [pc, #52]	; (8003170 <__libc_init_array+0x3c>)
 800313a:	1b64      	subs	r4, r4, r5
 800313c:	10a4      	asrs	r4, r4, #2
 800313e:	2600      	movs	r6, #0
 8003140:	42a6      	cmp	r6, r4
 8003142:	d109      	bne.n	8003158 <__libc_init_array+0x24>
 8003144:	4d0b      	ldr	r5, [pc, #44]	; (8003174 <__libc_init_array+0x40>)
 8003146:	4c0c      	ldr	r4, [pc, #48]	; (8003178 <__libc_init_array+0x44>)
 8003148:	f001 f9be 	bl	80044c8 <_init>
 800314c:	1b64      	subs	r4, r4, r5
 800314e:	10a4      	asrs	r4, r4, #2
 8003150:	2600      	movs	r6, #0
 8003152:	42a6      	cmp	r6, r4
 8003154:	d105      	bne.n	8003162 <__libc_init_array+0x2e>
 8003156:	bd70      	pop	{r4, r5, r6, pc}
 8003158:	f855 3b04 	ldr.w	r3, [r5], #4
 800315c:	4798      	blx	r3
 800315e:	3601      	adds	r6, #1
 8003160:	e7ee      	b.n	8003140 <__libc_init_array+0xc>
 8003162:	f855 3b04 	ldr.w	r3, [r5], #4
 8003166:	4798      	blx	r3
 8003168:	3601      	adds	r6, #1
 800316a:	e7f2      	b.n	8003152 <__libc_init_array+0x1e>
 800316c:	08004730 	.word	0x08004730
 8003170:	08004730 	.word	0x08004730
 8003174:	08004730 	.word	0x08004730
 8003178:	08004734 	.word	0x08004734

0800317c <memset>:
 800317c:	4402      	add	r2, r0
 800317e:	4603      	mov	r3, r0
 8003180:	4293      	cmp	r3, r2
 8003182:	d100      	bne.n	8003186 <memset+0xa>
 8003184:	4770      	bx	lr
 8003186:	f803 1b01 	strb.w	r1, [r3], #1
 800318a:	e7f9      	b.n	8003180 <memset+0x4>

0800318c <iprintf>:
 800318c:	b40f      	push	{r0, r1, r2, r3}
 800318e:	4b0a      	ldr	r3, [pc, #40]	; (80031b8 <iprintf+0x2c>)
 8003190:	b513      	push	{r0, r1, r4, lr}
 8003192:	681c      	ldr	r4, [r3, #0]
 8003194:	b124      	cbz	r4, 80031a0 <iprintf+0x14>
 8003196:	69a3      	ldr	r3, [r4, #24]
 8003198:	b913      	cbnz	r3, 80031a0 <iprintf+0x14>
 800319a:	4620      	mov	r0, r4
 800319c:	f000 fa7e 	bl	800369c <__sinit>
 80031a0:	ab05      	add	r3, sp, #20
 80031a2:	9a04      	ldr	r2, [sp, #16]
 80031a4:	68a1      	ldr	r1, [r4, #8]
 80031a6:	9301      	str	r3, [sp, #4]
 80031a8:	4620      	mov	r0, r4
 80031aa:	f000 fdab 	bl	8003d04 <_vfiprintf_r>
 80031ae:	b002      	add	sp, #8
 80031b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031b4:	b004      	add	sp, #16
 80031b6:	4770      	bx	lr
 80031b8:	20000014 	.word	0x20000014

080031bc <_puts_r>:
 80031bc:	b570      	push	{r4, r5, r6, lr}
 80031be:	460e      	mov	r6, r1
 80031c0:	4605      	mov	r5, r0
 80031c2:	b118      	cbz	r0, 80031cc <_puts_r+0x10>
 80031c4:	6983      	ldr	r3, [r0, #24]
 80031c6:	b90b      	cbnz	r3, 80031cc <_puts_r+0x10>
 80031c8:	f000 fa68 	bl	800369c <__sinit>
 80031cc:	69ab      	ldr	r3, [r5, #24]
 80031ce:	68ac      	ldr	r4, [r5, #8]
 80031d0:	b913      	cbnz	r3, 80031d8 <_puts_r+0x1c>
 80031d2:	4628      	mov	r0, r5
 80031d4:	f000 fa62 	bl	800369c <__sinit>
 80031d8:	4b2c      	ldr	r3, [pc, #176]	; (800328c <_puts_r+0xd0>)
 80031da:	429c      	cmp	r4, r3
 80031dc:	d120      	bne.n	8003220 <_puts_r+0x64>
 80031de:	686c      	ldr	r4, [r5, #4]
 80031e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80031e2:	07db      	lsls	r3, r3, #31
 80031e4:	d405      	bmi.n	80031f2 <_puts_r+0x36>
 80031e6:	89a3      	ldrh	r3, [r4, #12]
 80031e8:	0598      	lsls	r0, r3, #22
 80031ea:	d402      	bmi.n	80031f2 <_puts_r+0x36>
 80031ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80031ee:	f000 faf3 	bl	80037d8 <__retarget_lock_acquire_recursive>
 80031f2:	89a3      	ldrh	r3, [r4, #12]
 80031f4:	0719      	lsls	r1, r3, #28
 80031f6:	d51d      	bpl.n	8003234 <_puts_r+0x78>
 80031f8:	6923      	ldr	r3, [r4, #16]
 80031fa:	b1db      	cbz	r3, 8003234 <_puts_r+0x78>
 80031fc:	3e01      	subs	r6, #1
 80031fe:	68a3      	ldr	r3, [r4, #8]
 8003200:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003204:	3b01      	subs	r3, #1
 8003206:	60a3      	str	r3, [r4, #8]
 8003208:	bb39      	cbnz	r1, 800325a <_puts_r+0x9e>
 800320a:	2b00      	cmp	r3, #0
 800320c:	da38      	bge.n	8003280 <_puts_r+0xc4>
 800320e:	4622      	mov	r2, r4
 8003210:	210a      	movs	r1, #10
 8003212:	4628      	mov	r0, r5
 8003214:	f000 f868 	bl	80032e8 <__swbuf_r>
 8003218:	3001      	adds	r0, #1
 800321a:	d011      	beq.n	8003240 <_puts_r+0x84>
 800321c:	250a      	movs	r5, #10
 800321e:	e011      	b.n	8003244 <_puts_r+0x88>
 8003220:	4b1b      	ldr	r3, [pc, #108]	; (8003290 <_puts_r+0xd4>)
 8003222:	429c      	cmp	r4, r3
 8003224:	d101      	bne.n	800322a <_puts_r+0x6e>
 8003226:	68ac      	ldr	r4, [r5, #8]
 8003228:	e7da      	b.n	80031e0 <_puts_r+0x24>
 800322a:	4b1a      	ldr	r3, [pc, #104]	; (8003294 <_puts_r+0xd8>)
 800322c:	429c      	cmp	r4, r3
 800322e:	bf08      	it	eq
 8003230:	68ec      	ldreq	r4, [r5, #12]
 8003232:	e7d5      	b.n	80031e0 <_puts_r+0x24>
 8003234:	4621      	mov	r1, r4
 8003236:	4628      	mov	r0, r5
 8003238:	f000 f8a8 	bl	800338c <__swsetup_r>
 800323c:	2800      	cmp	r0, #0
 800323e:	d0dd      	beq.n	80031fc <_puts_r+0x40>
 8003240:	f04f 35ff 	mov.w	r5, #4294967295
 8003244:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003246:	07da      	lsls	r2, r3, #31
 8003248:	d405      	bmi.n	8003256 <_puts_r+0x9a>
 800324a:	89a3      	ldrh	r3, [r4, #12]
 800324c:	059b      	lsls	r3, r3, #22
 800324e:	d402      	bmi.n	8003256 <_puts_r+0x9a>
 8003250:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003252:	f000 fac2 	bl	80037da <__retarget_lock_release_recursive>
 8003256:	4628      	mov	r0, r5
 8003258:	bd70      	pop	{r4, r5, r6, pc}
 800325a:	2b00      	cmp	r3, #0
 800325c:	da04      	bge.n	8003268 <_puts_r+0xac>
 800325e:	69a2      	ldr	r2, [r4, #24]
 8003260:	429a      	cmp	r2, r3
 8003262:	dc06      	bgt.n	8003272 <_puts_r+0xb6>
 8003264:	290a      	cmp	r1, #10
 8003266:	d004      	beq.n	8003272 <_puts_r+0xb6>
 8003268:	6823      	ldr	r3, [r4, #0]
 800326a:	1c5a      	adds	r2, r3, #1
 800326c:	6022      	str	r2, [r4, #0]
 800326e:	7019      	strb	r1, [r3, #0]
 8003270:	e7c5      	b.n	80031fe <_puts_r+0x42>
 8003272:	4622      	mov	r2, r4
 8003274:	4628      	mov	r0, r5
 8003276:	f000 f837 	bl	80032e8 <__swbuf_r>
 800327a:	3001      	adds	r0, #1
 800327c:	d1bf      	bne.n	80031fe <_puts_r+0x42>
 800327e:	e7df      	b.n	8003240 <_puts_r+0x84>
 8003280:	6823      	ldr	r3, [r4, #0]
 8003282:	250a      	movs	r5, #10
 8003284:	1c5a      	adds	r2, r3, #1
 8003286:	6022      	str	r2, [r4, #0]
 8003288:	701d      	strb	r5, [r3, #0]
 800328a:	e7db      	b.n	8003244 <_puts_r+0x88>
 800328c:	080046b4 	.word	0x080046b4
 8003290:	080046d4 	.word	0x080046d4
 8003294:	08004694 	.word	0x08004694

08003298 <puts>:
 8003298:	4b02      	ldr	r3, [pc, #8]	; (80032a4 <puts+0xc>)
 800329a:	4601      	mov	r1, r0
 800329c:	6818      	ldr	r0, [r3, #0]
 800329e:	f7ff bf8d 	b.w	80031bc <_puts_r>
 80032a2:	bf00      	nop
 80032a4:	20000014 	.word	0x20000014

080032a8 <siprintf>:
 80032a8:	b40e      	push	{r1, r2, r3}
 80032aa:	b500      	push	{lr}
 80032ac:	b09c      	sub	sp, #112	; 0x70
 80032ae:	ab1d      	add	r3, sp, #116	; 0x74
 80032b0:	9002      	str	r0, [sp, #8]
 80032b2:	9006      	str	r0, [sp, #24]
 80032b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80032b8:	4809      	ldr	r0, [pc, #36]	; (80032e0 <siprintf+0x38>)
 80032ba:	9107      	str	r1, [sp, #28]
 80032bc:	9104      	str	r1, [sp, #16]
 80032be:	4909      	ldr	r1, [pc, #36]	; (80032e4 <siprintf+0x3c>)
 80032c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80032c4:	9105      	str	r1, [sp, #20]
 80032c6:	6800      	ldr	r0, [r0, #0]
 80032c8:	9301      	str	r3, [sp, #4]
 80032ca:	a902      	add	r1, sp, #8
 80032cc:	f000 fbf0 	bl	8003ab0 <_svfiprintf_r>
 80032d0:	9b02      	ldr	r3, [sp, #8]
 80032d2:	2200      	movs	r2, #0
 80032d4:	701a      	strb	r2, [r3, #0]
 80032d6:	b01c      	add	sp, #112	; 0x70
 80032d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80032dc:	b003      	add	sp, #12
 80032de:	4770      	bx	lr
 80032e0:	20000014 	.word	0x20000014
 80032e4:	ffff0208 	.word	0xffff0208

080032e8 <__swbuf_r>:
 80032e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ea:	460e      	mov	r6, r1
 80032ec:	4614      	mov	r4, r2
 80032ee:	4605      	mov	r5, r0
 80032f0:	b118      	cbz	r0, 80032fa <__swbuf_r+0x12>
 80032f2:	6983      	ldr	r3, [r0, #24]
 80032f4:	b90b      	cbnz	r3, 80032fa <__swbuf_r+0x12>
 80032f6:	f000 f9d1 	bl	800369c <__sinit>
 80032fa:	4b21      	ldr	r3, [pc, #132]	; (8003380 <__swbuf_r+0x98>)
 80032fc:	429c      	cmp	r4, r3
 80032fe:	d12b      	bne.n	8003358 <__swbuf_r+0x70>
 8003300:	686c      	ldr	r4, [r5, #4]
 8003302:	69a3      	ldr	r3, [r4, #24]
 8003304:	60a3      	str	r3, [r4, #8]
 8003306:	89a3      	ldrh	r3, [r4, #12]
 8003308:	071a      	lsls	r2, r3, #28
 800330a:	d52f      	bpl.n	800336c <__swbuf_r+0x84>
 800330c:	6923      	ldr	r3, [r4, #16]
 800330e:	b36b      	cbz	r3, 800336c <__swbuf_r+0x84>
 8003310:	6923      	ldr	r3, [r4, #16]
 8003312:	6820      	ldr	r0, [r4, #0]
 8003314:	1ac0      	subs	r0, r0, r3
 8003316:	6963      	ldr	r3, [r4, #20]
 8003318:	b2f6      	uxtb	r6, r6
 800331a:	4283      	cmp	r3, r0
 800331c:	4637      	mov	r7, r6
 800331e:	dc04      	bgt.n	800332a <__swbuf_r+0x42>
 8003320:	4621      	mov	r1, r4
 8003322:	4628      	mov	r0, r5
 8003324:	f000 f926 	bl	8003574 <_fflush_r>
 8003328:	bb30      	cbnz	r0, 8003378 <__swbuf_r+0x90>
 800332a:	68a3      	ldr	r3, [r4, #8]
 800332c:	3b01      	subs	r3, #1
 800332e:	60a3      	str	r3, [r4, #8]
 8003330:	6823      	ldr	r3, [r4, #0]
 8003332:	1c5a      	adds	r2, r3, #1
 8003334:	6022      	str	r2, [r4, #0]
 8003336:	701e      	strb	r6, [r3, #0]
 8003338:	6963      	ldr	r3, [r4, #20]
 800333a:	3001      	adds	r0, #1
 800333c:	4283      	cmp	r3, r0
 800333e:	d004      	beq.n	800334a <__swbuf_r+0x62>
 8003340:	89a3      	ldrh	r3, [r4, #12]
 8003342:	07db      	lsls	r3, r3, #31
 8003344:	d506      	bpl.n	8003354 <__swbuf_r+0x6c>
 8003346:	2e0a      	cmp	r6, #10
 8003348:	d104      	bne.n	8003354 <__swbuf_r+0x6c>
 800334a:	4621      	mov	r1, r4
 800334c:	4628      	mov	r0, r5
 800334e:	f000 f911 	bl	8003574 <_fflush_r>
 8003352:	b988      	cbnz	r0, 8003378 <__swbuf_r+0x90>
 8003354:	4638      	mov	r0, r7
 8003356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003358:	4b0a      	ldr	r3, [pc, #40]	; (8003384 <__swbuf_r+0x9c>)
 800335a:	429c      	cmp	r4, r3
 800335c:	d101      	bne.n	8003362 <__swbuf_r+0x7a>
 800335e:	68ac      	ldr	r4, [r5, #8]
 8003360:	e7cf      	b.n	8003302 <__swbuf_r+0x1a>
 8003362:	4b09      	ldr	r3, [pc, #36]	; (8003388 <__swbuf_r+0xa0>)
 8003364:	429c      	cmp	r4, r3
 8003366:	bf08      	it	eq
 8003368:	68ec      	ldreq	r4, [r5, #12]
 800336a:	e7ca      	b.n	8003302 <__swbuf_r+0x1a>
 800336c:	4621      	mov	r1, r4
 800336e:	4628      	mov	r0, r5
 8003370:	f000 f80c 	bl	800338c <__swsetup_r>
 8003374:	2800      	cmp	r0, #0
 8003376:	d0cb      	beq.n	8003310 <__swbuf_r+0x28>
 8003378:	f04f 37ff 	mov.w	r7, #4294967295
 800337c:	e7ea      	b.n	8003354 <__swbuf_r+0x6c>
 800337e:	bf00      	nop
 8003380:	080046b4 	.word	0x080046b4
 8003384:	080046d4 	.word	0x080046d4
 8003388:	08004694 	.word	0x08004694

0800338c <__swsetup_r>:
 800338c:	4b32      	ldr	r3, [pc, #200]	; (8003458 <__swsetup_r+0xcc>)
 800338e:	b570      	push	{r4, r5, r6, lr}
 8003390:	681d      	ldr	r5, [r3, #0]
 8003392:	4606      	mov	r6, r0
 8003394:	460c      	mov	r4, r1
 8003396:	b125      	cbz	r5, 80033a2 <__swsetup_r+0x16>
 8003398:	69ab      	ldr	r3, [r5, #24]
 800339a:	b913      	cbnz	r3, 80033a2 <__swsetup_r+0x16>
 800339c:	4628      	mov	r0, r5
 800339e:	f000 f97d 	bl	800369c <__sinit>
 80033a2:	4b2e      	ldr	r3, [pc, #184]	; (800345c <__swsetup_r+0xd0>)
 80033a4:	429c      	cmp	r4, r3
 80033a6:	d10f      	bne.n	80033c8 <__swsetup_r+0x3c>
 80033a8:	686c      	ldr	r4, [r5, #4]
 80033aa:	89a3      	ldrh	r3, [r4, #12]
 80033ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80033b0:	0719      	lsls	r1, r3, #28
 80033b2:	d42c      	bmi.n	800340e <__swsetup_r+0x82>
 80033b4:	06dd      	lsls	r5, r3, #27
 80033b6:	d411      	bmi.n	80033dc <__swsetup_r+0x50>
 80033b8:	2309      	movs	r3, #9
 80033ba:	6033      	str	r3, [r6, #0]
 80033bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80033c0:	81a3      	strh	r3, [r4, #12]
 80033c2:	f04f 30ff 	mov.w	r0, #4294967295
 80033c6:	e03e      	b.n	8003446 <__swsetup_r+0xba>
 80033c8:	4b25      	ldr	r3, [pc, #148]	; (8003460 <__swsetup_r+0xd4>)
 80033ca:	429c      	cmp	r4, r3
 80033cc:	d101      	bne.n	80033d2 <__swsetup_r+0x46>
 80033ce:	68ac      	ldr	r4, [r5, #8]
 80033d0:	e7eb      	b.n	80033aa <__swsetup_r+0x1e>
 80033d2:	4b24      	ldr	r3, [pc, #144]	; (8003464 <__swsetup_r+0xd8>)
 80033d4:	429c      	cmp	r4, r3
 80033d6:	bf08      	it	eq
 80033d8:	68ec      	ldreq	r4, [r5, #12]
 80033da:	e7e6      	b.n	80033aa <__swsetup_r+0x1e>
 80033dc:	0758      	lsls	r0, r3, #29
 80033de:	d512      	bpl.n	8003406 <__swsetup_r+0x7a>
 80033e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80033e2:	b141      	cbz	r1, 80033f6 <__swsetup_r+0x6a>
 80033e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80033e8:	4299      	cmp	r1, r3
 80033ea:	d002      	beq.n	80033f2 <__swsetup_r+0x66>
 80033ec:	4630      	mov	r0, r6
 80033ee:	f000 fa59 	bl	80038a4 <_free_r>
 80033f2:	2300      	movs	r3, #0
 80033f4:	6363      	str	r3, [r4, #52]	; 0x34
 80033f6:	89a3      	ldrh	r3, [r4, #12]
 80033f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80033fc:	81a3      	strh	r3, [r4, #12]
 80033fe:	2300      	movs	r3, #0
 8003400:	6063      	str	r3, [r4, #4]
 8003402:	6923      	ldr	r3, [r4, #16]
 8003404:	6023      	str	r3, [r4, #0]
 8003406:	89a3      	ldrh	r3, [r4, #12]
 8003408:	f043 0308 	orr.w	r3, r3, #8
 800340c:	81a3      	strh	r3, [r4, #12]
 800340e:	6923      	ldr	r3, [r4, #16]
 8003410:	b94b      	cbnz	r3, 8003426 <__swsetup_r+0x9a>
 8003412:	89a3      	ldrh	r3, [r4, #12]
 8003414:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003418:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800341c:	d003      	beq.n	8003426 <__swsetup_r+0x9a>
 800341e:	4621      	mov	r1, r4
 8003420:	4630      	mov	r0, r6
 8003422:	f000 f9ff 	bl	8003824 <__smakebuf_r>
 8003426:	89a0      	ldrh	r0, [r4, #12]
 8003428:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800342c:	f010 0301 	ands.w	r3, r0, #1
 8003430:	d00a      	beq.n	8003448 <__swsetup_r+0xbc>
 8003432:	2300      	movs	r3, #0
 8003434:	60a3      	str	r3, [r4, #8]
 8003436:	6963      	ldr	r3, [r4, #20]
 8003438:	425b      	negs	r3, r3
 800343a:	61a3      	str	r3, [r4, #24]
 800343c:	6923      	ldr	r3, [r4, #16]
 800343e:	b943      	cbnz	r3, 8003452 <__swsetup_r+0xc6>
 8003440:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003444:	d1ba      	bne.n	80033bc <__swsetup_r+0x30>
 8003446:	bd70      	pop	{r4, r5, r6, pc}
 8003448:	0781      	lsls	r1, r0, #30
 800344a:	bf58      	it	pl
 800344c:	6963      	ldrpl	r3, [r4, #20]
 800344e:	60a3      	str	r3, [r4, #8]
 8003450:	e7f4      	b.n	800343c <__swsetup_r+0xb0>
 8003452:	2000      	movs	r0, #0
 8003454:	e7f7      	b.n	8003446 <__swsetup_r+0xba>
 8003456:	bf00      	nop
 8003458:	20000014 	.word	0x20000014
 800345c:	080046b4 	.word	0x080046b4
 8003460:	080046d4 	.word	0x080046d4
 8003464:	08004694 	.word	0x08004694

08003468 <__sflush_r>:
 8003468:	898a      	ldrh	r2, [r1, #12]
 800346a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800346e:	4605      	mov	r5, r0
 8003470:	0710      	lsls	r0, r2, #28
 8003472:	460c      	mov	r4, r1
 8003474:	d458      	bmi.n	8003528 <__sflush_r+0xc0>
 8003476:	684b      	ldr	r3, [r1, #4]
 8003478:	2b00      	cmp	r3, #0
 800347a:	dc05      	bgt.n	8003488 <__sflush_r+0x20>
 800347c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800347e:	2b00      	cmp	r3, #0
 8003480:	dc02      	bgt.n	8003488 <__sflush_r+0x20>
 8003482:	2000      	movs	r0, #0
 8003484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003488:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800348a:	2e00      	cmp	r6, #0
 800348c:	d0f9      	beq.n	8003482 <__sflush_r+0x1a>
 800348e:	2300      	movs	r3, #0
 8003490:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003494:	682f      	ldr	r7, [r5, #0]
 8003496:	602b      	str	r3, [r5, #0]
 8003498:	d032      	beq.n	8003500 <__sflush_r+0x98>
 800349a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800349c:	89a3      	ldrh	r3, [r4, #12]
 800349e:	075a      	lsls	r2, r3, #29
 80034a0:	d505      	bpl.n	80034ae <__sflush_r+0x46>
 80034a2:	6863      	ldr	r3, [r4, #4]
 80034a4:	1ac0      	subs	r0, r0, r3
 80034a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80034a8:	b10b      	cbz	r3, 80034ae <__sflush_r+0x46>
 80034aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80034ac:	1ac0      	subs	r0, r0, r3
 80034ae:	2300      	movs	r3, #0
 80034b0:	4602      	mov	r2, r0
 80034b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80034b4:	6a21      	ldr	r1, [r4, #32]
 80034b6:	4628      	mov	r0, r5
 80034b8:	47b0      	blx	r6
 80034ba:	1c43      	adds	r3, r0, #1
 80034bc:	89a3      	ldrh	r3, [r4, #12]
 80034be:	d106      	bne.n	80034ce <__sflush_r+0x66>
 80034c0:	6829      	ldr	r1, [r5, #0]
 80034c2:	291d      	cmp	r1, #29
 80034c4:	d82c      	bhi.n	8003520 <__sflush_r+0xb8>
 80034c6:	4a2a      	ldr	r2, [pc, #168]	; (8003570 <__sflush_r+0x108>)
 80034c8:	40ca      	lsrs	r2, r1
 80034ca:	07d6      	lsls	r6, r2, #31
 80034cc:	d528      	bpl.n	8003520 <__sflush_r+0xb8>
 80034ce:	2200      	movs	r2, #0
 80034d0:	6062      	str	r2, [r4, #4]
 80034d2:	04d9      	lsls	r1, r3, #19
 80034d4:	6922      	ldr	r2, [r4, #16]
 80034d6:	6022      	str	r2, [r4, #0]
 80034d8:	d504      	bpl.n	80034e4 <__sflush_r+0x7c>
 80034da:	1c42      	adds	r2, r0, #1
 80034dc:	d101      	bne.n	80034e2 <__sflush_r+0x7a>
 80034de:	682b      	ldr	r3, [r5, #0]
 80034e0:	b903      	cbnz	r3, 80034e4 <__sflush_r+0x7c>
 80034e2:	6560      	str	r0, [r4, #84]	; 0x54
 80034e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80034e6:	602f      	str	r7, [r5, #0]
 80034e8:	2900      	cmp	r1, #0
 80034ea:	d0ca      	beq.n	8003482 <__sflush_r+0x1a>
 80034ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80034f0:	4299      	cmp	r1, r3
 80034f2:	d002      	beq.n	80034fa <__sflush_r+0x92>
 80034f4:	4628      	mov	r0, r5
 80034f6:	f000 f9d5 	bl	80038a4 <_free_r>
 80034fa:	2000      	movs	r0, #0
 80034fc:	6360      	str	r0, [r4, #52]	; 0x34
 80034fe:	e7c1      	b.n	8003484 <__sflush_r+0x1c>
 8003500:	6a21      	ldr	r1, [r4, #32]
 8003502:	2301      	movs	r3, #1
 8003504:	4628      	mov	r0, r5
 8003506:	47b0      	blx	r6
 8003508:	1c41      	adds	r1, r0, #1
 800350a:	d1c7      	bne.n	800349c <__sflush_r+0x34>
 800350c:	682b      	ldr	r3, [r5, #0]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d0c4      	beq.n	800349c <__sflush_r+0x34>
 8003512:	2b1d      	cmp	r3, #29
 8003514:	d001      	beq.n	800351a <__sflush_r+0xb2>
 8003516:	2b16      	cmp	r3, #22
 8003518:	d101      	bne.n	800351e <__sflush_r+0xb6>
 800351a:	602f      	str	r7, [r5, #0]
 800351c:	e7b1      	b.n	8003482 <__sflush_r+0x1a>
 800351e:	89a3      	ldrh	r3, [r4, #12]
 8003520:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003524:	81a3      	strh	r3, [r4, #12]
 8003526:	e7ad      	b.n	8003484 <__sflush_r+0x1c>
 8003528:	690f      	ldr	r7, [r1, #16]
 800352a:	2f00      	cmp	r7, #0
 800352c:	d0a9      	beq.n	8003482 <__sflush_r+0x1a>
 800352e:	0793      	lsls	r3, r2, #30
 8003530:	680e      	ldr	r6, [r1, #0]
 8003532:	bf08      	it	eq
 8003534:	694b      	ldreq	r3, [r1, #20]
 8003536:	600f      	str	r7, [r1, #0]
 8003538:	bf18      	it	ne
 800353a:	2300      	movne	r3, #0
 800353c:	eba6 0807 	sub.w	r8, r6, r7
 8003540:	608b      	str	r3, [r1, #8]
 8003542:	f1b8 0f00 	cmp.w	r8, #0
 8003546:	dd9c      	ble.n	8003482 <__sflush_r+0x1a>
 8003548:	6a21      	ldr	r1, [r4, #32]
 800354a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800354c:	4643      	mov	r3, r8
 800354e:	463a      	mov	r2, r7
 8003550:	4628      	mov	r0, r5
 8003552:	47b0      	blx	r6
 8003554:	2800      	cmp	r0, #0
 8003556:	dc06      	bgt.n	8003566 <__sflush_r+0xfe>
 8003558:	89a3      	ldrh	r3, [r4, #12]
 800355a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800355e:	81a3      	strh	r3, [r4, #12]
 8003560:	f04f 30ff 	mov.w	r0, #4294967295
 8003564:	e78e      	b.n	8003484 <__sflush_r+0x1c>
 8003566:	4407      	add	r7, r0
 8003568:	eba8 0800 	sub.w	r8, r8, r0
 800356c:	e7e9      	b.n	8003542 <__sflush_r+0xda>
 800356e:	bf00      	nop
 8003570:	20400001 	.word	0x20400001

08003574 <_fflush_r>:
 8003574:	b538      	push	{r3, r4, r5, lr}
 8003576:	690b      	ldr	r3, [r1, #16]
 8003578:	4605      	mov	r5, r0
 800357a:	460c      	mov	r4, r1
 800357c:	b913      	cbnz	r3, 8003584 <_fflush_r+0x10>
 800357e:	2500      	movs	r5, #0
 8003580:	4628      	mov	r0, r5
 8003582:	bd38      	pop	{r3, r4, r5, pc}
 8003584:	b118      	cbz	r0, 800358e <_fflush_r+0x1a>
 8003586:	6983      	ldr	r3, [r0, #24]
 8003588:	b90b      	cbnz	r3, 800358e <_fflush_r+0x1a>
 800358a:	f000 f887 	bl	800369c <__sinit>
 800358e:	4b14      	ldr	r3, [pc, #80]	; (80035e0 <_fflush_r+0x6c>)
 8003590:	429c      	cmp	r4, r3
 8003592:	d11b      	bne.n	80035cc <_fflush_r+0x58>
 8003594:	686c      	ldr	r4, [r5, #4]
 8003596:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d0ef      	beq.n	800357e <_fflush_r+0xa>
 800359e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80035a0:	07d0      	lsls	r0, r2, #31
 80035a2:	d404      	bmi.n	80035ae <_fflush_r+0x3a>
 80035a4:	0599      	lsls	r1, r3, #22
 80035a6:	d402      	bmi.n	80035ae <_fflush_r+0x3a>
 80035a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80035aa:	f000 f915 	bl	80037d8 <__retarget_lock_acquire_recursive>
 80035ae:	4628      	mov	r0, r5
 80035b0:	4621      	mov	r1, r4
 80035b2:	f7ff ff59 	bl	8003468 <__sflush_r>
 80035b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80035b8:	07da      	lsls	r2, r3, #31
 80035ba:	4605      	mov	r5, r0
 80035bc:	d4e0      	bmi.n	8003580 <_fflush_r+0xc>
 80035be:	89a3      	ldrh	r3, [r4, #12]
 80035c0:	059b      	lsls	r3, r3, #22
 80035c2:	d4dd      	bmi.n	8003580 <_fflush_r+0xc>
 80035c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80035c6:	f000 f908 	bl	80037da <__retarget_lock_release_recursive>
 80035ca:	e7d9      	b.n	8003580 <_fflush_r+0xc>
 80035cc:	4b05      	ldr	r3, [pc, #20]	; (80035e4 <_fflush_r+0x70>)
 80035ce:	429c      	cmp	r4, r3
 80035d0:	d101      	bne.n	80035d6 <_fflush_r+0x62>
 80035d2:	68ac      	ldr	r4, [r5, #8]
 80035d4:	e7df      	b.n	8003596 <_fflush_r+0x22>
 80035d6:	4b04      	ldr	r3, [pc, #16]	; (80035e8 <_fflush_r+0x74>)
 80035d8:	429c      	cmp	r4, r3
 80035da:	bf08      	it	eq
 80035dc:	68ec      	ldreq	r4, [r5, #12]
 80035de:	e7da      	b.n	8003596 <_fflush_r+0x22>
 80035e0:	080046b4 	.word	0x080046b4
 80035e4:	080046d4 	.word	0x080046d4
 80035e8:	08004694 	.word	0x08004694

080035ec <std>:
 80035ec:	2300      	movs	r3, #0
 80035ee:	b510      	push	{r4, lr}
 80035f0:	4604      	mov	r4, r0
 80035f2:	e9c0 3300 	strd	r3, r3, [r0]
 80035f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80035fa:	6083      	str	r3, [r0, #8]
 80035fc:	8181      	strh	r1, [r0, #12]
 80035fe:	6643      	str	r3, [r0, #100]	; 0x64
 8003600:	81c2      	strh	r2, [r0, #14]
 8003602:	6183      	str	r3, [r0, #24]
 8003604:	4619      	mov	r1, r3
 8003606:	2208      	movs	r2, #8
 8003608:	305c      	adds	r0, #92	; 0x5c
 800360a:	f7ff fdb7 	bl	800317c <memset>
 800360e:	4b05      	ldr	r3, [pc, #20]	; (8003624 <std+0x38>)
 8003610:	6263      	str	r3, [r4, #36]	; 0x24
 8003612:	4b05      	ldr	r3, [pc, #20]	; (8003628 <std+0x3c>)
 8003614:	62a3      	str	r3, [r4, #40]	; 0x28
 8003616:	4b05      	ldr	r3, [pc, #20]	; (800362c <std+0x40>)
 8003618:	62e3      	str	r3, [r4, #44]	; 0x2c
 800361a:	4b05      	ldr	r3, [pc, #20]	; (8003630 <std+0x44>)
 800361c:	6224      	str	r4, [r4, #32]
 800361e:	6323      	str	r3, [r4, #48]	; 0x30
 8003620:	bd10      	pop	{r4, pc}
 8003622:	bf00      	nop
 8003624:	080042ad 	.word	0x080042ad
 8003628:	080042cf 	.word	0x080042cf
 800362c:	08004307 	.word	0x08004307
 8003630:	0800432b 	.word	0x0800432b

08003634 <_cleanup_r>:
 8003634:	4901      	ldr	r1, [pc, #4]	; (800363c <_cleanup_r+0x8>)
 8003636:	f000 b8af 	b.w	8003798 <_fwalk_reent>
 800363a:	bf00      	nop
 800363c:	08003575 	.word	0x08003575

08003640 <__sfmoreglue>:
 8003640:	b570      	push	{r4, r5, r6, lr}
 8003642:	1e4a      	subs	r2, r1, #1
 8003644:	2568      	movs	r5, #104	; 0x68
 8003646:	4355      	muls	r5, r2
 8003648:	460e      	mov	r6, r1
 800364a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800364e:	f000 f979 	bl	8003944 <_malloc_r>
 8003652:	4604      	mov	r4, r0
 8003654:	b140      	cbz	r0, 8003668 <__sfmoreglue+0x28>
 8003656:	2100      	movs	r1, #0
 8003658:	e9c0 1600 	strd	r1, r6, [r0]
 800365c:	300c      	adds	r0, #12
 800365e:	60a0      	str	r0, [r4, #8]
 8003660:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003664:	f7ff fd8a 	bl	800317c <memset>
 8003668:	4620      	mov	r0, r4
 800366a:	bd70      	pop	{r4, r5, r6, pc}

0800366c <__sfp_lock_acquire>:
 800366c:	4801      	ldr	r0, [pc, #4]	; (8003674 <__sfp_lock_acquire+0x8>)
 800366e:	f000 b8b3 	b.w	80037d8 <__retarget_lock_acquire_recursive>
 8003672:	bf00      	nop
 8003674:	20003ee4 	.word	0x20003ee4

08003678 <__sfp_lock_release>:
 8003678:	4801      	ldr	r0, [pc, #4]	; (8003680 <__sfp_lock_release+0x8>)
 800367a:	f000 b8ae 	b.w	80037da <__retarget_lock_release_recursive>
 800367e:	bf00      	nop
 8003680:	20003ee4 	.word	0x20003ee4

08003684 <__sinit_lock_acquire>:
 8003684:	4801      	ldr	r0, [pc, #4]	; (800368c <__sinit_lock_acquire+0x8>)
 8003686:	f000 b8a7 	b.w	80037d8 <__retarget_lock_acquire_recursive>
 800368a:	bf00      	nop
 800368c:	20003edf 	.word	0x20003edf

08003690 <__sinit_lock_release>:
 8003690:	4801      	ldr	r0, [pc, #4]	; (8003698 <__sinit_lock_release+0x8>)
 8003692:	f000 b8a2 	b.w	80037da <__retarget_lock_release_recursive>
 8003696:	bf00      	nop
 8003698:	20003edf 	.word	0x20003edf

0800369c <__sinit>:
 800369c:	b510      	push	{r4, lr}
 800369e:	4604      	mov	r4, r0
 80036a0:	f7ff fff0 	bl	8003684 <__sinit_lock_acquire>
 80036a4:	69a3      	ldr	r3, [r4, #24]
 80036a6:	b11b      	cbz	r3, 80036b0 <__sinit+0x14>
 80036a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036ac:	f7ff bff0 	b.w	8003690 <__sinit_lock_release>
 80036b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80036b4:	6523      	str	r3, [r4, #80]	; 0x50
 80036b6:	4b13      	ldr	r3, [pc, #76]	; (8003704 <__sinit+0x68>)
 80036b8:	4a13      	ldr	r2, [pc, #76]	; (8003708 <__sinit+0x6c>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	62a2      	str	r2, [r4, #40]	; 0x28
 80036be:	42a3      	cmp	r3, r4
 80036c0:	bf04      	itt	eq
 80036c2:	2301      	moveq	r3, #1
 80036c4:	61a3      	streq	r3, [r4, #24]
 80036c6:	4620      	mov	r0, r4
 80036c8:	f000 f820 	bl	800370c <__sfp>
 80036cc:	6060      	str	r0, [r4, #4]
 80036ce:	4620      	mov	r0, r4
 80036d0:	f000 f81c 	bl	800370c <__sfp>
 80036d4:	60a0      	str	r0, [r4, #8]
 80036d6:	4620      	mov	r0, r4
 80036d8:	f000 f818 	bl	800370c <__sfp>
 80036dc:	2200      	movs	r2, #0
 80036de:	60e0      	str	r0, [r4, #12]
 80036e0:	2104      	movs	r1, #4
 80036e2:	6860      	ldr	r0, [r4, #4]
 80036e4:	f7ff ff82 	bl	80035ec <std>
 80036e8:	68a0      	ldr	r0, [r4, #8]
 80036ea:	2201      	movs	r2, #1
 80036ec:	2109      	movs	r1, #9
 80036ee:	f7ff ff7d 	bl	80035ec <std>
 80036f2:	68e0      	ldr	r0, [r4, #12]
 80036f4:	2202      	movs	r2, #2
 80036f6:	2112      	movs	r1, #18
 80036f8:	f7ff ff78 	bl	80035ec <std>
 80036fc:	2301      	movs	r3, #1
 80036fe:	61a3      	str	r3, [r4, #24]
 8003700:	e7d2      	b.n	80036a8 <__sinit+0xc>
 8003702:	bf00      	nop
 8003704:	08004690 	.word	0x08004690
 8003708:	08003635 	.word	0x08003635

0800370c <__sfp>:
 800370c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800370e:	4607      	mov	r7, r0
 8003710:	f7ff ffac 	bl	800366c <__sfp_lock_acquire>
 8003714:	4b1e      	ldr	r3, [pc, #120]	; (8003790 <__sfp+0x84>)
 8003716:	681e      	ldr	r6, [r3, #0]
 8003718:	69b3      	ldr	r3, [r6, #24]
 800371a:	b913      	cbnz	r3, 8003722 <__sfp+0x16>
 800371c:	4630      	mov	r0, r6
 800371e:	f7ff ffbd 	bl	800369c <__sinit>
 8003722:	3648      	adds	r6, #72	; 0x48
 8003724:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003728:	3b01      	subs	r3, #1
 800372a:	d503      	bpl.n	8003734 <__sfp+0x28>
 800372c:	6833      	ldr	r3, [r6, #0]
 800372e:	b30b      	cbz	r3, 8003774 <__sfp+0x68>
 8003730:	6836      	ldr	r6, [r6, #0]
 8003732:	e7f7      	b.n	8003724 <__sfp+0x18>
 8003734:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003738:	b9d5      	cbnz	r5, 8003770 <__sfp+0x64>
 800373a:	4b16      	ldr	r3, [pc, #88]	; (8003794 <__sfp+0x88>)
 800373c:	60e3      	str	r3, [r4, #12]
 800373e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003742:	6665      	str	r5, [r4, #100]	; 0x64
 8003744:	f000 f847 	bl	80037d6 <__retarget_lock_init_recursive>
 8003748:	f7ff ff96 	bl	8003678 <__sfp_lock_release>
 800374c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003750:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003754:	6025      	str	r5, [r4, #0]
 8003756:	61a5      	str	r5, [r4, #24]
 8003758:	2208      	movs	r2, #8
 800375a:	4629      	mov	r1, r5
 800375c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003760:	f7ff fd0c 	bl	800317c <memset>
 8003764:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003768:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800376c:	4620      	mov	r0, r4
 800376e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003770:	3468      	adds	r4, #104	; 0x68
 8003772:	e7d9      	b.n	8003728 <__sfp+0x1c>
 8003774:	2104      	movs	r1, #4
 8003776:	4638      	mov	r0, r7
 8003778:	f7ff ff62 	bl	8003640 <__sfmoreglue>
 800377c:	4604      	mov	r4, r0
 800377e:	6030      	str	r0, [r6, #0]
 8003780:	2800      	cmp	r0, #0
 8003782:	d1d5      	bne.n	8003730 <__sfp+0x24>
 8003784:	f7ff ff78 	bl	8003678 <__sfp_lock_release>
 8003788:	230c      	movs	r3, #12
 800378a:	603b      	str	r3, [r7, #0]
 800378c:	e7ee      	b.n	800376c <__sfp+0x60>
 800378e:	bf00      	nop
 8003790:	08004690 	.word	0x08004690
 8003794:	ffff0001 	.word	0xffff0001

08003798 <_fwalk_reent>:
 8003798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800379c:	4606      	mov	r6, r0
 800379e:	4688      	mov	r8, r1
 80037a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80037a4:	2700      	movs	r7, #0
 80037a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80037aa:	f1b9 0901 	subs.w	r9, r9, #1
 80037ae:	d505      	bpl.n	80037bc <_fwalk_reent+0x24>
 80037b0:	6824      	ldr	r4, [r4, #0]
 80037b2:	2c00      	cmp	r4, #0
 80037b4:	d1f7      	bne.n	80037a6 <_fwalk_reent+0xe>
 80037b6:	4638      	mov	r0, r7
 80037b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80037bc:	89ab      	ldrh	r3, [r5, #12]
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d907      	bls.n	80037d2 <_fwalk_reent+0x3a>
 80037c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80037c6:	3301      	adds	r3, #1
 80037c8:	d003      	beq.n	80037d2 <_fwalk_reent+0x3a>
 80037ca:	4629      	mov	r1, r5
 80037cc:	4630      	mov	r0, r6
 80037ce:	47c0      	blx	r8
 80037d0:	4307      	orrs	r7, r0
 80037d2:	3568      	adds	r5, #104	; 0x68
 80037d4:	e7e9      	b.n	80037aa <_fwalk_reent+0x12>

080037d6 <__retarget_lock_init_recursive>:
 80037d6:	4770      	bx	lr

080037d8 <__retarget_lock_acquire_recursive>:
 80037d8:	4770      	bx	lr

080037da <__retarget_lock_release_recursive>:
 80037da:	4770      	bx	lr

080037dc <__swhatbuf_r>:
 80037dc:	b570      	push	{r4, r5, r6, lr}
 80037de:	460e      	mov	r6, r1
 80037e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037e4:	2900      	cmp	r1, #0
 80037e6:	b096      	sub	sp, #88	; 0x58
 80037e8:	4614      	mov	r4, r2
 80037ea:	461d      	mov	r5, r3
 80037ec:	da07      	bge.n	80037fe <__swhatbuf_r+0x22>
 80037ee:	2300      	movs	r3, #0
 80037f0:	602b      	str	r3, [r5, #0]
 80037f2:	89b3      	ldrh	r3, [r6, #12]
 80037f4:	061a      	lsls	r2, r3, #24
 80037f6:	d410      	bmi.n	800381a <__swhatbuf_r+0x3e>
 80037f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037fc:	e00e      	b.n	800381c <__swhatbuf_r+0x40>
 80037fe:	466a      	mov	r2, sp
 8003800:	f000 fdba 	bl	8004378 <_fstat_r>
 8003804:	2800      	cmp	r0, #0
 8003806:	dbf2      	blt.n	80037ee <__swhatbuf_r+0x12>
 8003808:	9a01      	ldr	r2, [sp, #4]
 800380a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800380e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003812:	425a      	negs	r2, r3
 8003814:	415a      	adcs	r2, r3
 8003816:	602a      	str	r2, [r5, #0]
 8003818:	e7ee      	b.n	80037f8 <__swhatbuf_r+0x1c>
 800381a:	2340      	movs	r3, #64	; 0x40
 800381c:	2000      	movs	r0, #0
 800381e:	6023      	str	r3, [r4, #0]
 8003820:	b016      	add	sp, #88	; 0x58
 8003822:	bd70      	pop	{r4, r5, r6, pc}

08003824 <__smakebuf_r>:
 8003824:	898b      	ldrh	r3, [r1, #12]
 8003826:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003828:	079d      	lsls	r5, r3, #30
 800382a:	4606      	mov	r6, r0
 800382c:	460c      	mov	r4, r1
 800382e:	d507      	bpl.n	8003840 <__smakebuf_r+0x1c>
 8003830:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003834:	6023      	str	r3, [r4, #0]
 8003836:	6123      	str	r3, [r4, #16]
 8003838:	2301      	movs	r3, #1
 800383a:	6163      	str	r3, [r4, #20]
 800383c:	b002      	add	sp, #8
 800383e:	bd70      	pop	{r4, r5, r6, pc}
 8003840:	ab01      	add	r3, sp, #4
 8003842:	466a      	mov	r2, sp
 8003844:	f7ff ffca 	bl	80037dc <__swhatbuf_r>
 8003848:	9900      	ldr	r1, [sp, #0]
 800384a:	4605      	mov	r5, r0
 800384c:	4630      	mov	r0, r6
 800384e:	f000 f879 	bl	8003944 <_malloc_r>
 8003852:	b948      	cbnz	r0, 8003868 <__smakebuf_r+0x44>
 8003854:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003858:	059a      	lsls	r2, r3, #22
 800385a:	d4ef      	bmi.n	800383c <__smakebuf_r+0x18>
 800385c:	f023 0303 	bic.w	r3, r3, #3
 8003860:	f043 0302 	orr.w	r3, r3, #2
 8003864:	81a3      	strh	r3, [r4, #12]
 8003866:	e7e3      	b.n	8003830 <__smakebuf_r+0xc>
 8003868:	4b0d      	ldr	r3, [pc, #52]	; (80038a0 <__smakebuf_r+0x7c>)
 800386a:	62b3      	str	r3, [r6, #40]	; 0x28
 800386c:	89a3      	ldrh	r3, [r4, #12]
 800386e:	6020      	str	r0, [r4, #0]
 8003870:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003874:	81a3      	strh	r3, [r4, #12]
 8003876:	9b00      	ldr	r3, [sp, #0]
 8003878:	6163      	str	r3, [r4, #20]
 800387a:	9b01      	ldr	r3, [sp, #4]
 800387c:	6120      	str	r0, [r4, #16]
 800387e:	b15b      	cbz	r3, 8003898 <__smakebuf_r+0x74>
 8003880:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003884:	4630      	mov	r0, r6
 8003886:	f000 fd89 	bl	800439c <_isatty_r>
 800388a:	b128      	cbz	r0, 8003898 <__smakebuf_r+0x74>
 800388c:	89a3      	ldrh	r3, [r4, #12]
 800388e:	f023 0303 	bic.w	r3, r3, #3
 8003892:	f043 0301 	orr.w	r3, r3, #1
 8003896:	81a3      	strh	r3, [r4, #12]
 8003898:	89a0      	ldrh	r0, [r4, #12]
 800389a:	4305      	orrs	r5, r0
 800389c:	81a5      	strh	r5, [r4, #12]
 800389e:	e7cd      	b.n	800383c <__smakebuf_r+0x18>
 80038a0:	08003635 	.word	0x08003635

080038a4 <_free_r>:
 80038a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80038a6:	2900      	cmp	r1, #0
 80038a8:	d048      	beq.n	800393c <_free_r+0x98>
 80038aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038ae:	9001      	str	r0, [sp, #4]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	f1a1 0404 	sub.w	r4, r1, #4
 80038b6:	bfb8      	it	lt
 80038b8:	18e4      	addlt	r4, r4, r3
 80038ba:	f000 fdb9 	bl	8004430 <__malloc_lock>
 80038be:	4a20      	ldr	r2, [pc, #128]	; (8003940 <_free_r+0x9c>)
 80038c0:	9801      	ldr	r0, [sp, #4]
 80038c2:	6813      	ldr	r3, [r2, #0]
 80038c4:	4615      	mov	r5, r2
 80038c6:	b933      	cbnz	r3, 80038d6 <_free_r+0x32>
 80038c8:	6063      	str	r3, [r4, #4]
 80038ca:	6014      	str	r4, [r2, #0]
 80038cc:	b003      	add	sp, #12
 80038ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80038d2:	f000 bdb3 	b.w	800443c <__malloc_unlock>
 80038d6:	42a3      	cmp	r3, r4
 80038d8:	d90b      	bls.n	80038f2 <_free_r+0x4e>
 80038da:	6821      	ldr	r1, [r4, #0]
 80038dc:	1862      	adds	r2, r4, r1
 80038de:	4293      	cmp	r3, r2
 80038e0:	bf04      	itt	eq
 80038e2:	681a      	ldreq	r2, [r3, #0]
 80038e4:	685b      	ldreq	r3, [r3, #4]
 80038e6:	6063      	str	r3, [r4, #4]
 80038e8:	bf04      	itt	eq
 80038ea:	1852      	addeq	r2, r2, r1
 80038ec:	6022      	streq	r2, [r4, #0]
 80038ee:	602c      	str	r4, [r5, #0]
 80038f0:	e7ec      	b.n	80038cc <_free_r+0x28>
 80038f2:	461a      	mov	r2, r3
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	b10b      	cbz	r3, 80038fc <_free_r+0x58>
 80038f8:	42a3      	cmp	r3, r4
 80038fa:	d9fa      	bls.n	80038f2 <_free_r+0x4e>
 80038fc:	6811      	ldr	r1, [r2, #0]
 80038fe:	1855      	adds	r5, r2, r1
 8003900:	42a5      	cmp	r5, r4
 8003902:	d10b      	bne.n	800391c <_free_r+0x78>
 8003904:	6824      	ldr	r4, [r4, #0]
 8003906:	4421      	add	r1, r4
 8003908:	1854      	adds	r4, r2, r1
 800390a:	42a3      	cmp	r3, r4
 800390c:	6011      	str	r1, [r2, #0]
 800390e:	d1dd      	bne.n	80038cc <_free_r+0x28>
 8003910:	681c      	ldr	r4, [r3, #0]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	6053      	str	r3, [r2, #4]
 8003916:	4421      	add	r1, r4
 8003918:	6011      	str	r1, [r2, #0]
 800391a:	e7d7      	b.n	80038cc <_free_r+0x28>
 800391c:	d902      	bls.n	8003924 <_free_r+0x80>
 800391e:	230c      	movs	r3, #12
 8003920:	6003      	str	r3, [r0, #0]
 8003922:	e7d3      	b.n	80038cc <_free_r+0x28>
 8003924:	6825      	ldr	r5, [r4, #0]
 8003926:	1961      	adds	r1, r4, r5
 8003928:	428b      	cmp	r3, r1
 800392a:	bf04      	itt	eq
 800392c:	6819      	ldreq	r1, [r3, #0]
 800392e:	685b      	ldreq	r3, [r3, #4]
 8003930:	6063      	str	r3, [r4, #4]
 8003932:	bf04      	itt	eq
 8003934:	1949      	addeq	r1, r1, r5
 8003936:	6021      	streq	r1, [r4, #0]
 8003938:	6054      	str	r4, [r2, #4]
 800393a:	e7c7      	b.n	80038cc <_free_r+0x28>
 800393c:	b003      	add	sp, #12
 800393e:	bd30      	pop	{r4, r5, pc}
 8003940:	200000c0 	.word	0x200000c0

08003944 <_malloc_r>:
 8003944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003946:	1ccd      	adds	r5, r1, #3
 8003948:	f025 0503 	bic.w	r5, r5, #3
 800394c:	3508      	adds	r5, #8
 800394e:	2d0c      	cmp	r5, #12
 8003950:	bf38      	it	cc
 8003952:	250c      	movcc	r5, #12
 8003954:	2d00      	cmp	r5, #0
 8003956:	4606      	mov	r6, r0
 8003958:	db01      	blt.n	800395e <_malloc_r+0x1a>
 800395a:	42a9      	cmp	r1, r5
 800395c:	d903      	bls.n	8003966 <_malloc_r+0x22>
 800395e:	230c      	movs	r3, #12
 8003960:	6033      	str	r3, [r6, #0]
 8003962:	2000      	movs	r0, #0
 8003964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003966:	f000 fd63 	bl	8004430 <__malloc_lock>
 800396a:	4921      	ldr	r1, [pc, #132]	; (80039f0 <_malloc_r+0xac>)
 800396c:	680a      	ldr	r2, [r1, #0]
 800396e:	4614      	mov	r4, r2
 8003970:	b99c      	cbnz	r4, 800399a <_malloc_r+0x56>
 8003972:	4f20      	ldr	r7, [pc, #128]	; (80039f4 <_malloc_r+0xb0>)
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	b923      	cbnz	r3, 8003982 <_malloc_r+0x3e>
 8003978:	4621      	mov	r1, r4
 800397a:	4630      	mov	r0, r6
 800397c:	f000 fc86 	bl	800428c <_sbrk_r>
 8003980:	6038      	str	r0, [r7, #0]
 8003982:	4629      	mov	r1, r5
 8003984:	4630      	mov	r0, r6
 8003986:	f000 fc81 	bl	800428c <_sbrk_r>
 800398a:	1c43      	adds	r3, r0, #1
 800398c:	d123      	bne.n	80039d6 <_malloc_r+0x92>
 800398e:	230c      	movs	r3, #12
 8003990:	6033      	str	r3, [r6, #0]
 8003992:	4630      	mov	r0, r6
 8003994:	f000 fd52 	bl	800443c <__malloc_unlock>
 8003998:	e7e3      	b.n	8003962 <_malloc_r+0x1e>
 800399a:	6823      	ldr	r3, [r4, #0]
 800399c:	1b5b      	subs	r3, r3, r5
 800399e:	d417      	bmi.n	80039d0 <_malloc_r+0x8c>
 80039a0:	2b0b      	cmp	r3, #11
 80039a2:	d903      	bls.n	80039ac <_malloc_r+0x68>
 80039a4:	6023      	str	r3, [r4, #0]
 80039a6:	441c      	add	r4, r3
 80039a8:	6025      	str	r5, [r4, #0]
 80039aa:	e004      	b.n	80039b6 <_malloc_r+0x72>
 80039ac:	6863      	ldr	r3, [r4, #4]
 80039ae:	42a2      	cmp	r2, r4
 80039b0:	bf0c      	ite	eq
 80039b2:	600b      	streq	r3, [r1, #0]
 80039b4:	6053      	strne	r3, [r2, #4]
 80039b6:	4630      	mov	r0, r6
 80039b8:	f000 fd40 	bl	800443c <__malloc_unlock>
 80039bc:	f104 000b 	add.w	r0, r4, #11
 80039c0:	1d23      	adds	r3, r4, #4
 80039c2:	f020 0007 	bic.w	r0, r0, #7
 80039c6:	1ac2      	subs	r2, r0, r3
 80039c8:	d0cc      	beq.n	8003964 <_malloc_r+0x20>
 80039ca:	1a1b      	subs	r3, r3, r0
 80039cc:	50a3      	str	r3, [r4, r2]
 80039ce:	e7c9      	b.n	8003964 <_malloc_r+0x20>
 80039d0:	4622      	mov	r2, r4
 80039d2:	6864      	ldr	r4, [r4, #4]
 80039d4:	e7cc      	b.n	8003970 <_malloc_r+0x2c>
 80039d6:	1cc4      	adds	r4, r0, #3
 80039d8:	f024 0403 	bic.w	r4, r4, #3
 80039dc:	42a0      	cmp	r0, r4
 80039de:	d0e3      	beq.n	80039a8 <_malloc_r+0x64>
 80039e0:	1a21      	subs	r1, r4, r0
 80039e2:	4630      	mov	r0, r6
 80039e4:	f000 fc52 	bl	800428c <_sbrk_r>
 80039e8:	3001      	adds	r0, #1
 80039ea:	d1dd      	bne.n	80039a8 <_malloc_r+0x64>
 80039ec:	e7cf      	b.n	800398e <_malloc_r+0x4a>
 80039ee:	bf00      	nop
 80039f0:	200000c0 	.word	0x200000c0
 80039f4:	200000c4 	.word	0x200000c4

080039f8 <__ssputs_r>:
 80039f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039fc:	688e      	ldr	r6, [r1, #8]
 80039fe:	429e      	cmp	r6, r3
 8003a00:	4682      	mov	sl, r0
 8003a02:	460c      	mov	r4, r1
 8003a04:	4690      	mov	r8, r2
 8003a06:	461f      	mov	r7, r3
 8003a08:	d838      	bhi.n	8003a7c <__ssputs_r+0x84>
 8003a0a:	898a      	ldrh	r2, [r1, #12]
 8003a0c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003a10:	d032      	beq.n	8003a78 <__ssputs_r+0x80>
 8003a12:	6825      	ldr	r5, [r4, #0]
 8003a14:	6909      	ldr	r1, [r1, #16]
 8003a16:	eba5 0901 	sub.w	r9, r5, r1
 8003a1a:	6965      	ldr	r5, [r4, #20]
 8003a1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003a20:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003a24:	3301      	adds	r3, #1
 8003a26:	444b      	add	r3, r9
 8003a28:	106d      	asrs	r5, r5, #1
 8003a2a:	429d      	cmp	r5, r3
 8003a2c:	bf38      	it	cc
 8003a2e:	461d      	movcc	r5, r3
 8003a30:	0553      	lsls	r3, r2, #21
 8003a32:	d531      	bpl.n	8003a98 <__ssputs_r+0xa0>
 8003a34:	4629      	mov	r1, r5
 8003a36:	f7ff ff85 	bl	8003944 <_malloc_r>
 8003a3a:	4606      	mov	r6, r0
 8003a3c:	b950      	cbnz	r0, 8003a54 <__ssputs_r+0x5c>
 8003a3e:	230c      	movs	r3, #12
 8003a40:	f8ca 3000 	str.w	r3, [sl]
 8003a44:	89a3      	ldrh	r3, [r4, #12]
 8003a46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a4a:	81a3      	strh	r3, [r4, #12]
 8003a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a54:	6921      	ldr	r1, [r4, #16]
 8003a56:	464a      	mov	r2, r9
 8003a58:	f000 fcc2 	bl	80043e0 <memcpy>
 8003a5c:	89a3      	ldrh	r3, [r4, #12]
 8003a5e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003a62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a66:	81a3      	strh	r3, [r4, #12]
 8003a68:	6126      	str	r6, [r4, #16]
 8003a6a:	6165      	str	r5, [r4, #20]
 8003a6c:	444e      	add	r6, r9
 8003a6e:	eba5 0509 	sub.w	r5, r5, r9
 8003a72:	6026      	str	r6, [r4, #0]
 8003a74:	60a5      	str	r5, [r4, #8]
 8003a76:	463e      	mov	r6, r7
 8003a78:	42be      	cmp	r6, r7
 8003a7a:	d900      	bls.n	8003a7e <__ssputs_r+0x86>
 8003a7c:	463e      	mov	r6, r7
 8003a7e:	4632      	mov	r2, r6
 8003a80:	6820      	ldr	r0, [r4, #0]
 8003a82:	4641      	mov	r1, r8
 8003a84:	f000 fcba 	bl	80043fc <memmove>
 8003a88:	68a3      	ldr	r3, [r4, #8]
 8003a8a:	6822      	ldr	r2, [r4, #0]
 8003a8c:	1b9b      	subs	r3, r3, r6
 8003a8e:	4432      	add	r2, r6
 8003a90:	60a3      	str	r3, [r4, #8]
 8003a92:	6022      	str	r2, [r4, #0]
 8003a94:	2000      	movs	r0, #0
 8003a96:	e7db      	b.n	8003a50 <__ssputs_r+0x58>
 8003a98:	462a      	mov	r2, r5
 8003a9a:	f000 fcd5 	bl	8004448 <_realloc_r>
 8003a9e:	4606      	mov	r6, r0
 8003aa0:	2800      	cmp	r0, #0
 8003aa2:	d1e1      	bne.n	8003a68 <__ssputs_r+0x70>
 8003aa4:	6921      	ldr	r1, [r4, #16]
 8003aa6:	4650      	mov	r0, sl
 8003aa8:	f7ff fefc 	bl	80038a4 <_free_r>
 8003aac:	e7c7      	b.n	8003a3e <__ssputs_r+0x46>
	...

08003ab0 <_svfiprintf_r>:
 8003ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ab4:	4698      	mov	r8, r3
 8003ab6:	898b      	ldrh	r3, [r1, #12]
 8003ab8:	061b      	lsls	r3, r3, #24
 8003aba:	b09d      	sub	sp, #116	; 0x74
 8003abc:	4607      	mov	r7, r0
 8003abe:	460d      	mov	r5, r1
 8003ac0:	4614      	mov	r4, r2
 8003ac2:	d50e      	bpl.n	8003ae2 <_svfiprintf_r+0x32>
 8003ac4:	690b      	ldr	r3, [r1, #16]
 8003ac6:	b963      	cbnz	r3, 8003ae2 <_svfiprintf_r+0x32>
 8003ac8:	2140      	movs	r1, #64	; 0x40
 8003aca:	f7ff ff3b 	bl	8003944 <_malloc_r>
 8003ace:	6028      	str	r0, [r5, #0]
 8003ad0:	6128      	str	r0, [r5, #16]
 8003ad2:	b920      	cbnz	r0, 8003ade <_svfiprintf_r+0x2e>
 8003ad4:	230c      	movs	r3, #12
 8003ad6:	603b      	str	r3, [r7, #0]
 8003ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8003adc:	e0d1      	b.n	8003c82 <_svfiprintf_r+0x1d2>
 8003ade:	2340      	movs	r3, #64	; 0x40
 8003ae0:	616b      	str	r3, [r5, #20]
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	9309      	str	r3, [sp, #36]	; 0x24
 8003ae6:	2320      	movs	r3, #32
 8003ae8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003aec:	f8cd 800c 	str.w	r8, [sp, #12]
 8003af0:	2330      	movs	r3, #48	; 0x30
 8003af2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003c9c <_svfiprintf_r+0x1ec>
 8003af6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003afa:	f04f 0901 	mov.w	r9, #1
 8003afe:	4623      	mov	r3, r4
 8003b00:	469a      	mov	sl, r3
 8003b02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003b06:	b10a      	cbz	r2, 8003b0c <_svfiprintf_r+0x5c>
 8003b08:	2a25      	cmp	r2, #37	; 0x25
 8003b0a:	d1f9      	bne.n	8003b00 <_svfiprintf_r+0x50>
 8003b0c:	ebba 0b04 	subs.w	fp, sl, r4
 8003b10:	d00b      	beq.n	8003b2a <_svfiprintf_r+0x7a>
 8003b12:	465b      	mov	r3, fp
 8003b14:	4622      	mov	r2, r4
 8003b16:	4629      	mov	r1, r5
 8003b18:	4638      	mov	r0, r7
 8003b1a:	f7ff ff6d 	bl	80039f8 <__ssputs_r>
 8003b1e:	3001      	adds	r0, #1
 8003b20:	f000 80aa 	beq.w	8003c78 <_svfiprintf_r+0x1c8>
 8003b24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003b26:	445a      	add	r2, fp
 8003b28:	9209      	str	r2, [sp, #36]	; 0x24
 8003b2a:	f89a 3000 	ldrb.w	r3, [sl]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	f000 80a2 	beq.w	8003c78 <_svfiprintf_r+0x1c8>
 8003b34:	2300      	movs	r3, #0
 8003b36:	f04f 32ff 	mov.w	r2, #4294967295
 8003b3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b3e:	f10a 0a01 	add.w	sl, sl, #1
 8003b42:	9304      	str	r3, [sp, #16]
 8003b44:	9307      	str	r3, [sp, #28]
 8003b46:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003b4a:	931a      	str	r3, [sp, #104]	; 0x68
 8003b4c:	4654      	mov	r4, sl
 8003b4e:	2205      	movs	r2, #5
 8003b50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b54:	4851      	ldr	r0, [pc, #324]	; (8003c9c <_svfiprintf_r+0x1ec>)
 8003b56:	f7fc fb43 	bl	80001e0 <memchr>
 8003b5a:	9a04      	ldr	r2, [sp, #16]
 8003b5c:	b9d8      	cbnz	r0, 8003b96 <_svfiprintf_r+0xe6>
 8003b5e:	06d0      	lsls	r0, r2, #27
 8003b60:	bf44      	itt	mi
 8003b62:	2320      	movmi	r3, #32
 8003b64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b68:	0711      	lsls	r1, r2, #28
 8003b6a:	bf44      	itt	mi
 8003b6c:	232b      	movmi	r3, #43	; 0x2b
 8003b6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b72:	f89a 3000 	ldrb.w	r3, [sl]
 8003b76:	2b2a      	cmp	r3, #42	; 0x2a
 8003b78:	d015      	beq.n	8003ba6 <_svfiprintf_r+0xf6>
 8003b7a:	9a07      	ldr	r2, [sp, #28]
 8003b7c:	4654      	mov	r4, sl
 8003b7e:	2000      	movs	r0, #0
 8003b80:	f04f 0c0a 	mov.w	ip, #10
 8003b84:	4621      	mov	r1, r4
 8003b86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b8a:	3b30      	subs	r3, #48	; 0x30
 8003b8c:	2b09      	cmp	r3, #9
 8003b8e:	d94e      	bls.n	8003c2e <_svfiprintf_r+0x17e>
 8003b90:	b1b0      	cbz	r0, 8003bc0 <_svfiprintf_r+0x110>
 8003b92:	9207      	str	r2, [sp, #28]
 8003b94:	e014      	b.n	8003bc0 <_svfiprintf_r+0x110>
 8003b96:	eba0 0308 	sub.w	r3, r0, r8
 8003b9a:	fa09 f303 	lsl.w	r3, r9, r3
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	9304      	str	r3, [sp, #16]
 8003ba2:	46a2      	mov	sl, r4
 8003ba4:	e7d2      	b.n	8003b4c <_svfiprintf_r+0x9c>
 8003ba6:	9b03      	ldr	r3, [sp, #12]
 8003ba8:	1d19      	adds	r1, r3, #4
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	9103      	str	r1, [sp, #12]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	bfbb      	ittet	lt
 8003bb2:	425b      	neglt	r3, r3
 8003bb4:	f042 0202 	orrlt.w	r2, r2, #2
 8003bb8:	9307      	strge	r3, [sp, #28]
 8003bba:	9307      	strlt	r3, [sp, #28]
 8003bbc:	bfb8      	it	lt
 8003bbe:	9204      	strlt	r2, [sp, #16]
 8003bc0:	7823      	ldrb	r3, [r4, #0]
 8003bc2:	2b2e      	cmp	r3, #46	; 0x2e
 8003bc4:	d10c      	bne.n	8003be0 <_svfiprintf_r+0x130>
 8003bc6:	7863      	ldrb	r3, [r4, #1]
 8003bc8:	2b2a      	cmp	r3, #42	; 0x2a
 8003bca:	d135      	bne.n	8003c38 <_svfiprintf_r+0x188>
 8003bcc:	9b03      	ldr	r3, [sp, #12]
 8003bce:	1d1a      	adds	r2, r3, #4
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	9203      	str	r2, [sp, #12]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	bfb8      	it	lt
 8003bd8:	f04f 33ff 	movlt.w	r3, #4294967295
 8003bdc:	3402      	adds	r4, #2
 8003bde:	9305      	str	r3, [sp, #20]
 8003be0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003cac <_svfiprintf_r+0x1fc>
 8003be4:	7821      	ldrb	r1, [r4, #0]
 8003be6:	2203      	movs	r2, #3
 8003be8:	4650      	mov	r0, sl
 8003bea:	f7fc faf9 	bl	80001e0 <memchr>
 8003bee:	b140      	cbz	r0, 8003c02 <_svfiprintf_r+0x152>
 8003bf0:	2340      	movs	r3, #64	; 0x40
 8003bf2:	eba0 000a 	sub.w	r0, r0, sl
 8003bf6:	fa03 f000 	lsl.w	r0, r3, r0
 8003bfa:	9b04      	ldr	r3, [sp, #16]
 8003bfc:	4303      	orrs	r3, r0
 8003bfe:	3401      	adds	r4, #1
 8003c00:	9304      	str	r3, [sp, #16]
 8003c02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c06:	4826      	ldr	r0, [pc, #152]	; (8003ca0 <_svfiprintf_r+0x1f0>)
 8003c08:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003c0c:	2206      	movs	r2, #6
 8003c0e:	f7fc fae7 	bl	80001e0 <memchr>
 8003c12:	2800      	cmp	r0, #0
 8003c14:	d038      	beq.n	8003c88 <_svfiprintf_r+0x1d8>
 8003c16:	4b23      	ldr	r3, [pc, #140]	; (8003ca4 <_svfiprintf_r+0x1f4>)
 8003c18:	bb1b      	cbnz	r3, 8003c62 <_svfiprintf_r+0x1b2>
 8003c1a:	9b03      	ldr	r3, [sp, #12]
 8003c1c:	3307      	adds	r3, #7
 8003c1e:	f023 0307 	bic.w	r3, r3, #7
 8003c22:	3308      	adds	r3, #8
 8003c24:	9303      	str	r3, [sp, #12]
 8003c26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c28:	4433      	add	r3, r6
 8003c2a:	9309      	str	r3, [sp, #36]	; 0x24
 8003c2c:	e767      	b.n	8003afe <_svfiprintf_r+0x4e>
 8003c2e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003c32:	460c      	mov	r4, r1
 8003c34:	2001      	movs	r0, #1
 8003c36:	e7a5      	b.n	8003b84 <_svfiprintf_r+0xd4>
 8003c38:	2300      	movs	r3, #0
 8003c3a:	3401      	adds	r4, #1
 8003c3c:	9305      	str	r3, [sp, #20]
 8003c3e:	4619      	mov	r1, r3
 8003c40:	f04f 0c0a 	mov.w	ip, #10
 8003c44:	4620      	mov	r0, r4
 8003c46:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c4a:	3a30      	subs	r2, #48	; 0x30
 8003c4c:	2a09      	cmp	r2, #9
 8003c4e:	d903      	bls.n	8003c58 <_svfiprintf_r+0x1a8>
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d0c5      	beq.n	8003be0 <_svfiprintf_r+0x130>
 8003c54:	9105      	str	r1, [sp, #20]
 8003c56:	e7c3      	b.n	8003be0 <_svfiprintf_r+0x130>
 8003c58:	fb0c 2101 	mla	r1, ip, r1, r2
 8003c5c:	4604      	mov	r4, r0
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e7f0      	b.n	8003c44 <_svfiprintf_r+0x194>
 8003c62:	ab03      	add	r3, sp, #12
 8003c64:	9300      	str	r3, [sp, #0]
 8003c66:	462a      	mov	r2, r5
 8003c68:	4b0f      	ldr	r3, [pc, #60]	; (8003ca8 <_svfiprintf_r+0x1f8>)
 8003c6a:	a904      	add	r1, sp, #16
 8003c6c:	4638      	mov	r0, r7
 8003c6e:	f3af 8000 	nop.w
 8003c72:	1c42      	adds	r2, r0, #1
 8003c74:	4606      	mov	r6, r0
 8003c76:	d1d6      	bne.n	8003c26 <_svfiprintf_r+0x176>
 8003c78:	89ab      	ldrh	r3, [r5, #12]
 8003c7a:	065b      	lsls	r3, r3, #25
 8003c7c:	f53f af2c 	bmi.w	8003ad8 <_svfiprintf_r+0x28>
 8003c80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003c82:	b01d      	add	sp, #116	; 0x74
 8003c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c88:	ab03      	add	r3, sp, #12
 8003c8a:	9300      	str	r3, [sp, #0]
 8003c8c:	462a      	mov	r2, r5
 8003c8e:	4b06      	ldr	r3, [pc, #24]	; (8003ca8 <_svfiprintf_r+0x1f8>)
 8003c90:	a904      	add	r1, sp, #16
 8003c92:	4638      	mov	r0, r7
 8003c94:	f000 f9d4 	bl	8004040 <_printf_i>
 8003c98:	e7eb      	b.n	8003c72 <_svfiprintf_r+0x1c2>
 8003c9a:	bf00      	nop
 8003c9c:	080046f4 	.word	0x080046f4
 8003ca0:	080046fe 	.word	0x080046fe
 8003ca4:	00000000 	.word	0x00000000
 8003ca8:	080039f9 	.word	0x080039f9
 8003cac:	080046fa 	.word	0x080046fa

08003cb0 <__sfputc_r>:
 8003cb0:	6893      	ldr	r3, [r2, #8]
 8003cb2:	3b01      	subs	r3, #1
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	b410      	push	{r4}
 8003cb8:	6093      	str	r3, [r2, #8]
 8003cba:	da08      	bge.n	8003cce <__sfputc_r+0x1e>
 8003cbc:	6994      	ldr	r4, [r2, #24]
 8003cbe:	42a3      	cmp	r3, r4
 8003cc0:	db01      	blt.n	8003cc6 <__sfputc_r+0x16>
 8003cc2:	290a      	cmp	r1, #10
 8003cc4:	d103      	bne.n	8003cce <__sfputc_r+0x1e>
 8003cc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003cca:	f7ff bb0d 	b.w	80032e8 <__swbuf_r>
 8003cce:	6813      	ldr	r3, [r2, #0]
 8003cd0:	1c58      	adds	r0, r3, #1
 8003cd2:	6010      	str	r0, [r2, #0]
 8003cd4:	7019      	strb	r1, [r3, #0]
 8003cd6:	4608      	mov	r0, r1
 8003cd8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003cdc:	4770      	bx	lr

08003cde <__sfputs_r>:
 8003cde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ce0:	4606      	mov	r6, r0
 8003ce2:	460f      	mov	r7, r1
 8003ce4:	4614      	mov	r4, r2
 8003ce6:	18d5      	adds	r5, r2, r3
 8003ce8:	42ac      	cmp	r4, r5
 8003cea:	d101      	bne.n	8003cf0 <__sfputs_r+0x12>
 8003cec:	2000      	movs	r0, #0
 8003cee:	e007      	b.n	8003d00 <__sfputs_r+0x22>
 8003cf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003cf4:	463a      	mov	r2, r7
 8003cf6:	4630      	mov	r0, r6
 8003cf8:	f7ff ffda 	bl	8003cb0 <__sfputc_r>
 8003cfc:	1c43      	adds	r3, r0, #1
 8003cfe:	d1f3      	bne.n	8003ce8 <__sfputs_r+0xa>
 8003d00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003d04 <_vfiprintf_r>:
 8003d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d08:	460d      	mov	r5, r1
 8003d0a:	b09d      	sub	sp, #116	; 0x74
 8003d0c:	4614      	mov	r4, r2
 8003d0e:	4698      	mov	r8, r3
 8003d10:	4606      	mov	r6, r0
 8003d12:	b118      	cbz	r0, 8003d1c <_vfiprintf_r+0x18>
 8003d14:	6983      	ldr	r3, [r0, #24]
 8003d16:	b90b      	cbnz	r3, 8003d1c <_vfiprintf_r+0x18>
 8003d18:	f7ff fcc0 	bl	800369c <__sinit>
 8003d1c:	4b89      	ldr	r3, [pc, #548]	; (8003f44 <_vfiprintf_r+0x240>)
 8003d1e:	429d      	cmp	r5, r3
 8003d20:	d11b      	bne.n	8003d5a <_vfiprintf_r+0x56>
 8003d22:	6875      	ldr	r5, [r6, #4]
 8003d24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003d26:	07d9      	lsls	r1, r3, #31
 8003d28:	d405      	bmi.n	8003d36 <_vfiprintf_r+0x32>
 8003d2a:	89ab      	ldrh	r3, [r5, #12]
 8003d2c:	059a      	lsls	r2, r3, #22
 8003d2e:	d402      	bmi.n	8003d36 <_vfiprintf_r+0x32>
 8003d30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003d32:	f7ff fd51 	bl	80037d8 <__retarget_lock_acquire_recursive>
 8003d36:	89ab      	ldrh	r3, [r5, #12]
 8003d38:	071b      	lsls	r3, r3, #28
 8003d3a:	d501      	bpl.n	8003d40 <_vfiprintf_r+0x3c>
 8003d3c:	692b      	ldr	r3, [r5, #16]
 8003d3e:	b9eb      	cbnz	r3, 8003d7c <_vfiprintf_r+0x78>
 8003d40:	4629      	mov	r1, r5
 8003d42:	4630      	mov	r0, r6
 8003d44:	f7ff fb22 	bl	800338c <__swsetup_r>
 8003d48:	b1c0      	cbz	r0, 8003d7c <_vfiprintf_r+0x78>
 8003d4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003d4c:	07dc      	lsls	r4, r3, #31
 8003d4e:	d50e      	bpl.n	8003d6e <_vfiprintf_r+0x6a>
 8003d50:	f04f 30ff 	mov.w	r0, #4294967295
 8003d54:	b01d      	add	sp, #116	; 0x74
 8003d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d5a:	4b7b      	ldr	r3, [pc, #492]	; (8003f48 <_vfiprintf_r+0x244>)
 8003d5c:	429d      	cmp	r5, r3
 8003d5e:	d101      	bne.n	8003d64 <_vfiprintf_r+0x60>
 8003d60:	68b5      	ldr	r5, [r6, #8]
 8003d62:	e7df      	b.n	8003d24 <_vfiprintf_r+0x20>
 8003d64:	4b79      	ldr	r3, [pc, #484]	; (8003f4c <_vfiprintf_r+0x248>)
 8003d66:	429d      	cmp	r5, r3
 8003d68:	bf08      	it	eq
 8003d6a:	68f5      	ldreq	r5, [r6, #12]
 8003d6c:	e7da      	b.n	8003d24 <_vfiprintf_r+0x20>
 8003d6e:	89ab      	ldrh	r3, [r5, #12]
 8003d70:	0598      	lsls	r0, r3, #22
 8003d72:	d4ed      	bmi.n	8003d50 <_vfiprintf_r+0x4c>
 8003d74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003d76:	f7ff fd30 	bl	80037da <__retarget_lock_release_recursive>
 8003d7a:	e7e9      	b.n	8003d50 <_vfiprintf_r+0x4c>
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	9309      	str	r3, [sp, #36]	; 0x24
 8003d80:	2320      	movs	r3, #32
 8003d82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003d86:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d8a:	2330      	movs	r3, #48	; 0x30
 8003d8c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003f50 <_vfiprintf_r+0x24c>
 8003d90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003d94:	f04f 0901 	mov.w	r9, #1
 8003d98:	4623      	mov	r3, r4
 8003d9a:	469a      	mov	sl, r3
 8003d9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003da0:	b10a      	cbz	r2, 8003da6 <_vfiprintf_r+0xa2>
 8003da2:	2a25      	cmp	r2, #37	; 0x25
 8003da4:	d1f9      	bne.n	8003d9a <_vfiprintf_r+0x96>
 8003da6:	ebba 0b04 	subs.w	fp, sl, r4
 8003daa:	d00b      	beq.n	8003dc4 <_vfiprintf_r+0xc0>
 8003dac:	465b      	mov	r3, fp
 8003dae:	4622      	mov	r2, r4
 8003db0:	4629      	mov	r1, r5
 8003db2:	4630      	mov	r0, r6
 8003db4:	f7ff ff93 	bl	8003cde <__sfputs_r>
 8003db8:	3001      	adds	r0, #1
 8003dba:	f000 80aa 	beq.w	8003f12 <_vfiprintf_r+0x20e>
 8003dbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003dc0:	445a      	add	r2, fp
 8003dc2:	9209      	str	r2, [sp, #36]	; 0x24
 8003dc4:	f89a 3000 	ldrb.w	r3, [sl]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	f000 80a2 	beq.w	8003f12 <_vfiprintf_r+0x20e>
 8003dce:	2300      	movs	r3, #0
 8003dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8003dd4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003dd8:	f10a 0a01 	add.w	sl, sl, #1
 8003ddc:	9304      	str	r3, [sp, #16]
 8003dde:	9307      	str	r3, [sp, #28]
 8003de0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003de4:	931a      	str	r3, [sp, #104]	; 0x68
 8003de6:	4654      	mov	r4, sl
 8003de8:	2205      	movs	r2, #5
 8003dea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003dee:	4858      	ldr	r0, [pc, #352]	; (8003f50 <_vfiprintf_r+0x24c>)
 8003df0:	f7fc f9f6 	bl	80001e0 <memchr>
 8003df4:	9a04      	ldr	r2, [sp, #16]
 8003df6:	b9d8      	cbnz	r0, 8003e30 <_vfiprintf_r+0x12c>
 8003df8:	06d1      	lsls	r1, r2, #27
 8003dfa:	bf44      	itt	mi
 8003dfc:	2320      	movmi	r3, #32
 8003dfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e02:	0713      	lsls	r3, r2, #28
 8003e04:	bf44      	itt	mi
 8003e06:	232b      	movmi	r3, #43	; 0x2b
 8003e08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e0c:	f89a 3000 	ldrb.w	r3, [sl]
 8003e10:	2b2a      	cmp	r3, #42	; 0x2a
 8003e12:	d015      	beq.n	8003e40 <_vfiprintf_r+0x13c>
 8003e14:	9a07      	ldr	r2, [sp, #28]
 8003e16:	4654      	mov	r4, sl
 8003e18:	2000      	movs	r0, #0
 8003e1a:	f04f 0c0a 	mov.w	ip, #10
 8003e1e:	4621      	mov	r1, r4
 8003e20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e24:	3b30      	subs	r3, #48	; 0x30
 8003e26:	2b09      	cmp	r3, #9
 8003e28:	d94e      	bls.n	8003ec8 <_vfiprintf_r+0x1c4>
 8003e2a:	b1b0      	cbz	r0, 8003e5a <_vfiprintf_r+0x156>
 8003e2c:	9207      	str	r2, [sp, #28]
 8003e2e:	e014      	b.n	8003e5a <_vfiprintf_r+0x156>
 8003e30:	eba0 0308 	sub.w	r3, r0, r8
 8003e34:	fa09 f303 	lsl.w	r3, r9, r3
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	9304      	str	r3, [sp, #16]
 8003e3c:	46a2      	mov	sl, r4
 8003e3e:	e7d2      	b.n	8003de6 <_vfiprintf_r+0xe2>
 8003e40:	9b03      	ldr	r3, [sp, #12]
 8003e42:	1d19      	adds	r1, r3, #4
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	9103      	str	r1, [sp, #12]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	bfbb      	ittet	lt
 8003e4c:	425b      	neglt	r3, r3
 8003e4e:	f042 0202 	orrlt.w	r2, r2, #2
 8003e52:	9307      	strge	r3, [sp, #28]
 8003e54:	9307      	strlt	r3, [sp, #28]
 8003e56:	bfb8      	it	lt
 8003e58:	9204      	strlt	r2, [sp, #16]
 8003e5a:	7823      	ldrb	r3, [r4, #0]
 8003e5c:	2b2e      	cmp	r3, #46	; 0x2e
 8003e5e:	d10c      	bne.n	8003e7a <_vfiprintf_r+0x176>
 8003e60:	7863      	ldrb	r3, [r4, #1]
 8003e62:	2b2a      	cmp	r3, #42	; 0x2a
 8003e64:	d135      	bne.n	8003ed2 <_vfiprintf_r+0x1ce>
 8003e66:	9b03      	ldr	r3, [sp, #12]
 8003e68:	1d1a      	adds	r2, r3, #4
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	9203      	str	r2, [sp, #12]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	bfb8      	it	lt
 8003e72:	f04f 33ff 	movlt.w	r3, #4294967295
 8003e76:	3402      	adds	r4, #2
 8003e78:	9305      	str	r3, [sp, #20]
 8003e7a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003f60 <_vfiprintf_r+0x25c>
 8003e7e:	7821      	ldrb	r1, [r4, #0]
 8003e80:	2203      	movs	r2, #3
 8003e82:	4650      	mov	r0, sl
 8003e84:	f7fc f9ac 	bl	80001e0 <memchr>
 8003e88:	b140      	cbz	r0, 8003e9c <_vfiprintf_r+0x198>
 8003e8a:	2340      	movs	r3, #64	; 0x40
 8003e8c:	eba0 000a 	sub.w	r0, r0, sl
 8003e90:	fa03 f000 	lsl.w	r0, r3, r0
 8003e94:	9b04      	ldr	r3, [sp, #16]
 8003e96:	4303      	orrs	r3, r0
 8003e98:	3401      	adds	r4, #1
 8003e9a:	9304      	str	r3, [sp, #16]
 8003e9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ea0:	482c      	ldr	r0, [pc, #176]	; (8003f54 <_vfiprintf_r+0x250>)
 8003ea2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003ea6:	2206      	movs	r2, #6
 8003ea8:	f7fc f99a 	bl	80001e0 <memchr>
 8003eac:	2800      	cmp	r0, #0
 8003eae:	d03f      	beq.n	8003f30 <_vfiprintf_r+0x22c>
 8003eb0:	4b29      	ldr	r3, [pc, #164]	; (8003f58 <_vfiprintf_r+0x254>)
 8003eb2:	bb1b      	cbnz	r3, 8003efc <_vfiprintf_r+0x1f8>
 8003eb4:	9b03      	ldr	r3, [sp, #12]
 8003eb6:	3307      	adds	r3, #7
 8003eb8:	f023 0307 	bic.w	r3, r3, #7
 8003ebc:	3308      	adds	r3, #8
 8003ebe:	9303      	str	r3, [sp, #12]
 8003ec0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ec2:	443b      	add	r3, r7
 8003ec4:	9309      	str	r3, [sp, #36]	; 0x24
 8003ec6:	e767      	b.n	8003d98 <_vfiprintf_r+0x94>
 8003ec8:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ecc:	460c      	mov	r4, r1
 8003ece:	2001      	movs	r0, #1
 8003ed0:	e7a5      	b.n	8003e1e <_vfiprintf_r+0x11a>
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	3401      	adds	r4, #1
 8003ed6:	9305      	str	r3, [sp, #20]
 8003ed8:	4619      	mov	r1, r3
 8003eda:	f04f 0c0a 	mov.w	ip, #10
 8003ede:	4620      	mov	r0, r4
 8003ee0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ee4:	3a30      	subs	r2, #48	; 0x30
 8003ee6:	2a09      	cmp	r2, #9
 8003ee8:	d903      	bls.n	8003ef2 <_vfiprintf_r+0x1ee>
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d0c5      	beq.n	8003e7a <_vfiprintf_r+0x176>
 8003eee:	9105      	str	r1, [sp, #20]
 8003ef0:	e7c3      	b.n	8003e7a <_vfiprintf_r+0x176>
 8003ef2:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ef6:	4604      	mov	r4, r0
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e7f0      	b.n	8003ede <_vfiprintf_r+0x1da>
 8003efc:	ab03      	add	r3, sp, #12
 8003efe:	9300      	str	r3, [sp, #0]
 8003f00:	462a      	mov	r2, r5
 8003f02:	4b16      	ldr	r3, [pc, #88]	; (8003f5c <_vfiprintf_r+0x258>)
 8003f04:	a904      	add	r1, sp, #16
 8003f06:	4630      	mov	r0, r6
 8003f08:	f3af 8000 	nop.w
 8003f0c:	4607      	mov	r7, r0
 8003f0e:	1c78      	adds	r0, r7, #1
 8003f10:	d1d6      	bne.n	8003ec0 <_vfiprintf_r+0x1bc>
 8003f12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003f14:	07d9      	lsls	r1, r3, #31
 8003f16:	d405      	bmi.n	8003f24 <_vfiprintf_r+0x220>
 8003f18:	89ab      	ldrh	r3, [r5, #12]
 8003f1a:	059a      	lsls	r2, r3, #22
 8003f1c:	d402      	bmi.n	8003f24 <_vfiprintf_r+0x220>
 8003f1e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003f20:	f7ff fc5b 	bl	80037da <__retarget_lock_release_recursive>
 8003f24:	89ab      	ldrh	r3, [r5, #12]
 8003f26:	065b      	lsls	r3, r3, #25
 8003f28:	f53f af12 	bmi.w	8003d50 <_vfiprintf_r+0x4c>
 8003f2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003f2e:	e711      	b.n	8003d54 <_vfiprintf_r+0x50>
 8003f30:	ab03      	add	r3, sp, #12
 8003f32:	9300      	str	r3, [sp, #0]
 8003f34:	462a      	mov	r2, r5
 8003f36:	4b09      	ldr	r3, [pc, #36]	; (8003f5c <_vfiprintf_r+0x258>)
 8003f38:	a904      	add	r1, sp, #16
 8003f3a:	4630      	mov	r0, r6
 8003f3c:	f000 f880 	bl	8004040 <_printf_i>
 8003f40:	e7e4      	b.n	8003f0c <_vfiprintf_r+0x208>
 8003f42:	bf00      	nop
 8003f44:	080046b4 	.word	0x080046b4
 8003f48:	080046d4 	.word	0x080046d4
 8003f4c:	08004694 	.word	0x08004694
 8003f50:	080046f4 	.word	0x080046f4
 8003f54:	080046fe 	.word	0x080046fe
 8003f58:	00000000 	.word	0x00000000
 8003f5c:	08003cdf 	.word	0x08003cdf
 8003f60:	080046fa 	.word	0x080046fa

08003f64 <_printf_common>:
 8003f64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f68:	4616      	mov	r6, r2
 8003f6a:	4699      	mov	r9, r3
 8003f6c:	688a      	ldr	r2, [r1, #8]
 8003f6e:	690b      	ldr	r3, [r1, #16]
 8003f70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f74:	4293      	cmp	r3, r2
 8003f76:	bfb8      	it	lt
 8003f78:	4613      	movlt	r3, r2
 8003f7a:	6033      	str	r3, [r6, #0]
 8003f7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f80:	4607      	mov	r7, r0
 8003f82:	460c      	mov	r4, r1
 8003f84:	b10a      	cbz	r2, 8003f8a <_printf_common+0x26>
 8003f86:	3301      	adds	r3, #1
 8003f88:	6033      	str	r3, [r6, #0]
 8003f8a:	6823      	ldr	r3, [r4, #0]
 8003f8c:	0699      	lsls	r1, r3, #26
 8003f8e:	bf42      	ittt	mi
 8003f90:	6833      	ldrmi	r3, [r6, #0]
 8003f92:	3302      	addmi	r3, #2
 8003f94:	6033      	strmi	r3, [r6, #0]
 8003f96:	6825      	ldr	r5, [r4, #0]
 8003f98:	f015 0506 	ands.w	r5, r5, #6
 8003f9c:	d106      	bne.n	8003fac <_printf_common+0x48>
 8003f9e:	f104 0a19 	add.w	sl, r4, #25
 8003fa2:	68e3      	ldr	r3, [r4, #12]
 8003fa4:	6832      	ldr	r2, [r6, #0]
 8003fa6:	1a9b      	subs	r3, r3, r2
 8003fa8:	42ab      	cmp	r3, r5
 8003faa:	dc26      	bgt.n	8003ffa <_printf_common+0x96>
 8003fac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003fb0:	1e13      	subs	r3, r2, #0
 8003fb2:	6822      	ldr	r2, [r4, #0]
 8003fb4:	bf18      	it	ne
 8003fb6:	2301      	movne	r3, #1
 8003fb8:	0692      	lsls	r2, r2, #26
 8003fba:	d42b      	bmi.n	8004014 <_printf_common+0xb0>
 8003fbc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003fc0:	4649      	mov	r1, r9
 8003fc2:	4638      	mov	r0, r7
 8003fc4:	47c0      	blx	r8
 8003fc6:	3001      	adds	r0, #1
 8003fc8:	d01e      	beq.n	8004008 <_printf_common+0xa4>
 8003fca:	6823      	ldr	r3, [r4, #0]
 8003fcc:	68e5      	ldr	r5, [r4, #12]
 8003fce:	6832      	ldr	r2, [r6, #0]
 8003fd0:	f003 0306 	and.w	r3, r3, #6
 8003fd4:	2b04      	cmp	r3, #4
 8003fd6:	bf08      	it	eq
 8003fd8:	1aad      	subeq	r5, r5, r2
 8003fda:	68a3      	ldr	r3, [r4, #8]
 8003fdc:	6922      	ldr	r2, [r4, #16]
 8003fde:	bf0c      	ite	eq
 8003fe0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003fe4:	2500      	movne	r5, #0
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	bfc4      	itt	gt
 8003fea:	1a9b      	subgt	r3, r3, r2
 8003fec:	18ed      	addgt	r5, r5, r3
 8003fee:	2600      	movs	r6, #0
 8003ff0:	341a      	adds	r4, #26
 8003ff2:	42b5      	cmp	r5, r6
 8003ff4:	d11a      	bne.n	800402c <_printf_common+0xc8>
 8003ff6:	2000      	movs	r0, #0
 8003ff8:	e008      	b.n	800400c <_printf_common+0xa8>
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	4652      	mov	r2, sl
 8003ffe:	4649      	mov	r1, r9
 8004000:	4638      	mov	r0, r7
 8004002:	47c0      	blx	r8
 8004004:	3001      	adds	r0, #1
 8004006:	d103      	bne.n	8004010 <_printf_common+0xac>
 8004008:	f04f 30ff 	mov.w	r0, #4294967295
 800400c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004010:	3501      	adds	r5, #1
 8004012:	e7c6      	b.n	8003fa2 <_printf_common+0x3e>
 8004014:	18e1      	adds	r1, r4, r3
 8004016:	1c5a      	adds	r2, r3, #1
 8004018:	2030      	movs	r0, #48	; 0x30
 800401a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800401e:	4422      	add	r2, r4
 8004020:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004024:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004028:	3302      	adds	r3, #2
 800402a:	e7c7      	b.n	8003fbc <_printf_common+0x58>
 800402c:	2301      	movs	r3, #1
 800402e:	4622      	mov	r2, r4
 8004030:	4649      	mov	r1, r9
 8004032:	4638      	mov	r0, r7
 8004034:	47c0      	blx	r8
 8004036:	3001      	adds	r0, #1
 8004038:	d0e6      	beq.n	8004008 <_printf_common+0xa4>
 800403a:	3601      	adds	r6, #1
 800403c:	e7d9      	b.n	8003ff2 <_printf_common+0x8e>
	...

08004040 <_printf_i>:
 8004040:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004044:	460c      	mov	r4, r1
 8004046:	4691      	mov	r9, r2
 8004048:	7e27      	ldrb	r7, [r4, #24]
 800404a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800404c:	2f78      	cmp	r7, #120	; 0x78
 800404e:	4680      	mov	r8, r0
 8004050:	469a      	mov	sl, r3
 8004052:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004056:	d807      	bhi.n	8004068 <_printf_i+0x28>
 8004058:	2f62      	cmp	r7, #98	; 0x62
 800405a:	d80a      	bhi.n	8004072 <_printf_i+0x32>
 800405c:	2f00      	cmp	r7, #0
 800405e:	f000 80d8 	beq.w	8004212 <_printf_i+0x1d2>
 8004062:	2f58      	cmp	r7, #88	; 0x58
 8004064:	f000 80a3 	beq.w	80041ae <_printf_i+0x16e>
 8004068:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800406c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004070:	e03a      	b.n	80040e8 <_printf_i+0xa8>
 8004072:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004076:	2b15      	cmp	r3, #21
 8004078:	d8f6      	bhi.n	8004068 <_printf_i+0x28>
 800407a:	a001      	add	r0, pc, #4	; (adr r0, 8004080 <_printf_i+0x40>)
 800407c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004080:	080040d9 	.word	0x080040d9
 8004084:	080040ed 	.word	0x080040ed
 8004088:	08004069 	.word	0x08004069
 800408c:	08004069 	.word	0x08004069
 8004090:	08004069 	.word	0x08004069
 8004094:	08004069 	.word	0x08004069
 8004098:	080040ed 	.word	0x080040ed
 800409c:	08004069 	.word	0x08004069
 80040a0:	08004069 	.word	0x08004069
 80040a4:	08004069 	.word	0x08004069
 80040a8:	08004069 	.word	0x08004069
 80040ac:	080041f9 	.word	0x080041f9
 80040b0:	0800411d 	.word	0x0800411d
 80040b4:	080041db 	.word	0x080041db
 80040b8:	08004069 	.word	0x08004069
 80040bc:	08004069 	.word	0x08004069
 80040c0:	0800421b 	.word	0x0800421b
 80040c4:	08004069 	.word	0x08004069
 80040c8:	0800411d 	.word	0x0800411d
 80040cc:	08004069 	.word	0x08004069
 80040d0:	08004069 	.word	0x08004069
 80040d4:	080041e3 	.word	0x080041e3
 80040d8:	680b      	ldr	r3, [r1, #0]
 80040da:	1d1a      	adds	r2, r3, #4
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	600a      	str	r2, [r1, #0]
 80040e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80040e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80040e8:	2301      	movs	r3, #1
 80040ea:	e0a3      	b.n	8004234 <_printf_i+0x1f4>
 80040ec:	6825      	ldr	r5, [r4, #0]
 80040ee:	6808      	ldr	r0, [r1, #0]
 80040f0:	062e      	lsls	r6, r5, #24
 80040f2:	f100 0304 	add.w	r3, r0, #4
 80040f6:	d50a      	bpl.n	800410e <_printf_i+0xce>
 80040f8:	6805      	ldr	r5, [r0, #0]
 80040fa:	600b      	str	r3, [r1, #0]
 80040fc:	2d00      	cmp	r5, #0
 80040fe:	da03      	bge.n	8004108 <_printf_i+0xc8>
 8004100:	232d      	movs	r3, #45	; 0x2d
 8004102:	426d      	negs	r5, r5
 8004104:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004108:	485e      	ldr	r0, [pc, #376]	; (8004284 <_printf_i+0x244>)
 800410a:	230a      	movs	r3, #10
 800410c:	e019      	b.n	8004142 <_printf_i+0x102>
 800410e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004112:	6805      	ldr	r5, [r0, #0]
 8004114:	600b      	str	r3, [r1, #0]
 8004116:	bf18      	it	ne
 8004118:	b22d      	sxthne	r5, r5
 800411a:	e7ef      	b.n	80040fc <_printf_i+0xbc>
 800411c:	680b      	ldr	r3, [r1, #0]
 800411e:	6825      	ldr	r5, [r4, #0]
 8004120:	1d18      	adds	r0, r3, #4
 8004122:	6008      	str	r0, [r1, #0]
 8004124:	0628      	lsls	r0, r5, #24
 8004126:	d501      	bpl.n	800412c <_printf_i+0xec>
 8004128:	681d      	ldr	r5, [r3, #0]
 800412a:	e002      	b.n	8004132 <_printf_i+0xf2>
 800412c:	0669      	lsls	r1, r5, #25
 800412e:	d5fb      	bpl.n	8004128 <_printf_i+0xe8>
 8004130:	881d      	ldrh	r5, [r3, #0]
 8004132:	4854      	ldr	r0, [pc, #336]	; (8004284 <_printf_i+0x244>)
 8004134:	2f6f      	cmp	r7, #111	; 0x6f
 8004136:	bf0c      	ite	eq
 8004138:	2308      	moveq	r3, #8
 800413a:	230a      	movne	r3, #10
 800413c:	2100      	movs	r1, #0
 800413e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004142:	6866      	ldr	r6, [r4, #4]
 8004144:	60a6      	str	r6, [r4, #8]
 8004146:	2e00      	cmp	r6, #0
 8004148:	bfa2      	ittt	ge
 800414a:	6821      	ldrge	r1, [r4, #0]
 800414c:	f021 0104 	bicge.w	r1, r1, #4
 8004150:	6021      	strge	r1, [r4, #0]
 8004152:	b90d      	cbnz	r5, 8004158 <_printf_i+0x118>
 8004154:	2e00      	cmp	r6, #0
 8004156:	d04d      	beq.n	80041f4 <_printf_i+0x1b4>
 8004158:	4616      	mov	r6, r2
 800415a:	fbb5 f1f3 	udiv	r1, r5, r3
 800415e:	fb03 5711 	mls	r7, r3, r1, r5
 8004162:	5dc7      	ldrb	r7, [r0, r7]
 8004164:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004168:	462f      	mov	r7, r5
 800416a:	42bb      	cmp	r3, r7
 800416c:	460d      	mov	r5, r1
 800416e:	d9f4      	bls.n	800415a <_printf_i+0x11a>
 8004170:	2b08      	cmp	r3, #8
 8004172:	d10b      	bne.n	800418c <_printf_i+0x14c>
 8004174:	6823      	ldr	r3, [r4, #0]
 8004176:	07df      	lsls	r7, r3, #31
 8004178:	d508      	bpl.n	800418c <_printf_i+0x14c>
 800417a:	6923      	ldr	r3, [r4, #16]
 800417c:	6861      	ldr	r1, [r4, #4]
 800417e:	4299      	cmp	r1, r3
 8004180:	bfde      	ittt	le
 8004182:	2330      	movle	r3, #48	; 0x30
 8004184:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004188:	f106 36ff 	addle.w	r6, r6, #4294967295
 800418c:	1b92      	subs	r2, r2, r6
 800418e:	6122      	str	r2, [r4, #16]
 8004190:	f8cd a000 	str.w	sl, [sp]
 8004194:	464b      	mov	r3, r9
 8004196:	aa03      	add	r2, sp, #12
 8004198:	4621      	mov	r1, r4
 800419a:	4640      	mov	r0, r8
 800419c:	f7ff fee2 	bl	8003f64 <_printf_common>
 80041a0:	3001      	adds	r0, #1
 80041a2:	d14c      	bne.n	800423e <_printf_i+0x1fe>
 80041a4:	f04f 30ff 	mov.w	r0, #4294967295
 80041a8:	b004      	add	sp, #16
 80041aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041ae:	4835      	ldr	r0, [pc, #212]	; (8004284 <_printf_i+0x244>)
 80041b0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80041b4:	6823      	ldr	r3, [r4, #0]
 80041b6:	680e      	ldr	r6, [r1, #0]
 80041b8:	061f      	lsls	r7, r3, #24
 80041ba:	f856 5b04 	ldr.w	r5, [r6], #4
 80041be:	600e      	str	r6, [r1, #0]
 80041c0:	d514      	bpl.n	80041ec <_printf_i+0x1ac>
 80041c2:	07d9      	lsls	r1, r3, #31
 80041c4:	bf44      	itt	mi
 80041c6:	f043 0320 	orrmi.w	r3, r3, #32
 80041ca:	6023      	strmi	r3, [r4, #0]
 80041cc:	b91d      	cbnz	r5, 80041d6 <_printf_i+0x196>
 80041ce:	6823      	ldr	r3, [r4, #0]
 80041d0:	f023 0320 	bic.w	r3, r3, #32
 80041d4:	6023      	str	r3, [r4, #0]
 80041d6:	2310      	movs	r3, #16
 80041d8:	e7b0      	b.n	800413c <_printf_i+0xfc>
 80041da:	6823      	ldr	r3, [r4, #0]
 80041dc:	f043 0320 	orr.w	r3, r3, #32
 80041e0:	6023      	str	r3, [r4, #0]
 80041e2:	2378      	movs	r3, #120	; 0x78
 80041e4:	4828      	ldr	r0, [pc, #160]	; (8004288 <_printf_i+0x248>)
 80041e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80041ea:	e7e3      	b.n	80041b4 <_printf_i+0x174>
 80041ec:	065e      	lsls	r6, r3, #25
 80041ee:	bf48      	it	mi
 80041f0:	b2ad      	uxthmi	r5, r5
 80041f2:	e7e6      	b.n	80041c2 <_printf_i+0x182>
 80041f4:	4616      	mov	r6, r2
 80041f6:	e7bb      	b.n	8004170 <_printf_i+0x130>
 80041f8:	680b      	ldr	r3, [r1, #0]
 80041fa:	6826      	ldr	r6, [r4, #0]
 80041fc:	6960      	ldr	r0, [r4, #20]
 80041fe:	1d1d      	adds	r5, r3, #4
 8004200:	600d      	str	r5, [r1, #0]
 8004202:	0635      	lsls	r5, r6, #24
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	d501      	bpl.n	800420c <_printf_i+0x1cc>
 8004208:	6018      	str	r0, [r3, #0]
 800420a:	e002      	b.n	8004212 <_printf_i+0x1d2>
 800420c:	0671      	lsls	r1, r6, #25
 800420e:	d5fb      	bpl.n	8004208 <_printf_i+0x1c8>
 8004210:	8018      	strh	r0, [r3, #0]
 8004212:	2300      	movs	r3, #0
 8004214:	6123      	str	r3, [r4, #16]
 8004216:	4616      	mov	r6, r2
 8004218:	e7ba      	b.n	8004190 <_printf_i+0x150>
 800421a:	680b      	ldr	r3, [r1, #0]
 800421c:	1d1a      	adds	r2, r3, #4
 800421e:	600a      	str	r2, [r1, #0]
 8004220:	681e      	ldr	r6, [r3, #0]
 8004222:	6862      	ldr	r2, [r4, #4]
 8004224:	2100      	movs	r1, #0
 8004226:	4630      	mov	r0, r6
 8004228:	f7fb ffda 	bl	80001e0 <memchr>
 800422c:	b108      	cbz	r0, 8004232 <_printf_i+0x1f2>
 800422e:	1b80      	subs	r0, r0, r6
 8004230:	6060      	str	r0, [r4, #4]
 8004232:	6863      	ldr	r3, [r4, #4]
 8004234:	6123      	str	r3, [r4, #16]
 8004236:	2300      	movs	r3, #0
 8004238:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800423c:	e7a8      	b.n	8004190 <_printf_i+0x150>
 800423e:	6923      	ldr	r3, [r4, #16]
 8004240:	4632      	mov	r2, r6
 8004242:	4649      	mov	r1, r9
 8004244:	4640      	mov	r0, r8
 8004246:	47d0      	blx	sl
 8004248:	3001      	adds	r0, #1
 800424a:	d0ab      	beq.n	80041a4 <_printf_i+0x164>
 800424c:	6823      	ldr	r3, [r4, #0]
 800424e:	079b      	lsls	r3, r3, #30
 8004250:	d413      	bmi.n	800427a <_printf_i+0x23a>
 8004252:	68e0      	ldr	r0, [r4, #12]
 8004254:	9b03      	ldr	r3, [sp, #12]
 8004256:	4298      	cmp	r0, r3
 8004258:	bfb8      	it	lt
 800425a:	4618      	movlt	r0, r3
 800425c:	e7a4      	b.n	80041a8 <_printf_i+0x168>
 800425e:	2301      	movs	r3, #1
 8004260:	4632      	mov	r2, r6
 8004262:	4649      	mov	r1, r9
 8004264:	4640      	mov	r0, r8
 8004266:	47d0      	blx	sl
 8004268:	3001      	adds	r0, #1
 800426a:	d09b      	beq.n	80041a4 <_printf_i+0x164>
 800426c:	3501      	adds	r5, #1
 800426e:	68e3      	ldr	r3, [r4, #12]
 8004270:	9903      	ldr	r1, [sp, #12]
 8004272:	1a5b      	subs	r3, r3, r1
 8004274:	42ab      	cmp	r3, r5
 8004276:	dcf2      	bgt.n	800425e <_printf_i+0x21e>
 8004278:	e7eb      	b.n	8004252 <_printf_i+0x212>
 800427a:	2500      	movs	r5, #0
 800427c:	f104 0619 	add.w	r6, r4, #25
 8004280:	e7f5      	b.n	800426e <_printf_i+0x22e>
 8004282:	bf00      	nop
 8004284:	08004705 	.word	0x08004705
 8004288:	08004716 	.word	0x08004716

0800428c <_sbrk_r>:
 800428c:	b538      	push	{r3, r4, r5, lr}
 800428e:	4d06      	ldr	r5, [pc, #24]	; (80042a8 <_sbrk_r+0x1c>)
 8004290:	2300      	movs	r3, #0
 8004292:	4604      	mov	r4, r0
 8004294:	4608      	mov	r0, r1
 8004296:	602b      	str	r3, [r5, #0]
 8004298:	f7fc fcc6 	bl	8000c28 <_sbrk>
 800429c:	1c43      	adds	r3, r0, #1
 800429e:	d102      	bne.n	80042a6 <_sbrk_r+0x1a>
 80042a0:	682b      	ldr	r3, [r5, #0]
 80042a2:	b103      	cbz	r3, 80042a6 <_sbrk_r+0x1a>
 80042a4:	6023      	str	r3, [r4, #0]
 80042a6:	bd38      	pop	{r3, r4, r5, pc}
 80042a8:	20003ee8 	.word	0x20003ee8

080042ac <__sread>:
 80042ac:	b510      	push	{r4, lr}
 80042ae:	460c      	mov	r4, r1
 80042b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042b4:	f000 f8ee 	bl	8004494 <_read_r>
 80042b8:	2800      	cmp	r0, #0
 80042ba:	bfab      	itete	ge
 80042bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80042be:	89a3      	ldrhlt	r3, [r4, #12]
 80042c0:	181b      	addge	r3, r3, r0
 80042c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80042c6:	bfac      	ite	ge
 80042c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80042ca:	81a3      	strhlt	r3, [r4, #12]
 80042cc:	bd10      	pop	{r4, pc}

080042ce <__swrite>:
 80042ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042d2:	461f      	mov	r7, r3
 80042d4:	898b      	ldrh	r3, [r1, #12]
 80042d6:	05db      	lsls	r3, r3, #23
 80042d8:	4605      	mov	r5, r0
 80042da:	460c      	mov	r4, r1
 80042dc:	4616      	mov	r6, r2
 80042de:	d505      	bpl.n	80042ec <__swrite+0x1e>
 80042e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042e4:	2302      	movs	r3, #2
 80042e6:	2200      	movs	r2, #0
 80042e8:	f000 f868 	bl	80043bc <_lseek_r>
 80042ec:	89a3      	ldrh	r3, [r4, #12]
 80042ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80042f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80042f6:	81a3      	strh	r3, [r4, #12]
 80042f8:	4632      	mov	r2, r6
 80042fa:	463b      	mov	r3, r7
 80042fc:	4628      	mov	r0, r5
 80042fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004302:	f000 b817 	b.w	8004334 <_write_r>

08004306 <__sseek>:
 8004306:	b510      	push	{r4, lr}
 8004308:	460c      	mov	r4, r1
 800430a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800430e:	f000 f855 	bl	80043bc <_lseek_r>
 8004312:	1c43      	adds	r3, r0, #1
 8004314:	89a3      	ldrh	r3, [r4, #12]
 8004316:	bf15      	itete	ne
 8004318:	6560      	strne	r0, [r4, #84]	; 0x54
 800431a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800431e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004322:	81a3      	strheq	r3, [r4, #12]
 8004324:	bf18      	it	ne
 8004326:	81a3      	strhne	r3, [r4, #12]
 8004328:	bd10      	pop	{r4, pc}

0800432a <__sclose>:
 800432a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800432e:	f000 b813 	b.w	8004358 <_close_r>
	...

08004334 <_write_r>:
 8004334:	b538      	push	{r3, r4, r5, lr}
 8004336:	4d07      	ldr	r5, [pc, #28]	; (8004354 <_write_r+0x20>)
 8004338:	4604      	mov	r4, r0
 800433a:	4608      	mov	r0, r1
 800433c:	4611      	mov	r1, r2
 800433e:	2200      	movs	r2, #0
 8004340:	602a      	str	r2, [r5, #0]
 8004342:	461a      	mov	r2, r3
 8004344:	f7fc fc1f 	bl	8000b86 <_write>
 8004348:	1c43      	adds	r3, r0, #1
 800434a:	d102      	bne.n	8004352 <_write_r+0x1e>
 800434c:	682b      	ldr	r3, [r5, #0]
 800434e:	b103      	cbz	r3, 8004352 <_write_r+0x1e>
 8004350:	6023      	str	r3, [r4, #0]
 8004352:	bd38      	pop	{r3, r4, r5, pc}
 8004354:	20003ee8 	.word	0x20003ee8

08004358 <_close_r>:
 8004358:	b538      	push	{r3, r4, r5, lr}
 800435a:	4d06      	ldr	r5, [pc, #24]	; (8004374 <_close_r+0x1c>)
 800435c:	2300      	movs	r3, #0
 800435e:	4604      	mov	r4, r0
 8004360:	4608      	mov	r0, r1
 8004362:	602b      	str	r3, [r5, #0]
 8004364:	f7fc fc2b 	bl	8000bbe <_close>
 8004368:	1c43      	adds	r3, r0, #1
 800436a:	d102      	bne.n	8004372 <_close_r+0x1a>
 800436c:	682b      	ldr	r3, [r5, #0]
 800436e:	b103      	cbz	r3, 8004372 <_close_r+0x1a>
 8004370:	6023      	str	r3, [r4, #0]
 8004372:	bd38      	pop	{r3, r4, r5, pc}
 8004374:	20003ee8 	.word	0x20003ee8

08004378 <_fstat_r>:
 8004378:	b538      	push	{r3, r4, r5, lr}
 800437a:	4d07      	ldr	r5, [pc, #28]	; (8004398 <_fstat_r+0x20>)
 800437c:	2300      	movs	r3, #0
 800437e:	4604      	mov	r4, r0
 8004380:	4608      	mov	r0, r1
 8004382:	4611      	mov	r1, r2
 8004384:	602b      	str	r3, [r5, #0]
 8004386:	f7fc fc26 	bl	8000bd6 <_fstat>
 800438a:	1c43      	adds	r3, r0, #1
 800438c:	d102      	bne.n	8004394 <_fstat_r+0x1c>
 800438e:	682b      	ldr	r3, [r5, #0]
 8004390:	b103      	cbz	r3, 8004394 <_fstat_r+0x1c>
 8004392:	6023      	str	r3, [r4, #0]
 8004394:	bd38      	pop	{r3, r4, r5, pc}
 8004396:	bf00      	nop
 8004398:	20003ee8 	.word	0x20003ee8

0800439c <_isatty_r>:
 800439c:	b538      	push	{r3, r4, r5, lr}
 800439e:	4d06      	ldr	r5, [pc, #24]	; (80043b8 <_isatty_r+0x1c>)
 80043a0:	2300      	movs	r3, #0
 80043a2:	4604      	mov	r4, r0
 80043a4:	4608      	mov	r0, r1
 80043a6:	602b      	str	r3, [r5, #0]
 80043a8:	f7fc fc25 	bl	8000bf6 <_isatty>
 80043ac:	1c43      	adds	r3, r0, #1
 80043ae:	d102      	bne.n	80043b6 <_isatty_r+0x1a>
 80043b0:	682b      	ldr	r3, [r5, #0]
 80043b2:	b103      	cbz	r3, 80043b6 <_isatty_r+0x1a>
 80043b4:	6023      	str	r3, [r4, #0]
 80043b6:	bd38      	pop	{r3, r4, r5, pc}
 80043b8:	20003ee8 	.word	0x20003ee8

080043bc <_lseek_r>:
 80043bc:	b538      	push	{r3, r4, r5, lr}
 80043be:	4d07      	ldr	r5, [pc, #28]	; (80043dc <_lseek_r+0x20>)
 80043c0:	4604      	mov	r4, r0
 80043c2:	4608      	mov	r0, r1
 80043c4:	4611      	mov	r1, r2
 80043c6:	2200      	movs	r2, #0
 80043c8:	602a      	str	r2, [r5, #0]
 80043ca:	461a      	mov	r2, r3
 80043cc:	f7fc fc1e 	bl	8000c0c <_lseek>
 80043d0:	1c43      	adds	r3, r0, #1
 80043d2:	d102      	bne.n	80043da <_lseek_r+0x1e>
 80043d4:	682b      	ldr	r3, [r5, #0]
 80043d6:	b103      	cbz	r3, 80043da <_lseek_r+0x1e>
 80043d8:	6023      	str	r3, [r4, #0]
 80043da:	bd38      	pop	{r3, r4, r5, pc}
 80043dc:	20003ee8 	.word	0x20003ee8

080043e0 <memcpy>:
 80043e0:	440a      	add	r2, r1
 80043e2:	4291      	cmp	r1, r2
 80043e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80043e8:	d100      	bne.n	80043ec <memcpy+0xc>
 80043ea:	4770      	bx	lr
 80043ec:	b510      	push	{r4, lr}
 80043ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80043f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80043f6:	4291      	cmp	r1, r2
 80043f8:	d1f9      	bne.n	80043ee <memcpy+0xe>
 80043fa:	bd10      	pop	{r4, pc}

080043fc <memmove>:
 80043fc:	4288      	cmp	r0, r1
 80043fe:	b510      	push	{r4, lr}
 8004400:	eb01 0402 	add.w	r4, r1, r2
 8004404:	d902      	bls.n	800440c <memmove+0x10>
 8004406:	4284      	cmp	r4, r0
 8004408:	4623      	mov	r3, r4
 800440a:	d807      	bhi.n	800441c <memmove+0x20>
 800440c:	1e43      	subs	r3, r0, #1
 800440e:	42a1      	cmp	r1, r4
 8004410:	d008      	beq.n	8004424 <memmove+0x28>
 8004412:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004416:	f803 2f01 	strb.w	r2, [r3, #1]!
 800441a:	e7f8      	b.n	800440e <memmove+0x12>
 800441c:	4402      	add	r2, r0
 800441e:	4601      	mov	r1, r0
 8004420:	428a      	cmp	r2, r1
 8004422:	d100      	bne.n	8004426 <memmove+0x2a>
 8004424:	bd10      	pop	{r4, pc}
 8004426:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800442a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800442e:	e7f7      	b.n	8004420 <memmove+0x24>

08004430 <__malloc_lock>:
 8004430:	4801      	ldr	r0, [pc, #4]	; (8004438 <__malloc_lock+0x8>)
 8004432:	f7ff b9d1 	b.w	80037d8 <__retarget_lock_acquire_recursive>
 8004436:	bf00      	nop
 8004438:	20003ee0 	.word	0x20003ee0

0800443c <__malloc_unlock>:
 800443c:	4801      	ldr	r0, [pc, #4]	; (8004444 <__malloc_unlock+0x8>)
 800443e:	f7ff b9cc 	b.w	80037da <__retarget_lock_release_recursive>
 8004442:	bf00      	nop
 8004444:	20003ee0 	.word	0x20003ee0

08004448 <_realloc_r>:
 8004448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800444a:	4607      	mov	r7, r0
 800444c:	4614      	mov	r4, r2
 800444e:	460e      	mov	r6, r1
 8004450:	b921      	cbnz	r1, 800445c <_realloc_r+0x14>
 8004452:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004456:	4611      	mov	r1, r2
 8004458:	f7ff ba74 	b.w	8003944 <_malloc_r>
 800445c:	b922      	cbnz	r2, 8004468 <_realloc_r+0x20>
 800445e:	f7ff fa21 	bl	80038a4 <_free_r>
 8004462:	4625      	mov	r5, r4
 8004464:	4628      	mov	r0, r5
 8004466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004468:	f000 f826 	bl	80044b8 <_malloc_usable_size_r>
 800446c:	42a0      	cmp	r0, r4
 800446e:	d20f      	bcs.n	8004490 <_realloc_r+0x48>
 8004470:	4621      	mov	r1, r4
 8004472:	4638      	mov	r0, r7
 8004474:	f7ff fa66 	bl	8003944 <_malloc_r>
 8004478:	4605      	mov	r5, r0
 800447a:	2800      	cmp	r0, #0
 800447c:	d0f2      	beq.n	8004464 <_realloc_r+0x1c>
 800447e:	4631      	mov	r1, r6
 8004480:	4622      	mov	r2, r4
 8004482:	f7ff ffad 	bl	80043e0 <memcpy>
 8004486:	4631      	mov	r1, r6
 8004488:	4638      	mov	r0, r7
 800448a:	f7ff fa0b 	bl	80038a4 <_free_r>
 800448e:	e7e9      	b.n	8004464 <_realloc_r+0x1c>
 8004490:	4635      	mov	r5, r6
 8004492:	e7e7      	b.n	8004464 <_realloc_r+0x1c>

08004494 <_read_r>:
 8004494:	b538      	push	{r3, r4, r5, lr}
 8004496:	4d07      	ldr	r5, [pc, #28]	; (80044b4 <_read_r+0x20>)
 8004498:	4604      	mov	r4, r0
 800449a:	4608      	mov	r0, r1
 800449c:	4611      	mov	r1, r2
 800449e:	2200      	movs	r2, #0
 80044a0:	602a      	str	r2, [r5, #0]
 80044a2:	461a      	mov	r2, r3
 80044a4:	f7fc fb52 	bl	8000b4c <_read>
 80044a8:	1c43      	adds	r3, r0, #1
 80044aa:	d102      	bne.n	80044b2 <_read_r+0x1e>
 80044ac:	682b      	ldr	r3, [r5, #0]
 80044ae:	b103      	cbz	r3, 80044b2 <_read_r+0x1e>
 80044b0:	6023      	str	r3, [r4, #0]
 80044b2:	bd38      	pop	{r3, r4, r5, pc}
 80044b4:	20003ee8 	.word	0x20003ee8

080044b8 <_malloc_usable_size_r>:
 80044b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044bc:	1f18      	subs	r0, r3, #4
 80044be:	2b00      	cmp	r3, #0
 80044c0:	bfbc      	itt	lt
 80044c2:	580b      	ldrlt	r3, [r1, r0]
 80044c4:	18c0      	addlt	r0, r0, r3
 80044c6:	4770      	bx	lr

080044c8 <_init>:
 80044c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ca:	bf00      	nop
 80044cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044ce:	bc08      	pop	{r3}
 80044d0:	469e      	mov	lr, r3
 80044d2:	4770      	bx	lr

080044d4 <_fini>:
 80044d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044d6:	bf00      	nop
 80044d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044da:	bc08      	pop	{r3}
 80044dc:	469e      	mov	lr, r3
 80044de:	4770      	bx	lr
