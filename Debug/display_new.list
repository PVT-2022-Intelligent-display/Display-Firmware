
display_new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056a8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000400  08005838  08005838  00015838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c38  08005c38  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08005c38  08005c38  00015c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c40  08005c40  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c40  08005c40  00015c40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c44  08005c44  00015c44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005c48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002e38  20000078  08005cc0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002eb0  08005cc0  00022eb0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000127ea  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c92  00000000  00000000  00032892  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f80  00000000  00000000  00035528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e60  00000000  00000000  000364a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023bd0  00000000  00000000  00037308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014608  00000000  00000000  0005aed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd102  00000000  00000000  0006f4e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013c5e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047fc  00000000  00000000  0013c634  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005820 	.word	0x08005820

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08005820 	.word	0x08005820

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <Init_LCD>:
void ili9488_fillRect(uint16_t x1, uint16_t y1, uint16_t w, uint16_t h, uint16_t color);
void delay_ms(__IO uint32_t nCount1);
void ili9488_set_coordinates(uint16_t x1,uint16_t y1, uint16_t x2,uint16_t y2);

void Init_LCD()
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
	interrupt_initialize_priorities();		// initialize IRQ
 8000598:	f000 f806 	bl	80005a8 <interrupt_initialize_priorities>
	//*****************************************************************************
		iopins_ini();							// initialize IO pins
 800059c:	f000 f80c 	bl	80005b8 <iopins_ini>

	//*****************************************************************************
		initialize_ili9488();					// initialize LCD
 80005a0:	f000 fa12 	bl	80009c8 <initialize_ili9488>
}
 80005a4:	bf00      	nop
 80005a6:	bd80      	pop	{r7, pc}

080005a8 <interrupt_initialize_priorities>:

void interrupt_initialize_priorities()
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4); //4 bits for preemp priority 0 bit for sub priority
 80005ac:	2003      	movs	r0, #3
 80005ae:	f001 fec7 	bl	8002340 <HAL_NVIC_SetPriorityGrouping>
}
 80005b2:	bf00      	nop
 80005b4:	bd80      	pop	{r7, pc}
	...

080005b8 <iopins_ini>:

void iopins_ini()
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b098      	sub	sp, #96	; 0x60
 80005bc:	af00      	add	r7, sp, #0

	 __GPIOC_CLK_ENABLE();
 80005be:	2300      	movs	r3, #0
 80005c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80005c2:	4bac      	ldr	r3, [pc, #688]	; (8000874 <iopins_ini+0x2bc>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	4aab      	ldr	r2, [pc, #684]	; (8000874 <iopins_ini+0x2bc>)
 80005c8:	f043 0304 	orr.w	r3, r3, #4
 80005cc:	6313      	str	r3, [r2, #48]	; 0x30
 80005ce:	4ba9      	ldr	r3, [pc, #676]	; (8000874 <iopins_ini+0x2bc>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	f003 0304 	and.w	r3, r3, #4
 80005d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80005d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
	 __GPIOD_CLK_ENABLE();
 80005da:	2300      	movs	r3, #0
 80005dc:	647b      	str	r3, [r7, #68]	; 0x44
 80005de:	4ba5      	ldr	r3, [pc, #660]	; (8000874 <iopins_ini+0x2bc>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	4aa4      	ldr	r2, [pc, #656]	; (8000874 <iopins_ini+0x2bc>)
 80005e4:	f043 0308 	orr.w	r3, r3, #8
 80005e8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ea:	4ba2      	ldr	r3, [pc, #648]	; (8000874 <iopins_ini+0x2bc>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	f003 0308 	and.w	r3, r3, #8
 80005f2:	647b      	str	r3, [r7, #68]	; 0x44
 80005f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
	 __GPIOA_CLK_ENABLE();
 80005f6:	2300      	movs	r3, #0
 80005f8:	643b      	str	r3, [r7, #64]	; 0x40
 80005fa:	4b9e      	ldr	r3, [pc, #632]	; (8000874 <iopins_ini+0x2bc>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	4a9d      	ldr	r2, [pc, #628]	; (8000874 <iopins_ini+0x2bc>)
 8000600:	f043 0301 	orr.w	r3, r3, #1
 8000604:	6313      	str	r3, [r2, #48]	; 0x30
 8000606:	4b9b      	ldr	r3, [pc, #620]	; (8000874 <iopins_ini+0x2bc>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	f003 0301 	and.w	r3, r3, #1
 800060e:	643b      	str	r3, [r7, #64]	; 0x40
 8000610:	6c3b      	ldr	r3, [r7, #64]	; 0x40
	 __GPIOB_CLK_ENABLE();
 8000612:	2300      	movs	r3, #0
 8000614:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000616:	4b97      	ldr	r3, [pc, #604]	; (8000874 <iopins_ini+0x2bc>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	4a96      	ldr	r2, [pc, #600]	; (8000874 <iopins_ini+0x2bc>)
 800061c:	f043 0302 	orr.w	r3, r3, #2
 8000620:	6313      	str	r3, [r2, #48]	; 0x30
 8000622:	4b94      	ldr	r3, [pc, #592]	; (8000874 <iopins_ini+0x2bc>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	f003 0302 	and.w	r3, r3, #2
 800062a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800062c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
	GPIO_InitTypeDef GPIO_InitStruct;

    BUZZER_PORT_RCC();
 800062e:	2300      	movs	r3, #0
 8000630:	63bb      	str	r3, [r7, #56]	; 0x38
 8000632:	4b90      	ldr	r3, [pc, #576]	; (8000874 <iopins_ini+0x2bc>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	4a8f      	ldr	r2, [pc, #572]	; (8000874 <iopins_ini+0x2bc>)
 8000638:	f043 0308 	orr.w	r3, r3, #8
 800063c:	6313      	str	r3, [r2, #48]	; 0x30
 800063e:	4b8d      	ldr	r3, [pc, #564]	; (8000874 <iopins_ini+0x2bc>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	f003 0308 	and.w	r3, r3, #8
 8000646:	63bb      	str	r3, [r7, #56]	; 0x38
 8000648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Pin = BUZZER;
 800064a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800064e:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000650:	2301      	movs	r3, #1
 8000652:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000654:	2300      	movs	r3, #0
 8000656:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(BUZZER_PORT, &GPIO_InitStruct);
 8000658:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800065c:	4619      	mov	r1, r3
 800065e:	4886      	ldr	r0, [pc, #536]	; (8000878 <iopins_ini+0x2c0>)
 8000660:	f001 ff42 	bl	80024e8 <HAL_GPIO_Init>

    RS485DIR_PORT_RCC();
 8000664:	2300      	movs	r3, #0
 8000666:	637b      	str	r3, [r7, #52]	; 0x34
 8000668:	4b82      	ldr	r3, [pc, #520]	; (8000874 <iopins_ini+0x2bc>)
 800066a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066c:	4a81      	ldr	r2, [pc, #516]	; (8000874 <iopins_ini+0x2bc>)
 800066e:	f043 0301 	orr.w	r3, r3, #1
 8000672:	6313      	str	r3, [r2, #48]	; 0x30
 8000674:	4b7f      	ldr	r3, [pc, #508]	; (8000874 <iopins_ini+0x2bc>)
 8000676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000678:	f003 0301 	and.w	r3, r3, #1
 800067c:	637b      	str	r3, [r7, #52]	; 0x34
 800067e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Pin = RS485DIR;
 8000680:	2302      	movs	r3, #2
 8000682:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000684:	2301      	movs	r3, #1
 8000686:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000688:	2300      	movs	r3, #0
 800068a:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(RS485DIR_PORT, &GPIO_InitStruct);
 800068c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000690:	4619      	mov	r1, r3
 8000692:	487a      	ldr	r0, [pc, #488]	; (800087c <iopins_ini+0x2c4>)
 8000694:	f001 ff28 	bl	80024e8 <HAL_GPIO_Init>
//	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
//	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//	 HAL_GPIO_Init(LCD_BACKLIGHT_PORT, &GPIO_InitStruct);
//	HAL_GPIO_WritePin(LCD_BACKLIGHT_PORT,LCD_BACKLIGHT);

    LCD_CS_PORT_RCC();
 8000698:	2300      	movs	r3, #0
 800069a:	633b      	str	r3, [r7, #48]	; 0x30
 800069c:	4b75      	ldr	r3, [pc, #468]	; (8000874 <iopins_ini+0x2bc>)
 800069e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a0:	4a74      	ldr	r2, [pc, #464]	; (8000874 <iopins_ini+0x2bc>)
 80006a2:	f043 0308 	orr.w	r3, r3, #8
 80006a6:	6313      	str	r3, [r2, #48]	; 0x30
 80006a8:	4b72      	ldr	r3, [pc, #456]	; (8000874 <iopins_ini+0x2bc>)
 80006aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ac:	f003 0308 	and.w	r3, r3, #8
 80006b0:	633b      	str	r3, [r7, #48]	; 0x30
 80006b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pin = LCD_CS;
 80006b4:	2380      	movs	r3, #128	; 0x80
 80006b6:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b8:	2301      	movs	r3, #1
 80006ba:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006bc:	2303      	movs	r3, #3
 80006be:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(LCD_CS_PORT, &GPIO_InitStruct);
 80006c0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80006c4:	4619      	mov	r1, r3
 80006c6:	486c      	ldr	r0, [pc, #432]	; (8000878 <iopins_ini+0x2c0>)
 80006c8:	f001 ff0e 	bl	80024e8 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(LCD_CS_PORT,LCD_CS,GPIO_PIN_SET);
 80006cc:	2201      	movs	r2, #1
 80006ce:	2180      	movs	r1, #128	; 0x80
 80006d0:	4869      	ldr	r0, [pc, #420]	; (8000878 <iopins_ini+0x2c0>)
 80006d2:	f002 f8a5 	bl	8002820 <HAL_GPIO_WritePin>

    LCD_RES_PORT_RCC();
 80006d6:	2300      	movs	r3, #0
 80006d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80006da:	4b66      	ldr	r3, [pc, #408]	; (8000874 <iopins_ini+0x2bc>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	4a65      	ldr	r2, [pc, #404]	; (8000874 <iopins_ini+0x2bc>)
 80006e0:	f043 0301 	orr.w	r3, r3, #1
 80006e4:	6313      	str	r3, [r2, #48]	; 0x30
 80006e6:	4b63      	ldr	r3, [pc, #396]	; (8000874 <iopins_ini+0x2bc>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	f003 0301 	and.w	r3, r3, #1
 80006ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80006f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Pin = LCD_RES;
 80006f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006f6:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f8:	2301      	movs	r3, #1
 80006fa:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed =GPIO_SPEED_FREQ_VERY_HIGH;
 80006fc:	2303      	movs	r3, #3
 80006fe:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(LCD_RES_PORT, &GPIO_InitStruct);
 8000700:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000704:	4619      	mov	r1, r3
 8000706:	485d      	ldr	r0, [pc, #372]	; (800087c <iopins_ini+0x2c4>)
 8000708:	f001 feee 	bl	80024e8 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(LCD_RES_PORT,LCD_RES,GPIO_PIN_RESET);
 800070c:	2200      	movs	r2, #0
 800070e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000712:	485a      	ldr	r0, [pc, #360]	; (800087c <iopins_ini+0x2c4>)
 8000714:	f002 f884 	bl	8002820 <HAL_GPIO_WritePin>
	delay_ms(50);
 8000718:	2032      	movs	r0, #50	; 0x32
 800071a:	f000 f9cf 	bl	8000abc <delay_ms>
	HAL_GPIO_WritePin(LCD_RES_PORT,LCD_RES,GPIO_PIN_SET);
 800071e:	2201      	movs	r2, #1
 8000720:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000724:	4855      	ldr	r0, [pc, #340]	; (800087c <iopins_ini+0x2c4>)
 8000726:	f002 f87b 	bl	8002820 <HAL_GPIO_WritePin>

    LCD_DCX_PORT_RCC();
 800072a:	2300      	movs	r3, #0
 800072c:	62bb      	str	r3, [r7, #40]	; 0x28
 800072e:	4b51      	ldr	r3, [pc, #324]	; (8000874 <iopins_ini+0x2bc>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	4a50      	ldr	r2, [pc, #320]	; (8000874 <iopins_ini+0x2bc>)
 8000734:	f043 0308 	orr.w	r3, r3, #8
 8000738:	6313      	str	r3, [r2, #48]	; 0x30
 800073a:	4b4e      	ldr	r3, [pc, #312]	; (8000874 <iopins_ini+0x2bc>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	f003 0308 	and.w	r3, r3, #8
 8000742:	62bb      	str	r3, [r7, #40]	; 0x28
 8000744:	6abb      	ldr	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pin = LCD_DCX;
 8000746:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800074a:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800074c:	2301      	movs	r3, #1
 800074e:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed =GPIO_SPEED_FREQ_VERY_HIGH;
 8000750:	2303      	movs	r3, #3
 8000752:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(LCD_DCX_PORT, &GPIO_InitStruct);
 8000754:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000758:	4619      	mov	r1, r3
 800075a:	4847      	ldr	r0, [pc, #284]	; (8000878 <iopins_ini+0x2c0>)
 800075c:	f001 fec4 	bl	80024e8 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(LCD_DCX_PORT,LCD_DCX,GPIO_PIN_SET);
 8000760:	2201      	movs	r2, #1
 8000762:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000766:	4844      	ldr	r0, [pc, #272]	; (8000878 <iopins_ini+0x2c0>)
 8000768:	f002 f85a 	bl	8002820 <HAL_GPIO_WritePin>

    FLASH_CS_PORT_RCC();
 800076c:	2300      	movs	r3, #0
 800076e:	627b      	str	r3, [r7, #36]	; 0x24
 8000770:	4b40      	ldr	r3, [pc, #256]	; (8000874 <iopins_ini+0x2bc>)
 8000772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000774:	4a3f      	ldr	r2, [pc, #252]	; (8000874 <iopins_ini+0x2bc>)
 8000776:	f043 0301 	orr.w	r3, r3, #1
 800077a:	6313      	str	r3, [r2, #48]	; 0x30
 800077c:	4b3d      	ldr	r3, [pc, #244]	; (8000874 <iopins_ini+0x2bc>)
 800077e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000780:	f003 0301 	and.w	r3, r3, #1
 8000784:	627b      	str	r3, [r7, #36]	; 0x24
 8000786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Pin = FLASH_CS;
 8000788:	2310      	movs	r3, #16
 800078a:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078c:	2301      	movs	r3, #1
 800078e:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed =GPIO_SPEED_FREQ_VERY_HIGH;
 8000790:	2303      	movs	r3, #3
 8000792:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(FLASH_CS_PORT, &GPIO_InitStruct);
 8000794:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000798:	4619      	mov	r1, r3
 800079a:	4838      	ldr	r0, [pc, #224]	; (800087c <iopins_ini+0x2c4>)
 800079c:	f001 fea4 	bl	80024e8 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(FLASH_CS_PORT,FLASH_CS,GPIO_PIN_SET);
 80007a0:	2201      	movs	r2, #1
 80007a2:	2110      	movs	r1, #16
 80007a4:	4835      	ldr	r0, [pc, #212]	; (800087c <iopins_ini+0x2c4>)
 80007a6:	f002 f83b 	bl	8002820 <HAL_GPIO_WritePin>

    FLASH_WP_PORT_RCC();
 80007aa:	2300      	movs	r3, #0
 80007ac:	623b      	str	r3, [r7, #32]
 80007ae:	4b31      	ldr	r3, [pc, #196]	; (8000874 <iopins_ini+0x2bc>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a30      	ldr	r2, [pc, #192]	; (8000874 <iopins_ini+0x2bc>)
 80007b4:	f043 0304 	orr.w	r3, r3, #4
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b2e      	ldr	r3, [pc, #184]	; (8000874 <iopins_ini+0x2bc>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0304 	and.w	r3, r3, #4
 80007c2:	623b      	str	r3, [r7, #32]
 80007c4:	6a3b      	ldr	r3, [r7, #32]
	GPIO_InitStruct.Pin = FLASH_WP;
 80007c6:	2310      	movs	r3, #16
 80007c8:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ca:	2301      	movs	r3, #1
 80007cc:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ce:	2300      	movs	r3, #0
 80007d0:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(FLASH_WP_PORT, &GPIO_InitStruct);
 80007d2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80007d6:	4619      	mov	r1, r3
 80007d8:	4829      	ldr	r0, [pc, #164]	; (8000880 <iopins_ini+0x2c8>)
 80007da:	f001 fe85 	bl	80024e8 <HAL_GPIO_Init>
	 HAL_GPIO_WritePin(FLASH_WP_PORT,FLASH_WP,GPIO_PIN_RESET);
 80007de:	2200      	movs	r2, #0
 80007e0:	2110      	movs	r1, #16
 80007e2:	4827      	ldr	r0, [pc, #156]	; (8000880 <iopins_ini+0x2c8>)
 80007e4:	f002 f81c 	bl	8002820 <HAL_GPIO_WritePin>

    FRAM_CS_PORT_RCC();
 80007e8:	2300      	movs	r3, #0
 80007ea:	61fb      	str	r3, [r7, #28]
 80007ec:	4b21      	ldr	r3, [pc, #132]	; (8000874 <iopins_ini+0x2bc>)
 80007ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f0:	4a20      	ldr	r2, [pc, #128]	; (8000874 <iopins_ini+0x2bc>)
 80007f2:	f043 0302 	orr.w	r3, r3, #2
 80007f6:	6313      	str	r3, [r2, #48]	; 0x30
 80007f8:	4b1e      	ldr	r3, [pc, #120]	; (8000874 <iopins_ini+0x2bc>)
 80007fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fc:	f003 0302 	and.w	r3, r3, #2
 8000800:	61fb      	str	r3, [r7, #28]
 8000802:	69fb      	ldr	r3, [r7, #28]
	GPIO_InitStruct.Pin = FRAM_CS;
 8000804:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000808:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080a:	2301      	movs	r3, #1
 800080c:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed =GPIO_SPEED_FREQ_VERY_HIGH;
 800080e:	2303      	movs	r3, #3
 8000810:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(FRAM_CS_PORT, &GPIO_InitStruct);
 8000812:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000816:	4619      	mov	r1, r3
 8000818:	481a      	ldr	r0, [pc, #104]	; (8000884 <iopins_ini+0x2cc>)
 800081a:	f001 fe65 	bl	80024e8 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(FRAM_CS_PORT,FRAM_CS,GPIO_PIN_SET);
 800081e:	2201      	movs	r2, #1
 8000820:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000824:	4817      	ldr	r0, [pc, #92]	; (8000884 <iopins_ini+0x2cc>)
 8000826:	f001 fffb 	bl	8002820 <HAL_GPIO_WritePin>

    FRAM_HOLD_PORT_RCC();
 800082a:	2300      	movs	r3, #0
 800082c:	61bb      	str	r3, [r7, #24]
 800082e:	4b11      	ldr	r3, [pc, #68]	; (8000874 <iopins_ini+0x2bc>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4a10      	ldr	r2, [pc, #64]	; (8000874 <iopins_ini+0x2bc>)
 8000834:	f043 0304 	orr.w	r3, r3, #4
 8000838:	6313      	str	r3, [r2, #48]	; 0x30
 800083a:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <iopins_ini+0x2bc>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f003 0304 	and.w	r3, r3, #4
 8000842:	61bb      	str	r3, [r7, #24]
 8000844:	69bb      	ldr	r3, [r7, #24]
	GPIO_InitStruct.Pin = FRAM_HOLD;
 8000846:	2302      	movs	r3, #2
 8000848:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084a:	2301      	movs	r3, #1
 800084c:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed =GPIO_SPEED_FREQ_VERY_HIGH;
 800084e:	2303      	movs	r3, #3
 8000850:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(FRAM_HOLD_PORT, &GPIO_InitStruct);
 8000852:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000856:	4619      	mov	r1, r3
 8000858:	4809      	ldr	r0, [pc, #36]	; (8000880 <iopins_ini+0x2c8>)
 800085a:	f001 fe45 	bl	80024e8 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(FRAM_HOLD_PORT,FRAM_HOLD,GPIO_PIN_SET);
 800085e:	2201      	movs	r2, #1
 8000860:	2102      	movs	r1, #2
 8000862:	4807      	ldr	r0, [pc, #28]	; (8000880 <iopins_ini+0x2c8>)
 8000864:	f001 ffdc 	bl	8002820 <HAL_GPIO_WritePin>

    FRAM_WP_PORT_RCC();
 8000868:	2300      	movs	r3, #0
 800086a:	617b      	str	r3, [r7, #20]
 800086c:	4b01      	ldr	r3, [pc, #4]	; (8000874 <iopins_ini+0x2bc>)
 800086e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000870:	e00a      	b.n	8000888 <iopins_ini+0x2d0>
 8000872:	bf00      	nop
 8000874:	40023800 	.word	0x40023800
 8000878:	40020c00 	.word	0x40020c00
 800087c:	40020000 	.word	0x40020000
 8000880:	40020800 	.word	0x40020800
 8000884:	40020400 	.word	0x40020400
 8000888:	4a4b      	ldr	r2, [pc, #300]	; (80009b8 <iopins_ini+0x400>)
 800088a:	f043 0304 	orr.w	r3, r3, #4
 800088e:	6313      	str	r3, [r2, #48]	; 0x30
 8000890:	4b49      	ldr	r3, [pc, #292]	; (80009b8 <iopins_ini+0x400>)
 8000892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000894:	f003 0304 	and.w	r3, r3, #4
 8000898:	617b      	str	r3, [r7, #20]
 800089a:	697b      	ldr	r3, [r7, #20]
	GPIO_InitStruct.Pin = FRAM_WP;
 800089c:	2301      	movs	r3, #1
 800089e:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a0:	2301      	movs	r3, #1
 80008a2:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a4:	2300      	movs	r3, #0
 80008a6:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(FRAM_WP_PORT, &GPIO_InitStruct);
 80008a8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80008ac:	4619      	mov	r1, r3
 80008ae:	4843      	ldr	r0, [pc, #268]	; (80009bc <iopins_ini+0x404>)
 80008b0:	f001 fe1a 	bl	80024e8 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(FRAM_WP_PORT,FRAM_WP,GPIO_PIN_SET);
 80008b4:	2201      	movs	r2, #1
 80008b6:	2101      	movs	r1, #1
 80008b8:	4840      	ldr	r0, [pc, #256]	; (80009bc <iopins_ini+0x404>)
 80008ba:	f001 ffb1 	bl	8002820 <HAL_GPIO_WritePin>


    LED_DBG_PORT_RCC();
 80008be:	2300      	movs	r3, #0
 80008c0:	613b      	str	r3, [r7, #16]
 80008c2:	4b3d      	ldr	r3, [pc, #244]	; (80009b8 <iopins_ini+0x400>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a3c      	ldr	r2, [pc, #240]	; (80009b8 <iopins_ini+0x400>)
 80008c8:	f043 0302 	orr.w	r3, r3, #2
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b3a      	ldr	r3, [pc, #232]	; (80009b8 <iopins_ini+0x400>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0302 	and.w	r3, r3, #2
 80008d6:	613b      	str	r3, [r7, #16]
 80008d8:	693b      	ldr	r3, [r7, #16]
	GPIO_InitStruct.Pin = LED_DBG_1;
 80008da:	2308      	movs	r3, #8
 80008dc:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008de:	2301      	movs	r3, #1
 80008e0:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e2:	2300      	movs	r3, #0
 80008e4:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(LED_DBG_PORT, &GPIO_InitStruct);
 80008e6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80008ea:	4619      	mov	r1, r3
 80008ec:	4834      	ldr	r0, [pc, #208]	; (80009c0 <iopins_ini+0x408>)
 80008ee:	f001 fdfb 	bl	80024e8 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(LED_DBG_PORT,LED_DBG_1,GPIO_PIN_SET);
 80008f2:	2201      	movs	r2, #1
 80008f4:	2108      	movs	r1, #8
 80008f6:	4832      	ldr	r0, [pc, #200]	; (80009c0 <iopins_ini+0x408>)
 80008f8:	f001 ff92 	bl	8002820 <HAL_GPIO_WritePin>


    BUTTON_0_PORT_RCC();
 80008fc:	2300      	movs	r3, #0
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	4b2d      	ldr	r3, [pc, #180]	; (80009b8 <iopins_ini+0x400>)
 8000902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000904:	4a2c      	ldr	r2, [pc, #176]	; (80009b8 <iopins_ini+0x400>)
 8000906:	f043 0301 	orr.w	r3, r3, #1
 800090a:	6313      	str	r3, [r2, #48]	; 0x30
 800090c:	4b2a      	ldr	r3, [pc, #168]	; (80009b8 <iopins_ini+0x400>)
 800090e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000910:	f003 0301 	and.w	r3, r3, #1
 8000914:	60fb      	str	r3, [r7, #12]
 8000916:	68fb      	ldr	r3, [r7, #12]
	GPIO_InitStruct.Pin = BUTTON_0;
 8000918:	f44f 7380 	mov.w	r3, #256	; 0x100
 800091c:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800091e:	2300      	movs	r3, #0
 8000920:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Pull= GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	657b      	str	r3, [r7, #84]	; 0x54
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000926:	2300      	movs	r3, #0
 8000928:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(BUTTON_0_PORT, &GPIO_InitStruct);
 800092a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800092e:	4619      	mov	r1, r3
 8000930:	4824      	ldr	r0, [pc, #144]	; (80009c4 <iopins_ini+0x40c>)
 8000932:	f001 fdd9 	bl	80024e8 <HAL_GPIO_Init>

    BUTTON_1_PORT_RCC();
 8000936:	2300      	movs	r3, #0
 8000938:	60bb      	str	r3, [r7, #8]
 800093a:	4b1f      	ldr	r3, [pc, #124]	; (80009b8 <iopins_ini+0x400>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a1e      	ldr	r2, [pc, #120]	; (80009b8 <iopins_ini+0x400>)
 8000940:	f043 0304 	orr.w	r3, r3, #4
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b1c      	ldr	r3, [pc, #112]	; (80009b8 <iopins_ini+0x400>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0304 	and.w	r3, r3, #4
 800094e:	60bb      	str	r3, [r7, #8]
 8000950:	68bb      	ldr	r3, [r7, #8]
	GPIO_InitStruct.Pin = BUTTON_1;
 8000952:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000956:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000958:	2300      	movs	r3, #0
 800095a:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Pull= GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	657b      	str	r3, [r7, #84]	; 0x54
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000960:	2300      	movs	r3, #0
 8000962:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(BUTTON_1_PORT, &GPIO_InitStruct);
 8000964:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000968:	4619      	mov	r1, r3
 800096a:	4814      	ldr	r0, [pc, #80]	; (80009bc <iopins_ini+0x404>)
 800096c:	f001 fdbc 	bl	80024e8 <HAL_GPIO_Init>


    TOUCH_RESET_PORT_RCC();
 8000970:	2300      	movs	r3, #0
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	4b10      	ldr	r3, [pc, #64]	; (80009b8 <iopins_ini+0x400>)
 8000976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000978:	4a0f      	ldr	r2, [pc, #60]	; (80009b8 <iopins_ini+0x400>)
 800097a:	f043 0302 	orr.w	r3, r3, #2
 800097e:	6313      	str	r3, [r2, #48]	; 0x30
 8000980:	4b0d      	ldr	r3, [pc, #52]	; (80009b8 <iopins_ini+0x400>)
 8000982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000984:	f003 0302 	and.w	r3, r3, #2
 8000988:	607b      	str	r3, [r7, #4]
 800098a:	687b      	ldr	r3, [r7, #4]
	GPIO_InitStruct.Pin = TOUCH_RESET;
 800098c:	2320      	movs	r3, #32
 800098e:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000990:	2301      	movs	r3, #1
 8000992:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000994:	2300      	movs	r3, #0
 8000996:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(TOUCH_RESET_PORT, &GPIO_InitStruct);
 8000998:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800099c:	4619      	mov	r1, r3
 800099e:	4808      	ldr	r0, [pc, #32]	; (80009c0 <iopins_ini+0x408>)
 80009a0:	f001 fda2 	bl	80024e8 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(TOUCH_RESET_PORT,TOUCH_RESET,GPIO_PIN_SET);
 80009a4:	2201      	movs	r2, #1
 80009a6:	2120      	movs	r1, #32
 80009a8:	4805      	ldr	r0, [pc, #20]	; (80009c0 <iopins_ini+0x408>)
 80009aa:	f001 ff39 	bl	8002820 <HAL_GPIO_WritePin>
}
 80009ae:	bf00      	nop
 80009b0:	3760      	adds	r7, #96	; 0x60
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40023800 	.word	0x40023800
 80009bc:	40020800 	.word	0x40020800
 80009c0:	40020400 	.word	0x40020400
 80009c4:	40020000 	.word	0x40020000

080009c8 <initialize_ili9488>:
//*****************************************************************************
void initialize_ili9488()
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af02      	add	r7, sp, #8
	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_RESET);
 80009ce:	2200      	movs	r2, #0
 80009d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009d4:	4838      	ldr	r0, [pc, #224]	; (8000ab8 <initialize_ili9488+0xf0>)
 80009d6:	f001 ff23 	bl	8002820 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_RESET);
 80009da:	2200      	movs	r2, #0
 80009dc:	2180      	movs	r1, #128	; 0x80
 80009de:	4836      	ldr	r0, [pc, #216]	; (8000ab8 <initialize_ili9488+0xf0>)
 80009e0:	f001 ff1e 	bl	8002820 <HAL_GPIO_WritePin>
	TFT_REG=0x0011;
 80009e4:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80009e8:	2211      	movs	r2, #17
 80009ea:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_SET);
 80009ec:	2201      	movs	r2, #1
 80009ee:	2180      	movs	r1, #128	; 0x80
 80009f0:	4831      	ldr	r0, [pc, #196]	; (8000ab8 <initialize_ili9488+0xf0>)
 80009f2:	f001 ff15 	bl	8002820 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_RESET);
 80009f6:	2200      	movs	r2, #0
 80009f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009fc:	482e      	ldr	r0, [pc, #184]	; (8000ab8 <initialize_ili9488+0xf0>)
 80009fe:	f001 ff0f 	bl	8002820 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS, GPIO_PIN_RESET);
 8000a02:	2200      	movs	r2, #0
 8000a04:	2180      	movs	r1, #128	; 0x80
 8000a06:	482c      	ldr	r0, [pc, #176]	; (8000ab8 <initialize_ili9488+0xf0>)
 8000a08:	f001 ff0a 	bl	8002820 <HAL_GPIO_WritePin>
	TFT_REG=0x0029;
 8000a0c:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000a10:	2229      	movs	r2, #41	; 0x29
 8000a12:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS, GPIO_PIN_SET);
 8000a14:	2201      	movs	r2, #1
 8000a16:	2180      	movs	r1, #128	; 0x80
 8000a18:	4827      	ldr	r0, [pc, #156]	; (8000ab8 <initialize_ili9488+0xf0>)
 8000a1a:	f001 ff01 	bl	8002820 <HAL_GPIO_WritePin>


	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_RESET);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a24:	4824      	ldr	r0, [pc, #144]	; (8000ab8 <initialize_ili9488+0xf0>)
 8000a26:	f001 fefb 	bl	8002820 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_RESET);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2180      	movs	r1, #128	; 0x80
 8000a2e:	4822      	ldr	r0, [pc, #136]	; (8000ab8 <initialize_ili9488+0xf0>)
 8000a30:	f001 fef6 	bl	8002820 <HAL_GPIO_WritePin>
	TFT_REG=0x003A;
 8000a34:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000a38:	223a      	movs	r2, #58	; 0x3a
 8000a3a:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_SET);
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a42:	481d      	ldr	r0, [pc, #116]	; (8000ab8 <initialize_ili9488+0xf0>)
 8000a44:	f001 feec 	bl	8002820 <HAL_GPIO_WritePin>
	TFT_REG=0x0055;
 8000a48:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000a4c:	2255      	movs	r2, #85	; 0x55
 8000a4e:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS, GPIO_PIN_RESET);
 8000a50:	2200      	movs	r2, #0
 8000a52:	2180      	movs	r1, #128	; 0x80
 8000a54:	4818      	ldr	r0, [pc, #96]	; (8000ab8 <initialize_ili9488+0xf0>)
 8000a56:	f001 fee3 	bl	8002820 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_RESET);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a60:	4815      	ldr	r0, [pc, #84]	; (8000ab8 <initialize_ili9488+0xf0>)
 8000a62:	f001 fedd 	bl	8002820 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_RESET);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2180      	movs	r1, #128	; 0x80
 8000a6a:	4813      	ldr	r0, [pc, #76]	; (8000ab8 <initialize_ili9488+0xf0>)
 8000a6c:	f001 fed8 	bl	8002820 <HAL_GPIO_WritePin>
	TFT_REG=0x0036;
 8000a70:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000a74:	2236      	movs	r2, #54	; 0x36
 8000a76:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_SET);
 8000a78:	2201      	movs	r2, #1
 8000a7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a7e:	480e      	ldr	r0, [pc, #56]	; (8000ab8 <initialize_ili9488+0xf0>)
 8000a80:	f001 fece 	bl	8002820 <HAL_GPIO_WritePin>
	TFT_REG=0x00E8;
 8000a84:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000a88:	22e8      	movs	r2, #232	; 0xe8
 8000a8a:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_RESET);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	2180      	movs	r1, #128	; 0x80
 8000a90:	4809      	ldr	r0, [pc, #36]	; (8000ab8 <initialize_ili9488+0xf0>)
 8000a92:	f001 fec5 	bl	8002820 <HAL_GPIO_WritePin>

	delay_ms(100);
 8000a96:	2064      	movs	r0, #100	; 0x64
 8000a98:	f000 f810 	bl	8000abc <delay_ms>
	ili9488_fillRect(0,0,LCD_PIXEL_WIDTH,LCD_PIXEL_HEIGHT,ORANGE);
 8000a9c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8000aa0:	9300      	str	r3, [sp, #0]
 8000aa2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000aa6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000aaa:	2100      	movs	r1, #0
 8000aac:	2000      	movs	r0, #0
 8000aae:	f000 f81d 	bl	8000aec <ili9488_fillRect>
}
 8000ab2:	bf00      	nop
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	40020c00 	.word	0x40020c00

08000abc <delay_ms>:
void delay_ms(__IO uint32_t nCount1) {
 8000abc:	b480      	push	{r7}
 8000abe:	b085      	sub	sp, #20
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
	__IO uint32_t nCount=nCount1*23666;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	f645 4272 	movw	r2, #23666	; 0x5c72
 8000aca:	fb02 f303 	mul.w	r3, r2, r3
 8000ace:	60fb      	str	r3, [r7, #12]
	while(nCount--) {
 8000ad0:	bf00      	nop
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	1e5a      	subs	r2, r3, #1
 8000ad6:	60fa      	str	r2, [r7, #12]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d1fa      	bne.n	8000ad2 <delay_ms+0x16>
  }
}
 8000adc:	bf00      	nop
 8000ade:	bf00      	nop
 8000ae0:	3714      	adds	r7, #20
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
	...

08000aec <ili9488_fillRect>:
void ili9488_fillRect(uint16_t x1, uint16_t y1, uint16_t w, uint16_t h, uint16_t color)
{
 8000aec:	b590      	push	{r4, r7, lr}
 8000aee:	b085      	sub	sp, #20
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4604      	mov	r4, r0
 8000af4:	4608      	mov	r0, r1
 8000af6:	4611      	mov	r1, r2
 8000af8:	461a      	mov	r2, r3
 8000afa:	4623      	mov	r3, r4
 8000afc:	80fb      	strh	r3, [r7, #6]
 8000afe:	4603      	mov	r3, r0
 8000b00:	80bb      	strh	r3, [r7, #4]
 8000b02:	460b      	mov	r3, r1
 8000b04:	807b      	strh	r3, [r7, #2]
 8000b06:	4613      	mov	r3, r2
 8000b08:	803b      	strh	r3, [r7, #0]
	uint32_t count = w * h;
 8000b0a:	887b      	ldrh	r3, [r7, #2]
 8000b0c:	883a      	ldrh	r2, [r7, #0]
 8000b0e:	fb02 f303 	mul.w	r3, r2, r3
 8000b12:	60bb      	str	r3, [r7, #8]
	ili9488_set_coordinates(x1, y1, (uint16_t) (x1 + w - 1), (uint16_t) (y1 + h - 1));
 8000b14:	88fa      	ldrh	r2, [r7, #6]
 8000b16:	887b      	ldrh	r3, [r7, #2]
 8000b18:	4413      	add	r3, r2
 8000b1a:	b29b      	uxth	r3, r3
 8000b1c:	3b01      	subs	r3, #1
 8000b1e:	b29c      	uxth	r4, r3
 8000b20:	88ba      	ldrh	r2, [r7, #4]
 8000b22:	883b      	ldrh	r3, [r7, #0]
 8000b24:	4413      	add	r3, r2
 8000b26:	b29b      	uxth	r3, r3
 8000b28:	3b01      	subs	r3, #1
 8000b2a:	b29b      	uxth	r3, r3
 8000b2c:	88b9      	ldrh	r1, [r7, #4]
 8000b2e:	88f8      	ldrh	r0, [r7, #6]
 8000b30:	4622      	mov	r2, r4
 8000b32:	f000 f82f 	bl	8000b94 <ili9488_set_coordinates>

	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_RESET);
 8000b36:	2200      	movs	r2, #0
 8000b38:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b3c:	4814      	ldr	r0, [pc, #80]	; (8000b90 <ili9488_fillRect+0xa4>)
 8000b3e:	f001 fe6f 	bl	8002820 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_RESET);
 8000b42:	2200      	movs	r2, #0
 8000b44:	2180      	movs	r1, #128	; 0x80
 8000b46:	4812      	ldr	r0, [pc, #72]	; (8000b90 <ili9488_fillRect+0xa4>)
 8000b48:	f001 fe6a 	bl	8002820 <HAL_GPIO_WritePin>
	TFT_REG=0x002C;
 8000b4c:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000b50:	222c      	movs	r2, #44	; 0x2c
 8000b52:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_SET);
 8000b54:	2201      	movs	r2, #1
 8000b56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b5a:	480d      	ldr	r0, [pc, #52]	; (8000b90 <ili9488_fillRect+0xa4>)
 8000b5c:	f001 fe60 	bl	8002820 <HAL_GPIO_WritePin>

	for(unsigned int i=0; i<count; i++)
 8000b60:	2300      	movs	r3, #0
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	e006      	b.n	8000b74 <ili9488_fillRect+0x88>
	{
		TFT_REG=color;
 8000b66:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000b6a:	8c3b      	ldrh	r3, [r7, #32]
 8000b6c:	8013      	strh	r3, [r2, #0]
	for(unsigned int i=0; i<count; i++)
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	3301      	adds	r3, #1
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	68fa      	ldr	r2, [r7, #12]
 8000b76:	68bb      	ldr	r3, [r7, #8]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	d3f4      	bcc.n	8000b66 <ili9488_fillRect+0x7a>
	}
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_SET);
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	2180      	movs	r1, #128	; 0x80
 8000b80:	4803      	ldr	r0, [pc, #12]	; (8000b90 <ili9488_fillRect+0xa4>)
 8000b82:	f001 fe4d 	bl	8002820 <HAL_GPIO_WritePin>
}
 8000b86:	bf00      	nop
 8000b88:	3714      	adds	r7, #20
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd90      	pop	{r4, r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40020c00 	.word	0x40020c00

08000b94 <ili9488_set_coordinates>:
void ili9488_set_coordinates(uint16_t x1,uint16_t y1, uint16_t x2, uint16_t y2)
{
 8000b94:	b590      	push	{r4, r7, lr}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4604      	mov	r4, r0
 8000b9c:	4608      	mov	r0, r1
 8000b9e:	4611      	mov	r1, r2
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	4623      	mov	r3, r4
 8000ba4:	80fb      	strh	r3, [r7, #6]
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	80bb      	strh	r3, [r7, #4]
 8000baa:	460b      	mov	r3, r1
 8000bac:	807b      	strh	r3, [r7, #2]
 8000bae:	4613      	mov	r3, r2
 8000bb0:	803b      	strh	r3, [r7, #0]
	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_RESET);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bb8:	4832      	ldr	r0, [pc, #200]	; (8000c84 <ili9488_set_coordinates+0xf0>)
 8000bba:	f001 fe31 	bl	8002820 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_RESET);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2180      	movs	r1, #128	; 0x80
 8000bc2:	4830      	ldr	r0, [pc, #192]	; (8000c84 <ili9488_set_coordinates+0xf0>)
 8000bc4:	f001 fe2c 	bl	8002820 <HAL_GPIO_WritePin>
	TFT_REG=0x002A;
 8000bc8:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000bcc:	222a      	movs	r2, #42	; 0x2a
 8000bce:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_SET);
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bd6:	482b      	ldr	r0, [pc, #172]	; (8000c84 <ili9488_set_coordinates+0xf0>)
 8000bd8:	f001 fe22 	bl	8002820 <HAL_GPIO_WritePin>
	TFT_REG=x1>>8;
 8000bdc:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000be0:	88fb      	ldrh	r3, [r7, #6]
 8000be2:	0a1b      	lsrs	r3, r3, #8
 8000be4:	b29b      	uxth	r3, r3
 8000be6:	8013      	strh	r3, [r2, #0]
	TFT_REG=x1&0xFF;
 8000be8:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000bec:	88fa      	ldrh	r2, [r7, #6]
 8000bee:	b2d2      	uxtb	r2, r2
 8000bf0:	b292      	uxth	r2, r2
 8000bf2:	801a      	strh	r2, [r3, #0]
	TFT_REG=x2>>8;
 8000bf4:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000bf8:	887b      	ldrh	r3, [r7, #2]
 8000bfa:	0a1b      	lsrs	r3, r3, #8
 8000bfc:	b29b      	uxth	r3, r3
 8000bfe:	8013      	strh	r3, [r2, #0]
	TFT_REG=x2&0xFF;
 8000c00:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000c04:	887a      	ldrh	r2, [r7, #2]
 8000c06:	b2d2      	uxtb	r2, r2
 8000c08:	b292      	uxth	r2, r2
 8000c0a:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_SET);
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	2180      	movs	r1, #128	; 0x80
 8000c10:	481c      	ldr	r0, [pc, #112]	; (8000c84 <ili9488_set_coordinates+0xf0>)
 8000c12:	f001 fe05 	bl	8002820 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_RESET);
 8000c16:	2200      	movs	r2, #0
 8000c18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c1c:	4819      	ldr	r0, [pc, #100]	; (8000c84 <ili9488_set_coordinates+0xf0>)
 8000c1e:	f001 fdff 	bl	8002820 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_RESET);
 8000c22:	2200      	movs	r2, #0
 8000c24:	2180      	movs	r1, #128	; 0x80
 8000c26:	4817      	ldr	r0, [pc, #92]	; (8000c84 <ili9488_set_coordinates+0xf0>)
 8000c28:	f001 fdfa 	bl	8002820 <HAL_GPIO_WritePin>
	TFT_REG=0x002B;
 8000c2c:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000c30:	222b      	movs	r2, #43	; 0x2b
 8000c32:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_SET);
 8000c34:	2201      	movs	r2, #1
 8000c36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c3a:	4812      	ldr	r0, [pc, #72]	; (8000c84 <ili9488_set_coordinates+0xf0>)
 8000c3c:	f001 fdf0 	bl	8002820 <HAL_GPIO_WritePin>
	TFT_REG=y1>>8;
 8000c40:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000c44:	88bb      	ldrh	r3, [r7, #4]
 8000c46:	0a1b      	lsrs	r3, r3, #8
 8000c48:	b29b      	uxth	r3, r3
 8000c4a:	8013      	strh	r3, [r2, #0]
	TFT_REG=y1&0xFF;
 8000c4c:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000c50:	88ba      	ldrh	r2, [r7, #4]
 8000c52:	b2d2      	uxtb	r2, r2
 8000c54:	b292      	uxth	r2, r2
 8000c56:	801a      	strh	r2, [r3, #0]
	TFT_REG=y2>>8;
 8000c58:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000c5c:	883b      	ldrh	r3, [r7, #0]
 8000c5e:	0a1b      	lsrs	r3, r3, #8
 8000c60:	b29b      	uxth	r3, r3
 8000c62:	8013      	strh	r3, [r2, #0]
	TFT_REG=y2&0xFF;
 8000c64:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000c68:	883a      	ldrh	r2, [r7, #0]
 8000c6a:	b2d2      	uxtb	r2, r2
 8000c6c:	b292      	uxth	r2, r2
 8000c6e:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_SET);
 8000c70:	2201      	movs	r2, #1
 8000c72:	2180      	movs	r1, #128	; 0x80
 8000c74:	4803      	ldr	r0, [pc, #12]	; (8000c84 <ili9488_set_coordinates+0xf0>)
 8000c76:	f001 fdd3 	bl	8002820 <HAL_GPIO_WritePin>
}
 8000c7a:	bf00      	nop
 8000c7c:	370c      	adds	r7, #12
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd90      	pop	{r4, r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40020c00 	.word	0x40020c00

08000c88 <configFromUart>:

/*
 * Attempts to read configuration data from UART and save them to external flash.
 * Returns: 0 when configuration successful, 1 when no configuration data detected on uart, 2 or greater when configuration failed
 */
int configFromUart(){
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	f5ad 7d2e 	sub.w	sp, sp, #696	; 0x2b8
 8000c8e:	af00      	add	r7, sp, #0

	char msg[128];

	int count = read_usart_message(msg, &huart1, sizeof(msg), NEWLINE);
 8000c90:	f507 7009 	add.w	r0, r7, #548	; 0x224
 8000c94:	230d      	movs	r3, #13
 8000c96:	2280      	movs	r2, #128	; 0x80
 8000c98:	498f      	ldr	r1, [pc, #572]	; (8000ed8 <configFromUart+0x250>)
 8000c9a:	f001 f991 	bl	8001fc0 <read_usart_message>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4



	if(count == 0){
 8000ca4:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d104      	bne.n	8000cb6 <configFromUart+0x2e>
		printf("[cl] No data on uart.\n\r");
 8000cac:	488b      	ldr	r0, [pc, #556]	; (8000edc <configFromUart+0x254>)
 8000cae:	f003 fd9d 	bl	80047ec <iprintf>
		return 1;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e10b      	b.n	8000ece <configFromUart+0x246>
	}

	msg[count-1] = 0; //replace newline delimiter with null-termination
 8000cb6:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8000cba:	3b01      	subs	r3, #1
 8000cbc:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 8000cc0:	443b      	add	r3, r7
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	f803 2c94 	strb.w	r2, [r3, #-148]

	char expectedFirstMsg[] = "config";
 8000cc8:	4a85      	ldr	r2, [pc, #532]	; (8000ee0 <configFromUart+0x258>)
 8000cca:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8000cce:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000cd2:	6018      	str	r0, [r3, #0]
 8000cd4:	3304      	adds	r3, #4
 8000cd6:	8019      	strh	r1, [r3, #0]
 8000cd8:	3302      	adds	r3, #2
 8000cda:	0c0a      	lsrs	r2, r1, #16
 8000cdc:	701a      	strb	r2, [r3, #0]

	if(strcmp(expectedFirstMsg, msg) != 0){
 8000cde:	f507 7209 	add.w	r2, r7, #548	; 0x224
 8000ce2:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8000ce6:	4611      	mov	r1, r2
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff fa71 	bl	80001d0 <strcmp>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d009      	beq.n	8000d08 <configFromUart+0x80>
		printf("[cl] Unexpected first msg. Got %s, wanted %s.\n\r", msg, expectedFirstMsg);
 8000cf4:	f507 7207 	add.w	r2, r7, #540	; 0x21c
 8000cf8:	f507 7309 	add.w	r3, r7, #548	; 0x224
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4879      	ldr	r0, [pc, #484]	; (8000ee4 <configFromUart+0x25c>)
 8000d00:	f003 fd74 	bl	80047ec <iprintf>
		return 1;
 8000d04:	2301      	movs	r3, #1
 8000d06:	e0e2      	b.n	8000ece <configFromUart+0x246>
	}

	UART_READ_LINE(); //read general config - number of screens
 8000d08:	f507 7009 	add.w	r0, r7, #548	; 0x224
 8000d0c:	230d      	movs	r3, #13
 8000d0e:	2280      	movs	r2, #128	; 0x80
 8000d10:	4971      	ldr	r1, [pc, #452]	; (8000ed8 <configFromUart+0x250>)
 8000d12:	f001 f955 	bl	8001fc0 <read_usart_message>
 8000d16:	4603      	mov	r3, r0
 8000d18:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
 8000d1c:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d0f1      	beq.n	8000d08 <configFromUart+0x80>
 8000d24:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8000d28:	3b01      	subs	r3, #1
 8000d2a:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 8000d2e:	443b      	add	r3, r7
 8000d30:	2200      	movs	r2, #0
 8000d32:	f803 2c94 	strb.w	r2, [r3, #-148]

	int totalScreens = atoi(msg);
 8000d36:	f507 7309 	add.w	r3, r7, #548	; 0x224
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f003 fd20 	bl	8004780 <atoi>
 8000d40:	f8c7 02b0 	str.w	r0, [r7, #688]	; 0x2b0

	if(totalScreens < 1 || totalScreens >256){
 8000d44:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	dd04      	ble.n	8000d56 <configFromUart+0xce>
 8000d4c:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8000d50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d54:	dd06      	ble.n	8000d64 <configFromUart+0xdc>
		printf("[cl] Got %d, which is not a valid number of screens.\n\r", totalScreens);
 8000d56:	f8d7 12b0 	ldr.w	r1, [r7, #688]	; 0x2b0
 8000d5a:	4863      	ldr	r0, [pc, #396]	; (8000ee8 <configFromUart+0x260>)
 8000d5c:	f003 fd46 	bl	80047ec <iprintf>
		return 2;
 8000d60:	2302      	movs	r3, #2
 8000d62:	e0b4      	b.n	8000ece <configFromUart+0x246>
	}

	struct generalConfig gconf;

	memset(&gconf.screenSectors, 0, sizeof(gconf.screenSectors));
 8000d64:	f107 0318 	add.w	r3, r7, #24
 8000d68:	3302      	adds	r3, #2
 8000d6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d6e:	2100      	movs	r1, #0
 8000d70:	4618      	mov	r0, r3
 8000d72:	f003 fd33 	bl	80047dc <memset>
	gconf.totalScreens = totalScreens;
 8000d76:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8000d7a:	b2da      	uxtb	r2, r3
 8000d7c:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8000d80:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8000d84:	701a      	strb	r2, [r3, #0]

	printf("[cl] Ok, expecting %d screens worth of data.\n\r", totalScreens);
 8000d86:	f8d7 12b0 	ldr.w	r1, [r7, #688]	; 0x2b0
 8000d8a:	4858      	ldr	r0, [pc, #352]	; (8000eec <configFromUart+0x264>)
 8000d8c:	f003 fd2e 	bl	80047ec <iprintf>

	uint16_t curentScreenIndex = 0;
 8000d90:	2300      	movs	r3, #0
 8000d92:	f8a7 32ae 	strh.w	r3, [r7, #686]	; 0x2ae
	uint16_t currentScreenSector = GENERAL_CONFIG_SECTOR + 1;
 8000d96:	2301      	movs	r3, #1
 8000d98:	f8a7 32ac 	strh.w	r3, [r7, #684]	; 0x2ac
	uint32_t currentScreenByteBudget = 0;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
	uint16_t currentScreenObjectsLeft = 0;
 8000da2:	2300      	movs	r3, #0
 8000da4:	f8a7 32a6 	strh.w	r3, [r7, #678]	; 0x2a6

	char screenStr[] = "screen";
 8000da8:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8000dac:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 8000db0:	4a4f      	ldr	r2, [pc, #316]	; (8000ef0 <configFromUart+0x268>)
 8000db2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000db6:	6018      	str	r0, [r3, #0]
 8000db8:	3304      	adds	r3, #4
 8000dba:	8019      	strh	r1, [r3, #0]
 8000dbc:	3302      	adds	r3, #2
 8000dbe:	0c0a      	lsrs	r2, r1, #16
 8000dc0:	701a      	strb	r2, [r3, #0]

	while(1){

		if(curentScreenIndex == totalScreens){
 8000dc2:	f8b7 32ae 	ldrh.w	r3, [r7, #686]	; 0x2ae
 8000dc6:	f8d7 22b0 	ldr.w	r2, [r7, #688]	; 0x2b0
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	d105      	bne.n	8000dda <configFromUart+0x152>
			printf("[cl] All screens' data received.\n\r");
 8000dce:	4849      	ldr	r0, [pc, #292]	; (8000ef4 <configFromUart+0x26c>)
 8000dd0:	f003 fd0c 	bl	80047ec <iprintf>
			break;
 8000dd4:	bf00      	nop

	}



	return 0;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	e079      	b.n	8000ece <configFromUart+0x246>
		UART_READ_LINE();
 8000dda:	f507 7009 	add.w	r0, r7, #548	; 0x224
 8000dde:	230d      	movs	r3, #13
 8000de0:	2280      	movs	r2, #128	; 0x80
 8000de2:	493d      	ldr	r1, [pc, #244]	; (8000ed8 <configFromUart+0x250>)
 8000de4:	f001 f8ec 	bl	8001fc0 <read_usart_message>
 8000de8:	4603      	mov	r3, r0
 8000dea:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
 8000dee:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d0f1      	beq.n	8000dda <configFromUart+0x152>
 8000df6:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8000dfa:	3b01      	subs	r3, #1
 8000dfc:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 8000e00:	443b      	add	r3, r7
 8000e02:	2200      	movs	r2, #0
 8000e04:	f803 2c94 	strb.w	r2, [r3, #-148]
		if(strcmp(screenStr, msg) != 0){
 8000e08:	f507 7209 	add.w	r2, r7, #548	; 0x224
 8000e0c:	f107 0310 	add.w	r3, r7, #16
 8000e10:	4611      	mov	r1, r2
 8000e12:	4618      	mov	r0, r3
 8000e14:	f7ff f9dc 	bl	80001d0 <strcmp>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d009      	beq.n	8000e32 <configFromUart+0x1aa>
			printf("[cl] Unexpected input - wanted %s, got %s. \n\r",screenStr, msg);
 8000e1e:	f507 7209 	add.w	r2, r7, #548	; 0x224
 8000e22:	f107 0310 	add.w	r3, r7, #16
 8000e26:	4619      	mov	r1, r3
 8000e28:	4833      	ldr	r0, [pc, #204]	; (8000ef8 <configFromUart+0x270>)
 8000e2a:	f003 fcdf 	bl	80047ec <iprintf>
			return 3;
 8000e2e:	2303      	movs	r3, #3
 8000e30:	e04d      	b.n	8000ece <configFromUart+0x246>
		UART_READ_LINE();
 8000e32:	f507 7009 	add.w	r0, r7, #548	; 0x224
 8000e36:	230d      	movs	r3, #13
 8000e38:	2280      	movs	r2, #128	; 0x80
 8000e3a:	4927      	ldr	r1, [pc, #156]	; (8000ed8 <configFromUart+0x250>)
 8000e3c:	f001 f8c0 	bl	8001fc0 <read_usart_message>
 8000e40:	4603      	mov	r3, r0
 8000e42:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
 8000e46:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d0f1      	beq.n	8000e32 <configFromUart+0x1aa>
 8000e4e:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8000e52:	3b01      	subs	r3, #1
 8000e54:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 8000e58:	443b      	add	r3, r7
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	f803 2c94 	strb.w	r2, [r3, #-148]
		currentScreenObjectsLeft = atoi(msg);
 8000e60:	f507 7309 	add.w	r3, r7, #548	; 0x224
 8000e64:	4618      	mov	r0, r3
 8000e66:	f003 fc8b 	bl	8004780 <atoi>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	f8a7 32a6 	strh.w	r3, [r7, #678]	; 0x2a6
		printf("[cl] Ok, expecting %d objects for current screen.\n\r", currentScreenObjectsLeft);
 8000e70:	f8b7 32a6 	ldrh.w	r3, [r7, #678]	; 0x2a6
 8000e74:	4619      	mov	r1, r3
 8000e76:	4821      	ldr	r0, [pc, #132]	; (8000efc <configFromUart+0x274>)
 8000e78:	f003 fcb8 	bl	80047ec <iprintf>
		while(currentScreenObjectsLeft > 0){
 8000e7c:	e022      	b.n	8000ec4 <configFromUart+0x23c>
			UART_READ_LINE();
 8000e7e:	f507 7009 	add.w	r0, r7, #548	; 0x224
 8000e82:	230d      	movs	r3, #13
 8000e84:	2280      	movs	r2, #128	; 0x80
 8000e86:	4914      	ldr	r1, [pc, #80]	; (8000ed8 <configFromUart+0x250>)
 8000e88:	f001 f89a 	bl	8001fc0 <read_usart_message>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
 8000e92:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d0f1      	beq.n	8000e7e <configFromUart+0x1f6>
 8000e9a:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8000e9e:	3b01      	subs	r3, #1
 8000ea0:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 8000ea4:	443b      	add	r3, r7
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	f803 2c94 	strb.w	r2, [r3, #-148]
			currentObject.objectType = parseTypeFromString(msg);
 8000eac:	f507 7309 	add.w	r3, r7, #548	; 0x224
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f000 f825 	bl	8000f00 <parseTypeFromString>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	461a      	mov	r2, r3
 8000eba:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8000ebe:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 8000ec2:	701a      	strb	r2, [r3, #0]
		while(currentScreenObjectsLeft > 0){
 8000ec4:	f8b7 32a6 	ldrh.w	r3, [r7, #678]	; 0x2a6
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d1d8      	bne.n	8000e7e <configFromUart+0x1f6>
		if(curentScreenIndex == totalScreens){
 8000ecc:	e779      	b.n	8000dc2 <configFromUart+0x13a>

}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f507 772e 	add.w	r7, r7, #696	; 0x2b8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	20000198 	.word	0x20000198
 8000edc:	08005854 	.word	0x08005854
 8000ee0:	0800598c 	.word	0x0800598c
 8000ee4:	0800586c 	.word	0x0800586c
 8000ee8:	0800589c 	.word	0x0800589c
 8000eec:	080058d4 	.word	0x080058d4
 8000ef0:	08005994 	.word	0x08005994
 8000ef4:	08005904 	.word	0x08005904
 8000ef8:	08005928 	.word	0x08005928
 8000efc:	08005958 	.word	0x08005958

08000f00 <parseTypeFromString>:


objectType_t parseTypeFromString(char *str){
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b088      	sub	sp, #32
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
	const char *typeNames[] 	= 		{"rectangle", "button", "label"};
 8000f08:	4a19      	ldr	r2, [pc, #100]	; (8000f70 <parseTypeFromString+0x70>)
 8000f0a:	f107 030c 	add.w	r3, r7, #12
 8000f0e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f10:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	const objectType_t types[] 	= 		{rectangle, button, label};
 8000f14:	4a17      	ldr	r2, [pc, #92]	; (8000f74 <parseTypeFromString+0x74>)
 8000f16:	f107 0308 	add.w	r3, r7, #8
 8000f1a:	6812      	ldr	r2, [r2, #0]
 8000f1c:	4611      	mov	r1, r2
 8000f1e:	8019      	strh	r1, [r3, #0]
 8000f20:	3302      	adds	r3, #2
 8000f22:	0c12      	lsrs	r2, r2, #16
 8000f24:	701a      	strb	r2, [r3, #0]

	int typeCount = 3;
 8000f26:	2303      	movs	r3, #3
 8000f28:	61bb      	str	r3, [r7, #24]
	int i;

	for(i=0; i<typeCount; i++){
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	61fb      	str	r3, [r7, #28]
 8000f2e:	e015      	b.n	8000f5c <parseTypeFromString+0x5c>
		if(strcmp(typeNames[i], str) == 0){
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	3320      	adds	r3, #32
 8000f36:	443b      	add	r3, r7
 8000f38:	f853 3c14 	ldr.w	r3, [r3, #-20]
 8000f3c:	6879      	ldr	r1, [r7, #4]
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff f946 	bl	80001d0 <strcmp>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d105      	bne.n	8000f56 <parseTypeFromString+0x56>
			return types[i];
 8000f4a:	f107 0208 	add.w	r2, r7, #8
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	4413      	add	r3, r2
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	e007      	b.n	8000f66 <parseTypeFromString+0x66>
	for(i=0; i<typeCount; i++){
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	3301      	adds	r3, #1
 8000f5a:	61fb      	str	r3, [r7, #28]
 8000f5c:	69fa      	ldr	r2, [r7, #28]
 8000f5e:	69bb      	ldr	r3, [r7, #24]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	dbe5      	blt.n	8000f30 <parseTypeFromString+0x30>
		}
	}

	return none;
 8000f64:	2300      	movs	r3, #0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3720      	adds	r7, #32
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	0800599c 	.word	0x0800599c
 8000f74:	080059a8 	.word	0x080059a8

08000f78 <flashCSSet>:
#include "spiRoutines.h"
#include <stm32f4xx_hal.h>
#include <stm32f4xx_hal_gpio.h>
#include <stdio.h>

void flashCSSet(){
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	2110      	movs	r1, #16
 8000f80:	4802      	ldr	r0, [pc, #8]	; (8000f8c <flashCSSet+0x14>)
 8000f82:	f001 fc4d 	bl	8002820 <HAL_GPIO_WritePin>
}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40020000 	.word	0x40020000

08000f90 <flashCSReset>:

void flashCSReset(){
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8000f94:	2200      	movs	r2, #0
 8000f96:	2110      	movs	r1, #16
 8000f98:	4802      	ldr	r0, [pc, #8]	; (8000fa4 <flashCSReset+0x14>)
 8000f9a:	f001 fc41 	bl	8002820 <HAL_GPIO_WritePin>
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40020000 	.word	0x40020000

08000fa8 <ext_flash_read>:
	ext_flash_continuous_write_begin(sector_adress);
	ext_flash_continuous_write_write(buff, len);
	ext_flash_continuous_write_finish();
}
void ext_flash_read(unsigned int sector_adress, unsigned char *buff, unsigned int len)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	607a      	str	r2, [r7, #4]
	ext_flash_continuous_read_begin(sector_adress);
 8000fb4:	68f8      	ldr	r0, [r7, #12]
 8000fb6:	f000 f80a 	bl	8000fce <ext_flash_continuous_read_begin>
	ext_flash_continuous_read_read(buff, len);
 8000fba:	6879      	ldr	r1, [r7, #4]
 8000fbc:	68b8      	ldr	r0, [r7, #8]
 8000fbe:	f000 f824 	bl	800100a <ext_flash_continuous_read_read>
	ext_flash_continuous_read_finish();
 8000fc2:	f000 f83e 	bl	8001042 <ext_flash_continuous_read_finish>
}
 8000fc6:	bf00      	nop
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <ext_flash_continuous_read_begin>:
	flashCSSet();
}


//Continuous functions below keep conection open while reading, allowing for access to data not aligned to 4kB sectors
void ext_flash_continuous_read_begin(unsigned int sector_adress){
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b082      	sub	sp, #8
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	6078      	str	r0, [r7, #4]
	command[0]=0x03;
	command[1]=((char *)&sector_adress)[3];
	command[2]=((char *)&sector_adress)[2];
	command[3]=((char *)&sector_adress)[1];*/

	flashCSReset();
 8000fd6:	f7ff ffdb 	bl	8000f90 <flashCSReset>

	SPI1_Transfer(0x03);
 8000fda:	2003      	movs	r0, #3
 8000fdc:	f000 fb28 	bl	8001630 <SPI1_Transfer>
	SPI1_Transfer((sector_adress>>16)&0xFF);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	0c1b      	lsrs	r3, r3, #16
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f000 fb22 	bl	8001630 <SPI1_Transfer>
	SPI1_Transfer((sector_adress>>8)&0xFF);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	0a1b      	lsrs	r3, r3, #8
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 fb1c 	bl	8001630 <SPI1_Transfer>
	SPI1_Transfer(sector_adress&0xFF);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f000 fb17 	bl	8001630 <SPI1_Transfer>
}
 8001002:	bf00      	nop
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <ext_flash_continuous_read_read>:

void ext_flash_continuous_read_read(unsigned char *buff, unsigned int len){
 800100a:	b590      	push	{r4, r7, lr}
 800100c:	b085      	sub	sp, #20
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
 8001012:	6039      	str	r1, [r7, #0]
	for(unsigned int i = 0; i<len; i++){
 8001014:	2300      	movs	r3, #0
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	e00a      	b.n	8001030 <ext_flash_continuous_read_read+0x26>
		*(buff+i) = SPI1_Transfer(0x00);
 800101a:	687a      	ldr	r2, [r7, #4]
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	18d4      	adds	r4, r2, r3
 8001020:	2000      	movs	r0, #0
 8001022:	f000 fb05 	bl	8001630 <SPI1_Transfer>
 8001026:	4603      	mov	r3, r0
 8001028:	7023      	strb	r3, [r4, #0]
	for(unsigned int i = 0; i<len; i++){
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	3301      	adds	r3, #1
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	68fa      	ldr	r2, [r7, #12]
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	429a      	cmp	r2, r3
 8001036:	d3f0      	bcc.n	800101a <ext_flash_continuous_read_read+0x10>
	}
}
 8001038:	bf00      	nop
 800103a:	bf00      	nop
 800103c:	3714      	adds	r7, #20
 800103e:	46bd      	mov	sp, r7
 8001040:	bd90      	pop	{r4, r7, pc}

08001042 <ext_flash_continuous_read_finish>:
void ext_flash_continuous_read_skip(unsigned int len){
	for(unsigned int i = 0; i<len; i++){
			SPI1_Transfer(0x00);
	}
}
void ext_flash_continuous_read_finish(){
 8001042:	b580      	push	{r7, lr}
 8001044:	af00      	add	r7, sp, #0
	flashCSSet();
 8001046:	f7ff ff97 	bl	8000f78 <flashCSSet>
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
	...

08001050 <flashDemoPrintLast>:
#include <string.h>
#include "extFlash.h"

#define demoFlashAddr 0x00

void flashDemoPrintLast(){
 8001050:	b580      	push	{r7, lr}
 8001052:	b090      	sub	sp, #64	; 0x40
 8001054:	af00      	add	r7, sp, #0
	char flashMsg[64];
	ext_flash_read(demoFlashAddr, flashMsg, 64);
 8001056:	463b      	mov	r3, r7
 8001058:	2240      	movs	r2, #64	; 0x40
 800105a:	4619      	mov	r1, r3
 800105c:	2000      	movs	r0, #0
 800105e:	f7ff ffa3 	bl	8000fa8 <ext_flash_read>
	flashMsg[63] = 0; //just to be safe
 8001062:	2300      	movs	r3, #0
 8001064:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	printf("[FLASH demo] Read message from flash: \"%s\".\r\n", flashMsg);
 8001068:	463b      	mov	r3, r7
 800106a:	4619      	mov	r1, r3
 800106c:	4803      	ldr	r0, [pc, #12]	; (800107c <flashDemoPrintLast+0x2c>)
 800106e:	f003 fbbd 	bl	80047ec <iprintf>
}
 8001072:	bf00      	nop
 8001074:	3740      	adds	r7, #64	; 0x40
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	080059ac 	.word	0x080059ac

08001080 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001086:	f000 fff5 	bl	8002074 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800108a:	f000 f835 	bl	80010f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800108e:	f000 f9a3 	bl	80013d8 <MX_GPIO_Init>
  MX_FSMC_Init();
 8001092:	f000 fa4d 	bl	8001530 <MX_FSMC_Init>
  MX_USART1_UART_Init();
 8001096:	f000 f93b 	bl	8001310 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 800109a:	f000 f897 	bl	80011cc <MX_I2C1_Init>
  MX_SPI3_Init();
 800109e:	f000 f901 	bl	80012a4 <MX_SPI3_Init>
  MX_SPI1_Init();
 80010a2:	f000 f8c1 	bl	8001228 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80010a6:	f000 f965 	bl	8001374 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  //enable uart interrupt
  Init_LCD();
 80010aa:	f7ff fa73 	bl	8000594 <Init_LCD>
  static int blOn = 0;
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("Entering main loop\n\r");
 80010ae:	4810      	ldr	r0, [pc, #64]	; (80010f0 <main+0x70>)
 80010b0:	f003 fb9c 	bl	80047ec <iprintf>

  flashDemoPrintLast();
 80010b4:	f7ff ffcc 	bl	8001050 <flashDemoPrintLast>

  int loopNumber = 0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	60fb      	str	r3, [r7, #12]

  while (1)
  {
	int secSleep = 2;
 80010bc:	2302      	movs	r3, #2
 80010be:	60bb      	str	r3, [r7, #8]
	int msecSleep = 500;
 80010c0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80010c4:	607b      	str	r3, [r7, #4]
	printf("Sleeping %d.%d secs.  LN %d\r\n", secSleep, msecSleep, loopNumber++);
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	1c5a      	adds	r2, r3, #1
 80010ca:	60fa      	str	r2, [r7, #12]
 80010cc:	687a      	ldr	r2, [r7, #4]
 80010ce:	68b9      	ldr	r1, [r7, #8]
 80010d0:	4808      	ldr	r0, [pc, #32]	; (80010f4 <main+0x74>)
 80010d2:	f003 fb8b 	bl	80047ec <iprintf>
	HAL_Delay(1000*secSleep + msecSleep);
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010dc:	fb03 f202 	mul.w	r2, r3, r2
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	4413      	add	r3, r2
 80010e4:	4618      	mov	r0, r3
 80010e6:	f001 f837 	bl	8002158 <HAL_Delay>

	configFromUart();
 80010ea:	f7ff fdcd 	bl	8000c88 <configFromUart>
  {
 80010ee:	e7e5      	b.n	80010bc <main+0x3c>
 80010f0:	08005a4c 	.word	0x08005a4c
 80010f4:	08005a64 	.word	0x08005a64

080010f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b094      	sub	sp, #80	; 0x50
 80010fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010fe:	f107 0320 	add.w	r3, r7, #32
 8001102:	2230      	movs	r2, #48	; 0x30
 8001104:	2100      	movs	r1, #0
 8001106:	4618      	mov	r0, r3
 8001108:	f003 fb68 	bl	80047dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800110c:	f107 030c 	add.w	r3, r7, #12
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
 800111a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800111c:	2300      	movs	r3, #0
 800111e:	60bb      	str	r3, [r7, #8]
 8001120:	4b28      	ldr	r3, [pc, #160]	; (80011c4 <SystemClock_Config+0xcc>)
 8001122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001124:	4a27      	ldr	r2, [pc, #156]	; (80011c4 <SystemClock_Config+0xcc>)
 8001126:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800112a:	6413      	str	r3, [r2, #64]	; 0x40
 800112c:	4b25      	ldr	r3, [pc, #148]	; (80011c4 <SystemClock_Config+0xcc>)
 800112e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001130:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001134:	60bb      	str	r3, [r7, #8]
 8001136:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001138:	2300      	movs	r3, #0
 800113a:	607b      	str	r3, [r7, #4]
 800113c:	4b22      	ldr	r3, [pc, #136]	; (80011c8 <SystemClock_Config+0xd0>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a21      	ldr	r2, [pc, #132]	; (80011c8 <SystemClock_Config+0xd0>)
 8001142:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001146:	6013      	str	r3, [r2, #0]
 8001148:	4b1f      	ldr	r3, [pc, #124]	; (80011c8 <SystemClock_Config+0xd0>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001150:	607b      	str	r3, [r7, #4]
 8001152:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001154:	2301      	movs	r3, #1
 8001156:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001158:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800115c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800115e:	2302      	movs	r3, #2
 8001160:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001162:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001166:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001168:	2308      	movs	r3, #8
 800116a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800116c:	23a8      	movs	r3, #168	; 0xa8
 800116e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001170:	2302      	movs	r3, #2
 8001172:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001174:	2304      	movs	r3, #4
 8001176:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001178:	f107 0320 	add.w	r3, r7, #32
 800117c:	4618      	mov	r0, r3
 800117e:	f001 fcad 	bl	8002adc <HAL_RCC_OscConfig>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001188:	f000 fa4c 	bl	8001624 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800118c:	230f      	movs	r3, #15
 800118e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001190:	2302      	movs	r3, #2
 8001192:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001194:	2300      	movs	r3, #0
 8001196:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001198:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800119c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800119e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011a4:	f107 030c 	add.w	r3, r7, #12
 80011a8:	2105      	movs	r1, #5
 80011aa:	4618      	mov	r0, r3
 80011ac:	f001 ff0e 	bl	8002fcc <HAL_RCC_ClockConfig>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80011b6:	f000 fa35 	bl	8001624 <Error_Handler>
  }
}
 80011ba:	bf00      	nop
 80011bc:	3750      	adds	r7, #80	; 0x50
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40023800 	.word	0x40023800
 80011c8:	40007000 	.word	0x40007000

080011cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011d0:	4b12      	ldr	r3, [pc, #72]	; (800121c <MX_I2C1_Init+0x50>)
 80011d2:	4a13      	ldr	r2, [pc, #76]	; (8001220 <MX_I2C1_Init+0x54>)
 80011d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80011d6:	4b11      	ldr	r3, [pc, #68]	; (800121c <MX_I2C1_Init+0x50>)
 80011d8:	4a12      	ldr	r2, [pc, #72]	; (8001224 <MX_I2C1_Init+0x58>)
 80011da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011dc:	4b0f      	ldr	r3, [pc, #60]	; (800121c <MX_I2C1_Init+0x50>)
 80011de:	2200      	movs	r2, #0
 80011e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011e2:	4b0e      	ldr	r3, [pc, #56]	; (800121c <MX_I2C1_Init+0x50>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011e8:	4b0c      	ldr	r3, [pc, #48]	; (800121c <MX_I2C1_Init+0x50>)
 80011ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011f0:	4b0a      	ldr	r3, [pc, #40]	; (800121c <MX_I2C1_Init+0x50>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011f6:	4b09      	ldr	r3, [pc, #36]	; (800121c <MX_I2C1_Init+0x50>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011fc:	4b07      	ldr	r3, [pc, #28]	; (800121c <MX_I2C1_Init+0x50>)
 80011fe:	2200      	movs	r2, #0
 8001200:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001202:	4b06      	ldr	r3, [pc, #24]	; (800121c <MX_I2C1_Init+0x50>)
 8001204:	2200      	movs	r2, #0
 8001206:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001208:	4804      	ldr	r0, [pc, #16]	; (800121c <MX_I2C1_Init+0x50>)
 800120a:	f001 fb23 	bl	8002854 <HAL_I2C_Init>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001214:	f000 fa06 	bl	8001624 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001218:	bf00      	nop
 800121a:	bd80      	pop	{r7, pc}
 800121c:	20000094 	.word	0x20000094
 8001220:	40005400 	.word	0x40005400
 8001224:	000186a0 	.word	0x000186a0

08001228 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800122c:	4b1b      	ldr	r3, [pc, #108]	; (800129c <MX_SPI1_Init+0x74>)
 800122e:	4a1c      	ldr	r2, [pc, #112]	; (80012a0 <MX_SPI1_Init+0x78>)
 8001230:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001232:	4b1a      	ldr	r3, [pc, #104]	; (800129c <MX_SPI1_Init+0x74>)
 8001234:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001238:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800123a:	4b18      	ldr	r3, [pc, #96]	; (800129c <MX_SPI1_Init+0x74>)
 800123c:	2200      	movs	r2, #0
 800123e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001240:	4b16      	ldr	r3, [pc, #88]	; (800129c <MX_SPI1_Init+0x74>)
 8001242:	2200      	movs	r2, #0
 8001244:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001246:	4b15      	ldr	r3, [pc, #84]	; (800129c <MX_SPI1_Init+0x74>)
 8001248:	2202      	movs	r2, #2
 800124a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800124c:	4b13      	ldr	r3, [pc, #76]	; (800129c <MX_SPI1_Init+0x74>)
 800124e:	2201      	movs	r2, #1
 8001250:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001252:	4b12      	ldr	r3, [pc, #72]	; (800129c <MX_SPI1_Init+0x74>)
 8001254:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001258:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800125a:	4b10      	ldr	r3, [pc, #64]	; (800129c <MX_SPI1_Init+0x74>)
 800125c:	2200      	movs	r2, #0
 800125e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001260:	4b0e      	ldr	r3, [pc, #56]	; (800129c <MX_SPI1_Init+0x74>)
 8001262:	2200      	movs	r2, #0
 8001264:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001266:	4b0d      	ldr	r3, [pc, #52]	; (800129c <MX_SPI1_Init+0x74>)
 8001268:	2200      	movs	r2, #0
 800126a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800126c:	4b0b      	ldr	r3, [pc, #44]	; (800129c <MX_SPI1_Init+0x74>)
 800126e:	2200      	movs	r2, #0
 8001270:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001272:	4b0a      	ldr	r3, [pc, #40]	; (800129c <MX_SPI1_Init+0x74>)
 8001274:	220a      	movs	r2, #10
 8001276:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001278:	4808      	ldr	r0, [pc, #32]	; (800129c <MX_SPI1_Init+0x74>)
 800127a:	f002 f8c5 	bl	8003408 <HAL_SPI_Init>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001284:	f000 f9ce 	bl	8001624 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  __HAL_SPI_ENABLE(&hspi1);
 8001288:	4b04      	ldr	r3, [pc, #16]	; (800129c <MX_SPI1_Init+0x74>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	4b03      	ldr	r3, [pc, #12]	; (800129c <MX_SPI1_Init+0x74>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001296:	601a      	str	r2, [r3, #0]
  /* USER CODE END SPI1_Init 2 */

}
 8001298:	bf00      	nop
 800129a:	bd80      	pop	{r7, pc}
 800129c:	200000e8 	.word	0x200000e8
 80012a0:	40013000 	.word	0x40013000

080012a4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80012a8:	4b17      	ldr	r3, [pc, #92]	; (8001308 <MX_SPI3_Init+0x64>)
 80012aa:	4a18      	ldr	r2, [pc, #96]	; (800130c <MX_SPI3_Init+0x68>)
 80012ac:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80012ae:	4b16      	ldr	r3, [pc, #88]	; (8001308 <MX_SPI3_Init+0x64>)
 80012b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012b4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80012b6:	4b14      	ldr	r3, [pc, #80]	; (8001308 <MX_SPI3_Init+0x64>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80012bc:	4b12      	ldr	r3, [pc, #72]	; (8001308 <MX_SPI3_Init+0x64>)
 80012be:	2200      	movs	r2, #0
 80012c0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012c2:	4b11      	ldr	r3, [pc, #68]	; (8001308 <MX_SPI3_Init+0x64>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012c8:	4b0f      	ldr	r3, [pc, #60]	; (8001308 <MX_SPI3_Init+0x64>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80012ce:	4b0e      	ldr	r3, [pc, #56]	; (8001308 <MX_SPI3_Init+0x64>)
 80012d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012d4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80012d6:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <MX_SPI3_Init+0x64>)
 80012d8:	2200      	movs	r2, #0
 80012da:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012dc:	4b0a      	ldr	r3, [pc, #40]	; (8001308 <MX_SPI3_Init+0x64>)
 80012de:	2200      	movs	r2, #0
 80012e0:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80012e2:	4b09      	ldr	r3, [pc, #36]	; (8001308 <MX_SPI3_Init+0x64>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012e8:	4b07      	ldr	r3, [pc, #28]	; (8001308 <MX_SPI3_Init+0x64>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80012ee:	4b06      	ldr	r3, [pc, #24]	; (8001308 <MX_SPI3_Init+0x64>)
 80012f0:	220a      	movs	r2, #10
 80012f2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80012f4:	4804      	ldr	r0, [pc, #16]	; (8001308 <MX_SPI3_Init+0x64>)
 80012f6:	f002 f887 	bl	8003408 <HAL_SPI_Init>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001300:	f000 f990 	bl	8001624 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001304:	bf00      	nop
 8001306:	bd80      	pop	{r7, pc}
 8001308:	20000140 	.word	0x20000140
 800130c:	40003c00 	.word	0x40003c00

08001310 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001314:	4b15      	ldr	r3, [pc, #84]	; (800136c <MX_USART1_UART_Init+0x5c>)
 8001316:	4a16      	ldr	r2, [pc, #88]	; (8001370 <MX_USART1_UART_Init+0x60>)
 8001318:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800131a:	4b14      	ldr	r3, [pc, #80]	; (800136c <MX_USART1_UART_Init+0x5c>)
 800131c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001320:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001322:	4b12      	ldr	r3, [pc, #72]	; (800136c <MX_USART1_UART_Init+0x5c>)
 8001324:	2200      	movs	r2, #0
 8001326:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001328:	4b10      	ldr	r3, [pc, #64]	; (800136c <MX_USART1_UART_Init+0x5c>)
 800132a:	2200      	movs	r2, #0
 800132c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800132e:	4b0f      	ldr	r3, [pc, #60]	; (800136c <MX_USART1_UART_Init+0x5c>)
 8001330:	2200      	movs	r2, #0
 8001332:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001334:	4b0d      	ldr	r3, [pc, #52]	; (800136c <MX_USART1_UART_Init+0x5c>)
 8001336:	220c      	movs	r2, #12
 8001338:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800133a:	4b0c      	ldr	r3, [pc, #48]	; (800136c <MX_USART1_UART_Init+0x5c>)
 800133c:	2200      	movs	r2, #0
 800133e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001340:	4b0a      	ldr	r3, [pc, #40]	; (800136c <MX_USART1_UART_Init+0x5c>)
 8001342:	2200      	movs	r2, #0
 8001344:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001346:	4809      	ldr	r0, [pc, #36]	; (800136c <MX_USART1_UART_Init+0x5c>)
 8001348:	f002 f92f 	bl	80035aa <HAL_UART_Init>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001352:	f000 f967 	bl	8001624 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE); //turn on rx interrupt forever
 8001356:	4b05      	ldr	r3, [pc, #20]	; (800136c <MX_USART1_UART_Init+0x5c>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	68da      	ldr	r2, [r3, #12]
 800135c:	4b03      	ldr	r3, [pc, #12]	; (800136c <MX_USART1_UART_Init+0x5c>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f042 0220 	orr.w	r2, r2, #32
 8001364:	60da      	str	r2, [r3, #12]
  /* USER CODE END USART1_Init 2 */

}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	20000198 	.word	0x20000198
 8001370:	40011000 	.word	0x40011000

08001374 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001378:	4b15      	ldr	r3, [pc, #84]	; (80013d0 <MX_USART2_UART_Init+0x5c>)
 800137a:	4a16      	ldr	r2, [pc, #88]	; (80013d4 <MX_USART2_UART_Init+0x60>)
 800137c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800137e:	4b14      	ldr	r3, [pc, #80]	; (80013d0 <MX_USART2_UART_Init+0x5c>)
 8001380:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001384:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001386:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <MX_USART2_UART_Init+0x5c>)
 8001388:	2200      	movs	r2, #0
 800138a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800138c:	4b10      	ldr	r3, [pc, #64]	; (80013d0 <MX_USART2_UART_Init+0x5c>)
 800138e:	2200      	movs	r2, #0
 8001390:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001392:	4b0f      	ldr	r3, [pc, #60]	; (80013d0 <MX_USART2_UART_Init+0x5c>)
 8001394:	2200      	movs	r2, #0
 8001396:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001398:	4b0d      	ldr	r3, [pc, #52]	; (80013d0 <MX_USART2_UART_Init+0x5c>)
 800139a:	220c      	movs	r2, #12
 800139c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800139e:	4b0c      	ldr	r3, [pc, #48]	; (80013d0 <MX_USART2_UART_Init+0x5c>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013a4:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <MX_USART2_UART_Init+0x5c>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013aa:	4809      	ldr	r0, [pc, #36]	; (80013d0 <MX_USART2_UART_Init+0x5c>)
 80013ac:	f002 f8fd 	bl	80035aa <HAL_UART_Init>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013b6:	f000 f935 	bl	8001624 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE); //turn on rx interrupt forever
 80013ba:	4b05      	ldr	r3, [pc, #20]	; (80013d0 <MX_USART2_UART_Init+0x5c>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	68da      	ldr	r2, [r3, #12]
 80013c0:	4b03      	ldr	r3, [pc, #12]	; (80013d0 <MX_USART2_UART_Init+0x5c>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f042 0220 	orr.w	r2, r2, #32
 80013c8:	60da      	str	r2, [r3, #12]
  /* USER CODE END USART2_Init 2 */

}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	200001dc 	.word	0x200001dc
 80013d4:	40004400 	.word	0x40004400

080013d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b08c      	sub	sp, #48	; 0x30
 80013dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013de:	f107 031c 	add.w	r3, r7, #28
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	605a      	str	r2, [r3, #4]
 80013e8:	609a      	str	r2, [r3, #8]
 80013ea:	60da      	str	r2, [r3, #12]
 80013ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	61bb      	str	r3, [r7, #24]
 80013f2:	4b4c      	ldr	r3, [pc, #304]	; (8001524 <MX_GPIO_Init+0x14c>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	4a4b      	ldr	r2, [pc, #300]	; (8001524 <MX_GPIO_Init+0x14c>)
 80013f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013fc:	6313      	str	r3, [r2, #48]	; 0x30
 80013fe:	4b49      	ldr	r3, [pc, #292]	; (8001524 <MX_GPIO_Init+0x14c>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001406:	61bb      	str	r3, [r7, #24]
 8001408:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	617b      	str	r3, [r7, #20]
 800140e:	4b45      	ldr	r3, [pc, #276]	; (8001524 <MX_GPIO_Init+0x14c>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	4a44      	ldr	r2, [pc, #272]	; (8001524 <MX_GPIO_Init+0x14c>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	6313      	str	r3, [r2, #48]	; 0x30
 800141a:	4b42      	ldr	r3, [pc, #264]	; (8001524 <MX_GPIO_Init+0x14c>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	617b      	str	r3, [r7, #20]
 8001424:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	613b      	str	r3, [r7, #16]
 800142a:	4b3e      	ldr	r3, [pc, #248]	; (8001524 <MX_GPIO_Init+0x14c>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	4a3d      	ldr	r2, [pc, #244]	; (8001524 <MX_GPIO_Init+0x14c>)
 8001430:	f043 0310 	orr.w	r3, r3, #16
 8001434:	6313      	str	r3, [r2, #48]	; 0x30
 8001436:	4b3b      	ldr	r3, [pc, #236]	; (8001524 <MX_GPIO_Init+0x14c>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	f003 0310 	and.w	r3, r3, #16
 800143e:	613b      	str	r3, [r7, #16]
 8001440:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	4b37      	ldr	r3, [pc, #220]	; (8001524 <MX_GPIO_Init+0x14c>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	4a36      	ldr	r2, [pc, #216]	; (8001524 <MX_GPIO_Init+0x14c>)
 800144c:	f043 0308 	orr.w	r3, r3, #8
 8001450:	6313      	str	r3, [r2, #48]	; 0x30
 8001452:	4b34      	ldr	r3, [pc, #208]	; (8001524 <MX_GPIO_Init+0x14c>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	f003 0308 	and.w	r3, r3, #8
 800145a:	60fb      	str	r3, [r7, #12]
 800145c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	60bb      	str	r3, [r7, #8]
 8001462:	4b30      	ldr	r3, [pc, #192]	; (8001524 <MX_GPIO_Init+0x14c>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	4a2f      	ldr	r2, [pc, #188]	; (8001524 <MX_GPIO_Init+0x14c>)
 8001468:	f043 0304 	orr.w	r3, r3, #4
 800146c:	6313      	str	r3, [r2, #48]	; 0x30
 800146e:	4b2d      	ldr	r3, [pc, #180]	; (8001524 <MX_GPIO_Init+0x14c>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	f003 0304 	and.w	r3, r3, #4
 8001476:	60bb      	str	r3, [r7, #8]
 8001478:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	607b      	str	r3, [r7, #4]
 800147e:	4b29      	ldr	r3, [pc, #164]	; (8001524 <MX_GPIO_Init+0x14c>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	4a28      	ldr	r2, [pc, #160]	; (8001524 <MX_GPIO_Init+0x14c>)
 8001484:	f043 0302 	orr.w	r3, r3, #2
 8001488:	6313      	str	r3, [r2, #48]	; 0x30
 800148a:	4b26      	ldr	r3, [pc, #152]	; (8001524 <MX_GPIO_Init+0x14c>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	607b      	str	r3, [r7, #4]
 8001494:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LCD_RES_Pin, GPIO_PIN_RESET);
 8001496:	2200      	movs	r2, #0
 8001498:	f241 0110 	movw	r1, #4112	; 0x1010
 800149c:	4822      	ldr	r0, [pc, #136]	; (8001528 <MX_GPIO_Init+0x150>)
 800149e:	f001 f9bf 	bl	8002820 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80014a2:	2200      	movs	r2, #0
 80014a4:	2108      	movs	r1, #8
 80014a6:	4821      	ldr	r0, [pc, #132]	; (800152c <MX_GPIO_Init+0x154>)
 80014a8:	f001 f9ba 	bl	8002820 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80014ac:	2310      	movs	r3, #16
 80014ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b0:	2301      	movs	r3, #1
 80014b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b4:	2300      	movs	r3, #0
 80014b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b8:	2300      	movs	r3, #0
 80014ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014bc:	f107 031c 	add.w	r3, r7, #28
 80014c0:	4619      	mov	r1, r3
 80014c2:	4819      	ldr	r0, [pc, #100]	; (8001528 <MX_GPIO_Init+0x150>)
 80014c4:	f001 f810 	bl	80024e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80014c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80014cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ce:	2300      	movs	r3, #0
 80014d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d2:	2300      	movs	r3, #0
 80014d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d6:	f107 031c 	add.w	r3, r7, #28
 80014da:	4619      	mov	r1, r3
 80014dc:	4812      	ldr	r0, [pc, #72]	; (8001528 <MX_GPIO_Init+0x150>)
 80014de:	f001 f803 	bl	80024e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RES_Pin */
  GPIO_InitStruct.Pin = LCD_RES_Pin;
 80014e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e8:	2301      	movs	r3, #1
 80014ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014ec:	2301      	movs	r3, #1
 80014ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f0:	2303      	movs	r3, #3
 80014f2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_RES_GPIO_Port, &GPIO_InitStruct);
 80014f4:	f107 031c 	add.w	r3, r7, #28
 80014f8:	4619      	mov	r1, r3
 80014fa:	480b      	ldr	r0, [pc, #44]	; (8001528 <MX_GPIO_Init+0x150>)
 80014fc:	f000 fff4 	bl	80024e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001500:	2308      	movs	r3, #8
 8001502:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001504:	2301      	movs	r3, #1
 8001506:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	2300      	movs	r3, #0
 800150a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150c:	2300      	movs	r3, #0
 800150e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001510:	f107 031c 	add.w	r3, r7, #28
 8001514:	4619      	mov	r1, r3
 8001516:	4805      	ldr	r0, [pc, #20]	; (800152c <MX_GPIO_Init+0x154>)
 8001518:	f000 ffe6 	bl	80024e8 <HAL_GPIO_Init>

}
 800151c:	bf00      	nop
 800151e:	3730      	adds	r7, #48	; 0x30
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	40023800 	.word	0x40023800
 8001528:	40020000 	.word	0x40020000
 800152c:	40020400 	.word	0x40020400

08001530 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b08e      	sub	sp, #56	; 0x38
 8001534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001536:	f107 031c 	add.w	r3, r7, #28
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	605a      	str	r2, [r3, #4]
 8001540:	609a      	str	r2, [r3, #8]
 8001542:	60da      	str	r2, [r3, #12]
 8001544:	611a      	str	r2, [r3, #16]
 8001546:	615a      	str	r2, [r3, #20]
 8001548:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 800154a:	463b      	mov	r3, r7
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	609a      	str	r2, [r3, #8]
 8001554:	60da      	str	r2, [r3, #12]
 8001556:	611a      	str	r2, [r3, #16]
 8001558:	615a      	str	r2, [r3, #20]
 800155a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 800155c:	4b2f      	ldr	r3, [pc, #188]	; (800161c <MX_FSMC_Init+0xec>)
 800155e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001562:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001564:	4b2d      	ldr	r3, [pc, #180]	; (800161c <MX_FSMC_Init+0xec>)
 8001566:	4a2e      	ldr	r2, [pc, #184]	; (8001620 <MX_FSMC_Init+0xf0>)
 8001568:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800156a:	4b2c      	ldr	r3, [pc, #176]	; (800161c <MX_FSMC_Init+0xec>)
 800156c:	2200      	movs	r2, #0
 800156e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001570:	4b2a      	ldr	r3, [pc, #168]	; (800161c <MX_FSMC_Init+0xec>)
 8001572:	2200      	movs	r2, #0
 8001574:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001576:	4b29      	ldr	r3, [pc, #164]	; (800161c <MX_FSMC_Init+0xec>)
 8001578:	2200      	movs	r2, #0
 800157a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800157c:	4b27      	ldr	r3, [pc, #156]	; (800161c <MX_FSMC_Init+0xec>)
 800157e:	2210      	movs	r2, #16
 8001580:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001582:	4b26      	ldr	r3, [pc, #152]	; (800161c <MX_FSMC_Init+0xec>)
 8001584:	2200      	movs	r2, #0
 8001586:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001588:	4b24      	ldr	r3, [pc, #144]	; (800161c <MX_FSMC_Init+0xec>)
 800158a:	2200      	movs	r2, #0
 800158c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800158e:	4b23      	ldr	r3, [pc, #140]	; (800161c <MX_FSMC_Init+0xec>)
 8001590:	2200      	movs	r2, #0
 8001592:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001594:	4b21      	ldr	r3, [pc, #132]	; (800161c <MX_FSMC_Init+0xec>)
 8001596:	2200      	movs	r2, #0
 8001598:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800159a:	4b20      	ldr	r3, [pc, #128]	; (800161c <MX_FSMC_Init+0xec>)
 800159c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015a0:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80015a2:	4b1e      	ldr	r3, [pc, #120]	; (800161c <MX_FSMC_Init+0xec>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80015a8:	4b1c      	ldr	r3, [pc, #112]	; (800161c <MX_FSMC_Init+0xec>)
 80015aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015ae:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80015b0:	4b1a      	ldr	r3, [pc, #104]	; (800161c <MX_FSMC_Init+0xec>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80015b6:	4b19      	ldr	r3, [pc, #100]	; (800161c <MX_FSMC_Init+0xec>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80015bc:	4b17      	ldr	r3, [pc, #92]	; (800161c <MX_FSMC_Init+0xec>)
 80015be:	2200      	movs	r2, #0
 80015c0:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 2;
 80015c2:	2302      	movs	r3, #2
 80015c4:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80015c6:	230f      	movs	r3, #15
 80015c8:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 4;
 80015ca:	2304      	movs	r3, #4
 80015cc:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 80015ce:	2300      	movs	r3, #0
 80015d0:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 80015d2:	2310      	movs	r3, #16
 80015d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 80015d6:	2311      	movs	r3, #17
 80015d8:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80015da:	2300      	movs	r3, #0
 80015dc:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 15;
 80015de:	230f      	movs	r3, #15
 80015e0:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 80015e2:	230f      	movs	r3, #15
 80015e4:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 40;
 80015e6:	2328      	movs	r3, #40	; 0x28
 80015e8:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 80015ea:	2300      	movs	r3, #0
 80015ec:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 80015ee:	2310      	movs	r3, #16
 80015f0:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 80015f2:	2311      	movs	r3, #17
 80015f4:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 80015f6:	2300      	movs	r3, #0
 80015f8:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 80015fa:	463a      	mov	r2, r7
 80015fc:	f107 031c 	add.w	r3, r7, #28
 8001600:	4619      	mov	r1, r3
 8001602:	4806      	ldr	r0, [pc, #24]	; (800161c <MX_FSMC_Init+0xec>)
 8001604:	f001 ff89 	bl	800351a <HAL_SRAM_Init>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 800160e:	f000 f809 	bl	8001624 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001612:	bf00      	nop
 8001614:	3738      	adds	r7, #56	; 0x38
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	20000220 	.word	0x20000220
 8001620:	a0000104 	.word	0xa0000104

08001624 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001628:	b672      	cpsid	i
}
 800162a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800162c:	e7fe      	b.n	800162c <Error_Handler+0x8>
	...

08001630 <SPI1_Transfer>:
#include <stm32f4xx_hal_gpio.h>
#include <stdio.h>


uint8_t SPI1_Transfer(uint8_t data)
{
 8001630:	b480      	push	{r7}
 8001632:	b085      	sub	sp, #20
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	71fb      	strb	r3, [r7, #7]
	SPI_TypeDef *SPI1inst = hspi1.Instance;
 800163a:	4b12      	ldr	r3, [pc, #72]	; (8001684 <SPI1_Transfer+0x54>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	60fb      	str	r3, [r7, #12]
    SPI1inst->DR = data;
 8001640:	79fa      	ldrb	r2, [r7, #7]
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	60da      	str	r2, [r3, #12]
    while (!(SPI1inst->SR & (SPI_FLAG_TXE)));
 8001646:	bf00      	nop
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	f003 0302 	and.w	r3, r3, #2
 8001650:	2b00      	cmp	r3, #0
 8001652:	d0f9      	beq.n	8001648 <SPI1_Transfer+0x18>
    while (!(SPI1inst->SR & (SPI_FLAG_RXNE)));
 8001654:	bf00      	nop
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	2b00      	cmp	r3, #0
 8001660:	d0f9      	beq.n	8001656 <SPI1_Transfer+0x26>
    while (SPI1inst->SR & (SPI_FLAG_BSY));
 8001662:	bf00      	nop
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800166c:	2b00      	cmp	r3, #0
 800166e:	d1f9      	bne.n	8001664 <SPI1_Transfer+0x34>
    return SPI1inst->DR;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	b2db      	uxtb	r3, r3
}
 8001676:	4618      	mov	r0, r3
 8001678:	3714      	adds	r7, #20
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	200000e8 	.word	0x200000e8

08001688 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	607b      	str	r3, [r7, #4]
 8001692:	4b10      	ldr	r3, [pc, #64]	; (80016d4 <HAL_MspInit+0x4c>)
 8001694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001696:	4a0f      	ldr	r2, [pc, #60]	; (80016d4 <HAL_MspInit+0x4c>)
 8001698:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800169c:	6453      	str	r3, [r2, #68]	; 0x44
 800169e:	4b0d      	ldr	r3, [pc, #52]	; (80016d4 <HAL_MspInit+0x4c>)
 80016a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016a6:	607b      	str	r3, [r7, #4]
 80016a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	603b      	str	r3, [r7, #0]
 80016ae:	4b09      	ldr	r3, [pc, #36]	; (80016d4 <HAL_MspInit+0x4c>)
 80016b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b2:	4a08      	ldr	r2, [pc, #32]	; (80016d4 <HAL_MspInit+0x4c>)
 80016b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016b8:	6413      	str	r3, [r2, #64]	; 0x40
 80016ba:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <HAL_MspInit+0x4c>)
 80016bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c2:	603b      	str	r3, [r7, #0]
 80016c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016c6:	bf00      	nop
 80016c8:	370c      	adds	r7, #12
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	40023800 	.word	0x40023800

080016d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b08a      	sub	sp, #40	; 0x28
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e0:	f107 0314 	add.w	r3, r7, #20
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	609a      	str	r2, [r3, #8]
 80016ec:	60da      	str	r2, [r3, #12]
 80016ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a19      	ldr	r2, [pc, #100]	; (800175c <HAL_I2C_MspInit+0x84>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d12b      	bne.n	8001752 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016fa:	2300      	movs	r3, #0
 80016fc:	613b      	str	r3, [r7, #16]
 80016fe:	4b18      	ldr	r3, [pc, #96]	; (8001760 <HAL_I2C_MspInit+0x88>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	4a17      	ldr	r2, [pc, #92]	; (8001760 <HAL_I2C_MspInit+0x88>)
 8001704:	f043 0302 	orr.w	r3, r3, #2
 8001708:	6313      	str	r3, [r2, #48]	; 0x30
 800170a:	4b15      	ldr	r3, [pc, #84]	; (8001760 <HAL_I2C_MspInit+0x88>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	613b      	str	r3, [r7, #16]
 8001714:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001716:	23c0      	movs	r3, #192	; 0xc0
 8001718:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800171a:	2312      	movs	r3, #18
 800171c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800171e:	2301      	movs	r3, #1
 8001720:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001722:	2303      	movs	r3, #3
 8001724:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001726:	2304      	movs	r3, #4
 8001728:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800172a:	f107 0314 	add.w	r3, r7, #20
 800172e:	4619      	mov	r1, r3
 8001730:	480c      	ldr	r0, [pc, #48]	; (8001764 <HAL_I2C_MspInit+0x8c>)
 8001732:	f000 fed9 	bl	80024e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	60fb      	str	r3, [r7, #12]
 800173a:	4b09      	ldr	r3, [pc, #36]	; (8001760 <HAL_I2C_MspInit+0x88>)
 800173c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173e:	4a08      	ldr	r2, [pc, #32]	; (8001760 <HAL_I2C_MspInit+0x88>)
 8001740:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001744:	6413      	str	r3, [r2, #64]	; 0x40
 8001746:	4b06      	ldr	r3, [pc, #24]	; (8001760 <HAL_I2C_MspInit+0x88>)
 8001748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800174e:	60fb      	str	r3, [r7, #12]
 8001750:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001752:	bf00      	nop
 8001754:	3728      	adds	r7, #40	; 0x28
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	40005400 	.word	0x40005400
 8001760:	40023800 	.word	0x40023800
 8001764:	40020400 	.word	0x40020400

08001768 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b08c      	sub	sp, #48	; 0x30
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001770:	f107 031c 	add.w	r3, r7, #28
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	605a      	str	r2, [r3, #4]
 800177a:	609a      	str	r2, [r3, #8]
 800177c:	60da      	str	r2, [r3, #12]
 800177e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a41      	ldr	r2, [pc, #260]	; (800188c <HAL_SPI_MspInit+0x124>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d12c      	bne.n	80017e4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	61bb      	str	r3, [r7, #24]
 800178e:	4b40      	ldr	r3, [pc, #256]	; (8001890 <HAL_SPI_MspInit+0x128>)
 8001790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001792:	4a3f      	ldr	r2, [pc, #252]	; (8001890 <HAL_SPI_MspInit+0x128>)
 8001794:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001798:	6453      	str	r3, [r2, #68]	; 0x44
 800179a:	4b3d      	ldr	r3, [pc, #244]	; (8001890 <HAL_SPI_MspInit+0x128>)
 800179c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017a2:	61bb      	str	r3, [r7, #24]
 80017a4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	617b      	str	r3, [r7, #20]
 80017aa:	4b39      	ldr	r3, [pc, #228]	; (8001890 <HAL_SPI_MspInit+0x128>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ae:	4a38      	ldr	r2, [pc, #224]	; (8001890 <HAL_SPI_MspInit+0x128>)
 80017b0:	f043 0301 	orr.w	r3, r3, #1
 80017b4:	6313      	str	r3, [r2, #48]	; 0x30
 80017b6:	4b36      	ldr	r3, [pc, #216]	; (8001890 <HAL_SPI_MspInit+0x128>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	617b      	str	r3, [r7, #20]
 80017c0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80017c2:	23e0      	movs	r3, #224	; 0xe0
 80017c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c6:	2302      	movs	r3, #2
 80017c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ca:	2300      	movs	r3, #0
 80017cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ce:	2303      	movs	r3, #3
 80017d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017d2:	2305      	movs	r3, #5
 80017d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d6:	f107 031c 	add.w	r3, r7, #28
 80017da:	4619      	mov	r1, r3
 80017dc:	482d      	ldr	r0, [pc, #180]	; (8001894 <HAL_SPI_MspInit+0x12c>)
 80017de:	f000 fe83 	bl	80024e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80017e2:	e04f      	b.n	8001884 <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI3)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a2b      	ldr	r2, [pc, #172]	; (8001898 <HAL_SPI_MspInit+0x130>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d14a      	bne.n	8001884 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	613b      	str	r3, [r7, #16]
 80017f2:	4b27      	ldr	r3, [pc, #156]	; (8001890 <HAL_SPI_MspInit+0x128>)
 80017f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f6:	4a26      	ldr	r2, [pc, #152]	; (8001890 <HAL_SPI_MspInit+0x128>)
 80017f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017fc:	6413      	str	r3, [r2, #64]	; 0x40
 80017fe:	4b24      	ldr	r3, [pc, #144]	; (8001890 <HAL_SPI_MspInit+0x128>)
 8001800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001802:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001806:	613b      	str	r3, [r7, #16]
 8001808:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	60fb      	str	r3, [r7, #12]
 800180e:	4b20      	ldr	r3, [pc, #128]	; (8001890 <HAL_SPI_MspInit+0x128>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	4a1f      	ldr	r2, [pc, #124]	; (8001890 <HAL_SPI_MspInit+0x128>)
 8001814:	f043 0304 	orr.w	r3, r3, #4
 8001818:	6313      	str	r3, [r2, #48]	; 0x30
 800181a:	4b1d      	ldr	r3, [pc, #116]	; (8001890 <HAL_SPI_MspInit+0x128>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	f003 0304 	and.w	r3, r3, #4
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	60bb      	str	r3, [r7, #8]
 800182a:	4b19      	ldr	r3, [pc, #100]	; (8001890 <HAL_SPI_MspInit+0x128>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	4a18      	ldr	r2, [pc, #96]	; (8001890 <HAL_SPI_MspInit+0x128>)
 8001830:	f043 0302 	orr.w	r3, r3, #2
 8001834:	6313      	str	r3, [r2, #48]	; 0x30
 8001836:	4b16      	ldr	r3, [pc, #88]	; (8001890 <HAL_SPI_MspInit+0x128>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	60bb      	str	r3, [r7, #8]
 8001840:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001842:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001846:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001848:	2302      	movs	r3, #2
 800184a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184c:	2300      	movs	r3, #0
 800184e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001850:	2303      	movs	r3, #3
 8001852:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001854:	2306      	movs	r3, #6
 8001856:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001858:	f107 031c 	add.w	r3, r7, #28
 800185c:	4619      	mov	r1, r3
 800185e:	480f      	ldr	r0, [pc, #60]	; (800189c <HAL_SPI_MspInit+0x134>)
 8001860:	f000 fe42 	bl	80024e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001864:	2330      	movs	r3, #48	; 0x30
 8001866:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001868:	2302      	movs	r3, #2
 800186a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186c:	2300      	movs	r3, #0
 800186e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001870:	2303      	movs	r3, #3
 8001872:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001874:	2306      	movs	r3, #6
 8001876:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001878:	f107 031c 	add.w	r3, r7, #28
 800187c:	4619      	mov	r1, r3
 800187e:	4808      	ldr	r0, [pc, #32]	; (80018a0 <HAL_SPI_MspInit+0x138>)
 8001880:	f000 fe32 	bl	80024e8 <HAL_GPIO_Init>
}
 8001884:	bf00      	nop
 8001886:	3730      	adds	r7, #48	; 0x30
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	40013000 	.word	0x40013000
 8001890:	40023800 	.word	0x40023800
 8001894:	40020000 	.word	0x40020000
 8001898:	40003c00 	.word	0x40003c00
 800189c:	40020800 	.word	0x40020800
 80018a0:	40020400 	.word	0x40020400

080018a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b08c      	sub	sp, #48	; 0x30
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ac:	f107 031c 	add.w	r3, r7, #28
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	60da      	str	r2, [r3, #12]
 80018ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a3a      	ldr	r2, [pc, #232]	; (80019ac <HAL_UART_MspInit+0x108>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d135      	bne.n	8001932 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	61bb      	str	r3, [r7, #24]
 80018ca:	4b39      	ldr	r3, [pc, #228]	; (80019b0 <HAL_UART_MspInit+0x10c>)
 80018cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ce:	4a38      	ldr	r2, [pc, #224]	; (80019b0 <HAL_UART_MspInit+0x10c>)
 80018d0:	f043 0310 	orr.w	r3, r3, #16
 80018d4:	6453      	str	r3, [r2, #68]	; 0x44
 80018d6:	4b36      	ldr	r3, [pc, #216]	; (80019b0 <HAL_UART_MspInit+0x10c>)
 80018d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018da:	f003 0310 	and.w	r3, r3, #16
 80018de:	61bb      	str	r3, [r7, #24]
 80018e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	617b      	str	r3, [r7, #20]
 80018e6:	4b32      	ldr	r3, [pc, #200]	; (80019b0 <HAL_UART_MspInit+0x10c>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	4a31      	ldr	r2, [pc, #196]	; (80019b0 <HAL_UART_MspInit+0x10c>)
 80018ec:	f043 0301 	orr.w	r3, r3, #1
 80018f0:	6313      	str	r3, [r2, #48]	; 0x30
 80018f2:	4b2f      	ldr	r3, [pc, #188]	; (80019b0 <HAL_UART_MspInit+0x10c>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	f003 0301 	and.w	r3, r3, #1
 80018fa:	617b      	str	r3, [r7, #20]
 80018fc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80018fe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001902:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001904:	2302      	movs	r3, #2
 8001906:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001908:	2300      	movs	r3, #0
 800190a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800190c:	2303      	movs	r3, #3
 800190e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001910:	2307      	movs	r3, #7
 8001912:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001914:	f107 031c 	add.w	r3, r7, #28
 8001918:	4619      	mov	r1, r3
 800191a:	4826      	ldr	r0, [pc, #152]	; (80019b4 <HAL_UART_MspInit+0x110>)
 800191c:	f000 fde4 	bl	80024e8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001920:	2200      	movs	r2, #0
 8001922:	2100      	movs	r1, #0
 8001924:	2025      	movs	r0, #37	; 0x25
 8001926:	f000 fd16 	bl	8002356 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800192a:	2025      	movs	r0, #37	; 0x25
 800192c:	f000 fd2f 	bl	800238e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001930:	e038      	b.n	80019a4 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a20      	ldr	r2, [pc, #128]	; (80019b8 <HAL_UART_MspInit+0x114>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d133      	bne.n	80019a4 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 800193c:	2300      	movs	r3, #0
 800193e:	613b      	str	r3, [r7, #16]
 8001940:	4b1b      	ldr	r3, [pc, #108]	; (80019b0 <HAL_UART_MspInit+0x10c>)
 8001942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001944:	4a1a      	ldr	r2, [pc, #104]	; (80019b0 <HAL_UART_MspInit+0x10c>)
 8001946:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800194a:	6413      	str	r3, [r2, #64]	; 0x40
 800194c:	4b18      	ldr	r3, [pc, #96]	; (80019b0 <HAL_UART_MspInit+0x10c>)
 800194e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001954:	613b      	str	r3, [r7, #16]
 8001956:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001958:	2300      	movs	r3, #0
 800195a:	60fb      	str	r3, [r7, #12]
 800195c:	4b14      	ldr	r3, [pc, #80]	; (80019b0 <HAL_UART_MspInit+0x10c>)
 800195e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001960:	4a13      	ldr	r2, [pc, #76]	; (80019b0 <HAL_UART_MspInit+0x10c>)
 8001962:	f043 0301 	orr.w	r3, r3, #1
 8001966:	6313      	str	r3, [r2, #48]	; 0x30
 8001968:	4b11      	ldr	r3, [pc, #68]	; (80019b0 <HAL_UART_MspInit+0x10c>)
 800196a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196c:	f003 0301 	and.w	r3, r3, #1
 8001970:	60fb      	str	r3, [r7, #12]
 8001972:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001974:	230c      	movs	r3, #12
 8001976:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001978:	2302      	movs	r3, #2
 800197a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197c:	2300      	movs	r3, #0
 800197e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001980:	2303      	movs	r3, #3
 8001982:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001984:	2307      	movs	r3, #7
 8001986:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001988:	f107 031c 	add.w	r3, r7, #28
 800198c:	4619      	mov	r1, r3
 800198e:	4809      	ldr	r0, [pc, #36]	; (80019b4 <HAL_UART_MspInit+0x110>)
 8001990:	f000 fdaa 	bl	80024e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001994:	2200      	movs	r2, #0
 8001996:	2100      	movs	r1, #0
 8001998:	2026      	movs	r0, #38	; 0x26
 800199a:	f000 fcdc 	bl	8002356 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800199e:	2026      	movs	r0, #38	; 0x26
 80019a0:	f000 fcf5 	bl	800238e <HAL_NVIC_EnableIRQ>
}
 80019a4:	bf00      	nop
 80019a6:	3730      	adds	r7, #48	; 0x30
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	40011000 	.word	0x40011000
 80019b0:	40023800 	.word	0x40023800
 80019b4:	40020000 	.word	0x40020000
 80019b8:	40004400 	.word	0x40004400

080019bc <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80019bc:	b580      	push	{r7, lr}
 80019be:	b086      	sub	sp, #24
 80019c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80019c2:	1d3b      	adds	r3, r7, #4
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	605a      	str	r2, [r3, #4]
 80019ca:	609a      	str	r2, [r3, #8]
 80019cc:	60da      	str	r2, [r3, #12]
 80019ce:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80019d0:	4b1c      	ldr	r3, [pc, #112]	; (8001a44 <HAL_FSMC_MspInit+0x88>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d131      	bne.n	8001a3c <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80019d8:	4b1a      	ldr	r3, [pc, #104]	; (8001a44 <HAL_FSMC_MspInit+0x88>)
 80019da:	2201      	movs	r2, #1
 80019dc:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	603b      	str	r3, [r7, #0]
 80019e2:	4b19      	ldr	r3, [pc, #100]	; (8001a48 <HAL_FSMC_MspInit+0x8c>)
 80019e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019e6:	4a18      	ldr	r2, [pc, #96]	; (8001a48 <HAL_FSMC_MspInit+0x8c>)
 80019e8:	f043 0301 	orr.w	r3, r3, #1
 80019ec:	6393      	str	r3, [r2, #56]	; 0x38
 80019ee:	4b16      	ldr	r3, [pc, #88]	; (8001a48 <HAL_FSMC_MspInit+0x8c>)
 80019f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	603b      	str	r3, [r7, #0]
 80019f8:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80019fa:	f64f 7380 	movw	r3, #65408	; 0xff80
 80019fe:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a00:	2302      	movs	r3, #2
 8001a02:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a04:	2300      	movs	r3, #0
 8001a06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001a0c:	230c      	movs	r3, #12
 8001a0e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a10:	1d3b      	adds	r3, r7, #4
 8001a12:	4619      	mov	r1, r3
 8001a14:	480d      	ldr	r0, [pc, #52]	; (8001a4c <HAL_FSMC_MspInit+0x90>)
 8001a16:	f000 fd67 	bl	80024e8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13
 8001a1a:	f24e 73b3 	movw	r3, #59315	; 0xe7b3
 8001a1e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a20:	2302      	movs	r3, #2
 8001a22:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a24:	2300      	movs	r3, #0
 8001a26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001a2c:	230c      	movs	r3, #12
 8001a2e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a30:	1d3b      	adds	r3, r7, #4
 8001a32:	4619      	mov	r1, r3
 8001a34:	4806      	ldr	r0, [pc, #24]	; (8001a50 <HAL_FSMC_MspInit+0x94>)
 8001a36:	f000 fd57 	bl	80024e8 <HAL_GPIO_Init>
 8001a3a:	e000      	b.n	8001a3e <HAL_FSMC_MspInit+0x82>
    return;
 8001a3c:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001a3e:	3718      	adds	r7, #24
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	20000270 	.word	0x20000270
 8001a48:	40023800 	.word	0x40023800
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	40020c00 	.word	0x40020c00

08001a54 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001a5c:	f7ff ffae 	bl	80019bc <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001a60:	bf00      	nop
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a6c:	e7fe      	b.n	8001a6c <NMI_Handler+0x4>

08001a6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a72:	e7fe      	b.n	8001a72 <HardFault_Handler+0x4>

08001a74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a78:	e7fe      	b.n	8001a78 <MemManage_Handler+0x4>

08001a7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a7e:	e7fe      	b.n	8001a7e <BusFault_Handler+0x4>

08001a80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a84:	e7fe      	b.n	8001a84 <UsageFault_Handler+0x4>

08001a86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a86:	b480      	push	{r7}
 8001a88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a98:	bf00      	nop
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr

08001aa2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001aa6:	bf00      	nop
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ab4:	f000 fb30 	bl	8002118 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ab8:	bf00      	nop
 8001aba:	bd80      	pop	{r7, pc}

08001abc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  static int ledVal = 0;
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, ledVal);
 8001ac2:	4b24      	ldr	r3, [pc, #144]	; (8001b54 <USART1_IRQHandler+0x98>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	461a      	mov	r2, r3
 8001aca:	2108      	movs	r1, #8
 8001acc:	4822      	ldr	r0, [pc, #136]	; (8001b58 <USART1_IRQHandler+0x9c>)
 8001ace:	f000 fea7 	bl	8002820 <HAL_GPIO_WritePin>
  ledVal = !ledVal;
 8001ad2:	4b20      	ldr	r3, [pc, #128]	; (8001b54 <USART1_IRQHandler+0x98>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	bf0c      	ite	eq
 8001ada:	2301      	moveq	r3, #1
 8001adc:	2300      	movne	r3, #0
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	4b1c      	ldr	r3, [pc, #112]	; (8001b54 <USART1_IRQHandler+0x98>)
 8001ae4:	601a      	str	r2, [r3, #0]
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ae6:	481d      	ldr	r0, [pc, #116]	; (8001b5c <USART1_IRQHandler+0xa0>)
 8001ae8:	f001 fe3e 	bl	8003768 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  volatile unsigned int IIR;
  IIR = USART1->SR;
 8001aec:	4b1c      	ldr	r3, [pc, #112]	; (8001b60 <USART1_IRQHandler+0xa4>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	603b      	str	r3, [r7, #0]
  if(IIR & UART_FLAG_RXNE){
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	f003 0320 	and.w	r3, r3, #32
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d009      	beq.n	8001b10 <USART1_IRQHandler+0x54>
  		//Read Data Register Not Empty
  		char t = USART1->DR; // the character from the USART1 data register is saved in t
 8001afc:	4b18      	ldr	r3, [pc, #96]	; (8001b60 <USART1_IRQHandler+0xa4>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	71fb      	strb	r3, [r7, #7]
  		put_in_rx_buffer(t,DBG_UART);
 8001b02:	4b18      	ldr	r3, [pc, #96]	; (8001b64 <USART1_IRQHandler+0xa8>)
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	79fb      	ldrb	r3, [r7, #7]
 8001b08:	4611      	mov	r1, r2
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f000 f93c 	bl	8001d88 <put_in_rx_buffer>
      }
  if(IIR & UART_FLAG_TXE){
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d018      	beq.n	8001b4c <USART1_IRQHandler+0x90>
  		if(wr_pointer_dbg==rd_pointer_dbg){
 8001b1a:	4b13      	ldr	r3, [pc, #76]	; (8001b68 <USART1_IRQHandler+0xac>)
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	4b13      	ldr	r3, [pc, #76]	; (8001b6c <USART1_IRQHandler+0xb0>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d108      	bne.n	8001b38 <USART1_IRQHandler+0x7c>
  			__HAL_UART_DISABLE_IT(&huart1, UART_IT_TXE); //whole message transmitted
 8001b26:	4b0d      	ldr	r3, [pc, #52]	; (8001b5c <USART1_IRQHandler+0xa0>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	68da      	ldr	r2, [r3, #12]
 8001b2c:	4b0b      	ldr	r3, [pc, #44]	; (8001b5c <USART1_IRQHandler+0xa0>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b34:	60da      	str	r2, [r3, #12]
  		}
  	}


  /* USER CODE END USART1_IRQn 1 */
}
 8001b36:	e009      	b.n	8001b4c <USART1_IRQHandler+0x90>
  			DBG_UART->DR = get_from_tx_buffer(DBG_UART);
 8001b38:	4b0a      	ldr	r3, [pc, #40]	; (8001b64 <USART1_IRQHandler+0xa8>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f000 f975 	bl	8001e2c <get_from_tx_buffer>
 8001b42:	4603      	mov	r3, r0
 8001b44:	461a      	mov	r2, r3
 8001b46:	4b07      	ldr	r3, [pc, #28]	; (8001b64 <USART1_IRQHandler+0xa8>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	605a      	str	r2, [r3, #4]
}
 8001b4c:	bf00      	nop
 8001b4e:	3708      	adds	r7, #8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	20000274 	.word	0x20000274
 8001b58:	40020400 	.word	0x40020400
 8001b5c:	20000198 	.word	0x20000198
 8001b60:	40011000 	.word	0x40011000
 8001b64:	20000008 	.word	0x20000008
 8001b68:	20000a88 	.word	0x20000a88
 8001b6c:	20000a84 	.word	0x20000a84

08001b70 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b76:	481b      	ldr	r0, [pc, #108]	; (8001be4 <USART2_IRQHandler+0x74>)
 8001b78:	f001 fdf6 	bl	8003768 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  volatile unsigned int IIR;
  	IIR=USART2->SR;
 8001b7c:	4b1a      	ldr	r3, [pc, #104]	; (8001be8 <USART2_IRQHandler+0x78>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	603b      	str	r3, [r7, #0]
    if(IIR & UART_FLAG_RXNE){
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	f003 0320 	and.w	r3, r3, #32
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d009      	beq.n	8001ba0 <USART2_IRQHandler+0x30>
  		// check if the USART6 receive interrupt flag was set
  		char t = USART2->DR; // the character from the USART1 data register is saved in t
 8001b8c:	4b16      	ldr	r3, [pc, #88]	; (8001be8 <USART2_IRQHandler+0x78>)
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	71fb      	strb	r3, [r7, #7]
  		put_in_rx_buffer(t,RS485_UART);
 8001b92:	4b16      	ldr	r3, [pc, #88]	; (8001bec <USART2_IRQHandler+0x7c>)
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	79fb      	ldrb	r3, [r7, #7]
 8001b98:	4611      	mov	r1, r2
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f000 f8f4 	bl	8001d88 <put_in_rx_buffer>
      }
  	if(IIR & UART_FLAG_TXE){
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d017      	beq.n	8001bda <USART2_IRQHandler+0x6a>
  		if(wr_pointer_rs485==rd_pointer_rs485){
 8001baa:	4b11      	ldr	r3, [pc, #68]	; (8001bf0 <USART2_IRQHandler+0x80>)
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	4b11      	ldr	r3, [pc, #68]	; (8001bf4 <USART2_IRQHandler+0x84>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d108      	bne.n	8001bc8 <USART2_IRQHandler+0x58>
  			__HAL_UART_DISABLE_IT(&huart2, UART_IT_TXE);
 8001bb6:	4b0b      	ldr	r3, [pc, #44]	; (8001be4 <USART2_IRQHandler+0x74>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	68da      	ldr	r2, [r3, #12]
 8001bbc:	4b09      	ldr	r3, [pc, #36]	; (8001be4 <USART2_IRQHandler+0x74>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001bc4:	60da      	str	r2, [r3, #12]
  			USART2->DR = get_from_tx_buffer(RS485_UART);
  		}
  	}

  /* USER CODE END USART2_IRQn 1 */
}
 8001bc6:	e008      	b.n	8001bda <USART2_IRQHandler+0x6a>
  			USART2->DR = get_from_tx_buffer(RS485_UART);
 8001bc8:	4b08      	ldr	r3, [pc, #32]	; (8001bec <USART2_IRQHandler+0x7c>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f000 f92d 	bl	8001e2c <get_from_tx_buffer>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	4b04      	ldr	r3, [pc, #16]	; (8001be8 <USART2_IRQHandler+0x78>)
 8001bd8:	605a      	str	r2, [r3, #4]
}
 8001bda:	bf00      	nop
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	200001dc 	.word	0x200001dc
 8001be8:	40004400 	.word	0x40004400
 8001bec:	20000004 	.word	0x20000004
 8001bf0:	20000680 	.word	0x20000680
 8001bf4:	2000067c 	.word	0x2000067c

08001bf8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b086      	sub	sp, #24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	60b9      	str	r1, [r7, #8]
 8001c02:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c04:	2300      	movs	r3, #0
 8001c06:	617b      	str	r3, [r7, #20]
 8001c08:	e00a      	b.n	8001c20 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c0a:	f3af 8000 	nop.w
 8001c0e:	4601      	mov	r1, r0
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	1c5a      	adds	r2, r3, #1
 8001c14:	60ba      	str	r2, [r7, #8]
 8001c16:	b2ca      	uxtb	r2, r1
 8001c18:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	617b      	str	r3, [r7, #20]
 8001c20:	697a      	ldr	r2, [r7, #20]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	dbf0      	blt.n	8001c0a <_read+0x12>
	}

return len;
 8001c28:	687b      	ldr	r3, [r7, #4]
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3718      	adds	r7, #24
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b086      	sub	sp, #24
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	60f8      	str	r0, [r7, #12]
 8001c3a:	60b9      	str	r1, [r7, #8]
 8001c3c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c3e:	2300      	movs	r3, #0
 8001c40:	617b      	str	r3, [r7, #20]
 8001c42:	e009      	b.n	8001c58 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	1c5a      	adds	r2, r3, #1
 8001c48:	60ba      	str	r2, [r7, #8]
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f000 f889 	bl	8001d64 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	3301      	adds	r3, #1
 8001c56:	617b      	str	r3, [r7, #20]
 8001c58:	697a      	ldr	r2, [r7, #20]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	dbf1      	blt.n	8001c44 <_write+0x12>
	}
	return len;
 8001c60:	687b      	ldr	r3, [r7, #4]
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3718      	adds	r7, #24
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <_close>:

int _close(int file)
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	b083      	sub	sp, #12
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
	return -1;
 8001c72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr

08001c82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c82:	b480      	push	{r7}
 8001c84:	b083      	sub	sp, #12
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
 8001c8a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c92:	605a      	str	r2, [r3, #4]
	return 0;
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr

08001ca2 <_isatty>:

int _isatty(int file)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	b083      	sub	sp, #12
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
	return 1;
 8001caa:	2301      	movs	r3, #1
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b085      	sub	sp, #20
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	60b9      	str	r1, [r7, #8]
 8001cc2:	607a      	str	r2, [r7, #4]
	return 0;
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3714      	adds	r7, #20
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
	...

08001cd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cdc:	4a14      	ldr	r2, [pc, #80]	; (8001d30 <_sbrk+0x5c>)
 8001cde:	4b15      	ldr	r3, [pc, #84]	; (8001d34 <_sbrk+0x60>)
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ce8:	4b13      	ldr	r3, [pc, #76]	; (8001d38 <_sbrk+0x64>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d102      	bne.n	8001cf6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cf0:	4b11      	ldr	r3, [pc, #68]	; (8001d38 <_sbrk+0x64>)
 8001cf2:	4a12      	ldr	r2, [pc, #72]	; (8001d3c <_sbrk+0x68>)
 8001cf4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cf6:	4b10      	ldr	r3, [pc, #64]	; (8001d38 <_sbrk+0x64>)
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d207      	bcs.n	8001d14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d04:	f002 fd40 	bl	8004788 <__errno>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	220c      	movs	r2, #12
 8001d0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d12:	e009      	b.n	8001d28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d14:	4b08      	ldr	r3, [pc, #32]	; (8001d38 <_sbrk+0x64>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d1a:	4b07      	ldr	r3, [pc, #28]	; (8001d38 <_sbrk+0x64>)
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4413      	add	r3, r2
 8001d22:	4a05      	ldr	r2, [pc, #20]	; (8001d38 <_sbrk+0x64>)
 8001d24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d26:	68fb      	ldr	r3, [r7, #12]
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3718      	adds	r7, #24
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	20020000 	.word	0x20020000
 8001d34:	00000400 	.word	0x00000400
 8001d38:	20000278 	.word	0x20000278
 8001d3c:	20002eb0 	.word	0x20002eb0

08001d40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d44:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <SystemInit+0x20>)
 8001d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d4a:	4a05      	ldr	r2, [pc, #20]	; (8001d60 <SystemInit+0x20>)
 8001d4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d54:	bf00      	nop
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	e000ed00 	.word	0xe000ed00

08001d64 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

//redirect printf to uart1.
PUTCHAR_PROTOTYPE{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 0xffff);
 8001d6c:	1d39      	adds	r1, r7, #4
 8001d6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d72:	2201      	movs	r2, #1
 8001d74:	4803      	ldr	r0, [pc, #12]	; (8001d84 <__io_putchar+0x20>)
 8001d76:	f001 fc65 	bl	8003644 <HAL_UART_Transmit>
	return ch;
 8001d7a:	687b      	ldr	r3, [r7, #4]
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3708      	adds	r7, #8
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	20000198 	.word	0x20000198

08001d88 <put_in_rx_buffer>:

void put_in_rx_buffer(char data, USART_TypeDef* USARTx)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	4603      	mov	r3, r0
 8001d90:	6039      	str	r1, [r7, #0]
 8001d92:	71fb      	strb	r3, [r7, #7]
	if(USARTx == DBG_UART)
 8001d94:	4b1d      	ldr	r3, [pc, #116]	; (8001e0c <put_in_rx_buffer+0x84>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	683a      	ldr	r2, [r7, #0]
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d114      	bne.n	8001dc8 <put_in_rx_buffer+0x40>
	{
		if(SIO_RBUFLEN_DBG>=LEN_RX_BUFFER_DBG)
 8001d9e:	4b1c      	ldr	r3, [pc, #112]	; (8001e10 <put_in_rx_buffer+0x88>)
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	4b1c      	ldr	r3, [pc, #112]	; (8001e14 <put_in_rx_buffer+0x8c>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001dac:	d226      	bcs.n	8001dfc <put_in_rx_buffer+0x74>
			{
				return;
			}
		rx_buffer_dbg[wr_pointer_rx_dbg & (LEN_RX_BUFFER_DBG - 1)]=data;
 8001dae:	4b18      	ldr	r3, [pc, #96]	; (8001e10 <put_in_rx_buffer+0x88>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001db6:	4918      	ldr	r1, [pc, #96]	; (8001e18 <put_in_rx_buffer+0x90>)
 8001db8:	79fa      	ldrb	r2, [r7, #7]
 8001dba:	54ca      	strb	r2, [r1, r3]
		wr_pointer_rx_dbg++;
 8001dbc:	4b14      	ldr	r3, [pc, #80]	; (8001e10 <put_in_rx_buffer+0x88>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	4a13      	ldr	r2, [pc, #76]	; (8001e10 <put_in_rx_buffer+0x88>)
 8001dc4:	6013      	str	r3, [r2, #0]
 8001dc6:	e01c      	b.n	8001e02 <put_in_rx_buffer+0x7a>
	}
	else if(USARTx == RS485_UART)
 8001dc8:	4b14      	ldr	r3, [pc, #80]	; (8001e1c <put_in_rx_buffer+0x94>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	683a      	ldr	r2, [r7, #0]
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d117      	bne.n	8001e02 <put_in_rx_buffer+0x7a>
	{
		if(SIO_RBUFLEN_RS485>=LEN_RX_BUFFER_RS485)
 8001dd2:	4b13      	ldr	r3, [pc, #76]	; (8001e20 <put_in_rx_buffer+0x98>)
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	4b13      	ldr	r3, [pc, #76]	; (8001e24 <put_in_rx_buffer+0x9c>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001de0:	d20e      	bcs.n	8001e00 <put_in_rx_buffer+0x78>
			{
				return;
			}
		rx_buffer_rs485[wr_pointer_rx_rs485 & (LEN_RX_BUFFER_RS485 - 1)]=data;
 8001de2:	4b0f      	ldr	r3, [pc, #60]	; (8001e20 <put_in_rx_buffer+0x98>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001dea:	490f      	ldr	r1, [pc, #60]	; (8001e28 <put_in_rx_buffer+0xa0>)
 8001dec:	79fa      	ldrb	r2, [r7, #7]
 8001dee:	54ca      	strb	r2, [r1, r3]
		wr_pointer_rx_rs485++;
 8001df0:	4b0b      	ldr	r3, [pc, #44]	; (8001e20 <put_in_rx_buffer+0x98>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	3301      	adds	r3, #1
 8001df6:	4a0a      	ldr	r2, [pc, #40]	; (8001e20 <put_in_rx_buffer+0x98>)
 8001df8:	6013      	str	r3, [r2, #0]
 8001dfa:	e002      	b.n	8001e02 <put_in_rx_buffer+0x7a>
				return;
 8001dfc:	bf00      	nop
 8001dfe:	e000      	b.n	8001e02 <put_in_rx_buffer+0x7a>
				return;
 8001e00:	bf00      	nop
	}
}
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr
 8001e0c:	20000008 	.word	0x20000008
 8001e10:	20002e98 	.word	0x20002e98
 8001e14:	20002e94 	.word	0x20002e94
 8001e18:	20000e94 	.word	0x20000e94
 8001e1c:	20000004 	.word	0x20000004
 8001e20:	20000e90 	.word	0x20000e90
 8001e24:	20000e8c 	.word	0x20000e8c
 8001e28:	20000a8c 	.word	0x20000a8c

08001e2c <get_from_tx_buffer>:
		tx_buffer_dbg[wr_pointer_dbg & (LEN_TX_BUFFER_DBG - 1)]=data;
		wr_pointer_dbg++;
	}
}
char get_from_tx_buffer(USART_TypeDef* USARTx)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
	char data;

	if(USARTx == RS485_UART)
 8001e34:	4b14      	ldr	r3, [pc, #80]	; (8001e88 <get_from_tx_buffer+0x5c>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d10c      	bne.n	8001e58 <get_from_tx_buffer+0x2c>
	{

		data=tx_buffer_rs485[rd_pointer_rs485 & (LEN_TX_BUFFER_RS485-1)];
 8001e3e:	4b13      	ldr	r3, [pc, #76]	; (8001e8c <get_from_tx_buffer+0x60>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e46:	4a12      	ldr	r2, [pc, #72]	; (8001e90 <get_from_tx_buffer+0x64>)
 8001e48:	5cd3      	ldrb	r3, [r2, r3]
 8001e4a:	73fb      	strb	r3, [r7, #15]
		rd_pointer_rs485++;
 8001e4c:	4b0f      	ldr	r3, [pc, #60]	; (8001e8c <get_from_tx_buffer+0x60>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	3301      	adds	r3, #1
 8001e52:	4a0e      	ldr	r2, [pc, #56]	; (8001e8c <get_from_tx_buffer+0x60>)
 8001e54:	6013      	str	r3, [r2, #0]
 8001e56:	e010      	b.n	8001e7a <get_from_tx_buffer+0x4e>
	}
	else if(USARTx == DBG_UART)
 8001e58:	4b0e      	ldr	r3, [pc, #56]	; (8001e94 <get_from_tx_buffer+0x68>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d10b      	bne.n	8001e7a <get_from_tx_buffer+0x4e>
	{

		data=tx_buffer_dbg[rd_pointer_dbg & (LEN_TX_BUFFER_DBG-1)];
 8001e62:	4b0d      	ldr	r3, [pc, #52]	; (8001e98 <get_from_tx_buffer+0x6c>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e6a:	4a0c      	ldr	r2, [pc, #48]	; (8001e9c <get_from_tx_buffer+0x70>)
 8001e6c:	5cd3      	ldrb	r3, [r2, r3]
 8001e6e:	73fb      	strb	r3, [r7, #15]
		rd_pointer_dbg++;
 8001e70:	4b09      	ldr	r3, [pc, #36]	; (8001e98 <get_from_tx_buffer+0x6c>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	3301      	adds	r3, #1
 8001e76:	4a08      	ldr	r2, [pc, #32]	; (8001e98 <get_from_tx_buffer+0x6c>)
 8001e78:	6013      	str	r3, [r2, #0]
	}
	return data;
 8001e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3714      	adds	r7, #20
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr
 8001e88:	20000004 	.word	0x20000004
 8001e8c:	2000067c 	.word	0x2000067c
 8001e90:	2000027c 	.word	0x2000027c
 8001e94:	20000008 	.word	0x20000008
 8001e98:	20000a84 	.word	0x20000a84
 8001e9c:	20000684 	.word	0x20000684

08001ea0 <get_from_rx_buffer>:
char get_from_rx_buffer(USART_TypeDef* USARTx)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b085      	sub	sp, #20
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
	char data;

	if(USARTx == RS485_UART)
 8001ea8:	4b14      	ldr	r3, [pc, #80]	; (8001efc <get_from_rx_buffer+0x5c>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d10c      	bne.n	8001ecc <get_from_rx_buffer+0x2c>
	{

		data=rx_buffer_rs485[rd_pointer_rx_rs485 & (LEN_RX_BUFFER_RS485-1)];
 8001eb2:	4b13      	ldr	r3, [pc, #76]	; (8001f00 <get_from_rx_buffer+0x60>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001eba:	4a12      	ldr	r2, [pc, #72]	; (8001f04 <get_from_rx_buffer+0x64>)
 8001ebc:	5cd3      	ldrb	r3, [r2, r3]
 8001ebe:	73fb      	strb	r3, [r7, #15]
		rd_pointer_rx_rs485++;
 8001ec0:	4b0f      	ldr	r3, [pc, #60]	; (8001f00 <get_from_rx_buffer+0x60>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	4a0e      	ldr	r2, [pc, #56]	; (8001f00 <get_from_rx_buffer+0x60>)
 8001ec8:	6013      	str	r3, [r2, #0]
 8001eca:	e010      	b.n	8001eee <get_from_rx_buffer+0x4e>
	}
	else if(USARTx == DBG_UART)
 8001ecc:	4b0e      	ldr	r3, [pc, #56]	; (8001f08 <get_from_rx_buffer+0x68>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d10b      	bne.n	8001eee <get_from_rx_buffer+0x4e>
	{

		data=rx_buffer_dbg[rd_pointer_rx_dbg & (LEN_RX_BUFFER_DBG-1)];
 8001ed6:	4b0d      	ldr	r3, [pc, #52]	; (8001f0c <get_from_rx_buffer+0x6c>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001ede:	4a0c      	ldr	r2, [pc, #48]	; (8001f10 <get_from_rx_buffer+0x70>)
 8001ee0:	5cd3      	ldrb	r3, [r2, r3]
 8001ee2:	73fb      	strb	r3, [r7, #15]
		rd_pointer_rx_dbg++;
 8001ee4:	4b09      	ldr	r3, [pc, #36]	; (8001f0c <get_from_rx_buffer+0x6c>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	4a08      	ldr	r2, [pc, #32]	; (8001f0c <get_from_rx_buffer+0x6c>)
 8001eec:	6013      	str	r3, [r2, #0]
	}
	return data;
 8001eee:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3714      	adds	r7, #20
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr
 8001efc:	20000004 	.word	0x20000004
 8001f00:	20000e8c 	.word	0x20000e8c
 8001f04:	20000a8c 	.word	0x20000a8c
 8001f08:	20000008 	.word	0x20000008
 8001f0c:	20002e94 	.word	0x20002e94
 8001f10:	20000e94 	.word	0x20000e94

08001f14 <usart_message_ready>:

	return 0;
}
//**************************************************************************************
char usart_message_ready(USART_TypeDef* USARTx, char delimiter)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b085      	sub	sp, #20
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	70fb      	strb	r3, [r7, #3]
	if (USARTx == DBG_UART)
 8001f20:	4b1f      	ldr	r3, [pc, #124]	; (8001fa0 <usart_message_ready+0x8c>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d117      	bne.n	8001f5a <usart_message_ready+0x46>
	{
		unsigned long tail = rd_pointer_rx_dbg;
 8001f2a:	4b1e      	ldr	r3, [pc, #120]	; (8001fa4 <usart_message_ready+0x90>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	60fb      	str	r3, [r7, #12]

		while ((wr_pointer_rx_dbg - tail) != 0)
 8001f30:	e00d      	b.n	8001f4e <usart_message_ready+0x3a>
		{
			if (rx_buffer_dbg[tail & (LEN_RX_BUFFER_DBG - 1)] == delimiter)
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001f38:	4a1b      	ldr	r2, [pc, #108]	; (8001fa8 <usart_message_ready+0x94>)
 8001f3a:	5cd3      	ldrb	r3, [r2, r3]
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	78fa      	ldrb	r2, [r7, #3]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d101      	bne.n	8001f48 <usart_message_ready+0x34>
				return 1;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e025      	b.n	8001f94 <usart_message_ready+0x80>
			++tail;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	60fb      	str	r3, [r7, #12]
		while ((wr_pointer_rx_dbg - tail) != 0)
 8001f4e:	4b17      	ldr	r3, [pc, #92]	; (8001fac <usart_message_ready+0x98>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	68fa      	ldr	r2, [r7, #12]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d1ec      	bne.n	8001f32 <usart_message_ready+0x1e>
 8001f58:	e01b      	b.n	8001f92 <usart_message_ready+0x7e>
		}
	}
	else if (USARTx == RS485_UART)
 8001f5a:	4b15      	ldr	r3, [pc, #84]	; (8001fb0 <usart_message_ready+0x9c>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d116      	bne.n	8001f92 <usart_message_ready+0x7e>
	{
		unsigned long tail = rd_pointer_rx_rs485;
 8001f64:	4b13      	ldr	r3, [pc, #76]	; (8001fb4 <usart_message_ready+0xa0>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	60bb      	str	r3, [r7, #8]

		while ((wr_pointer_rx_rs485 - tail) != 0)
 8001f6a:	e00d      	b.n	8001f88 <usart_message_ready+0x74>
		{
			if (rx_buffer_rs485[tail & (LEN_RX_BUFFER_RS485 - 1)] == delimiter)
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f72:	4a11      	ldr	r2, [pc, #68]	; (8001fb8 <usart_message_ready+0xa4>)
 8001f74:	5cd3      	ldrb	r3, [r2, r3]
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	78fa      	ldrb	r2, [r7, #3]
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d101      	bne.n	8001f82 <usart_message_ready+0x6e>
				return 1;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e008      	b.n	8001f94 <usart_message_ready+0x80>
			++tail;
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	3301      	adds	r3, #1
 8001f86:	60bb      	str	r3, [r7, #8]
		while ((wr_pointer_rx_rs485 - tail) != 0)
 8001f88:	4b0c      	ldr	r3, [pc, #48]	; (8001fbc <usart_message_ready+0xa8>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	68ba      	ldr	r2, [r7, #8]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d1ec      	bne.n	8001f6c <usart_message_ready+0x58>
		}
	}
	return 0;
 8001f92:	2300      	movs	r3, #0
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3714      	adds	r7, #20
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr
 8001fa0:	20000008 	.word	0x20000008
 8001fa4:	20002e94 	.word	0x20002e94
 8001fa8:	20000e94 	.word	0x20000e94
 8001fac:	20002e98 	.word	0x20002e98
 8001fb0:	20000004 	.word	0x20000004
 8001fb4:	20000e8c 	.word	0x20000e8c
 8001fb8:	20000a8c 	.word	0x20000a8c
 8001fbc:	20000e90 	.word	0x20000e90

08001fc0 <read_usart_message>:
/*
 * Reads message from specified uart rx buffer into @dst until @delimiter character is encountered or @max_len exceeded.
 * Returns: number of characters read if successful, zero when there is no message ready to be read.
 */
unsigned int read_usart_message(char* dst, UART_HandleTypeDef* huart, int max_len, char delimiter)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b086      	sub	sp, #24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]
 8001fcc:	70fb      	strb	r3, [r7, #3]
	USART_TypeDef* USARTx = huart->Instance;
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	613b      	str	r3, [r7, #16]
	if (usart_message_ready(USARTx,delimiter))
 8001fd4:	78fb      	ldrb	r3, [r7, #3]
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	6938      	ldr	r0, [r7, #16]
 8001fda:	f7ff ff9b 	bl	8001f14 <usart_message_ready>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d018      	beq.n	8002016 <read_usart_message+0x56>
	{
		int nr = 0;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	617b      	str	r3, [r7, #20]
		do
		{
			*dst = get_from_rx_buffer(USARTx);
 8001fe8:	6938      	ldr	r0, [r7, #16]
 8001fea:	f7ff ff59 	bl	8001ea0 <get_from_rx_buffer>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	701a      	strb	r2, [r3, #0]
			++nr;
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	617b      	str	r3, [r7, #20]
		} while (*dst++ != delimiter && nr < max_len);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	1c5a      	adds	r2, r3, #1
 8002000:	60fa      	str	r2, [r7, #12]
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	78fa      	ldrb	r2, [r7, #3]
 8002006:	429a      	cmp	r2, r3
 8002008:	d003      	beq.n	8002012 <read_usart_message+0x52>
 800200a:	697a      	ldr	r2, [r7, #20]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	429a      	cmp	r2, r3
 8002010:	dbea      	blt.n	8001fe8 <read_usart_message+0x28>

		return nr;
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	e000      	b.n	8002018 <read_usart_message+0x58>
	}
	return 0;
 8002016:	2300      	movs	r3, #0
}
 8002018:	4618      	mov	r0, r3
 800201a:	3718      	adds	r7, #24
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002020:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002058 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002024:	480d      	ldr	r0, [pc, #52]	; (800205c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002026:	490e      	ldr	r1, [pc, #56]	; (8002060 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002028:	4a0e      	ldr	r2, [pc, #56]	; (8002064 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800202a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800202c:	e002      	b.n	8002034 <LoopCopyDataInit>

0800202e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800202e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002030:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002032:	3304      	adds	r3, #4

08002034 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002034:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002036:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002038:	d3f9      	bcc.n	800202e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800203a:	4a0b      	ldr	r2, [pc, #44]	; (8002068 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800203c:	4c0b      	ldr	r4, [pc, #44]	; (800206c <LoopFillZerobss+0x26>)
  movs r3, #0
 800203e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002040:	e001      	b.n	8002046 <LoopFillZerobss>

08002042 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002042:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002044:	3204      	adds	r2, #4

08002046 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002046:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002048:	d3fb      	bcc.n	8002042 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800204a:	f7ff fe79 	bl	8001d40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800204e:	f002 fba1 	bl	8004794 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002052:	f7ff f815 	bl	8001080 <main>
  bx  lr    
 8002056:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002058:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800205c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002060:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002064:	08005c48 	.word	0x08005c48
  ldr r2, =_sbss
 8002068:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800206c:	20002eb0 	.word	0x20002eb0

08002070 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002070:	e7fe      	b.n	8002070 <ADC_IRQHandler>
	...

08002074 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002078:	4b0e      	ldr	r3, [pc, #56]	; (80020b4 <HAL_Init+0x40>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a0d      	ldr	r2, [pc, #52]	; (80020b4 <HAL_Init+0x40>)
 800207e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002082:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002084:	4b0b      	ldr	r3, [pc, #44]	; (80020b4 <HAL_Init+0x40>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a0a      	ldr	r2, [pc, #40]	; (80020b4 <HAL_Init+0x40>)
 800208a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800208e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002090:	4b08      	ldr	r3, [pc, #32]	; (80020b4 <HAL_Init+0x40>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a07      	ldr	r2, [pc, #28]	; (80020b4 <HAL_Init+0x40>)
 8002096:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800209a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800209c:	2003      	movs	r0, #3
 800209e:	f000 f94f 	bl	8002340 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020a2:	2000      	movs	r0, #0
 80020a4:	f000 f808 	bl	80020b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020a8:	f7ff faee 	bl	8001688 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	40023c00 	.word	0x40023c00

080020b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020c0:	4b12      	ldr	r3, [pc, #72]	; (800210c <HAL_InitTick+0x54>)
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	4b12      	ldr	r3, [pc, #72]	; (8002110 <HAL_InitTick+0x58>)
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	4619      	mov	r1, r3
 80020ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80020d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020d6:	4618      	mov	r0, r3
 80020d8:	f000 f967 	bl	80023aa <HAL_SYSTICK_Config>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e00e      	b.n	8002104 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2b0f      	cmp	r3, #15
 80020ea:	d80a      	bhi.n	8002102 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020ec:	2200      	movs	r2, #0
 80020ee:	6879      	ldr	r1, [r7, #4]
 80020f0:	f04f 30ff 	mov.w	r0, #4294967295
 80020f4:	f000 f92f 	bl	8002356 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020f8:	4a06      	ldr	r2, [pc, #24]	; (8002114 <HAL_InitTick+0x5c>)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020fe:	2300      	movs	r3, #0
 8002100:	e000      	b.n	8002104 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
}
 8002104:	4618      	mov	r0, r3
 8002106:	3708      	adds	r7, #8
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	20000000 	.word	0x20000000
 8002110:	20000010 	.word	0x20000010
 8002114:	2000000c 	.word	0x2000000c

08002118 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800211c:	4b06      	ldr	r3, [pc, #24]	; (8002138 <HAL_IncTick+0x20>)
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	461a      	mov	r2, r3
 8002122:	4b06      	ldr	r3, [pc, #24]	; (800213c <HAL_IncTick+0x24>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4413      	add	r3, r2
 8002128:	4a04      	ldr	r2, [pc, #16]	; (800213c <HAL_IncTick+0x24>)
 800212a:	6013      	str	r3, [r2, #0]
}
 800212c:	bf00      	nop
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	20000010 	.word	0x20000010
 800213c:	20002e9c 	.word	0x20002e9c

08002140 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  return uwTick;
 8002144:	4b03      	ldr	r3, [pc, #12]	; (8002154 <HAL_GetTick+0x14>)
 8002146:	681b      	ldr	r3, [r3, #0]
}
 8002148:	4618      	mov	r0, r3
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	20002e9c 	.word	0x20002e9c

08002158 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002160:	f7ff ffee 	bl	8002140 <HAL_GetTick>
 8002164:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002170:	d005      	beq.n	800217e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002172:	4b0a      	ldr	r3, [pc, #40]	; (800219c <HAL_Delay+0x44>)
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	461a      	mov	r2, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	4413      	add	r3, r2
 800217c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800217e:	bf00      	nop
 8002180:	f7ff ffde 	bl	8002140 <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	68fa      	ldr	r2, [r7, #12]
 800218c:	429a      	cmp	r2, r3
 800218e:	d8f7      	bhi.n	8002180 <HAL_Delay+0x28>
  {
  }
}
 8002190:	bf00      	nop
 8002192:	bf00      	nop
 8002194:	3710      	adds	r7, #16
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	20000010 	.word	0x20000010

080021a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f003 0307 	and.w	r3, r3, #7
 80021ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021b0:	4b0c      	ldr	r3, [pc, #48]	; (80021e4 <__NVIC_SetPriorityGrouping+0x44>)
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021b6:	68ba      	ldr	r2, [r7, #8]
 80021b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021bc:	4013      	ands	r3, r2
 80021be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021d2:	4a04      	ldr	r2, [pc, #16]	; (80021e4 <__NVIC_SetPriorityGrouping+0x44>)
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	60d3      	str	r3, [r2, #12]
}
 80021d8:	bf00      	nop
 80021da:	3714      	adds	r7, #20
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr
 80021e4:	e000ed00 	.word	0xe000ed00

080021e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021ec:	4b04      	ldr	r3, [pc, #16]	; (8002200 <__NVIC_GetPriorityGrouping+0x18>)
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	0a1b      	lsrs	r3, r3, #8
 80021f2:	f003 0307 	and.w	r3, r3, #7
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr
 8002200:	e000ed00 	.word	0xe000ed00

08002204 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	4603      	mov	r3, r0
 800220c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800220e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002212:	2b00      	cmp	r3, #0
 8002214:	db0b      	blt.n	800222e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002216:	79fb      	ldrb	r3, [r7, #7]
 8002218:	f003 021f 	and.w	r2, r3, #31
 800221c:	4907      	ldr	r1, [pc, #28]	; (800223c <__NVIC_EnableIRQ+0x38>)
 800221e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002222:	095b      	lsrs	r3, r3, #5
 8002224:	2001      	movs	r0, #1
 8002226:	fa00 f202 	lsl.w	r2, r0, r2
 800222a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800222e:	bf00      	nop
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	e000e100 	.word	0xe000e100

08002240 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	4603      	mov	r3, r0
 8002248:	6039      	str	r1, [r7, #0]
 800224a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800224c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002250:	2b00      	cmp	r3, #0
 8002252:	db0a      	blt.n	800226a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	b2da      	uxtb	r2, r3
 8002258:	490c      	ldr	r1, [pc, #48]	; (800228c <__NVIC_SetPriority+0x4c>)
 800225a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800225e:	0112      	lsls	r2, r2, #4
 8002260:	b2d2      	uxtb	r2, r2
 8002262:	440b      	add	r3, r1
 8002264:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002268:	e00a      	b.n	8002280 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	b2da      	uxtb	r2, r3
 800226e:	4908      	ldr	r1, [pc, #32]	; (8002290 <__NVIC_SetPriority+0x50>)
 8002270:	79fb      	ldrb	r3, [r7, #7]
 8002272:	f003 030f 	and.w	r3, r3, #15
 8002276:	3b04      	subs	r3, #4
 8002278:	0112      	lsls	r2, r2, #4
 800227a:	b2d2      	uxtb	r2, r2
 800227c:	440b      	add	r3, r1
 800227e:	761a      	strb	r2, [r3, #24]
}
 8002280:	bf00      	nop
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr
 800228c:	e000e100 	.word	0xe000e100
 8002290:	e000ed00 	.word	0xe000ed00

08002294 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002294:	b480      	push	{r7}
 8002296:	b089      	sub	sp, #36	; 0x24
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f003 0307 	and.w	r3, r3, #7
 80022a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	f1c3 0307 	rsb	r3, r3, #7
 80022ae:	2b04      	cmp	r3, #4
 80022b0:	bf28      	it	cs
 80022b2:	2304      	movcs	r3, #4
 80022b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	3304      	adds	r3, #4
 80022ba:	2b06      	cmp	r3, #6
 80022bc:	d902      	bls.n	80022c4 <NVIC_EncodePriority+0x30>
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	3b03      	subs	r3, #3
 80022c2:	e000      	b.n	80022c6 <NVIC_EncodePriority+0x32>
 80022c4:	2300      	movs	r3, #0
 80022c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022c8:	f04f 32ff 	mov.w	r2, #4294967295
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
 80022d2:	43da      	mvns	r2, r3
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	401a      	ands	r2, r3
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022dc:	f04f 31ff 	mov.w	r1, #4294967295
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	fa01 f303 	lsl.w	r3, r1, r3
 80022e6:	43d9      	mvns	r1, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022ec:	4313      	orrs	r3, r2
         );
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3724      	adds	r7, #36	; 0x24
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
	...

080022fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	3b01      	subs	r3, #1
 8002308:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800230c:	d301      	bcc.n	8002312 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800230e:	2301      	movs	r3, #1
 8002310:	e00f      	b.n	8002332 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002312:	4a0a      	ldr	r2, [pc, #40]	; (800233c <SysTick_Config+0x40>)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	3b01      	subs	r3, #1
 8002318:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800231a:	210f      	movs	r1, #15
 800231c:	f04f 30ff 	mov.w	r0, #4294967295
 8002320:	f7ff ff8e 	bl	8002240 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002324:	4b05      	ldr	r3, [pc, #20]	; (800233c <SysTick_Config+0x40>)
 8002326:	2200      	movs	r2, #0
 8002328:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800232a:	4b04      	ldr	r3, [pc, #16]	; (800233c <SysTick_Config+0x40>)
 800232c:	2207      	movs	r2, #7
 800232e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	e000e010 	.word	0xe000e010

08002340 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f7ff ff29 	bl	80021a0 <__NVIC_SetPriorityGrouping>
}
 800234e:	bf00      	nop
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002356:	b580      	push	{r7, lr}
 8002358:	b086      	sub	sp, #24
 800235a:	af00      	add	r7, sp, #0
 800235c:	4603      	mov	r3, r0
 800235e:	60b9      	str	r1, [r7, #8]
 8002360:	607a      	str	r2, [r7, #4]
 8002362:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002364:	2300      	movs	r3, #0
 8002366:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002368:	f7ff ff3e 	bl	80021e8 <__NVIC_GetPriorityGrouping>
 800236c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	68b9      	ldr	r1, [r7, #8]
 8002372:	6978      	ldr	r0, [r7, #20]
 8002374:	f7ff ff8e 	bl	8002294 <NVIC_EncodePriority>
 8002378:	4602      	mov	r2, r0
 800237a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800237e:	4611      	mov	r1, r2
 8002380:	4618      	mov	r0, r3
 8002382:	f7ff ff5d 	bl	8002240 <__NVIC_SetPriority>
}
 8002386:	bf00      	nop
 8002388:	3718      	adds	r7, #24
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800238e:	b580      	push	{r7, lr}
 8002390:	b082      	sub	sp, #8
 8002392:	af00      	add	r7, sp, #0
 8002394:	4603      	mov	r3, r0
 8002396:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239c:	4618      	mov	r0, r3
 800239e:	f7ff ff31 	bl	8002204 <__NVIC_EnableIRQ>
}
 80023a2:	bf00      	nop
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}

080023aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b082      	sub	sp, #8
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f7ff ffa2 	bl	80022fc <SysTick_Config>
 80023b8:	4603      	mov	r3, r0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b084      	sub	sp, #16
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ce:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80023d0:	f7ff feb6 	bl	8002140 <HAL_GetTick>
 80023d4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d008      	beq.n	80023f4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2280      	movs	r2, #128	; 0x80
 80023e6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e052      	b.n	800249a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f022 0216 	bic.w	r2, r2, #22
 8002402:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	695a      	ldr	r2, [r3, #20]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002412:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002418:	2b00      	cmp	r3, #0
 800241a:	d103      	bne.n	8002424 <HAL_DMA_Abort+0x62>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002420:	2b00      	cmp	r3, #0
 8002422:	d007      	beq.n	8002434 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f022 0208 	bic.w	r2, r2, #8
 8002432:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f022 0201 	bic.w	r2, r2, #1
 8002442:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002444:	e013      	b.n	800246e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002446:	f7ff fe7b 	bl	8002140 <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	2b05      	cmp	r3, #5
 8002452:	d90c      	bls.n	800246e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2220      	movs	r2, #32
 8002458:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2203      	movs	r2, #3
 800245e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e015      	b.n	800249a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0301 	and.w	r3, r3, #1
 8002478:	2b00      	cmp	r3, #0
 800247a:	d1e4      	bne.n	8002446 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002480:	223f      	movs	r2, #63	; 0x3f
 8002482:	409a      	lsls	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3710      	adds	r7, #16
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024a2:	b480      	push	{r7}
 80024a4:	b083      	sub	sp, #12
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d004      	beq.n	80024c0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2280      	movs	r2, #128	; 0x80
 80024ba:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e00c      	b.n	80024da <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2205      	movs	r2, #5
 80024c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f022 0201 	bic.w	r2, r2, #1
 80024d6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
	...

080024e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b089      	sub	sp, #36	; 0x24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024f2:	2300      	movs	r3, #0
 80024f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024f6:	2300      	movs	r3, #0
 80024f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024fa:	2300      	movs	r3, #0
 80024fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024fe:	2300      	movs	r3, #0
 8002500:	61fb      	str	r3, [r7, #28]
 8002502:	e16b      	b.n	80027dc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002504:	2201      	movs	r2, #1
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	697a      	ldr	r2, [r7, #20]
 8002514:	4013      	ands	r3, r2
 8002516:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002518:	693a      	ldr	r2, [r7, #16]
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	429a      	cmp	r2, r3
 800251e:	f040 815a 	bne.w	80027d6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f003 0303 	and.w	r3, r3, #3
 800252a:	2b01      	cmp	r3, #1
 800252c:	d005      	beq.n	800253a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002536:	2b02      	cmp	r3, #2
 8002538:	d130      	bne.n	800259c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	2203      	movs	r2, #3
 8002546:	fa02 f303 	lsl.w	r3, r2, r3
 800254a:	43db      	mvns	r3, r3
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	4013      	ands	r3, r2
 8002550:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	68da      	ldr	r2, [r3, #12]
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	fa02 f303 	lsl.w	r3, r2, r3
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	4313      	orrs	r3, r2
 8002562:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002570:	2201      	movs	r2, #1
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	43db      	mvns	r3, r3
 800257a:	69ba      	ldr	r2, [r7, #24]
 800257c:	4013      	ands	r3, r2
 800257e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	091b      	lsrs	r3, r3, #4
 8002586:	f003 0201 	and.w	r2, r3, #1
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	fa02 f303 	lsl.w	r3, r2, r3
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	4313      	orrs	r3, r2
 8002594:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f003 0303 	and.w	r3, r3, #3
 80025a4:	2b03      	cmp	r3, #3
 80025a6:	d017      	beq.n	80025d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	2203      	movs	r2, #3
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	43db      	mvns	r3, r3
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	4013      	ands	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	689a      	ldr	r2, [r3, #8]
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f003 0303 	and.w	r3, r3, #3
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d123      	bne.n	800262c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	08da      	lsrs	r2, r3, #3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	3208      	adds	r2, #8
 80025ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	f003 0307 	and.w	r3, r3, #7
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	220f      	movs	r2, #15
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	43db      	mvns	r3, r3
 8002602:	69ba      	ldr	r2, [r7, #24]
 8002604:	4013      	ands	r3, r2
 8002606:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	691a      	ldr	r2, [r3, #16]
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	f003 0307 	and.w	r3, r3, #7
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	fa02 f303 	lsl.w	r3, r2, r3
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	4313      	orrs	r3, r2
 800261c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	08da      	lsrs	r2, r3, #3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	3208      	adds	r2, #8
 8002626:	69b9      	ldr	r1, [r7, #24]
 8002628:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	2203      	movs	r2, #3
 8002638:	fa02 f303 	lsl.w	r3, r2, r3
 800263c:	43db      	mvns	r3, r3
 800263e:	69ba      	ldr	r2, [r7, #24]
 8002640:	4013      	ands	r3, r2
 8002642:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f003 0203 	and.w	r2, r3, #3
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	4313      	orrs	r3, r2
 8002658:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002668:	2b00      	cmp	r3, #0
 800266a:	f000 80b4 	beq.w	80027d6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800266e:	2300      	movs	r3, #0
 8002670:	60fb      	str	r3, [r7, #12]
 8002672:	4b60      	ldr	r3, [pc, #384]	; (80027f4 <HAL_GPIO_Init+0x30c>)
 8002674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002676:	4a5f      	ldr	r2, [pc, #380]	; (80027f4 <HAL_GPIO_Init+0x30c>)
 8002678:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800267c:	6453      	str	r3, [r2, #68]	; 0x44
 800267e:	4b5d      	ldr	r3, [pc, #372]	; (80027f4 <HAL_GPIO_Init+0x30c>)
 8002680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002682:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002686:	60fb      	str	r3, [r7, #12]
 8002688:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800268a:	4a5b      	ldr	r2, [pc, #364]	; (80027f8 <HAL_GPIO_Init+0x310>)
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	089b      	lsrs	r3, r3, #2
 8002690:	3302      	adds	r3, #2
 8002692:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002696:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	f003 0303 	and.w	r3, r3, #3
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	220f      	movs	r2, #15
 80026a2:	fa02 f303 	lsl.w	r3, r2, r3
 80026a6:	43db      	mvns	r3, r3
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	4013      	ands	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a52      	ldr	r2, [pc, #328]	; (80027fc <HAL_GPIO_Init+0x314>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d02b      	beq.n	800270e <HAL_GPIO_Init+0x226>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a51      	ldr	r2, [pc, #324]	; (8002800 <HAL_GPIO_Init+0x318>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d025      	beq.n	800270a <HAL_GPIO_Init+0x222>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a50      	ldr	r2, [pc, #320]	; (8002804 <HAL_GPIO_Init+0x31c>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d01f      	beq.n	8002706 <HAL_GPIO_Init+0x21e>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a4f      	ldr	r2, [pc, #316]	; (8002808 <HAL_GPIO_Init+0x320>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d019      	beq.n	8002702 <HAL_GPIO_Init+0x21a>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a4e      	ldr	r2, [pc, #312]	; (800280c <HAL_GPIO_Init+0x324>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d013      	beq.n	80026fe <HAL_GPIO_Init+0x216>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a4d      	ldr	r2, [pc, #308]	; (8002810 <HAL_GPIO_Init+0x328>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d00d      	beq.n	80026fa <HAL_GPIO_Init+0x212>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a4c      	ldr	r2, [pc, #304]	; (8002814 <HAL_GPIO_Init+0x32c>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d007      	beq.n	80026f6 <HAL_GPIO_Init+0x20e>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a4b      	ldr	r2, [pc, #300]	; (8002818 <HAL_GPIO_Init+0x330>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d101      	bne.n	80026f2 <HAL_GPIO_Init+0x20a>
 80026ee:	2307      	movs	r3, #7
 80026f0:	e00e      	b.n	8002710 <HAL_GPIO_Init+0x228>
 80026f2:	2308      	movs	r3, #8
 80026f4:	e00c      	b.n	8002710 <HAL_GPIO_Init+0x228>
 80026f6:	2306      	movs	r3, #6
 80026f8:	e00a      	b.n	8002710 <HAL_GPIO_Init+0x228>
 80026fa:	2305      	movs	r3, #5
 80026fc:	e008      	b.n	8002710 <HAL_GPIO_Init+0x228>
 80026fe:	2304      	movs	r3, #4
 8002700:	e006      	b.n	8002710 <HAL_GPIO_Init+0x228>
 8002702:	2303      	movs	r3, #3
 8002704:	e004      	b.n	8002710 <HAL_GPIO_Init+0x228>
 8002706:	2302      	movs	r3, #2
 8002708:	e002      	b.n	8002710 <HAL_GPIO_Init+0x228>
 800270a:	2301      	movs	r3, #1
 800270c:	e000      	b.n	8002710 <HAL_GPIO_Init+0x228>
 800270e:	2300      	movs	r3, #0
 8002710:	69fa      	ldr	r2, [r7, #28]
 8002712:	f002 0203 	and.w	r2, r2, #3
 8002716:	0092      	lsls	r2, r2, #2
 8002718:	4093      	lsls	r3, r2
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	4313      	orrs	r3, r2
 800271e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002720:	4935      	ldr	r1, [pc, #212]	; (80027f8 <HAL_GPIO_Init+0x310>)
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	089b      	lsrs	r3, r3, #2
 8002726:	3302      	adds	r3, #2
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800272e:	4b3b      	ldr	r3, [pc, #236]	; (800281c <HAL_GPIO_Init+0x334>)
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	43db      	mvns	r3, r3
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	4013      	ands	r3, r2
 800273c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d003      	beq.n	8002752 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	4313      	orrs	r3, r2
 8002750:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002752:	4a32      	ldr	r2, [pc, #200]	; (800281c <HAL_GPIO_Init+0x334>)
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002758:	4b30      	ldr	r3, [pc, #192]	; (800281c <HAL_GPIO_Init+0x334>)
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	43db      	mvns	r3, r3
 8002762:	69ba      	ldr	r2, [r7, #24]
 8002764:	4013      	ands	r3, r2
 8002766:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d003      	beq.n	800277c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	4313      	orrs	r3, r2
 800277a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800277c:	4a27      	ldr	r2, [pc, #156]	; (800281c <HAL_GPIO_Init+0x334>)
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002782:	4b26      	ldr	r3, [pc, #152]	; (800281c <HAL_GPIO_Init+0x334>)
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	43db      	mvns	r3, r3
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	4013      	ands	r3, r2
 8002790:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d003      	beq.n	80027a6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027a6:	4a1d      	ldr	r2, [pc, #116]	; (800281c <HAL_GPIO_Init+0x334>)
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027ac:	4b1b      	ldr	r3, [pc, #108]	; (800281c <HAL_GPIO_Init+0x334>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	43db      	mvns	r3, r3
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	4013      	ands	r3, r2
 80027ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d003      	beq.n	80027d0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027d0:	4a12      	ldr	r2, [pc, #72]	; (800281c <HAL_GPIO_Init+0x334>)
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	3301      	adds	r3, #1
 80027da:	61fb      	str	r3, [r7, #28]
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	2b0f      	cmp	r3, #15
 80027e0:	f67f ae90 	bls.w	8002504 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027e4:	bf00      	nop
 80027e6:	bf00      	nop
 80027e8:	3724      	adds	r7, #36	; 0x24
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	40023800 	.word	0x40023800
 80027f8:	40013800 	.word	0x40013800
 80027fc:	40020000 	.word	0x40020000
 8002800:	40020400 	.word	0x40020400
 8002804:	40020800 	.word	0x40020800
 8002808:	40020c00 	.word	0x40020c00
 800280c:	40021000 	.word	0x40021000
 8002810:	40021400 	.word	0x40021400
 8002814:	40021800 	.word	0x40021800
 8002818:	40021c00 	.word	0x40021c00
 800281c:	40013c00 	.word	0x40013c00

08002820 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	460b      	mov	r3, r1
 800282a:	807b      	strh	r3, [r7, #2]
 800282c:	4613      	mov	r3, r2
 800282e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002830:	787b      	ldrb	r3, [r7, #1]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d003      	beq.n	800283e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002836:	887a      	ldrh	r2, [r7, #2]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800283c:	e003      	b.n	8002846 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800283e:	887b      	ldrh	r3, [r7, #2]
 8002840:	041a      	lsls	r2, r3, #16
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	619a      	str	r2, [r3, #24]
}
 8002846:	bf00      	nop
 8002848:	370c      	adds	r7, #12
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
	...

08002854 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d101      	bne.n	8002866 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e12b      	b.n	8002abe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	d106      	bne.n	8002880 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f7fe ff2c 	bl	80016d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2224      	movs	r2, #36	; 0x24
 8002884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f022 0201 	bic.w	r2, r2, #1
 8002896:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80028b8:	f000 fd7e 	bl	80033b8 <HAL_RCC_GetPCLK1Freq>
 80028bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	4a81      	ldr	r2, [pc, #516]	; (8002ac8 <HAL_I2C_Init+0x274>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d807      	bhi.n	80028d8 <HAL_I2C_Init+0x84>
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	4a80      	ldr	r2, [pc, #512]	; (8002acc <HAL_I2C_Init+0x278>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	bf94      	ite	ls
 80028d0:	2301      	movls	r3, #1
 80028d2:	2300      	movhi	r3, #0
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	e006      	b.n	80028e6 <HAL_I2C_Init+0x92>
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	4a7d      	ldr	r2, [pc, #500]	; (8002ad0 <HAL_I2C_Init+0x27c>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	bf94      	ite	ls
 80028e0:	2301      	movls	r3, #1
 80028e2:	2300      	movhi	r3, #0
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d001      	beq.n	80028ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e0e7      	b.n	8002abe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	4a78      	ldr	r2, [pc, #480]	; (8002ad4 <HAL_I2C_Init+0x280>)
 80028f2:	fba2 2303 	umull	r2, r3, r2, r3
 80028f6:	0c9b      	lsrs	r3, r3, #18
 80028f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68ba      	ldr	r2, [r7, #8]
 800290a:	430a      	orrs	r2, r1
 800290c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	6a1b      	ldr	r3, [r3, #32]
 8002914:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	4a6a      	ldr	r2, [pc, #424]	; (8002ac8 <HAL_I2C_Init+0x274>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d802      	bhi.n	8002928 <HAL_I2C_Init+0xd4>
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	3301      	adds	r3, #1
 8002926:	e009      	b.n	800293c <HAL_I2C_Init+0xe8>
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800292e:	fb02 f303 	mul.w	r3, r2, r3
 8002932:	4a69      	ldr	r2, [pc, #420]	; (8002ad8 <HAL_I2C_Init+0x284>)
 8002934:	fba2 2303 	umull	r2, r3, r2, r3
 8002938:	099b      	lsrs	r3, r3, #6
 800293a:	3301      	adds	r3, #1
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	6812      	ldr	r2, [r2, #0]
 8002940:	430b      	orrs	r3, r1
 8002942:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	69db      	ldr	r3, [r3, #28]
 800294a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800294e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	495c      	ldr	r1, [pc, #368]	; (8002ac8 <HAL_I2C_Init+0x274>)
 8002958:	428b      	cmp	r3, r1
 800295a:	d819      	bhi.n	8002990 <HAL_I2C_Init+0x13c>
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	1e59      	subs	r1, r3, #1
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	005b      	lsls	r3, r3, #1
 8002966:	fbb1 f3f3 	udiv	r3, r1, r3
 800296a:	1c59      	adds	r1, r3, #1
 800296c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002970:	400b      	ands	r3, r1
 8002972:	2b00      	cmp	r3, #0
 8002974:	d00a      	beq.n	800298c <HAL_I2C_Init+0x138>
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	1e59      	subs	r1, r3, #1
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	005b      	lsls	r3, r3, #1
 8002980:	fbb1 f3f3 	udiv	r3, r1, r3
 8002984:	3301      	adds	r3, #1
 8002986:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800298a:	e051      	b.n	8002a30 <HAL_I2C_Init+0x1dc>
 800298c:	2304      	movs	r3, #4
 800298e:	e04f      	b.n	8002a30 <HAL_I2C_Init+0x1dc>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d111      	bne.n	80029bc <HAL_I2C_Init+0x168>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	1e58      	subs	r0, r3, #1
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6859      	ldr	r1, [r3, #4]
 80029a0:	460b      	mov	r3, r1
 80029a2:	005b      	lsls	r3, r3, #1
 80029a4:	440b      	add	r3, r1
 80029a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80029aa:	3301      	adds	r3, #1
 80029ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	bf0c      	ite	eq
 80029b4:	2301      	moveq	r3, #1
 80029b6:	2300      	movne	r3, #0
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	e012      	b.n	80029e2 <HAL_I2C_Init+0x18e>
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	1e58      	subs	r0, r3, #1
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6859      	ldr	r1, [r3, #4]
 80029c4:	460b      	mov	r3, r1
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	440b      	add	r3, r1
 80029ca:	0099      	lsls	r1, r3, #2
 80029cc:	440b      	add	r3, r1
 80029ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80029d2:	3301      	adds	r3, #1
 80029d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029d8:	2b00      	cmp	r3, #0
 80029da:	bf0c      	ite	eq
 80029dc:	2301      	moveq	r3, #1
 80029de:	2300      	movne	r3, #0
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d001      	beq.n	80029ea <HAL_I2C_Init+0x196>
 80029e6:	2301      	movs	r3, #1
 80029e8:	e022      	b.n	8002a30 <HAL_I2C_Init+0x1dc>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d10e      	bne.n	8002a10 <HAL_I2C_Init+0x1bc>
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	1e58      	subs	r0, r3, #1
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6859      	ldr	r1, [r3, #4]
 80029fa:	460b      	mov	r3, r1
 80029fc:	005b      	lsls	r3, r3, #1
 80029fe:	440b      	add	r3, r1
 8002a00:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a04:	3301      	adds	r3, #1
 8002a06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a0e:	e00f      	b.n	8002a30 <HAL_I2C_Init+0x1dc>
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	1e58      	subs	r0, r3, #1
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6859      	ldr	r1, [r3, #4]
 8002a18:	460b      	mov	r3, r1
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	440b      	add	r3, r1
 8002a1e:	0099      	lsls	r1, r3, #2
 8002a20:	440b      	add	r3, r1
 8002a22:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a26:	3301      	adds	r3, #1
 8002a28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a30:	6879      	ldr	r1, [r7, #4]
 8002a32:	6809      	ldr	r1, [r1, #0]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	69da      	ldr	r2, [r3, #28]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a1b      	ldr	r3, [r3, #32]
 8002a4a:	431a      	orrs	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	430a      	orrs	r2, r1
 8002a52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002a5e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	6911      	ldr	r1, [r2, #16]
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	68d2      	ldr	r2, [r2, #12]
 8002a6a:	4311      	orrs	r1, r2
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	6812      	ldr	r2, [r2, #0]
 8002a70:	430b      	orrs	r3, r1
 8002a72:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	695a      	ldr	r2, [r3, #20]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	699b      	ldr	r3, [r3, #24]
 8002a86:	431a      	orrs	r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f042 0201 	orr.w	r2, r2, #1
 8002a9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2220      	movs	r2, #32
 8002aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3710      	adds	r7, #16
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	000186a0 	.word	0x000186a0
 8002acc:	001e847f 	.word	0x001e847f
 8002ad0:	003d08ff 	.word	0x003d08ff
 8002ad4:	431bde83 	.word	0x431bde83
 8002ad8:	10624dd3 	.word	0x10624dd3

08002adc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b086      	sub	sp, #24
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d101      	bne.n	8002aee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e267      	b.n	8002fbe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d075      	beq.n	8002be6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002afa:	4b88      	ldr	r3, [pc, #544]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	f003 030c 	and.w	r3, r3, #12
 8002b02:	2b04      	cmp	r3, #4
 8002b04:	d00c      	beq.n	8002b20 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b06:	4b85      	ldr	r3, [pc, #532]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b0e:	2b08      	cmp	r3, #8
 8002b10:	d112      	bne.n	8002b38 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b12:	4b82      	ldr	r3, [pc, #520]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b1e:	d10b      	bne.n	8002b38 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b20:	4b7e      	ldr	r3, [pc, #504]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d05b      	beq.n	8002be4 <HAL_RCC_OscConfig+0x108>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d157      	bne.n	8002be4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e242      	b.n	8002fbe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b40:	d106      	bne.n	8002b50 <HAL_RCC_OscConfig+0x74>
 8002b42:	4b76      	ldr	r3, [pc, #472]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a75      	ldr	r2, [pc, #468]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002b48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b4c:	6013      	str	r3, [r2, #0]
 8002b4e:	e01d      	b.n	8002b8c <HAL_RCC_OscConfig+0xb0>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b58:	d10c      	bne.n	8002b74 <HAL_RCC_OscConfig+0x98>
 8002b5a:	4b70      	ldr	r3, [pc, #448]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a6f      	ldr	r2, [pc, #444]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002b60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b64:	6013      	str	r3, [r2, #0]
 8002b66:	4b6d      	ldr	r3, [pc, #436]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a6c      	ldr	r2, [pc, #432]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002b6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b70:	6013      	str	r3, [r2, #0]
 8002b72:	e00b      	b.n	8002b8c <HAL_RCC_OscConfig+0xb0>
 8002b74:	4b69      	ldr	r3, [pc, #420]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a68      	ldr	r2, [pc, #416]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002b7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b7e:	6013      	str	r3, [r2, #0]
 8002b80:	4b66      	ldr	r3, [pc, #408]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a65      	ldr	r2, [pc, #404]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002b86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d013      	beq.n	8002bbc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b94:	f7ff fad4 	bl	8002140 <HAL_GetTick>
 8002b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b9a:	e008      	b.n	8002bae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b9c:	f7ff fad0 	bl	8002140 <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	2b64      	cmp	r3, #100	; 0x64
 8002ba8:	d901      	bls.n	8002bae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e207      	b.n	8002fbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bae:	4b5b      	ldr	r3, [pc, #364]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d0f0      	beq.n	8002b9c <HAL_RCC_OscConfig+0xc0>
 8002bba:	e014      	b.n	8002be6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bbc:	f7ff fac0 	bl	8002140 <HAL_GetTick>
 8002bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bc2:	e008      	b.n	8002bd6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bc4:	f7ff fabc 	bl	8002140 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b64      	cmp	r3, #100	; 0x64
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e1f3      	b.n	8002fbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bd6:	4b51      	ldr	r3, [pc, #324]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d1f0      	bne.n	8002bc4 <HAL_RCC_OscConfig+0xe8>
 8002be2:	e000      	b.n	8002be6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002be4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0302 	and.w	r3, r3, #2
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d063      	beq.n	8002cba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bf2:	4b4a      	ldr	r3, [pc, #296]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f003 030c 	and.w	r3, r3, #12
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d00b      	beq.n	8002c16 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bfe:	4b47      	ldr	r3, [pc, #284]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c06:	2b08      	cmp	r3, #8
 8002c08:	d11c      	bne.n	8002c44 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c0a:	4b44      	ldr	r3, [pc, #272]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d116      	bne.n	8002c44 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c16:	4b41      	ldr	r3, [pc, #260]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d005      	beq.n	8002c2e <HAL_RCC_OscConfig+0x152>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d001      	beq.n	8002c2e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e1c7      	b.n	8002fbe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c2e:	4b3b      	ldr	r3, [pc, #236]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	00db      	lsls	r3, r3, #3
 8002c3c:	4937      	ldr	r1, [pc, #220]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c42:	e03a      	b.n	8002cba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d020      	beq.n	8002c8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c4c:	4b34      	ldr	r3, [pc, #208]	; (8002d20 <HAL_RCC_OscConfig+0x244>)
 8002c4e:	2201      	movs	r2, #1
 8002c50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c52:	f7ff fa75 	bl	8002140 <HAL_GetTick>
 8002c56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c58:	e008      	b.n	8002c6c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c5a:	f7ff fa71 	bl	8002140 <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d901      	bls.n	8002c6c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	e1a8      	b.n	8002fbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c6c:	4b2b      	ldr	r3, [pc, #172]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0302 	and.w	r3, r3, #2
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d0f0      	beq.n	8002c5a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c78:	4b28      	ldr	r3, [pc, #160]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	691b      	ldr	r3, [r3, #16]
 8002c84:	00db      	lsls	r3, r3, #3
 8002c86:	4925      	ldr	r1, [pc, #148]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	600b      	str	r3, [r1, #0]
 8002c8c:	e015      	b.n	8002cba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c8e:	4b24      	ldr	r3, [pc, #144]	; (8002d20 <HAL_RCC_OscConfig+0x244>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c94:	f7ff fa54 	bl	8002140 <HAL_GetTick>
 8002c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c9a:	e008      	b.n	8002cae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c9c:	f7ff fa50 	bl	8002140 <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d901      	bls.n	8002cae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e187      	b.n	8002fbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cae:	4b1b      	ldr	r3, [pc, #108]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0302 	and.w	r3, r3, #2
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d1f0      	bne.n	8002c9c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0308 	and.w	r3, r3, #8
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d036      	beq.n	8002d34 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d016      	beq.n	8002cfc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cce:	4b15      	ldr	r3, [pc, #84]	; (8002d24 <HAL_RCC_OscConfig+0x248>)
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd4:	f7ff fa34 	bl	8002140 <HAL_GetTick>
 8002cd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cda:	e008      	b.n	8002cee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cdc:	f7ff fa30 	bl	8002140 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e167      	b.n	8002fbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cee:	4b0b      	ldr	r3, [pc, #44]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002cf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d0f0      	beq.n	8002cdc <HAL_RCC_OscConfig+0x200>
 8002cfa:	e01b      	b.n	8002d34 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cfc:	4b09      	ldr	r3, [pc, #36]	; (8002d24 <HAL_RCC_OscConfig+0x248>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d02:	f7ff fa1d 	bl	8002140 <HAL_GetTick>
 8002d06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d08:	e00e      	b.n	8002d28 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d0a:	f7ff fa19 	bl	8002140 <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d907      	bls.n	8002d28 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e150      	b.n	8002fbe <HAL_RCC_OscConfig+0x4e2>
 8002d1c:	40023800 	.word	0x40023800
 8002d20:	42470000 	.word	0x42470000
 8002d24:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d28:	4b88      	ldr	r3, [pc, #544]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002d2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d2c:	f003 0302 	and.w	r3, r3, #2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d1ea      	bne.n	8002d0a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0304 	and.w	r3, r3, #4
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	f000 8097 	beq.w	8002e70 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d42:	2300      	movs	r3, #0
 8002d44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d46:	4b81      	ldr	r3, [pc, #516]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d10f      	bne.n	8002d72 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d52:	2300      	movs	r3, #0
 8002d54:	60bb      	str	r3, [r7, #8]
 8002d56:	4b7d      	ldr	r3, [pc, #500]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5a:	4a7c      	ldr	r2, [pc, #496]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002d5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d60:	6413      	str	r3, [r2, #64]	; 0x40
 8002d62:	4b7a      	ldr	r3, [pc, #488]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d6a:	60bb      	str	r3, [r7, #8]
 8002d6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d72:	4b77      	ldr	r3, [pc, #476]	; (8002f50 <HAL_RCC_OscConfig+0x474>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d118      	bne.n	8002db0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d7e:	4b74      	ldr	r3, [pc, #464]	; (8002f50 <HAL_RCC_OscConfig+0x474>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a73      	ldr	r2, [pc, #460]	; (8002f50 <HAL_RCC_OscConfig+0x474>)
 8002d84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d8a:	f7ff f9d9 	bl	8002140 <HAL_GetTick>
 8002d8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d90:	e008      	b.n	8002da4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d92:	f7ff f9d5 	bl	8002140 <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d901      	bls.n	8002da4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e10c      	b.n	8002fbe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002da4:	4b6a      	ldr	r3, [pc, #424]	; (8002f50 <HAL_RCC_OscConfig+0x474>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d0f0      	beq.n	8002d92 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d106      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x2ea>
 8002db8:	4b64      	ldr	r3, [pc, #400]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dbc:	4a63      	ldr	r2, [pc, #396]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002dbe:	f043 0301 	orr.w	r3, r3, #1
 8002dc2:	6713      	str	r3, [r2, #112]	; 0x70
 8002dc4:	e01c      	b.n	8002e00 <HAL_RCC_OscConfig+0x324>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	2b05      	cmp	r3, #5
 8002dcc:	d10c      	bne.n	8002de8 <HAL_RCC_OscConfig+0x30c>
 8002dce:	4b5f      	ldr	r3, [pc, #380]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd2:	4a5e      	ldr	r2, [pc, #376]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002dd4:	f043 0304 	orr.w	r3, r3, #4
 8002dd8:	6713      	str	r3, [r2, #112]	; 0x70
 8002dda:	4b5c      	ldr	r3, [pc, #368]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dde:	4a5b      	ldr	r2, [pc, #364]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002de0:	f043 0301 	orr.w	r3, r3, #1
 8002de4:	6713      	str	r3, [r2, #112]	; 0x70
 8002de6:	e00b      	b.n	8002e00 <HAL_RCC_OscConfig+0x324>
 8002de8:	4b58      	ldr	r3, [pc, #352]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dec:	4a57      	ldr	r2, [pc, #348]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002dee:	f023 0301 	bic.w	r3, r3, #1
 8002df2:	6713      	str	r3, [r2, #112]	; 0x70
 8002df4:	4b55      	ldr	r3, [pc, #340]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df8:	4a54      	ldr	r2, [pc, #336]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002dfa:	f023 0304 	bic.w	r3, r3, #4
 8002dfe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d015      	beq.n	8002e34 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e08:	f7ff f99a 	bl	8002140 <HAL_GetTick>
 8002e0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e0e:	e00a      	b.n	8002e26 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e10:	f7ff f996 	bl	8002140 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d901      	bls.n	8002e26 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e0cb      	b.n	8002fbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e26:	4b49      	ldr	r3, [pc, #292]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d0ee      	beq.n	8002e10 <HAL_RCC_OscConfig+0x334>
 8002e32:	e014      	b.n	8002e5e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e34:	f7ff f984 	bl	8002140 <HAL_GetTick>
 8002e38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e3a:	e00a      	b.n	8002e52 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e3c:	f7ff f980 	bl	8002140 <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e0b5      	b.n	8002fbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e52:	4b3e      	ldr	r3, [pc, #248]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e56:	f003 0302 	and.w	r3, r3, #2
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1ee      	bne.n	8002e3c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e5e:	7dfb      	ldrb	r3, [r7, #23]
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d105      	bne.n	8002e70 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e64:	4b39      	ldr	r3, [pc, #228]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e68:	4a38      	ldr	r2, [pc, #224]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002e6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e6e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	699b      	ldr	r3, [r3, #24]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	f000 80a1 	beq.w	8002fbc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e7a:	4b34      	ldr	r3, [pc, #208]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f003 030c 	and.w	r3, r3, #12
 8002e82:	2b08      	cmp	r3, #8
 8002e84:	d05c      	beq.n	8002f40 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d141      	bne.n	8002f12 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e8e:	4b31      	ldr	r3, [pc, #196]	; (8002f54 <HAL_RCC_OscConfig+0x478>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e94:	f7ff f954 	bl	8002140 <HAL_GetTick>
 8002e98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e9a:	e008      	b.n	8002eae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e9c:	f7ff f950 	bl	8002140 <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d901      	bls.n	8002eae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e087      	b.n	8002fbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eae:	4b27      	ldr	r3, [pc, #156]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d1f0      	bne.n	8002e9c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	69da      	ldr	r2, [r3, #28]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a1b      	ldr	r3, [r3, #32]
 8002ec2:	431a      	orrs	r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec8:	019b      	lsls	r3, r3, #6
 8002eca:	431a      	orrs	r2, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed0:	085b      	lsrs	r3, r3, #1
 8002ed2:	3b01      	subs	r3, #1
 8002ed4:	041b      	lsls	r3, r3, #16
 8002ed6:	431a      	orrs	r2, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002edc:	061b      	lsls	r3, r3, #24
 8002ede:	491b      	ldr	r1, [pc, #108]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ee4:	4b1b      	ldr	r3, [pc, #108]	; (8002f54 <HAL_RCC_OscConfig+0x478>)
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eea:	f7ff f929 	bl	8002140 <HAL_GetTick>
 8002eee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ef0:	e008      	b.n	8002f04 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ef2:	f7ff f925 	bl	8002140 <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d901      	bls.n	8002f04 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e05c      	b.n	8002fbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f04:	4b11      	ldr	r3, [pc, #68]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d0f0      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x416>
 8002f10:	e054      	b.n	8002fbc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f12:	4b10      	ldr	r3, [pc, #64]	; (8002f54 <HAL_RCC_OscConfig+0x478>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f18:	f7ff f912 	bl	8002140 <HAL_GetTick>
 8002f1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f1e:	e008      	b.n	8002f32 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f20:	f7ff f90e 	bl	8002140 <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e045      	b.n	8002fbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f32:	4b06      	ldr	r3, [pc, #24]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d1f0      	bne.n	8002f20 <HAL_RCC_OscConfig+0x444>
 8002f3e:	e03d      	b.n	8002fbc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d107      	bne.n	8002f58 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e038      	b.n	8002fbe <HAL_RCC_OscConfig+0x4e2>
 8002f4c:	40023800 	.word	0x40023800
 8002f50:	40007000 	.word	0x40007000
 8002f54:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f58:	4b1b      	ldr	r3, [pc, #108]	; (8002fc8 <HAL_RCC_OscConfig+0x4ec>)
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	699b      	ldr	r3, [r3, #24]
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d028      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d121      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d11a      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f82:	68fa      	ldr	r2, [r7, #12]
 8002f84:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f88:	4013      	ands	r3, r2
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f8e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d111      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f9e:	085b      	lsrs	r3, r3, #1
 8002fa0:	3b01      	subs	r3, #1
 8002fa2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d107      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d001      	beq.n	8002fbc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e000      	b.n	8002fbe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3718      	adds	r7, #24
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	40023800 	.word	0x40023800

08002fcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d101      	bne.n	8002fe0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e0cc      	b.n	800317a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fe0:	4b68      	ldr	r3, [pc, #416]	; (8003184 <HAL_RCC_ClockConfig+0x1b8>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0307 	and.w	r3, r3, #7
 8002fe8:	683a      	ldr	r2, [r7, #0]
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d90c      	bls.n	8003008 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fee:	4b65      	ldr	r3, [pc, #404]	; (8003184 <HAL_RCC_ClockConfig+0x1b8>)
 8002ff0:	683a      	ldr	r2, [r7, #0]
 8002ff2:	b2d2      	uxtb	r2, r2
 8002ff4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ff6:	4b63      	ldr	r3, [pc, #396]	; (8003184 <HAL_RCC_ClockConfig+0x1b8>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0307 	and.w	r3, r3, #7
 8002ffe:	683a      	ldr	r2, [r7, #0]
 8003000:	429a      	cmp	r2, r3
 8003002:	d001      	beq.n	8003008 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e0b8      	b.n	800317a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0302 	and.w	r3, r3, #2
 8003010:	2b00      	cmp	r3, #0
 8003012:	d020      	beq.n	8003056 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0304 	and.w	r3, r3, #4
 800301c:	2b00      	cmp	r3, #0
 800301e:	d005      	beq.n	800302c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003020:	4b59      	ldr	r3, [pc, #356]	; (8003188 <HAL_RCC_ClockConfig+0x1bc>)
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	4a58      	ldr	r2, [pc, #352]	; (8003188 <HAL_RCC_ClockConfig+0x1bc>)
 8003026:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800302a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0308 	and.w	r3, r3, #8
 8003034:	2b00      	cmp	r3, #0
 8003036:	d005      	beq.n	8003044 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003038:	4b53      	ldr	r3, [pc, #332]	; (8003188 <HAL_RCC_ClockConfig+0x1bc>)
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	4a52      	ldr	r2, [pc, #328]	; (8003188 <HAL_RCC_ClockConfig+0x1bc>)
 800303e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003042:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003044:	4b50      	ldr	r3, [pc, #320]	; (8003188 <HAL_RCC_ClockConfig+0x1bc>)
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	494d      	ldr	r1, [pc, #308]	; (8003188 <HAL_RCC_ClockConfig+0x1bc>)
 8003052:	4313      	orrs	r3, r2
 8003054:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0301 	and.w	r3, r3, #1
 800305e:	2b00      	cmp	r3, #0
 8003060:	d044      	beq.n	80030ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	2b01      	cmp	r3, #1
 8003068:	d107      	bne.n	800307a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800306a:	4b47      	ldr	r3, [pc, #284]	; (8003188 <HAL_RCC_ClockConfig+0x1bc>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d119      	bne.n	80030aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e07f      	b.n	800317a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	2b02      	cmp	r3, #2
 8003080:	d003      	beq.n	800308a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003086:	2b03      	cmp	r3, #3
 8003088:	d107      	bne.n	800309a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800308a:	4b3f      	ldr	r3, [pc, #252]	; (8003188 <HAL_RCC_ClockConfig+0x1bc>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d109      	bne.n	80030aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e06f      	b.n	800317a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800309a:	4b3b      	ldr	r3, [pc, #236]	; (8003188 <HAL_RCC_ClockConfig+0x1bc>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0302 	and.w	r3, r3, #2
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d101      	bne.n	80030aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e067      	b.n	800317a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030aa:	4b37      	ldr	r3, [pc, #220]	; (8003188 <HAL_RCC_ClockConfig+0x1bc>)
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f023 0203 	bic.w	r2, r3, #3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	4934      	ldr	r1, [pc, #208]	; (8003188 <HAL_RCC_ClockConfig+0x1bc>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030bc:	f7ff f840 	bl	8002140 <HAL_GetTick>
 80030c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030c2:	e00a      	b.n	80030da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030c4:	f7ff f83c 	bl	8002140 <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d901      	bls.n	80030da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e04f      	b.n	800317a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030da:	4b2b      	ldr	r3, [pc, #172]	; (8003188 <HAL_RCC_ClockConfig+0x1bc>)
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f003 020c 	and.w	r2, r3, #12
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d1eb      	bne.n	80030c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030ec:	4b25      	ldr	r3, [pc, #148]	; (8003184 <HAL_RCC_ClockConfig+0x1b8>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0307 	and.w	r3, r3, #7
 80030f4:	683a      	ldr	r2, [r7, #0]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d20c      	bcs.n	8003114 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030fa:	4b22      	ldr	r3, [pc, #136]	; (8003184 <HAL_RCC_ClockConfig+0x1b8>)
 80030fc:	683a      	ldr	r2, [r7, #0]
 80030fe:	b2d2      	uxtb	r2, r2
 8003100:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003102:	4b20      	ldr	r3, [pc, #128]	; (8003184 <HAL_RCC_ClockConfig+0x1b8>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0307 	and.w	r3, r3, #7
 800310a:	683a      	ldr	r2, [r7, #0]
 800310c:	429a      	cmp	r2, r3
 800310e:	d001      	beq.n	8003114 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e032      	b.n	800317a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0304 	and.w	r3, r3, #4
 800311c:	2b00      	cmp	r3, #0
 800311e:	d008      	beq.n	8003132 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003120:	4b19      	ldr	r3, [pc, #100]	; (8003188 <HAL_RCC_ClockConfig+0x1bc>)
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	4916      	ldr	r1, [pc, #88]	; (8003188 <HAL_RCC_ClockConfig+0x1bc>)
 800312e:	4313      	orrs	r3, r2
 8003130:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0308 	and.w	r3, r3, #8
 800313a:	2b00      	cmp	r3, #0
 800313c:	d009      	beq.n	8003152 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800313e:	4b12      	ldr	r3, [pc, #72]	; (8003188 <HAL_RCC_ClockConfig+0x1bc>)
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	00db      	lsls	r3, r3, #3
 800314c:	490e      	ldr	r1, [pc, #56]	; (8003188 <HAL_RCC_ClockConfig+0x1bc>)
 800314e:	4313      	orrs	r3, r2
 8003150:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003152:	f000 f821 	bl	8003198 <HAL_RCC_GetSysClockFreq>
 8003156:	4602      	mov	r2, r0
 8003158:	4b0b      	ldr	r3, [pc, #44]	; (8003188 <HAL_RCC_ClockConfig+0x1bc>)
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	091b      	lsrs	r3, r3, #4
 800315e:	f003 030f 	and.w	r3, r3, #15
 8003162:	490a      	ldr	r1, [pc, #40]	; (800318c <HAL_RCC_ClockConfig+0x1c0>)
 8003164:	5ccb      	ldrb	r3, [r1, r3]
 8003166:	fa22 f303 	lsr.w	r3, r2, r3
 800316a:	4a09      	ldr	r2, [pc, #36]	; (8003190 <HAL_RCC_ClockConfig+0x1c4>)
 800316c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800316e:	4b09      	ldr	r3, [pc, #36]	; (8003194 <HAL_RCC_ClockConfig+0x1c8>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4618      	mov	r0, r3
 8003174:	f7fe ffa0 	bl	80020b8 <HAL_InitTick>

  return HAL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3710      	adds	r7, #16
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	40023c00 	.word	0x40023c00
 8003188:	40023800 	.word	0x40023800
 800318c:	08005a84 	.word	0x08005a84
 8003190:	20000000 	.word	0x20000000
 8003194:	2000000c 	.word	0x2000000c

08003198 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003198:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800319c:	b094      	sub	sp, #80	; 0x50
 800319e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80031a0:	2300      	movs	r3, #0
 80031a2:	647b      	str	r3, [r7, #68]	; 0x44
 80031a4:	2300      	movs	r3, #0
 80031a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031a8:	2300      	movs	r3, #0
 80031aa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80031ac:	2300      	movs	r3, #0
 80031ae:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031b0:	4b79      	ldr	r3, [pc, #484]	; (8003398 <HAL_RCC_GetSysClockFreq+0x200>)
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f003 030c 	and.w	r3, r3, #12
 80031b8:	2b08      	cmp	r3, #8
 80031ba:	d00d      	beq.n	80031d8 <HAL_RCC_GetSysClockFreq+0x40>
 80031bc:	2b08      	cmp	r3, #8
 80031be:	f200 80e1 	bhi.w	8003384 <HAL_RCC_GetSysClockFreq+0x1ec>
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d002      	beq.n	80031cc <HAL_RCC_GetSysClockFreq+0x34>
 80031c6:	2b04      	cmp	r3, #4
 80031c8:	d003      	beq.n	80031d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80031ca:	e0db      	b.n	8003384 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031cc:	4b73      	ldr	r3, [pc, #460]	; (800339c <HAL_RCC_GetSysClockFreq+0x204>)
 80031ce:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80031d0:	e0db      	b.n	800338a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031d2:	4b72      	ldr	r3, [pc, #456]	; (800339c <HAL_RCC_GetSysClockFreq+0x204>)
 80031d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80031d6:	e0d8      	b.n	800338a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031d8:	4b6f      	ldr	r3, [pc, #444]	; (8003398 <HAL_RCC_GetSysClockFreq+0x200>)
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031e0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031e2:	4b6d      	ldr	r3, [pc, #436]	; (8003398 <HAL_RCC_GetSysClockFreq+0x200>)
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d063      	beq.n	80032b6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031ee:	4b6a      	ldr	r3, [pc, #424]	; (8003398 <HAL_RCC_GetSysClockFreq+0x200>)
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	099b      	lsrs	r3, r3, #6
 80031f4:	2200      	movs	r2, #0
 80031f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80031f8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80031fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003200:	633b      	str	r3, [r7, #48]	; 0x30
 8003202:	2300      	movs	r3, #0
 8003204:	637b      	str	r3, [r7, #52]	; 0x34
 8003206:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800320a:	4622      	mov	r2, r4
 800320c:	462b      	mov	r3, r5
 800320e:	f04f 0000 	mov.w	r0, #0
 8003212:	f04f 0100 	mov.w	r1, #0
 8003216:	0159      	lsls	r1, r3, #5
 8003218:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800321c:	0150      	lsls	r0, r2, #5
 800321e:	4602      	mov	r2, r0
 8003220:	460b      	mov	r3, r1
 8003222:	4621      	mov	r1, r4
 8003224:	1a51      	subs	r1, r2, r1
 8003226:	6139      	str	r1, [r7, #16]
 8003228:	4629      	mov	r1, r5
 800322a:	eb63 0301 	sbc.w	r3, r3, r1
 800322e:	617b      	str	r3, [r7, #20]
 8003230:	f04f 0200 	mov.w	r2, #0
 8003234:	f04f 0300 	mov.w	r3, #0
 8003238:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800323c:	4659      	mov	r1, fp
 800323e:	018b      	lsls	r3, r1, #6
 8003240:	4651      	mov	r1, sl
 8003242:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003246:	4651      	mov	r1, sl
 8003248:	018a      	lsls	r2, r1, #6
 800324a:	4651      	mov	r1, sl
 800324c:	ebb2 0801 	subs.w	r8, r2, r1
 8003250:	4659      	mov	r1, fp
 8003252:	eb63 0901 	sbc.w	r9, r3, r1
 8003256:	f04f 0200 	mov.w	r2, #0
 800325a:	f04f 0300 	mov.w	r3, #0
 800325e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003262:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003266:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800326a:	4690      	mov	r8, r2
 800326c:	4699      	mov	r9, r3
 800326e:	4623      	mov	r3, r4
 8003270:	eb18 0303 	adds.w	r3, r8, r3
 8003274:	60bb      	str	r3, [r7, #8]
 8003276:	462b      	mov	r3, r5
 8003278:	eb49 0303 	adc.w	r3, r9, r3
 800327c:	60fb      	str	r3, [r7, #12]
 800327e:	f04f 0200 	mov.w	r2, #0
 8003282:	f04f 0300 	mov.w	r3, #0
 8003286:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800328a:	4629      	mov	r1, r5
 800328c:	028b      	lsls	r3, r1, #10
 800328e:	4621      	mov	r1, r4
 8003290:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003294:	4621      	mov	r1, r4
 8003296:	028a      	lsls	r2, r1, #10
 8003298:	4610      	mov	r0, r2
 800329a:	4619      	mov	r1, r3
 800329c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800329e:	2200      	movs	r2, #0
 80032a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80032a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80032a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80032a8:	f7fc fff2 	bl	8000290 <__aeabi_uldivmod>
 80032ac:	4602      	mov	r2, r0
 80032ae:	460b      	mov	r3, r1
 80032b0:	4613      	mov	r3, r2
 80032b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032b4:	e058      	b.n	8003368 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032b6:	4b38      	ldr	r3, [pc, #224]	; (8003398 <HAL_RCC_GetSysClockFreq+0x200>)
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	099b      	lsrs	r3, r3, #6
 80032bc:	2200      	movs	r2, #0
 80032be:	4618      	mov	r0, r3
 80032c0:	4611      	mov	r1, r2
 80032c2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80032c6:	623b      	str	r3, [r7, #32]
 80032c8:	2300      	movs	r3, #0
 80032ca:	627b      	str	r3, [r7, #36]	; 0x24
 80032cc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80032d0:	4642      	mov	r2, r8
 80032d2:	464b      	mov	r3, r9
 80032d4:	f04f 0000 	mov.w	r0, #0
 80032d8:	f04f 0100 	mov.w	r1, #0
 80032dc:	0159      	lsls	r1, r3, #5
 80032de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032e2:	0150      	lsls	r0, r2, #5
 80032e4:	4602      	mov	r2, r0
 80032e6:	460b      	mov	r3, r1
 80032e8:	4641      	mov	r1, r8
 80032ea:	ebb2 0a01 	subs.w	sl, r2, r1
 80032ee:	4649      	mov	r1, r9
 80032f0:	eb63 0b01 	sbc.w	fp, r3, r1
 80032f4:	f04f 0200 	mov.w	r2, #0
 80032f8:	f04f 0300 	mov.w	r3, #0
 80032fc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003300:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003304:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003308:	ebb2 040a 	subs.w	r4, r2, sl
 800330c:	eb63 050b 	sbc.w	r5, r3, fp
 8003310:	f04f 0200 	mov.w	r2, #0
 8003314:	f04f 0300 	mov.w	r3, #0
 8003318:	00eb      	lsls	r3, r5, #3
 800331a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800331e:	00e2      	lsls	r2, r4, #3
 8003320:	4614      	mov	r4, r2
 8003322:	461d      	mov	r5, r3
 8003324:	4643      	mov	r3, r8
 8003326:	18e3      	adds	r3, r4, r3
 8003328:	603b      	str	r3, [r7, #0]
 800332a:	464b      	mov	r3, r9
 800332c:	eb45 0303 	adc.w	r3, r5, r3
 8003330:	607b      	str	r3, [r7, #4]
 8003332:	f04f 0200 	mov.w	r2, #0
 8003336:	f04f 0300 	mov.w	r3, #0
 800333a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800333e:	4629      	mov	r1, r5
 8003340:	028b      	lsls	r3, r1, #10
 8003342:	4621      	mov	r1, r4
 8003344:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003348:	4621      	mov	r1, r4
 800334a:	028a      	lsls	r2, r1, #10
 800334c:	4610      	mov	r0, r2
 800334e:	4619      	mov	r1, r3
 8003350:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003352:	2200      	movs	r2, #0
 8003354:	61bb      	str	r3, [r7, #24]
 8003356:	61fa      	str	r2, [r7, #28]
 8003358:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800335c:	f7fc ff98 	bl	8000290 <__aeabi_uldivmod>
 8003360:	4602      	mov	r2, r0
 8003362:	460b      	mov	r3, r1
 8003364:	4613      	mov	r3, r2
 8003366:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003368:	4b0b      	ldr	r3, [pc, #44]	; (8003398 <HAL_RCC_GetSysClockFreq+0x200>)
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	0c1b      	lsrs	r3, r3, #16
 800336e:	f003 0303 	and.w	r3, r3, #3
 8003372:	3301      	adds	r3, #1
 8003374:	005b      	lsls	r3, r3, #1
 8003376:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003378:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800337a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800337c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003380:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003382:	e002      	b.n	800338a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003384:	4b05      	ldr	r3, [pc, #20]	; (800339c <HAL_RCC_GetSysClockFreq+0x204>)
 8003386:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003388:	bf00      	nop
    }
  }
  return sysclockfreq;
 800338a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800338c:	4618      	mov	r0, r3
 800338e:	3750      	adds	r7, #80	; 0x50
 8003390:	46bd      	mov	sp, r7
 8003392:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003396:	bf00      	nop
 8003398:	40023800 	.word	0x40023800
 800339c:	00f42400 	.word	0x00f42400

080033a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033a0:	b480      	push	{r7}
 80033a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033a4:	4b03      	ldr	r3, [pc, #12]	; (80033b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80033a6:	681b      	ldr	r3, [r3, #0]
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	20000000 	.word	0x20000000

080033b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80033bc:	f7ff fff0 	bl	80033a0 <HAL_RCC_GetHCLKFreq>
 80033c0:	4602      	mov	r2, r0
 80033c2:	4b05      	ldr	r3, [pc, #20]	; (80033d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	0a9b      	lsrs	r3, r3, #10
 80033c8:	f003 0307 	and.w	r3, r3, #7
 80033cc:	4903      	ldr	r1, [pc, #12]	; (80033dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80033ce:	5ccb      	ldrb	r3, [r1, r3]
 80033d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	40023800 	.word	0x40023800
 80033dc:	08005a94 	.word	0x08005a94

080033e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80033e4:	f7ff ffdc 	bl	80033a0 <HAL_RCC_GetHCLKFreq>
 80033e8:	4602      	mov	r2, r0
 80033ea:	4b05      	ldr	r3, [pc, #20]	; (8003400 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	0b5b      	lsrs	r3, r3, #13
 80033f0:	f003 0307 	and.w	r3, r3, #7
 80033f4:	4903      	ldr	r1, [pc, #12]	; (8003404 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033f6:	5ccb      	ldrb	r3, [r1, r3]
 80033f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	40023800 	.word	0x40023800
 8003404:	08005a94 	.word	0x08005a94

08003408 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d101      	bne.n	800341a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e07b      	b.n	8003512 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341e:	2b00      	cmp	r3, #0
 8003420:	d108      	bne.n	8003434 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800342a:	d009      	beq.n	8003440 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	61da      	str	r2, [r3, #28]
 8003432:	e005      	b.n	8003440 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800344c:	b2db      	uxtb	r3, r3
 800344e:	2b00      	cmp	r3, #0
 8003450:	d106      	bne.n	8003460 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f7fe f984 	bl	8001768 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2202      	movs	r2, #2
 8003464:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003476:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003488:	431a      	orrs	r2, r3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003492:	431a      	orrs	r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	691b      	ldr	r3, [r3, #16]
 8003498:	f003 0302 	and.w	r3, r3, #2
 800349c:	431a      	orrs	r2, r3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	695b      	ldr	r3, [r3, #20]
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	431a      	orrs	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	699b      	ldr	r3, [r3, #24]
 80034ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034b0:	431a      	orrs	r2, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	69db      	ldr	r3, [r3, #28]
 80034b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80034ba:	431a      	orrs	r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a1b      	ldr	r3, [r3, #32]
 80034c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034c4:	ea42 0103 	orr.w	r1, r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034cc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	430a      	orrs	r2, r1
 80034d6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	699b      	ldr	r3, [r3, #24]
 80034dc:	0c1b      	lsrs	r3, r3, #16
 80034de:	f003 0104 	and.w	r1, r3, #4
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e6:	f003 0210 	and.w	r2, r3, #16
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	430a      	orrs	r2, r1
 80034f0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	69da      	ldr	r2, [r3, #28]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003500:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3708      	adds	r7, #8
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}

0800351a <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800351a:	b580      	push	{r7, lr}
 800351c:	b084      	sub	sp, #16
 800351e:	af00      	add	r7, sp, #0
 8003520:	60f8      	str	r0, [r7, #12]
 8003522:	60b9      	str	r1, [r7, #8]
 8003524:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d101      	bne.n	8003530 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e038      	b.n	80035a2 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8003536:	b2db      	uxtb	r3, r3
 8003538:	2b00      	cmp	r3, #0
 800353a:	d106      	bne.n	800354a <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2200      	movs	r2, #0
 8003540:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8003544:	68f8      	ldr	r0, [r7, #12]
 8003546:	f7fe fa85 	bl	8001a54 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	3308      	adds	r3, #8
 8003552:	4619      	mov	r1, r3
 8003554:	4610      	mov	r0, r2
 8003556:	f001 f83b 	bl	80045d0 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6818      	ldr	r0, [r3, #0]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	461a      	mov	r2, r3
 8003564:	68b9      	ldr	r1, [r7, #8]
 8003566:	f001 f89d 	bl	80046a4 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6858      	ldr	r0, [r3, #4]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	689a      	ldr	r2, [r3, #8]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003576:	6879      	ldr	r1, [r7, #4]
 8003578:	f001 f8ca 	bl	8004710 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	68fa      	ldr	r2, [r7, #12]
 8003582:	6892      	ldr	r2, [r2, #8]
 8003584:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	68fa      	ldr	r2, [r7, #12]
 800358e:	6892      	ldr	r2, [r2, #8]
 8003590:	f041 0101 	orr.w	r1, r1, #1
 8003594:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3710      	adds	r7, #16
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}

080035aa <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b082      	sub	sp, #8
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d101      	bne.n	80035bc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e03f      	b.n	800363c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d106      	bne.n	80035d6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f7fe f967 	bl	80018a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2224      	movs	r2, #36	; 0x24
 80035da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	68da      	ldr	r2, [r3, #12]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035ec:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f000 fd7a 	bl	80040e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	691a      	ldr	r2, [r3, #16]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003602:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	695a      	ldr	r2, [r3, #20]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003612:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	68da      	ldr	r2, [r3, #12]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003622:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2220      	movs	r2, #32
 800362e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2220      	movs	r2, #32
 8003636:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800363a:	2300      	movs	r3, #0
}
 800363c:	4618      	mov	r0, r3
 800363e:	3708      	adds	r7, #8
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}

08003644 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b08a      	sub	sp, #40	; 0x28
 8003648:	af02      	add	r7, sp, #8
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	603b      	str	r3, [r7, #0]
 8003650:	4613      	mov	r3, r2
 8003652:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003654:	2300      	movs	r3, #0
 8003656:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800365e:	b2db      	uxtb	r3, r3
 8003660:	2b20      	cmp	r3, #32
 8003662:	d17c      	bne.n	800375e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d002      	beq.n	8003670 <HAL_UART_Transmit+0x2c>
 800366a:	88fb      	ldrh	r3, [r7, #6]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d101      	bne.n	8003674 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e075      	b.n	8003760 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800367a:	2b01      	cmp	r3, #1
 800367c:	d101      	bne.n	8003682 <HAL_UART_Transmit+0x3e>
 800367e:	2302      	movs	r3, #2
 8003680:	e06e      	b.n	8003760 <HAL_UART_Transmit+0x11c>
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2201      	movs	r2, #1
 8003686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2200      	movs	r2, #0
 800368e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2221      	movs	r2, #33	; 0x21
 8003694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003698:	f7fe fd52 	bl	8002140 <HAL_GetTick>
 800369c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	88fa      	ldrh	r2, [r7, #6]
 80036a2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	88fa      	ldrh	r2, [r7, #6]
 80036a8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036b2:	d108      	bne.n	80036c6 <HAL_UART_Transmit+0x82>
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	691b      	ldr	r3, [r3, #16]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d104      	bne.n	80036c6 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80036bc:	2300      	movs	r3, #0
 80036be:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	61bb      	str	r3, [r7, #24]
 80036c4:	e003      	b.n	80036ce <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036ca:	2300      	movs	r3, #0
 80036cc:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80036d6:	e02a      	b.n	800372e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	9300      	str	r3, [sp, #0]
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	2200      	movs	r2, #0
 80036e0:	2180      	movs	r1, #128	; 0x80
 80036e2:	68f8      	ldr	r0, [r7, #12]
 80036e4:	f000 faf8 	bl	8003cd8 <UART_WaitOnFlagUntilTimeout>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d001      	beq.n	80036f2 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e036      	b.n	8003760 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d10b      	bne.n	8003710 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036f8:	69bb      	ldr	r3, [r7, #24]
 80036fa:	881b      	ldrh	r3, [r3, #0]
 80036fc:	461a      	mov	r2, r3
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003706:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	3302      	adds	r3, #2
 800370c:	61bb      	str	r3, [r7, #24]
 800370e:	e007      	b.n	8003720 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	781a      	ldrb	r2, [r3, #0]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	3301      	adds	r3, #1
 800371e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003724:	b29b      	uxth	r3, r3
 8003726:	3b01      	subs	r3, #1
 8003728:	b29a      	uxth	r2, r3
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003732:	b29b      	uxth	r3, r3
 8003734:	2b00      	cmp	r3, #0
 8003736:	d1cf      	bne.n	80036d8 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	9300      	str	r3, [sp, #0]
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	2200      	movs	r2, #0
 8003740:	2140      	movs	r1, #64	; 0x40
 8003742:	68f8      	ldr	r0, [r7, #12]
 8003744:	f000 fac8 	bl	8003cd8 <UART_WaitOnFlagUntilTimeout>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d001      	beq.n	8003752 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e006      	b.n	8003760 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2220      	movs	r2, #32
 8003756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800375a:	2300      	movs	r3, #0
 800375c:	e000      	b.n	8003760 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800375e:	2302      	movs	r3, #2
  }
}
 8003760:	4618      	mov	r0, r3
 8003762:	3720      	adds	r7, #32
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b0ba      	sub	sp, #232	; 0xe8
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	695b      	ldr	r3, [r3, #20]
 800378a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800378e:	2300      	movs	r3, #0
 8003790:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003794:	2300      	movs	r3, #0
 8003796:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800379a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800379e:	f003 030f 	and.w	r3, r3, #15
 80037a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80037a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d10f      	bne.n	80037ce <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80037ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037b2:	f003 0320 	and.w	r3, r3, #32
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d009      	beq.n	80037ce <HAL_UART_IRQHandler+0x66>
 80037ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037be:	f003 0320 	and.w	r3, r3, #32
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d003      	beq.n	80037ce <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 fbd3 	bl	8003f72 <UART_Receive_IT>
      return;
 80037cc:	e256      	b.n	8003c7c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80037ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	f000 80de 	beq.w	8003994 <HAL_UART_IRQHandler+0x22c>
 80037d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037dc:	f003 0301 	and.w	r3, r3, #1
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d106      	bne.n	80037f2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80037e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037e8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	f000 80d1 	beq.w	8003994 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80037f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037f6:	f003 0301 	and.w	r3, r3, #1
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00b      	beq.n	8003816 <HAL_UART_IRQHandler+0xae>
 80037fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003806:	2b00      	cmp	r3, #0
 8003808:	d005      	beq.n	8003816 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380e:	f043 0201 	orr.w	r2, r3, #1
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800381a:	f003 0304 	and.w	r3, r3, #4
 800381e:	2b00      	cmp	r3, #0
 8003820:	d00b      	beq.n	800383a <HAL_UART_IRQHandler+0xd2>
 8003822:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003826:	f003 0301 	and.w	r3, r3, #1
 800382a:	2b00      	cmp	r3, #0
 800382c:	d005      	beq.n	800383a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003832:	f043 0202 	orr.w	r2, r3, #2
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800383a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800383e:	f003 0302 	and.w	r3, r3, #2
 8003842:	2b00      	cmp	r3, #0
 8003844:	d00b      	beq.n	800385e <HAL_UART_IRQHandler+0xf6>
 8003846:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800384a:	f003 0301 	and.w	r3, r3, #1
 800384e:	2b00      	cmp	r3, #0
 8003850:	d005      	beq.n	800385e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003856:	f043 0204 	orr.w	r2, r3, #4
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800385e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003862:	f003 0308 	and.w	r3, r3, #8
 8003866:	2b00      	cmp	r3, #0
 8003868:	d011      	beq.n	800388e <HAL_UART_IRQHandler+0x126>
 800386a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800386e:	f003 0320 	and.w	r3, r3, #32
 8003872:	2b00      	cmp	r3, #0
 8003874:	d105      	bne.n	8003882 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003876:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800387a:	f003 0301 	and.w	r3, r3, #1
 800387e:	2b00      	cmp	r3, #0
 8003880:	d005      	beq.n	800388e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003886:	f043 0208 	orr.w	r2, r3, #8
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003892:	2b00      	cmp	r3, #0
 8003894:	f000 81ed 	beq.w	8003c72 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003898:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800389c:	f003 0320 	and.w	r3, r3, #32
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d008      	beq.n	80038b6 <HAL_UART_IRQHandler+0x14e>
 80038a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038a8:	f003 0320 	and.w	r3, r3, #32
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d002      	beq.n	80038b6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f000 fb5e 	bl	8003f72 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	695b      	ldr	r3, [r3, #20]
 80038bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038c0:	2b40      	cmp	r3, #64	; 0x40
 80038c2:	bf0c      	ite	eq
 80038c4:	2301      	moveq	r3, #1
 80038c6:	2300      	movne	r3, #0
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d2:	f003 0308 	and.w	r3, r3, #8
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d103      	bne.n	80038e2 <HAL_UART_IRQHandler+0x17a>
 80038da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d04f      	beq.n	8003982 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 fa66 	bl	8003db4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	695b      	ldr	r3, [r3, #20]
 80038ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038f2:	2b40      	cmp	r3, #64	; 0x40
 80038f4:	d141      	bne.n	800397a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	3314      	adds	r3, #20
 80038fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003900:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003904:	e853 3f00 	ldrex	r3, [r3]
 8003908:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800390c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003910:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003914:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	3314      	adds	r3, #20
 800391e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003922:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003926:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800392a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800392e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003932:	e841 2300 	strex	r3, r2, [r1]
 8003936:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800393a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d1d9      	bne.n	80038f6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003946:	2b00      	cmp	r3, #0
 8003948:	d013      	beq.n	8003972 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800394e:	4a7d      	ldr	r2, [pc, #500]	; (8003b44 <HAL_UART_IRQHandler+0x3dc>)
 8003950:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003956:	4618      	mov	r0, r3
 8003958:	f7fe fda3 	bl	80024a2 <HAL_DMA_Abort_IT>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d016      	beq.n	8003990 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003966:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800396c:	4610      	mov	r0, r2
 800396e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003970:	e00e      	b.n	8003990 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 f99a 	bl	8003cac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003978:	e00a      	b.n	8003990 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 f996 	bl	8003cac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003980:	e006      	b.n	8003990 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 f992 	bl	8003cac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800398e:	e170      	b.n	8003c72 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003990:	bf00      	nop
    return;
 8003992:	e16e      	b.n	8003c72 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003998:	2b01      	cmp	r3, #1
 800399a:	f040 814a 	bne.w	8003c32 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800399e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039a2:	f003 0310 	and.w	r3, r3, #16
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	f000 8143 	beq.w	8003c32 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80039ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039b0:	f003 0310 	and.w	r3, r3, #16
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	f000 813c 	beq.w	8003c32 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80039ba:	2300      	movs	r3, #0
 80039bc:	60bb      	str	r3, [r7, #8]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	60bb      	str	r3, [r7, #8]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	60bb      	str	r3, [r7, #8]
 80039ce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	695b      	ldr	r3, [r3, #20]
 80039d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039da:	2b40      	cmp	r3, #64	; 0x40
 80039dc:	f040 80b4 	bne.w	8003b48 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80039ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	f000 8140 	beq.w	8003c76 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80039fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80039fe:	429a      	cmp	r2, r3
 8003a00:	f080 8139 	bcs.w	8003c76 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003a0a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a10:	69db      	ldr	r3, [r3, #28]
 8003a12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a16:	f000 8088 	beq.w	8003b2a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	330c      	adds	r3, #12
 8003a20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a24:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003a28:	e853 3f00 	ldrex	r3, [r3]
 8003a2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003a30:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a38:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	330c      	adds	r3, #12
 8003a42:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003a46:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003a4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a4e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003a52:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003a56:	e841 2300 	strex	r3, r2, [r1]
 8003a5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003a5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d1d9      	bne.n	8003a1a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	3314      	adds	r3, #20
 8003a6c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a70:	e853 3f00 	ldrex	r3, [r3]
 8003a74:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003a76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a78:	f023 0301 	bic.w	r3, r3, #1
 8003a7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	3314      	adds	r3, #20
 8003a86:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003a8a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003a8e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a90:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003a92:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003a96:	e841 2300 	strex	r3, r2, [r1]
 8003a9a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003a9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d1e1      	bne.n	8003a66 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	3314      	adds	r3, #20
 8003aa8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aaa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003aac:	e853 3f00 	ldrex	r3, [r3]
 8003ab0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003ab2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ab4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ab8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	3314      	adds	r3, #20
 8003ac2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003ac6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003ac8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003acc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003ace:	e841 2300 	strex	r3, r2, [r1]
 8003ad2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003ad4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d1e3      	bne.n	8003aa2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2220      	movs	r2, #32
 8003ade:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	330c      	adds	r3, #12
 8003aee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003af0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003af2:	e853 3f00 	ldrex	r3, [r3]
 8003af6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003af8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003afa:	f023 0310 	bic.w	r3, r3, #16
 8003afe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	330c      	adds	r3, #12
 8003b08:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003b0c:	65ba      	str	r2, [r7, #88]	; 0x58
 8003b0e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b10:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003b12:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b14:	e841 2300 	strex	r3, r2, [r1]
 8003b18:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003b1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d1e3      	bne.n	8003ae8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b24:	4618      	mov	r0, r3
 8003b26:	f7fe fc4c 	bl	80023c2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	4619      	mov	r1, r3
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 f8c0 	bl	8003cc0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b40:	e099      	b.n	8003c76 <HAL_UART_IRQHandler+0x50e>
 8003b42:	bf00      	nop
 8003b44:	08003e7b 	.word	0x08003e7b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	f000 808b 	beq.w	8003c7a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003b64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	f000 8086 	beq.w	8003c7a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	330c      	adds	r3, #12
 8003b74:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b78:	e853 3f00 	ldrex	r3, [r3]
 8003b7c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003b7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b84:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	330c      	adds	r3, #12
 8003b8e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003b92:	647a      	str	r2, [r7, #68]	; 0x44
 8003b94:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b96:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003b98:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b9a:	e841 2300 	strex	r3, r2, [r1]
 8003b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003ba0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d1e3      	bne.n	8003b6e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	3314      	adds	r3, #20
 8003bac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb0:	e853 3f00 	ldrex	r3, [r3]
 8003bb4:	623b      	str	r3, [r7, #32]
   return(result);
 8003bb6:	6a3b      	ldr	r3, [r7, #32]
 8003bb8:	f023 0301 	bic.w	r3, r3, #1
 8003bbc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	3314      	adds	r3, #20
 8003bc6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003bca:	633a      	str	r2, [r7, #48]	; 0x30
 8003bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003bd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bd2:	e841 2300 	strex	r3, r2, [r1]
 8003bd6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d1e3      	bne.n	8003ba6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2220      	movs	r2, #32
 8003be2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	330c      	adds	r3, #12
 8003bf2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	e853 3f00 	ldrex	r3, [r3]
 8003bfa:	60fb      	str	r3, [r7, #12]
   return(result);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f023 0310 	bic.w	r3, r3, #16
 8003c02:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	330c      	adds	r3, #12
 8003c0c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003c10:	61fa      	str	r2, [r7, #28]
 8003c12:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c14:	69b9      	ldr	r1, [r7, #24]
 8003c16:	69fa      	ldr	r2, [r7, #28]
 8003c18:	e841 2300 	strex	r3, r2, [r1]
 8003c1c:	617b      	str	r3, [r7, #20]
   return(result);
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d1e3      	bne.n	8003bec <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003c28:	4619      	mov	r1, r3
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 f848 	bl	8003cc0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003c30:	e023      	b.n	8003c7a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003c32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d009      	beq.n	8003c52 <HAL_UART_IRQHandler+0x4ea>
 8003c3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d003      	beq.n	8003c52 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f000 f929 	bl	8003ea2 <UART_Transmit_IT>
    return;
 8003c50:	e014      	b.n	8003c7c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003c52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d00e      	beq.n	8003c7c <HAL_UART_IRQHandler+0x514>
 8003c5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d008      	beq.n	8003c7c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f000 f969 	bl	8003f42 <UART_EndTransmit_IT>
    return;
 8003c70:	e004      	b.n	8003c7c <HAL_UART_IRQHandler+0x514>
    return;
 8003c72:	bf00      	nop
 8003c74:	e002      	b.n	8003c7c <HAL_UART_IRQHandler+0x514>
      return;
 8003c76:	bf00      	nop
 8003c78:	e000      	b.n	8003c7c <HAL_UART_IRQHandler+0x514>
      return;
 8003c7a:	bf00      	nop
  }
}
 8003c7c:	37e8      	adds	r7, #232	; 0xe8
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop

08003c84 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003c8c:	bf00      	nop
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003ca0:	bf00      	nop
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003cb4:	bf00      	nop
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	460b      	mov	r3, r1
 8003cca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ccc:	bf00      	nop
 8003cce:	370c      	adds	r7, #12
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b090      	sub	sp, #64	; 0x40
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	60b9      	str	r1, [r7, #8]
 8003ce2:	603b      	str	r3, [r7, #0]
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ce8:	e050      	b.n	8003d8c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cf0:	d04c      	beq.n	8003d8c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003cf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d007      	beq.n	8003d08 <UART_WaitOnFlagUntilTimeout+0x30>
 8003cf8:	f7fe fa22 	bl	8002140 <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d241      	bcs.n	8003d8c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	330c      	adds	r3, #12
 8003d0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d12:	e853 3f00 	ldrex	r3, [r3]
 8003d16:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	330c      	adds	r3, #12
 8003d26:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d28:	637a      	str	r2, [r7, #52]	; 0x34
 8003d2a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d2c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d30:	e841 2300 	strex	r3, r2, [r1]
 8003d34:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d1e5      	bne.n	8003d08 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	3314      	adds	r3, #20
 8003d42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	e853 3f00 	ldrex	r3, [r3]
 8003d4a:	613b      	str	r3, [r7, #16]
   return(result);
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	f023 0301 	bic.w	r3, r3, #1
 8003d52:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	3314      	adds	r3, #20
 8003d5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d5c:	623a      	str	r2, [r7, #32]
 8003d5e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d60:	69f9      	ldr	r1, [r7, #28]
 8003d62:	6a3a      	ldr	r2, [r7, #32]
 8003d64:	e841 2300 	strex	r3, r2, [r1]
 8003d68:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d1e5      	bne.n	8003d3c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2220      	movs	r2, #32
 8003d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2220      	movs	r2, #32
 8003d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e00f      	b.n	8003dac <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	4013      	ands	r3, r2
 8003d96:	68ba      	ldr	r2, [r7, #8]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	bf0c      	ite	eq
 8003d9c:	2301      	moveq	r3, #1
 8003d9e:	2300      	movne	r3, #0
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	461a      	mov	r2, r3
 8003da4:	79fb      	ldrb	r3, [r7, #7]
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d09f      	beq.n	8003cea <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003daa:	2300      	movs	r3, #0
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3740      	adds	r7, #64	; 0x40
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b095      	sub	sp, #84	; 0x54
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	330c      	adds	r3, #12
 8003dc2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dc6:	e853 3f00 	ldrex	r3, [r3]
 8003dca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003dd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	330c      	adds	r3, #12
 8003dda:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ddc:	643a      	str	r2, [r7, #64]	; 0x40
 8003dde:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003de2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003de4:	e841 2300 	strex	r3, r2, [r1]
 8003de8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d1e5      	bne.n	8003dbc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	3314      	adds	r3, #20
 8003df6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df8:	6a3b      	ldr	r3, [r7, #32]
 8003dfa:	e853 3f00 	ldrex	r3, [r3]
 8003dfe:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	f023 0301 	bic.w	r3, r3, #1
 8003e06:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	3314      	adds	r3, #20
 8003e0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e10:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e18:	e841 2300 	strex	r3, r2, [r1]
 8003e1c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d1e5      	bne.n	8003df0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d119      	bne.n	8003e60 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	330c      	adds	r3, #12
 8003e32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	e853 3f00 	ldrex	r3, [r3]
 8003e3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	f023 0310 	bic.w	r3, r3, #16
 8003e42:	647b      	str	r3, [r7, #68]	; 0x44
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	330c      	adds	r3, #12
 8003e4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e4c:	61ba      	str	r2, [r7, #24]
 8003e4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e50:	6979      	ldr	r1, [r7, #20]
 8003e52:	69ba      	ldr	r2, [r7, #24]
 8003e54:	e841 2300 	strex	r3, r2, [r1]
 8003e58:	613b      	str	r3, [r7, #16]
   return(result);
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d1e5      	bne.n	8003e2c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2220      	movs	r2, #32
 8003e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003e6e:	bf00      	nop
 8003e70:	3754      	adds	r7, #84	; 0x54
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr

08003e7a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e7a:	b580      	push	{r7, lr}
 8003e7c:	b084      	sub	sp, #16
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e86:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2200      	movs	r2, #0
 8003e92:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e94:	68f8      	ldr	r0, [r7, #12]
 8003e96:	f7ff ff09 	bl	8003cac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e9a:	bf00      	nop
 8003e9c:	3710      	adds	r7, #16
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}

08003ea2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003ea2:	b480      	push	{r7}
 8003ea4:	b085      	sub	sp, #20
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	2b21      	cmp	r3, #33	; 0x21
 8003eb4:	d13e      	bne.n	8003f34 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ebe:	d114      	bne.n	8003eea <UART_Transmit_IT+0x48>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	691b      	ldr	r3, [r3, #16]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d110      	bne.n	8003eea <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6a1b      	ldr	r3, [r3, #32]
 8003ecc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	881b      	ldrh	r3, [r3, #0]
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003edc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a1b      	ldr	r3, [r3, #32]
 8003ee2:	1c9a      	adds	r2, r3, #2
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	621a      	str	r2, [r3, #32]
 8003ee8:	e008      	b.n	8003efc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a1b      	ldr	r3, [r3, #32]
 8003eee:	1c59      	adds	r1, r3, #1
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	6211      	str	r1, [r2, #32]
 8003ef4:	781a      	ldrb	r2, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	3b01      	subs	r3, #1
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	4619      	mov	r1, r3
 8003f0a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d10f      	bne.n	8003f30 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	68da      	ldr	r2, [r3, #12]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f1e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	68da      	ldr	r2, [r3, #12]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f2e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003f30:	2300      	movs	r3, #0
 8003f32:	e000      	b.n	8003f36 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003f34:	2302      	movs	r3, #2
  }
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3714      	adds	r7, #20
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr

08003f42 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f42:	b580      	push	{r7, lr}
 8003f44:	b082      	sub	sp, #8
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	68da      	ldr	r2, [r3, #12]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f58:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2220      	movs	r2, #32
 8003f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f7ff fe8e 	bl	8003c84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3708      	adds	r7, #8
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}

08003f72 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003f72:	b580      	push	{r7, lr}
 8003f74:	b08c      	sub	sp, #48	; 0x30
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	2b22      	cmp	r3, #34	; 0x22
 8003f84:	f040 80ab 	bne.w	80040de <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f90:	d117      	bne.n	8003fc2 <UART_Receive_IT+0x50>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	691b      	ldr	r3, [r3, #16]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d113      	bne.n	8003fc2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fb0:	b29a      	uxth	r2, r3
 8003fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fba:	1c9a      	adds	r2, r3, #2
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	629a      	str	r2, [r3, #40]	; 0x28
 8003fc0:	e026      	b.n	8004010 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fd4:	d007      	beq.n	8003fe6 <UART_Receive_IT+0x74>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d10a      	bne.n	8003ff4 <UART_Receive_IT+0x82>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d106      	bne.n	8003ff4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	b2da      	uxtb	r2, r3
 8003fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ff0:	701a      	strb	r2, [r3, #0]
 8003ff2:	e008      	b.n	8004006 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004000:	b2da      	uxtb	r2, r3
 8004002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004004:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800400a:	1c5a      	adds	r2, r3, #1
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004014:	b29b      	uxth	r3, r3
 8004016:	3b01      	subs	r3, #1
 8004018:	b29b      	uxth	r3, r3
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	4619      	mov	r1, r3
 800401e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004020:	2b00      	cmp	r3, #0
 8004022:	d15a      	bne.n	80040da <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	68da      	ldr	r2, [r3, #12]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f022 0220 	bic.w	r2, r2, #32
 8004032:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	68da      	ldr	r2, [r3, #12]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004042:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	695a      	ldr	r2, [r3, #20]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f022 0201 	bic.w	r2, r2, #1
 8004052:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2220      	movs	r2, #32
 8004058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004060:	2b01      	cmp	r3, #1
 8004062:	d135      	bne.n	80040d0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	330c      	adds	r3, #12
 8004070:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	e853 3f00 	ldrex	r3, [r3]
 8004078:	613b      	str	r3, [r7, #16]
   return(result);
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	f023 0310 	bic.w	r3, r3, #16
 8004080:	627b      	str	r3, [r7, #36]	; 0x24
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	330c      	adds	r3, #12
 8004088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800408a:	623a      	str	r2, [r7, #32]
 800408c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800408e:	69f9      	ldr	r1, [r7, #28]
 8004090:	6a3a      	ldr	r2, [r7, #32]
 8004092:	e841 2300 	strex	r3, r2, [r1]
 8004096:	61bb      	str	r3, [r7, #24]
   return(result);
 8004098:	69bb      	ldr	r3, [r7, #24]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d1e5      	bne.n	800406a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0310 	and.w	r3, r3, #16
 80040a8:	2b10      	cmp	r3, #16
 80040aa:	d10a      	bne.n	80040c2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80040ac:	2300      	movs	r3, #0
 80040ae:	60fb      	str	r3, [r7, #12]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	60fb      	str	r3, [r7, #12]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	60fb      	str	r3, [r7, #12]
 80040c0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80040c6:	4619      	mov	r1, r3
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f7ff fdf9 	bl	8003cc0 <HAL_UARTEx_RxEventCallback>
 80040ce:	e002      	b.n	80040d6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f7ff fde1 	bl	8003c98 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80040d6:	2300      	movs	r3, #0
 80040d8:	e002      	b.n	80040e0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80040da:	2300      	movs	r3, #0
 80040dc:	e000      	b.n	80040e0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80040de:	2302      	movs	r3, #2
  }
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3730      	adds	r7, #48	; 0x30
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040ec:	b0c0      	sub	sp, #256	; 0x100
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	691b      	ldr	r3, [r3, #16]
 80040fc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004104:	68d9      	ldr	r1, [r3, #12]
 8004106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	ea40 0301 	orr.w	r3, r0, r1
 8004110:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004116:	689a      	ldr	r2, [r3, #8]
 8004118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	431a      	orrs	r2, r3
 8004120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004124:	695b      	ldr	r3, [r3, #20]
 8004126:	431a      	orrs	r2, r3
 8004128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800412c:	69db      	ldr	r3, [r3, #28]
 800412e:	4313      	orrs	r3, r2
 8004130:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004140:	f021 010c 	bic.w	r1, r1, #12
 8004144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800414e:	430b      	orrs	r3, r1
 8004150:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	695b      	ldr	r3, [r3, #20]
 800415a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800415e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004162:	6999      	ldr	r1, [r3, #24]
 8004164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	ea40 0301 	orr.w	r3, r0, r1
 800416e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	4b8f      	ldr	r3, [pc, #572]	; (80043b4 <UART_SetConfig+0x2cc>)
 8004178:	429a      	cmp	r2, r3
 800417a:	d005      	beq.n	8004188 <UART_SetConfig+0xa0>
 800417c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	4b8d      	ldr	r3, [pc, #564]	; (80043b8 <UART_SetConfig+0x2d0>)
 8004184:	429a      	cmp	r2, r3
 8004186:	d104      	bne.n	8004192 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004188:	f7ff f92a 	bl	80033e0 <HAL_RCC_GetPCLK2Freq>
 800418c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004190:	e003      	b.n	800419a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004192:	f7ff f911 	bl	80033b8 <HAL_RCC_GetPCLK1Freq>
 8004196:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800419a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800419e:	69db      	ldr	r3, [r3, #28]
 80041a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041a4:	f040 810c 	bne.w	80043c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80041a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041ac:	2200      	movs	r2, #0
 80041ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80041b2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80041b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80041ba:	4622      	mov	r2, r4
 80041bc:	462b      	mov	r3, r5
 80041be:	1891      	adds	r1, r2, r2
 80041c0:	65b9      	str	r1, [r7, #88]	; 0x58
 80041c2:	415b      	adcs	r3, r3
 80041c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80041ca:	4621      	mov	r1, r4
 80041cc:	eb12 0801 	adds.w	r8, r2, r1
 80041d0:	4629      	mov	r1, r5
 80041d2:	eb43 0901 	adc.w	r9, r3, r1
 80041d6:	f04f 0200 	mov.w	r2, #0
 80041da:	f04f 0300 	mov.w	r3, #0
 80041de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041ea:	4690      	mov	r8, r2
 80041ec:	4699      	mov	r9, r3
 80041ee:	4623      	mov	r3, r4
 80041f0:	eb18 0303 	adds.w	r3, r8, r3
 80041f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80041f8:	462b      	mov	r3, r5
 80041fa:	eb49 0303 	adc.w	r3, r9, r3
 80041fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004202:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800420e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004212:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004216:	460b      	mov	r3, r1
 8004218:	18db      	adds	r3, r3, r3
 800421a:	653b      	str	r3, [r7, #80]	; 0x50
 800421c:	4613      	mov	r3, r2
 800421e:	eb42 0303 	adc.w	r3, r2, r3
 8004222:	657b      	str	r3, [r7, #84]	; 0x54
 8004224:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004228:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800422c:	f7fc f830 	bl	8000290 <__aeabi_uldivmod>
 8004230:	4602      	mov	r2, r0
 8004232:	460b      	mov	r3, r1
 8004234:	4b61      	ldr	r3, [pc, #388]	; (80043bc <UART_SetConfig+0x2d4>)
 8004236:	fba3 2302 	umull	r2, r3, r3, r2
 800423a:	095b      	lsrs	r3, r3, #5
 800423c:	011c      	lsls	r4, r3, #4
 800423e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004242:	2200      	movs	r2, #0
 8004244:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004248:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800424c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004250:	4642      	mov	r2, r8
 8004252:	464b      	mov	r3, r9
 8004254:	1891      	adds	r1, r2, r2
 8004256:	64b9      	str	r1, [r7, #72]	; 0x48
 8004258:	415b      	adcs	r3, r3
 800425a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800425c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004260:	4641      	mov	r1, r8
 8004262:	eb12 0a01 	adds.w	sl, r2, r1
 8004266:	4649      	mov	r1, r9
 8004268:	eb43 0b01 	adc.w	fp, r3, r1
 800426c:	f04f 0200 	mov.w	r2, #0
 8004270:	f04f 0300 	mov.w	r3, #0
 8004274:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004278:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800427c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004280:	4692      	mov	sl, r2
 8004282:	469b      	mov	fp, r3
 8004284:	4643      	mov	r3, r8
 8004286:	eb1a 0303 	adds.w	r3, sl, r3
 800428a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800428e:	464b      	mov	r3, r9
 8004290:	eb4b 0303 	adc.w	r3, fp, r3
 8004294:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80042a4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80042a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80042ac:	460b      	mov	r3, r1
 80042ae:	18db      	adds	r3, r3, r3
 80042b0:	643b      	str	r3, [r7, #64]	; 0x40
 80042b2:	4613      	mov	r3, r2
 80042b4:	eb42 0303 	adc.w	r3, r2, r3
 80042b8:	647b      	str	r3, [r7, #68]	; 0x44
 80042ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80042be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80042c2:	f7fb ffe5 	bl	8000290 <__aeabi_uldivmod>
 80042c6:	4602      	mov	r2, r0
 80042c8:	460b      	mov	r3, r1
 80042ca:	4611      	mov	r1, r2
 80042cc:	4b3b      	ldr	r3, [pc, #236]	; (80043bc <UART_SetConfig+0x2d4>)
 80042ce:	fba3 2301 	umull	r2, r3, r3, r1
 80042d2:	095b      	lsrs	r3, r3, #5
 80042d4:	2264      	movs	r2, #100	; 0x64
 80042d6:	fb02 f303 	mul.w	r3, r2, r3
 80042da:	1acb      	subs	r3, r1, r3
 80042dc:	00db      	lsls	r3, r3, #3
 80042de:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80042e2:	4b36      	ldr	r3, [pc, #216]	; (80043bc <UART_SetConfig+0x2d4>)
 80042e4:	fba3 2302 	umull	r2, r3, r3, r2
 80042e8:	095b      	lsrs	r3, r3, #5
 80042ea:	005b      	lsls	r3, r3, #1
 80042ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80042f0:	441c      	add	r4, r3
 80042f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042f6:	2200      	movs	r2, #0
 80042f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80042fc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004300:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004304:	4642      	mov	r2, r8
 8004306:	464b      	mov	r3, r9
 8004308:	1891      	adds	r1, r2, r2
 800430a:	63b9      	str	r1, [r7, #56]	; 0x38
 800430c:	415b      	adcs	r3, r3
 800430e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004310:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004314:	4641      	mov	r1, r8
 8004316:	1851      	adds	r1, r2, r1
 8004318:	6339      	str	r1, [r7, #48]	; 0x30
 800431a:	4649      	mov	r1, r9
 800431c:	414b      	adcs	r3, r1
 800431e:	637b      	str	r3, [r7, #52]	; 0x34
 8004320:	f04f 0200 	mov.w	r2, #0
 8004324:	f04f 0300 	mov.w	r3, #0
 8004328:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800432c:	4659      	mov	r1, fp
 800432e:	00cb      	lsls	r3, r1, #3
 8004330:	4651      	mov	r1, sl
 8004332:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004336:	4651      	mov	r1, sl
 8004338:	00ca      	lsls	r2, r1, #3
 800433a:	4610      	mov	r0, r2
 800433c:	4619      	mov	r1, r3
 800433e:	4603      	mov	r3, r0
 8004340:	4642      	mov	r2, r8
 8004342:	189b      	adds	r3, r3, r2
 8004344:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004348:	464b      	mov	r3, r9
 800434a:	460a      	mov	r2, r1
 800434c:	eb42 0303 	adc.w	r3, r2, r3
 8004350:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004360:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004364:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004368:	460b      	mov	r3, r1
 800436a:	18db      	adds	r3, r3, r3
 800436c:	62bb      	str	r3, [r7, #40]	; 0x28
 800436e:	4613      	mov	r3, r2
 8004370:	eb42 0303 	adc.w	r3, r2, r3
 8004374:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004376:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800437a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800437e:	f7fb ff87 	bl	8000290 <__aeabi_uldivmod>
 8004382:	4602      	mov	r2, r0
 8004384:	460b      	mov	r3, r1
 8004386:	4b0d      	ldr	r3, [pc, #52]	; (80043bc <UART_SetConfig+0x2d4>)
 8004388:	fba3 1302 	umull	r1, r3, r3, r2
 800438c:	095b      	lsrs	r3, r3, #5
 800438e:	2164      	movs	r1, #100	; 0x64
 8004390:	fb01 f303 	mul.w	r3, r1, r3
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	00db      	lsls	r3, r3, #3
 8004398:	3332      	adds	r3, #50	; 0x32
 800439a:	4a08      	ldr	r2, [pc, #32]	; (80043bc <UART_SetConfig+0x2d4>)
 800439c:	fba2 2303 	umull	r2, r3, r2, r3
 80043a0:	095b      	lsrs	r3, r3, #5
 80043a2:	f003 0207 	and.w	r2, r3, #7
 80043a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4422      	add	r2, r4
 80043ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80043b0:	e105      	b.n	80045be <UART_SetConfig+0x4d6>
 80043b2:	bf00      	nop
 80043b4:	40011000 	.word	0x40011000
 80043b8:	40011400 	.word	0x40011400
 80043bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043c4:	2200      	movs	r2, #0
 80043c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80043ca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80043ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80043d2:	4642      	mov	r2, r8
 80043d4:	464b      	mov	r3, r9
 80043d6:	1891      	adds	r1, r2, r2
 80043d8:	6239      	str	r1, [r7, #32]
 80043da:	415b      	adcs	r3, r3
 80043dc:	627b      	str	r3, [r7, #36]	; 0x24
 80043de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80043e2:	4641      	mov	r1, r8
 80043e4:	1854      	adds	r4, r2, r1
 80043e6:	4649      	mov	r1, r9
 80043e8:	eb43 0501 	adc.w	r5, r3, r1
 80043ec:	f04f 0200 	mov.w	r2, #0
 80043f0:	f04f 0300 	mov.w	r3, #0
 80043f4:	00eb      	lsls	r3, r5, #3
 80043f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043fa:	00e2      	lsls	r2, r4, #3
 80043fc:	4614      	mov	r4, r2
 80043fe:	461d      	mov	r5, r3
 8004400:	4643      	mov	r3, r8
 8004402:	18e3      	adds	r3, r4, r3
 8004404:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004408:	464b      	mov	r3, r9
 800440a:	eb45 0303 	adc.w	r3, r5, r3
 800440e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004412:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800441e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004422:	f04f 0200 	mov.w	r2, #0
 8004426:	f04f 0300 	mov.w	r3, #0
 800442a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800442e:	4629      	mov	r1, r5
 8004430:	008b      	lsls	r3, r1, #2
 8004432:	4621      	mov	r1, r4
 8004434:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004438:	4621      	mov	r1, r4
 800443a:	008a      	lsls	r2, r1, #2
 800443c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004440:	f7fb ff26 	bl	8000290 <__aeabi_uldivmod>
 8004444:	4602      	mov	r2, r0
 8004446:	460b      	mov	r3, r1
 8004448:	4b60      	ldr	r3, [pc, #384]	; (80045cc <UART_SetConfig+0x4e4>)
 800444a:	fba3 2302 	umull	r2, r3, r3, r2
 800444e:	095b      	lsrs	r3, r3, #5
 8004450:	011c      	lsls	r4, r3, #4
 8004452:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004456:	2200      	movs	r2, #0
 8004458:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800445c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004460:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004464:	4642      	mov	r2, r8
 8004466:	464b      	mov	r3, r9
 8004468:	1891      	adds	r1, r2, r2
 800446a:	61b9      	str	r1, [r7, #24]
 800446c:	415b      	adcs	r3, r3
 800446e:	61fb      	str	r3, [r7, #28]
 8004470:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004474:	4641      	mov	r1, r8
 8004476:	1851      	adds	r1, r2, r1
 8004478:	6139      	str	r1, [r7, #16]
 800447a:	4649      	mov	r1, r9
 800447c:	414b      	adcs	r3, r1
 800447e:	617b      	str	r3, [r7, #20]
 8004480:	f04f 0200 	mov.w	r2, #0
 8004484:	f04f 0300 	mov.w	r3, #0
 8004488:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800448c:	4659      	mov	r1, fp
 800448e:	00cb      	lsls	r3, r1, #3
 8004490:	4651      	mov	r1, sl
 8004492:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004496:	4651      	mov	r1, sl
 8004498:	00ca      	lsls	r2, r1, #3
 800449a:	4610      	mov	r0, r2
 800449c:	4619      	mov	r1, r3
 800449e:	4603      	mov	r3, r0
 80044a0:	4642      	mov	r2, r8
 80044a2:	189b      	adds	r3, r3, r2
 80044a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80044a8:	464b      	mov	r3, r9
 80044aa:	460a      	mov	r2, r1
 80044ac:	eb42 0303 	adc.w	r3, r2, r3
 80044b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80044b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	67bb      	str	r3, [r7, #120]	; 0x78
 80044be:	67fa      	str	r2, [r7, #124]	; 0x7c
 80044c0:	f04f 0200 	mov.w	r2, #0
 80044c4:	f04f 0300 	mov.w	r3, #0
 80044c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80044cc:	4649      	mov	r1, r9
 80044ce:	008b      	lsls	r3, r1, #2
 80044d0:	4641      	mov	r1, r8
 80044d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044d6:	4641      	mov	r1, r8
 80044d8:	008a      	lsls	r2, r1, #2
 80044da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80044de:	f7fb fed7 	bl	8000290 <__aeabi_uldivmod>
 80044e2:	4602      	mov	r2, r0
 80044e4:	460b      	mov	r3, r1
 80044e6:	4b39      	ldr	r3, [pc, #228]	; (80045cc <UART_SetConfig+0x4e4>)
 80044e8:	fba3 1302 	umull	r1, r3, r3, r2
 80044ec:	095b      	lsrs	r3, r3, #5
 80044ee:	2164      	movs	r1, #100	; 0x64
 80044f0:	fb01 f303 	mul.w	r3, r1, r3
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	011b      	lsls	r3, r3, #4
 80044f8:	3332      	adds	r3, #50	; 0x32
 80044fa:	4a34      	ldr	r2, [pc, #208]	; (80045cc <UART_SetConfig+0x4e4>)
 80044fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004500:	095b      	lsrs	r3, r3, #5
 8004502:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004506:	441c      	add	r4, r3
 8004508:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800450c:	2200      	movs	r2, #0
 800450e:	673b      	str	r3, [r7, #112]	; 0x70
 8004510:	677a      	str	r2, [r7, #116]	; 0x74
 8004512:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004516:	4642      	mov	r2, r8
 8004518:	464b      	mov	r3, r9
 800451a:	1891      	adds	r1, r2, r2
 800451c:	60b9      	str	r1, [r7, #8]
 800451e:	415b      	adcs	r3, r3
 8004520:	60fb      	str	r3, [r7, #12]
 8004522:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004526:	4641      	mov	r1, r8
 8004528:	1851      	adds	r1, r2, r1
 800452a:	6039      	str	r1, [r7, #0]
 800452c:	4649      	mov	r1, r9
 800452e:	414b      	adcs	r3, r1
 8004530:	607b      	str	r3, [r7, #4]
 8004532:	f04f 0200 	mov.w	r2, #0
 8004536:	f04f 0300 	mov.w	r3, #0
 800453a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800453e:	4659      	mov	r1, fp
 8004540:	00cb      	lsls	r3, r1, #3
 8004542:	4651      	mov	r1, sl
 8004544:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004548:	4651      	mov	r1, sl
 800454a:	00ca      	lsls	r2, r1, #3
 800454c:	4610      	mov	r0, r2
 800454e:	4619      	mov	r1, r3
 8004550:	4603      	mov	r3, r0
 8004552:	4642      	mov	r2, r8
 8004554:	189b      	adds	r3, r3, r2
 8004556:	66bb      	str	r3, [r7, #104]	; 0x68
 8004558:	464b      	mov	r3, r9
 800455a:	460a      	mov	r2, r1
 800455c:	eb42 0303 	adc.w	r3, r2, r3
 8004560:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	663b      	str	r3, [r7, #96]	; 0x60
 800456c:	667a      	str	r2, [r7, #100]	; 0x64
 800456e:	f04f 0200 	mov.w	r2, #0
 8004572:	f04f 0300 	mov.w	r3, #0
 8004576:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800457a:	4649      	mov	r1, r9
 800457c:	008b      	lsls	r3, r1, #2
 800457e:	4641      	mov	r1, r8
 8004580:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004584:	4641      	mov	r1, r8
 8004586:	008a      	lsls	r2, r1, #2
 8004588:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800458c:	f7fb fe80 	bl	8000290 <__aeabi_uldivmod>
 8004590:	4602      	mov	r2, r0
 8004592:	460b      	mov	r3, r1
 8004594:	4b0d      	ldr	r3, [pc, #52]	; (80045cc <UART_SetConfig+0x4e4>)
 8004596:	fba3 1302 	umull	r1, r3, r3, r2
 800459a:	095b      	lsrs	r3, r3, #5
 800459c:	2164      	movs	r1, #100	; 0x64
 800459e:	fb01 f303 	mul.w	r3, r1, r3
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	011b      	lsls	r3, r3, #4
 80045a6:	3332      	adds	r3, #50	; 0x32
 80045a8:	4a08      	ldr	r2, [pc, #32]	; (80045cc <UART_SetConfig+0x4e4>)
 80045aa:	fba2 2303 	umull	r2, r3, r2, r3
 80045ae:	095b      	lsrs	r3, r3, #5
 80045b0:	f003 020f 	and.w	r2, r3, #15
 80045b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4422      	add	r2, r4
 80045bc:	609a      	str	r2, [r3, #8]
}
 80045be:	bf00      	nop
 80045c0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80045c4:	46bd      	mov	sp, r7
 80045c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045ca:	bf00      	nop
 80045cc:	51eb851f 	.word	0x51eb851f

080045d0 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b087      	sub	sp, #28
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045e4:	683a      	ldr	r2, [r7, #0]
 80045e6:	6812      	ldr	r2, [r2, #0]
 80045e8:	f023 0101 	bic.w	r1, r3, #1
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	2b08      	cmp	r3, #8
 80045f8:	d102      	bne.n	8004600 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80045fa:	2340      	movs	r3, #64	; 0x40
 80045fc:	617b      	str	r3, [r7, #20]
 80045fe:	e001      	b.n	8004604 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8004600:	2300      	movs	r3, #0
 8004602:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8004610:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8004616:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800461c:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8004622:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8004628:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 800462e:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8004634:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 800463a:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8004640:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8004646:	4313      	orrs	r3, r2
 8004648:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	699b      	ldr	r3, [r3, #24]
 800464e:	693a      	ldr	r2, [r7, #16]
 8004650:	4313      	orrs	r3, r2
 8004652:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004658:	693a      	ldr	r2, [r7, #16]
 800465a:	4313      	orrs	r3, r2
 800465c:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 800465e:	4b10      	ldr	r3, [pc, #64]	; (80046a0 <FSMC_NORSRAM_Init+0xd0>)
 8004660:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004668:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8004670:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	43db      	mvns	r3, r3
 8004680:	ea02 0103 	and.w	r1, r2, r3
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	4319      	orrs	r1, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 8004692:	2300      	movs	r3, #0
}
 8004694:	4618      	mov	r0, r3
 8004696:	371c      	adds	r7, #28
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr
 80046a0:	0008fb7f 	.word	0x0008fb7f

080046a4 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b085      	sub	sp, #20
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	1c5a      	adds	r2, r3, #1
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046ba:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	011b      	lsls	r3, r3, #4
 80046c8:	431a      	orrs	r2, r3
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	021b      	lsls	r3, r3, #8
 80046d0:	431a      	orrs	r2, r3
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	041b      	lsls	r3, r3, #16
 80046d8:	431a      	orrs	r2, r3
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	3b01      	subs	r3, #1
 80046e0:	051b      	lsls	r3, r3, #20
 80046e2:	431a      	orrs	r2, r3
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	695b      	ldr	r3, [r3, #20]
 80046e8:	3b02      	subs	r3, #2
 80046ea:	061b      	lsls	r3, r3, #24
 80046ec:	431a      	orrs	r2, r3
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	699b      	ldr	r3, [r3, #24]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	3201      	adds	r2, #1
 80046f8:	4319      	orrs	r1, r3
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 8004700:	2300      	movs	r3, #0
}
 8004702:	4618      	mov	r0, r3
 8004704:	3714      	adds	r7, #20
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr
	...

08004710 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8004710:	b480      	push	{r7}
 8004712:	b085      	sub	sp, #20
 8004714:	af00      	add	r7, sp, #0
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	607a      	str	r2, [r7, #4]
 800471c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004724:	d11d      	bne.n	8004762 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800472e:	4b13      	ldr	r3, [pc, #76]	; (800477c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8004730:	4013      	ands	r3, r2
 8004732:	68ba      	ldr	r2, [r7, #8]
 8004734:	6811      	ldr	r1, [r2, #0]
 8004736:	68ba      	ldr	r2, [r7, #8]
 8004738:	6852      	ldr	r2, [r2, #4]
 800473a:	0112      	lsls	r2, r2, #4
 800473c:	4311      	orrs	r1, r2
 800473e:	68ba      	ldr	r2, [r7, #8]
 8004740:	6892      	ldr	r2, [r2, #8]
 8004742:	0212      	lsls	r2, r2, #8
 8004744:	4311      	orrs	r1, r2
 8004746:	68ba      	ldr	r2, [r7, #8]
 8004748:	6992      	ldr	r2, [r2, #24]
 800474a:	4311      	orrs	r1, r2
 800474c:	68ba      	ldr	r2, [r7, #8]
 800474e:	68d2      	ldr	r2, [r2, #12]
 8004750:	0412      	lsls	r2, r2, #16
 8004752:	430a      	orrs	r2, r1
 8004754:	ea43 0102 	orr.w	r1, r3, r2
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004760:	e005      	b.n	800476e <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800476a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800476e:	2300      	movs	r3, #0
}
 8004770:	4618      	mov	r0, r3
 8004772:	3714      	adds	r7, #20
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr
 800477c:	cff00000 	.word	0xcff00000

08004780 <atoi>:
 8004780:	220a      	movs	r2, #10
 8004782:	2100      	movs	r1, #0
 8004784:	f000 b8cc 	b.w	8004920 <strtol>

08004788 <__errno>:
 8004788:	4b01      	ldr	r3, [pc, #4]	; (8004790 <__errno+0x8>)
 800478a:	6818      	ldr	r0, [r3, #0]
 800478c:	4770      	bx	lr
 800478e:	bf00      	nop
 8004790:	20000014 	.word	0x20000014

08004794 <__libc_init_array>:
 8004794:	b570      	push	{r4, r5, r6, lr}
 8004796:	4d0d      	ldr	r5, [pc, #52]	; (80047cc <__libc_init_array+0x38>)
 8004798:	4c0d      	ldr	r4, [pc, #52]	; (80047d0 <__libc_init_array+0x3c>)
 800479a:	1b64      	subs	r4, r4, r5
 800479c:	10a4      	asrs	r4, r4, #2
 800479e:	2600      	movs	r6, #0
 80047a0:	42a6      	cmp	r6, r4
 80047a2:	d109      	bne.n	80047b8 <__libc_init_array+0x24>
 80047a4:	4d0b      	ldr	r5, [pc, #44]	; (80047d4 <__libc_init_array+0x40>)
 80047a6:	4c0c      	ldr	r4, [pc, #48]	; (80047d8 <__libc_init_array+0x44>)
 80047a8:	f001 f83a 	bl	8005820 <_init>
 80047ac:	1b64      	subs	r4, r4, r5
 80047ae:	10a4      	asrs	r4, r4, #2
 80047b0:	2600      	movs	r6, #0
 80047b2:	42a6      	cmp	r6, r4
 80047b4:	d105      	bne.n	80047c2 <__libc_init_array+0x2e>
 80047b6:	bd70      	pop	{r4, r5, r6, pc}
 80047b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80047bc:	4798      	blx	r3
 80047be:	3601      	adds	r6, #1
 80047c0:	e7ee      	b.n	80047a0 <__libc_init_array+0xc>
 80047c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80047c6:	4798      	blx	r3
 80047c8:	3601      	adds	r6, #1
 80047ca:	e7f2      	b.n	80047b2 <__libc_init_array+0x1e>
 80047cc:	08005c40 	.word	0x08005c40
 80047d0:	08005c40 	.word	0x08005c40
 80047d4:	08005c40 	.word	0x08005c40
 80047d8:	08005c44 	.word	0x08005c44

080047dc <memset>:
 80047dc:	4402      	add	r2, r0
 80047de:	4603      	mov	r3, r0
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d100      	bne.n	80047e6 <memset+0xa>
 80047e4:	4770      	bx	lr
 80047e6:	f803 1b01 	strb.w	r1, [r3], #1
 80047ea:	e7f9      	b.n	80047e0 <memset+0x4>

080047ec <iprintf>:
 80047ec:	b40f      	push	{r0, r1, r2, r3}
 80047ee:	4b0a      	ldr	r3, [pc, #40]	; (8004818 <iprintf+0x2c>)
 80047f0:	b513      	push	{r0, r1, r4, lr}
 80047f2:	681c      	ldr	r4, [r3, #0]
 80047f4:	b124      	cbz	r4, 8004800 <iprintf+0x14>
 80047f6:	69a3      	ldr	r3, [r4, #24]
 80047f8:	b913      	cbnz	r3, 8004800 <iprintf+0x14>
 80047fa:	4620      	mov	r0, r4
 80047fc:	f000 fa74 	bl	8004ce8 <__sinit>
 8004800:	ab05      	add	r3, sp, #20
 8004802:	9a04      	ldr	r2, [sp, #16]
 8004804:	68a1      	ldr	r1, [r4, #8]
 8004806:	9301      	str	r3, [sp, #4]
 8004808:	4620      	mov	r0, r4
 800480a:	f000 fc7d 	bl	8005108 <_vfiprintf_r>
 800480e:	b002      	add	sp, #8
 8004810:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004814:	b004      	add	sp, #16
 8004816:	4770      	bx	lr
 8004818:	20000014 	.word	0x20000014

0800481c <_strtol_l.constprop.0>:
 800481c:	2b01      	cmp	r3, #1
 800481e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004822:	d001      	beq.n	8004828 <_strtol_l.constprop.0+0xc>
 8004824:	2b24      	cmp	r3, #36	; 0x24
 8004826:	d906      	bls.n	8004836 <_strtol_l.constprop.0+0x1a>
 8004828:	f7ff ffae 	bl	8004788 <__errno>
 800482c:	2316      	movs	r3, #22
 800482e:	6003      	str	r3, [r0, #0]
 8004830:	2000      	movs	r0, #0
 8004832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004836:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800491c <_strtol_l.constprop.0+0x100>
 800483a:	460d      	mov	r5, r1
 800483c:	462e      	mov	r6, r5
 800483e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004842:	f814 700c 	ldrb.w	r7, [r4, ip]
 8004846:	f017 0708 	ands.w	r7, r7, #8
 800484a:	d1f7      	bne.n	800483c <_strtol_l.constprop.0+0x20>
 800484c:	2c2d      	cmp	r4, #45	; 0x2d
 800484e:	d132      	bne.n	80048b6 <_strtol_l.constprop.0+0x9a>
 8004850:	782c      	ldrb	r4, [r5, #0]
 8004852:	2701      	movs	r7, #1
 8004854:	1cb5      	adds	r5, r6, #2
 8004856:	2b00      	cmp	r3, #0
 8004858:	d05b      	beq.n	8004912 <_strtol_l.constprop.0+0xf6>
 800485a:	2b10      	cmp	r3, #16
 800485c:	d109      	bne.n	8004872 <_strtol_l.constprop.0+0x56>
 800485e:	2c30      	cmp	r4, #48	; 0x30
 8004860:	d107      	bne.n	8004872 <_strtol_l.constprop.0+0x56>
 8004862:	782c      	ldrb	r4, [r5, #0]
 8004864:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8004868:	2c58      	cmp	r4, #88	; 0x58
 800486a:	d14d      	bne.n	8004908 <_strtol_l.constprop.0+0xec>
 800486c:	786c      	ldrb	r4, [r5, #1]
 800486e:	2310      	movs	r3, #16
 8004870:	3502      	adds	r5, #2
 8004872:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8004876:	f108 38ff 	add.w	r8, r8, #4294967295
 800487a:	f04f 0c00 	mov.w	ip, #0
 800487e:	fbb8 f9f3 	udiv	r9, r8, r3
 8004882:	4666      	mov	r6, ip
 8004884:	fb03 8a19 	mls	sl, r3, r9, r8
 8004888:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800488c:	f1be 0f09 	cmp.w	lr, #9
 8004890:	d816      	bhi.n	80048c0 <_strtol_l.constprop.0+0xa4>
 8004892:	4674      	mov	r4, lr
 8004894:	42a3      	cmp	r3, r4
 8004896:	dd24      	ble.n	80048e2 <_strtol_l.constprop.0+0xc6>
 8004898:	f1bc 0f00 	cmp.w	ip, #0
 800489c:	db1e      	blt.n	80048dc <_strtol_l.constprop.0+0xc0>
 800489e:	45b1      	cmp	r9, r6
 80048a0:	d31c      	bcc.n	80048dc <_strtol_l.constprop.0+0xc0>
 80048a2:	d101      	bne.n	80048a8 <_strtol_l.constprop.0+0x8c>
 80048a4:	45a2      	cmp	sl, r4
 80048a6:	db19      	blt.n	80048dc <_strtol_l.constprop.0+0xc0>
 80048a8:	fb06 4603 	mla	r6, r6, r3, r4
 80048ac:	f04f 0c01 	mov.w	ip, #1
 80048b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80048b4:	e7e8      	b.n	8004888 <_strtol_l.constprop.0+0x6c>
 80048b6:	2c2b      	cmp	r4, #43	; 0x2b
 80048b8:	bf04      	itt	eq
 80048ba:	782c      	ldrbeq	r4, [r5, #0]
 80048bc:	1cb5      	addeq	r5, r6, #2
 80048be:	e7ca      	b.n	8004856 <_strtol_l.constprop.0+0x3a>
 80048c0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80048c4:	f1be 0f19 	cmp.w	lr, #25
 80048c8:	d801      	bhi.n	80048ce <_strtol_l.constprop.0+0xb2>
 80048ca:	3c37      	subs	r4, #55	; 0x37
 80048cc:	e7e2      	b.n	8004894 <_strtol_l.constprop.0+0x78>
 80048ce:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80048d2:	f1be 0f19 	cmp.w	lr, #25
 80048d6:	d804      	bhi.n	80048e2 <_strtol_l.constprop.0+0xc6>
 80048d8:	3c57      	subs	r4, #87	; 0x57
 80048da:	e7db      	b.n	8004894 <_strtol_l.constprop.0+0x78>
 80048dc:	f04f 3cff 	mov.w	ip, #4294967295
 80048e0:	e7e6      	b.n	80048b0 <_strtol_l.constprop.0+0x94>
 80048e2:	f1bc 0f00 	cmp.w	ip, #0
 80048e6:	da05      	bge.n	80048f4 <_strtol_l.constprop.0+0xd8>
 80048e8:	2322      	movs	r3, #34	; 0x22
 80048ea:	6003      	str	r3, [r0, #0]
 80048ec:	4646      	mov	r6, r8
 80048ee:	b942      	cbnz	r2, 8004902 <_strtol_l.constprop.0+0xe6>
 80048f0:	4630      	mov	r0, r6
 80048f2:	e79e      	b.n	8004832 <_strtol_l.constprop.0+0x16>
 80048f4:	b107      	cbz	r7, 80048f8 <_strtol_l.constprop.0+0xdc>
 80048f6:	4276      	negs	r6, r6
 80048f8:	2a00      	cmp	r2, #0
 80048fa:	d0f9      	beq.n	80048f0 <_strtol_l.constprop.0+0xd4>
 80048fc:	f1bc 0f00 	cmp.w	ip, #0
 8004900:	d000      	beq.n	8004904 <_strtol_l.constprop.0+0xe8>
 8004902:	1e69      	subs	r1, r5, #1
 8004904:	6011      	str	r1, [r2, #0]
 8004906:	e7f3      	b.n	80048f0 <_strtol_l.constprop.0+0xd4>
 8004908:	2430      	movs	r4, #48	; 0x30
 800490a:	2b00      	cmp	r3, #0
 800490c:	d1b1      	bne.n	8004872 <_strtol_l.constprop.0+0x56>
 800490e:	2308      	movs	r3, #8
 8004910:	e7af      	b.n	8004872 <_strtol_l.constprop.0+0x56>
 8004912:	2c30      	cmp	r4, #48	; 0x30
 8004914:	d0a5      	beq.n	8004862 <_strtol_l.constprop.0+0x46>
 8004916:	230a      	movs	r3, #10
 8004918:	e7ab      	b.n	8004872 <_strtol_l.constprop.0+0x56>
 800491a:	bf00      	nop
 800491c:	08005aa1 	.word	0x08005aa1

08004920 <strtol>:
 8004920:	4613      	mov	r3, r2
 8004922:	460a      	mov	r2, r1
 8004924:	4601      	mov	r1, r0
 8004926:	4802      	ldr	r0, [pc, #8]	; (8004930 <strtol+0x10>)
 8004928:	6800      	ldr	r0, [r0, #0]
 800492a:	f7ff bf77 	b.w	800481c <_strtol_l.constprop.0>
 800492e:	bf00      	nop
 8004930:	20000014 	.word	0x20000014

08004934 <__swbuf_r>:
 8004934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004936:	460e      	mov	r6, r1
 8004938:	4614      	mov	r4, r2
 800493a:	4605      	mov	r5, r0
 800493c:	b118      	cbz	r0, 8004946 <__swbuf_r+0x12>
 800493e:	6983      	ldr	r3, [r0, #24]
 8004940:	b90b      	cbnz	r3, 8004946 <__swbuf_r+0x12>
 8004942:	f000 f9d1 	bl	8004ce8 <__sinit>
 8004946:	4b21      	ldr	r3, [pc, #132]	; (80049cc <__swbuf_r+0x98>)
 8004948:	429c      	cmp	r4, r3
 800494a:	d12b      	bne.n	80049a4 <__swbuf_r+0x70>
 800494c:	686c      	ldr	r4, [r5, #4]
 800494e:	69a3      	ldr	r3, [r4, #24]
 8004950:	60a3      	str	r3, [r4, #8]
 8004952:	89a3      	ldrh	r3, [r4, #12]
 8004954:	071a      	lsls	r2, r3, #28
 8004956:	d52f      	bpl.n	80049b8 <__swbuf_r+0x84>
 8004958:	6923      	ldr	r3, [r4, #16]
 800495a:	b36b      	cbz	r3, 80049b8 <__swbuf_r+0x84>
 800495c:	6923      	ldr	r3, [r4, #16]
 800495e:	6820      	ldr	r0, [r4, #0]
 8004960:	1ac0      	subs	r0, r0, r3
 8004962:	6963      	ldr	r3, [r4, #20]
 8004964:	b2f6      	uxtb	r6, r6
 8004966:	4283      	cmp	r3, r0
 8004968:	4637      	mov	r7, r6
 800496a:	dc04      	bgt.n	8004976 <__swbuf_r+0x42>
 800496c:	4621      	mov	r1, r4
 800496e:	4628      	mov	r0, r5
 8004970:	f000 f926 	bl	8004bc0 <_fflush_r>
 8004974:	bb30      	cbnz	r0, 80049c4 <__swbuf_r+0x90>
 8004976:	68a3      	ldr	r3, [r4, #8]
 8004978:	3b01      	subs	r3, #1
 800497a:	60a3      	str	r3, [r4, #8]
 800497c:	6823      	ldr	r3, [r4, #0]
 800497e:	1c5a      	adds	r2, r3, #1
 8004980:	6022      	str	r2, [r4, #0]
 8004982:	701e      	strb	r6, [r3, #0]
 8004984:	6963      	ldr	r3, [r4, #20]
 8004986:	3001      	adds	r0, #1
 8004988:	4283      	cmp	r3, r0
 800498a:	d004      	beq.n	8004996 <__swbuf_r+0x62>
 800498c:	89a3      	ldrh	r3, [r4, #12]
 800498e:	07db      	lsls	r3, r3, #31
 8004990:	d506      	bpl.n	80049a0 <__swbuf_r+0x6c>
 8004992:	2e0a      	cmp	r6, #10
 8004994:	d104      	bne.n	80049a0 <__swbuf_r+0x6c>
 8004996:	4621      	mov	r1, r4
 8004998:	4628      	mov	r0, r5
 800499a:	f000 f911 	bl	8004bc0 <_fflush_r>
 800499e:	b988      	cbnz	r0, 80049c4 <__swbuf_r+0x90>
 80049a0:	4638      	mov	r0, r7
 80049a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049a4:	4b0a      	ldr	r3, [pc, #40]	; (80049d0 <__swbuf_r+0x9c>)
 80049a6:	429c      	cmp	r4, r3
 80049a8:	d101      	bne.n	80049ae <__swbuf_r+0x7a>
 80049aa:	68ac      	ldr	r4, [r5, #8]
 80049ac:	e7cf      	b.n	800494e <__swbuf_r+0x1a>
 80049ae:	4b09      	ldr	r3, [pc, #36]	; (80049d4 <__swbuf_r+0xa0>)
 80049b0:	429c      	cmp	r4, r3
 80049b2:	bf08      	it	eq
 80049b4:	68ec      	ldreq	r4, [r5, #12]
 80049b6:	e7ca      	b.n	800494e <__swbuf_r+0x1a>
 80049b8:	4621      	mov	r1, r4
 80049ba:	4628      	mov	r0, r5
 80049bc:	f000 f80c 	bl	80049d8 <__swsetup_r>
 80049c0:	2800      	cmp	r0, #0
 80049c2:	d0cb      	beq.n	800495c <__swbuf_r+0x28>
 80049c4:	f04f 37ff 	mov.w	r7, #4294967295
 80049c8:	e7ea      	b.n	80049a0 <__swbuf_r+0x6c>
 80049ca:	bf00      	nop
 80049cc:	08005bc4 	.word	0x08005bc4
 80049d0:	08005be4 	.word	0x08005be4
 80049d4:	08005ba4 	.word	0x08005ba4

080049d8 <__swsetup_r>:
 80049d8:	4b32      	ldr	r3, [pc, #200]	; (8004aa4 <__swsetup_r+0xcc>)
 80049da:	b570      	push	{r4, r5, r6, lr}
 80049dc:	681d      	ldr	r5, [r3, #0]
 80049de:	4606      	mov	r6, r0
 80049e0:	460c      	mov	r4, r1
 80049e2:	b125      	cbz	r5, 80049ee <__swsetup_r+0x16>
 80049e4:	69ab      	ldr	r3, [r5, #24]
 80049e6:	b913      	cbnz	r3, 80049ee <__swsetup_r+0x16>
 80049e8:	4628      	mov	r0, r5
 80049ea:	f000 f97d 	bl	8004ce8 <__sinit>
 80049ee:	4b2e      	ldr	r3, [pc, #184]	; (8004aa8 <__swsetup_r+0xd0>)
 80049f0:	429c      	cmp	r4, r3
 80049f2:	d10f      	bne.n	8004a14 <__swsetup_r+0x3c>
 80049f4:	686c      	ldr	r4, [r5, #4]
 80049f6:	89a3      	ldrh	r3, [r4, #12]
 80049f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80049fc:	0719      	lsls	r1, r3, #28
 80049fe:	d42c      	bmi.n	8004a5a <__swsetup_r+0x82>
 8004a00:	06dd      	lsls	r5, r3, #27
 8004a02:	d411      	bmi.n	8004a28 <__swsetup_r+0x50>
 8004a04:	2309      	movs	r3, #9
 8004a06:	6033      	str	r3, [r6, #0]
 8004a08:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004a0c:	81a3      	strh	r3, [r4, #12]
 8004a0e:	f04f 30ff 	mov.w	r0, #4294967295
 8004a12:	e03e      	b.n	8004a92 <__swsetup_r+0xba>
 8004a14:	4b25      	ldr	r3, [pc, #148]	; (8004aac <__swsetup_r+0xd4>)
 8004a16:	429c      	cmp	r4, r3
 8004a18:	d101      	bne.n	8004a1e <__swsetup_r+0x46>
 8004a1a:	68ac      	ldr	r4, [r5, #8]
 8004a1c:	e7eb      	b.n	80049f6 <__swsetup_r+0x1e>
 8004a1e:	4b24      	ldr	r3, [pc, #144]	; (8004ab0 <__swsetup_r+0xd8>)
 8004a20:	429c      	cmp	r4, r3
 8004a22:	bf08      	it	eq
 8004a24:	68ec      	ldreq	r4, [r5, #12]
 8004a26:	e7e6      	b.n	80049f6 <__swsetup_r+0x1e>
 8004a28:	0758      	lsls	r0, r3, #29
 8004a2a:	d512      	bpl.n	8004a52 <__swsetup_r+0x7a>
 8004a2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a2e:	b141      	cbz	r1, 8004a42 <__swsetup_r+0x6a>
 8004a30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a34:	4299      	cmp	r1, r3
 8004a36:	d002      	beq.n	8004a3e <__swsetup_r+0x66>
 8004a38:	4630      	mov	r0, r6
 8004a3a:	f000 fa5b 	bl	8004ef4 <_free_r>
 8004a3e:	2300      	movs	r3, #0
 8004a40:	6363      	str	r3, [r4, #52]	; 0x34
 8004a42:	89a3      	ldrh	r3, [r4, #12]
 8004a44:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004a48:	81a3      	strh	r3, [r4, #12]
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	6063      	str	r3, [r4, #4]
 8004a4e:	6923      	ldr	r3, [r4, #16]
 8004a50:	6023      	str	r3, [r4, #0]
 8004a52:	89a3      	ldrh	r3, [r4, #12]
 8004a54:	f043 0308 	orr.w	r3, r3, #8
 8004a58:	81a3      	strh	r3, [r4, #12]
 8004a5a:	6923      	ldr	r3, [r4, #16]
 8004a5c:	b94b      	cbnz	r3, 8004a72 <__swsetup_r+0x9a>
 8004a5e:	89a3      	ldrh	r3, [r4, #12]
 8004a60:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004a64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a68:	d003      	beq.n	8004a72 <__swsetup_r+0x9a>
 8004a6a:	4621      	mov	r1, r4
 8004a6c:	4630      	mov	r0, r6
 8004a6e:	f000 fa01 	bl	8004e74 <__smakebuf_r>
 8004a72:	89a0      	ldrh	r0, [r4, #12]
 8004a74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004a78:	f010 0301 	ands.w	r3, r0, #1
 8004a7c:	d00a      	beq.n	8004a94 <__swsetup_r+0xbc>
 8004a7e:	2300      	movs	r3, #0
 8004a80:	60a3      	str	r3, [r4, #8]
 8004a82:	6963      	ldr	r3, [r4, #20]
 8004a84:	425b      	negs	r3, r3
 8004a86:	61a3      	str	r3, [r4, #24]
 8004a88:	6923      	ldr	r3, [r4, #16]
 8004a8a:	b943      	cbnz	r3, 8004a9e <__swsetup_r+0xc6>
 8004a8c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004a90:	d1ba      	bne.n	8004a08 <__swsetup_r+0x30>
 8004a92:	bd70      	pop	{r4, r5, r6, pc}
 8004a94:	0781      	lsls	r1, r0, #30
 8004a96:	bf58      	it	pl
 8004a98:	6963      	ldrpl	r3, [r4, #20]
 8004a9a:	60a3      	str	r3, [r4, #8]
 8004a9c:	e7f4      	b.n	8004a88 <__swsetup_r+0xb0>
 8004a9e:	2000      	movs	r0, #0
 8004aa0:	e7f7      	b.n	8004a92 <__swsetup_r+0xba>
 8004aa2:	bf00      	nop
 8004aa4:	20000014 	.word	0x20000014
 8004aa8:	08005bc4 	.word	0x08005bc4
 8004aac:	08005be4 	.word	0x08005be4
 8004ab0:	08005ba4 	.word	0x08005ba4

08004ab4 <__sflush_r>:
 8004ab4:	898a      	ldrh	r2, [r1, #12]
 8004ab6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004aba:	4605      	mov	r5, r0
 8004abc:	0710      	lsls	r0, r2, #28
 8004abe:	460c      	mov	r4, r1
 8004ac0:	d458      	bmi.n	8004b74 <__sflush_r+0xc0>
 8004ac2:	684b      	ldr	r3, [r1, #4]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	dc05      	bgt.n	8004ad4 <__sflush_r+0x20>
 8004ac8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	dc02      	bgt.n	8004ad4 <__sflush_r+0x20>
 8004ace:	2000      	movs	r0, #0
 8004ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ad4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004ad6:	2e00      	cmp	r6, #0
 8004ad8:	d0f9      	beq.n	8004ace <__sflush_r+0x1a>
 8004ada:	2300      	movs	r3, #0
 8004adc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004ae0:	682f      	ldr	r7, [r5, #0]
 8004ae2:	602b      	str	r3, [r5, #0]
 8004ae4:	d032      	beq.n	8004b4c <__sflush_r+0x98>
 8004ae6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004ae8:	89a3      	ldrh	r3, [r4, #12]
 8004aea:	075a      	lsls	r2, r3, #29
 8004aec:	d505      	bpl.n	8004afa <__sflush_r+0x46>
 8004aee:	6863      	ldr	r3, [r4, #4]
 8004af0:	1ac0      	subs	r0, r0, r3
 8004af2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004af4:	b10b      	cbz	r3, 8004afa <__sflush_r+0x46>
 8004af6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004af8:	1ac0      	subs	r0, r0, r3
 8004afa:	2300      	movs	r3, #0
 8004afc:	4602      	mov	r2, r0
 8004afe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004b00:	6a21      	ldr	r1, [r4, #32]
 8004b02:	4628      	mov	r0, r5
 8004b04:	47b0      	blx	r6
 8004b06:	1c43      	adds	r3, r0, #1
 8004b08:	89a3      	ldrh	r3, [r4, #12]
 8004b0a:	d106      	bne.n	8004b1a <__sflush_r+0x66>
 8004b0c:	6829      	ldr	r1, [r5, #0]
 8004b0e:	291d      	cmp	r1, #29
 8004b10:	d82c      	bhi.n	8004b6c <__sflush_r+0xb8>
 8004b12:	4a2a      	ldr	r2, [pc, #168]	; (8004bbc <__sflush_r+0x108>)
 8004b14:	40ca      	lsrs	r2, r1
 8004b16:	07d6      	lsls	r6, r2, #31
 8004b18:	d528      	bpl.n	8004b6c <__sflush_r+0xb8>
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	6062      	str	r2, [r4, #4]
 8004b1e:	04d9      	lsls	r1, r3, #19
 8004b20:	6922      	ldr	r2, [r4, #16]
 8004b22:	6022      	str	r2, [r4, #0]
 8004b24:	d504      	bpl.n	8004b30 <__sflush_r+0x7c>
 8004b26:	1c42      	adds	r2, r0, #1
 8004b28:	d101      	bne.n	8004b2e <__sflush_r+0x7a>
 8004b2a:	682b      	ldr	r3, [r5, #0]
 8004b2c:	b903      	cbnz	r3, 8004b30 <__sflush_r+0x7c>
 8004b2e:	6560      	str	r0, [r4, #84]	; 0x54
 8004b30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b32:	602f      	str	r7, [r5, #0]
 8004b34:	2900      	cmp	r1, #0
 8004b36:	d0ca      	beq.n	8004ace <__sflush_r+0x1a>
 8004b38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004b3c:	4299      	cmp	r1, r3
 8004b3e:	d002      	beq.n	8004b46 <__sflush_r+0x92>
 8004b40:	4628      	mov	r0, r5
 8004b42:	f000 f9d7 	bl	8004ef4 <_free_r>
 8004b46:	2000      	movs	r0, #0
 8004b48:	6360      	str	r0, [r4, #52]	; 0x34
 8004b4a:	e7c1      	b.n	8004ad0 <__sflush_r+0x1c>
 8004b4c:	6a21      	ldr	r1, [r4, #32]
 8004b4e:	2301      	movs	r3, #1
 8004b50:	4628      	mov	r0, r5
 8004b52:	47b0      	blx	r6
 8004b54:	1c41      	adds	r1, r0, #1
 8004b56:	d1c7      	bne.n	8004ae8 <__sflush_r+0x34>
 8004b58:	682b      	ldr	r3, [r5, #0]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d0c4      	beq.n	8004ae8 <__sflush_r+0x34>
 8004b5e:	2b1d      	cmp	r3, #29
 8004b60:	d001      	beq.n	8004b66 <__sflush_r+0xb2>
 8004b62:	2b16      	cmp	r3, #22
 8004b64:	d101      	bne.n	8004b6a <__sflush_r+0xb6>
 8004b66:	602f      	str	r7, [r5, #0]
 8004b68:	e7b1      	b.n	8004ace <__sflush_r+0x1a>
 8004b6a:	89a3      	ldrh	r3, [r4, #12]
 8004b6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b70:	81a3      	strh	r3, [r4, #12]
 8004b72:	e7ad      	b.n	8004ad0 <__sflush_r+0x1c>
 8004b74:	690f      	ldr	r7, [r1, #16]
 8004b76:	2f00      	cmp	r7, #0
 8004b78:	d0a9      	beq.n	8004ace <__sflush_r+0x1a>
 8004b7a:	0793      	lsls	r3, r2, #30
 8004b7c:	680e      	ldr	r6, [r1, #0]
 8004b7e:	bf08      	it	eq
 8004b80:	694b      	ldreq	r3, [r1, #20]
 8004b82:	600f      	str	r7, [r1, #0]
 8004b84:	bf18      	it	ne
 8004b86:	2300      	movne	r3, #0
 8004b88:	eba6 0807 	sub.w	r8, r6, r7
 8004b8c:	608b      	str	r3, [r1, #8]
 8004b8e:	f1b8 0f00 	cmp.w	r8, #0
 8004b92:	dd9c      	ble.n	8004ace <__sflush_r+0x1a>
 8004b94:	6a21      	ldr	r1, [r4, #32]
 8004b96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004b98:	4643      	mov	r3, r8
 8004b9a:	463a      	mov	r2, r7
 8004b9c:	4628      	mov	r0, r5
 8004b9e:	47b0      	blx	r6
 8004ba0:	2800      	cmp	r0, #0
 8004ba2:	dc06      	bgt.n	8004bb2 <__sflush_r+0xfe>
 8004ba4:	89a3      	ldrh	r3, [r4, #12]
 8004ba6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004baa:	81a3      	strh	r3, [r4, #12]
 8004bac:	f04f 30ff 	mov.w	r0, #4294967295
 8004bb0:	e78e      	b.n	8004ad0 <__sflush_r+0x1c>
 8004bb2:	4407      	add	r7, r0
 8004bb4:	eba8 0800 	sub.w	r8, r8, r0
 8004bb8:	e7e9      	b.n	8004b8e <__sflush_r+0xda>
 8004bba:	bf00      	nop
 8004bbc:	20400001 	.word	0x20400001

08004bc0 <_fflush_r>:
 8004bc0:	b538      	push	{r3, r4, r5, lr}
 8004bc2:	690b      	ldr	r3, [r1, #16]
 8004bc4:	4605      	mov	r5, r0
 8004bc6:	460c      	mov	r4, r1
 8004bc8:	b913      	cbnz	r3, 8004bd0 <_fflush_r+0x10>
 8004bca:	2500      	movs	r5, #0
 8004bcc:	4628      	mov	r0, r5
 8004bce:	bd38      	pop	{r3, r4, r5, pc}
 8004bd0:	b118      	cbz	r0, 8004bda <_fflush_r+0x1a>
 8004bd2:	6983      	ldr	r3, [r0, #24]
 8004bd4:	b90b      	cbnz	r3, 8004bda <_fflush_r+0x1a>
 8004bd6:	f000 f887 	bl	8004ce8 <__sinit>
 8004bda:	4b14      	ldr	r3, [pc, #80]	; (8004c2c <_fflush_r+0x6c>)
 8004bdc:	429c      	cmp	r4, r3
 8004bde:	d11b      	bne.n	8004c18 <_fflush_r+0x58>
 8004be0:	686c      	ldr	r4, [r5, #4]
 8004be2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d0ef      	beq.n	8004bca <_fflush_r+0xa>
 8004bea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004bec:	07d0      	lsls	r0, r2, #31
 8004bee:	d404      	bmi.n	8004bfa <_fflush_r+0x3a>
 8004bf0:	0599      	lsls	r1, r3, #22
 8004bf2:	d402      	bmi.n	8004bfa <_fflush_r+0x3a>
 8004bf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004bf6:	f000 f915 	bl	8004e24 <__retarget_lock_acquire_recursive>
 8004bfa:	4628      	mov	r0, r5
 8004bfc:	4621      	mov	r1, r4
 8004bfe:	f7ff ff59 	bl	8004ab4 <__sflush_r>
 8004c02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c04:	07da      	lsls	r2, r3, #31
 8004c06:	4605      	mov	r5, r0
 8004c08:	d4e0      	bmi.n	8004bcc <_fflush_r+0xc>
 8004c0a:	89a3      	ldrh	r3, [r4, #12]
 8004c0c:	059b      	lsls	r3, r3, #22
 8004c0e:	d4dd      	bmi.n	8004bcc <_fflush_r+0xc>
 8004c10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c12:	f000 f908 	bl	8004e26 <__retarget_lock_release_recursive>
 8004c16:	e7d9      	b.n	8004bcc <_fflush_r+0xc>
 8004c18:	4b05      	ldr	r3, [pc, #20]	; (8004c30 <_fflush_r+0x70>)
 8004c1a:	429c      	cmp	r4, r3
 8004c1c:	d101      	bne.n	8004c22 <_fflush_r+0x62>
 8004c1e:	68ac      	ldr	r4, [r5, #8]
 8004c20:	e7df      	b.n	8004be2 <_fflush_r+0x22>
 8004c22:	4b04      	ldr	r3, [pc, #16]	; (8004c34 <_fflush_r+0x74>)
 8004c24:	429c      	cmp	r4, r3
 8004c26:	bf08      	it	eq
 8004c28:	68ec      	ldreq	r4, [r5, #12]
 8004c2a:	e7da      	b.n	8004be2 <_fflush_r+0x22>
 8004c2c:	08005bc4 	.word	0x08005bc4
 8004c30:	08005be4 	.word	0x08005be4
 8004c34:	08005ba4 	.word	0x08005ba4

08004c38 <std>:
 8004c38:	2300      	movs	r3, #0
 8004c3a:	b510      	push	{r4, lr}
 8004c3c:	4604      	mov	r4, r0
 8004c3e:	e9c0 3300 	strd	r3, r3, [r0]
 8004c42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004c46:	6083      	str	r3, [r0, #8]
 8004c48:	8181      	strh	r1, [r0, #12]
 8004c4a:	6643      	str	r3, [r0, #100]	; 0x64
 8004c4c:	81c2      	strh	r2, [r0, #14]
 8004c4e:	6183      	str	r3, [r0, #24]
 8004c50:	4619      	mov	r1, r3
 8004c52:	2208      	movs	r2, #8
 8004c54:	305c      	adds	r0, #92	; 0x5c
 8004c56:	f7ff fdc1 	bl	80047dc <memset>
 8004c5a:	4b05      	ldr	r3, [pc, #20]	; (8004c70 <std+0x38>)
 8004c5c:	6263      	str	r3, [r4, #36]	; 0x24
 8004c5e:	4b05      	ldr	r3, [pc, #20]	; (8004c74 <std+0x3c>)
 8004c60:	62a3      	str	r3, [r4, #40]	; 0x28
 8004c62:	4b05      	ldr	r3, [pc, #20]	; (8004c78 <std+0x40>)
 8004c64:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004c66:	4b05      	ldr	r3, [pc, #20]	; (8004c7c <std+0x44>)
 8004c68:	6224      	str	r4, [r4, #32]
 8004c6a:	6323      	str	r3, [r4, #48]	; 0x30
 8004c6c:	bd10      	pop	{r4, pc}
 8004c6e:	bf00      	nop
 8004c70:	080056b1 	.word	0x080056b1
 8004c74:	080056d3 	.word	0x080056d3
 8004c78:	0800570b 	.word	0x0800570b
 8004c7c:	0800572f 	.word	0x0800572f

08004c80 <_cleanup_r>:
 8004c80:	4901      	ldr	r1, [pc, #4]	; (8004c88 <_cleanup_r+0x8>)
 8004c82:	f000 b8af 	b.w	8004de4 <_fwalk_reent>
 8004c86:	bf00      	nop
 8004c88:	08004bc1 	.word	0x08004bc1

08004c8c <__sfmoreglue>:
 8004c8c:	b570      	push	{r4, r5, r6, lr}
 8004c8e:	2268      	movs	r2, #104	; 0x68
 8004c90:	1e4d      	subs	r5, r1, #1
 8004c92:	4355      	muls	r5, r2
 8004c94:	460e      	mov	r6, r1
 8004c96:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004c9a:	f000 f997 	bl	8004fcc <_malloc_r>
 8004c9e:	4604      	mov	r4, r0
 8004ca0:	b140      	cbz	r0, 8004cb4 <__sfmoreglue+0x28>
 8004ca2:	2100      	movs	r1, #0
 8004ca4:	e9c0 1600 	strd	r1, r6, [r0]
 8004ca8:	300c      	adds	r0, #12
 8004caa:	60a0      	str	r0, [r4, #8]
 8004cac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004cb0:	f7ff fd94 	bl	80047dc <memset>
 8004cb4:	4620      	mov	r0, r4
 8004cb6:	bd70      	pop	{r4, r5, r6, pc}

08004cb8 <__sfp_lock_acquire>:
 8004cb8:	4801      	ldr	r0, [pc, #4]	; (8004cc0 <__sfp_lock_acquire+0x8>)
 8004cba:	f000 b8b3 	b.w	8004e24 <__retarget_lock_acquire_recursive>
 8004cbe:	bf00      	nop
 8004cc0:	20002ea1 	.word	0x20002ea1

08004cc4 <__sfp_lock_release>:
 8004cc4:	4801      	ldr	r0, [pc, #4]	; (8004ccc <__sfp_lock_release+0x8>)
 8004cc6:	f000 b8ae 	b.w	8004e26 <__retarget_lock_release_recursive>
 8004cca:	bf00      	nop
 8004ccc:	20002ea1 	.word	0x20002ea1

08004cd0 <__sinit_lock_acquire>:
 8004cd0:	4801      	ldr	r0, [pc, #4]	; (8004cd8 <__sinit_lock_acquire+0x8>)
 8004cd2:	f000 b8a7 	b.w	8004e24 <__retarget_lock_acquire_recursive>
 8004cd6:	bf00      	nop
 8004cd8:	20002ea2 	.word	0x20002ea2

08004cdc <__sinit_lock_release>:
 8004cdc:	4801      	ldr	r0, [pc, #4]	; (8004ce4 <__sinit_lock_release+0x8>)
 8004cde:	f000 b8a2 	b.w	8004e26 <__retarget_lock_release_recursive>
 8004ce2:	bf00      	nop
 8004ce4:	20002ea2 	.word	0x20002ea2

08004ce8 <__sinit>:
 8004ce8:	b510      	push	{r4, lr}
 8004cea:	4604      	mov	r4, r0
 8004cec:	f7ff fff0 	bl	8004cd0 <__sinit_lock_acquire>
 8004cf0:	69a3      	ldr	r3, [r4, #24]
 8004cf2:	b11b      	cbz	r3, 8004cfc <__sinit+0x14>
 8004cf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cf8:	f7ff bff0 	b.w	8004cdc <__sinit_lock_release>
 8004cfc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004d00:	6523      	str	r3, [r4, #80]	; 0x50
 8004d02:	4b13      	ldr	r3, [pc, #76]	; (8004d50 <__sinit+0x68>)
 8004d04:	4a13      	ldr	r2, [pc, #76]	; (8004d54 <__sinit+0x6c>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	62a2      	str	r2, [r4, #40]	; 0x28
 8004d0a:	42a3      	cmp	r3, r4
 8004d0c:	bf04      	itt	eq
 8004d0e:	2301      	moveq	r3, #1
 8004d10:	61a3      	streq	r3, [r4, #24]
 8004d12:	4620      	mov	r0, r4
 8004d14:	f000 f820 	bl	8004d58 <__sfp>
 8004d18:	6060      	str	r0, [r4, #4]
 8004d1a:	4620      	mov	r0, r4
 8004d1c:	f000 f81c 	bl	8004d58 <__sfp>
 8004d20:	60a0      	str	r0, [r4, #8]
 8004d22:	4620      	mov	r0, r4
 8004d24:	f000 f818 	bl	8004d58 <__sfp>
 8004d28:	2200      	movs	r2, #0
 8004d2a:	60e0      	str	r0, [r4, #12]
 8004d2c:	2104      	movs	r1, #4
 8004d2e:	6860      	ldr	r0, [r4, #4]
 8004d30:	f7ff ff82 	bl	8004c38 <std>
 8004d34:	68a0      	ldr	r0, [r4, #8]
 8004d36:	2201      	movs	r2, #1
 8004d38:	2109      	movs	r1, #9
 8004d3a:	f7ff ff7d 	bl	8004c38 <std>
 8004d3e:	68e0      	ldr	r0, [r4, #12]
 8004d40:	2202      	movs	r2, #2
 8004d42:	2112      	movs	r1, #18
 8004d44:	f7ff ff78 	bl	8004c38 <std>
 8004d48:	2301      	movs	r3, #1
 8004d4a:	61a3      	str	r3, [r4, #24]
 8004d4c:	e7d2      	b.n	8004cf4 <__sinit+0xc>
 8004d4e:	bf00      	nop
 8004d50:	08005a9c 	.word	0x08005a9c
 8004d54:	08004c81 	.word	0x08004c81

08004d58 <__sfp>:
 8004d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d5a:	4607      	mov	r7, r0
 8004d5c:	f7ff ffac 	bl	8004cb8 <__sfp_lock_acquire>
 8004d60:	4b1e      	ldr	r3, [pc, #120]	; (8004ddc <__sfp+0x84>)
 8004d62:	681e      	ldr	r6, [r3, #0]
 8004d64:	69b3      	ldr	r3, [r6, #24]
 8004d66:	b913      	cbnz	r3, 8004d6e <__sfp+0x16>
 8004d68:	4630      	mov	r0, r6
 8004d6a:	f7ff ffbd 	bl	8004ce8 <__sinit>
 8004d6e:	3648      	adds	r6, #72	; 0x48
 8004d70:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004d74:	3b01      	subs	r3, #1
 8004d76:	d503      	bpl.n	8004d80 <__sfp+0x28>
 8004d78:	6833      	ldr	r3, [r6, #0]
 8004d7a:	b30b      	cbz	r3, 8004dc0 <__sfp+0x68>
 8004d7c:	6836      	ldr	r6, [r6, #0]
 8004d7e:	e7f7      	b.n	8004d70 <__sfp+0x18>
 8004d80:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004d84:	b9d5      	cbnz	r5, 8004dbc <__sfp+0x64>
 8004d86:	4b16      	ldr	r3, [pc, #88]	; (8004de0 <__sfp+0x88>)
 8004d88:	60e3      	str	r3, [r4, #12]
 8004d8a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004d8e:	6665      	str	r5, [r4, #100]	; 0x64
 8004d90:	f000 f847 	bl	8004e22 <__retarget_lock_init_recursive>
 8004d94:	f7ff ff96 	bl	8004cc4 <__sfp_lock_release>
 8004d98:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004d9c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004da0:	6025      	str	r5, [r4, #0]
 8004da2:	61a5      	str	r5, [r4, #24]
 8004da4:	2208      	movs	r2, #8
 8004da6:	4629      	mov	r1, r5
 8004da8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004dac:	f7ff fd16 	bl	80047dc <memset>
 8004db0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004db4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004db8:	4620      	mov	r0, r4
 8004dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004dbc:	3468      	adds	r4, #104	; 0x68
 8004dbe:	e7d9      	b.n	8004d74 <__sfp+0x1c>
 8004dc0:	2104      	movs	r1, #4
 8004dc2:	4638      	mov	r0, r7
 8004dc4:	f7ff ff62 	bl	8004c8c <__sfmoreglue>
 8004dc8:	4604      	mov	r4, r0
 8004dca:	6030      	str	r0, [r6, #0]
 8004dcc:	2800      	cmp	r0, #0
 8004dce:	d1d5      	bne.n	8004d7c <__sfp+0x24>
 8004dd0:	f7ff ff78 	bl	8004cc4 <__sfp_lock_release>
 8004dd4:	230c      	movs	r3, #12
 8004dd6:	603b      	str	r3, [r7, #0]
 8004dd8:	e7ee      	b.n	8004db8 <__sfp+0x60>
 8004dda:	bf00      	nop
 8004ddc:	08005a9c 	.word	0x08005a9c
 8004de0:	ffff0001 	.word	0xffff0001

08004de4 <_fwalk_reent>:
 8004de4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004de8:	4606      	mov	r6, r0
 8004dea:	4688      	mov	r8, r1
 8004dec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004df0:	2700      	movs	r7, #0
 8004df2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004df6:	f1b9 0901 	subs.w	r9, r9, #1
 8004dfa:	d505      	bpl.n	8004e08 <_fwalk_reent+0x24>
 8004dfc:	6824      	ldr	r4, [r4, #0]
 8004dfe:	2c00      	cmp	r4, #0
 8004e00:	d1f7      	bne.n	8004df2 <_fwalk_reent+0xe>
 8004e02:	4638      	mov	r0, r7
 8004e04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e08:	89ab      	ldrh	r3, [r5, #12]
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d907      	bls.n	8004e1e <_fwalk_reent+0x3a>
 8004e0e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004e12:	3301      	adds	r3, #1
 8004e14:	d003      	beq.n	8004e1e <_fwalk_reent+0x3a>
 8004e16:	4629      	mov	r1, r5
 8004e18:	4630      	mov	r0, r6
 8004e1a:	47c0      	blx	r8
 8004e1c:	4307      	orrs	r7, r0
 8004e1e:	3568      	adds	r5, #104	; 0x68
 8004e20:	e7e9      	b.n	8004df6 <_fwalk_reent+0x12>

08004e22 <__retarget_lock_init_recursive>:
 8004e22:	4770      	bx	lr

08004e24 <__retarget_lock_acquire_recursive>:
 8004e24:	4770      	bx	lr

08004e26 <__retarget_lock_release_recursive>:
 8004e26:	4770      	bx	lr

08004e28 <__swhatbuf_r>:
 8004e28:	b570      	push	{r4, r5, r6, lr}
 8004e2a:	460e      	mov	r6, r1
 8004e2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e30:	2900      	cmp	r1, #0
 8004e32:	b096      	sub	sp, #88	; 0x58
 8004e34:	4614      	mov	r4, r2
 8004e36:	461d      	mov	r5, r3
 8004e38:	da08      	bge.n	8004e4c <__swhatbuf_r+0x24>
 8004e3a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	602a      	str	r2, [r5, #0]
 8004e42:	061a      	lsls	r2, r3, #24
 8004e44:	d410      	bmi.n	8004e68 <__swhatbuf_r+0x40>
 8004e46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e4a:	e00e      	b.n	8004e6a <__swhatbuf_r+0x42>
 8004e4c:	466a      	mov	r2, sp
 8004e4e:	f000 fc95 	bl	800577c <_fstat_r>
 8004e52:	2800      	cmp	r0, #0
 8004e54:	dbf1      	blt.n	8004e3a <__swhatbuf_r+0x12>
 8004e56:	9a01      	ldr	r2, [sp, #4]
 8004e58:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004e5c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004e60:	425a      	negs	r2, r3
 8004e62:	415a      	adcs	r2, r3
 8004e64:	602a      	str	r2, [r5, #0]
 8004e66:	e7ee      	b.n	8004e46 <__swhatbuf_r+0x1e>
 8004e68:	2340      	movs	r3, #64	; 0x40
 8004e6a:	2000      	movs	r0, #0
 8004e6c:	6023      	str	r3, [r4, #0]
 8004e6e:	b016      	add	sp, #88	; 0x58
 8004e70:	bd70      	pop	{r4, r5, r6, pc}
	...

08004e74 <__smakebuf_r>:
 8004e74:	898b      	ldrh	r3, [r1, #12]
 8004e76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004e78:	079d      	lsls	r5, r3, #30
 8004e7a:	4606      	mov	r6, r0
 8004e7c:	460c      	mov	r4, r1
 8004e7e:	d507      	bpl.n	8004e90 <__smakebuf_r+0x1c>
 8004e80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004e84:	6023      	str	r3, [r4, #0]
 8004e86:	6123      	str	r3, [r4, #16]
 8004e88:	2301      	movs	r3, #1
 8004e8a:	6163      	str	r3, [r4, #20]
 8004e8c:	b002      	add	sp, #8
 8004e8e:	bd70      	pop	{r4, r5, r6, pc}
 8004e90:	ab01      	add	r3, sp, #4
 8004e92:	466a      	mov	r2, sp
 8004e94:	f7ff ffc8 	bl	8004e28 <__swhatbuf_r>
 8004e98:	9900      	ldr	r1, [sp, #0]
 8004e9a:	4605      	mov	r5, r0
 8004e9c:	4630      	mov	r0, r6
 8004e9e:	f000 f895 	bl	8004fcc <_malloc_r>
 8004ea2:	b948      	cbnz	r0, 8004eb8 <__smakebuf_r+0x44>
 8004ea4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ea8:	059a      	lsls	r2, r3, #22
 8004eaa:	d4ef      	bmi.n	8004e8c <__smakebuf_r+0x18>
 8004eac:	f023 0303 	bic.w	r3, r3, #3
 8004eb0:	f043 0302 	orr.w	r3, r3, #2
 8004eb4:	81a3      	strh	r3, [r4, #12]
 8004eb6:	e7e3      	b.n	8004e80 <__smakebuf_r+0xc>
 8004eb8:	4b0d      	ldr	r3, [pc, #52]	; (8004ef0 <__smakebuf_r+0x7c>)
 8004eba:	62b3      	str	r3, [r6, #40]	; 0x28
 8004ebc:	89a3      	ldrh	r3, [r4, #12]
 8004ebe:	6020      	str	r0, [r4, #0]
 8004ec0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ec4:	81a3      	strh	r3, [r4, #12]
 8004ec6:	9b00      	ldr	r3, [sp, #0]
 8004ec8:	6163      	str	r3, [r4, #20]
 8004eca:	9b01      	ldr	r3, [sp, #4]
 8004ecc:	6120      	str	r0, [r4, #16]
 8004ece:	b15b      	cbz	r3, 8004ee8 <__smakebuf_r+0x74>
 8004ed0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ed4:	4630      	mov	r0, r6
 8004ed6:	f000 fc63 	bl	80057a0 <_isatty_r>
 8004eda:	b128      	cbz	r0, 8004ee8 <__smakebuf_r+0x74>
 8004edc:	89a3      	ldrh	r3, [r4, #12]
 8004ede:	f023 0303 	bic.w	r3, r3, #3
 8004ee2:	f043 0301 	orr.w	r3, r3, #1
 8004ee6:	81a3      	strh	r3, [r4, #12]
 8004ee8:	89a0      	ldrh	r0, [r4, #12]
 8004eea:	4305      	orrs	r5, r0
 8004eec:	81a5      	strh	r5, [r4, #12]
 8004eee:	e7cd      	b.n	8004e8c <__smakebuf_r+0x18>
 8004ef0:	08004c81 	.word	0x08004c81

08004ef4 <_free_r>:
 8004ef4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004ef6:	2900      	cmp	r1, #0
 8004ef8:	d044      	beq.n	8004f84 <_free_r+0x90>
 8004efa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004efe:	9001      	str	r0, [sp, #4]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	f1a1 0404 	sub.w	r4, r1, #4
 8004f06:	bfb8      	it	lt
 8004f08:	18e4      	addlt	r4, r4, r3
 8004f0a:	f000 fc6b 	bl	80057e4 <__malloc_lock>
 8004f0e:	4a1e      	ldr	r2, [pc, #120]	; (8004f88 <_free_r+0x94>)
 8004f10:	9801      	ldr	r0, [sp, #4]
 8004f12:	6813      	ldr	r3, [r2, #0]
 8004f14:	b933      	cbnz	r3, 8004f24 <_free_r+0x30>
 8004f16:	6063      	str	r3, [r4, #4]
 8004f18:	6014      	str	r4, [r2, #0]
 8004f1a:	b003      	add	sp, #12
 8004f1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004f20:	f000 bc66 	b.w	80057f0 <__malloc_unlock>
 8004f24:	42a3      	cmp	r3, r4
 8004f26:	d908      	bls.n	8004f3a <_free_r+0x46>
 8004f28:	6825      	ldr	r5, [r4, #0]
 8004f2a:	1961      	adds	r1, r4, r5
 8004f2c:	428b      	cmp	r3, r1
 8004f2e:	bf01      	itttt	eq
 8004f30:	6819      	ldreq	r1, [r3, #0]
 8004f32:	685b      	ldreq	r3, [r3, #4]
 8004f34:	1949      	addeq	r1, r1, r5
 8004f36:	6021      	streq	r1, [r4, #0]
 8004f38:	e7ed      	b.n	8004f16 <_free_r+0x22>
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	b10b      	cbz	r3, 8004f44 <_free_r+0x50>
 8004f40:	42a3      	cmp	r3, r4
 8004f42:	d9fa      	bls.n	8004f3a <_free_r+0x46>
 8004f44:	6811      	ldr	r1, [r2, #0]
 8004f46:	1855      	adds	r5, r2, r1
 8004f48:	42a5      	cmp	r5, r4
 8004f4a:	d10b      	bne.n	8004f64 <_free_r+0x70>
 8004f4c:	6824      	ldr	r4, [r4, #0]
 8004f4e:	4421      	add	r1, r4
 8004f50:	1854      	adds	r4, r2, r1
 8004f52:	42a3      	cmp	r3, r4
 8004f54:	6011      	str	r1, [r2, #0]
 8004f56:	d1e0      	bne.n	8004f1a <_free_r+0x26>
 8004f58:	681c      	ldr	r4, [r3, #0]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	6053      	str	r3, [r2, #4]
 8004f5e:	4421      	add	r1, r4
 8004f60:	6011      	str	r1, [r2, #0]
 8004f62:	e7da      	b.n	8004f1a <_free_r+0x26>
 8004f64:	d902      	bls.n	8004f6c <_free_r+0x78>
 8004f66:	230c      	movs	r3, #12
 8004f68:	6003      	str	r3, [r0, #0]
 8004f6a:	e7d6      	b.n	8004f1a <_free_r+0x26>
 8004f6c:	6825      	ldr	r5, [r4, #0]
 8004f6e:	1961      	adds	r1, r4, r5
 8004f70:	428b      	cmp	r3, r1
 8004f72:	bf04      	itt	eq
 8004f74:	6819      	ldreq	r1, [r3, #0]
 8004f76:	685b      	ldreq	r3, [r3, #4]
 8004f78:	6063      	str	r3, [r4, #4]
 8004f7a:	bf04      	itt	eq
 8004f7c:	1949      	addeq	r1, r1, r5
 8004f7e:	6021      	streq	r1, [r4, #0]
 8004f80:	6054      	str	r4, [r2, #4]
 8004f82:	e7ca      	b.n	8004f1a <_free_r+0x26>
 8004f84:	b003      	add	sp, #12
 8004f86:	bd30      	pop	{r4, r5, pc}
 8004f88:	20002ea4 	.word	0x20002ea4

08004f8c <sbrk_aligned>:
 8004f8c:	b570      	push	{r4, r5, r6, lr}
 8004f8e:	4e0e      	ldr	r6, [pc, #56]	; (8004fc8 <sbrk_aligned+0x3c>)
 8004f90:	460c      	mov	r4, r1
 8004f92:	6831      	ldr	r1, [r6, #0]
 8004f94:	4605      	mov	r5, r0
 8004f96:	b911      	cbnz	r1, 8004f9e <sbrk_aligned+0x12>
 8004f98:	f000 fb7a 	bl	8005690 <_sbrk_r>
 8004f9c:	6030      	str	r0, [r6, #0]
 8004f9e:	4621      	mov	r1, r4
 8004fa0:	4628      	mov	r0, r5
 8004fa2:	f000 fb75 	bl	8005690 <_sbrk_r>
 8004fa6:	1c43      	adds	r3, r0, #1
 8004fa8:	d00a      	beq.n	8004fc0 <sbrk_aligned+0x34>
 8004faa:	1cc4      	adds	r4, r0, #3
 8004fac:	f024 0403 	bic.w	r4, r4, #3
 8004fb0:	42a0      	cmp	r0, r4
 8004fb2:	d007      	beq.n	8004fc4 <sbrk_aligned+0x38>
 8004fb4:	1a21      	subs	r1, r4, r0
 8004fb6:	4628      	mov	r0, r5
 8004fb8:	f000 fb6a 	bl	8005690 <_sbrk_r>
 8004fbc:	3001      	adds	r0, #1
 8004fbe:	d101      	bne.n	8004fc4 <sbrk_aligned+0x38>
 8004fc0:	f04f 34ff 	mov.w	r4, #4294967295
 8004fc4:	4620      	mov	r0, r4
 8004fc6:	bd70      	pop	{r4, r5, r6, pc}
 8004fc8:	20002ea8 	.word	0x20002ea8

08004fcc <_malloc_r>:
 8004fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fd0:	1ccd      	adds	r5, r1, #3
 8004fd2:	f025 0503 	bic.w	r5, r5, #3
 8004fd6:	3508      	adds	r5, #8
 8004fd8:	2d0c      	cmp	r5, #12
 8004fda:	bf38      	it	cc
 8004fdc:	250c      	movcc	r5, #12
 8004fde:	2d00      	cmp	r5, #0
 8004fe0:	4607      	mov	r7, r0
 8004fe2:	db01      	blt.n	8004fe8 <_malloc_r+0x1c>
 8004fe4:	42a9      	cmp	r1, r5
 8004fe6:	d905      	bls.n	8004ff4 <_malloc_r+0x28>
 8004fe8:	230c      	movs	r3, #12
 8004fea:	603b      	str	r3, [r7, #0]
 8004fec:	2600      	movs	r6, #0
 8004fee:	4630      	mov	r0, r6
 8004ff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ff4:	4e2e      	ldr	r6, [pc, #184]	; (80050b0 <_malloc_r+0xe4>)
 8004ff6:	f000 fbf5 	bl	80057e4 <__malloc_lock>
 8004ffa:	6833      	ldr	r3, [r6, #0]
 8004ffc:	461c      	mov	r4, r3
 8004ffe:	bb34      	cbnz	r4, 800504e <_malloc_r+0x82>
 8005000:	4629      	mov	r1, r5
 8005002:	4638      	mov	r0, r7
 8005004:	f7ff ffc2 	bl	8004f8c <sbrk_aligned>
 8005008:	1c43      	adds	r3, r0, #1
 800500a:	4604      	mov	r4, r0
 800500c:	d14d      	bne.n	80050aa <_malloc_r+0xde>
 800500e:	6834      	ldr	r4, [r6, #0]
 8005010:	4626      	mov	r6, r4
 8005012:	2e00      	cmp	r6, #0
 8005014:	d140      	bne.n	8005098 <_malloc_r+0xcc>
 8005016:	6823      	ldr	r3, [r4, #0]
 8005018:	4631      	mov	r1, r6
 800501a:	4638      	mov	r0, r7
 800501c:	eb04 0803 	add.w	r8, r4, r3
 8005020:	f000 fb36 	bl	8005690 <_sbrk_r>
 8005024:	4580      	cmp	r8, r0
 8005026:	d13a      	bne.n	800509e <_malloc_r+0xd2>
 8005028:	6821      	ldr	r1, [r4, #0]
 800502a:	3503      	adds	r5, #3
 800502c:	1a6d      	subs	r5, r5, r1
 800502e:	f025 0503 	bic.w	r5, r5, #3
 8005032:	3508      	adds	r5, #8
 8005034:	2d0c      	cmp	r5, #12
 8005036:	bf38      	it	cc
 8005038:	250c      	movcc	r5, #12
 800503a:	4629      	mov	r1, r5
 800503c:	4638      	mov	r0, r7
 800503e:	f7ff ffa5 	bl	8004f8c <sbrk_aligned>
 8005042:	3001      	adds	r0, #1
 8005044:	d02b      	beq.n	800509e <_malloc_r+0xd2>
 8005046:	6823      	ldr	r3, [r4, #0]
 8005048:	442b      	add	r3, r5
 800504a:	6023      	str	r3, [r4, #0]
 800504c:	e00e      	b.n	800506c <_malloc_r+0xa0>
 800504e:	6822      	ldr	r2, [r4, #0]
 8005050:	1b52      	subs	r2, r2, r5
 8005052:	d41e      	bmi.n	8005092 <_malloc_r+0xc6>
 8005054:	2a0b      	cmp	r2, #11
 8005056:	d916      	bls.n	8005086 <_malloc_r+0xba>
 8005058:	1961      	adds	r1, r4, r5
 800505a:	42a3      	cmp	r3, r4
 800505c:	6025      	str	r5, [r4, #0]
 800505e:	bf18      	it	ne
 8005060:	6059      	strne	r1, [r3, #4]
 8005062:	6863      	ldr	r3, [r4, #4]
 8005064:	bf08      	it	eq
 8005066:	6031      	streq	r1, [r6, #0]
 8005068:	5162      	str	r2, [r4, r5]
 800506a:	604b      	str	r3, [r1, #4]
 800506c:	4638      	mov	r0, r7
 800506e:	f104 060b 	add.w	r6, r4, #11
 8005072:	f000 fbbd 	bl	80057f0 <__malloc_unlock>
 8005076:	f026 0607 	bic.w	r6, r6, #7
 800507a:	1d23      	adds	r3, r4, #4
 800507c:	1af2      	subs	r2, r6, r3
 800507e:	d0b6      	beq.n	8004fee <_malloc_r+0x22>
 8005080:	1b9b      	subs	r3, r3, r6
 8005082:	50a3      	str	r3, [r4, r2]
 8005084:	e7b3      	b.n	8004fee <_malloc_r+0x22>
 8005086:	6862      	ldr	r2, [r4, #4]
 8005088:	42a3      	cmp	r3, r4
 800508a:	bf0c      	ite	eq
 800508c:	6032      	streq	r2, [r6, #0]
 800508e:	605a      	strne	r2, [r3, #4]
 8005090:	e7ec      	b.n	800506c <_malloc_r+0xa0>
 8005092:	4623      	mov	r3, r4
 8005094:	6864      	ldr	r4, [r4, #4]
 8005096:	e7b2      	b.n	8004ffe <_malloc_r+0x32>
 8005098:	4634      	mov	r4, r6
 800509a:	6876      	ldr	r6, [r6, #4]
 800509c:	e7b9      	b.n	8005012 <_malloc_r+0x46>
 800509e:	230c      	movs	r3, #12
 80050a0:	603b      	str	r3, [r7, #0]
 80050a2:	4638      	mov	r0, r7
 80050a4:	f000 fba4 	bl	80057f0 <__malloc_unlock>
 80050a8:	e7a1      	b.n	8004fee <_malloc_r+0x22>
 80050aa:	6025      	str	r5, [r4, #0]
 80050ac:	e7de      	b.n	800506c <_malloc_r+0xa0>
 80050ae:	bf00      	nop
 80050b0:	20002ea4 	.word	0x20002ea4

080050b4 <__sfputc_r>:
 80050b4:	6893      	ldr	r3, [r2, #8]
 80050b6:	3b01      	subs	r3, #1
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	b410      	push	{r4}
 80050bc:	6093      	str	r3, [r2, #8]
 80050be:	da08      	bge.n	80050d2 <__sfputc_r+0x1e>
 80050c0:	6994      	ldr	r4, [r2, #24]
 80050c2:	42a3      	cmp	r3, r4
 80050c4:	db01      	blt.n	80050ca <__sfputc_r+0x16>
 80050c6:	290a      	cmp	r1, #10
 80050c8:	d103      	bne.n	80050d2 <__sfputc_r+0x1e>
 80050ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80050ce:	f7ff bc31 	b.w	8004934 <__swbuf_r>
 80050d2:	6813      	ldr	r3, [r2, #0]
 80050d4:	1c58      	adds	r0, r3, #1
 80050d6:	6010      	str	r0, [r2, #0]
 80050d8:	7019      	strb	r1, [r3, #0]
 80050da:	4608      	mov	r0, r1
 80050dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80050e0:	4770      	bx	lr

080050e2 <__sfputs_r>:
 80050e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050e4:	4606      	mov	r6, r0
 80050e6:	460f      	mov	r7, r1
 80050e8:	4614      	mov	r4, r2
 80050ea:	18d5      	adds	r5, r2, r3
 80050ec:	42ac      	cmp	r4, r5
 80050ee:	d101      	bne.n	80050f4 <__sfputs_r+0x12>
 80050f0:	2000      	movs	r0, #0
 80050f2:	e007      	b.n	8005104 <__sfputs_r+0x22>
 80050f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050f8:	463a      	mov	r2, r7
 80050fa:	4630      	mov	r0, r6
 80050fc:	f7ff ffda 	bl	80050b4 <__sfputc_r>
 8005100:	1c43      	adds	r3, r0, #1
 8005102:	d1f3      	bne.n	80050ec <__sfputs_r+0xa>
 8005104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005108 <_vfiprintf_r>:
 8005108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800510c:	460d      	mov	r5, r1
 800510e:	b09d      	sub	sp, #116	; 0x74
 8005110:	4614      	mov	r4, r2
 8005112:	4698      	mov	r8, r3
 8005114:	4606      	mov	r6, r0
 8005116:	b118      	cbz	r0, 8005120 <_vfiprintf_r+0x18>
 8005118:	6983      	ldr	r3, [r0, #24]
 800511a:	b90b      	cbnz	r3, 8005120 <_vfiprintf_r+0x18>
 800511c:	f7ff fde4 	bl	8004ce8 <__sinit>
 8005120:	4b89      	ldr	r3, [pc, #548]	; (8005348 <_vfiprintf_r+0x240>)
 8005122:	429d      	cmp	r5, r3
 8005124:	d11b      	bne.n	800515e <_vfiprintf_r+0x56>
 8005126:	6875      	ldr	r5, [r6, #4]
 8005128:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800512a:	07d9      	lsls	r1, r3, #31
 800512c:	d405      	bmi.n	800513a <_vfiprintf_r+0x32>
 800512e:	89ab      	ldrh	r3, [r5, #12]
 8005130:	059a      	lsls	r2, r3, #22
 8005132:	d402      	bmi.n	800513a <_vfiprintf_r+0x32>
 8005134:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005136:	f7ff fe75 	bl	8004e24 <__retarget_lock_acquire_recursive>
 800513a:	89ab      	ldrh	r3, [r5, #12]
 800513c:	071b      	lsls	r3, r3, #28
 800513e:	d501      	bpl.n	8005144 <_vfiprintf_r+0x3c>
 8005140:	692b      	ldr	r3, [r5, #16]
 8005142:	b9eb      	cbnz	r3, 8005180 <_vfiprintf_r+0x78>
 8005144:	4629      	mov	r1, r5
 8005146:	4630      	mov	r0, r6
 8005148:	f7ff fc46 	bl	80049d8 <__swsetup_r>
 800514c:	b1c0      	cbz	r0, 8005180 <_vfiprintf_r+0x78>
 800514e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005150:	07dc      	lsls	r4, r3, #31
 8005152:	d50e      	bpl.n	8005172 <_vfiprintf_r+0x6a>
 8005154:	f04f 30ff 	mov.w	r0, #4294967295
 8005158:	b01d      	add	sp, #116	; 0x74
 800515a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800515e:	4b7b      	ldr	r3, [pc, #492]	; (800534c <_vfiprintf_r+0x244>)
 8005160:	429d      	cmp	r5, r3
 8005162:	d101      	bne.n	8005168 <_vfiprintf_r+0x60>
 8005164:	68b5      	ldr	r5, [r6, #8]
 8005166:	e7df      	b.n	8005128 <_vfiprintf_r+0x20>
 8005168:	4b79      	ldr	r3, [pc, #484]	; (8005350 <_vfiprintf_r+0x248>)
 800516a:	429d      	cmp	r5, r3
 800516c:	bf08      	it	eq
 800516e:	68f5      	ldreq	r5, [r6, #12]
 8005170:	e7da      	b.n	8005128 <_vfiprintf_r+0x20>
 8005172:	89ab      	ldrh	r3, [r5, #12]
 8005174:	0598      	lsls	r0, r3, #22
 8005176:	d4ed      	bmi.n	8005154 <_vfiprintf_r+0x4c>
 8005178:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800517a:	f7ff fe54 	bl	8004e26 <__retarget_lock_release_recursive>
 800517e:	e7e9      	b.n	8005154 <_vfiprintf_r+0x4c>
 8005180:	2300      	movs	r3, #0
 8005182:	9309      	str	r3, [sp, #36]	; 0x24
 8005184:	2320      	movs	r3, #32
 8005186:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800518a:	f8cd 800c 	str.w	r8, [sp, #12]
 800518e:	2330      	movs	r3, #48	; 0x30
 8005190:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005354 <_vfiprintf_r+0x24c>
 8005194:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005198:	f04f 0901 	mov.w	r9, #1
 800519c:	4623      	mov	r3, r4
 800519e:	469a      	mov	sl, r3
 80051a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80051a4:	b10a      	cbz	r2, 80051aa <_vfiprintf_r+0xa2>
 80051a6:	2a25      	cmp	r2, #37	; 0x25
 80051a8:	d1f9      	bne.n	800519e <_vfiprintf_r+0x96>
 80051aa:	ebba 0b04 	subs.w	fp, sl, r4
 80051ae:	d00b      	beq.n	80051c8 <_vfiprintf_r+0xc0>
 80051b0:	465b      	mov	r3, fp
 80051b2:	4622      	mov	r2, r4
 80051b4:	4629      	mov	r1, r5
 80051b6:	4630      	mov	r0, r6
 80051b8:	f7ff ff93 	bl	80050e2 <__sfputs_r>
 80051bc:	3001      	adds	r0, #1
 80051be:	f000 80aa 	beq.w	8005316 <_vfiprintf_r+0x20e>
 80051c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80051c4:	445a      	add	r2, fp
 80051c6:	9209      	str	r2, [sp, #36]	; 0x24
 80051c8:	f89a 3000 	ldrb.w	r3, [sl]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	f000 80a2 	beq.w	8005316 <_vfiprintf_r+0x20e>
 80051d2:	2300      	movs	r3, #0
 80051d4:	f04f 32ff 	mov.w	r2, #4294967295
 80051d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80051dc:	f10a 0a01 	add.w	sl, sl, #1
 80051e0:	9304      	str	r3, [sp, #16]
 80051e2:	9307      	str	r3, [sp, #28]
 80051e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80051e8:	931a      	str	r3, [sp, #104]	; 0x68
 80051ea:	4654      	mov	r4, sl
 80051ec:	2205      	movs	r2, #5
 80051ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051f2:	4858      	ldr	r0, [pc, #352]	; (8005354 <_vfiprintf_r+0x24c>)
 80051f4:	f7fa fffc 	bl	80001f0 <memchr>
 80051f8:	9a04      	ldr	r2, [sp, #16]
 80051fa:	b9d8      	cbnz	r0, 8005234 <_vfiprintf_r+0x12c>
 80051fc:	06d1      	lsls	r1, r2, #27
 80051fe:	bf44      	itt	mi
 8005200:	2320      	movmi	r3, #32
 8005202:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005206:	0713      	lsls	r3, r2, #28
 8005208:	bf44      	itt	mi
 800520a:	232b      	movmi	r3, #43	; 0x2b
 800520c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005210:	f89a 3000 	ldrb.w	r3, [sl]
 8005214:	2b2a      	cmp	r3, #42	; 0x2a
 8005216:	d015      	beq.n	8005244 <_vfiprintf_r+0x13c>
 8005218:	9a07      	ldr	r2, [sp, #28]
 800521a:	4654      	mov	r4, sl
 800521c:	2000      	movs	r0, #0
 800521e:	f04f 0c0a 	mov.w	ip, #10
 8005222:	4621      	mov	r1, r4
 8005224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005228:	3b30      	subs	r3, #48	; 0x30
 800522a:	2b09      	cmp	r3, #9
 800522c:	d94e      	bls.n	80052cc <_vfiprintf_r+0x1c4>
 800522e:	b1b0      	cbz	r0, 800525e <_vfiprintf_r+0x156>
 8005230:	9207      	str	r2, [sp, #28]
 8005232:	e014      	b.n	800525e <_vfiprintf_r+0x156>
 8005234:	eba0 0308 	sub.w	r3, r0, r8
 8005238:	fa09 f303 	lsl.w	r3, r9, r3
 800523c:	4313      	orrs	r3, r2
 800523e:	9304      	str	r3, [sp, #16]
 8005240:	46a2      	mov	sl, r4
 8005242:	e7d2      	b.n	80051ea <_vfiprintf_r+0xe2>
 8005244:	9b03      	ldr	r3, [sp, #12]
 8005246:	1d19      	adds	r1, r3, #4
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	9103      	str	r1, [sp, #12]
 800524c:	2b00      	cmp	r3, #0
 800524e:	bfbb      	ittet	lt
 8005250:	425b      	neglt	r3, r3
 8005252:	f042 0202 	orrlt.w	r2, r2, #2
 8005256:	9307      	strge	r3, [sp, #28]
 8005258:	9307      	strlt	r3, [sp, #28]
 800525a:	bfb8      	it	lt
 800525c:	9204      	strlt	r2, [sp, #16]
 800525e:	7823      	ldrb	r3, [r4, #0]
 8005260:	2b2e      	cmp	r3, #46	; 0x2e
 8005262:	d10c      	bne.n	800527e <_vfiprintf_r+0x176>
 8005264:	7863      	ldrb	r3, [r4, #1]
 8005266:	2b2a      	cmp	r3, #42	; 0x2a
 8005268:	d135      	bne.n	80052d6 <_vfiprintf_r+0x1ce>
 800526a:	9b03      	ldr	r3, [sp, #12]
 800526c:	1d1a      	adds	r2, r3, #4
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	9203      	str	r2, [sp, #12]
 8005272:	2b00      	cmp	r3, #0
 8005274:	bfb8      	it	lt
 8005276:	f04f 33ff 	movlt.w	r3, #4294967295
 800527a:	3402      	adds	r4, #2
 800527c:	9305      	str	r3, [sp, #20]
 800527e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005364 <_vfiprintf_r+0x25c>
 8005282:	7821      	ldrb	r1, [r4, #0]
 8005284:	2203      	movs	r2, #3
 8005286:	4650      	mov	r0, sl
 8005288:	f7fa ffb2 	bl	80001f0 <memchr>
 800528c:	b140      	cbz	r0, 80052a0 <_vfiprintf_r+0x198>
 800528e:	2340      	movs	r3, #64	; 0x40
 8005290:	eba0 000a 	sub.w	r0, r0, sl
 8005294:	fa03 f000 	lsl.w	r0, r3, r0
 8005298:	9b04      	ldr	r3, [sp, #16]
 800529a:	4303      	orrs	r3, r0
 800529c:	3401      	adds	r4, #1
 800529e:	9304      	str	r3, [sp, #16]
 80052a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052a4:	482c      	ldr	r0, [pc, #176]	; (8005358 <_vfiprintf_r+0x250>)
 80052a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80052aa:	2206      	movs	r2, #6
 80052ac:	f7fa ffa0 	bl	80001f0 <memchr>
 80052b0:	2800      	cmp	r0, #0
 80052b2:	d03f      	beq.n	8005334 <_vfiprintf_r+0x22c>
 80052b4:	4b29      	ldr	r3, [pc, #164]	; (800535c <_vfiprintf_r+0x254>)
 80052b6:	bb1b      	cbnz	r3, 8005300 <_vfiprintf_r+0x1f8>
 80052b8:	9b03      	ldr	r3, [sp, #12]
 80052ba:	3307      	adds	r3, #7
 80052bc:	f023 0307 	bic.w	r3, r3, #7
 80052c0:	3308      	adds	r3, #8
 80052c2:	9303      	str	r3, [sp, #12]
 80052c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052c6:	443b      	add	r3, r7
 80052c8:	9309      	str	r3, [sp, #36]	; 0x24
 80052ca:	e767      	b.n	800519c <_vfiprintf_r+0x94>
 80052cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80052d0:	460c      	mov	r4, r1
 80052d2:	2001      	movs	r0, #1
 80052d4:	e7a5      	b.n	8005222 <_vfiprintf_r+0x11a>
 80052d6:	2300      	movs	r3, #0
 80052d8:	3401      	adds	r4, #1
 80052da:	9305      	str	r3, [sp, #20]
 80052dc:	4619      	mov	r1, r3
 80052de:	f04f 0c0a 	mov.w	ip, #10
 80052e2:	4620      	mov	r0, r4
 80052e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80052e8:	3a30      	subs	r2, #48	; 0x30
 80052ea:	2a09      	cmp	r2, #9
 80052ec:	d903      	bls.n	80052f6 <_vfiprintf_r+0x1ee>
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d0c5      	beq.n	800527e <_vfiprintf_r+0x176>
 80052f2:	9105      	str	r1, [sp, #20]
 80052f4:	e7c3      	b.n	800527e <_vfiprintf_r+0x176>
 80052f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80052fa:	4604      	mov	r4, r0
 80052fc:	2301      	movs	r3, #1
 80052fe:	e7f0      	b.n	80052e2 <_vfiprintf_r+0x1da>
 8005300:	ab03      	add	r3, sp, #12
 8005302:	9300      	str	r3, [sp, #0]
 8005304:	462a      	mov	r2, r5
 8005306:	4b16      	ldr	r3, [pc, #88]	; (8005360 <_vfiprintf_r+0x258>)
 8005308:	a904      	add	r1, sp, #16
 800530a:	4630      	mov	r0, r6
 800530c:	f3af 8000 	nop.w
 8005310:	4607      	mov	r7, r0
 8005312:	1c78      	adds	r0, r7, #1
 8005314:	d1d6      	bne.n	80052c4 <_vfiprintf_r+0x1bc>
 8005316:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005318:	07d9      	lsls	r1, r3, #31
 800531a:	d405      	bmi.n	8005328 <_vfiprintf_r+0x220>
 800531c:	89ab      	ldrh	r3, [r5, #12]
 800531e:	059a      	lsls	r2, r3, #22
 8005320:	d402      	bmi.n	8005328 <_vfiprintf_r+0x220>
 8005322:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005324:	f7ff fd7f 	bl	8004e26 <__retarget_lock_release_recursive>
 8005328:	89ab      	ldrh	r3, [r5, #12]
 800532a:	065b      	lsls	r3, r3, #25
 800532c:	f53f af12 	bmi.w	8005154 <_vfiprintf_r+0x4c>
 8005330:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005332:	e711      	b.n	8005158 <_vfiprintf_r+0x50>
 8005334:	ab03      	add	r3, sp, #12
 8005336:	9300      	str	r3, [sp, #0]
 8005338:	462a      	mov	r2, r5
 800533a:	4b09      	ldr	r3, [pc, #36]	; (8005360 <_vfiprintf_r+0x258>)
 800533c:	a904      	add	r1, sp, #16
 800533e:	4630      	mov	r0, r6
 8005340:	f000 f880 	bl	8005444 <_printf_i>
 8005344:	e7e4      	b.n	8005310 <_vfiprintf_r+0x208>
 8005346:	bf00      	nop
 8005348:	08005bc4 	.word	0x08005bc4
 800534c:	08005be4 	.word	0x08005be4
 8005350:	08005ba4 	.word	0x08005ba4
 8005354:	08005c04 	.word	0x08005c04
 8005358:	08005c0e 	.word	0x08005c0e
 800535c:	00000000 	.word	0x00000000
 8005360:	080050e3 	.word	0x080050e3
 8005364:	08005c0a 	.word	0x08005c0a

08005368 <_printf_common>:
 8005368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800536c:	4616      	mov	r6, r2
 800536e:	4699      	mov	r9, r3
 8005370:	688a      	ldr	r2, [r1, #8]
 8005372:	690b      	ldr	r3, [r1, #16]
 8005374:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005378:	4293      	cmp	r3, r2
 800537a:	bfb8      	it	lt
 800537c:	4613      	movlt	r3, r2
 800537e:	6033      	str	r3, [r6, #0]
 8005380:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005384:	4607      	mov	r7, r0
 8005386:	460c      	mov	r4, r1
 8005388:	b10a      	cbz	r2, 800538e <_printf_common+0x26>
 800538a:	3301      	adds	r3, #1
 800538c:	6033      	str	r3, [r6, #0]
 800538e:	6823      	ldr	r3, [r4, #0]
 8005390:	0699      	lsls	r1, r3, #26
 8005392:	bf42      	ittt	mi
 8005394:	6833      	ldrmi	r3, [r6, #0]
 8005396:	3302      	addmi	r3, #2
 8005398:	6033      	strmi	r3, [r6, #0]
 800539a:	6825      	ldr	r5, [r4, #0]
 800539c:	f015 0506 	ands.w	r5, r5, #6
 80053a0:	d106      	bne.n	80053b0 <_printf_common+0x48>
 80053a2:	f104 0a19 	add.w	sl, r4, #25
 80053a6:	68e3      	ldr	r3, [r4, #12]
 80053a8:	6832      	ldr	r2, [r6, #0]
 80053aa:	1a9b      	subs	r3, r3, r2
 80053ac:	42ab      	cmp	r3, r5
 80053ae:	dc26      	bgt.n	80053fe <_printf_common+0x96>
 80053b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80053b4:	1e13      	subs	r3, r2, #0
 80053b6:	6822      	ldr	r2, [r4, #0]
 80053b8:	bf18      	it	ne
 80053ba:	2301      	movne	r3, #1
 80053bc:	0692      	lsls	r2, r2, #26
 80053be:	d42b      	bmi.n	8005418 <_printf_common+0xb0>
 80053c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80053c4:	4649      	mov	r1, r9
 80053c6:	4638      	mov	r0, r7
 80053c8:	47c0      	blx	r8
 80053ca:	3001      	adds	r0, #1
 80053cc:	d01e      	beq.n	800540c <_printf_common+0xa4>
 80053ce:	6823      	ldr	r3, [r4, #0]
 80053d0:	68e5      	ldr	r5, [r4, #12]
 80053d2:	6832      	ldr	r2, [r6, #0]
 80053d4:	f003 0306 	and.w	r3, r3, #6
 80053d8:	2b04      	cmp	r3, #4
 80053da:	bf08      	it	eq
 80053dc:	1aad      	subeq	r5, r5, r2
 80053de:	68a3      	ldr	r3, [r4, #8]
 80053e0:	6922      	ldr	r2, [r4, #16]
 80053e2:	bf0c      	ite	eq
 80053e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80053e8:	2500      	movne	r5, #0
 80053ea:	4293      	cmp	r3, r2
 80053ec:	bfc4      	itt	gt
 80053ee:	1a9b      	subgt	r3, r3, r2
 80053f0:	18ed      	addgt	r5, r5, r3
 80053f2:	2600      	movs	r6, #0
 80053f4:	341a      	adds	r4, #26
 80053f6:	42b5      	cmp	r5, r6
 80053f8:	d11a      	bne.n	8005430 <_printf_common+0xc8>
 80053fa:	2000      	movs	r0, #0
 80053fc:	e008      	b.n	8005410 <_printf_common+0xa8>
 80053fe:	2301      	movs	r3, #1
 8005400:	4652      	mov	r2, sl
 8005402:	4649      	mov	r1, r9
 8005404:	4638      	mov	r0, r7
 8005406:	47c0      	blx	r8
 8005408:	3001      	adds	r0, #1
 800540a:	d103      	bne.n	8005414 <_printf_common+0xac>
 800540c:	f04f 30ff 	mov.w	r0, #4294967295
 8005410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005414:	3501      	adds	r5, #1
 8005416:	e7c6      	b.n	80053a6 <_printf_common+0x3e>
 8005418:	18e1      	adds	r1, r4, r3
 800541a:	1c5a      	adds	r2, r3, #1
 800541c:	2030      	movs	r0, #48	; 0x30
 800541e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005422:	4422      	add	r2, r4
 8005424:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005428:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800542c:	3302      	adds	r3, #2
 800542e:	e7c7      	b.n	80053c0 <_printf_common+0x58>
 8005430:	2301      	movs	r3, #1
 8005432:	4622      	mov	r2, r4
 8005434:	4649      	mov	r1, r9
 8005436:	4638      	mov	r0, r7
 8005438:	47c0      	blx	r8
 800543a:	3001      	adds	r0, #1
 800543c:	d0e6      	beq.n	800540c <_printf_common+0xa4>
 800543e:	3601      	adds	r6, #1
 8005440:	e7d9      	b.n	80053f6 <_printf_common+0x8e>
	...

08005444 <_printf_i>:
 8005444:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005448:	7e0f      	ldrb	r7, [r1, #24]
 800544a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800544c:	2f78      	cmp	r7, #120	; 0x78
 800544e:	4691      	mov	r9, r2
 8005450:	4680      	mov	r8, r0
 8005452:	460c      	mov	r4, r1
 8005454:	469a      	mov	sl, r3
 8005456:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800545a:	d807      	bhi.n	800546c <_printf_i+0x28>
 800545c:	2f62      	cmp	r7, #98	; 0x62
 800545e:	d80a      	bhi.n	8005476 <_printf_i+0x32>
 8005460:	2f00      	cmp	r7, #0
 8005462:	f000 80d8 	beq.w	8005616 <_printf_i+0x1d2>
 8005466:	2f58      	cmp	r7, #88	; 0x58
 8005468:	f000 80a3 	beq.w	80055b2 <_printf_i+0x16e>
 800546c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005470:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005474:	e03a      	b.n	80054ec <_printf_i+0xa8>
 8005476:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800547a:	2b15      	cmp	r3, #21
 800547c:	d8f6      	bhi.n	800546c <_printf_i+0x28>
 800547e:	a101      	add	r1, pc, #4	; (adr r1, 8005484 <_printf_i+0x40>)
 8005480:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005484:	080054dd 	.word	0x080054dd
 8005488:	080054f1 	.word	0x080054f1
 800548c:	0800546d 	.word	0x0800546d
 8005490:	0800546d 	.word	0x0800546d
 8005494:	0800546d 	.word	0x0800546d
 8005498:	0800546d 	.word	0x0800546d
 800549c:	080054f1 	.word	0x080054f1
 80054a0:	0800546d 	.word	0x0800546d
 80054a4:	0800546d 	.word	0x0800546d
 80054a8:	0800546d 	.word	0x0800546d
 80054ac:	0800546d 	.word	0x0800546d
 80054b0:	080055fd 	.word	0x080055fd
 80054b4:	08005521 	.word	0x08005521
 80054b8:	080055df 	.word	0x080055df
 80054bc:	0800546d 	.word	0x0800546d
 80054c0:	0800546d 	.word	0x0800546d
 80054c4:	0800561f 	.word	0x0800561f
 80054c8:	0800546d 	.word	0x0800546d
 80054cc:	08005521 	.word	0x08005521
 80054d0:	0800546d 	.word	0x0800546d
 80054d4:	0800546d 	.word	0x0800546d
 80054d8:	080055e7 	.word	0x080055e7
 80054dc:	682b      	ldr	r3, [r5, #0]
 80054de:	1d1a      	adds	r2, r3, #4
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	602a      	str	r2, [r5, #0]
 80054e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80054ec:	2301      	movs	r3, #1
 80054ee:	e0a3      	b.n	8005638 <_printf_i+0x1f4>
 80054f0:	6820      	ldr	r0, [r4, #0]
 80054f2:	6829      	ldr	r1, [r5, #0]
 80054f4:	0606      	lsls	r6, r0, #24
 80054f6:	f101 0304 	add.w	r3, r1, #4
 80054fa:	d50a      	bpl.n	8005512 <_printf_i+0xce>
 80054fc:	680e      	ldr	r6, [r1, #0]
 80054fe:	602b      	str	r3, [r5, #0]
 8005500:	2e00      	cmp	r6, #0
 8005502:	da03      	bge.n	800550c <_printf_i+0xc8>
 8005504:	232d      	movs	r3, #45	; 0x2d
 8005506:	4276      	negs	r6, r6
 8005508:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800550c:	485e      	ldr	r0, [pc, #376]	; (8005688 <_printf_i+0x244>)
 800550e:	230a      	movs	r3, #10
 8005510:	e019      	b.n	8005546 <_printf_i+0x102>
 8005512:	680e      	ldr	r6, [r1, #0]
 8005514:	602b      	str	r3, [r5, #0]
 8005516:	f010 0f40 	tst.w	r0, #64	; 0x40
 800551a:	bf18      	it	ne
 800551c:	b236      	sxthne	r6, r6
 800551e:	e7ef      	b.n	8005500 <_printf_i+0xbc>
 8005520:	682b      	ldr	r3, [r5, #0]
 8005522:	6820      	ldr	r0, [r4, #0]
 8005524:	1d19      	adds	r1, r3, #4
 8005526:	6029      	str	r1, [r5, #0]
 8005528:	0601      	lsls	r1, r0, #24
 800552a:	d501      	bpl.n	8005530 <_printf_i+0xec>
 800552c:	681e      	ldr	r6, [r3, #0]
 800552e:	e002      	b.n	8005536 <_printf_i+0xf2>
 8005530:	0646      	lsls	r6, r0, #25
 8005532:	d5fb      	bpl.n	800552c <_printf_i+0xe8>
 8005534:	881e      	ldrh	r6, [r3, #0]
 8005536:	4854      	ldr	r0, [pc, #336]	; (8005688 <_printf_i+0x244>)
 8005538:	2f6f      	cmp	r7, #111	; 0x6f
 800553a:	bf0c      	ite	eq
 800553c:	2308      	moveq	r3, #8
 800553e:	230a      	movne	r3, #10
 8005540:	2100      	movs	r1, #0
 8005542:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005546:	6865      	ldr	r5, [r4, #4]
 8005548:	60a5      	str	r5, [r4, #8]
 800554a:	2d00      	cmp	r5, #0
 800554c:	bfa2      	ittt	ge
 800554e:	6821      	ldrge	r1, [r4, #0]
 8005550:	f021 0104 	bicge.w	r1, r1, #4
 8005554:	6021      	strge	r1, [r4, #0]
 8005556:	b90e      	cbnz	r6, 800555c <_printf_i+0x118>
 8005558:	2d00      	cmp	r5, #0
 800555a:	d04d      	beq.n	80055f8 <_printf_i+0x1b4>
 800555c:	4615      	mov	r5, r2
 800555e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005562:	fb03 6711 	mls	r7, r3, r1, r6
 8005566:	5dc7      	ldrb	r7, [r0, r7]
 8005568:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800556c:	4637      	mov	r7, r6
 800556e:	42bb      	cmp	r3, r7
 8005570:	460e      	mov	r6, r1
 8005572:	d9f4      	bls.n	800555e <_printf_i+0x11a>
 8005574:	2b08      	cmp	r3, #8
 8005576:	d10b      	bne.n	8005590 <_printf_i+0x14c>
 8005578:	6823      	ldr	r3, [r4, #0]
 800557a:	07de      	lsls	r6, r3, #31
 800557c:	d508      	bpl.n	8005590 <_printf_i+0x14c>
 800557e:	6923      	ldr	r3, [r4, #16]
 8005580:	6861      	ldr	r1, [r4, #4]
 8005582:	4299      	cmp	r1, r3
 8005584:	bfde      	ittt	le
 8005586:	2330      	movle	r3, #48	; 0x30
 8005588:	f805 3c01 	strble.w	r3, [r5, #-1]
 800558c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005590:	1b52      	subs	r2, r2, r5
 8005592:	6122      	str	r2, [r4, #16]
 8005594:	f8cd a000 	str.w	sl, [sp]
 8005598:	464b      	mov	r3, r9
 800559a:	aa03      	add	r2, sp, #12
 800559c:	4621      	mov	r1, r4
 800559e:	4640      	mov	r0, r8
 80055a0:	f7ff fee2 	bl	8005368 <_printf_common>
 80055a4:	3001      	adds	r0, #1
 80055a6:	d14c      	bne.n	8005642 <_printf_i+0x1fe>
 80055a8:	f04f 30ff 	mov.w	r0, #4294967295
 80055ac:	b004      	add	sp, #16
 80055ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055b2:	4835      	ldr	r0, [pc, #212]	; (8005688 <_printf_i+0x244>)
 80055b4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80055b8:	6829      	ldr	r1, [r5, #0]
 80055ba:	6823      	ldr	r3, [r4, #0]
 80055bc:	f851 6b04 	ldr.w	r6, [r1], #4
 80055c0:	6029      	str	r1, [r5, #0]
 80055c2:	061d      	lsls	r5, r3, #24
 80055c4:	d514      	bpl.n	80055f0 <_printf_i+0x1ac>
 80055c6:	07df      	lsls	r7, r3, #31
 80055c8:	bf44      	itt	mi
 80055ca:	f043 0320 	orrmi.w	r3, r3, #32
 80055ce:	6023      	strmi	r3, [r4, #0]
 80055d0:	b91e      	cbnz	r6, 80055da <_printf_i+0x196>
 80055d2:	6823      	ldr	r3, [r4, #0]
 80055d4:	f023 0320 	bic.w	r3, r3, #32
 80055d8:	6023      	str	r3, [r4, #0]
 80055da:	2310      	movs	r3, #16
 80055dc:	e7b0      	b.n	8005540 <_printf_i+0xfc>
 80055de:	6823      	ldr	r3, [r4, #0]
 80055e0:	f043 0320 	orr.w	r3, r3, #32
 80055e4:	6023      	str	r3, [r4, #0]
 80055e6:	2378      	movs	r3, #120	; 0x78
 80055e8:	4828      	ldr	r0, [pc, #160]	; (800568c <_printf_i+0x248>)
 80055ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80055ee:	e7e3      	b.n	80055b8 <_printf_i+0x174>
 80055f0:	0659      	lsls	r1, r3, #25
 80055f2:	bf48      	it	mi
 80055f4:	b2b6      	uxthmi	r6, r6
 80055f6:	e7e6      	b.n	80055c6 <_printf_i+0x182>
 80055f8:	4615      	mov	r5, r2
 80055fa:	e7bb      	b.n	8005574 <_printf_i+0x130>
 80055fc:	682b      	ldr	r3, [r5, #0]
 80055fe:	6826      	ldr	r6, [r4, #0]
 8005600:	6961      	ldr	r1, [r4, #20]
 8005602:	1d18      	adds	r0, r3, #4
 8005604:	6028      	str	r0, [r5, #0]
 8005606:	0635      	lsls	r5, r6, #24
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	d501      	bpl.n	8005610 <_printf_i+0x1cc>
 800560c:	6019      	str	r1, [r3, #0]
 800560e:	e002      	b.n	8005616 <_printf_i+0x1d2>
 8005610:	0670      	lsls	r0, r6, #25
 8005612:	d5fb      	bpl.n	800560c <_printf_i+0x1c8>
 8005614:	8019      	strh	r1, [r3, #0]
 8005616:	2300      	movs	r3, #0
 8005618:	6123      	str	r3, [r4, #16]
 800561a:	4615      	mov	r5, r2
 800561c:	e7ba      	b.n	8005594 <_printf_i+0x150>
 800561e:	682b      	ldr	r3, [r5, #0]
 8005620:	1d1a      	adds	r2, r3, #4
 8005622:	602a      	str	r2, [r5, #0]
 8005624:	681d      	ldr	r5, [r3, #0]
 8005626:	6862      	ldr	r2, [r4, #4]
 8005628:	2100      	movs	r1, #0
 800562a:	4628      	mov	r0, r5
 800562c:	f7fa fde0 	bl	80001f0 <memchr>
 8005630:	b108      	cbz	r0, 8005636 <_printf_i+0x1f2>
 8005632:	1b40      	subs	r0, r0, r5
 8005634:	6060      	str	r0, [r4, #4]
 8005636:	6863      	ldr	r3, [r4, #4]
 8005638:	6123      	str	r3, [r4, #16]
 800563a:	2300      	movs	r3, #0
 800563c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005640:	e7a8      	b.n	8005594 <_printf_i+0x150>
 8005642:	6923      	ldr	r3, [r4, #16]
 8005644:	462a      	mov	r2, r5
 8005646:	4649      	mov	r1, r9
 8005648:	4640      	mov	r0, r8
 800564a:	47d0      	blx	sl
 800564c:	3001      	adds	r0, #1
 800564e:	d0ab      	beq.n	80055a8 <_printf_i+0x164>
 8005650:	6823      	ldr	r3, [r4, #0]
 8005652:	079b      	lsls	r3, r3, #30
 8005654:	d413      	bmi.n	800567e <_printf_i+0x23a>
 8005656:	68e0      	ldr	r0, [r4, #12]
 8005658:	9b03      	ldr	r3, [sp, #12]
 800565a:	4298      	cmp	r0, r3
 800565c:	bfb8      	it	lt
 800565e:	4618      	movlt	r0, r3
 8005660:	e7a4      	b.n	80055ac <_printf_i+0x168>
 8005662:	2301      	movs	r3, #1
 8005664:	4632      	mov	r2, r6
 8005666:	4649      	mov	r1, r9
 8005668:	4640      	mov	r0, r8
 800566a:	47d0      	blx	sl
 800566c:	3001      	adds	r0, #1
 800566e:	d09b      	beq.n	80055a8 <_printf_i+0x164>
 8005670:	3501      	adds	r5, #1
 8005672:	68e3      	ldr	r3, [r4, #12]
 8005674:	9903      	ldr	r1, [sp, #12]
 8005676:	1a5b      	subs	r3, r3, r1
 8005678:	42ab      	cmp	r3, r5
 800567a:	dcf2      	bgt.n	8005662 <_printf_i+0x21e>
 800567c:	e7eb      	b.n	8005656 <_printf_i+0x212>
 800567e:	2500      	movs	r5, #0
 8005680:	f104 0619 	add.w	r6, r4, #25
 8005684:	e7f5      	b.n	8005672 <_printf_i+0x22e>
 8005686:	bf00      	nop
 8005688:	08005c15 	.word	0x08005c15
 800568c:	08005c26 	.word	0x08005c26

08005690 <_sbrk_r>:
 8005690:	b538      	push	{r3, r4, r5, lr}
 8005692:	4d06      	ldr	r5, [pc, #24]	; (80056ac <_sbrk_r+0x1c>)
 8005694:	2300      	movs	r3, #0
 8005696:	4604      	mov	r4, r0
 8005698:	4608      	mov	r0, r1
 800569a:	602b      	str	r3, [r5, #0]
 800569c:	f7fc fb1a 	bl	8001cd4 <_sbrk>
 80056a0:	1c43      	adds	r3, r0, #1
 80056a2:	d102      	bne.n	80056aa <_sbrk_r+0x1a>
 80056a4:	682b      	ldr	r3, [r5, #0]
 80056a6:	b103      	cbz	r3, 80056aa <_sbrk_r+0x1a>
 80056a8:	6023      	str	r3, [r4, #0]
 80056aa:	bd38      	pop	{r3, r4, r5, pc}
 80056ac:	20002eac 	.word	0x20002eac

080056b0 <__sread>:
 80056b0:	b510      	push	{r4, lr}
 80056b2:	460c      	mov	r4, r1
 80056b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056b8:	f000 f8a0 	bl	80057fc <_read_r>
 80056bc:	2800      	cmp	r0, #0
 80056be:	bfab      	itete	ge
 80056c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80056c2:	89a3      	ldrhlt	r3, [r4, #12]
 80056c4:	181b      	addge	r3, r3, r0
 80056c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80056ca:	bfac      	ite	ge
 80056cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80056ce:	81a3      	strhlt	r3, [r4, #12]
 80056d0:	bd10      	pop	{r4, pc}

080056d2 <__swrite>:
 80056d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056d6:	461f      	mov	r7, r3
 80056d8:	898b      	ldrh	r3, [r1, #12]
 80056da:	05db      	lsls	r3, r3, #23
 80056dc:	4605      	mov	r5, r0
 80056de:	460c      	mov	r4, r1
 80056e0:	4616      	mov	r6, r2
 80056e2:	d505      	bpl.n	80056f0 <__swrite+0x1e>
 80056e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056e8:	2302      	movs	r3, #2
 80056ea:	2200      	movs	r2, #0
 80056ec:	f000 f868 	bl	80057c0 <_lseek_r>
 80056f0:	89a3      	ldrh	r3, [r4, #12]
 80056f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80056f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80056fa:	81a3      	strh	r3, [r4, #12]
 80056fc:	4632      	mov	r2, r6
 80056fe:	463b      	mov	r3, r7
 8005700:	4628      	mov	r0, r5
 8005702:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005706:	f000 b817 	b.w	8005738 <_write_r>

0800570a <__sseek>:
 800570a:	b510      	push	{r4, lr}
 800570c:	460c      	mov	r4, r1
 800570e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005712:	f000 f855 	bl	80057c0 <_lseek_r>
 8005716:	1c43      	adds	r3, r0, #1
 8005718:	89a3      	ldrh	r3, [r4, #12]
 800571a:	bf15      	itete	ne
 800571c:	6560      	strne	r0, [r4, #84]	; 0x54
 800571e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005722:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005726:	81a3      	strheq	r3, [r4, #12]
 8005728:	bf18      	it	ne
 800572a:	81a3      	strhne	r3, [r4, #12]
 800572c:	bd10      	pop	{r4, pc}

0800572e <__sclose>:
 800572e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005732:	f000 b813 	b.w	800575c <_close_r>
	...

08005738 <_write_r>:
 8005738:	b538      	push	{r3, r4, r5, lr}
 800573a:	4d07      	ldr	r5, [pc, #28]	; (8005758 <_write_r+0x20>)
 800573c:	4604      	mov	r4, r0
 800573e:	4608      	mov	r0, r1
 8005740:	4611      	mov	r1, r2
 8005742:	2200      	movs	r2, #0
 8005744:	602a      	str	r2, [r5, #0]
 8005746:	461a      	mov	r2, r3
 8005748:	f7fc fa73 	bl	8001c32 <_write>
 800574c:	1c43      	adds	r3, r0, #1
 800574e:	d102      	bne.n	8005756 <_write_r+0x1e>
 8005750:	682b      	ldr	r3, [r5, #0]
 8005752:	b103      	cbz	r3, 8005756 <_write_r+0x1e>
 8005754:	6023      	str	r3, [r4, #0]
 8005756:	bd38      	pop	{r3, r4, r5, pc}
 8005758:	20002eac 	.word	0x20002eac

0800575c <_close_r>:
 800575c:	b538      	push	{r3, r4, r5, lr}
 800575e:	4d06      	ldr	r5, [pc, #24]	; (8005778 <_close_r+0x1c>)
 8005760:	2300      	movs	r3, #0
 8005762:	4604      	mov	r4, r0
 8005764:	4608      	mov	r0, r1
 8005766:	602b      	str	r3, [r5, #0]
 8005768:	f7fc fa7f 	bl	8001c6a <_close>
 800576c:	1c43      	adds	r3, r0, #1
 800576e:	d102      	bne.n	8005776 <_close_r+0x1a>
 8005770:	682b      	ldr	r3, [r5, #0]
 8005772:	b103      	cbz	r3, 8005776 <_close_r+0x1a>
 8005774:	6023      	str	r3, [r4, #0]
 8005776:	bd38      	pop	{r3, r4, r5, pc}
 8005778:	20002eac 	.word	0x20002eac

0800577c <_fstat_r>:
 800577c:	b538      	push	{r3, r4, r5, lr}
 800577e:	4d07      	ldr	r5, [pc, #28]	; (800579c <_fstat_r+0x20>)
 8005780:	2300      	movs	r3, #0
 8005782:	4604      	mov	r4, r0
 8005784:	4608      	mov	r0, r1
 8005786:	4611      	mov	r1, r2
 8005788:	602b      	str	r3, [r5, #0]
 800578a:	f7fc fa7a 	bl	8001c82 <_fstat>
 800578e:	1c43      	adds	r3, r0, #1
 8005790:	d102      	bne.n	8005798 <_fstat_r+0x1c>
 8005792:	682b      	ldr	r3, [r5, #0]
 8005794:	b103      	cbz	r3, 8005798 <_fstat_r+0x1c>
 8005796:	6023      	str	r3, [r4, #0]
 8005798:	bd38      	pop	{r3, r4, r5, pc}
 800579a:	bf00      	nop
 800579c:	20002eac 	.word	0x20002eac

080057a0 <_isatty_r>:
 80057a0:	b538      	push	{r3, r4, r5, lr}
 80057a2:	4d06      	ldr	r5, [pc, #24]	; (80057bc <_isatty_r+0x1c>)
 80057a4:	2300      	movs	r3, #0
 80057a6:	4604      	mov	r4, r0
 80057a8:	4608      	mov	r0, r1
 80057aa:	602b      	str	r3, [r5, #0]
 80057ac:	f7fc fa79 	bl	8001ca2 <_isatty>
 80057b0:	1c43      	adds	r3, r0, #1
 80057b2:	d102      	bne.n	80057ba <_isatty_r+0x1a>
 80057b4:	682b      	ldr	r3, [r5, #0]
 80057b6:	b103      	cbz	r3, 80057ba <_isatty_r+0x1a>
 80057b8:	6023      	str	r3, [r4, #0]
 80057ba:	bd38      	pop	{r3, r4, r5, pc}
 80057bc:	20002eac 	.word	0x20002eac

080057c0 <_lseek_r>:
 80057c0:	b538      	push	{r3, r4, r5, lr}
 80057c2:	4d07      	ldr	r5, [pc, #28]	; (80057e0 <_lseek_r+0x20>)
 80057c4:	4604      	mov	r4, r0
 80057c6:	4608      	mov	r0, r1
 80057c8:	4611      	mov	r1, r2
 80057ca:	2200      	movs	r2, #0
 80057cc:	602a      	str	r2, [r5, #0]
 80057ce:	461a      	mov	r2, r3
 80057d0:	f7fc fa72 	bl	8001cb8 <_lseek>
 80057d4:	1c43      	adds	r3, r0, #1
 80057d6:	d102      	bne.n	80057de <_lseek_r+0x1e>
 80057d8:	682b      	ldr	r3, [r5, #0]
 80057da:	b103      	cbz	r3, 80057de <_lseek_r+0x1e>
 80057dc:	6023      	str	r3, [r4, #0]
 80057de:	bd38      	pop	{r3, r4, r5, pc}
 80057e0:	20002eac 	.word	0x20002eac

080057e4 <__malloc_lock>:
 80057e4:	4801      	ldr	r0, [pc, #4]	; (80057ec <__malloc_lock+0x8>)
 80057e6:	f7ff bb1d 	b.w	8004e24 <__retarget_lock_acquire_recursive>
 80057ea:	bf00      	nop
 80057ec:	20002ea0 	.word	0x20002ea0

080057f0 <__malloc_unlock>:
 80057f0:	4801      	ldr	r0, [pc, #4]	; (80057f8 <__malloc_unlock+0x8>)
 80057f2:	f7ff bb18 	b.w	8004e26 <__retarget_lock_release_recursive>
 80057f6:	bf00      	nop
 80057f8:	20002ea0 	.word	0x20002ea0

080057fc <_read_r>:
 80057fc:	b538      	push	{r3, r4, r5, lr}
 80057fe:	4d07      	ldr	r5, [pc, #28]	; (800581c <_read_r+0x20>)
 8005800:	4604      	mov	r4, r0
 8005802:	4608      	mov	r0, r1
 8005804:	4611      	mov	r1, r2
 8005806:	2200      	movs	r2, #0
 8005808:	602a      	str	r2, [r5, #0]
 800580a:	461a      	mov	r2, r3
 800580c:	f7fc f9f4 	bl	8001bf8 <_read>
 8005810:	1c43      	adds	r3, r0, #1
 8005812:	d102      	bne.n	800581a <_read_r+0x1e>
 8005814:	682b      	ldr	r3, [r5, #0]
 8005816:	b103      	cbz	r3, 800581a <_read_r+0x1e>
 8005818:	6023      	str	r3, [r4, #0]
 800581a:	bd38      	pop	{r3, r4, r5, pc}
 800581c:	20002eac 	.word	0x20002eac

08005820 <_init>:
 8005820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005822:	bf00      	nop
 8005824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005826:	bc08      	pop	{r3}
 8005828:	469e      	mov	lr, r3
 800582a:	4770      	bx	lr

0800582c <_fini>:
 800582c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800582e:	bf00      	nop
 8005830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005832:	bc08      	pop	{r3}
 8005834:	469e      	mov	lr, r3
 8005836:	4770      	bx	lr
