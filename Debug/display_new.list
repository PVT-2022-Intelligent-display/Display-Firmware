
display_new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009908  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d84  08009a98  08009a98  00019a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a81c  0800a81c  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800a81c  0800a81c  0001a81c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a824  0800a824  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a824  0800a824  0001a824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a828  0800a828  0001a828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800a82c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005fc4  20000088  0800a8b4  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000604c  0800a8b4  0002604c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f679  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bb0  00000000  00000000  0003f731  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015b8  00000000  00000000  000432e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014c8  00000000  00000000  000448a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000252fb  00000000  00000000  00045d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b2f3  00000000  00000000  0006b063  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6347  00000000  00000000  00086356  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015c69d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065c8  00000000  00000000  0015c6f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009a80 	.word	0x08009a80

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	08009a80 	.word	0x08009a80

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	; 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__aeabi_d2uiz>:
 800085c:	004a      	lsls	r2, r1, #1
 800085e:	d211      	bcs.n	8000884 <__aeabi_d2uiz+0x28>
 8000860:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000864:	d211      	bcs.n	800088a <__aeabi_d2uiz+0x2e>
 8000866:	d50d      	bpl.n	8000884 <__aeabi_d2uiz+0x28>
 8000868:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800086c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000870:	d40e      	bmi.n	8000890 <__aeabi_d2uiz+0x34>
 8000872:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000876:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800087a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800087e:	fa23 f002 	lsr.w	r0, r3, r2
 8000882:	4770      	bx	lr
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	4770      	bx	lr
 800088a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800088e:	d102      	bne.n	8000896 <__aeabi_d2uiz+0x3a>
 8000890:	f04f 30ff 	mov.w	r0, #4294967295
 8000894:	4770      	bx	lr
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	4770      	bx	lr

0800089c <__aeabi_uldivmod>:
 800089c:	b953      	cbnz	r3, 80008b4 <__aeabi_uldivmod+0x18>
 800089e:	b94a      	cbnz	r2, 80008b4 <__aeabi_uldivmod+0x18>
 80008a0:	2900      	cmp	r1, #0
 80008a2:	bf08      	it	eq
 80008a4:	2800      	cmpeq	r0, #0
 80008a6:	bf1c      	itt	ne
 80008a8:	f04f 31ff 	movne.w	r1, #4294967295
 80008ac:	f04f 30ff 	movne.w	r0, #4294967295
 80008b0:	f000 b96e 	b.w	8000b90 <__aeabi_idiv0>
 80008b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008bc:	f000 f806 	bl	80008cc <__udivmoddi4>
 80008c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008c8:	b004      	add	sp, #16
 80008ca:	4770      	bx	lr

080008cc <__udivmoddi4>:
 80008cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008d0:	9d08      	ldr	r5, [sp, #32]
 80008d2:	4604      	mov	r4, r0
 80008d4:	468c      	mov	ip, r1
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	f040 8083 	bne.w	80009e2 <__udivmoddi4+0x116>
 80008dc:	428a      	cmp	r2, r1
 80008de:	4617      	mov	r7, r2
 80008e0:	d947      	bls.n	8000972 <__udivmoddi4+0xa6>
 80008e2:	fab2 f282 	clz	r2, r2
 80008e6:	b142      	cbz	r2, 80008fa <__udivmoddi4+0x2e>
 80008e8:	f1c2 0020 	rsb	r0, r2, #32
 80008ec:	fa24 f000 	lsr.w	r0, r4, r0
 80008f0:	4091      	lsls	r1, r2
 80008f2:	4097      	lsls	r7, r2
 80008f4:	ea40 0c01 	orr.w	ip, r0, r1
 80008f8:	4094      	lsls	r4, r2
 80008fa:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80008fe:	0c23      	lsrs	r3, r4, #16
 8000900:	fbbc f6f8 	udiv	r6, ip, r8
 8000904:	fa1f fe87 	uxth.w	lr, r7
 8000908:	fb08 c116 	mls	r1, r8, r6, ip
 800090c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000910:	fb06 f10e 	mul.w	r1, r6, lr
 8000914:	4299      	cmp	r1, r3
 8000916:	d909      	bls.n	800092c <__udivmoddi4+0x60>
 8000918:	18fb      	adds	r3, r7, r3
 800091a:	f106 30ff 	add.w	r0, r6, #4294967295
 800091e:	f080 8119 	bcs.w	8000b54 <__udivmoddi4+0x288>
 8000922:	4299      	cmp	r1, r3
 8000924:	f240 8116 	bls.w	8000b54 <__udivmoddi4+0x288>
 8000928:	3e02      	subs	r6, #2
 800092a:	443b      	add	r3, r7
 800092c:	1a5b      	subs	r3, r3, r1
 800092e:	b2a4      	uxth	r4, r4
 8000930:	fbb3 f0f8 	udiv	r0, r3, r8
 8000934:	fb08 3310 	mls	r3, r8, r0, r3
 8000938:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800093c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000940:	45a6      	cmp	lr, r4
 8000942:	d909      	bls.n	8000958 <__udivmoddi4+0x8c>
 8000944:	193c      	adds	r4, r7, r4
 8000946:	f100 33ff 	add.w	r3, r0, #4294967295
 800094a:	f080 8105 	bcs.w	8000b58 <__udivmoddi4+0x28c>
 800094e:	45a6      	cmp	lr, r4
 8000950:	f240 8102 	bls.w	8000b58 <__udivmoddi4+0x28c>
 8000954:	3802      	subs	r0, #2
 8000956:	443c      	add	r4, r7
 8000958:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800095c:	eba4 040e 	sub.w	r4, r4, lr
 8000960:	2600      	movs	r6, #0
 8000962:	b11d      	cbz	r5, 800096c <__udivmoddi4+0xa0>
 8000964:	40d4      	lsrs	r4, r2
 8000966:	2300      	movs	r3, #0
 8000968:	e9c5 4300 	strd	r4, r3, [r5]
 800096c:	4631      	mov	r1, r6
 800096e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000972:	b902      	cbnz	r2, 8000976 <__udivmoddi4+0xaa>
 8000974:	deff      	udf	#255	; 0xff
 8000976:	fab2 f282 	clz	r2, r2
 800097a:	2a00      	cmp	r2, #0
 800097c:	d150      	bne.n	8000a20 <__udivmoddi4+0x154>
 800097e:	1bcb      	subs	r3, r1, r7
 8000980:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000984:	fa1f f887 	uxth.w	r8, r7
 8000988:	2601      	movs	r6, #1
 800098a:	fbb3 fcfe 	udiv	ip, r3, lr
 800098e:	0c21      	lsrs	r1, r4, #16
 8000990:	fb0e 331c 	mls	r3, lr, ip, r3
 8000994:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000998:	fb08 f30c 	mul.w	r3, r8, ip
 800099c:	428b      	cmp	r3, r1
 800099e:	d907      	bls.n	80009b0 <__udivmoddi4+0xe4>
 80009a0:	1879      	adds	r1, r7, r1
 80009a2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80009a6:	d202      	bcs.n	80009ae <__udivmoddi4+0xe2>
 80009a8:	428b      	cmp	r3, r1
 80009aa:	f200 80e9 	bhi.w	8000b80 <__udivmoddi4+0x2b4>
 80009ae:	4684      	mov	ip, r0
 80009b0:	1ac9      	subs	r1, r1, r3
 80009b2:	b2a3      	uxth	r3, r4
 80009b4:	fbb1 f0fe 	udiv	r0, r1, lr
 80009b8:	fb0e 1110 	mls	r1, lr, r0, r1
 80009bc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80009c0:	fb08 f800 	mul.w	r8, r8, r0
 80009c4:	45a0      	cmp	r8, r4
 80009c6:	d907      	bls.n	80009d8 <__udivmoddi4+0x10c>
 80009c8:	193c      	adds	r4, r7, r4
 80009ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80009ce:	d202      	bcs.n	80009d6 <__udivmoddi4+0x10a>
 80009d0:	45a0      	cmp	r8, r4
 80009d2:	f200 80d9 	bhi.w	8000b88 <__udivmoddi4+0x2bc>
 80009d6:	4618      	mov	r0, r3
 80009d8:	eba4 0408 	sub.w	r4, r4, r8
 80009dc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80009e0:	e7bf      	b.n	8000962 <__udivmoddi4+0x96>
 80009e2:	428b      	cmp	r3, r1
 80009e4:	d909      	bls.n	80009fa <__udivmoddi4+0x12e>
 80009e6:	2d00      	cmp	r5, #0
 80009e8:	f000 80b1 	beq.w	8000b4e <__udivmoddi4+0x282>
 80009ec:	2600      	movs	r6, #0
 80009ee:	e9c5 0100 	strd	r0, r1, [r5]
 80009f2:	4630      	mov	r0, r6
 80009f4:	4631      	mov	r1, r6
 80009f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009fa:	fab3 f683 	clz	r6, r3
 80009fe:	2e00      	cmp	r6, #0
 8000a00:	d14a      	bne.n	8000a98 <__udivmoddi4+0x1cc>
 8000a02:	428b      	cmp	r3, r1
 8000a04:	d302      	bcc.n	8000a0c <__udivmoddi4+0x140>
 8000a06:	4282      	cmp	r2, r0
 8000a08:	f200 80b8 	bhi.w	8000b7c <__udivmoddi4+0x2b0>
 8000a0c:	1a84      	subs	r4, r0, r2
 8000a0e:	eb61 0103 	sbc.w	r1, r1, r3
 8000a12:	2001      	movs	r0, #1
 8000a14:	468c      	mov	ip, r1
 8000a16:	2d00      	cmp	r5, #0
 8000a18:	d0a8      	beq.n	800096c <__udivmoddi4+0xa0>
 8000a1a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000a1e:	e7a5      	b.n	800096c <__udivmoddi4+0xa0>
 8000a20:	f1c2 0320 	rsb	r3, r2, #32
 8000a24:	fa20 f603 	lsr.w	r6, r0, r3
 8000a28:	4097      	lsls	r7, r2
 8000a2a:	fa01 f002 	lsl.w	r0, r1, r2
 8000a2e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a32:	40d9      	lsrs	r1, r3
 8000a34:	4330      	orrs	r0, r6
 8000a36:	0c03      	lsrs	r3, r0, #16
 8000a38:	fbb1 f6fe 	udiv	r6, r1, lr
 8000a3c:	fa1f f887 	uxth.w	r8, r7
 8000a40:	fb0e 1116 	mls	r1, lr, r6, r1
 8000a44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a48:	fb06 f108 	mul.w	r1, r6, r8
 8000a4c:	4299      	cmp	r1, r3
 8000a4e:	fa04 f402 	lsl.w	r4, r4, r2
 8000a52:	d909      	bls.n	8000a68 <__udivmoddi4+0x19c>
 8000a54:	18fb      	adds	r3, r7, r3
 8000a56:	f106 3cff 	add.w	ip, r6, #4294967295
 8000a5a:	f080 808d 	bcs.w	8000b78 <__udivmoddi4+0x2ac>
 8000a5e:	4299      	cmp	r1, r3
 8000a60:	f240 808a 	bls.w	8000b78 <__udivmoddi4+0x2ac>
 8000a64:	3e02      	subs	r6, #2
 8000a66:	443b      	add	r3, r7
 8000a68:	1a5b      	subs	r3, r3, r1
 8000a6a:	b281      	uxth	r1, r0
 8000a6c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a70:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a78:	fb00 f308 	mul.w	r3, r0, r8
 8000a7c:	428b      	cmp	r3, r1
 8000a7e:	d907      	bls.n	8000a90 <__udivmoddi4+0x1c4>
 8000a80:	1879      	adds	r1, r7, r1
 8000a82:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a86:	d273      	bcs.n	8000b70 <__udivmoddi4+0x2a4>
 8000a88:	428b      	cmp	r3, r1
 8000a8a:	d971      	bls.n	8000b70 <__udivmoddi4+0x2a4>
 8000a8c:	3802      	subs	r0, #2
 8000a8e:	4439      	add	r1, r7
 8000a90:	1acb      	subs	r3, r1, r3
 8000a92:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a96:	e778      	b.n	800098a <__udivmoddi4+0xbe>
 8000a98:	f1c6 0c20 	rsb	ip, r6, #32
 8000a9c:	fa03 f406 	lsl.w	r4, r3, r6
 8000aa0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000aa4:	431c      	orrs	r4, r3
 8000aa6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000aaa:	fa01 f306 	lsl.w	r3, r1, r6
 8000aae:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000ab2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ab6:	431f      	orrs	r7, r3
 8000ab8:	0c3b      	lsrs	r3, r7, #16
 8000aba:	fbb1 f9fe 	udiv	r9, r1, lr
 8000abe:	fa1f f884 	uxth.w	r8, r4
 8000ac2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ac6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000aca:	fb09 fa08 	mul.w	sl, r9, r8
 8000ace:	458a      	cmp	sl, r1
 8000ad0:	fa02 f206 	lsl.w	r2, r2, r6
 8000ad4:	fa00 f306 	lsl.w	r3, r0, r6
 8000ad8:	d908      	bls.n	8000aec <__udivmoddi4+0x220>
 8000ada:	1861      	adds	r1, r4, r1
 8000adc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ae0:	d248      	bcs.n	8000b74 <__udivmoddi4+0x2a8>
 8000ae2:	458a      	cmp	sl, r1
 8000ae4:	d946      	bls.n	8000b74 <__udivmoddi4+0x2a8>
 8000ae6:	f1a9 0902 	sub.w	r9, r9, #2
 8000aea:	4421      	add	r1, r4
 8000aec:	eba1 010a 	sub.w	r1, r1, sl
 8000af0:	b2bf      	uxth	r7, r7
 8000af2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000af6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000afa:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000afe:	fb00 f808 	mul.w	r8, r0, r8
 8000b02:	45b8      	cmp	r8, r7
 8000b04:	d907      	bls.n	8000b16 <__udivmoddi4+0x24a>
 8000b06:	19e7      	adds	r7, r4, r7
 8000b08:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b0c:	d22e      	bcs.n	8000b6c <__udivmoddi4+0x2a0>
 8000b0e:	45b8      	cmp	r8, r7
 8000b10:	d92c      	bls.n	8000b6c <__udivmoddi4+0x2a0>
 8000b12:	3802      	subs	r0, #2
 8000b14:	4427      	add	r7, r4
 8000b16:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000b1a:	eba7 0708 	sub.w	r7, r7, r8
 8000b1e:	fba0 8902 	umull	r8, r9, r0, r2
 8000b22:	454f      	cmp	r7, r9
 8000b24:	46c6      	mov	lr, r8
 8000b26:	4649      	mov	r1, r9
 8000b28:	d31a      	bcc.n	8000b60 <__udivmoddi4+0x294>
 8000b2a:	d017      	beq.n	8000b5c <__udivmoddi4+0x290>
 8000b2c:	b15d      	cbz	r5, 8000b46 <__udivmoddi4+0x27a>
 8000b2e:	ebb3 020e 	subs.w	r2, r3, lr
 8000b32:	eb67 0701 	sbc.w	r7, r7, r1
 8000b36:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000b3a:	40f2      	lsrs	r2, r6
 8000b3c:	ea4c 0202 	orr.w	r2, ip, r2
 8000b40:	40f7      	lsrs	r7, r6
 8000b42:	e9c5 2700 	strd	r2, r7, [r5]
 8000b46:	2600      	movs	r6, #0
 8000b48:	4631      	mov	r1, r6
 8000b4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b4e:	462e      	mov	r6, r5
 8000b50:	4628      	mov	r0, r5
 8000b52:	e70b      	b.n	800096c <__udivmoddi4+0xa0>
 8000b54:	4606      	mov	r6, r0
 8000b56:	e6e9      	b.n	800092c <__udivmoddi4+0x60>
 8000b58:	4618      	mov	r0, r3
 8000b5a:	e6fd      	b.n	8000958 <__udivmoddi4+0x8c>
 8000b5c:	4543      	cmp	r3, r8
 8000b5e:	d2e5      	bcs.n	8000b2c <__udivmoddi4+0x260>
 8000b60:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b64:	eb69 0104 	sbc.w	r1, r9, r4
 8000b68:	3801      	subs	r0, #1
 8000b6a:	e7df      	b.n	8000b2c <__udivmoddi4+0x260>
 8000b6c:	4608      	mov	r0, r1
 8000b6e:	e7d2      	b.n	8000b16 <__udivmoddi4+0x24a>
 8000b70:	4660      	mov	r0, ip
 8000b72:	e78d      	b.n	8000a90 <__udivmoddi4+0x1c4>
 8000b74:	4681      	mov	r9, r0
 8000b76:	e7b9      	b.n	8000aec <__udivmoddi4+0x220>
 8000b78:	4666      	mov	r6, ip
 8000b7a:	e775      	b.n	8000a68 <__udivmoddi4+0x19c>
 8000b7c:	4630      	mov	r0, r6
 8000b7e:	e74a      	b.n	8000a16 <__udivmoddi4+0x14a>
 8000b80:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b84:	4439      	add	r1, r7
 8000b86:	e713      	b.n	80009b0 <__udivmoddi4+0xe4>
 8000b88:	3802      	subs	r0, #2
 8000b8a:	443c      	add	r4, r7
 8000b8c:	e724      	b.n	80009d8 <__udivmoddi4+0x10c>
 8000b8e:	bf00      	nop

08000b90 <__aeabi_idiv0>:
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop

08000b94 <Init_LCD>:
static void iopins_ini();
static void ili9488_showArray_wo_coordinates(uint16_t *data, uint32_t count);
/*----------------------------------------------Public  functions-----------------------------------------------------*/
//initialize LCD
void Init_LCD()
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
	interrupt_initialize_priorities();
 8000b98:	f000 f982 	bl	8000ea0 <interrupt_initialize_priorities>
	iopins_ini();
 8000b9c:	f000 f988 	bl	8000eb0 <iopins_ini>
	initialize_ili9488();
 8000ba0:	f000 fb8e 	bl	80012c0 <initialize_ili9488>
	LCD_backlight_set(100);
 8000ba4:	2064      	movs	r0, #100	; 0x64
 8000ba6:	f000 f8d1 	bl	8000d4c <LCD_backlight_set>
}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
	...

08000bb0 <LCD_fillRect>:
//Draw filled rectangle
void LCD_fillRect(uint16_t x1, uint16_t y1, uint16_t w, uint16_t h, uint16_t color)
{
 8000bb0:	b590      	push	{r4, r7, lr}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4604      	mov	r4, r0
 8000bb8:	4608      	mov	r0, r1
 8000bba:	4611      	mov	r1, r2
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	4623      	mov	r3, r4
 8000bc0:	80fb      	strh	r3, [r7, #6]
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	80bb      	strh	r3, [r7, #4]
 8000bc6:	460b      	mov	r3, r1
 8000bc8:	807b      	strh	r3, [r7, #2]
 8000bca:	4613      	mov	r3, r2
 8000bcc:	803b      	strh	r3, [r7, #0]
	uint32_t count = w * h;
 8000bce:	887b      	ldrh	r3, [r7, #2]
 8000bd0:	883a      	ldrh	r2, [r7, #0]
 8000bd2:	fb02 f303 	mul.w	r3, r2, r3
 8000bd6:	60bb      	str	r3, [r7, #8]
	LCD_set_coordinates(x1, y1, (uint16_t) (x1 + w - 1), (uint16_t) (y1 + h - 1));
 8000bd8:	88fa      	ldrh	r2, [r7, #6]
 8000bda:	887b      	ldrh	r3, [r7, #2]
 8000bdc:	4413      	add	r3, r2
 8000bde:	b29b      	uxth	r3, r3
 8000be0:	3b01      	subs	r3, #1
 8000be2:	b29c      	uxth	r4, r3
 8000be4:	88ba      	ldrh	r2, [r7, #4]
 8000be6:	883b      	ldrh	r3, [r7, #0]
 8000be8:	4413      	add	r3, r2
 8000bea:	b29b      	uxth	r3, r3
 8000bec:	3b01      	subs	r3, #1
 8000bee:	b29b      	uxth	r3, r3
 8000bf0:	88b9      	ldrh	r1, [r7, #4]
 8000bf2:	88f8      	ldrh	r0, [r7, #6]
 8000bf4:	4622      	mov	r2, r4
 8000bf6:	f000 f82f 	bl	8000c58 <LCD_set_coordinates>

	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_RESET);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c00:	4814      	ldr	r0, [pc, #80]	; (8000c54 <LCD_fillRect+0xa4>)
 8000c02:	f004 fa8b 	bl	800511c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_RESET);
 8000c06:	2200      	movs	r2, #0
 8000c08:	2180      	movs	r1, #128	; 0x80
 8000c0a:	4812      	ldr	r0, [pc, #72]	; (8000c54 <LCD_fillRect+0xa4>)
 8000c0c:	f004 fa86 	bl	800511c <HAL_GPIO_WritePin>
	TFT_REG=0x002C;
 8000c10:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000c14:	222c      	movs	r2, #44	; 0x2c
 8000c16:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_SET);
 8000c18:	2201      	movs	r2, #1
 8000c1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c1e:	480d      	ldr	r0, [pc, #52]	; (8000c54 <LCD_fillRect+0xa4>)
 8000c20:	f004 fa7c 	bl	800511c <HAL_GPIO_WritePin>

	for(unsigned int i=0; i<count; i++)
 8000c24:	2300      	movs	r3, #0
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	e006      	b.n	8000c38 <LCD_fillRect+0x88>
	{
		TFT_REG=color;
 8000c2a:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000c2e:	8c3b      	ldrh	r3, [r7, #32]
 8000c30:	8013      	strh	r3, [r2, #0]
	for(unsigned int i=0; i<count; i++)
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	3301      	adds	r3, #1
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	68fa      	ldr	r2, [r7, #12]
 8000c3a:	68bb      	ldr	r3, [r7, #8]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	d3f4      	bcc.n	8000c2a <LCD_fillRect+0x7a>
	}

	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_SET);
 8000c40:	2201      	movs	r2, #1
 8000c42:	2180      	movs	r1, #128	; 0x80
 8000c44:	4803      	ldr	r0, [pc, #12]	; (8000c54 <LCD_fillRect+0xa4>)
 8000c46:	f004 fa69 	bl	800511c <HAL_GPIO_WritePin>
}
 8000c4a:	bf00      	nop
 8000c4c:	3714      	adds	r7, #20
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd90      	pop	{r4, r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40020c00 	.word	0x40020c00

08000c58 <LCD_set_coordinates>:
//Set coordinates for LCD IC
void LCD_set_coordinates(uint16_t x1,uint16_t y1, uint16_t x2, uint16_t y2)
{
 8000c58:	b590      	push	{r4, r7, lr}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4604      	mov	r4, r0
 8000c60:	4608      	mov	r0, r1
 8000c62:	4611      	mov	r1, r2
 8000c64:	461a      	mov	r2, r3
 8000c66:	4623      	mov	r3, r4
 8000c68:	80fb      	strh	r3, [r7, #6]
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	80bb      	strh	r3, [r7, #4]
 8000c6e:	460b      	mov	r3, r1
 8000c70:	807b      	strh	r3, [r7, #2]
 8000c72:	4613      	mov	r3, r2
 8000c74:	803b      	strh	r3, [r7, #0]
	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_RESET);
 8000c76:	2200      	movs	r2, #0
 8000c78:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c7c:	4832      	ldr	r0, [pc, #200]	; (8000d48 <LCD_set_coordinates+0xf0>)
 8000c7e:	f004 fa4d 	bl	800511c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_RESET);
 8000c82:	2200      	movs	r2, #0
 8000c84:	2180      	movs	r1, #128	; 0x80
 8000c86:	4830      	ldr	r0, [pc, #192]	; (8000d48 <LCD_set_coordinates+0xf0>)
 8000c88:	f004 fa48 	bl	800511c <HAL_GPIO_WritePin>
	TFT_REG=0x002A;
 8000c8c:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000c90:	222a      	movs	r2, #42	; 0x2a
 8000c92:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_SET);
 8000c94:	2201      	movs	r2, #1
 8000c96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c9a:	482b      	ldr	r0, [pc, #172]	; (8000d48 <LCD_set_coordinates+0xf0>)
 8000c9c:	f004 fa3e 	bl	800511c <HAL_GPIO_WritePin>
	TFT_REG=x1>>8;
 8000ca0:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000ca4:	88fb      	ldrh	r3, [r7, #6]
 8000ca6:	0a1b      	lsrs	r3, r3, #8
 8000ca8:	b29b      	uxth	r3, r3
 8000caa:	8013      	strh	r3, [r2, #0]
	TFT_REG=x1&0xFF;
 8000cac:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000cb0:	88fa      	ldrh	r2, [r7, #6]
 8000cb2:	b2d2      	uxtb	r2, r2
 8000cb4:	b292      	uxth	r2, r2
 8000cb6:	801a      	strh	r2, [r3, #0]
	TFT_REG=x2>>8;
 8000cb8:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000cbc:	887b      	ldrh	r3, [r7, #2]
 8000cbe:	0a1b      	lsrs	r3, r3, #8
 8000cc0:	b29b      	uxth	r3, r3
 8000cc2:	8013      	strh	r3, [r2, #0]
	TFT_REG=x2&0xFF;
 8000cc4:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000cc8:	887a      	ldrh	r2, [r7, #2]
 8000cca:	b2d2      	uxtb	r2, r2
 8000ccc:	b292      	uxth	r2, r2
 8000cce:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_SET);
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	2180      	movs	r1, #128	; 0x80
 8000cd4:	481c      	ldr	r0, [pc, #112]	; (8000d48 <LCD_set_coordinates+0xf0>)
 8000cd6:	f004 fa21 	bl	800511c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_RESET);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ce0:	4819      	ldr	r0, [pc, #100]	; (8000d48 <LCD_set_coordinates+0xf0>)
 8000ce2:	f004 fa1b 	bl	800511c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_RESET);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2180      	movs	r1, #128	; 0x80
 8000cea:	4817      	ldr	r0, [pc, #92]	; (8000d48 <LCD_set_coordinates+0xf0>)
 8000cec:	f004 fa16 	bl	800511c <HAL_GPIO_WritePin>
	TFT_REG=0x002B;
 8000cf0:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000cf4:	222b      	movs	r2, #43	; 0x2b
 8000cf6:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_SET);
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cfe:	4812      	ldr	r0, [pc, #72]	; (8000d48 <LCD_set_coordinates+0xf0>)
 8000d00:	f004 fa0c 	bl	800511c <HAL_GPIO_WritePin>
	TFT_REG=y1>>8;
 8000d04:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000d08:	88bb      	ldrh	r3, [r7, #4]
 8000d0a:	0a1b      	lsrs	r3, r3, #8
 8000d0c:	b29b      	uxth	r3, r3
 8000d0e:	8013      	strh	r3, [r2, #0]
	TFT_REG=y1&0xFF;
 8000d10:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000d14:	88ba      	ldrh	r2, [r7, #4]
 8000d16:	b2d2      	uxtb	r2, r2
 8000d18:	b292      	uxth	r2, r2
 8000d1a:	801a      	strh	r2, [r3, #0]
	TFT_REG=y2>>8;
 8000d1c:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000d20:	883b      	ldrh	r3, [r7, #0]
 8000d22:	0a1b      	lsrs	r3, r3, #8
 8000d24:	b29b      	uxth	r3, r3
 8000d26:	8013      	strh	r3, [r2, #0]
	TFT_REG=y2&0xFF;
 8000d28:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000d2c:	883a      	ldrh	r2, [r7, #0]
 8000d2e:	b2d2      	uxtb	r2, r2
 8000d30:	b292      	uxth	r2, r2
 8000d32:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_SET);
 8000d34:	2201      	movs	r2, #1
 8000d36:	2180      	movs	r1, #128	; 0x80
 8000d38:	4803      	ldr	r0, [pc, #12]	; (8000d48 <LCD_set_coordinates+0xf0>)
 8000d3a:	f004 f9ef 	bl	800511c <HAL_GPIO_WritePin>
}
 8000d3e:	bf00      	nop
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd90      	pop	{r4, r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40020c00 	.word	0x40020c00

08000d4c <LCD_backlight_set>:
//Set PWM duty cycle for LCD back light
void LCD_backlight_set(uint16_t pwm)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b0a6      	sub	sp, #152	; 0x98
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	80fb      	strh	r3, [r7, #6]

	if(pwm>=100)
 8000d56:	88fb      	ldrh	r3, [r7, #6]
 8000d58:	2b63      	cmp	r3, #99	; 0x63
 8000d5a:	d902      	bls.n	8000d62 <LCD_backlight_set+0x16>
	{
		pwm=100;
 8000d5c:	2364      	movs	r3, #100	; 0x64
 8000d5e:	80fb      	strh	r3, [r7, #6]
 8000d60:	e004      	b.n	8000d6c <LCD_backlight_set+0x20>
	}else if(pwm <= 0)
 8000d62:	88fb      	ldrh	r3, [r7, #6]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d101      	bne.n	8000d6c <LCD_backlight_set+0x20>
	{
		pwm = 0;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	80fb      	strh	r3, [r7, #6]
	}

	pwm=(unsigned int)((MAX_PWM_PULSE * pwm)/100);
 8000d6c:	88fa      	ldrh	r2, [r7, #6]
 8000d6e:	4613      	mov	r3, r2
 8000d70:	041b      	lsls	r3, r3, #16
 8000d72:	1a9b      	subs	r3, r3, r2
 8000d74:	4a48      	ldr	r2, [pc, #288]	; (8000e98 <LCD_backlight_set+0x14c>)
 8000d76:	fb82 1203 	smull	r1, r2, r2, r3
 8000d7a:	1152      	asrs	r2, r2, #5
 8000d7c:	17db      	asrs	r3, r3, #31
 8000d7e:	1ad3      	subs	r3, r2, r3
 8000d80:	80fb      	strh	r3, [r7, #6]

	/* Common settings */
      TIM_HandleTypeDef htim1;
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d82:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000d86:	2200      	movs	r2, #0
 8000d88:	601a      	str	r2, [r3, #0]
 8000d8a:	605a      	str	r2, [r3, #4]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]
 8000d9a:	611a      	str	r2, [r3, #16]
 8000d9c:	615a      	str	r2, [r3, #20]
 8000d9e:	619a      	str	r2, [r3, #24]
	  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000da0:	f107 030c 	add.w	r3, r7, #12
 8000da4:	2220      	movs	r2, #32
 8000da6:	2100      	movs	r1, #0
 8000da8:	4618      	mov	r0, r3
 8000daa:	f007 fe75 	bl	8008a98 <memset>

	  htim1.Instance = TIM1;
 8000dae:	4b3b      	ldr	r3, [pc, #236]	; (8000e9c <LCD_backlight_set+0x150>)
 8000db0:	653b      	str	r3, [r7, #80]	; 0x50
	  htim1.Init.Prescaler = 0;
 8000db2:	2300      	movs	r3, #0
 8000db4:	657b      	str	r3, [r7, #84]	; 0x54
	  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db6:	2300      	movs	r3, #0
 8000db8:	65bb      	str	r3, [r7, #88]	; 0x58
	  htim1.Init.Period = 65535;
 8000dba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dbe:	65fb      	str	r3, [r7, #92]	; 0x5c
	  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	663b      	str	r3, [r7, #96]	; 0x60
	  htim1.Init.RepetitionCounter = 0;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	667b      	str	r3, [r7, #100]	; 0x64
	  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	66bb      	str	r3, [r7, #104]	; 0x68
	  HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_4);
 8000dcc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000dd0:	210c      	movs	r1, #12
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f006 f96e 	bl	80070b4 <HAL_TIM_PWM_Stop>
	  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000dd8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f006 f852 	bl	8006e86 <HAL_TIM_PWM_Init>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <LCD_backlight_set+0xa0>
	  {
	    Error_Handler();
 8000de8:	f002 fe44 	bl	8003a74 <Error_Handler>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dec:	2300      	movs	r3, #0
 8000dee:	64bb      	str	r3, [r7, #72]	; 0x48
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000df0:	2300      	movs	r3, #0
 8000df2:	64fb      	str	r3, [r7, #76]	; 0x4c
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000df4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000df8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000dfc:	4611      	mov	r1, r2
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f006 fd00 	bl	8007804 <HAL_TIMEx_MasterConfigSynchronization>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <LCD_backlight_set+0xc2>
	  {
	    Error_Handler();
 8000e0a:	f002 fe33 	bl	8003a74 <Error_Handler>
	  }
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e0e:	2360      	movs	r3, #96	; 0x60
 8000e10:	62fb      	str	r3, [r7, #44]	; 0x2c
	  sConfigOC.Pulse = pwm;
 8000e12:	88fb      	ldrh	r3, [r7, #6]
 8000e14:	633b      	str	r3, [r7, #48]	; 0x30
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e16:	2300      	movs	r3, #0
 8000e18:	637b      	str	r3, [r7, #52]	; 0x34
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
	  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	643b      	str	r3, [r7, #64]	; 0x40
	  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e22:	2300      	movs	r3, #0
 8000e24:	647b      	str	r3, [r7, #68]	; 0x44
	  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e26:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8000e2a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000e2e:	220c      	movs	r2, #12
 8000e30:	4618      	mov	r0, r3
 8000e32:	f006 f9af 	bl	8007194 <HAL_TIM_PWM_ConfigChannel>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <LCD_backlight_set+0xf4>
	  {
	    Error_Handler();
 8000e3c:	f002 fe1a 	bl	8003a74 <Error_Handler>
	  }
	  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e40:	2300      	movs	r3, #0
 8000e42:	60fb      	str	r3, [r7, #12]
	  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e44:	2300      	movs	r3, #0
 8000e46:	613b      	str	r3, [r7, #16]
	  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	617b      	str	r3, [r7, #20]
	  sBreakDeadTimeConfig.DeadTime = 0;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	61bb      	str	r3, [r7, #24]
	  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e50:	2300      	movs	r3, #0
 8000e52:	61fb      	str	r3, [r7, #28]
	  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e58:	623b      	str	r3, [r7, #32]
	  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	62bb      	str	r3, [r7, #40]	; 0x28
	  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e5e:	f107 020c 	add.w	r2, r7, #12
 8000e62:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000e66:	4611      	mov	r1, r2
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f006 fd47 	bl	80078fc <HAL_TIMEx_ConfigBreakDeadTime>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <LCD_backlight_set+0x12c>
	  {
	    Error_Handler();
 8000e74:	f002 fdfe 	bl	8003a74 <Error_Handler>
	  }

	  HAL_TIM_MspPostInit(&htim1);
 8000e78:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f003 f94d 	bl	800411c <HAL_TIM_MspPostInit>
	  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_4);
 8000e82:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000e86:	210c      	movs	r1, #12
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f006 f84b 	bl	8006f24 <HAL_TIM_PWM_Start>


}
 8000e8e:	bf00      	nop
 8000e90:	3798      	adds	r7, #152	; 0x98
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	51eb851f 	.word	0x51eb851f
 8000e9c:	40010000 	.word	0x40010000

08000ea0 <interrupt_initialize_priorities>:
	ili9488_showArray_wo_coordinates(color,1);
}

/*----------------------------------------------Private functions-----------------------------------------------------*/
static void interrupt_initialize_priorities()
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4); //4 bits for preemp priority 0 bit for sub priority
 8000ea4:	2003      	movs	r0, #3
 8000ea6:	f003 fec9 	bl	8004c3c <HAL_NVIC_SetPriorityGrouping>
}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
	...

08000eb0 <iopins_ini>:
static void iopins_ini()
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b098      	sub	sp, #96	; 0x60
 8000eb4:	af00      	add	r7, sp, #0

	 __GPIOC_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	64bb      	str	r3, [r7, #72]	; 0x48
 8000eba:	4bac      	ldr	r3, [pc, #688]	; (800116c <iopins_ini+0x2bc>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	4aab      	ldr	r2, [pc, #684]	; (800116c <iopins_ini+0x2bc>)
 8000ec0:	f043 0304 	orr.w	r3, r3, #4
 8000ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec6:	4ba9      	ldr	r3, [pc, #676]	; (800116c <iopins_ini+0x2bc>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	f003 0304 	and.w	r3, r3, #4
 8000ece:	64bb      	str	r3, [r7, #72]	; 0x48
 8000ed0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
	 __GPIOD_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	647b      	str	r3, [r7, #68]	; 0x44
 8000ed6:	4ba5      	ldr	r3, [pc, #660]	; (800116c <iopins_ini+0x2bc>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	4aa4      	ldr	r2, [pc, #656]	; (800116c <iopins_ini+0x2bc>)
 8000edc:	f043 0308 	orr.w	r3, r3, #8
 8000ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee2:	4ba2      	ldr	r3, [pc, #648]	; (800116c <iopins_ini+0x2bc>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	f003 0308 	and.w	r3, r3, #8
 8000eea:	647b      	str	r3, [r7, #68]	; 0x44
 8000eec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
	 __GPIOA_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	643b      	str	r3, [r7, #64]	; 0x40
 8000ef2:	4b9e      	ldr	r3, [pc, #632]	; (800116c <iopins_ini+0x2bc>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	4a9d      	ldr	r2, [pc, #628]	; (800116c <iopins_ini+0x2bc>)
 8000ef8:	f043 0301 	orr.w	r3, r3, #1
 8000efc:	6313      	str	r3, [r2, #48]	; 0x30
 8000efe:	4b9b      	ldr	r3, [pc, #620]	; (800116c <iopins_ini+0x2bc>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	643b      	str	r3, [r7, #64]	; 0x40
 8000f08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
	 __GPIOB_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f0e:	4b97      	ldr	r3, [pc, #604]	; (800116c <iopins_ini+0x2bc>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	4a96      	ldr	r2, [pc, #600]	; (800116c <iopins_ini+0x2bc>)
 8000f14:	f043 0302 	orr.w	r3, r3, #2
 8000f18:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1a:	4b94      	ldr	r3, [pc, #592]	; (800116c <iopins_ini+0x2bc>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	f003 0302 	and.w	r3, r3, #2
 8000f22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
	GPIO_InitTypeDef GPIO_InitStruct;

    BUZZER_PORT_RCC();
 8000f26:	2300      	movs	r3, #0
 8000f28:	63bb      	str	r3, [r7, #56]	; 0x38
 8000f2a:	4b90      	ldr	r3, [pc, #576]	; (800116c <iopins_ini+0x2bc>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	4a8f      	ldr	r2, [pc, #572]	; (800116c <iopins_ini+0x2bc>)
 8000f30:	f043 0308 	orr.w	r3, r3, #8
 8000f34:	6313      	str	r3, [r2, #48]	; 0x30
 8000f36:	4b8d      	ldr	r3, [pc, #564]	; (800116c <iopins_ini+0x2bc>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	f003 0308 	and.w	r3, r3, #8
 8000f3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8000f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Pin = BUZZER;
 8000f42:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f46:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	65bb      	str	r3, [r7, #88]	; 0x58
	HAL_GPIO_Init(BUZZER_PORT, &GPIO_InitStruct);
 8000f50:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f54:	4619      	mov	r1, r3
 8000f56:	4886      	ldr	r0, [pc, #536]	; (8001170 <iopins_ini+0x2c0>)
 8000f58:	f003 ff44 	bl	8004de4 <HAL_GPIO_Init>

    RS485DIR_PORT_RCC();
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	637b      	str	r3, [r7, #52]	; 0x34
 8000f60:	4b82      	ldr	r3, [pc, #520]	; (800116c <iopins_ini+0x2bc>)
 8000f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f64:	4a81      	ldr	r2, [pc, #516]	; (800116c <iopins_ini+0x2bc>)
 8000f66:	f043 0301 	orr.w	r3, r3, #1
 8000f6a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6c:	4b7f      	ldr	r3, [pc, #508]	; (800116c <iopins_ini+0x2bc>)
 8000f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f70:	f003 0301 	and.w	r3, r3, #1
 8000f74:	637b      	str	r3, [r7, #52]	; 0x34
 8000f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Pin = RS485DIR;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f80:	2300      	movs	r3, #0
 8000f82:	65bb      	str	r3, [r7, #88]	; 0x58
	HAL_GPIO_Init(RS485DIR_PORT, &GPIO_InitStruct);
 8000f84:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f88:	4619      	mov	r1, r3
 8000f8a:	487a      	ldr	r0, [pc, #488]	; (8001174 <iopins_ini+0x2c4>)
 8000f8c:	f003 ff2a 	bl	8004de4 <HAL_GPIO_Init>

    LCD_CS_PORT_RCC();
 8000f90:	2300      	movs	r3, #0
 8000f92:	633b      	str	r3, [r7, #48]	; 0x30
 8000f94:	4b75      	ldr	r3, [pc, #468]	; (800116c <iopins_ini+0x2bc>)
 8000f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f98:	4a74      	ldr	r2, [pc, #464]	; (800116c <iopins_ini+0x2bc>)
 8000f9a:	f043 0308 	orr.w	r3, r3, #8
 8000f9e:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa0:	4b72      	ldr	r3, [pc, #456]	; (800116c <iopins_ini+0x2bc>)
 8000fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa4:	f003 0308 	and.w	r3, r3, #8
 8000fa8:	633b      	str	r3, [r7, #48]	; 0x30
 8000faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pin = LCD_CS;
 8000fac:	2380      	movs	r3, #128	; 0x80
 8000fae:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(LCD_CS_PORT, &GPIO_InitStruct);
 8000fb8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	486c      	ldr	r0, [pc, #432]	; (8001170 <iopins_ini+0x2c0>)
 8000fc0:	f003 ff10 	bl	8004de4 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(LCD_CS_PORT,LCD_CS,GPIO_PIN_SET);
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	2180      	movs	r1, #128	; 0x80
 8000fc8:	4869      	ldr	r0, [pc, #420]	; (8001170 <iopins_ini+0x2c0>)
 8000fca:	f004 f8a7 	bl	800511c <HAL_GPIO_WritePin>

    LCD_RES_PORT_RCC();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000fd2:	4b66      	ldr	r3, [pc, #408]	; (800116c <iopins_ini+0x2bc>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	4a65      	ldr	r2, [pc, #404]	; (800116c <iopins_ini+0x2bc>)
 8000fd8:	f043 0301 	orr.w	r3, r3, #1
 8000fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fde:	4b63      	ldr	r3, [pc, #396]	; (800116c <iopins_ini+0x2bc>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Pin = LCD_RES;
 8000fea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fee:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed =GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(LCD_RES_PORT, &GPIO_InitStruct);
 8000ff8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	485d      	ldr	r0, [pc, #372]	; (8001174 <iopins_ini+0x2c4>)
 8001000:	f003 fef0 	bl	8004de4 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(LCD_RES_PORT,LCD_RES,GPIO_PIN_RESET);
 8001004:	2200      	movs	r2, #0
 8001006:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800100a:	485a      	ldr	r0, [pc, #360]	; (8001174 <iopins_ini+0x2c4>)
 800100c:	f004 f886 	bl	800511c <HAL_GPIO_WritePin>
	delay_ms(50);
 8001010:	2032      	movs	r0, #50	; 0x32
 8001012:	f000 f9cf 	bl	80013b4 <delay_ms>
	HAL_GPIO_WritePin(LCD_RES_PORT,LCD_RES,GPIO_PIN_SET);
 8001016:	2201      	movs	r2, #1
 8001018:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800101c:	4855      	ldr	r0, [pc, #340]	; (8001174 <iopins_ini+0x2c4>)
 800101e:	f004 f87d 	bl	800511c <HAL_GPIO_WritePin>

    LCD_DCX_PORT_RCC();
 8001022:	2300      	movs	r3, #0
 8001024:	62bb      	str	r3, [r7, #40]	; 0x28
 8001026:	4b51      	ldr	r3, [pc, #324]	; (800116c <iopins_ini+0x2bc>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	4a50      	ldr	r2, [pc, #320]	; (800116c <iopins_ini+0x2bc>)
 800102c:	f043 0308 	orr.w	r3, r3, #8
 8001030:	6313      	str	r3, [r2, #48]	; 0x30
 8001032:	4b4e      	ldr	r3, [pc, #312]	; (800116c <iopins_ini+0x2bc>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	f003 0308 	and.w	r3, r3, #8
 800103a:	62bb      	str	r3, [r7, #40]	; 0x28
 800103c:	6abb      	ldr	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pin = LCD_DCX;
 800103e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001042:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001044:	2301      	movs	r3, #1
 8001046:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed =GPIO_SPEED_FREQ_VERY_HIGH;
 8001048:	2303      	movs	r3, #3
 800104a:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(LCD_DCX_PORT, &GPIO_InitStruct);
 800104c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001050:	4619      	mov	r1, r3
 8001052:	4847      	ldr	r0, [pc, #284]	; (8001170 <iopins_ini+0x2c0>)
 8001054:	f003 fec6 	bl	8004de4 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(LCD_DCX_PORT,LCD_DCX,GPIO_PIN_SET);
 8001058:	2201      	movs	r2, #1
 800105a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800105e:	4844      	ldr	r0, [pc, #272]	; (8001170 <iopins_ini+0x2c0>)
 8001060:	f004 f85c 	bl	800511c <HAL_GPIO_WritePin>

    FLASH_CS_PORT_RCC();
 8001064:	2300      	movs	r3, #0
 8001066:	627b      	str	r3, [r7, #36]	; 0x24
 8001068:	4b40      	ldr	r3, [pc, #256]	; (800116c <iopins_ini+0x2bc>)
 800106a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106c:	4a3f      	ldr	r2, [pc, #252]	; (800116c <iopins_ini+0x2bc>)
 800106e:	f043 0301 	orr.w	r3, r3, #1
 8001072:	6313      	str	r3, [r2, #48]	; 0x30
 8001074:	4b3d      	ldr	r3, [pc, #244]	; (800116c <iopins_ini+0x2bc>)
 8001076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001078:	f003 0301 	and.w	r3, r3, #1
 800107c:	627b      	str	r3, [r7, #36]	; 0x24
 800107e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Pin = FLASH_CS;
 8001080:	2310      	movs	r3, #16
 8001082:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001084:	2301      	movs	r3, #1
 8001086:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed =GPIO_SPEED_FREQ_VERY_HIGH;
 8001088:	2303      	movs	r3, #3
 800108a:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(FLASH_CS_PORT, &GPIO_InitStruct);
 800108c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001090:	4619      	mov	r1, r3
 8001092:	4838      	ldr	r0, [pc, #224]	; (8001174 <iopins_ini+0x2c4>)
 8001094:	f003 fea6 	bl	8004de4 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(FLASH_CS_PORT,FLASH_CS,GPIO_PIN_SET);
 8001098:	2201      	movs	r2, #1
 800109a:	2110      	movs	r1, #16
 800109c:	4835      	ldr	r0, [pc, #212]	; (8001174 <iopins_ini+0x2c4>)
 800109e:	f004 f83d 	bl	800511c <HAL_GPIO_WritePin>

    FLASH_WP_PORT_RCC();
 80010a2:	2300      	movs	r3, #0
 80010a4:	623b      	str	r3, [r7, #32]
 80010a6:	4b31      	ldr	r3, [pc, #196]	; (800116c <iopins_ini+0x2bc>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	4a30      	ldr	r2, [pc, #192]	; (800116c <iopins_ini+0x2bc>)
 80010ac:	f043 0304 	orr.w	r3, r3, #4
 80010b0:	6313      	str	r3, [r2, #48]	; 0x30
 80010b2:	4b2e      	ldr	r3, [pc, #184]	; (800116c <iopins_ini+0x2bc>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	f003 0304 	and.w	r3, r3, #4
 80010ba:	623b      	str	r3, [r7, #32]
 80010bc:	6a3b      	ldr	r3, [r7, #32]
	GPIO_InitStruct.Pin = FLASH_WP;
 80010be:	2310      	movs	r3, #16
 80010c0:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c2:	2301      	movs	r3, #1
 80010c4:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c6:	2300      	movs	r3, #0
 80010c8:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(FLASH_WP_PORT, &GPIO_InitStruct);
 80010ca:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80010ce:	4619      	mov	r1, r3
 80010d0:	4829      	ldr	r0, [pc, #164]	; (8001178 <iopins_ini+0x2c8>)
 80010d2:	f003 fe87 	bl	8004de4 <HAL_GPIO_Init>
	 HAL_GPIO_WritePin(FLASH_WP_PORT,FLASH_WP,GPIO_PIN_RESET);
 80010d6:	2200      	movs	r2, #0
 80010d8:	2110      	movs	r1, #16
 80010da:	4827      	ldr	r0, [pc, #156]	; (8001178 <iopins_ini+0x2c8>)
 80010dc:	f004 f81e 	bl	800511c <HAL_GPIO_WritePin>

    FRAM_CS_PORT_RCC();
 80010e0:	2300      	movs	r3, #0
 80010e2:	61fb      	str	r3, [r7, #28]
 80010e4:	4b21      	ldr	r3, [pc, #132]	; (800116c <iopins_ini+0x2bc>)
 80010e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e8:	4a20      	ldr	r2, [pc, #128]	; (800116c <iopins_ini+0x2bc>)
 80010ea:	f043 0302 	orr.w	r3, r3, #2
 80010ee:	6313      	str	r3, [r2, #48]	; 0x30
 80010f0:	4b1e      	ldr	r3, [pc, #120]	; (800116c <iopins_ini+0x2bc>)
 80010f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f4:	f003 0302 	and.w	r3, r3, #2
 80010f8:	61fb      	str	r3, [r7, #28]
 80010fa:	69fb      	ldr	r3, [r7, #28]
	GPIO_InitStruct.Pin = FRAM_CS;
 80010fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001100:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001102:	2301      	movs	r3, #1
 8001104:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed =GPIO_SPEED_FREQ_VERY_HIGH;
 8001106:	2303      	movs	r3, #3
 8001108:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(FRAM_CS_PORT, &GPIO_InitStruct);
 800110a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800110e:	4619      	mov	r1, r3
 8001110:	481a      	ldr	r0, [pc, #104]	; (800117c <iopins_ini+0x2cc>)
 8001112:	f003 fe67 	bl	8004de4 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(FRAM_CS_PORT,FRAM_CS,GPIO_PIN_SET);
 8001116:	2201      	movs	r2, #1
 8001118:	f44f 7100 	mov.w	r1, #512	; 0x200
 800111c:	4817      	ldr	r0, [pc, #92]	; (800117c <iopins_ini+0x2cc>)
 800111e:	f003 fffd 	bl	800511c <HAL_GPIO_WritePin>

    FRAM_HOLD_PORT_RCC();
 8001122:	2300      	movs	r3, #0
 8001124:	61bb      	str	r3, [r7, #24]
 8001126:	4b11      	ldr	r3, [pc, #68]	; (800116c <iopins_ini+0x2bc>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	4a10      	ldr	r2, [pc, #64]	; (800116c <iopins_ini+0x2bc>)
 800112c:	f043 0304 	orr.w	r3, r3, #4
 8001130:	6313      	str	r3, [r2, #48]	; 0x30
 8001132:	4b0e      	ldr	r3, [pc, #56]	; (800116c <iopins_ini+0x2bc>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	f003 0304 	and.w	r3, r3, #4
 800113a:	61bb      	str	r3, [r7, #24]
 800113c:	69bb      	ldr	r3, [r7, #24]
	GPIO_InitStruct.Pin = FRAM_HOLD;
 800113e:	2302      	movs	r3, #2
 8001140:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001142:	2301      	movs	r3, #1
 8001144:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed =GPIO_SPEED_FREQ_VERY_HIGH;
 8001146:	2303      	movs	r3, #3
 8001148:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(FRAM_HOLD_PORT, &GPIO_InitStruct);
 800114a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800114e:	4619      	mov	r1, r3
 8001150:	4809      	ldr	r0, [pc, #36]	; (8001178 <iopins_ini+0x2c8>)
 8001152:	f003 fe47 	bl	8004de4 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(FRAM_HOLD_PORT,FRAM_HOLD,GPIO_PIN_SET);
 8001156:	2201      	movs	r2, #1
 8001158:	2102      	movs	r1, #2
 800115a:	4807      	ldr	r0, [pc, #28]	; (8001178 <iopins_ini+0x2c8>)
 800115c:	f003 ffde 	bl	800511c <HAL_GPIO_WritePin>

    FRAM_WP_PORT_RCC();
 8001160:	2300      	movs	r3, #0
 8001162:	617b      	str	r3, [r7, #20]
 8001164:	4b01      	ldr	r3, [pc, #4]	; (800116c <iopins_ini+0x2bc>)
 8001166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001168:	e00a      	b.n	8001180 <iopins_ini+0x2d0>
 800116a:	bf00      	nop
 800116c:	40023800 	.word	0x40023800
 8001170:	40020c00 	.word	0x40020c00
 8001174:	40020000 	.word	0x40020000
 8001178:	40020800 	.word	0x40020800
 800117c:	40020400 	.word	0x40020400
 8001180:	4a4b      	ldr	r2, [pc, #300]	; (80012b0 <iopins_ini+0x400>)
 8001182:	f043 0304 	orr.w	r3, r3, #4
 8001186:	6313      	str	r3, [r2, #48]	; 0x30
 8001188:	4b49      	ldr	r3, [pc, #292]	; (80012b0 <iopins_ini+0x400>)
 800118a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118c:	f003 0304 	and.w	r3, r3, #4
 8001190:	617b      	str	r3, [r7, #20]
 8001192:	697b      	ldr	r3, [r7, #20]
	GPIO_InitStruct.Pin = FRAM_WP;
 8001194:	2301      	movs	r3, #1
 8001196:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001198:	2301      	movs	r3, #1
 800119a:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119c:	2300      	movs	r3, #0
 800119e:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(FRAM_WP_PORT, &GPIO_InitStruct);
 80011a0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80011a4:	4619      	mov	r1, r3
 80011a6:	4843      	ldr	r0, [pc, #268]	; (80012b4 <iopins_ini+0x404>)
 80011a8:	f003 fe1c 	bl	8004de4 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(FRAM_WP_PORT,FRAM_WP,GPIO_PIN_SET);
 80011ac:	2201      	movs	r2, #1
 80011ae:	2101      	movs	r1, #1
 80011b0:	4840      	ldr	r0, [pc, #256]	; (80012b4 <iopins_ini+0x404>)
 80011b2:	f003 ffb3 	bl	800511c <HAL_GPIO_WritePin>


    LED_DBG_PORT_RCC();
 80011b6:	2300      	movs	r3, #0
 80011b8:	613b      	str	r3, [r7, #16]
 80011ba:	4b3d      	ldr	r3, [pc, #244]	; (80012b0 <iopins_ini+0x400>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	4a3c      	ldr	r2, [pc, #240]	; (80012b0 <iopins_ini+0x400>)
 80011c0:	f043 0302 	orr.w	r3, r3, #2
 80011c4:	6313      	str	r3, [r2, #48]	; 0x30
 80011c6:	4b3a      	ldr	r3, [pc, #232]	; (80012b0 <iopins_ini+0x400>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	f003 0302 	and.w	r3, r3, #2
 80011ce:	613b      	str	r3, [r7, #16]
 80011d0:	693b      	ldr	r3, [r7, #16]
	GPIO_InitStruct.Pin = LED_DBG_1;
 80011d2:	2308      	movs	r3, #8
 80011d4:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d6:	2301      	movs	r3, #1
 80011d8:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011da:	2300      	movs	r3, #0
 80011dc:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(LED_DBG_PORT, &GPIO_InitStruct);
 80011de:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80011e2:	4619      	mov	r1, r3
 80011e4:	4834      	ldr	r0, [pc, #208]	; (80012b8 <iopins_ini+0x408>)
 80011e6:	f003 fdfd 	bl	8004de4 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(LED_DBG_PORT,LED_DBG_1,GPIO_PIN_SET);
 80011ea:	2201      	movs	r2, #1
 80011ec:	2108      	movs	r1, #8
 80011ee:	4832      	ldr	r0, [pc, #200]	; (80012b8 <iopins_ini+0x408>)
 80011f0:	f003 ff94 	bl	800511c <HAL_GPIO_WritePin>


    BUTTON_0_PORT_RCC();
 80011f4:	2300      	movs	r3, #0
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	4b2d      	ldr	r3, [pc, #180]	; (80012b0 <iopins_ini+0x400>)
 80011fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fc:	4a2c      	ldr	r2, [pc, #176]	; (80012b0 <iopins_ini+0x400>)
 80011fe:	f043 0301 	orr.w	r3, r3, #1
 8001202:	6313      	str	r3, [r2, #48]	; 0x30
 8001204:	4b2a      	ldr	r3, [pc, #168]	; (80012b0 <iopins_ini+0x400>)
 8001206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001208:	f003 0301 	and.w	r3, r3, #1
 800120c:	60fb      	str	r3, [r7, #12]
 800120e:	68fb      	ldr	r3, [r7, #12]
	GPIO_InitStruct.Pin = BUTTON_0;
 8001210:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001214:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001216:	2300      	movs	r3, #0
 8001218:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Pull= GPIO_NOPULL;
 800121a:	2300      	movs	r3, #0
 800121c:	657b      	str	r3, [r7, #84]	; 0x54
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121e:	2300      	movs	r3, #0
 8001220:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(BUTTON_0_PORT, &GPIO_InitStruct);
 8001222:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001226:	4619      	mov	r1, r3
 8001228:	4824      	ldr	r0, [pc, #144]	; (80012bc <iopins_ini+0x40c>)
 800122a:	f003 fddb 	bl	8004de4 <HAL_GPIO_Init>

    BUTTON_1_PORT_RCC();
 800122e:	2300      	movs	r3, #0
 8001230:	60bb      	str	r3, [r7, #8]
 8001232:	4b1f      	ldr	r3, [pc, #124]	; (80012b0 <iopins_ini+0x400>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	4a1e      	ldr	r2, [pc, #120]	; (80012b0 <iopins_ini+0x400>)
 8001238:	f043 0304 	orr.w	r3, r3, #4
 800123c:	6313      	str	r3, [r2, #48]	; 0x30
 800123e:	4b1c      	ldr	r3, [pc, #112]	; (80012b0 <iopins_ini+0x400>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	f003 0304 	and.w	r3, r3, #4
 8001246:	60bb      	str	r3, [r7, #8]
 8001248:	68bb      	ldr	r3, [r7, #8]
	GPIO_InitStruct.Pin = BUTTON_1;
 800124a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800124e:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001250:	2300      	movs	r3, #0
 8001252:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Pull= GPIO_NOPULL;
 8001254:	2300      	movs	r3, #0
 8001256:	657b      	str	r3, [r7, #84]	; 0x54
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001258:	2300      	movs	r3, #0
 800125a:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(BUTTON_1_PORT, &GPIO_InitStruct);
 800125c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001260:	4619      	mov	r1, r3
 8001262:	4814      	ldr	r0, [pc, #80]	; (80012b4 <iopins_ini+0x404>)
 8001264:	f003 fdbe 	bl	8004de4 <HAL_GPIO_Init>


    TOUCH_RESET_PORT_RCC();
 8001268:	2300      	movs	r3, #0
 800126a:	607b      	str	r3, [r7, #4]
 800126c:	4b10      	ldr	r3, [pc, #64]	; (80012b0 <iopins_ini+0x400>)
 800126e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001270:	4a0f      	ldr	r2, [pc, #60]	; (80012b0 <iopins_ini+0x400>)
 8001272:	f043 0302 	orr.w	r3, r3, #2
 8001276:	6313      	str	r3, [r2, #48]	; 0x30
 8001278:	4b0d      	ldr	r3, [pc, #52]	; (80012b0 <iopins_ini+0x400>)
 800127a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127c:	f003 0302 	and.w	r3, r3, #2
 8001280:	607b      	str	r3, [r7, #4]
 8001282:	687b      	ldr	r3, [r7, #4]
	GPIO_InitStruct.Pin = TOUCH_RESET;
 8001284:	2320      	movs	r3, #32
 8001286:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001288:	2301      	movs	r3, #1
 800128a:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128c:	2300      	movs	r3, #0
 800128e:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(TOUCH_RESET_PORT, &GPIO_InitStruct);
 8001290:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001294:	4619      	mov	r1, r3
 8001296:	4808      	ldr	r0, [pc, #32]	; (80012b8 <iopins_ini+0x408>)
 8001298:	f003 fda4 	bl	8004de4 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(TOUCH_RESET_PORT,TOUCH_RESET,GPIO_PIN_SET);
 800129c:	2201      	movs	r2, #1
 800129e:	2120      	movs	r1, #32
 80012a0:	4805      	ldr	r0, [pc, #20]	; (80012b8 <iopins_ini+0x408>)
 80012a2:	f003 ff3b 	bl	800511c <HAL_GPIO_WritePin>
}
 80012a6:	bf00      	nop
 80012a8:	3760      	adds	r7, #96	; 0x60
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40023800 	.word	0x40023800
 80012b4:	40020800 	.word	0x40020800
 80012b8:	40020400 	.word	0x40020400
 80012bc:	40020000 	.word	0x40020000

080012c0 <initialize_ili9488>:
static void initialize_ili9488()
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af02      	add	r7, sp, #8
	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_RESET);
 80012c6:	2200      	movs	r2, #0
 80012c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012cc:	4838      	ldr	r0, [pc, #224]	; (80013b0 <initialize_ili9488+0xf0>)
 80012ce:	f003 ff25 	bl	800511c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_RESET);
 80012d2:	2200      	movs	r2, #0
 80012d4:	2180      	movs	r1, #128	; 0x80
 80012d6:	4836      	ldr	r0, [pc, #216]	; (80013b0 <initialize_ili9488+0xf0>)
 80012d8:	f003 ff20 	bl	800511c <HAL_GPIO_WritePin>
	TFT_REG=0x0011;
 80012dc:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80012e0:	2211      	movs	r2, #17
 80012e2:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_SET);
 80012e4:	2201      	movs	r2, #1
 80012e6:	2180      	movs	r1, #128	; 0x80
 80012e8:	4831      	ldr	r0, [pc, #196]	; (80013b0 <initialize_ili9488+0xf0>)
 80012ea:	f003 ff17 	bl	800511c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_RESET);
 80012ee:	2200      	movs	r2, #0
 80012f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012f4:	482e      	ldr	r0, [pc, #184]	; (80013b0 <initialize_ili9488+0xf0>)
 80012f6:	f003 ff11 	bl	800511c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS, GPIO_PIN_RESET);
 80012fa:	2200      	movs	r2, #0
 80012fc:	2180      	movs	r1, #128	; 0x80
 80012fe:	482c      	ldr	r0, [pc, #176]	; (80013b0 <initialize_ili9488+0xf0>)
 8001300:	f003 ff0c 	bl	800511c <HAL_GPIO_WritePin>
	TFT_REG=0x0029;
 8001304:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8001308:	2229      	movs	r2, #41	; 0x29
 800130a:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS, GPIO_PIN_SET);
 800130c:	2201      	movs	r2, #1
 800130e:	2180      	movs	r1, #128	; 0x80
 8001310:	4827      	ldr	r0, [pc, #156]	; (80013b0 <initialize_ili9488+0xf0>)
 8001312:	f003 ff03 	bl	800511c <HAL_GPIO_WritePin>


	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_RESET);
 8001316:	2200      	movs	r2, #0
 8001318:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800131c:	4824      	ldr	r0, [pc, #144]	; (80013b0 <initialize_ili9488+0xf0>)
 800131e:	f003 fefd 	bl	800511c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_RESET);
 8001322:	2200      	movs	r2, #0
 8001324:	2180      	movs	r1, #128	; 0x80
 8001326:	4822      	ldr	r0, [pc, #136]	; (80013b0 <initialize_ili9488+0xf0>)
 8001328:	f003 fef8 	bl	800511c <HAL_GPIO_WritePin>
	TFT_REG=0x003A;
 800132c:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8001330:	223a      	movs	r2, #58	; 0x3a
 8001332:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_SET);
 8001334:	2201      	movs	r2, #1
 8001336:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800133a:	481d      	ldr	r0, [pc, #116]	; (80013b0 <initialize_ili9488+0xf0>)
 800133c:	f003 feee 	bl	800511c <HAL_GPIO_WritePin>
	TFT_REG=0x0055;
 8001340:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8001344:	2255      	movs	r2, #85	; 0x55
 8001346:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS, GPIO_PIN_RESET);
 8001348:	2200      	movs	r2, #0
 800134a:	2180      	movs	r1, #128	; 0x80
 800134c:	4818      	ldr	r0, [pc, #96]	; (80013b0 <initialize_ili9488+0xf0>)
 800134e:	f003 fee5 	bl	800511c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_RESET);
 8001352:	2200      	movs	r2, #0
 8001354:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001358:	4815      	ldr	r0, [pc, #84]	; (80013b0 <initialize_ili9488+0xf0>)
 800135a:	f003 fedf 	bl	800511c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_RESET);
 800135e:	2200      	movs	r2, #0
 8001360:	2180      	movs	r1, #128	; 0x80
 8001362:	4813      	ldr	r0, [pc, #76]	; (80013b0 <initialize_ili9488+0xf0>)
 8001364:	f003 feda 	bl	800511c <HAL_GPIO_WritePin>
	TFT_REG=0x0036;
 8001368:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800136c:	2236      	movs	r2, #54	; 0x36
 800136e:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_SET);
 8001370:	2201      	movs	r2, #1
 8001372:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001376:	480e      	ldr	r0, [pc, #56]	; (80013b0 <initialize_ili9488+0xf0>)
 8001378:	f003 fed0 	bl	800511c <HAL_GPIO_WritePin>
	TFT_REG=0x00E8;
 800137c:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8001380:	22e8      	movs	r2, #232	; 0xe8
 8001382:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_RESET);
 8001384:	2200      	movs	r2, #0
 8001386:	2180      	movs	r1, #128	; 0x80
 8001388:	4809      	ldr	r0, [pc, #36]	; (80013b0 <initialize_ili9488+0xf0>)
 800138a:	f003 fec7 	bl	800511c <HAL_GPIO_WritePin>

	delay_ms(100);
 800138e:	2064      	movs	r0, #100	; 0x64
 8001390:	f000 f810 	bl	80013b4 <delay_ms>
	LCD_fillRect(0,0,LCD_PIXEL_WIDTH,LCD_PIXEL_HEIGHT,ORANGE);
 8001394:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8001398:	9300      	str	r3, [sp, #0]
 800139a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800139e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80013a2:	2100      	movs	r1, #0
 80013a4:	2000      	movs	r0, #0
 80013a6:	f7ff fc03 	bl	8000bb0 <LCD_fillRect>
}
 80013aa:	bf00      	nop
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	40020c00 	.word	0x40020c00

080013b4 <delay_ms>:
	{
		TFT_REG=data[i];
	}
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_SET);
}
static void delay_ms(__IO uint32_t nCount1) {
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
	__IO uint32_t nCount=nCount1*23666;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f645 4272 	movw	r2, #23666	; 0x5c72
 80013c2:	fb02 f303 	mul.w	r3, r2, r3
 80013c6:	60fb      	str	r3, [r7, #12]
	while(nCount--) {
 80013c8:	bf00      	nop
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	1e5a      	subs	r2, r3, #1
 80013ce:	60fa      	str	r2, [r7, #12]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d1fa      	bne.n	80013ca <delay_ms+0x16>
  }
}
 80013d4:	bf00      	nop
 80013d6:	bf00      	nop
 80013d8:	3714      	adds	r7, #20
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
	...

080013e4 <touch_init>:
/*----------------------------------------------Public function-----------------------------------------------------*/
// Initialize touch screen
void set_page(uint8_t page){active_page = page;}
void set_layer(uint8_t layer){active_layer = layer;}
void touch_init(I2C_HandleTypeDef def)
{
 80013e4:	b084      	sub	sp, #16
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b084      	sub	sp, #16
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	f107 0c18 	add.w	ip, r7, #24
 80013f0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	hi2c1_touch = def;
 80013f4:	4b66      	ldr	r3, [pc, #408]	; (8001590 <touch_init+0x1ac>)
 80013f6:	4618      	mov	r0, r3
 80013f8:	f107 0318 	add.w	r3, r7, #24
 80013fc:	2254      	movs	r2, #84	; 0x54
 80013fe:	4619      	mov	r1, r3
 8001400:	f007 fb3c 	bl	8008a7c <memcpy>
	touch_write_register(0x0E,0xC000);
 8001404:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001408:	200e      	movs	r0, #14
 800140a:	f000 faa3 	bl	8001954 <touch_write_register>
	touch_write_control(0x80);
 800140e:	2080      	movs	r0, #128	; 0x80
 8001410:	f000 fa88 	bl	8001924 <touch_write_control>
	for(int p = 0;p <MAX_NUM_PAGES; p++)
 8001414:	2300      	movs	r3, #0
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	e093      	b.n	8001542 <touch_init+0x15e>
	{
		for(int l = 0;l <MAX_NUM_LAYERS; l++)
 800141a:	2300      	movs	r3, #0
 800141c:	60bb      	str	r3, [r7, #8]
 800141e:	e089      	b.n	8001534 <touch_init+0x150>
		{

			for(int i = 0;i <MAX_NUM_ELEMENTS; i++)
 8001420:	2300      	movs	r3, #0
 8001422:	607b      	str	r3, [r7, #4]
 8001424:	e07f      	b.n	8001526 <touch_init+0x142>
			{
				touch_elements_register[p][l][i].x = 0;
 8001426:	485b      	ldr	r0, [pc, #364]	; (8001594 <touch_init+0x1b0>)
 8001428:	68ba      	ldr	r2, [r7, #8]
 800142a:	68f9      	ldr	r1, [r7, #12]
 800142c:	4613      	mov	r3, r2
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	4413      	add	r3, r2
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	2264      	movs	r2, #100	; 0x64
 8001436:	fb02 f201 	mul.w	r2, r2, r1
 800143a:	441a      	add	r2, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	4413      	add	r3, r2
 8001440:	011b      	lsls	r3, r3, #4
 8001442:	4403      	add	r3, r0
 8001444:	2200      	movs	r2, #0
 8001446:	801a      	strh	r2, [r3, #0]
				touch_elements_register[p][l][i].x1 = 0;
 8001448:	4852      	ldr	r0, [pc, #328]	; (8001594 <touch_init+0x1b0>)
 800144a:	68ba      	ldr	r2, [r7, #8]
 800144c:	68f9      	ldr	r1, [r7, #12]
 800144e:	4613      	mov	r3, r2
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	4413      	add	r3, r2
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	2264      	movs	r2, #100	; 0x64
 8001458:	fb02 f201 	mul.w	r2, r2, r1
 800145c:	441a      	add	r2, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4413      	add	r3, r2
 8001462:	011b      	lsls	r3, r3, #4
 8001464:	4403      	add	r3, r0
 8001466:	3304      	adds	r3, #4
 8001468:	2200      	movs	r2, #0
 800146a:	801a      	strh	r2, [r3, #0]
				touch_elements_register[p][l][i].y = 0;
 800146c:	4849      	ldr	r0, [pc, #292]	; (8001594 <touch_init+0x1b0>)
 800146e:	68ba      	ldr	r2, [r7, #8]
 8001470:	68f9      	ldr	r1, [r7, #12]
 8001472:	4613      	mov	r3, r2
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	4413      	add	r3, r2
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	2264      	movs	r2, #100	; 0x64
 800147c:	fb02 f201 	mul.w	r2, r2, r1
 8001480:	441a      	add	r2, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4413      	add	r3, r2
 8001486:	011b      	lsls	r3, r3, #4
 8001488:	4403      	add	r3, r0
 800148a:	3302      	adds	r3, #2
 800148c:	2200      	movs	r2, #0
 800148e:	801a      	strh	r2, [r3, #0]
				touch_elements_register[p][l][i].y1 = 0;
 8001490:	4840      	ldr	r0, [pc, #256]	; (8001594 <touch_init+0x1b0>)
 8001492:	68ba      	ldr	r2, [r7, #8]
 8001494:	68f9      	ldr	r1, [r7, #12]
 8001496:	4613      	mov	r3, r2
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	4413      	add	r3, r2
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	2264      	movs	r2, #100	; 0x64
 80014a0:	fb02 f201 	mul.w	r2, r2, r1
 80014a4:	441a      	add	r2, r3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4413      	add	r3, r2
 80014aa:	011b      	lsls	r3, r3, #4
 80014ac:	4403      	add	r3, r0
 80014ae:	3306      	adds	r3, #6
 80014b0:	2200      	movs	r2, #0
 80014b2:	801a      	strh	r2, [r3, #0]
				touch_elements_register[p][l][i].element_type = 0;
 80014b4:	4837      	ldr	r0, [pc, #220]	; (8001594 <touch_init+0x1b0>)
 80014b6:	68ba      	ldr	r2, [r7, #8]
 80014b8:	68f9      	ldr	r1, [r7, #12]
 80014ba:	4613      	mov	r3, r2
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	4413      	add	r3, r2
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	2264      	movs	r2, #100	; 0x64
 80014c4:	fb02 f201 	mul.w	r2, r2, r1
 80014c8:	441a      	add	r2, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4413      	add	r3, r2
 80014ce:	011b      	lsls	r3, r3, #4
 80014d0:	4403      	add	r3, r0
 80014d2:	3308      	adds	r3, #8
 80014d4:	2200      	movs	r2, #0
 80014d6:	701a      	strb	r2, [r3, #0]
				touch_elements_register[p][l][i].isAlive = 0;
 80014d8:	482e      	ldr	r0, [pc, #184]	; (8001594 <touch_init+0x1b0>)
 80014da:	68ba      	ldr	r2, [r7, #8]
 80014dc:	68f9      	ldr	r1, [r7, #12]
 80014de:	4613      	mov	r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	4413      	add	r3, r2
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	2264      	movs	r2, #100	; 0x64
 80014e8:	fb02 f201 	mul.w	r2, r2, r1
 80014ec:	441a      	add	r2, r3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4413      	add	r3, r2
 80014f2:	011b      	lsls	r3, r3, #4
 80014f4:	4403      	add	r3, r0
 80014f6:	3309      	adds	r3, #9
 80014f8:	2200      	movs	r2, #0
 80014fa:	701a      	strb	r2, [r3, #0]
				touch_elements_register[p][l][i].element_pointer = 0;
 80014fc:	4825      	ldr	r0, [pc, #148]	; (8001594 <touch_init+0x1b0>)
 80014fe:	68ba      	ldr	r2, [r7, #8]
 8001500:	68f9      	ldr	r1, [r7, #12]
 8001502:	4613      	mov	r3, r2
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	4413      	add	r3, r2
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	2264      	movs	r2, #100	; 0x64
 800150c:	fb02 f201 	mul.w	r2, r2, r1
 8001510:	441a      	add	r2, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4413      	add	r3, r2
 8001516:	011b      	lsls	r3, r3, #4
 8001518:	4403      	add	r3, r0
 800151a:	330c      	adds	r3, #12
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
			for(int i = 0;i <MAX_NUM_ELEMENTS; i++)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	3301      	adds	r3, #1
 8001524:	607b      	str	r3, [r7, #4]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2b13      	cmp	r3, #19
 800152a:	f77f af7c 	ble.w	8001426 <touch_init+0x42>
		for(int l = 0;l <MAX_NUM_LAYERS; l++)
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	3301      	adds	r3, #1
 8001532:	60bb      	str	r3, [r7, #8]
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	2b04      	cmp	r3, #4
 8001538:	f77f af72 	ble.w	8001420 <touch_init+0x3c>
	for(int p = 0;p <MAX_NUM_PAGES; p++)
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	3301      	adds	r3, #1
 8001540:	60fb      	str	r3, [r7, #12]
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	2b04      	cmp	r3, #4
 8001546:	f77f af68 	ble.w	800141a <touch_init+0x36>
			}
		}
	}
	pressed_element.x = 0;
 800154a:	4b13      	ldr	r3, [pc, #76]	; (8001598 <touch_init+0x1b4>)
 800154c:	2200      	movs	r2, #0
 800154e:	801a      	strh	r2, [r3, #0]
	pressed_element.x1 = 0;
 8001550:	4b11      	ldr	r3, [pc, #68]	; (8001598 <touch_init+0x1b4>)
 8001552:	2200      	movs	r2, #0
 8001554:	809a      	strh	r2, [r3, #4]
	pressed_element.y = 0;
 8001556:	4b10      	ldr	r3, [pc, #64]	; (8001598 <touch_init+0x1b4>)
 8001558:	2200      	movs	r2, #0
 800155a:	805a      	strh	r2, [r3, #2]
	pressed_element.y1 = 0;
 800155c:	4b0e      	ldr	r3, [pc, #56]	; (8001598 <touch_init+0x1b4>)
 800155e:	2200      	movs	r2, #0
 8001560:	80da      	strh	r2, [r3, #6]
	pressed_element.element_type = 0;
 8001562:	4b0d      	ldr	r3, [pc, #52]	; (8001598 <touch_init+0x1b4>)
 8001564:	2200      	movs	r2, #0
 8001566:	721a      	strb	r2, [r3, #8]
	pressed_element.element_pointer = 0;
 8001568:	4b0b      	ldr	r3, [pc, #44]	; (8001598 <touch_init+0x1b4>)
 800156a:	2200      	movs	r2, #0
 800156c:	60da      	str	r2, [r3, #12]
	pressed_element.isAlive = 0;
 800156e:	4b0a      	ldr	r3, [pc, #40]	; (8001598 <touch_init+0x1b4>)
 8001570:	2200      	movs	r2, #0
 8001572:	725a      	strb	r2, [r3, #9]
	active_layer = 0;
 8001574:	4b09      	ldr	r3, [pc, #36]	; (800159c <touch_init+0x1b8>)
 8001576:	2200      	movs	r2, #0
 8001578:	701a      	strb	r2, [r3, #0]
	active_page = 0;
 800157a:	4b09      	ldr	r3, [pc, #36]	; (80015a0 <touch_init+0x1bc>)
 800157c:	2200      	movs	r2, #0
 800157e:	701a      	strb	r2, [r3, #0]
}
 8001580:	bf00      	nop
 8001582:	3710      	adds	r7, #16
 8001584:	46bd      	mov	sp, r7
 8001586:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800158a:	b004      	add	sp, #16
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	200000ec 	.word	0x200000ec
 8001594:	20000150 	.word	0x20000150
 8001598:	20000140 	.word	0x20000140
 800159c:	200000ea 	.word	0x200000ea
 80015a0:	200000d8 	.word	0x200000d8

080015a4 <touch_reset>:
// Reset touch screen IC module
void touch_reset()
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
 	HAL_GPIO_WritePin(TOUCH_RESET_PORT,TOUCH_RESET,GPIO_PIN_RESET);
 80015a8:	2200      	movs	r2, #0
 80015aa:	2120      	movs	r1, #32
 80015ac:	4807      	ldr	r0, [pc, #28]	; (80015cc <touch_reset+0x28>)
 80015ae:	f003 fdb5 	bl	800511c <HAL_GPIO_WritePin>
 	delay_ms(10);
 80015b2:	200a      	movs	r0, #10
 80015b4:	f000 fade 	bl	8001b74 <delay_ms>
 	HAL_GPIO_WritePin(TOUCH_RESET_PORT,TOUCH_RESET,GPIO_PIN_SET);
 80015b8:	2201      	movs	r2, #1
 80015ba:	2120      	movs	r1, #32
 80015bc:	4803      	ldr	r0, [pc, #12]	; (80015cc <touch_reset+0x28>)
 80015be:	f003 fdad 	bl	800511c <HAL_GPIO_WritePin>
 	delay_ms(50);
 80015c2:	2032      	movs	r0, #50	; 0x32
 80015c4:	f000 fad6 	bl	8001b74 <delay_ms>
}
 80015c8:	bf00      	nop
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40020400 	.word	0x40020400

080015d0 <touch_periodic_process>:
{
	return pressed_element;
}
// After each call identifies if the touch was pressed and if TRUEm then identify the element
void touch_periodic_process()
{
 80015d0:	b598      	push	{r3, r4, r7, lr}
 80015d2:	af00      	add	r7, sp, #0

	if(touch.pressed==1)
 80015d4:	4b24      	ldr	r3, [pc, #144]	; (8001668 <touch_periodic_process+0x98>)
 80015d6:	891b      	ldrh	r3, [r3, #8]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d142      	bne.n	8001662 <touch_periodic_process+0x92>
	{
		touch.pressed=0;
 80015dc:	4b22      	ldr	r3, [pc, #136]	; (8001668 <touch_periodic_process+0x98>)
 80015de:	2200      	movs	r2, #0
 80015e0:	811a      	strh	r2, [r3, #8]

		touch.x=touch_read(0x00);
 80015e2:	2000      	movs	r0, #0
 80015e4:	f000 f9e2 	bl	80019ac <touch_read>
 80015e8:	4603      	mov	r3, r0
 80015ea:	461a      	mov	r2, r3
 80015ec:	4b1e      	ldr	r3, [pc, #120]	; (8001668 <touch_periodic_process+0x98>)
 80015ee:	801a      	strh	r2, [r3, #0]
		touch.x1=touch_read(0x01);
 80015f0:	2001      	movs	r0, #1
 80015f2:	f000 f9db 	bl	80019ac <touch_read>
 80015f6:	4603      	mov	r3, r0
 80015f8:	461a      	mov	r2, r3
 80015fa:	4b1b      	ldr	r3, [pc, #108]	; (8001668 <touch_periodic_process+0x98>)
 80015fc:	809a      	strh	r2, [r3, #4]
		touch.y=touch_read(0x02);
 80015fe:	2002      	movs	r0, #2
 8001600:	f000 f9d4 	bl	80019ac <touch_read>
 8001604:	4603      	mov	r3, r0
 8001606:	461a      	mov	r2, r3
 8001608:	4b17      	ldr	r3, [pc, #92]	; (8001668 <touch_periodic_process+0x98>)
 800160a:	805a      	strh	r2, [r3, #2]
		touch.y1=touch_read(0x03);
 800160c:	2003      	movs	r0, #3
 800160e:	f000 f9cd 	bl	80019ac <touch_read>
 8001612:	4603      	mov	r3, r0
 8001614:	461a      	mov	r2, r3
 8001616:	4b14      	ldr	r3, [pc, #80]	; (8001668 <touch_periodic_process+0x98>)
 8001618:	80da      	strh	r2, [r3, #6]
		printf("TOUCH x %d\n\r", touch.x);
		printf("TOUCH x1 %d\n\r", touch.x1);
		printf("TOUCH y %d\n\r", touch.y);
		printf("TOUCH y1 %d\n\r", touch.y1);
#endif
		touch.y=touch.x1;
 800161a:	4b13      	ldr	r3, [pc, #76]	; (8001668 <touch_periodic_process+0x98>)
 800161c:	889a      	ldrh	r2, [r3, #4]
 800161e:	4b12      	ldr	r3, [pc, #72]	; (8001668 <touch_periodic_process+0x98>)
 8001620:	805a      	strh	r2, [r3, #2]
		touch.x=1024-touch.y1;
 8001622:	4b11      	ldr	r3, [pc, #68]	; (8001668 <touch_periodic_process+0x98>)
 8001624:	88db      	ldrh	r3, [r3, #6]
 8001626:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 800162a:	b29a      	uxth	r2, r3
 800162c:	4b0e      	ldr	r3, [pc, #56]	; (8001668 <touch_periodic_process+0x98>)
 800162e:	801a      	strh	r2, [r3, #0]
#if DEBUG_TOUCH == 1
		printf("TOUCH Y reverted %d\n\r", touch.y);
		printf("TOUCH X reverted %d\n\r", touch.x);
#endif
		if(validate_touch_coordinates()==1)
 8001630:	f000 f9ee 	bl	8001a10 <validate_touch_coordinates>
 8001634:	4603      	mov	r3, r0
 8001636:	2b01      	cmp	r3, #1
 8001638:	d110      	bne.n	800165c <touch_periodic_process+0x8c>
		{
#if DEBUG_TOUCH == 1
			printf("TOUCH = X: %d,Y: %d\n\r",touch.x,touch.y);
#endif
			 touch_get_pressed_element(touch);
 800163a:	4b0b      	ldr	r3, [pc, #44]	; (8001668 <touch_periodic_process+0x98>)
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	2000      	movs	r0, #0
 8001640:	4610      	mov	r0, r2
 8001642:	685a      	ldr	r2, [r3, #4]
 8001644:	2100      	movs	r1, #0
 8001646:	4611      	mov	r1, r2
 8001648:	689a      	ldr	r2, [r3, #8]
 800164a:	2400      	movs	r4, #0
 800164c:	4614      	mov	r4, r2
 800164e:	899a      	ldrh	r2, [r3, #12]
 8001650:	2300      	movs	r3, #0
 8001652:	f362 030f 	bfi	r3, r2, #0, #16
 8001656:	4622      	mov	r2, r4
 8001658:	f000 f808 	bl	800166c <touch_get_pressed_element>
		}
		touch_write_control(0x80);
 800165c:	2080      	movs	r0, #128	; 0x80
 800165e:	f000 f961 	bl	8001924 <touch_write_control>
	}
}
 8001662:	bf00      	nop
 8001664:	bd98      	pop	{r3, r4, r7, pc}
 8001666:	bf00      	nop
 8001668:	200000dc 	.word	0x200000dc

0800166c <touch_get_pressed_element>:
// External interrupt callback function. Take an action when touchscreen was pressed
static void touch_get_pressed_element()
{
 800166c:	b590      	push	{r4, r7, lr}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
	uint16_t x0,x1,y1,y0;
	for(int i = 0; i<MAX_NUM_ELEMENTS;i++)
 8001672:	2300      	movs	r3, #0
 8001674:	607b      	str	r3, [r7, #4]
 8001676:	e07d      	b.n	8001774 <touch_get_pressed_element+0x108>
	{

		if((touch.x >= touch_elements_register[active_page][active_layer][i].x )
 8001678:	4b42      	ldr	r3, [pc, #264]	; (8001784 <touch_get_pressed_element+0x118>)
 800167a:	881a      	ldrh	r2, [r3, #0]
 800167c:	4b42      	ldr	r3, [pc, #264]	; (8001788 <touch_get_pressed_element+0x11c>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	461c      	mov	r4, r3
 8001682:	4b42      	ldr	r3, [pc, #264]	; (800178c <touch_get_pressed_element+0x120>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	4619      	mov	r1, r3
 8001688:	4841      	ldr	r0, [pc, #260]	; (8001790 <touch_get_pressed_element+0x124>)
 800168a:	460b      	mov	r3, r1
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	440b      	add	r3, r1
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	2164      	movs	r1, #100	; 0x64
 8001694:	fb01 f104 	mul.w	r1, r1, r4
 8001698:	4419      	add	r1, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	440b      	add	r3, r1
 800169e:	011b      	lsls	r3, r3, #4
 80016a0:	4403      	add	r3, r0
 80016a2:	881b      	ldrh	r3, [r3, #0]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d362      	bcc.n	800176e <touch_get_pressed_element+0x102>
		&& (touch.x <= touch_elements_register[active_page][active_layer][i].x1)
 80016a8:	4b36      	ldr	r3, [pc, #216]	; (8001784 <touch_get_pressed_element+0x118>)
 80016aa:	881a      	ldrh	r2, [r3, #0]
 80016ac:	4b36      	ldr	r3, [pc, #216]	; (8001788 <touch_get_pressed_element+0x11c>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	461c      	mov	r4, r3
 80016b2:	4b36      	ldr	r3, [pc, #216]	; (800178c <touch_get_pressed_element+0x120>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	4619      	mov	r1, r3
 80016b8:	4835      	ldr	r0, [pc, #212]	; (8001790 <touch_get_pressed_element+0x124>)
 80016ba:	460b      	mov	r3, r1
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	440b      	add	r3, r1
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	2164      	movs	r1, #100	; 0x64
 80016c4:	fb01 f104 	mul.w	r1, r1, r4
 80016c8:	4419      	add	r1, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	440b      	add	r3, r1
 80016ce:	011b      	lsls	r3, r3, #4
 80016d0:	4403      	add	r3, r0
 80016d2:	3304      	adds	r3, #4
 80016d4:	881b      	ldrh	r3, [r3, #0]
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d849      	bhi.n	800176e <touch_get_pressed_element+0x102>
		&&(touch.y1 >= touch_elements_register[active_page][active_layer][i].y)
 80016da:	4b2a      	ldr	r3, [pc, #168]	; (8001784 <touch_get_pressed_element+0x118>)
 80016dc:	88da      	ldrh	r2, [r3, #6]
 80016de:	4b2a      	ldr	r3, [pc, #168]	; (8001788 <touch_get_pressed_element+0x11c>)
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	461c      	mov	r4, r3
 80016e4:	4b29      	ldr	r3, [pc, #164]	; (800178c <touch_get_pressed_element+0x120>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	4619      	mov	r1, r3
 80016ea:	4829      	ldr	r0, [pc, #164]	; (8001790 <touch_get_pressed_element+0x124>)
 80016ec:	460b      	mov	r3, r1
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	440b      	add	r3, r1
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	2164      	movs	r1, #100	; 0x64
 80016f6:	fb01 f104 	mul.w	r1, r1, r4
 80016fa:	4419      	add	r1, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	440b      	add	r3, r1
 8001700:	011b      	lsls	r3, r3, #4
 8001702:	4403      	add	r3, r0
 8001704:	3302      	adds	r3, #2
 8001706:	881b      	ldrh	r3, [r3, #0]
 8001708:	429a      	cmp	r2, r3
 800170a:	d330      	bcc.n	800176e <touch_get_pressed_element+0x102>
		&&(touch.y <= touch_elements_register[active_page][active_layer][i].y1))
 800170c:	4b1d      	ldr	r3, [pc, #116]	; (8001784 <touch_get_pressed_element+0x118>)
 800170e:	885a      	ldrh	r2, [r3, #2]
 8001710:	4b1d      	ldr	r3, [pc, #116]	; (8001788 <touch_get_pressed_element+0x11c>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	461c      	mov	r4, r3
 8001716:	4b1d      	ldr	r3, [pc, #116]	; (800178c <touch_get_pressed_element+0x120>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	4619      	mov	r1, r3
 800171c:	481c      	ldr	r0, [pc, #112]	; (8001790 <touch_get_pressed_element+0x124>)
 800171e:	460b      	mov	r3, r1
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	440b      	add	r3, r1
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	2164      	movs	r1, #100	; 0x64
 8001728:	fb01 f104 	mul.w	r1, r1, r4
 800172c:	4419      	add	r1, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	440b      	add	r3, r1
 8001732:	011b      	lsls	r3, r3, #4
 8001734:	4403      	add	r3, r0
 8001736:	3306      	adds	r3, #6
 8001738:	881b      	ldrh	r3, [r3, #0]
 800173a:	429a      	cmp	r2, r3
 800173c:	d817      	bhi.n	800176e <touch_get_pressed_element+0x102>
			x1 = touch_elements_register[active_page][active_layer][i].x1;
			y0 = touch_elements_register[active_page][active_layer][i].y;
			y1 = touch_elements_register[active_page][active_layer][i].y1;
			printf(" GETTING PRESSED ELEMENT \n\r X: %d\n\r X1: %d\n\r Y: %d\n\r Y1: %d\n\r",x0,x1,y0,y1);
#endif
			memcpy(&pressed_element,&touch_elements_register[active_page][active_layer][i],sizeof(struct element_t));
 800173e:	4b12      	ldr	r3, [pc, #72]	; (8001788 <touch_get_pressed_element+0x11c>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	4619      	mov	r1, r3
 8001744:	4b11      	ldr	r3, [pc, #68]	; (800178c <touch_get_pressed_element+0x120>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	461a      	mov	r2, r3
 800174a:	4613      	mov	r3, r2
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	4413      	add	r3, r2
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	2264      	movs	r2, #100	; 0x64
 8001754:	fb02 f201 	mul.w	r2, r2, r1
 8001758:	441a      	add	r2, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4413      	add	r3, r2
 800175e:	011b      	lsls	r3, r3, #4
 8001760:	4a0b      	ldr	r2, [pc, #44]	; (8001790 <touch_get_pressed_element+0x124>)
 8001762:	4413      	add	r3, r2
 8001764:	2210      	movs	r2, #16
 8001766:	4619      	mov	r1, r3
 8001768:	480a      	ldr	r0, [pc, #40]	; (8001794 <touch_get_pressed_element+0x128>)
 800176a:	f007 f987 	bl	8008a7c <memcpy>
	for(int i = 0; i<MAX_NUM_ELEMENTS;i++)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	3301      	adds	r3, #1
 8001772:	607b      	str	r3, [r7, #4]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2b13      	cmp	r3, #19
 8001778:	f77f af7e 	ble.w	8001678 <touch_get_pressed_element+0xc>

#endif
		}
	}

	return touch_elements_register[-1];
 800177c:	bf00      	nop
}
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	bd90      	pop	{r4, r7, pc}
 8001784:	200000dc 	.word	0x200000dc
 8001788:	200000d8 	.word	0x200000d8
 800178c:	200000ea 	.word	0x200000ea
 8001790:	20000150 	.word	0x20000150
 8001794:	20000140 	.word	0x20000140

08001798 <touch_register_element>:
// Register element to the touch elements array.
uint8_t touch_register_element(uint8_t page,uint8_t layer,uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1,uint16_t element_type, uint32_t element_pointer)
{
 8001798:	b490      	push	{r4, r7}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	4604      	mov	r4, r0
 80017a0:	4608      	mov	r0, r1
 80017a2:	4611      	mov	r1, r2
 80017a4:	461a      	mov	r2, r3
 80017a6:	4623      	mov	r3, r4
 80017a8:	71fb      	strb	r3, [r7, #7]
 80017aa:	4603      	mov	r3, r0
 80017ac:	71bb      	strb	r3, [r7, #6]
 80017ae:	460b      	mov	r3, r1
 80017b0:	80bb      	strh	r3, [r7, #4]
 80017b2:	4613      	mov	r3, r2
 80017b4:	807b      	strh	r3, [r7, #2]
	for(int i = 0;i<MAX_NUM_ELEMENTS;i++)
 80017b6:	2300      	movs	r3, #0
 80017b8:	60fb      	str	r3, [r7, #12]
 80017ba:	e097      	b.n	80018ec <touch_register_element+0x154>
	{
		if(touch_elements_register[page][layer][i].isAlive == 0)
 80017bc:	79f9      	ldrb	r1, [r7, #7]
 80017be:	79ba      	ldrb	r2, [r7, #6]
 80017c0:	484f      	ldr	r0, [pc, #316]	; (8001900 <touch_register_element+0x168>)
 80017c2:	4613      	mov	r3, r2
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	4413      	add	r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	2264      	movs	r2, #100	; 0x64
 80017cc:	fb02 f201 	mul.w	r2, r2, r1
 80017d0:	441a      	add	r2, r3
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	4413      	add	r3, r2
 80017d6:	011b      	lsls	r3, r3, #4
 80017d8:	4403      	add	r3, r0
 80017da:	3309      	adds	r3, #9
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	f040 8081 	bne.w	80018e6 <touch_register_element+0x14e>
		{
			touch_elements_register[page][layer][i].x = x0;
 80017e4:	79f9      	ldrb	r1, [r7, #7]
 80017e6:	79ba      	ldrb	r2, [r7, #6]
 80017e8:	4845      	ldr	r0, [pc, #276]	; (8001900 <touch_register_element+0x168>)
 80017ea:	4613      	mov	r3, r2
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	4413      	add	r3, r2
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	2264      	movs	r2, #100	; 0x64
 80017f4:	fb02 f201 	mul.w	r2, r2, r1
 80017f8:	441a      	add	r2, r3
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	4413      	add	r3, r2
 80017fe:	011b      	lsls	r3, r3, #4
 8001800:	4403      	add	r3, r0
 8001802:	88ba      	ldrh	r2, [r7, #4]
 8001804:	801a      	strh	r2, [r3, #0]
			touch_elements_register[page][layer][i].x1 =x1;
 8001806:	79f9      	ldrb	r1, [r7, #7]
 8001808:	79ba      	ldrb	r2, [r7, #6]
 800180a:	483d      	ldr	r0, [pc, #244]	; (8001900 <touch_register_element+0x168>)
 800180c:	4613      	mov	r3, r2
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	4413      	add	r3, r2
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	2264      	movs	r2, #100	; 0x64
 8001816:	fb02 f201 	mul.w	r2, r2, r1
 800181a:	441a      	add	r2, r3
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	4413      	add	r3, r2
 8001820:	011b      	lsls	r3, r3, #4
 8001822:	4403      	add	r3, r0
 8001824:	3304      	adds	r3, #4
 8001826:	8b3a      	ldrh	r2, [r7, #24]
 8001828:	801a      	strh	r2, [r3, #0]
			touch_elements_register[page][layer][i].y =y0;
 800182a:	79f9      	ldrb	r1, [r7, #7]
 800182c:	79ba      	ldrb	r2, [r7, #6]
 800182e:	4834      	ldr	r0, [pc, #208]	; (8001900 <touch_register_element+0x168>)
 8001830:	4613      	mov	r3, r2
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	4413      	add	r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	2264      	movs	r2, #100	; 0x64
 800183a:	fb02 f201 	mul.w	r2, r2, r1
 800183e:	441a      	add	r2, r3
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	4413      	add	r3, r2
 8001844:	011b      	lsls	r3, r3, #4
 8001846:	4403      	add	r3, r0
 8001848:	3302      	adds	r3, #2
 800184a:	887a      	ldrh	r2, [r7, #2]
 800184c:	801a      	strh	r2, [r3, #0]
			touch_elements_register[page][layer][i].y1 =y1;
 800184e:	79f9      	ldrb	r1, [r7, #7]
 8001850:	79ba      	ldrb	r2, [r7, #6]
 8001852:	482b      	ldr	r0, [pc, #172]	; (8001900 <touch_register_element+0x168>)
 8001854:	4613      	mov	r3, r2
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	4413      	add	r3, r2
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	2264      	movs	r2, #100	; 0x64
 800185e:	fb02 f201 	mul.w	r2, r2, r1
 8001862:	441a      	add	r2, r3
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	4413      	add	r3, r2
 8001868:	011b      	lsls	r3, r3, #4
 800186a:	4403      	add	r3, r0
 800186c:	3306      	adds	r3, #6
 800186e:	8bba      	ldrh	r2, [r7, #28]
 8001870:	801a      	strh	r2, [r3, #0]
			touch_elements_register[page][layer][i].element_type = element_type;
 8001872:	79f9      	ldrb	r1, [r7, #7]
 8001874:	79ba      	ldrb	r2, [r7, #6]
 8001876:	8c3b      	ldrh	r3, [r7, #32]
 8001878:	b2dc      	uxtb	r4, r3
 800187a:	4821      	ldr	r0, [pc, #132]	; (8001900 <touch_register_element+0x168>)
 800187c:	4613      	mov	r3, r2
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	4413      	add	r3, r2
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	2264      	movs	r2, #100	; 0x64
 8001886:	fb02 f201 	mul.w	r2, r2, r1
 800188a:	441a      	add	r2, r3
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	4413      	add	r3, r2
 8001890:	011b      	lsls	r3, r3, #4
 8001892:	4403      	add	r3, r0
 8001894:	3308      	adds	r3, #8
 8001896:	4622      	mov	r2, r4
 8001898:	701a      	strb	r2, [r3, #0]
			touch_elements_register[page][layer][i].element_pointer = element_pointer;
 800189a:	79f8      	ldrb	r0, [r7, #7]
 800189c:	79ba      	ldrb	r2, [r7, #6]
 800189e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80018a0:	4c17      	ldr	r4, [pc, #92]	; (8001900 <touch_register_element+0x168>)
 80018a2:	4613      	mov	r3, r2
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	4413      	add	r3, r2
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	2264      	movs	r2, #100	; 0x64
 80018ac:	fb02 f200 	mul.w	r2, r2, r0
 80018b0:	441a      	add	r2, r3
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	4413      	add	r3, r2
 80018b6:	011b      	lsls	r3, r3, #4
 80018b8:	4423      	add	r3, r4
 80018ba:	330c      	adds	r3, #12
 80018bc:	6019      	str	r1, [r3, #0]
			touch_elements_register[page][layer][i].isAlive = 1;
 80018be:	79f9      	ldrb	r1, [r7, #7]
 80018c0:	79ba      	ldrb	r2, [r7, #6]
 80018c2:	480f      	ldr	r0, [pc, #60]	; (8001900 <touch_register_element+0x168>)
 80018c4:	4613      	mov	r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	4413      	add	r3, r2
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	2264      	movs	r2, #100	; 0x64
 80018ce:	fb02 f201 	mul.w	r2, r2, r1
 80018d2:	441a      	add	r2, r3
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	4413      	add	r3, r2
 80018d8:	011b      	lsls	r3, r3, #4
 80018da:	4403      	add	r3, r0
 80018dc:	3309      	adds	r3, #9
 80018de:	2201      	movs	r2, #1
 80018e0:	701a      	strb	r2, [r3, #0]
#if DEBUG_TOUCH == 1
			printf("\n\rElement registered with index: %d\n\r",i);
			printf("\n\rElement values: %d %d %d %d %d %d %d\n\r",x0,x1,y0,y1,element_pointer,element_type);
#endif
			return 0;
 80018e2:	2300      	movs	r3, #0
 80018e4:	e007      	b.n	80018f6 <touch_register_element+0x15e>
	for(int i = 0;i<MAX_NUM_ELEMENTS;i++)
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	3301      	adds	r3, #1
 80018ea:	60fb      	str	r3, [r7, #12]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2b13      	cmp	r3, #19
 80018f0:	f77f af64 	ble.w	80017bc <touch_register_element+0x24>
		}
	}

	return -1;
 80018f4:	23ff      	movs	r3, #255	; 0xff
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3710      	adds	r7, #16
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bc90      	pop	{r4, r7}
 80018fe:	4770      	bx	lr
 8001900:	20000150 	.word	0x20000150

08001904 <HAL_GPIO_EXTI_Callback>:
//External interrupt from touc IC
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	4603      	mov	r3, r0
 800190c:	80fb      	strh	r3, [r7, #6]
	touch.pressed=1;
 800190e:	4b04      	ldr	r3, [pc, #16]	; (8001920 <HAL_GPIO_EXTI_Callback+0x1c>)
 8001910:	2201      	movs	r2, #1
 8001912:	811a      	strh	r2, [r3, #8]
#if DEBUG_TOUCH == 1
	printf("Interrupt touch");
#endif
}
 8001914:	bf00      	nop
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	200000dc 	.word	0x200000dc

08001924 <touch_write_control>:
	touch_elements_register[page][layer][idx].element_pointer = 0;
}
/*----------------------------------------------Private function---------------------------------------------------*/
//Write to touch IC control command via I2C
static void touch_write_control(unsigned char ctrl)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af02      	add	r7, sp, #8
 800192a:	4603      	mov	r3, r0
 800192c:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status =0;
 800192e:	2300      	movs	r3, #0
 8001930:	73fb      	strb	r3, [r7, #15]
	status = HAL_I2C_Master_Transmit(&hi2c1_touch, (uint16_t)SLAVE_ADDRESS_TOUCH, &ctrl, 1 ,I2C_DELAY);
 8001932:	1dfa      	adds	r2, r7, #7
 8001934:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001938:	9300      	str	r3, [sp, #0]
 800193a:	2301      	movs	r3, #1
 800193c:	2190      	movs	r1, #144	; 0x90
 800193e:	4804      	ldr	r0, [pc, #16]	; (8001950 <touch_write_control+0x2c>)
 8001940:	f003 fd62 	bl	8005408 <HAL_I2C_Master_Transmit>
 8001944:	4603      	mov	r3, r0
 8001946:	73fb      	strb	r3, [r7, #15]
#if DEBUG_TOUCH == 1
	printf("Write control I2C\n\r");
	printf ("%d",status);
#endif
}
 8001948:	bf00      	nop
 800194a:	3710      	adds	r7, #16
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	200000ec 	.word	0x200000ec

08001954 <touch_write_register>:
//Write to touch IC data via I2C
static void touch_write_register(uint8_t adr, uint16_t val)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b088      	sub	sp, #32
 8001958:	af04      	add	r7, sp, #16
 800195a:	4603      	mov	r3, r0
 800195c:	460a      	mov	r2, r1
 800195e:	71fb      	strb	r3, [r7, #7]
 8001960:	4613      	mov	r3, r2
 8001962:	80bb      	strh	r3, [r7, #4]

	HAL_StatusTypeDef status =0;
 8001964:	2300      	movs	r3, #0
 8001966:	73fb      	strb	r3, [r7, #15]
	uint8_t data[2];
	data[0] = val>>8;
 8001968:	88bb      	ldrh	r3, [r7, #4]
 800196a:	0a1b      	lsrs	r3, r3, #8
 800196c:	b29b      	uxth	r3, r3
 800196e:	b2db      	uxtb	r3, r3
 8001970:	733b      	strb	r3, [r7, #12]
	data[1] = (uint8_t)val;
 8001972:	88bb      	ldrh	r3, [r7, #4]
 8001974:	b2db      	uxtb	r3, r3
 8001976:	737b      	strb	r3, [r7, #13]
	status = HAL_I2C_Mem_Write(&hi2c1_touch, (uint16_t)SLAVE_ADDRESS_TOUCH,(adr<<3),I2C_MEMADD_SIZE_8BIT,data,2,I2C_DELAY);
 8001978:	79fb      	ldrb	r3, [r7, #7]
 800197a:	b29b      	uxth	r3, r3
 800197c:	00db      	lsls	r3, r3, #3
 800197e:	b29a      	uxth	r2, r3
 8001980:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001984:	9302      	str	r3, [sp, #8]
 8001986:	2302      	movs	r3, #2
 8001988:	9301      	str	r3, [sp, #4]
 800198a:	f107 030c 	add.w	r3, r7, #12
 800198e:	9300      	str	r3, [sp, #0]
 8001990:	2301      	movs	r3, #1
 8001992:	2190      	movs	r1, #144	; 0x90
 8001994:	4804      	ldr	r0, [pc, #16]	; (80019a8 <touch_write_register+0x54>)
 8001996:	f003 fe35 	bl	8005604 <HAL_I2C_Mem_Write>
 800199a:	4603      	mov	r3, r0
 800199c:	73fb      	strb	r3, [r7, #15]
#if DEBUG_TOUCH == 1
	printf ("I2C write register\n\r");
	printf ("status %d \n\r",status);
#endif
}
 800199e:	bf00      	nop
 80019a0:	3710      	adds	r7, #16
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	200000ec 	.word	0x200000ec

080019ac <touch_read>:
//Read data via I2C from touch IC
static unsigned short touch_read(unsigned char adr)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b088      	sub	sp, #32
 80019b0:	af04      	add	r7, sp, #16
 80019b2:	4603      	mov	r3, r0
 80019b4:	71fb      	strb	r3, [r7, #7]
	unsigned char adr_i2c= 0x01;
 80019b6:	2301      	movs	r3, #1
 80019b8:	73fb      	strb	r3, [r7, #15]
	adr_i2c+=adr<<3;
 80019ba:	79fb      	ldrb	r3, [r7, #7]
 80019bc:	00db      	lsls	r3, r3, #3
 80019be:	b2da      	uxtb	r2, r3
 80019c0:	7bfb      	ldrb	r3, [r7, #15]
 80019c2:	4413      	add	r3, r2
 80019c4:	73fb      	strb	r3, [r7, #15]
	uint8_t data[2];
	HAL_StatusTypeDef status =0;
 80019c6:	2300      	movs	r3, #0
 80019c8:	73bb      	strb	r3, [r7, #14]
	status = HAL_I2C_Mem_Read(&hi2c1_touch, (uint16_t)SLAVE_ADDRESS_TOUCH ,adr_i2c,I2C_MEMADD_SIZE_8BIT,data, 2, I2C_DELAY);
 80019ca:	7bfb      	ldrb	r3, [r7, #15]
 80019cc:	b29a      	uxth	r2, r3
 80019ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019d2:	9302      	str	r3, [sp, #8]
 80019d4:	2302      	movs	r3, #2
 80019d6:	9301      	str	r3, [sp, #4]
 80019d8:	f107 0308 	add.w	r3, r7, #8
 80019dc:	9300      	str	r3, [sp, #0]
 80019de:	2301      	movs	r3, #1
 80019e0:	2190      	movs	r1, #144	; 0x90
 80019e2:	4809      	ldr	r0, [pc, #36]	; (8001a08 <touch_read+0x5c>)
 80019e4:	f003 ff08 	bl	80057f8 <HAL_I2C_Mem_Read>
 80019e8:	4603      	mov	r3, r0
 80019ea:	73bb      	strb	r3, [r7, #14]
	uint16_t result = (data[0] << 8) | (data[1] & 0xFF);
 80019ec:	7a3b      	ldrb	r3, [r7, #8]
 80019ee:	021b      	lsls	r3, r3, #8
 80019f0:	b21a      	sxth	r2, r3
 80019f2:	7a7b      	ldrb	r3, [r7, #9]
 80019f4:	b21b      	sxth	r3, r3
 80019f6:	4313      	orrs	r3, r2
 80019f8:	b21b      	sxth	r3, r3
 80019fa:	81bb      	strh	r3, [r7, #12]
	return result;
 80019fc:	89bb      	ldrh	r3, [r7, #12]
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3710      	adds	r7, #16
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	200000ec 	.word	0x200000ec
 8001a0c:	00000000 	.word	0x00000000

08001a10 <validate_touch_coordinates>:
//Transform and validate touch coordinates
static uint8_t validate_touch_coordinates(void)
{
 8001a10:	b5b0      	push	{r4, r5, r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
	if(touch.x<MIN_X) return 0;
	if(touch.x>MAX_X) return 0;
 8001a16:	4b56      	ldr	r3, [pc, #344]	; (8001b70 <validate_touch_coordinates+0x160>)
 8001a18:	881b      	ldrh	r3, [r3, #0]
 8001a1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a1e:	d901      	bls.n	8001a24 <validate_touch_coordinates+0x14>
 8001a20:	2300      	movs	r3, #0
 8001a22:	e087      	b.n	8001b34 <validate_touch_coordinates+0x124>
	if(touch.y<MIN_Y) return 0;
	if(touch.y>MAX_Y) return 0;
 8001a24:	4b52      	ldr	r3, [pc, #328]	; (8001b70 <validate_touch_coordinates+0x160>)
 8001a26:	885b      	ldrh	r3, [r3, #2]
 8001a28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a2c:	d901      	bls.n	8001a32 <validate_touch_coordinates+0x22>
 8001a2e:	2300      	movs	r3, #0
 8001a30:	e080      	b.n	8001b34 <validate_touch_coordinates+0x124>

	touch.x=touch.x - MIN_X;
 8001a32:	4b4f      	ldr	r3, [pc, #316]	; (8001b70 <validate_touch_coordinates+0x160>)
 8001a34:	881a      	ldrh	r2, [r3, #0]
 8001a36:	4b4e      	ldr	r3, [pc, #312]	; (8001b70 <validate_touch_coordinates+0x160>)
 8001a38:	801a      	strh	r2, [r3, #0]
	touch.y=touch.y - MIN_Y;
 8001a3a:	4b4d      	ldr	r3, [pc, #308]	; (8001b70 <validate_touch_coordinates+0x160>)
 8001a3c:	885a      	ldrh	r2, [r3, #2]
 8001a3e:	4b4c      	ldr	r3, [pc, #304]	; (8001b70 <validate_touch_coordinates+0x160>)
 8001a40:	805a      	strh	r2, [r3, #2]
#if LINEAR_INTERPOLATION == 1
	touch.x = linear_interpolation((long)touch.x,40,970,0,480);
	touch.y = linear_interpolation((long)touch.y,40,970,0,340);
#else
	double x,y;
	x = X_A* (int16_t)touch.x + X_B *(int16_t)touch.y +X_L;
 8001a42:	4b4b      	ldr	r3, [pc, #300]	; (8001b70 <validate_touch_coordinates+0x160>)
 8001a44:	881b      	ldrh	r3, [r3, #0]
 8001a46:	b21b      	sxth	r3, r3
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7fe fe9d 	bl	8000788 <__aeabi_i2d>
 8001a4e:	a33c      	add	r3, pc, #240	; (adr r3, 8001b40 <validate_touch_coordinates+0x130>)
 8001a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a54:	f7fe fc1c 	bl	8000290 <__aeabi_dmul>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	4614      	mov	r4, r2
 8001a5e:	461d      	mov	r5, r3
 8001a60:	4b43      	ldr	r3, [pc, #268]	; (8001b70 <validate_touch_coordinates+0x160>)
 8001a62:	885b      	ldrh	r3, [r3, #2]
 8001a64:	b21b      	sxth	r3, r3
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7fe fe8e 	bl	8000788 <__aeabi_i2d>
 8001a6c:	a336      	add	r3, pc, #216	; (adr r3, 8001b48 <validate_touch_coordinates+0x138>)
 8001a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a72:	f7fe fc0d 	bl	8000290 <__aeabi_dmul>
 8001a76:	4602      	mov	r2, r0
 8001a78:	460b      	mov	r3, r1
 8001a7a:	4620      	mov	r0, r4
 8001a7c:	4629      	mov	r1, r5
 8001a7e:	f7fe fd37 	bl	80004f0 <__adddf3>
 8001a82:	4602      	mov	r2, r0
 8001a84:	460b      	mov	r3, r1
 8001a86:	4610      	mov	r0, r2
 8001a88:	4619      	mov	r1, r3
 8001a8a:	a331      	add	r3, pc, #196	; (adr r3, 8001b50 <validate_touch_coordinates+0x140>)
 8001a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a90:	f7fe fd2c 	bl	80004ec <__aeabi_dsub>
 8001a94:	4602      	mov	r2, r0
 8001a96:	460b      	mov	r3, r1
 8001a98:	e9c7 2302 	strd	r2, r3, [r7, #8]
	y = Y_A* (int16_t)touch.x + Y_B *(int16_t)touch.y +Y_L;
 8001a9c:	4b34      	ldr	r3, [pc, #208]	; (8001b70 <validate_touch_coordinates+0x160>)
 8001a9e:	881b      	ldrh	r3, [r3, #0]
 8001aa0:	b21b      	sxth	r3, r3
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7fe fe70 	bl	8000788 <__aeabi_i2d>
 8001aa8:	a32b      	add	r3, pc, #172	; (adr r3, 8001b58 <validate_touch_coordinates+0x148>)
 8001aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aae:	f7fe fbef 	bl	8000290 <__aeabi_dmul>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	4614      	mov	r4, r2
 8001ab8:	461d      	mov	r5, r3
 8001aba:	4b2d      	ldr	r3, [pc, #180]	; (8001b70 <validate_touch_coordinates+0x160>)
 8001abc:	885b      	ldrh	r3, [r3, #2]
 8001abe:	b21b      	sxth	r3, r3
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7fe fe61 	bl	8000788 <__aeabi_i2d>
 8001ac6:	a326      	add	r3, pc, #152	; (adr r3, 8001b60 <validate_touch_coordinates+0x150>)
 8001ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001acc:	f7fe fbe0 	bl	8000290 <__aeabi_dmul>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	4620      	mov	r0, r4
 8001ad6:	4629      	mov	r1, r5
 8001ad8:	f7fe fd0a 	bl	80004f0 <__adddf3>
 8001adc:	4602      	mov	r2, r0
 8001ade:	460b      	mov	r3, r1
 8001ae0:	4610      	mov	r0, r2
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	a320      	add	r3, pc, #128	; (adr r3, 8001b68 <validate_touch_coordinates+0x158>)
 8001ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aea:	f7fe fcff 	bl	80004ec <__aeabi_dsub>
 8001aee:	4602      	mov	r2, r0
 8001af0:	460b      	mov	r3, r1
 8001af2:	e9c7 2300 	strd	r2, r3, [r7]
	touch.x = (uint16_t)x;
 8001af6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001afa:	f7fe feaf 	bl	800085c <__aeabi_d2uiz>
 8001afe:	4603      	mov	r3, r0
 8001b00:	b29a      	uxth	r2, r3
 8001b02:	4b1b      	ldr	r3, [pc, #108]	; (8001b70 <validate_touch_coordinates+0x160>)
 8001b04:	801a      	strh	r2, [r3, #0]
	touch.y = (uint16_t)y;
 8001b06:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b0a:	f7fe fea7 	bl	800085c <__aeabi_d2uiz>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	b29a      	uxth	r2, r3
 8001b12:	4b17      	ldr	r3, [pc, #92]	; (8001b70 <validate_touch_coordinates+0x160>)
 8001b14:	805a      	strh	r2, [r3, #2]
#endif
#if DEBUG_TOUCH == 1
	printf("TOUCH y %d\n\r", touch.y);
	printf("TOUCH X %d\n\r", touch.x);
#endif
	if (touch.x >= 0 && touch.x <= LCD_PIXEL_WIDTH)
 8001b16:	4b16      	ldr	r3, [pc, #88]	; (8001b70 <validate_touch_coordinates+0x160>)
 8001b18:	881b      	ldrh	r3, [r3, #0]
 8001b1a:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001b1e:	d801      	bhi.n	8001b24 <validate_touch_coordinates+0x114>
	{
		return 1;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e007      	b.n	8001b34 <validate_touch_coordinates+0x124>
	}
	if (touch.y >= 0 && touch.y <= LCD_PIXEL_HEIGHT)
 8001b24:	4b12      	ldr	r3, [pc, #72]	; (8001b70 <validate_touch_coordinates+0x160>)
 8001b26:	885b      	ldrh	r3, [r3, #2]
 8001b28:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001b2c:	d801      	bhi.n	8001b32 <validate_touch_coordinates+0x122>
	{
		return 1;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e000      	b.n	8001b34 <validate_touch_coordinates+0x124>
	}


	return 0;
 8001b32:	2300      	movs	r3, #0
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3710      	adds	r7, #16
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bdb0      	pop	{r4, r5, r7, pc}
 8001b3c:	f3af 8000 	nop.w
 8001b40:	c7e28241 	.word	0xc7e28241
 8001b44:	3fe0bb98 	.word	0x3fe0bb98
 8001b48:	8db8bac7 	.word	0x8db8bac7
 8001b4c:	3f66f006 	.word	0x3f66f006
 8001b50:	b71758e2 	.word	0xb71758e2
 8001b54:	403fc0d1 	.word	0x403fc0d1
 8001b58:	d2f1a9fc 	.word	0xd2f1a9fc
 8001b5c:	bf70624d 	.word	0xbf70624d
 8001b60:	ab367a10 	.word	0xab367a10
 8001b64:	3fd7573e 	.word	0x3fd7573e
 8001b68:	e219652c 	.word	0xe219652c
 8001b6c:	4036d758 	.word	0x4036d758
 8001b70:	200000dc 	.word	0x200000dc

08001b74 <delay_ms>:
	{
		  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	}
#endif
//Delay in ms
static void delay_ms(__IO uint32_t nCount1) {
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
	__IO uint32_t nCount=nCount1*23666;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f645 4272 	movw	r2, #23666	; 0x5c72
 8001b82:	fb02 f303 	mul.w	r3, r2, r3
 8001b86:	60fb      	str	r3, [r7, #12]
	while(nCount--) {
 8001b88:	bf00      	nop
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	1e5a      	subs	r2, r3, #1
 8001b8e:	60fa      	str	r2, [r7, #12]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d1fa      	bne.n	8001b8a <delay_ms+0x16>
  }
}
 8001b94:	bf00      	nop
 8001b96:	bf00      	nop
 8001b98:	3714      	adds	r7, #20
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
	...

08001ba4 <configFromUart>:

/*
 * Attempts to read configuration data from UART and save them to external flash.
 * Returns: 0 when configuration successful, 1 when no configuration data detected on uart, 2 or greater when configuration failed
 */
int configFromUart(){
 8001ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ba6:	f5ad 5d4b 	sub.w	sp, sp, #12992	; 0x32c0
 8001baa:	b089      	sub	sp, #36	; 0x24
 8001bac:	af04      	add	r7, sp, #16

	char msg[128];

	int count = read_usart_message(msg, &huart1, sizeof(msg), NEWLINE);
 8001bae:	f507 5048 	add.w	r0, r7, #12800	; 0x3200
 8001bb2:	f100 0028 	add.w	r0, r0, #40	; 0x28
 8001bb6:	230d      	movs	r3, #13
 8001bb8:	2280      	movs	r2, #128	; 0x80
 8001bba:	49af      	ldr	r1, [pc, #700]	; (8001e78 <configFromUart+0x2d4>)
 8001bbc:	f002 fe7e 	bl	80048bc <read_usart_message>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8001bc6:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8001bca:	6013      	str	r3, [r2, #0]



	if(count == 0){
 8001bcc:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8001bd0:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d105      	bne.n	8001be6 <configFromUart+0x42>
		printf("[cl] No data on uart.\n\r");
 8001bda:	48a8      	ldr	r0, [pc, #672]	; (8001e7c <configFromUart+0x2d8>)
 8001bdc:	f006 ff64 	bl	8008aa8 <iprintf>
		return 1;
 8001be0:	2301      	movs	r3, #1
 8001be2:	f000 be39 	b.w	8002858 <configFromUart+0xcb4>
	}

	msg[count-1] = 0; //replace newline delimiter with null-termination
 8001be6:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8001bea:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	3b01      	subs	r3, #1
 8001bf2:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 8001bf6:	f102 0210 	add.w	r2, r2, #16
 8001bfa:	4413      	add	r3, r2
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	f803 2ca8 	strb.w	r2, [r3, #-168]

	char expectedFirstMsg[] = "config";
 8001c02:	4a9f      	ldr	r2, [pc, #636]	; (8001e80 <configFromUart+0x2dc>)
 8001c04:	f507 5348 	add.w	r3, r7, #12800	; 0x3200
 8001c08:	f103 0320 	add.w	r3, r3, #32
 8001c0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c10:	6018      	str	r0, [r3, #0]
 8001c12:	3304      	adds	r3, #4
 8001c14:	8019      	strh	r1, [r3, #0]
 8001c16:	3302      	adds	r3, #2
 8001c18:	0c0a      	lsrs	r2, r1, #16
 8001c1a:	701a      	strb	r2, [r3, #0]

	if(strcmp(expectedFirstMsg, msg) != 0){
 8001c1c:	f507 5248 	add.w	r2, r7, #12800	; 0x3200
 8001c20:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8001c24:	f507 5348 	add.w	r3, r7, #12800	; 0x3200
 8001c28:	f103 0320 	add.w	r3, r3, #32
 8001c2c:	4611      	mov	r1, r2
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7fe face 	bl	80001d0 <strcmp>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d00e      	beq.n	8001c58 <configFromUart+0xb4>
		printf("[cl] Unexpected first msg. Got %s, wanted %s.\n\r", msg, expectedFirstMsg);
 8001c3a:	f507 5248 	add.w	r2, r7, #12800	; 0x3200
 8001c3e:	f102 0220 	add.w	r2, r2, #32
 8001c42:	f507 5348 	add.w	r3, r7, #12800	; 0x3200
 8001c46:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	488d      	ldr	r0, [pc, #564]	; (8001e84 <configFromUart+0x2e0>)
 8001c4e:	f006 ff2b 	bl	8008aa8 <iprintf>
		return 1;
 8001c52:	2301      	movs	r3, #1
 8001c54:	f000 be00 	b.w	8002858 <configFromUart+0xcb4>
	}

	UART_READ_STRING(); //read general config - number of screens
 8001c58:	f507 5048 	add.w	r0, r7, #12800	; 0x3200
 8001c5c:	f100 0028 	add.w	r0, r0, #40	; 0x28
 8001c60:	230d      	movs	r3, #13
 8001c62:	2280      	movs	r2, #128	; 0x80
 8001c64:	4984      	ldr	r1, [pc, #528]	; (8001e78 <configFromUart+0x2d4>)
 8001c66:	f002 fe29 	bl	80048bc <read_usart_message>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8001c70:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8001c74:	6013      	str	r3, [r2, #0]
 8001c76:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8001c7a:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d0e9      	beq.n	8001c58 <configFromUart+0xb4>
 8001c84:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8001c88:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 8001c94:	f102 0210 	add.w	r2, r2, #16
 8001c98:	4413      	add	r3, r2
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f803 2ca8 	strb.w	r2, [r3, #-168]

	int totalScreens = atoi(msg);
 8001ca0:	f507 5348 	add.w	r3, r7, #12800	; 0x3200
 8001ca4:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f006 feb9 	bl	8008a20 <atoi>
 8001cae:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8001cb2:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8001cb6:	6018      	str	r0, [r3, #0]

	if(totalScreens < 1 || totalScreens >256){
 8001cb8:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8001cbc:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	dd07      	ble.n	8001cd6 <configFromUart+0x132>
 8001cc6:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8001cca:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cd4:	dd0a      	ble.n	8001cec <configFromUart+0x148>
		printf("[cl] Got %d, which is not a valid number of screens.\n\r", totalScreens);
 8001cd6:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8001cda:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8001cde:	6819      	ldr	r1, [r3, #0]
 8001ce0:	4869      	ldr	r0, [pc, #420]	; (8001e88 <configFromUart+0x2e4>)
 8001ce2:	f006 fee1 	bl	8008aa8 <iprintf>
		return 2;
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	f000 bdb6 	b.w	8002858 <configFromUart+0xcb4>
	}

	struct generalConfig gconf;

	memset(&gconf.screenSectors, 0, sizeof(gconf.screenSectors));
 8001cec:	f507 5340 	add.w	r3, r7, #12288	; 0x3000
 8001cf0:	f103 031c 	add.w	r3, r3, #28
 8001cf4:	3302      	adds	r3, #2
 8001cf6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cfa:	2100      	movs	r1, #0
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f006 fecb 	bl	8008a98 <memset>
	gconf.totalScreens = totalScreens;
 8001d02:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8001d06:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	b2da      	uxtb	r2, r3
 8001d0e:	f507 5340 	add.w	r3, r7, #12288	; 0x3000
 8001d12:	f103 031c 	add.w	r3, r3, #28
 8001d16:	701a      	strb	r2, [r3, #0]

	printf("[cl] Ok, expecting %d screens worth of data.\n\r", totalScreens);
 8001d18:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8001d1c:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8001d20:	6819      	ldr	r1, [r3, #0]
 8001d22:	485a      	ldr	r0, [pc, #360]	; (8001e8c <configFromUart+0x2e8>)
 8001d24:	f006 fec0 	bl	8008aa8 <iprintf>

	uint8_t currentScreenIndex = -1;
 8001d28:	23ff      	movs	r3, #255	; 0xff
 8001d2a:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 8001d2e:	f102 020f 	add.w	r2, r2, #15
 8001d32:	7013      	strb	r3, [r2, #0]
	uint16_t currentSector = GENERAL_CONFIG_SECTOR;
 8001d34:	2300      	movs	r3, #0
 8001d36:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 8001d3a:	f102 020c 	add.w	r2, r2, #12
 8001d3e:	8013      	strh	r3, [r2, #0]
	uint16_t currentScreenObjectsLeft = 0;
 8001d40:	2300      	movs	r3, #0
 8001d42:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 8001d46:	f102 020a 	add.w	r2, r2, #10
 8001d4a:	8013      	strh	r3, [r2, #0]

	char screenStr[] = "screen";
 8001d4c:	f507 5340 	add.w	r3, r7, #12288	; 0x3000
 8001d50:	f103 0314 	add.w	r3, r3, #20
 8001d54:	4a4e      	ldr	r2, [pc, #312]	; (8001e90 <configFromUart+0x2ec>)
 8001d56:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d5a:	6018      	str	r0, [r3, #0]
 8001d5c:	3304      	adds	r3, #4
 8001d5e:	8019      	strh	r1, [r3, #0]
 8001d60:	3302      	adds	r3, #2
 8001d62:	0c0a      	lsrs	r2, r1, #16
 8001d64:	701a      	strb	r2, [r3, #0]

	#define MAX_DATA_SIZE 8192
	uint8_t sectorBuffer[SECTOR_SIZE]; //holds sector before writing to external flash
	int sectorBufferIndex = 0;
 8001d66:	2300      	movs	r3, #0
 8001d68:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 8001d6c:	f102 0204 	add.w	r2, r2, #4
 8001d70:	6013      	str	r3, [r2, #0]
	uint8_t dataBuffer[MAX_DATA_SIZE];
	int dataBufferIndex = 0;
 8001d72:	2300      	movs	r3, #0
 8001d74:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 8001d78:	6013      	str	r3, [r2, #0]

	while(1){

		if(currentScreenIndex + 1 == totalScreens){
 8001d7a:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8001d7e:	f103 030f 	add.w	r3, r3, #15
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	3301      	adds	r3, #1
 8001d86:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8001d8a:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8001d8e:	6812      	ldr	r2, [r2, #0]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d12f      	bne.n	8001df4 <configFromUart+0x250>
			printf("[cl] All screens' data received.\n\r");
 8001d94:	483f      	ldr	r0, [pc, #252]	; (8001e94 <configFromUart+0x2f0>)
 8001d96:	f006 fe87 	bl	8008aa8 <iprintf>
	}

	//all screens have been written.
	//Now save generic config, since sector address array has been completed:

	printf("Gconf screens %d \n\r", gconf.totalScreens);
 8001d9a:	f507 5340 	add.w	r3, r7, #12288	; 0x3000
 8001d9e:	f103 031c 	add.w	r3, r3, #28
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	4619      	mov	r1, r3
 8001da6:	483c      	ldr	r0, [pc, #240]	; (8001e98 <configFromUart+0x2f4>)
 8001da8:	f006 fe7e 	bl	8008aa8 <iprintf>

	sectorBufferIndex = 0;
 8001dac:	2300      	movs	r3, #0
 8001dae:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 8001db2:	f102 0204 	add.w	r2, r2, #4
 8001db6:	6013      	str	r3, [r2, #0]
	memcpy(sectorBuffer+sectorBufferIndex, (uint8_t *) &gconf, 100);//sizeof(gconf));
 8001db8:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8001dbc:	f103 0304 	add.w	r3, r3, #4
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001dc6:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8001dca:	3b1c      	subs	r3, #28
 8001dcc:	4413      	add	r3, r2
 8001dce:	f507 5140 	add.w	r1, r7, #12288	; 0x3000
 8001dd2:	f101 011c 	add.w	r1, r1, #28
 8001dd6:	2264      	movs	r2, #100	; 0x64
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f006 fe4f 	bl	8008a7c <memcpy>

	printf("J ");
 8001dde:	482f      	ldr	r0, [pc, #188]	; (8001e9c <configFromUart+0x2f8>)
 8001de0:	f006 fe62 	bl	8008aa8 <iprintf>
	int j;
	for(j=0; j<sizeof(gconf); j++){
 8001de4:	2300      	movs	r3, #0
 8001de6:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8001dea:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8001dee:	6013      	str	r3, [r2, #0]
 8001df0:	f000 bd11 	b.w	8002816 <configFromUart+0xc72>
		UART_READ_STRING();
 8001df4:	f507 5048 	add.w	r0, r7, #12800	; 0x3200
 8001df8:	f100 0028 	add.w	r0, r0, #40	; 0x28
 8001dfc:	230d      	movs	r3, #13
 8001dfe:	2280      	movs	r2, #128	; 0x80
 8001e00:	491d      	ldr	r1, [pc, #116]	; (8001e78 <configFromUart+0x2d4>)
 8001e02:	f002 fd5b 	bl	80048bc <read_usart_message>
 8001e06:	4603      	mov	r3, r0
 8001e08:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8001e0c:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8001e10:	6013      	str	r3, [r2, #0]
 8001e12:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8001e16:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d0e9      	beq.n	8001df4 <configFromUart+0x250>
 8001e20:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8001e24:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 8001e30:	f102 0210 	add.w	r2, r2, #16
 8001e34:	4413      	add	r3, r2
 8001e36:	2200      	movs	r2, #0
 8001e38:	f803 2ca8 	strb.w	r2, [r3, #-168]
		if(strcmp(screenStr, msg) != 0){
 8001e3c:	f507 5248 	add.w	r2, r7, #12800	; 0x3200
 8001e40:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8001e44:	f507 5340 	add.w	r3, r7, #12288	; 0x3000
 8001e48:	f103 0314 	add.w	r3, r3, #20
 8001e4c:	4611      	mov	r1, r2
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7fe f9be 	bl	80001d0 <strcmp>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d024      	beq.n	8001ea4 <configFromUart+0x300>
			printf("[cl] Unexpected input - wanted %s, got %s. \n\r",screenStr, msg);
 8001e5a:	f507 5248 	add.w	r2, r7, #12800	; 0x3200
 8001e5e:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8001e62:	f507 5340 	add.w	r3, r7, #12288	; 0x3000
 8001e66:	f103 0314 	add.w	r3, r3, #20
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	480c      	ldr	r0, [pc, #48]	; (8001ea0 <configFromUart+0x2fc>)
 8001e6e:	f006 fe1b 	bl	8008aa8 <iprintf>
			return 3;
 8001e72:	2303      	movs	r3, #3
 8001e74:	f000 bcf0 	b.w	8002858 <configFromUart+0xcb4>
 8001e78:	20002188 	.word	0x20002188
 8001e7c:	08009a98 	.word	0x08009a98
 8001e80:	08009d90 	.word	0x08009d90
 8001e84:	08009ab0 	.word	0x08009ab0
 8001e88:	08009ae0 	.word	0x08009ae0
 8001e8c:	08009b18 	.word	0x08009b18
 8001e90:	08009d98 	.word	0x08009d98
 8001e94:	08009b48 	.word	0x08009b48
 8001e98:	08009b6c 	.word	0x08009b6c
 8001e9c:	08009b80 	.word	0x08009b80
 8001ea0:	08009b84 	.word	0x08009b84
		UART_READ_STRING();
 8001ea4:	f507 5048 	add.w	r0, r7, #12800	; 0x3200
 8001ea8:	f100 0028 	add.w	r0, r0, #40	; 0x28
 8001eac:	230d      	movs	r3, #13
 8001eae:	2280      	movs	r2, #128	; 0x80
 8001eb0:	4975      	ldr	r1, [pc, #468]	; (8002088 <configFromUart+0x4e4>)
 8001eb2:	f002 fd03 	bl	80048bc <read_usart_message>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8001ebc:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8001ec0:	6013      	str	r3, [r2, #0]
 8001ec2:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8001ec6:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d0e9      	beq.n	8001ea4 <configFromUart+0x300>
 8001ed0:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8001ed4:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	3b01      	subs	r3, #1
 8001edc:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 8001ee0:	f102 0210 	add.w	r2, r2, #16
 8001ee4:	4413      	add	r3, r2
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f803 2ca8 	strb.w	r2, [r3, #-168]
		currentScreenObjectsLeft = atoi(msg);
 8001eec:	f507 5348 	add.w	r3, r7, #12800	; 0x3200
 8001ef0:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f006 fd93 	bl	8008a20 <atoi>
 8001efa:	4603      	mov	r3, r0
 8001efc:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 8001f00:	f102 020a 	add.w	r2, r2, #10
 8001f04:	8013      	strh	r3, [r2, #0]
		printf("[cl] Ok, expecting %d objects for current screen.\n\r", currentScreenObjectsLeft);
 8001f06:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8001f0a:	f103 030a 	add.w	r3, r3, #10
 8001f0e:	881b      	ldrh	r3, [r3, #0]
 8001f10:	4619      	mov	r1, r3
 8001f12:	485e      	ldr	r0, [pc, #376]	; (800208c <configFromUart+0x4e8>)
 8001f14:	f006 fdc8 	bl	8008aa8 <iprintf>
		screenVar.objectCount = currentScreenObjectsLeft;
 8001f18:	f107 0310 	add.w	r3, r7, #16
 8001f1c:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 8001f20:	f102 020a 	add.w	r2, r2, #10
 8001f24:	8812      	ldrh	r2, [r2, #0]
 8001f26:	805a      	strh	r2, [r3, #2]
		screenVar.screenNumber = currentScreenIndex;
 8001f28:	f107 0310 	add.w	r3, r7, #16
 8001f2c:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 8001f30:	f102 020f 	add.w	r2, r2, #15
 8001f34:	7812      	ldrb	r2, [r2, #0]
 8001f36:	701a      	strb	r2, [r3, #0]
		currentSector += 1; //begin new sector -- screens are sector-aligned for easier access
 8001f38:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8001f3c:	f103 030c 	add.w	r3, r3, #12
 8001f40:	881b      	ldrh	r3, [r3, #0]
 8001f42:	3301      	adds	r3, #1
 8001f44:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 8001f48:	f102 020c 	add.w	r2, r2, #12
 8001f4c:	8013      	strh	r3, [r2, #0]
		currentScreenIndex += 1;
 8001f4e:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8001f52:	f103 030f 	add.w	r3, r3, #15
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	3301      	adds	r3, #1
 8001f5a:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 8001f5e:	f102 020f 	add.w	r2, r2, #15
 8001f62:	7013      	strb	r3, [r2, #0]
		gconf.screenSectors[currentScreenIndex] = currentSector;
 8001f64:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8001f68:	f103 030f 	add.w	r3, r3, #15
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	f507 5240 	add.w	r2, r7, #12288	; 0x3000
 8001f72:	f102 021c 	add.w	r2, r2, #28
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	4413      	add	r3, r2
 8001f7a:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 8001f7e:	f102 020c 	add.w	r2, r2, #12
 8001f82:	8812      	ldrh	r2, [r2, #0]
 8001f84:	805a      	strh	r2, [r3, #2]
		ext_flash_erase_4kB(currentSector*SECTOR_SIZE);
 8001f86:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8001f8a:	f103 030c 	add.w	r3, r3, #12
 8001f8e:	881b      	ldrh	r3, [r3, #0]
 8001f90:	031b      	lsls	r3, r3, #12
 8001f92:	4618      	mov	r0, r3
 8001f94:	f000 fef2 	bl	8002d7c <ext_flash_erase_4kB>
		memset(sectorBuffer, 0, SECTOR_SIZE);
 8001f98:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001f9c:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8001fa0:	3b1c      	subs	r3, #28
 8001fa2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001fa6:	2100      	movs	r1, #0
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f006 fd75 	bl	8008a98 <memset>
		sectorBufferIndex = 0;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 8001fb4:	f102 0204 	add.w	r2, r2, #4
 8001fb8:	6013      	str	r3, [r2, #0]
		memcpy(sectorBuffer+sectorBufferIndex, (uint8_t *) &screenVar, sizeof(screenVar));
 8001fba:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8001fbe:	f103 0304 	add.w	r3, r3, #4
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001fc8:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8001fcc:	3b1c      	subs	r3, #28
 8001fce:	4413      	add	r3, r2
 8001fd0:	f107 0210 	add.w	r2, r7, #16
 8001fd4:	6812      	ldr	r2, [r2, #0]
 8001fd6:	601a      	str	r2, [r3, #0]
		sectorBufferIndex += sizeof(screenVar);
 8001fd8:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8001fdc:	f103 0304 	add.w	r3, r3, #4
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	3304      	adds	r3, #4
 8001fe4:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 8001fe8:	f102 0204 	add.w	r2, r2, #4
 8001fec:	6013      	str	r3, [r2, #0]
		while(currentScreenObjectsLeft > 0){
 8001fee:	e3d9      	b.n	80027a4 <configFromUart+0xc00>
			currentScreenObjectsLeft--;
 8001ff0:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8001ff4:	f103 030a 	add.w	r3, r3, #10
 8001ff8:	881b      	ldrh	r3, [r3, #0]
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 8002000:	f102 020a 	add.w	r2, r2, #10
 8002004:	8013      	strh	r3, [r2, #0]
			UART_READ_STRING();
 8002006:	f507 5048 	add.w	r0, r7, #12800	; 0x3200
 800200a:	f100 0028 	add.w	r0, r0, #40	; 0x28
 800200e:	230d      	movs	r3, #13
 8002010:	2280      	movs	r2, #128	; 0x80
 8002012:	491d      	ldr	r1, [pc, #116]	; (8002088 <configFromUart+0x4e4>)
 8002014:	f002 fc52 	bl	80048bc <read_usart_message>
 8002018:	4603      	mov	r3, r0
 800201a:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 800201e:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8002022:	6013      	str	r3, [r2, #0]
 8002024:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002028:	f103 0334 	add.w	r3, r3, #52	; 0x34
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d0e9      	beq.n	8002006 <configFromUart+0x462>
 8002032:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002036:	f103 0334 	add.w	r3, r3, #52	; 0x34
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	3b01      	subs	r3, #1
 800203e:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 8002042:	f102 0210 	add.w	r2, r2, #16
 8002046:	4413      	add	r3, r2
 8002048:	2200      	movs	r2, #0
 800204a:	f803 2ca8 	strb.w	r2, [r3, #-168]
			currentObject.objectType = stringToObjectType(msg);
 800204e:	f507 5348 	add.w	r3, r7, #12800	; 0x3200
 8002052:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8002056:	4618      	mov	r0, r3
 8002058:	f000 fe50 	bl	8002cfc <stringToObjectType>
 800205c:	4603      	mov	r3, r0
 800205e:	461a      	mov	r2, r3
 8002060:	f107 0310 	add.w	r3, r7, #16
 8002064:	3b10      	subs	r3, #16
 8002066:	701a      	strb	r2, [r3, #0]
			if(currentObject.objectType == none){
 8002068:	f107 0310 	add.w	r3, r7, #16
 800206c:	3b10      	subs	r3, #16
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d10f      	bne.n	8002094 <configFromUart+0x4f0>
				printf("[cl] Object type %s not recognized. \n\r", msg);
 8002074:	f507 5348 	add.w	r3, r7, #12800	; 0x3200
 8002078:	f103 0328 	add.w	r3, r3, #40	; 0x28
 800207c:	4619      	mov	r1, r3
 800207e:	4804      	ldr	r0, [pc, #16]	; (8002090 <configFromUart+0x4ec>)
 8002080:	f006 fd12 	bl	8008aa8 <iprintf>
				return 4;
 8002084:	2304      	movs	r3, #4
 8002086:	e3e7      	b.n	8002858 <configFromUart+0xcb4>
 8002088:	20002188 	.word	0x20002188
 800208c:	08009bb4 	.word	0x08009bb4
 8002090:	08009be8 	.word	0x08009be8
			UART_READ_STRING();
 8002094:	f507 5048 	add.w	r0, r7, #12800	; 0x3200
 8002098:	f100 0028 	add.w	r0, r0, #40	; 0x28
 800209c:	230d      	movs	r3, #13
 800209e:	2280      	movs	r2, #128	; 0x80
 80020a0:	49c6      	ldr	r1, [pc, #792]	; (80023bc <configFromUart+0x818>)
 80020a2:	f002 fc0b 	bl	80048bc <read_usart_message>
 80020a6:	4603      	mov	r3, r0
 80020a8:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 80020ac:	f102 0234 	add.w	r2, r2, #52	; 0x34
 80020b0:	6013      	str	r3, [r2, #0]
 80020b2:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 80020b6:	f103 0334 	add.w	r3, r3, #52	; 0x34
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d0e9      	beq.n	8002094 <configFromUart+0x4f0>
 80020c0:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 80020c4:	f103 0334 	add.w	r3, r3, #52	; 0x34
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	3b01      	subs	r3, #1
 80020cc:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 80020d0:	f102 0210 	add.w	r2, r2, #16
 80020d4:	4413      	add	r3, r2
 80020d6:	2200      	movs	r2, #0
 80020d8:	f803 2ca8 	strb.w	r2, [r3, #-168]
			currentObject.objectId = (uint16_t) atoi(msg);
 80020dc:	f507 5348 	add.w	r3, r7, #12800	; 0x3200
 80020e0:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80020e4:	4618      	mov	r0, r3
 80020e6:	f006 fc9b 	bl	8008a20 <atoi>
 80020ea:	4603      	mov	r3, r0
 80020ec:	b29a      	uxth	r2, r3
 80020ee:	f107 0310 	add.w	r3, r7, #16
 80020f2:	3b10      	subs	r3, #16
 80020f4:	805a      	strh	r2, [r3, #2]
			UART_READ_STRING();
 80020f6:	f507 5048 	add.w	r0, r7, #12800	; 0x3200
 80020fa:	f100 0028 	add.w	r0, r0, #40	; 0x28
 80020fe:	230d      	movs	r3, #13
 8002100:	2280      	movs	r2, #128	; 0x80
 8002102:	49ae      	ldr	r1, [pc, #696]	; (80023bc <configFromUart+0x818>)
 8002104:	f002 fbda 	bl	80048bc <read_usart_message>
 8002108:	4603      	mov	r3, r0
 800210a:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 800210e:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8002112:	6013      	str	r3, [r2, #0]
 8002114:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002118:	f103 0334 	add.w	r3, r3, #52	; 0x34
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d0e9      	beq.n	80020f6 <configFromUart+0x552>
 8002122:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002126:	f103 0334 	add.w	r3, r3, #52	; 0x34
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	3b01      	subs	r3, #1
 800212e:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 8002132:	f102 0210 	add.w	r2, r2, #16
 8002136:	4413      	add	r3, r2
 8002138:	2200      	movs	r2, #0
 800213a:	f803 2ca8 	strb.w	r2, [r3, #-168]
			currentObject.xstart = (uint16_t) atoi(msg);
 800213e:	f507 5348 	add.w	r3, r7, #12800	; 0x3200
 8002142:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8002146:	4618      	mov	r0, r3
 8002148:	f006 fc6a 	bl	8008a20 <atoi>
 800214c:	4603      	mov	r3, r0
 800214e:	b29a      	uxth	r2, r3
 8002150:	f107 0310 	add.w	r3, r7, #16
 8002154:	3b10      	subs	r3, #16
 8002156:	809a      	strh	r2, [r3, #4]
			UART_READ_STRING();
 8002158:	f507 5048 	add.w	r0, r7, #12800	; 0x3200
 800215c:	f100 0028 	add.w	r0, r0, #40	; 0x28
 8002160:	230d      	movs	r3, #13
 8002162:	2280      	movs	r2, #128	; 0x80
 8002164:	4995      	ldr	r1, [pc, #596]	; (80023bc <configFromUart+0x818>)
 8002166:	f002 fba9 	bl	80048bc <read_usart_message>
 800216a:	4603      	mov	r3, r0
 800216c:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002170:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8002174:	6013      	str	r3, [r2, #0]
 8002176:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 800217a:	f103 0334 	add.w	r3, r3, #52	; 0x34
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d0e9      	beq.n	8002158 <configFromUart+0x5b4>
 8002184:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002188:	f103 0334 	add.w	r3, r3, #52	; 0x34
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	3b01      	subs	r3, #1
 8002190:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 8002194:	f102 0210 	add.w	r2, r2, #16
 8002198:	4413      	add	r3, r2
 800219a:	2200      	movs	r2, #0
 800219c:	f803 2ca8 	strb.w	r2, [r3, #-168]
			currentObject.ystart = (uint16_t) atoi(msg);
 80021a0:	f507 5348 	add.w	r3, r7, #12800	; 0x3200
 80021a4:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80021a8:	4618      	mov	r0, r3
 80021aa:	f006 fc39 	bl	8008a20 <atoi>
 80021ae:	4603      	mov	r3, r0
 80021b0:	b29a      	uxth	r2, r3
 80021b2:	f107 0310 	add.w	r3, r7, #16
 80021b6:	3b10      	subs	r3, #16
 80021b8:	80da      	strh	r2, [r3, #6]
			UART_READ_STRING();
 80021ba:	f507 5048 	add.w	r0, r7, #12800	; 0x3200
 80021be:	f100 0028 	add.w	r0, r0, #40	; 0x28
 80021c2:	230d      	movs	r3, #13
 80021c4:	2280      	movs	r2, #128	; 0x80
 80021c6:	497d      	ldr	r1, [pc, #500]	; (80023bc <configFromUart+0x818>)
 80021c8:	f002 fb78 	bl	80048bc <read_usart_message>
 80021cc:	4603      	mov	r3, r0
 80021ce:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 80021d2:	f102 0234 	add.w	r2, r2, #52	; 0x34
 80021d6:	6013      	str	r3, [r2, #0]
 80021d8:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 80021dc:	f103 0334 	add.w	r3, r3, #52	; 0x34
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d0e9      	beq.n	80021ba <configFromUart+0x616>
 80021e6:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 80021ea:	f103 0334 	add.w	r3, r3, #52	; 0x34
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	3b01      	subs	r3, #1
 80021f2:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 80021f6:	f102 0210 	add.w	r2, r2, #16
 80021fa:	4413      	add	r3, r2
 80021fc:	2200      	movs	r2, #0
 80021fe:	f803 2ca8 	strb.w	r2, [r3, #-168]
			currentObject.xend = (uint16_t) atoi(msg);
 8002202:	f507 5348 	add.w	r3, r7, #12800	; 0x3200
 8002206:	f103 0328 	add.w	r3, r3, #40	; 0x28
 800220a:	4618      	mov	r0, r3
 800220c:	f006 fc08 	bl	8008a20 <atoi>
 8002210:	4603      	mov	r3, r0
 8002212:	b29a      	uxth	r2, r3
 8002214:	f107 0310 	add.w	r3, r7, #16
 8002218:	3b10      	subs	r3, #16
 800221a:	811a      	strh	r2, [r3, #8]
			UART_READ_STRING();
 800221c:	f507 5048 	add.w	r0, r7, #12800	; 0x3200
 8002220:	f100 0028 	add.w	r0, r0, #40	; 0x28
 8002224:	230d      	movs	r3, #13
 8002226:	2280      	movs	r2, #128	; 0x80
 8002228:	4964      	ldr	r1, [pc, #400]	; (80023bc <configFromUart+0x818>)
 800222a:	f002 fb47 	bl	80048bc <read_usart_message>
 800222e:	4603      	mov	r3, r0
 8002230:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002234:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8002238:	6013      	str	r3, [r2, #0]
 800223a:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 800223e:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d0e9      	beq.n	800221c <configFromUart+0x678>
 8002248:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 800224c:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	3b01      	subs	r3, #1
 8002254:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 8002258:	f102 0210 	add.w	r2, r2, #16
 800225c:	4413      	add	r3, r2
 800225e:	2200      	movs	r2, #0
 8002260:	f803 2ca8 	strb.w	r2, [r3, #-168]
			currentObject.yend = (uint16_t) atoi(msg);
 8002264:	f507 5348 	add.w	r3, r7, #12800	; 0x3200
 8002268:	f103 0328 	add.w	r3, r3, #40	; 0x28
 800226c:	4618      	mov	r0, r3
 800226e:	f006 fbd7 	bl	8008a20 <atoi>
 8002272:	4603      	mov	r3, r0
 8002274:	b29a      	uxth	r2, r3
 8002276:	f107 0310 	add.w	r3, r7, #16
 800227a:	3b10      	subs	r3, #16
 800227c:	815a      	strh	r2, [r3, #10]
			UART_READ_STRING();
 800227e:	f507 5048 	add.w	r0, r7, #12800	; 0x3200
 8002282:	f100 0028 	add.w	r0, r0, #40	; 0x28
 8002286:	230d      	movs	r3, #13
 8002288:	2280      	movs	r2, #128	; 0x80
 800228a:	494c      	ldr	r1, [pc, #304]	; (80023bc <configFromUart+0x818>)
 800228c:	f002 fb16 	bl	80048bc <read_usart_message>
 8002290:	4603      	mov	r3, r0
 8002292:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002296:	f102 0234 	add.w	r2, r2, #52	; 0x34
 800229a:	6013      	str	r3, [r2, #0]
 800229c:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 80022a0:	f103 0334 	add.w	r3, r3, #52	; 0x34
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d0e9      	beq.n	800227e <configFromUart+0x6da>
 80022aa:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 80022ae:	f103 0334 	add.w	r3, r3, #52	; 0x34
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	3b01      	subs	r3, #1
 80022b6:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 80022ba:	f102 0210 	add.w	r2, r2, #16
 80022be:	4413      	add	r3, r2
 80022c0:	2200      	movs	r2, #0
 80022c2:	f803 2ca8 	strb.w	r2, [r3, #-168]
			currentObject.dataLen = (uint16_t) atoi(msg);
 80022c6:	f507 5348 	add.w	r3, r7, #12800	; 0x3200
 80022ca:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80022ce:	4618      	mov	r0, r3
 80022d0:	f006 fba6 	bl	8008a20 <atoi>
 80022d4:	4603      	mov	r3, r0
 80022d6:	b29a      	uxth	r2, r3
 80022d8:	f107 0310 	add.w	r3, r7, #16
 80022dc:	3b10      	subs	r3, #16
 80022de:	819a      	strh	r2, [r3, #12]
			PRINT_OBJECT_HEADER(currentObject);
 80022e0:	f107 0310 	add.w	r3, r7, #16
 80022e4:	3b10      	subs	r3, #16
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	461c      	mov	r4, r3
 80022ea:	f107 0310 	add.w	r3, r7, #16
 80022ee:	3b10      	subs	r3, #16
 80022f0:	885b      	ldrh	r3, [r3, #2]
 80022f2:	461d      	mov	r5, r3
 80022f4:	f107 0310 	add.w	r3, r7, #16
 80022f8:	3b10      	subs	r3, #16
 80022fa:	889b      	ldrh	r3, [r3, #4]
 80022fc:	461e      	mov	r6, r3
 80022fe:	f107 0310 	add.w	r3, r7, #16
 8002302:	3b10      	subs	r3, #16
 8002304:	88db      	ldrh	r3, [r3, #6]
 8002306:	461a      	mov	r2, r3
 8002308:	f107 0310 	add.w	r3, r7, #16
 800230c:	3b10      	subs	r3, #16
 800230e:	891b      	ldrh	r3, [r3, #8]
 8002310:	4619      	mov	r1, r3
 8002312:	f107 0310 	add.w	r3, r7, #16
 8002316:	3b10      	subs	r3, #16
 8002318:	895b      	ldrh	r3, [r3, #10]
 800231a:	4618      	mov	r0, r3
 800231c:	f107 0310 	add.w	r3, r7, #16
 8002320:	3b10      	subs	r3, #16
 8002322:	899b      	ldrh	r3, [r3, #12]
 8002324:	9303      	str	r3, [sp, #12]
 8002326:	9002      	str	r0, [sp, #8]
 8002328:	9101      	str	r1, [sp, #4]
 800232a:	9200      	str	r2, [sp, #0]
 800232c:	4633      	mov	r3, r6
 800232e:	462a      	mov	r2, r5
 8002330:	4621      	mov	r1, r4
 8002332:	4823      	ldr	r0, [pc, #140]	; (80023c0 <configFromUart+0x81c>)
 8002334:	f006 fbb8 	bl	8008aa8 <iprintf>
			if(currentObject.dataLen > MAX_DATA_SIZE){
 8002338:	f107 0310 	add.w	r3, r7, #16
 800233c:	3b10      	subs	r3, #16
 800233e:	899b      	ldrh	r3, [r3, #12]
 8002340:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002344:	d909      	bls.n	800235a <configFromUart+0x7b6>
				printf("[cl] Object (id=%d) data too large. %d\n\r", currentObject.objectId);
 8002346:	f107 0310 	add.w	r3, r7, #16
 800234a:	3b10      	subs	r3, #16
 800234c:	885b      	ldrh	r3, [r3, #2]
 800234e:	4619      	mov	r1, r3
 8002350:	481c      	ldr	r0, [pc, #112]	; (80023c4 <configFromUart+0x820>)
 8002352:	f006 fba9 	bl	8008aa8 <iprintf>
				return 5;
 8002356:	2305      	movs	r3, #5
 8002358:	e21b      	b.n	8002792 <configFromUart+0xbee>
			int spaceLeft = SECTOR_SIZE - sectorBufferIndex;
 800235a:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 800235e:	f103 0304 	add.w	r3, r3, #4
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8002368:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 800236c:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8002370:	6013      	str	r3, [r2, #0]
			if(spaceLeft >= sizeof(currentObject)){
 8002372:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002376:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2b0d      	cmp	r3, #13
 800237e:	d923      	bls.n	80023c8 <configFromUart+0x824>
				memcpy(sectorBuffer+sectorBufferIndex, (uint8_t *) &currentObject, sizeof(currentObject));
 8002380:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8002384:	f103 0304 	add.w	r3, r3, #4
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800238e:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8002392:	3b1c      	subs	r3, #28
 8002394:	1898      	adds	r0, r3, r2
 8002396:	f107 0310 	add.w	r3, r7, #16
 800239a:	3b10      	subs	r3, #16
 800239c:	220e      	movs	r2, #14
 800239e:	4619      	mov	r1, r3
 80023a0:	f006 fb6c 	bl	8008a7c <memcpy>
				sectorBufferIndex += sizeof(currentObject);
 80023a4:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 80023a8:	f103 0304 	add.w	r3, r3, #4
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	330e      	adds	r3, #14
 80023b0:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 80023b4:	f102 0204 	add.w	r2, r2, #4
 80023b8:	6013      	str	r3, [r2, #0]
 80023ba:	e092      	b.n	80024e2 <configFromUart+0x93e>
 80023bc:	20002188 	.word	0x20002188
 80023c0:	08009c10 	.word	0x08009c10
 80023c4:	08009c4c 	.word	0x08009c4c
				memcpy(sectorBuffer+sectorBufferIndex, (uint8_t *) &currentObject, spaceLeft);
 80023c8:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 80023cc:	f103 0304 	add.w	r3, r3, #4
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80023d6:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80023da:	3b1c      	subs	r3, #28
 80023dc:	1898      	adds	r0, r3, r2
 80023de:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 80023e2:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	f107 0310 	add.w	r3, r7, #16
 80023ec:	3b10      	subs	r3, #16
 80023ee:	4619      	mov	r1, r3
 80023f0:	f006 fb44 	bl	8008a7c <memcpy>
				ext_flash_write_multipage(currentSector*SECTOR_SIZE, sectorBuffer, SECTOR_SIZE);
 80023f4:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 80023f8:	f103 030c 	add.w	r3, r3, #12
 80023fc:	881b      	ldrh	r3, [r3, #0]
 80023fe:	031b      	lsls	r3, r3, #12
 8002400:	4618      	mov	r0, r3
 8002402:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8002406:	f103 0330 	add.w	r3, r3, #48	; 0x30
 800240a:	3b1c      	subs	r3, #28
 800240c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002410:	4619      	mov	r1, r3
 8002412:	f000 fdcd 	bl	8002fb0 <ext_flash_write_multipage>
				currentSector += 1;
 8002416:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 800241a:	f103 030c 	add.w	r3, r3, #12
 800241e:	881b      	ldrh	r3, [r3, #0]
 8002420:	3301      	adds	r3, #1
 8002422:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 8002426:	f102 020c 	add.w	r2, r2, #12
 800242a:	8013      	strh	r3, [r2, #0]
				if(currentSector > MAX_SECTOR){
 800242c:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8002430:	f103 030c 	add.w	r3, r3, #12
 8002434:	881b      	ldrh	r3, [r3, #0]
 8002436:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800243a:	d309      	bcc.n	8002450 <configFromUart+0x8ac>
					printf("[cl] External memory size exceeded trying to save header of object id %d\n\r", currentObject.objectId);
 800243c:	f107 0310 	add.w	r3, r7, #16
 8002440:	3b10      	subs	r3, #16
 8002442:	885b      	ldrh	r3, [r3, #2]
 8002444:	4619      	mov	r1, r3
 8002446:	48d3      	ldr	r0, [pc, #844]	; (8002794 <configFromUart+0xbf0>)
 8002448:	f006 fb2e 	bl	8008aa8 <iprintf>
					return 6;
 800244c:	2306      	movs	r3, #6
 800244e:	e1a0      	b.n	8002792 <configFromUart+0xbee>
				ext_flash_erase_4kB(currentSector*SECTOR_SIZE);
 8002450:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8002454:	f103 030c 	add.w	r3, r3, #12
 8002458:	881b      	ldrh	r3, [r3, #0]
 800245a:	031b      	lsls	r3, r3, #12
 800245c:	4618      	mov	r0, r3
 800245e:	f000 fc8d 	bl	8002d7c <ext_flash_erase_4kB>
				memset(sectorBuffer, 0, SECTOR_SIZE);
 8002462:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8002466:	f103 0330 	add.w	r3, r3, #48	; 0x30
 800246a:	3b1c      	subs	r3, #28
 800246c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002470:	2100      	movs	r1, #0
 8002472:	4618      	mov	r0, r3
 8002474:	f006 fb10 	bl	8008a98 <memset>
				sectorBufferIndex = 0;
 8002478:	2300      	movs	r3, #0
 800247a:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 800247e:	f102 0204 	add.w	r2, r2, #4
 8002482:	6013      	str	r3, [r2, #0]
				memcpy(sectorBuffer+sectorBufferIndex, ((uint8_t *) &currentObject)+spaceLeft, (sizeof(currentObject) - spaceLeft));
 8002484:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8002488:	f103 0304 	add.w	r3, r3, #4
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8002492:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8002496:	3b1c      	subs	r3, #28
 8002498:	1898      	adds	r0, r3, r2
 800249a:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 800249e:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	f107 0310 	add.w	r3, r7, #16
 80024a8:	3b10      	subs	r3, #16
 80024aa:	1899      	adds	r1, r3, r2
 80024ac:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 80024b0:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f1c3 030e 	rsb	r3, r3, #14
 80024ba:	461a      	mov	r2, r3
 80024bc:	f006 fade 	bl	8008a7c <memcpy>
				sectorBufferIndex += (sizeof(currentObject) - spaceLeft);
 80024c0:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 80024c4:	f103 0304 	add.w	r3, r3, #4
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 80024ce:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	330e      	adds	r3, #14
 80024d8:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 80024dc:	f102 0204 	add.w	r2, r2, #4
 80024e0:	6013      	str	r3, [r2, #0]
			uint16_t objectDataBytesLeft = currentObject.dataLen;
 80024e2:	f107 0310 	add.w	r3, r7, #16
 80024e6:	3b10      	subs	r3, #16
 80024e8:	899b      	ldrh	r3, [r3, #12]
 80024ea:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 80024ee:	f102 023e 	add.w	r2, r2, #62	; 0x3e
 80024f2:	8013      	strh	r3, [r2, #0]
			dataBufferIndex = 0;
 80024f4:	2300      	movs	r3, #0
 80024f6:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 80024fa:	6013      	str	r3, [r2, #0]
			while(objectDataBytesLeft > 0){
 80024fc:	e05a      	b.n	80025b4 <configFromUart+0xa10>
				do{count = read_usart_message(msg, &huart1, 2, NEWLINE);} while (count==0);
 80024fe:	f507 5048 	add.w	r0, r7, #12800	; 0x3200
 8002502:	f100 0028 	add.w	r0, r0, #40	; 0x28
 8002506:	230d      	movs	r3, #13
 8002508:	2202      	movs	r2, #2
 800250a:	49a3      	ldr	r1, [pc, #652]	; (8002798 <configFromUart+0xbf4>)
 800250c:	f002 f9d6 	bl	80048bc <read_usart_message>
 8002510:	4603      	mov	r3, r0
 8002512:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002516:	f102 0234 	add.w	r2, r2, #52	; 0x34
 800251a:	6013      	str	r3, [r2, #0]
 800251c:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002520:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d0e9      	beq.n	80024fe <configFromUart+0x95a>
				if(count!=2){
 800252a:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 800252e:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2b02      	cmp	r3, #2
 8002536:	d009      	beq.n	800254c <configFromUart+0x9a8>
					printf("[cl] Error reading hex data of object with id %d \n\r", currentObject.objectId);
 8002538:	f107 0310 	add.w	r3, r7, #16
 800253c:	3b10      	subs	r3, #16
 800253e:	885b      	ldrh	r3, [r3, #2]
 8002540:	4619      	mov	r1, r3
 8002542:	4896      	ldr	r0, [pc, #600]	; (800279c <configFromUart+0xbf8>)
 8002544:	f006 fab0 	bl	8008aa8 <iprintf>
					return 7;
 8002548:	2307      	movs	r3, #7
 800254a:	e122      	b.n	8002792 <configFromUart+0xbee>
				msg[2] = 0;
 800254c:	2300      	movs	r3, #0
 800254e:	f507 5248 	add.w	r2, r7, #12800	; 0x3200
 8002552:	f102 022a 	add.w	r2, r2, #42	; 0x2a
 8002556:	7013      	strb	r3, [r2, #0]
				uint8_t deHexedByte = (uint8_t) strtol(msg, NULL, 16);
 8002558:	f507 5348 	add.w	r3, r7, #12800	; 0x3200
 800255c:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8002560:	2210      	movs	r2, #16
 8002562:	2100      	movs	r1, #0
 8002564:	4618      	mov	r0, r3
 8002566:	f006 fb43 	bl	8008bf0 <strtol>
 800256a:	4603      	mov	r3, r0
 800256c:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002570:	f102 022b 	add.w	r2, r2, #43	; 0x2b
 8002574:	7013      	strb	r3, [r2, #0]
				dataBuffer[dataBufferIndex] = deHexedByte;
 8002576:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800257a:	3b3c      	subs	r3, #60	; 0x3c
 800257c:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 8002580:	6812      	ldr	r2, [r2, #0]
 8002582:	4413      	add	r3, r2
 8002584:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002588:	f102 022b 	add.w	r2, r2, #43	; 0x2b
 800258c:	7812      	ldrb	r2, [r2, #0]
 800258e:	701a      	strb	r2, [r3, #0]
				dataBufferIndex++;
 8002590:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	3301      	adds	r3, #1
 8002598:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 800259c:	6013      	str	r3, [r2, #0]
				objectDataBytesLeft--;
 800259e:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 80025a2:	f103 033e 	add.w	r3, r3, #62	; 0x3e
 80025a6:	881b      	ldrh	r3, [r3, #0]
 80025a8:	3b01      	subs	r3, #1
 80025aa:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 80025ae:	f102 023e 	add.w	r2, r2, #62	; 0x3e
 80025b2:	8013      	strh	r3, [r2, #0]
			while(objectDataBytesLeft > 0){
 80025b4:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 80025b8:	f103 033e 	add.w	r3, r3, #62	; 0x3e
 80025bc:	881b      	ldrh	r3, [r3, #0]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d19d      	bne.n	80024fe <configFromUart+0x95a>
			read_usart_message(msg, &huart1, 2, NEWLINE); //to remove newline character from uart input buffer
 80025c2:	f507 5048 	add.w	r0, r7, #12800	; 0x3200
 80025c6:	f100 0028 	add.w	r0, r0, #40	; 0x28
 80025ca:	230d      	movs	r3, #13
 80025cc:	2202      	movs	r2, #2
 80025ce:	4972      	ldr	r1, [pc, #456]	; (8002798 <configFromUart+0xbf4>)
 80025d0:	f002 f974 	bl	80048bc <read_usart_message>
			objectDataBytesLeft = currentObject.dataLen;
 80025d4:	f107 0310 	add.w	r3, r7, #16
 80025d8:	3b10      	subs	r3, #16
 80025da:	899b      	ldrh	r3, [r3, #12]
 80025dc:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 80025e0:	f102 023e 	add.w	r2, r2, #62	; 0x3e
 80025e4:	8013      	strh	r3, [r2, #0]
			dataBufferIndex = 0;
 80025e6:	2300      	movs	r3, #0
 80025e8:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 80025ec:	6013      	str	r3, [r2, #0]
			while(objectDataBytesLeft > 0){
 80025ee:	e0c7      	b.n	8002780 <configFromUart+0xbdc>
				spaceLeft = SECTOR_SIZE - sectorBufferIndex;
 80025f0:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 80025f4:	f103 0304 	add.w	r3, r3, #4
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 80025fe:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002602:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8002606:	6013      	str	r3, [r2, #0]
				if(spaceLeft >= objectDataBytesLeft){
 8002608:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 800260c:	f103 033e 	add.w	r3, r3, #62	; 0x3e
 8002610:	881b      	ldrh	r3, [r3, #0]
 8002612:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002616:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 800261a:	6812      	ldr	r2, [r2, #0]
 800261c:	429a      	cmp	r2, r3
 800261e:	db30      	blt.n	8002682 <configFromUart+0xade>
					memcpy(sectorBuffer+sectorBufferIndex, dataBuffer + dataBufferIndex, objectDataBytesLeft);
 8002620:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8002624:	f103 0304 	add.w	r3, r3, #4
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800262e:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8002632:	3b1c      	subs	r3, #28
 8002634:	1898      	adds	r0, r3, r2
 8002636:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002640:	3b3c      	subs	r3, #60	; 0x3c
 8002642:	4413      	add	r3, r2
 8002644:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002648:	f102 023e 	add.w	r2, r2, #62	; 0x3e
 800264c:	8812      	ldrh	r2, [r2, #0]
 800264e:	4619      	mov	r1, r3
 8002650:	f006 fa14 	bl	8008a7c <memcpy>
					sectorBufferIndex += objectDataBytesLeft;
 8002654:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002658:	f103 033e 	add.w	r3, r3, #62	; 0x3e
 800265c:	881b      	ldrh	r3, [r3, #0]
 800265e:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 8002662:	f102 0204 	add.w	r2, r2, #4
 8002666:	6812      	ldr	r2, [r2, #0]
 8002668:	4413      	add	r3, r2
 800266a:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 800266e:	f102 0204 	add.w	r2, r2, #4
 8002672:	6013      	str	r3, [r2, #0]
					objectDataBytesLeft = 0;
 8002674:	2300      	movs	r3, #0
 8002676:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 800267a:	f102 023e 	add.w	r2, r2, #62	; 0x3e
 800267e:	8013      	strh	r3, [r2, #0]
 8002680:	e07e      	b.n	8002780 <configFromUart+0xbdc>
					memcpy(sectorBuffer+sectorBufferIndex, dataBuffer + dataBufferIndex, spaceLeft);
 8002682:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8002686:	f103 0304 	add.w	r3, r3, #4
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8002690:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8002694:	3b1c      	subs	r3, #28
 8002696:	1898      	adds	r0, r3, r2
 8002698:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80026a2:	3b3c      	subs	r3, #60	; 0x3c
 80026a4:	4413      	add	r3, r2
 80026a6:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 80026aa:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 80026ae:	6812      	ldr	r2, [r2, #0]
 80026b0:	4619      	mov	r1, r3
 80026b2:	f006 f9e3 	bl	8008a7c <memcpy>
					dataBufferIndex += spaceLeft;
 80026b6:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 80026c0:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4413      	add	r3, r2
 80026c8:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 80026cc:	6013      	str	r3, [r2, #0]
					objectDataBytesLeft -= spaceLeft;
 80026ce:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 80026d2:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	b29b      	uxth	r3, r3
 80026da:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 80026de:	f102 023e 	add.w	r2, r2, #62	; 0x3e
 80026e2:	8812      	ldrh	r2, [r2, #0]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 80026ea:	f102 023e 	add.w	r2, r2, #62	; 0x3e
 80026ee:	8013      	strh	r3, [r2, #0]
					ext_flash_write_multipage(currentSector*SECTOR_SIZE, sectorBuffer, SECTOR_SIZE);
 80026f0:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 80026f4:	f103 030c 	add.w	r3, r3, #12
 80026f8:	881b      	ldrh	r3, [r3, #0]
 80026fa:	031b      	lsls	r3, r3, #12
 80026fc:	4618      	mov	r0, r3
 80026fe:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8002702:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8002706:	3b1c      	subs	r3, #28
 8002708:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800270c:	4619      	mov	r1, r3
 800270e:	f000 fc4f 	bl	8002fb0 <ext_flash_write_multipage>
					currentSector += 1;
 8002712:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8002716:	f103 030c 	add.w	r3, r3, #12
 800271a:	881b      	ldrh	r3, [r3, #0]
 800271c:	3301      	adds	r3, #1
 800271e:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 8002722:	f102 020c 	add.w	r2, r2, #12
 8002726:	8013      	strh	r3, [r2, #0]
					if(currentSector > MAX_SECTOR){
 8002728:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 800272c:	f103 030c 	add.w	r3, r3, #12
 8002730:	881b      	ldrh	r3, [r3, #0]
 8002732:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002736:	d309      	bcc.n	800274c <configFromUart+0xba8>
						printf("[cl] External memory size exceeded while trying to save data of object id %d\n\r", currentObject.objectId);
 8002738:	f107 0310 	add.w	r3, r7, #16
 800273c:	3b10      	subs	r3, #16
 800273e:	885b      	ldrh	r3, [r3, #2]
 8002740:	4619      	mov	r1, r3
 8002742:	4817      	ldr	r0, [pc, #92]	; (80027a0 <configFromUart+0xbfc>)
 8002744:	f006 f9b0 	bl	8008aa8 <iprintf>
						return 8;
 8002748:	2308      	movs	r3, #8
 800274a:	e022      	b.n	8002792 <configFromUart+0xbee>
					ext_flash_erase_4kB(currentSector*SECTOR_SIZE);
 800274c:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8002750:	f103 030c 	add.w	r3, r3, #12
 8002754:	881b      	ldrh	r3, [r3, #0]
 8002756:	031b      	lsls	r3, r3, #12
 8002758:	4618      	mov	r0, r3
 800275a:	f000 fb0f 	bl	8002d7c <ext_flash_erase_4kB>
					memset(sectorBuffer, 0, SECTOR_SIZE);
 800275e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8002762:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8002766:	3b1c      	subs	r3, #28
 8002768:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800276c:	2100      	movs	r1, #0
 800276e:	4618      	mov	r0, r3
 8002770:	f006 f992 	bl	8008a98 <memset>
					sectorBufferIndex = 0;
 8002774:	2300      	movs	r3, #0
 8002776:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 800277a:	f102 0204 	add.w	r2, r2, #4
 800277e:	6013      	str	r3, [r2, #0]
			while(objectDataBytesLeft > 0){
 8002780:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002784:	f103 033e 	add.w	r3, r3, #62	; 0x3e
 8002788:	881b      	ldrh	r3, [r3, #0]
 800278a:	2b00      	cmp	r3, #0
 800278c:	f47f af30 	bne.w	80025f0 <configFromUart+0xa4c>
 8002790:	e008      	b.n	80027a4 <configFromUart+0xc00>
			return 3;
 8002792:	e061      	b.n	8002858 <configFromUart+0xcb4>
 8002794:	08009c78 	.word	0x08009c78
 8002798:	20002188 	.word	0x20002188
 800279c:	08009cc4 	.word	0x08009cc4
 80027a0:	08009cf8 	.word	0x08009cf8
		while(currentScreenObjectsLeft > 0){
 80027a4:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 80027a8:	f103 030a 	add.w	r3, r3, #10
 80027ac:	881b      	ldrh	r3, [r3, #0]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	f47f ac1e 	bne.w	8001ff0 <configFromUart+0x44c>
		ext_flash_write_multipage(currentSector*SECTOR_SIZE, sectorBuffer, sectorBufferIndex);
 80027b4:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 80027b8:	f103 030c 	add.w	r3, r3, #12
 80027bc:	881b      	ldrh	r3, [r3, #0]
 80027be:	031b      	lsls	r3, r3, #12
 80027c0:	4618      	mov	r0, r3
 80027c2:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 80027c6:	f103 0304 	add.w	r3, r3, #4
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80027d0:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80027d4:	3b1c      	subs	r3, #28
 80027d6:	4619      	mov	r1, r3
 80027d8:	f000 fbea 	bl	8002fb0 <ext_flash_write_multipage>
	while(1){
 80027dc:	f7ff bacd 	b.w	8001d7a <configFromUart+0x1d6>
		printf("%x ", sectorBuffer[j]);
 80027e0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80027e4:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80027e8:	3b1c      	subs	r3, #28
 80027ea:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 80027ee:	f102 0238 	add.w	r2, r2, #56	; 0x38
 80027f2:	6812      	ldr	r2, [r2, #0]
 80027f4:	4413      	add	r3, r2
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	4619      	mov	r1, r3
 80027fa:	481a      	ldr	r0, [pc, #104]	; (8002864 <configFromUart+0xcc0>)
 80027fc:	f006 f954 	bl	8008aa8 <iprintf>
	for(j=0; j<sizeof(gconf); j++){
 8002800:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002804:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	3301      	adds	r3, #1
 800280c:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002810:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8002814:	6013      	str	r3, [r2, #0]
 8002816:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 800281a:	f103 0338 	add.w	r3, r3, #56	; 0x38
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f240 2201 	movw	r2, #513	; 0x201
 8002824:	4293      	cmp	r3, r2
 8002826:	d9db      	bls.n	80027e0 <configFromUart+0xc3c>
	}

	ext_flash_erase_4kB(GENERAL_CONFIG_SECTOR*SECTOR_SIZE);
 8002828:	2000      	movs	r0, #0
 800282a:	f000 faa7 	bl	8002d7c <ext_flash_erase_4kB>
	ext_flash_write_multipage(GENERAL_CONFIG_SECTOR*SECTOR_SIZE, sectorBuffer, sizeof(gconf));
 800282e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8002832:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8002836:	3b1c      	subs	r3, #28
 8002838:	f240 2202 	movw	r2, #514	; 0x202
 800283c:	4619      	mov	r1, r3
 800283e:	2000      	movs	r0, #0
 8002840:	f000 fbb6 	bl	8002fb0 <ext_flash_write_multipage>
	printf("[cl] Config from UART finished. Furthest sector written to: %d \n\r", currentSector);
 8002844:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8002848:	f103 030c 	add.w	r3, r3, #12
 800284c:	881b      	ldrh	r3, [r3, #0]
 800284e:	4619      	mov	r1, r3
 8002850:	4805      	ldr	r0, [pc, #20]	; (8002868 <configFromUart+0xcc4>)
 8002852:	f006 f929 	bl	8008aa8 <iprintf>

	return 0;
 8002856:	2300      	movs	r3, #0

}
 8002858:	4618      	mov	r0, r3
 800285a:	f507 574b 	add.w	r7, r7, #12992	; 0x32c0
 800285e:	3714      	adds	r7, #20
 8002860:	46bd      	mov	sp, r7
 8002862:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002864:	08009d48 	.word	0x08009d48
 8002868:	08009d4c 	.word	0x08009d4c

0800286c <readGeneralConfig>:

/*
 * Reads the general configuration struct from external flash into variable pointed at by @destination.
 */
void readGeneralConfig(struct generalConfig *destination){
 800286c:	b580      	push	{r7, lr}
 800286e:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8002872:	af00      	add	r7, sp, #0
 8002874:	1d3b      	adds	r3, r7, #4
 8002876:	6018      	str	r0, [r3, #0]
	uint8_t buffer[sizeof(struct generalConfig)];
	ext_flash_read(GENERAL_CONFIG_SECTOR*SECTOR_SIZE, buffer, sizeof(struct generalConfig));
 8002878:	f107 030c 	add.w	r3, r7, #12
 800287c:	f240 2202 	movw	r2, #514	; 0x202
 8002880:	4619      	mov	r1, r3
 8002882:	2000      	movs	r0, #0
 8002884:	f000 fac9 	bl	8002e1a <ext_flash_read>
	*destination = *((struct generalConfig *) buffer);
 8002888:	f107 020c 	add.w	r2, r7, #12
 800288c:	1d3b      	adds	r3, r7, #4
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4618      	mov	r0, r3
 8002892:	4611      	mov	r1, r2
 8002894:	f240 2302 	movw	r3, #514	; 0x202
 8002898:	461a      	mov	r2, r3
 800289a:	f006 f8ef 	bl	8008a7c <memcpy>
	/*int i;
	for(i = 0; i<sizeof(struct generalConfig); i++){
		printf("%x,", buffer[i]);
	}
	printf("\n\r");*/
}
 800289e:	bf00      	nop
 80028a0:	f507 7704 	add.w	r7, r7, #528	; 0x210
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <openScreen>:
 *
 *	@returns: number of objects read. If maxData and maxObjects are sufficient, this will be the same as @screenHeader.objectCount. If @maxObjects limit was reached,
 *	then return value will be equal to @maxObjects. If @maxData limit was reached, then return value will be lower than @maxObjects.
 *
 */
int openScreen(uint16_t screenSector, struct screen *screenHeader, struct object *objectArray, uint8_t *dataArray, uint8_t **dataPointerArray, uint16_t maxData, uint16_t maxObjects){
 80028a8:	b590      	push	{r4, r7, lr}
 80028aa:	b08d      	sub	sp, #52	; 0x34
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60b9      	str	r1, [r7, #8]
 80028b0:	607a      	str	r2, [r7, #4]
 80028b2:	603b      	str	r3, [r7, #0]
 80028b4:	4603      	mov	r3, r0
 80028b6:	81fb      	strh	r3, [r7, #14]
	uint32_t flashAddr = screenSector*SECTOR_SIZE;
 80028b8:	89fb      	ldrh	r3, [r7, #14]
 80028ba:	031b      	lsls	r3, r3, #12
 80028bc:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint8_t screenHeaderBuffer[sizeof(struct screen)];
	ext_flash_read(flashAddr, screenHeaderBuffer, sizeof(struct screen));
 80028be:	f107 0320 	add.w	r3, r7, #32
 80028c2:	2204      	movs	r2, #4
 80028c4:	4619      	mov	r1, r3
 80028c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80028c8:	f000 faa7 	bl	8002e1a <ext_flash_read>
	flashAddr += sizeof(struct screen);
 80028cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ce:	3304      	adds	r3, #4
 80028d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	*screenHeader = *((struct screen *) screenHeaderBuffer);
 80028d2:	f107 0320 	add.w	r3, r7, #32
 80028d6:	68ba      	ldr	r2, [r7, #8]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	6013      	str	r3, [r2, #0]

	uint16_t objectsToRead = (*screenHeader).objectCount;
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	885b      	ldrh	r3, [r3, #2]
 80028e0:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint16_t objectIndex = 0;
 80028e2:	2300      	movs	r3, #0
 80028e4:	853b      	strh	r3, [r7, #40]	; 0x28
	uint16_t dataIndex = 0;
 80028e6:	2300      	movs	r3, #0
 80028e8:	84fb      	strh	r3, [r7, #38]	; 0x26
	if(objectsToRead > maxObjects){
 80028ea:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80028ec:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d964      	bls.n	80029be <openScreen+0x116>
		printf("[cl] Limiting objects to be read from screen to maxObjects! (down to %d from %d)", maxObjects, objectsToRead);
 80028f4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80028f8:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80028fa:	4619      	mov	r1, r3
 80028fc:	4834      	ldr	r0, [pc, #208]	; (80029d0 <openScreen+0x128>)
 80028fe:	f006 f8d3 	bl	8008aa8 <iprintf>
		objectsToRead = maxObjects;
 8002902:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002906:	857b      	strh	r3, [r7, #42]	; 0x2a
	}

	uint8_t objectHeaderBuffer[sizeof(struct object)];
	while(objectIndex < objectsToRead){
 8002908:	e059      	b.n	80029be <openScreen+0x116>
		ext_flash_read(flashAddr, objectHeaderBuffer, sizeof(struct object));
 800290a:	f107 0310 	add.w	r3, r7, #16
 800290e:	220e      	movs	r2, #14
 8002910:	4619      	mov	r1, r3
 8002912:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002914:	f000 fa81 	bl	8002e1a <ext_flash_read>
		flashAddr += sizeof(struct object);
 8002918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800291a:	330e      	adds	r3, #14
 800291c:	62fb      	str	r3, [r7, #44]	; 0x2c
		*(objectArray + objectIndex) = *((struct object *) objectHeaderBuffer);
 800291e:	f107 0110 	add.w	r1, r7, #16
 8002922:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002924:	4613      	mov	r3, r2
 8002926:	00db      	lsls	r3, r3, #3
 8002928:	1a9b      	subs	r3, r3, r2
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	461a      	mov	r2, r3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4413      	add	r3, r2
 8002932:	460a      	mov	r2, r1
 8002934:	6814      	ldr	r4, [r2, #0]
 8002936:	6850      	ldr	r0, [r2, #4]
 8002938:	6891      	ldr	r1, [r2, #8]
 800293a:	601c      	str	r4, [r3, #0]
 800293c:	6058      	str	r0, [r3, #4]
 800293e:	6099      	str	r1, [r3, #8]
 8002940:	8992      	ldrh	r2, [r2, #12]
 8002942:	819a      	strh	r2, [r3, #12]
		uint16_t currentObjectDataLen = (objectArray + objectIndex)->dataLen;
 8002944:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002946:	4613      	mov	r3, r2
 8002948:	00db      	lsls	r3, r3, #3
 800294a:	1a9b      	subs	r3, r3, r2
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	461a      	mov	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4413      	add	r3, r2
 8002954:	899b      	ldrh	r3, [r3, #12]
 8002956:	84bb      	strh	r3, [r7, #36]	; 0x24
		if(currentObjectDataLen > 0){
 8002958:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800295a:	2b00      	cmp	r3, #0
 800295c:	d026      	beq.n	80029ac <openScreen+0x104>
			if(dataIndex + currentObjectDataLen > maxData){
 800295e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002960:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002962:	441a      	add	r2, r3
 8002964:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002968:	429a      	cmp	r2, r3
 800296a:	dd06      	ble.n	800297a <openScreen+0xd2>
				printf("[cl] Ran out of data buffer when trying to add object #%d \n\r", objectIndex);
 800296c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800296e:	4619      	mov	r1, r3
 8002970:	4818      	ldr	r0, [pc, #96]	; (80029d4 <openScreen+0x12c>)
 8002972:	f006 f899 	bl	8008aa8 <iprintf>
				return(objectIndex);
 8002976:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002978:	e026      	b.n	80029c8 <openScreen+0x120>
			}
			//object data fits in buffer
			ext_flash_read(flashAddr, (dataArray + dataIndex), currentObjectDataLen);
 800297a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800297c:	683a      	ldr	r2, [r7, #0]
 800297e:	4413      	add	r3, r2
 8002980:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002982:	4619      	mov	r1, r3
 8002984:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002986:	f000 fa48 	bl	8002e1a <ext_flash_read>
			*(dataPointerArray + objectIndex) = (dataArray + dataIndex);
 800298a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800298c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002992:	440b      	add	r3, r1
 8002994:	6839      	ldr	r1, [r7, #0]
 8002996:	440a      	add	r2, r1
 8002998:	601a      	str	r2, [r3, #0]
			flashAddr += currentObjectDataLen;
 800299a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800299c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800299e:	4413      	add	r3, r2
 80029a0:	62fb      	str	r3, [r7, #44]	; 0x2c
			dataIndex += currentObjectDataLen;
 80029a2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80029a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80029a6:	4413      	add	r3, r2
 80029a8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80029aa:	e005      	b.n	80029b8 <openScreen+0x110>
			}
		else{
			*(dataPointerArray + objectIndex) = NULL;
 80029ac:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80029b2:	4413      	add	r3, r2
 80029b4:	2200      	movs	r2, #0
 80029b6:	601a      	str	r2, [r3, #0]
		}

		objectIndex++;
 80029b8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80029ba:	3301      	adds	r3, #1
 80029bc:	853b      	strh	r3, [r7, #40]	; 0x28
	while(objectIndex < objectsToRead){
 80029be:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80029c0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d3a1      	bcc.n	800290a <openScreen+0x62>
	}

	return objectIndex;
 80029c6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28

}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3734      	adds	r7, #52	; 0x34
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd90      	pop	{r4, r7, pc}
 80029d0:	08009da0 	.word	0x08009da0
 80029d4:	08009df4 	.word	0x08009df4

080029d8 <printAllScreens>:

/*
 * debug function to check what is actually stored in flash
 */
void printAllScreens(struct generalConfig gconf){
 80029d8:	b084      	sub	sp, #16
 80029da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029de:	b09c      	sub	sp, #112	; 0x70
 80029e0:	af04      	add	r7, sp, #16
 80029e2:	f107 0478 	add.w	r4, r7, #120	; 0x78
 80029e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80029ea:	466b      	mov	r3, sp
 80029ec:	4698      	mov	r8, r3
	uint8_t screenIndex = 0;
 80029ee:	2300      	movs	r3, #0
 80029f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	printf("[PAS] Supplied gconf says there are %d screens.\n\r", gconf.totalScreens);
 80029f4:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 80029f8:	4619      	mov	r1, r3
 80029fa:	48a3      	ldr	r0, [pc, #652]	; (8002c88 <printAllScreens+0x2b0>)
 80029fc:	f006 f854 	bl	8008aa8 <iprintf>
	uint16_t maxObjects = 128;
 8002a00:	2380      	movs	r3, #128	; 0x80
 8002a02:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
	uint16_t maxData = SECTOR_SIZE*4;
 8002a06:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002a0a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

	struct screen screenHeader;
	struct object objArr[maxObjects];
 8002a0e:	f8b7 6058 	ldrh.w	r6, [r7, #88]	; 0x58
 8002a12:	4633      	mov	r3, r6
 8002a14:	3b01      	subs	r3, #1
 8002a16:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a18:	b2b4      	uxth	r4, r6
 8002a1a:	f04f 0500 	mov.w	r5, #0
 8002a1e:	4622      	mov	r2, r4
 8002a20:	462b      	mov	r3, r5
 8002a22:	f04f 0000 	mov.w	r0, #0
 8002a26:	f04f 0100 	mov.w	r1, #0
 8002a2a:	00d9      	lsls	r1, r3, #3
 8002a2c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a30:	00d0      	lsls	r0, r2, #3
 8002a32:	4602      	mov	r2, r0
 8002a34:	460b      	mov	r3, r1
 8002a36:	1b12      	subs	r2, r2, r4
 8002a38:	eb63 0305 	sbc.w	r3, r3, r5
 8002a3c:	f04f 0000 	mov.w	r0, #0
 8002a40:	f04f 0100 	mov.w	r1, #0
 8002a44:	0119      	lsls	r1, r3, #4
 8002a46:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8002a4a:	0110      	lsls	r0, r2, #4
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	460b      	mov	r3, r1
 8002a50:	4632      	mov	r2, r6
 8002a52:	4613      	mov	r3, r2
 8002a54:	00db      	lsls	r3, r3, #3
 8002a56:	1a9b      	subs	r3, r3, r2
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	b2b4      	uxth	r4, r6
 8002a5c:	f04f 0500 	mov.w	r5, #0
 8002a60:	4622      	mov	r2, r4
 8002a62:	462b      	mov	r3, r5
 8002a64:	f04f 0000 	mov.w	r0, #0
 8002a68:	f04f 0100 	mov.w	r1, #0
 8002a6c:	00d9      	lsls	r1, r3, #3
 8002a6e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a72:	00d0      	lsls	r0, r2, #3
 8002a74:	4602      	mov	r2, r0
 8002a76:	460b      	mov	r3, r1
 8002a78:	1b12      	subs	r2, r2, r4
 8002a7a:	eb63 0305 	sbc.w	r3, r3, r5
 8002a7e:	f04f 0000 	mov.w	r0, #0
 8002a82:	f04f 0100 	mov.w	r1, #0
 8002a86:	0119      	lsls	r1, r3, #4
 8002a88:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8002a8c:	0110      	lsls	r0, r2, #4
 8002a8e:	4602      	mov	r2, r0
 8002a90:	460b      	mov	r3, r1
 8002a92:	4632      	mov	r2, r6
 8002a94:	4613      	mov	r3, r2
 8002a96:	00db      	lsls	r3, r3, #3
 8002a98:	1a9b      	subs	r3, r3, r2
 8002a9a:	005b      	lsls	r3, r3, #1
 8002a9c:	3307      	adds	r3, #7
 8002a9e:	08db      	lsrs	r3, r3, #3
 8002aa0:	00db      	lsls	r3, r3, #3
 8002aa2:	ebad 0d03 	sub.w	sp, sp, r3
 8002aa6:	ab04      	add	r3, sp, #16
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	085b      	lsrs	r3, r3, #1
 8002aac:	005b      	lsls	r3, r3, #1
 8002aae:	64bb      	str	r3, [r7, #72]	; 0x48
	uint8_t dataArr[maxData];
 8002ab0:	f8b7 405a 	ldrh.w	r4, [r7, #90]	; 0x5a
 8002ab4:	4623      	mov	r3, r4
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	647b      	str	r3, [r7, #68]	; 0x44
 8002aba:	b2a0      	uxth	r0, r4
 8002abc:	f04f 0100 	mov.w	r1, #0
 8002ac0:	f04f 0200 	mov.w	r2, #0
 8002ac4:	f04f 0300 	mov.w	r3, #0
 8002ac8:	00cb      	lsls	r3, r1, #3
 8002aca:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002ace:	00c2      	lsls	r2, r0, #3
 8002ad0:	b2a0      	uxth	r0, r4
 8002ad2:	f04f 0100 	mov.w	r1, #0
 8002ad6:	f04f 0200 	mov.w	r2, #0
 8002ada:	f04f 0300 	mov.w	r3, #0
 8002ade:	00cb      	lsls	r3, r1, #3
 8002ae0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002ae4:	00c2      	lsls	r2, r0, #3
 8002ae6:	4623      	mov	r3, r4
 8002ae8:	3307      	adds	r3, #7
 8002aea:	08db      	lsrs	r3, r3, #3
 8002aec:	00db      	lsls	r3, r3, #3
 8002aee:	ebad 0d03 	sub.w	sp, sp, r3
 8002af2:	ab04      	add	r3, sp, #16
 8002af4:	3300      	adds	r3, #0
 8002af6:	643b      	str	r3, [r7, #64]	; 0x40
	uint8_t *pointerArray[maxObjects];
 8002af8:	f8b7 4058 	ldrh.w	r4, [r7, #88]	; 0x58
 8002afc:	4623      	mov	r3, r4
 8002afe:	3b01      	subs	r3, #1
 8002b00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b02:	b2a0      	uxth	r0, r4
 8002b04:	f04f 0100 	mov.w	r1, #0
 8002b08:	f04f 0200 	mov.w	r2, #0
 8002b0c:	f04f 0300 	mov.w	r3, #0
 8002b10:	014b      	lsls	r3, r1, #5
 8002b12:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002b16:	0142      	lsls	r2, r0, #5
 8002b18:	b2a0      	uxth	r0, r4
 8002b1a:	f04f 0100 	mov.w	r1, #0
 8002b1e:	f04f 0200 	mov.w	r2, #0
 8002b22:	f04f 0300 	mov.w	r3, #0
 8002b26:	014b      	lsls	r3, r1, #5
 8002b28:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002b2c:	0142      	lsls	r2, r0, #5
 8002b2e:	4623      	mov	r3, r4
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	3307      	adds	r3, #7
 8002b34:	08db      	lsrs	r3, r3, #3
 8002b36:	00db      	lsls	r3, r3, #3
 8002b38:	ebad 0d03 	sub.w	sp, sp, r3
 8002b3c:	ab04      	add	r3, sp, #16
 8002b3e:	3303      	adds	r3, #3
 8002b40:	089b      	lsrs	r3, r3, #2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	63bb      	str	r3, [r7, #56]	; 0x38

	while(screenIndex < gconf.totalScreens){
 8002b46:	e08c      	b.n	8002c62 <printAllScreens+0x28a>
		printf("[PAS] Opening screen #%d stored @%d \n\r", screenIndex, gconf.screenSectors[screenIndex]);
 8002b48:	f897 1057 	ldrb.w	r1, [r7, #87]	; 0x57
 8002b4c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002b50:	005b      	lsls	r3, r3, #1
 8002b52:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8002b56:	4413      	add	r3, r2
 8002b58:	885b      	ldrh	r3, [r3, #2]
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	484b      	ldr	r0, [pc, #300]	; (8002c8c <printAllScreens+0x2b4>)
 8002b5e:	f005 ffa3 	bl	8008aa8 <iprintf>
		int objectsRead = openScreen(gconf.screenSectors[screenIndex], &screenHeader, objArr, dataArr, pointerArray, maxData, maxObjects);
 8002b62:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002b66:	005b      	lsls	r3, r3, #1
 8002b68:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8002b6c:	4413      	add	r3, r2
 8002b6e:	8858      	ldrh	r0, [r3, #2]
 8002b70:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8002b72:	6c3d      	ldr	r5, [r7, #64]	; 0x40
 8002b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b76:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002b7a:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 8002b7e:	9202      	str	r2, [sp, #8]
 8002b80:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8002b84:	9201      	str	r2, [sp, #4]
 8002b86:	9300      	str	r3, [sp, #0]
 8002b88:	462b      	mov	r3, r5
 8002b8a:	4622      	mov	r2, r4
 8002b8c:	f7ff fe8c 	bl	80028a8 <openScreen>
 8002b90:	6378      	str	r0, [r7, #52]	; 0x34
		printf("[PAS] [%d / %d] objects have been read.\n\r", objectsRead, screenHeader.objectCount);
 8002b92:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002b94:	461a      	mov	r2, r3
 8002b96:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002b98:	483d      	ldr	r0, [pc, #244]	; (8002c90 <printAllScreens+0x2b8>)
 8002b9a:	f005 ff85 	bl	8008aa8 <iprintf>
		printf("[PAS] Object report:\n\r");
 8002b9e:	483d      	ldr	r0, [pc, #244]	; (8002c94 <printAllScreens+0x2bc>)
 8002ba0:	f005 ff82 	bl	8008aa8 <iprintf>
		uint16_t objectIndex = 0;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		while(objectIndex < objectsRead){
 8002baa:	e04a      	b.n	8002c42 <printAllScreens+0x26a>
			struct object thisObject = *(objArr + objectIndex);
 8002bac:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002bae:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	00db      	lsls	r3, r3, #3
 8002bb6:	1a9b      	subs	r3, r3, r2
 8002bb8:	005b      	lsls	r3, r3, #1
 8002bba:	18ca      	adds	r2, r1, r3
 8002bbc:	f107 0320 	add.w	r3, r7, #32
 8002bc0:	4614      	mov	r4, r2
 8002bc2:	6820      	ldr	r0, [r4, #0]
 8002bc4:	6861      	ldr	r1, [r4, #4]
 8002bc6:	68a2      	ldr	r2, [r4, #8]
 8002bc8:	c307      	stmia	r3!, {r0, r1, r2}
 8002bca:	89a2      	ldrh	r2, [r4, #12]
 8002bcc:	801a      	strh	r2, [r3, #0]
			char typeStr[30];
			objectTypeToString(thisObject.objectType, typeStr);
 8002bce:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002bd2:	463a      	mov	r2, r7
 8002bd4:	4611      	mov	r1, r2
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f000 f868 	bl	8002cac <objectTypeToString>
			printf("[PAS] %s id=%d from (%d, %d) to (%d,%d), hex data (%db) =[", typeStr, thisObject.objectId, thisObject.xstart, thisObject.ystart, thisObject.xend, thisObject.yend, thisObject.dataLen);
 8002bdc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002bde:	461d      	mov	r5, r3
 8002be0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002be2:	461e      	mov	r6, r3
 8002be4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002be6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002be8:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8002bea:	4608      	mov	r0, r1
 8002bec:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8002bee:	460c      	mov	r4, r1
 8002bf0:	4639      	mov	r1, r7
 8002bf2:	9403      	str	r4, [sp, #12]
 8002bf4:	9002      	str	r0, [sp, #8]
 8002bf6:	9201      	str	r2, [sp, #4]
 8002bf8:	9300      	str	r3, [sp, #0]
 8002bfa:	4633      	mov	r3, r6
 8002bfc:	462a      	mov	r2, r5
 8002bfe:	4826      	ldr	r0, [pc, #152]	; (8002c98 <printAllScreens+0x2c0>)
 8002c00:	f005 ff52 	bl	8008aa8 <iprintf>
			int dataIndex = 0;
 8002c04:	2300      	movs	r3, #0
 8002c06:	653b      	str	r3, [r7, #80]	; 0x50
			while(dataIndex < thisObject.dataLen){
 8002c08:	e00e      	b.n	8002c28 <printAllScreens+0x250>
				printf("%02x", *(pointerArray[objectIndex] + dataIndex));
 8002c0a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8002c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c10:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002c14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c16:	4413      	add	r3, r2
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	481f      	ldr	r0, [pc, #124]	; (8002c9c <printAllScreens+0x2c4>)
 8002c1e:	f005 ff43 	bl	8008aa8 <iprintf>
				dataIndex++;
 8002c22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c24:	3301      	adds	r3, #1
 8002c26:	653b      	str	r3, [r7, #80]	; 0x50
			while(dataIndex < thisObject.dataLen){
 8002c28:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	dbeb      	blt.n	8002c0a <printAllScreens+0x232>
			}
			printf("]\n\r");
 8002c32:	481b      	ldr	r0, [pc, #108]	; (8002ca0 <printAllScreens+0x2c8>)
 8002c34:	f005 ff38 	bl	8008aa8 <iprintf>
			objectIndex++;
 8002c38:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		while(objectIndex < objectsRead){
 8002c42:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	dcaf      	bgt.n	8002bac <printAllScreens+0x1d4>
		}
		printf("[PAS] End of screen #%d \n\r", screenIndex);
 8002c4c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002c50:	4619      	mov	r1, r3
 8002c52:	4814      	ldr	r0, [pc, #80]	; (8002ca4 <printAllScreens+0x2cc>)
 8002c54:	f005 ff28 	bl	8008aa8 <iprintf>
		screenIndex++;
 8002c58:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	while(screenIndex < gconf.totalScreens){
 8002c62:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8002c66:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	f4ff af6c 	bcc.w	8002b48 <printAllScreens+0x170>
	}

	printf("[PAS] Finished. \n\n\n\r");
 8002c70:	480d      	ldr	r0, [pc, #52]	; (8002ca8 <printAllScreens+0x2d0>)
 8002c72:	f005 ff19 	bl	8008aa8 <iprintf>
 8002c76:	46c5      	mov	sp, r8
}
 8002c78:	bf00      	nop
 8002c7a:	3760      	adds	r7, #96	; 0x60
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002c82:	b004      	add	sp, #16
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	08009e34 	.word	0x08009e34
 8002c8c:	08009e68 	.word	0x08009e68
 8002c90:	08009e90 	.word	0x08009e90
 8002c94:	08009ebc 	.word	0x08009ebc
 8002c98:	08009ed4 	.word	0x08009ed4
 8002c9c:	08009f10 	.word	0x08009f10
 8002ca0:	08009f18 	.word	0x08009f18
 8002ca4:	08009f1c 	.word	0x08009f1c
 8002ca8:	08009f38 	.word	0x08009f38

08002cac <objectTypeToString>:
const char *typeNames[] 	= 		{"rectangle", "button", "label", "bitmap"};
const objectType_t types[] 	= 		{rectangle, button, label, bitmap};
const int typeCount = 3;

// Make sure that str is long enough for longest member of typeNames!
void objectTypeToString(objectType_t type, char *str){
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	6039      	str	r1, [r7, #0]
 8002cb6:	71fb      	strb	r3, [r7, #7]
	int i;
	for(i=0; i<typeCount; i++){
 8002cb8:	2300      	movs	r3, #0
 8002cba:	60fb      	str	r3, [r7, #12]
 8002cbc:	e012      	b.n	8002ce4 <objectTypeToString+0x38>
		if(type == types[i]){
 8002cbe:	4a0d      	ldr	r2, [pc, #52]	; (8002cf4 <objectTypeToString+0x48>)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	79fa      	ldrb	r2, [r7, #7]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d108      	bne.n	8002cde <objectTypeToString+0x32>
			strcpy(str, typeNames[i]);
 8002ccc:	4a0a      	ldr	r2, [pc, #40]	; (8002cf8 <objectTypeToString+0x4c>)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	6838      	ldr	r0, [r7, #0]
 8002cd8:	f005 fefe 	bl	8008ad8 <strcpy>
			return;
 8002cdc:	e006      	b.n	8002cec <objectTypeToString+0x40>
	for(i=0; i<typeCount; i++){
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	60fb      	str	r3, [r7, #12]
 8002ce4:	2203      	movs	r2, #3
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	dbe8      	blt.n	8002cbe <objectTypeToString+0x12>
		}
	}

}
 8002cec:	3710      	adds	r7, #16
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	0800a164 	.word	0x0800a164
 8002cf8:	20000000 	.word	0x20000000

08002cfc <stringToObjectType>:

objectType_t stringToObjectType(char *str){
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
	int i;
	for(i=0; i<typeCount; i++){
 8002d04:	2300      	movs	r3, #0
 8002d06:	60fb      	str	r3, [r7, #12]
 8002d08:	e012      	b.n	8002d30 <stringToObjectType+0x34>
		if(strcmp(typeNames[i], str) == 0){
 8002d0a:	4a0e      	ldr	r2, [pc, #56]	; (8002d44 <stringToObjectType+0x48>)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d12:	6879      	ldr	r1, [r7, #4]
 8002d14:	4618      	mov	r0, r3
 8002d16:	f7fd fa5b 	bl	80001d0 <strcmp>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d104      	bne.n	8002d2a <stringToObjectType+0x2e>
			return types[i];
 8002d20:	4a09      	ldr	r2, [pc, #36]	; (8002d48 <stringToObjectType+0x4c>)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	4413      	add	r3, r2
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	e007      	b.n	8002d3a <stringToObjectType+0x3e>
	for(i=0; i<typeCount; i++){
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	60fb      	str	r3, [r7, #12]
 8002d30:	2203      	movs	r2, #3
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	4293      	cmp	r3, r2
 8002d36:	dbe8      	blt.n	8002d0a <stringToObjectType+0xe>
		}
	}
	return none;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3710      	adds	r7, #16
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	20000000 	.word	0x20000000
 8002d48:	0800a164 	.word	0x0800a164

08002d4c <flashCSSet>:
#include <string.h>

#define FLASHWRITE_DEBUG_PRINT 0


void flashCSSet(){
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002d50:	2201      	movs	r2, #1
 8002d52:	2110      	movs	r1, #16
 8002d54:	4802      	ldr	r0, [pc, #8]	; (8002d60 <flashCSSet+0x14>)
 8002d56:	f002 f9e1 	bl	800511c <HAL_GPIO_WritePin>
}
 8002d5a:	bf00      	nop
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	40020000 	.word	0x40020000

08002d64 <flashCSReset>:

void flashCSReset(){
 8002d64:	b580      	push	{r7, lr}
 8002d66:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8002d68:	2200      	movs	r2, #0
 8002d6a:	2110      	movs	r1, #16
 8002d6c:	4802      	ldr	r0, [pc, #8]	; (8002d78 <flashCSReset+0x14>)
 8002d6e:	f002 f9d5 	bl	800511c <HAL_GPIO_WritePin>
}
 8002d72:	bf00      	nop
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	40020000 	.word	0x40020000

08002d7c <ext_flash_erase_4kB>:
		}
	}
}

void ext_flash_erase_4kB(unsigned int address)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
	unsigned int i;

	printf("erase at %d \n\r", address);
 8002d84:	6879      	ldr	r1, [r7, #4]
 8002d86:	481a      	ldr	r0, [pc, #104]	; (8002df0 <ext_flash_erase_4kB+0x74>)
 8002d88:	f005 fe8e 	bl	8008aa8 <iprintf>

	ext_flash_wren();
 8002d8c:	f000 f86c 	bl	8002e68 <ext_flash_wren>

	flashCSReset();
 8002d90:	f7ff ffe8 	bl	8002d64 <flashCSReset>
	SPI1_Transfer(0x20);
 8002d94:	2020      	movs	r0, #32
 8002d96:	f001 f8bb 	bl	8003f10 <SPI1_Transfer>
	SPI1_Transfer((address>>16)&0xFF);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	0c1b      	lsrs	r3, r3, #16
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	4618      	mov	r0, r3
 8002da2:	f001 f8b5 	bl	8003f10 <SPI1_Transfer>
	SPI1_Transfer((address>>8)&0xFF);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	0a1b      	lsrs	r3, r3, #8
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	4618      	mov	r0, r3
 8002dae:	f001 f8af 	bl	8003f10 <SPI1_Transfer>
	SPI1_Transfer(address&0xFF);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	4618      	mov	r0, r3
 8002db8:	f001 f8aa 	bl	8003f10 <SPI1_Transfer>
	flashCSSet();
 8002dbc:	f7ff ffc6 	bl	8002d4c <flashCSSet>

	for(i=0;i<1000;i++)
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	60fb      	str	r3, [r7, #12]
 8002dc4:	e00a      	b.n	8002ddc <ext_flash_erase_4kB+0x60>
	{
		HAL_Delay(1);
 8002dc6:	2001      	movs	r0, #1
 8002dc8:	f001 fe44 	bl	8004a54 <HAL_Delay>
		if(ext_flash_read_status_register_1()==0x00)
 8002dcc:	f000 f838 	bl	8002e40 <ext_flash_read_status_register_1>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d007      	beq.n	8002de6 <ext_flash_erase_4kB+0x6a>
	for(i=0;i<1000;i++)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	3301      	adds	r3, #1
 8002dda:	60fb      	str	r3, [r7, #12]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002de2:	d3f0      	bcc.n	8002dc6 <ext_flash_erase_4kB+0x4a>
		{
			break;
		}
	}
}
 8002de4:	e000      	b.n	8002de8 <ext_flash_erase_4kB+0x6c>
			break;
 8002de6:	bf00      	nop
}
 8002de8:	bf00      	nop
 8002dea:	3710      	adds	r7, #16
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	08009f74 	.word	0x08009f74

08002df4 <ext_flash_write>:




void ext_flash_write(unsigned int address, unsigned char *buff, unsigned int len)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	60b9      	str	r1, [r7, #8]
 8002dfe:	607a      	str	r2, [r7, #4]
	ext_flash_continuous_write_begin(address);
 8002e00:	68f8      	ldr	r0, [r7, #12]
 8002e02:	f000 f87c 	bl	8002efe <ext_flash_continuous_write_begin>
	ext_flash_continuous_write_write(buff, len);
 8002e06:	6879      	ldr	r1, [r7, #4]
 8002e08:	68b8      	ldr	r0, [r7, #8]
 8002e0a:	f000 f898 	bl	8002f3e <ext_flash_continuous_write_write>
	ext_flash_continuous_write_finish();
 8002e0e:	f000 f8b1 	bl	8002f74 <ext_flash_continuous_write_finish>
}
 8002e12:	bf00      	nop
 8002e14:	3710      	adds	r7, #16
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <ext_flash_read>:
void ext_flash_read(unsigned int address, unsigned char *buff, unsigned int len)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b084      	sub	sp, #16
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	60f8      	str	r0, [r7, #12]
 8002e22:	60b9      	str	r1, [r7, #8]
 8002e24:	607a      	str	r2, [r7, #4]
	ext_flash_continuous_read_begin(address);
 8002e26:	68f8      	ldr	r0, [r7, #12]
 8002e28:	f000 f829 	bl	8002e7e <ext_flash_continuous_read_begin>
	ext_flash_continuous_read_read(buff, len);
 8002e2c:	6879      	ldr	r1, [r7, #4]
 8002e2e:	68b8      	ldr	r0, [r7, #8]
 8002e30:	f000 f843 	bl	8002eba <ext_flash_continuous_read_read>
	ext_flash_continuous_read_finish();
 8002e34:	f000 f85d 	bl	8002ef2 <ext_flash_continuous_read_finish>
}
 8002e38:	bf00      	nop
 8002e3a:	3710      	adds	r7, #16
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <ext_flash_read_status_register_1>:

	return data;
}

unsigned char ext_flash_read_status_register_1()
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
	char data;
	flashCSReset();
 8002e46:	f7ff ff8d 	bl	8002d64 <flashCSReset>
	SPI1_Transfer(0x05);
 8002e4a:	2005      	movs	r0, #5
 8002e4c:	f001 f860 	bl	8003f10 <SPI1_Transfer>
	data=SPI1_Transfer(0x00);
 8002e50:	2000      	movs	r0, #0
 8002e52:	f001 f85d 	bl	8003f10 <SPI1_Transfer>
 8002e56:	4603      	mov	r3, r0
 8002e58:	71fb      	strb	r3, [r7, #7]
	flashCSSet();
 8002e5a:	f7ff ff77 	bl	8002d4c <flashCSSet>

	return data;
 8002e5e:	79fb      	ldrb	r3, [r7, #7]
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3708      	adds	r7, #8
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <ext_flash_wren>:

void ext_flash_wren()
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
	flashCSReset();
 8002e6c:	f7ff ff7a 	bl	8002d64 <flashCSReset>
	SPI1_Transfer(0x06);
 8002e70:	2006      	movs	r0, #6
 8002e72:	f001 f84d 	bl	8003f10 <SPI1_Transfer>
	flashCSSet();
 8002e76:	f7ff ff69 	bl	8002d4c <flashCSSet>
}
 8002e7a:	bf00      	nop
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <ext_flash_continuous_read_begin>:


//Continuous functions below keep conection open while reading, allowing for access to data not aligned to 4kB sectors
void ext_flash_continuous_read_begin(unsigned int address){
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b082      	sub	sp, #8
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
	command[0]=0x03;
	command[1]=((char *)&address)[3];
	command[2]=((char *)&address)[2];
	command[3]=((char *)&address)[1];*/

	flashCSReset();
 8002e86:	f7ff ff6d 	bl	8002d64 <flashCSReset>

	SPI1_Transfer(0x03);
 8002e8a:	2003      	movs	r0, #3
 8002e8c:	f001 f840 	bl	8003f10 <SPI1_Transfer>
	SPI1_Transfer((address>>16)&0xFF);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	0c1b      	lsrs	r3, r3, #16
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	4618      	mov	r0, r3
 8002e98:	f001 f83a 	bl	8003f10 <SPI1_Transfer>
	SPI1_Transfer((address>>8)&0xFF);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	0a1b      	lsrs	r3, r3, #8
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f001 f834 	bl	8003f10 <SPI1_Transfer>
	SPI1_Transfer(address&0xFF);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	4618      	mov	r0, r3
 8002eae:	f001 f82f 	bl	8003f10 <SPI1_Transfer>
}
 8002eb2:	bf00      	nop
 8002eb4:	3708      	adds	r7, #8
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <ext_flash_continuous_read_read>:

void ext_flash_continuous_read_read(unsigned char *buff, unsigned int len){
 8002eba:	b590      	push	{r4, r7, lr}
 8002ebc:	b085      	sub	sp, #20
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
 8002ec2:	6039      	str	r1, [r7, #0]
	for(unsigned int i = 0; i<len; i++){
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	60fb      	str	r3, [r7, #12]
 8002ec8:	e00a      	b.n	8002ee0 <ext_flash_continuous_read_read+0x26>
		*(buff+i) = SPI1_Transfer(0x00);
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	18d4      	adds	r4, r2, r3
 8002ed0:	2000      	movs	r0, #0
 8002ed2:	f001 f81d 	bl	8003f10 <SPI1_Transfer>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	7023      	strb	r3, [r4, #0]
	for(unsigned int i = 0; i<len; i++){
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	3301      	adds	r3, #1
 8002ede:	60fb      	str	r3, [r7, #12]
 8002ee0:	68fa      	ldr	r2, [r7, #12]
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d3f0      	bcc.n	8002eca <ext_flash_continuous_read_read+0x10>
	}
}
 8002ee8:	bf00      	nop
 8002eea:	bf00      	nop
 8002eec:	3714      	adds	r7, #20
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd90      	pop	{r4, r7, pc}

08002ef2 <ext_flash_continuous_read_finish>:
void ext_flash_continuous_read_skip(unsigned int len){
	for(unsigned int i = 0; i<len; i++){
			SPI1_Transfer(0x00);
	}
}
void ext_flash_continuous_read_finish(){
 8002ef2:	b580      	push	{r7, lr}
 8002ef4:	af00      	add	r7, sp, #0
	flashCSSet();
 8002ef6:	f7ff ff29 	bl	8002d4c <flashCSSet>
}
 8002efa:	bf00      	nop
 8002efc:	bd80      	pop	{r7, pc}

08002efe <ext_flash_continuous_write_begin>:

void ext_flash_continuous_write_begin(unsigned int address){
 8002efe:	b580      	push	{r7, lr}
 8002f00:	b082      	sub	sp, #8
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
	ext_flash_wren();
 8002f06:	f7ff ffaf 	bl	8002e68 <ext_flash_wren>
	flashCSReset();
 8002f0a:	f7ff ff2b 	bl	8002d64 <flashCSReset>
	SPI1_Transfer(0x02);
 8002f0e:	2002      	movs	r0, #2
 8002f10:	f000 fffe 	bl	8003f10 <SPI1_Transfer>
	SPI1_Transfer((address>>16)&0xFF);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	0c1b      	lsrs	r3, r3, #16
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f000 fff8 	bl	8003f10 <SPI1_Transfer>
	SPI1_Transfer((address>>8)&0xFF);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	0a1b      	lsrs	r3, r3, #8
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	4618      	mov	r0, r3
 8002f28:	f000 fff2 	bl	8003f10 <SPI1_Transfer>
	SPI1_Transfer(address&0xFF);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	4618      	mov	r0, r3
 8002f32:	f000 ffed 	bl	8003f10 <SPI1_Transfer>
	if(FLASHWRITE_DEBUG_PRINT){printf("FLASHWRITE @ %x :", address);};
}
 8002f36:	bf00      	nop
 8002f38:	3708      	adds	r7, #8
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}

08002f3e <ext_flash_continuous_write_write>:
void ext_flash_continuous_write_write(unsigned char *buff, unsigned int len){
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b084      	sub	sp, #16
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
 8002f46:	6039      	str	r1, [r7, #0]
	unsigned int i;

	for(i=0;i<len;i++)
 8002f48:	2300      	movs	r3, #0
 8002f4a:	60fb      	str	r3, [r7, #12]
 8002f4c:	e009      	b.n	8002f62 <ext_flash_continuous_write_write+0x24>
		{
			SPI1_Transfer(buff[i]);
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	4413      	add	r3, r2
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f000 ffda 	bl	8003f10 <SPI1_Transfer>
	for(i=0;i<len;i++)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	3301      	adds	r3, #1
 8002f60:	60fb      	str	r3, [r7, #12]
 8002f62:	68fa      	ldr	r2, [r7, #12]
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d3f1      	bcc.n	8002f4e <ext_flash_continuous_write_write+0x10>
			if(FLASHWRITE_DEBUG_PRINT){printf(" %x ", buff[i]);};
		}
	if(FLASHWRITE_DEBUG_PRINT){printf("\n\r");};
}
 8002f6a:	bf00      	nop
 8002f6c:	bf00      	nop
 8002f6e:	3710      	adds	r7, #16
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <ext_flash_continuous_write_finish>:
void ext_flash_continuous_write_finish(){
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
	flashCSSet();
 8002f7a:	f7ff fee7 	bl	8002d4c <flashCSSet>
	unsigned int i;
	for(i=0;i<1000;i++)
 8002f7e:	2300      	movs	r3, #0
 8002f80:	607b      	str	r3, [r7, #4]
 8002f82:	e00a      	b.n	8002f9a <ext_flash_continuous_write_finish+0x26>
	{
		HAL_Delay(1);
 8002f84:	2001      	movs	r0, #1
 8002f86:	f001 fd65 	bl	8004a54 <HAL_Delay>
		if(ext_flash_read_status_register_1()==0x00)
 8002f8a:	f7ff ff59 	bl	8002e40 <ext_flash_read_status_register_1>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d007      	beq.n	8002fa4 <ext_flash_continuous_write_finish+0x30>
	for(i=0;i<1000;i++)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	3301      	adds	r3, #1
 8002f98:	607b      	str	r3, [r7, #4]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002fa0:	d3f0      	bcc.n	8002f84 <ext_flash_continuous_write_finish+0x10>
		{
			break;
		}
	}
}
 8002fa2:	e000      	b.n	8002fa6 <ext_flash_continuous_write_finish+0x32>
			break;
 8002fa4:	bf00      	nop
}
 8002fa6:	bf00      	nop
 8002fa8:	3708      	adds	r7, #8
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
	...

08002fb0 <ext_flash_write_multipage>:

}



void ext_flash_write_multipage(unsigned int address, unsigned char *buff, unsigned int len){
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b0c8      	sub	sp, #288	; 0x120
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	f107 030c 	add.w	r3, r7, #12
 8002fba:	6018      	str	r0, [r3, #0]
 8002fbc:	f107 0308 	add.w	r3, r7, #8
 8002fc0:	6019      	str	r1, [r3, #0]
 8002fc2:	1d3b      	adds	r3, r7, #4
 8002fc4:	601a      	str	r2, [r3, #0]
	printf("Multipage write [%d]b@%d \n\r", len, address);
 8002fc6:	f107 020c 	add.w	r2, r7, #12
 8002fca:	1d3b      	adds	r3, r7, #4
 8002fcc:	6812      	ldr	r2, [r2, #0]
 8002fce:	6819      	ldr	r1, [r3, #0]
 8002fd0:	482a      	ldr	r0, [pc, #168]	; (800307c <ext_flash_write_multipage+0xcc>)
 8002fd2:	f005 fd69 	bl	8008aa8 <iprintf>
	unsigned char pageBuff[PAGE_SIZE];
	unsigned int bytesLeft = len;
 8002fd6:	1d3b      	adds	r3, r7, #4
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	unsigned int buffIndex = 0;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	unsigned int addrIncrement = 0;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	while(bytesLeft > 0){
 8002fea:	e03d      	b.n	8003068 <ext_flash_write_multipage+0xb8>
		if(bytesLeft <= PAGE_SIZE){
 8002fec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002ff0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ff4:	d810      	bhi.n	8003018 <ext_flash_write_multipage+0x68>
			memcpy(pageBuff, buff + buffIndex, bytesLeft);
 8002ff6:	f107 0308 	add.w	r3, r7, #8
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003000:	18d1      	adds	r1, r2, r3
 8003002:	f107 0314 	add.w	r3, r7, #20
 8003006:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800300a:	4618      	mov	r0, r3
 800300c:	f005 fd36 	bl	8008a7c <memcpy>
			bytesLeft = 0;
 8003010:	2300      	movs	r3, #0
 8003012:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003016:	e014      	b.n	8003042 <ext_flash_write_multipage+0x92>
		}
		else{
			memcpy(pageBuff, buff + buffIndex, PAGE_SIZE);
 8003018:	f107 0308 	add.w	r3, r7, #8
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003022:	4413      	add	r3, r2
 8003024:	f107 0214 	add.w	r2, r7, #20
 8003028:	4610      	mov	r0, r2
 800302a:	4619      	mov	r1, r3
 800302c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003030:	461a      	mov	r2, r3
 8003032:	f005 fd23 	bl	8008a7c <memcpy>
			bytesLeft -= PAGE_SIZE;
 8003036:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800303a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800303e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
		}
		ext_flash_write(address + addrIncrement, pageBuff, PAGE_SIZE);
 8003042:	f107 030c 	add.w	r3, r7, #12
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800304c:	4413      	add	r3, r2
 800304e:	f107 0114 	add.w	r1, r7, #20
 8003052:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003056:	4618      	mov	r0, r3
 8003058:	f7ff fecc 	bl	8002df4 <ext_flash_write>
		addrIncrement += PAGE_SIZE;
 800305c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003060:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003064:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	while(bytesLeft > 0){
 8003068:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800306c:	2b00      	cmp	r3, #0
 800306e:	d1bd      	bne.n	8002fec <ext_flash_write_multipage+0x3c>
	}

}
 8003070:	bf00      	nop
 8003072:	bf00      	nop
 8003074:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	08009fa8 	.word	0x08009fa8

08003080 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003080:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003082:	f2ad 4d5c 	subw	sp, sp, #1116	; 0x45c
 8003086:	af7e      	add	r7, sp, #504	; 0x1f8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003088:	f001 fc72 	bl	8004970 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800308c:	f000 fa0e 	bl	80034ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003090:	f000 fbd0 	bl	8003834 <MX_GPIO_Init>
  MX_FSMC_Init();
 8003094:	f000 fc74 	bl	8003980 <MX_FSMC_Init>
  MX_USART1_UART_Init();
 8003098:	f000 fb68 	bl	800376c <MX_USART1_UART_Init>
  MX_I2C1_Init();
 800309c:	f000 fa70 	bl	8003580 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80030a0:	f000 fb96 	bl	80037d0 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80030a4:	f000 faa2 	bl	80035ec <MX_SPI1_Init>
  MX_TIM1_Init();
 80030a8:	f000 fade 	bl	8003668 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  //enable uart interrupt
  uint16_t count = 0;
 80030ac:	2300      	movs	r3, #0
 80030ae:	f8a7 324a 	strh.w	r3, [r7, #586]	; 0x24a
  Init_LCD();
 80030b2:	f7fd fd6f 	bl	8000b94 <Init_LCD>

  touch_reset();
 80030b6:	f7fe fa75 	bl	80015a4 <touch_reset>
  touch_init(hi2c1);
 80030ba:	4cdd      	ldr	r4, [pc, #884]	; (8003430 <main+0x3b0>)
 80030bc:	4668      	mov	r0, sp
 80030be:	f104 0310 	add.w	r3, r4, #16
 80030c2:	2244      	movs	r2, #68	; 0x44
 80030c4:	4619      	mov	r1, r3
 80030c6:	f005 fcd9 	bl	8008a7c <memcpy>
 80030ca:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80030ce:	f7fe f989 	bl	80013e4 <touch_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  	  printf("Entering main loop\n\r");
 80030d2:	48d8      	ldr	r0, [pc, #864]	; (8003434 <main+0x3b4>)
 80030d4:	f005 fce8 	bl	8008aa8 <iprintf>


  	int loopNumber = 0;
 80030d8:	2300      	movs	r3, #0
 80030da:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c



	LCD_fillRect(0,0,50,50,WHITE);
 80030de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030e2:	9300      	str	r3, [sp, #0]
 80030e4:	2332      	movs	r3, #50	; 0x32
 80030e6:	2232      	movs	r2, #50	; 0x32
 80030e8:	2100      	movs	r1, #0
 80030ea:	2000      	movs	r0, #0
 80030ec:	f7fd fd60 	bl	8000bb0 <LCD_fillRect>
	LCD_fillRect(470,0,50,50,RED);
 80030f0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80030f4:	9300      	str	r3, [sp, #0]
 80030f6:	2332      	movs	r3, #50	; 0x32
 80030f8:	2232      	movs	r2, #50	; 0x32
 80030fa:	2100      	movs	r1, #0
 80030fc:	f44f 70eb 	mov.w	r0, #470	; 0x1d6
 8003100:	f7fd fd56 	bl	8000bb0 <LCD_fillRect>
	LCD_fillRect(256,154,50,50,RED);
 8003104:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003108:	9300      	str	r3, [sp, #0]
 800310a:	2332      	movs	r3, #50	; 0x32
 800310c:	2232      	movs	r2, #50	; 0x32
 800310e:	219a      	movs	r1, #154	; 0x9a
 8003110:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003114:	f7fd fd4c 	bl	8000bb0 <LCD_fillRect>
	LCD_fillRect(100,100,50,50,YELLOW);
 8003118:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800311c:	9300      	str	r3, [sp, #0]
 800311e:	2332      	movs	r3, #50	; 0x32
 8003120:	2232      	movs	r2, #50	; 0x32
 8003122:	2164      	movs	r1, #100	; 0x64
 8003124:	2064      	movs	r0, #100	; 0x64
 8003126:	f7fd fd43 	bl	8000bb0 <LCD_fillRect>
	printf("Register result: %d\n\r",touch_register_element(0,0,0,0,50,50,0,0));
 800312a:	2300      	movs	r3, #0
 800312c:	9303      	str	r3, [sp, #12]
 800312e:	2300      	movs	r3, #0
 8003130:	9302      	str	r3, [sp, #8]
 8003132:	2332      	movs	r3, #50	; 0x32
 8003134:	9301      	str	r3, [sp, #4]
 8003136:	2332      	movs	r3, #50	; 0x32
 8003138:	9300      	str	r3, [sp, #0]
 800313a:	2300      	movs	r3, #0
 800313c:	2200      	movs	r2, #0
 800313e:	2100      	movs	r1, #0
 8003140:	2000      	movs	r0, #0
 8003142:	f7fe fb29 	bl	8001798 <touch_register_element>
 8003146:	4603      	mov	r3, r0
 8003148:	4619      	mov	r1, r3
 800314a:	48bb      	ldr	r0, [pc, #748]	; (8003438 <main+0x3b8>)
 800314c:	f005 fcac 	bl	8008aa8 <iprintf>
	printf("Register result: %d\n\r",touch_register_element(0,0,470,0,470+50,50,0,0));
 8003150:	2300      	movs	r3, #0
 8003152:	9303      	str	r3, [sp, #12]
 8003154:	2300      	movs	r3, #0
 8003156:	9302      	str	r3, [sp, #8]
 8003158:	2332      	movs	r3, #50	; 0x32
 800315a:	9301      	str	r3, [sp, #4]
 800315c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003160:	9300      	str	r3, [sp, #0]
 8003162:	2300      	movs	r3, #0
 8003164:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8003168:	2100      	movs	r1, #0
 800316a:	2000      	movs	r0, #0
 800316c:	f7fe fb14 	bl	8001798 <touch_register_element>
 8003170:	4603      	mov	r3, r0
 8003172:	4619      	mov	r1, r3
 8003174:	48b0      	ldr	r0, [pc, #704]	; (8003438 <main+0x3b8>)
 8003176:	f005 fc97 	bl	8008aa8 <iprintf>
	printf("Register result: %d\n\r",touch_register_element(0,0,256,154,256+50,154+50,0,0));
 800317a:	2300      	movs	r3, #0
 800317c:	9303      	str	r3, [sp, #12]
 800317e:	2300      	movs	r3, #0
 8003180:	9302      	str	r3, [sp, #8]
 8003182:	23cc      	movs	r3, #204	; 0xcc
 8003184:	9301      	str	r3, [sp, #4]
 8003186:	f44f 7399 	mov.w	r3, #306	; 0x132
 800318a:	9300      	str	r3, [sp, #0]
 800318c:	239a      	movs	r3, #154	; 0x9a
 800318e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003192:	2100      	movs	r1, #0
 8003194:	2000      	movs	r0, #0
 8003196:	f7fe faff 	bl	8001798 <touch_register_element>
 800319a:	4603      	mov	r3, r0
 800319c:	4619      	mov	r1, r3
 800319e:	48a6      	ldr	r0, [pc, #664]	; (8003438 <main+0x3b8>)
 80031a0:	f005 fc82 	bl	8008aa8 <iprintf>
	printf("Register result: %d\n\r",touch_register_element(0,0,100,100,150,150,0,0));
 80031a4:	2300      	movs	r3, #0
 80031a6:	9303      	str	r3, [sp, #12]
 80031a8:	2300      	movs	r3, #0
 80031aa:	9302      	str	r3, [sp, #8]
 80031ac:	2396      	movs	r3, #150	; 0x96
 80031ae:	9301      	str	r3, [sp, #4]
 80031b0:	2396      	movs	r3, #150	; 0x96
 80031b2:	9300      	str	r3, [sp, #0]
 80031b4:	2364      	movs	r3, #100	; 0x64
 80031b6:	2264      	movs	r2, #100	; 0x64
 80031b8:	2100      	movs	r1, #0
 80031ba:	2000      	movs	r0, #0
 80031bc:	f7fe faec 	bl	8001798 <touch_register_element>
 80031c0:	4603      	mov	r3, r0
 80031c2:	4619      	mov	r1, r3
 80031c4:	489c      	ldr	r0, [pc, #624]	; (8003438 <main+0x3b8>)
 80031c6:	f005 fc6f 	bl	8008aa8 <iprintf>

	int notYetDrawnFlag = 1;
 80031ca:	2301      	movs	r3, #1
 80031cc:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
	struct generalConfig gConf;
	int currentScreen = 1;
 80031d0:	2301      	movs	r3, #1
 80031d2:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244

	//arrays for holding object data loaded from flash
	uint16_t maxObjects = 128;
 80031d6:	2380      	movs	r3, #128	; 0x80
 80031d8:	f8a7 3242 	strh.w	r3, [r7, #578]	; 0x242
	uint16_t maxData = SECTOR_SIZE*4;
 80031dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80031e0:	f8a7 3240 	strh.w	r3, [r7, #576]	; 0x240
	struct screen screenHeader;
	struct object objArr[maxObjects];
 80031e4:	f8b7 6242 	ldrh.w	r6, [r7, #578]	; 0x242
 80031e8:	4633      	mov	r3, r6
 80031ea:	3b01      	subs	r3, #1
 80031ec:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 80031f0:	b2b4      	uxth	r4, r6
 80031f2:	f04f 0500 	mov.w	r5, #0
 80031f6:	4622      	mov	r2, r4
 80031f8:	462b      	mov	r3, r5
 80031fa:	f04f 0000 	mov.w	r0, #0
 80031fe:	f04f 0100 	mov.w	r1, #0
 8003202:	00d9      	lsls	r1, r3, #3
 8003204:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003208:	00d0      	lsls	r0, r2, #3
 800320a:	4602      	mov	r2, r0
 800320c:	460b      	mov	r3, r1
 800320e:	1b12      	subs	r2, r2, r4
 8003210:	eb63 0305 	sbc.w	r3, r3, r5
 8003214:	f04f 0000 	mov.w	r0, #0
 8003218:	f04f 0100 	mov.w	r1, #0
 800321c:	0119      	lsls	r1, r3, #4
 800321e:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8003222:	0110      	lsls	r0, r2, #4
 8003224:	4602      	mov	r2, r0
 8003226:	460b      	mov	r3, r1
 8003228:	4632      	mov	r2, r6
 800322a:	4613      	mov	r3, r2
 800322c:	00db      	lsls	r3, r3, #3
 800322e:	1a9b      	subs	r3, r3, r2
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	b2b4      	uxth	r4, r6
 8003234:	f04f 0500 	mov.w	r5, #0
 8003238:	4622      	mov	r2, r4
 800323a:	462b      	mov	r3, r5
 800323c:	f04f 0000 	mov.w	r0, #0
 8003240:	f04f 0100 	mov.w	r1, #0
 8003244:	00d9      	lsls	r1, r3, #3
 8003246:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800324a:	00d0      	lsls	r0, r2, #3
 800324c:	4602      	mov	r2, r0
 800324e:	460b      	mov	r3, r1
 8003250:	1b12      	subs	r2, r2, r4
 8003252:	eb63 0305 	sbc.w	r3, r3, r5
 8003256:	f04f 0000 	mov.w	r0, #0
 800325a:	f04f 0100 	mov.w	r1, #0
 800325e:	0119      	lsls	r1, r3, #4
 8003260:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8003264:	0110      	lsls	r0, r2, #4
 8003266:	4602      	mov	r2, r0
 8003268:	460b      	mov	r3, r1
 800326a:	4632      	mov	r2, r6
 800326c:	4613      	mov	r3, r2
 800326e:	00db      	lsls	r3, r3, #3
 8003270:	1a9b      	subs	r3, r3, r2
 8003272:	005b      	lsls	r3, r3, #1
 8003274:	3307      	adds	r3, #7
 8003276:	08db      	lsrs	r3, r3, #3
 8003278:	00db      	lsls	r3, r3, #3
 800327a:	ebad 0d03 	sub.w	sp, sp, r3
 800327e:	ab7e      	add	r3, sp, #504	; 0x1f8
 8003280:	3301      	adds	r3, #1
 8003282:	085b      	lsrs	r3, r3, #1
 8003284:	005b      	lsls	r3, r3, #1
 8003286:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
	uint8_t dataArr[maxData];
 800328a:	f8b7 4240 	ldrh.w	r4, [r7, #576]	; 0x240
 800328e:	4623      	mov	r3, r4
 8003290:	3b01      	subs	r3, #1
 8003292:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 8003296:	b2a0      	uxth	r0, r4
 8003298:	f04f 0100 	mov.w	r1, #0
 800329c:	f04f 0200 	mov.w	r2, #0
 80032a0:	f04f 0300 	mov.w	r3, #0
 80032a4:	00cb      	lsls	r3, r1, #3
 80032a6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80032aa:	00c2      	lsls	r2, r0, #3
 80032ac:	b2a0      	uxth	r0, r4
 80032ae:	f04f 0100 	mov.w	r1, #0
 80032b2:	f04f 0200 	mov.w	r2, #0
 80032b6:	f04f 0300 	mov.w	r3, #0
 80032ba:	00cb      	lsls	r3, r1, #3
 80032bc:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80032c0:	00c2      	lsls	r2, r0, #3
 80032c2:	4623      	mov	r3, r4
 80032c4:	3307      	adds	r3, #7
 80032c6:	08db      	lsrs	r3, r3, #3
 80032c8:	00db      	lsls	r3, r3, #3
 80032ca:	ebad 0d03 	sub.w	sp, sp, r3
 80032ce:	ab7e      	add	r3, sp, #504	; 0x1f8
 80032d0:	3300      	adds	r3, #0
 80032d2:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
	uint8_t *pointerArr[maxObjects];
 80032d6:	f8b7 4242 	ldrh.w	r4, [r7, #578]	; 0x242
 80032da:	4623      	mov	r3, r4
 80032dc:	3b01      	subs	r3, #1
 80032de:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 80032e2:	b2a0      	uxth	r0, r4
 80032e4:	f04f 0100 	mov.w	r1, #0
 80032e8:	f04f 0200 	mov.w	r2, #0
 80032ec:	f04f 0300 	mov.w	r3, #0
 80032f0:	014b      	lsls	r3, r1, #5
 80032f2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80032f6:	0142      	lsls	r2, r0, #5
 80032f8:	b2a0      	uxth	r0, r4
 80032fa:	f04f 0100 	mov.w	r1, #0
 80032fe:	f04f 0200 	mov.w	r2, #0
 8003302:	f04f 0300 	mov.w	r3, #0
 8003306:	014b      	lsls	r3, r1, #5
 8003308:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800330c:	0142      	lsls	r2, r0, #5
 800330e:	4623      	mov	r3, r4
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	3307      	adds	r3, #7
 8003314:	08db      	lsrs	r3, r3, #3
 8003316:	00db      	lsls	r3, r3, #3
 8003318:	ebad 0d03 	sub.w	sp, sp, r3
 800331c:	ab7e      	add	r3, sp, #504	; 0x1f8
 800331e:	3303      	adds	r3, #3
 8003320:	089b      	lsrs	r3, r3, #2
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228


	while (1)
	{

		loopNumber++;
 8003328:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800332c:	3301      	adds	r3, #1
 800332e:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
		int configResult = 1; //1 = no data on uart
 8003332:	2301      	movs	r3, #1
 8003334:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
		if(loopNumber % 6000000 == 0){
 8003338:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 800333c:	4b3f      	ldr	r3, [pc, #252]	; (800343c <main+0x3bc>)
 800333e:	fb83 1302 	smull	r1, r3, r3, r2
 8003342:	14d9      	asrs	r1, r3, #19
 8003344:	17d3      	asrs	r3, r2, #31
 8003346:	1acb      	subs	r3, r1, r3
 8003348:	493d      	ldr	r1, [pc, #244]	; (8003440 <main+0x3c0>)
 800334a:	fb01 f303 	mul.w	r3, r1, r3
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	2b00      	cmp	r3, #0
 8003352:	d11d      	bne.n	8003390 <main+0x310>
			 configResult = configFromUart(); //check if there's incoming data on config uart, if yes, attempt to read configuration
 8003354:	f7fe fc26 	bl	8001ba4 <configFromUart>
 8003358:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
			 char str[] = "You fight \nlike a dairy\nfarmer!";
 800335c:	463b      	mov	r3, r7
 800335e:	4a39      	ldr	r2, [pc, #228]	; (8003444 <main+0x3c4>)
 8003360:	461c      	mov	r4, r3
 8003362:	4615      	mov	r5, r2
 8003364:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003366:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003368:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800336c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			 drawStringToLcd5x7(100, 20, 5, 0xAA, 0, 0xFF, 3, 5, str);
 8003370:	463b      	mov	r3, r7
 8003372:	9304      	str	r3, [sp, #16]
 8003374:	2305      	movs	r3, #5
 8003376:	9303      	str	r3, [sp, #12]
 8003378:	2303      	movs	r3, #3
 800337a:	9302      	str	r3, [sp, #8]
 800337c:	23ff      	movs	r3, #255	; 0xff
 800337e:	9301      	str	r3, [sp, #4]
 8003380:	2300      	movs	r3, #0
 8003382:	9300      	str	r3, [sp, #0]
 8003384:	23aa      	movs	r3, #170	; 0xaa
 8003386:	2205      	movs	r2, #5
 8003388:	2114      	movs	r1, #20
 800338a:	2064      	movs	r0, #100	; 0x64
 800338c:	f000 fcce 	bl	8003d2c <drawStringToLcd5x7>
		}

		//redraw display
		if(notYetDrawnFlag || configResult != 1){
 8003390:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8003394:	2b00      	cmp	r3, #0
 8003396:	d104      	bne.n	80033a2 <main+0x322>
 8003398:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 800339c:	2b01      	cmp	r3, #1
 800339e:	f000 8082 	beq.w	80034a6 <main+0x426>
			notYetDrawnFlag = 0;
 80033a2:	2300      	movs	r3, #0
 80033a4:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
			readGeneralConfig(&gConf);
 80033a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033ac:	4618      	mov	r0, r3
 80033ae:	f7ff fa5d 	bl	800286c <readGeneralConfig>
			printf("Redrawing display. Just FYI:\n\r");
 80033b2:	4825      	ldr	r0, [pc, #148]	; (8003448 <main+0x3c8>)
 80033b4:	f005 fb78 	bl	8008aa8 <iprintf>
			printAllScreens(gConf);
 80033b8:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80033bc:	4668      	mov	r0, sp
 80033be:	f104 0310 	add.w	r3, r4, #16
 80033c2:	f44f 72f9 	mov.w	r2, #498	; 0x1f2
 80033c6:	4619      	mov	r1, r3
 80033c8:	f005 fb58 	bl	8008a7c <memcpy>
 80033cc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80033d0:	f7ff fb02 	bl	80029d8 <printAllScreens>
			int objectsRead = 0;
 80033d4:	2300      	movs	r3, #0
 80033d6:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
			currentScreen = 0;
 80033da:	2300      	movs	r3, #0
 80033dc:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
			if(currentScreen < gConf.totalScreens){
 80033e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	461a      	mov	r2, r3
 80033e8:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80033ec:	4293      	cmp	r3, r2
 80033ee:	da1b      	bge.n	8003428 <main+0x3a8>
				objectsRead = openScreen(gConf.screenSectors[currentScreen], &screenHeader, objArr, dataArr, pointerArr, maxData, maxObjects);
 80033f0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80033f4:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80033f8:	005b      	lsls	r3, r3, #1
 80033fa:	4413      	add	r3, r2
 80033fc:	8858      	ldrh	r0, [r3, #2]
 80033fe:	f8d7 4238 	ldr.w	r4, [r7, #568]	; 0x238
 8003402:	f8d7 5230 	ldr.w	r5, [r7, #560]	; 0x230
 8003406:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800340a:	f107 0120 	add.w	r1, r7, #32
 800340e:	f8b7 2242 	ldrh.w	r2, [r7, #578]	; 0x242
 8003412:	9202      	str	r2, [sp, #8]
 8003414:	f8b7 2240 	ldrh.w	r2, [r7, #576]	; 0x240
 8003418:	9201      	str	r2, [sp, #4]
 800341a:	9300      	str	r3, [sp, #0]
 800341c:	462b      	mov	r3, r5
 800341e:	4622      	mov	r2, r4
 8003420:	f7ff fa42 	bl	80028a8 <openScreen>
 8003424:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
			}
			int i;
			for(i = 0; i<objectsRead; i++){
 8003428:	2300      	movs	r3, #0
 800342a:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 800342e:	e034      	b.n	800349a <main+0x41a>
 8003430:	20002090 	.word	0x20002090
 8003434:	08009fc4 	.word	0x08009fc4
 8003438:	08009fdc 	.word	0x08009fdc
 800343c:	165e9f81 	.word	0x165e9f81
 8003440:	005b8d80 	.word	0x005b8d80
 8003444:	0800a014 	.word	0x0800a014
 8003448:	08009ff4 	.word	0x08009ff4
				drawObjectToLcd(objArr[i], pointerArr[i], 0);
 800344c:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8003450:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8003454:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003458:	f8d7 0238 	ldr.w	r0, [r7, #568]	; 0x238
 800345c:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8003460:	4613      	mov	r3, r2
 8003462:	00db      	lsls	r3, r3, #3
 8003464:	1a9b      	subs	r3, r3, r2
 8003466:	005b      	lsls	r3, r3, #1
 8003468:	4403      	add	r3, r0
 800346a:	2200      	movs	r2, #0
 800346c:	9201      	str	r2, [sp, #4]
 800346e:	9100      	str	r1, [sp, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	2000      	movs	r0, #0
 8003474:	4610      	mov	r0, r2
 8003476:	685a      	ldr	r2, [r3, #4]
 8003478:	2100      	movs	r1, #0
 800347a:	4611      	mov	r1, r2
 800347c:	689a      	ldr	r2, [r3, #8]
 800347e:	2400      	movs	r4, #0
 8003480:	4614      	mov	r4, r2
 8003482:	899a      	ldrh	r2, [r3, #12]
 8003484:	2300      	movs	r3, #0
 8003486:	f362 030f 	bfi	r3, r2, #0, #16
 800348a:	4622      	mov	r2, r4
 800348c:	f000 faf8 	bl	8003a80 <drawObjectToLcd>
			for(i = 0; i<objectsRead; i++){
 8003490:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8003494:	3301      	adds	r3, #1
 8003496:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 800349a:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 800349e:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 80034a2:	429a      	cmp	r2, r3
 80034a4:	dbd2      	blt.n	800344c <main+0x3cc>
			}
		}



		touch_periodic_process();
 80034a6:	f7fe f893 	bl	80015d0 <touch_periodic_process>
	{
 80034aa:	e73d      	b.n	8003328 <main+0x2a8>

080034ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b094      	sub	sp, #80	; 0x50
 80034b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80034b2:	f107 0320 	add.w	r3, r7, #32
 80034b6:	2230      	movs	r2, #48	; 0x30
 80034b8:	2100      	movs	r1, #0
 80034ba:	4618      	mov	r0, r3
 80034bc:	f005 faec 	bl	8008a98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80034c0:	f107 030c 	add.w	r3, r7, #12
 80034c4:	2200      	movs	r2, #0
 80034c6:	601a      	str	r2, [r3, #0]
 80034c8:	605a      	str	r2, [r3, #4]
 80034ca:	609a      	str	r2, [r3, #8]
 80034cc:	60da      	str	r2, [r3, #12]
 80034ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80034d0:	2300      	movs	r3, #0
 80034d2:	60bb      	str	r3, [r7, #8]
 80034d4:	4b28      	ldr	r3, [pc, #160]	; (8003578 <SystemClock_Config+0xcc>)
 80034d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d8:	4a27      	ldr	r2, [pc, #156]	; (8003578 <SystemClock_Config+0xcc>)
 80034da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034de:	6413      	str	r3, [r2, #64]	; 0x40
 80034e0:	4b25      	ldr	r3, [pc, #148]	; (8003578 <SystemClock_Config+0xcc>)
 80034e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034e8:	60bb      	str	r3, [r7, #8]
 80034ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80034ec:	2300      	movs	r3, #0
 80034ee:	607b      	str	r3, [r7, #4]
 80034f0:	4b22      	ldr	r3, [pc, #136]	; (800357c <SystemClock_Config+0xd0>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a21      	ldr	r2, [pc, #132]	; (800357c <SystemClock_Config+0xd0>)
 80034f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034fa:	6013      	str	r3, [r2, #0]
 80034fc:	4b1f      	ldr	r3, [pc, #124]	; (800357c <SystemClock_Config+0xd0>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003504:	607b      	str	r3, [r7, #4]
 8003506:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003508:	2301      	movs	r3, #1
 800350a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800350c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003510:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003512:	2302      	movs	r3, #2
 8003514:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003516:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800351a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800351c:	2308      	movs	r3, #8
 800351e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003520:	23a8      	movs	r3, #168	; 0xa8
 8003522:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003524:	2302      	movs	r3, #2
 8003526:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003528:	2304      	movs	r3, #4
 800352a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800352c:	f107 0320 	add.w	r3, r7, #32
 8003530:	4618      	mov	r0, r3
 8003532:	f002 ff65 	bl	8006400 <HAL_RCC_OscConfig>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d001      	beq.n	8003540 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800353c:	f000 fa9a 	bl	8003a74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003540:	230f      	movs	r3, #15
 8003542:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003544:	2302      	movs	r3, #2
 8003546:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003548:	2300      	movs	r3, #0
 800354a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800354c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003550:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003552:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003556:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003558:	f107 030c 	add.w	r3, r7, #12
 800355c:	2105      	movs	r1, #5
 800355e:	4618      	mov	r0, r3
 8003560:	f003 f9c6 	bl	80068f0 <HAL_RCC_ClockConfig>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d001      	beq.n	800356e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800356a:	f000 fa83 	bl	8003a74 <Error_Handler>
  }
}
 800356e:	bf00      	nop
 8003570:	3750      	adds	r7, #80	; 0x50
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	40023800 	.word	0x40023800
 800357c:	40007000 	.word	0x40007000

08003580 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003584:	4b16      	ldr	r3, [pc, #88]	; (80035e0 <MX_I2C1_Init+0x60>)
 8003586:	4a17      	ldr	r2, [pc, #92]	; (80035e4 <MX_I2C1_Init+0x64>)
 8003588:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800358a:	4b15      	ldr	r3, [pc, #84]	; (80035e0 <MX_I2C1_Init+0x60>)
 800358c:	4a16      	ldr	r2, [pc, #88]	; (80035e8 <MX_I2C1_Init+0x68>)
 800358e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003590:	4b13      	ldr	r3, [pc, #76]	; (80035e0 <MX_I2C1_Init+0x60>)
 8003592:	2200      	movs	r2, #0
 8003594:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003596:	4b12      	ldr	r3, [pc, #72]	; (80035e0 <MX_I2C1_Init+0x60>)
 8003598:	2200      	movs	r2, #0
 800359a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800359c:	4b10      	ldr	r3, [pc, #64]	; (80035e0 <MX_I2C1_Init+0x60>)
 800359e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80035a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80035a4:	4b0e      	ldr	r3, [pc, #56]	; (80035e0 <MX_I2C1_Init+0x60>)
 80035a6:	2200      	movs	r2, #0
 80035a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80035aa:	4b0d      	ldr	r3, [pc, #52]	; (80035e0 <MX_I2C1_Init+0x60>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80035b0:	4b0b      	ldr	r3, [pc, #44]	; (80035e0 <MX_I2C1_Init+0x60>)
 80035b2:	2200      	movs	r2, #0
 80035b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80035b6:	4b0a      	ldr	r3, [pc, #40]	; (80035e0 <MX_I2C1_Init+0x60>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80035bc:	4808      	ldr	r0, [pc, #32]	; (80035e0 <MX_I2C1_Init+0x60>)
 80035be:	f001 fddf 	bl	8005180 <HAL_I2C_Init>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d001      	beq.n	80035cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80035c8:	f000 fa54 	bl	8003a74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  __HAL_I2C_ENABLE(&hi2c1);
 80035cc:	4b04      	ldr	r3, [pc, #16]	; (80035e0 <MX_I2C1_Init+0x60>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	4b03      	ldr	r3, [pc, #12]	; (80035e0 <MX_I2C1_Init+0x60>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f042 0201 	orr.w	r2, r2, #1
 80035da:	601a      	str	r2, [r3, #0]
  /* USER CODE END I2C1_Init 2 */

}
 80035dc:	bf00      	nop
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	20002090 	.word	0x20002090
 80035e4:	40005400 	.word	0x40005400
 80035e8:	000186a0 	.word	0x000186a0

080035ec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80035f0:	4b1b      	ldr	r3, [pc, #108]	; (8003660 <MX_SPI1_Init+0x74>)
 80035f2:	4a1c      	ldr	r2, [pc, #112]	; (8003664 <MX_SPI1_Init+0x78>)
 80035f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80035f6:	4b1a      	ldr	r3, [pc, #104]	; (8003660 <MX_SPI1_Init+0x74>)
 80035f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80035fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80035fe:	4b18      	ldr	r3, [pc, #96]	; (8003660 <MX_SPI1_Init+0x74>)
 8003600:	2200      	movs	r2, #0
 8003602:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003604:	4b16      	ldr	r3, [pc, #88]	; (8003660 <MX_SPI1_Init+0x74>)
 8003606:	2200      	movs	r2, #0
 8003608:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800360a:	4b15      	ldr	r3, [pc, #84]	; (8003660 <MX_SPI1_Init+0x74>)
 800360c:	2202      	movs	r2, #2
 800360e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003610:	4b13      	ldr	r3, [pc, #76]	; (8003660 <MX_SPI1_Init+0x74>)
 8003612:	2201      	movs	r2, #1
 8003614:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003616:	4b12      	ldr	r3, [pc, #72]	; (8003660 <MX_SPI1_Init+0x74>)
 8003618:	f44f 7200 	mov.w	r2, #512	; 0x200
 800361c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800361e:	4b10      	ldr	r3, [pc, #64]	; (8003660 <MX_SPI1_Init+0x74>)
 8003620:	2200      	movs	r2, #0
 8003622:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003624:	4b0e      	ldr	r3, [pc, #56]	; (8003660 <MX_SPI1_Init+0x74>)
 8003626:	2200      	movs	r2, #0
 8003628:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800362a:	4b0d      	ldr	r3, [pc, #52]	; (8003660 <MX_SPI1_Init+0x74>)
 800362c:	2200      	movs	r2, #0
 800362e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003630:	4b0b      	ldr	r3, [pc, #44]	; (8003660 <MX_SPI1_Init+0x74>)
 8003632:	2200      	movs	r2, #0
 8003634:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003636:	4b0a      	ldr	r3, [pc, #40]	; (8003660 <MX_SPI1_Init+0x74>)
 8003638:	220a      	movs	r2, #10
 800363a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800363c:	4808      	ldr	r0, [pc, #32]	; (8003660 <MX_SPI1_Init+0x74>)
 800363e:	f003 fb51 	bl	8006ce4 <HAL_SPI_Init>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d001      	beq.n	800364c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003648:	f000 fa14 	bl	8003a74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  __HAL_SPI_ENABLE(&hspi1);
 800364c:	4b04      	ldr	r3, [pc, #16]	; (8003660 <MX_SPI1_Init+0x74>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	4b03      	ldr	r3, [pc, #12]	; (8003660 <MX_SPI1_Init+0x74>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800365a:	601a      	str	r2, [r3, #0]
  /* USER CODE END SPI1_Init 2 */

}
 800365c:	bf00      	nop
 800365e:	bd80      	pop	{r7, pc}
 8003660:	20002214 	.word	0x20002214
 8003664:	40013000 	.word	0x40013000

08003668 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b092      	sub	sp, #72	; 0x48
 800366c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800366e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003672:	2200      	movs	r2, #0
 8003674:	601a      	str	r2, [r3, #0]
 8003676:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003678:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800367c:	2200      	movs	r2, #0
 800367e:	601a      	str	r2, [r3, #0]
 8003680:	605a      	str	r2, [r3, #4]
 8003682:	609a      	str	r2, [r3, #8]
 8003684:	60da      	str	r2, [r3, #12]
 8003686:	611a      	str	r2, [r3, #16]
 8003688:	615a      	str	r2, [r3, #20]
 800368a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800368c:	1d3b      	adds	r3, r7, #4
 800368e:	2220      	movs	r2, #32
 8003690:	2100      	movs	r1, #0
 8003692:	4618      	mov	r0, r3
 8003694:	f005 fa00 	bl	8008a98 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003698:	4b32      	ldr	r3, [pc, #200]	; (8003764 <MX_TIM1_Init+0xfc>)
 800369a:	4a33      	ldr	r2, [pc, #204]	; (8003768 <MX_TIM1_Init+0x100>)
 800369c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800369e:	4b31      	ldr	r3, [pc, #196]	; (8003764 <MX_TIM1_Init+0xfc>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036a4:	4b2f      	ldr	r3, [pc, #188]	; (8003764 <MX_TIM1_Init+0xfc>)
 80036a6:	2200      	movs	r2, #0
 80036a8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80036aa:	4b2e      	ldr	r3, [pc, #184]	; (8003764 <MX_TIM1_Init+0xfc>)
 80036ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036b0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036b2:	4b2c      	ldr	r3, [pc, #176]	; (8003764 <MX_TIM1_Init+0xfc>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80036b8:	4b2a      	ldr	r3, [pc, #168]	; (8003764 <MX_TIM1_Init+0xfc>)
 80036ba:	2200      	movs	r2, #0
 80036bc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036be:	4b29      	ldr	r3, [pc, #164]	; (8003764 <MX_TIM1_Init+0xfc>)
 80036c0:	2200      	movs	r2, #0
 80036c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80036c4:	4827      	ldr	r0, [pc, #156]	; (8003764 <MX_TIM1_Init+0xfc>)
 80036c6:	f003 fbde 	bl	8006e86 <HAL_TIM_PWM_Init>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d001      	beq.n	80036d4 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80036d0:	f000 f9d0 	bl	8003a74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036d4:	2300      	movs	r3, #0
 80036d6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036d8:	2300      	movs	r3, #0
 80036da:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80036dc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80036e0:	4619      	mov	r1, r3
 80036e2:	4820      	ldr	r0, [pc, #128]	; (8003764 <MX_TIM1_Init+0xfc>)
 80036e4:	f004 f88e 	bl	8007804 <HAL_TIMEx_MasterConfigSynchronization>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d001      	beq.n	80036f2 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80036ee:	f000 f9c1 	bl	8003a74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80036f2:	2360      	movs	r3, #96	; 0x60
 80036f4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 65535;
 80036f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80036fa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80036fc:	2300      	movs	r3, #0
 80036fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003700:	2300      	movs	r3, #0
 8003702:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003704:	2300      	movs	r3, #0
 8003706:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003708:	2300      	movs	r3, #0
 800370a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800370c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003710:	220c      	movs	r2, #12
 8003712:	4619      	mov	r1, r3
 8003714:	4813      	ldr	r0, [pc, #76]	; (8003764 <MX_TIM1_Init+0xfc>)
 8003716:	f003 fd3d 	bl	8007194 <HAL_TIM_PWM_ConfigChannel>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d001      	beq.n	8003724 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8003720:	f000 f9a8 	bl	8003a74 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003724:	2300      	movs	r3, #0
 8003726:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003728:	2300      	movs	r3, #0
 800372a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800372c:	2300      	movs	r3, #0
 800372e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003730:	2300      	movs	r3, #0
 8003732:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003734:	2300      	movs	r3, #0
 8003736:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003738:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800373c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800373e:	2300      	movs	r3, #0
 8003740:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003742:	1d3b      	adds	r3, r7, #4
 8003744:	4619      	mov	r1, r3
 8003746:	4807      	ldr	r0, [pc, #28]	; (8003764 <MX_TIM1_Init+0xfc>)
 8003748:	f004 f8d8 	bl	80078fc <HAL_TIMEx_ConfigBreakDeadTime>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d001      	beq.n	8003756 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8003752:	f000 f98f 	bl	8003a74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003756:	4803      	ldr	r0, [pc, #12]	; (8003764 <MX_TIM1_Init+0xfc>)
 8003758:	f000 fce0 	bl	800411c <HAL_TIM_MspPostInit>

}
 800375c:	bf00      	nop
 800375e:	3748      	adds	r7, #72	; 0x48
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	200021cc 	.word	0x200021cc
 8003768:	40010000 	.word	0x40010000

0800376c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003770:	4b15      	ldr	r3, [pc, #84]	; (80037c8 <MX_USART1_UART_Init+0x5c>)
 8003772:	4a16      	ldr	r2, [pc, #88]	; (80037cc <MX_USART1_UART_Init+0x60>)
 8003774:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003776:	4b14      	ldr	r3, [pc, #80]	; (80037c8 <MX_USART1_UART_Init+0x5c>)
 8003778:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800377c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800377e:	4b12      	ldr	r3, [pc, #72]	; (80037c8 <MX_USART1_UART_Init+0x5c>)
 8003780:	2200      	movs	r2, #0
 8003782:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003784:	4b10      	ldr	r3, [pc, #64]	; (80037c8 <MX_USART1_UART_Init+0x5c>)
 8003786:	2200      	movs	r2, #0
 8003788:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800378a:	4b0f      	ldr	r3, [pc, #60]	; (80037c8 <MX_USART1_UART_Init+0x5c>)
 800378c:	2200      	movs	r2, #0
 800378e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003790:	4b0d      	ldr	r3, [pc, #52]	; (80037c8 <MX_USART1_UART_Init+0x5c>)
 8003792:	220c      	movs	r2, #12
 8003794:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003796:	4b0c      	ldr	r3, [pc, #48]	; (80037c8 <MX_USART1_UART_Init+0x5c>)
 8003798:	2200      	movs	r2, #0
 800379a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800379c:	4b0a      	ldr	r3, [pc, #40]	; (80037c8 <MX_USART1_UART_Init+0x5c>)
 800379e:	2200      	movs	r2, #0
 80037a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80037a2:	4809      	ldr	r0, [pc, #36]	; (80037c8 <MX_USART1_UART_Init+0x5c>)
 80037a4:	f004 f8fc 	bl	80079a0 <HAL_UART_Init>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d001      	beq.n	80037b2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80037ae:	f000 f961 	bl	8003a74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE); //turn on rx interrupt forever
 80037b2:	4b05      	ldr	r3, [pc, #20]	; (80037c8 <MX_USART1_UART_Init+0x5c>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68da      	ldr	r2, [r3, #12]
 80037b8:	4b03      	ldr	r3, [pc, #12]	; (80037c8 <MX_USART1_UART_Init+0x5c>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f042 0220 	orr.w	r2, r2, #32
 80037c0:	60da      	str	r2, [r3, #12]
  /* USER CODE END USART1_Init 2 */

}
 80037c2:	bf00      	nop
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	20002188 	.word	0x20002188
 80037cc:	40011000 	.word	0x40011000

080037d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80037d4:	4b15      	ldr	r3, [pc, #84]	; (800382c <MX_USART2_UART_Init+0x5c>)
 80037d6:	4a16      	ldr	r2, [pc, #88]	; (8003830 <MX_USART2_UART_Init+0x60>)
 80037d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80037da:	4b14      	ldr	r3, [pc, #80]	; (800382c <MX_USART2_UART_Init+0x5c>)
 80037dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80037e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80037e2:	4b12      	ldr	r3, [pc, #72]	; (800382c <MX_USART2_UART_Init+0x5c>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80037e8:	4b10      	ldr	r3, [pc, #64]	; (800382c <MX_USART2_UART_Init+0x5c>)
 80037ea:	2200      	movs	r2, #0
 80037ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80037ee:	4b0f      	ldr	r3, [pc, #60]	; (800382c <MX_USART2_UART_Init+0x5c>)
 80037f0:	2200      	movs	r2, #0
 80037f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80037f4:	4b0d      	ldr	r3, [pc, #52]	; (800382c <MX_USART2_UART_Init+0x5c>)
 80037f6:	220c      	movs	r2, #12
 80037f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80037fa:	4b0c      	ldr	r3, [pc, #48]	; (800382c <MX_USART2_UART_Init+0x5c>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003800:	4b0a      	ldr	r3, [pc, #40]	; (800382c <MX_USART2_UART_Init+0x5c>)
 8003802:	2200      	movs	r2, #0
 8003804:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003806:	4809      	ldr	r0, [pc, #36]	; (800382c <MX_USART2_UART_Init+0x5c>)
 8003808:	f004 f8ca 	bl	80079a0 <HAL_UART_Init>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d001      	beq.n	8003816 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003812:	f000 f92f 	bl	8003a74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE); //turn on rx interrupt forever
 8003816:	4b05      	ldr	r3, [pc, #20]	; (800382c <MX_USART2_UART_Init+0x5c>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68da      	ldr	r2, [r3, #12]
 800381c:	4b03      	ldr	r3, [pc, #12]	; (800382c <MX_USART2_UART_Init+0x5c>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f042 0220 	orr.w	r2, r2, #32
 8003824:	60da      	str	r2, [r3, #12]
  /* USER CODE END USART2_Init 2 */

}
 8003826:	bf00      	nop
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	2000226c 	.word	0x2000226c
 8003830:	40004400 	.word	0x40004400

08003834 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b08a      	sub	sp, #40	; 0x28
 8003838:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800383a:	f107 0314 	add.w	r3, r7, #20
 800383e:	2200      	movs	r2, #0
 8003840:	601a      	str	r2, [r3, #0]
 8003842:	605a      	str	r2, [r3, #4]
 8003844:	609a      	str	r2, [r3, #8]
 8003846:	60da      	str	r2, [r3, #12]
 8003848:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800384a:	2300      	movs	r3, #0
 800384c:	613b      	str	r3, [r7, #16]
 800384e:	4b49      	ldr	r3, [pc, #292]	; (8003974 <MX_GPIO_Init+0x140>)
 8003850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003852:	4a48      	ldr	r2, [pc, #288]	; (8003974 <MX_GPIO_Init+0x140>)
 8003854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003858:	6313      	str	r3, [r2, #48]	; 0x30
 800385a:	4b46      	ldr	r3, [pc, #280]	; (8003974 <MX_GPIO_Init+0x140>)
 800385c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003862:	613b      	str	r3, [r7, #16]
 8003864:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003866:	2300      	movs	r3, #0
 8003868:	60fb      	str	r3, [r7, #12]
 800386a:	4b42      	ldr	r3, [pc, #264]	; (8003974 <MX_GPIO_Init+0x140>)
 800386c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386e:	4a41      	ldr	r2, [pc, #260]	; (8003974 <MX_GPIO_Init+0x140>)
 8003870:	f043 0301 	orr.w	r3, r3, #1
 8003874:	6313      	str	r3, [r2, #48]	; 0x30
 8003876:	4b3f      	ldr	r3, [pc, #252]	; (8003974 <MX_GPIO_Init+0x140>)
 8003878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387a:	f003 0301 	and.w	r3, r3, #1
 800387e:	60fb      	str	r3, [r7, #12]
 8003880:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003882:	2300      	movs	r3, #0
 8003884:	60bb      	str	r3, [r7, #8]
 8003886:	4b3b      	ldr	r3, [pc, #236]	; (8003974 <MX_GPIO_Init+0x140>)
 8003888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388a:	4a3a      	ldr	r2, [pc, #232]	; (8003974 <MX_GPIO_Init+0x140>)
 800388c:	f043 0310 	orr.w	r3, r3, #16
 8003890:	6313      	str	r3, [r2, #48]	; 0x30
 8003892:	4b38      	ldr	r3, [pc, #224]	; (8003974 <MX_GPIO_Init+0x140>)
 8003894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003896:	f003 0310 	and.w	r3, r3, #16
 800389a:	60bb      	str	r3, [r7, #8]
 800389c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800389e:	2300      	movs	r3, #0
 80038a0:	607b      	str	r3, [r7, #4]
 80038a2:	4b34      	ldr	r3, [pc, #208]	; (8003974 <MX_GPIO_Init+0x140>)
 80038a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a6:	4a33      	ldr	r2, [pc, #204]	; (8003974 <MX_GPIO_Init+0x140>)
 80038a8:	f043 0302 	orr.w	r3, r3, #2
 80038ac:	6313      	str	r3, [r2, #48]	; 0x30
 80038ae:	4b31      	ldr	r3, [pc, #196]	; (8003974 <MX_GPIO_Init+0x140>)
 80038b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b2:	f003 0302 	and.w	r3, r3, #2
 80038b6:	607b      	str	r3, [r7, #4]
 80038b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80038ba:	2300      	movs	r3, #0
 80038bc:	603b      	str	r3, [r7, #0]
 80038be:	4b2d      	ldr	r3, [pc, #180]	; (8003974 <MX_GPIO_Init+0x140>)
 80038c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c2:	4a2c      	ldr	r2, [pc, #176]	; (8003974 <MX_GPIO_Init+0x140>)
 80038c4:	f043 0308 	orr.w	r3, r3, #8
 80038c8:	6313      	str	r3, [r2, #48]	; 0x30
 80038ca:	4b2a      	ldr	r3, [pc, #168]	; (8003974 <MX_GPIO_Init+0x140>)
 80038cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ce:	f003 0308 	and.w	r3, r3, #8
 80038d2:	603b      	str	r3, [r7, #0]
 80038d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LCD_RES_Pin, GPIO_PIN_RESET);
 80038d6:	2200      	movs	r2, #0
 80038d8:	f241 0110 	movw	r1, #4112	; 0x1010
 80038dc:	4826      	ldr	r0, [pc, #152]	; (8003978 <MX_GPIO_Init+0x144>)
 80038de:	f001 fc1d 	bl	800511c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_5, GPIO_PIN_RESET);
 80038e2:	2200      	movs	r2, #0
 80038e4:	2128      	movs	r1, #40	; 0x28
 80038e6:	4825      	ldr	r0, [pc, #148]	; (800397c <MX_GPIO_Init+0x148>)
 80038e8:	f001 fc18 	bl	800511c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80038ec:	2310      	movs	r3, #16
 80038ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038f0:	2301      	movs	r3, #1
 80038f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038f4:	2300      	movs	r3, #0
 80038f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038f8:	2300      	movs	r3, #0
 80038fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038fc:	f107 0314 	add.w	r3, r7, #20
 8003900:	4619      	mov	r1, r3
 8003902:	481d      	ldr	r0, [pc, #116]	; (8003978 <MX_GPIO_Init+0x144>)
 8003904:	f001 fa6e 	bl	8004de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RES_Pin */
  GPIO_InitStruct.Pin = LCD_RES_Pin;
 8003908:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800390c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800390e:	2301      	movs	r3, #1
 8003910:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003912:	2301      	movs	r3, #1
 8003914:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003916:	2303      	movs	r3, #3
 8003918:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_RES_GPIO_Port, &GPIO_InitStruct);
 800391a:	f107 0314 	add.w	r3, r7, #20
 800391e:	4619      	mov	r1, r3
 8003920:	4815      	ldr	r0, [pc, #84]	; (8003978 <MX_GPIO_Init+0x144>)
 8003922:	f001 fa5f 	bl	8004de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8003926:	2328      	movs	r3, #40	; 0x28
 8003928:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800392a:	2301      	movs	r3, #1
 800392c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800392e:	2300      	movs	r3, #0
 8003930:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003932:	2300      	movs	r3, #0
 8003934:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003936:	f107 0314 	add.w	r3, r7, #20
 800393a:	4619      	mov	r1, r3
 800393c:	480f      	ldr	r0, [pc, #60]	; (800397c <MX_GPIO_Init+0x148>)
 800393e:	f001 fa51 	bl	8004de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003942:	2310      	movs	r3, #16
 8003944:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003946:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800394a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800394c:	2301      	movs	r3, #1
 800394e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003950:	f107 0314 	add.w	r3, r7, #20
 8003954:	4619      	mov	r1, r3
 8003956:	4809      	ldr	r0, [pc, #36]	; (800397c <MX_GPIO_Init+0x148>)
 8003958:	f001 fa44 	bl	8004de4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800395c:	2200      	movs	r2, #0
 800395e:	2100      	movs	r1, #0
 8003960:	200a      	movs	r0, #10
 8003962:	f001 f976 	bl	8004c52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8003966:	200a      	movs	r0, #10
 8003968:	f001 f98f 	bl	8004c8a <HAL_NVIC_EnableIRQ>

}
 800396c:	bf00      	nop
 800396e:	3728      	adds	r7, #40	; 0x28
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}
 8003974:	40023800 	.word	0x40023800
 8003978:	40020000 	.word	0x40020000
 800397c:	40020400 	.word	0x40020400

08003980 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b08e      	sub	sp, #56	; 0x38
 8003984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8003986:	f107 031c 	add.w	r3, r7, #28
 800398a:	2200      	movs	r2, #0
 800398c:	601a      	str	r2, [r3, #0]
 800398e:	605a      	str	r2, [r3, #4]
 8003990:	609a      	str	r2, [r3, #8]
 8003992:	60da      	str	r2, [r3, #12]
 8003994:	611a      	str	r2, [r3, #16]
 8003996:	615a      	str	r2, [r3, #20]
 8003998:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 800399a:	463b      	mov	r3, r7
 800399c:	2200      	movs	r2, #0
 800399e:	601a      	str	r2, [r3, #0]
 80039a0:	605a      	str	r2, [r3, #4]
 80039a2:	609a      	str	r2, [r3, #8]
 80039a4:	60da      	str	r2, [r3, #12]
 80039a6:	611a      	str	r2, [r3, #16]
 80039a8:	615a      	str	r2, [r3, #20]
 80039aa:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80039ac:	4b2f      	ldr	r3, [pc, #188]	; (8003a6c <MX_FSMC_Init+0xec>)
 80039ae:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80039b2:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80039b4:	4b2d      	ldr	r3, [pc, #180]	; (8003a6c <MX_FSMC_Init+0xec>)
 80039b6:	4a2e      	ldr	r2, [pc, #184]	; (8003a70 <MX_FSMC_Init+0xf0>)
 80039b8:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80039ba:	4b2c      	ldr	r3, [pc, #176]	; (8003a6c <MX_FSMC_Init+0xec>)
 80039bc:	2200      	movs	r2, #0
 80039be:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80039c0:	4b2a      	ldr	r3, [pc, #168]	; (8003a6c <MX_FSMC_Init+0xec>)
 80039c2:	2200      	movs	r2, #0
 80039c4:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80039c6:	4b29      	ldr	r3, [pc, #164]	; (8003a6c <MX_FSMC_Init+0xec>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80039cc:	4b27      	ldr	r3, [pc, #156]	; (8003a6c <MX_FSMC_Init+0xec>)
 80039ce:	2210      	movs	r2, #16
 80039d0:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80039d2:	4b26      	ldr	r3, [pc, #152]	; (8003a6c <MX_FSMC_Init+0xec>)
 80039d4:	2200      	movs	r2, #0
 80039d6:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80039d8:	4b24      	ldr	r3, [pc, #144]	; (8003a6c <MX_FSMC_Init+0xec>)
 80039da:	2200      	movs	r2, #0
 80039dc:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80039de:	4b23      	ldr	r3, [pc, #140]	; (8003a6c <MX_FSMC_Init+0xec>)
 80039e0:	2200      	movs	r2, #0
 80039e2:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80039e4:	4b21      	ldr	r3, [pc, #132]	; (8003a6c <MX_FSMC_Init+0xec>)
 80039e6:	2200      	movs	r2, #0
 80039e8:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80039ea:	4b20      	ldr	r3, [pc, #128]	; (8003a6c <MX_FSMC_Init+0xec>)
 80039ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80039f0:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80039f2:	4b1e      	ldr	r3, [pc, #120]	; (8003a6c <MX_FSMC_Init+0xec>)
 80039f4:	2200      	movs	r2, #0
 80039f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80039f8:	4b1c      	ldr	r3, [pc, #112]	; (8003a6c <MX_FSMC_Init+0xec>)
 80039fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80039fe:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8003a00:	4b1a      	ldr	r3, [pc, #104]	; (8003a6c <MX_FSMC_Init+0xec>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8003a06:	4b19      	ldr	r3, [pc, #100]	; (8003a6c <MX_FSMC_Init+0xec>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8003a0c:	4b17      	ldr	r3, [pc, #92]	; (8003a6c <MX_FSMC_Init+0xec>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8003a12:	230f      	movs	r3, #15
 8003a14:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8003a16:	230f      	movs	r3, #15
 8003a18:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 40;
 8003a1a:	2328      	movs	r3, #40	; 0x28
 8003a1c:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8003a22:	2310      	movs	r3, #16
 8003a24:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8003a26:	2311      	movs	r3, #17
 8003a28:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 2;
 8003a2e:	2302      	movs	r3, #2
 8003a30:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8003a32:	230f      	movs	r3, #15
 8003a34:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 4;
 8003a36:	2304      	movs	r3, #4
 8003a38:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8003a3e:	2310      	movs	r3, #16
 8003a40:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8003a42:	2311      	movs	r3, #17
 8003a44:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8003a46:	2300      	movs	r3, #0
 8003a48:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8003a4a:	463a      	mov	r2, r7
 8003a4c:	f107 031c 	add.w	r3, r7, #28
 8003a50:	4619      	mov	r1, r3
 8003a52:	4806      	ldr	r0, [pc, #24]	; (8003a6c <MX_FSMC_Init+0xec>)
 8003a54:	f003 f9cf 	bl	8006df6 <HAL_SRAM_Init>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d001      	beq.n	8003a62 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8003a5e:	f000 f809 	bl	8003a74 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8003a62:	bf00      	nop
 8003a64:	3738      	adds	r7, #56	; 0x38
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	20002138 	.word	0x20002138
 8003a70:	a0000104 	.word	0xa0000104

08003a74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a74:	b480      	push	{r7}
 8003a76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a78:	b672      	cpsid	i
}
 8003a7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003a7c:	e7fe      	b.n	8003a7c <Error_Handler+0x8>
	...

08003a80 <drawObjectToLcd>:

void drawCharToLcd5x7(int x, int y, int pixelScaling, uint16_t textColor, int useBackground, uint16_t bgColor, char c);
void drawStringToLcd5x7(int x, int y, int pixelScaling, uint16_t textColor, int useBackground, uint16_t bgColor, int hSpacing, int vSpacing, char *string);


int drawObjectToLcd(struct object o, uint8_t *data, int state){
 8003a80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a82:	b09f      	sub	sp, #124	; 0x7c
 8003a84:	af06      	add	r7, sp, #24
 8003a86:	463c      	mov	r4, r7
 8003a88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	char objName[30];
	objectTypeToString(o.objectType, objName);
 8003a8c:	783b      	ldrb	r3, [r7, #0]
 8003a8e:	f107 0214 	add.w	r2, r7, #20
 8003a92:	4611      	mov	r1, r2
 8003a94:	4618      	mov	r0, r3
 8003a96:	f7ff f909 	bl	8002cac <objectTypeToString>
		printf("[OV] Error: width or height of object id %d is negative.\n\r", o.objectId);
		return 1;
	}
	*/

	printf("[OV] Drawing %s id %d \n\r", objName, o.objectId);
 8003a9a:	887b      	ldrh	r3, [r7, #2]
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	f107 0314 	add.w	r3, r7, #20
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	489c      	ldr	r0, [pc, #624]	; (8003d18 <drawObjectToLcd+0x298>)
 8003aa6:	f004 ffff 	bl	8008aa8 <iprintf>

	if(o.objectType == rectangle){
 8003aaa:	783b      	ldrb	r3, [r7, #0]
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d121      	bne.n	8003af4 <drawObjectToLcd+0x74>
		uint16_t color = BLACK;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
		if(o.dataLen<2){
 8003ab6:	89bb      	ldrh	r3, [r7, #12]
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d805      	bhi.n	8003ac8 <drawObjectToLcd+0x48>
			printf("[OV] Warning: missing color byte in object id %d! Falling back on black. \n\r", o.objectId);
 8003abc:	887b      	ldrh	r3, [r7, #2]
 8003abe:	4619      	mov	r1, r3
 8003ac0:	4896      	ldr	r0, [pc, #600]	; (8003d1c <drawObjectToLcd+0x29c>)
 8003ac2:	f004 fff1 	bl	8008aa8 <iprintf>
 8003ac6:	e003      	b.n	8003ad0 <drawObjectToLcd+0x50>
		}
		else{
			color = *((uint16_t *) data);
 8003ac8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003aca:	881b      	ldrh	r3, [r3, #0]
 8003acc:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
		}
		LCD_fillRect(o.xstart, o.ystart, (o.xend - o.xstart), (o.yend - o.ystart), color);
 8003ad0:	88b8      	ldrh	r0, [r7, #4]
 8003ad2:	88f9      	ldrh	r1, [r7, #6]
 8003ad4:	893a      	ldrh	r2, [r7, #8]
 8003ad6:	88bb      	ldrh	r3, [r7, #4]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	b29c      	uxth	r4, r3
 8003adc:	897a      	ldrh	r2, [r7, #10]
 8003ade:	88fb      	ldrh	r3, [r7, #6]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	b29a      	uxth	r2, r3
 8003ae4:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8003ae8:	9300      	str	r3, [sp, #0]
 8003aea:	4613      	mov	r3, r2
 8003aec:	4622      	mov	r2, r4
 8003aee:	f7fd f85f 	bl	8000bb0 <LCD_fillRect>
 8003af2:	e10b      	b.n	8003d0c <drawObjectToLcd+0x28c>
	}
	else if(o.objectType == bitmap){
 8003af4:	783b      	ldrb	r3, [r7, #0]
 8003af6:	2b04      	cmp	r3, #4
 8003af8:	d155      	bne.n	8003ba6 <drawObjectToLcd+0x126>
		uint16_t xpos = o.xstart;
 8003afa:	88bb      	ldrh	r3, [r7, #4]
 8003afc:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
		uint16_t ypos = o.ystart;
 8003b00:	88fb      	ldrh	r3, [r7, #6]
 8003b02:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
		if(o.dataLen < (o.xend - o.xstart)*(o.yend - o.ystart)){
 8003b06:	89bb      	ldrh	r3, [r7, #12]
 8003b08:	4619      	mov	r1, r3
 8003b0a:	893b      	ldrh	r3, [r7, #8]
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	88bb      	ldrh	r3, [r7, #4]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	897a      	ldrh	r2, [r7, #10]
 8003b14:	4610      	mov	r0, r2
 8003b16:	88fa      	ldrh	r2, [r7, #6]
 8003b18:	1a82      	subs	r2, r0, r2
 8003b1a:	fb02 f303 	mul.w	r3, r2, r3
 8003b1e:	4299      	cmp	r1, r3
 8003b20:	da11      	bge.n	8003b46 <drawObjectToLcd+0xc6>
			printf("[OV] Error: %d pixel bytes needed for bitmap id %d but only got %d. \n\r", (o.xend - o.xstart)*(o.yend - o.ystart), o.objectId, o.dataLen);
 8003b22:	893b      	ldrh	r3, [r7, #8]
 8003b24:	461a      	mov	r2, r3
 8003b26:	88bb      	ldrh	r3, [r7, #4]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	897a      	ldrh	r2, [r7, #10]
 8003b2c:	4611      	mov	r1, r2
 8003b2e:	88fa      	ldrh	r2, [r7, #6]
 8003b30:	1a8a      	subs	r2, r1, r2
 8003b32:	fb02 f103 	mul.w	r1, r2, r3
 8003b36:	887b      	ldrh	r3, [r7, #2]
 8003b38:	461a      	mov	r2, r3
 8003b3a:	89bb      	ldrh	r3, [r7, #12]
 8003b3c:	4878      	ldr	r0, [pc, #480]	; (8003d20 <drawObjectToLcd+0x2a0>)
 8003b3e:	f004 ffb3 	bl	8008aa8 <iprintf>
			return 2;
 8003b42:	2302      	movs	r3, #2
 8003b44:	e0e3      	b.n	8003d0e <drawObjectToLcd+0x28e>
		}
		uint16_t *colorArray = (uint16_t *) data;
 8003b46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b48:	637b      	str	r3, [r7, #52]	; 0x34
		uint32_t dataIndex = 0;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	657b      	str	r3, [r7, #84]	; 0x54
		while(1){
			uint16_t color = *(colorArray + dataIndex);
 8003b4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b50:	005b      	lsls	r3, r3, #1
 8003b52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b54:	4413      	add	r3, r2
 8003b56:	881b      	ldrh	r3, [r3, #0]
 8003b58:	867b      	strh	r3, [r7, #50]	; 0x32
			dataIndex++;
 8003b5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	657b      	str	r3, [r7, #84]	; 0x54
			LCD_fillRect(xpos, ypos, 1, 1, color);
 8003b60:	f8b7 105e 	ldrh.w	r1, [r7, #94]	; 0x5e
 8003b64:	f8b7 005c 	ldrh.w	r0, [r7, #92]	; 0x5c
 8003b68:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003b6a:	9300      	str	r3, [sp, #0]
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f7fd f81e 	bl	8000bb0 <LCD_fillRect>
			xpos++;
 8003b74:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003b78:	3301      	adds	r3, #1
 8003b7a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
			if(xpos>o.xend){
 8003b7e:	893b      	ldrh	r3, [r7, #8]
 8003b80:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d9e2      	bls.n	8003b4e <drawObjectToLcd+0xce>
				xpos = o.xstart;
 8003b88:	88bb      	ldrh	r3, [r7, #4]
 8003b8a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
				ypos++;
 8003b8e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003b92:	3301      	adds	r3, #1
 8003b94:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
				if(ypos>o.yend){
 8003b98:	897b      	ldrh	r3, [r7, #10]
 8003b9a:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	f200 80b3 	bhi.w	8003d0a <drawObjectToLcd+0x28a>
		while(1){
 8003ba4:	e7d3      	b.n	8003b4e <drawObjectToLcd+0xce>
					break;
				}
			}
		}
	}
	else if(o.objectType==label){
 8003ba6:	783b      	ldrb	r3, [r7, #0]
 8003ba8:	2b03      	cmp	r3, #3
 8003baa:	f040 80a6 	bne.w	8003cfa <drawObjectToLcd+0x27a>
 8003bae:	466b      	mov	r3, sp
 8003bb0:	461e      	mov	r6, r3
		int expectedChars = o.dataLen - 8;
 8003bb2:	89bb      	ldrh	r3, [r7, #12]
 8003bb4:	3b08      	subs	r3, #8
 8003bb6:	64bb      	str	r3, [r7, #72]	; 0x48
		if(expectedChars < 0){
 8003bb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	da07      	bge.n	8003bce <drawObjectToLcd+0x14e>
			printf("[OV] Error: Too few data bytes to draw string id %d. \n\r", o.objectId);
 8003bbe:	887b      	ldrh	r3, [r7, #2]
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	4858      	ldr	r0, [pc, #352]	; (8003d24 <drawObjectToLcd+0x2a4>)
 8003bc4:	f004 ff70 	bl	8008aa8 <iprintf>
			return 3;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	46b5      	mov	sp, r6
 8003bcc:	e09f      	b.n	8003d0e <drawObjectToLcd+0x28e>
		}
		int dIndex = 0;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	653b      	str	r3, [r7, #80]	; 0x50
		uint8_t pixelScaling = *((uint8_t *) (data + dIndex++));
 8003bd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bd4:	1c5a      	adds	r2, r3, #1
 8003bd6:	653a      	str	r2, [r7, #80]	; 0x50
 8003bd8:	461a      	mov	r2, r3
 8003bda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003bdc:	4413      	add	r3, r2
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		uint8_t hSpace = *((uint8_t *) (data + dIndex++));
 8003be4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003be6:	1c5a      	adds	r2, r3, #1
 8003be8:	653a      	str	r2, [r7, #80]	; 0x50
 8003bea:	461a      	mov	r2, r3
 8003bec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003bee:	4413      	add	r3, r2
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
		uint8_t vSpace = *((uint8_t *) (data + dIndex++));
 8003bf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bf8:	1c5a      	adds	r2, r3, #1
 8003bfa:	653a      	str	r2, [r7, #80]	; 0x50
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c00:	4413      	add	r3, r2
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
		uint8_t useBg = *((uint8_t *) (data + dIndex++));
 8003c08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c0a:	1c5a      	adds	r2, r3, #1
 8003c0c:	653a      	str	r2, [r7, #80]	; 0x50
 8003c0e:	461a      	mov	r2, r3
 8003c10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c12:	4413      	add	r3, r2
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
		uint16_t textColor = *((uint16_t *) (data + dIndex));
 8003c1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c1c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003c1e:	4413      	add	r3, r2
 8003c20:	881b      	ldrh	r3, [r3, #0]
 8003c22:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		dIndex += 2;
 8003c26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c28:	3302      	adds	r3, #2
 8003c2a:	653b      	str	r3, [r7, #80]	; 0x50
		uint16_t bgColor = *((uint16_t *) (data + dIndex));
 8003c2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c2e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003c30:	4413      	add	r3, r2
 8003c32:	881b      	ldrh	r3, [r3, #0]
 8003c34:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
		dIndex += 2;
 8003c38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c3a:	3302      	adds	r3, #2
 8003c3c:	653b      	str	r3, [r7, #80]	; 0x50

		char labelString[expectedChars + 1];
 8003c3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c40:	1c5c      	adds	r4, r3, #1
 8003c42:	1e63      	subs	r3, r4, #1
 8003c44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c46:	4623      	mov	r3, r4
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f04f 0100 	mov.w	r1, #0
 8003c4e:	f04f 0200 	mov.w	r2, #0
 8003c52:	f04f 0300 	mov.w	r3, #0
 8003c56:	00cb      	lsls	r3, r1, #3
 8003c58:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003c5c:	00c2      	lsls	r2, r0, #3
 8003c5e:	4623      	mov	r3, r4
 8003c60:	4618      	mov	r0, r3
 8003c62:	f04f 0100 	mov.w	r1, #0
 8003c66:	f04f 0200 	mov.w	r2, #0
 8003c6a:	f04f 0300 	mov.w	r3, #0
 8003c6e:	00cb      	lsls	r3, r1, #3
 8003c70:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003c74:	00c2      	lsls	r2, r0, #3
 8003c76:	4623      	mov	r3, r4
 8003c78:	3307      	adds	r3, #7
 8003c7a:	08db      	lsrs	r3, r3, #3
 8003c7c:	00db      	lsls	r3, r3, #3
 8003c7e:	ebad 0d03 	sub.w	sp, sp, r3
 8003c82:	ab06      	add	r3, sp, #24
 8003c84:	3300      	adds	r3, #0
 8003c86:	63bb      	str	r3, [r7, #56]	; 0x38
		int i;
		for(i = 0; i<expectedChars;i++){
 8003c88:	2300      	movs	r3, #0
 8003c8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c8c:	e00e      	b.n	8003cac <drawObjectToLcd+0x22c>
			labelString[i] = *((uint8_t *) (data + dIndex++));
 8003c8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c90:	1c5a      	adds	r2, r3, #1
 8003c92:	653a      	str	r2, [r7, #80]	; 0x50
 8003c94:	461a      	mov	r2, r3
 8003c96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c98:	4413      	add	r3, r2
 8003c9a:	7819      	ldrb	r1, [r3, #0]
 8003c9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ca0:	4413      	add	r3, r2
 8003ca2:	460a      	mov	r2, r1
 8003ca4:	701a      	strb	r2, [r3, #0]
		for(i = 0; i<expectedChars;i++){
 8003ca6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ca8:	3301      	adds	r3, #1
 8003caa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003cae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	dbec      	blt.n	8003c8e <drawObjectToLcd+0x20e>
		}
		labelString[expectedChars] = 0;
 8003cb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003cb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cb8:	4413      	add	r3, r2
 8003cba:	2200      	movs	r2, #0
 8003cbc:	701a      	strb	r2, [r3, #0]
		drawStringToLcd5x7(o.xstart, o.ystart, pixelScaling, textColor, useBg, bgColor, hSpace, vSpace, labelString);
 8003cbe:	88bb      	ldrh	r3, [r7, #4]
 8003cc0:	469c      	mov	ip, r3
 8003cc2:	88fb      	ldrh	r3, [r7, #6]
 8003cc4:	469e      	mov	lr, r3
 8003cc6:	f897 4047 	ldrb.w	r4, [r7, #71]	; 0x47
 8003cca:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003cce:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8003cd2:	f897 1045 	ldrb.w	r1, [r7, #69]	; 0x45
 8003cd6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003cd8:	f8b7 5042 	ldrh.w	r5, [r7, #66]	; 0x42
 8003cdc:	9004      	str	r0, [sp, #16]
 8003cde:	9103      	str	r1, [sp, #12]
 8003ce0:	9202      	str	r2, [sp, #8]
 8003ce2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8003ce6:	9201      	str	r2, [sp, #4]
 8003ce8:	9300      	str	r3, [sp, #0]
 8003cea:	462b      	mov	r3, r5
 8003cec:	4622      	mov	r2, r4
 8003cee:	4671      	mov	r1, lr
 8003cf0:	4660      	mov	r0, ip
 8003cf2:	f000 f81b 	bl	8003d2c <drawStringToLcd5x7>
 8003cf6:	46b5      	mov	sp, r6
 8003cf8:	e008      	b.n	8003d0c <drawObjectToLcd+0x28c>
	}
	else{
		printf("[OV] Error: drawObjectToLcd() not implemented for object type [%s]. \n\r", objName);
 8003cfa:	f107 0314 	add.w	r3, r7, #20
 8003cfe:	4619      	mov	r1, r3
 8003d00:	4809      	ldr	r0, [pc, #36]	; (8003d28 <drawObjectToLcd+0x2a8>)
 8003d02:	f004 fed1 	bl	8008aa8 <iprintf>
		return 100;
 8003d06:	2364      	movs	r3, #100	; 0x64
 8003d08:	e001      	b.n	8003d0e <drawObjectToLcd+0x28e>
					break;
 8003d0a:	bf00      	nop
	}
	return 0;
 8003d0c:	2300      	movs	r3, #0
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3764      	adds	r7, #100	; 0x64
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d16:	bf00      	nop
 8003d18:	0800a034 	.word	0x0800a034
 8003d1c:	0800a050 	.word	0x0800a050
 8003d20:	0800a09c 	.word	0x0800a09c
 8003d24:	0800a0e4 	.word	0x0800a0e4
 8003d28:	0800a11c 	.word	0x0800a11c

08003d2c <drawStringToLcd5x7>:
 * (example - if pixelscaling == 5, a single char will occupy 25x35 pixels on the LCD). If useBackground is 1, then
 * background of chars will be filled with bgColor, otherwise, it will be left as-is.
 * hSpacing and vSpacing define the horizontal and vertical separation of chars in lcd pixels (independent of pixelScaling).
 * Newlines in string are treated as newline + cariiage return.
 */
void drawStringToLcd5x7(int x, int y, int pixelScaling, uint16_t textColor, int useBackground, uint16_t bgColor, int hSpacing, int vSpacing, char *string){
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b08c      	sub	sp, #48	; 0x30
 8003d30:	af04      	add	r7, sp, #16
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	60b9      	str	r1, [r7, #8]
 8003d36:	607a      	str	r2, [r7, #4]
 8003d38:	807b      	strh	r3, [r7, #2]

	uint16_t charX = x;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	83fb      	strh	r3, [r7, #30]
	uint16_t charY = y;
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	83bb      	strh	r3, [r7, #28]

	int strIndex = 0;
 8003d42:	2300      	movs	r3, #0
 8003d44:	61bb      	str	r3, [r7, #24]
	while(1){
		char c = *(string + strIndex++);
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	1c5a      	adds	r2, r3, #1
 8003d4a:	61ba      	str	r2, [r7, #24]
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d50:	4413      	add	r3, r2
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	75fb      	strb	r3, [r7, #23]
		if(c==0){
 8003d56:	7dfb      	ldrb	r3, [r7, #23]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d03d      	beq.n	8003dd8 <drawStringToLcd5x7+0xac>
			break;
		}
		else if(c=='\r'){ //probably not needed, but just in case
 8003d5c:	7dfb      	ldrb	r3, [r7, #23]
 8003d5e:	2b0d      	cmp	r3, #13
 8003d60:	d102      	bne.n	8003d68 <drawStringToLcd5x7+0x3c>
			charX = x;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	83fb      	strh	r3, [r7, #30]
 8003d66:	e7ee      	b.n	8003d46 <drawStringToLcd5x7+0x1a>
		}
		else if(c == '\n'){
 8003d68:	7dfb      	ldrb	r3, [r7, #23]
 8003d6a:	2b0a      	cmp	r3, #10
 8003d6c:	d10f      	bne.n	8003d8e <drawStringToLcd5x7+0x62>
			charX = x;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	83fb      	strh	r3, [r7, #30]
			charY += 7*pixelScaling + vSpacing;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	461a      	mov	r2, r3
 8003d78:	00d2      	lsls	r2, r2, #3
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	b29a      	uxth	r2, r3
 8003d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	4413      	add	r3, r2
 8003d84:	b29a      	uxth	r2, r3
 8003d86:	8bbb      	ldrh	r3, [r7, #28]
 8003d88:	4413      	add	r3, r2
 8003d8a:	83bb      	strh	r3, [r7, #28]
 8003d8c:	e7db      	b.n	8003d46 <drawStringToLcd5x7+0x1a>
		}
		else{ //normal character, presumably.
			if(charY > LCD_PIXEL_HEIGHT){
 8003d8e:	8bbb      	ldrh	r3, [r7, #28]
 8003d90:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003d94:	d822      	bhi.n	8003ddc <drawStringToLcd5x7+0xb0>
				break;
			}
			if(charX > LCD_PIXEL_WIDTH){
 8003d96:	8bfb      	ldrh	r3, [r7, #30]
 8003d98:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8003d9c:	d81a      	bhi.n	8003dd4 <drawStringToLcd5x7+0xa8>
				continue; //because there might be a newline later in string
			}
			drawCharToLcd5x7(charX, charY, pixelScaling, textColor, useBackground, bgColor, c);
 8003d9e:	8bf8      	ldrh	r0, [r7, #30]
 8003da0:	8bb9      	ldrh	r1, [r7, #28]
 8003da2:	887a      	ldrh	r2, [r7, #2]
 8003da4:	7dfb      	ldrb	r3, [r7, #23]
 8003da6:	9302      	str	r3, [sp, #8]
 8003da8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003daa:	9301      	str	r3, [sp, #4]
 8003dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dae:	9300      	str	r3, [sp, #0]
 8003db0:	4613      	mov	r3, r2
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	f000 f818 	bl	8003de8 <drawCharToLcd5x7>
			charX += 5*pixelScaling + hSpacing;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	0092      	lsls	r2, r2, #2
 8003dc0:	4413      	add	r3, r2
 8003dc2:	b29a      	uxth	r2, r3
 8003dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	4413      	add	r3, r2
 8003dca:	b29a      	uxth	r2, r3
 8003dcc:	8bfb      	ldrh	r3, [r7, #30]
 8003dce:	4413      	add	r3, r2
 8003dd0:	83fb      	strh	r3, [r7, #30]
 8003dd2:	e7b8      	b.n	8003d46 <drawStringToLcd5x7+0x1a>
				continue; //because there might be a newline later in string
 8003dd4:	bf00      	nop
	while(1){
 8003dd6:	e7b6      	b.n	8003d46 <drawStringToLcd5x7+0x1a>
			break;
 8003dd8:	bf00      	nop
 8003dda:	e000      	b.n	8003dde <drawStringToLcd5x7+0xb2>
				break;
 8003ddc:	bf00      	nop
		}
	}

}
 8003dde:	bf00      	nop
 8003de0:	3720      	adds	r7, #32
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
	...

08003de8 <drawCharToLcd5x7>:

void drawCharToLcd5x7(int x, int y, int pixelScaling, uint16_t textColor, int useBackground, uint16_t bgColor, char c){
 8003de8:	b590      	push	{r4, r7, lr}
 8003dea:	b08f      	sub	sp, #60	; 0x3c
 8003dec:	af02      	add	r7, sp, #8
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	607a      	str	r2, [r7, #4]
 8003df4:	807b      	strh	r3, [r7, #2]
	int ascii = (int) c;
 8003df6:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003dfa:	61fb      	str	r3, [r7, #28]
	char *charFont = font5x7 + (5*ascii);
 8003dfc:	69fa      	ldr	r2, [r7, #28]
 8003dfe:	4613      	mov	r3, r2
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	4413      	add	r3, r2
 8003e04:	461a      	mov	r2, r3
 8003e06:	4b41      	ldr	r3, [pc, #260]	; (8003f0c <drawCharToLcd5x7+0x124>)
 8003e08:	4413      	add	r3, r2
 8003e0a:	61bb      	str	r3, [r7, #24]
	int i;
	//printf("Drawing char %c @ [%d, %d] \n\r", c, x, y);

	//font is stored as columns!
	int column, row;
	for(column = 0; column < 5; column++){
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e10:	e074      	b.n	8003efc <drawCharToLcd5x7+0x114>
		uint8_t columnByte = *(charFont + column);
 8003e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e14:	69ba      	ldr	r2, [r7, #24]
 8003e16:	4413      	add	r3, r2
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	75fb      	strb	r3, [r7, #23]
		uint8_t mask = 0x01;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		for(row = 0; row < 7; row++){
 8003e22:	2300      	movs	r3, #0
 8003e24:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e26:	e063      	b.n	8003ef0 <drawCharToLcd5x7+0x108>
			uint16_t pixelColor = bgColor;
 8003e28:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003e2c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if(columnByte & mask){
 8003e2e:	7dfa      	ldrb	r2, [r7, #23]
 8003e30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e34:	4013      	ands	r3, r2
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d002      	beq.n	8003e42 <drawCharToLcd5x7+0x5a>
				pixelColor = textColor;
 8003e3c:	887b      	ldrh	r3, [r7, #2]
 8003e3e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003e40:	e008      	b.n	8003e54 <drawCharToLcd5x7+0x6c>
			}
			else{
				if(!useBackground){
 8003e42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d105      	bne.n	8003e54 <drawCharToLcd5x7+0x6c>
					mask = mask << 1;
 8003e48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e4c:	005b      	lsls	r3, r3, #1
 8003e4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					continue;
 8003e52:	e04a      	b.n	8003eea <drawCharToLcd5x7+0x102>
				}
			}

			uint16_t pixel_x_1 = x + pixelScaling*column;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	b29a      	uxth	r2, r3
 8003e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	fb12 f303 	smulbb	r3, r2, r3
 8003e60:	b29a      	uxth	r2, r3
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	4413      	add	r3, r2
 8003e68:	82bb      	strh	r3, [r7, #20]
			uint16_t pixel_y_1 = y + pixelScaling*row;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	b29a      	uxth	r2, r3
 8003e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	fb12 f303 	smulbb	r3, r2, r3
 8003e76:	b29a      	uxth	r2, r3
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	4413      	add	r3, r2
 8003e7e:	827b      	strh	r3, [r7, #18]
			uint16_t pixel_x_2 = pixel_x_1 + pixelScaling;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	b29a      	uxth	r2, r3
 8003e84:	8abb      	ldrh	r3, [r7, #20]
 8003e86:	4413      	add	r3, r2
 8003e88:	847b      	strh	r3, [r7, #34]	; 0x22
			uint16_t pixel_y_2 = pixel_y_1 + pixelScaling;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	b29a      	uxth	r2, r3
 8003e8e:	8a7b      	ldrh	r3, [r7, #18]
 8003e90:	4413      	add	r3, r2
 8003e92:	843b      	strh	r3, [r7, #32]

			if(pixel_x_1 >= LCD_PIXEL_WIDTH || pixel_y_1 >= LCD_PIXEL_HEIGHT){
 8003e94:	8abb      	ldrh	r3, [r7, #20]
 8003e96:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8003e9a:	d22c      	bcs.n	8003ef6 <drawCharToLcd5x7+0x10e>
 8003e9c:	8a7b      	ldrh	r3, [r7, #18]
 8003e9e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003ea2:	d228      	bcs.n	8003ef6 <drawCharToLcd5x7+0x10e>
				break;
			}

			if(pixel_x_2 >= LCD_PIXEL_WIDTH){
 8003ea4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003ea6:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8003eaa:	d302      	bcc.n	8003eb2 <drawCharToLcd5x7+0xca>
				pixel_x_2 = LCD_PIXEL_WIDTH - 1;
 8003eac:	f240 13df 	movw	r3, #479	; 0x1df
 8003eb0:	847b      	strh	r3, [r7, #34]	; 0x22
			}
			if(pixel_y_2 >= LCD_PIXEL_HEIGHT){
 8003eb2:	8c3b      	ldrh	r3, [r7, #32]
 8003eb4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003eb8:	d302      	bcc.n	8003ec0 <drawCharToLcd5x7+0xd8>
				pixel_y_2 = LCD_PIXEL_HEIGHT - 1;
 8003eba:	f240 133f 	movw	r3, #319	; 0x13f
 8003ebe:	843b      	strh	r3, [r7, #32]
			}

			LCD_fillRect(pixel_x_1, pixel_y_1, pixel_x_2-pixel_x_1, pixel_y_2 - pixel_y_1, pixelColor);
 8003ec0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003ec2:	8abb      	ldrh	r3, [r7, #20]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	b29c      	uxth	r4, r3
 8003ec8:	8c3a      	ldrh	r2, [r7, #32]
 8003eca:	8a7b      	ldrh	r3, [r7, #18]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	b29a      	uxth	r2, r3
 8003ed0:	8a79      	ldrh	r1, [r7, #18]
 8003ed2:	8ab8      	ldrh	r0, [r7, #20]
 8003ed4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003ed6:	9300      	str	r3, [sp, #0]
 8003ed8:	4613      	mov	r3, r2
 8003eda:	4622      	mov	r2, r4
 8003edc:	f7fc fe68 	bl	8000bb0 <LCD_fillRect>
			mask = mask << 1;
 8003ee0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ee4:	005b      	lsls	r3, r3, #1
 8003ee6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		for(row = 0; row < 7; row++){
 8003eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eec:	3301      	adds	r3, #1
 8003eee:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef2:	2b06      	cmp	r3, #6
 8003ef4:	dd98      	ble.n	8003e28 <drawCharToLcd5x7+0x40>
	for(column = 0; column < 5; column++){
 8003ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef8:	3301      	adds	r3, #1
 8003efa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003efe:	2b04      	cmp	r3, #4
 8003f00:	dd87      	ble.n	8003e12 <drawCharToLcd5x7+0x2a>
		}
	}

}
 8003f02:	bf00      	nop
 8003f04:	bf00      	nop
 8003f06:	3734      	adds	r7, #52	; 0x34
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd90      	pop	{r4, r7, pc}
 8003f0c:	0800a168 	.word	0x0800a168

08003f10 <SPI1_Transfer>:
#include <stm32f4xx_hal_gpio.h>
#include <stdio.h>


uint8_t SPI1_Transfer(uint8_t data)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b085      	sub	sp, #20
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	4603      	mov	r3, r0
 8003f18:	71fb      	strb	r3, [r7, #7]
	SPI_TypeDef *SPI1inst = hspi1.Instance;
 8003f1a:	4b12      	ldr	r3, [pc, #72]	; (8003f64 <SPI1_Transfer+0x54>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	60fb      	str	r3, [r7, #12]
    SPI1inst->DR = data;
 8003f20:	79fa      	ldrb	r2, [r7, #7]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	60da      	str	r2, [r3, #12]
    while (!(SPI1inst->SR & (SPI_FLAG_TXE)));
 8003f26:	bf00      	nop
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	f003 0302 	and.w	r3, r3, #2
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d0f9      	beq.n	8003f28 <SPI1_Transfer+0x18>
    while (!(SPI1inst->SR & (SPI_FLAG_RXNE)));
 8003f34:	bf00      	nop
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	f003 0301 	and.w	r3, r3, #1
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d0f9      	beq.n	8003f36 <SPI1_Transfer+0x26>
    while (SPI1inst->SR & (SPI_FLAG_BSY));
 8003f42:	bf00      	nop
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d1f9      	bne.n	8003f44 <SPI1_Transfer+0x34>
    return SPI1inst->DR;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	b2db      	uxtb	r3, r3
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3714      	adds	r7, #20
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	20002214 	.word	0x20002214

08003f68 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f6e:	2300      	movs	r3, #0
 8003f70:	607b      	str	r3, [r7, #4]
 8003f72:	4b10      	ldr	r3, [pc, #64]	; (8003fb4 <HAL_MspInit+0x4c>)
 8003f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f76:	4a0f      	ldr	r2, [pc, #60]	; (8003fb4 <HAL_MspInit+0x4c>)
 8003f78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f7c:	6453      	str	r3, [r2, #68]	; 0x44
 8003f7e:	4b0d      	ldr	r3, [pc, #52]	; (8003fb4 <HAL_MspInit+0x4c>)
 8003f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f86:	607b      	str	r3, [r7, #4]
 8003f88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	603b      	str	r3, [r7, #0]
 8003f8e:	4b09      	ldr	r3, [pc, #36]	; (8003fb4 <HAL_MspInit+0x4c>)
 8003f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f92:	4a08      	ldr	r2, [pc, #32]	; (8003fb4 <HAL_MspInit+0x4c>)
 8003f94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f98:	6413      	str	r3, [r2, #64]	; 0x40
 8003f9a:	4b06      	ldr	r3, [pc, #24]	; (8003fb4 <HAL_MspInit+0x4c>)
 8003f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fa2:	603b      	str	r3, [r7, #0]
 8003fa4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003fa6:	bf00      	nop
 8003fa8:	370c      	adds	r7, #12
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	40023800 	.word	0x40023800

08003fb8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b08a      	sub	sp, #40	; 0x28
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fc0:	f107 0314 	add.w	r3, r7, #20
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	601a      	str	r2, [r3, #0]
 8003fc8:	605a      	str	r2, [r3, #4]
 8003fca:	609a      	str	r2, [r3, #8]
 8003fcc:	60da      	str	r2, [r3, #12]
 8003fce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a19      	ldr	r2, [pc, #100]	; (800403c <HAL_I2C_MspInit+0x84>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d12b      	bne.n	8004032 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fda:	2300      	movs	r3, #0
 8003fdc:	613b      	str	r3, [r7, #16]
 8003fde:	4b18      	ldr	r3, [pc, #96]	; (8004040 <HAL_I2C_MspInit+0x88>)
 8003fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe2:	4a17      	ldr	r2, [pc, #92]	; (8004040 <HAL_I2C_MspInit+0x88>)
 8003fe4:	f043 0302 	orr.w	r3, r3, #2
 8003fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8003fea:	4b15      	ldr	r3, [pc, #84]	; (8004040 <HAL_I2C_MspInit+0x88>)
 8003fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fee:	f003 0302 	and.w	r3, r3, #2
 8003ff2:	613b      	str	r3, [r7, #16]
 8003ff4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003ff6:	23c0      	movs	r3, #192	; 0xc0
 8003ff8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003ffa:	2312      	movs	r3, #18
 8003ffc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ffe:	2301      	movs	r3, #1
 8004000:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004002:	2303      	movs	r3, #3
 8004004:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004006:	2304      	movs	r3, #4
 8004008:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800400a:	f107 0314 	add.w	r3, r7, #20
 800400e:	4619      	mov	r1, r3
 8004010:	480c      	ldr	r0, [pc, #48]	; (8004044 <HAL_I2C_MspInit+0x8c>)
 8004012:	f000 fee7 	bl	8004de4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004016:	2300      	movs	r3, #0
 8004018:	60fb      	str	r3, [r7, #12]
 800401a:	4b09      	ldr	r3, [pc, #36]	; (8004040 <HAL_I2C_MspInit+0x88>)
 800401c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401e:	4a08      	ldr	r2, [pc, #32]	; (8004040 <HAL_I2C_MspInit+0x88>)
 8004020:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004024:	6413      	str	r3, [r2, #64]	; 0x40
 8004026:	4b06      	ldr	r3, [pc, #24]	; (8004040 <HAL_I2C_MspInit+0x88>)
 8004028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800402e:	60fb      	str	r3, [r7, #12]
 8004030:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004032:	bf00      	nop
 8004034:	3728      	adds	r7, #40	; 0x28
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	40005400 	.word	0x40005400
 8004040:	40023800 	.word	0x40023800
 8004044:	40020400 	.word	0x40020400

08004048 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b08a      	sub	sp, #40	; 0x28
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004050:	f107 0314 	add.w	r3, r7, #20
 8004054:	2200      	movs	r2, #0
 8004056:	601a      	str	r2, [r3, #0]
 8004058:	605a      	str	r2, [r3, #4]
 800405a:	609a      	str	r2, [r3, #8]
 800405c:	60da      	str	r2, [r3, #12]
 800405e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a19      	ldr	r2, [pc, #100]	; (80040cc <HAL_SPI_MspInit+0x84>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d12b      	bne.n	80040c2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800406a:	2300      	movs	r3, #0
 800406c:	613b      	str	r3, [r7, #16]
 800406e:	4b18      	ldr	r3, [pc, #96]	; (80040d0 <HAL_SPI_MspInit+0x88>)
 8004070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004072:	4a17      	ldr	r2, [pc, #92]	; (80040d0 <HAL_SPI_MspInit+0x88>)
 8004074:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004078:	6453      	str	r3, [r2, #68]	; 0x44
 800407a:	4b15      	ldr	r3, [pc, #84]	; (80040d0 <HAL_SPI_MspInit+0x88>)
 800407c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800407e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004082:	613b      	str	r3, [r7, #16]
 8004084:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004086:	2300      	movs	r3, #0
 8004088:	60fb      	str	r3, [r7, #12]
 800408a:	4b11      	ldr	r3, [pc, #68]	; (80040d0 <HAL_SPI_MspInit+0x88>)
 800408c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800408e:	4a10      	ldr	r2, [pc, #64]	; (80040d0 <HAL_SPI_MspInit+0x88>)
 8004090:	f043 0301 	orr.w	r3, r3, #1
 8004094:	6313      	str	r3, [r2, #48]	; 0x30
 8004096:	4b0e      	ldr	r3, [pc, #56]	; (80040d0 <HAL_SPI_MspInit+0x88>)
 8004098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409a:	f003 0301 	and.w	r3, r3, #1
 800409e:	60fb      	str	r3, [r7, #12]
 80040a0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80040a2:	23e0      	movs	r3, #224	; 0xe0
 80040a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040a6:	2302      	movs	r3, #2
 80040a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040aa:	2300      	movs	r3, #0
 80040ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040ae:	2303      	movs	r3, #3
 80040b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80040b2:	2305      	movs	r3, #5
 80040b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040b6:	f107 0314 	add.w	r3, r7, #20
 80040ba:	4619      	mov	r1, r3
 80040bc:	4805      	ldr	r0, [pc, #20]	; (80040d4 <HAL_SPI_MspInit+0x8c>)
 80040be:	f000 fe91 	bl	8004de4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80040c2:	bf00      	nop
 80040c4:	3728      	adds	r7, #40	; 0x28
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	40013000 	.word	0x40013000
 80040d0:	40023800 	.word	0x40023800
 80040d4:	40020000 	.word	0x40020000

080040d8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80040d8:	b480      	push	{r7}
 80040da:	b085      	sub	sp, #20
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a0b      	ldr	r2, [pc, #44]	; (8004114 <HAL_TIM_PWM_MspInit+0x3c>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d10d      	bne.n	8004106 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80040ea:	2300      	movs	r3, #0
 80040ec:	60fb      	str	r3, [r7, #12]
 80040ee:	4b0a      	ldr	r3, [pc, #40]	; (8004118 <HAL_TIM_PWM_MspInit+0x40>)
 80040f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040f2:	4a09      	ldr	r2, [pc, #36]	; (8004118 <HAL_TIM_PWM_MspInit+0x40>)
 80040f4:	f043 0301 	orr.w	r3, r3, #1
 80040f8:	6453      	str	r3, [r2, #68]	; 0x44
 80040fa:	4b07      	ldr	r3, [pc, #28]	; (8004118 <HAL_TIM_PWM_MspInit+0x40>)
 80040fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040fe:	f003 0301 	and.w	r3, r3, #1
 8004102:	60fb      	str	r3, [r7, #12]
 8004104:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8004106:	bf00      	nop
 8004108:	3714      	adds	r7, #20
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	40010000 	.word	0x40010000
 8004118:	40023800 	.word	0x40023800

0800411c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b088      	sub	sp, #32
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004124:	f107 030c 	add.w	r3, r7, #12
 8004128:	2200      	movs	r2, #0
 800412a:	601a      	str	r2, [r3, #0]
 800412c:	605a      	str	r2, [r3, #4]
 800412e:	609a      	str	r2, [r3, #8]
 8004130:	60da      	str	r2, [r3, #12]
 8004132:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a12      	ldr	r2, [pc, #72]	; (8004184 <HAL_TIM_MspPostInit+0x68>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d11e      	bne.n	800417c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800413e:	2300      	movs	r3, #0
 8004140:	60bb      	str	r3, [r7, #8]
 8004142:	4b11      	ldr	r3, [pc, #68]	; (8004188 <HAL_TIM_MspPostInit+0x6c>)
 8004144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004146:	4a10      	ldr	r2, [pc, #64]	; (8004188 <HAL_TIM_MspPostInit+0x6c>)
 8004148:	f043 0301 	orr.w	r3, r3, #1
 800414c:	6313      	str	r3, [r2, #48]	; 0x30
 800414e:	4b0e      	ldr	r3, [pc, #56]	; (8004188 <HAL_TIM_MspPostInit+0x6c>)
 8004150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004152:	f003 0301 	and.w	r3, r3, #1
 8004156:	60bb      	str	r3, [r7, #8]
 8004158:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = LCD_BL_Pin;
 800415a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800415e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004160:	2302      	movs	r3, #2
 8004162:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004164:	2300      	movs	r3, #0
 8004166:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004168:	2300      	movs	r3, #0
 800416a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800416c:	2301      	movs	r3, #1
 800416e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8004170:	f107 030c 	add.w	r3, r7, #12
 8004174:	4619      	mov	r1, r3
 8004176:	4805      	ldr	r0, [pc, #20]	; (800418c <HAL_TIM_MspPostInit+0x70>)
 8004178:	f000 fe34 	bl	8004de4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800417c:	bf00      	nop
 800417e:	3720      	adds	r7, #32
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}
 8004184:	40010000 	.word	0x40010000
 8004188:	40023800 	.word	0x40023800
 800418c:	40020000 	.word	0x40020000

08004190 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b08c      	sub	sp, #48	; 0x30
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004198:	f107 031c 	add.w	r3, r7, #28
 800419c:	2200      	movs	r2, #0
 800419e:	601a      	str	r2, [r3, #0]
 80041a0:	605a      	str	r2, [r3, #4]
 80041a2:	609a      	str	r2, [r3, #8]
 80041a4:	60da      	str	r2, [r3, #12]
 80041a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a3a      	ldr	r2, [pc, #232]	; (8004298 <HAL_UART_MspInit+0x108>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d135      	bne.n	800421e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80041b2:	2300      	movs	r3, #0
 80041b4:	61bb      	str	r3, [r7, #24]
 80041b6:	4b39      	ldr	r3, [pc, #228]	; (800429c <HAL_UART_MspInit+0x10c>)
 80041b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ba:	4a38      	ldr	r2, [pc, #224]	; (800429c <HAL_UART_MspInit+0x10c>)
 80041bc:	f043 0310 	orr.w	r3, r3, #16
 80041c0:	6453      	str	r3, [r2, #68]	; 0x44
 80041c2:	4b36      	ldr	r3, [pc, #216]	; (800429c <HAL_UART_MspInit+0x10c>)
 80041c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041c6:	f003 0310 	and.w	r3, r3, #16
 80041ca:	61bb      	str	r3, [r7, #24]
 80041cc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041ce:	2300      	movs	r3, #0
 80041d0:	617b      	str	r3, [r7, #20]
 80041d2:	4b32      	ldr	r3, [pc, #200]	; (800429c <HAL_UART_MspInit+0x10c>)
 80041d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d6:	4a31      	ldr	r2, [pc, #196]	; (800429c <HAL_UART_MspInit+0x10c>)
 80041d8:	f043 0301 	orr.w	r3, r3, #1
 80041dc:	6313      	str	r3, [r2, #48]	; 0x30
 80041de:	4b2f      	ldr	r3, [pc, #188]	; (800429c <HAL_UART_MspInit+0x10c>)
 80041e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e2:	f003 0301 	and.w	r3, r3, #1
 80041e6:	617b      	str	r3, [r7, #20]
 80041e8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80041ea:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80041ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041f0:	2302      	movs	r3, #2
 80041f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041f4:	2300      	movs	r3, #0
 80041f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041f8:	2303      	movs	r3, #3
 80041fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80041fc:	2307      	movs	r3, #7
 80041fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004200:	f107 031c 	add.w	r3, r7, #28
 8004204:	4619      	mov	r1, r3
 8004206:	4826      	ldr	r0, [pc, #152]	; (80042a0 <HAL_UART_MspInit+0x110>)
 8004208:	f000 fdec 	bl	8004de4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800420c:	2200      	movs	r2, #0
 800420e:	2100      	movs	r1, #0
 8004210:	2025      	movs	r0, #37	; 0x25
 8004212:	f000 fd1e 	bl	8004c52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004216:	2025      	movs	r0, #37	; 0x25
 8004218:	f000 fd37 	bl	8004c8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800421c:	e038      	b.n	8004290 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a20      	ldr	r2, [pc, #128]	; (80042a4 <HAL_UART_MspInit+0x114>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d133      	bne.n	8004290 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004228:	2300      	movs	r3, #0
 800422a:	613b      	str	r3, [r7, #16]
 800422c:	4b1b      	ldr	r3, [pc, #108]	; (800429c <HAL_UART_MspInit+0x10c>)
 800422e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004230:	4a1a      	ldr	r2, [pc, #104]	; (800429c <HAL_UART_MspInit+0x10c>)
 8004232:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004236:	6413      	str	r3, [r2, #64]	; 0x40
 8004238:	4b18      	ldr	r3, [pc, #96]	; (800429c <HAL_UART_MspInit+0x10c>)
 800423a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004240:	613b      	str	r3, [r7, #16]
 8004242:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004244:	2300      	movs	r3, #0
 8004246:	60fb      	str	r3, [r7, #12]
 8004248:	4b14      	ldr	r3, [pc, #80]	; (800429c <HAL_UART_MspInit+0x10c>)
 800424a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424c:	4a13      	ldr	r2, [pc, #76]	; (800429c <HAL_UART_MspInit+0x10c>)
 800424e:	f043 0301 	orr.w	r3, r3, #1
 8004252:	6313      	str	r3, [r2, #48]	; 0x30
 8004254:	4b11      	ldr	r3, [pc, #68]	; (800429c <HAL_UART_MspInit+0x10c>)
 8004256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004258:	f003 0301 	and.w	r3, r3, #1
 800425c:	60fb      	str	r3, [r7, #12]
 800425e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004260:	230c      	movs	r3, #12
 8004262:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004264:	2302      	movs	r3, #2
 8004266:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004268:	2300      	movs	r3, #0
 800426a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800426c:	2303      	movs	r3, #3
 800426e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004270:	2307      	movs	r3, #7
 8004272:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004274:	f107 031c 	add.w	r3, r7, #28
 8004278:	4619      	mov	r1, r3
 800427a:	4809      	ldr	r0, [pc, #36]	; (80042a0 <HAL_UART_MspInit+0x110>)
 800427c:	f000 fdb2 	bl	8004de4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004280:	2200      	movs	r2, #0
 8004282:	2100      	movs	r1, #0
 8004284:	2026      	movs	r0, #38	; 0x26
 8004286:	f000 fce4 	bl	8004c52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800428a:	2026      	movs	r0, #38	; 0x26
 800428c:	f000 fcfd 	bl	8004c8a <HAL_NVIC_EnableIRQ>
}
 8004290:	bf00      	nop
 8004292:	3730      	adds	r7, #48	; 0x30
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}
 8004298:	40011000 	.word	0x40011000
 800429c:	40023800 	.word	0x40023800
 80042a0:	40020000 	.word	0x40020000
 80042a4:	40004400 	.word	0x40004400

080042a8 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b086      	sub	sp, #24
 80042ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80042ae:	1d3b      	adds	r3, r7, #4
 80042b0:	2200      	movs	r2, #0
 80042b2:	601a      	str	r2, [r3, #0]
 80042b4:	605a      	str	r2, [r3, #4]
 80042b6:	609a      	str	r2, [r3, #8]
 80042b8:	60da      	str	r2, [r3, #12]
 80042ba:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80042bc:	4b1c      	ldr	r3, [pc, #112]	; (8004330 <HAL_FSMC_MspInit+0x88>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d131      	bne.n	8004328 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80042c4:	4b1a      	ldr	r3, [pc, #104]	; (8004330 <HAL_FSMC_MspInit+0x88>)
 80042c6:	2201      	movs	r2, #1
 80042c8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80042ca:	2300      	movs	r3, #0
 80042cc:	603b      	str	r3, [r7, #0]
 80042ce:	4b19      	ldr	r3, [pc, #100]	; (8004334 <HAL_FSMC_MspInit+0x8c>)
 80042d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d2:	4a18      	ldr	r2, [pc, #96]	; (8004334 <HAL_FSMC_MspInit+0x8c>)
 80042d4:	f043 0301 	orr.w	r3, r3, #1
 80042d8:	6393      	str	r3, [r2, #56]	; 0x38
 80042da:	4b16      	ldr	r3, [pc, #88]	; (8004334 <HAL_FSMC_MspInit+0x8c>)
 80042dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042de:	f003 0301 	and.w	r3, r3, #1
 80042e2:	603b      	str	r3, [r7, #0]
 80042e4:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80042e6:	f64f 7380 	movw	r3, #65408	; 0xff80
 80042ea:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042ec:	2302      	movs	r3, #2
 80042ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042f0:	2300      	movs	r3, #0
 80042f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042f4:	2303      	movs	r3, #3
 80042f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80042f8:	230c      	movs	r3, #12
 80042fa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80042fc:	1d3b      	adds	r3, r7, #4
 80042fe:	4619      	mov	r1, r3
 8004300:	480d      	ldr	r0, [pc, #52]	; (8004338 <HAL_FSMC_MspInit+0x90>)
 8004302:	f000 fd6f 	bl	8004de4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13
 8004306:	f24e 73b3 	movw	r3, #59315	; 0xe7b3
 800430a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800430c:	2302      	movs	r3, #2
 800430e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004310:	2300      	movs	r3, #0
 8004312:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004314:	2303      	movs	r3, #3
 8004316:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8004318:	230c      	movs	r3, #12
 800431a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800431c:	1d3b      	adds	r3, r7, #4
 800431e:	4619      	mov	r1, r3
 8004320:	4806      	ldr	r0, [pc, #24]	; (800433c <HAL_FSMC_MspInit+0x94>)
 8004322:	f000 fd5f 	bl	8004de4 <HAL_GPIO_Init>
 8004326:	e000      	b.n	800432a <HAL_FSMC_MspInit+0x82>
    return;
 8004328:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800432a:	3718      	adds	r7, #24
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}
 8004330:	200000a4 	.word	0x200000a4
 8004334:	40023800 	.word	0x40023800
 8004338:	40021000 	.word	0x40021000
 800433c:	40020c00 	.word	0x40020c00

08004340 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8004340:	b580      	push	{r7, lr}
 8004342:	b082      	sub	sp, #8
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8004348:	f7ff ffae 	bl	80042a8 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800434c:	bf00      	nop
 800434e:	3708      	adds	r7, #8
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}

08004354 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004354:	b480      	push	{r7}
 8004356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004358:	e7fe      	b.n	8004358 <NMI_Handler+0x4>

0800435a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800435a:	b480      	push	{r7}
 800435c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800435e:	e7fe      	b.n	800435e <HardFault_Handler+0x4>

08004360 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004360:	b480      	push	{r7}
 8004362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004364:	e7fe      	b.n	8004364 <MemManage_Handler+0x4>

08004366 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004366:	b480      	push	{r7}
 8004368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800436a:	e7fe      	b.n	800436a <BusFault_Handler+0x4>

0800436c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800436c:	b480      	push	{r7}
 800436e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004370:	e7fe      	b.n	8004370 <UsageFault_Handler+0x4>

08004372 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004372:	b480      	push	{r7}
 8004374:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004376:	bf00      	nop
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr

08004380 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004380:	b480      	push	{r7}
 8004382:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004384:	bf00      	nop
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr

0800438e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800438e:	b480      	push	{r7}
 8004390:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004392:	bf00      	nop
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr

0800439c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80043a0:	f000 fb38 	bl	8004a14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80043a4:	bf00      	nop
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80043ac:	2010      	movs	r0, #16
 80043ae:	f000 fecf 	bl	8005150 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80043b2:	bf00      	nop
 80043b4:	bd80      	pop	{r7, pc}
	...

080043b8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b082      	sub	sp, #8
 80043bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  static int ledVal = 0;
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, ledVal);
 80043be:	4b24      	ldr	r3, [pc, #144]	; (8004450 <USART1_IRQHandler+0x98>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	461a      	mov	r2, r3
 80043c6:	2108      	movs	r1, #8
 80043c8:	4822      	ldr	r0, [pc, #136]	; (8004454 <USART1_IRQHandler+0x9c>)
 80043ca:	f000 fea7 	bl	800511c <HAL_GPIO_WritePin>
  ledVal = !ledVal;
 80043ce:	4b20      	ldr	r3, [pc, #128]	; (8004450 <USART1_IRQHandler+0x98>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	bf0c      	ite	eq
 80043d6:	2301      	moveq	r3, #1
 80043d8:	2300      	movne	r3, #0
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	461a      	mov	r2, r3
 80043de:	4b1c      	ldr	r3, [pc, #112]	; (8004450 <USART1_IRQHandler+0x98>)
 80043e0:	601a      	str	r2, [r3, #0]
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80043e2:	481d      	ldr	r0, [pc, #116]	; (8004458 <USART1_IRQHandler+0xa0>)
 80043e4:	f003 fbbc 	bl	8007b60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  volatile unsigned int IIR;
  IIR = USART1->SR;
 80043e8:	4b1c      	ldr	r3, [pc, #112]	; (800445c <USART1_IRQHandler+0xa4>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	603b      	str	r3, [r7, #0]
  if(IIR & UART_FLAG_RXNE){
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	f003 0320 	and.w	r3, r3, #32
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d009      	beq.n	800440c <USART1_IRQHandler+0x54>
  		//Read Data Register Not Empty
  		char t = USART1->DR; // the character from the USART1 data register is saved in t
 80043f8:	4b18      	ldr	r3, [pc, #96]	; (800445c <USART1_IRQHandler+0xa4>)
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	71fb      	strb	r3, [r7, #7]
  		put_in_rx_buffer(t,DBG_UART);
 80043fe:	4b18      	ldr	r3, [pc, #96]	; (8004460 <USART1_IRQHandler+0xa8>)
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	79fb      	ldrb	r3, [r7, #7]
 8004404:	4611      	mov	r1, r2
 8004406:	4618      	mov	r0, r3
 8004408:	f000 f93c 	bl	8004684 <put_in_rx_buffer>
      }
  if(IIR & UART_FLAG_TXE){
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004412:	2b00      	cmp	r3, #0
 8004414:	d018      	beq.n	8004448 <USART1_IRQHandler+0x90>
  		if(wr_pointer_dbg==rd_pointer_dbg){
 8004416:	4b13      	ldr	r3, [pc, #76]	; (8004464 <USART1_IRQHandler+0xac>)
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	4b13      	ldr	r3, [pc, #76]	; (8004468 <USART1_IRQHandler+0xb0>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	429a      	cmp	r2, r3
 8004420:	d108      	bne.n	8004434 <USART1_IRQHandler+0x7c>
  			__HAL_UART_DISABLE_IT(&huart1, UART_IT_TXE); //whole message transmitted
 8004422:	4b0d      	ldr	r3, [pc, #52]	; (8004458 <USART1_IRQHandler+0xa0>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	68da      	ldr	r2, [r3, #12]
 8004428:	4b0b      	ldr	r3, [pc, #44]	; (8004458 <USART1_IRQHandler+0xa0>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004430:	60da      	str	r2, [r3, #12]
  		}
  	}


  /* USER CODE END USART1_IRQn 1 */
}
 8004432:	e009      	b.n	8004448 <USART1_IRQHandler+0x90>
  			DBG_UART->DR = get_from_tx_buffer(DBG_UART);
 8004434:	4b0a      	ldr	r3, [pc, #40]	; (8004460 <USART1_IRQHandler+0xa8>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4618      	mov	r0, r3
 800443a:	f000 f975 	bl	8004728 <get_from_tx_buffer>
 800443e:	4603      	mov	r3, r0
 8004440:	461a      	mov	r2, r3
 8004442:	4b07      	ldr	r3, [pc, #28]	; (8004460 <USART1_IRQHandler+0xa8>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	605a      	str	r2, [r3, #4]
}
 8004448:	bf00      	nop
 800444a:	3708      	adds	r7, #8
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}
 8004450:	200000a8 	.word	0x200000a8
 8004454:	40020400 	.word	0x40020400
 8004458:	20002188 	.word	0x20002188
 800445c:	40011000 	.word	0x40011000
 8004460:	20000018 	.word	0x20000018
 8004464:	200000bc 	.word	0x200000bc
 8004468:	200000b8 	.word	0x200000b8

0800446c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b082      	sub	sp, #8
 8004470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004472:	481b      	ldr	r0, [pc, #108]	; (80044e0 <USART2_IRQHandler+0x74>)
 8004474:	f003 fb74 	bl	8007b60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  volatile unsigned int IIR;
  	IIR=USART2->SR;
 8004478:	4b1a      	ldr	r3, [pc, #104]	; (80044e4 <USART2_IRQHandler+0x78>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	603b      	str	r3, [r7, #0]
    if(IIR & UART_FLAG_RXNE){
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	f003 0320 	and.w	r3, r3, #32
 8004484:	2b00      	cmp	r3, #0
 8004486:	d009      	beq.n	800449c <USART2_IRQHandler+0x30>
  		// check if the USART6 receive interrupt flag was set
  		char t = USART2->DR; // the character from the USART1 data register is saved in t
 8004488:	4b16      	ldr	r3, [pc, #88]	; (80044e4 <USART2_IRQHandler+0x78>)
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	71fb      	strb	r3, [r7, #7]
  		put_in_rx_buffer(t,RS485_UART);
 800448e:	4b16      	ldr	r3, [pc, #88]	; (80044e8 <USART2_IRQHandler+0x7c>)
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	79fb      	ldrb	r3, [r7, #7]
 8004494:	4611      	mov	r1, r2
 8004496:	4618      	mov	r0, r3
 8004498:	f000 f8f4 	bl	8004684 <put_in_rx_buffer>
      }
  	if(IIR & UART_FLAG_TXE){
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d017      	beq.n	80044d6 <USART2_IRQHandler+0x6a>
  		if(wr_pointer_rs485==rd_pointer_rs485){
 80044a6:	4b11      	ldr	r3, [pc, #68]	; (80044ec <USART2_IRQHandler+0x80>)
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	4b11      	ldr	r3, [pc, #68]	; (80044f0 <USART2_IRQHandler+0x84>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d108      	bne.n	80044c4 <USART2_IRQHandler+0x58>
  			__HAL_UART_DISABLE_IT(&huart2, UART_IT_TXE);
 80044b2:	4b0b      	ldr	r3, [pc, #44]	; (80044e0 <USART2_IRQHandler+0x74>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68da      	ldr	r2, [r3, #12]
 80044b8:	4b09      	ldr	r3, [pc, #36]	; (80044e0 <USART2_IRQHandler+0x74>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044c0:	60da      	str	r2, [r3, #12]
  			USART2->DR = get_from_tx_buffer(RS485_UART);
  		}
  	}

  /* USER CODE END USART2_IRQn 1 */
}
 80044c2:	e008      	b.n	80044d6 <USART2_IRQHandler+0x6a>
  			USART2->DR = get_from_tx_buffer(RS485_UART);
 80044c4:	4b08      	ldr	r3, [pc, #32]	; (80044e8 <USART2_IRQHandler+0x7c>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4618      	mov	r0, r3
 80044ca:	f000 f92d 	bl	8004728 <get_from_tx_buffer>
 80044ce:	4603      	mov	r3, r0
 80044d0:	461a      	mov	r2, r3
 80044d2:	4b04      	ldr	r3, [pc, #16]	; (80044e4 <USART2_IRQHandler+0x78>)
 80044d4:	605a      	str	r2, [r3, #4]
}
 80044d6:	bf00      	nop
 80044d8:	3708      	adds	r7, #8
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	2000226c 	.word	0x2000226c
 80044e4:	40004400 	.word	0x40004400
 80044e8:	20000014 	.word	0x20000014
 80044ec:	200000b4 	.word	0x200000b4
 80044f0:	200000b0 	.word	0x200000b0

080044f4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b086      	sub	sp, #24
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004500:	2300      	movs	r3, #0
 8004502:	617b      	str	r3, [r7, #20]
 8004504:	e00a      	b.n	800451c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004506:	f3af 8000 	nop.w
 800450a:	4601      	mov	r1, r0
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	1c5a      	adds	r2, r3, #1
 8004510:	60ba      	str	r2, [r7, #8]
 8004512:	b2ca      	uxtb	r2, r1
 8004514:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	3301      	adds	r3, #1
 800451a:	617b      	str	r3, [r7, #20]
 800451c:	697a      	ldr	r2, [r7, #20]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	429a      	cmp	r2, r3
 8004522:	dbf0      	blt.n	8004506 <_read+0x12>
	}

return len;
 8004524:	687b      	ldr	r3, [r7, #4]
}
 8004526:	4618      	mov	r0, r3
 8004528:	3718      	adds	r7, #24
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}

0800452e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800452e:	b580      	push	{r7, lr}
 8004530:	b086      	sub	sp, #24
 8004532:	af00      	add	r7, sp, #0
 8004534:	60f8      	str	r0, [r7, #12]
 8004536:	60b9      	str	r1, [r7, #8]
 8004538:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800453a:	2300      	movs	r3, #0
 800453c:	617b      	str	r3, [r7, #20]
 800453e:	e009      	b.n	8004554 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	1c5a      	adds	r2, r3, #1
 8004544:	60ba      	str	r2, [r7, #8]
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	4618      	mov	r0, r3
 800454a:	f000 f889 	bl	8004660 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	3301      	adds	r3, #1
 8004552:	617b      	str	r3, [r7, #20]
 8004554:	697a      	ldr	r2, [r7, #20]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	429a      	cmp	r2, r3
 800455a:	dbf1      	blt.n	8004540 <_write+0x12>
	}
	return len;
 800455c:	687b      	ldr	r3, [r7, #4]
}
 800455e:	4618      	mov	r0, r3
 8004560:	3718      	adds	r7, #24
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}

08004566 <_close>:

int _close(int file)
{
 8004566:	b480      	push	{r7}
 8004568:	b083      	sub	sp, #12
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
	return -1;
 800456e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004572:	4618      	mov	r0, r3
 8004574:	370c      	adds	r7, #12
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr

0800457e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800457e:	b480      	push	{r7}
 8004580:	b083      	sub	sp, #12
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
 8004586:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800458e:	605a      	str	r2, [r3, #4]
	return 0;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	370c      	adds	r7, #12
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr

0800459e <_isatty>:

int _isatty(int file)
{
 800459e:	b480      	push	{r7}
 80045a0:	b083      	sub	sp, #12
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
	return 1;
 80045a6:	2301      	movs	r3, #1
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	370c      	adds	r7, #12
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr

080045b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b085      	sub	sp, #20
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	60f8      	str	r0, [r7, #12]
 80045bc:	60b9      	str	r1, [r7, #8]
 80045be:	607a      	str	r2, [r7, #4]
	return 0;
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3714      	adds	r7, #20
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr
	...

080045d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b086      	sub	sp, #24
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80045d8:	4a14      	ldr	r2, [pc, #80]	; (800462c <_sbrk+0x5c>)
 80045da:	4b15      	ldr	r3, [pc, #84]	; (8004630 <_sbrk+0x60>)
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80045e4:	4b13      	ldr	r3, [pc, #76]	; (8004634 <_sbrk+0x64>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d102      	bne.n	80045f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80045ec:	4b11      	ldr	r3, [pc, #68]	; (8004634 <_sbrk+0x64>)
 80045ee:	4a12      	ldr	r2, [pc, #72]	; (8004638 <_sbrk+0x68>)
 80045f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80045f2:	4b10      	ldr	r3, [pc, #64]	; (8004634 <_sbrk+0x64>)
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4413      	add	r3, r2
 80045fa:	693a      	ldr	r2, [r7, #16]
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d207      	bcs.n	8004610 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004600:	f004 fa12 	bl	8008a28 <__errno>
 8004604:	4603      	mov	r3, r0
 8004606:	220c      	movs	r2, #12
 8004608:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800460a:	f04f 33ff 	mov.w	r3, #4294967295
 800460e:	e009      	b.n	8004624 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004610:	4b08      	ldr	r3, [pc, #32]	; (8004634 <_sbrk+0x64>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004616:	4b07      	ldr	r3, [pc, #28]	; (8004634 <_sbrk+0x64>)
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4413      	add	r3, r2
 800461e:	4a05      	ldr	r2, [pc, #20]	; (8004634 <_sbrk+0x64>)
 8004620:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004622:	68fb      	ldr	r3, [r7, #12]
}
 8004624:	4618      	mov	r0, r3
 8004626:	3718      	adds	r7, #24
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}
 800462c:	20020000 	.word	0x20020000
 8004630:	00000400 	.word	0x00000400
 8004634:	200000ac 	.word	0x200000ac
 8004638:	20006050 	.word	0x20006050

0800463c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800463c:	b480      	push	{r7}
 800463e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004640:	4b06      	ldr	r3, [pc, #24]	; (800465c <SystemInit+0x20>)
 8004642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004646:	4a05      	ldr	r2, [pc, #20]	; (800465c <SystemInit+0x20>)
 8004648:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800464c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004650:	bf00      	nop
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr
 800465a:	bf00      	nop
 800465c:	e000ed00 	.word	0xe000ed00

08004660 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

//redirect printf to uart1.
PUTCHAR_PROTOTYPE{
 8004660:	b580      	push	{r7, lr}
 8004662:	b082      	sub	sp, #8
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 0xffff);
 8004668:	1d39      	adds	r1, r7, #4
 800466a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800466e:	2201      	movs	r2, #1
 8004670:	4803      	ldr	r0, [pc, #12]	; (8004680 <__io_putchar+0x20>)
 8004672:	f003 f9e2 	bl	8007a3a <HAL_UART_Transmit>
	return ch;
 8004676:	687b      	ldr	r3, [r7, #4]
}
 8004678:	4618      	mov	r0, r3
 800467a:	3708      	adds	r7, #8
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}
 8004680:	20002188 	.word	0x20002188

08004684 <put_in_rx_buffer>:

void put_in_rx_buffer(char data, USART_TypeDef* USARTx)
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	4603      	mov	r3, r0
 800468c:	6039      	str	r1, [r7, #0]
 800468e:	71fb      	strb	r3, [r7, #7]
	if(USARTx == DBG_UART)
 8004690:	4b1d      	ldr	r3, [pc, #116]	; (8004708 <put_in_rx_buffer+0x84>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	683a      	ldr	r2, [r7, #0]
 8004696:	429a      	cmp	r2, r3
 8004698:	d114      	bne.n	80046c4 <put_in_rx_buffer+0x40>
	{
		if(SIO_RBUFLEN_DBG>=LEN_RX_BUFFER_DBG)
 800469a:	4b1c      	ldr	r3, [pc, #112]	; (800470c <put_in_rx_buffer+0x88>)
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	4b1c      	ldr	r3, [pc, #112]	; (8004710 <put_in_rx_buffer+0x8c>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046a8:	d226      	bcs.n	80046f8 <put_in_rx_buffer+0x74>
			{
				return;
			}
		rx_buffer_dbg[wr_pointer_rx_dbg & (LEN_RX_BUFFER_DBG - 1)]=data;
 80046aa:	4b18      	ldr	r3, [pc, #96]	; (800470c <put_in_rx_buffer+0x88>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80046b2:	4918      	ldr	r1, [pc, #96]	; (8004714 <put_in_rx_buffer+0x90>)
 80046b4:	79fa      	ldrb	r2, [r7, #7]
 80046b6:	54ca      	strb	r2, [r1, r3]
		wr_pointer_rx_dbg++;
 80046b8:	4b14      	ldr	r3, [pc, #80]	; (800470c <put_in_rx_buffer+0x88>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	3301      	adds	r3, #1
 80046be:	4a13      	ldr	r2, [pc, #76]	; (800470c <put_in_rx_buffer+0x88>)
 80046c0:	6013      	str	r3, [r2, #0]
 80046c2:	e01c      	b.n	80046fe <put_in_rx_buffer+0x7a>
	}
	else if(USARTx == RS485_UART)
 80046c4:	4b14      	ldr	r3, [pc, #80]	; (8004718 <put_in_rx_buffer+0x94>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	683a      	ldr	r2, [r7, #0]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d117      	bne.n	80046fe <put_in_rx_buffer+0x7a>
	{
		if(SIO_RBUFLEN_RS485>=LEN_RX_BUFFER_RS485)
 80046ce:	4b13      	ldr	r3, [pc, #76]	; (800471c <put_in_rx_buffer+0x98>)
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	4b13      	ldr	r3, [pc, #76]	; (8004720 <put_in_rx_buffer+0x9c>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046dc:	d20e      	bcs.n	80046fc <put_in_rx_buffer+0x78>
			{
				return;
			}
		rx_buffer_rs485[wr_pointer_rx_rs485 & (LEN_RX_BUFFER_RS485 - 1)]=data;
 80046de:	4b0f      	ldr	r3, [pc, #60]	; (800471c <put_in_rx_buffer+0x98>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046e6:	490f      	ldr	r1, [pc, #60]	; (8004724 <put_in_rx_buffer+0xa0>)
 80046e8:	79fa      	ldrb	r2, [r7, #7]
 80046ea:	54ca      	strb	r2, [r1, r3]
		wr_pointer_rx_rs485++;
 80046ec:	4b0b      	ldr	r3, [pc, #44]	; (800471c <put_in_rx_buffer+0x98>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	3301      	adds	r3, #1
 80046f2:	4a0a      	ldr	r2, [pc, #40]	; (800471c <put_in_rx_buffer+0x98>)
 80046f4:	6013      	str	r3, [r2, #0]
 80046f6:	e002      	b.n	80046fe <put_in_rx_buffer+0x7a>
				return;
 80046f8:	bf00      	nop
 80046fa:	e000      	b.n	80046fe <put_in_rx_buffer+0x7a>
				return;
 80046fc:	bf00      	nop
	}
}
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr
 8004708:	20000018 	.word	0x20000018
 800470c:	200000cc 	.word	0x200000cc
 8004710:	200000c8 	.word	0x200000c8
 8004714:	20003bb8 	.word	0x20003bb8
 8004718:	20000014 	.word	0x20000014
 800471c:	200000c4 	.word	0x200000c4
 8004720:	200000c0 	.word	0x200000c0
 8004724:	200023b0 	.word	0x200023b0

08004728 <get_from_tx_buffer>:
		tx_buffer_dbg[wr_pointer_dbg & (LEN_TX_BUFFER_DBG - 1)]=data;
		wr_pointer_dbg++;
	}
}
char get_from_tx_buffer(USART_TypeDef* USARTx)
{
 8004728:	b480      	push	{r7}
 800472a:	b085      	sub	sp, #20
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
	char data;

	if(USARTx == RS485_UART)
 8004730:	4b14      	ldr	r3, [pc, #80]	; (8004784 <get_from_tx_buffer+0x5c>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	429a      	cmp	r2, r3
 8004738:	d10c      	bne.n	8004754 <get_from_tx_buffer+0x2c>
	{

		data=tx_buffer_rs485[rd_pointer_rs485 & (LEN_TX_BUFFER_RS485-1)];
 800473a:	4b13      	ldr	r3, [pc, #76]	; (8004788 <get_from_tx_buffer+0x60>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004742:	4a12      	ldr	r2, [pc, #72]	; (800478c <get_from_tx_buffer+0x64>)
 8004744:	5cd3      	ldrb	r3, [r2, r3]
 8004746:	73fb      	strb	r3, [r7, #15]
		rd_pointer_rs485++;
 8004748:	4b0f      	ldr	r3, [pc, #60]	; (8004788 <get_from_tx_buffer+0x60>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	3301      	adds	r3, #1
 800474e:	4a0e      	ldr	r2, [pc, #56]	; (8004788 <get_from_tx_buffer+0x60>)
 8004750:	6013      	str	r3, [r2, #0]
 8004752:	e010      	b.n	8004776 <get_from_tx_buffer+0x4e>
	}
	else if(USARTx == DBG_UART)
 8004754:	4b0e      	ldr	r3, [pc, #56]	; (8004790 <get_from_tx_buffer+0x68>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	429a      	cmp	r2, r3
 800475c:	d10b      	bne.n	8004776 <get_from_tx_buffer+0x4e>
	{

		data=tx_buffer_dbg[rd_pointer_dbg & (LEN_TX_BUFFER_DBG-1)];
 800475e:	4b0d      	ldr	r3, [pc, #52]	; (8004794 <get_from_tx_buffer+0x6c>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004766:	4a0c      	ldr	r2, [pc, #48]	; (8004798 <get_from_tx_buffer+0x70>)
 8004768:	5cd3      	ldrb	r3, [r2, r3]
 800476a:	73fb      	strb	r3, [r7, #15]
		rd_pointer_dbg++;
 800476c:	4b09      	ldr	r3, [pc, #36]	; (8004794 <get_from_tx_buffer+0x6c>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	3301      	adds	r3, #1
 8004772:	4a08      	ldr	r2, [pc, #32]	; (8004794 <get_from_tx_buffer+0x6c>)
 8004774:	6013      	str	r3, [r2, #0]
	}
	return data;
 8004776:	7bfb      	ldrb	r3, [r7, #15]
}
 8004778:	4618      	mov	r0, r3
 800477a:	3714      	adds	r7, #20
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr
 8004784:	20000014 	.word	0x20000014
 8004788:	200000b0 	.word	0x200000b0
 800478c:	200027b0 	.word	0x200027b0
 8004790:	20000018 	.word	0x20000018
 8004794:	200000b8 	.word	0x200000b8
 8004798:	20005bb8 	.word	0x20005bb8

0800479c <get_from_rx_buffer>:
char get_from_rx_buffer(USART_TypeDef* USARTx)
{
 800479c:	b480      	push	{r7}
 800479e:	b085      	sub	sp, #20
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
	char data;

	if(USARTx == RS485_UART)
 80047a4:	4b14      	ldr	r3, [pc, #80]	; (80047f8 <get_from_rx_buffer+0x5c>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d10c      	bne.n	80047c8 <get_from_rx_buffer+0x2c>
	{

		data=rx_buffer_rs485[rd_pointer_rx_rs485 & (LEN_RX_BUFFER_RS485-1)];
 80047ae:	4b13      	ldr	r3, [pc, #76]	; (80047fc <get_from_rx_buffer+0x60>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047b6:	4a12      	ldr	r2, [pc, #72]	; (8004800 <get_from_rx_buffer+0x64>)
 80047b8:	5cd3      	ldrb	r3, [r2, r3]
 80047ba:	73fb      	strb	r3, [r7, #15]
		rd_pointer_rx_rs485++;
 80047bc:	4b0f      	ldr	r3, [pc, #60]	; (80047fc <get_from_rx_buffer+0x60>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	3301      	adds	r3, #1
 80047c2:	4a0e      	ldr	r2, [pc, #56]	; (80047fc <get_from_rx_buffer+0x60>)
 80047c4:	6013      	str	r3, [r2, #0]
 80047c6:	e010      	b.n	80047ea <get_from_rx_buffer+0x4e>
	}
	else if(USARTx == DBG_UART)
 80047c8:	4b0e      	ldr	r3, [pc, #56]	; (8004804 <get_from_rx_buffer+0x68>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d10b      	bne.n	80047ea <get_from_rx_buffer+0x4e>
	{

		data=rx_buffer_dbg[rd_pointer_rx_dbg & (LEN_RX_BUFFER_DBG-1)];
 80047d2:	4b0d      	ldr	r3, [pc, #52]	; (8004808 <get_from_rx_buffer+0x6c>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80047da:	4a0c      	ldr	r2, [pc, #48]	; (800480c <get_from_rx_buffer+0x70>)
 80047dc:	5cd3      	ldrb	r3, [r2, r3]
 80047de:	73fb      	strb	r3, [r7, #15]
		rd_pointer_rx_dbg++;
 80047e0:	4b09      	ldr	r3, [pc, #36]	; (8004808 <get_from_rx_buffer+0x6c>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	3301      	adds	r3, #1
 80047e6:	4a08      	ldr	r2, [pc, #32]	; (8004808 <get_from_rx_buffer+0x6c>)
 80047e8:	6013      	str	r3, [r2, #0]
	}
	return data;
 80047ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3714      	adds	r7, #20
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr
 80047f8:	20000014 	.word	0x20000014
 80047fc:	200000c0 	.word	0x200000c0
 8004800:	200023b0 	.word	0x200023b0
 8004804:	20000018 	.word	0x20000018
 8004808:	200000c8 	.word	0x200000c8
 800480c:	20003bb8 	.word	0x20003bb8

08004810 <usart_message_ready>:

	return 0;
}
//**************************************************************************************
char usart_message_ready(USART_TypeDef* USARTx, char delimiter)
{
 8004810:	b480      	push	{r7}
 8004812:	b085      	sub	sp, #20
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	460b      	mov	r3, r1
 800481a:	70fb      	strb	r3, [r7, #3]
	if (USARTx == DBG_UART)
 800481c:	4b1f      	ldr	r3, [pc, #124]	; (800489c <usart_message_ready+0x8c>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	429a      	cmp	r2, r3
 8004824:	d117      	bne.n	8004856 <usart_message_ready+0x46>
	{
		unsigned long tail = rd_pointer_rx_dbg;
 8004826:	4b1e      	ldr	r3, [pc, #120]	; (80048a0 <usart_message_ready+0x90>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	60fb      	str	r3, [r7, #12]

		while ((wr_pointer_rx_dbg - tail) != 0)
 800482c:	e00d      	b.n	800484a <usart_message_ready+0x3a>
		{
			if (rx_buffer_dbg[tail & (LEN_RX_BUFFER_DBG - 1)] == delimiter)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004834:	4a1b      	ldr	r2, [pc, #108]	; (80048a4 <usart_message_ready+0x94>)
 8004836:	5cd3      	ldrb	r3, [r2, r3]
 8004838:	b2db      	uxtb	r3, r3
 800483a:	78fa      	ldrb	r2, [r7, #3]
 800483c:	429a      	cmp	r2, r3
 800483e:	d101      	bne.n	8004844 <usart_message_ready+0x34>
				return 1;
 8004840:	2301      	movs	r3, #1
 8004842:	e025      	b.n	8004890 <usart_message_ready+0x80>
			++tail;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	3301      	adds	r3, #1
 8004848:	60fb      	str	r3, [r7, #12]
		while ((wr_pointer_rx_dbg - tail) != 0)
 800484a:	4b17      	ldr	r3, [pc, #92]	; (80048a8 <usart_message_ready+0x98>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	68fa      	ldr	r2, [r7, #12]
 8004850:	429a      	cmp	r2, r3
 8004852:	d1ec      	bne.n	800482e <usart_message_ready+0x1e>
 8004854:	e01b      	b.n	800488e <usart_message_ready+0x7e>
		}
	}
	else if (USARTx == RS485_UART)
 8004856:	4b15      	ldr	r3, [pc, #84]	; (80048ac <usart_message_ready+0x9c>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	429a      	cmp	r2, r3
 800485e:	d116      	bne.n	800488e <usart_message_ready+0x7e>
	{
		unsigned long tail = rd_pointer_rx_rs485;
 8004860:	4b13      	ldr	r3, [pc, #76]	; (80048b0 <usart_message_ready+0xa0>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	60bb      	str	r3, [r7, #8]

		while ((wr_pointer_rx_rs485 - tail) != 0)
 8004866:	e00d      	b.n	8004884 <usart_message_ready+0x74>
		{
			if (rx_buffer_rs485[tail & (LEN_RX_BUFFER_RS485 - 1)] == delimiter)
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800486e:	4a11      	ldr	r2, [pc, #68]	; (80048b4 <usart_message_ready+0xa4>)
 8004870:	5cd3      	ldrb	r3, [r2, r3]
 8004872:	b2db      	uxtb	r3, r3
 8004874:	78fa      	ldrb	r2, [r7, #3]
 8004876:	429a      	cmp	r2, r3
 8004878:	d101      	bne.n	800487e <usart_message_ready+0x6e>
				return 1;
 800487a:	2301      	movs	r3, #1
 800487c:	e008      	b.n	8004890 <usart_message_ready+0x80>
			++tail;
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	3301      	adds	r3, #1
 8004882:	60bb      	str	r3, [r7, #8]
		while ((wr_pointer_rx_rs485 - tail) != 0)
 8004884:	4b0c      	ldr	r3, [pc, #48]	; (80048b8 <usart_message_ready+0xa8>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	68ba      	ldr	r2, [r7, #8]
 800488a:	429a      	cmp	r2, r3
 800488c:	d1ec      	bne.n	8004868 <usart_message_ready+0x58>
		}
	}
	return 0;
 800488e:	2300      	movs	r3, #0
}
 8004890:	4618      	mov	r0, r3
 8004892:	3714      	adds	r7, #20
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr
 800489c:	20000018 	.word	0x20000018
 80048a0:	200000c8 	.word	0x200000c8
 80048a4:	20003bb8 	.word	0x20003bb8
 80048a8:	200000cc 	.word	0x200000cc
 80048ac:	20000014 	.word	0x20000014
 80048b0:	200000c0 	.word	0x200000c0
 80048b4:	200023b0 	.word	0x200023b0
 80048b8:	200000c4 	.word	0x200000c4

080048bc <read_usart_message>:
/*
 * Reads message from specified uart rx buffer into @dst until @delimiter character is encountered or @max_len exceeded.
 * Returns: number of characters read if successful, zero when there is no message ready to be read.
 */
unsigned int read_usart_message(char* dst, UART_HandleTypeDef* huart, int max_len, char delimiter)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b086      	sub	sp, #24
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	60b9      	str	r1, [r7, #8]
 80048c6:	607a      	str	r2, [r7, #4]
 80048c8:	70fb      	strb	r3, [r7, #3]
	USART_TypeDef* USARTx = huart->Instance;
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	613b      	str	r3, [r7, #16]
	if (usart_message_ready(USARTx,delimiter))
 80048d0:	78fb      	ldrb	r3, [r7, #3]
 80048d2:	4619      	mov	r1, r3
 80048d4:	6938      	ldr	r0, [r7, #16]
 80048d6:	f7ff ff9b 	bl	8004810 <usart_message_ready>
 80048da:	4603      	mov	r3, r0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d018      	beq.n	8004912 <read_usart_message+0x56>
	{
		int nr = 0;
 80048e0:	2300      	movs	r3, #0
 80048e2:	617b      	str	r3, [r7, #20]
		do
		{
			*dst = get_from_rx_buffer(USARTx);
 80048e4:	6938      	ldr	r0, [r7, #16]
 80048e6:	f7ff ff59 	bl	800479c <get_from_rx_buffer>
 80048ea:	4603      	mov	r3, r0
 80048ec:	461a      	mov	r2, r3
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	701a      	strb	r2, [r3, #0]
			++nr;
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	3301      	adds	r3, #1
 80048f6:	617b      	str	r3, [r7, #20]
		} while (*dst++ != delimiter && nr < max_len);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	1c5a      	adds	r2, r3, #1
 80048fc:	60fa      	str	r2, [r7, #12]
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	78fa      	ldrb	r2, [r7, #3]
 8004902:	429a      	cmp	r2, r3
 8004904:	d003      	beq.n	800490e <read_usart_message+0x52>
 8004906:	697a      	ldr	r2, [r7, #20]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	429a      	cmp	r2, r3
 800490c:	dbea      	blt.n	80048e4 <read_usart_message+0x28>

		return nr;
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	e000      	b.n	8004914 <read_usart_message+0x58>
	}
	return 0;
 8004912:	2300      	movs	r3, #0
}
 8004914:	4618      	mov	r0, r3
 8004916:	3718      	adds	r7, #24
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}

0800491c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800491c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004954 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004920:	480d      	ldr	r0, [pc, #52]	; (8004958 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004922:	490e      	ldr	r1, [pc, #56]	; (800495c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004924:	4a0e      	ldr	r2, [pc, #56]	; (8004960 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004926:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004928:	e002      	b.n	8004930 <LoopCopyDataInit>

0800492a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800492a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800492c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800492e:	3304      	adds	r3, #4

08004930 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004930:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004932:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004934:	d3f9      	bcc.n	800492a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004936:	4a0b      	ldr	r2, [pc, #44]	; (8004964 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004938:	4c0b      	ldr	r4, [pc, #44]	; (8004968 <LoopFillZerobss+0x26>)
  movs r3, #0
 800493a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800493c:	e001      	b.n	8004942 <LoopFillZerobss>

0800493e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800493e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004940:	3204      	adds	r2, #4

08004942 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004942:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004944:	d3fb      	bcc.n	800493e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004946:	f7ff fe79 	bl	800463c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800494a:	f004 f873 	bl	8008a34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800494e:	f7fe fb97 	bl	8003080 <main>
  bx  lr    
 8004952:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004954:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004958:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800495c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8004960:	0800a82c 	.word	0x0800a82c
  ldr r2, =_sbss
 8004964:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8004968:	2000604c 	.word	0x2000604c

0800496c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800496c:	e7fe      	b.n	800496c <ADC_IRQHandler>
	...

08004970 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004974:	4b0e      	ldr	r3, [pc, #56]	; (80049b0 <HAL_Init+0x40>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a0d      	ldr	r2, [pc, #52]	; (80049b0 <HAL_Init+0x40>)
 800497a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800497e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004980:	4b0b      	ldr	r3, [pc, #44]	; (80049b0 <HAL_Init+0x40>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a0a      	ldr	r2, [pc, #40]	; (80049b0 <HAL_Init+0x40>)
 8004986:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800498a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800498c:	4b08      	ldr	r3, [pc, #32]	; (80049b0 <HAL_Init+0x40>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a07      	ldr	r2, [pc, #28]	; (80049b0 <HAL_Init+0x40>)
 8004992:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004996:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004998:	2003      	movs	r0, #3
 800499a:	f000 f94f 	bl	8004c3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800499e:	2000      	movs	r0, #0
 80049a0:	f000 f808 	bl	80049b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80049a4:	f7ff fae0 	bl	8003f68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80049a8:	2300      	movs	r3, #0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	40023c00 	.word	0x40023c00

080049b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b082      	sub	sp, #8
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80049bc:	4b12      	ldr	r3, [pc, #72]	; (8004a08 <HAL_InitTick+0x54>)
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	4b12      	ldr	r3, [pc, #72]	; (8004a0c <HAL_InitTick+0x58>)
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	4619      	mov	r1, r3
 80049c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80049ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80049ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80049d2:	4618      	mov	r0, r3
 80049d4:	f000 f967 	bl	8004ca6 <HAL_SYSTICK_Config>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d001      	beq.n	80049e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e00e      	b.n	8004a00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2b0f      	cmp	r3, #15
 80049e6:	d80a      	bhi.n	80049fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80049e8:	2200      	movs	r2, #0
 80049ea:	6879      	ldr	r1, [r7, #4]
 80049ec:	f04f 30ff 	mov.w	r0, #4294967295
 80049f0:	f000 f92f 	bl	8004c52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80049f4:	4a06      	ldr	r2, [pc, #24]	; (8004a10 <HAL_InitTick+0x5c>)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80049fa:	2300      	movs	r3, #0
 80049fc:	e000      	b.n	8004a00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3708      	adds	r7, #8
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	20000010 	.word	0x20000010
 8004a0c:	20000020 	.word	0x20000020
 8004a10:	2000001c 	.word	0x2000001c

08004a14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004a14:	b480      	push	{r7}
 8004a16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004a18:	4b06      	ldr	r3, [pc, #24]	; (8004a34 <HAL_IncTick+0x20>)
 8004a1a:	781b      	ldrb	r3, [r3, #0]
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	4b06      	ldr	r3, [pc, #24]	; (8004a38 <HAL_IncTick+0x24>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4413      	add	r3, r2
 8004a24:	4a04      	ldr	r2, [pc, #16]	; (8004a38 <HAL_IncTick+0x24>)
 8004a26:	6013      	str	r3, [r2, #0]
}
 8004a28:	bf00      	nop
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr
 8004a32:	bf00      	nop
 8004a34:	20000020 	.word	0x20000020
 8004a38:	20006038 	.word	0x20006038

08004a3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	af00      	add	r7, sp, #0
  return uwTick;
 8004a40:	4b03      	ldr	r3, [pc, #12]	; (8004a50 <HAL_GetTick+0x14>)
 8004a42:	681b      	ldr	r3, [r3, #0]
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr
 8004a4e:	bf00      	nop
 8004a50:	20006038 	.word	0x20006038

08004a54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004a5c:	f7ff ffee 	bl	8004a3c <HAL_GetTick>
 8004a60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a6c:	d005      	beq.n	8004a7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004a6e:	4b0a      	ldr	r3, [pc, #40]	; (8004a98 <HAL_Delay+0x44>)
 8004a70:	781b      	ldrb	r3, [r3, #0]
 8004a72:	461a      	mov	r2, r3
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	4413      	add	r3, r2
 8004a78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004a7a:	bf00      	nop
 8004a7c:	f7ff ffde 	bl	8004a3c <HAL_GetTick>
 8004a80:	4602      	mov	r2, r0
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	68fa      	ldr	r2, [r7, #12]
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d8f7      	bhi.n	8004a7c <HAL_Delay+0x28>
  {
  }
}
 8004a8c:	bf00      	nop
 8004a8e:	bf00      	nop
 8004a90:	3710      	adds	r7, #16
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	bf00      	nop
 8004a98:	20000020 	.word	0x20000020

08004a9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b085      	sub	sp, #20
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f003 0307 	and.w	r3, r3, #7
 8004aaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004aac:	4b0c      	ldr	r3, [pc, #48]	; (8004ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ab2:	68ba      	ldr	r2, [r7, #8]
 8004ab4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004ab8:	4013      	ands	r3, r2
 8004aba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004ac4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004ac8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004acc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004ace:	4a04      	ldr	r2, [pc, #16]	; (8004ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	60d3      	str	r3, [r2, #12]
}
 8004ad4:	bf00      	nop
 8004ad6:	3714      	adds	r7, #20
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr
 8004ae0:	e000ed00 	.word	0xe000ed00

08004ae4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ae8:	4b04      	ldr	r3, [pc, #16]	; (8004afc <__NVIC_GetPriorityGrouping+0x18>)
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	0a1b      	lsrs	r3, r3, #8
 8004aee:	f003 0307 	and.w	r3, r3, #7
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr
 8004afc:	e000ed00 	.word	0xe000ed00

08004b00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	4603      	mov	r3, r0
 8004b08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	db0b      	blt.n	8004b2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b12:	79fb      	ldrb	r3, [r7, #7]
 8004b14:	f003 021f 	and.w	r2, r3, #31
 8004b18:	4907      	ldr	r1, [pc, #28]	; (8004b38 <__NVIC_EnableIRQ+0x38>)
 8004b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b1e:	095b      	lsrs	r3, r3, #5
 8004b20:	2001      	movs	r0, #1
 8004b22:	fa00 f202 	lsl.w	r2, r0, r2
 8004b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004b2a:	bf00      	nop
 8004b2c:	370c      	adds	r7, #12
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
 8004b36:	bf00      	nop
 8004b38:	e000e100 	.word	0xe000e100

08004b3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	4603      	mov	r3, r0
 8004b44:	6039      	str	r1, [r7, #0]
 8004b46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	db0a      	blt.n	8004b66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	b2da      	uxtb	r2, r3
 8004b54:	490c      	ldr	r1, [pc, #48]	; (8004b88 <__NVIC_SetPriority+0x4c>)
 8004b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b5a:	0112      	lsls	r2, r2, #4
 8004b5c:	b2d2      	uxtb	r2, r2
 8004b5e:	440b      	add	r3, r1
 8004b60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b64:	e00a      	b.n	8004b7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	b2da      	uxtb	r2, r3
 8004b6a:	4908      	ldr	r1, [pc, #32]	; (8004b8c <__NVIC_SetPriority+0x50>)
 8004b6c:	79fb      	ldrb	r3, [r7, #7]
 8004b6e:	f003 030f 	and.w	r3, r3, #15
 8004b72:	3b04      	subs	r3, #4
 8004b74:	0112      	lsls	r2, r2, #4
 8004b76:	b2d2      	uxtb	r2, r2
 8004b78:	440b      	add	r3, r1
 8004b7a:	761a      	strb	r2, [r3, #24]
}
 8004b7c:	bf00      	nop
 8004b7e:	370c      	adds	r7, #12
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr
 8004b88:	e000e100 	.word	0xe000e100
 8004b8c:	e000ed00 	.word	0xe000ed00

08004b90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b089      	sub	sp, #36	; 0x24
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f003 0307 	and.w	r3, r3, #7
 8004ba2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	f1c3 0307 	rsb	r3, r3, #7
 8004baa:	2b04      	cmp	r3, #4
 8004bac:	bf28      	it	cs
 8004bae:	2304      	movcs	r3, #4
 8004bb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004bb2:	69fb      	ldr	r3, [r7, #28]
 8004bb4:	3304      	adds	r3, #4
 8004bb6:	2b06      	cmp	r3, #6
 8004bb8:	d902      	bls.n	8004bc0 <NVIC_EncodePriority+0x30>
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	3b03      	subs	r3, #3
 8004bbe:	e000      	b.n	8004bc2 <NVIC_EncodePriority+0x32>
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	fa02 f303 	lsl.w	r3, r2, r3
 8004bce:	43da      	mvns	r2, r3
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	401a      	ands	r2, r3
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004bd8:	f04f 31ff 	mov.w	r1, #4294967295
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	fa01 f303 	lsl.w	r3, r1, r3
 8004be2:	43d9      	mvns	r1, r3
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004be8:	4313      	orrs	r3, r2
         );
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3724      	adds	r7, #36	; 0x24
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr
	...

08004bf8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	3b01      	subs	r3, #1
 8004c04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c08:	d301      	bcc.n	8004c0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e00f      	b.n	8004c2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c0e:	4a0a      	ldr	r2, [pc, #40]	; (8004c38 <SysTick_Config+0x40>)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	3b01      	subs	r3, #1
 8004c14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c16:	210f      	movs	r1, #15
 8004c18:	f04f 30ff 	mov.w	r0, #4294967295
 8004c1c:	f7ff ff8e 	bl	8004b3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c20:	4b05      	ldr	r3, [pc, #20]	; (8004c38 <SysTick_Config+0x40>)
 8004c22:	2200      	movs	r2, #0
 8004c24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c26:	4b04      	ldr	r3, [pc, #16]	; (8004c38 <SysTick_Config+0x40>)
 8004c28:	2207      	movs	r2, #7
 8004c2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004c2c:	2300      	movs	r3, #0
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3708      	adds	r7, #8
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop
 8004c38:	e000e010 	.word	0xe000e010

08004c3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b082      	sub	sp, #8
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f7ff ff29 	bl	8004a9c <__NVIC_SetPriorityGrouping>
}
 8004c4a:	bf00      	nop
 8004c4c:	3708      	adds	r7, #8
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}

08004c52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004c52:	b580      	push	{r7, lr}
 8004c54:	b086      	sub	sp, #24
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	4603      	mov	r3, r0
 8004c5a:	60b9      	str	r1, [r7, #8]
 8004c5c:	607a      	str	r2, [r7, #4]
 8004c5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004c60:	2300      	movs	r3, #0
 8004c62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004c64:	f7ff ff3e 	bl	8004ae4 <__NVIC_GetPriorityGrouping>
 8004c68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	68b9      	ldr	r1, [r7, #8]
 8004c6e:	6978      	ldr	r0, [r7, #20]
 8004c70:	f7ff ff8e 	bl	8004b90 <NVIC_EncodePriority>
 8004c74:	4602      	mov	r2, r0
 8004c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c7a:	4611      	mov	r1, r2
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f7ff ff5d 	bl	8004b3c <__NVIC_SetPriority>
}
 8004c82:	bf00      	nop
 8004c84:	3718      	adds	r7, #24
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}

08004c8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c8a:	b580      	push	{r7, lr}
 8004c8c:	b082      	sub	sp, #8
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	4603      	mov	r3, r0
 8004c92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f7ff ff31 	bl	8004b00 <__NVIC_EnableIRQ>
}
 8004c9e:	bf00      	nop
 8004ca0:	3708      	adds	r7, #8
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}

08004ca6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004ca6:	b580      	push	{r7, lr}
 8004ca8:	b082      	sub	sp, #8
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f7ff ffa2 	bl	8004bf8 <SysTick_Config>
 8004cb4:	4603      	mov	r3, r0
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3708      	adds	r7, #8
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}

08004cbe <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004cbe:	b580      	push	{r7, lr}
 8004cc0:	b084      	sub	sp, #16
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cca:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004ccc:	f7ff feb6 	bl	8004a3c <HAL_GetTick>
 8004cd0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d008      	beq.n	8004cf0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2280      	movs	r2, #128	; 0x80
 8004ce2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e052      	b.n	8004d96 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f022 0216 	bic.w	r2, r2, #22
 8004cfe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	695a      	ldr	r2, [r3, #20]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d0e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d103      	bne.n	8004d20 <HAL_DMA_Abort+0x62>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d007      	beq.n	8004d30 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f022 0208 	bic.w	r2, r2, #8
 8004d2e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f022 0201 	bic.w	r2, r2, #1
 8004d3e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d40:	e013      	b.n	8004d6a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004d42:	f7ff fe7b 	bl	8004a3c <HAL_GetTick>
 8004d46:	4602      	mov	r2, r0
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	1ad3      	subs	r3, r2, r3
 8004d4c:	2b05      	cmp	r3, #5
 8004d4e:	d90c      	bls.n	8004d6a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2220      	movs	r2, #32
 8004d54:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2203      	movs	r2, #3
 8004d5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	e015      	b.n	8004d96 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 0301 	and.w	r3, r3, #1
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d1e4      	bne.n	8004d42 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d7c:	223f      	movs	r2, #63	; 0x3f
 8004d7e:	409a      	lsls	r2, r3
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2201      	movs	r2, #1
 8004d88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004d94:	2300      	movs	r3, #0
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3710      	adds	r7, #16
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}

08004d9e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004d9e:	b480      	push	{r7}
 8004da0:	b083      	sub	sp, #12
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	d004      	beq.n	8004dbc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2280      	movs	r2, #128	; 0x80
 8004db6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	e00c      	b.n	8004dd6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2205      	movs	r2, #5
 8004dc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f022 0201 	bic.w	r2, r2, #1
 8004dd2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004dd4:	2300      	movs	r3, #0
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	370c      	adds	r7, #12
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
	...

08004de4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b089      	sub	sp, #36	; 0x24
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004dee:	2300      	movs	r3, #0
 8004df0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004df2:	2300      	movs	r3, #0
 8004df4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004df6:	2300      	movs	r3, #0
 8004df8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	61fb      	str	r3, [r7, #28]
 8004dfe:	e16b      	b.n	80050d8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004e00:	2201      	movs	r2, #1
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	fa02 f303 	lsl.w	r3, r2, r3
 8004e08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	697a      	ldr	r2, [r7, #20]
 8004e10:	4013      	ands	r3, r2
 8004e12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004e14:	693a      	ldr	r2, [r7, #16]
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	f040 815a 	bne.w	80050d2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	f003 0303 	and.w	r3, r3, #3
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d005      	beq.n	8004e36 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004e32:	2b02      	cmp	r3, #2
 8004e34:	d130      	bne.n	8004e98 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	005b      	lsls	r3, r3, #1
 8004e40:	2203      	movs	r2, #3
 8004e42:	fa02 f303 	lsl.w	r3, r2, r3
 8004e46:	43db      	mvns	r3, r3
 8004e48:	69ba      	ldr	r2, [r7, #24]
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	68da      	ldr	r2, [r3, #12]
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	005b      	lsls	r3, r3, #1
 8004e56:	fa02 f303 	lsl.w	r3, r2, r3
 8004e5a:	69ba      	ldr	r2, [r7, #24]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	69ba      	ldr	r2, [r7, #24]
 8004e64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	fa02 f303 	lsl.w	r3, r2, r3
 8004e74:	43db      	mvns	r3, r3
 8004e76:	69ba      	ldr	r2, [r7, #24]
 8004e78:	4013      	ands	r3, r2
 8004e7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	091b      	lsrs	r3, r3, #4
 8004e82:	f003 0201 	and.w	r2, r3, #1
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	fa02 f303 	lsl.w	r3, r2, r3
 8004e8c:	69ba      	ldr	r2, [r7, #24]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	69ba      	ldr	r2, [r7, #24]
 8004e96:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	f003 0303 	and.w	r3, r3, #3
 8004ea0:	2b03      	cmp	r3, #3
 8004ea2:	d017      	beq.n	8004ed4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004eaa:	69fb      	ldr	r3, [r7, #28]
 8004eac:	005b      	lsls	r3, r3, #1
 8004eae:	2203      	movs	r2, #3
 8004eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb4:	43db      	mvns	r3, r3
 8004eb6:	69ba      	ldr	r2, [r7, #24]
 8004eb8:	4013      	ands	r3, r2
 8004eba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	689a      	ldr	r2, [r3, #8]
 8004ec0:	69fb      	ldr	r3, [r7, #28]
 8004ec2:	005b      	lsls	r3, r3, #1
 8004ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec8:	69ba      	ldr	r2, [r7, #24]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	69ba      	ldr	r2, [r7, #24]
 8004ed2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	f003 0303 	and.w	r3, r3, #3
 8004edc:	2b02      	cmp	r3, #2
 8004ede:	d123      	bne.n	8004f28 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004ee0:	69fb      	ldr	r3, [r7, #28]
 8004ee2:	08da      	lsrs	r2, r3, #3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	3208      	adds	r2, #8
 8004ee8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004eec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004eee:	69fb      	ldr	r3, [r7, #28]
 8004ef0:	f003 0307 	and.w	r3, r3, #7
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	220f      	movs	r2, #15
 8004ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8004efc:	43db      	mvns	r3, r3
 8004efe:	69ba      	ldr	r2, [r7, #24]
 8004f00:	4013      	ands	r3, r2
 8004f02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	691a      	ldr	r2, [r3, #16]
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	f003 0307 	and.w	r3, r3, #7
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	fa02 f303 	lsl.w	r3, r2, r3
 8004f14:	69ba      	ldr	r2, [r7, #24]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	08da      	lsrs	r2, r3, #3
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	3208      	adds	r2, #8
 8004f22:	69b9      	ldr	r1, [r7, #24]
 8004f24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	005b      	lsls	r3, r3, #1
 8004f32:	2203      	movs	r2, #3
 8004f34:	fa02 f303 	lsl.w	r3, r2, r3
 8004f38:	43db      	mvns	r3, r3
 8004f3a:	69ba      	ldr	r2, [r7, #24]
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	f003 0203 	and.w	r2, r3, #3
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	005b      	lsls	r3, r3, #1
 8004f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f50:	69ba      	ldr	r2, [r7, #24]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	69ba      	ldr	r2, [r7, #24]
 8004f5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	f000 80b4 	beq.w	80050d2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	60fb      	str	r3, [r7, #12]
 8004f6e:	4b60      	ldr	r3, [pc, #384]	; (80050f0 <HAL_GPIO_Init+0x30c>)
 8004f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f72:	4a5f      	ldr	r2, [pc, #380]	; (80050f0 <HAL_GPIO_Init+0x30c>)
 8004f74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f78:	6453      	str	r3, [r2, #68]	; 0x44
 8004f7a:	4b5d      	ldr	r3, [pc, #372]	; (80050f0 <HAL_GPIO_Init+0x30c>)
 8004f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f82:	60fb      	str	r3, [r7, #12]
 8004f84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f86:	4a5b      	ldr	r2, [pc, #364]	; (80050f4 <HAL_GPIO_Init+0x310>)
 8004f88:	69fb      	ldr	r3, [r7, #28]
 8004f8a:	089b      	lsrs	r3, r3, #2
 8004f8c:	3302      	adds	r3, #2
 8004f8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004f94:	69fb      	ldr	r3, [r7, #28]
 8004f96:	f003 0303 	and.w	r3, r3, #3
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	220f      	movs	r2, #15
 8004f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa2:	43db      	mvns	r3, r3
 8004fa4:	69ba      	ldr	r2, [r7, #24]
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a52      	ldr	r2, [pc, #328]	; (80050f8 <HAL_GPIO_Init+0x314>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d02b      	beq.n	800500a <HAL_GPIO_Init+0x226>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a51      	ldr	r2, [pc, #324]	; (80050fc <HAL_GPIO_Init+0x318>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d025      	beq.n	8005006 <HAL_GPIO_Init+0x222>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a50      	ldr	r2, [pc, #320]	; (8005100 <HAL_GPIO_Init+0x31c>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d01f      	beq.n	8005002 <HAL_GPIO_Init+0x21e>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a4f      	ldr	r2, [pc, #316]	; (8005104 <HAL_GPIO_Init+0x320>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d019      	beq.n	8004ffe <HAL_GPIO_Init+0x21a>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4a4e      	ldr	r2, [pc, #312]	; (8005108 <HAL_GPIO_Init+0x324>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d013      	beq.n	8004ffa <HAL_GPIO_Init+0x216>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a4d      	ldr	r2, [pc, #308]	; (800510c <HAL_GPIO_Init+0x328>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d00d      	beq.n	8004ff6 <HAL_GPIO_Init+0x212>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a4c      	ldr	r2, [pc, #304]	; (8005110 <HAL_GPIO_Init+0x32c>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d007      	beq.n	8004ff2 <HAL_GPIO_Init+0x20e>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a4b      	ldr	r2, [pc, #300]	; (8005114 <HAL_GPIO_Init+0x330>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d101      	bne.n	8004fee <HAL_GPIO_Init+0x20a>
 8004fea:	2307      	movs	r3, #7
 8004fec:	e00e      	b.n	800500c <HAL_GPIO_Init+0x228>
 8004fee:	2308      	movs	r3, #8
 8004ff0:	e00c      	b.n	800500c <HAL_GPIO_Init+0x228>
 8004ff2:	2306      	movs	r3, #6
 8004ff4:	e00a      	b.n	800500c <HAL_GPIO_Init+0x228>
 8004ff6:	2305      	movs	r3, #5
 8004ff8:	e008      	b.n	800500c <HAL_GPIO_Init+0x228>
 8004ffa:	2304      	movs	r3, #4
 8004ffc:	e006      	b.n	800500c <HAL_GPIO_Init+0x228>
 8004ffe:	2303      	movs	r3, #3
 8005000:	e004      	b.n	800500c <HAL_GPIO_Init+0x228>
 8005002:	2302      	movs	r3, #2
 8005004:	e002      	b.n	800500c <HAL_GPIO_Init+0x228>
 8005006:	2301      	movs	r3, #1
 8005008:	e000      	b.n	800500c <HAL_GPIO_Init+0x228>
 800500a:	2300      	movs	r3, #0
 800500c:	69fa      	ldr	r2, [r7, #28]
 800500e:	f002 0203 	and.w	r2, r2, #3
 8005012:	0092      	lsls	r2, r2, #2
 8005014:	4093      	lsls	r3, r2
 8005016:	69ba      	ldr	r2, [r7, #24]
 8005018:	4313      	orrs	r3, r2
 800501a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800501c:	4935      	ldr	r1, [pc, #212]	; (80050f4 <HAL_GPIO_Init+0x310>)
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	089b      	lsrs	r3, r3, #2
 8005022:	3302      	adds	r3, #2
 8005024:	69ba      	ldr	r2, [r7, #24]
 8005026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800502a:	4b3b      	ldr	r3, [pc, #236]	; (8005118 <HAL_GPIO_Init+0x334>)
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	43db      	mvns	r3, r3
 8005034:	69ba      	ldr	r2, [r7, #24]
 8005036:	4013      	ands	r3, r2
 8005038:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005042:	2b00      	cmp	r3, #0
 8005044:	d003      	beq.n	800504e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005046:	69ba      	ldr	r2, [r7, #24]
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	4313      	orrs	r3, r2
 800504c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800504e:	4a32      	ldr	r2, [pc, #200]	; (8005118 <HAL_GPIO_Init+0x334>)
 8005050:	69bb      	ldr	r3, [r7, #24]
 8005052:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005054:	4b30      	ldr	r3, [pc, #192]	; (8005118 <HAL_GPIO_Init+0x334>)
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	43db      	mvns	r3, r3
 800505e:	69ba      	ldr	r2, [r7, #24]
 8005060:	4013      	ands	r3, r2
 8005062:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800506c:	2b00      	cmp	r3, #0
 800506e:	d003      	beq.n	8005078 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005070:	69ba      	ldr	r2, [r7, #24]
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	4313      	orrs	r3, r2
 8005076:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005078:	4a27      	ldr	r2, [pc, #156]	; (8005118 <HAL_GPIO_Init+0x334>)
 800507a:	69bb      	ldr	r3, [r7, #24]
 800507c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800507e:	4b26      	ldr	r3, [pc, #152]	; (8005118 <HAL_GPIO_Init+0x334>)
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	43db      	mvns	r3, r3
 8005088:	69ba      	ldr	r2, [r7, #24]
 800508a:	4013      	ands	r3, r2
 800508c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d003      	beq.n	80050a2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800509a:	69ba      	ldr	r2, [r7, #24]
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	4313      	orrs	r3, r2
 80050a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80050a2:	4a1d      	ldr	r2, [pc, #116]	; (8005118 <HAL_GPIO_Init+0x334>)
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80050a8:	4b1b      	ldr	r3, [pc, #108]	; (8005118 <HAL_GPIO_Init+0x334>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	43db      	mvns	r3, r3
 80050b2:	69ba      	ldr	r2, [r7, #24]
 80050b4:	4013      	ands	r3, r2
 80050b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d003      	beq.n	80050cc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80050c4:	69ba      	ldr	r2, [r7, #24]
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80050cc:	4a12      	ldr	r2, [pc, #72]	; (8005118 <HAL_GPIO_Init+0x334>)
 80050ce:	69bb      	ldr	r3, [r7, #24]
 80050d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	3301      	adds	r3, #1
 80050d6:	61fb      	str	r3, [r7, #28]
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	2b0f      	cmp	r3, #15
 80050dc:	f67f ae90 	bls.w	8004e00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80050e0:	bf00      	nop
 80050e2:	bf00      	nop
 80050e4:	3724      	adds	r7, #36	; 0x24
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr
 80050ee:	bf00      	nop
 80050f0:	40023800 	.word	0x40023800
 80050f4:	40013800 	.word	0x40013800
 80050f8:	40020000 	.word	0x40020000
 80050fc:	40020400 	.word	0x40020400
 8005100:	40020800 	.word	0x40020800
 8005104:	40020c00 	.word	0x40020c00
 8005108:	40021000 	.word	0x40021000
 800510c:	40021400 	.word	0x40021400
 8005110:	40021800 	.word	0x40021800
 8005114:	40021c00 	.word	0x40021c00
 8005118:	40013c00 	.word	0x40013c00

0800511c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800511c:	b480      	push	{r7}
 800511e:	b083      	sub	sp, #12
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	460b      	mov	r3, r1
 8005126:	807b      	strh	r3, [r7, #2]
 8005128:	4613      	mov	r3, r2
 800512a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800512c:	787b      	ldrb	r3, [r7, #1]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d003      	beq.n	800513a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005132:	887a      	ldrh	r2, [r7, #2]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005138:	e003      	b.n	8005142 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800513a:	887b      	ldrh	r3, [r7, #2]
 800513c:	041a      	lsls	r2, r3, #16
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	619a      	str	r2, [r3, #24]
}
 8005142:	bf00      	nop
 8005144:	370c      	adds	r7, #12
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr
	...

08005150 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b082      	sub	sp, #8
 8005154:	af00      	add	r7, sp, #0
 8005156:	4603      	mov	r3, r0
 8005158:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800515a:	4b08      	ldr	r3, [pc, #32]	; (800517c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800515c:	695a      	ldr	r2, [r3, #20]
 800515e:	88fb      	ldrh	r3, [r7, #6]
 8005160:	4013      	ands	r3, r2
 8005162:	2b00      	cmp	r3, #0
 8005164:	d006      	beq.n	8005174 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005166:	4a05      	ldr	r2, [pc, #20]	; (800517c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005168:	88fb      	ldrh	r3, [r7, #6]
 800516a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800516c:	88fb      	ldrh	r3, [r7, #6]
 800516e:	4618      	mov	r0, r3
 8005170:	f7fc fbc8 	bl	8001904 <HAL_GPIO_EXTI_Callback>
  }
}
 8005174:	bf00      	nop
 8005176:	3708      	adds	r7, #8
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}
 800517c:	40013c00 	.word	0x40013c00

08005180 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d101      	bne.n	8005192 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e12b      	b.n	80053ea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005198:	b2db      	uxtb	r3, r3
 800519a:	2b00      	cmp	r3, #0
 800519c:	d106      	bne.n	80051ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f7fe ff06 	bl	8003fb8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2224      	movs	r2, #36	; 0x24
 80051b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f022 0201 	bic.w	r2, r2, #1
 80051c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80051d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80051e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80051e4:	f001 fd56 	bl	8006c94 <HAL_RCC_GetPCLK1Freq>
 80051e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	4a81      	ldr	r2, [pc, #516]	; (80053f4 <HAL_I2C_Init+0x274>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d807      	bhi.n	8005204 <HAL_I2C_Init+0x84>
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	4a80      	ldr	r2, [pc, #512]	; (80053f8 <HAL_I2C_Init+0x278>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	bf94      	ite	ls
 80051fc:	2301      	movls	r3, #1
 80051fe:	2300      	movhi	r3, #0
 8005200:	b2db      	uxtb	r3, r3
 8005202:	e006      	b.n	8005212 <HAL_I2C_Init+0x92>
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	4a7d      	ldr	r2, [pc, #500]	; (80053fc <HAL_I2C_Init+0x27c>)
 8005208:	4293      	cmp	r3, r2
 800520a:	bf94      	ite	ls
 800520c:	2301      	movls	r3, #1
 800520e:	2300      	movhi	r3, #0
 8005210:	b2db      	uxtb	r3, r3
 8005212:	2b00      	cmp	r3, #0
 8005214:	d001      	beq.n	800521a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e0e7      	b.n	80053ea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	4a78      	ldr	r2, [pc, #480]	; (8005400 <HAL_I2C_Init+0x280>)
 800521e:	fba2 2303 	umull	r2, r3, r2, r3
 8005222:	0c9b      	lsrs	r3, r3, #18
 8005224:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	68ba      	ldr	r2, [r7, #8]
 8005236:	430a      	orrs	r2, r1
 8005238:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	6a1b      	ldr	r3, [r3, #32]
 8005240:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	4a6a      	ldr	r2, [pc, #424]	; (80053f4 <HAL_I2C_Init+0x274>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d802      	bhi.n	8005254 <HAL_I2C_Init+0xd4>
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	3301      	adds	r3, #1
 8005252:	e009      	b.n	8005268 <HAL_I2C_Init+0xe8>
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800525a:	fb02 f303 	mul.w	r3, r2, r3
 800525e:	4a69      	ldr	r2, [pc, #420]	; (8005404 <HAL_I2C_Init+0x284>)
 8005260:	fba2 2303 	umull	r2, r3, r2, r3
 8005264:	099b      	lsrs	r3, r3, #6
 8005266:	3301      	adds	r3, #1
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	6812      	ldr	r2, [r2, #0]
 800526c:	430b      	orrs	r3, r1
 800526e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	69db      	ldr	r3, [r3, #28]
 8005276:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800527a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	495c      	ldr	r1, [pc, #368]	; (80053f4 <HAL_I2C_Init+0x274>)
 8005284:	428b      	cmp	r3, r1
 8005286:	d819      	bhi.n	80052bc <HAL_I2C_Init+0x13c>
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	1e59      	subs	r1, r3, #1
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	005b      	lsls	r3, r3, #1
 8005292:	fbb1 f3f3 	udiv	r3, r1, r3
 8005296:	1c59      	adds	r1, r3, #1
 8005298:	f640 73fc 	movw	r3, #4092	; 0xffc
 800529c:	400b      	ands	r3, r1
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d00a      	beq.n	80052b8 <HAL_I2C_Init+0x138>
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	1e59      	subs	r1, r3, #1
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	005b      	lsls	r3, r3, #1
 80052ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80052b0:	3301      	adds	r3, #1
 80052b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052b6:	e051      	b.n	800535c <HAL_I2C_Init+0x1dc>
 80052b8:	2304      	movs	r3, #4
 80052ba:	e04f      	b.n	800535c <HAL_I2C_Init+0x1dc>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d111      	bne.n	80052e8 <HAL_I2C_Init+0x168>
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	1e58      	subs	r0, r3, #1
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6859      	ldr	r1, [r3, #4]
 80052cc:	460b      	mov	r3, r1
 80052ce:	005b      	lsls	r3, r3, #1
 80052d0:	440b      	add	r3, r1
 80052d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80052d6:	3301      	adds	r3, #1
 80052d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052dc:	2b00      	cmp	r3, #0
 80052de:	bf0c      	ite	eq
 80052e0:	2301      	moveq	r3, #1
 80052e2:	2300      	movne	r3, #0
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	e012      	b.n	800530e <HAL_I2C_Init+0x18e>
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	1e58      	subs	r0, r3, #1
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6859      	ldr	r1, [r3, #4]
 80052f0:	460b      	mov	r3, r1
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	440b      	add	r3, r1
 80052f6:	0099      	lsls	r1, r3, #2
 80052f8:	440b      	add	r3, r1
 80052fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80052fe:	3301      	adds	r3, #1
 8005300:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005304:	2b00      	cmp	r3, #0
 8005306:	bf0c      	ite	eq
 8005308:	2301      	moveq	r3, #1
 800530a:	2300      	movne	r3, #0
 800530c:	b2db      	uxtb	r3, r3
 800530e:	2b00      	cmp	r3, #0
 8005310:	d001      	beq.n	8005316 <HAL_I2C_Init+0x196>
 8005312:	2301      	movs	r3, #1
 8005314:	e022      	b.n	800535c <HAL_I2C_Init+0x1dc>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d10e      	bne.n	800533c <HAL_I2C_Init+0x1bc>
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	1e58      	subs	r0, r3, #1
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6859      	ldr	r1, [r3, #4]
 8005326:	460b      	mov	r3, r1
 8005328:	005b      	lsls	r3, r3, #1
 800532a:	440b      	add	r3, r1
 800532c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005330:	3301      	adds	r3, #1
 8005332:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005336:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800533a:	e00f      	b.n	800535c <HAL_I2C_Init+0x1dc>
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	1e58      	subs	r0, r3, #1
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6859      	ldr	r1, [r3, #4]
 8005344:	460b      	mov	r3, r1
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	440b      	add	r3, r1
 800534a:	0099      	lsls	r1, r3, #2
 800534c:	440b      	add	r3, r1
 800534e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005352:	3301      	adds	r3, #1
 8005354:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005358:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800535c:	6879      	ldr	r1, [r7, #4]
 800535e:	6809      	ldr	r1, [r1, #0]
 8005360:	4313      	orrs	r3, r2
 8005362:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	69da      	ldr	r2, [r3, #28]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a1b      	ldr	r3, [r3, #32]
 8005376:	431a      	orrs	r2, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	430a      	orrs	r2, r1
 800537e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800538a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	6911      	ldr	r1, [r2, #16]
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	68d2      	ldr	r2, [r2, #12]
 8005396:	4311      	orrs	r1, r2
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	6812      	ldr	r2, [r2, #0]
 800539c:	430b      	orrs	r3, r1
 800539e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	695a      	ldr	r2, [r3, #20]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	699b      	ldr	r3, [r3, #24]
 80053b2:	431a      	orrs	r2, r3
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	430a      	orrs	r2, r1
 80053ba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f042 0201 	orr.w	r2, r2, #1
 80053ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2220      	movs	r2, #32
 80053d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80053e8:	2300      	movs	r3, #0
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3710      	adds	r7, #16
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
 80053f2:	bf00      	nop
 80053f4:	000186a0 	.word	0x000186a0
 80053f8:	001e847f 	.word	0x001e847f
 80053fc:	003d08ff 	.word	0x003d08ff
 8005400:	431bde83 	.word	0x431bde83
 8005404:	10624dd3 	.word	0x10624dd3

08005408 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b088      	sub	sp, #32
 800540c:	af02      	add	r7, sp, #8
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	607a      	str	r2, [r7, #4]
 8005412:	461a      	mov	r2, r3
 8005414:	460b      	mov	r3, r1
 8005416:	817b      	strh	r3, [r7, #10]
 8005418:	4613      	mov	r3, r2
 800541a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800541c:	f7ff fb0e 	bl	8004a3c <HAL_GetTick>
 8005420:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005428:	b2db      	uxtb	r3, r3
 800542a:	2b20      	cmp	r3, #32
 800542c:	f040 80e0 	bne.w	80055f0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	9300      	str	r3, [sp, #0]
 8005434:	2319      	movs	r3, #25
 8005436:	2201      	movs	r2, #1
 8005438:	4970      	ldr	r1, [pc, #448]	; (80055fc <HAL_I2C_Master_Transmit+0x1f4>)
 800543a:	68f8      	ldr	r0, [r7, #12]
 800543c:	f000 fe02 	bl	8006044 <I2C_WaitOnFlagUntilTimeout>
 8005440:	4603      	mov	r3, r0
 8005442:	2b00      	cmp	r3, #0
 8005444:	d001      	beq.n	800544a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005446:	2302      	movs	r3, #2
 8005448:	e0d3      	b.n	80055f2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005450:	2b01      	cmp	r3, #1
 8005452:	d101      	bne.n	8005458 <HAL_I2C_Master_Transmit+0x50>
 8005454:	2302      	movs	r3, #2
 8005456:	e0cc      	b.n	80055f2 <HAL_I2C_Master_Transmit+0x1ea>
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 0301 	and.w	r3, r3, #1
 800546a:	2b01      	cmp	r3, #1
 800546c:	d007      	beq.n	800547e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f042 0201 	orr.w	r2, r2, #1
 800547c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800548c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2221      	movs	r2, #33	; 0x21
 8005492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2210      	movs	r2, #16
 800549a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2200      	movs	r2, #0
 80054a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	893a      	ldrh	r2, [r7, #8]
 80054ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054b4:	b29a      	uxth	r2, r3
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	4a50      	ldr	r2, [pc, #320]	; (8005600 <HAL_I2C_Master_Transmit+0x1f8>)
 80054be:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80054c0:	8979      	ldrh	r1, [r7, #10]
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	6a3a      	ldr	r2, [r7, #32]
 80054c6:	68f8      	ldr	r0, [r7, #12]
 80054c8:	f000 fbbc 	bl	8005c44 <I2C_MasterRequestWrite>
 80054cc:	4603      	mov	r3, r0
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d001      	beq.n	80054d6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e08d      	b.n	80055f2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054d6:	2300      	movs	r3, #0
 80054d8:	613b      	str	r3, [r7, #16]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	695b      	ldr	r3, [r3, #20]
 80054e0:	613b      	str	r3, [r7, #16]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	699b      	ldr	r3, [r3, #24]
 80054e8:	613b      	str	r3, [r7, #16]
 80054ea:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80054ec:	e066      	b.n	80055bc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054ee:	697a      	ldr	r2, [r7, #20]
 80054f0:	6a39      	ldr	r1, [r7, #32]
 80054f2:	68f8      	ldr	r0, [r7, #12]
 80054f4:	f000 fe7c 	bl	80061f0 <I2C_WaitOnTXEFlagUntilTimeout>
 80054f8:	4603      	mov	r3, r0
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d00d      	beq.n	800551a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005502:	2b04      	cmp	r3, #4
 8005504:	d107      	bne.n	8005516 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005514:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e06b      	b.n	80055f2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551e:	781a      	ldrb	r2, [r3, #0]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552a:	1c5a      	adds	r2, r3, #1
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005534:	b29b      	uxth	r3, r3
 8005536:	3b01      	subs	r3, #1
 8005538:	b29a      	uxth	r2, r3
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005542:	3b01      	subs	r3, #1
 8005544:	b29a      	uxth	r2, r3
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	695b      	ldr	r3, [r3, #20]
 8005550:	f003 0304 	and.w	r3, r3, #4
 8005554:	2b04      	cmp	r3, #4
 8005556:	d11b      	bne.n	8005590 <HAL_I2C_Master_Transmit+0x188>
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800555c:	2b00      	cmp	r3, #0
 800555e:	d017      	beq.n	8005590 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005564:	781a      	ldrb	r2, [r3, #0]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005570:	1c5a      	adds	r2, r3, #1
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800557a:	b29b      	uxth	r3, r3
 800557c:	3b01      	subs	r3, #1
 800557e:	b29a      	uxth	r2, r3
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005588:	3b01      	subs	r3, #1
 800558a:	b29a      	uxth	r2, r3
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005590:	697a      	ldr	r2, [r7, #20]
 8005592:	6a39      	ldr	r1, [r7, #32]
 8005594:	68f8      	ldr	r0, [r7, #12]
 8005596:	f000 fe6c 	bl	8006272 <I2C_WaitOnBTFFlagUntilTimeout>
 800559a:	4603      	mov	r3, r0
 800559c:	2b00      	cmp	r3, #0
 800559e:	d00d      	beq.n	80055bc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a4:	2b04      	cmp	r3, #4
 80055a6:	d107      	bne.n	80055b8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055b6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	e01a      	b.n	80055f2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d194      	bne.n	80054ee <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2220      	movs	r2, #32
 80055d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2200      	movs	r2, #0
 80055e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80055ec:	2300      	movs	r3, #0
 80055ee:	e000      	b.n	80055f2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80055f0:	2302      	movs	r3, #2
  }
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3718      	adds	r7, #24
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop
 80055fc:	00100002 	.word	0x00100002
 8005600:	ffff0000 	.word	0xffff0000

08005604 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b088      	sub	sp, #32
 8005608:	af02      	add	r7, sp, #8
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	4608      	mov	r0, r1
 800560e:	4611      	mov	r1, r2
 8005610:	461a      	mov	r2, r3
 8005612:	4603      	mov	r3, r0
 8005614:	817b      	strh	r3, [r7, #10]
 8005616:	460b      	mov	r3, r1
 8005618:	813b      	strh	r3, [r7, #8]
 800561a:	4613      	mov	r3, r2
 800561c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800561e:	f7ff fa0d 	bl	8004a3c <HAL_GetTick>
 8005622:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800562a:	b2db      	uxtb	r3, r3
 800562c:	2b20      	cmp	r3, #32
 800562e:	f040 80d9 	bne.w	80057e4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	9300      	str	r3, [sp, #0]
 8005636:	2319      	movs	r3, #25
 8005638:	2201      	movs	r2, #1
 800563a:	496d      	ldr	r1, [pc, #436]	; (80057f0 <HAL_I2C_Mem_Write+0x1ec>)
 800563c:	68f8      	ldr	r0, [r7, #12]
 800563e:	f000 fd01 	bl	8006044 <I2C_WaitOnFlagUntilTimeout>
 8005642:	4603      	mov	r3, r0
 8005644:	2b00      	cmp	r3, #0
 8005646:	d001      	beq.n	800564c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005648:	2302      	movs	r3, #2
 800564a:	e0cc      	b.n	80057e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005652:	2b01      	cmp	r3, #1
 8005654:	d101      	bne.n	800565a <HAL_I2C_Mem_Write+0x56>
 8005656:	2302      	movs	r3, #2
 8005658:	e0c5      	b.n	80057e6 <HAL_I2C_Mem_Write+0x1e2>
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2201      	movs	r2, #1
 800565e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 0301 	and.w	r3, r3, #1
 800566c:	2b01      	cmp	r3, #1
 800566e:	d007      	beq.n	8005680 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f042 0201 	orr.w	r2, r2, #1
 800567e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800568e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2221      	movs	r2, #33	; 0x21
 8005694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2240      	movs	r2, #64	; 0x40
 800569c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2200      	movs	r2, #0
 80056a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	6a3a      	ldr	r2, [r7, #32]
 80056aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80056b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056b6:	b29a      	uxth	r2, r3
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	4a4d      	ldr	r2, [pc, #308]	; (80057f4 <HAL_I2C_Mem_Write+0x1f0>)
 80056c0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80056c2:	88f8      	ldrh	r0, [r7, #6]
 80056c4:	893a      	ldrh	r2, [r7, #8]
 80056c6:	8979      	ldrh	r1, [r7, #10]
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	9301      	str	r3, [sp, #4]
 80056cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ce:	9300      	str	r3, [sp, #0]
 80056d0:	4603      	mov	r3, r0
 80056d2:	68f8      	ldr	r0, [r7, #12]
 80056d4:	f000 fb38 	bl	8005d48 <I2C_RequestMemoryWrite>
 80056d8:	4603      	mov	r3, r0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d052      	beq.n	8005784 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	e081      	b.n	80057e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056e2:	697a      	ldr	r2, [r7, #20]
 80056e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80056e6:	68f8      	ldr	r0, [r7, #12]
 80056e8:	f000 fd82 	bl	80061f0 <I2C_WaitOnTXEFlagUntilTimeout>
 80056ec:	4603      	mov	r3, r0
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d00d      	beq.n	800570e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f6:	2b04      	cmp	r3, #4
 80056f8:	d107      	bne.n	800570a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005708:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e06b      	b.n	80057e6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005712:	781a      	ldrb	r2, [r3, #0]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800571e:	1c5a      	adds	r2, r3, #1
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005728:	3b01      	subs	r3, #1
 800572a:	b29a      	uxth	r2, r3
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005734:	b29b      	uxth	r3, r3
 8005736:	3b01      	subs	r3, #1
 8005738:	b29a      	uxth	r2, r3
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	695b      	ldr	r3, [r3, #20]
 8005744:	f003 0304 	and.w	r3, r3, #4
 8005748:	2b04      	cmp	r3, #4
 800574a:	d11b      	bne.n	8005784 <HAL_I2C_Mem_Write+0x180>
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005750:	2b00      	cmp	r3, #0
 8005752:	d017      	beq.n	8005784 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005758:	781a      	ldrb	r2, [r3, #0]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005764:	1c5a      	adds	r2, r3, #1
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800576e:	3b01      	subs	r3, #1
 8005770:	b29a      	uxth	r2, r3
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800577a:	b29b      	uxth	r3, r3
 800577c:	3b01      	subs	r3, #1
 800577e:	b29a      	uxth	r2, r3
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005788:	2b00      	cmp	r3, #0
 800578a:	d1aa      	bne.n	80056e2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800578c:	697a      	ldr	r2, [r7, #20]
 800578e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005790:	68f8      	ldr	r0, [r7, #12]
 8005792:	f000 fd6e 	bl	8006272 <I2C_WaitOnBTFFlagUntilTimeout>
 8005796:	4603      	mov	r3, r0
 8005798:	2b00      	cmp	r3, #0
 800579a:	d00d      	beq.n	80057b8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a0:	2b04      	cmp	r3, #4
 80057a2:	d107      	bne.n	80057b4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057b2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	e016      	b.n	80057e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2220      	movs	r2, #32
 80057cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2200      	movs	r2, #0
 80057d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2200      	movs	r2, #0
 80057dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80057e0:	2300      	movs	r3, #0
 80057e2:	e000      	b.n	80057e6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80057e4:	2302      	movs	r3, #2
  }
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3718      	adds	r7, #24
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
 80057ee:	bf00      	nop
 80057f0:	00100002 	.word	0x00100002
 80057f4:	ffff0000 	.word	0xffff0000

080057f8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b08c      	sub	sp, #48	; 0x30
 80057fc:	af02      	add	r7, sp, #8
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	4608      	mov	r0, r1
 8005802:	4611      	mov	r1, r2
 8005804:	461a      	mov	r2, r3
 8005806:	4603      	mov	r3, r0
 8005808:	817b      	strh	r3, [r7, #10]
 800580a:	460b      	mov	r3, r1
 800580c:	813b      	strh	r3, [r7, #8]
 800580e:	4613      	mov	r3, r2
 8005810:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005812:	f7ff f913 	bl	8004a3c <HAL_GetTick>
 8005816:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800581e:	b2db      	uxtb	r3, r3
 8005820:	2b20      	cmp	r3, #32
 8005822:	f040 8208 	bne.w	8005c36 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005828:	9300      	str	r3, [sp, #0]
 800582a:	2319      	movs	r3, #25
 800582c:	2201      	movs	r2, #1
 800582e:	497b      	ldr	r1, [pc, #492]	; (8005a1c <HAL_I2C_Mem_Read+0x224>)
 8005830:	68f8      	ldr	r0, [r7, #12]
 8005832:	f000 fc07 	bl	8006044 <I2C_WaitOnFlagUntilTimeout>
 8005836:	4603      	mov	r3, r0
 8005838:	2b00      	cmp	r3, #0
 800583a:	d001      	beq.n	8005840 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800583c:	2302      	movs	r3, #2
 800583e:	e1fb      	b.n	8005c38 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005846:	2b01      	cmp	r3, #1
 8005848:	d101      	bne.n	800584e <HAL_I2C_Mem_Read+0x56>
 800584a:	2302      	movs	r3, #2
 800584c:	e1f4      	b.n	8005c38 <HAL_I2C_Mem_Read+0x440>
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2201      	movs	r2, #1
 8005852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f003 0301 	and.w	r3, r3, #1
 8005860:	2b01      	cmp	r3, #1
 8005862:	d007      	beq.n	8005874 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f042 0201 	orr.w	r2, r2, #1
 8005872:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005882:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2222      	movs	r2, #34	; 0x22
 8005888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2240      	movs	r2, #64	; 0x40
 8005890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2200      	movs	r2, #0
 8005898:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800589e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80058a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058aa:	b29a      	uxth	r2, r3
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	4a5b      	ldr	r2, [pc, #364]	; (8005a20 <HAL_I2C_Mem_Read+0x228>)
 80058b4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80058b6:	88f8      	ldrh	r0, [r7, #6]
 80058b8:	893a      	ldrh	r2, [r7, #8]
 80058ba:	8979      	ldrh	r1, [r7, #10]
 80058bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058be:	9301      	str	r3, [sp, #4]
 80058c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058c2:	9300      	str	r3, [sp, #0]
 80058c4:	4603      	mov	r3, r0
 80058c6:	68f8      	ldr	r0, [r7, #12]
 80058c8:	f000 fad4 	bl	8005e74 <I2C_RequestMemoryRead>
 80058cc:	4603      	mov	r3, r0
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d001      	beq.n	80058d6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	e1b0      	b.n	8005c38 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d113      	bne.n	8005906 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058de:	2300      	movs	r3, #0
 80058e0:	623b      	str	r3, [r7, #32]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	695b      	ldr	r3, [r3, #20]
 80058e8:	623b      	str	r3, [r7, #32]
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	699b      	ldr	r3, [r3, #24]
 80058f0:	623b      	str	r3, [r7, #32]
 80058f2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005902:	601a      	str	r2, [r3, #0]
 8005904:	e184      	b.n	8005c10 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800590a:	2b01      	cmp	r3, #1
 800590c:	d11b      	bne.n	8005946 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800591c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800591e:	2300      	movs	r3, #0
 8005920:	61fb      	str	r3, [r7, #28]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	695b      	ldr	r3, [r3, #20]
 8005928:	61fb      	str	r3, [r7, #28]
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	699b      	ldr	r3, [r3, #24]
 8005930:	61fb      	str	r3, [r7, #28]
 8005932:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005942:	601a      	str	r2, [r3, #0]
 8005944:	e164      	b.n	8005c10 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800594a:	2b02      	cmp	r3, #2
 800594c:	d11b      	bne.n	8005986 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800595c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800596c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800596e:	2300      	movs	r3, #0
 8005970:	61bb      	str	r3, [r7, #24]
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	695b      	ldr	r3, [r3, #20]
 8005978:	61bb      	str	r3, [r7, #24]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	699b      	ldr	r3, [r3, #24]
 8005980:	61bb      	str	r3, [r7, #24]
 8005982:	69bb      	ldr	r3, [r7, #24]
 8005984:	e144      	b.n	8005c10 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005986:	2300      	movs	r3, #0
 8005988:	617b      	str	r3, [r7, #20]
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	695b      	ldr	r3, [r3, #20]
 8005990:	617b      	str	r3, [r7, #20]
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	699b      	ldr	r3, [r3, #24]
 8005998:	617b      	str	r3, [r7, #20]
 800599a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800599c:	e138      	b.n	8005c10 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059a2:	2b03      	cmp	r3, #3
 80059a4:	f200 80f1 	bhi.w	8005b8a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d123      	bne.n	80059f8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80059b4:	68f8      	ldr	r0, [r7, #12]
 80059b6:	f000 fc9d 	bl	80062f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80059ba:	4603      	mov	r3, r0
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d001      	beq.n	80059c4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	e139      	b.n	8005c38 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	691a      	ldr	r2, [r3, #16]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ce:	b2d2      	uxtb	r2, r2
 80059d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d6:	1c5a      	adds	r2, r3, #1
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059e0:	3b01      	subs	r3, #1
 80059e2:	b29a      	uxth	r2, r3
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	3b01      	subs	r3, #1
 80059f0:	b29a      	uxth	r2, r3
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80059f6:	e10b      	b.n	8005c10 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059fc:	2b02      	cmp	r3, #2
 80059fe:	d14e      	bne.n	8005a9e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a02:	9300      	str	r3, [sp, #0]
 8005a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a06:	2200      	movs	r2, #0
 8005a08:	4906      	ldr	r1, [pc, #24]	; (8005a24 <HAL_I2C_Mem_Read+0x22c>)
 8005a0a:	68f8      	ldr	r0, [r7, #12]
 8005a0c:	f000 fb1a 	bl	8006044 <I2C_WaitOnFlagUntilTimeout>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d008      	beq.n	8005a28 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e10e      	b.n	8005c38 <HAL_I2C_Mem_Read+0x440>
 8005a1a:	bf00      	nop
 8005a1c:	00100002 	.word	0x00100002
 8005a20:	ffff0000 	.word	0xffff0000
 8005a24:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	691a      	ldr	r2, [r3, #16]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a42:	b2d2      	uxtb	r2, r2
 8005a44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4a:	1c5a      	adds	r2, r3, #1
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a54:	3b01      	subs	r3, #1
 8005a56:	b29a      	uxth	r2, r3
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	3b01      	subs	r3, #1
 8005a64:	b29a      	uxth	r2, r3
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	691a      	ldr	r2, [r3, #16]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a74:	b2d2      	uxtb	r2, r2
 8005a76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a7c:	1c5a      	adds	r2, r3, #1
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a86:	3b01      	subs	r3, #1
 8005a88:	b29a      	uxth	r2, r3
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	3b01      	subs	r3, #1
 8005a96:	b29a      	uxth	r2, r3
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005a9c:	e0b8      	b.n	8005c10 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa0:	9300      	str	r3, [sp, #0]
 8005aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	4966      	ldr	r1, [pc, #408]	; (8005c40 <HAL_I2C_Mem_Read+0x448>)
 8005aa8:	68f8      	ldr	r0, [r7, #12]
 8005aaa:	f000 facb 	bl	8006044 <I2C_WaitOnFlagUntilTimeout>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d001      	beq.n	8005ab8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	e0bf      	b.n	8005c38 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ac6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	691a      	ldr	r2, [r3, #16]
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad2:	b2d2      	uxtb	r2, r2
 8005ad4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ada:	1c5a      	adds	r2, r3, #1
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ae4:	3b01      	subs	r3, #1
 8005ae6:	b29a      	uxth	r2, r3
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	3b01      	subs	r3, #1
 8005af4:	b29a      	uxth	r2, r3
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afc:	9300      	str	r3, [sp, #0]
 8005afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b00:	2200      	movs	r2, #0
 8005b02:	494f      	ldr	r1, [pc, #316]	; (8005c40 <HAL_I2C_Mem_Read+0x448>)
 8005b04:	68f8      	ldr	r0, [r7, #12]
 8005b06:	f000 fa9d 	bl	8006044 <I2C_WaitOnFlagUntilTimeout>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d001      	beq.n	8005b14 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	e091      	b.n	8005c38 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	691a      	ldr	r2, [r3, #16]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2e:	b2d2      	uxtb	r2, r2
 8005b30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b36:	1c5a      	adds	r2, r3, #1
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b40:	3b01      	subs	r3, #1
 8005b42:	b29a      	uxth	r2, r3
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	3b01      	subs	r3, #1
 8005b50:	b29a      	uxth	r2, r3
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	691a      	ldr	r2, [r3, #16]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b60:	b2d2      	uxtb	r2, r2
 8005b62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b68:	1c5a      	adds	r2, r3, #1
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b72:	3b01      	subs	r3, #1
 8005b74:	b29a      	uxth	r2, r3
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	3b01      	subs	r3, #1
 8005b82:	b29a      	uxth	r2, r3
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005b88:	e042      	b.n	8005c10 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b8c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005b8e:	68f8      	ldr	r0, [r7, #12]
 8005b90:	f000 fbb0 	bl	80062f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005b94:	4603      	mov	r3, r0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d001      	beq.n	8005b9e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e04c      	b.n	8005c38 <HAL_I2C_Mem_Read+0x440>
        }

        /*  data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	691a      	ldr	r2, [r3, #16]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba8:	b2d2      	uxtb	r2, r2
 8005baa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb0:	1c5a      	adds	r2, r3, #1
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bba:	3b01      	subs	r3, #1
 8005bbc:	b29a      	uxth	r2, r3
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	3b01      	subs	r3, #1
 8005bca:	b29a      	uxth	r2, r3
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	695b      	ldr	r3, [r3, #20]
 8005bd6:	f003 0304 	and.w	r3, r3, #4
 8005bda:	2b04      	cmp	r3, #4
 8005bdc:	d118      	bne.n	8005c10 <HAL_I2C_Mem_Read+0x418>
        {
          /*  data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	691a      	ldr	r2, [r3, #16]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be8:	b2d2      	uxtb	r2, r2
 8005bea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf0:	1c5a      	adds	r2, r3, #1
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bfa:	3b01      	subs	r3, #1
 8005bfc:	b29a      	uxth	r2, r3
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	3b01      	subs	r3, #1
 8005c0a:	b29a      	uxth	r2, r3
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	f47f aec2 	bne.w	800599e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2220      	movs	r2, #32
 8005c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2200      	movs	r2, #0
 8005c26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005c32:	2300      	movs	r3, #0
 8005c34:	e000      	b.n	8005c38 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005c36:	2302      	movs	r3, #2
  }
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3728      	adds	r7, #40	; 0x28
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}
 8005c40:	00010004 	.word	0x00010004

08005c44 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b088      	sub	sp, #32
 8005c48:	af02      	add	r7, sp, #8
 8005c4a:	60f8      	str	r0, [r7, #12]
 8005c4c:	607a      	str	r2, [r7, #4]
 8005c4e:	603b      	str	r3, [r7, #0]
 8005c50:	460b      	mov	r3, r1
 8005c52:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c58:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	2b08      	cmp	r3, #8
 8005c5e:	d006      	beq.n	8005c6e <I2C_MasterRequestWrite+0x2a>
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d003      	beq.n	8005c6e <I2C_MasterRequestWrite+0x2a>
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005c6c:	d108      	bne.n	8005c80 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c7c:	601a      	str	r2, [r3, #0]
 8005c7e:	e00b      	b.n	8005c98 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c84:	2b12      	cmp	r3, #18
 8005c86:	d107      	bne.n	8005c98 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c96:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	9300      	str	r3, [sp, #0]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005ca4:	68f8      	ldr	r0, [r7, #12]
 8005ca6:	f000 f9cd 	bl	8006044 <I2C_WaitOnFlagUntilTimeout>
 8005caa:	4603      	mov	r3, r0
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d00d      	beq.n	8005ccc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cbe:	d103      	bne.n	8005cc8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cc6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005cc8:	2303      	movs	r3, #3
 8005cca:	e035      	b.n	8005d38 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	691b      	ldr	r3, [r3, #16]
 8005cd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005cd4:	d108      	bne.n	8005ce8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005cd6:	897b      	ldrh	r3, [r7, #10]
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	461a      	mov	r2, r3
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005ce4:	611a      	str	r2, [r3, #16]
 8005ce6:	e01b      	b.n	8005d20 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005ce8:	897b      	ldrh	r3, [r7, #10]
 8005cea:	11db      	asrs	r3, r3, #7
 8005cec:	b2db      	uxtb	r3, r3
 8005cee:	f003 0306 	and.w	r3, r3, #6
 8005cf2:	b2db      	uxtb	r3, r3
 8005cf4:	f063 030f 	orn	r3, r3, #15
 8005cf8:	b2da      	uxtb	r2, r3
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	687a      	ldr	r2, [r7, #4]
 8005d04:	490e      	ldr	r1, [pc, #56]	; (8005d40 <I2C_MasterRequestWrite+0xfc>)
 8005d06:	68f8      	ldr	r0, [r7, #12]
 8005d08:	f000 f9f3 	bl	80060f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d001      	beq.n	8005d16 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	e010      	b.n	8005d38 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005d16:	897b      	ldrh	r3, [r7, #10]
 8005d18:	b2da      	uxtb	r2, r3
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	4907      	ldr	r1, [pc, #28]	; (8005d44 <I2C_MasterRequestWrite+0x100>)
 8005d26:	68f8      	ldr	r0, [r7, #12]
 8005d28:	f000 f9e3 	bl	80060f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d001      	beq.n	8005d36 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e000      	b.n	8005d38 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005d36:	2300      	movs	r3, #0
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3718      	adds	r7, #24
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}
 8005d40:	00010008 	.word	0x00010008
 8005d44:	00010002 	.word	0x00010002

08005d48 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b088      	sub	sp, #32
 8005d4c:	af02      	add	r7, sp, #8
 8005d4e:	60f8      	str	r0, [r7, #12]
 8005d50:	4608      	mov	r0, r1
 8005d52:	4611      	mov	r1, r2
 8005d54:	461a      	mov	r2, r3
 8005d56:	4603      	mov	r3, r0
 8005d58:	817b      	strh	r3, [r7, #10]
 8005d5a:	460b      	mov	r3, r1
 8005d5c:	813b      	strh	r3, [r7, #8]
 8005d5e:	4613      	mov	r3, r2
 8005d60:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d70:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d74:	9300      	str	r3, [sp, #0]
 8005d76:	6a3b      	ldr	r3, [r7, #32]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005d7e:	68f8      	ldr	r0, [r7, #12]
 8005d80:	f000 f960 	bl	8006044 <I2C_WaitOnFlagUntilTimeout>
 8005d84:	4603      	mov	r3, r0
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d00d      	beq.n	8005da6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d98:	d103      	bne.n	8005da2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005da0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005da2:	2303      	movs	r3, #3
 8005da4:	e05f      	b.n	8005e66 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005da6:	897b      	ldrh	r3, [r7, #10]
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	461a      	mov	r2, r3
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005db4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db8:	6a3a      	ldr	r2, [r7, #32]
 8005dba:	492d      	ldr	r1, [pc, #180]	; (8005e70 <I2C_RequestMemoryWrite+0x128>)
 8005dbc:	68f8      	ldr	r0, [r7, #12]
 8005dbe:	f000 f998 	bl	80060f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d001      	beq.n	8005dcc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	e04c      	b.n	8005e66 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dcc:	2300      	movs	r3, #0
 8005dce:	617b      	str	r3, [r7, #20]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	695b      	ldr	r3, [r3, #20]
 8005dd6:	617b      	str	r3, [r7, #20]
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	699b      	ldr	r3, [r3, #24]
 8005dde:	617b      	str	r3, [r7, #20]
 8005de0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005de2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005de4:	6a39      	ldr	r1, [r7, #32]
 8005de6:	68f8      	ldr	r0, [r7, #12]
 8005de8:	f000 fa02 	bl	80061f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005dec:	4603      	mov	r3, r0
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d00d      	beq.n	8005e0e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df6:	2b04      	cmp	r3, #4
 8005df8:	d107      	bne.n	8005e0a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e08:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e02b      	b.n	8005e66 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005e0e:	88fb      	ldrh	r3, [r7, #6]
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d105      	bne.n	8005e20 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005e14:	893b      	ldrh	r3, [r7, #8]
 8005e16:	b2da      	uxtb	r2, r3
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	611a      	str	r2, [r3, #16]
 8005e1e:	e021      	b.n	8005e64 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005e20:	893b      	ldrh	r3, [r7, #8]
 8005e22:	0a1b      	lsrs	r3, r3, #8
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	b2da      	uxtb	r2, r3
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e30:	6a39      	ldr	r1, [r7, #32]
 8005e32:	68f8      	ldr	r0, [r7, #12]
 8005e34:	f000 f9dc 	bl	80061f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d00d      	beq.n	8005e5a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e42:	2b04      	cmp	r3, #4
 8005e44:	d107      	bne.n	8005e56 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e54:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	e005      	b.n	8005e66 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005e5a:	893b      	ldrh	r3, [r7, #8]
 8005e5c:	b2da      	uxtb	r2, r3
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005e64:	2300      	movs	r3, #0
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3718      	adds	r7, #24
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	00010002 	.word	0x00010002

08005e74 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b088      	sub	sp, #32
 8005e78:	af02      	add	r7, sp, #8
 8005e7a:	60f8      	str	r0, [r7, #12]
 8005e7c:	4608      	mov	r0, r1
 8005e7e:	4611      	mov	r1, r2
 8005e80:	461a      	mov	r2, r3
 8005e82:	4603      	mov	r3, r0
 8005e84:	817b      	strh	r3, [r7, #10]
 8005e86:	460b      	mov	r3, r1
 8005e88:	813b      	strh	r3, [r7, #8]
 8005e8a:	4613      	mov	r3, r2
 8005e8c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005e9c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005eac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb0:	9300      	str	r3, [sp, #0]
 8005eb2:	6a3b      	ldr	r3, [r7, #32]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005eba:	68f8      	ldr	r0, [r7, #12]
 8005ebc:	f000 f8c2 	bl	8006044 <I2C_WaitOnFlagUntilTimeout>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d00d      	beq.n	8005ee2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ed0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ed4:	d103      	bne.n	8005ede <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005edc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005ede:	2303      	movs	r3, #3
 8005ee0:	e0aa      	b.n	8006038 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005ee2:	897b      	ldrh	r3, [r7, #10]
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005ef0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef4:	6a3a      	ldr	r2, [r7, #32]
 8005ef6:	4952      	ldr	r1, [pc, #328]	; (8006040 <I2C_RequestMemoryRead+0x1cc>)
 8005ef8:	68f8      	ldr	r0, [r7, #12]
 8005efa:	f000 f8fa 	bl	80060f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005efe:	4603      	mov	r3, r0
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d001      	beq.n	8005f08 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	e097      	b.n	8006038 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f08:	2300      	movs	r3, #0
 8005f0a:	617b      	str	r3, [r7, #20]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	695b      	ldr	r3, [r3, #20]
 8005f12:	617b      	str	r3, [r7, #20]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	699b      	ldr	r3, [r3, #24]
 8005f1a:	617b      	str	r3, [r7, #20]
 8005f1c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f20:	6a39      	ldr	r1, [r7, #32]
 8005f22:	68f8      	ldr	r0, [r7, #12]
 8005f24:	f000 f964 	bl	80061f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d00d      	beq.n	8005f4a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f32:	2b04      	cmp	r3, #4
 8005f34:	d107      	bne.n	8005f46 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f44:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005f46:	2301      	movs	r3, #1
 8005f48:	e076      	b.n	8006038 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005f4a:	88fb      	ldrh	r3, [r7, #6]
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d105      	bne.n	8005f5c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005f50:	893b      	ldrh	r3, [r7, #8]
 8005f52:	b2da      	uxtb	r2, r3
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	611a      	str	r2, [r3, #16]
 8005f5a:	e021      	b.n	8005fa0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005f5c:	893b      	ldrh	r3, [r7, #8]
 8005f5e:	0a1b      	lsrs	r3, r3, #8
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	b2da      	uxtb	r2, r3
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f6c:	6a39      	ldr	r1, [r7, #32]
 8005f6e:	68f8      	ldr	r0, [r7, #12]
 8005f70:	f000 f93e 	bl	80061f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f74:	4603      	mov	r3, r0
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d00d      	beq.n	8005f96 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f7e:	2b04      	cmp	r3, #4
 8005f80:	d107      	bne.n	8005f92 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f90:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	e050      	b.n	8006038 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005f96:	893b      	ldrh	r3, [r7, #8]
 8005f98:	b2da      	uxtb	r2, r3
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fa2:	6a39      	ldr	r1, [r7, #32]
 8005fa4:	68f8      	ldr	r0, [r7, #12]
 8005fa6:	f000 f923 	bl	80061f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005faa:	4603      	mov	r3, r0
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d00d      	beq.n	8005fcc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb4:	2b04      	cmp	r3, #4
 8005fb6:	d107      	bne.n	8005fc8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fc6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e035      	b.n	8006038 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005fda:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fde:	9300      	str	r3, [sp, #0]
 8005fe0:	6a3b      	ldr	r3, [r7, #32]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005fe8:	68f8      	ldr	r0, [r7, #12]
 8005fea:	f000 f82b 	bl	8006044 <I2C_WaitOnFlagUntilTimeout>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d00d      	beq.n	8006010 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ffe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006002:	d103      	bne.n	800600c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f44f 7200 	mov.w	r2, #512	; 0x200
 800600a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800600c:	2303      	movs	r3, #3
 800600e:	e013      	b.n	8006038 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006010:	897b      	ldrh	r3, [r7, #10]
 8006012:	b2db      	uxtb	r3, r3
 8006014:	f043 0301 	orr.w	r3, r3, #1
 8006018:	b2da      	uxtb	r2, r3
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006022:	6a3a      	ldr	r2, [r7, #32]
 8006024:	4906      	ldr	r1, [pc, #24]	; (8006040 <I2C_RequestMemoryRead+0x1cc>)
 8006026:	68f8      	ldr	r0, [r7, #12]
 8006028:	f000 f863 	bl	80060f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800602c:	4603      	mov	r3, r0
 800602e:	2b00      	cmp	r3, #0
 8006030:	d001      	beq.n	8006036 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	e000      	b.n	8006038 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006036:	2300      	movs	r3, #0
}
 8006038:	4618      	mov	r0, r3
 800603a:	3718      	adds	r7, #24
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}
 8006040:	00010002 	.word	0x00010002

08006044 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b084      	sub	sp, #16
 8006048:	af00      	add	r7, sp, #0
 800604a:	60f8      	str	r0, [r7, #12]
 800604c:	60b9      	str	r1, [r7, #8]
 800604e:	603b      	str	r3, [r7, #0]
 8006050:	4613      	mov	r3, r2
 8006052:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006054:	e025      	b.n	80060a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800605c:	d021      	beq.n	80060a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800605e:	f7fe fced 	bl	8004a3c <HAL_GetTick>
 8006062:	4602      	mov	r2, r0
 8006064:	69bb      	ldr	r3, [r7, #24]
 8006066:	1ad3      	subs	r3, r2, r3
 8006068:	683a      	ldr	r2, [r7, #0]
 800606a:	429a      	cmp	r2, r3
 800606c:	d302      	bcc.n	8006074 <I2C_WaitOnFlagUntilTimeout+0x30>
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d116      	bne.n	80060a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2200      	movs	r2, #0
 8006078:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2220      	movs	r2, #32
 800607e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2200      	movs	r2, #0
 8006086:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800608e:	f043 0220 	orr.w	r2, r3, #32
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2200      	movs	r2, #0
 800609a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	e023      	b.n	80060ea <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	0c1b      	lsrs	r3, r3, #16
 80060a6:	b2db      	uxtb	r3, r3
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d10d      	bne.n	80060c8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	695b      	ldr	r3, [r3, #20]
 80060b2:	43da      	mvns	r2, r3
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	4013      	ands	r3, r2
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	bf0c      	ite	eq
 80060be:	2301      	moveq	r3, #1
 80060c0:	2300      	movne	r3, #0
 80060c2:	b2db      	uxtb	r3, r3
 80060c4:	461a      	mov	r2, r3
 80060c6:	e00c      	b.n	80060e2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	699b      	ldr	r3, [r3, #24]
 80060ce:	43da      	mvns	r2, r3
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	4013      	ands	r3, r2
 80060d4:	b29b      	uxth	r3, r3
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	bf0c      	ite	eq
 80060da:	2301      	moveq	r3, #1
 80060dc:	2300      	movne	r3, #0
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	461a      	mov	r2, r3
 80060e2:	79fb      	ldrb	r3, [r7, #7]
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d0b6      	beq.n	8006056 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80060e8:	2300      	movs	r3, #0
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3710      	adds	r7, #16
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}

080060f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80060f2:	b580      	push	{r7, lr}
 80060f4:	b084      	sub	sp, #16
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	60f8      	str	r0, [r7, #12]
 80060fa:	60b9      	str	r1, [r7, #8]
 80060fc:	607a      	str	r2, [r7, #4]
 80060fe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006100:	e051      	b.n	80061a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	695b      	ldr	r3, [r3, #20]
 8006108:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800610c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006110:	d123      	bne.n	800615a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006120:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800612a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2200      	movs	r2, #0
 8006130:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2220      	movs	r2, #32
 8006136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2200      	movs	r2, #0
 800613e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006146:	f043 0204 	orr.w	r2, r3, #4
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2200      	movs	r2, #0
 8006152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	e046      	b.n	80061e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006160:	d021      	beq.n	80061a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006162:	f7fe fc6b 	bl	8004a3c <HAL_GetTick>
 8006166:	4602      	mov	r2, r0
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	1ad3      	subs	r3, r2, r3
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	429a      	cmp	r2, r3
 8006170:	d302      	bcc.n	8006178 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d116      	bne.n	80061a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2200      	movs	r2, #0
 800617c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2220      	movs	r2, #32
 8006182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2200      	movs	r2, #0
 800618a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006192:	f043 0220 	orr.w	r2, r3, #32
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2200      	movs	r2, #0
 800619e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	e020      	b.n	80061e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	0c1b      	lsrs	r3, r3, #16
 80061aa:	b2db      	uxtb	r3, r3
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d10c      	bne.n	80061ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	695b      	ldr	r3, [r3, #20]
 80061b6:	43da      	mvns	r2, r3
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	4013      	ands	r3, r2
 80061bc:	b29b      	uxth	r3, r3
 80061be:	2b00      	cmp	r3, #0
 80061c0:	bf14      	ite	ne
 80061c2:	2301      	movne	r3, #1
 80061c4:	2300      	moveq	r3, #0
 80061c6:	b2db      	uxtb	r3, r3
 80061c8:	e00b      	b.n	80061e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	699b      	ldr	r3, [r3, #24]
 80061d0:	43da      	mvns	r2, r3
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	4013      	ands	r3, r2
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	2b00      	cmp	r3, #0
 80061da:	bf14      	ite	ne
 80061dc:	2301      	movne	r3, #1
 80061de:	2300      	moveq	r3, #0
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d18d      	bne.n	8006102 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80061e6:	2300      	movs	r3, #0
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3710      	adds	r7, #16
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}

080061f0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b084      	sub	sp, #16
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	60f8      	str	r0, [r7, #12]
 80061f8:	60b9      	str	r1, [r7, #8]
 80061fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80061fc:	e02d      	b.n	800625a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80061fe:	68f8      	ldr	r0, [r7, #12]
 8006200:	f000 f8ce 	bl	80063a0 <I2C_IsAcknowledgeFailed>
 8006204:	4603      	mov	r3, r0
 8006206:	2b00      	cmp	r3, #0
 8006208:	d001      	beq.n	800620e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	e02d      	b.n	800626a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006214:	d021      	beq.n	800625a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006216:	f7fe fc11 	bl	8004a3c <HAL_GetTick>
 800621a:	4602      	mov	r2, r0
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	1ad3      	subs	r3, r2, r3
 8006220:	68ba      	ldr	r2, [r7, #8]
 8006222:	429a      	cmp	r2, r3
 8006224:	d302      	bcc.n	800622c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d116      	bne.n	800625a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2200      	movs	r2, #0
 8006230:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2220      	movs	r2, #32
 8006236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2200      	movs	r2, #0
 800623e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006246:	f043 0220 	orr.w	r2, r3, #32
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2200      	movs	r2, #0
 8006252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	e007      	b.n	800626a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	695b      	ldr	r3, [r3, #20]
 8006260:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006264:	2b80      	cmp	r3, #128	; 0x80
 8006266:	d1ca      	bne.n	80061fe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006268:	2300      	movs	r3, #0
}
 800626a:	4618      	mov	r0, r3
 800626c:	3710      	adds	r7, #16
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}

08006272 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006272:	b580      	push	{r7, lr}
 8006274:	b084      	sub	sp, #16
 8006276:	af00      	add	r7, sp, #0
 8006278:	60f8      	str	r0, [r7, #12]
 800627a:	60b9      	str	r1, [r7, #8]
 800627c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800627e:	e02d      	b.n	80062dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006280:	68f8      	ldr	r0, [r7, #12]
 8006282:	f000 f88d 	bl	80063a0 <I2C_IsAcknowledgeFailed>
 8006286:	4603      	mov	r3, r0
 8006288:	2b00      	cmp	r3, #0
 800628a:	d001      	beq.n	8006290 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800628c:	2301      	movs	r3, #1
 800628e:	e02d      	b.n	80062ec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006296:	d021      	beq.n	80062dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006298:	f7fe fbd0 	bl	8004a3c <HAL_GetTick>
 800629c:	4602      	mov	r2, r0
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	1ad3      	subs	r3, r2, r3
 80062a2:	68ba      	ldr	r2, [r7, #8]
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d302      	bcc.n	80062ae <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d116      	bne.n	80062dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2200      	movs	r2, #0
 80062b2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2220      	movs	r2, #32
 80062b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2200      	movs	r2, #0
 80062c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c8:	f043 0220 	orr.w	r2, r3, #32
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2200      	movs	r2, #0
 80062d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	e007      	b.n	80062ec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	695b      	ldr	r3, [r3, #20]
 80062e2:	f003 0304 	and.w	r3, r3, #4
 80062e6:	2b04      	cmp	r3, #4
 80062e8:	d1ca      	bne.n	8006280 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80062ea:	2300      	movs	r3, #0
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3710      	adds	r7, #16
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}

080062f4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b084      	sub	sp, #16
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	60f8      	str	r0, [r7, #12]
 80062fc:	60b9      	str	r1, [r7, #8]
 80062fe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006300:	e042      	b.n	8006388 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	695b      	ldr	r3, [r3, #20]
 8006308:	f003 0310 	and.w	r3, r3, #16
 800630c:	2b10      	cmp	r3, #16
 800630e:	d119      	bne.n	8006344 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f06f 0210 	mvn.w	r2, #16
 8006318:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2200      	movs	r2, #0
 800631e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2220      	movs	r2, #32
 8006324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2200      	movs	r2, #0
 800632c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2200      	movs	r2, #0
 800633c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006340:	2301      	movs	r3, #1
 8006342:	e029      	b.n	8006398 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006344:	f7fe fb7a 	bl	8004a3c <HAL_GetTick>
 8006348:	4602      	mov	r2, r0
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	1ad3      	subs	r3, r2, r3
 800634e:	68ba      	ldr	r2, [r7, #8]
 8006350:	429a      	cmp	r2, r3
 8006352:	d302      	bcc.n	800635a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d116      	bne.n	8006388 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2200      	movs	r2, #0
 800635e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2220      	movs	r2, #32
 8006364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2200      	movs	r2, #0
 800636c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006374:	f043 0220 	orr.w	r2, r3, #32
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2200      	movs	r2, #0
 8006380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006384:	2301      	movs	r3, #1
 8006386:	e007      	b.n	8006398 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	695b      	ldr	r3, [r3, #20]
 800638e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006392:	2b40      	cmp	r3, #64	; 0x40
 8006394:	d1b5      	bne.n	8006302 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006396:	2300      	movs	r3, #0
}
 8006398:	4618      	mov	r0, r3
 800639a:	3710      	adds	r7, #16
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}

080063a0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b083      	sub	sp, #12
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	695b      	ldr	r3, [r3, #20]
 80063ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063b6:	d11b      	bne.n	80063f0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80063c0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2200      	movs	r2, #0
 80063c6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2220      	movs	r2, #32
 80063cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063dc:	f043 0204 	orr.w	r2, r3, #4
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2200      	movs	r2, #0
 80063e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80063ec:	2301      	movs	r3, #1
 80063ee:	e000      	b.n	80063f2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80063f0:	2300      	movs	r3, #0
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	370c      	adds	r7, #12
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr
	...

08006400 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b086      	sub	sp, #24
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d101      	bne.n	8006412 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	e264      	b.n	80068dc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f003 0301 	and.w	r3, r3, #1
 800641a:	2b00      	cmp	r3, #0
 800641c:	d075      	beq.n	800650a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800641e:	4ba3      	ldr	r3, [pc, #652]	; (80066ac <HAL_RCC_OscConfig+0x2ac>)
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	f003 030c 	and.w	r3, r3, #12
 8006426:	2b04      	cmp	r3, #4
 8006428:	d00c      	beq.n	8006444 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800642a:	4ba0      	ldr	r3, [pc, #640]	; (80066ac <HAL_RCC_OscConfig+0x2ac>)
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006432:	2b08      	cmp	r3, #8
 8006434:	d112      	bne.n	800645c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006436:	4b9d      	ldr	r3, [pc, #628]	; (80066ac <HAL_RCC_OscConfig+0x2ac>)
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800643e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006442:	d10b      	bne.n	800645c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006444:	4b99      	ldr	r3, [pc, #612]	; (80066ac <HAL_RCC_OscConfig+0x2ac>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800644c:	2b00      	cmp	r3, #0
 800644e:	d05b      	beq.n	8006508 <HAL_RCC_OscConfig+0x108>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d157      	bne.n	8006508 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	e23f      	b.n	80068dc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006464:	d106      	bne.n	8006474 <HAL_RCC_OscConfig+0x74>
 8006466:	4b91      	ldr	r3, [pc, #580]	; (80066ac <HAL_RCC_OscConfig+0x2ac>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a90      	ldr	r2, [pc, #576]	; (80066ac <HAL_RCC_OscConfig+0x2ac>)
 800646c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006470:	6013      	str	r3, [r2, #0]
 8006472:	e01d      	b.n	80064b0 <HAL_RCC_OscConfig+0xb0>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800647c:	d10c      	bne.n	8006498 <HAL_RCC_OscConfig+0x98>
 800647e:	4b8b      	ldr	r3, [pc, #556]	; (80066ac <HAL_RCC_OscConfig+0x2ac>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a8a      	ldr	r2, [pc, #552]	; (80066ac <HAL_RCC_OscConfig+0x2ac>)
 8006484:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006488:	6013      	str	r3, [r2, #0]
 800648a:	4b88      	ldr	r3, [pc, #544]	; (80066ac <HAL_RCC_OscConfig+0x2ac>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a87      	ldr	r2, [pc, #540]	; (80066ac <HAL_RCC_OscConfig+0x2ac>)
 8006490:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006494:	6013      	str	r3, [r2, #0]
 8006496:	e00b      	b.n	80064b0 <HAL_RCC_OscConfig+0xb0>
 8006498:	4b84      	ldr	r3, [pc, #528]	; (80066ac <HAL_RCC_OscConfig+0x2ac>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a83      	ldr	r2, [pc, #524]	; (80066ac <HAL_RCC_OscConfig+0x2ac>)
 800649e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064a2:	6013      	str	r3, [r2, #0]
 80064a4:	4b81      	ldr	r3, [pc, #516]	; (80066ac <HAL_RCC_OscConfig+0x2ac>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a80      	ldr	r2, [pc, #512]	; (80066ac <HAL_RCC_OscConfig+0x2ac>)
 80064aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80064ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d013      	beq.n	80064e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064b8:	f7fe fac0 	bl	8004a3c <HAL_GetTick>
 80064bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064be:	e008      	b.n	80064d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80064c0:	f7fe fabc 	bl	8004a3c <HAL_GetTick>
 80064c4:	4602      	mov	r2, r0
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	1ad3      	subs	r3, r2, r3
 80064ca:	2b64      	cmp	r3, #100	; 0x64
 80064cc:	d901      	bls.n	80064d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80064ce:	2303      	movs	r3, #3
 80064d0:	e204      	b.n	80068dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064d2:	4b76      	ldr	r3, [pc, #472]	; (80066ac <HAL_RCC_OscConfig+0x2ac>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d0f0      	beq.n	80064c0 <HAL_RCC_OscConfig+0xc0>
 80064de:	e014      	b.n	800650a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064e0:	f7fe faac 	bl	8004a3c <HAL_GetTick>
 80064e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064e6:	e008      	b.n	80064fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80064e8:	f7fe faa8 	bl	8004a3c <HAL_GetTick>
 80064ec:	4602      	mov	r2, r0
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	1ad3      	subs	r3, r2, r3
 80064f2:	2b64      	cmp	r3, #100	; 0x64
 80064f4:	d901      	bls.n	80064fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80064f6:	2303      	movs	r3, #3
 80064f8:	e1f0      	b.n	80068dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064fa:	4b6c      	ldr	r3, [pc, #432]	; (80066ac <HAL_RCC_OscConfig+0x2ac>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006502:	2b00      	cmp	r3, #0
 8006504:	d1f0      	bne.n	80064e8 <HAL_RCC_OscConfig+0xe8>
 8006506:	e000      	b.n	800650a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006508:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f003 0302 	and.w	r3, r3, #2
 8006512:	2b00      	cmp	r3, #0
 8006514:	d063      	beq.n	80065de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006516:	4b65      	ldr	r3, [pc, #404]	; (80066ac <HAL_RCC_OscConfig+0x2ac>)
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	f003 030c 	and.w	r3, r3, #12
 800651e:	2b00      	cmp	r3, #0
 8006520:	d00b      	beq.n	800653a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006522:	4b62      	ldr	r3, [pc, #392]	; (80066ac <HAL_RCC_OscConfig+0x2ac>)
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800652a:	2b08      	cmp	r3, #8
 800652c:	d11c      	bne.n	8006568 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800652e:	4b5f      	ldr	r3, [pc, #380]	; (80066ac <HAL_RCC_OscConfig+0x2ac>)
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006536:	2b00      	cmp	r3, #0
 8006538:	d116      	bne.n	8006568 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800653a:	4b5c      	ldr	r3, [pc, #368]	; (80066ac <HAL_RCC_OscConfig+0x2ac>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f003 0302 	and.w	r3, r3, #2
 8006542:	2b00      	cmp	r3, #0
 8006544:	d005      	beq.n	8006552 <HAL_RCC_OscConfig+0x152>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	68db      	ldr	r3, [r3, #12]
 800654a:	2b01      	cmp	r3, #1
 800654c:	d001      	beq.n	8006552 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800654e:	2301      	movs	r3, #1
 8006550:	e1c4      	b.n	80068dc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006552:	4b56      	ldr	r3, [pc, #344]	; (80066ac <HAL_RCC_OscConfig+0x2ac>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	691b      	ldr	r3, [r3, #16]
 800655e:	00db      	lsls	r3, r3, #3
 8006560:	4952      	ldr	r1, [pc, #328]	; (80066ac <HAL_RCC_OscConfig+0x2ac>)
 8006562:	4313      	orrs	r3, r2
 8006564:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006566:	e03a      	b.n	80065de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	68db      	ldr	r3, [r3, #12]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d020      	beq.n	80065b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006570:	4b4f      	ldr	r3, [pc, #316]	; (80066b0 <HAL_RCC_OscConfig+0x2b0>)
 8006572:	2201      	movs	r2, #1
 8006574:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006576:	f7fe fa61 	bl	8004a3c <HAL_GetTick>
 800657a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800657c:	e008      	b.n	8006590 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800657e:	f7fe fa5d 	bl	8004a3c <HAL_GetTick>
 8006582:	4602      	mov	r2, r0
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	1ad3      	subs	r3, r2, r3
 8006588:	2b02      	cmp	r3, #2
 800658a:	d901      	bls.n	8006590 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800658c:	2303      	movs	r3, #3
 800658e:	e1a5      	b.n	80068dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006590:	4b46      	ldr	r3, [pc, #280]	; (80066ac <HAL_RCC_OscConfig+0x2ac>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f003 0302 	and.w	r3, r3, #2
 8006598:	2b00      	cmp	r3, #0
 800659a:	d0f0      	beq.n	800657e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800659c:	4b43      	ldr	r3, [pc, #268]	; (80066ac <HAL_RCC_OscConfig+0x2ac>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	691b      	ldr	r3, [r3, #16]
 80065a8:	00db      	lsls	r3, r3, #3
 80065aa:	4940      	ldr	r1, [pc, #256]	; (80066ac <HAL_RCC_OscConfig+0x2ac>)
 80065ac:	4313      	orrs	r3, r2
 80065ae:	600b      	str	r3, [r1, #0]
 80065b0:	e015      	b.n	80065de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80065b2:	4b3f      	ldr	r3, [pc, #252]	; (80066b0 <HAL_RCC_OscConfig+0x2b0>)
 80065b4:	2200      	movs	r2, #0
 80065b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065b8:	f7fe fa40 	bl	8004a3c <HAL_GetTick>
 80065bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80065be:	e008      	b.n	80065d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80065c0:	f7fe fa3c 	bl	8004a3c <HAL_GetTick>
 80065c4:	4602      	mov	r2, r0
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	1ad3      	subs	r3, r2, r3
 80065ca:	2b02      	cmp	r3, #2
 80065cc:	d901      	bls.n	80065d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80065ce:	2303      	movs	r3, #3
 80065d0:	e184      	b.n	80068dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80065d2:	4b36      	ldr	r3, [pc, #216]	; (80066ac <HAL_RCC_OscConfig+0x2ac>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f003 0302 	and.w	r3, r3, #2
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d1f0      	bne.n	80065c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f003 0308 	and.w	r3, r3, #8
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d030      	beq.n	800664c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	695b      	ldr	r3, [r3, #20]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d016      	beq.n	8006620 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80065f2:	4b30      	ldr	r3, [pc, #192]	; (80066b4 <HAL_RCC_OscConfig+0x2b4>)
 80065f4:	2201      	movs	r2, #1
 80065f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065f8:	f7fe fa20 	bl	8004a3c <HAL_GetTick>
 80065fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065fe:	e008      	b.n	8006612 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006600:	f7fe fa1c 	bl	8004a3c <HAL_GetTick>
 8006604:	4602      	mov	r2, r0
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	1ad3      	subs	r3, r2, r3
 800660a:	2b02      	cmp	r3, #2
 800660c:	d901      	bls.n	8006612 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800660e:	2303      	movs	r3, #3
 8006610:	e164      	b.n	80068dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006612:	4b26      	ldr	r3, [pc, #152]	; (80066ac <HAL_RCC_OscConfig+0x2ac>)
 8006614:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006616:	f003 0302 	and.w	r3, r3, #2
 800661a:	2b00      	cmp	r3, #0
 800661c:	d0f0      	beq.n	8006600 <HAL_RCC_OscConfig+0x200>
 800661e:	e015      	b.n	800664c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006620:	4b24      	ldr	r3, [pc, #144]	; (80066b4 <HAL_RCC_OscConfig+0x2b4>)
 8006622:	2200      	movs	r2, #0
 8006624:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006626:	f7fe fa09 	bl	8004a3c <HAL_GetTick>
 800662a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800662c:	e008      	b.n	8006640 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800662e:	f7fe fa05 	bl	8004a3c <HAL_GetTick>
 8006632:	4602      	mov	r2, r0
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	1ad3      	subs	r3, r2, r3
 8006638:	2b02      	cmp	r3, #2
 800663a:	d901      	bls.n	8006640 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800663c:	2303      	movs	r3, #3
 800663e:	e14d      	b.n	80068dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006640:	4b1a      	ldr	r3, [pc, #104]	; (80066ac <HAL_RCC_OscConfig+0x2ac>)
 8006642:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006644:	f003 0302 	and.w	r3, r3, #2
 8006648:	2b00      	cmp	r3, #0
 800664a:	d1f0      	bne.n	800662e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f003 0304 	and.w	r3, r3, #4
 8006654:	2b00      	cmp	r3, #0
 8006656:	f000 80a0 	beq.w	800679a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800665a:	2300      	movs	r3, #0
 800665c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800665e:	4b13      	ldr	r3, [pc, #76]	; (80066ac <HAL_RCC_OscConfig+0x2ac>)
 8006660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006666:	2b00      	cmp	r3, #0
 8006668:	d10f      	bne.n	800668a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800666a:	2300      	movs	r3, #0
 800666c:	60bb      	str	r3, [r7, #8]
 800666e:	4b0f      	ldr	r3, [pc, #60]	; (80066ac <HAL_RCC_OscConfig+0x2ac>)
 8006670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006672:	4a0e      	ldr	r2, [pc, #56]	; (80066ac <HAL_RCC_OscConfig+0x2ac>)
 8006674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006678:	6413      	str	r3, [r2, #64]	; 0x40
 800667a:	4b0c      	ldr	r3, [pc, #48]	; (80066ac <HAL_RCC_OscConfig+0x2ac>)
 800667c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800667e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006682:	60bb      	str	r3, [r7, #8]
 8006684:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006686:	2301      	movs	r3, #1
 8006688:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800668a:	4b0b      	ldr	r3, [pc, #44]	; (80066b8 <HAL_RCC_OscConfig+0x2b8>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006692:	2b00      	cmp	r3, #0
 8006694:	d121      	bne.n	80066da <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006696:	4b08      	ldr	r3, [pc, #32]	; (80066b8 <HAL_RCC_OscConfig+0x2b8>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a07      	ldr	r2, [pc, #28]	; (80066b8 <HAL_RCC_OscConfig+0x2b8>)
 800669c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80066a2:	f7fe f9cb 	bl	8004a3c <HAL_GetTick>
 80066a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066a8:	e011      	b.n	80066ce <HAL_RCC_OscConfig+0x2ce>
 80066aa:	bf00      	nop
 80066ac:	40023800 	.word	0x40023800
 80066b0:	42470000 	.word	0x42470000
 80066b4:	42470e80 	.word	0x42470e80
 80066b8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066bc:	f7fe f9be 	bl	8004a3c <HAL_GetTick>
 80066c0:	4602      	mov	r2, r0
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	1ad3      	subs	r3, r2, r3
 80066c6:	2b02      	cmp	r3, #2
 80066c8:	d901      	bls.n	80066ce <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80066ca:	2303      	movs	r3, #3
 80066cc:	e106      	b.n	80068dc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066ce:	4b85      	ldr	r3, [pc, #532]	; (80068e4 <HAL_RCC_OscConfig+0x4e4>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d0f0      	beq.n	80066bc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	2b01      	cmp	r3, #1
 80066e0:	d106      	bne.n	80066f0 <HAL_RCC_OscConfig+0x2f0>
 80066e2:	4b81      	ldr	r3, [pc, #516]	; (80068e8 <HAL_RCC_OscConfig+0x4e8>)
 80066e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066e6:	4a80      	ldr	r2, [pc, #512]	; (80068e8 <HAL_RCC_OscConfig+0x4e8>)
 80066e8:	f043 0301 	orr.w	r3, r3, #1
 80066ec:	6713      	str	r3, [r2, #112]	; 0x70
 80066ee:	e01c      	b.n	800672a <HAL_RCC_OscConfig+0x32a>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	2b05      	cmp	r3, #5
 80066f6:	d10c      	bne.n	8006712 <HAL_RCC_OscConfig+0x312>
 80066f8:	4b7b      	ldr	r3, [pc, #492]	; (80068e8 <HAL_RCC_OscConfig+0x4e8>)
 80066fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066fc:	4a7a      	ldr	r2, [pc, #488]	; (80068e8 <HAL_RCC_OscConfig+0x4e8>)
 80066fe:	f043 0304 	orr.w	r3, r3, #4
 8006702:	6713      	str	r3, [r2, #112]	; 0x70
 8006704:	4b78      	ldr	r3, [pc, #480]	; (80068e8 <HAL_RCC_OscConfig+0x4e8>)
 8006706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006708:	4a77      	ldr	r2, [pc, #476]	; (80068e8 <HAL_RCC_OscConfig+0x4e8>)
 800670a:	f043 0301 	orr.w	r3, r3, #1
 800670e:	6713      	str	r3, [r2, #112]	; 0x70
 8006710:	e00b      	b.n	800672a <HAL_RCC_OscConfig+0x32a>
 8006712:	4b75      	ldr	r3, [pc, #468]	; (80068e8 <HAL_RCC_OscConfig+0x4e8>)
 8006714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006716:	4a74      	ldr	r2, [pc, #464]	; (80068e8 <HAL_RCC_OscConfig+0x4e8>)
 8006718:	f023 0301 	bic.w	r3, r3, #1
 800671c:	6713      	str	r3, [r2, #112]	; 0x70
 800671e:	4b72      	ldr	r3, [pc, #456]	; (80068e8 <HAL_RCC_OscConfig+0x4e8>)
 8006720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006722:	4a71      	ldr	r2, [pc, #452]	; (80068e8 <HAL_RCC_OscConfig+0x4e8>)
 8006724:	f023 0304 	bic.w	r3, r3, #4
 8006728:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d015      	beq.n	800675e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006732:	f7fe f983 	bl	8004a3c <HAL_GetTick>
 8006736:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006738:	e00a      	b.n	8006750 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800673a:	f7fe f97f 	bl	8004a3c <HAL_GetTick>
 800673e:	4602      	mov	r2, r0
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	1ad3      	subs	r3, r2, r3
 8006744:	f241 3288 	movw	r2, #5000	; 0x1388
 8006748:	4293      	cmp	r3, r2
 800674a:	d901      	bls.n	8006750 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800674c:	2303      	movs	r3, #3
 800674e:	e0c5      	b.n	80068dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006750:	4b65      	ldr	r3, [pc, #404]	; (80068e8 <HAL_RCC_OscConfig+0x4e8>)
 8006752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006754:	f003 0302 	and.w	r3, r3, #2
 8006758:	2b00      	cmp	r3, #0
 800675a:	d0ee      	beq.n	800673a <HAL_RCC_OscConfig+0x33a>
 800675c:	e014      	b.n	8006788 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800675e:	f7fe f96d 	bl	8004a3c <HAL_GetTick>
 8006762:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006764:	e00a      	b.n	800677c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006766:	f7fe f969 	bl	8004a3c <HAL_GetTick>
 800676a:	4602      	mov	r2, r0
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	1ad3      	subs	r3, r2, r3
 8006770:	f241 3288 	movw	r2, #5000	; 0x1388
 8006774:	4293      	cmp	r3, r2
 8006776:	d901      	bls.n	800677c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006778:	2303      	movs	r3, #3
 800677a:	e0af      	b.n	80068dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800677c:	4b5a      	ldr	r3, [pc, #360]	; (80068e8 <HAL_RCC_OscConfig+0x4e8>)
 800677e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006780:	f003 0302 	and.w	r3, r3, #2
 8006784:	2b00      	cmp	r3, #0
 8006786:	d1ee      	bne.n	8006766 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006788:	7dfb      	ldrb	r3, [r7, #23]
 800678a:	2b01      	cmp	r3, #1
 800678c:	d105      	bne.n	800679a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800678e:	4b56      	ldr	r3, [pc, #344]	; (80068e8 <HAL_RCC_OscConfig+0x4e8>)
 8006790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006792:	4a55      	ldr	r2, [pc, #340]	; (80068e8 <HAL_RCC_OscConfig+0x4e8>)
 8006794:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006798:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	699b      	ldr	r3, [r3, #24]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	f000 809b 	beq.w	80068da <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80067a4:	4b50      	ldr	r3, [pc, #320]	; (80068e8 <HAL_RCC_OscConfig+0x4e8>)
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	f003 030c 	and.w	r3, r3, #12
 80067ac:	2b08      	cmp	r3, #8
 80067ae:	d05c      	beq.n	800686a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	699b      	ldr	r3, [r3, #24]
 80067b4:	2b02      	cmp	r3, #2
 80067b6:	d141      	bne.n	800683c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067b8:	4b4c      	ldr	r3, [pc, #304]	; (80068ec <HAL_RCC_OscConfig+0x4ec>)
 80067ba:	2200      	movs	r2, #0
 80067bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067be:	f7fe f93d 	bl	8004a3c <HAL_GetTick>
 80067c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067c4:	e008      	b.n	80067d8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067c6:	f7fe f939 	bl	8004a3c <HAL_GetTick>
 80067ca:	4602      	mov	r2, r0
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	1ad3      	subs	r3, r2, r3
 80067d0:	2b02      	cmp	r3, #2
 80067d2:	d901      	bls.n	80067d8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80067d4:	2303      	movs	r3, #3
 80067d6:	e081      	b.n	80068dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067d8:	4b43      	ldr	r3, [pc, #268]	; (80068e8 <HAL_RCC_OscConfig+0x4e8>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d1f0      	bne.n	80067c6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	69da      	ldr	r2, [r3, #28]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6a1b      	ldr	r3, [r3, #32]
 80067ec:	431a      	orrs	r2, r3
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f2:	019b      	lsls	r3, r3, #6
 80067f4:	431a      	orrs	r2, r3
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067fa:	085b      	lsrs	r3, r3, #1
 80067fc:	3b01      	subs	r3, #1
 80067fe:	041b      	lsls	r3, r3, #16
 8006800:	431a      	orrs	r2, r3
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006806:	061b      	lsls	r3, r3, #24
 8006808:	4937      	ldr	r1, [pc, #220]	; (80068e8 <HAL_RCC_OscConfig+0x4e8>)
 800680a:	4313      	orrs	r3, r2
 800680c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800680e:	4b37      	ldr	r3, [pc, #220]	; (80068ec <HAL_RCC_OscConfig+0x4ec>)
 8006810:	2201      	movs	r2, #1
 8006812:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006814:	f7fe f912 	bl	8004a3c <HAL_GetTick>
 8006818:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800681a:	e008      	b.n	800682e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800681c:	f7fe f90e 	bl	8004a3c <HAL_GetTick>
 8006820:	4602      	mov	r2, r0
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	1ad3      	subs	r3, r2, r3
 8006826:	2b02      	cmp	r3, #2
 8006828:	d901      	bls.n	800682e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800682a:	2303      	movs	r3, #3
 800682c:	e056      	b.n	80068dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800682e:	4b2e      	ldr	r3, [pc, #184]	; (80068e8 <HAL_RCC_OscConfig+0x4e8>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006836:	2b00      	cmp	r3, #0
 8006838:	d0f0      	beq.n	800681c <HAL_RCC_OscConfig+0x41c>
 800683a:	e04e      	b.n	80068da <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800683c:	4b2b      	ldr	r3, [pc, #172]	; (80068ec <HAL_RCC_OscConfig+0x4ec>)
 800683e:	2200      	movs	r2, #0
 8006840:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006842:	f7fe f8fb 	bl	8004a3c <HAL_GetTick>
 8006846:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006848:	e008      	b.n	800685c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800684a:	f7fe f8f7 	bl	8004a3c <HAL_GetTick>
 800684e:	4602      	mov	r2, r0
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	1ad3      	subs	r3, r2, r3
 8006854:	2b02      	cmp	r3, #2
 8006856:	d901      	bls.n	800685c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006858:	2303      	movs	r3, #3
 800685a:	e03f      	b.n	80068dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800685c:	4b22      	ldr	r3, [pc, #136]	; (80068e8 <HAL_RCC_OscConfig+0x4e8>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006864:	2b00      	cmp	r3, #0
 8006866:	d1f0      	bne.n	800684a <HAL_RCC_OscConfig+0x44a>
 8006868:	e037      	b.n	80068da <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	699b      	ldr	r3, [r3, #24]
 800686e:	2b01      	cmp	r3, #1
 8006870:	d101      	bne.n	8006876 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	e032      	b.n	80068dc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006876:	4b1c      	ldr	r3, [pc, #112]	; (80068e8 <HAL_RCC_OscConfig+0x4e8>)
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	699b      	ldr	r3, [r3, #24]
 8006880:	2b01      	cmp	r3, #1
 8006882:	d028      	beq.n	80068d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800688e:	429a      	cmp	r2, r3
 8006890:	d121      	bne.n	80068d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800689c:	429a      	cmp	r2, r3
 800689e:	d11a      	bne.n	80068d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80068a0:	68fa      	ldr	r2, [r7, #12]
 80068a2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80068a6:	4013      	ands	r3, r2
 80068a8:	687a      	ldr	r2, [r7, #4]
 80068aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80068ac:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d111      	bne.n	80068d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068bc:	085b      	lsrs	r3, r3, #1
 80068be:	3b01      	subs	r3, #1
 80068c0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d107      	bne.n	80068d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068d0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d001      	beq.n	80068da <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	e000      	b.n	80068dc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80068da:	2300      	movs	r3, #0
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3718      	adds	r7, #24
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}
 80068e4:	40007000 	.word	0x40007000
 80068e8:	40023800 	.word	0x40023800
 80068ec:	42470060 	.word	0x42470060

080068f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b084      	sub	sp, #16
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d101      	bne.n	8006904 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006900:	2301      	movs	r3, #1
 8006902:	e0cc      	b.n	8006a9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006904:	4b68      	ldr	r3, [pc, #416]	; (8006aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f003 0307 	and.w	r3, r3, #7
 800690c:	683a      	ldr	r2, [r7, #0]
 800690e:	429a      	cmp	r2, r3
 8006910:	d90c      	bls.n	800692c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006912:	4b65      	ldr	r3, [pc, #404]	; (8006aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8006914:	683a      	ldr	r2, [r7, #0]
 8006916:	b2d2      	uxtb	r2, r2
 8006918:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800691a:	4b63      	ldr	r3, [pc, #396]	; (8006aa8 <HAL_RCC_ClockConfig+0x1b8>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f003 0307 	and.w	r3, r3, #7
 8006922:	683a      	ldr	r2, [r7, #0]
 8006924:	429a      	cmp	r2, r3
 8006926:	d001      	beq.n	800692c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006928:	2301      	movs	r3, #1
 800692a:	e0b8      	b.n	8006a9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f003 0302 	and.w	r3, r3, #2
 8006934:	2b00      	cmp	r3, #0
 8006936:	d020      	beq.n	800697a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f003 0304 	and.w	r3, r3, #4
 8006940:	2b00      	cmp	r3, #0
 8006942:	d005      	beq.n	8006950 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006944:	4b59      	ldr	r3, [pc, #356]	; (8006aac <HAL_RCC_ClockConfig+0x1bc>)
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	4a58      	ldr	r2, [pc, #352]	; (8006aac <HAL_RCC_ClockConfig+0x1bc>)
 800694a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800694e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f003 0308 	and.w	r3, r3, #8
 8006958:	2b00      	cmp	r3, #0
 800695a:	d005      	beq.n	8006968 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800695c:	4b53      	ldr	r3, [pc, #332]	; (8006aac <HAL_RCC_ClockConfig+0x1bc>)
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	4a52      	ldr	r2, [pc, #328]	; (8006aac <HAL_RCC_ClockConfig+0x1bc>)
 8006962:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006966:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006968:	4b50      	ldr	r3, [pc, #320]	; (8006aac <HAL_RCC_ClockConfig+0x1bc>)
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	494d      	ldr	r1, [pc, #308]	; (8006aac <HAL_RCC_ClockConfig+0x1bc>)
 8006976:	4313      	orrs	r3, r2
 8006978:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f003 0301 	and.w	r3, r3, #1
 8006982:	2b00      	cmp	r3, #0
 8006984:	d044      	beq.n	8006a10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	2b01      	cmp	r3, #1
 800698c:	d107      	bne.n	800699e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800698e:	4b47      	ldr	r3, [pc, #284]	; (8006aac <HAL_RCC_ClockConfig+0x1bc>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006996:	2b00      	cmp	r3, #0
 8006998:	d119      	bne.n	80069ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800699a:	2301      	movs	r3, #1
 800699c:	e07f      	b.n	8006a9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	2b02      	cmp	r3, #2
 80069a4:	d003      	beq.n	80069ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80069aa:	2b03      	cmp	r3, #3
 80069ac:	d107      	bne.n	80069be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069ae:	4b3f      	ldr	r3, [pc, #252]	; (8006aac <HAL_RCC_ClockConfig+0x1bc>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d109      	bne.n	80069ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	e06f      	b.n	8006a9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069be:	4b3b      	ldr	r3, [pc, #236]	; (8006aac <HAL_RCC_ClockConfig+0x1bc>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f003 0302 	and.w	r3, r3, #2
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d101      	bne.n	80069ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80069ca:	2301      	movs	r3, #1
 80069cc:	e067      	b.n	8006a9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80069ce:	4b37      	ldr	r3, [pc, #220]	; (8006aac <HAL_RCC_ClockConfig+0x1bc>)
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	f023 0203 	bic.w	r2, r3, #3
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	4934      	ldr	r1, [pc, #208]	; (8006aac <HAL_RCC_ClockConfig+0x1bc>)
 80069dc:	4313      	orrs	r3, r2
 80069de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80069e0:	f7fe f82c 	bl	8004a3c <HAL_GetTick>
 80069e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069e6:	e00a      	b.n	80069fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069e8:	f7fe f828 	bl	8004a3c <HAL_GetTick>
 80069ec:	4602      	mov	r2, r0
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	1ad3      	subs	r3, r2, r3
 80069f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d901      	bls.n	80069fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80069fa:	2303      	movs	r3, #3
 80069fc:	e04f      	b.n	8006a9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069fe:	4b2b      	ldr	r3, [pc, #172]	; (8006aac <HAL_RCC_ClockConfig+0x1bc>)
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	f003 020c 	and.w	r2, r3, #12
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	009b      	lsls	r3, r3, #2
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d1eb      	bne.n	80069e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006a10:	4b25      	ldr	r3, [pc, #148]	; (8006aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f003 0307 	and.w	r3, r3, #7
 8006a18:	683a      	ldr	r2, [r7, #0]
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	d20c      	bcs.n	8006a38 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a1e:	4b22      	ldr	r3, [pc, #136]	; (8006aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8006a20:	683a      	ldr	r2, [r7, #0]
 8006a22:	b2d2      	uxtb	r2, r2
 8006a24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a26:	4b20      	ldr	r3, [pc, #128]	; (8006aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f003 0307 	and.w	r3, r3, #7
 8006a2e:	683a      	ldr	r2, [r7, #0]
 8006a30:	429a      	cmp	r2, r3
 8006a32:	d001      	beq.n	8006a38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006a34:	2301      	movs	r3, #1
 8006a36:	e032      	b.n	8006a9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f003 0304 	and.w	r3, r3, #4
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d008      	beq.n	8006a56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006a44:	4b19      	ldr	r3, [pc, #100]	; (8006aac <HAL_RCC_ClockConfig+0x1bc>)
 8006a46:	689b      	ldr	r3, [r3, #8]
 8006a48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	68db      	ldr	r3, [r3, #12]
 8006a50:	4916      	ldr	r1, [pc, #88]	; (8006aac <HAL_RCC_ClockConfig+0x1bc>)
 8006a52:	4313      	orrs	r3, r2
 8006a54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f003 0308 	and.w	r3, r3, #8
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d009      	beq.n	8006a76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006a62:	4b12      	ldr	r3, [pc, #72]	; (8006aac <HAL_RCC_ClockConfig+0x1bc>)
 8006a64:	689b      	ldr	r3, [r3, #8]
 8006a66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	691b      	ldr	r3, [r3, #16]
 8006a6e:	00db      	lsls	r3, r3, #3
 8006a70:	490e      	ldr	r1, [pc, #56]	; (8006aac <HAL_RCC_ClockConfig+0x1bc>)
 8006a72:	4313      	orrs	r3, r2
 8006a74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006a76:	f000 f821 	bl	8006abc <HAL_RCC_GetSysClockFreq>
 8006a7a:	4602      	mov	r2, r0
 8006a7c:	4b0b      	ldr	r3, [pc, #44]	; (8006aac <HAL_RCC_ClockConfig+0x1bc>)
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	091b      	lsrs	r3, r3, #4
 8006a82:	f003 030f 	and.w	r3, r3, #15
 8006a86:	490a      	ldr	r1, [pc, #40]	; (8006ab0 <HAL_RCC_ClockConfig+0x1c0>)
 8006a88:	5ccb      	ldrb	r3, [r1, r3]
 8006a8a:	fa22 f303 	lsr.w	r3, r2, r3
 8006a8e:	4a09      	ldr	r2, [pc, #36]	; (8006ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8006a90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006a92:	4b09      	ldr	r3, [pc, #36]	; (8006ab8 <HAL_RCC_ClockConfig+0x1c8>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4618      	mov	r0, r3
 8006a98:	f7fd ff8c 	bl	80049b4 <HAL_InitTick>

  return HAL_OK;
 8006a9c:	2300      	movs	r3, #0
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3710      	adds	r7, #16
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}
 8006aa6:	bf00      	nop
 8006aa8:	40023c00 	.word	0x40023c00
 8006aac:	40023800 	.word	0x40023800
 8006ab0:	0800a668 	.word	0x0800a668
 8006ab4:	20000010 	.word	0x20000010
 8006ab8:	2000001c 	.word	0x2000001c

08006abc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006abc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006ac0:	b084      	sub	sp, #16
 8006ac2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	607b      	str	r3, [r7, #4]
 8006ac8:	2300      	movs	r3, #0
 8006aca:	60fb      	str	r3, [r7, #12]
 8006acc:	2300      	movs	r3, #0
 8006ace:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006ad4:	4b67      	ldr	r3, [pc, #412]	; (8006c74 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	f003 030c 	and.w	r3, r3, #12
 8006adc:	2b08      	cmp	r3, #8
 8006ade:	d00d      	beq.n	8006afc <HAL_RCC_GetSysClockFreq+0x40>
 8006ae0:	2b08      	cmp	r3, #8
 8006ae2:	f200 80bd 	bhi.w	8006c60 <HAL_RCC_GetSysClockFreq+0x1a4>
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d002      	beq.n	8006af0 <HAL_RCC_GetSysClockFreq+0x34>
 8006aea:	2b04      	cmp	r3, #4
 8006aec:	d003      	beq.n	8006af6 <HAL_RCC_GetSysClockFreq+0x3a>
 8006aee:	e0b7      	b.n	8006c60 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006af0:	4b61      	ldr	r3, [pc, #388]	; (8006c78 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006af2:	60bb      	str	r3, [r7, #8]
       break;
 8006af4:	e0b7      	b.n	8006c66 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006af6:	4b60      	ldr	r3, [pc, #384]	; (8006c78 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006af8:	60bb      	str	r3, [r7, #8]
      break;
 8006afa:	e0b4      	b.n	8006c66 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006afc:	4b5d      	ldr	r3, [pc, #372]	; (8006c74 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b04:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006b06:	4b5b      	ldr	r3, [pc, #364]	; (8006c74 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d04d      	beq.n	8006bae <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b12:	4b58      	ldr	r3, [pc, #352]	; (8006c74 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	099b      	lsrs	r3, r3, #6
 8006b18:	461a      	mov	r2, r3
 8006b1a:	f04f 0300 	mov.w	r3, #0
 8006b1e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006b22:	f04f 0100 	mov.w	r1, #0
 8006b26:	ea02 0800 	and.w	r8, r2, r0
 8006b2a:	ea03 0901 	and.w	r9, r3, r1
 8006b2e:	4640      	mov	r0, r8
 8006b30:	4649      	mov	r1, r9
 8006b32:	f04f 0200 	mov.w	r2, #0
 8006b36:	f04f 0300 	mov.w	r3, #0
 8006b3a:	014b      	lsls	r3, r1, #5
 8006b3c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006b40:	0142      	lsls	r2, r0, #5
 8006b42:	4610      	mov	r0, r2
 8006b44:	4619      	mov	r1, r3
 8006b46:	ebb0 0008 	subs.w	r0, r0, r8
 8006b4a:	eb61 0109 	sbc.w	r1, r1, r9
 8006b4e:	f04f 0200 	mov.w	r2, #0
 8006b52:	f04f 0300 	mov.w	r3, #0
 8006b56:	018b      	lsls	r3, r1, #6
 8006b58:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006b5c:	0182      	lsls	r2, r0, #6
 8006b5e:	1a12      	subs	r2, r2, r0
 8006b60:	eb63 0301 	sbc.w	r3, r3, r1
 8006b64:	f04f 0000 	mov.w	r0, #0
 8006b68:	f04f 0100 	mov.w	r1, #0
 8006b6c:	00d9      	lsls	r1, r3, #3
 8006b6e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006b72:	00d0      	lsls	r0, r2, #3
 8006b74:	4602      	mov	r2, r0
 8006b76:	460b      	mov	r3, r1
 8006b78:	eb12 0208 	adds.w	r2, r2, r8
 8006b7c:	eb43 0309 	adc.w	r3, r3, r9
 8006b80:	f04f 0000 	mov.w	r0, #0
 8006b84:	f04f 0100 	mov.w	r1, #0
 8006b88:	0299      	lsls	r1, r3, #10
 8006b8a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006b8e:	0290      	lsls	r0, r2, #10
 8006b90:	4602      	mov	r2, r0
 8006b92:	460b      	mov	r3, r1
 8006b94:	4610      	mov	r0, r2
 8006b96:	4619      	mov	r1, r3
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	f04f 0300 	mov.w	r3, #0
 8006ba0:	f7f9 fe7c 	bl	800089c <__aeabi_uldivmod>
 8006ba4:	4602      	mov	r2, r0
 8006ba6:	460b      	mov	r3, r1
 8006ba8:	4613      	mov	r3, r2
 8006baa:	60fb      	str	r3, [r7, #12]
 8006bac:	e04a      	b.n	8006c44 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006bae:	4b31      	ldr	r3, [pc, #196]	; (8006c74 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	099b      	lsrs	r3, r3, #6
 8006bb4:	461a      	mov	r2, r3
 8006bb6:	f04f 0300 	mov.w	r3, #0
 8006bba:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006bbe:	f04f 0100 	mov.w	r1, #0
 8006bc2:	ea02 0400 	and.w	r4, r2, r0
 8006bc6:	ea03 0501 	and.w	r5, r3, r1
 8006bca:	4620      	mov	r0, r4
 8006bcc:	4629      	mov	r1, r5
 8006bce:	f04f 0200 	mov.w	r2, #0
 8006bd2:	f04f 0300 	mov.w	r3, #0
 8006bd6:	014b      	lsls	r3, r1, #5
 8006bd8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006bdc:	0142      	lsls	r2, r0, #5
 8006bde:	4610      	mov	r0, r2
 8006be0:	4619      	mov	r1, r3
 8006be2:	1b00      	subs	r0, r0, r4
 8006be4:	eb61 0105 	sbc.w	r1, r1, r5
 8006be8:	f04f 0200 	mov.w	r2, #0
 8006bec:	f04f 0300 	mov.w	r3, #0
 8006bf0:	018b      	lsls	r3, r1, #6
 8006bf2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006bf6:	0182      	lsls	r2, r0, #6
 8006bf8:	1a12      	subs	r2, r2, r0
 8006bfa:	eb63 0301 	sbc.w	r3, r3, r1
 8006bfe:	f04f 0000 	mov.w	r0, #0
 8006c02:	f04f 0100 	mov.w	r1, #0
 8006c06:	00d9      	lsls	r1, r3, #3
 8006c08:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006c0c:	00d0      	lsls	r0, r2, #3
 8006c0e:	4602      	mov	r2, r0
 8006c10:	460b      	mov	r3, r1
 8006c12:	1912      	adds	r2, r2, r4
 8006c14:	eb45 0303 	adc.w	r3, r5, r3
 8006c18:	f04f 0000 	mov.w	r0, #0
 8006c1c:	f04f 0100 	mov.w	r1, #0
 8006c20:	0299      	lsls	r1, r3, #10
 8006c22:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006c26:	0290      	lsls	r0, r2, #10
 8006c28:	4602      	mov	r2, r0
 8006c2a:	460b      	mov	r3, r1
 8006c2c:	4610      	mov	r0, r2
 8006c2e:	4619      	mov	r1, r3
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	461a      	mov	r2, r3
 8006c34:	f04f 0300 	mov.w	r3, #0
 8006c38:	f7f9 fe30 	bl	800089c <__aeabi_uldivmod>
 8006c3c:	4602      	mov	r2, r0
 8006c3e:	460b      	mov	r3, r1
 8006c40:	4613      	mov	r3, r2
 8006c42:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006c44:	4b0b      	ldr	r3, [pc, #44]	; (8006c74 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	0c1b      	lsrs	r3, r3, #16
 8006c4a:	f003 0303 	and.w	r3, r3, #3
 8006c4e:	3301      	adds	r3, #1
 8006c50:	005b      	lsls	r3, r3, #1
 8006c52:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006c54:	68fa      	ldr	r2, [r7, #12]
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c5c:	60bb      	str	r3, [r7, #8]
      break;
 8006c5e:	e002      	b.n	8006c66 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006c60:	4b05      	ldr	r3, [pc, #20]	; (8006c78 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006c62:	60bb      	str	r3, [r7, #8]
      break;
 8006c64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006c66:	68bb      	ldr	r3, [r7, #8]
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3710      	adds	r7, #16
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006c72:	bf00      	nop
 8006c74:	40023800 	.word	0x40023800
 8006c78:	00f42400 	.word	0x00f42400

08006c7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006c80:	4b03      	ldr	r3, [pc, #12]	; (8006c90 <HAL_RCC_GetHCLKFreq+0x14>)
 8006c82:	681b      	ldr	r3, [r3, #0]
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	46bd      	mov	sp, r7
 8006c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8c:	4770      	bx	lr
 8006c8e:	bf00      	nop
 8006c90:	20000010 	.word	0x20000010

08006c94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006c98:	f7ff fff0 	bl	8006c7c <HAL_RCC_GetHCLKFreq>
 8006c9c:	4602      	mov	r2, r0
 8006c9e:	4b05      	ldr	r3, [pc, #20]	; (8006cb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006ca0:	689b      	ldr	r3, [r3, #8]
 8006ca2:	0a9b      	lsrs	r3, r3, #10
 8006ca4:	f003 0307 	and.w	r3, r3, #7
 8006ca8:	4903      	ldr	r1, [pc, #12]	; (8006cb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006caa:	5ccb      	ldrb	r3, [r1, r3]
 8006cac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	bd80      	pop	{r7, pc}
 8006cb4:	40023800 	.word	0x40023800
 8006cb8:	0800a678 	.word	0x0800a678

08006cbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006cc0:	f7ff ffdc 	bl	8006c7c <HAL_RCC_GetHCLKFreq>
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	4b05      	ldr	r3, [pc, #20]	; (8006cdc <HAL_RCC_GetPCLK2Freq+0x20>)
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	0b5b      	lsrs	r3, r3, #13
 8006ccc:	f003 0307 	and.w	r3, r3, #7
 8006cd0:	4903      	ldr	r1, [pc, #12]	; (8006ce0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006cd2:	5ccb      	ldrb	r3, [r1, r3]
 8006cd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	bd80      	pop	{r7, pc}
 8006cdc:	40023800 	.word	0x40023800
 8006ce0:	0800a678 	.word	0x0800a678

08006ce4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b082      	sub	sp, #8
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d101      	bne.n	8006cf6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	e07b      	b.n	8006dee <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d108      	bne.n	8006d10 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d06:	d009      	beq.n	8006d1c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	61da      	str	r2, [r3, #28]
 8006d0e:	e005      	b.n	8006d1c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2200      	movs	r2, #0
 8006d14:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006d28:	b2db      	uxtb	r3, r3
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d106      	bne.n	8006d3c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2200      	movs	r2, #0
 8006d32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f7fd f986 	bl	8004048 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2202      	movs	r2, #2
 8006d40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	681a      	ldr	r2, [r3, #0]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d52:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	689b      	ldr	r3, [r3, #8]
 8006d60:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006d64:	431a      	orrs	r2, r3
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	68db      	ldr	r3, [r3, #12]
 8006d6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d6e:	431a      	orrs	r2, r3
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	691b      	ldr	r3, [r3, #16]
 8006d74:	f003 0302 	and.w	r3, r3, #2
 8006d78:	431a      	orrs	r2, r3
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	695b      	ldr	r3, [r3, #20]
 8006d7e:	f003 0301 	and.w	r3, r3, #1
 8006d82:	431a      	orrs	r2, r3
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	699b      	ldr	r3, [r3, #24]
 8006d88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d8c:	431a      	orrs	r2, r3
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	69db      	ldr	r3, [r3, #28]
 8006d92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d96:	431a      	orrs	r2, r3
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6a1b      	ldr	r3, [r3, #32]
 8006d9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006da0:	ea42 0103 	orr.w	r1, r2, r3
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006da8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	430a      	orrs	r2, r1
 8006db2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	699b      	ldr	r3, [r3, #24]
 8006db8:	0c1b      	lsrs	r3, r3, #16
 8006dba:	f003 0104 	and.w	r1, r3, #4
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc2:	f003 0210 	and.w	r2, r3, #16
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	430a      	orrs	r2, r1
 8006dcc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	69da      	ldr	r2, [r3, #28]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ddc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2200      	movs	r2, #0
 8006de2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2201      	movs	r2, #1
 8006de8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006dec:	2300      	movs	r3, #0
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3708      	adds	r7, #8
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}

08006df6 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8006df6:	b580      	push	{r7, lr}
 8006df8:	b084      	sub	sp, #16
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	60f8      	str	r0, [r7, #12]
 8006dfe:	60b9      	str	r1, [r7, #8]
 8006e00:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d101      	bne.n	8006e0c <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	e038      	b.n	8006e7e <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8006e12:	b2db      	uxtb	r3, r3
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d106      	bne.n	8006e26 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8006e20:	68f8      	ldr	r0, [r7, #12]
 8006e22:	f7fd fa8d 	bl	8004340 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681a      	ldr	r2, [r3, #0]
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	3308      	adds	r3, #8
 8006e2e:	4619      	mov	r1, r3
 8006e30:	4610      	mov	r0, r2
 8006e32:	f001 fd1d 	bl	8008870 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	6818      	ldr	r0, [r3, #0]
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	461a      	mov	r2, r3
 8006e40:	68b9      	ldr	r1, [r7, #8]
 8006e42:	f001 fd7f 	bl	8008944 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	6858      	ldr	r0, [r3, #4]
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	689a      	ldr	r2, [r3, #8]
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e52:	6879      	ldr	r1, [r7, #4]
 8006e54:	f001 fdac 	bl	80089b0 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	68fa      	ldr	r2, [r7, #12]
 8006e5e:	6892      	ldr	r2, [r2, #8]
 8006e60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	68fa      	ldr	r2, [r7, #12]
 8006e6a:	6892      	ldr	r2, [r2, #8]
 8006e6c:	f041 0101 	orr.w	r1, r1, #1
 8006e70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2201      	movs	r2, #1
 8006e78:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 8006e7c:	2300      	movs	r3, #0
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3710      	adds	r7, #16
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}

08006e86 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006e86:	b580      	push	{r7, lr}
 8006e88:	b082      	sub	sp, #8
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d101      	bne.n	8006e98 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006e94:	2301      	movs	r3, #1
 8006e96:	e041      	b.n	8006f1c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e9e:	b2db      	uxtb	r3, r3
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d106      	bne.n	8006eb2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f7fd f913 	bl	80040d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2202      	movs	r2, #2
 8006eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	3304      	adds	r3, #4
 8006ec2:	4619      	mov	r1, r3
 8006ec4:	4610      	mov	r0, r2
 8006ec6:	f000 fa27 	bl	8007318 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2201      	movs	r2, #1
 8006ece:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2201      	movs	r2, #1
 8006ede:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2201      	movs	r2, #1
 8006eee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2201      	movs	r2, #1
 8006efe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2201      	movs	r2, #1
 8006f06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2201      	movs	r2, #1
 8006f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f1a:	2300      	movs	r3, #0
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3708      	adds	r7, #8
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}

08006f24 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b084      	sub	sp, #16
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d109      	bne.n	8006f48 <HAL_TIM_PWM_Start+0x24>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f3a:	b2db      	uxtb	r3, r3
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	bf14      	ite	ne
 8006f40:	2301      	movne	r3, #1
 8006f42:	2300      	moveq	r3, #0
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	e022      	b.n	8006f8e <HAL_TIM_PWM_Start+0x6a>
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	2b04      	cmp	r3, #4
 8006f4c:	d109      	bne.n	8006f62 <HAL_TIM_PWM_Start+0x3e>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006f54:	b2db      	uxtb	r3, r3
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	bf14      	ite	ne
 8006f5a:	2301      	movne	r3, #1
 8006f5c:	2300      	moveq	r3, #0
 8006f5e:	b2db      	uxtb	r3, r3
 8006f60:	e015      	b.n	8006f8e <HAL_TIM_PWM_Start+0x6a>
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	2b08      	cmp	r3, #8
 8006f66:	d109      	bne.n	8006f7c <HAL_TIM_PWM_Start+0x58>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006f6e:	b2db      	uxtb	r3, r3
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	bf14      	ite	ne
 8006f74:	2301      	movne	r3, #1
 8006f76:	2300      	moveq	r3, #0
 8006f78:	b2db      	uxtb	r3, r3
 8006f7a:	e008      	b.n	8006f8e <HAL_TIM_PWM_Start+0x6a>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f82:	b2db      	uxtb	r3, r3
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	bf14      	ite	ne
 8006f88:	2301      	movne	r3, #1
 8006f8a:	2300      	moveq	r3, #0
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d001      	beq.n	8006f96 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006f92:	2301      	movs	r3, #1
 8006f94:	e07c      	b.n	8007090 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d104      	bne.n	8006fa6 <HAL_TIM_PWM_Start+0x82>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2202      	movs	r2, #2
 8006fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006fa4:	e013      	b.n	8006fce <HAL_TIM_PWM_Start+0xaa>
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	2b04      	cmp	r3, #4
 8006faa:	d104      	bne.n	8006fb6 <HAL_TIM_PWM_Start+0x92>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2202      	movs	r2, #2
 8006fb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006fb4:	e00b      	b.n	8006fce <HAL_TIM_PWM_Start+0xaa>
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	2b08      	cmp	r3, #8
 8006fba:	d104      	bne.n	8006fc6 <HAL_TIM_PWM_Start+0xa2>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2202      	movs	r2, #2
 8006fc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006fc4:	e003      	b.n	8006fce <HAL_TIM_PWM_Start+0xaa>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2202      	movs	r2, #2
 8006fca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	6839      	ldr	r1, [r7, #0]
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f000 fbee 	bl	80077b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a2d      	ldr	r2, [pc, #180]	; (8007098 <HAL_TIM_PWM_Start+0x174>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d004      	beq.n	8006ff0 <HAL_TIM_PWM_Start+0xcc>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a2c      	ldr	r2, [pc, #176]	; (800709c <HAL_TIM_PWM_Start+0x178>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d101      	bne.n	8006ff4 <HAL_TIM_PWM_Start+0xd0>
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	e000      	b.n	8006ff6 <HAL_TIM_PWM_Start+0xd2>
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d007      	beq.n	800700a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007008:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a22      	ldr	r2, [pc, #136]	; (8007098 <HAL_TIM_PWM_Start+0x174>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d022      	beq.n	800705a <HAL_TIM_PWM_Start+0x136>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800701c:	d01d      	beq.n	800705a <HAL_TIM_PWM_Start+0x136>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a1f      	ldr	r2, [pc, #124]	; (80070a0 <HAL_TIM_PWM_Start+0x17c>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d018      	beq.n	800705a <HAL_TIM_PWM_Start+0x136>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a1d      	ldr	r2, [pc, #116]	; (80070a4 <HAL_TIM_PWM_Start+0x180>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d013      	beq.n	800705a <HAL_TIM_PWM_Start+0x136>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a1c      	ldr	r2, [pc, #112]	; (80070a8 <HAL_TIM_PWM_Start+0x184>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d00e      	beq.n	800705a <HAL_TIM_PWM_Start+0x136>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a16      	ldr	r2, [pc, #88]	; (800709c <HAL_TIM_PWM_Start+0x178>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d009      	beq.n	800705a <HAL_TIM_PWM_Start+0x136>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a18      	ldr	r2, [pc, #96]	; (80070ac <HAL_TIM_PWM_Start+0x188>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d004      	beq.n	800705a <HAL_TIM_PWM_Start+0x136>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a16      	ldr	r2, [pc, #88]	; (80070b0 <HAL_TIM_PWM_Start+0x18c>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d111      	bne.n	800707e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	689b      	ldr	r3, [r3, #8]
 8007060:	f003 0307 	and.w	r3, r3, #7
 8007064:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2b06      	cmp	r3, #6
 800706a:	d010      	beq.n	800708e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	681a      	ldr	r2, [r3, #0]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f042 0201 	orr.w	r2, r2, #1
 800707a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800707c:	e007      	b.n	800708e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	681a      	ldr	r2, [r3, #0]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f042 0201 	orr.w	r2, r2, #1
 800708c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800708e:	2300      	movs	r3, #0
}
 8007090:	4618      	mov	r0, r3
 8007092:	3710      	adds	r7, #16
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}
 8007098:	40010000 	.word	0x40010000
 800709c:	40010400 	.word	0x40010400
 80070a0:	40000400 	.word	0x40000400
 80070a4:	40000800 	.word	0x40000800
 80070a8:	40000c00 	.word	0x40000c00
 80070ac:	40014000 	.word	0x40014000
 80070b0:	40001800 	.word	0x40001800

080070b4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b082      	sub	sp, #8
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
 80070bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	2200      	movs	r2, #0
 80070c4:	6839      	ldr	r1, [r7, #0]
 80070c6:	4618      	mov	r0, r3
 80070c8:	f000 fb76 	bl	80077b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a2e      	ldr	r2, [pc, #184]	; (800718c <HAL_TIM_PWM_Stop+0xd8>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d004      	beq.n	80070e0 <HAL_TIM_PWM_Stop+0x2c>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a2d      	ldr	r2, [pc, #180]	; (8007190 <HAL_TIM_PWM_Stop+0xdc>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d101      	bne.n	80070e4 <HAL_TIM_PWM_Stop+0x30>
 80070e0:	2301      	movs	r3, #1
 80070e2:	e000      	b.n	80070e6 <HAL_TIM_PWM_Stop+0x32>
 80070e4:	2300      	movs	r3, #0
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d017      	beq.n	800711a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	6a1a      	ldr	r2, [r3, #32]
 80070f0:	f241 1311 	movw	r3, #4369	; 0x1111
 80070f4:	4013      	ands	r3, r2
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d10f      	bne.n	800711a <HAL_TIM_PWM_Stop+0x66>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	6a1a      	ldr	r2, [r3, #32]
 8007100:	f240 4344 	movw	r3, #1092	; 0x444
 8007104:	4013      	ands	r3, r2
 8007106:	2b00      	cmp	r3, #0
 8007108:	d107      	bne.n	800711a <HAL_TIM_PWM_Stop+0x66>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007118:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	6a1a      	ldr	r2, [r3, #32]
 8007120:	f241 1311 	movw	r3, #4369	; 0x1111
 8007124:	4013      	ands	r3, r2
 8007126:	2b00      	cmp	r3, #0
 8007128:	d10f      	bne.n	800714a <HAL_TIM_PWM_Stop+0x96>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	6a1a      	ldr	r2, [r3, #32]
 8007130:	f240 4344 	movw	r3, #1092	; 0x444
 8007134:	4013      	ands	r3, r2
 8007136:	2b00      	cmp	r3, #0
 8007138:	d107      	bne.n	800714a <HAL_TIM_PWM_Stop+0x96>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	681a      	ldr	r2, [r3, #0]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f022 0201 	bic.w	r2, r2, #1
 8007148:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d104      	bne.n	800715a <HAL_TIM_PWM_Stop+0xa6>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2201      	movs	r2, #1
 8007154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007158:	e013      	b.n	8007182 <HAL_TIM_PWM_Stop+0xce>
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	2b04      	cmp	r3, #4
 800715e:	d104      	bne.n	800716a <HAL_TIM_PWM_Stop+0xb6>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2201      	movs	r2, #1
 8007164:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007168:	e00b      	b.n	8007182 <HAL_TIM_PWM_Stop+0xce>
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	2b08      	cmp	r3, #8
 800716e:	d104      	bne.n	800717a <HAL_TIM_PWM_Stop+0xc6>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2201      	movs	r2, #1
 8007174:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007178:	e003      	b.n	8007182 <HAL_TIM_PWM_Stop+0xce>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2201      	movs	r2, #1
 800717e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8007182:	2300      	movs	r3, #0
}
 8007184:	4618      	mov	r0, r3
 8007186:	3708      	adds	r7, #8
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}
 800718c:	40010000 	.word	0x40010000
 8007190:	40010400 	.word	0x40010400

08007194 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b086      	sub	sp, #24
 8007198:	af00      	add	r7, sp, #0
 800719a:	60f8      	str	r0, [r7, #12]
 800719c:	60b9      	str	r1, [r7, #8]
 800719e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80071a0:	2300      	movs	r3, #0
 80071a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071aa:	2b01      	cmp	r3, #1
 80071ac:	d101      	bne.n	80071b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80071ae:	2302      	movs	r3, #2
 80071b0:	e0ae      	b.n	8007310 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	2201      	movs	r2, #1
 80071b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2b0c      	cmp	r3, #12
 80071be:	f200 809f 	bhi.w	8007300 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80071c2:	a201      	add	r2, pc, #4	; (adr r2, 80071c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80071c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071c8:	080071fd 	.word	0x080071fd
 80071cc:	08007301 	.word	0x08007301
 80071d0:	08007301 	.word	0x08007301
 80071d4:	08007301 	.word	0x08007301
 80071d8:	0800723d 	.word	0x0800723d
 80071dc:	08007301 	.word	0x08007301
 80071e0:	08007301 	.word	0x08007301
 80071e4:	08007301 	.word	0x08007301
 80071e8:	0800727f 	.word	0x0800727f
 80071ec:	08007301 	.word	0x08007301
 80071f0:	08007301 	.word	0x08007301
 80071f4:	08007301 	.word	0x08007301
 80071f8:	080072bf 	.word	0x080072bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	68b9      	ldr	r1, [r7, #8]
 8007202:	4618      	mov	r0, r3
 8007204:	f000 f928 	bl	8007458 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	699a      	ldr	r2, [r3, #24]
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f042 0208 	orr.w	r2, r2, #8
 8007216:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	699a      	ldr	r2, [r3, #24]
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f022 0204 	bic.w	r2, r2, #4
 8007226:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	6999      	ldr	r1, [r3, #24]
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	691a      	ldr	r2, [r3, #16]
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	430a      	orrs	r2, r1
 8007238:	619a      	str	r2, [r3, #24]
      break;
 800723a:	e064      	b.n	8007306 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	68b9      	ldr	r1, [r7, #8]
 8007242:	4618      	mov	r0, r3
 8007244:	f000 f978 	bl	8007538 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	699a      	ldr	r2, [r3, #24]
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007256:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	699a      	ldr	r2, [r3, #24]
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007266:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	6999      	ldr	r1, [r3, #24]
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	691b      	ldr	r3, [r3, #16]
 8007272:	021a      	lsls	r2, r3, #8
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	430a      	orrs	r2, r1
 800727a:	619a      	str	r2, [r3, #24]
      break;
 800727c:	e043      	b.n	8007306 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	68b9      	ldr	r1, [r7, #8]
 8007284:	4618      	mov	r0, r3
 8007286:	f000 f9cd 	bl	8007624 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	69da      	ldr	r2, [r3, #28]
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f042 0208 	orr.w	r2, r2, #8
 8007298:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	69da      	ldr	r2, [r3, #28]
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f022 0204 	bic.w	r2, r2, #4
 80072a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	69d9      	ldr	r1, [r3, #28]
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	691a      	ldr	r2, [r3, #16]
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	430a      	orrs	r2, r1
 80072ba:	61da      	str	r2, [r3, #28]
      break;
 80072bc:	e023      	b.n	8007306 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	68b9      	ldr	r1, [r7, #8]
 80072c4:	4618      	mov	r0, r3
 80072c6:	f000 fa21 	bl	800770c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	69da      	ldr	r2, [r3, #28]
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80072d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	69da      	ldr	r2, [r3, #28]
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	69d9      	ldr	r1, [r3, #28]
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	691b      	ldr	r3, [r3, #16]
 80072f4:	021a      	lsls	r2, r3, #8
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	430a      	orrs	r2, r1
 80072fc:	61da      	str	r2, [r3, #28]
      break;
 80072fe:	e002      	b.n	8007306 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007300:	2301      	movs	r3, #1
 8007302:	75fb      	strb	r3, [r7, #23]
      break;
 8007304:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2200      	movs	r2, #0
 800730a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800730e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007310:	4618      	mov	r0, r3
 8007312:	3718      	adds	r7, #24
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}

08007318 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007318:	b480      	push	{r7}
 800731a:	b085      	sub	sp, #20
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	4a40      	ldr	r2, [pc, #256]	; (800742c <TIM_Base_SetConfig+0x114>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d013      	beq.n	8007358 <TIM_Base_SetConfig+0x40>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007336:	d00f      	beq.n	8007358 <TIM_Base_SetConfig+0x40>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	4a3d      	ldr	r2, [pc, #244]	; (8007430 <TIM_Base_SetConfig+0x118>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d00b      	beq.n	8007358 <TIM_Base_SetConfig+0x40>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	4a3c      	ldr	r2, [pc, #240]	; (8007434 <TIM_Base_SetConfig+0x11c>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d007      	beq.n	8007358 <TIM_Base_SetConfig+0x40>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	4a3b      	ldr	r2, [pc, #236]	; (8007438 <TIM_Base_SetConfig+0x120>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d003      	beq.n	8007358 <TIM_Base_SetConfig+0x40>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	4a3a      	ldr	r2, [pc, #232]	; (800743c <TIM_Base_SetConfig+0x124>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d108      	bne.n	800736a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800735e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	68fa      	ldr	r2, [r7, #12]
 8007366:	4313      	orrs	r3, r2
 8007368:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	4a2f      	ldr	r2, [pc, #188]	; (800742c <TIM_Base_SetConfig+0x114>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d02b      	beq.n	80073ca <TIM_Base_SetConfig+0xb2>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007378:	d027      	beq.n	80073ca <TIM_Base_SetConfig+0xb2>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	4a2c      	ldr	r2, [pc, #176]	; (8007430 <TIM_Base_SetConfig+0x118>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d023      	beq.n	80073ca <TIM_Base_SetConfig+0xb2>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	4a2b      	ldr	r2, [pc, #172]	; (8007434 <TIM_Base_SetConfig+0x11c>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d01f      	beq.n	80073ca <TIM_Base_SetConfig+0xb2>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	4a2a      	ldr	r2, [pc, #168]	; (8007438 <TIM_Base_SetConfig+0x120>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d01b      	beq.n	80073ca <TIM_Base_SetConfig+0xb2>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	4a29      	ldr	r2, [pc, #164]	; (800743c <TIM_Base_SetConfig+0x124>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d017      	beq.n	80073ca <TIM_Base_SetConfig+0xb2>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	4a28      	ldr	r2, [pc, #160]	; (8007440 <TIM_Base_SetConfig+0x128>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d013      	beq.n	80073ca <TIM_Base_SetConfig+0xb2>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	4a27      	ldr	r2, [pc, #156]	; (8007444 <TIM_Base_SetConfig+0x12c>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d00f      	beq.n	80073ca <TIM_Base_SetConfig+0xb2>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	4a26      	ldr	r2, [pc, #152]	; (8007448 <TIM_Base_SetConfig+0x130>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d00b      	beq.n	80073ca <TIM_Base_SetConfig+0xb2>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	4a25      	ldr	r2, [pc, #148]	; (800744c <TIM_Base_SetConfig+0x134>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d007      	beq.n	80073ca <TIM_Base_SetConfig+0xb2>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	4a24      	ldr	r2, [pc, #144]	; (8007450 <TIM_Base_SetConfig+0x138>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d003      	beq.n	80073ca <TIM_Base_SetConfig+0xb2>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	4a23      	ldr	r2, [pc, #140]	; (8007454 <TIM_Base_SetConfig+0x13c>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d108      	bne.n	80073dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	68db      	ldr	r3, [r3, #12]
 80073d6:	68fa      	ldr	r2, [r7, #12]
 80073d8:	4313      	orrs	r3, r2
 80073da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	695b      	ldr	r3, [r3, #20]
 80073e6:	4313      	orrs	r3, r2
 80073e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	68fa      	ldr	r2, [r7, #12]
 80073ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	689a      	ldr	r2, [r3, #8]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	681a      	ldr	r2, [r3, #0]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	4a0a      	ldr	r2, [pc, #40]	; (800742c <TIM_Base_SetConfig+0x114>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d003      	beq.n	8007410 <TIM_Base_SetConfig+0xf8>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	4a0c      	ldr	r2, [pc, #48]	; (800743c <TIM_Base_SetConfig+0x124>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d103      	bne.n	8007418 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	691a      	ldr	r2, [r3, #16]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2201      	movs	r2, #1
 800741c:	615a      	str	r2, [r3, #20]
}
 800741e:	bf00      	nop
 8007420:	3714      	adds	r7, #20
 8007422:	46bd      	mov	sp, r7
 8007424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007428:	4770      	bx	lr
 800742a:	bf00      	nop
 800742c:	40010000 	.word	0x40010000
 8007430:	40000400 	.word	0x40000400
 8007434:	40000800 	.word	0x40000800
 8007438:	40000c00 	.word	0x40000c00
 800743c:	40010400 	.word	0x40010400
 8007440:	40014000 	.word	0x40014000
 8007444:	40014400 	.word	0x40014400
 8007448:	40014800 	.word	0x40014800
 800744c:	40001800 	.word	0x40001800
 8007450:	40001c00 	.word	0x40001c00
 8007454:	40002000 	.word	0x40002000

08007458 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007458:	b480      	push	{r7}
 800745a:	b087      	sub	sp, #28
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6a1b      	ldr	r3, [r3, #32]
 8007466:	f023 0201 	bic.w	r2, r3, #1
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6a1b      	ldr	r3, [r3, #32]
 8007472:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	699b      	ldr	r3, [r3, #24]
 800747e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007486:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f023 0303 	bic.w	r3, r3, #3
 800748e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	68fa      	ldr	r2, [r7, #12]
 8007496:	4313      	orrs	r3, r2
 8007498:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	f023 0302 	bic.w	r3, r3, #2
 80074a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	689b      	ldr	r3, [r3, #8]
 80074a6:	697a      	ldr	r2, [r7, #20]
 80074a8:	4313      	orrs	r3, r2
 80074aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	4a20      	ldr	r2, [pc, #128]	; (8007530 <TIM_OC1_SetConfig+0xd8>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d003      	beq.n	80074bc <TIM_OC1_SetConfig+0x64>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	4a1f      	ldr	r2, [pc, #124]	; (8007534 <TIM_OC1_SetConfig+0xdc>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d10c      	bne.n	80074d6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	f023 0308 	bic.w	r3, r3, #8
 80074c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	68db      	ldr	r3, [r3, #12]
 80074c8:	697a      	ldr	r2, [r7, #20]
 80074ca:	4313      	orrs	r3, r2
 80074cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	f023 0304 	bic.w	r3, r3, #4
 80074d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	4a15      	ldr	r2, [pc, #84]	; (8007530 <TIM_OC1_SetConfig+0xd8>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d003      	beq.n	80074e6 <TIM_OC1_SetConfig+0x8e>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	4a14      	ldr	r2, [pc, #80]	; (8007534 <TIM_OC1_SetConfig+0xdc>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d111      	bne.n	800750a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80074f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	695b      	ldr	r3, [r3, #20]
 80074fa:	693a      	ldr	r2, [r7, #16]
 80074fc:	4313      	orrs	r3, r2
 80074fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	699b      	ldr	r3, [r3, #24]
 8007504:	693a      	ldr	r2, [r7, #16]
 8007506:	4313      	orrs	r3, r2
 8007508:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	693a      	ldr	r2, [r7, #16]
 800750e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	68fa      	ldr	r2, [r7, #12]
 8007514:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	685a      	ldr	r2, [r3, #4]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	697a      	ldr	r2, [r7, #20]
 8007522:	621a      	str	r2, [r3, #32]
}
 8007524:	bf00      	nop
 8007526:	371c      	adds	r7, #28
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr
 8007530:	40010000 	.word	0x40010000
 8007534:	40010400 	.word	0x40010400

08007538 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007538:	b480      	push	{r7}
 800753a:	b087      	sub	sp, #28
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
 8007540:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6a1b      	ldr	r3, [r3, #32]
 8007546:	f023 0210 	bic.w	r2, r3, #16
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6a1b      	ldr	r3, [r3, #32]
 8007552:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	699b      	ldr	r3, [r3, #24]
 800755e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007566:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800756e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	021b      	lsls	r3, r3, #8
 8007576:	68fa      	ldr	r2, [r7, #12]
 8007578:	4313      	orrs	r3, r2
 800757a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	f023 0320 	bic.w	r3, r3, #32
 8007582:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	689b      	ldr	r3, [r3, #8]
 8007588:	011b      	lsls	r3, r3, #4
 800758a:	697a      	ldr	r2, [r7, #20]
 800758c:	4313      	orrs	r3, r2
 800758e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	4a22      	ldr	r2, [pc, #136]	; (800761c <TIM_OC2_SetConfig+0xe4>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d003      	beq.n	80075a0 <TIM_OC2_SetConfig+0x68>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	4a21      	ldr	r2, [pc, #132]	; (8007620 <TIM_OC2_SetConfig+0xe8>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d10d      	bne.n	80075bc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	68db      	ldr	r3, [r3, #12]
 80075ac:	011b      	lsls	r3, r3, #4
 80075ae:	697a      	ldr	r2, [r7, #20]
 80075b0:	4313      	orrs	r3, r2
 80075b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	4a17      	ldr	r2, [pc, #92]	; (800761c <TIM_OC2_SetConfig+0xe4>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d003      	beq.n	80075cc <TIM_OC2_SetConfig+0x94>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	4a16      	ldr	r2, [pc, #88]	; (8007620 <TIM_OC2_SetConfig+0xe8>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d113      	bne.n	80075f4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80075d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80075da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	695b      	ldr	r3, [r3, #20]
 80075e0:	009b      	lsls	r3, r3, #2
 80075e2:	693a      	ldr	r2, [r7, #16]
 80075e4:	4313      	orrs	r3, r2
 80075e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	699b      	ldr	r3, [r3, #24]
 80075ec:	009b      	lsls	r3, r3, #2
 80075ee:	693a      	ldr	r2, [r7, #16]
 80075f0:	4313      	orrs	r3, r2
 80075f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	693a      	ldr	r2, [r7, #16]
 80075f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	68fa      	ldr	r2, [r7, #12]
 80075fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	685a      	ldr	r2, [r3, #4]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	697a      	ldr	r2, [r7, #20]
 800760c:	621a      	str	r2, [r3, #32]
}
 800760e:	bf00      	nop
 8007610:	371c      	adds	r7, #28
 8007612:	46bd      	mov	sp, r7
 8007614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007618:	4770      	bx	lr
 800761a:	bf00      	nop
 800761c:	40010000 	.word	0x40010000
 8007620:	40010400 	.word	0x40010400

08007624 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007624:	b480      	push	{r7}
 8007626:	b087      	sub	sp, #28
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
 800762c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6a1b      	ldr	r3, [r3, #32]
 8007632:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6a1b      	ldr	r3, [r3, #32]
 800763e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	69db      	ldr	r3, [r3, #28]
 800764a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007652:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	f023 0303 	bic.w	r3, r3, #3
 800765a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	68fa      	ldr	r2, [r7, #12]
 8007662:	4313      	orrs	r3, r2
 8007664:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800766c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	689b      	ldr	r3, [r3, #8]
 8007672:	021b      	lsls	r3, r3, #8
 8007674:	697a      	ldr	r2, [r7, #20]
 8007676:	4313      	orrs	r3, r2
 8007678:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	4a21      	ldr	r2, [pc, #132]	; (8007704 <TIM_OC3_SetConfig+0xe0>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d003      	beq.n	800768a <TIM_OC3_SetConfig+0x66>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	4a20      	ldr	r2, [pc, #128]	; (8007708 <TIM_OC3_SetConfig+0xe4>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d10d      	bne.n	80076a6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007690:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	68db      	ldr	r3, [r3, #12]
 8007696:	021b      	lsls	r3, r3, #8
 8007698:	697a      	ldr	r2, [r7, #20]
 800769a:	4313      	orrs	r3, r2
 800769c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80076a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	4a16      	ldr	r2, [pc, #88]	; (8007704 <TIM_OC3_SetConfig+0xe0>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d003      	beq.n	80076b6 <TIM_OC3_SetConfig+0x92>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	4a15      	ldr	r2, [pc, #84]	; (8007708 <TIM_OC3_SetConfig+0xe4>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d113      	bne.n	80076de <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80076bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80076c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	695b      	ldr	r3, [r3, #20]
 80076ca:	011b      	lsls	r3, r3, #4
 80076cc:	693a      	ldr	r2, [r7, #16]
 80076ce:	4313      	orrs	r3, r2
 80076d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	699b      	ldr	r3, [r3, #24]
 80076d6:	011b      	lsls	r3, r3, #4
 80076d8:	693a      	ldr	r2, [r7, #16]
 80076da:	4313      	orrs	r3, r2
 80076dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	693a      	ldr	r2, [r7, #16]
 80076e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	68fa      	ldr	r2, [r7, #12]
 80076e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	685a      	ldr	r2, [r3, #4]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	697a      	ldr	r2, [r7, #20]
 80076f6:	621a      	str	r2, [r3, #32]
}
 80076f8:	bf00      	nop
 80076fa:	371c      	adds	r7, #28
 80076fc:	46bd      	mov	sp, r7
 80076fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007702:	4770      	bx	lr
 8007704:	40010000 	.word	0x40010000
 8007708:	40010400 	.word	0x40010400

0800770c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800770c:	b480      	push	{r7}
 800770e:	b087      	sub	sp, #28
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6a1b      	ldr	r3, [r3, #32]
 800771a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6a1b      	ldr	r3, [r3, #32]
 8007726:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	685b      	ldr	r3, [r3, #4]
 800772c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	69db      	ldr	r3, [r3, #28]
 8007732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800773a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007742:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	021b      	lsls	r3, r3, #8
 800774a:	68fa      	ldr	r2, [r7, #12]
 800774c:	4313      	orrs	r3, r2
 800774e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007756:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	689b      	ldr	r3, [r3, #8]
 800775c:	031b      	lsls	r3, r3, #12
 800775e:	693a      	ldr	r2, [r7, #16]
 8007760:	4313      	orrs	r3, r2
 8007762:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	4a12      	ldr	r2, [pc, #72]	; (80077b0 <TIM_OC4_SetConfig+0xa4>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d003      	beq.n	8007774 <TIM_OC4_SetConfig+0x68>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	4a11      	ldr	r2, [pc, #68]	; (80077b4 <TIM_OC4_SetConfig+0xa8>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d109      	bne.n	8007788 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800777a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	695b      	ldr	r3, [r3, #20]
 8007780:	019b      	lsls	r3, r3, #6
 8007782:	697a      	ldr	r2, [r7, #20]
 8007784:	4313      	orrs	r3, r2
 8007786:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	697a      	ldr	r2, [r7, #20]
 800778c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	68fa      	ldr	r2, [r7, #12]
 8007792:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	685a      	ldr	r2, [r3, #4]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	693a      	ldr	r2, [r7, #16]
 80077a0:	621a      	str	r2, [r3, #32]
}
 80077a2:	bf00      	nop
 80077a4:	371c      	adds	r7, #28
 80077a6:	46bd      	mov	sp, r7
 80077a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ac:	4770      	bx	lr
 80077ae:	bf00      	nop
 80077b0:	40010000 	.word	0x40010000
 80077b4:	40010400 	.word	0x40010400

080077b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b087      	sub	sp, #28
 80077bc:	af00      	add	r7, sp, #0
 80077be:	60f8      	str	r0, [r7, #12]
 80077c0:	60b9      	str	r1, [r7, #8]
 80077c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	f003 031f 	and.w	r3, r3, #31
 80077ca:	2201      	movs	r2, #1
 80077cc:	fa02 f303 	lsl.w	r3, r2, r3
 80077d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	6a1a      	ldr	r2, [r3, #32]
 80077d6:	697b      	ldr	r3, [r7, #20]
 80077d8:	43db      	mvns	r3, r3
 80077da:	401a      	ands	r2, r3
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	6a1a      	ldr	r2, [r3, #32]
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	f003 031f 	and.w	r3, r3, #31
 80077ea:	6879      	ldr	r1, [r7, #4]
 80077ec:	fa01 f303 	lsl.w	r3, r1, r3
 80077f0:	431a      	orrs	r2, r3
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	621a      	str	r2, [r3, #32]
}
 80077f6:	bf00      	nop
 80077f8:	371c      	adds	r7, #28
 80077fa:	46bd      	mov	sp, r7
 80077fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007800:	4770      	bx	lr
	...

08007804 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007804:	b480      	push	{r7}
 8007806:	b085      	sub	sp, #20
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007814:	2b01      	cmp	r3, #1
 8007816:	d101      	bne.n	800781c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007818:	2302      	movs	r3, #2
 800781a:	e05a      	b.n	80078d2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2201      	movs	r2, #1
 8007820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2202      	movs	r2, #2
 8007828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	689b      	ldr	r3, [r3, #8]
 800783a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007842:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	68fa      	ldr	r2, [r7, #12]
 800784a:	4313      	orrs	r3, r2
 800784c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	68fa      	ldr	r2, [r7, #12]
 8007854:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a21      	ldr	r2, [pc, #132]	; (80078e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d022      	beq.n	80078a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007868:	d01d      	beq.n	80078a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4a1d      	ldr	r2, [pc, #116]	; (80078e4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d018      	beq.n	80078a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a1b      	ldr	r2, [pc, #108]	; (80078e8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d013      	beq.n	80078a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4a1a      	ldr	r2, [pc, #104]	; (80078ec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d00e      	beq.n	80078a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a18      	ldr	r2, [pc, #96]	; (80078f0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d009      	beq.n	80078a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a17      	ldr	r2, [pc, #92]	; (80078f4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d004      	beq.n	80078a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a15      	ldr	r2, [pc, #84]	; (80078f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d10c      	bne.n	80078c0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80078ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	685b      	ldr	r3, [r3, #4]
 80078b2:	68ba      	ldr	r2, [r7, #8]
 80078b4:	4313      	orrs	r3, r2
 80078b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	68ba      	ldr	r2, [r7, #8]
 80078be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2201      	movs	r2, #1
 80078c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2200      	movs	r2, #0
 80078cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80078d0:	2300      	movs	r3, #0
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3714      	adds	r7, #20
 80078d6:	46bd      	mov	sp, r7
 80078d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078dc:	4770      	bx	lr
 80078de:	bf00      	nop
 80078e0:	40010000 	.word	0x40010000
 80078e4:	40000400 	.word	0x40000400
 80078e8:	40000800 	.word	0x40000800
 80078ec:	40000c00 	.word	0x40000c00
 80078f0:	40010400 	.word	0x40010400
 80078f4:	40014000 	.word	0x40014000
 80078f8:	40001800 	.word	0x40001800

080078fc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b085      	sub	sp, #20
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007906:	2300      	movs	r3, #0
 8007908:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007910:	2b01      	cmp	r3, #1
 8007912:	d101      	bne.n	8007918 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007914:	2302      	movs	r3, #2
 8007916:	e03d      	b.n	8007994 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2201      	movs	r2, #1
 800791c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	68db      	ldr	r3, [r3, #12]
 800792a:	4313      	orrs	r3, r2
 800792c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	689b      	ldr	r3, [r3, #8]
 8007938:	4313      	orrs	r3, r2
 800793a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	4313      	orrs	r3, r2
 8007948:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4313      	orrs	r3, r2
 8007956:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	691b      	ldr	r3, [r3, #16]
 8007962:	4313      	orrs	r3, r2
 8007964:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	695b      	ldr	r3, [r3, #20]
 8007970:	4313      	orrs	r3, r2
 8007972:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	69db      	ldr	r3, [r3, #28]
 800797e:	4313      	orrs	r3, r2
 8007980:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	68fa      	ldr	r2, [r7, #12]
 8007988:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2200      	movs	r2, #0
 800798e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007992:	2300      	movs	r3, #0
}
 8007994:	4618      	mov	r0, r3
 8007996:	3714      	adds	r7, #20
 8007998:	46bd      	mov	sp, r7
 800799a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799e:	4770      	bx	lr

080079a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b082      	sub	sp, #8
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d101      	bne.n	80079b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80079ae:	2301      	movs	r3, #1
 80079b0:	e03f      	b.n	8007a32 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079b8:	b2db      	uxtb	r3, r3
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d106      	bne.n	80079cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2200      	movs	r2, #0
 80079c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f7fc fbe2 	bl	8004190 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2224      	movs	r2, #36	; 0x24
 80079d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	68da      	ldr	r2, [r3, #12]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80079e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f000 fd7b 	bl	80084e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	691a      	ldr	r2, [r3, #16]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80079f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	695a      	ldr	r2, [r3, #20]
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007a08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	68da      	ldr	r2, [r3, #12]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007a18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2220      	movs	r2, #32
 8007a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2220      	movs	r2, #32
 8007a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007a30:	2300      	movs	r3, #0
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3708      	adds	r7, #8
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}

08007a3a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a3a:	b580      	push	{r7, lr}
 8007a3c:	b08a      	sub	sp, #40	; 0x28
 8007a3e:	af02      	add	r7, sp, #8
 8007a40:	60f8      	str	r0, [r7, #12]
 8007a42:	60b9      	str	r1, [r7, #8]
 8007a44:	603b      	str	r3, [r7, #0]
 8007a46:	4613      	mov	r3, r2
 8007a48:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a54:	b2db      	uxtb	r3, r3
 8007a56:	2b20      	cmp	r3, #32
 8007a58:	d17c      	bne.n	8007b54 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d002      	beq.n	8007a66 <HAL_UART_Transmit+0x2c>
 8007a60:	88fb      	ldrh	r3, [r7, #6]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d101      	bne.n	8007a6a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007a66:	2301      	movs	r3, #1
 8007a68:	e075      	b.n	8007b56 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a70:	2b01      	cmp	r3, #1
 8007a72:	d101      	bne.n	8007a78 <HAL_UART_Transmit+0x3e>
 8007a74:	2302      	movs	r3, #2
 8007a76:	e06e      	b.n	8007b56 <HAL_UART_Transmit+0x11c>
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2200      	movs	r2, #0
 8007a84:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2221      	movs	r2, #33	; 0x21
 8007a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007a8e:	f7fc ffd5 	bl	8004a3c <HAL_GetTick>
 8007a92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	88fa      	ldrh	r2, [r7, #6]
 8007a98:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	88fa      	ldrh	r2, [r7, #6]
 8007a9e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	689b      	ldr	r3, [r3, #8]
 8007aa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007aa8:	d108      	bne.n	8007abc <HAL_UART_Transmit+0x82>
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	691b      	ldr	r3, [r3, #16]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d104      	bne.n	8007abc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	61bb      	str	r3, [r7, #24]
 8007aba:	e003      	b.n	8007ac4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007acc:	e02a      	b.n	8007b24 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	9300      	str	r3, [sp, #0]
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	2180      	movs	r1, #128	; 0x80
 8007ad8:	68f8      	ldr	r0, [r7, #12]
 8007ada:	f000 faf9 	bl	80080d0 <UART_WaitOnFlagUntilTimeout>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d001      	beq.n	8007ae8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007ae4:	2303      	movs	r3, #3
 8007ae6:	e036      	b.n	8007b56 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007ae8:	69fb      	ldr	r3, [r7, #28]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d10b      	bne.n	8007b06 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007aee:	69bb      	ldr	r3, [r7, #24]
 8007af0:	881b      	ldrh	r3, [r3, #0]
 8007af2:	461a      	mov	r2, r3
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007afc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007afe:	69bb      	ldr	r3, [r7, #24]
 8007b00:	3302      	adds	r3, #2
 8007b02:	61bb      	str	r3, [r7, #24]
 8007b04:	e007      	b.n	8007b16 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007b06:	69fb      	ldr	r3, [r7, #28]
 8007b08:	781a      	ldrb	r2, [r3, #0]
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007b10:	69fb      	ldr	r3, [r7, #28]
 8007b12:	3301      	adds	r3, #1
 8007b14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007b1a:	b29b      	uxth	r3, r3
 8007b1c:	3b01      	subs	r3, #1
 8007b1e:	b29a      	uxth	r2, r3
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007b28:	b29b      	uxth	r3, r3
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d1cf      	bne.n	8007ace <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	9300      	str	r3, [sp, #0]
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	2200      	movs	r2, #0
 8007b36:	2140      	movs	r1, #64	; 0x40
 8007b38:	68f8      	ldr	r0, [r7, #12]
 8007b3a:	f000 fac9 	bl	80080d0 <UART_WaitOnFlagUntilTimeout>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d001      	beq.n	8007b48 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007b44:	2303      	movs	r3, #3
 8007b46:	e006      	b.n	8007b56 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2220      	movs	r2, #32
 8007b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007b50:	2300      	movs	r3, #0
 8007b52:	e000      	b.n	8007b56 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007b54:	2302      	movs	r3, #2
  }
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3720      	adds	r7, #32
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}
	...

08007b60 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b0ba      	sub	sp, #232	; 0xe8
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	68db      	ldr	r3, [r3, #12]
 8007b78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	695b      	ldr	r3, [r3, #20]
 8007b82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007b86:	2300      	movs	r3, #0
 8007b88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007b92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b96:	f003 030f 	and.w	r3, r3, #15
 8007b9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007b9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d10f      	bne.n	8007bc6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007ba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007baa:	f003 0320 	and.w	r3, r3, #32
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d009      	beq.n	8007bc6 <HAL_UART_IRQHandler+0x66>
 8007bb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bb6:	f003 0320 	and.w	r3, r3, #32
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d003      	beq.n	8007bc6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f000 fbd3 	bl	800836a <UART_Receive_IT>
      return;
 8007bc4:	e256      	b.n	8008074 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007bc6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	f000 80de 	beq.w	8007d8c <HAL_UART_IRQHandler+0x22c>
 8007bd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007bd4:	f003 0301 	and.w	r3, r3, #1
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d106      	bne.n	8007bea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007bdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007be0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	f000 80d1 	beq.w	8007d8c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bee:	f003 0301 	and.w	r3, r3, #1
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d00b      	beq.n	8007c0e <HAL_UART_IRQHandler+0xae>
 8007bf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d005      	beq.n	8007c0e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c06:	f043 0201 	orr.w	r2, r3, #1
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007c0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c12:	f003 0304 	and.w	r3, r3, #4
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d00b      	beq.n	8007c32 <HAL_UART_IRQHandler+0xd2>
 8007c1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c1e:	f003 0301 	and.w	r3, r3, #1
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d005      	beq.n	8007c32 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c2a:	f043 0202 	orr.w	r2, r3, #2
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007c32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c36:	f003 0302 	and.w	r3, r3, #2
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d00b      	beq.n	8007c56 <HAL_UART_IRQHandler+0xf6>
 8007c3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c42:	f003 0301 	and.w	r3, r3, #1
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d005      	beq.n	8007c56 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c4e:	f043 0204 	orr.w	r2, r3, #4
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007c56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c5a:	f003 0308 	and.w	r3, r3, #8
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d011      	beq.n	8007c86 <HAL_UART_IRQHandler+0x126>
 8007c62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c66:	f003 0320 	and.w	r3, r3, #32
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d105      	bne.n	8007c7a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007c6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c72:	f003 0301 	and.w	r3, r3, #1
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d005      	beq.n	8007c86 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c7e:	f043 0208 	orr.w	r2, r3, #8
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	f000 81ed 	beq.w	800806a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007c90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c94:	f003 0320 	and.w	r3, r3, #32
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d008      	beq.n	8007cae <HAL_UART_IRQHandler+0x14e>
 8007c9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ca0:	f003 0320 	and.w	r3, r3, #32
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d002      	beq.n	8007cae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f000 fb5e 	bl	800836a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	695b      	ldr	r3, [r3, #20]
 8007cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cb8:	2b40      	cmp	r3, #64	; 0x40
 8007cba:	bf0c      	ite	eq
 8007cbc:	2301      	moveq	r3, #1
 8007cbe:	2300      	movne	r3, #0
 8007cc0:	b2db      	uxtb	r3, r3
 8007cc2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cca:	f003 0308 	and.w	r3, r3, #8
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d103      	bne.n	8007cda <HAL_UART_IRQHandler+0x17a>
 8007cd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d04f      	beq.n	8007d7a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f000 fa66 	bl	80081ac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	695b      	ldr	r3, [r3, #20]
 8007ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cea:	2b40      	cmp	r3, #64	; 0x40
 8007cec:	d141      	bne.n	8007d72 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	3314      	adds	r3, #20
 8007cf4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cf8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007cfc:	e853 3f00 	ldrex	r3, [r3]
 8007d00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007d04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007d08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	3314      	adds	r3, #20
 8007d16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007d1a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007d1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d22:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007d26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007d2a:	e841 2300 	strex	r3, r2, [r1]
 8007d2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007d32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d1d9      	bne.n	8007cee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d013      	beq.n	8007d6a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d46:	4a7d      	ldr	r2, [pc, #500]	; (8007f3c <HAL_UART_IRQHandler+0x3dc>)
 8007d48:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f7fd f825 	bl	8004d9e <HAL_DMA_Abort_IT>
 8007d54:	4603      	mov	r3, r0
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d016      	beq.n	8007d88 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d60:	687a      	ldr	r2, [r7, #4]
 8007d62:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007d64:	4610      	mov	r0, r2
 8007d66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d68:	e00e      	b.n	8007d88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f000 f99a 	bl	80080a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d70:	e00a      	b.n	8007d88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f000 f996 	bl	80080a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d78:	e006      	b.n	8007d88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f000 f992 	bl	80080a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2200      	movs	r2, #0
 8007d84:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007d86:	e170      	b.n	800806a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d88:	bf00      	nop
    return;
 8007d8a:	e16e      	b.n	800806a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d90:	2b01      	cmp	r3, #1
 8007d92:	f040 814a 	bne.w	800802a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007d96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d9a:	f003 0310 	and.w	r3, r3, #16
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	f000 8143 	beq.w	800802a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007da4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007da8:	f003 0310 	and.w	r3, r3, #16
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	f000 813c 	beq.w	800802a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007db2:	2300      	movs	r3, #0
 8007db4:	60bb      	str	r3, [r7, #8]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	60bb      	str	r3, [r7, #8]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	60bb      	str	r3, [r7, #8]
 8007dc6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	695b      	ldr	r3, [r3, #20]
 8007dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dd2:	2b40      	cmp	r3, #64	; 0x40
 8007dd4:	f040 80b4 	bne.w	8007f40 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	685b      	ldr	r3, [r3, #4]
 8007de0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007de4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	f000 8140 	beq.w	800806e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007df2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007df6:	429a      	cmp	r2, r3
 8007df8:	f080 8139 	bcs.w	800806e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007e02:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e08:	69db      	ldr	r3, [r3, #28]
 8007e0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e0e:	f000 8088 	beq.w	8007f22 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	330c      	adds	r3, #12
 8007e18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007e20:	e853 3f00 	ldrex	r3, [r3]
 8007e24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007e28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007e2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	330c      	adds	r3, #12
 8007e3a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007e3e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007e42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e46:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007e4a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007e4e:	e841 2300 	strex	r3, r2, [r1]
 8007e52:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007e56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d1d9      	bne.n	8007e12 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	3314      	adds	r3, #20
 8007e64:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e68:	e853 3f00 	ldrex	r3, [r3]
 8007e6c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007e6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e70:	f023 0301 	bic.w	r3, r3, #1
 8007e74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	3314      	adds	r3, #20
 8007e7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007e82:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007e86:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e88:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007e8a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007e8e:	e841 2300 	strex	r3, r2, [r1]
 8007e92:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007e94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d1e1      	bne.n	8007e5e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	3314      	adds	r3, #20
 8007ea0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ea2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007ea4:	e853 3f00 	ldrex	r3, [r3]
 8007ea8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007eaa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007eac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007eb0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	3314      	adds	r3, #20
 8007eba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007ebe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007ec0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ec2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007ec4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007ec6:	e841 2300 	strex	r3, r2, [r1]
 8007eca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007ecc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d1e3      	bne.n	8007e9a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2220      	movs	r2, #32
 8007ed6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2200      	movs	r2, #0
 8007ede:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	330c      	adds	r3, #12
 8007ee6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ee8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007eea:	e853 3f00 	ldrex	r3, [r3]
 8007eee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007ef0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ef2:	f023 0310 	bic.w	r3, r3, #16
 8007ef6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	330c      	adds	r3, #12
 8007f00:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007f04:	65ba      	str	r2, [r7, #88]	; 0x58
 8007f06:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f08:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007f0a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007f0c:	e841 2300 	strex	r3, r2, [r1]
 8007f10:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007f12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d1e3      	bne.n	8007ee0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f7fc fece 	bl	8004cbe <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007f2a:	b29b      	uxth	r3, r3
 8007f2c:	1ad3      	subs	r3, r2, r3
 8007f2e:	b29b      	uxth	r3, r3
 8007f30:	4619      	mov	r1, r3
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f000 f8c0 	bl	80080b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007f38:	e099      	b.n	800806e <HAL_UART_IRQHandler+0x50e>
 8007f3a:	bf00      	nop
 8007f3c:	08008273 	.word	0x08008273
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007f48:	b29b      	uxth	r3, r3
 8007f4a:	1ad3      	subs	r3, r2, r3
 8007f4c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007f54:	b29b      	uxth	r3, r3
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	f000 808b 	beq.w	8008072 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007f5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	f000 8086 	beq.w	8008072 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	330c      	adds	r3, #12
 8007f6c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f70:	e853 3f00 	ldrex	r3, [r3]
 8007f74:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f78:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f7c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	330c      	adds	r3, #12
 8007f86:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007f8a:	647a      	str	r2, [r7, #68]	; 0x44
 8007f8c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f8e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007f90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f92:	e841 2300 	strex	r3, r2, [r1]
 8007f96:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007f98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d1e3      	bne.n	8007f66 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	3314      	adds	r3, #20
 8007fa4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa8:	e853 3f00 	ldrex	r3, [r3]
 8007fac:	623b      	str	r3, [r7, #32]
   return(result);
 8007fae:	6a3b      	ldr	r3, [r7, #32]
 8007fb0:	f023 0301 	bic.w	r3, r3, #1
 8007fb4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	3314      	adds	r3, #20
 8007fbe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007fc2:	633a      	str	r2, [r7, #48]	; 0x30
 8007fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007fc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fca:	e841 2300 	strex	r3, r2, [r1]
 8007fce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d1e3      	bne.n	8007f9e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2220      	movs	r2, #32
 8007fda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	330c      	adds	r3, #12
 8007fea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	e853 3f00 	ldrex	r3, [r3]
 8007ff2:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f023 0310 	bic.w	r3, r3, #16
 8007ffa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	330c      	adds	r3, #12
 8008004:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008008:	61fa      	str	r2, [r7, #28]
 800800a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800800c:	69b9      	ldr	r1, [r7, #24]
 800800e:	69fa      	ldr	r2, [r7, #28]
 8008010:	e841 2300 	strex	r3, r2, [r1]
 8008014:	617b      	str	r3, [r7, #20]
   return(result);
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d1e3      	bne.n	8007fe4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800801c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008020:	4619      	mov	r1, r3
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f000 f848 	bl	80080b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008028:	e023      	b.n	8008072 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800802a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800802e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008032:	2b00      	cmp	r3, #0
 8008034:	d009      	beq.n	800804a <HAL_UART_IRQHandler+0x4ea>
 8008036:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800803a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800803e:	2b00      	cmp	r3, #0
 8008040:	d003      	beq.n	800804a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f000 f929 	bl	800829a <UART_Transmit_IT>
    return;
 8008048:	e014      	b.n	8008074 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800804a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800804e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008052:	2b00      	cmp	r3, #0
 8008054:	d00e      	beq.n	8008074 <HAL_UART_IRQHandler+0x514>
 8008056:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800805a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800805e:	2b00      	cmp	r3, #0
 8008060:	d008      	beq.n	8008074 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f000 f969 	bl	800833a <UART_EndTransmit_IT>
    return;
 8008068:	e004      	b.n	8008074 <HAL_UART_IRQHandler+0x514>
    return;
 800806a:	bf00      	nop
 800806c:	e002      	b.n	8008074 <HAL_UART_IRQHandler+0x514>
      return;
 800806e:	bf00      	nop
 8008070:	e000      	b.n	8008074 <HAL_UART_IRQHandler+0x514>
      return;
 8008072:	bf00      	nop
  }
}
 8008074:	37e8      	adds	r7, #232	; 0xe8
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}
 800807a:	bf00      	nop

0800807c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800807c:	b480      	push	{r7}
 800807e:	b083      	sub	sp, #12
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008084:	bf00      	nop
 8008086:	370c      	adds	r7, #12
 8008088:	46bd      	mov	sp, r7
 800808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808e:	4770      	bx	lr

08008090 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008090:	b480      	push	{r7}
 8008092:	b083      	sub	sp, #12
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008098:	bf00      	nop
 800809a:	370c      	adds	r7, #12
 800809c:	46bd      	mov	sp, r7
 800809e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a2:	4770      	bx	lr

080080a4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80080a4:	b480      	push	{r7}
 80080a6:	b083      	sub	sp, #12
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80080ac:	bf00      	nop
 80080ae:	370c      	adds	r7, #12
 80080b0:	46bd      	mov	sp, r7
 80080b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b6:	4770      	bx	lr

080080b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b083      	sub	sp, #12
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
 80080c0:	460b      	mov	r3, r1
 80080c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80080c4:	bf00      	nop
 80080c6:	370c      	adds	r7, #12
 80080c8:	46bd      	mov	sp, r7
 80080ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ce:	4770      	bx	lr

080080d0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b090      	sub	sp, #64	; 0x40
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	60f8      	str	r0, [r7, #12]
 80080d8:	60b9      	str	r1, [r7, #8]
 80080da:	603b      	str	r3, [r7, #0]
 80080dc:	4613      	mov	r3, r2
 80080de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080e0:	e050      	b.n	8008184 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080e8:	d04c      	beq.n	8008184 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80080ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d007      	beq.n	8008100 <UART_WaitOnFlagUntilTimeout+0x30>
 80080f0:	f7fc fca4 	bl	8004a3c <HAL_GetTick>
 80080f4:	4602      	mov	r2, r0
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	1ad3      	subs	r3, r2, r3
 80080fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80080fc:	429a      	cmp	r2, r3
 80080fe:	d241      	bcs.n	8008184 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	330c      	adds	r3, #12
 8008106:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800810a:	e853 3f00 	ldrex	r3, [r3]
 800810e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008112:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008116:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	330c      	adds	r3, #12
 800811e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008120:	637a      	str	r2, [r7, #52]	; 0x34
 8008122:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008124:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008126:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008128:	e841 2300 	strex	r3, r2, [r1]
 800812c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800812e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008130:	2b00      	cmp	r3, #0
 8008132:	d1e5      	bne.n	8008100 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	3314      	adds	r3, #20
 800813a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	e853 3f00 	ldrex	r3, [r3]
 8008142:	613b      	str	r3, [r7, #16]
   return(result);
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	f023 0301 	bic.w	r3, r3, #1
 800814a:	63bb      	str	r3, [r7, #56]	; 0x38
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	3314      	adds	r3, #20
 8008152:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008154:	623a      	str	r2, [r7, #32]
 8008156:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008158:	69f9      	ldr	r1, [r7, #28]
 800815a:	6a3a      	ldr	r2, [r7, #32]
 800815c:	e841 2300 	strex	r3, r2, [r1]
 8008160:	61bb      	str	r3, [r7, #24]
   return(result);
 8008162:	69bb      	ldr	r3, [r7, #24]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d1e5      	bne.n	8008134 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	2220      	movs	r2, #32
 800816c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	2220      	movs	r2, #32
 8008174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	2200      	movs	r2, #0
 800817c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008180:	2303      	movs	r3, #3
 8008182:	e00f      	b.n	80081a4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	681a      	ldr	r2, [r3, #0]
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	4013      	ands	r3, r2
 800818e:	68ba      	ldr	r2, [r7, #8]
 8008190:	429a      	cmp	r2, r3
 8008192:	bf0c      	ite	eq
 8008194:	2301      	moveq	r3, #1
 8008196:	2300      	movne	r3, #0
 8008198:	b2db      	uxtb	r3, r3
 800819a:	461a      	mov	r2, r3
 800819c:	79fb      	ldrb	r3, [r7, #7]
 800819e:	429a      	cmp	r2, r3
 80081a0:	d09f      	beq.n	80080e2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80081a2:	2300      	movs	r3, #0
}
 80081a4:	4618      	mov	r0, r3
 80081a6:	3740      	adds	r7, #64	; 0x40
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}

080081ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80081ac:	b480      	push	{r7}
 80081ae:	b095      	sub	sp, #84	; 0x54
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	330c      	adds	r3, #12
 80081ba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081be:	e853 3f00 	ldrex	r3, [r3]
 80081c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80081c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80081ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	330c      	adds	r3, #12
 80081d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80081d4:	643a      	str	r2, [r7, #64]	; 0x40
 80081d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80081da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80081dc:	e841 2300 	strex	r3, r2, [r1]
 80081e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80081e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d1e5      	bne.n	80081b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	3314      	adds	r3, #20
 80081ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081f0:	6a3b      	ldr	r3, [r7, #32]
 80081f2:	e853 3f00 	ldrex	r3, [r3]
 80081f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80081f8:	69fb      	ldr	r3, [r7, #28]
 80081fa:	f023 0301 	bic.w	r3, r3, #1
 80081fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	3314      	adds	r3, #20
 8008206:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008208:	62fa      	str	r2, [r7, #44]	; 0x2c
 800820a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800820c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800820e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008210:	e841 2300 	strex	r3, r2, [r1]
 8008214:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008218:	2b00      	cmp	r3, #0
 800821a:	d1e5      	bne.n	80081e8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008220:	2b01      	cmp	r3, #1
 8008222:	d119      	bne.n	8008258 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	330c      	adds	r3, #12
 800822a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	e853 3f00 	ldrex	r3, [r3]
 8008232:	60bb      	str	r3, [r7, #8]
   return(result);
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	f023 0310 	bic.w	r3, r3, #16
 800823a:	647b      	str	r3, [r7, #68]	; 0x44
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	330c      	adds	r3, #12
 8008242:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008244:	61ba      	str	r2, [r7, #24]
 8008246:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008248:	6979      	ldr	r1, [r7, #20]
 800824a:	69ba      	ldr	r2, [r7, #24]
 800824c:	e841 2300 	strex	r3, r2, [r1]
 8008250:	613b      	str	r3, [r7, #16]
   return(result);
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d1e5      	bne.n	8008224 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2220      	movs	r2, #32
 800825c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2200      	movs	r2, #0
 8008264:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008266:	bf00      	nop
 8008268:	3754      	adds	r7, #84	; 0x54
 800826a:	46bd      	mov	sp, r7
 800826c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008270:	4770      	bx	lr

08008272 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008272:	b580      	push	{r7, lr}
 8008274:	b084      	sub	sp, #16
 8008276:	af00      	add	r7, sp, #0
 8008278:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800827e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	2200      	movs	r2, #0
 8008284:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	2200      	movs	r2, #0
 800828a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800828c:	68f8      	ldr	r0, [r7, #12]
 800828e:	f7ff ff09 	bl	80080a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008292:	bf00      	nop
 8008294:	3710      	adds	r7, #16
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}

0800829a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800829a:	b480      	push	{r7}
 800829c:	b085      	sub	sp, #20
 800829e:	af00      	add	r7, sp, #0
 80082a0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082a8:	b2db      	uxtb	r3, r3
 80082aa:	2b21      	cmp	r3, #33	; 0x21
 80082ac:	d13e      	bne.n	800832c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	689b      	ldr	r3, [r3, #8]
 80082b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082b6:	d114      	bne.n	80082e2 <UART_Transmit_IT+0x48>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	691b      	ldr	r3, [r3, #16]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d110      	bne.n	80082e2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6a1b      	ldr	r3, [r3, #32]
 80082c4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	881b      	ldrh	r3, [r3, #0]
 80082ca:	461a      	mov	r2, r3
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80082d4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6a1b      	ldr	r3, [r3, #32]
 80082da:	1c9a      	adds	r2, r3, #2
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	621a      	str	r2, [r3, #32]
 80082e0:	e008      	b.n	80082f4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6a1b      	ldr	r3, [r3, #32]
 80082e6:	1c59      	adds	r1, r3, #1
 80082e8:	687a      	ldr	r2, [r7, #4]
 80082ea:	6211      	str	r1, [r2, #32]
 80082ec:	781a      	ldrb	r2, [r3, #0]
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80082f8:	b29b      	uxth	r3, r3
 80082fa:	3b01      	subs	r3, #1
 80082fc:	b29b      	uxth	r3, r3
 80082fe:	687a      	ldr	r2, [r7, #4]
 8008300:	4619      	mov	r1, r3
 8008302:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008304:	2b00      	cmp	r3, #0
 8008306:	d10f      	bne.n	8008328 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	68da      	ldr	r2, [r3, #12]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008316:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	68da      	ldr	r2, [r3, #12]
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008326:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008328:	2300      	movs	r3, #0
 800832a:	e000      	b.n	800832e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800832c:	2302      	movs	r3, #2
  }
}
 800832e:	4618      	mov	r0, r3
 8008330:	3714      	adds	r7, #20
 8008332:	46bd      	mov	sp, r7
 8008334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008338:	4770      	bx	lr

0800833a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800833a:	b580      	push	{r7, lr}
 800833c:	b082      	sub	sp, #8
 800833e:	af00      	add	r7, sp, #0
 8008340:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	68da      	ldr	r2, [r3, #12]
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008350:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2220      	movs	r2, #32
 8008356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f7ff fe8e 	bl	800807c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008360:	2300      	movs	r3, #0
}
 8008362:	4618      	mov	r0, r3
 8008364:	3708      	adds	r7, #8
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}

0800836a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800836a:	b580      	push	{r7, lr}
 800836c:	b08c      	sub	sp, #48	; 0x30
 800836e:	af00      	add	r7, sp, #0
 8008370:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008378:	b2db      	uxtb	r3, r3
 800837a:	2b22      	cmp	r3, #34	; 0x22
 800837c:	f040 80ab 	bne.w	80084d6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	689b      	ldr	r3, [r3, #8]
 8008384:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008388:	d117      	bne.n	80083ba <UART_Receive_IT+0x50>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	691b      	ldr	r3, [r3, #16]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d113      	bne.n	80083ba <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008392:	2300      	movs	r3, #0
 8008394:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800839a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	685b      	ldr	r3, [r3, #4]
 80083a2:	b29b      	uxth	r3, r3
 80083a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083a8:	b29a      	uxth	r2, r3
 80083aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ac:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083b2:	1c9a      	adds	r2, r3, #2
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	629a      	str	r2, [r3, #40]	; 0x28
 80083b8:	e026      	b.n	8008408 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083be:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80083c0:	2300      	movs	r3, #0
 80083c2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	689b      	ldr	r3, [r3, #8]
 80083c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083cc:	d007      	beq.n	80083de <UART_Receive_IT+0x74>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	689b      	ldr	r3, [r3, #8]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d10a      	bne.n	80083ec <UART_Receive_IT+0x82>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	691b      	ldr	r3, [r3, #16]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d106      	bne.n	80083ec <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	685b      	ldr	r3, [r3, #4]
 80083e4:	b2da      	uxtb	r2, r3
 80083e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083e8:	701a      	strb	r2, [r3, #0]
 80083ea:	e008      	b.n	80083fe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	685b      	ldr	r3, [r3, #4]
 80083f2:	b2db      	uxtb	r3, r3
 80083f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083f8:	b2da      	uxtb	r2, r3
 80083fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083fc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008402:	1c5a      	adds	r2, r3, #1
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800840c:	b29b      	uxth	r3, r3
 800840e:	3b01      	subs	r3, #1
 8008410:	b29b      	uxth	r3, r3
 8008412:	687a      	ldr	r2, [r7, #4]
 8008414:	4619      	mov	r1, r3
 8008416:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008418:	2b00      	cmp	r3, #0
 800841a:	d15a      	bne.n	80084d2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	68da      	ldr	r2, [r3, #12]
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f022 0220 	bic.w	r2, r2, #32
 800842a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	68da      	ldr	r2, [r3, #12]
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800843a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	695a      	ldr	r2, [r3, #20]
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f022 0201 	bic.w	r2, r2, #1
 800844a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2220      	movs	r2, #32
 8008450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008458:	2b01      	cmp	r3, #1
 800845a:	d135      	bne.n	80084c8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2200      	movs	r2, #0
 8008460:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	330c      	adds	r3, #12
 8008468:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	e853 3f00 	ldrex	r3, [r3]
 8008470:	613b      	str	r3, [r7, #16]
   return(result);
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	f023 0310 	bic.w	r3, r3, #16
 8008478:	627b      	str	r3, [r7, #36]	; 0x24
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	330c      	adds	r3, #12
 8008480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008482:	623a      	str	r2, [r7, #32]
 8008484:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008486:	69f9      	ldr	r1, [r7, #28]
 8008488:	6a3a      	ldr	r2, [r7, #32]
 800848a:	e841 2300 	strex	r3, r2, [r1]
 800848e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008490:	69bb      	ldr	r3, [r7, #24]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d1e5      	bne.n	8008462 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f003 0310 	and.w	r3, r3, #16
 80084a0:	2b10      	cmp	r3, #16
 80084a2:	d10a      	bne.n	80084ba <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80084a4:	2300      	movs	r3, #0
 80084a6:	60fb      	str	r3, [r7, #12]
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	60fb      	str	r3, [r7, #12]
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	685b      	ldr	r3, [r3, #4]
 80084b6:	60fb      	str	r3, [r7, #12]
 80084b8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80084be:	4619      	mov	r1, r3
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f7ff fdf9 	bl	80080b8 <HAL_UARTEx_RxEventCallback>
 80084c6:	e002      	b.n	80084ce <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f7ff fde1 	bl	8008090 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80084ce:	2300      	movs	r3, #0
 80084d0:	e002      	b.n	80084d8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80084d2:	2300      	movs	r3, #0
 80084d4:	e000      	b.n	80084d8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80084d6:	2302      	movs	r3, #2
  }
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3730      	adds	r7, #48	; 0x30
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}

080084e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80084e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084e4:	b09f      	sub	sp, #124	; 0x7c
 80084e6:	af00      	add	r7, sp, #0
 80084e8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80084ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	691b      	ldr	r3, [r3, #16]
 80084f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80084f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084f6:	68d9      	ldr	r1, [r3, #12]
 80084f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084fa:	681a      	ldr	r2, [r3, #0]
 80084fc:	ea40 0301 	orr.w	r3, r0, r1
 8008500:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008502:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008504:	689a      	ldr	r2, [r3, #8]
 8008506:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008508:	691b      	ldr	r3, [r3, #16]
 800850a:	431a      	orrs	r2, r3
 800850c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800850e:	695b      	ldr	r3, [r3, #20]
 8008510:	431a      	orrs	r2, r3
 8008512:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008514:	69db      	ldr	r3, [r3, #28]
 8008516:	4313      	orrs	r3, r2
 8008518:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800851a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	68db      	ldr	r3, [r3, #12]
 8008520:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008524:	f021 010c 	bic.w	r1, r1, #12
 8008528:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800852a:	681a      	ldr	r2, [r3, #0]
 800852c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800852e:	430b      	orrs	r3, r1
 8008530:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008532:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	695b      	ldr	r3, [r3, #20]
 8008538:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800853c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800853e:	6999      	ldr	r1, [r3, #24]
 8008540:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008542:	681a      	ldr	r2, [r3, #0]
 8008544:	ea40 0301 	orr.w	r3, r0, r1
 8008548:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800854a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800854c:	681a      	ldr	r2, [r3, #0]
 800854e:	4bc5      	ldr	r3, [pc, #788]	; (8008864 <UART_SetConfig+0x384>)
 8008550:	429a      	cmp	r2, r3
 8008552:	d004      	beq.n	800855e <UART_SetConfig+0x7e>
 8008554:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008556:	681a      	ldr	r2, [r3, #0]
 8008558:	4bc3      	ldr	r3, [pc, #780]	; (8008868 <UART_SetConfig+0x388>)
 800855a:	429a      	cmp	r2, r3
 800855c:	d103      	bne.n	8008566 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800855e:	f7fe fbad 	bl	8006cbc <HAL_RCC_GetPCLK2Freq>
 8008562:	6778      	str	r0, [r7, #116]	; 0x74
 8008564:	e002      	b.n	800856c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008566:	f7fe fb95 	bl	8006c94 <HAL_RCC_GetPCLK1Freq>
 800856a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800856c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800856e:	69db      	ldr	r3, [r3, #28]
 8008570:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008574:	f040 80b6 	bne.w	80086e4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008578:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800857a:	461c      	mov	r4, r3
 800857c:	f04f 0500 	mov.w	r5, #0
 8008580:	4622      	mov	r2, r4
 8008582:	462b      	mov	r3, r5
 8008584:	1891      	adds	r1, r2, r2
 8008586:	6439      	str	r1, [r7, #64]	; 0x40
 8008588:	415b      	adcs	r3, r3
 800858a:	647b      	str	r3, [r7, #68]	; 0x44
 800858c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008590:	1912      	adds	r2, r2, r4
 8008592:	eb45 0303 	adc.w	r3, r5, r3
 8008596:	f04f 0000 	mov.w	r0, #0
 800859a:	f04f 0100 	mov.w	r1, #0
 800859e:	00d9      	lsls	r1, r3, #3
 80085a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80085a4:	00d0      	lsls	r0, r2, #3
 80085a6:	4602      	mov	r2, r0
 80085a8:	460b      	mov	r3, r1
 80085aa:	1911      	adds	r1, r2, r4
 80085ac:	6639      	str	r1, [r7, #96]	; 0x60
 80085ae:	416b      	adcs	r3, r5
 80085b0:	667b      	str	r3, [r7, #100]	; 0x64
 80085b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085b4:	685b      	ldr	r3, [r3, #4]
 80085b6:	461a      	mov	r2, r3
 80085b8:	f04f 0300 	mov.w	r3, #0
 80085bc:	1891      	adds	r1, r2, r2
 80085be:	63b9      	str	r1, [r7, #56]	; 0x38
 80085c0:	415b      	adcs	r3, r3
 80085c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80085c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80085c8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80085cc:	f7f8 f966 	bl	800089c <__aeabi_uldivmod>
 80085d0:	4602      	mov	r2, r0
 80085d2:	460b      	mov	r3, r1
 80085d4:	4ba5      	ldr	r3, [pc, #660]	; (800886c <UART_SetConfig+0x38c>)
 80085d6:	fba3 2302 	umull	r2, r3, r3, r2
 80085da:	095b      	lsrs	r3, r3, #5
 80085dc:	011e      	lsls	r6, r3, #4
 80085de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80085e0:	461c      	mov	r4, r3
 80085e2:	f04f 0500 	mov.w	r5, #0
 80085e6:	4622      	mov	r2, r4
 80085e8:	462b      	mov	r3, r5
 80085ea:	1891      	adds	r1, r2, r2
 80085ec:	6339      	str	r1, [r7, #48]	; 0x30
 80085ee:	415b      	adcs	r3, r3
 80085f0:	637b      	str	r3, [r7, #52]	; 0x34
 80085f2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80085f6:	1912      	adds	r2, r2, r4
 80085f8:	eb45 0303 	adc.w	r3, r5, r3
 80085fc:	f04f 0000 	mov.w	r0, #0
 8008600:	f04f 0100 	mov.w	r1, #0
 8008604:	00d9      	lsls	r1, r3, #3
 8008606:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800860a:	00d0      	lsls	r0, r2, #3
 800860c:	4602      	mov	r2, r0
 800860e:	460b      	mov	r3, r1
 8008610:	1911      	adds	r1, r2, r4
 8008612:	65b9      	str	r1, [r7, #88]	; 0x58
 8008614:	416b      	adcs	r3, r5
 8008616:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008618:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800861a:	685b      	ldr	r3, [r3, #4]
 800861c:	461a      	mov	r2, r3
 800861e:	f04f 0300 	mov.w	r3, #0
 8008622:	1891      	adds	r1, r2, r2
 8008624:	62b9      	str	r1, [r7, #40]	; 0x28
 8008626:	415b      	adcs	r3, r3
 8008628:	62fb      	str	r3, [r7, #44]	; 0x2c
 800862a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800862e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008632:	f7f8 f933 	bl	800089c <__aeabi_uldivmod>
 8008636:	4602      	mov	r2, r0
 8008638:	460b      	mov	r3, r1
 800863a:	4b8c      	ldr	r3, [pc, #560]	; (800886c <UART_SetConfig+0x38c>)
 800863c:	fba3 1302 	umull	r1, r3, r3, r2
 8008640:	095b      	lsrs	r3, r3, #5
 8008642:	2164      	movs	r1, #100	; 0x64
 8008644:	fb01 f303 	mul.w	r3, r1, r3
 8008648:	1ad3      	subs	r3, r2, r3
 800864a:	00db      	lsls	r3, r3, #3
 800864c:	3332      	adds	r3, #50	; 0x32
 800864e:	4a87      	ldr	r2, [pc, #540]	; (800886c <UART_SetConfig+0x38c>)
 8008650:	fba2 2303 	umull	r2, r3, r2, r3
 8008654:	095b      	lsrs	r3, r3, #5
 8008656:	005b      	lsls	r3, r3, #1
 8008658:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800865c:	441e      	add	r6, r3
 800865e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008660:	4618      	mov	r0, r3
 8008662:	f04f 0100 	mov.w	r1, #0
 8008666:	4602      	mov	r2, r0
 8008668:	460b      	mov	r3, r1
 800866a:	1894      	adds	r4, r2, r2
 800866c:	623c      	str	r4, [r7, #32]
 800866e:	415b      	adcs	r3, r3
 8008670:	627b      	str	r3, [r7, #36]	; 0x24
 8008672:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008676:	1812      	adds	r2, r2, r0
 8008678:	eb41 0303 	adc.w	r3, r1, r3
 800867c:	f04f 0400 	mov.w	r4, #0
 8008680:	f04f 0500 	mov.w	r5, #0
 8008684:	00dd      	lsls	r5, r3, #3
 8008686:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800868a:	00d4      	lsls	r4, r2, #3
 800868c:	4622      	mov	r2, r4
 800868e:	462b      	mov	r3, r5
 8008690:	1814      	adds	r4, r2, r0
 8008692:	653c      	str	r4, [r7, #80]	; 0x50
 8008694:	414b      	adcs	r3, r1
 8008696:	657b      	str	r3, [r7, #84]	; 0x54
 8008698:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800869a:	685b      	ldr	r3, [r3, #4]
 800869c:	461a      	mov	r2, r3
 800869e:	f04f 0300 	mov.w	r3, #0
 80086a2:	1891      	adds	r1, r2, r2
 80086a4:	61b9      	str	r1, [r7, #24]
 80086a6:	415b      	adcs	r3, r3
 80086a8:	61fb      	str	r3, [r7, #28]
 80086aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80086ae:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80086b2:	f7f8 f8f3 	bl	800089c <__aeabi_uldivmod>
 80086b6:	4602      	mov	r2, r0
 80086b8:	460b      	mov	r3, r1
 80086ba:	4b6c      	ldr	r3, [pc, #432]	; (800886c <UART_SetConfig+0x38c>)
 80086bc:	fba3 1302 	umull	r1, r3, r3, r2
 80086c0:	095b      	lsrs	r3, r3, #5
 80086c2:	2164      	movs	r1, #100	; 0x64
 80086c4:	fb01 f303 	mul.w	r3, r1, r3
 80086c8:	1ad3      	subs	r3, r2, r3
 80086ca:	00db      	lsls	r3, r3, #3
 80086cc:	3332      	adds	r3, #50	; 0x32
 80086ce:	4a67      	ldr	r2, [pc, #412]	; (800886c <UART_SetConfig+0x38c>)
 80086d0:	fba2 2303 	umull	r2, r3, r2, r3
 80086d4:	095b      	lsrs	r3, r3, #5
 80086d6:	f003 0207 	and.w	r2, r3, #7
 80086da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	4432      	add	r2, r6
 80086e0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80086e2:	e0b9      	b.n	8008858 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80086e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80086e6:	461c      	mov	r4, r3
 80086e8:	f04f 0500 	mov.w	r5, #0
 80086ec:	4622      	mov	r2, r4
 80086ee:	462b      	mov	r3, r5
 80086f0:	1891      	adds	r1, r2, r2
 80086f2:	6139      	str	r1, [r7, #16]
 80086f4:	415b      	adcs	r3, r3
 80086f6:	617b      	str	r3, [r7, #20]
 80086f8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80086fc:	1912      	adds	r2, r2, r4
 80086fe:	eb45 0303 	adc.w	r3, r5, r3
 8008702:	f04f 0000 	mov.w	r0, #0
 8008706:	f04f 0100 	mov.w	r1, #0
 800870a:	00d9      	lsls	r1, r3, #3
 800870c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008710:	00d0      	lsls	r0, r2, #3
 8008712:	4602      	mov	r2, r0
 8008714:	460b      	mov	r3, r1
 8008716:	eb12 0804 	adds.w	r8, r2, r4
 800871a:	eb43 0905 	adc.w	r9, r3, r5
 800871e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008720:	685b      	ldr	r3, [r3, #4]
 8008722:	4618      	mov	r0, r3
 8008724:	f04f 0100 	mov.w	r1, #0
 8008728:	f04f 0200 	mov.w	r2, #0
 800872c:	f04f 0300 	mov.w	r3, #0
 8008730:	008b      	lsls	r3, r1, #2
 8008732:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008736:	0082      	lsls	r2, r0, #2
 8008738:	4640      	mov	r0, r8
 800873a:	4649      	mov	r1, r9
 800873c:	f7f8 f8ae 	bl	800089c <__aeabi_uldivmod>
 8008740:	4602      	mov	r2, r0
 8008742:	460b      	mov	r3, r1
 8008744:	4b49      	ldr	r3, [pc, #292]	; (800886c <UART_SetConfig+0x38c>)
 8008746:	fba3 2302 	umull	r2, r3, r3, r2
 800874a:	095b      	lsrs	r3, r3, #5
 800874c:	011e      	lsls	r6, r3, #4
 800874e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008750:	4618      	mov	r0, r3
 8008752:	f04f 0100 	mov.w	r1, #0
 8008756:	4602      	mov	r2, r0
 8008758:	460b      	mov	r3, r1
 800875a:	1894      	adds	r4, r2, r2
 800875c:	60bc      	str	r4, [r7, #8]
 800875e:	415b      	adcs	r3, r3
 8008760:	60fb      	str	r3, [r7, #12]
 8008762:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008766:	1812      	adds	r2, r2, r0
 8008768:	eb41 0303 	adc.w	r3, r1, r3
 800876c:	f04f 0400 	mov.w	r4, #0
 8008770:	f04f 0500 	mov.w	r5, #0
 8008774:	00dd      	lsls	r5, r3, #3
 8008776:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800877a:	00d4      	lsls	r4, r2, #3
 800877c:	4622      	mov	r2, r4
 800877e:	462b      	mov	r3, r5
 8008780:	1814      	adds	r4, r2, r0
 8008782:	64bc      	str	r4, [r7, #72]	; 0x48
 8008784:	414b      	adcs	r3, r1
 8008786:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008788:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800878a:	685b      	ldr	r3, [r3, #4]
 800878c:	4618      	mov	r0, r3
 800878e:	f04f 0100 	mov.w	r1, #0
 8008792:	f04f 0200 	mov.w	r2, #0
 8008796:	f04f 0300 	mov.w	r3, #0
 800879a:	008b      	lsls	r3, r1, #2
 800879c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80087a0:	0082      	lsls	r2, r0, #2
 80087a2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80087a6:	f7f8 f879 	bl	800089c <__aeabi_uldivmod>
 80087aa:	4602      	mov	r2, r0
 80087ac:	460b      	mov	r3, r1
 80087ae:	4b2f      	ldr	r3, [pc, #188]	; (800886c <UART_SetConfig+0x38c>)
 80087b0:	fba3 1302 	umull	r1, r3, r3, r2
 80087b4:	095b      	lsrs	r3, r3, #5
 80087b6:	2164      	movs	r1, #100	; 0x64
 80087b8:	fb01 f303 	mul.w	r3, r1, r3
 80087bc:	1ad3      	subs	r3, r2, r3
 80087be:	011b      	lsls	r3, r3, #4
 80087c0:	3332      	adds	r3, #50	; 0x32
 80087c2:	4a2a      	ldr	r2, [pc, #168]	; (800886c <UART_SetConfig+0x38c>)
 80087c4:	fba2 2303 	umull	r2, r3, r2, r3
 80087c8:	095b      	lsrs	r3, r3, #5
 80087ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80087ce:	441e      	add	r6, r3
 80087d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80087d2:	4618      	mov	r0, r3
 80087d4:	f04f 0100 	mov.w	r1, #0
 80087d8:	4602      	mov	r2, r0
 80087da:	460b      	mov	r3, r1
 80087dc:	1894      	adds	r4, r2, r2
 80087de:	603c      	str	r4, [r7, #0]
 80087e0:	415b      	adcs	r3, r3
 80087e2:	607b      	str	r3, [r7, #4]
 80087e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087e8:	1812      	adds	r2, r2, r0
 80087ea:	eb41 0303 	adc.w	r3, r1, r3
 80087ee:	f04f 0400 	mov.w	r4, #0
 80087f2:	f04f 0500 	mov.w	r5, #0
 80087f6:	00dd      	lsls	r5, r3, #3
 80087f8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80087fc:	00d4      	lsls	r4, r2, #3
 80087fe:	4622      	mov	r2, r4
 8008800:	462b      	mov	r3, r5
 8008802:	eb12 0a00 	adds.w	sl, r2, r0
 8008806:	eb43 0b01 	adc.w	fp, r3, r1
 800880a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800880c:	685b      	ldr	r3, [r3, #4]
 800880e:	4618      	mov	r0, r3
 8008810:	f04f 0100 	mov.w	r1, #0
 8008814:	f04f 0200 	mov.w	r2, #0
 8008818:	f04f 0300 	mov.w	r3, #0
 800881c:	008b      	lsls	r3, r1, #2
 800881e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008822:	0082      	lsls	r2, r0, #2
 8008824:	4650      	mov	r0, sl
 8008826:	4659      	mov	r1, fp
 8008828:	f7f8 f838 	bl	800089c <__aeabi_uldivmod>
 800882c:	4602      	mov	r2, r0
 800882e:	460b      	mov	r3, r1
 8008830:	4b0e      	ldr	r3, [pc, #56]	; (800886c <UART_SetConfig+0x38c>)
 8008832:	fba3 1302 	umull	r1, r3, r3, r2
 8008836:	095b      	lsrs	r3, r3, #5
 8008838:	2164      	movs	r1, #100	; 0x64
 800883a:	fb01 f303 	mul.w	r3, r1, r3
 800883e:	1ad3      	subs	r3, r2, r3
 8008840:	011b      	lsls	r3, r3, #4
 8008842:	3332      	adds	r3, #50	; 0x32
 8008844:	4a09      	ldr	r2, [pc, #36]	; (800886c <UART_SetConfig+0x38c>)
 8008846:	fba2 2303 	umull	r2, r3, r2, r3
 800884a:	095b      	lsrs	r3, r3, #5
 800884c:	f003 020f 	and.w	r2, r3, #15
 8008850:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	4432      	add	r2, r6
 8008856:	609a      	str	r2, [r3, #8]
}
 8008858:	bf00      	nop
 800885a:	377c      	adds	r7, #124	; 0x7c
 800885c:	46bd      	mov	sp, r7
 800885e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008862:	bf00      	nop
 8008864:	40011000 	.word	0x40011000
 8008868:	40011400 	.word	0x40011400
 800886c:	51eb851f 	.word	0x51eb851f

08008870 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8008870:	b480      	push	{r7}
 8008872:	b087      	sub	sp, #28
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
 8008878:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	681a      	ldr	r2, [r3, #0]
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008884:	683a      	ldr	r2, [r7, #0]
 8008886:	6812      	ldr	r2, [r2, #0]
 8008888:	f023 0101 	bic.w	r1, r3, #1
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	689b      	ldr	r3, [r3, #8]
 8008896:	2b08      	cmp	r3, #8
 8008898:	d102      	bne.n	80088a0 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800889a:	2340      	movs	r3, #64	; 0x40
 800889c:	617b      	str	r3, [r7, #20]
 800889e:	e001      	b.n	80088a4 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80088a0:	2300      	movs	r3, #0
 80088a2:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80088b0:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80088b6:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80088bc:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80088c2:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 80088c8:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 80088ce:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 80088d4:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 80088da:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 80088e0:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 80088e6:	4313      	orrs	r3, r2
 80088e8:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	699b      	ldr	r3, [r3, #24]
 80088ee:	693a      	ldr	r2, [r7, #16]
 80088f0:	4313      	orrs	r3, r2
 80088f2:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088f8:	693a      	ldr	r2, [r7, #16]
 80088fa:	4313      	orrs	r3, r2
 80088fc:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 80088fe:	4b10      	ldr	r3, [pc, #64]	; (8008940 <FSMC_NORSRAM_Init+0xd0>)
 8008900:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008908:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8008910:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	681a      	ldr	r2, [r3, #0]
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	43db      	mvns	r3, r3
 8008920:	ea02 0103 	and.w	r1, r2, r3
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	681a      	ldr	r2, [r3, #0]
 8008928:	693b      	ldr	r3, [r7, #16]
 800892a:	4319      	orrs	r1, r3
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 8008932:	2300      	movs	r3, #0
}
 8008934:	4618      	mov	r0, r3
 8008936:	371c      	adds	r7, #28
 8008938:	46bd      	mov	sp, r7
 800893a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893e:	4770      	bx	lr
 8008940:	0008fb7f 	.word	0x0008fb7f

08008944 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008944:	b480      	push	{r7}
 8008946:	b085      	sub	sp, #20
 8008948:	af00      	add	r7, sp, #0
 800894a:	60f8      	str	r0, [r7, #12]
 800894c:	60b9      	str	r1, [r7, #8]
 800894e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	1c5a      	adds	r2, r3, #1
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800895a:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	681a      	ldr	r2, [r3, #0]
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	685b      	ldr	r3, [r3, #4]
 8008966:	011b      	lsls	r3, r3, #4
 8008968:	431a      	orrs	r2, r3
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	689b      	ldr	r3, [r3, #8]
 800896e:	021b      	lsls	r3, r3, #8
 8008970:	431a      	orrs	r2, r3
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	68db      	ldr	r3, [r3, #12]
 8008976:	041b      	lsls	r3, r3, #16
 8008978:	431a      	orrs	r2, r3
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	691b      	ldr	r3, [r3, #16]
 800897e:	3b01      	subs	r3, #1
 8008980:	051b      	lsls	r3, r3, #20
 8008982:	431a      	orrs	r2, r3
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	695b      	ldr	r3, [r3, #20]
 8008988:	3b02      	subs	r3, #2
 800898a:	061b      	lsls	r3, r3, #24
 800898c:	431a      	orrs	r2, r3
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	699b      	ldr	r3, [r3, #24]
 8008992:	4313      	orrs	r3, r2
 8008994:	687a      	ldr	r2, [r7, #4]
 8008996:	3201      	adds	r2, #1
 8008998:	4319      	orrs	r1, r3
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 80089a0:	2300      	movs	r3, #0
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	3714      	adds	r7, #20
 80089a6:	46bd      	mov	sp, r7
 80089a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ac:	4770      	bx	lr
	...

080089b0 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 80089b0:	b480      	push	{r7}
 80089b2:	b085      	sub	sp, #20
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	60f8      	str	r0, [r7, #12]
 80089b8:	60b9      	str	r1, [r7, #8]
 80089ba:	607a      	str	r2, [r7, #4]
 80089bc:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80089c4:	d11d      	bne.n	8008a02 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	687a      	ldr	r2, [r7, #4]
 80089ca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80089ce:	4b13      	ldr	r3, [pc, #76]	; (8008a1c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 80089d0:	4013      	ands	r3, r2
 80089d2:	68ba      	ldr	r2, [r7, #8]
 80089d4:	6811      	ldr	r1, [r2, #0]
 80089d6:	68ba      	ldr	r2, [r7, #8]
 80089d8:	6852      	ldr	r2, [r2, #4]
 80089da:	0112      	lsls	r2, r2, #4
 80089dc:	4311      	orrs	r1, r2
 80089de:	68ba      	ldr	r2, [r7, #8]
 80089e0:	6892      	ldr	r2, [r2, #8]
 80089e2:	0212      	lsls	r2, r2, #8
 80089e4:	4311      	orrs	r1, r2
 80089e6:	68ba      	ldr	r2, [r7, #8]
 80089e8:	6992      	ldr	r2, [r2, #24]
 80089ea:	4311      	orrs	r1, r2
 80089ec:	68ba      	ldr	r2, [r7, #8]
 80089ee:	68d2      	ldr	r2, [r2, #12]
 80089f0:	0412      	lsls	r2, r2, #16
 80089f2:	430a      	orrs	r2, r1
 80089f4:	ea43 0102 	orr.w	r1, r3, r2
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	687a      	ldr	r2, [r7, #4]
 80089fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008a00:	e005      	b.n	8008a0e <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	687a      	ldr	r2, [r7, #4]
 8008a06:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8008a0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8008a0e:	2300      	movs	r3, #0
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	3714      	adds	r7, #20
 8008a14:	46bd      	mov	sp, r7
 8008a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1a:	4770      	bx	lr
 8008a1c:	cff00000 	.word	0xcff00000

08008a20 <atoi>:
 8008a20:	220a      	movs	r2, #10
 8008a22:	2100      	movs	r1, #0
 8008a24:	f000 b8e4 	b.w	8008bf0 <strtol>

08008a28 <__errno>:
 8008a28:	4b01      	ldr	r3, [pc, #4]	; (8008a30 <__errno+0x8>)
 8008a2a:	6818      	ldr	r0, [r3, #0]
 8008a2c:	4770      	bx	lr
 8008a2e:	bf00      	nop
 8008a30:	20000024 	.word	0x20000024

08008a34 <__libc_init_array>:
 8008a34:	b570      	push	{r4, r5, r6, lr}
 8008a36:	4d0d      	ldr	r5, [pc, #52]	; (8008a6c <__libc_init_array+0x38>)
 8008a38:	4c0d      	ldr	r4, [pc, #52]	; (8008a70 <__libc_init_array+0x3c>)
 8008a3a:	1b64      	subs	r4, r4, r5
 8008a3c:	10a4      	asrs	r4, r4, #2
 8008a3e:	2600      	movs	r6, #0
 8008a40:	42a6      	cmp	r6, r4
 8008a42:	d109      	bne.n	8008a58 <__libc_init_array+0x24>
 8008a44:	4d0b      	ldr	r5, [pc, #44]	; (8008a74 <__libc_init_array+0x40>)
 8008a46:	4c0c      	ldr	r4, [pc, #48]	; (8008a78 <__libc_init_array+0x44>)
 8008a48:	f001 f81a 	bl	8009a80 <_init>
 8008a4c:	1b64      	subs	r4, r4, r5
 8008a4e:	10a4      	asrs	r4, r4, #2
 8008a50:	2600      	movs	r6, #0
 8008a52:	42a6      	cmp	r6, r4
 8008a54:	d105      	bne.n	8008a62 <__libc_init_array+0x2e>
 8008a56:	bd70      	pop	{r4, r5, r6, pc}
 8008a58:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a5c:	4798      	blx	r3
 8008a5e:	3601      	adds	r6, #1
 8008a60:	e7ee      	b.n	8008a40 <__libc_init_array+0xc>
 8008a62:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a66:	4798      	blx	r3
 8008a68:	3601      	adds	r6, #1
 8008a6a:	e7f2      	b.n	8008a52 <__libc_init_array+0x1e>
 8008a6c:	0800a824 	.word	0x0800a824
 8008a70:	0800a824 	.word	0x0800a824
 8008a74:	0800a824 	.word	0x0800a824
 8008a78:	0800a828 	.word	0x0800a828

08008a7c <memcpy>:
 8008a7c:	440a      	add	r2, r1
 8008a7e:	4291      	cmp	r1, r2
 8008a80:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a84:	d100      	bne.n	8008a88 <memcpy+0xc>
 8008a86:	4770      	bx	lr
 8008a88:	b510      	push	{r4, lr}
 8008a8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a92:	4291      	cmp	r1, r2
 8008a94:	d1f9      	bne.n	8008a8a <memcpy+0xe>
 8008a96:	bd10      	pop	{r4, pc}

08008a98 <memset>:
 8008a98:	4402      	add	r2, r0
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	d100      	bne.n	8008aa2 <memset+0xa>
 8008aa0:	4770      	bx	lr
 8008aa2:	f803 1b01 	strb.w	r1, [r3], #1
 8008aa6:	e7f9      	b.n	8008a9c <memset+0x4>

08008aa8 <iprintf>:
 8008aa8:	b40f      	push	{r0, r1, r2, r3}
 8008aaa:	4b0a      	ldr	r3, [pc, #40]	; (8008ad4 <iprintf+0x2c>)
 8008aac:	b513      	push	{r0, r1, r4, lr}
 8008aae:	681c      	ldr	r4, [r3, #0]
 8008ab0:	b124      	cbz	r4, 8008abc <iprintf+0x14>
 8008ab2:	69a3      	ldr	r3, [r4, #24]
 8008ab4:	b913      	cbnz	r3, 8008abc <iprintf+0x14>
 8008ab6:	4620      	mov	r0, r4
 8008ab8:	f000 fa7e 	bl	8008fb8 <__sinit>
 8008abc:	ab05      	add	r3, sp, #20
 8008abe:	9a04      	ldr	r2, [sp, #16]
 8008ac0:	68a1      	ldr	r1, [r4, #8]
 8008ac2:	9301      	str	r3, [sp, #4]
 8008ac4:	4620      	mov	r0, r4
 8008ac6:	f000 fc4f 	bl	8009368 <_vfiprintf_r>
 8008aca:	b002      	add	sp, #8
 8008acc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ad0:	b004      	add	sp, #16
 8008ad2:	4770      	bx	lr
 8008ad4:	20000024 	.word	0x20000024

08008ad8 <strcpy>:
 8008ad8:	4603      	mov	r3, r0
 8008ada:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008ade:	f803 2b01 	strb.w	r2, [r3], #1
 8008ae2:	2a00      	cmp	r2, #0
 8008ae4:	d1f9      	bne.n	8008ada <strcpy+0x2>
 8008ae6:	4770      	bx	lr

08008ae8 <_strtol_l.isra.0>:
 8008ae8:	2b01      	cmp	r3, #1
 8008aea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008aee:	d001      	beq.n	8008af4 <_strtol_l.isra.0+0xc>
 8008af0:	2b24      	cmp	r3, #36	; 0x24
 8008af2:	d906      	bls.n	8008b02 <_strtol_l.isra.0+0x1a>
 8008af4:	f7ff ff98 	bl	8008a28 <__errno>
 8008af8:	2316      	movs	r3, #22
 8008afa:	6003      	str	r3, [r0, #0]
 8008afc:	2000      	movs	r0, #0
 8008afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b02:	4f3a      	ldr	r7, [pc, #232]	; (8008bec <_strtol_l.isra.0+0x104>)
 8008b04:	468e      	mov	lr, r1
 8008b06:	4676      	mov	r6, lr
 8008b08:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008b0c:	5de5      	ldrb	r5, [r4, r7]
 8008b0e:	f015 0508 	ands.w	r5, r5, #8
 8008b12:	d1f8      	bne.n	8008b06 <_strtol_l.isra.0+0x1e>
 8008b14:	2c2d      	cmp	r4, #45	; 0x2d
 8008b16:	d134      	bne.n	8008b82 <_strtol_l.isra.0+0x9a>
 8008b18:	f89e 4000 	ldrb.w	r4, [lr]
 8008b1c:	f04f 0801 	mov.w	r8, #1
 8008b20:	f106 0e02 	add.w	lr, r6, #2
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d05c      	beq.n	8008be2 <_strtol_l.isra.0+0xfa>
 8008b28:	2b10      	cmp	r3, #16
 8008b2a:	d10c      	bne.n	8008b46 <_strtol_l.isra.0+0x5e>
 8008b2c:	2c30      	cmp	r4, #48	; 0x30
 8008b2e:	d10a      	bne.n	8008b46 <_strtol_l.isra.0+0x5e>
 8008b30:	f89e 4000 	ldrb.w	r4, [lr]
 8008b34:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008b38:	2c58      	cmp	r4, #88	; 0x58
 8008b3a:	d14d      	bne.n	8008bd8 <_strtol_l.isra.0+0xf0>
 8008b3c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8008b40:	2310      	movs	r3, #16
 8008b42:	f10e 0e02 	add.w	lr, lr, #2
 8008b46:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8008b4a:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008b4e:	2600      	movs	r6, #0
 8008b50:	fbbc f9f3 	udiv	r9, ip, r3
 8008b54:	4635      	mov	r5, r6
 8008b56:	fb03 ca19 	mls	sl, r3, r9, ip
 8008b5a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8008b5e:	2f09      	cmp	r7, #9
 8008b60:	d818      	bhi.n	8008b94 <_strtol_l.isra.0+0xac>
 8008b62:	463c      	mov	r4, r7
 8008b64:	42a3      	cmp	r3, r4
 8008b66:	dd24      	ble.n	8008bb2 <_strtol_l.isra.0+0xca>
 8008b68:	2e00      	cmp	r6, #0
 8008b6a:	db1f      	blt.n	8008bac <_strtol_l.isra.0+0xc4>
 8008b6c:	45a9      	cmp	r9, r5
 8008b6e:	d31d      	bcc.n	8008bac <_strtol_l.isra.0+0xc4>
 8008b70:	d101      	bne.n	8008b76 <_strtol_l.isra.0+0x8e>
 8008b72:	45a2      	cmp	sl, r4
 8008b74:	db1a      	blt.n	8008bac <_strtol_l.isra.0+0xc4>
 8008b76:	fb05 4503 	mla	r5, r5, r3, r4
 8008b7a:	2601      	movs	r6, #1
 8008b7c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008b80:	e7eb      	b.n	8008b5a <_strtol_l.isra.0+0x72>
 8008b82:	2c2b      	cmp	r4, #43	; 0x2b
 8008b84:	bf08      	it	eq
 8008b86:	f89e 4000 	ldrbeq.w	r4, [lr]
 8008b8a:	46a8      	mov	r8, r5
 8008b8c:	bf08      	it	eq
 8008b8e:	f106 0e02 	addeq.w	lr, r6, #2
 8008b92:	e7c7      	b.n	8008b24 <_strtol_l.isra.0+0x3c>
 8008b94:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8008b98:	2f19      	cmp	r7, #25
 8008b9a:	d801      	bhi.n	8008ba0 <_strtol_l.isra.0+0xb8>
 8008b9c:	3c37      	subs	r4, #55	; 0x37
 8008b9e:	e7e1      	b.n	8008b64 <_strtol_l.isra.0+0x7c>
 8008ba0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008ba4:	2f19      	cmp	r7, #25
 8008ba6:	d804      	bhi.n	8008bb2 <_strtol_l.isra.0+0xca>
 8008ba8:	3c57      	subs	r4, #87	; 0x57
 8008baa:	e7db      	b.n	8008b64 <_strtol_l.isra.0+0x7c>
 8008bac:	f04f 36ff 	mov.w	r6, #4294967295
 8008bb0:	e7e4      	b.n	8008b7c <_strtol_l.isra.0+0x94>
 8008bb2:	2e00      	cmp	r6, #0
 8008bb4:	da05      	bge.n	8008bc2 <_strtol_l.isra.0+0xda>
 8008bb6:	2322      	movs	r3, #34	; 0x22
 8008bb8:	6003      	str	r3, [r0, #0]
 8008bba:	4665      	mov	r5, ip
 8008bbc:	b942      	cbnz	r2, 8008bd0 <_strtol_l.isra.0+0xe8>
 8008bbe:	4628      	mov	r0, r5
 8008bc0:	e79d      	b.n	8008afe <_strtol_l.isra.0+0x16>
 8008bc2:	f1b8 0f00 	cmp.w	r8, #0
 8008bc6:	d000      	beq.n	8008bca <_strtol_l.isra.0+0xe2>
 8008bc8:	426d      	negs	r5, r5
 8008bca:	2a00      	cmp	r2, #0
 8008bcc:	d0f7      	beq.n	8008bbe <_strtol_l.isra.0+0xd6>
 8008bce:	b10e      	cbz	r6, 8008bd4 <_strtol_l.isra.0+0xec>
 8008bd0:	f10e 31ff 	add.w	r1, lr, #4294967295
 8008bd4:	6011      	str	r1, [r2, #0]
 8008bd6:	e7f2      	b.n	8008bbe <_strtol_l.isra.0+0xd6>
 8008bd8:	2430      	movs	r4, #48	; 0x30
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d1b3      	bne.n	8008b46 <_strtol_l.isra.0+0x5e>
 8008bde:	2308      	movs	r3, #8
 8008be0:	e7b1      	b.n	8008b46 <_strtol_l.isra.0+0x5e>
 8008be2:	2c30      	cmp	r4, #48	; 0x30
 8008be4:	d0a4      	beq.n	8008b30 <_strtol_l.isra.0+0x48>
 8008be6:	230a      	movs	r3, #10
 8008be8:	e7ad      	b.n	8008b46 <_strtol_l.isra.0+0x5e>
 8008bea:	bf00      	nop
 8008bec:	0800a685 	.word	0x0800a685

08008bf0 <strtol>:
 8008bf0:	4613      	mov	r3, r2
 8008bf2:	460a      	mov	r2, r1
 8008bf4:	4601      	mov	r1, r0
 8008bf6:	4802      	ldr	r0, [pc, #8]	; (8008c00 <strtol+0x10>)
 8008bf8:	6800      	ldr	r0, [r0, #0]
 8008bfa:	f7ff bf75 	b.w	8008ae8 <_strtol_l.isra.0>
 8008bfe:	bf00      	nop
 8008c00:	20000024 	.word	0x20000024

08008c04 <__swbuf_r>:
 8008c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c06:	460e      	mov	r6, r1
 8008c08:	4614      	mov	r4, r2
 8008c0a:	4605      	mov	r5, r0
 8008c0c:	b118      	cbz	r0, 8008c16 <__swbuf_r+0x12>
 8008c0e:	6983      	ldr	r3, [r0, #24]
 8008c10:	b90b      	cbnz	r3, 8008c16 <__swbuf_r+0x12>
 8008c12:	f000 f9d1 	bl	8008fb8 <__sinit>
 8008c16:	4b21      	ldr	r3, [pc, #132]	; (8008c9c <__swbuf_r+0x98>)
 8008c18:	429c      	cmp	r4, r3
 8008c1a:	d12b      	bne.n	8008c74 <__swbuf_r+0x70>
 8008c1c:	686c      	ldr	r4, [r5, #4]
 8008c1e:	69a3      	ldr	r3, [r4, #24]
 8008c20:	60a3      	str	r3, [r4, #8]
 8008c22:	89a3      	ldrh	r3, [r4, #12]
 8008c24:	071a      	lsls	r2, r3, #28
 8008c26:	d52f      	bpl.n	8008c88 <__swbuf_r+0x84>
 8008c28:	6923      	ldr	r3, [r4, #16]
 8008c2a:	b36b      	cbz	r3, 8008c88 <__swbuf_r+0x84>
 8008c2c:	6923      	ldr	r3, [r4, #16]
 8008c2e:	6820      	ldr	r0, [r4, #0]
 8008c30:	1ac0      	subs	r0, r0, r3
 8008c32:	6963      	ldr	r3, [r4, #20]
 8008c34:	b2f6      	uxtb	r6, r6
 8008c36:	4283      	cmp	r3, r0
 8008c38:	4637      	mov	r7, r6
 8008c3a:	dc04      	bgt.n	8008c46 <__swbuf_r+0x42>
 8008c3c:	4621      	mov	r1, r4
 8008c3e:	4628      	mov	r0, r5
 8008c40:	f000 f926 	bl	8008e90 <_fflush_r>
 8008c44:	bb30      	cbnz	r0, 8008c94 <__swbuf_r+0x90>
 8008c46:	68a3      	ldr	r3, [r4, #8]
 8008c48:	3b01      	subs	r3, #1
 8008c4a:	60a3      	str	r3, [r4, #8]
 8008c4c:	6823      	ldr	r3, [r4, #0]
 8008c4e:	1c5a      	adds	r2, r3, #1
 8008c50:	6022      	str	r2, [r4, #0]
 8008c52:	701e      	strb	r6, [r3, #0]
 8008c54:	6963      	ldr	r3, [r4, #20]
 8008c56:	3001      	adds	r0, #1
 8008c58:	4283      	cmp	r3, r0
 8008c5a:	d004      	beq.n	8008c66 <__swbuf_r+0x62>
 8008c5c:	89a3      	ldrh	r3, [r4, #12]
 8008c5e:	07db      	lsls	r3, r3, #31
 8008c60:	d506      	bpl.n	8008c70 <__swbuf_r+0x6c>
 8008c62:	2e0a      	cmp	r6, #10
 8008c64:	d104      	bne.n	8008c70 <__swbuf_r+0x6c>
 8008c66:	4621      	mov	r1, r4
 8008c68:	4628      	mov	r0, r5
 8008c6a:	f000 f911 	bl	8008e90 <_fflush_r>
 8008c6e:	b988      	cbnz	r0, 8008c94 <__swbuf_r+0x90>
 8008c70:	4638      	mov	r0, r7
 8008c72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c74:	4b0a      	ldr	r3, [pc, #40]	; (8008ca0 <__swbuf_r+0x9c>)
 8008c76:	429c      	cmp	r4, r3
 8008c78:	d101      	bne.n	8008c7e <__swbuf_r+0x7a>
 8008c7a:	68ac      	ldr	r4, [r5, #8]
 8008c7c:	e7cf      	b.n	8008c1e <__swbuf_r+0x1a>
 8008c7e:	4b09      	ldr	r3, [pc, #36]	; (8008ca4 <__swbuf_r+0xa0>)
 8008c80:	429c      	cmp	r4, r3
 8008c82:	bf08      	it	eq
 8008c84:	68ec      	ldreq	r4, [r5, #12]
 8008c86:	e7ca      	b.n	8008c1e <__swbuf_r+0x1a>
 8008c88:	4621      	mov	r1, r4
 8008c8a:	4628      	mov	r0, r5
 8008c8c:	f000 f80c 	bl	8008ca8 <__swsetup_r>
 8008c90:	2800      	cmp	r0, #0
 8008c92:	d0cb      	beq.n	8008c2c <__swbuf_r+0x28>
 8008c94:	f04f 37ff 	mov.w	r7, #4294967295
 8008c98:	e7ea      	b.n	8008c70 <__swbuf_r+0x6c>
 8008c9a:	bf00      	nop
 8008c9c:	0800a7a8 	.word	0x0800a7a8
 8008ca0:	0800a7c8 	.word	0x0800a7c8
 8008ca4:	0800a788 	.word	0x0800a788

08008ca8 <__swsetup_r>:
 8008ca8:	4b32      	ldr	r3, [pc, #200]	; (8008d74 <__swsetup_r+0xcc>)
 8008caa:	b570      	push	{r4, r5, r6, lr}
 8008cac:	681d      	ldr	r5, [r3, #0]
 8008cae:	4606      	mov	r6, r0
 8008cb0:	460c      	mov	r4, r1
 8008cb2:	b125      	cbz	r5, 8008cbe <__swsetup_r+0x16>
 8008cb4:	69ab      	ldr	r3, [r5, #24]
 8008cb6:	b913      	cbnz	r3, 8008cbe <__swsetup_r+0x16>
 8008cb8:	4628      	mov	r0, r5
 8008cba:	f000 f97d 	bl	8008fb8 <__sinit>
 8008cbe:	4b2e      	ldr	r3, [pc, #184]	; (8008d78 <__swsetup_r+0xd0>)
 8008cc0:	429c      	cmp	r4, r3
 8008cc2:	d10f      	bne.n	8008ce4 <__swsetup_r+0x3c>
 8008cc4:	686c      	ldr	r4, [r5, #4]
 8008cc6:	89a3      	ldrh	r3, [r4, #12]
 8008cc8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ccc:	0719      	lsls	r1, r3, #28
 8008cce:	d42c      	bmi.n	8008d2a <__swsetup_r+0x82>
 8008cd0:	06dd      	lsls	r5, r3, #27
 8008cd2:	d411      	bmi.n	8008cf8 <__swsetup_r+0x50>
 8008cd4:	2309      	movs	r3, #9
 8008cd6:	6033      	str	r3, [r6, #0]
 8008cd8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008cdc:	81a3      	strh	r3, [r4, #12]
 8008cde:	f04f 30ff 	mov.w	r0, #4294967295
 8008ce2:	e03e      	b.n	8008d62 <__swsetup_r+0xba>
 8008ce4:	4b25      	ldr	r3, [pc, #148]	; (8008d7c <__swsetup_r+0xd4>)
 8008ce6:	429c      	cmp	r4, r3
 8008ce8:	d101      	bne.n	8008cee <__swsetup_r+0x46>
 8008cea:	68ac      	ldr	r4, [r5, #8]
 8008cec:	e7eb      	b.n	8008cc6 <__swsetup_r+0x1e>
 8008cee:	4b24      	ldr	r3, [pc, #144]	; (8008d80 <__swsetup_r+0xd8>)
 8008cf0:	429c      	cmp	r4, r3
 8008cf2:	bf08      	it	eq
 8008cf4:	68ec      	ldreq	r4, [r5, #12]
 8008cf6:	e7e6      	b.n	8008cc6 <__swsetup_r+0x1e>
 8008cf8:	0758      	lsls	r0, r3, #29
 8008cfa:	d512      	bpl.n	8008d22 <__swsetup_r+0x7a>
 8008cfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008cfe:	b141      	cbz	r1, 8008d12 <__swsetup_r+0x6a>
 8008d00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d04:	4299      	cmp	r1, r3
 8008d06:	d002      	beq.n	8008d0e <__swsetup_r+0x66>
 8008d08:	4630      	mov	r0, r6
 8008d0a:	f000 fa59 	bl	80091c0 <_free_r>
 8008d0e:	2300      	movs	r3, #0
 8008d10:	6363      	str	r3, [r4, #52]	; 0x34
 8008d12:	89a3      	ldrh	r3, [r4, #12]
 8008d14:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008d18:	81a3      	strh	r3, [r4, #12]
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	6063      	str	r3, [r4, #4]
 8008d1e:	6923      	ldr	r3, [r4, #16]
 8008d20:	6023      	str	r3, [r4, #0]
 8008d22:	89a3      	ldrh	r3, [r4, #12]
 8008d24:	f043 0308 	orr.w	r3, r3, #8
 8008d28:	81a3      	strh	r3, [r4, #12]
 8008d2a:	6923      	ldr	r3, [r4, #16]
 8008d2c:	b94b      	cbnz	r3, 8008d42 <__swsetup_r+0x9a>
 8008d2e:	89a3      	ldrh	r3, [r4, #12]
 8008d30:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008d34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d38:	d003      	beq.n	8008d42 <__swsetup_r+0x9a>
 8008d3a:	4621      	mov	r1, r4
 8008d3c:	4630      	mov	r0, r6
 8008d3e:	f000 f9ff 	bl	8009140 <__smakebuf_r>
 8008d42:	89a0      	ldrh	r0, [r4, #12]
 8008d44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008d48:	f010 0301 	ands.w	r3, r0, #1
 8008d4c:	d00a      	beq.n	8008d64 <__swsetup_r+0xbc>
 8008d4e:	2300      	movs	r3, #0
 8008d50:	60a3      	str	r3, [r4, #8]
 8008d52:	6963      	ldr	r3, [r4, #20]
 8008d54:	425b      	negs	r3, r3
 8008d56:	61a3      	str	r3, [r4, #24]
 8008d58:	6923      	ldr	r3, [r4, #16]
 8008d5a:	b943      	cbnz	r3, 8008d6e <__swsetup_r+0xc6>
 8008d5c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008d60:	d1ba      	bne.n	8008cd8 <__swsetup_r+0x30>
 8008d62:	bd70      	pop	{r4, r5, r6, pc}
 8008d64:	0781      	lsls	r1, r0, #30
 8008d66:	bf58      	it	pl
 8008d68:	6963      	ldrpl	r3, [r4, #20]
 8008d6a:	60a3      	str	r3, [r4, #8]
 8008d6c:	e7f4      	b.n	8008d58 <__swsetup_r+0xb0>
 8008d6e:	2000      	movs	r0, #0
 8008d70:	e7f7      	b.n	8008d62 <__swsetup_r+0xba>
 8008d72:	bf00      	nop
 8008d74:	20000024 	.word	0x20000024
 8008d78:	0800a7a8 	.word	0x0800a7a8
 8008d7c:	0800a7c8 	.word	0x0800a7c8
 8008d80:	0800a788 	.word	0x0800a788

08008d84 <__sflush_r>:
 8008d84:	898a      	ldrh	r2, [r1, #12]
 8008d86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d8a:	4605      	mov	r5, r0
 8008d8c:	0710      	lsls	r0, r2, #28
 8008d8e:	460c      	mov	r4, r1
 8008d90:	d458      	bmi.n	8008e44 <__sflush_r+0xc0>
 8008d92:	684b      	ldr	r3, [r1, #4]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	dc05      	bgt.n	8008da4 <__sflush_r+0x20>
 8008d98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	dc02      	bgt.n	8008da4 <__sflush_r+0x20>
 8008d9e:	2000      	movs	r0, #0
 8008da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008da4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008da6:	2e00      	cmp	r6, #0
 8008da8:	d0f9      	beq.n	8008d9e <__sflush_r+0x1a>
 8008daa:	2300      	movs	r3, #0
 8008dac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008db0:	682f      	ldr	r7, [r5, #0]
 8008db2:	602b      	str	r3, [r5, #0]
 8008db4:	d032      	beq.n	8008e1c <__sflush_r+0x98>
 8008db6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008db8:	89a3      	ldrh	r3, [r4, #12]
 8008dba:	075a      	lsls	r2, r3, #29
 8008dbc:	d505      	bpl.n	8008dca <__sflush_r+0x46>
 8008dbe:	6863      	ldr	r3, [r4, #4]
 8008dc0:	1ac0      	subs	r0, r0, r3
 8008dc2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008dc4:	b10b      	cbz	r3, 8008dca <__sflush_r+0x46>
 8008dc6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008dc8:	1ac0      	subs	r0, r0, r3
 8008dca:	2300      	movs	r3, #0
 8008dcc:	4602      	mov	r2, r0
 8008dce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008dd0:	6a21      	ldr	r1, [r4, #32]
 8008dd2:	4628      	mov	r0, r5
 8008dd4:	47b0      	blx	r6
 8008dd6:	1c43      	adds	r3, r0, #1
 8008dd8:	89a3      	ldrh	r3, [r4, #12]
 8008dda:	d106      	bne.n	8008dea <__sflush_r+0x66>
 8008ddc:	6829      	ldr	r1, [r5, #0]
 8008dde:	291d      	cmp	r1, #29
 8008de0:	d82c      	bhi.n	8008e3c <__sflush_r+0xb8>
 8008de2:	4a2a      	ldr	r2, [pc, #168]	; (8008e8c <__sflush_r+0x108>)
 8008de4:	40ca      	lsrs	r2, r1
 8008de6:	07d6      	lsls	r6, r2, #31
 8008de8:	d528      	bpl.n	8008e3c <__sflush_r+0xb8>
 8008dea:	2200      	movs	r2, #0
 8008dec:	6062      	str	r2, [r4, #4]
 8008dee:	04d9      	lsls	r1, r3, #19
 8008df0:	6922      	ldr	r2, [r4, #16]
 8008df2:	6022      	str	r2, [r4, #0]
 8008df4:	d504      	bpl.n	8008e00 <__sflush_r+0x7c>
 8008df6:	1c42      	adds	r2, r0, #1
 8008df8:	d101      	bne.n	8008dfe <__sflush_r+0x7a>
 8008dfa:	682b      	ldr	r3, [r5, #0]
 8008dfc:	b903      	cbnz	r3, 8008e00 <__sflush_r+0x7c>
 8008dfe:	6560      	str	r0, [r4, #84]	; 0x54
 8008e00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e02:	602f      	str	r7, [r5, #0]
 8008e04:	2900      	cmp	r1, #0
 8008e06:	d0ca      	beq.n	8008d9e <__sflush_r+0x1a>
 8008e08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e0c:	4299      	cmp	r1, r3
 8008e0e:	d002      	beq.n	8008e16 <__sflush_r+0x92>
 8008e10:	4628      	mov	r0, r5
 8008e12:	f000 f9d5 	bl	80091c0 <_free_r>
 8008e16:	2000      	movs	r0, #0
 8008e18:	6360      	str	r0, [r4, #52]	; 0x34
 8008e1a:	e7c1      	b.n	8008da0 <__sflush_r+0x1c>
 8008e1c:	6a21      	ldr	r1, [r4, #32]
 8008e1e:	2301      	movs	r3, #1
 8008e20:	4628      	mov	r0, r5
 8008e22:	47b0      	blx	r6
 8008e24:	1c41      	adds	r1, r0, #1
 8008e26:	d1c7      	bne.n	8008db8 <__sflush_r+0x34>
 8008e28:	682b      	ldr	r3, [r5, #0]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d0c4      	beq.n	8008db8 <__sflush_r+0x34>
 8008e2e:	2b1d      	cmp	r3, #29
 8008e30:	d001      	beq.n	8008e36 <__sflush_r+0xb2>
 8008e32:	2b16      	cmp	r3, #22
 8008e34:	d101      	bne.n	8008e3a <__sflush_r+0xb6>
 8008e36:	602f      	str	r7, [r5, #0]
 8008e38:	e7b1      	b.n	8008d9e <__sflush_r+0x1a>
 8008e3a:	89a3      	ldrh	r3, [r4, #12]
 8008e3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e40:	81a3      	strh	r3, [r4, #12]
 8008e42:	e7ad      	b.n	8008da0 <__sflush_r+0x1c>
 8008e44:	690f      	ldr	r7, [r1, #16]
 8008e46:	2f00      	cmp	r7, #0
 8008e48:	d0a9      	beq.n	8008d9e <__sflush_r+0x1a>
 8008e4a:	0793      	lsls	r3, r2, #30
 8008e4c:	680e      	ldr	r6, [r1, #0]
 8008e4e:	bf08      	it	eq
 8008e50:	694b      	ldreq	r3, [r1, #20]
 8008e52:	600f      	str	r7, [r1, #0]
 8008e54:	bf18      	it	ne
 8008e56:	2300      	movne	r3, #0
 8008e58:	eba6 0807 	sub.w	r8, r6, r7
 8008e5c:	608b      	str	r3, [r1, #8]
 8008e5e:	f1b8 0f00 	cmp.w	r8, #0
 8008e62:	dd9c      	ble.n	8008d9e <__sflush_r+0x1a>
 8008e64:	6a21      	ldr	r1, [r4, #32]
 8008e66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008e68:	4643      	mov	r3, r8
 8008e6a:	463a      	mov	r2, r7
 8008e6c:	4628      	mov	r0, r5
 8008e6e:	47b0      	blx	r6
 8008e70:	2800      	cmp	r0, #0
 8008e72:	dc06      	bgt.n	8008e82 <__sflush_r+0xfe>
 8008e74:	89a3      	ldrh	r3, [r4, #12]
 8008e76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e7a:	81a3      	strh	r3, [r4, #12]
 8008e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e80:	e78e      	b.n	8008da0 <__sflush_r+0x1c>
 8008e82:	4407      	add	r7, r0
 8008e84:	eba8 0800 	sub.w	r8, r8, r0
 8008e88:	e7e9      	b.n	8008e5e <__sflush_r+0xda>
 8008e8a:	bf00      	nop
 8008e8c:	20400001 	.word	0x20400001

08008e90 <_fflush_r>:
 8008e90:	b538      	push	{r3, r4, r5, lr}
 8008e92:	690b      	ldr	r3, [r1, #16]
 8008e94:	4605      	mov	r5, r0
 8008e96:	460c      	mov	r4, r1
 8008e98:	b913      	cbnz	r3, 8008ea0 <_fflush_r+0x10>
 8008e9a:	2500      	movs	r5, #0
 8008e9c:	4628      	mov	r0, r5
 8008e9e:	bd38      	pop	{r3, r4, r5, pc}
 8008ea0:	b118      	cbz	r0, 8008eaa <_fflush_r+0x1a>
 8008ea2:	6983      	ldr	r3, [r0, #24]
 8008ea4:	b90b      	cbnz	r3, 8008eaa <_fflush_r+0x1a>
 8008ea6:	f000 f887 	bl	8008fb8 <__sinit>
 8008eaa:	4b14      	ldr	r3, [pc, #80]	; (8008efc <_fflush_r+0x6c>)
 8008eac:	429c      	cmp	r4, r3
 8008eae:	d11b      	bne.n	8008ee8 <_fflush_r+0x58>
 8008eb0:	686c      	ldr	r4, [r5, #4]
 8008eb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d0ef      	beq.n	8008e9a <_fflush_r+0xa>
 8008eba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008ebc:	07d0      	lsls	r0, r2, #31
 8008ebe:	d404      	bmi.n	8008eca <_fflush_r+0x3a>
 8008ec0:	0599      	lsls	r1, r3, #22
 8008ec2:	d402      	bmi.n	8008eca <_fflush_r+0x3a>
 8008ec4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ec6:	f000 f915 	bl	80090f4 <__retarget_lock_acquire_recursive>
 8008eca:	4628      	mov	r0, r5
 8008ecc:	4621      	mov	r1, r4
 8008ece:	f7ff ff59 	bl	8008d84 <__sflush_r>
 8008ed2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ed4:	07da      	lsls	r2, r3, #31
 8008ed6:	4605      	mov	r5, r0
 8008ed8:	d4e0      	bmi.n	8008e9c <_fflush_r+0xc>
 8008eda:	89a3      	ldrh	r3, [r4, #12]
 8008edc:	059b      	lsls	r3, r3, #22
 8008ede:	d4dd      	bmi.n	8008e9c <_fflush_r+0xc>
 8008ee0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ee2:	f000 f908 	bl	80090f6 <__retarget_lock_release_recursive>
 8008ee6:	e7d9      	b.n	8008e9c <_fflush_r+0xc>
 8008ee8:	4b05      	ldr	r3, [pc, #20]	; (8008f00 <_fflush_r+0x70>)
 8008eea:	429c      	cmp	r4, r3
 8008eec:	d101      	bne.n	8008ef2 <_fflush_r+0x62>
 8008eee:	68ac      	ldr	r4, [r5, #8]
 8008ef0:	e7df      	b.n	8008eb2 <_fflush_r+0x22>
 8008ef2:	4b04      	ldr	r3, [pc, #16]	; (8008f04 <_fflush_r+0x74>)
 8008ef4:	429c      	cmp	r4, r3
 8008ef6:	bf08      	it	eq
 8008ef8:	68ec      	ldreq	r4, [r5, #12]
 8008efa:	e7da      	b.n	8008eb2 <_fflush_r+0x22>
 8008efc:	0800a7a8 	.word	0x0800a7a8
 8008f00:	0800a7c8 	.word	0x0800a7c8
 8008f04:	0800a788 	.word	0x0800a788

08008f08 <std>:
 8008f08:	2300      	movs	r3, #0
 8008f0a:	b510      	push	{r4, lr}
 8008f0c:	4604      	mov	r4, r0
 8008f0e:	e9c0 3300 	strd	r3, r3, [r0]
 8008f12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008f16:	6083      	str	r3, [r0, #8]
 8008f18:	8181      	strh	r1, [r0, #12]
 8008f1a:	6643      	str	r3, [r0, #100]	; 0x64
 8008f1c:	81c2      	strh	r2, [r0, #14]
 8008f1e:	6183      	str	r3, [r0, #24]
 8008f20:	4619      	mov	r1, r3
 8008f22:	2208      	movs	r2, #8
 8008f24:	305c      	adds	r0, #92	; 0x5c
 8008f26:	f7ff fdb7 	bl	8008a98 <memset>
 8008f2a:	4b05      	ldr	r3, [pc, #20]	; (8008f40 <std+0x38>)
 8008f2c:	6263      	str	r3, [r4, #36]	; 0x24
 8008f2e:	4b05      	ldr	r3, [pc, #20]	; (8008f44 <std+0x3c>)
 8008f30:	62a3      	str	r3, [r4, #40]	; 0x28
 8008f32:	4b05      	ldr	r3, [pc, #20]	; (8008f48 <std+0x40>)
 8008f34:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008f36:	4b05      	ldr	r3, [pc, #20]	; (8008f4c <std+0x44>)
 8008f38:	6224      	str	r4, [r4, #32]
 8008f3a:	6323      	str	r3, [r4, #48]	; 0x30
 8008f3c:	bd10      	pop	{r4, pc}
 8008f3e:	bf00      	nop
 8008f40:	08009911 	.word	0x08009911
 8008f44:	08009933 	.word	0x08009933
 8008f48:	0800996b 	.word	0x0800996b
 8008f4c:	0800998f 	.word	0x0800998f

08008f50 <_cleanup_r>:
 8008f50:	4901      	ldr	r1, [pc, #4]	; (8008f58 <_cleanup_r+0x8>)
 8008f52:	f000 b8af 	b.w	80090b4 <_fwalk_reent>
 8008f56:	bf00      	nop
 8008f58:	08008e91 	.word	0x08008e91

08008f5c <__sfmoreglue>:
 8008f5c:	b570      	push	{r4, r5, r6, lr}
 8008f5e:	1e4a      	subs	r2, r1, #1
 8008f60:	2568      	movs	r5, #104	; 0x68
 8008f62:	4355      	muls	r5, r2
 8008f64:	460e      	mov	r6, r1
 8008f66:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008f6a:	f000 f979 	bl	8009260 <_malloc_r>
 8008f6e:	4604      	mov	r4, r0
 8008f70:	b140      	cbz	r0, 8008f84 <__sfmoreglue+0x28>
 8008f72:	2100      	movs	r1, #0
 8008f74:	e9c0 1600 	strd	r1, r6, [r0]
 8008f78:	300c      	adds	r0, #12
 8008f7a:	60a0      	str	r0, [r4, #8]
 8008f7c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008f80:	f7ff fd8a 	bl	8008a98 <memset>
 8008f84:	4620      	mov	r0, r4
 8008f86:	bd70      	pop	{r4, r5, r6, pc}

08008f88 <__sfp_lock_acquire>:
 8008f88:	4801      	ldr	r0, [pc, #4]	; (8008f90 <__sfp_lock_acquire+0x8>)
 8008f8a:	f000 b8b3 	b.w	80090f4 <__retarget_lock_acquire_recursive>
 8008f8e:	bf00      	nop
 8008f90:	20006044 	.word	0x20006044

08008f94 <__sfp_lock_release>:
 8008f94:	4801      	ldr	r0, [pc, #4]	; (8008f9c <__sfp_lock_release+0x8>)
 8008f96:	f000 b8ae 	b.w	80090f6 <__retarget_lock_release_recursive>
 8008f9a:	bf00      	nop
 8008f9c:	20006044 	.word	0x20006044

08008fa0 <__sinit_lock_acquire>:
 8008fa0:	4801      	ldr	r0, [pc, #4]	; (8008fa8 <__sinit_lock_acquire+0x8>)
 8008fa2:	f000 b8a7 	b.w	80090f4 <__retarget_lock_acquire_recursive>
 8008fa6:	bf00      	nop
 8008fa8:	2000603f 	.word	0x2000603f

08008fac <__sinit_lock_release>:
 8008fac:	4801      	ldr	r0, [pc, #4]	; (8008fb4 <__sinit_lock_release+0x8>)
 8008fae:	f000 b8a2 	b.w	80090f6 <__retarget_lock_release_recursive>
 8008fb2:	bf00      	nop
 8008fb4:	2000603f 	.word	0x2000603f

08008fb8 <__sinit>:
 8008fb8:	b510      	push	{r4, lr}
 8008fba:	4604      	mov	r4, r0
 8008fbc:	f7ff fff0 	bl	8008fa0 <__sinit_lock_acquire>
 8008fc0:	69a3      	ldr	r3, [r4, #24]
 8008fc2:	b11b      	cbz	r3, 8008fcc <__sinit+0x14>
 8008fc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fc8:	f7ff bff0 	b.w	8008fac <__sinit_lock_release>
 8008fcc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008fd0:	6523      	str	r3, [r4, #80]	; 0x50
 8008fd2:	4b13      	ldr	r3, [pc, #76]	; (8009020 <__sinit+0x68>)
 8008fd4:	4a13      	ldr	r2, [pc, #76]	; (8009024 <__sinit+0x6c>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	62a2      	str	r2, [r4, #40]	; 0x28
 8008fda:	42a3      	cmp	r3, r4
 8008fdc:	bf04      	itt	eq
 8008fde:	2301      	moveq	r3, #1
 8008fe0:	61a3      	streq	r3, [r4, #24]
 8008fe2:	4620      	mov	r0, r4
 8008fe4:	f000 f820 	bl	8009028 <__sfp>
 8008fe8:	6060      	str	r0, [r4, #4]
 8008fea:	4620      	mov	r0, r4
 8008fec:	f000 f81c 	bl	8009028 <__sfp>
 8008ff0:	60a0      	str	r0, [r4, #8]
 8008ff2:	4620      	mov	r0, r4
 8008ff4:	f000 f818 	bl	8009028 <__sfp>
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	60e0      	str	r0, [r4, #12]
 8008ffc:	2104      	movs	r1, #4
 8008ffe:	6860      	ldr	r0, [r4, #4]
 8009000:	f7ff ff82 	bl	8008f08 <std>
 8009004:	68a0      	ldr	r0, [r4, #8]
 8009006:	2201      	movs	r2, #1
 8009008:	2109      	movs	r1, #9
 800900a:	f7ff ff7d 	bl	8008f08 <std>
 800900e:	68e0      	ldr	r0, [r4, #12]
 8009010:	2202      	movs	r2, #2
 8009012:	2112      	movs	r1, #18
 8009014:	f7ff ff78 	bl	8008f08 <std>
 8009018:	2301      	movs	r3, #1
 800901a:	61a3      	str	r3, [r4, #24]
 800901c:	e7d2      	b.n	8008fc4 <__sinit+0xc>
 800901e:	bf00      	nop
 8009020:	0800a680 	.word	0x0800a680
 8009024:	08008f51 	.word	0x08008f51

08009028 <__sfp>:
 8009028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800902a:	4607      	mov	r7, r0
 800902c:	f7ff ffac 	bl	8008f88 <__sfp_lock_acquire>
 8009030:	4b1e      	ldr	r3, [pc, #120]	; (80090ac <__sfp+0x84>)
 8009032:	681e      	ldr	r6, [r3, #0]
 8009034:	69b3      	ldr	r3, [r6, #24]
 8009036:	b913      	cbnz	r3, 800903e <__sfp+0x16>
 8009038:	4630      	mov	r0, r6
 800903a:	f7ff ffbd 	bl	8008fb8 <__sinit>
 800903e:	3648      	adds	r6, #72	; 0x48
 8009040:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009044:	3b01      	subs	r3, #1
 8009046:	d503      	bpl.n	8009050 <__sfp+0x28>
 8009048:	6833      	ldr	r3, [r6, #0]
 800904a:	b30b      	cbz	r3, 8009090 <__sfp+0x68>
 800904c:	6836      	ldr	r6, [r6, #0]
 800904e:	e7f7      	b.n	8009040 <__sfp+0x18>
 8009050:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009054:	b9d5      	cbnz	r5, 800908c <__sfp+0x64>
 8009056:	4b16      	ldr	r3, [pc, #88]	; (80090b0 <__sfp+0x88>)
 8009058:	60e3      	str	r3, [r4, #12]
 800905a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800905e:	6665      	str	r5, [r4, #100]	; 0x64
 8009060:	f000 f847 	bl	80090f2 <__retarget_lock_init_recursive>
 8009064:	f7ff ff96 	bl	8008f94 <__sfp_lock_release>
 8009068:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800906c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009070:	6025      	str	r5, [r4, #0]
 8009072:	61a5      	str	r5, [r4, #24]
 8009074:	2208      	movs	r2, #8
 8009076:	4629      	mov	r1, r5
 8009078:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800907c:	f7ff fd0c 	bl	8008a98 <memset>
 8009080:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009084:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009088:	4620      	mov	r0, r4
 800908a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800908c:	3468      	adds	r4, #104	; 0x68
 800908e:	e7d9      	b.n	8009044 <__sfp+0x1c>
 8009090:	2104      	movs	r1, #4
 8009092:	4638      	mov	r0, r7
 8009094:	f7ff ff62 	bl	8008f5c <__sfmoreglue>
 8009098:	4604      	mov	r4, r0
 800909a:	6030      	str	r0, [r6, #0]
 800909c:	2800      	cmp	r0, #0
 800909e:	d1d5      	bne.n	800904c <__sfp+0x24>
 80090a0:	f7ff ff78 	bl	8008f94 <__sfp_lock_release>
 80090a4:	230c      	movs	r3, #12
 80090a6:	603b      	str	r3, [r7, #0]
 80090a8:	e7ee      	b.n	8009088 <__sfp+0x60>
 80090aa:	bf00      	nop
 80090ac:	0800a680 	.word	0x0800a680
 80090b0:	ffff0001 	.word	0xffff0001

080090b4 <_fwalk_reent>:
 80090b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090b8:	4606      	mov	r6, r0
 80090ba:	4688      	mov	r8, r1
 80090bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80090c0:	2700      	movs	r7, #0
 80090c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80090c6:	f1b9 0901 	subs.w	r9, r9, #1
 80090ca:	d505      	bpl.n	80090d8 <_fwalk_reent+0x24>
 80090cc:	6824      	ldr	r4, [r4, #0]
 80090ce:	2c00      	cmp	r4, #0
 80090d0:	d1f7      	bne.n	80090c2 <_fwalk_reent+0xe>
 80090d2:	4638      	mov	r0, r7
 80090d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090d8:	89ab      	ldrh	r3, [r5, #12]
 80090da:	2b01      	cmp	r3, #1
 80090dc:	d907      	bls.n	80090ee <_fwalk_reent+0x3a>
 80090de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80090e2:	3301      	adds	r3, #1
 80090e4:	d003      	beq.n	80090ee <_fwalk_reent+0x3a>
 80090e6:	4629      	mov	r1, r5
 80090e8:	4630      	mov	r0, r6
 80090ea:	47c0      	blx	r8
 80090ec:	4307      	orrs	r7, r0
 80090ee:	3568      	adds	r5, #104	; 0x68
 80090f0:	e7e9      	b.n	80090c6 <_fwalk_reent+0x12>

080090f2 <__retarget_lock_init_recursive>:
 80090f2:	4770      	bx	lr

080090f4 <__retarget_lock_acquire_recursive>:
 80090f4:	4770      	bx	lr

080090f6 <__retarget_lock_release_recursive>:
 80090f6:	4770      	bx	lr

080090f8 <__swhatbuf_r>:
 80090f8:	b570      	push	{r4, r5, r6, lr}
 80090fa:	460e      	mov	r6, r1
 80090fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009100:	2900      	cmp	r1, #0
 8009102:	b096      	sub	sp, #88	; 0x58
 8009104:	4614      	mov	r4, r2
 8009106:	461d      	mov	r5, r3
 8009108:	da07      	bge.n	800911a <__swhatbuf_r+0x22>
 800910a:	2300      	movs	r3, #0
 800910c:	602b      	str	r3, [r5, #0]
 800910e:	89b3      	ldrh	r3, [r6, #12]
 8009110:	061a      	lsls	r2, r3, #24
 8009112:	d410      	bmi.n	8009136 <__swhatbuf_r+0x3e>
 8009114:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009118:	e00e      	b.n	8009138 <__swhatbuf_r+0x40>
 800911a:	466a      	mov	r2, sp
 800911c:	f000 fc5e 	bl	80099dc <_fstat_r>
 8009120:	2800      	cmp	r0, #0
 8009122:	dbf2      	blt.n	800910a <__swhatbuf_r+0x12>
 8009124:	9a01      	ldr	r2, [sp, #4]
 8009126:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800912a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800912e:	425a      	negs	r2, r3
 8009130:	415a      	adcs	r2, r3
 8009132:	602a      	str	r2, [r5, #0]
 8009134:	e7ee      	b.n	8009114 <__swhatbuf_r+0x1c>
 8009136:	2340      	movs	r3, #64	; 0x40
 8009138:	2000      	movs	r0, #0
 800913a:	6023      	str	r3, [r4, #0]
 800913c:	b016      	add	sp, #88	; 0x58
 800913e:	bd70      	pop	{r4, r5, r6, pc}

08009140 <__smakebuf_r>:
 8009140:	898b      	ldrh	r3, [r1, #12]
 8009142:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009144:	079d      	lsls	r5, r3, #30
 8009146:	4606      	mov	r6, r0
 8009148:	460c      	mov	r4, r1
 800914a:	d507      	bpl.n	800915c <__smakebuf_r+0x1c>
 800914c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009150:	6023      	str	r3, [r4, #0]
 8009152:	6123      	str	r3, [r4, #16]
 8009154:	2301      	movs	r3, #1
 8009156:	6163      	str	r3, [r4, #20]
 8009158:	b002      	add	sp, #8
 800915a:	bd70      	pop	{r4, r5, r6, pc}
 800915c:	ab01      	add	r3, sp, #4
 800915e:	466a      	mov	r2, sp
 8009160:	f7ff ffca 	bl	80090f8 <__swhatbuf_r>
 8009164:	9900      	ldr	r1, [sp, #0]
 8009166:	4605      	mov	r5, r0
 8009168:	4630      	mov	r0, r6
 800916a:	f000 f879 	bl	8009260 <_malloc_r>
 800916e:	b948      	cbnz	r0, 8009184 <__smakebuf_r+0x44>
 8009170:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009174:	059a      	lsls	r2, r3, #22
 8009176:	d4ef      	bmi.n	8009158 <__smakebuf_r+0x18>
 8009178:	f023 0303 	bic.w	r3, r3, #3
 800917c:	f043 0302 	orr.w	r3, r3, #2
 8009180:	81a3      	strh	r3, [r4, #12]
 8009182:	e7e3      	b.n	800914c <__smakebuf_r+0xc>
 8009184:	4b0d      	ldr	r3, [pc, #52]	; (80091bc <__smakebuf_r+0x7c>)
 8009186:	62b3      	str	r3, [r6, #40]	; 0x28
 8009188:	89a3      	ldrh	r3, [r4, #12]
 800918a:	6020      	str	r0, [r4, #0]
 800918c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009190:	81a3      	strh	r3, [r4, #12]
 8009192:	9b00      	ldr	r3, [sp, #0]
 8009194:	6163      	str	r3, [r4, #20]
 8009196:	9b01      	ldr	r3, [sp, #4]
 8009198:	6120      	str	r0, [r4, #16]
 800919a:	b15b      	cbz	r3, 80091b4 <__smakebuf_r+0x74>
 800919c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80091a0:	4630      	mov	r0, r6
 80091a2:	f000 fc2d 	bl	8009a00 <_isatty_r>
 80091a6:	b128      	cbz	r0, 80091b4 <__smakebuf_r+0x74>
 80091a8:	89a3      	ldrh	r3, [r4, #12]
 80091aa:	f023 0303 	bic.w	r3, r3, #3
 80091ae:	f043 0301 	orr.w	r3, r3, #1
 80091b2:	81a3      	strh	r3, [r4, #12]
 80091b4:	89a0      	ldrh	r0, [r4, #12]
 80091b6:	4305      	orrs	r5, r0
 80091b8:	81a5      	strh	r5, [r4, #12]
 80091ba:	e7cd      	b.n	8009158 <__smakebuf_r+0x18>
 80091bc:	08008f51 	.word	0x08008f51

080091c0 <_free_r>:
 80091c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80091c2:	2900      	cmp	r1, #0
 80091c4:	d048      	beq.n	8009258 <_free_r+0x98>
 80091c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091ca:	9001      	str	r0, [sp, #4]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	f1a1 0404 	sub.w	r4, r1, #4
 80091d2:	bfb8      	it	lt
 80091d4:	18e4      	addlt	r4, r4, r3
 80091d6:	f000 fc35 	bl	8009a44 <__malloc_lock>
 80091da:	4a20      	ldr	r2, [pc, #128]	; (800925c <_free_r+0x9c>)
 80091dc:	9801      	ldr	r0, [sp, #4]
 80091de:	6813      	ldr	r3, [r2, #0]
 80091e0:	4615      	mov	r5, r2
 80091e2:	b933      	cbnz	r3, 80091f2 <_free_r+0x32>
 80091e4:	6063      	str	r3, [r4, #4]
 80091e6:	6014      	str	r4, [r2, #0]
 80091e8:	b003      	add	sp, #12
 80091ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80091ee:	f000 bc2f 	b.w	8009a50 <__malloc_unlock>
 80091f2:	42a3      	cmp	r3, r4
 80091f4:	d90b      	bls.n	800920e <_free_r+0x4e>
 80091f6:	6821      	ldr	r1, [r4, #0]
 80091f8:	1862      	adds	r2, r4, r1
 80091fa:	4293      	cmp	r3, r2
 80091fc:	bf04      	itt	eq
 80091fe:	681a      	ldreq	r2, [r3, #0]
 8009200:	685b      	ldreq	r3, [r3, #4]
 8009202:	6063      	str	r3, [r4, #4]
 8009204:	bf04      	itt	eq
 8009206:	1852      	addeq	r2, r2, r1
 8009208:	6022      	streq	r2, [r4, #0]
 800920a:	602c      	str	r4, [r5, #0]
 800920c:	e7ec      	b.n	80091e8 <_free_r+0x28>
 800920e:	461a      	mov	r2, r3
 8009210:	685b      	ldr	r3, [r3, #4]
 8009212:	b10b      	cbz	r3, 8009218 <_free_r+0x58>
 8009214:	42a3      	cmp	r3, r4
 8009216:	d9fa      	bls.n	800920e <_free_r+0x4e>
 8009218:	6811      	ldr	r1, [r2, #0]
 800921a:	1855      	adds	r5, r2, r1
 800921c:	42a5      	cmp	r5, r4
 800921e:	d10b      	bne.n	8009238 <_free_r+0x78>
 8009220:	6824      	ldr	r4, [r4, #0]
 8009222:	4421      	add	r1, r4
 8009224:	1854      	adds	r4, r2, r1
 8009226:	42a3      	cmp	r3, r4
 8009228:	6011      	str	r1, [r2, #0]
 800922a:	d1dd      	bne.n	80091e8 <_free_r+0x28>
 800922c:	681c      	ldr	r4, [r3, #0]
 800922e:	685b      	ldr	r3, [r3, #4]
 8009230:	6053      	str	r3, [r2, #4]
 8009232:	4421      	add	r1, r4
 8009234:	6011      	str	r1, [r2, #0]
 8009236:	e7d7      	b.n	80091e8 <_free_r+0x28>
 8009238:	d902      	bls.n	8009240 <_free_r+0x80>
 800923a:	230c      	movs	r3, #12
 800923c:	6003      	str	r3, [r0, #0]
 800923e:	e7d3      	b.n	80091e8 <_free_r+0x28>
 8009240:	6825      	ldr	r5, [r4, #0]
 8009242:	1961      	adds	r1, r4, r5
 8009244:	428b      	cmp	r3, r1
 8009246:	bf04      	itt	eq
 8009248:	6819      	ldreq	r1, [r3, #0]
 800924a:	685b      	ldreq	r3, [r3, #4]
 800924c:	6063      	str	r3, [r4, #4]
 800924e:	bf04      	itt	eq
 8009250:	1949      	addeq	r1, r1, r5
 8009252:	6021      	streq	r1, [r4, #0]
 8009254:	6054      	str	r4, [r2, #4]
 8009256:	e7c7      	b.n	80091e8 <_free_r+0x28>
 8009258:	b003      	add	sp, #12
 800925a:	bd30      	pop	{r4, r5, pc}
 800925c:	200000d0 	.word	0x200000d0

08009260 <_malloc_r>:
 8009260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009262:	1ccd      	adds	r5, r1, #3
 8009264:	f025 0503 	bic.w	r5, r5, #3
 8009268:	3508      	adds	r5, #8
 800926a:	2d0c      	cmp	r5, #12
 800926c:	bf38      	it	cc
 800926e:	250c      	movcc	r5, #12
 8009270:	2d00      	cmp	r5, #0
 8009272:	4606      	mov	r6, r0
 8009274:	db01      	blt.n	800927a <_malloc_r+0x1a>
 8009276:	42a9      	cmp	r1, r5
 8009278:	d903      	bls.n	8009282 <_malloc_r+0x22>
 800927a:	230c      	movs	r3, #12
 800927c:	6033      	str	r3, [r6, #0]
 800927e:	2000      	movs	r0, #0
 8009280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009282:	f000 fbdf 	bl	8009a44 <__malloc_lock>
 8009286:	4921      	ldr	r1, [pc, #132]	; (800930c <_malloc_r+0xac>)
 8009288:	680a      	ldr	r2, [r1, #0]
 800928a:	4614      	mov	r4, r2
 800928c:	b99c      	cbnz	r4, 80092b6 <_malloc_r+0x56>
 800928e:	4f20      	ldr	r7, [pc, #128]	; (8009310 <_malloc_r+0xb0>)
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	b923      	cbnz	r3, 800929e <_malloc_r+0x3e>
 8009294:	4621      	mov	r1, r4
 8009296:	4630      	mov	r0, r6
 8009298:	f000 fb2a 	bl	80098f0 <_sbrk_r>
 800929c:	6038      	str	r0, [r7, #0]
 800929e:	4629      	mov	r1, r5
 80092a0:	4630      	mov	r0, r6
 80092a2:	f000 fb25 	bl	80098f0 <_sbrk_r>
 80092a6:	1c43      	adds	r3, r0, #1
 80092a8:	d123      	bne.n	80092f2 <_malloc_r+0x92>
 80092aa:	230c      	movs	r3, #12
 80092ac:	6033      	str	r3, [r6, #0]
 80092ae:	4630      	mov	r0, r6
 80092b0:	f000 fbce 	bl	8009a50 <__malloc_unlock>
 80092b4:	e7e3      	b.n	800927e <_malloc_r+0x1e>
 80092b6:	6823      	ldr	r3, [r4, #0]
 80092b8:	1b5b      	subs	r3, r3, r5
 80092ba:	d417      	bmi.n	80092ec <_malloc_r+0x8c>
 80092bc:	2b0b      	cmp	r3, #11
 80092be:	d903      	bls.n	80092c8 <_malloc_r+0x68>
 80092c0:	6023      	str	r3, [r4, #0]
 80092c2:	441c      	add	r4, r3
 80092c4:	6025      	str	r5, [r4, #0]
 80092c6:	e004      	b.n	80092d2 <_malloc_r+0x72>
 80092c8:	6863      	ldr	r3, [r4, #4]
 80092ca:	42a2      	cmp	r2, r4
 80092cc:	bf0c      	ite	eq
 80092ce:	600b      	streq	r3, [r1, #0]
 80092d0:	6053      	strne	r3, [r2, #4]
 80092d2:	4630      	mov	r0, r6
 80092d4:	f000 fbbc 	bl	8009a50 <__malloc_unlock>
 80092d8:	f104 000b 	add.w	r0, r4, #11
 80092dc:	1d23      	adds	r3, r4, #4
 80092de:	f020 0007 	bic.w	r0, r0, #7
 80092e2:	1ac2      	subs	r2, r0, r3
 80092e4:	d0cc      	beq.n	8009280 <_malloc_r+0x20>
 80092e6:	1a1b      	subs	r3, r3, r0
 80092e8:	50a3      	str	r3, [r4, r2]
 80092ea:	e7c9      	b.n	8009280 <_malloc_r+0x20>
 80092ec:	4622      	mov	r2, r4
 80092ee:	6864      	ldr	r4, [r4, #4]
 80092f0:	e7cc      	b.n	800928c <_malloc_r+0x2c>
 80092f2:	1cc4      	adds	r4, r0, #3
 80092f4:	f024 0403 	bic.w	r4, r4, #3
 80092f8:	42a0      	cmp	r0, r4
 80092fa:	d0e3      	beq.n	80092c4 <_malloc_r+0x64>
 80092fc:	1a21      	subs	r1, r4, r0
 80092fe:	4630      	mov	r0, r6
 8009300:	f000 faf6 	bl	80098f0 <_sbrk_r>
 8009304:	3001      	adds	r0, #1
 8009306:	d1dd      	bne.n	80092c4 <_malloc_r+0x64>
 8009308:	e7cf      	b.n	80092aa <_malloc_r+0x4a>
 800930a:	bf00      	nop
 800930c:	200000d0 	.word	0x200000d0
 8009310:	200000d4 	.word	0x200000d4

08009314 <__sfputc_r>:
 8009314:	6893      	ldr	r3, [r2, #8]
 8009316:	3b01      	subs	r3, #1
 8009318:	2b00      	cmp	r3, #0
 800931a:	b410      	push	{r4}
 800931c:	6093      	str	r3, [r2, #8]
 800931e:	da08      	bge.n	8009332 <__sfputc_r+0x1e>
 8009320:	6994      	ldr	r4, [r2, #24]
 8009322:	42a3      	cmp	r3, r4
 8009324:	db01      	blt.n	800932a <__sfputc_r+0x16>
 8009326:	290a      	cmp	r1, #10
 8009328:	d103      	bne.n	8009332 <__sfputc_r+0x1e>
 800932a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800932e:	f7ff bc69 	b.w	8008c04 <__swbuf_r>
 8009332:	6813      	ldr	r3, [r2, #0]
 8009334:	1c58      	adds	r0, r3, #1
 8009336:	6010      	str	r0, [r2, #0]
 8009338:	7019      	strb	r1, [r3, #0]
 800933a:	4608      	mov	r0, r1
 800933c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009340:	4770      	bx	lr

08009342 <__sfputs_r>:
 8009342:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009344:	4606      	mov	r6, r0
 8009346:	460f      	mov	r7, r1
 8009348:	4614      	mov	r4, r2
 800934a:	18d5      	adds	r5, r2, r3
 800934c:	42ac      	cmp	r4, r5
 800934e:	d101      	bne.n	8009354 <__sfputs_r+0x12>
 8009350:	2000      	movs	r0, #0
 8009352:	e007      	b.n	8009364 <__sfputs_r+0x22>
 8009354:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009358:	463a      	mov	r2, r7
 800935a:	4630      	mov	r0, r6
 800935c:	f7ff ffda 	bl	8009314 <__sfputc_r>
 8009360:	1c43      	adds	r3, r0, #1
 8009362:	d1f3      	bne.n	800934c <__sfputs_r+0xa>
 8009364:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009368 <_vfiprintf_r>:
 8009368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800936c:	460d      	mov	r5, r1
 800936e:	b09d      	sub	sp, #116	; 0x74
 8009370:	4614      	mov	r4, r2
 8009372:	4698      	mov	r8, r3
 8009374:	4606      	mov	r6, r0
 8009376:	b118      	cbz	r0, 8009380 <_vfiprintf_r+0x18>
 8009378:	6983      	ldr	r3, [r0, #24]
 800937a:	b90b      	cbnz	r3, 8009380 <_vfiprintf_r+0x18>
 800937c:	f7ff fe1c 	bl	8008fb8 <__sinit>
 8009380:	4b89      	ldr	r3, [pc, #548]	; (80095a8 <_vfiprintf_r+0x240>)
 8009382:	429d      	cmp	r5, r3
 8009384:	d11b      	bne.n	80093be <_vfiprintf_r+0x56>
 8009386:	6875      	ldr	r5, [r6, #4]
 8009388:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800938a:	07d9      	lsls	r1, r3, #31
 800938c:	d405      	bmi.n	800939a <_vfiprintf_r+0x32>
 800938e:	89ab      	ldrh	r3, [r5, #12]
 8009390:	059a      	lsls	r2, r3, #22
 8009392:	d402      	bmi.n	800939a <_vfiprintf_r+0x32>
 8009394:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009396:	f7ff fead 	bl	80090f4 <__retarget_lock_acquire_recursive>
 800939a:	89ab      	ldrh	r3, [r5, #12]
 800939c:	071b      	lsls	r3, r3, #28
 800939e:	d501      	bpl.n	80093a4 <_vfiprintf_r+0x3c>
 80093a0:	692b      	ldr	r3, [r5, #16]
 80093a2:	b9eb      	cbnz	r3, 80093e0 <_vfiprintf_r+0x78>
 80093a4:	4629      	mov	r1, r5
 80093a6:	4630      	mov	r0, r6
 80093a8:	f7ff fc7e 	bl	8008ca8 <__swsetup_r>
 80093ac:	b1c0      	cbz	r0, 80093e0 <_vfiprintf_r+0x78>
 80093ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80093b0:	07dc      	lsls	r4, r3, #31
 80093b2:	d50e      	bpl.n	80093d2 <_vfiprintf_r+0x6a>
 80093b4:	f04f 30ff 	mov.w	r0, #4294967295
 80093b8:	b01d      	add	sp, #116	; 0x74
 80093ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093be:	4b7b      	ldr	r3, [pc, #492]	; (80095ac <_vfiprintf_r+0x244>)
 80093c0:	429d      	cmp	r5, r3
 80093c2:	d101      	bne.n	80093c8 <_vfiprintf_r+0x60>
 80093c4:	68b5      	ldr	r5, [r6, #8]
 80093c6:	e7df      	b.n	8009388 <_vfiprintf_r+0x20>
 80093c8:	4b79      	ldr	r3, [pc, #484]	; (80095b0 <_vfiprintf_r+0x248>)
 80093ca:	429d      	cmp	r5, r3
 80093cc:	bf08      	it	eq
 80093ce:	68f5      	ldreq	r5, [r6, #12]
 80093d0:	e7da      	b.n	8009388 <_vfiprintf_r+0x20>
 80093d2:	89ab      	ldrh	r3, [r5, #12]
 80093d4:	0598      	lsls	r0, r3, #22
 80093d6:	d4ed      	bmi.n	80093b4 <_vfiprintf_r+0x4c>
 80093d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80093da:	f7ff fe8c 	bl	80090f6 <__retarget_lock_release_recursive>
 80093de:	e7e9      	b.n	80093b4 <_vfiprintf_r+0x4c>
 80093e0:	2300      	movs	r3, #0
 80093e2:	9309      	str	r3, [sp, #36]	; 0x24
 80093e4:	2320      	movs	r3, #32
 80093e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80093ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80093ee:	2330      	movs	r3, #48	; 0x30
 80093f0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80095b4 <_vfiprintf_r+0x24c>
 80093f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80093f8:	f04f 0901 	mov.w	r9, #1
 80093fc:	4623      	mov	r3, r4
 80093fe:	469a      	mov	sl, r3
 8009400:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009404:	b10a      	cbz	r2, 800940a <_vfiprintf_r+0xa2>
 8009406:	2a25      	cmp	r2, #37	; 0x25
 8009408:	d1f9      	bne.n	80093fe <_vfiprintf_r+0x96>
 800940a:	ebba 0b04 	subs.w	fp, sl, r4
 800940e:	d00b      	beq.n	8009428 <_vfiprintf_r+0xc0>
 8009410:	465b      	mov	r3, fp
 8009412:	4622      	mov	r2, r4
 8009414:	4629      	mov	r1, r5
 8009416:	4630      	mov	r0, r6
 8009418:	f7ff ff93 	bl	8009342 <__sfputs_r>
 800941c:	3001      	adds	r0, #1
 800941e:	f000 80aa 	beq.w	8009576 <_vfiprintf_r+0x20e>
 8009422:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009424:	445a      	add	r2, fp
 8009426:	9209      	str	r2, [sp, #36]	; 0x24
 8009428:	f89a 3000 	ldrb.w	r3, [sl]
 800942c:	2b00      	cmp	r3, #0
 800942e:	f000 80a2 	beq.w	8009576 <_vfiprintf_r+0x20e>
 8009432:	2300      	movs	r3, #0
 8009434:	f04f 32ff 	mov.w	r2, #4294967295
 8009438:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800943c:	f10a 0a01 	add.w	sl, sl, #1
 8009440:	9304      	str	r3, [sp, #16]
 8009442:	9307      	str	r3, [sp, #28]
 8009444:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009448:	931a      	str	r3, [sp, #104]	; 0x68
 800944a:	4654      	mov	r4, sl
 800944c:	2205      	movs	r2, #5
 800944e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009452:	4858      	ldr	r0, [pc, #352]	; (80095b4 <_vfiprintf_r+0x24c>)
 8009454:	f7f6 fecc 	bl	80001f0 <memchr>
 8009458:	9a04      	ldr	r2, [sp, #16]
 800945a:	b9d8      	cbnz	r0, 8009494 <_vfiprintf_r+0x12c>
 800945c:	06d1      	lsls	r1, r2, #27
 800945e:	bf44      	itt	mi
 8009460:	2320      	movmi	r3, #32
 8009462:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009466:	0713      	lsls	r3, r2, #28
 8009468:	bf44      	itt	mi
 800946a:	232b      	movmi	r3, #43	; 0x2b
 800946c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009470:	f89a 3000 	ldrb.w	r3, [sl]
 8009474:	2b2a      	cmp	r3, #42	; 0x2a
 8009476:	d015      	beq.n	80094a4 <_vfiprintf_r+0x13c>
 8009478:	9a07      	ldr	r2, [sp, #28]
 800947a:	4654      	mov	r4, sl
 800947c:	2000      	movs	r0, #0
 800947e:	f04f 0c0a 	mov.w	ip, #10
 8009482:	4621      	mov	r1, r4
 8009484:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009488:	3b30      	subs	r3, #48	; 0x30
 800948a:	2b09      	cmp	r3, #9
 800948c:	d94e      	bls.n	800952c <_vfiprintf_r+0x1c4>
 800948e:	b1b0      	cbz	r0, 80094be <_vfiprintf_r+0x156>
 8009490:	9207      	str	r2, [sp, #28]
 8009492:	e014      	b.n	80094be <_vfiprintf_r+0x156>
 8009494:	eba0 0308 	sub.w	r3, r0, r8
 8009498:	fa09 f303 	lsl.w	r3, r9, r3
 800949c:	4313      	orrs	r3, r2
 800949e:	9304      	str	r3, [sp, #16]
 80094a0:	46a2      	mov	sl, r4
 80094a2:	e7d2      	b.n	800944a <_vfiprintf_r+0xe2>
 80094a4:	9b03      	ldr	r3, [sp, #12]
 80094a6:	1d19      	adds	r1, r3, #4
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	9103      	str	r1, [sp, #12]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	bfbb      	ittet	lt
 80094b0:	425b      	neglt	r3, r3
 80094b2:	f042 0202 	orrlt.w	r2, r2, #2
 80094b6:	9307      	strge	r3, [sp, #28]
 80094b8:	9307      	strlt	r3, [sp, #28]
 80094ba:	bfb8      	it	lt
 80094bc:	9204      	strlt	r2, [sp, #16]
 80094be:	7823      	ldrb	r3, [r4, #0]
 80094c0:	2b2e      	cmp	r3, #46	; 0x2e
 80094c2:	d10c      	bne.n	80094de <_vfiprintf_r+0x176>
 80094c4:	7863      	ldrb	r3, [r4, #1]
 80094c6:	2b2a      	cmp	r3, #42	; 0x2a
 80094c8:	d135      	bne.n	8009536 <_vfiprintf_r+0x1ce>
 80094ca:	9b03      	ldr	r3, [sp, #12]
 80094cc:	1d1a      	adds	r2, r3, #4
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	9203      	str	r2, [sp, #12]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	bfb8      	it	lt
 80094d6:	f04f 33ff 	movlt.w	r3, #4294967295
 80094da:	3402      	adds	r4, #2
 80094dc:	9305      	str	r3, [sp, #20]
 80094de:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80095c4 <_vfiprintf_r+0x25c>
 80094e2:	7821      	ldrb	r1, [r4, #0]
 80094e4:	2203      	movs	r2, #3
 80094e6:	4650      	mov	r0, sl
 80094e8:	f7f6 fe82 	bl	80001f0 <memchr>
 80094ec:	b140      	cbz	r0, 8009500 <_vfiprintf_r+0x198>
 80094ee:	2340      	movs	r3, #64	; 0x40
 80094f0:	eba0 000a 	sub.w	r0, r0, sl
 80094f4:	fa03 f000 	lsl.w	r0, r3, r0
 80094f8:	9b04      	ldr	r3, [sp, #16]
 80094fa:	4303      	orrs	r3, r0
 80094fc:	3401      	adds	r4, #1
 80094fe:	9304      	str	r3, [sp, #16]
 8009500:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009504:	482c      	ldr	r0, [pc, #176]	; (80095b8 <_vfiprintf_r+0x250>)
 8009506:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800950a:	2206      	movs	r2, #6
 800950c:	f7f6 fe70 	bl	80001f0 <memchr>
 8009510:	2800      	cmp	r0, #0
 8009512:	d03f      	beq.n	8009594 <_vfiprintf_r+0x22c>
 8009514:	4b29      	ldr	r3, [pc, #164]	; (80095bc <_vfiprintf_r+0x254>)
 8009516:	bb1b      	cbnz	r3, 8009560 <_vfiprintf_r+0x1f8>
 8009518:	9b03      	ldr	r3, [sp, #12]
 800951a:	3307      	adds	r3, #7
 800951c:	f023 0307 	bic.w	r3, r3, #7
 8009520:	3308      	adds	r3, #8
 8009522:	9303      	str	r3, [sp, #12]
 8009524:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009526:	443b      	add	r3, r7
 8009528:	9309      	str	r3, [sp, #36]	; 0x24
 800952a:	e767      	b.n	80093fc <_vfiprintf_r+0x94>
 800952c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009530:	460c      	mov	r4, r1
 8009532:	2001      	movs	r0, #1
 8009534:	e7a5      	b.n	8009482 <_vfiprintf_r+0x11a>
 8009536:	2300      	movs	r3, #0
 8009538:	3401      	adds	r4, #1
 800953a:	9305      	str	r3, [sp, #20]
 800953c:	4619      	mov	r1, r3
 800953e:	f04f 0c0a 	mov.w	ip, #10
 8009542:	4620      	mov	r0, r4
 8009544:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009548:	3a30      	subs	r2, #48	; 0x30
 800954a:	2a09      	cmp	r2, #9
 800954c:	d903      	bls.n	8009556 <_vfiprintf_r+0x1ee>
 800954e:	2b00      	cmp	r3, #0
 8009550:	d0c5      	beq.n	80094de <_vfiprintf_r+0x176>
 8009552:	9105      	str	r1, [sp, #20]
 8009554:	e7c3      	b.n	80094de <_vfiprintf_r+0x176>
 8009556:	fb0c 2101 	mla	r1, ip, r1, r2
 800955a:	4604      	mov	r4, r0
 800955c:	2301      	movs	r3, #1
 800955e:	e7f0      	b.n	8009542 <_vfiprintf_r+0x1da>
 8009560:	ab03      	add	r3, sp, #12
 8009562:	9300      	str	r3, [sp, #0]
 8009564:	462a      	mov	r2, r5
 8009566:	4b16      	ldr	r3, [pc, #88]	; (80095c0 <_vfiprintf_r+0x258>)
 8009568:	a904      	add	r1, sp, #16
 800956a:	4630      	mov	r0, r6
 800956c:	f3af 8000 	nop.w
 8009570:	4607      	mov	r7, r0
 8009572:	1c78      	adds	r0, r7, #1
 8009574:	d1d6      	bne.n	8009524 <_vfiprintf_r+0x1bc>
 8009576:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009578:	07d9      	lsls	r1, r3, #31
 800957a:	d405      	bmi.n	8009588 <_vfiprintf_r+0x220>
 800957c:	89ab      	ldrh	r3, [r5, #12]
 800957e:	059a      	lsls	r2, r3, #22
 8009580:	d402      	bmi.n	8009588 <_vfiprintf_r+0x220>
 8009582:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009584:	f7ff fdb7 	bl	80090f6 <__retarget_lock_release_recursive>
 8009588:	89ab      	ldrh	r3, [r5, #12]
 800958a:	065b      	lsls	r3, r3, #25
 800958c:	f53f af12 	bmi.w	80093b4 <_vfiprintf_r+0x4c>
 8009590:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009592:	e711      	b.n	80093b8 <_vfiprintf_r+0x50>
 8009594:	ab03      	add	r3, sp, #12
 8009596:	9300      	str	r3, [sp, #0]
 8009598:	462a      	mov	r2, r5
 800959a:	4b09      	ldr	r3, [pc, #36]	; (80095c0 <_vfiprintf_r+0x258>)
 800959c:	a904      	add	r1, sp, #16
 800959e:	4630      	mov	r0, r6
 80095a0:	f000 f880 	bl	80096a4 <_printf_i>
 80095a4:	e7e4      	b.n	8009570 <_vfiprintf_r+0x208>
 80095a6:	bf00      	nop
 80095a8:	0800a7a8 	.word	0x0800a7a8
 80095ac:	0800a7c8 	.word	0x0800a7c8
 80095b0:	0800a788 	.word	0x0800a788
 80095b4:	0800a7e8 	.word	0x0800a7e8
 80095b8:	0800a7f2 	.word	0x0800a7f2
 80095bc:	00000000 	.word	0x00000000
 80095c0:	08009343 	.word	0x08009343
 80095c4:	0800a7ee 	.word	0x0800a7ee

080095c8 <_printf_common>:
 80095c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095cc:	4616      	mov	r6, r2
 80095ce:	4699      	mov	r9, r3
 80095d0:	688a      	ldr	r2, [r1, #8]
 80095d2:	690b      	ldr	r3, [r1, #16]
 80095d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80095d8:	4293      	cmp	r3, r2
 80095da:	bfb8      	it	lt
 80095dc:	4613      	movlt	r3, r2
 80095de:	6033      	str	r3, [r6, #0]
 80095e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80095e4:	4607      	mov	r7, r0
 80095e6:	460c      	mov	r4, r1
 80095e8:	b10a      	cbz	r2, 80095ee <_printf_common+0x26>
 80095ea:	3301      	adds	r3, #1
 80095ec:	6033      	str	r3, [r6, #0]
 80095ee:	6823      	ldr	r3, [r4, #0]
 80095f0:	0699      	lsls	r1, r3, #26
 80095f2:	bf42      	ittt	mi
 80095f4:	6833      	ldrmi	r3, [r6, #0]
 80095f6:	3302      	addmi	r3, #2
 80095f8:	6033      	strmi	r3, [r6, #0]
 80095fa:	6825      	ldr	r5, [r4, #0]
 80095fc:	f015 0506 	ands.w	r5, r5, #6
 8009600:	d106      	bne.n	8009610 <_printf_common+0x48>
 8009602:	f104 0a19 	add.w	sl, r4, #25
 8009606:	68e3      	ldr	r3, [r4, #12]
 8009608:	6832      	ldr	r2, [r6, #0]
 800960a:	1a9b      	subs	r3, r3, r2
 800960c:	42ab      	cmp	r3, r5
 800960e:	dc26      	bgt.n	800965e <_printf_common+0x96>
 8009610:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009614:	1e13      	subs	r3, r2, #0
 8009616:	6822      	ldr	r2, [r4, #0]
 8009618:	bf18      	it	ne
 800961a:	2301      	movne	r3, #1
 800961c:	0692      	lsls	r2, r2, #26
 800961e:	d42b      	bmi.n	8009678 <_printf_common+0xb0>
 8009620:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009624:	4649      	mov	r1, r9
 8009626:	4638      	mov	r0, r7
 8009628:	47c0      	blx	r8
 800962a:	3001      	adds	r0, #1
 800962c:	d01e      	beq.n	800966c <_printf_common+0xa4>
 800962e:	6823      	ldr	r3, [r4, #0]
 8009630:	68e5      	ldr	r5, [r4, #12]
 8009632:	6832      	ldr	r2, [r6, #0]
 8009634:	f003 0306 	and.w	r3, r3, #6
 8009638:	2b04      	cmp	r3, #4
 800963a:	bf08      	it	eq
 800963c:	1aad      	subeq	r5, r5, r2
 800963e:	68a3      	ldr	r3, [r4, #8]
 8009640:	6922      	ldr	r2, [r4, #16]
 8009642:	bf0c      	ite	eq
 8009644:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009648:	2500      	movne	r5, #0
 800964a:	4293      	cmp	r3, r2
 800964c:	bfc4      	itt	gt
 800964e:	1a9b      	subgt	r3, r3, r2
 8009650:	18ed      	addgt	r5, r5, r3
 8009652:	2600      	movs	r6, #0
 8009654:	341a      	adds	r4, #26
 8009656:	42b5      	cmp	r5, r6
 8009658:	d11a      	bne.n	8009690 <_printf_common+0xc8>
 800965a:	2000      	movs	r0, #0
 800965c:	e008      	b.n	8009670 <_printf_common+0xa8>
 800965e:	2301      	movs	r3, #1
 8009660:	4652      	mov	r2, sl
 8009662:	4649      	mov	r1, r9
 8009664:	4638      	mov	r0, r7
 8009666:	47c0      	blx	r8
 8009668:	3001      	adds	r0, #1
 800966a:	d103      	bne.n	8009674 <_printf_common+0xac>
 800966c:	f04f 30ff 	mov.w	r0, #4294967295
 8009670:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009674:	3501      	adds	r5, #1
 8009676:	e7c6      	b.n	8009606 <_printf_common+0x3e>
 8009678:	18e1      	adds	r1, r4, r3
 800967a:	1c5a      	adds	r2, r3, #1
 800967c:	2030      	movs	r0, #48	; 0x30
 800967e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009682:	4422      	add	r2, r4
 8009684:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009688:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800968c:	3302      	adds	r3, #2
 800968e:	e7c7      	b.n	8009620 <_printf_common+0x58>
 8009690:	2301      	movs	r3, #1
 8009692:	4622      	mov	r2, r4
 8009694:	4649      	mov	r1, r9
 8009696:	4638      	mov	r0, r7
 8009698:	47c0      	blx	r8
 800969a:	3001      	adds	r0, #1
 800969c:	d0e6      	beq.n	800966c <_printf_common+0xa4>
 800969e:	3601      	adds	r6, #1
 80096a0:	e7d9      	b.n	8009656 <_printf_common+0x8e>
	...

080096a4 <_printf_i>:
 80096a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80096a8:	460c      	mov	r4, r1
 80096aa:	4691      	mov	r9, r2
 80096ac:	7e27      	ldrb	r7, [r4, #24]
 80096ae:	990c      	ldr	r1, [sp, #48]	; 0x30
 80096b0:	2f78      	cmp	r7, #120	; 0x78
 80096b2:	4680      	mov	r8, r0
 80096b4:	469a      	mov	sl, r3
 80096b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80096ba:	d807      	bhi.n	80096cc <_printf_i+0x28>
 80096bc:	2f62      	cmp	r7, #98	; 0x62
 80096be:	d80a      	bhi.n	80096d6 <_printf_i+0x32>
 80096c0:	2f00      	cmp	r7, #0
 80096c2:	f000 80d8 	beq.w	8009876 <_printf_i+0x1d2>
 80096c6:	2f58      	cmp	r7, #88	; 0x58
 80096c8:	f000 80a3 	beq.w	8009812 <_printf_i+0x16e>
 80096cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80096d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80096d4:	e03a      	b.n	800974c <_printf_i+0xa8>
 80096d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80096da:	2b15      	cmp	r3, #21
 80096dc:	d8f6      	bhi.n	80096cc <_printf_i+0x28>
 80096de:	a001      	add	r0, pc, #4	; (adr r0, 80096e4 <_printf_i+0x40>)
 80096e0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80096e4:	0800973d 	.word	0x0800973d
 80096e8:	08009751 	.word	0x08009751
 80096ec:	080096cd 	.word	0x080096cd
 80096f0:	080096cd 	.word	0x080096cd
 80096f4:	080096cd 	.word	0x080096cd
 80096f8:	080096cd 	.word	0x080096cd
 80096fc:	08009751 	.word	0x08009751
 8009700:	080096cd 	.word	0x080096cd
 8009704:	080096cd 	.word	0x080096cd
 8009708:	080096cd 	.word	0x080096cd
 800970c:	080096cd 	.word	0x080096cd
 8009710:	0800985d 	.word	0x0800985d
 8009714:	08009781 	.word	0x08009781
 8009718:	0800983f 	.word	0x0800983f
 800971c:	080096cd 	.word	0x080096cd
 8009720:	080096cd 	.word	0x080096cd
 8009724:	0800987f 	.word	0x0800987f
 8009728:	080096cd 	.word	0x080096cd
 800972c:	08009781 	.word	0x08009781
 8009730:	080096cd 	.word	0x080096cd
 8009734:	080096cd 	.word	0x080096cd
 8009738:	08009847 	.word	0x08009847
 800973c:	680b      	ldr	r3, [r1, #0]
 800973e:	1d1a      	adds	r2, r3, #4
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	600a      	str	r2, [r1, #0]
 8009744:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009748:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800974c:	2301      	movs	r3, #1
 800974e:	e0a3      	b.n	8009898 <_printf_i+0x1f4>
 8009750:	6825      	ldr	r5, [r4, #0]
 8009752:	6808      	ldr	r0, [r1, #0]
 8009754:	062e      	lsls	r6, r5, #24
 8009756:	f100 0304 	add.w	r3, r0, #4
 800975a:	d50a      	bpl.n	8009772 <_printf_i+0xce>
 800975c:	6805      	ldr	r5, [r0, #0]
 800975e:	600b      	str	r3, [r1, #0]
 8009760:	2d00      	cmp	r5, #0
 8009762:	da03      	bge.n	800976c <_printf_i+0xc8>
 8009764:	232d      	movs	r3, #45	; 0x2d
 8009766:	426d      	negs	r5, r5
 8009768:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800976c:	485e      	ldr	r0, [pc, #376]	; (80098e8 <_printf_i+0x244>)
 800976e:	230a      	movs	r3, #10
 8009770:	e019      	b.n	80097a6 <_printf_i+0x102>
 8009772:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009776:	6805      	ldr	r5, [r0, #0]
 8009778:	600b      	str	r3, [r1, #0]
 800977a:	bf18      	it	ne
 800977c:	b22d      	sxthne	r5, r5
 800977e:	e7ef      	b.n	8009760 <_printf_i+0xbc>
 8009780:	680b      	ldr	r3, [r1, #0]
 8009782:	6825      	ldr	r5, [r4, #0]
 8009784:	1d18      	adds	r0, r3, #4
 8009786:	6008      	str	r0, [r1, #0]
 8009788:	0628      	lsls	r0, r5, #24
 800978a:	d501      	bpl.n	8009790 <_printf_i+0xec>
 800978c:	681d      	ldr	r5, [r3, #0]
 800978e:	e002      	b.n	8009796 <_printf_i+0xf2>
 8009790:	0669      	lsls	r1, r5, #25
 8009792:	d5fb      	bpl.n	800978c <_printf_i+0xe8>
 8009794:	881d      	ldrh	r5, [r3, #0]
 8009796:	4854      	ldr	r0, [pc, #336]	; (80098e8 <_printf_i+0x244>)
 8009798:	2f6f      	cmp	r7, #111	; 0x6f
 800979a:	bf0c      	ite	eq
 800979c:	2308      	moveq	r3, #8
 800979e:	230a      	movne	r3, #10
 80097a0:	2100      	movs	r1, #0
 80097a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80097a6:	6866      	ldr	r6, [r4, #4]
 80097a8:	60a6      	str	r6, [r4, #8]
 80097aa:	2e00      	cmp	r6, #0
 80097ac:	bfa2      	ittt	ge
 80097ae:	6821      	ldrge	r1, [r4, #0]
 80097b0:	f021 0104 	bicge.w	r1, r1, #4
 80097b4:	6021      	strge	r1, [r4, #0]
 80097b6:	b90d      	cbnz	r5, 80097bc <_printf_i+0x118>
 80097b8:	2e00      	cmp	r6, #0
 80097ba:	d04d      	beq.n	8009858 <_printf_i+0x1b4>
 80097bc:	4616      	mov	r6, r2
 80097be:	fbb5 f1f3 	udiv	r1, r5, r3
 80097c2:	fb03 5711 	mls	r7, r3, r1, r5
 80097c6:	5dc7      	ldrb	r7, [r0, r7]
 80097c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80097cc:	462f      	mov	r7, r5
 80097ce:	42bb      	cmp	r3, r7
 80097d0:	460d      	mov	r5, r1
 80097d2:	d9f4      	bls.n	80097be <_printf_i+0x11a>
 80097d4:	2b08      	cmp	r3, #8
 80097d6:	d10b      	bne.n	80097f0 <_printf_i+0x14c>
 80097d8:	6823      	ldr	r3, [r4, #0]
 80097da:	07df      	lsls	r7, r3, #31
 80097dc:	d508      	bpl.n	80097f0 <_printf_i+0x14c>
 80097de:	6923      	ldr	r3, [r4, #16]
 80097e0:	6861      	ldr	r1, [r4, #4]
 80097e2:	4299      	cmp	r1, r3
 80097e4:	bfde      	ittt	le
 80097e6:	2330      	movle	r3, #48	; 0x30
 80097e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80097ec:	f106 36ff 	addle.w	r6, r6, #4294967295
 80097f0:	1b92      	subs	r2, r2, r6
 80097f2:	6122      	str	r2, [r4, #16]
 80097f4:	f8cd a000 	str.w	sl, [sp]
 80097f8:	464b      	mov	r3, r9
 80097fa:	aa03      	add	r2, sp, #12
 80097fc:	4621      	mov	r1, r4
 80097fe:	4640      	mov	r0, r8
 8009800:	f7ff fee2 	bl	80095c8 <_printf_common>
 8009804:	3001      	adds	r0, #1
 8009806:	d14c      	bne.n	80098a2 <_printf_i+0x1fe>
 8009808:	f04f 30ff 	mov.w	r0, #4294967295
 800980c:	b004      	add	sp, #16
 800980e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009812:	4835      	ldr	r0, [pc, #212]	; (80098e8 <_printf_i+0x244>)
 8009814:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009818:	6823      	ldr	r3, [r4, #0]
 800981a:	680e      	ldr	r6, [r1, #0]
 800981c:	061f      	lsls	r7, r3, #24
 800981e:	f856 5b04 	ldr.w	r5, [r6], #4
 8009822:	600e      	str	r6, [r1, #0]
 8009824:	d514      	bpl.n	8009850 <_printf_i+0x1ac>
 8009826:	07d9      	lsls	r1, r3, #31
 8009828:	bf44      	itt	mi
 800982a:	f043 0320 	orrmi.w	r3, r3, #32
 800982e:	6023      	strmi	r3, [r4, #0]
 8009830:	b91d      	cbnz	r5, 800983a <_printf_i+0x196>
 8009832:	6823      	ldr	r3, [r4, #0]
 8009834:	f023 0320 	bic.w	r3, r3, #32
 8009838:	6023      	str	r3, [r4, #0]
 800983a:	2310      	movs	r3, #16
 800983c:	e7b0      	b.n	80097a0 <_printf_i+0xfc>
 800983e:	6823      	ldr	r3, [r4, #0]
 8009840:	f043 0320 	orr.w	r3, r3, #32
 8009844:	6023      	str	r3, [r4, #0]
 8009846:	2378      	movs	r3, #120	; 0x78
 8009848:	4828      	ldr	r0, [pc, #160]	; (80098ec <_printf_i+0x248>)
 800984a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800984e:	e7e3      	b.n	8009818 <_printf_i+0x174>
 8009850:	065e      	lsls	r6, r3, #25
 8009852:	bf48      	it	mi
 8009854:	b2ad      	uxthmi	r5, r5
 8009856:	e7e6      	b.n	8009826 <_printf_i+0x182>
 8009858:	4616      	mov	r6, r2
 800985a:	e7bb      	b.n	80097d4 <_printf_i+0x130>
 800985c:	680b      	ldr	r3, [r1, #0]
 800985e:	6826      	ldr	r6, [r4, #0]
 8009860:	6960      	ldr	r0, [r4, #20]
 8009862:	1d1d      	adds	r5, r3, #4
 8009864:	600d      	str	r5, [r1, #0]
 8009866:	0635      	lsls	r5, r6, #24
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	d501      	bpl.n	8009870 <_printf_i+0x1cc>
 800986c:	6018      	str	r0, [r3, #0]
 800986e:	e002      	b.n	8009876 <_printf_i+0x1d2>
 8009870:	0671      	lsls	r1, r6, #25
 8009872:	d5fb      	bpl.n	800986c <_printf_i+0x1c8>
 8009874:	8018      	strh	r0, [r3, #0]
 8009876:	2300      	movs	r3, #0
 8009878:	6123      	str	r3, [r4, #16]
 800987a:	4616      	mov	r6, r2
 800987c:	e7ba      	b.n	80097f4 <_printf_i+0x150>
 800987e:	680b      	ldr	r3, [r1, #0]
 8009880:	1d1a      	adds	r2, r3, #4
 8009882:	600a      	str	r2, [r1, #0]
 8009884:	681e      	ldr	r6, [r3, #0]
 8009886:	6862      	ldr	r2, [r4, #4]
 8009888:	2100      	movs	r1, #0
 800988a:	4630      	mov	r0, r6
 800988c:	f7f6 fcb0 	bl	80001f0 <memchr>
 8009890:	b108      	cbz	r0, 8009896 <_printf_i+0x1f2>
 8009892:	1b80      	subs	r0, r0, r6
 8009894:	6060      	str	r0, [r4, #4]
 8009896:	6863      	ldr	r3, [r4, #4]
 8009898:	6123      	str	r3, [r4, #16]
 800989a:	2300      	movs	r3, #0
 800989c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80098a0:	e7a8      	b.n	80097f4 <_printf_i+0x150>
 80098a2:	6923      	ldr	r3, [r4, #16]
 80098a4:	4632      	mov	r2, r6
 80098a6:	4649      	mov	r1, r9
 80098a8:	4640      	mov	r0, r8
 80098aa:	47d0      	blx	sl
 80098ac:	3001      	adds	r0, #1
 80098ae:	d0ab      	beq.n	8009808 <_printf_i+0x164>
 80098b0:	6823      	ldr	r3, [r4, #0]
 80098b2:	079b      	lsls	r3, r3, #30
 80098b4:	d413      	bmi.n	80098de <_printf_i+0x23a>
 80098b6:	68e0      	ldr	r0, [r4, #12]
 80098b8:	9b03      	ldr	r3, [sp, #12]
 80098ba:	4298      	cmp	r0, r3
 80098bc:	bfb8      	it	lt
 80098be:	4618      	movlt	r0, r3
 80098c0:	e7a4      	b.n	800980c <_printf_i+0x168>
 80098c2:	2301      	movs	r3, #1
 80098c4:	4632      	mov	r2, r6
 80098c6:	4649      	mov	r1, r9
 80098c8:	4640      	mov	r0, r8
 80098ca:	47d0      	blx	sl
 80098cc:	3001      	adds	r0, #1
 80098ce:	d09b      	beq.n	8009808 <_printf_i+0x164>
 80098d0:	3501      	adds	r5, #1
 80098d2:	68e3      	ldr	r3, [r4, #12]
 80098d4:	9903      	ldr	r1, [sp, #12]
 80098d6:	1a5b      	subs	r3, r3, r1
 80098d8:	42ab      	cmp	r3, r5
 80098da:	dcf2      	bgt.n	80098c2 <_printf_i+0x21e>
 80098dc:	e7eb      	b.n	80098b6 <_printf_i+0x212>
 80098de:	2500      	movs	r5, #0
 80098e0:	f104 0619 	add.w	r6, r4, #25
 80098e4:	e7f5      	b.n	80098d2 <_printf_i+0x22e>
 80098e6:	bf00      	nop
 80098e8:	0800a7f9 	.word	0x0800a7f9
 80098ec:	0800a80a 	.word	0x0800a80a

080098f0 <_sbrk_r>:
 80098f0:	b538      	push	{r3, r4, r5, lr}
 80098f2:	4d06      	ldr	r5, [pc, #24]	; (800990c <_sbrk_r+0x1c>)
 80098f4:	2300      	movs	r3, #0
 80098f6:	4604      	mov	r4, r0
 80098f8:	4608      	mov	r0, r1
 80098fa:	602b      	str	r3, [r5, #0]
 80098fc:	f7fa fe68 	bl	80045d0 <_sbrk>
 8009900:	1c43      	adds	r3, r0, #1
 8009902:	d102      	bne.n	800990a <_sbrk_r+0x1a>
 8009904:	682b      	ldr	r3, [r5, #0]
 8009906:	b103      	cbz	r3, 800990a <_sbrk_r+0x1a>
 8009908:	6023      	str	r3, [r4, #0]
 800990a:	bd38      	pop	{r3, r4, r5, pc}
 800990c:	20006048 	.word	0x20006048

08009910 <__sread>:
 8009910:	b510      	push	{r4, lr}
 8009912:	460c      	mov	r4, r1
 8009914:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009918:	f000 f8a0 	bl	8009a5c <_read_r>
 800991c:	2800      	cmp	r0, #0
 800991e:	bfab      	itete	ge
 8009920:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009922:	89a3      	ldrhlt	r3, [r4, #12]
 8009924:	181b      	addge	r3, r3, r0
 8009926:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800992a:	bfac      	ite	ge
 800992c:	6563      	strge	r3, [r4, #84]	; 0x54
 800992e:	81a3      	strhlt	r3, [r4, #12]
 8009930:	bd10      	pop	{r4, pc}

08009932 <__swrite>:
 8009932:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009936:	461f      	mov	r7, r3
 8009938:	898b      	ldrh	r3, [r1, #12]
 800993a:	05db      	lsls	r3, r3, #23
 800993c:	4605      	mov	r5, r0
 800993e:	460c      	mov	r4, r1
 8009940:	4616      	mov	r6, r2
 8009942:	d505      	bpl.n	8009950 <__swrite+0x1e>
 8009944:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009948:	2302      	movs	r3, #2
 800994a:	2200      	movs	r2, #0
 800994c:	f000 f868 	bl	8009a20 <_lseek_r>
 8009950:	89a3      	ldrh	r3, [r4, #12]
 8009952:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009956:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800995a:	81a3      	strh	r3, [r4, #12]
 800995c:	4632      	mov	r2, r6
 800995e:	463b      	mov	r3, r7
 8009960:	4628      	mov	r0, r5
 8009962:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009966:	f000 b817 	b.w	8009998 <_write_r>

0800996a <__sseek>:
 800996a:	b510      	push	{r4, lr}
 800996c:	460c      	mov	r4, r1
 800996e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009972:	f000 f855 	bl	8009a20 <_lseek_r>
 8009976:	1c43      	adds	r3, r0, #1
 8009978:	89a3      	ldrh	r3, [r4, #12]
 800997a:	bf15      	itete	ne
 800997c:	6560      	strne	r0, [r4, #84]	; 0x54
 800997e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009982:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009986:	81a3      	strheq	r3, [r4, #12]
 8009988:	bf18      	it	ne
 800998a:	81a3      	strhne	r3, [r4, #12]
 800998c:	bd10      	pop	{r4, pc}

0800998e <__sclose>:
 800998e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009992:	f000 b813 	b.w	80099bc <_close_r>
	...

08009998 <_write_r>:
 8009998:	b538      	push	{r3, r4, r5, lr}
 800999a:	4d07      	ldr	r5, [pc, #28]	; (80099b8 <_write_r+0x20>)
 800999c:	4604      	mov	r4, r0
 800999e:	4608      	mov	r0, r1
 80099a0:	4611      	mov	r1, r2
 80099a2:	2200      	movs	r2, #0
 80099a4:	602a      	str	r2, [r5, #0]
 80099a6:	461a      	mov	r2, r3
 80099a8:	f7fa fdc1 	bl	800452e <_write>
 80099ac:	1c43      	adds	r3, r0, #1
 80099ae:	d102      	bne.n	80099b6 <_write_r+0x1e>
 80099b0:	682b      	ldr	r3, [r5, #0]
 80099b2:	b103      	cbz	r3, 80099b6 <_write_r+0x1e>
 80099b4:	6023      	str	r3, [r4, #0]
 80099b6:	bd38      	pop	{r3, r4, r5, pc}
 80099b8:	20006048 	.word	0x20006048

080099bc <_close_r>:
 80099bc:	b538      	push	{r3, r4, r5, lr}
 80099be:	4d06      	ldr	r5, [pc, #24]	; (80099d8 <_close_r+0x1c>)
 80099c0:	2300      	movs	r3, #0
 80099c2:	4604      	mov	r4, r0
 80099c4:	4608      	mov	r0, r1
 80099c6:	602b      	str	r3, [r5, #0]
 80099c8:	f7fa fdcd 	bl	8004566 <_close>
 80099cc:	1c43      	adds	r3, r0, #1
 80099ce:	d102      	bne.n	80099d6 <_close_r+0x1a>
 80099d0:	682b      	ldr	r3, [r5, #0]
 80099d2:	b103      	cbz	r3, 80099d6 <_close_r+0x1a>
 80099d4:	6023      	str	r3, [r4, #0]
 80099d6:	bd38      	pop	{r3, r4, r5, pc}
 80099d8:	20006048 	.word	0x20006048

080099dc <_fstat_r>:
 80099dc:	b538      	push	{r3, r4, r5, lr}
 80099de:	4d07      	ldr	r5, [pc, #28]	; (80099fc <_fstat_r+0x20>)
 80099e0:	2300      	movs	r3, #0
 80099e2:	4604      	mov	r4, r0
 80099e4:	4608      	mov	r0, r1
 80099e6:	4611      	mov	r1, r2
 80099e8:	602b      	str	r3, [r5, #0]
 80099ea:	f7fa fdc8 	bl	800457e <_fstat>
 80099ee:	1c43      	adds	r3, r0, #1
 80099f0:	d102      	bne.n	80099f8 <_fstat_r+0x1c>
 80099f2:	682b      	ldr	r3, [r5, #0]
 80099f4:	b103      	cbz	r3, 80099f8 <_fstat_r+0x1c>
 80099f6:	6023      	str	r3, [r4, #0]
 80099f8:	bd38      	pop	{r3, r4, r5, pc}
 80099fa:	bf00      	nop
 80099fc:	20006048 	.word	0x20006048

08009a00 <_isatty_r>:
 8009a00:	b538      	push	{r3, r4, r5, lr}
 8009a02:	4d06      	ldr	r5, [pc, #24]	; (8009a1c <_isatty_r+0x1c>)
 8009a04:	2300      	movs	r3, #0
 8009a06:	4604      	mov	r4, r0
 8009a08:	4608      	mov	r0, r1
 8009a0a:	602b      	str	r3, [r5, #0]
 8009a0c:	f7fa fdc7 	bl	800459e <_isatty>
 8009a10:	1c43      	adds	r3, r0, #1
 8009a12:	d102      	bne.n	8009a1a <_isatty_r+0x1a>
 8009a14:	682b      	ldr	r3, [r5, #0]
 8009a16:	b103      	cbz	r3, 8009a1a <_isatty_r+0x1a>
 8009a18:	6023      	str	r3, [r4, #0]
 8009a1a:	bd38      	pop	{r3, r4, r5, pc}
 8009a1c:	20006048 	.word	0x20006048

08009a20 <_lseek_r>:
 8009a20:	b538      	push	{r3, r4, r5, lr}
 8009a22:	4d07      	ldr	r5, [pc, #28]	; (8009a40 <_lseek_r+0x20>)
 8009a24:	4604      	mov	r4, r0
 8009a26:	4608      	mov	r0, r1
 8009a28:	4611      	mov	r1, r2
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	602a      	str	r2, [r5, #0]
 8009a2e:	461a      	mov	r2, r3
 8009a30:	f7fa fdc0 	bl	80045b4 <_lseek>
 8009a34:	1c43      	adds	r3, r0, #1
 8009a36:	d102      	bne.n	8009a3e <_lseek_r+0x1e>
 8009a38:	682b      	ldr	r3, [r5, #0]
 8009a3a:	b103      	cbz	r3, 8009a3e <_lseek_r+0x1e>
 8009a3c:	6023      	str	r3, [r4, #0]
 8009a3e:	bd38      	pop	{r3, r4, r5, pc}
 8009a40:	20006048 	.word	0x20006048

08009a44 <__malloc_lock>:
 8009a44:	4801      	ldr	r0, [pc, #4]	; (8009a4c <__malloc_lock+0x8>)
 8009a46:	f7ff bb55 	b.w	80090f4 <__retarget_lock_acquire_recursive>
 8009a4a:	bf00      	nop
 8009a4c:	20006040 	.word	0x20006040

08009a50 <__malloc_unlock>:
 8009a50:	4801      	ldr	r0, [pc, #4]	; (8009a58 <__malloc_unlock+0x8>)
 8009a52:	f7ff bb50 	b.w	80090f6 <__retarget_lock_release_recursive>
 8009a56:	bf00      	nop
 8009a58:	20006040 	.word	0x20006040

08009a5c <_read_r>:
 8009a5c:	b538      	push	{r3, r4, r5, lr}
 8009a5e:	4d07      	ldr	r5, [pc, #28]	; (8009a7c <_read_r+0x20>)
 8009a60:	4604      	mov	r4, r0
 8009a62:	4608      	mov	r0, r1
 8009a64:	4611      	mov	r1, r2
 8009a66:	2200      	movs	r2, #0
 8009a68:	602a      	str	r2, [r5, #0]
 8009a6a:	461a      	mov	r2, r3
 8009a6c:	f7fa fd42 	bl	80044f4 <_read>
 8009a70:	1c43      	adds	r3, r0, #1
 8009a72:	d102      	bne.n	8009a7a <_read_r+0x1e>
 8009a74:	682b      	ldr	r3, [r5, #0]
 8009a76:	b103      	cbz	r3, 8009a7a <_read_r+0x1e>
 8009a78:	6023      	str	r3, [r4, #0]
 8009a7a:	bd38      	pop	{r3, r4, r5, pc}
 8009a7c:	20006048 	.word	0x20006048

08009a80 <_init>:
 8009a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a82:	bf00      	nop
 8009a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a86:	bc08      	pop	{r3}
 8009a88:	469e      	mov	lr, r3
 8009a8a:	4770      	bx	lr

08009a8c <_fini>:
 8009a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a8e:	bf00      	nop
 8009a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a92:	bc08      	pop	{r3}
 8009a94:	469e      	mov	lr, r3
 8009a96:	4770      	bx	lr
