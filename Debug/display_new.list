
display_new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a378  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001104  0800a508  0800a508  0001a508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b60c  0800b60c  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800b60c  0800b60c  0001b60c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b614  0800b614  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b614  0800b614  0001b614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b618  0800b618  0001b618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800b61c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004de0  20000088  0800b6a4  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004e68  0800b6a4  00024e68  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   000196dd  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036a0  00000000  00000000  00039795  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015d8  00000000  00000000  0003ce38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014e8  00000000  00000000  0003e410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024fd3  00000000  00000000  0003f8f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b3ab  00000000  00000000  000648cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6083  00000000  00000000  0007fc76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00155cf9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000669c  00000000  00000000  00155d4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a4f0 	.word	0x0800a4f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	0800a4f0 	.word	0x0800a4f0

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	; 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__aeabi_d2uiz>:
 800085c:	004a      	lsls	r2, r1, #1
 800085e:	d211      	bcs.n	8000884 <__aeabi_d2uiz+0x28>
 8000860:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000864:	d211      	bcs.n	800088a <__aeabi_d2uiz+0x2e>
 8000866:	d50d      	bpl.n	8000884 <__aeabi_d2uiz+0x28>
 8000868:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800086c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000870:	d40e      	bmi.n	8000890 <__aeabi_d2uiz+0x34>
 8000872:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000876:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800087a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800087e:	fa23 f002 	lsr.w	r0, r3, r2
 8000882:	4770      	bx	lr
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	4770      	bx	lr
 800088a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800088e:	d102      	bne.n	8000896 <__aeabi_d2uiz+0x3a>
 8000890:	f04f 30ff 	mov.w	r0, #4294967295
 8000894:	4770      	bx	lr
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	4770      	bx	lr

0800089c <__aeabi_uldivmod>:
 800089c:	b953      	cbnz	r3, 80008b4 <__aeabi_uldivmod+0x18>
 800089e:	b94a      	cbnz	r2, 80008b4 <__aeabi_uldivmod+0x18>
 80008a0:	2900      	cmp	r1, #0
 80008a2:	bf08      	it	eq
 80008a4:	2800      	cmpeq	r0, #0
 80008a6:	bf1c      	itt	ne
 80008a8:	f04f 31ff 	movne.w	r1, #4294967295
 80008ac:	f04f 30ff 	movne.w	r0, #4294967295
 80008b0:	f000 b974 	b.w	8000b9c <__aeabi_idiv0>
 80008b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008bc:	f000 f806 	bl	80008cc <__udivmoddi4>
 80008c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008c8:	b004      	add	sp, #16
 80008ca:	4770      	bx	lr

080008cc <__udivmoddi4>:
 80008cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008d0:	9d08      	ldr	r5, [sp, #32]
 80008d2:	4604      	mov	r4, r0
 80008d4:	468e      	mov	lr, r1
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d14d      	bne.n	8000976 <__udivmoddi4+0xaa>
 80008da:	428a      	cmp	r2, r1
 80008dc:	4694      	mov	ip, r2
 80008de:	d969      	bls.n	80009b4 <__udivmoddi4+0xe8>
 80008e0:	fab2 f282 	clz	r2, r2
 80008e4:	b152      	cbz	r2, 80008fc <__udivmoddi4+0x30>
 80008e6:	fa01 f302 	lsl.w	r3, r1, r2
 80008ea:	f1c2 0120 	rsb	r1, r2, #32
 80008ee:	fa20 f101 	lsr.w	r1, r0, r1
 80008f2:	fa0c fc02 	lsl.w	ip, ip, r2
 80008f6:	ea41 0e03 	orr.w	lr, r1, r3
 80008fa:	4094      	lsls	r4, r2
 80008fc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000900:	0c21      	lsrs	r1, r4, #16
 8000902:	fbbe f6f8 	udiv	r6, lr, r8
 8000906:	fa1f f78c 	uxth.w	r7, ip
 800090a:	fb08 e316 	mls	r3, r8, r6, lr
 800090e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000912:	fb06 f107 	mul.w	r1, r6, r7
 8000916:	4299      	cmp	r1, r3
 8000918:	d90a      	bls.n	8000930 <__udivmoddi4+0x64>
 800091a:	eb1c 0303 	adds.w	r3, ip, r3
 800091e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000922:	f080 811f 	bcs.w	8000b64 <__udivmoddi4+0x298>
 8000926:	4299      	cmp	r1, r3
 8000928:	f240 811c 	bls.w	8000b64 <__udivmoddi4+0x298>
 800092c:	3e02      	subs	r6, #2
 800092e:	4463      	add	r3, ip
 8000930:	1a5b      	subs	r3, r3, r1
 8000932:	b2a4      	uxth	r4, r4
 8000934:	fbb3 f0f8 	udiv	r0, r3, r8
 8000938:	fb08 3310 	mls	r3, r8, r0, r3
 800093c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000940:	fb00 f707 	mul.w	r7, r0, r7
 8000944:	42a7      	cmp	r7, r4
 8000946:	d90a      	bls.n	800095e <__udivmoddi4+0x92>
 8000948:	eb1c 0404 	adds.w	r4, ip, r4
 800094c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000950:	f080 810a 	bcs.w	8000b68 <__udivmoddi4+0x29c>
 8000954:	42a7      	cmp	r7, r4
 8000956:	f240 8107 	bls.w	8000b68 <__udivmoddi4+0x29c>
 800095a:	4464      	add	r4, ip
 800095c:	3802      	subs	r0, #2
 800095e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000962:	1be4      	subs	r4, r4, r7
 8000964:	2600      	movs	r6, #0
 8000966:	b11d      	cbz	r5, 8000970 <__udivmoddi4+0xa4>
 8000968:	40d4      	lsrs	r4, r2
 800096a:	2300      	movs	r3, #0
 800096c:	e9c5 4300 	strd	r4, r3, [r5]
 8000970:	4631      	mov	r1, r6
 8000972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000976:	428b      	cmp	r3, r1
 8000978:	d909      	bls.n	800098e <__udivmoddi4+0xc2>
 800097a:	2d00      	cmp	r5, #0
 800097c:	f000 80ef 	beq.w	8000b5e <__udivmoddi4+0x292>
 8000980:	2600      	movs	r6, #0
 8000982:	e9c5 0100 	strd	r0, r1, [r5]
 8000986:	4630      	mov	r0, r6
 8000988:	4631      	mov	r1, r6
 800098a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800098e:	fab3 f683 	clz	r6, r3
 8000992:	2e00      	cmp	r6, #0
 8000994:	d14a      	bne.n	8000a2c <__udivmoddi4+0x160>
 8000996:	428b      	cmp	r3, r1
 8000998:	d302      	bcc.n	80009a0 <__udivmoddi4+0xd4>
 800099a:	4282      	cmp	r2, r0
 800099c:	f200 80f9 	bhi.w	8000b92 <__udivmoddi4+0x2c6>
 80009a0:	1a84      	subs	r4, r0, r2
 80009a2:	eb61 0303 	sbc.w	r3, r1, r3
 80009a6:	2001      	movs	r0, #1
 80009a8:	469e      	mov	lr, r3
 80009aa:	2d00      	cmp	r5, #0
 80009ac:	d0e0      	beq.n	8000970 <__udivmoddi4+0xa4>
 80009ae:	e9c5 4e00 	strd	r4, lr, [r5]
 80009b2:	e7dd      	b.n	8000970 <__udivmoddi4+0xa4>
 80009b4:	b902      	cbnz	r2, 80009b8 <__udivmoddi4+0xec>
 80009b6:	deff      	udf	#255	; 0xff
 80009b8:	fab2 f282 	clz	r2, r2
 80009bc:	2a00      	cmp	r2, #0
 80009be:	f040 8092 	bne.w	8000ae6 <__udivmoddi4+0x21a>
 80009c2:	eba1 010c 	sub.w	r1, r1, ip
 80009c6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009ca:	fa1f fe8c 	uxth.w	lr, ip
 80009ce:	2601      	movs	r6, #1
 80009d0:	0c20      	lsrs	r0, r4, #16
 80009d2:	fbb1 f3f7 	udiv	r3, r1, r7
 80009d6:	fb07 1113 	mls	r1, r7, r3, r1
 80009da:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009de:	fb0e f003 	mul.w	r0, lr, r3
 80009e2:	4288      	cmp	r0, r1
 80009e4:	d908      	bls.n	80009f8 <__udivmoddi4+0x12c>
 80009e6:	eb1c 0101 	adds.w	r1, ip, r1
 80009ea:	f103 38ff 	add.w	r8, r3, #4294967295
 80009ee:	d202      	bcs.n	80009f6 <__udivmoddi4+0x12a>
 80009f0:	4288      	cmp	r0, r1
 80009f2:	f200 80cb 	bhi.w	8000b8c <__udivmoddi4+0x2c0>
 80009f6:	4643      	mov	r3, r8
 80009f8:	1a09      	subs	r1, r1, r0
 80009fa:	b2a4      	uxth	r4, r4
 80009fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a00:	fb07 1110 	mls	r1, r7, r0, r1
 8000a04:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a08:	fb0e fe00 	mul.w	lr, lr, r0
 8000a0c:	45a6      	cmp	lr, r4
 8000a0e:	d908      	bls.n	8000a22 <__udivmoddi4+0x156>
 8000a10:	eb1c 0404 	adds.w	r4, ip, r4
 8000a14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a18:	d202      	bcs.n	8000a20 <__udivmoddi4+0x154>
 8000a1a:	45a6      	cmp	lr, r4
 8000a1c:	f200 80bb 	bhi.w	8000b96 <__udivmoddi4+0x2ca>
 8000a20:	4608      	mov	r0, r1
 8000a22:	eba4 040e 	sub.w	r4, r4, lr
 8000a26:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a2a:	e79c      	b.n	8000966 <__udivmoddi4+0x9a>
 8000a2c:	f1c6 0720 	rsb	r7, r6, #32
 8000a30:	40b3      	lsls	r3, r6
 8000a32:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a36:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a3a:	fa20 f407 	lsr.w	r4, r0, r7
 8000a3e:	fa01 f306 	lsl.w	r3, r1, r6
 8000a42:	431c      	orrs	r4, r3
 8000a44:	40f9      	lsrs	r1, r7
 8000a46:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a4a:	fa00 f306 	lsl.w	r3, r0, r6
 8000a4e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a52:	0c20      	lsrs	r0, r4, #16
 8000a54:	fa1f fe8c 	uxth.w	lr, ip
 8000a58:	fb09 1118 	mls	r1, r9, r8, r1
 8000a5c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a60:	fb08 f00e 	mul.w	r0, r8, lr
 8000a64:	4288      	cmp	r0, r1
 8000a66:	fa02 f206 	lsl.w	r2, r2, r6
 8000a6a:	d90b      	bls.n	8000a84 <__udivmoddi4+0x1b8>
 8000a6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a70:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a74:	f080 8088 	bcs.w	8000b88 <__udivmoddi4+0x2bc>
 8000a78:	4288      	cmp	r0, r1
 8000a7a:	f240 8085 	bls.w	8000b88 <__udivmoddi4+0x2bc>
 8000a7e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a82:	4461      	add	r1, ip
 8000a84:	1a09      	subs	r1, r1, r0
 8000a86:	b2a4      	uxth	r4, r4
 8000a88:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a8c:	fb09 1110 	mls	r1, r9, r0, r1
 8000a90:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a98:	458e      	cmp	lr, r1
 8000a9a:	d908      	bls.n	8000aae <__udivmoddi4+0x1e2>
 8000a9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000aa0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000aa4:	d26c      	bcs.n	8000b80 <__udivmoddi4+0x2b4>
 8000aa6:	458e      	cmp	lr, r1
 8000aa8:	d96a      	bls.n	8000b80 <__udivmoddi4+0x2b4>
 8000aaa:	3802      	subs	r0, #2
 8000aac:	4461      	add	r1, ip
 8000aae:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ab2:	fba0 9402 	umull	r9, r4, r0, r2
 8000ab6:	eba1 010e 	sub.w	r1, r1, lr
 8000aba:	42a1      	cmp	r1, r4
 8000abc:	46c8      	mov	r8, r9
 8000abe:	46a6      	mov	lr, r4
 8000ac0:	d356      	bcc.n	8000b70 <__udivmoddi4+0x2a4>
 8000ac2:	d053      	beq.n	8000b6c <__udivmoddi4+0x2a0>
 8000ac4:	b15d      	cbz	r5, 8000ade <__udivmoddi4+0x212>
 8000ac6:	ebb3 0208 	subs.w	r2, r3, r8
 8000aca:	eb61 010e 	sbc.w	r1, r1, lr
 8000ace:	fa01 f707 	lsl.w	r7, r1, r7
 8000ad2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ad6:	40f1      	lsrs	r1, r6
 8000ad8:	431f      	orrs	r7, r3
 8000ada:	e9c5 7100 	strd	r7, r1, [r5]
 8000ade:	2600      	movs	r6, #0
 8000ae0:	4631      	mov	r1, r6
 8000ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae6:	f1c2 0320 	rsb	r3, r2, #32
 8000aea:	40d8      	lsrs	r0, r3
 8000aec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000af0:	fa21 f303 	lsr.w	r3, r1, r3
 8000af4:	4091      	lsls	r1, r2
 8000af6:	4301      	orrs	r1, r0
 8000af8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000afc:	fa1f fe8c 	uxth.w	lr, ip
 8000b00:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b04:	fb07 3610 	mls	r6, r7, r0, r3
 8000b08:	0c0b      	lsrs	r3, r1, #16
 8000b0a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b0e:	fb00 f60e 	mul.w	r6, r0, lr
 8000b12:	429e      	cmp	r6, r3
 8000b14:	fa04 f402 	lsl.w	r4, r4, r2
 8000b18:	d908      	bls.n	8000b2c <__udivmoddi4+0x260>
 8000b1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b22:	d22f      	bcs.n	8000b84 <__udivmoddi4+0x2b8>
 8000b24:	429e      	cmp	r6, r3
 8000b26:	d92d      	bls.n	8000b84 <__udivmoddi4+0x2b8>
 8000b28:	3802      	subs	r0, #2
 8000b2a:	4463      	add	r3, ip
 8000b2c:	1b9b      	subs	r3, r3, r6
 8000b2e:	b289      	uxth	r1, r1
 8000b30:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b34:	fb07 3316 	mls	r3, r7, r6, r3
 8000b38:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b3c:	fb06 f30e 	mul.w	r3, r6, lr
 8000b40:	428b      	cmp	r3, r1
 8000b42:	d908      	bls.n	8000b56 <__udivmoddi4+0x28a>
 8000b44:	eb1c 0101 	adds.w	r1, ip, r1
 8000b48:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b4c:	d216      	bcs.n	8000b7c <__udivmoddi4+0x2b0>
 8000b4e:	428b      	cmp	r3, r1
 8000b50:	d914      	bls.n	8000b7c <__udivmoddi4+0x2b0>
 8000b52:	3e02      	subs	r6, #2
 8000b54:	4461      	add	r1, ip
 8000b56:	1ac9      	subs	r1, r1, r3
 8000b58:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b5c:	e738      	b.n	80009d0 <__udivmoddi4+0x104>
 8000b5e:	462e      	mov	r6, r5
 8000b60:	4628      	mov	r0, r5
 8000b62:	e705      	b.n	8000970 <__udivmoddi4+0xa4>
 8000b64:	4606      	mov	r6, r0
 8000b66:	e6e3      	b.n	8000930 <__udivmoddi4+0x64>
 8000b68:	4618      	mov	r0, r3
 8000b6a:	e6f8      	b.n	800095e <__udivmoddi4+0x92>
 8000b6c:	454b      	cmp	r3, r9
 8000b6e:	d2a9      	bcs.n	8000ac4 <__udivmoddi4+0x1f8>
 8000b70:	ebb9 0802 	subs.w	r8, r9, r2
 8000b74:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b78:	3801      	subs	r0, #1
 8000b7a:	e7a3      	b.n	8000ac4 <__udivmoddi4+0x1f8>
 8000b7c:	4646      	mov	r6, r8
 8000b7e:	e7ea      	b.n	8000b56 <__udivmoddi4+0x28a>
 8000b80:	4620      	mov	r0, r4
 8000b82:	e794      	b.n	8000aae <__udivmoddi4+0x1e2>
 8000b84:	4640      	mov	r0, r8
 8000b86:	e7d1      	b.n	8000b2c <__udivmoddi4+0x260>
 8000b88:	46d0      	mov	r8, sl
 8000b8a:	e77b      	b.n	8000a84 <__udivmoddi4+0x1b8>
 8000b8c:	3b02      	subs	r3, #2
 8000b8e:	4461      	add	r1, ip
 8000b90:	e732      	b.n	80009f8 <__udivmoddi4+0x12c>
 8000b92:	4630      	mov	r0, r6
 8000b94:	e709      	b.n	80009aa <__udivmoddi4+0xde>
 8000b96:	4464      	add	r4, ip
 8000b98:	3802      	subs	r0, #2
 8000b9a:	e742      	b.n	8000a22 <__udivmoddi4+0x156>

08000b9c <__aeabi_idiv0>:
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <Init_LCD>:
static void iopins_ini();
static void ili9488_showArray_wo_coordinates(uint16_t *data, uint32_t count);
/*----------------------------------------------Public  functions-----------------------------------------------------*/
//initialize LCD
void Init_LCD()
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
	interrupt_initialize_priorities();
 8000ba4:	f000 f982 	bl	8000eac <interrupt_initialize_priorities>
	iopins_ini();
 8000ba8:	f000 f988 	bl	8000ebc <iopins_ini>
	initialize_ili9488();
 8000bac:	f000 fb8e 	bl	80012cc <initialize_ili9488>
	LCD_backlight_set(100);
 8000bb0:	2064      	movs	r0, #100	; 0x64
 8000bb2:	f000 f8d1 	bl	8000d58 <LCD_backlight_set>
}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
	...

08000bbc <LCD_fillRect>:
//Draw filled rectangle
void LCD_fillRect(uint16_t x1, uint16_t y1, uint16_t w, uint16_t h, uint16_t color)
{
 8000bbc:	b590      	push	{r4, r7, lr}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4604      	mov	r4, r0
 8000bc4:	4608      	mov	r0, r1
 8000bc6:	4611      	mov	r1, r2
 8000bc8:	461a      	mov	r2, r3
 8000bca:	4623      	mov	r3, r4
 8000bcc:	80fb      	strh	r3, [r7, #6]
 8000bce:	4603      	mov	r3, r0
 8000bd0:	80bb      	strh	r3, [r7, #4]
 8000bd2:	460b      	mov	r3, r1
 8000bd4:	807b      	strh	r3, [r7, #2]
 8000bd6:	4613      	mov	r3, r2
 8000bd8:	803b      	strh	r3, [r7, #0]
	uint32_t count = w * h;
 8000bda:	887b      	ldrh	r3, [r7, #2]
 8000bdc:	883a      	ldrh	r2, [r7, #0]
 8000bde:	fb02 f303 	mul.w	r3, r2, r3
 8000be2:	60bb      	str	r3, [r7, #8]
	LCD_set_coordinates(x1, y1, (uint16_t) (x1 + w - 1), (uint16_t) (y1 + h - 1));
 8000be4:	88fa      	ldrh	r2, [r7, #6]
 8000be6:	887b      	ldrh	r3, [r7, #2]
 8000be8:	4413      	add	r3, r2
 8000bea:	b29b      	uxth	r3, r3
 8000bec:	3b01      	subs	r3, #1
 8000bee:	b29c      	uxth	r4, r3
 8000bf0:	88ba      	ldrh	r2, [r7, #4]
 8000bf2:	883b      	ldrh	r3, [r7, #0]
 8000bf4:	4413      	add	r3, r2
 8000bf6:	b29b      	uxth	r3, r3
 8000bf8:	3b01      	subs	r3, #1
 8000bfa:	b29b      	uxth	r3, r3
 8000bfc:	88b9      	ldrh	r1, [r7, #4]
 8000bfe:	88f8      	ldrh	r0, [r7, #6]
 8000c00:	4622      	mov	r2, r4
 8000c02:	f000 f82f 	bl	8000c64 <LCD_set_coordinates>

	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_RESET);
 8000c06:	2200      	movs	r2, #0
 8000c08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c0c:	4814      	ldr	r0, [pc, #80]	; (8000c60 <LCD_fillRect+0xa4>)
 8000c0e:	f004 feb7 	bl	8005980 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_RESET);
 8000c12:	2200      	movs	r2, #0
 8000c14:	2180      	movs	r1, #128	; 0x80
 8000c16:	4812      	ldr	r0, [pc, #72]	; (8000c60 <LCD_fillRect+0xa4>)
 8000c18:	f004 feb2 	bl	8005980 <HAL_GPIO_WritePin>
	TFT_REG=0x002C;
 8000c1c:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000c20:	222c      	movs	r2, #44	; 0x2c
 8000c22:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_SET);
 8000c24:	2201      	movs	r2, #1
 8000c26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c2a:	480d      	ldr	r0, [pc, #52]	; (8000c60 <LCD_fillRect+0xa4>)
 8000c2c:	f004 fea8 	bl	8005980 <HAL_GPIO_WritePin>

	for(unsigned int i=0; i<count; i++)
 8000c30:	2300      	movs	r3, #0
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	e006      	b.n	8000c44 <LCD_fillRect+0x88>
	{
		TFT_REG=color;
 8000c36:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000c3a:	8c3b      	ldrh	r3, [r7, #32]
 8000c3c:	8013      	strh	r3, [r2, #0]
	for(unsigned int i=0; i<count; i++)
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	3301      	adds	r3, #1
 8000c42:	60fb      	str	r3, [r7, #12]
 8000c44:	68fa      	ldr	r2, [r7, #12]
 8000c46:	68bb      	ldr	r3, [r7, #8]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d3f4      	bcc.n	8000c36 <LCD_fillRect+0x7a>
	}

	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_SET);
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	2180      	movs	r1, #128	; 0x80
 8000c50:	4803      	ldr	r0, [pc, #12]	; (8000c60 <LCD_fillRect+0xa4>)
 8000c52:	f004 fe95 	bl	8005980 <HAL_GPIO_WritePin>
}
 8000c56:	bf00      	nop
 8000c58:	3714      	adds	r7, #20
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd90      	pop	{r4, r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40020c00 	.word	0x40020c00

08000c64 <LCD_set_coordinates>:
//Set coordinates for LCD IC
void LCD_set_coordinates(uint16_t x1,uint16_t y1, uint16_t x2, uint16_t y2)
{
 8000c64:	b590      	push	{r4, r7, lr}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4604      	mov	r4, r0
 8000c6c:	4608      	mov	r0, r1
 8000c6e:	4611      	mov	r1, r2
 8000c70:	461a      	mov	r2, r3
 8000c72:	4623      	mov	r3, r4
 8000c74:	80fb      	strh	r3, [r7, #6]
 8000c76:	4603      	mov	r3, r0
 8000c78:	80bb      	strh	r3, [r7, #4]
 8000c7a:	460b      	mov	r3, r1
 8000c7c:	807b      	strh	r3, [r7, #2]
 8000c7e:	4613      	mov	r3, r2
 8000c80:	803b      	strh	r3, [r7, #0]
	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_RESET);
 8000c82:	2200      	movs	r2, #0
 8000c84:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c88:	4832      	ldr	r0, [pc, #200]	; (8000d54 <LCD_set_coordinates+0xf0>)
 8000c8a:	f004 fe79 	bl	8005980 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_RESET);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2180      	movs	r1, #128	; 0x80
 8000c92:	4830      	ldr	r0, [pc, #192]	; (8000d54 <LCD_set_coordinates+0xf0>)
 8000c94:	f004 fe74 	bl	8005980 <HAL_GPIO_WritePin>
	TFT_REG=0x002A;
 8000c98:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000c9c:	222a      	movs	r2, #42	; 0x2a
 8000c9e:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_SET);
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ca6:	482b      	ldr	r0, [pc, #172]	; (8000d54 <LCD_set_coordinates+0xf0>)
 8000ca8:	f004 fe6a 	bl	8005980 <HAL_GPIO_WritePin>
	TFT_REG=x1>>8;
 8000cac:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000cb0:	88fb      	ldrh	r3, [r7, #6]
 8000cb2:	0a1b      	lsrs	r3, r3, #8
 8000cb4:	b29b      	uxth	r3, r3
 8000cb6:	8013      	strh	r3, [r2, #0]
	TFT_REG=x1&0xFF;
 8000cb8:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000cbc:	88fa      	ldrh	r2, [r7, #6]
 8000cbe:	b2d2      	uxtb	r2, r2
 8000cc0:	b292      	uxth	r2, r2
 8000cc2:	801a      	strh	r2, [r3, #0]
	TFT_REG=x2>>8;
 8000cc4:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000cc8:	887b      	ldrh	r3, [r7, #2]
 8000cca:	0a1b      	lsrs	r3, r3, #8
 8000ccc:	b29b      	uxth	r3, r3
 8000cce:	8013      	strh	r3, [r2, #0]
	TFT_REG=x2&0xFF;
 8000cd0:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000cd4:	887a      	ldrh	r2, [r7, #2]
 8000cd6:	b2d2      	uxtb	r2, r2
 8000cd8:	b292      	uxth	r2, r2
 8000cda:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_SET);
 8000cdc:	2201      	movs	r2, #1
 8000cde:	2180      	movs	r1, #128	; 0x80
 8000ce0:	481c      	ldr	r0, [pc, #112]	; (8000d54 <LCD_set_coordinates+0xf0>)
 8000ce2:	f004 fe4d 	bl	8005980 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_RESET);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cec:	4819      	ldr	r0, [pc, #100]	; (8000d54 <LCD_set_coordinates+0xf0>)
 8000cee:	f004 fe47 	bl	8005980 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_RESET);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	2180      	movs	r1, #128	; 0x80
 8000cf6:	4817      	ldr	r0, [pc, #92]	; (8000d54 <LCD_set_coordinates+0xf0>)
 8000cf8:	f004 fe42 	bl	8005980 <HAL_GPIO_WritePin>
	TFT_REG=0x002B;
 8000cfc:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000d00:	222b      	movs	r2, #43	; 0x2b
 8000d02:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_SET);
 8000d04:	2201      	movs	r2, #1
 8000d06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d0a:	4812      	ldr	r0, [pc, #72]	; (8000d54 <LCD_set_coordinates+0xf0>)
 8000d0c:	f004 fe38 	bl	8005980 <HAL_GPIO_WritePin>
	TFT_REG=y1>>8;
 8000d10:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000d14:	88bb      	ldrh	r3, [r7, #4]
 8000d16:	0a1b      	lsrs	r3, r3, #8
 8000d18:	b29b      	uxth	r3, r3
 8000d1a:	8013      	strh	r3, [r2, #0]
	TFT_REG=y1&0xFF;
 8000d1c:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000d20:	88ba      	ldrh	r2, [r7, #4]
 8000d22:	b2d2      	uxtb	r2, r2
 8000d24:	b292      	uxth	r2, r2
 8000d26:	801a      	strh	r2, [r3, #0]
	TFT_REG=y2>>8;
 8000d28:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000d2c:	883b      	ldrh	r3, [r7, #0]
 8000d2e:	0a1b      	lsrs	r3, r3, #8
 8000d30:	b29b      	uxth	r3, r3
 8000d32:	8013      	strh	r3, [r2, #0]
	TFT_REG=y2&0xFF;
 8000d34:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000d38:	883a      	ldrh	r2, [r7, #0]
 8000d3a:	b2d2      	uxtb	r2, r2
 8000d3c:	b292      	uxth	r2, r2
 8000d3e:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_SET);
 8000d40:	2201      	movs	r2, #1
 8000d42:	2180      	movs	r1, #128	; 0x80
 8000d44:	4803      	ldr	r0, [pc, #12]	; (8000d54 <LCD_set_coordinates+0xf0>)
 8000d46:	f004 fe1b 	bl	8005980 <HAL_GPIO_WritePin>
}
 8000d4a:	bf00      	nop
 8000d4c:	370c      	adds	r7, #12
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd90      	pop	{r4, r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40020c00 	.word	0x40020c00

08000d58 <LCD_backlight_set>:
//Set PWM duty cycle for LCD back light
void LCD_backlight_set(uint16_t pwm)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b0a6      	sub	sp, #152	; 0x98
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	80fb      	strh	r3, [r7, #6]

	if(pwm>=100)
 8000d62:	88fb      	ldrh	r3, [r7, #6]
 8000d64:	2b63      	cmp	r3, #99	; 0x63
 8000d66:	d902      	bls.n	8000d6e <LCD_backlight_set+0x16>
	{
		pwm=100;
 8000d68:	2364      	movs	r3, #100	; 0x64
 8000d6a:	80fb      	strh	r3, [r7, #6]
 8000d6c:	e004      	b.n	8000d78 <LCD_backlight_set+0x20>
	}else if(pwm <= 0)
 8000d6e:	88fb      	ldrh	r3, [r7, #6]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d101      	bne.n	8000d78 <LCD_backlight_set+0x20>
	{
		pwm = 0;
 8000d74:	2300      	movs	r3, #0
 8000d76:	80fb      	strh	r3, [r7, #6]
	}

	pwm=(unsigned int)((MAX_PWM_PULSE * pwm)/100);
 8000d78:	88fa      	ldrh	r2, [r7, #6]
 8000d7a:	4613      	mov	r3, r2
 8000d7c:	041b      	lsls	r3, r3, #16
 8000d7e:	1a9b      	subs	r3, r3, r2
 8000d80:	4a48      	ldr	r2, [pc, #288]	; (8000ea4 <LCD_backlight_set+0x14c>)
 8000d82:	fb82 1203 	smull	r1, r2, r2, r3
 8000d86:	1152      	asrs	r2, r2, #5
 8000d88:	17db      	asrs	r3, r3, #31
 8000d8a:	1ad3      	subs	r3, r2, r3
 8000d8c:	80fb      	strh	r3, [r7, #6]

	/* Common settings */
      TIM_HandleTypeDef htim1;
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d8e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	605a      	str	r2, [r3, #4]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
 8000da6:	611a      	str	r2, [r3, #16]
 8000da8:	615a      	str	r2, [r3, #20]
 8000daa:	619a      	str	r2, [r3, #24]
	  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000dac:	f107 030c 	add.w	r3, r7, #12
 8000db0:	2220      	movs	r2, #32
 8000db2:	2100      	movs	r1, #0
 8000db4:	4618      	mov	r0, r3
 8000db6:	f008 fb71 	bl	800949c <memset>

	  htim1.Instance = TIM1;
 8000dba:	4b3b      	ldr	r3, [pc, #236]	; (8000ea8 <LCD_backlight_set+0x150>)
 8000dbc:	653b      	str	r3, [r7, #80]	; 0x50
	  htim1.Init.Prescaler = 0;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	657b      	str	r3, [r7, #84]	; 0x54
	  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	65bb      	str	r3, [r7, #88]	; 0x58
	  htim1.Init.Period = 65535;
 8000dc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dca:	65fb      	str	r3, [r7, #92]	; 0x5c
	  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	663b      	str	r3, [r7, #96]	; 0x60
	  htim1.Init.RepetitionCounter = 0;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	667b      	str	r3, [r7, #100]	; 0x64
	  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	66bb      	str	r3, [r7, #104]	; 0x68
	  HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_4);
 8000dd8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000ddc:	210c      	movs	r1, #12
 8000dde:	4618      	mov	r0, r3
 8000de0:	f006 fdbe 	bl	8007960 <HAL_TIM_PWM_Stop>
	  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000de4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000de8:	4618      	mov	r0, r3
 8000dea:	f006 fca2 	bl	8007732 <HAL_TIM_PWM_Init>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <LCD_backlight_set+0xa0>
	  {
	    Error_Handler();
 8000df4:	f003 fa64 	bl	80042c0 <Error_Handler>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	64bb      	str	r3, [r7, #72]	; 0x48
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	64fb      	str	r3, [r7, #76]	; 0x4c
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e00:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000e04:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000e08:	4611      	mov	r1, r2
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f007 f950 	bl	80080b0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <LCD_backlight_set+0xc2>
	  {
	    Error_Handler();
 8000e16:	f003 fa53 	bl	80042c0 <Error_Handler>
	  }
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e1a:	2360      	movs	r3, #96	; 0x60
 8000e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
	  sConfigOC.Pulse = pwm;
 8000e1e:	88fb      	ldrh	r3, [r7, #6]
 8000e20:	633b      	str	r3, [r7, #48]	; 0x30
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e22:	2300      	movs	r3, #0
 8000e24:	637b      	str	r3, [r7, #52]	; 0x34
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e26:	2300      	movs	r3, #0
 8000e28:	63fb      	str	r3, [r7, #60]	; 0x3c
	  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	643b      	str	r3, [r7, #64]	; 0x40
	  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	647b      	str	r3, [r7, #68]	; 0x44
	  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e32:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8000e36:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000e3a:	220c      	movs	r2, #12
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f006 fdff 	bl	8007a40 <HAL_TIM_PWM_ConfigChannel>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <LCD_backlight_set+0xf4>
	  {
	    Error_Handler();
 8000e48:	f003 fa3a 	bl	80042c0 <Error_Handler>
	  }
	  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	60fb      	str	r3, [r7, #12]
	  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e50:	2300      	movs	r3, #0
 8000e52:	613b      	str	r3, [r7, #16]
	  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e54:	2300      	movs	r3, #0
 8000e56:	617b      	str	r3, [r7, #20]
	  sBreakDeadTimeConfig.DeadTime = 0;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	61bb      	str	r3, [r7, #24]
	  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	61fb      	str	r3, [r7, #28]
	  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e64:	623b      	str	r3, [r7, #32]
	  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e66:	2300      	movs	r3, #0
 8000e68:	62bb      	str	r3, [r7, #40]	; 0x28
	  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e6a:	f107 020c 	add.w	r2, r7, #12
 8000e6e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000e72:	4611      	mov	r1, r2
 8000e74:	4618      	mov	r0, r3
 8000e76:	f007 f997 	bl	80081a8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <LCD_backlight_set+0x12c>
	  {
	    Error_Handler();
 8000e80:	f003 fa1e 	bl	80042c0 <Error_Handler>
	  }

	  HAL_TIM_MspPostInit(&htim1);
 8000e84:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f003 fd79 	bl	8004980 <HAL_TIM_MspPostInit>
	  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_4);
 8000e8e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000e92:	210c      	movs	r1, #12
 8000e94:	4618      	mov	r0, r3
 8000e96:	f006 fc9b 	bl	80077d0 <HAL_TIM_PWM_Start>


}
 8000e9a:	bf00      	nop
 8000e9c:	3798      	adds	r7, #152	; 0x98
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	51eb851f 	.word	0x51eb851f
 8000ea8:	40010000 	.word	0x40010000

08000eac <interrupt_initialize_priorities>:
	ili9488_showArray_wo_coordinates(color,1);
}

/*----------------------------------------------Private functions-----------------------------------------------------*/
static void interrupt_initialize_priorities()
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4); //4 bits for preemp priority 0 bit for sub priority
 8000eb0:	2003      	movs	r0, #3
 8000eb2:	f004 faf5 	bl	80054a0 <HAL_NVIC_SetPriorityGrouping>
}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}
	...

08000ebc <iopins_ini>:
static void iopins_ini()
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b098      	sub	sp, #96	; 0x60
 8000ec0:	af00      	add	r7, sp, #0

	 __GPIOC_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	64bb      	str	r3, [r7, #72]	; 0x48
 8000ec6:	4bac      	ldr	r3, [pc, #688]	; (8001178 <iopins_ini+0x2bc>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	4aab      	ldr	r2, [pc, #684]	; (8001178 <iopins_ini+0x2bc>)
 8000ecc:	f043 0304 	orr.w	r3, r3, #4
 8000ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed2:	4ba9      	ldr	r3, [pc, #676]	; (8001178 <iopins_ini+0x2bc>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	f003 0304 	and.w	r3, r3, #4
 8000eda:	64bb      	str	r3, [r7, #72]	; 0x48
 8000edc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
	 __GPIOD_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	647b      	str	r3, [r7, #68]	; 0x44
 8000ee2:	4ba5      	ldr	r3, [pc, #660]	; (8001178 <iopins_ini+0x2bc>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	4aa4      	ldr	r2, [pc, #656]	; (8001178 <iopins_ini+0x2bc>)
 8000ee8:	f043 0308 	orr.w	r3, r3, #8
 8000eec:	6313      	str	r3, [r2, #48]	; 0x30
 8000eee:	4ba2      	ldr	r3, [pc, #648]	; (8001178 <iopins_ini+0x2bc>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	f003 0308 	and.w	r3, r3, #8
 8000ef6:	647b      	str	r3, [r7, #68]	; 0x44
 8000ef8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
	 __GPIOA_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	643b      	str	r3, [r7, #64]	; 0x40
 8000efe:	4b9e      	ldr	r3, [pc, #632]	; (8001178 <iopins_ini+0x2bc>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	4a9d      	ldr	r2, [pc, #628]	; (8001178 <iopins_ini+0x2bc>)
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0a:	4b9b      	ldr	r3, [pc, #620]	; (8001178 <iopins_ini+0x2bc>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	643b      	str	r3, [r7, #64]	; 0x40
 8000f14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
	 __GPIOB_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f1a:	4b97      	ldr	r3, [pc, #604]	; (8001178 <iopins_ini+0x2bc>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	4a96      	ldr	r2, [pc, #600]	; (8001178 <iopins_ini+0x2bc>)
 8000f20:	f043 0302 	orr.w	r3, r3, #2
 8000f24:	6313      	str	r3, [r2, #48]	; 0x30
 8000f26:	4b94      	ldr	r3, [pc, #592]	; (8001178 <iopins_ini+0x2bc>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	f003 0302 	and.w	r3, r3, #2
 8000f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
	GPIO_InitTypeDef GPIO_InitStruct;

    BUZZER_PORT_RCC();
 8000f32:	2300      	movs	r3, #0
 8000f34:	63bb      	str	r3, [r7, #56]	; 0x38
 8000f36:	4b90      	ldr	r3, [pc, #576]	; (8001178 <iopins_ini+0x2bc>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	4a8f      	ldr	r2, [pc, #572]	; (8001178 <iopins_ini+0x2bc>)
 8000f3c:	f043 0308 	orr.w	r3, r3, #8
 8000f40:	6313      	str	r3, [r2, #48]	; 0x30
 8000f42:	4b8d      	ldr	r3, [pc, #564]	; (8001178 <iopins_ini+0x2bc>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	f003 0308 	and.w	r3, r3, #8
 8000f4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8000f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Pin = BUZZER;
 8000f4e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f52:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f54:	2301      	movs	r3, #1
 8000f56:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	65bb      	str	r3, [r7, #88]	; 0x58
	HAL_GPIO_Init(BUZZER_PORT, &GPIO_InitStruct);
 8000f5c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f60:	4619      	mov	r1, r3
 8000f62:	4886      	ldr	r0, [pc, #536]	; (800117c <iopins_ini+0x2c0>)
 8000f64:	f004 fb70 	bl	8005648 <HAL_GPIO_Init>

    RS485DIR_PORT_RCC();
 8000f68:	2300      	movs	r3, #0
 8000f6a:	637b      	str	r3, [r7, #52]	; 0x34
 8000f6c:	4b82      	ldr	r3, [pc, #520]	; (8001178 <iopins_ini+0x2bc>)
 8000f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f70:	4a81      	ldr	r2, [pc, #516]	; (8001178 <iopins_ini+0x2bc>)
 8000f72:	f043 0301 	orr.w	r3, r3, #1
 8000f76:	6313      	str	r3, [r2, #48]	; 0x30
 8000f78:	4b7f      	ldr	r3, [pc, #508]	; (8001178 <iopins_ini+0x2bc>)
 8000f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7c:	f003 0301 	and.w	r3, r3, #1
 8000f80:	637b      	str	r3, [r7, #52]	; 0x34
 8000f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Pin = RS485DIR;
 8000f84:	2302      	movs	r3, #2
 8000f86:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	65bb      	str	r3, [r7, #88]	; 0x58
	HAL_GPIO_Init(RS485DIR_PORT, &GPIO_InitStruct);
 8000f90:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f94:	4619      	mov	r1, r3
 8000f96:	487a      	ldr	r0, [pc, #488]	; (8001180 <iopins_ini+0x2c4>)
 8000f98:	f004 fb56 	bl	8005648 <HAL_GPIO_Init>

    LCD_CS_PORT_RCC();
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	633b      	str	r3, [r7, #48]	; 0x30
 8000fa0:	4b75      	ldr	r3, [pc, #468]	; (8001178 <iopins_ini+0x2bc>)
 8000fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa4:	4a74      	ldr	r2, [pc, #464]	; (8001178 <iopins_ini+0x2bc>)
 8000fa6:	f043 0308 	orr.w	r3, r3, #8
 8000faa:	6313      	str	r3, [r2, #48]	; 0x30
 8000fac:	4b72      	ldr	r3, [pc, #456]	; (8001178 <iopins_ini+0x2bc>)
 8000fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb0:	f003 0308 	and.w	r3, r3, #8
 8000fb4:	633b      	str	r3, [r7, #48]	; 0x30
 8000fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pin = LCD_CS;
 8000fb8:	2380      	movs	r3, #128	; 0x80
 8000fba:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(LCD_CS_PORT, &GPIO_InitStruct);
 8000fc4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000fc8:	4619      	mov	r1, r3
 8000fca:	486c      	ldr	r0, [pc, #432]	; (800117c <iopins_ini+0x2c0>)
 8000fcc:	f004 fb3c 	bl	8005648 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(LCD_CS_PORT,LCD_CS,GPIO_PIN_SET);
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	2180      	movs	r1, #128	; 0x80
 8000fd4:	4869      	ldr	r0, [pc, #420]	; (800117c <iopins_ini+0x2c0>)
 8000fd6:	f004 fcd3 	bl	8005980 <HAL_GPIO_WritePin>

    LCD_RES_PORT_RCC();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000fde:	4b66      	ldr	r3, [pc, #408]	; (8001178 <iopins_ini+0x2bc>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	4a65      	ldr	r2, [pc, #404]	; (8001178 <iopins_ini+0x2bc>)
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fea:	4b63      	ldr	r3, [pc, #396]	; (8001178 <iopins_ini+0x2bc>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Pin = LCD_RES;
 8000ff6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ffa:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed =GPIO_SPEED_FREQ_VERY_HIGH;
 8001000:	2303      	movs	r3, #3
 8001002:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(LCD_RES_PORT, &GPIO_InitStruct);
 8001004:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001008:	4619      	mov	r1, r3
 800100a:	485d      	ldr	r0, [pc, #372]	; (8001180 <iopins_ini+0x2c4>)
 800100c:	f004 fb1c 	bl	8005648 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(LCD_RES_PORT,LCD_RES,GPIO_PIN_RESET);
 8001010:	2200      	movs	r2, #0
 8001012:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001016:	485a      	ldr	r0, [pc, #360]	; (8001180 <iopins_ini+0x2c4>)
 8001018:	f004 fcb2 	bl	8005980 <HAL_GPIO_WritePin>
	delay_ms(50);
 800101c:	2032      	movs	r0, #50	; 0x32
 800101e:	f000 f9cf 	bl	80013c0 <delay_ms>
	HAL_GPIO_WritePin(LCD_RES_PORT,LCD_RES,GPIO_PIN_SET);
 8001022:	2201      	movs	r2, #1
 8001024:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001028:	4855      	ldr	r0, [pc, #340]	; (8001180 <iopins_ini+0x2c4>)
 800102a:	f004 fca9 	bl	8005980 <HAL_GPIO_WritePin>

    LCD_DCX_PORT_RCC();
 800102e:	2300      	movs	r3, #0
 8001030:	62bb      	str	r3, [r7, #40]	; 0x28
 8001032:	4b51      	ldr	r3, [pc, #324]	; (8001178 <iopins_ini+0x2bc>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	4a50      	ldr	r2, [pc, #320]	; (8001178 <iopins_ini+0x2bc>)
 8001038:	f043 0308 	orr.w	r3, r3, #8
 800103c:	6313      	str	r3, [r2, #48]	; 0x30
 800103e:	4b4e      	ldr	r3, [pc, #312]	; (8001178 <iopins_ini+0x2bc>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	f003 0308 	and.w	r3, r3, #8
 8001046:	62bb      	str	r3, [r7, #40]	; 0x28
 8001048:	6abb      	ldr	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pin = LCD_DCX;
 800104a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800104e:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001050:	2301      	movs	r3, #1
 8001052:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed =GPIO_SPEED_FREQ_VERY_HIGH;
 8001054:	2303      	movs	r3, #3
 8001056:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(LCD_DCX_PORT, &GPIO_InitStruct);
 8001058:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800105c:	4619      	mov	r1, r3
 800105e:	4847      	ldr	r0, [pc, #284]	; (800117c <iopins_ini+0x2c0>)
 8001060:	f004 faf2 	bl	8005648 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(LCD_DCX_PORT,LCD_DCX,GPIO_PIN_SET);
 8001064:	2201      	movs	r2, #1
 8001066:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800106a:	4844      	ldr	r0, [pc, #272]	; (800117c <iopins_ini+0x2c0>)
 800106c:	f004 fc88 	bl	8005980 <HAL_GPIO_WritePin>

    FLASH_CS_PORT_RCC();
 8001070:	2300      	movs	r3, #0
 8001072:	627b      	str	r3, [r7, #36]	; 0x24
 8001074:	4b40      	ldr	r3, [pc, #256]	; (8001178 <iopins_ini+0x2bc>)
 8001076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001078:	4a3f      	ldr	r2, [pc, #252]	; (8001178 <iopins_ini+0x2bc>)
 800107a:	f043 0301 	orr.w	r3, r3, #1
 800107e:	6313      	str	r3, [r2, #48]	; 0x30
 8001080:	4b3d      	ldr	r3, [pc, #244]	; (8001178 <iopins_ini+0x2bc>)
 8001082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001084:	f003 0301 	and.w	r3, r3, #1
 8001088:	627b      	str	r3, [r7, #36]	; 0x24
 800108a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Pin = FLASH_CS;
 800108c:	2310      	movs	r3, #16
 800108e:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001090:	2301      	movs	r3, #1
 8001092:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed =GPIO_SPEED_FREQ_VERY_HIGH;
 8001094:	2303      	movs	r3, #3
 8001096:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(FLASH_CS_PORT, &GPIO_InitStruct);
 8001098:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800109c:	4619      	mov	r1, r3
 800109e:	4838      	ldr	r0, [pc, #224]	; (8001180 <iopins_ini+0x2c4>)
 80010a0:	f004 fad2 	bl	8005648 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(FLASH_CS_PORT,FLASH_CS,GPIO_PIN_SET);
 80010a4:	2201      	movs	r2, #1
 80010a6:	2110      	movs	r1, #16
 80010a8:	4835      	ldr	r0, [pc, #212]	; (8001180 <iopins_ini+0x2c4>)
 80010aa:	f004 fc69 	bl	8005980 <HAL_GPIO_WritePin>

    FLASH_WP_PORT_RCC();
 80010ae:	2300      	movs	r3, #0
 80010b0:	623b      	str	r3, [r7, #32]
 80010b2:	4b31      	ldr	r3, [pc, #196]	; (8001178 <iopins_ini+0x2bc>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	4a30      	ldr	r2, [pc, #192]	; (8001178 <iopins_ini+0x2bc>)
 80010b8:	f043 0304 	orr.w	r3, r3, #4
 80010bc:	6313      	str	r3, [r2, #48]	; 0x30
 80010be:	4b2e      	ldr	r3, [pc, #184]	; (8001178 <iopins_ini+0x2bc>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	f003 0304 	and.w	r3, r3, #4
 80010c6:	623b      	str	r3, [r7, #32]
 80010c8:	6a3b      	ldr	r3, [r7, #32]
	GPIO_InitStruct.Pin = FLASH_WP;
 80010ca:	2310      	movs	r3, #16
 80010cc:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ce:	2301      	movs	r3, #1
 80010d0:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d2:	2300      	movs	r3, #0
 80010d4:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(FLASH_WP_PORT, &GPIO_InitStruct);
 80010d6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80010da:	4619      	mov	r1, r3
 80010dc:	4829      	ldr	r0, [pc, #164]	; (8001184 <iopins_ini+0x2c8>)
 80010de:	f004 fab3 	bl	8005648 <HAL_GPIO_Init>
	 HAL_GPIO_WritePin(FLASH_WP_PORT,FLASH_WP,GPIO_PIN_RESET);
 80010e2:	2200      	movs	r2, #0
 80010e4:	2110      	movs	r1, #16
 80010e6:	4827      	ldr	r0, [pc, #156]	; (8001184 <iopins_ini+0x2c8>)
 80010e8:	f004 fc4a 	bl	8005980 <HAL_GPIO_WritePin>

    FRAM_CS_PORT_RCC();
 80010ec:	2300      	movs	r3, #0
 80010ee:	61fb      	str	r3, [r7, #28]
 80010f0:	4b21      	ldr	r3, [pc, #132]	; (8001178 <iopins_ini+0x2bc>)
 80010f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f4:	4a20      	ldr	r2, [pc, #128]	; (8001178 <iopins_ini+0x2bc>)
 80010f6:	f043 0302 	orr.w	r3, r3, #2
 80010fa:	6313      	str	r3, [r2, #48]	; 0x30
 80010fc:	4b1e      	ldr	r3, [pc, #120]	; (8001178 <iopins_ini+0x2bc>)
 80010fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001100:	f003 0302 	and.w	r3, r3, #2
 8001104:	61fb      	str	r3, [r7, #28]
 8001106:	69fb      	ldr	r3, [r7, #28]
	GPIO_InitStruct.Pin = FRAM_CS;
 8001108:	f44f 7300 	mov.w	r3, #512	; 0x200
 800110c:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110e:	2301      	movs	r3, #1
 8001110:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed =GPIO_SPEED_FREQ_VERY_HIGH;
 8001112:	2303      	movs	r3, #3
 8001114:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(FRAM_CS_PORT, &GPIO_InitStruct);
 8001116:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800111a:	4619      	mov	r1, r3
 800111c:	481a      	ldr	r0, [pc, #104]	; (8001188 <iopins_ini+0x2cc>)
 800111e:	f004 fa93 	bl	8005648 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(FRAM_CS_PORT,FRAM_CS,GPIO_PIN_SET);
 8001122:	2201      	movs	r2, #1
 8001124:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001128:	4817      	ldr	r0, [pc, #92]	; (8001188 <iopins_ini+0x2cc>)
 800112a:	f004 fc29 	bl	8005980 <HAL_GPIO_WritePin>

    FRAM_HOLD_PORT_RCC();
 800112e:	2300      	movs	r3, #0
 8001130:	61bb      	str	r3, [r7, #24]
 8001132:	4b11      	ldr	r3, [pc, #68]	; (8001178 <iopins_ini+0x2bc>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	4a10      	ldr	r2, [pc, #64]	; (8001178 <iopins_ini+0x2bc>)
 8001138:	f043 0304 	orr.w	r3, r3, #4
 800113c:	6313      	str	r3, [r2, #48]	; 0x30
 800113e:	4b0e      	ldr	r3, [pc, #56]	; (8001178 <iopins_ini+0x2bc>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	f003 0304 	and.w	r3, r3, #4
 8001146:	61bb      	str	r3, [r7, #24]
 8001148:	69bb      	ldr	r3, [r7, #24]
	GPIO_InitStruct.Pin = FRAM_HOLD;
 800114a:	2302      	movs	r3, #2
 800114c:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800114e:	2301      	movs	r3, #1
 8001150:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed =GPIO_SPEED_FREQ_VERY_HIGH;
 8001152:	2303      	movs	r3, #3
 8001154:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(FRAM_HOLD_PORT, &GPIO_InitStruct);
 8001156:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800115a:	4619      	mov	r1, r3
 800115c:	4809      	ldr	r0, [pc, #36]	; (8001184 <iopins_ini+0x2c8>)
 800115e:	f004 fa73 	bl	8005648 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(FRAM_HOLD_PORT,FRAM_HOLD,GPIO_PIN_SET);
 8001162:	2201      	movs	r2, #1
 8001164:	2102      	movs	r1, #2
 8001166:	4807      	ldr	r0, [pc, #28]	; (8001184 <iopins_ini+0x2c8>)
 8001168:	f004 fc0a 	bl	8005980 <HAL_GPIO_WritePin>

    FRAM_WP_PORT_RCC();
 800116c:	2300      	movs	r3, #0
 800116e:	617b      	str	r3, [r7, #20]
 8001170:	4b01      	ldr	r3, [pc, #4]	; (8001178 <iopins_ini+0x2bc>)
 8001172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001174:	e00a      	b.n	800118c <iopins_ini+0x2d0>
 8001176:	bf00      	nop
 8001178:	40023800 	.word	0x40023800
 800117c:	40020c00 	.word	0x40020c00
 8001180:	40020000 	.word	0x40020000
 8001184:	40020800 	.word	0x40020800
 8001188:	40020400 	.word	0x40020400
 800118c:	4a4b      	ldr	r2, [pc, #300]	; (80012bc <iopins_ini+0x400>)
 800118e:	f043 0304 	orr.w	r3, r3, #4
 8001192:	6313      	str	r3, [r2, #48]	; 0x30
 8001194:	4b49      	ldr	r3, [pc, #292]	; (80012bc <iopins_ini+0x400>)
 8001196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001198:	f003 0304 	and.w	r3, r3, #4
 800119c:	617b      	str	r3, [r7, #20]
 800119e:	697b      	ldr	r3, [r7, #20]
	GPIO_InitStruct.Pin = FRAM_WP;
 80011a0:	2301      	movs	r3, #1
 80011a2:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a4:	2301      	movs	r3, #1
 80011a6:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a8:	2300      	movs	r3, #0
 80011aa:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(FRAM_WP_PORT, &GPIO_InitStruct);
 80011ac:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80011b0:	4619      	mov	r1, r3
 80011b2:	4843      	ldr	r0, [pc, #268]	; (80012c0 <iopins_ini+0x404>)
 80011b4:	f004 fa48 	bl	8005648 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(FRAM_WP_PORT,FRAM_WP,GPIO_PIN_SET);
 80011b8:	2201      	movs	r2, #1
 80011ba:	2101      	movs	r1, #1
 80011bc:	4840      	ldr	r0, [pc, #256]	; (80012c0 <iopins_ini+0x404>)
 80011be:	f004 fbdf 	bl	8005980 <HAL_GPIO_WritePin>


    LED_DBG_PORT_RCC();
 80011c2:	2300      	movs	r3, #0
 80011c4:	613b      	str	r3, [r7, #16]
 80011c6:	4b3d      	ldr	r3, [pc, #244]	; (80012bc <iopins_ini+0x400>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	4a3c      	ldr	r2, [pc, #240]	; (80012bc <iopins_ini+0x400>)
 80011cc:	f043 0302 	orr.w	r3, r3, #2
 80011d0:	6313      	str	r3, [r2, #48]	; 0x30
 80011d2:	4b3a      	ldr	r3, [pc, #232]	; (80012bc <iopins_ini+0x400>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	f003 0302 	and.w	r3, r3, #2
 80011da:	613b      	str	r3, [r7, #16]
 80011dc:	693b      	ldr	r3, [r7, #16]
	GPIO_InitStruct.Pin = LED_DBG_1;
 80011de:	2308      	movs	r3, #8
 80011e0:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e2:	2301      	movs	r3, #1
 80011e4:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e6:	2300      	movs	r3, #0
 80011e8:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(LED_DBG_PORT, &GPIO_InitStruct);
 80011ea:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80011ee:	4619      	mov	r1, r3
 80011f0:	4834      	ldr	r0, [pc, #208]	; (80012c4 <iopins_ini+0x408>)
 80011f2:	f004 fa29 	bl	8005648 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(LED_DBG_PORT,LED_DBG_1,GPIO_PIN_SET);
 80011f6:	2201      	movs	r2, #1
 80011f8:	2108      	movs	r1, #8
 80011fa:	4832      	ldr	r0, [pc, #200]	; (80012c4 <iopins_ini+0x408>)
 80011fc:	f004 fbc0 	bl	8005980 <HAL_GPIO_WritePin>


    BUTTON_0_PORT_RCC();
 8001200:	2300      	movs	r3, #0
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	4b2d      	ldr	r3, [pc, #180]	; (80012bc <iopins_ini+0x400>)
 8001206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001208:	4a2c      	ldr	r2, [pc, #176]	; (80012bc <iopins_ini+0x400>)
 800120a:	f043 0301 	orr.w	r3, r3, #1
 800120e:	6313      	str	r3, [r2, #48]	; 0x30
 8001210:	4b2a      	ldr	r3, [pc, #168]	; (80012bc <iopins_ini+0x400>)
 8001212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001214:	f003 0301 	and.w	r3, r3, #1
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	68fb      	ldr	r3, [r7, #12]
	GPIO_InitStruct.Pin = BUTTON_0;
 800121c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001220:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001222:	2300      	movs	r3, #0
 8001224:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Pull= GPIO_NOPULL;
 8001226:	2300      	movs	r3, #0
 8001228:	657b      	str	r3, [r7, #84]	; 0x54
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122a:	2300      	movs	r3, #0
 800122c:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(BUTTON_0_PORT, &GPIO_InitStruct);
 800122e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001232:	4619      	mov	r1, r3
 8001234:	4824      	ldr	r0, [pc, #144]	; (80012c8 <iopins_ini+0x40c>)
 8001236:	f004 fa07 	bl	8005648 <HAL_GPIO_Init>

    BUTTON_1_PORT_RCC();
 800123a:	2300      	movs	r3, #0
 800123c:	60bb      	str	r3, [r7, #8]
 800123e:	4b1f      	ldr	r3, [pc, #124]	; (80012bc <iopins_ini+0x400>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	4a1e      	ldr	r2, [pc, #120]	; (80012bc <iopins_ini+0x400>)
 8001244:	f043 0304 	orr.w	r3, r3, #4
 8001248:	6313      	str	r3, [r2, #48]	; 0x30
 800124a:	4b1c      	ldr	r3, [pc, #112]	; (80012bc <iopins_ini+0x400>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	f003 0304 	and.w	r3, r3, #4
 8001252:	60bb      	str	r3, [r7, #8]
 8001254:	68bb      	ldr	r3, [r7, #8]
	GPIO_InitStruct.Pin = BUTTON_1;
 8001256:	f44f 7300 	mov.w	r3, #512	; 0x200
 800125a:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800125c:	2300      	movs	r3, #0
 800125e:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Pull= GPIO_NOPULL;
 8001260:	2300      	movs	r3, #0
 8001262:	657b      	str	r3, [r7, #84]	; 0x54
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001264:	2300      	movs	r3, #0
 8001266:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(BUTTON_1_PORT, &GPIO_InitStruct);
 8001268:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800126c:	4619      	mov	r1, r3
 800126e:	4814      	ldr	r0, [pc, #80]	; (80012c0 <iopins_ini+0x404>)
 8001270:	f004 f9ea 	bl	8005648 <HAL_GPIO_Init>


    TOUCH_RESET_PORT_RCC();
 8001274:	2300      	movs	r3, #0
 8001276:	607b      	str	r3, [r7, #4]
 8001278:	4b10      	ldr	r3, [pc, #64]	; (80012bc <iopins_ini+0x400>)
 800127a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127c:	4a0f      	ldr	r2, [pc, #60]	; (80012bc <iopins_ini+0x400>)
 800127e:	f043 0302 	orr.w	r3, r3, #2
 8001282:	6313      	str	r3, [r2, #48]	; 0x30
 8001284:	4b0d      	ldr	r3, [pc, #52]	; (80012bc <iopins_ini+0x400>)
 8001286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001288:	f003 0302 	and.w	r3, r3, #2
 800128c:	607b      	str	r3, [r7, #4]
 800128e:	687b      	ldr	r3, [r7, #4]
	GPIO_InitStruct.Pin = TOUCH_RESET;
 8001290:	2320      	movs	r3, #32
 8001292:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001294:	2301      	movs	r3, #1
 8001296:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001298:	2300      	movs	r3, #0
 800129a:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(TOUCH_RESET_PORT, &GPIO_InitStruct);
 800129c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80012a0:	4619      	mov	r1, r3
 80012a2:	4808      	ldr	r0, [pc, #32]	; (80012c4 <iopins_ini+0x408>)
 80012a4:	f004 f9d0 	bl	8005648 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(TOUCH_RESET_PORT,TOUCH_RESET,GPIO_PIN_SET);
 80012a8:	2201      	movs	r2, #1
 80012aa:	2120      	movs	r1, #32
 80012ac:	4805      	ldr	r0, [pc, #20]	; (80012c4 <iopins_ini+0x408>)
 80012ae:	f004 fb67 	bl	8005980 <HAL_GPIO_WritePin>
}
 80012b2:	bf00      	nop
 80012b4:	3760      	adds	r7, #96	; 0x60
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40023800 	.word	0x40023800
 80012c0:	40020800 	.word	0x40020800
 80012c4:	40020400 	.word	0x40020400
 80012c8:	40020000 	.word	0x40020000

080012cc <initialize_ili9488>:
static void initialize_ili9488()
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af02      	add	r7, sp, #8
	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_RESET);
 80012d2:	2200      	movs	r2, #0
 80012d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012d8:	4838      	ldr	r0, [pc, #224]	; (80013bc <initialize_ili9488+0xf0>)
 80012da:	f004 fb51 	bl	8005980 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_RESET);
 80012de:	2200      	movs	r2, #0
 80012e0:	2180      	movs	r1, #128	; 0x80
 80012e2:	4836      	ldr	r0, [pc, #216]	; (80013bc <initialize_ili9488+0xf0>)
 80012e4:	f004 fb4c 	bl	8005980 <HAL_GPIO_WritePin>
	TFT_REG=0x0011;
 80012e8:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80012ec:	2211      	movs	r2, #17
 80012ee:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_SET);
 80012f0:	2201      	movs	r2, #1
 80012f2:	2180      	movs	r1, #128	; 0x80
 80012f4:	4831      	ldr	r0, [pc, #196]	; (80013bc <initialize_ili9488+0xf0>)
 80012f6:	f004 fb43 	bl	8005980 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_RESET);
 80012fa:	2200      	movs	r2, #0
 80012fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001300:	482e      	ldr	r0, [pc, #184]	; (80013bc <initialize_ili9488+0xf0>)
 8001302:	f004 fb3d 	bl	8005980 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS, GPIO_PIN_RESET);
 8001306:	2200      	movs	r2, #0
 8001308:	2180      	movs	r1, #128	; 0x80
 800130a:	482c      	ldr	r0, [pc, #176]	; (80013bc <initialize_ili9488+0xf0>)
 800130c:	f004 fb38 	bl	8005980 <HAL_GPIO_WritePin>
	TFT_REG=0x0029;
 8001310:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8001314:	2229      	movs	r2, #41	; 0x29
 8001316:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS, GPIO_PIN_SET);
 8001318:	2201      	movs	r2, #1
 800131a:	2180      	movs	r1, #128	; 0x80
 800131c:	4827      	ldr	r0, [pc, #156]	; (80013bc <initialize_ili9488+0xf0>)
 800131e:	f004 fb2f 	bl	8005980 <HAL_GPIO_WritePin>


	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_RESET);
 8001322:	2200      	movs	r2, #0
 8001324:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001328:	4824      	ldr	r0, [pc, #144]	; (80013bc <initialize_ili9488+0xf0>)
 800132a:	f004 fb29 	bl	8005980 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_RESET);
 800132e:	2200      	movs	r2, #0
 8001330:	2180      	movs	r1, #128	; 0x80
 8001332:	4822      	ldr	r0, [pc, #136]	; (80013bc <initialize_ili9488+0xf0>)
 8001334:	f004 fb24 	bl	8005980 <HAL_GPIO_WritePin>
	TFT_REG=0x003A;
 8001338:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800133c:	223a      	movs	r2, #58	; 0x3a
 800133e:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_SET);
 8001340:	2201      	movs	r2, #1
 8001342:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001346:	481d      	ldr	r0, [pc, #116]	; (80013bc <initialize_ili9488+0xf0>)
 8001348:	f004 fb1a 	bl	8005980 <HAL_GPIO_WritePin>
	TFT_REG=0x0055;
 800134c:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8001350:	2255      	movs	r2, #85	; 0x55
 8001352:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS, GPIO_PIN_RESET);
 8001354:	2200      	movs	r2, #0
 8001356:	2180      	movs	r1, #128	; 0x80
 8001358:	4818      	ldr	r0, [pc, #96]	; (80013bc <initialize_ili9488+0xf0>)
 800135a:	f004 fb11 	bl	8005980 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_RESET);
 800135e:	2200      	movs	r2, #0
 8001360:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001364:	4815      	ldr	r0, [pc, #84]	; (80013bc <initialize_ili9488+0xf0>)
 8001366:	f004 fb0b 	bl	8005980 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_RESET);
 800136a:	2200      	movs	r2, #0
 800136c:	2180      	movs	r1, #128	; 0x80
 800136e:	4813      	ldr	r0, [pc, #76]	; (80013bc <initialize_ili9488+0xf0>)
 8001370:	f004 fb06 	bl	8005980 <HAL_GPIO_WritePin>
	TFT_REG=0x0036;
 8001374:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8001378:	2236      	movs	r2, #54	; 0x36
 800137a:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_SET);
 800137c:	2201      	movs	r2, #1
 800137e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001382:	480e      	ldr	r0, [pc, #56]	; (80013bc <initialize_ili9488+0xf0>)
 8001384:	f004 fafc 	bl	8005980 <HAL_GPIO_WritePin>
	TFT_REG=0x00E8;
 8001388:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800138c:	22e8      	movs	r2, #232	; 0xe8
 800138e:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_RESET);
 8001390:	2200      	movs	r2, #0
 8001392:	2180      	movs	r1, #128	; 0x80
 8001394:	4809      	ldr	r0, [pc, #36]	; (80013bc <initialize_ili9488+0xf0>)
 8001396:	f004 faf3 	bl	8005980 <HAL_GPIO_WritePin>

	delay_ms(100);
 800139a:	2064      	movs	r0, #100	; 0x64
 800139c:	f000 f810 	bl	80013c0 <delay_ms>
	LCD_fillRect(0,0,LCD_PIXEL_WIDTH,LCD_PIXEL_HEIGHT,ORANGE);
 80013a0:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80013a4:	9300      	str	r3, [sp, #0]
 80013a6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80013aa:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80013ae:	2100      	movs	r1, #0
 80013b0:	2000      	movs	r0, #0
 80013b2:	f7ff fc03 	bl	8000bbc <LCD_fillRect>
}
 80013b6:	bf00      	nop
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	40020c00 	.word	0x40020c00

080013c0 <delay_ms>:
	{
		TFT_REG=data[i];
	}
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_SET);
}
static void delay_ms(__IO uint32_t nCount1) {
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
	__IO uint32_t nCount=nCount1*23666;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f645 4272 	movw	r2, #23666	; 0x5c72
 80013ce:	fb02 f303 	mul.w	r3, r2, r3
 80013d2:	60fb      	str	r3, [r7, #12]
	while(nCount--) {
 80013d4:	bf00      	nop
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	1e5a      	subs	r2, r3, #1
 80013da:	60fa      	str	r2, [r7, #12]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d1fa      	bne.n	80013d6 <delay_ms+0x16>
  }
}
 80013e0:	bf00      	nop
 80013e2:	bf00      	nop
 80013e4:	3714      	adds	r7, #20
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
	...

080013f0 <touch_init>:
/*----------------------------------------------Public function-----------------------------------------------------*/
// Initialize touch screen
void set_page(uint8_t page){active_page = page;}
void set_layer(uint8_t layer){active_layer = layer;}
void touch_init(I2C_HandleTypeDef def)
{
 80013f0:	b084      	sub	sp, #16
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b084      	sub	sp, #16
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	f107 0c18 	add.w	ip, r7, #24
 80013fc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	hi2c1_touch = def;
 8001400:	4b66      	ldr	r3, [pc, #408]	; (800159c <touch_init+0x1ac>)
 8001402:	4618      	mov	r0, r3
 8001404:	f107 0318 	add.w	r3, r7, #24
 8001408:	2254      	movs	r2, #84	; 0x54
 800140a:	4619      	mov	r1, r3
 800140c:	f008 f838 	bl	8009480 <memcpy>
	touch_write_register(0x0E,0xC000);
 8001410:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001414:	200e      	movs	r0, #14
 8001416:	f000 fa95 	bl	8001944 <touch_write_register>
	touch_write_control(0x80);
 800141a:	2080      	movs	r0, #128	; 0x80
 800141c:	f000 fa7a 	bl	8001914 <touch_write_control>
	for(int p = 0;p <MAX_NUM_PAGES; p++)
 8001420:	2300      	movs	r3, #0
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	e093      	b.n	800154e <touch_init+0x15e>
	{
		for(int l = 0;l <MAX_NUM_LAYERS; l++)
 8001426:	2300      	movs	r3, #0
 8001428:	60bb      	str	r3, [r7, #8]
 800142a:	e089      	b.n	8001540 <touch_init+0x150>
		{

			for(int i = 0;i <MAX_NUM_ELEMENTS; i++)
 800142c:	2300      	movs	r3, #0
 800142e:	607b      	str	r3, [r7, #4]
 8001430:	e07f      	b.n	8001532 <touch_init+0x142>
			{
				touch_elements_register[p][l][i].x = 0;
 8001432:	485b      	ldr	r0, [pc, #364]	; (80015a0 <touch_init+0x1b0>)
 8001434:	68ba      	ldr	r2, [r7, #8]
 8001436:	68f9      	ldr	r1, [r7, #12]
 8001438:	4613      	mov	r3, r2
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	4413      	add	r3, r2
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	2264      	movs	r2, #100	; 0x64
 8001442:	fb01 f202 	mul.w	r2, r1, r2
 8001446:	441a      	add	r2, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	4413      	add	r3, r2
 800144c:	011b      	lsls	r3, r3, #4
 800144e:	4403      	add	r3, r0
 8001450:	2200      	movs	r2, #0
 8001452:	801a      	strh	r2, [r3, #0]
				touch_elements_register[p][l][i].x1 = 0;
 8001454:	4852      	ldr	r0, [pc, #328]	; (80015a0 <touch_init+0x1b0>)
 8001456:	68ba      	ldr	r2, [r7, #8]
 8001458:	68f9      	ldr	r1, [r7, #12]
 800145a:	4613      	mov	r3, r2
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	4413      	add	r3, r2
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	2264      	movs	r2, #100	; 0x64
 8001464:	fb01 f202 	mul.w	r2, r1, r2
 8001468:	441a      	add	r2, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4413      	add	r3, r2
 800146e:	011b      	lsls	r3, r3, #4
 8001470:	4403      	add	r3, r0
 8001472:	3304      	adds	r3, #4
 8001474:	2200      	movs	r2, #0
 8001476:	801a      	strh	r2, [r3, #0]
				touch_elements_register[p][l][i].y = 0;
 8001478:	4849      	ldr	r0, [pc, #292]	; (80015a0 <touch_init+0x1b0>)
 800147a:	68ba      	ldr	r2, [r7, #8]
 800147c:	68f9      	ldr	r1, [r7, #12]
 800147e:	4613      	mov	r3, r2
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	4413      	add	r3, r2
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	2264      	movs	r2, #100	; 0x64
 8001488:	fb01 f202 	mul.w	r2, r1, r2
 800148c:	441a      	add	r2, r3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4413      	add	r3, r2
 8001492:	011b      	lsls	r3, r3, #4
 8001494:	4403      	add	r3, r0
 8001496:	3302      	adds	r3, #2
 8001498:	2200      	movs	r2, #0
 800149a:	801a      	strh	r2, [r3, #0]
				touch_elements_register[p][l][i].y1 = 0;
 800149c:	4840      	ldr	r0, [pc, #256]	; (80015a0 <touch_init+0x1b0>)
 800149e:	68ba      	ldr	r2, [r7, #8]
 80014a0:	68f9      	ldr	r1, [r7, #12]
 80014a2:	4613      	mov	r3, r2
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	4413      	add	r3, r2
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	2264      	movs	r2, #100	; 0x64
 80014ac:	fb01 f202 	mul.w	r2, r1, r2
 80014b0:	441a      	add	r2, r3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4413      	add	r3, r2
 80014b6:	011b      	lsls	r3, r3, #4
 80014b8:	4403      	add	r3, r0
 80014ba:	3306      	adds	r3, #6
 80014bc:	2200      	movs	r2, #0
 80014be:	801a      	strh	r2, [r3, #0]
				touch_elements_register[p][l][i].element_type = 0;
 80014c0:	4837      	ldr	r0, [pc, #220]	; (80015a0 <touch_init+0x1b0>)
 80014c2:	68ba      	ldr	r2, [r7, #8]
 80014c4:	68f9      	ldr	r1, [r7, #12]
 80014c6:	4613      	mov	r3, r2
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	4413      	add	r3, r2
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	2264      	movs	r2, #100	; 0x64
 80014d0:	fb01 f202 	mul.w	r2, r1, r2
 80014d4:	441a      	add	r2, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4413      	add	r3, r2
 80014da:	011b      	lsls	r3, r3, #4
 80014dc:	4403      	add	r3, r0
 80014de:	3308      	adds	r3, #8
 80014e0:	2200      	movs	r2, #0
 80014e2:	701a      	strb	r2, [r3, #0]
				touch_elements_register[p][l][i].isAlive = 0;
 80014e4:	482e      	ldr	r0, [pc, #184]	; (80015a0 <touch_init+0x1b0>)
 80014e6:	68ba      	ldr	r2, [r7, #8]
 80014e8:	68f9      	ldr	r1, [r7, #12]
 80014ea:	4613      	mov	r3, r2
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	4413      	add	r3, r2
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	2264      	movs	r2, #100	; 0x64
 80014f4:	fb01 f202 	mul.w	r2, r1, r2
 80014f8:	441a      	add	r2, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4413      	add	r3, r2
 80014fe:	011b      	lsls	r3, r3, #4
 8001500:	4403      	add	r3, r0
 8001502:	3309      	adds	r3, #9
 8001504:	2200      	movs	r2, #0
 8001506:	701a      	strb	r2, [r3, #0]
				touch_elements_register[p][l][i].element_pointer = 0;
 8001508:	4825      	ldr	r0, [pc, #148]	; (80015a0 <touch_init+0x1b0>)
 800150a:	68ba      	ldr	r2, [r7, #8]
 800150c:	68f9      	ldr	r1, [r7, #12]
 800150e:	4613      	mov	r3, r2
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	4413      	add	r3, r2
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	2264      	movs	r2, #100	; 0x64
 8001518:	fb01 f202 	mul.w	r2, r1, r2
 800151c:	441a      	add	r2, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4413      	add	r3, r2
 8001522:	011b      	lsls	r3, r3, #4
 8001524:	4403      	add	r3, r0
 8001526:	330c      	adds	r3, #12
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
			for(int i = 0;i <MAX_NUM_ELEMENTS; i++)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	3301      	adds	r3, #1
 8001530:	607b      	str	r3, [r7, #4]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2b13      	cmp	r3, #19
 8001536:	f77f af7c 	ble.w	8001432 <touch_init+0x42>
		for(int l = 0;l <MAX_NUM_LAYERS; l++)
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	3301      	adds	r3, #1
 800153e:	60bb      	str	r3, [r7, #8]
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	2b04      	cmp	r3, #4
 8001544:	f77f af72 	ble.w	800142c <touch_init+0x3c>
	for(int p = 0;p <MAX_NUM_PAGES; p++)
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	3301      	adds	r3, #1
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	2b04      	cmp	r3, #4
 8001552:	f77f af68 	ble.w	8001426 <touch_init+0x36>
			}
		}
	}
	pressed_element.x = 0;
 8001556:	4b13      	ldr	r3, [pc, #76]	; (80015a4 <touch_init+0x1b4>)
 8001558:	2200      	movs	r2, #0
 800155a:	801a      	strh	r2, [r3, #0]
	pressed_element.x1 = 0;
 800155c:	4b11      	ldr	r3, [pc, #68]	; (80015a4 <touch_init+0x1b4>)
 800155e:	2200      	movs	r2, #0
 8001560:	809a      	strh	r2, [r3, #4]
	pressed_element.y = 0;
 8001562:	4b10      	ldr	r3, [pc, #64]	; (80015a4 <touch_init+0x1b4>)
 8001564:	2200      	movs	r2, #0
 8001566:	805a      	strh	r2, [r3, #2]
	pressed_element.y1 = 0;
 8001568:	4b0e      	ldr	r3, [pc, #56]	; (80015a4 <touch_init+0x1b4>)
 800156a:	2200      	movs	r2, #0
 800156c:	80da      	strh	r2, [r3, #6]
	pressed_element.element_type = 0;
 800156e:	4b0d      	ldr	r3, [pc, #52]	; (80015a4 <touch_init+0x1b4>)
 8001570:	2200      	movs	r2, #0
 8001572:	721a      	strb	r2, [r3, #8]
	pressed_element.element_pointer = 0;
 8001574:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <touch_init+0x1b4>)
 8001576:	2200      	movs	r2, #0
 8001578:	60da      	str	r2, [r3, #12]
	pressed_element.isAlive = 0;
 800157a:	4b0a      	ldr	r3, [pc, #40]	; (80015a4 <touch_init+0x1b4>)
 800157c:	2200      	movs	r2, #0
 800157e:	725a      	strb	r2, [r3, #9]
	active_layer = 0;
 8001580:	4b09      	ldr	r3, [pc, #36]	; (80015a8 <touch_init+0x1b8>)
 8001582:	2200      	movs	r2, #0
 8001584:	701a      	strb	r2, [r3, #0]
	active_page = 0;
 8001586:	4b09      	ldr	r3, [pc, #36]	; (80015ac <touch_init+0x1bc>)
 8001588:	2200      	movs	r2, #0
 800158a:	701a      	strb	r2, [r3, #0]
}
 800158c:	bf00      	nop
 800158e:	3710      	adds	r7, #16
 8001590:	46bd      	mov	sp, r7
 8001592:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001596:	b004      	add	sp, #16
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	200000a4 	.word	0x200000a4
 80015a0:	2000011c 	.word	0x2000011c
 80015a4:	20000108 	.word	0x20000108
 80015a8:	20000119 	.word	0x20000119
 80015ac:	20000118 	.word	0x20000118

080015b0 <touch_reset>:
// Reset touch screen IC module
void touch_reset()
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
 	HAL_GPIO_WritePin(TOUCH_RESET_PORT,TOUCH_RESET,GPIO_PIN_RESET);
 80015b4:	2200      	movs	r2, #0
 80015b6:	2120      	movs	r1, #32
 80015b8:	4807      	ldr	r0, [pc, #28]	; (80015d8 <touch_reset+0x28>)
 80015ba:	f004 f9e1 	bl	8005980 <HAL_GPIO_WritePin>
 	delay_ms(10);
 80015be:	200a      	movs	r0, #10
 80015c0:	f000 fad0 	bl	8001b64 <delay_ms>
 	HAL_GPIO_WritePin(TOUCH_RESET_PORT,TOUCH_RESET,GPIO_PIN_SET);
 80015c4:	2201      	movs	r2, #1
 80015c6:	2120      	movs	r1, #32
 80015c8:	4803      	ldr	r0, [pc, #12]	; (80015d8 <touch_reset+0x28>)
 80015ca:	f004 f9d9 	bl	8005980 <HAL_GPIO_WritePin>
 	delay_ms(50);
 80015ce:	2032      	movs	r0, #50	; 0x32
 80015d0:	f000 fac8 	bl	8001b64 <delay_ms>
}
 80015d4:	bf00      	nop
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40020400 	.word	0x40020400

080015dc <touch_periodic_process>:
{
	return pressed_element;
}
// After each call identifies if the touch was pressed and if TRUEm then identify the element
void touch_periodic_process()
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0

	if(touch.pressed==1)
 80015e0:	4b1d      	ldr	r3, [pc, #116]	; (8001658 <touch_periodic_process+0x7c>)
 80015e2:	891b      	ldrh	r3, [r3, #8]
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d135      	bne.n	8001654 <touch_periodic_process+0x78>
	{
		touch.pressed=0;
 80015e8:	4b1b      	ldr	r3, [pc, #108]	; (8001658 <touch_periodic_process+0x7c>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	811a      	strh	r2, [r3, #8]

		touch.x=touch_read(0x00);
 80015ee:	2000      	movs	r0, #0
 80015f0:	f000 f9d4 	bl	800199c <touch_read>
 80015f4:	4603      	mov	r3, r0
 80015f6:	461a      	mov	r2, r3
 80015f8:	4b17      	ldr	r3, [pc, #92]	; (8001658 <touch_periodic_process+0x7c>)
 80015fa:	801a      	strh	r2, [r3, #0]
		touch.x1=touch_read(0x01);
 80015fc:	2001      	movs	r0, #1
 80015fe:	f000 f9cd 	bl	800199c <touch_read>
 8001602:	4603      	mov	r3, r0
 8001604:	461a      	mov	r2, r3
 8001606:	4b14      	ldr	r3, [pc, #80]	; (8001658 <touch_periodic_process+0x7c>)
 8001608:	809a      	strh	r2, [r3, #4]
		touch.y=touch_read(0x02);
 800160a:	2002      	movs	r0, #2
 800160c:	f000 f9c6 	bl	800199c <touch_read>
 8001610:	4603      	mov	r3, r0
 8001612:	461a      	mov	r2, r3
 8001614:	4b10      	ldr	r3, [pc, #64]	; (8001658 <touch_periodic_process+0x7c>)
 8001616:	805a      	strh	r2, [r3, #2]
		touch.y1=touch_read(0x03);
 8001618:	2003      	movs	r0, #3
 800161a:	f000 f9bf 	bl	800199c <touch_read>
 800161e:	4603      	mov	r3, r0
 8001620:	461a      	mov	r2, r3
 8001622:	4b0d      	ldr	r3, [pc, #52]	; (8001658 <touch_periodic_process+0x7c>)
 8001624:	80da      	strh	r2, [r3, #6]
		printf("TOUCH x %d\n\r", touch.x);
		printf("TOUCH x1 %d\n\r", touch.x1);
		printf("TOUCH y %d\n\r", touch.y);
		printf("TOUCH y1 %d\n\r", touch.y1);
#endif
		touch.y=touch.x1;
 8001626:	4b0c      	ldr	r3, [pc, #48]	; (8001658 <touch_periodic_process+0x7c>)
 8001628:	889a      	ldrh	r2, [r3, #4]
 800162a:	4b0b      	ldr	r3, [pc, #44]	; (8001658 <touch_periodic_process+0x7c>)
 800162c:	805a      	strh	r2, [r3, #2]
		touch.x=1024-touch.y1;
 800162e:	4b0a      	ldr	r3, [pc, #40]	; (8001658 <touch_periodic_process+0x7c>)
 8001630:	88db      	ldrh	r3, [r3, #6]
 8001632:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8001636:	b29a      	uxth	r2, r3
 8001638:	4b07      	ldr	r3, [pc, #28]	; (8001658 <touch_periodic_process+0x7c>)
 800163a:	801a      	strh	r2, [r3, #0]
#if DEBUG_TOUCH == 1
		printf("TOUCH Y reverted %d\n\r", touch.y);
		printf("TOUCH X reverted %d\n\r", touch.x);
#endif
		if(validate_touch_coordinates()==1)
 800163c:	f000 f9e0 	bl	8001a00 <validate_touch_coordinates>
 8001640:	4603      	mov	r3, r0
 8001642:	2b01      	cmp	r3, #1
 8001644:	d103      	bne.n	800164e <touch_periodic_process+0x72>
		{
#if DEBUG_TOUCH == 1
			printf("TOUCH = X: %d,Y: %d\n\r",touch.x,touch.y);
#endif
			 touch_get_pressed_element(touch);
 8001646:	4b04      	ldr	r3, [pc, #16]	; (8001658 <touch_periodic_process+0x7c>)
 8001648:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800164a:	f000 f807 	bl	800165c <touch_get_pressed_element>
		}
		touch_write_control(0x80);
 800164e:	2080      	movs	r0, #128	; 0x80
 8001650:	f000 f960 	bl	8001914 <touch_write_control>
	}
}
 8001654:	bf00      	nop
 8001656:	bd80      	pop	{r7, pc}
 8001658:	200000f8 	.word	0x200000f8

0800165c <touch_get_pressed_element>:
// External interrupt callback function. Take an action when touchscreen was pressed
static void touch_get_pressed_element()
{
 800165c:	b590      	push	{r4, r7, lr}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
	uint16_t x0,x1,y1,y0;
	for(int i = 0; i<MAX_NUM_ELEMENTS;i++)
 8001662:	2300      	movs	r3, #0
 8001664:	607b      	str	r3, [r7, #4]
 8001666:	e07d      	b.n	8001764 <touch_get_pressed_element+0x108>
	{

		if((touch.x >= touch_elements_register[active_page][active_layer][i].x )
 8001668:	4b42      	ldr	r3, [pc, #264]	; (8001774 <touch_get_pressed_element+0x118>)
 800166a:	881a      	ldrh	r2, [r3, #0]
 800166c:	4b42      	ldr	r3, [pc, #264]	; (8001778 <touch_get_pressed_element+0x11c>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	461c      	mov	r4, r3
 8001672:	4b42      	ldr	r3, [pc, #264]	; (800177c <touch_get_pressed_element+0x120>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	4619      	mov	r1, r3
 8001678:	4841      	ldr	r0, [pc, #260]	; (8001780 <touch_get_pressed_element+0x124>)
 800167a:	460b      	mov	r3, r1
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	440b      	add	r3, r1
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	2164      	movs	r1, #100	; 0x64
 8001684:	fb04 f101 	mul.w	r1, r4, r1
 8001688:	4419      	add	r1, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	440b      	add	r3, r1
 800168e:	011b      	lsls	r3, r3, #4
 8001690:	4403      	add	r3, r0
 8001692:	881b      	ldrh	r3, [r3, #0]
 8001694:	429a      	cmp	r2, r3
 8001696:	d362      	bcc.n	800175e <touch_get_pressed_element+0x102>
		&& (touch.x <= touch_elements_register[active_page][active_layer][i].x1)
 8001698:	4b36      	ldr	r3, [pc, #216]	; (8001774 <touch_get_pressed_element+0x118>)
 800169a:	881a      	ldrh	r2, [r3, #0]
 800169c:	4b36      	ldr	r3, [pc, #216]	; (8001778 <touch_get_pressed_element+0x11c>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	461c      	mov	r4, r3
 80016a2:	4b36      	ldr	r3, [pc, #216]	; (800177c <touch_get_pressed_element+0x120>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	4619      	mov	r1, r3
 80016a8:	4835      	ldr	r0, [pc, #212]	; (8001780 <touch_get_pressed_element+0x124>)
 80016aa:	460b      	mov	r3, r1
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	440b      	add	r3, r1
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	2164      	movs	r1, #100	; 0x64
 80016b4:	fb04 f101 	mul.w	r1, r4, r1
 80016b8:	4419      	add	r1, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	440b      	add	r3, r1
 80016be:	011b      	lsls	r3, r3, #4
 80016c0:	4403      	add	r3, r0
 80016c2:	3304      	adds	r3, #4
 80016c4:	881b      	ldrh	r3, [r3, #0]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d849      	bhi.n	800175e <touch_get_pressed_element+0x102>
		&&(touch.y1 >= touch_elements_register[active_page][active_layer][i].y)
 80016ca:	4b2a      	ldr	r3, [pc, #168]	; (8001774 <touch_get_pressed_element+0x118>)
 80016cc:	88da      	ldrh	r2, [r3, #6]
 80016ce:	4b2a      	ldr	r3, [pc, #168]	; (8001778 <touch_get_pressed_element+0x11c>)
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	461c      	mov	r4, r3
 80016d4:	4b29      	ldr	r3, [pc, #164]	; (800177c <touch_get_pressed_element+0x120>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	4619      	mov	r1, r3
 80016da:	4829      	ldr	r0, [pc, #164]	; (8001780 <touch_get_pressed_element+0x124>)
 80016dc:	460b      	mov	r3, r1
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	440b      	add	r3, r1
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	2164      	movs	r1, #100	; 0x64
 80016e6:	fb04 f101 	mul.w	r1, r4, r1
 80016ea:	4419      	add	r1, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	440b      	add	r3, r1
 80016f0:	011b      	lsls	r3, r3, #4
 80016f2:	4403      	add	r3, r0
 80016f4:	3302      	adds	r3, #2
 80016f6:	881b      	ldrh	r3, [r3, #0]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d330      	bcc.n	800175e <touch_get_pressed_element+0x102>
		&&(touch.y <= touch_elements_register[active_page][active_layer][i].y1))
 80016fc:	4b1d      	ldr	r3, [pc, #116]	; (8001774 <touch_get_pressed_element+0x118>)
 80016fe:	885a      	ldrh	r2, [r3, #2]
 8001700:	4b1d      	ldr	r3, [pc, #116]	; (8001778 <touch_get_pressed_element+0x11c>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	461c      	mov	r4, r3
 8001706:	4b1d      	ldr	r3, [pc, #116]	; (800177c <touch_get_pressed_element+0x120>)
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	4619      	mov	r1, r3
 800170c:	481c      	ldr	r0, [pc, #112]	; (8001780 <touch_get_pressed_element+0x124>)
 800170e:	460b      	mov	r3, r1
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	440b      	add	r3, r1
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	2164      	movs	r1, #100	; 0x64
 8001718:	fb04 f101 	mul.w	r1, r4, r1
 800171c:	4419      	add	r1, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	440b      	add	r3, r1
 8001722:	011b      	lsls	r3, r3, #4
 8001724:	4403      	add	r3, r0
 8001726:	3306      	adds	r3, #6
 8001728:	881b      	ldrh	r3, [r3, #0]
 800172a:	429a      	cmp	r2, r3
 800172c:	d817      	bhi.n	800175e <touch_get_pressed_element+0x102>
			x1 = touch_elements_register[active_page][active_layer][i].x1;
			y0 = touch_elements_register[active_page][active_layer][i].y;
			y1 = touch_elements_register[active_page][active_layer][i].y1;
			printf(" GETTING PRESSED ELEMENT \n\r X: %d\n\r X1: %d\n\r Y: %d\n\r Y1: %d\n\r",x0,x1,y0,y1);
#endif
			memcpy(&pressed_element,&touch_elements_register[active_page][active_layer][i],sizeof(struct element_t));
 800172e:	4b12      	ldr	r3, [pc, #72]	; (8001778 <touch_get_pressed_element+0x11c>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	4619      	mov	r1, r3
 8001734:	4b11      	ldr	r3, [pc, #68]	; (800177c <touch_get_pressed_element+0x120>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	461a      	mov	r2, r3
 800173a:	4613      	mov	r3, r2
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	4413      	add	r3, r2
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	2264      	movs	r2, #100	; 0x64
 8001744:	fb01 f202 	mul.w	r2, r1, r2
 8001748:	441a      	add	r2, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4413      	add	r3, r2
 800174e:	011b      	lsls	r3, r3, #4
 8001750:	4a0b      	ldr	r2, [pc, #44]	; (8001780 <touch_get_pressed_element+0x124>)
 8001752:	4413      	add	r3, r2
 8001754:	2210      	movs	r2, #16
 8001756:	4619      	mov	r1, r3
 8001758:	480a      	ldr	r0, [pc, #40]	; (8001784 <touch_get_pressed_element+0x128>)
 800175a:	f007 fe91 	bl	8009480 <memcpy>
	for(int i = 0; i<MAX_NUM_ELEMENTS;i++)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	3301      	adds	r3, #1
 8001762:	607b      	str	r3, [r7, #4]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2b13      	cmp	r3, #19
 8001768:	f77f af7e 	ble.w	8001668 <touch_get_pressed_element+0xc>

#endif
		}
	}

	return touch_elements_register[-1];
 800176c:	bf00      	nop
}
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	bd90      	pop	{r4, r7, pc}
 8001774:	200000f8 	.word	0x200000f8
 8001778:	20000118 	.word	0x20000118
 800177c:	20000119 	.word	0x20000119
 8001780:	2000011c 	.word	0x2000011c
 8001784:	20000108 	.word	0x20000108

08001788 <touch_register_element>:
// Register element to the touch elements array.
uint8_t touch_register_element(uint8_t page,uint8_t layer,uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1,uint16_t element_type, uint32_t element_pointer)
{
 8001788:	b490      	push	{r4, r7}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	4604      	mov	r4, r0
 8001790:	4608      	mov	r0, r1
 8001792:	4611      	mov	r1, r2
 8001794:	461a      	mov	r2, r3
 8001796:	4623      	mov	r3, r4
 8001798:	71fb      	strb	r3, [r7, #7]
 800179a:	4603      	mov	r3, r0
 800179c:	71bb      	strb	r3, [r7, #6]
 800179e:	460b      	mov	r3, r1
 80017a0:	80bb      	strh	r3, [r7, #4]
 80017a2:	4613      	mov	r3, r2
 80017a4:	807b      	strh	r3, [r7, #2]
	for(int i = 0;i<MAX_NUM_ELEMENTS;i++)
 80017a6:	2300      	movs	r3, #0
 80017a8:	60fb      	str	r3, [r7, #12]
 80017aa:	e097      	b.n	80018dc <touch_register_element+0x154>
	{
		if(touch_elements_register[page][layer][i].isAlive == 0)
 80017ac:	79f9      	ldrb	r1, [r7, #7]
 80017ae:	79ba      	ldrb	r2, [r7, #6]
 80017b0:	484f      	ldr	r0, [pc, #316]	; (80018f0 <touch_register_element+0x168>)
 80017b2:	4613      	mov	r3, r2
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	4413      	add	r3, r2
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	2264      	movs	r2, #100	; 0x64
 80017bc:	fb01 f202 	mul.w	r2, r1, r2
 80017c0:	441a      	add	r2, r3
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	4413      	add	r3, r2
 80017c6:	011b      	lsls	r3, r3, #4
 80017c8:	4403      	add	r3, r0
 80017ca:	3309      	adds	r3, #9
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	f040 8081 	bne.w	80018d6 <touch_register_element+0x14e>
		{
			touch_elements_register[page][layer][i].x = x0;
 80017d4:	79f9      	ldrb	r1, [r7, #7]
 80017d6:	79ba      	ldrb	r2, [r7, #6]
 80017d8:	4845      	ldr	r0, [pc, #276]	; (80018f0 <touch_register_element+0x168>)
 80017da:	4613      	mov	r3, r2
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	4413      	add	r3, r2
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	2264      	movs	r2, #100	; 0x64
 80017e4:	fb01 f202 	mul.w	r2, r1, r2
 80017e8:	441a      	add	r2, r3
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	4413      	add	r3, r2
 80017ee:	011b      	lsls	r3, r3, #4
 80017f0:	4403      	add	r3, r0
 80017f2:	88ba      	ldrh	r2, [r7, #4]
 80017f4:	801a      	strh	r2, [r3, #0]
			touch_elements_register[page][layer][i].x1 =x1;
 80017f6:	79f9      	ldrb	r1, [r7, #7]
 80017f8:	79ba      	ldrb	r2, [r7, #6]
 80017fa:	483d      	ldr	r0, [pc, #244]	; (80018f0 <touch_register_element+0x168>)
 80017fc:	4613      	mov	r3, r2
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	4413      	add	r3, r2
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	2264      	movs	r2, #100	; 0x64
 8001806:	fb01 f202 	mul.w	r2, r1, r2
 800180a:	441a      	add	r2, r3
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	4413      	add	r3, r2
 8001810:	011b      	lsls	r3, r3, #4
 8001812:	4403      	add	r3, r0
 8001814:	3304      	adds	r3, #4
 8001816:	8b3a      	ldrh	r2, [r7, #24]
 8001818:	801a      	strh	r2, [r3, #0]
			touch_elements_register[page][layer][i].y =y0;
 800181a:	79f9      	ldrb	r1, [r7, #7]
 800181c:	79ba      	ldrb	r2, [r7, #6]
 800181e:	4834      	ldr	r0, [pc, #208]	; (80018f0 <touch_register_element+0x168>)
 8001820:	4613      	mov	r3, r2
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	4413      	add	r3, r2
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	2264      	movs	r2, #100	; 0x64
 800182a:	fb01 f202 	mul.w	r2, r1, r2
 800182e:	441a      	add	r2, r3
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	4413      	add	r3, r2
 8001834:	011b      	lsls	r3, r3, #4
 8001836:	4403      	add	r3, r0
 8001838:	3302      	adds	r3, #2
 800183a:	887a      	ldrh	r2, [r7, #2]
 800183c:	801a      	strh	r2, [r3, #0]
			touch_elements_register[page][layer][i].y1 =y1;
 800183e:	79f9      	ldrb	r1, [r7, #7]
 8001840:	79ba      	ldrb	r2, [r7, #6]
 8001842:	482b      	ldr	r0, [pc, #172]	; (80018f0 <touch_register_element+0x168>)
 8001844:	4613      	mov	r3, r2
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	4413      	add	r3, r2
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	2264      	movs	r2, #100	; 0x64
 800184e:	fb01 f202 	mul.w	r2, r1, r2
 8001852:	441a      	add	r2, r3
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	4413      	add	r3, r2
 8001858:	011b      	lsls	r3, r3, #4
 800185a:	4403      	add	r3, r0
 800185c:	3306      	adds	r3, #6
 800185e:	8bba      	ldrh	r2, [r7, #28]
 8001860:	801a      	strh	r2, [r3, #0]
			touch_elements_register[page][layer][i].element_type = element_type;
 8001862:	79f9      	ldrb	r1, [r7, #7]
 8001864:	79ba      	ldrb	r2, [r7, #6]
 8001866:	8c3b      	ldrh	r3, [r7, #32]
 8001868:	b2dc      	uxtb	r4, r3
 800186a:	4821      	ldr	r0, [pc, #132]	; (80018f0 <touch_register_element+0x168>)
 800186c:	4613      	mov	r3, r2
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	4413      	add	r3, r2
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	2264      	movs	r2, #100	; 0x64
 8001876:	fb01 f202 	mul.w	r2, r1, r2
 800187a:	441a      	add	r2, r3
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	4413      	add	r3, r2
 8001880:	011b      	lsls	r3, r3, #4
 8001882:	4403      	add	r3, r0
 8001884:	3308      	adds	r3, #8
 8001886:	4622      	mov	r2, r4
 8001888:	701a      	strb	r2, [r3, #0]
			touch_elements_register[page][layer][i].element_pointer = element_pointer;
 800188a:	79f8      	ldrb	r0, [r7, #7]
 800188c:	79ba      	ldrb	r2, [r7, #6]
 800188e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001890:	4c17      	ldr	r4, [pc, #92]	; (80018f0 <touch_register_element+0x168>)
 8001892:	4613      	mov	r3, r2
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	4413      	add	r3, r2
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	2264      	movs	r2, #100	; 0x64
 800189c:	fb00 f202 	mul.w	r2, r0, r2
 80018a0:	441a      	add	r2, r3
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	4413      	add	r3, r2
 80018a6:	011b      	lsls	r3, r3, #4
 80018a8:	4423      	add	r3, r4
 80018aa:	330c      	adds	r3, #12
 80018ac:	6019      	str	r1, [r3, #0]
			touch_elements_register[page][layer][i].isAlive = 1;
 80018ae:	79f9      	ldrb	r1, [r7, #7]
 80018b0:	79ba      	ldrb	r2, [r7, #6]
 80018b2:	480f      	ldr	r0, [pc, #60]	; (80018f0 <touch_register_element+0x168>)
 80018b4:	4613      	mov	r3, r2
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	4413      	add	r3, r2
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	2264      	movs	r2, #100	; 0x64
 80018be:	fb01 f202 	mul.w	r2, r1, r2
 80018c2:	441a      	add	r2, r3
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	4413      	add	r3, r2
 80018c8:	011b      	lsls	r3, r3, #4
 80018ca:	4403      	add	r3, r0
 80018cc:	3309      	adds	r3, #9
 80018ce:	2201      	movs	r2, #1
 80018d0:	701a      	strb	r2, [r3, #0]
#if DEBUG_TOUCH == 1
			printf("\n\rElement registered with index: %d\n\r",i);
			printf("\n\rElement values: %d %d %d %d %d %d %d\n\r",x0,x1,y0,y1,element_pointer,element_type);
#endif
			return 0;
 80018d2:	2300      	movs	r3, #0
 80018d4:	e007      	b.n	80018e6 <touch_register_element+0x15e>
	for(int i = 0;i<MAX_NUM_ELEMENTS;i++)
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	3301      	adds	r3, #1
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2b13      	cmp	r3, #19
 80018e0:	f77f af64 	ble.w	80017ac <touch_register_element+0x24>
		}
	}

	return -1;
 80018e4:	23ff      	movs	r3, #255	; 0xff
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3710      	adds	r7, #16
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bc90      	pop	{r4, r7}
 80018ee:	4770      	bx	lr
 80018f0:	2000011c 	.word	0x2000011c

080018f4 <HAL_GPIO_EXTI_Callback>:
//External interrupt from touc IC
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	80fb      	strh	r3, [r7, #6]
	touch.pressed=1;
 80018fe:	4b04      	ldr	r3, [pc, #16]	; (8001910 <HAL_GPIO_EXTI_Callback+0x1c>)
 8001900:	2201      	movs	r2, #1
 8001902:	811a      	strh	r2, [r3, #8]
#if DEBUG_TOUCH == 1
	printf("Interrupt touch");
#endif
}
 8001904:	bf00      	nop
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	200000f8 	.word	0x200000f8

08001914 <touch_write_control>:
	touch_elements_register[page][layer][idx].element_pointer = 0;
}
/*----------------------------------------------Private function---------------------------------------------------*/
//Write to touch IC control command via I2C
static void touch_write_control(unsigned char ctrl)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b086      	sub	sp, #24
 8001918:	af02      	add	r7, sp, #8
 800191a:	4603      	mov	r3, r0
 800191c:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status =0;
 800191e:	2300      	movs	r3, #0
 8001920:	73fb      	strb	r3, [r7, #15]
	status = HAL_I2C_Master_Transmit(&hi2c1_touch, (uint16_t)SLAVE_ADDRESS_TOUCH, &ctrl, 1 ,I2C_DELAY);
 8001922:	1dfa      	adds	r2, r7, #7
 8001924:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001928:	9300      	str	r3, [sp, #0]
 800192a:	2301      	movs	r3, #1
 800192c:	2190      	movs	r1, #144	; 0x90
 800192e:	4804      	ldr	r0, [pc, #16]	; (8001940 <touch_write_control+0x2c>)
 8001930:	f004 f99c 	bl	8005c6c <HAL_I2C_Master_Transmit>
 8001934:	4603      	mov	r3, r0
 8001936:	73fb      	strb	r3, [r7, #15]
#if DEBUG_TOUCH == 1
	printf("Write control I2C\n\r");
	printf ("%d",status);
#endif
}
 8001938:	bf00      	nop
 800193a:	3710      	adds	r7, #16
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	200000a4 	.word	0x200000a4

08001944 <touch_write_register>:
//Write to touch IC data via I2C
static void touch_write_register(uint8_t adr, uint16_t val)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b088      	sub	sp, #32
 8001948:	af04      	add	r7, sp, #16
 800194a:	4603      	mov	r3, r0
 800194c:	460a      	mov	r2, r1
 800194e:	71fb      	strb	r3, [r7, #7]
 8001950:	4613      	mov	r3, r2
 8001952:	80bb      	strh	r3, [r7, #4]

	HAL_StatusTypeDef status =0;
 8001954:	2300      	movs	r3, #0
 8001956:	73fb      	strb	r3, [r7, #15]
	uint8_t data[2];
	data[0] = val>>8;
 8001958:	88bb      	ldrh	r3, [r7, #4]
 800195a:	0a1b      	lsrs	r3, r3, #8
 800195c:	b29b      	uxth	r3, r3
 800195e:	b2db      	uxtb	r3, r3
 8001960:	733b      	strb	r3, [r7, #12]
	data[1] = (uint8_t)val;
 8001962:	88bb      	ldrh	r3, [r7, #4]
 8001964:	b2db      	uxtb	r3, r3
 8001966:	737b      	strb	r3, [r7, #13]
	status = HAL_I2C_Mem_Write(&hi2c1_touch, (uint16_t)SLAVE_ADDRESS_TOUCH,(adr<<3),I2C_MEMADD_SIZE_8BIT,data,2,I2C_DELAY);
 8001968:	79fb      	ldrb	r3, [r7, #7]
 800196a:	b29b      	uxth	r3, r3
 800196c:	00db      	lsls	r3, r3, #3
 800196e:	b29a      	uxth	r2, r3
 8001970:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001974:	9302      	str	r3, [sp, #8]
 8001976:	2302      	movs	r3, #2
 8001978:	9301      	str	r3, [sp, #4]
 800197a:	f107 030c 	add.w	r3, r7, #12
 800197e:	9300      	str	r3, [sp, #0]
 8001980:	2301      	movs	r3, #1
 8001982:	2190      	movs	r1, #144	; 0x90
 8001984:	4804      	ldr	r0, [pc, #16]	; (8001998 <touch_write_register+0x54>)
 8001986:	f004 fa6f 	bl	8005e68 <HAL_I2C_Mem_Write>
 800198a:	4603      	mov	r3, r0
 800198c:	73fb      	strb	r3, [r7, #15]
#if DEBUG_TOUCH == 1
	printf ("I2C write register\n\r");
	printf ("status %d \n\r",status);
#endif
}
 800198e:	bf00      	nop
 8001990:	3710      	adds	r7, #16
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	200000a4 	.word	0x200000a4

0800199c <touch_read>:
//Read data via I2C from touch IC
static unsigned short touch_read(unsigned char adr)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b088      	sub	sp, #32
 80019a0:	af04      	add	r7, sp, #16
 80019a2:	4603      	mov	r3, r0
 80019a4:	71fb      	strb	r3, [r7, #7]
	unsigned char adr_i2c= 0x01;
 80019a6:	2301      	movs	r3, #1
 80019a8:	73fb      	strb	r3, [r7, #15]
	adr_i2c+=adr<<3;
 80019aa:	79fb      	ldrb	r3, [r7, #7]
 80019ac:	00db      	lsls	r3, r3, #3
 80019ae:	b2da      	uxtb	r2, r3
 80019b0:	7bfb      	ldrb	r3, [r7, #15]
 80019b2:	4413      	add	r3, r2
 80019b4:	73fb      	strb	r3, [r7, #15]
	uint8_t data[2];
	HAL_StatusTypeDef status =0;
 80019b6:	2300      	movs	r3, #0
 80019b8:	73bb      	strb	r3, [r7, #14]
	status = HAL_I2C_Mem_Read(&hi2c1_touch, (uint16_t)SLAVE_ADDRESS_TOUCH ,adr_i2c,I2C_MEMADD_SIZE_8BIT,data, 2, I2C_DELAY);
 80019ba:	7bfb      	ldrb	r3, [r7, #15]
 80019bc:	b29a      	uxth	r2, r3
 80019be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019c2:	9302      	str	r3, [sp, #8]
 80019c4:	2302      	movs	r3, #2
 80019c6:	9301      	str	r3, [sp, #4]
 80019c8:	f107 0308 	add.w	r3, r7, #8
 80019cc:	9300      	str	r3, [sp, #0]
 80019ce:	2301      	movs	r3, #1
 80019d0:	2190      	movs	r1, #144	; 0x90
 80019d2:	4809      	ldr	r0, [pc, #36]	; (80019f8 <touch_read+0x5c>)
 80019d4:	f004 fb42 	bl	800605c <HAL_I2C_Mem_Read>
 80019d8:	4603      	mov	r3, r0
 80019da:	73bb      	strb	r3, [r7, #14]
	uint16_t result = (data[0] << 8) | (data[1] & 0xFF);
 80019dc:	7a3b      	ldrb	r3, [r7, #8]
 80019de:	021b      	lsls	r3, r3, #8
 80019e0:	b21a      	sxth	r2, r3
 80019e2:	7a7b      	ldrb	r3, [r7, #9]
 80019e4:	b21b      	sxth	r3, r3
 80019e6:	4313      	orrs	r3, r2
 80019e8:	b21b      	sxth	r3, r3
 80019ea:	81bb      	strh	r3, [r7, #12]
	return result;
 80019ec:	89bb      	ldrh	r3, [r7, #12]
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3710      	adds	r7, #16
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	200000a4 	.word	0x200000a4
 80019fc:	00000000 	.word	0x00000000

08001a00 <validate_touch_coordinates>:
//Transform and validate touch coordinates
static uint8_t validate_touch_coordinates(void)
{
 8001a00:	b5b0      	push	{r4, r5, r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
	if(touch.x<MIN_X) return 0;
	if(touch.x>MAX_X) return 0;
 8001a06:	4b56      	ldr	r3, [pc, #344]	; (8001b60 <validate_touch_coordinates+0x160>)
 8001a08:	881b      	ldrh	r3, [r3, #0]
 8001a0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a0e:	d901      	bls.n	8001a14 <validate_touch_coordinates+0x14>
 8001a10:	2300      	movs	r3, #0
 8001a12:	e087      	b.n	8001b24 <validate_touch_coordinates+0x124>
	if(touch.y<MIN_Y) return 0;
	if(touch.y>MAX_Y) return 0;
 8001a14:	4b52      	ldr	r3, [pc, #328]	; (8001b60 <validate_touch_coordinates+0x160>)
 8001a16:	885b      	ldrh	r3, [r3, #2]
 8001a18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a1c:	d901      	bls.n	8001a22 <validate_touch_coordinates+0x22>
 8001a1e:	2300      	movs	r3, #0
 8001a20:	e080      	b.n	8001b24 <validate_touch_coordinates+0x124>

	touch.x=touch.x - MIN_X;
 8001a22:	4b4f      	ldr	r3, [pc, #316]	; (8001b60 <validate_touch_coordinates+0x160>)
 8001a24:	881a      	ldrh	r2, [r3, #0]
 8001a26:	4b4e      	ldr	r3, [pc, #312]	; (8001b60 <validate_touch_coordinates+0x160>)
 8001a28:	801a      	strh	r2, [r3, #0]
	touch.y=touch.y - MIN_Y;
 8001a2a:	4b4d      	ldr	r3, [pc, #308]	; (8001b60 <validate_touch_coordinates+0x160>)
 8001a2c:	885a      	ldrh	r2, [r3, #2]
 8001a2e:	4b4c      	ldr	r3, [pc, #304]	; (8001b60 <validate_touch_coordinates+0x160>)
 8001a30:	805a      	strh	r2, [r3, #2]
#if LINEAR_INTERPOLATION == 1
	touch.x = linear_interpolation((long)touch.x,40,970,0,480);
	touch.y = linear_interpolation((long)touch.y,40,970,0,340);
#else
	double x,y;
	x = X_A* (int16_t)touch.x + X_B *(int16_t)touch.y +X_L;
 8001a32:	4b4b      	ldr	r3, [pc, #300]	; (8001b60 <validate_touch_coordinates+0x160>)
 8001a34:	881b      	ldrh	r3, [r3, #0]
 8001a36:	b21b      	sxth	r3, r3
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7fe fea5 	bl	8000788 <__aeabi_i2d>
 8001a3e:	a33c      	add	r3, pc, #240	; (adr r3, 8001b30 <validate_touch_coordinates+0x130>)
 8001a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a44:	f7fe fc24 	bl	8000290 <__aeabi_dmul>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	4614      	mov	r4, r2
 8001a4e:	461d      	mov	r5, r3
 8001a50:	4b43      	ldr	r3, [pc, #268]	; (8001b60 <validate_touch_coordinates+0x160>)
 8001a52:	885b      	ldrh	r3, [r3, #2]
 8001a54:	b21b      	sxth	r3, r3
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7fe fe96 	bl	8000788 <__aeabi_i2d>
 8001a5c:	a336      	add	r3, pc, #216	; (adr r3, 8001b38 <validate_touch_coordinates+0x138>)
 8001a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a62:	f7fe fc15 	bl	8000290 <__aeabi_dmul>
 8001a66:	4602      	mov	r2, r0
 8001a68:	460b      	mov	r3, r1
 8001a6a:	4620      	mov	r0, r4
 8001a6c:	4629      	mov	r1, r5
 8001a6e:	f7fe fd3f 	bl	80004f0 <__adddf3>
 8001a72:	4602      	mov	r2, r0
 8001a74:	460b      	mov	r3, r1
 8001a76:	4610      	mov	r0, r2
 8001a78:	4619      	mov	r1, r3
 8001a7a:	a331      	add	r3, pc, #196	; (adr r3, 8001b40 <validate_touch_coordinates+0x140>)
 8001a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a80:	f7fe fd34 	bl	80004ec <__aeabi_dsub>
 8001a84:	4602      	mov	r2, r0
 8001a86:	460b      	mov	r3, r1
 8001a88:	e9c7 2302 	strd	r2, r3, [r7, #8]
	y = Y_A* (int16_t)touch.x + Y_B *(int16_t)touch.y +Y_L;
 8001a8c:	4b34      	ldr	r3, [pc, #208]	; (8001b60 <validate_touch_coordinates+0x160>)
 8001a8e:	881b      	ldrh	r3, [r3, #0]
 8001a90:	b21b      	sxth	r3, r3
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7fe fe78 	bl	8000788 <__aeabi_i2d>
 8001a98:	a32b      	add	r3, pc, #172	; (adr r3, 8001b48 <validate_touch_coordinates+0x148>)
 8001a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a9e:	f7fe fbf7 	bl	8000290 <__aeabi_dmul>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	4614      	mov	r4, r2
 8001aa8:	461d      	mov	r5, r3
 8001aaa:	4b2d      	ldr	r3, [pc, #180]	; (8001b60 <validate_touch_coordinates+0x160>)
 8001aac:	885b      	ldrh	r3, [r3, #2]
 8001aae:	b21b      	sxth	r3, r3
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7fe fe69 	bl	8000788 <__aeabi_i2d>
 8001ab6:	a326      	add	r3, pc, #152	; (adr r3, 8001b50 <validate_touch_coordinates+0x150>)
 8001ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001abc:	f7fe fbe8 	bl	8000290 <__aeabi_dmul>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	4620      	mov	r0, r4
 8001ac6:	4629      	mov	r1, r5
 8001ac8:	f7fe fd12 	bl	80004f0 <__adddf3>
 8001acc:	4602      	mov	r2, r0
 8001ace:	460b      	mov	r3, r1
 8001ad0:	4610      	mov	r0, r2
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	a320      	add	r3, pc, #128	; (adr r3, 8001b58 <validate_touch_coordinates+0x158>)
 8001ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ada:	f7fe fd07 	bl	80004ec <__aeabi_dsub>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	e9c7 2300 	strd	r2, r3, [r7]
	touch.x = (uint16_t)x;
 8001ae6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001aea:	f7fe feb7 	bl	800085c <__aeabi_d2uiz>
 8001aee:	4603      	mov	r3, r0
 8001af0:	b29a      	uxth	r2, r3
 8001af2:	4b1b      	ldr	r3, [pc, #108]	; (8001b60 <validate_touch_coordinates+0x160>)
 8001af4:	801a      	strh	r2, [r3, #0]
	touch.y = (uint16_t)y;
 8001af6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001afa:	f7fe feaf 	bl	800085c <__aeabi_d2uiz>
 8001afe:	4603      	mov	r3, r0
 8001b00:	b29a      	uxth	r2, r3
 8001b02:	4b17      	ldr	r3, [pc, #92]	; (8001b60 <validate_touch_coordinates+0x160>)
 8001b04:	805a      	strh	r2, [r3, #2]
#endif
#if DEBUG_TOUCH == 1
	printf("TOUCH y %d\n\r", touch.y);
	printf("TOUCH X %d\n\r", touch.x);
#endif
	if (touch.x >= 0 && touch.x <= LCD_PIXEL_WIDTH)
 8001b06:	4b16      	ldr	r3, [pc, #88]	; (8001b60 <validate_touch_coordinates+0x160>)
 8001b08:	881b      	ldrh	r3, [r3, #0]
 8001b0a:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001b0e:	d801      	bhi.n	8001b14 <validate_touch_coordinates+0x114>
	{
		return 1;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e007      	b.n	8001b24 <validate_touch_coordinates+0x124>
	}
	if (touch.y >= 0 && touch.y <= LCD_PIXEL_HEIGHT)
 8001b14:	4b12      	ldr	r3, [pc, #72]	; (8001b60 <validate_touch_coordinates+0x160>)
 8001b16:	885b      	ldrh	r3, [r3, #2]
 8001b18:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001b1c:	d801      	bhi.n	8001b22 <validate_touch_coordinates+0x122>
	{
		return 1;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e000      	b.n	8001b24 <validate_touch_coordinates+0x124>
	}


	return 0;
 8001b22:	2300      	movs	r3, #0
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3710      	adds	r7, #16
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bdb0      	pop	{r4, r5, r7, pc}
 8001b2c:	f3af 8000 	nop.w
 8001b30:	c7e28241 	.word	0xc7e28241
 8001b34:	3fe0bb98 	.word	0x3fe0bb98
 8001b38:	8db8bac7 	.word	0x8db8bac7
 8001b3c:	3f66f006 	.word	0x3f66f006
 8001b40:	b71758e2 	.word	0xb71758e2
 8001b44:	403fc0d1 	.word	0x403fc0d1
 8001b48:	d2f1a9fc 	.word	0xd2f1a9fc
 8001b4c:	bf70624d 	.word	0xbf70624d
 8001b50:	ab367a10 	.word	0xab367a10
 8001b54:	3fd7573e 	.word	0x3fd7573e
 8001b58:	e219652c 	.word	0xe219652c
 8001b5c:	4036d758 	.word	0x4036d758
 8001b60:	200000f8 	.word	0x200000f8

08001b64 <delay_ms>:
	{
		  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	}
#endif
//Delay in ms
static void delay_ms(__IO uint32_t nCount1) {
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
	__IO uint32_t nCount=nCount1*23666;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f645 4272 	movw	r2, #23666	; 0x5c72
 8001b72:	fb02 f303 	mul.w	r3, r2, r3
 8001b76:	60fb      	str	r3, [r7, #12]
	while(nCount--) {
 8001b78:	bf00      	nop
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	1e5a      	subs	r2, r3, #1
 8001b7e:	60fa      	str	r2, [r7, #12]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d1fa      	bne.n	8001b7a <delay_ms+0x16>
  }
}
 8001b84:	bf00      	nop
 8001b86:	bf00      	nop
 8001b88:	3714      	adds	r7, #20
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
	...

08001b94 <configFromUart>:

/*
 * Attempts to read configuration / debug data from UART and save them to external flash.
 * Returns: 0 when successful, 1 when no configuration data detected on uart, 2 or greater when configuration failed
 */
int configFromUart(){
 8001b94:	b590      	push	{r4, r7, lr}
 8001b96:	f2ad 4dc4 	subw	sp, sp, #1220	; 0x4c4
 8001b9a:	af7e      	add	r7, sp, #504	; 0x1f8

	char msg[128];

	int count = read_usart_message(msg, &huart1, sizeof(msg), NEWLINE);
 8001b9c:	f507 7011 	add.w	r0, r7, #580	; 0x244
 8001ba0:	230d      	movs	r3, #13
 8001ba2:	2280      	movs	r2, #128	; 0x80
 8001ba4:	4960      	ldr	r1, [pc, #384]	; (8001d28 <configFromUart+0x194>)
 8001ba6:	f003 fabb 	bl	8005120 <read_usart_message>
 8001baa:	4603      	mov	r3, r0
 8001bac:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4

	if(count == 0){
 8001bb0:	f8d7 32c4 	ldr.w	r3, [r7, #708]	; 0x2c4
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d104      	bne.n	8001bc2 <configFromUart+0x2e>
		printf("[cl] No data on uart.\n\r");
 8001bb8:	485c      	ldr	r0, [pc, #368]	; (8001d2c <configFromUart+0x198>)
 8001bba:	f007 fc77 	bl	80094ac <iprintf>
		return 1;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e0ad      	b.n	8001d1e <configFromUart+0x18a>
	}

	msg[count-1] = 0; //replace newline delimiter with null-termination
 8001bc2:	f8d7 32c4 	ldr.w	r3, [r7, #708]	; 0x2c4
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
 8001bcc:	443b      	add	r3, r7
 8001bce:	2200      	movs	r2, #0
 8001bd0:	f803 2c84 	strb.w	r2, [r3, #-132]

	char configMsg[] = "config";
 8001bd4:	4a56      	ldr	r2, [pc, #344]	; (8001d30 <configFromUart+0x19c>)
 8001bd6:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8001bda:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001bde:	6018      	str	r0, [r3, #0]
 8001be0:	3304      	adds	r3, #4
 8001be2:	8019      	strh	r1, [r3, #0]
 8001be4:	3302      	adds	r3, #2
 8001be6:	0c0a      	lsrs	r2, r1, #16
 8001be8:	701a      	strb	r2, [r3, #0]
	char bitmapMsg[] = "bitmap";
 8001bea:	4a52      	ldr	r2, [pc, #328]	; (8001d34 <configFromUart+0x1a0>)
 8001bec:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8001bf0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001bf4:	6018      	str	r0, [r3, #0]
 8001bf6:	3304      	adds	r3, #4
 8001bf8:	8019      	strh	r1, [r3, #0]
 8001bfa:	3302      	adds	r3, #2
 8001bfc:	0c0a      	lsrs	r2, r1, #16
 8001bfe:	701a      	strb	r2, [r3, #0]
	char deleteMsg[] = "delete bitmaps";
 8001c00:	4b4d      	ldr	r3, [pc, #308]	; (8001d38 <configFromUart+0x1a4>)
 8001c02:	f507 7409 	add.w	r4, r7, #548	; 0x224
 8001c06:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c08:	c407      	stmia	r4!, {r0, r1, r2}
 8001c0a:	8023      	strh	r3, [r4, #0]
 8001c0c:	3402      	adds	r4, #2
 8001c0e:	0c1b      	lsrs	r3, r3, #16
 8001c10:	7023      	strb	r3, [r4, #0]
	char sreportMsg[] = "report screens";
 8001c12:	4b4a      	ldr	r3, [pc, #296]	; (8001d3c <configFromUart+0x1a8>)
 8001c14:	f507 7405 	add.w	r4, r7, #532	; 0x214
 8001c18:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c1a:	c407      	stmia	r4!, {r0, r1, r2}
 8001c1c:	8023      	strh	r3, [r4, #0]
 8001c1e:	3402      	adds	r4, #2
 8001c20:	0c1b      	lsrs	r3, r3, #16
 8001c22:	7023      	strb	r3, [r4, #0]
	char breportMsg[] = "report bitmpas";
 8001c24:	4b46      	ldr	r3, [pc, #280]	; (8001d40 <configFromUart+0x1ac>)
 8001c26:	f507 7401 	add.w	r4, r7, #516	; 0x204
 8001c2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c2c:	c407      	stmia	r4!, {r0, r1, r2}
 8001c2e:	8023      	strh	r3, [r4, #0]
 8001c30:	3402      	adds	r4, #2
 8001c32:	0c1b      	lsrs	r3, r3, #16
 8001c34:	7023      	strb	r3, [r4, #0]

	if(strcmp(configMsg, msg) == 0){
 8001c36:	f507 7211 	add.w	r2, r7, #580	; 0x244
 8001c3a:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8001c3e:	4611      	mov	r1, r2
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7fe fac5 	bl	80001d0 <strcmp>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d106      	bne.n	8001c5a <configFromUart+0xc6>
		printf("[cl] Okay, proceeding to configure screens.\n\r");
 8001c4c:	483d      	ldr	r0, [pc, #244]	; (8001d44 <configFromUart+0x1b0>)
 8001c4e:	f007 fc2d 	bl	80094ac <iprintf>
		return configScreensFromUart();
 8001c52:	f000 fb35 	bl	80022c0 <configScreensFromUart>
 8001c56:	4603      	mov	r3, r0
 8001c58:	e061      	b.n	8001d1e <configFromUart+0x18a>
	}
	else if(strcmp(bitmapMsg, msg) == 0){
 8001c5a:	f507 7211 	add.w	r2, r7, #580	; 0x244
 8001c5e:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8001c62:	4611      	mov	r1, r2
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7fe fab3 	bl	80001d0 <strcmp>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d106      	bne.n	8001c7e <configFromUart+0xea>
		printf("[cl] Okay, proceeding to write bitmap.\n\r");
 8001c70:	4835      	ldr	r0, [pc, #212]	; (8001d48 <configFromUart+0x1b4>)
 8001c72:	f007 fc1b 	bl	80094ac <iprintf>
		return configBitmapFromUart();
 8001c76:	f000 f873 	bl	8001d60 <configBitmapFromUart>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	e04f      	b.n	8001d1e <configFromUart+0x18a>
	}
	else if(strcmp(deleteMsg, msg) == 0){
 8001c7e:	f507 7211 	add.w	r2, r7, #580	; 0x244
 8001c82:	f507 7309 	add.w	r3, r7, #548	; 0x224
 8001c86:	4611      	mov	r1, r2
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7fe faa1 	bl	80001d0 <strcmp>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d106      	bne.n	8001ca2 <configFromUart+0x10e>
		printf("[cl] Okay, marking all saved bitmaps for deletion.\n\r");
 8001c94:	482d      	ldr	r0, [pc, #180]	; (8001d4c <configFromUart+0x1b8>)
 8001c96:	f007 fc09 	bl	80094ac <iprintf>
		return configMarkBitmapsForDelete();
 8001c9a:	f000 fad1 	bl	8002240 <configMarkBitmapsForDelete>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	e03d      	b.n	8001d1e <configFromUart+0x18a>
	}
	else if(strcmp(sreportMsg, msg) == 0){
 8001ca2:	f507 7211 	add.w	r2, r7, #580	; 0x244
 8001ca6:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8001caa:	4611      	mov	r1, r2
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7fe fa8f 	bl	80001d0 <strcmp>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d118      	bne.n	8001cea <configFromUart+0x156>
		printf("[cl] Okay, reporting screens.\n\r");
 8001cb8:	4825      	ldr	r0, [pc, #148]	; (8001d50 <configFromUart+0x1bc>)
 8001cba:	f007 fbf7 	bl	80094ac <iprintf>
		struct generalConfig gconf;
		readGeneralConfig(&gconf);
 8001cbe:	463b      	mov	r3, r7
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f001 f945 	bl	8002f50 <readGeneralConfig>
		printAllScreens(gconf);
 8001cc6:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8001cca:	f5a3 7432 	sub.w	r4, r3, #712	; 0x2c8
 8001cce:	4668      	mov	r0, sp
 8001cd0:	f104 0310 	add.w	r3, r4, #16
 8001cd4:	f44f 72f9 	mov.w	r2, #498	; 0x1f2
 8001cd8:	4619      	mov	r1, r3
 8001cda:	f007 fbd1 	bl	8009480 <memcpy>
 8001cde:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001ce2:	f001 fa17 	bl	8003114 <printAllScreens>
		return 0;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	e019      	b.n	8001d1e <configFromUart+0x18a>
	}
	else if(strcmp(breportMsg, msg) == 0){
 8001cea:	f507 7211 	add.w	r2, r7, #580	; 0x244
 8001cee:	f507 7301 	add.w	r3, r7, #516	; 0x204
 8001cf2:	4611      	mov	r1, r2
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7fe fa6b 	bl	80001d0 <strcmp>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d107      	bne.n	8001d10 <configFromUart+0x17c>
		printf("[cl] Okay, reporting bitmaps.\n\r");
 8001d00:	4814      	ldr	r0, [pc, #80]	; (8001d54 <configFromUart+0x1c0>)
 8001d02:	f007 fbd3 	bl	80094ac <iprintf>
		printf("NOT IMPLEMENTED");
 8001d06:	4814      	ldr	r0, [pc, #80]	; (8001d58 <configFromUart+0x1c4>)
 8001d08:	f007 fbd0 	bl	80094ac <iprintf>
		return 0;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	e006      	b.n	8001d1e <configFromUart+0x18a>
		}
	else{
		printf("[cl] Unexpected first msg. Got %s, which is not a recognised command.\n\r", msg);
 8001d10:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8001d14:	4619      	mov	r1, r3
 8001d16:	4811      	ldr	r0, [pc, #68]	; (8001d5c <configFromUart+0x1c8>)
 8001d18:	f007 fbc8 	bl	80094ac <iprintf>
		return 1;
 8001d1c:	2301      	movs	r3, #1
	}
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f507 7733 	add.w	r7, r7, #716	; 0x2cc
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd90      	pop	{r4, r7, pc}
 8001d28:	20002150 	.word	0x20002150
 8001d2c:	0800a508 	.word	0x0800a508
 8001d30:	0800a64c 	.word	0x0800a64c
 8001d34:	0800a654 	.word	0x0800a654
 8001d38:	0800a65c 	.word	0x0800a65c
 8001d3c:	0800a66c 	.word	0x0800a66c
 8001d40:	0800a67c 	.word	0x0800a67c
 8001d44:	0800a520 	.word	0x0800a520
 8001d48:	0800a550 	.word	0x0800a550
 8001d4c:	0800a57c 	.word	0x0800a57c
 8001d50:	0800a5b4 	.word	0x0800a5b4
 8001d54:	0800a5d4 	.word	0x0800a5d4
 8001d58:	0800a5f4 	.word	0x0800a5f4
 8001d5c:	0800a604 	.word	0x0800a604

08001d60 <configBitmapFromUart>:

int configBitmapFromUart(){
 8001d60:	b580      	push	{r7, lr}
 8001d62:	f5ad 5dc5 	sub.w	sp, sp, #6304	; 0x18a0
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
	int count;
	char msg[128];
	struct bitmapList blist;
	readBitmapList(&blist);
 8001d6a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001d6e:	f103 0308 	add.w	r3, r3, #8
 8001d72:	4618      	mov	r0, r3
 8001d74:	f001 f910 	bl	8002f98 <readBitmapList>
	int currentSector = blist.lastUsedSector + 1;
 8001d78:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8001d7c:	f103 0308 	add.w	r3, r3, #8
 8001d80:	f5a3 630a 	sub.w	r3, r3, #2208	; 0x8a0
 8001d84:	885b      	ldrh	r3, [r3, #2]
 8001d86:	3301      	adds	r3, #1
 8001d88:	f507 52c5 	add.w	r2, r7, #6304	; 0x18a0
 8001d8c:	f102 0204 	add.w	r2, r2, #4
 8001d90:	6013      	str	r3, [r2, #0]
	if(currentSector > MAX_SECTOR){
 8001d92:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8001d96:	f103 0304 	add.w	r3, r3, #4
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001da0:	db0d      	blt.n	8001dbe <configBitmapFromUart+0x5e>
		printf("[cl] Error trying to write bitmap to memory: No more free sectors. Last used: %d \n\r", blist.lastUsedSector);
 8001da2:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8001da6:	f103 0308 	add.w	r3, r3, #8
 8001daa:	f5a3 630a 	sub.w	r3, r3, #2208	; 0x8a0
 8001dae:	885b      	ldrh	r3, [r3, #2]
 8001db0:	4619      	mov	r1, r3
 8001db2:	48a5      	ldr	r0, [pc, #660]	; (8002048 <configBitmapFromUart+0x2e8>)
 8001db4:	f007 fb7a 	bl	80094ac <iprintf>
		return 1000;
 8001db8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dbc:	e232      	b.n	8002224 <configBitmapFromUart+0x4c4>
	}
	blist.bitmapSectors[blist.totalBitmaps-1] = currentSector;
 8001dbe:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8001dc2:	f103 0308 	add.w	r3, r3, #8
 8001dc6:	f5a3 630a 	sub.w	r3, r3, #2208	; 0x8a0
 8001dca:	881b      	ldrh	r3, [r3, #0]
 8001dcc:	3b01      	subs	r3, #1
 8001dce:	f507 52c5 	add.w	r2, r7, #6304	; 0x18a0
 8001dd2:	f102 0204 	add.w	r2, r2, #4
 8001dd6:	6812      	ldr	r2, [r2, #0]
 8001dd8:	b291      	uxth	r1, r2
 8001dda:	f507 52c5 	add.w	r2, r7, #6304	; 0x18a0
 8001dde:	f102 0208 	add.w	r2, r2, #8
 8001de2:	f5a2 620a 	sub.w	r2, r2, #2208	; 0x8a0
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	4413      	add	r3, r2
 8001dea:	460a      	mov	r2, r1
 8001dec:	809a      	strh	r2, [r3, #4]
 	blist.totalBitmaps++;
 8001dee:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8001df2:	f103 0308 	add.w	r3, r3, #8
 8001df6:	f5a3 630a 	sub.w	r3, r3, #2208	; 0x8a0
 8001dfa:	881b      	ldrh	r3, [r3, #0]
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	b29a      	uxth	r2, r3
 8001e00:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8001e04:	f103 0308 	add.w	r3, r3, #8
 8001e08:	f5a3 630a 	sub.w	r3, r3, #2208	; 0x8a0
 8001e0c:	801a      	strh	r2, [r3, #0]

 	struct bitmap bm;

 	UART_READ_STRING();
 8001e0e:	f507 50c0 	add.w	r0, r7, #6144	; 0x1800
 8001e12:	f100 000c 	add.w	r0, r0, #12
 8001e16:	230d      	movs	r3, #13
 8001e18:	2280      	movs	r2, #128	; 0x80
 8001e1a:	498c      	ldr	r1, [pc, #560]	; (800204c <configBitmapFromUart+0x2ec>)
 8001e1c:	f003 f980 	bl	8005120 <read_usart_message>
 8001e20:	4603      	mov	r3, r0
 8001e22:	f507 52c4 	add.w	r2, r7, #6272	; 0x1880
 8001e26:	f102 0218 	add.w	r2, r2, #24
 8001e2a:	6013      	str	r3, [r2, #0]
 8001e2c:	f507 53c4 	add.w	r3, r7, #6272	; 0x1880
 8001e30:	f103 0318 	add.w	r3, r3, #24
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d0e9      	beq.n	8001e0e <configBitmapFromUart+0xae>
 8001e3a:	f507 53c4 	add.w	r3, r7, #6272	; 0x1880
 8001e3e:	f103 0318 	add.w	r3, r3, #24
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	3b01      	subs	r3, #1
 8001e46:	f503 53c5 	add.w	r3, r3, #6304	; 0x18a0
 8001e4a:	f103 0308 	add.w	r3, r3, #8
 8001e4e:	443b      	add	r3, r7
 8001e50:	2200      	movs	r2, #0
 8001e52:	f803 2c9c 	strb.w	r2, [r3, #-156]
 	bm.xsize = atoi(msg);
 8001e56:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8001e5a:	f103 030c 	add.w	r3, r3, #12
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f007 fae0 	bl	8009424 <atoi>
 8001e64:	4603      	mov	r3, r0
 8001e66:	b29a      	uxth	r2, r3
 8001e68:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8001e6c:	f103 0308 	add.w	r3, r3, #8
 8001e70:	f6a3 03a8 	subw	r3, r3, #2216	; 0x8a8
 8001e74:	805a      	strh	r2, [r3, #2]
 	UART_READ_STRING();
 8001e76:	f507 50c0 	add.w	r0, r7, #6144	; 0x1800
 8001e7a:	f100 000c 	add.w	r0, r0, #12
 8001e7e:	230d      	movs	r3, #13
 8001e80:	2280      	movs	r2, #128	; 0x80
 8001e82:	4972      	ldr	r1, [pc, #456]	; (800204c <configBitmapFromUart+0x2ec>)
 8001e84:	f003 f94c 	bl	8005120 <read_usart_message>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	f507 52c4 	add.w	r2, r7, #6272	; 0x1880
 8001e8e:	f102 0218 	add.w	r2, r2, #24
 8001e92:	6013      	str	r3, [r2, #0]
 8001e94:	f507 53c4 	add.w	r3, r7, #6272	; 0x1880
 8001e98:	f103 0318 	add.w	r3, r3, #24
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d0e9      	beq.n	8001e76 <configBitmapFromUart+0x116>
 8001ea2:	f507 53c4 	add.w	r3, r7, #6272	; 0x1880
 8001ea6:	f103 0318 	add.w	r3, r3, #24
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	3b01      	subs	r3, #1
 8001eae:	f503 53c5 	add.w	r3, r3, #6304	; 0x18a0
 8001eb2:	f103 0308 	add.w	r3, r3, #8
 8001eb6:	443b      	add	r3, r7
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f803 2c9c 	strb.w	r2, [r3, #-156]
 	bm.ysize = atoi(msg);
 8001ebe:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8001ec2:	f103 030c 	add.w	r3, r3, #12
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f007 faac 	bl	8009424 <atoi>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	b29a      	uxth	r2, r3
 8001ed0:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8001ed4:	f103 0308 	add.w	r3, r3, #8
 8001ed8:	f6a3 03a8 	subw	r3, r3, #2216	; 0x8a8
 8001edc:	809a      	strh	r2, [r3, #4]

 	bm.bitmapNumber = blist.totalBitmaps-1;
 8001ede:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8001ee2:	f103 0308 	add.w	r3, r3, #8
 8001ee6:	f5a3 630a 	sub.w	r3, r3, #2208	; 0x8a0
 8001eea:	881b      	ldrh	r3, [r3, #0]
 8001eec:	3b01      	subs	r3, #1
 8001eee:	b29a      	uxth	r2, r3
 8001ef0:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8001ef4:	f103 0308 	add.w	r3, r3, #8
 8001ef8:	f6a3 03a8 	subw	r3, r3, #2216	; 0x8a8
 8001efc:	801a      	strh	r2, [r3, #0]

 	int expectedBytes = 2*bm.xsize*bm.ysize;
 8001efe:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8001f02:	f103 0308 	add.w	r3, r3, #8
 8001f06:	f6a3 03a8 	subw	r3, r3, #2216	; 0x8a8
 8001f0a:	885b      	ldrh	r3, [r3, #2]
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8001f12:	f103 0308 	add.w	r3, r3, #8
 8001f16:	f6a3 03a8 	subw	r3, r3, #2216	; 0x8a8
 8001f1a:	889b      	ldrh	r3, [r3, #4]
 8001f1c:	fb02 f303 	mul.w	r3, r2, r3
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	f507 52c4 	add.w	r2, r7, #6272	; 0x1880
 8001f26:	f102 0214 	add.w	r2, r2, #20
 8001f2a:	6013      	str	r3, [r2, #0]
 	int spaceLeft = SECTOR_SIZE*(MAX_SECTOR+1-currentSector) - sizeof(bm);
 8001f2c:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8001f30:	f103 0304 	add.w	r3, r3, #4
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8001f3a:	031b      	lsls	r3, r3, #12
 8001f3c:	3b06      	subs	r3, #6
 8001f3e:	f507 52c4 	add.w	r2, r7, #6272	; 0x1880
 8001f42:	f102 0210 	add.w	r2, r2, #16
 8001f46:	6013      	str	r3, [r2, #0]

 	printf("[cl] Okay, ready to parse bitmap #%d, size %dx%d pixels.\n\r", bm.bitmapNumber, bm.xsize, bm.ysize);
 8001f48:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8001f4c:	f103 0308 	add.w	r3, r3, #8
 8001f50:	f6a3 03a8 	subw	r3, r3, #2216	; 0x8a8
 8001f54:	881b      	ldrh	r3, [r3, #0]
 8001f56:	4619      	mov	r1, r3
 8001f58:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8001f5c:	f103 0308 	add.w	r3, r3, #8
 8001f60:	f6a3 03a8 	subw	r3, r3, #2216	; 0x8a8
 8001f64:	885b      	ldrh	r3, [r3, #2]
 8001f66:	461a      	mov	r2, r3
 8001f68:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8001f6c:	f103 0308 	add.w	r3, r3, #8
 8001f70:	f6a3 03a8 	subw	r3, r3, #2216	; 0x8a8
 8001f74:	889b      	ldrh	r3, [r3, #4]
 8001f76:	4836      	ldr	r0, [pc, #216]	; (8002050 <configBitmapFromUart+0x2f0>)
 8001f78:	f007 fa98 	bl	80094ac <iprintf>

 	if(expectedBytes > spaceLeft){
 8001f7c:	f507 53c4 	add.w	r3, r7, #6272	; 0x1880
 8001f80:	f103 0314 	add.w	r3, r3, #20
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	f507 53c4 	add.w	r3, r7, #6272	; 0x1880
 8001f8a:	f103 0310 	add.w	r3, r3, #16
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	dd0c      	ble.n	8001fae <configBitmapFromUart+0x24e>
 		printf("[cl] WARNING: This bitmap is not going to fit into memory! Only first %d bytes of total %d will be written. \n\r", spaceLeft, expectedBytes);
 8001f94:	f507 53c4 	add.w	r3, r7, #6272	; 0x1880
 8001f98:	f103 0314 	add.w	r3, r3, #20
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	f507 53c4 	add.w	r3, r7, #6272	; 0x1880
 8001fa2:	f103 0310 	add.w	r3, r3, #16
 8001fa6:	6819      	ldr	r1, [r3, #0]
 8001fa8:	482a      	ldr	r0, [pc, #168]	; (8002054 <configBitmapFromUart+0x2f4>)
 8001faa:	f007 fa7f 	bl	80094ac <iprintf>
 	}

 	uint8_t sectorBuffer[SECTOR_SIZE];
 	int sectorBufferIndex = 0;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	f507 52c5 	add.w	r2, r7, #6304	; 0x18a0
 8001fb4:	6013      	str	r3, [r2, #0]

 	memcpy(sectorBuffer+sectorBufferIndex, (uint8_t *) &bm, sizeof(bm));
 8001fb6:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	f107 0308 	add.w	r3, r7, #8
 8001fc0:	3b08      	subs	r3, #8
 8001fc2:	4413      	add	r3, r2
 8001fc4:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8001fc8:	2206      	movs	r2, #6
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f007 fa58 	bl	8009480 <memcpy>
 	sectorBufferIndex += sizeof(bm);
 8001fd0:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	3306      	adds	r3, #6
 8001fd8:	f507 52c5 	add.w	r2, r7, #6304	; 0x18a0
 8001fdc:	6013      	str	r3, [r2, #0]

 	int bytesLeft = expectedBytes;
 8001fde:	f507 53c4 	add.w	r3, r7, #6272	; 0x1880
 8001fe2:	f103 0314 	add.w	r3, r3, #20
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f507 52c4 	add.w	r2, r7, #6272	; 0x1880
 8001fec:	f102 021c 	add.w	r2, r2, #28
 8001ff0:	6013      	str	r3, [r2, #0]

 	while(bytesLeft > 0){
 8001ff2:	e0be      	b.n	8002172 <configBitmapFromUart+0x412>
 		do{count = read_usart_message(msg, &huart1, 2, NEWLINE);} while (count==0);
 8001ff4:	f507 50c0 	add.w	r0, r7, #6144	; 0x1800
 8001ff8:	f100 000c 	add.w	r0, r0, #12
 8001ffc:	230d      	movs	r3, #13
 8001ffe:	2202      	movs	r2, #2
 8002000:	4912      	ldr	r1, [pc, #72]	; (800204c <configBitmapFromUart+0x2ec>)
 8002002:	f003 f88d 	bl	8005120 <read_usart_message>
 8002006:	4603      	mov	r3, r0
 8002008:	f507 52c4 	add.w	r2, r7, #6272	; 0x1880
 800200c:	f102 0218 	add.w	r2, r2, #24
 8002010:	6013      	str	r3, [r2, #0]
 8002012:	f507 53c4 	add.w	r3, r7, #6272	; 0x1880
 8002016:	f103 0318 	add.w	r3, r3, #24
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d0e9      	beq.n	8001ff4 <configBitmapFromUart+0x294>
 		if(count!=2){
 8002020:	f507 53c4 	add.w	r3, r7, #6272	; 0x1880
 8002024:	f103 0318 	add.w	r3, r3, #24
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2b02      	cmp	r3, #2
 800202c:	d016      	beq.n	800205c <configBitmapFromUart+0x2fc>
 			printf("[cl] Error: Unexpected end of bitmap #%d data.\n\r.", bm.bitmapNumber);
 800202e:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8002032:	f103 0308 	add.w	r3, r3, #8
 8002036:	f6a3 03a8 	subw	r3, r3, #2216	; 0x8a8
 800203a:	881b      	ldrh	r3, [r3, #0]
 800203c:	4619      	mov	r1, r3
 800203e:	4806      	ldr	r0, [pc, #24]	; (8002058 <configBitmapFromUart+0x2f8>)
 8002040:	f007 fa34 	bl	80094ac <iprintf>
 			break;
 8002044:	e09d      	b.n	8002182 <configBitmapFromUart+0x422>
 8002046:	bf00      	nop
 8002048:	0800a68c 	.word	0x0800a68c
 800204c:	20002150 	.word	0x20002150
 8002050:	0800a6e0 	.word	0x0800a6e0
 8002054:	0800a71c 	.word	0x0800a71c
 8002058:	0800a78c 	.word	0x0800a78c
 		}
 		msg[2] = 0;
 800205c:	2300      	movs	r3, #0
 800205e:	f507 52c0 	add.w	r2, r7, #6144	; 0x1800
 8002062:	f102 020e 	add.w	r2, r2, #14
 8002066:	7013      	strb	r3, [r2, #0]
		uint8_t deHexedByte = (uint8_t) strtol(msg, NULL, 16);
 8002068:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 800206c:	f103 030c 	add.w	r3, r3, #12
 8002070:	2210      	movs	r2, #16
 8002072:	2100      	movs	r1, #0
 8002074:	4618      	mov	r0, r3
 8002076:	f007 fabb 	bl	80095f0 <strtol>
 800207a:	4603      	mov	r3, r0
 800207c:	f507 52c4 	add.w	r2, r7, #6272	; 0x1880
 8002080:	f102 020f 	add.w	r2, r2, #15
 8002084:	7013      	strb	r3, [r2, #0]
		sectorBuffer[sectorBufferIndex] = deHexedByte;
 8002086:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800208a:	f6a3 02a8 	subw	r2, r3, #2216	; 0x8a8
 800208e:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4413      	add	r3, r2
 8002096:	f507 52c4 	add.w	r2, r7, #6272	; 0x1880
 800209a:	f102 020f 	add.w	r2, r2, #15
 800209e:	7812      	ldrb	r2, [r2, #0]
 80020a0:	701a      	strb	r2, [r3, #0]
		sectorBufferIndex++;
 80020a2:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	3301      	adds	r3, #1
 80020aa:	f507 52c5 	add.w	r2, r7, #6304	; 0x18a0
 80020ae:	6013      	str	r3, [r2, #0]
		bytesLeft--;
 80020b0:	f507 53c4 	add.w	r3, r7, #6272	; 0x1880
 80020b4:	f103 031c 	add.w	r3, r3, #28
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	3b01      	subs	r3, #1
 80020bc:	f507 52c4 	add.w	r2, r7, #6272	; 0x1880
 80020c0:	f102 021c 	add.w	r2, r2, #28
 80020c4:	6013      	str	r3, [r2, #0]
		if(sectorBufferIndex == SECTOR_SIZE || bytesLeft == 0){
 80020c6:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020d0:	d006      	beq.n	80020e0 <configBitmapFromUart+0x380>
 80020d2:	f507 53c4 	add.w	r3, r7, #6272	; 0x1880
 80020d6:	f103 031c 	add.w	r3, r3, #28
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d148      	bne.n	8002172 <configBitmapFromUart+0x412>
			ext_flash_erase_4kB(currentSector*SECTOR_SIZE);
 80020e0:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 80020e4:	f103 0304 	add.w	r3, r3, #4
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	031b      	lsls	r3, r3, #12
 80020ec:	4618      	mov	r0, r3
 80020ee:	f001 fa0d 	bl	800350c <ext_flash_erase_4kB>
			ext_flash_write_multipage(currentSector*SECTOR_SIZE, sectorBuffer, sectorBufferIndex);
 80020f2:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 80020f6:	f103 0304 	add.w	r3, r3, #4
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	031b      	lsls	r3, r3, #12
 80020fe:	4618      	mov	r0, r3
 8002100:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	f107 0308 	add.w	r3, r7, #8
 800210a:	3b08      	subs	r3, #8
 800210c:	4619      	mov	r1, r3
 800210e:	f001 fb2d 	bl	800376c <ext_flash_write_multipage>
			sectorBufferIndex = 0;
 8002112:	2300      	movs	r3, #0
 8002114:	f507 52c5 	add.w	r2, r7, #6304	; 0x18a0
 8002118:	6013      	str	r3, [r2, #0]
			if(bytesLeft > 0){
 800211a:	f507 53c4 	add.w	r3, r7, #6272	; 0x1880
 800211e:	f103 031c 	add.w	r3, r3, #28
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2b00      	cmp	r3, #0
 8002126:	dd24      	ble.n	8002172 <configBitmapFromUart+0x412>
				if(currentSector == MAX_SECTOR){
 8002128:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 800212c:	f103 0304 	add.w	r3, r3, #4
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002136:	4293      	cmp	r3, r2
 8002138:	d110      	bne.n	800215c <configBitmapFromUart+0x3fc>
					printf("[cl] Warning: Ran out of external memory while writing bitmap #%d. Last %d bytes not saved. \n\r", bm.bitmapNumber, bytesLeft);
 800213a:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 800213e:	f103 0308 	add.w	r3, r3, #8
 8002142:	f6a3 03a8 	subw	r3, r3, #2216	; 0x8a8
 8002146:	881b      	ldrh	r3, [r3, #0]
 8002148:	f507 52c4 	add.w	r2, r7, #6272	; 0x1880
 800214c:	f102 021c 	add.w	r2, r2, #28
 8002150:	6812      	ldr	r2, [r2, #0]
 8002152:	4619      	mov	r1, r3
 8002154:	4836      	ldr	r0, [pc, #216]	; (8002230 <configBitmapFromUart+0x4d0>)
 8002156:	f007 f9a9 	bl	80094ac <iprintf>
					break;
 800215a:	e012      	b.n	8002182 <configBitmapFromUart+0x422>
				}
				currentSector++;
 800215c:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8002160:	f103 0304 	add.w	r3, r3, #4
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	3301      	adds	r3, #1
 8002168:	f507 52c5 	add.w	r2, r7, #6304	; 0x18a0
 800216c:	f102 0204 	add.w	r2, r2, #4
 8002170:	6013      	str	r3, [r2, #0]
 	while(bytesLeft > 0){
 8002172:	f507 53c4 	add.w	r3, r7, #6272	; 0x1880
 8002176:	f103 031c 	add.w	r3, r3, #28
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2b00      	cmp	r3, #0
 800217e:	f73f af39 	bgt.w	8001ff4 <configBitmapFromUart+0x294>
			}
		}
 	}
 	read_usart_message(msg, &huart1, 2, NEWLINE); //get rid of newline left in buffer after reading last 2 chars
 8002182:	f507 50c0 	add.w	r0, r7, #6144	; 0x1800
 8002186:	f100 000c 	add.w	r0, r0, #12
 800218a:	230d      	movs	r3, #13
 800218c:	2202      	movs	r2, #2
 800218e:	4929      	ldr	r1, [pc, #164]	; (8002234 <configBitmapFromUart+0x4d4>)
 8002190:	f002 ffc6 	bl	8005120 <read_usart_message>

 	blist.lastUsedSector = currentSector;
 8002194:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8002198:	f103 0304 	add.w	r3, r3, #4
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	b29a      	uxth	r2, r3
 80021a0:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 80021a4:	f103 0308 	add.w	r3, r3, #8
 80021a8:	f5a3 630a 	sub.w	r3, r3, #2208	; 0x8a0
 80021ac:	805a      	strh	r2, [r3, #2]
 	memcpy(sectorBuffer, (uint8_t *) &blist, sizeof(blist));
 80021ae:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 80021b2:	f101 0108 	add.w	r1, r1, #8
 80021b6:	f107 0308 	add.w	r3, r7, #8
 80021ba:	3b08      	subs	r3, #8
 80021bc:	f640 0204 	movw	r2, #2052	; 0x804
 80021c0:	4618      	mov	r0, r3
 80021c2:	f007 f95d 	bl	8009480 <memcpy>
 	ext_flash_erase_4kB(BITMAP_LIST_SECTOR*SECTOR_SIZE);
 80021c6:	f44f 2048 	mov.w	r0, #819200	; 0xc8000
 80021ca:	f001 f99f 	bl	800350c <ext_flash_erase_4kB>
 	ext_flash_write_multipage(BITMAP_LIST_SECTOR*SECTOR_SIZE, sectorBuffer, sizeof(blist));
 80021ce:	f107 0308 	add.w	r3, r7, #8
 80021d2:	3b08      	subs	r3, #8
 80021d4:	f640 0204 	movw	r2, #2052	; 0x804
 80021d8:	4619      	mov	r1, r3
 80021da:	f44f 2048 	mov.w	r0, #819200	; 0xc8000
 80021de:	f001 fac5 	bl	800376c <ext_flash_write_multipage>

	if(bytesLeft > 0){
 80021e2:	f507 53c4 	add.w	r3, r7, #6272	; 0x1880
 80021e6:	f103 031c 	add.w	r3, r3, #28
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	dd0d      	ble.n	800220c <configBitmapFromUart+0x4ac>
		printf("[cl] Bitmap #%d has been PARTIALLY written.\n\r", bm.bitmapNumber);
 80021f0:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 80021f4:	f103 0308 	add.w	r3, r3, #8
 80021f8:	f6a3 03a8 	subw	r3, r3, #2216	; 0x8a8
 80021fc:	881b      	ldrh	r3, [r3, #0]
 80021fe:	4619      	mov	r1, r3
 8002200:	480d      	ldr	r0, [pc, #52]	; (8002238 <configBitmapFromUart+0x4d8>)
 8002202:	f007 f953 	bl	80094ac <iprintf>
		return 1001;
 8002206:	f240 33e9 	movw	r3, #1001	; 0x3e9
 800220a:	e00b      	b.n	8002224 <configBitmapFromUart+0x4c4>
	}
	printf("[cl] Bitmap #%d has been written.\n\r", bm.bitmapNumber);
 800220c:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8002210:	f103 0308 	add.w	r3, r3, #8
 8002214:	f6a3 03a8 	subw	r3, r3, #2216	; 0x8a8
 8002218:	881b      	ldrh	r3, [r3, #0]
 800221a:	4619      	mov	r1, r3
 800221c:	4807      	ldr	r0, [pc, #28]	; (800223c <configBitmapFromUart+0x4dc>)
 800221e:	f007 f945 	bl	80094ac <iprintf>
	return 0;
 8002222:	2300      	movs	r3, #0
}
 8002224:	4618      	mov	r0, r3
 8002226:	f507 57c5 	add.w	r7, r7, #6304	; 0x18a0
 800222a:	3708      	adds	r7, #8
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	0800a7c0 	.word	0x0800a7c0
 8002234:	20002150 	.word	0x20002150
 8002238:	0800a820 	.word	0x0800a820
 800223c:	0800a850 	.word	0x0800a850

08002240 <configMarkBitmapsForDelete>:

int configMarkBitmapsForDelete(){
 8002240:	b580      	push	{r7, lr}
 8002242:	f5ad 5d80 	sub.w	sp, sp, #4096	; 0x1000
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
	ext_flash_erase_4kB(BITMAP_LIST_SECTOR*SECTOR_SIZE);
 800224a:	f44f 2048 	mov.w	r0, #819200	; 0xc8000
 800224e:	f001 f95d 	bl	800350c <ext_flash_erase_4kB>
	struct bitmapList bl;
	bl.totalBitmaps = 0;
 8002252:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002256:	f103 0308 	add.w	r3, r3, #8
 800225a:	f6a3 0304 	subw	r3, r3, #2052	; 0x804
 800225e:	2200      	movs	r2, #0
 8002260:	801a      	strh	r2, [r3, #0]
	bl.lastUsedSector = BITMAP_LIST_SECTOR;
 8002262:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002266:	f103 0308 	add.w	r3, r3, #8
 800226a:	f6a3 0304 	subw	r3, r3, #2052	; 0x804
 800226e:	22c8      	movs	r2, #200	; 0xc8
 8002270:	805a      	strh	r2, [r3, #2]
	uint8_t buff[sizeof(bl)];
	memcpy(buff, (uint8_t *) &bl, sizeof(bl));
 8002272:	f107 0308 	add.w	r3, r7, #8
 8002276:	4619      	mov	r1, r3
 8002278:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800227c:	f103 0308 	add.w	r3, r3, #8
 8002280:	f6a3 0204 	subw	r2, r3, #2052	; 0x804
 8002284:	f1a1 0308 	sub.w	r3, r1, #8
 8002288:	4611      	mov	r1, r2
 800228a:	f640 0204 	movw	r2, #2052	; 0x804
 800228e:	4618      	mov	r0, r3
 8002290:	f007 f8f6 	bl	8009480 <memcpy>
	ext_flash_write_multipage(BITMAP_LIST_SECTOR*SECTOR_SIZE, buff, sizeof(bl));
 8002294:	f107 0308 	add.w	r3, r7, #8
 8002298:	3b08      	subs	r3, #8
 800229a:	f640 0204 	movw	r2, #2052	; 0x804
 800229e:	4619      	mov	r1, r3
 80022a0:	f44f 2048 	mov.w	r0, #819200	; 0xc8000
 80022a4:	f001 fa62 	bl	800376c <ext_flash_write_multipage>
	printf("[cl] Bitmaps marked for delete.\n\r");
 80022a8:	4804      	ldr	r0, [pc, #16]	; (80022bc <configMarkBitmapsForDelete+0x7c>)
 80022aa:	f007 f8ff 	bl	80094ac <iprintf>
	return 0;
 80022ae:	2300      	movs	r3, #0
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	f507 5780 	add.w	r7, r7, #4096	; 0x1000
 80022b6:	3708      	adds	r7, #8
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	0800a874 	.word	0x0800a874

080022c0 <configScreensFromUart>:


int configScreensFromUart(){
 80022c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022c2:	f5ad 5d4b 	sub.w	sp, sp, #12992	; 0x32c0
 80022c6:	b087      	sub	sp, #28
 80022c8:	af04      	add	r7, sp, #16
	int count;
	char msg[128];
	UART_READ_STRING(); //read general config - number of screens
 80022ca:	f507 5048 	add.w	r0, r7, #12800	; 0x3200
 80022ce:	f100 0020 	add.w	r0, r0, #32
 80022d2:	230d      	movs	r3, #13
 80022d4:	2280      	movs	r2, #128	; 0x80
 80022d6:	4989      	ldr	r1, [pc, #548]	; (80024fc <configScreensFromUart+0x23c>)
 80022d8:	f002 ff22 	bl	8005120 <read_usart_message>
 80022dc:	4603      	mov	r3, r0
 80022de:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 80022e2:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 80022e6:	6013      	str	r3, [r2, #0]
 80022e8:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 80022ec:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d0e9      	beq.n	80022ca <configScreensFromUart+0xa>
 80022f6:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 80022fa:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	3b01      	subs	r3, #1
 8002302:	f503 534b 	add.w	r3, r3, #12992	; 0x32c0
 8002306:	f103 0308 	add.w	r3, r3, #8
 800230a:	443b      	add	r3, r7
 800230c:	2200      	movs	r2, #0
 800230e:	f803 2ca8 	strb.w	r2, [r3, #-168]
	int totalScreens = atoi(msg);
 8002312:	f507 5348 	add.w	r3, r7, #12800	; 0x3200
 8002316:	f103 0320 	add.w	r3, r3, #32
 800231a:	4618      	mov	r0, r3
 800231c:	f007 f882 	bl	8009424 <atoi>
 8002320:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002324:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8002328:	6018      	str	r0, [r3, #0]

	if(totalScreens < 1 || totalScreens >256){
 800232a:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 800232e:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2b00      	cmp	r3, #0
 8002336:	dd07      	ble.n	8002348 <configScreensFromUart+0x88>
 8002338:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 800233c:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002346:	dd0a      	ble.n	800235e <configScreensFromUart+0x9e>
		printf("[cl] Got %d, which is not a valid number of screens.\n\r", totalScreens);
 8002348:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 800234c:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8002350:	6819      	ldr	r1, [r3, #0]
 8002352:	486b      	ldr	r0, [pc, #428]	; (8002500 <configScreensFromUart+0x240>)
 8002354:	f007 f8aa 	bl	80094ac <iprintf>
		return 2;
 8002358:	2302      	movs	r3, #2
 800235a:	f000 bdee 	b.w	8002f3a <configScreensFromUart+0xc7a>
	}

	struct generalConfig gconf;

	memset(&gconf.screenSectors, 0, sizeof(gconf.screenSectors));
 800235e:	f507 5340 	add.w	r3, r7, #12288	; 0x3000
 8002362:	f103 031c 	add.w	r3, r3, #28
 8002366:	3302      	adds	r3, #2
 8002368:	f44f 7200 	mov.w	r2, #512	; 0x200
 800236c:	2100      	movs	r1, #0
 800236e:	4618      	mov	r0, r3
 8002370:	f007 f894 	bl	800949c <memset>
	gconf.totalScreens = totalScreens;
 8002374:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002378:	f103 0328 	add.w	r3, r3, #40	; 0x28
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	b2da      	uxtb	r2, r3
 8002380:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8002384:	f103 0308 	add.w	r3, r3, #8
 8002388:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 800238c:	701a      	strb	r2, [r3, #0]

	printf("[cl] Ok, expecting %d screens worth of data.\n\r", totalScreens);
 800238e:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002392:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8002396:	6819      	ldr	r1, [r3, #0]
 8002398:	485a      	ldr	r0, [pc, #360]	; (8002504 <configScreensFromUart+0x244>)
 800239a:	f007 f887 	bl	80094ac <iprintf>

	uint8_t currentScreenIndex = -1;
 800239e:	23ff      	movs	r3, #255	; 0xff
 80023a0:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 80023a4:	f102 0207 	add.w	r2, r2, #7
 80023a8:	7013      	strb	r3, [r2, #0]
	uint16_t currentSector = GENERAL_CONFIG_SECTOR;
 80023aa:	2300      	movs	r3, #0
 80023ac:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 80023b0:	f102 0204 	add.w	r2, r2, #4
 80023b4:	8013      	strh	r3, [r2, #0]
	uint16_t currentScreenObjectsLeft = 0;
 80023b6:	2300      	movs	r3, #0
 80023b8:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 80023bc:	f102 0202 	add.w	r2, r2, #2
 80023c0:	8013      	strh	r3, [r2, #0]

	char screenStr[] = "screen";
 80023c2:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 80023c6:	f103 0308 	add.w	r3, r3, #8
 80023ca:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 80023ce:	4a4e      	ldr	r2, [pc, #312]	; (8002508 <configScreensFromUart+0x248>)
 80023d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80023d4:	6018      	str	r0, [r3, #0]
 80023d6:	3304      	adds	r3, #4
 80023d8:	8019      	strh	r1, [r3, #0]
 80023da:	3302      	adds	r3, #2
 80023dc:	0c0a      	lsrs	r2, r1, #16
 80023de:	701a      	strb	r2, [r3, #0]

	#define MAX_DATA_SIZE 8192
	uint8_t sectorBuffer[SECTOR_SIZE]; //holds sector before writing to external flash
	int sectorBufferIndex = 0;
 80023e0:	2300      	movs	r3, #0
 80023e2:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 80023e6:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 80023ea:	6013      	str	r3, [r2, #0]
	uint8_t dataBuffer[MAX_DATA_SIZE];
	int dataBufferIndex = 0;
 80023ec:	2300      	movs	r3, #0
 80023ee:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 80023f2:	f102 0238 	add.w	r2, r2, #56	; 0x38
 80023f6:	6013      	str	r3, [r2, #0]

	while(1){

		if(currentScreenIndex + 1 == totalScreens){
 80023f8:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 80023fc:	f103 0307 	add.w	r3, r3, #7
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	3301      	adds	r3, #1
 8002404:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002408:	f102 0228 	add.w	r2, r2, #40	; 0x28
 800240c:	6812      	ldr	r2, [r2, #0]
 800240e:	429a      	cmp	r2, r3
 8002410:	d131      	bne.n	8002476 <configScreensFromUart+0x1b6>
			printf("[cl] All screens' data received.\n\r");
 8002412:	483e      	ldr	r0, [pc, #248]	; (800250c <configScreensFromUart+0x24c>)
 8002414:	f007 f84a 	bl	80094ac <iprintf>
	}

	//all screens have been written.
	//Now save generic config, since sector address array has been completed:

	printf("Gconf screens %d \n\r", gconf.totalScreens);
 8002418:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 800241c:	f103 0308 	add.w	r3, r3, #8
 8002420:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	4619      	mov	r1, r3
 8002428:	4839      	ldr	r0, [pc, #228]	; (8002510 <configScreensFromUart+0x250>)
 800242a:	f007 f83f 	bl	80094ac <iprintf>

	sectorBufferIndex = 0;
 800242e:	2300      	movs	r3, #0
 8002430:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002434:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8002438:	6013      	str	r3, [r2, #0]
	memcpy(sectorBuffer+sectorBufferIndex, (uint8_t *) &gconf, 100);//sizeof(gconf));
 800243a:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 800243e:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8002448:	f103 0328 	add.w	r3, r3, #40	; 0x28
 800244c:	3b14      	subs	r3, #20
 800244e:	4413      	add	r3, r2
 8002450:	f507 5140 	add.w	r1, r7, #12288	; 0x3000
 8002454:	f101 011c 	add.w	r1, r1, #28
 8002458:	2264      	movs	r2, #100	; 0x64
 800245a:	4618      	mov	r0, r3
 800245c:	f007 f810 	bl	8009480 <memcpy>

	printf("J ");
 8002460:	482c      	ldr	r0, [pc, #176]	; (8002514 <configScreensFromUart+0x254>)
 8002462:	f007 f823 	bl	80094ac <iprintf>
	int j;
	for(j=0; j<sizeof(gconf); j++){
 8002466:	2300      	movs	r3, #0
 8002468:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 800246c:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8002470:	6013      	str	r3, [r2, #0]
 8002472:	f000 bd41 	b.w	8002ef8 <configScreensFromUart+0xc38>
		UART_READ_STRING();
 8002476:	f507 5048 	add.w	r0, r7, #12800	; 0x3200
 800247a:	f100 0020 	add.w	r0, r0, #32
 800247e:	230d      	movs	r3, #13
 8002480:	2280      	movs	r2, #128	; 0x80
 8002482:	491e      	ldr	r1, [pc, #120]	; (80024fc <configScreensFromUart+0x23c>)
 8002484:	f002 fe4c 	bl	8005120 <read_usart_message>
 8002488:	4603      	mov	r3, r0
 800248a:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 800248e:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8002492:	6013      	str	r3, [r2, #0]
 8002494:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002498:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d0e9      	beq.n	8002476 <configScreensFromUart+0x1b6>
 80024a2:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 80024a6:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	3b01      	subs	r3, #1
 80024ae:	f503 534b 	add.w	r3, r3, #12992	; 0x32c0
 80024b2:	f103 0308 	add.w	r3, r3, #8
 80024b6:	443b      	add	r3, r7
 80024b8:	2200      	movs	r2, #0
 80024ba:	f803 2ca8 	strb.w	r2, [r3, #-168]
		if(strcmp(screenStr, msg) != 0){
 80024be:	f507 5248 	add.w	r2, r7, #12800	; 0x3200
 80024c2:	f102 0220 	add.w	r2, r2, #32
 80024c6:	f507 5340 	add.w	r3, r7, #12288	; 0x3000
 80024ca:	f103 0314 	add.w	r3, r3, #20
 80024ce:	4611      	mov	r1, r2
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7fd fe7d 	bl	80001d0 <strcmp>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d01f      	beq.n	800251c <configScreensFromUart+0x25c>
			printf("[cl] Unexpected input - wanted %s, got %s. \n\r",screenStr, msg);
 80024dc:	f507 5248 	add.w	r2, r7, #12800	; 0x3200
 80024e0:	f102 0220 	add.w	r2, r2, #32
 80024e4:	f507 5340 	add.w	r3, r7, #12288	; 0x3000
 80024e8:	f103 0314 	add.w	r3, r3, #20
 80024ec:	4619      	mov	r1, r3
 80024ee:	480a      	ldr	r0, [pc, #40]	; (8002518 <configScreensFromUart+0x258>)
 80024f0:	f006 ffdc 	bl	80094ac <iprintf>
			return 3;
 80024f4:	2303      	movs	r3, #3
 80024f6:	f000 bd20 	b.w	8002f3a <configScreensFromUart+0xc7a>
 80024fa:	bf00      	nop
 80024fc:	20002150 	.word	0x20002150
 8002500:	0800a898 	.word	0x0800a898
 8002504:	0800a8d0 	.word	0x0800a8d0
 8002508:	0800ab54 	.word	0x0800ab54
 800250c:	0800a900 	.word	0x0800a900
 8002510:	0800a924 	.word	0x0800a924
 8002514:	0800a938 	.word	0x0800a938
 8002518:	0800a93c 	.word	0x0800a93c
		UART_READ_STRING();
 800251c:	f507 5048 	add.w	r0, r7, #12800	; 0x3200
 8002520:	f100 0020 	add.w	r0, r0, #32
 8002524:	230d      	movs	r3, #13
 8002526:	2280      	movs	r2, #128	; 0x80
 8002528:	497b      	ldr	r1, [pc, #492]	; (8002718 <configScreensFromUart+0x458>)
 800252a:	f002 fdf9 	bl	8005120 <read_usart_message>
 800252e:	4603      	mov	r3, r0
 8002530:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002534:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8002538:	6013      	str	r3, [r2, #0]
 800253a:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 800253e:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d0e9      	beq.n	800251c <configScreensFromUart+0x25c>
 8002548:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 800254c:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	3b01      	subs	r3, #1
 8002554:	f503 534b 	add.w	r3, r3, #12992	; 0x32c0
 8002558:	f103 0308 	add.w	r3, r3, #8
 800255c:	443b      	add	r3, r7
 800255e:	2200      	movs	r2, #0
 8002560:	f803 2ca8 	strb.w	r2, [r3, #-168]
		currentScreenObjectsLeft = atoi(msg);
 8002564:	f507 5348 	add.w	r3, r7, #12800	; 0x3200
 8002568:	f103 0320 	add.w	r3, r3, #32
 800256c:	4618      	mov	r0, r3
 800256e:	f006 ff59 	bl	8009424 <atoi>
 8002572:	4603      	mov	r3, r0
 8002574:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 8002578:	f102 0202 	add.w	r2, r2, #2
 800257c:	8013      	strh	r3, [r2, #0]
		printf("[cl] Ok, expecting %d objects for current screen.\n\r", currentScreenObjectsLeft);
 800257e:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8002582:	f103 0302 	add.w	r3, r3, #2
 8002586:	881b      	ldrh	r3, [r3, #0]
 8002588:	4619      	mov	r1, r3
 800258a:	4864      	ldr	r0, [pc, #400]	; (800271c <configScreensFromUart+0x45c>)
 800258c:	f006 ff8e 	bl	80094ac <iprintf>
		screenVar.objectCount = currentScreenObjectsLeft;
 8002590:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8002594:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 8002598:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 800259c:	f102 0202 	add.w	r2, r2, #2
 80025a0:	8812      	ldrh	r2, [r2, #0]
 80025a2:	805a      	strh	r2, [r3, #2]
		screenVar.screenNumber = currentScreenIndex;
 80025a4:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 80025a8:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 80025ac:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 80025b0:	f102 0207 	add.w	r2, r2, #7
 80025b4:	7812      	ldrb	r2, [r2, #0]
 80025b6:	701a      	strb	r2, [r3, #0]
		currentSector += 1; //begin new sector -- screens are sector-aligned for easier access
 80025b8:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 80025bc:	f103 0304 	add.w	r3, r3, #4
 80025c0:	881b      	ldrh	r3, [r3, #0]
 80025c2:	3301      	adds	r3, #1
 80025c4:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 80025c8:	f102 0204 	add.w	r2, r2, #4
 80025cc:	8013      	strh	r3, [r2, #0]
		currentScreenIndex += 1;
 80025ce:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 80025d2:	f103 0307 	add.w	r3, r3, #7
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	3301      	adds	r3, #1
 80025da:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 80025de:	f102 0207 	add.w	r2, r2, #7
 80025e2:	7013      	strb	r3, [r2, #0]
		gconf.screenSectors[currentScreenIndex] = currentSector;
 80025e4:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 80025e8:	f103 0307 	add.w	r3, r3, #7
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 80025f2:	f102 0208 	add.w	r2, r2, #8
 80025f6:	f5a2 722b 	sub.w	r2, r2, #684	; 0x2ac
 80025fa:	005b      	lsls	r3, r3, #1
 80025fc:	4413      	add	r3, r2
 80025fe:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 8002602:	f102 0204 	add.w	r2, r2, #4
 8002606:	8812      	ldrh	r2, [r2, #0]
 8002608:	805a      	strh	r2, [r3, #2]
		ext_flash_erase_4kB(currentSector*SECTOR_SIZE);
 800260a:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 800260e:	f103 0304 	add.w	r3, r3, #4
 8002612:	881b      	ldrh	r3, [r3, #0]
 8002614:	031b      	lsls	r3, r3, #12
 8002616:	4618      	mov	r0, r3
 8002618:	f000 ff78 	bl	800350c <ext_flash_erase_4kB>
		memset(sectorBuffer, 0, SECTOR_SIZE);
 800261c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8002620:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8002624:	3b14      	subs	r3, #20
 8002626:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800262a:	2100      	movs	r1, #0
 800262c:	4618      	mov	r0, r3
 800262e:	f006 ff35 	bl	800949c <memset>
		sectorBufferIndex = 0;
 8002632:	2300      	movs	r3, #0
 8002634:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002638:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 800263c:	6013      	str	r3, [r2, #0]
		memcpy(sectorBuffer+sectorBufferIndex, (uint8_t *) &screenVar, sizeof(screenVar));
 800263e:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002642:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800264c:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8002650:	3b14      	subs	r3, #20
 8002652:	4413      	add	r3, r2
 8002654:	f507 7232 	add.w	r2, r7, #712	; 0x2c8
 8002658:	f5a2 722e 	sub.w	r2, r2, #696	; 0x2b8
 800265c:	6812      	ldr	r2, [r2, #0]
 800265e:	601a      	str	r2, [r3, #0]
		sectorBufferIndex += sizeof(screenVar);
 8002660:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002664:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	3304      	adds	r3, #4
 800266c:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002670:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8002674:	6013      	str	r3, [r2, #0]
		while(currentScreenObjectsLeft > 0){
 8002676:	f000 bc05 	b.w	8002e84 <configScreensFromUart+0xbc4>
			currentScreenObjectsLeft--;
 800267a:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 800267e:	f103 0302 	add.w	r3, r3, #2
 8002682:	881b      	ldrh	r3, [r3, #0]
 8002684:	3b01      	subs	r3, #1
 8002686:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 800268a:	f102 0202 	add.w	r2, r2, #2
 800268e:	8013      	strh	r3, [r2, #0]
			UART_READ_STRING();
 8002690:	f507 5048 	add.w	r0, r7, #12800	; 0x3200
 8002694:	f100 0020 	add.w	r0, r0, #32
 8002698:	230d      	movs	r3, #13
 800269a:	2280      	movs	r2, #128	; 0x80
 800269c:	491e      	ldr	r1, [pc, #120]	; (8002718 <configScreensFromUart+0x458>)
 800269e:	f002 fd3f 	bl	8005120 <read_usart_message>
 80026a2:	4603      	mov	r3, r0
 80026a4:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 80026a8:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 80026ac:	6013      	str	r3, [r2, #0]
 80026ae:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 80026b2:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d0e9      	beq.n	8002690 <configScreensFromUart+0x3d0>
 80026bc:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 80026c0:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	3b01      	subs	r3, #1
 80026c8:	f503 534b 	add.w	r3, r3, #12992	; 0x32c0
 80026cc:	f103 0308 	add.w	r3, r3, #8
 80026d0:	443b      	add	r3, r7
 80026d2:	2200      	movs	r2, #0
 80026d4:	f803 2ca8 	strb.w	r2, [r3, #-168]
			currentObject.objectType = stringToObjectType(msg);
 80026d8:	f507 5348 	add.w	r3, r7, #12800	; 0x3200
 80026dc:	f103 0320 	add.w	r3, r3, #32
 80026e0:	4618      	mov	r0, r3
 80026e2:	f000 fed3 	bl	800348c <stringToObjectType>
 80026e6:	4603      	mov	r3, r0
 80026e8:	461a      	mov	r2, r3
 80026ea:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 80026ee:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 80026f2:	701a      	strb	r2, [r3, #0]
			if(currentObject.objectType == none){
 80026f4:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 80026f8:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d110      	bne.n	8002724 <configScreensFromUart+0x464>
				printf("[cl] Object type %s not recognized. \n\r", msg);
 8002702:	f507 5348 	add.w	r3, r7, #12800	; 0x3200
 8002706:	f103 0320 	add.w	r3, r3, #32
 800270a:	4619      	mov	r1, r3
 800270c:	4804      	ldr	r0, [pc, #16]	; (8002720 <configScreensFromUart+0x460>)
 800270e:	f006 fecd 	bl	80094ac <iprintf>
				return 4;
 8002712:	2304      	movs	r3, #4
 8002714:	f000 bc11 	b.w	8002f3a <configScreensFromUart+0xc7a>
 8002718:	20002150 	.word	0x20002150
 800271c:	0800a96c 	.word	0x0800a96c
 8002720:	0800a9a0 	.word	0x0800a9a0
			UART_READ_STRING();
 8002724:	f507 5048 	add.w	r0, r7, #12800	; 0x3200
 8002728:	f100 0020 	add.w	r0, r0, #32
 800272c:	230d      	movs	r3, #13
 800272e:	2280      	movs	r2, #128	; 0x80
 8002730:	49cf      	ldr	r1, [pc, #828]	; (8002a70 <configScreensFromUart+0x7b0>)
 8002732:	f002 fcf5 	bl	8005120 <read_usart_message>
 8002736:	4603      	mov	r3, r0
 8002738:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 800273c:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8002740:	6013      	str	r3, [r2, #0]
 8002742:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002746:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d0e9      	beq.n	8002724 <configScreensFromUart+0x464>
 8002750:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002754:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	3b01      	subs	r3, #1
 800275c:	f503 534b 	add.w	r3, r3, #12992	; 0x32c0
 8002760:	f103 0308 	add.w	r3, r3, #8
 8002764:	443b      	add	r3, r7
 8002766:	2200      	movs	r2, #0
 8002768:	f803 2ca8 	strb.w	r2, [r3, #-168]
			currentObject.objectId = (uint16_t) atoi(msg);
 800276c:	f507 5348 	add.w	r3, r7, #12800	; 0x3200
 8002770:	f103 0320 	add.w	r3, r3, #32
 8002774:	4618      	mov	r0, r3
 8002776:	f006 fe55 	bl	8009424 <atoi>
 800277a:	4603      	mov	r3, r0
 800277c:	b29a      	uxth	r2, r3
 800277e:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8002782:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8002786:	805a      	strh	r2, [r3, #2]
			UART_READ_STRING();
 8002788:	f507 5048 	add.w	r0, r7, #12800	; 0x3200
 800278c:	f100 0020 	add.w	r0, r0, #32
 8002790:	230d      	movs	r3, #13
 8002792:	2280      	movs	r2, #128	; 0x80
 8002794:	49b6      	ldr	r1, [pc, #728]	; (8002a70 <configScreensFromUart+0x7b0>)
 8002796:	f002 fcc3 	bl	8005120 <read_usart_message>
 800279a:	4603      	mov	r3, r0
 800279c:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 80027a0:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 80027a4:	6013      	str	r3, [r2, #0]
 80027a6:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 80027aa:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d0e9      	beq.n	8002788 <configScreensFromUart+0x4c8>
 80027b4:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 80027b8:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	3b01      	subs	r3, #1
 80027c0:	f503 534b 	add.w	r3, r3, #12992	; 0x32c0
 80027c4:	f103 0308 	add.w	r3, r3, #8
 80027c8:	443b      	add	r3, r7
 80027ca:	2200      	movs	r2, #0
 80027cc:	f803 2ca8 	strb.w	r2, [r3, #-168]
			currentObject.xstart = (uint16_t) atoi(msg);
 80027d0:	f507 5348 	add.w	r3, r7, #12800	; 0x3200
 80027d4:	f103 0320 	add.w	r3, r3, #32
 80027d8:	4618      	mov	r0, r3
 80027da:	f006 fe23 	bl	8009424 <atoi>
 80027de:	4603      	mov	r3, r0
 80027e0:	b29a      	uxth	r2, r3
 80027e2:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 80027e6:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 80027ea:	809a      	strh	r2, [r3, #4]
			UART_READ_STRING();
 80027ec:	f507 5048 	add.w	r0, r7, #12800	; 0x3200
 80027f0:	f100 0020 	add.w	r0, r0, #32
 80027f4:	230d      	movs	r3, #13
 80027f6:	2280      	movs	r2, #128	; 0x80
 80027f8:	499d      	ldr	r1, [pc, #628]	; (8002a70 <configScreensFromUart+0x7b0>)
 80027fa:	f002 fc91 	bl	8005120 <read_usart_message>
 80027fe:	4603      	mov	r3, r0
 8002800:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002804:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8002808:	6013      	str	r3, [r2, #0]
 800280a:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 800280e:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d0e9      	beq.n	80027ec <configScreensFromUart+0x52c>
 8002818:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 800281c:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	3b01      	subs	r3, #1
 8002824:	f503 534b 	add.w	r3, r3, #12992	; 0x32c0
 8002828:	f103 0308 	add.w	r3, r3, #8
 800282c:	443b      	add	r3, r7
 800282e:	2200      	movs	r2, #0
 8002830:	f803 2ca8 	strb.w	r2, [r3, #-168]
			currentObject.ystart = (uint16_t) atoi(msg);
 8002834:	f507 5348 	add.w	r3, r7, #12800	; 0x3200
 8002838:	f103 0320 	add.w	r3, r3, #32
 800283c:	4618      	mov	r0, r3
 800283e:	f006 fdf1 	bl	8009424 <atoi>
 8002842:	4603      	mov	r3, r0
 8002844:	b29a      	uxth	r2, r3
 8002846:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 800284a:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 800284e:	80da      	strh	r2, [r3, #6]
			UART_READ_STRING();
 8002850:	f507 5048 	add.w	r0, r7, #12800	; 0x3200
 8002854:	f100 0020 	add.w	r0, r0, #32
 8002858:	230d      	movs	r3, #13
 800285a:	2280      	movs	r2, #128	; 0x80
 800285c:	4984      	ldr	r1, [pc, #528]	; (8002a70 <configScreensFromUart+0x7b0>)
 800285e:	f002 fc5f 	bl	8005120 <read_usart_message>
 8002862:	4603      	mov	r3, r0
 8002864:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002868:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 800286c:	6013      	str	r3, [r2, #0]
 800286e:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002872:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d0e9      	beq.n	8002850 <configScreensFromUart+0x590>
 800287c:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002880:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	3b01      	subs	r3, #1
 8002888:	f503 534b 	add.w	r3, r3, #12992	; 0x32c0
 800288c:	f103 0308 	add.w	r3, r3, #8
 8002890:	443b      	add	r3, r7
 8002892:	2200      	movs	r2, #0
 8002894:	f803 2ca8 	strb.w	r2, [r3, #-168]
			currentObject.xend = (uint16_t) atoi(msg);
 8002898:	f507 5348 	add.w	r3, r7, #12800	; 0x3200
 800289c:	f103 0320 	add.w	r3, r3, #32
 80028a0:	4618      	mov	r0, r3
 80028a2:	f006 fdbf 	bl	8009424 <atoi>
 80028a6:	4603      	mov	r3, r0
 80028a8:	b29a      	uxth	r2, r3
 80028aa:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 80028ae:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 80028b2:	811a      	strh	r2, [r3, #8]
			UART_READ_STRING();
 80028b4:	f507 5048 	add.w	r0, r7, #12800	; 0x3200
 80028b8:	f100 0020 	add.w	r0, r0, #32
 80028bc:	230d      	movs	r3, #13
 80028be:	2280      	movs	r2, #128	; 0x80
 80028c0:	496b      	ldr	r1, [pc, #428]	; (8002a70 <configScreensFromUart+0x7b0>)
 80028c2:	f002 fc2d 	bl	8005120 <read_usart_message>
 80028c6:	4603      	mov	r3, r0
 80028c8:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 80028cc:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 80028d0:	6013      	str	r3, [r2, #0]
 80028d2:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 80028d6:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d0e9      	beq.n	80028b4 <configScreensFromUart+0x5f4>
 80028e0:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 80028e4:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	3b01      	subs	r3, #1
 80028ec:	f503 534b 	add.w	r3, r3, #12992	; 0x32c0
 80028f0:	f103 0308 	add.w	r3, r3, #8
 80028f4:	443b      	add	r3, r7
 80028f6:	2200      	movs	r2, #0
 80028f8:	f803 2ca8 	strb.w	r2, [r3, #-168]
			currentObject.yend = (uint16_t) atoi(msg);
 80028fc:	f507 5348 	add.w	r3, r7, #12800	; 0x3200
 8002900:	f103 0320 	add.w	r3, r3, #32
 8002904:	4618      	mov	r0, r3
 8002906:	f006 fd8d 	bl	8009424 <atoi>
 800290a:	4603      	mov	r3, r0
 800290c:	b29a      	uxth	r2, r3
 800290e:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8002912:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8002916:	815a      	strh	r2, [r3, #10]
			UART_READ_STRING();
 8002918:	f507 5048 	add.w	r0, r7, #12800	; 0x3200
 800291c:	f100 0020 	add.w	r0, r0, #32
 8002920:	230d      	movs	r3, #13
 8002922:	2280      	movs	r2, #128	; 0x80
 8002924:	4952      	ldr	r1, [pc, #328]	; (8002a70 <configScreensFromUart+0x7b0>)
 8002926:	f002 fbfb 	bl	8005120 <read_usart_message>
 800292a:	4603      	mov	r3, r0
 800292c:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002930:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8002934:	6013      	str	r3, [r2, #0]
 8002936:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 800293a:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d0e9      	beq.n	8002918 <configScreensFromUart+0x658>
 8002944:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002948:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	3b01      	subs	r3, #1
 8002950:	f503 534b 	add.w	r3, r3, #12992	; 0x32c0
 8002954:	f103 0308 	add.w	r3, r3, #8
 8002958:	443b      	add	r3, r7
 800295a:	2200      	movs	r2, #0
 800295c:	f803 2ca8 	strb.w	r2, [r3, #-168]
			currentObject.dataLen = (uint16_t) atoi(msg);
 8002960:	f507 5348 	add.w	r3, r7, #12800	; 0x3200
 8002964:	f103 0320 	add.w	r3, r3, #32
 8002968:	4618      	mov	r0, r3
 800296a:	f006 fd5b 	bl	8009424 <atoi>
 800296e:	4603      	mov	r3, r0
 8002970:	b29a      	uxth	r2, r3
 8002972:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8002976:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 800297a:	819a      	strh	r2, [r3, #12]
			PRINT_OBJECT_HEADER(currentObject);
 800297c:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8002980:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	461c      	mov	r4, r3
 8002988:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 800298c:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8002990:	885b      	ldrh	r3, [r3, #2]
 8002992:	461d      	mov	r5, r3
 8002994:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8002998:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 800299c:	889b      	ldrh	r3, [r3, #4]
 800299e:	461e      	mov	r6, r3
 80029a0:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 80029a4:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 80029a8:	88db      	ldrh	r3, [r3, #6]
 80029aa:	461a      	mov	r2, r3
 80029ac:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 80029b0:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 80029b4:	891b      	ldrh	r3, [r3, #8]
 80029b6:	4619      	mov	r1, r3
 80029b8:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 80029bc:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 80029c0:	895b      	ldrh	r3, [r3, #10]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 80029c8:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 80029cc:	899b      	ldrh	r3, [r3, #12]
 80029ce:	9303      	str	r3, [sp, #12]
 80029d0:	9002      	str	r0, [sp, #8]
 80029d2:	9101      	str	r1, [sp, #4]
 80029d4:	9200      	str	r2, [sp, #0]
 80029d6:	4633      	mov	r3, r6
 80029d8:	462a      	mov	r2, r5
 80029da:	4621      	mov	r1, r4
 80029dc:	4825      	ldr	r0, [pc, #148]	; (8002a74 <configScreensFromUart+0x7b4>)
 80029de:	f006 fd65 	bl	80094ac <iprintf>
			if(currentObject.dataLen > MAX_DATA_SIZE){
 80029e2:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 80029e6:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 80029ea:	899b      	ldrh	r3, [r3, #12]
 80029ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029f0:	d90c      	bls.n	8002a0c <configScreensFromUart+0x74c>
				printf("[cl] Object (id=%d) data exceeds MAX_DATA_SIZE = %d.\n\r", currentObject.objectId, MAX_DATA_SIZE);
 80029f2:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 80029f6:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 80029fa:	885b      	ldrh	r3, [r3, #2]
 80029fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a00:	4619      	mov	r1, r3
 8002a02:	481d      	ldr	r0, [pc, #116]	; (8002a78 <configScreensFromUart+0x7b8>)
 8002a04:	f006 fd52 	bl	80094ac <iprintf>
				return 5;
 8002a08:	2305      	movs	r3, #5
 8002a0a:	e23a      	b.n	8002e82 <configScreensFromUart+0xbc2>
			int spaceLeft = SECTOR_SIZE - sectorBufferIndex;
 8002a0c:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002a10:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8002a1a:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002a1e:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8002a22:	6013      	str	r3, [r2, #0]
			if(spaceLeft >= sizeof(currentObject)){
 8002a24:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002a28:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	2b0d      	cmp	r3, #13
 8002a30:	d924      	bls.n	8002a7c <configScreensFromUart+0x7bc>
				memcpy(sectorBuffer+sectorBufferIndex, (uint8_t *) &currentObject, sizeof(currentObject));
 8002a32:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002a36:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8002a40:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8002a44:	3b14      	subs	r3, #20
 8002a46:	1898      	adds	r0, r3, r2
 8002a48:	f107 0308 	add.w	r3, r7, #8
 8002a4c:	3b08      	subs	r3, #8
 8002a4e:	220e      	movs	r2, #14
 8002a50:	4619      	mov	r1, r3
 8002a52:	f006 fd15 	bl	8009480 <memcpy>
				sectorBufferIndex += sizeof(currentObject);
 8002a56:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002a5a:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	330e      	adds	r3, #14
 8002a62:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002a66:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8002a6a:	6013      	str	r3, [r2, #0]
 8002a6c:	e093      	b.n	8002b96 <configScreensFromUart+0x8d6>
 8002a6e:	bf00      	nop
 8002a70:	20002150 	.word	0x20002150
 8002a74:	0800a9c8 	.word	0x0800a9c8
 8002a78:	0800aa04 	.word	0x0800aa04
				memcpy(sectorBuffer+sectorBufferIndex, (uint8_t *) &currentObject, spaceLeft);
 8002a7c:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002a80:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8002a8a:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8002a8e:	3b14      	subs	r3, #20
 8002a90:	1898      	adds	r0, r3, r2
 8002a92:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002a96:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	f107 0308 	add.w	r3, r7, #8
 8002aa0:	3b08      	subs	r3, #8
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	f006 fcec 	bl	8009480 <memcpy>
				ext_flash_write_multipage(currentSector*SECTOR_SIZE, sectorBuffer, SECTOR_SIZE);
 8002aa8:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8002aac:	f103 0304 	add.w	r3, r3, #4
 8002ab0:	881b      	ldrh	r3, [r3, #0]
 8002ab2:	031b      	lsls	r3, r3, #12
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8002aba:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8002abe:	3b14      	subs	r3, #20
 8002ac0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	f000 fe51 	bl	800376c <ext_flash_write_multipage>
				currentSector += 1;
 8002aca:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8002ace:	f103 0304 	add.w	r3, r3, #4
 8002ad2:	881b      	ldrh	r3, [r3, #0]
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 8002ada:	f102 0204 	add.w	r2, r2, #4
 8002ade:	8013      	strh	r3, [r2, #0]
				if(currentSector > MAX_SCREEN_SECTOR){
 8002ae0:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8002ae4:	f103 0304 	add.w	r3, r3, #4
 8002ae8:	881b      	ldrh	r3, [r3, #0]
 8002aea:	2bc7      	cmp	r3, #199	; 0xc7
 8002aec:	d90a      	bls.n	8002b04 <configScreensFromUart+0x844>
					printf("[cl] Screen memory size exceeded trying to save header of object id %d\n\r", currentObject.objectId);
 8002aee:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8002af2:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8002af6:	885b      	ldrh	r3, [r3, #2]
 8002af8:	4619      	mov	r1, r3
 8002afa:	48cc      	ldr	r0, [pc, #816]	; (8002e2c <configScreensFromUart+0xb6c>)
 8002afc:	f006 fcd6 	bl	80094ac <iprintf>
					return 6;
 8002b00:	2306      	movs	r3, #6
 8002b02:	e1be      	b.n	8002e82 <configScreensFromUart+0xbc2>
				ext_flash_erase_4kB(currentSector*SECTOR_SIZE);
 8002b04:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8002b08:	f103 0304 	add.w	r3, r3, #4
 8002b0c:	881b      	ldrh	r3, [r3, #0]
 8002b0e:	031b      	lsls	r3, r3, #12
 8002b10:	4618      	mov	r0, r3
 8002b12:	f000 fcfb 	bl	800350c <ext_flash_erase_4kB>
				memset(sectorBuffer, 0, SECTOR_SIZE);
 8002b16:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8002b1a:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8002b1e:	3b14      	subs	r3, #20
 8002b20:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002b24:	2100      	movs	r1, #0
 8002b26:	4618      	mov	r0, r3
 8002b28:	f006 fcb8 	bl	800949c <memset>
				sectorBufferIndex = 0;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002b32:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8002b36:	6013      	str	r3, [r2, #0]
				memcpy(sectorBuffer+sectorBufferIndex, ((uint8_t *) &currentObject)+spaceLeft, (sizeof(currentObject) - spaceLeft));
 8002b38:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002b3c:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8002b46:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8002b4a:	3b14      	subs	r3, #20
 8002b4c:	1898      	adds	r0, r3, r2
 8002b4e:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002b52:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	f107 0308 	add.w	r3, r7, #8
 8002b5c:	3b08      	subs	r3, #8
 8002b5e:	1899      	adds	r1, r3, r2
 8002b60:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002b64:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f1c3 030e 	rsb	r3, r3, #14
 8002b6e:	461a      	mov	r2, r3
 8002b70:	f006 fc86 	bl	8009480 <memcpy>
				sectorBufferIndex += (sizeof(currentObject) - spaceLeft);
 8002b74:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002b78:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002b82:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	330e      	adds	r3, #14
 8002b8c:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002b90:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8002b94:	6013      	str	r3, [r2, #0]
			uint16_t objectDataBytesLeft = currentObject.dataLen;
 8002b96:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8002b9a:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8002b9e:	899b      	ldrh	r3, [r3, #12]
 8002ba0:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002ba4:	f102 0236 	add.w	r2, r2, #54	; 0x36
 8002ba8:	8013      	strh	r3, [r2, #0]
			dataBufferIndex = 0;
 8002baa:	2300      	movs	r3, #0
 8002bac:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002bb0:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8002bb4:	6013      	str	r3, [r2, #0]
			while(objectDataBytesLeft > 0){
 8002bb6:	e062      	b.n	8002c7e <configScreensFromUart+0x9be>
				do{count = read_usart_message(msg, &huart1, 2, NEWLINE);} while (count==0);
 8002bb8:	f507 5048 	add.w	r0, r7, #12800	; 0x3200
 8002bbc:	f100 0020 	add.w	r0, r0, #32
 8002bc0:	230d      	movs	r3, #13
 8002bc2:	2202      	movs	r2, #2
 8002bc4:	499a      	ldr	r1, [pc, #616]	; (8002e30 <configScreensFromUart+0xb70>)
 8002bc6:	f002 faab 	bl	8005120 <read_usart_message>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002bd0:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8002bd4:	6013      	str	r3, [r2, #0]
 8002bd6:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002bda:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d0e9      	beq.n	8002bb8 <configScreensFromUart+0x8f8>
				if(count!=2){
 8002be4:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002be8:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d00a      	beq.n	8002c08 <configScreensFromUart+0x948>
					printf("[cl] Error reading hex data of object with id %d \n\r", currentObject.objectId);
 8002bf2:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8002bf6:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8002bfa:	885b      	ldrh	r3, [r3, #2]
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	488d      	ldr	r0, [pc, #564]	; (8002e34 <configScreensFromUart+0xb74>)
 8002c00:	f006 fc54 	bl	80094ac <iprintf>
					return 7;
 8002c04:	2307      	movs	r3, #7
 8002c06:	e13c      	b.n	8002e82 <configScreensFromUart+0xbc2>
				msg[2] = 0;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	f507 5248 	add.w	r2, r7, #12800	; 0x3200
 8002c0e:	f102 0222 	add.w	r2, r2, #34	; 0x22
 8002c12:	7013      	strb	r3, [r2, #0]
				uint8_t deHexedByte = (uint8_t) strtol(msg, NULL, 16);
 8002c14:	f507 5348 	add.w	r3, r7, #12800	; 0x3200
 8002c18:	f103 0320 	add.w	r3, r3, #32
 8002c1c:	2210      	movs	r2, #16
 8002c1e:	2100      	movs	r1, #0
 8002c20:	4618      	mov	r0, r3
 8002c22:	f006 fce5 	bl	80095f0 <strtol>
 8002c26:	4603      	mov	r3, r0
 8002c28:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002c2c:	f102 0223 	add.w	r2, r2, #35	; 0x23
 8002c30:	7013      	strb	r3, [r2, #0]
				dataBuffer[dataBufferIndex] = deHexedByte;
 8002c32:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8002c36:	f5a3 722d 	sub.w	r2, r3, #692	; 0x2b4
 8002c3a:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002c3e:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4413      	add	r3, r2
 8002c46:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002c4a:	f102 0223 	add.w	r2, r2, #35	; 0x23
 8002c4e:	7812      	ldrb	r2, [r2, #0]
 8002c50:	701a      	strb	r2, [r3, #0]
				dataBufferIndex++;
 8002c52:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002c56:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002c62:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8002c66:	6013      	str	r3, [r2, #0]
				objectDataBytesLeft--;
 8002c68:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002c6c:	f103 0336 	add.w	r3, r3, #54	; 0x36
 8002c70:	881b      	ldrh	r3, [r3, #0]
 8002c72:	3b01      	subs	r3, #1
 8002c74:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002c78:	f102 0236 	add.w	r2, r2, #54	; 0x36
 8002c7c:	8013      	strh	r3, [r2, #0]
			while(objectDataBytesLeft > 0){
 8002c7e:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002c82:	f103 0336 	add.w	r3, r3, #54	; 0x36
 8002c86:	881b      	ldrh	r3, [r3, #0]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d195      	bne.n	8002bb8 <configScreensFromUart+0x8f8>
			read_usart_message(msg, &huart1, 2, NEWLINE); //to remove newline character from uart input buffer
 8002c8c:	f507 5048 	add.w	r0, r7, #12800	; 0x3200
 8002c90:	f100 0020 	add.w	r0, r0, #32
 8002c94:	230d      	movs	r3, #13
 8002c96:	2202      	movs	r2, #2
 8002c98:	4965      	ldr	r1, [pc, #404]	; (8002e30 <configScreensFromUart+0xb70>)
 8002c9a:	f002 fa41 	bl	8005120 <read_usart_message>
			objectDataBytesLeft = currentObject.dataLen;
 8002c9e:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8002ca2:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8002ca6:	899b      	ldrh	r3, [r3, #12]
 8002ca8:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002cac:	f102 0236 	add.w	r2, r2, #54	; 0x36
 8002cb0:	8013      	strh	r3, [r2, #0]
			dataBufferIndex = 0;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002cb8:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8002cbc:	6013      	str	r3, [r2, #0]
			while(objectDataBytesLeft > 0){
 8002cbe:	e0d7      	b.n	8002e70 <configScreensFromUart+0xbb0>
				spaceLeft = SECTOR_SIZE - sectorBufferIndex;
 8002cc0:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002cc4:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8002cce:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002cd2:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8002cd6:	6013      	str	r3, [r2, #0]
				if(spaceLeft >= objectDataBytesLeft){
 8002cd8:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002cdc:	f103 0336 	add.w	r3, r3, #54	; 0x36
 8002ce0:	881b      	ldrh	r3, [r3, #0]
 8002ce2:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002ce6:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8002cea:	6812      	ldr	r2, [r2, #0]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	db32      	blt.n	8002d56 <configScreensFromUart+0xa96>
					memcpy(sectorBuffer+sectorBufferIndex, dataBuffer + dataBufferIndex, objectDataBytesLeft);
 8002cf0:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002cf4:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8002cfe:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8002d02:	3b14      	subs	r3, #20
 8002d04:	1898      	adds	r0, r3, r2
 8002d06:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002d0a:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002d14:	3b34      	subs	r3, #52	; 0x34
 8002d16:	4413      	add	r3, r2
 8002d18:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002d1c:	f102 0236 	add.w	r2, r2, #54	; 0x36
 8002d20:	8812      	ldrh	r2, [r2, #0]
 8002d22:	4619      	mov	r1, r3
 8002d24:	f006 fbac 	bl	8009480 <memcpy>
					sectorBufferIndex += objectDataBytesLeft;
 8002d28:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002d2c:	f103 0336 	add.w	r3, r3, #54	; 0x36
 8002d30:	881b      	ldrh	r3, [r3, #0]
 8002d32:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002d36:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8002d3a:	6812      	ldr	r2, [r2, #0]
 8002d3c:	4413      	add	r3, r2
 8002d3e:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002d42:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8002d46:	6013      	str	r3, [r2, #0]
					objectDataBytesLeft = 0;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002d4e:	f102 0236 	add.w	r2, r2, #54	; 0x36
 8002d52:	8013      	strh	r3, [r2, #0]
 8002d54:	e08c      	b.n	8002e70 <configScreensFromUart+0xbb0>
					memcpy(sectorBuffer+sectorBufferIndex, dataBuffer + dataBufferIndex, spaceLeft);
 8002d56:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002d5a:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8002d64:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8002d68:	3b14      	subs	r3, #20
 8002d6a:	1898      	adds	r0, r3, r2
 8002d6c:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002d70:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002d7a:	3b34      	subs	r3, #52	; 0x34
 8002d7c:	4413      	add	r3, r2
 8002d7e:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002d82:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8002d86:	6812      	ldr	r2, [r2, #0]
 8002d88:	4619      	mov	r1, r3
 8002d8a:	f006 fb79 	bl	8009480 <memcpy>
					dataBufferIndex += spaceLeft;
 8002d8e:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002d92:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002d9c:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4413      	add	r3, r2
 8002da4:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002da8:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8002dac:	6013      	str	r3, [r2, #0]
					objectDataBytesLeft -= spaceLeft;
 8002dae:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002db2:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002dbe:	f102 0236 	add.w	r2, r2, #54	; 0x36
 8002dc2:	8812      	ldrh	r2, [r2, #0]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002dca:	f102 0236 	add.w	r2, r2, #54	; 0x36
 8002dce:	8013      	strh	r3, [r2, #0]
					ext_flash_write_multipage(currentSector*SECTOR_SIZE, sectorBuffer, SECTOR_SIZE);
 8002dd0:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8002dd4:	f103 0304 	add.w	r3, r3, #4
 8002dd8:	881b      	ldrh	r3, [r3, #0]
 8002dda:	031b      	lsls	r3, r3, #12
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8002de2:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8002de6:	3b14      	subs	r3, #20
 8002de8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002dec:	4619      	mov	r1, r3
 8002dee:	f000 fcbd 	bl	800376c <ext_flash_write_multipage>
					currentSector += 1;
 8002df2:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8002df6:	f103 0304 	add.w	r3, r3, #4
 8002dfa:	881b      	ldrh	r3, [r3, #0]
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 8002e02:	f102 0204 	add.w	r2, r2, #4
 8002e06:	8013      	strh	r3, [r2, #0]
					if(currentSector > MAX_SCREEN_SECTOR){
 8002e08:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8002e0c:	f103 0304 	add.w	r3, r3, #4
 8002e10:	881b      	ldrh	r3, [r3, #0]
 8002e12:	2bc7      	cmp	r3, #199	; 0xc7
 8002e14:	d912      	bls.n	8002e3c <configScreensFromUart+0xb7c>
						printf("[cl] Screen memory size exceeded while trying to save data of object id %d\n\r", currentObject.objectId);
 8002e16:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8002e1a:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8002e1e:	885b      	ldrh	r3, [r3, #2]
 8002e20:	4619      	mov	r1, r3
 8002e22:	4805      	ldr	r0, [pc, #20]	; (8002e38 <configScreensFromUart+0xb78>)
 8002e24:	f006 fb42 	bl	80094ac <iprintf>
						return 8;
 8002e28:	2308      	movs	r3, #8
 8002e2a:	e02a      	b.n	8002e82 <configScreensFromUart+0xbc2>
 8002e2c:	0800aa3c 	.word	0x0800aa3c
 8002e30:	20002150 	.word	0x20002150
 8002e34:	0800aa88 	.word	0x0800aa88
 8002e38:	0800aabc 	.word	0x0800aabc
					ext_flash_erase_4kB(currentSector*SECTOR_SIZE);
 8002e3c:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8002e40:	f103 0304 	add.w	r3, r3, #4
 8002e44:	881b      	ldrh	r3, [r3, #0]
 8002e46:	031b      	lsls	r3, r3, #12
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f000 fb5f 	bl	800350c <ext_flash_erase_4kB>
					memset(sectorBuffer, 0, SECTOR_SIZE);
 8002e4e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8002e52:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8002e56:	3b14      	subs	r3, #20
 8002e58:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002e5c:	2100      	movs	r1, #0
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f006 fb1c 	bl	800949c <memset>
					sectorBufferIndex = 0;
 8002e64:	2300      	movs	r3, #0
 8002e66:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002e6a:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8002e6e:	6013      	str	r3, [r2, #0]
			while(objectDataBytesLeft > 0){
 8002e70:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002e74:	f103 0336 	add.w	r3, r3, #54	; 0x36
 8002e78:	881b      	ldrh	r3, [r3, #0]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	f47f af20 	bne.w	8002cc0 <configScreensFromUart+0xa00>
 8002e80:	e000      	b.n	8002e84 <configScreensFromUart+0xbc4>
			return 3;
 8002e82:	e05a      	b.n	8002f3a <configScreensFromUart+0xc7a>
		while(currentScreenObjectsLeft > 0){
 8002e84:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8002e88:	f103 0302 	add.w	r3, r3, #2
 8002e8c:	881b      	ldrh	r3, [r3, #0]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	f47f abf3 	bne.w	800267a <configScreensFromUart+0x3ba>
		ext_flash_write_multipage(currentSector*SECTOR_SIZE, sectorBuffer, sectorBufferIndex);
 8002e94:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8002e98:	f103 0304 	add.w	r3, r3, #4
 8002e9c:	881b      	ldrh	r3, [r3, #0]
 8002e9e:	031b      	lsls	r3, r3, #12
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002ea6:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8002eb0:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8002eb4:	3b14      	subs	r3, #20
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	f000 fc58 	bl	800376c <ext_flash_write_multipage>
	while(1){
 8002ebc:	f7ff ba9c 	b.w	80023f8 <configScreensFromUart+0x138>
		printf("%x ", sectorBuffer[j]);
 8002ec0:	f507 530b 	add.w	r3, r7, #8896	; 0x22c0
 8002ec4:	f103 0308 	add.w	r3, r3, #8
 8002ec8:	f5a3 722d 	sub.w	r2, r3, #692	; 0x2b4
 8002ecc:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002ed0:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4413      	add	r3, r2
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	4619      	mov	r1, r3
 8002edc:	481a      	ldr	r0, [pc, #104]	; (8002f48 <configScreensFromUart+0xc88>)
 8002ede:	f006 fae5 	bl	80094ac <iprintf>
	for(j=0; j<sizeof(gconf); j++){
 8002ee2:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002ee6:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	3301      	adds	r3, #1
 8002eee:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002ef2:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8002ef6:	6013      	str	r3, [r2, #0]
 8002ef8:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002efc:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f240 2201 	movw	r2, #513	; 0x201
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d9da      	bls.n	8002ec0 <configScreensFromUart+0xc00>
	}

	ext_flash_erase_4kB(GENERAL_CONFIG_SECTOR*SECTOR_SIZE);
 8002f0a:	2000      	movs	r0, #0
 8002f0c:	f000 fafe 	bl	800350c <ext_flash_erase_4kB>
	ext_flash_write_multipage(GENERAL_CONFIG_SECTOR*SECTOR_SIZE, sectorBuffer, sizeof(gconf));
 8002f10:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8002f14:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8002f18:	3b14      	subs	r3, #20
 8002f1a:	f240 2202 	movw	r2, #514	; 0x202
 8002f1e:	4619      	mov	r1, r3
 8002f20:	2000      	movs	r0, #0
 8002f22:	f000 fc23 	bl	800376c <ext_flash_write_multipage>
	printf("[cl] Config from UART finished. Furthest sector written to: %d \n\r", currentSector);
 8002f26:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8002f2a:	f103 0304 	add.w	r3, r3, #4
 8002f2e:	881b      	ldrh	r3, [r3, #0]
 8002f30:	4619      	mov	r1, r3
 8002f32:	4806      	ldr	r0, [pc, #24]	; (8002f4c <configScreensFromUart+0xc8c>)
 8002f34:	f006 faba 	bl	80094ac <iprintf>

	return 0;
 8002f38:	2300      	movs	r3, #0

}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f507 574b 	add.w	r7, r7, #12992	; 0x32c0
 8002f40:	370c      	adds	r7, #12
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f46:	bf00      	nop
 8002f48:	0800ab0c 	.word	0x0800ab0c
 8002f4c:	0800ab10 	.word	0x0800ab10

08002f50 <readGeneralConfig>:

/*
 * Reads the general configuration struct from external flash into variable pointed at by @destination.
 */
void readGeneralConfig(struct generalConfig *destination){
 8002f50:	b580      	push	{r7, lr}
 8002f52:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8002f5c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8002f60:	6018      	str	r0, [r3, #0]
	uint8_t buffer[sizeof(struct generalConfig)];
	ext_flash_read(GENERAL_CONFIG_SECTOR*SECTOR_SIZE, buffer, sizeof(struct generalConfig));
 8002f62:	f107 030c 	add.w	r3, r7, #12
 8002f66:	f240 2202 	movw	r2, #514	; 0x202
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	2000      	movs	r0, #0
 8002f6e:	f000 fb1c 	bl	80035aa <ext_flash_read>
	*destination = *((struct generalConfig *) buffer);
 8002f72:	f107 020c 	add.w	r2, r7, #12
 8002f76:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8002f7a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4618      	mov	r0, r3
 8002f82:	4611      	mov	r1, r2
 8002f84:	f240 2302 	movw	r3, #514	; 0x202
 8002f88:	461a      	mov	r2, r3
 8002f8a:	f006 fa79 	bl	8009480 <memcpy>
	/*int i;
	for(i = 0; i<sizeof(struct generalConfig); i++){
		printf("%x,", buffer[i]);
	}
	printf("\n\r");*/
}
 8002f8e:	bf00      	nop
 8002f90:	f507 7704 	add.w	r7, r7, #528	; 0x210
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <readBitmapList>:

/*
 * Reads the list of bitmaps struct from external flash into variable pointed at by @destination.
 */
void readBitmapList(struct bitmapList *destination){
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	f5ad 6d01 	sub.w	sp, sp, #2064	; 0x810
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8002fa4:	f6a3 030c 	subw	r3, r3, #2060	; 0x80c
 8002fa8:	6018      	str	r0, [r3, #0]
	uint8_t buffer[sizeof(struct bitmapList)];
	ext_flash_read(BITMAP_LIST_SECTOR*SECTOR_SIZE, buffer, sizeof(struct bitmapList));
 8002faa:	f107 030c 	add.w	r3, r7, #12
 8002fae:	f640 0204 	movw	r2, #2052	; 0x804
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	f44f 2048 	mov.w	r0, #819200	; 0xc8000
 8002fb8:	f000 faf7 	bl	80035aa <ext_flash_read>
	*destination = *((struct bitmapList *) buffer);
 8002fbc:	f107 020c 	add.w	r2, r7, #12
 8002fc0:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8002fc4:	f6a3 030c 	subw	r3, r3, #2060	; 0x80c
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	4611      	mov	r1, r2
 8002fce:	f640 0304 	movw	r3, #2052	; 0x804
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	f006 fa54 	bl	8009480 <memcpy>
}
 8002fd8:	bf00      	nop
 8002fda:	f507 6701 	add.w	r7, r7, #2064	; 0x810
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
	...

08002fe4 <openScreen>:
 *
 *	@returns: number of objects read. If maxData and maxObjects are sufficient, this will be the same as @screenHeader.objectCount. If @maxObjects limit was reached,
 *	then return value will be equal to @maxObjects. If @maxData limit was reached, then return value will be lower than @maxObjects.
 *
 */
int openScreen(uint16_t screenSector, struct screen *screenHeader, struct object *objectArray, uint8_t *dataArray, uint8_t **dataPointerArray, uint16_t maxData, uint16_t maxObjects){
 8002fe4:	b590      	push	{r4, r7, lr}
 8002fe6:	b08d      	sub	sp, #52	; 0x34
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60b9      	str	r1, [r7, #8]
 8002fec:	607a      	str	r2, [r7, #4]
 8002fee:	603b      	str	r3, [r7, #0]
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	81fb      	strh	r3, [r7, #14]
	uint32_t flashAddr = screenSector*SECTOR_SIZE;
 8002ff4:	89fb      	ldrh	r3, [r7, #14]
 8002ff6:	031b      	lsls	r3, r3, #12
 8002ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint8_t screenHeaderBuffer[sizeof(struct screen)];
	ext_flash_read(flashAddr, screenHeaderBuffer, sizeof(struct screen));
 8002ffa:	f107 0320 	add.w	r3, r7, #32
 8002ffe:	2204      	movs	r2, #4
 8003000:	4619      	mov	r1, r3
 8003002:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003004:	f000 fad1 	bl	80035aa <ext_flash_read>
	flashAddr += sizeof(struct screen);
 8003008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800300a:	3304      	adds	r3, #4
 800300c:	62fb      	str	r3, [r7, #44]	; 0x2c
	*screenHeader = *((struct screen *) screenHeaderBuffer);
 800300e:	f107 0320 	add.w	r3, r7, #32
 8003012:	68ba      	ldr	r2, [r7, #8]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	6013      	str	r3, [r2, #0]

	uint16_t objectsToRead = (*screenHeader).objectCount;
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	885b      	ldrh	r3, [r3, #2]
 800301c:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint16_t objectIndex = 0;
 800301e:	2300      	movs	r3, #0
 8003020:	853b      	strh	r3, [r7, #40]	; 0x28
	uint16_t dataIndex = 0;
 8003022:	2300      	movs	r3, #0
 8003024:	84fb      	strh	r3, [r7, #38]	; 0x26
	if(objectsToRead > maxObjects){
 8003026:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8003028:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800302c:	429a      	cmp	r2, r3
 800302e:	d964      	bls.n	80030fa <openScreen+0x116>
		printf("[cl] Limiting objects to be read from screen to maxObjects! (down to %d from %d)", maxObjects, objectsToRead);
 8003030:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003034:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8003036:	4619      	mov	r1, r3
 8003038:	4834      	ldr	r0, [pc, #208]	; (800310c <openScreen+0x128>)
 800303a:	f006 fa37 	bl	80094ac <iprintf>
		objectsToRead = maxObjects;
 800303e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003042:	857b      	strh	r3, [r7, #42]	; 0x2a
	}

	uint8_t objectHeaderBuffer[sizeof(struct object)];
	while(objectIndex < objectsToRead){
 8003044:	e059      	b.n	80030fa <openScreen+0x116>
		ext_flash_read(flashAddr, objectHeaderBuffer, sizeof(struct object));
 8003046:	f107 0310 	add.w	r3, r7, #16
 800304a:	220e      	movs	r2, #14
 800304c:	4619      	mov	r1, r3
 800304e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003050:	f000 faab 	bl	80035aa <ext_flash_read>
		flashAddr += sizeof(struct object);
 8003054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003056:	330e      	adds	r3, #14
 8003058:	62fb      	str	r3, [r7, #44]	; 0x2c
		*(objectArray + objectIndex) = *((struct object *) objectHeaderBuffer);
 800305a:	f107 0110 	add.w	r1, r7, #16
 800305e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003060:	4613      	mov	r3, r2
 8003062:	00db      	lsls	r3, r3, #3
 8003064:	1a9b      	subs	r3, r3, r2
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	461a      	mov	r2, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4413      	add	r3, r2
 800306e:	460a      	mov	r2, r1
 8003070:	6814      	ldr	r4, [r2, #0]
 8003072:	6850      	ldr	r0, [r2, #4]
 8003074:	6891      	ldr	r1, [r2, #8]
 8003076:	601c      	str	r4, [r3, #0]
 8003078:	6058      	str	r0, [r3, #4]
 800307a:	6099      	str	r1, [r3, #8]
 800307c:	8992      	ldrh	r2, [r2, #12]
 800307e:	819a      	strh	r2, [r3, #12]
		uint16_t currentObjectDataLen = (objectArray + objectIndex)->dataLen;
 8003080:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003082:	4613      	mov	r3, r2
 8003084:	00db      	lsls	r3, r3, #3
 8003086:	1a9b      	subs	r3, r3, r2
 8003088:	005b      	lsls	r3, r3, #1
 800308a:	461a      	mov	r2, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	4413      	add	r3, r2
 8003090:	899b      	ldrh	r3, [r3, #12]
 8003092:	84bb      	strh	r3, [r7, #36]	; 0x24
		if(currentObjectDataLen > 0){
 8003094:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003096:	2b00      	cmp	r3, #0
 8003098:	d026      	beq.n	80030e8 <openScreen+0x104>
			if(dataIndex + currentObjectDataLen > maxData){
 800309a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800309c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800309e:	441a      	add	r2, r3
 80030a0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80030a4:	429a      	cmp	r2, r3
 80030a6:	dd06      	ble.n	80030b6 <openScreen+0xd2>
				printf("[cl] Ran out of data buffer when trying to add object #%d \n\r", objectIndex);
 80030a8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80030aa:	4619      	mov	r1, r3
 80030ac:	4818      	ldr	r0, [pc, #96]	; (8003110 <openScreen+0x12c>)
 80030ae:	f006 f9fd 	bl	80094ac <iprintf>
				return(objectIndex);
 80030b2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80030b4:	e026      	b.n	8003104 <openScreen+0x120>
			}
			//object data fits in buffer
			ext_flash_read(flashAddr, (dataArray + dataIndex), currentObjectDataLen);
 80030b6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80030b8:	683a      	ldr	r2, [r7, #0]
 80030ba:	4413      	add	r3, r2
 80030bc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80030be:	4619      	mov	r1, r3
 80030c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80030c2:	f000 fa72 	bl	80035aa <ext_flash_read>
			*(dataPointerArray + objectIndex) = (dataArray + dataIndex);
 80030c6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80030c8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80030ce:	440b      	add	r3, r1
 80030d0:	6839      	ldr	r1, [r7, #0]
 80030d2:	440a      	add	r2, r1
 80030d4:	601a      	str	r2, [r3, #0]
			flashAddr += currentObjectDataLen;
 80030d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80030d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030da:	4413      	add	r3, r2
 80030dc:	62fb      	str	r3, [r7, #44]	; 0x2c
			dataIndex += currentObjectDataLen;
 80030de:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80030e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80030e2:	4413      	add	r3, r2
 80030e4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80030e6:	e005      	b.n	80030f4 <openScreen+0x110>
			}
		else{
			*(dataPointerArray + objectIndex) = NULL;
 80030e8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80030ee:	4413      	add	r3, r2
 80030f0:	2200      	movs	r2, #0
 80030f2:	601a      	str	r2, [r3, #0]
		}

		objectIndex++;
 80030f4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80030f6:	3301      	adds	r3, #1
 80030f8:	853b      	strh	r3, [r7, #40]	; 0x28
	while(objectIndex < objectsToRead){
 80030fa:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80030fc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80030fe:	429a      	cmp	r2, r3
 8003100:	d3a1      	bcc.n	8003046 <openScreen+0x62>
	}

	return objectIndex;
 8003102:	8d3b      	ldrh	r3, [r7, #40]	; 0x28

}
 8003104:	4618      	mov	r0, r3
 8003106:	3734      	adds	r7, #52	; 0x34
 8003108:	46bd      	mov	sp, r7
 800310a:	bd90      	pop	{r4, r7, pc}
 800310c:	0800ab5c 	.word	0x0800ab5c
 8003110:	0800abb0 	.word	0x0800abb0

08003114 <printAllScreens>:

/*
 * debug function to check what is actually stored in flash
 */
void printAllScreens(struct generalConfig gconf){
 8003114:	b084      	sub	sp, #16
 8003116:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800311a:	b0a9      	sub	sp, #164	; 0xa4
 800311c:	af04      	add	r7, sp, #16
 800311e:	f107 06b8 	add.w	r6, r7, #184	; 0xb8
 8003122:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8003126:	466b      	mov	r3, sp
 8003128:	607b      	str	r3, [r7, #4]
	uint8_t screenIndex = 0;
 800312a:	2300      	movs	r3, #0
 800312c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	printf("[PAS] Supplied gconf says there are %d screens.\n\r", gconf.totalScreens);
 8003130:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
 8003134:	4619      	mov	r1, r3
 8003136:	48b8      	ldr	r0, [pc, #736]	; (8003418 <printAllScreens+0x304>)
 8003138:	f006 f9b8 	bl	80094ac <iprintf>
	uint16_t maxObjects = 128;
 800313c:	2380      	movs	r3, #128	; 0x80
 800313e:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
	uint16_t maxData = SECTOR_SIZE*4;
 8003142:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003146:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	struct screen screenHeader;
	struct object objArr[maxObjects];
 800314a:	f8b7 6088 	ldrh.w	r6, [r7, #136]	; 0x88
 800314e:	4633      	mov	r3, r6
 8003150:	3b01      	subs	r3, #1
 8003152:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003156:	b2b3      	uxth	r3, r6
 8003158:	2200      	movs	r2, #0
 800315a:	469a      	mov	sl, r3
 800315c:	4693      	mov	fp, r2
 800315e:	4652      	mov	r2, sl
 8003160:	465b      	mov	r3, fp
 8003162:	f04f 0000 	mov.w	r0, #0
 8003166:	f04f 0100 	mov.w	r1, #0
 800316a:	00d9      	lsls	r1, r3, #3
 800316c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003170:	00d0      	lsls	r0, r2, #3
 8003172:	4602      	mov	r2, r0
 8003174:	460b      	mov	r3, r1
 8003176:	ebb2 040a 	subs.w	r4, r2, sl
 800317a:	eb63 050b 	sbc.w	r5, r3, fp
 800317e:	f04f 0200 	mov.w	r2, #0
 8003182:	f04f 0300 	mov.w	r3, #0
 8003186:	012b      	lsls	r3, r5, #4
 8003188:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800318c:	0122      	lsls	r2, r4, #4
 800318e:	b2b3      	uxth	r3, r6
 8003190:	2200      	movs	r2, #0
 8003192:	62bb      	str	r3, [r7, #40]	; 0x28
 8003194:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003196:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800319a:	4622      	mov	r2, r4
 800319c:	462b      	mov	r3, r5
 800319e:	f04f 0000 	mov.w	r0, #0
 80031a2:	f04f 0100 	mov.w	r1, #0
 80031a6:	00d9      	lsls	r1, r3, #3
 80031a8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80031ac:	00d0      	lsls	r0, r2, #3
 80031ae:	4602      	mov	r2, r0
 80031b0:	460b      	mov	r3, r1
 80031b2:	4621      	mov	r1, r4
 80031b4:	ebb2 0801 	subs.w	r8, r2, r1
 80031b8:	4629      	mov	r1, r5
 80031ba:	eb63 0901 	sbc.w	r9, r3, r1
 80031be:	f04f 0200 	mov.w	r2, #0
 80031c2:	f04f 0300 	mov.w	r3, #0
 80031c6:	ea4f 1309 	mov.w	r3, r9, lsl #4
 80031ca:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 80031ce:	ea4f 1208 	mov.w	r2, r8, lsl #4
 80031d2:	4632      	mov	r2, r6
 80031d4:	4613      	mov	r3, r2
 80031d6:	00db      	lsls	r3, r3, #3
 80031d8:	1a9b      	subs	r3, r3, r2
 80031da:	005b      	lsls	r3, r3, #1
 80031dc:	3307      	adds	r3, #7
 80031de:	08db      	lsrs	r3, r3, #3
 80031e0:	00db      	lsls	r3, r3, #3
 80031e2:	ebad 0d03 	sub.w	sp, sp, r3
 80031e6:	ab04      	add	r3, sp, #16
 80031e8:	3301      	adds	r3, #1
 80031ea:	085b      	lsrs	r3, r3, #1
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	67bb      	str	r3, [r7, #120]	; 0x78
	uint8_t dataArr[maxData];
 80031f0:	f8b7 108a 	ldrh.w	r1, [r7, #138]	; 0x8a
 80031f4:	460b      	mov	r3, r1
 80031f6:	3b01      	subs	r3, #1
 80031f8:	677b      	str	r3, [r7, #116]	; 0x74
 80031fa:	b28b      	uxth	r3, r1
 80031fc:	2200      	movs	r2, #0
 80031fe:	623b      	str	r3, [r7, #32]
 8003200:	627a      	str	r2, [r7, #36]	; 0x24
 8003202:	f04f 0200 	mov.w	r2, #0
 8003206:	f04f 0300 	mov.w	r3, #0
 800320a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800320e:	4628      	mov	r0, r5
 8003210:	00c3      	lsls	r3, r0, #3
 8003212:	4620      	mov	r0, r4
 8003214:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003218:	4620      	mov	r0, r4
 800321a:	00c2      	lsls	r2, r0, #3
 800321c:	b28b      	uxth	r3, r1
 800321e:	2200      	movs	r2, #0
 8003220:	61bb      	str	r3, [r7, #24]
 8003222:	61fa      	str	r2, [r7, #28]
 8003224:	f04f 0200 	mov.w	r2, #0
 8003228:	f04f 0300 	mov.w	r3, #0
 800322c:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8003230:	4628      	mov	r0, r5
 8003232:	00c3      	lsls	r3, r0, #3
 8003234:	4620      	mov	r0, r4
 8003236:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800323a:	4620      	mov	r0, r4
 800323c:	00c2      	lsls	r2, r0, #3
 800323e:	460b      	mov	r3, r1
 8003240:	3307      	adds	r3, #7
 8003242:	08db      	lsrs	r3, r3, #3
 8003244:	00db      	lsls	r3, r3, #3
 8003246:	ebad 0d03 	sub.w	sp, sp, r3
 800324a:	ab04      	add	r3, sp, #16
 800324c:	3300      	adds	r3, #0
 800324e:	673b      	str	r3, [r7, #112]	; 0x70
	uint8_t *pointerArray[maxObjects];
 8003250:	f8b7 1088 	ldrh.w	r1, [r7, #136]	; 0x88
 8003254:	460b      	mov	r3, r1
 8003256:	3b01      	subs	r3, #1
 8003258:	66fb      	str	r3, [r7, #108]	; 0x6c
 800325a:	b28b      	uxth	r3, r1
 800325c:	2200      	movs	r2, #0
 800325e:	613b      	str	r3, [r7, #16]
 8003260:	617a      	str	r2, [r7, #20]
 8003262:	f04f 0200 	mov.w	r2, #0
 8003266:	f04f 0300 	mov.w	r3, #0
 800326a:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800326e:	4628      	mov	r0, r5
 8003270:	0143      	lsls	r3, r0, #5
 8003272:	4620      	mov	r0, r4
 8003274:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003278:	4620      	mov	r0, r4
 800327a:	0142      	lsls	r2, r0, #5
 800327c:	b28b      	uxth	r3, r1
 800327e:	2200      	movs	r2, #0
 8003280:	60bb      	str	r3, [r7, #8]
 8003282:	60fa      	str	r2, [r7, #12]
 8003284:	f04f 0200 	mov.w	r2, #0
 8003288:	f04f 0300 	mov.w	r3, #0
 800328c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003290:	4628      	mov	r0, r5
 8003292:	0143      	lsls	r3, r0, #5
 8003294:	4620      	mov	r0, r4
 8003296:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800329a:	4620      	mov	r0, r4
 800329c:	0142      	lsls	r2, r0, #5
 800329e:	460b      	mov	r3, r1
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	3307      	adds	r3, #7
 80032a4:	08db      	lsrs	r3, r3, #3
 80032a6:	00db      	lsls	r3, r3, #3
 80032a8:	ebad 0d03 	sub.w	sp, sp, r3
 80032ac:	ab04      	add	r3, sp, #16
 80032ae:	3303      	adds	r3, #3
 80032b0:	089b      	lsrs	r3, r3, #2
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	66bb      	str	r3, [r7, #104]	; 0x68

	while(screenIndex < gconf.totalScreens){
 80032b6:	e09c      	b.n	80033f2 <printAllScreens+0x2de>
		printf("[PAS] Opening screen #%d stored @%d \n\r", screenIndex, gconf.screenSectors[screenIndex]);
 80032b8:	f897 1087 	ldrb.w	r1, [r7, #135]	; 0x87
 80032bc:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80032c0:	005b      	lsls	r3, r3, #1
 80032c2:	3388      	adds	r3, #136	; 0x88
 80032c4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80032c8:	4413      	add	r3, r2
 80032ca:	885b      	ldrh	r3, [r3, #2]
 80032cc:	461a      	mov	r2, r3
 80032ce:	4853      	ldr	r0, [pc, #332]	; (800341c <printAllScreens+0x308>)
 80032d0:	f006 f8ec 	bl	80094ac <iprintf>
		int objectsRead = openScreen(gconf.screenSectors[screenIndex], &screenHeader, objArr, dataArr, pointerArray, maxData, maxObjects);
 80032d4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80032d8:	005b      	lsls	r3, r3, #1
 80032da:	3388      	adds	r3, #136	; 0x88
 80032dc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80032e0:	4413      	add	r3, r2
 80032e2:	8858      	ldrh	r0, [r3, #2]
 80032e4:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80032e8:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80032ec:	9302      	str	r3, [sp, #8]
 80032ee:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80032f2:	9301      	str	r3, [sp, #4]
 80032f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80032f6:	9300      	str	r3, [sp, #0]
 80032f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032fa:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80032fc:	f7ff fe72 	bl	8002fe4 <openScreen>
 8003300:	6678      	str	r0, [r7, #100]	; 0x64
		printf("[PAS] [%d / %d] objects have been read.\n\r", objectsRead, screenHeader.objectCount);
 8003302:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8003306:	461a      	mov	r2, r3
 8003308:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800330a:	4845      	ldr	r0, [pc, #276]	; (8003420 <printAllScreens+0x30c>)
 800330c:	f006 f8ce 	bl	80094ac <iprintf>
		printf("[PAS] Object report:\n\r");
 8003310:	4844      	ldr	r0, [pc, #272]	; (8003424 <printAllScreens+0x310>)
 8003312:	f006 f8cb 	bl	80094ac <iprintf>
		uint16_t objectIndex = 0;
 8003316:	2300      	movs	r3, #0
 8003318:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
		while(objectIndex < objectsRead){
 800331c:	e059      	b.n	80033d2 <printAllScreens+0x2be>
			struct object thisObject = *(objArr + objectIndex);
 800331e:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8003322:	4613      	mov	r3, r2
 8003324:	00db      	lsls	r3, r3, #3
 8003326:	1a9b      	subs	r3, r3, r2
 8003328:	005b      	lsls	r3, r3, #1
 800332a:	461a      	mov	r2, r3
 800332c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800332e:	441a      	add	r2, r3
 8003330:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003334:	4614      	mov	r4, r2
 8003336:	6820      	ldr	r0, [r4, #0]
 8003338:	6861      	ldr	r1, [r4, #4]
 800333a:	68a2      	ldr	r2, [r4, #8]
 800333c:	c307      	stmia	r3!, {r0, r1, r2}
 800333e:	89a2      	ldrh	r2, [r4, #12]
 8003340:	801a      	strh	r2, [r3, #0]
			char typeStr[30];
			objectTypeToString(thisObject.objectType, typeStr);
 8003342:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8003346:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800334a:	4611      	mov	r1, r2
 800334c:	4618      	mov	r0, r3
 800334e:	f000 f875 	bl	800343c <objectTypeToString>
			printf("[PAS] %s id=%d from (%d, %d) to (%d,%d), hex data (%db) =[", typeStr, thisObject.objectId, thisObject.xstart, thisObject.ystart, thisObject.xend, thisObject.yend, thisObject.dataLen);
 8003352:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003356:	461d      	mov	r5, r3
 8003358:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800335c:	461e      	mov	r6, r3
 800335e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003362:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 8003366:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 800336a:	4608      	mov	r0, r1
 800336c:	f8b7 105c 	ldrh.w	r1, [r7, #92]	; 0x5c
 8003370:	460c      	mov	r4, r1
 8003372:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8003376:	9403      	str	r4, [sp, #12]
 8003378:	9002      	str	r0, [sp, #8]
 800337a:	9201      	str	r2, [sp, #4]
 800337c:	9300      	str	r3, [sp, #0]
 800337e:	4633      	mov	r3, r6
 8003380:	462a      	mov	r2, r5
 8003382:	4829      	ldr	r0, [pc, #164]	; (8003428 <printAllScreens+0x314>)
 8003384:	f006 f892 	bl	80094ac <iprintf>
			int dataIndex = 0;
 8003388:	2300      	movs	r3, #0
 800338a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			while(dataIndex < thisObject.dataLen){
 800338e:	e011      	b.n	80033b4 <printAllScreens+0x2a0>
				printf("%02x", *(pointerArray[objectIndex] + dataIndex));
 8003390:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8003394:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003396:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800339a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800339e:	4413      	add	r3, r2
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	4619      	mov	r1, r3
 80033a4:	4821      	ldr	r0, [pc, #132]	; (800342c <printAllScreens+0x318>)
 80033a6:	f006 f881 	bl	80094ac <iprintf>
				dataIndex++;
 80033aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80033ae:	3301      	adds	r3, #1
 80033b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			while(dataIndex < thisObject.dataLen){
 80033b4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80033b8:	461a      	mov	r2, r3
 80033ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80033be:	4293      	cmp	r3, r2
 80033c0:	dbe6      	blt.n	8003390 <printAllScreens+0x27c>
			}
			printf("]\n\r");
 80033c2:	481b      	ldr	r0, [pc, #108]	; (8003430 <printAllScreens+0x31c>)
 80033c4:	f006 f872 	bl	80094ac <iprintf>
			objectIndex++;
 80033c8:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80033cc:	3301      	adds	r3, #1
 80033ce:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
		while(objectIndex < objectsRead){
 80033d2:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80033d6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80033d8:	429a      	cmp	r2, r3
 80033da:	dca0      	bgt.n	800331e <printAllScreens+0x20a>
		}
		printf("[PAS] End of screen #%d \n\r", screenIndex);
 80033dc:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80033e0:	4619      	mov	r1, r3
 80033e2:	4814      	ldr	r0, [pc, #80]	; (8003434 <printAllScreens+0x320>)
 80033e4:	f006 f862 	bl	80094ac <iprintf>
		screenIndex++;
 80033e8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80033ec:	3301      	adds	r3, #1
 80033ee:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	while(screenIndex < gconf.totalScreens){
 80033f2:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
 80033f6:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 80033fa:	429a      	cmp	r2, r3
 80033fc:	f4ff af5c 	bcc.w	80032b8 <printAllScreens+0x1a4>
	}

	printf("[PAS] Finished. \n\n\n\r");
 8003400:	480d      	ldr	r0, [pc, #52]	; (8003438 <printAllScreens+0x324>)
 8003402:	f006 f853 	bl	80094ac <iprintf>
 8003406:	f8d7 d004 	ldr.w	sp, [r7, #4]
}
 800340a:	bf00      	nop
 800340c:	3794      	adds	r7, #148	; 0x94
 800340e:	46bd      	mov	sp, r7
 8003410:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003414:	b004      	add	sp, #16
 8003416:	4770      	bx	lr
 8003418:	0800abf0 	.word	0x0800abf0
 800341c:	0800ac24 	.word	0x0800ac24
 8003420:	0800ac4c 	.word	0x0800ac4c
 8003424:	0800ac78 	.word	0x0800ac78
 8003428:	0800ac90 	.word	0x0800ac90
 800342c:	0800accc 	.word	0x0800accc
 8003430:	0800acd4 	.word	0x0800acd4
 8003434:	0800acd8 	.word	0x0800acd8
 8003438:	0800acf4 	.word	0x0800acf4

0800343c <objectTypeToString>:
const char *typeNames[] 	= 		{"rectangle", "button", "label", "picture"};
const objectType_t types[] 	= 		{rectangle, button, label, picture};
const int typeCount = 3;

// Make sure that str is long enough for longest member of typeNames!
void objectTypeToString(objectType_t type, char *str){
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	4603      	mov	r3, r0
 8003444:	6039      	str	r1, [r7, #0]
 8003446:	71fb      	strb	r3, [r7, #7]
	int i;
	for(i=0; i<typeCount; i++){
 8003448:	2300      	movs	r3, #0
 800344a:	60fb      	str	r3, [r7, #12]
 800344c:	e012      	b.n	8003474 <objectTypeToString+0x38>
		if(type == types[i]){
 800344e:	4a0d      	ldr	r2, [pc, #52]	; (8003484 <objectTypeToString+0x48>)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	4413      	add	r3, r2
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	79fa      	ldrb	r2, [r7, #7]
 8003458:	429a      	cmp	r2, r3
 800345a:	d108      	bne.n	800346e <objectTypeToString+0x32>
			strcpy(str, typeNames[i]);
 800345c:	4a0a      	ldr	r2, [pc, #40]	; (8003488 <objectTypeToString+0x4c>)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003464:	4619      	mov	r1, r3
 8003466:	6838      	ldr	r0, [r7, #0]
 8003468:	f006 f838 	bl	80094dc <strcpy>
			return;
 800346c:	e006      	b.n	800347c <objectTypeToString+0x40>
	for(i=0; i<typeCount; i++){
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	3301      	adds	r3, #1
 8003472:	60fb      	str	r3, [r7, #12]
 8003474:	2203      	movs	r2, #3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	4293      	cmp	r3, r2
 800347a:	dbe8      	blt.n	800344e <objectTypeToString+0x12>
		}
	}

}
 800347c:	3710      	adds	r7, #16
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	0800af54 	.word	0x0800af54
 8003488:	20000000 	.word	0x20000000

0800348c <stringToObjectType>:

objectType_t stringToObjectType(char *str){
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
	int i;
	for(i=0; i<typeCount; i++){
 8003494:	2300      	movs	r3, #0
 8003496:	60fb      	str	r3, [r7, #12]
 8003498:	e012      	b.n	80034c0 <stringToObjectType+0x34>
		if(strcmp(typeNames[i], str) == 0){
 800349a:	4a0e      	ldr	r2, [pc, #56]	; (80034d4 <stringToObjectType+0x48>)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034a2:	6879      	ldr	r1, [r7, #4]
 80034a4:	4618      	mov	r0, r3
 80034a6:	f7fc fe93 	bl	80001d0 <strcmp>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d104      	bne.n	80034ba <stringToObjectType+0x2e>
			return types[i];
 80034b0:	4a09      	ldr	r2, [pc, #36]	; (80034d8 <stringToObjectType+0x4c>)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	4413      	add	r3, r2
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	e007      	b.n	80034ca <stringToObjectType+0x3e>
	for(i=0; i<typeCount; i++){
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	3301      	adds	r3, #1
 80034be:	60fb      	str	r3, [r7, #12]
 80034c0:	2203      	movs	r2, #3
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	4293      	cmp	r3, r2
 80034c6:	dbe8      	blt.n	800349a <stringToObjectType+0xe>
		}
	}
	return none;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3710      	adds	r7, #16
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	20000000 	.word	0x20000000
 80034d8:	0800af54 	.word	0x0800af54

080034dc <flashCSSet>:
#include <string.h>

#define FLASHWRITE_DEBUG_PRINT 1


void flashCSSet(){
 80034dc:	b580      	push	{r7, lr}
 80034de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80034e0:	2201      	movs	r2, #1
 80034e2:	2110      	movs	r1, #16
 80034e4:	4802      	ldr	r0, [pc, #8]	; (80034f0 <flashCSSet+0x14>)
 80034e6:	f002 fa4b 	bl	8005980 <HAL_GPIO_WritePin>
}
 80034ea:	bf00      	nop
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	40020000 	.word	0x40020000

080034f4 <flashCSReset>:

void flashCSReset(){
 80034f4:	b580      	push	{r7, lr}
 80034f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80034f8:	2200      	movs	r2, #0
 80034fa:	2110      	movs	r1, #16
 80034fc:	4802      	ldr	r0, [pc, #8]	; (8003508 <flashCSReset+0x14>)
 80034fe:	f002 fa3f 	bl	8005980 <HAL_GPIO_WritePin>
}
 8003502:	bf00      	nop
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	40020000 	.word	0x40020000

0800350c <ext_flash_erase_4kB>:
		}
	}
}

void ext_flash_erase_4kB(unsigned int address)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
	unsigned int i;

	printf("erase at %d \n\r", address);
 8003514:	6879      	ldr	r1, [r7, #4]
 8003516:	481a      	ldr	r0, [pc, #104]	; (8003580 <ext_flash_erase_4kB+0x74>)
 8003518:	f005 ffc8 	bl	80094ac <iprintf>

	ext_flash_wren();
 800351c:	f000 f86c 	bl	80035f8 <ext_flash_wren>

	flashCSReset();
 8003520:	f7ff ffe8 	bl	80034f4 <flashCSReset>
	SPI1_Transfer(0x20);
 8003524:	2020      	movs	r0, #32
 8003526:	f001 f925 	bl	8004774 <SPI1_Transfer>
	SPI1_Transfer((address>>16)&0xFF);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	0c1b      	lsrs	r3, r3, #16
 800352e:	b2db      	uxtb	r3, r3
 8003530:	4618      	mov	r0, r3
 8003532:	f001 f91f 	bl	8004774 <SPI1_Transfer>
	SPI1_Transfer((address>>8)&0xFF);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	0a1b      	lsrs	r3, r3, #8
 800353a:	b2db      	uxtb	r3, r3
 800353c:	4618      	mov	r0, r3
 800353e:	f001 f919 	bl	8004774 <SPI1_Transfer>
	SPI1_Transfer(address&0xFF);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	b2db      	uxtb	r3, r3
 8003546:	4618      	mov	r0, r3
 8003548:	f001 f914 	bl	8004774 <SPI1_Transfer>
	flashCSSet();
 800354c:	f7ff ffc6 	bl	80034dc <flashCSSet>

	for(i=0;i<1000;i++)
 8003550:	2300      	movs	r3, #0
 8003552:	60fb      	str	r3, [r7, #12]
 8003554:	e00a      	b.n	800356c <ext_flash_erase_4kB+0x60>
	{
		HAL_Delay(1);
 8003556:	2001      	movs	r0, #1
 8003558:	f001 feae 	bl	80052b8 <HAL_Delay>
		if(ext_flash_read_status_register_1()==0x00)
 800355c:	f000 f838 	bl	80035d0 <ext_flash_read_status_register_1>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d007      	beq.n	8003576 <ext_flash_erase_4kB+0x6a>
	for(i=0;i<1000;i++)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	3301      	adds	r3, #1
 800356a:	60fb      	str	r3, [r7, #12]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003572:	d3f0      	bcc.n	8003556 <ext_flash_erase_4kB+0x4a>
		{
			break;
		}
	}
}
 8003574:	e000      	b.n	8003578 <ext_flash_erase_4kB+0x6c>
			break;
 8003576:	bf00      	nop
}
 8003578:	bf00      	nop
 800357a:	3710      	adds	r7, #16
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	0800ad30 	.word	0x0800ad30

08003584 <ext_flash_write>:




void ext_flash_write(unsigned int address, unsigned char *buff, unsigned int len)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	607a      	str	r2, [r7, #4]
	ext_flash_continuous_write_begin(address);
 8003590:	68f8      	ldr	r0, [r7, #12]
 8003592:	f000 f87d 	bl	8003690 <ext_flash_continuous_write_begin>
	ext_flash_continuous_write_write(buff, len);
 8003596:	6879      	ldr	r1, [r7, #4]
 8003598:	68b8      	ldr	r0, [r7, #8]
 800359a:	f000 f89f 	bl	80036dc <ext_flash_continuous_write_write>
	ext_flash_continuous_write_finish();
 800359e:	f000 f8c7 	bl	8003730 <ext_flash_continuous_write_finish>
}
 80035a2:	bf00      	nop
 80035a4:	3710      	adds	r7, #16
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}

080035aa <ext_flash_read>:
void ext_flash_read(unsigned int address, unsigned char *buff, unsigned int len)
{
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b084      	sub	sp, #16
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	60f8      	str	r0, [r7, #12]
 80035b2:	60b9      	str	r1, [r7, #8]
 80035b4:	607a      	str	r2, [r7, #4]
	ext_flash_continuous_read_begin(address);
 80035b6:	68f8      	ldr	r0, [r7, #12]
 80035b8:	f000 f829 	bl	800360e <ext_flash_continuous_read_begin>
	ext_flash_continuous_read_read(buff, len);
 80035bc:	6879      	ldr	r1, [r7, #4]
 80035be:	68b8      	ldr	r0, [r7, #8]
 80035c0:	f000 f843 	bl	800364a <ext_flash_continuous_read_read>
	ext_flash_continuous_read_finish();
 80035c4:	f000 f85d 	bl	8003682 <ext_flash_continuous_read_finish>
}
 80035c8:	bf00      	nop
 80035ca:	3710      	adds	r7, #16
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <ext_flash_read_status_register_1>:

	return data;
}

unsigned char ext_flash_read_status_register_1()
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
	char data;
	flashCSReset();
 80035d6:	f7ff ff8d 	bl	80034f4 <flashCSReset>
	SPI1_Transfer(0x05);
 80035da:	2005      	movs	r0, #5
 80035dc:	f001 f8ca 	bl	8004774 <SPI1_Transfer>
	data=SPI1_Transfer(0x00);
 80035e0:	2000      	movs	r0, #0
 80035e2:	f001 f8c7 	bl	8004774 <SPI1_Transfer>
 80035e6:	4603      	mov	r3, r0
 80035e8:	71fb      	strb	r3, [r7, #7]
	flashCSSet();
 80035ea:	f7ff ff77 	bl	80034dc <flashCSSet>

	return data;
 80035ee:	79fb      	ldrb	r3, [r7, #7]
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3708      	adds	r7, #8
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <ext_flash_wren>:

void ext_flash_wren()
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	af00      	add	r7, sp, #0
	flashCSReset();
 80035fc:	f7ff ff7a 	bl	80034f4 <flashCSReset>
	SPI1_Transfer(0x06);
 8003600:	2006      	movs	r0, #6
 8003602:	f001 f8b7 	bl	8004774 <SPI1_Transfer>
	flashCSSet();
 8003606:	f7ff ff69 	bl	80034dc <flashCSSet>
}
 800360a:	bf00      	nop
 800360c:	bd80      	pop	{r7, pc}

0800360e <ext_flash_continuous_read_begin>:


//Continuous functions below keep conection open while reading, allowing for access to data not aligned to 4kB sectors
void ext_flash_continuous_read_begin(unsigned int address){
 800360e:	b580      	push	{r7, lr}
 8003610:	b082      	sub	sp, #8
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
	command[0]=0x03;
	command[1]=((char *)&address)[3];
	command[2]=((char *)&address)[2];
	command[3]=((char *)&address)[1];*/

	flashCSReset();
 8003616:	f7ff ff6d 	bl	80034f4 <flashCSReset>

	SPI1_Transfer(0x03);
 800361a:	2003      	movs	r0, #3
 800361c:	f001 f8aa 	bl	8004774 <SPI1_Transfer>
	SPI1_Transfer((address>>16)&0xFF);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	0c1b      	lsrs	r3, r3, #16
 8003624:	b2db      	uxtb	r3, r3
 8003626:	4618      	mov	r0, r3
 8003628:	f001 f8a4 	bl	8004774 <SPI1_Transfer>
	SPI1_Transfer((address>>8)&0xFF);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	0a1b      	lsrs	r3, r3, #8
 8003630:	b2db      	uxtb	r3, r3
 8003632:	4618      	mov	r0, r3
 8003634:	f001 f89e 	bl	8004774 <SPI1_Transfer>
	SPI1_Transfer(address&0xFF);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	b2db      	uxtb	r3, r3
 800363c:	4618      	mov	r0, r3
 800363e:	f001 f899 	bl	8004774 <SPI1_Transfer>
}
 8003642:	bf00      	nop
 8003644:	3708      	adds	r7, #8
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}

0800364a <ext_flash_continuous_read_read>:

void ext_flash_continuous_read_read(unsigned char *buff, unsigned int len){
 800364a:	b590      	push	{r4, r7, lr}
 800364c:	b085      	sub	sp, #20
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
 8003652:	6039      	str	r1, [r7, #0]
	for(unsigned int i = 0; i<len; i++){
 8003654:	2300      	movs	r3, #0
 8003656:	60fb      	str	r3, [r7, #12]
 8003658:	e00a      	b.n	8003670 <ext_flash_continuous_read_read+0x26>
		*(buff+i) = SPI1_Transfer(0x00);
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	18d4      	adds	r4, r2, r3
 8003660:	2000      	movs	r0, #0
 8003662:	f001 f887 	bl	8004774 <SPI1_Transfer>
 8003666:	4603      	mov	r3, r0
 8003668:	7023      	strb	r3, [r4, #0]
	for(unsigned int i = 0; i<len; i++){
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	3301      	adds	r3, #1
 800366e:	60fb      	str	r3, [r7, #12]
 8003670:	68fa      	ldr	r2, [r7, #12]
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	429a      	cmp	r2, r3
 8003676:	d3f0      	bcc.n	800365a <ext_flash_continuous_read_read+0x10>
	}
}
 8003678:	bf00      	nop
 800367a:	bf00      	nop
 800367c:	3714      	adds	r7, #20
 800367e:	46bd      	mov	sp, r7
 8003680:	bd90      	pop	{r4, r7, pc}

08003682 <ext_flash_continuous_read_finish>:
void ext_flash_continuous_read_skip(unsigned int len){
	for(unsigned int i = 0; i<len; i++){
			SPI1_Transfer(0x00);
	}
}
void ext_flash_continuous_read_finish(){
 8003682:	b580      	push	{r7, lr}
 8003684:	af00      	add	r7, sp, #0
	flashCSSet();
 8003686:	f7ff ff29 	bl	80034dc <flashCSSet>
}
 800368a:	bf00      	nop
 800368c:	bd80      	pop	{r7, pc}
	...

08003690 <ext_flash_continuous_write_begin>:

void ext_flash_continuous_write_begin(unsigned int address){
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
	ext_flash_wren();
 8003698:	f7ff ffae 	bl	80035f8 <ext_flash_wren>
	flashCSReset();
 800369c:	f7ff ff2a 	bl	80034f4 <flashCSReset>
	SPI1_Transfer(0x02);
 80036a0:	2002      	movs	r0, #2
 80036a2:	f001 f867 	bl	8004774 <SPI1_Transfer>
	SPI1_Transfer((address>>16)&0xFF);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	0c1b      	lsrs	r3, r3, #16
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	4618      	mov	r0, r3
 80036ae:	f001 f861 	bl	8004774 <SPI1_Transfer>
	SPI1_Transfer((address>>8)&0xFF);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	0a1b      	lsrs	r3, r3, #8
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	4618      	mov	r0, r3
 80036ba:	f001 f85b 	bl	8004774 <SPI1_Transfer>
	SPI1_Transfer(address&0xFF);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	4618      	mov	r0, r3
 80036c4:	f001 f856 	bl	8004774 <SPI1_Transfer>
	if(FLASHWRITE_DEBUG_PRINT){printf("FLASHWRITE @ %x :", address);};
 80036c8:	6879      	ldr	r1, [r7, #4]
 80036ca:	4803      	ldr	r0, [pc, #12]	; (80036d8 <ext_flash_continuous_write_begin+0x48>)
 80036cc:	f005 feee 	bl	80094ac <iprintf>
}
 80036d0:	bf00      	nop
 80036d2:	3708      	adds	r7, #8
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	0800ad40 	.word	0x0800ad40

080036dc <ext_flash_continuous_write_write>:
void ext_flash_continuous_write_write(unsigned char *buff, unsigned int len){
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
	unsigned int i;

	for(i=0;i<len;i++)
 80036e6:	2300      	movs	r3, #0
 80036e8:	60fb      	str	r3, [r7, #12]
 80036ea:	e011      	b.n	8003710 <ext_flash_continuous_write_write+0x34>
		{
			SPI1_Transfer(buff[i]);
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	4413      	add	r3, r2
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	4618      	mov	r0, r3
 80036f6:	f001 f83d 	bl	8004774 <SPI1_Transfer>
			if(FLASHWRITE_DEBUG_PRINT){printf(" %x ", buff[i]);};
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	4413      	add	r3, r2
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	4619      	mov	r1, r3
 8003704:	4808      	ldr	r0, [pc, #32]	; (8003728 <ext_flash_continuous_write_write+0x4c>)
 8003706:	f005 fed1 	bl	80094ac <iprintf>
	for(i=0;i<len;i++)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	3301      	adds	r3, #1
 800370e:	60fb      	str	r3, [r7, #12]
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	429a      	cmp	r2, r3
 8003716:	d3e9      	bcc.n	80036ec <ext_flash_continuous_write_write+0x10>
		}
	if(FLASHWRITE_DEBUG_PRINT){printf("\n\r");};
 8003718:	4804      	ldr	r0, [pc, #16]	; (800372c <ext_flash_continuous_write_write+0x50>)
 800371a:	f005 fec7 	bl	80094ac <iprintf>
}
 800371e:	bf00      	nop
 8003720:	3710      	adds	r7, #16
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	0800ad54 	.word	0x0800ad54
 800372c:	0800ad5c 	.word	0x0800ad5c

08003730 <ext_flash_continuous_write_finish>:
void ext_flash_continuous_write_finish(){
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
	flashCSSet();
 8003736:	f7ff fed1 	bl	80034dc <flashCSSet>
	unsigned int i;
	for(i=0;i<1000;i++)
 800373a:	2300      	movs	r3, #0
 800373c:	607b      	str	r3, [r7, #4]
 800373e:	e00a      	b.n	8003756 <ext_flash_continuous_write_finish+0x26>
	{
		HAL_Delay(1);
 8003740:	2001      	movs	r0, #1
 8003742:	f001 fdb9 	bl	80052b8 <HAL_Delay>
		if(ext_flash_read_status_register_1()==0x00)
 8003746:	f7ff ff43 	bl	80035d0 <ext_flash_read_status_register_1>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d007      	beq.n	8003760 <ext_flash_continuous_write_finish+0x30>
	for(i=0;i<1000;i++)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	3301      	adds	r3, #1
 8003754:	607b      	str	r3, [r7, #4]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800375c:	d3f0      	bcc.n	8003740 <ext_flash_continuous_write_finish+0x10>
		{
			break;
		}
	}
}
 800375e:	e000      	b.n	8003762 <ext_flash_continuous_write_finish+0x32>
			break;
 8003760:	bf00      	nop
}
 8003762:	bf00      	nop
 8003764:	3708      	adds	r7, #8
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
	...

0800376c <ext_flash_write_multipage>:

}



void ext_flash_write_multipage(unsigned int address, unsigned char *buff, unsigned int len){
 800376c:	b580      	push	{r7, lr}
 800376e:	b0c8      	sub	sp, #288	; 0x120
 8003770:	af00      	add	r7, sp, #0
 8003772:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003776:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800377a:	6018      	str	r0, [r3, #0]
 800377c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003780:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003784:	6019      	str	r1, [r3, #0]
 8003786:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800378a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800378e:	601a      	str	r2, [r3, #0]
	printf("Multipage write [%d]b@%d \n\r", len, address);
 8003790:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003794:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 8003798:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800379c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80037a0:	6812      	ldr	r2, [r2, #0]
 80037a2:	6819      	ldr	r1, [r3, #0]
 80037a4:	4830      	ldr	r0, [pc, #192]	; (8003868 <ext_flash_write_multipage+0xfc>)
 80037a6:	f005 fe81 	bl	80094ac <iprintf>
	unsigned char pageBuff[PAGE_SIZE];
	unsigned int bytesLeft = len;
 80037aa:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80037ae:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	unsigned int buffIndex = 0;
 80037b8:	2300      	movs	r3, #0
 80037ba:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	unsigned int addrIncrement = 0;
 80037be:	2300      	movs	r3, #0
 80037c0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	while(bytesLeft > 0){
 80037c4:	e045      	b.n	8003852 <ext_flash_write_multipage+0xe6>
		if(bytesLeft <= PAGE_SIZE){
 80037c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80037ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037ce:	d812      	bhi.n	80037f6 <ext_flash_write_multipage+0x8a>
			memcpy(pageBuff, buff + buffIndex, bytesLeft);
 80037d0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80037d4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037de:	18d1      	adds	r1, r2, r3
 80037e0:	f107 0314 	add.w	r3, r7, #20
 80037e4:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80037e8:	4618      	mov	r0, r3
 80037ea:	f005 fe49 	bl	8009480 <memcpy>
			bytesLeft = 0;
 80037ee:	2300      	movs	r3, #0
 80037f0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80037f4:	e018      	b.n	8003828 <ext_flash_write_multipage+0xbc>
		}
		else{
			memcpy(pageBuff, buff + buffIndex, PAGE_SIZE);
 80037f6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80037fa:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003804:	441a      	add	r2, r3
 8003806:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800380a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800380e:	4618      	mov	r0, r3
 8003810:	4611      	mov	r1, r2
 8003812:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003816:	461a      	mov	r2, r3
 8003818:	f005 fe32 	bl	8009480 <memcpy>
			bytesLeft -= PAGE_SIZE;
 800381c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003820:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003824:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
		}
		ext_flash_write(address + addrIncrement, pageBuff, PAGE_SIZE);
 8003828:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800382c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003836:	4413      	add	r3, r2
 8003838:	f107 0114 	add.w	r1, r7, #20
 800383c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003840:	4618      	mov	r0, r3
 8003842:	f7ff fe9f 	bl	8003584 <ext_flash_write>
		addrIncrement += PAGE_SIZE;
 8003846:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800384a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800384e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	while(bytesLeft > 0){
 8003852:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003856:	2b00      	cmp	r3, #0
 8003858:	d1b5      	bne.n	80037c6 <ext_flash_write_multipage+0x5a>
	}

}
 800385a:	bf00      	nop
 800385c:	bf00      	nop
 800385e:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	0800ad80 	.word	0x0800ad80

0800386c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800386c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003870:	f6ad 4d8c 	subw	sp, sp, #3212	; 0xc8c
 8003874:	af7e      	add	r7, sp, #504	; 0x1f8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003876:	f001 fcad 	bl	80051d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800387a:	f000 fa3d 	bl	8003cf8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800387e:	f000 fbff 	bl	8004080 <MX_GPIO_Init>
  MX_FSMC_Init();
 8003882:	f000 fca3 	bl	80041cc <MX_FSMC_Init>
  MX_USART1_UART_Init();
 8003886:	f000 fb97 	bl	8003fb8 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 800388a:	f000 fa9f 	bl	8003dcc <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800388e:	f000 fbc5 	bl	800401c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8003892:	f000 fad1 	bl	8003e38 <MX_SPI1_Init>
  MX_TIM1_Init();
 8003896:	f000 fb0d 	bl	8003eb4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  //enable uart interrupt
  uint16_t count = 0;
 800389a:	2300      	movs	r3, #0
 800389c:	f8a7 3a7a 	strh.w	r3, [r7, #2682]	; 0xa7a
  Init_LCD();
 80038a0:	f7fd f97e 	bl	8000ba0 <Init_LCD>

  touch_reset();
 80038a4:	f7fd fe84 	bl	80015b0 <touch_reset>
  touch_init(hi2c1);
 80038a8:	4cdd      	ldr	r4, [pc, #884]	; (8003c20 <main+0x3b4>)
 80038aa:	4668      	mov	r0, sp
 80038ac:	f104 0110 	add.w	r1, r4, #16
 80038b0:	2344      	movs	r3, #68	; 0x44
 80038b2:	461a      	mov	r2, r3
 80038b4:	f005 fde4 	bl	8009480 <memcpy>
 80038b8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80038bc:	f7fd fd98 	bl	80013f0 <touch_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  	  printf("Entering main loop\n\r");
 80038c0:	48d8      	ldr	r0, [pc, #864]	; (8003c24 <main+0x3b8>)
 80038c2:	f005 fdf3 	bl	80094ac <iprintf>


  	int loopNumber = 0;
 80038c6:	2300      	movs	r3, #0
 80038c8:	f8c7 3a7c 	str.w	r3, [r7, #2684]	; 0xa7c



	LCD_fillRect(0,0,50,50,WHITE);
 80038cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80038d0:	9300      	str	r3, [sp, #0]
 80038d2:	2332      	movs	r3, #50	; 0x32
 80038d4:	2232      	movs	r2, #50	; 0x32
 80038d6:	2100      	movs	r1, #0
 80038d8:	2000      	movs	r0, #0
 80038da:	f7fd f96f 	bl	8000bbc <LCD_fillRect>
	LCD_fillRect(470,0,50,50,RED);
 80038de:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80038e2:	9300      	str	r3, [sp, #0]
 80038e4:	2332      	movs	r3, #50	; 0x32
 80038e6:	2232      	movs	r2, #50	; 0x32
 80038e8:	2100      	movs	r1, #0
 80038ea:	f44f 70eb 	mov.w	r0, #470	; 0x1d6
 80038ee:	f7fd f965 	bl	8000bbc <LCD_fillRect>
	LCD_fillRect(256,154,50,50,RED);
 80038f2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80038f6:	9300      	str	r3, [sp, #0]
 80038f8:	2332      	movs	r3, #50	; 0x32
 80038fa:	2232      	movs	r2, #50	; 0x32
 80038fc:	219a      	movs	r1, #154	; 0x9a
 80038fe:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003902:	f7fd f95b 	bl	8000bbc <LCD_fillRect>
	LCD_fillRect(100,100,50,50,YELLOW);
 8003906:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800390a:	9300      	str	r3, [sp, #0]
 800390c:	2332      	movs	r3, #50	; 0x32
 800390e:	2232      	movs	r2, #50	; 0x32
 8003910:	2164      	movs	r1, #100	; 0x64
 8003912:	2064      	movs	r0, #100	; 0x64
 8003914:	f7fd f952 	bl	8000bbc <LCD_fillRect>
	printf("Register result: %d\n\r",touch_register_element(0,0,0,0,50,50,0,0));
 8003918:	2300      	movs	r3, #0
 800391a:	9303      	str	r3, [sp, #12]
 800391c:	2300      	movs	r3, #0
 800391e:	9302      	str	r3, [sp, #8]
 8003920:	2332      	movs	r3, #50	; 0x32
 8003922:	9301      	str	r3, [sp, #4]
 8003924:	2332      	movs	r3, #50	; 0x32
 8003926:	9300      	str	r3, [sp, #0]
 8003928:	2300      	movs	r3, #0
 800392a:	2200      	movs	r2, #0
 800392c:	2100      	movs	r1, #0
 800392e:	2000      	movs	r0, #0
 8003930:	f7fd ff2a 	bl	8001788 <touch_register_element>
 8003934:	4603      	mov	r3, r0
 8003936:	4619      	mov	r1, r3
 8003938:	48bb      	ldr	r0, [pc, #748]	; (8003c28 <main+0x3bc>)
 800393a:	f005 fdb7 	bl	80094ac <iprintf>
	printf("Register result: %d\n\r",touch_register_element(0,0,470,0,470+50,50,0,0));
 800393e:	2300      	movs	r3, #0
 8003940:	9303      	str	r3, [sp, #12]
 8003942:	2300      	movs	r3, #0
 8003944:	9302      	str	r3, [sp, #8]
 8003946:	2332      	movs	r3, #50	; 0x32
 8003948:	9301      	str	r3, [sp, #4]
 800394a:	f44f 7302 	mov.w	r3, #520	; 0x208
 800394e:	9300      	str	r3, [sp, #0]
 8003950:	2300      	movs	r3, #0
 8003952:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8003956:	2100      	movs	r1, #0
 8003958:	2000      	movs	r0, #0
 800395a:	f7fd ff15 	bl	8001788 <touch_register_element>
 800395e:	4603      	mov	r3, r0
 8003960:	4619      	mov	r1, r3
 8003962:	48b1      	ldr	r0, [pc, #708]	; (8003c28 <main+0x3bc>)
 8003964:	f005 fda2 	bl	80094ac <iprintf>
	printf("Register result: %d\n\r",touch_register_element(0,0,256,154,256+50,154+50,0,0));
 8003968:	2300      	movs	r3, #0
 800396a:	9303      	str	r3, [sp, #12]
 800396c:	2300      	movs	r3, #0
 800396e:	9302      	str	r3, [sp, #8]
 8003970:	23cc      	movs	r3, #204	; 0xcc
 8003972:	9301      	str	r3, [sp, #4]
 8003974:	f44f 7399 	mov.w	r3, #306	; 0x132
 8003978:	9300      	str	r3, [sp, #0]
 800397a:	239a      	movs	r3, #154	; 0x9a
 800397c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003980:	2100      	movs	r1, #0
 8003982:	2000      	movs	r0, #0
 8003984:	f7fd ff00 	bl	8001788 <touch_register_element>
 8003988:	4603      	mov	r3, r0
 800398a:	4619      	mov	r1, r3
 800398c:	48a6      	ldr	r0, [pc, #664]	; (8003c28 <main+0x3bc>)
 800398e:	f005 fd8d 	bl	80094ac <iprintf>
	printf("Register result: %d\n\r",touch_register_element(0,0,100,100,150,150,0,0));
 8003992:	2300      	movs	r3, #0
 8003994:	9303      	str	r3, [sp, #12]
 8003996:	2300      	movs	r3, #0
 8003998:	9302      	str	r3, [sp, #8]
 800399a:	2396      	movs	r3, #150	; 0x96
 800399c:	9301      	str	r3, [sp, #4]
 800399e:	2396      	movs	r3, #150	; 0x96
 80039a0:	9300      	str	r3, [sp, #0]
 80039a2:	2364      	movs	r3, #100	; 0x64
 80039a4:	2264      	movs	r2, #100	; 0x64
 80039a6:	2100      	movs	r1, #0
 80039a8:	2000      	movs	r0, #0
 80039aa:	f7fd feed 	bl	8001788 <touch_register_element>
 80039ae:	4603      	mov	r3, r0
 80039b0:	4619      	mov	r1, r3
 80039b2:	489d      	ldr	r0, [pc, #628]	; (8003c28 <main+0x3bc>)
 80039b4:	f005 fd7a 	bl	80094ac <iprintf>

	int notYetDrawnFlag = 1;
 80039b8:	2301      	movs	r3, #1
 80039ba:	f8c7 3a80 	str.w	r3, [r7, #2688]	; 0xa80
	struct generalConfig gConf;
	int currentScreen = 1;
 80039be:	2301      	movs	r3, #1
 80039c0:	f8c7 3a74 	str.w	r3, [r7, #2676]	; 0xa74

	//arrays for holding object data loaded from flash
	uint16_t maxObjects = 128;
 80039c4:	2380      	movs	r3, #128	; 0x80
 80039c6:	f8a7 3a72 	strh.w	r3, [r7, #2674]	; 0xa72
	uint16_t maxData = SECTOR_SIZE*4;
 80039ca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80039ce:	f8a7 3a70 	strh.w	r3, [r7, #2672]	; 0xa70
	struct screen screenHeader;
	struct object objArr[maxObjects];
 80039d2:	f8b7 4a72 	ldrh.w	r4, [r7, #2674]	; 0xa72
 80039d6:	4623      	mov	r3, r4
 80039d8:	3b01      	subs	r3, #1
 80039da:	f8c7 3a6c 	str.w	r3, [r7, #2668]	; 0xa6c
 80039de:	b2a3      	uxth	r3, r4
 80039e0:	2200      	movs	r2, #0
 80039e2:	623b      	str	r3, [r7, #32]
 80039e4:	627a      	str	r2, [r7, #36]	; 0x24
 80039e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80039ea:	f04f 0000 	mov.w	r0, #0
 80039ee:	f04f 0100 	mov.w	r1, #0
 80039f2:	00d9      	lsls	r1, r3, #3
 80039f4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80039f8:	00d0      	lsls	r0, r2, #3
 80039fa:	4602      	mov	r2, r0
 80039fc:	460b      	mov	r3, r1
 80039fe:	6a39      	ldr	r1, [r7, #32]
 8003a00:	ebb2 0801 	subs.w	r8, r2, r1
 8003a04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a06:	eb63 0901 	sbc.w	r9, r3, r1
 8003a0a:	f04f 0200 	mov.w	r2, #0
 8003a0e:	f04f 0300 	mov.w	r3, #0
 8003a12:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8003a16:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8003a1a:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8003a1e:	b2a3      	uxth	r3, r4
 8003a20:	2200      	movs	r2, #0
 8003a22:	61bb      	str	r3, [r7, #24]
 8003a24:	61fa      	str	r2, [r7, #28]
 8003a26:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8003a2a:	4642      	mov	r2, r8
 8003a2c:	464b      	mov	r3, r9
 8003a2e:	f04f 0000 	mov.w	r0, #0
 8003a32:	f04f 0100 	mov.w	r1, #0
 8003a36:	00d9      	lsls	r1, r3, #3
 8003a38:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a3c:	00d0      	lsls	r0, r2, #3
 8003a3e:	4602      	mov	r2, r0
 8003a40:	460b      	mov	r3, r1
 8003a42:	4641      	mov	r1, r8
 8003a44:	ebb2 0a01 	subs.w	sl, r2, r1
 8003a48:	4649      	mov	r1, r9
 8003a4a:	eb63 0b01 	sbc.w	fp, r3, r1
 8003a4e:	f04f 0200 	mov.w	r2, #0
 8003a52:	f04f 0300 	mov.w	r3, #0
 8003a56:	ea4f 130b 	mov.w	r3, fp, lsl #4
 8003a5a:	ea43 731a 	orr.w	r3, r3, sl, lsr #28
 8003a5e:	ea4f 120a 	mov.w	r2, sl, lsl #4
 8003a62:	4622      	mov	r2, r4
 8003a64:	4613      	mov	r3, r2
 8003a66:	00db      	lsls	r3, r3, #3
 8003a68:	1a9b      	subs	r3, r3, r2
 8003a6a:	005b      	lsls	r3, r3, #1
 8003a6c:	3307      	adds	r3, #7
 8003a6e:	08db      	lsrs	r3, r3, #3
 8003a70:	00db      	lsls	r3, r3, #3
 8003a72:	ebad 0d03 	sub.w	sp, sp, r3
 8003a76:	ab7e      	add	r3, sp, #504	; 0x1f8
 8003a78:	3301      	adds	r3, #1
 8003a7a:	085b      	lsrs	r3, r3, #1
 8003a7c:	005b      	lsls	r3, r3, #1
 8003a7e:	f8c7 3a68 	str.w	r3, [r7, #2664]	; 0xa68
	uint8_t dataArr[maxData];
 8003a82:	f8b7 1a70 	ldrh.w	r1, [r7, #2672]	; 0xa70
 8003a86:	460b      	mov	r3, r1
 8003a88:	3b01      	subs	r3, #1
 8003a8a:	f8c7 3a64 	str.w	r3, [r7, #2660]	; 0xa64
 8003a8e:	b28b      	uxth	r3, r1
 8003a90:	2200      	movs	r2, #0
 8003a92:	613b      	str	r3, [r7, #16]
 8003a94:	617a      	str	r2, [r7, #20]
 8003a96:	f04f 0200 	mov.w	r2, #0
 8003a9a:	f04f 0300 	mov.w	r3, #0
 8003a9e:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8003aa2:	4648      	mov	r0, r9
 8003aa4:	00c3      	lsls	r3, r0, #3
 8003aa6:	4640      	mov	r0, r8
 8003aa8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003aac:	4640      	mov	r0, r8
 8003aae:	00c2      	lsls	r2, r0, #3
 8003ab0:	b28b      	uxth	r3, r1
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	60bb      	str	r3, [r7, #8]
 8003ab6:	60fa      	str	r2, [r7, #12]
 8003ab8:	f04f 0200 	mov.w	r2, #0
 8003abc:	f04f 0300 	mov.w	r3, #0
 8003ac0:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8003ac4:	4648      	mov	r0, r9
 8003ac6:	00c3      	lsls	r3, r0, #3
 8003ac8:	4640      	mov	r0, r8
 8003aca:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003ace:	4640      	mov	r0, r8
 8003ad0:	00c2      	lsls	r2, r0, #3
 8003ad2:	460b      	mov	r3, r1
 8003ad4:	3307      	adds	r3, #7
 8003ad6:	08db      	lsrs	r3, r3, #3
 8003ad8:	00db      	lsls	r3, r3, #3
 8003ada:	ebad 0d03 	sub.w	sp, sp, r3
 8003ade:	ab7e      	add	r3, sp, #504	; 0x1f8
 8003ae0:	3300      	adds	r3, #0
 8003ae2:	f8c7 3a60 	str.w	r3, [r7, #2656]	; 0xa60
	uint8_t *pointerArr[maxObjects];
 8003ae6:	f8b7 1a72 	ldrh.w	r1, [r7, #2674]	; 0xa72
 8003aea:	460b      	mov	r3, r1
 8003aec:	3b01      	subs	r3, #1
 8003aee:	f8c7 3a5c 	str.w	r3, [r7, #2652]	; 0xa5c
 8003af2:	b28b      	uxth	r3, r1
 8003af4:	2200      	movs	r2, #0
 8003af6:	603b      	str	r3, [r7, #0]
 8003af8:	607a      	str	r2, [r7, #4]
 8003afa:	f04f 0200 	mov.w	r2, #0
 8003afe:	f04f 0300 	mov.w	r3, #0
 8003b02:	e9d7 8900 	ldrd	r8, r9, [r7]
 8003b06:	4648      	mov	r0, r9
 8003b08:	0143      	lsls	r3, r0, #5
 8003b0a:	4640      	mov	r0, r8
 8003b0c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003b10:	4640      	mov	r0, r8
 8003b12:	0142      	lsls	r2, r0, #5
 8003b14:	b28b      	uxth	r3, r1
 8003b16:	2200      	movs	r2, #0
 8003b18:	461d      	mov	r5, r3
 8003b1a:	4616      	mov	r6, r2
 8003b1c:	f04f 0200 	mov.w	r2, #0
 8003b20:	f04f 0300 	mov.w	r3, #0
 8003b24:	0173      	lsls	r3, r6, #5
 8003b26:	ea43 63d5 	orr.w	r3, r3, r5, lsr #27
 8003b2a:	016a      	lsls	r2, r5, #5
 8003b2c:	460b      	mov	r3, r1
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	3307      	adds	r3, #7
 8003b32:	08db      	lsrs	r3, r3, #3
 8003b34:	00db      	lsls	r3, r3, #3
 8003b36:	ebad 0d03 	sub.w	sp, sp, r3
 8003b3a:	ab7e      	add	r3, sp, #504	; 0x1f8
 8003b3c:	3303      	adds	r3, #3
 8003b3e:	089b      	lsrs	r3, r3, #2
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	f8c7 3a58 	str.w	r3, [r7, #2648]	; 0xa58


	while (1)
	{

		loopNumber++;
 8003b46:	f8d7 3a7c 	ldr.w	r3, [r7, #2684]	; 0xa7c
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	f8c7 3a7c 	str.w	r3, [r7, #2684]	; 0xa7c
		int configResult = 1; //1 = no data on uart
 8003b50:	2301      	movs	r3, #1
 8003b52:	f8c7 3a84 	str.w	r3, [r7, #2692]	; 0xa84
		if(loopNumber % 6000000 == 0){
 8003b56:	f8d7 2a7c 	ldr.w	r2, [r7, #2684]	; 0xa7c
 8003b5a:	4b34      	ldr	r3, [pc, #208]	; (8003c2c <main+0x3c0>)
 8003b5c:	fb83 1302 	smull	r1, r3, r3, r2
 8003b60:	14d9      	asrs	r1, r3, #19
 8003b62:	17d3      	asrs	r3, r2, #31
 8003b64:	1acb      	subs	r3, r1, r3
 8003b66:	4932      	ldr	r1, [pc, #200]	; (8003c30 <main+0x3c4>)
 8003b68:	fb01 f303 	mul.w	r3, r1, r3
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d12f      	bne.n	8003bd2 <main+0x366>
			 configResult = configFromUart(); //check if there's incoming data on config uart, if yes, attempt to read configuration
 8003b72:	f7fe f80f 	bl	8001b94 <configFromUart>
 8003b76:	f8c7 0a84 	str.w	r0, [r7, #2692]	; 0xa84
			 char str[] = "You fight \nlike a dairy\nfarmer!";
 8003b7a:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8003b7e:	f6a3 2364 	subw	r3, r3, #2660	; 0xa64
 8003b82:	4a2c      	ldr	r2, [pc, #176]	; (8003c34 <main+0x3c8>)
 8003b84:	461c      	mov	r4, r3
 8003b86:	4615      	mov	r5, r2
 8003b88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003b8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003b8c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003b90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			 drawStringToLcd5x7(100, 20, 5, 0xAA, 0, 0xFF, 3, 5, str);
 8003b94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b98:	9304      	str	r3, [sp, #16]
 8003b9a:	2305      	movs	r3, #5
 8003b9c:	9303      	str	r3, [sp, #12]
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	9302      	str	r3, [sp, #8]
 8003ba2:	23ff      	movs	r3, #255	; 0xff
 8003ba4:	9301      	str	r3, [sp, #4]
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	9300      	str	r3, [sp, #0]
 8003baa:	23aa      	movs	r3, #170	; 0xaa
 8003bac:	2205      	movs	r2, #5
 8003bae:	2114      	movs	r1, #20
 8003bb0:	2064      	movs	r0, #100	; 0x64
 8003bb2:	f000 fced 	bl	8004590 <drawStringToLcd5x7>

			 //debug
			 struct bitmapList bl;
			 readBitmapList(&bl);
 8003bb6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f7ff f9ec 	bl	8002f98 <readBitmapList>
			 printf("total bitmaps: >> %d \n\r", bl.totalBitmaps);
 8003bc0:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8003bc4:	f6a3 2344 	subw	r3, r3, #2628	; 0xa44
 8003bc8:	881b      	ldrh	r3, [r3, #0]
 8003bca:	4619      	mov	r1, r3
 8003bcc:	481a      	ldr	r0, [pc, #104]	; (8003c38 <main+0x3cc>)
 8003bce:	f005 fc6d 	bl	80094ac <iprintf>
		}

		//redraw display
		if(notYetDrawnFlag || configResult != 1){
 8003bd2:	f8d7 3a80 	ldr.w	r3, [r7, #2688]	; 0xa80
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d104      	bne.n	8003be4 <main+0x378>
 8003bda:	f8d7 3a84 	ldr.w	r3, [r7, #2692]	; 0xa84
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	f000 8087 	beq.w	8003cf2 <main+0x486>
			notYetDrawnFlag = 0;
 8003be4:	2300      	movs	r3, #0
 8003be6:	f8c7 3a80 	str.w	r3, [r7, #2688]	; 0xa80
			readGeneralConfig(&gConf);
 8003bea:	f607 0354 	addw	r3, r7, #2132	; 0x854
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f7ff f9ae 	bl	8002f50 <readGeneralConfig>
			printf("Redrawing display. Just FYI:\n\r");
 8003bf4:	4811      	ldr	r0, [pc, #68]	; (8003c3c <main+0x3d0>)
 8003bf6:	f005 fc59 	bl	80094ac <iprintf>
			printAllScreens(gConf);
 8003bfa:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8003bfe:	f5a3 740f 	sub.w	r4, r3, #572	; 0x23c
 8003c02:	4668      	mov	r0, sp
 8003c04:	f104 0310 	add.w	r3, r4, #16
 8003c08:	f44f 72f9 	mov.w	r2, #498	; 0x1f2
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	f005 fc37 	bl	8009480 <memcpy>
 8003c12:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003c16:	f7ff fa7d 	bl	8003114 <printAllScreens>
			int objectsRead = 0;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	e010      	b.n	8003c40 <main+0x3d4>
 8003c1e:	bf00      	nop
 8003c20:	2000205c 	.word	0x2000205c
 8003c24:	0800ad9c 	.word	0x0800ad9c
 8003c28:	0800adb4 	.word	0x0800adb4
 8003c2c:	165e9f81 	.word	0x165e9f81
 8003c30:	005b8d80 	.word	0x005b8d80
 8003c34:	0800ae04 	.word	0x0800ae04
 8003c38:	0800adcc 	.word	0x0800adcc
 8003c3c:	0800ade4 	.word	0x0800ade4
 8003c40:	f8c7 3a88 	str.w	r3, [r7, #2696]	; 0xa88
			currentScreen = 0;
 8003c44:	2300      	movs	r3, #0
 8003c46:	f8c7 3a74 	str.w	r3, [r7, #2676]	; 0xa74
			if(currentScreen < gConf.totalScreens){
 8003c4a:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8003c4e:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	461a      	mov	r2, r3
 8003c56:	f8d7 3a74 	ldr.w	r3, [r7, #2676]	; 0xa74
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	da1b      	bge.n	8003c96 <main+0x42a>
				objectsRead = openScreen(gConf.screenSectors[currentScreen], &screenHeader, objArr, dataArr, pointerArr, maxData, maxObjects);
 8003c5e:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8003c62:	f5a3 720f 	sub.w	r2, r3, #572	; 0x23c
 8003c66:	f8d7 3a74 	ldr.w	r3, [r7, #2676]	; 0xa74
 8003c6a:	005b      	lsls	r3, r3, #1
 8003c6c:	4413      	add	r3, r2
 8003c6e:	8858      	ldrh	r0, [r3, #2]
 8003c70:	f507 6105 	add.w	r1, r7, #2128	; 0x850
 8003c74:	f8b7 3a72 	ldrh.w	r3, [r7, #2674]	; 0xa72
 8003c78:	9302      	str	r3, [sp, #8]
 8003c7a:	f8b7 3a70 	ldrh.w	r3, [r7, #2672]	; 0xa70
 8003c7e:	9301      	str	r3, [sp, #4]
 8003c80:	f8d7 3a58 	ldr.w	r3, [r7, #2648]	; 0xa58
 8003c84:	9300      	str	r3, [sp, #0]
 8003c86:	f8d7 3a60 	ldr.w	r3, [r7, #2656]	; 0xa60
 8003c8a:	f8d7 2a68 	ldr.w	r2, [r7, #2664]	; 0xa68
 8003c8e:	f7ff f9a9 	bl	8002fe4 <openScreen>
 8003c92:	f8c7 0a88 	str.w	r0, [r7, #2696]	; 0xa88
			}
			int i;
			for(i = 0; i<objectsRead; i++){
 8003c96:	2300      	movs	r3, #0
 8003c98:	f8c7 3a8c 	str.w	r3, [r7, #2700]	; 0xa8c
 8003c9c:	e023      	b.n	8003ce6 <main+0x47a>
				drawObjectToLcd(objArr[i], pointerArr[i], 0);
 8003c9e:	f8d7 3a58 	ldr.w	r3, [r7, #2648]	; 0xa58
 8003ca2:	f8d7 2a8c 	ldr.w	r2, [r7, #2700]	; 0xa8c
 8003ca6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003caa:	f8d7 0a68 	ldr.w	r0, [r7, #2664]	; 0xa68
 8003cae:	f8d7 2a8c 	ldr.w	r2, [r7, #2700]	; 0xa8c
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	00db      	lsls	r3, r3, #3
 8003cb6:	1a9b      	subs	r3, r3, r2
 8003cb8:	005b      	lsls	r3, r3, #1
 8003cba:	4403      	add	r3, r0
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	9201      	str	r2, [sp, #4]
 8003cc0:	9100      	str	r1, [sp, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	4610      	mov	r0, r2
 8003cc6:	685a      	ldr	r2, [r3, #4]
 8003cc8:	4611      	mov	r1, r2
 8003cca:	689a      	ldr	r2, [r3, #8]
 8003ccc:	4614      	mov	r4, r2
 8003cce:	899a      	ldrh	r2, [r3, #12]
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	f362 030f 	bfi	r3, r2, #0, #16
 8003cd6:	4622      	mov	r2, r4
 8003cd8:	f000 faf8 	bl	80042cc <drawObjectToLcd>
			for(i = 0; i<objectsRead; i++){
 8003cdc:	f8d7 3a8c 	ldr.w	r3, [r7, #2700]	; 0xa8c
 8003ce0:	3301      	adds	r3, #1
 8003ce2:	f8c7 3a8c 	str.w	r3, [r7, #2700]	; 0xa8c
 8003ce6:	f8d7 2a8c 	ldr.w	r2, [r7, #2700]	; 0xa8c
 8003cea:	f8d7 3a88 	ldr.w	r3, [r7, #2696]	; 0xa88
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	dbd5      	blt.n	8003c9e <main+0x432>
			}
		}



		touch_periodic_process();
 8003cf2:	f7fd fc73 	bl	80015dc <touch_periodic_process>
	{
 8003cf6:	e726      	b.n	8003b46 <main+0x2da>

08003cf8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b094      	sub	sp, #80	; 0x50
 8003cfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003cfe:	f107 0320 	add.w	r3, r7, #32
 8003d02:	2230      	movs	r2, #48	; 0x30
 8003d04:	2100      	movs	r1, #0
 8003d06:	4618      	mov	r0, r3
 8003d08:	f005 fbc8 	bl	800949c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003d0c:	f107 030c 	add.w	r3, r7, #12
 8003d10:	2200      	movs	r2, #0
 8003d12:	601a      	str	r2, [r3, #0]
 8003d14:	605a      	str	r2, [r3, #4]
 8003d16:	609a      	str	r2, [r3, #8]
 8003d18:	60da      	str	r2, [r3, #12]
 8003d1a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	60bb      	str	r3, [r7, #8]
 8003d20:	4b28      	ldr	r3, [pc, #160]	; (8003dc4 <SystemClock_Config+0xcc>)
 8003d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d24:	4a27      	ldr	r2, [pc, #156]	; (8003dc4 <SystemClock_Config+0xcc>)
 8003d26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d2a:	6413      	str	r3, [r2, #64]	; 0x40
 8003d2c:	4b25      	ldr	r3, [pc, #148]	; (8003dc4 <SystemClock_Config+0xcc>)
 8003d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d34:	60bb      	str	r3, [r7, #8]
 8003d36:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d38:	2300      	movs	r3, #0
 8003d3a:	607b      	str	r3, [r7, #4]
 8003d3c:	4b22      	ldr	r3, [pc, #136]	; (8003dc8 <SystemClock_Config+0xd0>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a21      	ldr	r2, [pc, #132]	; (8003dc8 <SystemClock_Config+0xd0>)
 8003d42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d46:	6013      	str	r3, [r2, #0]
 8003d48:	4b1f      	ldr	r3, [pc, #124]	; (8003dc8 <SystemClock_Config+0xd0>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d50:	607b      	str	r3, [r7, #4]
 8003d52:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003d54:	2301      	movs	r3, #1
 8003d56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003d58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d5c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003d5e:	2302      	movs	r3, #2
 8003d60:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003d62:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003d66:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003d68:	2308      	movs	r3, #8
 8003d6a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003d6c:	23a8      	movs	r3, #168	; 0xa8
 8003d6e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003d70:	2302      	movs	r3, #2
 8003d72:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003d74:	2304      	movs	r3, #4
 8003d76:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003d78:	f107 0320 	add.w	r3, r7, #32
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f002 ff71 	bl	8006c64 <HAL_RCC_OscConfig>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d001      	beq.n	8003d8c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003d88:	f000 fa9a 	bl	80042c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003d8c:	230f      	movs	r3, #15
 8003d8e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003d90:	2302      	movs	r3, #2
 8003d92:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003d94:	2300      	movs	r3, #0
 8003d96:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003d98:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003d9c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003d9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003da2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003da4:	f107 030c 	add.w	r3, r7, #12
 8003da8:	2105      	movs	r1, #5
 8003daa:	4618      	mov	r0, r3
 8003dac:	f003 f9d2 	bl	8007154 <HAL_RCC_ClockConfig>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d001      	beq.n	8003dba <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003db6:	f000 fa83 	bl	80042c0 <Error_Handler>
  }
}
 8003dba:	bf00      	nop
 8003dbc:	3750      	adds	r7, #80	; 0x50
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	40023800 	.word	0x40023800
 8003dc8:	40007000 	.word	0x40007000

08003dcc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003dd0:	4b16      	ldr	r3, [pc, #88]	; (8003e2c <MX_I2C1_Init+0x60>)
 8003dd2:	4a17      	ldr	r2, [pc, #92]	; (8003e30 <MX_I2C1_Init+0x64>)
 8003dd4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003dd6:	4b15      	ldr	r3, [pc, #84]	; (8003e2c <MX_I2C1_Init+0x60>)
 8003dd8:	4a16      	ldr	r2, [pc, #88]	; (8003e34 <MX_I2C1_Init+0x68>)
 8003dda:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003ddc:	4b13      	ldr	r3, [pc, #76]	; (8003e2c <MX_I2C1_Init+0x60>)
 8003dde:	2200      	movs	r2, #0
 8003de0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003de2:	4b12      	ldr	r3, [pc, #72]	; (8003e2c <MX_I2C1_Init+0x60>)
 8003de4:	2200      	movs	r2, #0
 8003de6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003de8:	4b10      	ldr	r3, [pc, #64]	; (8003e2c <MX_I2C1_Init+0x60>)
 8003dea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003dee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003df0:	4b0e      	ldr	r3, [pc, #56]	; (8003e2c <MX_I2C1_Init+0x60>)
 8003df2:	2200      	movs	r2, #0
 8003df4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003df6:	4b0d      	ldr	r3, [pc, #52]	; (8003e2c <MX_I2C1_Init+0x60>)
 8003df8:	2200      	movs	r2, #0
 8003dfa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003dfc:	4b0b      	ldr	r3, [pc, #44]	; (8003e2c <MX_I2C1_Init+0x60>)
 8003dfe:	2200      	movs	r2, #0
 8003e00:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003e02:	4b0a      	ldr	r3, [pc, #40]	; (8003e2c <MX_I2C1_Init+0x60>)
 8003e04:	2200      	movs	r2, #0
 8003e06:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003e08:	4808      	ldr	r0, [pc, #32]	; (8003e2c <MX_I2C1_Init+0x60>)
 8003e0a:	f001 fdeb 	bl	80059e4 <HAL_I2C_Init>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d001      	beq.n	8003e18 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003e14:	f000 fa54 	bl	80042c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  __HAL_I2C_ENABLE(&hi2c1);
 8003e18:	4b04      	ldr	r3, [pc, #16]	; (8003e2c <MX_I2C1_Init+0x60>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	4b03      	ldr	r3, [pc, #12]	; (8003e2c <MX_I2C1_Init+0x60>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f042 0201 	orr.w	r2, r2, #1
 8003e26:	601a      	str	r2, [r3, #0]
  /* USER CODE END I2C1_Init 2 */

}
 8003e28:	bf00      	nop
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	2000205c 	.word	0x2000205c
 8003e30:	40005400 	.word	0x40005400
 8003e34:	000186a0 	.word	0x000186a0

08003e38 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003e3c:	4b1b      	ldr	r3, [pc, #108]	; (8003eac <MX_SPI1_Init+0x74>)
 8003e3e:	4a1c      	ldr	r2, [pc, #112]	; (8003eb0 <MX_SPI1_Init+0x78>)
 8003e40:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003e42:	4b1a      	ldr	r3, [pc, #104]	; (8003eac <MX_SPI1_Init+0x74>)
 8003e44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003e48:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003e4a:	4b18      	ldr	r3, [pc, #96]	; (8003eac <MX_SPI1_Init+0x74>)
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003e50:	4b16      	ldr	r3, [pc, #88]	; (8003eac <MX_SPI1_Init+0x74>)
 8003e52:	2200      	movs	r2, #0
 8003e54:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003e56:	4b15      	ldr	r3, [pc, #84]	; (8003eac <MX_SPI1_Init+0x74>)
 8003e58:	2202      	movs	r2, #2
 8003e5a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003e5c:	4b13      	ldr	r3, [pc, #76]	; (8003eac <MX_SPI1_Init+0x74>)
 8003e5e:	2201      	movs	r2, #1
 8003e60:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003e62:	4b12      	ldr	r3, [pc, #72]	; (8003eac <MX_SPI1_Init+0x74>)
 8003e64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e68:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e6a:	4b10      	ldr	r3, [pc, #64]	; (8003eac <MX_SPI1_Init+0x74>)
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003e70:	4b0e      	ldr	r3, [pc, #56]	; (8003eac <MX_SPI1_Init+0x74>)
 8003e72:	2200      	movs	r2, #0
 8003e74:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003e76:	4b0d      	ldr	r3, [pc, #52]	; (8003eac <MX_SPI1_Init+0x74>)
 8003e78:	2200      	movs	r2, #0
 8003e7a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e7c:	4b0b      	ldr	r3, [pc, #44]	; (8003eac <MX_SPI1_Init+0x74>)
 8003e7e:	2200      	movs	r2, #0
 8003e80:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003e82:	4b0a      	ldr	r3, [pc, #40]	; (8003eac <MX_SPI1_Init+0x74>)
 8003e84:	220a      	movs	r2, #10
 8003e86:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003e88:	4808      	ldr	r0, [pc, #32]	; (8003eac <MX_SPI1_Init+0x74>)
 8003e8a:	f003 fb81 	bl	8007590 <HAL_SPI_Init>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d001      	beq.n	8003e98 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003e94:	f000 fa14 	bl	80042c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  __HAL_SPI_ENABLE(&hspi1);
 8003e98:	4b04      	ldr	r3, [pc, #16]	; (8003eac <MX_SPI1_Init+0x74>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	4b03      	ldr	r3, [pc, #12]	; (8003eac <MX_SPI1_Init+0x74>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ea6:	601a      	str	r2, [r3, #0]
  /* USER CODE END SPI1_Init 2 */

}
 8003ea8:	bf00      	nop
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	200020b0 	.word	0x200020b0
 8003eb0:	40013000 	.word	0x40013000

08003eb4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b092      	sub	sp, #72	; 0x48
 8003eb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003eba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	601a      	str	r2, [r3, #0]
 8003ec2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003ec4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ec8:	2200      	movs	r2, #0
 8003eca:	601a      	str	r2, [r3, #0]
 8003ecc:	605a      	str	r2, [r3, #4]
 8003ece:	609a      	str	r2, [r3, #8]
 8003ed0:	60da      	str	r2, [r3, #12]
 8003ed2:	611a      	str	r2, [r3, #16]
 8003ed4:	615a      	str	r2, [r3, #20]
 8003ed6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003ed8:	1d3b      	adds	r3, r7, #4
 8003eda:	2220      	movs	r2, #32
 8003edc:	2100      	movs	r1, #0
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f005 fadc 	bl	800949c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003ee4:	4b32      	ldr	r3, [pc, #200]	; (8003fb0 <MX_TIM1_Init+0xfc>)
 8003ee6:	4a33      	ldr	r2, [pc, #204]	; (8003fb4 <MX_TIM1_Init+0x100>)
 8003ee8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003eea:	4b31      	ldr	r3, [pc, #196]	; (8003fb0 <MX_TIM1_Init+0xfc>)
 8003eec:	2200      	movs	r2, #0
 8003eee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ef0:	4b2f      	ldr	r3, [pc, #188]	; (8003fb0 <MX_TIM1_Init+0xfc>)
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003ef6:	4b2e      	ldr	r3, [pc, #184]	; (8003fb0 <MX_TIM1_Init+0xfc>)
 8003ef8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003efc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003efe:	4b2c      	ldr	r3, [pc, #176]	; (8003fb0 <MX_TIM1_Init+0xfc>)
 8003f00:	2200      	movs	r2, #0
 8003f02:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003f04:	4b2a      	ldr	r3, [pc, #168]	; (8003fb0 <MX_TIM1_Init+0xfc>)
 8003f06:	2200      	movs	r2, #0
 8003f08:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f0a:	4b29      	ldr	r3, [pc, #164]	; (8003fb0 <MX_TIM1_Init+0xfc>)
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003f10:	4827      	ldr	r0, [pc, #156]	; (8003fb0 <MX_TIM1_Init+0xfc>)
 8003f12:	f003 fc0e 	bl	8007732 <HAL_TIM_PWM_Init>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d001      	beq.n	8003f20 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8003f1c:	f000 f9d0 	bl	80042c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f20:	2300      	movs	r3, #0
 8003f22:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f24:	2300      	movs	r3, #0
 8003f26:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003f28:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	4820      	ldr	r0, [pc, #128]	; (8003fb0 <MX_TIM1_Init+0xfc>)
 8003f30:	f004 f8be 	bl	80080b0 <HAL_TIMEx_MasterConfigSynchronization>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d001      	beq.n	8003f3e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8003f3a:	f000 f9c1 	bl	80042c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003f3e:	2360      	movs	r3, #96	; 0x60
 8003f40:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 65535;
 8003f42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f46:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003f50:	2300      	movs	r3, #0
 8003f52:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003f54:	2300      	movs	r3, #0
 8003f56:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003f58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f5c:	220c      	movs	r2, #12
 8003f5e:	4619      	mov	r1, r3
 8003f60:	4813      	ldr	r0, [pc, #76]	; (8003fb0 <MX_TIM1_Init+0xfc>)
 8003f62:	f003 fd6d 	bl	8007a40 <HAL_TIM_PWM_ConfigChannel>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d001      	beq.n	8003f70 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8003f6c:	f000 f9a8 	bl	80042c0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003f70:	2300      	movs	r3, #0
 8003f72:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003f74:	2300      	movs	r3, #0
 8003f76:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003f80:	2300      	movs	r3, #0
 8003f82:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003f84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f88:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003f8e:	1d3b      	adds	r3, r7, #4
 8003f90:	4619      	mov	r1, r3
 8003f92:	4807      	ldr	r0, [pc, #28]	; (8003fb0 <MX_TIM1_Init+0xfc>)
 8003f94:	f004 f908 	bl	80081a8 <HAL_TIMEx_ConfigBreakDeadTime>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d001      	beq.n	8003fa2 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8003f9e:	f000 f98f 	bl	80042c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003fa2:	4803      	ldr	r0, [pc, #12]	; (8003fb0 <MX_TIM1_Init+0xfc>)
 8003fa4:	f000 fcec 	bl	8004980 <HAL_TIM_MspPostInit>

}
 8003fa8:	bf00      	nop
 8003faa:	3748      	adds	r7, #72	; 0x48
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	20002108 	.word	0x20002108
 8003fb4:	40010000 	.word	0x40010000

08003fb8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003fbc:	4b15      	ldr	r3, [pc, #84]	; (8004014 <MX_USART1_UART_Init+0x5c>)
 8003fbe:	4a16      	ldr	r2, [pc, #88]	; (8004018 <MX_USART1_UART_Init+0x60>)
 8003fc0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003fc2:	4b14      	ldr	r3, [pc, #80]	; (8004014 <MX_USART1_UART_Init+0x5c>)
 8003fc4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003fc8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003fca:	4b12      	ldr	r3, [pc, #72]	; (8004014 <MX_USART1_UART_Init+0x5c>)
 8003fcc:	2200      	movs	r2, #0
 8003fce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003fd0:	4b10      	ldr	r3, [pc, #64]	; (8004014 <MX_USART1_UART_Init+0x5c>)
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003fd6:	4b0f      	ldr	r3, [pc, #60]	; (8004014 <MX_USART1_UART_Init+0x5c>)
 8003fd8:	2200      	movs	r2, #0
 8003fda:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003fdc:	4b0d      	ldr	r3, [pc, #52]	; (8004014 <MX_USART1_UART_Init+0x5c>)
 8003fde:	220c      	movs	r2, #12
 8003fe0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003fe2:	4b0c      	ldr	r3, [pc, #48]	; (8004014 <MX_USART1_UART_Init+0x5c>)
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003fe8:	4b0a      	ldr	r3, [pc, #40]	; (8004014 <MX_USART1_UART_Init+0x5c>)
 8003fea:	2200      	movs	r2, #0
 8003fec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003fee:	4809      	ldr	r0, [pc, #36]	; (8004014 <MX_USART1_UART_Init+0x5c>)
 8003ff0:	f004 f92c 	bl	800824c <HAL_UART_Init>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d001      	beq.n	8003ffe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003ffa:	f000 f961 	bl	80042c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE); //turn on rx interrupt forever
 8003ffe:	4b05      	ldr	r3, [pc, #20]	; (8004014 <MX_USART1_UART_Init+0x5c>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	68da      	ldr	r2, [r3, #12]
 8004004:	4b03      	ldr	r3, [pc, #12]	; (8004014 <MX_USART1_UART_Init+0x5c>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f042 0220 	orr.w	r2, r2, #32
 800400c:	60da      	str	r2, [r3, #12]
  /* USER CODE END USART1_Init 2 */

}
 800400e:	bf00      	nop
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	20002150 	.word	0x20002150
 8004018:	40011000 	.word	0x40011000

0800401c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004020:	4b15      	ldr	r3, [pc, #84]	; (8004078 <MX_USART2_UART_Init+0x5c>)
 8004022:	4a16      	ldr	r2, [pc, #88]	; (800407c <MX_USART2_UART_Init+0x60>)
 8004024:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004026:	4b14      	ldr	r3, [pc, #80]	; (8004078 <MX_USART2_UART_Init+0x5c>)
 8004028:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800402c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800402e:	4b12      	ldr	r3, [pc, #72]	; (8004078 <MX_USART2_UART_Init+0x5c>)
 8004030:	2200      	movs	r2, #0
 8004032:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004034:	4b10      	ldr	r3, [pc, #64]	; (8004078 <MX_USART2_UART_Init+0x5c>)
 8004036:	2200      	movs	r2, #0
 8004038:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800403a:	4b0f      	ldr	r3, [pc, #60]	; (8004078 <MX_USART2_UART_Init+0x5c>)
 800403c:	2200      	movs	r2, #0
 800403e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004040:	4b0d      	ldr	r3, [pc, #52]	; (8004078 <MX_USART2_UART_Init+0x5c>)
 8004042:	220c      	movs	r2, #12
 8004044:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004046:	4b0c      	ldr	r3, [pc, #48]	; (8004078 <MX_USART2_UART_Init+0x5c>)
 8004048:	2200      	movs	r2, #0
 800404a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800404c:	4b0a      	ldr	r3, [pc, #40]	; (8004078 <MX_USART2_UART_Init+0x5c>)
 800404e:	2200      	movs	r2, #0
 8004050:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004052:	4809      	ldr	r0, [pc, #36]	; (8004078 <MX_USART2_UART_Init+0x5c>)
 8004054:	f004 f8fa 	bl	800824c <HAL_UART_Init>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d001      	beq.n	8004062 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800405e:	f000 f92f 	bl	80042c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE); //turn on rx interrupt forever
 8004062:	4b05      	ldr	r3, [pc, #20]	; (8004078 <MX_USART2_UART_Init+0x5c>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	68da      	ldr	r2, [r3, #12]
 8004068:	4b03      	ldr	r3, [pc, #12]	; (8004078 <MX_USART2_UART_Init+0x5c>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f042 0220 	orr.w	r2, r2, #32
 8004070:	60da      	str	r2, [r3, #12]
  /* USER CODE END USART2_Init 2 */

}
 8004072:	bf00      	nop
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	20002194 	.word	0x20002194
 800407c:	40004400 	.word	0x40004400

08004080 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b08a      	sub	sp, #40	; 0x28
 8004084:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004086:	f107 0314 	add.w	r3, r7, #20
 800408a:	2200      	movs	r2, #0
 800408c:	601a      	str	r2, [r3, #0]
 800408e:	605a      	str	r2, [r3, #4]
 8004090:	609a      	str	r2, [r3, #8]
 8004092:	60da      	str	r2, [r3, #12]
 8004094:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004096:	2300      	movs	r3, #0
 8004098:	613b      	str	r3, [r7, #16]
 800409a:	4b49      	ldr	r3, [pc, #292]	; (80041c0 <MX_GPIO_Init+0x140>)
 800409c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409e:	4a48      	ldr	r2, [pc, #288]	; (80041c0 <MX_GPIO_Init+0x140>)
 80040a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040a4:	6313      	str	r3, [r2, #48]	; 0x30
 80040a6:	4b46      	ldr	r3, [pc, #280]	; (80041c0 <MX_GPIO_Init+0x140>)
 80040a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ae:	613b      	str	r3, [r7, #16]
 80040b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80040b2:	2300      	movs	r3, #0
 80040b4:	60fb      	str	r3, [r7, #12]
 80040b6:	4b42      	ldr	r3, [pc, #264]	; (80041c0 <MX_GPIO_Init+0x140>)
 80040b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ba:	4a41      	ldr	r2, [pc, #260]	; (80041c0 <MX_GPIO_Init+0x140>)
 80040bc:	f043 0301 	orr.w	r3, r3, #1
 80040c0:	6313      	str	r3, [r2, #48]	; 0x30
 80040c2:	4b3f      	ldr	r3, [pc, #252]	; (80041c0 <MX_GPIO_Init+0x140>)
 80040c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c6:	f003 0301 	and.w	r3, r3, #1
 80040ca:	60fb      	str	r3, [r7, #12]
 80040cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80040ce:	2300      	movs	r3, #0
 80040d0:	60bb      	str	r3, [r7, #8]
 80040d2:	4b3b      	ldr	r3, [pc, #236]	; (80041c0 <MX_GPIO_Init+0x140>)
 80040d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d6:	4a3a      	ldr	r2, [pc, #232]	; (80041c0 <MX_GPIO_Init+0x140>)
 80040d8:	f043 0310 	orr.w	r3, r3, #16
 80040dc:	6313      	str	r3, [r2, #48]	; 0x30
 80040de:	4b38      	ldr	r3, [pc, #224]	; (80041c0 <MX_GPIO_Init+0x140>)
 80040e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e2:	f003 0310 	and.w	r3, r3, #16
 80040e6:	60bb      	str	r3, [r7, #8]
 80040e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80040ea:	2300      	movs	r3, #0
 80040ec:	607b      	str	r3, [r7, #4]
 80040ee:	4b34      	ldr	r3, [pc, #208]	; (80041c0 <MX_GPIO_Init+0x140>)
 80040f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f2:	4a33      	ldr	r2, [pc, #204]	; (80041c0 <MX_GPIO_Init+0x140>)
 80040f4:	f043 0302 	orr.w	r3, r3, #2
 80040f8:	6313      	str	r3, [r2, #48]	; 0x30
 80040fa:	4b31      	ldr	r3, [pc, #196]	; (80041c0 <MX_GPIO_Init+0x140>)
 80040fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fe:	f003 0302 	and.w	r3, r3, #2
 8004102:	607b      	str	r3, [r7, #4]
 8004104:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004106:	2300      	movs	r3, #0
 8004108:	603b      	str	r3, [r7, #0]
 800410a:	4b2d      	ldr	r3, [pc, #180]	; (80041c0 <MX_GPIO_Init+0x140>)
 800410c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800410e:	4a2c      	ldr	r2, [pc, #176]	; (80041c0 <MX_GPIO_Init+0x140>)
 8004110:	f043 0308 	orr.w	r3, r3, #8
 8004114:	6313      	str	r3, [r2, #48]	; 0x30
 8004116:	4b2a      	ldr	r3, [pc, #168]	; (80041c0 <MX_GPIO_Init+0x140>)
 8004118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800411a:	f003 0308 	and.w	r3, r3, #8
 800411e:	603b      	str	r3, [r7, #0]
 8004120:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LCD_RES_Pin, GPIO_PIN_RESET);
 8004122:	2200      	movs	r2, #0
 8004124:	f241 0110 	movw	r1, #4112	; 0x1010
 8004128:	4826      	ldr	r0, [pc, #152]	; (80041c4 <MX_GPIO_Init+0x144>)
 800412a:	f001 fc29 	bl	8005980 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_5, GPIO_PIN_RESET);
 800412e:	2200      	movs	r2, #0
 8004130:	2128      	movs	r1, #40	; 0x28
 8004132:	4825      	ldr	r0, [pc, #148]	; (80041c8 <MX_GPIO_Init+0x148>)
 8004134:	f001 fc24 	bl	8005980 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004138:	2310      	movs	r3, #16
 800413a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800413c:	2301      	movs	r3, #1
 800413e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004140:	2300      	movs	r3, #0
 8004142:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004144:	2300      	movs	r3, #0
 8004146:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004148:	f107 0314 	add.w	r3, r7, #20
 800414c:	4619      	mov	r1, r3
 800414e:	481d      	ldr	r0, [pc, #116]	; (80041c4 <MX_GPIO_Init+0x144>)
 8004150:	f001 fa7a 	bl	8005648 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RES_Pin */
  GPIO_InitStruct.Pin = LCD_RES_Pin;
 8004154:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004158:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800415a:	2301      	movs	r3, #1
 800415c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800415e:	2301      	movs	r3, #1
 8004160:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004162:	2303      	movs	r3, #3
 8004164:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_RES_GPIO_Port, &GPIO_InitStruct);
 8004166:	f107 0314 	add.w	r3, r7, #20
 800416a:	4619      	mov	r1, r3
 800416c:	4815      	ldr	r0, [pc, #84]	; (80041c4 <MX_GPIO_Init+0x144>)
 800416e:	f001 fa6b 	bl	8005648 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8004172:	2328      	movs	r3, #40	; 0x28
 8004174:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004176:	2301      	movs	r3, #1
 8004178:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800417a:	2300      	movs	r3, #0
 800417c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800417e:	2300      	movs	r3, #0
 8004180:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004182:	f107 0314 	add.w	r3, r7, #20
 8004186:	4619      	mov	r1, r3
 8004188:	480f      	ldr	r0, [pc, #60]	; (80041c8 <MX_GPIO_Init+0x148>)
 800418a:	f001 fa5d 	bl	8005648 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800418e:	2310      	movs	r3, #16
 8004190:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004192:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004196:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004198:	2301      	movs	r3, #1
 800419a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800419c:	f107 0314 	add.w	r3, r7, #20
 80041a0:	4619      	mov	r1, r3
 80041a2:	4809      	ldr	r0, [pc, #36]	; (80041c8 <MX_GPIO_Init+0x148>)
 80041a4:	f001 fa50 	bl	8005648 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80041a8:	2200      	movs	r2, #0
 80041aa:	2100      	movs	r1, #0
 80041ac:	200a      	movs	r0, #10
 80041ae:	f001 f982 	bl	80054b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80041b2:	200a      	movs	r0, #10
 80041b4:	f001 f99b 	bl	80054ee <HAL_NVIC_EnableIRQ>

}
 80041b8:	bf00      	nop
 80041ba:	3728      	adds	r7, #40	; 0x28
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	40023800 	.word	0x40023800
 80041c4:	40020000 	.word	0x40020000
 80041c8:	40020400 	.word	0x40020400

080041cc <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b08e      	sub	sp, #56	; 0x38
 80041d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80041d2:	f107 031c 	add.w	r3, r7, #28
 80041d6:	2200      	movs	r2, #0
 80041d8:	601a      	str	r2, [r3, #0]
 80041da:	605a      	str	r2, [r3, #4]
 80041dc:	609a      	str	r2, [r3, #8]
 80041de:	60da      	str	r2, [r3, #12]
 80041e0:	611a      	str	r2, [r3, #16]
 80041e2:	615a      	str	r2, [r3, #20]
 80041e4:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 80041e6:	463b      	mov	r3, r7
 80041e8:	2200      	movs	r2, #0
 80041ea:	601a      	str	r2, [r3, #0]
 80041ec:	605a      	str	r2, [r3, #4]
 80041ee:	609a      	str	r2, [r3, #8]
 80041f0:	60da      	str	r2, [r3, #12]
 80041f2:	611a      	str	r2, [r3, #16]
 80041f4:	615a      	str	r2, [r3, #20]
 80041f6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80041f8:	4b2f      	ldr	r3, [pc, #188]	; (80042b8 <MX_FSMC_Init+0xec>)
 80041fa:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80041fe:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8004200:	4b2d      	ldr	r3, [pc, #180]	; (80042b8 <MX_FSMC_Init+0xec>)
 8004202:	4a2e      	ldr	r2, [pc, #184]	; (80042bc <MX_FSMC_Init+0xf0>)
 8004204:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8004206:	4b2c      	ldr	r3, [pc, #176]	; (80042b8 <MX_FSMC_Init+0xec>)
 8004208:	2200      	movs	r2, #0
 800420a:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 800420c:	4b2a      	ldr	r3, [pc, #168]	; (80042b8 <MX_FSMC_Init+0xec>)
 800420e:	2200      	movs	r2, #0
 8004210:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8004212:	4b29      	ldr	r3, [pc, #164]	; (80042b8 <MX_FSMC_Init+0xec>)
 8004214:	2200      	movs	r2, #0
 8004216:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8004218:	4b27      	ldr	r3, [pc, #156]	; (80042b8 <MX_FSMC_Init+0xec>)
 800421a:	2210      	movs	r2, #16
 800421c:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800421e:	4b26      	ldr	r3, [pc, #152]	; (80042b8 <MX_FSMC_Init+0xec>)
 8004220:	2200      	movs	r2, #0
 8004222:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8004224:	4b24      	ldr	r3, [pc, #144]	; (80042b8 <MX_FSMC_Init+0xec>)
 8004226:	2200      	movs	r2, #0
 8004228:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800422a:	4b23      	ldr	r3, [pc, #140]	; (80042b8 <MX_FSMC_Init+0xec>)
 800422c:	2200      	movs	r2, #0
 800422e:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8004230:	4b21      	ldr	r3, [pc, #132]	; (80042b8 <MX_FSMC_Init+0xec>)
 8004232:	2200      	movs	r2, #0
 8004234:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8004236:	4b20      	ldr	r3, [pc, #128]	; (80042b8 <MX_FSMC_Init+0xec>)
 8004238:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800423c:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800423e:	4b1e      	ldr	r3, [pc, #120]	; (80042b8 <MX_FSMC_Init+0xec>)
 8004240:	2200      	movs	r2, #0
 8004242:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8004244:	4b1c      	ldr	r3, [pc, #112]	; (80042b8 <MX_FSMC_Init+0xec>)
 8004246:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800424a:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800424c:	4b1a      	ldr	r3, [pc, #104]	; (80042b8 <MX_FSMC_Init+0xec>)
 800424e:	2200      	movs	r2, #0
 8004250:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8004252:	4b19      	ldr	r3, [pc, #100]	; (80042b8 <MX_FSMC_Init+0xec>)
 8004254:	2200      	movs	r2, #0
 8004256:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8004258:	4b17      	ldr	r3, [pc, #92]	; (80042b8 <MX_FSMC_Init+0xec>)
 800425a:	2200      	movs	r2, #0
 800425c:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 800425e:	230f      	movs	r3, #15
 8004260:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8004262:	230f      	movs	r3, #15
 8004264:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 40;
 8004266:	2328      	movs	r3, #40	; 0x28
 8004268:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 800426a:	2300      	movs	r3, #0
 800426c:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 800426e:	2310      	movs	r3, #16
 8004270:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8004272:	2311      	movs	r3, #17
 8004274:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8004276:	2300      	movs	r3, #0
 8004278:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 2;
 800427a:	2302      	movs	r3, #2
 800427c:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 800427e:	230f      	movs	r3, #15
 8004280:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 4;
 8004282:	2304      	movs	r3, #4
 8004284:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8004286:	2300      	movs	r3, #0
 8004288:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 800428a:	2310      	movs	r3, #16
 800428c:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 800428e:	2311      	movs	r3, #17
 8004290:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8004292:	2300      	movs	r3, #0
 8004294:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8004296:	463a      	mov	r2, r7
 8004298:	f107 031c 	add.w	r3, r7, #28
 800429c:	4619      	mov	r1, r3
 800429e:	4806      	ldr	r0, [pc, #24]	; (80042b8 <MX_FSMC_Init+0xec>)
 80042a0:	f003 f9ff 	bl	80076a2 <HAL_SRAM_Init>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d001      	beq.n	80042ae <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 80042aa:	f000 f809 	bl	80042c0 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80042ae:	bf00      	nop
 80042b0:	3738      	adds	r7, #56	; 0x38
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	200021d8 	.word	0x200021d8
 80042bc:	a0000104 	.word	0xa0000104

080042c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80042c0:	b480      	push	{r7}
 80042c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80042c4:	b672      	cpsid	i
}
 80042c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80042c8:	e7fe      	b.n	80042c8 <Error_Handler+0x8>
	...

080042cc <drawObjectToLcd>:

void drawCharToLcd5x7(int x, int y, int pixelScaling, uint16_t textColor, int useBackground, uint16_t bgColor, char c);
void drawStringToLcd5x7(int x, int y, int pixelScaling, uint16_t textColor, int useBackground, uint16_t bgColor, int hSpacing, int vSpacing, char *string);


int drawObjectToLcd(struct object o, uint8_t *data, int state){
 80042cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80042d0:	b09f      	sub	sp, #124	; 0x7c
 80042d2:	af06      	add	r7, sp, #24
 80042d4:	463e      	mov	r6, r7
 80042d6:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
	char objName[30];
	objectTypeToString(o.objectType, objName);
 80042da:	783b      	ldrb	r3, [r7, #0]
 80042dc:	f107 0214 	add.w	r2, r7, #20
 80042e0:	4611      	mov	r1, r2
 80042e2:	4618      	mov	r0, r3
 80042e4:	f7ff f8aa 	bl	800343c <objectTypeToString>
		printf("[OV] Error: width or height of object id %d is negative.\n\r", o.objectId);
		return 1;
	}
	*/

	printf("[OV] Drawing %s id %d \n\r", objName, o.objectId);
 80042e8:	887b      	ldrh	r3, [r7, #2]
 80042ea:	461a      	mov	r2, r3
 80042ec:	f107 0314 	add.w	r3, r7, #20
 80042f0:	4619      	mov	r1, r3
 80042f2:	48a2      	ldr	r0, [pc, #648]	; (800457c <drawObjectToLcd+0x2b0>)
 80042f4:	f005 f8da 	bl	80094ac <iprintf>

	if(o.objectType == rectangle){
 80042f8:	783b      	ldrb	r3, [r7, #0]
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d122      	bne.n	8004344 <drawObjectToLcd+0x78>
		uint16_t color = BLACK;
 80042fe:	2300      	movs	r3, #0
 8004300:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
		if(o.dataLen<2){
 8004304:	89bb      	ldrh	r3, [r7, #12]
 8004306:	2b01      	cmp	r3, #1
 8004308:	d805      	bhi.n	8004316 <drawObjectToLcd+0x4a>
			printf("[OV] Warning: missing color byte in object id %d! Falling back on black. \n\r", o.objectId);
 800430a:	887b      	ldrh	r3, [r7, #2]
 800430c:	4619      	mov	r1, r3
 800430e:	489c      	ldr	r0, [pc, #624]	; (8004580 <drawObjectToLcd+0x2b4>)
 8004310:	f005 f8cc 	bl	80094ac <iprintf>
 8004314:	e004      	b.n	8004320 <drawObjectToLcd+0x54>
		}
		else{
			color = *((uint16_t *) data);
 8004316:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800431a:	881b      	ldrh	r3, [r3, #0]
 800431c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
		}
		LCD_fillRect(o.xstart, o.ystart, (o.xend - o.xstart), (o.yend - o.ystart), color);
 8004320:	88b8      	ldrh	r0, [r7, #4]
 8004322:	88f9      	ldrh	r1, [r7, #6]
 8004324:	893a      	ldrh	r2, [r7, #8]
 8004326:	88bb      	ldrh	r3, [r7, #4]
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	b29c      	uxth	r4, r3
 800432c:	897a      	ldrh	r2, [r7, #10]
 800432e:	88fb      	ldrh	r3, [r7, #6]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	b29a      	uxth	r2, r3
 8004334:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004338:	9300      	str	r3, [sp, #0]
 800433a:	4613      	mov	r3, r2
 800433c:	4622      	mov	r2, r4
 800433e:	f7fc fc3d 	bl	8000bbc <LCD_fillRect>
 8004342:	e115      	b.n	8004570 <drawObjectToLcd+0x2a4>
	}
	else if(o.objectType == picture){ //TODO fix data expectations
 8004344:	783b      	ldrb	r3, [r7, #0]
 8004346:	2b04      	cmp	r3, #4
 8004348:	d156      	bne.n	80043f8 <drawObjectToLcd+0x12c>
		uint16_t xpos = o.xstart;
 800434a:	88bb      	ldrh	r3, [r7, #4]
 800434c:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
		uint16_t ypos = o.ystart;
 8004350:	88fb      	ldrh	r3, [r7, #6]
 8004352:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
		if(o.dataLen < (o.xend - o.xstart)*(o.yend - o.ystart)){
 8004356:	89bb      	ldrh	r3, [r7, #12]
 8004358:	4619      	mov	r1, r3
 800435a:	893b      	ldrh	r3, [r7, #8]
 800435c:	461a      	mov	r2, r3
 800435e:	88bb      	ldrh	r3, [r7, #4]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	897a      	ldrh	r2, [r7, #10]
 8004364:	4610      	mov	r0, r2
 8004366:	88fa      	ldrh	r2, [r7, #6]
 8004368:	1a82      	subs	r2, r0, r2
 800436a:	fb02 f303 	mul.w	r3, r2, r3
 800436e:	4299      	cmp	r1, r3
 8004370:	da11      	bge.n	8004396 <drawObjectToLcd+0xca>
			printf("[OV] Error: %d pixel bytes needed for bitmap id %d but only got %d. \n\r", (o.xend - o.xstart)*(o.yend - o.ystart), o.objectId, o.dataLen);
 8004372:	893b      	ldrh	r3, [r7, #8]
 8004374:	461a      	mov	r2, r3
 8004376:	88bb      	ldrh	r3, [r7, #4]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	897a      	ldrh	r2, [r7, #10]
 800437c:	4611      	mov	r1, r2
 800437e:	88fa      	ldrh	r2, [r7, #6]
 8004380:	1a8a      	subs	r2, r1, r2
 8004382:	fb02 f103 	mul.w	r1, r2, r3
 8004386:	887b      	ldrh	r3, [r7, #2]
 8004388:	461a      	mov	r2, r3
 800438a:	89bb      	ldrh	r3, [r7, #12]
 800438c:	487d      	ldr	r0, [pc, #500]	; (8004584 <drawObjectToLcd+0x2b8>)
 800438e:	f005 f88d 	bl	80094ac <iprintf>
			return 2;
 8004392:	2302      	movs	r3, #2
 8004394:	e0ed      	b.n	8004572 <drawObjectToLcd+0x2a6>
		}
		uint16_t *colorArray = (uint16_t *) data;
 8004396:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800439a:	637b      	str	r3, [r7, #52]	; 0x34
		uint32_t dataIndex = 0;
 800439c:	2300      	movs	r3, #0
 800439e:	657b      	str	r3, [r7, #84]	; 0x54
		while(1){
			uint16_t color = *(colorArray + dataIndex);
 80043a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043a2:	005b      	lsls	r3, r3, #1
 80043a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043a6:	4413      	add	r3, r2
 80043a8:	881b      	ldrh	r3, [r3, #0]
 80043aa:	867b      	strh	r3, [r7, #50]	; 0x32
			dataIndex++;
 80043ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043ae:	3301      	adds	r3, #1
 80043b0:	657b      	str	r3, [r7, #84]	; 0x54
			LCD_fillRect(xpos, ypos, 1, 1, color);
 80043b2:	f8b7 105e 	ldrh.w	r1, [r7, #94]	; 0x5e
 80043b6:	f8b7 005c 	ldrh.w	r0, [r7, #92]	; 0x5c
 80043ba:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80043bc:	9300      	str	r3, [sp, #0]
 80043be:	2301      	movs	r3, #1
 80043c0:	2201      	movs	r2, #1
 80043c2:	f7fc fbfb 	bl	8000bbc <LCD_fillRect>
			xpos++;
 80043c6:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80043ca:	3301      	adds	r3, #1
 80043cc:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
			if(xpos>o.xend){
 80043d0:	893b      	ldrh	r3, [r7, #8]
 80043d2:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d9e2      	bls.n	80043a0 <drawObjectToLcd+0xd4>
				xpos = o.xstart;
 80043da:	88bb      	ldrh	r3, [r7, #4]
 80043dc:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
				ypos++;
 80043e0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80043e4:	3301      	adds	r3, #1
 80043e6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
				if(ypos>o.yend){
 80043ea:	897b      	ldrh	r3, [r7, #10]
 80043ec:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 80043f0:	429a      	cmp	r2, r3
 80043f2:	f200 80bc 	bhi.w	800456e <drawObjectToLcd+0x2a2>
		while(1){
 80043f6:	e7d3      	b.n	80043a0 <drawObjectToLcd+0xd4>
					break;
				}
			}
		}
	}
	else if(o.objectType==label){
 80043f8:	783b      	ldrb	r3, [r7, #0]
 80043fa:	2b03      	cmp	r3, #3
 80043fc:	f040 80af 	bne.w	800455e <drawObjectToLcd+0x292>
 8004400:	466b      	mov	r3, sp
 8004402:	461e      	mov	r6, r3
		int expectedChars = o.dataLen - 8;
 8004404:	89bb      	ldrh	r3, [r7, #12]
 8004406:	3b08      	subs	r3, #8
 8004408:	64bb      	str	r3, [r7, #72]	; 0x48
		if(expectedChars < 0){
 800440a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800440c:	2b00      	cmp	r3, #0
 800440e:	da07      	bge.n	8004420 <drawObjectToLcd+0x154>
			printf("[OV] Error: Too few data bytes to draw string id %d. \n\r", o.objectId);
 8004410:	887b      	ldrh	r3, [r7, #2]
 8004412:	4619      	mov	r1, r3
 8004414:	485c      	ldr	r0, [pc, #368]	; (8004588 <drawObjectToLcd+0x2bc>)
 8004416:	f005 f849 	bl	80094ac <iprintf>
			return 3;
 800441a:	2303      	movs	r3, #3
 800441c:	46b5      	mov	sp, r6
 800441e:	e0a8      	b.n	8004572 <drawObjectToLcd+0x2a6>
		}
		int dIndex = 0;
 8004420:	2300      	movs	r3, #0
 8004422:	653b      	str	r3, [r7, #80]	; 0x50
		uint8_t pixelScaling = *((uint8_t *) (data + dIndex++));
 8004424:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004426:	1c5a      	adds	r2, r3, #1
 8004428:	653a      	str	r2, [r7, #80]	; 0x50
 800442a:	461a      	mov	r2, r3
 800442c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004430:	4413      	add	r3, r2
 8004432:	781b      	ldrb	r3, [r3, #0]
 8004434:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		uint8_t hSpace = *((uint8_t *) (data + dIndex++));
 8004438:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800443a:	1c5a      	adds	r2, r3, #1
 800443c:	653a      	str	r2, [r7, #80]	; 0x50
 800443e:	461a      	mov	r2, r3
 8004440:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004444:	4413      	add	r3, r2
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
		uint8_t vSpace = *((uint8_t *) (data + dIndex++));
 800444c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800444e:	1c5a      	adds	r2, r3, #1
 8004450:	653a      	str	r2, [r7, #80]	; 0x50
 8004452:	461a      	mov	r2, r3
 8004454:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004458:	4413      	add	r3, r2
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
		uint8_t useBg = *((uint8_t *) (data + dIndex++));
 8004460:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004462:	1c5a      	adds	r2, r3, #1
 8004464:	653a      	str	r2, [r7, #80]	; 0x50
 8004466:	461a      	mov	r2, r3
 8004468:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800446c:	4413      	add	r3, r2
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
		uint16_t textColor = *((uint16_t *) (data + dIndex));
 8004474:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004476:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800447a:	4413      	add	r3, r2
 800447c:	881b      	ldrh	r3, [r3, #0]
 800447e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		dIndex += 2;
 8004482:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004484:	3302      	adds	r3, #2
 8004486:	653b      	str	r3, [r7, #80]	; 0x50
		uint16_t bgColor = *((uint16_t *) (data + dIndex));
 8004488:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800448a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800448e:	4413      	add	r3, r2
 8004490:	881b      	ldrh	r3, [r3, #0]
 8004492:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
		dIndex += 2;
 8004496:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004498:	3302      	adds	r3, #2
 800449a:	653b      	str	r3, [r7, #80]	; 0x50

		char labelString[expectedChars + 1];
 800449c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800449e:	1c59      	adds	r1, r3, #1
 80044a0:	1e4b      	subs	r3, r1, #1
 80044a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044a4:	460a      	mov	r2, r1
 80044a6:	2300      	movs	r3, #0
 80044a8:	4690      	mov	r8, r2
 80044aa:	4699      	mov	r9, r3
 80044ac:	f04f 0200 	mov.w	r2, #0
 80044b0:	f04f 0300 	mov.w	r3, #0
 80044b4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044b8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044bc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044c0:	460a      	mov	r2, r1
 80044c2:	2300      	movs	r3, #0
 80044c4:	4614      	mov	r4, r2
 80044c6:	461d      	mov	r5, r3
 80044c8:	f04f 0200 	mov.w	r2, #0
 80044cc:	f04f 0300 	mov.w	r3, #0
 80044d0:	00eb      	lsls	r3, r5, #3
 80044d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044d6:	00e2      	lsls	r2, r4, #3
 80044d8:	460b      	mov	r3, r1
 80044da:	3307      	adds	r3, #7
 80044dc:	08db      	lsrs	r3, r3, #3
 80044de:	00db      	lsls	r3, r3, #3
 80044e0:	ebad 0d03 	sub.w	sp, sp, r3
 80044e4:	ab06      	add	r3, sp, #24
 80044e6:	3300      	adds	r3, #0
 80044e8:	63bb      	str	r3, [r7, #56]	; 0x38
		int i;
		for(i = 0; i<expectedChars;i++){
 80044ea:	2300      	movs	r3, #0
 80044ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044ee:	e00f      	b.n	8004510 <drawObjectToLcd+0x244>
			labelString[i] = *((uint8_t *) (data + dIndex++));
 80044f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044f2:	1c5a      	adds	r2, r3, #1
 80044f4:	653a      	str	r2, [r7, #80]	; 0x50
 80044f6:	461a      	mov	r2, r3
 80044f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80044fc:	4413      	add	r3, r2
 80044fe:	7819      	ldrb	r1, [r3, #0]
 8004500:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004502:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004504:	4413      	add	r3, r2
 8004506:	460a      	mov	r2, r1
 8004508:	701a      	strb	r2, [r3, #0]
		for(i = 0; i<expectedChars;i++){
 800450a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800450c:	3301      	adds	r3, #1
 800450e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004510:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004512:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004514:	429a      	cmp	r2, r3
 8004516:	dbeb      	blt.n	80044f0 <drawObjectToLcd+0x224>
		}
		labelString[expectedChars] = 0;
 8004518:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800451a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800451c:	4413      	add	r3, r2
 800451e:	2200      	movs	r2, #0
 8004520:	701a      	strb	r2, [r3, #0]
		drawStringToLcd5x7(o.xstart, o.ystart, pixelScaling, textColor, useBg, bgColor, hSpace, vSpace, labelString);
 8004522:	88bb      	ldrh	r3, [r7, #4]
 8004524:	469c      	mov	ip, r3
 8004526:	88fb      	ldrh	r3, [r7, #6]
 8004528:	469e      	mov	lr, r3
 800452a:	f897 4047 	ldrb.w	r4, [r7, #71]	; 0x47
 800452e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8004532:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8004536:	f897 1045 	ldrb.w	r1, [r7, #69]	; 0x45
 800453a:	f8b7 5042 	ldrh.w	r5, [r7, #66]	; 0x42
 800453e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004540:	9004      	str	r0, [sp, #16]
 8004542:	9103      	str	r1, [sp, #12]
 8004544:	9202      	str	r2, [sp, #8]
 8004546:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800454a:	9201      	str	r2, [sp, #4]
 800454c:	9300      	str	r3, [sp, #0]
 800454e:	462b      	mov	r3, r5
 8004550:	4622      	mov	r2, r4
 8004552:	4671      	mov	r1, lr
 8004554:	4660      	mov	r0, ip
 8004556:	f000 f81b 	bl	8004590 <drawStringToLcd5x7>
 800455a:	46b5      	mov	sp, r6
 800455c:	e008      	b.n	8004570 <drawObjectToLcd+0x2a4>
	}
	else{
		printf("[OV] Error: drawObjectToLcd() not implemented for object type [%s]. \n\r", objName);
 800455e:	f107 0314 	add.w	r3, r7, #20
 8004562:	4619      	mov	r1, r3
 8004564:	4809      	ldr	r0, [pc, #36]	; (800458c <drawObjectToLcd+0x2c0>)
 8004566:	f004 ffa1 	bl	80094ac <iprintf>
		return 100;
 800456a:	2364      	movs	r3, #100	; 0x64
 800456c:	e001      	b.n	8004572 <drawObjectToLcd+0x2a6>
					break;
 800456e:	bf00      	nop
	}
	return 0;
 8004570:	2300      	movs	r3, #0
}
 8004572:	4618      	mov	r0, r3
 8004574:	3764      	adds	r7, #100	; 0x64
 8004576:	46bd      	mov	sp, r7
 8004578:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800457c:	0800ae24 	.word	0x0800ae24
 8004580:	0800ae40 	.word	0x0800ae40
 8004584:	0800ae8c 	.word	0x0800ae8c
 8004588:	0800aed4 	.word	0x0800aed4
 800458c:	0800af0c 	.word	0x0800af0c

08004590 <drawStringToLcd5x7>:
 * (example - if pixelscaling == 5, a single char will occupy 25x35 pixels on the LCD). If useBackground is 1, then
 * background of chars will be filled with bgColor, otherwise, it will be left as-is.
 * hSpacing and vSpacing define the horizontal and vertical separation of chars in lcd pixels (independent of pixelScaling).
 * Newlines in string are treated as newline + cariiage return.
 */
void drawStringToLcd5x7(int x, int y, int pixelScaling, uint16_t textColor, int useBackground, uint16_t bgColor, int hSpacing, int vSpacing, char *string){
 8004590:	b580      	push	{r7, lr}
 8004592:	b08c      	sub	sp, #48	; 0x30
 8004594:	af04      	add	r7, sp, #16
 8004596:	60f8      	str	r0, [r7, #12]
 8004598:	60b9      	str	r1, [r7, #8]
 800459a:	607a      	str	r2, [r7, #4]
 800459c:	807b      	strh	r3, [r7, #2]

	uint16_t charX = x;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	83fb      	strh	r3, [r7, #30]
	uint16_t charY = y;
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	83bb      	strh	r3, [r7, #28]

	int strIndex = 0;
 80045a6:	2300      	movs	r3, #0
 80045a8:	61bb      	str	r3, [r7, #24]
	while(1){
		char c = *(string + strIndex++);
 80045aa:	69bb      	ldr	r3, [r7, #24]
 80045ac:	1c5a      	adds	r2, r3, #1
 80045ae:	61ba      	str	r2, [r7, #24]
 80045b0:	461a      	mov	r2, r3
 80045b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045b4:	4413      	add	r3, r2
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	75fb      	strb	r3, [r7, #23]
		if(c==0){
 80045ba:	7dfb      	ldrb	r3, [r7, #23]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d03d      	beq.n	800463c <drawStringToLcd5x7+0xac>
			break;
		}
		else if(c=='\r'){ //probably not needed, but just in case
 80045c0:	7dfb      	ldrb	r3, [r7, #23]
 80045c2:	2b0d      	cmp	r3, #13
 80045c4:	d102      	bne.n	80045cc <drawStringToLcd5x7+0x3c>
			charX = x;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	83fb      	strh	r3, [r7, #30]
 80045ca:	e7ee      	b.n	80045aa <drawStringToLcd5x7+0x1a>
		}
		else if(c == '\n'){
 80045cc:	7dfb      	ldrb	r3, [r7, #23]
 80045ce:	2b0a      	cmp	r3, #10
 80045d0:	d10f      	bne.n	80045f2 <drawStringToLcd5x7+0x62>
			charX = x;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	83fb      	strh	r3, [r7, #30]
			charY += 7*pixelScaling + vSpacing;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	b29b      	uxth	r3, r3
 80045da:	461a      	mov	r2, r3
 80045dc:	00d2      	lsls	r2, r2, #3
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	b29a      	uxth	r2, r3
 80045e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	4413      	add	r3, r2
 80045e8:	b29a      	uxth	r2, r3
 80045ea:	8bbb      	ldrh	r3, [r7, #28]
 80045ec:	4413      	add	r3, r2
 80045ee:	83bb      	strh	r3, [r7, #28]
 80045f0:	e7db      	b.n	80045aa <drawStringToLcd5x7+0x1a>
		}
		else{ //normal character, presumably.
			if(charY > LCD_PIXEL_HEIGHT){
 80045f2:	8bbb      	ldrh	r3, [r7, #28]
 80045f4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80045f8:	d822      	bhi.n	8004640 <drawStringToLcd5x7+0xb0>
				break;
			}
			if(charX > LCD_PIXEL_WIDTH){
 80045fa:	8bfb      	ldrh	r3, [r7, #30]
 80045fc:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8004600:	d81a      	bhi.n	8004638 <drawStringToLcd5x7+0xa8>
				continue; //because there might be a newline later in string
			}
			drawCharToLcd5x7(charX, charY, pixelScaling, textColor, useBackground, bgColor, c);
 8004602:	8bf8      	ldrh	r0, [r7, #30]
 8004604:	8bb9      	ldrh	r1, [r7, #28]
 8004606:	887a      	ldrh	r2, [r7, #2]
 8004608:	7dfb      	ldrb	r3, [r7, #23]
 800460a:	9302      	str	r3, [sp, #8]
 800460c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800460e:	9301      	str	r3, [sp, #4]
 8004610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004612:	9300      	str	r3, [sp, #0]
 8004614:	4613      	mov	r3, r2
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	f000 f818 	bl	800464c <drawCharToLcd5x7>
			charX += 5*pixelScaling + hSpacing;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	b29b      	uxth	r3, r3
 8004620:	461a      	mov	r2, r3
 8004622:	0092      	lsls	r2, r2, #2
 8004624:	4413      	add	r3, r2
 8004626:	b29a      	uxth	r2, r3
 8004628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800462a:	b29b      	uxth	r3, r3
 800462c:	4413      	add	r3, r2
 800462e:	b29a      	uxth	r2, r3
 8004630:	8bfb      	ldrh	r3, [r7, #30]
 8004632:	4413      	add	r3, r2
 8004634:	83fb      	strh	r3, [r7, #30]
 8004636:	e7b8      	b.n	80045aa <drawStringToLcd5x7+0x1a>
				continue; //because there might be a newline later in string
 8004638:	bf00      	nop
	while(1){
 800463a:	e7b6      	b.n	80045aa <drawStringToLcd5x7+0x1a>
			break;
 800463c:	bf00      	nop
 800463e:	e000      	b.n	8004642 <drawStringToLcd5x7+0xb2>
				break;
 8004640:	bf00      	nop
		}
	}

}
 8004642:	bf00      	nop
 8004644:	3720      	adds	r7, #32
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
	...

0800464c <drawCharToLcd5x7>:

void drawCharToLcd5x7(int x, int y, int pixelScaling, uint16_t textColor, int useBackground, uint16_t bgColor, char c){
 800464c:	b590      	push	{r4, r7, lr}
 800464e:	b08f      	sub	sp, #60	; 0x3c
 8004650:	af02      	add	r7, sp, #8
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	60b9      	str	r1, [r7, #8]
 8004656:	607a      	str	r2, [r7, #4]
 8004658:	807b      	strh	r3, [r7, #2]
	int ascii = (int) c;
 800465a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800465e:	61fb      	str	r3, [r7, #28]
	char *charFont = font5x7 + (5*ascii);
 8004660:	69fa      	ldr	r2, [r7, #28]
 8004662:	4613      	mov	r3, r2
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	4413      	add	r3, r2
 8004668:	461a      	mov	r2, r3
 800466a:	4b41      	ldr	r3, [pc, #260]	; (8004770 <drawCharToLcd5x7+0x124>)
 800466c:	4413      	add	r3, r2
 800466e:	61bb      	str	r3, [r7, #24]
	int i;
	//printf("Drawing char %c @ [%d, %d] \n\r", c, x, y);

	//font is stored as columns!
	int column, row;
	for(column = 0; column < 5; column++){
 8004670:	2300      	movs	r3, #0
 8004672:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004674:	e074      	b.n	8004760 <drawCharToLcd5x7+0x114>
		uint8_t columnByte = *(charFont + column);
 8004676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004678:	69ba      	ldr	r2, [r7, #24]
 800467a:	4413      	add	r3, r2
 800467c:	781b      	ldrb	r3, [r3, #0]
 800467e:	75fb      	strb	r3, [r7, #23]
		uint8_t mask = 0x01;
 8004680:	2301      	movs	r3, #1
 8004682:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		for(row = 0; row < 7; row++){
 8004686:	2300      	movs	r3, #0
 8004688:	62bb      	str	r3, [r7, #40]	; 0x28
 800468a:	e063      	b.n	8004754 <drawCharToLcd5x7+0x108>
			uint16_t pixelColor = bgColor;
 800468c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004690:	84bb      	strh	r3, [r7, #36]	; 0x24
			if(columnByte & mask){
 8004692:	7dfa      	ldrb	r2, [r7, #23]
 8004694:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004698:	4013      	ands	r3, r2
 800469a:	b2db      	uxtb	r3, r3
 800469c:	2b00      	cmp	r3, #0
 800469e:	d002      	beq.n	80046a6 <drawCharToLcd5x7+0x5a>
				pixelColor = textColor;
 80046a0:	887b      	ldrh	r3, [r7, #2]
 80046a2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80046a4:	e008      	b.n	80046b8 <drawCharToLcd5x7+0x6c>
			}
			else{
				if(!useBackground){
 80046a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d105      	bne.n	80046b8 <drawCharToLcd5x7+0x6c>
					mask = mask << 1;
 80046ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80046b0:	005b      	lsls	r3, r3, #1
 80046b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					continue;
 80046b6:	e04a      	b.n	800474e <drawCharToLcd5x7+0x102>
				}
			}

			uint16_t pixel_x_1 = x + pixelScaling*column;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	b29a      	uxth	r2, r3
 80046bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046be:	b29b      	uxth	r3, r3
 80046c0:	fb12 f303 	smulbb	r3, r2, r3
 80046c4:	b29a      	uxth	r2, r3
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	4413      	add	r3, r2
 80046cc:	82bb      	strh	r3, [r7, #20]
			uint16_t pixel_y_1 = y + pixelScaling*row;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	b29a      	uxth	r2, r3
 80046d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	fb12 f303 	smulbb	r3, r2, r3
 80046da:	b29a      	uxth	r2, r3
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	b29b      	uxth	r3, r3
 80046e0:	4413      	add	r3, r2
 80046e2:	827b      	strh	r3, [r7, #18]
			uint16_t pixel_x_2 = pixel_x_1 + pixelScaling;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	b29a      	uxth	r2, r3
 80046e8:	8abb      	ldrh	r3, [r7, #20]
 80046ea:	4413      	add	r3, r2
 80046ec:	847b      	strh	r3, [r7, #34]	; 0x22
			uint16_t pixel_y_2 = pixel_y_1 + pixelScaling;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	b29a      	uxth	r2, r3
 80046f2:	8a7b      	ldrh	r3, [r7, #18]
 80046f4:	4413      	add	r3, r2
 80046f6:	843b      	strh	r3, [r7, #32]

			if(pixel_x_1 >= LCD_PIXEL_WIDTH || pixel_y_1 >= LCD_PIXEL_HEIGHT){
 80046f8:	8abb      	ldrh	r3, [r7, #20]
 80046fa:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80046fe:	d22c      	bcs.n	800475a <drawCharToLcd5x7+0x10e>
 8004700:	8a7b      	ldrh	r3, [r7, #18]
 8004702:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004706:	d228      	bcs.n	800475a <drawCharToLcd5x7+0x10e>
				break;
			}

			if(pixel_x_2 >= LCD_PIXEL_WIDTH){
 8004708:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800470a:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800470e:	d302      	bcc.n	8004716 <drawCharToLcd5x7+0xca>
				pixel_x_2 = LCD_PIXEL_WIDTH - 1;
 8004710:	f240 13df 	movw	r3, #479	; 0x1df
 8004714:	847b      	strh	r3, [r7, #34]	; 0x22
			}
			if(pixel_y_2 >= LCD_PIXEL_HEIGHT){
 8004716:	8c3b      	ldrh	r3, [r7, #32]
 8004718:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800471c:	d302      	bcc.n	8004724 <drawCharToLcd5x7+0xd8>
				pixel_y_2 = LCD_PIXEL_HEIGHT - 1;
 800471e:	f240 133f 	movw	r3, #319	; 0x13f
 8004722:	843b      	strh	r3, [r7, #32]
			}

			LCD_fillRect(pixel_x_1, pixel_y_1, pixel_x_2-pixel_x_1, pixel_y_2 - pixel_y_1, pixelColor);
 8004724:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8004726:	8abb      	ldrh	r3, [r7, #20]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	b29c      	uxth	r4, r3
 800472c:	8c3a      	ldrh	r2, [r7, #32]
 800472e:	8a7b      	ldrh	r3, [r7, #18]
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	b29a      	uxth	r2, r3
 8004734:	8a79      	ldrh	r1, [r7, #18]
 8004736:	8ab8      	ldrh	r0, [r7, #20]
 8004738:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800473a:	9300      	str	r3, [sp, #0]
 800473c:	4613      	mov	r3, r2
 800473e:	4622      	mov	r2, r4
 8004740:	f7fc fa3c 	bl	8000bbc <LCD_fillRect>
			mask = mask << 1;
 8004744:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004748:	005b      	lsls	r3, r3, #1
 800474a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		for(row = 0; row < 7; row++){
 800474e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004750:	3301      	adds	r3, #1
 8004752:	62bb      	str	r3, [r7, #40]	; 0x28
 8004754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004756:	2b06      	cmp	r3, #6
 8004758:	dd98      	ble.n	800468c <drawCharToLcd5x7+0x40>
	for(column = 0; column < 5; column++){
 800475a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800475c:	3301      	adds	r3, #1
 800475e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004762:	2b04      	cmp	r3, #4
 8004764:	dd87      	ble.n	8004676 <drawCharToLcd5x7+0x2a>
		}
	}

}
 8004766:	bf00      	nop
 8004768:	bf00      	nop
 800476a:	3734      	adds	r7, #52	; 0x34
 800476c:	46bd      	mov	sp, r7
 800476e:	bd90      	pop	{r4, r7, pc}
 8004770:	0800af58 	.word	0x0800af58

08004774 <SPI1_Transfer>:
#include <stm32f4xx_hal_gpio.h>
#include <stdio.h>


uint8_t SPI1_Transfer(uint8_t data)
{
 8004774:	b480      	push	{r7}
 8004776:	b085      	sub	sp, #20
 8004778:	af00      	add	r7, sp, #0
 800477a:	4603      	mov	r3, r0
 800477c:	71fb      	strb	r3, [r7, #7]
	SPI_TypeDef *SPI1inst = hspi1.Instance;
 800477e:	4b12      	ldr	r3, [pc, #72]	; (80047c8 <SPI1_Transfer+0x54>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	60fb      	str	r3, [r7, #12]
    SPI1inst->DR = data;
 8004784:	79fa      	ldrb	r2, [r7, #7]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	60da      	str	r2, [r3, #12]
    while (!(SPI1inst->SR & (SPI_FLAG_TXE)));
 800478a:	bf00      	nop
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	f003 0302 	and.w	r3, r3, #2
 8004794:	2b00      	cmp	r3, #0
 8004796:	d0f9      	beq.n	800478c <SPI1_Transfer+0x18>
    while (!(SPI1inst->SR & (SPI_FLAG_RXNE)));
 8004798:	bf00      	nop
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	f003 0301 	and.w	r3, r3, #1
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d0f9      	beq.n	800479a <SPI1_Transfer+0x26>
    while (SPI1inst->SR & (SPI_FLAG_BSY));
 80047a6:	bf00      	nop
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d1f9      	bne.n	80047a8 <SPI1_Transfer+0x34>
    return SPI1inst->DR;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	b2db      	uxtb	r3, r3
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3714      	adds	r7, #20
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr
 80047c6:	bf00      	nop
 80047c8:	200020b0 	.word	0x200020b0

080047cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047d2:	2300      	movs	r3, #0
 80047d4:	607b      	str	r3, [r7, #4]
 80047d6:	4b10      	ldr	r3, [pc, #64]	; (8004818 <HAL_MspInit+0x4c>)
 80047d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047da:	4a0f      	ldr	r2, [pc, #60]	; (8004818 <HAL_MspInit+0x4c>)
 80047dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047e0:	6453      	str	r3, [r2, #68]	; 0x44
 80047e2:	4b0d      	ldr	r3, [pc, #52]	; (8004818 <HAL_MspInit+0x4c>)
 80047e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047ea:	607b      	str	r3, [r7, #4]
 80047ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80047ee:	2300      	movs	r3, #0
 80047f0:	603b      	str	r3, [r7, #0]
 80047f2:	4b09      	ldr	r3, [pc, #36]	; (8004818 <HAL_MspInit+0x4c>)
 80047f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f6:	4a08      	ldr	r2, [pc, #32]	; (8004818 <HAL_MspInit+0x4c>)
 80047f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047fc:	6413      	str	r3, [r2, #64]	; 0x40
 80047fe:	4b06      	ldr	r3, [pc, #24]	; (8004818 <HAL_MspInit+0x4c>)
 8004800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004806:	603b      	str	r3, [r7, #0]
 8004808:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800480a:	bf00      	nop
 800480c:	370c      	adds	r7, #12
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop
 8004818:	40023800 	.word	0x40023800

0800481c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b08a      	sub	sp, #40	; 0x28
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004824:	f107 0314 	add.w	r3, r7, #20
 8004828:	2200      	movs	r2, #0
 800482a:	601a      	str	r2, [r3, #0]
 800482c:	605a      	str	r2, [r3, #4]
 800482e:	609a      	str	r2, [r3, #8]
 8004830:	60da      	str	r2, [r3, #12]
 8004832:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a19      	ldr	r2, [pc, #100]	; (80048a0 <HAL_I2C_MspInit+0x84>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d12b      	bne.n	8004896 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800483e:	2300      	movs	r3, #0
 8004840:	613b      	str	r3, [r7, #16]
 8004842:	4b18      	ldr	r3, [pc, #96]	; (80048a4 <HAL_I2C_MspInit+0x88>)
 8004844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004846:	4a17      	ldr	r2, [pc, #92]	; (80048a4 <HAL_I2C_MspInit+0x88>)
 8004848:	f043 0302 	orr.w	r3, r3, #2
 800484c:	6313      	str	r3, [r2, #48]	; 0x30
 800484e:	4b15      	ldr	r3, [pc, #84]	; (80048a4 <HAL_I2C_MspInit+0x88>)
 8004850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004852:	f003 0302 	and.w	r3, r3, #2
 8004856:	613b      	str	r3, [r7, #16]
 8004858:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800485a:	23c0      	movs	r3, #192	; 0xc0
 800485c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800485e:	2312      	movs	r3, #18
 8004860:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004862:	2301      	movs	r3, #1
 8004864:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004866:	2303      	movs	r3, #3
 8004868:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800486a:	2304      	movs	r3, #4
 800486c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800486e:	f107 0314 	add.w	r3, r7, #20
 8004872:	4619      	mov	r1, r3
 8004874:	480c      	ldr	r0, [pc, #48]	; (80048a8 <HAL_I2C_MspInit+0x8c>)
 8004876:	f000 fee7 	bl	8005648 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800487a:	2300      	movs	r3, #0
 800487c:	60fb      	str	r3, [r7, #12]
 800487e:	4b09      	ldr	r3, [pc, #36]	; (80048a4 <HAL_I2C_MspInit+0x88>)
 8004880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004882:	4a08      	ldr	r2, [pc, #32]	; (80048a4 <HAL_I2C_MspInit+0x88>)
 8004884:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004888:	6413      	str	r3, [r2, #64]	; 0x40
 800488a:	4b06      	ldr	r3, [pc, #24]	; (80048a4 <HAL_I2C_MspInit+0x88>)
 800488c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004892:	60fb      	str	r3, [r7, #12]
 8004894:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004896:	bf00      	nop
 8004898:	3728      	adds	r7, #40	; 0x28
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	40005400 	.word	0x40005400
 80048a4:	40023800 	.word	0x40023800
 80048a8:	40020400 	.word	0x40020400

080048ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b08a      	sub	sp, #40	; 0x28
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048b4:	f107 0314 	add.w	r3, r7, #20
 80048b8:	2200      	movs	r2, #0
 80048ba:	601a      	str	r2, [r3, #0]
 80048bc:	605a      	str	r2, [r3, #4]
 80048be:	609a      	str	r2, [r3, #8]
 80048c0:	60da      	str	r2, [r3, #12]
 80048c2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a19      	ldr	r2, [pc, #100]	; (8004930 <HAL_SPI_MspInit+0x84>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d12b      	bne.n	8004926 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80048ce:	2300      	movs	r3, #0
 80048d0:	613b      	str	r3, [r7, #16]
 80048d2:	4b18      	ldr	r3, [pc, #96]	; (8004934 <HAL_SPI_MspInit+0x88>)
 80048d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048d6:	4a17      	ldr	r2, [pc, #92]	; (8004934 <HAL_SPI_MspInit+0x88>)
 80048d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80048dc:	6453      	str	r3, [r2, #68]	; 0x44
 80048de:	4b15      	ldr	r3, [pc, #84]	; (8004934 <HAL_SPI_MspInit+0x88>)
 80048e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048e6:	613b      	str	r3, [r7, #16]
 80048e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048ea:	2300      	movs	r3, #0
 80048ec:	60fb      	str	r3, [r7, #12]
 80048ee:	4b11      	ldr	r3, [pc, #68]	; (8004934 <HAL_SPI_MspInit+0x88>)
 80048f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f2:	4a10      	ldr	r2, [pc, #64]	; (8004934 <HAL_SPI_MspInit+0x88>)
 80048f4:	f043 0301 	orr.w	r3, r3, #1
 80048f8:	6313      	str	r3, [r2, #48]	; 0x30
 80048fa:	4b0e      	ldr	r3, [pc, #56]	; (8004934 <HAL_SPI_MspInit+0x88>)
 80048fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048fe:	f003 0301 	and.w	r3, r3, #1
 8004902:	60fb      	str	r3, [r7, #12]
 8004904:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004906:	23e0      	movs	r3, #224	; 0xe0
 8004908:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800490a:	2302      	movs	r3, #2
 800490c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800490e:	2300      	movs	r3, #0
 8004910:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004912:	2303      	movs	r3, #3
 8004914:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004916:	2305      	movs	r3, #5
 8004918:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800491a:	f107 0314 	add.w	r3, r7, #20
 800491e:	4619      	mov	r1, r3
 8004920:	4805      	ldr	r0, [pc, #20]	; (8004938 <HAL_SPI_MspInit+0x8c>)
 8004922:	f000 fe91 	bl	8005648 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004926:	bf00      	nop
 8004928:	3728      	adds	r7, #40	; 0x28
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	40013000 	.word	0x40013000
 8004934:	40023800 	.word	0x40023800
 8004938:	40020000 	.word	0x40020000

0800493c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800493c:	b480      	push	{r7}
 800493e:	b085      	sub	sp, #20
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a0b      	ldr	r2, [pc, #44]	; (8004978 <HAL_TIM_PWM_MspInit+0x3c>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d10d      	bne.n	800496a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800494e:	2300      	movs	r3, #0
 8004950:	60fb      	str	r3, [r7, #12]
 8004952:	4b0a      	ldr	r3, [pc, #40]	; (800497c <HAL_TIM_PWM_MspInit+0x40>)
 8004954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004956:	4a09      	ldr	r2, [pc, #36]	; (800497c <HAL_TIM_PWM_MspInit+0x40>)
 8004958:	f043 0301 	orr.w	r3, r3, #1
 800495c:	6453      	str	r3, [r2, #68]	; 0x44
 800495e:	4b07      	ldr	r3, [pc, #28]	; (800497c <HAL_TIM_PWM_MspInit+0x40>)
 8004960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004962:	f003 0301 	and.w	r3, r3, #1
 8004966:	60fb      	str	r3, [r7, #12]
 8004968:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800496a:	bf00      	nop
 800496c:	3714      	adds	r7, #20
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr
 8004976:	bf00      	nop
 8004978:	40010000 	.word	0x40010000
 800497c:	40023800 	.word	0x40023800

08004980 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b088      	sub	sp, #32
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004988:	f107 030c 	add.w	r3, r7, #12
 800498c:	2200      	movs	r2, #0
 800498e:	601a      	str	r2, [r3, #0]
 8004990:	605a      	str	r2, [r3, #4]
 8004992:	609a      	str	r2, [r3, #8]
 8004994:	60da      	str	r2, [r3, #12]
 8004996:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a12      	ldr	r2, [pc, #72]	; (80049e8 <HAL_TIM_MspPostInit+0x68>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d11e      	bne.n	80049e0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049a2:	2300      	movs	r3, #0
 80049a4:	60bb      	str	r3, [r7, #8]
 80049a6:	4b11      	ldr	r3, [pc, #68]	; (80049ec <HAL_TIM_MspPostInit+0x6c>)
 80049a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049aa:	4a10      	ldr	r2, [pc, #64]	; (80049ec <HAL_TIM_MspPostInit+0x6c>)
 80049ac:	f043 0301 	orr.w	r3, r3, #1
 80049b0:	6313      	str	r3, [r2, #48]	; 0x30
 80049b2:	4b0e      	ldr	r3, [pc, #56]	; (80049ec <HAL_TIM_MspPostInit+0x6c>)
 80049b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b6:	f003 0301 	and.w	r3, r3, #1
 80049ba:	60bb      	str	r3, [r7, #8]
 80049bc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = LCD_BL_Pin;
 80049be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80049c2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049c4:	2302      	movs	r3, #2
 80049c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049c8:	2300      	movs	r3, #0
 80049ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049cc:	2300      	movs	r3, #0
 80049ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80049d0:	2301      	movs	r3, #1
 80049d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 80049d4:	f107 030c 	add.w	r3, r7, #12
 80049d8:	4619      	mov	r1, r3
 80049da:	4805      	ldr	r0, [pc, #20]	; (80049f0 <HAL_TIM_MspPostInit+0x70>)
 80049dc:	f000 fe34 	bl	8005648 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80049e0:	bf00      	nop
 80049e2:	3720      	adds	r7, #32
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	40010000 	.word	0x40010000
 80049ec:	40023800 	.word	0x40023800
 80049f0:	40020000 	.word	0x40020000

080049f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b08c      	sub	sp, #48	; 0x30
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049fc:	f107 031c 	add.w	r3, r7, #28
 8004a00:	2200      	movs	r2, #0
 8004a02:	601a      	str	r2, [r3, #0]
 8004a04:	605a      	str	r2, [r3, #4]
 8004a06:	609a      	str	r2, [r3, #8]
 8004a08:	60da      	str	r2, [r3, #12]
 8004a0a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a3a      	ldr	r2, [pc, #232]	; (8004afc <HAL_UART_MspInit+0x108>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d135      	bne.n	8004a82 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004a16:	2300      	movs	r3, #0
 8004a18:	61bb      	str	r3, [r7, #24]
 8004a1a:	4b39      	ldr	r3, [pc, #228]	; (8004b00 <HAL_UART_MspInit+0x10c>)
 8004a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a1e:	4a38      	ldr	r2, [pc, #224]	; (8004b00 <HAL_UART_MspInit+0x10c>)
 8004a20:	f043 0310 	orr.w	r3, r3, #16
 8004a24:	6453      	str	r3, [r2, #68]	; 0x44
 8004a26:	4b36      	ldr	r3, [pc, #216]	; (8004b00 <HAL_UART_MspInit+0x10c>)
 8004a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a2a:	f003 0310 	and.w	r3, r3, #16
 8004a2e:	61bb      	str	r3, [r7, #24]
 8004a30:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a32:	2300      	movs	r3, #0
 8004a34:	617b      	str	r3, [r7, #20]
 8004a36:	4b32      	ldr	r3, [pc, #200]	; (8004b00 <HAL_UART_MspInit+0x10c>)
 8004a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a3a:	4a31      	ldr	r2, [pc, #196]	; (8004b00 <HAL_UART_MspInit+0x10c>)
 8004a3c:	f043 0301 	orr.w	r3, r3, #1
 8004a40:	6313      	str	r3, [r2, #48]	; 0x30
 8004a42:	4b2f      	ldr	r3, [pc, #188]	; (8004b00 <HAL_UART_MspInit+0x10c>)
 8004a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a46:	f003 0301 	and.w	r3, r3, #1
 8004a4a:	617b      	str	r3, [r7, #20]
 8004a4c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004a4e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004a52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a54:	2302      	movs	r3, #2
 8004a56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004a60:	2307      	movs	r3, #7
 8004a62:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a64:	f107 031c 	add.w	r3, r7, #28
 8004a68:	4619      	mov	r1, r3
 8004a6a:	4826      	ldr	r0, [pc, #152]	; (8004b04 <HAL_UART_MspInit+0x110>)
 8004a6c:	f000 fdec 	bl	8005648 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004a70:	2200      	movs	r2, #0
 8004a72:	2100      	movs	r1, #0
 8004a74:	2025      	movs	r0, #37	; 0x25
 8004a76:	f000 fd1e 	bl	80054b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004a7a:	2025      	movs	r0, #37	; 0x25
 8004a7c:	f000 fd37 	bl	80054ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004a80:	e038      	b.n	8004af4 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a20      	ldr	r2, [pc, #128]	; (8004b08 <HAL_UART_MspInit+0x114>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d133      	bne.n	8004af4 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	613b      	str	r3, [r7, #16]
 8004a90:	4b1b      	ldr	r3, [pc, #108]	; (8004b00 <HAL_UART_MspInit+0x10c>)
 8004a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a94:	4a1a      	ldr	r2, [pc, #104]	; (8004b00 <HAL_UART_MspInit+0x10c>)
 8004a96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a9a:	6413      	str	r3, [r2, #64]	; 0x40
 8004a9c:	4b18      	ldr	r3, [pc, #96]	; (8004b00 <HAL_UART_MspInit+0x10c>)
 8004a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aa4:	613b      	str	r3, [r7, #16]
 8004aa6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	60fb      	str	r3, [r7, #12]
 8004aac:	4b14      	ldr	r3, [pc, #80]	; (8004b00 <HAL_UART_MspInit+0x10c>)
 8004aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab0:	4a13      	ldr	r2, [pc, #76]	; (8004b00 <HAL_UART_MspInit+0x10c>)
 8004ab2:	f043 0301 	orr.w	r3, r3, #1
 8004ab6:	6313      	str	r3, [r2, #48]	; 0x30
 8004ab8:	4b11      	ldr	r3, [pc, #68]	; (8004b00 <HAL_UART_MspInit+0x10c>)
 8004aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004abc:	f003 0301 	and.w	r3, r3, #1
 8004ac0:	60fb      	str	r3, [r7, #12]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004ac4:	230c      	movs	r3, #12
 8004ac6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ac8:	2302      	movs	r3, #2
 8004aca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004acc:	2300      	movs	r3, #0
 8004ace:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ad0:	2303      	movs	r3, #3
 8004ad2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004ad4:	2307      	movs	r3, #7
 8004ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ad8:	f107 031c 	add.w	r3, r7, #28
 8004adc:	4619      	mov	r1, r3
 8004ade:	4809      	ldr	r0, [pc, #36]	; (8004b04 <HAL_UART_MspInit+0x110>)
 8004ae0:	f000 fdb2 	bl	8005648 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	2100      	movs	r1, #0
 8004ae8:	2026      	movs	r0, #38	; 0x26
 8004aea:	f000 fce4 	bl	80054b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004aee:	2026      	movs	r0, #38	; 0x26
 8004af0:	f000 fcfd 	bl	80054ee <HAL_NVIC_EnableIRQ>
}
 8004af4:	bf00      	nop
 8004af6:	3730      	adds	r7, #48	; 0x30
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	40011000 	.word	0x40011000
 8004b00:	40023800 	.word	0x40023800
 8004b04:	40020000 	.word	0x40020000
 8004b08:	40004400 	.word	0x40004400

08004b0c <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b086      	sub	sp, #24
 8004b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8004b12:	1d3b      	adds	r3, r7, #4
 8004b14:	2200      	movs	r2, #0
 8004b16:	601a      	str	r2, [r3, #0]
 8004b18:	605a      	str	r2, [r3, #4]
 8004b1a:	609a      	str	r2, [r3, #8]
 8004b1c:	60da      	str	r2, [r3, #12]
 8004b1e:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8004b20:	4b1c      	ldr	r3, [pc, #112]	; (8004b94 <HAL_FSMC_MspInit+0x88>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d131      	bne.n	8004b8c <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8004b28:	4b1a      	ldr	r3, [pc, #104]	; (8004b94 <HAL_FSMC_MspInit+0x88>)
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8004b2e:	2300      	movs	r3, #0
 8004b30:	603b      	str	r3, [r7, #0]
 8004b32:	4b19      	ldr	r3, [pc, #100]	; (8004b98 <HAL_FSMC_MspInit+0x8c>)
 8004b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b36:	4a18      	ldr	r2, [pc, #96]	; (8004b98 <HAL_FSMC_MspInit+0x8c>)
 8004b38:	f043 0301 	orr.w	r3, r3, #1
 8004b3c:	6393      	str	r3, [r2, #56]	; 0x38
 8004b3e:	4b16      	ldr	r3, [pc, #88]	; (8004b98 <HAL_FSMC_MspInit+0x8c>)
 8004b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b42:	f003 0301 	and.w	r3, r3, #1
 8004b46:	603b      	str	r3, [r7, #0]
 8004b48:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8004b4a:	f64f 7380 	movw	r3, #65408	; 0xff80
 8004b4e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b50:	2302      	movs	r3, #2
 8004b52:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b54:	2300      	movs	r3, #0
 8004b56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b58:	2303      	movs	r3, #3
 8004b5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8004b5c:	230c      	movs	r3, #12
 8004b5e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004b60:	1d3b      	adds	r3, r7, #4
 8004b62:	4619      	mov	r1, r3
 8004b64:	480d      	ldr	r0, [pc, #52]	; (8004b9c <HAL_FSMC_MspInit+0x90>)
 8004b66:	f000 fd6f 	bl	8005648 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13
 8004b6a:	f24e 73b3 	movw	r3, #59315	; 0xe7b3
 8004b6e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b70:	2302      	movs	r3, #2
 8004b72:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b74:	2300      	movs	r3, #0
 8004b76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b78:	2303      	movs	r3, #3
 8004b7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8004b7c:	230c      	movs	r3, #12
 8004b7e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004b80:	1d3b      	adds	r3, r7, #4
 8004b82:	4619      	mov	r1, r3
 8004b84:	4806      	ldr	r0, [pc, #24]	; (8004ba0 <HAL_FSMC_MspInit+0x94>)
 8004b86:	f000 fd5f 	bl	8005648 <HAL_GPIO_Init>
 8004b8a:	e000      	b.n	8004b8e <HAL_FSMC_MspInit+0x82>
    return;
 8004b8c:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8004b8e:	3718      	adds	r7, #24
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	20002228 	.word	0x20002228
 8004b98:	40023800 	.word	0x40023800
 8004b9c:	40021000 	.word	0x40021000
 8004ba0:	40020c00 	.word	0x40020c00

08004ba4 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b082      	sub	sp, #8
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8004bac:	f7ff ffae 	bl	8004b0c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8004bb0:	bf00      	nop
 8004bb2:	3708      	adds	r7, #8
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004bbc:	e7fe      	b.n	8004bbc <NMI_Handler+0x4>

08004bbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004bbe:	b480      	push	{r7}
 8004bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004bc2:	e7fe      	b.n	8004bc2 <HardFault_Handler+0x4>

08004bc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004bc8:	e7fe      	b.n	8004bc8 <MemManage_Handler+0x4>

08004bca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004bca:	b480      	push	{r7}
 8004bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004bce:	e7fe      	b.n	8004bce <BusFault_Handler+0x4>

08004bd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004bd4:	e7fe      	b.n	8004bd4 <UsageFault_Handler+0x4>

08004bd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004bd6:	b480      	push	{r7}
 8004bd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004bda:	bf00      	nop
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr

08004be4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004be4:	b480      	push	{r7}
 8004be6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004be8:	bf00      	nop
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr

08004bf2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004bf2:	b480      	push	{r7}
 8004bf4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004bf6:	bf00      	nop
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004c04:	f000 fb38 	bl	8005278 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004c08:	bf00      	nop
 8004c0a:	bd80      	pop	{r7, pc}

08004c0c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8004c10:	2010      	movs	r0, #16
 8004c12:	f000 fecf 	bl	80059b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8004c16:	bf00      	nop
 8004c18:	bd80      	pop	{r7, pc}
	...

08004c1c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b082      	sub	sp, #8
 8004c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  static int ledVal = 0;
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, ledVal);
 8004c22:	4b24      	ldr	r3, [pc, #144]	; (8004cb4 <USART1_IRQHandler+0x98>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	461a      	mov	r2, r3
 8004c2a:	2108      	movs	r1, #8
 8004c2c:	4822      	ldr	r0, [pc, #136]	; (8004cb8 <USART1_IRQHandler+0x9c>)
 8004c2e:	f000 fea7 	bl	8005980 <HAL_GPIO_WritePin>
  ledVal = !ledVal;
 8004c32:	4b20      	ldr	r3, [pc, #128]	; (8004cb4 <USART1_IRQHandler+0x98>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	bf0c      	ite	eq
 8004c3a:	2301      	moveq	r3, #1
 8004c3c:	2300      	movne	r3, #0
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	461a      	mov	r2, r3
 8004c42:	4b1c      	ldr	r3, [pc, #112]	; (8004cb4 <USART1_IRQHandler+0x98>)
 8004c44:	601a      	str	r2, [r3, #0]
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004c46:	481d      	ldr	r0, [pc, #116]	; (8004cbc <USART1_IRQHandler+0xa0>)
 8004c48:	f003 fbe0 	bl	800840c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  volatile unsigned int IIR;
  IIR = USART1->SR;
 8004c4c:	4b1c      	ldr	r3, [pc, #112]	; (8004cc0 <USART1_IRQHandler+0xa4>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	603b      	str	r3, [r7, #0]
  if(IIR & UART_FLAG_RXNE){
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	f003 0320 	and.w	r3, r3, #32
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d009      	beq.n	8004c70 <USART1_IRQHandler+0x54>
  		//Read Data Register Not Empty
  		char t = USART1->DR; // the character from the USART1 data register is saved in t
 8004c5c:	4b18      	ldr	r3, [pc, #96]	; (8004cc0 <USART1_IRQHandler+0xa4>)
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	71fb      	strb	r3, [r7, #7]
  		put_in_rx_buffer(t,DBG_UART);
 8004c62:	4b18      	ldr	r3, [pc, #96]	; (8004cc4 <USART1_IRQHandler+0xa8>)
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	79fb      	ldrb	r3, [r7, #7]
 8004c68:	4611      	mov	r1, r2
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f000 f93c 	bl	8004ee8 <put_in_rx_buffer>
      }
  if(IIR & UART_FLAG_TXE){
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d018      	beq.n	8004cac <USART1_IRQHandler+0x90>
  		if(wr_pointer_dbg==rd_pointer_dbg){
 8004c7a:	4b13      	ldr	r3, [pc, #76]	; (8004cc8 <USART1_IRQHandler+0xac>)
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	4b13      	ldr	r3, [pc, #76]	; (8004ccc <USART1_IRQHandler+0xb0>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d108      	bne.n	8004c98 <USART1_IRQHandler+0x7c>
  			__HAL_UART_DISABLE_IT(&huart1, UART_IT_TXE); //whole message transmitted
 8004c86:	4b0d      	ldr	r3, [pc, #52]	; (8004cbc <USART1_IRQHandler+0xa0>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	68da      	ldr	r2, [r3, #12]
 8004c8c:	4b0b      	ldr	r3, [pc, #44]	; (8004cbc <USART1_IRQHandler+0xa0>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c94:	60da      	str	r2, [r3, #12]
  		}
  	}


  /* USER CODE END USART1_IRQn 1 */
}
 8004c96:	e009      	b.n	8004cac <USART1_IRQHandler+0x90>
  			DBG_UART->DR = get_from_tx_buffer(DBG_UART);
 8004c98:	4b0a      	ldr	r3, [pc, #40]	; (8004cc4 <USART1_IRQHandler+0xa8>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f000 f975 	bl	8004f8c <get_from_tx_buffer>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	4b07      	ldr	r3, [pc, #28]	; (8004cc4 <USART1_IRQHandler+0xa8>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	605a      	str	r2, [r3, #4]
}
 8004cac:	bf00      	nop
 8004cae:	3708      	adds	r7, #8
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}
 8004cb4:	2000222c 	.word	0x2000222c
 8004cb8:	40020400 	.word	0x40020400
 8004cbc:	20002150 	.word	0x20002150
 8004cc0:	40011000 	.word	0x40011000
 8004cc4:	20000018 	.word	0x20000018
 8004cc8:	20002a40 	.word	0x20002a40
 8004ccc:	20002a3c 	.word	0x20002a3c

08004cd0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b082      	sub	sp, #8
 8004cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004cd6:	481b      	ldr	r0, [pc, #108]	; (8004d44 <USART2_IRQHandler+0x74>)
 8004cd8:	f003 fb98 	bl	800840c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  volatile unsigned int IIR;
  	IIR=USART2->SR;
 8004cdc:	4b1a      	ldr	r3, [pc, #104]	; (8004d48 <USART2_IRQHandler+0x78>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	603b      	str	r3, [r7, #0]
    if(IIR & UART_FLAG_RXNE){
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	f003 0320 	and.w	r3, r3, #32
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d009      	beq.n	8004d00 <USART2_IRQHandler+0x30>
  		// check if the USART6 receive interrupt flag was set
  		char t = USART2->DR; // the character from the USART1 data register is saved in t
 8004cec:	4b16      	ldr	r3, [pc, #88]	; (8004d48 <USART2_IRQHandler+0x78>)
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	71fb      	strb	r3, [r7, #7]
  		put_in_rx_buffer(t,RS485_UART);
 8004cf2:	4b16      	ldr	r3, [pc, #88]	; (8004d4c <USART2_IRQHandler+0x7c>)
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	79fb      	ldrb	r3, [r7, #7]
 8004cf8:	4611      	mov	r1, r2
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f000 f8f4 	bl	8004ee8 <put_in_rx_buffer>
      }
  	if(IIR & UART_FLAG_TXE){
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d017      	beq.n	8004d3a <USART2_IRQHandler+0x6a>
  		if(wr_pointer_rs485==rd_pointer_rs485){
 8004d0a:	4b11      	ldr	r3, [pc, #68]	; (8004d50 <USART2_IRQHandler+0x80>)
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	4b11      	ldr	r3, [pc, #68]	; (8004d54 <USART2_IRQHandler+0x84>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d108      	bne.n	8004d28 <USART2_IRQHandler+0x58>
  			__HAL_UART_DISABLE_IT(&huart2, UART_IT_TXE);
 8004d16:	4b0b      	ldr	r3, [pc, #44]	; (8004d44 <USART2_IRQHandler+0x74>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	68da      	ldr	r2, [r3, #12]
 8004d1c:	4b09      	ldr	r3, [pc, #36]	; (8004d44 <USART2_IRQHandler+0x74>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d24:	60da      	str	r2, [r3, #12]
  			USART2->DR = get_from_tx_buffer(RS485_UART);
  		}
  	}

  /* USER CODE END USART2_IRQn 1 */
}
 8004d26:	e008      	b.n	8004d3a <USART2_IRQHandler+0x6a>
  			USART2->DR = get_from_tx_buffer(RS485_UART);
 8004d28:	4b08      	ldr	r3, [pc, #32]	; (8004d4c <USART2_IRQHandler+0x7c>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f000 f92d 	bl	8004f8c <get_from_tx_buffer>
 8004d32:	4603      	mov	r3, r0
 8004d34:	461a      	mov	r2, r3
 8004d36:	4b04      	ldr	r3, [pc, #16]	; (8004d48 <USART2_IRQHandler+0x78>)
 8004d38:	605a      	str	r2, [r3, #4]
}
 8004d3a:	bf00      	nop
 8004d3c:	3708      	adds	r7, #8
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	bf00      	nop
 8004d44:	20002194 	.word	0x20002194
 8004d48:	40004400 	.word	0x40004400
 8004d4c:	20000014 	.word	0x20000014
 8004d50:	20002638 	.word	0x20002638
 8004d54:	20002634 	.word	0x20002634

08004d58 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b086      	sub	sp, #24
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	60b9      	str	r1, [r7, #8]
 8004d62:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d64:	2300      	movs	r3, #0
 8004d66:	617b      	str	r3, [r7, #20]
 8004d68:	e00a      	b.n	8004d80 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004d6a:	f3af 8000 	nop.w
 8004d6e:	4601      	mov	r1, r0
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	1c5a      	adds	r2, r3, #1
 8004d74:	60ba      	str	r2, [r7, #8]
 8004d76:	b2ca      	uxtb	r2, r1
 8004d78:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	617b      	str	r3, [r7, #20]
 8004d80:	697a      	ldr	r2, [r7, #20]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	dbf0      	blt.n	8004d6a <_read+0x12>
	}

return len;
 8004d88:	687b      	ldr	r3, [r7, #4]
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3718      	adds	r7, #24
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}

08004d92 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004d92:	b580      	push	{r7, lr}
 8004d94:	b086      	sub	sp, #24
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	60f8      	str	r0, [r7, #12]
 8004d9a:	60b9      	str	r1, [r7, #8]
 8004d9c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d9e:	2300      	movs	r3, #0
 8004da0:	617b      	str	r3, [r7, #20]
 8004da2:	e009      	b.n	8004db8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	1c5a      	adds	r2, r3, #1
 8004da8:	60ba      	str	r2, [r7, #8]
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	4618      	mov	r0, r3
 8004dae:	f000 f889 	bl	8004ec4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	3301      	adds	r3, #1
 8004db6:	617b      	str	r3, [r7, #20]
 8004db8:	697a      	ldr	r2, [r7, #20]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	dbf1      	blt.n	8004da4 <_write+0x12>
	}
	return len;
 8004dc0:	687b      	ldr	r3, [r7, #4]
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3718      	adds	r7, #24
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}

08004dca <_close>:

int _close(int file)
{
 8004dca:	b480      	push	{r7}
 8004dcc:	b083      	sub	sp, #12
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	6078      	str	r0, [r7, #4]
	return -1;
 8004dd2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	370c      	adds	r7, #12
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr

08004de2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004de2:	b480      	push	{r7}
 8004de4:	b083      	sub	sp, #12
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
 8004dea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004df2:	605a      	str	r2, [r3, #4]
	return 0;
 8004df4:	2300      	movs	r3, #0
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	370c      	adds	r7, #12
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr

08004e02 <_isatty>:

int _isatty(int file)
{
 8004e02:	b480      	push	{r7}
 8004e04:	b083      	sub	sp, #12
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	6078      	str	r0, [r7, #4]
	return 1;
 8004e0a:	2301      	movs	r3, #1
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	370c      	adds	r7, #12
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr

08004e18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b085      	sub	sp, #20
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	60f8      	str	r0, [r7, #12]
 8004e20:	60b9      	str	r1, [r7, #8]
 8004e22:	607a      	str	r2, [r7, #4]
	return 0;
 8004e24:	2300      	movs	r3, #0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3714      	adds	r7, #20
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr
	...

08004e34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b086      	sub	sp, #24
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004e3c:	4a14      	ldr	r2, [pc, #80]	; (8004e90 <_sbrk+0x5c>)
 8004e3e:	4b15      	ldr	r3, [pc, #84]	; (8004e94 <_sbrk+0x60>)
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004e48:	4b13      	ldr	r3, [pc, #76]	; (8004e98 <_sbrk+0x64>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d102      	bne.n	8004e56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004e50:	4b11      	ldr	r3, [pc, #68]	; (8004e98 <_sbrk+0x64>)
 8004e52:	4a12      	ldr	r2, [pc, #72]	; (8004e9c <_sbrk+0x68>)
 8004e54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004e56:	4b10      	ldr	r3, [pc, #64]	; (8004e98 <_sbrk+0x64>)
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	693a      	ldr	r2, [r7, #16]
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d207      	bcs.n	8004e74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004e64:	f004 fae2 	bl	800942c <__errno>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	220c      	movs	r2, #12
 8004e6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8004e72:	e009      	b.n	8004e88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004e74:	4b08      	ldr	r3, [pc, #32]	; (8004e98 <_sbrk+0x64>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004e7a:	4b07      	ldr	r3, [pc, #28]	; (8004e98 <_sbrk+0x64>)
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4413      	add	r3, r2
 8004e82:	4a05      	ldr	r2, [pc, #20]	; (8004e98 <_sbrk+0x64>)
 8004e84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004e86:	68fb      	ldr	r3, [r7, #12]
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3718      	adds	r7, #24
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}
 8004e90:	20020000 	.word	0x20020000
 8004e94:	00000400 	.word	0x00000400
 8004e98:	20002230 	.word	0x20002230
 8004e9c:	20004e68 	.word	0x20004e68

08004ea0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004ea4:	4b06      	ldr	r3, [pc, #24]	; (8004ec0 <SystemInit+0x20>)
 8004ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eaa:	4a05      	ldr	r2, [pc, #20]	; (8004ec0 <SystemInit+0x20>)
 8004eac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004eb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004eb4:	bf00      	nop
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop
 8004ec0:	e000ed00 	.word	0xe000ed00

08004ec4 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

//redirect printf to uart1.
PUTCHAR_PROTOTYPE{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b082      	sub	sp, #8
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 0xffff);
 8004ecc:	1d39      	adds	r1, r7, #4
 8004ece:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	4803      	ldr	r0, [pc, #12]	; (8004ee4 <__io_putchar+0x20>)
 8004ed6:	f003 fa06 	bl	80082e6 <HAL_UART_Transmit>
	return ch;
 8004eda:	687b      	ldr	r3, [r7, #4]
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3708      	adds	r7, #8
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	20002150 	.word	0x20002150

08004ee8 <put_in_rx_buffer>:

void put_in_rx_buffer(char data, USART_TypeDef* USARTx)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b083      	sub	sp, #12
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	4603      	mov	r3, r0
 8004ef0:	6039      	str	r1, [r7, #0]
 8004ef2:	71fb      	strb	r3, [r7, #7]
	if(USARTx == DBG_UART)
 8004ef4:	4b1d      	ldr	r3, [pc, #116]	; (8004f6c <put_in_rx_buffer+0x84>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	683a      	ldr	r2, [r7, #0]
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d114      	bne.n	8004f28 <put_in_rx_buffer+0x40>
	{
		if(SIO_RBUFLEN_DBG>=LEN_RX_BUFFER_DBG)
 8004efe:	4b1c      	ldr	r3, [pc, #112]	; (8004f70 <put_in_rx_buffer+0x88>)
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	4b1c      	ldr	r3, [pc, #112]	; (8004f74 <put_in_rx_buffer+0x8c>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	1ad3      	subs	r3, r2, r3
 8004f08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f0c:	d226      	bcs.n	8004f5c <put_in_rx_buffer+0x74>
			{
				return;
			}
		rx_buffer_dbg[wr_pointer_rx_dbg & (LEN_RX_BUFFER_DBG - 1)]=data;
 8004f0e:	4b18      	ldr	r3, [pc, #96]	; (8004f70 <put_in_rx_buffer+0x88>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004f16:	4918      	ldr	r1, [pc, #96]	; (8004f78 <put_in_rx_buffer+0x90>)
 8004f18:	79fa      	ldrb	r2, [r7, #7]
 8004f1a:	54ca      	strb	r2, [r1, r3]
		wr_pointer_rx_dbg++;
 8004f1c:	4b14      	ldr	r3, [pc, #80]	; (8004f70 <put_in_rx_buffer+0x88>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	3301      	adds	r3, #1
 8004f22:	4a13      	ldr	r2, [pc, #76]	; (8004f70 <put_in_rx_buffer+0x88>)
 8004f24:	6013      	str	r3, [r2, #0]
 8004f26:	e01c      	b.n	8004f62 <put_in_rx_buffer+0x7a>
	}
	else if(USARTx == RS485_UART)
 8004f28:	4b14      	ldr	r3, [pc, #80]	; (8004f7c <put_in_rx_buffer+0x94>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	683a      	ldr	r2, [r7, #0]
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d117      	bne.n	8004f62 <put_in_rx_buffer+0x7a>
	{
		if(SIO_RBUFLEN_RS485>=LEN_RX_BUFFER_RS485)
 8004f32:	4b13      	ldr	r3, [pc, #76]	; (8004f80 <put_in_rx_buffer+0x98>)
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	4b13      	ldr	r3, [pc, #76]	; (8004f84 <put_in_rx_buffer+0x9c>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	1ad3      	subs	r3, r2, r3
 8004f3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f40:	d20e      	bcs.n	8004f60 <put_in_rx_buffer+0x78>
			{
				return;
			}
		rx_buffer_rs485[wr_pointer_rx_rs485 & (LEN_RX_BUFFER_RS485 - 1)]=data;
 8004f42:	4b0f      	ldr	r3, [pc, #60]	; (8004f80 <put_in_rx_buffer+0x98>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f4a:	490f      	ldr	r1, [pc, #60]	; (8004f88 <put_in_rx_buffer+0xa0>)
 8004f4c:	79fa      	ldrb	r2, [r7, #7]
 8004f4e:	54ca      	strb	r2, [r1, r3]
		wr_pointer_rx_rs485++;
 8004f50:	4b0b      	ldr	r3, [pc, #44]	; (8004f80 <put_in_rx_buffer+0x98>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	3301      	adds	r3, #1
 8004f56:	4a0a      	ldr	r2, [pc, #40]	; (8004f80 <put_in_rx_buffer+0x98>)
 8004f58:	6013      	str	r3, [r2, #0]
 8004f5a:	e002      	b.n	8004f62 <put_in_rx_buffer+0x7a>
				return;
 8004f5c:	bf00      	nop
 8004f5e:	e000      	b.n	8004f62 <put_in_rx_buffer+0x7a>
				return;
 8004f60:	bf00      	nop
	}
}
 8004f62:	370c      	adds	r7, #12
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr
 8004f6c:	20000018 	.word	0x20000018
 8004f70:	20004e50 	.word	0x20004e50
 8004f74:	20004e4c 	.word	0x20004e4c
 8004f78:	20002e4c 	.word	0x20002e4c
 8004f7c:	20000014 	.word	0x20000014
 8004f80:	20002e48 	.word	0x20002e48
 8004f84:	20002e44 	.word	0x20002e44
 8004f88:	20002a44 	.word	0x20002a44

08004f8c <get_from_tx_buffer>:
		tx_buffer_dbg[wr_pointer_dbg & (LEN_TX_BUFFER_DBG - 1)]=data;
		wr_pointer_dbg++;
	}
}
char get_from_tx_buffer(USART_TypeDef* USARTx)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b085      	sub	sp, #20
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
	char data;

	if(USARTx == RS485_UART)
 8004f94:	4b14      	ldr	r3, [pc, #80]	; (8004fe8 <get_from_tx_buffer+0x5c>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d10c      	bne.n	8004fb8 <get_from_tx_buffer+0x2c>
	{

		data=tx_buffer_rs485[rd_pointer_rs485 & (LEN_TX_BUFFER_RS485-1)];
 8004f9e:	4b13      	ldr	r3, [pc, #76]	; (8004fec <get_from_tx_buffer+0x60>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fa6:	4a12      	ldr	r2, [pc, #72]	; (8004ff0 <get_from_tx_buffer+0x64>)
 8004fa8:	5cd3      	ldrb	r3, [r2, r3]
 8004faa:	73fb      	strb	r3, [r7, #15]
		rd_pointer_rs485++;
 8004fac:	4b0f      	ldr	r3, [pc, #60]	; (8004fec <get_from_tx_buffer+0x60>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	3301      	adds	r3, #1
 8004fb2:	4a0e      	ldr	r2, [pc, #56]	; (8004fec <get_from_tx_buffer+0x60>)
 8004fb4:	6013      	str	r3, [r2, #0]
 8004fb6:	e010      	b.n	8004fda <get_from_tx_buffer+0x4e>
	}
	else if(USARTx == DBG_UART)
 8004fb8:	4b0e      	ldr	r3, [pc, #56]	; (8004ff4 <get_from_tx_buffer+0x68>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d10b      	bne.n	8004fda <get_from_tx_buffer+0x4e>
	{

		data=tx_buffer_dbg[rd_pointer_dbg & (LEN_TX_BUFFER_DBG-1)];
 8004fc2:	4b0d      	ldr	r3, [pc, #52]	; (8004ff8 <get_from_tx_buffer+0x6c>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fca:	4a0c      	ldr	r2, [pc, #48]	; (8004ffc <get_from_tx_buffer+0x70>)
 8004fcc:	5cd3      	ldrb	r3, [r2, r3]
 8004fce:	73fb      	strb	r3, [r7, #15]
		rd_pointer_dbg++;
 8004fd0:	4b09      	ldr	r3, [pc, #36]	; (8004ff8 <get_from_tx_buffer+0x6c>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	3301      	adds	r3, #1
 8004fd6:	4a08      	ldr	r2, [pc, #32]	; (8004ff8 <get_from_tx_buffer+0x6c>)
 8004fd8:	6013      	str	r3, [r2, #0]
	}
	return data;
 8004fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3714      	adds	r7, #20
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr
 8004fe8:	20000014 	.word	0x20000014
 8004fec:	20002634 	.word	0x20002634
 8004ff0:	20002234 	.word	0x20002234
 8004ff4:	20000018 	.word	0x20000018
 8004ff8:	20002a3c 	.word	0x20002a3c
 8004ffc:	2000263c 	.word	0x2000263c

08005000 <get_from_rx_buffer>:
char get_from_rx_buffer(USART_TypeDef* USARTx)
{
 8005000:	b480      	push	{r7}
 8005002:	b085      	sub	sp, #20
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
	char data;

	if(USARTx == RS485_UART)
 8005008:	4b14      	ldr	r3, [pc, #80]	; (800505c <get_from_rx_buffer+0x5c>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	429a      	cmp	r2, r3
 8005010:	d10c      	bne.n	800502c <get_from_rx_buffer+0x2c>
	{

		data=rx_buffer_rs485[rd_pointer_rx_rs485 & (LEN_RX_BUFFER_RS485-1)];
 8005012:	4b13      	ldr	r3, [pc, #76]	; (8005060 <get_from_rx_buffer+0x60>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800501a:	4a12      	ldr	r2, [pc, #72]	; (8005064 <get_from_rx_buffer+0x64>)
 800501c:	5cd3      	ldrb	r3, [r2, r3]
 800501e:	73fb      	strb	r3, [r7, #15]
		rd_pointer_rx_rs485++;
 8005020:	4b0f      	ldr	r3, [pc, #60]	; (8005060 <get_from_rx_buffer+0x60>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	3301      	adds	r3, #1
 8005026:	4a0e      	ldr	r2, [pc, #56]	; (8005060 <get_from_rx_buffer+0x60>)
 8005028:	6013      	str	r3, [r2, #0]
 800502a:	e010      	b.n	800504e <get_from_rx_buffer+0x4e>
	}
	else if(USARTx == DBG_UART)
 800502c:	4b0e      	ldr	r3, [pc, #56]	; (8005068 <get_from_rx_buffer+0x68>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	429a      	cmp	r2, r3
 8005034:	d10b      	bne.n	800504e <get_from_rx_buffer+0x4e>
	{

		data=rx_buffer_dbg[rd_pointer_rx_dbg & (LEN_RX_BUFFER_DBG-1)];
 8005036:	4b0d      	ldr	r3, [pc, #52]	; (800506c <get_from_rx_buffer+0x6c>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800503e:	4a0c      	ldr	r2, [pc, #48]	; (8005070 <get_from_rx_buffer+0x70>)
 8005040:	5cd3      	ldrb	r3, [r2, r3]
 8005042:	73fb      	strb	r3, [r7, #15]
		rd_pointer_rx_dbg++;
 8005044:	4b09      	ldr	r3, [pc, #36]	; (800506c <get_from_rx_buffer+0x6c>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	3301      	adds	r3, #1
 800504a:	4a08      	ldr	r2, [pc, #32]	; (800506c <get_from_rx_buffer+0x6c>)
 800504c:	6013      	str	r3, [r2, #0]
	}
	return data;
 800504e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005050:	4618      	mov	r0, r3
 8005052:	3714      	adds	r7, #20
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr
 800505c:	20000014 	.word	0x20000014
 8005060:	20002e44 	.word	0x20002e44
 8005064:	20002a44 	.word	0x20002a44
 8005068:	20000018 	.word	0x20000018
 800506c:	20004e4c 	.word	0x20004e4c
 8005070:	20002e4c 	.word	0x20002e4c

08005074 <usart_message_ready>:

	return 0;
}
//**************************************************************************************
char usart_message_ready(USART_TypeDef* USARTx, char delimiter)
{
 8005074:	b480      	push	{r7}
 8005076:	b085      	sub	sp, #20
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	460b      	mov	r3, r1
 800507e:	70fb      	strb	r3, [r7, #3]
	if (USARTx == DBG_UART)
 8005080:	4b1f      	ldr	r3, [pc, #124]	; (8005100 <usart_message_ready+0x8c>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	429a      	cmp	r2, r3
 8005088:	d117      	bne.n	80050ba <usart_message_ready+0x46>
	{
		unsigned long tail = rd_pointer_rx_dbg;
 800508a:	4b1e      	ldr	r3, [pc, #120]	; (8005104 <usart_message_ready+0x90>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	60fb      	str	r3, [r7, #12]

		while ((wr_pointer_rx_dbg - tail) != 0)
 8005090:	e00d      	b.n	80050ae <usart_message_ready+0x3a>
		{
			if (rx_buffer_dbg[tail & (LEN_RX_BUFFER_DBG - 1)] == delimiter)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005098:	4a1b      	ldr	r2, [pc, #108]	; (8005108 <usart_message_ready+0x94>)
 800509a:	5cd3      	ldrb	r3, [r2, r3]
 800509c:	b2db      	uxtb	r3, r3
 800509e:	78fa      	ldrb	r2, [r7, #3]
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d101      	bne.n	80050a8 <usart_message_ready+0x34>
				return 1;
 80050a4:	2301      	movs	r3, #1
 80050a6:	e025      	b.n	80050f4 <usart_message_ready+0x80>
			++tail;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	3301      	adds	r3, #1
 80050ac:	60fb      	str	r3, [r7, #12]
		while ((wr_pointer_rx_dbg - tail) != 0)
 80050ae:	4b17      	ldr	r3, [pc, #92]	; (800510c <usart_message_ready+0x98>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	68fa      	ldr	r2, [r7, #12]
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d1ec      	bne.n	8005092 <usart_message_ready+0x1e>
 80050b8:	e01b      	b.n	80050f2 <usart_message_ready+0x7e>
		}
	}
	else if (USARTx == RS485_UART)
 80050ba:	4b15      	ldr	r3, [pc, #84]	; (8005110 <usart_message_ready+0x9c>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d116      	bne.n	80050f2 <usart_message_ready+0x7e>
	{
		unsigned long tail = rd_pointer_rx_rs485;
 80050c4:	4b13      	ldr	r3, [pc, #76]	; (8005114 <usart_message_ready+0xa0>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	60bb      	str	r3, [r7, #8]

		while ((wr_pointer_rx_rs485 - tail) != 0)
 80050ca:	e00d      	b.n	80050e8 <usart_message_ready+0x74>
		{
			if (rx_buffer_rs485[tail & (LEN_RX_BUFFER_RS485 - 1)] == delimiter)
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050d2:	4a11      	ldr	r2, [pc, #68]	; (8005118 <usart_message_ready+0xa4>)
 80050d4:	5cd3      	ldrb	r3, [r2, r3]
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	78fa      	ldrb	r2, [r7, #3]
 80050da:	429a      	cmp	r2, r3
 80050dc:	d101      	bne.n	80050e2 <usart_message_ready+0x6e>
				return 1;
 80050de:	2301      	movs	r3, #1
 80050e0:	e008      	b.n	80050f4 <usart_message_ready+0x80>
			++tail;
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	3301      	adds	r3, #1
 80050e6:	60bb      	str	r3, [r7, #8]
		while ((wr_pointer_rx_rs485 - tail) != 0)
 80050e8:	4b0c      	ldr	r3, [pc, #48]	; (800511c <usart_message_ready+0xa8>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	68ba      	ldr	r2, [r7, #8]
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d1ec      	bne.n	80050cc <usart_message_ready+0x58>
		}
	}
	return 0;
 80050f2:	2300      	movs	r3, #0
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3714      	adds	r7, #20
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr
 8005100:	20000018 	.word	0x20000018
 8005104:	20004e4c 	.word	0x20004e4c
 8005108:	20002e4c 	.word	0x20002e4c
 800510c:	20004e50 	.word	0x20004e50
 8005110:	20000014 	.word	0x20000014
 8005114:	20002e44 	.word	0x20002e44
 8005118:	20002a44 	.word	0x20002a44
 800511c:	20002e48 	.word	0x20002e48

08005120 <read_usart_message>:
/*
 * Reads message from specified uart rx buffer into @dst until @delimiter character is encountered or @max_len exceeded.
 * Returns: number of characters read if successful, zero when there is no message ready to be read.
 */
unsigned int read_usart_message(char* dst, UART_HandleTypeDef* huart, int max_len, char delimiter)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b086      	sub	sp, #24
 8005124:	af00      	add	r7, sp, #0
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	607a      	str	r2, [r7, #4]
 800512c:	70fb      	strb	r3, [r7, #3]
	USART_TypeDef* USARTx = huart->Instance;
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	613b      	str	r3, [r7, #16]
	if (usart_message_ready(USARTx,delimiter))
 8005134:	78fb      	ldrb	r3, [r7, #3]
 8005136:	4619      	mov	r1, r3
 8005138:	6938      	ldr	r0, [r7, #16]
 800513a:	f7ff ff9b 	bl	8005074 <usart_message_ready>
 800513e:	4603      	mov	r3, r0
 8005140:	2b00      	cmp	r3, #0
 8005142:	d018      	beq.n	8005176 <read_usart_message+0x56>
	{
		int nr = 0;
 8005144:	2300      	movs	r3, #0
 8005146:	617b      	str	r3, [r7, #20]
		do
		{
			*dst = get_from_rx_buffer(USARTx);
 8005148:	6938      	ldr	r0, [r7, #16]
 800514a:	f7ff ff59 	bl	8005000 <get_from_rx_buffer>
 800514e:	4603      	mov	r3, r0
 8005150:	461a      	mov	r2, r3
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	701a      	strb	r2, [r3, #0]
			++nr;
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	3301      	adds	r3, #1
 800515a:	617b      	str	r3, [r7, #20]
		} while (*dst++ != delimiter && nr < max_len);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	1c5a      	adds	r2, r3, #1
 8005160:	60fa      	str	r2, [r7, #12]
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	78fa      	ldrb	r2, [r7, #3]
 8005166:	429a      	cmp	r2, r3
 8005168:	d003      	beq.n	8005172 <read_usart_message+0x52>
 800516a:	697a      	ldr	r2, [r7, #20]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	429a      	cmp	r2, r3
 8005170:	dbea      	blt.n	8005148 <read_usart_message+0x28>

		return nr;
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	e000      	b.n	8005178 <read_usart_message+0x58>
	}
	return 0;
 8005176:	2300      	movs	r3, #0
}
 8005178:	4618      	mov	r0, r3
 800517a:	3718      	adds	r7, #24
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}

08005180 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005180:	f8df d034 	ldr.w	sp, [pc, #52]	; 80051b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005184:	480d      	ldr	r0, [pc, #52]	; (80051bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005186:	490e      	ldr	r1, [pc, #56]	; (80051c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005188:	4a0e      	ldr	r2, [pc, #56]	; (80051c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800518a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800518c:	e002      	b.n	8005194 <LoopCopyDataInit>

0800518e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800518e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005190:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005192:	3304      	adds	r3, #4

08005194 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005194:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005196:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005198:	d3f9      	bcc.n	800518e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800519a:	4a0b      	ldr	r2, [pc, #44]	; (80051c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800519c:	4c0b      	ldr	r4, [pc, #44]	; (80051cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800519e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80051a0:	e001      	b.n	80051a6 <LoopFillZerobss>

080051a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80051a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80051a4:	3204      	adds	r2, #4

080051a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80051a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80051a8:	d3fb      	bcc.n	80051a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80051aa:	f7ff fe79 	bl	8004ea0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80051ae:	f004 f943 	bl	8009438 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80051b2:	f7fe fb5b 	bl	800386c <main>
  bx  lr    
 80051b6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80051b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80051bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80051c0:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80051c4:	0800b61c 	.word	0x0800b61c
  ldr r2, =_sbss
 80051c8:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80051cc:	20004e68 	.word	0x20004e68

080051d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80051d0:	e7fe      	b.n	80051d0 <ADC_IRQHandler>
	...

080051d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80051d8:	4b0e      	ldr	r3, [pc, #56]	; (8005214 <HAL_Init+0x40>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a0d      	ldr	r2, [pc, #52]	; (8005214 <HAL_Init+0x40>)
 80051de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80051e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80051e4:	4b0b      	ldr	r3, [pc, #44]	; (8005214 <HAL_Init+0x40>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a0a      	ldr	r2, [pc, #40]	; (8005214 <HAL_Init+0x40>)
 80051ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80051ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80051f0:	4b08      	ldr	r3, [pc, #32]	; (8005214 <HAL_Init+0x40>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a07      	ldr	r2, [pc, #28]	; (8005214 <HAL_Init+0x40>)
 80051f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80051fc:	2003      	movs	r0, #3
 80051fe:	f000 f94f 	bl	80054a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005202:	2000      	movs	r0, #0
 8005204:	f000 f808 	bl	8005218 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005208:	f7ff fae0 	bl	80047cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800520c:	2300      	movs	r3, #0
}
 800520e:	4618      	mov	r0, r3
 8005210:	bd80      	pop	{r7, pc}
 8005212:	bf00      	nop
 8005214:	40023c00 	.word	0x40023c00

08005218 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b082      	sub	sp, #8
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005220:	4b12      	ldr	r3, [pc, #72]	; (800526c <HAL_InitTick+0x54>)
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	4b12      	ldr	r3, [pc, #72]	; (8005270 <HAL_InitTick+0x58>)
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	4619      	mov	r1, r3
 800522a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800522e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005232:	fbb2 f3f3 	udiv	r3, r2, r3
 8005236:	4618      	mov	r0, r3
 8005238:	f000 f967 	bl	800550a <HAL_SYSTICK_Config>
 800523c:	4603      	mov	r3, r0
 800523e:	2b00      	cmp	r3, #0
 8005240:	d001      	beq.n	8005246 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e00e      	b.n	8005264 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2b0f      	cmp	r3, #15
 800524a:	d80a      	bhi.n	8005262 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800524c:	2200      	movs	r2, #0
 800524e:	6879      	ldr	r1, [r7, #4]
 8005250:	f04f 30ff 	mov.w	r0, #4294967295
 8005254:	f000 f92f 	bl	80054b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005258:	4a06      	ldr	r2, [pc, #24]	; (8005274 <HAL_InitTick+0x5c>)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800525e:	2300      	movs	r3, #0
 8005260:	e000      	b.n	8005264 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
}
 8005264:	4618      	mov	r0, r3
 8005266:	3708      	adds	r7, #8
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}
 800526c:	20000010 	.word	0x20000010
 8005270:	20000020 	.word	0x20000020
 8005274:	2000001c 	.word	0x2000001c

08005278 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005278:	b480      	push	{r7}
 800527a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800527c:	4b06      	ldr	r3, [pc, #24]	; (8005298 <HAL_IncTick+0x20>)
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	461a      	mov	r2, r3
 8005282:	4b06      	ldr	r3, [pc, #24]	; (800529c <HAL_IncTick+0x24>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4413      	add	r3, r2
 8005288:	4a04      	ldr	r2, [pc, #16]	; (800529c <HAL_IncTick+0x24>)
 800528a:	6013      	str	r3, [r2, #0]
}
 800528c:	bf00      	nop
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr
 8005296:	bf00      	nop
 8005298:	20000020 	.word	0x20000020
 800529c:	20004e54 	.word	0x20004e54

080052a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80052a0:	b480      	push	{r7}
 80052a2:	af00      	add	r7, sp, #0
  return uwTick;
 80052a4:	4b03      	ldr	r3, [pc, #12]	; (80052b4 <HAL_GetTick+0x14>)
 80052a6:	681b      	ldr	r3, [r3, #0]
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr
 80052b2:	bf00      	nop
 80052b4:	20004e54 	.word	0x20004e54

080052b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b084      	sub	sp, #16
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80052c0:	f7ff ffee 	bl	80052a0 <HAL_GetTick>
 80052c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052d0:	d005      	beq.n	80052de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80052d2:	4b0a      	ldr	r3, [pc, #40]	; (80052fc <HAL_Delay+0x44>)
 80052d4:	781b      	ldrb	r3, [r3, #0]
 80052d6:	461a      	mov	r2, r3
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	4413      	add	r3, r2
 80052dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80052de:	bf00      	nop
 80052e0:	f7ff ffde 	bl	80052a0 <HAL_GetTick>
 80052e4:	4602      	mov	r2, r0
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	68fa      	ldr	r2, [r7, #12]
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d8f7      	bhi.n	80052e0 <HAL_Delay+0x28>
  {
  }
}
 80052f0:	bf00      	nop
 80052f2:	bf00      	nop
 80052f4:	3710      	adds	r7, #16
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	20000020 	.word	0x20000020

08005300 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005300:	b480      	push	{r7}
 8005302:	b085      	sub	sp, #20
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f003 0307 	and.w	r3, r3, #7
 800530e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005310:	4b0c      	ldr	r3, [pc, #48]	; (8005344 <__NVIC_SetPriorityGrouping+0x44>)
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005316:	68ba      	ldr	r2, [r7, #8]
 8005318:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800531c:	4013      	ands	r3, r2
 800531e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005328:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800532c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005330:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005332:	4a04      	ldr	r2, [pc, #16]	; (8005344 <__NVIC_SetPriorityGrouping+0x44>)
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	60d3      	str	r3, [r2, #12]
}
 8005338:	bf00      	nop
 800533a:	3714      	adds	r7, #20
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr
 8005344:	e000ed00 	.word	0xe000ed00

08005348 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005348:	b480      	push	{r7}
 800534a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800534c:	4b04      	ldr	r3, [pc, #16]	; (8005360 <__NVIC_GetPriorityGrouping+0x18>)
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	0a1b      	lsrs	r3, r3, #8
 8005352:	f003 0307 	and.w	r3, r3, #7
}
 8005356:	4618      	mov	r0, r3
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr
 8005360:	e000ed00 	.word	0xe000ed00

08005364 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005364:	b480      	push	{r7}
 8005366:	b083      	sub	sp, #12
 8005368:	af00      	add	r7, sp, #0
 800536a:	4603      	mov	r3, r0
 800536c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800536e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005372:	2b00      	cmp	r3, #0
 8005374:	db0b      	blt.n	800538e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005376:	79fb      	ldrb	r3, [r7, #7]
 8005378:	f003 021f 	and.w	r2, r3, #31
 800537c:	4907      	ldr	r1, [pc, #28]	; (800539c <__NVIC_EnableIRQ+0x38>)
 800537e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005382:	095b      	lsrs	r3, r3, #5
 8005384:	2001      	movs	r0, #1
 8005386:	fa00 f202 	lsl.w	r2, r0, r2
 800538a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800538e:	bf00      	nop
 8005390:	370c      	adds	r7, #12
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr
 800539a:	bf00      	nop
 800539c:	e000e100 	.word	0xe000e100

080053a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b083      	sub	sp, #12
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	4603      	mov	r3, r0
 80053a8:	6039      	str	r1, [r7, #0]
 80053aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	db0a      	blt.n	80053ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	b2da      	uxtb	r2, r3
 80053b8:	490c      	ldr	r1, [pc, #48]	; (80053ec <__NVIC_SetPriority+0x4c>)
 80053ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053be:	0112      	lsls	r2, r2, #4
 80053c0:	b2d2      	uxtb	r2, r2
 80053c2:	440b      	add	r3, r1
 80053c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80053c8:	e00a      	b.n	80053e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	b2da      	uxtb	r2, r3
 80053ce:	4908      	ldr	r1, [pc, #32]	; (80053f0 <__NVIC_SetPriority+0x50>)
 80053d0:	79fb      	ldrb	r3, [r7, #7]
 80053d2:	f003 030f 	and.w	r3, r3, #15
 80053d6:	3b04      	subs	r3, #4
 80053d8:	0112      	lsls	r2, r2, #4
 80053da:	b2d2      	uxtb	r2, r2
 80053dc:	440b      	add	r3, r1
 80053de:	761a      	strb	r2, [r3, #24]
}
 80053e0:	bf00      	nop
 80053e2:	370c      	adds	r7, #12
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr
 80053ec:	e000e100 	.word	0xe000e100
 80053f0:	e000ed00 	.word	0xe000ed00

080053f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b089      	sub	sp, #36	; 0x24
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	60f8      	str	r0, [r7, #12]
 80053fc:	60b9      	str	r1, [r7, #8]
 80053fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f003 0307 	and.w	r3, r3, #7
 8005406:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005408:	69fb      	ldr	r3, [r7, #28]
 800540a:	f1c3 0307 	rsb	r3, r3, #7
 800540e:	2b04      	cmp	r3, #4
 8005410:	bf28      	it	cs
 8005412:	2304      	movcs	r3, #4
 8005414:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	3304      	adds	r3, #4
 800541a:	2b06      	cmp	r3, #6
 800541c:	d902      	bls.n	8005424 <NVIC_EncodePriority+0x30>
 800541e:	69fb      	ldr	r3, [r7, #28]
 8005420:	3b03      	subs	r3, #3
 8005422:	e000      	b.n	8005426 <NVIC_EncodePriority+0x32>
 8005424:	2300      	movs	r3, #0
 8005426:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005428:	f04f 32ff 	mov.w	r2, #4294967295
 800542c:	69bb      	ldr	r3, [r7, #24]
 800542e:	fa02 f303 	lsl.w	r3, r2, r3
 8005432:	43da      	mvns	r2, r3
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	401a      	ands	r2, r3
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800543c:	f04f 31ff 	mov.w	r1, #4294967295
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	fa01 f303 	lsl.w	r3, r1, r3
 8005446:	43d9      	mvns	r1, r3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800544c:	4313      	orrs	r3, r2
         );
}
 800544e:	4618      	mov	r0, r3
 8005450:	3724      	adds	r7, #36	; 0x24
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr
	...

0800545c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b082      	sub	sp, #8
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	3b01      	subs	r3, #1
 8005468:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800546c:	d301      	bcc.n	8005472 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800546e:	2301      	movs	r3, #1
 8005470:	e00f      	b.n	8005492 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005472:	4a0a      	ldr	r2, [pc, #40]	; (800549c <SysTick_Config+0x40>)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	3b01      	subs	r3, #1
 8005478:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800547a:	210f      	movs	r1, #15
 800547c:	f04f 30ff 	mov.w	r0, #4294967295
 8005480:	f7ff ff8e 	bl	80053a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005484:	4b05      	ldr	r3, [pc, #20]	; (800549c <SysTick_Config+0x40>)
 8005486:	2200      	movs	r2, #0
 8005488:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800548a:	4b04      	ldr	r3, [pc, #16]	; (800549c <SysTick_Config+0x40>)
 800548c:	2207      	movs	r2, #7
 800548e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005490:	2300      	movs	r3, #0
}
 8005492:	4618      	mov	r0, r3
 8005494:	3708      	adds	r7, #8
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
 800549a:	bf00      	nop
 800549c:	e000e010 	.word	0xe000e010

080054a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b082      	sub	sp, #8
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f7ff ff29 	bl	8005300 <__NVIC_SetPriorityGrouping>
}
 80054ae:	bf00      	nop
 80054b0:	3708      	adds	r7, #8
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}

080054b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80054b6:	b580      	push	{r7, lr}
 80054b8:	b086      	sub	sp, #24
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	4603      	mov	r3, r0
 80054be:	60b9      	str	r1, [r7, #8]
 80054c0:	607a      	str	r2, [r7, #4]
 80054c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80054c4:	2300      	movs	r3, #0
 80054c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80054c8:	f7ff ff3e 	bl	8005348 <__NVIC_GetPriorityGrouping>
 80054cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	68b9      	ldr	r1, [r7, #8]
 80054d2:	6978      	ldr	r0, [r7, #20]
 80054d4:	f7ff ff8e 	bl	80053f4 <NVIC_EncodePriority>
 80054d8:	4602      	mov	r2, r0
 80054da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054de:	4611      	mov	r1, r2
 80054e0:	4618      	mov	r0, r3
 80054e2:	f7ff ff5d 	bl	80053a0 <__NVIC_SetPriority>
}
 80054e6:	bf00      	nop
 80054e8:	3718      	adds	r7, #24
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}

080054ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80054ee:	b580      	push	{r7, lr}
 80054f0:	b082      	sub	sp, #8
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	4603      	mov	r3, r0
 80054f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80054f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054fc:	4618      	mov	r0, r3
 80054fe:	f7ff ff31 	bl	8005364 <__NVIC_EnableIRQ>
}
 8005502:	bf00      	nop
 8005504:	3708      	adds	r7, #8
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}

0800550a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800550a:	b580      	push	{r7, lr}
 800550c:	b082      	sub	sp, #8
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f7ff ffa2 	bl	800545c <SysTick_Config>
 8005518:	4603      	mov	r3, r0
}
 800551a:	4618      	mov	r0, r3
 800551c:	3708      	adds	r7, #8
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}

08005522 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005522:	b580      	push	{r7, lr}
 8005524:	b084      	sub	sp, #16
 8005526:	af00      	add	r7, sp, #0
 8005528:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800552e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005530:	f7ff feb6 	bl	80052a0 <HAL_GetTick>
 8005534:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800553c:	b2db      	uxtb	r3, r3
 800553e:	2b02      	cmp	r3, #2
 8005540:	d008      	beq.n	8005554 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2280      	movs	r2, #128	; 0x80
 8005546:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	e052      	b.n	80055fa <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f022 0216 	bic.w	r2, r2, #22
 8005562:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	695a      	ldr	r2, [r3, #20]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005572:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005578:	2b00      	cmp	r3, #0
 800557a:	d103      	bne.n	8005584 <HAL_DMA_Abort+0x62>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005580:	2b00      	cmp	r3, #0
 8005582:	d007      	beq.n	8005594 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f022 0208 	bic.w	r2, r2, #8
 8005592:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f022 0201 	bic.w	r2, r2, #1
 80055a2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80055a4:	e013      	b.n	80055ce <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80055a6:	f7ff fe7b 	bl	80052a0 <HAL_GetTick>
 80055aa:	4602      	mov	r2, r0
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	1ad3      	subs	r3, r2, r3
 80055b0:	2b05      	cmp	r3, #5
 80055b2:	d90c      	bls.n	80055ce <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2220      	movs	r2, #32
 80055b8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2203      	movs	r2, #3
 80055be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80055ca:	2303      	movs	r3, #3
 80055cc:	e015      	b.n	80055fa <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 0301 	and.w	r3, r3, #1
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d1e4      	bne.n	80055a6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055e0:	223f      	movs	r2, #63	; 0x3f
 80055e2:	409a      	lsls	r2, r3
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80055f8:	2300      	movs	r3, #0
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3710      	adds	r7, #16
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}

08005602 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005602:	b480      	push	{r7}
 8005604:	b083      	sub	sp, #12
 8005606:	af00      	add	r7, sp, #0
 8005608:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005610:	b2db      	uxtb	r3, r3
 8005612:	2b02      	cmp	r3, #2
 8005614:	d004      	beq.n	8005620 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2280      	movs	r2, #128	; 0x80
 800561a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	e00c      	b.n	800563a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2205      	movs	r2, #5
 8005624:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f022 0201 	bic.w	r2, r2, #1
 8005636:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005638:	2300      	movs	r3, #0
}
 800563a:	4618      	mov	r0, r3
 800563c:	370c      	adds	r7, #12
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr
	...

08005648 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005648:	b480      	push	{r7}
 800564a:	b089      	sub	sp, #36	; 0x24
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005652:	2300      	movs	r3, #0
 8005654:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005656:	2300      	movs	r3, #0
 8005658:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800565a:	2300      	movs	r3, #0
 800565c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800565e:	2300      	movs	r3, #0
 8005660:	61fb      	str	r3, [r7, #28]
 8005662:	e16b      	b.n	800593c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005664:	2201      	movs	r2, #1
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	fa02 f303 	lsl.w	r3, r2, r3
 800566c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	697a      	ldr	r2, [r7, #20]
 8005674:	4013      	ands	r3, r2
 8005676:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005678:	693a      	ldr	r2, [r7, #16]
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	429a      	cmp	r2, r3
 800567e:	f040 815a 	bne.w	8005936 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	f003 0303 	and.w	r3, r3, #3
 800568a:	2b01      	cmp	r3, #1
 800568c:	d005      	beq.n	800569a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005696:	2b02      	cmp	r3, #2
 8005698:	d130      	bne.n	80056fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80056a0:	69fb      	ldr	r3, [r7, #28]
 80056a2:	005b      	lsls	r3, r3, #1
 80056a4:	2203      	movs	r2, #3
 80056a6:	fa02 f303 	lsl.w	r3, r2, r3
 80056aa:	43db      	mvns	r3, r3
 80056ac:	69ba      	ldr	r2, [r7, #24]
 80056ae:	4013      	ands	r3, r2
 80056b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	68da      	ldr	r2, [r3, #12]
 80056b6:	69fb      	ldr	r3, [r7, #28]
 80056b8:	005b      	lsls	r3, r3, #1
 80056ba:	fa02 f303 	lsl.w	r3, r2, r3
 80056be:	69ba      	ldr	r2, [r7, #24]
 80056c0:	4313      	orrs	r3, r2
 80056c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	69ba      	ldr	r2, [r7, #24]
 80056c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80056d0:	2201      	movs	r2, #1
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	fa02 f303 	lsl.w	r3, r2, r3
 80056d8:	43db      	mvns	r3, r3
 80056da:	69ba      	ldr	r2, [r7, #24]
 80056dc:	4013      	ands	r3, r2
 80056de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	091b      	lsrs	r3, r3, #4
 80056e6:	f003 0201 	and.w	r2, r3, #1
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	fa02 f303 	lsl.w	r3, r2, r3
 80056f0:	69ba      	ldr	r2, [r7, #24]
 80056f2:	4313      	orrs	r3, r2
 80056f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	69ba      	ldr	r2, [r7, #24]
 80056fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	f003 0303 	and.w	r3, r3, #3
 8005704:	2b03      	cmp	r3, #3
 8005706:	d017      	beq.n	8005738 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800570e:	69fb      	ldr	r3, [r7, #28]
 8005710:	005b      	lsls	r3, r3, #1
 8005712:	2203      	movs	r2, #3
 8005714:	fa02 f303 	lsl.w	r3, r2, r3
 8005718:	43db      	mvns	r3, r3
 800571a:	69ba      	ldr	r2, [r7, #24]
 800571c:	4013      	ands	r3, r2
 800571e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	689a      	ldr	r2, [r3, #8]
 8005724:	69fb      	ldr	r3, [r7, #28]
 8005726:	005b      	lsls	r3, r3, #1
 8005728:	fa02 f303 	lsl.w	r3, r2, r3
 800572c:	69ba      	ldr	r2, [r7, #24]
 800572e:	4313      	orrs	r3, r2
 8005730:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	69ba      	ldr	r2, [r7, #24]
 8005736:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	f003 0303 	and.w	r3, r3, #3
 8005740:	2b02      	cmp	r3, #2
 8005742:	d123      	bne.n	800578c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005744:	69fb      	ldr	r3, [r7, #28]
 8005746:	08da      	lsrs	r2, r3, #3
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	3208      	adds	r2, #8
 800574c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005750:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005752:	69fb      	ldr	r3, [r7, #28]
 8005754:	f003 0307 	and.w	r3, r3, #7
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	220f      	movs	r2, #15
 800575c:	fa02 f303 	lsl.w	r3, r2, r3
 8005760:	43db      	mvns	r3, r3
 8005762:	69ba      	ldr	r2, [r7, #24]
 8005764:	4013      	ands	r3, r2
 8005766:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	691a      	ldr	r2, [r3, #16]
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	f003 0307 	and.w	r3, r3, #7
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	fa02 f303 	lsl.w	r3, r2, r3
 8005778:	69ba      	ldr	r2, [r7, #24]
 800577a:	4313      	orrs	r3, r2
 800577c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800577e:	69fb      	ldr	r3, [r7, #28]
 8005780:	08da      	lsrs	r2, r3, #3
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	3208      	adds	r2, #8
 8005786:	69b9      	ldr	r1, [r7, #24]
 8005788:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005792:	69fb      	ldr	r3, [r7, #28]
 8005794:	005b      	lsls	r3, r3, #1
 8005796:	2203      	movs	r2, #3
 8005798:	fa02 f303 	lsl.w	r3, r2, r3
 800579c:	43db      	mvns	r3, r3
 800579e:	69ba      	ldr	r2, [r7, #24]
 80057a0:	4013      	ands	r3, r2
 80057a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	f003 0203 	and.w	r2, r3, #3
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	005b      	lsls	r3, r3, #1
 80057b0:	fa02 f303 	lsl.w	r3, r2, r3
 80057b4:	69ba      	ldr	r2, [r7, #24]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	69ba      	ldr	r2, [r7, #24]
 80057be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	f000 80b4 	beq.w	8005936 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057ce:	2300      	movs	r3, #0
 80057d0:	60fb      	str	r3, [r7, #12]
 80057d2:	4b60      	ldr	r3, [pc, #384]	; (8005954 <HAL_GPIO_Init+0x30c>)
 80057d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057d6:	4a5f      	ldr	r2, [pc, #380]	; (8005954 <HAL_GPIO_Init+0x30c>)
 80057d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80057dc:	6453      	str	r3, [r2, #68]	; 0x44
 80057de:	4b5d      	ldr	r3, [pc, #372]	; (8005954 <HAL_GPIO_Init+0x30c>)
 80057e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057e6:	60fb      	str	r3, [r7, #12]
 80057e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80057ea:	4a5b      	ldr	r2, [pc, #364]	; (8005958 <HAL_GPIO_Init+0x310>)
 80057ec:	69fb      	ldr	r3, [r7, #28]
 80057ee:	089b      	lsrs	r3, r3, #2
 80057f0:	3302      	adds	r3, #2
 80057f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80057f8:	69fb      	ldr	r3, [r7, #28]
 80057fa:	f003 0303 	and.w	r3, r3, #3
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	220f      	movs	r2, #15
 8005802:	fa02 f303 	lsl.w	r3, r2, r3
 8005806:	43db      	mvns	r3, r3
 8005808:	69ba      	ldr	r2, [r7, #24]
 800580a:	4013      	ands	r3, r2
 800580c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4a52      	ldr	r2, [pc, #328]	; (800595c <HAL_GPIO_Init+0x314>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d02b      	beq.n	800586e <HAL_GPIO_Init+0x226>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4a51      	ldr	r2, [pc, #324]	; (8005960 <HAL_GPIO_Init+0x318>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d025      	beq.n	800586a <HAL_GPIO_Init+0x222>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	4a50      	ldr	r2, [pc, #320]	; (8005964 <HAL_GPIO_Init+0x31c>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d01f      	beq.n	8005866 <HAL_GPIO_Init+0x21e>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4a4f      	ldr	r2, [pc, #316]	; (8005968 <HAL_GPIO_Init+0x320>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d019      	beq.n	8005862 <HAL_GPIO_Init+0x21a>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4a4e      	ldr	r2, [pc, #312]	; (800596c <HAL_GPIO_Init+0x324>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d013      	beq.n	800585e <HAL_GPIO_Init+0x216>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4a4d      	ldr	r2, [pc, #308]	; (8005970 <HAL_GPIO_Init+0x328>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d00d      	beq.n	800585a <HAL_GPIO_Init+0x212>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	4a4c      	ldr	r2, [pc, #304]	; (8005974 <HAL_GPIO_Init+0x32c>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d007      	beq.n	8005856 <HAL_GPIO_Init+0x20e>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4a4b      	ldr	r2, [pc, #300]	; (8005978 <HAL_GPIO_Init+0x330>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d101      	bne.n	8005852 <HAL_GPIO_Init+0x20a>
 800584e:	2307      	movs	r3, #7
 8005850:	e00e      	b.n	8005870 <HAL_GPIO_Init+0x228>
 8005852:	2308      	movs	r3, #8
 8005854:	e00c      	b.n	8005870 <HAL_GPIO_Init+0x228>
 8005856:	2306      	movs	r3, #6
 8005858:	e00a      	b.n	8005870 <HAL_GPIO_Init+0x228>
 800585a:	2305      	movs	r3, #5
 800585c:	e008      	b.n	8005870 <HAL_GPIO_Init+0x228>
 800585e:	2304      	movs	r3, #4
 8005860:	e006      	b.n	8005870 <HAL_GPIO_Init+0x228>
 8005862:	2303      	movs	r3, #3
 8005864:	e004      	b.n	8005870 <HAL_GPIO_Init+0x228>
 8005866:	2302      	movs	r3, #2
 8005868:	e002      	b.n	8005870 <HAL_GPIO_Init+0x228>
 800586a:	2301      	movs	r3, #1
 800586c:	e000      	b.n	8005870 <HAL_GPIO_Init+0x228>
 800586e:	2300      	movs	r3, #0
 8005870:	69fa      	ldr	r2, [r7, #28]
 8005872:	f002 0203 	and.w	r2, r2, #3
 8005876:	0092      	lsls	r2, r2, #2
 8005878:	4093      	lsls	r3, r2
 800587a:	69ba      	ldr	r2, [r7, #24]
 800587c:	4313      	orrs	r3, r2
 800587e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005880:	4935      	ldr	r1, [pc, #212]	; (8005958 <HAL_GPIO_Init+0x310>)
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	089b      	lsrs	r3, r3, #2
 8005886:	3302      	adds	r3, #2
 8005888:	69ba      	ldr	r2, [r7, #24]
 800588a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800588e:	4b3b      	ldr	r3, [pc, #236]	; (800597c <HAL_GPIO_Init+0x334>)
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	43db      	mvns	r3, r3
 8005898:	69ba      	ldr	r2, [r7, #24]
 800589a:	4013      	ands	r3, r2
 800589c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d003      	beq.n	80058b2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80058aa:	69ba      	ldr	r2, [r7, #24]
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80058b2:	4a32      	ldr	r2, [pc, #200]	; (800597c <HAL_GPIO_Init+0x334>)
 80058b4:	69bb      	ldr	r3, [r7, #24]
 80058b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80058b8:	4b30      	ldr	r3, [pc, #192]	; (800597c <HAL_GPIO_Init+0x334>)
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	43db      	mvns	r3, r3
 80058c2:	69ba      	ldr	r2, [r7, #24]
 80058c4:	4013      	ands	r3, r2
 80058c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d003      	beq.n	80058dc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80058d4:	69ba      	ldr	r2, [r7, #24]
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	4313      	orrs	r3, r2
 80058da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80058dc:	4a27      	ldr	r2, [pc, #156]	; (800597c <HAL_GPIO_Init+0x334>)
 80058de:	69bb      	ldr	r3, [r7, #24]
 80058e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80058e2:	4b26      	ldr	r3, [pc, #152]	; (800597c <HAL_GPIO_Init+0x334>)
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	43db      	mvns	r3, r3
 80058ec:	69ba      	ldr	r2, [r7, #24]
 80058ee:	4013      	ands	r3, r2
 80058f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d003      	beq.n	8005906 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80058fe:	69ba      	ldr	r2, [r7, #24]
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	4313      	orrs	r3, r2
 8005904:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005906:	4a1d      	ldr	r2, [pc, #116]	; (800597c <HAL_GPIO_Init+0x334>)
 8005908:	69bb      	ldr	r3, [r7, #24]
 800590a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800590c:	4b1b      	ldr	r3, [pc, #108]	; (800597c <HAL_GPIO_Init+0x334>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	43db      	mvns	r3, r3
 8005916:	69ba      	ldr	r2, [r7, #24]
 8005918:	4013      	ands	r3, r2
 800591a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005924:	2b00      	cmp	r3, #0
 8005926:	d003      	beq.n	8005930 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005928:	69ba      	ldr	r2, [r7, #24]
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	4313      	orrs	r3, r2
 800592e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005930:	4a12      	ldr	r2, [pc, #72]	; (800597c <HAL_GPIO_Init+0x334>)
 8005932:	69bb      	ldr	r3, [r7, #24]
 8005934:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005936:	69fb      	ldr	r3, [r7, #28]
 8005938:	3301      	adds	r3, #1
 800593a:	61fb      	str	r3, [r7, #28]
 800593c:	69fb      	ldr	r3, [r7, #28]
 800593e:	2b0f      	cmp	r3, #15
 8005940:	f67f ae90 	bls.w	8005664 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005944:	bf00      	nop
 8005946:	bf00      	nop
 8005948:	3724      	adds	r7, #36	; 0x24
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr
 8005952:	bf00      	nop
 8005954:	40023800 	.word	0x40023800
 8005958:	40013800 	.word	0x40013800
 800595c:	40020000 	.word	0x40020000
 8005960:	40020400 	.word	0x40020400
 8005964:	40020800 	.word	0x40020800
 8005968:	40020c00 	.word	0x40020c00
 800596c:	40021000 	.word	0x40021000
 8005970:	40021400 	.word	0x40021400
 8005974:	40021800 	.word	0x40021800
 8005978:	40021c00 	.word	0x40021c00
 800597c:	40013c00 	.word	0x40013c00

08005980 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	460b      	mov	r3, r1
 800598a:	807b      	strh	r3, [r7, #2]
 800598c:	4613      	mov	r3, r2
 800598e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005990:	787b      	ldrb	r3, [r7, #1]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d003      	beq.n	800599e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005996:	887a      	ldrh	r2, [r7, #2]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800599c:	e003      	b.n	80059a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800599e:	887b      	ldrh	r3, [r7, #2]
 80059a0:	041a      	lsls	r2, r3, #16
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	619a      	str	r2, [r3, #24]
}
 80059a6:	bf00      	nop
 80059a8:	370c      	adds	r7, #12
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr
	...

080059b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b082      	sub	sp, #8
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	4603      	mov	r3, r0
 80059bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80059be:	4b08      	ldr	r3, [pc, #32]	; (80059e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80059c0:	695a      	ldr	r2, [r3, #20]
 80059c2:	88fb      	ldrh	r3, [r7, #6]
 80059c4:	4013      	ands	r3, r2
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d006      	beq.n	80059d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80059ca:	4a05      	ldr	r2, [pc, #20]	; (80059e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80059cc:	88fb      	ldrh	r3, [r7, #6]
 80059ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80059d0:	88fb      	ldrh	r3, [r7, #6]
 80059d2:	4618      	mov	r0, r3
 80059d4:	f7fb ff8e 	bl	80018f4 <HAL_GPIO_EXTI_Callback>
  }
}
 80059d8:	bf00      	nop
 80059da:	3708      	adds	r7, #8
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}
 80059e0:	40013c00 	.word	0x40013c00

080059e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b084      	sub	sp, #16
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d101      	bne.n	80059f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e12b      	b.n	8005c4e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d106      	bne.n	8005a10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2200      	movs	r2, #0
 8005a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f7fe ff06 	bl	800481c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2224      	movs	r2, #36	; 0x24
 8005a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f022 0201 	bic.w	r2, r2, #1
 8005a26:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a36:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005a46:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005a48:	f001 fd7a 	bl	8007540 <HAL_RCC_GetPCLK1Freq>
 8005a4c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	4a81      	ldr	r2, [pc, #516]	; (8005c58 <HAL_I2C_Init+0x274>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d807      	bhi.n	8005a68 <HAL_I2C_Init+0x84>
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	4a80      	ldr	r2, [pc, #512]	; (8005c5c <HAL_I2C_Init+0x278>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	bf94      	ite	ls
 8005a60:	2301      	movls	r3, #1
 8005a62:	2300      	movhi	r3, #0
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	e006      	b.n	8005a76 <HAL_I2C_Init+0x92>
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	4a7d      	ldr	r2, [pc, #500]	; (8005c60 <HAL_I2C_Init+0x27c>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	bf94      	ite	ls
 8005a70:	2301      	movls	r3, #1
 8005a72:	2300      	movhi	r3, #0
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d001      	beq.n	8005a7e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e0e7      	b.n	8005c4e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	4a78      	ldr	r2, [pc, #480]	; (8005c64 <HAL_I2C_Init+0x280>)
 8005a82:	fba2 2303 	umull	r2, r3, r2, r3
 8005a86:	0c9b      	lsrs	r3, r3, #18
 8005a88:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	68ba      	ldr	r2, [r7, #8]
 8005a9a:	430a      	orrs	r2, r1
 8005a9c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	6a1b      	ldr	r3, [r3, #32]
 8005aa4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	4a6a      	ldr	r2, [pc, #424]	; (8005c58 <HAL_I2C_Init+0x274>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d802      	bhi.n	8005ab8 <HAL_I2C_Init+0xd4>
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	3301      	adds	r3, #1
 8005ab6:	e009      	b.n	8005acc <HAL_I2C_Init+0xe8>
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005abe:	fb02 f303 	mul.w	r3, r2, r3
 8005ac2:	4a69      	ldr	r2, [pc, #420]	; (8005c68 <HAL_I2C_Init+0x284>)
 8005ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ac8:	099b      	lsrs	r3, r3, #6
 8005aca:	3301      	adds	r3, #1
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	6812      	ldr	r2, [r2, #0]
 8005ad0:	430b      	orrs	r3, r1
 8005ad2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	69db      	ldr	r3, [r3, #28]
 8005ada:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005ade:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	495c      	ldr	r1, [pc, #368]	; (8005c58 <HAL_I2C_Init+0x274>)
 8005ae8:	428b      	cmp	r3, r1
 8005aea:	d819      	bhi.n	8005b20 <HAL_I2C_Init+0x13c>
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	1e59      	subs	r1, r3, #1
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	005b      	lsls	r3, r3, #1
 8005af6:	fbb1 f3f3 	udiv	r3, r1, r3
 8005afa:	1c59      	adds	r1, r3, #1
 8005afc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005b00:	400b      	ands	r3, r1
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d00a      	beq.n	8005b1c <HAL_I2C_Init+0x138>
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	1e59      	subs	r1, r3, #1
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	005b      	lsls	r3, r3, #1
 8005b10:	fbb1 f3f3 	udiv	r3, r1, r3
 8005b14:	3301      	adds	r3, #1
 8005b16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b1a:	e051      	b.n	8005bc0 <HAL_I2C_Init+0x1dc>
 8005b1c:	2304      	movs	r3, #4
 8005b1e:	e04f      	b.n	8005bc0 <HAL_I2C_Init+0x1dc>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d111      	bne.n	8005b4c <HAL_I2C_Init+0x168>
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	1e58      	subs	r0, r3, #1
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6859      	ldr	r1, [r3, #4]
 8005b30:	460b      	mov	r3, r1
 8005b32:	005b      	lsls	r3, r3, #1
 8005b34:	440b      	add	r3, r1
 8005b36:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b3a:	3301      	adds	r3, #1
 8005b3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	bf0c      	ite	eq
 8005b44:	2301      	moveq	r3, #1
 8005b46:	2300      	movne	r3, #0
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	e012      	b.n	8005b72 <HAL_I2C_Init+0x18e>
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	1e58      	subs	r0, r3, #1
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6859      	ldr	r1, [r3, #4]
 8005b54:	460b      	mov	r3, r1
 8005b56:	009b      	lsls	r3, r3, #2
 8005b58:	440b      	add	r3, r1
 8005b5a:	0099      	lsls	r1, r3, #2
 8005b5c:	440b      	add	r3, r1
 8005b5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b62:	3301      	adds	r3, #1
 8005b64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	bf0c      	ite	eq
 8005b6c:	2301      	moveq	r3, #1
 8005b6e:	2300      	movne	r3, #0
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d001      	beq.n	8005b7a <HAL_I2C_Init+0x196>
 8005b76:	2301      	movs	r3, #1
 8005b78:	e022      	b.n	8005bc0 <HAL_I2C_Init+0x1dc>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d10e      	bne.n	8005ba0 <HAL_I2C_Init+0x1bc>
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	1e58      	subs	r0, r3, #1
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6859      	ldr	r1, [r3, #4]
 8005b8a:	460b      	mov	r3, r1
 8005b8c:	005b      	lsls	r3, r3, #1
 8005b8e:	440b      	add	r3, r1
 8005b90:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b94:	3301      	adds	r3, #1
 8005b96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b9e:	e00f      	b.n	8005bc0 <HAL_I2C_Init+0x1dc>
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	1e58      	subs	r0, r3, #1
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6859      	ldr	r1, [r3, #4]
 8005ba8:	460b      	mov	r3, r1
 8005baa:	009b      	lsls	r3, r3, #2
 8005bac:	440b      	add	r3, r1
 8005bae:	0099      	lsls	r1, r3, #2
 8005bb0:	440b      	add	r3, r1
 8005bb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8005bb6:	3301      	adds	r3, #1
 8005bb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bbc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005bc0:	6879      	ldr	r1, [r7, #4]
 8005bc2:	6809      	ldr	r1, [r1, #0]
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	69da      	ldr	r2, [r3, #28]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6a1b      	ldr	r3, [r3, #32]
 8005bda:	431a      	orrs	r2, r3
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	430a      	orrs	r2, r1
 8005be2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005bee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	6911      	ldr	r1, [r2, #16]
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	68d2      	ldr	r2, [r2, #12]
 8005bfa:	4311      	orrs	r1, r2
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	6812      	ldr	r2, [r2, #0]
 8005c00:	430b      	orrs	r3, r1
 8005c02:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	68db      	ldr	r3, [r3, #12]
 8005c0a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	695a      	ldr	r2, [r3, #20]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	699b      	ldr	r3, [r3, #24]
 8005c16:	431a      	orrs	r2, r3
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	430a      	orrs	r2, r1
 8005c1e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f042 0201 	orr.w	r2, r2, #1
 8005c2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2220      	movs	r2, #32
 8005c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2200      	movs	r2, #0
 8005c42:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005c4c:	2300      	movs	r3, #0
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3710      	adds	r7, #16
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	000186a0 	.word	0x000186a0
 8005c5c:	001e847f 	.word	0x001e847f
 8005c60:	003d08ff 	.word	0x003d08ff
 8005c64:	431bde83 	.word	0x431bde83
 8005c68:	10624dd3 	.word	0x10624dd3

08005c6c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b088      	sub	sp, #32
 8005c70:	af02      	add	r7, sp, #8
 8005c72:	60f8      	str	r0, [r7, #12]
 8005c74:	607a      	str	r2, [r7, #4]
 8005c76:	461a      	mov	r2, r3
 8005c78:	460b      	mov	r3, r1
 8005c7a:	817b      	strh	r3, [r7, #10]
 8005c7c:	4613      	mov	r3, r2
 8005c7e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005c80:	f7ff fb0e 	bl	80052a0 <HAL_GetTick>
 8005c84:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	2b20      	cmp	r3, #32
 8005c90:	f040 80e0 	bne.w	8005e54 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	9300      	str	r3, [sp, #0]
 8005c98:	2319      	movs	r3, #25
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	4970      	ldr	r1, [pc, #448]	; (8005e60 <HAL_I2C_Master_Transmit+0x1f4>)
 8005c9e:	68f8      	ldr	r0, [r7, #12]
 8005ca0:	f000 fe02 	bl	80068a8 <I2C_WaitOnFlagUntilTimeout>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d001      	beq.n	8005cae <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005caa:	2302      	movs	r3, #2
 8005cac:	e0d3      	b.n	8005e56 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d101      	bne.n	8005cbc <HAL_I2C_Master_Transmit+0x50>
 8005cb8:	2302      	movs	r3, #2
 8005cba:	e0cc      	b.n	8005e56 <HAL_I2C_Master_Transmit+0x1ea>
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f003 0301 	and.w	r3, r3, #1
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d007      	beq.n	8005ce2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f042 0201 	orr.w	r2, r2, #1
 8005ce0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005cf0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2221      	movs	r2, #33	; 0x21
 8005cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2210      	movs	r2, #16
 8005cfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2200      	movs	r2, #0
 8005d06:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	893a      	ldrh	r2, [r7, #8]
 8005d12:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d18:	b29a      	uxth	r2, r3
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	4a50      	ldr	r2, [pc, #320]	; (8005e64 <HAL_I2C_Master_Transmit+0x1f8>)
 8005d22:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005d24:	8979      	ldrh	r1, [r7, #10]
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	6a3a      	ldr	r2, [r7, #32]
 8005d2a:	68f8      	ldr	r0, [r7, #12]
 8005d2c:	f000 fbbc 	bl	80064a8 <I2C_MasterRequestWrite>
 8005d30:	4603      	mov	r3, r0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d001      	beq.n	8005d3a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	e08d      	b.n	8005e56 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	613b      	str	r3, [r7, #16]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	695b      	ldr	r3, [r3, #20]
 8005d44:	613b      	str	r3, [r7, #16]
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	699b      	ldr	r3, [r3, #24]
 8005d4c:	613b      	str	r3, [r7, #16]
 8005d4e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005d50:	e066      	b.n	8005e20 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d52:	697a      	ldr	r2, [r7, #20]
 8005d54:	6a39      	ldr	r1, [r7, #32]
 8005d56:	68f8      	ldr	r0, [r7, #12]
 8005d58:	f000 fe7c 	bl	8006a54 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d00d      	beq.n	8005d7e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d66:	2b04      	cmp	r3, #4
 8005d68:	d107      	bne.n	8005d7a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d78:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e06b      	b.n	8005e56 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d82:	781a      	ldrb	r2, [r3, #0]
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8e:	1c5a      	adds	r2, r3, #1
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	3b01      	subs	r3, #1
 8005d9c:	b29a      	uxth	r2, r3
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005da6:	3b01      	subs	r3, #1
 8005da8:	b29a      	uxth	r2, r3
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	695b      	ldr	r3, [r3, #20]
 8005db4:	f003 0304 	and.w	r3, r3, #4
 8005db8:	2b04      	cmp	r3, #4
 8005dba:	d11b      	bne.n	8005df4 <HAL_I2C_Master_Transmit+0x188>
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d017      	beq.n	8005df4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc8:	781a      	ldrb	r2, [r3, #0]
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd4:	1c5a      	adds	r2, r3, #1
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	3b01      	subs	r3, #1
 8005de2:	b29a      	uxth	r2, r3
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dec:	3b01      	subs	r3, #1
 8005dee:	b29a      	uxth	r2, r3
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005df4:	697a      	ldr	r2, [r7, #20]
 8005df6:	6a39      	ldr	r1, [r7, #32]
 8005df8:	68f8      	ldr	r0, [r7, #12]
 8005dfa:	f000 fe6c 	bl	8006ad6 <I2C_WaitOnBTFFlagUntilTimeout>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d00d      	beq.n	8005e20 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e08:	2b04      	cmp	r3, #4
 8005e0a:	d107      	bne.n	8005e1c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e1a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	e01a      	b.n	8005e56 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d194      	bne.n	8005d52 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2220      	movs	r2, #32
 8005e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2200      	movs	r2, #0
 8005e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005e50:	2300      	movs	r3, #0
 8005e52:	e000      	b.n	8005e56 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005e54:	2302      	movs	r3, #2
  }
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3718      	adds	r7, #24
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
 8005e5e:	bf00      	nop
 8005e60:	00100002 	.word	0x00100002
 8005e64:	ffff0000 	.word	0xffff0000

08005e68 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b088      	sub	sp, #32
 8005e6c:	af02      	add	r7, sp, #8
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	4608      	mov	r0, r1
 8005e72:	4611      	mov	r1, r2
 8005e74:	461a      	mov	r2, r3
 8005e76:	4603      	mov	r3, r0
 8005e78:	817b      	strh	r3, [r7, #10]
 8005e7a:	460b      	mov	r3, r1
 8005e7c:	813b      	strh	r3, [r7, #8]
 8005e7e:	4613      	mov	r3, r2
 8005e80:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005e82:	f7ff fa0d 	bl	80052a0 <HAL_GetTick>
 8005e86:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	2b20      	cmp	r3, #32
 8005e92:	f040 80d9 	bne.w	8006048 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	9300      	str	r3, [sp, #0]
 8005e9a:	2319      	movs	r3, #25
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	496d      	ldr	r1, [pc, #436]	; (8006054 <HAL_I2C_Mem_Write+0x1ec>)
 8005ea0:	68f8      	ldr	r0, [r7, #12]
 8005ea2:	f000 fd01 	bl	80068a8 <I2C_WaitOnFlagUntilTimeout>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d001      	beq.n	8005eb0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005eac:	2302      	movs	r3, #2
 8005eae:	e0cc      	b.n	800604a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d101      	bne.n	8005ebe <HAL_I2C_Mem_Write+0x56>
 8005eba:	2302      	movs	r3, #2
 8005ebc:	e0c5      	b.n	800604a <HAL_I2C_Mem_Write+0x1e2>
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f003 0301 	and.w	r3, r3, #1
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d007      	beq.n	8005ee4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f042 0201 	orr.w	r2, r2, #1
 8005ee2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ef2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2221      	movs	r2, #33	; 0x21
 8005ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2240      	movs	r2, #64	; 0x40
 8005f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2200      	movs	r2, #0
 8005f08:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	6a3a      	ldr	r2, [r7, #32]
 8005f0e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005f14:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f1a:	b29a      	uxth	r2, r3
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	4a4d      	ldr	r2, [pc, #308]	; (8006058 <HAL_I2C_Mem_Write+0x1f0>)
 8005f24:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005f26:	88f8      	ldrh	r0, [r7, #6]
 8005f28:	893a      	ldrh	r2, [r7, #8]
 8005f2a:	8979      	ldrh	r1, [r7, #10]
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	9301      	str	r3, [sp, #4]
 8005f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f32:	9300      	str	r3, [sp, #0]
 8005f34:	4603      	mov	r3, r0
 8005f36:	68f8      	ldr	r0, [r7, #12]
 8005f38:	f000 fb38 	bl	80065ac <I2C_RequestMemoryWrite>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d052      	beq.n	8005fe8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	e081      	b.n	800604a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f46:	697a      	ldr	r2, [r7, #20]
 8005f48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f4a:	68f8      	ldr	r0, [r7, #12]
 8005f4c:	f000 fd82 	bl	8006a54 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d00d      	beq.n	8005f72 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5a:	2b04      	cmp	r3, #4
 8005f5c:	d107      	bne.n	8005f6e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f6c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e06b      	b.n	800604a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f76:	781a      	ldrb	r2, [r3, #0]
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f82:	1c5a      	adds	r2, r3, #1
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f8c:	3b01      	subs	r3, #1
 8005f8e:	b29a      	uxth	r2, r3
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	3b01      	subs	r3, #1
 8005f9c:	b29a      	uxth	r2, r3
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	695b      	ldr	r3, [r3, #20]
 8005fa8:	f003 0304 	and.w	r3, r3, #4
 8005fac:	2b04      	cmp	r3, #4
 8005fae:	d11b      	bne.n	8005fe8 <HAL_I2C_Mem_Write+0x180>
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d017      	beq.n	8005fe8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fbc:	781a      	ldrb	r2, [r3, #0]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc8:	1c5a      	adds	r2, r3, #1
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fd2:	3b01      	subs	r3, #1
 8005fd4:	b29a      	uxth	r2, r3
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	3b01      	subs	r3, #1
 8005fe2:	b29a      	uxth	r2, r3
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d1aa      	bne.n	8005f46 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ff0:	697a      	ldr	r2, [r7, #20]
 8005ff2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ff4:	68f8      	ldr	r0, [r7, #12]
 8005ff6:	f000 fd6e 	bl	8006ad6 <I2C_WaitOnBTFFlagUntilTimeout>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d00d      	beq.n	800601c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006004:	2b04      	cmp	r3, #4
 8006006:	d107      	bne.n	8006018 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006016:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	e016      	b.n	800604a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800602a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2220      	movs	r2, #32
 8006030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2200      	movs	r2, #0
 8006038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2200      	movs	r2, #0
 8006040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006044:	2300      	movs	r3, #0
 8006046:	e000      	b.n	800604a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006048:	2302      	movs	r3, #2
  }
}
 800604a:	4618      	mov	r0, r3
 800604c:	3718      	adds	r7, #24
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
 8006052:	bf00      	nop
 8006054:	00100002 	.word	0x00100002
 8006058:	ffff0000 	.word	0xffff0000

0800605c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b08c      	sub	sp, #48	; 0x30
 8006060:	af02      	add	r7, sp, #8
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	4608      	mov	r0, r1
 8006066:	4611      	mov	r1, r2
 8006068:	461a      	mov	r2, r3
 800606a:	4603      	mov	r3, r0
 800606c:	817b      	strh	r3, [r7, #10]
 800606e:	460b      	mov	r3, r1
 8006070:	813b      	strh	r3, [r7, #8]
 8006072:	4613      	mov	r3, r2
 8006074:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006076:	f7ff f913 	bl	80052a0 <HAL_GetTick>
 800607a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006082:	b2db      	uxtb	r3, r3
 8006084:	2b20      	cmp	r3, #32
 8006086:	f040 8208 	bne.w	800649a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800608a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608c:	9300      	str	r3, [sp, #0]
 800608e:	2319      	movs	r3, #25
 8006090:	2201      	movs	r2, #1
 8006092:	497b      	ldr	r1, [pc, #492]	; (8006280 <HAL_I2C_Mem_Read+0x224>)
 8006094:	68f8      	ldr	r0, [r7, #12]
 8006096:	f000 fc07 	bl	80068a8 <I2C_WaitOnFlagUntilTimeout>
 800609a:	4603      	mov	r3, r0
 800609c:	2b00      	cmp	r3, #0
 800609e:	d001      	beq.n	80060a4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80060a0:	2302      	movs	r3, #2
 80060a2:	e1fb      	b.n	800649c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d101      	bne.n	80060b2 <HAL_I2C_Mem_Read+0x56>
 80060ae:	2302      	movs	r3, #2
 80060b0:	e1f4      	b.n	800649c <HAL_I2C_Mem_Read+0x440>
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2201      	movs	r2, #1
 80060b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f003 0301 	and.w	r3, r3, #1
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d007      	beq.n	80060d8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f042 0201 	orr.w	r2, r2, #1
 80060d6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80060e6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2222      	movs	r2, #34	; 0x22
 80060ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2240      	movs	r2, #64	; 0x40
 80060f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2200      	movs	r2, #0
 80060fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006102:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006108:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800610e:	b29a      	uxth	r2, r3
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	4a5b      	ldr	r2, [pc, #364]	; (8006284 <HAL_I2C_Mem_Read+0x228>)
 8006118:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800611a:	88f8      	ldrh	r0, [r7, #6]
 800611c:	893a      	ldrh	r2, [r7, #8]
 800611e:	8979      	ldrh	r1, [r7, #10]
 8006120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006122:	9301      	str	r3, [sp, #4]
 8006124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006126:	9300      	str	r3, [sp, #0]
 8006128:	4603      	mov	r3, r0
 800612a:	68f8      	ldr	r0, [r7, #12]
 800612c:	f000 fad4 	bl	80066d8 <I2C_RequestMemoryRead>
 8006130:	4603      	mov	r3, r0
 8006132:	2b00      	cmp	r3, #0
 8006134:	d001      	beq.n	800613a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	e1b0      	b.n	800649c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800613e:	2b00      	cmp	r3, #0
 8006140:	d113      	bne.n	800616a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006142:	2300      	movs	r3, #0
 8006144:	623b      	str	r3, [r7, #32]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	695b      	ldr	r3, [r3, #20]
 800614c:	623b      	str	r3, [r7, #32]
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	699b      	ldr	r3, [r3, #24]
 8006154:	623b      	str	r3, [r7, #32]
 8006156:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006166:	601a      	str	r2, [r3, #0]
 8006168:	e184      	b.n	8006474 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800616e:	2b01      	cmp	r3, #1
 8006170:	d11b      	bne.n	80061aa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006180:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006182:	2300      	movs	r3, #0
 8006184:	61fb      	str	r3, [r7, #28]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	695b      	ldr	r3, [r3, #20]
 800618c:	61fb      	str	r3, [r7, #28]
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	699b      	ldr	r3, [r3, #24]
 8006194:	61fb      	str	r3, [r7, #28]
 8006196:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061a6:	601a      	str	r2, [r3, #0]
 80061a8:	e164      	b.n	8006474 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061ae:	2b02      	cmp	r3, #2
 80061b0:	d11b      	bne.n	80061ea <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061c0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061d2:	2300      	movs	r3, #0
 80061d4:	61bb      	str	r3, [r7, #24]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	695b      	ldr	r3, [r3, #20]
 80061dc:	61bb      	str	r3, [r7, #24]
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	699b      	ldr	r3, [r3, #24]
 80061e4:	61bb      	str	r3, [r7, #24]
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	e144      	b.n	8006474 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061ea:	2300      	movs	r3, #0
 80061ec:	617b      	str	r3, [r7, #20]
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	695b      	ldr	r3, [r3, #20]
 80061f4:	617b      	str	r3, [r7, #20]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	699b      	ldr	r3, [r3, #24]
 80061fc:	617b      	str	r3, [r7, #20]
 80061fe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006200:	e138      	b.n	8006474 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006206:	2b03      	cmp	r3, #3
 8006208:	f200 80f1 	bhi.w	80063ee <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006210:	2b01      	cmp	r3, #1
 8006212:	d123      	bne.n	800625c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006214:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006216:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006218:	68f8      	ldr	r0, [r7, #12]
 800621a:	f000 fc9d 	bl	8006b58 <I2C_WaitOnRXNEFlagUntilTimeout>
 800621e:	4603      	mov	r3, r0
 8006220:	2b00      	cmp	r3, #0
 8006222:	d001      	beq.n	8006228 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006224:	2301      	movs	r3, #1
 8006226:	e139      	b.n	800649c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	691a      	ldr	r2, [r3, #16]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006232:	b2d2      	uxtb	r2, r2
 8006234:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800623a:	1c5a      	adds	r2, r3, #1
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006244:	3b01      	subs	r3, #1
 8006246:	b29a      	uxth	r2, r3
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006250:	b29b      	uxth	r3, r3
 8006252:	3b01      	subs	r3, #1
 8006254:	b29a      	uxth	r2, r3
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	855a      	strh	r2, [r3, #42]	; 0x2a
 800625a:	e10b      	b.n	8006474 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006260:	2b02      	cmp	r3, #2
 8006262:	d14e      	bne.n	8006302 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006266:	9300      	str	r3, [sp, #0]
 8006268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800626a:	2200      	movs	r2, #0
 800626c:	4906      	ldr	r1, [pc, #24]	; (8006288 <HAL_I2C_Mem_Read+0x22c>)
 800626e:	68f8      	ldr	r0, [r7, #12]
 8006270:	f000 fb1a 	bl	80068a8 <I2C_WaitOnFlagUntilTimeout>
 8006274:	4603      	mov	r3, r0
 8006276:	2b00      	cmp	r3, #0
 8006278:	d008      	beq.n	800628c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	e10e      	b.n	800649c <HAL_I2C_Mem_Read+0x440>
 800627e:	bf00      	nop
 8006280:	00100002 	.word	0x00100002
 8006284:	ffff0000 	.word	0xffff0000
 8006288:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800629a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	691a      	ldr	r2, [r3, #16]
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a6:	b2d2      	uxtb	r2, r2
 80062a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ae:	1c5a      	adds	r2, r3, #1
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062b8:	3b01      	subs	r3, #1
 80062ba:	b29a      	uxth	r2, r3
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	3b01      	subs	r3, #1
 80062c8:	b29a      	uxth	r2, r3
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	691a      	ldr	r2, [r3, #16]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d8:	b2d2      	uxtb	r2, r2
 80062da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e0:	1c5a      	adds	r2, r3, #1
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062ea:	3b01      	subs	r3, #1
 80062ec:	b29a      	uxth	r2, r3
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	3b01      	subs	r3, #1
 80062fa:	b29a      	uxth	r2, r3
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006300:	e0b8      	b.n	8006474 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006304:	9300      	str	r3, [sp, #0]
 8006306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006308:	2200      	movs	r2, #0
 800630a:	4966      	ldr	r1, [pc, #408]	; (80064a4 <HAL_I2C_Mem_Read+0x448>)
 800630c:	68f8      	ldr	r0, [r7, #12]
 800630e:	f000 facb 	bl	80068a8 <I2C_WaitOnFlagUntilTimeout>
 8006312:	4603      	mov	r3, r0
 8006314:	2b00      	cmp	r3, #0
 8006316:	d001      	beq.n	800631c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006318:	2301      	movs	r3, #1
 800631a:	e0bf      	b.n	800649c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800632a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	691a      	ldr	r2, [r3, #16]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006336:	b2d2      	uxtb	r2, r2
 8006338:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800633e:	1c5a      	adds	r2, r3, #1
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006348:	3b01      	subs	r3, #1
 800634a:	b29a      	uxth	r2, r3
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006354:	b29b      	uxth	r3, r3
 8006356:	3b01      	subs	r3, #1
 8006358:	b29a      	uxth	r2, r3
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800635e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006360:	9300      	str	r3, [sp, #0]
 8006362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006364:	2200      	movs	r2, #0
 8006366:	494f      	ldr	r1, [pc, #316]	; (80064a4 <HAL_I2C_Mem_Read+0x448>)
 8006368:	68f8      	ldr	r0, [r7, #12]
 800636a:	f000 fa9d 	bl	80068a8 <I2C_WaitOnFlagUntilTimeout>
 800636e:	4603      	mov	r3, r0
 8006370:	2b00      	cmp	r3, #0
 8006372:	d001      	beq.n	8006378 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	e091      	b.n	800649c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006386:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	691a      	ldr	r2, [r3, #16]
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006392:	b2d2      	uxtb	r2, r2
 8006394:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800639a:	1c5a      	adds	r2, r3, #1
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063a4:	3b01      	subs	r3, #1
 80063a6:	b29a      	uxth	r2, r3
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	3b01      	subs	r3, #1
 80063b4:	b29a      	uxth	r2, r3
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	691a      	ldr	r2, [r3, #16]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c4:	b2d2      	uxtb	r2, r2
 80063c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063cc:	1c5a      	adds	r2, r3, #1
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063d6:	3b01      	subs	r3, #1
 80063d8:	b29a      	uxth	r2, r3
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	3b01      	subs	r3, #1
 80063e6:	b29a      	uxth	r2, r3
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80063ec:	e042      	b.n	8006474 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80063f2:	68f8      	ldr	r0, [r7, #12]
 80063f4:	f000 fbb0 	bl	8006b58 <I2C_WaitOnRXNEFlagUntilTimeout>
 80063f8:	4603      	mov	r3, r0
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d001      	beq.n	8006402 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80063fe:	2301      	movs	r3, #1
 8006400:	e04c      	b.n	800649c <HAL_I2C_Mem_Read+0x440>
        }

        /*  data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	691a      	ldr	r2, [r3, #16]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800640c:	b2d2      	uxtb	r2, r2
 800640e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006414:	1c5a      	adds	r2, r3, #1
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800641e:	3b01      	subs	r3, #1
 8006420:	b29a      	uxth	r2, r3
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800642a:	b29b      	uxth	r3, r3
 800642c:	3b01      	subs	r3, #1
 800642e:	b29a      	uxth	r2, r3
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	695b      	ldr	r3, [r3, #20]
 800643a:	f003 0304 	and.w	r3, r3, #4
 800643e:	2b04      	cmp	r3, #4
 8006440:	d118      	bne.n	8006474 <HAL_I2C_Mem_Read+0x418>
        {
          /*  data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	691a      	ldr	r2, [r3, #16]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800644c:	b2d2      	uxtb	r2, r2
 800644e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006454:	1c5a      	adds	r2, r3, #1
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800645e:	3b01      	subs	r3, #1
 8006460:	b29a      	uxth	r2, r3
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800646a:	b29b      	uxth	r3, r3
 800646c:	3b01      	subs	r3, #1
 800646e:	b29a      	uxth	r2, r3
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006478:	2b00      	cmp	r3, #0
 800647a:	f47f aec2 	bne.w	8006202 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2220      	movs	r2, #32
 8006482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2200      	movs	r2, #0
 800648a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2200      	movs	r2, #0
 8006492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006496:	2300      	movs	r3, #0
 8006498:	e000      	b.n	800649c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800649a:	2302      	movs	r3, #2
  }
}
 800649c:	4618      	mov	r0, r3
 800649e:	3728      	adds	r7, #40	; 0x28
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}
 80064a4:	00010004 	.word	0x00010004

080064a8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b088      	sub	sp, #32
 80064ac:	af02      	add	r7, sp, #8
 80064ae:	60f8      	str	r0, [r7, #12]
 80064b0:	607a      	str	r2, [r7, #4]
 80064b2:	603b      	str	r3, [r7, #0]
 80064b4:	460b      	mov	r3, r1
 80064b6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064bc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	2b08      	cmp	r3, #8
 80064c2:	d006      	beq.n	80064d2 <I2C_MasterRequestWrite+0x2a>
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d003      	beq.n	80064d2 <I2C_MasterRequestWrite+0x2a>
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80064d0:	d108      	bne.n	80064e4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80064e0:	601a      	str	r2, [r3, #0]
 80064e2:	e00b      	b.n	80064fc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064e8:	2b12      	cmp	r3, #18
 80064ea:	d107      	bne.n	80064fc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	681a      	ldr	r2, [r3, #0]
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80064fa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	9300      	str	r3, [sp, #0]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2200      	movs	r2, #0
 8006504:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006508:	68f8      	ldr	r0, [r7, #12]
 800650a:	f000 f9cd 	bl	80068a8 <I2C_WaitOnFlagUntilTimeout>
 800650e:	4603      	mov	r3, r0
 8006510:	2b00      	cmp	r3, #0
 8006512:	d00d      	beq.n	8006530 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800651e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006522:	d103      	bne.n	800652c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f44f 7200 	mov.w	r2, #512	; 0x200
 800652a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800652c:	2303      	movs	r3, #3
 800652e:	e035      	b.n	800659c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	691b      	ldr	r3, [r3, #16]
 8006534:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006538:	d108      	bne.n	800654c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800653a:	897b      	ldrh	r3, [r7, #10]
 800653c:	b2db      	uxtb	r3, r3
 800653e:	461a      	mov	r2, r3
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006548:	611a      	str	r2, [r3, #16]
 800654a:	e01b      	b.n	8006584 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800654c:	897b      	ldrh	r3, [r7, #10]
 800654e:	11db      	asrs	r3, r3, #7
 8006550:	b2db      	uxtb	r3, r3
 8006552:	f003 0306 	and.w	r3, r3, #6
 8006556:	b2db      	uxtb	r3, r3
 8006558:	f063 030f 	orn	r3, r3, #15
 800655c:	b2da      	uxtb	r2, r3
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	490e      	ldr	r1, [pc, #56]	; (80065a4 <I2C_MasterRequestWrite+0xfc>)
 800656a:	68f8      	ldr	r0, [r7, #12]
 800656c:	f000 f9f3 	bl	8006956 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006570:	4603      	mov	r3, r0
 8006572:	2b00      	cmp	r3, #0
 8006574:	d001      	beq.n	800657a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	e010      	b.n	800659c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800657a:	897b      	ldrh	r3, [r7, #10]
 800657c:	b2da      	uxtb	r2, r3
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	687a      	ldr	r2, [r7, #4]
 8006588:	4907      	ldr	r1, [pc, #28]	; (80065a8 <I2C_MasterRequestWrite+0x100>)
 800658a:	68f8      	ldr	r0, [r7, #12]
 800658c:	f000 f9e3 	bl	8006956 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006590:	4603      	mov	r3, r0
 8006592:	2b00      	cmp	r3, #0
 8006594:	d001      	beq.n	800659a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006596:	2301      	movs	r3, #1
 8006598:	e000      	b.n	800659c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800659a:	2300      	movs	r3, #0
}
 800659c:	4618      	mov	r0, r3
 800659e:	3718      	adds	r7, #24
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}
 80065a4:	00010008 	.word	0x00010008
 80065a8:	00010002 	.word	0x00010002

080065ac <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b088      	sub	sp, #32
 80065b0:	af02      	add	r7, sp, #8
 80065b2:	60f8      	str	r0, [r7, #12]
 80065b4:	4608      	mov	r0, r1
 80065b6:	4611      	mov	r1, r2
 80065b8:	461a      	mov	r2, r3
 80065ba:	4603      	mov	r3, r0
 80065bc:	817b      	strh	r3, [r7, #10]
 80065be:	460b      	mov	r3, r1
 80065c0:	813b      	strh	r3, [r7, #8]
 80065c2:	4613      	mov	r3, r2
 80065c4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80065d4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80065d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d8:	9300      	str	r3, [sp, #0]
 80065da:	6a3b      	ldr	r3, [r7, #32]
 80065dc:	2200      	movs	r2, #0
 80065de:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80065e2:	68f8      	ldr	r0, [r7, #12]
 80065e4:	f000 f960 	bl	80068a8 <I2C_WaitOnFlagUntilTimeout>
 80065e8:	4603      	mov	r3, r0
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d00d      	beq.n	800660a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065fc:	d103      	bne.n	8006606 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006604:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006606:	2303      	movs	r3, #3
 8006608:	e05f      	b.n	80066ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800660a:	897b      	ldrh	r3, [r7, #10]
 800660c:	b2db      	uxtb	r3, r3
 800660e:	461a      	mov	r2, r3
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006618:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800661a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661c:	6a3a      	ldr	r2, [r7, #32]
 800661e:	492d      	ldr	r1, [pc, #180]	; (80066d4 <I2C_RequestMemoryWrite+0x128>)
 8006620:	68f8      	ldr	r0, [r7, #12]
 8006622:	f000 f998 	bl	8006956 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006626:	4603      	mov	r3, r0
 8006628:	2b00      	cmp	r3, #0
 800662a:	d001      	beq.n	8006630 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800662c:	2301      	movs	r3, #1
 800662e:	e04c      	b.n	80066ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006630:	2300      	movs	r3, #0
 8006632:	617b      	str	r3, [r7, #20]
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	695b      	ldr	r3, [r3, #20]
 800663a:	617b      	str	r3, [r7, #20]
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	699b      	ldr	r3, [r3, #24]
 8006642:	617b      	str	r3, [r7, #20]
 8006644:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006646:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006648:	6a39      	ldr	r1, [r7, #32]
 800664a:	68f8      	ldr	r0, [r7, #12]
 800664c:	f000 fa02 	bl	8006a54 <I2C_WaitOnTXEFlagUntilTimeout>
 8006650:	4603      	mov	r3, r0
 8006652:	2b00      	cmp	r3, #0
 8006654:	d00d      	beq.n	8006672 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800665a:	2b04      	cmp	r3, #4
 800665c:	d107      	bne.n	800666e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	681a      	ldr	r2, [r3, #0]
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800666c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	e02b      	b.n	80066ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006672:	88fb      	ldrh	r3, [r7, #6]
 8006674:	2b01      	cmp	r3, #1
 8006676:	d105      	bne.n	8006684 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006678:	893b      	ldrh	r3, [r7, #8]
 800667a:	b2da      	uxtb	r2, r3
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	611a      	str	r2, [r3, #16]
 8006682:	e021      	b.n	80066c8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006684:	893b      	ldrh	r3, [r7, #8]
 8006686:	0a1b      	lsrs	r3, r3, #8
 8006688:	b29b      	uxth	r3, r3
 800668a:	b2da      	uxtb	r2, r3
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006692:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006694:	6a39      	ldr	r1, [r7, #32]
 8006696:	68f8      	ldr	r0, [r7, #12]
 8006698:	f000 f9dc 	bl	8006a54 <I2C_WaitOnTXEFlagUntilTimeout>
 800669c:	4603      	mov	r3, r0
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d00d      	beq.n	80066be <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a6:	2b04      	cmp	r3, #4
 80066a8:	d107      	bne.n	80066ba <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	681a      	ldr	r2, [r3, #0]
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066b8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	e005      	b.n	80066ca <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80066be:	893b      	ldrh	r3, [r7, #8]
 80066c0:	b2da      	uxtb	r2, r3
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80066c8:	2300      	movs	r3, #0
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3718      	adds	r7, #24
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
 80066d2:	bf00      	nop
 80066d4:	00010002 	.word	0x00010002

080066d8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b088      	sub	sp, #32
 80066dc:	af02      	add	r7, sp, #8
 80066de:	60f8      	str	r0, [r7, #12]
 80066e0:	4608      	mov	r0, r1
 80066e2:	4611      	mov	r1, r2
 80066e4:	461a      	mov	r2, r3
 80066e6:	4603      	mov	r3, r0
 80066e8:	817b      	strh	r3, [r7, #10]
 80066ea:	460b      	mov	r3, r1
 80066ec:	813b      	strh	r3, [r7, #8]
 80066ee:	4613      	mov	r3, r2
 80066f0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006700:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006710:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006714:	9300      	str	r3, [sp, #0]
 8006716:	6a3b      	ldr	r3, [r7, #32]
 8006718:	2200      	movs	r2, #0
 800671a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800671e:	68f8      	ldr	r0, [r7, #12]
 8006720:	f000 f8c2 	bl	80068a8 <I2C_WaitOnFlagUntilTimeout>
 8006724:	4603      	mov	r3, r0
 8006726:	2b00      	cmp	r3, #0
 8006728:	d00d      	beq.n	8006746 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006734:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006738:	d103      	bne.n	8006742 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006740:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006742:	2303      	movs	r3, #3
 8006744:	e0aa      	b.n	800689c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006746:	897b      	ldrh	r3, [r7, #10]
 8006748:	b2db      	uxtb	r3, r3
 800674a:	461a      	mov	r2, r3
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006754:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006758:	6a3a      	ldr	r2, [r7, #32]
 800675a:	4952      	ldr	r1, [pc, #328]	; (80068a4 <I2C_RequestMemoryRead+0x1cc>)
 800675c:	68f8      	ldr	r0, [r7, #12]
 800675e:	f000 f8fa 	bl	8006956 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006762:	4603      	mov	r3, r0
 8006764:	2b00      	cmp	r3, #0
 8006766:	d001      	beq.n	800676c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	e097      	b.n	800689c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800676c:	2300      	movs	r3, #0
 800676e:	617b      	str	r3, [r7, #20]
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	695b      	ldr	r3, [r3, #20]
 8006776:	617b      	str	r3, [r7, #20]
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	699b      	ldr	r3, [r3, #24]
 800677e:	617b      	str	r3, [r7, #20]
 8006780:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006782:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006784:	6a39      	ldr	r1, [r7, #32]
 8006786:	68f8      	ldr	r0, [r7, #12]
 8006788:	f000 f964 	bl	8006a54 <I2C_WaitOnTXEFlagUntilTimeout>
 800678c:	4603      	mov	r3, r0
 800678e:	2b00      	cmp	r3, #0
 8006790:	d00d      	beq.n	80067ae <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006796:	2b04      	cmp	r3, #4
 8006798:	d107      	bne.n	80067aa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	681a      	ldr	r2, [r3, #0]
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067a8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
 80067ac:	e076      	b.n	800689c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80067ae:	88fb      	ldrh	r3, [r7, #6]
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	d105      	bne.n	80067c0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80067b4:	893b      	ldrh	r3, [r7, #8]
 80067b6:	b2da      	uxtb	r2, r3
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	611a      	str	r2, [r3, #16]
 80067be:	e021      	b.n	8006804 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80067c0:	893b      	ldrh	r3, [r7, #8]
 80067c2:	0a1b      	lsrs	r3, r3, #8
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	b2da      	uxtb	r2, r3
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80067ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067d0:	6a39      	ldr	r1, [r7, #32]
 80067d2:	68f8      	ldr	r0, [r7, #12]
 80067d4:	f000 f93e 	bl	8006a54 <I2C_WaitOnTXEFlagUntilTimeout>
 80067d8:	4603      	mov	r3, r0
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d00d      	beq.n	80067fa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e2:	2b04      	cmp	r3, #4
 80067e4:	d107      	bne.n	80067f6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067f4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	e050      	b.n	800689c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80067fa:	893b      	ldrh	r3, [r7, #8]
 80067fc:	b2da      	uxtb	r2, r3
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006804:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006806:	6a39      	ldr	r1, [r7, #32]
 8006808:	68f8      	ldr	r0, [r7, #12]
 800680a:	f000 f923 	bl	8006a54 <I2C_WaitOnTXEFlagUntilTimeout>
 800680e:	4603      	mov	r3, r0
 8006810:	2b00      	cmp	r3, #0
 8006812:	d00d      	beq.n	8006830 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006818:	2b04      	cmp	r3, #4
 800681a:	d107      	bne.n	800682c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	681a      	ldr	r2, [r3, #0]
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800682a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800682c:	2301      	movs	r3, #1
 800682e:	e035      	b.n	800689c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800683e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006842:	9300      	str	r3, [sp, #0]
 8006844:	6a3b      	ldr	r3, [r7, #32]
 8006846:	2200      	movs	r2, #0
 8006848:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800684c:	68f8      	ldr	r0, [r7, #12]
 800684e:	f000 f82b 	bl	80068a8 <I2C_WaitOnFlagUntilTimeout>
 8006852:	4603      	mov	r3, r0
 8006854:	2b00      	cmp	r3, #0
 8006856:	d00d      	beq.n	8006874 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006862:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006866:	d103      	bne.n	8006870 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800686e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006870:	2303      	movs	r3, #3
 8006872:	e013      	b.n	800689c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006874:	897b      	ldrh	r3, [r7, #10]
 8006876:	b2db      	uxtb	r3, r3
 8006878:	f043 0301 	orr.w	r3, r3, #1
 800687c:	b2da      	uxtb	r2, r3
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006886:	6a3a      	ldr	r2, [r7, #32]
 8006888:	4906      	ldr	r1, [pc, #24]	; (80068a4 <I2C_RequestMemoryRead+0x1cc>)
 800688a:	68f8      	ldr	r0, [r7, #12]
 800688c:	f000 f863 	bl	8006956 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006890:	4603      	mov	r3, r0
 8006892:	2b00      	cmp	r3, #0
 8006894:	d001      	beq.n	800689a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	e000      	b.n	800689c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800689a:	2300      	movs	r3, #0
}
 800689c:	4618      	mov	r0, r3
 800689e:	3718      	adds	r7, #24
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}
 80068a4:	00010002 	.word	0x00010002

080068a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b084      	sub	sp, #16
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	60f8      	str	r0, [r7, #12]
 80068b0:	60b9      	str	r1, [r7, #8]
 80068b2:	603b      	str	r3, [r7, #0]
 80068b4:	4613      	mov	r3, r2
 80068b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80068b8:	e025      	b.n	8006906 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068c0:	d021      	beq.n	8006906 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068c2:	f7fe fced 	bl	80052a0 <HAL_GetTick>
 80068c6:	4602      	mov	r2, r0
 80068c8:	69bb      	ldr	r3, [r7, #24]
 80068ca:	1ad3      	subs	r3, r2, r3
 80068cc:	683a      	ldr	r2, [r7, #0]
 80068ce:	429a      	cmp	r2, r3
 80068d0:	d302      	bcc.n	80068d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d116      	bne.n	8006906 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2200      	movs	r2, #0
 80068dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2220      	movs	r2, #32
 80068e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2200      	movs	r2, #0
 80068ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f2:	f043 0220 	orr.w	r2, r3, #32
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2200      	movs	r2, #0
 80068fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006902:	2301      	movs	r3, #1
 8006904:	e023      	b.n	800694e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	0c1b      	lsrs	r3, r3, #16
 800690a:	b2db      	uxtb	r3, r3
 800690c:	2b01      	cmp	r3, #1
 800690e:	d10d      	bne.n	800692c <I2C_WaitOnFlagUntilTimeout+0x84>
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	695b      	ldr	r3, [r3, #20]
 8006916:	43da      	mvns	r2, r3
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	4013      	ands	r3, r2
 800691c:	b29b      	uxth	r3, r3
 800691e:	2b00      	cmp	r3, #0
 8006920:	bf0c      	ite	eq
 8006922:	2301      	moveq	r3, #1
 8006924:	2300      	movne	r3, #0
 8006926:	b2db      	uxtb	r3, r3
 8006928:	461a      	mov	r2, r3
 800692a:	e00c      	b.n	8006946 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	699b      	ldr	r3, [r3, #24]
 8006932:	43da      	mvns	r2, r3
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	4013      	ands	r3, r2
 8006938:	b29b      	uxth	r3, r3
 800693a:	2b00      	cmp	r3, #0
 800693c:	bf0c      	ite	eq
 800693e:	2301      	moveq	r3, #1
 8006940:	2300      	movne	r3, #0
 8006942:	b2db      	uxtb	r3, r3
 8006944:	461a      	mov	r2, r3
 8006946:	79fb      	ldrb	r3, [r7, #7]
 8006948:	429a      	cmp	r2, r3
 800694a:	d0b6      	beq.n	80068ba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800694c:	2300      	movs	r3, #0
}
 800694e:	4618      	mov	r0, r3
 8006950:	3710      	adds	r7, #16
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}

08006956 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006956:	b580      	push	{r7, lr}
 8006958:	b084      	sub	sp, #16
 800695a:	af00      	add	r7, sp, #0
 800695c:	60f8      	str	r0, [r7, #12]
 800695e:	60b9      	str	r1, [r7, #8]
 8006960:	607a      	str	r2, [r7, #4]
 8006962:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006964:	e051      	b.n	8006a0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	695b      	ldr	r3, [r3, #20]
 800696c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006970:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006974:	d123      	bne.n	80069be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006984:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800698e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2200      	movs	r2, #0
 8006994:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2220      	movs	r2, #32
 800699a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2200      	movs	r2, #0
 80069a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069aa:	f043 0204 	orr.w	r2, r3, #4
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2200      	movs	r2, #0
 80069b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	e046      	b.n	8006a4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069c4:	d021      	beq.n	8006a0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069c6:	f7fe fc6b 	bl	80052a0 <HAL_GetTick>
 80069ca:	4602      	mov	r2, r0
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	1ad3      	subs	r3, r2, r3
 80069d0:	687a      	ldr	r2, [r7, #4]
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d302      	bcc.n	80069dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d116      	bne.n	8006a0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2200      	movs	r2, #0
 80069e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2220      	movs	r2, #32
 80069e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2200      	movs	r2, #0
 80069ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069f6:	f043 0220 	orr.w	r2, r3, #32
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2200      	movs	r2, #0
 8006a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006a06:	2301      	movs	r3, #1
 8006a08:	e020      	b.n	8006a4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	0c1b      	lsrs	r3, r3, #16
 8006a0e:	b2db      	uxtb	r3, r3
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d10c      	bne.n	8006a2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	695b      	ldr	r3, [r3, #20]
 8006a1a:	43da      	mvns	r2, r3
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	4013      	ands	r3, r2
 8006a20:	b29b      	uxth	r3, r3
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	bf14      	ite	ne
 8006a26:	2301      	movne	r3, #1
 8006a28:	2300      	moveq	r3, #0
 8006a2a:	b2db      	uxtb	r3, r3
 8006a2c:	e00b      	b.n	8006a46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	699b      	ldr	r3, [r3, #24]
 8006a34:	43da      	mvns	r2, r3
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	4013      	ands	r3, r2
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	bf14      	ite	ne
 8006a40:	2301      	movne	r3, #1
 8006a42:	2300      	moveq	r3, #0
 8006a44:	b2db      	uxtb	r3, r3
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d18d      	bne.n	8006966 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006a4a:	2300      	movs	r3, #0
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3710      	adds	r7, #16
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}

08006a54 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b084      	sub	sp, #16
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	60f8      	str	r0, [r7, #12]
 8006a5c:	60b9      	str	r1, [r7, #8]
 8006a5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006a60:	e02d      	b.n	8006abe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006a62:	68f8      	ldr	r0, [r7, #12]
 8006a64:	f000 f8ce 	bl	8006c04 <I2C_IsAcknowledgeFailed>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d001      	beq.n	8006a72 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	e02d      	b.n	8006ace <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a78:	d021      	beq.n	8006abe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a7a:	f7fe fc11 	bl	80052a0 <HAL_GetTick>
 8006a7e:	4602      	mov	r2, r0
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	1ad3      	subs	r3, r2, r3
 8006a84:	68ba      	ldr	r2, [r7, #8]
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d302      	bcc.n	8006a90 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d116      	bne.n	8006abe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2200      	movs	r2, #0
 8006a94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2220      	movs	r2, #32
 8006a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aaa:	f043 0220 	orr.w	r2, r3, #32
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006aba:	2301      	movs	r3, #1
 8006abc:	e007      	b.n	8006ace <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	695b      	ldr	r3, [r3, #20]
 8006ac4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ac8:	2b80      	cmp	r3, #128	; 0x80
 8006aca:	d1ca      	bne.n	8006a62 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006acc:	2300      	movs	r3, #0
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3710      	adds	r7, #16
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}

08006ad6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006ad6:	b580      	push	{r7, lr}
 8006ad8:	b084      	sub	sp, #16
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	60f8      	str	r0, [r7, #12]
 8006ade:	60b9      	str	r1, [r7, #8]
 8006ae0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006ae2:	e02d      	b.n	8006b40 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006ae4:	68f8      	ldr	r0, [r7, #12]
 8006ae6:	f000 f88d 	bl	8006c04 <I2C_IsAcknowledgeFailed>
 8006aea:	4603      	mov	r3, r0
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d001      	beq.n	8006af4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006af0:	2301      	movs	r3, #1
 8006af2:	e02d      	b.n	8006b50 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006afa:	d021      	beq.n	8006b40 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006afc:	f7fe fbd0 	bl	80052a0 <HAL_GetTick>
 8006b00:	4602      	mov	r2, r0
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	1ad3      	subs	r3, r2, r3
 8006b06:	68ba      	ldr	r2, [r7, #8]
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d302      	bcc.n	8006b12 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d116      	bne.n	8006b40 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2200      	movs	r2, #0
 8006b16:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2220      	movs	r2, #32
 8006b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2200      	movs	r2, #0
 8006b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b2c:	f043 0220 	orr.w	r2, r3, #32
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2200      	movs	r2, #0
 8006b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	e007      	b.n	8006b50 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	695b      	ldr	r3, [r3, #20]
 8006b46:	f003 0304 	and.w	r3, r3, #4
 8006b4a:	2b04      	cmp	r3, #4
 8006b4c:	d1ca      	bne.n	8006ae4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006b4e:	2300      	movs	r3, #0
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3710      	adds	r7, #16
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}

08006b58 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b084      	sub	sp, #16
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	60f8      	str	r0, [r7, #12]
 8006b60:	60b9      	str	r1, [r7, #8]
 8006b62:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006b64:	e042      	b.n	8006bec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	695b      	ldr	r3, [r3, #20]
 8006b6c:	f003 0310 	and.w	r3, r3, #16
 8006b70:	2b10      	cmp	r3, #16
 8006b72:	d119      	bne.n	8006ba8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f06f 0210 	mvn.w	r2, #16
 8006b7c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2200      	movs	r2, #0
 8006b82:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2220      	movs	r2, #32
 8006b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	e029      	b.n	8006bfc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ba8:	f7fe fb7a 	bl	80052a0 <HAL_GetTick>
 8006bac:	4602      	mov	r2, r0
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	1ad3      	subs	r3, r2, r3
 8006bb2:	68ba      	ldr	r2, [r7, #8]
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d302      	bcc.n	8006bbe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d116      	bne.n	8006bec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2220      	movs	r2, #32
 8006bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd8:	f043 0220 	orr.w	r2, r3, #32
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2200      	movs	r2, #0
 8006be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006be8:	2301      	movs	r3, #1
 8006bea:	e007      	b.n	8006bfc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	695b      	ldr	r3, [r3, #20]
 8006bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bf6:	2b40      	cmp	r3, #64	; 0x40
 8006bf8:	d1b5      	bne.n	8006b66 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006bfa:	2300      	movs	r3, #0
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3710      	adds	r7, #16
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}

08006c04 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b083      	sub	sp, #12
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	695b      	ldr	r3, [r3, #20]
 8006c12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c1a:	d11b      	bne.n	8006c54 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006c24:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2220      	movs	r2, #32
 8006c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2200      	movs	r2, #0
 8006c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c40:	f043 0204 	orr.w	r2, r3, #4
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006c50:	2301      	movs	r3, #1
 8006c52:	e000      	b.n	8006c56 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006c54:	2300      	movs	r3, #0
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	370c      	adds	r7, #12
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c60:	4770      	bx	lr
	...

08006c64 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b086      	sub	sp, #24
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d101      	bne.n	8006c76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006c72:	2301      	movs	r3, #1
 8006c74:	e267      	b.n	8007146 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f003 0301 	and.w	r3, r3, #1
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d075      	beq.n	8006d6e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006c82:	4b88      	ldr	r3, [pc, #544]	; (8006ea4 <HAL_RCC_OscConfig+0x240>)
 8006c84:	689b      	ldr	r3, [r3, #8]
 8006c86:	f003 030c 	and.w	r3, r3, #12
 8006c8a:	2b04      	cmp	r3, #4
 8006c8c:	d00c      	beq.n	8006ca8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006c8e:	4b85      	ldr	r3, [pc, #532]	; (8006ea4 <HAL_RCC_OscConfig+0x240>)
 8006c90:	689b      	ldr	r3, [r3, #8]
 8006c92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006c96:	2b08      	cmp	r3, #8
 8006c98:	d112      	bne.n	8006cc0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006c9a:	4b82      	ldr	r3, [pc, #520]	; (8006ea4 <HAL_RCC_OscConfig+0x240>)
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ca2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ca6:	d10b      	bne.n	8006cc0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ca8:	4b7e      	ldr	r3, [pc, #504]	; (8006ea4 <HAL_RCC_OscConfig+0x240>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d05b      	beq.n	8006d6c <HAL_RCC_OscConfig+0x108>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d157      	bne.n	8006d6c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	e242      	b.n	8007146 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cc8:	d106      	bne.n	8006cd8 <HAL_RCC_OscConfig+0x74>
 8006cca:	4b76      	ldr	r3, [pc, #472]	; (8006ea4 <HAL_RCC_OscConfig+0x240>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a75      	ldr	r2, [pc, #468]	; (8006ea4 <HAL_RCC_OscConfig+0x240>)
 8006cd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cd4:	6013      	str	r3, [r2, #0]
 8006cd6:	e01d      	b.n	8006d14 <HAL_RCC_OscConfig+0xb0>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ce0:	d10c      	bne.n	8006cfc <HAL_RCC_OscConfig+0x98>
 8006ce2:	4b70      	ldr	r3, [pc, #448]	; (8006ea4 <HAL_RCC_OscConfig+0x240>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a6f      	ldr	r2, [pc, #444]	; (8006ea4 <HAL_RCC_OscConfig+0x240>)
 8006ce8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006cec:	6013      	str	r3, [r2, #0]
 8006cee:	4b6d      	ldr	r3, [pc, #436]	; (8006ea4 <HAL_RCC_OscConfig+0x240>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a6c      	ldr	r2, [pc, #432]	; (8006ea4 <HAL_RCC_OscConfig+0x240>)
 8006cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cf8:	6013      	str	r3, [r2, #0]
 8006cfa:	e00b      	b.n	8006d14 <HAL_RCC_OscConfig+0xb0>
 8006cfc:	4b69      	ldr	r3, [pc, #420]	; (8006ea4 <HAL_RCC_OscConfig+0x240>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a68      	ldr	r2, [pc, #416]	; (8006ea4 <HAL_RCC_OscConfig+0x240>)
 8006d02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d06:	6013      	str	r3, [r2, #0]
 8006d08:	4b66      	ldr	r3, [pc, #408]	; (8006ea4 <HAL_RCC_OscConfig+0x240>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a65      	ldr	r2, [pc, #404]	; (8006ea4 <HAL_RCC_OscConfig+0x240>)
 8006d0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d013      	beq.n	8006d44 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d1c:	f7fe fac0 	bl	80052a0 <HAL_GetTick>
 8006d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d22:	e008      	b.n	8006d36 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006d24:	f7fe fabc 	bl	80052a0 <HAL_GetTick>
 8006d28:	4602      	mov	r2, r0
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	1ad3      	subs	r3, r2, r3
 8006d2e:	2b64      	cmp	r3, #100	; 0x64
 8006d30:	d901      	bls.n	8006d36 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006d32:	2303      	movs	r3, #3
 8006d34:	e207      	b.n	8007146 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d36:	4b5b      	ldr	r3, [pc, #364]	; (8006ea4 <HAL_RCC_OscConfig+0x240>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d0f0      	beq.n	8006d24 <HAL_RCC_OscConfig+0xc0>
 8006d42:	e014      	b.n	8006d6e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d44:	f7fe faac 	bl	80052a0 <HAL_GetTick>
 8006d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d4a:	e008      	b.n	8006d5e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006d4c:	f7fe faa8 	bl	80052a0 <HAL_GetTick>
 8006d50:	4602      	mov	r2, r0
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	1ad3      	subs	r3, r2, r3
 8006d56:	2b64      	cmp	r3, #100	; 0x64
 8006d58:	d901      	bls.n	8006d5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006d5a:	2303      	movs	r3, #3
 8006d5c:	e1f3      	b.n	8007146 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d5e:	4b51      	ldr	r3, [pc, #324]	; (8006ea4 <HAL_RCC_OscConfig+0x240>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d1f0      	bne.n	8006d4c <HAL_RCC_OscConfig+0xe8>
 8006d6a:	e000      	b.n	8006d6e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f003 0302 	and.w	r3, r3, #2
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d063      	beq.n	8006e42 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006d7a:	4b4a      	ldr	r3, [pc, #296]	; (8006ea4 <HAL_RCC_OscConfig+0x240>)
 8006d7c:	689b      	ldr	r3, [r3, #8]
 8006d7e:	f003 030c 	and.w	r3, r3, #12
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d00b      	beq.n	8006d9e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006d86:	4b47      	ldr	r3, [pc, #284]	; (8006ea4 <HAL_RCC_OscConfig+0x240>)
 8006d88:	689b      	ldr	r3, [r3, #8]
 8006d8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006d8e:	2b08      	cmp	r3, #8
 8006d90:	d11c      	bne.n	8006dcc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006d92:	4b44      	ldr	r3, [pc, #272]	; (8006ea4 <HAL_RCC_OscConfig+0x240>)
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d116      	bne.n	8006dcc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d9e:	4b41      	ldr	r3, [pc, #260]	; (8006ea4 <HAL_RCC_OscConfig+0x240>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f003 0302 	and.w	r3, r3, #2
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d005      	beq.n	8006db6 <HAL_RCC_OscConfig+0x152>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	68db      	ldr	r3, [r3, #12]
 8006dae:	2b01      	cmp	r3, #1
 8006db0:	d001      	beq.n	8006db6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006db2:	2301      	movs	r3, #1
 8006db4:	e1c7      	b.n	8007146 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006db6:	4b3b      	ldr	r3, [pc, #236]	; (8006ea4 <HAL_RCC_OscConfig+0x240>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	691b      	ldr	r3, [r3, #16]
 8006dc2:	00db      	lsls	r3, r3, #3
 8006dc4:	4937      	ldr	r1, [pc, #220]	; (8006ea4 <HAL_RCC_OscConfig+0x240>)
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006dca:	e03a      	b.n	8006e42 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	68db      	ldr	r3, [r3, #12]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d020      	beq.n	8006e16 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006dd4:	4b34      	ldr	r3, [pc, #208]	; (8006ea8 <HAL_RCC_OscConfig+0x244>)
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dda:	f7fe fa61 	bl	80052a0 <HAL_GetTick>
 8006dde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006de0:	e008      	b.n	8006df4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006de2:	f7fe fa5d 	bl	80052a0 <HAL_GetTick>
 8006de6:	4602      	mov	r2, r0
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	1ad3      	subs	r3, r2, r3
 8006dec:	2b02      	cmp	r3, #2
 8006dee:	d901      	bls.n	8006df4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006df0:	2303      	movs	r3, #3
 8006df2:	e1a8      	b.n	8007146 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006df4:	4b2b      	ldr	r3, [pc, #172]	; (8006ea4 <HAL_RCC_OscConfig+0x240>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f003 0302 	and.w	r3, r3, #2
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d0f0      	beq.n	8006de2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e00:	4b28      	ldr	r3, [pc, #160]	; (8006ea4 <HAL_RCC_OscConfig+0x240>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	691b      	ldr	r3, [r3, #16]
 8006e0c:	00db      	lsls	r3, r3, #3
 8006e0e:	4925      	ldr	r1, [pc, #148]	; (8006ea4 <HAL_RCC_OscConfig+0x240>)
 8006e10:	4313      	orrs	r3, r2
 8006e12:	600b      	str	r3, [r1, #0]
 8006e14:	e015      	b.n	8006e42 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006e16:	4b24      	ldr	r3, [pc, #144]	; (8006ea8 <HAL_RCC_OscConfig+0x244>)
 8006e18:	2200      	movs	r2, #0
 8006e1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e1c:	f7fe fa40 	bl	80052a0 <HAL_GetTick>
 8006e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e22:	e008      	b.n	8006e36 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006e24:	f7fe fa3c 	bl	80052a0 <HAL_GetTick>
 8006e28:	4602      	mov	r2, r0
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	1ad3      	subs	r3, r2, r3
 8006e2e:	2b02      	cmp	r3, #2
 8006e30:	d901      	bls.n	8006e36 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006e32:	2303      	movs	r3, #3
 8006e34:	e187      	b.n	8007146 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e36:	4b1b      	ldr	r3, [pc, #108]	; (8006ea4 <HAL_RCC_OscConfig+0x240>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f003 0302 	and.w	r3, r3, #2
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d1f0      	bne.n	8006e24 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f003 0308 	and.w	r3, r3, #8
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d036      	beq.n	8006ebc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	695b      	ldr	r3, [r3, #20]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d016      	beq.n	8006e84 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006e56:	4b15      	ldr	r3, [pc, #84]	; (8006eac <HAL_RCC_OscConfig+0x248>)
 8006e58:	2201      	movs	r2, #1
 8006e5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e5c:	f7fe fa20 	bl	80052a0 <HAL_GetTick>
 8006e60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e62:	e008      	b.n	8006e76 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006e64:	f7fe fa1c 	bl	80052a0 <HAL_GetTick>
 8006e68:	4602      	mov	r2, r0
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	1ad3      	subs	r3, r2, r3
 8006e6e:	2b02      	cmp	r3, #2
 8006e70:	d901      	bls.n	8006e76 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006e72:	2303      	movs	r3, #3
 8006e74:	e167      	b.n	8007146 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e76:	4b0b      	ldr	r3, [pc, #44]	; (8006ea4 <HAL_RCC_OscConfig+0x240>)
 8006e78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e7a:	f003 0302 	and.w	r3, r3, #2
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d0f0      	beq.n	8006e64 <HAL_RCC_OscConfig+0x200>
 8006e82:	e01b      	b.n	8006ebc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006e84:	4b09      	ldr	r3, [pc, #36]	; (8006eac <HAL_RCC_OscConfig+0x248>)
 8006e86:	2200      	movs	r2, #0
 8006e88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e8a:	f7fe fa09 	bl	80052a0 <HAL_GetTick>
 8006e8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e90:	e00e      	b.n	8006eb0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006e92:	f7fe fa05 	bl	80052a0 <HAL_GetTick>
 8006e96:	4602      	mov	r2, r0
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	1ad3      	subs	r3, r2, r3
 8006e9c:	2b02      	cmp	r3, #2
 8006e9e:	d907      	bls.n	8006eb0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006ea0:	2303      	movs	r3, #3
 8006ea2:	e150      	b.n	8007146 <HAL_RCC_OscConfig+0x4e2>
 8006ea4:	40023800 	.word	0x40023800
 8006ea8:	42470000 	.word	0x42470000
 8006eac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006eb0:	4b88      	ldr	r3, [pc, #544]	; (80070d4 <HAL_RCC_OscConfig+0x470>)
 8006eb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006eb4:	f003 0302 	and.w	r3, r3, #2
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d1ea      	bne.n	8006e92 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f003 0304 	and.w	r3, r3, #4
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	f000 8097 	beq.w	8006ff8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ece:	4b81      	ldr	r3, [pc, #516]	; (80070d4 <HAL_RCC_OscConfig+0x470>)
 8006ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d10f      	bne.n	8006efa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006eda:	2300      	movs	r3, #0
 8006edc:	60bb      	str	r3, [r7, #8]
 8006ede:	4b7d      	ldr	r3, [pc, #500]	; (80070d4 <HAL_RCC_OscConfig+0x470>)
 8006ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ee2:	4a7c      	ldr	r2, [pc, #496]	; (80070d4 <HAL_RCC_OscConfig+0x470>)
 8006ee4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ee8:	6413      	str	r3, [r2, #64]	; 0x40
 8006eea:	4b7a      	ldr	r3, [pc, #488]	; (80070d4 <HAL_RCC_OscConfig+0x470>)
 8006eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ef2:	60bb      	str	r3, [r7, #8]
 8006ef4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006efa:	4b77      	ldr	r3, [pc, #476]	; (80070d8 <HAL_RCC_OscConfig+0x474>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d118      	bne.n	8006f38 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006f06:	4b74      	ldr	r3, [pc, #464]	; (80070d8 <HAL_RCC_OscConfig+0x474>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a73      	ldr	r2, [pc, #460]	; (80070d8 <HAL_RCC_OscConfig+0x474>)
 8006f0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006f12:	f7fe f9c5 	bl	80052a0 <HAL_GetTick>
 8006f16:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f18:	e008      	b.n	8006f2c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f1a:	f7fe f9c1 	bl	80052a0 <HAL_GetTick>
 8006f1e:	4602      	mov	r2, r0
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	1ad3      	subs	r3, r2, r3
 8006f24:	2b02      	cmp	r3, #2
 8006f26:	d901      	bls.n	8006f2c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006f28:	2303      	movs	r3, #3
 8006f2a:	e10c      	b.n	8007146 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f2c:	4b6a      	ldr	r3, [pc, #424]	; (80070d8 <HAL_RCC_OscConfig+0x474>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d0f0      	beq.n	8006f1a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	689b      	ldr	r3, [r3, #8]
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d106      	bne.n	8006f4e <HAL_RCC_OscConfig+0x2ea>
 8006f40:	4b64      	ldr	r3, [pc, #400]	; (80070d4 <HAL_RCC_OscConfig+0x470>)
 8006f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f44:	4a63      	ldr	r2, [pc, #396]	; (80070d4 <HAL_RCC_OscConfig+0x470>)
 8006f46:	f043 0301 	orr.w	r3, r3, #1
 8006f4a:	6713      	str	r3, [r2, #112]	; 0x70
 8006f4c:	e01c      	b.n	8006f88 <HAL_RCC_OscConfig+0x324>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	689b      	ldr	r3, [r3, #8]
 8006f52:	2b05      	cmp	r3, #5
 8006f54:	d10c      	bne.n	8006f70 <HAL_RCC_OscConfig+0x30c>
 8006f56:	4b5f      	ldr	r3, [pc, #380]	; (80070d4 <HAL_RCC_OscConfig+0x470>)
 8006f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f5a:	4a5e      	ldr	r2, [pc, #376]	; (80070d4 <HAL_RCC_OscConfig+0x470>)
 8006f5c:	f043 0304 	orr.w	r3, r3, #4
 8006f60:	6713      	str	r3, [r2, #112]	; 0x70
 8006f62:	4b5c      	ldr	r3, [pc, #368]	; (80070d4 <HAL_RCC_OscConfig+0x470>)
 8006f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f66:	4a5b      	ldr	r2, [pc, #364]	; (80070d4 <HAL_RCC_OscConfig+0x470>)
 8006f68:	f043 0301 	orr.w	r3, r3, #1
 8006f6c:	6713      	str	r3, [r2, #112]	; 0x70
 8006f6e:	e00b      	b.n	8006f88 <HAL_RCC_OscConfig+0x324>
 8006f70:	4b58      	ldr	r3, [pc, #352]	; (80070d4 <HAL_RCC_OscConfig+0x470>)
 8006f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f74:	4a57      	ldr	r2, [pc, #348]	; (80070d4 <HAL_RCC_OscConfig+0x470>)
 8006f76:	f023 0301 	bic.w	r3, r3, #1
 8006f7a:	6713      	str	r3, [r2, #112]	; 0x70
 8006f7c:	4b55      	ldr	r3, [pc, #340]	; (80070d4 <HAL_RCC_OscConfig+0x470>)
 8006f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f80:	4a54      	ldr	r2, [pc, #336]	; (80070d4 <HAL_RCC_OscConfig+0x470>)
 8006f82:	f023 0304 	bic.w	r3, r3, #4
 8006f86:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d015      	beq.n	8006fbc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f90:	f7fe f986 	bl	80052a0 <HAL_GetTick>
 8006f94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f96:	e00a      	b.n	8006fae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f98:	f7fe f982 	bl	80052a0 <HAL_GetTick>
 8006f9c:	4602      	mov	r2, r0
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	1ad3      	subs	r3, r2, r3
 8006fa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d901      	bls.n	8006fae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006faa:	2303      	movs	r3, #3
 8006fac:	e0cb      	b.n	8007146 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006fae:	4b49      	ldr	r3, [pc, #292]	; (80070d4 <HAL_RCC_OscConfig+0x470>)
 8006fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fb2:	f003 0302 	and.w	r3, r3, #2
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d0ee      	beq.n	8006f98 <HAL_RCC_OscConfig+0x334>
 8006fba:	e014      	b.n	8006fe6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006fbc:	f7fe f970 	bl	80052a0 <HAL_GetTick>
 8006fc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006fc2:	e00a      	b.n	8006fda <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006fc4:	f7fe f96c 	bl	80052a0 <HAL_GetTick>
 8006fc8:	4602      	mov	r2, r0
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	1ad3      	subs	r3, r2, r3
 8006fce:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d901      	bls.n	8006fda <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006fd6:	2303      	movs	r3, #3
 8006fd8:	e0b5      	b.n	8007146 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006fda:	4b3e      	ldr	r3, [pc, #248]	; (80070d4 <HAL_RCC_OscConfig+0x470>)
 8006fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fde:	f003 0302 	and.w	r3, r3, #2
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d1ee      	bne.n	8006fc4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006fe6:	7dfb      	ldrb	r3, [r7, #23]
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	d105      	bne.n	8006ff8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006fec:	4b39      	ldr	r3, [pc, #228]	; (80070d4 <HAL_RCC_OscConfig+0x470>)
 8006fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ff0:	4a38      	ldr	r2, [pc, #224]	; (80070d4 <HAL_RCC_OscConfig+0x470>)
 8006ff2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ff6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	699b      	ldr	r3, [r3, #24]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	f000 80a1 	beq.w	8007144 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007002:	4b34      	ldr	r3, [pc, #208]	; (80070d4 <HAL_RCC_OscConfig+0x470>)
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	f003 030c 	and.w	r3, r3, #12
 800700a:	2b08      	cmp	r3, #8
 800700c:	d05c      	beq.n	80070c8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	699b      	ldr	r3, [r3, #24]
 8007012:	2b02      	cmp	r3, #2
 8007014:	d141      	bne.n	800709a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007016:	4b31      	ldr	r3, [pc, #196]	; (80070dc <HAL_RCC_OscConfig+0x478>)
 8007018:	2200      	movs	r2, #0
 800701a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800701c:	f7fe f940 	bl	80052a0 <HAL_GetTick>
 8007020:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007022:	e008      	b.n	8007036 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007024:	f7fe f93c 	bl	80052a0 <HAL_GetTick>
 8007028:	4602      	mov	r2, r0
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	1ad3      	subs	r3, r2, r3
 800702e:	2b02      	cmp	r3, #2
 8007030:	d901      	bls.n	8007036 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007032:	2303      	movs	r3, #3
 8007034:	e087      	b.n	8007146 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007036:	4b27      	ldr	r3, [pc, #156]	; (80070d4 <HAL_RCC_OscConfig+0x470>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800703e:	2b00      	cmp	r3, #0
 8007040:	d1f0      	bne.n	8007024 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	69da      	ldr	r2, [r3, #28]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6a1b      	ldr	r3, [r3, #32]
 800704a:	431a      	orrs	r2, r3
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007050:	019b      	lsls	r3, r3, #6
 8007052:	431a      	orrs	r2, r3
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007058:	085b      	lsrs	r3, r3, #1
 800705a:	3b01      	subs	r3, #1
 800705c:	041b      	lsls	r3, r3, #16
 800705e:	431a      	orrs	r2, r3
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007064:	061b      	lsls	r3, r3, #24
 8007066:	491b      	ldr	r1, [pc, #108]	; (80070d4 <HAL_RCC_OscConfig+0x470>)
 8007068:	4313      	orrs	r3, r2
 800706a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800706c:	4b1b      	ldr	r3, [pc, #108]	; (80070dc <HAL_RCC_OscConfig+0x478>)
 800706e:	2201      	movs	r2, #1
 8007070:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007072:	f7fe f915 	bl	80052a0 <HAL_GetTick>
 8007076:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007078:	e008      	b.n	800708c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800707a:	f7fe f911 	bl	80052a0 <HAL_GetTick>
 800707e:	4602      	mov	r2, r0
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	1ad3      	subs	r3, r2, r3
 8007084:	2b02      	cmp	r3, #2
 8007086:	d901      	bls.n	800708c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007088:	2303      	movs	r3, #3
 800708a:	e05c      	b.n	8007146 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800708c:	4b11      	ldr	r3, [pc, #68]	; (80070d4 <HAL_RCC_OscConfig+0x470>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007094:	2b00      	cmp	r3, #0
 8007096:	d0f0      	beq.n	800707a <HAL_RCC_OscConfig+0x416>
 8007098:	e054      	b.n	8007144 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800709a:	4b10      	ldr	r3, [pc, #64]	; (80070dc <HAL_RCC_OscConfig+0x478>)
 800709c:	2200      	movs	r2, #0
 800709e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070a0:	f7fe f8fe 	bl	80052a0 <HAL_GetTick>
 80070a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070a6:	e008      	b.n	80070ba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80070a8:	f7fe f8fa 	bl	80052a0 <HAL_GetTick>
 80070ac:	4602      	mov	r2, r0
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	1ad3      	subs	r3, r2, r3
 80070b2:	2b02      	cmp	r3, #2
 80070b4:	d901      	bls.n	80070ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80070b6:	2303      	movs	r3, #3
 80070b8:	e045      	b.n	8007146 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070ba:	4b06      	ldr	r3, [pc, #24]	; (80070d4 <HAL_RCC_OscConfig+0x470>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d1f0      	bne.n	80070a8 <HAL_RCC_OscConfig+0x444>
 80070c6:	e03d      	b.n	8007144 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	699b      	ldr	r3, [r3, #24]
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	d107      	bne.n	80070e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80070d0:	2301      	movs	r3, #1
 80070d2:	e038      	b.n	8007146 <HAL_RCC_OscConfig+0x4e2>
 80070d4:	40023800 	.word	0x40023800
 80070d8:	40007000 	.word	0x40007000
 80070dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80070e0:	4b1b      	ldr	r3, [pc, #108]	; (8007150 <HAL_RCC_OscConfig+0x4ec>)
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	699b      	ldr	r3, [r3, #24]
 80070ea:	2b01      	cmp	r3, #1
 80070ec:	d028      	beq.n	8007140 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80070f8:	429a      	cmp	r2, r3
 80070fa:	d121      	bne.n	8007140 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007106:	429a      	cmp	r2, r3
 8007108:	d11a      	bne.n	8007140 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800710a:	68fa      	ldr	r2, [r7, #12]
 800710c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007110:	4013      	ands	r3, r2
 8007112:	687a      	ldr	r2, [r7, #4]
 8007114:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007116:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007118:	4293      	cmp	r3, r2
 800711a:	d111      	bne.n	8007140 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007126:	085b      	lsrs	r3, r3, #1
 8007128:	3b01      	subs	r3, #1
 800712a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800712c:	429a      	cmp	r2, r3
 800712e:	d107      	bne.n	8007140 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800713a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800713c:	429a      	cmp	r2, r3
 800713e:	d001      	beq.n	8007144 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007140:	2301      	movs	r3, #1
 8007142:	e000      	b.n	8007146 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007144:	2300      	movs	r3, #0
}
 8007146:	4618      	mov	r0, r3
 8007148:	3718      	adds	r7, #24
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}
 800714e:	bf00      	nop
 8007150:	40023800 	.word	0x40023800

08007154 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b084      	sub	sp, #16
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d101      	bne.n	8007168 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007164:	2301      	movs	r3, #1
 8007166:	e0cc      	b.n	8007302 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007168:	4b68      	ldr	r3, [pc, #416]	; (800730c <HAL_RCC_ClockConfig+0x1b8>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f003 0307 	and.w	r3, r3, #7
 8007170:	683a      	ldr	r2, [r7, #0]
 8007172:	429a      	cmp	r2, r3
 8007174:	d90c      	bls.n	8007190 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007176:	4b65      	ldr	r3, [pc, #404]	; (800730c <HAL_RCC_ClockConfig+0x1b8>)
 8007178:	683a      	ldr	r2, [r7, #0]
 800717a:	b2d2      	uxtb	r2, r2
 800717c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800717e:	4b63      	ldr	r3, [pc, #396]	; (800730c <HAL_RCC_ClockConfig+0x1b8>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f003 0307 	and.w	r3, r3, #7
 8007186:	683a      	ldr	r2, [r7, #0]
 8007188:	429a      	cmp	r2, r3
 800718a:	d001      	beq.n	8007190 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800718c:	2301      	movs	r3, #1
 800718e:	e0b8      	b.n	8007302 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f003 0302 	and.w	r3, r3, #2
 8007198:	2b00      	cmp	r3, #0
 800719a:	d020      	beq.n	80071de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f003 0304 	and.w	r3, r3, #4
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d005      	beq.n	80071b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80071a8:	4b59      	ldr	r3, [pc, #356]	; (8007310 <HAL_RCC_ClockConfig+0x1bc>)
 80071aa:	689b      	ldr	r3, [r3, #8]
 80071ac:	4a58      	ldr	r2, [pc, #352]	; (8007310 <HAL_RCC_ClockConfig+0x1bc>)
 80071ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80071b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f003 0308 	and.w	r3, r3, #8
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d005      	beq.n	80071cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80071c0:	4b53      	ldr	r3, [pc, #332]	; (8007310 <HAL_RCC_ClockConfig+0x1bc>)
 80071c2:	689b      	ldr	r3, [r3, #8]
 80071c4:	4a52      	ldr	r2, [pc, #328]	; (8007310 <HAL_RCC_ClockConfig+0x1bc>)
 80071c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80071ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80071cc:	4b50      	ldr	r3, [pc, #320]	; (8007310 <HAL_RCC_ClockConfig+0x1bc>)
 80071ce:	689b      	ldr	r3, [r3, #8]
 80071d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	689b      	ldr	r3, [r3, #8]
 80071d8:	494d      	ldr	r1, [pc, #308]	; (8007310 <HAL_RCC_ClockConfig+0x1bc>)
 80071da:	4313      	orrs	r3, r2
 80071dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f003 0301 	and.w	r3, r3, #1
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d044      	beq.n	8007274 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	d107      	bne.n	8007202 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071f2:	4b47      	ldr	r3, [pc, #284]	; (8007310 <HAL_RCC_ClockConfig+0x1bc>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d119      	bne.n	8007232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80071fe:	2301      	movs	r3, #1
 8007200:	e07f      	b.n	8007302 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	2b02      	cmp	r3, #2
 8007208:	d003      	beq.n	8007212 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800720e:	2b03      	cmp	r3, #3
 8007210:	d107      	bne.n	8007222 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007212:	4b3f      	ldr	r3, [pc, #252]	; (8007310 <HAL_RCC_ClockConfig+0x1bc>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800721a:	2b00      	cmp	r3, #0
 800721c:	d109      	bne.n	8007232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800721e:	2301      	movs	r3, #1
 8007220:	e06f      	b.n	8007302 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007222:	4b3b      	ldr	r3, [pc, #236]	; (8007310 <HAL_RCC_ClockConfig+0x1bc>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f003 0302 	and.w	r3, r3, #2
 800722a:	2b00      	cmp	r3, #0
 800722c:	d101      	bne.n	8007232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800722e:	2301      	movs	r3, #1
 8007230:	e067      	b.n	8007302 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007232:	4b37      	ldr	r3, [pc, #220]	; (8007310 <HAL_RCC_ClockConfig+0x1bc>)
 8007234:	689b      	ldr	r3, [r3, #8]
 8007236:	f023 0203 	bic.w	r2, r3, #3
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	4934      	ldr	r1, [pc, #208]	; (8007310 <HAL_RCC_ClockConfig+0x1bc>)
 8007240:	4313      	orrs	r3, r2
 8007242:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007244:	f7fe f82c 	bl	80052a0 <HAL_GetTick>
 8007248:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800724a:	e00a      	b.n	8007262 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800724c:	f7fe f828 	bl	80052a0 <HAL_GetTick>
 8007250:	4602      	mov	r2, r0
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	1ad3      	subs	r3, r2, r3
 8007256:	f241 3288 	movw	r2, #5000	; 0x1388
 800725a:	4293      	cmp	r3, r2
 800725c:	d901      	bls.n	8007262 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800725e:	2303      	movs	r3, #3
 8007260:	e04f      	b.n	8007302 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007262:	4b2b      	ldr	r3, [pc, #172]	; (8007310 <HAL_RCC_ClockConfig+0x1bc>)
 8007264:	689b      	ldr	r3, [r3, #8]
 8007266:	f003 020c 	and.w	r2, r3, #12
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	009b      	lsls	r3, r3, #2
 8007270:	429a      	cmp	r2, r3
 8007272:	d1eb      	bne.n	800724c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007274:	4b25      	ldr	r3, [pc, #148]	; (800730c <HAL_RCC_ClockConfig+0x1b8>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f003 0307 	and.w	r3, r3, #7
 800727c:	683a      	ldr	r2, [r7, #0]
 800727e:	429a      	cmp	r2, r3
 8007280:	d20c      	bcs.n	800729c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007282:	4b22      	ldr	r3, [pc, #136]	; (800730c <HAL_RCC_ClockConfig+0x1b8>)
 8007284:	683a      	ldr	r2, [r7, #0]
 8007286:	b2d2      	uxtb	r2, r2
 8007288:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800728a:	4b20      	ldr	r3, [pc, #128]	; (800730c <HAL_RCC_ClockConfig+0x1b8>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f003 0307 	and.w	r3, r3, #7
 8007292:	683a      	ldr	r2, [r7, #0]
 8007294:	429a      	cmp	r2, r3
 8007296:	d001      	beq.n	800729c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007298:	2301      	movs	r3, #1
 800729a:	e032      	b.n	8007302 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f003 0304 	and.w	r3, r3, #4
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d008      	beq.n	80072ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80072a8:	4b19      	ldr	r3, [pc, #100]	; (8007310 <HAL_RCC_ClockConfig+0x1bc>)
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	68db      	ldr	r3, [r3, #12]
 80072b4:	4916      	ldr	r1, [pc, #88]	; (8007310 <HAL_RCC_ClockConfig+0x1bc>)
 80072b6:	4313      	orrs	r3, r2
 80072b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f003 0308 	and.w	r3, r3, #8
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d009      	beq.n	80072da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80072c6:	4b12      	ldr	r3, [pc, #72]	; (8007310 <HAL_RCC_ClockConfig+0x1bc>)
 80072c8:	689b      	ldr	r3, [r3, #8]
 80072ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	691b      	ldr	r3, [r3, #16]
 80072d2:	00db      	lsls	r3, r3, #3
 80072d4:	490e      	ldr	r1, [pc, #56]	; (8007310 <HAL_RCC_ClockConfig+0x1bc>)
 80072d6:	4313      	orrs	r3, r2
 80072d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80072da:	f000 f821 	bl	8007320 <HAL_RCC_GetSysClockFreq>
 80072de:	4602      	mov	r2, r0
 80072e0:	4b0b      	ldr	r3, [pc, #44]	; (8007310 <HAL_RCC_ClockConfig+0x1bc>)
 80072e2:	689b      	ldr	r3, [r3, #8]
 80072e4:	091b      	lsrs	r3, r3, #4
 80072e6:	f003 030f 	and.w	r3, r3, #15
 80072ea:	490a      	ldr	r1, [pc, #40]	; (8007314 <HAL_RCC_ClockConfig+0x1c0>)
 80072ec:	5ccb      	ldrb	r3, [r1, r3]
 80072ee:	fa22 f303 	lsr.w	r3, r2, r3
 80072f2:	4a09      	ldr	r2, [pc, #36]	; (8007318 <HAL_RCC_ClockConfig+0x1c4>)
 80072f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80072f6:	4b09      	ldr	r3, [pc, #36]	; (800731c <HAL_RCC_ClockConfig+0x1c8>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4618      	mov	r0, r3
 80072fc:	f7fd ff8c 	bl	8005218 <HAL_InitTick>

  return HAL_OK;
 8007300:	2300      	movs	r3, #0
}
 8007302:	4618      	mov	r0, r3
 8007304:	3710      	adds	r7, #16
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}
 800730a:	bf00      	nop
 800730c:	40023c00 	.word	0x40023c00
 8007310:	40023800 	.word	0x40023800
 8007314:	0800b458 	.word	0x0800b458
 8007318:	20000010 	.word	0x20000010
 800731c:	2000001c 	.word	0x2000001c

08007320 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007320:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007324:	b094      	sub	sp, #80	; 0x50
 8007326:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007328:	2300      	movs	r3, #0
 800732a:	647b      	str	r3, [r7, #68]	; 0x44
 800732c:	2300      	movs	r3, #0
 800732e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007330:	2300      	movs	r3, #0
 8007332:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007334:	2300      	movs	r3, #0
 8007336:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007338:	4b79      	ldr	r3, [pc, #484]	; (8007520 <HAL_RCC_GetSysClockFreq+0x200>)
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	f003 030c 	and.w	r3, r3, #12
 8007340:	2b08      	cmp	r3, #8
 8007342:	d00d      	beq.n	8007360 <HAL_RCC_GetSysClockFreq+0x40>
 8007344:	2b08      	cmp	r3, #8
 8007346:	f200 80e1 	bhi.w	800750c <HAL_RCC_GetSysClockFreq+0x1ec>
 800734a:	2b00      	cmp	r3, #0
 800734c:	d002      	beq.n	8007354 <HAL_RCC_GetSysClockFreq+0x34>
 800734e:	2b04      	cmp	r3, #4
 8007350:	d003      	beq.n	800735a <HAL_RCC_GetSysClockFreq+0x3a>
 8007352:	e0db      	b.n	800750c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007354:	4b73      	ldr	r3, [pc, #460]	; (8007524 <HAL_RCC_GetSysClockFreq+0x204>)
 8007356:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007358:	e0db      	b.n	8007512 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800735a:	4b72      	ldr	r3, [pc, #456]	; (8007524 <HAL_RCC_GetSysClockFreq+0x204>)
 800735c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800735e:	e0d8      	b.n	8007512 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007360:	4b6f      	ldr	r3, [pc, #444]	; (8007520 <HAL_RCC_GetSysClockFreq+0x200>)
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007368:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800736a:	4b6d      	ldr	r3, [pc, #436]	; (8007520 <HAL_RCC_GetSysClockFreq+0x200>)
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007372:	2b00      	cmp	r3, #0
 8007374:	d063      	beq.n	800743e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007376:	4b6a      	ldr	r3, [pc, #424]	; (8007520 <HAL_RCC_GetSysClockFreq+0x200>)
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	099b      	lsrs	r3, r3, #6
 800737c:	2200      	movs	r2, #0
 800737e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007380:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007384:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007388:	633b      	str	r3, [r7, #48]	; 0x30
 800738a:	2300      	movs	r3, #0
 800738c:	637b      	str	r3, [r7, #52]	; 0x34
 800738e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007392:	4622      	mov	r2, r4
 8007394:	462b      	mov	r3, r5
 8007396:	f04f 0000 	mov.w	r0, #0
 800739a:	f04f 0100 	mov.w	r1, #0
 800739e:	0159      	lsls	r1, r3, #5
 80073a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80073a4:	0150      	lsls	r0, r2, #5
 80073a6:	4602      	mov	r2, r0
 80073a8:	460b      	mov	r3, r1
 80073aa:	4621      	mov	r1, r4
 80073ac:	1a51      	subs	r1, r2, r1
 80073ae:	6139      	str	r1, [r7, #16]
 80073b0:	4629      	mov	r1, r5
 80073b2:	eb63 0301 	sbc.w	r3, r3, r1
 80073b6:	617b      	str	r3, [r7, #20]
 80073b8:	f04f 0200 	mov.w	r2, #0
 80073bc:	f04f 0300 	mov.w	r3, #0
 80073c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80073c4:	4659      	mov	r1, fp
 80073c6:	018b      	lsls	r3, r1, #6
 80073c8:	4651      	mov	r1, sl
 80073ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80073ce:	4651      	mov	r1, sl
 80073d0:	018a      	lsls	r2, r1, #6
 80073d2:	4651      	mov	r1, sl
 80073d4:	ebb2 0801 	subs.w	r8, r2, r1
 80073d8:	4659      	mov	r1, fp
 80073da:	eb63 0901 	sbc.w	r9, r3, r1
 80073de:	f04f 0200 	mov.w	r2, #0
 80073e2:	f04f 0300 	mov.w	r3, #0
 80073e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80073ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80073ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80073f2:	4690      	mov	r8, r2
 80073f4:	4699      	mov	r9, r3
 80073f6:	4623      	mov	r3, r4
 80073f8:	eb18 0303 	adds.w	r3, r8, r3
 80073fc:	60bb      	str	r3, [r7, #8]
 80073fe:	462b      	mov	r3, r5
 8007400:	eb49 0303 	adc.w	r3, r9, r3
 8007404:	60fb      	str	r3, [r7, #12]
 8007406:	f04f 0200 	mov.w	r2, #0
 800740a:	f04f 0300 	mov.w	r3, #0
 800740e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007412:	4629      	mov	r1, r5
 8007414:	028b      	lsls	r3, r1, #10
 8007416:	4621      	mov	r1, r4
 8007418:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800741c:	4621      	mov	r1, r4
 800741e:	028a      	lsls	r2, r1, #10
 8007420:	4610      	mov	r0, r2
 8007422:	4619      	mov	r1, r3
 8007424:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007426:	2200      	movs	r2, #0
 8007428:	62bb      	str	r3, [r7, #40]	; 0x28
 800742a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800742c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007430:	f7f9 fa34 	bl	800089c <__aeabi_uldivmod>
 8007434:	4602      	mov	r2, r0
 8007436:	460b      	mov	r3, r1
 8007438:	4613      	mov	r3, r2
 800743a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800743c:	e058      	b.n	80074f0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800743e:	4b38      	ldr	r3, [pc, #224]	; (8007520 <HAL_RCC_GetSysClockFreq+0x200>)
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	099b      	lsrs	r3, r3, #6
 8007444:	2200      	movs	r2, #0
 8007446:	4618      	mov	r0, r3
 8007448:	4611      	mov	r1, r2
 800744a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800744e:	623b      	str	r3, [r7, #32]
 8007450:	2300      	movs	r3, #0
 8007452:	627b      	str	r3, [r7, #36]	; 0x24
 8007454:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007458:	4642      	mov	r2, r8
 800745a:	464b      	mov	r3, r9
 800745c:	f04f 0000 	mov.w	r0, #0
 8007460:	f04f 0100 	mov.w	r1, #0
 8007464:	0159      	lsls	r1, r3, #5
 8007466:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800746a:	0150      	lsls	r0, r2, #5
 800746c:	4602      	mov	r2, r0
 800746e:	460b      	mov	r3, r1
 8007470:	4641      	mov	r1, r8
 8007472:	ebb2 0a01 	subs.w	sl, r2, r1
 8007476:	4649      	mov	r1, r9
 8007478:	eb63 0b01 	sbc.w	fp, r3, r1
 800747c:	f04f 0200 	mov.w	r2, #0
 8007480:	f04f 0300 	mov.w	r3, #0
 8007484:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007488:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800748c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007490:	ebb2 040a 	subs.w	r4, r2, sl
 8007494:	eb63 050b 	sbc.w	r5, r3, fp
 8007498:	f04f 0200 	mov.w	r2, #0
 800749c:	f04f 0300 	mov.w	r3, #0
 80074a0:	00eb      	lsls	r3, r5, #3
 80074a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80074a6:	00e2      	lsls	r2, r4, #3
 80074a8:	4614      	mov	r4, r2
 80074aa:	461d      	mov	r5, r3
 80074ac:	4643      	mov	r3, r8
 80074ae:	18e3      	adds	r3, r4, r3
 80074b0:	603b      	str	r3, [r7, #0]
 80074b2:	464b      	mov	r3, r9
 80074b4:	eb45 0303 	adc.w	r3, r5, r3
 80074b8:	607b      	str	r3, [r7, #4]
 80074ba:	f04f 0200 	mov.w	r2, #0
 80074be:	f04f 0300 	mov.w	r3, #0
 80074c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80074c6:	4629      	mov	r1, r5
 80074c8:	028b      	lsls	r3, r1, #10
 80074ca:	4621      	mov	r1, r4
 80074cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80074d0:	4621      	mov	r1, r4
 80074d2:	028a      	lsls	r2, r1, #10
 80074d4:	4610      	mov	r0, r2
 80074d6:	4619      	mov	r1, r3
 80074d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074da:	2200      	movs	r2, #0
 80074dc:	61bb      	str	r3, [r7, #24]
 80074de:	61fa      	str	r2, [r7, #28]
 80074e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80074e4:	f7f9 f9da 	bl	800089c <__aeabi_uldivmod>
 80074e8:	4602      	mov	r2, r0
 80074ea:	460b      	mov	r3, r1
 80074ec:	4613      	mov	r3, r2
 80074ee:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80074f0:	4b0b      	ldr	r3, [pc, #44]	; (8007520 <HAL_RCC_GetSysClockFreq+0x200>)
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	0c1b      	lsrs	r3, r3, #16
 80074f6:	f003 0303 	and.w	r3, r3, #3
 80074fa:	3301      	adds	r3, #1
 80074fc:	005b      	lsls	r3, r3, #1
 80074fe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007500:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007502:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007504:	fbb2 f3f3 	udiv	r3, r2, r3
 8007508:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800750a:	e002      	b.n	8007512 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800750c:	4b05      	ldr	r3, [pc, #20]	; (8007524 <HAL_RCC_GetSysClockFreq+0x204>)
 800750e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007510:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007512:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007514:	4618      	mov	r0, r3
 8007516:	3750      	adds	r7, #80	; 0x50
 8007518:	46bd      	mov	sp, r7
 800751a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800751e:	bf00      	nop
 8007520:	40023800 	.word	0x40023800
 8007524:	00f42400 	.word	0x00f42400

08007528 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007528:	b480      	push	{r7}
 800752a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800752c:	4b03      	ldr	r3, [pc, #12]	; (800753c <HAL_RCC_GetHCLKFreq+0x14>)
 800752e:	681b      	ldr	r3, [r3, #0]
}
 8007530:	4618      	mov	r0, r3
 8007532:	46bd      	mov	sp, r7
 8007534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007538:	4770      	bx	lr
 800753a:	bf00      	nop
 800753c:	20000010 	.word	0x20000010

08007540 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007544:	f7ff fff0 	bl	8007528 <HAL_RCC_GetHCLKFreq>
 8007548:	4602      	mov	r2, r0
 800754a:	4b05      	ldr	r3, [pc, #20]	; (8007560 <HAL_RCC_GetPCLK1Freq+0x20>)
 800754c:	689b      	ldr	r3, [r3, #8]
 800754e:	0a9b      	lsrs	r3, r3, #10
 8007550:	f003 0307 	and.w	r3, r3, #7
 8007554:	4903      	ldr	r1, [pc, #12]	; (8007564 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007556:	5ccb      	ldrb	r3, [r1, r3]
 8007558:	fa22 f303 	lsr.w	r3, r2, r3
}
 800755c:	4618      	mov	r0, r3
 800755e:	bd80      	pop	{r7, pc}
 8007560:	40023800 	.word	0x40023800
 8007564:	0800b468 	.word	0x0800b468

08007568 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800756c:	f7ff ffdc 	bl	8007528 <HAL_RCC_GetHCLKFreq>
 8007570:	4602      	mov	r2, r0
 8007572:	4b05      	ldr	r3, [pc, #20]	; (8007588 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007574:	689b      	ldr	r3, [r3, #8]
 8007576:	0b5b      	lsrs	r3, r3, #13
 8007578:	f003 0307 	and.w	r3, r3, #7
 800757c:	4903      	ldr	r1, [pc, #12]	; (800758c <HAL_RCC_GetPCLK2Freq+0x24>)
 800757e:	5ccb      	ldrb	r3, [r1, r3]
 8007580:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007584:	4618      	mov	r0, r3
 8007586:	bd80      	pop	{r7, pc}
 8007588:	40023800 	.word	0x40023800
 800758c:	0800b468 	.word	0x0800b468

08007590 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b082      	sub	sp, #8
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d101      	bne.n	80075a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800759e:	2301      	movs	r3, #1
 80075a0:	e07b      	b.n	800769a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d108      	bne.n	80075bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80075b2:	d009      	beq.n	80075c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2200      	movs	r2, #0
 80075b8:	61da      	str	r2, [r3, #28]
 80075ba:	e005      	b.n	80075c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2200      	movs	r2, #0
 80075c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2200      	movs	r2, #0
 80075c6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2200      	movs	r2, #0
 80075cc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80075d4:	b2db      	uxtb	r3, r3
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d106      	bne.n	80075e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2200      	movs	r2, #0
 80075de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f7fd f962 	bl	80048ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2202      	movs	r2, #2
 80075ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	681a      	ldr	r2, [r3, #0]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075fe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	689b      	ldr	r3, [r3, #8]
 800760c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007610:	431a      	orrs	r2, r3
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	68db      	ldr	r3, [r3, #12]
 8007616:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800761a:	431a      	orrs	r2, r3
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	691b      	ldr	r3, [r3, #16]
 8007620:	f003 0302 	and.w	r3, r3, #2
 8007624:	431a      	orrs	r2, r3
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	695b      	ldr	r3, [r3, #20]
 800762a:	f003 0301 	and.w	r3, r3, #1
 800762e:	431a      	orrs	r2, r3
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	699b      	ldr	r3, [r3, #24]
 8007634:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007638:	431a      	orrs	r2, r3
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	69db      	ldr	r3, [r3, #28]
 800763e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007642:	431a      	orrs	r2, r3
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6a1b      	ldr	r3, [r3, #32]
 8007648:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800764c:	ea42 0103 	orr.w	r1, r2, r3
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007654:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	430a      	orrs	r2, r1
 800765e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	699b      	ldr	r3, [r3, #24]
 8007664:	0c1b      	lsrs	r3, r3, #16
 8007666:	f003 0104 	and.w	r1, r3, #4
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800766e:	f003 0210 	and.w	r2, r3, #16
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	430a      	orrs	r2, r1
 8007678:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	69da      	ldr	r2, [r3, #28]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007688:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2200      	movs	r2, #0
 800768e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2201      	movs	r2, #1
 8007694:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007698:	2300      	movs	r3, #0
}
 800769a:	4618      	mov	r0, r3
 800769c:	3708      	adds	r7, #8
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}

080076a2 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80076a2:	b580      	push	{r7, lr}
 80076a4:	b084      	sub	sp, #16
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	60f8      	str	r0, [r7, #12]
 80076aa:	60b9      	str	r1, [r7, #8]
 80076ac:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d101      	bne.n	80076b8 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 80076b4:	2301      	movs	r3, #1
 80076b6:	e038      	b.n	800772a <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80076be:	b2db      	uxtb	r3, r3
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d106      	bne.n	80076d2 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2200      	movs	r2, #0
 80076c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80076cc:	68f8      	ldr	r0, [r7, #12]
 80076ce:	f7fd fa69 	bl	8004ba4 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681a      	ldr	r2, [r3, #0]
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	3308      	adds	r3, #8
 80076da:	4619      	mov	r1, r3
 80076dc:	4610      	mov	r0, r2
 80076de:	f001 fdc9 	bl	8009274 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	6818      	ldr	r0, [r3, #0]
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	689b      	ldr	r3, [r3, #8]
 80076ea:	461a      	mov	r2, r3
 80076ec:	68b9      	ldr	r1, [r7, #8]
 80076ee:	f001 fe2b 	bl	8009348 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	6858      	ldr	r0, [r3, #4]
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	689a      	ldr	r2, [r3, #8]
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076fe:	6879      	ldr	r1, [r7, #4]
 8007700:	f001 fe58 	bl	80093b4 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	68fa      	ldr	r2, [r7, #12]
 800770a:	6892      	ldr	r2, [r2, #8]
 800770c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	68fa      	ldr	r2, [r7, #12]
 8007716:	6892      	ldr	r2, [r2, #8]
 8007718:	f041 0101 	orr.w	r1, r1, #1
 800771c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	2201      	movs	r2, #1
 8007724:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 8007728:	2300      	movs	r3, #0
}
 800772a:	4618      	mov	r0, r3
 800772c:	3710      	adds	r7, #16
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}

08007732 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007732:	b580      	push	{r7, lr}
 8007734:	b082      	sub	sp, #8
 8007736:	af00      	add	r7, sp, #0
 8007738:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d101      	bne.n	8007744 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007740:	2301      	movs	r3, #1
 8007742:	e041      	b.n	80077c8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800774a:	b2db      	uxtb	r3, r3
 800774c:	2b00      	cmp	r3, #0
 800774e:	d106      	bne.n	800775e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2200      	movs	r2, #0
 8007754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f7fd f8ef 	bl	800493c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2202      	movs	r2, #2
 8007762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681a      	ldr	r2, [r3, #0]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	3304      	adds	r3, #4
 800776e:	4619      	mov	r1, r3
 8007770:	4610      	mov	r0, r2
 8007772:	f000 fa27 	bl	8007bc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2201      	movs	r2, #1
 800777a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2201      	movs	r2, #1
 8007782:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2201      	movs	r2, #1
 800778a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2201      	movs	r2, #1
 8007792:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2201      	movs	r2, #1
 800779a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2201      	movs	r2, #1
 80077a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2201      	movs	r2, #1
 80077aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2201      	movs	r2, #1
 80077b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2201      	movs	r2, #1
 80077ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2201      	movs	r2, #1
 80077c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80077c6:	2300      	movs	r3, #0
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3708      	adds	r7, #8
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}

080077d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b084      	sub	sp, #16
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d109      	bne.n	80077f4 <HAL_TIM_PWM_Start+0x24>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80077e6:	b2db      	uxtb	r3, r3
 80077e8:	2b01      	cmp	r3, #1
 80077ea:	bf14      	ite	ne
 80077ec:	2301      	movne	r3, #1
 80077ee:	2300      	moveq	r3, #0
 80077f0:	b2db      	uxtb	r3, r3
 80077f2:	e022      	b.n	800783a <HAL_TIM_PWM_Start+0x6a>
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	2b04      	cmp	r3, #4
 80077f8:	d109      	bne.n	800780e <HAL_TIM_PWM_Start+0x3e>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007800:	b2db      	uxtb	r3, r3
 8007802:	2b01      	cmp	r3, #1
 8007804:	bf14      	ite	ne
 8007806:	2301      	movne	r3, #1
 8007808:	2300      	moveq	r3, #0
 800780a:	b2db      	uxtb	r3, r3
 800780c:	e015      	b.n	800783a <HAL_TIM_PWM_Start+0x6a>
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	2b08      	cmp	r3, #8
 8007812:	d109      	bne.n	8007828 <HAL_TIM_PWM_Start+0x58>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800781a:	b2db      	uxtb	r3, r3
 800781c:	2b01      	cmp	r3, #1
 800781e:	bf14      	ite	ne
 8007820:	2301      	movne	r3, #1
 8007822:	2300      	moveq	r3, #0
 8007824:	b2db      	uxtb	r3, r3
 8007826:	e008      	b.n	800783a <HAL_TIM_PWM_Start+0x6a>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800782e:	b2db      	uxtb	r3, r3
 8007830:	2b01      	cmp	r3, #1
 8007832:	bf14      	ite	ne
 8007834:	2301      	movne	r3, #1
 8007836:	2300      	moveq	r3, #0
 8007838:	b2db      	uxtb	r3, r3
 800783a:	2b00      	cmp	r3, #0
 800783c:	d001      	beq.n	8007842 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800783e:	2301      	movs	r3, #1
 8007840:	e07c      	b.n	800793c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d104      	bne.n	8007852 <HAL_TIM_PWM_Start+0x82>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2202      	movs	r2, #2
 800784c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007850:	e013      	b.n	800787a <HAL_TIM_PWM_Start+0xaa>
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	2b04      	cmp	r3, #4
 8007856:	d104      	bne.n	8007862 <HAL_TIM_PWM_Start+0x92>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2202      	movs	r2, #2
 800785c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007860:	e00b      	b.n	800787a <HAL_TIM_PWM_Start+0xaa>
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	2b08      	cmp	r3, #8
 8007866:	d104      	bne.n	8007872 <HAL_TIM_PWM_Start+0xa2>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2202      	movs	r2, #2
 800786c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007870:	e003      	b.n	800787a <HAL_TIM_PWM_Start+0xaa>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2202      	movs	r2, #2
 8007876:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	2201      	movs	r2, #1
 8007880:	6839      	ldr	r1, [r7, #0]
 8007882:	4618      	mov	r0, r3
 8007884:	f000 fbee 	bl	8008064 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a2d      	ldr	r2, [pc, #180]	; (8007944 <HAL_TIM_PWM_Start+0x174>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d004      	beq.n	800789c <HAL_TIM_PWM_Start+0xcc>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a2c      	ldr	r2, [pc, #176]	; (8007948 <HAL_TIM_PWM_Start+0x178>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d101      	bne.n	80078a0 <HAL_TIM_PWM_Start+0xd0>
 800789c:	2301      	movs	r3, #1
 800789e:	e000      	b.n	80078a2 <HAL_TIM_PWM_Start+0xd2>
 80078a0:	2300      	movs	r3, #0
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d007      	beq.n	80078b6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80078b4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4a22      	ldr	r2, [pc, #136]	; (8007944 <HAL_TIM_PWM_Start+0x174>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d022      	beq.n	8007906 <HAL_TIM_PWM_Start+0x136>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078c8:	d01d      	beq.n	8007906 <HAL_TIM_PWM_Start+0x136>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4a1f      	ldr	r2, [pc, #124]	; (800794c <HAL_TIM_PWM_Start+0x17c>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d018      	beq.n	8007906 <HAL_TIM_PWM_Start+0x136>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4a1d      	ldr	r2, [pc, #116]	; (8007950 <HAL_TIM_PWM_Start+0x180>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d013      	beq.n	8007906 <HAL_TIM_PWM_Start+0x136>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4a1c      	ldr	r2, [pc, #112]	; (8007954 <HAL_TIM_PWM_Start+0x184>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d00e      	beq.n	8007906 <HAL_TIM_PWM_Start+0x136>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4a16      	ldr	r2, [pc, #88]	; (8007948 <HAL_TIM_PWM_Start+0x178>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d009      	beq.n	8007906 <HAL_TIM_PWM_Start+0x136>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4a18      	ldr	r2, [pc, #96]	; (8007958 <HAL_TIM_PWM_Start+0x188>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d004      	beq.n	8007906 <HAL_TIM_PWM_Start+0x136>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a16      	ldr	r2, [pc, #88]	; (800795c <HAL_TIM_PWM_Start+0x18c>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d111      	bne.n	800792a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	689b      	ldr	r3, [r3, #8]
 800790c:	f003 0307 	and.w	r3, r3, #7
 8007910:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	2b06      	cmp	r3, #6
 8007916:	d010      	beq.n	800793a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	681a      	ldr	r2, [r3, #0]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f042 0201 	orr.w	r2, r2, #1
 8007926:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007928:	e007      	b.n	800793a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	681a      	ldr	r2, [r3, #0]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f042 0201 	orr.w	r2, r2, #1
 8007938:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800793a:	2300      	movs	r3, #0
}
 800793c:	4618      	mov	r0, r3
 800793e:	3710      	adds	r7, #16
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}
 8007944:	40010000 	.word	0x40010000
 8007948:	40010400 	.word	0x40010400
 800794c:	40000400 	.word	0x40000400
 8007950:	40000800 	.word	0x40000800
 8007954:	40000c00 	.word	0x40000c00
 8007958:	40014000 	.word	0x40014000
 800795c:	40001800 	.word	0x40001800

08007960 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b082      	sub	sp, #8
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	2200      	movs	r2, #0
 8007970:	6839      	ldr	r1, [r7, #0]
 8007972:	4618      	mov	r0, r3
 8007974:	f000 fb76 	bl	8008064 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a2e      	ldr	r2, [pc, #184]	; (8007a38 <HAL_TIM_PWM_Stop+0xd8>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d004      	beq.n	800798c <HAL_TIM_PWM_Stop+0x2c>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a2d      	ldr	r2, [pc, #180]	; (8007a3c <HAL_TIM_PWM_Stop+0xdc>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d101      	bne.n	8007990 <HAL_TIM_PWM_Stop+0x30>
 800798c:	2301      	movs	r3, #1
 800798e:	e000      	b.n	8007992 <HAL_TIM_PWM_Stop+0x32>
 8007990:	2300      	movs	r3, #0
 8007992:	2b00      	cmp	r3, #0
 8007994:	d017      	beq.n	80079c6 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	6a1a      	ldr	r2, [r3, #32]
 800799c:	f241 1311 	movw	r3, #4369	; 0x1111
 80079a0:	4013      	ands	r3, r2
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d10f      	bne.n	80079c6 <HAL_TIM_PWM_Stop+0x66>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	6a1a      	ldr	r2, [r3, #32]
 80079ac:	f240 4344 	movw	r3, #1092	; 0x444
 80079b0:	4013      	ands	r3, r2
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d107      	bne.n	80079c6 <HAL_TIM_PWM_Stop+0x66>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80079c4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	6a1a      	ldr	r2, [r3, #32]
 80079cc:	f241 1311 	movw	r3, #4369	; 0x1111
 80079d0:	4013      	ands	r3, r2
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d10f      	bne.n	80079f6 <HAL_TIM_PWM_Stop+0x96>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	6a1a      	ldr	r2, [r3, #32]
 80079dc:	f240 4344 	movw	r3, #1092	; 0x444
 80079e0:	4013      	ands	r3, r2
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d107      	bne.n	80079f6 <HAL_TIM_PWM_Stop+0x96>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	681a      	ldr	r2, [r3, #0]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f022 0201 	bic.w	r2, r2, #1
 80079f4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d104      	bne.n	8007a06 <HAL_TIM_PWM_Stop+0xa6>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2201      	movs	r2, #1
 8007a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a04:	e013      	b.n	8007a2e <HAL_TIM_PWM_Stop+0xce>
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	2b04      	cmp	r3, #4
 8007a0a:	d104      	bne.n	8007a16 <HAL_TIM_PWM_Stop+0xb6>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2201      	movs	r2, #1
 8007a10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a14:	e00b      	b.n	8007a2e <HAL_TIM_PWM_Stop+0xce>
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	2b08      	cmp	r3, #8
 8007a1a:	d104      	bne.n	8007a26 <HAL_TIM_PWM_Stop+0xc6>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2201      	movs	r2, #1
 8007a20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a24:	e003      	b.n	8007a2e <HAL_TIM_PWM_Stop+0xce>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2201      	movs	r2, #1
 8007a2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8007a2e:	2300      	movs	r3, #0
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3708      	adds	r7, #8
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}
 8007a38:	40010000 	.word	0x40010000
 8007a3c:	40010400 	.word	0x40010400

08007a40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b086      	sub	sp, #24
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	60f8      	str	r0, [r7, #12]
 8007a48:	60b9      	str	r1, [r7, #8]
 8007a4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a56:	2b01      	cmp	r3, #1
 8007a58:	d101      	bne.n	8007a5e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007a5a:	2302      	movs	r3, #2
 8007a5c:	e0ae      	b.n	8007bbc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2201      	movs	r2, #1
 8007a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2b0c      	cmp	r3, #12
 8007a6a:	f200 809f 	bhi.w	8007bac <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007a6e:	a201      	add	r2, pc, #4	; (adr r2, 8007a74 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a74:	08007aa9 	.word	0x08007aa9
 8007a78:	08007bad 	.word	0x08007bad
 8007a7c:	08007bad 	.word	0x08007bad
 8007a80:	08007bad 	.word	0x08007bad
 8007a84:	08007ae9 	.word	0x08007ae9
 8007a88:	08007bad 	.word	0x08007bad
 8007a8c:	08007bad 	.word	0x08007bad
 8007a90:	08007bad 	.word	0x08007bad
 8007a94:	08007b2b 	.word	0x08007b2b
 8007a98:	08007bad 	.word	0x08007bad
 8007a9c:	08007bad 	.word	0x08007bad
 8007aa0:	08007bad 	.word	0x08007bad
 8007aa4:	08007b6b 	.word	0x08007b6b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	68b9      	ldr	r1, [r7, #8]
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f000 f928 	bl	8007d04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	699a      	ldr	r2, [r3, #24]
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f042 0208 	orr.w	r2, r2, #8
 8007ac2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	699a      	ldr	r2, [r3, #24]
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f022 0204 	bic.w	r2, r2, #4
 8007ad2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	6999      	ldr	r1, [r3, #24]
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	691a      	ldr	r2, [r3, #16]
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	430a      	orrs	r2, r1
 8007ae4:	619a      	str	r2, [r3, #24]
      break;
 8007ae6:	e064      	b.n	8007bb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	68b9      	ldr	r1, [r7, #8]
 8007aee:	4618      	mov	r0, r3
 8007af0:	f000 f978 	bl	8007de4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	699a      	ldr	r2, [r3, #24]
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	699a      	ldr	r2, [r3, #24]
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	6999      	ldr	r1, [r3, #24]
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	691b      	ldr	r3, [r3, #16]
 8007b1e:	021a      	lsls	r2, r3, #8
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	430a      	orrs	r2, r1
 8007b26:	619a      	str	r2, [r3, #24]
      break;
 8007b28:	e043      	b.n	8007bb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	68b9      	ldr	r1, [r7, #8]
 8007b30:	4618      	mov	r0, r3
 8007b32:	f000 f9cd 	bl	8007ed0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	69da      	ldr	r2, [r3, #28]
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f042 0208 	orr.w	r2, r2, #8
 8007b44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	69da      	ldr	r2, [r3, #28]
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f022 0204 	bic.w	r2, r2, #4
 8007b54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	69d9      	ldr	r1, [r3, #28]
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	691a      	ldr	r2, [r3, #16]
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	430a      	orrs	r2, r1
 8007b66:	61da      	str	r2, [r3, #28]
      break;
 8007b68:	e023      	b.n	8007bb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	68b9      	ldr	r1, [r7, #8]
 8007b70:	4618      	mov	r0, r3
 8007b72:	f000 fa21 	bl	8007fb8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	69da      	ldr	r2, [r3, #28]
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	69da      	ldr	r2, [r3, #28]
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	69d9      	ldr	r1, [r3, #28]
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	691b      	ldr	r3, [r3, #16]
 8007ba0:	021a      	lsls	r2, r3, #8
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	430a      	orrs	r2, r1
 8007ba8:	61da      	str	r2, [r3, #28]
      break;
 8007baa:	e002      	b.n	8007bb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007bac:	2301      	movs	r3, #1
 8007bae:	75fb      	strb	r3, [r7, #23]
      break;
 8007bb0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007bba:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3718      	adds	r7, #24
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}

08007bc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b085      	sub	sp, #20
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	4a40      	ldr	r2, [pc, #256]	; (8007cd8 <TIM_Base_SetConfig+0x114>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d013      	beq.n	8007c04 <TIM_Base_SetConfig+0x40>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007be2:	d00f      	beq.n	8007c04 <TIM_Base_SetConfig+0x40>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	4a3d      	ldr	r2, [pc, #244]	; (8007cdc <TIM_Base_SetConfig+0x118>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d00b      	beq.n	8007c04 <TIM_Base_SetConfig+0x40>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	4a3c      	ldr	r2, [pc, #240]	; (8007ce0 <TIM_Base_SetConfig+0x11c>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d007      	beq.n	8007c04 <TIM_Base_SetConfig+0x40>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	4a3b      	ldr	r2, [pc, #236]	; (8007ce4 <TIM_Base_SetConfig+0x120>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d003      	beq.n	8007c04 <TIM_Base_SetConfig+0x40>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	4a3a      	ldr	r2, [pc, #232]	; (8007ce8 <TIM_Base_SetConfig+0x124>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d108      	bne.n	8007c16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	68fa      	ldr	r2, [r7, #12]
 8007c12:	4313      	orrs	r3, r2
 8007c14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	4a2f      	ldr	r2, [pc, #188]	; (8007cd8 <TIM_Base_SetConfig+0x114>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d02b      	beq.n	8007c76 <TIM_Base_SetConfig+0xb2>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c24:	d027      	beq.n	8007c76 <TIM_Base_SetConfig+0xb2>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	4a2c      	ldr	r2, [pc, #176]	; (8007cdc <TIM_Base_SetConfig+0x118>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d023      	beq.n	8007c76 <TIM_Base_SetConfig+0xb2>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	4a2b      	ldr	r2, [pc, #172]	; (8007ce0 <TIM_Base_SetConfig+0x11c>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d01f      	beq.n	8007c76 <TIM_Base_SetConfig+0xb2>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	4a2a      	ldr	r2, [pc, #168]	; (8007ce4 <TIM_Base_SetConfig+0x120>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d01b      	beq.n	8007c76 <TIM_Base_SetConfig+0xb2>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	4a29      	ldr	r2, [pc, #164]	; (8007ce8 <TIM_Base_SetConfig+0x124>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d017      	beq.n	8007c76 <TIM_Base_SetConfig+0xb2>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	4a28      	ldr	r2, [pc, #160]	; (8007cec <TIM_Base_SetConfig+0x128>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d013      	beq.n	8007c76 <TIM_Base_SetConfig+0xb2>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	4a27      	ldr	r2, [pc, #156]	; (8007cf0 <TIM_Base_SetConfig+0x12c>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d00f      	beq.n	8007c76 <TIM_Base_SetConfig+0xb2>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	4a26      	ldr	r2, [pc, #152]	; (8007cf4 <TIM_Base_SetConfig+0x130>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d00b      	beq.n	8007c76 <TIM_Base_SetConfig+0xb2>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	4a25      	ldr	r2, [pc, #148]	; (8007cf8 <TIM_Base_SetConfig+0x134>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d007      	beq.n	8007c76 <TIM_Base_SetConfig+0xb2>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	4a24      	ldr	r2, [pc, #144]	; (8007cfc <TIM_Base_SetConfig+0x138>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d003      	beq.n	8007c76 <TIM_Base_SetConfig+0xb2>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	4a23      	ldr	r2, [pc, #140]	; (8007d00 <TIM_Base_SetConfig+0x13c>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d108      	bne.n	8007c88 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	68db      	ldr	r3, [r3, #12]
 8007c82:	68fa      	ldr	r2, [r7, #12]
 8007c84:	4313      	orrs	r3, r2
 8007c86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	695b      	ldr	r3, [r3, #20]
 8007c92:	4313      	orrs	r3, r2
 8007c94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	68fa      	ldr	r2, [r7, #12]
 8007c9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	689a      	ldr	r2, [r3, #8]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	681a      	ldr	r2, [r3, #0]
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	4a0a      	ldr	r2, [pc, #40]	; (8007cd8 <TIM_Base_SetConfig+0x114>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d003      	beq.n	8007cbc <TIM_Base_SetConfig+0xf8>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	4a0c      	ldr	r2, [pc, #48]	; (8007ce8 <TIM_Base_SetConfig+0x124>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d103      	bne.n	8007cc4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	691a      	ldr	r2, [r3, #16]
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	615a      	str	r2, [r3, #20]
}
 8007cca:	bf00      	nop
 8007ccc:	3714      	adds	r7, #20
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd4:	4770      	bx	lr
 8007cd6:	bf00      	nop
 8007cd8:	40010000 	.word	0x40010000
 8007cdc:	40000400 	.word	0x40000400
 8007ce0:	40000800 	.word	0x40000800
 8007ce4:	40000c00 	.word	0x40000c00
 8007ce8:	40010400 	.word	0x40010400
 8007cec:	40014000 	.word	0x40014000
 8007cf0:	40014400 	.word	0x40014400
 8007cf4:	40014800 	.word	0x40014800
 8007cf8:	40001800 	.word	0x40001800
 8007cfc:	40001c00 	.word	0x40001c00
 8007d00:	40002000 	.word	0x40002000

08007d04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b087      	sub	sp, #28
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
 8007d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6a1b      	ldr	r3, [r3, #32]
 8007d12:	f023 0201 	bic.w	r2, r3, #1
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6a1b      	ldr	r3, [r3, #32]
 8007d1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	685b      	ldr	r3, [r3, #4]
 8007d24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	699b      	ldr	r3, [r3, #24]
 8007d2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	f023 0303 	bic.w	r3, r3, #3
 8007d3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	68fa      	ldr	r2, [r7, #12]
 8007d42:	4313      	orrs	r3, r2
 8007d44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	f023 0302 	bic.w	r3, r3, #2
 8007d4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	689b      	ldr	r3, [r3, #8]
 8007d52:	697a      	ldr	r2, [r7, #20]
 8007d54:	4313      	orrs	r3, r2
 8007d56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	4a20      	ldr	r2, [pc, #128]	; (8007ddc <TIM_OC1_SetConfig+0xd8>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d003      	beq.n	8007d68 <TIM_OC1_SetConfig+0x64>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	4a1f      	ldr	r2, [pc, #124]	; (8007de0 <TIM_OC1_SetConfig+0xdc>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d10c      	bne.n	8007d82 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	f023 0308 	bic.w	r3, r3, #8
 8007d6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	68db      	ldr	r3, [r3, #12]
 8007d74:	697a      	ldr	r2, [r7, #20]
 8007d76:	4313      	orrs	r3, r2
 8007d78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	f023 0304 	bic.w	r3, r3, #4
 8007d80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	4a15      	ldr	r2, [pc, #84]	; (8007ddc <TIM_OC1_SetConfig+0xd8>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d003      	beq.n	8007d92 <TIM_OC1_SetConfig+0x8e>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	4a14      	ldr	r2, [pc, #80]	; (8007de0 <TIM_OC1_SetConfig+0xdc>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d111      	bne.n	8007db6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007da0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	695b      	ldr	r3, [r3, #20]
 8007da6:	693a      	ldr	r2, [r7, #16]
 8007da8:	4313      	orrs	r3, r2
 8007daa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	699b      	ldr	r3, [r3, #24]
 8007db0:	693a      	ldr	r2, [r7, #16]
 8007db2:	4313      	orrs	r3, r2
 8007db4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	693a      	ldr	r2, [r7, #16]
 8007dba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	68fa      	ldr	r2, [r7, #12]
 8007dc0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	685a      	ldr	r2, [r3, #4]
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	697a      	ldr	r2, [r7, #20]
 8007dce:	621a      	str	r2, [r3, #32]
}
 8007dd0:	bf00      	nop
 8007dd2:	371c      	adds	r7, #28
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dda:	4770      	bx	lr
 8007ddc:	40010000 	.word	0x40010000
 8007de0:	40010400 	.word	0x40010400

08007de4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007de4:	b480      	push	{r7}
 8007de6:	b087      	sub	sp, #28
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
 8007dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6a1b      	ldr	r3, [r3, #32]
 8007df2:	f023 0210 	bic.w	r2, r3, #16
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6a1b      	ldr	r3, [r3, #32]
 8007dfe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	685b      	ldr	r3, [r3, #4]
 8007e04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	699b      	ldr	r3, [r3, #24]
 8007e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	021b      	lsls	r3, r3, #8
 8007e22:	68fa      	ldr	r2, [r7, #12]
 8007e24:	4313      	orrs	r3, r2
 8007e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	f023 0320 	bic.w	r3, r3, #32
 8007e2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	689b      	ldr	r3, [r3, #8]
 8007e34:	011b      	lsls	r3, r3, #4
 8007e36:	697a      	ldr	r2, [r7, #20]
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	4a22      	ldr	r2, [pc, #136]	; (8007ec8 <TIM_OC2_SetConfig+0xe4>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d003      	beq.n	8007e4c <TIM_OC2_SetConfig+0x68>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	4a21      	ldr	r2, [pc, #132]	; (8007ecc <TIM_OC2_SetConfig+0xe8>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d10d      	bne.n	8007e68 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	68db      	ldr	r3, [r3, #12]
 8007e58:	011b      	lsls	r3, r3, #4
 8007e5a:	697a      	ldr	r2, [r7, #20]
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e66:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	4a17      	ldr	r2, [pc, #92]	; (8007ec8 <TIM_OC2_SetConfig+0xe4>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d003      	beq.n	8007e78 <TIM_OC2_SetConfig+0x94>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	4a16      	ldr	r2, [pc, #88]	; (8007ecc <TIM_OC2_SetConfig+0xe8>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d113      	bne.n	8007ea0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007e78:	693b      	ldr	r3, [r7, #16]
 8007e7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007e7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007e86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	695b      	ldr	r3, [r3, #20]
 8007e8c:	009b      	lsls	r3, r3, #2
 8007e8e:	693a      	ldr	r2, [r7, #16]
 8007e90:	4313      	orrs	r3, r2
 8007e92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	699b      	ldr	r3, [r3, #24]
 8007e98:	009b      	lsls	r3, r3, #2
 8007e9a:	693a      	ldr	r2, [r7, #16]
 8007e9c:	4313      	orrs	r3, r2
 8007e9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	693a      	ldr	r2, [r7, #16]
 8007ea4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	68fa      	ldr	r2, [r7, #12]
 8007eaa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	685a      	ldr	r2, [r3, #4]
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	697a      	ldr	r2, [r7, #20]
 8007eb8:	621a      	str	r2, [r3, #32]
}
 8007eba:	bf00      	nop
 8007ebc:	371c      	adds	r7, #28
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec4:	4770      	bx	lr
 8007ec6:	bf00      	nop
 8007ec8:	40010000 	.word	0x40010000
 8007ecc:	40010400 	.word	0x40010400

08007ed0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b087      	sub	sp, #28
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
 8007ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6a1b      	ldr	r3, [r3, #32]
 8007ede:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6a1b      	ldr	r3, [r3, #32]
 8007eea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	685b      	ldr	r3, [r3, #4]
 8007ef0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	69db      	ldr	r3, [r3, #28]
 8007ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007efe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	f023 0303 	bic.w	r3, r3, #3
 8007f06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	68fa      	ldr	r2, [r7, #12]
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007f18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	689b      	ldr	r3, [r3, #8]
 8007f1e:	021b      	lsls	r3, r3, #8
 8007f20:	697a      	ldr	r2, [r7, #20]
 8007f22:	4313      	orrs	r3, r2
 8007f24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	4a21      	ldr	r2, [pc, #132]	; (8007fb0 <TIM_OC3_SetConfig+0xe0>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d003      	beq.n	8007f36 <TIM_OC3_SetConfig+0x66>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	4a20      	ldr	r2, [pc, #128]	; (8007fb4 <TIM_OC3_SetConfig+0xe4>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d10d      	bne.n	8007f52 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007f3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	68db      	ldr	r3, [r3, #12]
 8007f42:	021b      	lsls	r3, r3, #8
 8007f44:	697a      	ldr	r2, [r7, #20]
 8007f46:	4313      	orrs	r3, r2
 8007f48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007f50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	4a16      	ldr	r2, [pc, #88]	; (8007fb0 <TIM_OC3_SetConfig+0xe0>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d003      	beq.n	8007f62 <TIM_OC3_SetConfig+0x92>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	4a15      	ldr	r2, [pc, #84]	; (8007fb4 <TIM_OC3_SetConfig+0xe4>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d113      	bne.n	8007f8a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007f6a:	693b      	ldr	r3, [r7, #16]
 8007f6c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007f70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	695b      	ldr	r3, [r3, #20]
 8007f76:	011b      	lsls	r3, r3, #4
 8007f78:	693a      	ldr	r2, [r7, #16]
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	699b      	ldr	r3, [r3, #24]
 8007f82:	011b      	lsls	r3, r3, #4
 8007f84:	693a      	ldr	r2, [r7, #16]
 8007f86:	4313      	orrs	r3, r2
 8007f88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	693a      	ldr	r2, [r7, #16]
 8007f8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	68fa      	ldr	r2, [r7, #12]
 8007f94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	685a      	ldr	r2, [r3, #4]
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	697a      	ldr	r2, [r7, #20]
 8007fa2:	621a      	str	r2, [r3, #32]
}
 8007fa4:	bf00      	nop
 8007fa6:	371c      	adds	r7, #28
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fae:	4770      	bx	lr
 8007fb0:	40010000 	.word	0x40010000
 8007fb4:	40010400 	.word	0x40010400

08007fb8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b087      	sub	sp, #28
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
 8007fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6a1b      	ldr	r3, [r3, #32]
 8007fc6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6a1b      	ldr	r3, [r3, #32]
 8007fd2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	685b      	ldr	r3, [r3, #4]
 8007fd8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	69db      	ldr	r3, [r3, #28]
 8007fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fe6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007fee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	021b      	lsls	r3, r3, #8
 8007ff6:	68fa      	ldr	r2, [r7, #12]
 8007ff8:	4313      	orrs	r3, r2
 8007ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008002:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	689b      	ldr	r3, [r3, #8]
 8008008:	031b      	lsls	r3, r3, #12
 800800a:	693a      	ldr	r2, [r7, #16]
 800800c:	4313      	orrs	r3, r2
 800800e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	4a12      	ldr	r2, [pc, #72]	; (800805c <TIM_OC4_SetConfig+0xa4>)
 8008014:	4293      	cmp	r3, r2
 8008016:	d003      	beq.n	8008020 <TIM_OC4_SetConfig+0x68>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	4a11      	ldr	r2, [pc, #68]	; (8008060 <TIM_OC4_SetConfig+0xa8>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d109      	bne.n	8008034 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008020:	697b      	ldr	r3, [r7, #20]
 8008022:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008026:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	695b      	ldr	r3, [r3, #20]
 800802c:	019b      	lsls	r3, r3, #6
 800802e:	697a      	ldr	r2, [r7, #20]
 8008030:	4313      	orrs	r3, r2
 8008032:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	697a      	ldr	r2, [r7, #20]
 8008038:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	68fa      	ldr	r2, [r7, #12]
 800803e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	685a      	ldr	r2, [r3, #4]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	693a      	ldr	r2, [r7, #16]
 800804c:	621a      	str	r2, [r3, #32]
}
 800804e:	bf00      	nop
 8008050:	371c      	adds	r7, #28
 8008052:	46bd      	mov	sp, r7
 8008054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008058:	4770      	bx	lr
 800805a:	bf00      	nop
 800805c:	40010000 	.word	0x40010000
 8008060:	40010400 	.word	0x40010400

08008064 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008064:	b480      	push	{r7}
 8008066:	b087      	sub	sp, #28
 8008068:	af00      	add	r7, sp, #0
 800806a:	60f8      	str	r0, [r7, #12]
 800806c:	60b9      	str	r1, [r7, #8]
 800806e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	f003 031f 	and.w	r3, r3, #31
 8008076:	2201      	movs	r2, #1
 8008078:	fa02 f303 	lsl.w	r3, r2, r3
 800807c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	6a1a      	ldr	r2, [r3, #32]
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	43db      	mvns	r3, r3
 8008086:	401a      	ands	r2, r3
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	6a1a      	ldr	r2, [r3, #32]
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	f003 031f 	and.w	r3, r3, #31
 8008096:	6879      	ldr	r1, [r7, #4]
 8008098:	fa01 f303 	lsl.w	r3, r1, r3
 800809c:	431a      	orrs	r2, r3
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	621a      	str	r2, [r3, #32]
}
 80080a2:	bf00      	nop
 80080a4:	371c      	adds	r7, #28
 80080a6:	46bd      	mov	sp, r7
 80080a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ac:	4770      	bx	lr
	...

080080b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b085      	sub	sp, #20
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
 80080b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	d101      	bne.n	80080c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80080c4:	2302      	movs	r3, #2
 80080c6:	e05a      	b.n	800817e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2201      	movs	r2, #1
 80080cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2202      	movs	r2, #2
 80080d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	685b      	ldr	r3, [r3, #4]
 80080de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	689b      	ldr	r3, [r3, #8]
 80080e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	68fa      	ldr	r2, [r7, #12]
 80080f6:	4313      	orrs	r3, r2
 80080f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	68fa      	ldr	r2, [r7, #12]
 8008100:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4a21      	ldr	r2, [pc, #132]	; (800818c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008108:	4293      	cmp	r3, r2
 800810a:	d022      	beq.n	8008152 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008114:	d01d      	beq.n	8008152 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4a1d      	ldr	r2, [pc, #116]	; (8008190 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d018      	beq.n	8008152 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4a1b      	ldr	r2, [pc, #108]	; (8008194 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d013      	beq.n	8008152 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	4a1a      	ldr	r2, [pc, #104]	; (8008198 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d00e      	beq.n	8008152 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4a18      	ldr	r2, [pc, #96]	; (800819c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d009      	beq.n	8008152 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	4a17      	ldr	r2, [pc, #92]	; (80081a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008144:	4293      	cmp	r3, r2
 8008146:	d004      	beq.n	8008152 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4a15      	ldr	r2, [pc, #84]	; (80081a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d10c      	bne.n	800816c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008158:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	685b      	ldr	r3, [r3, #4]
 800815e:	68ba      	ldr	r2, [r7, #8]
 8008160:	4313      	orrs	r3, r2
 8008162:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	68ba      	ldr	r2, [r7, #8]
 800816a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2201      	movs	r2, #1
 8008170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2200      	movs	r2, #0
 8008178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800817c:	2300      	movs	r3, #0
}
 800817e:	4618      	mov	r0, r3
 8008180:	3714      	adds	r7, #20
 8008182:	46bd      	mov	sp, r7
 8008184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008188:	4770      	bx	lr
 800818a:	bf00      	nop
 800818c:	40010000 	.word	0x40010000
 8008190:	40000400 	.word	0x40000400
 8008194:	40000800 	.word	0x40000800
 8008198:	40000c00 	.word	0x40000c00
 800819c:	40010400 	.word	0x40010400
 80081a0:	40014000 	.word	0x40014000
 80081a4:	40001800 	.word	0x40001800

080081a8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b085      	sub	sp, #20
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
 80081b0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80081b2:	2300      	movs	r3, #0
 80081b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081bc:	2b01      	cmp	r3, #1
 80081be:	d101      	bne.n	80081c4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80081c0:	2302      	movs	r3, #2
 80081c2:	e03d      	b.n	8008240 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2201      	movs	r2, #1
 80081c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	68db      	ldr	r3, [r3, #12]
 80081d6:	4313      	orrs	r3, r2
 80081d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	689b      	ldr	r3, [r3, #8]
 80081e4:	4313      	orrs	r3, r2
 80081e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	685b      	ldr	r3, [r3, #4]
 80081f2:	4313      	orrs	r3, r2
 80081f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4313      	orrs	r3, r2
 8008202:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	691b      	ldr	r3, [r3, #16]
 800820e:	4313      	orrs	r3, r2
 8008210:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	695b      	ldr	r3, [r3, #20]
 800821c:	4313      	orrs	r3, r2
 800821e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	69db      	ldr	r3, [r3, #28]
 800822a:	4313      	orrs	r3, r2
 800822c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	68fa      	ldr	r2, [r7, #12]
 8008234:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2200      	movs	r2, #0
 800823a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800823e:	2300      	movs	r3, #0
}
 8008240:	4618      	mov	r0, r3
 8008242:	3714      	adds	r7, #20
 8008244:	46bd      	mov	sp, r7
 8008246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824a:	4770      	bx	lr

0800824c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b082      	sub	sp, #8
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d101      	bne.n	800825e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800825a:	2301      	movs	r3, #1
 800825c:	e03f      	b.n	80082de <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008264:	b2db      	uxtb	r3, r3
 8008266:	2b00      	cmp	r3, #0
 8008268:	d106      	bne.n	8008278 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2200      	movs	r2, #0
 800826e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f7fc fbbe 	bl	80049f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2224      	movs	r2, #36	; 0x24
 800827c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	68da      	ldr	r2, [r3, #12]
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800828e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f000 fd7b 	bl	8008d8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	691a      	ldr	r2, [r3, #16]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80082a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	695a      	ldr	r2, [r3, #20]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80082b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	68da      	ldr	r2, [r3, #12]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80082c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2200      	movs	r2, #0
 80082ca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2220      	movs	r2, #32
 80082d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2220      	movs	r2, #32
 80082d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80082dc:	2300      	movs	r3, #0
}
 80082de:	4618      	mov	r0, r3
 80082e0:	3708      	adds	r7, #8
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}

080082e6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80082e6:	b580      	push	{r7, lr}
 80082e8:	b08a      	sub	sp, #40	; 0x28
 80082ea:	af02      	add	r7, sp, #8
 80082ec:	60f8      	str	r0, [r7, #12]
 80082ee:	60b9      	str	r1, [r7, #8]
 80082f0:	603b      	str	r3, [r7, #0]
 80082f2:	4613      	mov	r3, r2
 80082f4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80082f6:	2300      	movs	r3, #0
 80082f8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008300:	b2db      	uxtb	r3, r3
 8008302:	2b20      	cmp	r3, #32
 8008304:	d17c      	bne.n	8008400 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d002      	beq.n	8008312 <HAL_UART_Transmit+0x2c>
 800830c:	88fb      	ldrh	r3, [r7, #6]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d101      	bne.n	8008316 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008312:	2301      	movs	r3, #1
 8008314:	e075      	b.n	8008402 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800831c:	2b01      	cmp	r3, #1
 800831e:	d101      	bne.n	8008324 <HAL_UART_Transmit+0x3e>
 8008320:	2302      	movs	r3, #2
 8008322:	e06e      	b.n	8008402 <HAL_UART_Transmit+0x11c>
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2201      	movs	r2, #1
 8008328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	2200      	movs	r2, #0
 8008330:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	2221      	movs	r2, #33	; 0x21
 8008336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800833a:	f7fc ffb1 	bl	80052a0 <HAL_GetTick>
 800833e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	88fa      	ldrh	r2, [r7, #6]
 8008344:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	88fa      	ldrh	r2, [r7, #6]
 800834a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	689b      	ldr	r3, [r3, #8]
 8008350:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008354:	d108      	bne.n	8008368 <HAL_UART_Transmit+0x82>
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	691b      	ldr	r3, [r3, #16]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d104      	bne.n	8008368 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800835e:	2300      	movs	r3, #0
 8008360:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	61bb      	str	r3, [r7, #24]
 8008366:	e003      	b.n	8008370 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800836c:	2300      	movs	r3, #0
 800836e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	2200      	movs	r2, #0
 8008374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008378:	e02a      	b.n	80083d0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	9300      	str	r3, [sp, #0]
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	2200      	movs	r2, #0
 8008382:	2180      	movs	r1, #128	; 0x80
 8008384:	68f8      	ldr	r0, [r7, #12]
 8008386:	f000 faf9 	bl	800897c <UART_WaitOnFlagUntilTimeout>
 800838a:	4603      	mov	r3, r0
 800838c:	2b00      	cmp	r3, #0
 800838e:	d001      	beq.n	8008394 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008390:	2303      	movs	r3, #3
 8008392:	e036      	b.n	8008402 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008394:	69fb      	ldr	r3, [r7, #28]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d10b      	bne.n	80083b2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800839a:	69bb      	ldr	r3, [r7, #24]
 800839c:	881b      	ldrh	r3, [r3, #0]
 800839e:	461a      	mov	r2, r3
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80083a8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80083aa:	69bb      	ldr	r3, [r7, #24]
 80083ac:	3302      	adds	r3, #2
 80083ae:	61bb      	str	r3, [r7, #24]
 80083b0:	e007      	b.n	80083c2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80083b2:	69fb      	ldr	r3, [r7, #28]
 80083b4:	781a      	ldrb	r2, [r3, #0]
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80083bc:	69fb      	ldr	r3, [r7, #28]
 80083be:	3301      	adds	r3, #1
 80083c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80083c6:	b29b      	uxth	r3, r3
 80083c8:	3b01      	subs	r3, #1
 80083ca:	b29a      	uxth	r2, r3
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80083d4:	b29b      	uxth	r3, r3
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d1cf      	bne.n	800837a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	9300      	str	r3, [sp, #0]
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	2200      	movs	r2, #0
 80083e2:	2140      	movs	r1, #64	; 0x40
 80083e4:	68f8      	ldr	r0, [r7, #12]
 80083e6:	f000 fac9 	bl	800897c <UART_WaitOnFlagUntilTimeout>
 80083ea:	4603      	mov	r3, r0
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d001      	beq.n	80083f4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80083f0:	2303      	movs	r3, #3
 80083f2:	e006      	b.n	8008402 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2220      	movs	r2, #32
 80083f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80083fc:	2300      	movs	r3, #0
 80083fe:	e000      	b.n	8008402 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008400:	2302      	movs	r3, #2
  }
}
 8008402:	4618      	mov	r0, r3
 8008404:	3720      	adds	r7, #32
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}
	...

0800840c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b0ba      	sub	sp, #232	; 0xe8
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	68db      	ldr	r3, [r3, #12]
 8008424:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	695b      	ldr	r3, [r3, #20]
 800842e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008432:	2300      	movs	r3, #0
 8008434:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008438:	2300      	movs	r3, #0
 800843a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800843e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008442:	f003 030f 	and.w	r3, r3, #15
 8008446:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800844a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800844e:	2b00      	cmp	r3, #0
 8008450:	d10f      	bne.n	8008472 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008452:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008456:	f003 0320 	and.w	r3, r3, #32
 800845a:	2b00      	cmp	r3, #0
 800845c:	d009      	beq.n	8008472 <HAL_UART_IRQHandler+0x66>
 800845e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008462:	f003 0320 	and.w	r3, r3, #32
 8008466:	2b00      	cmp	r3, #0
 8008468:	d003      	beq.n	8008472 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f000 fbd3 	bl	8008c16 <UART_Receive_IT>
      return;
 8008470:	e256      	b.n	8008920 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008472:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008476:	2b00      	cmp	r3, #0
 8008478:	f000 80de 	beq.w	8008638 <HAL_UART_IRQHandler+0x22c>
 800847c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008480:	f003 0301 	and.w	r3, r3, #1
 8008484:	2b00      	cmp	r3, #0
 8008486:	d106      	bne.n	8008496 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008488:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800848c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008490:	2b00      	cmp	r3, #0
 8008492:	f000 80d1 	beq.w	8008638 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008496:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800849a:	f003 0301 	and.w	r3, r3, #1
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d00b      	beq.n	80084ba <HAL_UART_IRQHandler+0xae>
 80084a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d005      	beq.n	80084ba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084b2:	f043 0201 	orr.w	r2, r3, #1
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80084ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084be:	f003 0304 	and.w	r3, r3, #4
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d00b      	beq.n	80084de <HAL_UART_IRQHandler+0xd2>
 80084c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80084ca:	f003 0301 	and.w	r3, r3, #1
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d005      	beq.n	80084de <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084d6:	f043 0202 	orr.w	r2, r3, #2
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80084de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084e2:	f003 0302 	and.w	r3, r3, #2
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d00b      	beq.n	8008502 <HAL_UART_IRQHandler+0xf6>
 80084ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80084ee:	f003 0301 	and.w	r3, r3, #1
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d005      	beq.n	8008502 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084fa:	f043 0204 	orr.w	r2, r3, #4
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008502:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008506:	f003 0308 	and.w	r3, r3, #8
 800850a:	2b00      	cmp	r3, #0
 800850c:	d011      	beq.n	8008532 <HAL_UART_IRQHandler+0x126>
 800850e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008512:	f003 0320 	and.w	r3, r3, #32
 8008516:	2b00      	cmp	r3, #0
 8008518:	d105      	bne.n	8008526 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800851a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800851e:	f003 0301 	and.w	r3, r3, #1
 8008522:	2b00      	cmp	r3, #0
 8008524:	d005      	beq.n	8008532 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800852a:	f043 0208 	orr.w	r2, r3, #8
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008536:	2b00      	cmp	r3, #0
 8008538:	f000 81ed 	beq.w	8008916 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800853c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008540:	f003 0320 	and.w	r3, r3, #32
 8008544:	2b00      	cmp	r3, #0
 8008546:	d008      	beq.n	800855a <HAL_UART_IRQHandler+0x14e>
 8008548:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800854c:	f003 0320 	and.w	r3, r3, #32
 8008550:	2b00      	cmp	r3, #0
 8008552:	d002      	beq.n	800855a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f000 fb5e 	bl	8008c16 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	695b      	ldr	r3, [r3, #20]
 8008560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008564:	2b40      	cmp	r3, #64	; 0x40
 8008566:	bf0c      	ite	eq
 8008568:	2301      	moveq	r3, #1
 800856a:	2300      	movne	r3, #0
 800856c:	b2db      	uxtb	r3, r3
 800856e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008576:	f003 0308 	and.w	r3, r3, #8
 800857a:	2b00      	cmp	r3, #0
 800857c:	d103      	bne.n	8008586 <HAL_UART_IRQHandler+0x17a>
 800857e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008582:	2b00      	cmp	r3, #0
 8008584:	d04f      	beq.n	8008626 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f000 fa66 	bl	8008a58 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	695b      	ldr	r3, [r3, #20]
 8008592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008596:	2b40      	cmp	r3, #64	; 0x40
 8008598:	d141      	bne.n	800861e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	3314      	adds	r3, #20
 80085a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80085a8:	e853 3f00 	ldrex	r3, [r3]
 80085ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80085b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80085b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	3314      	adds	r3, #20
 80085c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80085c6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80085ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80085d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80085d6:	e841 2300 	strex	r3, r2, [r1]
 80085da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80085de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d1d9      	bne.n	800859a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d013      	beq.n	8008616 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085f2:	4a7d      	ldr	r2, [pc, #500]	; (80087e8 <HAL_UART_IRQHandler+0x3dc>)
 80085f4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085fa:	4618      	mov	r0, r3
 80085fc:	f7fd f801 	bl	8005602 <HAL_DMA_Abort_IT>
 8008600:	4603      	mov	r3, r0
 8008602:	2b00      	cmp	r3, #0
 8008604:	d016      	beq.n	8008634 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800860a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800860c:	687a      	ldr	r2, [r7, #4]
 800860e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008610:	4610      	mov	r0, r2
 8008612:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008614:	e00e      	b.n	8008634 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f000 f99a 	bl	8008950 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800861c:	e00a      	b.n	8008634 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f000 f996 	bl	8008950 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008624:	e006      	b.n	8008634 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f000 f992 	bl	8008950 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2200      	movs	r2, #0
 8008630:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008632:	e170      	b.n	8008916 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008634:	bf00      	nop
    return;
 8008636:	e16e      	b.n	8008916 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800863c:	2b01      	cmp	r3, #1
 800863e:	f040 814a 	bne.w	80088d6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008642:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008646:	f003 0310 	and.w	r3, r3, #16
 800864a:	2b00      	cmp	r3, #0
 800864c:	f000 8143 	beq.w	80088d6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008650:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008654:	f003 0310 	and.w	r3, r3, #16
 8008658:	2b00      	cmp	r3, #0
 800865a:	f000 813c 	beq.w	80088d6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800865e:	2300      	movs	r3, #0
 8008660:	60bb      	str	r3, [r7, #8]
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	60bb      	str	r3, [r7, #8]
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	685b      	ldr	r3, [r3, #4]
 8008670:	60bb      	str	r3, [r7, #8]
 8008672:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	695b      	ldr	r3, [r3, #20]
 800867a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800867e:	2b40      	cmp	r3, #64	; 0x40
 8008680:	f040 80b4 	bne.w	80087ec <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	685b      	ldr	r3, [r3, #4]
 800868c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008690:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008694:	2b00      	cmp	r3, #0
 8008696:	f000 8140 	beq.w	800891a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800869e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80086a2:	429a      	cmp	r2, r3
 80086a4:	f080 8139 	bcs.w	800891a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80086ae:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086b4:	69db      	ldr	r3, [r3, #28]
 80086b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086ba:	f000 8088 	beq.w	80087ce <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	330c      	adds	r3, #12
 80086c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80086cc:	e853 3f00 	ldrex	r3, [r3]
 80086d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80086d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80086d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80086dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	330c      	adds	r3, #12
 80086e6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80086ea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80086ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80086f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80086fa:	e841 2300 	strex	r3, r2, [r1]
 80086fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008702:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008706:	2b00      	cmp	r3, #0
 8008708:	d1d9      	bne.n	80086be <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	3314      	adds	r3, #20
 8008710:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008712:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008714:	e853 3f00 	ldrex	r3, [r3]
 8008718:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800871a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800871c:	f023 0301 	bic.w	r3, r3, #1
 8008720:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	3314      	adds	r3, #20
 800872a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800872e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008732:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008734:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008736:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800873a:	e841 2300 	strex	r3, r2, [r1]
 800873e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008740:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008742:	2b00      	cmp	r3, #0
 8008744:	d1e1      	bne.n	800870a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	3314      	adds	r3, #20
 800874c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800874e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008750:	e853 3f00 	ldrex	r3, [r3]
 8008754:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008756:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008758:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800875c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	3314      	adds	r3, #20
 8008766:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800876a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800876c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800876e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008770:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008772:	e841 2300 	strex	r3, r2, [r1]
 8008776:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008778:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800877a:	2b00      	cmp	r3, #0
 800877c:	d1e3      	bne.n	8008746 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2220      	movs	r2, #32
 8008782:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2200      	movs	r2, #0
 800878a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	330c      	adds	r3, #12
 8008792:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008794:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008796:	e853 3f00 	ldrex	r3, [r3]
 800879a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800879c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800879e:	f023 0310 	bic.w	r3, r3, #16
 80087a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	330c      	adds	r3, #12
 80087ac:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80087b0:	65ba      	str	r2, [r7, #88]	; 0x58
 80087b2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087b4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80087b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80087b8:	e841 2300 	strex	r3, r2, [r1]
 80087bc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80087be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d1e3      	bne.n	800878c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087c8:	4618      	mov	r0, r3
 80087ca:	f7fc feaa 	bl	8005522 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80087d6:	b29b      	uxth	r3, r3
 80087d8:	1ad3      	subs	r3, r2, r3
 80087da:	b29b      	uxth	r3, r3
 80087dc:	4619      	mov	r1, r3
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f000 f8c0 	bl	8008964 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80087e4:	e099      	b.n	800891a <HAL_UART_IRQHandler+0x50e>
 80087e6:	bf00      	nop
 80087e8:	08008b1f 	.word	0x08008b1f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80087f4:	b29b      	uxth	r3, r3
 80087f6:	1ad3      	subs	r3, r2, r3
 80087f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008800:	b29b      	uxth	r3, r3
 8008802:	2b00      	cmp	r3, #0
 8008804:	f000 808b 	beq.w	800891e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008808:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800880c:	2b00      	cmp	r3, #0
 800880e:	f000 8086 	beq.w	800891e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	330c      	adds	r3, #12
 8008818:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800881a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800881c:	e853 3f00 	ldrex	r3, [r3]
 8008820:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008824:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008828:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	330c      	adds	r3, #12
 8008832:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008836:	647a      	str	r2, [r7, #68]	; 0x44
 8008838:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800883a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800883c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800883e:	e841 2300 	strex	r3, r2, [r1]
 8008842:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008844:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008846:	2b00      	cmp	r3, #0
 8008848:	d1e3      	bne.n	8008812 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	3314      	adds	r3, #20
 8008850:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008854:	e853 3f00 	ldrex	r3, [r3]
 8008858:	623b      	str	r3, [r7, #32]
   return(result);
 800885a:	6a3b      	ldr	r3, [r7, #32]
 800885c:	f023 0301 	bic.w	r3, r3, #1
 8008860:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	3314      	adds	r3, #20
 800886a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800886e:	633a      	str	r2, [r7, #48]	; 0x30
 8008870:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008872:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008874:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008876:	e841 2300 	strex	r3, r2, [r1]
 800887a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800887c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800887e:	2b00      	cmp	r3, #0
 8008880:	d1e3      	bne.n	800884a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2220      	movs	r2, #32
 8008886:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2200      	movs	r2, #0
 800888e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	330c      	adds	r3, #12
 8008896:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	e853 3f00 	ldrex	r3, [r3]
 800889e:	60fb      	str	r3, [r7, #12]
   return(result);
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	f023 0310 	bic.w	r3, r3, #16
 80088a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	330c      	adds	r3, #12
 80088b0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80088b4:	61fa      	str	r2, [r7, #28]
 80088b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088b8:	69b9      	ldr	r1, [r7, #24]
 80088ba:	69fa      	ldr	r2, [r7, #28]
 80088bc:	e841 2300 	strex	r3, r2, [r1]
 80088c0:	617b      	str	r3, [r7, #20]
   return(result);
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d1e3      	bne.n	8008890 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80088c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80088cc:	4619      	mov	r1, r3
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f000 f848 	bl	8008964 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80088d4:	e023      	b.n	800891e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80088d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d009      	beq.n	80088f6 <HAL_UART_IRQHandler+0x4ea>
 80088e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d003      	beq.n	80088f6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f000 f929 	bl	8008b46 <UART_Transmit_IT>
    return;
 80088f4:	e014      	b.n	8008920 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80088f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d00e      	beq.n	8008920 <HAL_UART_IRQHandler+0x514>
 8008902:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800890a:	2b00      	cmp	r3, #0
 800890c:	d008      	beq.n	8008920 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f000 f969 	bl	8008be6 <UART_EndTransmit_IT>
    return;
 8008914:	e004      	b.n	8008920 <HAL_UART_IRQHandler+0x514>
    return;
 8008916:	bf00      	nop
 8008918:	e002      	b.n	8008920 <HAL_UART_IRQHandler+0x514>
      return;
 800891a:	bf00      	nop
 800891c:	e000      	b.n	8008920 <HAL_UART_IRQHandler+0x514>
      return;
 800891e:	bf00      	nop
  }
}
 8008920:	37e8      	adds	r7, #232	; 0xe8
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}
 8008926:	bf00      	nop

08008928 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008928:	b480      	push	{r7}
 800892a:	b083      	sub	sp, #12
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008930:	bf00      	nop
 8008932:	370c      	adds	r7, #12
 8008934:	46bd      	mov	sp, r7
 8008936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893a:	4770      	bx	lr

0800893c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800893c:	b480      	push	{r7}
 800893e:	b083      	sub	sp, #12
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008944:	bf00      	nop
 8008946:	370c      	adds	r7, #12
 8008948:	46bd      	mov	sp, r7
 800894a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894e:	4770      	bx	lr

08008950 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008950:	b480      	push	{r7}
 8008952:	b083      	sub	sp, #12
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008958:	bf00      	nop
 800895a:	370c      	adds	r7, #12
 800895c:	46bd      	mov	sp, r7
 800895e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008962:	4770      	bx	lr

08008964 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008964:	b480      	push	{r7}
 8008966:	b083      	sub	sp, #12
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
 800896c:	460b      	mov	r3, r1
 800896e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008970:	bf00      	nop
 8008972:	370c      	adds	r7, #12
 8008974:	46bd      	mov	sp, r7
 8008976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897a:	4770      	bx	lr

0800897c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b090      	sub	sp, #64	; 0x40
 8008980:	af00      	add	r7, sp, #0
 8008982:	60f8      	str	r0, [r7, #12]
 8008984:	60b9      	str	r1, [r7, #8]
 8008986:	603b      	str	r3, [r7, #0]
 8008988:	4613      	mov	r3, r2
 800898a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800898c:	e050      	b.n	8008a30 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800898e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008994:	d04c      	beq.n	8008a30 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008996:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008998:	2b00      	cmp	r3, #0
 800899a:	d007      	beq.n	80089ac <UART_WaitOnFlagUntilTimeout+0x30>
 800899c:	f7fc fc80 	bl	80052a0 <HAL_GetTick>
 80089a0:	4602      	mov	r2, r0
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	1ad3      	subs	r3, r2, r3
 80089a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80089a8:	429a      	cmp	r2, r3
 80089aa:	d241      	bcs.n	8008a30 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	330c      	adds	r3, #12
 80089b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089b6:	e853 3f00 	ldrex	r3, [r3]
 80089ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80089bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089be:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80089c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	330c      	adds	r3, #12
 80089ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80089cc:	637a      	str	r2, [r7, #52]	; 0x34
 80089ce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80089d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80089d4:	e841 2300 	strex	r3, r2, [r1]
 80089d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80089da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d1e5      	bne.n	80089ac <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	3314      	adds	r3, #20
 80089e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	e853 3f00 	ldrex	r3, [r3]
 80089ee:	613b      	str	r3, [r7, #16]
   return(result);
 80089f0:	693b      	ldr	r3, [r7, #16]
 80089f2:	f023 0301 	bic.w	r3, r3, #1
 80089f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	3314      	adds	r3, #20
 80089fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a00:	623a      	str	r2, [r7, #32]
 8008a02:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a04:	69f9      	ldr	r1, [r7, #28]
 8008a06:	6a3a      	ldr	r2, [r7, #32]
 8008a08:	e841 2300 	strex	r3, r2, [r1]
 8008a0c:	61bb      	str	r3, [r7, #24]
   return(result);
 8008a0e:	69bb      	ldr	r3, [r7, #24]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d1e5      	bne.n	80089e0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	2220      	movs	r2, #32
 8008a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	2220      	movs	r2, #32
 8008a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	2200      	movs	r2, #0
 8008a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008a2c:	2303      	movs	r3, #3
 8008a2e:	e00f      	b.n	8008a50 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	681a      	ldr	r2, [r3, #0]
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	4013      	ands	r3, r2
 8008a3a:	68ba      	ldr	r2, [r7, #8]
 8008a3c:	429a      	cmp	r2, r3
 8008a3e:	bf0c      	ite	eq
 8008a40:	2301      	moveq	r3, #1
 8008a42:	2300      	movne	r3, #0
 8008a44:	b2db      	uxtb	r3, r3
 8008a46:	461a      	mov	r2, r3
 8008a48:	79fb      	ldrb	r3, [r7, #7]
 8008a4a:	429a      	cmp	r2, r3
 8008a4c:	d09f      	beq.n	800898e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008a4e:	2300      	movs	r3, #0
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	3740      	adds	r7, #64	; 0x40
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd80      	pop	{r7, pc}

08008a58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b095      	sub	sp, #84	; 0x54
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	330c      	adds	r3, #12
 8008a66:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a6a:	e853 3f00 	ldrex	r3, [r3]
 8008a6e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a72:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008a76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	330c      	adds	r3, #12
 8008a7e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008a80:	643a      	str	r2, [r7, #64]	; 0x40
 8008a82:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a84:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008a86:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008a88:	e841 2300 	strex	r3, r2, [r1]
 8008a8c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d1e5      	bne.n	8008a60 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	3314      	adds	r3, #20
 8008a9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a9c:	6a3b      	ldr	r3, [r7, #32]
 8008a9e:	e853 3f00 	ldrex	r3, [r3]
 8008aa2:	61fb      	str	r3, [r7, #28]
   return(result);
 8008aa4:	69fb      	ldr	r3, [r7, #28]
 8008aa6:	f023 0301 	bic.w	r3, r3, #1
 8008aaa:	64bb      	str	r3, [r7, #72]	; 0x48
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	3314      	adds	r3, #20
 8008ab2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ab4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008ab6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ab8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008aba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008abc:	e841 2300 	strex	r3, r2, [r1]
 8008ac0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d1e5      	bne.n	8008a94 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008acc:	2b01      	cmp	r3, #1
 8008ace:	d119      	bne.n	8008b04 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	330c      	adds	r3, #12
 8008ad6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	e853 3f00 	ldrex	r3, [r3]
 8008ade:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	f023 0310 	bic.w	r3, r3, #16
 8008ae6:	647b      	str	r3, [r7, #68]	; 0x44
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	330c      	adds	r3, #12
 8008aee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008af0:	61ba      	str	r2, [r7, #24]
 8008af2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008af4:	6979      	ldr	r1, [r7, #20]
 8008af6:	69ba      	ldr	r2, [r7, #24]
 8008af8:	e841 2300 	strex	r3, r2, [r1]
 8008afc:	613b      	str	r3, [r7, #16]
   return(result);
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d1e5      	bne.n	8008ad0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2220      	movs	r2, #32
 8008b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008b12:	bf00      	nop
 8008b14:	3754      	adds	r7, #84	; 0x54
 8008b16:	46bd      	mov	sp, r7
 8008b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1c:	4770      	bx	lr

08008b1e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008b1e:	b580      	push	{r7, lr}
 8008b20:	b084      	sub	sp, #16
 8008b22:	af00      	add	r7, sp, #0
 8008b24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b2a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	2200      	movs	r2, #0
 8008b36:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008b38:	68f8      	ldr	r0, [r7, #12]
 8008b3a:	f7ff ff09 	bl	8008950 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b3e:	bf00      	nop
 8008b40:	3710      	adds	r7, #16
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}

08008b46 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008b46:	b480      	push	{r7}
 8008b48:	b085      	sub	sp, #20
 8008b4a:	af00      	add	r7, sp, #0
 8008b4c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b54:	b2db      	uxtb	r3, r3
 8008b56:	2b21      	cmp	r3, #33	; 0x21
 8008b58:	d13e      	bne.n	8008bd8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	689b      	ldr	r3, [r3, #8]
 8008b5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b62:	d114      	bne.n	8008b8e <UART_Transmit_IT+0x48>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	691b      	ldr	r3, [r3, #16]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d110      	bne.n	8008b8e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6a1b      	ldr	r3, [r3, #32]
 8008b70:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	881b      	ldrh	r3, [r3, #0]
 8008b76:	461a      	mov	r2, r3
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008b80:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6a1b      	ldr	r3, [r3, #32]
 8008b86:	1c9a      	adds	r2, r3, #2
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	621a      	str	r2, [r3, #32]
 8008b8c:	e008      	b.n	8008ba0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6a1b      	ldr	r3, [r3, #32]
 8008b92:	1c59      	adds	r1, r3, #1
 8008b94:	687a      	ldr	r2, [r7, #4]
 8008b96:	6211      	str	r1, [r2, #32]
 8008b98:	781a      	ldrb	r2, [r3, #0]
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008ba4:	b29b      	uxth	r3, r3
 8008ba6:	3b01      	subs	r3, #1
 8008ba8:	b29b      	uxth	r3, r3
 8008baa:	687a      	ldr	r2, [r7, #4]
 8008bac:	4619      	mov	r1, r3
 8008bae:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d10f      	bne.n	8008bd4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	68da      	ldr	r2, [r3, #12]
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008bc2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	68da      	ldr	r2, [r3, #12]
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008bd2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	e000      	b.n	8008bda <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008bd8:	2302      	movs	r3, #2
  }
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3714      	adds	r7, #20
 8008bde:	46bd      	mov	sp, r7
 8008be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be4:	4770      	bx	lr

08008be6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008be6:	b580      	push	{r7, lr}
 8008be8:	b082      	sub	sp, #8
 8008bea:	af00      	add	r7, sp, #0
 8008bec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	68da      	ldr	r2, [r3, #12]
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008bfc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2220      	movs	r2, #32
 8008c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f7ff fe8e 	bl	8008928 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008c0c:	2300      	movs	r3, #0
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	3708      	adds	r7, #8
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd80      	pop	{r7, pc}

08008c16 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008c16:	b580      	push	{r7, lr}
 8008c18:	b08c      	sub	sp, #48	; 0x30
 8008c1a:	af00      	add	r7, sp, #0
 8008c1c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008c24:	b2db      	uxtb	r3, r3
 8008c26:	2b22      	cmp	r3, #34	; 0x22
 8008c28:	f040 80ab 	bne.w	8008d82 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	689b      	ldr	r3, [r3, #8]
 8008c30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c34:	d117      	bne.n	8008c66 <UART_Receive_IT+0x50>
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	691b      	ldr	r3, [r3, #16]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d113      	bne.n	8008c66 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c46:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	685b      	ldr	r3, [r3, #4]
 8008c4e:	b29b      	uxth	r3, r3
 8008c50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c54:	b29a      	uxth	r2, r3
 8008c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c58:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c5e:	1c9a      	adds	r2, r3, #2
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	629a      	str	r2, [r3, #40]	; 0x28
 8008c64:	e026      	b.n	8008cb4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	689b      	ldr	r3, [r3, #8]
 8008c74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c78:	d007      	beq.n	8008c8a <UART_Receive_IT+0x74>
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	689b      	ldr	r3, [r3, #8]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d10a      	bne.n	8008c98 <UART_Receive_IT+0x82>
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	691b      	ldr	r3, [r3, #16]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d106      	bne.n	8008c98 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	685b      	ldr	r3, [r3, #4]
 8008c90:	b2da      	uxtb	r2, r3
 8008c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c94:	701a      	strb	r2, [r3, #0]
 8008c96:	e008      	b.n	8008caa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	685b      	ldr	r3, [r3, #4]
 8008c9e:	b2db      	uxtb	r3, r3
 8008ca0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ca4:	b2da      	uxtb	r2, r3
 8008ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ca8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cae:	1c5a      	adds	r2, r3, #1
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008cb8:	b29b      	uxth	r3, r3
 8008cba:	3b01      	subs	r3, #1
 8008cbc:	b29b      	uxth	r3, r3
 8008cbe:	687a      	ldr	r2, [r7, #4]
 8008cc0:	4619      	mov	r1, r3
 8008cc2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d15a      	bne.n	8008d7e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	68da      	ldr	r2, [r3, #12]
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f022 0220 	bic.w	r2, r2, #32
 8008cd6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	68da      	ldr	r2, [r3, #12]
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008ce6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	695a      	ldr	r2, [r3, #20]
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f022 0201 	bic.w	r2, r2, #1
 8008cf6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2220      	movs	r2, #32
 8008cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d04:	2b01      	cmp	r3, #1
 8008d06:	d135      	bne.n	8008d74 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	330c      	adds	r3, #12
 8008d14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d16:	697b      	ldr	r3, [r7, #20]
 8008d18:	e853 3f00 	ldrex	r3, [r3]
 8008d1c:	613b      	str	r3, [r7, #16]
   return(result);
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	f023 0310 	bic.w	r3, r3, #16
 8008d24:	627b      	str	r3, [r7, #36]	; 0x24
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	330c      	adds	r3, #12
 8008d2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d2e:	623a      	str	r2, [r7, #32]
 8008d30:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d32:	69f9      	ldr	r1, [r7, #28]
 8008d34:	6a3a      	ldr	r2, [r7, #32]
 8008d36:	e841 2300 	strex	r3, r2, [r1]
 8008d3a:	61bb      	str	r3, [r7, #24]
   return(result);
 8008d3c:	69bb      	ldr	r3, [r7, #24]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d1e5      	bne.n	8008d0e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f003 0310 	and.w	r3, r3, #16
 8008d4c:	2b10      	cmp	r3, #16
 8008d4e:	d10a      	bne.n	8008d66 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008d50:	2300      	movs	r3, #0
 8008d52:	60fb      	str	r3, [r7, #12]
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	60fb      	str	r3, [r7, #12]
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	685b      	ldr	r3, [r3, #4]
 8008d62:	60fb      	str	r3, [r7, #12]
 8008d64:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008d6a:	4619      	mov	r1, r3
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	f7ff fdf9 	bl	8008964 <HAL_UARTEx_RxEventCallback>
 8008d72:	e002      	b.n	8008d7a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f7ff fde1 	bl	800893c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	e002      	b.n	8008d84 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	e000      	b.n	8008d84 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008d82:	2302      	movs	r3, #2
  }
}
 8008d84:	4618      	mov	r0, r3
 8008d86:	3730      	adds	r7, #48	; 0x30
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bd80      	pop	{r7, pc}

08008d8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008d8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008d90:	b0c0      	sub	sp, #256	; 0x100
 8008d92:	af00      	add	r7, sp, #0
 8008d94:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	691b      	ldr	r3, [r3, #16]
 8008da0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008da8:	68d9      	ldr	r1, [r3, #12]
 8008daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dae:	681a      	ldr	r2, [r3, #0]
 8008db0:	ea40 0301 	orr.w	r3, r0, r1
 8008db4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dba:	689a      	ldr	r2, [r3, #8]
 8008dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dc0:	691b      	ldr	r3, [r3, #16]
 8008dc2:	431a      	orrs	r2, r3
 8008dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dc8:	695b      	ldr	r3, [r3, #20]
 8008dca:	431a      	orrs	r2, r3
 8008dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dd0:	69db      	ldr	r3, [r3, #28]
 8008dd2:	4313      	orrs	r3, r2
 8008dd4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	68db      	ldr	r3, [r3, #12]
 8008de0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008de4:	f021 010c 	bic.w	r1, r1, #12
 8008de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dec:	681a      	ldr	r2, [r3, #0]
 8008dee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008df2:	430b      	orrs	r3, r1
 8008df4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	695b      	ldr	r3, [r3, #20]
 8008dfe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e06:	6999      	ldr	r1, [r3, #24]
 8008e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e0c:	681a      	ldr	r2, [r3, #0]
 8008e0e:	ea40 0301 	orr.w	r3, r0, r1
 8008e12:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e18:	681a      	ldr	r2, [r3, #0]
 8008e1a:	4b8f      	ldr	r3, [pc, #572]	; (8009058 <UART_SetConfig+0x2cc>)
 8008e1c:	429a      	cmp	r2, r3
 8008e1e:	d005      	beq.n	8008e2c <UART_SetConfig+0xa0>
 8008e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e24:	681a      	ldr	r2, [r3, #0]
 8008e26:	4b8d      	ldr	r3, [pc, #564]	; (800905c <UART_SetConfig+0x2d0>)
 8008e28:	429a      	cmp	r2, r3
 8008e2a:	d104      	bne.n	8008e36 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008e2c:	f7fe fb9c 	bl	8007568 <HAL_RCC_GetPCLK2Freq>
 8008e30:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008e34:	e003      	b.n	8008e3e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008e36:	f7fe fb83 	bl	8007540 <HAL_RCC_GetPCLK1Freq>
 8008e3a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008e3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e42:	69db      	ldr	r3, [r3, #28]
 8008e44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e48:	f040 810c 	bne.w	8009064 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008e4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e50:	2200      	movs	r2, #0
 8008e52:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008e56:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008e5a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008e5e:	4622      	mov	r2, r4
 8008e60:	462b      	mov	r3, r5
 8008e62:	1891      	adds	r1, r2, r2
 8008e64:	65b9      	str	r1, [r7, #88]	; 0x58
 8008e66:	415b      	adcs	r3, r3
 8008e68:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008e6a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008e6e:	4621      	mov	r1, r4
 8008e70:	eb12 0801 	adds.w	r8, r2, r1
 8008e74:	4629      	mov	r1, r5
 8008e76:	eb43 0901 	adc.w	r9, r3, r1
 8008e7a:	f04f 0200 	mov.w	r2, #0
 8008e7e:	f04f 0300 	mov.w	r3, #0
 8008e82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008e86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008e8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008e8e:	4690      	mov	r8, r2
 8008e90:	4699      	mov	r9, r3
 8008e92:	4623      	mov	r3, r4
 8008e94:	eb18 0303 	adds.w	r3, r8, r3
 8008e98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008e9c:	462b      	mov	r3, r5
 8008e9e:	eb49 0303 	adc.w	r3, r9, r3
 8008ea2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008ea6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008eaa:	685b      	ldr	r3, [r3, #4]
 8008eac:	2200      	movs	r2, #0
 8008eae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008eb2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008eb6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008eba:	460b      	mov	r3, r1
 8008ebc:	18db      	adds	r3, r3, r3
 8008ebe:	653b      	str	r3, [r7, #80]	; 0x50
 8008ec0:	4613      	mov	r3, r2
 8008ec2:	eb42 0303 	adc.w	r3, r2, r3
 8008ec6:	657b      	str	r3, [r7, #84]	; 0x54
 8008ec8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008ecc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008ed0:	f7f7 fce4 	bl	800089c <__aeabi_uldivmod>
 8008ed4:	4602      	mov	r2, r0
 8008ed6:	460b      	mov	r3, r1
 8008ed8:	4b61      	ldr	r3, [pc, #388]	; (8009060 <UART_SetConfig+0x2d4>)
 8008eda:	fba3 2302 	umull	r2, r3, r3, r2
 8008ede:	095b      	lsrs	r3, r3, #5
 8008ee0:	011c      	lsls	r4, r3, #4
 8008ee2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008eec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008ef0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008ef4:	4642      	mov	r2, r8
 8008ef6:	464b      	mov	r3, r9
 8008ef8:	1891      	adds	r1, r2, r2
 8008efa:	64b9      	str	r1, [r7, #72]	; 0x48
 8008efc:	415b      	adcs	r3, r3
 8008efe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f00:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008f04:	4641      	mov	r1, r8
 8008f06:	eb12 0a01 	adds.w	sl, r2, r1
 8008f0a:	4649      	mov	r1, r9
 8008f0c:	eb43 0b01 	adc.w	fp, r3, r1
 8008f10:	f04f 0200 	mov.w	r2, #0
 8008f14:	f04f 0300 	mov.w	r3, #0
 8008f18:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008f1c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008f20:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008f24:	4692      	mov	sl, r2
 8008f26:	469b      	mov	fp, r3
 8008f28:	4643      	mov	r3, r8
 8008f2a:	eb1a 0303 	adds.w	r3, sl, r3
 8008f2e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008f32:	464b      	mov	r3, r9
 8008f34:	eb4b 0303 	adc.w	r3, fp, r3
 8008f38:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f40:	685b      	ldr	r3, [r3, #4]
 8008f42:	2200      	movs	r2, #0
 8008f44:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008f48:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008f4c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008f50:	460b      	mov	r3, r1
 8008f52:	18db      	adds	r3, r3, r3
 8008f54:	643b      	str	r3, [r7, #64]	; 0x40
 8008f56:	4613      	mov	r3, r2
 8008f58:	eb42 0303 	adc.w	r3, r2, r3
 8008f5c:	647b      	str	r3, [r7, #68]	; 0x44
 8008f5e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008f62:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008f66:	f7f7 fc99 	bl	800089c <__aeabi_uldivmod>
 8008f6a:	4602      	mov	r2, r0
 8008f6c:	460b      	mov	r3, r1
 8008f6e:	4611      	mov	r1, r2
 8008f70:	4b3b      	ldr	r3, [pc, #236]	; (8009060 <UART_SetConfig+0x2d4>)
 8008f72:	fba3 2301 	umull	r2, r3, r3, r1
 8008f76:	095b      	lsrs	r3, r3, #5
 8008f78:	2264      	movs	r2, #100	; 0x64
 8008f7a:	fb02 f303 	mul.w	r3, r2, r3
 8008f7e:	1acb      	subs	r3, r1, r3
 8008f80:	00db      	lsls	r3, r3, #3
 8008f82:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008f86:	4b36      	ldr	r3, [pc, #216]	; (8009060 <UART_SetConfig+0x2d4>)
 8008f88:	fba3 2302 	umull	r2, r3, r3, r2
 8008f8c:	095b      	lsrs	r3, r3, #5
 8008f8e:	005b      	lsls	r3, r3, #1
 8008f90:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008f94:	441c      	add	r4, r3
 8008f96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008fa0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008fa4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008fa8:	4642      	mov	r2, r8
 8008faa:	464b      	mov	r3, r9
 8008fac:	1891      	adds	r1, r2, r2
 8008fae:	63b9      	str	r1, [r7, #56]	; 0x38
 8008fb0:	415b      	adcs	r3, r3
 8008fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008fb4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008fb8:	4641      	mov	r1, r8
 8008fba:	1851      	adds	r1, r2, r1
 8008fbc:	6339      	str	r1, [r7, #48]	; 0x30
 8008fbe:	4649      	mov	r1, r9
 8008fc0:	414b      	adcs	r3, r1
 8008fc2:	637b      	str	r3, [r7, #52]	; 0x34
 8008fc4:	f04f 0200 	mov.w	r2, #0
 8008fc8:	f04f 0300 	mov.w	r3, #0
 8008fcc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008fd0:	4659      	mov	r1, fp
 8008fd2:	00cb      	lsls	r3, r1, #3
 8008fd4:	4651      	mov	r1, sl
 8008fd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008fda:	4651      	mov	r1, sl
 8008fdc:	00ca      	lsls	r2, r1, #3
 8008fde:	4610      	mov	r0, r2
 8008fe0:	4619      	mov	r1, r3
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	4642      	mov	r2, r8
 8008fe6:	189b      	adds	r3, r3, r2
 8008fe8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008fec:	464b      	mov	r3, r9
 8008fee:	460a      	mov	r2, r1
 8008ff0:	eb42 0303 	adc.w	r3, r2, r3
 8008ff4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ffc:	685b      	ldr	r3, [r3, #4]
 8008ffe:	2200      	movs	r2, #0
 8009000:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009004:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009008:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800900c:	460b      	mov	r3, r1
 800900e:	18db      	adds	r3, r3, r3
 8009010:	62bb      	str	r3, [r7, #40]	; 0x28
 8009012:	4613      	mov	r3, r2
 8009014:	eb42 0303 	adc.w	r3, r2, r3
 8009018:	62fb      	str	r3, [r7, #44]	; 0x2c
 800901a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800901e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009022:	f7f7 fc3b 	bl	800089c <__aeabi_uldivmod>
 8009026:	4602      	mov	r2, r0
 8009028:	460b      	mov	r3, r1
 800902a:	4b0d      	ldr	r3, [pc, #52]	; (8009060 <UART_SetConfig+0x2d4>)
 800902c:	fba3 1302 	umull	r1, r3, r3, r2
 8009030:	095b      	lsrs	r3, r3, #5
 8009032:	2164      	movs	r1, #100	; 0x64
 8009034:	fb01 f303 	mul.w	r3, r1, r3
 8009038:	1ad3      	subs	r3, r2, r3
 800903a:	00db      	lsls	r3, r3, #3
 800903c:	3332      	adds	r3, #50	; 0x32
 800903e:	4a08      	ldr	r2, [pc, #32]	; (8009060 <UART_SetConfig+0x2d4>)
 8009040:	fba2 2303 	umull	r2, r3, r2, r3
 8009044:	095b      	lsrs	r3, r3, #5
 8009046:	f003 0207 	and.w	r2, r3, #7
 800904a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	4422      	add	r2, r4
 8009052:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009054:	e105      	b.n	8009262 <UART_SetConfig+0x4d6>
 8009056:	bf00      	nop
 8009058:	40011000 	.word	0x40011000
 800905c:	40011400 	.word	0x40011400
 8009060:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009064:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009068:	2200      	movs	r2, #0
 800906a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800906e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009072:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009076:	4642      	mov	r2, r8
 8009078:	464b      	mov	r3, r9
 800907a:	1891      	adds	r1, r2, r2
 800907c:	6239      	str	r1, [r7, #32]
 800907e:	415b      	adcs	r3, r3
 8009080:	627b      	str	r3, [r7, #36]	; 0x24
 8009082:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009086:	4641      	mov	r1, r8
 8009088:	1854      	adds	r4, r2, r1
 800908a:	4649      	mov	r1, r9
 800908c:	eb43 0501 	adc.w	r5, r3, r1
 8009090:	f04f 0200 	mov.w	r2, #0
 8009094:	f04f 0300 	mov.w	r3, #0
 8009098:	00eb      	lsls	r3, r5, #3
 800909a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800909e:	00e2      	lsls	r2, r4, #3
 80090a0:	4614      	mov	r4, r2
 80090a2:	461d      	mov	r5, r3
 80090a4:	4643      	mov	r3, r8
 80090a6:	18e3      	adds	r3, r4, r3
 80090a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80090ac:	464b      	mov	r3, r9
 80090ae:	eb45 0303 	adc.w	r3, r5, r3
 80090b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80090b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090ba:	685b      	ldr	r3, [r3, #4]
 80090bc:	2200      	movs	r2, #0
 80090be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80090c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80090c6:	f04f 0200 	mov.w	r2, #0
 80090ca:	f04f 0300 	mov.w	r3, #0
 80090ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80090d2:	4629      	mov	r1, r5
 80090d4:	008b      	lsls	r3, r1, #2
 80090d6:	4621      	mov	r1, r4
 80090d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80090dc:	4621      	mov	r1, r4
 80090de:	008a      	lsls	r2, r1, #2
 80090e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80090e4:	f7f7 fbda 	bl	800089c <__aeabi_uldivmod>
 80090e8:	4602      	mov	r2, r0
 80090ea:	460b      	mov	r3, r1
 80090ec:	4b60      	ldr	r3, [pc, #384]	; (8009270 <UART_SetConfig+0x4e4>)
 80090ee:	fba3 2302 	umull	r2, r3, r3, r2
 80090f2:	095b      	lsrs	r3, r3, #5
 80090f4:	011c      	lsls	r4, r3, #4
 80090f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80090fa:	2200      	movs	r2, #0
 80090fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009100:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009104:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009108:	4642      	mov	r2, r8
 800910a:	464b      	mov	r3, r9
 800910c:	1891      	adds	r1, r2, r2
 800910e:	61b9      	str	r1, [r7, #24]
 8009110:	415b      	adcs	r3, r3
 8009112:	61fb      	str	r3, [r7, #28]
 8009114:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009118:	4641      	mov	r1, r8
 800911a:	1851      	adds	r1, r2, r1
 800911c:	6139      	str	r1, [r7, #16]
 800911e:	4649      	mov	r1, r9
 8009120:	414b      	adcs	r3, r1
 8009122:	617b      	str	r3, [r7, #20]
 8009124:	f04f 0200 	mov.w	r2, #0
 8009128:	f04f 0300 	mov.w	r3, #0
 800912c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009130:	4659      	mov	r1, fp
 8009132:	00cb      	lsls	r3, r1, #3
 8009134:	4651      	mov	r1, sl
 8009136:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800913a:	4651      	mov	r1, sl
 800913c:	00ca      	lsls	r2, r1, #3
 800913e:	4610      	mov	r0, r2
 8009140:	4619      	mov	r1, r3
 8009142:	4603      	mov	r3, r0
 8009144:	4642      	mov	r2, r8
 8009146:	189b      	adds	r3, r3, r2
 8009148:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800914c:	464b      	mov	r3, r9
 800914e:	460a      	mov	r2, r1
 8009150:	eb42 0303 	adc.w	r3, r2, r3
 8009154:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800915c:	685b      	ldr	r3, [r3, #4]
 800915e:	2200      	movs	r2, #0
 8009160:	67bb      	str	r3, [r7, #120]	; 0x78
 8009162:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009164:	f04f 0200 	mov.w	r2, #0
 8009168:	f04f 0300 	mov.w	r3, #0
 800916c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009170:	4649      	mov	r1, r9
 8009172:	008b      	lsls	r3, r1, #2
 8009174:	4641      	mov	r1, r8
 8009176:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800917a:	4641      	mov	r1, r8
 800917c:	008a      	lsls	r2, r1, #2
 800917e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009182:	f7f7 fb8b 	bl	800089c <__aeabi_uldivmod>
 8009186:	4602      	mov	r2, r0
 8009188:	460b      	mov	r3, r1
 800918a:	4b39      	ldr	r3, [pc, #228]	; (8009270 <UART_SetConfig+0x4e4>)
 800918c:	fba3 1302 	umull	r1, r3, r3, r2
 8009190:	095b      	lsrs	r3, r3, #5
 8009192:	2164      	movs	r1, #100	; 0x64
 8009194:	fb01 f303 	mul.w	r3, r1, r3
 8009198:	1ad3      	subs	r3, r2, r3
 800919a:	011b      	lsls	r3, r3, #4
 800919c:	3332      	adds	r3, #50	; 0x32
 800919e:	4a34      	ldr	r2, [pc, #208]	; (8009270 <UART_SetConfig+0x4e4>)
 80091a0:	fba2 2303 	umull	r2, r3, r2, r3
 80091a4:	095b      	lsrs	r3, r3, #5
 80091a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80091aa:	441c      	add	r4, r3
 80091ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80091b0:	2200      	movs	r2, #0
 80091b2:	673b      	str	r3, [r7, #112]	; 0x70
 80091b4:	677a      	str	r2, [r7, #116]	; 0x74
 80091b6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80091ba:	4642      	mov	r2, r8
 80091bc:	464b      	mov	r3, r9
 80091be:	1891      	adds	r1, r2, r2
 80091c0:	60b9      	str	r1, [r7, #8]
 80091c2:	415b      	adcs	r3, r3
 80091c4:	60fb      	str	r3, [r7, #12]
 80091c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80091ca:	4641      	mov	r1, r8
 80091cc:	1851      	adds	r1, r2, r1
 80091ce:	6039      	str	r1, [r7, #0]
 80091d0:	4649      	mov	r1, r9
 80091d2:	414b      	adcs	r3, r1
 80091d4:	607b      	str	r3, [r7, #4]
 80091d6:	f04f 0200 	mov.w	r2, #0
 80091da:	f04f 0300 	mov.w	r3, #0
 80091de:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80091e2:	4659      	mov	r1, fp
 80091e4:	00cb      	lsls	r3, r1, #3
 80091e6:	4651      	mov	r1, sl
 80091e8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80091ec:	4651      	mov	r1, sl
 80091ee:	00ca      	lsls	r2, r1, #3
 80091f0:	4610      	mov	r0, r2
 80091f2:	4619      	mov	r1, r3
 80091f4:	4603      	mov	r3, r0
 80091f6:	4642      	mov	r2, r8
 80091f8:	189b      	adds	r3, r3, r2
 80091fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80091fc:	464b      	mov	r3, r9
 80091fe:	460a      	mov	r2, r1
 8009200:	eb42 0303 	adc.w	r3, r2, r3
 8009204:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800920a:	685b      	ldr	r3, [r3, #4]
 800920c:	2200      	movs	r2, #0
 800920e:	663b      	str	r3, [r7, #96]	; 0x60
 8009210:	667a      	str	r2, [r7, #100]	; 0x64
 8009212:	f04f 0200 	mov.w	r2, #0
 8009216:	f04f 0300 	mov.w	r3, #0
 800921a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800921e:	4649      	mov	r1, r9
 8009220:	008b      	lsls	r3, r1, #2
 8009222:	4641      	mov	r1, r8
 8009224:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009228:	4641      	mov	r1, r8
 800922a:	008a      	lsls	r2, r1, #2
 800922c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009230:	f7f7 fb34 	bl	800089c <__aeabi_uldivmod>
 8009234:	4602      	mov	r2, r0
 8009236:	460b      	mov	r3, r1
 8009238:	4b0d      	ldr	r3, [pc, #52]	; (8009270 <UART_SetConfig+0x4e4>)
 800923a:	fba3 1302 	umull	r1, r3, r3, r2
 800923e:	095b      	lsrs	r3, r3, #5
 8009240:	2164      	movs	r1, #100	; 0x64
 8009242:	fb01 f303 	mul.w	r3, r1, r3
 8009246:	1ad3      	subs	r3, r2, r3
 8009248:	011b      	lsls	r3, r3, #4
 800924a:	3332      	adds	r3, #50	; 0x32
 800924c:	4a08      	ldr	r2, [pc, #32]	; (8009270 <UART_SetConfig+0x4e4>)
 800924e:	fba2 2303 	umull	r2, r3, r2, r3
 8009252:	095b      	lsrs	r3, r3, #5
 8009254:	f003 020f 	and.w	r2, r3, #15
 8009258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	4422      	add	r2, r4
 8009260:	609a      	str	r2, [r3, #8]
}
 8009262:	bf00      	nop
 8009264:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009268:	46bd      	mov	sp, r7
 800926a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800926e:	bf00      	nop
 8009270:	51eb851f 	.word	0x51eb851f

08009274 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8009274:	b480      	push	{r7}
 8009276:	b087      	sub	sp, #28
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
 800927c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	681a      	ldr	r2, [r3, #0]
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009288:	683a      	ldr	r2, [r7, #0]
 800928a:	6812      	ldr	r2, [r2, #0]
 800928c:	f023 0101 	bic.w	r1, r3, #1
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	689b      	ldr	r3, [r3, #8]
 800929a:	2b08      	cmp	r3, #8
 800929c:	d102      	bne.n	80092a4 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800929e:	2340      	movs	r3, #64	; 0x40
 80092a0:	617b      	str	r3, [r7, #20]
 80092a2:	e001      	b.n	80092a8 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80092a4:	2300      	movs	r3, #0
 80092a6:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80092ac:	697b      	ldr	r3, [r7, #20]
 80092ae:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80092b4:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80092ba:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80092c0:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80092c6:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 80092cc:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 80092d2:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 80092d8:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 80092de:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 80092e4:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 80092ea:	4313      	orrs	r3, r2
 80092ec:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	699b      	ldr	r3, [r3, #24]
 80092f2:	693a      	ldr	r2, [r7, #16]
 80092f4:	4313      	orrs	r3, r2
 80092f6:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092fc:	693a      	ldr	r2, [r7, #16]
 80092fe:	4313      	orrs	r3, r2
 8009300:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 8009302:	4b10      	ldr	r3, [pc, #64]	; (8009344 <FSMC_NORSRAM_Init+0xd0>)
 8009304:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800930c:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8009314:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	681a      	ldr	r2, [r3, #0]
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	43db      	mvns	r3, r3
 8009324:	ea02 0103 	and.w	r1, r2, r3
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	681a      	ldr	r2, [r3, #0]
 800932c:	693b      	ldr	r3, [r7, #16]
 800932e:	4319      	orrs	r1, r3
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 8009336:	2300      	movs	r3, #0
}
 8009338:	4618      	mov	r0, r3
 800933a:	371c      	adds	r7, #28
 800933c:	46bd      	mov	sp, r7
 800933e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009342:	4770      	bx	lr
 8009344:	0008fb7f 	.word	0x0008fb7f

08009348 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009348:	b480      	push	{r7}
 800934a:	b085      	sub	sp, #20
 800934c:	af00      	add	r7, sp, #0
 800934e:	60f8      	str	r0, [r7, #12]
 8009350:	60b9      	str	r1, [r7, #8]
 8009352:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	1c5a      	adds	r2, r3, #1
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800935e:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	681a      	ldr	r2, [r3, #0]
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	685b      	ldr	r3, [r3, #4]
 800936a:	011b      	lsls	r3, r3, #4
 800936c:	431a      	orrs	r2, r3
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	689b      	ldr	r3, [r3, #8]
 8009372:	021b      	lsls	r3, r3, #8
 8009374:	431a      	orrs	r2, r3
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	68db      	ldr	r3, [r3, #12]
 800937a:	041b      	lsls	r3, r3, #16
 800937c:	431a      	orrs	r2, r3
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	691b      	ldr	r3, [r3, #16]
 8009382:	3b01      	subs	r3, #1
 8009384:	051b      	lsls	r3, r3, #20
 8009386:	431a      	orrs	r2, r3
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	695b      	ldr	r3, [r3, #20]
 800938c:	3b02      	subs	r3, #2
 800938e:	061b      	lsls	r3, r3, #24
 8009390:	431a      	orrs	r2, r3
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	699b      	ldr	r3, [r3, #24]
 8009396:	4313      	orrs	r3, r2
 8009398:	687a      	ldr	r2, [r7, #4]
 800939a:	3201      	adds	r2, #1
 800939c:	4319      	orrs	r1, r3
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 80093a4:	2300      	movs	r3, #0
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	3714      	adds	r7, #20
 80093aa:	46bd      	mov	sp, r7
 80093ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b0:	4770      	bx	lr
	...

080093b4 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 80093b4:	b480      	push	{r7}
 80093b6:	b085      	sub	sp, #20
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	60f8      	str	r0, [r7, #12]
 80093bc:	60b9      	str	r1, [r7, #8]
 80093be:	607a      	str	r2, [r7, #4]
 80093c0:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80093c8:	d11d      	bne.n	8009406 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	687a      	ldr	r2, [r7, #4]
 80093ce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80093d2:	4b13      	ldr	r3, [pc, #76]	; (8009420 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 80093d4:	4013      	ands	r3, r2
 80093d6:	68ba      	ldr	r2, [r7, #8]
 80093d8:	6811      	ldr	r1, [r2, #0]
 80093da:	68ba      	ldr	r2, [r7, #8]
 80093dc:	6852      	ldr	r2, [r2, #4]
 80093de:	0112      	lsls	r2, r2, #4
 80093e0:	4311      	orrs	r1, r2
 80093e2:	68ba      	ldr	r2, [r7, #8]
 80093e4:	6892      	ldr	r2, [r2, #8]
 80093e6:	0212      	lsls	r2, r2, #8
 80093e8:	4311      	orrs	r1, r2
 80093ea:	68ba      	ldr	r2, [r7, #8]
 80093ec:	6992      	ldr	r2, [r2, #24]
 80093ee:	4311      	orrs	r1, r2
 80093f0:	68ba      	ldr	r2, [r7, #8]
 80093f2:	68d2      	ldr	r2, [r2, #12]
 80093f4:	0412      	lsls	r2, r2, #16
 80093f6:	430a      	orrs	r2, r1
 80093f8:	ea43 0102 	orr.w	r1, r3, r2
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	687a      	ldr	r2, [r7, #4]
 8009400:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8009404:	e005      	b.n	8009412 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	687a      	ldr	r2, [r7, #4]
 800940a:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800940e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8009412:	2300      	movs	r3, #0
}
 8009414:	4618      	mov	r0, r3
 8009416:	3714      	adds	r7, #20
 8009418:	46bd      	mov	sp, r7
 800941a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941e:	4770      	bx	lr
 8009420:	cff00000 	.word	0xcff00000

08009424 <atoi>:
 8009424:	220a      	movs	r2, #10
 8009426:	2100      	movs	r1, #0
 8009428:	f000 b8e2 	b.w	80095f0 <strtol>

0800942c <__errno>:
 800942c:	4b01      	ldr	r3, [pc, #4]	; (8009434 <__errno+0x8>)
 800942e:	6818      	ldr	r0, [r3, #0]
 8009430:	4770      	bx	lr
 8009432:	bf00      	nop
 8009434:	20000024 	.word	0x20000024

08009438 <__libc_init_array>:
 8009438:	b570      	push	{r4, r5, r6, lr}
 800943a:	4d0d      	ldr	r5, [pc, #52]	; (8009470 <__libc_init_array+0x38>)
 800943c:	4c0d      	ldr	r4, [pc, #52]	; (8009474 <__libc_init_array+0x3c>)
 800943e:	1b64      	subs	r4, r4, r5
 8009440:	10a4      	asrs	r4, r4, #2
 8009442:	2600      	movs	r6, #0
 8009444:	42a6      	cmp	r6, r4
 8009446:	d109      	bne.n	800945c <__libc_init_array+0x24>
 8009448:	4d0b      	ldr	r5, [pc, #44]	; (8009478 <__libc_init_array+0x40>)
 800944a:	4c0c      	ldr	r4, [pc, #48]	; (800947c <__libc_init_array+0x44>)
 800944c:	f001 f850 	bl	800a4f0 <_init>
 8009450:	1b64      	subs	r4, r4, r5
 8009452:	10a4      	asrs	r4, r4, #2
 8009454:	2600      	movs	r6, #0
 8009456:	42a6      	cmp	r6, r4
 8009458:	d105      	bne.n	8009466 <__libc_init_array+0x2e>
 800945a:	bd70      	pop	{r4, r5, r6, pc}
 800945c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009460:	4798      	blx	r3
 8009462:	3601      	adds	r6, #1
 8009464:	e7ee      	b.n	8009444 <__libc_init_array+0xc>
 8009466:	f855 3b04 	ldr.w	r3, [r5], #4
 800946a:	4798      	blx	r3
 800946c:	3601      	adds	r6, #1
 800946e:	e7f2      	b.n	8009456 <__libc_init_array+0x1e>
 8009470:	0800b614 	.word	0x0800b614
 8009474:	0800b614 	.word	0x0800b614
 8009478:	0800b614 	.word	0x0800b614
 800947c:	0800b618 	.word	0x0800b618

08009480 <memcpy>:
 8009480:	440a      	add	r2, r1
 8009482:	4291      	cmp	r1, r2
 8009484:	f100 33ff 	add.w	r3, r0, #4294967295
 8009488:	d100      	bne.n	800948c <memcpy+0xc>
 800948a:	4770      	bx	lr
 800948c:	b510      	push	{r4, lr}
 800948e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009492:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009496:	4291      	cmp	r1, r2
 8009498:	d1f9      	bne.n	800948e <memcpy+0xe>
 800949a:	bd10      	pop	{r4, pc}

0800949c <memset>:
 800949c:	4402      	add	r2, r0
 800949e:	4603      	mov	r3, r0
 80094a0:	4293      	cmp	r3, r2
 80094a2:	d100      	bne.n	80094a6 <memset+0xa>
 80094a4:	4770      	bx	lr
 80094a6:	f803 1b01 	strb.w	r1, [r3], #1
 80094aa:	e7f9      	b.n	80094a0 <memset+0x4>

080094ac <iprintf>:
 80094ac:	b40f      	push	{r0, r1, r2, r3}
 80094ae:	4b0a      	ldr	r3, [pc, #40]	; (80094d8 <iprintf+0x2c>)
 80094b0:	b513      	push	{r0, r1, r4, lr}
 80094b2:	681c      	ldr	r4, [r3, #0]
 80094b4:	b124      	cbz	r4, 80094c0 <iprintf+0x14>
 80094b6:	69a3      	ldr	r3, [r4, #24]
 80094b8:	b913      	cbnz	r3, 80094c0 <iprintf+0x14>
 80094ba:	4620      	mov	r0, r4
 80094bc:	f000 fa7c 	bl	80099b8 <__sinit>
 80094c0:	ab05      	add	r3, sp, #20
 80094c2:	9a04      	ldr	r2, [sp, #16]
 80094c4:	68a1      	ldr	r1, [r4, #8]
 80094c6:	9301      	str	r3, [sp, #4]
 80094c8:	4620      	mov	r0, r4
 80094ca:	f000 fc85 	bl	8009dd8 <_vfiprintf_r>
 80094ce:	b002      	add	sp, #8
 80094d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094d4:	b004      	add	sp, #16
 80094d6:	4770      	bx	lr
 80094d8:	20000024 	.word	0x20000024

080094dc <strcpy>:
 80094dc:	4603      	mov	r3, r0
 80094de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80094e2:	f803 2b01 	strb.w	r2, [r3], #1
 80094e6:	2a00      	cmp	r2, #0
 80094e8:	d1f9      	bne.n	80094de <strcpy+0x2>
 80094ea:	4770      	bx	lr

080094ec <_strtol_l.constprop.0>:
 80094ec:	2b01      	cmp	r3, #1
 80094ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094f2:	d001      	beq.n	80094f8 <_strtol_l.constprop.0+0xc>
 80094f4:	2b24      	cmp	r3, #36	; 0x24
 80094f6:	d906      	bls.n	8009506 <_strtol_l.constprop.0+0x1a>
 80094f8:	f7ff ff98 	bl	800942c <__errno>
 80094fc:	2316      	movs	r3, #22
 80094fe:	6003      	str	r3, [r0, #0]
 8009500:	2000      	movs	r0, #0
 8009502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009506:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80095ec <_strtol_l.constprop.0+0x100>
 800950a:	460d      	mov	r5, r1
 800950c:	462e      	mov	r6, r5
 800950e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009512:	f814 700c 	ldrb.w	r7, [r4, ip]
 8009516:	f017 0708 	ands.w	r7, r7, #8
 800951a:	d1f7      	bne.n	800950c <_strtol_l.constprop.0+0x20>
 800951c:	2c2d      	cmp	r4, #45	; 0x2d
 800951e:	d132      	bne.n	8009586 <_strtol_l.constprop.0+0x9a>
 8009520:	782c      	ldrb	r4, [r5, #0]
 8009522:	2701      	movs	r7, #1
 8009524:	1cb5      	adds	r5, r6, #2
 8009526:	2b00      	cmp	r3, #0
 8009528:	d05b      	beq.n	80095e2 <_strtol_l.constprop.0+0xf6>
 800952a:	2b10      	cmp	r3, #16
 800952c:	d109      	bne.n	8009542 <_strtol_l.constprop.0+0x56>
 800952e:	2c30      	cmp	r4, #48	; 0x30
 8009530:	d107      	bne.n	8009542 <_strtol_l.constprop.0+0x56>
 8009532:	782c      	ldrb	r4, [r5, #0]
 8009534:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009538:	2c58      	cmp	r4, #88	; 0x58
 800953a:	d14d      	bne.n	80095d8 <_strtol_l.constprop.0+0xec>
 800953c:	786c      	ldrb	r4, [r5, #1]
 800953e:	2310      	movs	r3, #16
 8009540:	3502      	adds	r5, #2
 8009542:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009546:	f108 38ff 	add.w	r8, r8, #4294967295
 800954a:	f04f 0c00 	mov.w	ip, #0
 800954e:	fbb8 f9f3 	udiv	r9, r8, r3
 8009552:	4666      	mov	r6, ip
 8009554:	fb03 8a19 	mls	sl, r3, r9, r8
 8009558:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800955c:	f1be 0f09 	cmp.w	lr, #9
 8009560:	d816      	bhi.n	8009590 <_strtol_l.constprop.0+0xa4>
 8009562:	4674      	mov	r4, lr
 8009564:	42a3      	cmp	r3, r4
 8009566:	dd24      	ble.n	80095b2 <_strtol_l.constprop.0+0xc6>
 8009568:	f1bc 0f00 	cmp.w	ip, #0
 800956c:	db1e      	blt.n	80095ac <_strtol_l.constprop.0+0xc0>
 800956e:	45b1      	cmp	r9, r6
 8009570:	d31c      	bcc.n	80095ac <_strtol_l.constprop.0+0xc0>
 8009572:	d101      	bne.n	8009578 <_strtol_l.constprop.0+0x8c>
 8009574:	45a2      	cmp	sl, r4
 8009576:	db19      	blt.n	80095ac <_strtol_l.constprop.0+0xc0>
 8009578:	fb06 4603 	mla	r6, r6, r3, r4
 800957c:	f04f 0c01 	mov.w	ip, #1
 8009580:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009584:	e7e8      	b.n	8009558 <_strtol_l.constprop.0+0x6c>
 8009586:	2c2b      	cmp	r4, #43	; 0x2b
 8009588:	bf04      	itt	eq
 800958a:	782c      	ldrbeq	r4, [r5, #0]
 800958c:	1cb5      	addeq	r5, r6, #2
 800958e:	e7ca      	b.n	8009526 <_strtol_l.constprop.0+0x3a>
 8009590:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009594:	f1be 0f19 	cmp.w	lr, #25
 8009598:	d801      	bhi.n	800959e <_strtol_l.constprop.0+0xb2>
 800959a:	3c37      	subs	r4, #55	; 0x37
 800959c:	e7e2      	b.n	8009564 <_strtol_l.constprop.0+0x78>
 800959e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80095a2:	f1be 0f19 	cmp.w	lr, #25
 80095a6:	d804      	bhi.n	80095b2 <_strtol_l.constprop.0+0xc6>
 80095a8:	3c57      	subs	r4, #87	; 0x57
 80095aa:	e7db      	b.n	8009564 <_strtol_l.constprop.0+0x78>
 80095ac:	f04f 3cff 	mov.w	ip, #4294967295
 80095b0:	e7e6      	b.n	8009580 <_strtol_l.constprop.0+0x94>
 80095b2:	f1bc 0f00 	cmp.w	ip, #0
 80095b6:	da05      	bge.n	80095c4 <_strtol_l.constprop.0+0xd8>
 80095b8:	2322      	movs	r3, #34	; 0x22
 80095ba:	6003      	str	r3, [r0, #0]
 80095bc:	4646      	mov	r6, r8
 80095be:	b942      	cbnz	r2, 80095d2 <_strtol_l.constprop.0+0xe6>
 80095c0:	4630      	mov	r0, r6
 80095c2:	e79e      	b.n	8009502 <_strtol_l.constprop.0+0x16>
 80095c4:	b107      	cbz	r7, 80095c8 <_strtol_l.constprop.0+0xdc>
 80095c6:	4276      	negs	r6, r6
 80095c8:	2a00      	cmp	r2, #0
 80095ca:	d0f9      	beq.n	80095c0 <_strtol_l.constprop.0+0xd4>
 80095cc:	f1bc 0f00 	cmp.w	ip, #0
 80095d0:	d000      	beq.n	80095d4 <_strtol_l.constprop.0+0xe8>
 80095d2:	1e69      	subs	r1, r5, #1
 80095d4:	6011      	str	r1, [r2, #0]
 80095d6:	e7f3      	b.n	80095c0 <_strtol_l.constprop.0+0xd4>
 80095d8:	2430      	movs	r4, #48	; 0x30
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d1b1      	bne.n	8009542 <_strtol_l.constprop.0+0x56>
 80095de:	2308      	movs	r3, #8
 80095e0:	e7af      	b.n	8009542 <_strtol_l.constprop.0+0x56>
 80095e2:	2c30      	cmp	r4, #48	; 0x30
 80095e4:	d0a5      	beq.n	8009532 <_strtol_l.constprop.0+0x46>
 80095e6:	230a      	movs	r3, #10
 80095e8:	e7ab      	b.n	8009542 <_strtol_l.constprop.0+0x56>
 80095ea:	bf00      	nop
 80095ec:	0800b475 	.word	0x0800b475

080095f0 <strtol>:
 80095f0:	4613      	mov	r3, r2
 80095f2:	460a      	mov	r2, r1
 80095f4:	4601      	mov	r1, r0
 80095f6:	4802      	ldr	r0, [pc, #8]	; (8009600 <strtol+0x10>)
 80095f8:	6800      	ldr	r0, [r0, #0]
 80095fa:	f7ff bf77 	b.w	80094ec <_strtol_l.constprop.0>
 80095fe:	bf00      	nop
 8009600:	20000024 	.word	0x20000024

08009604 <__swbuf_r>:
 8009604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009606:	460e      	mov	r6, r1
 8009608:	4614      	mov	r4, r2
 800960a:	4605      	mov	r5, r0
 800960c:	b118      	cbz	r0, 8009616 <__swbuf_r+0x12>
 800960e:	6983      	ldr	r3, [r0, #24]
 8009610:	b90b      	cbnz	r3, 8009616 <__swbuf_r+0x12>
 8009612:	f000 f9d1 	bl	80099b8 <__sinit>
 8009616:	4b21      	ldr	r3, [pc, #132]	; (800969c <__swbuf_r+0x98>)
 8009618:	429c      	cmp	r4, r3
 800961a:	d12b      	bne.n	8009674 <__swbuf_r+0x70>
 800961c:	686c      	ldr	r4, [r5, #4]
 800961e:	69a3      	ldr	r3, [r4, #24]
 8009620:	60a3      	str	r3, [r4, #8]
 8009622:	89a3      	ldrh	r3, [r4, #12]
 8009624:	071a      	lsls	r2, r3, #28
 8009626:	d52f      	bpl.n	8009688 <__swbuf_r+0x84>
 8009628:	6923      	ldr	r3, [r4, #16]
 800962a:	b36b      	cbz	r3, 8009688 <__swbuf_r+0x84>
 800962c:	6923      	ldr	r3, [r4, #16]
 800962e:	6820      	ldr	r0, [r4, #0]
 8009630:	1ac0      	subs	r0, r0, r3
 8009632:	6963      	ldr	r3, [r4, #20]
 8009634:	b2f6      	uxtb	r6, r6
 8009636:	4283      	cmp	r3, r0
 8009638:	4637      	mov	r7, r6
 800963a:	dc04      	bgt.n	8009646 <__swbuf_r+0x42>
 800963c:	4621      	mov	r1, r4
 800963e:	4628      	mov	r0, r5
 8009640:	f000 f926 	bl	8009890 <_fflush_r>
 8009644:	bb30      	cbnz	r0, 8009694 <__swbuf_r+0x90>
 8009646:	68a3      	ldr	r3, [r4, #8]
 8009648:	3b01      	subs	r3, #1
 800964a:	60a3      	str	r3, [r4, #8]
 800964c:	6823      	ldr	r3, [r4, #0]
 800964e:	1c5a      	adds	r2, r3, #1
 8009650:	6022      	str	r2, [r4, #0]
 8009652:	701e      	strb	r6, [r3, #0]
 8009654:	6963      	ldr	r3, [r4, #20]
 8009656:	3001      	adds	r0, #1
 8009658:	4283      	cmp	r3, r0
 800965a:	d004      	beq.n	8009666 <__swbuf_r+0x62>
 800965c:	89a3      	ldrh	r3, [r4, #12]
 800965e:	07db      	lsls	r3, r3, #31
 8009660:	d506      	bpl.n	8009670 <__swbuf_r+0x6c>
 8009662:	2e0a      	cmp	r6, #10
 8009664:	d104      	bne.n	8009670 <__swbuf_r+0x6c>
 8009666:	4621      	mov	r1, r4
 8009668:	4628      	mov	r0, r5
 800966a:	f000 f911 	bl	8009890 <_fflush_r>
 800966e:	b988      	cbnz	r0, 8009694 <__swbuf_r+0x90>
 8009670:	4638      	mov	r0, r7
 8009672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009674:	4b0a      	ldr	r3, [pc, #40]	; (80096a0 <__swbuf_r+0x9c>)
 8009676:	429c      	cmp	r4, r3
 8009678:	d101      	bne.n	800967e <__swbuf_r+0x7a>
 800967a:	68ac      	ldr	r4, [r5, #8]
 800967c:	e7cf      	b.n	800961e <__swbuf_r+0x1a>
 800967e:	4b09      	ldr	r3, [pc, #36]	; (80096a4 <__swbuf_r+0xa0>)
 8009680:	429c      	cmp	r4, r3
 8009682:	bf08      	it	eq
 8009684:	68ec      	ldreq	r4, [r5, #12]
 8009686:	e7ca      	b.n	800961e <__swbuf_r+0x1a>
 8009688:	4621      	mov	r1, r4
 800968a:	4628      	mov	r0, r5
 800968c:	f000 f80c 	bl	80096a8 <__swsetup_r>
 8009690:	2800      	cmp	r0, #0
 8009692:	d0cb      	beq.n	800962c <__swbuf_r+0x28>
 8009694:	f04f 37ff 	mov.w	r7, #4294967295
 8009698:	e7ea      	b.n	8009670 <__swbuf_r+0x6c>
 800969a:	bf00      	nop
 800969c:	0800b598 	.word	0x0800b598
 80096a0:	0800b5b8 	.word	0x0800b5b8
 80096a4:	0800b578 	.word	0x0800b578

080096a8 <__swsetup_r>:
 80096a8:	4b32      	ldr	r3, [pc, #200]	; (8009774 <__swsetup_r+0xcc>)
 80096aa:	b570      	push	{r4, r5, r6, lr}
 80096ac:	681d      	ldr	r5, [r3, #0]
 80096ae:	4606      	mov	r6, r0
 80096b0:	460c      	mov	r4, r1
 80096b2:	b125      	cbz	r5, 80096be <__swsetup_r+0x16>
 80096b4:	69ab      	ldr	r3, [r5, #24]
 80096b6:	b913      	cbnz	r3, 80096be <__swsetup_r+0x16>
 80096b8:	4628      	mov	r0, r5
 80096ba:	f000 f97d 	bl	80099b8 <__sinit>
 80096be:	4b2e      	ldr	r3, [pc, #184]	; (8009778 <__swsetup_r+0xd0>)
 80096c0:	429c      	cmp	r4, r3
 80096c2:	d10f      	bne.n	80096e4 <__swsetup_r+0x3c>
 80096c4:	686c      	ldr	r4, [r5, #4]
 80096c6:	89a3      	ldrh	r3, [r4, #12]
 80096c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80096cc:	0719      	lsls	r1, r3, #28
 80096ce:	d42c      	bmi.n	800972a <__swsetup_r+0x82>
 80096d0:	06dd      	lsls	r5, r3, #27
 80096d2:	d411      	bmi.n	80096f8 <__swsetup_r+0x50>
 80096d4:	2309      	movs	r3, #9
 80096d6:	6033      	str	r3, [r6, #0]
 80096d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80096dc:	81a3      	strh	r3, [r4, #12]
 80096de:	f04f 30ff 	mov.w	r0, #4294967295
 80096e2:	e03e      	b.n	8009762 <__swsetup_r+0xba>
 80096e4:	4b25      	ldr	r3, [pc, #148]	; (800977c <__swsetup_r+0xd4>)
 80096e6:	429c      	cmp	r4, r3
 80096e8:	d101      	bne.n	80096ee <__swsetup_r+0x46>
 80096ea:	68ac      	ldr	r4, [r5, #8]
 80096ec:	e7eb      	b.n	80096c6 <__swsetup_r+0x1e>
 80096ee:	4b24      	ldr	r3, [pc, #144]	; (8009780 <__swsetup_r+0xd8>)
 80096f0:	429c      	cmp	r4, r3
 80096f2:	bf08      	it	eq
 80096f4:	68ec      	ldreq	r4, [r5, #12]
 80096f6:	e7e6      	b.n	80096c6 <__swsetup_r+0x1e>
 80096f8:	0758      	lsls	r0, r3, #29
 80096fa:	d512      	bpl.n	8009722 <__swsetup_r+0x7a>
 80096fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80096fe:	b141      	cbz	r1, 8009712 <__swsetup_r+0x6a>
 8009700:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009704:	4299      	cmp	r1, r3
 8009706:	d002      	beq.n	800970e <__swsetup_r+0x66>
 8009708:	4630      	mov	r0, r6
 800970a:	f000 fa5b 	bl	8009bc4 <_free_r>
 800970e:	2300      	movs	r3, #0
 8009710:	6363      	str	r3, [r4, #52]	; 0x34
 8009712:	89a3      	ldrh	r3, [r4, #12]
 8009714:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009718:	81a3      	strh	r3, [r4, #12]
 800971a:	2300      	movs	r3, #0
 800971c:	6063      	str	r3, [r4, #4]
 800971e:	6923      	ldr	r3, [r4, #16]
 8009720:	6023      	str	r3, [r4, #0]
 8009722:	89a3      	ldrh	r3, [r4, #12]
 8009724:	f043 0308 	orr.w	r3, r3, #8
 8009728:	81a3      	strh	r3, [r4, #12]
 800972a:	6923      	ldr	r3, [r4, #16]
 800972c:	b94b      	cbnz	r3, 8009742 <__swsetup_r+0x9a>
 800972e:	89a3      	ldrh	r3, [r4, #12]
 8009730:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009734:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009738:	d003      	beq.n	8009742 <__swsetup_r+0x9a>
 800973a:	4621      	mov	r1, r4
 800973c:	4630      	mov	r0, r6
 800973e:	f000 fa01 	bl	8009b44 <__smakebuf_r>
 8009742:	89a0      	ldrh	r0, [r4, #12]
 8009744:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009748:	f010 0301 	ands.w	r3, r0, #1
 800974c:	d00a      	beq.n	8009764 <__swsetup_r+0xbc>
 800974e:	2300      	movs	r3, #0
 8009750:	60a3      	str	r3, [r4, #8]
 8009752:	6963      	ldr	r3, [r4, #20]
 8009754:	425b      	negs	r3, r3
 8009756:	61a3      	str	r3, [r4, #24]
 8009758:	6923      	ldr	r3, [r4, #16]
 800975a:	b943      	cbnz	r3, 800976e <__swsetup_r+0xc6>
 800975c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009760:	d1ba      	bne.n	80096d8 <__swsetup_r+0x30>
 8009762:	bd70      	pop	{r4, r5, r6, pc}
 8009764:	0781      	lsls	r1, r0, #30
 8009766:	bf58      	it	pl
 8009768:	6963      	ldrpl	r3, [r4, #20]
 800976a:	60a3      	str	r3, [r4, #8]
 800976c:	e7f4      	b.n	8009758 <__swsetup_r+0xb0>
 800976e:	2000      	movs	r0, #0
 8009770:	e7f7      	b.n	8009762 <__swsetup_r+0xba>
 8009772:	bf00      	nop
 8009774:	20000024 	.word	0x20000024
 8009778:	0800b598 	.word	0x0800b598
 800977c:	0800b5b8 	.word	0x0800b5b8
 8009780:	0800b578 	.word	0x0800b578

08009784 <__sflush_r>:
 8009784:	898a      	ldrh	r2, [r1, #12]
 8009786:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800978a:	4605      	mov	r5, r0
 800978c:	0710      	lsls	r0, r2, #28
 800978e:	460c      	mov	r4, r1
 8009790:	d458      	bmi.n	8009844 <__sflush_r+0xc0>
 8009792:	684b      	ldr	r3, [r1, #4]
 8009794:	2b00      	cmp	r3, #0
 8009796:	dc05      	bgt.n	80097a4 <__sflush_r+0x20>
 8009798:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800979a:	2b00      	cmp	r3, #0
 800979c:	dc02      	bgt.n	80097a4 <__sflush_r+0x20>
 800979e:	2000      	movs	r0, #0
 80097a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80097a6:	2e00      	cmp	r6, #0
 80097a8:	d0f9      	beq.n	800979e <__sflush_r+0x1a>
 80097aa:	2300      	movs	r3, #0
 80097ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80097b0:	682f      	ldr	r7, [r5, #0]
 80097b2:	602b      	str	r3, [r5, #0]
 80097b4:	d032      	beq.n	800981c <__sflush_r+0x98>
 80097b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80097b8:	89a3      	ldrh	r3, [r4, #12]
 80097ba:	075a      	lsls	r2, r3, #29
 80097bc:	d505      	bpl.n	80097ca <__sflush_r+0x46>
 80097be:	6863      	ldr	r3, [r4, #4]
 80097c0:	1ac0      	subs	r0, r0, r3
 80097c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80097c4:	b10b      	cbz	r3, 80097ca <__sflush_r+0x46>
 80097c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80097c8:	1ac0      	subs	r0, r0, r3
 80097ca:	2300      	movs	r3, #0
 80097cc:	4602      	mov	r2, r0
 80097ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80097d0:	6a21      	ldr	r1, [r4, #32]
 80097d2:	4628      	mov	r0, r5
 80097d4:	47b0      	blx	r6
 80097d6:	1c43      	adds	r3, r0, #1
 80097d8:	89a3      	ldrh	r3, [r4, #12]
 80097da:	d106      	bne.n	80097ea <__sflush_r+0x66>
 80097dc:	6829      	ldr	r1, [r5, #0]
 80097de:	291d      	cmp	r1, #29
 80097e0:	d82c      	bhi.n	800983c <__sflush_r+0xb8>
 80097e2:	4a2a      	ldr	r2, [pc, #168]	; (800988c <__sflush_r+0x108>)
 80097e4:	40ca      	lsrs	r2, r1
 80097e6:	07d6      	lsls	r6, r2, #31
 80097e8:	d528      	bpl.n	800983c <__sflush_r+0xb8>
 80097ea:	2200      	movs	r2, #0
 80097ec:	6062      	str	r2, [r4, #4]
 80097ee:	04d9      	lsls	r1, r3, #19
 80097f0:	6922      	ldr	r2, [r4, #16]
 80097f2:	6022      	str	r2, [r4, #0]
 80097f4:	d504      	bpl.n	8009800 <__sflush_r+0x7c>
 80097f6:	1c42      	adds	r2, r0, #1
 80097f8:	d101      	bne.n	80097fe <__sflush_r+0x7a>
 80097fa:	682b      	ldr	r3, [r5, #0]
 80097fc:	b903      	cbnz	r3, 8009800 <__sflush_r+0x7c>
 80097fe:	6560      	str	r0, [r4, #84]	; 0x54
 8009800:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009802:	602f      	str	r7, [r5, #0]
 8009804:	2900      	cmp	r1, #0
 8009806:	d0ca      	beq.n	800979e <__sflush_r+0x1a>
 8009808:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800980c:	4299      	cmp	r1, r3
 800980e:	d002      	beq.n	8009816 <__sflush_r+0x92>
 8009810:	4628      	mov	r0, r5
 8009812:	f000 f9d7 	bl	8009bc4 <_free_r>
 8009816:	2000      	movs	r0, #0
 8009818:	6360      	str	r0, [r4, #52]	; 0x34
 800981a:	e7c1      	b.n	80097a0 <__sflush_r+0x1c>
 800981c:	6a21      	ldr	r1, [r4, #32]
 800981e:	2301      	movs	r3, #1
 8009820:	4628      	mov	r0, r5
 8009822:	47b0      	blx	r6
 8009824:	1c41      	adds	r1, r0, #1
 8009826:	d1c7      	bne.n	80097b8 <__sflush_r+0x34>
 8009828:	682b      	ldr	r3, [r5, #0]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d0c4      	beq.n	80097b8 <__sflush_r+0x34>
 800982e:	2b1d      	cmp	r3, #29
 8009830:	d001      	beq.n	8009836 <__sflush_r+0xb2>
 8009832:	2b16      	cmp	r3, #22
 8009834:	d101      	bne.n	800983a <__sflush_r+0xb6>
 8009836:	602f      	str	r7, [r5, #0]
 8009838:	e7b1      	b.n	800979e <__sflush_r+0x1a>
 800983a:	89a3      	ldrh	r3, [r4, #12]
 800983c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009840:	81a3      	strh	r3, [r4, #12]
 8009842:	e7ad      	b.n	80097a0 <__sflush_r+0x1c>
 8009844:	690f      	ldr	r7, [r1, #16]
 8009846:	2f00      	cmp	r7, #0
 8009848:	d0a9      	beq.n	800979e <__sflush_r+0x1a>
 800984a:	0793      	lsls	r3, r2, #30
 800984c:	680e      	ldr	r6, [r1, #0]
 800984e:	bf08      	it	eq
 8009850:	694b      	ldreq	r3, [r1, #20]
 8009852:	600f      	str	r7, [r1, #0]
 8009854:	bf18      	it	ne
 8009856:	2300      	movne	r3, #0
 8009858:	eba6 0807 	sub.w	r8, r6, r7
 800985c:	608b      	str	r3, [r1, #8]
 800985e:	f1b8 0f00 	cmp.w	r8, #0
 8009862:	dd9c      	ble.n	800979e <__sflush_r+0x1a>
 8009864:	6a21      	ldr	r1, [r4, #32]
 8009866:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009868:	4643      	mov	r3, r8
 800986a:	463a      	mov	r2, r7
 800986c:	4628      	mov	r0, r5
 800986e:	47b0      	blx	r6
 8009870:	2800      	cmp	r0, #0
 8009872:	dc06      	bgt.n	8009882 <__sflush_r+0xfe>
 8009874:	89a3      	ldrh	r3, [r4, #12]
 8009876:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800987a:	81a3      	strh	r3, [r4, #12]
 800987c:	f04f 30ff 	mov.w	r0, #4294967295
 8009880:	e78e      	b.n	80097a0 <__sflush_r+0x1c>
 8009882:	4407      	add	r7, r0
 8009884:	eba8 0800 	sub.w	r8, r8, r0
 8009888:	e7e9      	b.n	800985e <__sflush_r+0xda>
 800988a:	bf00      	nop
 800988c:	20400001 	.word	0x20400001

08009890 <_fflush_r>:
 8009890:	b538      	push	{r3, r4, r5, lr}
 8009892:	690b      	ldr	r3, [r1, #16]
 8009894:	4605      	mov	r5, r0
 8009896:	460c      	mov	r4, r1
 8009898:	b913      	cbnz	r3, 80098a0 <_fflush_r+0x10>
 800989a:	2500      	movs	r5, #0
 800989c:	4628      	mov	r0, r5
 800989e:	bd38      	pop	{r3, r4, r5, pc}
 80098a0:	b118      	cbz	r0, 80098aa <_fflush_r+0x1a>
 80098a2:	6983      	ldr	r3, [r0, #24]
 80098a4:	b90b      	cbnz	r3, 80098aa <_fflush_r+0x1a>
 80098a6:	f000 f887 	bl	80099b8 <__sinit>
 80098aa:	4b14      	ldr	r3, [pc, #80]	; (80098fc <_fflush_r+0x6c>)
 80098ac:	429c      	cmp	r4, r3
 80098ae:	d11b      	bne.n	80098e8 <_fflush_r+0x58>
 80098b0:	686c      	ldr	r4, [r5, #4]
 80098b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d0ef      	beq.n	800989a <_fflush_r+0xa>
 80098ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80098bc:	07d0      	lsls	r0, r2, #31
 80098be:	d404      	bmi.n	80098ca <_fflush_r+0x3a>
 80098c0:	0599      	lsls	r1, r3, #22
 80098c2:	d402      	bmi.n	80098ca <_fflush_r+0x3a>
 80098c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80098c6:	f000 f915 	bl	8009af4 <__retarget_lock_acquire_recursive>
 80098ca:	4628      	mov	r0, r5
 80098cc:	4621      	mov	r1, r4
 80098ce:	f7ff ff59 	bl	8009784 <__sflush_r>
 80098d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80098d4:	07da      	lsls	r2, r3, #31
 80098d6:	4605      	mov	r5, r0
 80098d8:	d4e0      	bmi.n	800989c <_fflush_r+0xc>
 80098da:	89a3      	ldrh	r3, [r4, #12]
 80098dc:	059b      	lsls	r3, r3, #22
 80098de:	d4dd      	bmi.n	800989c <_fflush_r+0xc>
 80098e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80098e2:	f000 f908 	bl	8009af6 <__retarget_lock_release_recursive>
 80098e6:	e7d9      	b.n	800989c <_fflush_r+0xc>
 80098e8:	4b05      	ldr	r3, [pc, #20]	; (8009900 <_fflush_r+0x70>)
 80098ea:	429c      	cmp	r4, r3
 80098ec:	d101      	bne.n	80098f2 <_fflush_r+0x62>
 80098ee:	68ac      	ldr	r4, [r5, #8]
 80098f0:	e7df      	b.n	80098b2 <_fflush_r+0x22>
 80098f2:	4b04      	ldr	r3, [pc, #16]	; (8009904 <_fflush_r+0x74>)
 80098f4:	429c      	cmp	r4, r3
 80098f6:	bf08      	it	eq
 80098f8:	68ec      	ldreq	r4, [r5, #12]
 80098fa:	e7da      	b.n	80098b2 <_fflush_r+0x22>
 80098fc:	0800b598 	.word	0x0800b598
 8009900:	0800b5b8 	.word	0x0800b5b8
 8009904:	0800b578 	.word	0x0800b578

08009908 <std>:
 8009908:	2300      	movs	r3, #0
 800990a:	b510      	push	{r4, lr}
 800990c:	4604      	mov	r4, r0
 800990e:	e9c0 3300 	strd	r3, r3, [r0]
 8009912:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009916:	6083      	str	r3, [r0, #8]
 8009918:	8181      	strh	r1, [r0, #12]
 800991a:	6643      	str	r3, [r0, #100]	; 0x64
 800991c:	81c2      	strh	r2, [r0, #14]
 800991e:	6183      	str	r3, [r0, #24]
 8009920:	4619      	mov	r1, r3
 8009922:	2208      	movs	r2, #8
 8009924:	305c      	adds	r0, #92	; 0x5c
 8009926:	f7ff fdb9 	bl	800949c <memset>
 800992a:	4b05      	ldr	r3, [pc, #20]	; (8009940 <std+0x38>)
 800992c:	6263      	str	r3, [r4, #36]	; 0x24
 800992e:	4b05      	ldr	r3, [pc, #20]	; (8009944 <std+0x3c>)
 8009930:	62a3      	str	r3, [r4, #40]	; 0x28
 8009932:	4b05      	ldr	r3, [pc, #20]	; (8009948 <std+0x40>)
 8009934:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009936:	4b05      	ldr	r3, [pc, #20]	; (800994c <std+0x44>)
 8009938:	6224      	str	r4, [r4, #32]
 800993a:	6323      	str	r3, [r4, #48]	; 0x30
 800993c:	bd10      	pop	{r4, pc}
 800993e:	bf00      	nop
 8009940:	0800a381 	.word	0x0800a381
 8009944:	0800a3a3 	.word	0x0800a3a3
 8009948:	0800a3db 	.word	0x0800a3db
 800994c:	0800a3ff 	.word	0x0800a3ff

08009950 <_cleanup_r>:
 8009950:	4901      	ldr	r1, [pc, #4]	; (8009958 <_cleanup_r+0x8>)
 8009952:	f000 b8af 	b.w	8009ab4 <_fwalk_reent>
 8009956:	bf00      	nop
 8009958:	08009891 	.word	0x08009891

0800995c <__sfmoreglue>:
 800995c:	b570      	push	{r4, r5, r6, lr}
 800995e:	2268      	movs	r2, #104	; 0x68
 8009960:	1e4d      	subs	r5, r1, #1
 8009962:	4355      	muls	r5, r2
 8009964:	460e      	mov	r6, r1
 8009966:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800996a:	f000 f997 	bl	8009c9c <_malloc_r>
 800996e:	4604      	mov	r4, r0
 8009970:	b140      	cbz	r0, 8009984 <__sfmoreglue+0x28>
 8009972:	2100      	movs	r1, #0
 8009974:	e9c0 1600 	strd	r1, r6, [r0]
 8009978:	300c      	adds	r0, #12
 800997a:	60a0      	str	r0, [r4, #8]
 800997c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009980:	f7ff fd8c 	bl	800949c <memset>
 8009984:	4620      	mov	r0, r4
 8009986:	bd70      	pop	{r4, r5, r6, pc}

08009988 <__sfp_lock_acquire>:
 8009988:	4801      	ldr	r0, [pc, #4]	; (8009990 <__sfp_lock_acquire+0x8>)
 800998a:	f000 b8b3 	b.w	8009af4 <__retarget_lock_acquire_recursive>
 800998e:	bf00      	nop
 8009990:	20004e59 	.word	0x20004e59

08009994 <__sfp_lock_release>:
 8009994:	4801      	ldr	r0, [pc, #4]	; (800999c <__sfp_lock_release+0x8>)
 8009996:	f000 b8ae 	b.w	8009af6 <__retarget_lock_release_recursive>
 800999a:	bf00      	nop
 800999c:	20004e59 	.word	0x20004e59

080099a0 <__sinit_lock_acquire>:
 80099a0:	4801      	ldr	r0, [pc, #4]	; (80099a8 <__sinit_lock_acquire+0x8>)
 80099a2:	f000 b8a7 	b.w	8009af4 <__retarget_lock_acquire_recursive>
 80099a6:	bf00      	nop
 80099a8:	20004e5a 	.word	0x20004e5a

080099ac <__sinit_lock_release>:
 80099ac:	4801      	ldr	r0, [pc, #4]	; (80099b4 <__sinit_lock_release+0x8>)
 80099ae:	f000 b8a2 	b.w	8009af6 <__retarget_lock_release_recursive>
 80099b2:	bf00      	nop
 80099b4:	20004e5a 	.word	0x20004e5a

080099b8 <__sinit>:
 80099b8:	b510      	push	{r4, lr}
 80099ba:	4604      	mov	r4, r0
 80099bc:	f7ff fff0 	bl	80099a0 <__sinit_lock_acquire>
 80099c0:	69a3      	ldr	r3, [r4, #24]
 80099c2:	b11b      	cbz	r3, 80099cc <__sinit+0x14>
 80099c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099c8:	f7ff bff0 	b.w	80099ac <__sinit_lock_release>
 80099cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80099d0:	6523      	str	r3, [r4, #80]	; 0x50
 80099d2:	4b13      	ldr	r3, [pc, #76]	; (8009a20 <__sinit+0x68>)
 80099d4:	4a13      	ldr	r2, [pc, #76]	; (8009a24 <__sinit+0x6c>)
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	62a2      	str	r2, [r4, #40]	; 0x28
 80099da:	42a3      	cmp	r3, r4
 80099dc:	bf04      	itt	eq
 80099de:	2301      	moveq	r3, #1
 80099e0:	61a3      	streq	r3, [r4, #24]
 80099e2:	4620      	mov	r0, r4
 80099e4:	f000 f820 	bl	8009a28 <__sfp>
 80099e8:	6060      	str	r0, [r4, #4]
 80099ea:	4620      	mov	r0, r4
 80099ec:	f000 f81c 	bl	8009a28 <__sfp>
 80099f0:	60a0      	str	r0, [r4, #8]
 80099f2:	4620      	mov	r0, r4
 80099f4:	f000 f818 	bl	8009a28 <__sfp>
 80099f8:	2200      	movs	r2, #0
 80099fa:	60e0      	str	r0, [r4, #12]
 80099fc:	2104      	movs	r1, #4
 80099fe:	6860      	ldr	r0, [r4, #4]
 8009a00:	f7ff ff82 	bl	8009908 <std>
 8009a04:	68a0      	ldr	r0, [r4, #8]
 8009a06:	2201      	movs	r2, #1
 8009a08:	2109      	movs	r1, #9
 8009a0a:	f7ff ff7d 	bl	8009908 <std>
 8009a0e:	68e0      	ldr	r0, [r4, #12]
 8009a10:	2202      	movs	r2, #2
 8009a12:	2112      	movs	r1, #18
 8009a14:	f7ff ff78 	bl	8009908 <std>
 8009a18:	2301      	movs	r3, #1
 8009a1a:	61a3      	str	r3, [r4, #24]
 8009a1c:	e7d2      	b.n	80099c4 <__sinit+0xc>
 8009a1e:	bf00      	nop
 8009a20:	0800b470 	.word	0x0800b470
 8009a24:	08009951 	.word	0x08009951

08009a28 <__sfp>:
 8009a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a2a:	4607      	mov	r7, r0
 8009a2c:	f7ff ffac 	bl	8009988 <__sfp_lock_acquire>
 8009a30:	4b1e      	ldr	r3, [pc, #120]	; (8009aac <__sfp+0x84>)
 8009a32:	681e      	ldr	r6, [r3, #0]
 8009a34:	69b3      	ldr	r3, [r6, #24]
 8009a36:	b913      	cbnz	r3, 8009a3e <__sfp+0x16>
 8009a38:	4630      	mov	r0, r6
 8009a3a:	f7ff ffbd 	bl	80099b8 <__sinit>
 8009a3e:	3648      	adds	r6, #72	; 0x48
 8009a40:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009a44:	3b01      	subs	r3, #1
 8009a46:	d503      	bpl.n	8009a50 <__sfp+0x28>
 8009a48:	6833      	ldr	r3, [r6, #0]
 8009a4a:	b30b      	cbz	r3, 8009a90 <__sfp+0x68>
 8009a4c:	6836      	ldr	r6, [r6, #0]
 8009a4e:	e7f7      	b.n	8009a40 <__sfp+0x18>
 8009a50:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009a54:	b9d5      	cbnz	r5, 8009a8c <__sfp+0x64>
 8009a56:	4b16      	ldr	r3, [pc, #88]	; (8009ab0 <__sfp+0x88>)
 8009a58:	60e3      	str	r3, [r4, #12]
 8009a5a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009a5e:	6665      	str	r5, [r4, #100]	; 0x64
 8009a60:	f000 f847 	bl	8009af2 <__retarget_lock_init_recursive>
 8009a64:	f7ff ff96 	bl	8009994 <__sfp_lock_release>
 8009a68:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009a6c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009a70:	6025      	str	r5, [r4, #0]
 8009a72:	61a5      	str	r5, [r4, #24]
 8009a74:	2208      	movs	r2, #8
 8009a76:	4629      	mov	r1, r5
 8009a78:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009a7c:	f7ff fd0e 	bl	800949c <memset>
 8009a80:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009a84:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009a88:	4620      	mov	r0, r4
 8009a8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a8c:	3468      	adds	r4, #104	; 0x68
 8009a8e:	e7d9      	b.n	8009a44 <__sfp+0x1c>
 8009a90:	2104      	movs	r1, #4
 8009a92:	4638      	mov	r0, r7
 8009a94:	f7ff ff62 	bl	800995c <__sfmoreglue>
 8009a98:	4604      	mov	r4, r0
 8009a9a:	6030      	str	r0, [r6, #0]
 8009a9c:	2800      	cmp	r0, #0
 8009a9e:	d1d5      	bne.n	8009a4c <__sfp+0x24>
 8009aa0:	f7ff ff78 	bl	8009994 <__sfp_lock_release>
 8009aa4:	230c      	movs	r3, #12
 8009aa6:	603b      	str	r3, [r7, #0]
 8009aa8:	e7ee      	b.n	8009a88 <__sfp+0x60>
 8009aaa:	bf00      	nop
 8009aac:	0800b470 	.word	0x0800b470
 8009ab0:	ffff0001 	.word	0xffff0001

08009ab4 <_fwalk_reent>:
 8009ab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ab8:	4606      	mov	r6, r0
 8009aba:	4688      	mov	r8, r1
 8009abc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009ac0:	2700      	movs	r7, #0
 8009ac2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009ac6:	f1b9 0901 	subs.w	r9, r9, #1
 8009aca:	d505      	bpl.n	8009ad8 <_fwalk_reent+0x24>
 8009acc:	6824      	ldr	r4, [r4, #0]
 8009ace:	2c00      	cmp	r4, #0
 8009ad0:	d1f7      	bne.n	8009ac2 <_fwalk_reent+0xe>
 8009ad2:	4638      	mov	r0, r7
 8009ad4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ad8:	89ab      	ldrh	r3, [r5, #12]
 8009ada:	2b01      	cmp	r3, #1
 8009adc:	d907      	bls.n	8009aee <_fwalk_reent+0x3a>
 8009ade:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009ae2:	3301      	adds	r3, #1
 8009ae4:	d003      	beq.n	8009aee <_fwalk_reent+0x3a>
 8009ae6:	4629      	mov	r1, r5
 8009ae8:	4630      	mov	r0, r6
 8009aea:	47c0      	blx	r8
 8009aec:	4307      	orrs	r7, r0
 8009aee:	3568      	adds	r5, #104	; 0x68
 8009af0:	e7e9      	b.n	8009ac6 <_fwalk_reent+0x12>

08009af2 <__retarget_lock_init_recursive>:
 8009af2:	4770      	bx	lr

08009af4 <__retarget_lock_acquire_recursive>:
 8009af4:	4770      	bx	lr

08009af6 <__retarget_lock_release_recursive>:
 8009af6:	4770      	bx	lr

08009af8 <__swhatbuf_r>:
 8009af8:	b570      	push	{r4, r5, r6, lr}
 8009afa:	460e      	mov	r6, r1
 8009afc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b00:	2900      	cmp	r1, #0
 8009b02:	b096      	sub	sp, #88	; 0x58
 8009b04:	4614      	mov	r4, r2
 8009b06:	461d      	mov	r5, r3
 8009b08:	da08      	bge.n	8009b1c <__swhatbuf_r+0x24>
 8009b0a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009b0e:	2200      	movs	r2, #0
 8009b10:	602a      	str	r2, [r5, #0]
 8009b12:	061a      	lsls	r2, r3, #24
 8009b14:	d410      	bmi.n	8009b38 <__swhatbuf_r+0x40>
 8009b16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b1a:	e00e      	b.n	8009b3a <__swhatbuf_r+0x42>
 8009b1c:	466a      	mov	r2, sp
 8009b1e:	f000 fc95 	bl	800a44c <_fstat_r>
 8009b22:	2800      	cmp	r0, #0
 8009b24:	dbf1      	blt.n	8009b0a <__swhatbuf_r+0x12>
 8009b26:	9a01      	ldr	r2, [sp, #4]
 8009b28:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009b2c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009b30:	425a      	negs	r2, r3
 8009b32:	415a      	adcs	r2, r3
 8009b34:	602a      	str	r2, [r5, #0]
 8009b36:	e7ee      	b.n	8009b16 <__swhatbuf_r+0x1e>
 8009b38:	2340      	movs	r3, #64	; 0x40
 8009b3a:	2000      	movs	r0, #0
 8009b3c:	6023      	str	r3, [r4, #0]
 8009b3e:	b016      	add	sp, #88	; 0x58
 8009b40:	bd70      	pop	{r4, r5, r6, pc}
	...

08009b44 <__smakebuf_r>:
 8009b44:	898b      	ldrh	r3, [r1, #12]
 8009b46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009b48:	079d      	lsls	r5, r3, #30
 8009b4a:	4606      	mov	r6, r0
 8009b4c:	460c      	mov	r4, r1
 8009b4e:	d507      	bpl.n	8009b60 <__smakebuf_r+0x1c>
 8009b50:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009b54:	6023      	str	r3, [r4, #0]
 8009b56:	6123      	str	r3, [r4, #16]
 8009b58:	2301      	movs	r3, #1
 8009b5a:	6163      	str	r3, [r4, #20]
 8009b5c:	b002      	add	sp, #8
 8009b5e:	bd70      	pop	{r4, r5, r6, pc}
 8009b60:	ab01      	add	r3, sp, #4
 8009b62:	466a      	mov	r2, sp
 8009b64:	f7ff ffc8 	bl	8009af8 <__swhatbuf_r>
 8009b68:	9900      	ldr	r1, [sp, #0]
 8009b6a:	4605      	mov	r5, r0
 8009b6c:	4630      	mov	r0, r6
 8009b6e:	f000 f895 	bl	8009c9c <_malloc_r>
 8009b72:	b948      	cbnz	r0, 8009b88 <__smakebuf_r+0x44>
 8009b74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b78:	059a      	lsls	r2, r3, #22
 8009b7a:	d4ef      	bmi.n	8009b5c <__smakebuf_r+0x18>
 8009b7c:	f023 0303 	bic.w	r3, r3, #3
 8009b80:	f043 0302 	orr.w	r3, r3, #2
 8009b84:	81a3      	strh	r3, [r4, #12]
 8009b86:	e7e3      	b.n	8009b50 <__smakebuf_r+0xc>
 8009b88:	4b0d      	ldr	r3, [pc, #52]	; (8009bc0 <__smakebuf_r+0x7c>)
 8009b8a:	62b3      	str	r3, [r6, #40]	; 0x28
 8009b8c:	89a3      	ldrh	r3, [r4, #12]
 8009b8e:	6020      	str	r0, [r4, #0]
 8009b90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b94:	81a3      	strh	r3, [r4, #12]
 8009b96:	9b00      	ldr	r3, [sp, #0]
 8009b98:	6163      	str	r3, [r4, #20]
 8009b9a:	9b01      	ldr	r3, [sp, #4]
 8009b9c:	6120      	str	r0, [r4, #16]
 8009b9e:	b15b      	cbz	r3, 8009bb8 <__smakebuf_r+0x74>
 8009ba0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ba4:	4630      	mov	r0, r6
 8009ba6:	f000 fc63 	bl	800a470 <_isatty_r>
 8009baa:	b128      	cbz	r0, 8009bb8 <__smakebuf_r+0x74>
 8009bac:	89a3      	ldrh	r3, [r4, #12]
 8009bae:	f023 0303 	bic.w	r3, r3, #3
 8009bb2:	f043 0301 	orr.w	r3, r3, #1
 8009bb6:	81a3      	strh	r3, [r4, #12]
 8009bb8:	89a0      	ldrh	r0, [r4, #12]
 8009bba:	4305      	orrs	r5, r0
 8009bbc:	81a5      	strh	r5, [r4, #12]
 8009bbe:	e7cd      	b.n	8009b5c <__smakebuf_r+0x18>
 8009bc0:	08009951 	.word	0x08009951

08009bc4 <_free_r>:
 8009bc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009bc6:	2900      	cmp	r1, #0
 8009bc8:	d044      	beq.n	8009c54 <_free_r+0x90>
 8009bca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009bce:	9001      	str	r0, [sp, #4]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	f1a1 0404 	sub.w	r4, r1, #4
 8009bd6:	bfb8      	it	lt
 8009bd8:	18e4      	addlt	r4, r4, r3
 8009bda:	f000 fc6b 	bl	800a4b4 <__malloc_lock>
 8009bde:	4a1e      	ldr	r2, [pc, #120]	; (8009c58 <_free_r+0x94>)
 8009be0:	9801      	ldr	r0, [sp, #4]
 8009be2:	6813      	ldr	r3, [r2, #0]
 8009be4:	b933      	cbnz	r3, 8009bf4 <_free_r+0x30>
 8009be6:	6063      	str	r3, [r4, #4]
 8009be8:	6014      	str	r4, [r2, #0]
 8009bea:	b003      	add	sp, #12
 8009bec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009bf0:	f000 bc66 	b.w	800a4c0 <__malloc_unlock>
 8009bf4:	42a3      	cmp	r3, r4
 8009bf6:	d908      	bls.n	8009c0a <_free_r+0x46>
 8009bf8:	6825      	ldr	r5, [r4, #0]
 8009bfa:	1961      	adds	r1, r4, r5
 8009bfc:	428b      	cmp	r3, r1
 8009bfe:	bf01      	itttt	eq
 8009c00:	6819      	ldreq	r1, [r3, #0]
 8009c02:	685b      	ldreq	r3, [r3, #4]
 8009c04:	1949      	addeq	r1, r1, r5
 8009c06:	6021      	streq	r1, [r4, #0]
 8009c08:	e7ed      	b.n	8009be6 <_free_r+0x22>
 8009c0a:	461a      	mov	r2, r3
 8009c0c:	685b      	ldr	r3, [r3, #4]
 8009c0e:	b10b      	cbz	r3, 8009c14 <_free_r+0x50>
 8009c10:	42a3      	cmp	r3, r4
 8009c12:	d9fa      	bls.n	8009c0a <_free_r+0x46>
 8009c14:	6811      	ldr	r1, [r2, #0]
 8009c16:	1855      	adds	r5, r2, r1
 8009c18:	42a5      	cmp	r5, r4
 8009c1a:	d10b      	bne.n	8009c34 <_free_r+0x70>
 8009c1c:	6824      	ldr	r4, [r4, #0]
 8009c1e:	4421      	add	r1, r4
 8009c20:	1854      	adds	r4, r2, r1
 8009c22:	42a3      	cmp	r3, r4
 8009c24:	6011      	str	r1, [r2, #0]
 8009c26:	d1e0      	bne.n	8009bea <_free_r+0x26>
 8009c28:	681c      	ldr	r4, [r3, #0]
 8009c2a:	685b      	ldr	r3, [r3, #4]
 8009c2c:	6053      	str	r3, [r2, #4]
 8009c2e:	4421      	add	r1, r4
 8009c30:	6011      	str	r1, [r2, #0]
 8009c32:	e7da      	b.n	8009bea <_free_r+0x26>
 8009c34:	d902      	bls.n	8009c3c <_free_r+0x78>
 8009c36:	230c      	movs	r3, #12
 8009c38:	6003      	str	r3, [r0, #0]
 8009c3a:	e7d6      	b.n	8009bea <_free_r+0x26>
 8009c3c:	6825      	ldr	r5, [r4, #0]
 8009c3e:	1961      	adds	r1, r4, r5
 8009c40:	428b      	cmp	r3, r1
 8009c42:	bf04      	itt	eq
 8009c44:	6819      	ldreq	r1, [r3, #0]
 8009c46:	685b      	ldreq	r3, [r3, #4]
 8009c48:	6063      	str	r3, [r4, #4]
 8009c4a:	bf04      	itt	eq
 8009c4c:	1949      	addeq	r1, r1, r5
 8009c4e:	6021      	streq	r1, [r4, #0]
 8009c50:	6054      	str	r4, [r2, #4]
 8009c52:	e7ca      	b.n	8009bea <_free_r+0x26>
 8009c54:	b003      	add	sp, #12
 8009c56:	bd30      	pop	{r4, r5, pc}
 8009c58:	20004e5c 	.word	0x20004e5c

08009c5c <sbrk_aligned>:
 8009c5c:	b570      	push	{r4, r5, r6, lr}
 8009c5e:	4e0e      	ldr	r6, [pc, #56]	; (8009c98 <sbrk_aligned+0x3c>)
 8009c60:	460c      	mov	r4, r1
 8009c62:	6831      	ldr	r1, [r6, #0]
 8009c64:	4605      	mov	r5, r0
 8009c66:	b911      	cbnz	r1, 8009c6e <sbrk_aligned+0x12>
 8009c68:	f000 fb7a 	bl	800a360 <_sbrk_r>
 8009c6c:	6030      	str	r0, [r6, #0]
 8009c6e:	4621      	mov	r1, r4
 8009c70:	4628      	mov	r0, r5
 8009c72:	f000 fb75 	bl	800a360 <_sbrk_r>
 8009c76:	1c43      	adds	r3, r0, #1
 8009c78:	d00a      	beq.n	8009c90 <sbrk_aligned+0x34>
 8009c7a:	1cc4      	adds	r4, r0, #3
 8009c7c:	f024 0403 	bic.w	r4, r4, #3
 8009c80:	42a0      	cmp	r0, r4
 8009c82:	d007      	beq.n	8009c94 <sbrk_aligned+0x38>
 8009c84:	1a21      	subs	r1, r4, r0
 8009c86:	4628      	mov	r0, r5
 8009c88:	f000 fb6a 	bl	800a360 <_sbrk_r>
 8009c8c:	3001      	adds	r0, #1
 8009c8e:	d101      	bne.n	8009c94 <sbrk_aligned+0x38>
 8009c90:	f04f 34ff 	mov.w	r4, #4294967295
 8009c94:	4620      	mov	r0, r4
 8009c96:	bd70      	pop	{r4, r5, r6, pc}
 8009c98:	20004e60 	.word	0x20004e60

08009c9c <_malloc_r>:
 8009c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ca0:	1ccd      	adds	r5, r1, #3
 8009ca2:	f025 0503 	bic.w	r5, r5, #3
 8009ca6:	3508      	adds	r5, #8
 8009ca8:	2d0c      	cmp	r5, #12
 8009caa:	bf38      	it	cc
 8009cac:	250c      	movcc	r5, #12
 8009cae:	2d00      	cmp	r5, #0
 8009cb0:	4607      	mov	r7, r0
 8009cb2:	db01      	blt.n	8009cb8 <_malloc_r+0x1c>
 8009cb4:	42a9      	cmp	r1, r5
 8009cb6:	d905      	bls.n	8009cc4 <_malloc_r+0x28>
 8009cb8:	230c      	movs	r3, #12
 8009cba:	603b      	str	r3, [r7, #0]
 8009cbc:	2600      	movs	r6, #0
 8009cbe:	4630      	mov	r0, r6
 8009cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cc4:	4e2e      	ldr	r6, [pc, #184]	; (8009d80 <_malloc_r+0xe4>)
 8009cc6:	f000 fbf5 	bl	800a4b4 <__malloc_lock>
 8009cca:	6833      	ldr	r3, [r6, #0]
 8009ccc:	461c      	mov	r4, r3
 8009cce:	bb34      	cbnz	r4, 8009d1e <_malloc_r+0x82>
 8009cd0:	4629      	mov	r1, r5
 8009cd2:	4638      	mov	r0, r7
 8009cd4:	f7ff ffc2 	bl	8009c5c <sbrk_aligned>
 8009cd8:	1c43      	adds	r3, r0, #1
 8009cda:	4604      	mov	r4, r0
 8009cdc:	d14d      	bne.n	8009d7a <_malloc_r+0xde>
 8009cde:	6834      	ldr	r4, [r6, #0]
 8009ce0:	4626      	mov	r6, r4
 8009ce2:	2e00      	cmp	r6, #0
 8009ce4:	d140      	bne.n	8009d68 <_malloc_r+0xcc>
 8009ce6:	6823      	ldr	r3, [r4, #0]
 8009ce8:	4631      	mov	r1, r6
 8009cea:	4638      	mov	r0, r7
 8009cec:	eb04 0803 	add.w	r8, r4, r3
 8009cf0:	f000 fb36 	bl	800a360 <_sbrk_r>
 8009cf4:	4580      	cmp	r8, r0
 8009cf6:	d13a      	bne.n	8009d6e <_malloc_r+0xd2>
 8009cf8:	6821      	ldr	r1, [r4, #0]
 8009cfa:	3503      	adds	r5, #3
 8009cfc:	1a6d      	subs	r5, r5, r1
 8009cfe:	f025 0503 	bic.w	r5, r5, #3
 8009d02:	3508      	adds	r5, #8
 8009d04:	2d0c      	cmp	r5, #12
 8009d06:	bf38      	it	cc
 8009d08:	250c      	movcc	r5, #12
 8009d0a:	4629      	mov	r1, r5
 8009d0c:	4638      	mov	r0, r7
 8009d0e:	f7ff ffa5 	bl	8009c5c <sbrk_aligned>
 8009d12:	3001      	adds	r0, #1
 8009d14:	d02b      	beq.n	8009d6e <_malloc_r+0xd2>
 8009d16:	6823      	ldr	r3, [r4, #0]
 8009d18:	442b      	add	r3, r5
 8009d1a:	6023      	str	r3, [r4, #0]
 8009d1c:	e00e      	b.n	8009d3c <_malloc_r+0xa0>
 8009d1e:	6822      	ldr	r2, [r4, #0]
 8009d20:	1b52      	subs	r2, r2, r5
 8009d22:	d41e      	bmi.n	8009d62 <_malloc_r+0xc6>
 8009d24:	2a0b      	cmp	r2, #11
 8009d26:	d916      	bls.n	8009d56 <_malloc_r+0xba>
 8009d28:	1961      	adds	r1, r4, r5
 8009d2a:	42a3      	cmp	r3, r4
 8009d2c:	6025      	str	r5, [r4, #0]
 8009d2e:	bf18      	it	ne
 8009d30:	6059      	strne	r1, [r3, #4]
 8009d32:	6863      	ldr	r3, [r4, #4]
 8009d34:	bf08      	it	eq
 8009d36:	6031      	streq	r1, [r6, #0]
 8009d38:	5162      	str	r2, [r4, r5]
 8009d3a:	604b      	str	r3, [r1, #4]
 8009d3c:	4638      	mov	r0, r7
 8009d3e:	f104 060b 	add.w	r6, r4, #11
 8009d42:	f000 fbbd 	bl	800a4c0 <__malloc_unlock>
 8009d46:	f026 0607 	bic.w	r6, r6, #7
 8009d4a:	1d23      	adds	r3, r4, #4
 8009d4c:	1af2      	subs	r2, r6, r3
 8009d4e:	d0b6      	beq.n	8009cbe <_malloc_r+0x22>
 8009d50:	1b9b      	subs	r3, r3, r6
 8009d52:	50a3      	str	r3, [r4, r2]
 8009d54:	e7b3      	b.n	8009cbe <_malloc_r+0x22>
 8009d56:	6862      	ldr	r2, [r4, #4]
 8009d58:	42a3      	cmp	r3, r4
 8009d5a:	bf0c      	ite	eq
 8009d5c:	6032      	streq	r2, [r6, #0]
 8009d5e:	605a      	strne	r2, [r3, #4]
 8009d60:	e7ec      	b.n	8009d3c <_malloc_r+0xa0>
 8009d62:	4623      	mov	r3, r4
 8009d64:	6864      	ldr	r4, [r4, #4]
 8009d66:	e7b2      	b.n	8009cce <_malloc_r+0x32>
 8009d68:	4634      	mov	r4, r6
 8009d6a:	6876      	ldr	r6, [r6, #4]
 8009d6c:	e7b9      	b.n	8009ce2 <_malloc_r+0x46>
 8009d6e:	230c      	movs	r3, #12
 8009d70:	603b      	str	r3, [r7, #0]
 8009d72:	4638      	mov	r0, r7
 8009d74:	f000 fba4 	bl	800a4c0 <__malloc_unlock>
 8009d78:	e7a1      	b.n	8009cbe <_malloc_r+0x22>
 8009d7a:	6025      	str	r5, [r4, #0]
 8009d7c:	e7de      	b.n	8009d3c <_malloc_r+0xa0>
 8009d7e:	bf00      	nop
 8009d80:	20004e5c 	.word	0x20004e5c

08009d84 <__sfputc_r>:
 8009d84:	6893      	ldr	r3, [r2, #8]
 8009d86:	3b01      	subs	r3, #1
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	b410      	push	{r4}
 8009d8c:	6093      	str	r3, [r2, #8]
 8009d8e:	da08      	bge.n	8009da2 <__sfputc_r+0x1e>
 8009d90:	6994      	ldr	r4, [r2, #24]
 8009d92:	42a3      	cmp	r3, r4
 8009d94:	db01      	blt.n	8009d9a <__sfputc_r+0x16>
 8009d96:	290a      	cmp	r1, #10
 8009d98:	d103      	bne.n	8009da2 <__sfputc_r+0x1e>
 8009d9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d9e:	f7ff bc31 	b.w	8009604 <__swbuf_r>
 8009da2:	6813      	ldr	r3, [r2, #0]
 8009da4:	1c58      	adds	r0, r3, #1
 8009da6:	6010      	str	r0, [r2, #0]
 8009da8:	7019      	strb	r1, [r3, #0]
 8009daa:	4608      	mov	r0, r1
 8009dac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009db0:	4770      	bx	lr

08009db2 <__sfputs_r>:
 8009db2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009db4:	4606      	mov	r6, r0
 8009db6:	460f      	mov	r7, r1
 8009db8:	4614      	mov	r4, r2
 8009dba:	18d5      	adds	r5, r2, r3
 8009dbc:	42ac      	cmp	r4, r5
 8009dbe:	d101      	bne.n	8009dc4 <__sfputs_r+0x12>
 8009dc0:	2000      	movs	r0, #0
 8009dc2:	e007      	b.n	8009dd4 <__sfputs_r+0x22>
 8009dc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dc8:	463a      	mov	r2, r7
 8009dca:	4630      	mov	r0, r6
 8009dcc:	f7ff ffda 	bl	8009d84 <__sfputc_r>
 8009dd0:	1c43      	adds	r3, r0, #1
 8009dd2:	d1f3      	bne.n	8009dbc <__sfputs_r+0xa>
 8009dd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009dd8 <_vfiprintf_r>:
 8009dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ddc:	460d      	mov	r5, r1
 8009dde:	b09d      	sub	sp, #116	; 0x74
 8009de0:	4614      	mov	r4, r2
 8009de2:	4698      	mov	r8, r3
 8009de4:	4606      	mov	r6, r0
 8009de6:	b118      	cbz	r0, 8009df0 <_vfiprintf_r+0x18>
 8009de8:	6983      	ldr	r3, [r0, #24]
 8009dea:	b90b      	cbnz	r3, 8009df0 <_vfiprintf_r+0x18>
 8009dec:	f7ff fde4 	bl	80099b8 <__sinit>
 8009df0:	4b89      	ldr	r3, [pc, #548]	; (800a018 <_vfiprintf_r+0x240>)
 8009df2:	429d      	cmp	r5, r3
 8009df4:	d11b      	bne.n	8009e2e <_vfiprintf_r+0x56>
 8009df6:	6875      	ldr	r5, [r6, #4]
 8009df8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009dfa:	07d9      	lsls	r1, r3, #31
 8009dfc:	d405      	bmi.n	8009e0a <_vfiprintf_r+0x32>
 8009dfe:	89ab      	ldrh	r3, [r5, #12]
 8009e00:	059a      	lsls	r2, r3, #22
 8009e02:	d402      	bmi.n	8009e0a <_vfiprintf_r+0x32>
 8009e04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e06:	f7ff fe75 	bl	8009af4 <__retarget_lock_acquire_recursive>
 8009e0a:	89ab      	ldrh	r3, [r5, #12]
 8009e0c:	071b      	lsls	r3, r3, #28
 8009e0e:	d501      	bpl.n	8009e14 <_vfiprintf_r+0x3c>
 8009e10:	692b      	ldr	r3, [r5, #16]
 8009e12:	b9eb      	cbnz	r3, 8009e50 <_vfiprintf_r+0x78>
 8009e14:	4629      	mov	r1, r5
 8009e16:	4630      	mov	r0, r6
 8009e18:	f7ff fc46 	bl	80096a8 <__swsetup_r>
 8009e1c:	b1c0      	cbz	r0, 8009e50 <_vfiprintf_r+0x78>
 8009e1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e20:	07dc      	lsls	r4, r3, #31
 8009e22:	d50e      	bpl.n	8009e42 <_vfiprintf_r+0x6a>
 8009e24:	f04f 30ff 	mov.w	r0, #4294967295
 8009e28:	b01d      	add	sp, #116	; 0x74
 8009e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e2e:	4b7b      	ldr	r3, [pc, #492]	; (800a01c <_vfiprintf_r+0x244>)
 8009e30:	429d      	cmp	r5, r3
 8009e32:	d101      	bne.n	8009e38 <_vfiprintf_r+0x60>
 8009e34:	68b5      	ldr	r5, [r6, #8]
 8009e36:	e7df      	b.n	8009df8 <_vfiprintf_r+0x20>
 8009e38:	4b79      	ldr	r3, [pc, #484]	; (800a020 <_vfiprintf_r+0x248>)
 8009e3a:	429d      	cmp	r5, r3
 8009e3c:	bf08      	it	eq
 8009e3e:	68f5      	ldreq	r5, [r6, #12]
 8009e40:	e7da      	b.n	8009df8 <_vfiprintf_r+0x20>
 8009e42:	89ab      	ldrh	r3, [r5, #12]
 8009e44:	0598      	lsls	r0, r3, #22
 8009e46:	d4ed      	bmi.n	8009e24 <_vfiprintf_r+0x4c>
 8009e48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e4a:	f7ff fe54 	bl	8009af6 <__retarget_lock_release_recursive>
 8009e4e:	e7e9      	b.n	8009e24 <_vfiprintf_r+0x4c>
 8009e50:	2300      	movs	r3, #0
 8009e52:	9309      	str	r3, [sp, #36]	; 0x24
 8009e54:	2320      	movs	r3, #32
 8009e56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009e5a:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e5e:	2330      	movs	r3, #48	; 0x30
 8009e60:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a024 <_vfiprintf_r+0x24c>
 8009e64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009e68:	f04f 0901 	mov.w	r9, #1
 8009e6c:	4623      	mov	r3, r4
 8009e6e:	469a      	mov	sl, r3
 8009e70:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e74:	b10a      	cbz	r2, 8009e7a <_vfiprintf_r+0xa2>
 8009e76:	2a25      	cmp	r2, #37	; 0x25
 8009e78:	d1f9      	bne.n	8009e6e <_vfiprintf_r+0x96>
 8009e7a:	ebba 0b04 	subs.w	fp, sl, r4
 8009e7e:	d00b      	beq.n	8009e98 <_vfiprintf_r+0xc0>
 8009e80:	465b      	mov	r3, fp
 8009e82:	4622      	mov	r2, r4
 8009e84:	4629      	mov	r1, r5
 8009e86:	4630      	mov	r0, r6
 8009e88:	f7ff ff93 	bl	8009db2 <__sfputs_r>
 8009e8c:	3001      	adds	r0, #1
 8009e8e:	f000 80aa 	beq.w	8009fe6 <_vfiprintf_r+0x20e>
 8009e92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e94:	445a      	add	r2, fp
 8009e96:	9209      	str	r2, [sp, #36]	; 0x24
 8009e98:	f89a 3000 	ldrb.w	r3, [sl]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	f000 80a2 	beq.w	8009fe6 <_vfiprintf_r+0x20e>
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8009ea8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009eac:	f10a 0a01 	add.w	sl, sl, #1
 8009eb0:	9304      	str	r3, [sp, #16]
 8009eb2:	9307      	str	r3, [sp, #28]
 8009eb4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009eb8:	931a      	str	r3, [sp, #104]	; 0x68
 8009eba:	4654      	mov	r4, sl
 8009ebc:	2205      	movs	r2, #5
 8009ebe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ec2:	4858      	ldr	r0, [pc, #352]	; (800a024 <_vfiprintf_r+0x24c>)
 8009ec4:	f7f6 f994 	bl	80001f0 <memchr>
 8009ec8:	9a04      	ldr	r2, [sp, #16]
 8009eca:	b9d8      	cbnz	r0, 8009f04 <_vfiprintf_r+0x12c>
 8009ecc:	06d1      	lsls	r1, r2, #27
 8009ece:	bf44      	itt	mi
 8009ed0:	2320      	movmi	r3, #32
 8009ed2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ed6:	0713      	lsls	r3, r2, #28
 8009ed8:	bf44      	itt	mi
 8009eda:	232b      	movmi	r3, #43	; 0x2b
 8009edc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ee0:	f89a 3000 	ldrb.w	r3, [sl]
 8009ee4:	2b2a      	cmp	r3, #42	; 0x2a
 8009ee6:	d015      	beq.n	8009f14 <_vfiprintf_r+0x13c>
 8009ee8:	9a07      	ldr	r2, [sp, #28]
 8009eea:	4654      	mov	r4, sl
 8009eec:	2000      	movs	r0, #0
 8009eee:	f04f 0c0a 	mov.w	ip, #10
 8009ef2:	4621      	mov	r1, r4
 8009ef4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ef8:	3b30      	subs	r3, #48	; 0x30
 8009efa:	2b09      	cmp	r3, #9
 8009efc:	d94e      	bls.n	8009f9c <_vfiprintf_r+0x1c4>
 8009efe:	b1b0      	cbz	r0, 8009f2e <_vfiprintf_r+0x156>
 8009f00:	9207      	str	r2, [sp, #28]
 8009f02:	e014      	b.n	8009f2e <_vfiprintf_r+0x156>
 8009f04:	eba0 0308 	sub.w	r3, r0, r8
 8009f08:	fa09 f303 	lsl.w	r3, r9, r3
 8009f0c:	4313      	orrs	r3, r2
 8009f0e:	9304      	str	r3, [sp, #16]
 8009f10:	46a2      	mov	sl, r4
 8009f12:	e7d2      	b.n	8009eba <_vfiprintf_r+0xe2>
 8009f14:	9b03      	ldr	r3, [sp, #12]
 8009f16:	1d19      	adds	r1, r3, #4
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	9103      	str	r1, [sp, #12]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	bfbb      	ittet	lt
 8009f20:	425b      	neglt	r3, r3
 8009f22:	f042 0202 	orrlt.w	r2, r2, #2
 8009f26:	9307      	strge	r3, [sp, #28]
 8009f28:	9307      	strlt	r3, [sp, #28]
 8009f2a:	bfb8      	it	lt
 8009f2c:	9204      	strlt	r2, [sp, #16]
 8009f2e:	7823      	ldrb	r3, [r4, #0]
 8009f30:	2b2e      	cmp	r3, #46	; 0x2e
 8009f32:	d10c      	bne.n	8009f4e <_vfiprintf_r+0x176>
 8009f34:	7863      	ldrb	r3, [r4, #1]
 8009f36:	2b2a      	cmp	r3, #42	; 0x2a
 8009f38:	d135      	bne.n	8009fa6 <_vfiprintf_r+0x1ce>
 8009f3a:	9b03      	ldr	r3, [sp, #12]
 8009f3c:	1d1a      	adds	r2, r3, #4
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	9203      	str	r2, [sp, #12]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	bfb8      	it	lt
 8009f46:	f04f 33ff 	movlt.w	r3, #4294967295
 8009f4a:	3402      	adds	r4, #2
 8009f4c:	9305      	str	r3, [sp, #20]
 8009f4e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a034 <_vfiprintf_r+0x25c>
 8009f52:	7821      	ldrb	r1, [r4, #0]
 8009f54:	2203      	movs	r2, #3
 8009f56:	4650      	mov	r0, sl
 8009f58:	f7f6 f94a 	bl	80001f0 <memchr>
 8009f5c:	b140      	cbz	r0, 8009f70 <_vfiprintf_r+0x198>
 8009f5e:	2340      	movs	r3, #64	; 0x40
 8009f60:	eba0 000a 	sub.w	r0, r0, sl
 8009f64:	fa03 f000 	lsl.w	r0, r3, r0
 8009f68:	9b04      	ldr	r3, [sp, #16]
 8009f6a:	4303      	orrs	r3, r0
 8009f6c:	3401      	adds	r4, #1
 8009f6e:	9304      	str	r3, [sp, #16]
 8009f70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f74:	482c      	ldr	r0, [pc, #176]	; (800a028 <_vfiprintf_r+0x250>)
 8009f76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009f7a:	2206      	movs	r2, #6
 8009f7c:	f7f6 f938 	bl	80001f0 <memchr>
 8009f80:	2800      	cmp	r0, #0
 8009f82:	d03f      	beq.n	800a004 <_vfiprintf_r+0x22c>
 8009f84:	4b29      	ldr	r3, [pc, #164]	; (800a02c <_vfiprintf_r+0x254>)
 8009f86:	bb1b      	cbnz	r3, 8009fd0 <_vfiprintf_r+0x1f8>
 8009f88:	9b03      	ldr	r3, [sp, #12]
 8009f8a:	3307      	adds	r3, #7
 8009f8c:	f023 0307 	bic.w	r3, r3, #7
 8009f90:	3308      	adds	r3, #8
 8009f92:	9303      	str	r3, [sp, #12]
 8009f94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f96:	443b      	add	r3, r7
 8009f98:	9309      	str	r3, [sp, #36]	; 0x24
 8009f9a:	e767      	b.n	8009e6c <_vfiprintf_r+0x94>
 8009f9c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009fa0:	460c      	mov	r4, r1
 8009fa2:	2001      	movs	r0, #1
 8009fa4:	e7a5      	b.n	8009ef2 <_vfiprintf_r+0x11a>
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	3401      	adds	r4, #1
 8009faa:	9305      	str	r3, [sp, #20]
 8009fac:	4619      	mov	r1, r3
 8009fae:	f04f 0c0a 	mov.w	ip, #10
 8009fb2:	4620      	mov	r0, r4
 8009fb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009fb8:	3a30      	subs	r2, #48	; 0x30
 8009fba:	2a09      	cmp	r2, #9
 8009fbc:	d903      	bls.n	8009fc6 <_vfiprintf_r+0x1ee>
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d0c5      	beq.n	8009f4e <_vfiprintf_r+0x176>
 8009fc2:	9105      	str	r1, [sp, #20]
 8009fc4:	e7c3      	b.n	8009f4e <_vfiprintf_r+0x176>
 8009fc6:	fb0c 2101 	mla	r1, ip, r1, r2
 8009fca:	4604      	mov	r4, r0
 8009fcc:	2301      	movs	r3, #1
 8009fce:	e7f0      	b.n	8009fb2 <_vfiprintf_r+0x1da>
 8009fd0:	ab03      	add	r3, sp, #12
 8009fd2:	9300      	str	r3, [sp, #0]
 8009fd4:	462a      	mov	r2, r5
 8009fd6:	4b16      	ldr	r3, [pc, #88]	; (800a030 <_vfiprintf_r+0x258>)
 8009fd8:	a904      	add	r1, sp, #16
 8009fda:	4630      	mov	r0, r6
 8009fdc:	f3af 8000 	nop.w
 8009fe0:	4607      	mov	r7, r0
 8009fe2:	1c78      	adds	r0, r7, #1
 8009fe4:	d1d6      	bne.n	8009f94 <_vfiprintf_r+0x1bc>
 8009fe6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009fe8:	07d9      	lsls	r1, r3, #31
 8009fea:	d405      	bmi.n	8009ff8 <_vfiprintf_r+0x220>
 8009fec:	89ab      	ldrh	r3, [r5, #12]
 8009fee:	059a      	lsls	r2, r3, #22
 8009ff0:	d402      	bmi.n	8009ff8 <_vfiprintf_r+0x220>
 8009ff2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ff4:	f7ff fd7f 	bl	8009af6 <__retarget_lock_release_recursive>
 8009ff8:	89ab      	ldrh	r3, [r5, #12]
 8009ffa:	065b      	lsls	r3, r3, #25
 8009ffc:	f53f af12 	bmi.w	8009e24 <_vfiprintf_r+0x4c>
 800a000:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a002:	e711      	b.n	8009e28 <_vfiprintf_r+0x50>
 800a004:	ab03      	add	r3, sp, #12
 800a006:	9300      	str	r3, [sp, #0]
 800a008:	462a      	mov	r2, r5
 800a00a:	4b09      	ldr	r3, [pc, #36]	; (800a030 <_vfiprintf_r+0x258>)
 800a00c:	a904      	add	r1, sp, #16
 800a00e:	4630      	mov	r0, r6
 800a010:	f000 f880 	bl	800a114 <_printf_i>
 800a014:	e7e4      	b.n	8009fe0 <_vfiprintf_r+0x208>
 800a016:	bf00      	nop
 800a018:	0800b598 	.word	0x0800b598
 800a01c:	0800b5b8 	.word	0x0800b5b8
 800a020:	0800b578 	.word	0x0800b578
 800a024:	0800b5d8 	.word	0x0800b5d8
 800a028:	0800b5e2 	.word	0x0800b5e2
 800a02c:	00000000 	.word	0x00000000
 800a030:	08009db3 	.word	0x08009db3
 800a034:	0800b5de 	.word	0x0800b5de

0800a038 <_printf_common>:
 800a038:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a03c:	4616      	mov	r6, r2
 800a03e:	4699      	mov	r9, r3
 800a040:	688a      	ldr	r2, [r1, #8]
 800a042:	690b      	ldr	r3, [r1, #16]
 800a044:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a048:	4293      	cmp	r3, r2
 800a04a:	bfb8      	it	lt
 800a04c:	4613      	movlt	r3, r2
 800a04e:	6033      	str	r3, [r6, #0]
 800a050:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a054:	4607      	mov	r7, r0
 800a056:	460c      	mov	r4, r1
 800a058:	b10a      	cbz	r2, 800a05e <_printf_common+0x26>
 800a05a:	3301      	adds	r3, #1
 800a05c:	6033      	str	r3, [r6, #0]
 800a05e:	6823      	ldr	r3, [r4, #0]
 800a060:	0699      	lsls	r1, r3, #26
 800a062:	bf42      	ittt	mi
 800a064:	6833      	ldrmi	r3, [r6, #0]
 800a066:	3302      	addmi	r3, #2
 800a068:	6033      	strmi	r3, [r6, #0]
 800a06a:	6825      	ldr	r5, [r4, #0]
 800a06c:	f015 0506 	ands.w	r5, r5, #6
 800a070:	d106      	bne.n	800a080 <_printf_common+0x48>
 800a072:	f104 0a19 	add.w	sl, r4, #25
 800a076:	68e3      	ldr	r3, [r4, #12]
 800a078:	6832      	ldr	r2, [r6, #0]
 800a07a:	1a9b      	subs	r3, r3, r2
 800a07c:	42ab      	cmp	r3, r5
 800a07e:	dc26      	bgt.n	800a0ce <_printf_common+0x96>
 800a080:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a084:	1e13      	subs	r3, r2, #0
 800a086:	6822      	ldr	r2, [r4, #0]
 800a088:	bf18      	it	ne
 800a08a:	2301      	movne	r3, #1
 800a08c:	0692      	lsls	r2, r2, #26
 800a08e:	d42b      	bmi.n	800a0e8 <_printf_common+0xb0>
 800a090:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a094:	4649      	mov	r1, r9
 800a096:	4638      	mov	r0, r7
 800a098:	47c0      	blx	r8
 800a09a:	3001      	adds	r0, #1
 800a09c:	d01e      	beq.n	800a0dc <_printf_common+0xa4>
 800a09e:	6823      	ldr	r3, [r4, #0]
 800a0a0:	68e5      	ldr	r5, [r4, #12]
 800a0a2:	6832      	ldr	r2, [r6, #0]
 800a0a4:	f003 0306 	and.w	r3, r3, #6
 800a0a8:	2b04      	cmp	r3, #4
 800a0aa:	bf08      	it	eq
 800a0ac:	1aad      	subeq	r5, r5, r2
 800a0ae:	68a3      	ldr	r3, [r4, #8]
 800a0b0:	6922      	ldr	r2, [r4, #16]
 800a0b2:	bf0c      	ite	eq
 800a0b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a0b8:	2500      	movne	r5, #0
 800a0ba:	4293      	cmp	r3, r2
 800a0bc:	bfc4      	itt	gt
 800a0be:	1a9b      	subgt	r3, r3, r2
 800a0c0:	18ed      	addgt	r5, r5, r3
 800a0c2:	2600      	movs	r6, #0
 800a0c4:	341a      	adds	r4, #26
 800a0c6:	42b5      	cmp	r5, r6
 800a0c8:	d11a      	bne.n	800a100 <_printf_common+0xc8>
 800a0ca:	2000      	movs	r0, #0
 800a0cc:	e008      	b.n	800a0e0 <_printf_common+0xa8>
 800a0ce:	2301      	movs	r3, #1
 800a0d0:	4652      	mov	r2, sl
 800a0d2:	4649      	mov	r1, r9
 800a0d4:	4638      	mov	r0, r7
 800a0d6:	47c0      	blx	r8
 800a0d8:	3001      	adds	r0, #1
 800a0da:	d103      	bne.n	800a0e4 <_printf_common+0xac>
 800a0dc:	f04f 30ff 	mov.w	r0, #4294967295
 800a0e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0e4:	3501      	adds	r5, #1
 800a0e6:	e7c6      	b.n	800a076 <_printf_common+0x3e>
 800a0e8:	18e1      	adds	r1, r4, r3
 800a0ea:	1c5a      	adds	r2, r3, #1
 800a0ec:	2030      	movs	r0, #48	; 0x30
 800a0ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a0f2:	4422      	add	r2, r4
 800a0f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a0f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a0fc:	3302      	adds	r3, #2
 800a0fe:	e7c7      	b.n	800a090 <_printf_common+0x58>
 800a100:	2301      	movs	r3, #1
 800a102:	4622      	mov	r2, r4
 800a104:	4649      	mov	r1, r9
 800a106:	4638      	mov	r0, r7
 800a108:	47c0      	blx	r8
 800a10a:	3001      	adds	r0, #1
 800a10c:	d0e6      	beq.n	800a0dc <_printf_common+0xa4>
 800a10e:	3601      	adds	r6, #1
 800a110:	e7d9      	b.n	800a0c6 <_printf_common+0x8e>
	...

0800a114 <_printf_i>:
 800a114:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a118:	7e0f      	ldrb	r7, [r1, #24]
 800a11a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a11c:	2f78      	cmp	r7, #120	; 0x78
 800a11e:	4691      	mov	r9, r2
 800a120:	4680      	mov	r8, r0
 800a122:	460c      	mov	r4, r1
 800a124:	469a      	mov	sl, r3
 800a126:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a12a:	d807      	bhi.n	800a13c <_printf_i+0x28>
 800a12c:	2f62      	cmp	r7, #98	; 0x62
 800a12e:	d80a      	bhi.n	800a146 <_printf_i+0x32>
 800a130:	2f00      	cmp	r7, #0
 800a132:	f000 80d8 	beq.w	800a2e6 <_printf_i+0x1d2>
 800a136:	2f58      	cmp	r7, #88	; 0x58
 800a138:	f000 80a3 	beq.w	800a282 <_printf_i+0x16e>
 800a13c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a140:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a144:	e03a      	b.n	800a1bc <_printf_i+0xa8>
 800a146:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a14a:	2b15      	cmp	r3, #21
 800a14c:	d8f6      	bhi.n	800a13c <_printf_i+0x28>
 800a14e:	a101      	add	r1, pc, #4	; (adr r1, 800a154 <_printf_i+0x40>)
 800a150:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a154:	0800a1ad 	.word	0x0800a1ad
 800a158:	0800a1c1 	.word	0x0800a1c1
 800a15c:	0800a13d 	.word	0x0800a13d
 800a160:	0800a13d 	.word	0x0800a13d
 800a164:	0800a13d 	.word	0x0800a13d
 800a168:	0800a13d 	.word	0x0800a13d
 800a16c:	0800a1c1 	.word	0x0800a1c1
 800a170:	0800a13d 	.word	0x0800a13d
 800a174:	0800a13d 	.word	0x0800a13d
 800a178:	0800a13d 	.word	0x0800a13d
 800a17c:	0800a13d 	.word	0x0800a13d
 800a180:	0800a2cd 	.word	0x0800a2cd
 800a184:	0800a1f1 	.word	0x0800a1f1
 800a188:	0800a2af 	.word	0x0800a2af
 800a18c:	0800a13d 	.word	0x0800a13d
 800a190:	0800a13d 	.word	0x0800a13d
 800a194:	0800a2ef 	.word	0x0800a2ef
 800a198:	0800a13d 	.word	0x0800a13d
 800a19c:	0800a1f1 	.word	0x0800a1f1
 800a1a0:	0800a13d 	.word	0x0800a13d
 800a1a4:	0800a13d 	.word	0x0800a13d
 800a1a8:	0800a2b7 	.word	0x0800a2b7
 800a1ac:	682b      	ldr	r3, [r5, #0]
 800a1ae:	1d1a      	adds	r2, r3, #4
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	602a      	str	r2, [r5, #0]
 800a1b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a1b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a1bc:	2301      	movs	r3, #1
 800a1be:	e0a3      	b.n	800a308 <_printf_i+0x1f4>
 800a1c0:	6820      	ldr	r0, [r4, #0]
 800a1c2:	6829      	ldr	r1, [r5, #0]
 800a1c4:	0606      	lsls	r6, r0, #24
 800a1c6:	f101 0304 	add.w	r3, r1, #4
 800a1ca:	d50a      	bpl.n	800a1e2 <_printf_i+0xce>
 800a1cc:	680e      	ldr	r6, [r1, #0]
 800a1ce:	602b      	str	r3, [r5, #0]
 800a1d0:	2e00      	cmp	r6, #0
 800a1d2:	da03      	bge.n	800a1dc <_printf_i+0xc8>
 800a1d4:	232d      	movs	r3, #45	; 0x2d
 800a1d6:	4276      	negs	r6, r6
 800a1d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a1dc:	485e      	ldr	r0, [pc, #376]	; (800a358 <_printf_i+0x244>)
 800a1de:	230a      	movs	r3, #10
 800a1e0:	e019      	b.n	800a216 <_printf_i+0x102>
 800a1e2:	680e      	ldr	r6, [r1, #0]
 800a1e4:	602b      	str	r3, [r5, #0]
 800a1e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a1ea:	bf18      	it	ne
 800a1ec:	b236      	sxthne	r6, r6
 800a1ee:	e7ef      	b.n	800a1d0 <_printf_i+0xbc>
 800a1f0:	682b      	ldr	r3, [r5, #0]
 800a1f2:	6820      	ldr	r0, [r4, #0]
 800a1f4:	1d19      	adds	r1, r3, #4
 800a1f6:	6029      	str	r1, [r5, #0]
 800a1f8:	0601      	lsls	r1, r0, #24
 800a1fa:	d501      	bpl.n	800a200 <_printf_i+0xec>
 800a1fc:	681e      	ldr	r6, [r3, #0]
 800a1fe:	e002      	b.n	800a206 <_printf_i+0xf2>
 800a200:	0646      	lsls	r6, r0, #25
 800a202:	d5fb      	bpl.n	800a1fc <_printf_i+0xe8>
 800a204:	881e      	ldrh	r6, [r3, #0]
 800a206:	4854      	ldr	r0, [pc, #336]	; (800a358 <_printf_i+0x244>)
 800a208:	2f6f      	cmp	r7, #111	; 0x6f
 800a20a:	bf0c      	ite	eq
 800a20c:	2308      	moveq	r3, #8
 800a20e:	230a      	movne	r3, #10
 800a210:	2100      	movs	r1, #0
 800a212:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a216:	6865      	ldr	r5, [r4, #4]
 800a218:	60a5      	str	r5, [r4, #8]
 800a21a:	2d00      	cmp	r5, #0
 800a21c:	bfa2      	ittt	ge
 800a21e:	6821      	ldrge	r1, [r4, #0]
 800a220:	f021 0104 	bicge.w	r1, r1, #4
 800a224:	6021      	strge	r1, [r4, #0]
 800a226:	b90e      	cbnz	r6, 800a22c <_printf_i+0x118>
 800a228:	2d00      	cmp	r5, #0
 800a22a:	d04d      	beq.n	800a2c8 <_printf_i+0x1b4>
 800a22c:	4615      	mov	r5, r2
 800a22e:	fbb6 f1f3 	udiv	r1, r6, r3
 800a232:	fb03 6711 	mls	r7, r3, r1, r6
 800a236:	5dc7      	ldrb	r7, [r0, r7]
 800a238:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a23c:	4637      	mov	r7, r6
 800a23e:	42bb      	cmp	r3, r7
 800a240:	460e      	mov	r6, r1
 800a242:	d9f4      	bls.n	800a22e <_printf_i+0x11a>
 800a244:	2b08      	cmp	r3, #8
 800a246:	d10b      	bne.n	800a260 <_printf_i+0x14c>
 800a248:	6823      	ldr	r3, [r4, #0]
 800a24a:	07de      	lsls	r6, r3, #31
 800a24c:	d508      	bpl.n	800a260 <_printf_i+0x14c>
 800a24e:	6923      	ldr	r3, [r4, #16]
 800a250:	6861      	ldr	r1, [r4, #4]
 800a252:	4299      	cmp	r1, r3
 800a254:	bfde      	ittt	le
 800a256:	2330      	movle	r3, #48	; 0x30
 800a258:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a25c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a260:	1b52      	subs	r2, r2, r5
 800a262:	6122      	str	r2, [r4, #16]
 800a264:	f8cd a000 	str.w	sl, [sp]
 800a268:	464b      	mov	r3, r9
 800a26a:	aa03      	add	r2, sp, #12
 800a26c:	4621      	mov	r1, r4
 800a26e:	4640      	mov	r0, r8
 800a270:	f7ff fee2 	bl	800a038 <_printf_common>
 800a274:	3001      	adds	r0, #1
 800a276:	d14c      	bne.n	800a312 <_printf_i+0x1fe>
 800a278:	f04f 30ff 	mov.w	r0, #4294967295
 800a27c:	b004      	add	sp, #16
 800a27e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a282:	4835      	ldr	r0, [pc, #212]	; (800a358 <_printf_i+0x244>)
 800a284:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a288:	6829      	ldr	r1, [r5, #0]
 800a28a:	6823      	ldr	r3, [r4, #0]
 800a28c:	f851 6b04 	ldr.w	r6, [r1], #4
 800a290:	6029      	str	r1, [r5, #0]
 800a292:	061d      	lsls	r5, r3, #24
 800a294:	d514      	bpl.n	800a2c0 <_printf_i+0x1ac>
 800a296:	07df      	lsls	r7, r3, #31
 800a298:	bf44      	itt	mi
 800a29a:	f043 0320 	orrmi.w	r3, r3, #32
 800a29e:	6023      	strmi	r3, [r4, #0]
 800a2a0:	b91e      	cbnz	r6, 800a2aa <_printf_i+0x196>
 800a2a2:	6823      	ldr	r3, [r4, #0]
 800a2a4:	f023 0320 	bic.w	r3, r3, #32
 800a2a8:	6023      	str	r3, [r4, #0]
 800a2aa:	2310      	movs	r3, #16
 800a2ac:	e7b0      	b.n	800a210 <_printf_i+0xfc>
 800a2ae:	6823      	ldr	r3, [r4, #0]
 800a2b0:	f043 0320 	orr.w	r3, r3, #32
 800a2b4:	6023      	str	r3, [r4, #0]
 800a2b6:	2378      	movs	r3, #120	; 0x78
 800a2b8:	4828      	ldr	r0, [pc, #160]	; (800a35c <_printf_i+0x248>)
 800a2ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a2be:	e7e3      	b.n	800a288 <_printf_i+0x174>
 800a2c0:	0659      	lsls	r1, r3, #25
 800a2c2:	bf48      	it	mi
 800a2c4:	b2b6      	uxthmi	r6, r6
 800a2c6:	e7e6      	b.n	800a296 <_printf_i+0x182>
 800a2c8:	4615      	mov	r5, r2
 800a2ca:	e7bb      	b.n	800a244 <_printf_i+0x130>
 800a2cc:	682b      	ldr	r3, [r5, #0]
 800a2ce:	6826      	ldr	r6, [r4, #0]
 800a2d0:	6961      	ldr	r1, [r4, #20]
 800a2d2:	1d18      	adds	r0, r3, #4
 800a2d4:	6028      	str	r0, [r5, #0]
 800a2d6:	0635      	lsls	r5, r6, #24
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	d501      	bpl.n	800a2e0 <_printf_i+0x1cc>
 800a2dc:	6019      	str	r1, [r3, #0]
 800a2de:	e002      	b.n	800a2e6 <_printf_i+0x1d2>
 800a2e0:	0670      	lsls	r0, r6, #25
 800a2e2:	d5fb      	bpl.n	800a2dc <_printf_i+0x1c8>
 800a2e4:	8019      	strh	r1, [r3, #0]
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	6123      	str	r3, [r4, #16]
 800a2ea:	4615      	mov	r5, r2
 800a2ec:	e7ba      	b.n	800a264 <_printf_i+0x150>
 800a2ee:	682b      	ldr	r3, [r5, #0]
 800a2f0:	1d1a      	adds	r2, r3, #4
 800a2f2:	602a      	str	r2, [r5, #0]
 800a2f4:	681d      	ldr	r5, [r3, #0]
 800a2f6:	6862      	ldr	r2, [r4, #4]
 800a2f8:	2100      	movs	r1, #0
 800a2fa:	4628      	mov	r0, r5
 800a2fc:	f7f5 ff78 	bl	80001f0 <memchr>
 800a300:	b108      	cbz	r0, 800a306 <_printf_i+0x1f2>
 800a302:	1b40      	subs	r0, r0, r5
 800a304:	6060      	str	r0, [r4, #4]
 800a306:	6863      	ldr	r3, [r4, #4]
 800a308:	6123      	str	r3, [r4, #16]
 800a30a:	2300      	movs	r3, #0
 800a30c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a310:	e7a8      	b.n	800a264 <_printf_i+0x150>
 800a312:	6923      	ldr	r3, [r4, #16]
 800a314:	462a      	mov	r2, r5
 800a316:	4649      	mov	r1, r9
 800a318:	4640      	mov	r0, r8
 800a31a:	47d0      	blx	sl
 800a31c:	3001      	adds	r0, #1
 800a31e:	d0ab      	beq.n	800a278 <_printf_i+0x164>
 800a320:	6823      	ldr	r3, [r4, #0]
 800a322:	079b      	lsls	r3, r3, #30
 800a324:	d413      	bmi.n	800a34e <_printf_i+0x23a>
 800a326:	68e0      	ldr	r0, [r4, #12]
 800a328:	9b03      	ldr	r3, [sp, #12]
 800a32a:	4298      	cmp	r0, r3
 800a32c:	bfb8      	it	lt
 800a32e:	4618      	movlt	r0, r3
 800a330:	e7a4      	b.n	800a27c <_printf_i+0x168>
 800a332:	2301      	movs	r3, #1
 800a334:	4632      	mov	r2, r6
 800a336:	4649      	mov	r1, r9
 800a338:	4640      	mov	r0, r8
 800a33a:	47d0      	blx	sl
 800a33c:	3001      	adds	r0, #1
 800a33e:	d09b      	beq.n	800a278 <_printf_i+0x164>
 800a340:	3501      	adds	r5, #1
 800a342:	68e3      	ldr	r3, [r4, #12]
 800a344:	9903      	ldr	r1, [sp, #12]
 800a346:	1a5b      	subs	r3, r3, r1
 800a348:	42ab      	cmp	r3, r5
 800a34a:	dcf2      	bgt.n	800a332 <_printf_i+0x21e>
 800a34c:	e7eb      	b.n	800a326 <_printf_i+0x212>
 800a34e:	2500      	movs	r5, #0
 800a350:	f104 0619 	add.w	r6, r4, #25
 800a354:	e7f5      	b.n	800a342 <_printf_i+0x22e>
 800a356:	bf00      	nop
 800a358:	0800b5e9 	.word	0x0800b5e9
 800a35c:	0800b5fa 	.word	0x0800b5fa

0800a360 <_sbrk_r>:
 800a360:	b538      	push	{r3, r4, r5, lr}
 800a362:	4d06      	ldr	r5, [pc, #24]	; (800a37c <_sbrk_r+0x1c>)
 800a364:	2300      	movs	r3, #0
 800a366:	4604      	mov	r4, r0
 800a368:	4608      	mov	r0, r1
 800a36a:	602b      	str	r3, [r5, #0]
 800a36c:	f7fa fd62 	bl	8004e34 <_sbrk>
 800a370:	1c43      	adds	r3, r0, #1
 800a372:	d102      	bne.n	800a37a <_sbrk_r+0x1a>
 800a374:	682b      	ldr	r3, [r5, #0]
 800a376:	b103      	cbz	r3, 800a37a <_sbrk_r+0x1a>
 800a378:	6023      	str	r3, [r4, #0]
 800a37a:	bd38      	pop	{r3, r4, r5, pc}
 800a37c:	20004e64 	.word	0x20004e64

0800a380 <__sread>:
 800a380:	b510      	push	{r4, lr}
 800a382:	460c      	mov	r4, r1
 800a384:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a388:	f000 f8a0 	bl	800a4cc <_read_r>
 800a38c:	2800      	cmp	r0, #0
 800a38e:	bfab      	itete	ge
 800a390:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a392:	89a3      	ldrhlt	r3, [r4, #12]
 800a394:	181b      	addge	r3, r3, r0
 800a396:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a39a:	bfac      	ite	ge
 800a39c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a39e:	81a3      	strhlt	r3, [r4, #12]
 800a3a0:	bd10      	pop	{r4, pc}

0800a3a2 <__swrite>:
 800a3a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3a6:	461f      	mov	r7, r3
 800a3a8:	898b      	ldrh	r3, [r1, #12]
 800a3aa:	05db      	lsls	r3, r3, #23
 800a3ac:	4605      	mov	r5, r0
 800a3ae:	460c      	mov	r4, r1
 800a3b0:	4616      	mov	r6, r2
 800a3b2:	d505      	bpl.n	800a3c0 <__swrite+0x1e>
 800a3b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3b8:	2302      	movs	r3, #2
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	f000 f868 	bl	800a490 <_lseek_r>
 800a3c0:	89a3      	ldrh	r3, [r4, #12]
 800a3c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a3c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a3ca:	81a3      	strh	r3, [r4, #12]
 800a3cc:	4632      	mov	r2, r6
 800a3ce:	463b      	mov	r3, r7
 800a3d0:	4628      	mov	r0, r5
 800a3d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a3d6:	f000 b817 	b.w	800a408 <_write_r>

0800a3da <__sseek>:
 800a3da:	b510      	push	{r4, lr}
 800a3dc:	460c      	mov	r4, r1
 800a3de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3e2:	f000 f855 	bl	800a490 <_lseek_r>
 800a3e6:	1c43      	adds	r3, r0, #1
 800a3e8:	89a3      	ldrh	r3, [r4, #12]
 800a3ea:	bf15      	itete	ne
 800a3ec:	6560      	strne	r0, [r4, #84]	; 0x54
 800a3ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a3f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a3f6:	81a3      	strheq	r3, [r4, #12]
 800a3f8:	bf18      	it	ne
 800a3fa:	81a3      	strhne	r3, [r4, #12]
 800a3fc:	bd10      	pop	{r4, pc}

0800a3fe <__sclose>:
 800a3fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a402:	f000 b813 	b.w	800a42c <_close_r>
	...

0800a408 <_write_r>:
 800a408:	b538      	push	{r3, r4, r5, lr}
 800a40a:	4d07      	ldr	r5, [pc, #28]	; (800a428 <_write_r+0x20>)
 800a40c:	4604      	mov	r4, r0
 800a40e:	4608      	mov	r0, r1
 800a410:	4611      	mov	r1, r2
 800a412:	2200      	movs	r2, #0
 800a414:	602a      	str	r2, [r5, #0]
 800a416:	461a      	mov	r2, r3
 800a418:	f7fa fcbb 	bl	8004d92 <_write>
 800a41c:	1c43      	adds	r3, r0, #1
 800a41e:	d102      	bne.n	800a426 <_write_r+0x1e>
 800a420:	682b      	ldr	r3, [r5, #0]
 800a422:	b103      	cbz	r3, 800a426 <_write_r+0x1e>
 800a424:	6023      	str	r3, [r4, #0]
 800a426:	bd38      	pop	{r3, r4, r5, pc}
 800a428:	20004e64 	.word	0x20004e64

0800a42c <_close_r>:
 800a42c:	b538      	push	{r3, r4, r5, lr}
 800a42e:	4d06      	ldr	r5, [pc, #24]	; (800a448 <_close_r+0x1c>)
 800a430:	2300      	movs	r3, #0
 800a432:	4604      	mov	r4, r0
 800a434:	4608      	mov	r0, r1
 800a436:	602b      	str	r3, [r5, #0]
 800a438:	f7fa fcc7 	bl	8004dca <_close>
 800a43c:	1c43      	adds	r3, r0, #1
 800a43e:	d102      	bne.n	800a446 <_close_r+0x1a>
 800a440:	682b      	ldr	r3, [r5, #0]
 800a442:	b103      	cbz	r3, 800a446 <_close_r+0x1a>
 800a444:	6023      	str	r3, [r4, #0]
 800a446:	bd38      	pop	{r3, r4, r5, pc}
 800a448:	20004e64 	.word	0x20004e64

0800a44c <_fstat_r>:
 800a44c:	b538      	push	{r3, r4, r5, lr}
 800a44e:	4d07      	ldr	r5, [pc, #28]	; (800a46c <_fstat_r+0x20>)
 800a450:	2300      	movs	r3, #0
 800a452:	4604      	mov	r4, r0
 800a454:	4608      	mov	r0, r1
 800a456:	4611      	mov	r1, r2
 800a458:	602b      	str	r3, [r5, #0]
 800a45a:	f7fa fcc2 	bl	8004de2 <_fstat>
 800a45e:	1c43      	adds	r3, r0, #1
 800a460:	d102      	bne.n	800a468 <_fstat_r+0x1c>
 800a462:	682b      	ldr	r3, [r5, #0]
 800a464:	b103      	cbz	r3, 800a468 <_fstat_r+0x1c>
 800a466:	6023      	str	r3, [r4, #0]
 800a468:	bd38      	pop	{r3, r4, r5, pc}
 800a46a:	bf00      	nop
 800a46c:	20004e64 	.word	0x20004e64

0800a470 <_isatty_r>:
 800a470:	b538      	push	{r3, r4, r5, lr}
 800a472:	4d06      	ldr	r5, [pc, #24]	; (800a48c <_isatty_r+0x1c>)
 800a474:	2300      	movs	r3, #0
 800a476:	4604      	mov	r4, r0
 800a478:	4608      	mov	r0, r1
 800a47a:	602b      	str	r3, [r5, #0]
 800a47c:	f7fa fcc1 	bl	8004e02 <_isatty>
 800a480:	1c43      	adds	r3, r0, #1
 800a482:	d102      	bne.n	800a48a <_isatty_r+0x1a>
 800a484:	682b      	ldr	r3, [r5, #0]
 800a486:	b103      	cbz	r3, 800a48a <_isatty_r+0x1a>
 800a488:	6023      	str	r3, [r4, #0]
 800a48a:	bd38      	pop	{r3, r4, r5, pc}
 800a48c:	20004e64 	.word	0x20004e64

0800a490 <_lseek_r>:
 800a490:	b538      	push	{r3, r4, r5, lr}
 800a492:	4d07      	ldr	r5, [pc, #28]	; (800a4b0 <_lseek_r+0x20>)
 800a494:	4604      	mov	r4, r0
 800a496:	4608      	mov	r0, r1
 800a498:	4611      	mov	r1, r2
 800a49a:	2200      	movs	r2, #0
 800a49c:	602a      	str	r2, [r5, #0]
 800a49e:	461a      	mov	r2, r3
 800a4a0:	f7fa fcba 	bl	8004e18 <_lseek>
 800a4a4:	1c43      	adds	r3, r0, #1
 800a4a6:	d102      	bne.n	800a4ae <_lseek_r+0x1e>
 800a4a8:	682b      	ldr	r3, [r5, #0]
 800a4aa:	b103      	cbz	r3, 800a4ae <_lseek_r+0x1e>
 800a4ac:	6023      	str	r3, [r4, #0]
 800a4ae:	bd38      	pop	{r3, r4, r5, pc}
 800a4b0:	20004e64 	.word	0x20004e64

0800a4b4 <__malloc_lock>:
 800a4b4:	4801      	ldr	r0, [pc, #4]	; (800a4bc <__malloc_lock+0x8>)
 800a4b6:	f7ff bb1d 	b.w	8009af4 <__retarget_lock_acquire_recursive>
 800a4ba:	bf00      	nop
 800a4bc:	20004e58 	.word	0x20004e58

0800a4c0 <__malloc_unlock>:
 800a4c0:	4801      	ldr	r0, [pc, #4]	; (800a4c8 <__malloc_unlock+0x8>)
 800a4c2:	f7ff bb18 	b.w	8009af6 <__retarget_lock_release_recursive>
 800a4c6:	bf00      	nop
 800a4c8:	20004e58 	.word	0x20004e58

0800a4cc <_read_r>:
 800a4cc:	b538      	push	{r3, r4, r5, lr}
 800a4ce:	4d07      	ldr	r5, [pc, #28]	; (800a4ec <_read_r+0x20>)
 800a4d0:	4604      	mov	r4, r0
 800a4d2:	4608      	mov	r0, r1
 800a4d4:	4611      	mov	r1, r2
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	602a      	str	r2, [r5, #0]
 800a4da:	461a      	mov	r2, r3
 800a4dc:	f7fa fc3c 	bl	8004d58 <_read>
 800a4e0:	1c43      	adds	r3, r0, #1
 800a4e2:	d102      	bne.n	800a4ea <_read_r+0x1e>
 800a4e4:	682b      	ldr	r3, [r5, #0]
 800a4e6:	b103      	cbz	r3, 800a4ea <_read_r+0x1e>
 800a4e8:	6023      	str	r3, [r4, #0]
 800a4ea:	bd38      	pop	{r3, r4, r5, pc}
 800a4ec:	20004e64 	.word	0x20004e64

0800a4f0 <_init>:
 800a4f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4f2:	bf00      	nop
 800a4f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4f6:	bc08      	pop	{r3}
 800a4f8:	469e      	mov	lr, r3
 800a4fa:	4770      	bx	lr

0800a4fc <_fini>:
 800a4fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4fe:	bf00      	nop
 800a500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a502:	bc08      	pop	{r3}
 800a504:	469e      	mov	lr, r3
 800a506:	4770      	bx	lr
