
display_new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a1fc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001298  0800a38c  0800a38c  0001a38c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b624  0800b624  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800b624  0800b624  0001b624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b62c  0800b62c  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b62c  0800b62c  0001b62c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b630  0800b630  0001b630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800b634  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005fc4  20000088  0800b6bc  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000604c  0800b6bc  0002604c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fb41  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bb0  00000000  00000000  0003fbf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015e8  00000000  00000000  000437b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014f8  00000000  00000000  00044d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002531c  00000000  00000000  00046290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b61b  00000000  00000000  0006b5ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6516  00000000  00000000  00086bc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015d0dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000066b8  00000000  00000000  0015d130  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a374 	.word	0x0800a374

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	0800a374 	.word	0x0800a374

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	; 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__aeabi_d2uiz>:
 800085c:	004a      	lsls	r2, r1, #1
 800085e:	d211      	bcs.n	8000884 <__aeabi_d2uiz+0x28>
 8000860:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000864:	d211      	bcs.n	800088a <__aeabi_d2uiz+0x2e>
 8000866:	d50d      	bpl.n	8000884 <__aeabi_d2uiz+0x28>
 8000868:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800086c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000870:	d40e      	bmi.n	8000890 <__aeabi_d2uiz+0x34>
 8000872:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000876:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800087a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800087e:	fa23 f002 	lsr.w	r0, r3, r2
 8000882:	4770      	bx	lr
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	4770      	bx	lr
 800088a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800088e:	d102      	bne.n	8000896 <__aeabi_d2uiz+0x3a>
 8000890:	f04f 30ff 	mov.w	r0, #4294967295
 8000894:	4770      	bx	lr
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	4770      	bx	lr

0800089c <__aeabi_uldivmod>:
 800089c:	b953      	cbnz	r3, 80008b4 <__aeabi_uldivmod+0x18>
 800089e:	b94a      	cbnz	r2, 80008b4 <__aeabi_uldivmod+0x18>
 80008a0:	2900      	cmp	r1, #0
 80008a2:	bf08      	it	eq
 80008a4:	2800      	cmpeq	r0, #0
 80008a6:	bf1c      	itt	ne
 80008a8:	f04f 31ff 	movne.w	r1, #4294967295
 80008ac:	f04f 30ff 	movne.w	r0, #4294967295
 80008b0:	f000 b96e 	b.w	8000b90 <__aeabi_idiv0>
 80008b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008bc:	f000 f806 	bl	80008cc <__udivmoddi4>
 80008c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008c8:	b004      	add	sp, #16
 80008ca:	4770      	bx	lr

080008cc <__udivmoddi4>:
 80008cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008d0:	9d08      	ldr	r5, [sp, #32]
 80008d2:	4604      	mov	r4, r0
 80008d4:	468c      	mov	ip, r1
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	f040 8083 	bne.w	80009e2 <__udivmoddi4+0x116>
 80008dc:	428a      	cmp	r2, r1
 80008de:	4617      	mov	r7, r2
 80008e0:	d947      	bls.n	8000972 <__udivmoddi4+0xa6>
 80008e2:	fab2 f282 	clz	r2, r2
 80008e6:	b142      	cbz	r2, 80008fa <__udivmoddi4+0x2e>
 80008e8:	f1c2 0020 	rsb	r0, r2, #32
 80008ec:	fa24 f000 	lsr.w	r0, r4, r0
 80008f0:	4091      	lsls	r1, r2
 80008f2:	4097      	lsls	r7, r2
 80008f4:	ea40 0c01 	orr.w	ip, r0, r1
 80008f8:	4094      	lsls	r4, r2
 80008fa:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80008fe:	0c23      	lsrs	r3, r4, #16
 8000900:	fbbc f6f8 	udiv	r6, ip, r8
 8000904:	fa1f fe87 	uxth.w	lr, r7
 8000908:	fb08 c116 	mls	r1, r8, r6, ip
 800090c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000910:	fb06 f10e 	mul.w	r1, r6, lr
 8000914:	4299      	cmp	r1, r3
 8000916:	d909      	bls.n	800092c <__udivmoddi4+0x60>
 8000918:	18fb      	adds	r3, r7, r3
 800091a:	f106 30ff 	add.w	r0, r6, #4294967295
 800091e:	f080 8119 	bcs.w	8000b54 <__udivmoddi4+0x288>
 8000922:	4299      	cmp	r1, r3
 8000924:	f240 8116 	bls.w	8000b54 <__udivmoddi4+0x288>
 8000928:	3e02      	subs	r6, #2
 800092a:	443b      	add	r3, r7
 800092c:	1a5b      	subs	r3, r3, r1
 800092e:	b2a4      	uxth	r4, r4
 8000930:	fbb3 f0f8 	udiv	r0, r3, r8
 8000934:	fb08 3310 	mls	r3, r8, r0, r3
 8000938:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800093c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000940:	45a6      	cmp	lr, r4
 8000942:	d909      	bls.n	8000958 <__udivmoddi4+0x8c>
 8000944:	193c      	adds	r4, r7, r4
 8000946:	f100 33ff 	add.w	r3, r0, #4294967295
 800094a:	f080 8105 	bcs.w	8000b58 <__udivmoddi4+0x28c>
 800094e:	45a6      	cmp	lr, r4
 8000950:	f240 8102 	bls.w	8000b58 <__udivmoddi4+0x28c>
 8000954:	3802      	subs	r0, #2
 8000956:	443c      	add	r4, r7
 8000958:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800095c:	eba4 040e 	sub.w	r4, r4, lr
 8000960:	2600      	movs	r6, #0
 8000962:	b11d      	cbz	r5, 800096c <__udivmoddi4+0xa0>
 8000964:	40d4      	lsrs	r4, r2
 8000966:	2300      	movs	r3, #0
 8000968:	e9c5 4300 	strd	r4, r3, [r5]
 800096c:	4631      	mov	r1, r6
 800096e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000972:	b902      	cbnz	r2, 8000976 <__udivmoddi4+0xaa>
 8000974:	deff      	udf	#255	; 0xff
 8000976:	fab2 f282 	clz	r2, r2
 800097a:	2a00      	cmp	r2, #0
 800097c:	d150      	bne.n	8000a20 <__udivmoddi4+0x154>
 800097e:	1bcb      	subs	r3, r1, r7
 8000980:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000984:	fa1f f887 	uxth.w	r8, r7
 8000988:	2601      	movs	r6, #1
 800098a:	fbb3 fcfe 	udiv	ip, r3, lr
 800098e:	0c21      	lsrs	r1, r4, #16
 8000990:	fb0e 331c 	mls	r3, lr, ip, r3
 8000994:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000998:	fb08 f30c 	mul.w	r3, r8, ip
 800099c:	428b      	cmp	r3, r1
 800099e:	d907      	bls.n	80009b0 <__udivmoddi4+0xe4>
 80009a0:	1879      	adds	r1, r7, r1
 80009a2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80009a6:	d202      	bcs.n	80009ae <__udivmoddi4+0xe2>
 80009a8:	428b      	cmp	r3, r1
 80009aa:	f200 80e9 	bhi.w	8000b80 <__udivmoddi4+0x2b4>
 80009ae:	4684      	mov	ip, r0
 80009b0:	1ac9      	subs	r1, r1, r3
 80009b2:	b2a3      	uxth	r3, r4
 80009b4:	fbb1 f0fe 	udiv	r0, r1, lr
 80009b8:	fb0e 1110 	mls	r1, lr, r0, r1
 80009bc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80009c0:	fb08 f800 	mul.w	r8, r8, r0
 80009c4:	45a0      	cmp	r8, r4
 80009c6:	d907      	bls.n	80009d8 <__udivmoddi4+0x10c>
 80009c8:	193c      	adds	r4, r7, r4
 80009ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80009ce:	d202      	bcs.n	80009d6 <__udivmoddi4+0x10a>
 80009d0:	45a0      	cmp	r8, r4
 80009d2:	f200 80d9 	bhi.w	8000b88 <__udivmoddi4+0x2bc>
 80009d6:	4618      	mov	r0, r3
 80009d8:	eba4 0408 	sub.w	r4, r4, r8
 80009dc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80009e0:	e7bf      	b.n	8000962 <__udivmoddi4+0x96>
 80009e2:	428b      	cmp	r3, r1
 80009e4:	d909      	bls.n	80009fa <__udivmoddi4+0x12e>
 80009e6:	2d00      	cmp	r5, #0
 80009e8:	f000 80b1 	beq.w	8000b4e <__udivmoddi4+0x282>
 80009ec:	2600      	movs	r6, #0
 80009ee:	e9c5 0100 	strd	r0, r1, [r5]
 80009f2:	4630      	mov	r0, r6
 80009f4:	4631      	mov	r1, r6
 80009f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009fa:	fab3 f683 	clz	r6, r3
 80009fe:	2e00      	cmp	r6, #0
 8000a00:	d14a      	bne.n	8000a98 <__udivmoddi4+0x1cc>
 8000a02:	428b      	cmp	r3, r1
 8000a04:	d302      	bcc.n	8000a0c <__udivmoddi4+0x140>
 8000a06:	4282      	cmp	r2, r0
 8000a08:	f200 80b8 	bhi.w	8000b7c <__udivmoddi4+0x2b0>
 8000a0c:	1a84      	subs	r4, r0, r2
 8000a0e:	eb61 0103 	sbc.w	r1, r1, r3
 8000a12:	2001      	movs	r0, #1
 8000a14:	468c      	mov	ip, r1
 8000a16:	2d00      	cmp	r5, #0
 8000a18:	d0a8      	beq.n	800096c <__udivmoddi4+0xa0>
 8000a1a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000a1e:	e7a5      	b.n	800096c <__udivmoddi4+0xa0>
 8000a20:	f1c2 0320 	rsb	r3, r2, #32
 8000a24:	fa20 f603 	lsr.w	r6, r0, r3
 8000a28:	4097      	lsls	r7, r2
 8000a2a:	fa01 f002 	lsl.w	r0, r1, r2
 8000a2e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a32:	40d9      	lsrs	r1, r3
 8000a34:	4330      	orrs	r0, r6
 8000a36:	0c03      	lsrs	r3, r0, #16
 8000a38:	fbb1 f6fe 	udiv	r6, r1, lr
 8000a3c:	fa1f f887 	uxth.w	r8, r7
 8000a40:	fb0e 1116 	mls	r1, lr, r6, r1
 8000a44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a48:	fb06 f108 	mul.w	r1, r6, r8
 8000a4c:	4299      	cmp	r1, r3
 8000a4e:	fa04 f402 	lsl.w	r4, r4, r2
 8000a52:	d909      	bls.n	8000a68 <__udivmoddi4+0x19c>
 8000a54:	18fb      	adds	r3, r7, r3
 8000a56:	f106 3cff 	add.w	ip, r6, #4294967295
 8000a5a:	f080 808d 	bcs.w	8000b78 <__udivmoddi4+0x2ac>
 8000a5e:	4299      	cmp	r1, r3
 8000a60:	f240 808a 	bls.w	8000b78 <__udivmoddi4+0x2ac>
 8000a64:	3e02      	subs	r6, #2
 8000a66:	443b      	add	r3, r7
 8000a68:	1a5b      	subs	r3, r3, r1
 8000a6a:	b281      	uxth	r1, r0
 8000a6c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a70:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a78:	fb00 f308 	mul.w	r3, r0, r8
 8000a7c:	428b      	cmp	r3, r1
 8000a7e:	d907      	bls.n	8000a90 <__udivmoddi4+0x1c4>
 8000a80:	1879      	adds	r1, r7, r1
 8000a82:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a86:	d273      	bcs.n	8000b70 <__udivmoddi4+0x2a4>
 8000a88:	428b      	cmp	r3, r1
 8000a8a:	d971      	bls.n	8000b70 <__udivmoddi4+0x2a4>
 8000a8c:	3802      	subs	r0, #2
 8000a8e:	4439      	add	r1, r7
 8000a90:	1acb      	subs	r3, r1, r3
 8000a92:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a96:	e778      	b.n	800098a <__udivmoddi4+0xbe>
 8000a98:	f1c6 0c20 	rsb	ip, r6, #32
 8000a9c:	fa03 f406 	lsl.w	r4, r3, r6
 8000aa0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000aa4:	431c      	orrs	r4, r3
 8000aa6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000aaa:	fa01 f306 	lsl.w	r3, r1, r6
 8000aae:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000ab2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ab6:	431f      	orrs	r7, r3
 8000ab8:	0c3b      	lsrs	r3, r7, #16
 8000aba:	fbb1 f9fe 	udiv	r9, r1, lr
 8000abe:	fa1f f884 	uxth.w	r8, r4
 8000ac2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ac6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000aca:	fb09 fa08 	mul.w	sl, r9, r8
 8000ace:	458a      	cmp	sl, r1
 8000ad0:	fa02 f206 	lsl.w	r2, r2, r6
 8000ad4:	fa00 f306 	lsl.w	r3, r0, r6
 8000ad8:	d908      	bls.n	8000aec <__udivmoddi4+0x220>
 8000ada:	1861      	adds	r1, r4, r1
 8000adc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ae0:	d248      	bcs.n	8000b74 <__udivmoddi4+0x2a8>
 8000ae2:	458a      	cmp	sl, r1
 8000ae4:	d946      	bls.n	8000b74 <__udivmoddi4+0x2a8>
 8000ae6:	f1a9 0902 	sub.w	r9, r9, #2
 8000aea:	4421      	add	r1, r4
 8000aec:	eba1 010a 	sub.w	r1, r1, sl
 8000af0:	b2bf      	uxth	r7, r7
 8000af2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000af6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000afa:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000afe:	fb00 f808 	mul.w	r8, r0, r8
 8000b02:	45b8      	cmp	r8, r7
 8000b04:	d907      	bls.n	8000b16 <__udivmoddi4+0x24a>
 8000b06:	19e7      	adds	r7, r4, r7
 8000b08:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b0c:	d22e      	bcs.n	8000b6c <__udivmoddi4+0x2a0>
 8000b0e:	45b8      	cmp	r8, r7
 8000b10:	d92c      	bls.n	8000b6c <__udivmoddi4+0x2a0>
 8000b12:	3802      	subs	r0, #2
 8000b14:	4427      	add	r7, r4
 8000b16:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000b1a:	eba7 0708 	sub.w	r7, r7, r8
 8000b1e:	fba0 8902 	umull	r8, r9, r0, r2
 8000b22:	454f      	cmp	r7, r9
 8000b24:	46c6      	mov	lr, r8
 8000b26:	4649      	mov	r1, r9
 8000b28:	d31a      	bcc.n	8000b60 <__udivmoddi4+0x294>
 8000b2a:	d017      	beq.n	8000b5c <__udivmoddi4+0x290>
 8000b2c:	b15d      	cbz	r5, 8000b46 <__udivmoddi4+0x27a>
 8000b2e:	ebb3 020e 	subs.w	r2, r3, lr
 8000b32:	eb67 0701 	sbc.w	r7, r7, r1
 8000b36:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000b3a:	40f2      	lsrs	r2, r6
 8000b3c:	ea4c 0202 	orr.w	r2, ip, r2
 8000b40:	40f7      	lsrs	r7, r6
 8000b42:	e9c5 2700 	strd	r2, r7, [r5]
 8000b46:	2600      	movs	r6, #0
 8000b48:	4631      	mov	r1, r6
 8000b4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b4e:	462e      	mov	r6, r5
 8000b50:	4628      	mov	r0, r5
 8000b52:	e70b      	b.n	800096c <__udivmoddi4+0xa0>
 8000b54:	4606      	mov	r6, r0
 8000b56:	e6e9      	b.n	800092c <__udivmoddi4+0x60>
 8000b58:	4618      	mov	r0, r3
 8000b5a:	e6fd      	b.n	8000958 <__udivmoddi4+0x8c>
 8000b5c:	4543      	cmp	r3, r8
 8000b5e:	d2e5      	bcs.n	8000b2c <__udivmoddi4+0x260>
 8000b60:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b64:	eb69 0104 	sbc.w	r1, r9, r4
 8000b68:	3801      	subs	r0, #1
 8000b6a:	e7df      	b.n	8000b2c <__udivmoddi4+0x260>
 8000b6c:	4608      	mov	r0, r1
 8000b6e:	e7d2      	b.n	8000b16 <__udivmoddi4+0x24a>
 8000b70:	4660      	mov	r0, ip
 8000b72:	e78d      	b.n	8000a90 <__udivmoddi4+0x1c4>
 8000b74:	4681      	mov	r9, r0
 8000b76:	e7b9      	b.n	8000aec <__udivmoddi4+0x220>
 8000b78:	4666      	mov	r6, ip
 8000b7a:	e775      	b.n	8000a68 <__udivmoddi4+0x19c>
 8000b7c:	4630      	mov	r0, r6
 8000b7e:	e74a      	b.n	8000a16 <__udivmoddi4+0x14a>
 8000b80:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b84:	4439      	add	r1, r7
 8000b86:	e713      	b.n	80009b0 <__udivmoddi4+0xe4>
 8000b88:	3802      	subs	r0, #2
 8000b8a:	443c      	add	r4, r7
 8000b8c:	e724      	b.n	80009d8 <__udivmoddi4+0x10c>
 8000b8e:	bf00      	nop

08000b90 <__aeabi_idiv0>:
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop

08000b94 <Init_LCD>:
static void iopins_ini();
static void ili9488_showArray_wo_coordinates(uint16_t *data, uint32_t count);
/*----------------------------------------------Public  functions-----------------------------------------------------*/
//initialize LCD
void Init_LCD()
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
	interrupt_initialize_priorities();
 8000b98:	f000 f982 	bl	8000ea0 <interrupt_initialize_priorities>
	iopins_ini();
 8000b9c:	f000 f988 	bl	8000eb0 <iopins_ini>
	initialize_ili9488();
 8000ba0:	f000 fb8e 	bl	80012c0 <initialize_ili9488>
	LCD_backlight_set(100);
 8000ba4:	2064      	movs	r0, #100	; 0x64
 8000ba6:	f000 f8d1 	bl	8000d4c <LCD_backlight_set>
}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
	...

08000bb0 <LCD_fillRect>:
//Draw filled rectangle
void LCD_fillRect(uint16_t x1, uint16_t y1, uint16_t w, uint16_t h, uint16_t color)
{
 8000bb0:	b590      	push	{r4, r7, lr}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4604      	mov	r4, r0
 8000bb8:	4608      	mov	r0, r1
 8000bba:	4611      	mov	r1, r2
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	4623      	mov	r3, r4
 8000bc0:	80fb      	strh	r3, [r7, #6]
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	80bb      	strh	r3, [r7, #4]
 8000bc6:	460b      	mov	r3, r1
 8000bc8:	807b      	strh	r3, [r7, #2]
 8000bca:	4613      	mov	r3, r2
 8000bcc:	803b      	strh	r3, [r7, #0]
	uint32_t count = w * h;
 8000bce:	887b      	ldrh	r3, [r7, #2]
 8000bd0:	883a      	ldrh	r2, [r7, #0]
 8000bd2:	fb02 f303 	mul.w	r3, r2, r3
 8000bd6:	60bb      	str	r3, [r7, #8]
	LCD_set_coordinates(x1, y1, (uint16_t) (x1 + w - 1), (uint16_t) (y1 + h - 1));
 8000bd8:	88fa      	ldrh	r2, [r7, #6]
 8000bda:	887b      	ldrh	r3, [r7, #2]
 8000bdc:	4413      	add	r3, r2
 8000bde:	b29b      	uxth	r3, r3
 8000be0:	3b01      	subs	r3, #1
 8000be2:	b29c      	uxth	r4, r3
 8000be4:	88ba      	ldrh	r2, [r7, #4]
 8000be6:	883b      	ldrh	r3, [r7, #0]
 8000be8:	4413      	add	r3, r2
 8000bea:	b29b      	uxth	r3, r3
 8000bec:	3b01      	subs	r3, #1
 8000bee:	b29b      	uxth	r3, r3
 8000bf0:	88b9      	ldrh	r1, [r7, #4]
 8000bf2:	88f8      	ldrh	r0, [r7, #6]
 8000bf4:	4622      	mov	r2, r4
 8000bf6:	f000 f82f 	bl	8000c58 <LCD_set_coordinates>

	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_RESET);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c00:	4814      	ldr	r0, [pc, #80]	; (8000c54 <LCD_fillRect+0xa4>)
 8000c02:	f004 ff05 	bl	8005a10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_RESET);
 8000c06:	2200      	movs	r2, #0
 8000c08:	2180      	movs	r1, #128	; 0x80
 8000c0a:	4812      	ldr	r0, [pc, #72]	; (8000c54 <LCD_fillRect+0xa4>)
 8000c0c:	f004 ff00 	bl	8005a10 <HAL_GPIO_WritePin>
	TFT_REG=0x002C;
 8000c10:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000c14:	222c      	movs	r2, #44	; 0x2c
 8000c16:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_SET);
 8000c18:	2201      	movs	r2, #1
 8000c1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c1e:	480d      	ldr	r0, [pc, #52]	; (8000c54 <LCD_fillRect+0xa4>)
 8000c20:	f004 fef6 	bl	8005a10 <HAL_GPIO_WritePin>

	for(unsigned int i=0; i<count; i++)
 8000c24:	2300      	movs	r3, #0
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	e006      	b.n	8000c38 <LCD_fillRect+0x88>
	{
		TFT_REG=color;
 8000c2a:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000c2e:	8c3b      	ldrh	r3, [r7, #32]
 8000c30:	8013      	strh	r3, [r2, #0]
	for(unsigned int i=0; i<count; i++)
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	3301      	adds	r3, #1
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	68fa      	ldr	r2, [r7, #12]
 8000c3a:	68bb      	ldr	r3, [r7, #8]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	d3f4      	bcc.n	8000c2a <LCD_fillRect+0x7a>
	}

	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_SET);
 8000c40:	2201      	movs	r2, #1
 8000c42:	2180      	movs	r1, #128	; 0x80
 8000c44:	4803      	ldr	r0, [pc, #12]	; (8000c54 <LCD_fillRect+0xa4>)
 8000c46:	f004 fee3 	bl	8005a10 <HAL_GPIO_WritePin>
}
 8000c4a:	bf00      	nop
 8000c4c:	3714      	adds	r7, #20
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd90      	pop	{r4, r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40020c00 	.word	0x40020c00

08000c58 <LCD_set_coordinates>:
//Set coordinates for LCD IC
void LCD_set_coordinates(uint16_t x1,uint16_t y1, uint16_t x2, uint16_t y2)
{
 8000c58:	b590      	push	{r4, r7, lr}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4604      	mov	r4, r0
 8000c60:	4608      	mov	r0, r1
 8000c62:	4611      	mov	r1, r2
 8000c64:	461a      	mov	r2, r3
 8000c66:	4623      	mov	r3, r4
 8000c68:	80fb      	strh	r3, [r7, #6]
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	80bb      	strh	r3, [r7, #4]
 8000c6e:	460b      	mov	r3, r1
 8000c70:	807b      	strh	r3, [r7, #2]
 8000c72:	4613      	mov	r3, r2
 8000c74:	803b      	strh	r3, [r7, #0]
	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_RESET);
 8000c76:	2200      	movs	r2, #0
 8000c78:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c7c:	4832      	ldr	r0, [pc, #200]	; (8000d48 <LCD_set_coordinates+0xf0>)
 8000c7e:	f004 fec7 	bl	8005a10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_RESET);
 8000c82:	2200      	movs	r2, #0
 8000c84:	2180      	movs	r1, #128	; 0x80
 8000c86:	4830      	ldr	r0, [pc, #192]	; (8000d48 <LCD_set_coordinates+0xf0>)
 8000c88:	f004 fec2 	bl	8005a10 <HAL_GPIO_WritePin>
	TFT_REG=0x002A;
 8000c8c:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000c90:	222a      	movs	r2, #42	; 0x2a
 8000c92:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_SET);
 8000c94:	2201      	movs	r2, #1
 8000c96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c9a:	482b      	ldr	r0, [pc, #172]	; (8000d48 <LCD_set_coordinates+0xf0>)
 8000c9c:	f004 feb8 	bl	8005a10 <HAL_GPIO_WritePin>
	TFT_REG=x1>>8;
 8000ca0:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000ca4:	88fb      	ldrh	r3, [r7, #6]
 8000ca6:	0a1b      	lsrs	r3, r3, #8
 8000ca8:	b29b      	uxth	r3, r3
 8000caa:	8013      	strh	r3, [r2, #0]
	TFT_REG=x1&0xFF;
 8000cac:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000cb0:	88fa      	ldrh	r2, [r7, #6]
 8000cb2:	b2d2      	uxtb	r2, r2
 8000cb4:	b292      	uxth	r2, r2
 8000cb6:	801a      	strh	r2, [r3, #0]
	TFT_REG=x2>>8;
 8000cb8:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000cbc:	887b      	ldrh	r3, [r7, #2]
 8000cbe:	0a1b      	lsrs	r3, r3, #8
 8000cc0:	b29b      	uxth	r3, r3
 8000cc2:	8013      	strh	r3, [r2, #0]
	TFT_REG=x2&0xFF;
 8000cc4:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000cc8:	887a      	ldrh	r2, [r7, #2]
 8000cca:	b2d2      	uxtb	r2, r2
 8000ccc:	b292      	uxth	r2, r2
 8000cce:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_SET);
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	2180      	movs	r1, #128	; 0x80
 8000cd4:	481c      	ldr	r0, [pc, #112]	; (8000d48 <LCD_set_coordinates+0xf0>)
 8000cd6:	f004 fe9b 	bl	8005a10 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_RESET);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ce0:	4819      	ldr	r0, [pc, #100]	; (8000d48 <LCD_set_coordinates+0xf0>)
 8000ce2:	f004 fe95 	bl	8005a10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_RESET);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2180      	movs	r1, #128	; 0x80
 8000cea:	4817      	ldr	r0, [pc, #92]	; (8000d48 <LCD_set_coordinates+0xf0>)
 8000cec:	f004 fe90 	bl	8005a10 <HAL_GPIO_WritePin>
	TFT_REG=0x002B;
 8000cf0:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000cf4:	222b      	movs	r2, #43	; 0x2b
 8000cf6:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_SET);
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cfe:	4812      	ldr	r0, [pc, #72]	; (8000d48 <LCD_set_coordinates+0xf0>)
 8000d00:	f004 fe86 	bl	8005a10 <HAL_GPIO_WritePin>
	TFT_REG=y1>>8;
 8000d04:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000d08:	88bb      	ldrh	r3, [r7, #4]
 8000d0a:	0a1b      	lsrs	r3, r3, #8
 8000d0c:	b29b      	uxth	r3, r3
 8000d0e:	8013      	strh	r3, [r2, #0]
	TFT_REG=y1&0xFF;
 8000d10:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000d14:	88ba      	ldrh	r2, [r7, #4]
 8000d16:	b2d2      	uxtb	r2, r2
 8000d18:	b292      	uxth	r2, r2
 8000d1a:	801a      	strh	r2, [r3, #0]
	TFT_REG=y2>>8;
 8000d1c:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000d20:	883b      	ldrh	r3, [r7, #0]
 8000d22:	0a1b      	lsrs	r3, r3, #8
 8000d24:	b29b      	uxth	r3, r3
 8000d26:	8013      	strh	r3, [r2, #0]
	TFT_REG=y2&0xFF;
 8000d28:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000d2c:	883a      	ldrh	r2, [r7, #0]
 8000d2e:	b2d2      	uxtb	r2, r2
 8000d30:	b292      	uxth	r2, r2
 8000d32:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_SET);
 8000d34:	2201      	movs	r2, #1
 8000d36:	2180      	movs	r1, #128	; 0x80
 8000d38:	4803      	ldr	r0, [pc, #12]	; (8000d48 <LCD_set_coordinates+0xf0>)
 8000d3a:	f004 fe69 	bl	8005a10 <HAL_GPIO_WritePin>
}
 8000d3e:	bf00      	nop
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd90      	pop	{r4, r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40020c00 	.word	0x40020c00

08000d4c <LCD_backlight_set>:
//Set PWM duty cycle for LCD back light
void LCD_backlight_set(uint16_t pwm)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b0a6      	sub	sp, #152	; 0x98
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	80fb      	strh	r3, [r7, #6]

	if(pwm>=100)
 8000d56:	88fb      	ldrh	r3, [r7, #6]
 8000d58:	2b63      	cmp	r3, #99	; 0x63
 8000d5a:	d902      	bls.n	8000d62 <LCD_backlight_set+0x16>
	{
		pwm=100;
 8000d5c:	2364      	movs	r3, #100	; 0x64
 8000d5e:	80fb      	strh	r3, [r7, #6]
 8000d60:	e004      	b.n	8000d6c <LCD_backlight_set+0x20>
	}else if(pwm <= 0)
 8000d62:	88fb      	ldrh	r3, [r7, #6]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d101      	bne.n	8000d6c <LCD_backlight_set+0x20>
	{
		pwm = 0;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	80fb      	strh	r3, [r7, #6]
	}

	pwm=(unsigned int)((MAX_PWM_PULSE * pwm)/100);
 8000d6c:	88fa      	ldrh	r2, [r7, #6]
 8000d6e:	4613      	mov	r3, r2
 8000d70:	041b      	lsls	r3, r3, #16
 8000d72:	1a9b      	subs	r3, r3, r2
 8000d74:	4a48      	ldr	r2, [pc, #288]	; (8000e98 <LCD_backlight_set+0x14c>)
 8000d76:	fb82 1203 	smull	r1, r2, r2, r3
 8000d7a:	1152      	asrs	r2, r2, #5
 8000d7c:	17db      	asrs	r3, r3, #31
 8000d7e:	1ad3      	subs	r3, r2, r3
 8000d80:	80fb      	strh	r3, [r7, #6]

	/* Common settings */
      TIM_HandleTypeDef htim1;
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d82:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000d86:	2200      	movs	r2, #0
 8000d88:	601a      	str	r2, [r3, #0]
 8000d8a:	605a      	str	r2, [r3, #4]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]
 8000d9a:	611a      	str	r2, [r3, #16]
 8000d9c:	615a      	str	r2, [r3, #20]
 8000d9e:	619a      	str	r2, [r3, #24]
	  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000da0:	f107 030c 	add.w	r3, r7, #12
 8000da4:	2220      	movs	r2, #32
 8000da6:	2100      	movs	r1, #0
 8000da8:	4618      	mov	r0, r3
 8000daa:	f008 faef 	bl	800938c <memset>

	  htim1.Instance = TIM1;
 8000dae:	4b3b      	ldr	r3, [pc, #236]	; (8000e9c <LCD_backlight_set+0x150>)
 8000db0:	653b      	str	r3, [r7, #80]	; 0x50
	  htim1.Init.Prescaler = 0;
 8000db2:	2300      	movs	r3, #0
 8000db4:	657b      	str	r3, [r7, #84]	; 0x54
	  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db6:	2300      	movs	r3, #0
 8000db8:	65bb      	str	r3, [r7, #88]	; 0x58
	  htim1.Init.Period = 65535;
 8000dba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dbe:	65fb      	str	r3, [r7, #92]	; 0x5c
	  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	663b      	str	r3, [r7, #96]	; 0x60
	  htim1.Init.RepetitionCounter = 0;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	667b      	str	r3, [r7, #100]	; 0x64
	  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	66bb      	str	r3, [r7, #104]	; 0x68
	  HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_4);
 8000dcc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000dd0:	210c      	movs	r1, #12
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f006 fde8 	bl	80079a8 <HAL_TIM_PWM_Stop>
	  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000dd8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f006 fccc 	bl	800777a <HAL_TIM_PWM_Init>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <LCD_backlight_set+0xa0>
	  {
	    Error_Handler();
 8000de8:	f003 fabe 	bl	8004368 <Error_Handler>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dec:	2300      	movs	r3, #0
 8000dee:	64bb      	str	r3, [r7, #72]	; 0x48
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000df0:	2300      	movs	r3, #0
 8000df2:	64fb      	str	r3, [r7, #76]	; 0x4c
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000df4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000df8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000dfc:	4611      	mov	r1, r2
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f007 f97a 	bl	80080f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <LCD_backlight_set+0xc2>
	  {
	    Error_Handler();
 8000e0a:	f003 faad 	bl	8004368 <Error_Handler>
	  }
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e0e:	2360      	movs	r3, #96	; 0x60
 8000e10:	62fb      	str	r3, [r7, #44]	; 0x2c
	  sConfigOC.Pulse = pwm;
 8000e12:	88fb      	ldrh	r3, [r7, #6]
 8000e14:	633b      	str	r3, [r7, #48]	; 0x30
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e16:	2300      	movs	r3, #0
 8000e18:	637b      	str	r3, [r7, #52]	; 0x34
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
	  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	643b      	str	r3, [r7, #64]	; 0x40
	  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e22:	2300      	movs	r3, #0
 8000e24:	647b      	str	r3, [r7, #68]	; 0x44
	  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e26:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8000e2a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000e2e:	220c      	movs	r2, #12
 8000e30:	4618      	mov	r0, r3
 8000e32:	f006 fe29 	bl	8007a88 <HAL_TIM_PWM_ConfigChannel>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <LCD_backlight_set+0xf4>
	  {
	    Error_Handler();
 8000e3c:	f003 fa94 	bl	8004368 <Error_Handler>
	  }
	  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e40:	2300      	movs	r3, #0
 8000e42:	60fb      	str	r3, [r7, #12]
	  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e44:	2300      	movs	r3, #0
 8000e46:	613b      	str	r3, [r7, #16]
	  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	617b      	str	r3, [r7, #20]
	  sBreakDeadTimeConfig.DeadTime = 0;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	61bb      	str	r3, [r7, #24]
	  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e50:	2300      	movs	r3, #0
 8000e52:	61fb      	str	r3, [r7, #28]
	  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e58:	623b      	str	r3, [r7, #32]
	  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	62bb      	str	r3, [r7, #40]	; 0x28
	  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e5e:	f107 020c 	add.w	r2, r7, #12
 8000e62:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000e66:	4611      	mov	r1, r2
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f007 f9c1 	bl	80081f0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <LCD_backlight_set+0x12c>
	  {
	    Error_Handler();
 8000e74:	f003 fa78 	bl	8004368 <Error_Handler>
	  }

	  HAL_TIM_MspPostInit(&htim1);
 8000e78:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f003 fdc7 	bl	8004a10 <HAL_TIM_MspPostInit>
	  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_4);
 8000e82:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000e86:	210c      	movs	r1, #12
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f006 fcc5 	bl	8007818 <HAL_TIM_PWM_Start>


}
 8000e8e:	bf00      	nop
 8000e90:	3798      	adds	r7, #152	; 0x98
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	51eb851f 	.word	0x51eb851f
 8000e9c:	40010000 	.word	0x40010000

08000ea0 <interrupt_initialize_priorities>:
	ili9488_showArray_wo_coordinates(color,1);
}

/*----------------------------------------------Private functions-----------------------------------------------------*/
static void interrupt_initialize_priorities()
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4); //4 bits for preemp priority 0 bit for sub priority
 8000ea4:	2003      	movs	r0, #3
 8000ea6:	f004 fb43 	bl	8005530 <HAL_NVIC_SetPriorityGrouping>
}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
	...

08000eb0 <iopins_ini>:
static void iopins_ini()
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b098      	sub	sp, #96	; 0x60
 8000eb4:	af00      	add	r7, sp, #0

	 __GPIOC_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	64bb      	str	r3, [r7, #72]	; 0x48
 8000eba:	4bac      	ldr	r3, [pc, #688]	; (800116c <iopins_ini+0x2bc>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	4aab      	ldr	r2, [pc, #684]	; (800116c <iopins_ini+0x2bc>)
 8000ec0:	f043 0304 	orr.w	r3, r3, #4
 8000ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec6:	4ba9      	ldr	r3, [pc, #676]	; (800116c <iopins_ini+0x2bc>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	f003 0304 	and.w	r3, r3, #4
 8000ece:	64bb      	str	r3, [r7, #72]	; 0x48
 8000ed0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
	 __GPIOD_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	647b      	str	r3, [r7, #68]	; 0x44
 8000ed6:	4ba5      	ldr	r3, [pc, #660]	; (800116c <iopins_ini+0x2bc>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	4aa4      	ldr	r2, [pc, #656]	; (800116c <iopins_ini+0x2bc>)
 8000edc:	f043 0308 	orr.w	r3, r3, #8
 8000ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee2:	4ba2      	ldr	r3, [pc, #648]	; (800116c <iopins_ini+0x2bc>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	f003 0308 	and.w	r3, r3, #8
 8000eea:	647b      	str	r3, [r7, #68]	; 0x44
 8000eec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
	 __GPIOA_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	643b      	str	r3, [r7, #64]	; 0x40
 8000ef2:	4b9e      	ldr	r3, [pc, #632]	; (800116c <iopins_ini+0x2bc>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	4a9d      	ldr	r2, [pc, #628]	; (800116c <iopins_ini+0x2bc>)
 8000ef8:	f043 0301 	orr.w	r3, r3, #1
 8000efc:	6313      	str	r3, [r2, #48]	; 0x30
 8000efe:	4b9b      	ldr	r3, [pc, #620]	; (800116c <iopins_ini+0x2bc>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	643b      	str	r3, [r7, #64]	; 0x40
 8000f08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
	 __GPIOB_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f0e:	4b97      	ldr	r3, [pc, #604]	; (800116c <iopins_ini+0x2bc>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	4a96      	ldr	r2, [pc, #600]	; (800116c <iopins_ini+0x2bc>)
 8000f14:	f043 0302 	orr.w	r3, r3, #2
 8000f18:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1a:	4b94      	ldr	r3, [pc, #592]	; (800116c <iopins_ini+0x2bc>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	f003 0302 	and.w	r3, r3, #2
 8000f22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
	GPIO_InitTypeDef GPIO_InitStruct;

    BUZZER_PORT_RCC();
 8000f26:	2300      	movs	r3, #0
 8000f28:	63bb      	str	r3, [r7, #56]	; 0x38
 8000f2a:	4b90      	ldr	r3, [pc, #576]	; (800116c <iopins_ini+0x2bc>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	4a8f      	ldr	r2, [pc, #572]	; (800116c <iopins_ini+0x2bc>)
 8000f30:	f043 0308 	orr.w	r3, r3, #8
 8000f34:	6313      	str	r3, [r2, #48]	; 0x30
 8000f36:	4b8d      	ldr	r3, [pc, #564]	; (800116c <iopins_ini+0x2bc>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	f003 0308 	and.w	r3, r3, #8
 8000f3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8000f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Pin = BUZZER;
 8000f42:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f46:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	65bb      	str	r3, [r7, #88]	; 0x58
	HAL_GPIO_Init(BUZZER_PORT, &GPIO_InitStruct);
 8000f50:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f54:	4619      	mov	r1, r3
 8000f56:	4886      	ldr	r0, [pc, #536]	; (8001170 <iopins_ini+0x2c0>)
 8000f58:	f004 fbbe 	bl	80056d8 <HAL_GPIO_Init>

    RS485DIR_PORT_RCC();
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	637b      	str	r3, [r7, #52]	; 0x34
 8000f60:	4b82      	ldr	r3, [pc, #520]	; (800116c <iopins_ini+0x2bc>)
 8000f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f64:	4a81      	ldr	r2, [pc, #516]	; (800116c <iopins_ini+0x2bc>)
 8000f66:	f043 0301 	orr.w	r3, r3, #1
 8000f6a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6c:	4b7f      	ldr	r3, [pc, #508]	; (800116c <iopins_ini+0x2bc>)
 8000f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f70:	f003 0301 	and.w	r3, r3, #1
 8000f74:	637b      	str	r3, [r7, #52]	; 0x34
 8000f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Pin = RS485DIR;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f80:	2300      	movs	r3, #0
 8000f82:	65bb      	str	r3, [r7, #88]	; 0x58
	HAL_GPIO_Init(RS485DIR_PORT, &GPIO_InitStruct);
 8000f84:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f88:	4619      	mov	r1, r3
 8000f8a:	487a      	ldr	r0, [pc, #488]	; (8001174 <iopins_ini+0x2c4>)
 8000f8c:	f004 fba4 	bl	80056d8 <HAL_GPIO_Init>

    LCD_CS_PORT_RCC();
 8000f90:	2300      	movs	r3, #0
 8000f92:	633b      	str	r3, [r7, #48]	; 0x30
 8000f94:	4b75      	ldr	r3, [pc, #468]	; (800116c <iopins_ini+0x2bc>)
 8000f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f98:	4a74      	ldr	r2, [pc, #464]	; (800116c <iopins_ini+0x2bc>)
 8000f9a:	f043 0308 	orr.w	r3, r3, #8
 8000f9e:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa0:	4b72      	ldr	r3, [pc, #456]	; (800116c <iopins_ini+0x2bc>)
 8000fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa4:	f003 0308 	and.w	r3, r3, #8
 8000fa8:	633b      	str	r3, [r7, #48]	; 0x30
 8000faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pin = LCD_CS;
 8000fac:	2380      	movs	r3, #128	; 0x80
 8000fae:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(LCD_CS_PORT, &GPIO_InitStruct);
 8000fb8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	486c      	ldr	r0, [pc, #432]	; (8001170 <iopins_ini+0x2c0>)
 8000fc0:	f004 fb8a 	bl	80056d8 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(LCD_CS_PORT,LCD_CS,GPIO_PIN_SET);
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	2180      	movs	r1, #128	; 0x80
 8000fc8:	4869      	ldr	r0, [pc, #420]	; (8001170 <iopins_ini+0x2c0>)
 8000fca:	f004 fd21 	bl	8005a10 <HAL_GPIO_WritePin>

    LCD_RES_PORT_RCC();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000fd2:	4b66      	ldr	r3, [pc, #408]	; (800116c <iopins_ini+0x2bc>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	4a65      	ldr	r2, [pc, #404]	; (800116c <iopins_ini+0x2bc>)
 8000fd8:	f043 0301 	orr.w	r3, r3, #1
 8000fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fde:	4b63      	ldr	r3, [pc, #396]	; (800116c <iopins_ini+0x2bc>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Pin = LCD_RES;
 8000fea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fee:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed =GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(LCD_RES_PORT, &GPIO_InitStruct);
 8000ff8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	485d      	ldr	r0, [pc, #372]	; (8001174 <iopins_ini+0x2c4>)
 8001000:	f004 fb6a 	bl	80056d8 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(LCD_RES_PORT,LCD_RES,GPIO_PIN_RESET);
 8001004:	2200      	movs	r2, #0
 8001006:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800100a:	485a      	ldr	r0, [pc, #360]	; (8001174 <iopins_ini+0x2c4>)
 800100c:	f004 fd00 	bl	8005a10 <HAL_GPIO_WritePin>
	delay_ms(50);
 8001010:	2032      	movs	r0, #50	; 0x32
 8001012:	f000 f9cf 	bl	80013b4 <delay_ms>
	HAL_GPIO_WritePin(LCD_RES_PORT,LCD_RES,GPIO_PIN_SET);
 8001016:	2201      	movs	r2, #1
 8001018:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800101c:	4855      	ldr	r0, [pc, #340]	; (8001174 <iopins_ini+0x2c4>)
 800101e:	f004 fcf7 	bl	8005a10 <HAL_GPIO_WritePin>

    LCD_DCX_PORT_RCC();
 8001022:	2300      	movs	r3, #0
 8001024:	62bb      	str	r3, [r7, #40]	; 0x28
 8001026:	4b51      	ldr	r3, [pc, #324]	; (800116c <iopins_ini+0x2bc>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	4a50      	ldr	r2, [pc, #320]	; (800116c <iopins_ini+0x2bc>)
 800102c:	f043 0308 	orr.w	r3, r3, #8
 8001030:	6313      	str	r3, [r2, #48]	; 0x30
 8001032:	4b4e      	ldr	r3, [pc, #312]	; (800116c <iopins_ini+0x2bc>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	f003 0308 	and.w	r3, r3, #8
 800103a:	62bb      	str	r3, [r7, #40]	; 0x28
 800103c:	6abb      	ldr	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pin = LCD_DCX;
 800103e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001042:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001044:	2301      	movs	r3, #1
 8001046:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed =GPIO_SPEED_FREQ_VERY_HIGH;
 8001048:	2303      	movs	r3, #3
 800104a:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(LCD_DCX_PORT, &GPIO_InitStruct);
 800104c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001050:	4619      	mov	r1, r3
 8001052:	4847      	ldr	r0, [pc, #284]	; (8001170 <iopins_ini+0x2c0>)
 8001054:	f004 fb40 	bl	80056d8 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(LCD_DCX_PORT,LCD_DCX,GPIO_PIN_SET);
 8001058:	2201      	movs	r2, #1
 800105a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800105e:	4844      	ldr	r0, [pc, #272]	; (8001170 <iopins_ini+0x2c0>)
 8001060:	f004 fcd6 	bl	8005a10 <HAL_GPIO_WritePin>

    FLASH_CS_PORT_RCC();
 8001064:	2300      	movs	r3, #0
 8001066:	627b      	str	r3, [r7, #36]	; 0x24
 8001068:	4b40      	ldr	r3, [pc, #256]	; (800116c <iopins_ini+0x2bc>)
 800106a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106c:	4a3f      	ldr	r2, [pc, #252]	; (800116c <iopins_ini+0x2bc>)
 800106e:	f043 0301 	orr.w	r3, r3, #1
 8001072:	6313      	str	r3, [r2, #48]	; 0x30
 8001074:	4b3d      	ldr	r3, [pc, #244]	; (800116c <iopins_ini+0x2bc>)
 8001076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001078:	f003 0301 	and.w	r3, r3, #1
 800107c:	627b      	str	r3, [r7, #36]	; 0x24
 800107e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Pin = FLASH_CS;
 8001080:	2310      	movs	r3, #16
 8001082:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001084:	2301      	movs	r3, #1
 8001086:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed =GPIO_SPEED_FREQ_VERY_HIGH;
 8001088:	2303      	movs	r3, #3
 800108a:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(FLASH_CS_PORT, &GPIO_InitStruct);
 800108c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001090:	4619      	mov	r1, r3
 8001092:	4838      	ldr	r0, [pc, #224]	; (8001174 <iopins_ini+0x2c4>)
 8001094:	f004 fb20 	bl	80056d8 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(FLASH_CS_PORT,FLASH_CS,GPIO_PIN_SET);
 8001098:	2201      	movs	r2, #1
 800109a:	2110      	movs	r1, #16
 800109c:	4835      	ldr	r0, [pc, #212]	; (8001174 <iopins_ini+0x2c4>)
 800109e:	f004 fcb7 	bl	8005a10 <HAL_GPIO_WritePin>

    FLASH_WP_PORT_RCC();
 80010a2:	2300      	movs	r3, #0
 80010a4:	623b      	str	r3, [r7, #32]
 80010a6:	4b31      	ldr	r3, [pc, #196]	; (800116c <iopins_ini+0x2bc>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	4a30      	ldr	r2, [pc, #192]	; (800116c <iopins_ini+0x2bc>)
 80010ac:	f043 0304 	orr.w	r3, r3, #4
 80010b0:	6313      	str	r3, [r2, #48]	; 0x30
 80010b2:	4b2e      	ldr	r3, [pc, #184]	; (800116c <iopins_ini+0x2bc>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	f003 0304 	and.w	r3, r3, #4
 80010ba:	623b      	str	r3, [r7, #32]
 80010bc:	6a3b      	ldr	r3, [r7, #32]
	GPIO_InitStruct.Pin = FLASH_WP;
 80010be:	2310      	movs	r3, #16
 80010c0:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c2:	2301      	movs	r3, #1
 80010c4:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c6:	2300      	movs	r3, #0
 80010c8:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(FLASH_WP_PORT, &GPIO_InitStruct);
 80010ca:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80010ce:	4619      	mov	r1, r3
 80010d0:	4829      	ldr	r0, [pc, #164]	; (8001178 <iopins_ini+0x2c8>)
 80010d2:	f004 fb01 	bl	80056d8 <HAL_GPIO_Init>
	 HAL_GPIO_WritePin(FLASH_WP_PORT,FLASH_WP,GPIO_PIN_RESET);
 80010d6:	2200      	movs	r2, #0
 80010d8:	2110      	movs	r1, #16
 80010da:	4827      	ldr	r0, [pc, #156]	; (8001178 <iopins_ini+0x2c8>)
 80010dc:	f004 fc98 	bl	8005a10 <HAL_GPIO_WritePin>

    FRAM_CS_PORT_RCC();
 80010e0:	2300      	movs	r3, #0
 80010e2:	61fb      	str	r3, [r7, #28]
 80010e4:	4b21      	ldr	r3, [pc, #132]	; (800116c <iopins_ini+0x2bc>)
 80010e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e8:	4a20      	ldr	r2, [pc, #128]	; (800116c <iopins_ini+0x2bc>)
 80010ea:	f043 0302 	orr.w	r3, r3, #2
 80010ee:	6313      	str	r3, [r2, #48]	; 0x30
 80010f0:	4b1e      	ldr	r3, [pc, #120]	; (800116c <iopins_ini+0x2bc>)
 80010f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f4:	f003 0302 	and.w	r3, r3, #2
 80010f8:	61fb      	str	r3, [r7, #28]
 80010fa:	69fb      	ldr	r3, [r7, #28]
	GPIO_InitStruct.Pin = FRAM_CS;
 80010fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001100:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001102:	2301      	movs	r3, #1
 8001104:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed =GPIO_SPEED_FREQ_VERY_HIGH;
 8001106:	2303      	movs	r3, #3
 8001108:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(FRAM_CS_PORT, &GPIO_InitStruct);
 800110a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800110e:	4619      	mov	r1, r3
 8001110:	481a      	ldr	r0, [pc, #104]	; (800117c <iopins_ini+0x2cc>)
 8001112:	f004 fae1 	bl	80056d8 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(FRAM_CS_PORT,FRAM_CS,GPIO_PIN_SET);
 8001116:	2201      	movs	r2, #1
 8001118:	f44f 7100 	mov.w	r1, #512	; 0x200
 800111c:	4817      	ldr	r0, [pc, #92]	; (800117c <iopins_ini+0x2cc>)
 800111e:	f004 fc77 	bl	8005a10 <HAL_GPIO_WritePin>

    FRAM_HOLD_PORT_RCC();
 8001122:	2300      	movs	r3, #0
 8001124:	61bb      	str	r3, [r7, #24]
 8001126:	4b11      	ldr	r3, [pc, #68]	; (800116c <iopins_ini+0x2bc>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	4a10      	ldr	r2, [pc, #64]	; (800116c <iopins_ini+0x2bc>)
 800112c:	f043 0304 	orr.w	r3, r3, #4
 8001130:	6313      	str	r3, [r2, #48]	; 0x30
 8001132:	4b0e      	ldr	r3, [pc, #56]	; (800116c <iopins_ini+0x2bc>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	f003 0304 	and.w	r3, r3, #4
 800113a:	61bb      	str	r3, [r7, #24]
 800113c:	69bb      	ldr	r3, [r7, #24]
	GPIO_InitStruct.Pin = FRAM_HOLD;
 800113e:	2302      	movs	r3, #2
 8001140:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001142:	2301      	movs	r3, #1
 8001144:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed =GPIO_SPEED_FREQ_VERY_HIGH;
 8001146:	2303      	movs	r3, #3
 8001148:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(FRAM_HOLD_PORT, &GPIO_InitStruct);
 800114a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800114e:	4619      	mov	r1, r3
 8001150:	4809      	ldr	r0, [pc, #36]	; (8001178 <iopins_ini+0x2c8>)
 8001152:	f004 fac1 	bl	80056d8 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(FRAM_HOLD_PORT,FRAM_HOLD,GPIO_PIN_SET);
 8001156:	2201      	movs	r2, #1
 8001158:	2102      	movs	r1, #2
 800115a:	4807      	ldr	r0, [pc, #28]	; (8001178 <iopins_ini+0x2c8>)
 800115c:	f004 fc58 	bl	8005a10 <HAL_GPIO_WritePin>

    FRAM_WP_PORT_RCC();
 8001160:	2300      	movs	r3, #0
 8001162:	617b      	str	r3, [r7, #20]
 8001164:	4b01      	ldr	r3, [pc, #4]	; (800116c <iopins_ini+0x2bc>)
 8001166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001168:	e00a      	b.n	8001180 <iopins_ini+0x2d0>
 800116a:	bf00      	nop
 800116c:	40023800 	.word	0x40023800
 8001170:	40020c00 	.word	0x40020c00
 8001174:	40020000 	.word	0x40020000
 8001178:	40020800 	.word	0x40020800
 800117c:	40020400 	.word	0x40020400
 8001180:	4a4b      	ldr	r2, [pc, #300]	; (80012b0 <iopins_ini+0x400>)
 8001182:	f043 0304 	orr.w	r3, r3, #4
 8001186:	6313      	str	r3, [r2, #48]	; 0x30
 8001188:	4b49      	ldr	r3, [pc, #292]	; (80012b0 <iopins_ini+0x400>)
 800118a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118c:	f003 0304 	and.w	r3, r3, #4
 8001190:	617b      	str	r3, [r7, #20]
 8001192:	697b      	ldr	r3, [r7, #20]
	GPIO_InitStruct.Pin = FRAM_WP;
 8001194:	2301      	movs	r3, #1
 8001196:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001198:	2301      	movs	r3, #1
 800119a:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119c:	2300      	movs	r3, #0
 800119e:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(FRAM_WP_PORT, &GPIO_InitStruct);
 80011a0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80011a4:	4619      	mov	r1, r3
 80011a6:	4843      	ldr	r0, [pc, #268]	; (80012b4 <iopins_ini+0x404>)
 80011a8:	f004 fa96 	bl	80056d8 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(FRAM_WP_PORT,FRAM_WP,GPIO_PIN_SET);
 80011ac:	2201      	movs	r2, #1
 80011ae:	2101      	movs	r1, #1
 80011b0:	4840      	ldr	r0, [pc, #256]	; (80012b4 <iopins_ini+0x404>)
 80011b2:	f004 fc2d 	bl	8005a10 <HAL_GPIO_WritePin>


    LED_DBG_PORT_RCC();
 80011b6:	2300      	movs	r3, #0
 80011b8:	613b      	str	r3, [r7, #16]
 80011ba:	4b3d      	ldr	r3, [pc, #244]	; (80012b0 <iopins_ini+0x400>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	4a3c      	ldr	r2, [pc, #240]	; (80012b0 <iopins_ini+0x400>)
 80011c0:	f043 0302 	orr.w	r3, r3, #2
 80011c4:	6313      	str	r3, [r2, #48]	; 0x30
 80011c6:	4b3a      	ldr	r3, [pc, #232]	; (80012b0 <iopins_ini+0x400>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	f003 0302 	and.w	r3, r3, #2
 80011ce:	613b      	str	r3, [r7, #16]
 80011d0:	693b      	ldr	r3, [r7, #16]
	GPIO_InitStruct.Pin = LED_DBG_1;
 80011d2:	2308      	movs	r3, #8
 80011d4:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d6:	2301      	movs	r3, #1
 80011d8:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011da:	2300      	movs	r3, #0
 80011dc:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(LED_DBG_PORT, &GPIO_InitStruct);
 80011de:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80011e2:	4619      	mov	r1, r3
 80011e4:	4834      	ldr	r0, [pc, #208]	; (80012b8 <iopins_ini+0x408>)
 80011e6:	f004 fa77 	bl	80056d8 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(LED_DBG_PORT,LED_DBG_1,GPIO_PIN_SET);
 80011ea:	2201      	movs	r2, #1
 80011ec:	2108      	movs	r1, #8
 80011ee:	4832      	ldr	r0, [pc, #200]	; (80012b8 <iopins_ini+0x408>)
 80011f0:	f004 fc0e 	bl	8005a10 <HAL_GPIO_WritePin>


    BUTTON_0_PORT_RCC();
 80011f4:	2300      	movs	r3, #0
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	4b2d      	ldr	r3, [pc, #180]	; (80012b0 <iopins_ini+0x400>)
 80011fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fc:	4a2c      	ldr	r2, [pc, #176]	; (80012b0 <iopins_ini+0x400>)
 80011fe:	f043 0301 	orr.w	r3, r3, #1
 8001202:	6313      	str	r3, [r2, #48]	; 0x30
 8001204:	4b2a      	ldr	r3, [pc, #168]	; (80012b0 <iopins_ini+0x400>)
 8001206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001208:	f003 0301 	and.w	r3, r3, #1
 800120c:	60fb      	str	r3, [r7, #12]
 800120e:	68fb      	ldr	r3, [r7, #12]
	GPIO_InitStruct.Pin = BUTTON_0;
 8001210:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001214:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001216:	2300      	movs	r3, #0
 8001218:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Pull= GPIO_NOPULL;
 800121a:	2300      	movs	r3, #0
 800121c:	657b      	str	r3, [r7, #84]	; 0x54
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121e:	2300      	movs	r3, #0
 8001220:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(BUTTON_0_PORT, &GPIO_InitStruct);
 8001222:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001226:	4619      	mov	r1, r3
 8001228:	4824      	ldr	r0, [pc, #144]	; (80012bc <iopins_ini+0x40c>)
 800122a:	f004 fa55 	bl	80056d8 <HAL_GPIO_Init>

    BUTTON_1_PORT_RCC();
 800122e:	2300      	movs	r3, #0
 8001230:	60bb      	str	r3, [r7, #8]
 8001232:	4b1f      	ldr	r3, [pc, #124]	; (80012b0 <iopins_ini+0x400>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	4a1e      	ldr	r2, [pc, #120]	; (80012b0 <iopins_ini+0x400>)
 8001238:	f043 0304 	orr.w	r3, r3, #4
 800123c:	6313      	str	r3, [r2, #48]	; 0x30
 800123e:	4b1c      	ldr	r3, [pc, #112]	; (80012b0 <iopins_ini+0x400>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	f003 0304 	and.w	r3, r3, #4
 8001246:	60bb      	str	r3, [r7, #8]
 8001248:	68bb      	ldr	r3, [r7, #8]
	GPIO_InitStruct.Pin = BUTTON_1;
 800124a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800124e:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001250:	2300      	movs	r3, #0
 8001252:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Pull= GPIO_NOPULL;
 8001254:	2300      	movs	r3, #0
 8001256:	657b      	str	r3, [r7, #84]	; 0x54
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001258:	2300      	movs	r3, #0
 800125a:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(BUTTON_1_PORT, &GPIO_InitStruct);
 800125c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001260:	4619      	mov	r1, r3
 8001262:	4814      	ldr	r0, [pc, #80]	; (80012b4 <iopins_ini+0x404>)
 8001264:	f004 fa38 	bl	80056d8 <HAL_GPIO_Init>


    TOUCH_RESET_PORT_RCC();
 8001268:	2300      	movs	r3, #0
 800126a:	607b      	str	r3, [r7, #4]
 800126c:	4b10      	ldr	r3, [pc, #64]	; (80012b0 <iopins_ini+0x400>)
 800126e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001270:	4a0f      	ldr	r2, [pc, #60]	; (80012b0 <iopins_ini+0x400>)
 8001272:	f043 0302 	orr.w	r3, r3, #2
 8001276:	6313      	str	r3, [r2, #48]	; 0x30
 8001278:	4b0d      	ldr	r3, [pc, #52]	; (80012b0 <iopins_ini+0x400>)
 800127a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127c:	f003 0302 	and.w	r3, r3, #2
 8001280:	607b      	str	r3, [r7, #4]
 8001282:	687b      	ldr	r3, [r7, #4]
	GPIO_InitStruct.Pin = TOUCH_RESET;
 8001284:	2320      	movs	r3, #32
 8001286:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001288:	2301      	movs	r3, #1
 800128a:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128c:	2300      	movs	r3, #0
 800128e:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(TOUCH_RESET_PORT, &GPIO_InitStruct);
 8001290:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001294:	4619      	mov	r1, r3
 8001296:	4808      	ldr	r0, [pc, #32]	; (80012b8 <iopins_ini+0x408>)
 8001298:	f004 fa1e 	bl	80056d8 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(TOUCH_RESET_PORT,TOUCH_RESET,GPIO_PIN_SET);
 800129c:	2201      	movs	r2, #1
 800129e:	2120      	movs	r1, #32
 80012a0:	4805      	ldr	r0, [pc, #20]	; (80012b8 <iopins_ini+0x408>)
 80012a2:	f004 fbb5 	bl	8005a10 <HAL_GPIO_WritePin>
}
 80012a6:	bf00      	nop
 80012a8:	3760      	adds	r7, #96	; 0x60
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40023800 	.word	0x40023800
 80012b4:	40020800 	.word	0x40020800
 80012b8:	40020400 	.word	0x40020400
 80012bc:	40020000 	.word	0x40020000

080012c0 <initialize_ili9488>:
static void initialize_ili9488()
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af02      	add	r7, sp, #8
	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_RESET);
 80012c6:	2200      	movs	r2, #0
 80012c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012cc:	4838      	ldr	r0, [pc, #224]	; (80013b0 <initialize_ili9488+0xf0>)
 80012ce:	f004 fb9f 	bl	8005a10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_RESET);
 80012d2:	2200      	movs	r2, #0
 80012d4:	2180      	movs	r1, #128	; 0x80
 80012d6:	4836      	ldr	r0, [pc, #216]	; (80013b0 <initialize_ili9488+0xf0>)
 80012d8:	f004 fb9a 	bl	8005a10 <HAL_GPIO_WritePin>
	TFT_REG=0x0011;
 80012dc:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80012e0:	2211      	movs	r2, #17
 80012e2:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_SET);
 80012e4:	2201      	movs	r2, #1
 80012e6:	2180      	movs	r1, #128	; 0x80
 80012e8:	4831      	ldr	r0, [pc, #196]	; (80013b0 <initialize_ili9488+0xf0>)
 80012ea:	f004 fb91 	bl	8005a10 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_RESET);
 80012ee:	2200      	movs	r2, #0
 80012f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012f4:	482e      	ldr	r0, [pc, #184]	; (80013b0 <initialize_ili9488+0xf0>)
 80012f6:	f004 fb8b 	bl	8005a10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS, GPIO_PIN_RESET);
 80012fa:	2200      	movs	r2, #0
 80012fc:	2180      	movs	r1, #128	; 0x80
 80012fe:	482c      	ldr	r0, [pc, #176]	; (80013b0 <initialize_ili9488+0xf0>)
 8001300:	f004 fb86 	bl	8005a10 <HAL_GPIO_WritePin>
	TFT_REG=0x0029;
 8001304:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8001308:	2229      	movs	r2, #41	; 0x29
 800130a:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS, GPIO_PIN_SET);
 800130c:	2201      	movs	r2, #1
 800130e:	2180      	movs	r1, #128	; 0x80
 8001310:	4827      	ldr	r0, [pc, #156]	; (80013b0 <initialize_ili9488+0xf0>)
 8001312:	f004 fb7d 	bl	8005a10 <HAL_GPIO_WritePin>


	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_RESET);
 8001316:	2200      	movs	r2, #0
 8001318:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800131c:	4824      	ldr	r0, [pc, #144]	; (80013b0 <initialize_ili9488+0xf0>)
 800131e:	f004 fb77 	bl	8005a10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_RESET);
 8001322:	2200      	movs	r2, #0
 8001324:	2180      	movs	r1, #128	; 0x80
 8001326:	4822      	ldr	r0, [pc, #136]	; (80013b0 <initialize_ili9488+0xf0>)
 8001328:	f004 fb72 	bl	8005a10 <HAL_GPIO_WritePin>
	TFT_REG=0x003A;
 800132c:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8001330:	223a      	movs	r2, #58	; 0x3a
 8001332:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_SET);
 8001334:	2201      	movs	r2, #1
 8001336:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800133a:	481d      	ldr	r0, [pc, #116]	; (80013b0 <initialize_ili9488+0xf0>)
 800133c:	f004 fb68 	bl	8005a10 <HAL_GPIO_WritePin>
	TFT_REG=0x0055;
 8001340:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8001344:	2255      	movs	r2, #85	; 0x55
 8001346:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS, GPIO_PIN_RESET);
 8001348:	2200      	movs	r2, #0
 800134a:	2180      	movs	r1, #128	; 0x80
 800134c:	4818      	ldr	r0, [pc, #96]	; (80013b0 <initialize_ili9488+0xf0>)
 800134e:	f004 fb5f 	bl	8005a10 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_RESET);
 8001352:	2200      	movs	r2, #0
 8001354:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001358:	4815      	ldr	r0, [pc, #84]	; (80013b0 <initialize_ili9488+0xf0>)
 800135a:	f004 fb59 	bl	8005a10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_RESET);
 800135e:	2200      	movs	r2, #0
 8001360:	2180      	movs	r1, #128	; 0x80
 8001362:	4813      	ldr	r0, [pc, #76]	; (80013b0 <initialize_ili9488+0xf0>)
 8001364:	f004 fb54 	bl	8005a10 <HAL_GPIO_WritePin>
	TFT_REG=0x0036;
 8001368:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800136c:	2236      	movs	r2, #54	; 0x36
 800136e:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_SET);
 8001370:	2201      	movs	r2, #1
 8001372:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001376:	480e      	ldr	r0, [pc, #56]	; (80013b0 <initialize_ili9488+0xf0>)
 8001378:	f004 fb4a 	bl	8005a10 <HAL_GPIO_WritePin>
	TFT_REG=0x00E8;
 800137c:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8001380:	22e8      	movs	r2, #232	; 0xe8
 8001382:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_RESET);
 8001384:	2200      	movs	r2, #0
 8001386:	2180      	movs	r1, #128	; 0x80
 8001388:	4809      	ldr	r0, [pc, #36]	; (80013b0 <initialize_ili9488+0xf0>)
 800138a:	f004 fb41 	bl	8005a10 <HAL_GPIO_WritePin>

	delay_ms(100);
 800138e:	2064      	movs	r0, #100	; 0x64
 8001390:	f000 f810 	bl	80013b4 <delay_ms>
	LCD_fillRect(0,0,LCD_PIXEL_WIDTH,LCD_PIXEL_HEIGHT,ORANGE);
 8001394:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8001398:	9300      	str	r3, [sp, #0]
 800139a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800139e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80013a2:	2100      	movs	r1, #0
 80013a4:	2000      	movs	r0, #0
 80013a6:	f7ff fc03 	bl	8000bb0 <LCD_fillRect>
}
 80013aa:	bf00      	nop
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	40020c00 	.word	0x40020c00

080013b4 <delay_ms>:
	{
		TFT_REG=data[i];
	}
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_SET);
}
static void delay_ms(__IO uint32_t nCount1) {
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
	__IO uint32_t nCount=nCount1*23666;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f645 4272 	movw	r2, #23666	; 0x5c72
 80013c2:	fb02 f303 	mul.w	r3, r2, r3
 80013c6:	60fb      	str	r3, [r7, #12]
	while(nCount--) {
 80013c8:	bf00      	nop
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	1e5a      	subs	r2, r3, #1
 80013ce:	60fa      	str	r2, [r7, #12]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d1fa      	bne.n	80013ca <delay_ms+0x16>
  }
}
 80013d4:	bf00      	nop
 80013d6:	bf00      	nop
 80013d8:	3714      	adds	r7, #20
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
	...

080013e4 <touch_init>:
/*----------------------------------------------Public function-----------------------------------------------------*/
// Initialize touch screen
void set_page(uint8_t page){active_page = page;}
void set_layer(uint8_t layer){active_layer = layer;}
void touch_init(I2C_HandleTypeDef def)
{
 80013e4:	b084      	sub	sp, #16
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b084      	sub	sp, #16
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	f107 0c18 	add.w	ip, r7, #24
 80013f0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	hi2c1_touch = def;
 80013f4:	4b66      	ldr	r3, [pc, #408]	; (8001590 <touch_init+0x1ac>)
 80013f6:	4618      	mov	r0, r3
 80013f8:	f107 0318 	add.w	r3, r7, #24
 80013fc:	2254      	movs	r2, #84	; 0x54
 80013fe:	4619      	mov	r1, r3
 8001400:	f007 ffb6 	bl	8009370 <memcpy>
	touch_write_register(0x0E,0xC000);
 8001404:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001408:	200e      	movs	r0, #14
 800140a:	f000 faa3 	bl	8001954 <touch_write_register>
	touch_write_control(0x80);
 800140e:	2080      	movs	r0, #128	; 0x80
 8001410:	f000 fa88 	bl	8001924 <touch_write_control>
	for(int p = 0;p <MAX_NUM_PAGES; p++)
 8001414:	2300      	movs	r3, #0
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	e093      	b.n	8001542 <touch_init+0x15e>
	{
		for(int l = 0;l <MAX_NUM_LAYERS; l++)
 800141a:	2300      	movs	r3, #0
 800141c:	60bb      	str	r3, [r7, #8]
 800141e:	e089      	b.n	8001534 <touch_init+0x150>
		{

			for(int i = 0;i <MAX_NUM_ELEMENTS; i++)
 8001420:	2300      	movs	r3, #0
 8001422:	607b      	str	r3, [r7, #4]
 8001424:	e07f      	b.n	8001526 <touch_init+0x142>
			{
				touch_elements_register[p][l][i].x = 0;
 8001426:	485b      	ldr	r0, [pc, #364]	; (8001594 <touch_init+0x1b0>)
 8001428:	68ba      	ldr	r2, [r7, #8]
 800142a:	68f9      	ldr	r1, [r7, #12]
 800142c:	4613      	mov	r3, r2
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	4413      	add	r3, r2
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	2264      	movs	r2, #100	; 0x64
 8001436:	fb02 f201 	mul.w	r2, r2, r1
 800143a:	441a      	add	r2, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	4413      	add	r3, r2
 8001440:	011b      	lsls	r3, r3, #4
 8001442:	4403      	add	r3, r0
 8001444:	2200      	movs	r2, #0
 8001446:	801a      	strh	r2, [r3, #0]
				touch_elements_register[p][l][i].x1 = 0;
 8001448:	4852      	ldr	r0, [pc, #328]	; (8001594 <touch_init+0x1b0>)
 800144a:	68ba      	ldr	r2, [r7, #8]
 800144c:	68f9      	ldr	r1, [r7, #12]
 800144e:	4613      	mov	r3, r2
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	4413      	add	r3, r2
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	2264      	movs	r2, #100	; 0x64
 8001458:	fb02 f201 	mul.w	r2, r2, r1
 800145c:	441a      	add	r2, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4413      	add	r3, r2
 8001462:	011b      	lsls	r3, r3, #4
 8001464:	4403      	add	r3, r0
 8001466:	3304      	adds	r3, #4
 8001468:	2200      	movs	r2, #0
 800146a:	801a      	strh	r2, [r3, #0]
				touch_elements_register[p][l][i].y = 0;
 800146c:	4849      	ldr	r0, [pc, #292]	; (8001594 <touch_init+0x1b0>)
 800146e:	68ba      	ldr	r2, [r7, #8]
 8001470:	68f9      	ldr	r1, [r7, #12]
 8001472:	4613      	mov	r3, r2
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	4413      	add	r3, r2
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	2264      	movs	r2, #100	; 0x64
 800147c:	fb02 f201 	mul.w	r2, r2, r1
 8001480:	441a      	add	r2, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4413      	add	r3, r2
 8001486:	011b      	lsls	r3, r3, #4
 8001488:	4403      	add	r3, r0
 800148a:	3302      	adds	r3, #2
 800148c:	2200      	movs	r2, #0
 800148e:	801a      	strh	r2, [r3, #0]
				touch_elements_register[p][l][i].y1 = 0;
 8001490:	4840      	ldr	r0, [pc, #256]	; (8001594 <touch_init+0x1b0>)
 8001492:	68ba      	ldr	r2, [r7, #8]
 8001494:	68f9      	ldr	r1, [r7, #12]
 8001496:	4613      	mov	r3, r2
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	4413      	add	r3, r2
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	2264      	movs	r2, #100	; 0x64
 80014a0:	fb02 f201 	mul.w	r2, r2, r1
 80014a4:	441a      	add	r2, r3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4413      	add	r3, r2
 80014aa:	011b      	lsls	r3, r3, #4
 80014ac:	4403      	add	r3, r0
 80014ae:	3306      	adds	r3, #6
 80014b0:	2200      	movs	r2, #0
 80014b2:	801a      	strh	r2, [r3, #0]
				touch_elements_register[p][l][i].element_type = 0;
 80014b4:	4837      	ldr	r0, [pc, #220]	; (8001594 <touch_init+0x1b0>)
 80014b6:	68ba      	ldr	r2, [r7, #8]
 80014b8:	68f9      	ldr	r1, [r7, #12]
 80014ba:	4613      	mov	r3, r2
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	4413      	add	r3, r2
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	2264      	movs	r2, #100	; 0x64
 80014c4:	fb02 f201 	mul.w	r2, r2, r1
 80014c8:	441a      	add	r2, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4413      	add	r3, r2
 80014ce:	011b      	lsls	r3, r3, #4
 80014d0:	4403      	add	r3, r0
 80014d2:	3308      	adds	r3, #8
 80014d4:	2200      	movs	r2, #0
 80014d6:	701a      	strb	r2, [r3, #0]
				touch_elements_register[p][l][i].isAlive = 0;
 80014d8:	482e      	ldr	r0, [pc, #184]	; (8001594 <touch_init+0x1b0>)
 80014da:	68ba      	ldr	r2, [r7, #8]
 80014dc:	68f9      	ldr	r1, [r7, #12]
 80014de:	4613      	mov	r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	4413      	add	r3, r2
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	2264      	movs	r2, #100	; 0x64
 80014e8:	fb02 f201 	mul.w	r2, r2, r1
 80014ec:	441a      	add	r2, r3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4413      	add	r3, r2
 80014f2:	011b      	lsls	r3, r3, #4
 80014f4:	4403      	add	r3, r0
 80014f6:	3309      	adds	r3, #9
 80014f8:	2200      	movs	r2, #0
 80014fa:	701a      	strb	r2, [r3, #0]
				touch_elements_register[p][l][i].element_pointer = 0;
 80014fc:	4825      	ldr	r0, [pc, #148]	; (8001594 <touch_init+0x1b0>)
 80014fe:	68ba      	ldr	r2, [r7, #8]
 8001500:	68f9      	ldr	r1, [r7, #12]
 8001502:	4613      	mov	r3, r2
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	4413      	add	r3, r2
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	2264      	movs	r2, #100	; 0x64
 800150c:	fb02 f201 	mul.w	r2, r2, r1
 8001510:	441a      	add	r2, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4413      	add	r3, r2
 8001516:	011b      	lsls	r3, r3, #4
 8001518:	4403      	add	r3, r0
 800151a:	330c      	adds	r3, #12
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
			for(int i = 0;i <MAX_NUM_ELEMENTS; i++)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	3301      	adds	r3, #1
 8001524:	607b      	str	r3, [r7, #4]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2b13      	cmp	r3, #19
 800152a:	f77f af7c 	ble.w	8001426 <touch_init+0x42>
		for(int l = 0;l <MAX_NUM_LAYERS; l++)
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	3301      	adds	r3, #1
 8001532:	60bb      	str	r3, [r7, #8]
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	2b04      	cmp	r3, #4
 8001538:	f77f af72 	ble.w	8001420 <touch_init+0x3c>
	for(int p = 0;p <MAX_NUM_PAGES; p++)
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	3301      	adds	r3, #1
 8001540:	60fb      	str	r3, [r7, #12]
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	2b04      	cmp	r3, #4
 8001546:	f77f af68 	ble.w	800141a <touch_init+0x36>
			}
		}
	}
	pressed_element.x = 0;
 800154a:	4b13      	ldr	r3, [pc, #76]	; (8001598 <touch_init+0x1b4>)
 800154c:	2200      	movs	r2, #0
 800154e:	801a      	strh	r2, [r3, #0]
	pressed_element.x1 = 0;
 8001550:	4b11      	ldr	r3, [pc, #68]	; (8001598 <touch_init+0x1b4>)
 8001552:	2200      	movs	r2, #0
 8001554:	809a      	strh	r2, [r3, #4]
	pressed_element.y = 0;
 8001556:	4b10      	ldr	r3, [pc, #64]	; (8001598 <touch_init+0x1b4>)
 8001558:	2200      	movs	r2, #0
 800155a:	805a      	strh	r2, [r3, #2]
	pressed_element.y1 = 0;
 800155c:	4b0e      	ldr	r3, [pc, #56]	; (8001598 <touch_init+0x1b4>)
 800155e:	2200      	movs	r2, #0
 8001560:	80da      	strh	r2, [r3, #6]
	pressed_element.element_type = 0;
 8001562:	4b0d      	ldr	r3, [pc, #52]	; (8001598 <touch_init+0x1b4>)
 8001564:	2200      	movs	r2, #0
 8001566:	721a      	strb	r2, [r3, #8]
	pressed_element.element_pointer = 0;
 8001568:	4b0b      	ldr	r3, [pc, #44]	; (8001598 <touch_init+0x1b4>)
 800156a:	2200      	movs	r2, #0
 800156c:	60da      	str	r2, [r3, #12]
	pressed_element.isAlive = 0;
 800156e:	4b0a      	ldr	r3, [pc, #40]	; (8001598 <touch_init+0x1b4>)
 8001570:	2200      	movs	r2, #0
 8001572:	725a      	strb	r2, [r3, #9]
	active_layer = 0;
 8001574:	4b09      	ldr	r3, [pc, #36]	; (800159c <touch_init+0x1b8>)
 8001576:	2200      	movs	r2, #0
 8001578:	701a      	strb	r2, [r3, #0]
	active_page = 0;
 800157a:	4b09      	ldr	r3, [pc, #36]	; (80015a0 <touch_init+0x1bc>)
 800157c:	2200      	movs	r2, #0
 800157e:	701a      	strb	r2, [r3, #0]
}
 8001580:	bf00      	nop
 8001582:	3710      	adds	r7, #16
 8001584:	46bd      	mov	sp, r7
 8001586:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800158a:	b004      	add	sp, #16
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	200000ec 	.word	0x200000ec
 8001594:	20000150 	.word	0x20000150
 8001598:	20000140 	.word	0x20000140
 800159c:	200000ea 	.word	0x200000ea
 80015a0:	200000d8 	.word	0x200000d8

080015a4 <touch_reset>:
// Reset touch screen IC module
void touch_reset()
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
 	HAL_GPIO_WritePin(TOUCH_RESET_PORT,TOUCH_RESET,GPIO_PIN_RESET);
 80015a8:	2200      	movs	r2, #0
 80015aa:	2120      	movs	r1, #32
 80015ac:	4807      	ldr	r0, [pc, #28]	; (80015cc <touch_reset+0x28>)
 80015ae:	f004 fa2f 	bl	8005a10 <HAL_GPIO_WritePin>
 	delay_ms(10);
 80015b2:	200a      	movs	r0, #10
 80015b4:	f000 fade 	bl	8001b74 <delay_ms>
 	HAL_GPIO_WritePin(TOUCH_RESET_PORT,TOUCH_RESET,GPIO_PIN_SET);
 80015b8:	2201      	movs	r2, #1
 80015ba:	2120      	movs	r1, #32
 80015bc:	4803      	ldr	r0, [pc, #12]	; (80015cc <touch_reset+0x28>)
 80015be:	f004 fa27 	bl	8005a10 <HAL_GPIO_WritePin>
 	delay_ms(50);
 80015c2:	2032      	movs	r0, #50	; 0x32
 80015c4:	f000 fad6 	bl	8001b74 <delay_ms>
}
 80015c8:	bf00      	nop
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40020400 	.word	0x40020400

080015d0 <touch_periodic_process>:
{
	return pressed_element;
}
// After each call identifies if the touch was pressed and if TRUEm then identify the element
void touch_periodic_process()
{
 80015d0:	b598      	push	{r3, r4, r7, lr}
 80015d2:	af00      	add	r7, sp, #0

	if(touch.pressed==1)
 80015d4:	4b24      	ldr	r3, [pc, #144]	; (8001668 <touch_periodic_process+0x98>)
 80015d6:	891b      	ldrh	r3, [r3, #8]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d142      	bne.n	8001662 <touch_periodic_process+0x92>
	{
		touch.pressed=0;
 80015dc:	4b22      	ldr	r3, [pc, #136]	; (8001668 <touch_periodic_process+0x98>)
 80015de:	2200      	movs	r2, #0
 80015e0:	811a      	strh	r2, [r3, #8]

		touch.x=touch_read(0x00);
 80015e2:	2000      	movs	r0, #0
 80015e4:	f000 f9e2 	bl	80019ac <touch_read>
 80015e8:	4603      	mov	r3, r0
 80015ea:	461a      	mov	r2, r3
 80015ec:	4b1e      	ldr	r3, [pc, #120]	; (8001668 <touch_periodic_process+0x98>)
 80015ee:	801a      	strh	r2, [r3, #0]
		touch.x1=touch_read(0x01);
 80015f0:	2001      	movs	r0, #1
 80015f2:	f000 f9db 	bl	80019ac <touch_read>
 80015f6:	4603      	mov	r3, r0
 80015f8:	461a      	mov	r2, r3
 80015fa:	4b1b      	ldr	r3, [pc, #108]	; (8001668 <touch_periodic_process+0x98>)
 80015fc:	809a      	strh	r2, [r3, #4]
		touch.y=touch_read(0x02);
 80015fe:	2002      	movs	r0, #2
 8001600:	f000 f9d4 	bl	80019ac <touch_read>
 8001604:	4603      	mov	r3, r0
 8001606:	461a      	mov	r2, r3
 8001608:	4b17      	ldr	r3, [pc, #92]	; (8001668 <touch_periodic_process+0x98>)
 800160a:	805a      	strh	r2, [r3, #2]
		touch.y1=touch_read(0x03);
 800160c:	2003      	movs	r0, #3
 800160e:	f000 f9cd 	bl	80019ac <touch_read>
 8001612:	4603      	mov	r3, r0
 8001614:	461a      	mov	r2, r3
 8001616:	4b14      	ldr	r3, [pc, #80]	; (8001668 <touch_periodic_process+0x98>)
 8001618:	80da      	strh	r2, [r3, #6]
		printf("TOUCH x %d\n\r", touch.x);
		printf("TOUCH x1 %d\n\r", touch.x1);
		printf("TOUCH y %d\n\r", touch.y);
		printf("TOUCH y1 %d\n\r", touch.y1);
#endif
		touch.y=touch.x1;
 800161a:	4b13      	ldr	r3, [pc, #76]	; (8001668 <touch_periodic_process+0x98>)
 800161c:	889a      	ldrh	r2, [r3, #4]
 800161e:	4b12      	ldr	r3, [pc, #72]	; (8001668 <touch_periodic_process+0x98>)
 8001620:	805a      	strh	r2, [r3, #2]
		touch.x=1024-touch.y1;
 8001622:	4b11      	ldr	r3, [pc, #68]	; (8001668 <touch_periodic_process+0x98>)
 8001624:	88db      	ldrh	r3, [r3, #6]
 8001626:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 800162a:	b29a      	uxth	r2, r3
 800162c:	4b0e      	ldr	r3, [pc, #56]	; (8001668 <touch_periodic_process+0x98>)
 800162e:	801a      	strh	r2, [r3, #0]
#if DEBUG_TOUCH == 1
		printf("TOUCH Y reverted %d\n\r", touch.y);
		printf("TOUCH X reverted %d\n\r", touch.x);
#endif
		if(validate_touch_coordinates()==1)
 8001630:	f000 f9ee 	bl	8001a10 <validate_touch_coordinates>
 8001634:	4603      	mov	r3, r0
 8001636:	2b01      	cmp	r3, #1
 8001638:	d110      	bne.n	800165c <touch_periodic_process+0x8c>
		{
#if DEBUG_TOUCH == 1
			printf("TOUCH = X: %d,Y: %d\n\r",touch.x,touch.y);
#endif
			 touch_get_pressed_element(touch);
 800163a:	4b0b      	ldr	r3, [pc, #44]	; (8001668 <touch_periodic_process+0x98>)
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	2000      	movs	r0, #0
 8001640:	4610      	mov	r0, r2
 8001642:	685a      	ldr	r2, [r3, #4]
 8001644:	2100      	movs	r1, #0
 8001646:	4611      	mov	r1, r2
 8001648:	689a      	ldr	r2, [r3, #8]
 800164a:	2400      	movs	r4, #0
 800164c:	4614      	mov	r4, r2
 800164e:	899a      	ldrh	r2, [r3, #12]
 8001650:	2300      	movs	r3, #0
 8001652:	f362 030f 	bfi	r3, r2, #0, #16
 8001656:	4622      	mov	r2, r4
 8001658:	f000 f808 	bl	800166c <touch_get_pressed_element>
		}
		touch_write_control(0x80);
 800165c:	2080      	movs	r0, #128	; 0x80
 800165e:	f000 f961 	bl	8001924 <touch_write_control>
	}
}
 8001662:	bf00      	nop
 8001664:	bd98      	pop	{r3, r4, r7, pc}
 8001666:	bf00      	nop
 8001668:	200000dc 	.word	0x200000dc

0800166c <touch_get_pressed_element>:
// External interrupt callback function. Take an action when touchscreen was pressed
static void touch_get_pressed_element()
{
 800166c:	b590      	push	{r4, r7, lr}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
	uint16_t x0,x1,y1,y0;
	for(int i = 0; i<MAX_NUM_ELEMENTS;i++)
 8001672:	2300      	movs	r3, #0
 8001674:	607b      	str	r3, [r7, #4]
 8001676:	e07d      	b.n	8001774 <touch_get_pressed_element+0x108>
	{

		if((touch.x >= touch_elements_register[active_page][active_layer][i].x )
 8001678:	4b42      	ldr	r3, [pc, #264]	; (8001784 <touch_get_pressed_element+0x118>)
 800167a:	881a      	ldrh	r2, [r3, #0]
 800167c:	4b42      	ldr	r3, [pc, #264]	; (8001788 <touch_get_pressed_element+0x11c>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	461c      	mov	r4, r3
 8001682:	4b42      	ldr	r3, [pc, #264]	; (800178c <touch_get_pressed_element+0x120>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	4619      	mov	r1, r3
 8001688:	4841      	ldr	r0, [pc, #260]	; (8001790 <touch_get_pressed_element+0x124>)
 800168a:	460b      	mov	r3, r1
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	440b      	add	r3, r1
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	2164      	movs	r1, #100	; 0x64
 8001694:	fb01 f104 	mul.w	r1, r1, r4
 8001698:	4419      	add	r1, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	440b      	add	r3, r1
 800169e:	011b      	lsls	r3, r3, #4
 80016a0:	4403      	add	r3, r0
 80016a2:	881b      	ldrh	r3, [r3, #0]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d362      	bcc.n	800176e <touch_get_pressed_element+0x102>
		&& (touch.x <= touch_elements_register[active_page][active_layer][i].x1)
 80016a8:	4b36      	ldr	r3, [pc, #216]	; (8001784 <touch_get_pressed_element+0x118>)
 80016aa:	881a      	ldrh	r2, [r3, #0]
 80016ac:	4b36      	ldr	r3, [pc, #216]	; (8001788 <touch_get_pressed_element+0x11c>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	461c      	mov	r4, r3
 80016b2:	4b36      	ldr	r3, [pc, #216]	; (800178c <touch_get_pressed_element+0x120>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	4619      	mov	r1, r3
 80016b8:	4835      	ldr	r0, [pc, #212]	; (8001790 <touch_get_pressed_element+0x124>)
 80016ba:	460b      	mov	r3, r1
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	440b      	add	r3, r1
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	2164      	movs	r1, #100	; 0x64
 80016c4:	fb01 f104 	mul.w	r1, r1, r4
 80016c8:	4419      	add	r1, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	440b      	add	r3, r1
 80016ce:	011b      	lsls	r3, r3, #4
 80016d0:	4403      	add	r3, r0
 80016d2:	3304      	adds	r3, #4
 80016d4:	881b      	ldrh	r3, [r3, #0]
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d849      	bhi.n	800176e <touch_get_pressed_element+0x102>
		&&(touch.y1 >= touch_elements_register[active_page][active_layer][i].y)
 80016da:	4b2a      	ldr	r3, [pc, #168]	; (8001784 <touch_get_pressed_element+0x118>)
 80016dc:	88da      	ldrh	r2, [r3, #6]
 80016de:	4b2a      	ldr	r3, [pc, #168]	; (8001788 <touch_get_pressed_element+0x11c>)
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	461c      	mov	r4, r3
 80016e4:	4b29      	ldr	r3, [pc, #164]	; (800178c <touch_get_pressed_element+0x120>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	4619      	mov	r1, r3
 80016ea:	4829      	ldr	r0, [pc, #164]	; (8001790 <touch_get_pressed_element+0x124>)
 80016ec:	460b      	mov	r3, r1
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	440b      	add	r3, r1
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	2164      	movs	r1, #100	; 0x64
 80016f6:	fb01 f104 	mul.w	r1, r1, r4
 80016fa:	4419      	add	r1, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	440b      	add	r3, r1
 8001700:	011b      	lsls	r3, r3, #4
 8001702:	4403      	add	r3, r0
 8001704:	3302      	adds	r3, #2
 8001706:	881b      	ldrh	r3, [r3, #0]
 8001708:	429a      	cmp	r2, r3
 800170a:	d330      	bcc.n	800176e <touch_get_pressed_element+0x102>
		&&(touch.y <= touch_elements_register[active_page][active_layer][i].y1))
 800170c:	4b1d      	ldr	r3, [pc, #116]	; (8001784 <touch_get_pressed_element+0x118>)
 800170e:	885a      	ldrh	r2, [r3, #2]
 8001710:	4b1d      	ldr	r3, [pc, #116]	; (8001788 <touch_get_pressed_element+0x11c>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	461c      	mov	r4, r3
 8001716:	4b1d      	ldr	r3, [pc, #116]	; (800178c <touch_get_pressed_element+0x120>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	4619      	mov	r1, r3
 800171c:	481c      	ldr	r0, [pc, #112]	; (8001790 <touch_get_pressed_element+0x124>)
 800171e:	460b      	mov	r3, r1
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	440b      	add	r3, r1
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	2164      	movs	r1, #100	; 0x64
 8001728:	fb01 f104 	mul.w	r1, r1, r4
 800172c:	4419      	add	r1, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	440b      	add	r3, r1
 8001732:	011b      	lsls	r3, r3, #4
 8001734:	4403      	add	r3, r0
 8001736:	3306      	adds	r3, #6
 8001738:	881b      	ldrh	r3, [r3, #0]
 800173a:	429a      	cmp	r2, r3
 800173c:	d817      	bhi.n	800176e <touch_get_pressed_element+0x102>
			x1 = touch_elements_register[active_page][active_layer][i].x1;
			y0 = touch_elements_register[active_page][active_layer][i].y;
			y1 = touch_elements_register[active_page][active_layer][i].y1;
			printf(" GETTING PRESSED ELEMENT \n\r X: %d\n\r X1: %d\n\r Y: %d\n\r Y1: %d\n\r",x0,x1,y0,y1);
#endif
			memcpy(&pressed_element,&touch_elements_register[active_page][active_layer][i],sizeof(struct element_t));
 800173e:	4b12      	ldr	r3, [pc, #72]	; (8001788 <touch_get_pressed_element+0x11c>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	4619      	mov	r1, r3
 8001744:	4b11      	ldr	r3, [pc, #68]	; (800178c <touch_get_pressed_element+0x120>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	461a      	mov	r2, r3
 800174a:	4613      	mov	r3, r2
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	4413      	add	r3, r2
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	2264      	movs	r2, #100	; 0x64
 8001754:	fb02 f201 	mul.w	r2, r2, r1
 8001758:	441a      	add	r2, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4413      	add	r3, r2
 800175e:	011b      	lsls	r3, r3, #4
 8001760:	4a0b      	ldr	r2, [pc, #44]	; (8001790 <touch_get_pressed_element+0x124>)
 8001762:	4413      	add	r3, r2
 8001764:	2210      	movs	r2, #16
 8001766:	4619      	mov	r1, r3
 8001768:	480a      	ldr	r0, [pc, #40]	; (8001794 <touch_get_pressed_element+0x128>)
 800176a:	f007 fe01 	bl	8009370 <memcpy>
	for(int i = 0; i<MAX_NUM_ELEMENTS;i++)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	3301      	adds	r3, #1
 8001772:	607b      	str	r3, [r7, #4]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2b13      	cmp	r3, #19
 8001778:	f77f af7e 	ble.w	8001678 <touch_get_pressed_element+0xc>

#endif
		}
	}

	return touch_elements_register[-1];
 800177c:	bf00      	nop
}
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	bd90      	pop	{r4, r7, pc}
 8001784:	200000dc 	.word	0x200000dc
 8001788:	200000d8 	.word	0x200000d8
 800178c:	200000ea 	.word	0x200000ea
 8001790:	20000150 	.word	0x20000150
 8001794:	20000140 	.word	0x20000140

08001798 <touch_register_element>:
// Register element to the touch elements array.
uint8_t touch_register_element(uint8_t page,uint8_t layer,uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1,uint16_t element_type, uint32_t element_pointer)
{
 8001798:	b490      	push	{r4, r7}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	4604      	mov	r4, r0
 80017a0:	4608      	mov	r0, r1
 80017a2:	4611      	mov	r1, r2
 80017a4:	461a      	mov	r2, r3
 80017a6:	4623      	mov	r3, r4
 80017a8:	71fb      	strb	r3, [r7, #7]
 80017aa:	4603      	mov	r3, r0
 80017ac:	71bb      	strb	r3, [r7, #6]
 80017ae:	460b      	mov	r3, r1
 80017b0:	80bb      	strh	r3, [r7, #4]
 80017b2:	4613      	mov	r3, r2
 80017b4:	807b      	strh	r3, [r7, #2]
	for(int i = 0;i<MAX_NUM_ELEMENTS;i++)
 80017b6:	2300      	movs	r3, #0
 80017b8:	60fb      	str	r3, [r7, #12]
 80017ba:	e097      	b.n	80018ec <touch_register_element+0x154>
	{
		if(touch_elements_register[page][layer][i].isAlive == 0)
 80017bc:	79f9      	ldrb	r1, [r7, #7]
 80017be:	79ba      	ldrb	r2, [r7, #6]
 80017c0:	484f      	ldr	r0, [pc, #316]	; (8001900 <touch_register_element+0x168>)
 80017c2:	4613      	mov	r3, r2
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	4413      	add	r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	2264      	movs	r2, #100	; 0x64
 80017cc:	fb02 f201 	mul.w	r2, r2, r1
 80017d0:	441a      	add	r2, r3
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	4413      	add	r3, r2
 80017d6:	011b      	lsls	r3, r3, #4
 80017d8:	4403      	add	r3, r0
 80017da:	3309      	adds	r3, #9
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	f040 8081 	bne.w	80018e6 <touch_register_element+0x14e>
		{
			touch_elements_register[page][layer][i].x = x0;
 80017e4:	79f9      	ldrb	r1, [r7, #7]
 80017e6:	79ba      	ldrb	r2, [r7, #6]
 80017e8:	4845      	ldr	r0, [pc, #276]	; (8001900 <touch_register_element+0x168>)
 80017ea:	4613      	mov	r3, r2
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	4413      	add	r3, r2
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	2264      	movs	r2, #100	; 0x64
 80017f4:	fb02 f201 	mul.w	r2, r2, r1
 80017f8:	441a      	add	r2, r3
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	4413      	add	r3, r2
 80017fe:	011b      	lsls	r3, r3, #4
 8001800:	4403      	add	r3, r0
 8001802:	88ba      	ldrh	r2, [r7, #4]
 8001804:	801a      	strh	r2, [r3, #0]
			touch_elements_register[page][layer][i].x1 =x1;
 8001806:	79f9      	ldrb	r1, [r7, #7]
 8001808:	79ba      	ldrb	r2, [r7, #6]
 800180a:	483d      	ldr	r0, [pc, #244]	; (8001900 <touch_register_element+0x168>)
 800180c:	4613      	mov	r3, r2
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	4413      	add	r3, r2
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	2264      	movs	r2, #100	; 0x64
 8001816:	fb02 f201 	mul.w	r2, r2, r1
 800181a:	441a      	add	r2, r3
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	4413      	add	r3, r2
 8001820:	011b      	lsls	r3, r3, #4
 8001822:	4403      	add	r3, r0
 8001824:	3304      	adds	r3, #4
 8001826:	8b3a      	ldrh	r2, [r7, #24]
 8001828:	801a      	strh	r2, [r3, #0]
			touch_elements_register[page][layer][i].y =y0;
 800182a:	79f9      	ldrb	r1, [r7, #7]
 800182c:	79ba      	ldrb	r2, [r7, #6]
 800182e:	4834      	ldr	r0, [pc, #208]	; (8001900 <touch_register_element+0x168>)
 8001830:	4613      	mov	r3, r2
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	4413      	add	r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	2264      	movs	r2, #100	; 0x64
 800183a:	fb02 f201 	mul.w	r2, r2, r1
 800183e:	441a      	add	r2, r3
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	4413      	add	r3, r2
 8001844:	011b      	lsls	r3, r3, #4
 8001846:	4403      	add	r3, r0
 8001848:	3302      	adds	r3, #2
 800184a:	887a      	ldrh	r2, [r7, #2]
 800184c:	801a      	strh	r2, [r3, #0]
			touch_elements_register[page][layer][i].y1 =y1;
 800184e:	79f9      	ldrb	r1, [r7, #7]
 8001850:	79ba      	ldrb	r2, [r7, #6]
 8001852:	482b      	ldr	r0, [pc, #172]	; (8001900 <touch_register_element+0x168>)
 8001854:	4613      	mov	r3, r2
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	4413      	add	r3, r2
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	2264      	movs	r2, #100	; 0x64
 800185e:	fb02 f201 	mul.w	r2, r2, r1
 8001862:	441a      	add	r2, r3
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	4413      	add	r3, r2
 8001868:	011b      	lsls	r3, r3, #4
 800186a:	4403      	add	r3, r0
 800186c:	3306      	adds	r3, #6
 800186e:	8bba      	ldrh	r2, [r7, #28]
 8001870:	801a      	strh	r2, [r3, #0]
			touch_elements_register[page][layer][i].element_type = element_type;
 8001872:	79f9      	ldrb	r1, [r7, #7]
 8001874:	79ba      	ldrb	r2, [r7, #6]
 8001876:	8c3b      	ldrh	r3, [r7, #32]
 8001878:	b2dc      	uxtb	r4, r3
 800187a:	4821      	ldr	r0, [pc, #132]	; (8001900 <touch_register_element+0x168>)
 800187c:	4613      	mov	r3, r2
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	4413      	add	r3, r2
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	2264      	movs	r2, #100	; 0x64
 8001886:	fb02 f201 	mul.w	r2, r2, r1
 800188a:	441a      	add	r2, r3
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	4413      	add	r3, r2
 8001890:	011b      	lsls	r3, r3, #4
 8001892:	4403      	add	r3, r0
 8001894:	3308      	adds	r3, #8
 8001896:	4622      	mov	r2, r4
 8001898:	701a      	strb	r2, [r3, #0]
			touch_elements_register[page][layer][i].element_pointer = element_pointer;
 800189a:	79f8      	ldrb	r0, [r7, #7]
 800189c:	79ba      	ldrb	r2, [r7, #6]
 800189e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80018a0:	4c17      	ldr	r4, [pc, #92]	; (8001900 <touch_register_element+0x168>)
 80018a2:	4613      	mov	r3, r2
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	4413      	add	r3, r2
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	2264      	movs	r2, #100	; 0x64
 80018ac:	fb02 f200 	mul.w	r2, r2, r0
 80018b0:	441a      	add	r2, r3
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	4413      	add	r3, r2
 80018b6:	011b      	lsls	r3, r3, #4
 80018b8:	4423      	add	r3, r4
 80018ba:	330c      	adds	r3, #12
 80018bc:	6019      	str	r1, [r3, #0]
			touch_elements_register[page][layer][i].isAlive = 1;
 80018be:	79f9      	ldrb	r1, [r7, #7]
 80018c0:	79ba      	ldrb	r2, [r7, #6]
 80018c2:	480f      	ldr	r0, [pc, #60]	; (8001900 <touch_register_element+0x168>)
 80018c4:	4613      	mov	r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	4413      	add	r3, r2
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	2264      	movs	r2, #100	; 0x64
 80018ce:	fb02 f201 	mul.w	r2, r2, r1
 80018d2:	441a      	add	r2, r3
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	4413      	add	r3, r2
 80018d8:	011b      	lsls	r3, r3, #4
 80018da:	4403      	add	r3, r0
 80018dc:	3309      	adds	r3, #9
 80018de:	2201      	movs	r2, #1
 80018e0:	701a      	strb	r2, [r3, #0]
#if DEBUG_TOUCH == 1
			printf("\n\rElement registered with index: %d\n\r",i);
			printf("\n\rElement values: %d %d %d %d %d %d %d\n\r",x0,x1,y0,y1,element_pointer,element_type);
#endif
			return 0;
 80018e2:	2300      	movs	r3, #0
 80018e4:	e007      	b.n	80018f6 <touch_register_element+0x15e>
	for(int i = 0;i<MAX_NUM_ELEMENTS;i++)
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	3301      	adds	r3, #1
 80018ea:	60fb      	str	r3, [r7, #12]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2b13      	cmp	r3, #19
 80018f0:	f77f af64 	ble.w	80017bc <touch_register_element+0x24>
		}
	}

	return -1;
 80018f4:	23ff      	movs	r3, #255	; 0xff
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3710      	adds	r7, #16
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bc90      	pop	{r4, r7}
 80018fe:	4770      	bx	lr
 8001900:	20000150 	.word	0x20000150

08001904 <HAL_GPIO_EXTI_Callback>:
//External interrupt from touc IC
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	4603      	mov	r3, r0
 800190c:	80fb      	strh	r3, [r7, #6]
	touch.pressed=1;
 800190e:	4b04      	ldr	r3, [pc, #16]	; (8001920 <HAL_GPIO_EXTI_Callback+0x1c>)
 8001910:	2201      	movs	r2, #1
 8001912:	811a      	strh	r2, [r3, #8]
#if DEBUG_TOUCH == 1
	printf("Interrupt touch");
#endif
}
 8001914:	bf00      	nop
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	200000dc 	.word	0x200000dc

08001924 <touch_write_control>:
	touch_elements_register[page][layer][idx].element_pointer = 0;
}
/*----------------------------------------------Private function---------------------------------------------------*/
//Write to touch IC control command via I2C
static void touch_write_control(unsigned char ctrl)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af02      	add	r7, sp, #8
 800192a:	4603      	mov	r3, r0
 800192c:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status =0;
 800192e:	2300      	movs	r3, #0
 8001930:	73fb      	strb	r3, [r7, #15]
	status = HAL_I2C_Master_Transmit(&hi2c1_touch, (uint16_t)SLAVE_ADDRESS_TOUCH, &ctrl, 1 ,I2C_DELAY);
 8001932:	1dfa      	adds	r2, r7, #7
 8001934:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001938:	9300      	str	r3, [sp, #0]
 800193a:	2301      	movs	r3, #1
 800193c:	2190      	movs	r1, #144	; 0x90
 800193e:	4804      	ldr	r0, [pc, #16]	; (8001950 <touch_write_control+0x2c>)
 8001940:	f004 f9dc 	bl	8005cfc <HAL_I2C_Master_Transmit>
 8001944:	4603      	mov	r3, r0
 8001946:	73fb      	strb	r3, [r7, #15]
#if DEBUG_TOUCH == 1
	printf("Write control I2C\n\r");
	printf ("%d",status);
#endif
}
 8001948:	bf00      	nop
 800194a:	3710      	adds	r7, #16
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	200000ec 	.word	0x200000ec

08001954 <touch_write_register>:
//Write to touch IC data via I2C
static void touch_write_register(uint8_t adr, uint16_t val)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b088      	sub	sp, #32
 8001958:	af04      	add	r7, sp, #16
 800195a:	4603      	mov	r3, r0
 800195c:	460a      	mov	r2, r1
 800195e:	71fb      	strb	r3, [r7, #7]
 8001960:	4613      	mov	r3, r2
 8001962:	80bb      	strh	r3, [r7, #4]

	HAL_StatusTypeDef status =0;
 8001964:	2300      	movs	r3, #0
 8001966:	73fb      	strb	r3, [r7, #15]
	uint8_t data[2];
	data[0] = val>>8;
 8001968:	88bb      	ldrh	r3, [r7, #4]
 800196a:	0a1b      	lsrs	r3, r3, #8
 800196c:	b29b      	uxth	r3, r3
 800196e:	b2db      	uxtb	r3, r3
 8001970:	733b      	strb	r3, [r7, #12]
	data[1] = (uint8_t)val;
 8001972:	88bb      	ldrh	r3, [r7, #4]
 8001974:	b2db      	uxtb	r3, r3
 8001976:	737b      	strb	r3, [r7, #13]
	status = HAL_I2C_Mem_Write(&hi2c1_touch, (uint16_t)SLAVE_ADDRESS_TOUCH,(adr<<3),I2C_MEMADD_SIZE_8BIT,data,2,I2C_DELAY);
 8001978:	79fb      	ldrb	r3, [r7, #7]
 800197a:	b29b      	uxth	r3, r3
 800197c:	00db      	lsls	r3, r3, #3
 800197e:	b29a      	uxth	r2, r3
 8001980:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001984:	9302      	str	r3, [sp, #8]
 8001986:	2302      	movs	r3, #2
 8001988:	9301      	str	r3, [sp, #4]
 800198a:	f107 030c 	add.w	r3, r7, #12
 800198e:	9300      	str	r3, [sp, #0]
 8001990:	2301      	movs	r3, #1
 8001992:	2190      	movs	r1, #144	; 0x90
 8001994:	4804      	ldr	r0, [pc, #16]	; (80019a8 <touch_write_register+0x54>)
 8001996:	f004 faaf 	bl	8005ef8 <HAL_I2C_Mem_Write>
 800199a:	4603      	mov	r3, r0
 800199c:	73fb      	strb	r3, [r7, #15]
#if DEBUG_TOUCH == 1
	printf ("I2C write register\n\r");
	printf ("status %d \n\r",status);
#endif
}
 800199e:	bf00      	nop
 80019a0:	3710      	adds	r7, #16
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	200000ec 	.word	0x200000ec

080019ac <touch_read>:
//Read data via I2C from touch IC
static unsigned short touch_read(unsigned char adr)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b088      	sub	sp, #32
 80019b0:	af04      	add	r7, sp, #16
 80019b2:	4603      	mov	r3, r0
 80019b4:	71fb      	strb	r3, [r7, #7]
	unsigned char adr_i2c= 0x01;
 80019b6:	2301      	movs	r3, #1
 80019b8:	73fb      	strb	r3, [r7, #15]
	adr_i2c+=adr<<3;
 80019ba:	79fb      	ldrb	r3, [r7, #7]
 80019bc:	00db      	lsls	r3, r3, #3
 80019be:	b2da      	uxtb	r2, r3
 80019c0:	7bfb      	ldrb	r3, [r7, #15]
 80019c2:	4413      	add	r3, r2
 80019c4:	73fb      	strb	r3, [r7, #15]
	uint8_t data[2];
	HAL_StatusTypeDef status =0;
 80019c6:	2300      	movs	r3, #0
 80019c8:	73bb      	strb	r3, [r7, #14]
	status = HAL_I2C_Mem_Read(&hi2c1_touch, (uint16_t)SLAVE_ADDRESS_TOUCH ,adr_i2c,I2C_MEMADD_SIZE_8BIT,data, 2, I2C_DELAY);
 80019ca:	7bfb      	ldrb	r3, [r7, #15]
 80019cc:	b29a      	uxth	r2, r3
 80019ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019d2:	9302      	str	r3, [sp, #8]
 80019d4:	2302      	movs	r3, #2
 80019d6:	9301      	str	r3, [sp, #4]
 80019d8:	f107 0308 	add.w	r3, r7, #8
 80019dc:	9300      	str	r3, [sp, #0]
 80019de:	2301      	movs	r3, #1
 80019e0:	2190      	movs	r1, #144	; 0x90
 80019e2:	4809      	ldr	r0, [pc, #36]	; (8001a08 <touch_read+0x5c>)
 80019e4:	f004 fb82 	bl	80060ec <HAL_I2C_Mem_Read>
 80019e8:	4603      	mov	r3, r0
 80019ea:	73bb      	strb	r3, [r7, #14]
	uint16_t result = (data[0] << 8) | (data[1] & 0xFF);
 80019ec:	7a3b      	ldrb	r3, [r7, #8]
 80019ee:	021b      	lsls	r3, r3, #8
 80019f0:	b21a      	sxth	r2, r3
 80019f2:	7a7b      	ldrb	r3, [r7, #9]
 80019f4:	b21b      	sxth	r3, r3
 80019f6:	4313      	orrs	r3, r2
 80019f8:	b21b      	sxth	r3, r3
 80019fa:	81bb      	strh	r3, [r7, #12]
	return result;
 80019fc:	89bb      	ldrh	r3, [r7, #12]
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3710      	adds	r7, #16
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	200000ec 	.word	0x200000ec
 8001a0c:	00000000 	.word	0x00000000

08001a10 <validate_touch_coordinates>:
//Transform and validate touch coordinates
static uint8_t validate_touch_coordinates(void)
{
 8001a10:	b5b0      	push	{r4, r5, r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
	if(touch.x<MIN_X) return 0;
	if(touch.x>MAX_X) return 0;
 8001a16:	4b56      	ldr	r3, [pc, #344]	; (8001b70 <validate_touch_coordinates+0x160>)
 8001a18:	881b      	ldrh	r3, [r3, #0]
 8001a1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a1e:	d901      	bls.n	8001a24 <validate_touch_coordinates+0x14>
 8001a20:	2300      	movs	r3, #0
 8001a22:	e087      	b.n	8001b34 <validate_touch_coordinates+0x124>
	if(touch.y<MIN_Y) return 0;
	if(touch.y>MAX_Y) return 0;
 8001a24:	4b52      	ldr	r3, [pc, #328]	; (8001b70 <validate_touch_coordinates+0x160>)
 8001a26:	885b      	ldrh	r3, [r3, #2]
 8001a28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a2c:	d901      	bls.n	8001a32 <validate_touch_coordinates+0x22>
 8001a2e:	2300      	movs	r3, #0
 8001a30:	e080      	b.n	8001b34 <validate_touch_coordinates+0x124>

	touch.x=touch.x - MIN_X;
 8001a32:	4b4f      	ldr	r3, [pc, #316]	; (8001b70 <validate_touch_coordinates+0x160>)
 8001a34:	881a      	ldrh	r2, [r3, #0]
 8001a36:	4b4e      	ldr	r3, [pc, #312]	; (8001b70 <validate_touch_coordinates+0x160>)
 8001a38:	801a      	strh	r2, [r3, #0]
	touch.y=touch.y - MIN_Y;
 8001a3a:	4b4d      	ldr	r3, [pc, #308]	; (8001b70 <validate_touch_coordinates+0x160>)
 8001a3c:	885a      	ldrh	r2, [r3, #2]
 8001a3e:	4b4c      	ldr	r3, [pc, #304]	; (8001b70 <validate_touch_coordinates+0x160>)
 8001a40:	805a      	strh	r2, [r3, #2]
#if LINEAR_INTERPOLATION == 1
	touch.x = linear_interpolation((long)touch.x,40,970,0,480);
	touch.y = linear_interpolation((long)touch.y,40,970,0,340);
#else
	double x,y;
	x = X_A* (int16_t)touch.x + X_B *(int16_t)touch.y +X_L;
 8001a42:	4b4b      	ldr	r3, [pc, #300]	; (8001b70 <validate_touch_coordinates+0x160>)
 8001a44:	881b      	ldrh	r3, [r3, #0]
 8001a46:	b21b      	sxth	r3, r3
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7fe fe9d 	bl	8000788 <__aeabi_i2d>
 8001a4e:	a33c      	add	r3, pc, #240	; (adr r3, 8001b40 <validate_touch_coordinates+0x130>)
 8001a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a54:	f7fe fc1c 	bl	8000290 <__aeabi_dmul>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	4614      	mov	r4, r2
 8001a5e:	461d      	mov	r5, r3
 8001a60:	4b43      	ldr	r3, [pc, #268]	; (8001b70 <validate_touch_coordinates+0x160>)
 8001a62:	885b      	ldrh	r3, [r3, #2]
 8001a64:	b21b      	sxth	r3, r3
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7fe fe8e 	bl	8000788 <__aeabi_i2d>
 8001a6c:	a336      	add	r3, pc, #216	; (adr r3, 8001b48 <validate_touch_coordinates+0x138>)
 8001a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a72:	f7fe fc0d 	bl	8000290 <__aeabi_dmul>
 8001a76:	4602      	mov	r2, r0
 8001a78:	460b      	mov	r3, r1
 8001a7a:	4620      	mov	r0, r4
 8001a7c:	4629      	mov	r1, r5
 8001a7e:	f7fe fd37 	bl	80004f0 <__adddf3>
 8001a82:	4602      	mov	r2, r0
 8001a84:	460b      	mov	r3, r1
 8001a86:	4610      	mov	r0, r2
 8001a88:	4619      	mov	r1, r3
 8001a8a:	a331      	add	r3, pc, #196	; (adr r3, 8001b50 <validate_touch_coordinates+0x140>)
 8001a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a90:	f7fe fd2c 	bl	80004ec <__aeabi_dsub>
 8001a94:	4602      	mov	r2, r0
 8001a96:	460b      	mov	r3, r1
 8001a98:	e9c7 2302 	strd	r2, r3, [r7, #8]
	y = Y_A* (int16_t)touch.x + Y_B *(int16_t)touch.y +Y_L;
 8001a9c:	4b34      	ldr	r3, [pc, #208]	; (8001b70 <validate_touch_coordinates+0x160>)
 8001a9e:	881b      	ldrh	r3, [r3, #0]
 8001aa0:	b21b      	sxth	r3, r3
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7fe fe70 	bl	8000788 <__aeabi_i2d>
 8001aa8:	a32b      	add	r3, pc, #172	; (adr r3, 8001b58 <validate_touch_coordinates+0x148>)
 8001aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aae:	f7fe fbef 	bl	8000290 <__aeabi_dmul>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	4614      	mov	r4, r2
 8001ab8:	461d      	mov	r5, r3
 8001aba:	4b2d      	ldr	r3, [pc, #180]	; (8001b70 <validate_touch_coordinates+0x160>)
 8001abc:	885b      	ldrh	r3, [r3, #2]
 8001abe:	b21b      	sxth	r3, r3
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7fe fe61 	bl	8000788 <__aeabi_i2d>
 8001ac6:	a326      	add	r3, pc, #152	; (adr r3, 8001b60 <validate_touch_coordinates+0x150>)
 8001ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001acc:	f7fe fbe0 	bl	8000290 <__aeabi_dmul>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	4620      	mov	r0, r4
 8001ad6:	4629      	mov	r1, r5
 8001ad8:	f7fe fd0a 	bl	80004f0 <__adddf3>
 8001adc:	4602      	mov	r2, r0
 8001ade:	460b      	mov	r3, r1
 8001ae0:	4610      	mov	r0, r2
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	a320      	add	r3, pc, #128	; (adr r3, 8001b68 <validate_touch_coordinates+0x158>)
 8001ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aea:	f7fe fcff 	bl	80004ec <__aeabi_dsub>
 8001aee:	4602      	mov	r2, r0
 8001af0:	460b      	mov	r3, r1
 8001af2:	e9c7 2300 	strd	r2, r3, [r7]
	touch.x = (uint16_t)x;
 8001af6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001afa:	f7fe feaf 	bl	800085c <__aeabi_d2uiz>
 8001afe:	4603      	mov	r3, r0
 8001b00:	b29a      	uxth	r2, r3
 8001b02:	4b1b      	ldr	r3, [pc, #108]	; (8001b70 <validate_touch_coordinates+0x160>)
 8001b04:	801a      	strh	r2, [r3, #0]
	touch.y = (uint16_t)y;
 8001b06:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b0a:	f7fe fea7 	bl	800085c <__aeabi_d2uiz>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	b29a      	uxth	r2, r3
 8001b12:	4b17      	ldr	r3, [pc, #92]	; (8001b70 <validate_touch_coordinates+0x160>)
 8001b14:	805a      	strh	r2, [r3, #2]
#endif
#if DEBUG_TOUCH == 1
	printf("TOUCH y %d\n\r", touch.y);
	printf("TOUCH X %d\n\r", touch.x);
#endif
	if (touch.x >= 0 && touch.x <= LCD_PIXEL_WIDTH)
 8001b16:	4b16      	ldr	r3, [pc, #88]	; (8001b70 <validate_touch_coordinates+0x160>)
 8001b18:	881b      	ldrh	r3, [r3, #0]
 8001b1a:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001b1e:	d801      	bhi.n	8001b24 <validate_touch_coordinates+0x114>
	{
		return 1;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e007      	b.n	8001b34 <validate_touch_coordinates+0x124>
	}
	if (touch.y >= 0 && touch.y <= LCD_PIXEL_HEIGHT)
 8001b24:	4b12      	ldr	r3, [pc, #72]	; (8001b70 <validate_touch_coordinates+0x160>)
 8001b26:	885b      	ldrh	r3, [r3, #2]
 8001b28:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001b2c:	d801      	bhi.n	8001b32 <validate_touch_coordinates+0x122>
	{
		return 1;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e000      	b.n	8001b34 <validate_touch_coordinates+0x124>
	}


	return 0;
 8001b32:	2300      	movs	r3, #0
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3710      	adds	r7, #16
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bdb0      	pop	{r4, r5, r7, pc}
 8001b3c:	f3af 8000 	nop.w
 8001b40:	c7e28241 	.word	0xc7e28241
 8001b44:	3fe0bb98 	.word	0x3fe0bb98
 8001b48:	8db8bac7 	.word	0x8db8bac7
 8001b4c:	3f66f006 	.word	0x3f66f006
 8001b50:	b71758e2 	.word	0xb71758e2
 8001b54:	403fc0d1 	.word	0x403fc0d1
 8001b58:	d2f1a9fc 	.word	0xd2f1a9fc
 8001b5c:	bf70624d 	.word	0xbf70624d
 8001b60:	ab367a10 	.word	0xab367a10
 8001b64:	3fd7573e 	.word	0x3fd7573e
 8001b68:	e219652c 	.word	0xe219652c
 8001b6c:	4036d758 	.word	0x4036d758
 8001b70:	200000dc 	.word	0x200000dc

08001b74 <delay_ms>:
	{
		  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	}
#endif
//Delay in ms
static void delay_ms(__IO uint32_t nCount1) {
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
	__IO uint32_t nCount=nCount1*23666;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f645 4272 	movw	r2, #23666	; 0x5c72
 8001b82:	fb02 f303 	mul.w	r3, r2, r3
 8001b86:	60fb      	str	r3, [r7, #12]
	while(nCount--) {
 8001b88:	bf00      	nop
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	1e5a      	subs	r2, r3, #1
 8001b8e:	60fa      	str	r2, [r7, #12]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d1fa      	bne.n	8001b8a <delay_ms+0x16>
  }
}
 8001b94:	bf00      	nop
 8001b96:	bf00      	nop
 8001b98:	3714      	adds	r7, #20
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
	...

08001ba4 <configFromUart>:

/*
 * Attempts to read configuration / debug data from UART and save them to external flash.
 * Returns: 0 when successful, 1 when no configuration data detected on uart, 2 or greater when configuration failed
 */
int configFromUart(){
 8001ba4:	b5b0      	push	{r4, r5, r7, lr}
 8001ba6:	f5ad 6d9b 	sub.w	sp, sp, #1240	; 0x4d8
 8001baa:	af7e      	add	r7, sp, #504	; 0x1f8

	char msg[128];

	int count = read_usart_message(msg, &huart1, sizeof(msg), NEWLINE);
 8001bac:	f507 7017 	add.w	r0, r7, #604	; 0x25c
 8001bb0:	230d      	movs	r3, #13
 8001bb2:	2280      	movs	r2, #128	; 0x80
 8001bb4:	4982      	ldr	r1, [pc, #520]	; (8001dc0 <configFromUart+0x21c>)
 8001bb6:	f003 fafb 	bl	80051b0 <read_usart_message>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc

	if(count == 0){
 8001bc0:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d104      	bne.n	8001bd2 <configFromUart+0x2e>
		printf("[cl] No data on uart.\n\r");
 8001bc8:	487e      	ldr	r0, [pc, #504]	; (8001dc4 <configFromUart+0x220>)
 8001bca:	f007 fbe7 	bl	800939c <iprintf>
		return 1;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e0f0      	b.n	8001db4 <configFromUart+0x210>
	}

	msg[count-1] = 0; //replace newline delimiter with null-termination
 8001bd2:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 8001bdc:	4413      	add	r3, r2
 8001bde:	2200      	movs	r2, #0
 8001be0:	f803 2c84 	strb.w	r2, [r3, #-132]

	char configMsg[] = "config";
 8001be4:	4a78      	ldr	r2, [pc, #480]	; (8001dc8 <configFromUart+0x224>)
 8001be6:	f507 7315 	add.w	r3, r7, #596	; 0x254
 8001bea:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001bee:	6018      	str	r0, [r3, #0]
 8001bf0:	3304      	adds	r3, #4
 8001bf2:	8019      	strh	r1, [r3, #0]
 8001bf4:	3302      	adds	r3, #2
 8001bf6:	0c0a      	lsrs	r2, r1, #16
 8001bf8:	701a      	strb	r2, [r3, #0]
	char bitmapMsg[] = "bitmap";
 8001bfa:	4a74      	ldr	r2, [pc, #464]	; (8001dcc <configFromUart+0x228>)
 8001bfc:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 8001c00:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c04:	6018      	str	r0, [r3, #0]
 8001c06:	3304      	adds	r3, #4
 8001c08:	8019      	strh	r1, [r3, #0]
 8001c0a:	3302      	adds	r3, #2
 8001c0c:	0c0a      	lsrs	r2, r1, #16
 8001c0e:	701a      	strb	r2, [r3, #0]
	char deleteMsg[] = "delete bitmaps";
 8001c10:	4b6f      	ldr	r3, [pc, #444]	; (8001dd0 <configFromUart+0x22c>)
 8001c12:	f507 740f 	add.w	r4, r7, #572	; 0x23c
 8001c16:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c18:	c407      	stmia	r4!, {r0, r1, r2}
 8001c1a:	8023      	strh	r3, [r4, #0]
 8001c1c:	3402      	adds	r4, #2
 8001c1e:	0c1b      	lsrs	r3, r3, #16
 8001c20:	7023      	strb	r3, [r4, #0]
	char sreportMsg[] = "report screens";
 8001c22:	4b6c      	ldr	r3, [pc, #432]	; (8001dd4 <configFromUart+0x230>)
 8001c24:	f507 740b 	add.w	r4, r7, #556	; 0x22c
 8001c28:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c2a:	c407      	stmia	r4!, {r0, r1, r2}
 8001c2c:	8023      	strh	r3, [r4, #0]
 8001c2e:	3402      	adds	r4, #2
 8001c30:	0c1b      	lsrs	r3, r3, #16
 8001c32:	7023      	strb	r3, [r4, #0]
	char breportMsg[] = "report bitmaps";
 8001c34:	4b68      	ldr	r3, [pc, #416]	; (8001dd8 <configFromUart+0x234>)
 8001c36:	f507 7407 	add.w	r4, r7, #540	; 0x21c
 8001c3a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c3c:	c407      	stmia	r4!, {r0, r1, r2}
 8001c3e:	8023      	strh	r3, [r4, #0]
 8001c40:	3402      	adds	r4, #2
 8001c42:	0c1b      	lsrs	r3, r3, #16
 8001c44:	7023      	strb	r3, [r4, #0]
	char hreportMsg[] = "hex report bitmaps";
 8001c46:	4b65      	ldr	r3, [pc, #404]	; (8001ddc <configFromUart+0x238>)
 8001c48:	f507 7402 	add.w	r4, r7, #520	; 0x208
 8001c4c:	461d      	mov	r5, r3
 8001c4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c52:	682b      	ldr	r3, [r5, #0]
 8001c54:	461a      	mov	r2, r3
 8001c56:	8022      	strh	r2, [r4, #0]
 8001c58:	3402      	adds	r4, #2
 8001c5a:	0c1b      	lsrs	r3, r3, #16
 8001c5c:	7023      	strb	r3, [r4, #0]

	if(strcmp(configMsg, msg) == 0){
 8001c5e:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 8001c62:	f507 7315 	add.w	r3, r7, #596	; 0x254
 8001c66:	4611      	mov	r1, r2
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7fe fab1 	bl	80001d0 <strcmp>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d106      	bne.n	8001c82 <configFromUart+0xde>
		printf("[cl] Okay, proceeding to configure screens.\n\r");
 8001c74:	485a      	ldr	r0, [pc, #360]	; (8001de0 <configFromUart+0x23c>)
 8001c76:	f007 fb91 	bl	800939c <iprintf>
		return configScreensFromUart();
 8001c7a:	f000 fb25 	bl	80022c8 <configScreensFromUart>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	e098      	b.n	8001db4 <configFromUart+0x210>
	}
	else if(strcmp(bitmapMsg, msg) == 0){
 8001c82:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 8001c86:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 8001c8a:	4611      	mov	r1, r2
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7fe fa9f 	bl	80001d0 <strcmp>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d106      	bne.n	8001ca6 <configFromUart+0x102>
		printf("[cl] Okay, proceeding to write bitmap.\n\r");
 8001c98:	4852      	ldr	r0, [pc, #328]	; (8001de4 <configFromUart+0x240>)
 8001c9a:	f007 fb7f 	bl	800939c <iprintf>
		return configBitmapFromUart();
 8001c9e:	f000 f8b1 	bl	8001e04 <configBitmapFromUart>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	e086      	b.n	8001db4 <configFromUart+0x210>
	}
	else if(strcmp(deleteMsg, msg) == 0){
 8001ca6:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 8001caa:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8001cae:	4611      	mov	r1, r2
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7fe fa8d 	bl	80001d0 <strcmp>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d106      	bne.n	8001cca <configFromUart+0x126>
		printf("[cl] Okay, marking all saved bitmaps for deletion.\n\r");
 8001cbc:	484a      	ldr	r0, [pc, #296]	; (8001de8 <configFromUart+0x244>)
 8001cbe:	f007 fb6d 	bl	800939c <iprintf>
		return configMarkBitmapsForDelete();
 8001cc2:	f000 facd 	bl	8002260 <configMarkBitmapsForDelete>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	e074      	b.n	8001db4 <configFromUart+0x210>
	}
	else if(strcmp(sreportMsg, msg) == 0){
 8001cca:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 8001cce:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 8001cd2:	4611      	mov	r1, r2
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7fe fa7b 	bl	80001d0 <strcmp>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d115      	bne.n	8001d0c <configFromUart+0x168>
		printf("[cl] Okay, reporting screens.\n\r");
 8001ce0:	4842      	ldr	r0, [pc, #264]	; (8001dec <configFromUart+0x248>)
 8001ce2:	f007 fb5b 	bl	800939c <iprintf>
		struct generalConfig gconf;
		readGeneralConfig(&gconf);
 8001ce6:	1d3b      	adds	r3, r7, #4
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f001 f90d 	bl	8002f08 <readGeneralConfig>
		printAllScreens(gconf);
 8001cee:	1d3c      	adds	r4, r7, #4
 8001cf0:	4668      	mov	r0, sp
 8001cf2:	f104 0310 	add.w	r3, r4, #16
 8001cf6:	f44f 72f9 	mov.w	r2, #498	; 0x1f2
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	f007 fb38 	bl	8009370 <memcpy>
 8001d00:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001d04:	f001 fa2c 	bl	8003160 <printAllScreens>
		return 0;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	e053      	b.n	8001db4 <configFromUart+0x210>
	}
	else if(strcmp(breportMsg, msg) == 0){
 8001d0c:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 8001d10:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8001d14:	4611      	mov	r1, r2
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7fe fa5a 	bl	80001d0 <strcmp>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d107      	bne.n	8001d32 <configFromUart+0x18e>
		printf("[cl] Okay, reporting bitmaps.\n\r");
 8001d22:	4833      	ldr	r0, [pc, #204]	; (8001df0 <configFromUart+0x24c>)
 8001d24:	f007 fb3a 	bl	800939c <iprintf>
		reportBitmaps(0);
 8001d28:	2000      	movs	r0, #0
 8001d2a:	f001 fb83 	bl	8003434 <reportBitmaps>
		return 0;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	e040      	b.n	8001db4 <configFromUart+0x210>
		}
	else if(strcmp(hreportMsg, msg) == 0){
 8001d32:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 8001d36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d3a:	4611      	mov	r1, r2
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7fe fa47 	bl	80001d0 <strcmp>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d107      	bne.n	8001d58 <configFromUart+0x1b4>
		printf("[cl] Okay, printing bitmap hex data...\n\r");
 8001d48:	482a      	ldr	r0, [pc, #168]	; (8001df4 <configFromUart+0x250>)
 8001d4a:	f007 fb27 	bl	800939c <iprintf>
		reportBitmaps(1);
 8001d4e:	2001      	movs	r0, #1
 8001d50:	f001 fb70 	bl	8003434 <reportBitmaps>
		return 0;
 8001d54:	2300      	movs	r3, #0
 8001d56:	e02d      	b.n	8001db4 <configFromUart+0x210>
		}
	else{
		printf("[cl] Unexpected first msg. Got %s, which is not a recognised command.\n\r", msg);
 8001d58:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4826      	ldr	r0, [pc, #152]	; (8001df8 <configFromUart+0x254>)
 8001d60:	f007 fb1c 	bl	800939c <iprintf>
		printf("[cl] Known commands: \n\r");
 8001d64:	4825      	ldr	r0, [pc, #148]	; (8001dfc <configFromUart+0x258>)
 8001d66:	f007 fb19 	bl	800939c <iprintf>
		printf("[cl] %s \n\r", configMsg);
 8001d6a:	f507 7315 	add.w	r3, r7, #596	; 0x254
 8001d6e:	4619      	mov	r1, r3
 8001d70:	4823      	ldr	r0, [pc, #140]	; (8001e00 <configFromUart+0x25c>)
 8001d72:	f007 fb13 	bl	800939c <iprintf>
		printf("[cl] %s \n\r", bitmapMsg);
 8001d76:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4820      	ldr	r0, [pc, #128]	; (8001e00 <configFromUart+0x25c>)
 8001d7e:	f007 fb0d 	bl	800939c <iprintf>
		printf("[cl] %s \n\r", deleteMsg);
 8001d82:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8001d86:	4619      	mov	r1, r3
 8001d88:	481d      	ldr	r0, [pc, #116]	; (8001e00 <configFromUart+0x25c>)
 8001d8a:	f007 fb07 	bl	800939c <iprintf>
		printf("[cl] %s \n\r", sreportMsg);
 8001d8e:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 8001d92:	4619      	mov	r1, r3
 8001d94:	481a      	ldr	r0, [pc, #104]	; (8001e00 <configFromUart+0x25c>)
 8001d96:	f007 fb01 	bl	800939c <iprintf>
		printf("[cl] %s \n\r", breportMsg);
 8001d9a:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8001d9e:	4619      	mov	r1, r3
 8001da0:	4817      	ldr	r0, [pc, #92]	; (8001e00 <configFromUart+0x25c>)
 8001da2:	f007 fafb 	bl	800939c <iprintf>
		printf("[cl] %s \n\r", hreportMsg);
 8001da6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001daa:	4619      	mov	r1, r3
 8001dac:	4814      	ldr	r0, [pc, #80]	; (8001e00 <configFromUart+0x25c>)
 8001dae:	f007 faf5 	bl	800939c <iprintf>
		return 1;
 8001db2:	2301      	movs	r3, #1
	}
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	f507 7738 	add.w	r7, r7, #736	; 0x2e0
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bdb0      	pop	{r4, r5, r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	20002188 	.word	0x20002188
 8001dc4:	0800a38c 	.word	0x0800a38c
 8001dc8:	0800a510 	.word	0x0800a510
 8001dcc:	0800a518 	.word	0x0800a518
 8001dd0:	0800a520 	.word	0x0800a520
 8001dd4:	0800a530 	.word	0x0800a530
 8001dd8:	0800a540 	.word	0x0800a540
 8001ddc:	0800a550 	.word	0x0800a550
 8001de0:	0800a3a4 	.word	0x0800a3a4
 8001de4:	0800a3d4 	.word	0x0800a3d4
 8001de8:	0800a400 	.word	0x0800a400
 8001dec:	0800a438 	.word	0x0800a438
 8001df0:	0800a458 	.word	0x0800a458
 8001df4:	0800a478 	.word	0x0800a478
 8001df8:	0800a4a4 	.word	0x0800a4a4
 8001dfc:	0800a4ec 	.word	0x0800a4ec
 8001e00:	0800a504 	.word	0x0800a504

08001e04 <configBitmapFromUart>:

int configBitmapFromUart(){
 8001e04:	b580      	push	{r7, lr}
 8001e06:	f5ad 5dc5 	sub.w	sp, sp, #6304	; 0x18a0
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
	int count;
	char msg[128];
	struct bitmapList blist;
	readBitmapList(&blist);
 8001e0e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001e12:	f103 0308 	add.w	r3, r3, #8
 8001e16:	4618      	mov	r0, r3
 8001e18:	f001 f894 	bl	8002f44 <readBitmapList>
	int currentSector = blist.lastUsedSector + 1;
 8001e1c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001e20:	f103 0308 	add.w	r3, r3, #8
 8001e24:	885b      	ldrh	r3, [r3, #2]
 8001e26:	3301      	adds	r3, #1
 8001e28:	f507 52c5 	add.w	r2, r7, #6304	; 0x18a0
 8001e2c:	f102 0204 	add.w	r2, r2, #4
 8001e30:	6013      	str	r3, [r2, #0]
	if(currentSector > MAX_SECTOR){
 8001e32:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8001e36:	f103 0304 	add.w	r3, r3, #4
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e40:	db0b      	blt.n	8001e5a <configBitmapFromUart+0x56>
		printf("[cl] Error trying to write bitmap to memory: No more free sectors. Last used: %d \n\r", blist.lastUsedSector);
 8001e42:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001e46:	f103 0308 	add.w	r3, r3, #8
 8001e4a:	885b      	ldrh	r3, [r3, #2]
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	48cb      	ldr	r0, [pc, #812]	; (800217c <configBitmapFromUart+0x378>)
 8001e50:	f007 faa4 	bl	800939c <iprintf>
		return 1000;
 8001e54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e58:	e1f6      	b.n	8002248 <configBitmapFromUart+0x444>
	}
	blist.bitmapSectors[blist.totalBitmaps-1] = currentSector;
 8001e5a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001e5e:	f103 0308 	add.w	r3, r3, #8
 8001e62:	881b      	ldrh	r3, [r3, #0]
 8001e64:	3b01      	subs	r3, #1
 8001e66:	f507 52c5 	add.w	r2, r7, #6304	; 0x18a0
 8001e6a:	f102 0204 	add.w	r2, r2, #4
 8001e6e:	6812      	ldr	r2, [r2, #0]
 8001e70:	b291      	uxth	r1, r2
 8001e72:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001e76:	f102 0208 	add.w	r2, r2, #8
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	4413      	add	r3, r2
 8001e7e:	460a      	mov	r2, r1
 8001e80:	809a      	strh	r2, [r3, #4]
 	blist.totalBitmaps++;
 8001e82:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001e86:	f103 0308 	add.w	r3, r3, #8
 8001e8a:	881b      	ldrh	r3, [r3, #0]
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	b29a      	uxth	r2, r3
 8001e90:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001e94:	f103 0308 	add.w	r3, r3, #8
 8001e98:	801a      	strh	r2, [r3, #0]

 	struct bitmap bm;

 	UART_READ_STRING();
 8001e9a:	f507 50c0 	add.w	r0, r7, #6144	; 0x1800
 8001e9e:	f100 000c 	add.w	r0, r0, #12
 8001ea2:	230d      	movs	r3, #13
 8001ea4:	2280      	movs	r2, #128	; 0x80
 8001ea6:	49b6      	ldr	r1, [pc, #728]	; (8002180 <configBitmapFromUart+0x37c>)
 8001ea8:	f003 f982 	bl	80051b0 <read_usart_message>
 8001eac:	4603      	mov	r3, r0
 8001eae:	f507 52c4 	add.w	r2, r7, #6272	; 0x1880
 8001eb2:	f102 0218 	add.w	r2, r2, #24
 8001eb6:	6013      	str	r3, [r2, #0]
 8001eb8:	f507 53c4 	add.w	r3, r7, #6272	; 0x1880
 8001ebc:	f103 0318 	add.w	r3, r3, #24
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d0e9      	beq.n	8001e9a <configBitmapFromUart+0x96>
 8001ec6:	f507 53c4 	add.w	r3, r7, #6272	; 0x1880
 8001eca:	f103 0318 	add.w	r3, r3, #24
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	3b01      	subs	r3, #1
 8001ed2:	f507 52c5 	add.w	r2, r7, #6304	; 0x18a0
 8001ed6:	f102 0208 	add.w	r2, r2, #8
 8001eda:	4413      	add	r3, r2
 8001edc:	2200      	movs	r2, #0
 8001ede:	f803 2c9c 	strb.w	r2, [r3, #-156]
 	bm.xsize = atoi(msg);
 8001ee2:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8001ee6:	f103 030c 	add.w	r3, r3, #12
 8001eea:	4618      	mov	r0, r3
 8001eec:	f007 fa12 	bl	8009314 <atoi>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	b29a      	uxth	r2, r3
 8001ef4:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001ef8:	805a      	strh	r2, [r3, #2]
 	UART_READ_STRING();
 8001efa:	f507 50c0 	add.w	r0, r7, #6144	; 0x1800
 8001efe:	f100 000c 	add.w	r0, r0, #12
 8001f02:	230d      	movs	r3, #13
 8001f04:	2280      	movs	r2, #128	; 0x80
 8001f06:	499e      	ldr	r1, [pc, #632]	; (8002180 <configBitmapFromUart+0x37c>)
 8001f08:	f003 f952 	bl	80051b0 <read_usart_message>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	f507 52c4 	add.w	r2, r7, #6272	; 0x1880
 8001f12:	f102 0218 	add.w	r2, r2, #24
 8001f16:	6013      	str	r3, [r2, #0]
 8001f18:	f507 53c4 	add.w	r3, r7, #6272	; 0x1880
 8001f1c:	f103 0318 	add.w	r3, r3, #24
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d0e9      	beq.n	8001efa <configBitmapFromUart+0xf6>
 8001f26:	f507 53c4 	add.w	r3, r7, #6272	; 0x1880
 8001f2a:	f103 0318 	add.w	r3, r3, #24
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	3b01      	subs	r3, #1
 8001f32:	f507 52c5 	add.w	r2, r7, #6304	; 0x18a0
 8001f36:	f102 0208 	add.w	r2, r2, #8
 8001f3a:	4413      	add	r3, r2
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f803 2c9c 	strb.w	r2, [r3, #-156]
 	bm.ysize = atoi(msg);
 8001f42:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8001f46:	f103 030c 	add.w	r3, r3, #12
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f007 f9e2 	bl	8009314 <atoi>
 8001f50:	4603      	mov	r3, r0
 8001f52:	b29a      	uxth	r2, r3
 8001f54:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001f58:	809a      	strh	r2, [r3, #4]

 	bm.bitmapNumber = blist.totalBitmaps-1;
 8001f5a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001f5e:	f103 0308 	add.w	r3, r3, #8
 8001f62:	881b      	ldrh	r3, [r3, #0]
 8001f64:	3b01      	subs	r3, #1
 8001f66:	b29a      	uxth	r2, r3
 8001f68:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001f6c:	801a      	strh	r2, [r3, #0]

 	int expectedBytes = 2*bm.xsize*bm.ysize;
 8001f6e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001f72:	885b      	ldrh	r3, [r3, #2]
 8001f74:	461a      	mov	r2, r3
 8001f76:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001f7a:	889b      	ldrh	r3, [r3, #4]
 8001f7c:	fb03 f302 	mul.w	r3, r3, r2
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	f507 52c4 	add.w	r2, r7, #6272	; 0x1880
 8001f86:	f102 0214 	add.w	r2, r2, #20
 8001f8a:	6013      	str	r3, [r2, #0]
 	int spaceLeft = SECTOR_SIZE*(MAX_SECTOR+1-currentSector) - sizeof(bm);
 8001f8c:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8001f90:	f103 0304 	add.w	r3, r3, #4
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8001f9a:	031b      	lsls	r3, r3, #12
 8001f9c:	3b06      	subs	r3, #6
 8001f9e:	f507 52c4 	add.w	r2, r7, #6272	; 0x1880
 8001fa2:	f102 0210 	add.w	r2, r2, #16
 8001fa6:	6013      	str	r3, [r2, #0]

 	printf("[cl] Okay, ready to parse bitmap #%d, size %dx%d pixels.\n\r", bm.bitmapNumber, bm.xsize, bm.ysize);
 8001fa8:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001fac:	881b      	ldrh	r3, [r3, #0]
 8001fae:	4619      	mov	r1, r3
 8001fb0:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001fb4:	885b      	ldrh	r3, [r3, #2]
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001fbc:	889b      	ldrh	r3, [r3, #4]
 8001fbe:	4871      	ldr	r0, [pc, #452]	; (8002184 <configBitmapFromUart+0x380>)
 8001fc0:	f007 f9ec 	bl	800939c <iprintf>

 	if(expectedBytes > spaceLeft){
 8001fc4:	f507 53c4 	add.w	r3, r7, #6272	; 0x1880
 8001fc8:	f103 0314 	add.w	r3, r3, #20
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	f507 53c4 	add.w	r3, r7, #6272	; 0x1880
 8001fd2:	f103 0310 	add.w	r3, r3, #16
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	dd0c      	ble.n	8001ff6 <configBitmapFromUart+0x1f2>
 		printf("[cl] WARNING: This bitmap is not going to fit into memory! Only first %d bytes of total %d will be written. \n\r", spaceLeft, expectedBytes);
 8001fdc:	f507 53c4 	add.w	r3, r7, #6272	; 0x1880
 8001fe0:	f103 0314 	add.w	r3, r3, #20
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	f507 53c4 	add.w	r3, r7, #6272	; 0x1880
 8001fea:	f103 0310 	add.w	r3, r3, #16
 8001fee:	6819      	ldr	r1, [r3, #0]
 8001ff0:	4865      	ldr	r0, [pc, #404]	; (8002188 <configBitmapFromUart+0x384>)
 8001ff2:	f007 f9d3 	bl	800939c <iprintf>
 	}

 	uint8_t sectorBuffer[SECTOR_SIZE];
 	int sectorBufferIndex = 0;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	f507 52c5 	add.w	r2, r7, #6304	; 0x18a0
 8001ffc:	6013      	str	r3, [r2, #0]

 	memcpy(sectorBuffer+sectorBufferIndex, (uint8_t *) &bm, sizeof(bm));
 8001ffe:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	f107 0308 	add.w	r3, r7, #8
 8002008:	3b08      	subs	r3, #8
 800200a:	4413      	add	r3, r2
 800200c:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8002010:	2206      	movs	r2, #6
 8002012:	4618      	mov	r0, r3
 8002014:	f007 f9ac 	bl	8009370 <memcpy>
 	sectorBufferIndex += sizeof(bm);
 8002018:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	3306      	adds	r3, #6
 8002020:	f507 52c5 	add.w	r2, r7, #6304	; 0x18a0
 8002024:	6013      	str	r3, [r2, #0]

 	int bytesLeft = expectedBytes;
 8002026:	f507 53c4 	add.w	r3, r7, #6272	; 0x1880
 800202a:	f103 0314 	add.w	r3, r3, #20
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f507 52c4 	add.w	r2, r7, #6272	; 0x1880
 8002034:	f102 021c 	add.w	r2, r2, #28
 8002038:	6013      	str	r3, [r2, #0]

 	while(bytesLeft > 0){
 800203a:	e0b6      	b.n	80021aa <configBitmapFromUart+0x3a6>
 		do{count = read_usart_message(msg, &huart1, 2, NEWLINE);} while (count==0);
 800203c:	f507 50c0 	add.w	r0, r7, #6144	; 0x1800
 8002040:	f100 000c 	add.w	r0, r0, #12
 8002044:	230d      	movs	r3, #13
 8002046:	2202      	movs	r2, #2
 8002048:	494d      	ldr	r1, [pc, #308]	; (8002180 <configBitmapFromUart+0x37c>)
 800204a:	f003 f8b1 	bl	80051b0 <read_usart_message>
 800204e:	4603      	mov	r3, r0
 8002050:	f507 52c4 	add.w	r2, r7, #6272	; 0x1880
 8002054:	f102 0218 	add.w	r2, r2, #24
 8002058:	6013      	str	r3, [r2, #0]
 800205a:	f507 53c4 	add.w	r3, r7, #6272	; 0x1880
 800205e:	f103 0318 	add.w	r3, r3, #24
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d0e9      	beq.n	800203c <configBitmapFromUart+0x238>
 		if(count!=2){
 8002068:	f507 53c4 	add.w	r3, r7, #6272	; 0x1880
 800206c:	f103 0318 	add.w	r3, r3, #24
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2b02      	cmp	r3, #2
 8002074:	d007      	beq.n	8002086 <configBitmapFromUart+0x282>
 			printf("[cl] Error: Unexpected end of bitmap #%d data.\n\r.", bm.bitmapNumber);
 8002076:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800207a:	881b      	ldrh	r3, [r3, #0]
 800207c:	4619      	mov	r1, r3
 800207e:	4843      	ldr	r0, [pc, #268]	; (800218c <configBitmapFromUart+0x388>)
 8002080:	f007 f98c 	bl	800939c <iprintf>
 			break;
 8002084:	e099      	b.n	80021ba <configBitmapFromUart+0x3b6>
 		}
 		msg[2] = 0;
 8002086:	2300      	movs	r3, #0
 8002088:	f507 52c0 	add.w	r2, r7, #6144	; 0x1800
 800208c:	f102 020e 	add.w	r2, r2, #14
 8002090:	7013      	strb	r3, [r2, #0]
		uint8_t deHexedByte = (uint8_t) strtol(msg, NULL, 16);
 8002092:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8002096:	f103 030c 	add.w	r3, r3, #12
 800209a:	2210      	movs	r2, #16
 800209c:	2100      	movs	r1, #0
 800209e:	4618      	mov	r0, r3
 80020a0:	f007 fa20 	bl	80094e4 <strtol>
 80020a4:	4603      	mov	r3, r0
 80020a6:	f507 52c4 	add.w	r2, r7, #6272	; 0x1880
 80020aa:	f102 020f 	add.w	r2, r2, #15
 80020ae:	7013      	strb	r3, [r2, #0]
		sectorBuffer[sectorBufferIndex] = deHexedByte;
 80020b0:	f107 0308 	add.w	r3, r7, #8
 80020b4:	3b08      	subs	r3, #8
 80020b6:	f507 52c5 	add.w	r2, r7, #6304	; 0x18a0
 80020ba:	6812      	ldr	r2, [r2, #0]
 80020bc:	4413      	add	r3, r2
 80020be:	f507 52c4 	add.w	r2, r7, #6272	; 0x1880
 80020c2:	f102 020f 	add.w	r2, r2, #15
 80020c6:	7812      	ldrb	r2, [r2, #0]
 80020c8:	701a      	strb	r2, [r3, #0]
		sectorBufferIndex++;
 80020ca:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	3301      	adds	r3, #1
 80020d2:	f507 52c5 	add.w	r2, r7, #6304	; 0x18a0
 80020d6:	6013      	str	r3, [r2, #0]
		bytesLeft--;
 80020d8:	f507 53c4 	add.w	r3, r7, #6272	; 0x1880
 80020dc:	f103 031c 	add.w	r3, r3, #28
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	3b01      	subs	r3, #1
 80020e4:	f507 52c4 	add.w	r2, r7, #6272	; 0x1880
 80020e8:	f102 021c 	add.w	r2, r2, #28
 80020ec:	6013      	str	r3, [r2, #0]
		if(sectorBufferIndex == SECTOR_SIZE || bytesLeft == 0){
 80020ee:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020f8:	d006      	beq.n	8002108 <configBitmapFromUart+0x304>
 80020fa:	f507 53c4 	add.w	r3, r7, #6272	; 0x1880
 80020fe:	f103 031c 	add.w	r3, r3, #28
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d150      	bne.n	80021aa <configBitmapFromUart+0x3a6>
			ext_flash_erase_4kB(currentSector*SECTOR_SIZE);
 8002108:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 800210c:	f103 0304 	add.w	r3, r3, #4
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	031b      	lsls	r3, r3, #12
 8002114:	4618      	mov	r0, r3
 8002116:	f001 fa85 	bl	8003624 <ext_flash_erase_4kB>
			ext_flash_write_multipage(currentSector*SECTOR_SIZE, sectorBuffer, sectorBufferIndex);
 800211a:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 800211e:	f103 0304 	add.w	r3, r3, #4
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	031b      	lsls	r3, r3, #12
 8002126:	4618      	mov	r0, r3
 8002128:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	f107 0308 	add.w	r3, r7, #8
 8002132:	3b08      	subs	r3, #8
 8002134:	4619      	mov	r1, r3
 8002136:	f001 fba5 	bl	8003884 <ext_flash_write_multipage>
			sectorBufferIndex = 0;
 800213a:	2300      	movs	r3, #0
 800213c:	f507 52c5 	add.w	r2, r7, #6304	; 0x18a0
 8002140:	6013      	str	r3, [r2, #0]
			if(bytesLeft > 0){
 8002142:	f507 53c4 	add.w	r3, r7, #6272	; 0x1880
 8002146:	f103 031c 	add.w	r3, r3, #28
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2b00      	cmp	r3, #0
 800214e:	dd2c      	ble.n	80021aa <configBitmapFromUart+0x3a6>
				if(currentSector == MAX_SECTOR){
 8002150:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8002154:	f103 0304 	add.w	r3, r3, #4
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800215e:	4293      	cmp	r3, r2
 8002160:	d118      	bne.n	8002194 <configBitmapFromUart+0x390>
					printf("[cl] Warning: Ran out of external memory while writing bitmap #%d. Last %d bytes not saved. \n\r", bm.bitmapNumber, bytesLeft);
 8002162:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002166:	881b      	ldrh	r3, [r3, #0]
 8002168:	f507 52c4 	add.w	r2, r7, #6272	; 0x1880
 800216c:	f102 021c 	add.w	r2, r2, #28
 8002170:	6812      	ldr	r2, [r2, #0]
 8002172:	4619      	mov	r1, r3
 8002174:	4806      	ldr	r0, [pc, #24]	; (8002190 <configBitmapFromUart+0x38c>)
 8002176:	f007 f911 	bl	800939c <iprintf>
					break;
 800217a:	e01e      	b.n	80021ba <configBitmapFromUart+0x3b6>
 800217c:	0800a564 	.word	0x0800a564
 8002180:	20002188 	.word	0x20002188
 8002184:	0800a5b8 	.word	0x0800a5b8
 8002188:	0800a5f4 	.word	0x0800a5f4
 800218c:	0800a664 	.word	0x0800a664
 8002190:	0800a698 	.word	0x0800a698
				}
				currentSector++;
 8002194:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8002198:	f103 0304 	add.w	r3, r3, #4
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	3301      	adds	r3, #1
 80021a0:	f507 52c5 	add.w	r2, r7, #6304	; 0x18a0
 80021a4:	f102 0204 	add.w	r2, r2, #4
 80021a8:	6013      	str	r3, [r2, #0]
 	while(bytesLeft > 0){
 80021aa:	f507 53c4 	add.w	r3, r7, #6272	; 0x1880
 80021ae:	f103 031c 	add.w	r3, r3, #28
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	f73f af41 	bgt.w	800203c <configBitmapFromUart+0x238>
			}
		}
 	}
 	read_usart_message(msg, &huart1, 2, NEWLINE); //get rid of newline left in buffer after reading last 2 chars
 80021ba:	f507 50c0 	add.w	r0, r7, #6144	; 0x1800
 80021be:	f100 000c 	add.w	r0, r0, #12
 80021c2:	230d      	movs	r3, #13
 80021c4:	2202      	movs	r2, #2
 80021c6:	4923      	ldr	r1, [pc, #140]	; (8002254 <configBitmapFromUart+0x450>)
 80021c8:	f002 fff2 	bl	80051b0 <read_usart_message>

 	blist.lastUsedSector = currentSector;
 80021cc:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 80021d0:	f103 0304 	add.w	r3, r3, #4
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	b29a      	uxth	r2, r3
 80021d8:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80021dc:	f103 0308 	add.w	r3, r3, #8
 80021e0:	805a      	strh	r2, [r3, #2]
 	memcpy(sectorBuffer, (uint8_t *) &blist, sizeof(blist));
 80021e2:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 80021e6:	f101 0108 	add.w	r1, r1, #8
 80021ea:	f107 0308 	add.w	r3, r7, #8
 80021ee:	3b08      	subs	r3, #8
 80021f0:	f640 0204 	movw	r2, #2052	; 0x804
 80021f4:	4618      	mov	r0, r3
 80021f6:	f007 f8bb 	bl	8009370 <memcpy>
 	ext_flash_erase_4kB(BITMAP_LIST_SECTOR*SECTOR_SIZE);
 80021fa:	f44f 2048 	mov.w	r0, #819200	; 0xc8000
 80021fe:	f001 fa11 	bl	8003624 <ext_flash_erase_4kB>
 	ext_flash_write_multipage(BITMAP_LIST_SECTOR*SECTOR_SIZE, sectorBuffer, sizeof(blist));
 8002202:	f107 0308 	add.w	r3, r7, #8
 8002206:	3b08      	subs	r3, #8
 8002208:	f640 0204 	movw	r2, #2052	; 0x804
 800220c:	4619      	mov	r1, r3
 800220e:	f44f 2048 	mov.w	r0, #819200	; 0xc8000
 8002212:	f001 fb37 	bl	8003884 <ext_flash_write_multipage>

	if(bytesLeft > 0){
 8002216:	f507 53c4 	add.w	r3, r7, #6272	; 0x1880
 800221a:	f103 031c 	add.w	r3, r3, #28
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2b00      	cmp	r3, #0
 8002222:	dd09      	ble.n	8002238 <configBitmapFromUart+0x434>
		printf("[cl] Bitmap #%d has been PARTIALLY written.\n\r", bm.bitmapNumber);
 8002224:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002228:	881b      	ldrh	r3, [r3, #0]
 800222a:	4619      	mov	r1, r3
 800222c:	480a      	ldr	r0, [pc, #40]	; (8002258 <configBitmapFromUart+0x454>)
 800222e:	f007 f8b5 	bl	800939c <iprintf>
		return 1001;
 8002232:	f240 33e9 	movw	r3, #1001	; 0x3e9
 8002236:	e007      	b.n	8002248 <configBitmapFromUart+0x444>
	}
	printf("[cl] Bitmap #%d has been written.\n\r", bm.bitmapNumber);
 8002238:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800223c:	881b      	ldrh	r3, [r3, #0]
 800223e:	4619      	mov	r1, r3
 8002240:	4806      	ldr	r0, [pc, #24]	; (800225c <configBitmapFromUart+0x458>)
 8002242:	f007 f8ab 	bl	800939c <iprintf>
	return 0;
 8002246:	2300      	movs	r3, #0
}
 8002248:	4618      	mov	r0, r3
 800224a:	f507 57c5 	add.w	r7, r7, #6304	; 0x18a0
 800224e:	3708      	adds	r7, #8
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	20002188 	.word	0x20002188
 8002258:	0800a6f8 	.word	0x0800a6f8
 800225c:	0800a728 	.word	0x0800a728

08002260 <configMarkBitmapsForDelete>:

int configMarkBitmapsForDelete(){
 8002260:	b580      	push	{r7, lr}
 8002262:	f5ad 5d80 	sub.w	sp, sp, #4096	; 0x1000
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
	ext_flash_erase_4kB(BITMAP_LIST_SECTOR*SECTOR_SIZE);
 800226a:	f44f 2048 	mov.w	r0, #819200	; 0xc8000
 800226e:	f001 f9d9 	bl	8003624 <ext_flash_erase_4kB>
	struct bitmapList bl;
	bl.totalBitmaps = 0;
 8002272:	f607 0304 	addw	r3, r7, #2052	; 0x804
 8002276:	2200      	movs	r2, #0
 8002278:	801a      	strh	r2, [r3, #0]
	bl.lastUsedSector = BITMAP_LIST_SECTOR;
 800227a:	f607 0304 	addw	r3, r7, #2052	; 0x804
 800227e:	22c8      	movs	r2, #200	; 0xc8
 8002280:	805a      	strh	r2, [r3, #2]
	uint8_t buff[sizeof(bl)];
	memcpy(buff, (uint8_t *) &bl, sizeof(bl));
 8002282:	f107 0308 	add.w	r3, r7, #8
 8002286:	3b08      	subs	r3, #8
 8002288:	f607 0204 	addw	r2, r7, #2052	; 0x804
 800228c:	4618      	mov	r0, r3
 800228e:	4611      	mov	r1, r2
 8002290:	f640 0304 	movw	r3, #2052	; 0x804
 8002294:	461a      	mov	r2, r3
 8002296:	f007 f86b 	bl	8009370 <memcpy>
	ext_flash_write_multipage(BITMAP_LIST_SECTOR*SECTOR_SIZE, buff, sizeof(bl));
 800229a:	f107 0308 	add.w	r3, r7, #8
 800229e:	3b08      	subs	r3, #8
 80022a0:	f640 0204 	movw	r2, #2052	; 0x804
 80022a4:	4619      	mov	r1, r3
 80022a6:	f44f 2048 	mov.w	r0, #819200	; 0xc8000
 80022aa:	f001 faeb 	bl	8003884 <ext_flash_write_multipage>
	printf("[cl] Bitmaps marked for delete.\n\r");
 80022ae:	4805      	ldr	r0, [pc, #20]	; (80022c4 <configMarkBitmapsForDelete+0x64>)
 80022b0:	f007 f874 	bl	800939c <iprintf>
	return 0;
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	f507 5780 	add.w	r7, r7, #4096	; 0x1000
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	0800a74c 	.word	0x0800a74c

080022c8 <configScreensFromUart>:


int configScreensFromUart(){
 80022c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022ca:	f5ad 5d4b 	sub.w	sp, sp, #12992	; 0x32c0
 80022ce:	b087      	sub	sp, #28
 80022d0:	af04      	add	r7, sp, #16
	int count;
	char msg[128];
	UART_READ_STRING(); //read general config - number of screens
 80022d2:	f507 5048 	add.w	r0, r7, #12800	; 0x3200
 80022d6:	f100 0020 	add.w	r0, r0, #32
 80022da:	230d      	movs	r3, #13
 80022dc:	2280      	movs	r2, #128	; 0x80
 80022de:	49da      	ldr	r1, [pc, #872]	; (8002648 <configScreensFromUart+0x380>)
 80022e0:	f002 ff66 	bl	80051b0 <read_usart_message>
 80022e4:	4603      	mov	r3, r0
 80022e6:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 80022ea:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 80022ee:	6013      	str	r3, [r2, #0]
 80022f0:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 80022f4:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d0e9      	beq.n	80022d2 <configScreensFromUart+0xa>
 80022fe:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002302:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	3b01      	subs	r3, #1
 800230a:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 800230e:	f102 0208 	add.w	r2, r2, #8
 8002312:	4413      	add	r3, r2
 8002314:	2200      	movs	r2, #0
 8002316:	f803 2ca8 	strb.w	r2, [r3, #-168]
	int totalScreens = atoi(msg);
 800231a:	f507 5348 	add.w	r3, r7, #12800	; 0x3200
 800231e:	f103 0320 	add.w	r3, r3, #32
 8002322:	4618      	mov	r0, r3
 8002324:	f006 fff6 	bl	8009314 <atoi>
 8002328:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 800232c:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8002330:	6018      	str	r0, [r3, #0]

	if(totalScreens < 1 || totalScreens >256){
 8002332:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002336:	f103 0328 	add.w	r3, r3, #40	; 0x28
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2b00      	cmp	r3, #0
 800233e:	dd07      	ble.n	8002350 <configScreensFromUart+0x88>
 8002340:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002344:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800234e:	dd0a      	ble.n	8002366 <configScreensFromUart+0x9e>
		printf("[cl] Got %d, which is not a valid number of screens.\n\r", totalScreens);
 8002350:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002354:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8002358:	6819      	ldr	r1, [r3, #0]
 800235a:	48bc      	ldr	r0, [pc, #752]	; (800264c <configScreensFromUart+0x384>)
 800235c:	f007 f81e 	bl	800939c <iprintf>
		return 2;
 8002360:	2302      	movs	r3, #2
 8002362:	f000 bdc7 	b.w	8002ef4 <configScreensFromUart+0xc2c>
	}

	struct generalConfig gconf;

	memset(&gconf.screenSectors, 0, sizeof(gconf.screenSectors));
 8002366:	f507 5340 	add.w	r3, r7, #12288	; 0x3000
 800236a:	f103 031c 	add.w	r3, r3, #28
 800236e:	3302      	adds	r3, #2
 8002370:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002374:	2100      	movs	r1, #0
 8002376:	4618      	mov	r0, r3
 8002378:	f007 f808 	bl	800938c <memset>
	gconf.totalScreens = totalScreens;
 800237c:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002380:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	b2da      	uxtb	r2, r3
 8002388:	f507 5340 	add.w	r3, r7, #12288	; 0x3000
 800238c:	f103 031c 	add.w	r3, r3, #28
 8002390:	701a      	strb	r2, [r3, #0]

	printf("[cl] Ok, expecting %d screens worth of data.\n\r", totalScreens);
 8002392:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002396:	f103 0328 	add.w	r3, r3, #40	; 0x28
 800239a:	6819      	ldr	r1, [r3, #0]
 800239c:	48ac      	ldr	r0, [pc, #688]	; (8002650 <configScreensFromUart+0x388>)
 800239e:	f006 fffd 	bl	800939c <iprintf>

	uint8_t currentScreenIndex = -1;
 80023a2:	23ff      	movs	r3, #255	; 0xff
 80023a4:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 80023a8:	f102 0207 	add.w	r2, r2, #7
 80023ac:	7013      	strb	r3, [r2, #0]
	uint16_t currentSector = GENERAL_CONFIG_SECTOR;
 80023ae:	2300      	movs	r3, #0
 80023b0:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 80023b4:	f102 0204 	add.w	r2, r2, #4
 80023b8:	8013      	strh	r3, [r2, #0]
	uint16_t currentScreenObjectsLeft = 0;
 80023ba:	2300      	movs	r3, #0
 80023bc:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 80023c0:	f102 0202 	add.w	r2, r2, #2
 80023c4:	8013      	strh	r3, [r2, #0]

	char screenStr[] = "screen";
 80023c6:	f507 5340 	add.w	r3, r7, #12288	; 0x3000
 80023ca:	f103 0314 	add.w	r3, r3, #20
 80023ce:	4aa1      	ldr	r2, [pc, #644]	; (8002654 <configScreensFromUart+0x38c>)
 80023d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80023d4:	6018      	str	r0, [r3, #0]
 80023d6:	3304      	adds	r3, #4
 80023d8:	8019      	strh	r1, [r3, #0]
 80023da:	3302      	adds	r3, #2
 80023dc:	0c0a      	lsrs	r2, r1, #16
 80023de:	701a      	strb	r2, [r3, #0]

	#define MAX_DATA_SIZE 8192
	uint8_t sectorBuffer[SECTOR_SIZE]; //holds sector before writing to external flash
	int sectorBufferIndex = 0;
 80023e0:	2300      	movs	r3, #0
 80023e2:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 80023e6:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 80023ea:	6013      	str	r3, [r2, #0]
	uint8_t dataBuffer[MAX_DATA_SIZE];
	int dataBufferIndex = 0;
 80023ec:	2300      	movs	r3, #0
 80023ee:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 80023f2:	f102 0238 	add.w	r2, r2, #56	; 0x38
 80023f6:	6013      	str	r3, [r2, #0]

	while(1){

		if(currentScreenIndex + 1 == totalScreens){
 80023f8:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 80023fc:	f103 0307 	add.w	r3, r3, #7
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	3301      	adds	r3, #1
 8002404:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002408:	f102 0228 	add.w	r2, r2, #40	; 0x28
 800240c:	6812      	ldr	r2, [r2, #0]
 800240e:	429a      	cmp	r2, r3
 8002410:	d12f      	bne.n	8002472 <configScreensFromUart+0x1aa>
			printf("[cl] All screens' data received.\n\r");
 8002412:	4891      	ldr	r0, [pc, #580]	; (8002658 <configScreensFromUart+0x390>)
 8002414:	f006 ffc2 	bl	800939c <iprintf>
	}

	//all screens have been written.
	//Now save generic config, since sector address array has been completed:

	printf("Gconf screens %d \n\r", gconf.totalScreens);
 8002418:	f507 5340 	add.w	r3, r7, #12288	; 0x3000
 800241c:	f103 031c 	add.w	r3, r3, #28
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	4619      	mov	r1, r3
 8002424:	488d      	ldr	r0, [pc, #564]	; (800265c <configScreensFromUart+0x394>)
 8002426:	f006 ffb9 	bl	800939c <iprintf>

	sectorBufferIndex = 0;
 800242a:	2300      	movs	r3, #0
 800242c:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002430:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8002434:	6013      	str	r3, [r2, #0]
	memcpy(sectorBuffer+sectorBufferIndex, (uint8_t *) &gconf, 100);//sizeof(gconf));
 8002436:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 800243a:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8002444:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8002448:	3b14      	subs	r3, #20
 800244a:	4413      	add	r3, r2
 800244c:	f507 5140 	add.w	r1, r7, #12288	; 0x3000
 8002450:	f101 011c 	add.w	r1, r1, #28
 8002454:	2264      	movs	r2, #100	; 0x64
 8002456:	4618      	mov	r0, r3
 8002458:	f006 ff8a 	bl	8009370 <memcpy>

	printf("J ");
 800245c:	4880      	ldr	r0, [pc, #512]	; (8002660 <configScreensFromUart+0x398>)
 800245e:	f006 ff9d 	bl	800939c <iprintf>
	int j;
	for(j=0; j<sizeof(gconf); j++){
 8002462:	2300      	movs	r3, #0
 8002464:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002468:	f102 0230 	add.w	r2, r2, #48	; 0x30
 800246c:	6013      	str	r3, [r2, #0]
 800246e:	f000 bd20 	b.w	8002eb2 <configScreensFromUart+0xbea>
		UART_READ_STRING();
 8002472:	f507 5048 	add.w	r0, r7, #12800	; 0x3200
 8002476:	f100 0020 	add.w	r0, r0, #32
 800247a:	230d      	movs	r3, #13
 800247c:	2280      	movs	r2, #128	; 0x80
 800247e:	4972      	ldr	r1, [pc, #456]	; (8002648 <configScreensFromUart+0x380>)
 8002480:	f002 fe96 	bl	80051b0 <read_usart_message>
 8002484:	4603      	mov	r3, r0
 8002486:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 800248a:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 800248e:	6013      	str	r3, [r2, #0]
 8002490:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002494:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d0e9      	beq.n	8002472 <configScreensFromUart+0x1aa>
 800249e:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 80024a2:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	3b01      	subs	r3, #1
 80024aa:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 80024ae:	f102 0208 	add.w	r2, r2, #8
 80024b2:	4413      	add	r3, r2
 80024b4:	2200      	movs	r2, #0
 80024b6:	f803 2ca8 	strb.w	r2, [r3, #-168]
		if(strcmp(screenStr, msg) != 0){
 80024ba:	f507 5248 	add.w	r2, r7, #12800	; 0x3200
 80024be:	f102 0220 	add.w	r2, r2, #32
 80024c2:	f507 5340 	add.w	r3, r7, #12288	; 0x3000
 80024c6:	f103 0314 	add.w	r3, r3, #20
 80024ca:	4611      	mov	r1, r2
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7fd fe7f 	bl	80001d0 <strcmp>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d00e      	beq.n	80024f6 <configScreensFromUart+0x22e>
			printf("[cl] Unexpected input - wanted %s, got %s. \n\r",screenStr, msg);
 80024d8:	f507 5248 	add.w	r2, r7, #12800	; 0x3200
 80024dc:	f102 0220 	add.w	r2, r2, #32
 80024e0:	f507 5340 	add.w	r3, r7, #12288	; 0x3000
 80024e4:	f103 0314 	add.w	r3, r3, #20
 80024e8:	4619      	mov	r1, r3
 80024ea:	485e      	ldr	r0, [pc, #376]	; (8002664 <configScreensFromUart+0x39c>)
 80024ec:	f006 ff56 	bl	800939c <iprintf>
			return 3;
 80024f0:	2303      	movs	r3, #3
 80024f2:	f000 bcff 	b.w	8002ef4 <configScreensFromUart+0xc2c>
		UART_READ_STRING();
 80024f6:	f507 5048 	add.w	r0, r7, #12800	; 0x3200
 80024fa:	f100 0020 	add.w	r0, r0, #32
 80024fe:	230d      	movs	r3, #13
 8002500:	2280      	movs	r2, #128	; 0x80
 8002502:	4951      	ldr	r1, [pc, #324]	; (8002648 <configScreensFromUart+0x380>)
 8002504:	f002 fe54 	bl	80051b0 <read_usart_message>
 8002508:	4603      	mov	r3, r0
 800250a:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 800250e:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8002512:	6013      	str	r3, [r2, #0]
 8002514:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002518:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d0e9      	beq.n	80024f6 <configScreensFromUart+0x22e>
 8002522:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002526:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	3b01      	subs	r3, #1
 800252e:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 8002532:	f102 0208 	add.w	r2, r2, #8
 8002536:	4413      	add	r3, r2
 8002538:	2200      	movs	r2, #0
 800253a:	f803 2ca8 	strb.w	r2, [r3, #-168]
		currentScreenObjectsLeft = atoi(msg);
 800253e:	f507 5348 	add.w	r3, r7, #12800	; 0x3200
 8002542:	f103 0320 	add.w	r3, r3, #32
 8002546:	4618      	mov	r0, r3
 8002548:	f006 fee4 	bl	8009314 <atoi>
 800254c:	4603      	mov	r3, r0
 800254e:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 8002552:	f102 0202 	add.w	r2, r2, #2
 8002556:	8013      	strh	r3, [r2, #0]
		printf("[cl] Ok, expecting %d objects for current screen.\n\r", currentScreenObjectsLeft);
 8002558:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 800255c:	f103 0302 	add.w	r3, r3, #2
 8002560:	881b      	ldrh	r3, [r3, #0]
 8002562:	4619      	mov	r1, r3
 8002564:	4840      	ldr	r0, [pc, #256]	; (8002668 <configScreensFromUart+0x3a0>)
 8002566:	f006 ff19 	bl	800939c <iprintf>
		screenVar.objectCount = currentScreenObjectsLeft;
 800256a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800256e:	3b38      	subs	r3, #56	; 0x38
 8002570:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 8002574:	f102 0202 	add.w	r2, r2, #2
 8002578:	8812      	ldrh	r2, [r2, #0]
 800257a:	805a      	strh	r2, [r3, #2]
		screenVar.screenNumber = currentScreenIndex;
 800257c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002580:	3b38      	subs	r3, #56	; 0x38
 8002582:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 8002586:	f102 0207 	add.w	r2, r2, #7
 800258a:	7812      	ldrb	r2, [r2, #0]
 800258c:	701a      	strb	r2, [r3, #0]
		currentSector += 1; //begin new sector -- screens are sector-aligned for easier access
 800258e:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8002592:	f103 0304 	add.w	r3, r3, #4
 8002596:	881b      	ldrh	r3, [r3, #0]
 8002598:	3301      	adds	r3, #1
 800259a:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 800259e:	f102 0204 	add.w	r2, r2, #4
 80025a2:	8013      	strh	r3, [r2, #0]
		currentScreenIndex += 1;
 80025a4:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 80025a8:	f103 0307 	add.w	r3, r3, #7
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	3301      	adds	r3, #1
 80025b0:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 80025b4:	f102 0207 	add.w	r2, r2, #7
 80025b8:	7013      	strb	r3, [r2, #0]
		gconf.screenSectors[currentScreenIndex] = currentSector;
 80025ba:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 80025be:	f103 0307 	add.w	r3, r3, #7
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	f507 5240 	add.w	r2, r7, #12288	; 0x3000
 80025c8:	f102 021c 	add.w	r2, r2, #28
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	4413      	add	r3, r2
 80025d0:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 80025d4:	f102 0204 	add.w	r2, r2, #4
 80025d8:	8812      	ldrh	r2, [r2, #0]
 80025da:	805a      	strh	r2, [r3, #2]
		ext_flash_erase_4kB(currentSector*SECTOR_SIZE);
 80025dc:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 80025e0:	f103 0304 	add.w	r3, r3, #4
 80025e4:	881b      	ldrh	r3, [r3, #0]
 80025e6:	031b      	lsls	r3, r3, #12
 80025e8:	4618      	mov	r0, r3
 80025ea:	f001 f81b 	bl	8003624 <ext_flash_erase_4kB>
		memset(sectorBuffer, 0, SECTOR_SIZE);
 80025ee:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80025f2:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80025f6:	3b14      	subs	r3, #20
 80025f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80025fc:	2100      	movs	r1, #0
 80025fe:	4618      	mov	r0, r3
 8002600:	f006 fec4 	bl	800938c <memset>
		sectorBufferIndex = 0;
 8002604:	2300      	movs	r3, #0
 8002606:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 800260a:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 800260e:	6013      	str	r3, [r2, #0]
		memcpy(sectorBuffer+sectorBufferIndex, (uint8_t *) &screenVar, sizeof(screenVar));
 8002610:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002614:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800261e:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8002622:	3b14      	subs	r3, #20
 8002624:	441a      	add	r2, r3
 8002626:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800262a:	3b38      	subs	r3, #56	; 0x38
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	6013      	str	r3, [r2, #0]
		sectorBufferIndex += sizeof(screenVar);
 8002630:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002634:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	3304      	adds	r3, #4
 800263c:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002640:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8002644:	6013      	str	r3, [r2, #0]
		while(currentScreenObjectsLeft > 0){
 8002646:	e3fb      	b.n	8002e40 <configScreensFromUart+0xb78>
 8002648:	20002188 	.word	0x20002188
 800264c:	0800a770 	.word	0x0800a770
 8002650:	0800a7a8 	.word	0x0800a7a8
 8002654:	0800aa2c 	.word	0x0800aa2c
 8002658:	0800a7d8 	.word	0x0800a7d8
 800265c:	0800a7fc 	.word	0x0800a7fc
 8002660:	0800a810 	.word	0x0800a810
 8002664:	0800a814 	.word	0x0800a814
 8002668:	0800a844 	.word	0x0800a844
			currentScreenObjectsLeft--;
 800266c:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8002670:	f103 0302 	add.w	r3, r3, #2
 8002674:	881b      	ldrh	r3, [r3, #0]
 8002676:	3b01      	subs	r3, #1
 8002678:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 800267c:	f102 0202 	add.w	r2, r2, #2
 8002680:	8013      	strh	r3, [r2, #0]
			UART_READ_STRING();
 8002682:	f507 5048 	add.w	r0, r7, #12800	; 0x3200
 8002686:	f100 0020 	add.w	r0, r0, #32
 800268a:	230d      	movs	r3, #13
 800268c:	2280      	movs	r2, #128	; 0x80
 800268e:	49d0      	ldr	r1, [pc, #832]	; (80029d0 <configScreensFromUart+0x708>)
 8002690:	f002 fd8e 	bl	80051b0 <read_usart_message>
 8002694:	4603      	mov	r3, r0
 8002696:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 800269a:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 800269e:	6013      	str	r3, [r2, #0]
 80026a0:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 80026a4:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d0e9      	beq.n	8002682 <configScreensFromUart+0x3ba>
 80026ae:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 80026b2:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	3b01      	subs	r3, #1
 80026ba:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 80026be:	f102 0208 	add.w	r2, r2, #8
 80026c2:	4413      	add	r3, r2
 80026c4:	2200      	movs	r2, #0
 80026c6:	f803 2ca8 	strb.w	r2, [r3, #-168]
			currentObject.objectType = stringToObjectType(msg);
 80026ca:	f507 5348 	add.w	r3, r7, #12800	; 0x3200
 80026ce:	f103 0320 	add.w	r3, r3, #32
 80026d2:	4618      	mov	r0, r3
 80026d4:	f000 ff66 	bl	80035a4 <stringToObjectType>
 80026d8:	4603      	mov	r3, r0
 80026da:	461a      	mov	r2, r3
 80026dc:	f107 0308 	add.w	r3, r7, #8
 80026e0:	3b08      	subs	r3, #8
 80026e2:	701a      	strb	r2, [r3, #0]
			if(currentObject.objectType == none){
 80026e4:	f107 0308 	add.w	r3, r7, #8
 80026e8:	3b08      	subs	r3, #8
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d109      	bne.n	8002704 <configScreensFromUart+0x43c>
				printf("[cl] Object type %s not recognized. \n\r", msg);
 80026f0:	f507 5348 	add.w	r3, r7, #12800	; 0x3200
 80026f4:	f103 0320 	add.w	r3, r3, #32
 80026f8:	4619      	mov	r1, r3
 80026fa:	48b6      	ldr	r0, [pc, #728]	; (80029d4 <configScreensFromUart+0x70c>)
 80026fc:	f006 fe4e 	bl	800939c <iprintf>
				return 4;
 8002700:	2304      	movs	r3, #4
 8002702:	e3f7      	b.n	8002ef4 <configScreensFromUart+0xc2c>
			UART_READ_STRING();
 8002704:	f507 5048 	add.w	r0, r7, #12800	; 0x3200
 8002708:	f100 0020 	add.w	r0, r0, #32
 800270c:	230d      	movs	r3, #13
 800270e:	2280      	movs	r2, #128	; 0x80
 8002710:	49af      	ldr	r1, [pc, #700]	; (80029d0 <configScreensFromUart+0x708>)
 8002712:	f002 fd4d 	bl	80051b0 <read_usart_message>
 8002716:	4603      	mov	r3, r0
 8002718:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 800271c:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8002720:	6013      	str	r3, [r2, #0]
 8002722:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002726:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d0e9      	beq.n	8002704 <configScreensFromUart+0x43c>
 8002730:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002734:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	3b01      	subs	r3, #1
 800273c:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 8002740:	f102 0208 	add.w	r2, r2, #8
 8002744:	4413      	add	r3, r2
 8002746:	2200      	movs	r2, #0
 8002748:	f803 2ca8 	strb.w	r2, [r3, #-168]
			currentObject.objectId = (uint16_t) atoi(msg);
 800274c:	f507 5348 	add.w	r3, r7, #12800	; 0x3200
 8002750:	f103 0320 	add.w	r3, r3, #32
 8002754:	4618      	mov	r0, r3
 8002756:	f006 fddd 	bl	8009314 <atoi>
 800275a:	4603      	mov	r3, r0
 800275c:	b29a      	uxth	r2, r3
 800275e:	f107 0308 	add.w	r3, r7, #8
 8002762:	3b08      	subs	r3, #8
 8002764:	805a      	strh	r2, [r3, #2]
			UART_READ_STRING();
 8002766:	f507 5048 	add.w	r0, r7, #12800	; 0x3200
 800276a:	f100 0020 	add.w	r0, r0, #32
 800276e:	230d      	movs	r3, #13
 8002770:	2280      	movs	r2, #128	; 0x80
 8002772:	4997      	ldr	r1, [pc, #604]	; (80029d0 <configScreensFromUart+0x708>)
 8002774:	f002 fd1c 	bl	80051b0 <read_usart_message>
 8002778:	4603      	mov	r3, r0
 800277a:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 800277e:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8002782:	6013      	str	r3, [r2, #0]
 8002784:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002788:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d0e9      	beq.n	8002766 <configScreensFromUart+0x49e>
 8002792:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002796:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	3b01      	subs	r3, #1
 800279e:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 80027a2:	f102 0208 	add.w	r2, r2, #8
 80027a6:	4413      	add	r3, r2
 80027a8:	2200      	movs	r2, #0
 80027aa:	f803 2ca8 	strb.w	r2, [r3, #-168]
			currentObject.xstart = (uint16_t) atoi(msg);
 80027ae:	f507 5348 	add.w	r3, r7, #12800	; 0x3200
 80027b2:	f103 0320 	add.w	r3, r3, #32
 80027b6:	4618      	mov	r0, r3
 80027b8:	f006 fdac 	bl	8009314 <atoi>
 80027bc:	4603      	mov	r3, r0
 80027be:	b29a      	uxth	r2, r3
 80027c0:	f107 0308 	add.w	r3, r7, #8
 80027c4:	3b08      	subs	r3, #8
 80027c6:	809a      	strh	r2, [r3, #4]
			UART_READ_STRING();
 80027c8:	f507 5048 	add.w	r0, r7, #12800	; 0x3200
 80027cc:	f100 0020 	add.w	r0, r0, #32
 80027d0:	230d      	movs	r3, #13
 80027d2:	2280      	movs	r2, #128	; 0x80
 80027d4:	497e      	ldr	r1, [pc, #504]	; (80029d0 <configScreensFromUart+0x708>)
 80027d6:	f002 fceb 	bl	80051b0 <read_usart_message>
 80027da:	4603      	mov	r3, r0
 80027dc:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 80027e0:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 80027e4:	6013      	str	r3, [r2, #0]
 80027e6:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 80027ea:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d0e9      	beq.n	80027c8 <configScreensFromUart+0x500>
 80027f4:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 80027f8:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	3b01      	subs	r3, #1
 8002800:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 8002804:	f102 0208 	add.w	r2, r2, #8
 8002808:	4413      	add	r3, r2
 800280a:	2200      	movs	r2, #0
 800280c:	f803 2ca8 	strb.w	r2, [r3, #-168]
			currentObject.ystart = (uint16_t) atoi(msg);
 8002810:	f507 5348 	add.w	r3, r7, #12800	; 0x3200
 8002814:	f103 0320 	add.w	r3, r3, #32
 8002818:	4618      	mov	r0, r3
 800281a:	f006 fd7b 	bl	8009314 <atoi>
 800281e:	4603      	mov	r3, r0
 8002820:	b29a      	uxth	r2, r3
 8002822:	f107 0308 	add.w	r3, r7, #8
 8002826:	3b08      	subs	r3, #8
 8002828:	80da      	strh	r2, [r3, #6]
			UART_READ_STRING();
 800282a:	f507 5048 	add.w	r0, r7, #12800	; 0x3200
 800282e:	f100 0020 	add.w	r0, r0, #32
 8002832:	230d      	movs	r3, #13
 8002834:	2280      	movs	r2, #128	; 0x80
 8002836:	4966      	ldr	r1, [pc, #408]	; (80029d0 <configScreensFromUart+0x708>)
 8002838:	f002 fcba 	bl	80051b0 <read_usart_message>
 800283c:	4603      	mov	r3, r0
 800283e:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002842:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8002846:	6013      	str	r3, [r2, #0]
 8002848:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 800284c:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d0e9      	beq.n	800282a <configScreensFromUart+0x562>
 8002856:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 800285a:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	3b01      	subs	r3, #1
 8002862:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 8002866:	f102 0208 	add.w	r2, r2, #8
 800286a:	4413      	add	r3, r2
 800286c:	2200      	movs	r2, #0
 800286e:	f803 2ca8 	strb.w	r2, [r3, #-168]
			currentObject.xend = (uint16_t) atoi(msg);
 8002872:	f507 5348 	add.w	r3, r7, #12800	; 0x3200
 8002876:	f103 0320 	add.w	r3, r3, #32
 800287a:	4618      	mov	r0, r3
 800287c:	f006 fd4a 	bl	8009314 <atoi>
 8002880:	4603      	mov	r3, r0
 8002882:	b29a      	uxth	r2, r3
 8002884:	f107 0308 	add.w	r3, r7, #8
 8002888:	3b08      	subs	r3, #8
 800288a:	811a      	strh	r2, [r3, #8]
			UART_READ_STRING();
 800288c:	f507 5048 	add.w	r0, r7, #12800	; 0x3200
 8002890:	f100 0020 	add.w	r0, r0, #32
 8002894:	230d      	movs	r3, #13
 8002896:	2280      	movs	r2, #128	; 0x80
 8002898:	494d      	ldr	r1, [pc, #308]	; (80029d0 <configScreensFromUart+0x708>)
 800289a:	f002 fc89 	bl	80051b0 <read_usart_message>
 800289e:	4603      	mov	r3, r0
 80028a0:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 80028a4:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 80028a8:	6013      	str	r3, [r2, #0]
 80028aa:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 80028ae:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d0e9      	beq.n	800288c <configScreensFromUart+0x5c4>
 80028b8:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 80028bc:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	3b01      	subs	r3, #1
 80028c4:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 80028c8:	f102 0208 	add.w	r2, r2, #8
 80028cc:	4413      	add	r3, r2
 80028ce:	2200      	movs	r2, #0
 80028d0:	f803 2ca8 	strb.w	r2, [r3, #-168]
			currentObject.yend = (uint16_t) atoi(msg);
 80028d4:	f507 5348 	add.w	r3, r7, #12800	; 0x3200
 80028d8:	f103 0320 	add.w	r3, r3, #32
 80028dc:	4618      	mov	r0, r3
 80028de:	f006 fd19 	bl	8009314 <atoi>
 80028e2:	4603      	mov	r3, r0
 80028e4:	b29a      	uxth	r2, r3
 80028e6:	f107 0308 	add.w	r3, r7, #8
 80028ea:	3b08      	subs	r3, #8
 80028ec:	815a      	strh	r2, [r3, #10]
			UART_READ_STRING();
 80028ee:	f507 5048 	add.w	r0, r7, #12800	; 0x3200
 80028f2:	f100 0020 	add.w	r0, r0, #32
 80028f6:	230d      	movs	r3, #13
 80028f8:	2280      	movs	r2, #128	; 0x80
 80028fa:	4935      	ldr	r1, [pc, #212]	; (80029d0 <configScreensFromUart+0x708>)
 80028fc:	f002 fc58 	bl	80051b0 <read_usart_message>
 8002900:	4603      	mov	r3, r0
 8002902:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002906:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 800290a:	6013      	str	r3, [r2, #0]
 800290c:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002910:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d0e9      	beq.n	80028ee <configScreensFromUart+0x626>
 800291a:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 800291e:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	3b01      	subs	r3, #1
 8002926:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 800292a:	f102 0208 	add.w	r2, r2, #8
 800292e:	4413      	add	r3, r2
 8002930:	2200      	movs	r2, #0
 8002932:	f803 2ca8 	strb.w	r2, [r3, #-168]
			currentObject.dataLen = (uint16_t) atoi(msg);
 8002936:	f507 5348 	add.w	r3, r7, #12800	; 0x3200
 800293a:	f103 0320 	add.w	r3, r3, #32
 800293e:	4618      	mov	r0, r3
 8002940:	f006 fce8 	bl	8009314 <atoi>
 8002944:	4603      	mov	r3, r0
 8002946:	b29a      	uxth	r2, r3
 8002948:	f107 0308 	add.w	r3, r7, #8
 800294c:	3b08      	subs	r3, #8
 800294e:	819a      	strh	r2, [r3, #12]
			PRINT_OBJECT_HEADER(currentObject);
 8002950:	f107 0308 	add.w	r3, r7, #8
 8002954:	3b08      	subs	r3, #8
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	461c      	mov	r4, r3
 800295a:	f107 0308 	add.w	r3, r7, #8
 800295e:	3b08      	subs	r3, #8
 8002960:	885b      	ldrh	r3, [r3, #2]
 8002962:	461d      	mov	r5, r3
 8002964:	f107 0308 	add.w	r3, r7, #8
 8002968:	3b08      	subs	r3, #8
 800296a:	889b      	ldrh	r3, [r3, #4]
 800296c:	461e      	mov	r6, r3
 800296e:	f107 0308 	add.w	r3, r7, #8
 8002972:	3b08      	subs	r3, #8
 8002974:	88db      	ldrh	r3, [r3, #6]
 8002976:	461a      	mov	r2, r3
 8002978:	f107 0308 	add.w	r3, r7, #8
 800297c:	3b08      	subs	r3, #8
 800297e:	891b      	ldrh	r3, [r3, #8]
 8002980:	4619      	mov	r1, r3
 8002982:	f107 0308 	add.w	r3, r7, #8
 8002986:	3b08      	subs	r3, #8
 8002988:	895b      	ldrh	r3, [r3, #10]
 800298a:	4618      	mov	r0, r3
 800298c:	f107 0308 	add.w	r3, r7, #8
 8002990:	3b08      	subs	r3, #8
 8002992:	899b      	ldrh	r3, [r3, #12]
 8002994:	9303      	str	r3, [sp, #12]
 8002996:	9002      	str	r0, [sp, #8]
 8002998:	9101      	str	r1, [sp, #4]
 800299a:	9200      	str	r2, [sp, #0]
 800299c:	4633      	mov	r3, r6
 800299e:	462a      	mov	r2, r5
 80029a0:	4621      	mov	r1, r4
 80029a2:	480d      	ldr	r0, [pc, #52]	; (80029d8 <configScreensFromUart+0x710>)
 80029a4:	f006 fcfa 	bl	800939c <iprintf>
			if(currentObject.dataLen > MAX_DATA_SIZE){
 80029a8:	f107 0308 	add.w	r3, r7, #8
 80029ac:	3b08      	subs	r3, #8
 80029ae:	899b      	ldrh	r3, [r3, #12]
 80029b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029b4:	d914      	bls.n	80029e0 <configScreensFromUart+0x718>
				printf("[cl] Object (id=%d) data exceeds MAX_DATA_SIZE = %d.\n\r", currentObject.objectId, MAX_DATA_SIZE);
 80029b6:	f107 0308 	add.w	r3, r7, #8
 80029ba:	3b08      	subs	r3, #8
 80029bc:	885b      	ldrh	r3, [r3, #2]
 80029be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029c2:	4619      	mov	r1, r3
 80029c4:	4805      	ldr	r0, [pc, #20]	; (80029dc <configScreensFromUart+0x714>)
 80029c6:	f006 fce9 	bl	800939c <iprintf>
				return 5;
 80029ca:	2305      	movs	r3, #5
 80029cc:	e237      	b.n	8002e3e <configScreensFromUart+0xb76>
 80029ce:	bf00      	nop
 80029d0:	20002188 	.word	0x20002188
 80029d4:	0800a878 	.word	0x0800a878
 80029d8:	0800a8a0 	.word	0x0800a8a0
 80029dc:	0800a8dc 	.word	0x0800a8dc
			int spaceLeft = SECTOR_SIZE - sectorBufferIndex;
 80029e0:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 80029e4:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 80029ee:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 80029f2:	f102 0224 	add.w	r2, r2, #36	; 0x24
 80029f6:	6013      	str	r3, [r2, #0]
			if(spaceLeft >= sizeof(currentObject)){
 80029f8:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 80029fc:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2b0d      	cmp	r3, #13
 8002a04:	d91d      	bls.n	8002a42 <configScreensFromUart+0x77a>
				memcpy(sectorBuffer+sectorBufferIndex, (uint8_t *) &currentObject, sizeof(currentObject));
 8002a06:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002a0a:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8002a14:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8002a18:	3b14      	subs	r3, #20
 8002a1a:	1898      	adds	r0, r3, r2
 8002a1c:	f107 0308 	add.w	r3, r7, #8
 8002a20:	3b08      	subs	r3, #8
 8002a22:	220e      	movs	r2, #14
 8002a24:	4619      	mov	r1, r3
 8002a26:	f006 fca3 	bl	8009370 <memcpy>
				sectorBufferIndex += sizeof(currentObject);
 8002a2a:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002a2e:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	330e      	adds	r3, #14
 8002a36:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002a3a:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8002a3e:	6013      	str	r3, [r2, #0]
 8002a40:	e08b      	b.n	8002b5a <configScreensFromUart+0x892>
				memcpy(sectorBuffer+sectorBufferIndex, (uint8_t *) &currentObject, spaceLeft);
 8002a42:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002a46:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8002a50:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8002a54:	3b14      	subs	r3, #20
 8002a56:	1898      	adds	r0, r3, r2
 8002a58:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002a5c:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	f107 0308 	add.w	r3, r7, #8
 8002a66:	3b08      	subs	r3, #8
 8002a68:	4619      	mov	r1, r3
 8002a6a:	f006 fc81 	bl	8009370 <memcpy>
				ext_flash_write_multipage(currentSector*SECTOR_SIZE, sectorBuffer, SECTOR_SIZE);
 8002a6e:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8002a72:	f103 0304 	add.w	r3, r3, #4
 8002a76:	881b      	ldrh	r3, [r3, #0]
 8002a78:	031b      	lsls	r3, r3, #12
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8002a80:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8002a84:	3b14      	subs	r3, #20
 8002a86:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	f000 fefa 	bl	8003884 <ext_flash_write_multipage>
				currentSector += 1;
 8002a90:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8002a94:	f103 0304 	add.w	r3, r3, #4
 8002a98:	881b      	ldrh	r3, [r3, #0]
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 8002aa0:	f102 0204 	add.w	r2, r2, #4
 8002aa4:	8013      	strh	r3, [r2, #0]
				if(currentSector > MAX_SCREEN_SECTOR){
 8002aa6:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8002aaa:	f103 0304 	add.w	r3, r3, #4
 8002aae:	881b      	ldrh	r3, [r3, #0]
 8002ab0:	2bc7      	cmp	r3, #199	; 0xc7
 8002ab2:	d909      	bls.n	8002ac8 <configScreensFromUart+0x800>
					printf("[cl] Screen memory size exceeded trying to save header of object id %d\n\r", currentObject.objectId);
 8002ab4:	f107 0308 	add.w	r3, r7, #8
 8002ab8:	3b08      	subs	r3, #8
 8002aba:	885b      	ldrh	r3, [r3, #2]
 8002abc:	4619      	mov	r1, r3
 8002abe:	48ca      	ldr	r0, [pc, #808]	; (8002de8 <configScreensFromUart+0xb20>)
 8002ac0:	f006 fc6c 	bl	800939c <iprintf>
					return 6;
 8002ac4:	2306      	movs	r3, #6
 8002ac6:	e1ba      	b.n	8002e3e <configScreensFromUart+0xb76>
				ext_flash_erase_4kB(currentSector*SECTOR_SIZE);
 8002ac8:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8002acc:	f103 0304 	add.w	r3, r3, #4
 8002ad0:	881b      	ldrh	r3, [r3, #0]
 8002ad2:	031b      	lsls	r3, r3, #12
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f000 fda5 	bl	8003624 <ext_flash_erase_4kB>
				memset(sectorBuffer, 0, SECTOR_SIZE);
 8002ada:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8002ade:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8002ae2:	3b14      	subs	r3, #20
 8002ae4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002ae8:	2100      	movs	r1, #0
 8002aea:	4618      	mov	r0, r3
 8002aec:	f006 fc4e 	bl	800938c <memset>
				sectorBufferIndex = 0;
 8002af0:	2300      	movs	r3, #0
 8002af2:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002af6:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8002afa:	6013      	str	r3, [r2, #0]
				memcpy(sectorBuffer+sectorBufferIndex, ((uint8_t *) &currentObject)+spaceLeft, (sizeof(currentObject) - spaceLeft));
 8002afc:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002b00:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8002b0a:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8002b0e:	3b14      	subs	r3, #20
 8002b10:	1898      	adds	r0, r3, r2
 8002b12:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002b16:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	f107 0308 	add.w	r3, r7, #8
 8002b20:	3b08      	subs	r3, #8
 8002b22:	1899      	adds	r1, r3, r2
 8002b24:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002b28:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f1c3 030e 	rsb	r3, r3, #14
 8002b32:	461a      	mov	r2, r3
 8002b34:	f006 fc1c 	bl	8009370 <memcpy>
				sectorBufferIndex += (sizeof(currentObject) - spaceLeft);
 8002b38:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002b3c:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002b46:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	330e      	adds	r3, #14
 8002b50:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002b54:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8002b58:	6013      	str	r3, [r2, #0]
			uint16_t objectDataBytesLeft = currentObject.dataLen;
 8002b5a:	f107 0308 	add.w	r3, r7, #8
 8002b5e:	3b08      	subs	r3, #8
 8002b60:	899b      	ldrh	r3, [r3, #12]
 8002b62:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002b66:	f102 0236 	add.w	r2, r2, #54	; 0x36
 8002b6a:	8013      	strh	r3, [r2, #0]
			dataBufferIndex = 0;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002b72:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8002b76:	6013      	str	r3, [r2, #0]
			while(objectDataBytesLeft > 0){
 8002b78:	e060      	b.n	8002c3c <configScreensFromUart+0x974>
				do{count = read_usart_message(msg, &huart1, 2, NEWLINE);} while (count==0);
 8002b7a:	f507 5048 	add.w	r0, r7, #12800	; 0x3200
 8002b7e:	f100 0020 	add.w	r0, r0, #32
 8002b82:	230d      	movs	r3, #13
 8002b84:	2202      	movs	r2, #2
 8002b86:	4999      	ldr	r1, [pc, #612]	; (8002dec <configScreensFromUart+0xb24>)
 8002b88:	f002 fb12 	bl	80051b0 <read_usart_message>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002b92:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8002b96:	6013      	str	r3, [r2, #0]
 8002b98:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002b9c:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d0e9      	beq.n	8002b7a <configScreensFromUart+0x8b2>
				if(count!=2){
 8002ba6:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002baa:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d009      	beq.n	8002bc8 <configScreensFromUart+0x900>
					printf("[cl] Error reading hex data of object with id %d \n\r", currentObject.objectId);
 8002bb4:	f107 0308 	add.w	r3, r7, #8
 8002bb8:	3b08      	subs	r3, #8
 8002bba:	885b      	ldrh	r3, [r3, #2]
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	488c      	ldr	r0, [pc, #560]	; (8002df0 <configScreensFromUart+0xb28>)
 8002bc0:	f006 fbec 	bl	800939c <iprintf>
					return 7;
 8002bc4:	2307      	movs	r3, #7
 8002bc6:	e13a      	b.n	8002e3e <configScreensFromUart+0xb76>
				msg[2] = 0;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	f507 5248 	add.w	r2, r7, #12800	; 0x3200
 8002bce:	f102 0222 	add.w	r2, r2, #34	; 0x22
 8002bd2:	7013      	strb	r3, [r2, #0]
				uint8_t deHexedByte = (uint8_t) strtol(msg, NULL, 16);
 8002bd4:	f507 5348 	add.w	r3, r7, #12800	; 0x3200
 8002bd8:	f103 0320 	add.w	r3, r3, #32
 8002bdc:	2210      	movs	r2, #16
 8002bde:	2100      	movs	r1, #0
 8002be0:	4618      	mov	r0, r3
 8002be2:	f006 fc7f 	bl	80094e4 <strtol>
 8002be6:	4603      	mov	r3, r0
 8002be8:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002bec:	f102 0223 	add.w	r2, r2, #35	; 0x23
 8002bf0:	7013      	strb	r3, [r2, #0]
				dataBuffer[dataBufferIndex] = deHexedByte;
 8002bf2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002bf6:	3b34      	subs	r3, #52	; 0x34
 8002bf8:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002bfc:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8002c00:	6812      	ldr	r2, [r2, #0]
 8002c02:	4413      	add	r3, r2
 8002c04:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002c08:	f102 0223 	add.w	r2, r2, #35	; 0x23
 8002c0c:	7812      	ldrb	r2, [r2, #0]
 8002c0e:	701a      	strb	r2, [r3, #0]
				dataBufferIndex++;
 8002c10:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002c14:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002c20:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8002c24:	6013      	str	r3, [r2, #0]
				objectDataBytesLeft--;
 8002c26:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002c2a:	f103 0336 	add.w	r3, r3, #54	; 0x36
 8002c2e:	881b      	ldrh	r3, [r3, #0]
 8002c30:	3b01      	subs	r3, #1
 8002c32:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002c36:	f102 0236 	add.w	r2, r2, #54	; 0x36
 8002c3a:	8013      	strh	r3, [r2, #0]
			while(objectDataBytesLeft > 0){
 8002c3c:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002c40:	f103 0336 	add.w	r3, r3, #54	; 0x36
 8002c44:	881b      	ldrh	r3, [r3, #0]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d197      	bne.n	8002b7a <configScreensFromUart+0x8b2>
			read_usart_message(msg, &huart1, 2, NEWLINE); //to remove newline character from uart input buffer
 8002c4a:	f507 5048 	add.w	r0, r7, #12800	; 0x3200
 8002c4e:	f100 0020 	add.w	r0, r0, #32
 8002c52:	230d      	movs	r3, #13
 8002c54:	2202      	movs	r2, #2
 8002c56:	4965      	ldr	r1, [pc, #404]	; (8002dec <configScreensFromUart+0xb24>)
 8002c58:	f002 faaa 	bl	80051b0 <read_usart_message>
			objectDataBytesLeft = currentObject.dataLen;
 8002c5c:	f107 0308 	add.w	r3, r7, #8
 8002c60:	3b08      	subs	r3, #8
 8002c62:	899b      	ldrh	r3, [r3, #12]
 8002c64:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002c68:	f102 0236 	add.w	r2, r2, #54	; 0x36
 8002c6c:	8013      	strh	r3, [r2, #0]
			dataBufferIndex = 0;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002c74:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8002c78:	6013      	str	r3, [r2, #0]
			while(objectDataBytesLeft > 0){
 8002c7a:	e0d7      	b.n	8002e2c <configScreensFromUart+0xb64>
				spaceLeft = SECTOR_SIZE - sectorBufferIndex;
 8002c7c:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002c80:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8002c8a:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002c8e:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8002c92:	6013      	str	r3, [r2, #0]
				if(spaceLeft >= objectDataBytesLeft){
 8002c94:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002c98:	f103 0336 	add.w	r3, r3, #54	; 0x36
 8002c9c:	881b      	ldrh	r3, [r3, #0]
 8002c9e:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002ca2:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8002ca6:	6812      	ldr	r2, [r2, #0]
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	db32      	blt.n	8002d12 <configScreensFromUart+0xa4a>
					memcpy(sectorBuffer+sectorBufferIndex, dataBuffer + dataBufferIndex, objectDataBytesLeft);
 8002cac:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002cb0:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8002cba:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8002cbe:	3b14      	subs	r3, #20
 8002cc0:	1898      	adds	r0, r3, r2
 8002cc2:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002cc6:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002cd0:	3b34      	subs	r3, #52	; 0x34
 8002cd2:	4413      	add	r3, r2
 8002cd4:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002cd8:	f102 0236 	add.w	r2, r2, #54	; 0x36
 8002cdc:	8812      	ldrh	r2, [r2, #0]
 8002cde:	4619      	mov	r1, r3
 8002ce0:	f006 fb46 	bl	8009370 <memcpy>
					sectorBufferIndex += objectDataBytesLeft;
 8002ce4:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002ce8:	f103 0336 	add.w	r3, r3, #54	; 0x36
 8002cec:	881b      	ldrh	r3, [r3, #0]
 8002cee:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002cf2:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8002cf6:	6812      	ldr	r2, [r2, #0]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002cfe:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8002d02:	6013      	str	r3, [r2, #0]
					objectDataBytesLeft = 0;
 8002d04:	2300      	movs	r3, #0
 8002d06:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002d0a:	f102 0236 	add.w	r2, r2, #54	; 0x36
 8002d0e:	8013      	strh	r3, [r2, #0]
 8002d10:	e08c      	b.n	8002e2c <configScreensFromUart+0xb64>
					memcpy(sectorBuffer+sectorBufferIndex, dataBuffer + dataBufferIndex, spaceLeft);
 8002d12:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002d16:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8002d20:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8002d24:	3b14      	subs	r3, #20
 8002d26:	1898      	adds	r0, r3, r2
 8002d28:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002d2c:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002d36:	3b34      	subs	r3, #52	; 0x34
 8002d38:	4413      	add	r3, r2
 8002d3a:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002d3e:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8002d42:	6812      	ldr	r2, [r2, #0]
 8002d44:	4619      	mov	r1, r3
 8002d46:	f006 fb13 	bl	8009370 <memcpy>
					dataBufferIndex += spaceLeft;
 8002d4a:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002d4e:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002d58:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4413      	add	r3, r2
 8002d60:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002d64:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8002d68:	6013      	str	r3, [r2, #0]
					objectDataBytesLeft -= spaceLeft;
 8002d6a:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002d6e:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002d7a:	f102 0236 	add.w	r2, r2, #54	; 0x36
 8002d7e:	8812      	ldrh	r2, [r2, #0]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002d86:	f102 0236 	add.w	r2, r2, #54	; 0x36
 8002d8a:	8013      	strh	r3, [r2, #0]
					ext_flash_write_multipage(currentSector*SECTOR_SIZE, sectorBuffer, SECTOR_SIZE);
 8002d8c:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8002d90:	f103 0304 	add.w	r3, r3, #4
 8002d94:	881b      	ldrh	r3, [r3, #0]
 8002d96:	031b      	lsls	r3, r3, #12
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8002d9e:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8002da2:	3b14      	subs	r3, #20
 8002da4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002da8:	4619      	mov	r1, r3
 8002daa:	f000 fd6b 	bl	8003884 <ext_flash_write_multipage>
					currentSector += 1;
 8002dae:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8002db2:	f103 0304 	add.w	r3, r3, #4
 8002db6:	881b      	ldrh	r3, [r3, #0]
 8002db8:	3301      	adds	r3, #1
 8002dba:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 8002dbe:	f102 0204 	add.w	r2, r2, #4
 8002dc2:	8013      	strh	r3, [r2, #0]
					if(currentSector > MAX_SCREEN_SECTOR){
 8002dc4:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8002dc8:	f103 0304 	add.w	r3, r3, #4
 8002dcc:	881b      	ldrh	r3, [r3, #0]
 8002dce:	2bc7      	cmp	r3, #199	; 0xc7
 8002dd0:	d912      	bls.n	8002df8 <configScreensFromUart+0xb30>
						printf("[cl] Screen memory size exceeded while trying to save data of object id %d\n\r", currentObject.objectId);
 8002dd2:	f107 0308 	add.w	r3, r7, #8
 8002dd6:	3b08      	subs	r3, #8
 8002dd8:	885b      	ldrh	r3, [r3, #2]
 8002dda:	4619      	mov	r1, r3
 8002ddc:	4805      	ldr	r0, [pc, #20]	; (8002df4 <configScreensFromUart+0xb2c>)
 8002dde:	f006 fadd 	bl	800939c <iprintf>
						return 8;
 8002de2:	2308      	movs	r3, #8
 8002de4:	e02b      	b.n	8002e3e <configScreensFromUart+0xb76>
 8002de6:	bf00      	nop
 8002de8:	0800a914 	.word	0x0800a914
 8002dec:	20002188 	.word	0x20002188
 8002df0:	0800a960 	.word	0x0800a960
 8002df4:	0800a994 	.word	0x0800a994
					ext_flash_erase_4kB(currentSector*SECTOR_SIZE);
 8002df8:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8002dfc:	f103 0304 	add.w	r3, r3, #4
 8002e00:	881b      	ldrh	r3, [r3, #0]
 8002e02:	031b      	lsls	r3, r3, #12
 8002e04:	4618      	mov	r0, r3
 8002e06:	f000 fc0d 	bl	8003624 <ext_flash_erase_4kB>
					memset(sectorBuffer, 0, SECTOR_SIZE);
 8002e0a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8002e0e:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8002e12:	3b14      	subs	r3, #20
 8002e14:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002e18:	2100      	movs	r1, #0
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f006 fab6 	bl	800938c <memset>
					sectorBufferIndex = 0;
 8002e20:	2300      	movs	r3, #0
 8002e22:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002e26:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8002e2a:	6013      	str	r3, [r2, #0]
			while(objectDataBytesLeft > 0){
 8002e2c:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002e30:	f103 0336 	add.w	r3, r3, #54	; 0x36
 8002e34:	881b      	ldrh	r3, [r3, #0]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	f47f af20 	bne.w	8002c7c <configScreensFromUart+0x9b4>
 8002e3c:	e000      	b.n	8002e40 <configScreensFromUart+0xb78>
			return 3;
 8002e3e:	e059      	b.n	8002ef4 <configScreensFromUart+0xc2c>
		while(currentScreenObjectsLeft > 0){
 8002e40:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8002e44:	f103 0302 	add.w	r3, r3, #2
 8002e48:	881b      	ldrh	r3, [r3, #0]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	f47f ac0e 	bne.w	800266c <configScreensFromUart+0x3a4>
		ext_flash_write_multipage(currentSector*SECTOR_SIZE, sectorBuffer, sectorBufferIndex);
 8002e50:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8002e54:	f103 0304 	add.w	r3, r3, #4
 8002e58:	881b      	ldrh	r3, [r3, #0]
 8002e5a:	031b      	lsls	r3, r3, #12
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002e62:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8002e6c:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8002e70:	3b14      	subs	r3, #20
 8002e72:	4619      	mov	r1, r3
 8002e74:	f000 fd06 	bl	8003884 <ext_flash_write_multipage>
	while(1){
 8002e78:	f7ff babe 	b.w	80023f8 <configScreensFromUart+0x130>
		printf("%x ", sectorBuffer[j]);
 8002e7c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8002e80:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8002e84:	3b14      	subs	r3, #20
 8002e86:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002e8a:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8002e8e:	6812      	ldr	r2, [r2, #0]
 8002e90:	4413      	add	r3, r2
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	4619      	mov	r1, r3
 8002e96:	481a      	ldr	r0, [pc, #104]	; (8002f00 <configScreensFromUart+0xc38>)
 8002e98:	f006 fa80 	bl	800939c <iprintf>
	for(j=0; j<sizeof(gconf); j++){
 8002e9c:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002ea0:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002eac:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8002eb0:	6013      	str	r3, [r2, #0]
 8002eb2:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002eb6:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f240 2201 	movw	r2, #513	; 0x201
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d9db      	bls.n	8002e7c <configScreensFromUart+0xbb4>
	}

	ext_flash_erase_4kB(GENERAL_CONFIG_SECTOR*SECTOR_SIZE);
 8002ec4:	2000      	movs	r0, #0
 8002ec6:	f000 fbad 	bl	8003624 <ext_flash_erase_4kB>
	ext_flash_write_multipage(GENERAL_CONFIG_SECTOR*SECTOR_SIZE, sectorBuffer, sizeof(gconf));
 8002eca:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8002ece:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8002ed2:	3b14      	subs	r3, #20
 8002ed4:	f240 2202 	movw	r2, #514	; 0x202
 8002ed8:	4619      	mov	r1, r3
 8002eda:	2000      	movs	r0, #0
 8002edc:	f000 fcd2 	bl	8003884 <ext_flash_write_multipage>
	printf("[cl] Config from UART finished. Furthest sector written to: %d \n\r", currentSector);
 8002ee0:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8002ee4:	f103 0304 	add.w	r3, r3, #4
 8002ee8:	881b      	ldrh	r3, [r3, #0]
 8002eea:	4619      	mov	r1, r3
 8002eec:	4805      	ldr	r0, [pc, #20]	; (8002f04 <configScreensFromUart+0xc3c>)
 8002eee:	f006 fa55 	bl	800939c <iprintf>

	return 0;
 8002ef2:	2300      	movs	r3, #0

}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f507 574b 	add.w	r7, r7, #12992	; 0x32c0
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f00:	0800a9e4 	.word	0x0800a9e4
 8002f04:	0800a9e8 	.word	0x0800a9e8

08002f08 <readGeneralConfig>:

/*
 * Reads the general configuration struct from external flash into variable pointed at by @destination.
 */
void readGeneralConfig(struct generalConfig *destination){
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	1d3b      	adds	r3, r7, #4
 8002f12:	6018      	str	r0, [r3, #0]
	uint8_t buffer[sizeof(struct generalConfig)];
	ext_flash_read(GENERAL_CONFIG_SECTOR*SECTOR_SIZE, buffer, sizeof(struct generalConfig));
 8002f14:	f107 030c 	add.w	r3, r7, #12
 8002f18:	f240 2202 	movw	r2, #514	; 0x202
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	2000      	movs	r0, #0
 8002f20:	f000 fbcf 	bl	80036c2 <ext_flash_read>
	*destination = *((struct generalConfig *) buffer);
 8002f24:	f107 020c 	add.w	r2, r7, #12
 8002f28:	1d3b      	adds	r3, r7, #4
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	4611      	mov	r1, r2
 8002f30:	f240 2302 	movw	r3, #514	; 0x202
 8002f34:	461a      	mov	r2, r3
 8002f36:	f006 fa1b 	bl	8009370 <memcpy>
	/*int i;
	for(i = 0; i<sizeof(struct generalConfig); i++){
		printf("%x,", buffer[i]);
	}
	printf("\n\r");*/
}
 8002f3a:	bf00      	nop
 8002f3c:	f507 7704 	add.w	r7, r7, #528	; 0x210
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <readBitmapList>:

/*
 * Reads the list of bitmaps struct from external flash into variable pointed at by @destination.
 */
void readBitmapList(struct bitmapList *destination){
 8002f44:	b580      	push	{r7, lr}
 8002f46:	f5ad 6d01 	sub.w	sp, sp, #2064	; 0x810
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	1d3b      	adds	r3, r7, #4
 8002f4e:	6018      	str	r0, [r3, #0]
	uint8_t buffer[sizeof(struct bitmapList)];
	ext_flash_read(BITMAP_LIST_SECTOR*SECTOR_SIZE, buffer, sizeof(struct bitmapList));
 8002f50:	f107 030c 	add.w	r3, r7, #12
 8002f54:	f640 0204 	movw	r2, #2052	; 0x804
 8002f58:	4619      	mov	r1, r3
 8002f5a:	f44f 2048 	mov.w	r0, #819200	; 0xc8000
 8002f5e:	f000 fbb0 	bl	80036c2 <ext_flash_read>
	*destination = *((struct bitmapList *) buffer);
 8002f62:	f107 020c 	add.w	r2, r7, #12
 8002f66:	1d3b      	adds	r3, r7, #4
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	4611      	mov	r1, r2
 8002f6e:	f640 0304 	movw	r3, #2052	; 0x804
 8002f72:	461a      	mov	r2, r3
 8002f74:	f006 f9fc 	bl	8009370 <memcpy>
}
 8002f78:	bf00      	nop
 8002f7a:	f507 6701 	add.w	r7, r7, #2064	; 0x810
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
	...

08002f84 <openScreen>:
 *
 *	@returns: number of objects read. If maxData and maxObjects are sufficient, this will be the same as @screenHeader.objectCount. If @maxObjects limit was reached,
 *	then return value will be equal to @maxObjects. If @maxData limit was reached, then return value will be lower than @maxObjects.
 *
 */
int openScreen(uint16_t screenSector, struct screen *screenHeader, struct object *objectArray, uint8_t *dataArray, uint8_t **dataPointerArray, uint16_t maxData, uint16_t maxObjects){
 8002f84:	b590      	push	{r4, r7, lr}
 8002f86:	b08d      	sub	sp, #52	; 0x34
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60b9      	str	r1, [r7, #8]
 8002f8c:	607a      	str	r2, [r7, #4]
 8002f8e:	603b      	str	r3, [r7, #0]
 8002f90:	4603      	mov	r3, r0
 8002f92:	81fb      	strh	r3, [r7, #14]
	uint32_t flashAddr = screenSector*SECTOR_SIZE;
 8002f94:	89fb      	ldrh	r3, [r7, #14]
 8002f96:	031b      	lsls	r3, r3, #12
 8002f98:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint8_t screenHeaderBuffer[sizeof(struct screen)];
	ext_flash_read(flashAddr, screenHeaderBuffer, sizeof(struct screen));
 8002f9a:	f107 0320 	add.w	r3, r7, #32
 8002f9e:	2204      	movs	r2, #4
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002fa4:	f000 fb8d 	bl	80036c2 <ext_flash_read>
	flashAddr += sizeof(struct screen);
 8002fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002faa:	3304      	adds	r3, #4
 8002fac:	62fb      	str	r3, [r7, #44]	; 0x2c
	*screenHeader = *((struct screen *) screenHeaderBuffer);
 8002fae:	f107 0320 	add.w	r3, r7, #32
 8002fb2:	68ba      	ldr	r2, [r7, #8]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	6013      	str	r3, [r2, #0]

	uint16_t objectsToRead = (*screenHeader).objectCount;
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	885b      	ldrh	r3, [r3, #2]
 8002fbc:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint16_t objectIndex = 0;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	853b      	strh	r3, [r7, #40]	; 0x28
	uint16_t dataIndex = 0;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	84fb      	strh	r3, [r7, #38]	; 0x26
	if(objectsToRead > maxObjects){
 8002fc6:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8002fc8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d964      	bls.n	800309a <openScreen+0x116>
		printf("[cl] Limiting objects to be read from screen to maxObjects! (down to %d from %d)", maxObjects, objectsToRead);
 8002fd0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002fd4:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	4834      	ldr	r0, [pc, #208]	; (80030ac <openScreen+0x128>)
 8002fda:	f006 f9df 	bl	800939c <iprintf>
		objectsToRead = maxObjects;
 8002fde:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002fe2:	857b      	strh	r3, [r7, #42]	; 0x2a
	}

	uint8_t objectHeaderBuffer[sizeof(struct object)];
	while(objectIndex < objectsToRead){
 8002fe4:	e059      	b.n	800309a <openScreen+0x116>
		ext_flash_read(flashAddr, objectHeaderBuffer, sizeof(struct object));
 8002fe6:	f107 0310 	add.w	r3, r7, #16
 8002fea:	220e      	movs	r2, #14
 8002fec:	4619      	mov	r1, r3
 8002fee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002ff0:	f000 fb67 	bl	80036c2 <ext_flash_read>
		flashAddr += sizeof(struct object);
 8002ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ff6:	330e      	adds	r3, #14
 8002ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
		*(objectArray + objectIndex) = *((struct object *) objectHeaderBuffer);
 8002ffa:	f107 0110 	add.w	r1, r7, #16
 8002ffe:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003000:	4613      	mov	r3, r2
 8003002:	00db      	lsls	r3, r3, #3
 8003004:	1a9b      	subs	r3, r3, r2
 8003006:	005b      	lsls	r3, r3, #1
 8003008:	461a      	mov	r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4413      	add	r3, r2
 800300e:	460a      	mov	r2, r1
 8003010:	6814      	ldr	r4, [r2, #0]
 8003012:	6850      	ldr	r0, [r2, #4]
 8003014:	6891      	ldr	r1, [r2, #8]
 8003016:	601c      	str	r4, [r3, #0]
 8003018:	6058      	str	r0, [r3, #4]
 800301a:	6099      	str	r1, [r3, #8]
 800301c:	8992      	ldrh	r2, [r2, #12]
 800301e:	819a      	strh	r2, [r3, #12]
		uint16_t currentObjectDataLen = (objectArray + objectIndex)->dataLen;
 8003020:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003022:	4613      	mov	r3, r2
 8003024:	00db      	lsls	r3, r3, #3
 8003026:	1a9b      	subs	r3, r3, r2
 8003028:	005b      	lsls	r3, r3, #1
 800302a:	461a      	mov	r2, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4413      	add	r3, r2
 8003030:	899b      	ldrh	r3, [r3, #12]
 8003032:	84bb      	strh	r3, [r7, #36]	; 0x24
		if(currentObjectDataLen > 0){
 8003034:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003036:	2b00      	cmp	r3, #0
 8003038:	d026      	beq.n	8003088 <openScreen+0x104>
			if(dataIndex + currentObjectDataLen > maxData){
 800303a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800303c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800303e:	441a      	add	r2, r3
 8003040:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003044:	429a      	cmp	r2, r3
 8003046:	dd06      	ble.n	8003056 <openScreen+0xd2>
				printf("[cl] Ran out of data buffer when trying to add object #%d \n\r", objectIndex);
 8003048:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800304a:	4619      	mov	r1, r3
 800304c:	4818      	ldr	r0, [pc, #96]	; (80030b0 <openScreen+0x12c>)
 800304e:	f006 f9a5 	bl	800939c <iprintf>
				return(objectIndex);
 8003052:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003054:	e026      	b.n	80030a4 <openScreen+0x120>
			}
			//object data fits in buffer
			ext_flash_read(flashAddr, (dataArray + dataIndex), currentObjectDataLen);
 8003056:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003058:	683a      	ldr	r2, [r7, #0]
 800305a:	4413      	add	r3, r2
 800305c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800305e:	4619      	mov	r1, r3
 8003060:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003062:	f000 fb2e 	bl	80036c2 <ext_flash_read>
			*(dataPointerArray + objectIndex) = (dataArray + dataIndex);
 8003066:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003068:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800306e:	440b      	add	r3, r1
 8003070:	6839      	ldr	r1, [r7, #0]
 8003072:	440a      	add	r2, r1
 8003074:	601a      	str	r2, [r3, #0]
			flashAddr += currentObjectDataLen;
 8003076:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003078:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800307a:	4413      	add	r3, r2
 800307c:	62fb      	str	r3, [r7, #44]	; 0x2c
			dataIndex += currentObjectDataLen;
 800307e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003080:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003082:	4413      	add	r3, r2
 8003084:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003086:	e005      	b.n	8003094 <openScreen+0x110>
			}
		else{
			*(dataPointerArray + objectIndex) = NULL;
 8003088:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800308e:	4413      	add	r3, r2
 8003090:	2200      	movs	r2, #0
 8003092:	601a      	str	r2, [r3, #0]
		}

		objectIndex++;
 8003094:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003096:	3301      	adds	r3, #1
 8003098:	853b      	strh	r3, [r7, #40]	; 0x28
	while(objectIndex < objectsToRead){
 800309a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800309c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800309e:	429a      	cmp	r2, r3
 80030a0:	d3a1      	bcc.n	8002fe6 <openScreen+0x62>
	}

	return objectIndex;
 80030a2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28

}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3734      	adds	r7, #52	; 0x34
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd90      	pop	{r4, r7, pc}
 80030ac:	0800aa34 	.word	0x0800aa34
 80030b0:	0800aa88 	.word	0x0800aa88

080030b4 <readBitmap>:
 *
 * Caller needs to provide an array @dataArray at least @maxData pixels long. Each pixel is 2 bytes.
 *
 * @returns: number of pixels read. If maxPixels is sufficient, this will be the same as bitmapHeader.xsize*bitmapHeader.ysize.
 * */
int readBitmap(uint16_t bitmapSector, struct bitmap *bitmapHeader, uint16_t *dataArray, uint16_t maxPixels){
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b08a      	sub	sp, #40	; 0x28
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	60b9      	str	r1, [r7, #8]
 80030bc:	607a      	str	r2, [r7, #4]
 80030be:	461a      	mov	r2, r3
 80030c0:	4603      	mov	r3, r0
 80030c2:	81fb      	strh	r3, [r7, #14]
 80030c4:	4613      	mov	r3, r2
 80030c6:	81bb      	strh	r3, [r7, #12]
	uint32_t flashAddr = bitmapSector*SECTOR_SIZE;
 80030c8:	89fb      	ldrh	r3, [r7, #14]
 80030ca:	031b      	lsls	r3, r3, #12
 80030cc:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t bitmapHeaderBuffer[sizeof(struct bitmap)];
	ext_flash_read(flashAddr, bitmapHeaderBuffer, sizeof(struct bitmap));
 80030ce:	f107 0318 	add.w	r3, r7, #24
 80030d2:	2206      	movs	r2, #6
 80030d4:	4619      	mov	r1, r3
 80030d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80030d8:	f000 faf3 	bl	80036c2 <ext_flash_read>
	flashAddr += sizeof(struct bitmap);
 80030dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030de:	3306      	adds	r3, #6
 80030e0:	627b      	str	r3, [r7, #36]	; 0x24
	*bitmapHeader = *((struct bitmap *) bitmapHeaderBuffer);
 80030e2:	f107 0218 	add.w	r2, r7, #24
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	6811      	ldr	r1, [r2, #0]
 80030ea:	6019      	str	r1, [r3, #0]
 80030ec:	8892      	ldrh	r2, [r2, #4]
 80030ee:	809a      	strh	r2, [r3, #4]

	uint16_t pixelsToRead = (*bitmapHeader).xsize*(*bitmapHeader).ysize;
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	885a      	ldrh	r2, [r3, #2]
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	889b      	ldrh	r3, [r3, #4]
 80030f8:	fb12 f303 	smulbb	r3, r2, r3
 80030fc:	847b      	strh	r3, [r7, #34]	; 0x22
	if(pixelsToRead > maxPixels){
 80030fe:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003100:	89bb      	ldrh	r3, [r7, #12]
 8003102:	429a      	cmp	r2, r3
 8003104:	d909      	bls.n	800311a <readBitmap+0x66>
		printf("[cl] Limiting number of pixels of bitmap %d down to %d (from total size %d)\n\r", (*bitmapHeader).bitmapNumber, maxPixels, pixelsToRead);
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	881b      	ldrh	r3, [r3, #0]
 800310a:	4619      	mov	r1, r3
 800310c:	89ba      	ldrh	r2, [r7, #12]
 800310e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003110:	4812      	ldr	r0, [pc, #72]	; (800315c <readBitmap+0xa8>)
 8003112:	f006 f943 	bl	800939c <iprintf>
		pixelsToRead = maxPixels;
 8003116:	89bb      	ldrh	r3, [r7, #12]
 8003118:	847b      	strh	r3, [r7, #34]	; 0x22
	}

	uint16_t pixelIndex = 0;
 800311a:	2300      	movs	r3, #0
 800311c:	843b      	strh	r3, [r7, #32]
	uint8_t pixelBuffer[2];
	while(pixelIndex < pixelsToRead){
 800311e:	e014      	b.n	800314a <readBitmap+0x96>
		ext_flash_read(flashAddr, pixelBuffer, 2);
 8003120:	f107 0314 	add.w	r3, r7, #20
 8003124:	2202      	movs	r2, #2
 8003126:	4619      	mov	r1, r3
 8003128:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800312a:	f000 faca 	bl	80036c2 <ext_flash_read>
		*(dataArray + pixelIndex) = *((uint16_t *) pixelBuffer);
 800312e:	f107 0214 	add.w	r2, r7, #20
 8003132:	8c3b      	ldrh	r3, [r7, #32]
 8003134:	005b      	lsls	r3, r3, #1
 8003136:	6879      	ldr	r1, [r7, #4]
 8003138:	440b      	add	r3, r1
 800313a:	8812      	ldrh	r2, [r2, #0]
 800313c:	801a      	strh	r2, [r3, #0]
		flashAddr += 2;
 800313e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003140:	3302      	adds	r3, #2
 8003142:	627b      	str	r3, [r7, #36]	; 0x24
		pixelIndex += 1;
 8003144:	8c3b      	ldrh	r3, [r7, #32]
 8003146:	3301      	adds	r3, #1
 8003148:	843b      	strh	r3, [r7, #32]
	while(pixelIndex < pixelsToRead){
 800314a:	8c3a      	ldrh	r2, [r7, #32]
 800314c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800314e:	429a      	cmp	r2, r3
 8003150:	d3e6      	bcc.n	8003120 <readBitmap+0x6c>
	}
}
 8003152:	bf00      	nop
 8003154:	4618      	mov	r0, r3
 8003156:	3728      	adds	r7, #40	; 0x28
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	0800aac8 	.word	0x0800aac8

08003160 <printAllScreens>:

/*
 * debug function to check what is actually stored in flash
 */
void printAllScreens(struct generalConfig gconf){
 8003160:	b084      	sub	sp, #16
 8003162:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003166:	b09c      	sub	sp, #112	; 0x70
 8003168:	af04      	add	r7, sp, #16
 800316a:	f107 0478 	add.w	r4, r7, #120	; 0x78
 800316e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003172:	466b      	mov	r3, sp
 8003174:	4698      	mov	r8, r3
	uint8_t screenIndex = 0;
 8003176:	2300      	movs	r3, #0
 8003178:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	printf("[PAS] Supplied gconf says there are %d screens.\n\r", gconf.totalScreens);
 800317c:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8003180:	4619      	mov	r1, r3
 8003182:	48a3      	ldr	r0, [pc, #652]	; (8003410 <printAllScreens+0x2b0>)
 8003184:	f006 f90a 	bl	800939c <iprintf>
	uint16_t maxObjects = 128;
 8003188:	2380      	movs	r3, #128	; 0x80
 800318a:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
	uint16_t maxData = SECTOR_SIZE*4;
 800318e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003192:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

	struct screen screenHeader;
	struct object objArr[maxObjects];
 8003196:	f8b7 6058 	ldrh.w	r6, [r7, #88]	; 0x58
 800319a:	4633      	mov	r3, r6
 800319c:	3b01      	subs	r3, #1
 800319e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80031a0:	b2b4      	uxth	r4, r6
 80031a2:	f04f 0500 	mov.w	r5, #0
 80031a6:	4622      	mov	r2, r4
 80031a8:	462b      	mov	r3, r5
 80031aa:	f04f 0000 	mov.w	r0, #0
 80031ae:	f04f 0100 	mov.w	r1, #0
 80031b2:	00d9      	lsls	r1, r3, #3
 80031b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80031b8:	00d0      	lsls	r0, r2, #3
 80031ba:	4602      	mov	r2, r0
 80031bc:	460b      	mov	r3, r1
 80031be:	1b12      	subs	r2, r2, r4
 80031c0:	eb63 0305 	sbc.w	r3, r3, r5
 80031c4:	f04f 0000 	mov.w	r0, #0
 80031c8:	f04f 0100 	mov.w	r1, #0
 80031cc:	0119      	lsls	r1, r3, #4
 80031ce:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 80031d2:	0110      	lsls	r0, r2, #4
 80031d4:	4602      	mov	r2, r0
 80031d6:	460b      	mov	r3, r1
 80031d8:	4632      	mov	r2, r6
 80031da:	4613      	mov	r3, r2
 80031dc:	00db      	lsls	r3, r3, #3
 80031de:	1a9b      	subs	r3, r3, r2
 80031e0:	005b      	lsls	r3, r3, #1
 80031e2:	b2b4      	uxth	r4, r6
 80031e4:	f04f 0500 	mov.w	r5, #0
 80031e8:	4622      	mov	r2, r4
 80031ea:	462b      	mov	r3, r5
 80031ec:	f04f 0000 	mov.w	r0, #0
 80031f0:	f04f 0100 	mov.w	r1, #0
 80031f4:	00d9      	lsls	r1, r3, #3
 80031f6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80031fa:	00d0      	lsls	r0, r2, #3
 80031fc:	4602      	mov	r2, r0
 80031fe:	460b      	mov	r3, r1
 8003200:	1b12      	subs	r2, r2, r4
 8003202:	eb63 0305 	sbc.w	r3, r3, r5
 8003206:	f04f 0000 	mov.w	r0, #0
 800320a:	f04f 0100 	mov.w	r1, #0
 800320e:	0119      	lsls	r1, r3, #4
 8003210:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8003214:	0110      	lsls	r0, r2, #4
 8003216:	4602      	mov	r2, r0
 8003218:	460b      	mov	r3, r1
 800321a:	4632      	mov	r2, r6
 800321c:	4613      	mov	r3, r2
 800321e:	00db      	lsls	r3, r3, #3
 8003220:	1a9b      	subs	r3, r3, r2
 8003222:	005b      	lsls	r3, r3, #1
 8003224:	3307      	adds	r3, #7
 8003226:	08db      	lsrs	r3, r3, #3
 8003228:	00db      	lsls	r3, r3, #3
 800322a:	ebad 0d03 	sub.w	sp, sp, r3
 800322e:	ab04      	add	r3, sp, #16
 8003230:	3301      	adds	r3, #1
 8003232:	085b      	lsrs	r3, r3, #1
 8003234:	005b      	lsls	r3, r3, #1
 8003236:	64bb      	str	r3, [r7, #72]	; 0x48
	uint8_t dataArr[maxData];
 8003238:	f8b7 405a 	ldrh.w	r4, [r7, #90]	; 0x5a
 800323c:	4623      	mov	r3, r4
 800323e:	3b01      	subs	r3, #1
 8003240:	647b      	str	r3, [r7, #68]	; 0x44
 8003242:	b2a0      	uxth	r0, r4
 8003244:	f04f 0100 	mov.w	r1, #0
 8003248:	f04f 0200 	mov.w	r2, #0
 800324c:	f04f 0300 	mov.w	r3, #0
 8003250:	00cb      	lsls	r3, r1, #3
 8003252:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003256:	00c2      	lsls	r2, r0, #3
 8003258:	b2a0      	uxth	r0, r4
 800325a:	f04f 0100 	mov.w	r1, #0
 800325e:	f04f 0200 	mov.w	r2, #0
 8003262:	f04f 0300 	mov.w	r3, #0
 8003266:	00cb      	lsls	r3, r1, #3
 8003268:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800326c:	00c2      	lsls	r2, r0, #3
 800326e:	4623      	mov	r3, r4
 8003270:	3307      	adds	r3, #7
 8003272:	08db      	lsrs	r3, r3, #3
 8003274:	00db      	lsls	r3, r3, #3
 8003276:	ebad 0d03 	sub.w	sp, sp, r3
 800327a:	ab04      	add	r3, sp, #16
 800327c:	3300      	adds	r3, #0
 800327e:	643b      	str	r3, [r7, #64]	; 0x40
	uint8_t *pointerArray[maxObjects];
 8003280:	f8b7 4058 	ldrh.w	r4, [r7, #88]	; 0x58
 8003284:	4623      	mov	r3, r4
 8003286:	3b01      	subs	r3, #1
 8003288:	63fb      	str	r3, [r7, #60]	; 0x3c
 800328a:	b2a0      	uxth	r0, r4
 800328c:	f04f 0100 	mov.w	r1, #0
 8003290:	f04f 0200 	mov.w	r2, #0
 8003294:	f04f 0300 	mov.w	r3, #0
 8003298:	014b      	lsls	r3, r1, #5
 800329a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800329e:	0142      	lsls	r2, r0, #5
 80032a0:	b2a0      	uxth	r0, r4
 80032a2:	f04f 0100 	mov.w	r1, #0
 80032a6:	f04f 0200 	mov.w	r2, #0
 80032aa:	f04f 0300 	mov.w	r3, #0
 80032ae:	014b      	lsls	r3, r1, #5
 80032b0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80032b4:	0142      	lsls	r2, r0, #5
 80032b6:	4623      	mov	r3, r4
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	3307      	adds	r3, #7
 80032bc:	08db      	lsrs	r3, r3, #3
 80032be:	00db      	lsls	r3, r3, #3
 80032c0:	ebad 0d03 	sub.w	sp, sp, r3
 80032c4:	ab04      	add	r3, sp, #16
 80032c6:	3303      	adds	r3, #3
 80032c8:	089b      	lsrs	r3, r3, #2
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	63bb      	str	r3, [r7, #56]	; 0x38

	while(screenIndex < gconf.totalScreens){
 80032ce:	e08c      	b.n	80033ea <printAllScreens+0x28a>
		printf("[PAS] Opening screen #%d stored @%d \n\r", screenIndex, gconf.screenSectors[screenIndex]);
 80032d0:	f897 1057 	ldrb.w	r1, [r7, #87]	; 0x57
 80032d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80032d8:	005b      	lsls	r3, r3, #1
 80032da:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80032de:	4413      	add	r3, r2
 80032e0:	885b      	ldrh	r3, [r3, #2]
 80032e2:	461a      	mov	r2, r3
 80032e4:	484b      	ldr	r0, [pc, #300]	; (8003414 <printAllScreens+0x2b4>)
 80032e6:	f006 f859 	bl	800939c <iprintf>
		int objectsRead = openScreen(gconf.screenSectors[screenIndex], &screenHeader, objArr, dataArr, pointerArray, maxData, maxObjects);
 80032ea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80032ee:	005b      	lsls	r3, r3, #1
 80032f0:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80032f4:	4413      	add	r3, r2
 80032f6:	8858      	ldrh	r0, [r3, #2]
 80032f8:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 80032fa:	6c3d      	ldr	r5, [r7, #64]	; 0x40
 80032fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032fe:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8003302:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 8003306:	9202      	str	r2, [sp, #8]
 8003308:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 800330c:	9201      	str	r2, [sp, #4]
 800330e:	9300      	str	r3, [sp, #0]
 8003310:	462b      	mov	r3, r5
 8003312:	4622      	mov	r2, r4
 8003314:	f7ff fe36 	bl	8002f84 <openScreen>
 8003318:	6378      	str	r0, [r7, #52]	; 0x34
		printf("[PAS] [%d / %d] objects have been read.\n\r", objectsRead, screenHeader.objectCount);
 800331a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800331c:	461a      	mov	r2, r3
 800331e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003320:	483d      	ldr	r0, [pc, #244]	; (8003418 <printAllScreens+0x2b8>)
 8003322:	f006 f83b 	bl	800939c <iprintf>
		printf("[PAS] Object report:\n\r");
 8003326:	483d      	ldr	r0, [pc, #244]	; (800341c <printAllScreens+0x2bc>)
 8003328:	f006 f838 	bl	800939c <iprintf>
		uint16_t objectIndex = 0;
 800332c:	2300      	movs	r3, #0
 800332e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		while(objectIndex < objectsRead){
 8003332:	e04a      	b.n	80033ca <printAllScreens+0x26a>
			struct object thisObject = *(objArr + objectIndex);
 8003334:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003336:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800333a:	4613      	mov	r3, r2
 800333c:	00db      	lsls	r3, r3, #3
 800333e:	1a9b      	subs	r3, r3, r2
 8003340:	005b      	lsls	r3, r3, #1
 8003342:	18ca      	adds	r2, r1, r3
 8003344:	f107 0320 	add.w	r3, r7, #32
 8003348:	4614      	mov	r4, r2
 800334a:	6820      	ldr	r0, [r4, #0]
 800334c:	6861      	ldr	r1, [r4, #4]
 800334e:	68a2      	ldr	r2, [r4, #8]
 8003350:	c307      	stmia	r3!, {r0, r1, r2}
 8003352:	89a2      	ldrh	r2, [r4, #12]
 8003354:	801a      	strh	r2, [r3, #0]
			char typeStr[30];
			objectTypeToString(thisObject.objectType, typeStr);
 8003356:	f897 3020 	ldrb.w	r3, [r7, #32]
 800335a:	463a      	mov	r2, r7
 800335c:	4611      	mov	r1, r2
 800335e:	4618      	mov	r0, r3
 8003360:	f000 f8f8 	bl	8003554 <objectTypeToString>
			printf("[PAS] %s id=%d from (%d, %d) to (%d,%d), hex data (%db) =[", typeStr, thisObject.objectId, thisObject.xstart, thisObject.ystart, thisObject.xend, thisObject.yend, thisObject.dataLen);
 8003364:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003366:	461d      	mov	r5, r3
 8003368:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800336a:	461e      	mov	r6, r3
 800336c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800336e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003370:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8003372:	4608      	mov	r0, r1
 8003374:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8003376:	460c      	mov	r4, r1
 8003378:	4639      	mov	r1, r7
 800337a:	9403      	str	r4, [sp, #12]
 800337c:	9002      	str	r0, [sp, #8]
 800337e:	9201      	str	r2, [sp, #4]
 8003380:	9300      	str	r3, [sp, #0]
 8003382:	4633      	mov	r3, r6
 8003384:	462a      	mov	r2, r5
 8003386:	4826      	ldr	r0, [pc, #152]	; (8003420 <printAllScreens+0x2c0>)
 8003388:	f006 f808 	bl	800939c <iprintf>
			int dataIndex = 0;
 800338c:	2300      	movs	r3, #0
 800338e:	653b      	str	r3, [r7, #80]	; 0x50
			while(dataIndex < thisObject.dataLen){
 8003390:	e00e      	b.n	80033b0 <printAllScreens+0x250>
				printf("%02x", *(pointerArray[objectIndex] + dataIndex));
 8003392:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8003396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003398:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800339c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800339e:	4413      	add	r3, r2
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	4619      	mov	r1, r3
 80033a4:	481f      	ldr	r0, [pc, #124]	; (8003424 <printAllScreens+0x2c4>)
 80033a6:	f005 fff9 	bl	800939c <iprintf>
				dataIndex++;
 80033aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033ac:	3301      	adds	r3, #1
 80033ae:	653b      	str	r3, [r7, #80]	; 0x50
			while(dataIndex < thisObject.dataLen){
 80033b0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80033b2:	461a      	mov	r2, r3
 80033b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033b6:	4293      	cmp	r3, r2
 80033b8:	dbeb      	blt.n	8003392 <printAllScreens+0x232>
			}
			printf("]\n\r");
 80033ba:	481b      	ldr	r0, [pc, #108]	; (8003428 <printAllScreens+0x2c8>)
 80033bc:	f005 ffee 	bl	800939c <iprintf>
			objectIndex++;
 80033c0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80033c4:	3301      	adds	r3, #1
 80033c6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		while(objectIndex < objectsRead){
 80033ca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80033ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033d0:	429a      	cmp	r2, r3
 80033d2:	dcaf      	bgt.n	8003334 <printAllScreens+0x1d4>
		}
		printf("[PAS] End of screen #%d \n\r", screenIndex);
 80033d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80033d8:	4619      	mov	r1, r3
 80033da:	4814      	ldr	r0, [pc, #80]	; (800342c <printAllScreens+0x2cc>)
 80033dc:	f005 ffde 	bl	800939c <iprintf>
		screenIndex++;
 80033e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80033e4:	3301      	adds	r3, #1
 80033e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	while(screenIndex < gconf.totalScreens){
 80033ea:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 80033ee:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80033f2:	429a      	cmp	r2, r3
 80033f4:	f4ff af6c 	bcc.w	80032d0 <printAllScreens+0x170>
	}

	printf("[PAS] Finished. \n\n\n\r");
 80033f8:	480d      	ldr	r0, [pc, #52]	; (8003430 <printAllScreens+0x2d0>)
 80033fa:	f005 ffcf 	bl	800939c <iprintf>
 80033fe:	46c5      	mov	sp, r8
}
 8003400:	bf00      	nop
 8003402:	3760      	adds	r7, #96	; 0x60
 8003404:	46bd      	mov	sp, r7
 8003406:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800340a:	b004      	add	sp, #16
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	0800ab18 	.word	0x0800ab18
 8003414:	0800ab4c 	.word	0x0800ab4c
 8003418:	0800ab74 	.word	0x0800ab74
 800341c:	0800aba0 	.word	0x0800aba0
 8003420:	0800abb8 	.word	0x0800abb8
 8003424:	0800abf4 	.word	0x0800abf4
 8003428:	0800abfc 	.word	0x0800abfc
 800342c:	0800ac00 	.word	0x0800ac00
 8003430:	0800ac1c 	.word	0x0800ac1c

08003434 <reportBitmaps>:


void reportBitmaps(int printHex){
 8003434:	b580      	push	{r7, lr}
 8003436:	f5ad 6d13 	sub.w	sp, sp, #2352	; 0x930
 800343a:	af00      	add	r7, sp, #0
 800343c:	1d3b      	adds	r3, r7, #4
 800343e:	6018      	str	r0, [r3, #0]
	uint8_t screenIndex = 0;
 8003440:	2300      	movs	r3, #0
 8003442:	f887 392f 	strb.w	r3, [r7, #2351]	; 0x92f
	uint16_t maxObjects = 128;
 8003446:	2380      	movs	r3, #128	; 0x80
 8003448:	f8a7 392c 	strh.w	r3, [r7, #2348]	; 0x92c
	uint16_t maxData = SECTOR_SIZE*4;
 800344c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003450:	f8a7 392a 	strh.w	r3, [r7, #2346]	; 0x92a
	struct bitmapList blist;
	readBitmapList(&blist);
 8003454:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003458:	4618      	mov	r0, r3
 800345a:	f7ff fd73 	bl	8002f44 <readBitmapList>
	int total = blist.totalBitmaps;
 800345e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003462:	881b      	ldrh	r3, [r3, #0]
 8003464:	f8c7 3924 	str.w	r3, [r7, #2340]	; 0x924
	printf("[BR] There are %d bitmaps in memory spanning sectors %d to %d.\n\r", total, BITMAP_LIST_SECTOR+1, blist.lastUsedSector);
 8003468:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800346c:	885b      	ldrh	r3, [r3, #2]
 800346e:	22c9      	movs	r2, #201	; 0xc9
 8003470:	f8d7 1924 	ldr.w	r1, [r7, #2340]	; 0x924
 8003474:	4830      	ldr	r0, [pc, #192]	; (8003538 <reportBitmaps+0x104>)
 8003476:	f005 ff91 	bl	800939c <iprintf>
	int i = 0;
 800347a:	2300      	movs	r3, #0
 800347c:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
	while(i < total){
 8003480:	e04b      	b.n	800351a <reportBitmaps+0xe6>
		int thisSector = blist.bitmapSectors[i];
 8003482:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8003486:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 800348a:	005b      	lsls	r3, r3, #1
 800348c:	4413      	add	r3, r2
 800348e:	889b      	ldrh	r3, [r3, #4]
 8003490:	f8c7 391c 	str.w	r3, [r7, #2332]	; 0x91c
		struct bitmap bm;
		uint16_t pixelBuffer[128];
		int pixelsRead = readBitmap(thisSector, &bm, pixelBuffer, 128);
 8003494:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 8003498:	b298      	uxth	r0, r3
 800349a:	f107 0208 	add.w	r2, r7, #8
 800349e:	f507 7184 	add.w	r1, r7, #264	; 0x108
 80034a2:	2380      	movs	r3, #128	; 0x80
 80034a4:	f7ff fe06 	bl	80030b4 <readBitmap>
 80034a8:	f8c7 0918 	str.w	r0, [r7, #2328]	; 0x918
		printf("[BR] Bitmap #%d stored @%d is %dx%d pixels.\n\r", bm.bitmapNumber, bm.xsize, bm.ysize);
 80034ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80034b0:	881b      	ldrh	r3, [r3, #0]
 80034b2:	4619      	mov	r1, r3
 80034b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80034b8:	885b      	ldrh	r3, [r3, #2]
 80034ba:	461a      	mov	r2, r3
 80034bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80034c0:	889b      	ldrh	r3, [r3, #4]
 80034c2:	481e      	ldr	r0, [pc, #120]	; (800353c <reportBitmaps+0x108>)
 80034c4:	f005 ff6a 	bl	800939c <iprintf>
		if(printHex){
 80034c8:	1d3b      	adds	r3, r7, #4
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d024      	beq.n	800351a <reportBitmaps+0xe6>
			printf("[BR] It's first %d pixels are (newlines don't correspond to rows!!):", pixelsRead);
 80034d0:	f8d7 1918 	ldr.w	r1, [r7, #2328]	; 0x918
 80034d4:	481a      	ldr	r0, [pc, #104]	; (8003540 <reportBitmaps+0x10c>)
 80034d6:	f005 ff61 	bl	800939c <iprintf>
			int printIndex = 0;
 80034da:	2300      	movs	r3, #0
 80034dc:	f8c7 3914 	str.w	r3, [r7, #2324]	; 0x914
			while(printIndex < pixelsRead){
 80034e0:	e012      	b.n	8003508 <reportBitmaps+0xd4>
				if(printIndex%16==0){
 80034e2:	f8d7 3914 	ldr.w	r3, [r7, #2324]	; 0x914
 80034e6:	f003 030f 	and.w	r3, r3, #15
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d102      	bne.n	80034f4 <reportBitmaps+0xc0>
					printf("\n\r    ");
 80034ee:	4815      	ldr	r0, [pc, #84]	; (8003544 <reportBitmaps+0x110>)
 80034f0:	f005 ff54 	bl	800939c <iprintf>
				}
				printf("%04X ", pixelBuffer[printIndex]);
 80034f4:	f107 0308 	add.w	r3, r7, #8
 80034f8:	f8d7 2914 	ldr.w	r2, [r7, #2324]	; 0x914
 80034fc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003500:	4619      	mov	r1, r3
 8003502:	4811      	ldr	r0, [pc, #68]	; (8003548 <reportBitmaps+0x114>)
 8003504:	f005 ff4a 	bl	800939c <iprintf>
			while(printIndex < pixelsRead){
 8003508:	f8d7 2914 	ldr.w	r2, [r7, #2324]	; 0x914
 800350c:	f8d7 3918 	ldr.w	r3, [r7, #2328]	; 0x918
 8003510:	429a      	cmp	r2, r3
 8003512:	dbe6      	blt.n	80034e2 <reportBitmaps+0xae>
			}
			printf("\n\r");
 8003514:	480d      	ldr	r0, [pc, #52]	; (800354c <reportBitmaps+0x118>)
 8003516:	f005 ff41 	bl	800939c <iprintf>
	while(i < total){
 800351a:	f8d7 2920 	ldr.w	r2, [r7, #2336]	; 0x920
 800351e:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 8003522:	429a      	cmp	r2, r3
 8003524:	dbad      	blt.n	8003482 <reportBitmaps+0x4e>
		}
	}
	printf("[BR] Bitmap report finished.\n\r");
 8003526:	480a      	ldr	r0, [pc, #40]	; (8003550 <reportBitmaps+0x11c>)
 8003528:	f005 ff38 	bl	800939c <iprintf>
}
 800352c:	bf00      	nop
 800352e:	f507 6713 	add.w	r7, r7, #2352	; 0x930
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	0800ac34 	.word	0x0800ac34
 800353c:	0800ac78 	.word	0x0800ac78
 8003540:	0800aca8 	.word	0x0800aca8
 8003544:	0800acf0 	.word	0x0800acf0
 8003548:	0800acf8 	.word	0x0800acf8
 800354c:	0800ad00 	.word	0x0800ad00
 8003550:	0800ad04 	.word	0x0800ad04

08003554 <objectTypeToString>:
const char *typeNames[] 	= 		{"rectangle", "button", "label", "picture"};
const objectType_t types[] 	= 		{rectangle, button, label, picture};
const int typeCount = 3;

// Make sure that str is long enough for longest member of typeNames!
void objectTypeToString(objectType_t type, char *str){
 8003554:	b580      	push	{r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
 800355a:	4603      	mov	r3, r0
 800355c:	6039      	str	r1, [r7, #0]
 800355e:	71fb      	strb	r3, [r7, #7]
	int i;
	for(i=0; i<typeCount; i++){
 8003560:	2300      	movs	r3, #0
 8003562:	60fb      	str	r3, [r7, #12]
 8003564:	e012      	b.n	800358c <objectTypeToString+0x38>
		if(type == types[i]){
 8003566:	4a0d      	ldr	r2, [pc, #52]	; (800359c <objectTypeToString+0x48>)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	4413      	add	r3, r2
 800356c:	781b      	ldrb	r3, [r3, #0]
 800356e:	79fa      	ldrb	r2, [r7, #7]
 8003570:	429a      	cmp	r2, r3
 8003572:	d108      	bne.n	8003586 <objectTypeToString+0x32>
			strcpy(str, typeNames[i]);
 8003574:	4a0a      	ldr	r2, [pc, #40]	; (80035a0 <objectTypeToString+0x4c>)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800357c:	4619      	mov	r1, r3
 800357e:	6838      	ldr	r0, [r7, #0]
 8003580:	f005 ff24 	bl	80093cc <strcpy>
			return;
 8003584:	e006      	b.n	8003594 <objectTypeToString+0x40>
	for(i=0; i<typeCount; i++){
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	3301      	adds	r3, #1
 800358a:	60fb      	str	r3, [r7, #12]
 800358c:	2203      	movs	r2, #3
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	4293      	cmp	r3, r2
 8003592:	dbe8      	blt.n	8003566 <objectTypeToString+0x12>
		}
	}

}
 8003594:	3710      	adds	r7, #16
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	0800af6c 	.word	0x0800af6c
 80035a0:	20000000 	.word	0x20000000

080035a4 <stringToObjectType>:

objectType_t stringToObjectType(char *str){
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
	int i;
	for(i=0; i<typeCount; i++){
 80035ac:	2300      	movs	r3, #0
 80035ae:	60fb      	str	r3, [r7, #12]
 80035b0:	e012      	b.n	80035d8 <stringToObjectType+0x34>
		if(strcmp(typeNames[i], str) == 0){
 80035b2:	4a0e      	ldr	r2, [pc, #56]	; (80035ec <stringToObjectType+0x48>)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035ba:	6879      	ldr	r1, [r7, #4]
 80035bc:	4618      	mov	r0, r3
 80035be:	f7fc fe07 	bl	80001d0 <strcmp>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d104      	bne.n	80035d2 <stringToObjectType+0x2e>
			return types[i];
 80035c8:	4a09      	ldr	r2, [pc, #36]	; (80035f0 <stringToObjectType+0x4c>)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	4413      	add	r3, r2
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	e007      	b.n	80035e2 <stringToObjectType+0x3e>
	for(i=0; i<typeCount; i++){
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	3301      	adds	r3, #1
 80035d6:	60fb      	str	r3, [r7, #12]
 80035d8:	2203      	movs	r2, #3
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	4293      	cmp	r3, r2
 80035de:	dbe8      	blt.n	80035b2 <stringToObjectType+0xe>
		}
	}
	return none;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3710      	adds	r7, #16
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	20000000 	.word	0x20000000
 80035f0:	0800af6c 	.word	0x0800af6c

080035f4 <flashCSSet>:
#include <string.h>

#define FLASHWRITE_DEBUG_PRINT 1


void flashCSSet(){
 80035f4:	b580      	push	{r7, lr}
 80035f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80035f8:	2201      	movs	r2, #1
 80035fa:	2110      	movs	r1, #16
 80035fc:	4802      	ldr	r0, [pc, #8]	; (8003608 <flashCSSet+0x14>)
 80035fe:	f002 fa07 	bl	8005a10 <HAL_GPIO_WritePin>
}
 8003602:	bf00      	nop
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	40020000 	.word	0x40020000

0800360c <flashCSReset>:

void flashCSReset(){
 800360c:	b580      	push	{r7, lr}
 800360e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8003610:	2200      	movs	r2, #0
 8003612:	2110      	movs	r1, #16
 8003614:	4802      	ldr	r0, [pc, #8]	; (8003620 <flashCSReset+0x14>)
 8003616:	f002 f9fb 	bl	8005a10 <HAL_GPIO_WritePin>
}
 800361a:	bf00      	nop
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	40020000 	.word	0x40020000

08003624 <ext_flash_erase_4kB>:
		}
	}
}

void ext_flash_erase_4kB(unsigned int address)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
	unsigned int i;

	printf("erase at %d \n\r", address);
 800362c:	6879      	ldr	r1, [r7, #4]
 800362e:	481a      	ldr	r0, [pc, #104]	; (8003698 <ext_flash_erase_4kB+0x74>)
 8003630:	f005 feb4 	bl	800939c <iprintf>

	ext_flash_wren();
 8003634:	f000 f86c 	bl	8003710 <ext_flash_wren>

	flashCSReset();
 8003638:	f7ff ffe8 	bl	800360c <flashCSReset>
	SPI1_Transfer(0x20);
 800363c:	2020      	movs	r0, #32
 800363e:	f001 f8e1 	bl	8004804 <SPI1_Transfer>
	SPI1_Transfer((address>>16)&0xFF);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	0c1b      	lsrs	r3, r3, #16
 8003646:	b2db      	uxtb	r3, r3
 8003648:	4618      	mov	r0, r3
 800364a:	f001 f8db 	bl	8004804 <SPI1_Transfer>
	SPI1_Transfer((address>>8)&0xFF);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	0a1b      	lsrs	r3, r3, #8
 8003652:	b2db      	uxtb	r3, r3
 8003654:	4618      	mov	r0, r3
 8003656:	f001 f8d5 	bl	8004804 <SPI1_Transfer>
	SPI1_Transfer(address&0xFF);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	b2db      	uxtb	r3, r3
 800365e:	4618      	mov	r0, r3
 8003660:	f001 f8d0 	bl	8004804 <SPI1_Transfer>
	flashCSSet();
 8003664:	f7ff ffc6 	bl	80035f4 <flashCSSet>

	for(i=0;i<1000;i++)
 8003668:	2300      	movs	r3, #0
 800366a:	60fb      	str	r3, [r7, #12]
 800366c:	e00a      	b.n	8003684 <ext_flash_erase_4kB+0x60>
	{
		HAL_Delay(1);
 800366e:	2001      	movs	r0, #1
 8003670:	f001 fe6a 	bl	8005348 <HAL_Delay>
		if(ext_flash_read_status_register_1()==0x00)
 8003674:	f000 f838 	bl	80036e8 <ext_flash_read_status_register_1>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d007      	beq.n	800368e <ext_flash_erase_4kB+0x6a>
	for(i=0;i<1000;i++)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	3301      	adds	r3, #1
 8003682:	60fb      	str	r3, [r7, #12]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800368a:	d3f0      	bcc.n	800366e <ext_flash_erase_4kB+0x4a>
		{
			break;
		}
	}
}
 800368c:	e000      	b.n	8003690 <ext_flash_erase_4kB+0x6c>
			break;
 800368e:	bf00      	nop
}
 8003690:	bf00      	nop
 8003692:	3710      	adds	r7, #16
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	0800ad48 	.word	0x0800ad48

0800369c <ext_flash_write>:




void ext_flash_write(unsigned int address, unsigned char *buff, unsigned int len)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	607a      	str	r2, [r7, #4]
	ext_flash_continuous_write_begin(address);
 80036a8:	68f8      	ldr	r0, [r7, #12]
 80036aa:	f000 f87d 	bl	80037a8 <ext_flash_continuous_write_begin>
	ext_flash_continuous_write_write(buff, len);
 80036ae:	6879      	ldr	r1, [r7, #4]
 80036b0:	68b8      	ldr	r0, [r7, #8]
 80036b2:	f000 f89f 	bl	80037f4 <ext_flash_continuous_write_write>
	ext_flash_continuous_write_finish();
 80036b6:	f000 f8c7 	bl	8003848 <ext_flash_continuous_write_finish>
}
 80036ba:	bf00      	nop
 80036bc:	3710      	adds	r7, #16
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}

080036c2 <ext_flash_read>:
void ext_flash_read(unsigned int address, unsigned char *buff, unsigned int len)
{
 80036c2:	b580      	push	{r7, lr}
 80036c4:	b084      	sub	sp, #16
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	60f8      	str	r0, [r7, #12]
 80036ca:	60b9      	str	r1, [r7, #8]
 80036cc:	607a      	str	r2, [r7, #4]
	ext_flash_continuous_read_begin(address);
 80036ce:	68f8      	ldr	r0, [r7, #12]
 80036d0:	f000 f829 	bl	8003726 <ext_flash_continuous_read_begin>
	ext_flash_continuous_read_read(buff, len);
 80036d4:	6879      	ldr	r1, [r7, #4]
 80036d6:	68b8      	ldr	r0, [r7, #8]
 80036d8:	f000 f843 	bl	8003762 <ext_flash_continuous_read_read>
	ext_flash_continuous_read_finish();
 80036dc:	f000 f85d 	bl	800379a <ext_flash_continuous_read_finish>
}
 80036e0:	bf00      	nop
 80036e2:	3710      	adds	r7, #16
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <ext_flash_read_status_register_1>:

	return data;
}

unsigned char ext_flash_read_status_register_1()
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
	char data;
	flashCSReset();
 80036ee:	f7ff ff8d 	bl	800360c <flashCSReset>
	SPI1_Transfer(0x05);
 80036f2:	2005      	movs	r0, #5
 80036f4:	f001 f886 	bl	8004804 <SPI1_Transfer>
	data=SPI1_Transfer(0x00);
 80036f8:	2000      	movs	r0, #0
 80036fa:	f001 f883 	bl	8004804 <SPI1_Transfer>
 80036fe:	4603      	mov	r3, r0
 8003700:	71fb      	strb	r3, [r7, #7]
	flashCSSet();
 8003702:	f7ff ff77 	bl	80035f4 <flashCSSet>

	return data;
 8003706:	79fb      	ldrb	r3, [r7, #7]
}
 8003708:	4618      	mov	r0, r3
 800370a:	3708      	adds	r7, #8
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <ext_flash_wren>:

void ext_flash_wren()
{
 8003710:	b580      	push	{r7, lr}
 8003712:	af00      	add	r7, sp, #0
	flashCSReset();
 8003714:	f7ff ff7a 	bl	800360c <flashCSReset>
	SPI1_Transfer(0x06);
 8003718:	2006      	movs	r0, #6
 800371a:	f001 f873 	bl	8004804 <SPI1_Transfer>
	flashCSSet();
 800371e:	f7ff ff69 	bl	80035f4 <flashCSSet>
}
 8003722:	bf00      	nop
 8003724:	bd80      	pop	{r7, pc}

08003726 <ext_flash_continuous_read_begin>:


//Continuous functions below keep conection open while reading, allowing for access to data not aligned to 4kB sectors
void ext_flash_continuous_read_begin(unsigned int address){
 8003726:	b580      	push	{r7, lr}
 8003728:	b082      	sub	sp, #8
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
	command[0]=0x03;
	command[1]=((char *)&address)[3];
	command[2]=((char *)&address)[2];
	command[3]=((char *)&address)[1];*/

	flashCSReset();
 800372e:	f7ff ff6d 	bl	800360c <flashCSReset>

	SPI1_Transfer(0x03);
 8003732:	2003      	movs	r0, #3
 8003734:	f001 f866 	bl	8004804 <SPI1_Transfer>
	SPI1_Transfer((address>>16)&0xFF);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	0c1b      	lsrs	r3, r3, #16
 800373c:	b2db      	uxtb	r3, r3
 800373e:	4618      	mov	r0, r3
 8003740:	f001 f860 	bl	8004804 <SPI1_Transfer>
	SPI1_Transfer((address>>8)&0xFF);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	0a1b      	lsrs	r3, r3, #8
 8003748:	b2db      	uxtb	r3, r3
 800374a:	4618      	mov	r0, r3
 800374c:	f001 f85a 	bl	8004804 <SPI1_Transfer>
	SPI1_Transfer(address&0xFF);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	b2db      	uxtb	r3, r3
 8003754:	4618      	mov	r0, r3
 8003756:	f001 f855 	bl	8004804 <SPI1_Transfer>
}
 800375a:	bf00      	nop
 800375c:	3708      	adds	r7, #8
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}

08003762 <ext_flash_continuous_read_read>:

void ext_flash_continuous_read_read(unsigned char *buff, unsigned int len){
 8003762:	b590      	push	{r4, r7, lr}
 8003764:	b085      	sub	sp, #20
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
 800376a:	6039      	str	r1, [r7, #0]
	for(unsigned int i = 0; i<len; i++){
 800376c:	2300      	movs	r3, #0
 800376e:	60fb      	str	r3, [r7, #12]
 8003770:	e00a      	b.n	8003788 <ext_flash_continuous_read_read+0x26>
		*(buff+i) = SPI1_Transfer(0x00);
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	18d4      	adds	r4, r2, r3
 8003778:	2000      	movs	r0, #0
 800377a:	f001 f843 	bl	8004804 <SPI1_Transfer>
 800377e:	4603      	mov	r3, r0
 8003780:	7023      	strb	r3, [r4, #0]
	for(unsigned int i = 0; i<len; i++){
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	3301      	adds	r3, #1
 8003786:	60fb      	str	r3, [r7, #12]
 8003788:	68fa      	ldr	r2, [r7, #12]
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	429a      	cmp	r2, r3
 800378e:	d3f0      	bcc.n	8003772 <ext_flash_continuous_read_read+0x10>
	}
}
 8003790:	bf00      	nop
 8003792:	bf00      	nop
 8003794:	3714      	adds	r7, #20
 8003796:	46bd      	mov	sp, r7
 8003798:	bd90      	pop	{r4, r7, pc}

0800379a <ext_flash_continuous_read_finish>:
void ext_flash_continuous_read_skip(unsigned int len){
	for(unsigned int i = 0; i<len; i++){
			SPI1_Transfer(0x00);
	}
}
void ext_flash_continuous_read_finish(){
 800379a:	b580      	push	{r7, lr}
 800379c:	af00      	add	r7, sp, #0
	flashCSSet();
 800379e:	f7ff ff29 	bl	80035f4 <flashCSSet>
}
 80037a2:	bf00      	nop
 80037a4:	bd80      	pop	{r7, pc}
	...

080037a8 <ext_flash_continuous_write_begin>:

void ext_flash_continuous_write_begin(unsigned int address){
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
	ext_flash_wren();
 80037b0:	f7ff ffae 	bl	8003710 <ext_flash_wren>
	flashCSReset();
 80037b4:	f7ff ff2a 	bl	800360c <flashCSReset>
	SPI1_Transfer(0x02);
 80037b8:	2002      	movs	r0, #2
 80037ba:	f001 f823 	bl	8004804 <SPI1_Transfer>
	SPI1_Transfer((address>>16)&0xFF);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	0c1b      	lsrs	r3, r3, #16
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	4618      	mov	r0, r3
 80037c6:	f001 f81d 	bl	8004804 <SPI1_Transfer>
	SPI1_Transfer((address>>8)&0xFF);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	0a1b      	lsrs	r3, r3, #8
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	4618      	mov	r0, r3
 80037d2:	f001 f817 	bl	8004804 <SPI1_Transfer>
	SPI1_Transfer(address&0xFF);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	4618      	mov	r0, r3
 80037dc:	f001 f812 	bl	8004804 <SPI1_Transfer>
	if(FLASHWRITE_DEBUG_PRINT){printf("FLASHWRITE @ %x :", address);};
 80037e0:	6879      	ldr	r1, [r7, #4]
 80037e2:	4803      	ldr	r0, [pc, #12]	; (80037f0 <ext_flash_continuous_write_begin+0x48>)
 80037e4:	f005 fdda 	bl	800939c <iprintf>
}
 80037e8:	bf00      	nop
 80037ea:	3708      	adds	r7, #8
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	0800ad58 	.word	0x0800ad58

080037f4 <ext_flash_continuous_write_write>:
void ext_flash_continuous_write_write(unsigned char *buff, unsigned int len){
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
	unsigned int i;

	for(i=0;i<len;i++)
 80037fe:	2300      	movs	r3, #0
 8003800:	60fb      	str	r3, [r7, #12]
 8003802:	e011      	b.n	8003828 <ext_flash_continuous_write_write+0x34>
		{
			SPI1_Transfer(buff[i]);
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	4413      	add	r3, r2
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	4618      	mov	r0, r3
 800380e:	f000 fff9 	bl	8004804 <SPI1_Transfer>
			if(FLASHWRITE_DEBUG_PRINT){printf(" %x ", buff[i]);};
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	4413      	add	r3, r2
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	4619      	mov	r1, r3
 800381c:	4808      	ldr	r0, [pc, #32]	; (8003840 <ext_flash_continuous_write_write+0x4c>)
 800381e:	f005 fdbd 	bl	800939c <iprintf>
	for(i=0;i<len;i++)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	3301      	adds	r3, #1
 8003826:	60fb      	str	r3, [r7, #12]
 8003828:	68fa      	ldr	r2, [r7, #12]
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	429a      	cmp	r2, r3
 800382e:	d3e9      	bcc.n	8003804 <ext_flash_continuous_write_write+0x10>
		}
	if(FLASHWRITE_DEBUG_PRINT){printf("\n\r");};
 8003830:	4804      	ldr	r0, [pc, #16]	; (8003844 <ext_flash_continuous_write_write+0x50>)
 8003832:	f005 fdb3 	bl	800939c <iprintf>
}
 8003836:	bf00      	nop
 8003838:	3710      	adds	r7, #16
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	0800ad6c 	.word	0x0800ad6c
 8003844:	0800ad74 	.word	0x0800ad74

08003848 <ext_flash_continuous_write_finish>:
void ext_flash_continuous_write_finish(){
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
	flashCSSet();
 800384e:	f7ff fed1 	bl	80035f4 <flashCSSet>
	unsigned int i;
	for(i=0;i<1000;i++)
 8003852:	2300      	movs	r3, #0
 8003854:	607b      	str	r3, [r7, #4]
 8003856:	e00a      	b.n	800386e <ext_flash_continuous_write_finish+0x26>
	{
		HAL_Delay(1);
 8003858:	2001      	movs	r0, #1
 800385a:	f001 fd75 	bl	8005348 <HAL_Delay>
		if(ext_flash_read_status_register_1()==0x00)
 800385e:	f7ff ff43 	bl	80036e8 <ext_flash_read_status_register_1>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d007      	beq.n	8003878 <ext_flash_continuous_write_finish+0x30>
	for(i=0;i<1000;i++)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	3301      	adds	r3, #1
 800386c:	607b      	str	r3, [r7, #4]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003874:	d3f0      	bcc.n	8003858 <ext_flash_continuous_write_finish+0x10>
		{
			break;
		}
	}
}
 8003876:	e000      	b.n	800387a <ext_flash_continuous_write_finish+0x32>
			break;
 8003878:	bf00      	nop
}
 800387a:	bf00      	nop
 800387c:	3708      	adds	r7, #8
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
	...

08003884 <ext_flash_write_multipage>:

}



void ext_flash_write_multipage(unsigned int address, unsigned char *buff, unsigned int len){
 8003884:	b580      	push	{r7, lr}
 8003886:	b0c8      	sub	sp, #288	; 0x120
 8003888:	af00      	add	r7, sp, #0
 800388a:	f107 030c 	add.w	r3, r7, #12
 800388e:	6018      	str	r0, [r3, #0]
 8003890:	f107 0308 	add.w	r3, r7, #8
 8003894:	6019      	str	r1, [r3, #0]
 8003896:	1d3b      	adds	r3, r7, #4
 8003898:	601a      	str	r2, [r3, #0]
	printf("Multipage write [%d]b@%d \n\r", len, address);
 800389a:	f107 020c 	add.w	r2, r7, #12
 800389e:	1d3b      	adds	r3, r7, #4
 80038a0:	6812      	ldr	r2, [r2, #0]
 80038a2:	6819      	ldr	r1, [r3, #0]
 80038a4:	482a      	ldr	r0, [pc, #168]	; (8003950 <ext_flash_write_multipage+0xcc>)
 80038a6:	f005 fd79 	bl	800939c <iprintf>
	unsigned char pageBuff[PAGE_SIZE];
	unsigned int bytesLeft = len;
 80038aa:	1d3b      	adds	r3, r7, #4
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	unsigned int buffIndex = 0;
 80038b2:	2300      	movs	r3, #0
 80038b4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	unsigned int addrIncrement = 0;
 80038b8:	2300      	movs	r3, #0
 80038ba:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	while(bytesLeft > 0){
 80038be:	e03d      	b.n	800393c <ext_flash_write_multipage+0xb8>
		if(bytesLeft <= PAGE_SIZE){
 80038c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80038c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038c8:	d810      	bhi.n	80038ec <ext_flash_write_multipage+0x68>
			memcpy(pageBuff, buff + buffIndex, bytesLeft);
 80038ca:	f107 0308 	add.w	r3, r7, #8
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038d4:	18d1      	adds	r1, r2, r3
 80038d6:	f107 0314 	add.w	r3, r7, #20
 80038da:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80038de:	4618      	mov	r0, r3
 80038e0:	f005 fd46 	bl	8009370 <memcpy>
			bytesLeft = 0;
 80038e4:	2300      	movs	r3, #0
 80038e6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80038ea:	e014      	b.n	8003916 <ext_flash_write_multipage+0x92>
		}
		else{
			memcpy(pageBuff, buff + buffIndex, PAGE_SIZE);
 80038ec:	f107 0308 	add.w	r3, r7, #8
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038f6:	4413      	add	r3, r2
 80038f8:	f107 0214 	add.w	r2, r7, #20
 80038fc:	4610      	mov	r0, r2
 80038fe:	4619      	mov	r1, r3
 8003900:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003904:	461a      	mov	r2, r3
 8003906:	f005 fd33 	bl	8009370 <memcpy>
			bytesLeft -= PAGE_SIZE;
 800390a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800390e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003912:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
		}
		ext_flash_write(address + addrIncrement, pageBuff, PAGE_SIZE);
 8003916:	f107 030c 	add.w	r3, r7, #12
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003920:	4413      	add	r3, r2
 8003922:	f107 0114 	add.w	r1, r7, #20
 8003926:	f44f 7280 	mov.w	r2, #256	; 0x100
 800392a:	4618      	mov	r0, r3
 800392c:	f7ff feb6 	bl	800369c <ext_flash_write>
		addrIncrement += PAGE_SIZE;
 8003930:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003934:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003938:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	while(bytesLeft > 0){
 800393c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003940:	2b00      	cmp	r3, #0
 8003942:	d1bd      	bne.n	80038c0 <ext_flash_write_multipage+0x3c>
	}

}
 8003944:	bf00      	nop
 8003946:	bf00      	nop
 8003948:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}
 8003950:	0800ad98 	.word	0x0800ad98

08003954 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003956:	f6ad 4d64 	subw	sp, sp, #3172	; 0xc64
 800395a:	af7e      	add	r7, sp, #504	; 0x1f8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800395c:	f001 fc82 	bl	8005264 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003960:	f000 fa1e 	bl	8003da0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003964:	f000 fbe0 	bl	8004128 <MX_GPIO_Init>
  MX_FSMC_Init();
 8003968:	f000 fc84 	bl	8004274 <MX_FSMC_Init>
  MX_USART1_UART_Init();
 800396c:	f000 fb78 	bl	8004060 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8003970:	f000 fa80 	bl	8003e74 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8003974:	f000 fba6 	bl	80040c4 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8003978:	f000 fab2 	bl	8003ee0 <MX_SPI1_Init>
  MX_TIM1_Init();
 800397c:	f000 faee 	bl	8003f5c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  //enable uart interrupt
  uint16_t count = 0;
 8003980:	2300      	movs	r3, #0
 8003982:	f8a7 3a52 	strh.w	r3, [r7, #2642]	; 0xa52
  Init_LCD();
 8003986:	f7fd f905 	bl	8000b94 <Init_LCD>

  touch_reset();
 800398a:	f7fd fe0b 	bl	80015a4 <touch_reset>
  touch_init(hi2c1);
 800398e:	4cd4      	ldr	r4, [pc, #848]	; (8003ce0 <main+0x38c>)
 8003990:	4668      	mov	r0, sp
 8003992:	f104 0310 	add.w	r3, r4, #16
 8003996:	2244      	movs	r2, #68	; 0x44
 8003998:	4619      	mov	r1, r3
 800399a:	f005 fce9 	bl	8009370 <memcpy>
 800399e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80039a2:	f7fd fd1f 	bl	80013e4 <touch_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  	  printf("Entering main loop\n\r");
 80039a6:	48cf      	ldr	r0, [pc, #828]	; (8003ce4 <main+0x390>)
 80039a8:	f005 fcf8 	bl	800939c <iprintf>


  	int loopNumber = 0;
 80039ac:	2300      	movs	r3, #0
 80039ae:	f8c7 3a54 	str.w	r3, [r7, #2644]	; 0xa54



	LCD_fillRect(0,0,50,50,WHITE);
 80039b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80039b6:	9300      	str	r3, [sp, #0]
 80039b8:	2332      	movs	r3, #50	; 0x32
 80039ba:	2232      	movs	r2, #50	; 0x32
 80039bc:	2100      	movs	r1, #0
 80039be:	2000      	movs	r0, #0
 80039c0:	f7fd f8f6 	bl	8000bb0 <LCD_fillRect>
	LCD_fillRect(470,0,50,50,RED);
 80039c4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80039c8:	9300      	str	r3, [sp, #0]
 80039ca:	2332      	movs	r3, #50	; 0x32
 80039cc:	2232      	movs	r2, #50	; 0x32
 80039ce:	2100      	movs	r1, #0
 80039d0:	f44f 70eb 	mov.w	r0, #470	; 0x1d6
 80039d4:	f7fd f8ec 	bl	8000bb0 <LCD_fillRect>
	LCD_fillRect(256,154,50,50,RED);
 80039d8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80039dc:	9300      	str	r3, [sp, #0]
 80039de:	2332      	movs	r3, #50	; 0x32
 80039e0:	2232      	movs	r2, #50	; 0x32
 80039e2:	219a      	movs	r1, #154	; 0x9a
 80039e4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80039e8:	f7fd f8e2 	bl	8000bb0 <LCD_fillRect>
	LCD_fillRect(100,100,50,50,YELLOW);
 80039ec:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80039f0:	9300      	str	r3, [sp, #0]
 80039f2:	2332      	movs	r3, #50	; 0x32
 80039f4:	2232      	movs	r2, #50	; 0x32
 80039f6:	2164      	movs	r1, #100	; 0x64
 80039f8:	2064      	movs	r0, #100	; 0x64
 80039fa:	f7fd f8d9 	bl	8000bb0 <LCD_fillRect>
	printf("Register result: %d\n\r",touch_register_element(0,0,0,0,50,50,0,0));
 80039fe:	2300      	movs	r3, #0
 8003a00:	9303      	str	r3, [sp, #12]
 8003a02:	2300      	movs	r3, #0
 8003a04:	9302      	str	r3, [sp, #8]
 8003a06:	2332      	movs	r3, #50	; 0x32
 8003a08:	9301      	str	r3, [sp, #4]
 8003a0a:	2332      	movs	r3, #50	; 0x32
 8003a0c:	9300      	str	r3, [sp, #0]
 8003a0e:	2300      	movs	r3, #0
 8003a10:	2200      	movs	r2, #0
 8003a12:	2100      	movs	r1, #0
 8003a14:	2000      	movs	r0, #0
 8003a16:	f7fd febf 	bl	8001798 <touch_register_element>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	4619      	mov	r1, r3
 8003a1e:	48b2      	ldr	r0, [pc, #712]	; (8003ce8 <main+0x394>)
 8003a20:	f005 fcbc 	bl	800939c <iprintf>
	printf("Register result: %d\n\r",touch_register_element(0,0,470,0,470+50,50,0,0));
 8003a24:	2300      	movs	r3, #0
 8003a26:	9303      	str	r3, [sp, #12]
 8003a28:	2300      	movs	r3, #0
 8003a2a:	9302      	str	r3, [sp, #8]
 8003a2c:	2332      	movs	r3, #50	; 0x32
 8003a2e:	9301      	str	r3, [sp, #4]
 8003a30:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003a34:	9300      	str	r3, [sp, #0]
 8003a36:	2300      	movs	r3, #0
 8003a38:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8003a3c:	2100      	movs	r1, #0
 8003a3e:	2000      	movs	r0, #0
 8003a40:	f7fd feaa 	bl	8001798 <touch_register_element>
 8003a44:	4603      	mov	r3, r0
 8003a46:	4619      	mov	r1, r3
 8003a48:	48a7      	ldr	r0, [pc, #668]	; (8003ce8 <main+0x394>)
 8003a4a:	f005 fca7 	bl	800939c <iprintf>
	printf("Register result: %d\n\r",touch_register_element(0,0,256,154,256+50,154+50,0,0));
 8003a4e:	2300      	movs	r3, #0
 8003a50:	9303      	str	r3, [sp, #12]
 8003a52:	2300      	movs	r3, #0
 8003a54:	9302      	str	r3, [sp, #8]
 8003a56:	23cc      	movs	r3, #204	; 0xcc
 8003a58:	9301      	str	r3, [sp, #4]
 8003a5a:	f44f 7399 	mov.w	r3, #306	; 0x132
 8003a5e:	9300      	str	r3, [sp, #0]
 8003a60:	239a      	movs	r3, #154	; 0x9a
 8003a62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a66:	2100      	movs	r1, #0
 8003a68:	2000      	movs	r0, #0
 8003a6a:	f7fd fe95 	bl	8001798 <touch_register_element>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	4619      	mov	r1, r3
 8003a72:	489d      	ldr	r0, [pc, #628]	; (8003ce8 <main+0x394>)
 8003a74:	f005 fc92 	bl	800939c <iprintf>
	printf("Register result: %d\n\r",touch_register_element(0,0,100,100,150,150,0,0));
 8003a78:	2300      	movs	r3, #0
 8003a7a:	9303      	str	r3, [sp, #12]
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	9302      	str	r3, [sp, #8]
 8003a80:	2396      	movs	r3, #150	; 0x96
 8003a82:	9301      	str	r3, [sp, #4]
 8003a84:	2396      	movs	r3, #150	; 0x96
 8003a86:	9300      	str	r3, [sp, #0]
 8003a88:	2364      	movs	r3, #100	; 0x64
 8003a8a:	2264      	movs	r2, #100	; 0x64
 8003a8c:	2100      	movs	r1, #0
 8003a8e:	2000      	movs	r0, #0
 8003a90:	f7fd fe82 	bl	8001798 <touch_register_element>
 8003a94:	4603      	mov	r3, r0
 8003a96:	4619      	mov	r1, r3
 8003a98:	4893      	ldr	r0, [pc, #588]	; (8003ce8 <main+0x394>)
 8003a9a:	f005 fc7f 	bl	800939c <iprintf>

	int notYetDrawnFlag = 1;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	f8c7 3a58 	str.w	r3, [r7, #2648]	; 0xa58
	struct generalConfig gConf;
	int currentScreen = 1;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	f8c7 3a4c 	str.w	r3, [r7, #2636]	; 0xa4c

	//arrays for holding object data loaded from flash
	uint16_t maxObjects = 128;
 8003aaa:	2380      	movs	r3, #128	; 0x80
 8003aac:	f8a7 3a4a 	strh.w	r3, [r7, #2634]	; 0xa4a
	uint16_t maxData = SECTOR_SIZE*4;
 8003ab0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003ab4:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
	struct screen screenHeader;
	struct object objArr[maxObjects];
 8003ab8:	f8b7 6a4a 	ldrh.w	r6, [r7, #2634]	; 0xa4a
 8003abc:	4633      	mov	r3, r6
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	f8c7 3a44 	str.w	r3, [r7, #2628]	; 0xa44
 8003ac4:	b2b4      	uxth	r4, r6
 8003ac6:	f04f 0500 	mov.w	r5, #0
 8003aca:	4622      	mov	r2, r4
 8003acc:	462b      	mov	r3, r5
 8003ace:	f04f 0000 	mov.w	r0, #0
 8003ad2:	f04f 0100 	mov.w	r1, #0
 8003ad6:	00d9      	lsls	r1, r3, #3
 8003ad8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003adc:	00d0      	lsls	r0, r2, #3
 8003ade:	4602      	mov	r2, r0
 8003ae0:	460b      	mov	r3, r1
 8003ae2:	1b12      	subs	r2, r2, r4
 8003ae4:	eb63 0305 	sbc.w	r3, r3, r5
 8003ae8:	f04f 0000 	mov.w	r0, #0
 8003aec:	f04f 0100 	mov.w	r1, #0
 8003af0:	0119      	lsls	r1, r3, #4
 8003af2:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8003af6:	0110      	lsls	r0, r2, #4
 8003af8:	4602      	mov	r2, r0
 8003afa:	460b      	mov	r3, r1
 8003afc:	4632      	mov	r2, r6
 8003afe:	4613      	mov	r3, r2
 8003b00:	00db      	lsls	r3, r3, #3
 8003b02:	1a9b      	subs	r3, r3, r2
 8003b04:	005b      	lsls	r3, r3, #1
 8003b06:	b2b4      	uxth	r4, r6
 8003b08:	f04f 0500 	mov.w	r5, #0
 8003b0c:	4622      	mov	r2, r4
 8003b0e:	462b      	mov	r3, r5
 8003b10:	f04f 0000 	mov.w	r0, #0
 8003b14:	f04f 0100 	mov.w	r1, #0
 8003b18:	00d9      	lsls	r1, r3, #3
 8003b1a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b1e:	00d0      	lsls	r0, r2, #3
 8003b20:	4602      	mov	r2, r0
 8003b22:	460b      	mov	r3, r1
 8003b24:	1b12      	subs	r2, r2, r4
 8003b26:	eb63 0305 	sbc.w	r3, r3, r5
 8003b2a:	f04f 0000 	mov.w	r0, #0
 8003b2e:	f04f 0100 	mov.w	r1, #0
 8003b32:	0119      	lsls	r1, r3, #4
 8003b34:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8003b38:	0110      	lsls	r0, r2, #4
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	4632      	mov	r2, r6
 8003b40:	4613      	mov	r3, r2
 8003b42:	00db      	lsls	r3, r3, #3
 8003b44:	1a9b      	subs	r3, r3, r2
 8003b46:	005b      	lsls	r3, r3, #1
 8003b48:	3307      	adds	r3, #7
 8003b4a:	08db      	lsrs	r3, r3, #3
 8003b4c:	00db      	lsls	r3, r3, #3
 8003b4e:	ebad 0d03 	sub.w	sp, sp, r3
 8003b52:	ab7e      	add	r3, sp, #504	; 0x1f8
 8003b54:	3301      	adds	r3, #1
 8003b56:	085b      	lsrs	r3, r3, #1
 8003b58:	005b      	lsls	r3, r3, #1
 8003b5a:	f8c7 3a40 	str.w	r3, [r7, #2624]	; 0xa40
	uint8_t dataArr[maxData];
 8003b5e:	f8b7 4a48 	ldrh.w	r4, [r7, #2632]	; 0xa48
 8003b62:	4623      	mov	r3, r4
 8003b64:	3b01      	subs	r3, #1
 8003b66:	f8c7 3a3c 	str.w	r3, [r7, #2620]	; 0xa3c
 8003b6a:	b2a0      	uxth	r0, r4
 8003b6c:	f04f 0100 	mov.w	r1, #0
 8003b70:	f04f 0200 	mov.w	r2, #0
 8003b74:	f04f 0300 	mov.w	r3, #0
 8003b78:	00cb      	lsls	r3, r1, #3
 8003b7a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003b7e:	00c2      	lsls	r2, r0, #3
 8003b80:	b2a0      	uxth	r0, r4
 8003b82:	f04f 0100 	mov.w	r1, #0
 8003b86:	f04f 0200 	mov.w	r2, #0
 8003b8a:	f04f 0300 	mov.w	r3, #0
 8003b8e:	00cb      	lsls	r3, r1, #3
 8003b90:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003b94:	00c2      	lsls	r2, r0, #3
 8003b96:	4623      	mov	r3, r4
 8003b98:	3307      	adds	r3, #7
 8003b9a:	08db      	lsrs	r3, r3, #3
 8003b9c:	00db      	lsls	r3, r3, #3
 8003b9e:	ebad 0d03 	sub.w	sp, sp, r3
 8003ba2:	ab7e      	add	r3, sp, #504	; 0x1f8
 8003ba4:	3300      	adds	r3, #0
 8003ba6:	f8c7 3a38 	str.w	r3, [r7, #2616]	; 0xa38
	uint8_t *pointerArr[maxObjects];
 8003baa:	f8b7 4a4a 	ldrh.w	r4, [r7, #2634]	; 0xa4a
 8003bae:	4623      	mov	r3, r4
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	f8c7 3a34 	str.w	r3, [r7, #2612]	; 0xa34
 8003bb6:	b2a0      	uxth	r0, r4
 8003bb8:	f04f 0100 	mov.w	r1, #0
 8003bbc:	f04f 0200 	mov.w	r2, #0
 8003bc0:	f04f 0300 	mov.w	r3, #0
 8003bc4:	014b      	lsls	r3, r1, #5
 8003bc6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003bca:	0142      	lsls	r2, r0, #5
 8003bcc:	b2a0      	uxth	r0, r4
 8003bce:	f04f 0100 	mov.w	r1, #0
 8003bd2:	f04f 0200 	mov.w	r2, #0
 8003bd6:	f04f 0300 	mov.w	r3, #0
 8003bda:	014b      	lsls	r3, r1, #5
 8003bdc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003be0:	0142      	lsls	r2, r0, #5
 8003be2:	4623      	mov	r3, r4
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	3307      	adds	r3, #7
 8003be8:	08db      	lsrs	r3, r3, #3
 8003bea:	00db      	lsls	r3, r3, #3
 8003bec:	ebad 0d03 	sub.w	sp, sp, r3
 8003bf0:	ab7e      	add	r3, sp, #504	; 0x1f8
 8003bf2:	3303      	adds	r3, #3
 8003bf4:	089b      	lsrs	r3, r3, #2
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	f8c7 3a30 	str.w	r3, [r7, #2608]	; 0xa30


	while (1)
	{

		loopNumber++;
 8003bfc:	f8d7 3a54 	ldr.w	r3, [r7, #2644]	; 0xa54
 8003c00:	3301      	adds	r3, #1
 8003c02:	f8c7 3a54 	str.w	r3, [r7, #2644]	; 0xa54
		int configResult = 1; //1 = no data on uart
 8003c06:	2301      	movs	r3, #1
 8003c08:	f8c7 3a5c 	str.w	r3, [r7, #2652]	; 0xa5c
		if(loopNumber % 6000000 == 0){
 8003c0c:	f8d7 2a54 	ldr.w	r2, [r7, #2644]	; 0xa54
 8003c10:	4b36      	ldr	r3, [pc, #216]	; (8003cec <main+0x398>)
 8003c12:	fb83 1302 	smull	r1, r3, r3, r2
 8003c16:	14d9      	asrs	r1, r3, #19
 8003c18:	17d3      	asrs	r3, r2, #31
 8003c1a:	1acb      	subs	r3, r1, r3
 8003c1c:	4934      	ldr	r1, [pc, #208]	; (8003cf0 <main+0x39c>)
 8003c1e:	fb01 f303 	mul.w	r3, r1, r3
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d129      	bne.n	8003c7c <main+0x328>
			 configResult = configFromUart(); //check if there's incoming data on config uart, if yes, attempt to read configuration
 8003c28:	f7fd ffbc 	bl	8001ba4 <configFromUart>
 8003c2c:	f8c7 0a5c 	str.w	r0, [r7, #2652]	; 0xa5c
			 char str[] = "You fight \nlike a dairy\nfarmer!";
 8003c30:	1d3b      	adds	r3, r7, #4
 8003c32:	4a30      	ldr	r2, [pc, #192]	; (8003cf4 <main+0x3a0>)
 8003c34:	461c      	mov	r4, r3
 8003c36:	4615      	mov	r5, r2
 8003c38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c3c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003c40:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			 drawStringToLcd5x7(100, 20, 5, 0xAA, 0, 0xFF, 3, 5, str);
 8003c44:	1d3b      	adds	r3, r7, #4
 8003c46:	9304      	str	r3, [sp, #16]
 8003c48:	2305      	movs	r3, #5
 8003c4a:	9303      	str	r3, [sp, #12]
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	9302      	str	r3, [sp, #8]
 8003c50:	23ff      	movs	r3, #255	; 0xff
 8003c52:	9301      	str	r3, [sp, #4]
 8003c54:	2300      	movs	r3, #0
 8003c56:	9300      	str	r3, [sp, #0]
 8003c58:	23aa      	movs	r3, #170	; 0xaa
 8003c5a:	2205      	movs	r2, #5
 8003c5c:	2114      	movs	r1, #20
 8003c5e:	2064      	movs	r0, #100	; 0x64
 8003c60:	f000 fcde 	bl	8004620 <drawStringToLcd5x7>

			 //debug
			 struct bitmapList bl;
			 readBitmapList(&bl);
 8003c64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f7ff f96b 	bl	8002f44 <readBitmapList>
			 printf("total bitmaps: >> %d \n\r", bl.totalBitmaps);
 8003c6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c72:	881b      	ldrh	r3, [r3, #0]
 8003c74:	4619      	mov	r1, r3
 8003c76:	4820      	ldr	r0, [pc, #128]	; (8003cf8 <main+0x3a4>)
 8003c78:	f005 fb90 	bl	800939c <iprintf>
		}

		//redraw display
		if(notYetDrawnFlag || configResult != 1){
 8003c7c:	f8d7 3a58 	ldr.w	r3, [r7, #2648]	; 0xa58
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d104      	bne.n	8003c8e <main+0x33a>
 8003c84:	f8d7 3a5c 	ldr.w	r3, [r7, #2652]	; 0xa5c
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	f000 8086 	beq.w	8003d9a <main+0x446>
			notYetDrawnFlag = 0;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	f8c7 3a58 	str.w	r3, [r7, #2648]	; 0xa58
			readGeneralConfig(&gConf);
 8003c94:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f7ff f935 	bl	8002f08 <readGeneralConfig>
			printf("Redrawing display. Just FYI:\n\r");
 8003c9e:	4817      	ldr	r0, [pc, #92]	; (8003cfc <main+0x3a8>)
 8003ca0:	f005 fb7c 	bl	800939c <iprintf>
			printAllScreens(gConf);
 8003ca4:	f607 042c 	addw	r4, r7, #2092	; 0x82c
 8003ca8:	4668      	mov	r0, sp
 8003caa:	f104 0310 	add.w	r3, r4, #16
 8003cae:	f44f 72f9 	mov.w	r2, #498	; 0x1f2
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	f005 fb5c 	bl	8009370 <memcpy>
 8003cb8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003cbc:	f7ff fa50 	bl	8003160 <printAllScreens>
			int objectsRead = 0;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	f8c7 3a60 	str.w	r3, [r7, #2656]	; 0xa60
			currentScreen = 0;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	f8c7 3a4c 	str.w	r3, [r7, #2636]	; 0xa4c
			if(currentScreen < gConf.totalScreens){
 8003ccc:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	f8d7 3a4c 	ldr.w	r3, [r7, #2636]	; 0xa4c
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	da2d      	bge.n	8003d38 <main+0x3e4>
 8003cdc:	e010      	b.n	8003d00 <main+0x3ac>
 8003cde:	bf00      	nop
 8003ce0:	20002090 	.word	0x20002090
 8003ce4:	0800adb4 	.word	0x0800adb4
 8003ce8:	0800adcc 	.word	0x0800adcc
 8003cec:	165e9f81 	.word	0x165e9f81
 8003cf0:	005b8d80 	.word	0x005b8d80
 8003cf4:	0800ae1c 	.word	0x0800ae1c
 8003cf8:	0800ade4 	.word	0x0800ade4
 8003cfc:	0800adfc 	.word	0x0800adfc
				objectsRead = openScreen(gConf.screenSectors[currentScreen], &screenHeader, objArr, dataArr, pointerArr, maxData, maxObjects);
 8003d00:	f607 022c 	addw	r2, r7, #2092	; 0x82c
 8003d04:	f8d7 3a4c 	ldr.w	r3, [r7, #2636]	; 0xa4c
 8003d08:	005b      	lsls	r3, r3, #1
 8003d0a:	4413      	add	r3, r2
 8003d0c:	8858      	ldrh	r0, [r3, #2]
 8003d0e:	f8d7 4a40 	ldr.w	r4, [r7, #2624]	; 0xa40
 8003d12:	f8d7 5a38 	ldr.w	r5, [r7, #2616]	; 0xa38
 8003d16:	f8d7 3a30 	ldr.w	r3, [r7, #2608]	; 0xa30
 8003d1a:	f607 0128 	addw	r1, r7, #2088	; 0x828
 8003d1e:	f8b7 2a4a 	ldrh.w	r2, [r7, #2634]	; 0xa4a
 8003d22:	9202      	str	r2, [sp, #8]
 8003d24:	f8b7 2a48 	ldrh.w	r2, [r7, #2632]	; 0xa48
 8003d28:	9201      	str	r2, [sp, #4]
 8003d2a:	9300      	str	r3, [sp, #0]
 8003d2c:	462b      	mov	r3, r5
 8003d2e:	4622      	mov	r2, r4
 8003d30:	f7ff f928 	bl	8002f84 <openScreen>
 8003d34:	f8c7 0a60 	str.w	r0, [r7, #2656]	; 0xa60
			}
			int i;
			for(i = 0; i<objectsRead; i++){
 8003d38:	2300      	movs	r3, #0
 8003d3a:	f8c7 3a64 	str.w	r3, [r7, #2660]	; 0xa64
 8003d3e:	e026      	b.n	8003d8e <main+0x43a>
				drawObjectToLcd(objArr[i], pointerArr[i], 0);
 8003d40:	f8d7 3a30 	ldr.w	r3, [r7, #2608]	; 0xa30
 8003d44:	f8d7 2a64 	ldr.w	r2, [r7, #2660]	; 0xa64
 8003d48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003d4c:	f8d7 0a40 	ldr.w	r0, [r7, #2624]	; 0xa40
 8003d50:	f8d7 2a64 	ldr.w	r2, [r7, #2660]	; 0xa64
 8003d54:	4613      	mov	r3, r2
 8003d56:	00db      	lsls	r3, r3, #3
 8003d58:	1a9b      	subs	r3, r3, r2
 8003d5a:	005b      	lsls	r3, r3, #1
 8003d5c:	4403      	add	r3, r0
 8003d5e:	2200      	movs	r2, #0
 8003d60:	9201      	str	r2, [sp, #4]
 8003d62:	9100      	str	r1, [sp, #0]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	2000      	movs	r0, #0
 8003d68:	4610      	mov	r0, r2
 8003d6a:	685a      	ldr	r2, [r3, #4]
 8003d6c:	2100      	movs	r1, #0
 8003d6e:	4611      	mov	r1, r2
 8003d70:	689a      	ldr	r2, [r3, #8]
 8003d72:	2400      	movs	r4, #0
 8003d74:	4614      	mov	r4, r2
 8003d76:	899a      	ldrh	r2, [r3, #12]
 8003d78:	2300      	movs	r3, #0
 8003d7a:	f362 030f 	bfi	r3, r2, #0, #16
 8003d7e:	4622      	mov	r2, r4
 8003d80:	f000 faf8 	bl	8004374 <drawObjectToLcd>
			for(i = 0; i<objectsRead; i++){
 8003d84:	f8d7 3a64 	ldr.w	r3, [r7, #2660]	; 0xa64
 8003d88:	3301      	adds	r3, #1
 8003d8a:	f8c7 3a64 	str.w	r3, [r7, #2660]	; 0xa64
 8003d8e:	f8d7 2a64 	ldr.w	r2, [r7, #2660]	; 0xa64
 8003d92:	f8d7 3a60 	ldr.w	r3, [r7, #2656]	; 0xa60
 8003d96:	429a      	cmp	r2, r3
 8003d98:	dbd2      	blt.n	8003d40 <main+0x3ec>
			}
		}



		touch_periodic_process();
 8003d9a:	f7fd fc19 	bl	80015d0 <touch_periodic_process>
	{
 8003d9e:	e72d      	b.n	8003bfc <main+0x2a8>

08003da0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b094      	sub	sp, #80	; 0x50
 8003da4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003da6:	f107 0320 	add.w	r3, r7, #32
 8003daa:	2230      	movs	r2, #48	; 0x30
 8003dac:	2100      	movs	r1, #0
 8003dae:	4618      	mov	r0, r3
 8003db0:	f005 faec 	bl	800938c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003db4:	f107 030c 	add.w	r3, r7, #12
 8003db8:	2200      	movs	r2, #0
 8003dba:	601a      	str	r2, [r3, #0]
 8003dbc:	605a      	str	r2, [r3, #4]
 8003dbe:	609a      	str	r2, [r3, #8]
 8003dc0:	60da      	str	r2, [r3, #12]
 8003dc2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	60bb      	str	r3, [r7, #8]
 8003dc8:	4b28      	ldr	r3, [pc, #160]	; (8003e6c <SystemClock_Config+0xcc>)
 8003dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dcc:	4a27      	ldr	r2, [pc, #156]	; (8003e6c <SystemClock_Config+0xcc>)
 8003dce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dd2:	6413      	str	r3, [r2, #64]	; 0x40
 8003dd4:	4b25      	ldr	r3, [pc, #148]	; (8003e6c <SystemClock_Config+0xcc>)
 8003dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ddc:	60bb      	str	r3, [r7, #8]
 8003dde:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003de0:	2300      	movs	r3, #0
 8003de2:	607b      	str	r3, [r7, #4]
 8003de4:	4b22      	ldr	r3, [pc, #136]	; (8003e70 <SystemClock_Config+0xd0>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a21      	ldr	r2, [pc, #132]	; (8003e70 <SystemClock_Config+0xd0>)
 8003dea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003dee:	6013      	str	r3, [r2, #0]
 8003df0:	4b1f      	ldr	r3, [pc, #124]	; (8003e70 <SystemClock_Config+0xd0>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003df8:	607b      	str	r3, [r7, #4]
 8003dfa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003e00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e04:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003e06:	2302      	movs	r3, #2
 8003e08:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003e0a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003e10:	2308      	movs	r3, #8
 8003e12:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003e14:	23a8      	movs	r3, #168	; 0xa8
 8003e16:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003e18:	2302      	movs	r3, #2
 8003e1a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003e1c:	2304      	movs	r3, #4
 8003e1e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003e20:	f107 0320 	add.w	r3, r7, #32
 8003e24:	4618      	mov	r0, r3
 8003e26:	f002 ff65 	bl	8006cf4 <HAL_RCC_OscConfig>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d001      	beq.n	8003e34 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003e30:	f000 fa9a 	bl	8004368 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003e34:	230f      	movs	r3, #15
 8003e36:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003e38:	2302      	movs	r3, #2
 8003e3a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003e40:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003e44:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003e46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e4a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003e4c:	f107 030c 	add.w	r3, r7, #12
 8003e50:	2105      	movs	r1, #5
 8003e52:	4618      	mov	r0, r3
 8003e54:	f003 f9c6 	bl	80071e4 <HAL_RCC_ClockConfig>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d001      	beq.n	8003e62 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003e5e:	f000 fa83 	bl	8004368 <Error_Handler>
  }
}
 8003e62:	bf00      	nop
 8003e64:	3750      	adds	r7, #80	; 0x50
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	40023800 	.word	0x40023800
 8003e70:	40007000 	.word	0x40007000

08003e74 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003e78:	4b16      	ldr	r3, [pc, #88]	; (8003ed4 <MX_I2C1_Init+0x60>)
 8003e7a:	4a17      	ldr	r2, [pc, #92]	; (8003ed8 <MX_I2C1_Init+0x64>)
 8003e7c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003e7e:	4b15      	ldr	r3, [pc, #84]	; (8003ed4 <MX_I2C1_Init+0x60>)
 8003e80:	4a16      	ldr	r2, [pc, #88]	; (8003edc <MX_I2C1_Init+0x68>)
 8003e82:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003e84:	4b13      	ldr	r3, [pc, #76]	; (8003ed4 <MX_I2C1_Init+0x60>)
 8003e86:	2200      	movs	r2, #0
 8003e88:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003e8a:	4b12      	ldr	r3, [pc, #72]	; (8003ed4 <MX_I2C1_Init+0x60>)
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003e90:	4b10      	ldr	r3, [pc, #64]	; (8003ed4 <MX_I2C1_Init+0x60>)
 8003e92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003e96:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003e98:	4b0e      	ldr	r3, [pc, #56]	; (8003ed4 <MX_I2C1_Init+0x60>)
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003e9e:	4b0d      	ldr	r3, [pc, #52]	; (8003ed4 <MX_I2C1_Init+0x60>)
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003ea4:	4b0b      	ldr	r3, [pc, #44]	; (8003ed4 <MX_I2C1_Init+0x60>)
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003eaa:	4b0a      	ldr	r3, [pc, #40]	; (8003ed4 <MX_I2C1_Init+0x60>)
 8003eac:	2200      	movs	r2, #0
 8003eae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003eb0:	4808      	ldr	r0, [pc, #32]	; (8003ed4 <MX_I2C1_Init+0x60>)
 8003eb2:	f001 fddf 	bl	8005a74 <HAL_I2C_Init>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d001      	beq.n	8003ec0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003ebc:	f000 fa54 	bl	8004368 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  __HAL_I2C_ENABLE(&hi2c1);
 8003ec0:	4b04      	ldr	r3, [pc, #16]	; (8003ed4 <MX_I2C1_Init+0x60>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	4b03      	ldr	r3, [pc, #12]	; (8003ed4 <MX_I2C1_Init+0x60>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f042 0201 	orr.w	r2, r2, #1
 8003ece:	601a      	str	r2, [r3, #0]
  /* USER CODE END I2C1_Init 2 */

}
 8003ed0:	bf00      	nop
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	20002090 	.word	0x20002090
 8003ed8:	40005400 	.word	0x40005400
 8003edc:	000186a0 	.word	0x000186a0

08003ee0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003ee4:	4b1b      	ldr	r3, [pc, #108]	; (8003f54 <MX_SPI1_Init+0x74>)
 8003ee6:	4a1c      	ldr	r2, [pc, #112]	; (8003f58 <MX_SPI1_Init+0x78>)
 8003ee8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003eea:	4b1a      	ldr	r3, [pc, #104]	; (8003f54 <MX_SPI1_Init+0x74>)
 8003eec:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003ef0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003ef2:	4b18      	ldr	r3, [pc, #96]	; (8003f54 <MX_SPI1_Init+0x74>)
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003ef8:	4b16      	ldr	r3, [pc, #88]	; (8003f54 <MX_SPI1_Init+0x74>)
 8003efa:	2200      	movs	r2, #0
 8003efc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003efe:	4b15      	ldr	r3, [pc, #84]	; (8003f54 <MX_SPI1_Init+0x74>)
 8003f00:	2202      	movs	r2, #2
 8003f02:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003f04:	4b13      	ldr	r3, [pc, #76]	; (8003f54 <MX_SPI1_Init+0x74>)
 8003f06:	2201      	movs	r2, #1
 8003f08:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003f0a:	4b12      	ldr	r3, [pc, #72]	; (8003f54 <MX_SPI1_Init+0x74>)
 8003f0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f10:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f12:	4b10      	ldr	r3, [pc, #64]	; (8003f54 <MX_SPI1_Init+0x74>)
 8003f14:	2200      	movs	r2, #0
 8003f16:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003f18:	4b0e      	ldr	r3, [pc, #56]	; (8003f54 <MX_SPI1_Init+0x74>)
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003f1e:	4b0d      	ldr	r3, [pc, #52]	; (8003f54 <MX_SPI1_Init+0x74>)
 8003f20:	2200      	movs	r2, #0
 8003f22:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f24:	4b0b      	ldr	r3, [pc, #44]	; (8003f54 <MX_SPI1_Init+0x74>)
 8003f26:	2200      	movs	r2, #0
 8003f28:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003f2a:	4b0a      	ldr	r3, [pc, #40]	; (8003f54 <MX_SPI1_Init+0x74>)
 8003f2c:	220a      	movs	r2, #10
 8003f2e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003f30:	4808      	ldr	r0, [pc, #32]	; (8003f54 <MX_SPI1_Init+0x74>)
 8003f32:	f003 fb51 	bl	80075d8 <HAL_SPI_Init>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d001      	beq.n	8003f40 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003f3c:	f000 fa14 	bl	8004368 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  __HAL_SPI_ENABLE(&hspi1);
 8003f40:	4b04      	ldr	r3, [pc, #16]	; (8003f54 <MX_SPI1_Init+0x74>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	4b03      	ldr	r3, [pc, #12]	; (8003f54 <MX_SPI1_Init+0x74>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f4e:	601a      	str	r2, [r3, #0]
  /* USER CODE END SPI1_Init 2 */

}
 8003f50:	bf00      	nop
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	20002214 	.word	0x20002214
 8003f58:	40013000 	.word	0x40013000

08003f5c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b092      	sub	sp, #72	; 0x48
 8003f60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f62:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003f66:	2200      	movs	r2, #0
 8003f68:	601a      	str	r2, [r3, #0]
 8003f6a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003f6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f70:	2200      	movs	r2, #0
 8003f72:	601a      	str	r2, [r3, #0]
 8003f74:	605a      	str	r2, [r3, #4]
 8003f76:	609a      	str	r2, [r3, #8]
 8003f78:	60da      	str	r2, [r3, #12]
 8003f7a:	611a      	str	r2, [r3, #16]
 8003f7c:	615a      	str	r2, [r3, #20]
 8003f7e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003f80:	1d3b      	adds	r3, r7, #4
 8003f82:	2220      	movs	r2, #32
 8003f84:	2100      	movs	r1, #0
 8003f86:	4618      	mov	r0, r3
 8003f88:	f005 fa00 	bl	800938c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003f8c:	4b32      	ldr	r3, [pc, #200]	; (8004058 <MX_TIM1_Init+0xfc>)
 8003f8e:	4a33      	ldr	r2, [pc, #204]	; (800405c <MX_TIM1_Init+0x100>)
 8003f90:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003f92:	4b31      	ldr	r3, [pc, #196]	; (8004058 <MX_TIM1_Init+0xfc>)
 8003f94:	2200      	movs	r2, #0
 8003f96:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f98:	4b2f      	ldr	r3, [pc, #188]	; (8004058 <MX_TIM1_Init+0xfc>)
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003f9e:	4b2e      	ldr	r3, [pc, #184]	; (8004058 <MX_TIM1_Init+0xfc>)
 8003fa0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003fa4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fa6:	4b2c      	ldr	r3, [pc, #176]	; (8004058 <MX_TIM1_Init+0xfc>)
 8003fa8:	2200      	movs	r2, #0
 8003faa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003fac:	4b2a      	ldr	r3, [pc, #168]	; (8004058 <MX_TIM1_Init+0xfc>)
 8003fae:	2200      	movs	r2, #0
 8003fb0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fb2:	4b29      	ldr	r3, [pc, #164]	; (8004058 <MX_TIM1_Init+0xfc>)
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003fb8:	4827      	ldr	r0, [pc, #156]	; (8004058 <MX_TIM1_Init+0xfc>)
 8003fba:	f003 fbde 	bl	800777a <HAL_TIM_PWM_Init>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d001      	beq.n	8003fc8 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8003fc4:	f000 f9d0 	bl	8004368 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003fd0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	4820      	ldr	r0, [pc, #128]	; (8004058 <MX_TIM1_Init+0xfc>)
 8003fd8:	f004 f88e 	bl	80080f8 <HAL_TIMEx_MasterConfigSynchronization>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d001      	beq.n	8003fe6 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8003fe2:	f000 f9c1 	bl	8004368 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003fe6:	2360      	movs	r3, #96	; 0x60
 8003fe8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 65535;
 8003fea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003fee:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004000:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004004:	220c      	movs	r2, #12
 8004006:	4619      	mov	r1, r3
 8004008:	4813      	ldr	r0, [pc, #76]	; (8004058 <MX_TIM1_Init+0xfc>)
 800400a:	f003 fd3d 	bl	8007a88 <HAL_TIM_PWM_ConfigChannel>
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d001      	beq.n	8004018 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8004014:	f000 f9a8 	bl	8004368 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004018:	2300      	movs	r3, #0
 800401a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800401c:	2300      	movs	r3, #0
 800401e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004020:	2300      	movs	r3, #0
 8004022:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004024:	2300      	movs	r3, #0
 8004026:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004028:	2300      	movs	r3, #0
 800402a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800402c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004030:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004032:	2300      	movs	r3, #0
 8004034:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004036:	1d3b      	adds	r3, r7, #4
 8004038:	4619      	mov	r1, r3
 800403a:	4807      	ldr	r0, [pc, #28]	; (8004058 <MX_TIM1_Init+0xfc>)
 800403c:	f004 f8d8 	bl	80081f0 <HAL_TIMEx_ConfigBreakDeadTime>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d001      	beq.n	800404a <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8004046:	f000 f98f 	bl	8004368 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800404a:	4803      	ldr	r0, [pc, #12]	; (8004058 <MX_TIM1_Init+0xfc>)
 800404c:	f000 fce0 	bl	8004a10 <HAL_TIM_MspPostInit>

}
 8004050:	bf00      	nop
 8004052:	3748      	adds	r7, #72	; 0x48
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}
 8004058:	200021cc 	.word	0x200021cc
 800405c:	40010000 	.word	0x40010000

08004060 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004064:	4b15      	ldr	r3, [pc, #84]	; (80040bc <MX_USART1_UART_Init+0x5c>)
 8004066:	4a16      	ldr	r2, [pc, #88]	; (80040c0 <MX_USART1_UART_Init+0x60>)
 8004068:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800406a:	4b14      	ldr	r3, [pc, #80]	; (80040bc <MX_USART1_UART_Init+0x5c>)
 800406c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004070:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004072:	4b12      	ldr	r3, [pc, #72]	; (80040bc <MX_USART1_UART_Init+0x5c>)
 8004074:	2200      	movs	r2, #0
 8004076:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004078:	4b10      	ldr	r3, [pc, #64]	; (80040bc <MX_USART1_UART_Init+0x5c>)
 800407a:	2200      	movs	r2, #0
 800407c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800407e:	4b0f      	ldr	r3, [pc, #60]	; (80040bc <MX_USART1_UART_Init+0x5c>)
 8004080:	2200      	movs	r2, #0
 8004082:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004084:	4b0d      	ldr	r3, [pc, #52]	; (80040bc <MX_USART1_UART_Init+0x5c>)
 8004086:	220c      	movs	r2, #12
 8004088:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800408a:	4b0c      	ldr	r3, [pc, #48]	; (80040bc <MX_USART1_UART_Init+0x5c>)
 800408c:	2200      	movs	r2, #0
 800408e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004090:	4b0a      	ldr	r3, [pc, #40]	; (80040bc <MX_USART1_UART_Init+0x5c>)
 8004092:	2200      	movs	r2, #0
 8004094:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004096:	4809      	ldr	r0, [pc, #36]	; (80040bc <MX_USART1_UART_Init+0x5c>)
 8004098:	f004 f8fc 	bl	8008294 <HAL_UART_Init>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d001      	beq.n	80040a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80040a2:	f000 f961 	bl	8004368 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE); //turn on rx interrupt forever
 80040a6:	4b05      	ldr	r3, [pc, #20]	; (80040bc <MX_USART1_UART_Init+0x5c>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	68da      	ldr	r2, [r3, #12]
 80040ac:	4b03      	ldr	r3, [pc, #12]	; (80040bc <MX_USART1_UART_Init+0x5c>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f042 0220 	orr.w	r2, r2, #32
 80040b4:	60da      	str	r2, [r3, #12]
  /* USER CODE END USART1_Init 2 */

}
 80040b6:	bf00      	nop
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	20002188 	.word	0x20002188
 80040c0:	40011000 	.word	0x40011000

080040c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80040c8:	4b15      	ldr	r3, [pc, #84]	; (8004120 <MX_USART2_UART_Init+0x5c>)
 80040ca:	4a16      	ldr	r2, [pc, #88]	; (8004124 <MX_USART2_UART_Init+0x60>)
 80040cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80040ce:	4b14      	ldr	r3, [pc, #80]	; (8004120 <MX_USART2_UART_Init+0x5c>)
 80040d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80040d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80040d6:	4b12      	ldr	r3, [pc, #72]	; (8004120 <MX_USART2_UART_Init+0x5c>)
 80040d8:	2200      	movs	r2, #0
 80040da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80040dc:	4b10      	ldr	r3, [pc, #64]	; (8004120 <MX_USART2_UART_Init+0x5c>)
 80040de:	2200      	movs	r2, #0
 80040e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80040e2:	4b0f      	ldr	r3, [pc, #60]	; (8004120 <MX_USART2_UART_Init+0x5c>)
 80040e4:	2200      	movs	r2, #0
 80040e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80040e8:	4b0d      	ldr	r3, [pc, #52]	; (8004120 <MX_USART2_UART_Init+0x5c>)
 80040ea:	220c      	movs	r2, #12
 80040ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80040ee:	4b0c      	ldr	r3, [pc, #48]	; (8004120 <MX_USART2_UART_Init+0x5c>)
 80040f0:	2200      	movs	r2, #0
 80040f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80040f4:	4b0a      	ldr	r3, [pc, #40]	; (8004120 <MX_USART2_UART_Init+0x5c>)
 80040f6:	2200      	movs	r2, #0
 80040f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80040fa:	4809      	ldr	r0, [pc, #36]	; (8004120 <MX_USART2_UART_Init+0x5c>)
 80040fc:	f004 f8ca 	bl	8008294 <HAL_UART_Init>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d001      	beq.n	800410a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004106:	f000 f92f 	bl	8004368 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE); //turn on rx interrupt forever
 800410a:	4b05      	ldr	r3, [pc, #20]	; (8004120 <MX_USART2_UART_Init+0x5c>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	68da      	ldr	r2, [r3, #12]
 8004110:	4b03      	ldr	r3, [pc, #12]	; (8004120 <MX_USART2_UART_Init+0x5c>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f042 0220 	orr.w	r2, r2, #32
 8004118:	60da      	str	r2, [r3, #12]
  /* USER CODE END USART2_Init 2 */

}
 800411a:	bf00      	nop
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	2000226c 	.word	0x2000226c
 8004124:	40004400 	.word	0x40004400

08004128 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b08a      	sub	sp, #40	; 0x28
 800412c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800412e:	f107 0314 	add.w	r3, r7, #20
 8004132:	2200      	movs	r2, #0
 8004134:	601a      	str	r2, [r3, #0]
 8004136:	605a      	str	r2, [r3, #4]
 8004138:	609a      	str	r2, [r3, #8]
 800413a:	60da      	str	r2, [r3, #12]
 800413c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800413e:	2300      	movs	r3, #0
 8004140:	613b      	str	r3, [r7, #16]
 8004142:	4b49      	ldr	r3, [pc, #292]	; (8004268 <MX_GPIO_Init+0x140>)
 8004144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004146:	4a48      	ldr	r2, [pc, #288]	; (8004268 <MX_GPIO_Init+0x140>)
 8004148:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800414c:	6313      	str	r3, [r2, #48]	; 0x30
 800414e:	4b46      	ldr	r3, [pc, #280]	; (8004268 <MX_GPIO_Init+0x140>)
 8004150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004156:	613b      	str	r3, [r7, #16]
 8004158:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800415a:	2300      	movs	r3, #0
 800415c:	60fb      	str	r3, [r7, #12]
 800415e:	4b42      	ldr	r3, [pc, #264]	; (8004268 <MX_GPIO_Init+0x140>)
 8004160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004162:	4a41      	ldr	r2, [pc, #260]	; (8004268 <MX_GPIO_Init+0x140>)
 8004164:	f043 0301 	orr.w	r3, r3, #1
 8004168:	6313      	str	r3, [r2, #48]	; 0x30
 800416a:	4b3f      	ldr	r3, [pc, #252]	; (8004268 <MX_GPIO_Init+0x140>)
 800416c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800416e:	f003 0301 	and.w	r3, r3, #1
 8004172:	60fb      	str	r3, [r7, #12]
 8004174:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004176:	2300      	movs	r3, #0
 8004178:	60bb      	str	r3, [r7, #8]
 800417a:	4b3b      	ldr	r3, [pc, #236]	; (8004268 <MX_GPIO_Init+0x140>)
 800417c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800417e:	4a3a      	ldr	r2, [pc, #232]	; (8004268 <MX_GPIO_Init+0x140>)
 8004180:	f043 0310 	orr.w	r3, r3, #16
 8004184:	6313      	str	r3, [r2, #48]	; 0x30
 8004186:	4b38      	ldr	r3, [pc, #224]	; (8004268 <MX_GPIO_Init+0x140>)
 8004188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800418a:	f003 0310 	and.w	r3, r3, #16
 800418e:	60bb      	str	r3, [r7, #8]
 8004190:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004192:	2300      	movs	r3, #0
 8004194:	607b      	str	r3, [r7, #4]
 8004196:	4b34      	ldr	r3, [pc, #208]	; (8004268 <MX_GPIO_Init+0x140>)
 8004198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419a:	4a33      	ldr	r2, [pc, #204]	; (8004268 <MX_GPIO_Init+0x140>)
 800419c:	f043 0302 	orr.w	r3, r3, #2
 80041a0:	6313      	str	r3, [r2, #48]	; 0x30
 80041a2:	4b31      	ldr	r3, [pc, #196]	; (8004268 <MX_GPIO_Init+0x140>)
 80041a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a6:	f003 0302 	and.w	r3, r3, #2
 80041aa:	607b      	str	r3, [r7, #4]
 80041ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80041ae:	2300      	movs	r3, #0
 80041b0:	603b      	str	r3, [r7, #0]
 80041b2:	4b2d      	ldr	r3, [pc, #180]	; (8004268 <MX_GPIO_Init+0x140>)
 80041b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b6:	4a2c      	ldr	r2, [pc, #176]	; (8004268 <MX_GPIO_Init+0x140>)
 80041b8:	f043 0308 	orr.w	r3, r3, #8
 80041bc:	6313      	str	r3, [r2, #48]	; 0x30
 80041be:	4b2a      	ldr	r3, [pc, #168]	; (8004268 <MX_GPIO_Init+0x140>)
 80041c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c2:	f003 0308 	and.w	r3, r3, #8
 80041c6:	603b      	str	r3, [r7, #0]
 80041c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LCD_RES_Pin, GPIO_PIN_RESET);
 80041ca:	2200      	movs	r2, #0
 80041cc:	f241 0110 	movw	r1, #4112	; 0x1010
 80041d0:	4826      	ldr	r0, [pc, #152]	; (800426c <MX_GPIO_Init+0x144>)
 80041d2:	f001 fc1d 	bl	8005a10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_5, GPIO_PIN_RESET);
 80041d6:	2200      	movs	r2, #0
 80041d8:	2128      	movs	r1, #40	; 0x28
 80041da:	4825      	ldr	r0, [pc, #148]	; (8004270 <MX_GPIO_Init+0x148>)
 80041dc:	f001 fc18 	bl	8005a10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80041e0:	2310      	movs	r3, #16
 80041e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041e4:	2301      	movs	r3, #1
 80041e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041e8:	2300      	movs	r3, #0
 80041ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041ec:	2300      	movs	r3, #0
 80041ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041f0:	f107 0314 	add.w	r3, r7, #20
 80041f4:	4619      	mov	r1, r3
 80041f6:	481d      	ldr	r0, [pc, #116]	; (800426c <MX_GPIO_Init+0x144>)
 80041f8:	f001 fa6e 	bl	80056d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RES_Pin */
  GPIO_InitStruct.Pin = LCD_RES_Pin;
 80041fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004200:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004202:	2301      	movs	r3, #1
 8004204:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004206:	2301      	movs	r3, #1
 8004208:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800420a:	2303      	movs	r3, #3
 800420c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_RES_GPIO_Port, &GPIO_InitStruct);
 800420e:	f107 0314 	add.w	r3, r7, #20
 8004212:	4619      	mov	r1, r3
 8004214:	4815      	ldr	r0, [pc, #84]	; (800426c <MX_GPIO_Init+0x144>)
 8004216:	f001 fa5f 	bl	80056d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800421a:	2328      	movs	r3, #40	; 0x28
 800421c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800421e:	2301      	movs	r3, #1
 8004220:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004222:	2300      	movs	r3, #0
 8004224:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004226:	2300      	movs	r3, #0
 8004228:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800422a:	f107 0314 	add.w	r3, r7, #20
 800422e:	4619      	mov	r1, r3
 8004230:	480f      	ldr	r0, [pc, #60]	; (8004270 <MX_GPIO_Init+0x148>)
 8004232:	f001 fa51 	bl	80056d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004236:	2310      	movs	r3, #16
 8004238:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800423a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800423e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004240:	2301      	movs	r3, #1
 8004242:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004244:	f107 0314 	add.w	r3, r7, #20
 8004248:	4619      	mov	r1, r3
 800424a:	4809      	ldr	r0, [pc, #36]	; (8004270 <MX_GPIO_Init+0x148>)
 800424c:	f001 fa44 	bl	80056d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8004250:	2200      	movs	r2, #0
 8004252:	2100      	movs	r1, #0
 8004254:	200a      	movs	r0, #10
 8004256:	f001 f976 	bl	8005546 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800425a:	200a      	movs	r0, #10
 800425c:	f001 f98f 	bl	800557e <HAL_NVIC_EnableIRQ>

}
 8004260:	bf00      	nop
 8004262:	3728      	adds	r7, #40	; 0x28
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}
 8004268:	40023800 	.word	0x40023800
 800426c:	40020000 	.word	0x40020000
 8004270:	40020400 	.word	0x40020400

08004274 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b08e      	sub	sp, #56	; 0x38
 8004278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800427a:	f107 031c 	add.w	r3, r7, #28
 800427e:	2200      	movs	r2, #0
 8004280:	601a      	str	r2, [r3, #0]
 8004282:	605a      	str	r2, [r3, #4]
 8004284:	609a      	str	r2, [r3, #8]
 8004286:	60da      	str	r2, [r3, #12]
 8004288:	611a      	str	r2, [r3, #16]
 800428a:	615a      	str	r2, [r3, #20]
 800428c:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 800428e:	463b      	mov	r3, r7
 8004290:	2200      	movs	r2, #0
 8004292:	601a      	str	r2, [r3, #0]
 8004294:	605a      	str	r2, [r3, #4]
 8004296:	609a      	str	r2, [r3, #8]
 8004298:	60da      	str	r2, [r3, #12]
 800429a:	611a      	str	r2, [r3, #16]
 800429c:	615a      	str	r2, [r3, #20]
 800429e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80042a0:	4b2f      	ldr	r3, [pc, #188]	; (8004360 <MX_FSMC_Init+0xec>)
 80042a2:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80042a6:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80042a8:	4b2d      	ldr	r3, [pc, #180]	; (8004360 <MX_FSMC_Init+0xec>)
 80042aa:	4a2e      	ldr	r2, [pc, #184]	; (8004364 <MX_FSMC_Init+0xf0>)
 80042ac:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80042ae:	4b2c      	ldr	r3, [pc, #176]	; (8004360 <MX_FSMC_Init+0xec>)
 80042b0:	2200      	movs	r2, #0
 80042b2:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80042b4:	4b2a      	ldr	r3, [pc, #168]	; (8004360 <MX_FSMC_Init+0xec>)
 80042b6:	2200      	movs	r2, #0
 80042b8:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80042ba:	4b29      	ldr	r3, [pc, #164]	; (8004360 <MX_FSMC_Init+0xec>)
 80042bc:	2200      	movs	r2, #0
 80042be:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80042c0:	4b27      	ldr	r3, [pc, #156]	; (8004360 <MX_FSMC_Init+0xec>)
 80042c2:	2210      	movs	r2, #16
 80042c4:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80042c6:	4b26      	ldr	r3, [pc, #152]	; (8004360 <MX_FSMC_Init+0xec>)
 80042c8:	2200      	movs	r2, #0
 80042ca:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80042cc:	4b24      	ldr	r3, [pc, #144]	; (8004360 <MX_FSMC_Init+0xec>)
 80042ce:	2200      	movs	r2, #0
 80042d0:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80042d2:	4b23      	ldr	r3, [pc, #140]	; (8004360 <MX_FSMC_Init+0xec>)
 80042d4:	2200      	movs	r2, #0
 80042d6:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80042d8:	4b21      	ldr	r3, [pc, #132]	; (8004360 <MX_FSMC_Init+0xec>)
 80042da:	2200      	movs	r2, #0
 80042dc:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80042de:	4b20      	ldr	r3, [pc, #128]	; (8004360 <MX_FSMC_Init+0xec>)
 80042e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80042e4:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80042e6:	4b1e      	ldr	r3, [pc, #120]	; (8004360 <MX_FSMC_Init+0xec>)
 80042e8:	2200      	movs	r2, #0
 80042ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80042ec:	4b1c      	ldr	r3, [pc, #112]	; (8004360 <MX_FSMC_Init+0xec>)
 80042ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80042f2:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80042f4:	4b1a      	ldr	r3, [pc, #104]	; (8004360 <MX_FSMC_Init+0xec>)
 80042f6:	2200      	movs	r2, #0
 80042f8:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80042fa:	4b19      	ldr	r3, [pc, #100]	; (8004360 <MX_FSMC_Init+0xec>)
 80042fc:	2200      	movs	r2, #0
 80042fe:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8004300:	4b17      	ldr	r3, [pc, #92]	; (8004360 <MX_FSMC_Init+0xec>)
 8004302:	2200      	movs	r2, #0
 8004304:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8004306:	230f      	movs	r3, #15
 8004308:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 800430a:	230f      	movs	r3, #15
 800430c:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 40;
 800430e:	2328      	movs	r3, #40	; 0x28
 8004310:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 8004312:	2300      	movs	r3, #0
 8004314:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8004316:	2310      	movs	r3, #16
 8004318:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 800431a:	2311      	movs	r3, #17
 800431c:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800431e:	2300      	movs	r3, #0
 8004320:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 2;
 8004322:	2302      	movs	r3, #2
 8004324:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8004326:	230f      	movs	r3, #15
 8004328:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 4;
 800432a:	2304      	movs	r3, #4
 800432c:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 800432e:	2300      	movs	r3, #0
 8004330:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8004332:	2310      	movs	r3, #16
 8004334:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8004336:	2311      	movs	r3, #17
 8004338:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 800433a:	2300      	movs	r3, #0
 800433c:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 800433e:	463a      	mov	r2, r7
 8004340:	f107 031c 	add.w	r3, r7, #28
 8004344:	4619      	mov	r1, r3
 8004346:	4806      	ldr	r0, [pc, #24]	; (8004360 <MX_FSMC_Init+0xec>)
 8004348:	f003 f9cf 	bl	80076ea <HAL_SRAM_Init>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d001      	beq.n	8004356 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8004352:	f000 f809 	bl	8004368 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8004356:	bf00      	nop
 8004358:	3738      	adds	r7, #56	; 0x38
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	20002138 	.word	0x20002138
 8004364:	a0000104 	.word	0xa0000104

08004368 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004368:	b480      	push	{r7}
 800436a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800436c:	b672      	cpsid	i
}
 800436e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004370:	e7fe      	b.n	8004370 <Error_Handler+0x8>
	...

08004374 <drawObjectToLcd>:

void drawCharToLcd5x7(int x, int y, int pixelScaling, uint16_t textColor, int useBackground, uint16_t bgColor, char c);
void drawStringToLcd5x7(int x, int y, int pixelScaling, uint16_t textColor, int useBackground, uint16_t bgColor, int hSpacing, int vSpacing, char *string);


int drawObjectToLcd(struct object o, uint8_t *data, int state){
 8004374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004376:	b09f      	sub	sp, #124	; 0x7c
 8004378:	af06      	add	r7, sp, #24
 800437a:	463c      	mov	r4, r7
 800437c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	char objName[30];
	objectTypeToString(o.objectType, objName);
 8004380:	783b      	ldrb	r3, [r7, #0]
 8004382:	f107 0214 	add.w	r2, r7, #20
 8004386:	4611      	mov	r1, r2
 8004388:	4618      	mov	r0, r3
 800438a:	f7ff f8e3 	bl	8003554 <objectTypeToString>
		printf("[OV] Error: width or height of object id %d is negative.\n\r", o.objectId);
		return 1;
	}
	*/

	printf("[OV] Drawing %s id %d \n\r", objName, o.objectId);
 800438e:	887b      	ldrh	r3, [r7, #2]
 8004390:	461a      	mov	r2, r3
 8004392:	f107 0314 	add.w	r3, r7, #20
 8004396:	4619      	mov	r1, r3
 8004398:	489c      	ldr	r0, [pc, #624]	; (800460c <drawObjectToLcd+0x298>)
 800439a:	f004 ffff 	bl	800939c <iprintf>

	if(o.objectType == rectangle){
 800439e:	783b      	ldrb	r3, [r7, #0]
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d121      	bne.n	80043e8 <drawObjectToLcd+0x74>
		uint16_t color = BLACK;
 80043a4:	2300      	movs	r3, #0
 80043a6:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
		if(o.dataLen<2){
 80043aa:	89bb      	ldrh	r3, [r7, #12]
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d805      	bhi.n	80043bc <drawObjectToLcd+0x48>
			printf("[OV] Warning: missing color byte in object id %d! Falling back on black. \n\r", o.objectId);
 80043b0:	887b      	ldrh	r3, [r7, #2]
 80043b2:	4619      	mov	r1, r3
 80043b4:	4896      	ldr	r0, [pc, #600]	; (8004610 <drawObjectToLcd+0x29c>)
 80043b6:	f004 fff1 	bl	800939c <iprintf>
 80043ba:	e003      	b.n	80043c4 <drawObjectToLcd+0x50>
		}
		else{
			color = *((uint16_t *) data);
 80043bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043be:	881b      	ldrh	r3, [r3, #0]
 80043c0:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
		}
		LCD_fillRect(o.xstart, o.ystart, (o.xend - o.xstart), (o.yend - o.ystart), color);
 80043c4:	88b8      	ldrh	r0, [r7, #4]
 80043c6:	88f9      	ldrh	r1, [r7, #6]
 80043c8:	893a      	ldrh	r2, [r7, #8]
 80043ca:	88bb      	ldrh	r3, [r7, #4]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	b29c      	uxth	r4, r3
 80043d0:	897a      	ldrh	r2, [r7, #10]
 80043d2:	88fb      	ldrh	r3, [r7, #6]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	b29a      	uxth	r2, r3
 80043d8:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80043dc:	9300      	str	r3, [sp, #0]
 80043de:	4613      	mov	r3, r2
 80043e0:	4622      	mov	r2, r4
 80043e2:	f7fc fbe5 	bl	8000bb0 <LCD_fillRect>
 80043e6:	e10b      	b.n	8004600 <drawObjectToLcd+0x28c>
	}
	else if(o.objectType == picture){ //TODO fix data expectations
 80043e8:	783b      	ldrb	r3, [r7, #0]
 80043ea:	2b04      	cmp	r3, #4
 80043ec:	d155      	bne.n	800449a <drawObjectToLcd+0x126>
		uint16_t xpos = o.xstart;
 80043ee:	88bb      	ldrh	r3, [r7, #4]
 80043f0:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
		uint16_t ypos = o.ystart;
 80043f4:	88fb      	ldrh	r3, [r7, #6]
 80043f6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
		if(o.dataLen < (o.xend - o.xstart)*(o.yend - o.ystart)){
 80043fa:	89bb      	ldrh	r3, [r7, #12]
 80043fc:	4619      	mov	r1, r3
 80043fe:	893b      	ldrh	r3, [r7, #8]
 8004400:	461a      	mov	r2, r3
 8004402:	88bb      	ldrh	r3, [r7, #4]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	897a      	ldrh	r2, [r7, #10]
 8004408:	4610      	mov	r0, r2
 800440a:	88fa      	ldrh	r2, [r7, #6]
 800440c:	1a82      	subs	r2, r0, r2
 800440e:	fb02 f303 	mul.w	r3, r2, r3
 8004412:	4299      	cmp	r1, r3
 8004414:	da11      	bge.n	800443a <drawObjectToLcd+0xc6>
			printf("[OV] Error: %d pixel bytes needed for bitmap id %d but only got %d. \n\r", (o.xend - o.xstart)*(o.yend - o.ystart), o.objectId, o.dataLen);
 8004416:	893b      	ldrh	r3, [r7, #8]
 8004418:	461a      	mov	r2, r3
 800441a:	88bb      	ldrh	r3, [r7, #4]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	897a      	ldrh	r2, [r7, #10]
 8004420:	4611      	mov	r1, r2
 8004422:	88fa      	ldrh	r2, [r7, #6]
 8004424:	1a8a      	subs	r2, r1, r2
 8004426:	fb02 f103 	mul.w	r1, r2, r3
 800442a:	887b      	ldrh	r3, [r7, #2]
 800442c:	461a      	mov	r2, r3
 800442e:	89bb      	ldrh	r3, [r7, #12]
 8004430:	4878      	ldr	r0, [pc, #480]	; (8004614 <drawObjectToLcd+0x2a0>)
 8004432:	f004 ffb3 	bl	800939c <iprintf>
			return 2;
 8004436:	2302      	movs	r3, #2
 8004438:	e0e3      	b.n	8004602 <drawObjectToLcd+0x28e>
		}
		uint16_t *colorArray = (uint16_t *) data;
 800443a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800443c:	637b      	str	r3, [r7, #52]	; 0x34
		uint32_t dataIndex = 0;
 800443e:	2300      	movs	r3, #0
 8004440:	657b      	str	r3, [r7, #84]	; 0x54
		while(1){
			uint16_t color = *(colorArray + dataIndex);
 8004442:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004444:	005b      	lsls	r3, r3, #1
 8004446:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004448:	4413      	add	r3, r2
 800444a:	881b      	ldrh	r3, [r3, #0]
 800444c:	867b      	strh	r3, [r7, #50]	; 0x32
			dataIndex++;
 800444e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004450:	3301      	adds	r3, #1
 8004452:	657b      	str	r3, [r7, #84]	; 0x54
			LCD_fillRect(xpos, ypos, 1, 1, color);
 8004454:	f8b7 105e 	ldrh.w	r1, [r7, #94]	; 0x5e
 8004458:	f8b7 005c 	ldrh.w	r0, [r7, #92]	; 0x5c
 800445c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800445e:	9300      	str	r3, [sp, #0]
 8004460:	2301      	movs	r3, #1
 8004462:	2201      	movs	r2, #1
 8004464:	f7fc fba4 	bl	8000bb0 <LCD_fillRect>
			xpos++;
 8004468:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800446c:	3301      	adds	r3, #1
 800446e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
			if(xpos>o.xend){
 8004472:	893b      	ldrh	r3, [r7, #8]
 8004474:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8004478:	429a      	cmp	r2, r3
 800447a:	d9e2      	bls.n	8004442 <drawObjectToLcd+0xce>
				xpos = o.xstart;
 800447c:	88bb      	ldrh	r3, [r7, #4]
 800447e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
				ypos++;
 8004482:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004486:	3301      	adds	r3, #1
 8004488:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
				if(ypos>o.yend){
 800448c:	897b      	ldrh	r3, [r7, #10]
 800448e:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8004492:	429a      	cmp	r2, r3
 8004494:	f200 80b3 	bhi.w	80045fe <drawObjectToLcd+0x28a>
		while(1){
 8004498:	e7d3      	b.n	8004442 <drawObjectToLcd+0xce>
					break;
				}
			}
		}
	}
	else if(o.objectType==label){
 800449a:	783b      	ldrb	r3, [r7, #0]
 800449c:	2b03      	cmp	r3, #3
 800449e:	f040 80a6 	bne.w	80045ee <drawObjectToLcd+0x27a>
 80044a2:	466b      	mov	r3, sp
 80044a4:	461e      	mov	r6, r3
		int expectedChars = o.dataLen - 8;
 80044a6:	89bb      	ldrh	r3, [r7, #12]
 80044a8:	3b08      	subs	r3, #8
 80044aa:	64bb      	str	r3, [r7, #72]	; 0x48
		if(expectedChars < 0){
 80044ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	da07      	bge.n	80044c2 <drawObjectToLcd+0x14e>
			printf("[OV] Error: Too few data bytes to draw string id %d. \n\r", o.objectId);
 80044b2:	887b      	ldrh	r3, [r7, #2]
 80044b4:	4619      	mov	r1, r3
 80044b6:	4858      	ldr	r0, [pc, #352]	; (8004618 <drawObjectToLcd+0x2a4>)
 80044b8:	f004 ff70 	bl	800939c <iprintf>
			return 3;
 80044bc:	2303      	movs	r3, #3
 80044be:	46b5      	mov	sp, r6
 80044c0:	e09f      	b.n	8004602 <drawObjectToLcd+0x28e>
		}
		int dIndex = 0;
 80044c2:	2300      	movs	r3, #0
 80044c4:	653b      	str	r3, [r7, #80]	; 0x50
		uint8_t pixelScaling = *((uint8_t *) (data + dIndex++));
 80044c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044c8:	1c5a      	adds	r2, r3, #1
 80044ca:	653a      	str	r2, [r7, #80]	; 0x50
 80044cc:	461a      	mov	r2, r3
 80044ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044d0:	4413      	add	r3, r2
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		uint8_t hSpace = *((uint8_t *) (data + dIndex++));
 80044d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044da:	1c5a      	adds	r2, r3, #1
 80044dc:	653a      	str	r2, [r7, #80]	; 0x50
 80044de:	461a      	mov	r2, r3
 80044e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044e2:	4413      	add	r3, r2
 80044e4:	781b      	ldrb	r3, [r3, #0]
 80044e6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
		uint8_t vSpace = *((uint8_t *) (data + dIndex++));
 80044ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044ec:	1c5a      	adds	r2, r3, #1
 80044ee:	653a      	str	r2, [r7, #80]	; 0x50
 80044f0:	461a      	mov	r2, r3
 80044f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044f4:	4413      	add	r3, r2
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
		uint8_t useBg = *((uint8_t *) (data + dIndex++));
 80044fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044fe:	1c5a      	adds	r2, r3, #1
 8004500:	653a      	str	r2, [r7, #80]	; 0x50
 8004502:	461a      	mov	r2, r3
 8004504:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004506:	4413      	add	r3, r2
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
		uint16_t textColor = *((uint16_t *) (data + dIndex));
 800450e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004510:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004512:	4413      	add	r3, r2
 8004514:	881b      	ldrh	r3, [r3, #0]
 8004516:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		dIndex += 2;
 800451a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800451c:	3302      	adds	r3, #2
 800451e:	653b      	str	r3, [r7, #80]	; 0x50
		uint16_t bgColor = *((uint16_t *) (data + dIndex));
 8004520:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004522:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004524:	4413      	add	r3, r2
 8004526:	881b      	ldrh	r3, [r3, #0]
 8004528:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
		dIndex += 2;
 800452c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800452e:	3302      	adds	r3, #2
 8004530:	653b      	str	r3, [r7, #80]	; 0x50

		char labelString[expectedChars + 1];
 8004532:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004534:	1c5c      	adds	r4, r3, #1
 8004536:	1e63      	subs	r3, r4, #1
 8004538:	63fb      	str	r3, [r7, #60]	; 0x3c
 800453a:	4623      	mov	r3, r4
 800453c:	4618      	mov	r0, r3
 800453e:	f04f 0100 	mov.w	r1, #0
 8004542:	f04f 0200 	mov.w	r2, #0
 8004546:	f04f 0300 	mov.w	r3, #0
 800454a:	00cb      	lsls	r3, r1, #3
 800454c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8004550:	00c2      	lsls	r2, r0, #3
 8004552:	4623      	mov	r3, r4
 8004554:	4618      	mov	r0, r3
 8004556:	f04f 0100 	mov.w	r1, #0
 800455a:	f04f 0200 	mov.w	r2, #0
 800455e:	f04f 0300 	mov.w	r3, #0
 8004562:	00cb      	lsls	r3, r1, #3
 8004564:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8004568:	00c2      	lsls	r2, r0, #3
 800456a:	4623      	mov	r3, r4
 800456c:	3307      	adds	r3, #7
 800456e:	08db      	lsrs	r3, r3, #3
 8004570:	00db      	lsls	r3, r3, #3
 8004572:	ebad 0d03 	sub.w	sp, sp, r3
 8004576:	ab06      	add	r3, sp, #24
 8004578:	3300      	adds	r3, #0
 800457a:	63bb      	str	r3, [r7, #56]	; 0x38
		int i;
		for(i = 0; i<expectedChars;i++){
 800457c:	2300      	movs	r3, #0
 800457e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004580:	e00e      	b.n	80045a0 <drawObjectToLcd+0x22c>
			labelString[i] = *((uint8_t *) (data + dIndex++));
 8004582:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004584:	1c5a      	adds	r2, r3, #1
 8004586:	653a      	str	r2, [r7, #80]	; 0x50
 8004588:	461a      	mov	r2, r3
 800458a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800458c:	4413      	add	r3, r2
 800458e:	7819      	ldrb	r1, [r3, #0]
 8004590:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004592:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004594:	4413      	add	r3, r2
 8004596:	460a      	mov	r2, r1
 8004598:	701a      	strb	r2, [r3, #0]
		for(i = 0; i<expectedChars;i++){
 800459a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800459c:	3301      	adds	r3, #1
 800459e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80045a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045a4:	429a      	cmp	r2, r3
 80045a6:	dbec      	blt.n	8004582 <drawObjectToLcd+0x20e>
		}
		labelString[expectedChars] = 0;
 80045a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80045aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045ac:	4413      	add	r3, r2
 80045ae:	2200      	movs	r2, #0
 80045b0:	701a      	strb	r2, [r3, #0]
		drawStringToLcd5x7(o.xstart, o.ystart, pixelScaling, textColor, useBg, bgColor, hSpace, vSpace, labelString);
 80045b2:	88bb      	ldrh	r3, [r7, #4]
 80045b4:	469c      	mov	ip, r3
 80045b6:	88fb      	ldrh	r3, [r7, #6]
 80045b8:	469e      	mov	lr, r3
 80045ba:	f897 4047 	ldrb.w	r4, [r7, #71]	; 0x47
 80045be:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80045c2:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80045c6:	f897 1045 	ldrb.w	r1, [r7, #69]	; 0x45
 80045ca:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80045cc:	f8b7 5042 	ldrh.w	r5, [r7, #66]	; 0x42
 80045d0:	9004      	str	r0, [sp, #16]
 80045d2:	9103      	str	r1, [sp, #12]
 80045d4:	9202      	str	r2, [sp, #8]
 80045d6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80045da:	9201      	str	r2, [sp, #4]
 80045dc:	9300      	str	r3, [sp, #0]
 80045de:	462b      	mov	r3, r5
 80045e0:	4622      	mov	r2, r4
 80045e2:	4671      	mov	r1, lr
 80045e4:	4660      	mov	r0, ip
 80045e6:	f000 f81b 	bl	8004620 <drawStringToLcd5x7>
 80045ea:	46b5      	mov	sp, r6
 80045ec:	e008      	b.n	8004600 <drawObjectToLcd+0x28c>
	}
	else{
		printf("[OV] Error: drawObjectToLcd() not implemented for object type [%s]. \n\r", objName);
 80045ee:	f107 0314 	add.w	r3, r7, #20
 80045f2:	4619      	mov	r1, r3
 80045f4:	4809      	ldr	r0, [pc, #36]	; (800461c <drawObjectToLcd+0x2a8>)
 80045f6:	f004 fed1 	bl	800939c <iprintf>
		return 100;
 80045fa:	2364      	movs	r3, #100	; 0x64
 80045fc:	e001      	b.n	8004602 <drawObjectToLcd+0x28e>
					break;
 80045fe:	bf00      	nop
	}
	return 0;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3764      	adds	r7, #100	; 0x64
 8004606:	46bd      	mov	sp, r7
 8004608:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800460a:	bf00      	nop
 800460c:	0800ae3c 	.word	0x0800ae3c
 8004610:	0800ae58 	.word	0x0800ae58
 8004614:	0800aea4 	.word	0x0800aea4
 8004618:	0800aeec 	.word	0x0800aeec
 800461c:	0800af24 	.word	0x0800af24

08004620 <drawStringToLcd5x7>:
 * (example - if pixelscaling == 5, a single char will occupy 25x35 pixels on the LCD). If useBackground is 1, then
 * background of chars will be filled with bgColor, otherwise, it will be left as-is.
 * hSpacing and vSpacing define the horizontal and vertical separation of chars in lcd pixels (independent of pixelScaling).
 * Newlines in string are treated as newline + cariiage return.
 */
void drawStringToLcd5x7(int x, int y, int pixelScaling, uint16_t textColor, int useBackground, uint16_t bgColor, int hSpacing, int vSpacing, char *string){
 8004620:	b580      	push	{r7, lr}
 8004622:	b08c      	sub	sp, #48	; 0x30
 8004624:	af04      	add	r7, sp, #16
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	607a      	str	r2, [r7, #4]
 800462c:	807b      	strh	r3, [r7, #2]

	uint16_t charX = x;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	83fb      	strh	r3, [r7, #30]
	uint16_t charY = y;
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	83bb      	strh	r3, [r7, #28]

	int strIndex = 0;
 8004636:	2300      	movs	r3, #0
 8004638:	61bb      	str	r3, [r7, #24]
	while(1){
		char c = *(string + strIndex++);
 800463a:	69bb      	ldr	r3, [r7, #24]
 800463c:	1c5a      	adds	r2, r3, #1
 800463e:	61ba      	str	r2, [r7, #24]
 8004640:	461a      	mov	r2, r3
 8004642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004644:	4413      	add	r3, r2
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	75fb      	strb	r3, [r7, #23]
		if(c==0){
 800464a:	7dfb      	ldrb	r3, [r7, #23]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d03d      	beq.n	80046cc <drawStringToLcd5x7+0xac>
			break;
		}
		else if(c=='\r'){ //probably not needed, but just in case
 8004650:	7dfb      	ldrb	r3, [r7, #23]
 8004652:	2b0d      	cmp	r3, #13
 8004654:	d102      	bne.n	800465c <drawStringToLcd5x7+0x3c>
			charX = x;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	83fb      	strh	r3, [r7, #30]
 800465a:	e7ee      	b.n	800463a <drawStringToLcd5x7+0x1a>
		}
		else if(c == '\n'){
 800465c:	7dfb      	ldrb	r3, [r7, #23]
 800465e:	2b0a      	cmp	r3, #10
 8004660:	d10f      	bne.n	8004682 <drawStringToLcd5x7+0x62>
			charX = x;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	83fb      	strh	r3, [r7, #30]
			charY += 7*pixelScaling + vSpacing;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	b29b      	uxth	r3, r3
 800466a:	461a      	mov	r2, r3
 800466c:	00d2      	lsls	r2, r2, #3
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	b29a      	uxth	r2, r3
 8004672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004674:	b29b      	uxth	r3, r3
 8004676:	4413      	add	r3, r2
 8004678:	b29a      	uxth	r2, r3
 800467a:	8bbb      	ldrh	r3, [r7, #28]
 800467c:	4413      	add	r3, r2
 800467e:	83bb      	strh	r3, [r7, #28]
 8004680:	e7db      	b.n	800463a <drawStringToLcd5x7+0x1a>
		}
		else{ //normal character, presumably.
			if(charY > LCD_PIXEL_HEIGHT){
 8004682:	8bbb      	ldrh	r3, [r7, #28]
 8004684:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004688:	d822      	bhi.n	80046d0 <drawStringToLcd5x7+0xb0>
				break;
			}
			if(charX > LCD_PIXEL_WIDTH){
 800468a:	8bfb      	ldrh	r3, [r7, #30]
 800468c:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8004690:	d81a      	bhi.n	80046c8 <drawStringToLcd5x7+0xa8>
				continue; //because there might be a newline later in string
			}
			drawCharToLcd5x7(charX, charY, pixelScaling, textColor, useBackground, bgColor, c);
 8004692:	8bf8      	ldrh	r0, [r7, #30]
 8004694:	8bb9      	ldrh	r1, [r7, #28]
 8004696:	887a      	ldrh	r2, [r7, #2]
 8004698:	7dfb      	ldrb	r3, [r7, #23]
 800469a:	9302      	str	r3, [sp, #8]
 800469c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800469e:	9301      	str	r3, [sp, #4]
 80046a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a2:	9300      	str	r3, [sp, #0]
 80046a4:	4613      	mov	r3, r2
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	f000 f818 	bl	80046dc <drawCharToLcd5x7>
			charX += 5*pixelScaling + hSpacing;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	461a      	mov	r2, r3
 80046b2:	0092      	lsls	r2, r2, #2
 80046b4:	4413      	add	r3, r2
 80046b6:	b29a      	uxth	r2, r3
 80046b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	4413      	add	r3, r2
 80046be:	b29a      	uxth	r2, r3
 80046c0:	8bfb      	ldrh	r3, [r7, #30]
 80046c2:	4413      	add	r3, r2
 80046c4:	83fb      	strh	r3, [r7, #30]
 80046c6:	e7b8      	b.n	800463a <drawStringToLcd5x7+0x1a>
				continue; //because there might be a newline later in string
 80046c8:	bf00      	nop
	while(1){
 80046ca:	e7b6      	b.n	800463a <drawStringToLcd5x7+0x1a>
			break;
 80046cc:	bf00      	nop
 80046ce:	e000      	b.n	80046d2 <drawStringToLcd5x7+0xb2>
				break;
 80046d0:	bf00      	nop
		}
	}

}
 80046d2:	bf00      	nop
 80046d4:	3720      	adds	r7, #32
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
	...

080046dc <drawCharToLcd5x7>:

void drawCharToLcd5x7(int x, int y, int pixelScaling, uint16_t textColor, int useBackground, uint16_t bgColor, char c){
 80046dc:	b590      	push	{r4, r7, lr}
 80046de:	b08f      	sub	sp, #60	; 0x3c
 80046e0:	af02      	add	r7, sp, #8
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	607a      	str	r2, [r7, #4]
 80046e8:	807b      	strh	r3, [r7, #2]
	int ascii = (int) c;
 80046ea:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80046ee:	61fb      	str	r3, [r7, #28]
	char *charFont = font5x7 + (5*ascii);
 80046f0:	69fa      	ldr	r2, [r7, #28]
 80046f2:	4613      	mov	r3, r2
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	4413      	add	r3, r2
 80046f8:	461a      	mov	r2, r3
 80046fa:	4b41      	ldr	r3, [pc, #260]	; (8004800 <drawCharToLcd5x7+0x124>)
 80046fc:	4413      	add	r3, r2
 80046fe:	61bb      	str	r3, [r7, #24]
	int i;
	//printf("Drawing char %c @ [%d, %d] \n\r", c, x, y);

	//font is stored as columns!
	int column, row;
	for(column = 0; column < 5; column++){
 8004700:	2300      	movs	r3, #0
 8004702:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004704:	e074      	b.n	80047f0 <drawCharToLcd5x7+0x114>
		uint8_t columnByte = *(charFont + column);
 8004706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004708:	69ba      	ldr	r2, [r7, #24]
 800470a:	4413      	add	r3, r2
 800470c:	781b      	ldrb	r3, [r3, #0]
 800470e:	75fb      	strb	r3, [r7, #23]
		uint8_t mask = 0x01;
 8004710:	2301      	movs	r3, #1
 8004712:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		for(row = 0; row < 7; row++){
 8004716:	2300      	movs	r3, #0
 8004718:	62bb      	str	r3, [r7, #40]	; 0x28
 800471a:	e063      	b.n	80047e4 <drawCharToLcd5x7+0x108>
			uint16_t pixelColor = bgColor;
 800471c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004720:	84bb      	strh	r3, [r7, #36]	; 0x24
			if(columnByte & mask){
 8004722:	7dfa      	ldrb	r2, [r7, #23]
 8004724:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004728:	4013      	ands	r3, r2
 800472a:	b2db      	uxtb	r3, r3
 800472c:	2b00      	cmp	r3, #0
 800472e:	d002      	beq.n	8004736 <drawCharToLcd5x7+0x5a>
				pixelColor = textColor;
 8004730:	887b      	ldrh	r3, [r7, #2]
 8004732:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004734:	e008      	b.n	8004748 <drawCharToLcd5x7+0x6c>
			}
			else{
				if(!useBackground){
 8004736:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004738:	2b00      	cmp	r3, #0
 800473a:	d105      	bne.n	8004748 <drawCharToLcd5x7+0x6c>
					mask = mask << 1;
 800473c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004740:	005b      	lsls	r3, r3, #1
 8004742:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					continue;
 8004746:	e04a      	b.n	80047de <drawCharToLcd5x7+0x102>
				}
			}

			uint16_t pixel_x_1 = x + pixelScaling*column;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	b29a      	uxth	r2, r3
 800474c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800474e:	b29b      	uxth	r3, r3
 8004750:	fb12 f303 	smulbb	r3, r2, r3
 8004754:	b29a      	uxth	r2, r3
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	b29b      	uxth	r3, r3
 800475a:	4413      	add	r3, r2
 800475c:	82bb      	strh	r3, [r7, #20]
			uint16_t pixel_y_1 = y + pixelScaling*row;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	b29a      	uxth	r2, r3
 8004762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004764:	b29b      	uxth	r3, r3
 8004766:	fb12 f303 	smulbb	r3, r2, r3
 800476a:	b29a      	uxth	r2, r3
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	b29b      	uxth	r3, r3
 8004770:	4413      	add	r3, r2
 8004772:	827b      	strh	r3, [r7, #18]
			uint16_t pixel_x_2 = pixel_x_1 + pixelScaling;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	b29a      	uxth	r2, r3
 8004778:	8abb      	ldrh	r3, [r7, #20]
 800477a:	4413      	add	r3, r2
 800477c:	847b      	strh	r3, [r7, #34]	; 0x22
			uint16_t pixel_y_2 = pixel_y_1 + pixelScaling;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	b29a      	uxth	r2, r3
 8004782:	8a7b      	ldrh	r3, [r7, #18]
 8004784:	4413      	add	r3, r2
 8004786:	843b      	strh	r3, [r7, #32]

			if(pixel_x_1 >= LCD_PIXEL_WIDTH || pixel_y_1 >= LCD_PIXEL_HEIGHT){
 8004788:	8abb      	ldrh	r3, [r7, #20]
 800478a:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800478e:	d22c      	bcs.n	80047ea <drawCharToLcd5x7+0x10e>
 8004790:	8a7b      	ldrh	r3, [r7, #18]
 8004792:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004796:	d228      	bcs.n	80047ea <drawCharToLcd5x7+0x10e>
				break;
			}

			if(pixel_x_2 >= LCD_PIXEL_WIDTH){
 8004798:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800479a:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800479e:	d302      	bcc.n	80047a6 <drawCharToLcd5x7+0xca>
				pixel_x_2 = LCD_PIXEL_WIDTH - 1;
 80047a0:	f240 13df 	movw	r3, #479	; 0x1df
 80047a4:	847b      	strh	r3, [r7, #34]	; 0x22
			}
			if(pixel_y_2 >= LCD_PIXEL_HEIGHT){
 80047a6:	8c3b      	ldrh	r3, [r7, #32]
 80047a8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80047ac:	d302      	bcc.n	80047b4 <drawCharToLcd5x7+0xd8>
				pixel_y_2 = LCD_PIXEL_HEIGHT - 1;
 80047ae:	f240 133f 	movw	r3, #319	; 0x13f
 80047b2:	843b      	strh	r3, [r7, #32]
			}

			LCD_fillRect(pixel_x_1, pixel_y_1, pixel_x_2-pixel_x_1, pixel_y_2 - pixel_y_1, pixelColor);
 80047b4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80047b6:	8abb      	ldrh	r3, [r7, #20]
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	b29c      	uxth	r4, r3
 80047bc:	8c3a      	ldrh	r2, [r7, #32]
 80047be:	8a7b      	ldrh	r3, [r7, #18]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	b29a      	uxth	r2, r3
 80047c4:	8a79      	ldrh	r1, [r7, #18]
 80047c6:	8ab8      	ldrh	r0, [r7, #20]
 80047c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80047ca:	9300      	str	r3, [sp, #0]
 80047cc:	4613      	mov	r3, r2
 80047ce:	4622      	mov	r2, r4
 80047d0:	f7fc f9ee 	bl	8000bb0 <LCD_fillRect>
			mask = mask << 1;
 80047d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80047d8:	005b      	lsls	r3, r3, #1
 80047da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		for(row = 0; row < 7; row++){
 80047de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e0:	3301      	adds	r3, #1
 80047e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80047e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e6:	2b06      	cmp	r3, #6
 80047e8:	dd98      	ble.n	800471c <drawCharToLcd5x7+0x40>
	for(column = 0; column < 5; column++){
 80047ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ec:	3301      	adds	r3, #1
 80047ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047f2:	2b04      	cmp	r3, #4
 80047f4:	dd87      	ble.n	8004706 <drawCharToLcd5x7+0x2a>
		}
	}

}
 80047f6:	bf00      	nop
 80047f8:	bf00      	nop
 80047fa:	3734      	adds	r7, #52	; 0x34
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd90      	pop	{r4, r7, pc}
 8004800:	0800af70 	.word	0x0800af70

08004804 <SPI1_Transfer>:
#include <stm32f4xx_hal_gpio.h>
#include <stdio.h>


uint8_t SPI1_Transfer(uint8_t data)
{
 8004804:	b480      	push	{r7}
 8004806:	b085      	sub	sp, #20
 8004808:	af00      	add	r7, sp, #0
 800480a:	4603      	mov	r3, r0
 800480c:	71fb      	strb	r3, [r7, #7]
	SPI_TypeDef *SPI1inst = hspi1.Instance;
 800480e:	4b12      	ldr	r3, [pc, #72]	; (8004858 <SPI1_Transfer+0x54>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	60fb      	str	r3, [r7, #12]
    SPI1inst->DR = data;
 8004814:	79fa      	ldrb	r2, [r7, #7]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	60da      	str	r2, [r3, #12]
    while (!(SPI1inst->SR & (SPI_FLAG_TXE)));
 800481a:	bf00      	nop
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	f003 0302 	and.w	r3, r3, #2
 8004824:	2b00      	cmp	r3, #0
 8004826:	d0f9      	beq.n	800481c <SPI1_Transfer+0x18>
    while (!(SPI1inst->SR & (SPI_FLAG_RXNE)));
 8004828:	bf00      	nop
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f003 0301 	and.w	r3, r3, #1
 8004832:	2b00      	cmp	r3, #0
 8004834:	d0f9      	beq.n	800482a <SPI1_Transfer+0x26>
    while (SPI1inst->SR & (SPI_FLAG_BSY));
 8004836:	bf00      	nop
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004840:	2b00      	cmp	r3, #0
 8004842:	d1f9      	bne.n	8004838 <SPI1_Transfer+0x34>
    return SPI1inst->DR;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	b2db      	uxtb	r3, r3
}
 800484a:	4618      	mov	r0, r3
 800484c:	3714      	adds	r7, #20
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr
 8004856:	bf00      	nop
 8004858:	20002214 	.word	0x20002214

0800485c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800485c:	b480      	push	{r7}
 800485e:	b083      	sub	sp, #12
 8004860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004862:	2300      	movs	r3, #0
 8004864:	607b      	str	r3, [r7, #4]
 8004866:	4b10      	ldr	r3, [pc, #64]	; (80048a8 <HAL_MspInit+0x4c>)
 8004868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800486a:	4a0f      	ldr	r2, [pc, #60]	; (80048a8 <HAL_MspInit+0x4c>)
 800486c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004870:	6453      	str	r3, [r2, #68]	; 0x44
 8004872:	4b0d      	ldr	r3, [pc, #52]	; (80048a8 <HAL_MspInit+0x4c>)
 8004874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004876:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800487a:	607b      	str	r3, [r7, #4]
 800487c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800487e:	2300      	movs	r3, #0
 8004880:	603b      	str	r3, [r7, #0]
 8004882:	4b09      	ldr	r3, [pc, #36]	; (80048a8 <HAL_MspInit+0x4c>)
 8004884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004886:	4a08      	ldr	r2, [pc, #32]	; (80048a8 <HAL_MspInit+0x4c>)
 8004888:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800488c:	6413      	str	r3, [r2, #64]	; 0x40
 800488e:	4b06      	ldr	r3, [pc, #24]	; (80048a8 <HAL_MspInit+0x4c>)
 8004890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004896:	603b      	str	r3, [r7, #0]
 8004898:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800489a:	bf00      	nop
 800489c:	370c      	adds	r7, #12
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr
 80048a6:	bf00      	nop
 80048a8:	40023800 	.word	0x40023800

080048ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b08a      	sub	sp, #40	; 0x28
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048b4:	f107 0314 	add.w	r3, r7, #20
 80048b8:	2200      	movs	r2, #0
 80048ba:	601a      	str	r2, [r3, #0]
 80048bc:	605a      	str	r2, [r3, #4]
 80048be:	609a      	str	r2, [r3, #8]
 80048c0:	60da      	str	r2, [r3, #12]
 80048c2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a19      	ldr	r2, [pc, #100]	; (8004930 <HAL_I2C_MspInit+0x84>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d12b      	bne.n	8004926 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048ce:	2300      	movs	r3, #0
 80048d0:	613b      	str	r3, [r7, #16]
 80048d2:	4b18      	ldr	r3, [pc, #96]	; (8004934 <HAL_I2C_MspInit+0x88>)
 80048d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d6:	4a17      	ldr	r2, [pc, #92]	; (8004934 <HAL_I2C_MspInit+0x88>)
 80048d8:	f043 0302 	orr.w	r3, r3, #2
 80048dc:	6313      	str	r3, [r2, #48]	; 0x30
 80048de:	4b15      	ldr	r3, [pc, #84]	; (8004934 <HAL_I2C_MspInit+0x88>)
 80048e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e2:	f003 0302 	and.w	r3, r3, #2
 80048e6:	613b      	str	r3, [r7, #16]
 80048e8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80048ea:	23c0      	movs	r3, #192	; 0xc0
 80048ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80048ee:	2312      	movs	r3, #18
 80048f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80048f2:	2301      	movs	r3, #1
 80048f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048f6:	2303      	movs	r3, #3
 80048f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80048fa:	2304      	movs	r3, #4
 80048fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048fe:	f107 0314 	add.w	r3, r7, #20
 8004902:	4619      	mov	r1, r3
 8004904:	480c      	ldr	r0, [pc, #48]	; (8004938 <HAL_I2C_MspInit+0x8c>)
 8004906:	f000 fee7 	bl	80056d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800490a:	2300      	movs	r3, #0
 800490c:	60fb      	str	r3, [r7, #12]
 800490e:	4b09      	ldr	r3, [pc, #36]	; (8004934 <HAL_I2C_MspInit+0x88>)
 8004910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004912:	4a08      	ldr	r2, [pc, #32]	; (8004934 <HAL_I2C_MspInit+0x88>)
 8004914:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004918:	6413      	str	r3, [r2, #64]	; 0x40
 800491a:	4b06      	ldr	r3, [pc, #24]	; (8004934 <HAL_I2C_MspInit+0x88>)
 800491c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004922:	60fb      	str	r3, [r7, #12]
 8004924:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004926:	bf00      	nop
 8004928:	3728      	adds	r7, #40	; 0x28
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	40005400 	.word	0x40005400
 8004934:	40023800 	.word	0x40023800
 8004938:	40020400 	.word	0x40020400

0800493c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b08a      	sub	sp, #40	; 0x28
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004944:	f107 0314 	add.w	r3, r7, #20
 8004948:	2200      	movs	r2, #0
 800494a:	601a      	str	r2, [r3, #0]
 800494c:	605a      	str	r2, [r3, #4]
 800494e:	609a      	str	r2, [r3, #8]
 8004950:	60da      	str	r2, [r3, #12]
 8004952:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a19      	ldr	r2, [pc, #100]	; (80049c0 <HAL_SPI_MspInit+0x84>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d12b      	bne.n	80049b6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800495e:	2300      	movs	r3, #0
 8004960:	613b      	str	r3, [r7, #16]
 8004962:	4b18      	ldr	r3, [pc, #96]	; (80049c4 <HAL_SPI_MspInit+0x88>)
 8004964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004966:	4a17      	ldr	r2, [pc, #92]	; (80049c4 <HAL_SPI_MspInit+0x88>)
 8004968:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800496c:	6453      	str	r3, [r2, #68]	; 0x44
 800496e:	4b15      	ldr	r3, [pc, #84]	; (80049c4 <HAL_SPI_MspInit+0x88>)
 8004970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004972:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004976:	613b      	str	r3, [r7, #16]
 8004978:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800497a:	2300      	movs	r3, #0
 800497c:	60fb      	str	r3, [r7, #12]
 800497e:	4b11      	ldr	r3, [pc, #68]	; (80049c4 <HAL_SPI_MspInit+0x88>)
 8004980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004982:	4a10      	ldr	r2, [pc, #64]	; (80049c4 <HAL_SPI_MspInit+0x88>)
 8004984:	f043 0301 	orr.w	r3, r3, #1
 8004988:	6313      	str	r3, [r2, #48]	; 0x30
 800498a:	4b0e      	ldr	r3, [pc, #56]	; (80049c4 <HAL_SPI_MspInit+0x88>)
 800498c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800498e:	f003 0301 	and.w	r3, r3, #1
 8004992:	60fb      	str	r3, [r7, #12]
 8004994:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004996:	23e0      	movs	r3, #224	; 0xe0
 8004998:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800499a:	2302      	movs	r3, #2
 800499c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800499e:	2300      	movs	r3, #0
 80049a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049a2:	2303      	movs	r3, #3
 80049a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80049a6:	2305      	movs	r3, #5
 80049a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049aa:	f107 0314 	add.w	r3, r7, #20
 80049ae:	4619      	mov	r1, r3
 80049b0:	4805      	ldr	r0, [pc, #20]	; (80049c8 <HAL_SPI_MspInit+0x8c>)
 80049b2:	f000 fe91 	bl	80056d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80049b6:	bf00      	nop
 80049b8:	3728      	adds	r7, #40	; 0x28
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	40013000 	.word	0x40013000
 80049c4:	40023800 	.word	0x40023800
 80049c8:	40020000 	.word	0x40020000

080049cc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b085      	sub	sp, #20
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a0b      	ldr	r2, [pc, #44]	; (8004a08 <HAL_TIM_PWM_MspInit+0x3c>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d10d      	bne.n	80049fa <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80049de:	2300      	movs	r3, #0
 80049e0:	60fb      	str	r3, [r7, #12]
 80049e2:	4b0a      	ldr	r3, [pc, #40]	; (8004a0c <HAL_TIM_PWM_MspInit+0x40>)
 80049e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049e6:	4a09      	ldr	r2, [pc, #36]	; (8004a0c <HAL_TIM_PWM_MspInit+0x40>)
 80049e8:	f043 0301 	orr.w	r3, r3, #1
 80049ec:	6453      	str	r3, [r2, #68]	; 0x44
 80049ee:	4b07      	ldr	r3, [pc, #28]	; (8004a0c <HAL_TIM_PWM_MspInit+0x40>)
 80049f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049f2:	f003 0301 	and.w	r3, r3, #1
 80049f6:	60fb      	str	r3, [r7, #12]
 80049f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80049fa:	bf00      	nop
 80049fc:	3714      	adds	r7, #20
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr
 8004a06:	bf00      	nop
 8004a08:	40010000 	.word	0x40010000
 8004a0c:	40023800 	.word	0x40023800

08004a10 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b088      	sub	sp, #32
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a18:	f107 030c 	add.w	r3, r7, #12
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	601a      	str	r2, [r3, #0]
 8004a20:	605a      	str	r2, [r3, #4]
 8004a22:	609a      	str	r2, [r3, #8]
 8004a24:	60da      	str	r2, [r3, #12]
 8004a26:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a12      	ldr	r2, [pc, #72]	; (8004a78 <HAL_TIM_MspPostInit+0x68>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d11e      	bne.n	8004a70 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a32:	2300      	movs	r3, #0
 8004a34:	60bb      	str	r3, [r7, #8]
 8004a36:	4b11      	ldr	r3, [pc, #68]	; (8004a7c <HAL_TIM_MspPostInit+0x6c>)
 8004a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a3a:	4a10      	ldr	r2, [pc, #64]	; (8004a7c <HAL_TIM_MspPostInit+0x6c>)
 8004a3c:	f043 0301 	orr.w	r3, r3, #1
 8004a40:	6313      	str	r3, [r2, #48]	; 0x30
 8004a42:	4b0e      	ldr	r3, [pc, #56]	; (8004a7c <HAL_TIM_MspPostInit+0x6c>)
 8004a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a46:	f003 0301 	and.w	r3, r3, #1
 8004a4a:	60bb      	str	r3, [r7, #8]
 8004a4c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = LCD_BL_Pin;
 8004a4e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004a52:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a54:	2302      	movs	r3, #2
 8004a56:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004a60:	2301      	movs	r3, #1
 8004a62:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8004a64:	f107 030c 	add.w	r3, r7, #12
 8004a68:	4619      	mov	r1, r3
 8004a6a:	4805      	ldr	r0, [pc, #20]	; (8004a80 <HAL_TIM_MspPostInit+0x70>)
 8004a6c:	f000 fe34 	bl	80056d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004a70:	bf00      	nop
 8004a72:	3720      	adds	r7, #32
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}
 8004a78:	40010000 	.word	0x40010000
 8004a7c:	40023800 	.word	0x40023800
 8004a80:	40020000 	.word	0x40020000

08004a84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b08c      	sub	sp, #48	; 0x30
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a8c:	f107 031c 	add.w	r3, r7, #28
 8004a90:	2200      	movs	r2, #0
 8004a92:	601a      	str	r2, [r3, #0]
 8004a94:	605a      	str	r2, [r3, #4]
 8004a96:	609a      	str	r2, [r3, #8]
 8004a98:	60da      	str	r2, [r3, #12]
 8004a9a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a3a      	ldr	r2, [pc, #232]	; (8004b8c <HAL_UART_MspInit+0x108>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d135      	bne.n	8004b12 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	61bb      	str	r3, [r7, #24]
 8004aaa:	4b39      	ldr	r3, [pc, #228]	; (8004b90 <HAL_UART_MspInit+0x10c>)
 8004aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aae:	4a38      	ldr	r2, [pc, #224]	; (8004b90 <HAL_UART_MspInit+0x10c>)
 8004ab0:	f043 0310 	orr.w	r3, r3, #16
 8004ab4:	6453      	str	r3, [r2, #68]	; 0x44
 8004ab6:	4b36      	ldr	r3, [pc, #216]	; (8004b90 <HAL_UART_MspInit+0x10c>)
 8004ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aba:	f003 0310 	and.w	r3, r3, #16
 8004abe:	61bb      	str	r3, [r7, #24]
 8004ac0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	617b      	str	r3, [r7, #20]
 8004ac6:	4b32      	ldr	r3, [pc, #200]	; (8004b90 <HAL_UART_MspInit+0x10c>)
 8004ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aca:	4a31      	ldr	r2, [pc, #196]	; (8004b90 <HAL_UART_MspInit+0x10c>)
 8004acc:	f043 0301 	orr.w	r3, r3, #1
 8004ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8004ad2:	4b2f      	ldr	r3, [pc, #188]	; (8004b90 <HAL_UART_MspInit+0x10c>)
 8004ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad6:	f003 0301 	and.w	r3, r3, #1
 8004ada:	617b      	str	r3, [r7, #20]
 8004adc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004ade:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004ae2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ae4:	2302      	movs	r3, #2
 8004ae6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004aec:	2303      	movs	r3, #3
 8004aee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004af0:	2307      	movs	r3, #7
 8004af2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004af4:	f107 031c 	add.w	r3, r7, #28
 8004af8:	4619      	mov	r1, r3
 8004afa:	4826      	ldr	r0, [pc, #152]	; (8004b94 <HAL_UART_MspInit+0x110>)
 8004afc:	f000 fdec 	bl	80056d8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004b00:	2200      	movs	r2, #0
 8004b02:	2100      	movs	r1, #0
 8004b04:	2025      	movs	r0, #37	; 0x25
 8004b06:	f000 fd1e 	bl	8005546 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004b0a:	2025      	movs	r0, #37	; 0x25
 8004b0c:	f000 fd37 	bl	800557e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004b10:	e038      	b.n	8004b84 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a20      	ldr	r2, [pc, #128]	; (8004b98 <HAL_UART_MspInit+0x114>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d133      	bne.n	8004b84 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	613b      	str	r3, [r7, #16]
 8004b20:	4b1b      	ldr	r3, [pc, #108]	; (8004b90 <HAL_UART_MspInit+0x10c>)
 8004b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b24:	4a1a      	ldr	r2, [pc, #104]	; (8004b90 <HAL_UART_MspInit+0x10c>)
 8004b26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b2a:	6413      	str	r3, [r2, #64]	; 0x40
 8004b2c:	4b18      	ldr	r3, [pc, #96]	; (8004b90 <HAL_UART_MspInit+0x10c>)
 8004b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b34:	613b      	str	r3, [r7, #16]
 8004b36:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b38:	2300      	movs	r3, #0
 8004b3a:	60fb      	str	r3, [r7, #12]
 8004b3c:	4b14      	ldr	r3, [pc, #80]	; (8004b90 <HAL_UART_MspInit+0x10c>)
 8004b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b40:	4a13      	ldr	r2, [pc, #76]	; (8004b90 <HAL_UART_MspInit+0x10c>)
 8004b42:	f043 0301 	orr.w	r3, r3, #1
 8004b46:	6313      	str	r3, [r2, #48]	; 0x30
 8004b48:	4b11      	ldr	r3, [pc, #68]	; (8004b90 <HAL_UART_MspInit+0x10c>)
 8004b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b4c:	f003 0301 	and.w	r3, r3, #1
 8004b50:	60fb      	str	r3, [r7, #12]
 8004b52:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004b54:	230c      	movs	r3, #12
 8004b56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b58:	2302      	movs	r3, #2
 8004b5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b60:	2303      	movs	r3, #3
 8004b62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004b64:	2307      	movs	r3, #7
 8004b66:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b68:	f107 031c 	add.w	r3, r7, #28
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	4809      	ldr	r0, [pc, #36]	; (8004b94 <HAL_UART_MspInit+0x110>)
 8004b70:	f000 fdb2 	bl	80056d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004b74:	2200      	movs	r2, #0
 8004b76:	2100      	movs	r1, #0
 8004b78:	2026      	movs	r0, #38	; 0x26
 8004b7a:	f000 fce4 	bl	8005546 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004b7e:	2026      	movs	r0, #38	; 0x26
 8004b80:	f000 fcfd 	bl	800557e <HAL_NVIC_EnableIRQ>
}
 8004b84:	bf00      	nop
 8004b86:	3730      	adds	r7, #48	; 0x30
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	40011000 	.word	0x40011000
 8004b90:	40023800 	.word	0x40023800
 8004b94:	40020000 	.word	0x40020000
 8004b98:	40004400 	.word	0x40004400

08004b9c <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b086      	sub	sp, #24
 8004ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8004ba2:	1d3b      	adds	r3, r7, #4
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	601a      	str	r2, [r3, #0]
 8004ba8:	605a      	str	r2, [r3, #4]
 8004baa:	609a      	str	r2, [r3, #8]
 8004bac:	60da      	str	r2, [r3, #12]
 8004bae:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8004bb0:	4b1c      	ldr	r3, [pc, #112]	; (8004c24 <HAL_FSMC_MspInit+0x88>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d131      	bne.n	8004c1c <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8004bb8:	4b1a      	ldr	r3, [pc, #104]	; (8004c24 <HAL_FSMC_MspInit+0x88>)
 8004bba:	2201      	movs	r2, #1
 8004bbc:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	603b      	str	r3, [r7, #0]
 8004bc2:	4b19      	ldr	r3, [pc, #100]	; (8004c28 <HAL_FSMC_MspInit+0x8c>)
 8004bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc6:	4a18      	ldr	r2, [pc, #96]	; (8004c28 <HAL_FSMC_MspInit+0x8c>)
 8004bc8:	f043 0301 	orr.w	r3, r3, #1
 8004bcc:	6393      	str	r3, [r2, #56]	; 0x38
 8004bce:	4b16      	ldr	r3, [pc, #88]	; (8004c28 <HAL_FSMC_MspInit+0x8c>)
 8004bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd2:	f003 0301 	and.w	r3, r3, #1
 8004bd6:	603b      	str	r3, [r7, #0]
 8004bd8:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8004bda:	f64f 7380 	movw	r3, #65408	; 0xff80
 8004bde:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004be0:	2302      	movs	r3, #2
 8004be2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004be4:	2300      	movs	r3, #0
 8004be6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004be8:	2303      	movs	r3, #3
 8004bea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8004bec:	230c      	movs	r3, #12
 8004bee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004bf0:	1d3b      	adds	r3, r7, #4
 8004bf2:	4619      	mov	r1, r3
 8004bf4:	480d      	ldr	r0, [pc, #52]	; (8004c2c <HAL_FSMC_MspInit+0x90>)
 8004bf6:	f000 fd6f 	bl	80056d8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13
 8004bfa:	f24e 73b3 	movw	r3, #59315	; 0xe7b3
 8004bfe:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c00:	2302      	movs	r3, #2
 8004c02:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c04:	2300      	movs	r3, #0
 8004c06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c08:	2303      	movs	r3, #3
 8004c0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8004c0c:	230c      	movs	r3, #12
 8004c0e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004c10:	1d3b      	adds	r3, r7, #4
 8004c12:	4619      	mov	r1, r3
 8004c14:	4806      	ldr	r0, [pc, #24]	; (8004c30 <HAL_FSMC_MspInit+0x94>)
 8004c16:	f000 fd5f 	bl	80056d8 <HAL_GPIO_Init>
 8004c1a:	e000      	b.n	8004c1e <HAL_FSMC_MspInit+0x82>
    return;
 8004c1c:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8004c1e:	3718      	adds	r7, #24
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	200000a4 	.word	0x200000a4
 8004c28:	40023800 	.word	0x40023800
 8004c2c:	40021000 	.word	0x40021000
 8004c30:	40020c00 	.word	0x40020c00

08004c34 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b082      	sub	sp, #8
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8004c3c:	f7ff ffae 	bl	8004b9c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8004c40:	bf00      	nop
 8004c42:	3708      	adds	r7, #8
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004c4c:	e7fe      	b.n	8004c4c <NMI_Handler+0x4>

08004c4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004c4e:	b480      	push	{r7}
 8004c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004c52:	e7fe      	b.n	8004c52 <HardFault_Handler+0x4>

08004c54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004c54:	b480      	push	{r7}
 8004c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004c58:	e7fe      	b.n	8004c58 <MemManage_Handler+0x4>

08004c5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004c5a:	b480      	push	{r7}
 8004c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004c5e:	e7fe      	b.n	8004c5e <BusFault_Handler+0x4>

08004c60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004c60:	b480      	push	{r7}
 8004c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004c64:	e7fe      	b.n	8004c64 <UsageFault_Handler+0x4>

08004c66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004c66:	b480      	push	{r7}
 8004c68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004c6a:	bf00      	nop
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr

08004c74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004c74:	b480      	push	{r7}
 8004c76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004c78:	bf00      	nop
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr

08004c82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004c82:	b480      	push	{r7}
 8004c84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004c86:	bf00      	nop
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr

08004c90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004c94:	f000 fb38 	bl	8005308 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004c98:	bf00      	nop
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8004ca0:	2010      	movs	r0, #16
 8004ca2:	f000 fecf 	bl	8005a44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8004ca6:	bf00      	nop
 8004ca8:	bd80      	pop	{r7, pc}
	...

08004cac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b082      	sub	sp, #8
 8004cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  static int ledVal = 0;
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, ledVal);
 8004cb2:	4b24      	ldr	r3, [pc, #144]	; (8004d44 <USART1_IRQHandler+0x98>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	461a      	mov	r2, r3
 8004cba:	2108      	movs	r1, #8
 8004cbc:	4822      	ldr	r0, [pc, #136]	; (8004d48 <USART1_IRQHandler+0x9c>)
 8004cbe:	f000 fea7 	bl	8005a10 <HAL_GPIO_WritePin>
  ledVal = !ledVal;
 8004cc2:	4b20      	ldr	r3, [pc, #128]	; (8004d44 <USART1_IRQHandler+0x98>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	bf0c      	ite	eq
 8004cca:	2301      	moveq	r3, #1
 8004ccc:	2300      	movne	r3, #0
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	4b1c      	ldr	r3, [pc, #112]	; (8004d44 <USART1_IRQHandler+0x98>)
 8004cd4:	601a      	str	r2, [r3, #0]
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004cd6:	481d      	ldr	r0, [pc, #116]	; (8004d4c <USART1_IRQHandler+0xa0>)
 8004cd8:	f003 fbbc 	bl	8008454 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  volatile unsigned int IIR;
  IIR = USART1->SR;
 8004cdc:	4b1c      	ldr	r3, [pc, #112]	; (8004d50 <USART1_IRQHandler+0xa4>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	603b      	str	r3, [r7, #0]
  if(IIR & UART_FLAG_RXNE){
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	f003 0320 	and.w	r3, r3, #32
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d009      	beq.n	8004d00 <USART1_IRQHandler+0x54>
  		//Read Data Register Not Empty
  		char t = USART1->DR; // the character from the USART1 data register is saved in t
 8004cec:	4b18      	ldr	r3, [pc, #96]	; (8004d50 <USART1_IRQHandler+0xa4>)
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	71fb      	strb	r3, [r7, #7]
  		put_in_rx_buffer(t,DBG_UART);
 8004cf2:	4b18      	ldr	r3, [pc, #96]	; (8004d54 <USART1_IRQHandler+0xa8>)
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	79fb      	ldrb	r3, [r7, #7]
 8004cf8:	4611      	mov	r1, r2
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f000 f93c 	bl	8004f78 <put_in_rx_buffer>
      }
  if(IIR & UART_FLAG_TXE){
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d018      	beq.n	8004d3c <USART1_IRQHandler+0x90>
  		if(wr_pointer_dbg==rd_pointer_dbg){
 8004d0a:	4b13      	ldr	r3, [pc, #76]	; (8004d58 <USART1_IRQHandler+0xac>)
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	4b13      	ldr	r3, [pc, #76]	; (8004d5c <USART1_IRQHandler+0xb0>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d108      	bne.n	8004d28 <USART1_IRQHandler+0x7c>
  			__HAL_UART_DISABLE_IT(&huart1, UART_IT_TXE); //whole message transmitted
 8004d16:	4b0d      	ldr	r3, [pc, #52]	; (8004d4c <USART1_IRQHandler+0xa0>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	68da      	ldr	r2, [r3, #12]
 8004d1c:	4b0b      	ldr	r3, [pc, #44]	; (8004d4c <USART1_IRQHandler+0xa0>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d24:	60da      	str	r2, [r3, #12]
  		}
  	}


  /* USER CODE END USART1_IRQn 1 */
}
 8004d26:	e009      	b.n	8004d3c <USART1_IRQHandler+0x90>
  			DBG_UART->DR = get_from_tx_buffer(DBG_UART);
 8004d28:	4b0a      	ldr	r3, [pc, #40]	; (8004d54 <USART1_IRQHandler+0xa8>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f000 f975 	bl	800501c <get_from_tx_buffer>
 8004d32:	4603      	mov	r3, r0
 8004d34:	461a      	mov	r2, r3
 8004d36:	4b07      	ldr	r3, [pc, #28]	; (8004d54 <USART1_IRQHandler+0xa8>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	605a      	str	r2, [r3, #4]
}
 8004d3c:	bf00      	nop
 8004d3e:	3708      	adds	r7, #8
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	200000a8 	.word	0x200000a8
 8004d48:	40020400 	.word	0x40020400
 8004d4c:	20002188 	.word	0x20002188
 8004d50:	40011000 	.word	0x40011000
 8004d54:	20000018 	.word	0x20000018
 8004d58:	200000bc 	.word	0x200000bc
 8004d5c:	200000b8 	.word	0x200000b8

08004d60 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b082      	sub	sp, #8
 8004d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004d66:	481b      	ldr	r0, [pc, #108]	; (8004dd4 <USART2_IRQHandler+0x74>)
 8004d68:	f003 fb74 	bl	8008454 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  volatile unsigned int IIR;
  	IIR=USART2->SR;
 8004d6c:	4b1a      	ldr	r3, [pc, #104]	; (8004dd8 <USART2_IRQHandler+0x78>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	603b      	str	r3, [r7, #0]
    if(IIR & UART_FLAG_RXNE){
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	f003 0320 	and.w	r3, r3, #32
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d009      	beq.n	8004d90 <USART2_IRQHandler+0x30>
  		// check if the USART6 receive interrupt flag was set
  		char t = USART2->DR; // the character from the USART1 data register is saved in t
 8004d7c:	4b16      	ldr	r3, [pc, #88]	; (8004dd8 <USART2_IRQHandler+0x78>)
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	71fb      	strb	r3, [r7, #7]
  		put_in_rx_buffer(t,RS485_UART);
 8004d82:	4b16      	ldr	r3, [pc, #88]	; (8004ddc <USART2_IRQHandler+0x7c>)
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	79fb      	ldrb	r3, [r7, #7]
 8004d88:	4611      	mov	r1, r2
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f000 f8f4 	bl	8004f78 <put_in_rx_buffer>
      }
  	if(IIR & UART_FLAG_TXE){
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d017      	beq.n	8004dca <USART2_IRQHandler+0x6a>
  		if(wr_pointer_rs485==rd_pointer_rs485){
 8004d9a:	4b11      	ldr	r3, [pc, #68]	; (8004de0 <USART2_IRQHandler+0x80>)
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	4b11      	ldr	r3, [pc, #68]	; (8004de4 <USART2_IRQHandler+0x84>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d108      	bne.n	8004db8 <USART2_IRQHandler+0x58>
  			__HAL_UART_DISABLE_IT(&huart2, UART_IT_TXE);
 8004da6:	4b0b      	ldr	r3, [pc, #44]	; (8004dd4 <USART2_IRQHandler+0x74>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	68da      	ldr	r2, [r3, #12]
 8004dac:	4b09      	ldr	r3, [pc, #36]	; (8004dd4 <USART2_IRQHandler+0x74>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004db4:	60da      	str	r2, [r3, #12]
  			USART2->DR = get_from_tx_buffer(RS485_UART);
  		}
  	}

  /* USER CODE END USART2_IRQn 1 */
}
 8004db6:	e008      	b.n	8004dca <USART2_IRQHandler+0x6a>
  			USART2->DR = get_from_tx_buffer(RS485_UART);
 8004db8:	4b08      	ldr	r3, [pc, #32]	; (8004ddc <USART2_IRQHandler+0x7c>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f000 f92d 	bl	800501c <get_from_tx_buffer>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	4b04      	ldr	r3, [pc, #16]	; (8004dd8 <USART2_IRQHandler+0x78>)
 8004dc8:	605a      	str	r2, [r3, #4]
}
 8004dca:	bf00      	nop
 8004dcc:	3708      	adds	r7, #8
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	2000226c 	.word	0x2000226c
 8004dd8:	40004400 	.word	0x40004400
 8004ddc:	20000014 	.word	0x20000014
 8004de0:	200000b4 	.word	0x200000b4
 8004de4:	200000b0 	.word	0x200000b0

08004de8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b086      	sub	sp, #24
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	60f8      	str	r0, [r7, #12]
 8004df0:	60b9      	str	r1, [r7, #8]
 8004df2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004df4:	2300      	movs	r3, #0
 8004df6:	617b      	str	r3, [r7, #20]
 8004df8:	e00a      	b.n	8004e10 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004dfa:	f3af 8000 	nop.w
 8004dfe:	4601      	mov	r1, r0
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	1c5a      	adds	r2, r3, #1
 8004e04:	60ba      	str	r2, [r7, #8]
 8004e06:	b2ca      	uxtb	r2, r1
 8004e08:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	3301      	adds	r3, #1
 8004e0e:	617b      	str	r3, [r7, #20]
 8004e10:	697a      	ldr	r2, [r7, #20]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	429a      	cmp	r2, r3
 8004e16:	dbf0      	blt.n	8004dfa <_read+0x12>
	}

return len;
 8004e18:	687b      	ldr	r3, [r7, #4]
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3718      	adds	r7, #24
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}

08004e22 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004e22:	b580      	push	{r7, lr}
 8004e24:	b086      	sub	sp, #24
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	60f8      	str	r0, [r7, #12]
 8004e2a:	60b9      	str	r1, [r7, #8]
 8004e2c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e2e:	2300      	movs	r3, #0
 8004e30:	617b      	str	r3, [r7, #20]
 8004e32:	e009      	b.n	8004e48 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	1c5a      	adds	r2, r3, #1
 8004e38:	60ba      	str	r2, [r7, #8]
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f000 f889 	bl	8004f54 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	3301      	adds	r3, #1
 8004e46:	617b      	str	r3, [r7, #20]
 8004e48:	697a      	ldr	r2, [r7, #20]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	dbf1      	blt.n	8004e34 <_write+0x12>
	}
	return len;
 8004e50:	687b      	ldr	r3, [r7, #4]
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3718      	adds	r7, #24
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}

08004e5a <_close>:

int _close(int file)
{
 8004e5a:	b480      	push	{r7}
 8004e5c:	b083      	sub	sp, #12
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
	return -1;
 8004e62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	370c      	adds	r7, #12
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr

08004e72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004e72:	b480      	push	{r7}
 8004e74:	b083      	sub	sp, #12
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	6078      	str	r0, [r7, #4]
 8004e7a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004e82:	605a      	str	r2, [r3, #4]
	return 0;
 8004e84:	2300      	movs	r3, #0
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	370c      	adds	r7, #12
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr

08004e92 <_isatty>:

int _isatty(int file)
{
 8004e92:	b480      	push	{r7}
 8004e94:	b083      	sub	sp, #12
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	6078      	str	r0, [r7, #4]
	return 1;
 8004e9a:	2301      	movs	r3, #1
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	370c      	adds	r7, #12
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr

08004ea8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b085      	sub	sp, #20
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	607a      	str	r2, [r7, #4]
	return 0;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3714      	adds	r7, #20
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr
	...

08004ec4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b086      	sub	sp, #24
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004ecc:	4a14      	ldr	r2, [pc, #80]	; (8004f20 <_sbrk+0x5c>)
 8004ece:	4b15      	ldr	r3, [pc, #84]	; (8004f24 <_sbrk+0x60>)
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004ed8:	4b13      	ldr	r3, [pc, #76]	; (8004f28 <_sbrk+0x64>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d102      	bne.n	8004ee6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004ee0:	4b11      	ldr	r3, [pc, #68]	; (8004f28 <_sbrk+0x64>)
 8004ee2:	4a12      	ldr	r2, [pc, #72]	; (8004f2c <_sbrk+0x68>)
 8004ee4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004ee6:	4b10      	ldr	r3, [pc, #64]	; (8004f28 <_sbrk+0x64>)
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4413      	add	r3, r2
 8004eee:	693a      	ldr	r2, [r7, #16]
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d207      	bcs.n	8004f04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004ef4:	f004 fa12 	bl	800931c <__errno>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	220c      	movs	r2, #12
 8004efc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004efe:	f04f 33ff 	mov.w	r3, #4294967295
 8004f02:	e009      	b.n	8004f18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004f04:	4b08      	ldr	r3, [pc, #32]	; (8004f28 <_sbrk+0x64>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004f0a:	4b07      	ldr	r3, [pc, #28]	; (8004f28 <_sbrk+0x64>)
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4413      	add	r3, r2
 8004f12:	4a05      	ldr	r2, [pc, #20]	; (8004f28 <_sbrk+0x64>)
 8004f14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004f16:	68fb      	ldr	r3, [r7, #12]
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3718      	adds	r7, #24
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}
 8004f20:	20020000 	.word	0x20020000
 8004f24:	00000400 	.word	0x00000400
 8004f28:	200000ac 	.word	0x200000ac
 8004f2c:	20006050 	.word	0x20006050

08004f30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004f30:	b480      	push	{r7}
 8004f32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004f34:	4b06      	ldr	r3, [pc, #24]	; (8004f50 <SystemInit+0x20>)
 8004f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f3a:	4a05      	ldr	r2, [pc, #20]	; (8004f50 <SystemInit+0x20>)
 8004f3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004f40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004f44:	bf00      	nop
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr
 8004f4e:	bf00      	nop
 8004f50:	e000ed00 	.word	0xe000ed00

08004f54 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

//redirect printf to uart1.
PUTCHAR_PROTOTYPE{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b082      	sub	sp, #8
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 0xffff);
 8004f5c:	1d39      	adds	r1, r7, #4
 8004f5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004f62:	2201      	movs	r2, #1
 8004f64:	4803      	ldr	r0, [pc, #12]	; (8004f74 <__io_putchar+0x20>)
 8004f66:	f003 f9e2 	bl	800832e <HAL_UART_Transmit>
	return ch;
 8004f6a:	687b      	ldr	r3, [r7, #4]
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3708      	adds	r7, #8
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}
 8004f74:	20002188 	.word	0x20002188

08004f78 <put_in_rx_buffer>:

void put_in_rx_buffer(char data, USART_TypeDef* USARTx)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	4603      	mov	r3, r0
 8004f80:	6039      	str	r1, [r7, #0]
 8004f82:	71fb      	strb	r3, [r7, #7]
	if(USARTx == DBG_UART)
 8004f84:	4b1d      	ldr	r3, [pc, #116]	; (8004ffc <put_in_rx_buffer+0x84>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	683a      	ldr	r2, [r7, #0]
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d114      	bne.n	8004fb8 <put_in_rx_buffer+0x40>
	{
		if(SIO_RBUFLEN_DBG>=LEN_RX_BUFFER_DBG)
 8004f8e:	4b1c      	ldr	r3, [pc, #112]	; (8005000 <put_in_rx_buffer+0x88>)
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	4b1c      	ldr	r3, [pc, #112]	; (8005004 <put_in_rx_buffer+0x8c>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	1ad3      	subs	r3, r2, r3
 8004f98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f9c:	d226      	bcs.n	8004fec <put_in_rx_buffer+0x74>
			{
				return;
			}
		rx_buffer_dbg[wr_pointer_rx_dbg & (LEN_RX_BUFFER_DBG - 1)]=data;
 8004f9e:	4b18      	ldr	r3, [pc, #96]	; (8005000 <put_in_rx_buffer+0x88>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004fa6:	4918      	ldr	r1, [pc, #96]	; (8005008 <put_in_rx_buffer+0x90>)
 8004fa8:	79fa      	ldrb	r2, [r7, #7]
 8004faa:	54ca      	strb	r2, [r1, r3]
		wr_pointer_rx_dbg++;
 8004fac:	4b14      	ldr	r3, [pc, #80]	; (8005000 <put_in_rx_buffer+0x88>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	3301      	adds	r3, #1
 8004fb2:	4a13      	ldr	r2, [pc, #76]	; (8005000 <put_in_rx_buffer+0x88>)
 8004fb4:	6013      	str	r3, [r2, #0]
 8004fb6:	e01c      	b.n	8004ff2 <put_in_rx_buffer+0x7a>
	}
	else if(USARTx == RS485_UART)
 8004fb8:	4b14      	ldr	r3, [pc, #80]	; (800500c <put_in_rx_buffer+0x94>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	683a      	ldr	r2, [r7, #0]
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d117      	bne.n	8004ff2 <put_in_rx_buffer+0x7a>
	{
		if(SIO_RBUFLEN_RS485>=LEN_RX_BUFFER_RS485)
 8004fc2:	4b13      	ldr	r3, [pc, #76]	; (8005010 <put_in_rx_buffer+0x98>)
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	4b13      	ldr	r3, [pc, #76]	; (8005014 <put_in_rx_buffer+0x9c>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	1ad3      	subs	r3, r2, r3
 8004fcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fd0:	d20e      	bcs.n	8004ff0 <put_in_rx_buffer+0x78>
			{
				return;
			}
		rx_buffer_rs485[wr_pointer_rx_rs485 & (LEN_RX_BUFFER_RS485 - 1)]=data;
 8004fd2:	4b0f      	ldr	r3, [pc, #60]	; (8005010 <put_in_rx_buffer+0x98>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fda:	490f      	ldr	r1, [pc, #60]	; (8005018 <put_in_rx_buffer+0xa0>)
 8004fdc:	79fa      	ldrb	r2, [r7, #7]
 8004fde:	54ca      	strb	r2, [r1, r3]
		wr_pointer_rx_rs485++;
 8004fe0:	4b0b      	ldr	r3, [pc, #44]	; (8005010 <put_in_rx_buffer+0x98>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	3301      	adds	r3, #1
 8004fe6:	4a0a      	ldr	r2, [pc, #40]	; (8005010 <put_in_rx_buffer+0x98>)
 8004fe8:	6013      	str	r3, [r2, #0]
 8004fea:	e002      	b.n	8004ff2 <put_in_rx_buffer+0x7a>
				return;
 8004fec:	bf00      	nop
 8004fee:	e000      	b.n	8004ff2 <put_in_rx_buffer+0x7a>
				return;
 8004ff0:	bf00      	nop
	}
}
 8004ff2:	370c      	adds	r7, #12
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr
 8004ffc:	20000018 	.word	0x20000018
 8005000:	200000cc 	.word	0x200000cc
 8005004:	200000c8 	.word	0x200000c8
 8005008:	20003bb8 	.word	0x20003bb8
 800500c:	20000014 	.word	0x20000014
 8005010:	200000c4 	.word	0x200000c4
 8005014:	200000c0 	.word	0x200000c0
 8005018:	200023b0 	.word	0x200023b0

0800501c <get_from_tx_buffer>:
		tx_buffer_dbg[wr_pointer_dbg & (LEN_TX_BUFFER_DBG - 1)]=data;
		wr_pointer_dbg++;
	}
}
char get_from_tx_buffer(USART_TypeDef* USARTx)
{
 800501c:	b480      	push	{r7}
 800501e:	b085      	sub	sp, #20
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
	char data;

	if(USARTx == RS485_UART)
 8005024:	4b14      	ldr	r3, [pc, #80]	; (8005078 <get_from_tx_buffer+0x5c>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	429a      	cmp	r2, r3
 800502c:	d10c      	bne.n	8005048 <get_from_tx_buffer+0x2c>
	{

		data=tx_buffer_rs485[rd_pointer_rs485 & (LEN_TX_BUFFER_RS485-1)];
 800502e:	4b13      	ldr	r3, [pc, #76]	; (800507c <get_from_tx_buffer+0x60>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005036:	4a12      	ldr	r2, [pc, #72]	; (8005080 <get_from_tx_buffer+0x64>)
 8005038:	5cd3      	ldrb	r3, [r2, r3]
 800503a:	73fb      	strb	r3, [r7, #15]
		rd_pointer_rs485++;
 800503c:	4b0f      	ldr	r3, [pc, #60]	; (800507c <get_from_tx_buffer+0x60>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	3301      	adds	r3, #1
 8005042:	4a0e      	ldr	r2, [pc, #56]	; (800507c <get_from_tx_buffer+0x60>)
 8005044:	6013      	str	r3, [r2, #0]
 8005046:	e010      	b.n	800506a <get_from_tx_buffer+0x4e>
	}
	else if(USARTx == DBG_UART)
 8005048:	4b0e      	ldr	r3, [pc, #56]	; (8005084 <get_from_tx_buffer+0x68>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	429a      	cmp	r2, r3
 8005050:	d10b      	bne.n	800506a <get_from_tx_buffer+0x4e>
	{

		data=tx_buffer_dbg[rd_pointer_dbg & (LEN_TX_BUFFER_DBG-1)];
 8005052:	4b0d      	ldr	r3, [pc, #52]	; (8005088 <get_from_tx_buffer+0x6c>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800505a:	4a0c      	ldr	r2, [pc, #48]	; (800508c <get_from_tx_buffer+0x70>)
 800505c:	5cd3      	ldrb	r3, [r2, r3]
 800505e:	73fb      	strb	r3, [r7, #15]
		rd_pointer_dbg++;
 8005060:	4b09      	ldr	r3, [pc, #36]	; (8005088 <get_from_tx_buffer+0x6c>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	3301      	adds	r3, #1
 8005066:	4a08      	ldr	r2, [pc, #32]	; (8005088 <get_from_tx_buffer+0x6c>)
 8005068:	6013      	str	r3, [r2, #0]
	}
	return data;
 800506a:	7bfb      	ldrb	r3, [r7, #15]
}
 800506c:	4618      	mov	r0, r3
 800506e:	3714      	adds	r7, #20
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr
 8005078:	20000014 	.word	0x20000014
 800507c:	200000b0 	.word	0x200000b0
 8005080:	200027b0 	.word	0x200027b0
 8005084:	20000018 	.word	0x20000018
 8005088:	200000b8 	.word	0x200000b8
 800508c:	20005bb8 	.word	0x20005bb8

08005090 <get_from_rx_buffer>:
char get_from_rx_buffer(USART_TypeDef* USARTx)
{
 8005090:	b480      	push	{r7}
 8005092:	b085      	sub	sp, #20
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
	char data;

	if(USARTx == RS485_UART)
 8005098:	4b14      	ldr	r3, [pc, #80]	; (80050ec <get_from_rx_buffer+0x5c>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	429a      	cmp	r2, r3
 80050a0:	d10c      	bne.n	80050bc <get_from_rx_buffer+0x2c>
	{

		data=rx_buffer_rs485[rd_pointer_rx_rs485 & (LEN_RX_BUFFER_RS485-1)];
 80050a2:	4b13      	ldr	r3, [pc, #76]	; (80050f0 <get_from_rx_buffer+0x60>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050aa:	4a12      	ldr	r2, [pc, #72]	; (80050f4 <get_from_rx_buffer+0x64>)
 80050ac:	5cd3      	ldrb	r3, [r2, r3]
 80050ae:	73fb      	strb	r3, [r7, #15]
		rd_pointer_rx_rs485++;
 80050b0:	4b0f      	ldr	r3, [pc, #60]	; (80050f0 <get_from_rx_buffer+0x60>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	3301      	adds	r3, #1
 80050b6:	4a0e      	ldr	r2, [pc, #56]	; (80050f0 <get_from_rx_buffer+0x60>)
 80050b8:	6013      	str	r3, [r2, #0]
 80050ba:	e010      	b.n	80050de <get_from_rx_buffer+0x4e>
	}
	else if(USARTx == DBG_UART)
 80050bc:	4b0e      	ldr	r3, [pc, #56]	; (80050f8 <get_from_rx_buffer+0x68>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d10b      	bne.n	80050de <get_from_rx_buffer+0x4e>
	{

		data=rx_buffer_dbg[rd_pointer_rx_dbg & (LEN_RX_BUFFER_DBG-1)];
 80050c6:	4b0d      	ldr	r3, [pc, #52]	; (80050fc <get_from_rx_buffer+0x6c>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80050ce:	4a0c      	ldr	r2, [pc, #48]	; (8005100 <get_from_rx_buffer+0x70>)
 80050d0:	5cd3      	ldrb	r3, [r2, r3]
 80050d2:	73fb      	strb	r3, [r7, #15]
		rd_pointer_rx_dbg++;
 80050d4:	4b09      	ldr	r3, [pc, #36]	; (80050fc <get_from_rx_buffer+0x6c>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	3301      	adds	r3, #1
 80050da:	4a08      	ldr	r2, [pc, #32]	; (80050fc <get_from_rx_buffer+0x6c>)
 80050dc:	6013      	str	r3, [r2, #0]
	}
	return data;
 80050de:	7bfb      	ldrb	r3, [r7, #15]
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3714      	adds	r7, #20
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr
 80050ec:	20000014 	.word	0x20000014
 80050f0:	200000c0 	.word	0x200000c0
 80050f4:	200023b0 	.word	0x200023b0
 80050f8:	20000018 	.word	0x20000018
 80050fc:	200000c8 	.word	0x200000c8
 8005100:	20003bb8 	.word	0x20003bb8

08005104 <usart_message_ready>:

	return 0;
}
//**************************************************************************************
char usart_message_ready(USART_TypeDef* USARTx, char delimiter)
{
 8005104:	b480      	push	{r7}
 8005106:	b085      	sub	sp, #20
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	460b      	mov	r3, r1
 800510e:	70fb      	strb	r3, [r7, #3]
	if (USARTx == DBG_UART)
 8005110:	4b1f      	ldr	r3, [pc, #124]	; (8005190 <usart_message_ready+0x8c>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	429a      	cmp	r2, r3
 8005118:	d117      	bne.n	800514a <usart_message_ready+0x46>
	{
		unsigned long tail = rd_pointer_rx_dbg;
 800511a:	4b1e      	ldr	r3, [pc, #120]	; (8005194 <usart_message_ready+0x90>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	60fb      	str	r3, [r7, #12]

		while ((wr_pointer_rx_dbg - tail) != 0)
 8005120:	e00d      	b.n	800513e <usart_message_ready+0x3a>
		{
			if (rx_buffer_dbg[tail & (LEN_RX_BUFFER_DBG - 1)] == delimiter)
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005128:	4a1b      	ldr	r2, [pc, #108]	; (8005198 <usart_message_ready+0x94>)
 800512a:	5cd3      	ldrb	r3, [r2, r3]
 800512c:	b2db      	uxtb	r3, r3
 800512e:	78fa      	ldrb	r2, [r7, #3]
 8005130:	429a      	cmp	r2, r3
 8005132:	d101      	bne.n	8005138 <usart_message_ready+0x34>
				return 1;
 8005134:	2301      	movs	r3, #1
 8005136:	e025      	b.n	8005184 <usart_message_ready+0x80>
			++tail;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	3301      	adds	r3, #1
 800513c:	60fb      	str	r3, [r7, #12]
		while ((wr_pointer_rx_dbg - tail) != 0)
 800513e:	4b17      	ldr	r3, [pc, #92]	; (800519c <usart_message_ready+0x98>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	68fa      	ldr	r2, [r7, #12]
 8005144:	429a      	cmp	r2, r3
 8005146:	d1ec      	bne.n	8005122 <usart_message_ready+0x1e>
 8005148:	e01b      	b.n	8005182 <usart_message_ready+0x7e>
		}
	}
	else if (USARTx == RS485_UART)
 800514a:	4b15      	ldr	r3, [pc, #84]	; (80051a0 <usart_message_ready+0x9c>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	429a      	cmp	r2, r3
 8005152:	d116      	bne.n	8005182 <usart_message_ready+0x7e>
	{
		unsigned long tail = rd_pointer_rx_rs485;
 8005154:	4b13      	ldr	r3, [pc, #76]	; (80051a4 <usart_message_ready+0xa0>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	60bb      	str	r3, [r7, #8]

		while ((wr_pointer_rx_rs485 - tail) != 0)
 800515a:	e00d      	b.n	8005178 <usart_message_ready+0x74>
		{
			if (rx_buffer_rs485[tail & (LEN_RX_BUFFER_RS485 - 1)] == delimiter)
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005162:	4a11      	ldr	r2, [pc, #68]	; (80051a8 <usart_message_ready+0xa4>)
 8005164:	5cd3      	ldrb	r3, [r2, r3]
 8005166:	b2db      	uxtb	r3, r3
 8005168:	78fa      	ldrb	r2, [r7, #3]
 800516a:	429a      	cmp	r2, r3
 800516c:	d101      	bne.n	8005172 <usart_message_ready+0x6e>
				return 1;
 800516e:	2301      	movs	r3, #1
 8005170:	e008      	b.n	8005184 <usart_message_ready+0x80>
			++tail;
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	3301      	adds	r3, #1
 8005176:	60bb      	str	r3, [r7, #8]
		while ((wr_pointer_rx_rs485 - tail) != 0)
 8005178:	4b0c      	ldr	r3, [pc, #48]	; (80051ac <usart_message_ready+0xa8>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	68ba      	ldr	r2, [r7, #8]
 800517e:	429a      	cmp	r2, r3
 8005180:	d1ec      	bne.n	800515c <usart_message_ready+0x58>
		}
	}
	return 0;
 8005182:	2300      	movs	r3, #0
}
 8005184:	4618      	mov	r0, r3
 8005186:	3714      	adds	r7, #20
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr
 8005190:	20000018 	.word	0x20000018
 8005194:	200000c8 	.word	0x200000c8
 8005198:	20003bb8 	.word	0x20003bb8
 800519c:	200000cc 	.word	0x200000cc
 80051a0:	20000014 	.word	0x20000014
 80051a4:	200000c0 	.word	0x200000c0
 80051a8:	200023b0 	.word	0x200023b0
 80051ac:	200000c4 	.word	0x200000c4

080051b0 <read_usart_message>:
/*
 * Reads message from specified uart rx buffer into @dst until @delimiter character is encountered or @max_len exceeded.
 * Returns: number of characters read if successful, zero when there is no message ready to be read.
 */
unsigned int read_usart_message(char* dst, UART_HandleTypeDef* huart, int max_len, char delimiter)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b086      	sub	sp, #24
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	60f8      	str	r0, [r7, #12]
 80051b8:	60b9      	str	r1, [r7, #8]
 80051ba:	607a      	str	r2, [r7, #4]
 80051bc:	70fb      	strb	r3, [r7, #3]
	USART_TypeDef* USARTx = huart->Instance;
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	613b      	str	r3, [r7, #16]
	if (usart_message_ready(USARTx,delimiter))
 80051c4:	78fb      	ldrb	r3, [r7, #3]
 80051c6:	4619      	mov	r1, r3
 80051c8:	6938      	ldr	r0, [r7, #16]
 80051ca:	f7ff ff9b 	bl	8005104 <usart_message_ready>
 80051ce:	4603      	mov	r3, r0
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d018      	beq.n	8005206 <read_usart_message+0x56>
	{
		int nr = 0;
 80051d4:	2300      	movs	r3, #0
 80051d6:	617b      	str	r3, [r7, #20]
		do
		{
			*dst = get_from_rx_buffer(USARTx);
 80051d8:	6938      	ldr	r0, [r7, #16]
 80051da:	f7ff ff59 	bl	8005090 <get_from_rx_buffer>
 80051de:	4603      	mov	r3, r0
 80051e0:	461a      	mov	r2, r3
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	701a      	strb	r2, [r3, #0]
			++nr;
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	3301      	adds	r3, #1
 80051ea:	617b      	str	r3, [r7, #20]
		} while (*dst++ != delimiter && nr < max_len);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	1c5a      	adds	r2, r3, #1
 80051f0:	60fa      	str	r2, [r7, #12]
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	78fa      	ldrb	r2, [r7, #3]
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d003      	beq.n	8005202 <read_usart_message+0x52>
 80051fa:	697a      	ldr	r2, [r7, #20]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	429a      	cmp	r2, r3
 8005200:	dbea      	blt.n	80051d8 <read_usart_message+0x28>

		return nr;
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	e000      	b.n	8005208 <read_usart_message+0x58>
	}
	return 0;
 8005206:	2300      	movs	r3, #0
}
 8005208:	4618      	mov	r0, r3
 800520a:	3718      	adds	r7, #24
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005210:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005248 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005214:	480d      	ldr	r0, [pc, #52]	; (800524c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005216:	490e      	ldr	r1, [pc, #56]	; (8005250 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005218:	4a0e      	ldr	r2, [pc, #56]	; (8005254 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800521a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800521c:	e002      	b.n	8005224 <LoopCopyDataInit>

0800521e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800521e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005220:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005222:	3304      	adds	r3, #4

08005224 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005224:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005226:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005228:	d3f9      	bcc.n	800521e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800522a:	4a0b      	ldr	r2, [pc, #44]	; (8005258 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800522c:	4c0b      	ldr	r4, [pc, #44]	; (800525c <LoopFillZerobss+0x26>)
  movs r3, #0
 800522e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005230:	e001      	b.n	8005236 <LoopFillZerobss>

08005232 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005232:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005234:	3204      	adds	r2, #4

08005236 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005236:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005238:	d3fb      	bcc.n	8005232 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800523a:	f7ff fe79 	bl	8004f30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800523e:	f004 f873 	bl	8009328 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005242:	f7fe fb87 	bl	8003954 <main>
  bx  lr    
 8005246:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005248:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800524c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005250:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8005254:	0800b634 	.word	0x0800b634
  ldr r2, =_sbss
 8005258:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 800525c:	2000604c 	.word	0x2000604c

08005260 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005260:	e7fe      	b.n	8005260 <ADC_IRQHandler>
	...

08005264 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005268:	4b0e      	ldr	r3, [pc, #56]	; (80052a4 <HAL_Init+0x40>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a0d      	ldr	r2, [pc, #52]	; (80052a4 <HAL_Init+0x40>)
 800526e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005272:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005274:	4b0b      	ldr	r3, [pc, #44]	; (80052a4 <HAL_Init+0x40>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a0a      	ldr	r2, [pc, #40]	; (80052a4 <HAL_Init+0x40>)
 800527a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800527e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005280:	4b08      	ldr	r3, [pc, #32]	; (80052a4 <HAL_Init+0x40>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a07      	ldr	r2, [pc, #28]	; (80052a4 <HAL_Init+0x40>)
 8005286:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800528a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800528c:	2003      	movs	r0, #3
 800528e:	f000 f94f 	bl	8005530 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005292:	2000      	movs	r0, #0
 8005294:	f000 f808 	bl	80052a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005298:	f7ff fae0 	bl	800485c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800529c:	2300      	movs	r3, #0
}
 800529e:	4618      	mov	r0, r3
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	40023c00 	.word	0x40023c00

080052a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b082      	sub	sp, #8
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80052b0:	4b12      	ldr	r3, [pc, #72]	; (80052fc <HAL_InitTick+0x54>)
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	4b12      	ldr	r3, [pc, #72]	; (8005300 <HAL_InitTick+0x58>)
 80052b6:	781b      	ldrb	r3, [r3, #0]
 80052b8:	4619      	mov	r1, r3
 80052ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80052be:	fbb3 f3f1 	udiv	r3, r3, r1
 80052c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80052c6:	4618      	mov	r0, r3
 80052c8:	f000 f967 	bl	800559a <HAL_SYSTICK_Config>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d001      	beq.n	80052d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e00e      	b.n	80052f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2b0f      	cmp	r3, #15
 80052da:	d80a      	bhi.n	80052f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80052dc:	2200      	movs	r2, #0
 80052de:	6879      	ldr	r1, [r7, #4]
 80052e0:	f04f 30ff 	mov.w	r0, #4294967295
 80052e4:	f000 f92f 	bl	8005546 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80052e8:	4a06      	ldr	r2, [pc, #24]	; (8005304 <HAL_InitTick+0x5c>)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80052ee:	2300      	movs	r3, #0
 80052f0:	e000      	b.n	80052f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3708      	adds	r7, #8
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}
 80052fc:	20000010 	.word	0x20000010
 8005300:	20000020 	.word	0x20000020
 8005304:	2000001c 	.word	0x2000001c

08005308 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005308:	b480      	push	{r7}
 800530a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800530c:	4b06      	ldr	r3, [pc, #24]	; (8005328 <HAL_IncTick+0x20>)
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	461a      	mov	r2, r3
 8005312:	4b06      	ldr	r3, [pc, #24]	; (800532c <HAL_IncTick+0x24>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4413      	add	r3, r2
 8005318:	4a04      	ldr	r2, [pc, #16]	; (800532c <HAL_IncTick+0x24>)
 800531a:	6013      	str	r3, [r2, #0]
}
 800531c:	bf00      	nop
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr
 8005326:	bf00      	nop
 8005328:	20000020 	.word	0x20000020
 800532c:	20006038 	.word	0x20006038

08005330 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005330:	b480      	push	{r7}
 8005332:	af00      	add	r7, sp, #0
  return uwTick;
 8005334:	4b03      	ldr	r3, [pc, #12]	; (8005344 <HAL_GetTick+0x14>)
 8005336:	681b      	ldr	r3, [r3, #0]
}
 8005338:	4618      	mov	r0, r3
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop
 8005344:	20006038 	.word	0x20006038

08005348 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005350:	f7ff ffee 	bl	8005330 <HAL_GetTick>
 8005354:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005360:	d005      	beq.n	800536e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005362:	4b0a      	ldr	r3, [pc, #40]	; (800538c <HAL_Delay+0x44>)
 8005364:	781b      	ldrb	r3, [r3, #0]
 8005366:	461a      	mov	r2, r3
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	4413      	add	r3, r2
 800536c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800536e:	bf00      	nop
 8005370:	f7ff ffde 	bl	8005330 <HAL_GetTick>
 8005374:	4602      	mov	r2, r0
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	68fa      	ldr	r2, [r7, #12]
 800537c:	429a      	cmp	r2, r3
 800537e:	d8f7      	bhi.n	8005370 <HAL_Delay+0x28>
  {
  }
}
 8005380:	bf00      	nop
 8005382:	bf00      	nop
 8005384:	3710      	adds	r7, #16
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
 800538a:	bf00      	nop
 800538c:	20000020 	.word	0x20000020

08005390 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005390:	b480      	push	{r7}
 8005392:	b085      	sub	sp, #20
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f003 0307 	and.w	r3, r3, #7
 800539e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80053a0:	4b0c      	ldr	r3, [pc, #48]	; (80053d4 <__NVIC_SetPriorityGrouping+0x44>)
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80053a6:	68ba      	ldr	r2, [r7, #8]
 80053a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80053ac:	4013      	ands	r3, r2
 80053ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80053b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80053bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80053c2:	4a04      	ldr	r2, [pc, #16]	; (80053d4 <__NVIC_SetPriorityGrouping+0x44>)
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	60d3      	str	r3, [r2, #12]
}
 80053c8:	bf00      	nop
 80053ca:	3714      	adds	r7, #20
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr
 80053d4:	e000ed00 	.word	0xe000ed00

080053d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80053d8:	b480      	push	{r7}
 80053da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80053dc:	4b04      	ldr	r3, [pc, #16]	; (80053f0 <__NVIC_GetPriorityGrouping+0x18>)
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	0a1b      	lsrs	r3, r3, #8
 80053e2:	f003 0307 	and.w	r3, r3, #7
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr
 80053f0:	e000ed00 	.word	0xe000ed00

080053f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	4603      	mov	r3, r0
 80053fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005402:	2b00      	cmp	r3, #0
 8005404:	db0b      	blt.n	800541e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005406:	79fb      	ldrb	r3, [r7, #7]
 8005408:	f003 021f 	and.w	r2, r3, #31
 800540c:	4907      	ldr	r1, [pc, #28]	; (800542c <__NVIC_EnableIRQ+0x38>)
 800540e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005412:	095b      	lsrs	r3, r3, #5
 8005414:	2001      	movs	r0, #1
 8005416:	fa00 f202 	lsl.w	r2, r0, r2
 800541a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800541e:	bf00      	nop
 8005420:	370c      	adds	r7, #12
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr
 800542a:	bf00      	nop
 800542c:	e000e100 	.word	0xe000e100

08005430 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005430:	b480      	push	{r7}
 8005432:	b083      	sub	sp, #12
 8005434:	af00      	add	r7, sp, #0
 8005436:	4603      	mov	r3, r0
 8005438:	6039      	str	r1, [r7, #0]
 800543a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800543c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005440:	2b00      	cmp	r3, #0
 8005442:	db0a      	blt.n	800545a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	b2da      	uxtb	r2, r3
 8005448:	490c      	ldr	r1, [pc, #48]	; (800547c <__NVIC_SetPriority+0x4c>)
 800544a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800544e:	0112      	lsls	r2, r2, #4
 8005450:	b2d2      	uxtb	r2, r2
 8005452:	440b      	add	r3, r1
 8005454:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005458:	e00a      	b.n	8005470 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	b2da      	uxtb	r2, r3
 800545e:	4908      	ldr	r1, [pc, #32]	; (8005480 <__NVIC_SetPriority+0x50>)
 8005460:	79fb      	ldrb	r3, [r7, #7]
 8005462:	f003 030f 	and.w	r3, r3, #15
 8005466:	3b04      	subs	r3, #4
 8005468:	0112      	lsls	r2, r2, #4
 800546a:	b2d2      	uxtb	r2, r2
 800546c:	440b      	add	r3, r1
 800546e:	761a      	strb	r2, [r3, #24]
}
 8005470:	bf00      	nop
 8005472:	370c      	adds	r7, #12
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr
 800547c:	e000e100 	.word	0xe000e100
 8005480:	e000ed00 	.word	0xe000ed00

08005484 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005484:	b480      	push	{r7}
 8005486:	b089      	sub	sp, #36	; 0x24
 8005488:	af00      	add	r7, sp, #0
 800548a:	60f8      	str	r0, [r7, #12]
 800548c:	60b9      	str	r1, [r7, #8]
 800548e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f003 0307 	and.w	r3, r3, #7
 8005496:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005498:	69fb      	ldr	r3, [r7, #28]
 800549a:	f1c3 0307 	rsb	r3, r3, #7
 800549e:	2b04      	cmp	r3, #4
 80054a0:	bf28      	it	cs
 80054a2:	2304      	movcs	r3, #4
 80054a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80054a6:	69fb      	ldr	r3, [r7, #28]
 80054a8:	3304      	adds	r3, #4
 80054aa:	2b06      	cmp	r3, #6
 80054ac:	d902      	bls.n	80054b4 <NVIC_EncodePriority+0x30>
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	3b03      	subs	r3, #3
 80054b2:	e000      	b.n	80054b6 <NVIC_EncodePriority+0x32>
 80054b4:	2300      	movs	r3, #0
 80054b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054b8:	f04f 32ff 	mov.w	r2, #4294967295
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	fa02 f303 	lsl.w	r3, r2, r3
 80054c2:	43da      	mvns	r2, r3
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	401a      	ands	r2, r3
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80054cc:	f04f 31ff 	mov.w	r1, #4294967295
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	fa01 f303 	lsl.w	r3, r1, r3
 80054d6:	43d9      	mvns	r1, r3
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054dc:	4313      	orrs	r3, r2
         );
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3724      	adds	r7, #36	; 0x24
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr
	...

080054ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b082      	sub	sp, #8
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	3b01      	subs	r3, #1
 80054f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80054fc:	d301      	bcc.n	8005502 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80054fe:	2301      	movs	r3, #1
 8005500:	e00f      	b.n	8005522 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005502:	4a0a      	ldr	r2, [pc, #40]	; (800552c <SysTick_Config+0x40>)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	3b01      	subs	r3, #1
 8005508:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800550a:	210f      	movs	r1, #15
 800550c:	f04f 30ff 	mov.w	r0, #4294967295
 8005510:	f7ff ff8e 	bl	8005430 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005514:	4b05      	ldr	r3, [pc, #20]	; (800552c <SysTick_Config+0x40>)
 8005516:	2200      	movs	r2, #0
 8005518:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800551a:	4b04      	ldr	r3, [pc, #16]	; (800552c <SysTick_Config+0x40>)
 800551c:	2207      	movs	r2, #7
 800551e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005520:	2300      	movs	r3, #0
}
 8005522:	4618      	mov	r0, r3
 8005524:	3708      	adds	r7, #8
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	e000e010 	.word	0xe000e010

08005530 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b082      	sub	sp, #8
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f7ff ff29 	bl	8005390 <__NVIC_SetPriorityGrouping>
}
 800553e:	bf00      	nop
 8005540:	3708      	adds	r7, #8
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}

08005546 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005546:	b580      	push	{r7, lr}
 8005548:	b086      	sub	sp, #24
 800554a:	af00      	add	r7, sp, #0
 800554c:	4603      	mov	r3, r0
 800554e:	60b9      	str	r1, [r7, #8]
 8005550:	607a      	str	r2, [r7, #4]
 8005552:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005554:	2300      	movs	r3, #0
 8005556:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005558:	f7ff ff3e 	bl	80053d8 <__NVIC_GetPriorityGrouping>
 800555c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	68b9      	ldr	r1, [r7, #8]
 8005562:	6978      	ldr	r0, [r7, #20]
 8005564:	f7ff ff8e 	bl	8005484 <NVIC_EncodePriority>
 8005568:	4602      	mov	r2, r0
 800556a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800556e:	4611      	mov	r1, r2
 8005570:	4618      	mov	r0, r3
 8005572:	f7ff ff5d 	bl	8005430 <__NVIC_SetPriority>
}
 8005576:	bf00      	nop
 8005578:	3718      	adds	r7, #24
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}

0800557e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800557e:	b580      	push	{r7, lr}
 8005580:	b082      	sub	sp, #8
 8005582:	af00      	add	r7, sp, #0
 8005584:	4603      	mov	r3, r0
 8005586:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800558c:	4618      	mov	r0, r3
 800558e:	f7ff ff31 	bl	80053f4 <__NVIC_EnableIRQ>
}
 8005592:	bf00      	nop
 8005594:	3708      	adds	r7, #8
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}

0800559a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800559a:	b580      	push	{r7, lr}
 800559c:	b082      	sub	sp, #8
 800559e:	af00      	add	r7, sp, #0
 80055a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f7ff ffa2 	bl	80054ec <SysTick_Config>
 80055a8:	4603      	mov	r3, r0
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3708      	adds	r7, #8
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}

080055b2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80055b2:	b580      	push	{r7, lr}
 80055b4:	b084      	sub	sp, #16
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055be:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80055c0:	f7ff feb6 	bl	8005330 <HAL_GetTick>
 80055c4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	2b02      	cmp	r3, #2
 80055d0:	d008      	beq.n	80055e4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2280      	movs	r2, #128	; 0x80
 80055d6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2200      	movs	r2, #0
 80055dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e052      	b.n	800568a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f022 0216 	bic.w	r2, r2, #22
 80055f2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	695a      	ldr	r2, [r3, #20]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005602:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005608:	2b00      	cmp	r3, #0
 800560a:	d103      	bne.n	8005614 <HAL_DMA_Abort+0x62>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005610:	2b00      	cmp	r3, #0
 8005612:	d007      	beq.n	8005624 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f022 0208 	bic.w	r2, r2, #8
 8005622:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f022 0201 	bic.w	r2, r2, #1
 8005632:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005634:	e013      	b.n	800565e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005636:	f7ff fe7b 	bl	8005330 <HAL_GetTick>
 800563a:	4602      	mov	r2, r0
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	1ad3      	subs	r3, r2, r3
 8005640:	2b05      	cmp	r3, #5
 8005642:	d90c      	bls.n	800565e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2220      	movs	r2, #32
 8005648:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2203      	movs	r2, #3
 800564e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800565a:	2303      	movs	r3, #3
 800565c:	e015      	b.n	800568a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 0301 	and.w	r3, r3, #1
 8005668:	2b00      	cmp	r3, #0
 800566a:	d1e4      	bne.n	8005636 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005670:	223f      	movs	r2, #63	; 0x3f
 8005672:	409a      	lsls	r2, r3
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2201      	movs	r2, #1
 800567c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005688:	2300      	movs	r3, #0
}
 800568a:	4618      	mov	r0, r3
 800568c:	3710      	adds	r7, #16
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}

08005692 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005692:	b480      	push	{r7}
 8005694:	b083      	sub	sp, #12
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	2b02      	cmp	r3, #2
 80056a4:	d004      	beq.n	80056b0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2280      	movs	r2, #128	; 0x80
 80056aa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	e00c      	b.n	80056ca <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2205      	movs	r2, #5
 80056b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f022 0201 	bic.w	r2, r2, #1
 80056c6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80056c8:	2300      	movs	r3, #0
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	370c      	adds	r7, #12
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr
	...

080056d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80056d8:	b480      	push	{r7}
 80056da:	b089      	sub	sp, #36	; 0x24
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80056e2:	2300      	movs	r3, #0
 80056e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80056e6:	2300      	movs	r3, #0
 80056e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80056ea:	2300      	movs	r3, #0
 80056ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80056ee:	2300      	movs	r3, #0
 80056f0:	61fb      	str	r3, [r7, #28]
 80056f2:	e16b      	b.n	80059cc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80056f4:	2201      	movs	r2, #1
 80056f6:	69fb      	ldr	r3, [r7, #28]
 80056f8:	fa02 f303 	lsl.w	r3, r2, r3
 80056fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	697a      	ldr	r2, [r7, #20]
 8005704:	4013      	ands	r3, r2
 8005706:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005708:	693a      	ldr	r2, [r7, #16]
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	429a      	cmp	r2, r3
 800570e:	f040 815a 	bne.w	80059c6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	f003 0303 	and.w	r3, r3, #3
 800571a:	2b01      	cmp	r3, #1
 800571c:	d005      	beq.n	800572a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005726:	2b02      	cmp	r3, #2
 8005728:	d130      	bne.n	800578c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005730:	69fb      	ldr	r3, [r7, #28]
 8005732:	005b      	lsls	r3, r3, #1
 8005734:	2203      	movs	r2, #3
 8005736:	fa02 f303 	lsl.w	r3, r2, r3
 800573a:	43db      	mvns	r3, r3
 800573c:	69ba      	ldr	r2, [r7, #24]
 800573e:	4013      	ands	r3, r2
 8005740:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	68da      	ldr	r2, [r3, #12]
 8005746:	69fb      	ldr	r3, [r7, #28]
 8005748:	005b      	lsls	r3, r3, #1
 800574a:	fa02 f303 	lsl.w	r3, r2, r3
 800574e:	69ba      	ldr	r2, [r7, #24]
 8005750:	4313      	orrs	r3, r2
 8005752:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	69ba      	ldr	r2, [r7, #24]
 8005758:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005760:	2201      	movs	r2, #1
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	fa02 f303 	lsl.w	r3, r2, r3
 8005768:	43db      	mvns	r3, r3
 800576a:	69ba      	ldr	r2, [r7, #24]
 800576c:	4013      	ands	r3, r2
 800576e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	091b      	lsrs	r3, r3, #4
 8005776:	f003 0201 	and.w	r2, r3, #1
 800577a:	69fb      	ldr	r3, [r7, #28]
 800577c:	fa02 f303 	lsl.w	r3, r2, r3
 8005780:	69ba      	ldr	r2, [r7, #24]
 8005782:	4313      	orrs	r3, r2
 8005784:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	69ba      	ldr	r2, [r7, #24]
 800578a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	f003 0303 	and.w	r3, r3, #3
 8005794:	2b03      	cmp	r3, #3
 8005796:	d017      	beq.n	80057c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	005b      	lsls	r3, r3, #1
 80057a2:	2203      	movs	r2, #3
 80057a4:	fa02 f303 	lsl.w	r3, r2, r3
 80057a8:	43db      	mvns	r3, r3
 80057aa:	69ba      	ldr	r2, [r7, #24]
 80057ac:	4013      	ands	r3, r2
 80057ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	689a      	ldr	r2, [r3, #8]
 80057b4:	69fb      	ldr	r3, [r7, #28]
 80057b6:	005b      	lsls	r3, r3, #1
 80057b8:	fa02 f303 	lsl.w	r3, r2, r3
 80057bc:	69ba      	ldr	r2, [r7, #24]
 80057be:	4313      	orrs	r3, r2
 80057c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	69ba      	ldr	r2, [r7, #24]
 80057c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	f003 0303 	and.w	r3, r3, #3
 80057d0:	2b02      	cmp	r3, #2
 80057d2:	d123      	bne.n	800581c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	08da      	lsrs	r2, r3, #3
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	3208      	adds	r2, #8
 80057dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	f003 0307 	and.w	r3, r3, #7
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	220f      	movs	r2, #15
 80057ec:	fa02 f303 	lsl.w	r3, r2, r3
 80057f0:	43db      	mvns	r3, r3
 80057f2:	69ba      	ldr	r2, [r7, #24]
 80057f4:	4013      	ands	r3, r2
 80057f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	691a      	ldr	r2, [r3, #16]
 80057fc:	69fb      	ldr	r3, [r7, #28]
 80057fe:	f003 0307 	and.w	r3, r3, #7
 8005802:	009b      	lsls	r3, r3, #2
 8005804:	fa02 f303 	lsl.w	r3, r2, r3
 8005808:	69ba      	ldr	r2, [r7, #24]
 800580a:	4313      	orrs	r3, r2
 800580c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	08da      	lsrs	r2, r3, #3
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	3208      	adds	r2, #8
 8005816:	69b9      	ldr	r1, [r7, #24]
 8005818:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005822:	69fb      	ldr	r3, [r7, #28]
 8005824:	005b      	lsls	r3, r3, #1
 8005826:	2203      	movs	r2, #3
 8005828:	fa02 f303 	lsl.w	r3, r2, r3
 800582c:	43db      	mvns	r3, r3
 800582e:	69ba      	ldr	r2, [r7, #24]
 8005830:	4013      	ands	r3, r2
 8005832:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	f003 0203 	and.w	r2, r3, #3
 800583c:	69fb      	ldr	r3, [r7, #28]
 800583e:	005b      	lsls	r3, r3, #1
 8005840:	fa02 f303 	lsl.w	r3, r2, r3
 8005844:	69ba      	ldr	r2, [r7, #24]
 8005846:	4313      	orrs	r3, r2
 8005848:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	69ba      	ldr	r2, [r7, #24]
 800584e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005858:	2b00      	cmp	r3, #0
 800585a:	f000 80b4 	beq.w	80059c6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800585e:	2300      	movs	r3, #0
 8005860:	60fb      	str	r3, [r7, #12]
 8005862:	4b60      	ldr	r3, [pc, #384]	; (80059e4 <HAL_GPIO_Init+0x30c>)
 8005864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005866:	4a5f      	ldr	r2, [pc, #380]	; (80059e4 <HAL_GPIO_Init+0x30c>)
 8005868:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800586c:	6453      	str	r3, [r2, #68]	; 0x44
 800586e:	4b5d      	ldr	r3, [pc, #372]	; (80059e4 <HAL_GPIO_Init+0x30c>)
 8005870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005872:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005876:	60fb      	str	r3, [r7, #12]
 8005878:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800587a:	4a5b      	ldr	r2, [pc, #364]	; (80059e8 <HAL_GPIO_Init+0x310>)
 800587c:	69fb      	ldr	r3, [r7, #28]
 800587e:	089b      	lsrs	r3, r3, #2
 8005880:	3302      	adds	r3, #2
 8005882:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005886:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005888:	69fb      	ldr	r3, [r7, #28]
 800588a:	f003 0303 	and.w	r3, r3, #3
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	220f      	movs	r2, #15
 8005892:	fa02 f303 	lsl.w	r3, r2, r3
 8005896:	43db      	mvns	r3, r3
 8005898:	69ba      	ldr	r2, [r7, #24]
 800589a:	4013      	ands	r3, r2
 800589c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4a52      	ldr	r2, [pc, #328]	; (80059ec <HAL_GPIO_Init+0x314>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d02b      	beq.n	80058fe <HAL_GPIO_Init+0x226>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4a51      	ldr	r2, [pc, #324]	; (80059f0 <HAL_GPIO_Init+0x318>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d025      	beq.n	80058fa <HAL_GPIO_Init+0x222>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4a50      	ldr	r2, [pc, #320]	; (80059f4 <HAL_GPIO_Init+0x31c>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d01f      	beq.n	80058f6 <HAL_GPIO_Init+0x21e>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4a4f      	ldr	r2, [pc, #316]	; (80059f8 <HAL_GPIO_Init+0x320>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d019      	beq.n	80058f2 <HAL_GPIO_Init+0x21a>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4a4e      	ldr	r2, [pc, #312]	; (80059fc <HAL_GPIO_Init+0x324>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d013      	beq.n	80058ee <HAL_GPIO_Init+0x216>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a4d      	ldr	r2, [pc, #308]	; (8005a00 <HAL_GPIO_Init+0x328>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d00d      	beq.n	80058ea <HAL_GPIO_Init+0x212>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4a4c      	ldr	r2, [pc, #304]	; (8005a04 <HAL_GPIO_Init+0x32c>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d007      	beq.n	80058e6 <HAL_GPIO_Init+0x20e>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4a4b      	ldr	r2, [pc, #300]	; (8005a08 <HAL_GPIO_Init+0x330>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d101      	bne.n	80058e2 <HAL_GPIO_Init+0x20a>
 80058de:	2307      	movs	r3, #7
 80058e0:	e00e      	b.n	8005900 <HAL_GPIO_Init+0x228>
 80058e2:	2308      	movs	r3, #8
 80058e4:	e00c      	b.n	8005900 <HAL_GPIO_Init+0x228>
 80058e6:	2306      	movs	r3, #6
 80058e8:	e00a      	b.n	8005900 <HAL_GPIO_Init+0x228>
 80058ea:	2305      	movs	r3, #5
 80058ec:	e008      	b.n	8005900 <HAL_GPIO_Init+0x228>
 80058ee:	2304      	movs	r3, #4
 80058f0:	e006      	b.n	8005900 <HAL_GPIO_Init+0x228>
 80058f2:	2303      	movs	r3, #3
 80058f4:	e004      	b.n	8005900 <HAL_GPIO_Init+0x228>
 80058f6:	2302      	movs	r3, #2
 80058f8:	e002      	b.n	8005900 <HAL_GPIO_Init+0x228>
 80058fa:	2301      	movs	r3, #1
 80058fc:	e000      	b.n	8005900 <HAL_GPIO_Init+0x228>
 80058fe:	2300      	movs	r3, #0
 8005900:	69fa      	ldr	r2, [r7, #28]
 8005902:	f002 0203 	and.w	r2, r2, #3
 8005906:	0092      	lsls	r2, r2, #2
 8005908:	4093      	lsls	r3, r2
 800590a:	69ba      	ldr	r2, [r7, #24]
 800590c:	4313      	orrs	r3, r2
 800590e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005910:	4935      	ldr	r1, [pc, #212]	; (80059e8 <HAL_GPIO_Init+0x310>)
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	089b      	lsrs	r3, r3, #2
 8005916:	3302      	adds	r3, #2
 8005918:	69ba      	ldr	r2, [r7, #24]
 800591a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800591e:	4b3b      	ldr	r3, [pc, #236]	; (8005a0c <HAL_GPIO_Init+0x334>)
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	43db      	mvns	r3, r3
 8005928:	69ba      	ldr	r2, [r7, #24]
 800592a:	4013      	ands	r3, r2
 800592c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005936:	2b00      	cmp	r3, #0
 8005938:	d003      	beq.n	8005942 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800593a:	69ba      	ldr	r2, [r7, #24]
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	4313      	orrs	r3, r2
 8005940:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005942:	4a32      	ldr	r2, [pc, #200]	; (8005a0c <HAL_GPIO_Init+0x334>)
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005948:	4b30      	ldr	r3, [pc, #192]	; (8005a0c <HAL_GPIO_Init+0x334>)
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	43db      	mvns	r3, r3
 8005952:	69ba      	ldr	r2, [r7, #24]
 8005954:	4013      	ands	r3, r2
 8005956:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005960:	2b00      	cmp	r3, #0
 8005962:	d003      	beq.n	800596c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005964:	69ba      	ldr	r2, [r7, #24]
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	4313      	orrs	r3, r2
 800596a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800596c:	4a27      	ldr	r2, [pc, #156]	; (8005a0c <HAL_GPIO_Init+0x334>)
 800596e:	69bb      	ldr	r3, [r7, #24]
 8005970:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005972:	4b26      	ldr	r3, [pc, #152]	; (8005a0c <HAL_GPIO_Init+0x334>)
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	43db      	mvns	r3, r3
 800597c:	69ba      	ldr	r2, [r7, #24]
 800597e:	4013      	ands	r3, r2
 8005980:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800598a:	2b00      	cmp	r3, #0
 800598c:	d003      	beq.n	8005996 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800598e:	69ba      	ldr	r2, [r7, #24]
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	4313      	orrs	r3, r2
 8005994:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005996:	4a1d      	ldr	r2, [pc, #116]	; (8005a0c <HAL_GPIO_Init+0x334>)
 8005998:	69bb      	ldr	r3, [r7, #24]
 800599a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800599c:	4b1b      	ldr	r3, [pc, #108]	; (8005a0c <HAL_GPIO_Init+0x334>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	43db      	mvns	r3, r3
 80059a6:	69ba      	ldr	r2, [r7, #24]
 80059a8:	4013      	ands	r3, r2
 80059aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d003      	beq.n	80059c0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80059b8:	69ba      	ldr	r2, [r7, #24]
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	4313      	orrs	r3, r2
 80059be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80059c0:	4a12      	ldr	r2, [pc, #72]	; (8005a0c <HAL_GPIO_Init+0x334>)
 80059c2:	69bb      	ldr	r3, [r7, #24]
 80059c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	3301      	adds	r3, #1
 80059ca:	61fb      	str	r3, [r7, #28]
 80059cc:	69fb      	ldr	r3, [r7, #28]
 80059ce:	2b0f      	cmp	r3, #15
 80059d0:	f67f ae90 	bls.w	80056f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80059d4:	bf00      	nop
 80059d6:	bf00      	nop
 80059d8:	3724      	adds	r7, #36	; 0x24
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr
 80059e2:	bf00      	nop
 80059e4:	40023800 	.word	0x40023800
 80059e8:	40013800 	.word	0x40013800
 80059ec:	40020000 	.word	0x40020000
 80059f0:	40020400 	.word	0x40020400
 80059f4:	40020800 	.word	0x40020800
 80059f8:	40020c00 	.word	0x40020c00
 80059fc:	40021000 	.word	0x40021000
 8005a00:	40021400 	.word	0x40021400
 8005a04:	40021800 	.word	0x40021800
 8005a08:	40021c00 	.word	0x40021c00
 8005a0c:	40013c00 	.word	0x40013c00

08005a10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b083      	sub	sp, #12
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	460b      	mov	r3, r1
 8005a1a:	807b      	strh	r3, [r7, #2]
 8005a1c:	4613      	mov	r3, r2
 8005a1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005a20:	787b      	ldrb	r3, [r7, #1]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d003      	beq.n	8005a2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005a26:	887a      	ldrh	r2, [r7, #2]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005a2c:	e003      	b.n	8005a36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005a2e:	887b      	ldrh	r3, [r7, #2]
 8005a30:	041a      	lsls	r2, r3, #16
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	619a      	str	r2, [r3, #24]
}
 8005a36:	bf00      	nop
 8005a38:	370c      	adds	r7, #12
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr
	...

08005a44 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b082      	sub	sp, #8
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005a4e:	4b08      	ldr	r3, [pc, #32]	; (8005a70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005a50:	695a      	ldr	r2, [r3, #20]
 8005a52:	88fb      	ldrh	r3, [r7, #6]
 8005a54:	4013      	ands	r3, r2
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d006      	beq.n	8005a68 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005a5a:	4a05      	ldr	r2, [pc, #20]	; (8005a70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005a5c:	88fb      	ldrh	r3, [r7, #6]
 8005a5e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005a60:	88fb      	ldrh	r3, [r7, #6]
 8005a62:	4618      	mov	r0, r3
 8005a64:	f7fb ff4e 	bl	8001904 <HAL_GPIO_EXTI_Callback>
  }
}
 8005a68:	bf00      	nop
 8005a6a:	3708      	adds	r7, #8
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}
 8005a70:	40013c00 	.word	0x40013c00

08005a74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b084      	sub	sp, #16
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d101      	bne.n	8005a86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	e12b      	b.n	8005cde <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d106      	bne.n	8005aa0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f7fe ff06 	bl	80048ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2224      	movs	r2, #36	; 0x24
 8005aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f022 0201 	bic.w	r2, r2, #1
 8005ab6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ac6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005ad6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005ad8:	f001 fd56 	bl	8007588 <HAL_RCC_GetPCLK1Freq>
 8005adc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	4a81      	ldr	r2, [pc, #516]	; (8005ce8 <HAL_I2C_Init+0x274>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d807      	bhi.n	8005af8 <HAL_I2C_Init+0x84>
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	4a80      	ldr	r2, [pc, #512]	; (8005cec <HAL_I2C_Init+0x278>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	bf94      	ite	ls
 8005af0:	2301      	movls	r3, #1
 8005af2:	2300      	movhi	r3, #0
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	e006      	b.n	8005b06 <HAL_I2C_Init+0x92>
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	4a7d      	ldr	r2, [pc, #500]	; (8005cf0 <HAL_I2C_Init+0x27c>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	bf94      	ite	ls
 8005b00:	2301      	movls	r3, #1
 8005b02:	2300      	movhi	r3, #0
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d001      	beq.n	8005b0e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e0e7      	b.n	8005cde <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	4a78      	ldr	r2, [pc, #480]	; (8005cf4 <HAL_I2C_Init+0x280>)
 8005b12:	fba2 2303 	umull	r2, r3, r2, r3
 8005b16:	0c9b      	lsrs	r3, r3, #18
 8005b18:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	68ba      	ldr	r2, [r7, #8]
 8005b2a:	430a      	orrs	r2, r1
 8005b2c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	6a1b      	ldr	r3, [r3, #32]
 8005b34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	4a6a      	ldr	r2, [pc, #424]	; (8005ce8 <HAL_I2C_Init+0x274>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d802      	bhi.n	8005b48 <HAL_I2C_Init+0xd4>
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	3301      	adds	r3, #1
 8005b46:	e009      	b.n	8005b5c <HAL_I2C_Init+0xe8>
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005b4e:	fb02 f303 	mul.w	r3, r2, r3
 8005b52:	4a69      	ldr	r2, [pc, #420]	; (8005cf8 <HAL_I2C_Init+0x284>)
 8005b54:	fba2 2303 	umull	r2, r3, r2, r3
 8005b58:	099b      	lsrs	r3, r3, #6
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	687a      	ldr	r2, [r7, #4]
 8005b5e:	6812      	ldr	r2, [r2, #0]
 8005b60:	430b      	orrs	r3, r1
 8005b62:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	69db      	ldr	r3, [r3, #28]
 8005b6a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005b6e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	495c      	ldr	r1, [pc, #368]	; (8005ce8 <HAL_I2C_Init+0x274>)
 8005b78:	428b      	cmp	r3, r1
 8005b7a:	d819      	bhi.n	8005bb0 <HAL_I2C_Init+0x13c>
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	1e59      	subs	r1, r3, #1
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	005b      	lsls	r3, r3, #1
 8005b86:	fbb1 f3f3 	udiv	r3, r1, r3
 8005b8a:	1c59      	adds	r1, r3, #1
 8005b8c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005b90:	400b      	ands	r3, r1
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d00a      	beq.n	8005bac <HAL_I2C_Init+0x138>
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	1e59      	subs	r1, r3, #1
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	005b      	lsls	r3, r3, #1
 8005ba0:	fbb1 f3f3 	udiv	r3, r1, r3
 8005ba4:	3301      	adds	r3, #1
 8005ba6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005baa:	e051      	b.n	8005c50 <HAL_I2C_Init+0x1dc>
 8005bac:	2304      	movs	r3, #4
 8005bae:	e04f      	b.n	8005c50 <HAL_I2C_Init+0x1dc>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d111      	bne.n	8005bdc <HAL_I2C_Init+0x168>
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	1e58      	subs	r0, r3, #1
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6859      	ldr	r1, [r3, #4]
 8005bc0:	460b      	mov	r3, r1
 8005bc2:	005b      	lsls	r3, r3, #1
 8005bc4:	440b      	add	r3, r1
 8005bc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8005bca:	3301      	adds	r3, #1
 8005bcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	bf0c      	ite	eq
 8005bd4:	2301      	moveq	r3, #1
 8005bd6:	2300      	movne	r3, #0
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	e012      	b.n	8005c02 <HAL_I2C_Init+0x18e>
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	1e58      	subs	r0, r3, #1
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6859      	ldr	r1, [r3, #4]
 8005be4:	460b      	mov	r3, r1
 8005be6:	009b      	lsls	r3, r3, #2
 8005be8:	440b      	add	r3, r1
 8005bea:	0099      	lsls	r1, r3, #2
 8005bec:	440b      	add	r3, r1
 8005bee:	fbb0 f3f3 	udiv	r3, r0, r3
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	bf0c      	ite	eq
 8005bfc:	2301      	moveq	r3, #1
 8005bfe:	2300      	movne	r3, #0
 8005c00:	b2db      	uxtb	r3, r3
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d001      	beq.n	8005c0a <HAL_I2C_Init+0x196>
 8005c06:	2301      	movs	r3, #1
 8005c08:	e022      	b.n	8005c50 <HAL_I2C_Init+0x1dc>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d10e      	bne.n	8005c30 <HAL_I2C_Init+0x1bc>
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	1e58      	subs	r0, r3, #1
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6859      	ldr	r1, [r3, #4]
 8005c1a:	460b      	mov	r3, r1
 8005c1c:	005b      	lsls	r3, r3, #1
 8005c1e:	440b      	add	r3, r1
 8005c20:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c24:	3301      	adds	r3, #1
 8005c26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c2e:	e00f      	b.n	8005c50 <HAL_I2C_Init+0x1dc>
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	1e58      	subs	r0, r3, #1
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6859      	ldr	r1, [r3, #4]
 8005c38:	460b      	mov	r3, r1
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	440b      	add	r3, r1
 8005c3e:	0099      	lsls	r1, r3, #2
 8005c40:	440b      	add	r3, r1
 8005c42:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c46:	3301      	adds	r3, #1
 8005c48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c50:	6879      	ldr	r1, [r7, #4]
 8005c52:	6809      	ldr	r1, [r1, #0]
 8005c54:	4313      	orrs	r3, r2
 8005c56:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	69da      	ldr	r2, [r3, #28]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6a1b      	ldr	r3, [r3, #32]
 8005c6a:	431a      	orrs	r2, r3
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	430a      	orrs	r2, r1
 8005c72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005c7e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005c82:	687a      	ldr	r2, [r7, #4]
 8005c84:	6911      	ldr	r1, [r2, #16]
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	68d2      	ldr	r2, [r2, #12]
 8005c8a:	4311      	orrs	r1, r2
 8005c8c:	687a      	ldr	r2, [r7, #4]
 8005c8e:	6812      	ldr	r2, [r2, #0]
 8005c90:	430b      	orrs	r3, r1
 8005c92:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	68db      	ldr	r3, [r3, #12]
 8005c9a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	695a      	ldr	r2, [r3, #20]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	699b      	ldr	r3, [r3, #24]
 8005ca6:	431a      	orrs	r2, r3
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	430a      	orrs	r2, r1
 8005cae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f042 0201 	orr.w	r2, r2, #1
 8005cbe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2220      	movs	r2, #32
 8005cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005cdc:	2300      	movs	r3, #0
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3710      	adds	r7, #16
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
 8005ce6:	bf00      	nop
 8005ce8:	000186a0 	.word	0x000186a0
 8005cec:	001e847f 	.word	0x001e847f
 8005cf0:	003d08ff 	.word	0x003d08ff
 8005cf4:	431bde83 	.word	0x431bde83
 8005cf8:	10624dd3 	.word	0x10624dd3

08005cfc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b088      	sub	sp, #32
 8005d00:	af02      	add	r7, sp, #8
 8005d02:	60f8      	str	r0, [r7, #12]
 8005d04:	607a      	str	r2, [r7, #4]
 8005d06:	461a      	mov	r2, r3
 8005d08:	460b      	mov	r3, r1
 8005d0a:	817b      	strh	r3, [r7, #10]
 8005d0c:	4613      	mov	r3, r2
 8005d0e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005d10:	f7ff fb0e 	bl	8005330 <HAL_GetTick>
 8005d14:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	2b20      	cmp	r3, #32
 8005d20:	f040 80e0 	bne.w	8005ee4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	9300      	str	r3, [sp, #0]
 8005d28:	2319      	movs	r3, #25
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	4970      	ldr	r1, [pc, #448]	; (8005ef0 <HAL_I2C_Master_Transmit+0x1f4>)
 8005d2e:	68f8      	ldr	r0, [r7, #12]
 8005d30:	f000 fe02 	bl	8006938 <I2C_WaitOnFlagUntilTimeout>
 8005d34:	4603      	mov	r3, r0
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d001      	beq.n	8005d3e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005d3a:	2302      	movs	r3, #2
 8005d3c:	e0d3      	b.n	8005ee6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d101      	bne.n	8005d4c <HAL_I2C_Master_Transmit+0x50>
 8005d48:	2302      	movs	r3, #2
 8005d4a:	e0cc      	b.n	8005ee6 <HAL_I2C_Master_Transmit+0x1ea>
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f003 0301 	and.w	r3, r3, #1
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d007      	beq.n	8005d72 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f042 0201 	orr.w	r2, r2, #1
 8005d70:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d80:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2221      	movs	r2, #33	; 0x21
 8005d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2210      	movs	r2, #16
 8005d8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2200      	movs	r2, #0
 8005d96:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	893a      	ldrh	r2, [r7, #8]
 8005da2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005da8:	b29a      	uxth	r2, r3
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	4a50      	ldr	r2, [pc, #320]	; (8005ef4 <HAL_I2C_Master_Transmit+0x1f8>)
 8005db2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005db4:	8979      	ldrh	r1, [r7, #10]
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	6a3a      	ldr	r2, [r7, #32]
 8005dba:	68f8      	ldr	r0, [r7, #12]
 8005dbc:	f000 fbbc 	bl	8006538 <I2C_MasterRequestWrite>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d001      	beq.n	8005dca <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e08d      	b.n	8005ee6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dca:	2300      	movs	r3, #0
 8005dcc:	613b      	str	r3, [r7, #16]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	695b      	ldr	r3, [r3, #20]
 8005dd4:	613b      	str	r3, [r7, #16]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	699b      	ldr	r3, [r3, #24]
 8005ddc:	613b      	str	r3, [r7, #16]
 8005dde:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005de0:	e066      	b.n	8005eb0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005de2:	697a      	ldr	r2, [r7, #20]
 8005de4:	6a39      	ldr	r1, [r7, #32]
 8005de6:	68f8      	ldr	r0, [r7, #12]
 8005de8:	f000 fe7c 	bl	8006ae4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005dec:	4603      	mov	r3, r0
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d00d      	beq.n	8005e0e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df6:	2b04      	cmp	r3, #4
 8005df8:	d107      	bne.n	8005e0a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e08:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e06b      	b.n	8005ee6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e12:	781a      	ldrb	r2, [r3, #0]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e1e:	1c5a      	adds	r2, r3, #1
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	3b01      	subs	r3, #1
 8005e2c:	b29a      	uxth	r2, r3
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e36:	3b01      	subs	r3, #1
 8005e38:	b29a      	uxth	r2, r3
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	695b      	ldr	r3, [r3, #20]
 8005e44:	f003 0304 	and.w	r3, r3, #4
 8005e48:	2b04      	cmp	r3, #4
 8005e4a:	d11b      	bne.n	8005e84 <HAL_I2C_Master_Transmit+0x188>
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d017      	beq.n	8005e84 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e58:	781a      	ldrb	r2, [r3, #0]
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e64:	1c5a      	adds	r2, r3, #1
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	3b01      	subs	r3, #1
 8005e72:	b29a      	uxth	r2, r3
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e7c:	3b01      	subs	r3, #1
 8005e7e:	b29a      	uxth	r2, r3
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e84:	697a      	ldr	r2, [r7, #20]
 8005e86:	6a39      	ldr	r1, [r7, #32]
 8005e88:	68f8      	ldr	r0, [r7, #12]
 8005e8a:	f000 fe6c 	bl	8006b66 <I2C_WaitOnBTFFlagUntilTimeout>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d00d      	beq.n	8005eb0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e98:	2b04      	cmp	r3, #4
 8005e9a:	d107      	bne.n	8005eac <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005eaa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005eac:	2301      	movs	r3, #1
 8005eae:	e01a      	b.n	8005ee6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d194      	bne.n	8005de2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ec6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2220      	movs	r2, #32
 8005ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2200      	movs	r2, #0
 8005edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	e000      	b.n	8005ee6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005ee4:	2302      	movs	r3, #2
  }
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3718      	adds	r7, #24
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	bf00      	nop
 8005ef0:	00100002 	.word	0x00100002
 8005ef4:	ffff0000 	.word	0xffff0000

08005ef8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b088      	sub	sp, #32
 8005efc:	af02      	add	r7, sp, #8
 8005efe:	60f8      	str	r0, [r7, #12]
 8005f00:	4608      	mov	r0, r1
 8005f02:	4611      	mov	r1, r2
 8005f04:	461a      	mov	r2, r3
 8005f06:	4603      	mov	r3, r0
 8005f08:	817b      	strh	r3, [r7, #10]
 8005f0a:	460b      	mov	r3, r1
 8005f0c:	813b      	strh	r3, [r7, #8]
 8005f0e:	4613      	mov	r3, r2
 8005f10:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005f12:	f7ff fa0d 	bl	8005330 <HAL_GetTick>
 8005f16:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f1e:	b2db      	uxtb	r3, r3
 8005f20:	2b20      	cmp	r3, #32
 8005f22:	f040 80d9 	bne.w	80060d8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	9300      	str	r3, [sp, #0]
 8005f2a:	2319      	movs	r3, #25
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	496d      	ldr	r1, [pc, #436]	; (80060e4 <HAL_I2C_Mem_Write+0x1ec>)
 8005f30:	68f8      	ldr	r0, [r7, #12]
 8005f32:	f000 fd01 	bl	8006938 <I2C_WaitOnFlagUntilTimeout>
 8005f36:	4603      	mov	r3, r0
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d001      	beq.n	8005f40 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005f3c:	2302      	movs	r3, #2
 8005f3e:	e0cc      	b.n	80060da <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d101      	bne.n	8005f4e <HAL_I2C_Mem_Write+0x56>
 8005f4a:	2302      	movs	r3, #2
 8005f4c:	e0c5      	b.n	80060da <HAL_I2C_Mem_Write+0x1e2>
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2201      	movs	r2, #1
 8005f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 0301 	and.w	r3, r3, #1
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d007      	beq.n	8005f74 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	681a      	ldr	r2, [r3, #0]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f042 0201 	orr.w	r2, r2, #1
 8005f72:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f82:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2221      	movs	r2, #33	; 0x21
 8005f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2240      	movs	r2, #64	; 0x40
 8005f90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2200      	movs	r2, #0
 8005f98:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	6a3a      	ldr	r2, [r7, #32]
 8005f9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005fa4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005faa:	b29a      	uxth	r2, r3
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	4a4d      	ldr	r2, [pc, #308]	; (80060e8 <HAL_I2C_Mem_Write+0x1f0>)
 8005fb4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005fb6:	88f8      	ldrh	r0, [r7, #6]
 8005fb8:	893a      	ldrh	r2, [r7, #8]
 8005fba:	8979      	ldrh	r1, [r7, #10]
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	9301      	str	r3, [sp, #4]
 8005fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc2:	9300      	str	r3, [sp, #0]
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	68f8      	ldr	r0, [r7, #12]
 8005fc8:	f000 fb38 	bl	800663c <I2C_RequestMemoryWrite>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d052      	beq.n	8006078 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e081      	b.n	80060da <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005fd6:	697a      	ldr	r2, [r7, #20]
 8005fd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005fda:	68f8      	ldr	r0, [r7, #12]
 8005fdc:	f000 fd82 	bl	8006ae4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d00d      	beq.n	8006002 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fea:	2b04      	cmp	r3, #4
 8005fec:	d107      	bne.n	8005ffe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	681a      	ldr	r2, [r3, #0]
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ffc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	e06b      	b.n	80060da <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006006:	781a      	ldrb	r2, [r3, #0]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006012:	1c5a      	adds	r2, r3, #1
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800601c:	3b01      	subs	r3, #1
 800601e:	b29a      	uxth	r2, r3
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006028:	b29b      	uxth	r3, r3
 800602a:	3b01      	subs	r3, #1
 800602c:	b29a      	uxth	r2, r3
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	695b      	ldr	r3, [r3, #20]
 8006038:	f003 0304 	and.w	r3, r3, #4
 800603c:	2b04      	cmp	r3, #4
 800603e:	d11b      	bne.n	8006078 <HAL_I2C_Mem_Write+0x180>
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006044:	2b00      	cmp	r3, #0
 8006046:	d017      	beq.n	8006078 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800604c:	781a      	ldrb	r2, [r3, #0]
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006058:	1c5a      	adds	r2, r3, #1
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006062:	3b01      	subs	r3, #1
 8006064:	b29a      	uxth	r2, r3
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800606e:	b29b      	uxth	r3, r3
 8006070:	3b01      	subs	r3, #1
 8006072:	b29a      	uxth	r2, r3
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800607c:	2b00      	cmp	r3, #0
 800607e:	d1aa      	bne.n	8005fd6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006080:	697a      	ldr	r2, [r7, #20]
 8006082:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006084:	68f8      	ldr	r0, [r7, #12]
 8006086:	f000 fd6e 	bl	8006b66 <I2C_WaitOnBTFFlagUntilTimeout>
 800608a:	4603      	mov	r3, r0
 800608c:	2b00      	cmp	r3, #0
 800608e:	d00d      	beq.n	80060ac <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006094:	2b04      	cmp	r3, #4
 8006096:	d107      	bne.n	80060a8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060a6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80060a8:	2301      	movs	r3, #1
 80060aa:	e016      	b.n	80060da <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2220      	movs	r2, #32
 80060c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2200      	movs	r2, #0
 80060c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2200      	movs	r2, #0
 80060d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80060d4:	2300      	movs	r3, #0
 80060d6:	e000      	b.n	80060da <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80060d8:	2302      	movs	r3, #2
  }
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3718      	adds	r7, #24
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}
 80060e2:	bf00      	nop
 80060e4:	00100002 	.word	0x00100002
 80060e8:	ffff0000 	.word	0xffff0000

080060ec <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b08c      	sub	sp, #48	; 0x30
 80060f0:	af02      	add	r7, sp, #8
 80060f2:	60f8      	str	r0, [r7, #12]
 80060f4:	4608      	mov	r0, r1
 80060f6:	4611      	mov	r1, r2
 80060f8:	461a      	mov	r2, r3
 80060fa:	4603      	mov	r3, r0
 80060fc:	817b      	strh	r3, [r7, #10]
 80060fe:	460b      	mov	r3, r1
 8006100:	813b      	strh	r3, [r7, #8]
 8006102:	4613      	mov	r3, r2
 8006104:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006106:	f7ff f913 	bl	8005330 <HAL_GetTick>
 800610a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006112:	b2db      	uxtb	r3, r3
 8006114:	2b20      	cmp	r3, #32
 8006116:	f040 8208 	bne.w	800652a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800611a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611c:	9300      	str	r3, [sp, #0]
 800611e:	2319      	movs	r3, #25
 8006120:	2201      	movs	r2, #1
 8006122:	497b      	ldr	r1, [pc, #492]	; (8006310 <HAL_I2C_Mem_Read+0x224>)
 8006124:	68f8      	ldr	r0, [r7, #12]
 8006126:	f000 fc07 	bl	8006938 <I2C_WaitOnFlagUntilTimeout>
 800612a:	4603      	mov	r3, r0
 800612c:	2b00      	cmp	r3, #0
 800612e:	d001      	beq.n	8006134 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006130:	2302      	movs	r3, #2
 8006132:	e1fb      	b.n	800652c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800613a:	2b01      	cmp	r3, #1
 800613c:	d101      	bne.n	8006142 <HAL_I2C_Mem_Read+0x56>
 800613e:	2302      	movs	r3, #2
 8006140:	e1f4      	b.n	800652c <HAL_I2C_Mem_Read+0x440>
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2201      	movs	r2, #1
 8006146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f003 0301 	and.w	r3, r3, #1
 8006154:	2b01      	cmp	r3, #1
 8006156:	d007      	beq.n	8006168 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f042 0201 	orr.w	r2, r2, #1
 8006166:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006176:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2222      	movs	r2, #34	; 0x22
 800617c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2240      	movs	r2, #64	; 0x40
 8006184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2200      	movs	r2, #0
 800618c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006192:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006198:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800619e:	b29a      	uxth	r2, r3
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	4a5b      	ldr	r2, [pc, #364]	; (8006314 <HAL_I2C_Mem_Read+0x228>)
 80061a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80061aa:	88f8      	ldrh	r0, [r7, #6]
 80061ac:	893a      	ldrh	r2, [r7, #8]
 80061ae:	8979      	ldrh	r1, [r7, #10]
 80061b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b2:	9301      	str	r3, [sp, #4]
 80061b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061b6:	9300      	str	r3, [sp, #0]
 80061b8:	4603      	mov	r3, r0
 80061ba:	68f8      	ldr	r0, [r7, #12]
 80061bc:	f000 fad4 	bl	8006768 <I2C_RequestMemoryRead>
 80061c0:	4603      	mov	r3, r0
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d001      	beq.n	80061ca <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	e1b0      	b.n	800652c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d113      	bne.n	80061fa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061d2:	2300      	movs	r3, #0
 80061d4:	623b      	str	r3, [r7, #32]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	695b      	ldr	r3, [r3, #20]
 80061dc:	623b      	str	r3, [r7, #32]
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	699b      	ldr	r3, [r3, #24]
 80061e4:	623b      	str	r3, [r7, #32]
 80061e6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061f6:	601a      	str	r2, [r3, #0]
 80061f8:	e184      	b.n	8006504 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d11b      	bne.n	800623a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	681a      	ldr	r2, [r3, #0]
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006210:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006212:	2300      	movs	r3, #0
 8006214:	61fb      	str	r3, [r7, #28]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	695b      	ldr	r3, [r3, #20]
 800621c:	61fb      	str	r3, [r7, #28]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	699b      	ldr	r3, [r3, #24]
 8006224:	61fb      	str	r3, [r7, #28]
 8006226:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006236:	601a      	str	r2, [r3, #0]
 8006238:	e164      	b.n	8006504 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800623e:	2b02      	cmp	r3, #2
 8006240:	d11b      	bne.n	800627a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	681a      	ldr	r2, [r3, #0]
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006250:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006260:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006262:	2300      	movs	r3, #0
 8006264:	61bb      	str	r3, [r7, #24]
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	695b      	ldr	r3, [r3, #20]
 800626c:	61bb      	str	r3, [r7, #24]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	699b      	ldr	r3, [r3, #24]
 8006274:	61bb      	str	r3, [r7, #24]
 8006276:	69bb      	ldr	r3, [r7, #24]
 8006278:	e144      	b.n	8006504 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800627a:	2300      	movs	r3, #0
 800627c:	617b      	str	r3, [r7, #20]
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	695b      	ldr	r3, [r3, #20]
 8006284:	617b      	str	r3, [r7, #20]
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	699b      	ldr	r3, [r3, #24]
 800628c:	617b      	str	r3, [r7, #20]
 800628e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006290:	e138      	b.n	8006504 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006296:	2b03      	cmp	r3, #3
 8006298:	f200 80f1 	bhi.w	800647e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d123      	bne.n	80062ec <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80062a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80062a8:	68f8      	ldr	r0, [r7, #12]
 80062aa:	f000 fc9d 	bl	8006be8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80062ae:	4603      	mov	r3, r0
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d001      	beq.n	80062b8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80062b4:	2301      	movs	r3, #1
 80062b6:	e139      	b.n	800652c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	691a      	ldr	r2, [r3, #16]
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c2:	b2d2      	uxtb	r2, r2
 80062c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ca:	1c5a      	adds	r2, r3, #1
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062d4:	3b01      	subs	r3, #1
 80062d6:	b29a      	uxth	r2, r3
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	3b01      	subs	r3, #1
 80062e4:	b29a      	uxth	r2, r3
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80062ea:	e10b      	b.n	8006504 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062f0:	2b02      	cmp	r3, #2
 80062f2:	d14e      	bne.n	8006392 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80062f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f6:	9300      	str	r3, [sp, #0]
 80062f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062fa:	2200      	movs	r2, #0
 80062fc:	4906      	ldr	r1, [pc, #24]	; (8006318 <HAL_I2C_Mem_Read+0x22c>)
 80062fe:	68f8      	ldr	r0, [r7, #12]
 8006300:	f000 fb1a 	bl	8006938 <I2C_WaitOnFlagUntilTimeout>
 8006304:	4603      	mov	r3, r0
 8006306:	2b00      	cmp	r3, #0
 8006308:	d008      	beq.n	800631c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	e10e      	b.n	800652c <HAL_I2C_Mem_Read+0x440>
 800630e:	bf00      	nop
 8006310:	00100002 	.word	0x00100002
 8006314:	ffff0000 	.word	0xffff0000
 8006318:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800632a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	691a      	ldr	r2, [r3, #16]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006336:	b2d2      	uxtb	r2, r2
 8006338:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800633e:	1c5a      	adds	r2, r3, #1
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006348:	3b01      	subs	r3, #1
 800634a:	b29a      	uxth	r2, r3
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006354:	b29b      	uxth	r3, r3
 8006356:	3b01      	subs	r3, #1
 8006358:	b29a      	uxth	r2, r3
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	691a      	ldr	r2, [r3, #16]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006368:	b2d2      	uxtb	r2, r2
 800636a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006370:	1c5a      	adds	r2, r3, #1
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800637a:	3b01      	subs	r3, #1
 800637c:	b29a      	uxth	r2, r3
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006386:	b29b      	uxth	r3, r3
 8006388:	3b01      	subs	r3, #1
 800638a:	b29a      	uxth	r2, r3
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006390:	e0b8      	b.n	8006504 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006394:	9300      	str	r3, [sp, #0]
 8006396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006398:	2200      	movs	r2, #0
 800639a:	4966      	ldr	r1, [pc, #408]	; (8006534 <HAL_I2C_Mem_Read+0x448>)
 800639c:	68f8      	ldr	r0, [r7, #12]
 800639e:	f000 facb 	bl	8006938 <I2C_WaitOnFlagUntilTimeout>
 80063a2:	4603      	mov	r3, r0
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d001      	beq.n	80063ac <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80063a8:	2301      	movs	r3, #1
 80063aa:	e0bf      	b.n	800652c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	691a      	ldr	r2, [r3, #16]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c6:	b2d2      	uxtb	r2, r2
 80063c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ce:	1c5a      	adds	r2, r3, #1
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063d8:	3b01      	subs	r3, #1
 80063da:	b29a      	uxth	r2, r3
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	3b01      	subs	r3, #1
 80063e8:	b29a      	uxth	r2, r3
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80063ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f0:	9300      	str	r3, [sp, #0]
 80063f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f4:	2200      	movs	r2, #0
 80063f6:	494f      	ldr	r1, [pc, #316]	; (8006534 <HAL_I2C_Mem_Read+0x448>)
 80063f8:	68f8      	ldr	r0, [r7, #12]
 80063fa:	f000 fa9d 	bl	8006938 <I2C_WaitOnFlagUntilTimeout>
 80063fe:	4603      	mov	r3, r0
 8006400:	2b00      	cmp	r3, #0
 8006402:	d001      	beq.n	8006408 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	e091      	b.n	800652c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006416:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	691a      	ldr	r2, [r3, #16]
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006422:	b2d2      	uxtb	r2, r2
 8006424:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800642a:	1c5a      	adds	r2, r3, #1
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006434:	3b01      	subs	r3, #1
 8006436:	b29a      	uxth	r2, r3
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006440:	b29b      	uxth	r3, r3
 8006442:	3b01      	subs	r3, #1
 8006444:	b29a      	uxth	r2, r3
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	691a      	ldr	r2, [r3, #16]
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006454:	b2d2      	uxtb	r2, r2
 8006456:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800645c:	1c5a      	adds	r2, r3, #1
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006466:	3b01      	subs	r3, #1
 8006468:	b29a      	uxth	r2, r3
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006472:	b29b      	uxth	r3, r3
 8006474:	3b01      	subs	r3, #1
 8006476:	b29a      	uxth	r2, r3
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800647c:	e042      	b.n	8006504 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800647e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006480:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006482:	68f8      	ldr	r0, [r7, #12]
 8006484:	f000 fbb0 	bl	8006be8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006488:	4603      	mov	r3, r0
 800648a:	2b00      	cmp	r3, #0
 800648c:	d001      	beq.n	8006492 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800648e:	2301      	movs	r3, #1
 8006490:	e04c      	b.n	800652c <HAL_I2C_Mem_Read+0x440>
        }

        /*  data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	691a      	ldr	r2, [r3, #16]
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800649c:	b2d2      	uxtb	r2, r2
 800649e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a4:	1c5a      	adds	r2, r3, #1
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064ae:	3b01      	subs	r3, #1
 80064b0:	b29a      	uxth	r2, r3
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	3b01      	subs	r3, #1
 80064be:	b29a      	uxth	r2, r3
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	695b      	ldr	r3, [r3, #20]
 80064ca:	f003 0304 	and.w	r3, r3, #4
 80064ce:	2b04      	cmp	r3, #4
 80064d0:	d118      	bne.n	8006504 <HAL_I2C_Mem_Read+0x418>
        {
          /*  data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	691a      	ldr	r2, [r3, #16]
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064dc:	b2d2      	uxtb	r2, r2
 80064de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e4:	1c5a      	adds	r2, r3, #1
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064ee:	3b01      	subs	r3, #1
 80064f0:	b29a      	uxth	r2, r3
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	3b01      	subs	r3, #1
 80064fe:	b29a      	uxth	r2, r3
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006508:	2b00      	cmp	r3, #0
 800650a:	f47f aec2 	bne.w	8006292 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2220      	movs	r2, #32
 8006512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2200      	movs	r2, #0
 800651a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2200      	movs	r2, #0
 8006522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006526:	2300      	movs	r3, #0
 8006528:	e000      	b.n	800652c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800652a:	2302      	movs	r3, #2
  }
}
 800652c:	4618      	mov	r0, r3
 800652e:	3728      	adds	r7, #40	; 0x28
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}
 8006534:	00010004 	.word	0x00010004

08006538 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b088      	sub	sp, #32
 800653c:	af02      	add	r7, sp, #8
 800653e:	60f8      	str	r0, [r7, #12]
 8006540:	607a      	str	r2, [r7, #4]
 8006542:	603b      	str	r3, [r7, #0]
 8006544:	460b      	mov	r3, r1
 8006546:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800654c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	2b08      	cmp	r3, #8
 8006552:	d006      	beq.n	8006562 <I2C_MasterRequestWrite+0x2a>
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	2b01      	cmp	r3, #1
 8006558:	d003      	beq.n	8006562 <I2C_MasterRequestWrite+0x2a>
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006560:	d108      	bne.n	8006574 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006570:	601a      	str	r2, [r3, #0]
 8006572:	e00b      	b.n	800658c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006578:	2b12      	cmp	r3, #18
 800657a:	d107      	bne.n	800658c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800658a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	9300      	str	r3, [sp, #0]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2200      	movs	r2, #0
 8006594:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006598:	68f8      	ldr	r0, [r7, #12]
 800659a:	f000 f9cd 	bl	8006938 <I2C_WaitOnFlagUntilTimeout>
 800659e:	4603      	mov	r3, r0
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d00d      	beq.n	80065c0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065b2:	d103      	bne.n	80065bc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80065bc:	2303      	movs	r3, #3
 80065be:	e035      	b.n	800662c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	691b      	ldr	r3, [r3, #16]
 80065c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065c8:	d108      	bne.n	80065dc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80065ca:	897b      	ldrh	r3, [r7, #10]
 80065cc:	b2db      	uxtb	r3, r3
 80065ce:	461a      	mov	r2, r3
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80065d8:	611a      	str	r2, [r3, #16]
 80065da:	e01b      	b.n	8006614 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80065dc:	897b      	ldrh	r3, [r7, #10]
 80065de:	11db      	asrs	r3, r3, #7
 80065e0:	b2db      	uxtb	r3, r3
 80065e2:	f003 0306 	and.w	r3, r3, #6
 80065e6:	b2db      	uxtb	r3, r3
 80065e8:	f063 030f 	orn	r3, r3, #15
 80065ec:	b2da      	uxtb	r2, r3
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	490e      	ldr	r1, [pc, #56]	; (8006634 <I2C_MasterRequestWrite+0xfc>)
 80065fa:	68f8      	ldr	r0, [r7, #12]
 80065fc:	f000 f9f3 	bl	80069e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006600:	4603      	mov	r3, r0
 8006602:	2b00      	cmp	r3, #0
 8006604:	d001      	beq.n	800660a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	e010      	b.n	800662c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800660a:	897b      	ldrh	r3, [r7, #10]
 800660c:	b2da      	uxtb	r2, r3
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	4907      	ldr	r1, [pc, #28]	; (8006638 <I2C_MasterRequestWrite+0x100>)
 800661a:	68f8      	ldr	r0, [r7, #12]
 800661c:	f000 f9e3 	bl	80069e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006620:	4603      	mov	r3, r0
 8006622:	2b00      	cmp	r3, #0
 8006624:	d001      	beq.n	800662a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	e000      	b.n	800662c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800662a:	2300      	movs	r3, #0
}
 800662c:	4618      	mov	r0, r3
 800662e:	3718      	adds	r7, #24
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}
 8006634:	00010008 	.word	0x00010008
 8006638:	00010002 	.word	0x00010002

0800663c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b088      	sub	sp, #32
 8006640:	af02      	add	r7, sp, #8
 8006642:	60f8      	str	r0, [r7, #12]
 8006644:	4608      	mov	r0, r1
 8006646:	4611      	mov	r1, r2
 8006648:	461a      	mov	r2, r3
 800664a:	4603      	mov	r3, r0
 800664c:	817b      	strh	r3, [r7, #10]
 800664e:	460b      	mov	r3, r1
 8006650:	813b      	strh	r3, [r7, #8]
 8006652:	4613      	mov	r3, r2
 8006654:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	681a      	ldr	r2, [r3, #0]
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006664:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006668:	9300      	str	r3, [sp, #0]
 800666a:	6a3b      	ldr	r3, [r7, #32]
 800666c:	2200      	movs	r2, #0
 800666e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006672:	68f8      	ldr	r0, [r7, #12]
 8006674:	f000 f960 	bl	8006938 <I2C_WaitOnFlagUntilTimeout>
 8006678:	4603      	mov	r3, r0
 800667a:	2b00      	cmp	r3, #0
 800667c:	d00d      	beq.n	800669a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006688:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800668c:	d103      	bne.n	8006696 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006694:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006696:	2303      	movs	r3, #3
 8006698:	e05f      	b.n	800675a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800669a:	897b      	ldrh	r3, [r7, #10]
 800669c:	b2db      	uxtb	r3, r3
 800669e:	461a      	mov	r2, r3
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80066a8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80066aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ac:	6a3a      	ldr	r2, [r7, #32]
 80066ae:	492d      	ldr	r1, [pc, #180]	; (8006764 <I2C_RequestMemoryWrite+0x128>)
 80066b0:	68f8      	ldr	r0, [r7, #12]
 80066b2:	f000 f998 	bl	80069e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80066b6:	4603      	mov	r3, r0
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d001      	beq.n	80066c0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80066bc:	2301      	movs	r3, #1
 80066be:	e04c      	b.n	800675a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066c0:	2300      	movs	r3, #0
 80066c2:	617b      	str	r3, [r7, #20]
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	695b      	ldr	r3, [r3, #20]
 80066ca:	617b      	str	r3, [r7, #20]
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	699b      	ldr	r3, [r3, #24]
 80066d2:	617b      	str	r3, [r7, #20]
 80066d4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80066d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066d8:	6a39      	ldr	r1, [r7, #32]
 80066da:	68f8      	ldr	r0, [r7, #12]
 80066dc:	f000 fa02 	bl	8006ae4 <I2C_WaitOnTXEFlagUntilTimeout>
 80066e0:	4603      	mov	r3, r0
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d00d      	beq.n	8006702 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ea:	2b04      	cmp	r3, #4
 80066ec:	d107      	bne.n	80066fe <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066fc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	e02b      	b.n	800675a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006702:	88fb      	ldrh	r3, [r7, #6]
 8006704:	2b01      	cmp	r3, #1
 8006706:	d105      	bne.n	8006714 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006708:	893b      	ldrh	r3, [r7, #8]
 800670a:	b2da      	uxtb	r2, r3
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	611a      	str	r2, [r3, #16]
 8006712:	e021      	b.n	8006758 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006714:	893b      	ldrh	r3, [r7, #8]
 8006716:	0a1b      	lsrs	r3, r3, #8
 8006718:	b29b      	uxth	r3, r3
 800671a:	b2da      	uxtb	r2, r3
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006722:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006724:	6a39      	ldr	r1, [r7, #32]
 8006726:	68f8      	ldr	r0, [r7, #12]
 8006728:	f000 f9dc 	bl	8006ae4 <I2C_WaitOnTXEFlagUntilTimeout>
 800672c:	4603      	mov	r3, r0
 800672e:	2b00      	cmp	r3, #0
 8006730:	d00d      	beq.n	800674e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006736:	2b04      	cmp	r3, #4
 8006738:	d107      	bne.n	800674a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	681a      	ldr	r2, [r3, #0]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006748:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800674a:	2301      	movs	r3, #1
 800674c:	e005      	b.n	800675a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800674e:	893b      	ldrh	r3, [r7, #8]
 8006750:	b2da      	uxtb	r2, r3
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006758:	2300      	movs	r3, #0
}
 800675a:	4618      	mov	r0, r3
 800675c:	3718      	adds	r7, #24
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
 8006762:	bf00      	nop
 8006764:	00010002 	.word	0x00010002

08006768 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b088      	sub	sp, #32
 800676c:	af02      	add	r7, sp, #8
 800676e:	60f8      	str	r0, [r7, #12]
 8006770:	4608      	mov	r0, r1
 8006772:	4611      	mov	r1, r2
 8006774:	461a      	mov	r2, r3
 8006776:	4603      	mov	r3, r0
 8006778:	817b      	strh	r3, [r7, #10]
 800677a:	460b      	mov	r3, r1
 800677c:	813b      	strh	r3, [r7, #8]
 800677e:	4613      	mov	r3, r2
 8006780:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006790:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	681a      	ldr	r2, [r3, #0]
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80067a0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80067a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a4:	9300      	str	r3, [sp, #0]
 80067a6:	6a3b      	ldr	r3, [r7, #32]
 80067a8:	2200      	movs	r2, #0
 80067aa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80067ae:	68f8      	ldr	r0, [r7, #12]
 80067b0:	f000 f8c2 	bl	8006938 <I2C_WaitOnFlagUntilTimeout>
 80067b4:	4603      	mov	r3, r0
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d00d      	beq.n	80067d6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067c8:	d103      	bne.n	80067d2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067d0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80067d2:	2303      	movs	r3, #3
 80067d4:	e0aa      	b.n	800692c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80067d6:	897b      	ldrh	r3, [r7, #10]
 80067d8:	b2db      	uxtb	r3, r3
 80067da:	461a      	mov	r2, r3
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80067e4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80067e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e8:	6a3a      	ldr	r2, [r7, #32]
 80067ea:	4952      	ldr	r1, [pc, #328]	; (8006934 <I2C_RequestMemoryRead+0x1cc>)
 80067ec:	68f8      	ldr	r0, [r7, #12]
 80067ee:	f000 f8fa 	bl	80069e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80067f2:	4603      	mov	r3, r0
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d001      	beq.n	80067fc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80067f8:	2301      	movs	r3, #1
 80067fa:	e097      	b.n	800692c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067fc:	2300      	movs	r3, #0
 80067fe:	617b      	str	r3, [r7, #20]
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	695b      	ldr	r3, [r3, #20]
 8006806:	617b      	str	r3, [r7, #20]
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	699b      	ldr	r3, [r3, #24]
 800680e:	617b      	str	r3, [r7, #20]
 8006810:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006812:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006814:	6a39      	ldr	r1, [r7, #32]
 8006816:	68f8      	ldr	r0, [r7, #12]
 8006818:	f000 f964 	bl	8006ae4 <I2C_WaitOnTXEFlagUntilTimeout>
 800681c:	4603      	mov	r3, r0
 800681e:	2b00      	cmp	r3, #0
 8006820:	d00d      	beq.n	800683e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006826:	2b04      	cmp	r3, #4
 8006828:	d107      	bne.n	800683a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006838:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800683a:	2301      	movs	r3, #1
 800683c:	e076      	b.n	800692c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800683e:	88fb      	ldrh	r3, [r7, #6]
 8006840:	2b01      	cmp	r3, #1
 8006842:	d105      	bne.n	8006850 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006844:	893b      	ldrh	r3, [r7, #8]
 8006846:	b2da      	uxtb	r2, r3
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	611a      	str	r2, [r3, #16]
 800684e:	e021      	b.n	8006894 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006850:	893b      	ldrh	r3, [r7, #8]
 8006852:	0a1b      	lsrs	r3, r3, #8
 8006854:	b29b      	uxth	r3, r3
 8006856:	b2da      	uxtb	r2, r3
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800685e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006860:	6a39      	ldr	r1, [r7, #32]
 8006862:	68f8      	ldr	r0, [r7, #12]
 8006864:	f000 f93e 	bl	8006ae4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006868:	4603      	mov	r3, r0
 800686a:	2b00      	cmp	r3, #0
 800686c:	d00d      	beq.n	800688a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006872:	2b04      	cmp	r3, #4
 8006874:	d107      	bne.n	8006886 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006884:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006886:	2301      	movs	r3, #1
 8006888:	e050      	b.n	800692c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800688a:	893b      	ldrh	r3, [r7, #8]
 800688c:	b2da      	uxtb	r2, r3
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006894:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006896:	6a39      	ldr	r1, [r7, #32]
 8006898:	68f8      	ldr	r0, [r7, #12]
 800689a:	f000 f923 	bl	8006ae4 <I2C_WaitOnTXEFlagUntilTimeout>
 800689e:	4603      	mov	r3, r0
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d00d      	beq.n	80068c0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a8:	2b04      	cmp	r3, #4
 80068aa:	d107      	bne.n	80068bc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068ba:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80068bc:	2301      	movs	r3, #1
 80068be:	e035      	b.n	800692c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	681a      	ldr	r2, [r3, #0]
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80068ce:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80068d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d2:	9300      	str	r3, [sp, #0]
 80068d4:	6a3b      	ldr	r3, [r7, #32]
 80068d6:	2200      	movs	r2, #0
 80068d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80068dc:	68f8      	ldr	r0, [r7, #12]
 80068de:	f000 f82b 	bl	8006938 <I2C_WaitOnFlagUntilTimeout>
 80068e2:	4603      	mov	r3, r0
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d00d      	beq.n	8006904 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068f6:	d103      	bne.n	8006900 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80068fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006900:	2303      	movs	r3, #3
 8006902:	e013      	b.n	800692c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006904:	897b      	ldrh	r3, [r7, #10]
 8006906:	b2db      	uxtb	r3, r3
 8006908:	f043 0301 	orr.w	r3, r3, #1
 800690c:	b2da      	uxtb	r2, r3
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006916:	6a3a      	ldr	r2, [r7, #32]
 8006918:	4906      	ldr	r1, [pc, #24]	; (8006934 <I2C_RequestMemoryRead+0x1cc>)
 800691a:	68f8      	ldr	r0, [r7, #12]
 800691c:	f000 f863 	bl	80069e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006920:	4603      	mov	r3, r0
 8006922:	2b00      	cmp	r3, #0
 8006924:	d001      	beq.n	800692a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	e000      	b.n	800692c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800692a:	2300      	movs	r3, #0
}
 800692c:	4618      	mov	r0, r3
 800692e:	3718      	adds	r7, #24
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}
 8006934:	00010002 	.word	0x00010002

08006938 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b084      	sub	sp, #16
 800693c:	af00      	add	r7, sp, #0
 800693e:	60f8      	str	r0, [r7, #12]
 8006940:	60b9      	str	r1, [r7, #8]
 8006942:	603b      	str	r3, [r7, #0]
 8006944:	4613      	mov	r3, r2
 8006946:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006948:	e025      	b.n	8006996 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006950:	d021      	beq.n	8006996 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006952:	f7fe fced 	bl	8005330 <HAL_GetTick>
 8006956:	4602      	mov	r2, r0
 8006958:	69bb      	ldr	r3, [r7, #24]
 800695a:	1ad3      	subs	r3, r2, r3
 800695c:	683a      	ldr	r2, [r7, #0]
 800695e:	429a      	cmp	r2, r3
 8006960:	d302      	bcc.n	8006968 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d116      	bne.n	8006996 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2200      	movs	r2, #0
 800696c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2220      	movs	r2, #32
 8006972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2200      	movs	r2, #0
 800697a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006982:	f043 0220 	orr.w	r2, r3, #32
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2200      	movs	r2, #0
 800698e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006992:	2301      	movs	r3, #1
 8006994:	e023      	b.n	80069de <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	0c1b      	lsrs	r3, r3, #16
 800699a:	b2db      	uxtb	r3, r3
 800699c:	2b01      	cmp	r3, #1
 800699e:	d10d      	bne.n	80069bc <I2C_WaitOnFlagUntilTimeout+0x84>
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	695b      	ldr	r3, [r3, #20]
 80069a6:	43da      	mvns	r2, r3
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	4013      	ands	r3, r2
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	bf0c      	ite	eq
 80069b2:	2301      	moveq	r3, #1
 80069b4:	2300      	movne	r3, #0
 80069b6:	b2db      	uxtb	r3, r3
 80069b8:	461a      	mov	r2, r3
 80069ba:	e00c      	b.n	80069d6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	699b      	ldr	r3, [r3, #24]
 80069c2:	43da      	mvns	r2, r3
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	4013      	ands	r3, r2
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	bf0c      	ite	eq
 80069ce:	2301      	moveq	r3, #1
 80069d0:	2300      	movne	r3, #0
 80069d2:	b2db      	uxtb	r3, r3
 80069d4:	461a      	mov	r2, r3
 80069d6:	79fb      	ldrb	r3, [r7, #7]
 80069d8:	429a      	cmp	r2, r3
 80069da:	d0b6      	beq.n	800694a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80069dc:	2300      	movs	r3, #0
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3710      	adds	r7, #16
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}

080069e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80069e6:	b580      	push	{r7, lr}
 80069e8:	b084      	sub	sp, #16
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	60f8      	str	r0, [r7, #12]
 80069ee:	60b9      	str	r1, [r7, #8]
 80069f0:	607a      	str	r2, [r7, #4]
 80069f2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80069f4:	e051      	b.n	8006a9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	695b      	ldr	r3, [r3, #20]
 80069fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a04:	d123      	bne.n	8006a4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a14:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006a1e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2200      	movs	r2, #0
 8006a24:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2220      	movs	r2, #32
 8006a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2200      	movs	r2, #0
 8006a32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a3a:	f043 0204 	orr.w	r2, r3, #4
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2200      	movs	r2, #0
 8006a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e046      	b.n	8006adc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a54:	d021      	beq.n	8006a9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a56:	f7fe fc6b 	bl	8005330 <HAL_GetTick>
 8006a5a:	4602      	mov	r2, r0
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	1ad3      	subs	r3, r2, r3
 8006a60:	687a      	ldr	r2, [r7, #4]
 8006a62:	429a      	cmp	r2, r3
 8006a64:	d302      	bcc.n	8006a6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d116      	bne.n	8006a9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2220      	movs	r2, #32
 8006a76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a86:	f043 0220 	orr.w	r2, r3, #32
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2200      	movs	r2, #0
 8006a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006a96:	2301      	movs	r3, #1
 8006a98:	e020      	b.n	8006adc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	0c1b      	lsrs	r3, r3, #16
 8006a9e:	b2db      	uxtb	r3, r3
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d10c      	bne.n	8006abe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	695b      	ldr	r3, [r3, #20]
 8006aaa:	43da      	mvns	r2, r3
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	4013      	ands	r3, r2
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	bf14      	ite	ne
 8006ab6:	2301      	movne	r3, #1
 8006ab8:	2300      	moveq	r3, #0
 8006aba:	b2db      	uxtb	r3, r3
 8006abc:	e00b      	b.n	8006ad6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	699b      	ldr	r3, [r3, #24]
 8006ac4:	43da      	mvns	r2, r3
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	4013      	ands	r3, r2
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	bf14      	ite	ne
 8006ad0:	2301      	movne	r3, #1
 8006ad2:	2300      	moveq	r3, #0
 8006ad4:	b2db      	uxtb	r3, r3
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d18d      	bne.n	80069f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006ada:	2300      	movs	r3, #0
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3710      	adds	r7, #16
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}

08006ae4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b084      	sub	sp, #16
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	60f8      	str	r0, [r7, #12]
 8006aec:	60b9      	str	r1, [r7, #8]
 8006aee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006af0:	e02d      	b.n	8006b4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006af2:	68f8      	ldr	r0, [r7, #12]
 8006af4:	f000 f8ce 	bl	8006c94 <I2C_IsAcknowledgeFailed>
 8006af8:	4603      	mov	r3, r0
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d001      	beq.n	8006b02 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006afe:	2301      	movs	r3, #1
 8006b00:	e02d      	b.n	8006b5e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b08:	d021      	beq.n	8006b4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b0a:	f7fe fc11 	bl	8005330 <HAL_GetTick>
 8006b0e:	4602      	mov	r2, r0
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	1ad3      	subs	r3, r2, r3
 8006b14:	68ba      	ldr	r2, [r7, #8]
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d302      	bcc.n	8006b20 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d116      	bne.n	8006b4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2200      	movs	r2, #0
 8006b24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	2220      	movs	r2, #32
 8006b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2200      	movs	r2, #0
 8006b32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b3a:	f043 0220 	orr.w	r2, r3, #32
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2200      	movs	r2, #0
 8006b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	e007      	b.n	8006b5e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	695b      	ldr	r3, [r3, #20]
 8006b54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b58:	2b80      	cmp	r3, #128	; 0x80
 8006b5a:	d1ca      	bne.n	8006af2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006b5c:	2300      	movs	r3, #0
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3710      	adds	r7, #16
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}

08006b66 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006b66:	b580      	push	{r7, lr}
 8006b68:	b084      	sub	sp, #16
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	60f8      	str	r0, [r7, #12]
 8006b6e:	60b9      	str	r1, [r7, #8]
 8006b70:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006b72:	e02d      	b.n	8006bd0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006b74:	68f8      	ldr	r0, [r7, #12]
 8006b76:	f000 f88d 	bl	8006c94 <I2C_IsAcknowledgeFailed>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d001      	beq.n	8006b84 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006b80:	2301      	movs	r3, #1
 8006b82:	e02d      	b.n	8006be0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b8a:	d021      	beq.n	8006bd0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b8c:	f7fe fbd0 	bl	8005330 <HAL_GetTick>
 8006b90:	4602      	mov	r2, r0
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	1ad3      	subs	r3, r2, r3
 8006b96:	68ba      	ldr	r2, [r7, #8]
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d302      	bcc.n	8006ba2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d116      	bne.n	8006bd0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2220      	movs	r2, #32
 8006bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bbc:	f043 0220 	orr.w	r2, r3, #32
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	e007      	b.n	8006be0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	695b      	ldr	r3, [r3, #20]
 8006bd6:	f003 0304 	and.w	r3, r3, #4
 8006bda:	2b04      	cmp	r3, #4
 8006bdc:	d1ca      	bne.n	8006b74 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006bde:	2300      	movs	r3, #0
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	3710      	adds	r7, #16
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}

08006be8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b084      	sub	sp, #16
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	60f8      	str	r0, [r7, #12]
 8006bf0:	60b9      	str	r1, [r7, #8]
 8006bf2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006bf4:	e042      	b.n	8006c7c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	695b      	ldr	r3, [r3, #20]
 8006bfc:	f003 0310 	and.w	r3, r3, #16
 8006c00:	2b10      	cmp	r3, #16
 8006c02:	d119      	bne.n	8006c38 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f06f 0210 	mvn.w	r2, #16
 8006c0c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2200      	movs	r2, #0
 8006c12:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2220      	movs	r2, #32
 8006c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006c34:	2301      	movs	r3, #1
 8006c36:	e029      	b.n	8006c8c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c38:	f7fe fb7a 	bl	8005330 <HAL_GetTick>
 8006c3c:	4602      	mov	r2, r0
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	1ad3      	subs	r3, r2, r3
 8006c42:	68ba      	ldr	r2, [r7, #8]
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d302      	bcc.n	8006c4e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d116      	bne.n	8006c7c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2200      	movs	r2, #0
 8006c52:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2220      	movs	r2, #32
 8006c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c68:	f043 0220 	orr.w	r2, r3, #32
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2200      	movs	r2, #0
 8006c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	e007      	b.n	8006c8c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	695b      	ldr	r3, [r3, #20]
 8006c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c86:	2b40      	cmp	r3, #64	; 0x40
 8006c88:	d1b5      	bne.n	8006bf6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006c8a:	2300      	movs	r3, #0
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3710      	adds	r7, #16
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}

08006c94 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b083      	sub	sp, #12
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	695b      	ldr	r3, [r3, #20]
 8006ca2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ca6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006caa:	d11b      	bne.n	8006ce4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006cb4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2220      	movs	r2, #32
 8006cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cd0:	f043 0204 	orr.w	r2, r3, #4
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	e000      	b.n	8006ce6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006ce4:	2300      	movs	r3, #0
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	370c      	adds	r7, #12
 8006cea:	46bd      	mov	sp, r7
 8006cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf0:	4770      	bx	lr
	...

08006cf4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b086      	sub	sp, #24
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d101      	bne.n	8006d06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006d02:	2301      	movs	r3, #1
 8006d04:	e264      	b.n	80071d0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f003 0301 	and.w	r3, r3, #1
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d075      	beq.n	8006dfe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006d12:	4ba3      	ldr	r3, [pc, #652]	; (8006fa0 <HAL_RCC_OscConfig+0x2ac>)
 8006d14:	689b      	ldr	r3, [r3, #8]
 8006d16:	f003 030c 	and.w	r3, r3, #12
 8006d1a:	2b04      	cmp	r3, #4
 8006d1c:	d00c      	beq.n	8006d38 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006d1e:	4ba0      	ldr	r3, [pc, #640]	; (8006fa0 <HAL_RCC_OscConfig+0x2ac>)
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006d26:	2b08      	cmp	r3, #8
 8006d28:	d112      	bne.n	8006d50 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006d2a:	4b9d      	ldr	r3, [pc, #628]	; (8006fa0 <HAL_RCC_OscConfig+0x2ac>)
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d36:	d10b      	bne.n	8006d50 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d38:	4b99      	ldr	r3, [pc, #612]	; (8006fa0 <HAL_RCC_OscConfig+0x2ac>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d05b      	beq.n	8006dfc <HAL_RCC_OscConfig+0x108>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d157      	bne.n	8006dfc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	e23f      	b.n	80071d0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d58:	d106      	bne.n	8006d68 <HAL_RCC_OscConfig+0x74>
 8006d5a:	4b91      	ldr	r3, [pc, #580]	; (8006fa0 <HAL_RCC_OscConfig+0x2ac>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a90      	ldr	r2, [pc, #576]	; (8006fa0 <HAL_RCC_OscConfig+0x2ac>)
 8006d60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d64:	6013      	str	r3, [r2, #0]
 8006d66:	e01d      	b.n	8006da4 <HAL_RCC_OscConfig+0xb0>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d70:	d10c      	bne.n	8006d8c <HAL_RCC_OscConfig+0x98>
 8006d72:	4b8b      	ldr	r3, [pc, #556]	; (8006fa0 <HAL_RCC_OscConfig+0x2ac>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a8a      	ldr	r2, [pc, #552]	; (8006fa0 <HAL_RCC_OscConfig+0x2ac>)
 8006d78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006d7c:	6013      	str	r3, [r2, #0]
 8006d7e:	4b88      	ldr	r3, [pc, #544]	; (8006fa0 <HAL_RCC_OscConfig+0x2ac>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a87      	ldr	r2, [pc, #540]	; (8006fa0 <HAL_RCC_OscConfig+0x2ac>)
 8006d84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d88:	6013      	str	r3, [r2, #0]
 8006d8a:	e00b      	b.n	8006da4 <HAL_RCC_OscConfig+0xb0>
 8006d8c:	4b84      	ldr	r3, [pc, #528]	; (8006fa0 <HAL_RCC_OscConfig+0x2ac>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a83      	ldr	r2, [pc, #524]	; (8006fa0 <HAL_RCC_OscConfig+0x2ac>)
 8006d92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d96:	6013      	str	r3, [r2, #0]
 8006d98:	4b81      	ldr	r3, [pc, #516]	; (8006fa0 <HAL_RCC_OscConfig+0x2ac>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a80      	ldr	r2, [pc, #512]	; (8006fa0 <HAL_RCC_OscConfig+0x2ac>)
 8006d9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006da2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d013      	beq.n	8006dd4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dac:	f7fe fac0 	bl	8005330 <HAL_GetTick>
 8006db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006db2:	e008      	b.n	8006dc6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006db4:	f7fe fabc 	bl	8005330 <HAL_GetTick>
 8006db8:	4602      	mov	r2, r0
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	1ad3      	subs	r3, r2, r3
 8006dbe:	2b64      	cmp	r3, #100	; 0x64
 8006dc0:	d901      	bls.n	8006dc6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006dc2:	2303      	movs	r3, #3
 8006dc4:	e204      	b.n	80071d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006dc6:	4b76      	ldr	r3, [pc, #472]	; (8006fa0 <HAL_RCC_OscConfig+0x2ac>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d0f0      	beq.n	8006db4 <HAL_RCC_OscConfig+0xc0>
 8006dd2:	e014      	b.n	8006dfe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dd4:	f7fe faac 	bl	8005330 <HAL_GetTick>
 8006dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006dda:	e008      	b.n	8006dee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006ddc:	f7fe faa8 	bl	8005330 <HAL_GetTick>
 8006de0:	4602      	mov	r2, r0
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	1ad3      	subs	r3, r2, r3
 8006de6:	2b64      	cmp	r3, #100	; 0x64
 8006de8:	d901      	bls.n	8006dee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006dea:	2303      	movs	r3, #3
 8006dec:	e1f0      	b.n	80071d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006dee:	4b6c      	ldr	r3, [pc, #432]	; (8006fa0 <HAL_RCC_OscConfig+0x2ac>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d1f0      	bne.n	8006ddc <HAL_RCC_OscConfig+0xe8>
 8006dfa:	e000      	b.n	8006dfe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006dfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f003 0302 	and.w	r3, r3, #2
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d063      	beq.n	8006ed2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006e0a:	4b65      	ldr	r3, [pc, #404]	; (8006fa0 <HAL_RCC_OscConfig+0x2ac>)
 8006e0c:	689b      	ldr	r3, [r3, #8]
 8006e0e:	f003 030c 	and.w	r3, r3, #12
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d00b      	beq.n	8006e2e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e16:	4b62      	ldr	r3, [pc, #392]	; (8006fa0 <HAL_RCC_OscConfig+0x2ac>)
 8006e18:	689b      	ldr	r3, [r3, #8]
 8006e1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006e1e:	2b08      	cmp	r3, #8
 8006e20:	d11c      	bne.n	8006e5c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e22:	4b5f      	ldr	r3, [pc, #380]	; (8006fa0 <HAL_RCC_OscConfig+0x2ac>)
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d116      	bne.n	8006e5c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e2e:	4b5c      	ldr	r3, [pc, #368]	; (8006fa0 <HAL_RCC_OscConfig+0x2ac>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f003 0302 	and.w	r3, r3, #2
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d005      	beq.n	8006e46 <HAL_RCC_OscConfig+0x152>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	68db      	ldr	r3, [r3, #12]
 8006e3e:	2b01      	cmp	r3, #1
 8006e40:	d001      	beq.n	8006e46 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006e42:	2301      	movs	r3, #1
 8006e44:	e1c4      	b.n	80071d0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e46:	4b56      	ldr	r3, [pc, #344]	; (8006fa0 <HAL_RCC_OscConfig+0x2ac>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	691b      	ldr	r3, [r3, #16]
 8006e52:	00db      	lsls	r3, r3, #3
 8006e54:	4952      	ldr	r1, [pc, #328]	; (8006fa0 <HAL_RCC_OscConfig+0x2ac>)
 8006e56:	4313      	orrs	r3, r2
 8006e58:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e5a:	e03a      	b.n	8006ed2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	68db      	ldr	r3, [r3, #12]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d020      	beq.n	8006ea6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006e64:	4b4f      	ldr	r3, [pc, #316]	; (8006fa4 <HAL_RCC_OscConfig+0x2b0>)
 8006e66:	2201      	movs	r2, #1
 8006e68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e6a:	f7fe fa61 	bl	8005330 <HAL_GetTick>
 8006e6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e70:	e008      	b.n	8006e84 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006e72:	f7fe fa5d 	bl	8005330 <HAL_GetTick>
 8006e76:	4602      	mov	r2, r0
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	1ad3      	subs	r3, r2, r3
 8006e7c:	2b02      	cmp	r3, #2
 8006e7e:	d901      	bls.n	8006e84 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006e80:	2303      	movs	r3, #3
 8006e82:	e1a5      	b.n	80071d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e84:	4b46      	ldr	r3, [pc, #280]	; (8006fa0 <HAL_RCC_OscConfig+0x2ac>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f003 0302 	and.w	r3, r3, #2
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d0f0      	beq.n	8006e72 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e90:	4b43      	ldr	r3, [pc, #268]	; (8006fa0 <HAL_RCC_OscConfig+0x2ac>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	691b      	ldr	r3, [r3, #16]
 8006e9c:	00db      	lsls	r3, r3, #3
 8006e9e:	4940      	ldr	r1, [pc, #256]	; (8006fa0 <HAL_RCC_OscConfig+0x2ac>)
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	600b      	str	r3, [r1, #0]
 8006ea4:	e015      	b.n	8006ed2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006ea6:	4b3f      	ldr	r3, [pc, #252]	; (8006fa4 <HAL_RCC_OscConfig+0x2b0>)
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006eac:	f7fe fa40 	bl	8005330 <HAL_GetTick>
 8006eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006eb2:	e008      	b.n	8006ec6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006eb4:	f7fe fa3c 	bl	8005330 <HAL_GetTick>
 8006eb8:	4602      	mov	r2, r0
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	1ad3      	subs	r3, r2, r3
 8006ebe:	2b02      	cmp	r3, #2
 8006ec0:	d901      	bls.n	8006ec6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006ec2:	2303      	movs	r3, #3
 8006ec4:	e184      	b.n	80071d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ec6:	4b36      	ldr	r3, [pc, #216]	; (8006fa0 <HAL_RCC_OscConfig+0x2ac>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f003 0302 	and.w	r3, r3, #2
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d1f0      	bne.n	8006eb4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f003 0308 	and.w	r3, r3, #8
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d030      	beq.n	8006f40 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	695b      	ldr	r3, [r3, #20]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d016      	beq.n	8006f14 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ee6:	4b30      	ldr	r3, [pc, #192]	; (8006fa8 <HAL_RCC_OscConfig+0x2b4>)
 8006ee8:	2201      	movs	r2, #1
 8006eea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006eec:	f7fe fa20 	bl	8005330 <HAL_GetTick>
 8006ef0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ef2:	e008      	b.n	8006f06 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006ef4:	f7fe fa1c 	bl	8005330 <HAL_GetTick>
 8006ef8:	4602      	mov	r2, r0
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	1ad3      	subs	r3, r2, r3
 8006efe:	2b02      	cmp	r3, #2
 8006f00:	d901      	bls.n	8006f06 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006f02:	2303      	movs	r3, #3
 8006f04:	e164      	b.n	80071d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f06:	4b26      	ldr	r3, [pc, #152]	; (8006fa0 <HAL_RCC_OscConfig+0x2ac>)
 8006f08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f0a:	f003 0302 	and.w	r3, r3, #2
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d0f0      	beq.n	8006ef4 <HAL_RCC_OscConfig+0x200>
 8006f12:	e015      	b.n	8006f40 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f14:	4b24      	ldr	r3, [pc, #144]	; (8006fa8 <HAL_RCC_OscConfig+0x2b4>)
 8006f16:	2200      	movs	r2, #0
 8006f18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f1a:	f7fe fa09 	bl	8005330 <HAL_GetTick>
 8006f1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f20:	e008      	b.n	8006f34 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f22:	f7fe fa05 	bl	8005330 <HAL_GetTick>
 8006f26:	4602      	mov	r2, r0
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	1ad3      	subs	r3, r2, r3
 8006f2c:	2b02      	cmp	r3, #2
 8006f2e:	d901      	bls.n	8006f34 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006f30:	2303      	movs	r3, #3
 8006f32:	e14d      	b.n	80071d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f34:	4b1a      	ldr	r3, [pc, #104]	; (8006fa0 <HAL_RCC_OscConfig+0x2ac>)
 8006f36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f38:	f003 0302 	and.w	r3, r3, #2
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d1f0      	bne.n	8006f22 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f003 0304 	and.w	r3, r3, #4
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	f000 80a0 	beq.w	800708e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f52:	4b13      	ldr	r3, [pc, #76]	; (8006fa0 <HAL_RCC_OscConfig+0x2ac>)
 8006f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d10f      	bne.n	8006f7e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f5e:	2300      	movs	r3, #0
 8006f60:	60bb      	str	r3, [r7, #8]
 8006f62:	4b0f      	ldr	r3, [pc, #60]	; (8006fa0 <HAL_RCC_OscConfig+0x2ac>)
 8006f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f66:	4a0e      	ldr	r2, [pc, #56]	; (8006fa0 <HAL_RCC_OscConfig+0x2ac>)
 8006f68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f6c:	6413      	str	r3, [r2, #64]	; 0x40
 8006f6e:	4b0c      	ldr	r3, [pc, #48]	; (8006fa0 <HAL_RCC_OscConfig+0x2ac>)
 8006f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f76:	60bb      	str	r3, [r7, #8]
 8006f78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f7e:	4b0b      	ldr	r3, [pc, #44]	; (8006fac <HAL_RCC_OscConfig+0x2b8>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d121      	bne.n	8006fce <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006f8a:	4b08      	ldr	r3, [pc, #32]	; (8006fac <HAL_RCC_OscConfig+0x2b8>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a07      	ldr	r2, [pc, #28]	; (8006fac <HAL_RCC_OscConfig+0x2b8>)
 8006f90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006f96:	f7fe f9cb 	bl	8005330 <HAL_GetTick>
 8006f9a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f9c:	e011      	b.n	8006fc2 <HAL_RCC_OscConfig+0x2ce>
 8006f9e:	bf00      	nop
 8006fa0:	40023800 	.word	0x40023800
 8006fa4:	42470000 	.word	0x42470000
 8006fa8:	42470e80 	.word	0x42470e80
 8006fac:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fb0:	f7fe f9be 	bl	8005330 <HAL_GetTick>
 8006fb4:	4602      	mov	r2, r0
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	1ad3      	subs	r3, r2, r3
 8006fba:	2b02      	cmp	r3, #2
 8006fbc:	d901      	bls.n	8006fc2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006fbe:	2303      	movs	r3, #3
 8006fc0:	e106      	b.n	80071d0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fc2:	4b85      	ldr	r3, [pc, #532]	; (80071d8 <HAL_RCC_OscConfig+0x4e4>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d0f0      	beq.n	8006fb0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	689b      	ldr	r3, [r3, #8]
 8006fd2:	2b01      	cmp	r3, #1
 8006fd4:	d106      	bne.n	8006fe4 <HAL_RCC_OscConfig+0x2f0>
 8006fd6:	4b81      	ldr	r3, [pc, #516]	; (80071dc <HAL_RCC_OscConfig+0x4e8>)
 8006fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fda:	4a80      	ldr	r2, [pc, #512]	; (80071dc <HAL_RCC_OscConfig+0x4e8>)
 8006fdc:	f043 0301 	orr.w	r3, r3, #1
 8006fe0:	6713      	str	r3, [r2, #112]	; 0x70
 8006fe2:	e01c      	b.n	800701e <HAL_RCC_OscConfig+0x32a>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	2b05      	cmp	r3, #5
 8006fea:	d10c      	bne.n	8007006 <HAL_RCC_OscConfig+0x312>
 8006fec:	4b7b      	ldr	r3, [pc, #492]	; (80071dc <HAL_RCC_OscConfig+0x4e8>)
 8006fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ff0:	4a7a      	ldr	r2, [pc, #488]	; (80071dc <HAL_RCC_OscConfig+0x4e8>)
 8006ff2:	f043 0304 	orr.w	r3, r3, #4
 8006ff6:	6713      	str	r3, [r2, #112]	; 0x70
 8006ff8:	4b78      	ldr	r3, [pc, #480]	; (80071dc <HAL_RCC_OscConfig+0x4e8>)
 8006ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ffc:	4a77      	ldr	r2, [pc, #476]	; (80071dc <HAL_RCC_OscConfig+0x4e8>)
 8006ffe:	f043 0301 	orr.w	r3, r3, #1
 8007002:	6713      	str	r3, [r2, #112]	; 0x70
 8007004:	e00b      	b.n	800701e <HAL_RCC_OscConfig+0x32a>
 8007006:	4b75      	ldr	r3, [pc, #468]	; (80071dc <HAL_RCC_OscConfig+0x4e8>)
 8007008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800700a:	4a74      	ldr	r2, [pc, #464]	; (80071dc <HAL_RCC_OscConfig+0x4e8>)
 800700c:	f023 0301 	bic.w	r3, r3, #1
 8007010:	6713      	str	r3, [r2, #112]	; 0x70
 8007012:	4b72      	ldr	r3, [pc, #456]	; (80071dc <HAL_RCC_OscConfig+0x4e8>)
 8007014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007016:	4a71      	ldr	r2, [pc, #452]	; (80071dc <HAL_RCC_OscConfig+0x4e8>)
 8007018:	f023 0304 	bic.w	r3, r3, #4
 800701c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	689b      	ldr	r3, [r3, #8]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d015      	beq.n	8007052 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007026:	f7fe f983 	bl	8005330 <HAL_GetTick>
 800702a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800702c:	e00a      	b.n	8007044 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800702e:	f7fe f97f 	bl	8005330 <HAL_GetTick>
 8007032:	4602      	mov	r2, r0
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	1ad3      	subs	r3, r2, r3
 8007038:	f241 3288 	movw	r2, #5000	; 0x1388
 800703c:	4293      	cmp	r3, r2
 800703e:	d901      	bls.n	8007044 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007040:	2303      	movs	r3, #3
 8007042:	e0c5      	b.n	80071d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007044:	4b65      	ldr	r3, [pc, #404]	; (80071dc <HAL_RCC_OscConfig+0x4e8>)
 8007046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007048:	f003 0302 	and.w	r3, r3, #2
 800704c:	2b00      	cmp	r3, #0
 800704e:	d0ee      	beq.n	800702e <HAL_RCC_OscConfig+0x33a>
 8007050:	e014      	b.n	800707c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007052:	f7fe f96d 	bl	8005330 <HAL_GetTick>
 8007056:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007058:	e00a      	b.n	8007070 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800705a:	f7fe f969 	bl	8005330 <HAL_GetTick>
 800705e:	4602      	mov	r2, r0
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	1ad3      	subs	r3, r2, r3
 8007064:	f241 3288 	movw	r2, #5000	; 0x1388
 8007068:	4293      	cmp	r3, r2
 800706a:	d901      	bls.n	8007070 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800706c:	2303      	movs	r3, #3
 800706e:	e0af      	b.n	80071d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007070:	4b5a      	ldr	r3, [pc, #360]	; (80071dc <HAL_RCC_OscConfig+0x4e8>)
 8007072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007074:	f003 0302 	and.w	r3, r3, #2
 8007078:	2b00      	cmp	r3, #0
 800707a:	d1ee      	bne.n	800705a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800707c:	7dfb      	ldrb	r3, [r7, #23]
 800707e:	2b01      	cmp	r3, #1
 8007080:	d105      	bne.n	800708e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007082:	4b56      	ldr	r3, [pc, #344]	; (80071dc <HAL_RCC_OscConfig+0x4e8>)
 8007084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007086:	4a55      	ldr	r2, [pc, #340]	; (80071dc <HAL_RCC_OscConfig+0x4e8>)
 8007088:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800708c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	699b      	ldr	r3, [r3, #24]
 8007092:	2b00      	cmp	r3, #0
 8007094:	f000 809b 	beq.w	80071ce <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007098:	4b50      	ldr	r3, [pc, #320]	; (80071dc <HAL_RCC_OscConfig+0x4e8>)
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	f003 030c 	and.w	r3, r3, #12
 80070a0:	2b08      	cmp	r3, #8
 80070a2:	d05c      	beq.n	800715e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	699b      	ldr	r3, [r3, #24]
 80070a8:	2b02      	cmp	r3, #2
 80070aa:	d141      	bne.n	8007130 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070ac:	4b4c      	ldr	r3, [pc, #304]	; (80071e0 <HAL_RCC_OscConfig+0x4ec>)
 80070ae:	2200      	movs	r2, #0
 80070b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070b2:	f7fe f93d 	bl	8005330 <HAL_GetTick>
 80070b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070b8:	e008      	b.n	80070cc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80070ba:	f7fe f939 	bl	8005330 <HAL_GetTick>
 80070be:	4602      	mov	r2, r0
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	1ad3      	subs	r3, r2, r3
 80070c4:	2b02      	cmp	r3, #2
 80070c6:	d901      	bls.n	80070cc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80070c8:	2303      	movs	r3, #3
 80070ca:	e081      	b.n	80071d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070cc:	4b43      	ldr	r3, [pc, #268]	; (80071dc <HAL_RCC_OscConfig+0x4e8>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d1f0      	bne.n	80070ba <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	69da      	ldr	r2, [r3, #28]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6a1b      	ldr	r3, [r3, #32]
 80070e0:	431a      	orrs	r2, r3
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e6:	019b      	lsls	r3, r3, #6
 80070e8:	431a      	orrs	r2, r3
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ee:	085b      	lsrs	r3, r3, #1
 80070f0:	3b01      	subs	r3, #1
 80070f2:	041b      	lsls	r3, r3, #16
 80070f4:	431a      	orrs	r2, r3
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070fa:	061b      	lsls	r3, r3, #24
 80070fc:	4937      	ldr	r1, [pc, #220]	; (80071dc <HAL_RCC_OscConfig+0x4e8>)
 80070fe:	4313      	orrs	r3, r2
 8007100:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007102:	4b37      	ldr	r3, [pc, #220]	; (80071e0 <HAL_RCC_OscConfig+0x4ec>)
 8007104:	2201      	movs	r2, #1
 8007106:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007108:	f7fe f912 	bl	8005330 <HAL_GetTick>
 800710c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800710e:	e008      	b.n	8007122 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007110:	f7fe f90e 	bl	8005330 <HAL_GetTick>
 8007114:	4602      	mov	r2, r0
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	1ad3      	subs	r3, r2, r3
 800711a:	2b02      	cmp	r3, #2
 800711c:	d901      	bls.n	8007122 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800711e:	2303      	movs	r3, #3
 8007120:	e056      	b.n	80071d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007122:	4b2e      	ldr	r3, [pc, #184]	; (80071dc <HAL_RCC_OscConfig+0x4e8>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800712a:	2b00      	cmp	r3, #0
 800712c:	d0f0      	beq.n	8007110 <HAL_RCC_OscConfig+0x41c>
 800712e:	e04e      	b.n	80071ce <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007130:	4b2b      	ldr	r3, [pc, #172]	; (80071e0 <HAL_RCC_OscConfig+0x4ec>)
 8007132:	2200      	movs	r2, #0
 8007134:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007136:	f7fe f8fb 	bl	8005330 <HAL_GetTick>
 800713a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800713c:	e008      	b.n	8007150 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800713e:	f7fe f8f7 	bl	8005330 <HAL_GetTick>
 8007142:	4602      	mov	r2, r0
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	1ad3      	subs	r3, r2, r3
 8007148:	2b02      	cmp	r3, #2
 800714a:	d901      	bls.n	8007150 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800714c:	2303      	movs	r3, #3
 800714e:	e03f      	b.n	80071d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007150:	4b22      	ldr	r3, [pc, #136]	; (80071dc <HAL_RCC_OscConfig+0x4e8>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007158:	2b00      	cmp	r3, #0
 800715a:	d1f0      	bne.n	800713e <HAL_RCC_OscConfig+0x44a>
 800715c:	e037      	b.n	80071ce <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	699b      	ldr	r3, [r3, #24]
 8007162:	2b01      	cmp	r3, #1
 8007164:	d101      	bne.n	800716a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007166:	2301      	movs	r3, #1
 8007168:	e032      	b.n	80071d0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800716a:	4b1c      	ldr	r3, [pc, #112]	; (80071dc <HAL_RCC_OscConfig+0x4e8>)
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	699b      	ldr	r3, [r3, #24]
 8007174:	2b01      	cmp	r3, #1
 8007176:	d028      	beq.n	80071ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007182:	429a      	cmp	r2, r3
 8007184:	d121      	bne.n	80071ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007190:	429a      	cmp	r2, r3
 8007192:	d11a      	bne.n	80071ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007194:	68fa      	ldr	r2, [r7, #12]
 8007196:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800719a:	4013      	ands	r3, r2
 800719c:	687a      	ldr	r2, [r7, #4]
 800719e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80071a0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d111      	bne.n	80071ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071b0:	085b      	lsrs	r3, r3, #1
 80071b2:	3b01      	subs	r3, #1
 80071b4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80071b6:	429a      	cmp	r2, r3
 80071b8:	d107      	bne.n	80071ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80071c6:	429a      	cmp	r2, r3
 80071c8:	d001      	beq.n	80071ce <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80071ca:	2301      	movs	r3, #1
 80071cc:	e000      	b.n	80071d0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80071ce:	2300      	movs	r3, #0
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3718      	adds	r7, #24
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}
 80071d8:	40007000 	.word	0x40007000
 80071dc:	40023800 	.word	0x40023800
 80071e0:	42470060 	.word	0x42470060

080071e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b084      	sub	sp, #16
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
 80071ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d101      	bne.n	80071f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80071f4:	2301      	movs	r3, #1
 80071f6:	e0cc      	b.n	8007392 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80071f8:	4b68      	ldr	r3, [pc, #416]	; (800739c <HAL_RCC_ClockConfig+0x1b8>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f003 0307 	and.w	r3, r3, #7
 8007200:	683a      	ldr	r2, [r7, #0]
 8007202:	429a      	cmp	r2, r3
 8007204:	d90c      	bls.n	8007220 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007206:	4b65      	ldr	r3, [pc, #404]	; (800739c <HAL_RCC_ClockConfig+0x1b8>)
 8007208:	683a      	ldr	r2, [r7, #0]
 800720a:	b2d2      	uxtb	r2, r2
 800720c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800720e:	4b63      	ldr	r3, [pc, #396]	; (800739c <HAL_RCC_ClockConfig+0x1b8>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f003 0307 	and.w	r3, r3, #7
 8007216:	683a      	ldr	r2, [r7, #0]
 8007218:	429a      	cmp	r2, r3
 800721a:	d001      	beq.n	8007220 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800721c:	2301      	movs	r3, #1
 800721e:	e0b8      	b.n	8007392 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f003 0302 	and.w	r3, r3, #2
 8007228:	2b00      	cmp	r3, #0
 800722a:	d020      	beq.n	800726e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f003 0304 	and.w	r3, r3, #4
 8007234:	2b00      	cmp	r3, #0
 8007236:	d005      	beq.n	8007244 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007238:	4b59      	ldr	r3, [pc, #356]	; (80073a0 <HAL_RCC_ClockConfig+0x1bc>)
 800723a:	689b      	ldr	r3, [r3, #8]
 800723c:	4a58      	ldr	r2, [pc, #352]	; (80073a0 <HAL_RCC_ClockConfig+0x1bc>)
 800723e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007242:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f003 0308 	and.w	r3, r3, #8
 800724c:	2b00      	cmp	r3, #0
 800724e:	d005      	beq.n	800725c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007250:	4b53      	ldr	r3, [pc, #332]	; (80073a0 <HAL_RCC_ClockConfig+0x1bc>)
 8007252:	689b      	ldr	r3, [r3, #8]
 8007254:	4a52      	ldr	r2, [pc, #328]	; (80073a0 <HAL_RCC_ClockConfig+0x1bc>)
 8007256:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800725a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800725c:	4b50      	ldr	r3, [pc, #320]	; (80073a0 <HAL_RCC_ClockConfig+0x1bc>)
 800725e:	689b      	ldr	r3, [r3, #8]
 8007260:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	689b      	ldr	r3, [r3, #8]
 8007268:	494d      	ldr	r1, [pc, #308]	; (80073a0 <HAL_RCC_ClockConfig+0x1bc>)
 800726a:	4313      	orrs	r3, r2
 800726c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f003 0301 	and.w	r3, r3, #1
 8007276:	2b00      	cmp	r3, #0
 8007278:	d044      	beq.n	8007304 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	2b01      	cmp	r3, #1
 8007280:	d107      	bne.n	8007292 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007282:	4b47      	ldr	r3, [pc, #284]	; (80073a0 <HAL_RCC_ClockConfig+0x1bc>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800728a:	2b00      	cmp	r3, #0
 800728c:	d119      	bne.n	80072c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800728e:	2301      	movs	r3, #1
 8007290:	e07f      	b.n	8007392 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	2b02      	cmp	r3, #2
 8007298:	d003      	beq.n	80072a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800729e:	2b03      	cmp	r3, #3
 80072a0:	d107      	bne.n	80072b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80072a2:	4b3f      	ldr	r3, [pc, #252]	; (80073a0 <HAL_RCC_ClockConfig+0x1bc>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d109      	bne.n	80072c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80072ae:	2301      	movs	r3, #1
 80072b0:	e06f      	b.n	8007392 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072b2:	4b3b      	ldr	r3, [pc, #236]	; (80073a0 <HAL_RCC_ClockConfig+0x1bc>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f003 0302 	and.w	r3, r3, #2
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d101      	bne.n	80072c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80072be:	2301      	movs	r3, #1
 80072c0:	e067      	b.n	8007392 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80072c2:	4b37      	ldr	r3, [pc, #220]	; (80073a0 <HAL_RCC_ClockConfig+0x1bc>)
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	f023 0203 	bic.w	r2, r3, #3
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	4934      	ldr	r1, [pc, #208]	; (80073a0 <HAL_RCC_ClockConfig+0x1bc>)
 80072d0:	4313      	orrs	r3, r2
 80072d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80072d4:	f7fe f82c 	bl	8005330 <HAL_GetTick>
 80072d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072da:	e00a      	b.n	80072f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80072dc:	f7fe f828 	bl	8005330 <HAL_GetTick>
 80072e0:	4602      	mov	r2, r0
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	1ad3      	subs	r3, r2, r3
 80072e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d901      	bls.n	80072f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80072ee:	2303      	movs	r3, #3
 80072f0:	e04f      	b.n	8007392 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072f2:	4b2b      	ldr	r3, [pc, #172]	; (80073a0 <HAL_RCC_ClockConfig+0x1bc>)
 80072f4:	689b      	ldr	r3, [r3, #8]
 80072f6:	f003 020c 	and.w	r2, r3, #12
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	009b      	lsls	r3, r3, #2
 8007300:	429a      	cmp	r2, r3
 8007302:	d1eb      	bne.n	80072dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007304:	4b25      	ldr	r3, [pc, #148]	; (800739c <HAL_RCC_ClockConfig+0x1b8>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f003 0307 	and.w	r3, r3, #7
 800730c:	683a      	ldr	r2, [r7, #0]
 800730e:	429a      	cmp	r2, r3
 8007310:	d20c      	bcs.n	800732c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007312:	4b22      	ldr	r3, [pc, #136]	; (800739c <HAL_RCC_ClockConfig+0x1b8>)
 8007314:	683a      	ldr	r2, [r7, #0]
 8007316:	b2d2      	uxtb	r2, r2
 8007318:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800731a:	4b20      	ldr	r3, [pc, #128]	; (800739c <HAL_RCC_ClockConfig+0x1b8>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f003 0307 	and.w	r3, r3, #7
 8007322:	683a      	ldr	r2, [r7, #0]
 8007324:	429a      	cmp	r2, r3
 8007326:	d001      	beq.n	800732c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007328:	2301      	movs	r3, #1
 800732a:	e032      	b.n	8007392 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f003 0304 	and.w	r3, r3, #4
 8007334:	2b00      	cmp	r3, #0
 8007336:	d008      	beq.n	800734a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007338:	4b19      	ldr	r3, [pc, #100]	; (80073a0 <HAL_RCC_ClockConfig+0x1bc>)
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	68db      	ldr	r3, [r3, #12]
 8007344:	4916      	ldr	r1, [pc, #88]	; (80073a0 <HAL_RCC_ClockConfig+0x1bc>)
 8007346:	4313      	orrs	r3, r2
 8007348:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f003 0308 	and.w	r3, r3, #8
 8007352:	2b00      	cmp	r3, #0
 8007354:	d009      	beq.n	800736a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007356:	4b12      	ldr	r3, [pc, #72]	; (80073a0 <HAL_RCC_ClockConfig+0x1bc>)
 8007358:	689b      	ldr	r3, [r3, #8]
 800735a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	691b      	ldr	r3, [r3, #16]
 8007362:	00db      	lsls	r3, r3, #3
 8007364:	490e      	ldr	r1, [pc, #56]	; (80073a0 <HAL_RCC_ClockConfig+0x1bc>)
 8007366:	4313      	orrs	r3, r2
 8007368:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800736a:	f000 f821 	bl	80073b0 <HAL_RCC_GetSysClockFreq>
 800736e:	4602      	mov	r2, r0
 8007370:	4b0b      	ldr	r3, [pc, #44]	; (80073a0 <HAL_RCC_ClockConfig+0x1bc>)
 8007372:	689b      	ldr	r3, [r3, #8]
 8007374:	091b      	lsrs	r3, r3, #4
 8007376:	f003 030f 	and.w	r3, r3, #15
 800737a:	490a      	ldr	r1, [pc, #40]	; (80073a4 <HAL_RCC_ClockConfig+0x1c0>)
 800737c:	5ccb      	ldrb	r3, [r1, r3]
 800737e:	fa22 f303 	lsr.w	r3, r2, r3
 8007382:	4a09      	ldr	r2, [pc, #36]	; (80073a8 <HAL_RCC_ClockConfig+0x1c4>)
 8007384:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007386:	4b09      	ldr	r3, [pc, #36]	; (80073ac <HAL_RCC_ClockConfig+0x1c8>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4618      	mov	r0, r3
 800738c:	f7fd ff8c 	bl	80052a8 <HAL_InitTick>

  return HAL_OK;
 8007390:	2300      	movs	r3, #0
}
 8007392:	4618      	mov	r0, r3
 8007394:	3710      	adds	r7, #16
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}
 800739a:	bf00      	nop
 800739c:	40023c00 	.word	0x40023c00
 80073a0:	40023800 	.word	0x40023800
 80073a4:	0800b470 	.word	0x0800b470
 80073a8:	20000010 	.word	0x20000010
 80073ac:	2000001c 	.word	0x2000001c

080073b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80073b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80073b4:	b084      	sub	sp, #16
 80073b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80073b8:	2300      	movs	r3, #0
 80073ba:	607b      	str	r3, [r7, #4]
 80073bc:	2300      	movs	r3, #0
 80073be:	60fb      	str	r3, [r7, #12]
 80073c0:	2300      	movs	r3, #0
 80073c2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80073c4:	2300      	movs	r3, #0
 80073c6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80073c8:	4b67      	ldr	r3, [pc, #412]	; (8007568 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80073ca:	689b      	ldr	r3, [r3, #8]
 80073cc:	f003 030c 	and.w	r3, r3, #12
 80073d0:	2b08      	cmp	r3, #8
 80073d2:	d00d      	beq.n	80073f0 <HAL_RCC_GetSysClockFreq+0x40>
 80073d4:	2b08      	cmp	r3, #8
 80073d6:	f200 80bd 	bhi.w	8007554 <HAL_RCC_GetSysClockFreq+0x1a4>
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d002      	beq.n	80073e4 <HAL_RCC_GetSysClockFreq+0x34>
 80073de:	2b04      	cmp	r3, #4
 80073e0:	d003      	beq.n	80073ea <HAL_RCC_GetSysClockFreq+0x3a>
 80073e2:	e0b7      	b.n	8007554 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80073e4:	4b61      	ldr	r3, [pc, #388]	; (800756c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80073e6:	60bb      	str	r3, [r7, #8]
       break;
 80073e8:	e0b7      	b.n	800755a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80073ea:	4b60      	ldr	r3, [pc, #384]	; (800756c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80073ec:	60bb      	str	r3, [r7, #8]
      break;
 80073ee:	e0b4      	b.n	800755a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80073f0:	4b5d      	ldr	r3, [pc, #372]	; (8007568 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80073f8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80073fa:	4b5b      	ldr	r3, [pc, #364]	; (8007568 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007402:	2b00      	cmp	r3, #0
 8007404:	d04d      	beq.n	80074a2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007406:	4b58      	ldr	r3, [pc, #352]	; (8007568 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	099b      	lsrs	r3, r3, #6
 800740c:	461a      	mov	r2, r3
 800740e:	f04f 0300 	mov.w	r3, #0
 8007412:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007416:	f04f 0100 	mov.w	r1, #0
 800741a:	ea02 0800 	and.w	r8, r2, r0
 800741e:	ea03 0901 	and.w	r9, r3, r1
 8007422:	4640      	mov	r0, r8
 8007424:	4649      	mov	r1, r9
 8007426:	f04f 0200 	mov.w	r2, #0
 800742a:	f04f 0300 	mov.w	r3, #0
 800742e:	014b      	lsls	r3, r1, #5
 8007430:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007434:	0142      	lsls	r2, r0, #5
 8007436:	4610      	mov	r0, r2
 8007438:	4619      	mov	r1, r3
 800743a:	ebb0 0008 	subs.w	r0, r0, r8
 800743e:	eb61 0109 	sbc.w	r1, r1, r9
 8007442:	f04f 0200 	mov.w	r2, #0
 8007446:	f04f 0300 	mov.w	r3, #0
 800744a:	018b      	lsls	r3, r1, #6
 800744c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007450:	0182      	lsls	r2, r0, #6
 8007452:	1a12      	subs	r2, r2, r0
 8007454:	eb63 0301 	sbc.w	r3, r3, r1
 8007458:	f04f 0000 	mov.w	r0, #0
 800745c:	f04f 0100 	mov.w	r1, #0
 8007460:	00d9      	lsls	r1, r3, #3
 8007462:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007466:	00d0      	lsls	r0, r2, #3
 8007468:	4602      	mov	r2, r0
 800746a:	460b      	mov	r3, r1
 800746c:	eb12 0208 	adds.w	r2, r2, r8
 8007470:	eb43 0309 	adc.w	r3, r3, r9
 8007474:	f04f 0000 	mov.w	r0, #0
 8007478:	f04f 0100 	mov.w	r1, #0
 800747c:	0299      	lsls	r1, r3, #10
 800747e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007482:	0290      	lsls	r0, r2, #10
 8007484:	4602      	mov	r2, r0
 8007486:	460b      	mov	r3, r1
 8007488:	4610      	mov	r0, r2
 800748a:	4619      	mov	r1, r3
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	461a      	mov	r2, r3
 8007490:	f04f 0300 	mov.w	r3, #0
 8007494:	f7f9 fa02 	bl	800089c <__aeabi_uldivmod>
 8007498:	4602      	mov	r2, r0
 800749a:	460b      	mov	r3, r1
 800749c:	4613      	mov	r3, r2
 800749e:	60fb      	str	r3, [r7, #12]
 80074a0:	e04a      	b.n	8007538 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80074a2:	4b31      	ldr	r3, [pc, #196]	; (8007568 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	099b      	lsrs	r3, r3, #6
 80074a8:	461a      	mov	r2, r3
 80074aa:	f04f 0300 	mov.w	r3, #0
 80074ae:	f240 10ff 	movw	r0, #511	; 0x1ff
 80074b2:	f04f 0100 	mov.w	r1, #0
 80074b6:	ea02 0400 	and.w	r4, r2, r0
 80074ba:	ea03 0501 	and.w	r5, r3, r1
 80074be:	4620      	mov	r0, r4
 80074c0:	4629      	mov	r1, r5
 80074c2:	f04f 0200 	mov.w	r2, #0
 80074c6:	f04f 0300 	mov.w	r3, #0
 80074ca:	014b      	lsls	r3, r1, #5
 80074cc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80074d0:	0142      	lsls	r2, r0, #5
 80074d2:	4610      	mov	r0, r2
 80074d4:	4619      	mov	r1, r3
 80074d6:	1b00      	subs	r0, r0, r4
 80074d8:	eb61 0105 	sbc.w	r1, r1, r5
 80074dc:	f04f 0200 	mov.w	r2, #0
 80074e0:	f04f 0300 	mov.w	r3, #0
 80074e4:	018b      	lsls	r3, r1, #6
 80074e6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80074ea:	0182      	lsls	r2, r0, #6
 80074ec:	1a12      	subs	r2, r2, r0
 80074ee:	eb63 0301 	sbc.w	r3, r3, r1
 80074f2:	f04f 0000 	mov.w	r0, #0
 80074f6:	f04f 0100 	mov.w	r1, #0
 80074fa:	00d9      	lsls	r1, r3, #3
 80074fc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007500:	00d0      	lsls	r0, r2, #3
 8007502:	4602      	mov	r2, r0
 8007504:	460b      	mov	r3, r1
 8007506:	1912      	adds	r2, r2, r4
 8007508:	eb45 0303 	adc.w	r3, r5, r3
 800750c:	f04f 0000 	mov.w	r0, #0
 8007510:	f04f 0100 	mov.w	r1, #0
 8007514:	0299      	lsls	r1, r3, #10
 8007516:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800751a:	0290      	lsls	r0, r2, #10
 800751c:	4602      	mov	r2, r0
 800751e:	460b      	mov	r3, r1
 8007520:	4610      	mov	r0, r2
 8007522:	4619      	mov	r1, r3
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	461a      	mov	r2, r3
 8007528:	f04f 0300 	mov.w	r3, #0
 800752c:	f7f9 f9b6 	bl	800089c <__aeabi_uldivmod>
 8007530:	4602      	mov	r2, r0
 8007532:	460b      	mov	r3, r1
 8007534:	4613      	mov	r3, r2
 8007536:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007538:	4b0b      	ldr	r3, [pc, #44]	; (8007568 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	0c1b      	lsrs	r3, r3, #16
 800753e:	f003 0303 	and.w	r3, r3, #3
 8007542:	3301      	adds	r3, #1
 8007544:	005b      	lsls	r3, r3, #1
 8007546:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007548:	68fa      	ldr	r2, [r7, #12]
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007550:	60bb      	str	r3, [r7, #8]
      break;
 8007552:	e002      	b.n	800755a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007554:	4b05      	ldr	r3, [pc, #20]	; (800756c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007556:	60bb      	str	r3, [r7, #8]
      break;
 8007558:	bf00      	nop
    }
  }
  return sysclockfreq;
 800755a:	68bb      	ldr	r3, [r7, #8]
}
 800755c:	4618      	mov	r0, r3
 800755e:	3710      	adds	r7, #16
 8007560:	46bd      	mov	sp, r7
 8007562:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007566:	bf00      	nop
 8007568:	40023800 	.word	0x40023800
 800756c:	00f42400 	.word	0x00f42400

08007570 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007570:	b480      	push	{r7}
 8007572:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007574:	4b03      	ldr	r3, [pc, #12]	; (8007584 <HAL_RCC_GetHCLKFreq+0x14>)
 8007576:	681b      	ldr	r3, [r3, #0]
}
 8007578:	4618      	mov	r0, r3
 800757a:	46bd      	mov	sp, r7
 800757c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007580:	4770      	bx	lr
 8007582:	bf00      	nop
 8007584:	20000010 	.word	0x20000010

08007588 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800758c:	f7ff fff0 	bl	8007570 <HAL_RCC_GetHCLKFreq>
 8007590:	4602      	mov	r2, r0
 8007592:	4b05      	ldr	r3, [pc, #20]	; (80075a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007594:	689b      	ldr	r3, [r3, #8]
 8007596:	0a9b      	lsrs	r3, r3, #10
 8007598:	f003 0307 	and.w	r3, r3, #7
 800759c:	4903      	ldr	r1, [pc, #12]	; (80075ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800759e:	5ccb      	ldrb	r3, [r1, r3]
 80075a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	bd80      	pop	{r7, pc}
 80075a8:	40023800 	.word	0x40023800
 80075ac:	0800b480 	.word	0x0800b480

080075b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80075b4:	f7ff ffdc 	bl	8007570 <HAL_RCC_GetHCLKFreq>
 80075b8:	4602      	mov	r2, r0
 80075ba:	4b05      	ldr	r3, [pc, #20]	; (80075d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80075bc:	689b      	ldr	r3, [r3, #8]
 80075be:	0b5b      	lsrs	r3, r3, #13
 80075c0:	f003 0307 	and.w	r3, r3, #7
 80075c4:	4903      	ldr	r1, [pc, #12]	; (80075d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80075c6:	5ccb      	ldrb	r3, [r1, r3]
 80075c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	bd80      	pop	{r7, pc}
 80075d0:	40023800 	.word	0x40023800
 80075d4:	0800b480 	.word	0x0800b480

080075d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b082      	sub	sp, #8
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d101      	bne.n	80075ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80075e6:	2301      	movs	r3, #1
 80075e8:	e07b      	b.n	80076e2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d108      	bne.n	8007604 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	685b      	ldr	r3, [r3, #4]
 80075f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80075fa:	d009      	beq.n	8007610 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2200      	movs	r2, #0
 8007600:	61da      	str	r2, [r3, #28]
 8007602:	e005      	b.n	8007610 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2200      	movs	r2, #0
 8007608:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2200      	movs	r2, #0
 800760e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2200      	movs	r2, #0
 8007614:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800761c:	b2db      	uxtb	r3, r3
 800761e:	2b00      	cmp	r3, #0
 8007620:	d106      	bne.n	8007630 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2200      	movs	r2, #0
 8007626:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f7fd f986 	bl	800493c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2202      	movs	r2, #2
 8007634:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	681a      	ldr	r2, [r3, #0]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007646:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	689b      	ldr	r3, [r3, #8]
 8007654:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007658:	431a      	orrs	r2, r3
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	68db      	ldr	r3, [r3, #12]
 800765e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007662:	431a      	orrs	r2, r3
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	691b      	ldr	r3, [r3, #16]
 8007668:	f003 0302 	and.w	r3, r3, #2
 800766c:	431a      	orrs	r2, r3
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	695b      	ldr	r3, [r3, #20]
 8007672:	f003 0301 	and.w	r3, r3, #1
 8007676:	431a      	orrs	r2, r3
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	699b      	ldr	r3, [r3, #24]
 800767c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007680:	431a      	orrs	r2, r3
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	69db      	ldr	r3, [r3, #28]
 8007686:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800768a:	431a      	orrs	r2, r3
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6a1b      	ldr	r3, [r3, #32]
 8007690:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007694:	ea42 0103 	orr.w	r1, r2, r3
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800769c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	430a      	orrs	r2, r1
 80076a6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	699b      	ldr	r3, [r3, #24]
 80076ac:	0c1b      	lsrs	r3, r3, #16
 80076ae:	f003 0104 	and.w	r1, r3, #4
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b6:	f003 0210 	and.w	r2, r3, #16
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	430a      	orrs	r2, r1
 80076c0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	69da      	ldr	r2, [r3, #28]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80076d0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2200      	movs	r2, #0
 80076d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2201      	movs	r2, #1
 80076dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80076e0:	2300      	movs	r3, #0
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3708      	adds	r7, #8
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}

080076ea <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80076ea:	b580      	push	{r7, lr}
 80076ec:	b084      	sub	sp, #16
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	60f8      	str	r0, [r7, #12]
 80076f2:	60b9      	str	r1, [r7, #8]
 80076f4:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d101      	bne.n	8007700 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 80076fc:	2301      	movs	r3, #1
 80076fe:	e038      	b.n	8007772 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8007706:	b2db      	uxtb	r3, r3
 8007708:	2b00      	cmp	r3, #0
 800770a:	d106      	bne.n	800771a <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2200      	movs	r2, #0
 8007710:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8007714:	68f8      	ldr	r0, [r7, #12]
 8007716:	f7fd fa8d 	bl	8004c34 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681a      	ldr	r2, [r3, #0]
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	3308      	adds	r3, #8
 8007722:	4619      	mov	r1, r3
 8007724:	4610      	mov	r0, r2
 8007726:	f001 fd1d 	bl	8009164 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	6818      	ldr	r0, [r3, #0]
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	689b      	ldr	r3, [r3, #8]
 8007732:	461a      	mov	r2, r3
 8007734:	68b9      	ldr	r1, [r7, #8]
 8007736:	f001 fd7f 	bl	8009238 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	6858      	ldr	r0, [r3, #4]
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	689a      	ldr	r2, [r3, #8]
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007746:	6879      	ldr	r1, [r7, #4]
 8007748:	f001 fdac 	bl	80092a4 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	68fa      	ldr	r2, [r7, #12]
 8007752:	6892      	ldr	r2, [r2, #8]
 8007754:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	68fa      	ldr	r2, [r7, #12]
 800775e:	6892      	ldr	r2, [r2, #8]
 8007760:	f041 0101 	orr.w	r1, r1, #1
 8007764:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2201      	movs	r2, #1
 800776c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 8007770:	2300      	movs	r3, #0
}
 8007772:	4618      	mov	r0, r3
 8007774:	3710      	adds	r7, #16
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}

0800777a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800777a:	b580      	push	{r7, lr}
 800777c:	b082      	sub	sp, #8
 800777e:	af00      	add	r7, sp, #0
 8007780:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d101      	bne.n	800778c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007788:	2301      	movs	r3, #1
 800778a:	e041      	b.n	8007810 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007792:	b2db      	uxtb	r3, r3
 8007794:	2b00      	cmp	r3, #0
 8007796:	d106      	bne.n	80077a6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2200      	movs	r2, #0
 800779c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f7fd f913 	bl	80049cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2202      	movs	r2, #2
 80077aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681a      	ldr	r2, [r3, #0]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	3304      	adds	r3, #4
 80077b6:	4619      	mov	r1, r3
 80077b8:	4610      	mov	r0, r2
 80077ba:	f000 fa27 	bl	8007c0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2201      	movs	r2, #1
 80077c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2201      	movs	r2, #1
 80077ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2201      	movs	r2, #1
 80077d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2201      	movs	r2, #1
 80077da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2201      	movs	r2, #1
 80077e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2201      	movs	r2, #1
 80077ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2201      	movs	r2, #1
 80077f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2201      	movs	r2, #1
 80077fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2201      	movs	r2, #1
 8007802:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2201      	movs	r2, #1
 800780a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800780e:	2300      	movs	r3, #0
}
 8007810:	4618      	mov	r0, r3
 8007812:	3708      	adds	r7, #8
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}

08007818 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b084      	sub	sp, #16
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
 8007820:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d109      	bne.n	800783c <HAL_TIM_PWM_Start+0x24>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800782e:	b2db      	uxtb	r3, r3
 8007830:	2b01      	cmp	r3, #1
 8007832:	bf14      	ite	ne
 8007834:	2301      	movne	r3, #1
 8007836:	2300      	moveq	r3, #0
 8007838:	b2db      	uxtb	r3, r3
 800783a:	e022      	b.n	8007882 <HAL_TIM_PWM_Start+0x6a>
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	2b04      	cmp	r3, #4
 8007840:	d109      	bne.n	8007856 <HAL_TIM_PWM_Start+0x3e>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007848:	b2db      	uxtb	r3, r3
 800784a:	2b01      	cmp	r3, #1
 800784c:	bf14      	ite	ne
 800784e:	2301      	movne	r3, #1
 8007850:	2300      	moveq	r3, #0
 8007852:	b2db      	uxtb	r3, r3
 8007854:	e015      	b.n	8007882 <HAL_TIM_PWM_Start+0x6a>
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	2b08      	cmp	r3, #8
 800785a:	d109      	bne.n	8007870 <HAL_TIM_PWM_Start+0x58>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007862:	b2db      	uxtb	r3, r3
 8007864:	2b01      	cmp	r3, #1
 8007866:	bf14      	ite	ne
 8007868:	2301      	movne	r3, #1
 800786a:	2300      	moveq	r3, #0
 800786c:	b2db      	uxtb	r3, r3
 800786e:	e008      	b.n	8007882 <HAL_TIM_PWM_Start+0x6a>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007876:	b2db      	uxtb	r3, r3
 8007878:	2b01      	cmp	r3, #1
 800787a:	bf14      	ite	ne
 800787c:	2301      	movne	r3, #1
 800787e:	2300      	moveq	r3, #0
 8007880:	b2db      	uxtb	r3, r3
 8007882:	2b00      	cmp	r3, #0
 8007884:	d001      	beq.n	800788a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007886:	2301      	movs	r3, #1
 8007888:	e07c      	b.n	8007984 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d104      	bne.n	800789a <HAL_TIM_PWM_Start+0x82>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2202      	movs	r2, #2
 8007894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007898:	e013      	b.n	80078c2 <HAL_TIM_PWM_Start+0xaa>
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	2b04      	cmp	r3, #4
 800789e:	d104      	bne.n	80078aa <HAL_TIM_PWM_Start+0x92>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2202      	movs	r2, #2
 80078a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80078a8:	e00b      	b.n	80078c2 <HAL_TIM_PWM_Start+0xaa>
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	2b08      	cmp	r3, #8
 80078ae:	d104      	bne.n	80078ba <HAL_TIM_PWM_Start+0xa2>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2202      	movs	r2, #2
 80078b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80078b8:	e003      	b.n	80078c2 <HAL_TIM_PWM_Start+0xaa>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2202      	movs	r2, #2
 80078be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	2201      	movs	r2, #1
 80078c8:	6839      	ldr	r1, [r7, #0]
 80078ca:	4618      	mov	r0, r3
 80078cc:	f000 fbee 	bl	80080ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4a2d      	ldr	r2, [pc, #180]	; (800798c <HAL_TIM_PWM_Start+0x174>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d004      	beq.n	80078e4 <HAL_TIM_PWM_Start+0xcc>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4a2c      	ldr	r2, [pc, #176]	; (8007990 <HAL_TIM_PWM_Start+0x178>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d101      	bne.n	80078e8 <HAL_TIM_PWM_Start+0xd0>
 80078e4:	2301      	movs	r3, #1
 80078e6:	e000      	b.n	80078ea <HAL_TIM_PWM_Start+0xd2>
 80078e8:	2300      	movs	r3, #0
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d007      	beq.n	80078fe <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80078fc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4a22      	ldr	r2, [pc, #136]	; (800798c <HAL_TIM_PWM_Start+0x174>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d022      	beq.n	800794e <HAL_TIM_PWM_Start+0x136>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007910:	d01d      	beq.n	800794e <HAL_TIM_PWM_Start+0x136>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4a1f      	ldr	r2, [pc, #124]	; (8007994 <HAL_TIM_PWM_Start+0x17c>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d018      	beq.n	800794e <HAL_TIM_PWM_Start+0x136>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4a1d      	ldr	r2, [pc, #116]	; (8007998 <HAL_TIM_PWM_Start+0x180>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d013      	beq.n	800794e <HAL_TIM_PWM_Start+0x136>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4a1c      	ldr	r2, [pc, #112]	; (800799c <HAL_TIM_PWM_Start+0x184>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d00e      	beq.n	800794e <HAL_TIM_PWM_Start+0x136>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a16      	ldr	r2, [pc, #88]	; (8007990 <HAL_TIM_PWM_Start+0x178>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d009      	beq.n	800794e <HAL_TIM_PWM_Start+0x136>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4a18      	ldr	r2, [pc, #96]	; (80079a0 <HAL_TIM_PWM_Start+0x188>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d004      	beq.n	800794e <HAL_TIM_PWM_Start+0x136>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a16      	ldr	r2, [pc, #88]	; (80079a4 <HAL_TIM_PWM_Start+0x18c>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d111      	bne.n	8007972 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	689b      	ldr	r3, [r3, #8]
 8007954:	f003 0307 	and.w	r3, r3, #7
 8007958:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	2b06      	cmp	r3, #6
 800795e:	d010      	beq.n	8007982 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	681a      	ldr	r2, [r3, #0]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f042 0201 	orr.w	r2, r2, #1
 800796e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007970:	e007      	b.n	8007982 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	681a      	ldr	r2, [r3, #0]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f042 0201 	orr.w	r2, r2, #1
 8007980:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007982:	2300      	movs	r3, #0
}
 8007984:	4618      	mov	r0, r3
 8007986:	3710      	adds	r7, #16
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}
 800798c:	40010000 	.word	0x40010000
 8007990:	40010400 	.word	0x40010400
 8007994:	40000400 	.word	0x40000400
 8007998:	40000800 	.word	0x40000800
 800799c:	40000c00 	.word	0x40000c00
 80079a0:	40014000 	.word	0x40014000
 80079a4:	40001800 	.word	0x40001800

080079a8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b082      	sub	sp, #8
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	2200      	movs	r2, #0
 80079b8:	6839      	ldr	r1, [r7, #0]
 80079ba:	4618      	mov	r0, r3
 80079bc:	f000 fb76 	bl	80080ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4a2e      	ldr	r2, [pc, #184]	; (8007a80 <HAL_TIM_PWM_Stop+0xd8>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d004      	beq.n	80079d4 <HAL_TIM_PWM_Stop+0x2c>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	4a2d      	ldr	r2, [pc, #180]	; (8007a84 <HAL_TIM_PWM_Stop+0xdc>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d101      	bne.n	80079d8 <HAL_TIM_PWM_Stop+0x30>
 80079d4:	2301      	movs	r3, #1
 80079d6:	e000      	b.n	80079da <HAL_TIM_PWM_Stop+0x32>
 80079d8:	2300      	movs	r3, #0
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d017      	beq.n	8007a0e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	6a1a      	ldr	r2, [r3, #32]
 80079e4:	f241 1311 	movw	r3, #4369	; 0x1111
 80079e8:	4013      	ands	r3, r2
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d10f      	bne.n	8007a0e <HAL_TIM_PWM_Stop+0x66>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	6a1a      	ldr	r2, [r3, #32]
 80079f4:	f240 4344 	movw	r3, #1092	; 0x444
 80079f8:	4013      	ands	r3, r2
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d107      	bne.n	8007a0e <HAL_TIM_PWM_Stop+0x66>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007a0c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	6a1a      	ldr	r2, [r3, #32]
 8007a14:	f241 1311 	movw	r3, #4369	; 0x1111
 8007a18:	4013      	ands	r3, r2
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d10f      	bne.n	8007a3e <HAL_TIM_PWM_Stop+0x96>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	6a1a      	ldr	r2, [r3, #32]
 8007a24:	f240 4344 	movw	r3, #1092	; 0x444
 8007a28:	4013      	ands	r3, r2
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d107      	bne.n	8007a3e <HAL_TIM_PWM_Stop+0x96>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	681a      	ldr	r2, [r3, #0]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f022 0201 	bic.w	r2, r2, #1
 8007a3c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d104      	bne.n	8007a4e <HAL_TIM_PWM_Stop+0xa6>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2201      	movs	r2, #1
 8007a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a4c:	e013      	b.n	8007a76 <HAL_TIM_PWM_Stop+0xce>
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	2b04      	cmp	r3, #4
 8007a52:	d104      	bne.n	8007a5e <HAL_TIM_PWM_Stop+0xb6>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2201      	movs	r2, #1
 8007a58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a5c:	e00b      	b.n	8007a76 <HAL_TIM_PWM_Stop+0xce>
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	2b08      	cmp	r3, #8
 8007a62:	d104      	bne.n	8007a6e <HAL_TIM_PWM_Stop+0xc6>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2201      	movs	r2, #1
 8007a68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a6c:	e003      	b.n	8007a76 <HAL_TIM_PWM_Stop+0xce>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2201      	movs	r2, #1
 8007a72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8007a76:	2300      	movs	r3, #0
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	3708      	adds	r7, #8
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}
 8007a80:	40010000 	.word	0x40010000
 8007a84:	40010400 	.word	0x40010400

08007a88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b086      	sub	sp, #24
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	60f8      	str	r0, [r7, #12]
 8007a90:	60b9      	str	r1, [r7, #8]
 8007a92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a94:	2300      	movs	r3, #0
 8007a96:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a9e:	2b01      	cmp	r3, #1
 8007aa0:	d101      	bne.n	8007aa6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007aa2:	2302      	movs	r3, #2
 8007aa4:	e0ae      	b.n	8007c04 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	2201      	movs	r2, #1
 8007aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2b0c      	cmp	r3, #12
 8007ab2:	f200 809f 	bhi.w	8007bf4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007ab6:	a201      	add	r2, pc, #4	; (adr r2, 8007abc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007abc:	08007af1 	.word	0x08007af1
 8007ac0:	08007bf5 	.word	0x08007bf5
 8007ac4:	08007bf5 	.word	0x08007bf5
 8007ac8:	08007bf5 	.word	0x08007bf5
 8007acc:	08007b31 	.word	0x08007b31
 8007ad0:	08007bf5 	.word	0x08007bf5
 8007ad4:	08007bf5 	.word	0x08007bf5
 8007ad8:	08007bf5 	.word	0x08007bf5
 8007adc:	08007b73 	.word	0x08007b73
 8007ae0:	08007bf5 	.word	0x08007bf5
 8007ae4:	08007bf5 	.word	0x08007bf5
 8007ae8:	08007bf5 	.word	0x08007bf5
 8007aec:	08007bb3 	.word	0x08007bb3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	68b9      	ldr	r1, [r7, #8]
 8007af6:	4618      	mov	r0, r3
 8007af8:	f000 f928 	bl	8007d4c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	699a      	ldr	r2, [r3, #24]
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f042 0208 	orr.w	r2, r2, #8
 8007b0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	699a      	ldr	r2, [r3, #24]
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f022 0204 	bic.w	r2, r2, #4
 8007b1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	6999      	ldr	r1, [r3, #24]
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	691a      	ldr	r2, [r3, #16]
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	430a      	orrs	r2, r1
 8007b2c:	619a      	str	r2, [r3, #24]
      break;
 8007b2e:	e064      	b.n	8007bfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	68b9      	ldr	r1, [r7, #8]
 8007b36:	4618      	mov	r0, r3
 8007b38:	f000 f978 	bl	8007e2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	699a      	ldr	r2, [r3, #24]
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	699a      	ldr	r2, [r3, #24]
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	6999      	ldr	r1, [r3, #24]
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	691b      	ldr	r3, [r3, #16]
 8007b66:	021a      	lsls	r2, r3, #8
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	430a      	orrs	r2, r1
 8007b6e:	619a      	str	r2, [r3, #24]
      break;
 8007b70:	e043      	b.n	8007bfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	68b9      	ldr	r1, [r7, #8]
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f000 f9cd 	bl	8007f18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	69da      	ldr	r2, [r3, #28]
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f042 0208 	orr.w	r2, r2, #8
 8007b8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	69da      	ldr	r2, [r3, #28]
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f022 0204 	bic.w	r2, r2, #4
 8007b9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	69d9      	ldr	r1, [r3, #28]
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	691a      	ldr	r2, [r3, #16]
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	430a      	orrs	r2, r1
 8007bae:	61da      	str	r2, [r3, #28]
      break;
 8007bb0:	e023      	b.n	8007bfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	68b9      	ldr	r1, [r7, #8]
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f000 fa21 	bl	8008000 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	69da      	ldr	r2, [r3, #28]
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007bcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	69da      	ldr	r2, [r3, #28]
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007bdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	69d9      	ldr	r1, [r3, #28]
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	691b      	ldr	r3, [r3, #16]
 8007be8:	021a      	lsls	r2, r3, #8
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	430a      	orrs	r2, r1
 8007bf0:	61da      	str	r2, [r3, #28]
      break;
 8007bf2:	e002      	b.n	8007bfa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	75fb      	strb	r3, [r7, #23]
      break;
 8007bf8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007c02:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	3718      	adds	r7, #24
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}

08007c0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b085      	sub	sp, #20
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
 8007c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	4a40      	ldr	r2, [pc, #256]	; (8007d20 <TIM_Base_SetConfig+0x114>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d013      	beq.n	8007c4c <TIM_Base_SetConfig+0x40>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c2a:	d00f      	beq.n	8007c4c <TIM_Base_SetConfig+0x40>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	4a3d      	ldr	r2, [pc, #244]	; (8007d24 <TIM_Base_SetConfig+0x118>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d00b      	beq.n	8007c4c <TIM_Base_SetConfig+0x40>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	4a3c      	ldr	r2, [pc, #240]	; (8007d28 <TIM_Base_SetConfig+0x11c>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d007      	beq.n	8007c4c <TIM_Base_SetConfig+0x40>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	4a3b      	ldr	r2, [pc, #236]	; (8007d2c <TIM_Base_SetConfig+0x120>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d003      	beq.n	8007c4c <TIM_Base_SetConfig+0x40>
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	4a3a      	ldr	r2, [pc, #232]	; (8007d30 <TIM_Base_SetConfig+0x124>)
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d108      	bne.n	8007c5e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	685b      	ldr	r3, [r3, #4]
 8007c58:	68fa      	ldr	r2, [r7, #12]
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	4a2f      	ldr	r2, [pc, #188]	; (8007d20 <TIM_Base_SetConfig+0x114>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d02b      	beq.n	8007cbe <TIM_Base_SetConfig+0xb2>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c6c:	d027      	beq.n	8007cbe <TIM_Base_SetConfig+0xb2>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	4a2c      	ldr	r2, [pc, #176]	; (8007d24 <TIM_Base_SetConfig+0x118>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d023      	beq.n	8007cbe <TIM_Base_SetConfig+0xb2>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	4a2b      	ldr	r2, [pc, #172]	; (8007d28 <TIM_Base_SetConfig+0x11c>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d01f      	beq.n	8007cbe <TIM_Base_SetConfig+0xb2>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	4a2a      	ldr	r2, [pc, #168]	; (8007d2c <TIM_Base_SetConfig+0x120>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d01b      	beq.n	8007cbe <TIM_Base_SetConfig+0xb2>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	4a29      	ldr	r2, [pc, #164]	; (8007d30 <TIM_Base_SetConfig+0x124>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d017      	beq.n	8007cbe <TIM_Base_SetConfig+0xb2>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	4a28      	ldr	r2, [pc, #160]	; (8007d34 <TIM_Base_SetConfig+0x128>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d013      	beq.n	8007cbe <TIM_Base_SetConfig+0xb2>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	4a27      	ldr	r2, [pc, #156]	; (8007d38 <TIM_Base_SetConfig+0x12c>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d00f      	beq.n	8007cbe <TIM_Base_SetConfig+0xb2>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	4a26      	ldr	r2, [pc, #152]	; (8007d3c <TIM_Base_SetConfig+0x130>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d00b      	beq.n	8007cbe <TIM_Base_SetConfig+0xb2>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	4a25      	ldr	r2, [pc, #148]	; (8007d40 <TIM_Base_SetConfig+0x134>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d007      	beq.n	8007cbe <TIM_Base_SetConfig+0xb2>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	4a24      	ldr	r2, [pc, #144]	; (8007d44 <TIM_Base_SetConfig+0x138>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d003      	beq.n	8007cbe <TIM_Base_SetConfig+0xb2>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	4a23      	ldr	r2, [pc, #140]	; (8007d48 <TIM_Base_SetConfig+0x13c>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d108      	bne.n	8007cd0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	68db      	ldr	r3, [r3, #12]
 8007cca:	68fa      	ldr	r2, [r7, #12]
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	695b      	ldr	r3, [r3, #20]
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	68fa      	ldr	r2, [r7, #12]
 8007ce2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	689a      	ldr	r2, [r3, #8]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	681a      	ldr	r2, [r3, #0]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	4a0a      	ldr	r2, [pc, #40]	; (8007d20 <TIM_Base_SetConfig+0x114>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d003      	beq.n	8007d04 <TIM_Base_SetConfig+0xf8>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	4a0c      	ldr	r2, [pc, #48]	; (8007d30 <TIM_Base_SetConfig+0x124>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d103      	bne.n	8007d0c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	691a      	ldr	r2, [r3, #16]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2201      	movs	r2, #1
 8007d10:	615a      	str	r2, [r3, #20]
}
 8007d12:	bf00      	nop
 8007d14:	3714      	adds	r7, #20
 8007d16:	46bd      	mov	sp, r7
 8007d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1c:	4770      	bx	lr
 8007d1e:	bf00      	nop
 8007d20:	40010000 	.word	0x40010000
 8007d24:	40000400 	.word	0x40000400
 8007d28:	40000800 	.word	0x40000800
 8007d2c:	40000c00 	.word	0x40000c00
 8007d30:	40010400 	.word	0x40010400
 8007d34:	40014000 	.word	0x40014000
 8007d38:	40014400 	.word	0x40014400
 8007d3c:	40014800 	.word	0x40014800
 8007d40:	40001800 	.word	0x40001800
 8007d44:	40001c00 	.word	0x40001c00
 8007d48:	40002000 	.word	0x40002000

08007d4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b087      	sub	sp, #28
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
 8007d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6a1b      	ldr	r3, [r3, #32]
 8007d5a:	f023 0201 	bic.w	r2, r3, #1
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6a1b      	ldr	r3, [r3, #32]
 8007d66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	699b      	ldr	r3, [r3, #24]
 8007d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	f023 0303 	bic.w	r3, r3, #3
 8007d82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	68fa      	ldr	r2, [r7, #12]
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007d8e:	697b      	ldr	r3, [r7, #20]
 8007d90:	f023 0302 	bic.w	r3, r3, #2
 8007d94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	689b      	ldr	r3, [r3, #8]
 8007d9a:	697a      	ldr	r2, [r7, #20]
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	4a20      	ldr	r2, [pc, #128]	; (8007e24 <TIM_OC1_SetConfig+0xd8>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d003      	beq.n	8007db0 <TIM_OC1_SetConfig+0x64>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	4a1f      	ldr	r2, [pc, #124]	; (8007e28 <TIM_OC1_SetConfig+0xdc>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d10c      	bne.n	8007dca <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	f023 0308 	bic.w	r3, r3, #8
 8007db6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	68db      	ldr	r3, [r3, #12]
 8007dbc:	697a      	ldr	r2, [r7, #20]
 8007dbe:	4313      	orrs	r3, r2
 8007dc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	f023 0304 	bic.w	r3, r3, #4
 8007dc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	4a15      	ldr	r2, [pc, #84]	; (8007e24 <TIM_OC1_SetConfig+0xd8>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d003      	beq.n	8007dda <TIM_OC1_SetConfig+0x8e>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	4a14      	ldr	r2, [pc, #80]	; (8007e28 <TIM_OC1_SetConfig+0xdc>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d111      	bne.n	8007dfe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007de0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007de2:	693b      	ldr	r3, [r7, #16]
 8007de4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007de8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	695b      	ldr	r3, [r3, #20]
 8007dee:	693a      	ldr	r2, [r7, #16]
 8007df0:	4313      	orrs	r3, r2
 8007df2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	699b      	ldr	r3, [r3, #24]
 8007df8:	693a      	ldr	r2, [r7, #16]
 8007dfa:	4313      	orrs	r3, r2
 8007dfc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	693a      	ldr	r2, [r7, #16]
 8007e02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	68fa      	ldr	r2, [r7, #12]
 8007e08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	685a      	ldr	r2, [r3, #4]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	697a      	ldr	r2, [r7, #20]
 8007e16:	621a      	str	r2, [r3, #32]
}
 8007e18:	bf00      	nop
 8007e1a:	371c      	adds	r7, #28
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e22:	4770      	bx	lr
 8007e24:	40010000 	.word	0x40010000
 8007e28:	40010400 	.word	0x40010400

08007e2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b087      	sub	sp, #28
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
 8007e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6a1b      	ldr	r3, [r3, #32]
 8007e3a:	f023 0210 	bic.w	r2, r3, #16
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6a1b      	ldr	r3, [r3, #32]
 8007e46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	685b      	ldr	r3, [r3, #4]
 8007e4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	699b      	ldr	r3, [r3, #24]
 8007e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	021b      	lsls	r3, r3, #8
 8007e6a:	68fa      	ldr	r2, [r7, #12]
 8007e6c:	4313      	orrs	r3, r2
 8007e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	f023 0320 	bic.w	r3, r3, #32
 8007e76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	689b      	ldr	r3, [r3, #8]
 8007e7c:	011b      	lsls	r3, r3, #4
 8007e7e:	697a      	ldr	r2, [r7, #20]
 8007e80:	4313      	orrs	r3, r2
 8007e82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	4a22      	ldr	r2, [pc, #136]	; (8007f10 <TIM_OC2_SetConfig+0xe4>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d003      	beq.n	8007e94 <TIM_OC2_SetConfig+0x68>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	4a21      	ldr	r2, [pc, #132]	; (8007f14 <TIM_OC2_SetConfig+0xe8>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d10d      	bne.n	8007eb0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	68db      	ldr	r3, [r3, #12]
 8007ea0:	011b      	lsls	r3, r3, #4
 8007ea2:	697a      	ldr	r2, [r7, #20]
 8007ea4:	4313      	orrs	r3, r2
 8007ea6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007eae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	4a17      	ldr	r2, [pc, #92]	; (8007f10 <TIM_OC2_SetConfig+0xe4>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d003      	beq.n	8007ec0 <TIM_OC2_SetConfig+0x94>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	4a16      	ldr	r2, [pc, #88]	; (8007f14 <TIM_OC2_SetConfig+0xe8>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d113      	bne.n	8007ee8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007ec6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007ece:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	695b      	ldr	r3, [r3, #20]
 8007ed4:	009b      	lsls	r3, r3, #2
 8007ed6:	693a      	ldr	r2, [r7, #16]
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	699b      	ldr	r3, [r3, #24]
 8007ee0:	009b      	lsls	r3, r3, #2
 8007ee2:	693a      	ldr	r2, [r7, #16]
 8007ee4:	4313      	orrs	r3, r2
 8007ee6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	693a      	ldr	r2, [r7, #16]
 8007eec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	68fa      	ldr	r2, [r7, #12]
 8007ef2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	685a      	ldr	r2, [r3, #4]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	697a      	ldr	r2, [r7, #20]
 8007f00:	621a      	str	r2, [r3, #32]
}
 8007f02:	bf00      	nop
 8007f04:	371c      	adds	r7, #28
 8007f06:	46bd      	mov	sp, r7
 8007f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0c:	4770      	bx	lr
 8007f0e:	bf00      	nop
 8007f10:	40010000 	.word	0x40010000
 8007f14:	40010400 	.word	0x40010400

08007f18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b087      	sub	sp, #28
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
 8007f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6a1b      	ldr	r3, [r3, #32]
 8007f26:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6a1b      	ldr	r3, [r3, #32]
 8007f32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	69db      	ldr	r3, [r3, #28]
 8007f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f023 0303 	bic.w	r3, r3, #3
 8007f4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	68fa      	ldr	r2, [r7, #12]
 8007f56:	4313      	orrs	r3, r2
 8007f58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007f60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	689b      	ldr	r3, [r3, #8]
 8007f66:	021b      	lsls	r3, r3, #8
 8007f68:	697a      	ldr	r2, [r7, #20]
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	4a21      	ldr	r2, [pc, #132]	; (8007ff8 <TIM_OC3_SetConfig+0xe0>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d003      	beq.n	8007f7e <TIM_OC3_SetConfig+0x66>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	4a20      	ldr	r2, [pc, #128]	; (8007ffc <TIM_OC3_SetConfig+0xe4>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d10d      	bne.n	8007f9a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007f84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	68db      	ldr	r3, [r3, #12]
 8007f8a:	021b      	lsls	r3, r3, #8
 8007f8c:	697a      	ldr	r2, [r7, #20]
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007f92:	697b      	ldr	r3, [r7, #20]
 8007f94:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007f98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	4a16      	ldr	r2, [pc, #88]	; (8007ff8 <TIM_OC3_SetConfig+0xe0>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d003      	beq.n	8007faa <TIM_OC3_SetConfig+0x92>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	4a15      	ldr	r2, [pc, #84]	; (8007ffc <TIM_OC3_SetConfig+0xe4>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d113      	bne.n	8007fd2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007faa:	693b      	ldr	r3, [r7, #16]
 8007fac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007fb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007fb2:	693b      	ldr	r3, [r7, #16]
 8007fb4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007fb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	695b      	ldr	r3, [r3, #20]
 8007fbe:	011b      	lsls	r3, r3, #4
 8007fc0:	693a      	ldr	r2, [r7, #16]
 8007fc2:	4313      	orrs	r3, r2
 8007fc4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	699b      	ldr	r3, [r3, #24]
 8007fca:	011b      	lsls	r3, r3, #4
 8007fcc:	693a      	ldr	r2, [r7, #16]
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	693a      	ldr	r2, [r7, #16]
 8007fd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	68fa      	ldr	r2, [r7, #12]
 8007fdc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	685a      	ldr	r2, [r3, #4]
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	697a      	ldr	r2, [r7, #20]
 8007fea:	621a      	str	r2, [r3, #32]
}
 8007fec:	bf00      	nop
 8007fee:	371c      	adds	r7, #28
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff6:	4770      	bx	lr
 8007ff8:	40010000 	.word	0x40010000
 8007ffc:	40010400 	.word	0x40010400

08008000 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008000:	b480      	push	{r7}
 8008002:	b087      	sub	sp, #28
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
 8008008:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6a1b      	ldr	r3, [r3, #32]
 800800e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6a1b      	ldr	r3, [r3, #32]
 800801a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	69db      	ldr	r3, [r3, #28]
 8008026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800802e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008036:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	021b      	lsls	r3, r3, #8
 800803e:	68fa      	ldr	r2, [r7, #12]
 8008040:	4313      	orrs	r3, r2
 8008042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800804a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	689b      	ldr	r3, [r3, #8]
 8008050:	031b      	lsls	r3, r3, #12
 8008052:	693a      	ldr	r2, [r7, #16]
 8008054:	4313      	orrs	r3, r2
 8008056:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	4a12      	ldr	r2, [pc, #72]	; (80080a4 <TIM_OC4_SetConfig+0xa4>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d003      	beq.n	8008068 <TIM_OC4_SetConfig+0x68>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	4a11      	ldr	r2, [pc, #68]	; (80080a8 <TIM_OC4_SetConfig+0xa8>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d109      	bne.n	800807c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800806e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	695b      	ldr	r3, [r3, #20]
 8008074:	019b      	lsls	r3, r3, #6
 8008076:	697a      	ldr	r2, [r7, #20]
 8008078:	4313      	orrs	r3, r2
 800807a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	697a      	ldr	r2, [r7, #20]
 8008080:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	68fa      	ldr	r2, [r7, #12]
 8008086:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	685a      	ldr	r2, [r3, #4]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	693a      	ldr	r2, [r7, #16]
 8008094:	621a      	str	r2, [r3, #32]
}
 8008096:	bf00      	nop
 8008098:	371c      	adds	r7, #28
 800809a:	46bd      	mov	sp, r7
 800809c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a0:	4770      	bx	lr
 80080a2:	bf00      	nop
 80080a4:	40010000 	.word	0x40010000
 80080a8:	40010400 	.word	0x40010400

080080ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b087      	sub	sp, #28
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	60f8      	str	r0, [r7, #12]
 80080b4:	60b9      	str	r1, [r7, #8]
 80080b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	f003 031f 	and.w	r3, r3, #31
 80080be:	2201      	movs	r2, #1
 80080c0:	fa02 f303 	lsl.w	r3, r2, r3
 80080c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	6a1a      	ldr	r2, [r3, #32]
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	43db      	mvns	r3, r3
 80080ce:	401a      	ands	r2, r3
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	6a1a      	ldr	r2, [r3, #32]
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	f003 031f 	and.w	r3, r3, #31
 80080de:	6879      	ldr	r1, [r7, #4]
 80080e0:	fa01 f303 	lsl.w	r3, r1, r3
 80080e4:	431a      	orrs	r2, r3
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	621a      	str	r2, [r3, #32]
}
 80080ea:	bf00      	nop
 80080ec:	371c      	adds	r7, #28
 80080ee:	46bd      	mov	sp, r7
 80080f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f4:	4770      	bx	lr
	...

080080f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80080f8:	b480      	push	{r7}
 80080fa:	b085      	sub	sp, #20
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
 8008100:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008108:	2b01      	cmp	r3, #1
 800810a:	d101      	bne.n	8008110 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800810c:	2302      	movs	r3, #2
 800810e:	e05a      	b.n	80081c6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2201      	movs	r2, #1
 8008114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2202      	movs	r2, #2
 800811c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	685b      	ldr	r3, [r3, #4]
 8008126:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	689b      	ldr	r3, [r3, #8]
 800812e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008136:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	68fa      	ldr	r2, [r7, #12]
 800813e:	4313      	orrs	r3, r2
 8008140:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	68fa      	ldr	r2, [r7, #12]
 8008148:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	4a21      	ldr	r2, [pc, #132]	; (80081d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d022      	beq.n	800819a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800815c:	d01d      	beq.n	800819a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4a1d      	ldr	r2, [pc, #116]	; (80081d8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d018      	beq.n	800819a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4a1b      	ldr	r2, [pc, #108]	; (80081dc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d013      	beq.n	800819a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4a1a      	ldr	r2, [pc, #104]	; (80081e0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d00e      	beq.n	800819a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a18      	ldr	r2, [pc, #96]	; (80081e4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d009      	beq.n	800819a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4a17      	ldr	r2, [pc, #92]	; (80081e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d004      	beq.n	800819a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4a15      	ldr	r2, [pc, #84]	; (80081ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d10c      	bne.n	80081b4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80081a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	685b      	ldr	r3, [r3, #4]
 80081a6:	68ba      	ldr	r2, [r7, #8]
 80081a8:	4313      	orrs	r3, r2
 80081aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	68ba      	ldr	r2, [r7, #8]
 80081b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2201      	movs	r2, #1
 80081b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2200      	movs	r2, #0
 80081c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80081c4:	2300      	movs	r3, #0
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	3714      	adds	r7, #20
 80081ca:	46bd      	mov	sp, r7
 80081cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d0:	4770      	bx	lr
 80081d2:	bf00      	nop
 80081d4:	40010000 	.word	0x40010000
 80081d8:	40000400 	.word	0x40000400
 80081dc:	40000800 	.word	0x40000800
 80081e0:	40000c00 	.word	0x40000c00
 80081e4:	40010400 	.word	0x40010400
 80081e8:	40014000 	.word	0x40014000
 80081ec:	40001800 	.word	0x40001800

080081f0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b085      	sub	sp, #20
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
 80081f8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80081fa:	2300      	movs	r3, #0
 80081fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008204:	2b01      	cmp	r3, #1
 8008206:	d101      	bne.n	800820c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008208:	2302      	movs	r3, #2
 800820a:	e03d      	b.n	8008288 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2201      	movs	r2, #1
 8008210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	68db      	ldr	r3, [r3, #12]
 800821e:	4313      	orrs	r3, r2
 8008220:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	689b      	ldr	r3, [r3, #8]
 800822c:	4313      	orrs	r3, r2
 800822e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	685b      	ldr	r3, [r3, #4]
 800823a:	4313      	orrs	r3, r2
 800823c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	4313      	orrs	r3, r2
 800824a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	691b      	ldr	r3, [r3, #16]
 8008256:	4313      	orrs	r3, r2
 8008258:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	695b      	ldr	r3, [r3, #20]
 8008264:	4313      	orrs	r3, r2
 8008266:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	69db      	ldr	r3, [r3, #28]
 8008272:	4313      	orrs	r3, r2
 8008274:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	68fa      	ldr	r2, [r7, #12]
 800827c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2200      	movs	r2, #0
 8008282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008286:	2300      	movs	r3, #0
}
 8008288:	4618      	mov	r0, r3
 800828a:	3714      	adds	r7, #20
 800828c:	46bd      	mov	sp, r7
 800828e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008292:	4770      	bx	lr

08008294 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b082      	sub	sp, #8
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d101      	bne.n	80082a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80082a2:	2301      	movs	r3, #1
 80082a4:	e03f      	b.n	8008326 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082ac:	b2db      	uxtb	r3, r3
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d106      	bne.n	80082c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2200      	movs	r2, #0
 80082b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f7fc fbe2 	bl	8004a84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2224      	movs	r2, #36	; 0x24
 80082c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	68da      	ldr	r2, [r3, #12]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80082d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f000 fd7b 	bl	8008dd4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	691a      	ldr	r2, [r3, #16]
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80082ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	695a      	ldr	r2, [r3, #20]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80082fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	68da      	ldr	r2, [r3, #12]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800830c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2200      	movs	r2, #0
 8008312:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2220      	movs	r2, #32
 8008318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2220      	movs	r2, #32
 8008320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008324:	2300      	movs	r3, #0
}
 8008326:	4618      	mov	r0, r3
 8008328:	3708      	adds	r7, #8
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}

0800832e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800832e:	b580      	push	{r7, lr}
 8008330:	b08a      	sub	sp, #40	; 0x28
 8008332:	af02      	add	r7, sp, #8
 8008334:	60f8      	str	r0, [r7, #12]
 8008336:	60b9      	str	r1, [r7, #8]
 8008338:	603b      	str	r3, [r7, #0]
 800833a:	4613      	mov	r3, r2
 800833c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800833e:	2300      	movs	r3, #0
 8008340:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008348:	b2db      	uxtb	r3, r3
 800834a:	2b20      	cmp	r3, #32
 800834c:	d17c      	bne.n	8008448 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d002      	beq.n	800835a <HAL_UART_Transmit+0x2c>
 8008354:	88fb      	ldrh	r3, [r7, #6]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d101      	bne.n	800835e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800835a:	2301      	movs	r3, #1
 800835c:	e075      	b.n	800844a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008364:	2b01      	cmp	r3, #1
 8008366:	d101      	bne.n	800836c <HAL_UART_Transmit+0x3e>
 8008368:	2302      	movs	r3, #2
 800836a:	e06e      	b.n	800844a <HAL_UART_Transmit+0x11c>
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	2201      	movs	r2, #1
 8008370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2200      	movs	r2, #0
 8008378:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	2221      	movs	r2, #33	; 0x21
 800837e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008382:	f7fc ffd5 	bl	8005330 <HAL_GetTick>
 8008386:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	88fa      	ldrh	r2, [r7, #6]
 800838c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	88fa      	ldrh	r2, [r7, #6]
 8008392:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	689b      	ldr	r3, [r3, #8]
 8008398:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800839c:	d108      	bne.n	80083b0 <HAL_UART_Transmit+0x82>
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	691b      	ldr	r3, [r3, #16]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d104      	bne.n	80083b0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80083a6:	2300      	movs	r3, #0
 80083a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	61bb      	str	r3, [r7, #24]
 80083ae:	e003      	b.n	80083b8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80083b4:	2300      	movs	r3, #0
 80083b6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	2200      	movs	r2, #0
 80083bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80083c0:	e02a      	b.n	8008418 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	9300      	str	r3, [sp, #0]
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	2200      	movs	r2, #0
 80083ca:	2180      	movs	r1, #128	; 0x80
 80083cc:	68f8      	ldr	r0, [r7, #12]
 80083ce:	f000 faf9 	bl	80089c4 <UART_WaitOnFlagUntilTimeout>
 80083d2:	4603      	mov	r3, r0
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d001      	beq.n	80083dc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80083d8:	2303      	movs	r3, #3
 80083da:	e036      	b.n	800844a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80083dc:	69fb      	ldr	r3, [r7, #28]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d10b      	bne.n	80083fa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80083e2:	69bb      	ldr	r3, [r7, #24]
 80083e4:	881b      	ldrh	r3, [r3, #0]
 80083e6:	461a      	mov	r2, r3
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80083f0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80083f2:	69bb      	ldr	r3, [r7, #24]
 80083f4:	3302      	adds	r3, #2
 80083f6:	61bb      	str	r3, [r7, #24]
 80083f8:	e007      	b.n	800840a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80083fa:	69fb      	ldr	r3, [r7, #28]
 80083fc:	781a      	ldrb	r2, [r3, #0]
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008404:	69fb      	ldr	r3, [r7, #28]
 8008406:	3301      	adds	r3, #1
 8008408:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800840e:	b29b      	uxth	r3, r3
 8008410:	3b01      	subs	r3, #1
 8008412:	b29a      	uxth	r2, r3
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800841c:	b29b      	uxth	r3, r3
 800841e:	2b00      	cmp	r3, #0
 8008420:	d1cf      	bne.n	80083c2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	9300      	str	r3, [sp, #0]
 8008426:	697b      	ldr	r3, [r7, #20]
 8008428:	2200      	movs	r2, #0
 800842a:	2140      	movs	r1, #64	; 0x40
 800842c:	68f8      	ldr	r0, [r7, #12]
 800842e:	f000 fac9 	bl	80089c4 <UART_WaitOnFlagUntilTimeout>
 8008432:	4603      	mov	r3, r0
 8008434:	2b00      	cmp	r3, #0
 8008436:	d001      	beq.n	800843c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008438:	2303      	movs	r3, #3
 800843a:	e006      	b.n	800844a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	2220      	movs	r2, #32
 8008440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008444:	2300      	movs	r3, #0
 8008446:	e000      	b.n	800844a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008448:	2302      	movs	r3, #2
  }
}
 800844a:	4618      	mov	r0, r3
 800844c:	3720      	adds	r7, #32
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}
	...

08008454 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b0ba      	sub	sp, #232	; 0xe8
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	68db      	ldr	r3, [r3, #12]
 800846c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	695b      	ldr	r3, [r3, #20]
 8008476:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800847a:	2300      	movs	r3, #0
 800847c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008480:	2300      	movs	r3, #0
 8008482:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008486:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800848a:	f003 030f 	and.w	r3, r3, #15
 800848e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008492:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008496:	2b00      	cmp	r3, #0
 8008498:	d10f      	bne.n	80084ba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800849a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800849e:	f003 0320 	and.w	r3, r3, #32
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d009      	beq.n	80084ba <HAL_UART_IRQHandler+0x66>
 80084a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084aa:	f003 0320 	and.w	r3, r3, #32
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d003      	beq.n	80084ba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f000 fbd3 	bl	8008c5e <UART_Receive_IT>
      return;
 80084b8:	e256      	b.n	8008968 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80084ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80084be:	2b00      	cmp	r3, #0
 80084c0:	f000 80de 	beq.w	8008680 <HAL_UART_IRQHandler+0x22c>
 80084c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80084c8:	f003 0301 	and.w	r3, r3, #1
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d106      	bne.n	80084de <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80084d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084d4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80084d8:	2b00      	cmp	r3, #0
 80084da:	f000 80d1 	beq.w	8008680 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80084de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084e2:	f003 0301 	and.w	r3, r3, #1
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d00b      	beq.n	8008502 <HAL_UART_IRQHandler+0xae>
 80084ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d005      	beq.n	8008502 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084fa:	f043 0201 	orr.w	r2, r3, #1
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008502:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008506:	f003 0304 	and.w	r3, r3, #4
 800850a:	2b00      	cmp	r3, #0
 800850c:	d00b      	beq.n	8008526 <HAL_UART_IRQHandler+0xd2>
 800850e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008512:	f003 0301 	and.w	r3, r3, #1
 8008516:	2b00      	cmp	r3, #0
 8008518:	d005      	beq.n	8008526 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800851e:	f043 0202 	orr.w	r2, r3, #2
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008526:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800852a:	f003 0302 	and.w	r3, r3, #2
 800852e:	2b00      	cmp	r3, #0
 8008530:	d00b      	beq.n	800854a <HAL_UART_IRQHandler+0xf6>
 8008532:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008536:	f003 0301 	and.w	r3, r3, #1
 800853a:	2b00      	cmp	r3, #0
 800853c:	d005      	beq.n	800854a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008542:	f043 0204 	orr.w	r2, r3, #4
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800854a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800854e:	f003 0308 	and.w	r3, r3, #8
 8008552:	2b00      	cmp	r3, #0
 8008554:	d011      	beq.n	800857a <HAL_UART_IRQHandler+0x126>
 8008556:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800855a:	f003 0320 	and.w	r3, r3, #32
 800855e:	2b00      	cmp	r3, #0
 8008560:	d105      	bne.n	800856e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008562:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008566:	f003 0301 	and.w	r3, r3, #1
 800856a:	2b00      	cmp	r3, #0
 800856c:	d005      	beq.n	800857a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008572:	f043 0208 	orr.w	r2, r3, #8
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800857e:	2b00      	cmp	r3, #0
 8008580:	f000 81ed 	beq.w	800895e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008584:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008588:	f003 0320 	and.w	r3, r3, #32
 800858c:	2b00      	cmp	r3, #0
 800858e:	d008      	beq.n	80085a2 <HAL_UART_IRQHandler+0x14e>
 8008590:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008594:	f003 0320 	and.w	r3, r3, #32
 8008598:	2b00      	cmp	r3, #0
 800859a:	d002      	beq.n	80085a2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f000 fb5e 	bl	8008c5e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	695b      	ldr	r3, [r3, #20]
 80085a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085ac:	2b40      	cmp	r3, #64	; 0x40
 80085ae:	bf0c      	ite	eq
 80085b0:	2301      	moveq	r3, #1
 80085b2:	2300      	movne	r3, #0
 80085b4:	b2db      	uxtb	r3, r3
 80085b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085be:	f003 0308 	and.w	r3, r3, #8
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d103      	bne.n	80085ce <HAL_UART_IRQHandler+0x17a>
 80085c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d04f      	beq.n	800866e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f000 fa66 	bl	8008aa0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	695b      	ldr	r3, [r3, #20]
 80085da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085de:	2b40      	cmp	r3, #64	; 0x40
 80085e0:	d141      	bne.n	8008666 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	3314      	adds	r3, #20
 80085e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80085f0:	e853 3f00 	ldrex	r3, [r3]
 80085f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80085f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80085fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008600:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	3314      	adds	r3, #20
 800860a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800860e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008612:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008616:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800861a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800861e:	e841 2300 	strex	r3, r2, [r1]
 8008622:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008626:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800862a:	2b00      	cmp	r3, #0
 800862c:	d1d9      	bne.n	80085e2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008632:	2b00      	cmp	r3, #0
 8008634:	d013      	beq.n	800865e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800863a:	4a7d      	ldr	r2, [pc, #500]	; (8008830 <HAL_UART_IRQHandler+0x3dc>)
 800863c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008642:	4618      	mov	r0, r3
 8008644:	f7fd f825 	bl	8005692 <HAL_DMA_Abort_IT>
 8008648:	4603      	mov	r3, r0
 800864a:	2b00      	cmp	r3, #0
 800864c:	d016      	beq.n	800867c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008652:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008654:	687a      	ldr	r2, [r7, #4]
 8008656:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008658:	4610      	mov	r0, r2
 800865a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800865c:	e00e      	b.n	800867c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f000 f99a 	bl	8008998 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008664:	e00a      	b.n	800867c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f000 f996 	bl	8008998 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800866c:	e006      	b.n	800867c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f000 f992 	bl	8008998 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2200      	movs	r2, #0
 8008678:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800867a:	e170      	b.n	800895e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800867c:	bf00      	nop
    return;
 800867e:	e16e      	b.n	800895e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008684:	2b01      	cmp	r3, #1
 8008686:	f040 814a 	bne.w	800891e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800868a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800868e:	f003 0310 	and.w	r3, r3, #16
 8008692:	2b00      	cmp	r3, #0
 8008694:	f000 8143 	beq.w	800891e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008698:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800869c:	f003 0310 	and.w	r3, r3, #16
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	f000 813c 	beq.w	800891e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80086a6:	2300      	movs	r3, #0
 80086a8:	60bb      	str	r3, [r7, #8]
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	60bb      	str	r3, [r7, #8]
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	685b      	ldr	r3, [r3, #4]
 80086b8:	60bb      	str	r3, [r7, #8]
 80086ba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	695b      	ldr	r3, [r3, #20]
 80086c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086c6:	2b40      	cmp	r3, #64	; 0x40
 80086c8:	f040 80b4 	bne.w	8008834 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80086d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80086dc:	2b00      	cmp	r3, #0
 80086de:	f000 8140 	beq.w	8008962 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80086e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80086ea:	429a      	cmp	r2, r3
 80086ec:	f080 8139 	bcs.w	8008962 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80086f6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086fc:	69db      	ldr	r3, [r3, #28]
 80086fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008702:	f000 8088 	beq.w	8008816 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	330c      	adds	r3, #12
 800870c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008710:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008714:	e853 3f00 	ldrex	r3, [r3]
 8008718:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800871c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008720:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008724:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	330c      	adds	r3, #12
 800872e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008732:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008736:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800873a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800873e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008742:	e841 2300 	strex	r3, r2, [r1]
 8008746:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800874a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800874e:	2b00      	cmp	r3, #0
 8008750:	d1d9      	bne.n	8008706 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	3314      	adds	r3, #20
 8008758:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800875a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800875c:	e853 3f00 	ldrex	r3, [r3]
 8008760:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008762:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008764:	f023 0301 	bic.w	r3, r3, #1
 8008768:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	3314      	adds	r3, #20
 8008772:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008776:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800877a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800877c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800877e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008782:	e841 2300 	strex	r3, r2, [r1]
 8008786:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008788:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800878a:	2b00      	cmp	r3, #0
 800878c:	d1e1      	bne.n	8008752 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	3314      	adds	r3, #20
 8008794:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008796:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008798:	e853 3f00 	ldrex	r3, [r3]
 800879c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800879e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80087a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	3314      	adds	r3, #20
 80087ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80087b2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80087b4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087b6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80087b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80087ba:	e841 2300 	strex	r3, r2, [r1]
 80087be:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80087c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d1e3      	bne.n	800878e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2220      	movs	r2, #32
 80087ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2200      	movs	r2, #0
 80087d2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	330c      	adds	r3, #12
 80087da:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087de:	e853 3f00 	ldrex	r3, [r3]
 80087e2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80087e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087e6:	f023 0310 	bic.w	r3, r3, #16
 80087ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	330c      	adds	r3, #12
 80087f4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80087f8:	65ba      	str	r2, [r7, #88]	; 0x58
 80087fa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80087fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008800:	e841 2300 	strex	r3, r2, [r1]
 8008804:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008806:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008808:	2b00      	cmp	r3, #0
 800880a:	d1e3      	bne.n	80087d4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008810:	4618      	mov	r0, r3
 8008812:	f7fc fece 	bl	80055b2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800881e:	b29b      	uxth	r3, r3
 8008820:	1ad3      	subs	r3, r2, r3
 8008822:	b29b      	uxth	r3, r3
 8008824:	4619      	mov	r1, r3
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f000 f8c0 	bl	80089ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800882c:	e099      	b.n	8008962 <HAL_UART_IRQHandler+0x50e>
 800882e:	bf00      	nop
 8008830:	08008b67 	.word	0x08008b67
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800883c:	b29b      	uxth	r3, r3
 800883e:	1ad3      	subs	r3, r2, r3
 8008840:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008848:	b29b      	uxth	r3, r3
 800884a:	2b00      	cmp	r3, #0
 800884c:	f000 808b 	beq.w	8008966 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008850:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008854:	2b00      	cmp	r3, #0
 8008856:	f000 8086 	beq.w	8008966 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	330c      	adds	r3, #12
 8008860:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008864:	e853 3f00 	ldrex	r3, [r3]
 8008868:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800886a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800886c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008870:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	330c      	adds	r3, #12
 800887a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800887e:	647a      	str	r2, [r7, #68]	; 0x44
 8008880:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008882:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008884:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008886:	e841 2300 	strex	r3, r2, [r1]
 800888a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800888c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800888e:	2b00      	cmp	r3, #0
 8008890:	d1e3      	bne.n	800885a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	3314      	adds	r3, #20
 8008898:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800889a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800889c:	e853 3f00 	ldrex	r3, [r3]
 80088a0:	623b      	str	r3, [r7, #32]
   return(result);
 80088a2:	6a3b      	ldr	r3, [r7, #32]
 80088a4:	f023 0301 	bic.w	r3, r3, #1
 80088a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	3314      	adds	r3, #20
 80088b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80088b6:	633a      	str	r2, [r7, #48]	; 0x30
 80088b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80088bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088be:	e841 2300 	strex	r3, r2, [r1]
 80088c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80088c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d1e3      	bne.n	8008892 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2220      	movs	r2, #32
 80088ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2200      	movs	r2, #0
 80088d6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	330c      	adds	r3, #12
 80088de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088e0:	693b      	ldr	r3, [r7, #16]
 80088e2:	e853 3f00 	ldrex	r3, [r3]
 80088e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	f023 0310 	bic.w	r3, r3, #16
 80088ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	330c      	adds	r3, #12
 80088f8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80088fc:	61fa      	str	r2, [r7, #28]
 80088fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008900:	69b9      	ldr	r1, [r7, #24]
 8008902:	69fa      	ldr	r2, [r7, #28]
 8008904:	e841 2300 	strex	r3, r2, [r1]
 8008908:	617b      	str	r3, [r7, #20]
   return(result);
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d1e3      	bne.n	80088d8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008910:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008914:	4619      	mov	r1, r3
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f000 f848 	bl	80089ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800891c:	e023      	b.n	8008966 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800891e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008926:	2b00      	cmp	r3, #0
 8008928:	d009      	beq.n	800893e <HAL_UART_IRQHandler+0x4ea>
 800892a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800892e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008932:	2b00      	cmp	r3, #0
 8008934:	d003      	beq.n	800893e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	f000 f929 	bl	8008b8e <UART_Transmit_IT>
    return;
 800893c:	e014      	b.n	8008968 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800893e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008946:	2b00      	cmp	r3, #0
 8008948:	d00e      	beq.n	8008968 <HAL_UART_IRQHandler+0x514>
 800894a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800894e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008952:	2b00      	cmp	r3, #0
 8008954:	d008      	beq.n	8008968 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f000 f969 	bl	8008c2e <UART_EndTransmit_IT>
    return;
 800895c:	e004      	b.n	8008968 <HAL_UART_IRQHandler+0x514>
    return;
 800895e:	bf00      	nop
 8008960:	e002      	b.n	8008968 <HAL_UART_IRQHandler+0x514>
      return;
 8008962:	bf00      	nop
 8008964:	e000      	b.n	8008968 <HAL_UART_IRQHandler+0x514>
      return;
 8008966:	bf00      	nop
  }
}
 8008968:	37e8      	adds	r7, #232	; 0xe8
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}
 800896e:	bf00      	nop

08008970 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008970:	b480      	push	{r7}
 8008972:	b083      	sub	sp, #12
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008978:	bf00      	nop
 800897a:	370c      	adds	r7, #12
 800897c:	46bd      	mov	sp, r7
 800897e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008982:	4770      	bx	lr

08008984 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008984:	b480      	push	{r7}
 8008986:	b083      	sub	sp, #12
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800898c:	bf00      	nop
 800898e:	370c      	adds	r7, #12
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr

08008998 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008998:	b480      	push	{r7}
 800899a:	b083      	sub	sp, #12
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80089a0:	bf00      	nop
 80089a2:	370c      	adds	r7, #12
 80089a4:	46bd      	mov	sp, r7
 80089a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089aa:	4770      	bx	lr

080089ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80089ac:	b480      	push	{r7}
 80089ae:	b083      	sub	sp, #12
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
 80089b4:	460b      	mov	r3, r1
 80089b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80089b8:	bf00      	nop
 80089ba:	370c      	adds	r7, #12
 80089bc:	46bd      	mov	sp, r7
 80089be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c2:	4770      	bx	lr

080089c4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b090      	sub	sp, #64	; 0x40
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	60f8      	str	r0, [r7, #12]
 80089cc:	60b9      	str	r1, [r7, #8]
 80089ce:	603b      	str	r3, [r7, #0]
 80089d0:	4613      	mov	r3, r2
 80089d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089d4:	e050      	b.n	8008a78 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089dc:	d04c      	beq.n	8008a78 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80089de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d007      	beq.n	80089f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80089e4:	f7fc fca4 	bl	8005330 <HAL_GetTick>
 80089e8:	4602      	mov	r2, r0
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	1ad3      	subs	r3, r2, r3
 80089ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80089f0:	429a      	cmp	r2, r3
 80089f2:	d241      	bcs.n	8008a78 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	330c      	adds	r3, #12
 80089fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089fe:	e853 3f00 	ldrex	r3, [r3]
 8008a02:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a06:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	330c      	adds	r3, #12
 8008a12:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008a14:	637a      	str	r2, [r7, #52]	; 0x34
 8008a16:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a18:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008a1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a1c:	e841 2300 	strex	r3, r2, [r1]
 8008a20:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d1e5      	bne.n	80089f4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	3314      	adds	r3, #20
 8008a2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a30:	697b      	ldr	r3, [r7, #20]
 8008a32:	e853 3f00 	ldrex	r3, [r3]
 8008a36:	613b      	str	r3, [r7, #16]
   return(result);
 8008a38:	693b      	ldr	r3, [r7, #16]
 8008a3a:	f023 0301 	bic.w	r3, r3, #1
 8008a3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	3314      	adds	r3, #20
 8008a46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a48:	623a      	str	r2, [r7, #32]
 8008a4a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a4c:	69f9      	ldr	r1, [r7, #28]
 8008a4e:	6a3a      	ldr	r2, [r7, #32]
 8008a50:	e841 2300 	strex	r3, r2, [r1]
 8008a54:	61bb      	str	r3, [r7, #24]
   return(result);
 8008a56:	69bb      	ldr	r3, [r7, #24]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d1e5      	bne.n	8008a28 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	2220      	movs	r2, #32
 8008a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	2220      	movs	r2, #32
 8008a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008a74:	2303      	movs	r3, #3
 8008a76:	e00f      	b.n	8008a98 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	681a      	ldr	r2, [r3, #0]
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	4013      	ands	r3, r2
 8008a82:	68ba      	ldr	r2, [r7, #8]
 8008a84:	429a      	cmp	r2, r3
 8008a86:	bf0c      	ite	eq
 8008a88:	2301      	moveq	r3, #1
 8008a8a:	2300      	movne	r3, #0
 8008a8c:	b2db      	uxtb	r3, r3
 8008a8e:	461a      	mov	r2, r3
 8008a90:	79fb      	ldrb	r3, [r7, #7]
 8008a92:	429a      	cmp	r2, r3
 8008a94:	d09f      	beq.n	80089d6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008a96:	2300      	movs	r3, #0
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3740      	adds	r7, #64	; 0x40
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}

08008aa0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b095      	sub	sp, #84	; 0x54
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	330c      	adds	r3, #12
 8008aae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ab2:	e853 3f00 	ldrex	r3, [r3]
 8008ab6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008abe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	330c      	adds	r3, #12
 8008ac6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008ac8:	643a      	str	r2, [r7, #64]	; 0x40
 8008aca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008acc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008ace:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008ad0:	e841 2300 	strex	r3, r2, [r1]
 8008ad4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d1e5      	bne.n	8008aa8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	3314      	adds	r3, #20
 8008ae2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ae4:	6a3b      	ldr	r3, [r7, #32]
 8008ae6:	e853 3f00 	ldrex	r3, [r3]
 8008aea:	61fb      	str	r3, [r7, #28]
   return(result);
 8008aec:	69fb      	ldr	r3, [r7, #28]
 8008aee:	f023 0301 	bic.w	r3, r3, #1
 8008af2:	64bb      	str	r3, [r7, #72]	; 0x48
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	3314      	adds	r3, #20
 8008afa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008afc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008afe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008b02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b04:	e841 2300 	strex	r3, r2, [r1]
 8008b08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d1e5      	bne.n	8008adc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b14:	2b01      	cmp	r3, #1
 8008b16:	d119      	bne.n	8008b4c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	330c      	adds	r3, #12
 8008b1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	e853 3f00 	ldrex	r3, [r3]
 8008b26:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	f023 0310 	bic.w	r3, r3, #16
 8008b2e:	647b      	str	r3, [r7, #68]	; 0x44
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	330c      	adds	r3, #12
 8008b36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008b38:	61ba      	str	r2, [r7, #24]
 8008b3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b3c:	6979      	ldr	r1, [r7, #20]
 8008b3e:	69ba      	ldr	r2, [r7, #24]
 8008b40:	e841 2300 	strex	r3, r2, [r1]
 8008b44:	613b      	str	r3, [r7, #16]
   return(result);
 8008b46:	693b      	ldr	r3, [r7, #16]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d1e5      	bne.n	8008b18 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2220      	movs	r2, #32
 8008b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2200      	movs	r2, #0
 8008b58:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008b5a:	bf00      	nop
 8008b5c:	3754      	adds	r7, #84	; 0x54
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b64:	4770      	bx	lr

08008b66 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008b66:	b580      	push	{r7, lr}
 8008b68:	b084      	sub	sp, #16
 8008b6a:	af00      	add	r7, sp, #0
 8008b6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b72:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	2200      	movs	r2, #0
 8008b78:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008b80:	68f8      	ldr	r0, [r7, #12]
 8008b82:	f7ff ff09 	bl	8008998 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b86:	bf00      	nop
 8008b88:	3710      	adds	r7, #16
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}

08008b8e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008b8e:	b480      	push	{r7}
 8008b90:	b085      	sub	sp, #20
 8008b92:	af00      	add	r7, sp, #0
 8008b94:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b9c:	b2db      	uxtb	r3, r3
 8008b9e:	2b21      	cmp	r3, #33	; 0x21
 8008ba0:	d13e      	bne.n	8008c20 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	689b      	ldr	r3, [r3, #8]
 8008ba6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008baa:	d114      	bne.n	8008bd6 <UART_Transmit_IT+0x48>
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	691b      	ldr	r3, [r3, #16]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d110      	bne.n	8008bd6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6a1b      	ldr	r3, [r3, #32]
 8008bb8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	881b      	ldrh	r3, [r3, #0]
 8008bbe:	461a      	mov	r2, r3
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008bc8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6a1b      	ldr	r3, [r3, #32]
 8008bce:	1c9a      	adds	r2, r3, #2
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	621a      	str	r2, [r3, #32]
 8008bd4:	e008      	b.n	8008be8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6a1b      	ldr	r3, [r3, #32]
 8008bda:	1c59      	adds	r1, r3, #1
 8008bdc:	687a      	ldr	r2, [r7, #4]
 8008bde:	6211      	str	r1, [r2, #32]
 8008be0:	781a      	ldrb	r2, [r3, #0]
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008bec:	b29b      	uxth	r3, r3
 8008bee:	3b01      	subs	r3, #1
 8008bf0:	b29b      	uxth	r3, r3
 8008bf2:	687a      	ldr	r2, [r7, #4]
 8008bf4:	4619      	mov	r1, r3
 8008bf6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d10f      	bne.n	8008c1c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	68da      	ldr	r2, [r3, #12]
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008c0a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	68da      	ldr	r2, [r3, #12]
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008c1a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	e000      	b.n	8008c22 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008c20:	2302      	movs	r3, #2
  }
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	3714      	adds	r7, #20
 8008c26:	46bd      	mov	sp, r7
 8008c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2c:	4770      	bx	lr

08008c2e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008c2e:	b580      	push	{r7, lr}
 8008c30:	b082      	sub	sp, #8
 8008c32:	af00      	add	r7, sp, #0
 8008c34:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	68da      	ldr	r2, [r3, #12]
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008c44:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2220      	movs	r2, #32
 8008c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f7ff fe8e 	bl	8008970 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008c54:	2300      	movs	r3, #0
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	3708      	adds	r7, #8
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}

08008c5e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008c5e:	b580      	push	{r7, lr}
 8008c60:	b08c      	sub	sp, #48	; 0x30
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008c6c:	b2db      	uxtb	r3, r3
 8008c6e:	2b22      	cmp	r3, #34	; 0x22
 8008c70:	f040 80ab 	bne.w	8008dca <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	689b      	ldr	r3, [r3, #8]
 8008c78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c7c:	d117      	bne.n	8008cae <UART_Receive_IT+0x50>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	691b      	ldr	r3, [r3, #16]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d113      	bne.n	8008cae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008c86:	2300      	movs	r3, #0
 8008c88:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c8e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	685b      	ldr	r3, [r3, #4]
 8008c96:	b29b      	uxth	r3, r3
 8008c98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c9c:	b29a      	uxth	r2, r3
 8008c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ca0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ca6:	1c9a      	adds	r2, r3, #2
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	629a      	str	r2, [r3, #40]	; 0x28
 8008cac:	e026      	b.n	8008cfc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	689b      	ldr	r3, [r3, #8]
 8008cbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008cc0:	d007      	beq.n	8008cd2 <UART_Receive_IT+0x74>
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	689b      	ldr	r3, [r3, #8]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d10a      	bne.n	8008ce0 <UART_Receive_IT+0x82>
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	691b      	ldr	r3, [r3, #16]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d106      	bne.n	8008ce0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	685b      	ldr	r3, [r3, #4]
 8008cd8:	b2da      	uxtb	r2, r3
 8008cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cdc:	701a      	strb	r2, [r3, #0]
 8008cde:	e008      	b.n	8008cf2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	685b      	ldr	r3, [r3, #4]
 8008ce6:	b2db      	uxtb	r3, r3
 8008ce8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cec:	b2da      	uxtb	r2, r3
 8008cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cf0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cf6:	1c5a      	adds	r2, r3, #1
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008d00:	b29b      	uxth	r3, r3
 8008d02:	3b01      	subs	r3, #1
 8008d04:	b29b      	uxth	r3, r3
 8008d06:	687a      	ldr	r2, [r7, #4]
 8008d08:	4619      	mov	r1, r3
 8008d0a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d15a      	bne.n	8008dc6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	68da      	ldr	r2, [r3, #12]
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f022 0220 	bic.w	r2, r2, #32
 8008d1e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	68da      	ldr	r2, [r3, #12]
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008d2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	695a      	ldr	r2, [r3, #20]
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f022 0201 	bic.w	r2, r2, #1
 8008d3e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2220      	movs	r2, #32
 8008d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d4c:	2b01      	cmp	r3, #1
 8008d4e:	d135      	bne.n	8008dbc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2200      	movs	r2, #0
 8008d54:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	330c      	adds	r3, #12
 8008d5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d5e:	697b      	ldr	r3, [r7, #20]
 8008d60:	e853 3f00 	ldrex	r3, [r3]
 8008d64:	613b      	str	r3, [r7, #16]
   return(result);
 8008d66:	693b      	ldr	r3, [r7, #16]
 8008d68:	f023 0310 	bic.w	r3, r3, #16
 8008d6c:	627b      	str	r3, [r7, #36]	; 0x24
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	330c      	adds	r3, #12
 8008d74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d76:	623a      	str	r2, [r7, #32]
 8008d78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d7a:	69f9      	ldr	r1, [r7, #28]
 8008d7c:	6a3a      	ldr	r2, [r7, #32]
 8008d7e:	e841 2300 	strex	r3, r2, [r1]
 8008d82:	61bb      	str	r3, [r7, #24]
   return(result);
 8008d84:	69bb      	ldr	r3, [r7, #24]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d1e5      	bne.n	8008d56 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f003 0310 	and.w	r3, r3, #16
 8008d94:	2b10      	cmp	r3, #16
 8008d96:	d10a      	bne.n	8008dae <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008d98:	2300      	movs	r3, #0
 8008d9a:	60fb      	str	r3, [r7, #12]
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	60fb      	str	r3, [r7, #12]
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	685b      	ldr	r3, [r3, #4]
 8008daa:	60fb      	str	r3, [r7, #12]
 8008dac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008db2:	4619      	mov	r1, r3
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f7ff fdf9 	bl	80089ac <HAL_UARTEx_RxEventCallback>
 8008dba:	e002      	b.n	8008dc2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f7ff fde1 	bl	8008984 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	e002      	b.n	8008dcc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	e000      	b.n	8008dcc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008dca:	2302      	movs	r3, #2
  }
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3730      	adds	r7, #48	; 0x30
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}

08008dd4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dd8:	b09f      	sub	sp, #124	; 0x7c
 8008dda:	af00      	add	r7, sp, #0
 8008ddc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008dde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	691b      	ldr	r3, [r3, #16]
 8008de4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008de8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008dea:	68d9      	ldr	r1, [r3, #12]
 8008dec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008dee:	681a      	ldr	r2, [r3, #0]
 8008df0:	ea40 0301 	orr.w	r3, r0, r1
 8008df4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008df6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008df8:	689a      	ldr	r2, [r3, #8]
 8008dfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008dfc:	691b      	ldr	r3, [r3, #16]
 8008dfe:	431a      	orrs	r2, r3
 8008e00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e02:	695b      	ldr	r3, [r3, #20]
 8008e04:	431a      	orrs	r2, r3
 8008e06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e08:	69db      	ldr	r3, [r3, #28]
 8008e0a:	4313      	orrs	r3, r2
 8008e0c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8008e0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	68db      	ldr	r3, [r3, #12]
 8008e14:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008e18:	f021 010c 	bic.w	r1, r1, #12
 8008e1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e1e:	681a      	ldr	r2, [r3, #0]
 8008e20:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008e22:	430b      	orrs	r3, r1
 8008e24:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008e26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	695b      	ldr	r3, [r3, #20]
 8008e2c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008e30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e32:	6999      	ldr	r1, [r3, #24]
 8008e34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e36:	681a      	ldr	r2, [r3, #0]
 8008e38:	ea40 0301 	orr.w	r3, r0, r1
 8008e3c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008e3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e40:	681a      	ldr	r2, [r3, #0]
 8008e42:	4bc5      	ldr	r3, [pc, #788]	; (8009158 <UART_SetConfig+0x384>)
 8008e44:	429a      	cmp	r2, r3
 8008e46:	d004      	beq.n	8008e52 <UART_SetConfig+0x7e>
 8008e48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e4a:	681a      	ldr	r2, [r3, #0]
 8008e4c:	4bc3      	ldr	r3, [pc, #780]	; (800915c <UART_SetConfig+0x388>)
 8008e4e:	429a      	cmp	r2, r3
 8008e50:	d103      	bne.n	8008e5a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008e52:	f7fe fbad 	bl	80075b0 <HAL_RCC_GetPCLK2Freq>
 8008e56:	6778      	str	r0, [r7, #116]	; 0x74
 8008e58:	e002      	b.n	8008e60 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008e5a:	f7fe fb95 	bl	8007588 <HAL_RCC_GetPCLK1Freq>
 8008e5e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008e60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e62:	69db      	ldr	r3, [r3, #28]
 8008e64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e68:	f040 80b6 	bne.w	8008fd8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008e6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e6e:	461c      	mov	r4, r3
 8008e70:	f04f 0500 	mov.w	r5, #0
 8008e74:	4622      	mov	r2, r4
 8008e76:	462b      	mov	r3, r5
 8008e78:	1891      	adds	r1, r2, r2
 8008e7a:	6439      	str	r1, [r7, #64]	; 0x40
 8008e7c:	415b      	adcs	r3, r3
 8008e7e:	647b      	str	r3, [r7, #68]	; 0x44
 8008e80:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008e84:	1912      	adds	r2, r2, r4
 8008e86:	eb45 0303 	adc.w	r3, r5, r3
 8008e8a:	f04f 0000 	mov.w	r0, #0
 8008e8e:	f04f 0100 	mov.w	r1, #0
 8008e92:	00d9      	lsls	r1, r3, #3
 8008e94:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008e98:	00d0      	lsls	r0, r2, #3
 8008e9a:	4602      	mov	r2, r0
 8008e9c:	460b      	mov	r3, r1
 8008e9e:	1911      	adds	r1, r2, r4
 8008ea0:	6639      	str	r1, [r7, #96]	; 0x60
 8008ea2:	416b      	adcs	r3, r5
 8008ea4:	667b      	str	r3, [r7, #100]	; 0x64
 8008ea6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ea8:	685b      	ldr	r3, [r3, #4]
 8008eaa:	461a      	mov	r2, r3
 8008eac:	f04f 0300 	mov.w	r3, #0
 8008eb0:	1891      	adds	r1, r2, r2
 8008eb2:	63b9      	str	r1, [r7, #56]	; 0x38
 8008eb4:	415b      	adcs	r3, r3
 8008eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008eb8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008ebc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8008ec0:	f7f7 fcec 	bl	800089c <__aeabi_uldivmod>
 8008ec4:	4602      	mov	r2, r0
 8008ec6:	460b      	mov	r3, r1
 8008ec8:	4ba5      	ldr	r3, [pc, #660]	; (8009160 <UART_SetConfig+0x38c>)
 8008eca:	fba3 2302 	umull	r2, r3, r3, r2
 8008ece:	095b      	lsrs	r3, r3, #5
 8008ed0:	011e      	lsls	r6, r3, #4
 8008ed2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ed4:	461c      	mov	r4, r3
 8008ed6:	f04f 0500 	mov.w	r5, #0
 8008eda:	4622      	mov	r2, r4
 8008edc:	462b      	mov	r3, r5
 8008ede:	1891      	adds	r1, r2, r2
 8008ee0:	6339      	str	r1, [r7, #48]	; 0x30
 8008ee2:	415b      	adcs	r3, r3
 8008ee4:	637b      	str	r3, [r7, #52]	; 0x34
 8008ee6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008eea:	1912      	adds	r2, r2, r4
 8008eec:	eb45 0303 	adc.w	r3, r5, r3
 8008ef0:	f04f 0000 	mov.w	r0, #0
 8008ef4:	f04f 0100 	mov.w	r1, #0
 8008ef8:	00d9      	lsls	r1, r3, #3
 8008efa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008efe:	00d0      	lsls	r0, r2, #3
 8008f00:	4602      	mov	r2, r0
 8008f02:	460b      	mov	r3, r1
 8008f04:	1911      	adds	r1, r2, r4
 8008f06:	65b9      	str	r1, [r7, #88]	; 0x58
 8008f08:	416b      	adcs	r3, r5
 8008f0a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008f0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f0e:	685b      	ldr	r3, [r3, #4]
 8008f10:	461a      	mov	r2, r3
 8008f12:	f04f 0300 	mov.w	r3, #0
 8008f16:	1891      	adds	r1, r2, r2
 8008f18:	62b9      	str	r1, [r7, #40]	; 0x28
 8008f1a:	415b      	adcs	r3, r3
 8008f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008f22:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008f26:	f7f7 fcb9 	bl	800089c <__aeabi_uldivmod>
 8008f2a:	4602      	mov	r2, r0
 8008f2c:	460b      	mov	r3, r1
 8008f2e:	4b8c      	ldr	r3, [pc, #560]	; (8009160 <UART_SetConfig+0x38c>)
 8008f30:	fba3 1302 	umull	r1, r3, r3, r2
 8008f34:	095b      	lsrs	r3, r3, #5
 8008f36:	2164      	movs	r1, #100	; 0x64
 8008f38:	fb01 f303 	mul.w	r3, r1, r3
 8008f3c:	1ad3      	subs	r3, r2, r3
 8008f3e:	00db      	lsls	r3, r3, #3
 8008f40:	3332      	adds	r3, #50	; 0x32
 8008f42:	4a87      	ldr	r2, [pc, #540]	; (8009160 <UART_SetConfig+0x38c>)
 8008f44:	fba2 2303 	umull	r2, r3, r2, r3
 8008f48:	095b      	lsrs	r3, r3, #5
 8008f4a:	005b      	lsls	r3, r3, #1
 8008f4c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008f50:	441e      	add	r6, r3
 8008f52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f54:	4618      	mov	r0, r3
 8008f56:	f04f 0100 	mov.w	r1, #0
 8008f5a:	4602      	mov	r2, r0
 8008f5c:	460b      	mov	r3, r1
 8008f5e:	1894      	adds	r4, r2, r2
 8008f60:	623c      	str	r4, [r7, #32]
 8008f62:	415b      	adcs	r3, r3
 8008f64:	627b      	str	r3, [r7, #36]	; 0x24
 8008f66:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008f6a:	1812      	adds	r2, r2, r0
 8008f6c:	eb41 0303 	adc.w	r3, r1, r3
 8008f70:	f04f 0400 	mov.w	r4, #0
 8008f74:	f04f 0500 	mov.w	r5, #0
 8008f78:	00dd      	lsls	r5, r3, #3
 8008f7a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008f7e:	00d4      	lsls	r4, r2, #3
 8008f80:	4622      	mov	r2, r4
 8008f82:	462b      	mov	r3, r5
 8008f84:	1814      	adds	r4, r2, r0
 8008f86:	653c      	str	r4, [r7, #80]	; 0x50
 8008f88:	414b      	adcs	r3, r1
 8008f8a:	657b      	str	r3, [r7, #84]	; 0x54
 8008f8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f8e:	685b      	ldr	r3, [r3, #4]
 8008f90:	461a      	mov	r2, r3
 8008f92:	f04f 0300 	mov.w	r3, #0
 8008f96:	1891      	adds	r1, r2, r2
 8008f98:	61b9      	str	r1, [r7, #24]
 8008f9a:	415b      	adcs	r3, r3
 8008f9c:	61fb      	str	r3, [r7, #28]
 8008f9e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008fa2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008fa6:	f7f7 fc79 	bl	800089c <__aeabi_uldivmod>
 8008faa:	4602      	mov	r2, r0
 8008fac:	460b      	mov	r3, r1
 8008fae:	4b6c      	ldr	r3, [pc, #432]	; (8009160 <UART_SetConfig+0x38c>)
 8008fb0:	fba3 1302 	umull	r1, r3, r3, r2
 8008fb4:	095b      	lsrs	r3, r3, #5
 8008fb6:	2164      	movs	r1, #100	; 0x64
 8008fb8:	fb01 f303 	mul.w	r3, r1, r3
 8008fbc:	1ad3      	subs	r3, r2, r3
 8008fbe:	00db      	lsls	r3, r3, #3
 8008fc0:	3332      	adds	r3, #50	; 0x32
 8008fc2:	4a67      	ldr	r2, [pc, #412]	; (8009160 <UART_SetConfig+0x38c>)
 8008fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8008fc8:	095b      	lsrs	r3, r3, #5
 8008fca:	f003 0207 	and.w	r2, r3, #7
 8008fce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	4432      	add	r2, r6
 8008fd4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008fd6:	e0b9      	b.n	800914c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008fd8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008fda:	461c      	mov	r4, r3
 8008fdc:	f04f 0500 	mov.w	r5, #0
 8008fe0:	4622      	mov	r2, r4
 8008fe2:	462b      	mov	r3, r5
 8008fe4:	1891      	adds	r1, r2, r2
 8008fe6:	6139      	str	r1, [r7, #16]
 8008fe8:	415b      	adcs	r3, r3
 8008fea:	617b      	str	r3, [r7, #20]
 8008fec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008ff0:	1912      	adds	r2, r2, r4
 8008ff2:	eb45 0303 	adc.w	r3, r5, r3
 8008ff6:	f04f 0000 	mov.w	r0, #0
 8008ffa:	f04f 0100 	mov.w	r1, #0
 8008ffe:	00d9      	lsls	r1, r3, #3
 8009000:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009004:	00d0      	lsls	r0, r2, #3
 8009006:	4602      	mov	r2, r0
 8009008:	460b      	mov	r3, r1
 800900a:	eb12 0804 	adds.w	r8, r2, r4
 800900e:	eb43 0905 	adc.w	r9, r3, r5
 8009012:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009014:	685b      	ldr	r3, [r3, #4]
 8009016:	4618      	mov	r0, r3
 8009018:	f04f 0100 	mov.w	r1, #0
 800901c:	f04f 0200 	mov.w	r2, #0
 8009020:	f04f 0300 	mov.w	r3, #0
 8009024:	008b      	lsls	r3, r1, #2
 8009026:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800902a:	0082      	lsls	r2, r0, #2
 800902c:	4640      	mov	r0, r8
 800902e:	4649      	mov	r1, r9
 8009030:	f7f7 fc34 	bl	800089c <__aeabi_uldivmod>
 8009034:	4602      	mov	r2, r0
 8009036:	460b      	mov	r3, r1
 8009038:	4b49      	ldr	r3, [pc, #292]	; (8009160 <UART_SetConfig+0x38c>)
 800903a:	fba3 2302 	umull	r2, r3, r3, r2
 800903e:	095b      	lsrs	r3, r3, #5
 8009040:	011e      	lsls	r6, r3, #4
 8009042:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009044:	4618      	mov	r0, r3
 8009046:	f04f 0100 	mov.w	r1, #0
 800904a:	4602      	mov	r2, r0
 800904c:	460b      	mov	r3, r1
 800904e:	1894      	adds	r4, r2, r2
 8009050:	60bc      	str	r4, [r7, #8]
 8009052:	415b      	adcs	r3, r3
 8009054:	60fb      	str	r3, [r7, #12]
 8009056:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800905a:	1812      	adds	r2, r2, r0
 800905c:	eb41 0303 	adc.w	r3, r1, r3
 8009060:	f04f 0400 	mov.w	r4, #0
 8009064:	f04f 0500 	mov.w	r5, #0
 8009068:	00dd      	lsls	r5, r3, #3
 800906a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800906e:	00d4      	lsls	r4, r2, #3
 8009070:	4622      	mov	r2, r4
 8009072:	462b      	mov	r3, r5
 8009074:	1814      	adds	r4, r2, r0
 8009076:	64bc      	str	r4, [r7, #72]	; 0x48
 8009078:	414b      	adcs	r3, r1
 800907a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800907c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800907e:	685b      	ldr	r3, [r3, #4]
 8009080:	4618      	mov	r0, r3
 8009082:	f04f 0100 	mov.w	r1, #0
 8009086:	f04f 0200 	mov.w	r2, #0
 800908a:	f04f 0300 	mov.w	r3, #0
 800908e:	008b      	lsls	r3, r1, #2
 8009090:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009094:	0082      	lsls	r2, r0, #2
 8009096:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800909a:	f7f7 fbff 	bl	800089c <__aeabi_uldivmod>
 800909e:	4602      	mov	r2, r0
 80090a0:	460b      	mov	r3, r1
 80090a2:	4b2f      	ldr	r3, [pc, #188]	; (8009160 <UART_SetConfig+0x38c>)
 80090a4:	fba3 1302 	umull	r1, r3, r3, r2
 80090a8:	095b      	lsrs	r3, r3, #5
 80090aa:	2164      	movs	r1, #100	; 0x64
 80090ac:	fb01 f303 	mul.w	r3, r1, r3
 80090b0:	1ad3      	subs	r3, r2, r3
 80090b2:	011b      	lsls	r3, r3, #4
 80090b4:	3332      	adds	r3, #50	; 0x32
 80090b6:	4a2a      	ldr	r2, [pc, #168]	; (8009160 <UART_SetConfig+0x38c>)
 80090b8:	fba2 2303 	umull	r2, r3, r2, r3
 80090bc:	095b      	lsrs	r3, r3, #5
 80090be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80090c2:	441e      	add	r6, r3
 80090c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80090c6:	4618      	mov	r0, r3
 80090c8:	f04f 0100 	mov.w	r1, #0
 80090cc:	4602      	mov	r2, r0
 80090ce:	460b      	mov	r3, r1
 80090d0:	1894      	adds	r4, r2, r2
 80090d2:	603c      	str	r4, [r7, #0]
 80090d4:	415b      	adcs	r3, r3
 80090d6:	607b      	str	r3, [r7, #4]
 80090d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090dc:	1812      	adds	r2, r2, r0
 80090de:	eb41 0303 	adc.w	r3, r1, r3
 80090e2:	f04f 0400 	mov.w	r4, #0
 80090e6:	f04f 0500 	mov.w	r5, #0
 80090ea:	00dd      	lsls	r5, r3, #3
 80090ec:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80090f0:	00d4      	lsls	r4, r2, #3
 80090f2:	4622      	mov	r2, r4
 80090f4:	462b      	mov	r3, r5
 80090f6:	eb12 0a00 	adds.w	sl, r2, r0
 80090fa:	eb43 0b01 	adc.w	fp, r3, r1
 80090fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009100:	685b      	ldr	r3, [r3, #4]
 8009102:	4618      	mov	r0, r3
 8009104:	f04f 0100 	mov.w	r1, #0
 8009108:	f04f 0200 	mov.w	r2, #0
 800910c:	f04f 0300 	mov.w	r3, #0
 8009110:	008b      	lsls	r3, r1, #2
 8009112:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009116:	0082      	lsls	r2, r0, #2
 8009118:	4650      	mov	r0, sl
 800911a:	4659      	mov	r1, fp
 800911c:	f7f7 fbbe 	bl	800089c <__aeabi_uldivmod>
 8009120:	4602      	mov	r2, r0
 8009122:	460b      	mov	r3, r1
 8009124:	4b0e      	ldr	r3, [pc, #56]	; (8009160 <UART_SetConfig+0x38c>)
 8009126:	fba3 1302 	umull	r1, r3, r3, r2
 800912a:	095b      	lsrs	r3, r3, #5
 800912c:	2164      	movs	r1, #100	; 0x64
 800912e:	fb01 f303 	mul.w	r3, r1, r3
 8009132:	1ad3      	subs	r3, r2, r3
 8009134:	011b      	lsls	r3, r3, #4
 8009136:	3332      	adds	r3, #50	; 0x32
 8009138:	4a09      	ldr	r2, [pc, #36]	; (8009160 <UART_SetConfig+0x38c>)
 800913a:	fba2 2303 	umull	r2, r3, r2, r3
 800913e:	095b      	lsrs	r3, r3, #5
 8009140:	f003 020f 	and.w	r2, r3, #15
 8009144:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	4432      	add	r2, r6
 800914a:	609a      	str	r2, [r3, #8]
}
 800914c:	bf00      	nop
 800914e:	377c      	adds	r7, #124	; 0x7c
 8009150:	46bd      	mov	sp, r7
 8009152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009156:	bf00      	nop
 8009158:	40011000 	.word	0x40011000
 800915c:	40011400 	.word	0x40011400
 8009160:	51eb851f 	.word	0x51eb851f

08009164 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8009164:	b480      	push	{r7}
 8009166:	b087      	sub	sp, #28
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
 800916c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	681a      	ldr	r2, [r3, #0]
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009178:	683a      	ldr	r2, [r7, #0]
 800917a:	6812      	ldr	r2, [r2, #0]
 800917c:	f023 0101 	bic.w	r1, r3, #1
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	689b      	ldr	r3, [r3, #8]
 800918a:	2b08      	cmp	r3, #8
 800918c:	d102      	bne.n	8009194 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800918e:	2340      	movs	r3, #64	; 0x40
 8009190:	617b      	str	r3, [r7, #20]
 8009192:	e001      	b.n	8009198 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8009194:	2300      	movs	r3, #0
 8009196:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800919c:	697b      	ldr	r3, [r7, #20]
 800919e:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80091a4:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80091aa:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80091b0:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80091b6:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 80091bc:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 80091c2:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 80091c8:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 80091ce:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 80091d4:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 80091da:	4313      	orrs	r3, r2
 80091dc:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	699b      	ldr	r3, [r3, #24]
 80091e2:	693a      	ldr	r2, [r7, #16]
 80091e4:	4313      	orrs	r3, r2
 80091e6:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091ec:	693a      	ldr	r2, [r7, #16]
 80091ee:	4313      	orrs	r3, r2
 80091f0:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 80091f2:	4b10      	ldr	r3, [pc, #64]	; (8009234 <FSMC_NORSRAM_Init+0xd0>)
 80091f4:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80091fc:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8009204:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	681a      	ldr	r2, [r3, #0]
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	43db      	mvns	r3, r3
 8009214:	ea02 0103 	and.w	r1, r2, r3
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	681a      	ldr	r2, [r3, #0]
 800921c:	693b      	ldr	r3, [r7, #16]
 800921e:	4319      	orrs	r1, r3
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 8009226:	2300      	movs	r3, #0
}
 8009228:	4618      	mov	r0, r3
 800922a:	371c      	adds	r7, #28
 800922c:	46bd      	mov	sp, r7
 800922e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009232:	4770      	bx	lr
 8009234:	0008fb7f 	.word	0x0008fb7f

08009238 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009238:	b480      	push	{r7}
 800923a:	b085      	sub	sp, #20
 800923c:	af00      	add	r7, sp, #0
 800923e:	60f8      	str	r0, [r7, #12]
 8009240:	60b9      	str	r1, [r7, #8]
 8009242:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	1c5a      	adds	r2, r3, #1
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800924e:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	681a      	ldr	r2, [r3, #0]
 8009256:	68bb      	ldr	r3, [r7, #8]
 8009258:	685b      	ldr	r3, [r3, #4]
 800925a:	011b      	lsls	r3, r3, #4
 800925c:	431a      	orrs	r2, r3
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	689b      	ldr	r3, [r3, #8]
 8009262:	021b      	lsls	r3, r3, #8
 8009264:	431a      	orrs	r2, r3
 8009266:	68bb      	ldr	r3, [r7, #8]
 8009268:	68db      	ldr	r3, [r3, #12]
 800926a:	041b      	lsls	r3, r3, #16
 800926c:	431a      	orrs	r2, r3
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	691b      	ldr	r3, [r3, #16]
 8009272:	3b01      	subs	r3, #1
 8009274:	051b      	lsls	r3, r3, #20
 8009276:	431a      	orrs	r2, r3
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	695b      	ldr	r3, [r3, #20]
 800927c:	3b02      	subs	r3, #2
 800927e:	061b      	lsls	r3, r3, #24
 8009280:	431a      	orrs	r2, r3
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	699b      	ldr	r3, [r3, #24]
 8009286:	4313      	orrs	r3, r2
 8009288:	687a      	ldr	r2, [r7, #4]
 800928a:	3201      	adds	r2, #1
 800928c:	4319      	orrs	r1, r3
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 8009294:	2300      	movs	r3, #0
}
 8009296:	4618      	mov	r0, r3
 8009298:	3714      	adds	r7, #20
 800929a:	46bd      	mov	sp, r7
 800929c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a0:	4770      	bx	lr
	...

080092a4 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 80092a4:	b480      	push	{r7}
 80092a6:	b085      	sub	sp, #20
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	60f8      	str	r0, [r7, #12]
 80092ac:	60b9      	str	r1, [r7, #8]
 80092ae:	607a      	str	r2, [r7, #4]
 80092b0:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80092b8:	d11d      	bne.n	80092f6 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	687a      	ldr	r2, [r7, #4]
 80092be:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80092c2:	4b13      	ldr	r3, [pc, #76]	; (8009310 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 80092c4:	4013      	ands	r3, r2
 80092c6:	68ba      	ldr	r2, [r7, #8]
 80092c8:	6811      	ldr	r1, [r2, #0]
 80092ca:	68ba      	ldr	r2, [r7, #8]
 80092cc:	6852      	ldr	r2, [r2, #4]
 80092ce:	0112      	lsls	r2, r2, #4
 80092d0:	4311      	orrs	r1, r2
 80092d2:	68ba      	ldr	r2, [r7, #8]
 80092d4:	6892      	ldr	r2, [r2, #8]
 80092d6:	0212      	lsls	r2, r2, #8
 80092d8:	4311      	orrs	r1, r2
 80092da:	68ba      	ldr	r2, [r7, #8]
 80092dc:	6992      	ldr	r2, [r2, #24]
 80092de:	4311      	orrs	r1, r2
 80092e0:	68ba      	ldr	r2, [r7, #8]
 80092e2:	68d2      	ldr	r2, [r2, #12]
 80092e4:	0412      	lsls	r2, r2, #16
 80092e6:	430a      	orrs	r2, r1
 80092e8:	ea43 0102 	orr.w	r1, r3, r2
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	687a      	ldr	r2, [r7, #4]
 80092f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80092f4:	e005      	b.n	8009302 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	687a      	ldr	r2, [r7, #4]
 80092fa:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80092fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8009302:	2300      	movs	r3, #0
}
 8009304:	4618      	mov	r0, r3
 8009306:	3714      	adds	r7, #20
 8009308:	46bd      	mov	sp, r7
 800930a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930e:	4770      	bx	lr
 8009310:	cff00000 	.word	0xcff00000

08009314 <atoi>:
 8009314:	220a      	movs	r2, #10
 8009316:	2100      	movs	r1, #0
 8009318:	f000 b8e4 	b.w	80094e4 <strtol>

0800931c <__errno>:
 800931c:	4b01      	ldr	r3, [pc, #4]	; (8009324 <__errno+0x8>)
 800931e:	6818      	ldr	r0, [r3, #0]
 8009320:	4770      	bx	lr
 8009322:	bf00      	nop
 8009324:	20000024 	.word	0x20000024

08009328 <__libc_init_array>:
 8009328:	b570      	push	{r4, r5, r6, lr}
 800932a:	4d0d      	ldr	r5, [pc, #52]	; (8009360 <__libc_init_array+0x38>)
 800932c:	4c0d      	ldr	r4, [pc, #52]	; (8009364 <__libc_init_array+0x3c>)
 800932e:	1b64      	subs	r4, r4, r5
 8009330:	10a4      	asrs	r4, r4, #2
 8009332:	2600      	movs	r6, #0
 8009334:	42a6      	cmp	r6, r4
 8009336:	d109      	bne.n	800934c <__libc_init_array+0x24>
 8009338:	4d0b      	ldr	r5, [pc, #44]	; (8009368 <__libc_init_array+0x40>)
 800933a:	4c0c      	ldr	r4, [pc, #48]	; (800936c <__libc_init_array+0x44>)
 800933c:	f001 f81a 	bl	800a374 <_init>
 8009340:	1b64      	subs	r4, r4, r5
 8009342:	10a4      	asrs	r4, r4, #2
 8009344:	2600      	movs	r6, #0
 8009346:	42a6      	cmp	r6, r4
 8009348:	d105      	bne.n	8009356 <__libc_init_array+0x2e>
 800934a:	bd70      	pop	{r4, r5, r6, pc}
 800934c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009350:	4798      	blx	r3
 8009352:	3601      	adds	r6, #1
 8009354:	e7ee      	b.n	8009334 <__libc_init_array+0xc>
 8009356:	f855 3b04 	ldr.w	r3, [r5], #4
 800935a:	4798      	blx	r3
 800935c:	3601      	adds	r6, #1
 800935e:	e7f2      	b.n	8009346 <__libc_init_array+0x1e>
 8009360:	0800b62c 	.word	0x0800b62c
 8009364:	0800b62c 	.word	0x0800b62c
 8009368:	0800b62c 	.word	0x0800b62c
 800936c:	0800b630 	.word	0x0800b630

08009370 <memcpy>:
 8009370:	440a      	add	r2, r1
 8009372:	4291      	cmp	r1, r2
 8009374:	f100 33ff 	add.w	r3, r0, #4294967295
 8009378:	d100      	bne.n	800937c <memcpy+0xc>
 800937a:	4770      	bx	lr
 800937c:	b510      	push	{r4, lr}
 800937e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009382:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009386:	4291      	cmp	r1, r2
 8009388:	d1f9      	bne.n	800937e <memcpy+0xe>
 800938a:	bd10      	pop	{r4, pc}

0800938c <memset>:
 800938c:	4402      	add	r2, r0
 800938e:	4603      	mov	r3, r0
 8009390:	4293      	cmp	r3, r2
 8009392:	d100      	bne.n	8009396 <memset+0xa>
 8009394:	4770      	bx	lr
 8009396:	f803 1b01 	strb.w	r1, [r3], #1
 800939a:	e7f9      	b.n	8009390 <memset+0x4>

0800939c <iprintf>:
 800939c:	b40f      	push	{r0, r1, r2, r3}
 800939e:	4b0a      	ldr	r3, [pc, #40]	; (80093c8 <iprintf+0x2c>)
 80093a0:	b513      	push	{r0, r1, r4, lr}
 80093a2:	681c      	ldr	r4, [r3, #0]
 80093a4:	b124      	cbz	r4, 80093b0 <iprintf+0x14>
 80093a6:	69a3      	ldr	r3, [r4, #24]
 80093a8:	b913      	cbnz	r3, 80093b0 <iprintf+0x14>
 80093aa:	4620      	mov	r0, r4
 80093ac:	f000 fa7e 	bl	80098ac <__sinit>
 80093b0:	ab05      	add	r3, sp, #20
 80093b2:	9a04      	ldr	r2, [sp, #16]
 80093b4:	68a1      	ldr	r1, [r4, #8]
 80093b6:	9301      	str	r3, [sp, #4]
 80093b8:	4620      	mov	r0, r4
 80093ba:	f000 fc4f 	bl	8009c5c <_vfiprintf_r>
 80093be:	b002      	add	sp, #8
 80093c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093c4:	b004      	add	sp, #16
 80093c6:	4770      	bx	lr
 80093c8:	20000024 	.word	0x20000024

080093cc <strcpy>:
 80093cc:	4603      	mov	r3, r0
 80093ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80093d2:	f803 2b01 	strb.w	r2, [r3], #1
 80093d6:	2a00      	cmp	r2, #0
 80093d8:	d1f9      	bne.n	80093ce <strcpy+0x2>
 80093da:	4770      	bx	lr

080093dc <_strtol_l.isra.0>:
 80093dc:	2b01      	cmp	r3, #1
 80093de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093e2:	d001      	beq.n	80093e8 <_strtol_l.isra.0+0xc>
 80093e4:	2b24      	cmp	r3, #36	; 0x24
 80093e6:	d906      	bls.n	80093f6 <_strtol_l.isra.0+0x1a>
 80093e8:	f7ff ff98 	bl	800931c <__errno>
 80093ec:	2316      	movs	r3, #22
 80093ee:	6003      	str	r3, [r0, #0]
 80093f0:	2000      	movs	r0, #0
 80093f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093f6:	4f3a      	ldr	r7, [pc, #232]	; (80094e0 <_strtol_l.isra.0+0x104>)
 80093f8:	468e      	mov	lr, r1
 80093fa:	4676      	mov	r6, lr
 80093fc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8009400:	5de5      	ldrb	r5, [r4, r7]
 8009402:	f015 0508 	ands.w	r5, r5, #8
 8009406:	d1f8      	bne.n	80093fa <_strtol_l.isra.0+0x1e>
 8009408:	2c2d      	cmp	r4, #45	; 0x2d
 800940a:	d134      	bne.n	8009476 <_strtol_l.isra.0+0x9a>
 800940c:	f89e 4000 	ldrb.w	r4, [lr]
 8009410:	f04f 0801 	mov.w	r8, #1
 8009414:	f106 0e02 	add.w	lr, r6, #2
 8009418:	2b00      	cmp	r3, #0
 800941a:	d05c      	beq.n	80094d6 <_strtol_l.isra.0+0xfa>
 800941c:	2b10      	cmp	r3, #16
 800941e:	d10c      	bne.n	800943a <_strtol_l.isra.0+0x5e>
 8009420:	2c30      	cmp	r4, #48	; 0x30
 8009422:	d10a      	bne.n	800943a <_strtol_l.isra.0+0x5e>
 8009424:	f89e 4000 	ldrb.w	r4, [lr]
 8009428:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800942c:	2c58      	cmp	r4, #88	; 0x58
 800942e:	d14d      	bne.n	80094cc <_strtol_l.isra.0+0xf0>
 8009430:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8009434:	2310      	movs	r3, #16
 8009436:	f10e 0e02 	add.w	lr, lr, #2
 800943a:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800943e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009442:	2600      	movs	r6, #0
 8009444:	fbbc f9f3 	udiv	r9, ip, r3
 8009448:	4635      	mov	r5, r6
 800944a:	fb03 ca19 	mls	sl, r3, r9, ip
 800944e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8009452:	2f09      	cmp	r7, #9
 8009454:	d818      	bhi.n	8009488 <_strtol_l.isra.0+0xac>
 8009456:	463c      	mov	r4, r7
 8009458:	42a3      	cmp	r3, r4
 800945a:	dd24      	ble.n	80094a6 <_strtol_l.isra.0+0xca>
 800945c:	2e00      	cmp	r6, #0
 800945e:	db1f      	blt.n	80094a0 <_strtol_l.isra.0+0xc4>
 8009460:	45a9      	cmp	r9, r5
 8009462:	d31d      	bcc.n	80094a0 <_strtol_l.isra.0+0xc4>
 8009464:	d101      	bne.n	800946a <_strtol_l.isra.0+0x8e>
 8009466:	45a2      	cmp	sl, r4
 8009468:	db1a      	blt.n	80094a0 <_strtol_l.isra.0+0xc4>
 800946a:	fb05 4503 	mla	r5, r5, r3, r4
 800946e:	2601      	movs	r6, #1
 8009470:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8009474:	e7eb      	b.n	800944e <_strtol_l.isra.0+0x72>
 8009476:	2c2b      	cmp	r4, #43	; 0x2b
 8009478:	bf08      	it	eq
 800947a:	f89e 4000 	ldrbeq.w	r4, [lr]
 800947e:	46a8      	mov	r8, r5
 8009480:	bf08      	it	eq
 8009482:	f106 0e02 	addeq.w	lr, r6, #2
 8009486:	e7c7      	b.n	8009418 <_strtol_l.isra.0+0x3c>
 8009488:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800948c:	2f19      	cmp	r7, #25
 800948e:	d801      	bhi.n	8009494 <_strtol_l.isra.0+0xb8>
 8009490:	3c37      	subs	r4, #55	; 0x37
 8009492:	e7e1      	b.n	8009458 <_strtol_l.isra.0+0x7c>
 8009494:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8009498:	2f19      	cmp	r7, #25
 800949a:	d804      	bhi.n	80094a6 <_strtol_l.isra.0+0xca>
 800949c:	3c57      	subs	r4, #87	; 0x57
 800949e:	e7db      	b.n	8009458 <_strtol_l.isra.0+0x7c>
 80094a0:	f04f 36ff 	mov.w	r6, #4294967295
 80094a4:	e7e4      	b.n	8009470 <_strtol_l.isra.0+0x94>
 80094a6:	2e00      	cmp	r6, #0
 80094a8:	da05      	bge.n	80094b6 <_strtol_l.isra.0+0xda>
 80094aa:	2322      	movs	r3, #34	; 0x22
 80094ac:	6003      	str	r3, [r0, #0]
 80094ae:	4665      	mov	r5, ip
 80094b0:	b942      	cbnz	r2, 80094c4 <_strtol_l.isra.0+0xe8>
 80094b2:	4628      	mov	r0, r5
 80094b4:	e79d      	b.n	80093f2 <_strtol_l.isra.0+0x16>
 80094b6:	f1b8 0f00 	cmp.w	r8, #0
 80094ba:	d000      	beq.n	80094be <_strtol_l.isra.0+0xe2>
 80094bc:	426d      	negs	r5, r5
 80094be:	2a00      	cmp	r2, #0
 80094c0:	d0f7      	beq.n	80094b2 <_strtol_l.isra.0+0xd6>
 80094c2:	b10e      	cbz	r6, 80094c8 <_strtol_l.isra.0+0xec>
 80094c4:	f10e 31ff 	add.w	r1, lr, #4294967295
 80094c8:	6011      	str	r1, [r2, #0]
 80094ca:	e7f2      	b.n	80094b2 <_strtol_l.isra.0+0xd6>
 80094cc:	2430      	movs	r4, #48	; 0x30
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d1b3      	bne.n	800943a <_strtol_l.isra.0+0x5e>
 80094d2:	2308      	movs	r3, #8
 80094d4:	e7b1      	b.n	800943a <_strtol_l.isra.0+0x5e>
 80094d6:	2c30      	cmp	r4, #48	; 0x30
 80094d8:	d0a4      	beq.n	8009424 <_strtol_l.isra.0+0x48>
 80094da:	230a      	movs	r3, #10
 80094dc:	e7ad      	b.n	800943a <_strtol_l.isra.0+0x5e>
 80094de:	bf00      	nop
 80094e0:	0800b48d 	.word	0x0800b48d

080094e4 <strtol>:
 80094e4:	4613      	mov	r3, r2
 80094e6:	460a      	mov	r2, r1
 80094e8:	4601      	mov	r1, r0
 80094ea:	4802      	ldr	r0, [pc, #8]	; (80094f4 <strtol+0x10>)
 80094ec:	6800      	ldr	r0, [r0, #0]
 80094ee:	f7ff bf75 	b.w	80093dc <_strtol_l.isra.0>
 80094f2:	bf00      	nop
 80094f4:	20000024 	.word	0x20000024

080094f8 <__swbuf_r>:
 80094f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094fa:	460e      	mov	r6, r1
 80094fc:	4614      	mov	r4, r2
 80094fe:	4605      	mov	r5, r0
 8009500:	b118      	cbz	r0, 800950a <__swbuf_r+0x12>
 8009502:	6983      	ldr	r3, [r0, #24]
 8009504:	b90b      	cbnz	r3, 800950a <__swbuf_r+0x12>
 8009506:	f000 f9d1 	bl	80098ac <__sinit>
 800950a:	4b21      	ldr	r3, [pc, #132]	; (8009590 <__swbuf_r+0x98>)
 800950c:	429c      	cmp	r4, r3
 800950e:	d12b      	bne.n	8009568 <__swbuf_r+0x70>
 8009510:	686c      	ldr	r4, [r5, #4]
 8009512:	69a3      	ldr	r3, [r4, #24]
 8009514:	60a3      	str	r3, [r4, #8]
 8009516:	89a3      	ldrh	r3, [r4, #12]
 8009518:	071a      	lsls	r2, r3, #28
 800951a:	d52f      	bpl.n	800957c <__swbuf_r+0x84>
 800951c:	6923      	ldr	r3, [r4, #16]
 800951e:	b36b      	cbz	r3, 800957c <__swbuf_r+0x84>
 8009520:	6923      	ldr	r3, [r4, #16]
 8009522:	6820      	ldr	r0, [r4, #0]
 8009524:	1ac0      	subs	r0, r0, r3
 8009526:	6963      	ldr	r3, [r4, #20]
 8009528:	b2f6      	uxtb	r6, r6
 800952a:	4283      	cmp	r3, r0
 800952c:	4637      	mov	r7, r6
 800952e:	dc04      	bgt.n	800953a <__swbuf_r+0x42>
 8009530:	4621      	mov	r1, r4
 8009532:	4628      	mov	r0, r5
 8009534:	f000 f926 	bl	8009784 <_fflush_r>
 8009538:	bb30      	cbnz	r0, 8009588 <__swbuf_r+0x90>
 800953a:	68a3      	ldr	r3, [r4, #8]
 800953c:	3b01      	subs	r3, #1
 800953e:	60a3      	str	r3, [r4, #8]
 8009540:	6823      	ldr	r3, [r4, #0]
 8009542:	1c5a      	adds	r2, r3, #1
 8009544:	6022      	str	r2, [r4, #0]
 8009546:	701e      	strb	r6, [r3, #0]
 8009548:	6963      	ldr	r3, [r4, #20]
 800954a:	3001      	adds	r0, #1
 800954c:	4283      	cmp	r3, r0
 800954e:	d004      	beq.n	800955a <__swbuf_r+0x62>
 8009550:	89a3      	ldrh	r3, [r4, #12]
 8009552:	07db      	lsls	r3, r3, #31
 8009554:	d506      	bpl.n	8009564 <__swbuf_r+0x6c>
 8009556:	2e0a      	cmp	r6, #10
 8009558:	d104      	bne.n	8009564 <__swbuf_r+0x6c>
 800955a:	4621      	mov	r1, r4
 800955c:	4628      	mov	r0, r5
 800955e:	f000 f911 	bl	8009784 <_fflush_r>
 8009562:	b988      	cbnz	r0, 8009588 <__swbuf_r+0x90>
 8009564:	4638      	mov	r0, r7
 8009566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009568:	4b0a      	ldr	r3, [pc, #40]	; (8009594 <__swbuf_r+0x9c>)
 800956a:	429c      	cmp	r4, r3
 800956c:	d101      	bne.n	8009572 <__swbuf_r+0x7a>
 800956e:	68ac      	ldr	r4, [r5, #8]
 8009570:	e7cf      	b.n	8009512 <__swbuf_r+0x1a>
 8009572:	4b09      	ldr	r3, [pc, #36]	; (8009598 <__swbuf_r+0xa0>)
 8009574:	429c      	cmp	r4, r3
 8009576:	bf08      	it	eq
 8009578:	68ec      	ldreq	r4, [r5, #12]
 800957a:	e7ca      	b.n	8009512 <__swbuf_r+0x1a>
 800957c:	4621      	mov	r1, r4
 800957e:	4628      	mov	r0, r5
 8009580:	f000 f80c 	bl	800959c <__swsetup_r>
 8009584:	2800      	cmp	r0, #0
 8009586:	d0cb      	beq.n	8009520 <__swbuf_r+0x28>
 8009588:	f04f 37ff 	mov.w	r7, #4294967295
 800958c:	e7ea      	b.n	8009564 <__swbuf_r+0x6c>
 800958e:	bf00      	nop
 8009590:	0800b5b0 	.word	0x0800b5b0
 8009594:	0800b5d0 	.word	0x0800b5d0
 8009598:	0800b590 	.word	0x0800b590

0800959c <__swsetup_r>:
 800959c:	4b32      	ldr	r3, [pc, #200]	; (8009668 <__swsetup_r+0xcc>)
 800959e:	b570      	push	{r4, r5, r6, lr}
 80095a0:	681d      	ldr	r5, [r3, #0]
 80095a2:	4606      	mov	r6, r0
 80095a4:	460c      	mov	r4, r1
 80095a6:	b125      	cbz	r5, 80095b2 <__swsetup_r+0x16>
 80095a8:	69ab      	ldr	r3, [r5, #24]
 80095aa:	b913      	cbnz	r3, 80095b2 <__swsetup_r+0x16>
 80095ac:	4628      	mov	r0, r5
 80095ae:	f000 f97d 	bl	80098ac <__sinit>
 80095b2:	4b2e      	ldr	r3, [pc, #184]	; (800966c <__swsetup_r+0xd0>)
 80095b4:	429c      	cmp	r4, r3
 80095b6:	d10f      	bne.n	80095d8 <__swsetup_r+0x3c>
 80095b8:	686c      	ldr	r4, [r5, #4]
 80095ba:	89a3      	ldrh	r3, [r4, #12]
 80095bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80095c0:	0719      	lsls	r1, r3, #28
 80095c2:	d42c      	bmi.n	800961e <__swsetup_r+0x82>
 80095c4:	06dd      	lsls	r5, r3, #27
 80095c6:	d411      	bmi.n	80095ec <__swsetup_r+0x50>
 80095c8:	2309      	movs	r3, #9
 80095ca:	6033      	str	r3, [r6, #0]
 80095cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80095d0:	81a3      	strh	r3, [r4, #12]
 80095d2:	f04f 30ff 	mov.w	r0, #4294967295
 80095d6:	e03e      	b.n	8009656 <__swsetup_r+0xba>
 80095d8:	4b25      	ldr	r3, [pc, #148]	; (8009670 <__swsetup_r+0xd4>)
 80095da:	429c      	cmp	r4, r3
 80095dc:	d101      	bne.n	80095e2 <__swsetup_r+0x46>
 80095de:	68ac      	ldr	r4, [r5, #8]
 80095e0:	e7eb      	b.n	80095ba <__swsetup_r+0x1e>
 80095e2:	4b24      	ldr	r3, [pc, #144]	; (8009674 <__swsetup_r+0xd8>)
 80095e4:	429c      	cmp	r4, r3
 80095e6:	bf08      	it	eq
 80095e8:	68ec      	ldreq	r4, [r5, #12]
 80095ea:	e7e6      	b.n	80095ba <__swsetup_r+0x1e>
 80095ec:	0758      	lsls	r0, r3, #29
 80095ee:	d512      	bpl.n	8009616 <__swsetup_r+0x7a>
 80095f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80095f2:	b141      	cbz	r1, 8009606 <__swsetup_r+0x6a>
 80095f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80095f8:	4299      	cmp	r1, r3
 80095fa:	d002      	beq.n	8009602 <__swsetup_r+0x66>
 80095fc:	4630      	mov	r0, r6
 80095fe:	f000 fa59 	bl	8009ab4 <_free_r>
 8009602:	2300      	movs	r3, #0
 8009604:	6363      	str	r3, [r4, #52]	; 0x34
 8009606:	89a3      	ldrh	r3, [r4, #12]
 8009608:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800960c:	81a3      	strh	r3, [r4, #12]
 800960e:	2300      	movs	r3, #0
 8009610:	6063      	str	r3, [r4, #4]
 8009612:	6923      	ldr	r3, [r4, #16]
 8009614:	6023      	str	r3, [r4, #0]
 8009616:	89a3      	ldrh	r3, [r4, #12]
 8009618:	f043 0308 	orr.w	r3, r3, #8
 800961c:	81a3      	strh	r3, [r4, #12]
 800961e:	6923      	ldr	r3, [r4, #16]
 8009620:	b94b      	cbnz	r3, 8009636 <__swsetup_r+0x9a>
 8009622:	89a3      	ldrh	r3, [r4, #12]
 8009624:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009628:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800962c:	d003      	beq.n	8009636 <__swsetup_r+0x9a>
 800962e:	4621      	mov	r1, r4
 8009630:	4630      	mov	r0, r6
 8009632:	f000 f9ff 	bl	8009a34 <__smakebuf_r>
 8009636:	89a0      	ldrh	r0, [r4, #12]
 8009638:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800963c:	f010 0301 	ands.w	r3, r0, #1
 8009640:	d00a      	beq.n	8009658 <__swsetup_r+0xbc>
 8009642:	2300      	movs	r3, #0
 8009644:	60a3      	str	r3, [r4, #8]
 8009646:	6963      	ldr	r3, [r4, #20]
 8009648:	425b      	negs	r3, r3
 800964a:	61a3      	str	r3, [r4, #24]
 800964c:	6923      	ldr	r3, [r4, #16]
 800964e:	b943      	cbnz	r3, 8009662 <__swsetup_r+0xc6>
 8009650:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009654:	d1ba      	bne.n	80095cc <__swsetup_r+0x30>
 8009656:	bd70      	pop	{r4, r5, r6, pc}
 8009658:	0781      	lsls	r1, r0, #30
 800965a:	bf58      	it	pl
 800965c:	6963      	ldrpl	r3, [r4, #20]
 800965e:	60a3      	str	r3, [r4, #8]
 8009660:	e7f4      	b.n	800964c <__swsetup_r+0xb0>
 8009662:	2000      	movs	r0, #0
 8009664:	e7f7      	b.n	8009656 <__swsetup_r+0xba>
 8009666:	bf00      	nop
 8009668:	20000024 	.word	0x20000024
 800966c:	0800b5b0 	.word	0x0800b5b0
 8009670:	0800b5d0 	.word	0x0800b5d0
 8009674:	0800b590 	.word	0x0800b590

08009678 <__sflush_r>:
 8009678:	898a      	ldrh	r2, [r1, #12]
 800967a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800967e:	4605      	mov	r5, r0
 8009680:	0710      	lsls	r0, r2, #28
 8009682:	460c      	mov	r4, r1
 8009684:	d458      	bmi.n	8009738 <__sflush_r+0xc0>
 8009686:	684b      	ldr	r3, [r1, #4]
 8009688:	2b00      	cmp	r3, #0
 800968a:	dc05      	bgt.n	8009698 <__sflush_r+0x20>
 800968c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800968e:	2b00      	cmp	r3, #0
 8009690:	dc02      	bgt.n	8009698 <__sflush_r+0x20>
 8009692:	2000      	movs	r0, #0
 8009694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009698:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800969a:	2e00      	cmp	r6, #0
 800969c:	d0f9      	beq.n	8009692 <__sflush_r+0x1a>
 800969e:	2300      	movs	r3, #0
 80096a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80096a4:	682f      	ldr	r7, [r5, #0]
 80096a6:	602b      	str	r3, [r5, #0]
 80096a8:	d032      	beq.n	8009710 <__sflush_r+0x98>
 80096aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80096ac:	89a3      	ldrh	r3, [r4, #12]
 80096ae:	075a      	lsls	r2, r3, #29
 80096b0:	d505      	bpl.n	80096be <__sflush_r+0x46>
 80096b2:	6863      	ldr	r3, [r4, #4]
 80096b4:	1ac0      	subs	r0, r0, r3
 80096b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80096b8:	b10b      	cbz	r3, 80096be <__sflush_r+0x46>
 80096ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80096bc:	1ac0      	subs	r0, r0, r3
 80096be:	2300      	movs	r3, #0
 80096c0:	4602      	mov	r2, r0
 80096c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80096c4:	6a21      	ldr	r1, [r4, #32]
 80096c6:	4628      	mov	r0, r5
 80096c8:	47b0      	blx	r6
 80096ca:	1c43      	adds	r3, r0, #1
 80096cc:	89a3      	ldrh	r3, [r4, #12]
 80096ce:	d106      	bne.n	80096de <__sflush_r+0x66>
 80096d0:	6829      	ldr	r1, [r5, #0]
 80096d2:	291d      	cmp	r1, #29
 80096d4:	d82c      	bhi.n	8009730 <__sflush_r+0xb8>
 80096d6:	4a2a      	ldr	r2, [pc, #168]	; (8009780 <__sflush_r+0x108>)
 80096d8:	40ca      	lsrs	r2, r1
 80096da:	07d6      	lsls	r6, r2, #31
 80096dc:	d528      	bpl.n	8009730 <__sflush_r+0xb8>
 80096de:	2200      	movs	r2, #0
 80096e0:	6062      	str	r2, [r4, #4]
 80096e2:	04d9      	lsls	r1, r3, #19
 80096e4:	6922      	ldr	r2, [r4, #16]
 80096e6:	6022      	str	r2, [r4, #0]
 80096e8:	d504      	bpl.n	80096f4 <__sflush_r+0x7c>
 80096ea:	1c42      	adds	r2, r0, #1
 80096ec:	d101      	bne.n	80096f2 <__sflush_r+0x7a>
 80096ee:	682b      	ldr	r3, [r5, #0]
 80096f0:	b903      	cbnz	r3, 80096f4 <__sflush_r+0x7c>
 80096f2:	6560      	str	r0, [r4, #84]	; 0x54
 80096f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80096f6:	602f      	str	r7, [r5, #0]
 80096f8:	2900      	cmp	r1, #0
 80096fa:	d0ca      	beq.n	8009692 <__sflush_r+0x1a>
 80096fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009700:	4299      	cmp	r1, r3
 8009702:	d002      	beq.n	800970a <__sflush_r+0x92>
 8009704:	4628      	mov	r0, r5
 8009706:	f000 f9d5 	bl	8009ab4 <_free_r>
 800970a:	2000      	movs	r0, #0
 800970c:	6360      	str	r0, [r4, #52]	; 0x34
 800970e:	e7c1      	b.n	8009694 <__sflush_r+0x1c>
 8009710:	6a21      	ldr	r1, [r4, #32]
 8009712:	2301      	movs	r3, #1
 8009714:	4628      	mov	r0, r5
 8009716:	47b0      	blx	r6
 8009718:	1c41      	adds	r1, r0, #1
 800971a:	d1c7      	bne.n	80096ac <__sflush_r+0x34>
 800971c:	682b      	ldr	r3, [r5, #0]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d0c4      	beq.n	80096ac <__sflush_r+0x34>
 8009722:	2b1d      	cmp	r3, #29
 8009724:	d001      	beq.n	800972a <__sflush_r+0xb2>
 8009726:	2b16      	cmp	r3, #22
 8009728:	d101      	bne.n	800972e <__sflush_r+0xb6>
 800972a:	602f      	str	r7, [r5, #0]
 800972c:	e7b1      	b.n	8009692 <__sflush_r+0x1a>
 800972e:	89a3      	ldrh	r3, [r4, #12]
 8009730:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009734:	81a3      	strh	r3, [r4, #12]
 8009736:	e7ad      	b.n	8009694 <__sflush_r+0x1c>
 8009738:	690f      	ldr	r7, [r1, #16]
 800973a:	2f00      	cmp	r7, #0
 800973c:	d0a9      	beq.n	8009692 <__sflush_r+0x1a>
 800973e:	0793      	lsls	r3, r2, #30
 8009740:	680e      	ldr	r6, [r1, #0]
 8009742:	bf08      	it	eq
 8009744:	694b      	ldreq	r3, [r1, #20]
 8009746:	600f      	str	r7, [r1, #0]
 8009748:	bf18      	it	ne
 800974a:	2300      	movne	r3, #0
 800974c:	eba6 0807 	sub.w	r8, r6, r7
 8009750:	608b      	str	r3, [r1, #8]
 8009752:	f1b8 0f00 	cmp.w	r8, #0
 8009756:	dd9c      	ble.n	8009692 <__sflush_r+0x1a>
 8009758:	6a21      	ldr	r1, [r4, #32]
 800975a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800975c:	4643      	mov	r3, r8
 800975e:	463a      	mov	r2, r7
 8009760:	4628      	mov	r0, r5
 8009762:	47b0      	blx	r6
 8009764:	2800      	cmp	r0, #0
 8009766:	dc06      	bgt.n	8009776 <__sflush_r+0xfe>
 8009768:	89a3      	ldrh	r3, [r4, #12]
 800976a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800976e:	81a3      	strh	r3, [r4, #12]
 8009770:	f04f 30ff 	mov.w	r0, #4294967295
 8009774:	e78e      	b.n	8009694 <__sflush_r+0x1c>
 8009776:	4407      	add	r7, r0
 8009778:	eba8 0800 	sub.w	r8, r8, r0
 800977c:	e7e9      	b.n	8009752 <__sflush_r+0xda>
 800977e:	bf00      	nop
 8009780:	20400001 	.word	0x20400001

08009784 <_fflush_r>:
 8009784:	b538      	push	{r3, r4, r5, lr}
 8009786:	690b      	ldr	r3, [r1, #16]
 8009788:	4605      	mov	r5, r0
 800978a:	460c      	mov	r4, r1
 800978c:	b913      	cbnz	r3, 8009794 <_fflush_r+0x10>
 800978e:	2500      	movs	r5, #0
 8009790:	4628      	mov	r0, r5
 8009792:	bd38      	pop	{r3, r4, r5, pc}
 8009794:	b118      	cbz	r0, 800979e <_fflush_r+0x1a>
 8009796:	6983      	ldr	r3, [r0, #24]
 8009798:	b90b      	cbnz	r3, 800979e <_fflush_r+0x1a>
 800979a:	f000 f887 	bl	80098ac <__sinit>
 800979e:	4b14      	ldr	r3, [pc, #80]	; (80097f0 <_fflush_r+0x6c>)
 80097a0:	429c      	cmp	r4, r3
 80097a2:	d11b      	bne.n	80097dc <_fflush_r+0x58>
 80097a4:	686c      	ldr	r4, [r5, #4]
 80097a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d0ef      	beq.n	800978e <_fflush_r+0xa>
 80097ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80097b0:	07d0      	lsls	r0, r2, #31
 80097b2:	d404      	bmi.n	80097be <_fflush_r+0x3a>
 80097b4:	0599      	lsls	r1, r3, #22
 80097b6:	d402      	bmi.n	80097be <_fflush_r+0x3a>
 80097b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80097ba:	f000 f915 	bl	80099e8 <__retarget_lock_acquire_recursive>
 80097be:	4628      	mov	r0, r5
 80097c0:	4621      	mov	r1, r4
 80097c2:	f7ff ff59 	bl	8009678 <__sflush_r>
 80097c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80097c8:	07da      	lsls	r2, r3, #31
 80097ca:	4605      	mov	r5, r0
 80097cc:	d4e0      	bmi.n	8009790 <_fflush_r+0xc>
 80097ce:	89a3      	ldrh	r3, [r4, #12]
 80097d0:	059b      	lsls	r3, r3, #22
 80097d2:	d4dd      	bmi.n	8009790 <_fflush_r+0xc>
 80097d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80097d6:	f000 f908 	bl	80099ea <__retarget_lock_release_recursive>
 80097da:	e7d9      	b.n	8009790 <_fflush_r+0xc>
 80097dc:	4b05      	ldr	r3, [pc, #20]	; (80097f4 <_fflush_r+0x70>)
 80097de:	429c      	cmp	r4, r3
 80097e0:	d101      	bne.n	80097e6 <_fflush_r+0x62>
 80097e2:	68ac      	ldr	r4, [r5, #8]
 80097e4:	e7df      	b.n	80097a6 <_fflush_r+0x22>
 80097e6:	4b04      	ldr	r3, [pc, #16]	; (80097f8 <_fflush_r+0x74>)
 80097e8:	429c      	cmp	r4, r3
 80097ea:	bf08      	it	eq
 80097ec:	68ec      	ldreq	r4, [r5, #12]
 80097ee:	e7da      	b.n	80097a6 <_fflush_r+0x22>
 80097f0:	0800b5b0 	.word	0x0800b5b0
 80097f4:	0800b5d0 	.word	0x0800b5d0
 80097f8:	0800b590 	.word	0x0800b590

080097fc <std>:
 80097fc:	2300      	movs	r3, #0
 80097fe:	b510      	push	{r4, lr}
 8009800:	4604      	mov	r4, r0
 8009802:	e9c0 3300 	strd	r3, r3, [r0]
 8009806:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800980a:	6083      	str	r3, [r0, #8]
 800980c:	8181      	strh	r1, [r0, #12]
 800980e:	6643      	str	r3, [r0, #100]	; 0x64
 8009810:	81c2      	strh	r2, [r0, #14]
 8009812:	6183      	str	r3, [r0, #24]
 8009814:	4619      	mov	r1, r3
 8009816:	2208      	movs	r2, #8
 8009818:	305c      	adds	r0, #92	; 0x5c
 800981a:	f7ff fdb7 	bl	800938c <memset>
 800981e:	4b05      	ldr	r3, [pc, #20]	; (8009834 <std+0x38>)
 8009820:	6263      	str	r3, [r4, #36]	; 0x24
 8009822:	4b05      	ldr	r3, [pc, #20]	; (8009838 <std+0x3c>)
 8009824:	62a3      	str	r3, [r4, #40]	; 0x28
 8009826:	4b05      	ldr	r3, [pc, #20]	; (800983c <std+0x40>)
 8009828:	62e3      	str	r3, [r4, #44]	; 0x2c
 800982a:	4b05      	ldr	r3, [pc, #20]	; (8009840 <std+0x44>)
 800982c:	6224      	str	r4, [r4, #32]
 800982e:	6323      	str	r3, [r4, #48]	; 0x30
 8009830:	bd10      	pop	{r4, pc}
 8009832:	bf00      	nop
 8009834:	0800a205 	.word	0x0800a205
 8009838:	0800a227 	.word	0x0800a227
 800983c:	0800a25f 	.word	0x0800a25f
 8009840:	0800a283 	.word	0x0800a283

08009844 <_cleanup_r>:
 8009844:	4901      	ldr	r1, [pc, #4]	; (800984c <_cleanup_r+0x8>)
 8009846:	f000 b8af 	b.w	80099a8 <_fwalk_reent>
 800984a:	bf00      	nop
 800984c:	08009785 	.word	0x08009785

08009850 <__sfmoreglue>:
 8009850:	b570      	push	{r4, r5, r6, lr}
 8009852:	1e4a      	subs	r2, r1, #1
 8009854:	2568      	movs	r5, #104	; 0x68
 8009856:	4355      	muls	r5, r2
 8009858:	460e      	mov	r6, r1
 800985a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800985e:	f000 f979 	bl	8009b54 <_malloc_r>
 8009862:	4604      	mov	r4, r0
 8009864:	b140      	cbz	r0, 8009878 <__sfmoreglue+0x28>
 8009866:	2100      	movs	r1, #0
 8009868:	e9c0 1600 	strd	r1, r6, [r0]
 800986c:	300c      	adds	r0, #12
 800986e:	60a0      	str	r0, [r4, #8]
 8009870:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009874:	f7ff fd8a 	bl	800938c <memset>
 8009878:	4620      	mov	r0, r4
 800987a:	bd70      	pop	{r4, r5, r6, pc}

0800987c <__sfp_lock_acquire>:
 800987c:	4801      	ldr	r0, [pc, #4]	; (8009884 <__sfp_lock_acquire+0x8>)
 800987e:	f000 b8b3 	b.w	80099e8 <__retarget_lock_acquire_recursive>
 8009882:	bf00      	nop
 8009884:	20006044 	.word	0x20006044

08009888 <__sfp_lock_release>:
 8009888:	4801      	ldr	r0, [pc, #4]	; (8009890 <__sfp_lock_release+0x8>)
 800988a:	f000 b8ae 	b.w	80099ea <__retarget_lock_release_recursive>
 800988e:	bf00      	nop
 8009890:	20006044 	.word	0x20006044

08009894 <__sinit_lock_acquire>:
 8009894:	4801      	ldr	r0, [pc, #4]	; (800989c <__sinit_lock_acquire+0x8>)
 8009896:	f000 b8a7 	b.w	80099e8 <__retarget_lock_acquire_recursive>
 800989a:	bf00      	nop
 800989c:	2000603f 	.word	0x2000603f

080098a0 <__sinit_lock_release>:
 80098a0:	4801      	ldr	r0, [pc, #4]	; (80098a8 <__sinit_lock_release+0x8>)
 80098a2:	f000 b8a2 	b.w	80099ea <__retarget_lock_release_recursive>
 80098a6:	bf00      	nop
 80098a8:	2000603f 	.word	0x2000603f

080098ac <__sinit>:
 80098ac:	b510      	push	{r4, lr}
 80098ae:	4604      	mov	r4, r0
 80098b0:	f7ff fff0 	bl	8009894 <__sinit_lock_acquire>
 80098b4:	69a3      	ldr	r3, [r4, #24]
 80098b6:	b11b      	cbz	r3, 80098c0 <__sinit+0x14>
 80098b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098bc:	f7ff bff0 	b.w	80098a0 <__sinit_lock_release>
 80098c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80098c4:	6523      	str	r3, [r4, #80]	; 0x50
 80098c6:	4b13      	ldr	r3, [pc, #76]	; (8009914 <__sinit+0x68>)
 80098c8:	4a13      	ldr	r2, [pc, #76]	; (8009918 <__sinit+0x6c>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	62a2      	str	r2, [r4, #40]	; 0x28
 80098ce:	42a3      	cmp	r3, r4
 80098d0:	bf04      	itt	eq
 80098d2:	2301      	moveq	r3, #1
 80098d4:	61a3      	streq	r3, [r4, #24]
 80098d6:	4620      	mov	r0, r4
 80098d8:	f000 f820 	bl	800991c <__sfp>
 80098dc:	6060      	str	r0, [r4, #4]
 80098de:	4620      	mov	r0, r4
 80098e0:	f000 f81c 	bl	800991c <__sfp>
 80098e4:	60a0      	str	r0, [r4, #8]
 80098e6:	4620      	mov	r0, r4
 80098e8:	f000 f818 	bl	800991c <__sfp>
 80098ec:	2200      	movs	r2, #0
 80098ee:	60e0      	str	r0, [r4, #12]
 80098f0:	2104      	movs	r1, #4
 80098f2:	6860      	ldr	r0, [r4, #4]
 80098f4:	f7ff ff82 	bl	80097fc <std>
 80098f8:	68a0      	ldr	r0, [r4, #8]
 80098fa:	2201      	movs	r2, #1
 80098fc:	2109      	movs	r1, #9
 80098fe:	f7ff ff7d 	bl	80097fc <std>
 8009902:	68e0      	ldr	r0, [r4, #12]
 8009904:	2202      	movs	r2, #2
 8009906:	2112      	movs	r1, #18
 8009908:	f7ff ff78 	bl	80097fc <std>
 800990c:	2301      	movs	r3, #1
 800990e:	61a3      	str	r3, [r4, #24]
 8009910:	e7d2      	b.n	80098b8 <__sinit+0xc>
 8009912:	bf00      	nop
 8009914:	0800b488 	.word	0x0800b488
 8009918:	08009845 	.word	0x08009845

0800991c <__sfp>:
 800991c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800991e:	4607      	mov	r7, r0
 8009920:	f7ff ffac 	bl	800987c <__sfp_lock_acquire>
 8009924:	4b1e      	ldr	r3, [pc, #120]	; (80099a0 <__sfp+0x84>)
 8009926:	681e      	ldr	r6, [r3, #0]
 8009928:	69b3      	ldr	r3, [r6, #24]
 800992a:	b913      	cbnz	r3, 8009932 <__sfp+0x16>
 800992c:	4630      	mov	r0, r6
 800992e:	f7ff ffbd 	bl	80098ac <__sinit>
 8009932:	3648      	adds	r6, #72	; 0x48
 8009934:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009938:	3b01      	subs	r3, #1
 800993a:	d503      	bpl.n	8009944 <__sfp+0x28>
 800993c:	6833      	ldr	r3, [r6, #0]
 800993e:	b30b      	cbz	r3, 8009984 <__sfp+0x68>
 8009940:	6836      	ldr	r6, [r6, #0]
 8009942:	e7f7      	b.n	8009934 <__sfp+0x18>
 8009944:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009948:	b9d5      	cbnz	r5, 8009980 <__sfp+0x64>
 800994a:	4b16      	ldr	r3, [pc, #88]	; (80099a4 <__sfp+0x88>)
 800994c:	60e3      	str	r3, [r4, #12]
 800994e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009952:	6665      	str	r5, [r4, #100]	; 0x64
 8009954:	f000 f847 	bl	80099e6 <__retarget_lock_init_recursive>
 8009958:	f7ff ff96 	bl	8009888 <__sfp_lock_release>
 800995c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009960:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009964:	6025      	str	r5, [r4, #0]
 8009966:	61a5      	str	r5, [r4, #24]
 8009968:	2208      	movs	r2, #8
 800996a:	4629      	mov	r1, r5
 800996c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009970:	f7ff fd0c 	bl	800938c <memset>
 8009974:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009978:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800997c:	4620      	mov	r0, r4
 800997e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009980:	3468      	adds	r4, #104	; 0x68
 8009982:	e7d9      	b.n	8009938 <__sfp+0x1c>
 8009984:	2104      	movs	r1, #4
 8009986:	4638      	mov	r0, r7
 8009988:	f7ff ff62 	bl	8009850 <__sfmoreglue>
 800998c:	4604      	mov	r4, r0
 800998e:	6030      	str	r0, [r6, #0]
 8009990:	2800      	cmp	r0, #0
 8009992:	d1d5      	bne.n	8009940 <__sfp+0x24>
 8009994:	f7ff ff78 	bl	8009888 <__sfp_lock_release>
 8009998:	230c      	movs	r3, #12
 800999a:	603b      	str	r3, [r7, #0]
 800999c:	e7ee      	b.n	800997c <__sfp+0x60>
 800999e:	bf00      	nop
 80099a0:	0800b488 	.word	0x0800b488
 80099a4:	ffff0001 	.word	0xffff0001

080099a8 <_fwalk_reent>:
 80099a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099ac:	4606      	mov	r6, r0
 80099ae:	4688      	mov	r8, r1
 80099b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80099b4:	2700      	movs	r7, #0
 80099b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80099ba:	f1b9 0901 	subs.w	r9, r9, #1
 80099be:	d505      	bpl.n	80099cc <_fwalk_reent+0x24>
 80099c0:	6824      	ldr	r4, [r4, #0]
 80099c2:	2c00      	cmp	r4, #0
 80099c4:	d1f7      	bne.n	80099b6 <_fwalk_reent+0xe>
 80099c6:	4638      	mov	r0, r7
 80099c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099cc:	89ab      	ldrh	r3, [r5, #12]
 80099ce:	2b01      	cmp	r3, #1
 80099d0:	d907      	bls.n	80099e2 <_fwalk_reent+0x3a>
 80099d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80099d6:	3301      	adds	r3, #1
 80099d8:	d003      	beq.n	80099e2 <_fwalk_reent+0x3a>
 80099da:	4629      	mov	r1, r5
 80099dc:	4630      	mov	r0, r6
 80099de:	47c0      	blx	r8
 80099e0:	4307      	orrs	r7, r0
 80099e2:	3568      	adds	r5, #104	; 0x68
 80099e4:	e7e9      	b.n	80099ba <_fwalk_reent+0x12>

080099e6 <__retarget_lock_init_recursive>:
 80099e6:	4770      	bx	lr

080099e8 <__retarget_lock_acquire_recursive>:
 80099e8:	4770      	bx	lr

080099ea <__retarget_lock_release_recursive>:
 80099ea:	4770      	bx	lr

080099ec <__swhatbuf_r>:
 80099ec:	b570      	push	{r4, r5, r6, lr}
 80099ee:	460e      	mov	r6, r1
 80099f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099f4:	2900      	cmp	r1, #0
 80099f6:	b096      	sub	sp, #88	; 0x58
 80099f8:	4614      	mov	r4, r2
 80099fa:	461d      	mov	r5, r3
 80099fc:	da07      	bge.n	8009a0e <__swhatbuf_r+0x22>
 80099fe:	2300      	movs	r3, #0
 8009a00:	602b      	str	r3, [r5, #0]
 8009a02:	89b3      	ldrh	r3, [r6, #12]
 8009a04:	061a      	lsls	r2, r3, #24
 8009a06:	d410      	bmi.n	8009a2a <__swhatbuf_r+0x3e>
 8009a08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a0c:	e00e      	b.n	8009a2c <__swhatbuf_r+0x40>
 8009a0e:	466a      	mov	r2, sp
 8009a10:	f000 fc5e 	bl	800a2d0 <_fstat_r>
 8009a14:	2800      	cmp	r0, #0
 8009a16:	dbf2      	blt.n	80099fe <__swhatbuf_r+0x12>
 8009a18:	9a01      	ldr	r2, [sp, #4]
 8009a1a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009a1e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009a22:	425a      	negs	r2, r3
 8009a24:	415a      	adcs	r2, r3
 8009a26:	602a      	str	r2, [r5, #0]
 8009a28:	e7ee      	b.n	8009a08 <__swhatbuf_r+0x1c>
 8009a2a:	2340      	movs	r3, #64	; 0x40
 8009a2c:	2000      	movs	r0, #0
 8009a2e:	6023      	str	r3, [r4, #0]
 8009a30:	b016      	add	sp, #88	; 0x58
 8009a32:	bd70      	pop	{r4, r5, r6, pc}

08009a34 <__smakebuf_r>:
 8009a34:	898b      	ldrh	r3, [r1, #12]
 8009a36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009a38:	079d      	lsls	r5, r3, #30
 8009a3a:	4606      	mov	r6, r0
 8009a3c:	460c      	mov	r4, r1
 8009a3e:	d507      	bpl.n	8009a50 <__smakebuf_r+0x1c>
 8009a40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009a44:	6023      	str	r3, [r4, #0]
 8009a46:	6123      	str	r3, [r4, #16]
 8009a48:	2301      	movs	r3, #1
 8009a4a:	6163      	str	r3, [r4, #20]
 8009a4c:	b002      	add	sp, #8
 8009a4e:	bd70      	pop	{r4, r5, r6, pc}
 8009a50:	ab01      	add	r3, sp, #4
 8009a52:	466a      	mov	r2, sp
 8009a54:	f7ff ffca 	bl	80099ec <__swhatbuf_r>
 8009a58:	9900      	ldr	r1, [sp, #0]
 8009a5a:	4605      	mov	r5, r0
 8009a5c:	4630      	mov	r0, r6
 8009a5e:	f000 f879 	bl	8009b54 <_malloc_r>
 8009a62:	b948      	cbnz	r0, 8009a78 <__smakebuf_r+0x44>
 8009a64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a68:	059a      	lsls	r2, r3, #22
 8009a6a:	d4ef      	bmi.n	8009a4c <__smakebuf_r+0x18>
 8009a6c:	f023 0303 	bic.w	r3, r3, #3
 8009a70:	f043 0302 	orr.w	r3, r3, #2
 8009a74:	81a3      	strh	r3, [r4, #12]
 8009a76:	e7e3      	b.n	8009a40 <__smakebuf_r+0xc>
 8009a78:	4b0d      	ldr	r3, [pc, #52]	; (8009ab0 <__smakebuf_r+0x7c>)
 8009a7a:	62b3      	str	r3, [r6, #40]	; 0x28
 8009a7c:	89a3      	ldrh	r3, [r4, #12]
 8009a7e:	6020      	str	r0, [r4, #0]
 8009a80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a84:	81a3      	strh	r3, [r4, #12]
 8009a86:	9b00      	ldr	r3, [sp, #0]
 8009a88:	6163      	str	r3, [r4, #20]
 8009a8a:	9b01      	ldr	r3, [sp, #4]
 8009a8c:	6120      	str	r0, [r4, #16]
 8009a8e:	b15b      	cbz	r3, 8009aa8 <__smakebuf_r+0x74>
 8009a90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a94:	4630      	mov	r0, r6
 8009a96:	f000 fc2d 	bl	800a2f4 <_isatty_r>
 8009a9a:	b128      	cbz	r0, 8009aa8 <__smakebuf_r+0x74>
 8009a9c:	89a3      	ldrh	r3, [r4, #12]
 8009a9e:	f023 0303 	bic.w	r3, r3, #3
 8009aa2:	f043 0301 	orr.w	r3, r3, #1
 8009aa6:	81a3      	strh	r3, [r4, #12]
 8009aa8:	89a0      	ldrh	r0, [r4, #12]
 8009aaa:	4305      	orrs	r5, r0
 8009aac:	81a5      	strh	r5, [r4, #12]
 8009aae:	e7cd      	b.n	8009a4c <__smakebuf_r+0x18>
 8009ab0:	08009845 	.word	0x08009845

08009ab4 <_free_r>:
 8009ab4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009ab6:	2900      	cmp	r1, #0
 8009ab8:	d048      	beq.n	8009b4c <_free_r+0x98>
 8009aba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009abe:	9001      	str	r0, [sp, #4]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	f1a1 0404 	sub.w	r4, r1, #4
 8009ac6:	bfb8      	it	lt
 8009ac8:	18e4      	addlt	r4, r4, r3
 8009aca:	f000 fc35 	bl	800a338 <__malloc_lock>
 8009ace:	4a20      	ldr	r2, [pc, #128]	; (8009b50 <_free_r+0x9c>)
 8009ad0:	9801      	ldr	r0, [sp, #4]
 8009ad2:	6813      	ldr	r3, [r2, #0]
 8009ad4:	4615      	mov	r5, r2
 8009ad6:	b933      	cbnz	r3, 8009ae6 <_free_r+0x32>
 8009ad8:	6063      	str	r3, [r4, #4]
 8009ada:	6014      	str	r4, [r2, #0]
 8009adc:	b003      	add	sp, #12
 8009ade:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009ae2:	f000 bc2f 	b.w	800a344 <__malloc_unlock>
 8009ae6:	42a3      	cmp	r3, r4
 8009ae8:	d90b      	bls.n	8009b02 <_free_r+0x4e>
 8009aea:	6821      	ldr	r1, [r4, #0]
 8009aec:	1862      	adds	r2, r4, r1
 8009aee:	4293      	cmp	r3, r2
 8009af0:	bf04      	itt	eq
 8009af2:	681a      	ldreq	r2, [r3, #0]
 8009af4:	685b      	ldreq	r3, [r3, #4]
 8009af6:	6063      	str	r3, [r4, #4]
 8009af8:	bf04      	itt	eq
 8009afa:	1852      	addeq	r2, r2, r1
 8009afc:	6022      	streq	r2, [r4, #0]
 8009afe:	602c      	str	r4, [r5, #0]
 8009b00:	e7ec      	b.n	8009adc <_free_r+0x28>
 8009b02:	461a      	mov	r2, r3
 8009b04:	685b      	ldr	r3, [r3, #4]
 8009b06:	b10b      	cbz	r3, 8009b0c <_free_r+0x58>
 8009b08:	42a3      	cmp	r3, r4
 8009b0a:	d9fa      	bls.n	8009b02 <_free_r+0x4e>
 8009b0c:	6811      	ldr	r1, [r2, #0]
 8009b0e:	1855      	adds	r5, r2, r1
 8009b10:	42a5      	cmp	r5, r4
 8009b12:	d10b      	bne.n	8009b2c <_free_r+0x78>
 8009b14:	6824      	ldr	r4, [r4, #0]
 8009b16:	4421      	add	r1, r4
 8009b18:	1854      	adds	r4, r2, r1
 8009b1a:	42a3      	cmp	r3, r4
 8009b1c:	6011      	str	r1, [r2, #0]
 8009b1e:	d1dd      	bne.n	8009adc <_free_r+0x28>
 8009b20:	681c      	ldr	r4, [r3, #0]
 8009b22:	685b      	ldr	r3, [r3, #4]
 8009b24:	6053      	str	r3, [r2, #4]
 8009b26:	4421      	add	r1, r4
 8009b28:	6011      	str	r1, [r2, #0]
 8009b2a:	e7d7      	b.n	8009adc <_free_r+0x28>
 8009b2c:	d902      	bls.n	8009b34 <_free_r+0x80>
 8009b2e:	230c      	movs	r3, #12
 8009b30:	6003      	str	r3, [r0, #0]
 8009b32:	e7d3      	b.n	8009adc <_free_r+0x28>
 8009b34:	6825      	ldr	r5, [r4, #0]
 8009b36:	1961      	adds	r1, r4, r5
 8009b38:	428b      	cmp	r3, r1
 8009b3a:	bf04      	itt	eq
 8009b3c:	6819      	ldreq	r1, [r3, #0]
 8009b3e:	685b      	ldreq	r3, [r3, #4]
 8009b40:	6063      	str	r3, [r4, #4]
 8009b42:	bf04      	itt	eq
 8009b44:	1949      	addeq	r1, r1, r5
 8009b46:	6021      	streq	r1, [r4, #0]
 8009b48:	6054      	str	r4, [r2, #4]
 8009b4a:	e7c7      	b.n	8009adc <_free_r+0x28>
 8009b4c:	b003      	add	sp, #12
 8009b4e:	bd30      	pop	{r4, r5, pc}
 8009b50:	200000d0 	.word	0x200000d0

08009b54 <_malloc_r>:
 8009b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b56:	1ccd      	adds	r5, r1, #3
 8009b58:	f025 0503 	bic.w	r5, r5, #3
 8009b5c:	3508      	adds	r5, #8
 8009b5e:	2d0c      	cmp	r5, #12
 8009b60:	bf38      	it	cc
 8009b62:	250c      	movcc	r5, #12
 8009b64:	2d00      	cmp	r5, #0
 8009b66:	4606      	mov	r6, r0
 8009b68:	db01      	blt.n	8009b6e <_malloc_r+0x1a>
 8009b6a:	42a9      	cmp	r1, r5
 8009b6c:	d903      	bls.n	8009b76 <_malloc_r+0x22>
 8009b6e:	230c      	movs	r3, #12
 8009b70:	6033      	str	r3, [r6, #0]
 8009b72:	2000      	movs	r0, #0
 8009b74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b76:	f000 fbdf 	bl	800a338 <__malloc_lock>
 8009b7a:	4921      	ldr	r1, [pc, #132]	; (8009c00 <_malloc_r+0xac>)
 8009b7c:	680a      	ldr	r2, [r1, #0]
 8009b7e:	4614      	mov	r4, r2
 8009b80:	b99c      	cbnz	r4, 8009baa <_malloc_r+0x56>
 8009b82:	4f20      	ldr	r7, [pc, #128]	; (8009c04 <_malloc_r+0xb0>)
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	b923      	cbnz	r3, 8009b92 <_malloc_r+0x3e>
 8009b88:	4621      	mov	r1, r4
 8009b8a:	4630      	mov	r0, r6
 8009b8c:	f000 fb2a 	bl	800a1e4 <_sbrk_r>
 8009b90:	6038      	str	r0, [r7, #0]
 8009b92:	4629      	mov	r1, r5
 8009b94:	4630      	mov	r0, r6
 8009b96:	f000 fb25 	bl	800a1e4 <_sbrk_r>
 8009b9a:	1c43      	adds	r3, r0, #1
 8009b9c:	d123      	bne.n	8009be6 <_malloc_r+0x92>
 8009b9e:	230c      	movs	r3, #12
 8009ba0:	6033      	str	r3, [r6, #0]
 8009ba2:	4630      	mov	r0, r6
 8009ba4:	f000 fbce 	bl	800a344 <__malloc_unlock>
 8009ba8:	e7e3      	b.n	8009b72 <_malloc_r+0x1e>
 8009baa:	6823      	ldr	r3, [r4, #0]
 8009bac:	1b5b      	subs	r3, r3, r5
 8009bae:	d417      	bmi.n	8009be0 <_malloc_r+0x8c>
 8009bb0:	2b0b      	cmp	r3, #11
 8009bb2:	d903      	bls.n	8009bbc <_malloc_r+0x68>
 8009bb4:	6023      	str	r3, [r4, #0]
 8009bb6:	441c      	add	r4, r3
 8009bb8:	6025      	str	r5, [r4, #0]
 8009bba:	e004      	b.n	8009bc6 <_malloc_r+0x72>
 8009bbc:	6863      	ldr	r3, [r4, #4]
 8009bbe:	42a2      	cmp	r2, r4
 8009bc0:	bf0c      	ite	eq
 8009bc2:	600b      	streq	r3, [r1, #0]
 8009bc4:	6053      	strne	r3, [r2, #4]
 8009bc6:	4630      	mov	r0, r6
 8009bc8:	f000 fbbc 	bl	800a344 <__malloc_unlock>
 8009bcc:	f104 000b 	add.w	r0, r4, #11
 8009bd0:	1d23      	adds	r3, r4, #4
 8009bd2:	f020 0007 	bic.w	r0, r0, #7
 8009bd6:	1ac2      	subs	r2, r0, r3
 8009bd8:	d0cc      	beq.n	8009b74 <_malloc_r+0x20>
 8009bda:	1a1b      	subs	r3, r3, r0
 8009bdc:	50a3      	str	r3, [r4, r2]
 8009bde:	e7c9      	b.n	8009b74 <_malloc_r+0x20>
 8009be0:	4622      	mov	r2, r4
 8009be2:	6864      	ldr	r4, [r4, #4]
 8009be4:	e7cc      	b.n	8009b80 <_malloc_r+0x2c>
 8009be6:	1cc4      	adds	r4, r0, #3
 8009be8:	f024 0403 	bic.w	r4, r4, #3
 8009bec:	42a0      	cmp	r0, r4
 8009bee:	d0e3      	beq.n	8009bb8 <_malloc_r+0x64>
 8009bf0:	1a21      	subs	r1, r4, r0
 8009bf2:	4630      	mov	r0, r6
 8009bf4:	f000 faf6 	bl	800a1e4 <_sbrk_r>
 8009bf8:	3001      	adds	r0, #1
 8009bfa:	d1dd      	bne.n	8009bb8 <_malloc_r+0x64>
 8009bfc:	e7cf      	b.n	8009b9e <_malloc_r+0x4a>
 8009bfe:	bf00      	nop
 8009c00:	200000d0 	.word	0x200000d0
 8009c04:	200000d4 	.word	0x200000d4

08009c08 <__sfputc_r>:
 8009c08:	6893      	ldr	r3, [r2, #8]
 8009c0a:	3b01      	subs	r3, #1
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	b410      	push	{r4}
 8009c10:	6093      	str	r3, [r2, #8]
 8009c12:	da08      	bge.n	8009c26 <__sfputc_r+0x1e>
 8009c14:	6994      	ldr	r4, [r2, #24]
 8009c16:	42a3      	cmp	r3, r4
 8009c18:	db01      	blt.n	8009c1e <__sfputc_r+0x16>
 8009c1a:	290a      	cmp	r1, #10
 8009c1c:	d103      	bne.n	8009c26 <__sfputc_r+0x1e>
 8009c1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c22:	f7ff bc69 	b.w	80094f8 <__swbuf_r>
 8009c26:	6813      	ldr	r3, [r2, #0]
 8009c28:	1c58      	adds	r0, r3, #1
 8009c2a:	6010      	str	r0, [r2, #0]
 8009c2c:	7019      	strb	r1, [r3, #0]
 8009c2e:	4608      	mov	r0, r1
 8009c30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c34:	4770      	bx	lr

08009c36 <__sfputs_r>:
 8009c36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c38:	4606      	mov	r6, r0
 8009c3a:	460f      	mov	r7, r1
 8009c3c:	4614      	mov	r4, r2
 8009c3e:	18d5      	adds	r5, r2, r3
 8009c40:	42ac      	cmp	r4, r5
 8009c42:	d101      	bne.n	8009c48 <__sfputs_r+0x12>
 8009c44:	2000      	movs	r0, #0
 8009c46:	e007      	b.n	8009c58 <__sfputs_r+0x22>
 8009c48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c4c:	463a      	mov	r2, r7
 8009c4e:	4630      	mov	r0, r6
 8009c50:	f7ff ffda 	bl	8009c08 <__sfputc_r>
 8009c54:	1c43      	adds	r3, r0, #1
 8009c56:	d1f3      	bne.n	8009c40 <__sfputs_r+0xa>
 8009c58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009c5c <_vfiprintf_r>:
 8009c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c60:	460d      	mov	r5, r1
 8009c62:	b09d      	sub	sp, #116	; 0x74
 8009c64:	4614      	mov	r4, r2
 8009c66:	4698      	mov	r8, r3
 8009c68:	4606      	mov	r6, r0
 8009c6a:	b118      	cbz	r0, 8009c74 <_vfiprintf_r+0x18>
 8009c6c:	6983      	ldr	r3, [r0, #24]
 8009c6e:	b90b      	cbnz	r3, 8009c74 <_vfiprintf_r+0x18>
 8009c70:	f7ff fe1c 	bl	80098ac <__sinit>
 8009c74:	4b89      	ldr	r3, [pc, #548]	; (8009e9c <_vfiprintf_r+0x240>)
 8009c76:	429d      	cmp	r5, r3
 8009c78:	d11b      	bne.n	8009cb2 <_vfiprintf_r+0x56>
 8009c7a:	6875      	ldr	r5, [r6, #4]
 8009c7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c7e:	07d9      	lsls	r1, r3, #31
 8009c80:	d405      	bmi.n	8009c8e <_vfiprintf_r+0x32>
 8009c82:	89ab      	ldrh	r3, [r5, #12]
 8009c84:	059a      	lsls	r2, r3, #22
 8009c86:	d402      	bmi.n	8009c8e <_vfiprintf_r+0x32>
 8009c88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c8a:	f7ff fead 	bl	80099e8 <__retarget_lock_acquire_recursive>
 8009c8e:	89ab      	ldrh	r3, [r5, #12]
 8009c90:	071b      	lsls	r3, r3, #28
 8009c92:	d501      	bpl.n	8009c98 <_vfiprintf_r+0x3c>
 8009c94:	692b      	ldr	r3, [r5, #16]
 8009c96:	b9eb      	cbnz	r3, 8009cd4 <_vfiprintf_r+0x78>
 8009c98:	4629      	mov	r1, r5
 8009c9a:	4630      	mov	r0, r6
 8009c9c:	f7ff fc7e 	bl	800959c <__swsetup_r>
 8009ca0:	b1c0      	cbz	r0, 8009cd4 <_vfiprintf_r+0x78>
 8009ca2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ca4:	07dc      	lsls	r4, r3, #31
 8009ca6:	d50e      	bpl.n	8009cc6 <_vfiprintf_r+0x6a>
 8009ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8009cac:	b01d      	add	sp, #116	; 0x74
 8009cae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cb2:	4b7b      	ldr	r3, [pc, #492]	; (8009ea0 <_vfiprintf_r+0x244>)
 8009cb4:	429d      	cmp	r5, r3
 8009cb6:	d101      	bne.n	8009cbc <_vfiprintf_r+0x60>
 8009cb8:	68b5      	ldr	r5, [r6, #8]
 8009cba:	e7df      	b.n	8009c7c <_vfiprintf_r+0x20>
 8009cbc:	4b79      	ldr	r3, [pc, #484]	; (8009ea4 <_vfiprintf_r+0x248>)
 8009cbe:	429d      	cmp	r5, r3
 8009cc0:	bf08      	it	eq
 8009cc2:	68f5      	ldreq	r5, [r6, #12]
 8009cc4:	e7da      	b.n	8009c7c <_vfiprintf_r+0x20>
 8009cc6:	89ab      	ldrh	r3, [r5, #12]
 8009cc8:	0598      	lsls	r0, r3, #22
 8009cca:	d4ed      	bmi.n	8009ca8 <_vfiprintf_r+0x4c>
 8009ccc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009cce:	f7ff fe8c 	bl	80099ea <__retarget_lock_release_recursive>
 8009cd2:	e7e9      	b.n	8009ca8 <_vfiprintf_r+0x4c>
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	9309      	str	r3, [sp, #36]	; 0x24
 8009cd8:	2320      	movs	r3, #32
 8009cda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009cde:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ce2:	2330      	movs	r3, #48	; 0x30
 8009ce4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009ea8 <_vfiprintf_r+0x24c>
 8009ce8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009cec:	f04f 0901 	mov.w	r9, #1
 8009cf0:	4623      	mov	r3, r4
 8009cf2:	469a      	mov	sl, r3
 8009cf4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009cf8:	b10a      	cbz	r2, 8009cfe <_vfiprintf_r+0xa2>
 8009cfa:	2a25      	cmp	r2, #37	; 0x25
 8009cfc:	d1f9      	bne.n	8009cf2 <_vfiprintf_r+0x96>
 8009cfe:	ebba 0b04 	subs.w	fp, sl, r4
 8009d02:	d00b      	beq.n	8009d1c <_vfiprintf_r+0xc0>
 8009d04:	465b      	mov	r3, fp
 8009d06:	4622      	mov	r2, r4
 8009d08:	4629      	mov	r1, r5
 8009d0a:	4630      	mov	r0, r6
 8009d0c:	f7ff ff93 	bl	8009c36 <__sfputs_r>
 8009d10:	3001      	adds	r0, #1
 8009d12:	f000 80aa 	beq.w	8009e6a <_vfiprintf_r+0x20e>
 8009d16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d18:	445a      	add	r2, fp
 8009d1a:	9209      	str	r2, [sp, #36]	; 0x24
 8009d1c:	f89a 3000 	ldrb.w	r3, [sl]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	f000 80a2 	beq.w	8009e6a <_vfiprintf_r+0x20e>
 8009d26:	2300      	movs	r3, #0
 8009d28:	f04f 32ff 	mov.w	r2, #4294967295
 8009d2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d30:	f10a 0a01 	add.w	sl, sl, #1
 8009d34:	9304      	str	r3, [sp, #16]
 8009d36:	9307      	str	r3, [sp, #28]
 8009d38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d3c:	931a      	str	r3, [sp, #104]	; 0x68
 8009d3e:	4654      	mov	r4, sl
 8009d40:	2205      	movs	r2, #5
 8009d42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d46:	4858      	ldr	r0, [pc, #352]	; (8009ea8 <_vfiprintf_r+0x24c>)
 8009d48:	f7f6 fa52 	bl	80001f0 <memchr>
 8009d4c:	9a04      	ldr	r2, [sp, #16]
 8009d4e:	b9d8      	cbnz	r0, 8009d88 <_vfiprintf_r+0x12c>
 8009d50:	06d1      	lsls	r1, r2, #27
 8009d52:	bf44      	itt	mi
 8009d54:	2320      	movmi	r3, #32
 8009d56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d5a:	0713      	lsls	r3, r2, #28
 8009d5c:	bf44      	itt	mi
 8009d5e:	232b      	movmi	r3, #43	; 0x2b
 8009d60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d64:	f89a 3000 	ldrb.w	r3, [sl]
 8009d68:	2b2a      	cmp	r3, #42	; 0x2a
 8009d6a:	d015      	beq.n	8009d98 <_vfiprintf_r+0x13c>
 8009d6c:	9a07      	ldr	r2, [sp, #28]
 8009d6e:	4654      	mov	r4, sl
 8009d70:	2000      	movs	r0, #0
 8009d72:	f04f 0c0a 	mov.w	ip, #10
 8009d76:	4621      	mov	r1, r4
 8009d78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d7c:	3b30      	subs	r3, #48	; 0x30
 8009d7e:	2b09      	cmp	r3, #9
 8009d80:	d94e      	bls.n	8009e20 <_vfiprintf_r+0x1c4>
 8009d82:	b1b0      	cbz	r0, 8009db2 <_vfiprintf_r+0x156>
 8009d84:	9207      	str	r2, [sp, #28]
 8009d86:	e014      	b.n	8009db2 <_vfiprintf_r+0x156>
 8009d88:	eba0 0308 	sub.w	r3, r0, r8
 8009d8c:	fa09 f303 	lsl.w	r3, r9, r3
 8009d90:	4313      	orrs	r3, r2
 8009d92:	9304      	str	r3, [sp, #16]
 8009d94:	46a2      	mov	sl, r4
 8009d96:	e7d2      	b.n	8009d3e <_vfiprintf_r+0xe2>
 8009d98:	9b03      	ldr	r3, [sp, #12]
 8009d9a:	1d19      	adds	r1, r3, #4
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	9103      	str	r1, [sp, #12]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	bfbb      	ittet	lt
 8009da4:	425b      	neglt	r3, r3
 8009da6:	f042 0202 	orrlt.w	r2, r2, #2
 8009daa:	9307      	strge	r3, [sp, #28]
 8009dac:	9307      	strlt	r3, [sp, #28]
 8009dae:	bfb8      	it	lt
 8009db0:	9204      	strlt	r2, [sp, #16]
 8009db2:	7823      	ldrb	r3, [r4, #0]
 8009db4:	2b2e      	cmp	r3, #46	; 0x2e
 8009db6:	d10c      	bne.n	8009dd2 <_vfiprintf_r+0x176>
 8009db8:	7863      	ldrb	r3, [r4, #1]
 8009dba:	2b2a      	cmp	r3, #42	; 0x2a
 8009dbc:	d135      	bne.n	8009e2a <_vfiprintf_r+0x1ce>
 8009dbe:	9b03      	ldr	r3, [sp, #12]
 8009dc0:	1d1a      	adds	r2, r3, #4
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	9203      	str	r2, [sp, #12]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	bfb8      	it	lt
 8009dca:	f04f 33ff 	movlt.w	r3, #4294967295
 8009dce:	3402      	adds	r4, #2
 8009dd0:	9305      	str	r3, [sp, #20]
 8009dd2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009eb8 <_vfiprintf_r+0x25c>
 8009dd6:	7821      	ldrb	r1, [r4, #0]
 8009dd8:	2203      	movs	r2, #3
 8009dda:	4650      	mov	r0, sl
 8009ddc:	f7f6 fa08 	bl	80001f0 <memchr>
 8009de0:	b140      	cbz	r0, 8009df4 <_vfiprintf_r+0x198>
 8009de2:	2340      	movs	r3, #64	; 0x40
 8009de4:	eba0 000a 	sub.w	r0, r0, sl
 8009de8:	fa03 f000 	lsl.w	r0, r3, r0
 8009dec:	9b04      	ldr	r3, [sp, #16]
 8009dee:	4303      	orrs	r3, r0
 8009df0:	3401      	adds	r4, #1
 8009df2:	9304      	str	r3, [sp, #16]
 8009df4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009df8:	482c      	ldr	r0, [pc, #176]	; (8009eac <_vfiprintf_r+0x250>)
 8009dfa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009dfe:	2206      	movs	r2, #6
 8009e00:	f7f6 f9f6 	bl	80001f0 <memchr>
 8009e04:	2800      	cmp	r0, #0
 8009e06:	d03f      	beq.n	8009e88 <_vfiprintf_r+0x22c>
 8009e08:	4b29      	ldr	r3, [pc, #164]	; (8009eb0 <_vfiprintf_r+0x254>)
 8009e0a:	bb1b      	cbnz	r3, 8009e54 <_vfiprintf_r+0x1f8>
 8009e0c:	9b03      	ldr	r3, [sp, #12]
 8009e0e:	3307      	adds	r3, #7
 8009e10:	f023 0307 	bic.w	r3, r3, #7
 8009e14:	3308      	adds	r3, #8
 8009e16:	9303      	str	r3, [sp, #12]
 8009e18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e1a:	443b      	add	r3, r7
 8009e1c:	9309      	str	r3, [sp, #36]	; 0x24
 8009e1e:	e767      	b.n	8009cf0 <_vfiprintf_r+0x94>
 8009e20:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e24:	460c      	mov	r4, r1
 8009e26:	2001      	movs	r0, #1
 8009e28:	e7a5      	b.n	8009d76 <_vfiprintf_r+0x11a>
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	3401      	adds	r4, #1
 8009e2e:	9305      	str	r3, [sp, #20]
 8009e30:	4619      	mov	r1, r3
 8009e32:	f04f 0c0a 	mov.w	ip, #10
 8009e36:	4620      	mov	r0, r4
 8009e38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e3c:	3a30      	subs	r2, #48	; 0x30
 8009e3e:	2a09      	cmp	r2, #9
 8009e40:	d903      	bls.n	8009e4a <_vfiprintf_r+0x1ee>
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d0c5      	beq.n	8009dd2 <_vfiprintf_r+0x176>
 8009e46:	9105      	str	r1, [sp, #20]
 8009e48:	e7c3      	b.n	8009dd2 <_vfiprintf_r+0x176>
 8009e4a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e4e:	4604      	mov	r4, r0
 8009e50:	2301      	movs	r3, #1
 8009e52:	e7f0      	b.n	8009e36 <_vfiprintf_r+0x1da>
 8009e54:	ab03      	add	r3, sp, #12
 8009e56:	9300      	str	r3, [sp, #0]
 8009e58:	462a      	mov	r2, r5
 8009e5a:	4b16      	ldr	r3, [pc, #88]	; (8009eb4 <_vfiprintf_r+0x258>)
 8009e5c:	a904      	add	r1, sp, #16
 8009e5e:	4630      	mov	r0, r6
 8009e60:	f3af 8000 	nop.w
 8009e64:	4607      	mov	r7, r0
 8009e66:	1c78      	adds	r0, r7, #1
 8009e68:	d1d6      	bne.n	8009e18 <_vfiprintf_r+0x1bc>
 8009e6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e6c:	07d9      	lsls	r1, r3, #31
 8009e6e:	d405      	bmi.n	8009e7c <_vfiprintf_r+0x220>
 8009e70:	89ab      	ldrh	r3, [r5, #12]
 8009e72:	059a      	lsls	r2, r3, #22
 8009e74:	d402      	bmi.n	8009e7c <_vfiprintf_r+0x220>
 8009e76:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e78:	f7ff fdb7 	bl	80099ea <__retarget_lock_release_recursive>
 8009e7c:	89ab      	ldrh	r3, [r5, #12]
 8009e7e:	065b      	lsls	r3, r3, #25
 8009e80:	f53f af12 	bmi.w	8009ca8 <_vfiprintf_r+0x4c>
 8009e84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e86:	e711      	b.n	8009cac <_vfiprintf_r+0x50>
 8009e88:	ab03      	add	r3, sp, #12
 8009e8a:	9300      	str	r3, [sp, #0]
 8009e8c:	462a      	mov	r2, r5
 8009e8e:	4b09      	ldr	r3, [pc, #36]	; (8009eb4 <_vfiprintf_r+0x258>)
 8009e90:	a904      	add	r1, sp, #16
 8009e92:	4630      	mov	r0, r6
 8009e94:	f000 f880 	bl	8009f98 <_printf_i>
 8009e98:	e7e4      	b.n	8009e64 <_vfiprintf_r+0x208>
 8009e9a:	bf00      	nop
 8009e9c:	0800b5b0 	.word	0x0800b5b0
 8009ea0:	0800b5d0 	.word	0x0800b5d0
 8009ea4:	0800b590 	.word	0x0800b590
 8009ea8:	0800b5f0 	.word	0x0800b5f0
 8009eac:	0800b5fa 	.word	0x0800b5fa
 8009eb0:	00000000 	.word	0x00000000
 8009eb4:	08009c37 	.word	0x08009c37
 8009eb8:	0800b5f6 	.word	0x0800b5f6

08009ebc <_printf_common>:
 8009ebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ec0:	4616      	mov	r6, r2
 8009ec2:	4699      	mov	r9, r3
 8009ec4:	688a      	ldr	r2, [r1, #8]
 8009ec6:	690b      	ldr	r3, [r1, #16]
 8009ec8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009ecc:	4293      	cmp	r3, r2
 8009ece:	bfb8      	it	lt
 8009ed0:	4613      	movlt	r3, r2
 8009ed2:	6033      	str	r3, [r6, #0]
 8009ed4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009ed8:	4607      	mov	r7, r0
 8009eda:	460c      	mov	r4, r1
 8009edc:	b10a      	cbz	r2, 8009ee2 <_printf_common+0x26>
 8009ede:	3301      	adds	r3, #1
 8009ee0:	6033      	str	r3, [r6, #0]
 8009ee2:	6823      	ldr	r3, [r4, #0]
 8009ee4:	0699      	lsls	r1, r3, #26
 8009ee6:	bf42      	ittt	mi
 8009ee8:	6833      	ldrmi	r3, [r6, #0]
 8009eea:	3302      	addmi	r3, #2
 8009eec:	6033      	strmi	r3, [r6, #0]
 8009eee:	6825      	ldr	r5, [r4, #0]
 8009ef0:	f015 0506 	ands.w	r5, r5, #6
 8009ef4:	d106      	bne.n	8009f04 <_printf_common+0x48>
 8009ef6:	f104 0a19 	add.w	sl, r4, #25
 8009efa:	68e3      	ldr	r3, [r4, #12]
 8009efc:	6832      	ldr	r2, [r6, #0]
 8009efe:	1a9b      	subs	r3, r3, r2
 8009f00:	42ab      	cmp	r3, r5
 8009f02:	dc26      	bgt.n	8009f52 <_printf_common+0x96>
 8009f04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009f08:	1e13      	subs	r3, r2, #0
 8009f0a:	6822      	ldr	r2, [r4, #0]
 8009f0c:	bf18      	it	ne
 8009f0e:	2301      	movne	r3, #1
 8009f10:	0692      	lsls	r2, r2, #26
 8009f12:	d42b      	bmi.n	8009f6c <_printf_common+0xb0>
 8009f14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009f18:	4649      	mov	r1, r9
 8009f1a:	4638      	mov	r0, r7
 8009f1c:	47c0      	blx	r8
 8009f1e:	3001      	adds	r0, #1
 8009f20:	d01e      	beq.n	8009f60 <_printf_common+0xa4>
 8009f22:	6823      	ldr	r3, [r4, #0]
 8009f24:	68e5      	ldr	r5, [r4, #12]
 8009f26:	6832      	ldr	r2, [r6, #0]
 8009f28:	f003 0306 	and.w	r3, r3, #6
 8009f2c:	2b04      	cmp	r3, #4
 8009f2e:	bf08      	it	eq
 8009f30:	1aad      	subeq	r5, r5, r2
 8009f32:	68a3      	ldr	r3, [r4, #8]
 8009f34:	6922      	ldr	r2, [r4, #16]
 8009f36:	bf0c      	ite	eq
 8009f38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f3c:	2500      	movne	r5, #0
 8009f3e:	4293      	cmp	r3, r2
 8009f40:	bfc4      	itt	gt
 8009f42:	1a9b      	subgt	r3, r3, r2
 8009f44:	18ed      	addgt	r5, r5, r3
 8009f46:	2600      	movs	r6, #0
 8009f48:	341a      	adds	r4, #26
 8009f4a:	42b5      	cmp	r5, r6
 8009f4c:	d11a      	bne.n	8009f84 <_printf_common+0xc8>
 8009f4e:	2000      	movs	r0, #0
 8009f50:	e008      	b.n	8009f64 <_printf_common+0xa8>
 8009f52:	2301      	movs	r3, #1
 8009f54:	4652      	mov	r2, sl
 8009f56:	4649      	mov	r1, r9
 8009f58:	4638      	mov	r0, r7
 8009f5a:	47c0      	blx	r8
 8009f5c:	3001      	adds	r0, #1
 8009f5e:	d103      	bne.n	8009f68 <_printf_common+0xac>
 8009f60:	f04f 30ff 	mov.w	r0, #4294967295
 8009f64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f68:	3501      	adds	r5, #1
 8009f6a:	e7c6      	b.n	8009efa <_printf_common+0x3e>
 8009f6c:	18e1      	adds	r1, r4, r3
 8009f6e:	1c5a      	adds	r2, r3, #1
 8009f70:	2030      	movs	r0, #48	; 0x30
 8009f72:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009f76:	4422      	add	r2, r4
 8009f78:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009f7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009f80:	3302      	adds	r3, #2
 8009f82:	e7c7      	b.n	8009f14 <_printf_common+0x58>
 8009f84:	2301      	movs	r3, #1
 8009f86:	4622      	mov	r2, r4
 8009f88:	4649      	mov	r1, r9
 8009f8a:	4638      	mov	r0, r7
 8009f8c:	47c0      	blx	r8
 8009f8e:	3001      	adds	r0, #1
 8009f90:	d0e6      	beq.n	8009f60 <_printf_common+0xa4>
 8009f92:	3601      	adds	r6, #1
 8009f94:	e7d9      	b.n	8009f4a <_printf_common+0x8e>
	...

08009f98 <_printf_i>:
 8009f98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f9c:	460c      	mov	r4, r1
 8009f9e:	4691      	mov	r9, r2
 8009fa0:	7e27      	ldrb	r7, [r4, #24]
 8009fa2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009fa4:	2f78      	cmp	r7, #120	; 0x78
 8009fa6:	4680      	mov	r8, r0
 8009fa8:	469a      	mov	sl, r3
 8009faa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009fae:	d807      	bhi.n	8009fc0 <_printf_i+0x28>
 8009fb0:	2f62      	cmp	r7, #98	; 0x62
 8009fb2:	d80a      	bhi.n	8009fca <_printf_i+0x32>
 8009fb4:	2f00      	cmp	r7, #0
 8009fb6:	f000 80d8 	beq.w	800a16a <_printf_i+0x1d2>
 8009fba:	2f58      	cmp	r7, #88	; 0x58
 8009fbc:	f000 80a3 	beq.w	800a106 <_printf_i+0x16e>
 8009fc0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009fc4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009fc8:	e03a      	b.n	800a040 <_printf_i+0xa8>
 8009fca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009fce:	2b15      	cmp	r3, #21
 8009fd0:	d8f6      	bhi.n	8009fc0 <_printf_i+0x28>
 8009fd2:	a001      	add	r0, pc, #4	; (adr r0, 8009fd8 <_printf_i+0x40>)
 8009fd4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009fd8:	0800a031 	.word	0x0800a031
 8009fdc:	0800a045 	.word	0x0800a045
 8009fe0:	08009fc1 	.word	0x08009fc1
 8009fe4:	08009fc1 	.word	0x08009fc1
 8009fe8:	08009fc1 	.word	0x08009fc1
 8009fec:	08009fc1 	.word	0x08009fc1
 8009ff0:	0800a045 	.word	0x0800a045
 8009ff4:	08009fc1 	.word	0x08009fc1
 8009ff8:	08009fc1 	.word	0x08009fc1
 8009ffc:	08009fc1 	.word	0x08009fc1
 800a000:	08009fc1 	.word	0x08009fc1
 800a004:	0800a151 	.word	0x0800a151
 800a008:	0800a075 	.word	0x0800a075
 800a00c:	0800a133 	.word	0x0800a133
 800a010:	08009fc1 	.word	0x08009fc1
 800a014:	08009fc1 	.word	0x08009fc1
 800a018:	0800a173 	.word	0x0800a173
 800a01c:	08009fc1 	.word	0x08009fc1
 800a020:	0800a075 	.word	0x0800a075
 800a024:	08009fc1 	.word	0x08009fc1
 800a028:	08009fc1 	.word	0x08009fc1
 800a02c:	0800a13b 	.word	0x0800a13b
 800a030:	680b      	ldr	r3, [r1, #0]
 800a032:	1d1a      	adds	r2, r3, #4
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	600a      	str	r2, [r1, #0]
 800a038:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a03c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a040:	2301      	movs	r3, #1
 800a042:	e0a3      	b.n	800a18c <_printf_i+0x1f4>
 800a044:	6825      	ldr	r5, [r4, #0]
 800a046:	6808      	ldr	r0, [r1, #0]
 800a048:	062e      	lsls	r6, r5, #24
 800a04a:	f100 0304 	add.w	r3, r0, #4
 800a04e:	d50a      	bpl.n	800a066 <_printf_i+0xce>
 800a050:	6805      	ldr	r5, [r0, #0]
 800a052:	600b      	str	r3, [r1, #0]
 800a054:	2d00      	cmp	r5, #0
 800a056:	da03      	bge.n	800a060 <_printf_i+0xc8>
 800a058:	232d      	movs	r3, #45	; 0x2d
 800a05a:	426d      	negs	r5, r5
 800a05c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a060:	485e      	ldr	r0, [pc, #376]	; (800a1dc <_printf_i+0x244>)
 800a062:	230a      	movs	r3, #10
 800a064:	e019      	b.n	800a09a <_printf_i+0x102>
 800a066:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a06a:	6805      	ldr	r5, [r0, #0]
 800a06c:	600b      	str	r3, [r1, #0]
 800a06e:	bf18      	it	ne
 800a070:	b22d      	sxthne	r5, r5
 800a072:	e7ef      	b.n	800a054 <_printf_i+0xbc>
 800a074:	680b      	ldr	r3, [r1, #0]
 800a076:	6825      	ldr	r5, [r4, #0]
 800a078:	1d18      	adds	r0, r3, #4
 800a07a:	6008      	str	r0, [r1, #0]
 800a07c:	0628      	lsls	r0, r5, #24
 800a07e:	d501      	bpl.n	800a084 <_printf_i+0xec>
 800a080:	681d      	ldr	r5, [r3, #0]
 800a082:	e002      	b.n	800a08a <_printf_i+0xf2>
 800a084:	0669      	lsls	r1, r5, #25
 800a086:	d5fb      	bpl.n	800a080 <_printf_i+0xe8>
 800a088:	881d      	ldrh	r5, [r3, #0]
 800a08a:	4854      	ldr	r0, [pc, #336]	; (800a1dc <_printf_i+0x244>)
 800a08c:	2f6f      	cmp	r7, #111	; 0x6f
 800a08e:	bf0c      	ite	eq
 800a090:	2308      	moveq	r3, #8
 800a092:	230a      	movne	r3, #10
 800a094:	2100      	movs	r1, #0
 800a096:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a09a:	6866      	ldr	r6, [r4, #4]
 800a09c:	60a6      	str	r6, [r4, #8]
 800a09e:	2e00      	cmp	r6, #0
 800a0a0:	bfa2      	ittt	ge
 800a0a2:	6821      	ldrge	r1, [r4, #0]
 800a0a4:	f021 0104 	bicge.w	r1, r1, #4
 800a0a8:	6021      	strge	r1, [r4, #0]
 800a0aa:	b90d      	cbnz	r5, 800a0b0 <_printf_i+0x118>
 800a0ac:	2e00      	cmp	r6, #0
 800a0ae:	d04d      	beq.n	800a14c <_printf_i+0x1b4>
 800a0b0:	4616      	mov	r6, r2
 800a0b2:	fbb5 f1f3 	udiv	r1, r5, r3
 800a0b6:	fb03 5711 	mls	r7, r3, r1, r5
 800a0ba:	5dc7      	ldrb	r7, [r0, r7]
 800a0bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a0c0:	462f      	mov	r7, r5
 800a0c2:	42bb      	cmp	r3, r7
 800a0c4:	460d      	mov	r5, r1
 800a0c6:	d9f4      	bls.n	800a0b2 <_printf_i+0x11a>
 800a0c8:	2b08      	cmp	r3, #8
 800a0ca:	d10b      	bne.n	800a0e4 <_printf_i+0x14c>
 800a0cc:	6823      	ldr	r3, [r4, #0]
 800a0ce:	07df      	lsls	r7, r3, #31
 800a0d0:	d508      	bpl.n	800a0e4 <_printf_i+0x14c>
 800a0d2:	6923      	ldr	r3, [r4, #16]
 800a0d4:	6861      	ldr	r1, [r4, #4]
 800a0d6:	4299      	cmp	r1, r3
 800a0d8:	bfde      	ittt	le
 800a0da:	2330      	movle	r3, #48	; 0x30
 800a0dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a0e0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a0e4:	1b92      	subs	r2, r2, r6
 800a0e6:	6122      	str	r2, [r4, #16]
 800a0e8:	f8cd a000 	str.w	sl, [sp]
 800a0ec:	464b      	mov	r3, r9
 800a0ee:	aa03      	add	r2, sp, #12
 800a0f0:	4621      	mov	r1, r4
 800a0f2:	4640      	mov	r0, r8
 800a0f4:	f7ff fee2 	bl	8009ebc <_printf_common>
 800a0f8:	3001      	adds	r0, #1
 800a0fa:	d14c      	bne.n	800a196 <_printf_i+0x1fe>
 800a0fc:	f04f 30ff 	mov.w	r0, #4294967295
 800a100:	b004      	add	sp, #16
 800a102:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a106:	4835      	ldr	r0, [pc, #212]	; (800a1dc <_printf_i+0x244>)
 800a108:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a10c:	6823      	ldr	r3, [r4, #0]
 800a10e:	680e      	ldr	r6, [r1, #0]
 800a110:	061f      	lsls	r7, r3, #24
 800a112:	f856 5b04 	ldr.w	r5, [r6], #4
 800a116:	600e      	str	r6, [r1, #0]
 800a118:	d514      	bpl.n	800a144 <_printf_i+0x1ac>
 800a11a:	07d9      	lsls	r1, r3, #31
 800a11c:	bf44      	itt	mi
 800a11e:	f043 0320 	orrmi.w	r3, r3, #32
 800a122:	6023      	strmi	r3, [r4, #0]
 800a124:	b91d      	cbnz	r5, 800a12e <_printf_i+0x196>
 800a126:	6823      	ldr	r3, [r4, #0]
 800a128:	f023 0320 	bic.w	r3, r3, #32
 800a12c:	6023      	str	r3, [r4, #0]
 800a12e:	2310      	movs	r3, #16
 800a130:	e7b0      	b.n	800a094 <_printf_i+0xfc>
 800a132:	6823      	ldr	r3, [r4, #0]
 800a134:	f043 0320 	orr.w	r3, r3, #32
 800a138:	6023      	str	r3, [r4, #0]
 800a13a:	2378      	movs	r3, #120	; 0x78
 800a13c:	4828      	ldr	r0, [pc, #160]	; (800a1e0 <_printf_i+0x248>)
 800a13e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a142:	e7e3      	b.n	800a10c <_printf_i+0x174>
 800a144:	065e      	lsls	r6, r3, #25
 800a146:	bf48      	it	mi
 800a148:	b2ad      	uxthmi	r5, r5
 800a14a:	e7e6      	b.n	800a11a <_printf_i+0x182>
 800a14c:	4616      	mov	r6, r2
 800a14e:	e7bb      	b.n	800a0c8 <_printf_i+0x130>
 800a150:	680b      	ldr	r3, [r1, #0]
 800a152:	6826      	ldr	r6, [r4, #0]
 800a154:	6960      	ldr	r0, [r4, #20]
 800a156:	1d1d      	adds	r5, r3, #4
 800a158:	600d      	str	r5, [r1, #0]
 800a15a:	0635      	lsls	r5, r6, #24
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	d501      	bpl.n	800a164 <_printf_i+0x1cc>
 800a160:	6018      	str	r0, [r3, #0]
 800a162:	e002      	b.n	800a16a <_printf_i+0x1d2>
 800a164:	0671      	lsls	r1, r6, #25
 800a166:	d5fb      	bpl.n	800a160 <_printf_i+0x1c8>
 800a168:	8018      	strh	r0, [r3, #0]
 800a16a:	2300      	movs	r3, #0
 800a16c:	6123      	str	r3, [r4, #16]
 800a16e:	4616      	mov	r6, r2
 800a170:	e7ba      	b.n	800a0e8 <_printf_i+0x150>
 800a172:	680b      	ldr	r3, [r1, #0]
 800a174:	1d1a      	adds	r2, r3, #4
 800a176:	600a      	str	r2, [r1, #0]
 800a178:	681e      	ldr	r6, [r3, #0]
 800a17a:	6862      	ldr	r2, [r4, #4]
 800a17c:	2100      	movs	r1, #0
 800a17e:	4630      	mov	r0, r6
 800a180:	f7f6 f836 	bl	80001f0 <memchr>
 800a184:	b108      	cbz	r0, 800a18a <_printf_i+0x1f2>
 800a186:	1b80      	subs	r0, r0, r6
 800a188:	6060      	str	r0, [r4, #4]
 800a18a:	6863      	ldr	r3, [r4, #4]
 800a18c:	6123      	str	r3, [r4, #16]
 800a18e:	2300      	movs	r3, #0
 800a190:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a194:	e7a8      	b.n	800a0e8 <_printf_i+0x150>
 800a196:	6923      	ldr	r3, [r4, #16]
 800a198:	4632      	mov	r2, r6
 800a19a:	4649      	mov	r1, r9
 800a19c:	4640      	mov	r0, r8
 800a19e:	47d0      	blx	sl
 800a1a0:	3001      	adds	r0, #1
 800a1a2:	d0ab      	beq.n	800a0fc <_printf_i+0x164>
 800a1a4:	6823      	ldr	r3, [r4, #0]
 800a1a6:	079b      	lsls	r3, r3, #30
 800a1a8:	d413      	bmi.n	800a1d2 <_printf_i+0x23a>
 800a1aa:	68e0      	ldr	r0, [r4, #12]
 800a1ac:	9b03      	ldr	r3, [sp, #12]
 800a1ae:	4298      	cmp	r0, r3
 800a1b0:	bfb8      	it	lt
 800a1b2:	4618      	movlt	r0, r3
 800a1b4:	e7a4      	b.n	800a100 <_printf_i+0x168>
 800a1b6:	2301      	movs	r3, #1
 800a1b8:	4632      	mov	r2, r6
 800a1ba:	4649      	mov	r1, r9
 800a1bc:	4640      	mov	r0, r8
 800a1be:	47d0      	blx	sl
 800a1c0:	3001      	adds	r0, #1
 800a1c2:	d09b      	beq.n	800a0fc <_printf_i+0x164>
 800a1c4:	3501      	adds	r5, #1
 800a1c6:	68e3      	ldr	r3, [r4, #12]
 800a1c8:	9903      	ldr	r1, [sp, #12]
 800a1ca:	1a5b      	subs	r3, r3, r1
 800a1cc:	42ab      	cmp	r3, r5
 800a1ce:	dcf2      	bgt.n	800a1b6 <_printf_i+0x21e>
 800a1d0:	e7eb      	b.n	800a1aa <_printf_i+0x212>
 800a1d2:	2500      	movs	r5, #0
 800a1d4:	f104 0619 	add.w	r6, r4, #25
 800a1d8:	e7f5      	b.n	800a1c6 <_printf_i+0x22e>
 800a1da:	bf00      	nop
 800a1dc:	0800b601 	.word	0x0800b601
 800a1e0:	0800b612 	.word	0x0800b612

0800a1e4 <_sbrk_r>:
 800a1e4:	b538      	push	{r3, r4, r5, lr}
 800a1e6:	4d06      	ldr	r5, [pc, #24]	; (800a200 <_sbrk_r+0x1c>)
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	4604      	mov	r4, r0
 800a1ec:	4608      	mov	r0, r1
 800a1ee:	602b      	str	r3, [r5, #0]
 800a1f0:	f7fa fe68 	bl	8004ec4 <_sbrk>
 800a1f4:	1c43      	adds	r3, r0, #1
 800a1f6:	d102      	bne.n	800a1fe <_sbrk_r+0x1a>
 800a1f8:	682b      	ldr	r3, [r5, #0]
 800a1fa:	b103      	cbz	r3, 800a1fe <_sbrk_r+0x1a>
 800a1fc:	6023      	str	r3, [r4, #0]
 800a1fe:	bd38      	pop	{r3, r4, r5, pc}
 800a200:	20006048 	.word	0x20006048

0800a204 <__sread>:
 800a204:	b510      	push	{r4, lr}
 800a206:	460c      	mov	r4, r1
 800a208:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a20c:	f000 f8a0 	bl	800a350 <_read_r>
 800a210:	2800      	cmp	r0, #0
 800a212:	bfab      	itete	ge
 800a214:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a216:	89a3      	ldrhlt	r3, [r4, #12]
 800a218:	181b      	addge	r3, r3, r0
 800a21a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a21e:	bfac      	ite	ge
 800a220:	6563      	strge	r3, [r4, #84]	; 0x54
 800a222:	81a3      	strhlt	r3, [r4, #12]
 800a224:	bd10      	pop	{r4, pc}

0800a226 <__swrite>:
 800a226:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a22a:	461f      	mov	r7, r3
 800a22c:	898b      	ldrh	r3, [r1, #12]
 800a22e:	05db      	lsls	r3, r3, #23
 800a230:	4605      	mov	r5, r0
 800a232:	460c      	mov	r4, r1
 800a234:	4616      	mov	r6, r2
 800a236:	d505      	bpl.n	800a244 <__swrite+0x1e>
 800a238:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a23c:	2302      	movs	r3, #2
 800a23e:	2200      	movs	r2, #0
 800a240:	f000 f868 	bl	800a314 <_lseek_r>
 800a244:	89a3      	ldrh	r3, [r4, #12]
 800a246:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a24a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a24e:	81a3      	strh	r3, [r4, #12]
 800a250:	4632      	mov	r2, r6
 800a252:	463b      	mov	r3, r7
 800a254:	4628      	mov	r0, r5
 800a256:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a25a:	f000 b817 	b.w	800a28c <_write_r>

0800a25e <__sseek>:
 800a25e:	b510      	push	{r4, lr}
 800a260:	460c      	mov	r4, r1
 800a262:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a266:	f000 f855 	bl	800a314 <_lseek_r>
 800a26a:	1c43      	adds	r3, r0, #1
 800a26c:	89a3      	ldrh	r3, [r4, #12]
 800a26e:	bf15      	itete	ne
 800a270:	6560      	strne	r0, [r4, #84]	; 0x54
 800a272:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a276:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a27a:	81a3      	strheq	r3, [r4, #12]
 800a27c:	bf18      	it	ne
 800a27e:	81a3      	strhne	r3, [r4, #12]
 800a280:	bd10      	pop	{r4, pc}

0800a282 <__sclose>:
 800a282:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a286:	f000 b813 	b.w	800a2b0 <_close_r>
	...

0800a28c <_write_r>:
 800a28c:	b538      	push	{r3, r4, r5, lr}
 800a28e:	4d07      	ldr	r5, [pc, #28]	; (800a2ac <_write_r+0x20>)
 800a290:	4604      	mov	r4, r0
 800a292:	4608      	mov	r0, r1
 800a294:	4611      	mov	r1, r2
 800a296:	2200      	movs	r2, #0
 800a298:	602a      	str	r2, [r5, #0]
 800a29a:	461a      	mov	r2, r3
 800a29c:	f7fa fdc1 	bl	8004e22 <_write>
 800a2a0:	1c43      	adds	r3, r0, #1
 800a2a2:	d102      	bne.n	800a2aa <_write_r+0x1e>
 800a2a4:	682b      	ldr	r3, [r5, #0]
 800a2a6:	b103      	cbz	r3, 800a2aa <_write_r+0x1e>
 800a2a8:	6023      	str	r3, [r4, #0]
 800a2aa:	bd38      	pop	{r3, r4, r5, pc}
 800a2ac:	20006048 	.word	0x20006048

0800a2b0 <_close_r>:
 800a2b0:	b538      	push	{r3, r4, r5, lr}
 800a2b2:	4d06      	ldr	r5, [pc, #24]	; (800a2cc <_close_r+0x1c>)
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	4604      	mov	r4, r0
 800a2b8:	4608      	mov	r0, r1
 800a2ba:	602b      	str	r3, [r5, #0]
 800a2bc:	f7fa fdcd 	bl	8004e5a <_close>
 800a2c0:	1c43      	adds	r3, r0, #1
 800a2c2:	d102      	bne.n	800a2ca <_close_r+0x1a>
 800a2c4:	682b      	ldr	r3, [r5, #0]
 800a2c6:	b103      	cbz	r3, 800a2ca <_close_r+0x1a>
 800a2c8:	6023      	str	r3, [r4, #0]
 800a2ca:	bd38      	pop	{r3, r4, r5, pc}
 800a2cc:	20006048 	.word	0x20006048

0800a2d0 <_fstat_r>:
 800a2d0:	b538      	push	{r3, r4, r5, lr}
 800a2d2:	4d07      	ldr	r5, [pc, #28]	; (800a2f0 <_fstat_r+0x20>)
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	4604      	mov	r4, r0
 800a2d8:	4608      	mov	r0, r1
 800a2da:	4611      	mov	r1, r2
 800a2dc:	602b      	str	r3, [r5, #0]
 800a2de:	f7fa fdc8 	bl	8004e72 <_fstat>
 800a2e2:	1c43      	adds	r3, r0, #1
 800a2e4:	d102      	bne.n	800a2ec <_fstat_r+0x1c>
 800a2e6:	682b      	ldr	r3, [r5, #0]
 800a2e8:	b103      	cbz	r3, 800a2ec <_fstat_r+0x1c>
 800a2ea:	6023      	str	r3, [r4, #0]
 800a2ec:	bd38      	pop	{r3, r4, r5, pc}
 800a2ee:	bf00      	nop
 800a2f0:	20006048 	.word	0x20006048

0800a2f4 <_isatty_r>:
 800a2f4:	b538      	push	{r3, r4, r5, lr}
 800a2f6:	4d06      	ldr	r5, [pc, #24]	; (800a310 <_isatty_r+0x1c>)
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	4604      	mov	r4, r0
 800a2fc:	4608      	mov	r0, r1
 800a2fe:	602b      	str	r3, [r5, #0]
 800a300:	f7fa fdc7 	bl	8004e92 <_isatty>
 800a304:	1c43      	adds	r3, r0, #1
 800a306:	d102      	bne.n	800a30e <_isatty_r+0x1a>
 800a308:	682b      	ldr	r3, [r5, #0]
 800a30a:	b103      	cbz	r3, 800a30e <_isatty_r+0x1a>
 800a30c:	6023      	str	r3, [r4, #0]
 800a30e:	bd38      	pop	{r3, r4, r5, pc}
 800a310:	20006048 	.word	0x20006048

0800a314 <_lseek_r>:
 800a314:	b538      	push	{r3, r4, r5, lr}
 800a316:	4d07      	ldr	r5, [pc, #28]	; (800a334 <_lseek_r+0x20>)
 800a318:	4604      	mov	r4, r0
 800a31a:	4608      	mov	r0, r1
 800a31c:	4611      	mov	r1, r2
 800a31e:	2200      	movs	r2, #0
 800a320:	602a      	str	r2, [r5, #0]
 800a322:	461a      	mov	r2, r3
 800a324:	f7fa fdc0 	bl	8004ea8 <_lseek>
 800a328:	1c43      	adds	r3, r0, #1
 800a32a:	d102      	bne.n	800a332 <_lseek_r+0x1e>
 800a32c:	682b      	ldr	r3, [r5, #0]
 800a32e:	b103      	cbz	r3, 800a332 <_lseek_r+0x1e>
 800a330:	6023      	str	r3, [r4, #0]
 800a332:	bd38      	pop	{r3, r4, r5, pc}
 800a334:	20006048 	.word	0x20006048

0800a338 <__malloc_lock>:
 800a338:	4801      	ldr	r0, [pc, #4]	; (800a340 <__malloc_lock+0x8>)
 800a33a:	f7ff bb55 	b.w	80099e8 <__retarget_lock_acquire_recursive>
 800a33e:	bf00      	nop
 800a340:	20006040 	.word	0x20006040

0800a344 <__malloc_unlock>:
 800a344:	4801      	ldr	r0, [pc, #4]	; (800a34c <__malloc_unlock+0x8>)
 800a346:	f7ff bb50 	b.w	80099ea <__retarget_lock_release_recursive>
 800a34a:	bf00      	nop
 800a34c:	20006040 	.word	0x20006040

0800a350 <_read_r>:
 800a350:	b538      	push	{r3, r4, r5, lr}
 800a352:	4d07      	ldr	r5, [pc, #28]	; (800a370 <_read_r+0x20>)
 800a354:	4604      	mov	r4, r0
 800a356:	4608      	mov	r0, r1
 800a358:	4611      	mov	r1, r2
 800a35a:	2200      	movs	r2, #0
 800a35c:	602a      	str	r2, [r5, #0]
 800a35e:	461a      	mov	r2, r3
 800a360:	f7fa fd42 	bl	8004de8 <_read>
 800a364:	1c43      	adds	r3, r0, #1
 800a366:	d102      	bne.n	800a36e <_read_r+0x1e>
 800a368:	682b      	ldr	r3, [r5, #0]
 800a36a:	b103      	cbz	r3, 800a36e <_read_r+0x1e>
 800a36c:	6023      	str	r3, [r4, #0]
 800a36e:	bd38      	pop	{r3, r4, r5, pc}
 800a370:	20006048 	.word	0x20006048

0800a374 <_init>:
 800a374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a376:	bf00      	nop
 800a378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a37a:	bc08      	pop	{r3}
 800a37c:	469e      	mov	lr, r3
 800a37e:	4770      	bx	lr

0800a380 <_fini>:
 800a380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a382:	bf00      	nop
 800a384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a386:	bc08      	pop	{r3}
 800a388:	469e      	mov	lr, r3
 800a38a:	4770      	bx	lr
