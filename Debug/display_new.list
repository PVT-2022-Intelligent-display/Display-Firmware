
display_new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e6c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  08005ffc  08005ffc  00015ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800624c  0800624c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800624c  0800624c  0001624c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006254  08006254  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006254  08006254  00016254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006258  08006258  00016258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800625c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002efc  20000078  080062d4  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002f74  080062d4  00022f74  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011788  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002807  00000000  00000000  00031830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e98  00000000  00000000  00034038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000da8  00000000  00000000  00034ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000230b7  00000000  00000000  00035c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012a37  00000000  00000000  00058d2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ccc7f  00000000  00000000  0006b766  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001383e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000462c  00000000  00000000  00138438  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005fe4 	.word	0x08005fe4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08005fe4 	.word	0x08005fe4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <Init_LCD>:
void ili9488_fillRect(uint16_t x1, uint16_t y1, uint16_t w, uint16_t h, uint16_t color);
void delay_ms(__IO uint32_t nCount1);
void ili9488_set_coordinates(uint16_t x1,uint16_t y1, uint16_t x2,uint16_t y2);

void Init_LCD()
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
	interrupt_initialize_priorities();		// initialize IRQ
 8000588:	f000 f806 	bl	8000598 <interrupt_initialize_priorities>
	//*****************************************************************************
		iopins_ini();							// initialize IO pins
 800058c:	f000 f80c 	bl	80005a8 <iopins_ini>

	//*****************************************************************************
		initialize_ili9488();					// initialize LCD
 8000590:	f000 fa12 	bl	80009b8 <initialize_ili9488>
}
 8000594:	bf00      	nop
 8000596:	bd80      	pop	{r7, pc}

08000598 <interrupt_initialize_priorities>:

void interrupt_initialize_priorities()
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4); //4 bits for preemp priority 0 bit for sub priority
 800059c:	2003      	movs	r0, #3
 800059e:	f001 fe43 	bl	8002228 <HAL_NVIC_SetPriorityGrouping>
}
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}
	...

080005a8 <iopins_ini>:

void iopins_ini()
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b098      	sub	sp, #96	; 0x60
 80005ac:	af00      	add	r7, sp, #0

	 __GPIOC_CLK_ENABLE();
 80005ae:	2300      	movs	r3, #0
 80005b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80005b2:	4bac      	ldr	r3, [pc, #688]	; (8000864 <iopins_ini+0x2bc>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	4aab      	ldr	r2, [pc, #684]	; (8000864 <iopins_ini+0x2bc>)
 80005b8:	f043 0304 	orr.w	r3, r3, #4
 80005bc:	6313      	str	r3, [r2, #48]	; 0x30
 80005be:	4ba9      	ldr	r3, [pc, #676]	; (8000864 <iopins_ini+0x2bc>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	f003 0304 	and.w	r3, r3, #4
 80005c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80005c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
	 __GPIOD_CLK_ENABLE();
 80005ca:	2300      	movs	r3, #0
 80005cc:	647b      	str	r3, [r7, #68]	; 0x44
 80005ce:	4ba5      	ldr	r3, [pc, #660]	; (8000864 <iopins_ini+0x2bc>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	4aa4      	ldr	r2, [pc, #656]	; (8000864 <iopins_ini+0x2bc>)
 80005d4:	f043 0308 	orr.w	r3, r3, #8
 80005d8:	6313      	str	r3, [r2, #48]	; 0x30
 80005da:	4ba2      	ldr	r3, [pc, #648]	; (8000864 <iopins_ini+0x2bc>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	f003 0308 	and.w	r3, r3, #8
 80005e2:	647b      	str	r3, [r7, #68]	; 0x44
 80005e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
	 __GPIOA_CLK_ENABLE();
 80005e6:	2300      	movs	r3, #0
 80005e8:	643b      	str	r3, [r7, #64]	; 0x40
 80005ea:	4b9e      	ldr	r3, [pc, #632]	; (8000864 <iopins_ini+0x2bc>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	4a9d      	ldr	r2, [pc, #628]	; (8000864 <iopins_ini+0x2bc>)
 80005f0:	f043 0301 	orr.w	r3, r3, #1
 80005f4:	6313      	str	r3, [r2, #48]	; 0x30
 80005f6:	4b9b      	ldr	r3, [pc, #620]	; (8000864 <iopins_ini+0x2bc>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	f003 0301 	and.w	r3, r3, #1
 80005fe:	643b      	str	r3, [r7, #64]	; 0x40
 8000600:	6c3b      	ldr	r3, [r7, #64]	; 0x40
	 __GPIOB_CLK_ENABLE();
 8000602:	2300      	movs	r3, #0
 8000604:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000606:	4b97      	ldr	r3, [pc, #604]	; (8000864 <iopins_ini+0x2bc>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	4a96      	ldr	r2, [pc, #600]	; (8000864 <iopins_ini+0x2bc>)
 800060c:	f043 0302 	orr.w	r3, r3, #2
 8000610:	6313      	str	r3, [r2, #48]	; 0x30
 8000612:	4b94      	ldr	r3, [pc, #592]	; (8000864 <iopins_ini+0x2bc>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	f003 0302 	and.w	r3, r3, #2
 800061a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800061c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
	GPIO_InitTypeDef GPIO_InitStruct;

    BUZZER_PORT_RCC();
 800061e:	2300      	movs	r3, #0
 8000620:	63bb      	str	r3, [r7, #56]	; 0x38
 8000622:	4b90      	ldr	r3, [pc, #576]	; (8000864 <iopins_ini+0x2bc>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	4a8f      	ldr	r2, [pc, #572]	; (8000864 <iopins_ini+0x2bc>)
 8000628:	f043 0308 	orr.w	r3, r3, #8
 800062c:	6313      	str	r3, [r2, #48]	; 0x30
 800062e:	4b8d      	ldr	r3, [pc, #564]	; (8000864 <iopins_ini+0x2bc>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	f003 0308 	and.w	r3, r3, #8
 8000636:	63bb      	str	r3, [r7, #56]	; 0x38
 8000638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Pin = BUZZER;
 800063a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800063e:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000640:	2301      	movs	r3, #1
 8000642:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000644:	2300      	movs	r3, #0
 8000646:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(BUZZER_PORT, &GPIO_InitStruct);
 8000648:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800064c:	4619      	mov	r1, r3
 800064e:	4886      	ldr	r0, [pc, #536]	; (8000868 <iopins_ini+0x2c0>)
 8000650:	f002 f9a8 	bl	80029a4 <HAL_GPIO_Init>

    RS485DIR_PORT_RCC();
 8000654:	2300      	movs	r3, #0
 8000656:	637b      	str	r3, [r7, #52]	; 0x34
 8000658:	4b82      	ldr	r3, [pc, #520]	; (8000864 <iopins_ini+0x2bc>)
 800065a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065c:	4a81      	ldr	r2, [pc, #516]	; (8000864 <iopins_ini+0x2bc>)
 800065e:	f043 0301 	orr.w	r3, r3, #1
 8000662:	6313      	str	r3, [r2, #48]	; 0x30
 8000664:	4b7f      	ldr	r3, [pc, #508]	; (8000864 <iopins_ini+0x2bc>)
 8000666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000668:	f003 0301 	and.w	r3, r3, #1
 800066c:	637b      	str	r3, [r7, #52]	; 0x34
 800066e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Pin = RS485DIR;
 8000670:	2302      	movs	r3, #2
 8000672:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000674:	2301      	movs	r3, #1
 8000676:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000678:	2300      	movs	r3, #0
 800067a:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(RS485DIR_PORT, &GPIO_InitStruct);
 800067c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000680:	4619      	mov	r1, r3
 8000682:	487a      	ldr	r0, [pc, #488]	; (800086c <iopins_ini+0x2c4>)
 8000684:	f002 f98e 	bl	80029a4 <HAL_GPIO_Init>
//	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
//	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//	 HAL_GPIO_Init(LCD_BACKLIGHT_PORT, &GPIO_InitStruct);
//	HAL_GPIO_WritePin(LCD_BACKLIGHT_PORT,LCD_BACKLIGHT);

    LCD_CS_PORT_RCC();
 8000688:	2300      	movs	r3, #0
 800068a:	633b      	str	r3, [r7, #48]	; 0x30
 800068c:	4b75      	ldr	r3, [pc, #468]	; (8000864 <iopins_ini+0x2bc>)
 800068e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000690:	4a74      	ldr	r2, [pc, #464]	; (8000864 <iopins_ini+0x2bc>)
 8000692:	f043 0308 	orr.w	r3, r3, #8
 8000696:	6313      	str	r3, [r2, #48]	; 0x30
 8000698:	4b72      	ldr	r3, [pc, #456]	; (8000864 <iopins_ini+0x2bc>)
 800069a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069c:	f003 0308 	and.w	r3, r3, #8
 80006a0:	633b      	str	r3, [r7, #48]	; 0x30
 80006a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pin = LCD_CS;
 80006a4:	2380      	movs	r3, #128	; 0x80
 80006a6:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a8:	2301      	movs	r3, #1
 80006aa:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ac:	2303      	movs	r3, #3
 80006ae:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(LCD_CS_PORT, &GPIO_InitStruct);
 80006b0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80006b4:	4619      	mov	r1, r3
 80006b6:	486c      	ldr	r0, [pc, #432]	; (8000868 <iopins_ini+0x2c0>)
 80006b8:	f002 f974 	bl	80029a4 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(LCD_CS_PORT,LCD_CS,GPIO_PIN_SET);
 80006bc:	2201      	movs	r2, #1
 80006be:	2180      	movs	r1, #128	; 0x80
 80006c0:	4869      	ldr	r0, [pc, #420]	; (8000868 <iopins_ini+0x2c0>)
 80006c2:	f002 fb0b 	bl	8002cdc <HAL_GPIO_WritePin>

    LCD_RES_PORT_RCC();
 80006c6:	2300      	movs	r3, #0
 80006c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80006ca:	4b66      	ldr	r3, [pc, #408]	; (8000864 <iopins_ini+0x2bc>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	4a65      	ldr	r2, [pc, #404]	; (8000864 <iopins_ini+0x2bc>)
 80006d0:	f043 0301 	orr.w	r3, r3, #1
 80006d4:	6313      	str	r3, [r2, #48]	; 0x30
 80006d6:	4b63      	ldr	r3, [pc, #396]	; (8000864 <iopins_ini+0x2bc>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	f003 0301 	and.w	r3, r3, #1
 80006de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80006e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Pin = LCD_RES;
 80006e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e6:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e8:	2301      	movs	r3, #1
 80006ea:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed =GPIO_SPEED_FREQ_VERY_HIGH;
 80006ec:	2303      	movs	r3, #3
 80006ee:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(LCD_RES_PORT, &GPIO_InitStruct);
 80006f0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80006f4:	4619      	mov	r1, r3
 80006f6:	485d      	ldr	r0, [pc, #372]	; (800086c <iopins_ini+0x2c4>)
 80006f8:	f002 f954 	bl	80029a4 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(LCD_RES_PORT,LCD_RES,GPIO_PIN_RESET);
 80006fc:	2200      	movs	r2, #0
 80006fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000702:	485a      	ldr	r0, [pc, #360]	; (800086c <iopins_ini+0x2c4>)
 8000704:	f002 faea 	bl	8002cdc <HAL_GPIO_WritePin>
	delay_ms(50);
 8000708:	2032      	movs	r0, #50	; 0x32
 800070a:	f000 f9cf 	bl	8000aac <delay_ms>
	HAL_GPIO_WritePin(LCD_RES_PORT,LCD_RES,GPIO_PIN_SET);
 800070e:	2201      	movs	r2, #1
 8000710:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000714:	4855      	ldr	r0, [pc, #340]	; (800086c <iopins_ini+0x2c4>)
 8000716:	f002 fae1 	bl	8002cdc <HAL_GPIO_WritePin>

    LCD_DCX_PORT_RCC();
 800071a:	2300      	movs	r3, #0
 800071c:	62bb      	str	r3, [r7, #40]	; 0x28
 800071e:	4b51      	ldr	r3, [pc, #324]	; (8000864 <iopins_ini+0x2bc>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4a50      	ldr	r2, [pc, #320]	; (8000864 <iopins_ini+0x2bc>)
 8000724:	f043 0308 	orr.w	r3, r3, #8
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
 800072a:	4b4e      	ldr	r3, [pc, #312]	; (8000864 <iopins_ini+0x2bc>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	f003 0308 	and.w	r3, r3, #8
 8000732:	62bb      	str	r3, [r7, #40]	; 0x28
 8000734:	6abb      	ldr	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pin = LCD_DCX;
 8000736:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800073a:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073c:	2301      	movs	r3, #1
 800073e:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed =GPIO_SPEED_FREQ_VERY_HIGH;
 8000740:	2303      	movs	r3, #3
 8000742:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(LCD_DCX_PORT, &GPIO_InitStruct);
 8000744:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000748:	4619      	mov	r1, r3
 800074a:	4847      	ldr	r0, [pc, #284]	; (8000868 <iopins_ini+0x2c0>)
 800074c:	f002 f92a 	bl	80029a4 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(LCD_DCX_PORT,LCD_DCX,GPIO_PIN_SET);
 8000750:	2201      	movs	r2, #1
 8000752:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000756:	4844      	ldr	r0, [pc, #272]	; (8000868 <iopins_ini+0x2c0>)
 8000758:	f002 fac0 	bl	8002cdc <HAL_GPIO_WritePin>

    FLASH_CS_PORT_RCC();
 800075c:	2300      	movs	r3, #0
 800075e:	627b      	str	r3, [r7, #36]	; 0x24
 8000760:	4b40      	ldr	r3, [pc, #256]	; (8000864 <iopins_ini+0x2bc>)
 8000762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000764:	4a3f      	ldr	r2, [pc, #252]	; (8000864 <iopins_ini+0x2bc>)
 8000766:	f043 0301 	orr.w	r3, r3, #1
 800076a:	6313      	str	r3, [r2, #48]	; 0x30
 800076c:	4b3d      	ldr	r3, [pc, #244]	; (8000864 <iopins_ini+0x2bc>)
 800076e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000770:	f003 0301 	and.w	r3, r3, #1
 8000774:	627b      	str	r3, [r7, #36]	; 0x24
 8000776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Pin = FLASH_CS;
 8000778:	2310      	movs	r3, #16
 800077a:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077c:	2301      	movs	r3, #1
 800077e:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed =GPIO_SPEED_FREQ_VERY_HIGH;
 8000780:	2303      	movs	r3, #3
 8000782:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(FLASH_CS_PORT, &GPIO_InitStruct);
 8000784:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000788:	4619      	mov	r1, r3
 800078a:	4838      	ldr	r0, [pc, #224]	; (800086c <iopins_ini+0x2c4>)
 800078c:	f002 f90a 	bl	80029a4 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(FLASH_CS_PORT,FLASH_CS,GPIO_PIN_SET);
 8000790:	2201      	movs	r2, #1
 8000792:	2110      	movs	r1, #16
 8000794:	4835      	ldr	r0, [pc, #212]	; (800086c <iopins_ini+0x2c4>)
 8000796:	f002 faa1 	bl	8002cdc <HAL_GPIO_WritePin>

    FLASH_WP_PORT_RCC();
 800079a:	2300      	movs	r3, #0
 800079c:	623b      	str	r3, [r7, #32]
 800079e:	4b31      	ldr	r3, [pc, #196]	; (8000864 <iopins_ini+0x2bc>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a30      	ldr	r2, [pc, #192]	; (8000864 <iopins_ini+0x2bc>)
 80007a4:	f043 0304 	orr.w	r3, r3, #4
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b2e      	ldr	r3, [pc, #184]	; (8000864 <iopins_ini+0x2bc>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0304 	and.w	r3, r3, #4
 80007b2:	623b      	str	r3, [r7, #32]
 80007b4:	6a3b      	ldr	r3, [r7, #32]
	GPIO_InitStruct.Pin = FLASH_WP;
 80007b6:	2310      	movs	r3, #16
 80007b8:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ba:	2301      	movs	r3, #1
 80007bc:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007be:	2300      	movs	r3, #0
 80007c0:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(FLASH_WP_PORT, &GPIO_InitStruct);
 80007c2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80007c6:	4619      	mov	r1, r3
 80007c8:	4829      	ldr	r0, [pc, #164]	; (8000870 <iopins_ini+0x2c8>)
 80007ca:	f002 f8eb 	bl	80029a4 <HAL_GPIO_Init>
	 HAL_GPIO_WritePin(FLASH_WP_PORT,FLASH_WP,GPIO_PIN_RESET);
 80007ce:	2200      	movs	r2, #0
 80007d0:	2110      	movs	r1, #16
 80007d2:	4827      	ldr	r0, [pc, #156]	; (8000870 <iopins_ini+0x2c8>)
 80007d4:	f002 fa82 	bl	8002cdc <HAL_GPIO_WritePin>

    FRAM_CS_PORT_RCC();
 80007d8:	2300      	movs	r3, #0
 80007da:	61fb      	str	r3, [r7, #28]
 80007dc:	4b21      	ldr	r3, [pc, #132]	; (8000864 <iopins_ini+0x2bc>)
 80007de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e0:	4a20      	ldr	r2, [pc, #128]	; (8000864 <iopins_ini+0x2bc>)
 80007e2:	f043 0302 	orr.w	r3, r3, #2
 80007e6:	6313      	str	r3, [r2, #48]	; 0x30
 80007e8:	4b1e      	ldr	r3, [pc, #120]	; (8000864 <iopins_ini+0x2bc>)
 80007ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ec:	f003 0302 	and.w	r3, r3, #2
 80007f0:	61fb      	str	r3, [r7, #28]
 80007f2:	69fb      	ldr	r3, [r7, #28]
	GPIO_InitStruct.Pin = FRAM_CS;
 80007f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007f8:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fa:	2301      	movs	r3, #1
 80007fc:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed =GPIO_SPEED_FREQ_VERY_HIGH;
 80007fe:	2303      	movs	r3, #3
 8000800:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(FRAM_CS_PORT, &GPIO_InitStruct);
 8000802:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000806:	4619      	mov	r1, r3
 8000808:	481a      	ldr	r0, [pc, #104]	; (8000874 <iopins_ini+0x2cc>)
 800080a:	f002 f8cb 	bl	80029a4 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(FRAM_CS_PORT,FRAM_CS,GPIO_PIN_SET);
 800080e:	2201      	movs	r2, #1
 8000810:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000814:	4817      	ldr	r0, [pc, #92]	; (8000874 <iopins_ini+0x2cc>)
 8000816:	f002 fa61 	bl	8002cdc <HAL_GPIO_WritePin>

    FRAM_HOLD_PORT_RCC();
 800081a:	2300      	movs	r3, #0
 800081c:	61bb      	str	r3, [r7, #24]
 800081e:	4b11      	ldr	r3, [pc, #68]	; (8000864 <iopins_ini+0x2bc>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a10      	ldr	r2, [pc, #64]	; (8000864 <iopins_ini+0x2bc>)
 8000824:	f043 0304 	orr.w	r3, r3, #4
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <iopins_ini+0x2bc>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0304 	and.w	r3, r3, #4
 8000832:	61bb      	str	r3, [r7, #24]
 8000834:	69bb      	ldr	r3, [r7, #24]
	GPIO_InitStruct.Pin = FRAM_HOLD;
 8000836:	2302      	movs	r3, #2
 8000838:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083a:	2301      	movs	r3, #1
 800083c:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed =GPIO_SPEED_FREQ_VERY_HIGH;
 800083e:	2303      	movs	r3, #3
 8000840:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(FRAM_HOLD_PORT, &GPIO_InitStruct);
 8000842:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000846:	4619      	mov	r1, r3
 8000848:	4809      	ldr	r0, [pc, #36]	; (8000870 <iopins_ini+0x2c8>)
 800084a:	f002 f8ab 	bl	80029a4 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(FRAM_HOLD_PORT,FRAM_HOLD,GPIO_PIN_SET);
 800084e:	2201      	movs	r2, #1
 8000850:	2102      	movs	r1, #2
 8000852:	4807      	ldr	r0, [pc, #28]	; (8000870 <iopins_ini+0x2c8>)
 8000854:	f002 fa42 	bl	8002cdc <HAL_GPIO_WritePin>

    FRAM_WP_PORT_RCC();
 8000858:	2300      	movs	r3, #0
 800085a:	617b      	str	r3, [r7, #20]
 800085c:	4b01      	ldr	r3, [pc, #4]	; (8000864 <iopins_ini+0x2bc>)
 800085e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000860:	e00a      	b.n	8000878 <iopins_ini+0x2d0>
 8000862:	bf00      	nop
 8000864:	40023800 	.word	0x40023800
 8000868:	40020c00 	.word	0x40020c00
 800086c:	40020000 	.word	0x40020000
 8000870:	40020800 	.word	0x40020800
 8000874:	40020400 	.word	0x40020400
 8000878:	4a4b      	ldr	r2, [pc, #300]	; (80009a8 <iopins_ini+0x400>)
 800087a:	f043 0304 	orr.w	r3, r3, #4
 800087e:	6313      	str	r3, [r2, #48]	; 0x30
 8000880:	4b49      	ldr	r3, [pc, #292]	; (80009a8 <iopins_ini+0x400>)
 8000882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000884:	f003 0304 	and.w	r3, r3, #4
 8000888:	617b      	str	r3, [r7, #20]
 800088a:	697b      	ldr	r3, [r7, #20]
	GPIO_InitStruct.Pin = FRAM_WP;
 800088c:	2301      	movs	r3, #1
 800088e:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000890:	2301      	movs	r3, #1
 8000892:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000894:	2300      	movs	r3, #0
 8000896:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(FRAM_WP_PORT, &GPIO_InitStruct);
 8000898:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800089c:	4619      	mov	r1, r3
 800089e:	4843      	ldr	r0, [pc, #268]	; (80009ac <iopins_ini+0x404>)
 80008a0:	f002 f880 	bl	80029a4 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(FRAM_WP_PORT,FRAM_WP,GPIO_PIN_SET);
 80008a4:	2201      	movs	r2, #1
 80008a6:	2101      	movs	r1, #1
 80008a8:	4840      	ldr	r0, [pc, #256]	; (80009ac <iopins_ini+0x404>)
 80008aa:	f002 fa17 	bl	8002cdc <HAL_GPIO_WritePin>


    LED_DBG_PORT_RCC();
 80008ae:	2300      	movs	r3, #0
 80008b0:	613b      	str	r3, [r7, #16]
 80008b2:	4b3d      	ldr	r3, [pc, #244]	; (80009a8 <iopins_ini+0x400>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4a3c      	ldr	r2, [pc, #240]	; (80009a8 <iopins_ini+0x400>)
 80008b8:	f043 0302 	orr.w	r3, r3, #2
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
 80008be:	4b3a      	ldr	r3, [pc, #232]	; (80009a8 <iopins_ini+0x400>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	f003 0302 	and.w	r3, r3, #2
 80008c6:	613b      	str	r3, [r7, #16]
 80008c8:	693b      	ldr	r3, [r7, #16]
	GPIO_InitStruct.Pin = LED_DBG_1;
 80008ca:	2308      	movs	r3, #8
 80008cc:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ce:	2301      	movs	r3, #1
 80008d0:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d2:	2300      	movs	r3, #0
 80008d4:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(LED_DBG_PORT, &GPIO_InitStruct);
 80008d6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80008da:	4619      	mov	r1, r3
 80008dc:	4834      	ldr	r0, [pc, #208]	; (80009b0 <iopins_ini+0x408>)
 80008de:	f002 f861 	bl	80029a4 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(LED_DBG_PORT,LED_DBG_1,GPIO_PIN_SET);
 80008e2:	2201      	movs	r2, #1
 80008e4:	2108      	movs	r1, #8
 80008e6:	4832      	ldr	r0, [pc, #200]	; (80009b0 <iopins_ini+0x408>)
 80008e8:	f002 f9f8 	bl	8002cdc <HAL_GPIO_WritePin>


    BUTTON_0_PORT_RCC();
 80008ec:	2300      	movs	r3, #0
 80008ee:	60fb      	str	r3, [r7, #12]
 80008f0:	4b2d      	ldr	r3, [pc, #180]	; (80009a8 <iopins_ini+0x400>)
 80008f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f4:	4a2c      	ldr	r2, [pc, #176]	; (80009a8 <iopins_ini+0x400>)
 80008f6:	f043 0301 	orr.w	r3, r3, #1
 80008fa:	6313      	str	r3, [r2, #48]	; 0x30
 80008fc:	4b2a      	ldr	r3, [pc, #168]	; (80009a8 <iopins_ini+0x400>)
 80008fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000900:	f003 0301 	and.w	r3, r3, #1
 8000904:	60fb      	str	r3, [r7, #12]
 8000906:	68fb      	ldr	r3, [r7, #12]
	GPIO_InitStruct.Pin = BUTTON_0;
 8000908:	f44f 7380 	mov.w	r3, #256	; 0x100
 800090c:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800090e:	2300      	movs	r3, #0
 8000910:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Pull= GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	657b      	str	r3, [r7, #84]	; 0x54
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000916:	2300      	movs	r3, #0
 8000918:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(BUTTON_0_PORT, &GPIO_InitStruct);
 800091a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800091e:	4619      	mov	r1, r3
 8000920:	4824      	ldr	r0, [pc, #144]	; (80009b4 <iopins_ini+0x40c>)
 8000922:	f002 f83f 	bl	80029a4 <HAL_GPIO_Init>

    BUTTON_1_PORT_RCC();
 8000926:	2300      	movs	r3, #0
 8000928:	60bb      	str	r3, [r7, #8]
 800092a:	4b1f      	ldr	r3, [pc, #124]	; (80009a8 <iopins_ini+0x400>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4a1e      	ldr	r2, [pc, #120]	; (80009a8 <iopins_ini+0x400>)
 8000930:	f043 0304 	orr.w	r3, r3, #4
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
 8000936:	4b1c      	ldr	r3, [pc, #112]	; (80009a8 <iopins_ini+0x400>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	f003 0304 	and.w	r3, r3, #4
 800093e:	60bb      	str	r3, [r7, #8]
 8000940:	68bb      	ldr	r3, [r7, #8]
	GPIO_InitStruct.Pin = BUTTON_1;
 8000942:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000946:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000948:	2300      	movs	r3, #0
 800094a:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Pull= GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	657b      	str	r3, [r7, #84]	; 0x54
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000950:	2300      	movs	r3, #0
 8000952:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(BUTTON_1_PORT, &GPIO_InitStruct);
 8000954:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000958:	4619      	mov	r1, r3
 800095a:	4814      	ldr	r0, [pc, #80]	; (80009ac <iopins_ini+0x404>)
 800095c:	f002 f822 	bl	80029a4 <HAL_GPIO_Init>


    TOUCH_RESET_PORT_RCC();
 8000960:	2300      	movs	r3, #0
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	4b10      	ldr	r3, [pc, #64]	; (80009a8 <iopins_ini+0x400>)
 8000966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000968:	4a0f      	ldr	r2, [pc, #60]	; (80009a8 <iopins_ini+0x400>)
 800096a:	f043 0302 	orr.w	r3, r3, #2
 800096e:	6313      	str	r3, [r2, #48]	; 0x30
 8000970:	4b0d      	ldr	r3, [pc, #52]	; (80009a8 <iopins_ini+0x400>)
 8000972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000974:	f003 0302 	and.w	r3, r3, #2
 8000978:	607b      	str	r3, [r7, #4]
 800097a:	687b      	ldr	r3, [r7, #4]
	GPIO_InitStruct.Pin = TOUCH_RESET;
 800097c:	2320      	movs	r3, #32
 800097e:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000980:	2301      	movs	r3, #1
 8000982:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000984:	2300      	movs	r3, #0
 8000986:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(TOUCH_RESET_PORT, &GPIO_InitStruct);
 8000988:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800098c:	4619      	mov	r1, r3
 800098e:	4808      	ldr	r0, [pc, #32]	; (80009b0 <iopins_ini+0x408>)
 8000990:	f002 f808 	bl	80029a4 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(TOUCH_RESET_PORT,TOUCH_RESET,GPIO_PIN_SET);
 8000994:	2201      	movs	r2, #1
 8000996:	2120      	movs	r1, #32
 8000998:	4805      	ldr	r0, [pc, #20]	; (80009b0 <iopins_ini+0x408>)
 800099a:	f002 f99f 	bl	8002cdc <HAL_GPIO_WritePin>
}
 800099e:	bf00      	nop
 80009a0:	3760      	adds	r7, #96	; 0x60
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40023800 	.word	0x40023800
 80009ac:	40020800 	.word	0x40020800
 80009b0:	40020400 	.word	0x40020400
 80009b4:	40020000 	.word	0x40020000

080009b8 <initialize_ili9488>:
//*****************************************************************************
void initialize_ili9488()
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af02      	add	r7, sp, #8
	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_RESET);
 80009be:	2200      	movs	r2, #0
 80009c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009c4:	4838      	ldr	r0, [pc, #224]	; (8000aa8 <initialize_ili9488+0xf0>)
 80009c6:	f002 f989 	bl	8002cdc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_RESET);
 80009ca:	2200      	movs	r2, #0
 80009cc:	2180      	movs	r1, #128	; 0x80
 80009ce:	4836      	ldr	r0, [pc, #216]	; (8000aa8 <initialize_ili9488+0xf0>)
 80009d0:	f002 f984 	bl	8002cdc <HAL_GPIO_WritePin>
	TFT_REG=0x0011;
 80009d4:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80009d8:	2211      	movs	r2, #17
 80009da:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_SET);
 80009dc:	2201      	movs	r2, #1
 80009de:	2180      	movs	r1, #128	; 0x80
 80009e0:	4831      	ldr	r0, [pc, #196]	; (8000aa8 <initialize_ili9488+0xf0>)
 80009e2:	f002 f97b 	bl	8002cdc <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_RESET);
 80009e6:	2200      	movs	r2, #0
 80009e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009ec:	482e      	ldr	r0, [pc, #184]	; (8000aa8 <initialize_ili9488+0xf0>)
 80009ee:	f002 f975 	bl	8002cdc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS, GPIO_PIN_RESET);
 80009f2:	2200      	movs	r2, #0
 80009f4:	2180      	movs	r1, #128	; 0x80
 80009f6:	482c      	ldr	r0, [pc, #176]	; (8000aa8 <initialize_ili9488+0xf0>)
 80009f8:	f002 f970 	bl	8002cdc <HAL_GPIO_WritePin>
	TFT_REG=0x0029;
 80009fc:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000a00:	2229      	movs	r2, #41	; 0x29
 8000a02:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS, GPIO_PIN_SET);
 8000a04:	2201      	movs	r2, #1
 8000a06:	2180      	movs	r1, #128	; 0x80
 8000a08:	4827      	ldr	r0, [pc, #156]	; (8000aa8 <initialize_ili9488+0xf0>)
 8000a0a:	f002 f967 	bl	8002cdc <HAL_GPIO_WritePin>


	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_RESET);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a14:	4824      	ldr	r0, [pc, #144]	; (8000aa8 <initialize_ili9488+0xf0>)
 8000a16:	f002 f961 	bl	8002cdc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_RESET);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2180      	movs	r1, #128	; 0x80
 8000a1e:	4822      	ldr	r0, [pc, #136]	; (8000aa8 <initialize_ili9488+0xf0>)
 8000a20:	f002 f95c 	bl	8002cdc <HAL_GPIO_WritePin>
	TFT_REG=0x003A;
 8000a24:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000a28:	223a      	movs	r2, #58	; 0x3a
 8000a2a:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_SET);
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a32:	481d      	ldr	r0, [pc, #116]	; (8000aa8 <initialize_ili9488+0xf0>)
 8000a34:	f002 f952 	bl	8002cdc <HAL_GPIO_WritePin>
	TFT_REG=0x0055;
 8000a38:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000a3c:	2255      	movs	r2, #85	; 0x55
 8000a3e:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS, GPIO_PIN_RESET);
 8000a40:	2200      	movs	r2, #0
 8000a42:	2180      	movs	r1, #128	; 0x80
 8000a44:	4818      	ldr	r0, [pc, #96]	; (8000aa8 <initialize_ili9488+0xf0>)
 8000a46:	f002 f949 	bl	8002cdc <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_RESET);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a50:	4815      	ldr	r0, [pc, #84]	; (8000aa8 <initialize_ili9488+0xf0>)
 8000a52:	f002 f943 	bl	8002cdc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_RESET);
 8000a56:	2200      	movs	r2, #0
 8000a58:	2180      	movs	r1, #128	; 0x80
 8000a5a:	4813      	ldr	r0, [pc, #76]	; (8000aa8 <initialize_ili9488+0xf0>)
 8000a5c:	f002 f93e 	bl	8002cdc <HAL_GPIO_WritePin>
	TFT_REG=0x0036;
 8000a60:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000a64:	2236      	movs	r2, #54	; 0x36
 8000a66:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_SET);
 8000a68:	2201      	movs	r2, #1
 8000a6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a6e:	480e      	ldr	r0, [pc, #56]	; (8000aa8 <initialize_ili9488+0xf0>)
 8000a70:	f002 f934 	bl	8002cdc <HAL_GPIO_WritePin>
	TFT_REG=0x00E8;
 8000a74:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000a78:	22e8      	movs	r2, #232	; 0xe8
 8000a7a:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_RESET);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	2180      	movs	r1, #128	; 0x80
 8000a80:	4809      	ldr	r0, [pc, #36]	; (8000aa8 <initialize_ili9488+0xf0>)
 8000a82:	f002 f92b 	bl	8002cdc <HAL_GPIO_WritePin>

	delay_ms(100);
 8000a86:	2064      	movs	r0, #100	; 0x64
 8000a88:	f000 f810 	bl	8000aac <delay_ms>
	ili9488_fillRect(0,0,LCD_PIXEL_WIDTH,LCD_PIXEL_HEIGHT,ORANGE);
 8000a8c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8000a90:	9300      	str	r3, [sp, #0]
 8000a92:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000a96:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	2000      	movs	r0, #0
 8000a9e:	f000 f81d 	bl	8000adc <ili9488_fillRect>
}
 8000aa2:	bf00      	nop
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	40020c00 	.word	0x40020c00

08000aac <delay_ms>:
void delay_ms(__IO uint32_t nCount1) {
 8000aac:	b480      	push	{r7}
 8000aae:	b085      	sub	sp, #20
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
	__IO uint32_t nCount=nCount1*23666;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	f645 4272 	movw	r2, #23666	; 0x5c72
 8000aba:	fb02 f303 	mul.w	r3, r2, r3
 8000abe:	60fb      	str	r3, [r7, #12]
	while(nCount--) {
 8000ac0:	bf00      	nop
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	1e5a      	subs	r2, r3, #1
 8000ac6:	60fa      	str	r2, [r7, #12]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d1fa      	bne.n	8000ac2 <delay_ms+0x16>
  }
}
 8000acc:	bf00      	nop
 8000ace:	bf00      	nop
 8000ad0:	3714      	adds	r7, #20
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
	...

08000adc <ili9488_fillRect>:
void ili9488_fillRect(uint16_t x1, uint16_t y1, uint16_t w, uint16_t h, uint16_t color)
{
 8000adc:	b590      	push	{r4, r7, lr}
 8000ade:	b085      	sub	sp, #20
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4604      	mov	r4, r0
 8000ae4:	4608      	mov	r0, r1
 8000ae6:	4611      	mov	r1, r2
 8000ae8:	461a      	mov	r2, r3
 8000aea:	4623      	mov	r3, r4
 8000aec:	80fb      	strh	r3, [r7, #6]
 8000aee:	4603      	mov	r3, r0
 8000af0:	80bb      	strh	r3, [r7, #4]
 8000af2:	460b      	mov	r3, r1
 8000af4:	807b      	strh	r3, [r7, #2]
 8000af6:	4613      	mov	r3, r2
 8000af8:	803b      	strh	r3, [r7, #0]
	uint32_t count = w * h;
 8000afa:	887b      	ldrh	r3, [r7, #2]
 8000afc:	883a      	ldrh	r2, [r7, #0]
 8000afe:	fb02 f303 	mul.w	r3, r2, r3
 8000b02:	60bb      	str	r3, [r7, #8]
	ili9488_set_coordinates(x1, y1, (uint16_t) (x1 + w - 1), (uint16_t) (y1 + h - 1));
 8000b04:	88fa      	ldrh	r2, [r7, #6]
 8000b06:	887b      	ldrh	r3, [r7, #2]
 8000b08:	4413      	add	r3, r2
 8000b0a:	b29b      	uxth	r3, r3
 8000b0c:	3b01      	subs	r3, #1
 8000b0e:	b29c      	uxth	r4, r3
 8000b10:	88ba      	ldrh	r2, [r7, #4]
 8000b12:	883b      	ldrh	r3, [r7, #0]
 8000b14:	4413      	add	r3, r2
 8000b16:	b29b      	uxth	r3, r3
 8000b18:	3b01      	subs	r3, #1
 8000b1a:	b29b      	uxth	r3, r3
 8000b1c:	88b9      	ldrh	r1, [r7, #4]
 8000b1e:	88f8      	ldrh	r0, [r7, #6]
 8000b20:	4622      	mov	r2, r4
 8000b22:	f000 f82f 	bl	8000b84 <ili9488_set_coordinates>

	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_RESET);
 8000b26:	2200      	movs	r2, #0
 8000b28:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b2c:	4814      	ldr	r0, [pc, #80]	; (8000b80 <ili9488_fillRect+0xa4>)
 8000b2e:	f002 f8d5 	bl	8002cdc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_RESET);
 8000b32:	2200      	movs	r2, #0
 8000b34:	2180      	movs	r1, #128	; 0x80
 8000b36:	4812      	ldr	r0, [pc, #72]	; (8000b80 <ili9488_fillRect+0xa4>)
 8000b38:	f002 f8d0 	bl	8002cdc <HAL_GPIO_WritePin>
	TFT_REG=0x002C;
 8000b3c:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000b40:	222c      	movs	r2, #44	; 0x2c
 8000b42:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_SET);
 8000b44:	2201      	movs	r2, #1
 8000b46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b4a:	480d      	ldr	r0, [pc, #52]	; (8000b80 <ili9488_fillRect+0xa4>)
 8000b4c:	f002 f8c6 	bl	8002cdc <HAL_GPIO_WritePin>

	for(unsigned int i=0; i<count; i++)
 8000b50:	2300      	movs	r3, #0
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	e006      	b.n	8000b64 <ili9488_fillRect+0x88>
	{
		TFT_REG=color;
 8000b56:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000b5a:	8c3b      	ldrh	r3, [r7, #32]
 8000b5c:	8013      	strh	r3, [r2, #0]
	for(unsigned int i=0; i<count; i++)
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	3301      	adds	r3, #1
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	68fa      	ldr	r2, [r7, #12]
 8000b66:	68bb      	ldr	r3, [r7, #8]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d3f4      	bcc.n	8000b56 <ili9488_fillRect+0x7a>
	}
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_SET);
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	2180      	movs	r1, #128	; 0x80
 8000b70:	4803      	ldr	r0, [pc, #12]	; (8000b80 <ili9488_fillRect+0xa4>)
 8000b72:	f002 f8b3 	bl	8002cdc <HAL_GPIO_WritePin>
}
 8000b76:	bf00      	nop
 8000b78:	3714      	adds	r7, #20
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd90      	pop	{r4, r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40020c00 	.word	0x40020c00

08000b84 <ili9488_set_coordinates>:
void ili9488_set_coordinates(uint16_t x1,uint16_t y1, uint16_t x2, uint16_t y2)
{
 8000b84:	b590      	push	{r4, r7, lr}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4604      	mov	r4, r0
 8000b8c:	4608      	mov	r0, r1
 8000b8e:	4611      	mov	r1, r2
 8000b90:	461a      	mov	r2, r3
 8000b92:	4623      	mov	r3, r4
 8000b94:	80fb      	strh	r3, [r7, #6]
 8000b96:	4603      	mov	r3, r0
 8000b98:	80bb      	strh	r3, [r7, #4]
 8000b9a:	460b      	mov	r3, r1
 8000b9c:	807b      	strh	r3, [r7, #2]
 8000b9e:	4613      	mov	r3, r2
 8000ba0:	803b      	strh	r3, [r7, #0]
	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_RESET);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ba8:	4832      	ldr	r0, [pc, #200]	; (8000c74 <ili9488_set_coordinates+0xf0>)
 8000baa:	f002 f897 	bl	8002cdc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_RESET);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2180      	movs	r1, #128	; 0x80
 8000bb2:	4830      	ldr	r0, [pc, #192]	; (8000c74 <ili9488_set_coordinates+0xf0>)
 8000bb4:	f002 f892 	bl	8002cdc <HAL_GPIO_WritePin>
	TFT_REG=0x002A;
 8000bb8:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000bbc:	222a      	movs	r2, #42	; 0x2a
 8000bbe:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_SET);
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bc6:	482b      	ldr	r0, [pc, #172]	; (8000c74 <ili9488_set_coordinates+0xf0>)
 8000bc8:	f002 f888 	bl	8002cdc <HAL_GPIO_WritePin>
	TFT_REG=x1>>8;
 8000bcc:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000bd0:	88fb      	ldrh	r3, [r7, #6]
 8000bd2:	0a1b      	lsrs	r3, r3, #8
 8000bd4:	b29b      	uxth	r3, r3
 8000bd6:	8013      	strh	r3, [r2, #0]
	TFT_REG=x1&0xFF;
 8000bd8:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000bdc:	88fa      	ldrh	r2, [r7, #6]
 8000bde:	b2d2      	uxtb	r2, r2
 8000be0:	b292      	uxth	r2, r2
 8000be2:	801a      	strh	r2, [r3, #0]
	TFT_REG=x2>>8;
 8000be4:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000be8:	887b      	ldrh	r3, [r7, #2]
 8000bea:	0a1b      	lsrs	r3, r3, #8
 8000bec:	b29b      	uxth	r3, r3
 8000bee:	8013      	strh	r3, [r2, #0]
	TFT_REG=x2&0xFF;
 8000bf0:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000bf4:	887a      	ldrh	r2, [r7, #2]
 8000bf6:	b2d2      	uxtb	r2, r2
 8000bf8:	b292      	uxth	r2, r2
 8000bfa:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_SET);
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	2180      	movs	r1, #128	; 0x80
 8000c00:	481c      	ldr	r0, [pc, #112]	; (8000c74 <ili9488_set_coordinates+0xf0>)
 8000c02:	f002 f86b 	bl	8002cdc <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_RESET);
 8000c06:	2200      	movs	r2, #0
 8000c08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c0c:	4819      	ldr	r0, [pc, #100]	; (8000c74 <ili9488_set_coordinates+0xf0>)
 8000c0e:	f002 f865 	bl	8002cdc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_RESET);
 8000c12:	2200      	movs	r2, #0
 8000c14:	2180      	movs	r1, #128	; 0x80
 8000c16:	4817      	ldr	r0, [pc, #92]	; (8000c74 <ili9488_set_coordinates+0xf0>)
 8000c18:	f002 f860 	bl	8002cdc <HAL_GPIO_WritePin>
	TFT_REG=0x002B;
 8000c1c:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000c20:	222b      	movs	r2, #43	; 0x2b
 8000c22:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_SET);
 8000c24:	2201      	movs	r2, #1
 8000c26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c2a:	4812      	ldr	r0, [pc, #72]	; (8000c74 <ili9488_set_coordinates+0xf0>)
 8000c2c:	f002 f856 	bl	8002cdc <HAL_GPIO_WritePin>
	TFT_REG=y1>>8;
 8000c30:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000c34:	88bb      	ldrh	r3, [r7, #4]
 8000c36:	0a1b      	lsrs	r3, r3, #8
 8000c38:	b29b      	uxth	r3, r3
 8000c3a:	8013      	strh	r3, [r2, #0]
	TFT_REG=y1&0xFF;
 8000c3c:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000c40:	88ba      	ldrh	r2, [r7, #4]
 8000c42:	b2d2      	uxtb	r2, r2
 8000c44:	b292      	uxth	r2, r2
 8000c46:	801a      	strh	r2, [r3, #0]
	TFT_REG=y2>>8;
 8000c48:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000c4c:	883b      	ldrh	r3, [r7, #0]
 8000c4e:	0a1b      	lsrs	r3, r3, #8
 8000c50:	b29b      	uxth	r3, r3
 8000c52:	8013      	strh	r3, [r2, #0]
	TFT_REG=y2&0xFF;
 8000c54:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000c58:	883a      	ldrh	r2, [r7, #0]
 8000c5a:	b2d2      	uxtb	r2, r2
 8000c5c:	b292      	uxth	r2, r2
 8000c5e:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_SET);
 8000c60:	2201      	movs	r2, #1
 8000c62:	2180      	movs	r1, #128	; 0x80
 8000c64:	4803      	ldr	r0, [pc, #12]	; (8000c74 <ili9488_set_coordinates+0xf0>)
 8000c66:	f002 f839 	bl	8002cdc <HAL_GPIO_WritePin>
}
 8000c6a:	bf00      	nop
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd90      	pop	{r4, r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40020c00 	.word	0x40020c00

08000c78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c7e:	f001 f96d 	bl	8001f5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c82:	f000 f83d 	bl	8000d00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c86:	f000 f9cb 	bl	8001020 <MX_GPIO_Init>
  MX_FSMC_Init();
 8000c8a:	f000 fa67 	bl	800115c <MX_FSMC_Init>
  MX_USART1_UART_Init();
 8000c8e:	f000 f93b 	bl	8000f08 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000c92:	f000 f89f 	bl	8000dd4 <MX_I2C1_Init>
  MX_DMA_Init();
 8000c96:	f000 f99b 	bl	8000fd0 <MX_DMA_Init>
  MX_SPI3_Init();
 8000c9a:	f000 f8ff 	bl	8000e9c <MX_SPI3_Init>
  MX_SPI1_Init();
 8000c9e:	f000 f8c7 	bl	8000e30 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000ca2:	f000 f963 	bl	8000f6c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  MX_I2C1_Init();
 8000ca6:	f000 f895 	bl	8000dd4 <MX_I2C1_Init>
  MX_DMA_Init();
 8000caa:	f000 f991 	bl	8000fd0 <MX_DMA_Init>
  MX_SPI3_Init();
 8000cae:	f000 f8f5 	bl	8000e9c <MX_SPI3_Init>
  MX_SPI1_Init();
 8000cb2:	f000 f8bd 	bl	8000e30 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  //enable uart interrupt
  Init_LCD();
 8000cb6:	f7ff fc65 	bl	8000584 <Init_LCD>
  static int blOn = 0;
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("Entering main loop\n\r");
 8000cba:	480f      	ldr	r0, [pc, #60]	; (8000cf8 <main+0x80>)
 8000cbc:	f003 ffb2 	bl	8004c24 <iprintf>
  int loopNumber = 0;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	60fb      	str	r3, [r7, #12]

  while (1)
  {
	int secSleep = 1;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	60bb      	str	r3, [r7, #8]
	int msecSleep = 500;
 8000cc8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000ccc:	607b      	str	r3, [r7, #4]
	printf("Sleeping %d.%d secs. LN %d\r\n", secSleep, msecSleep, loopNumber++);
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	1c5a      	adds	r2, r3, #1
 8000cd2:	60fa      	str	r2, [r7, #12]
 8000cd4:	687a      	ldr	r2, [r7, #4]
 8000cd6:	68b9      	ldr	r1, [r7, #8]
 8000cd8:	4808      	ldr	r0, [pc, #32]	; (8000cfc <main+0x84>)
 8000cda:	f003 ffa3 	bl	8004c24 <iprintf>
	HAL_Delay(1000*secSleep + msecSleep);
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ce4:	fb03 f202 	mul.w	r2, r3, r2
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	4413      	add	r3, r2
 8000cec:	4618      	mov	r0, r3
 8000cee:	f001 f9a7 	bl	8002040 <HAL_Delay>

	uartDemoLoop();
 8000cf2:	f001 f8a3 	bl	8001e3c <uartDemoLoop>
  {
 8000cf6:	e7e5      	b.n	8000cc4 <main+0x4c>
 8000cf8:	08005ffc 	.word	0x08005ffc
 8000cfc:	08006014 	.word	0x08006014

08000d00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b094      	sub	sp, #80	; 0x50
 8000d04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d06:	f107 0320 	add.w	r3, r7, #32
 8000d0a:	2230      	movs	r2, #48	; 0x30
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f003 ff80 	bl	8004c14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d14:	f107 030c 	add.w	r3, r7, #12
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
 8000d1e:	609a      	str	r2, [r3, #8]
 8000d20:	60da      	str	r2, [r3, #12]
 8000d22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d24:	2300      	movs	r3, #0
 8000d26:	60bb      	str	r3, [r7, #8]
 8000d28:	4b28      	ldr	r3, [pc, #160]	; (8000dcc <SystemClock_Config+0xcc>)
 8000d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2c:	4a27      	ldr	r2, [pc, #156]	; (8000dcc <SystemClock_Config+0xcc>)
 8000d2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d32:	6413      	str	r3, [r2, #64]	; 0x40
 8000d34:	4b25      	ldr	r3, [pc, #148]	; (8000dcc <SystemClock_Config+0xcc>)
 8000d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d3c:	60bb      	str	r3, [r7, #8]
 8000d3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d40:	2300      	movs	r3, #0
 8000d42:	607b      	str	r3, [r7, #4]
 8000d44:	4b22      	ldr	r3, [pc, #136]	; (8000dd0 <SystemClock_Config+0xd0>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a21      	ldr	r2, [pc, #132]	; (8000dd0 <SystemClock_Config+0xd0>)
 8000d4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d4e:	6013      	str	r3, [r2, #0]
 8000d50:	4b1f      	ldr	r3, [pc, #124]	; (8000dd0 <SystemClock_Config+0xd0>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d58:	607b      	str	r3, [r7, #4]
 8000d5a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d64:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d66:	2302      	movs	r3, #2
 8000d68:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d6a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000d70:	2319      	movs	r3, #25
 8000d72:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000d74:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000d78:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d7e:	2304      	movs	r3, #4
 8000d80:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d82:	f107 0320 	add.w	r3, r7, #32
 8000d86:	4618      	mov	r0, r3
 8000d88:	f002 f906 	bl	8002f98 <HAL_RCC_OscConfig>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000d92:	f000 fa5d 	bl	8001250 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d96:	230f      	movs	r3, #15
 8000d98:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000da2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000da6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000da8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000dae:	f107 030c 	add.w	r3, r7, #12
 8000db2:	2105      	movs	r1, #5
 8000db4:	4618      	mov	r0, r3
 8000db6:	f002 fb67 	bl	8003488 <HAL_RCC_ClockConfig>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000dc0:	f000 fa46 	bl	8001250 <Error_Handler>
  }
}
 8000dc4:	bf00      	nop
 8000dc6:	3750      	adds	r7, #80	; 0x50
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	40023800 	.word	0x40023800
 8000dd0:	40007000 	.word	0x40007000

08000dd4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000dd8:	4b12      	ldr	r3, [pc, #72]	; (8000e24 <MX_I2C1_Init+0x50>)
 8000dda:	4a13      	ldr	r2, [pc, #76]	; (8000e28 <MX_I2C1_Init+0x54>)
 8000ddc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000dde:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <MX_I2C1_Init+0x50>)
 8000de0:	4a12      	ldr	r2, [pc, #72]	; (8000e2c <MX_I2C1_Init+0x58>)
 8000de2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000de4:	4b0f      	ldr	r3, [pc, #60]	; (8000e24 <MX_I2C1_Init+0x50>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000dea:	4b0e      	ldr	r3, [pc, #56]	; (8000e24 <MX_I2C1_Init+0x50>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000df0:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <MX_I2C1_Init+0x50>)
 8000df2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000df6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000df8:	4b0a      	ldr	r3, [pc, #40]	; (8000e24 <MX_I2C1_Init+0x50>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000dfe:	4b09      	ldr	r3, [pc, #36]	; (8000e24 <MX_I2C1_Init+0x50>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e04:	4b07      	ldr	r3, [pc, #28]	; (8000e24 <MX_I2C1_Init+0x50>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e0a:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <MX_I2C1_Init+0x50>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e10:	4804      	ldr	r0, [pc, #16]	; (8000e24 <MX_I2C1_Init+0x50>)
 8000e12:	f001 ff7d 	bl	8002d10 <HAL_I2C_Init>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e1c:	f000 fa18 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e20:	bf00      	nop
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	20000094 	.word	0x20000094
 8000e28:	40005400 	.word	0x40005400
 8000e2c:	000186a0 	.word	0x000186a0

08000e30 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e34:	4b17      	ldr	r3, [pc, #92]	; (8000e94 <MX_SPI1_Init+0x64>)
 8000e36:	4a18      	ldr	r2, [pc, #96]	; (8000e98 <MX_SPI1_Init+0x68>)
 8000e38:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e3a:	4b16      	ldr	r3, [pc, #88]	; (8000e94 <MX_SPI1_Init+0x64>)
 8000e3c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e40:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e42:	4b14      	ldr	r3, [pc, #80]	; (8000e94 <MX_SPI1_Init+0x64>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e48:	4b12      	ldr	r3, [pc, #72]	; (8000e94 <MX_SPI1_Init+0x64>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e4e:	4b11      	ldr	r3, [pc, #68]	; (8000e94 <MX_SPI1_Init+0x64>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e54:	4b0f      	ldr	r3, [pc, #60]	; (8000e94 <MX_SPI1_Init+0x64>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000e5a:	4b0e      	ldr	r3, [pc, #56]	; (8000e94 <MX_SPI1_Init+0x64>)
 8000e5c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000e60:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e62:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <MX_SPI1_Init+0x64>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e68:	4b0a      	ldr	r3, [pc, #40]	; (8000e94 <MX_SPI1_Init+0x64>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e6e:	4b09      	ldr	r3, [pc, #36]	; (8000e94 <MX_SPI1_Init+0x64>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e74:	4b07      	ldr	r3, [pc, #28]	; (8000e94 <MX_SPI1_Init+0x64>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000e7a:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <MX_SPI1_Init+0x64>)
 8000e7c:	220a      	movs	r2, #10
 8000e7e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e80:	4804      	ldr	r0, [pc, #16]	; (8000e94 <MX_SPI1_Init+0x64>)
 8000e82:	f002 fce1 	bl	8003848 <HAL_SPI_Init>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000e8c:	f000 f9e0 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e90:	bf00      	nop
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	200000e8 	.word	0x200000e8
 8000e98:	40013000 	.word	0x40013000

08000e9c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000ea0:	4b17      	ldr	r3, [pc, #92]	; (8000f00 <MX_SPI3_Init+0x64>)
 8000ea2:	4a18      	ldr	r2, [pc, #96]	; (8000f04 <MX_SPI3_Init+0x68>)
 8000ea4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000ea6:	4b16      	ldr	r3, [pc, #88]	; (8000f00 <MX_SPI3_Init+0x64>)
 8000ea8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000eac:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000eae:	4b14      	ldr	r3, [pc, #80]	; (8000f00 <MX_SPI3_Init+0x64>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000eb4:	4b12      	ldr	r3, [pc, #72]	; (8000f00 <MX_SPI3_Init+0x64>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000eba:	4b11      	ldr	r3, [pc, #68]	; (8000f00 <MX_SPI3_Init+0x64>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ec0:	4b0f      	ldr	r3, [pc, #60]	; (8000f00 <MX_SPI3_Init+0x64>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000ec6:	4b0e      	ldr	r3, [pc, #56]	; (8000f00 <MX_SPI3_Init+0x64>)
 8000ec8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ecc:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ece:	4b0c      	ldr	r3, [pc, #48]	; (8000f00 <MX_SPI3_Init+0x64>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ed4:	4b0a      	ldr	r3, [pc, #40]	; (8000f00 <MX_SPI3_Init+0x64>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000eda:	4b09      	ldr	r3, [pc, #36]	; (8000f00 <MX_SPI3_Init+0x64>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ee0:	4b07      	ldr	r3, [pc, #28]	; (8000f00 <MX_SPI3_Init+0x64>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000ee6:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <MX_SPI3_Init+0x64>)
 8000ee8:	220a      	movs	r2, #10
 8000eea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000eec:	4804      	ldr	r0, [pc, #16]	; (8000f00 <MX_SPI3_Init+0x64>)
 8000eee:	f002 fcab 	bl	8003848 <HAL_SPI_Init>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000ef8:	f000 f9aa 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000efc:	bf00      	nop
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	20000140 	.word	0x20000140
 8000f04:	40003c00 	.word	0x40003c00

08000f08 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f0c:	4b15      	ldr	r3, [pc, #84]	; (8000f64 <MX_USART1_UART_Init+0x5c>)
 8000f0e:	4a16      	ldr	r2, [pc, #88]	; (8000f68 <MX_USART1_UART_Init+0x60>)
 8000f10:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f12:	4b14      	ldr	r3, [pc, #80]	; (8000f64 <MX_USART1_UART_Init+0x5c>)
 8000f14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f18:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f1a:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <MX_USART1_UART_Init+0x5c>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f20:	4b10      	ldr	r3, [pc, #64]	; (8000f64 <MX_USART1_UART_Init+0x5c>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f26:	4b0f      	ldr	r3, [pc, #60]	; (8000f64 <MX_USART1_UART_Init+0x5c>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f2c:	4b0d      	ldr	r3, [pc, #52]	; (8000f64 <MX_USART1_UART_Init+0x5c>)
 8000f2e:	220c      	movs	r2, #12
 8000f30:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f32:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <MX_USART1_UART_Init+0x5c>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f38:	4b0a      	ldr	r3, [pc, #40]	; (8000f64 <MX_USART1_UART_Init+0x5c>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f3e:	4809      	ldr	r0, [pc, #36]	; (8000f64 <MX_USART1_UART_Init+0x5c>)
 8000f40:	f002 fd53 	bl	80039ea <HAL_UART_Init>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000f4a:	f000 f981 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE); //turn on rx interrupt forever
 8000f4e:	4b05      	ldr	r3, [pc, #20]	; (8000f64 <MX_USART1_UART_Init+0x5c>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	68da      	ldr	r2, [r3, #12]
 8000f54:	4b03      	ldr	r3, [pc, #12]	; (8000f64 <MX_USART1_UART_Init+0x5c>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f042 0220 	orr.w	r2, r2, #32
 8000f5c:	60da      	str	r2, [r3, #12]
  //tx interrupt is enabled in send_usart_message() insead.
  //__HAL_UART_ENABLE_IT(&huart1, UART_IT_TXE); //turn on tx interrupt forever
  /* USER CODE END USART1_Init 2 */

}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20000258 	.word	0x20000258
 8000f68:	40011000 	.word	0x40011000

08000f6c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f70:	4b15      	ldr	r3, [pc, #84]	; (8000fc8 <MX_USART2_UART_Init+0x5c>)
 8000f72:	4a16      	ldr	r2, [pc, #88]	; (8000fcc <MX_USART2_UART_Init+0x60>)
 8000f74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f76:	4b14      	ldr	r3, [pc, #80]	; (8000fc8 <MX_USART2_UART_Init+0x5c>)
 8000f78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f7e:	4b12      	ldr	r3, [pc, #72]	; (8000fc8 <MX_USART2_UART_Init+0x5c>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f84:	4b10      	ldr	r3, [pc, #64]	; (8000fc8 <MX_USART2_UART_Init+0x5c>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f8a:	4b0f      	ldr	r3, [pc, #60]	; (8000fc8 <MX_USART2_UART_Init+0x5c>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f90:	4b0d      	ldr	r3, [pc, #52]	; (8000fc8 <MX_USART2_UART_Init+0x5c>)
 8000f92:	220c      	movs	r2, #12
 8000f94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f96:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <MX_USART2_UART_Init+0x5c>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f9c:	4b0a      	ldr	r3, [pc, #40]	; (8000fc8 <MX_USART2_UART_Init+0x5c>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fa2:	4809      	ldr	r0, [pc, #36]	; (8000fc8 <MX_USART2_UART_Init+0x5c>)
 8000fa4:	f002 fd21 	bl	80039ea <HAL_UART_Init>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000fae:	f000 f94f 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE); //turn on rx interrupt forever
 8000fb2:	4b05      	ldr	r3, [pc, #20]	; (8000fc8 <MX_USART2_UART_Init+0x5c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	68da      	ldr	r2, [r3, #12]
 8000fb8:	4b03      	ldr	r3, [pc, #12]	; (8000fc8 <MX_USART2_UART_Init+0x5c>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f042 0220 	orr.w	r2, r2, #32
 8000fc0:	60da      	str	r2, [r3, #12]
  //tx interrupt is enabled in send_usart_message() insead.
  //__HAL_UART_ENABLE_IT(&huart2, UART_IT_TXE); //turn on tx interrupt forever
  /* USER CODE END USART2_Init 2 */

}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	2000029c 	.word	0x2000029c
 8000fcc:	40004400 	.word	0x40004400

08000fd0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	607b      	str	r3, [r7, #4]
 8000fda:	4b10      	ldr	r3, [pc, #64]	; (800101c <MX_DMA_Init+0x4c>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	4a0f      	ldr	r2, [pc, #60]	; (800101c <MX_DMA_Init+0x4c>)
 8000fe0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe6:	4b0d      	ldr	r3, [pc, #52]	; (800101c <MX_DMA_Init+0x4c>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fee:	607b      	str	r3, [r7, #4]
 8000ff0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	2038      	movs	r0, #56	; 0x38
 8000ff8:	f001 f921 	bl	800223e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000ffc:	2038      	movs	r0, #56	; 0x38
 8000ffe:	f001 f93a 	bl	8002276 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001002:	2200      	movs	r2, #0
 8001004:	2100      	movs	r1, #0
 8001006:	203b      	movs	r0, #59	; 0x3b
 8001008:	f001 f919 	bl	800223e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800100c:	203b      	movs	r0, #59	; 0x3b
 800100e:	f001 f932 	bl	8002276 <HAL_NVIC_EnableIRQ>

}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40023800 	.word	0x40023800

08001020 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b08c      	sub	sp, #48	; 0x30
 8001024:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001026:	f107 031c 	add.w	r3, r7, #28
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	605a      	str	r2, [r3, #4]
 8001030:	609a      	str	r2, [r3, #8]
 8001032:	60da      	str	r2, [r3, #12]
 8001034:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	61bb      	str	r3, [r7, #24]
 800103a:	4b45      	ldr	r3, [pc, #276]	; (8001150 <MX_GPIO_Init+0x130>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	4a44      	ldr	r2, [pc, #272]	; (8001150 <MX_GPIO_Init+0x130>)
 8001040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001044:	6313      	str	r3, [r2, #48]	; 0x30
 8001046:	4b42      	ldr	r3, [pc, #264]	; (8001150 <MX_GPIO_Init+0x130>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800104e:	61bb      	str	r3, [r7, #24]
 8001050:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	617b      	str	r3, [r7, #20]
 8001056:	4b3e      	ldr	r3, [pc, #248]	; (8001150 <MX_GPIO_Init+0x130>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	4a3d      	ldr	r2, [pc, #244]	; (8001150 <MX_GPIO_Init+0x130>)
 800105c:	f043 0301 	orr.w	r3, r3, #1
 8001060:	6313      	str	r3, [r2, #48]	; 0x30
 8001062:	4b3b      	ldr	r3, [pc, #236]	; (8001150 <MX_GPIO_Init+0x130>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	f003 0301 	and.w	r3, r3, #1
 800106a:	617b      	str	r3, [r7, #20]
 800106c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	613b      	str	r3, [r7, #16]
 8001072:	4b37      	ldr	r3, [pc, #220]	; (8001150 <MX_GPIO_Init+0x130>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	4a36      	ldr	r2, [pc, #216]	; (8001150 <MX_GPIO_Init+0x130>)
 8001078:	f043 0310 	orr.w	r3, r3, #16
 800107c:	6313      	str	r3, [r2, #48]	; 0x30
 800107e:	4b34      	ldr	r3, [pc, #208]	; (8001150 <MX_GPIO_Init+0x130>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	f003 0310 	and.w	r3, r3, #16
 8001086:	613b      	str	r3, [r7, #16]
 8001088:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	4b30      	ldr	r3, [pc, #192]	; (8001150 <MX_GPIO_Init+0x130>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	4a2f      	ldr	r2, [pc, #188]	; (8001150 <MX_GPIO_Init+0x130>)
 8001094:	f043 0308 	orr.w	r3, r3, #8
 8001098:	6313      	str	r3, [r2, #48]	; 0x30
 800109a:	4b2d      	ldr	r3, [pc, #180]	; (8001150 <MX_GPIO_Init+0x130>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	f003 0308 	and.w	r3, r3, #8
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	60bb      	str	r3, [r7, #8]
 80010aa:	4b29      	ldr	r3, [pc, #164]	; (8001150 <MX_GPIO_Init+0x130>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	4a28      	ldr	r2, [pc, #160]	; (8001150 <MX_GPIO_Init+0x130>)
 80010b0:	f043 0304 	orr.w	r3, r3, #4
 80010b4:	6313      	str	r3, [r2, #48]	; 0x30
 80010b6:	4b26      	ldr	r3, [pc, #152]	; (8001150 <MX_GPIO_Init+0x130>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	f003 0304 	and.w	r3, r3, #4
 80010be:	60bb      	str	r3, [r7, #8]
 80010c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	607b      	str	r3, [r7, #4]
 80010c6:	4b22      	ldr	r3, [pc, #136]	; (8001150 <MX_GPIO_Init+0x130>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	4a21      	ldr	r2, [pc, #132]	; (8001150 <MX_GPIO_Init+0x130>)
 80010cc:	f043 0302 	orr.w	r3, r3, #2
 80010d0:	6313      	str	r3, [r2, #48]	; 0x30
 80010d2:	4b1f      	ldr	r3, [pc, #124]	; (8001150 <MX_GPIO_Init+0x130>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	f003 0302 	and.w	r3, r3, #2
 80010da:	607b      	str	r3, [r7, #4]
 80010dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RES_GPIO_Port, LCD_RES_Pin, GPIO_PIN_RESET);
 80010de:	2200      	movs	r2, #0
 80010e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010e4:	481b      	ldr	r0, [pc, #108]	; (8001154 <MX_GPIO_Init+0x134>)
 80010e6:	f001 fdf9 	bl	8002cdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80010ea:	2200      	movs	r2, #0
 80010ec:	2108      	movs	r1, #8
 80010ee:	481a      	ldr	r0, [pc, #104]	; (8001158 <MX_GPIO_Init+0x138>)
 80010f0:	f001 fdf4 	bl	8002cdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80010f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80010f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010fa:	2300      	movs	r3, #0
 80010fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001102:	f107 031c 	add.w	r3, r7, #28
 8001106:	4619      	mov	r1, r3
 8001108:	4812      	ldr	r0, [pc, #72]	; (8001154 <MX_GPIO_Init+0x134>)
 800110a:	f001 fc4b 	bl	80029a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RES_Pin */
  GPIO_InitStruct.Pin = LCD_RES_Pin;
 800110e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001112:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001114:	2301      	movs	r3, #1
 8001116:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001118:	2301      	movs	r3, #1
 800111a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800111c:	2303      	movs	r3, #3
 800111e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_RES_GPIO_Port, &GPIO_InitStruct);
 8001120:	f107 031c 	add.w	r3, r7, #28
 8001124:	4619      	mov	r1, r3
 8001126:	480b      	ldr	r0, [pc, #44]	; (8001154 <MX_GPIO_Init+0x134>)
 8001128:	f001 fc3c 	bl	80029a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800112c:	2308      	movs	r3, #8
 800112e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001130:	2301      	movs	r3, #1
 8001132:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001138:	2300      	movs	r3, #0
 800113a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800113c:	f107 031c 	add.w	r3, r7, #28
 8001140:	4619      	mov	r1, r3
 8001142:	4805      	ldr	r0, [pc, #20]	; (8001158 <MX_GPIO_Init+0x138>)
 8001144:	f001 fc2e 	bl	80029a4 <HAL_GPIO_Init>

}
 8001148:	bf00      	nop
 800114a:	3730      	adds	r7, #48	; 0x30
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40023800 	.word	0x40023800
 8001154:	40020000 	.word	0x40020000
 8001158:	40020400 	.word	0x40020400

0800115c <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b08e      	sub	sp, #56	; 0x38
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001162:	f107 031c 	add.w	r3, r7, #28
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	609a      	str	r2, [r3, #8]
 800116e:	60da      	str	r2, [r3, #12]
 8001170:	611a      	str	r2, [r3, #16]
 8001172:	615a      	str	r2, [r3, #20]
 8001174:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8001176:	463b      	mov	r3, r7
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
 8001182:	611a      	str	r2, [r3, #16]
 8001184:	615a      	str	r2, [r3, #20]
 8001186:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001188:	4b2f      	ldr	r3, [pc, #188]	; (8001248 <MX_FSMC_Init+0xec>)
 800118a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800118e:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001190:	4b2d      	ldr	r3, [pc, #180]	; (8001248 <MX_FSMC_Init+0xec>)
 8001192:	4a2e      	ldr	r2, [pc, #184]	; (800124c <MX_FSMC_Init+0xf0>)
 8001194:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001196:	4b2c      	ldr	r3, [pc, #176]	; (8001248 <MX_FSMC_Init+0xec>)
 8001198:	2200      	movs	r2, #0
 800119a:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 800119c:	4b2a      	ldr	r3, [pc, #168]	; (8001248 <MX_FSMC_Init+0xec>)
 800119e:	2200      	movs	r2, #0
 80011a0:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80011a2:	4b29      	ldr	r3, [pc, #164]	; (8001248 <MX_FSMC_Init+0xec>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80011a8:	4b27      	ldr	r3, [pc, #156]	; (8001248 <MX_FSMC_Init+0xec>)
 80011aa:	2210      	movs	r2, #16
 80011ac:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80011ae:	4b26      	ldr	r3, [pc, #152]	; (8001248 <MX_FSMC_Init+0xec>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80011b4:	4b24      	ldr	r3, [pc, #144]	; (8001248 <MX_FSMC_Init+0xec>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80011ba:	4b23      	ldr	r3, [pc, #140]	; (8001248 <MX_FSMC_Init+0xec>)
 80011bc:	2200      	movs	r2, #0
 80011be:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80011c0:	4b21      	ldr	r3, [pc, #132]	; (8001248 <MX_FSMC_Init+0xec>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80011c6:	4b20      	ldr	r3, [pc, #128]	; (8001248 <MX_FSMC_Init+0xec>)
 80011c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011cc:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80011ce:	4b1e      	ldr	r3, [pc, #120]	; (8001248 <MX_FSMC_Init+0xec>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80011d4:	4b1c      	ldr	r3, [pc, #112]	; (8001248 <MX_FSMC_Init+0xec>)
 80011d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011da:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80011dc:	4b1a      	ldr	r3, [pc, #104]	; (8001248 <MX_FSMC_Init+0xec>)
 80011de:	2200      	movs	r2, #0
 80011e0:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80011e2:	4b19      	ldr	r3, [pc, #100]	; (8001248 <MX_FSMC_Init+0xec>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80011e8:	4b17      	ldr	r3, [pc, #92]	; (8001248 <MX_FSMC_Init+0xec>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 2;
 80011ee:	2302      	movs	r3, #2
 80011f0:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80011f2:	230f      	movs	r3, #15
 80011f4:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 4;
 80011f6:	2304      	movs	r3, #4
 80011f8:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 80011fa:	2300      	movs	r3, #0
 80011fc:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 80011fe:	2310      	movs	r3, #16
 8001200:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8001202:	2311      	movs	r3, #17
 8001204:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001206:	2300      	movs	r3, #0
 8001208:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 15;
 800120a:	230f      	movs	r3, #15
 800120c:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 800120e:	230f      	movs	r3, #15
 8001210:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 40;
 8001212:	2328      	movs	r3, #40	; 0x28
 8001214:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8001216:	2300      	movs	r3, #0
 8001218:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 800121a:	2310      	movs	r3, #16
 800121c:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 800121e:	2311      	movs	r3, #17
 8001220:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8001222:	2300      	movs	r3, #0
 8001224:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8001226:	463a      	mov	r2, r7
 8001228:	f107 031c 	add.w	r3, r7, #28
 800122c:	4619      	mov	r1, r3
 800122e:	4806      	ldr	r0, [pc, #24]	; (8001248 <MX_FSMC_Init+0xec>)
 8001230:	f002 fb93 	bl	800395a <HAL_SRAM_Init>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 800123a:	f000 f809 	bl	8001250 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800123e:	bf00      	nop
 8001240:	3738      	adds	r7, #56	; 0x38
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	200002e0 	.word	0x200002e0
 800124c:	a0000104 	.word	0xa0000104

08001250 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001254:	b672      	cpsid	i
}
 8001256:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001258:	e7fe      	b.n	8001258 <Error_Handler+0x8>
	...

0800125c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	607b      	str	r3, [r7, #4]
 8001266:	4b10      	ldr	r3, [pc, #64]	; (80012a8 <HAL_MspInit+0x4c>)
 8001268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126a:	4a0f      	ldr	r2, [pc, #60]	; (80012a8 <HAL_MspInit+0x4c>)
 800126c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001270:	6453      	str	r3, [r2, #68]	; 0x44
 8001272:	4b0d      	ldr	r3, [pc, #52]	; (80012a8 <HAL_MspInit+0x4c>)
 8001274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001276:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800127a:	607b      	str	r3, [r7, #4]
 800127c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	603b      	str	r3, [r7, #0]
 8001282:	4b09      	ldr	r3, [pc, #36]	; (80012a8 <HAL_MspInit+0x4c>)
 8001284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001286:	4a08      	ldr	r2, [pc, #32]	; (80012a8 <HAL_MspInit+0x4c>)
 8001288:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800128c:	6413      	str	r3, [r2, #64]	; 0x40
 800128e:	4b06      	ldr	r3, [pc, #24]	; (80012a8 <HAL_MspInit+0x4c>)
 8001290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001296:	603b      	str	r3, [r7, #0]
 8001298:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800129a:	bf00      	nop
 800129c:	370c      	adds	r7, #12
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	40023800 	.word	0x40023800

080012ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b08a      	sub	sp, #40	; 0x28
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b4:	f107 0314 	add.w	r3, r7, #20
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]
 80012c0:	60da      	str	r2, [r3, #12]
 80012c2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a19      	ldr	r2, [pc, #100]	; (8001330 <HAL_I2C_MspInit+0x84>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d12b      	bne.n	8001326 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	613b      	str	r3, [r7, #16]
 80012d2:	4b18      	ldr	r3, [pc, #96]	; (8001334 <HAL_I2C_MspInit+0x88>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	4a17      	ldr	r2, [pc, #92]	; (8001334 <HAL_I2C_MspInit+0x88>)
 80012d8:	f043 0302 	orr.w	r3, r3, #2
 80012dc:	6313      	str	r3, [r2, #48]	; 0x30
 80012de:	4b15      	ldr	r3, [pc, #84]	; (8001334 <HAL_I2C_MspInit+0x88>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	f003 0302 	and.w	r3, r3, #2
 80012e6:	613b      	str	r3, [r7, #16]
 80012e8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012ea:	23c0      	movs	r3, #192	; 0xc0
 80012ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012ee:	2312      	movs	r3, #18
 80012f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012f2:	2301      	movs	r3, #1
 80012f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f6:	2303      	movs	r3, #3
 80012f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012fa:	2304      	movs	r3, #4
 80012fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012fe:	f107 0314 	add.w	r3, r7, #20
 8001302:	4619      	mov	r1, r3
 8001304:	480c      	ldr	r0, [pc, #48]	; (8001338 <HAL_I2C_MspInit+0x8c>)
 8001306:	f001 fb4d 	bl	80029a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	60fb      	str	r3, [r7, #12]
 800130e:	4b09      	ldr	r3, [pc, #36]	; (8001334 <HAL_I2C_MspInit+0x88>)
 8001310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001312:	4a08      	ldr	r2, [pc, #32]	; (8001334 <HAL_I2C_MspInit+0x88>)
 8001314:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001318:	6413      	str	r3, [r2, #64]	; 0x40
 800131a:	4b06      	ldr	r3, [pc, #24]	; (8001334 <HAL_I2C_MspInit+0x88>)
 800131c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001326:	bf00      	nop
 8001328:	3728      	adds	r7, #40	; 0x28
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40005400 	.word	0x40005400
 8001334:	40023800 	.word	0x40023800
 8001338:	40020400 	.word	0x40020400

0800133c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b08c      	sub	sp, #48	; 0x30
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001344:	f107 031c 	add.w	r3, r7, #28
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]
 8001352:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a70      	ldr	r2, [pc, #448]	; (800151c <HAL_SPI_MspInit+0x1e0>)
 800135a:	4293      	cmp	r3, r2
 800135c:	f040 8089 	bne.w	8001472 <HAL_SPI_MspInit+0x136>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001360:	2300      	movs	r3, #0
 8001362:	61bb      	str	r3, [r7, #24]
 8001364:	4b6e      	ldr	r3, [pc, #440]	; (8001520 <HAL_SPI_MspInit+0x1e4>)
 8001366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001368:	4a6d      	ldr	r2, [pc, #436]	; (8001520 <HAL_SPI_MspInit+0x1e4>)
 800136a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800136e:	6453      	str	r3, [r2, #68]	; 0x44
 8001370:	4b6b      	ldr	r3, [pc, #428]	; (8001520 <HAL_SPI_MspInit+0x1e4>)
 8001372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001374:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001378:	61bb      	str	r3, [r7, #24]
 800137a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800137c:	2300      	movs	r3, #0
 800137e:	617b      	str	r3, [r7, #20]
 8001380:	4b67      	ldr	r3, [pc, #412]	; (8001520 <HAL_SPI_MspInit+0x1e4>)
 8001382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001384:	4a66      	ldr	r2, [pc, #408]	; (8001520 <HAL_SPI_MspInit+0x1e4>)
 8001386:	f043 0301 	orr.w	r3, r3, #1
 800138a:	6313      	str	r3, [r2, #48]	; 0x30
 800138c:	4b64      	ldr	r3, [pc, #400]	; (8001520 <HAL_SPI_MspInit+0x1e4>)
 800138e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001390:	f003 0301 	and.w	r3, r3, #1
 8001394:	617b      	str	r3, [r7, #20]
 8001396:	697b      	ldr	r3, [r7, #20]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001398:	23f0      	movs	r3, #240	; 0xf0
 800139a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139c:	2302      	movs	r3, #2
 800139e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a0:	2300      	movs	r3, #0
 80013a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a4:	2303      	movs	r3, #3
 80013a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013a8:	2305      	movs	r3, #5
 80013aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ac:	f107 031c 	add.w	r3, r7, #28
 80013b0:	4619      	mov	r1, r3
 80013b2:	485c      	ldr	r0, [pc, #368]	; (8001524 <HAL_SPI_MspInit+0x1e8>)
 80013b4:	f001 faf6 	bl	80029a4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80013b8:	4b5b      	ldr	r3, [pc, #364]	; (8001528 <HAL_SPI_MspInit+0x1ec>)
 80013ba:	4a5c      	ldr	r2, [pc, #368]	; (800152c <HAL_SPI_MspInit+0x1f0>)
 80013bc:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80013be:	4b5a      	ldr	r3, [pc, #360]	; (8001528 <HAL_SPI_MspInit+0x1ec>)
 80013c0:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80013c4:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013c6:	4b58      	ldr	r3, [pc, #352]	; (8001528 <HAL_SPI_MspInit+0x1ec>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013cc:	4b56      	ldr	r3, [pc, #344]	; (8001528 <HAL_SPI_MspInit+0x1ec>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80013d2:	4b55      	ldr	r3, [pc, #340]	; (8001528 <HAL_SPI_MspInit+0x1ec>)
 80013d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013d8:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013da:	4b53      	ldr	r3, [pc, #332]	; (8001528 <HAL_SPI_MspInit+0x1ec>)
 80013dc:	2200      	movs	r2, #0
 80013de:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013e0:	4b51      	ldr	r3, [pc, #324]	; (8001528 <HAL_SPI_MspInit+0x1ec>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80013e6:	4b50      	ldr	r3, [pc, #320]	; (8001528 <HAL_SPI_MspInit+0x1ec>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80013ec:	4b4e      	ldr	r3, [pc, #312]	; (8001528 <HAL_SPI_MspInit+0x1ec>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013f2:	4b4d      	ldr	r3, [pc, #308]	; (8001528 <HAL_SPI_MspInit+0x1ec>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80013f8:	484b      	ldr	r0, [pc, #300]	; (8001528 <HAL_SPI_MspInit+0x1ec>)
 80013fa:	f000 ff57 	bl	80022ac <HAL_DMA_Init>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8001404:	f7ff ff24 	bl	8001250 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	4a47      	ldr	r2, [pc, #284]	; (8001528 <HAL_SPI_MspInit+0x1ec>)
 800140c:	64da      	str	r2, [r3, #76]	; 0x4c
 800140e:	4a46      	ldr	r2, [pc, #280]	; (8001528 <HAL_SPI_MspInit+0x1ec>)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001414:	4b46      	ldr	r3, [pc, #280]	; (8001530 <HAL_SPI_MspInit+0x1f4>)
 8001416:	4a47      	ldr	r2, [pc, #284]	; (8001534 <HAL_SPI_MspInit+0x1f8>)
 8001418:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 800141a:	4b45      	ldr	r3, [pc, #276]	; (8001530 <HAL_SPI_MspInit+0x1f4>)
 800141c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001420:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001422:	4b43      	ldr	r3, [pc, #268]	; (8001530 <HAL_SPI_MspInit+0x1f4>)
 8001424:	2240      	movs	r2, #64	; 0x40
 8001426:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001428:	4b41      	ldr	r3, [pc, #260]	; (8001530 <HAL_SPI_MspInit+0x1f4>)
 800142a:	2200      	movs	r2, #0
 800142c:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800142e:	4b40      	ldr	r3, [pc, #256]	; (8001530 <HAL_SPI_MspInit+0x1f4>)
 8001430:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001434:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001436:	4b3e      	ldr	r3, [pc, #248]	; (8001530 <HAL_SPI_MspInit+0x1f4>)
 8001438:	2200      	movs	r2, #0
 800143a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800143c:	4b3c      	ldr	r3, [pc, #240]	; (8001530 <HAL_SPI_MspInit+0x1f4>)
 800143e:	2200      	movs	r2, #0
 8001440:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001442:	4b3b      	ldr	r3, [pc, #236]	; (8001530 <HAL_SPI_MspInit+0x1f4>)
 8001444:	2200      	movs	r2, #0
 8001446:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001448:	4b39      	ldr	r3, [pc, #228]	; (8001530 <HAL_SPI_MspInit+0x1f4>)
 800144a:	2200      	movs	r2, #0
 800144c:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800144e:	4b38      	ldr	r3, [pc, #224]	; (8001530 <HAL_SPI_MspInit+0x1f4>)
 8001450:	2200      	movs	r2, #0
 8001452:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001454:	4836      	ldr	r0, [pc, #216]	; (8001530 <HAL_SPI_MspInit+0x1f4>)
 8001456:	f000 ff29 	bl	80022ac <HAL_DMA_Init>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 8001460:	f7ff fef6 	bl	8001250 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	4a32      	ldr	r2, [pc, #200]	; (8001530 <HAL_SPI_MspInit+0x1f4>)
 8001468:	649a      	str	r2, [r3, #72]	; 0x48
 800146a:	4a31      	ldr	r2, [pc, #196]	; (8001530 <HAL_SPI_MspInit+0x1f4>)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001470:	e04f      	b.n	8001512 <HAL_SPI_MspInit+0x1d6>
  else if(hspi->Instance==SPI3)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a30      	ldr	r2, [pc, #192]	; (8001538 <HAL_SPI_MspInit+0x1fc>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d14a      	bne.n	8001512 <HAL_SPI_MspInit+0x1d6>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800147c:	2300      	movs	r3, #0
 800147e:	613b      	str	r3, [r7, #16]
 8001480:	4b27      	ldr	r3, [pc, #156]	; (8001520 <HAL_SPI_MspInit+0x1e4>)
 8001482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001484:	4a26      	ldr	r2, [pc, #152]	; (8001520 <HAL_SPI_MspInit+0x1e4>)
 8001486:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800148a:	6413      	str	r3, [r2, #64]	; 0x40
 800148c:	4b24      	ldr	r3, [pc, #144]	; (8001520 <HAL_SPI_MspInit+0x1e4>)
 800148e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001490:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001494:	613b      	str	r3, [r7, #16]
 8001496:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001498:	2300      	movs	r3, #0
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	4b20      	ldr	r3, [pc, #128]	; (8001520 <HAL_SPI_MspInit+0x1e4>)
 800149e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a0:	4a1f      	ldr	r2, [pc, #124]	; (8001520 <HAL_SPI_MspInit+0x1e4>)
 80014a2:	f043 0304 	orr.w	r3, r3, #4
 80014a6:	6313      	str	r3, [r2, #48]	; 0x30
 80014a8:	4b1d      	ldr	r3, [pc, #116]	; (8001520 <HAL_SPI_MspInit+0x1e4>)
 80014aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ac:	f003 0304 	and.w	r3, r3, #4
 80014b0:	60fb      	str	r3, [r7, #12]
 80014b2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b4:	2300      	movs	r3, #0
 80014b6:	60bb      	str	r3, [r7, #8]
 80014b8:	4b19      	ldr	r3, [pc, #100]	; (8001520 <HAL_SPI_MspInit+0x1e4>)
 80014ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014bc:	4a18      	ldr	r2, [pc, #96]	; (8001520 <HAL_SPI_MspInit+0x1e4>)
 80014be:	f043 0302 	orr.w	r3, r3, #2
 80014c2:	6313      	str	r3, [r2, #48]	; 0x30
 80014c4:	4b16      	ldr	r3, [pc, #88]	; (8001520 <HAL_SPI_MspInit+0x1e4>)
 80014c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c8:	f003 0302 	and.w	r3, r3, #2
 80014cc:	60bb      	str	r3, [r7, #8]
 80014ce:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80014d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d6:	2302      	movs	r3, #2
 80014d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014de:	2303      	movs	r3, #3
 80014e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80014e2:	2306      	movs	r3, #6
 80014e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014e6:	f107 031c 	add.w	r3, r7, #28
 80014ea:	4619      	mov	r1, r3
 80014ec:	4813      	ldr	r0, [pc, #76]	; (800153c <HAL_SPI_MspInit+0x200>)
 80014ee:	f001 fa59 	bl	80029a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80014f2:	2330      	movs	r3, #48	; 0x30
 80014f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f6:	2302      	movs	r3, #2
 80014f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014fe:	2303      	movs	r3, #3
 8001500:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001502:	2306      	movs	r3, #6
 8001504:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001506:	f107 031c 	add.w	r3, r7, #28
 800150a:	4619      	mov	r1, r3
 800150c:	480c      	ldr	r0, [pc, #48]	; (8001540 <HAL_SPI_MspInit+0x204>)
 800150e:	f001 fa49 	bl	80029a4 <HAL_GPIO_Init>
}
 8001512:	bf00      	nop
 8001514:	3730      	adds	r7, #48	; 0x30
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	40013000 	.word	0x40013000
 8001520:	40023800 	.word	0x40023800
 8001524:	40020000 	.word	0x40020000
 8001528:	20000198 	.word	0x20000198
 800152c:	40026410 	.word	0x40026410
 8001530:	200001f8 	.word	0x200001f8
 8001534:	40026458 	.word	0x40026458
 8001538:	40003c00 	.word	0x40003c00
 800153c:	40020800 	.word	0x40020800
 8001540:	40020400 	.word	0x40020400

08001544 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b08c      	sub	sp, #48	; 0x30
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800154c:	f107 031c 	add.w	r3, r7, #28
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	605a      	str	r2, [r3, #4]
 8001556:	609a      	str	r2, [r3, #8]
 8001558:	60da      	str	r2, [r3, #12]
 800155a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a3a      	ldr	r2, [pc, #232]	; (800164c <HAL_UART_MspInit+0x108>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d135      	bne.n	80015d2 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	61bb      	str	r3, [r7, #24]
 800156a:	4b39      	ldr	r3, [pc, #228]	; (8001650 <HAL_UART_MspInit+0x10c>)
 800156c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156e:	4a38      	ldr	r2, [pc, #224]	; (8001650 <HAL_UART_MspInit+0x10c>)
 8001570:	f043 0310 	orr.w	r3, r3, #16
 8001574:	6453      	str	r3, [r2, #68]	; 0x44
 8001576:	4b36      	ldr	r3, [pc, #216]	; (8001650 <HAL_UART_MspInit+0x10c>)
 8001578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157a:	f003 0310 	and.w	r3, r3, #16
 800157e:	61bb      	str	r3, [r7, #24]
 8001580:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	617b      	str	r3, [r7, #20]
 8001586:	4b32      	ldr	r3, [pc, #200]	; (8001650 <HAL_UART_MspInit+0x10c>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	4a31      	ldr	r2, [pc, #196]	; (8001650 <HAL_UART_MspInit+0x10c>)
 800158c:	f043 0301 	orr.w	r3, r3, #1
 8001590:	6313      	str	r3, [r2, #48]	; 0x30
 8001592:	4b2f      	ldr	r3, [pc, #188]	; (8001650 <HAL_UART_MspInit+0x10c>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	617b      	str	r3, [r7, #20]
 800159c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800159e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80015a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a4:	2302      	movs	r3, #2
 80015a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a8:	2300      	movs	r3, #0
 80015aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ac:	2303      	movs	r3, #3
 80015ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015b0:	2307      	movs	r3, #7
 80015b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b4:	f107 031c 	add.w	r3, r7, #28
 80015b8:	4619      	mov	r1, r3
 80015ba:	4826      	ldr	r0, [pc, #152]	; (8001654 <HAL_UART_MspInit+0x110>)
 80015bc:	f001 f9f2 	bl	80029a4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80015c0:	2200      	movs	r2, #0
 80015c2:	2100      	movs	r1, #0
 80015c4:	2025      	movs	r0, #37	; 0x25
 80015c6:	f000 fe3a 	bl	800223e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80015ca:	2025      	movs	r0, #37	; 0x25
 80015cc:	f000 fe53 	bl	8002276 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015d0:	e038      	b.n	8001644 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a20      	ldr	r2, [pc, #128]	; (8001658 <HAL_UART_MspInit+0x114>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d133      	bne.n	8001644 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 80015dc:	2300      	movs	r3, #0
 80015de:	613b      	str	r3, [r7, #16]
 80015e0:	4b1b      	ldr	r3, [pc, #108]	; (8001650 <HAL_UART_MspInit+0x10c>)
 80015e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e4:	4a1a      	ldr	r2, [pc, #104]	; (8001650 <HAL_UART_MspInit+0x10c>)
 80015e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015ea:	6413      	str	r3, [r2, #64]	; 0x40
 80015ec:	4b18      	ldr	r3, [pc, #96]	; (8001650 <HAL_UART_MspInit+0x10c>)
 80015ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f4:	613b      	str	r3, [r7, #16]
 80015f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f8:	2300      	movs	r3, #0
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	4b14      	ldr	r3, [pc, #80]	; (8001650 <HAL_UART_MspInit+0x10c>)
 80015fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001600:	4a13      	ldr	r2, [pc, #76]	; (8001650 <HAL_UART_MspInit+0x10c>)
 8001602:	f043 0301 	orr.w	r3, r3, #1
 8001606:	6313      	str	r3, [r2, #48]	; 0x30
 8001608:	4b11      	ldr	r3, [pc, #68]	; (8001650 <HAL_UART_MspInit+0x10c>)
 800160a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160c:	f003 0301 	and.w	r3, r3, #1
 8001610:	60fb      	str	r3, [r7, #12]
 8001612:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001614:	230c      	movs	r3, #12
 8001616:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001618:	2302      	movs	r3, #2
 800161a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161c:	2300      	movs	r3, #0
 800161e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001620:	2303      	movs	r3, #3
 8001622:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001624:	2307      	movs	r3, #7
 8001626:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001628:	f107 031c 	add.w	r3, r7, #28
 800162c:	4619      	mov	r1, r3
 800162e:	4809      	ldr	r0, [pc, #36]	; (8001654 <HAL_UART_MspInit+0x110>)
 8001630:	f001 f9b8 	bl	80029a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001634:	2200      	movs	r2, #0
 8001636:	2100      	movs	r1, #0
 8001638:	2026      	movs	r0, #38	; 0x26
 800163a:	f000 fe00 	bl	800223e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800163e:	2026      	movs	r0, #38	; 0x26
 8001640:	f000 fe19 	bl	8002276 <HAL_NVIC_EnableIRQ>
}
 8001644:	bf00      	nop
 8001646:	3730      	adds	r7, #48	; 0x30
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	40011000 	.word	0x40011000
 8001650:	40023800 	.word	0x40023800
 8001654:	40020000 	.word	0x40020000
 8001658:	40004400 	.word	0x40004400

0800165c <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001662:	1d3b      	adds	r3, r7, #4
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	605a      	str	r2, [r3, #4]
 800166a:	609a      	str	r2, [r3, #8]
 800166c:	60da      	str	r2, [r3, #12]
 800166e:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001670:	4b1c      	ldr	r3, [pc, #112]	; (80016e4 <HAL_FSMC_MspInit+0x88>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d131      	bne.n	80016dc <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8001678:	4b1a      	ldr	r3, [pc, #104]	; (80016e4 <HAL_FSMC_MspInit+0x88>)
 800167a:	2201      	movs	r2, #1
 800167c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	603b      	str	r3, [r7, #0]
 8001682:	4b19      	ldr	r3, [pc, #100]	; (80016e8 <HAL_FSMC_MspInit+0x8c>)
 8001684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001686:	4a18      	ldr	r2, [pc, #96]	; (80016e8 <HAL_FSMC_MspInit+0x8c>)
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	6393      	str	r3, [r2, #56]	; 0x38
 800168e:	4b16      	ldr	r3, [pc, #88]	; (80016e8 <HAL_FSMC_MspInit+0x8c>)
 8001690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	603b      	str	r3, [r7, #0]
 8001698:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800169a:	f64f 7380 	movw	r3, #65408	; 0xff80
 800169e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a0:	2302      	movs	r3, #2
 80016a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a4:	2300      	movs	r3, #0
 80016a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a8:	2303      	movs	r3, #3
 80016aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80016ac:	230c      	movs	r3, #12
 80016ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016b0:	1d3b      	adds	r3, r7, #4
 80016b2:	4619      	mov	r1, r3
 80016b4:	480d      	ldr	r0, [pc, #52]	; (80016ec <HAL_FSMC_MspInit+0x90>)
 80016b6:	f001 f975 	bl	80029a4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13
 80016ba:	f24e 73b3 	movw	r3, #59315	; 0xe7b3
 80016be:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c0:	2302      	movs	r3, #2
 80016c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c4:	2300      	movs	r3, #0
 80016c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c8:	2303      	movs	r3, #3
 80016ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80016cc:	230c      	movs	r3, #12
 80016ce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016d0:	1d3b      	adds	r3, r7, #4
 80016d2:	4619      	mov	r1, r3
 80016d4:	4806      	ldr	r0, [pc, #24]	; (80016f0 <HAL_FSMC_MspInit+0x94>)
 80016d6:	f001 f965 	bl	80029a4 <HAL_GPIO_Init>
 80016da:	e000      	b.n	80016de <HAL_FSMC_MspInit+0x82>
    return;
 80016dc:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80016de:	3718      	adds	r7, #24
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	20000330 	.word	0x20000330
 80016e8:	40023800 	.word	0x40023800
 80016ec:	40021000 	.word	0x40021000
 80016f0:	40020c00 	.word	0x40020c00

080016f4 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80016fc:	f7ff ffae 	bl	800165c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001700:	bf00      	nop
 8001702:	3708      	adds	r7, #8
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}

08001708 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800170c:	e7fe      	b.n	800170c <NMI_Handler+0x4>

0800170e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800170e:	b480      	push	{r7}
 8001710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001712:	e7fe      	b.n	8001712 <HardFault_Handler+0x4>

08001714 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001718:	e7fe      	b.n	8001718 <MemManage_Handler+0x4>

0800171a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800171a:	b480      	push	{r7}
 800171c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800171e:	e7fe      	b.n	800171e <BusFault_Handler+0x4>

08001720 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001724:	e7fe      	b.n	8001724 <UsageFault_Handler+0x4>

08001726 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001726:	b480      	push	{r7}
 8001728:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800172a:	bf00      	nop
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001738:	bf00      	nop
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr

08001742 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001742:	b480      	push	{r7}
 8001744:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001754:	f000 fc54 	bl	8002000 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001758:	bf00      	nop
 800175a:	bd80      	pop	{r7, pc}

0800175c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  static int ledVal = 0;
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, ledVal);
 8001762:	4b24      	ldr	r3, [pc, #144]	; (80017f4 <USART1_IRQHandler+0x98>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	b2db      	uxtb	r3, r3
 8001768:	461a      	mov	r2, r3
 800176a:	2108      	movs	r1, #8
 800176c:	4822      	ldr	r0, [pc, #136]	; (80017f8 <USART1_IRQHandler+0x9c>)
 800176e:	f001 fab5 	bl	8002cdc <HAL_GPIO_WritePin>
  ledVal = !ledVal;
 8001772:	4b20      	ldr	r3, [pc, #128]	; (80017f4 <USART1_IRQHandler+0x98>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2b00      	cmp	r3, #0
 8001778:	bf0c      	ite	eq
 800177a:	2301      	moveq	r3, #1
 800177c:	2300      	movne	r3, #0
 800177e:	b2db      	uxtb	r3, r3
 8001780:	461a      	mov	r2, r3
 8001782:	4b1c      	ldr	r3, [pc, #112]	; (80017f4 <USART1_IRQHandler+0x98>)
 8001784:	601a      	str	r2, [r3, #0]
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001786:	481d      	ldr	r0, [pc, #116]	; (80017fc <USART1_IRQHandler+0xa0>)
 8001788:	f002 fa0e 	bl	8003ba8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  volatile unsigned int IIR;
  IIR = USART1->SR;
 800178c:	4b1c      	ldr	r3, [pc, #112]	; (8001800 <USART1_IRQHandler+0xa4>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	603b      	str	r3, [r7, #0]
  if(IIR & UART_FLAG_RXNE){
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	f003 0320 	and.w	r3, r3, #32
 8001798:	2b00      	cmp	r3, #0
 800179a:	d009      	beq.n	80017b0 <USART1_IRQHandler+0x54>
  		//Read Data Register Not Empty
  		char t = USART1->DR; // the character from the USART1 data register is saved in t
 800179c:	4b18      	ldr	r3, [pc, #96]	; (8001800 <USART1_IRQHandler+0xa4>)
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	71fb      	strb	r3, [r7, #7]
  		put_in_rx_buffer(t,DBG_UART);
 80017a2:	4b18      	ldr	r3, [pc, #96]	; (8001804 <USART1_IRQHandler+0xa8>)
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	79fb      	ldrb	r3, [r7, #7]
 80017a8:	4611      	mov	r1, r2
 80017aa:	4618      	mov	r0, r3
 80017ac:	f000 f950 	bl	8001a50 <put_in_rx_buffer>
      }
  if(IIR & UART_FLAG_TXE){
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d018      	beq.n	80017ec <USART1_IRQHandler+0x90>
  		if(wr_pointer_dbg==rd_pointer_dbg){
 80017ba:	4b13      	ldr	r3, [pc, #76]	; (8001808 <USART1_IRQHandler+0xac>)
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	4b13      	ldr	r3, [pc, #76]	; (800180c <USART1_IRQHandler+0xb0>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d108      	bne.n	80017d8 <USART1_IRQHandler+0x7c>
  			__HAL_UART_DISABLE_IT(&huart1, UART_IT_TXE); //whole message transmitted
 80017c6:	4b0d      	ldr	r3, [pc, #52]	; (80017fc <USART1_IRQHandler+0xa0>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	68da      	ldr	r2, [r3, #12]
 80017cc:	4b0b      	ldr	r3, [pc, #44]	; (80017fc <USART1_IRQHandler+0xa0>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017d4:	60da      	str	r2, [r3, #12]
  		}
  	}


  /* USER CODE END USART1_IRQn 1 */
}
 80017d6:	e009      	b.n	80017ec <USART1_IRQHandler+0x90>
  			DBG_UART->DR = get_from_tx_buffer(DBG_UART);
 80017d8:	4b0a      	ldr	r3, [pc, #40]	; (8001804 <USART1_IRQHandler+0xa8>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4618      	mov	r0, r3
 80017de:	f000 f9db 	bl	8001b98 <get_from_tx_buffer>
 80017e2:	4603      	mov	r3, r0
 80017e4:	461a      	mov	r2, r3
 80017e6:	4b07      	ldr	r3, [pc, #28]	; (8001804 <USART1_IRQHandler+0xa8>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	605a      	str	r2, [r3, #4]
}
 80017ec:	bf00      	nop
 80017ee:	3708      	adds	r7, #8
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	20000334 	.word	0x20000334
 80017f8:	40020400 	.word	0x40020400
 80017fc:	20000258 	.word	0x20000258
 8001800:	40011000 	.word	0x40011000
 8001804:	20000008 	.word	0x20000008
 8001808:	20000b48 	.word	0x20000b48
 800180c:	20000b44 	.word	0x20000b44

08001810 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001816:	481b      	ldr	r0, [pc, #108]	; (8001884 <USART2_IRQHandler+0x74>)
 8001818:	f002 f9c6 	bl	8003ba8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  volatile unsigned int IIR;
  	IIR=USART2->SR;
 800181c:	4b1a      	ldr	r3, [pc, #104]	; (8001888 <USART2_IRQHandler+0x78>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	603b      	str	r3, [r7, #0]
    if(IIR & UART_FLAG_RXNE){
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	f003 0320 	and.w	r3, r3, #32
 8001828:	2b00      	cmp	r3, #0
 800182a:	d009      	beq.n	8001840 <USART2_IRQHandler+0x30>
  		// check if the USART6 receive interrupt flag was set
  		char t = USART2->DR; // the character from the USART1 data register is saved in t
 800182c:	4b16      	ldr	r3, [pc, #88]	; (8001888 <USART2_IRQHandler+0x78>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	71fb      	strb	r3, [r7, #7]
  		put_in_rx_buffer(t,RS485_UART);
 8001832:	4b16      	ldr	r3, [pc, #88]	; (800188c <USART2_IRQHandler+0x7c>)
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	79fb      	ldrb	r3, [r7, #7]
 8001838:	4611      	mov	r1, r2
 800183a:	4618      	mov	r0, r3
 800183c:	f000 f908 	bl	8001a50 <put_in_rx_buffer>
      }
  	if(IIR & UART_FLAG_TXE){
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001846:	2b00      	cmp	r3, #0
 8001848:	d017      	beq.n	800187a <USART2_IRQHandler+0x6a>
  		if(wr_pointer_rs485==rd_pointer_rs485){
 800184a:	4b11      	ldr	r3, [pc, #68]	; (8001890 <USART2_IRQHandler+0x80>)
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	4b11      	ldr	r3, [pc, #68]	; (8001894 <USART2_IRQHandler+0x84>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	429a      	cmp	r2, r3
 8001854:	d108      	bne.n	8001868 <USART2_IRQHandler+0x58>
  			__HAL_UART_DISABLE_IT(&huart2, UART_IT_TXE);
 8001856:	4b0b      	ldr	r3, [pc, #44]	; (8001884 <USART2_IRQHandler+0x74>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	68da      	ldr	r2, [r3, #12]
 800185c:	4b09      	ldr	r3, [pc, #36]	; (8001884 <USART2_IRQHandler+0x74>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001864:	60da      	str	r2, [r3, #12]
  		}
  		else{
  			USART2->DR = get_from_tx_buffer(RS485_UART);
  		}
  	}
}
 8001866:	e008      	b.n	800187a <USART2_IRQHandler+0x6a>
  			USART2->DR = get_from_tx_buffer(RS485_UART);
 8001868:	4b08      	ldr	r3, [pc, #32]	; (800188c <USART2_IRQHandler+0x7c>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4618      	mov	r0, r3
 800186e:	f000 f993 	bl	8001b98 <get_from_tx_buffer>
 8001872:	4603      	mov	r3, r0
 8001874:	461a      	mov	r2, r3
 8001876:	4b04      	ldr	r3, [pc, #16]	; (8001888 <USART2_IRQHandler+0x78>)
 8001878:	605a      	str	r2, [r3, #4]
}
 800187a:	bf00      	nop
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	2000029c 	.word	0x2000029c
 8001888:	40004400 	.word	0x40004400
 800188c:	20000004 	.word	0x20000004
 8001890:	20000740 	.word	0x20000740
 8001894:	2000073c 	.word	0x2000073c

08001898 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800189c:	4802      	ldr	r0, [pc, #8]	; (80018a8 <DMA2_Stream0_IRQHandler+0x10>)
 800189e:	f000 fe45 	bl	800252c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	20000198 	.word	0x20000198

080018ac <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80018b0:	4802      	ldr	r0, [pc, #8]	; (80018bc <DMA2_Stream3_IRQHandler+0x10>)
 80018b2:	f000 fe3b 	bl	800252c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80018b6:	bf00      	nop
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	200001f8 	.word	0x200001f8

080018c0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b086      	sub	sp, #24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	60b9      	str	r1, [r7, #8]
 80018ca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018cc:	2300      	movs	r3, #0
 80018ce:	617b      	str	r3, [r7, #20]
 80018d0:	e00a      	b.n	80018e8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80018d2:	f3af 8000 	nop.w
 80018d6:	4601      	mov	r1, r0
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	1c5a      	adds	r2, r3, #1
 80018dc:	60ba      	str	r2, [r7, #8]
 80018de:	b2ca      	uxtb	r2, r1
 80018e0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	3301      	adds	r3, #1
 80018e6:	617b      	str	r3, [r7, #20]
 80018e8:	697a      	ldr	r2, [r7, #20]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	dbf0      	blt.n	80018d2 <_read+0x12>
	}

return len;
 80018f0:	687b      	ldr	r3, [r7, #4]
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3718      	adds	r7, #24
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b086      	sub	sp, #24
 80018fe:	af00      	add	r7, sp, #0
 8001900:	60f8      	str	r0, [r7, #12]
 8001902:	60b9      	str	r1, [r7, #8]
 8001904:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001906:	2300      	movs	r3, #0
 8001908:	617b      	str	r3, [r7, #20]
 800190a:	e009      	b.n	8001920 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	1c5a      	adds	r2, r3, #1
 8001910:	60ba      	str	r2, [r7, #8]
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	4618      	mov	r0, r3
 8001916:	f000 f889 	bl	8001a2c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	3301      	adds	r3, #1
 800191e:	617b      	str	r3, [r7, #20]
 8001920:	697a      	ldr	r2, [r7, #20]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	429a      	cmp	r2, r3
 8001926:	dbf1      	blt.n	800190c <_write+0x12>
	}
	return len;
 8001928:	687b      	ldr	r3, [r7, #4]
}
 800192a:	4618      	mov	r0, r3
 800192c:	3718      	adds	r7, #24
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <_close>:

int _close(int file)
{
 8001932:	b480      	push	{r7}
 8001934:	b083      	sub	sp, #12
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
	return -1;
 800193a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800193e:	4618      	mov	r0, r3
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr

0800194a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800194a:	b480      	push	{r7}
 800194c:	b083      	sub	sp, #12
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
 8001952:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800195a:	605a      	str	r2, [r3, #4]
	return 0;
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr

0800196a <_isatty>:

int _isatty(int file)
{
 800196a:	b480      	push	{r7}
 800196c:	b083      	sub	sp, #12
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
	return 1;
 8001972:	2301      	movs	r3, #1
}
 8001974:	4618      	mov	r0, r3
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001980:	b480      	push	{r7}
 8001982:	b085      	sub	sp, #20
 8001984:	af00      	add	r7, sp, #0
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	60b9      	str	r1, [r7, #8]
 800198a:	607a      	str	r2, [r7, #4]
	return 0;
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	3714      	adds	r7, #20
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
	...

0800199c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019a4:	4a14      	ldr	r2, [pc, #80]	; (80019f8 <_sbrk+0x5c>)
 80019a6:	4b15      	ldr	r3, [pc, #84]	; (80019fc <_sbrk+0x60>)
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019b0:	4b13      	ldr	r3, [pc, #76]	; (8001a00 <_sbrk+0x64>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d102      	bne.n	80019be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019b8:	4b11      	ldr	r3, [pc, #68]	; (8001a00 <_sbrk+0x64>)
 80019ba:	4a12      	ldr	r2, [pc, #72]	; (8001a04 <_sbrk+0x68>)
 80019bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019be:	4b10      	ldr	r3, [pc, #64]	; (8001a00 <_sbrk+0x64>)
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4413      	add	r3, r2
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d207      	bcs.n	80019dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019cc:	f003 f8f8 	bl	8004bc0 <__errno>
 80019d0:	4603      	mov	r3, r0
 80019d2:	220c      	movs	r2, #12
 80019d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019d6:	f04f 33ff 	mov.w	r3, #4294967295
 80019da:	e009      	b.n	80019f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019dc:	4b08      	ldr	r3, [pc, #32]	; (8001a00 <_sbrk+0x64>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019e2:	4b07      	ldr	r3, [pc, #28]	; (8001a00 <_sbrk+0x64>)
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4413      	add	r3, r2
 80019ea:	4a05      	ldr	r2, [pc, #20]	; (8001a00 <_sbrk+0x64>)
 80019ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019ee:	68fb      	ldr	r3, [r7, #12]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3718      	adds	r7, #24
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	20020000 	.word	0x20020000
 80019fc:	00000400 	.word	0x00000400
 8001a00:	20000338 	.word	0x20000338
 8001a04:	20002f78 	.word	0x20002f78

08001a08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a0c:	4b06      	ldr	r3, [pc, #24]	; (8001a28 <SystemInit+0x20>)
 8001a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a12:	4a05      	ldr	r2, [pc, #20]	; (8001a28 <SystemInit+0x20>)
 8001a14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a1c:	bf00      	nop
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	e000ed00 	.word	0xe000ed00

08001a2c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

//redirect printf to uart1.
PUTCHAR_PROTOTYPE{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 0xffff);
 8001a34:	1d39      	adds	r1, r7, #4
 8001a36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	4803      	ldr	r0, [pc, #12]	; (8001a4c <__io_putchar+0x20>)
 8001a3e:	f002 f821 	bl	8003a84 <HAL_UART_Transmit>
	return ch;
 8001a42:	687b      	ldr	r3, [r7, #4]
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3708      	adds	r7, #8
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	20000258 	.word	0x20000258

08001a50 <put_in_rx_buffer>:

void put_in_rx_buffer(char data, USART_TypeDef* USARTx)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	4603      	mov	r3, r0
 8001a58:	6039      	str	r1, [r7, #0]
 8001a5a:	71fb      	strb	r3, [r7, #7]
	if(USARTx == DBG_UART)
 8001a5c:	4b1d      	ldr	r3, [pc, #116]	; (8001ad4 <put_in_rx_buffer+0x84>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	683a      	ldr	r2, [r7, #0]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d114      	bne.n	8001a90 <put_in_rx_buffer+0x40>
	{
		if(SIO_RBUFLEN_DBG>=LEN_RX_BUFFER_DBG)
 8001a66:	4b1c      	ldr	r3, [pc, #112]	; (8001ad8 <put_in_rx_buffer+0x88>)
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	4b1c      	ldr	r3, [pc, #112]	; (8001adc <put_in_rx_buffer+0x8c>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a74:	d226      	bcs.n	8001ac4 <put_in_rx_buffer+0x74>
			{
				return;
			}
		rx_buffer_dbg[wr_pointer_rx_dbg & (LEN_RX_BUFFER_DBG - 1)]=data;
 8001a76:	4b18      	ldr	r3, [pc, #96]	; (8001ad8 <put_in_rx_buffer+0x88>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001a7e:	4918      	ldr	r1, [pc, #96]	; (8001ae0 <put_in_rx_buffer+0x90>)
 8001a80:	79fa      	ldrb	r2, [r7, #7]
 8001a82:	54ca      	strb	r2, [r1, r3]
		wr_pointer_rx_dbg++;
 8001a84:	4b14      	ldr	r3, [pc, #80]	; (8001ad8 <put_in_rx_buffer+0x88>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	3301      	adds	r3, #1
 8001a8a:	4a13      	ldr	r2, [pc, #76]	; (8001ad8 <put_in_rx_buffer+0x88>)
 8001a8c:	6013      	str	r3, [r2, #0]
 8001a8e:	e01c      	b.n	8001aca <put_in_rx_buffer+0x7a>
	}
	else if(USARTx == RS485_UART)
 8001a90:	4b14      	ldr	r3, [pc, #80]	; (8001ae4 <put_in_rx_buffer+0x94>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	683a      	ldr	r2, [r7, #0]
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d117      	bne.n	8001aca <put_in_rx_buffer+0x7a>
	{
		if(SIO_RBUFLEN_RS485>=LEN_RX_BUFFER_RS485)
 8001a9a:	4b13      	ldr	r3, [pc, #76]	; (8001ae8 <put_in_rx_buffer+0x98>)
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	4b13      	ldr	r3, [pc, #76]	; (8001aec <put_in_rx_buffer+0x9c>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001aa8:	d20e      	bcs.n	8001ac8 <put_in_rx_buffer+0x78>
			{
				return;
			}
		rx_buffer_rs485[wr_pointer_rx_rs485 & (LEN_RX_BUFFER_RS485 - 1)]=data;
 8001aaa:	4b0f      	ldr	r3, [pc, #60]	; (8001ae8 <put_in_rx_buffer+0x98>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ab2:	490f      	ldr	r1, [pc, #60]	; (8001af0 <put_in_rx_buffer+0xa0>)
 8001ab4:	79fa      	ldrb	r2, [r7, #7]
 8001ab6:	54ca      	strb	r2, [r1, r3]
		wr_pointer_rx_rs485++;
 8001ab8:	4b0b      	ldr	r3, [pc, #44]	; (8001ae8 <put_in_rx_buffer+0x98>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	3301      	adds	r3, #1
 8001abe:	4a0a      	ldr	r2, [pc, #40]	; (8001ae8 <put_in_rx_buffer+0x98>)
 8001ac0:	6013      	str	r3, [r2, #0]
 8001ac2:	e002      	b.n	8001aca <put_in_rx_buffer+0x7a>
				return;
 8001ac4:	bf00      	nop
 8001ac6:	e000      	b.n	8001aca <put_in_rx_buffer+0x7a>
				return;
 8001ac8:	bf00      	nop
	}
}
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr
 8001ad4:	20000008 	.word	0x20000008
 8001ad8:	20002f58 	.word	0x20002f58
 8001adc:	20002f54 	.word	0x20002f54
 8001ae0:	20000f54 	.word	0x20000f54
 8001ae4:	20000004 	.word	0x20000004
 8001ae8:	20000f50 	.word	0x20000f50
 8001aec:	20000f4c 	.word	0x20000f4c
 8001af0:	20000b4c 	.word	0x20000b4c

08001af4 <put_in_tx_buffer>:

void put_in_tx_buffer(char data, USART_TypeDef* USARTx)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	4603      	mov	r3, r0
 8001afc:	6039      	str	r1, [r7, #0]
 8001afe:	71fb      	strb	r3, [r7, #7]
	if(USARTx == RS485_UART)
 8001b00:	4b1d      	ldr	r3, [pc, #116]	; (8001b78 <put_in_tx_buffer+0x84>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	683a      	ldr	r2, [r7, #0]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d114      	bne.n	8001b34 <put_in_tx_buffer+0x40>
	{
		if(SIO_TBUFLEN_RS485>=LEN_TX_BUFFER_RS485)
 8001b0a:	4b1c      	ldr	r3, [pc, #112]	; (8001b7c <put_in_tx_buffer+0x88>)
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	4b1c      	ldr	r3, [pc, #112]	; (8001b80 <put_in_tx_buffer+0x8c>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b18:	d227      	bcs.n	8001b6a <put_in_tx_buffer+0x76>
			{
				return;
			}
		tx_buffer_rs485[wr_pointer_rs485 & (LEN_TX_BUFFER_RS485 - 1)]=data;
 8001b1a:	4b18      	ldr	r3, [pc, #96]	; (8001b7c <put_in_tx_buffer+0x88>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b22:	4918      	ldr	r1, [pc, #96]	; (8001b84 <put_in_tx_buffer+0x90>)
 8001b24:	79fa      	ldrb	r2, [r7, #7]
 8001b26:	54ca      	strb	r2, [r1, r3]
		wr_pointer_rs485++;
 8001b28:	4b14      	ldr	r3, [pc, #80]	; (8001b7c <put_in_tx_buffer+0x88>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	4a13      	ldr	r2, [pc, #76]	; (8001b7c <put_in_tx_buffer+0x88>)
 8001b30:	6013      	str	r3, [r2, #0]
 8001b32:	e01b      	b.n	8001b6c <put_in_tx_buffer+0x78>
	}
	else if(USARTx == DBG_UART)
 8001b34:	4b14      	ldr	r3, [pc, #80]	; (8001b88 <put_in_tx_buffer+0x94>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	683a      	ldr	r2, [r7, #0]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d116      	bne.n	8001b6c <put_in_tx_buffer+0x78>
	{
		while(SIO_TBUFLEN_DBG>=LEN_TX_BUFFER_DBG)
 8001b3e:	bf00      	nop
 8001b40:	4b12      	ldr	r3, [pc, #72]	; (8001b8c <put_in_tx_buffer+0x98>)
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	4b12      	ldr	r3, [pc, #72]	; (8001b90 <put_in_tx_buffer+0x9c>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b4e:	d2f7      	bcs.n	8001b40 <put_in_tx_buffer+0x4c>
			{
				//return;
			}
		tx_buffer_dbg[wr_pointer_dbg & (LEN_TX_BUFFER_DBG - 1)]=data;
 8001b50:	4b0e      	ldr	r3, [pc, #56]	; (8001b8c <put_in_tx_buffer+0x98>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b58:	490e      	ldr	r1, [pc, #56]	; (8001b94 <put_in_tx_buffer+0xa0>)
 8001b5a:	79fa      	ldrb	r2, [r7, #7]
 8001b5c:	54ca      	strb	r2, [r1, r3]
		wr_pointer_dbg++;
 8001b5e:	4b0b      	ldr	r3, [pc, #44]	; (8001b8c <put_in_tx_buffer+0x98>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	3301      	adds	r3, #1
 8001b64:	4a09      	ldr	r2, [pc, #36]	; (8001b8c <put_in_tx_buffer+0x98>)
 8001b66:	6013      	str	r3, [r2, #0]
 8001b68:	e000      	b.n	8001b6c <put_in_tx_buffer+0x78>
				return;
 8001b6a:	bf00      	nop
	}
}
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	20000004 	.word	0x20000004
 8001b7c:	20000740 	.word	0x20000740
 8001b80:	2000073c 	.word	0x2000073c
 8001b84:	2000033c 	.word	0x2000033c
 8001b88:	20000008 	.word	0x20000008
 8001b8c:	20000b48 	.word	0x20000b48
 8001b90:	20000b44 	.word	0x20000b44
 8001b94:	20000744 	.word	0x20000744

08001b98 <get_from_tx_buffer>:
char get_from_tx_buffer(USART_TypeDef* USARTx)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
	char data;

	if(USARTx == RS485_UART)
 8001ba0:	4b14      	ldr	r3, [pc, #80]	; (8001bf4 <get_from_tx_buffer+0x5c>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d10c      	bne.n	8001bc4 <get_from_tx_buffer+0x2c>
	{

		data=tx_buffer_rs485[rd_pointer_rs485 & (LEN_TX_BUFFER_RS485-1)];
 8001baa:	4b13      	ldr	r3, [pc, #76]	; (8001bf8 <get_from_tx_buffer+0x60>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bb2:	4a12      	ldr	r2, [pc, #72]	; (8001bfc <get_from_tx_buffer+0x64>)
 8001bb4:	5cd3      	ldrb	r3, [r2, r3]
 8001bb6:	73fb      	strb	r3, [r7, #15]
		rd_pointer_rs485++;
 8001bb8:	4b0f      	ldr	r3, [pc, #60]	; (8001bf8 <get_from_tx_buffer+0x60>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	4a0e      	ldr	r2, [pc, #56]	; (8001bf8 <get_from_tx_buffer+0x60>)
 8001bc0:	6013      	str	r3, [r2, #0]
 8001bc2:	e010      	b.n	8001be6 <get_from_tx_buffer+0x4e>
	}
	else if(USARTx == DBG_UART)
 8001bc4:	4b0e      	ldr	r3, [pc, #56]	; (8001c00 <get_from_tx_buffer+0x68>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d10b      	bne.n	8001be6 <get_from_tx_buffer+0x4e>
	{

		data=tx_buffer_dbg[rd_pointer_dbg & (LEN_TX_BUFFER_DBG-1)];
 8001bce:	4b0d      	ldr	r3, [pc, #52]	; (8001c04 <get_from_tx_buffer+0x6c>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bd6:	4a0c      	ldr	r2, [pc, #48]	; (8001c08 <get_from_tx_buffer+0x70>)
 8001bd8:	5cd3      	ldrb	r3, [r2, r3]
 8001bda:	73fb      	strb	r3, [r7, #15]
		rd_pointer_dbg++;
 8001bdc:	4b09      	ldr	r3, [pc, #36]	; (8001c04 <get_from_tx_buffer+0x6c>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	3301      	adds	r3, #1
 8001be2:	4a08      	ldr	r2, [pc, #32]	; (8001c04 <get_from_tx_buffer+0x6c>)
 8001be4:	6013      	str	r3, [r2, #0]
	}
	return data;
 8001be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3714      	adds	r7, #20
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr
 8001bf4:	20000004 	.word	0x20000004
 8001bf8:	2000073c 	.word	0x2000073c
 8001bfc:	2000033c 	.word	0x2000033c
 8001c00:	20000008 	.word	0x20000008
 8001c04:	20000b44 	.word	0x20000b44
 8001c08:	20000744 	.word	0x20000744

08001c0c <get_from_rx_buffer>:
char get_from_rx_buffer(USART_TypeDef* USARTx)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b085      	sub	sp, #20
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
	char data;

	if(USARTx == RS485_UART)
 8001c14:	4b14      	ldr	r3, [pc, #80]	; (8001c68 <get_from_rx_buffer+0x5c>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d10c      	bne.n	8001c38 <get_from_rx_buffer+0x2c>
	{

		data=rx_buffer_rs485[rd_pointer_rx_rs485 & (LEN_RX_BUFFER_RS485-1)];
 8001c1e:	4b13      	ldr	r3, [pc, #76]	; (8001c6c <get_from_rx_buffer+0x60>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c26:	4a12      	ldr	r2, [pc, #72]	; (8001c70 <get_from_rx_buffer+0x64>)
 8001c28:	5cd3      	ldrb	r3, [r2, r3]
 8001c2a:	73fb      	strb	r3, [r7, #15]
		rd_pointer_rx_rs485++;
 8001c2c:	4b0f      	ldr	r3, [pc, #60]	; (8001c6c <get_from_rx_buffer+0x60>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	3301      	adds	r3, #1
 8001c32:	4a0e      	ldr	r2, [pc, #56]	; (8001c6c <get_from_rx_buffer+0x60>)
 8001c34:	6013      	str	r3, [r2, #0]
 8001c36:	e010      	b.n	8001c5a <get_from_rx_buffer+0x4e>
	}
	else if(USARTx == DBG_UART)
 8001c38:	4b0e      	ldr	r3, [pc, #56]	; (8001c74 <get_from_rx_buffer+0x68>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d10b      	bne.n	8001c5a <get_from_rx_buffer+0x4e>
	{

		data=rx_buffer_dbg[rd_pointer_rx_dbg & (LEN_RX_BUFFER_DBG-1)];
 8001c42:	4b0d      	ldr	r3, [pc, #52]	; (8001c78 <get_from_rx_buffer+0x6c>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001c4a:	4a0c      	ldr	r2, [pc, #48]	; (8001c7c <get_from_rx_buffer+0x70>)
 8001c4c:	5cd3      	ldrb	r3, [r2, r3]
 8001c4e:	73fb      	strb	r3, [r7, #15]
		rd_pointer_rx_dbg++;
 8001c50:	4b09      	ldr	r3, [pc, #36]	; (8001c78 <get_from_rx_buffer+0x6c>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	3301      	adds	r3, #1
 8001c56:	4a08      	ldr	r2, [pc, #32]	; (8001c78 <get_from_rx_buffer+0x6c>)
 8001c58:	6013      	str	r3, [r2, #0]
	}
	return data;
 8001c5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3714      	adds	r7, #20
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr
 8001c68:	20000004 	.word	0x20000004
 8001c6c:	20000f4c 	.word	0x20000f4c
 8001c70:	20000b4c 	.word	0x20000b4c
 8001c74:	20000008 	.word	0x20000008
 8001c78:	20002f54 	.word	0x20002f54
 8001c7c:	20000f54 	.word	0x20000f54

08001c80 <usart_message_ready>:

	return 0;
}
//**************************************************************************************
char usart_message_ready(USART_TypeDef* USARTx, char delimiter)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	460b      	mov	r3, r1
 8001c8a:	70fb      	strb	r3, [r7, #3]
	if (USARTx == DBG_UART)
 8001c8c:	4b1f      	ldr	r3, [pc, #124]	; (8001d0c <usart_message_ready+0x8c>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d117      	bne.n	8001cc6 <usart_message_ready+0x46>
	{
		unsigned long tail = rd_pointer_rx_dbg;
 8001c96:	4b1e      	ldr	r3, [pc, #120]	; (8001d10 <usart_message_ready+0x90>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	60fb      	str	r3, [r7, #12]

		while ((wr_pointer_rx_dbg - tail) != 0)
 8001c9c:	e00d      	b.n	8001cba <usart_message_ready+0x3a>
		{
			if (rx_buffer_dbg[tail & (LEN_RX_BUFFER_DBG - 1)] == delimiter)
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001ca4:	4a1b      	ldr	r2, [pc, #108]	; (8001d14 <usart_message_ready+0x94>)
 8001ca6:	5cd3      	ldrb	r3, [r2, r3]
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	78fa      	ldrb	r2, [r7, #3]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d101      	bne.n	8001cb4 <usart_message_ready+0x34>
				return 1;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e025      	b.n	8001d00 <usart_message_ready+0x80>
			++tail;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	60fb      	str	r3, [r7, #12]
		while ((wr_pointer_rx_dbg - tail) != 0)
 8001cba:	4b17      	ldr	r3, [pc, #92]	; (8001d18 <usart_message_ready+0x98>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	68fa      	ldr	r2, [r7, #12]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d1ec      	bne.n	8001c9e <usart_message_ready+0x1e>
 8001cc4:	e01b      	b.n	8001cfe <usart_message_ready+0x7e>
		}
	}
	else if (USARTx == RS485_UART)
 8001cc6:	4b15      	ldr	r3, [pc, #84]	; (8001d1c <usart_message_ready+0x9c>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d116      	bne.n	8001cfe <usart_message_ready+0x7e>
	{
		unsigned long tail = rd_pointer_rx_rs485;
 8001cd0:	4b13      	ldr	r3, [pc, #76]	; (8001d20 <usart_message_ready+0xa0>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	60bb      	str	r3, [r7, #8]

		while ((wr_pointer_rx_rs485 - tail) != 0)
 8001cd6:	e00d      	b.n	8001cf4 <usart_message_ready+0x74>
		{
			if (rx_buffer_rs485[tail & (LEN_RX_BUFFER_RS485 - 1)] == delimiter)
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cde:	4a11      	ldr	r2, [pc, #68]	; (8001d24 <usart_message_ready+0xa4>)
 8001ce0:	5cd3      	ldrb	r3, [r2, r3]
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	78fa      	ldrb	r2, [r7, #3]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d101      	bne.n	8001cee <usart_message_ready+0x6e>
				return 1;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e008      	b.n	8001d00 <usart_message_ready+0x80>
			++tail;
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	60bb      	str	r3, [r7, #8]
		while ((wr_pointer_rx_rs485 - tail) != 0)
 8001cf4:	4b0c      	ldr	r3, [pc, #48]	; (8001d28 <usart_message_ready+0xa8>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	68ba      	ldr	r2, [r7, #8]
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d1ec      	bne.n	8001cd8 <usart_message_ready+0x58>
		}
	}
	return 0;
 8001cfe:	2300      	movs	r3, #0
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3714      	adds	r7, #20
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr
 8001d0c:	20000008 	.word	0x20000008
 8001d10:	20002f54 	.word	0x20002f54
 8001d14:	20000f54 	.word	0x20000f54
 8001d18:	20002f58 	.word	0x20002f58
 8001d1c:	20000004 	.word	0x20000004
 8001d20:	20000f4c 	.word	0x20000f4c
 8001d24:	20000b4c 	.word	0x20000b4c
 8001d28:	20000f50 	.word	0x20000f50

08001d2c <read_usart_message>:
/*
 * Reads message from specified uart rx buffer into @dst until @delimiter character is encountered or @max_len exceeded.
 * Returns: number of characters read if successful, zero when there is no message ready to be read.
 */
unsigned int read_usart_message(char* dst, UART_HandleTypeDef* huart, int max_len, char delimiter)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b086      	sub	sp, #24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	60b9      	str	r1, [r7, #8]
 8001d36:	607a      	str	r2, [r7, #4]
 8001d38:	70fb      	strb	r3, [r7, #3]
	USART_TypeDef* USARTx = huart->Instance;
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	613b      	str	r3, [r7, #16]
	if (usart_message_ready(USARTx,delimiter))
 8001d40:	78fb      	ldrb	r3, [r7, #3]
 8001d42:	4619      	mov	r1, r3
 8001d44:	6938      	ldr	r0, [r7, #16]
 8001d46:	f7ff ff9b 	bl	8001c80 <usart_message_ready>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d018      	beq.n	8001d82 <read_usart_message+0x56>
	{
		int nr = 0;
 8001d50:	2300      	movs	r3, #0
 8001d52:	617b      	str	r3, [r7, #20]
		do
		{
			*dst = get_from_rx_buffer(USARTx);
 8001d54:	6938      	ldr	r0, [r7, #16]
 8001d56:	f7ff ff59 	bl	8001c0c <get_from_rx_buffer>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	701a      	strb	r2, [r3, #0]
			++nr;
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	3301      	adds	r3, #1
 8001d66:	617b      	str	r3, [r7, #20]
		} while (*dst++ != delimiter && nr < max_len);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	1c5a      	adds	r2, r3, #1
 8001d6c:	60fa      	str	r2, [r7, #12]
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	78fa      	ldrb	r2, [r7, #3]
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d003      	beq.n	8001d7e <read_usart_message+0x52>
 8001d76:	697a      	ldr	r2, [r7, #20]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	dbea      	blt.n	8001d54 <read_usart_message+0x28>

		return nr;
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	e000      	b.n	8001d84 <read_usart_message+0x58>
	}
	return 0;
 8001d82:	2300      	movs	r3, #0
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3718      	adds	r7, #24
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <send_usart_message>:
/*
 * Sends @size bytes from @src via specified uart. Nonblocking.
 * Returns: 0 when operation fails due to another message being transmitted, number of bytes written to uart buffer otherwise.
 */

unsigned int send_usart_message(char* src, UART_HandleTypeDef* huart, int size){
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b086      	sub	sp, #24
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	60f8      	str	r0, [r7, #12]
 8001d94:	60b9      	str	r1, [r7, #8]
 8001d96:	607a      	str	r2, [r7, #4]
	USART_TypeDef* USARTx = huart->Instance;
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	613b      	str	r3, [r7, #16]
	if (USARTx == DBG_UART){
 8001d9e:	4b21      	ldr	r3, [pc, #132]	; (8001e24 <send_usart_message+0x98>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d107      	bne.n	8001db8 <send_usart_message+0x2c>
		if(wr_pointer_dbg!=rd_pointer_dbg){
 8001da8:	4b1f      	ldr	r3, [pc, #124]	; (8001e28 <send_usart_message+0x9c>)
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	4b1f      	ldr	r3, [pc, #124]	; (8001e2c <send_usart_message+0xa0>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d00e      	beq.n	8001dd2 <send_usart_message+0x46>
			return 0;//another message is in progress.
 8001db4:	2300      	movs	r3, #0
 8001db6:	e030      	b.n	8001e1a <send_usart_message+0x8e>
		}

	}
	else if (USARTx == RS485_UART){
 8001db8:	4b1d      	ldr	r3, [pc, #116]	; (8001e30 <send_usart_message+0xa4>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	693a      	ldr	r2, [r7, #16]
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d107      	bne.n	8001dd2 <send_usart_message+0x46>
		if(wr_pointer_rs485!=rd_pointer_rs485){
 8001dc2:	4b1c      	ldr	r3, [pc, #112]	; (8001e34 <send_usart_message+0xa8>)
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	4b1c      	ldr	r3, [pc, #112]	; (8001e38 <send_usart_message+0xac>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d001      	beq.n	8001dd2 <send_usart_message+0x46>
			return 0;//another message is in progress.
 8001dce:	2300      	movs	r3, #0
 8001dd0:	e023      	b.n	8001e1a <send_usart_message+0x8e>
		}
	}

	int nr = 0;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	617b      	str	r3, [r7, #20]
	do{
		put_in_tx_buffer(*(src + nr), USARTx);
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	68fa      	ldr	r2, [r7, #12]
 8001dda:	4413      	add	r3, r2
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	6939      	ldr	r1, [r7, #16]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7ff fe87 	bl	8001af4 <put_in_tx_buffer>
		nr++;
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	3301      	adds	r3, #1
 8001dea:	617b      	str	r3, [r7, #20]
	} while (nr < size);
 8001dec:	697a      	ldr	r2, [r7, #20]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	dbf0      	blt.n	8001dd6 <send_usart_message+0x4a>

	if(nr>0){
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	dd0e      	ble.n	8001e18 <send_usart_message+0x8c>
		USARTx->DR = get_from_tx_buffer(USARTx);
 8001dfa:	6938      	ldr	r0, [r7, #16]
 8001dfc:	f7ff fecc 	bl	8001b98 <get_from_tx_buffer>
 8001e00:	4603      	mov	r3, r0
 8001e02:	461a      	mov	r2, r3
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	605a      	str	r2, [r3, #4]
		__HAL_UART_ENABLE_IT(huart, UART_IT_TXE); //turn on tx interrupt forever (until turned off in IRQ handler)
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	68da      	ldr	r2, [r3, #12]
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e16:	60da      	str	r2, [r3, #12]
	}
	return nr;
 8001e18:	697b      	ldr	r3, [r7, #20]
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3718      	adds	r7, #24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	20000008 	.word	0x20000008
 8001e28:	20000b48 	.word	0x20000b48
 8001e2c:	20000b44 	.word	0x20000b44
 8001e30:	20000004 	.word	0x20000004
 8001e34:	20000740 	.word	0x20000740
 8001e38:	2000073c 	.word	0x2000073c

08001e3c <uartDemoLoop>:
#include <stm32f4xx_hal.h>
#include <string.h>



void uartDemoLoop(){
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b0d4      	sub	sp, #336	; 0x150
 8001e40:	af00      	add	r7, sp, #0

	static int firstFlag = 0;

	if(firstFlag == 0){
 8001e42:	4b29      	ldr	r3, [pc, #164]	; (8001ee8 <uartDemoLoop+0xac>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d105      	bne.n	8001e56 <uartDemoLoop+0x1a>
		firstFlag = 1;
 8001e4a:	4b27      	ldr	r3, [pc, #156]	; (8001ee8 <uartDemoLoop+0xac>)
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	601a      	str	r2, [r3, #0]
		printf("[UART demo] Send a string over debug uart and terminate it by ENTER (ascii 13).\r\n");
 8001e50:	4826      	ldr	r0, [pc, #152]	; (8001eec <uartDemoLoop+0xb0>)
 8001e52:	f002 ff6d 	bl	8004d30 <puts>
	}

	char delimiter = 13;
 8001e56:	230d      	movs	r3, #13
 8001e58:	f887 314f 	strb.w	r3, [r7, #335]	; 0x14f
	char msg[64];

	int count = read_usart_message(msg, &huart1, sizeof(msg), delimiter);
 8001e5c:	f897 314f 	ldrb.w	r3, [r7, #335]	; 0x14f
 8001e60:	f507 7082 	add.w	r0, r7, #260	; 0x104
 8001e64:	2240      	movs	r2, #64	; 0x40
 8001e66:	4922      	ldr	r1, [pc, #136]	; (8001ef0 <uartDemoLoop+0xb4>)
 8001e68:	f7ff ff60 	bl	8001d2c <read_usart_message>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148

	if(count == 0){
 8001e72:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d103      	bne.n	8001e82 <uartDemoLoop+0x46>
		//While reading buffer of received chars, delimiter char was not encountered.
		printf("[UART demo] message not yet ready.\r\n");
 8001e7a:	481e      	ldr	r0, [pc, #120]	; (8001ef4 <uartDemoLoop+0xb8>)
 8001e7c:	f002 ff58 	bl	8004d30 <puts>
 8001e80:	e02e      	b.n	8001ee0 <uartDemoLoop+0xa4>
		return;
	}

	printf("[UART demo] message ready!\r\n");
 8001e82:	481d      	ldr	r0, [pc, #116]	; (8001ef8 <uartDemoLoop+0xbc>)
 8001e84:	f002 ff54 	bl	8004d30 <puts>

	msg[count-1] = 0; //null terminate received string
 8001e88:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8001e8c:	3b01      	subs	r3, #1
 8001e8e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001e92:	443b      	add	r3, r7
 8001e94:	2200      	movs	r2, #0
 8001e96:	f803 2c4c 	strb.w	r2, [r3, #-76]

	char reply[256];

	sprintf(reply, " Sending this as a buffer instead of printf just for demonstration. \n\r The message I got was \"%s\". \n\r", msg);
 8001e9a:	f507 7282 	add.w	r2, r7, #260	; 0x104
 8001e9e:	1d3b      	adds	r3, r7, #4
 8001ea0:	4916      	ldr	r1, [pc, #88]	; (8001efc <uartDemoLoop+0xc0>)
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f002 ff4c 	bl	8004d40 <siprintf>

	int ret = send_usart_message(reply, &huart1, strlen(reply));
 8001ea8:	1d3b      	adds	r3, r7, #4
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7fe f990 	bl	80001d0 <strlen>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	1d3b      	adds	r3, r7, #4
 8001eb6:	490e      	ldr	r1, [pc, #56]	; (8001ef0 <uartDemoLoop+0xb4>)
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7ff ff67 	bl	8001d8c <send_usart_message>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144

	if(ret == 0){
 8001ec4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d102      	bne.n	8001ed2 <uartDemoLoop+0x96>
		printf("[UART demo] Fail: Cannot transmit now, another transmission in progress.\n\r");
 8001ecc:	480c      	ldr	r0, [pc, #48]	; (8001f00 <uartDemoLoop+0xc4>)
 8001ece:	f002 fea9 	bl	8004c24 <iprintf>
	}

	HAL_Delay(500); //sleep for a bit so that next printf does not interfere with send_uart_message();
 8001ed2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ed6:	f000 f8b3 	bl	8002040 <HAL_Delay>

	printf("[UART demo] Success.\n\r");
 8001eda:	480a      	ldr	r0, [pc, #40]	; (8001f04 <uartDemoLoop+0xc8>)
 8001edc:	f002 fea2 	bl	8004c24 <iprintf>

}
 8001ee0:	f507 77a8 	add.w	r7, r7, #336	; 0x150
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	20002f5c 	.word	0x20002f5c
 8001eec:	08006034 	.word	0x08006034
 8001ef0:	20000258 	.word	0x20000258
 8001ef4:	08006088 	.word	0x08006088
 8001ef8:	080060ac 	.word	0x080060ac
 8001efc:	080060c8 	.word	0x080060c8
 8001f00:	08006130 	.word	0x08006130
 8001f04:	0800617c 	.word	0x0800617c

08001f08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001f08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f40 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f0c:	480d      	ldr	r0, [pc, #52]	; (8001f44 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f0e:	490e      	ldr	r1, [pc, #56]	; (8001f48 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f10:	4a0e      	ldr	r2, [pc, #56]	; (8001f4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f14:	e002      	b.n	8001f1c <LoopCopyDataInit>

08001f16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f1a:	3304      	adds	r3, #4

08001f1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f20:	d3f9      	bcc.n	8001f16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f22:	4a0b      	ldr	r2, [pc, #44]	; (8001f50 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f24:	4c0b      	ldr	r4, [pc, #44]	; (8001f54 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f28:	e001      	b.n	8001f2e <LoopFillZerobss>

08001f2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f2c:	3204      	adds	r2, #4

08001f2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f30:	d3fb      	bcc.n	8001f2a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001f32:	f7ff fd69 	bl	8001a08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f36:	f002 fe49 	bl	8004bcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f3a:	f7fe fe9d 	bl	8000c78 <main>
  bx  lr    
 8001f3e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001f40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f48:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001f4c:	0800625c 	.word	0x0800625c
  ldr r2, =_sbss
 8001f50:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001f54:	20002f74 	.word	0x20002f74

08001f58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f58:	e7fe      	b.n	8001f58 <ADC_IRQHandler>
	...

08001f5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f60:	4b0e      	ldr	r3, [pc, #56]	; (8001f9c <HAL_Init+0x40>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a0d      	ldr	r2, [pc, #52]	; (8001f9c <HAL_Init+0x40>)
 8001f66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f6c:	4b0b      	ldr	r3, [pc, #44]	; (8001f9c <HAL_Init+0x40>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a0a      	ldr	r2, [pc, #40]	; (8001f9c <HAL_Init+0x40>)
 8001f72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f78:	4b08      	ldr	r3, [pc, #32]	; (8001f9c <HAL_Init+0x40>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a07      	ldr	r2, [pc, #28]	; (8001f9c <HAL_Init+0x40>)
 8001f7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f84:	2003      	movs	r0, #3
 8001f86:	f000 f94f 	bl	8002228 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f8a:	2000      	movs	r0, #0
 8001f8c:	f000 f808 	bl	8001fa0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f90:	f7ff f964 	bl	800125c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	40023c00 	.word	0x40023c00

08001fa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fa8:	4b12      	ldr	r3, [pc, #72]	; (8001ff4 <HAL_InitTick+0x54>)
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	4b12      	ldr	r3, [pc, #72]	; (8001ff8 <HAL_InitTick+0x58>)
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f000 f967 	bl	8002292 <HAL_SYSTICK_Config>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e00e      	b.n	8001fec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2b0f      	cmp	r3, #15
 8001fd2:	d80a      	bhi.n	8001fea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	6879      	ldr	r1, [r7, #4]
 8001fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fdc:	f000 f92f 	bl	800223e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fe0:	4a06      	ldr	r2, [pc, #24]	; (8001ffc <HAL_InitTick+0x5c>)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	e000      	b.n	8001fec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3708      	adds	r7, #8
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	20000000 	.word	0x20000000
 8001ff8:	20000010 	.word	0x20000010
 8001ffc:	2000000c 	.word	0x2000000c

08002000 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002004:	4b06      	ldr	r3, [pc, #24]	; (8002020 <HAL_IncTick+0x20>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	461a      	mov	r2, r3
 800200a:	4b06      	ldr	r3, [pc, #24]	; (8002024 <HAL_IncTick+0x24>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4413      	add	r3, r2
 8002010:	4a04      	ldr	r2, [pc, #16]	; (8002024 <HAL_IncTick+0x24>)
 8002012:	6013      	str	r3, [r2, #0]
}
 8002014:	bf00      	nop
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	20000010 	.word	0x20000010
 8002024:	20002f60 	.word	0x20002f60

08002028 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  return uwTick;
 800202c:	4b03      	ldr	r3, [pc, #12]	; (800203c <HAL_GetTick+0x14>)
 800202e:	681b      	ldr	r3, [r3, #0]
}
 8002030:	4618      	mov	r0, r3
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	20002f60 	.word	0x20002f60

08002040 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002048:	f7ff ffee 	bl	8002028 <HAL_GetTick>
 800204c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002058:	d005      	beq.n	8002066 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800205a:	4b0a      	ldr	r3, [pc, #40]	; (8002084 <HAL_Delay+0x44>)
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	461a      	mov	r2, r3
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	4413      	add	r3, r2
 8002064:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002066:	bf00      	nop
 8002068:	f7ff ffde 	bl	8002028 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	68fa      	ldr	r2, [r7, #12]
 8002074:	429a      	cmp	r2, r3
 8002076:	d8f7      	bhi.n	8002068 <HAL_Delay+0x28>
  {
  }
}
 8002078:	bf00      	nop
 800207a:	bf00      	nop
 800207c:	3710      	adds	r7, #16
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	20000010 	.word	0x20000010

08002088 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002088:	b480      	push	{r7}
 800208a:	b085      	sub	sp, #20
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f003 0307 	and.w	r3, r3, #7
 8002096:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002098:	4b0c      	ldr	r3, [pc, #48]	; (80020cc <__NVIC_SetPriorityGrouping+0x44>)
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800209e:	68ba      	ldr	r2, [r7, #8]
 80020a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020a4:	4013      	ands	r3, r2
 80020a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020ba:	4a04      	ldr	r2, [pc, #16]	; (80020cc <__NVIC_SetPriorityGrouping+0x44>)
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	60d3      	str	r3, [r2, #12]
}
 80020c0:	bf00      	nop
 80020c2:	3714      	adds	r7, #20
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr
 80020cc:	e000ed00 	.word	0xe000ed00

080020d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020d4:	4b04      	ldr	r3, [pc, #16]	; (80020e8 <__NVIC_GetPriorityGrouping+0x18>)
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	0a1b      	lsrs	r3, r3, #8
 80020da:	f003 0307 	and.w	r3, r3, #7
}
 80020de:	4618      	mov	r0, r3
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr
 80020e8:	e000ed00 	.word	0xe000ed00

080020ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	4603      	mov	r3, r0
 80020f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	db0b      	blt.n	8002116 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020fe:	79fb      	ldrb	r3, [r7, #7]
 8002100:	f003 021f 	and.w	r2, r3, #31
 8002104:	4907      	ldr	r1, [pc, #28]	; (8002124 <__NVIC_EnableIRQ+0x38>)
 8002106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800210a:	095b      	lsrs	r3, r3, #5
 800210c:	2001      	movs	r0, #1
 800210e:	fa00 f202 	lsl.w	r2, r0, r2
 8002112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002116:	bf00      	nop
 8002118:	370c      	adds	r7, #12
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	e000e100 	.word	0xe000e100

08002128 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	4603      	mov	r3, r0
 8002130:	6039      	str	r1, [r7, #0]
 8002132:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002138:	2b00      	cmp	r3, #0
 800213a:	db0a      	blt.n	8002152 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	b2da      	uxtb	r2, r3
 8002140:	490c      	ldr	r1, [pc, #48]	; (8002174 <__NVIC_SetPriority+0x4c>)
 8002142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002146:	0112      	lsls	r2, r2, #4
 8002148:	b2d2      	uxtb	r2, r2
 800214a:	440b      	add	r3, r1
 800214c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002150:	e00a      	b.n	8002168 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	b2da      	uxtb	r2, r3
 8002156:	4908      	ldr	r1, [pc, #32]	; (8002178 <__NVIC_SetPriority+0x50>)
 8002158:	79fb      	ldrb	r3, [r7, #7]
 800215a:	f003 030f 	and.w	r3, r3, #15
 800215e:	3b04      	subs	r3, #4
 8002160:	0112      	lsls	r2, r2, #4
 8002162:	b2d2      	uxtb	r2, r2
 8002164:	440b      	add	r3, r1
 8002166:	761a      	strb	r2, [r3, #24]
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr
 8002174:	e000e100 	.word	0xe000e100
 8002178:	e000ed00 	.word	0xe000ed00

0800217c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800217c:	b480      	push	{r7}
 800217e:	b089      	sub	sp, #36	; 0x24
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	60b9      	str	r1, [r7, #8]
 8002186:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f003 0307 	and.w	r3, r3, #7
 800218e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	f1c3 0307 	rsb	r3, r3, #7
 8002196:	2b04      	cmp	r3, #4
 8002198:	bf28      	it	cs
 800219a:	2304      	movcs	r3, #4
 800219c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	3304      	adds	r3, #4
 80021a2:	2b06      	cmp	r3, #6
 80021a4:	d902      	bls.n	80021ac <NVIC_EncodePriority+0x30>
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	3b03      	subs	r3, #3
 80021aa:	e000      	b.n	80021ae <NVIC_EncodePriority+0x32>
 80021ac:	2300      	movs	r3, #0
 80021ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b0:	f04f 32ff 	mov.w	r2, #4294967295
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ba:	43da      	mvns	r2, r3
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	401a      	ands	r2, r3
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021c4:	f04f 31ff 	mov.w	r1, #4294967295
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	fa01 f303 	lsl.w	r3, r1, r3
 80021ce:	43d9      	mvns	r1, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021d4:	4313      	orrs	r3, r2
         );
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3724      	adds	r7, #36	; 0x24
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
	...

080021e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	3b01      	subs	r3, #1
 80021f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021f4:	d301      	bcc.n	80021fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021f6:	2301      	movs	r3, #1
 80021f8:	e00f      	b.n	800221a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021fa:	4a0a      	ldr	r2, [pc, #40]	; (8002224 <SysTick_Config+0x40>)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	3b01      	subs	r3, #1
 8002200:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002202:	210f      	movs	r1, #15
 8002204:	f04f 30ff 	mov.w	r0, #4294967295
 8002208:	f7ff ff8e 	bl	8002128 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800220c:	4b05      	ldr	r3, [pc, #20]	; (8002224 <SysTick_Config+0x40>)
 800220e:	2200      	movs	r2, #0
 8002210:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002212:	4b04      	ldr	r3, [pc, #16]	; (8002224 <SysTick_Config+0x40>)
 8002214:	2207      	movs	r2, #7
 8002216:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002218:	2300      	movs	r3, #0
}
 800221a:	4618      	mov	r0, r3
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	e000e010 	.word	0xe000e010

08002228 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f7ff ff29 	bl	8002088 <__NVIC_SetPriorityGrouping>
}
 8002236:	bf00      	nop
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}

0800223e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800223e:	b580      	push	{r7, lr}
 8002240:	b086      	sub	sp, #24
 8002242:	af00      	add	r7, sp, #0
 8002244:	4603      	mov	r3, r0
 8002246:	60b9      	str	r1, [r7, #8]
 8002248:	607a      	str	r2, [r7, #4]
 800224a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800224c:	2300      	movs	r3, #0
 800224e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002250:	f7ff ff3e 	bl	80020d0 <__NVIC_GetPriorityGrouping>
 8002254:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	68b9      	ldr	r1, [r7, #8]
 800225a:	6978      	ldr	r0, [r7, #20]
 800225c:	f7ff ff8e 	bl	800217c <NVIC_EncodePriority>
 8002260:	4602      	mov	r2, r0
 8002262:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002266:	4611      	mov	r1, r2
 8002268:	4618      	mov	r0, r3
 800226a:	f7ff ff5d 	bl	8002128 <__NVIC_SetPriority>
}
 800226e:	bf00      	nop
 8002270:	3718      	adds	r7, #24
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002276:	b580      	push	{r7, lr}
 8002278:	b082      	sub	sp, #8
 800227a:	af00      	add	r7, sp, #0
 800227c:	4603      	mov	r3, r0
 800227e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002284:	4618      	mov	r0, r3
 8002286:	f7ff ff31 	bl	80020ec <__NVIC_EnableIRQ>
}
 800228a:	bf00      	nop
 800228c:	3708      	adds	r7, #8
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}

08002292 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002292:	b580      	push	{r7, lr}
 8002294:	b082      	sub	sp, #8
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f7ff ffa2 	bl	80021e4 <SysTick_Config>
 80022a0:	4603      	mov	r3, r0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
	...

080022ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b086      	sub	sp, #24
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80022b4:	2300      	movs	r3, #0
 80022b6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80022b8:	f7ff feb6 	bl	8002028 <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d101      	bne.n	80022c8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e099      	b.n	80023fc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2202      	movs	r2, #2
 80022cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f022 0201 	bic.w	r2, r2, #1
 80022e6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022e8:	e00f      	b.n	800230a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022ea:	f7ff fe9d 	bl	8002028 <HAL_GetTick>
 80022ee:	4602      	mov	r2, r0
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	2b05      	cmp	r3, #5
 80022f6:	d908      	bls.n	800230a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2220      	movs	r2, #32
 80022fc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2203      	movs	r2, #3
 8002302:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e078      	b.n	80023fc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0301 	and.w	r3, r3, #1
 8002314:	2b00      	cmp	r3, #0
 8002316:	d1e8      	bne.n	80022ea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002320:	697a      	ldr	r2, [r7, #20]
 8002322:	4b38      	ldr	r3, [pc, #224]	; (8002404 <HAL_DMA_Init+0x158>)
 8002324:	4013      	ands	r3, r2
 8002326:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685a      	ldr	r2, [r3, #4]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002336:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002342:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800234e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6a1b      	ldr	r3, [r3, #32]
 8002354:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002356:	697a      	ldr	r2, [r7, #20]
 8002358:	4313      	orrs	r3, r2
 800235a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002360:	2b04      	cmp	r3, #4
 8002362:	d107      	bne.n	8002374 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236c:	4313      	orrs	r3, r2
 800236e:	697a      	ldr	r2, [r7, #20]
 8002370:	4313      	orrs	r3, r2
 8002372:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	697a      	ldr	r2, [r7, #20]
 800237a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	695b      	ldr	r3, [r3, #20]
 8002382:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	f023 0307 	bic.w	r3, r3, #7
 800238a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002390:	697a      	ldr	r2, [r7, #20]
 8002392:	4313      	orrs	r3, r2
 8002394:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239a:	2b04      	cmp	r3, #4
 800239c:	d117      	bne.n	80023ce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a2:	697a      	ldr	r2, [r7, #20]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d00e      	beq.n	80023ce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f000 fa7b 	bl	80028ac <DMA_CheckFifoParam>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d008      	beq.n	80023ce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2240      	movs	r2, #64	; 0x40
 80023c0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2201      	movs	r2, #1
 80023c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80023ca:	2301      	movs	r3, #1
 80023cc:	e016      	b.n	80023fc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	697a      	ldr	r2, [r7, #20]
 80023d4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f000 fa32 	bl	8002840 <DMA_CalcBaseAndBitshift>
 80023dc:	4603      	mov	r3, r0
 80023de:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023e4:	223f      	movs	r2, #63	; 0x3f
 80023e6:	409a      	lsls	r2, r3
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2201      	movs	r2, #1
 80023f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80023fa:	2300      	movs	r3, #0
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3718      	adds	r7, #24
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	f010803f 	.word	0xf010803f

08002408 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002414:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002416:	f7ff fe07 	bl	8002028 <HAL_GetTick>
 800241a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002422:	b2db      	uxtb	r3, r3
 8002424:	2b02      	cmp	r3, #2
 8002426:	d008      	beq.n	800243a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2280      	movs	r2, #128	; 0x80
 800242c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e052      	b.n	80024e0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f022 0216 	bic.w	r2, r2, #22
 8002448:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	695a      	ldr	r2, [r3, #20]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002458:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245e:	2b00      	cmp	r3, #0
 8002460:	d103      	bne.n	800246a <HAL_DMA_Abort+0x62>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002466:	2b00      	cmp	r3, #0
 8002468:	d007      	beq.n	800247a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f022 0208 	bic.w	r2, r2, #8
 8002478:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f022 0201 	bic.w	r2, r2, #1
 8002488:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800248a:	e013      	b.n	80024b4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800248c:	f7ff fdcc 	bl	8002028 <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b05      	cmp	r3, #5
 8002498:	d90c      	bls.n	80024b4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2220      	movs	r2, #32
 800249e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2203      	movs	r2, #3
 80024a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e015      	b.n	80024e0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d1e4      	bne.n	800248c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024c6:	223f      	movs	r2, #63	; 0x3f
 80024c8:	409a      	lsls	r2, r3
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2201      	movs	r2, #1
 80024d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80024de:	2300      	movs	r3, #0
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3710      	adds	r7, #16
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d004      	beq.n	8002506 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2280      	movs	r2, #128	; 0x80
 8002500:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e00c      	b.n	8002520 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2205      	movs	r2, #5
 800250a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f022 0201 	bic.w	r2, r2, #1
 800251c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800251e:	2300      	movs	r3, #0
}
 8002520:	4618      	mov	r0, r3
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b086      	sub	sp, #24
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002534:	2300      	movs	r3, #0
 8002536:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002538:	4b8e      	ldr	r3, [pc, #568]	; (8002774 <HAL_DMA_IRQHandler+0x248>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a8e      	ldr	r2, [pc, #568]	; (8002778 <HAL_DMA_IRQHandler+0x24c>)
 800253e:	fba2 2303 	umull	r2, r3, r2, r3
 8002542:	0a9b      	lsrs	r3, r3, #10
 8002544:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800254a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002556:	2208      	movs	r2, #8
 8002558:	409a      	lsls	r2, r3
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	4013      	ands	r3, r2
 800255e:	2b00      	cmp	r3, #0
 8002560:	d01a      	beq.n	8002598 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0304 	and.w	r3, r3, #4
 800256c:	2b00      	cmp	r3, #0
 800256e:	d013      	beq.n	8002598 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f022 0204 	bic.w	r2, r2, #4
 800257e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002584:	2208      	movs	r2, #8
 8002586:	409a      	lsls	r2, r3
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002590:	f043 0201 	orr.w	r2, r3, #1
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800259c:	2201      	movs	r2, #1
 800259e:	409a      	lsls	r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	4013      	ands	r3, r2
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d012      	beq.n	80025ce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	695b      	ldr	r3, [r3, #20]
 80025ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d00b      	beq.n	80025ce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ba:	2201      	movs	r2, #1
 80025bc:	409a      	lsls	r2, r3
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025c6:	f043 0202 	orr.w	r2, r3, #2
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025d2:	2204      	movs	r2, #4
 80025d4:	409a      	lsls	r2, r3
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	4013      	ands	r3, r2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d012      	beq.n	8002604 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0302 	and.w	r3, r3, #2
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d00b      	beq.n	8002604 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025f0:	2204      	movs	r2, #4
 80025f2:	409a      	lsls	r2, r3
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025fc:	f043 0204 	orr.w	r2, r3, #4
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002608:	2210      	movs	r2, #16
 800260a:	409a      	lsls	r2, r3
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	4013      	ands	r3, r2
 8002610:	2b00      	cmp	r3, #0
 8002612:	d043      	beq.n	800269c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0308 	and.w	r3, r3, #8
 800261e:	2b00      	cmp	r3, #0
 8002620:	d03c      	beq.n	800269c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002626:	2210      	movs	r2, #16
 8002628:	409a      	lsls	r2, r3
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d018      	beq.n	800266e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d108      	bne.n	800265c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264e:	2b00      	cmp	r3, #0
 8002650:	d024      	beq.n	800269c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	4798      	blx	r3
 800265a:	e01f      	b.n	800269c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002660:	2b00      	cmp	r3, #0
 8002662:	d01b      	beq.n	800269c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	4798      	blx	r3
 800266c:	e016      	b.n	800269c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002678:	2b00      	cmp	r3, #0
 800267a:	d107      	bne.n	800268c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f022 0208 	bic.w	r2, r2, #8
 800268a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002690:	2b00      	cmp	r3, #0
 8002692:	d003      	beq.n	800269c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026a0:	2220      	movs	r2, #32
 80026a2:	409a      	lsls	r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	4013      	ands	r3, r2
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	f000 808f 	beq.w	80027cc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0310 	and.w	r3, r3, #16
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	f000 8087 	beq.w	80027cc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026c2:	2220      	movs	r2, #32
 80026c4:	409a      	lsls	r2, r3
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	2b05      	cmp	r3, #5
 80026d4:	d136      	bne.n	8002744 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f022 0216 	bic.w	r2, r2, #22
 80026e4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	695a      	ldr	r2, [r3, #20]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026f4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d103      	bne.n	8002706 <HAL_DMA_IRQHandler+0x1da>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002702:	2b00      	cmp	r3, #0
 8002704:	d007      	beq.n	8002716 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f022 0208 	bic.w	r2, r2, #8
 8002714:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800271a:	223f      	movs	r2, #63	; 0x3f
 800271c:	409a      	lsls	r2, r3
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2201      	movs	r2, #1
 8002726:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002736:	2b00      	cmp	r3, #0
 8002738:	d07e      	beq.n	8002838 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	4798      	blx	r3
        }
        return;
 8002742:	e079      	b.n	8002838 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d01d      	beq.n	800278e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d10d      	bne.n	800277c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002764:	2b00      	cmp	r3, #0
 8002766:	d031      	beq.n	80027cc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	4798      	blx	r3
 8002770:	e02c      	b.n	80027cc <HAL_DMA_IRQHandler+0x2a0>
 8002772:	bf00      	nop
 8002774:	20000000 	.word	0x20000000
 8002778:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002780:	2b00      	cmp	r3, #0
 8002782:	d023      	beq.n	80027cc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	4798      	blx	r3
 800278c:	e01e      	b.n	80027cc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002798:	2b00      	cmp	r3, #0
 800279a:	d10f      	bne.n	80027bc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f022 0210 	bic.w	r2, r2, #16
 80027aa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d003      	beq.n	80027cc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d032      	beq.n	800283a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027d8:	f003 0301 	and.w	r3, r3, #1
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d022      	beq.n	8002826 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2205      	movs	r2, #5
 80027e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f022 0201 	bic.w	r2, r2, #1
 80027f6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	3301      	adds	r3, #1
 80027fc:	60bb      	str	r3, [r7, #8]
 80027fe:	697a      	ldr	r2, [r7, #20]
 8002800:	429a      	cmp	r2, r3
 8002802:	d307      	bcc.n	8002814 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0301 	and.w	r3, r3, #1
 800280e:	2b00      	cmp	r3, #0
 8002810:	d1f2      	bne.n	80027f8 <HAL_DMA_IRQHandler+0x2cc>
 8002812:	e000      	b.n	8002816 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002814:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2201      	movs	r2, #1
 800281a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800282a:	2b00      	cmp	r3, #0
 800282c:	d005      	beq.n	800283a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	4798      	blx	r3
 8002836:	e000      	b.n	800283a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002838:	bf00      	nop
    }
  }
}
 800283a:	3718      	adds	r7, #24
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002840:	b480      	push	{r7}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	b2db      	uxtb	r3, r3
 800284e:	3b10      	subs	r3, #16
 8002850:	4a14      	ldr	r2, [pc, #80]	; (80028a4 <DMA_CalcBaseAndBitshift+0x64>)
 8002852:	fba2 2303 	umull	r2, r3, r2, r3
 8002856:	091b      	lsrs	r3, r3, #4
 8002858:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800285a:	4a13      	ldr	r2, [pc, #76]	; (80028a8 <DMA_CalcBaseAndBitshift+0x68>)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	4413      	add	r3, r2
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	461a      	mov	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2b03      	cmp	r3, #3
 800286c:	d909      	bls.n	8002882 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002876:	f023 0303 	bic.w	r3, r3, #3
 800287a:	1d1a      	adds	r2, r3, #4
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	659a      	str	r2, [r3, #88]	; 0x58
 8002880:	e007      	b.n	8002892 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800288a:	f023 0303 	bic.w	r3, r3, #3
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002896:	4618      	mov	r0, r3
 8002898:	3714      	adds	r7, #20
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	aaaaaaab 	.word	0xaaaaaaab
 80028a8:	080061ac 	.word	0x080061ac

080028ac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028b4:	2300      	movs	r3, #0
 80028b6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028bc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d11f      	bne.n	8002906 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	2b03      	cmp	r3, #3
 80028ca:	d856      	bhi.n	800297a <DMA_CheckFifoParam+0xce>
 80028cc:	a201      	add	r2, pc, #4	; (adr r2, 80028d4 <DMA_CheckFifoParam+0x28>)
 80028ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028d2:	bf00      	nop
 80028d4:	080028e5 	.word	0x080028e5
 80028d8:	080028f7 	.word	0x080028f7
 80028dc:	080028e5 	.word	0x080028e5
 80028e0:	0800297b 	.word	0x0800297b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d046      	beq.n	800297e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028f4:	e043      	b.n	800297e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028fa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80028fe:	d140      	bne.n	8002982 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002904:	e03d      	b.n	8002982 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	699b      	ldr	r3, [r3, #24]
 800290a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800290e:	d121      	bne.n	8002954 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	2b03      	cmp	r3, #3
 8002914:	d837      	bhi.n	8002986 <DMA_CheckFifoParam+0xda>
 8002916:	a201      	add	r2, pc, #4	; (adr r2, 800291c <DMA_CheckFifoParam+0x70>)
 8002918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800291c:	0800292d 	.word	0x0800292d
 8002920:	08002933 	.word	0x08002933
 8002924:	0800292d 	.word	0x0800292d
 8002928:	08002945 	.word	0x08002945
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	73fb      	strb	r3, [r7, #15]
      break;
 8002930:	e030      	b.n	8002994 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002936:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d025      	beq.n	800298a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002942:	e022      	b.n	800298a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002948:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800294c:	d11f      	bne.n	800298e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002952:	e01c      	b.n	800298e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	2b02      	cmp	r3, #2
 8002958:	d903      	bls.n	8002962 <DMA_CheckFifoParam+0xb6>
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	2b03      	cmp	r3, #3
 800295e:	d003      	beq.n	8002968 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002960:	e018      	b.n	8002994 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	73fb      	strb	r3, [r7, #15]
      break;
 8002966:	e015      	b.n	8002994 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800296c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d00e      	beq.n	8002992 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	73fb      	strb	r3, [r7, #15]
      break;
 8002978:	e00b      	b.n	8002992 <DMA_CheckFifoParam+0xe6>
      break;
 800297a:	bf00      	nop
 800297c:	e00a      	b.n	8002994 <DMA_CheckFifoParam+0xe8>
      break;
 800297e:	bf00      	nop
 8002980:	e008      	b.n	8002994 <DMA_CheckFifoParam+0xe8>
      break;
 8002982:	bf00      	nop
 8002984:	e006      	b.n	8002994 <DMA_CheckFifoParam+0xe8>
      break;
 8002986:	bf00      	nop
 8002988:	e004      	b.n	8002994 <DMA_CheckFifoParam+0xe8>
      break;
 800298a:	bf00      	nop
 800298c:	e002      	b.n	8002994 <DMA_CheckFifoParam+0xe8>
      break;   
 800298e:	bf00      	nop
 8002990:	e000      	b.n	8002994 <DMA_CheckFifoParam+0xe8>
      break;
 8002992:	bf00      	nop
    }
  } 
  
  return status; 
 8002994:	7bfb      	ldrb	r3, [r7, #15]
}
 8002996:	4618      	mov	r0, r3
 8002998:	3714      	adds	r7, #20
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop

080029a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b089      	sub	sp, #36	; 0x24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029ae:	2300      	movs	r3, #0
 80029b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029b2:	2300      	movs	r3, #0
 80029b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029b6:	2300      	movs	r3, #0
 80029b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029ba:	2300      	movs	r3, #0
 80029bc:	61fb      	str	r3, [r7, #28]
 80029be:	e16b      	b.n	8002c98 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029c0:	2201      	movs	r2, #1
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	697a      	ldr	r2, [r7, #20]
 80029d0:	4013      	ands	r3, r2
 80029d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029d4:	693a      	ldr	r2, [r7, #16]
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	429a      	cmp	r2, r3
 80029da:	f040 815a 	bne.w	8002c92 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f003 0303 	and.w	r3, r3, #3
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d005      	beq.n	80029f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d130      	bne.n	8002a58 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	005b      	lsls	r3, r3, #1
 8002a00:	2203      	movs	r2, #3
 8002a02:	fa02 f303 	lsl.w	r3, r2, r3
 8002a06:	43db      	mvns	r3, r3
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	68da      	ldr	r2, [r3, #12]
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	005b      	lsls	r3, r3, #1
 8002a16:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1a:	69ba      	ldr	r2, [r7, #24]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	69ba      	ldr	r2, [r7, #24]
 8002a24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	fa02 f303 	lsl.w	r3, r2, r3
 8002a34:	43db      	mvns	r3, r3
 8002a36:	69ba      	ldr	r2, [r7, #24]
 8002a38:	4013      	ands	r3, r2
 8002a3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	091b      	lsrs	r3, r3, #4
 8002a42:	f003 0201 	and.w	r2, r3, #1
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f003 0303 	and.w	r3, r3, #3
 8002a60:	2b03      	cmp	r3, #3
 8002a62:	d017      	beq.n	8002a94 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	2203      	movs	r2, #3
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	43db      	mvns	r3, r3
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	4013      	ands	r3, r2
 8002a7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	689a      	ldr	r2, [r3, #8]
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	005b      	lsls	r3, r3, #1
 8002a84:	fa02 f303 	lsl.w	r3, r2, r3
 8002a88:	69ba      	ldr	r2, [r7, #24]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f003 0303 	and.w	r3, r3, #3
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d123      	bne.n	8002ae8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	08da      	lsrs	r2, r3, #3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	3208      	adds	r2, #8
 8002aa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002aac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	f003 0307 	and.w	r3, r3, #7
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	220f      	movs	r2, #15
 8002ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8002abc:	43db      	mvns	r3, r3
 8002abe:	69ba      	ldr	r2, [r7, #24]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	691a      	ldr	r2, [r3, #16]
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	f003 0307 	and.w	r3, r3, #7
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	08da      	lsrs	r2, r3, #3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	3208      	adds	r2, #8
 8002ae2:	69b9      	ldr	r1, [r7, #24]
 8002ae4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	005b      	lsls	r3, r3, #1
 8002af2:	2203      	movs	r2, #3
 8002af4:	fa02 f303 	lsl.w	r3, r2, r3
 8002af8:	43db      	mvns	r3, r3
 8002afa:	69ba      	ldr	r2, [r7, #24]
 8002afc:	4013      	ands	r3, r2
 8002afe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f003 0203 	and.w	r2, r3, #3
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	005b      	lsls	r3, r3, #1
 8002b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	f000 80b4 	beq.w	8002c92 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	60fb      	str	r3, [r7, #12]
 8002b2e:	4b60      	ldr	r3, [pc, #384]	; (8002cb0 <HAL_GPIO_Init+0x30c>)
 8002b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b32:	4a5f      	ldr	r2, [pc, #380]	; (8002cb0 <HAL_GPIO_Init+0x30c>)
 8002b34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b38:	6453      	str	r3, [r2, #68]	; 0x44
 8002b3a:	4b5d      	ldr	r3, [pc, #372]	; (8002cb0 <HAL_GPIO_Init+0x30c>)
 8002b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b42:	60fb      	str	r3, [r7, #12]
 8002b44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b46:	4a5b      	ldr	r2, [pc, #364]	; (8002cb4 <HAL_GPIO_Init+0x310>)
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	089b      	lsrs	r3, r3, #2
 8002b4c:	3302      	adds	r3, #2
 8002b4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	f003 0303 	and.w	r3, r3, #3
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	220f      	movs	r2, #15
 8002b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b62:	43db      	mvns	r3, r3
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	4013      	ands	r3, r2
 8002b68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a52      	ldr	r2, [pc, #328]	; (8002cb8 <HAL_GPIO_Init+0x314>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d02b      	beq.n	8002bca <HAL_GPIO_Init+0x226>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a51      	ldr	r2, [pc, #324]	; (8002cbc <HAL_GPIO_Init+0x318>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d025      	beq.n	8002bc6 <HAL_GPIO_Init+0x222>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a50      	ldr	r2, [pc, #320]	; (8002cc0 <HAL_GPIO_Init+0x31c>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d01f      	beq.n	8002bc2 <HAL_GPIO_Init+0x21e>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a4f      	ldr	r2, [pc, #316]	; (8002cc4 <HAL_GPIO_Init+0x320>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d019      	beq.n	8002bbe <HAL_GPIO_Init+0x21a>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a4e      	ldr	r2, [pc, #312]	; (8002cc8 <HAL_GPIO_Init+0x324>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d013      	beq.n	8002bba <HAL_GPIO_Init+0x216>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a4d      	ldr	r2, [pc, #308]	; (8002ccc <HAL_GPIO_Init+0x328>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d00d      	beq.n	8002bb6 <HAL_GPIO_Init+0x212>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a4c      	ldr	r2, [pc, #304]	; (8002cd0 <HAL_GPIO_Init+0x32c>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d007      	beq.n	8002bb2 <HAL_GPIO_Init+0x20e>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4a4b      	ldr	r2, [pc, #300]	; (8002cd4 <HAL_GPIO_Init+0x330>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d101      	bne.n	8002bae <HAL_GPIO_Init+0x20a>
 8002baa:	2307      	movs	r3, #7
 8002bac:	e00e      	b.n	8002bcc <HAL_GPIO_Init+0x228>
 8002bae:	2308      	movs	r3, #8
 8002bb0:	e00c      	b.n	8002bcc <HAL_GPIO_Init+0x228>
 8002bb2:	2306      	movs	r3, #6
 8002bb4:	e00a      	b.n	8002bcc <HAL_GPIO_Init+0x228>
 8002bb6:	2305      	movs	r3, #5
 8002bb8:	e008      	b.n	8002bcc <HAL_GPIO_Init+0x228>
 8002bba:	2304      	movs	r3, #4
 8002bbc:	e006      	b.n	8002bcc <HAL_GPIO_Init+0x228>
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e004      	b.n	8002bcc <HAL_GPIO_Init+0x228>
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	e002      	b.n	8002bcc <HAL_GPIO_Init+0x228>
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e000      	b.n	8002bcc <HAL_GPIO_Init+0x228>
 8002bca:	2300      	movs	r3, #0
 8002bcc:	69fa      	ldr	r2, [r7, #28]
 8002bce:	f002 0203 	and.w	r2, r2, #3
 8002bd2:	0092      	lsls	r2, r2, #2
 8002bd4:	4093      	lsls	r3, r2
 8002bd6:	69ba      	ldr	r2, [r7, #24]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bdc:	4935      	ldr	r1, [pc, #212]	; (8002cb4 <HAL_GPIO_Init+0x310>)
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	089b      	lsrs	r3, r3, #2
 8002be2:	3302      	adds	r3, #2
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bea:	4b3b      	ldr	r3, [pc, #236]	; (8002cd8 <HAL_GPIO_Init+0x334>)
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	43db      	mvns	r3, r3
 8002bf4:	69ba      	ldr	r2, [r7, #24]
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d003      	beq.n	8002c0e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002c06:	69ba      	ldr	r2, [r7, #24]
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c0e:	4a32      	ldr	r2, [pc, #200]	; (8002cd8 <HAL_GPIO_Init+0x334>)
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c14:	4b30      	ldr	r3, [pc, #192]	; (8002cd8 <HAL_GPIO_Init+0x334>)
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	43db      	mvns	r3, r3
 8002c1e:	69ba      	ldr	r2, [r7, #24]
 8002c20:	4013      	ands	r3, r2
 8002c22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d003      	beq.n	8002c38 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c38:	4a27      	ldr	r2, [pc, #156]	; (8002cd8 <HAL_GPIO_Init+0x334>)
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c3e:	4b26      	ldr	r3, [pc, #152]	; (8002cd8 <HAL_GPIO_Init+0x334>)
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	43db      	mvns	r3, r3
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d003      	beq.n	8002c62 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002c5a:	69ba      	ldr	r2, [r7, #24]
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c62:	4a1d      	ldr	r2, [pc, #116]	; (8002cd8 <HAL_GPIO_Init+0x334>)
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c68:	4b1b      	ldr	r3, [pc, #108]	; (8002cd8 <HAL_GPIO_Init+0x334>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	43db      	mvns	r3, r3
 8002c72:	69ba      	ldr	r2, [r7, #24]
 8002c74:	4013      	ands	r3, r2
 8002c76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d003      	beq.n	8002c8c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c8c:	4a12      	ldr	r2, [pc, #72]	; (8002cd8 <HAL_GPIO_Init+0x334>)
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	3301      	adds	r3, #1
 8002c96:	61fb      	str	r3, [r7, #28]
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	2b0f      	cmp	r3, #15
 8002c9c:	f67f ae90 	bls.w	80029c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ca0:	bf00      	nop
 8002ca2:	bf00      	nop
 8002ca4:	3724      	adds	r7, #36	; 0x24
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	40023800 	.word	0x40023800
 8002cb4:	40013800 	.word	0x40013800
 8002cb8:	40020000 	.word	0x40020000
 8002cbc:	40020400 	.word	0x40020400
 8002cc0:	40020800 	.word	0x40020800
 8002cc4:	40020c00 	.word	0x40020c00
 8002cc8:	40021000 	.word	0x40021000
 8002ccc:	40021400 	.word	0x40021400
 8002cd0:	40021800 	.word	0x40021800
 8002cd4:	40021c00 	.word	0x40021c00
 8002cd8:	40013c00 	.word	0x40013c00

08002cdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	807b      	strh	r3, [r7, #2]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cec:	787b      	ldrb	r3, [r7, #1]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d003      	beq.n	8002cfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cf2:	887a      	ldrh	r2, [r7, #2]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002cf8:	e003      	b.n	8002d02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002cfa:	887b      	ldrh	r3, [r7, #2]
 8002cfc:	041a      	lsls	r2, r3, #16
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	619a      	str	r2, [r3, #24]
}
 8002d02:	bf00      	nop
 8002d04:	370c      	adds	r7, #12
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
	...

08002d10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d101      	bne.n	8002d22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e12b      	b.n	8002f7a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d106      	bne.n	8002d3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f7fe fab8 	bl	80012ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2224      	movs	r2, #36	; 0x24
 8002d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f022 0201 	bic.w	r2, r2, #1
 8002d52:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d62:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d72:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d74:	f000 fd40 	bl	80037f8 <HAL_RCC_GetPCLK1Freq>
 8002d78:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	4a81      	ldr	r2, [pc, #516]	; (8002f84 <HAL_I2C_Init+0x274>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d807      	bhi.n	8002d94 <HAL_I2C_Init+0x84>
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	4a80      	ldr	r2, [pc, #512]	; (8002f88 <HAL_I2C_Init+0x278>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	bf94      	ite	ls
 8002d8c:	2301      	movls	r3, #1
 8002d8e:	2300      	movhi	r3, #0
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	e006      	b.n	8002da2 <HAL_I2C_Init+0x92>
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	4a7d      	ldr	r2, [pc, #500]	; (8002f8c <HAL_I2C_Init+0x27c>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	bf94      	ite	ls
 8002d9c:	2301      	movls	r3, #1
 8002d9e:	2300      	movhi	r3, #0
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d001      	beq.n	8002daa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e0e7      	b.n	8002f7a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	4a78      	ldr	r2, [pc, #480]	; (8002f90 <HAL_I2C_Init+0x280>)
 8002dae:	fba2 2303 	umull	r2, r3, r2, r3
 8002db2:	0c9b      	lsrs	r3, r3, #18
 8002db4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68ba      	ldr	r2, [r7, #8]
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	6a1b      	ldr	r3, [r3, #32]
 8002dd0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	4a6a      	ldr	r2, [pc, #424]	; (8002f84 <HAL_I2C_Init+0x274>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d802      	bhi.n	8002de4 <HAL_I2C_Init+0xd4>
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	3301      	adds	r3, #1
 8002de2:	e009      	b.n	8002df8 <HAL_I2C_Init+0xe8>
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002dea:	fb02 f303 	mul.w	r3, r2, r3
 8002dee:	4a69      	ldr	r2, [pc, #420]	; (8002f94 <HAL_I2C_Init+0x284>)
 8002df0:	fba2 2303 	umull	r2, r3, r2, r3
 8002df4:	099b      	lsrs	r3, r3, #6
 8002df6:	3301      	adds	r3, #1
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	6812      	ldr	r2, [r2, #0]
 8002dfc:	430b      	orrs	r3, r1
 8002dfe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	69db      	ldr	r3, [r3, #28]
 8002e06:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e0a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	495c      	ldr	r1, [pc, #368]	; (8002f84 <HAL_I2C_Init+0x274>)
 8002e14:	428b      	cmp	r3, r1
 8002e16:	d819      	bhi.n	8002e4c <HAL_I2C_Init+0x13c>
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	1e59      	subs	r1, r3, #1
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	005b      	lsls	r3, r3, #1
 8002e22:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e26:	1c59      	adds	r1, r3, #1
 8002e28:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002e2c:	400b      	ands	r3, r1
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d00a      	beq.n	8002e48 <HAL_I2C_Init+0x138>
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	1e59      	subs	r1, r3, #1
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e40:	3301      	adds	r3, #1
 8002e42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e46:	e051      	b.n	8002eec <HAL_I2C_Init+0x1dc>
 8002e48:	2304      	movs	r3, #4
 8002e4a:	e04f      	b.n	8002eec <HAL_I2C_Init+0x1dc>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d111      	bne.n	8002e78 <HAL_I2C_Init+0x168>
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	1e58      	subs	r0, r3, #1
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6859      	ldr	r1, [r3, #4]
 8002e5c:	460b      	mov	r3, r1
 8002e5e:	005b      	lsls	r3, r3, #1
 8002e60:	440b      	add	r3, r1
 8002e62:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e66:	3301      	adds	r3, #1
 8002e68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	bf0c      	ite	eq
 8002e70:	2301      	moveq	r3, #1
 8002e72:	2300      	movne	r3, #0
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	e012      	b.n	8002e9e <HAL_I2C_Init+0x18e>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	1e58      	subs	r0, r3, #1
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6859      	ldr	r1, [r3, #4]
 8002e80:	460b      	mov	r3, r1
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	440b      	add	r3, r1
 8002e86:	0099      	lsls	r1, r3, #2
 8002e88:	440b      	add	r3, r1
 8002e8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e8e:	3301      	adds	r3, #1
 8002e90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	bf0c      	ite	eq
 8002e98:	2301      	moveq	r3, #1
 8002e9a:	2300      	movne	r3, #0
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d001      	beq.n	8002ea6 <HAL_I2C_Init+0x196>
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e022      	b.n	8002eec <HAL_I2C_Init+0x1dc>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d10e      	bne.n	8002ecc <HAL_I2C_Init+0x1bc>
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	1e58      	subs	r0, r3, #1
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6859      	ldr	r1, [r3, #4]
 8002eb6:	460b      	mov	r3, r1
 8002eb8:	005b      	lsls	r3, r3, #1
 8002eba:	440b      	add	r3, r1
 8002ebc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ec6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002eca:	e00f      	b.n	8002eec <HAL_I2C_Init+0x1dc>
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	1e58      	subs	r0, r3, #1
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6859      	ldr	r1, [r3, #4]
 8002ed4:	460b      	mov	r3, r1
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	440b      	add	r3, r1
 8002eda:	0099      	lsls	r1, r3, #2
 8002edc:	440b      	add	r3, r1
 8002ede:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ee8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002eec:	6879      	ldr	r1, [r7, #4]
 8002eee:	6809      	ldr	r1, [r1, #0]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	69da      	ldr	r2, [r3, #28]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a1b      	ldr	r3, [r3, #32]
 8002f06:	431a      	orrs	r2, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f1a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	6911      	ldr	r1, [r2, #16]
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	68d2      	ldr	r2, [r2, #12]
 8002f26:	4311      	orrs	r1, r2
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	6812      	ldr	r2, [r2, #0]
 8002f2c:	430b      	orrs	r3, r1
 8002f2e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	695a      	ldr	r2, [r3, #20]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	431a      	orrs	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f042 0201 	orr.w	r2, r2, #1
 8002f5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2220      	movs	r2, #32
 8002f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3710      	adds	r7, #16
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	000186a0 	.word	0x000186a0
 8002f88:	001e847f 	.word	0x001e847f
 8002f8c:	003d08ff 	.word	0x003d08ff
 8002f90:	431bde83 	.word	0x431bde83
 8002f94:	10624dd3 	.word	0x10624dd3

08002f98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b086      	sub	sp, #24
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d101      	bne.n	8002faa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e267      	b.n	800347a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0301 	and.w	r3, r3, #1
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d075      	beq.n	80030a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fb6:	4b88      	ldr	r3, [pc, #544]	; (80031d8 <HAL_RCC_OscConfig+0x240>)
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f003 030c 	and.w	r3, r3, #12
 8002fbe:	2b04      	cmp	r3, #4
 8002fc0:	d00c      	beq.n	8002fdc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fc2:	4b85      	ldr	r3, [pc, #532]	; (80031d8 <HAL_RCC_OscConfig+0x240>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fca:	2b08      	cmp	r3, #8
 8002fcc:	d112      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fce:	4b82      	ldr	r3, [pc, #520]	; (80031d8 <HAL_RCC_OscConfig+0x240>)
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fda:	d10b      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fdc:	4b7e      	ldr	r3, [pc, #504]	; (80031d8 <HAL_RCC_OscConfig+0x240>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d05b      	beq.n	80030a0 <HAL_RCC_OscConfig+0x108>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d157      	bne.n	80030a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e242      	b.n	800347a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ffc:	d106      	bne.n	800300c <HAL_RCC_OscConfig+0x74>
 8002ffe:	4b76      	ldr	r3, [pc, #472]	; (80031d8 <HAL_RCC_OscConfig+0x240>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a75      	ldr	r2, [pc, #468]	; (80031d8 <HAL_RCC_OscConfig+0x240>)
 8003004:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003008:	6013      	str	r3, [r2, #0]
 800300a:	e01d      	b.n	8003048 <HAL_RCC_OscConfig+0xb0>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003014:	d10c      	bne.n	8003030 <HAL_RCC_OscConfig+0x98>
 8003016:	4b70      	ldr	r3, [pc, #448]	; (80031d8 <HAL_RCC_OscConfig+0x240>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a6f      	ldr	r2, [pc, #444]	; (80031d8 <HAL_RCC_OscConfig+0x240>)
 800301c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003020:	6013      	str	r3, [r2, #0]
 8003022:	4b6d      	ldr	r3, [pc, #436]	; (80031d8 <HAL_RCC_OscConfig+0x240>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a6c      	ldr	r2, [pc, #432]	; (80031d8 <HAL_RCC_OscConfig+0x240>)
 8003028:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800302c:	6013      	str	r3, [r2, #0]
 800302e:	e00b      	b.n	8003048 <HAL_RCC_OscConfig+0xb0>
 8003030:	4b69      	ldr	r3, [pc, #420]	; (80031d8 <HAL_RCC_OscConfig+0x240>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a68      	ldr	r2, [pc, #416]	; (80031d8 <HAL_RCC_OscConfig+0x240>)
 8003036:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800303a:	6013      	str	r3, [r2, #0]
 800303c:	4b66      	ldr	r3, [pc, #408]	; (80031d8 <HAL_RCC_OscConfig+0x240>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a65      	ldr	r2, [pc, #404]	; (80031d8 <HAL_RCC_OscConfig+0x240>)
 8003042:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003046:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d013      	beq.n	8003078 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003050:	f7fe ffea 	bl	8002028 <HAL_GetTick>
 8003054:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003056:	e008      	b.n	800306a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003058:	f7fe ffe6 	bl	8002028 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	2b64      	cmp	r3, #100	; 0x64
 8003064:	d901      	bls.n	800306a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e207      	b.n	800347a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800306a:	4b5b      	ldr	r3, [pc, #364]	; (80031d8 <HAL_RCC_OscConfig+0x240>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d0f0      	beq.n	8003058 <HAL_RCC_OscConfig+0xc0>
 8003076:	e014      	b.n	80030a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003078:	f7fe ffd6 	bl	8002028 <HAL_GetTick>
 800307c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800307e:	e008      	b.n	8003092 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003080:	f7fe ffd2 	bl	8002028 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	2b64      	cmp	r3, #100	; 0x64
 800308c:	d901      	bls.n	8003092 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e1f3      	b.n	800347a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003092:	4b51      	ldr	r3, [pc, #324]	; (80031d8 <HAL_RCC_OscConfig+0x240>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d1f0      	bne.n	8003080 <HAL_RCC_OscConfig+0xe8>
 800309e:	e000      	b.n	80030a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0302 	and.w	r3, r3, #2
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d063      	beq.n	8003176 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030ae:	4b4a      	ldr	r3, [pc, #296]	; (80031d8 <HAL_RCC_OscConfig+0x240>)
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f003 030c 	and.w	r3, r3, #12
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00b      	beq.n	80030d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030ba:	4b47      	ldr	r3, [pc, #284]	; (80031d8 <HAL_RCC_OscConfig+0x240>)
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030c2:	2b08      	cmp	r3, #8
 80030c4:	d11c      	bne.n	8003100 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030c6:	4b44      	ldr	r3, [pc, #272]	; (80031d8 <HAL_RCC_OscConfig+0x240>)
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d116      	bne.n	8003100 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030d2:	4b41      	ldr	r3, [pc, #260]	; (80031d8 <HAL_RCC_OscConfig+0x240>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0302 	and.w	r3, r3, #2
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d005      	beq.n	80030ea <HAL_RCC_OscConfig+0x152>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d001      	beq.n	80030ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e1c7      	b.n	800347a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030ea:	4b3b      	ldr	r3, [pc, #236]	; (80031d8 <HAL_RCC_OscConfig+0x240>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	00db      	lsls	r3, r3, #3
 80030f8:	4937      	ldr	r1, [pc, #220]	; (80031d8 <HAL_RCC_OscConfig+0x240>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030fe:	e03a      	b.n	8003176 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d020      	beq.n	800314a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003108:	4b34      	ldr	r3, [pc, #208]	; (80031dc <HAL_RCC_OscConfig+0x244>)
 800310a:	2201      	movs	r2, #1
 800310c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800310e:	f7fe ff8b 	bl	8002028 <HAL_GetTick>
 8003112:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003114:	e008      	b.n	8003128 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003116:	f7fe ff87 	bl	8002028 <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	2b02      	cmp	r3, #2
 8003122:	d901      	bls.n	8003128 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	e1a8      	b.n	800347a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003128:	4b2b      	ldr	r3, [pc, #172]	; (80031d8 <HAL_RCC_OscConfig+0x240>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0302 	and.w	r3, r3, #2
 8003130:	2b00      	cmp	r3, #0
 8003132:	d0f0      	beq.n	8003116 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003134:	4b28      	ldr	r3, [pc, #160]	; (80031d8 <HAL_RCC_OscConfig+0x240>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	691b      	ldr	r3, [r3, #16]
 8003140:	00db      	lsls	r3, r3, #3
 8003142:	4925      	ldr	r1, [pc, #148]	; (80031d8 <HAL_RCC_OscConfig+0x240>)
 8003144:	4313      	orrs	r3, r2
 8003146:	600b      	str	r3, [r1, #0]
 8003148:	e015      	b.n	8003176 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800314a:	4b24      	ldr	r3, [pc, #144]	; (80031dc <HAL_RCC_OscConfig+0x244>)
 800314c:	2200      	movs	r2, #0
 800314e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003150:	f7fe ff6a 	bl	8002028 <HAL_GetTick>
 8003154:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003156:	e008      	b.n	800316a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003158:	f7fe ff66 	bl	8002028 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	2b02      	cmp	r3, #2
 8003164:	d901      	bls.n	800316a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e187      	b.n	800347a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800316a:	4b1b      	ldr	r3, [pc, #108]	; (80031d8 <HAL_RCC_OscConfig+0x240>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0302 	and.w	r3, r3, #2
 8003172:	2b00      	cmp	r3, #0
 8003174:	d1f0      	bne.n	8003158 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0308 	and.w	r3, r3, #8
 800317e:	2b00      	cmp	r3, #0
 8003180:	d036      	beq.n	80031f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	695b      	ldr	r3, [r3, #20]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d016      	beq.n	80031b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800318a:	4b15      	ldr	r3, [pc, #84]	; (80031e0 <HAL_RCC_OscConfig+0x248>)
 800318c:	2201      	movs	r2, #1
 800318e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003190:	f7fe ff4a 	bl	8002028 <HAL_GetTick>
 8003194:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003196:	e008      	b.n	80031aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003198:	f7fe ff46 	bl	8002028 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d901      	bls.n	80031aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e167      	b.n	800347a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031aa:	4b0b      	ldr	r3, [pc, #44]	; (80031d8 <HAL_RCC_OscConfig+0x240>)
 80031ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d0f0      	beq.n	8003198 <HAL_RCC_OscConfig+0x200>
 80031b6:	e01b      	b.n	80031f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031b8:	4b09      	ldr	r3, [pc, #36]	; (80031e0 <HAL_RCC_OscConfig+0x248>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031be:	f7fe ff33 	bl	8002028 <HAL_GetTick>
 80031c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031c4:	e00e      	b.n	80031e4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031c6:	f7fe ff2f 	bl	8002028 <HAL_GetTick>
 80031ca:	4602      	mov	r2, r0
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d907      	bls.n	80031e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80031d4:	2303      	movs	r3, #3
 80031d6:	e150      	b.n	800347a <HAL_RCC_OscConfig+0x4e2>
 80031d8:	40023800 	.word	0x40023800
 80031dc:	42470000 	.word	0x42470000
 80031e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031e4:	4b88      	ldr	r3, [pc, #544]	; (8003408 <HAL_RCC_OscConfig+0x470>)
 80031e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031e8:	f003 0302 	and.w	r3, r3, #2
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d1ea      	bne.n	80031c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0304 	and.w	r3, r3, #4
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	f000 8097 	beq.w	800332c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031fe:	2300      	movs	r3, #0
 8003200:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003202:	4b81      	ldr	r3, [pc, #516]	; (8003408 <HAL_RCC_OscConfig+0x470>)
 8003204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d10f      	bne.n	800322e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800320e:	2300      	movs	r3, #0
 8003210:	60bb      	str	r3, [r7, #8]
 8003212:	4b7d      	ldr	r3, [pc, #500]	; (8003408 <HAL_RCC_OscConfig+0x470>)
 8003214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003216:	4a7c      	ldr	r2, [pc, #496]	; (8003408 <HAL_RCC_OscConfig+0x470>)
 8003218:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800321c:	6413      	str	r3, [r2, #64]	; 0x40
 800321e:	4b7a      	ldr	r3, [pc, #488]	; (8003408 <HAL_RCC_OscConfig+0x470>)
 8003220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003226:	60bb      	str	r3, [r7, #8]
 8003228:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800322a:	2301      	movs	r3, #1
 800322c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800322e:	4b77      	ldr	r3, [pc, #476]	; (800340c <HAL_RCC_OscConfig+0x474>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003236:	2b00      	cmp	r3, #0
 8003238:	d118      	bne.n	800326c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800323a:	4b74      	ldr	r3, [pc, #464]	; (800340c <HAL_RCC_OscConfig+0x474>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a73      	ldr	r2, [pc, #460]	; (800340c <HAL_RCC_OscConfig+0x474>)
 8003240:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003244:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003246:	f7fe feef 	bl	8002028 <HAL_GetTick>
 800324a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800324c:	e008      	b.n	8003260 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800324e:	f7fe feeb 	bl	8002028 <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	2b02      	cmp	r3, #2
 800325a:	d901      	bls.n	8003260 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	e10c      	b.n	800347a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003260:	4b6a      	ldr	r3, [pc, #424]	; (800340c <HAL_RCC_OscConfig+0x474>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003268:	2b00      	cmp	r3, #0
 800326a:	d0f0      	beq.n	800324e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	2b01      	cmp	r3, #1
 8003272:	d106      	bne.n	8003282 <HAL_RCC_OscConfig+0x2ea>
 8003274:	4b64      	ldr	r3, [pc, #400]	; (8003408 <HAL_RCC_OscConfig+0x470>)
 8003276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003278:	4a63      	ldr	r2, [pc, #396]	; (8003408 <HAL_RCC_OscConfig+0x470>)
 800327a:	f043 0301 	orr.w	r3, r3, #1
 800327e:	6713      	str	r3, [r2, #112]	; 0x70
 8003280:	e01c      	b.n	80032bc <HAL_RCC_OscConfig+0x324>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	2b05      	cmp	r3, #5
 8003288:	d10c      	bne.n	80032a4 <HAL_RCC_OscConfig+0x30c>
 800328a:	4b5f      	ldr	r3, [pc, #380]	; (8003408 <HAL_RCC_OscConfig+0x470>)
 800328c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800328e:	4a5e      	ldr	r2, [pc, #376]	; (8003408 <HAL_RCC_OscConfig+0x470>)
 8003290:	f043 0304 	orr.w	r3, r3, #4
 8003294:	6713      	str	r3, [r2, #112]	; 0x70
 8003296:	4b5c      	ldr	r3, [pc, #368]	; (8003408 <HAL_RCC_OscConfig+0x470>)
 8003298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800329a:	4a5b      	ldr	r2, [pc, #364]	; (8003408 <HAL_RCC_OscConfig+0x470>)
 800329c:	f043 0301 	orr.w	r3, r3, #1
 80032a0:	6713      	str	r3, [r2, #112]	; 0x70
 80032a2:	e00b      	b.n	80032bc <HAL_RCC_OscConfig+0x324>
 80032a4:	4b58      	ldr	r3, [pc, #352]	; (8003408 <HAL_RCC_OscConfig+0x470>)
 80032a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a8:	4a57      	ldr	r2, [pc, #348]	; (8003408 <HAL_RCC_OscConfig+0x470>)
 80032aa:	f023 0301 	bic.w	r3, r3, #1
 80032ae:	6713      	str	r3, [r2, #112]	; 0x70
 80032b0:	4b55      	ldr	r3, [pc, #340]	; (8003408 <HAL_RCC_OscConfig+0x470>)
 80032b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b4:	4a54      	ldr	r2, [pc, #336]	; (8003408 <HAL_RCC_OscConfig+0x470>)
 80032b6:	f023 0304 	bic.w	r3, r3, #4
 80032ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d015      	beq.n	80032f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032c4:	f7fe feb0 	bl	8002028 <HAL_GetTick>
 80032c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032ca:	e00a      	b.n	80032e2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032cc:	f7fe feac 	bl	8002028 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032da:	4293      	cmp	r3, r2
 80032dc:	d901      	bls.n	80032e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e0cb      	b.n	800347a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032e2:	4b49      	ldr	r3, [pc, #292]	; (8003408 <HAL_RCC_OscConfig+0x470>)
 80032e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d0ee      	beq.n	80032cc <HAL_RCC_OscConfig+0x334>
 80032ee:	e014      	b.n	800331a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032f0:	f7fe fe9a 	bl	8002028 <HAL_GetTick>
 80032f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032f6:	e00a      	b.n	800330e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032f8:	f7fe fe96 	bl	8002028 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	f241 3288 	movw	r2, #5000	; 0x1388
 8003306:	4293      	cmp	r3, r2
 8003308:	d901      	bls.n	800330e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e0b5      	b.n	800347a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800330e:	4b3e      	ldr	r3, [pc, #248]	; (8003408 <HAL_RCC_OscConfig+0x470>)
 8003310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	2b00      	cmp	r3, #0
 8003318:	d1ee      	bne.n	80032f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800331a:	7dfb      	ldrb	r3, [r7, #23]
 800331c:	2b01      	cmp	r3, #1
 800331e:	d105      	bne.n	800332c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003320:	4b39      	ldr	r3, [pc, #228]	; (8003408 <HAL_RCC_OscConfig+0x470>)
 8003322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003324:	4a38      	ldr	r2, [pc, #224]	; (8003408 <HAL_RCC_OscConfig+0x470>)
 8003326:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800332a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	699b      	ldr	r3, [r3, #24]
 8003330:	2b00      	cmp	r3, #0
 8003332:	f000 80a1 	beq.w	8003478 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003336:	4b34      	ldr	r3, [pc, #208]	; (8003408 <HAL_RCC_OscConfig+0x470>)
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	f003 030c 	and.w	r3, r3, #12
 800333e:	2b08      	cmp	r3, #8
 8003340:	d05c      	beq.n	80033fc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	699b      	ldr	r3, [r3, #24]
 8003346:	2b02      	cmp	r3, #2
 8003348:	d141      	bne.n	80033ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800334a:	4b31      	ldr	r3, [pc, #196]	; (8003410 <HAL_RCC_OscConfig+0x478>)
 800334c:	2200      	movs	r2, #0
 800334e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003350:	f7fe fe6a 	bl	8002028 <HAL_GetTick>
 8003354:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003356:	e008      	b.n	800336a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003358:	f7fe fe66 	bl	8002028 <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	2b02      	cmp	r3, #2
 8003364:	d901      	bls.n	800336a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e087      	b.n	800347a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800336a:	4b27      	ldr	r3, [pc, #156]	; (8003408 <HAL_RCC_OscConfig+0x470>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d1f0      	bne.n	8003358 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	69da      	ldr	r2, [r3, #28]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a1b      	ldr	r3, [r3, #32]
 800337e:	431a      	orrs	r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003384:	019b      	lsls	r3, r3, #6
 8003386:	431a      	orrs	r2, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800338c:	085b      	lsrs	r3, r3, #1
 800338e:	3b01      	subs	r3, #1
 8003390:	041b      	lsls	r3, r3, #16
 8003392:	431a      	orrs	r2, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003398:	061b      	lsls	r3, r3, #24
 800339a:	491b      	ldr	r1, [pc, #108]	; (8003408 <HAL_RCC_OscConfig+0x470>)
 800339c:	4313      	orrs	r3, r2
 800339e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033a0:	4b1b      	ldr	r3, [pc, #108]	; (8003410 <HAL_RCC_OscConfig+0x478>)
 80033a2:	2201      	movs	r2, #1
 80033a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a6:	f7fe fe3f 	bl	8002028 <HAL_GetTick>
 80033aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033ac:	e008      	b.n	80033c0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033ae:	f7fe fe3b 	bl	8002028 <HAL_GetTick>
 80033b2:	4602      	mov	r2, r0
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d901      	bls.n	80033c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80033bc:	2303      	movs	r3, #3
 80033be:	e05c      	b.n	800347a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033c0:	4b11      	ldr	r3, [pc, #68]	; (8003408 <HAL_RCC_OscConfig+0x470>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d0f0      	beq.n	80033ae <HAL_RCC_OscConfig+0x416>
 80033cc:	e054      	b.n	8003478 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ce:	4b10      	ldr	r3, [pc, #64]	; (8003410 <HAL_RCC_OscConfig+0x478>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d4:	f7fe fe28 	bl	8002028 <HAL_GetTick>
 80033d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033da:	e008      	b.n	80033ee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033dc:	f7fe fe24 	bl	8002028 <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d901      	bls.n	80033ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e045      	b.n	800347a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ee:	4b06      	ldr	r3, [pc, #24]	; (8003408 <HAL_RCC_OscConfig+0x470>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d1f0      	bne.n	80033dc <HAL_RCC_OscConfig+0x444>
 80033fa:	e03d      	b.n	8003478 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	2b01      	cmp	r3, #1
 8003402:	d107      	bne.n	8003414 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e038      	b.n	800347a <HAL_RCC_OscConfig+0x4e2>
 8003408:	40023800 	.word	0x40023800
 800340c:	40007000 	.word	0x40007000
 8003410:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003414:	4b1b      	ldr	r3, [pc, #108]	; (8003484 <HAL_RCC_OscConfig+0x4ec>)
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	699b      	ldr	r3, [r3, #24]
 800341e:	2b01      	cmp	r3, #1
 8003420:	d028      	beq.n	8003474 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800342c:	429a      	cmp	r2, r3
 800342e:	d121      	bne.n	8003474 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800343a:	429a      	cmp	r2, r3
 800343c:	d11a      	bne.n	8003474 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800343e:	68fa      	ldr	r2, [r7, #12]
 8003440:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003444:	4013      	ands	r3, r2
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800344a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800344c:	4293      	cmp	r3, r2
 800344e:	d111      	bne.n	8003474 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800345a:	085b      	lsrs	r3, r3, #1
 800345c:	3b01      	subs	r3, #1
 800345e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003460:	429a      	cmp	r2, r3
 8003462:	d107      	bne.n	8003474 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003470:	429a      	cmp	r2, r3
 8003472:	d001      	beq.n	8003478 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e000      	b.n	800347a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3718      	adds	r7, #24
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	40023800 	.word	0x40023800

08003488 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d101      	bne.n	800349c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e0cc      	b.n	8003636 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800349c:	4b68      	ldr	r3, [pc, #416]	; (8003640 <HAL_RCC_ClockConfig+0x1b8>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0307 	and.w	r3, r3, #7
 80034a4:	683a      	ldr	r2, [r7, #0]
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d90c      	bls.n	80034c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034aa:	4b65      	ldr	r3, [pc, #404]	; (8003640 <HAL_RCC_ClockConfig+0x1b8>)
 80034ac:	683a      	ldr	r2, [r7, #0]
 80034ae:	b2d2      	uxtb	r2, r2
 80034b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034b2:	4b63      	ldr	r3, [pc, #396]	; (8003640 <HAL_RCC_ClockConfig+0x1b8>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0307 	and.w	r3, r3, #7
 80034ba:	683a      	ldr	r2, [r7, #0]
 80034bc:	429a      	cmp	r2, r3
 80034be:	d001      	beq.n	80034c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e0b8      	b.n	8003636 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0302 	and.w	r3, r3, #2
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d020      	beq.n	8003512 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0304 	and.w	r3, r3, #4
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d005      	beq.n	80034e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034dc:	4b59      	ldr	r3, [pc, #356]	; (8003644 <HAL_RCC_ClockConfig+0x1bc>)
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	4a58      	ldr	r2, [pc, #352]	; (8003644 <HAL_RCC_ClockConfig+0x1bc>)
 80034e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80034e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0308 	and.w	r3, r3, #8
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d005      	beq.n	8003500 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034f4:	4b53      	ldr	r3, [pc, #332]	; (8003644 <HAL_RCC_ClockConfig+0x1bc>)
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	4a52      	ldr	r2, [pc, #328]	; (8003644 <HAL_RCC_ClockConfig+0x1bc>)
 80034fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80034fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003500:	4b50      	ldr	r3, [pc, #320]	; (8003644 <HAL_RCC_ClockConfig+0x1bc>)
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	494d      	ldr	r1, [pc, #308]	; (8003644 <HAL_RCC_ClockConfig+0x1bc>)
 800350e:	4313      	orrs	r3, r2
 8003510:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0301 	and.w	r3, r3, #1
 800351a:	2b00      	cmp	r3, #0
 800351c:	d044      	beq.n	80035a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	2b01      	cmp	r3, #1
 8003524:	d107      	bne.n	8003536 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003526:	4b47      	ldr	r3, [pc, #284]	; (8003644 <HAL_RCC_ClockConfig+0x1bc>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d119      	bne.n	8003566 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e07f      	b.n	8003636 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	2b02      	cmp	r3, #2
 800353c:	d003      	beq.n	8003546 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003542:	2b03      	cmp	r3, #3
 8003544:	d107      	bne.n	8003556 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003546:	4b3f      	ldr	r3, [pc, #252]	; (8003644 <HAL_RCC_ClockConfig+0x1bc>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d109      	bne.n	8003566 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e06f      	b.n	8003636 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003556:	4b3b      	ldr	r3, [pc, #236]	; (8003644 <HAL_RCC_ClockConfig+0x1bc>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0302 	and.w	r3, r3, #2
 800355e:	2b00      	cmp	r3, #0
 8003560:	d101      	bne.n	8003566 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e067      	b.n	8003636 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003566:	4b37      	ldr	r3, [pc, #220]	; (8003644 <HAL_RCC_ClockConfig+0x1bc>)
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f023 0203 	bic.w	r2, r3, #3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	4934      	ldr	r1, [pc, #208]	; (8003644 <HAL_RCC_ClockConfig+0x1bc>)
 8003574:	4313      	orrs	r3, r2
 8003576:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003578:	f7fe fd56 	bl	8002028 <HAL_GetTick>
 800357c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800357e:	e00a      	b.n	8003596 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003580:	f7fe fd52 	bl	8002028 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	f241 3288 	movw	r2, #5000	; 0x1388
 800358e:	4293      	cmp	r3, r2
 8003590:	d901      	bls.n	8003596 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e04f      	b.n	8003636 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003596:	4b2b      	ldr	r3, [pc, #172]	; (8003644 <HAL_RCC_ClockConfig+0x1bc>)
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f003 020c 	and.w	r2, r3, #12
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d1eb      	bne.n	8003580 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035a8:	4b25      	ldr	r3, [pc, #148]	; (8003640 <HAL_RCC_ClockConfig+0x1b8>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0307 	and.w	r3, r3, #7
 80035b0:	683a      	ldr	r2, [r7, #0]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d20c      	bcs.n	80035d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035b6:	4b22      	ldr	r3, [pc, #136]	; (8003640 <HAL_RCC_ClockConfig+0x1b8>)
 80035b8:	683a      	ldr	r2, [r7, #0]
 80035ba:	b2d2      	uxtb	r2, r2
 80035bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035be:	4b20      	ldr	r3, [pc, #128]	; (8003640 <HAL_RCC_ClockConfig+0x1b8>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0307 	and.w	r3, r3, #7
 80035c6:	683a      	ldr	r2, [r7, #0]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d001      	beq.n	80035d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e032      	b.n	8003636 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0304 	and.w	r3, r3, #4
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d008      	beq.n	80035ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035dc:	4b19      	ldr	r3, [pc, #100]	; (8003644 <HAL_RCC_ClockConfig+0x1bc>)
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	4916      	ldr	r1, [pc, #88]	; (8003644 <HAL_RCC_ClockConfig+0x1bc>)
 80035ea:	4313      	orrs	r3, r2
 80035ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0308 	and.w	r3, r3, #8
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d009      	beq.n	800360e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035fa:	4b12      	ldr	r3, [pc, #72]	; (8003644 <HAL_RCC_ClockConfig+0x1bc>)
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	00db      	lsls	r3, r3, #3
 8003608:	490e      	ldr	r1, [pc, #56]	; (8003644 <HAL_RCC_ClockConfig+0x1bc>)
 800360a:	4313      	orrs	r3, r2
 800360c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800360e:	f000 f821 	bl	8003654 <HAL_RCC_GetSysClockFreq>
 8003612:	4602      	mov	r2, r0
 8003614:	4b0b      	ldr	r3, [pc, #44]	; (8003644 <HAL_RCC_ClockConfig+0x1bc>)
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	091b      	lsrs	r3, r3, #4
 800361a:	f003 030f 	and.w	r3, r3, #15
 800361e:	490a      	ldr	r1, [pc, #40]	; (8003648 <HAL_RCC_ClockConfig+0x1c0>)
 8003620:	5ccb      	ldrb	r3, [r1, r3]
 8003622:	fa22 f303 	lsr.w	r3, r2, r3
 8003626:	4a09      	ldr	r2, [pc, #36]	; (800364c <HAL_RCC_ClockConfig+0x1c4>)
 8003628:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800362a:	4b09      	ldr	r3, [pc, #36]	; (8003650 <HAL_RCC_ClockConfig+0x1c8>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4618      	mov	r0, r3
 8003630:	f7fe fcb6 	bl	8001fa0 <HAL_InitTick>

  return HAL_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3710      	adds	r7, #16
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	40023c00 	.word	0x40023c00
 8003644:	40023800 	.word	0x40023800
 8003648:	08006194 	.word	0x08006194
 800364c:	20000000 	.word	0x20000000
 8003650:	2000000c 	.word	0x2000000c

08003654 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003654:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003658:	b090      	sub	sp, #64	; 0x40
 800365a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800365c:	2300      	movs	r3, #0
 800365e:	637b      	str	r3, [r7, #52]	; 0x34
 8003660:	2300      	movs	r3, #0
 8003662:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003664:	2300      	movs	r3, #0
 8003666:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003668:	2300      	movs	r3, #0
 800366a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800366c:	4b59      	ldr	r3, [pc, #356]	; (80037d4 <HAL_RCC_GetSysClockFreq+0x180>)
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	f003 030c 	and.w	r3, r3, #12
 8003674:	2b08      	cmp	r3, #8
 8003676:	d00d      	beq.n	8003694 <HAL_RCC_GetSysClockFreq+0x40>
 8003678:	2b08      	cmp	r3, #8
 800367a:	f200 80a1 	bhi.w	80037c0 <HAL_RCC_GetSysClockFreq+0x16c>
 800367e:	2b00      	cmp	r3, #0
 8003680:	d002      	beq.n	8003688 <HAL_RCC_GetSysClockFreq+0x34>
 8003682:	2b04      	cmp	r3, #4
 8003684:	d003      	beq.n	800368e <HAL_RCC_GetSysClockFreq+0x3a>
 8003686:	e09b      	b.n	80037c0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003688:	4b53      	ldr	r3, [pc, #332]	; (80037d8 <HAL_RCC_GetSysClockFreq+0x184>)
 800368a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800368c:	e09b      	b.n	80037c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800368e:	4b53      	ldr	r3, [pc, #332]	; (80037dc <HAL_RCC_GetSysClockFreq+0x188>)
 8003690:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003692:	e098      	b.n	80037c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003694:	4b4f      	ldr	r3, [pc, #316]	; (80037d4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800369c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800369e:	4b4d      	ldr	r3, [pc, #308]	; (80037d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d028      	beq.n	80036fc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036aa:	4b4a      	ldr	r3, [pc, #296]	; (80037d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	099b      	lsrs	r3, r3, #6
 80036b0:	2200      	movs	r2, #0
 80036b2:	623b      	str	r3, [r7, #32]
 80036b4:	627a      	str	r2, [r7, #36]	; 0x24
 80036b6:	6a3b      	ldr	r3, [r7, #32]
 80036b8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80036bc:	2100      	movs	r1, #0
 80036be:	4b47      	ldr	r3, [pc, #284]	; (80037dc <HAL_RCC_GetSysClockFreq+0x188>)
 80036c0:	fb03 f201 	mul.w	r2, r3, r1
 80036c4:	2300      	movs	r3, #0
 80036c6:	fb00 f303 	mul.w	r3, r0, r3
 80036ca:	4413      	add	r3, r2
 80036cc:	4a43      	ldr	r2, [pc, #268]	; (80037dc <HAL_RCC_GetSysClockFreq+0x188>)
 80036ce:	fba0 1202 	umull	r1, r2, r0, r2
 80036d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80036d4:	460a      	mov	r2, r1
 80036d6:	62ba      	str	r2, [r7, #40]	; 0x28
 80036d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036da:	4413      	add	r3, r2
 80036dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036e0:	2200      	movs	r2, #0
 80036e2:	61bb      	str	r3, [r7, #24]
 80036e4:	61fa      	str	r2, [r7, #28]
 80036e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036ea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80036ee:	f7fc fdc7 	bl	8000280 <__aeabi_uldivmod>
 80036f2:	4602      	mov	r2, r0
 80036f4:	460b      	mov	r3, r1
 80036f6:	4613      	mov	r3, r2
 80036f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036fa:	e053      	b.n	80037a4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036fc:	4b35      	ldr	r3, [pc, #212]	; (80037d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	099b      	lsrs	r3, r3, #6
 8003702:	2200      	movs	r2, #0
 8003704:	613b      	str	r3, [r7, #16]
 8003706:	617a      	str	r2, [r7, #20]
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800370e:	f04f 0b00 	mov.w	fp, #0
 8003712:	4652      	mov	r2, sl
 8003714:	465b      	mov	r3, fp
 8003716:	f04f 0000 	mov.w	r0, #0
 800371a:	f04f 0100 	mov.w	r1, #0
 800371e:	0159      	lsls	r1, r3, #5
 8003720:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003724:	0150      	lsls	r0, r2, #5
 8003726:	4602      	mov	r2, r0
 8003728:	460b      	mov	r3, r1
 800372a:	ebb2 080a 	subs.w	r8, r2, sl
 800372e:	eb63 090b 	sbc.w	r9, r3, fp
 8003732:	f04f 0200 	mov.w	r2, #0
 8003736:	f04f 0300 	mov.w	r3, #0
 800373a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800373e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003742:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003746:	ebb2 0408 	subs.w	r4, r2, r8
 800374a:	eb63 0509 	sbc.w	r5, r3, r9
 800374e:	f04f 0200 	mov.w	r2, #0
 8003752:	f04f 0300 	mov.w	r3, #0
 8003756:	00eb      	lsls	r3, r5, #3
 8003758:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800375c:	00e2      	lsls	r2, r4, #3
 800375e:	4614      	mov	r4, r2
 8003760:	461d      	mov	r5, r3
 8003762:	eb14 030a 	adds.w	r3, r4, sl
 8003766:	603b      	str	r3, [r7, #0]
 8003768:	eb45 030b 	adc.w	r3, r5, fp
 800376c:	607b      	str	r3, [r7, #4]
 800376e:	f04f 0200 	mov.w	r2, #0
 8003772:	f04f 0300 	mov.w	r3, #0
 8003776:	e9d7 4500 	ldrd	r4, r5, [r7]
 800377a:	4629      	mov	r1, r5
 800377c:	028b      	lsls	r3, r1, #10
 800377e:	4621      	mov	r1, r4
 8003780:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003784:	4621      	mov	r1, r4
 8003786:	028a      	lsls	r2, r1, #10
 8003788:	4610      	mov	r0, r2
 800378a:	4619      	mov	r1, r3
 800378c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800378e:	2200      	movs	r2, #0
 8003790:	60bb      	str	r3, [r7, #8]
 8003792:	60fa      	str	r2, [r7, #12]
 8003794:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003798:	f7fc fd72 	bl	8000280 <__aeabi_uldivmod>
 800379c:	4602      	mov	r2, r0
 800379e:	460b      	mov	r3, r1
 80037a0:	4613      	mov	r3, r2
 80037a2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80037a4:	4b0b      	ldr	r3, [pc, #44]	; (80037d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	0c1b      	lsrs	r3, r3, #16
 80037aa:	f003 0303 	and.w	r3, r3, #3
 80037ae:	3301      	adds	r3, #1
 80037b0:	005b      	lsls	r3, r3, #1
 80037b2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80037b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80037b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037bc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80037be:	e002      	b.n	80037c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037c0:	4b05      	ldr	r3, [pc, #20]	; (80037d8 <HAL_RCC_GetSysClockFreq+0x184>)
 80037c2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80037c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3740      	adds	r7, #64	; 0x40
 80037cc:	46bd      	mov	sp, r7
 80037ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037d2:	bf00      	nop
 80037d4:	40023800 	.word	0x40023800
 80037d8:	00f42400 	.word	0x00f42400
 80037dc:	017d7840 	.word	0x017d7840

080037e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037e0:	b480      	push	{r7}
 80037e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037e4:	4b03      	ldr	r3, [pc, #12]	; (80037f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80037e6:	681b      	ldr	r3, [r3, #0]
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	20000000 	.word	0x20000000

080037f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80037fc:	f7ff fff0 	bl	80037e0 <HAL_RCC_GetHCLKFreq>
 8003800:	4602      	mov	r2, r0
 8003802:	4b05      	ldr	r3, [pc, #20]	; (8003818 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	0a9b      	lsrs	r3, r3, #10
 8003808:	f003 0307 	and.w	r3, r3, #7
 800380c:	4903      	ldr	r1, [pc, #12]	; (800381c <HAL_RCC_GetPCLK1Freq+0x24>)
 800380e:	5ccb      	ldrb	r3, [r1, r3]
 8003810:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003814:	4618      	mov	r0, r3
 8003816:	bd80      	pop	{r7, pc}
 8003818:	40023800 	.word	0x40023800
 800381c:	080061a4 	.word	0x080061a4

08003820 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003824:	f7ff ffdc 	bl	80037e0 <HAL_RCC_GetHCLKFreq>
 8003828:	4602      	mov	r2, r0
 800382a:	4b05      	ldr	r3, [pc, #20]	; (8003840 <HAL_RCC_GetPCLK2Freq+0x20>)
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	0b5b      	lsrs	r3, r3, #13
 8003830:	f003 0307 	and.w	r3, r3, #7
 8003834:	4903      	ldr	r1, [pc, #12]	; (8003844 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003836:	5ccb      	ldrb	r3, [r1, r3]
 8003838:	fa22 f303 	lsr.w	r3, r2, r3
}
 800383c:	4618      	mov	r0, r3
 800383e:	bd80      	pop	{r7, pc}
 8003840:	40023800 	.word	0x40023800
 8003844:	080061a4 	.word	0x080061a4

08003848 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d101      	bne.n	800385a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e07b      	b.n	8003952 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385e:	2b00      	cmp	r3, #0
 8003860:	d108      	bne.n	8003874 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800386a:	d009      	beq.n	8003880 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	61da      	str	r2, [r3, #28]
 8003872:	e005      	b.n	8003880 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800388c:	b2db      	uxtb	r3, r3
 800388e:	2b00      	cmp	r3, #0
 8003890:	d106      	bne.n	80038a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f7fd fd4e 	bl	800133c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2202      	movs	r2, #2
 80038a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038b6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80038c8:	431a      	orrs	r2, r3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038d2:	431a      	orrs	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	691b      	ldr	r3, [r3, #16]
 80038d8:	f003 0302 	and.w	r3, r3, #2
 80038dc:	431a      	orrs	r2, r3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	695b      	ldr	r3, [r3, #20]
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	431a      	orrs	r2, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	699b      	ldr	r3, [r3, #24]
 80038ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038f0:	431a      	orrs	r2, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	69db      	ldr	r3, [r3, #28]
 80038f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80038fa:	431a      	orrs	r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6a1b      	ldr	r3, [r3, #32]
 8003900:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003904:	ea42 0103 	orr.w	r1, r2, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800390c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	430a      	orrs	r2, r1
 8003916:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	0c1b      	lsrs	r3, r3, #16
 800391e:	f003 0104 	and.w	r1, r3, #4
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003926:	f003 0210 	and.w	r2, r3, #16
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	430a      	orrs	r2, r1
 8003930:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	69da      	ldr	r2, [r3, #28]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003940:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	3708      	adds	r7, #8
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}

0800395a <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800395a:	b580      	push	{r7, lr}
 800395c:	b084      	sub	sp, #16
 800395e:	af00      	add	r7, sp, #0
 8003960:	60f8      	str	r0, [r7, #12]
 8003962:	60b9      	str	r1, [r7, #8]
 8003964:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d101      	bne.n	8003970 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e038      	b.n	80039e2 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8003976:	b2db      	uxtb	r3, r3
 8003978:	2b00      	cmp	r3, #0
 800397a:	d106      	bne.n	800398a <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2200      	movs	r2, #0
 8003980:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8003984:	68f8      	ldr	r0, [r7, #12]
 8003986:	f7fd feb5 	bl	80016f4 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	3308      	adds	r3, #8
 8003992:	4619      	mov	r1, r3
 8003994:	4610      	mov	r0, r2
 8003996:	f001 f83b 	bl	8004a10 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6818      	ldr	r0, [r3, #0]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	461a      	mov	r2, r3
 80039a4:	68b9      	ldr	r1, [r7, #8]
 80039a6:	f001 f89d 	bl	8004ae4 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6858      	ldr	r0, [r3, #4]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	689a      	ldr	r2, [r3, #8]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b6:	6879      	ldr	r1, [r7, #4]
 80039b8:	f001 f8ca 	bl	8004b50 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68fa      	ldr	r2, [r7, #12]
 80039c2:	6892      	ldr	r2, [r2, #8]
 80039c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68fa      	ldr	r2, [r7, #12]
 80039ce:	6892      	ldr	r2, [r2, #8]
 80039d0:	f041 0101 	orr.w	r1, r1, #1
 80039d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3710      	adds	r7, #16
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}

080039ea <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039ea:	b580      	push	{r7, lr}
 80039ec:	b082      	sub	sp, #8
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d101      	bne.n	80039fc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e03f      	b.n	8003a7c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d106      	bne.n	8003a16 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f7fd fd97 	bl	8001544 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2224      	movs	r2, #36	; 0x24
 8003a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	68da      	ldr	r2, [r3, #12]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a2c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 fd7a 	bl	8004528 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	691a      	ldr	r2, [r3, #16]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a42:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	695a      	ldr	r2, [r3, #20]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a52:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68da      	ldr	r2, [r3, #12]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a62:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2220      	movs	r2, #32
 8003a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2220      	movs	r2, #32
 8003a76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a7a:	2300      	movs	r3, #0
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3708      	adds	r7, #8
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b08a      	sub	sp, #40	; 0x28
 8003a88:	af02      	add	r7, sp, #8
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	60b9      	str	r1, [r7, #8]
 8003a8e:	603b      	str	r3, [r7, #0]
 8003a90:	4613      	mov	r3, r2
 8003a92:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a94:	2300      	movs	r3, #0
 8003a96:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	2b20      	cmp	r3, #32
 8003aa2:	d17c      	bne.n	8003b9e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d002      	beq.n	8003ab0 <HAL_UART_Transmit+0x2c>
 8003aaa:	88fb      	ldrh	r3, [r7, #6]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d101      	bne.n	8003ab4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e075      	b.n	8003ba0 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d101      	bne.n	8003ac2 <HAL_UART_Transmit+0x3e>
 8003abe:	2302      	movs	r3, #2
 8003ac0:	e06e      	b.n	8003ba0 <HAL_UART_Transmit+0x11c>
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2200      	movs	r2, #0
 8003ace:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2221      	movs	r2, #33	; 0x21
 8003ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ad8:	f7fe faa6 	bl	8002028 <HAL_GetTick>
 8003adc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	88fa      	ldrh	r2, [r7, #6]
 8003ae2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	88fa      	ldrh	r2, [r7, #6]
 8003ae8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003af2:	d108      	bne.n	8003b06 <HAL_UART_Transmit+0x82>
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	691b      	ldr	r3, [r3, #16]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d104      	bne.n	8003b06 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003afc:	2300      	movs	r3, #0
 8003afe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	61bb      	str	r3, [r7, #24]
 8003b04:	e003      	b.n	8003b0e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003b16:	e02a      	b.n	8003b6e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	9300      	str	r3, [sp, #0]
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	2180      	movs	r1, #128	; 0x80
 8003b22:	68f8      	ldr	r0, [r7, #12]
 8003b24:	f000 faf8 	bl	8004118 <UART_WaitOnFlagUntilTimeout>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d001      	beq.n	8003b32 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e036      	b.n	8003ba0 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d10b      	bne.n	8003b50 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b38:	69bb      	ldr	r3, [r7, #24]
 8003b3a:	881b      	ldrh	r3, [r3, #0]
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b46:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	3302      	adds	r3, #2
 8003b4c:	61bb      	str	r3, [r7, #24]
 8003b4e:	e007      	b.n	8003b60 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	781a      	ldrb	r2, [r3, #0]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	3b01      	subs	r3, #1
 8003b68:	b29a      	uxth	r2, r3
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d1cf      	bne.n	8003b18 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	9300      	str	r3, [sp, #0]
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	2140      	movs	r1, #64	; 0x40
 8003b82:	68f8      	ldr	r0, [r7, #12]
 8003b84:	f000 fac8 	bl	8004118 <UART_WaitOnFlagUntilTimeout>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d001      	beq.n	8003b92 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e006      	b.n	8003ba0 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2220      	movs	r2, #32
 8003b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	e000      	b.n	8003ba0 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003b9e:	2302      	movs	r3, #2
  }
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3720      	adds	r7, #32
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}

08003ba8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b0ba      	sub	sp, #232	; 0xe8
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	695b      	ldr	r3, [r3, #20]
 8003bca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003bda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bde:	f003 030f 	and.w	r3, r3, #15
 8003be2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003be6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d10f      	bne.n	8003c0e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003bee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bf2:	f003 0320 	and.w	r3, r3, #32
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d009      	beq.n	8003c0e <HAL_UART_IRQHandler+0x66>
 8003bfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bfe:	f003 0320 	and.w	r3, r3, #32
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d003      	beq.n	8003c0e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f000 fbd3 	bl	80043b2 <UART_Receive_IT>
      return;
 8003c0c:	e256      	b.n	80040bc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003c0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	f000 80de 	beq.w	8003dd4 <HAL_UART_IRQHandler+0x22c>
 8003c18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c1c:	f003 0301 	and.w	r3, r3, #1
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d106      	bne.n	8003c32 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003c24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c28:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	f000 80d1 	beq.w	8003dd4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003c32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c36:	f003 0301 	and.w	r3, r3, #1
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d00b      	beq.n	8003c56 <HAL_UART_IRQHandler+0xae>
 8003c3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d005      	beq.n	8003c56 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4e:	f043 0201 	orr.w	r2, r3, #1
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c5a:	f003 0304 	and.w	r3, r3, #4
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d00b      	beq.n	8003c7a <HAL_UART_IRQHandler+0xd2>
 8003c62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c66:	f003 0301 	and.w	r3, r3, #1
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d005      	beq.n	8003c7a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c72:	f043 0202 	orr.w	r2, r3, #2
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c7e:	f003 0302 	and.w	r3, r3, #2
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d00b      	beq.n	8003c9e <HAL_UART_IRQHandler+0xf6>
 8003c86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c8a:	f003 0301 	and.w	r3, r3, #1
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d005      	beq.n	8003c9e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c96:	f043 0204 	orr.w	r2, r3, #4
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003c9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ca2:	f003 0308 	and.w	r3, r3, #8
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d011      	beq.n	8003cce <HAL_UART_IRQHandler+0x126>
 8003caa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cae:	f003 0320 	and.w	r3, r3, #32
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d105      	bne.n	8003cc2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003cb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cba:	f003 0301 	and.w	r3, r3, #1
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d005      	beq.n	8003cce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc6:	f043 0208 	orr.w	r2, r3, #8
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	f000 81ed 	beq.w	80040b2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003cd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cdc:	f003 0320 	and.w	r3, r3, #32
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d008      	beq.n	8003cf6 <HAL_UART_IRQHandler+0x14e>
 8003ce4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ce8:	f003 0320 	and.w	r3, r3, #32
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d002      	beq.n	8003cf6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f000 fb5e 	bl	80043b2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	695b      	ldr	r3, [r3, #20]
 8003cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d00:	2b40      	cmp	r3, #64	; 0x40
 8003d02:	bf0c      	ite	eq
 8003d04:	2301      	moveq	r3, #1
 8003d06:	2300      	movne	r3, #0
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d12:	f003 0308 	and.w	r3, r3, #8
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d103      	bne.n	8003d22 <HAL_UART_IRQHandler+0x17a>
 8003d1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d04f      	beq.n	8003dc2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 fa66 	bl	80041f4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	695b      	ldr	r3, [r3, #20]
 8003d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d32:	2b40      	cmp	r3, #64	; 0x40
 8003d34:	d141      	bne.n	8003dba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	3314      	adds	r3, #20
 8003d3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003d44:	e853 3f00 	ldrex	r3, [r3]
 8003d48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003d4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003d50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	3314      	adds	r3, #20
 8003d5e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003d62:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003d66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d6a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003d6e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003d72:	e841 2300 	strex	r3, r2, [r1]
 8003d76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003d7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d1d9      	bne.n	8003d36 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d013      	beq.n	8003db2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d8e:	4a7d      	ldr	r2, [pc, #500]	; (8003f84 <HAL_UART_IRQHandler+0x3dc>)
 8003d90:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d96:	4618      	mov	r0, r3
 8003d98:	f7fe fba6 	bl	80024e8 <HAL_DMA_Abort_IT>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d016      	beq.n	8003dd0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003dac:	4610      	mov	r0, r2
 8003dae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003db0:	e00e      	b.n	8003dd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f000 f99a 	bl	80040ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003db8:	e00a      	b.n	8003dd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f000 f996 	bl	80040ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dc0:	e006      	b.n	8003dd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 f992 	bl	80040ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003dce:	e170      	b.n	80040b2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dd0:	bf00      	nop
    return;
 8003dd2:	e16e      	b.n	80040b2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	f040 814a 	bne.w	8004072 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003de2:	f003 0310 	and.w	r3, r3, #16
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	f000 8143 	beq.w	8004072 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003dec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003df0:	f003 0310 	and.w	r3, r3, #16
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	f000 813c 	beq.w	8004072 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	60bb      	str	r3, [r7, #8]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	60bb      	str	r3, [r7, #8]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	60bb      	str	r3, [r7, #8]
 8003e0e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	695b      	ldr	r3, [r3, #20]
 8003e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e1a:	2b40      	cmp	r3, #64	; 0x40
 8003e1c:	f040 80b4 	bne.w	8003f88 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003e2c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	f000 8140 	beq.w	80040b6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	f080 8139 	bcs.w	80040b6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e4a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e50:	69db      	ldr	r3, [r3, #28]
 8003e52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e56:	f000 8088 	beq.w	8003f6a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	330c      	adds	r3, #12
 8003e60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e64:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e68:	e853 3f00 	ldrex	r3, [r3]
 8003e6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003e70:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	330c      	adds	r3, #12
 8003e82:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003e86:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003e8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e8e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003e92:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003e96:	e841 2300 	strex	r3, r2, [r1]
 8003e9a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003e9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d1d9      	bne.n	8003e5a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	3314      	adds	r3, #20
 8003eac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003eb0:	e853 3f00 	ldrex	r3, [r3]
 8003eb4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003eb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003eb8:	f023 0301 	bic.w	r3, r3, #1
 8003ebc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	3314      	adds	r3, #20
 8003ec6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003eca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003ece:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003ed2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003ed6:	e841 2300 	strex	r3, r2, [r1]
 8003eda:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003edc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d1e1      	bne.n	8003ea6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	3314      	adds	r3, #20
 8003ee8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003eec:	e853 3f00 	ldrex	r3, [r3]
 8003ef0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003ef2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ef4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ef8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	3314      	adds	r3, #20
 8003f02:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003f06:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003f08:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f0a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003f0c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003f0e:	e841 2300 	strex	r3, r2, [r1]
 8003f12:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003f14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1e3      	bne.n	8003ee2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2220      	movs	r2, #32
 8003f1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	330c      	adds	r3, #12
 8003f2e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f32:	e853 3f00 	ldrex	r3, [r3]
 8003f36:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003f38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f3a:	f023 0310 	bic.w	r3, r3, #16
 8003f3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	330c      	adds	r3, #12
 8003f48:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003f4c:	65ba      	str	r2, [r7, #88]	; 0x58
 8003f4e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f50:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003f52:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003f54:	e841 2300 	strex	r3, r2, [r1]
 8003f58:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003f5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d1e3      	bne.n	8003f28 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f64:	4618      	mov	r0, r3
 8003f66:	f7fe fa4f 	bl	8002408 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	4619      	mov	r1, r3
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 f8c0 	bl	8004100 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f80:	e099      	b.n	80040b6 <HAL_UART_IRQHandler+0x50e>
 8003f82:	bf00      	nop
 8003f84:	080042bb 	.word	0x080042bb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	f000 808b 	beq.w	80040ba <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003fa4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	f000 8086 	beq.w	80040ba <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	330c      	adds	r3, #12
 8003fb4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fb8:	e853 3f00 	ldrex	r3, [r3]
 8003fbc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fc0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003fc4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	330c      	adds	r3, #12
 8003fce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003fd2:	647a      	str	r2, [r7, #68]	; 0x44
 8003fd4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003fd8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003fda:	e841 2300 	strex	r3, r2, [r1]
 8003fde:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003fe0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d1e3      	bne.n	8003fae <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	3314      	adds	r3, #20
 8003fec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff0:	e853 3f00 	ldrex	r3, [r3]
 8003ff4:	623b      	str	r3, [r7, #32]
   return(result);
 8003ff6:	6a3b      	ldr	r3, [r7, #32]
 8003ff8:	f023 0301 	bic.w	r3, r3, #1
 8003ffc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	3314      	adds	r3, #20
 8004006:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800400a:	633a      	str	r2, [r7, #48]	; 0x30
 800400c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800400e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004010:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004012:	e841 2300 	strex	r3, r2, [r1]
 8004016:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800401a:	2b00      	cmp	r3, #0
 800401c:	d1e3      	bne.n	8003fe6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2220      	movs	r2, #32
 8004022:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	330c      	adds	r3, #12
 8004032:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	e853 3f00 	ldrex	r3, [r3]
 800403a:	60fb      	str	r3, [r7, #12]
   return(result);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f023 0310 	bic.w	r3, r3, #16
 8004042:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	330c      	adds	r3, #12
 800404c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004050:	61fa      	str	r2, [r7, #28]
 8004052:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004054:	69b9      	ldr	r1, [r7, #24]
 8004056:	69fa      	ldr	r2, [r7, #28]
 8004058:	e841 2300 	strex	r3, r2, [r1]
 800405c:	617b      	str	r3, [r7, #20]
   return(result);
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d1e3      	bne.n	800402c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004064:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004068:	4619      	mov	r1, r3
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 f848 	bl	8004100 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004070:	e023      	b.n	80040ba <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004072:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800407a:	2b00      	cmp	r3, #0
 800407c:	d009      	beq.n	8004092 <HAL_UART_IRQHandler+0x4ea>
 800407e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004086:	2b00      	cmp	r3, #0
 8004088:	d003      	beq.n	8004092 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f000 f929 	bl	80042e2 <UART_Transmit_IT>
    return;
 8004090:	e014      	b.n	80040bc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800409a:	2b00      	cmp	r3, #0
 800409c:	d00e      	beq.n	80040bc <HAL_UART_IRQHandler+0x514>
 800409e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d008      	beq.n	80040bc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f000 f969 	bl	8004382 <UART_EndTransmit_IT>
    return;
 80040b0:	e004      	b.n	80040bc <HAL_UART_IRQHandler+0x514>
    return;
 80040b2:	bf00      	nop
 80040b4:	e002      	b.n	80040bc <HAL_UART_IRQHandler+0x514>
      return;
 80040b6:	bf00      	nop
 80040b8:	e000      	b.n	80040bc <HAL_UART_IRQHandler+0x514>
      return;
 80040ba:	bf00      	nop
  }
}
 80040bc:	37e8      	adds	r7, #232	; 0xe8
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop

080040c4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80040cc:	bf00      	nop
 80040ce:	370c      	adds	r7, #12
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80040e0:	bf00      	nop
 80040e2:	370c      	adds	r7, #12
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80040f4:	bf00      	nop
 80040f6:	370c      	adds	r7, #12
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	460b      	mov	r3, r1
 800410a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800410c:	bf00      	nop
 800410e:	370c      	adds	r7, #12
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b090      	sub	sp, #64	; 0x40
 800411c:	af00      	add	r7, sp, #0
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	603b      	str	r3, [r7, #0]
 8004124:	4613      	mov	r3, r2
 8004126:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004128:	e050      	b.n	80041cc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800412a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800412c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004130:	d04c      	beq.n	80041cc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004132:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004134:	2b00      	cmp	r3, #0
 8004136:	d007      	beq.n	8004148 <UART_WaitOnFlagUntilTimeout+0x30>
 8004138:	f7fd ff76 	bl	8002028 <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004144:	429a      	cmp	r2, r3
 8004146:	d241      	bcs.n	80041cc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	330c      	adds	r3, #12
 800414e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004152:	e853 3f00 	ldrex	r3, [r3]
 8004156:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800415e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	330c      	adds	r3, #12
 8004166:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004168:	637a      	str	r2, [r7, #52]	; 0x34
 800416a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800416c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800416e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004170:	e841 2300 	strex	r3, r2, [r1]
 8004174:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004178:	2b00      	cmp	r3, #0
 800417a:	d1e5      	bne.n	8004148 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	3314      	adds	r3, #20
 8004182:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	e853 3f00 	ldrex	r3, [r3]
 800418a:	613b      	str	r3, [r7, #16]
   return(result);
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	f023 0301 	bic.w	r3, r3, #1
 8004192:	63bb      	str	r3, [r7, #56]	; 0x38
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	3314      	adds	r3, #20
 800419a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800419c:	623a      	str	r2, [r7, #32]
 800419e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a0:	69f9      	ldr	r1, [r7, #28]
 80041a2:	6a3a      	ldr	r2, [r7, #32]
 80041a4:	e841 2300 	strex	r3, r2, [r1]
 80041a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d1e5      	bne.n	800417c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2220      	movs	r2, #32
 80041b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2220      	movs	r2, #32
 80041bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80041c8:	2303      	movs	r3, #3
 80041ca:	e00f      	b.n	80041ec <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	4013      	ands	r3, r2
 80041d6:	68ba      	ldr	r2, [r7, #8]
 80041d8:	429a      	cmp	r2, r3
 80041da:	bf0c      	ite	eq
 80041dc:	2301      	moveq	r3, #1
 80041de:	2300      	movne	r3, #0
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	461a      	mov	r2, r3
 80041e4:	79fb      	ldrb	r3, [r7, #7]
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d09f      	beq.n	800412a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3740      	adds	r7, #64	; 0x40
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b095      	sub	sp, #84	; 0x54
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	330c      	adds	r3, #12
 8004202:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004206:	e853 3f00 	ldrex	r3, [r3]
 800420a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800420c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800420e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004212:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	330c      	adds	r3, #12
 800421a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800421c:	643a      	str	r2, [r7, #64]	; 0x40
 800421e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004220:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004222:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004224:	e841 2300 	strex	r3, r2, [r1]
 8004228:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800422a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800422c:	2b00      	cmp	r3, #0
 800422e:	d1e5      	bne.n	80041fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	3314      	adds	r3, #20
 8004236:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004238:	6a3b      	ldr	r3, [r7, #32]
 800423a:	e853 3f00 	ldrex	r3, [r3]
 800423e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	f023 0301 	bic.w	r3, r3, #1
 8004246:	64bb      	str	r3, [r7, #72]	; 0x48
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	3314      	adds	r3, #20
 800424e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004250:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004252:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004254:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004256:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004258:	e841 2300 	strex	r3, r2, [r1]
 800425c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800425e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004260:	2b00      	cmp	r3, #0
 8004262:	d1e5      	bne.n	8004230 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004268:	2b01      	cmp	r3, #1
 800426a:	d119      	bne.n	80042a0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	330c      	adds	r3, #12
 8004272:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	e853 3f00 	ldrex	r3, [r3]
 800427a:	60bb      	str	r3, [r7, #8]
   return(result);
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	f023 0310 	bic.w	r3, r3, #16
 8004282:	647b      	str	r3, [r7, #68]	; 0x44
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	330c      	adds	r3, #12
 800428a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800428c:	61ba      	str	r2, [r7, #24]
 800428e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004290:	6979      	ldr	r1, [r7, #20]
 8004292:	69ba      	ldr	r2, [r7, #24]
 8004294:	e841 2300 	strex	r3, r2, [r1]
 8004298:	613b      	str	r3, [r7, #16]
   return(result);
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d1e5      	bne.n	800426c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2220      	movs	r2, #32
 80042a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	631a      	str	r2, [r3, #48]	; 0x30
}
 80042ae:	bf00      	nop
 80042b0:	3754      	adds	r7, #84	; 0x54
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr

080042ba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80042ba:	b580      	push	{r7, lr}
 80042bc:	b084      	sub	sp, #16
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2200      	movs	r2, #0
 80042cc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2200      	movs	r2, #0
 80042d2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80042d4:	68f8      	ldr	r0, [r7, #12]
 80042d6:	f7ff ff09 	bl	80040ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042da:	bf00      	nop
 80042dc:	3710      	adds	r7, #16
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}

080042e2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80042e2:	b480      	push	{r7}
 80042e4:	b085      	sub	sp, #20
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	2b21      	cmp	r3, #33	; 0x21
 80042f4:	d13e      	bne.n	8004374 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042fe:	d114      	bne.n	800432a <UART_Transmit_IT+0x48>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	691b      	ldr	r3, [r3, #16]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d110      	bne.n	800432a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a1b      	ldr	r3, [r3, #32]
 800430c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	881b      	ldrh	r3, [r3, #0]
 8004312:	461a      	mov	r2, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800431c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a1b      	ldr	r3, [r3, #32]
 8004322:	1c9a      	adds	r2, r3, #2
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	621a      	str	r2, [r3, #32]
 8004328:	e008      	b.n	800433c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a1b      	ldr	r3, [r3, #32]
 800432e:	1c59      	adds	r1, r3, #1
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	6211      	str	r1, [r2, #32]
 8004334:	781a      	ldrb	r2, [r3, #0]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004340:	b29b      	uxth	r3, r3
 8004342:	3b01      	subs	r3, #1
 8004344:	b29b      	uxth	r3, r3
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	4619      	mov	r1, r3
 800434a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800434c:	2b00      	cmp	r3, #0
 800434e:	d10f      	bne.n	8004370 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68da      	ldr	r2, [r3, #12]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800435e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68da      	ldr	r2, [r3, #12]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800436e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004370:	2300      	movs	r3, #0
 8004372:	e000      	b.n	8004376 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004374:	2302      	movs	r3, #2
  }
}
 8004376:	4618      	mov	r0, r3
 8004378:	3714      	adds	r7, #20
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr

08004382 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004382:	b580      	push	{r7, lr}
 8004384:	b082      	sub	sp, #8
 8004386:	af00      	add	r7, sp, #0
 8004388:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	68da      	ldr	r2, [r3, #12]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004398:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2220      	movs	r2, #32
 800439e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f7ff fe8e 	bl	80040c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80043a8:	2300      	movs	r3, #0
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3708      	adds	r7, #8
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}

080043b2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80043b2:	b580      	push	{r7, lr}
 80043b4:	b08c      	sub	sp, #48	; 0x30
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	2b22      	cmp	r3, #34	; 0x22
 80043c4:	f040 80ab 	bne.w	800451e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043d0:	d117      	bne.n	8004402 <UART_Receive_IT+0x50>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d113      	bne.n	8004402 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80043da:	2300      	movs	r3, #0
 80043dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043f0:	b29a      	uxth	r2, r3
 80043f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043fa:	1c9a      	adds	r2, r3, #2
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	629a      	str	r2, [r3, #40]	; 0x28
 8004400:	e026      	b.n	8004450 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004406:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004408:	2300      	movs	r3, #0
 800440a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004414:	d007      	beq.n	8004426 <UART_Receive_IT+0x74>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d10a      	bne.n	8004434 <UART_Receive_IT+0x82>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d106      	bne.n	8004434 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	b2da      	uxtb	r2, r3
 800442e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004430:	701a      	strb	r2, [r3, #0]
 8004432:	e008      	b.n	8004446 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	b2db      	uxtb	r3, r3
 800443c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004440:	b2da      	uxtb	r2, r3
 8004442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004444:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800444a:	1c5a      	adds	r2, r3, #1
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004454:	b29b      	uxth	r3, r3
 8004456:	3b01      	subs	r3, #1
 8004458:	b29b      	uxth	r3, r3
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	4619      	mov	r1, r3
 800445e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004460:	2b00      	cmp	r3, #0
 8004462:	d15a      	bne.n	800451a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	68da      	ldr	r2, [r3, #12]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f022 0220 	bic.w	r2, r2, #32
 8004472:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	68da      	ldr	r2, [r3, #12]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004482:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	695a      	ldr	r2, [r3, #20]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f022 0201 	bic.w	r2, r2, #1
 8004492:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2220      	movs	r2, #32
 8004498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d135      	bne.n	8004510 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	330c      	adds	r3, #12
 80044b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	e853 3f00 	ldrex	r3, [r3]
 80044b8:	613b      	str	r3, [r7, #16]
   return(result);
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	f023 0310 	bic.w	r3, r3, #16
 80044c0:	627b      	str	r3, [r7, #36]	; 0x24
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	330c      	adds	r3, #12
 80044c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044ca:	623a      	str	r2, [r7, #32]
 80044cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ce:	69f9      	ldr	r1, [r7, #28]
 80044d0:	6a3a      	ldr	r2, [r7, #32]
 80044d2:	e841 2300 	strex	r3, r2, [r1]
 80044d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80044d8:	69bb      	ldr	r3, [r7, #24]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d1e5      	bne.n	80044aa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 0310 	and.w	r3, r3, #16
 80044e8:	2b10      	cmp	r3, #16
 80044ea:	d10a      	bne.n	8004502 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80044ec:	2300      	movs	r3, #0
 80044ee:	60fb      	str	r3, [r7, #12]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	60fb      	str	r3, [r7, #12]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	60fb      	str	r3, [r7, #12]
 8004500:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004506:	4619      	mov	r1, r3
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f7ff fdf9 	bl	8004100 <HAL_UARTEx_RxEventCallback>
 800450e:	e002      	b.n	8004516 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f7ff fde1 	bl	80040d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004516:	2300      	movs	r3, #0
 8004518:	e002      	b.n	8004520 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800451a:	2300      	movs	r3, #0
 800451c:	e000      	b.n	8004520 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800451e:	2302      	movs	r3, #2
  }
}
 8004520:	4618      	mov	r0, r3
 8004522:	3730      	adds	r7, #48	; 0x30
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004528:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800452c:	b0c0      	sub	sp, #256	; 0x100
 800452e:	af00      	add	r7, sp, #0
 8004530:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	691b      	ldr	r3, [r3, #16]
 800453c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004544:	68d9      	ldr	r1, [r3, #12]
 8004546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	ea40 0301 	orr.w	r3, r0, r1
 8004550:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004556:	689a      	ldr	r2, [r3, #8]
 8004558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800455c:	691b      	ldr	r3, [r3, #16]
 800455e:	431a      	orrs	r2, r3
 8004560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004564:	695b      	ldr	r3, [r3, #20]
 8004566:	431a      	orrs	r2, r3
 8004568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800456c:	69db      	ldr	r3, [r3, #28]
 800456e:	4313      	orrs	r3, r2
 8004570:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004580:	f021 010c 	bic.w	r1, r1, #12
 8004584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800458e:	430b      	orrs	r3, r1
 8004590:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	695b      	ldr	r3, [r3, #20]
 800459a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800459e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045a2:	6999      	ldr	r1, [r3, #24]
 80045a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	ea40 0301 	orr.w	r3, r0, r1
 80045ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80045b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	4b8f      	ldr	r3, [pc, #572]	; (80047f4 <UART_SetConfig+0x2cc>)
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d005      	beq.n	80045c8 <UART_SetConfig+0xa0>
 80045bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	4b8d      	ldr	r3, [pc, #564]	; (80047f8 <UART_SetConfig+0x2d0>)
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d104      	bne.n	80045d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80045c8:	f7ff f92a 	bl	8003820 <HAL_RCC_GetPCLK2Freq>
 80045cc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80045d0:	e003      	b.n	80045da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80045d2:	f7ff f911 	bl	80037f8 <HAL_RCC_GetPCLK1Freq>
 80045d6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045de:	69db      	ldr	r3, [r3, #28]
 80045e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045e4:	f040 810c 	bne.w	8004800 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80045e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045ec:	2200      	movs	r2, #0
 80045ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80045f2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80045f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80045fa:	4622      	mov	r2, r4
 80045fc:	462b      	mov	r3, r5
 80045fe:	1891      	adds	r1, r2, r2
 8004600:	65b9      	str	r1, [r7, #88]	; 0x58
 8004602:	415b      	adcs	r3, r3
 8004604:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004606:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800460a:	4621      	mov	r1, r4
 800460c:	eb12 0801 	adds.w	r8, r2, r1
 8004610:	4629      	mov	r1, r5
 8004612:	eb43 0901 	adc.w	r9, r3, r1
 8004616:	f04f 0200 	mov.w	r2, #0
 800461a:	f04f 0300 	mov.w	r3, #0
 800461e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004622:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004626:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800462a:	4690      	mov	r8, r2
 800462c:	4699      	mov	r9, r3
 800462e:	4623      	mov	r3, r4
 8004630:	eb18 0303 	adds.w	r3, r8, r3
 8004634:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004638:	462b      	mov	r3, r5
 800463a:	eb49 0303 	adc.w	r3, r9, r3
 800463e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004642:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800464e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004652:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004656:	460b      	mov	r3, r1
 8004658:	18db      	adds	r3, r3, r3
 800465a:	653b      	str	r3, [r7, #80]	; 0x50
 800465c:	4613      	mov	r3, r2
 800465e:	eb42 0303 	adc.w	r3, r2, r3
 8004662:	657b      	str	r3, [r7, #84]	; 0x54
 8004664:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004668:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800466c:	f7fb fe08 	bl	8000280 <__aeabi_uldivmod>
 8004670:	4602      	mov	r2, r0
 8004672:	460b      	mov	r3, r1
 8004674:	4b61      	ldr	r3, [pc, #388]	; (80047fc <UART_SetConfig+0x2d4>)
 8004676:	fba3 2302 	umull	r2, r3, r3, r2
 800467a:	095b      	lsrs	r3, r3, #5
 800467c:	011c      	lsls	r4, r3, #4
 800467e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004682:	2200      	movs	r2, #0
 8004684:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004688:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800468c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004690:	4642      	mov	r2, r8
 8004692:	464b      	mov	r3, r9
 8004694:	1891      	adds	r1, r2, r2
 8004696:	64b9      	str	r1, [r7, #72]	; 0x48
 8004698:	415b      	adcs	r3, r3
 800469a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800469c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80046a0:	4641      	mov	r1, r8
 80046a2:	eb12 0a01 	adds.w	sl, r2, r1
 80046a6:	4649      	mov	r1, r9
 80046a8:	eb43 0b01 	adc.w	fp, r3, r1
 80046ac:	f04f 0200 	mov.w	r2, #0
 80046b0:	f04f 0300 	mov.w	r3, #0
 80046b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80046b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80046bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046c0:	4692      	mov	sl, r2
 80046c2:	469b      	mov	fp, r3
 80046c4:	4643      	mov	r3, r8
 80046c6:	eb1a 0303 	adds.w	r3, sl, r3
 80046ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80046ce:	464b      	mov	r3, r9
 80046d0:	eb4b 0303 	adc.w	r3, fp, r3
 80046d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80046d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80046e4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80046e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80046ec:	460b      	mov	r3, r1
 80046ee:	18db      	adds	r3, r3, r3
 80046f0:	643b      	str	r3, [r7, #64]	; 0x40
 80046f2:	4613      	mov	r3, r2
 80046f4:	eb42 0303 	adc.w	r3, r2, r3
 80046f8:	647b      	str	r3, [r7, #68]	; 0x44
 80046fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80046fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004702:	f7fb fdbd 	bl	8000280 <__aeabi_uldivmod>
 8004706:	4602      	mov	r2, r0
 8004708:	460b      	mov	r3, r1
 800470a:	4611      	mov	r1, r2
 800470c:	4b3b      	ldr	r3, [pc, #236]	; (80047fc <UART_SetConfig+0x2d4>)
 800470e:	fba3 2301 	umull	r2, r3, r3, r1
 8004712:	095b      	lsrs	r3, r3, #5
 8004714:	2264      	movs	r2, #100	; 0x64
 8004716:	fb02 f303 	mul.w	r3, r2, r3
 800471a:	1acb      	subs	r3, r1, r3
 800471c:	00db      	lsls	r3, r3, #3
 800471e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004722:	4b36      	ldr	r3, [pc, #216]	; (80047fc <UART_SetConfig+0x2d4>)
 8004724:	fba3 2302 	umull	r2, r3, r3, r2
 8004728:	095b      	lsrs	r3, r3, #5
 800472a:	005b      	lsls	r3, r3, #1
 800472c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004730:	441c      	add	r4, r3
 8004732:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004736:	2200      	movs	r2, #0
 8004738:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800473c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004740:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004744:	4642      	mov	r2, r8
 8004746:	464b      	mov	r3, r9
 8004748:	1891      	adds	r1, r2, r2
 800474a:	63b9      	str	r1, [r7, #56]	; 0x38
 800474c:	415b      	adcs	r3, r3
 800474e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004750:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004754:	4641      	mov	r1, r8
 8004756:	1851      	adds	r1, r2, r1
 8004758:	6339      	str	r1, [r7, #48]	; 0x30
 800475a:	4649      	mov	r1, r9
 800475c:	414b      	adcs	r3, r1
 800475e:	637b      	str	r3, [r7, #52]	; 0x34
 8004760:	f04f 0200 	mov.w	r2, #0
 8004764:	f04f 0300 	mov.w	r3, #0
 8004768:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800476c:	4659      	mov	r1, fp
 800476e:	00cb      	lsls	r3, r1, #3
 8004770:	4651      	mov	r1, sl
 8004772:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004776:	4651      	mov	r1, sl
 8004778:	00ca      	lsls	r2, r1, #3
 800477a:	4610      	mov	r0, r2
 800477c:	4619      	mov	r1, r3
 800477e:	4603      	mov	r3, r0
 8004780:	4642      	mov	r2, r8
 8004782:	189b      	adds	r3, r3, r2
 8004784:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004788:	464b      	mov	r3, r9
 800478a:	460a      	mov	r2, r1
 800478c:	eb42 0303 	adc.w	r3, r2, r3
 8004790:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80047a0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80047a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80047a8:	460b      	mov	r3, r1
 80047aa:	18db      	adds	r3, r3, r3
 80047ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80047ae:	4613      	mov	r3, r2
 80047b0:	eb42 0303 	adc.w	r3, r2, r3
 80047b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80047ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80047be:	f7fb fd5f 	bl	8000280 <__aeabi_uldivmod>
 80047c2:	4602      	mov	r2, r0
 80047c4:	460b      	mov	r3, r1
 80047c6:	4b0d      	ldr	r3, [pc, #52]	; (80047fc <UART_SetConfig+0x2d4>)
 80047c8:	fba3 1302 	umull	r1, r3, r3, r2
 80047cc:	095b      	lsrs	r3, r3, #5
 80047ce:	2164      	movs	r1, #100	; 0x64
 80047d0:	fb01 f303 	mul.w	r3, r1, r3
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	00db      	lsls	r3, r3, #3
 80047d8:	3332      	adds	r3, #50	; 0x32
 80047da:	4a08      	ldr	r2, [pc, #32]	; (80047fc <UART_SetConfig+0x2d4>)
 80047dc:	fba2 2303 	umull	r2, r3, r2, r3
 80047e0:	095b      	lsrs	r3, r3, #5
 80047e2:	f003 0207 	and.w	r2, r3, #7
 80047e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4422      	add	r2, r4
 80047ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80047f0:	e105      	b.n	80049fe <UART_SetConfig+0x4d6>
 80047f2:	bf00      	nop
 80047f4:	40011000 	.word	0x40011000
 80047f8:	40011400 	.word	0x40011400
 80047fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004800:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004804:	2200      	movs	r2, #0
 8004806:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800480a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800480e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004812:	4642      	mov	r2, r8
 8004814:	464b      	mov	r3, r9
 8004816:	1891      	adds	r1, r2, r2
 8004818:	6239      	str	r1, [r7, #32]
 800481a:	415b      	adcs	r3, r3
 800481c:	627b      	str	r3, [r7, #36]	; 0x24
 800481e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004822:	4641      	mov	r1, r8
 8004824:	1854      	adds	r4, r2, r1
 8004826:	4649      	mov	r1, r9
 8004828:	eb43 0501 	adc.w	r5, r3, r1
 800482c:	f04f 0200 	mov.w	r2, #0
 8004830:	f04f 0300 	mov.w	r3, #0
 8004834:	00eb      	lsls	r3, r5, #3
 8004836:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800483a:	00e2      	lsls	r2, r4, #3
 800483c:	4614      	mov	r4, r2
 800483e:	461d      	mov	r5, r3
 8004840:	4643      	mov	r3, r8
 8004842:	18e3      	adds	r3, r4, r3
 8004844:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004848:	464b      	mov	r3, r9
 800484a:	eb45 0303 	adc.w	r3, r5, r3
 800484e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800485e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004862:	f04f 0200 	mov.w	r2, #0
 8004866:	f04f 0300 	mov.w	r3, #0
 800486a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800486e:	4629      	mov	r1, r5
 8004870:	008b      	lsls	r3, r1, #2
 8004872:	4621      	mov	r1, r4
 8004874:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004878:	4621      	mov	r1, r4
 800487a:	008a      	lsls	r2, r1, #2
 800487c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004880:	f7fb fcfe 	bl	8000280 <__aeabi_uldivmod>
 8004884:	4602      	mov	r2, r0
 8004886:	460b      	mov	r3, r1
 8004888:	4b60      	ldr	r3, [pc, #384]	; (8004a0c <UART_SetConfig+0x4e4>)
 800488a:	fba3 2302 	umull	r2, r3, r3, r2
 800488e:	095b      	lsrs	r3, r3, #5
 8004890:	011c      	lsls	r4, r3, #4
 8004892:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004896:	2200      	movs	r2, #0
 8004898:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800489c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80048a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80048a4:	4642      	mov	r2, r8
 80048a6:	464b      	mov	r3, r9
 80048a8:	1891      	adds	r1, r2, r2
 80048aa:	61b9      	str	r1, [r7, #24]
 80048ac:	415b      	adcs	r3, r3
 80048ae:	61fb      	str	r3, [r7, #28]
 80048b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048b4:	4641      	mov	r1, r8
 80048b6:	1851      	adds	r1, r2, r1
 80048b8:	6139      	str	r1, [r7, #16]
 80048ba:	4649      	mov	r1, r9
 80048bc:	414b      	adcs	r3, r1
 80048be:	617b      	str	r3, [r7, #20]
 80048c0:	f04f 0200 	mov.w	r2, #0
 80048c4:	f04f 0300 	mov.w	r3, #0
 80048c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80048cc:	4659      	mov	r1, fp
 80048ce:	00cb      	lsls	r3, r1, #3
 80048d0:	4651      	mov	r1, sl
 80048d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048d6:	4651      	mov	r1, sl
 80048d8:	00ca      	lsls	r2, r1, #3
 80048da:	4610      	mov	r0, r2
 80048dc:	4619      	mov	r1, r3
 80048de:	4603      	mov	r3, r0
 80048e0:	4642      	mov	r2, r8
 80048e2:	189b      	adds	r3, r3, r2
 80048e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80048e8:	464b      	mov	r3, r9
 80048ea:	460a      	mov	r2, r1
 80048ec:	eb42 0303 	adc.w	r3, r2, r3
 80048f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80048f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80048fe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004900:	f04f 0200 	mov.w	r2, #0
 8004904:	f04f 0300 	mov.w	r3, #0
 8004908:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800490c:	4649      	mov	r1, r9
 800490e:	008b      	lsls	r3, r1, #2
 8004910:	4641      	mov	r1, r8
 8004912:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004916:	4641      	mov	r1, r8
 8004918:	008a      	lsls	r2, r1, #2
 800491a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800491e:	f7fb fcaf 	bl	8000280 <__aeabi_uldivmod>
 8004922:	4602      	mov	r2, r0
 8004924:	460b      	mov	r3, r1
 8004926:	4b39      	ldr	r3, [pc, #228]	; (8004a0c <UART_SetConfig+0x4e4>)
 8004928:	fba3 1302 	umull	r1, r3, r3, r2
 800492c:	095b      	lsrs	r3, r3, #5
 800492e:	2164      	movs	r1, #100	; 0x64
 8004930:	fb01 f303 	mul.w	r3, r1, r3
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	011b      	lsls	r3, r3, #4
 8004938:	3332      	adds	r3, #50	; 0x32
 800493a:	4a34      	ldr	r2, [pc, #208]	; (8004a0c <UART_SetConfig+0x4e4>)
 800493c:	fba2 2303 	umull	r2, r3, r2, r3
 8004940:	095b      	lsrs	r3, r3, #5
 8004942:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004946:	441c      	add	r4, r3
 8004948:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800494c:	2200      	movs	r2, #0
 800494e:	673b      	str	r3, [r7, #112]	; 0x70
 8004950:	677a      	str	r2, [r7, #116]	; 0x74
 8004952:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004956:	4642      	mov	r2, r8
 8004958:	464b      	mov	r3, r9
 800495a:	1891      	adds	r1, r2, r2
 800495c:	60b9      	str	r1, [r7, #8]
 800495e:	415b      	adcs	r3, r3
 8004960:	60fb      	str	r3, [r7, #12]
 8004962:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004966:	4641      	mov	r1, r8
 8004968:	1851      	adds	r1, r2, r1
 800496a:	6039      	str	r1, [r7, #0]
 800496c:	4649      	mov	r1, r9
 800496e:	414b      	adcs	r3, r1
 8004970:	607b      	str	r3, [r7, #4]
 8004972:	f04f 0200 	mov.w	r2, #0
 8004976:	f04f 0300 	mov.w	r3, #0
 800497a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800497e:	4659      	mov	r1, fp
 8004980:	00cb      	lsls	r3, r1, #3
 8004982:	4651      	mov	r1, sl
 8004984:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004988:	4651      	mov	r1, sl
 800498a:	00ca      	lsls	r2, r1, #3
 800498c:	4610      	mov	r0, r2
 800498e:	4619      	mov	r1, r3
 8004990:	4603      	mov	r3, r0
 8004992:	4642      	mov	r2, r8
 8004994:	189b      	adds	r3, r3, r2
 8004996:	66bb      	str	r3, [r7, #104]	; 0x68
 8004998:	464b      	mov	r3, r9
 800499a:	460a      	mov	r2, r1
 800499c:	eb42 0303 	adc.w	r3, r2, r3
 80049a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80049a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	663b      	str	r3, [r7, #96]	; 0x60
 80049ac:	667a      	str	r2, [r7, #100]	; 0x64
 80049ae:	f04f 0200 	mov.w	r2, #0
 80049b2:	f04f 0300 	mov.w	r3, #0
 80049b6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80049ba:	4649      	mov	r1, r9
 80049bc:	008b      	lsls	r3, r1, #2
 80049be:	4641      	mov	r1, r8
 80049c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049c4:	4641      	mov	r1, r8
 80049c6:	008a      	lsls	r2, r1, #2
 80049c8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80049cc:	f7fb fc58 	bl	8000280 <__aeabi_uldivmod>
 80049d0:	4602      	mov	r2, r0
 80049d2:	460b      	mov	r3, r1
 80049d4:	4b0d      	ldr	r3, [pc, #52]	; (8004a0c <UART_SetConfig+0x4e4>)
 80049d6:	fba3 1302 	umull	r1, r3, r3, r2
 80049da:	095b      	lsrs	r3, r3, #5
 80049dc:	2164      	movs	r1, #100	; 0x64
 80049de:	fb01 f303 	mul.w	r3, r1, r3
 80049e2:	1ad3      	subs	r3, r2, r3
 80049e4:	011b      	lsls	r3, r3, #4
 80049e6:	3332      	adds	r3, #50	; 0x32
 80049e8:	4a08      	ldr	r2, [pc, #32]	; (8004a0c <UART_SetConfig+0x4e4>)
 80049ea:	fba2 2303 	umull	r2, r3, r2, r3
 80049ee:	095b      	lsrs	r3, r3, #5
 80049f0:	f003 020f 	and.w	r2, r3, #15
 80049f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4422      	add	r2, r4
 80049fc:	609a      	str	r2, [r3, #8]
}
 80049fe:	bf00      	nop
 8004a00:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004a04:	46bd      	mov	sp, r7
 8004a06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a0a:	bf00      	nop
 8004a0c:	51eb851f 	.word	0x51eb851f

08004a10 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b087      	sub	sp, #28
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a24:	683a      	ldr	r2, [r7, #0]
 8004a26:	6812      	ldr	r2, [r2, #0]
 8004a28:	f023 0101 	bic.w	r1, r3, #1
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	2b08      	cmp	r3, #8
 8004a38:	d102      	bne.n	8004a40 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8004a3a:	2340      	movs	r3, #64	; 0x40
 8004a3c:	617b      	str	r3, [r7, #20]
 8004a3e:	e001      	b.n	8004a44 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8004a40:	2300      	movs	r3, #0
 8004a42:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8004a50:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8004a56:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8004a5c:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8004a62:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8004a68:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8004a6e:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8004a74:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8004a7a:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8004a80:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8004a86:	4313      	orrs	r3, r2
 8004a88:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	699b      	ldr	r3, [r3, #24]
 8004a8e:	693a      	ldr	r2, [r7, #16]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a98:	693a      	ldr	r2, [r7, #16]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 8004a9e:	4b10      	ldr	r3, [pc, #64]	; (8004ae0 <FSMC_NORSRAM_Init+0xd0>)
 8004aa0:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004aa8:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8004ab0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	43db      	mvns	r3, r3
 8004ac0:	ea02 0103 	and.w	r1, r2, r3
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	4319      	orrs	r1, r3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 8004ad2:	2300      	movs	r3, #0
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	371c      	adds	r7, #28
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr
 8004ae0:	0008fb7f 	.word	0x0008fb7f

08004ae4 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b085      	sub	sp, #20
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	60b9      	str	r1, [r7, #8]
 8004aee:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	1c5a      	adds	r2, r3, #1
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004afa:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	011b      	lsls	r3, r3, #4
 8004b08:	431a      	orrs	r2, r3
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	021b      	lsls	r3, r3, #8
 8004b10:	431a      	orrs	r2, r3
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	041b      	lsls	r3, r3, #16
 8004b18:	431a      	orrs	r2, r3
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	691b      	ldr	r3, [r3, #16]
 8004b1e:	3b01      	subs	r3, #1
 8004b20:	051b      	lsls	r3, r3, #20
 8004b22:	431a      	orrs	r2, r3
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	695b      	ldr	r3, [r3, #20]
 8004b28:	3b02      	subs	r3, #2
 8004b2a:	061b      	lsls	r3, r3, #24
 8004b2c:	431a      	orrs	r2, r3
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	699b      	ldr	r3, [r3, #24]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	3201      	adds	r2, #1
 8004b38:	4319      	orrs	r1, r3
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 8004b40:	2300      	movs	r3, #0
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3714      	adds	r7, #20
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr
	...

08004b50 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b085      	sub	sp, #20
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	60b9      	str	r1, [r7, #8]
 8004b5a:	607a      	str	r2, [r7, #4]
 8004b5c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b64:	d11d      	bne.n	8004ba2 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004b6e:	4b13      	ldr	r3, [pc, #76]	; (8004bbc <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8004b70:	4013      	ands	r3, r2
 8004b72:	68ba      	ldr	r2, [r7, #8]
 8004b74:	6811      	ldr	r1, [r2, #0]
 8004b76:	68ba      	ldr	r2, [r7, #8]
 8004b78:	6852      	ldr	r2, [r2, #4]
 8004b7a:	0112      	lsls	r2, r2, #4
 8004b7c:	4311      	orrs	r1, r2
 8004b7e:	68ba      	ldr	r2, [r7, #8]
 8004b80:	6892      	ldr	r2, [r2, #8]
 8004b82:	0212      	lsls	r2, r2, #8
 8004b84:	4311      	orrs	r1, r2
 8004b86:	68ba      	ldr	r2, [r7, #8]
 8004b88:	6992      	ldr	r2, [r2, #24]
 8004b8a:	4311      	orrs	r1, r2
 8004b8c:	68ba      	ldr	r2, [r7, #8]
 8004b8e:	68d2      	ldr	r2, [r2, #12]
 8004b90:	0412      	lsls	r2, r2, #16
 8004b92:	430a      	orrs	r2, r1
 8004b94:	ea43 0102 	orr.w	r1, r3, r2
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004ba0:	e005      	b.n	8004bae <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8004baa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8004bae:	2300      	movs	r3, #0
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3714      	adds	r7, #20
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr
 8004bbc:	cff00000 	.word	0xcff00000

08004bc0 <__errno>:
 8004bc0:	4b01      	ldr	r3, [pc, #4]	; (8004bc8 <__errno+0x8>)
 8004bc2:	6818      	ldr	r0, [r3, #0]
 8004bc4:	4770      	bx	lr
 8004bc6:	bf00      	nop
 8004bc8:	20000014 	.word	0x20000014

08004bcc <__libc_init_array>:
 8004bcc:	b570      	push	{r4, r5, r6, lr}
 8004bce:	4d0d      	ldr	r5, [pc, #52]	; (8004c04 <__libc_init_array+0x38>)
 8004bd0:	4c0d      	ldr	r4, [pc, #52]	; (8004c08 <__libc_init_array+0x3c>)
 8004bd2:	1b64      	subs	r4, r4, r5
 8004bd4:	10a4      	asrs	r4, r4, #2
 8004bd6:	2600      	movs	r6, #0
 8004bd8:	42a6      	cmp	r6, r4
 8004bda:	d109      	bne.n	8004bf0 <__libc_init_array+0x24>
 8004bdc:	4d0b      	ldr	r5, [pc, #44]	; (8004c0c <__libc_init_array+0x40>)
 8004bde:	4c0c      	ldr	r4, [pc, #48]	; (8004c10 <__libc_init_array+0x44>)
 8004be0:	f001 fa00 	bl	8005fe4 <_init>
 8004be4:	1b64      	subs	r4, r4, r5
 8004be6:	10a4      	asrs	r4, r4, #2
 8004be8:	2600      	movs	r6, #0
 8004bea:	42a6      	cmp	r6, r4
 8004bec:	d105      	bne.n	8004bfa <__libc_init_array+0x2e>
 8004bee:	bd70      	pop	{r4, r5, r6, pc}
 8004bf0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bf4:	4798      	blx	r3
 8004bf6:	3601      	adds	r6, #1
 8004bf8:	e7ee      	b.n	8004bd8 <__libc_init_array+0xc>
 8004bfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bfe:	4798      	blx	r3
 8004c00:	3601      	adds	r6, #1
 8004c02:	e7f2      	b.n	8004bea <__libc_init_array+0x1e>
 8004c04:	08006254 	.word	0x08006254
 8004c08:	08006254 	.word	0x08006254
 8004c0c:	08006254 	.word	0x08006254
 8004c10:	08006258 	.word	0x08006258

08004c14 <memset>:
 8004c14:	4402      	add	r2, r0
 8004c16:	4603      	mov	r3, r0
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d100      	bne.n	8004c1e <memset+0xa>
 8004c1c:	4770      	bx	lr
 8004c1e:	f803 1b01 	strb.w	r1, [r3], #1
 8004c22:	e7f9      	b.n	8004c18 <memset+0x4>

08004c24 <iprintf>:
 8004c24:	b40f      	push	{r0, r1, r2, r3}
 8004c26:	4b0a      	ldr	r3, [pc, #40]	; (8004c50 <iprintf+0x2c>)
 8004c28:	b513      	push	{r0, r1, r4, lr}
 8004c2a:	681c      	ldr	r4, [r3, #0]
 8004c2c:	b124      	cbz	r4, 8004c38 <iprintf+0x14>
 8004c2e:	69a3      	ldr	r3, [r4, #24]
 8004c30:	b913      	cbnz	r3, 8004c38 <iprintf+0x14>
 8004c32:	4620      	mov	r0, r4
 8004c34:	f000 fa7e 	bl	8005134 <__sinit>
 8004c38:	ab05      	add	r3, sp, #20
 8004c3a:	9a04      	ldr	r2, [sp, #16]
 8004c3c:	68a1      	ldr	r1, [r4, #8]
 8004c3e:	9301      	str	r3, [sp, #4]
 8004c40:	4620      	mov	r0, r4
 8004c42:	f000 fde3 	bl	800580c <_vfiprintf_r>
 8004c46:	b002      	add	sp, #8
 8004c48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c4c:	b004      	add	sp, #16
 8004c4e:	4770      	bx	lr
 8004c50:	20000014 	.word	0x20000014

08004c54 <_puts_r>:
 8004c54:	b570      	push	{r4, r5, r6, lr}
 8004c56:	460e      	mov	r6, r1
 8004c58:	4605      	mov	r5, r0
 8004c5a:	b118      	cbz	r0, 8004c64 <_puts_r+0x10>
 8004c5c:	6983      	ldr	r3, [r0, #24]
 8004c5e:	b90b      	cbnz	r3, 8004c64 <_puts_r+0x10>
 8004c60:	f000 fa68 	bl	8005134 <__sinit>
 8004c64:	69ab      	ldr	r3, [r5, #24]
 8004c66:	68ac      	ldr	r4, [r5, #8]
 8004c68:	b913      	cbnz	r3, 8004c70 <_puts_r+0x1c>
 8004c6a:	4628      	mov	r0, r5
 8004c6c:	f000 fa62 	bl	8005134 <__sinit>
 8004c70:	4b2c      	ldr	r3, [pc, #176]	; (8004d24 <_puts_r+0xd0>)
 8004c72:	429c      	cmp	r4, r3
 8004c74:	d120      	bne.n	8004cb8 <_puts_r+0x64>
 8004c76:	686c      	ldr	r4, [r5, #4]
 8004c78:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c7a:	07db      	lsls	r3, r3, #31
 8004c7c:	d405      	bmi.n	8004c8a <_puts_r+0x36>
 8004c7e:	89a3      	ldrh	r3, [r4, #12]
 8004c80:	0598      	lsls	r0, r3, #22
 8004c82:	d402      	bmi.n	8004c8a <_puts_r+0x36>
 8004c84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c86:	f000 faf3 	bl	8005270 <__retarget_lock_acquire_recursive>
 8004c8a:	89a3      	ldrh	r3, [r4, #12]
 8004c8c:	0719      	lsls	r1, r3, #28
 8004c8e:	d51d      	bpl.n	8004ccc <_puts_r+0x78>
 8004c90:	6923      	ldr	r3, [r4, #16]
 8004c92:	b1db      	cbz	r3, 8004ccc <_puts_r+0x78>
 8004c94:	3e01      	subs	r6, #1
 8004c96:	68a3      	ldr	r3, [r4, #8]
 8004c98:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004c9c:	3b01      	subs	r3, #1
 8004c9e:	60a3      	str	r3, [r4, #8]
 8004ca0:	bb39      	cbnz	r1, 8004cf2 <_puts_r+0x9e>
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	da38      	bge.n	8004d18 <_puts_r+0xc4>
 8004ca6:	4622      	mov	r2, r4
 8004ca8:	210a      	movs	r1, #10
 8004caa:	4628      	mov	r0, r5
 8004cac:	f000 f868 	bl	8004d80 <__swbuf_r>
 8004cb0:	3001      	adds	r0, #1
 8004cb2:	d011      	beq.n	8004cd8 <_puts_r+0x84>
 8004cb4:	250a      	movs	r5, #10
 8004cb6:	e011      	b.n	8004cdc <_puts_r+0x88>
 8004cb8:	4b1b      	ldr	r3, [pc, #108]	; (8004d28 <_puts_r+0xd4>)
 8004cba:	429c      	cmp	r4, r3
 8004cbc:	d101      	bne.n	8004cc2 <_puts_r+0x6e>
 8004cbe:	68ac      	ldr	r4, [r5, #8]
 8004cc0:	e7da      	b.n	8004c78 <_puts_r+0x24>
 8004cc2:	4b1a      	ldr	r3, [pc, #104]	; (8004d2c <_puts_r+0xd8>)
 8004cc4:	429c      	cmp	r4, r3
 8004cc6:	bf08      	it	eq
 8004cc8:	68ec      	ldreq	r4, [r5, #12]
 8004cca:	e7d5      	b.n	8004c78 <_puts_r+0x24>
 8004ccc:	4621      	mov	r1, r4
 8004cce:	4628      	mov	r0, r5
 8004cd0:	f000 f8a8 	bl	8004e24 <__swsetup_r>
 8004cd4:	2800      	cmp	r0, #0
 8004cd6:	d0dd      	beq.n	8004c94 <_puts_r+0x40>
 8004cd8:	f04f 35ff 	mov.w	r5, #4294967295
 8004cdc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004cde:	07da      	lsls	r2, r3, #31
 8004ce0:	d405      	bmi.n	8004cee <_puts_r+0x9a>
 8004ce2:	89a3      	ldrh	r3, [r4, #12]
 8004ce4:	059b      	lsls	r3, r3, #22
 8004ce6:	d402      	bmi.n	8004cee <_puts_r+0x9a>
 8004ce8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004cea:	f000 fac2 	bl	8005272 <__retarget_lock_release_recursive>
 8004cee:	4628      	mov	r0, r5
 8004cf0:	bd70      	pop	{r4, r5, r6, pc}
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	da04      	bge.n	8004d00 <_puts_r+0xac>
 8004cf6:	69a2      	ldr	r2, [r4, #24]
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	dc06      	bgt.n	8004d0a <_puts_r+0xb6>
 8004cfc:	290a      	cmp	r1, #10
 8004cfe:	d004      	beq.n	8004d0a <_puts_r+0xb6>
 8004d00:	6823      	ldr	r3, [r4, #0]
 8004d02:	1c5a      	adds	r2, r3, #1
 8004d04:	6022      	str	r2, [r4, #0]
 8004d06:	7019      	strb	r1, [r3, #0]
 8004d08:	e7c5      	b.n	8004c96 <_puts_r+0x42>
 8004d0a:	4622      	mov	r2, r4
 8004d0c:	4628      	mov	r0, r5
 8004d0e:	f000 f837 	bl	8004d80 <__swbuf_r>
 8004d12:	3001      	adds	r0, #1
 8004d14:	d1bf      	bne.n	8004c96 <_puts_r+0x42>
 8004d16:	e7df      	b.n	8004cd8 <_puts_r+0x84>
 8004d18:	6823      	ldr	r3, [r4, #0]
 8004d1a:	250a      	movs	r5, #10
 8004d1c:	1c5a      	adds	r2, r3, #1
 8004d1e:	6022      	str	r2, [r4, #0]
 8004d20:	701d      	strb	r5, [r3, #0]
 8004d22:	e7db      	b.n	8004cdc <_puts_r+0x88>
 8004d24:	080061d8 	.word	0x080061d8
 8004d28:	080061f8 	.word	0x080061f8
 8004d2c:	080061b8 	.word	0x080061b8

08004d30 <puts>:
 8004d30:	4b02      	ldr	r3, [pc, #8]	; (8004d3c <puts+0xc>)
 8004d32:	4601      	mov	r1, r0
 8004d34:	6818      	ldr	r0, [r3, #0]
 8004d36:	f7ff bf8d 	b.w	8004c54 <_puts_r>
 8004d3a:	bf00      	nop
 8004d3c:	20000014 	.word	0x20000014

08004d40 <siprintf>:
 8004d40:	b40e      	push	{r1, r2, r3}
 8004d42:	b500      	push	{lr}
 8004d44:	b09c      	sub	sp, #112	; 0x70
 8004d46:	ab1d      	add	r3, sp, #116	; 0x74
 8004d48:	9002      	str	r0, [sp, #8]
 8004d4a:	9006      	str	r0, [sp, #24]
 8004d4c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004d50:	4809      	ldr	r0, [pc, #36]	; (8004d78 <siprintf+0x38>)
 8004d52:	9107      	str	r1, [sp, #28]
 8004d54:	9104      	str	r1, [sp, #16]
 8004d56:	4909      	ldr	r1, [pc, #36]	; (8004d7c <siprintf+0x3c>)
 8004d58:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d5c:	9105      	str	r1, [sp, #20]
 8004d5e:	6800      	ldr	r0, [r0, #0]
 8004d60:	9301      	str	r3, [sp, #4]
 8004d62:	a902      	add	r1, sp, #8
 8004d64:	f000 fc28 	bl	80055b8 <_svfiprintf_r>
 8004d68:	9b02      	ldr	r3, [sp, #8]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	701a      	strb	r2, [r3, #0]
 8004d6e:	b01c      	add	sp, #112	; 0x70
 8004d70:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d74:	b003      	add	sp, #12
 8004d76:	4770      	bx	lr
 8004d78:	20000014 	.word	0x20000014
 8004d7c:	ffff0208 	.word	0xffff0208

08004d80 <__swbuf_r>:
 8004d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d82:	460e      	mov	r6, r1
 8004d84:	4614      	mov	r4, r2
 8004d86:	4605      	mov	r5, r0
 8004d88:	b118      	cbz	r0, 8004d92 <__swbuf_r+0x12>
 8004d8a:	6983      	ldr	r3, [r0, #24]
 8004d8c:	b90b      	cbnz	r3, 8004d92 <__swbuf_r+0x12>
 8004d8e:	f000 f9d1 	bl	8005134 <__sinit>
 8004d92:	4b21      	ldr	r3, [pc, #132]	; (8004e18 <__swbuf_r+0x98>)
 8004d94:	429c      	cmp	r4, r3
 8004d96:	d12b      	bne.n	8004df0 <__swbuf_r+0x70>
 8004d98:	686c      	ldr	r4, [r5, #4]
 8004d9a:	69a3      	ldr	r3, [r4, #24]
 8004d9c:	60a3      	str	r3, [r4, #8]
 8004d9e:	89a3      	ldrh	r3, [r4, #12]
 8004da0:	071a      	lsls	r2, r3, #28
 8004da2:	d52f      	bpl.n	8004e04 <__swbuf_r+0x84>
 8004da4:	6923      	ldr	r3, [r4, #16]
 8004da6:	b36b      	cbz	r3, 8004e04 <__swbuf_r+0x84>
 8004da8:	6923      	ldr	r3, [r4, #16]
 8004daa:	6820      	ldr	r0, [r4, #0]
 8004dac:	1ac0      	subs	r0, r0, r3
 8004dae:	6963      	ldr	r3, [r4, #20]
 8004db0:	b2f6      	uxtb	r6, r6
 8004db2:	4283      	cmp	r3, r0
 8004db4:	4637      	mov	r7, r6
 8004db6:	dc04      	bgt.n	8004dc2 <__swbuf_r+0x42>
 8004db8:	4621      	mov	r1, r4
 8004dba:	4628      	mov	r0, r5
 8004dbc:	f000 f926 	bl	800500c <_fflush_r>
 8004dc0:	bb30      	cbnz	r0, 8004e10 <__swbuf_r+0x90>
 8004dc2:	68a3      	ldr	r3, [r4, #8]
 8004dc4:	3b01      	subs	r3, #1
 8004dc6:	60a3      	str	r3, [r4, #8]
 8004dc8:	6823      	ldr	r3, [r4, #0]
 8004dca:	1c5a      	adds	r2, r3, #1
 8004dcc:	6022      	str	r2, [r4, #0]
 8004dce:	701e      	strb	r6, [r3, #0]
 8004dd0:	6963      	ldr	r3, [r4, #20]
 8004dd2:	3001      	adds	r0, #1
 8004dd4:	4283      	cmp	r3, r0
 8004dd6:	d004      	beq.n	8004de2 <__swbuf_r+0x62>
 8004dd8:	89a3      	ldrh	r3, [r4, #12]
 8004dda:	07db      	lsls	r3, r3, #31
 8004ddc:	d506      	bpl.n	8004dec <__swbuf_r+0x6c>
 8004dde:	2e0a      	cmp	r6, #10
 8004de0:	d104      	bne.n	8004dec <__swbuf_r+0x6c>
 8004de2:	4621      	mov	r1, r4
 8004de4:	4628      	mov	r0, r5
 8004de6:	f000 f911 	bl	800500c <_fflush_r>
 8004dea:	b988      	cbnz	r0, 8004e10 <__swbuf_r+0x90>
 8004dec:	4638      	mov	r0, r7
 8004dee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004df0:	4b0a      	ldr	r3, [pc, #40]	; (8004e1c <__swbuf_r+0x9c>)
 8004df2:	429c      	cmp	r4, r3
 8004df4:	d101      	bne.n	8004dfa <__swbuf_r+0x7a>
 8004df6:	68ac      	ldr	r4, [r5, #8]
 8004df8:	e7cf      	b.n	8004d9a <__swbuf_r+0x1a>
 8004dfa:	4b09      	ldr	r3, [pc, #36]	; (8004e20 <__swbuf_r+0xa0>)
 8004dfc:	429c      	cmp	r4, r3
 8004dfe:	bf08      	it	eq
 8004e00:	68ec      	ldreq	r4, [r5, #12]
 8004e02:	e7ca      	b.n	8004d9a <__swbuf_r+0x1a>
 8004e04:	4621      	mov	r1, r4
 8004e06:	4628      	mov	r0, r5
 8004e08:	f000 f80c 	bl	8004e24 <__swsetup_r>
 8004e0c:	2800      	cmp	r0, #0
 8004e0e:	d0cb      	beq.n	8004da8 <__swbuf_r+0x28>
 8004e10:	f04f 37ff 	mov.w	r7, #4294967295
 8004e14:	e7ea      	b.n	8004dec <__swbuf_r+0x6c>
 8004e16:	bf00      	nop
 8004e18:	080061d8 	.word	0x080061d8
 8004e1c:	080061f8 	.word	0x080061f8
 8004e20:	080061b8 	.word	0x080061b8

08004e24 <__swsetup_r>:
 8004e24:	4b32      	ldr	r3, [pc, #200]	; (8004ef0 <__swsetup_r+0xcc>)
 8004e26:	b570      	push	{r4, r5, r6, lr}
 8004e28:	681d      	ldr	r5, [r3, #0]
 8004e2a:	4606      	mov	r6, r0
 8004e2c:	460c      	mov	r4, r1
 8004e2e:	b125      	cbz	r5, 8004e3a <__swsetup_r+0x16>
 8004e30:	69ab      	ldr	r3, [r5, #24]
 8004e32:	b913      	cbnz	r3, 8004e3a <__swsetup_r+0x16>
 8004e34:	4628      	mov	r0, r5
 8004e36:	f000 f97d 	bl	8005134 <__sinit>
 8004e3a:	4b2e      	ldr	r3, [pc, #184]	; (8004ef4 <__swsetup_r+0xd0>)
 8004e3c:	429c      	cmp	r4, r3
 8004e3e:	d10f      	bne.n	8004e60 <__swsetup_r+0x3c>
 8004e40:	686c      	ldr	r4, [r5, #4]
 8004e42:	89a3      	ldrh	r3, [r4, #12]
 8004e44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004e48:	0719      	lsls	r1, r3, #28
 8004e4a:	d42c      	bmi.n	8004ea6 <__swsetup_r+0x82>
 8004e4c:	06dd      	lsls	r5, r3, #27
 8004e4e:	d411      	bmi.n	8004e74 <__swsetup_r+0x50>
 8004e50:	2309      	movs	r3, #9
 8004e52:	6033      	str	r3, [r6, #0]
 8004e54:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004e58:	81a3      	strh	r3, [r4, #12]
 8004e5a:	f04f 30ff 	mov.w	r0, #4294967295
 8004e5e:	e03e      	b.n	8004ede <__swsetup_r+0xba>
 8004e60:	4b25      	ldr	r3, [pc, #148]	; (8004ef8 <__swsetup_r+0xd4>)
 8004e62:	429c      	cmp	r4, r3
 8004e64:	d101      	bne.n	8004e6a <__swsetup_r+0x46>
 8004e66:	68ac      	ldr	r4, [r5, #8]
 8004e68:	e7eb      	b.n	8004e42 <__swsetup_r+0x1e>
 8004e6a:	4b24      	ldr	r3, [pc, #144]	; (8004efc <__swsetup_r+0xd8>)
 8004e6c:	429c      	cmp	r4, r3
 8004e6e:	bf08      	it	eq
 8004e70:	68ec      	ldreq	r4, [r5, #12]
 8004e72:	e7e6      	b.n	8004e42 <__swsetup_r+0x1e>
 8004e74:	0758      	lsls	r0, r3, #29
 8004e76:	d512      	bpl.n	8004e9e <__swsetup_r+0x7a>
 8004e78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e7a:	b141      	cbz	r1, 8004e8e <__swsetup_r+0x6a>
 8004e7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e80:	4299      	cmp	r1, r3
 8004e82:	d002      	beq.n	8004e8a <__swsetup_r+0x66>
 8004e84:	4630      	mov	r0, r6
 8004e86:	f000 fa5b 	bl	8005340 <_free_r>
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	6363      	str	r3, [r4, #52]	; 0x34
 8004e8e:	89a3      	ldrh	r3, [r4, #12]
 8004e90:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004e94:	81a3      	strh	r3, [r4, #12]
 8004e96:	2300      	movs	r3, #0
 8004e98:	6063      	str	r3, [r4, #4]
 8004e9a:	6923      	ldr	r3, [r4, #16]
 8004e9c:	6023      	str	r3, [r4, #0]
 8004e9e:	89a3      	ldrh	r3, [r4, #12]
 8004ea0:	f043 0308 	orr.w	r3, r3, #8
 8004ea4:	81a3      	strh	r3, [r4, #12]
 8004ea6:	6923      	ldr	r3, [r4, #16]
 8004ea8:	b94b      	cbnz	r3, 8004ebe <__swsetup_r+0x9a>
 8004eaa:	89a3      	ldrh	r3, [r4, #12]
 8004eac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004eb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004eb4:	d003      	beq.n	8004ebe <__swsetup_r+0x9a>
 8004eb6:	4621      	mov	r1, r4
 8004eb8:	4630      	mov	r0, r6
 8004eba:	f000 fa01 	bl	80052c0 <__smakebuf_r>
 8004ebe:	89a0      	ldrh	r0, [r4, #12]
 8004ec0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004ec4:	f010 0301 	ands.w	r3, r0, #1
 8004ec8:	d00a      	beq.n	8004ee0 <__swsetup_r+0xbc>
 8004eca:	2300      	movs	r3, #0
 8004ecc:	60a3      	str	r3, [r4, #8]
 8004ece:	6963      	ldr	r3, [r4, #20]
 8004ed0:	425b      	negs	r3, r3
 8004ed2:	61a3      	str	r3, [r4, #24]
 8004ed4:	6923      	ldr	r3, [r4, #16]
 8004ed6:	b943      	cbnz	r3, 8004eea <__swsetup_r+0xc6>
 8004ed8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004edc:	d1ba      	bne.n	8004e54 <__swsetup_r+0x30>
 8004ede:	bd70      	pop	{r4, r5, r6, pc}
 8004ee0:	0781      	lsls	r1, r0, #30
 8004ee2:	bf58      	it	pl
 8004ee4:	6963      	ldrpl	r3, [r4, #20]
 8004ee6:	60a3      	str	r3, [r4, #8]
 8004ee8:	e7f4      	b.n	8004ed4 <__swsetup_r+0xb0>
 8004eea:	2000      	movs	r0, #0
 8004eec:	e7f7      	b.n	8004ede <__swsetup_r+0xba>
 8004eee:	bf00      	nop
 8004ef0:	20000014 	.word	0x20000014
 8004ef4:	080061d8 	.word	0x080061d8
 8004ef8:	080061f8 	.word	0x080061f8
 8004efc:	080061b8 	.word	0x080061b8

08004f00 <__sflush_r>:
 8004f00:	898a      	ldrh	r2, [r1, #12]
 8004f02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f06:	4605      	mov	r5, r0
 8004f08:	0710      	lsls	r0, r2, #28
 8004f0a:	460c      	mov	r4, r1
 8004f0c:	d458      	bmi.n	8004fc0 <__sflush_r+0xc0>
 8004f0e:	684b      	ldr	r3, [r1, #4]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	dc05      	bgt.n	8004f20 <__sflush_r+0x20>
 8004f14:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	dc02      	bgt.n	8004f20 <__sflush_r+0x20>
 8004f1a:	2000      	movs	r0, #0
 8004f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004f22:	2e00      	cmp	r6, #0
 8004f24:	d0f9      	beq.n	8004f1a <__sflush_r+0x1a>
 8004f26:	2300      	movs	r3, #0
 8004f28:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004f2c:	682f      	ldr	r7, [r5, #0]
 8004f2e:	602b      	str	r3, [r5, #0]
 8004f30:	d032      	beq.n	8004f98 <__sflush_r+0x98>
 8004f32:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004f34:	89a3      	ldrh	r3, [r4, #12]
 8004f36:	075a      	lsls	r2, r3, #29
 8004f38:	d505      	bpl.n	8004f46 <__sflush_r+0x46>
 8004f3a:	6863      	ldr	r3, [r4, #4]
 8004f3c:	1ac0      	subs	r0, r0, r3
 8004f3e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004f40:	b10b      	cbz	r3, 8004f46 <__sflush_r+0x46>
 8004f42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f44:	1ac0      	subs	r0, r0, r3
 8004f46:	2300      	movs	r3, #0
 8004f48:	4602      	mov	r2, r0
 8004f4a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004f4c:	6a21      	ldr	r1, [r4, #32]
 8004f4e:	4628      	mov	r0, r5
 8004f50:	47b0      	blx	r6
 8004f52:	1c43      	adds	r3, r0, #1
 8004f54:	89a3      	ldrh	r3, [r4, #12]
 8004f56:	d106      	bne.n	8004f66 <__sflush_r+0x66>
 8004f58:	6829      	ldr	r1, [r5, #0]
 8004f5a:	291d      	cmp	r1, #29
 8004f5c:	d82c      	bhi.n	8004fb8 <__sflush_r+0xb8>
 8004f5e:	4a2a      	ldr	r2, [pc, #168]	; (8005008 <__sflush_r+0x108>)
 8004f60:	40ca      	lsrs	r2, r1
 8004f62:	07d6      	lsls	r6, r2, #31
 8004f64:	d528      	bpl.n	8004fb8 <__sflush_r+0xb8>
 8004f66:	2200      	movs	r2, #0
 8004f68:	6062      	str	r2, [r4, #4]
 8004f6a:	04d9      	lsls	r1, r3, #19
 8004f6c:	6922      	ldr	r2, [r4, #16]
 8004f6e:	6022      	str	r2, [r4, #0]
 8004f70:	d504      	bpl.n	8004f7c <__sflush_r+0x7c>
 8004f72:	1c42      	adds	r2, r0, #1
 8004f74:	d101      	bne.n	8004f7a <__sflush_r+0x7a>
 8004f76:	682b      	ldr	r3, [r5, #0]
 8004f78:	b903      	cbnz	r3, 8004f7c <__sflush_r+0x7c>
 8004f7a:	6560      	str	r0, [r4, #84]	; 0x54
 8004f7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f7e:	602f      	str	r7, [r5, #0]
 8004f80:	2900      	cmp	r1, #0
 8004f82:	d0ca      	beq.n	8004f1a <__sflush_r+0x1a>
 8004f84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f88:	4299      	cmp	r1, r3
 8004f8a:	d002      	beq.n	8004f92 <__sflush_r+0x92>
 8004f8c:	4628      	mov	r0, r5
 8004f8e:	f000 f9d7 	bl	8005340 <_free_r>
 8004f92:	2000      	movs	r0, #0
 8004f94:	6360      	str	r0, [r4, #52]	; 0x34
 8004f96:	e7c1      	b.n	8004f1c <__sflush_r+0x1c>
 8004f98:	6a21      	ldr	r1, [r4, #32]
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	4628      	mov	r0, r5
 8004f9e:	47b0      	blx	r6
 8004fa0:	1c41      	adds	r1, r0, #1
 8004fa2:	d1c7      	bne.n	8004f34 <__sflush_r+0x34>
 8004fa4:	682b      	ldr	r3, [r5, #0]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d0c4      	beq.n	8004f34 <__sflush_r+0x34>
 8004faa:	2b1d      	cmp	r3, #29
 8004fac:	d001      	beq.n	8004fb2 <__sflush_r+0xb2>
 8004fae:	2b16      	cmp	r3, #22
 8004fb0:	d101      	bne.n	8004fb6 <__sflush_r+0xb6>
 8004fb2:	602f      	str	r7, [r5, #0]
 8004fb4:	e7b1      	b.n	8004f1a <__sflush_r+0x1a>
 8004fb6:	89a3      	ldrh	r3, [r4, #12]
 8004fb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fbc:	81a3      	strh	r3, [r4, #12]
 8004fbe:	e7ad      	b.n	8004f1c <__sflush_r+0x1c>
 8004fc0:	690f      	ldr	r7, [r1, #16]
 8004fc2:	2f00      	cmp	r7, #0
 8004fc4:	d0a9      	beq.n	8004f1a <__sflush_r+0x1a>
 8004fc6:	0793      	lsls	r3, r2, #30
 8004fc8:	680e      	ldr	r6, [r1, #0]
 8004fca:	bf08      	it	eq
 8004fcc:	694b      	ldreq	r3, [r1, #20]
 8004fce:	600f      	str	r7, [r1, #0]
 8004fd0:	bf18      	it	ne
 8004fd2:	2300      	movne	r3, #0
 8004fd4:	eba6 0807 	sub.w	r8, r6, r7
 8004fd8:	608b      	str	r3, [r1, #8]
 8004fda:	f1b8 0f00 	cmp.w	r8, #0
 8004fde:	dd9c      	ble.n	8004f1a <__sflush_r+0x1a>
 8004fe0:	6a21      	ldr	r1, [r4, #32]
 8004fe2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004fe4:	4643      	mov	r3, r8
 8004fe6:	463a      	mov	r2, r7
 8004fe8:	4628      	mov	r0, r5
 8004fea:	47b0      	blx	r6
 8004fec:	2800      	cmp	r0, #0
 8004fee:	dc06      	bgt.n	8004ffe <__sflush_r+0xfe>
 8004ff0:	89a3      	ldrh	r3, [r4, #12]
 8004ff2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ff6:	81a3      	strh	r3, [r4, #12]
 8004ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8004ffc:	e78e      	b.n	8004f1c <__sflush_r+0x1c>
 8004ffe:	4407      	add	r7, r0
 8005000:	eba8 0800 	sub.w	r8, r8, r0
 8005004:	e7e9      	b.n	8004fda <__sflush_r+0xda>
 8005006:	bf00      	nop
 8005008:	20400001 	.word	0x20400001

0800500c <_fflush_r>:
 800500c:	b538      	push	{r3, r4, r5, lr}
 800500e:	690b      	ldr	r3, [r1, #16]
 8005010:	4605      	mov	r5, r0
 8005012:	460c      	mov	r4, r1
 8005014:	b913      	cbnz	r3, 800501c <_fflush_r+0x10>
 8005016:	2500      	movs	r5, #0
 8005018:	4628      	mov	r0, r5
 800501a:	bd38      	pop	{r3, r4, r5, pc}
 800501c:	b118      	cbz	r0, 8005026 <_fflush_r+0x1a>
 800501e:	6983      	ldr	r3, [r0, #24]
 8005020:	b90b      	cbnz	r3, 8005026 <_fflush_r+0x1a>
 8005022:	f000 f887 	bl	8005134 <__sinit>
 8005026:	4b14      	ldr	r3, [pc, #80]	; (8005078 <_fflush_r+0x6c>)
 8005028:	429c      	cmp	r4, r3
 800502a:	d11b      	bne.n	8005064 <_fflush_r+0x58>
 800502c:	686c      	ldr	r4, [r5, #4]
 800502e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d0ef      	beq.n	8005016 <_fflush_r+0xa>
 8005036:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005038:	07d0      	lsls	r0, r2, #31
 800503a:	d404      	bmi.n	8005046 <_fflush_r+0x3a>
 800503c:	0599      	lsls	r1, r3, #22
 800503e:	d402      	bmi.n	8005046 <_fflush_r+0x3a>
 8005040:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005042:	f000 f915 	bl	8005270 <__retarget_lock_acquire_recursive>
 8005046:	4628      	mov	r0, r5
 8005048:	4621      	mov	r1, r4
 800504a:	f7ff ff59 	bl	8004f00 <__sflush_r>
 800504e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005050:	07da      	lsls	r2, r3, #31
 8005052:	4605      	mov	r5, r0
 8005054:	d4e0      	bmi.n	8005018 <_fflush_r+0xc>
 8005056:	89a3      	ldrh	r3, [r4, #12]
 8005058:	059b      	lsls	r3, r3, #22
 800505a:	d4dd      	bmi.n	8005018 <_fflush_r+0xc>
 800505c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800505e:	f000 f908 	bl	8005272 <__retarget_lock_release_recursive>
 8005062:	e7d9      	b.n	8005018 <_fflush_r+0xc>
 8005064:	4b05      	ldr	r3, [pc, #20]	; (800507c <_fflush_r+0x70>)
 8005066:	429c      	cmp	r4, r3
 8005068:	d101      	bne.n	800506e <_fflush_r+0x62>
 800506a:	68ac      	ldr	r4, [r5, #8]
 800506c:	e7df      	b.n	800502e <_fflush_r+0x22>
 800506e:	4b04      	ldr	r3, [pc, #16]	; (8005080 <_fflush_r+0x74>)
 8005070:	429c      	cmp	r4, r3
 8005072:	bf08      	it	eq
 8005074:	68ec      	ldreq	r4, [r5, #12]
 8005076:	e7da      	b.n	800502e <_fflush_r+0x22>
 8005078:	080061d8 	.word	0x080061d8
 800507c:	080061f8 	.word	0x080061f8
 8005080:	080061b8 	.word	0x080061b8

08005084 <std>:
 8005084:	2300      	movs	r3, #0
 8005086:	b510      	push	{r4, lr}
 8005088:	4604      	mov	r4, r0
 800508a:	e9c0 3300 	strd	r3, r3, [r0]
 800508e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005092:	6083      	str	r3, [r0, #8]
 8005094:	8181      	strh	r1, [r0, #12]
 8005096:	6643      	str	r3, [r0, #100]	; 0x64
 8005098:	81c2      	strh	r2, [r0, #14]
 800509a:	6183      	str	r3, [r0, #24]
 800509c:	4619      	mov	r1, r3
 800509e:	2208      	movs	r2, #8
 80050a0:	305c      	adds	r0, #92	; 0x5c
 80050a2:	f7ff fdb7 	bl	8004c14 <memset>
 80050a6:	4b05      	ldr	r3, [pc, #20]	; (80050bc <std+0x38>)
 80050a8:	6263      	str	r3, [r4, #36]	; 0x24
 80050aa:	4b05      	ldr	r3, [pc, #20]	; (80050c0 <std+0x3c>)
 80050ac:	62a3      	str	r3, [r4, #40]	; 0x28
 80050ae:	4b05      	ldr	r3, [pc, #20]	; (80050c4 <std+0x40>)
 80050b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80050b2:	4b05      	ldr	r3, [pc, #20]	; (80050c8 <std+0x44>)
 80050b4:	6224      	str	r4, [r4, #32]
 80050b6:	6323      	str	r3, [r4, #48]	; 0x30
 80050b8:	bd10      	pop	{r4, pc}
 80050ba:	bf00      	nop
 80050bc:	08005db5 	.word	0x08005db5
 80050c0:	08005dd7 	.word	0x08005dd7
 80050c4:	08005e0f 	.word	0x08005e0f
 80050c8:	08005e33 	.word	0x08005e33

080050cc <_cleanup_r>:
 80050cc:	4901      	ldr	r1, [pc, #4]	; (80050d4 <_cleanup_r+0x8>)
 80050ce:	f000 b8af 	b.w	8005230 <_fwalk_reent>
 80050d2:	bf00      	nop
 80050d4:	0800500d 	.word	0x0800500d

080050d8 <__sfmoreglue>:
 80050d8:	b570      	push	{r4, r5, r6, lr}
 80050da:	2268      	movs	r2, #104	; 0x68
 80050dc:	1e4d      	subs	r5, r1, #1
 80050de:	4355      	muls	r5, r2
 80050e0:	460e      	mov	r6, r1
 80050e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80050e6:	f000 f997 	bl	8005418 <_malloc_r>
 80050ea:	4604      	mov	r4, r0
 80050ec:	b140      	cbz	r0, 8005100 <__sfmoreglue+0x28>
 80050ee:	2100      	movs	r1, #0
 80050f0:	e9c0 1600 	strd	r1, r6, [r0]
 80050f4:	300c      	adds	r0, #12
 80050f6:	60a0      	str	r0, [r4, #8]
 80050f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80050fc:	f7ff fd8a 	bl	8004c14 <memset>
 8005100:	4620      	mov	r0, r4
 8005102:	bd70      	pop	{r4, r5, r6, pc}

08005104 <__sfp_lock_acquire>:
 8005104:	4801      	ldr	r0, [pc, #4]	; (800510c <__sfp_lock_acquire+0x8>)
 8005106:	f000 b8b3 	b.w	8005270 <__retarget_lock_acquire_recursive>
 800510a:	bf00      	nop
 800510c:	20002f65 	.word	0x20002f65

08005110 <__sfp_lock_release>:
 8005110:	4801      	ldr	r0, [pc, #4]	; (8005118 <__sfp_lock_release+0x8>)
 8005112:	f000 b8ae 	b.w	8005272 <__retarget_lock_release_recursive>
 8005116:	bf00      	nop
 8005118:	20002f65 	.word	0x20002f65

0800511c <__sinit_lock_acquire>:
 800511c:	4801      	ldr	r0, [pc, #4]	; (8005124 <__sinit_lock_acquire+0x8>)
 800511e:	f000 b8a7 	b.w	8005270 <__retarget_lock_acquire_recursive>
 8005122:	bf00      	nop
 8005124:	20002f66 	.word	0x20002f66

08005128 <__sinit_lock_release>:
 8005128:	4801      	ldr	r0, [pc, #4]	; (8005130 <__sinit_lock_release+0x8>)
 800512a:	f000 b8a2 	b.w	8005272 <__retarget_lock_release_recursive>
 800512e:	bf00      	nop
 8005130:	20002f66 	.word	0x20002f66

08005134 <__sinit>:
 8005134:	b510      	push	{r4, lr}
 8005136:	4604      	mov	r4, r0
 8005138:	f7ff fff0 	bl	800511c <__sinit_lock_acquire>
 800513c:	69a3      	ldr	r3, [r4, #24]
 800513e:	b11b      	cbz	r3, 8005148 <__sinit+0x14>
 8005140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005144:	f7ff bff0 	b.w	8005128 <__sinit_lock_release>
 8005148:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800514c:	6523      	str	r3, [r4, #80]	; 0x50
 800514e:	4b13      	ldr	r3, [pc, #76]	; (800519c <__sinit+0x68>)
 8005150:	4a13      	ldr	r2, [pc, #76]	; (80051a0 <__sinit+0x6c>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	62a2      	str	r2, [r4, #40]	; 0x28
 8005156:	42a3      	cmp	r3, r4
 8005158:	bf04      	itt	eq
 800515a:	2301      	moveq	r3, #1
 800515c:	61a3      	streq	r3, [r4, #24]
 800515e:	4620      	mov	r0, r4
 8005160:	f000 f820 	bl	80051a4 <__sfp>
 8005164:	6060      	str	r0, [r4, #4]
 8005166:	4620      	mov	r0, r4
 8005168:	f000 f81c 	bl	80051a4 <__sfp>
 800516c:	60a0      	str	r0, [r4, #8]
 800516e:	4620      	mov	r0, r4
 8005170:	f000 f818 	bl	80051a4 <__sfp>
 8005174:	2200      	movs	r2, #0
 8005176:	60e0      	str	r0, [r4, #12]
 8005178:	2104      	movs	r1, #4
 800517a:	6860      	ldr	r0, [r4, #4]
 800517c:	f7ff ff82 	bl	8005084 <std>
 8005180:	68a0      	ldr	r0, [r4, #8]
 8005182:	2201      	movs	r2, #1
 8005184:	2109      	movs	r1, #9
 8005186:	f7ff ff7d 	bl	8005084 <std>
 800518a:	68e0      	ldr	r0, [r4, #12]
 800518c:	2202      	movs	r2, #2
 800518e:	2112      	movs	r1, #18
 8005190:	f7ff ff78 	bl	8005084 <std>
 8005194:	2301      	movs	r3, #1
 8005196:	61a3      	str	r3, [r4, #24]
 8005198:	e7d2      	b.n	8005140 <__sinit+0xc>
 800519a:	bf00      	nop
 800519c:	080061b4 	.word	0x080061b4
 80051a0:	080050cd 	.word	0x080050cd

080051a4 <__sfp>:
 80051a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051a6:	4607      	mov	r7, r0
 80051a8:	f7ff ffac 	bl	8005104 <__sfp_lock_acquire>
 80051ac:	4b1e      	ldr	r3, [pc, #120]	; (8005228 <__sfp+0x84>)
 80051ae:	681e      	ldr	r6, [r3, #0]
 80051b0:	69b3      	ldr	r3, [r6, #24]
 80051b2:	b913      	cbnz	r3, 80051ba <__sfp+0x16>
 80051b4:	4630      	mov	r0, r6
 80051b6:	f7ff ffbd 	bl	8005134 <__sinit>
 80051ba:	3648      	adds	r6, #72	; 0x48
 80051bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80051c0:	3b01      	subs	r3, #1
 80051c2:	d503      	bpl.n	80051cc <__sfp+0x28>
 80051c4:	6833      	ldr	r3, [r6, #0]
 80051c6:	b30b      	cbz	r3, 800520c <__sfp+0x68>
 80051c8:	6836      	ldr	r6, [r6, #0]
 80051ca:	e7f7      	b.n	80051bc <__sfp+0x18>
 80051cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80051d0:	b9d5      	cbnz	r5, 8005208 <__sfp+0x64>
 80051d2:	4b16      	ldr	r3, [pc, #88]	; (800522c <__sfp+0x88>)
 80051d4:	60e3      	str	r3, [r4, #12]
 80051d6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80051da:	6665      	str	r5, [r4, #100]	; 0x64
 80051dc:	f000 f847 	bl	800526e <__retarget_lock_init_recursive>
 80051e0:	f7ff ff96 	bl	8005110 <__sfp_lock_release>
 80051e4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80051e8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80051ec:	6025      	str	r5, [r4, #0]
 80051ee:	61a5      	str	r5, [r4, #24]
 80051f0:	2208      	movs	r2, #8
 80051f2:	4629      	mov	r1, r5
 80051f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80051f8:	f7ff fd0c 	bl	8004c14 <memset>
 80051fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005200:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005204:	4620      	mov	r0, r4
 8005206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005208:	3468      	adds	r4, #104	; 0x68
 800520a:	e7d9      	b.n	80051c0 <__sfp+0x1c>
 800520c:	2104      	movs	r1, #4
 800520e:	4638      	mov	r0, r7
 8005210:	f7ff ff62 	bl	80050d8 <__sfmoreglue>
 8005214:	4604      	mov	r4, r0
 8005216:	6030      	str	r0, [r6, #0]
 8005218:	2800      	cmp	r0, #0
 800521a:	d1d5      	bne.n	80051c8 <__sfp+0x24>
 800521c:	f7ff ff78 	bl	8005110 <__sfp_lock_release>
 8005220:	230c      	movs	r3, #12
 8005222:	603b      	str	r3, [r7, #0]
 8005224:	e7ee      	b.n	8005204 <__sfp+0x60>
 8005226:	bf00      	nop
 8005228:	080061b4 	.word	0x080061b4
 800522c:	ffff0001 	.word	0xffff0001

08005230 <_fwalk_reent>:
 8005230:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005234:	4606      	mov	r6, r0
 8005236:	4688      	mov	r8, r1
 8005238:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800523c:	2700      	movs	r7, #0
 800523e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005242:	f1b9 0901 	subs.w	r9, r9, #1
 8005246:	d505      	bpl.n	8005254 <_fwalk_reent+0x24>
 8005248:	6824      	ldr	r4, [r4, #0]
 800524a:	2c00      	cmp	r4, #0
 800524c:	d1f7      	bne.n	800523e <_fwalk_reent+0xe>
 800524e:	4638      	mov	r0, r7
 8005250:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005254:	89ab      	ldrh	r3, [r5, #12]
 8005256:	2b01      	cmp	r3, #1
 8005258:	d907      	bls.n	800526a <_fwalk_reent+0x3a>
 800525a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800525e:	3301      	adds	r3, #1
 8005260:	d003      	beq.n	800526a <_fwalk_reent+0x3a>
 8005262:	4629      	mov	r1, r5
 8005264:	4630      	mov	r0, r6
 8005266:	47c0      	blx	r8
 8005268:	4307      	orrs	r7, r0
 800526a:	3568      	adds	r5, #104	; 0x68
 800526c:	e7e9      	b.n	8005242 <_fwalk_reent+0x12>

0800526e <__retarget_lock_init_recursive>:
 800526e:	4770      	bx	lr

08005270 <__retarget_lock_acquire_recursive>:
 8005270:	4770      	bx	lr

08005272 <__retarget_lock_release_recursive>:
 8005272:	4770      	bx	lr

08005274 <__swhatbuf_r>:
 8005274:	b570      	push	{r4, r5, r6, lr}
 8005276:	460e      	mov	r6, r1
 8005278:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800527c:	2900      	cmp	r1, #0
 800527e:	b096      	sub	sp, #88	; 0x58
 8005280:	4614      	mov	r4, r2
 8005282:	461d      	mov	r5, r3
 8005284:	da08      	bge.n	8005298 <__swhatbuf_r+0x24>
 8005286:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800528a:	2200      	movs	r2, #0
 800528c:	602a      	str	r2, [r5, #0]
 800528e:	061a      	lsls	r2, r3, #24
 8005290:	d410      	bmi.n	80052b4 <__swhatbuf_r+0x40>
 8005292:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005296:	e00e      	b.n	80052b6 <__swhatbuf_r+0x42>
 8005298:	466a      	mov	r2, sp
 800529a:	f000 fdf1 	bl	8005e80 <_fstat_r>
 800529e:	2800      	cmp	r0, #0
 80052a0:	dbf1      	blt.n	8005286 <__swhatbuf_r+0x12>
 80052a2:	9a01      	ldr	r2, [sp, #4]
 80052a4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80052a8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80052ac:	425a      	negs	r2, r3
 80052ae:	415a      	adcs	r2, r3
 80052b0:	602a      	str	r2, [r5, #0]
 80052b2:	e7ee      	b.n	8005292 <__swhatbuf_r+0x1e>
 80052b4:	2340      	movs	r3, #64	; 0x40
 80052b6:	2000      	movs	r0, #0
 80052b8:	6023      	str	r3, [r4, #0]
 80052ba:	b016      	add	sp, #88	; 0x58
 80052bc:	bd70      	pop	{r4, r5, r6, pc}
	...

080052c0 <__smakebuf_r>:
 80052c0:	898b      	ldrh	r3, [r1, #12]
 80052c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80052c4:	079d      	lsls	r5, r3, #30
 80052c6:	4606      	mov	r6, r0
 80052c8:	460c      	mov	r4, r1
 80052ca:	d507      	bpl.n	80052dc <__smakebuf_r+0x1c>
 80052cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80052d0:	6023      	str	r3, [r4, #0]
 80052d2:	6123      	str	r3, [r4, #16]
 80052d4:	2301      	movs	r3, #1
 80052d6:	6163      	str	r3, [r4, #20]
 80052d8:	b002      	add	sp, #8
 80052da:	bd70      	pop	{r4, r5, r6, pc}
 80052dc:	ab01      	add	r3, sp, #4
 80052de:	466a      	mov	r2, sp
 80052e0:	f7ff ffc8 	bl	8005274 <__swhatbuf_r>
 80052e4:	9900      	ldr	r1, [sp, #0]
 80052e6:	4605      	mov	r5, r0
 80052e8:	4630      	mov	r0, r6
 80052ea:	f000 f895 	bl	8005418 <_malloc_r>
 80052ee:	b948      	cbnz	r0, 8005304 <__smakebuf_r+0x44>
 80052f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052f4:	059a      	lsls	r2, r3, #22
 80052f6:	d4ef      	bmi.n	80052d8 <__smakebuf_r+0x18>
 80052f8:	f023 0303 	bic.w	r3, r3, #3
 80052fc:	f043 0302 	orr.w	r3, r3, #2
 8005300:	81a3      	strh	r3, [r4, #12]
 8005302:	e7e3      	b.n	80052cc <__smakebuf_r+0xc>
 8005304:	4b0d      	ldr	r3, [pc, #52]	; (800533c <__smakebuf_r+0x7c>)
 8005306:	62b3      	str	r3, [r6, #40]	; 0x28
 8005308:	89a3      	ldrh	r3, [r4, #12]
 800530a:	6020      	str	r0, [r4, #0]
 800530c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005310:	81a3      	strh	r3, [r4, #12]
 8005312:	9b00      	ldr	r3, [sp, #0]
 8005314:	6163      	str	r3, [r4, #20]
 8005316:	9b01      	ldr	r3, [sp, #4]
 8005318:	6120      	str	r0, [r4, #16]
 800531a:	b15b      	cbz	r3, 8005334 <__smakebuf_r+0x74>
 800531c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005320:	4630      	mov	r0, r6
 8005322:	f000 fdbf 	bl	8005ea4 <_isatty_r>
 8005326:	b128      	cbz	r0, 8005334 <__smakebuf_r+0x74>
 8005328:	89a3      	ldrh	r3, [r4, #12]
 800532a:	f023 0303 	bic.w	r3, r3, #3
 800532e:	f043 0301 	orr.w	r3, r3, #1
 8005332:	81a3      	strh	r3, [r4, #12]
 8005334:	89a0      	ldrh	r0, [r4, #12]
 8005336:	4305      	orrs	r5, r0
 8005338:	81a5      	strh	r5, [r4, #12]
 800533a:	e7cd      	b.n	80052d8 <__smakebuf_r+0x18>
 800533c:	080050cd 	.word	0x080050cd

08005340 <_free_r>:
 8005340:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005342:	2900      	cmp	r1, #0
 8005344:	d044      	beq.n	80053d0 <_free_r+0x90>
 8005346:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800534a:	9001      	str	r0, [sp, #4]
 800534c:	2b00      	cmp	r3, #0
 800534e:	f1a1 0404 	sub.w	r4, r1, #4
 8005352:	bfb8      	it	lt
 8005354:	18e4      	addlt	r4, r4, r3
 8005356:	f000 fdef 	bl	8005f38 <__malloc_lock>
 800535a:	4a1e      	ldr	r2, [pc, #120]	; (80053d4 <_free_r+0x94>)
 800535c:	9801      	ldr	r0, [sp, #4]
 800535e:	6813      	ldr	r3, [r2, #0]
 8005360:	b933      	cbnz	r3, 8005370 <_free_r+0x30>
 8005362:	6063      	str	r3, [r4, #4]
 8005364:	6014      	str	r4, [r2, #0]
 8005366:	b003      	add	sp, #12
 8005368:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800536c:	f000 bdea 	b.w	8005f44 <__malloc_unlock>
 8005370:	42a3      	cmp	r3, r4
 8005372:	d908      	bls.n	8005386 <_free_r+0x46>
 8005374:	6825      	ldr	r5, [r4, #0]
 8005376:	1961      	adds	r1, r4, r5
 8005378:	428b      	cmp	r3, r1
 800537a:	bf01      	itttt	eq
 800537c:	6819      	ldreq	r1, [r3, #0]
 800537e:	685b      	ldreq	r3, [r3, #4]
 8005380:	1949      	addeq	r1, r1, r5
 8005382:	6021      	streq	r1, [r4, #0]
 8005384:	e7ed      	b.n	8005362 <_free_r+0x22>
 8005386:	461a      	mov	r2, r3
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	b10b      	cbz	r3, 8005390 <_free_r+0x50>
 800538c:	42a3      	cmp	r3, r4
 800538e:	d9fa      	bls.n	8005386 <_free_r+0x46>
 8005390:	6811      	ldr	r1, [r2, #0]
 8005392:	1855      	adds	r5, r2, r1
 8005394:	42a5      	cmp	r5, r4
 8005396:	d10b      	bne.n	80053b0 <_free_r+0x70>
 8005398:	6824      	ldr	r4, [r4, #0]
 800539a:	4421      	add	r1, r4
 800539c:	1854      	adds	r4, r2, r1
 800539e:	42a3      	cmp	r3, r4
 80053a0:	6011      	str	r1, [r2, #0]
 80053a2:	d1e0      	bne.n	8005366 <_free_r+0x26>
 80053a4:	681c      	ldr	r4, [r3, #0]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	6053      	str	r3, [r2, #4]
 80053aa:	4421      	add	r1, r4
 80053ac:	6011      	str	r1, [r2, #0]
 80053ae:	e7da      	b.n	8005366 <_free_r+0x26>
 80053b0:	d902      	bls.n	80053b8 <_free_r+0x78>
 80053b2:	230c      	movs	r3, #12
 80053b4:	6003      	str	r3, [r0, #0]
 80053b6:	e7d6      	b.n	8005366 <_free_r+0x26>
 80053b8:	6825      	ldr	r5, [r4, #0]
 80053ba:	1961      	adds	r1, r4, r5
 80053bc:	428b      	cmp	r3, r1
 80053be:	bf04      	itt	eq
 80053c0:	6819      	ldreq	r1, [r3, #0]
 80053c2:	685b      	ldreq	r3, [r3, #4]
 80053c4:	6063      	str	r3, [r4, #4]
 80053c6:	bf04      	itt	eq
 80053c8:	1949      	addeq	r1, r1, r5
 80053ca:	6021      	streq	r1, [r4, #0]
 80053cc:	6054      	str	r4, [r2, #4]
 80053ce:	e7ca      	b.n	8005366 <_free_r+0x26>
 80053d0:	b003      	add	sp, #12
 80053d2:	bd30      	pop	{r4, r5, pc}
 80053d4:	20002f68 	.word	0x20002f68

080053d8 <sbrk_aligned>:
 80053d8:	b570      	push	{r4, r5, r6, lr}
 80053da:	4e0e      	ldr	r6, [pc, #56]	; (8005414 <sbrk_aligned+0x3c>)
 80053dc:	460c      	mov	r4, r1
 80053de:	6831      	ldr	r1, [r6, #0]
 80053e0:	4605      	mov	r5, r0
 80053e2:	b911      	cbnz	r1, 80053ea <sbrk_aligned+0x12>
 80053e4:	f000 fcd6 	bl	8005d94 <_sbrk_r>
 80053e8:	6030      	str	r0, [r6, #0]
 80053ea:	4621      	mov	r1, r4
 80053ec:	4628      	mov	r0, r5
 80053ee:	f000 fcd1 	bl	8005d94 <_sbrk_r>
 80053f2:	1c43      	adds	r3, r0, #1
 80053f4:	d00a      	beq.n	800540c <sbrk_aligned+0x34>
 80053f6:	1cc4      	adds	r4, r0, #3
 80053f8:	f024 0403 	bic.w	r4, r4, #3
 80053fc:	42a0      	cmp	r0, r4
 80053fe:	d007      	beq.n	8005410 <sbrk_aligned+0x38>
 8005400:	1a21      	subs	r1, r4, r0
 8005402:	4628      	mov	r0, r5
 8005404:	f000 fcc6 	bl	8005d94 <_sbrk_r>
 8005408:	3001      	adds	r0, #1
 800540a:	d101      	bne.n	8005410 <sbrk_aligned+0x38>
 800540c:	f04f 34ff 	mov.w	r4, #4294967295
 8005410:	4620      	mov	r0, r4
 8005412:	bd70      	pop	{r4, r5, r6, pc}
 8005414:	20002f6c 	.word	0x20002f6c

08005418 <_malloc_r>:
 8005418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800541c:	1ccd      	adds	r5, r1, #3
 800541e:	f025 0503 	bic.w	r5, r5, #3
 8005422:	3508      	adds	r5, #8
 8005424:	2d0c      	cmp	r5, #12
 8005426:	bf38      	it	cc
 8005428:	250c      	movcc	r5, #12
 800542a:	2d00      	cmp	r5, #0
 800542c:	4607      	mov	r7, r0
 800542e:	db01      	blt.n	8005434 <_malloc_r+0x1c>
 8005430:	42a9      	cmp	r1, r5
 8005432:	d905      	bls.n	8005440 <_malloc_r+0x28>
 8005434:	230c      	movs	r3, #12
 8005436:	603b      	str	r3, [r7, #0]
 8005438:	2600      	movs	r6, #0
 800543a:	4630      	mov	r0, r6
 800543c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005440:	4e2e      	ldr	r6, [pc, #184]	; (80054fc <_malloc_r+0xe4>)
 8005442:	f000 fd79 	bl	8005f38 <__malloc_lock>
 8005446:	6833      	ldr	r3, [r6, #0]
 8005448:	461c      	mov	r4, r3
 800544a:	bb34      	cbnz	r4, 800549a <_malloc_r+0x82>
 800544c:	4629      	mov	r1, r5
 800544e:	4638      	mov	r0, r7
 8005450:	f7ff ffc2 	bl	80053d8 <sbrk_aligned>
 8005454:	1c43      	adds	r3, r0, #1
 8005456:	4604      	mov	r4, r0
 8005458:	d14d      	bne.n	80054f6 <_malloc_r+0xde>
 800545a:	6834      	ldr	r4, [r6, #0]
 800545c:	4626      	mov	r6, r4
 800545e:	2e00      	cmp	r6, #0
 8005460:	d140      	bne.n	80054e4 <_malloc_r+0xcc>
 8005462:	6823      	ldr	r3, [r4, #0]
 8005464:	4631      	mov	r1, r6
 8005466:	4638      	mov	r0, r7
 8005468:	eb04 0803 	add.w	r8, r4, r3
 800546c:	f000 fc92 	bl	8005d94 <_sbrk_r>
 8005470:	4580      	cmp	r8, r0
 8005472:	d13a      	bne.n	80054ea <_malloc_r+0xd2>
 8005474:	6821      	ldr	r1, [r4, #0]
 8005476:	3503      	adds	r5, #3
 8005478:	1a6d      	subs	r5, r5, r1
 800547a:	f025 0503 	bic.w	r5, r5, #3
 800547e:	3508      	adds	r5, #8
 8005480:	2d0c      	cmp	r5, #12
 8005482:	bf38      	it	cc
 8005484:	250c      	movcc	r5, #12
 8005486:	4629      	mov	r1, r5
 8005488:	4638      	mov	r0, r7
 800548a:	f7ff ffa5 	bl	80053d8 <sbrk_aligned>
 800548e:	3001      	adds	r0, #1
 8005490:	d02b      	beq.n	80054ea <_malloc_r+0xd2>
 8005492:	6823      	ldr	r3, [r4, #0]
 8005494:	442b      	add	r3, r5
 8005496:	6023      	str	r3, [r4, #0]
 8005498:	e00e      	b.n	80054b8 <_malloc_r+0xa0>
 800549a:	6822      	ldr	r2, [r4, #0]
 800549c:	1b52      	subs	r2, r2, r5
 800549e:	d41e      	bmi.n	80054de <_malloc_r+0xc6>
 80054a0:	2a0b      	cmp	r2, #11
 80054a2:	d916      	bls.n	80054d2 <_malloc_r+0xba>
 80054a4:	1961      	adds	r1, r4, r5
 80054a6:	42a3      	cmp	r3, r4
 80054a8:	6025      	str	r5, [r4, #0]
 80054aa:	bf18      	it	ne
 80054ac:	6059      	strne	r1, [r3, #4]
 80054ae:	6863      	ldr	r3, [r4, #4]
 80054b0:	bf08      	it	eq
 80054b2:	6031      	streq	r1, [r6, #0]
 80054b4:	5162      	str	r2, [r4, r5]
 80054b6:	604b      	str	r3, [r1, #4]
 80054b8:	4638      	mov	r0, r7
 80054ba:	f104 060b 	add.w	r6, r4, #11
 80054be:	f000 fd41 	bl	8005f44 <__malloc_unlock>
 80054c2:	f026 0607 	bic.w	r6, r6, #7
 80054c6:	1d23      	adds	r3, r4, #4
 80054c8:	1af2      	subs	r2, r6, r3
 80054ca:	d0b6      	beq.n	800543a <_malloc_r+0x22>
 80054cc:	1b9b      	subs	r3, r3, r6
 80054ce:	50a3      	str	r3, [r4, r2]
 80054d0:	e7b3      	b.n	800543a <_malloc_r+0x22>
 80054d2:	6862      	ldr	r2, [r4, #4]
 80054d4:	42a3      	cmp	r3, r4
 80054d6:	bf0c      	ite	eq
 80054d8:	6032      	streq	r2, [r6, #0]
 80054da:	605a      	strne	r2, [r3, #4]
 80054dc:	e7ec      	b.n	80054b8 <_malloc_r+0xa0>
 80054de:	4623      	mov	r3, r4
 80054e0:	6864      	ldr	r4, [r4, #4]
 80054e2:	e7b2      	b.n	800544a <_malloc_r+0x32>
 80054e4:	4634      	mov	r4, r6
 80054e6:	6876      	ldr	r6, [r6, #4]
 80054e8:	e7b9      	b.n	800545e <_malloc_r+0x46>
 80054ea:	230c      	movs	r3, #12
 80054ec:	603b      	str	r3, [r7, #0]
 80054ee:	4638      	mov	r0, r7
 80054f0:	f000 fd28 	bl	8005f44 <__malloc_unlock>
 80054f4:	e7a1      	b.n	800543a <_malloc_r+0x22>
 80054f6:	6025      	str	r5, [r4, #0]
 80054f8:	e7de      	b.n	80054b8 <_malloc_r+0xa0>
 80054fa:	bf00      	nop
 80054fc:	20002f68 	.word	0x20002f68

08005500 <__ssputs_r>:
 8005500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005504:	688e      	ldr	r6, [r1, #8]
 8005506:	429e      	cmp	r6, r3
 8005508:	4682      	mov	sl, r0
 800550a:	460c      	mov	r4, r1
 800550c:	4690      	mov	r8, r2
 800550e:	461f      	mov	r7, r3
 8005510:	d838      	bhi.n	8005584 <__ssputs_r+0x84>
 8005512:	898a      	ldrh	r2, [r1, #12]
 8005514:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005518:	d032      	beq.n	8005580 <__ssputs_r+0x80>
 800551a:	6825      	ldr	r5, [r4, #0]
 800551c:	6909      	ldr	r1, [r1, #16]
 800551e:	eba5 0901 	sub.w	r9, r5, r1
 8005522:	6965      	ldr	r5, [r4, #20]
 8005524:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005528:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800552c:	3301      	adds	r3, #1
 800552e:	444b      	add	r3, r9
 8005530:	106d      	asrs	r5, r5, #1
 8005532:	429d      	cmp	r5, r3
 8005534:	bf38      	it	cc
 8005536:	461d      	movcc	r5, r3
 8005538:	0553      	lsls	r3, r2, #21
 800553a:	d531      	bpl.n	80055a0 <__ssputs_r+0xa0>
 800553c:	4629      	mov	r1, r5
 800553e:	f7ff ff6b 	bl	8005418 <_malloc_r>
 8005542:	4606      	mov	r6, r0
 8005544:	b950      	cbnz	r0, 800555c <__ssputs_r+0x5c>
 8005546:	230c      	movs	r3, #12
 8005548:	f8ca 3000 	str.w	r3, [sl]
 800554c:	89a3      	ldrh	r3, [r4, #12]
 800554e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005552:	81a3      	strh	r3, [r4, #12]
 8005554:	f04f 30ff 	mov.w	r0, #4294967295
 8005558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800555c:	6921      	ldr	r1, [r4, #16]
 800555e:	464a      	mov	r2, r9
 8005560:	f000 fcc2 	bl	8005ee8 <memcpy>
 8005564:	89a3      	ldrh	r3, [r4, #12]
 8005566:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800556a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800556e:	81a3      	strh	r3, [r4, #12]
 8005570:	6126      	str	r6, [r4, #16]
 8005572:	6165      	str	r5, [r4, #20]
 8005574:	444e      	add	r6, r9
 8005576:	eba5 0509 	sub.w	r5, r5, r9
 800557a:	6026      	str	r6, [r4, #0]
 800557c:	60a5      	str	r5, [r4, #8]
 800557e:	463e      	mov	r6, r7
 8005580:	42be      	cmp	r6, r7
 8005582:	d900      	bls.n	8005586 <__ssputs_r+0x86>
 8005584:	463e      	mov	r6, r7
 8005586:	6820      	ldr	r0, [r4, #0]
 8005588:	4632      	mov	r2, r6
 800558a:	4641      	mov	r1, r8
 800558c:	f000 fcba 	bl	8005f04 <memmove>
 8005590:	68a3      	ldr	r3, [r4, #8]
 8005592:	1b9b      	subs	r3, r3, r6
 8005594:	60a3      	str	r3, [r4, #8]
 8005596:	6823      	ldr	r3, [r4, #0]
 8005598:	4433      	add	r3, r6
 800559a:	6023      	str	r3, [r4, #0]
 800559c:	2000      	movs	r0, #0
 800559e:	e7db      	b.n	8005558 <__ssputs_r+0x58>
 80055a0:	462a      	mov	r2, r5
 80055a2:	f000 fcd5 	bl	8005f50 <_realloc_r>
 80055a6:	4606      	mov	r6, r0
 80055a8:	2800      	cmp	r0, #0
 80055aa:	d1e1      	bne.n	8005570 <__ssputs_r+0x70>
 80055ac:	6921      	ldr	r1, [r4, #16]
 80055ae:	4650      	mov	r0, sl
 80055b0:	f7ff fec6 	bl	8005340 <_free_r>
 80055b4:	e7c7      	b.n	8005546 <__ssputs_r+0x46>
	...

080055b8 <_svfiprintf_r>:
 80055b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055bc:	4698      	mov	r8, r3
 80055be:	898b      	ldrh	r3, [r1, #12]
 80055c0:	061b      	lsls	r3, r3, #24
 80055c2:	b09d      	sub	sp, #116	; 0x74
 80055c4:	4607      	mov	r7, r0
 80055c6:	460d      	mov	r5, r1
 80055c8:	4614      	mov	r4, r2
 80055ca:	d50e      	bpl.n	80055ea <_svfiprintf_r+0x32>
 80055cc:	690b      	ldr	r3, [r1, #16]
 80055ce:	b963      	cbnz	r3, 80055ea <_svfiprintf_r+0x32>
 80055d0:	2140      	movs	r1, #64	; 0x40
 80055d2:	f7ff ff21 	bl	8005418 <_malloc_r>
 80055d6:	6028      	str	r0, [r5, #0]
 80055d8:	6128      	str	r0, [r5, #16]
 80055da:	b920      	cbnz	r0, 80055e6 <_svfiprintf_r+0x2e>
 80055dc:	230c      	movs	r3, #12
 80055de:	603b      	str	r3, [r7, #0]
 80055e0:	f04f 30ff 	mov.w	r0, #4294967295
 80055e4:	e0d1      	b.n	800578a <_svfiprintf_r+0x1d2>
 80055e6:	2340      	movs	r3, #64	; 0x40
 80055e8:	616b      	str	r3, [r5, #20]
 80055ea:	2300      	movs	r3, #0
 80055ec:	9309      	str	r3, [sp, #36]	; 0x24
 80055ee:	2320      	movs	r3, #32
 80055f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80055f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80055f8:	2330      	movs	r3, #48	; 0x30
 80055fa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80057a4 <_svfiprintf_r+0x1ec>
 80055fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005602:	f04f 0901 	mov.w	r9, #1
 8005606:	4623      	mov	r3, r4
 8005608:	469a      	mov	sl, r3
 800560a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800560e:	b10a      	cbz	r2, 8005614 <_svfiprintf_r+0x5c>
 8005610:	2a25      	cmp	r2, #37	; 0x25
 8005612:	d1f9      	bne.n	8005608 <_svfiprintf_r+0x50>
 8005614:	ebba 0b04 	subs.w	fp, sl, r4
 8005618:	d00b      	beq.n	8005632 <_svfiprintf_r+0x7a>
 800561a:	465b      	mov	r3, fp
 800561c:	4622      	mov	r2, r4
 800561e:	4629      	mov	r1, r5
 8005620:	4638      	mov	r0, r7
 8005622:	f7ff ff6d 	bl	8005500 <__ssputs_r>
 8005626:	3001      	adds	r0, #1
 8005628:	f000 80aa 	beq.w	8005780 <_svfiprintf_r+0x1c8>
 800562c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800562e:	445a      	add	r2, fp
 8005630:	9209      	str	r2, [sp, #36]	; 0x24
 8005632:	f89a 3000 	ldrb.w	r3, [sl]
 8005636:	2b00      	cmp	r3, #0
 8005638:	f000 80a2 	beq.w	8005780 <_svfiprintf_r+0x1c8>
 800563c:	2300      	movs	r3, #0
 800563e:	f04f 32ff 	mov.w	r2, #4294967295
 8005642:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005646:	f10a 0a01 	add.w	sl, sl, #1
 800564a:	9304      	str	r3, [sp, #16]
 800564c:	9307      	str	r3, [sp, #28]
 800564e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005652:	931a      	str	r3, [sp, #104]	; 0x68
 8005654:	4654      	mov	r4, sl
 8005656:	2205      	movs	r2, #5
 8005658:	f814 1b01 	ldrb.w	r1, [r4], #1
 800565c:	4851      	ldr	r0, [pc, #324]	; (80057a4 <_svfiprintf_r+0x1ec>)
 800565e:	f7fa fdbf 	bl	80001e0 <memchr>
 8005662:	9a04      	ldr	r2, [sp, #16]
 8005664:	b9d8      	cbnz	r0, 800569e <_svfiprintf_r+0xe6>
 8005666:	06d0      	lsls	r0, r2, #27
 8005668:	bf44      	itt	mi
 800566a:	2320      	movmi	r3, #32
 800566c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005670:	0711      	lsls	r1, r2, #28
 8005672:	bf44      	itt	mi
 8005674:	232b      	movmi	r3, #43	; 0x2b
 8005676:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800567a:	f89a 3000 	ldrb.w	r3, [sl]
 800567e:	2b2a      	cmp	r3, #42	; 0x2a
 8005680:	d015      	beq.n	80056ae <_svfiprintf_r+0xf6>
 8005682:	9a07      	ldr	r2, [sp, #28]
 8005684:	4654      	mov	r4, sl
 8005686:	2000      	movs	r0, #0
 8005688:	f04f 0c0a 	mov.w	ip, #10
 800568c:	4621      	mov	r1, r4
 800568e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005692:	3b30      	subs	r3, #48	; 0x30
 8005694:	2b09      	cmp	r3, #9
 8005696:	d94e      	bls.n	8005736 <_svfiprintf_r+0x17e>
 8005698:	b1b0      	cbz	r0, 80056c8 <_svfiprintf_r+0x110>
 800569a:	9207      	str	r2, [sp, #28]
 800569c:	e014      	b.n	80056c8 <_svfiprintf_r+0x110>
 800569e:	eba0 0308 	sub.w	r3, r0, r8
 80056a2:	fa09 f303 	lsl.w	r3, r9, r3
 80056a6:	4313      	orrs	r3, r2
 80056a8:	9304      	str	r3, [sp, #16]
 80056aa:	46a2      	mov	sl, r4
 80056ac:	e7d2      	b.n	8005654 <_svfiprintf_r+0x9c>
 80056ae:	9b03      	ldr	r3, [sp, #12]
 80056b0:	1d19      	adds	r1, r3, #4
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	9103      	str	r1, [sp, #12]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	bfbb      	ittet	lt
 80056ba:	425b      	neglt	r3, r3
 80056bc:	f042 0202 	orrlt.w	r2, r2, #2
 80056c0:	9307      	strge	r3, [sp, #28]
 80056c2:	9307      	strlt	r3, [sp, #28]
 80056c4:	bfb8      	it	lt
 80056c6:	9204      	strlt	r2, [sp, #16]
 80056c8:	7823      	ldrb	r3, [r4, #0]
 80056ca:	2b2e      	cmp	r3, #46	; 0x2e
 80056cc:	d10c      	bne.n	80056e8 <_svfiprintf_r+0x130>
 80056ce:	7863      	ldrb	r3, [r4, #1]
 80056d0:	2b2a      	cmp	r3, #42	; 0x2a
 80056d2:	d135      	bne.n	8005740 <_svfiprintf_r+0x188>
 80056d4:	9b03      	ldr	r3, [sp, #12]
 80056d6:	1d1a      	adds	r2, r3, #4
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	9203      	str	r2, [sp, #12]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	bfb8      	it	lt
 80056e0:	f04f 33ff 	movlt.w	r3, #4294967295
 80056e4:	3402      	adds	r4, #2
 80056e6:	9305      	str	r3, [sp, #20]
 80056e8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80057b4 <_svfiprintf_r+0x1fc>
 80056ec:	7821      	ldrb	r1, [r4, #0]
 80056ee:	2203      	movs	r2, #3
 80056f0:	4650      	mov	r0, sl
 80056f2:	f7fa fd75 	bl	80001e0 <memchr>
 80056f6:	b140      	cbz	r0, 800570a <_svfiprintf_r+0x152>
 80056f8:	2340      	movs	r3, #64	; 0x40
 80056fa:	eba0 000a 	sub.w	r0, r0, sl
 80056fe:	fa03 f000 	lsl.w	r0, r3, r0
 8005702:	9b04      	ldr	r3, [sp, #16]
 8005704:	4303      	orrs	r3, r0
 8005706:	3401      	adds	r4, #1
 8005708:	9304      	str	r3, [sp, #16]
 800570a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800570e:	4826      	ldr	r0, [pc, #152]	; (80057a8 <_svfiprintf_r+0x1f0>)
 8005710:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005714:	2206      	movs	r2, #6
 8005716:	f7fa fd63 	bl	80001e0 <memchr>
 800571a:	2800      	cmp	r0, #0
 800571c:	d038      	beq.n	8005790 <_svfiprintf_r+0x1d8>
 800571e:	4b23      	ldr	r3, [pc, #140]	; (80057ac <_svfiprintf_r+0x1f4>)
 8005720:	bb1b      	cbnz	r3, 800576a <_svfiprintf_r+0x1b2>
 8005722:	9b03      	ldr	r3, [sp, #12]
 8005724:	3307      	adds	r3, #7
 8005726:	f023 0307 	bic.w	r3, r3, #7
 800572a:	3308      	adds	r3, #8
 800572c:	9303      	str	r3, [sp, #12]
 800572e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005730:	4433      	add	r3, r6
 8005732:	9309      	str	r3, [sp, #36]	; 0x24
 8005734:	e767      	b.n	8005606 <_svfiprintf_r+0x4e>
 8005736:	fb0c 3202 	mla	r2, ip, r2, r3
 800573a:	460c      	mov	r4, r1
 800573c:	2001      	movs	r0, #1
 800573e:	e7a5      	b.n	800568c <_svfiprintf_r+0xd4>
 8005740:	2300      	movs	r3, #0
 8005742:	3401      	adds	r4, #1
 8005744:	9305      	str	r3, [sp, #20]
 8005746:	4619      	mov	r1, r3
 8005748:	f04f 0c0a 	mov.w	ip, #10
 800574c:	4620      	mov	r0, r4
 800574e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005752:	3a30      	subs	r2, #48	; 0x30
 8005754:	2a09      	cmp	r2, #9
 8005756:	d903      	bls.n	8005760 <_svfiprintf_r+0x1a8>
 8005758:	2b00      	cmp	r3, #0
 800575a:	d0c5      	beq.n	80056e8 <_svfiprintf_r+0x130>
 800575c:	9105      	str	r1, [sp, #20]
 800575e:	e7c3      	b.n	80056e8 <_svfiprintf_r+0x130>
 8005760:	fb0c 2101 	mla	r1, ip, r1, r2
 8005764:	4604      	mov	r4, r0
 8005766:	2301      	movs	r3, #1
 8005768:	e7f0      	b.n	800574c <_svfiprintf_r+0x194>
 800576a:	ab03      	add	r3, sp, #12
 800576c:	9300      	str	r3, [sp, #0]
 800576e:	462a      	mov	r2, r5
 8005770:	4b0f      	ldr	r3, [pc, #60]	; (80057b0 <_svfiprintf_r+0x1f8>)
 8005772:	a904      	add	r1, sp, #16
 8005774:	4638      	mov	r0, r7
 8005776:	f3af 8000 	nop.w
 800577a:	1c42      	adds	r2, r0, #1
 800577c:	4606      	mov	r6, r0
 800577e:	d1d6      	bne.n	800572e <_svfiprintf_r+0x176>
 8005780:	89ab      	ldrh	r3, [r5, #12]
 8005782:	065b      	lsls	r3, r3, #25
 8005784:	f53f af2c 	bmi.w	80055e0 <_svfiprintf_r+0x28>
 8005788:	9809      	ldr	r0, [sp, #36]	; 0x24
 800578a:	b01d      	add	sp, #116	; 0x74
 800578c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005790:	ab03      	add	r3, sp, #12
 8005792:	9300      	str	r3, [sp, #0]
 8005794:	462a      	mov	r2, r5
 8005796:	4b06      	ldr	r3, [pc, #24]	; (80057b0 <_svfiprintf_r+0x1f8>)
 8005798:	a904      	add	r1, sp, #16
 800579a:	4638      	mov	r0, r7
 800579c:	f000 f9d4 	bl	8005b48 <_printf_i>
 80057a0:	e7eb      	b.n	800577a <_svfiprintf_r+0x1c2>
 80057a2:	bf00      	nop
 80057a4:	08006218 	.word	0x08006218
 80057a8:	08006222 	.word	0x08006222
 80057ac:	00000000 	.word	0x00000000
 80057b0:	08005501 	.word	0x08005501
 80057b4:	0800621e 	.word	0x0800621e

080057b8 <__sfputc_r>:
 80057b8:	6893      	ldr	r3, [r2, #8]
 80057ba:	3b01      	subs	r3, #1
 80057bc:	2b00      	cmp	r3, #0
 80057be:	b410      	push	{r4}
 80057c0:	6093      	str	r3, [r2, #8]
 80057c2:	da08      	bge.n	80057d6 <__sfputc_r+0x1e>
 80057c4:	6994      	ldr	r4, [r2, #24]
 80057c6:	42a3      	cmp	r3, r4
 80057c8:	db01      	blt.n	80057ce <__sfputc_r+0x16>
 80057ca:	290a      	cmp	r1, #10
 80057cc:	d103      	bne.n	80057d6 <__sfputc_r+0x1e>
 80057ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80057d2:	f7ff bad5 	b.w	8004d80 <__swbuf_r>
 80057d6:	6813      	ldr	r3, [r2, #0]
 80057d8:	1c58      	adds	r0, r3, #1
 80057da:	6010      	str	r0, [r2, #0]
 80057dc:	7019      	strb	r1, [r3, #0]
 80057de:	4608      	mov	r0, r1
 80057e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80057e4:	4770      	bx	lr

080057e6 <__sfputs_r>:
 80057e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057e8:	4606      	mov	r6, r0
 80057ea:	460f      	mov	r7, r1
 80057ec:	4614      	mov	r4, r2
 80057ee:	18d5      	adds	r5, r2, r3
 80057f0:	42ac      	cmp	r4, r5
 80057f2:	d101      	bne.n	80057f8 <__sfputs_r+0x12>
 80057f4:	2000      	movs	r0, #0
 80057f6:	e007      	b.n	8005808 <__sfputs_r+0x22>
 80057f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057fc:	463a      	mov	r2, r7
 80057fe:	4630      	mov	r0, r6
 8005800:	f7ff ffda 	bl	80057b8 <__sfputc_r>
 8005804:	1c43      	adds	r3, r0, #1
 8005806:	d1f3      	bne.n	80057f0 <__sfputs_r+0xa>
 8005808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800580c <_vfiprintf_r>:
 800580c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005810:	460d      	mov	r5, r1
 8005812:	b09d      	sub	sp, #116	; 0x74
 8005814:	4614      	mov	r4, r2
 8005816:	4698      	mov	r8, r3
 8005818:	4606      	mov	r6, r0
 800581a:	b118      	cbz	r0, 8005824 <_vfiprintf_r+0x18>
 800581c:	6983      	ldr	r3, [r0, #24]
 800581e:	b90b      	cbnz	r3, 8005824 <_vfiprintf_r+0x18>
 8005820:	f7ff fc88 	bl	8005134 <__sinit>
 8005824:	4b89      	ldr	r3, [pc, #548]	; (8005a4c <_vfiprintf_r+0x240>)
 8005826:	429d      	cmp	r5, r3
 8005828:	d11b      	bne.n	8005862 <_vfiprintf_r+0x56>
 800582a:	6875      	ldr	r5, [r6, #4]
 800582c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800582e:	07d9      	lsls	r1, r3, #31
 8005830:	d405      	bmi.n	800583e <_vfiprintf_r+0x32>
 8005832:	89ab      	ldrh	r3, [r5, #12]
 8005834:	059a      	lsls	r2, r3, #22
 8005836:	d402      	bmi.n	800583e <_vfiprintf_r+0x32>
 8005838:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800583a:	f7ff fd19 	bl	8005270 <__retarget_lock_acquire_recursive>
 800583e:	89ab      	ldrh	r3, [r5, #12]
 8005840:	071b      	lsls	r3, r3, #28
 8005842:	d501      	bpl.n	8005848 <_vfiprintf_r+0x3c>
 8005844:	692b      	ldr	r3, [r5, #16]
 8005846:	b9eb      	cbnz	r3, 8005884 <_vfiprintf_r+0x78>
 8005848:	4629      	mov	r1, r5
 800584a:	4630      	mov	r0, r6
 800584c:	f7ff faea 	bl	8004e24 <__swsetup_r>
 8005850:	b1c0      	cbz	r0, 8005884 <_vfiprintf_r+0x78>
 8005852:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005854:	07dc      	lsls	r4, r3, #31
 8005856:	d50e      	bpl.n	8005876 <_vfiprintf_r+0x6a>
 8005858:	f04f 30ff 	mov.w	r0, #4294967295
 800585c:	b01d      	add	sp, #116	; 0x74
 800585e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005862:	4b7b      	ldr	r3, [pc, #492]	; (8005a50 <_vfiprintf_r+0x244>)
 8005864:	429d      	cmp	r5, r3
 8005866:	d101      	bne.n	800586c <_vfiprintf_r+0x60>
 8005868:	68b5      	ldr	r5, [r6, #8]
 800586a:	e7df      	b.n	800582c <_vfiprintf_r+0x20>
 800586c:	4b79      	ldr	r3, [pc, #484]	; (8005a54 <_vfiprintf_r+0x248>)
 800586e:	429d      	cmp	r5, r3
 8005870:	bf08      	it	eq
 8005872:	68f5      	ldreq	r5, [r6, #12]
 8005874:	e7da      	b.n	800582c <_vfiprintf_r+0x20>
 8005876:	89ab      	ldrh	r3, [r5, #12]
 8005878:	0598      	lsls	r0, r3, #22
 800587a:	d4ed      	bmi.n	8005858 <_vfiprintf_r+0x4c>
 800587c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800587e:	f7ff fcf8 	bl	8005272 <__retarget_lock_release_recursive>
 8005882:	e7e9      	b.n	8005858 <_vfiprintf_r+0x4c>
 8005884:	2300      	movs	r3, #0
 8005886:	9309      	str	r3, [sp, #36]	; 0x24
 8005888:	2320      	movs	r3, #32
 800588a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800588e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005892:	2330      	movs	r3, #48	; 0x30
 8005894:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005a58 <_vfiprintf_r+0x24c>
 8005898:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800589c:	f04f 0901 	mov.w	r9, #1
 80058a0:	4623      	mov	r3, r4
 80058a2:	469a      	mov	sl, r3
 80058a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80058a8:	b10a      	cbz	r2, 80058ae <_vfiprintf_r+0xa2>
 80058aa:	2a25      	cmp	r2, #37	; 0x25
 80058ac:	d1f9      	bne.n	80058a2 <_vfiprintf_r+0x96>
 80058ae:	ebba 0b04 	subs.w	fp, sl, r4
 80058b2:	d00b      	beq.n	80058cc <_vfiprintf_r+0xc0>
 80058b4:	465b      	mov	r3, fp
 80058b6:	4622      	mov	r2, r4
 80058b8:	4629      	mov	r1, r5
 80058ba:	4630      	mov	r0, r6
 80058bc:	f7ff ff93 	bl	80057e6 <__sfputs_r>
 80058c0:	3001      	adds	r0, #1
 80058c2:	f000 80aa 	beq.w	8005a1a <_vfiprintf_r+0x20e>
 80058c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80058c8:	445a      	add	r2, fp
 80058ca:	9209      	str	r2, [sp, #36]	; 0x24
 80058cc:	f89a 3000 	ldrb.w	r3, [sl]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	f000 80a2 	beq.w	8005a1a <_vfiprintf_r+0x20e>
 80058d6:	2300      	movs	r3, #0
 80058d8:	f04f 32ff 	mov.w	r2, #4294967295
 80058dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80058e0:	f10a 0a01 	add.w	sl, sl, #1
 80058e4:	9304      	str	r3, [sp, #16]
 80058e6:	9307      	str	r3, [sp, #28]
 80058e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80058ec:	931a      	str	r3, [sp, #104]	; 0x68
 80058ee:	4654      	mov	r4, sl
 80058f0:	2205      	movs	r2, #5
 80058f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058f6:	4858      	ldr	r0, [pc, #352]	; (8005a58 <_vfiprintf_r+0x24c>)
 80058f8:	f7fa fc72 	bl	80001e0 <memchr>
 80058fc:	9a04      	ldr	r2, [sp, #16]
 80058fe:	b9d8      	cbnz	r0, 8005938 <_vfiprintf_r+0x12c>
 8005900:	06d1      	lsls	r1, r2, #27
 8005902:	bf44      	itt	mi
 8005904:	2320      	movmi	r3, #32
 8005906:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800590a:	0713      	lsls	r3, r2, #28
 800590c:	bf44      	itt	mi
 800590e:	232b      	movmi	r3, #43	; 0x2b
 8005910:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005914:	f89a 3000 	ldrb.w	r3, [sl]
 8005918:	2b2a      	cmp	r3, #42	; 0x2a
 800591a:	d015      	beq.n	8005948 <_vfiprintf_r+0x13c>
 800591c:	9a07      	ldr	r2, [sp, #28]
 800591e:	4654      	mov	r4, sl
 8005920:	2000      	movs	r0, #0
 8005922:	f04f 0c0a 	mov.w	ip, #10
 8005926:	4621      	mov	r1, r4
 8005928:	f811 3b01 	ldrb.w	r3, [r1], #1
 800592c:	3b30      	subs	r3, #48	; 0x30
 800592e:	2b09      	cmp	r3, #9
 8005930:	d94e      	bls.n	80059d0 <_vfiprintf_r+0x1c4>
 8005932:	b1b0      	cbz	r0, 8005962 <_vfiprintf_r+0x156>
 8005934:	9207      	str	r2, [sp, #28]
 8005936:	e014      	b.n	8005962 <_vfiprintf_r+0x156>
 8005938:	eba0 0308 	sub.w	r3, r0, r8
 800593c:	fa09 f303 	lsl.w	r3, r9, r3
 8005940:	4313      	orrs	r3, r2
 8005942:	9304      	str	r3, [sp, #16]
 8005944:	46a2      	mov	sl, r4
 8005946:	e7d2      	b.n	80058ee <_vfiprintf_r+0xe2>
 8005948:	9b03      	ldr	r3, [sp, #12]
 800594a:	1d19      	adds	r1, r3, #4
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	9103      	str	r1, [sp, #12]
 8005950:	2b00      	cmp	r3, #0
 8005952:	bfbb      	ittet	lt
 8005954:	425b      	neglt	r3, r3
 8005956:	f042 0202 	orrlt.w	r2, r2, #2
 800595a:	9307      	strge	r3, [sp, #28]
 800595c:	9307      	strlt	r3, [sp, #28]
 800595e:	bfb8      	it	lt
 8005960:	9204      	strlt	r2, [sp, #16]
 8005962:	7823      	ldrb	r3, [r4, #0]
 8005964:	2b2e      	cmp	r3, #46	; 0x2e
 8005966:	d10c      	bne.n	8005982 <_vfiprintf_r+0x176>
 8005968:	7863      	ldrb	r3, [r4, #1]
 800596a:	2b2a      	cmp	r3, #42	; 0x2a
 800596c:	d135      	bne.n	80059da <_vfiprintf_r+0x1ce>
 800596e:	9b03      	ldr	r3, [sp, #12]
 8005970:	1d1a      	adds	r2, r3, #4
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	9203      	str	r2, [sp, #12]
 8005976:	2b00      	cmp	r3, #0
 8005978:	bfb8      	it	lt
 800597a:	f04f 33ff 	movlt.w	r3, #4294967295
 800597e:	3402      	adds	r4, #2
 8005980:	9305      	str	r3, [sp, #20]
 8005982:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005a68 <_vfiprintf_r+0x25c>
 8005986:	7821      	ldrb	r1, [r4, #0]
 8005988:	2203      	movs	r2, #3
 800598a:	4650      	mov	r0, sl
 800598c:	f7fa fc28 	bl	80001e0 <memchr>
 8005990:	b140      	cbz	r0, 80059a4 <_vfiprintf_r+0x198>
 8005992:	2340      	movs	r3, #64	; 0x40
 8005994:	eba0 000a 	sub.w	r0, r0, sl
 8005998:	fa03 f000 	lsl.w	r0, r3, r0
 800599c:	9b04      	ldr	r3, [sp, #16]
 800599e:	4303      	orrs	r3, r0
 80059a0:	3401      	adds	r4, #1
 80059a2:	9304      	str	r3, [sp, #16]
 80059a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059a8:	482c      	ldr	r0, [pc, #176]	; (8005a5c <_vfiprintf_r+0x250>)
 80059aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80059ae:	2206      	movs	r2, #6
 80059b0:	f7fa fc16 	bl	80001e0 <memchr>
 80059b4:	2800      	cmp	r0, #0
 80059b6:	d03f      	beq.n	8005a38 <_vfiprintf_r+0x22c>
 80059b8:	4b29      	ldr	r3, [pc, #164]	; (8005a60 <_vfiprintf_r+0x254>)
 80059ba:	bb1b      	cbnz	r3, 8005a04 <_vfiprintf_r+0x1f8>
 80059bc:	9b03      	ldr	r3, [sp, #12]
 80059be:	3307      	adds	r3, #7
 80059c0:	f023 0307 	bic.w	r3, r3, #7
 80059c4:	3308      	adds	r3, #8
 80059c6:	9303      	str	r3, [sp, #12]
 80059c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059ca:	443b      	add	r3, r7
 80059cc:	9309      	str	r3, [sp, #36]	; 0x24
 80059ce:	e767      	b.n	80058a0 <_vfiprintf_r+0x94>
 80059d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80059d4:	460c      	mov	r4, r1
 80059d6:	2001      	movs	r0, #1
 80059d8:	e7a5      	b.n	8005926 <_vfiprintf_r+0x11a>
 80059da:	2300      	movs	r3, #0
 80059dc:	3401      	adds	r4, #1
 80059de:	9305      	str	r3, [sp, #20]
 80059e0:	4619      	mov	r1, r3
 80059e2:	f04f 0c0a 	mov.w	ip, #10
 80059e6:	4620      	mov	r0, r4
 80059e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80059ec:	3a30      	subs	r2, #48	; 0x30
 80059ee:	2a09      	cmp	r2, #9
 80059f0:	d903      	bls.n	80059fa <_vfiprintf_r+0x1ee>
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d0c5      	beq.n	8005982 <_vfiprintf_r+0x176>
 80059f6:	9105      	str	r1, [sp, #20]
 80059f8:	e7c3      	b.n	8005982 <_vfiprintf_r+0x176>
 80059fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80059fe:	4604      	mov	r4, r0
 8005a00:	2301      	movs	r3, #1
 8005a02:	e7f0      	b.n	80059e6 <_vfiprintf_r+0x1da>
 8005a04:	ab03      	add	r3, sp, #12
 8005a06:	9300      	str	r3, [sp, #0]
 8005a08:	462a      	mov	r2, r5
 8005a0a:	4b16      	ldr	r3, [pc, #88]	; (8005a64 <_vfiprintf_r+0x258>)
 8005a0c:	a904      	add	r1, sp, #16
 8005a0e:	4630      	mov	r0, r6
 8005a10:	f3af 8000 	nop.w
 8005a14:	4607      	mov	r7, r0
 8005a16:	1c78      	adds	r0, r7, #1
 8005a18:	d1d6      	bne.n	80059c8 <_vfiprintf_r+0x1bc>
 8005a1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a1c:	07d9      	lsls	r1, r3, #31
 8005a1e:	d405      	bmi.n	8005a2c <_vfiprintf_r+0x220>
 8005a20:	89ab      	ldrh	r3, [r5, #12]
 8005a22:	059a      	lsls	r2, r3, #22
 8005a24:	d402      	bmi.n	8005a2c <_vfiprintf_r+0x220>
 8005a26:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a28:	f7ff fc23 	bl	8005272 <__retarget_lock_release_recursive>
 8005a2c:	89ab      	ldrh	r3, [r5, #12]
 8005a2e:	065b      	lsls	r3, r3, #25
 8005a30:	f53f af12 	bmi.w	8005858 <_vfiprintf_r+0x4c>
 8005a34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a36:	e711      	b.n	800585c <_vfiprintf_r+0x50>
 8005a38:	ab03      	add	r3, sp, #12
 8005a3a:	9300      	str	r3, [sp, #0]
 8005a3c:	462a      	mov	r2, r5
 8005a3e:	4b09      	ldr	r3, [pc, #36]	; (8005a64 <_vfiprintf_r+0x258>)
 8005a40:	a904      	add	r1, sp, #16
 8005a42:	4630      	mov	r0, r6
 8005a44:	f000 f880 	bl	8005b48 <_printf_i>
 8005a48:	e7e4      	b.n	8005a14 <_vfiprintf_r+0x208>
 8005a4a:	bf00      	nop
 8005a4c:	080061d8 	.word	0x080061d8
 8005a50:	080061f8 	.word	0x080061f8
 8005a54:	080061b8 	.word	0x080061b8
 8005a58:	08006218 	.word	0x08006218
 8005a5c:	08006222 	.word	0x08006222
 8005a60:	00000000 	.word	0x00000000
 8005a64:	080057e7 	.word	0x080057e7
 8005a68:	0800621e 	.word	0x0800621e

08005a6c <_printf_common>:
 8005a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a70:	4616      	mov	r6, r2
 8005a72:	4699      	mov	r9, r3
 8005a74:	688a      	ldr	r2, [r1, #8]
 8005a76:	690b      	ldr	r3, [r1, #16]
 8005a78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	bfb8      	it	lt
 8005a80:	4613      	movlt	r3, r2
 8005a82:	6033      	str	r3, [r6, #0]
 8005a84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005a88:	4607      	mov	r7, r0
 8005a8a:	460c      	mov	r4, r1
 8005a8c:	b10a      	cbz	r2, 8005a92 <_printf_common+0x26>
 8005a8e:	3301      	adds	r3, #1
 8005a90:	6033      	str	r3, [r6, #0]
 8005a92:	6823      	ldr	r3, [r4, #0]
 8005a94:	0699      	lsls	r1, r3, #26
 8005a96:	bf42      	ittt	mi
 8005a98:	6833      	ldrmi	r3, [r6, #0]
 8005a9a:	3302      	addmi	r3, #2
 8005a9c:	6033      	strmi	r3, [r6, #0]
 8005a9e:	6825      	ldr	r5, [r4, #0]
 8005aa0:	f015 0506 	ands.w	r5, r5, #6
 8005aa4:	d106      	bne.n	8005ab4 <_printf_common+0x48>
 8005aa6:	f104 0a19 	add.w	sl, r4, #25
 8005aaa:	68e3      	ldr	r3, [r4, #12]
 8005aac:	6832      	ldr	r2, [r6, #0]
 8005aae:	1a9b      	subs	r3, r3, r2
 8005ab0:	42ab      	cmp	r3, r5
 8005ab2:	dc26      	bgt.n	8005b02 <_printf_common+0x96>
 8005ab4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005ab8:	1e13      	subs	r3, r2, #0
 8005aba:	6822      	ldr	r2, [r4, #0]
 8005abc:	bf18      	it	ne
 8005abe:	2301      	movne	r3, #1
 8005ac0:	0692      	lsls	r2, r2, #26
 8005ac2:	d42b      	bmi.n	8005b1c <_printf_common+0xb0>
 8005ac4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ac8:	4649      	mov	r1, r9
 8005aca:	4638      	mov	r0, r7
 8005acc:	47c0      	blx	r8
 8005ace:	3001      	adds	r0, #1
 8005ad0:	d01e      	beq.n	8005b10 <_printf_common+0xa4>
 8005ad2:	6823      	ldr	r3, [r4, #0]
 8005ad4:	68e5      	ldr	r5, [r4, #12]
 8005ad6:	6832      	ldr	r2, [r6, #0]
 8005ad8:	f003 0306 	and.w	r3, r3, #6
 8005adc:	2b04      	cmp	r3, #4
 8005ade:	bf08      	it	eq
 8005ae0:	1aad      	subeq	r5, r5, r2
 8005ae2:	68a3      	ldr	r3, [r4, #8]
 8005ae4:	6922      	ldr	r2, [r4, #16]
 8005ae6:	bf0c      	ite	eq
 8005ae8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005aec:	2500      	movne	r5, #0
 8005aee:	4293      	cmp	r3, r2
 8005af0:	bfc4      	itt	gt
 8005af2:	1a9b      	subgt	r3, r3, r2
 8005af4:	18ed      	addgt	r5, r5, r3
 8005af6:	2600      	movs	r6, #0
 8005af8:	341a      	adds	r4, #26
 8005afa:	42b5      	cmp	r5, r6
 8005afc:	d11a      	bne.n	8005b34 <_printf_common+0xc8>
 8005afe:	2000      	movs	r0, #0
 8005b00:	e008      	b.n	8005b14 <_printf_common+0xa8>
 8005b02:	2301      	movs	r3, #1
 8005b04:	4652      	mov	r2, sl
 8005b06:	4649      	mov	r1, r9
 8005b08:	4638      	mov	r0, r7
 8005b0a:	47c0      	blx	r8
 8005b0c:	3001      	adds	r0, #1
 8005b0e:	d103      	bne.n	8005b18 <_printf_common+0xac>
 8005b10:	f04f 30ff 	mov.w	r0, #4294967295
 8005b14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b18:	3501      	adds	r5, #1
 8005b1a:	e7c6      	b.n	8005aaa <_printf_common+0x3e>
 8005b1c:	18e1      	adds	r1, r4, r3
 8005b1e:	1c5a      	adds	r2, r3, #1
 8005b20:	2030      	movs	r0, #48	; 0x30
 8005b22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b26:	4422      	add	r2, r4
 8005b28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b30:	3302      	adds	r3, #2
 8005b32:	e7c7      	b.n	8005ac4 <_printf_common+0x58>
 8005b34:	2301      	movs	r3, #1
 8005b36:	4622      	mov	r2, r4
 8005b38:	4649      	mov	r1, r9
 8005b3a:	4638      	mov	r0, r7
 8005b3c:	47c0      	blx	r8
 8005b3e:	3001      	adds	r0, #1
 8005b40:	d0e6      	beq.n	8005b10 <_printf_common+0xa4>
 8005b42:	3601      	adds	r6, #1
 8005b44:	e7d9      	b.n	8005afa <_printf_common+0x8e>
	...

08005b48 <_printf_i>:
 8005b48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b4c:	7e0f      	ldrb	r7, [r1, #24]
 8005b4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005b50:	2f78      	cmp	r7, #120	; 0x78
 8005b52:	4691      	mov	r9, r2
 8005b54:	4680      	mov	r8, r0
 8005b56:	460c      	mov	r4, r1
 8005b58:	469a      	mov	sl, r3
 8005b5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005b5e:	d807      	bhi.n	8005b70 <_printf_i+0x28>
 8005b60:	2f62      	cmp	r7, #98	; 0x62
 8005b62:	d80a      	bhi.n	8005b7a <_printf_i+0x32>
 8005b64:	2f00      	cmp	r7, #0
 8005b66:	f000 80d8 	beq.w	8005d1a <_printf_i+0x1d2>
 8005b6a:	2f58      	cmp	r7, #88	; 0x58
 8005b6c:	f000 80a3 	beq.w	8005cb6 <_printf_i+0x16e>
 8005b70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005b78:	e03a      	b.n	8005bf0 <_printf_i+0xa8>
 8005b7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005b7e:	2b15      	cmp	r3, #21
 8005b80:	d8f6      	bhi.n	8005b70 <_printf_i+0x28>
 8005b82:	a101      	add	r1, pc, #4	; (adr r1, 8005b88 <_printf_i+0x40>)
 8005b84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b88:	08005be1 	.word	0x08005be1
 8005b8c:	08005bf5 	.word	0x08005bf5
 8005b90:	08005b71 	.word	0x08005b71
 8005b94:	08005b71 	.word	0x08005b71
 8005b98:	08005b71 	.word	0x08005b71
 8005b9c:	08005b71 	.word	0x08005b71
 8005ba0:	08005bf5 	.word	0x08005bf5
 8005ba4:	08005b71 	.word	0x08005b71
 8005ba8:	08005b71 	.word	0x08005b71
 8005bac:	08005b71 	.word	0x08005b71
 8005bb0:	08005b71 	.word	0x08005b71
 8005bb4:	08005d01 	.word	0x08005d01
 8005bb8:	08005c25 	.word	0x08005c25
 8005bbc:	08005ce3 	.word	0x08005ce3
 8005bc0:	08005b71 	.word	0x08005b71
 8005bc4:	08005b71 	.word	0x08005b71
 8005bc8:	08005d23 	.word	0x08005d23
 8005bcc:	08005b71 	.word	0x08005b71
 8005bd0:	08005c25 	.word	0x08005c25
 8005bd4:	08005b71 	.word	0x08005b71
 8005bd8:	08005b71 	.word	0x08005b71
 8005bdc:	08005ceb 	.word	0x08005ceb
 8005be0:	682b      	ldr	r3, [r5, #0]
 8005be2:	1d1a      	adds	r2, r3, #4
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	602a      	str	r2, [r5, #0]
 8005be8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005bec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e0a3      	b.n	8005d3c <_printf_i+0x1f4>
 8005bf4:	6820      	ldr	r0, [r4, #0]
 8005bf6:	6829      	ldr	r1, [r5, #0]
 8005bf8:	0606      	lsls	r6, r0, #24
 8005bfa:	f101 0304 	add.w	r3, r1, #4
 8005bfe:	d50a      	bpl.n	8005c16 <_printf_i+0xce>
 8005c00:	680e      	ldr	r6, [r1, #0]
 8005c02:	602b      	str	r3, [r5, #0]
 8005c04:	2e00      	cmp	r6, #0
 8005c06:	da03      	bge.n	8005c10 <_printf_i+0xc8>
 8005c08:	232d      	movs	r3, #45	; 0x2d
 8005c0a:	4276      	negs	r6, r6
 8005c0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c10:	485e      	ldr	r0, [pc, #376]	; (8005d8c <_printf_i+0x244>)
 8005c12:	230a      	movs	r3, #10
 8005c14:	e019      	b.n	8005c4a <_printf_i+0x102>
 8005c16:	680e      	ldr	r6, [r1, #0]
 8005c18:	602b      	str	r3, [r5, #0]
 8005c1a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005c1e:	bf18      	it	ne
 8005c20:	b236      	sxthne	r6, r6
 8005c22:	e7ef      	b.n	8005c04 <_printf_i+0xbc>
 8005c24:	682b      	ldr	r3, [r5, #0]
 8005c26:	6820      	ldr	r0, [r4, #0]
 8005c28:	1d19      	adds	r1, r3, #4
 8005c2a:	6029      	str	r1, [r5, #0]
 8005c2c:	0601      	lsls	r1, r0, #24
 8005c2e:	d501      	bpl.n	8005c34 <_printf_i+0xec>
 8005c30:	681e      	ldr	r6, [r3, #0]
 8005c32:	e002      	b.n	8005c3a <_printf_i+0xf2>
 8005c34:	0646      	lsls	r6, r0, #25
 8005c36:	d5fb      	bpl.n	8005c30 <_printf_i+0xe8>
 8005c38:	881e      	ldrh	r6, [r3, #0]
 8005c3a:	4854      	ldr	r0, [pc, #336]	; (8005d8c <_printf_i+0x244>)
 8005c3c:	2f6f      	cmp	r7, #111	; 0x6f
 8005c3e:	bf0c      	ite	eq
 8005c40:	2308      	moveq	r3, #8
 8005c42:	230a      	movne	r3, #10
 8005c44:	2100      	movs	r1, #0
 8005c46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c4a:	6865      	ldr	r5, [r4, #4]
 8005c4c:	60a5      	str	r5, [r4, #8]
 8005c4e:	2d00      	cmp	r5, #0
 8005c50:	bfa2      	ittt	ge
 8005c52:	6821      	ldrge	r1, [r4, #0]
 8005c54:	f021 0104 	bicge.w	r1, r1, #4
 8005c58:	6021      	strge	r1, [r4, #0]
 8005c5a:	b90e      	cbnz	r6, 8005c60 <_printf_i+0x118>
 8005c5c:	2d00      	cmp	r5, #0
 8005c5e:	d04d      	beq.n	8005cfc <_printf_i+0x1b4>
 8005c60:	4615      	mov	r5, r2
 8005c62:	fbb6 f1f3 	udiv	r1, r6, r3
 8005c66:	fb03 6711 	mls	r7, r3, r1, r6
 8005c6a:	5dc7      	ldrb	r7, [r0, r7]
 8005c6c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005c70:	4637      	mov	r7, r6
 8005c72:	42bb      	cmp	r3, r7
 8005c74:	460e      	mov	r6, r1
 8005c76:	d9f4      	bls.n	8005c62 <_printf_i+0x11a>
 8005c78:	2b08      	cmp	r3, #8
 8005c7a:	d10b      	bne.n	8005c94 <_printf_i+0x14c>
 8005c7c:	6823      	ldr	r3, [r4, #0]
 8005c7e:	07de      	lsls	r6, r3, #31
 8005c80:	d508      	bpl.n	8005c94 <_printf_i+0x14c>
 8005c82:	6923      	ldr	r3, [r4, #16]
 8005c84:	6861      	ldr	r1, [r4, #4]
 8005c86:	4299      	cmp	r1, r3
 8005c88:	bfde      	ittt	le
 8005c8a:	2330      	movle	r3, #48	; 0x30
 8005c8c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005c90:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005c94:	1b52      	subs	r2, r2, r5
 8005c96:	6122      	str	r2, [r4, #16]
 8005c98:	f8cd a000 	str.w	sl, [sp]
 8005c9c:	464b      	mov	r3, r9
 8005c9e:	aa03      	add	r2, sp, #12
 8005ca0:	4621      	mov	r1, r4
 8005ca2:	4640      	mov	r0, r8
 8005ca4:	f7ff fee2 	bl	8005a6c <_printf_common>
 8005ca8:	3001      	adds	r0, #1
 8005caa:	d14c      	bne.n	8005d46 <_printf_i+0x1fe>
 8005cac:	f04f 30ff 	mov.w	r0, #4294967295
 8005cb0:	b004      	add	sp, #16
 8005cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cb6:	4835      	ldr	r0, [pc, #212]	; (8005d8c <_printf_i+0x244>)
 8005cb8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005cbc:	6829      	ldr	r1, [r5, #0]
 8005cbe:	6823      	ldr	r3, [r4, #0]
 8005cc0:	f851 6b04 	ldr.w	r6, [r1], #4
 8005cc4:	6029      	str	r1, [r5, #0]
 8005cc6:	061d      	lsls	r5, r3, #24
 8005cc8:	d514      	bpl.n	8005cf4 <_printf_i+0x1ac>
 8005cca:	07df      	lsls	r7, r3, #31
 8005ccc:	bf44      	itt	mi
 8005cce:	f043 0320 	orrmi.w	r3, r3, #32
 8005cd2:	6023      	strmi	r3, [r4, #0]
 8005cd4:	b91e      	cbnz	r6, 8005cde <_printf_i+0x196>
 8005cd6:	6823      	ldr	r3, [r4, #0]
 8005cd8:	f023 0320 	bic.w	r3, r3, #32
 8005cdc:	6023      	str	r3, [r4, #0]
 8005cde:	2310      	movs	r3, #16
 8005ce0:	e7b0      	b.n	8005c44 <_printf_i+0xfc>
 8005ce2:	6823      	ldr	r3, [r4, #0]
 8005ce4:	f043 0320 	orr.w	r3, r3, #32
 8005ce8:	6023      	str	r3, [r4, #0]
 8005cea:	2378      	movs	r3, #120	; 0x78
 8005cec:	4828      	ldr	r0, [pc, #160]	; (8005d90 <_printf_i+0x248>)
 8005cee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005cf2:	e7e3      	b.n	8005cbc <_printf_i+0x174>
 8005cf4:	0659      	lsls	r1, r3, #25
 8005cf6:	bf48      	it	mi
 8005cf8:	b2b6      	uxthmi	r6, r6
 8005cfa:	e7e6      	b.n	8005cca <_printf_i+0x182>
 8005cfc:	4615      	mov	r5, r2
 8005cfe:	e7bb      	b.n	8005c78 <_printf_i+0x130>
 8005d00:	682b      	ldr	r3, [r5, #0]
 8005d02:	6826      	ldr	r6, [r4, #0]
 8005d04:	6961      	ldr	r1, [r4, #20]
 8005d06:	1d18      	adds	r0, r3, #4
 8005d08:	6028      	str	r0, [r5, #0]
 8005d0a:	0635      	lsls	r5, r6, #24
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	d501      	bpl.n	8005d14 <_printf_i+0x1cc>
 8005d10:	6019      	str	r1, [r3, #0]
 8005d12:	e002      	b.n	8005d1a <_printf_i+0x1d2>
 8005d14:	0670      	lsls	r0, r6, #25
 8005d16:	d5fb      	bpl.n	8005d10 <_printf_i+0x1c8>
 8005d18:	8019      	strh	r1, [r3, #0]
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	6123      	str	r3, [r4, #16]
 8005d1e:	4615      	mov	r5, r2
 8005d20:	e7ba      	b.n	8005c98 <_printf_i+0x150>
 8005d22:	682b      	ldr	r3, [r5, #0]
 8005d24:	1d1a      	adds	r2, r3, #4
 8005d26:	602a      	str	r2, [r5, #0]
 8005d28:	681d      	ldr	r5, [r3, #0]
 8005d2a:	6862      	ldr	r2, [r4, #4]
 8005d2c:	2100      	movs	r1, #0
 8005d2e:	4628      	mov	r0, r5
 8005d30:	f7fa fa56 	bl	80001e0 <memchr>
 8005d34:	b108      	cbz	r0, 8005d3a <_printf_i+0x1f2>
 8005d36:	1b40      	subs	r0, r0, r5
 8005d38:	6060      	str	r0, [r4, #4]
 8005d3a:	6863      	ldr	r3, [r4, #4]
 8005d3c:	6123      	str	r3, [r4, #16]
 8005d3e:	2300      	movs	r3, #0
 8005d40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d44:	e7a8      	b.n	8005c98 <_printf_i+0x150>
 8005d46:	6923      	ldr	r3, [r4, #16]
 8005d48:	462a      	mov	r2, r5
 8005d4a:	4649      	mov	r1, r9
 8005d4c:	4640      	mov	r0, r8
 8005d4e:	47d0      	blx	sl
 8005d50:	3001      	adds	r0, #1
 8005d52:	d0ab      	beq.n	8005cac <_printf_i+0x164>
 8005d54:	6823      	ldr	r3, [r4, #0]
 8005d56:	079b      	lsls	r3, r3, #30
 8005d58:	d413      	bmi.n	8005d82 <_printf_i+0x23a>
 8005d5a:	68e0      	ldr	r0, [r4, #12]
 8005d5c:	9b03      	ldr	r3, [sp, #12]
 8005d5e:	4298      	cmp	r0, r3
 8005d60:	bfb8      	it	lt
 8005d62:	4618      	movlt	r0, r3
 8005d64:	e7a4      	b.n	8005cb0 <_printf_i+0x168>
 8005d66:	2301      	movs	r3, #1
 8005d68:	4632      	mov	r2, r6
 8005d6a:	4649      	mov	r1, r9
 8005d6c:	4640      	mov	r0, r8
 8005d6e:	47d0      	blx	sl
 8005d70:	3001      	adds	r0, #1
 8005d72:	d09b      	beq.n	8005cac <_printf_i+0x164>
 8005d74:	3501      	adds	r5, #1
 8005d76:	68e3      	ldr	r3, [r4, #12]
 8005d78:	9903      	ldr	r1, [sp, #12]
 8005d7a:	1a5b      	subs	r3, r3, r1
 8005d7c:	42ab      	cmp	r3, r5
 8005d7e:	dcf2      	bgt.n	8005d66 <_printf_i+0x21e>
 8005d80:	e7eb      	b.n	8005d5a <_printf_i+0x212>
 8005d82:	2500      	movs	r5, #0
 8005d84:	f104 0619 	add.w	r6, r4, #25
 8005d88:	e7f5      	b.n	8005d76 <_printf_i+0x22e>
 8005d8a:	bf00      	nop
 8005d8c:	08006229 	.word	0x08006229
 8005d90:	0800623a 	.word	0x0800623a

08005d94 <_sbrk_r>:
 8005d94:	b538      	push	{r3, r4, r5, lr}
 8005d96:	4d06      	ldr	r5, [pc, #24]	; (8005db0 <_sbrk_r+0x1c>)
 8005d98:	2300      	movs	r3, #0
 8005d9a:	4604      	mov	r4, r0
 8005d9c:	4608      	mov	r0, r1
 8005d9e:	602b      	str	r3, [r5, #0]
 8005da0:	f7fb fdfc 	bl	800199c <_sbrk>
 8005da4:	1c43      	adds	r3, r0, #1
 8005da6:	d102      	bne.n	8005dae <_sbrk_r+0x1a>
 8005da8:	682b      	ldr	r3, [r5, #0]
 8005daa:	b103      	cbz	r3, 8005dae <_sbrk_r+0x1a>
 8005dac:	6023      	str	r3, [r4, #0]
 8005dae:	bd38      	pop	{r3, r4, r5, pc}
 8005db0:	20002f70 	.word	0x20002f70

08005db4 <__sread>:
 8005db4:	b510      	push	{r4, lr}
 8005db6:	460c      	mov	r4, r1
 8005db8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dbc:	f000 f8f8 	bl	8005fb0 <_read_r>
 8005dc0:	2800      	cmp	r0, #0
 8005dc2:	bfab      	itete	ge
 8005dc4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005dc6:	89a3      	ldrhlt	r3, [r4, #12]
 8005dc8:	181b      	addge	r3, r3, r0
 8005dca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005dce:	bfac      	ite	ge
 8005dd0:	6563      	strge	r3, [r4, #84]	; 0x54
 8005dd2:	81a3      	strhlt	r3, [r4, #12]
 8005dd4:	bd10      	pop	{r4, pc}

08005dd6 <__swrite>:
 8005dd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dda:	461f      	mov	r7, r3
 8005ddc:	898b      	ldrh	r3, [r1, #12]
 8005dde:	05db      	lsls	r3, r3, #23
 8005de0:	4605      	mov	r5, r0
 8005de2:	460c      	mov	r4, r1
 8005de4:	4616      	mov	r6, r2
 8005de6:	d505      	bpl.n	8005df4 <__swrite+0x1e>
 8005de8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dec:	2302      	movs	r3, #2
 8005dee:	2200      	movs	r2, #0
 8005df0:	f000 f868 	bl	8005ec4 <_lseek_r>
 8005df4:	89a3      	ldrh	r3, [r4, #12]
 8005df6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005dfa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005dfe:	81a3      	strh	r3, [r4, #12]
 8005e00:	4632      	mov	r2, r6
 8005e02:	463b      	mov	r3, r7
 8005e04:	4628      	mov	r0, r5
 8005e06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e0a:	f000 b817 	b.w	8005e3c <_write_r>

08005e0e <__sseek>:
 8005e0e:	b510      	push	{r4, lr}
 8005e10:	460c      	mov	r4, r1
 8005e12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e16:	f000 f855 	bl	8005ec4 <_lseek_r>
 8005e1a:	1c43      	adds	r3, r0, #1
 8005e1c:	89a3      	ldrh	r3, [r4, #12]
 8005e1e:	bf15      	itete	ne
 8005e20:	6560      	strne	r0, [r4, #84]	; 0x54
 8005e22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005e26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005e2a:	81a3      	strheq	r3, [r4, #12]
 8005e2c:	bf18      	it	ne
 8005e2e:	81a3      	strhne	r3, [r4, #12]
 8005e30:	bd10      	pop	{r4, pc}

08005e32 <__sclose>:
 8005e32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e36:	f000 b813 	b.w	8005e60 <_close_r>
	...

08005e3c <_write_r>:
 8005e3c:	b538      	push	{r3, r4, r5, lr}
 8005e3e:	4d07      	ldr	r5, [pc, #28]	; (8005e5c <_write_r+0x20>)
 8005e40:	4604      	mov	r4, r0
 8005e42:	4608      	mov	r0, r1
 8005e44:	4611      	mov	r1, r2
 8005e46:	2200      	movs	r2, #0
 8005e48:	602a      	str	r2, [r5, #0]
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	f7fb fd55 	bl	80018fa <_write>
 8005e50:	1c43      	adds	r3, r0, #1
 8005e52:	d102      	bne.n	8005e5a <_write_r+0x1e>
 8005e54:	682b      	ldr	r3, [r5, #0]
 8005e56:	b103      	cbz	r3, 8005e5a <_write_r+0x1e>
 8005e58:	6023      	str	r3, [r4, #0]
 8005e5a:	bd38      	pop	{r3, r4, r5, pc}
 8005e5c:	20002f70 	.word	0x20002f70

08005e60 <_close_r>:
 8005e60:	b538      	push	{r3, r4, r5, lr}
 8005e62:	4d06      	ldr	r5, [pc, #24]	; (8005e7c <_close_r+0x1c>)
 8005e64:	2300      	movs	r3, #0
 8005e66:	4604      	mov	r4, r0
 8005e68:	4608      	mov	r0, r1
 8005e6a:	602b      	str	r3, [r5, #0]
 8005e6c:	f7fb fd61 	bl	8001932 <_close>
 8005e70:	1c43      	adds	r3, r0, #1
 8005e72:	d102      	bne.n	8005e7a <_close_r+0x1a>
 8005e74:	682b      	ldr	r3, [r5, #0]
 8005e76:	b103      	cbz	r3, 8005e7a <_close_r+0x1a>
 8005e78:	6023      	str	r3, [r4, #0]
 8005e7a:	bd38      	pop	{r3, r4, r5, pc}
 8005e7c:	20002f70 	.word	0x20002f70

08005e80 <_fstat_r>:
 8005e80:	b538      	push	{r3, r4, r5, lr}
 8005e82:	4d07      	ldr	r5, [pc, #28]	; (8005ea0 <_fstat_r+0x20>)
 8005e84:	2300      	movs	r3, #0
 8005e86:	4604      	mov	r4, r0
 8005e88:	4608      	mov	r0, r1
 8005e8a:	4611      	mov	r1, r2
 8005e8c:	602b      	str	r3, [r5, #0]
 8005e8e:	f7fb fd5c 	bl	800194a <_fstat>
 8005e92:	1c43      	adds	r3, r0, #1
 8005e94:	d102      	bne.n	8005e9c <_fstat_r+0x1c>
 8005e96:	682b      	ldr	r3, [r5, #0]
 8005e98:	b103      	cbz	r3, 8005e9c <_fstat_r+0x1c>
 8005e9a:	6023      	str	r3, [r4, #0]
 8005e9c:	bd38      	pop	{r3, r4, r5, pc}
 8005e9e:	bf00      	nop
 8005ea0:	20002f70 	.word	0x20002f70

08005ea4 <_isatty_r>:
 8005ea4:	b538      	push	{r3, r4, r5, lr}
 8005ea6:	4d06      	ldr	r5, [pc, #24]	; (8005ec0 <_isatty_r+0x1c>)
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	4604      	mov	r4, r0
 8005eac:	4608      	mov	r0, r1
 8005eae:	602b      	str	r3, [r5, #0]
 8005eb0:	f7fb fd5b 	bl	800196a <_isatty>
 8005eb4:	1c43      	adds	r3, r0, #1
 8005eb6:	d102      	bne.n	8005ebe <_isatty_r+0x1a>
 8005eb8:	682b      	ldr	r3, [r5, #0]
 8005eba:	b103      	cbz	r3, 8005ebe <_isatty_r+0x1a>
 8005ebc:	6023      	str	r3, [r4, #0]
 8005ebe:	bd38      	pop	{r3, r4, r5, pc}
 8005ec0:	20002f70 	.word	0x20002f70

08005ec4 <_lseek_r>:
 8005ec4:	b538      	push	{r3, r4, r5, lr}
 8005ec6:	4d07      	ldr	r5, [pc, #28]	; (8005ee4 <_lseek_r+0x20>)
 8005ec8:	4604      	mov	r4, r0
 8005eca:	4608      	mov	r0, r1
 8005ecc:	4611      	mov	r1, r2
 8005ece:	2200      	movs	r2, #0
 8005ed0:	602a      	str	r2, [r5, #0]
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	f7fb fd54 	bl	8001980 <_lseek>
 8005ed8:	1c43      	adds	r3, r0, #1
 8005eda:	d102      	bne.n	8005ee2 <_lseek_r+0x1e>
 8005edc:	682b      	ldr	r3, [r5, #0]
 8005ede:	b103      	cbz	r3, 8005ee2 <_lseek_r+0x1e>
 8005ee0:	6023      	str	r3, [r4, #0]
 8005ee2:	bd38      	pop	{r3, r4, r5, pc}
 8005ee4:	20002f70 	.word	0x20002f70

08005ee8 <memcpy>:
 8005ee8:	440a      	add	r2, r1
 8005eea:	4291      	cmp	r1, r2
 8005eec:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ef0:	d100      	bne.n	8005ef4 <memcpy+0xc>
 8005ef2:	4770      	bx	lr
 8005ef4:	b510      	push	{r4, lr}
 8005ef6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005efa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005efe:	4291      	cmp	r1, r2
 8005f00:	d1f9      	bne.n	8005ef6 <memcpy+0xe>
 8005f02:	bd10      	pop	{r4, pc}

08005f04 <memmove>:
 8005f04:	4288      	cmp	r0, r1
 8005f06:	b510      	push	{r4, lr}
 8005f08:	eb01 0402 	add.w	r4, r1, r2
 8005f0c:	d902      	bls.n	8005f14 <memmove+0x10>
 8005f0e:	4284      	cmp	r4, r0
 8005f10:	4623      	mov	r3, r4
 8005f12:	d807      	bhi.n	8005f24 <memmove+0x20>
 8005f14:	1e43      	subs	r3, r0, #1
 8005f16:	42a1      	cmp	r1, r4
 8005f18:	d008      	beq.n	8005f2c <memmove+0x28>
 8005f1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005f22:	e7f8      	b.n	8005f16 <memmove+0x12>
 8005f24:	4402      	add	r2, r0
 8005f26:	4601      	mov	r1, r0
 8005f28:	428a      	cmp	r2, r1
 8005f2a:	d100      	bne.n	8005f2e <memmove+0x2a>
 8005f2c:	bd10      	pop	{r4, pc}
 8005f2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005f32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005f36:	e7f7      	b.n	8005f28 <memmove+0x24>

08005f38 <__malloc_lock>:
 8005f38:	4801      	ldr	r0, [pc, #4]	; (8005f40 <__malloc_lock+0x8>)
 8005f3a:	f7ff b999 	b.w	8005270 <__retarget_lock_acquire_recursive>
 8005f3e:	bf00      	nop
 8005f40:	20002f64 	.word	0x20002f64

08005f44 <__malloc_unlock>:
 8005f44:	4801      	ldr	r0, [pc, #4]	; (8005f4c <__malloc_unlock+0x8>)
 8005f46:	f7ff b994 	b.w	8005272 <__retarget_lock_release_recursive>
 8005f4a:	bf00      	nop
 8005f4c:	20002f64 	.word	0x20002f64

08005f50 <_realloc_r>:
 8005f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f54:	4680      	mov	r8, r0
 8005f56:	4614      	mov	r4, r2
 8005f58:	460e      	mov	r6, r1
 8005f5a:	b921      	cbnz	r1, 8005f66 <_realloc_r+0x16>
 8005f5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f60:	4611      	mov	r1, r2
 8005f62:	f7ff ba59 	b.w	8005418 <_malloc_r>
 8005f66:	b92a      	cbnz	r2, 8005f74 <_realloc_r+0x24>
 8005f68:	f7ff f9ea 	bl	8005340 <_free_r>
 8005f6c:	4625      	mov	r5, r4
 8005f6e:	4628      	mov	r0, r5
 8005f70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f74:	f000 f82e 	bl	8005fd4 <_malloc_usable_size_r>
 8005f78:	4284      	cmp	r4, r0
 8005f7a:	4607      	mov	r7, r0
 8005f7c:	d802      	bhi.n	8005f84 <_realloc_r+0x34>
 8005f7e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005f82:	d812      	bhi.n	8005faa <_realloc_r+0x5a>
 8005f84:	4621      	mov	r1, r4
 8005f86:	4640      	mov	r0, r8
 8005f88:	f7ff fa46 	bl	8005418 <_malloc_r>
 8005f8c:	4605      	mov	r5, r0
 8005f8e:	2800      	cmp	r0, #0
 8005f90:	d0ed      	beq.n	8005f6e <_realloc_r+0x1e>
 8005f92:	42bc      	cmp	r4, r7
 8005f94:	4622      	mov	r2, r4
 8005f96:	4631      	mov	r1, r6
 8005f98:	bf28      	it	cs
 8005f9a:	463a      	movcs	r2, r7
 8005f9c:	f7ff ffa4 	bl	8005ee8 <memcpy>
 8005fa0:	4631      	mov	r1, r6
 8005fa2:	4640      	mov	r0, r8
 8005fa4:	f7ff f9cc 	bl	8005340 <_free_r>
 8005fa8:	e7e1      	b.n	8005f6e <_realloc_r+0x1e>
 8005faa:	4635      	mov	r5, r6
 8005fac:	e7df      	b.n	8005f6e <_realloc_r+0x1e>
	...

08005fb0 <_read_r>:
 8005fb0:	b538      	push	{r3, r4, r5, lr}
 8005fb2:	4d07      	ldr	r5, [pc, #28]	; (8005fd0 <_read_r+0x20>)
 8005fb4:	4604      	mov	r4, r0
 8005fb6:	4608      	mov	r0, r1
 8005fb8:	4611      	mov	r1, r2
 8005fba:	2200      	movs	r2, #0
 8005fbc:	602a      	str	r2, [r5, #0]
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	f7fb fc7e 	bl	80018c0 <_read>
 8005fc4:	1c43      	adds	r3, r0, #1
 8005fc6:	d102      	bne.n	8005fce <_read_r+0x1e>
 8005fc8:	682b      	ldr	r3, [r5, #0]
 8005fca:	b103      	cbz	r3, 8005fce <_read_r+0x1e>
 8005fcc:	6023      	str	r3, [r4, #0]
 8005fce:	bd38      	pop	{r3, r4, r5, pc}
 8005fd0:	20002f70 	.word	0x20002f70

08005fd4 <_malloc_usable_size_r>:
 8005fd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fd8:	1f18      	subs	r0, r3, #4
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	bfbc      	itt	lt
 8005fde:	580b      	ldrlt	r3, [r1, r0]
 8005fe0:	18c0      	addlt	r0, r0, r3
 8005fe2:	4770      	bx	lr

08005fe4 <_init>:
 8005fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fe6:	bf00      	nop
 8005fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fea:	bc08      	pop	{r3}
 8005fec:	469e      	mov	lr, r3
 8005fee:	4770      	bx	lr

08005ff0 <_fini>:
 8005ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ff2:	bf00      	nop
 8005ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ff6:	bc08      	pop	{r3}
 8005ff8:	469e      	mov	lr, r3
 8005ffa:	4770      	bx	lr
