
display_new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae44  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000015b4  0800afd4  0800afd4  0001afd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c588  0800c588  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c588  0800c588  0001c588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c590  0800c590  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c590  0800c590  0001c590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c594  0800c594  0001c594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800c598  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000055e8  2000008c  0800c624  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005674  0800c624  00025674  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019e13  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037d7  00000000  00000000  00039ecf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001610  00000000  00000000  0003d6a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014f8  00000000  00000000  0003ecb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002574e  00000000  00000000  000401b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c339  00000000  00000000  000658fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d628d  00000000  00000000  00081c37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00157ec4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006748  00000000  00000000  00157f14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000008c 	.word	0x2000008c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800afbc 	.word	0x0800afbc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000090 	.word	0x20000090
 80001cc:	0800afbc 	.word	0x0800afbc

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	; 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__aeabi_d2uiz>:
 800085c:	004a      	lsls	r2, r1, #1
 800085e:	d211      	bcs.n	8000884 <__aeabi_d2uiz+0x28>
 8000860:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000864:	d211      	bcs.n	800088a <__aeabi_d2uiz+0x2e>
 8000866:	d50d      	bpl.n	8000884 <__aeabi_d2uiz+0x28>
 8000868:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800086c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000870:	d40e      	bmi.n	8000890 <__aeabi_d2uiz+0x34>
 8000872:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000876:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800087a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800087e:	fa23 f002 	lsr.w	r0, r3, r2
 8000882:	4770      	bx	lr
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	4770      	bx	lr
 800088a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800088e:	d102      	bne.n	8000896 <__aeabi_d2uiz+0x3a>
 8000890:	f04f 30ff 	mov.w	r0, #4294967295
 8000894:	4770      	bx	lr
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	4770      	bx	lr

0800089c <__aeabi_uldivmod>:
 800089c:	b953      	cbnz	r3, 80008b4 <__aeabi_uldivmod+0x18>
 800089e:	b94a      	cbnz	r2, 80008b4 <__aeabi_uldivmod+0x18>
 80008a0:	2900      	cmp	r1, #0
 80008a2:	bf08      	it	eq
 80008a4:	2800      	cmpeq	r0, #0
 80008a6:	bf1c      	itt	ne
 80008a8:	f04f 31ff 	movne.w	r1, #4294967295
 80008ac:	f04f 30ff 	movne.w	r0, #4294967295
 80008b0:	f000 b974 	b.w	8000b9c <__aeabi_idiv0>
 80008b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008bc:	f000 f806 	bl	80008cc <__udivmoddi4>
 80008c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008c8:	b004      	add	sp, #16
 80008ca:	4770      	bx	lr

080008cc <__udivmoddi4>:
 80008cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008d0:	9d08      	ldr	r5, [sp, #32]
 80008d2:	4604      	mov	r4, r0
 80008d4:	468e      	mov	lr, r1
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d14d      	bne.n	8000976 <__udivmoddi4+0xaa>
 80008da:	428a      	cmp	r2, r1
 80008dc:	4694      	mov	ip, r2
 80008de:	d969      	bls.n	80009b4 <__udivmoddi4+0xe8>
 80008e0:	fab2 f282 	clz	r2, r2
 80008e4:	b152      	cbz	r2, 80008fc <__udivmoddi4+0x30>
 80008e6:	fa01 f302 	lsl.w	r3, r1, r2
 80008ea:	f1c2 0120 	rsb	r1, r2, #32
 80008ee:	fa20 f101 	lsr.w	r1, r0, r1
 80008f2:	fa0c fc02 	lsl.w	ip, ip, r2
 80008f6:	ea41 0e03 	orr.w	lr, r1, r3
 80008fa:	4094      	lsls	r4, r2
 80008fc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000900:	0c21      	lsrs	r1, r4, #16
 8000902:	fbbe f6f8 	udiv	r6, lr, r8
 8000906:	fa1f f78c 	uxth.w	r7, ip
 800090a:	fb08 e316 	mls	r3, r8, r6, lr
 800090e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000912:	fb06 f107 	mul.w	r1, r6, r7
 8000916:	4299      	cmp	r1, r3
 8000918:	d90a      	bls.n	8000930 <__udivmoddi4+0x64>
 800091a:	eb1c 0303 	adds.w	r3, ip, r3
 800091e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000922:	f080 811f 	bcs.w	8000b64 <__udivmoddi4+0x298>
 8000926:	4299      	cmp	r1, r3
 8000928:	f240 811c 	bls.w	8000b64 <__udivmoddi4+0x298>
 800092c:	3e02      	subs	r6, #2
 800092e:	4463      	add	r3, ip
 8000930:	1a5b      	subs	r3, r3, r1
 8000932:	b2a4      	uxth	r4, r4
 8000934:	fbb3 f0f8 	udiv	r0, r3, r8
 8000938:	fb08 3310 	mls	r3, r8, r0, r3
 800093c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000940:	fb00 f707 	mul.w	r7, r0, r7
 8000944:	42a7      	cmp	r7, r4
 8000946:	d90a      	bls.n	800095e <__udivmoddi4+0x92>
 8000948:	eb1c 0404 	adds.w	r4, ip, r4
 800094c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000950:	f080 810a 	bcs.w	8000b68 <__udivmoddi4+0x29c>
 8000954:	42a7      	cmp	r7, r4
 8000956:	f240 8107 	bls.w	8000b68 <__udivmoddi4+0x29c>
 800095a:	4464      	add	r4, ip
 800095c:	3802      	subs	r0, #2
 800095e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000962:	1be4      	subs	r4, r4, r7
 8000964:	2600      	movs	r6, #0
 8000966:	b11d      	cbz	r5, 8000970 <__udivmoddi4+0xa4>
 8000968:	40d4      	lsrs	r4, r2
 800096a:	2300      	movs	r3, #0
 800096c:	e9c5 4300 	strd	r4, r3, [r5]
 8000970:	4631      	mov	r1, r6
 8000972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000976:	428b      	cmp	r3, r1
 8000978:	d909      	bls.n	800098e <__udivmoddi4+0xc2>
 800097a:	2d00      	cmp	r5, #0
 800097c:	f000 80ef 	beq.w	8000b5e <__udivmoddi4+0x292>
 8000980:	2600      	movs	r6, #0
 8000982:	e9c5 0100 	strd	r0, r1, [r5]
 8000986:	4630      	mov	r0, r6
 8000988:	4631      	mov	r1, r6
 800098a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800098e:	fab3 f683 	clz	r6, r3
 8000992:	2e00      	cmp	r6, #0
 8000994:	d14a      	bne.n	8000a2c <__udivmoddi4+0x160>
 8000996:	428b      	cmp	r3, r1
 8000998:	d302      	bcc.n	80009a0 <__udivmoddi4+0xd4>
 800099a:	4282      	cmp	r2, r0
 800099c:	f200 80f9 	bhi.w	8000b92 <__udivmoddi4+0x2c6>
 80009a0:	1a84      	subs	r4, r0, r2
 80009a2:	eb61 0303 	sbc.w	r3, r1, r3
 80009a6:	2001      	movs	r0, #1
 80009a8:	469e      	mov	lr, r3
 80009aa:	2d00      	cmp	r5, #0
 80009ac:	d0e0      	beq.n	8000970 <__udivmoddi4+0xa4>
 80009ae:	e9c5 4e00 	strd	r4, lr, [r5]
 80009b2:	e7dd      	b.n	8000970 <__udivmoddi4+0xa4>
 80009b4:	b902      	cbnz	r2, 80009b8 <__udivmoddi4+0xec>
 80009b6:	deff      	udf	#255	; 0xff
 80009b8:	fab2 f282 	clz	r2, r2
 80009bc:	2a00      	cmp	r2, #0
 80009be:	f040 8092 	bne.w	8000ae6 <__udivmoddi4+0x21a>
 80009c2:	eba1 010c 	sub.w	r1, r1, ip
 80009c6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009ca:	fa1f fe8c 	uxth.w	lr, ip
 80009ce:	2601      	movs	r6, #1
 80009d0:	0c20      	lsrs	r0, r4, #16
 80009d2:	fbb1 f3f7 	udiv	r3, r1, r7
 80009d6:	fb07 1113 	mls	r1, r7, r3, r1
 80009da:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009de:	fb0e f003 	mul.w	r0, lr, r3
 80009e2:	4288      	cmp	r0, r1
 80009e4:	d908      	bls.n	80009f8 <__udivmoddi4+0x12c>
 80009e6:	eb1c 0101 	adds.w	r1, ip, r1
 80009ea:	f103 38ff 	add.w	r8, r3, #4294967295
 80009ee:	d202      	bcs.n	80009f6 <__udivmoddi4+0x12a>
 80009f0:	4288      	cmp	r0, r1
 80009f2:	f200 80cb 	bhi.w	8000b8c <__udivmoddi4+0x2c0>
 80009f6:	4643      	mov	r3, r8
 80009f8:	1a09      	subs	r1, r1, r0
 80009fa:	b2a4      	uxth	r4, r4
 80009fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a00:	fb07 1110 	mls	r1, r7, r0, r1
 8000a04:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a08:	fb0e fe00 	mul.w	lr, lr, r0
 8000a0c:	45a6      	cmp	lr, r4
 8000a0e:	d908      	bls.n	8000a22 <__udivmoddi4+0x156>
 8000a10:	eb1c 0404 	adds.w	r4, ip, r4
 8000a14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a18:	d202      	bcs.n	8000a20 <__udivmoddi4+0x154>
 8000a1a:	45a6      	cmp	lr, r4
 8000a1c:	f200 80bb 	bhi.w	8000b96 <__udivmoddi4+0x2ca>
 8000a20:	4608      	mov	r0, r1
 8000a22:	eba4 040e 	sub.w	r4, r4, lr
 8000a26:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a2a:	e79c      	b.n	8000966 <__udivmoddi4+0x9a>
 8000a2c:	f1c6 0720 	rsb	r7, r6, #32
 8000a30:	40b3      	lsls	r3, r6
 8000a32:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a36:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a3a:	fa20 f407 	lsr.w	r4, r0, r7
 8000a3e:	fa01 f306 	lsl.w	r3, r1, r6
 8000a42:	431c      	orrs	r4, r3
 8000a44:	40f9      	lsrs	r1, r7
 8000a46:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a4a:	fa00 f306 	lsl.w	r3, r0, r6
 8000a4e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a52:	0c20      	lsrs	r0, r4, #16
 8000a54:	fa1f fe8c 	uxth.w	lr, ip
 8000a58:	fb09 1118 	mls	r1, r9, r8, r1
 8000a5c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a60:	fb08 f00e 	mul.w	r0, r8, lr
 8000a64:	4288      	cmp	r0, r1
 8000a66:	fa02 f206 	lsl.w	r2, r2, r6
 8000a6a:	d90b      	bls.n	8000a84 <__udivmoddi4+0x1b8>
 8000a6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a70:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a74:	f080 8088 	bcs.w	8000b88 <__udivmoddi4+0x2bc>
 8000a78:	4288      	cmp	r0, r1
 8000a7a:	f240 8085 	bls.w	8000b88 <__udivmoddi4+0x2bc>
 8000a7e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a82:	4461      	add	r1, ip
 8000a84:	1a09      	subs	r1, r1, r0
 8000a86:	b2a4      	uxth	r4, r4
 8000a88:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a8c:	fb09 1110 	mls	r1, r9, r0, r1
 8000a90:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a98:	458e      	cmp	lr, r1
 8000a9a:	d908      	bls.n	8000aae <__udivmoddi4+0x1e2>
 8000a9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000aa0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000aa4:	d26c      	bcs.n	8000b80 <__udivmoddi4+0x2b4>
 8000aa6:	458e      	cmp	lr, r1
 8000aa8:	d96a      	bls.n	8000b80 <__udivmoddi4+0x2b4>
 8000aaa:	3802      	subs	r0, #2
 8000aac:	4461      	add	r1, ip
 8000aae:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ab2:	fba0 9402 	umull	r9, r4, r0, r2
 8000ab6:	eba1 010e 	sub.w	r1, r1, lr
 8000aba:	42a1      	cmp	r1, r4
 8000abc:	46c8      	mov	r8, r9
 8000abe:	46a6      	mov	lr, r4
 8000ac0:	d356      	bcc.n	8000b70 <__udivmoddi4+0x2a4>
 8000ac2:	d053      	beq.n	8000b6c <__udivmoddi4+0x2a0>
 8000ac4:	b15d      	cbz	r5, 8000ade <__udivmoddi4+0x212>
 8000ac6:	ebb3 0208 	subs.w	r2, r3, r8
 8000aca:	eb61 010e 	sbc.w	r1, r1, lr
 8000ace:	fa01 f707 	lsl.w	r7, r1, r7
 8000ad2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ad6:	40f1      	lsrs	r1, r6
 8000ad8:	431f      	orrs	r7, r3
 8000ada:	e9c5 7100 	strd	r7, r1, [r5]
 8000ade:	2600      	movs	r6, #0
 8000ae0:	4631      	mov	r1, r6
 8000ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae6:	f1c2 0320 	rsb	r3, r2, #32
 8000aea:	40d8      	lsrs	r0, r3
 8000aec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000af0:	fa21 f303 	lsr.w	r3, r1, r3
 8000af4:	4091      	lsls	r1, r2
 8000af6:	4301      	orrs	r1, r0
 8000af8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000afc:	fa1f fe8c 	uxth.w	lr, ip
 8000b00:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b04:	fb07 3610 	mls	r6, r7, r0, r3
 8000b08:	0c0b      	lsrs	r3, r1, #16
 8000b0a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b0e:	fb00 f60e 	mul.w	r6, r0, lr
 8000b12:	429e      	cmp	r6, r3
 8000b14:	fa04 f402 	lsl.w	r4, r4, r2
 8000b18:	d908      	bls.n	8000b2c <__udivmoddi4+0x260>
 8000b1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b22:	d22f      	bcs.n	8000b84 <__udivmoddi4+0x2b8>
 8000b24:	429e      	cmp	r6, r3
 8000b26:	d92d      	bls.n	8000b84 <__udivmoddi4+0x2b8>
 8000b28:	3802      	subs	r0, #2
 8000b2a:	4463      	add	r3, ip
 8000b2c:	1b9b      	subs	r3, r3, r6
 8000b2e:	b289      	uxth	r1, r1
 8000b30:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b34:	fb07 3316 	mls	r3, r7, r6, r3
 8000b38:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b3c:	fb06 f30e 	mul.w	r3, r6, lr
 8000b40:	428b      	cmp	r3, r1
 8000b42:	d908      	bls.n	8000b56 <__udivmoddi4+0x28a>
 8000b44:	eb1c 0101 	adds.w	r1, ip, r1
 8000b48:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b4c:	d216      	bcs.n	8000b7c <__udivmoddi4+0x2b0>
 8000b4e:	428b      	cmp	r3, r1
 8000b50:	d914      	bls.n	8000b7c <__udivmoddi4+0x2b0>
 8000b52:	3e02      	subs	r6, #2
 8000b54:	4461      	add	r1, ip
 8000b56:	1ac9      	subs	r1, r1, r3
 8000b58:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b5c:	e738      	b.n	80009d0 <__udivmoddi4+0x104>
 8000b5e:	462e      	mov	r6, r5
 8000b60:	4628      	mov	r0, r5
 8000b62:	e705      	b.n	8000970 <__udivmoddi4+0xa4>
 8000b64:	4606      	mov	r6, r0
 8000b66:	e6e3      	b.n	8000930 <__udivmoddi4+0x64>
 8000b68:	4618      	mov	r0, r3
 8000b6a:	e6f8      	b.n	800095e <__udivmoddi4+0x92>
 8000b6c:	454b      	cmp	r3, r9
 8000b6e:	d2a9      	bcs.n	8000ac4 <__udivmoddi4+0x1f8>
 8000b70:	ebb9 0802 	subs.w	r8, r9, r2
 8000b74:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b78:	3801      	subs	r0, #1
 8000b7a:	e7a3      	b.n	8000ac4 <__udivmoddi4+0x1f8>
 8000b7c:	4646      	mov	r6, r8
 8000b7e:	e7ea      	b.n	8000b56 <__udivmoddi4+0x28a>
 8000b80:	4620      	mov	r0, r4
 8000b82:	e794      	b.n	8000aae <__udivmoddi4+0x1e2>
 8000b84:	4640      	mov	r0, r8
 8000b86:	e7d1      	b.n	8000b2c <__udivmoddi4+0x260>
 8000b88:	46d0      	mov	r8, sl
 8000b8a:	e77b      	b.n	8000a84 <__udivmoddi4+0x1b8>
 8000b8c:	3b02      	subs	r3, #2
 8000b8e:	4461      	add	r1, ip
 8000b90:	e732      	b.n	80009f8 <__udivmoddi4+0x12c>
 8000b92:	4630      	mov	r0, r6
 8000b94:	e709      	b.n	80009aa <__udivmoddi4+0xde>
 8000b96:	4464      	add	r4, ip
 8000b98:	3802      	subs	r0, #2
 8000b9a:	e742      	b.n	8000a22 <__udivmoddi4+0x156>

08000b9c <__aeabi_idiv0>:
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <Init_LCD>:
static void iopins_ini();
static void ili9488_showArray_wo_coordinates(uint16_t *data, uint32_t count);
/*----------------------------------------------Public  functions-----------------------------------------------------*/
//initialize LCD
void Init_LCD()
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
	interrupt_initialize_priorities();
 8000ba4:	f000 f982 	bl	8000eac <interrupt_initialize_priorities>
	iopins_ini();
 8000ba8:	f000 f988 	bl	8000ebc <iopins_ini>
	initialize_ili9488();
 8000bac:	f000 fb8e 	bl	80012cc <initialize_ili9488>
	LCD_backlight_set(100);
 8000bb0:	2064      	movs	r0, #100	; 0x64
 8000bb2:	f000 f8d1 	bl	8000d58 <LCD_backlight_set>
}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
	...

08000bbc <LCD_fillRect>:
//Draw filled rectangle
void LCD_fillRect(uint16_t x1, uint16_t y1, uint16_t w, uint16_t h, uint16_t color)
{
 8000bbc:	b590      	push	{r4, r7, lr}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4604      	mov	r4, r0
 8000bc4:	4608      	mov	r0, r1
 8000bc6:	4611      	mov	r1, r2
 8000bc8:	461a      	mov	r2, r3
 8000bca:	4623      	mov	r3, r4
 8000bcc:	80fb      	strh	r3, [r7, #6]
 8000bce:	4603      	mov	r3, r0
 8000bd0:	80bb      	strh	r3, [r7, #4]
 8000bd2:	460b      	mov	r3, r1
 8000bd4:	807b      	strh	r3, [r7, #2]
 8000bd6:	4613      	mov	r3, r2
 8000bd8:	803b      	strh	r3, [r7, #0]
	uint32_t count = w * h;
 8000bda:	887b      	ldrh	r3, [r7, #2]
 8000bdc:	883a      	ldrh	r2, [r7, #0]
 8000bde:	fb02 f303 	mul.w	r3, r2, r3
 8000be2:	60bb      	str	r3, [r7, #8]
	LCD_set_coordinates(x1, y1, (uint16_t) (x1 + w - 1), (uint16_t) (y1 + h - 1));
 8000be4:	88fa      	ldrh	r2, [r7, #6]
 8000be6:	887b      	ldrh	r3, [r7, #2]
 8000be8:	4413      	add	r3, r2
 8000bea:	b29b      	uxth	r3, r3
 8000bec:	3b01      	subs	r3, #1
 8000bee:	b29c      	uxth	r4, r3
 8000bf0:	88ba      	ldrh	r2, [r7, #4]
 8000bf2:	883b      	ldrh	r3, [r7, #0]
 8000bf4:	4413      	add	r3, r2
 8000bf6:	b29b      	uxth	r3, r3
 8000bf8:	3b01      	subs	r3, #1
 8000bfa:	b29b      	uxth	r3, r3
 8000bfc:	88b9      	ldrh	r1, [r7, #4]
 8000bfe:	88f8      	ldrh	r0, [r7, #6]
 8000c00:	4622      	mov	r2, r4
 8000c02:	f000 f82f 	bl	8000c64 <LCD_set_coordinates>

	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_RESET);
 8000c06:	2200      	movs	r2, #0
 8000c08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c0c:	4814      	ldr	r0, [pc, #80]	; (8000c60 <LCD_fillRect+0xa4>)
 8000c0e:	f005 fc1d 	bl	800644c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_RESET);
 8000c12:	2200      	movs	r2, #0
 8000c14:	2180      	movs	r1, #128	; 0x80
 8000c16:	4812      	ldr	r0, [pc, #72]	; (8000c60 <LCD_fillRect+0xa4>)
 8000c18:	f005 fc18 	bl	800644c <HAL_GPIO_WritePin>
	TFT_REG=0x002C;
 8000c1c:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000c20:	222c      	movs	r2, #44	; 0x2c
 8000c22:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_SET);
 8000c24:	2201      	movs	r2, #1
 8000c26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c2a:	480d      	ldr	r0, [pc, #52]	; (8000c60 <LCD_fillRect+0xa4>)
 8000c2c:	f005 fc0e 	bl	800644c <HAL_GPIO_WritePin>

	for(unsigned int i=0; i<count; i++)
 8000c30:	2300      	movs	r3, #0
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	e006      	b.n	8000c44 <LCD_fillRect+0x88>
	{
		TFT_REG=color;
 8000c36:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000c3a:	8c3b      	ldrh	r3, [r7, #32]
 8000c3c:	8013      	strh	r3, [r2, #0]
	for(unsigned int i=0; i<count; i++)
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	3301      	adds	r3, #1
 8000c42:	60fb      	str	r3, [r7, #12]
 8000c44:	68fa      	ldr	r2, [r7, #12]
 8000c46:	68bb      	ldr	r3, [r7, #8]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d3f4      	bcc.n	8000c36 <LCD_fillRect+0x7a>
	}

	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_SET);
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	2180      	movs	r1, #128	; 0x80
 8000c50:	4803      	ldr	r0, [pc, #12]	; (8000c60 <LCD_fillRect+0xa4>)
 8000c52:	f005 fbfb 	bl	800644c <HAL_GPIO_WritePin>
}
 8000c56:	bf00      	nop
 8000c58:	3714      	adds	r7, #20
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd90      	pop	{r4, r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40020c00 	.word	0x40020c00

08000c64 <LCD_set_coordinates>:
//Set coordinates for LCD IC
void LCD_set_coordinates(uint16_t x1,uint16_t y1, uint16_t x2, uint16_t y2)
{
 8000c64:	b590      	push	{r4, r7, lr}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4604      	mov	r4, r0
 8000c6c:	4608      	mov	r0, r1
 8000c6e:	4611      	mov	r1, r2
 8000c70:	461a      	mov	r2, r3
 8000c72:	4623      	mov	r3, r4
 8000c74:	80fb      	strh	r3, [r7, #6]
 8000c76:	4603      	mov	r3, r0
 8000c78:	80bb      	strh	r3, [r7, #4]
 8000c7a:	460b      	mov	r3, r1
 8000c7c:	807b      	strh	r3, [r7, #2]
 8000c7e:	4613      	mov	r3, r2
 8000c80:	803b      	strh	r3, [r7, #0]
	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_RESET);
 8000c82:	2200      	movs	r2, #0
 8000c84:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c88:	4832      	ldr	r0, [pc, #200]	; (8000d54 <LCD_set_coordinates+0xf0>)
 8000c8a:	f005 fbdf 	bl	800644c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_RESET);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2180      	movs	r1, #128	; 0x80
 8000c92:	4830      	ldr	r0, [pc, #192]	; (8000d54 <LCD_set_coordinates+0xf0>)
 8000c94:	f005 fbda 	bl	800644c <HAL_GPIO_WritePin>
	TFT_REG=0x002A;
 8000c98:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000c9c:	222a      	movs	r2, #42	; 0x2a
 8000c9e:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_SET);
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ca6:	482b      	ldr	r0, [pc, #172]	; (8000d54 <LCD_set_coordinates+0xf0>)
 8000ca8:	f005 fbd0 	bl	800644c <HAL_GPIO_WritePin>
	TFT_REG=x1>>8;
 8000cac:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000cb0:	88fb      	ldrh	r3, [r7, #6]
 8000cb2:	0a1b      	lsrs	r3, r3, #8
 8000cb4:	b29b      	uxth	r3, r3
 8000cb6:	8013      	strh	r3, [r2, #0]
	TFT_REG=x1&0xFF;
 8000cb8:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000cbc:	88fa      	ldrh	r2, [r7, #6]
 8000cbe:	b2d2      	uxtb	r2, r2
 8000cc0:	b292      	uxth	r2, r2
 8000cc2:	801a      	strh	r2, [r3, #0]
	TFT_REG=x2>>8;
 8000cc4:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000cc8:	887b      	ldrh	r3, [r7, #2]
 8000cca:	0a1b      	lsrs	r3, r3, #8
 8000ccc:	b29b      	uxth	r3, r3
 8000cce:	8013      	strh	r3, [r2, #0]
	TFT_REG=x2&0xFF;
 8000cd0:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000cd4:	887a      	ldrh	r2, [r7, #2]
 8000cd6:	b2d2      	uxtb	r2, r2
 8000cd8:	b292      	uxth	r2, r2
 8000cda:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_SET);
 8000cdc:	2201      	movs	r2, #1
 8000cde:	2180      	movs	r1, #128	; 0x80
 8000ce0:	481c      	ldr	r0, [pc, #112]	; (8000d54 <LCD_set_coordinates+0xf0>)
 8000ce2:	f005 fbb3 	bl	800644c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_RESET);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cec:	4819      	ldr	r0, [pc, #100]	; (8000d54 <LCD_set_coordinates+0xf0>)
 8000cee:	f005 fbad 	bl	800644c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_RESET);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	2180      	movs	r1, #128	; 0x80
 8000cf6:	4817      	ldr	r0, [pc, #92]	; (8000d54 <LCD_set_coordinates+0xf0>)
 8000cf8:	f005 fba8 	bl	800644c <HAL_GPIO_WritePin>
	TFT_REG=0x002B;
 8000cfc:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000d00:	222b      	movs	r2, #43	; 0x2b
 8000d02:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_SET);
 8000d04:	2201      	movs	r2, #1
 8000d06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d0a:	4812      	ldr	r0, [pc, #72]	; (8000d54 <LCD_set_coordinates+0xf0>)
 8000d0c:	f005 fb9e 	bl	800644c <HAL_GPIO_WritePin>
	TFT_REG=y1>>8;
 8000d10:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000d14:	88bb      	ldrh	r3, [r7, #4]
 8000d16:	0a1b      	lsrs	r3, r3, #8
 8000d18:	b29b      	uxth	r3, r3
 8000d1a:	8013      	strh	r3, [r2, #0]
	TFT_REG=y1&0xFF;
 8000d1c:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000d20:	88ba      	ldrh	r2, [r7, #4]
 8000d22:	b2d2      	uxtb	r2, r2
 8000d24:	b292      	uxth	r2, r2
 8000d26:	801a      	strh	r2, [r3, #0]
	TFT_REG=y2>>8;
 8000d28:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000d2c:	883b      	ldrh	r3, [r7, #0]
 8000d2e:	0a1b      	lsrs	r3, r3, #8
 8000d30:	b29b      	uxth	r3, r3
 8000d32:	8013      	strh	r3, [r2, #0]
	TFT_REG=y2&0xFF;
 8000d34:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000d38:	883a      	ldrh	r2, [r7, #0]
 8000d3a:	b2d2      	uxtb	r2, r2
 8000d3c:	b292      	uxth	r2, r2
 8000d3e:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_SET);
 8000d40:	2201      	movs	r2, #1
 8000d42:	2180      	movs	r1, #128	; 0x80
 8000d44:	4803      	ldr	r0, [pc, #12]	; (8000d54 <LCD_set_coordinates+0xf0>)
 8000d46:	f005 fb81 	bl	800644c <HAL_GPIO_WritePin>
}
 8000d4a:	bf00      	nop
 8000d4c:	370c      	adds	r7, #12
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd90      	pop	{r4, r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40020c00 	.word	0x40020c00

08000d58 <LCD_backlight_set>:
//Set PWM duty cycle for LCD back light
void LCD_backlight_set(uint16_t pwm)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b0a6      	sub	sp, #152	; 0x98
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	80fb      	strh	r3, [r7, #6]

	if(pwm>=100)
 8000d62:	88fb      	ldrh	r3, [r7, #6]
 8000d64:	2b63      	cmp	r3, #99	; 0x63
 8000d66:	d902      	bls.n	8000d6e <LCD_backlight_set+0x16>
	{
		pwm=100;
 8000d68:	2364      	movs	r3, #100	; 0x64
 8000d6a:	80fb      	strh	r3, [r7, #6]
 8000d6c:	e004      	b.n	8000d78 <LCD_backlight_set+0x20>
	}else if(pwm <= 0)
 8000d6e:	88fb      	ldrh	r3, [r7, #6]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d101      	bne.n	8000d78 <LCD_backlight_set+0x20>
	{
		pwm = 0;
 8000d74:	2300      	movs	r3, #0
 8000d76:	80fb      	strh	r3, [r7, #6]
	}

	pwm=(unsigned int)((MAX_PWM_PULSE * pwm)/100);
 8000d78:	88fa      	ldrh	r2, [r7, #6]
 8000d7a:	4613      	mov	r3, r2
 8000d7c:	041b      	lsls	r3, r3, #16
 8000d7e:	1a9b      	subs	r3, r3, r2
 8000d80:	4a48      	ldr	r2, [pc, #288]	; (8000ea4 <LCD_backlight_set+0x14c>)
 8000d82:	fb82 1203 	smull	r1, r2, r2, r3
 8000d86:	1152      	asrs	r2, r2, #5
 8000d88:	17db      	asrs	r3, r3, #31
 8000d8a:	1ad3      	subs	r3, r2, r3
 8000d8c:	80fb      	strh	r3, [r7, #6]

	/* Common settings */
      TIM_HandleTypeDef htim1;
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d8e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	605a      	str	r2, [r3, #4]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
 8000da6:	611a      	str	r2, [r3, #16]
 8000da8:	615a      	str	r2, [r3, #20]
 8000daa:	619a      	str	r2, [r3, #24]
	  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000dac:	f107 030c 	add.w	r3, r7, #12
 8000db0:	2220      	movs	r2, #32
 8000db2:	2100      	movs	r1, #0
 8000db4:	4618      	mov	r0, r3
 8000db6:	f009 f8d7 	bl	8009f68 <memset>

	  htim1.Instance = TIM1;
 8000dba:	4b3b      	ldr	r3, [pc, #236]	; (8000ea8 <LCD_backlight_set+0x150>)
 8000dbc:	653b      	str	r3, [r7, #80]	; 0x50
	  htim1.Init.Prescaler = 0;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	657b      	str	r3, [r7, #84]	; 0x54
	  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	65bb      	str	r3, [r7, #88]	; 0x58
	  htim1.Init.Period = 65535;
 8000dc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dca:	65fb      	str	r3, [r7, #92]	; 0x5c
	  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	663b      	str	r3, [r7, #96]	; 0x60
	  htim1.Init.RepetitionCounter = 0;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	667b      	str	r3, [r7, #100]	; 0x64
	  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	66bb      	str	r3, [r7, #104]	; 0x68
	  HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_4);
 8000dd8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000ddc:	210c      	movs	r1, #12
 8000dde:	4618      	mov	r0, r3
 8000de0:	f007 fb24 	bl	800842c <HAL_TIM_PWM_Stop>
	  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000de4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000de8:	4618      	mov	r0, r3
 8000dea:	f007 fa08 	bl	80081fe <HAL_TIM_PWM_Init>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <LCD_backlight_set+0xa0>
	  {
	    Error_Handler();
 8000df4:	f003 fc90 	bl	8004718 <Error_Handler>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	64bb      	str	r3, [r7, #72]	; 0x48
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	64fb      	str	r3, [r7, #76]	; 0x4c
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e00:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000e04:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000e08:	4611      	mov	r1, r2
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f007 feb6 	bl	8008b7c <HAL_TIMEx_MasterConfigSynchronization>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <LCD_backlight_set+0xc2>
	  {
	    Error_Handler();
 8000e16:	f003 fc7f 	bl	8004718 <Error_Handler>
	  }
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e1a:	2360      	movs	r3, #96	; 0x60
 8000e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
	  sConfigOC.Pulse = pwm;
 8000e1e:	88fb      	ldrh	r3, [r7, #6]
 8000e20:	633b      	str	r3, [r7, #48]	; 0x30
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e22:	2300      	movs	r3, #0
 8000e24:	637b      	str	r3, [r7, #52]	; 0x34
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e26:	2300      	movs	r3, #0
 8000e28:	63fb      	str	r3, [r7, #60]	; 0x3c
	  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	643b      	str	r3, [r7, #64]	; 0x40
	  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	647b      	str	r3, [r7, #68]	; 0x44
	  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e32:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8000e36:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000e3a:	220c      	movs	r2, #12
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f007 fb65 	bl	800850c <HAL_TIM_PWM_ConfigChannel>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <LCD_backlight_set+0xf4>
	  {
	    Error_Handler();
 8000e48:	f003 fc66 	bl	8004718 <Error_Handler>
	  }
	  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	60fb      	str	r3, [r7, #12]
	  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e50:	2300      	movs	r3, #0
 8000e52:	613b      	str	r3, [r7, #16]
	  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e54:	2300      	movs	r3, #0
 8000e56:	617b      	str	r3, [r7, #20]
	  sBreakDeadTimeConfig.DeadTime = 0;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	61bb      	str	r3, [r7, #24]
	  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	61fb      	str	r3, [r7, #28]
	  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e64:	623b      	str	r3, [r7, #32]
	  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e66:	2300      	movs	r3, #0
 8000e68:	62bb      	str	r3, [r7, #40]	; 0x28
	  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e6a:	f107 020c 	add.w	r2, r7, #12
 8000e6e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000e72:	4611      	mov	r1, r2
 8000e74:	4618      	mov	r0, r3
 8000e76:	f007 fefd 	bl	8008c74 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <LCD_backlight_set+0x12c>
	  {
	    Error_Handler();
 8000e80:	f003 fc4a 	bl	8004718 <Error_Handler>
	  }

	  HAL_TIM_MspPostInit(&htim1);
 8000e84:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f004 fac7 	bl	800541c <HAL_TIM_MspPostInit>
	  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_4);
 8000e8e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000e92:	210c      	movs	r1, #12
 8000e94:	4618      	mov	r0, r3
 8000e96:	f007 fa01 	bl	800829c <HAL_TIM_PWM_Start>


}
 8000e9a:	bf00      	nop
 8000e9c:	3798      	adds	r7, #152	; 0x98
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	51eb851f 	.word	0x51eb851f
 8000ea8:	40010000 	.word	0x40010000

08000eac <interrupt_initialize_priorities>:
	ili9488_showArray_wo_coordinates(color,1);
}

/*----------------------------------------------Private functions-----------------------------------------------------*/
static void interrupt_initialize_priorities()
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4); //4 bits for preemp priority 0 bit for sub priority
 8000eb0:	2003      	movs	r0, #3
 8000eb2:	f005 f85b 	bl	8005f6c <HAL_NVIC_SetPriorityGrouping>
}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}
	...

08000ebc <iopins_ini>:
static void iopins_ini()
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b098      	sub	sp, #96	; 0x60
 8000ec0:	af00      	add	r7, sp, #0

	 __GPIOC_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	64bb      	str	r3, [r7, #72]	; 0x48
 8000ec6:	4bac      	ldr	r3, [pc, #688]	; (8001178 <iopins_ini+0x2bc>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	4aab      	ldr	r2, [pc, #684]	; (8001178 <iopins_ini+0x2bc>)
 8000ecc:	f043 0304 	orr.w	r3, r3, #4
 8000ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed2:	4ba9      	ldr	r3, [pc, #676]	; (8001178 <iopins_ini+0x2bc>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	f003 0304 	and.w	r3, r3, #4
 8000eda:	64bb      	str	r3, [r7, #72]	; 0x48
 8000edc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
	 __GPIOD_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	647b      	str	r3, [r7, #68]	; 0x44
 8000ee2:	4ba5      	ldr	r3, [pc, #660]	; (8001178 <iopins_ini+0x2bc>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	4aa4      	ldr	r2, [pc, #656]	; (8001178 <iopins_ini+0x2bc>)
 8000ee8:	f043 0308 	orr.w	r3, r3, #8
 8000eec:	6313      	str	r3, [r2, #48]	; 0x30
 8000eee:	4ba2      	ldr	r3, [pc, #648]	; (8001178 <iopins_ini+0x2bc>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	f003 0308 	and.w	r3, r3, #8
 8000ef6:	647b      	str	r3, [r7, #68]	; 0x44
 8000ef8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
	 __GPIOA_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	643b      	str	r3, [r7, #64]	; 0x40
 8000efe:	4b9e      	ldr	r3, [pc, #632]	; (8001178 <iopins_ini+0x2bc>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	4a9d      	ldr	r2, [pc, #628]	; (8001178 <iopins_ini+0x2bc>)
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0a:	4b9b      	ldr	r3, [pc, #620]	; (8001178 <iopins_ini+0x2bc>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	643b      	str	r3, [r7, #64]	; 0x40
 8000f14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
	 __GPIOB_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f1a:	4b97      	ldr	r3, [pc, #604]	; (8001178 <iopins_ini+0x2bc>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	4a96      	ldr	r2, [pc, #600]	; (8001178 <iopins_ini+0x2bc>)
 8000f20:	f043 0302 	orr.w	r3, r3, #2
 8000f24:	6313      	str	r3, [r2, #48]	; 0x30
 8000f26:	4b94      	ldr	r3, [pc, #592]	; (8001178 <iopins_ini+0x2bc>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	f003 0302 	and.w	r3, r3, #2
 8000f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
	GPIO_InitTypeDef GPIO_InitStruct;

    BUZZER_PORT_RCC();
 8000f32:	2300      	movs	r3, #0
 8000f34:	63bb      	str	r3, [r7, #56]	; 0x38
 8000f36:	4b90      	ldr	r3, [pc, #576]	; (8001178 <iopins_ini+0x2bc>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	4a8f      	ldr	r2, [pc, #572]	; (8001178 <iopins_ini+0x2bc>)
 8000f3c:	f043 0308 	orr.w	r3, r3, #8
 8000f40:	6313      	str	r3, [r2, #48]	; 0x30
 8000f42:	4b8d      	ldr	r3, [pc, #564]	; (8001178 <iopins_ini+0x2bc>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	f003 0308 	and.w	r3, r3, #8
 8000f4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8000f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Pin = BUZZER;
 8000f4e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f52:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f54:	2301      	movs	r3, #1
 8000f56:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	65bb      	str	r3, [r7, #88]	; 0x58
	HAL_GPIO_Init(BUZZER_PORT, &GPIO_InitStruct);
 8000f5c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f60:	4619      	mov	r1, r3
 8000f62:	4886      	ldr	r0, [pc, #536]	; (800117c <iopins_ini+0x2c0>)
 8000f64:	f005 f8d6 	bl	8006114 <HAL_GPIO_Init>

    RS485DIR_PORT_RCC();
 8000f68:	2300      	movs	r3, #0
 8000f6a:	637b      	str	r3, [r7, #52]	; 0x34
 8000f6c:	4b82      	ldr	r3, [pc, #520]	; (8001178 <iopins_ini+0x2bc>)
 8000f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f70:	4a81      	ldr	r2, [pc, #516]	; (8001178 <iopins_ini+0x2bc>)
 8000f72:	f043 0301 	orr.w	r3, r3, #1
 8000f76:	6313      	str	r3, [r2, #48]	; 0x30
 8000f78:	4b7f      	ldr	r3, [pc, #508]	; (8001178 <iopins_ini+0x2bc>)
 8000f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7c:	f003 0301 	and.w	r3, r3, #1
 8000f80:	637b      	str	r3, [r7, #52]	; 0x34
 8000f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Pin = RS485DIR;
 8000f84:	2302      	movs	r3, #2
 8000f86:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	65bb      	str	r3, [r7, #88]	; 0x58
	HAL_GPIO_Init(RS485DIR_PORT, &GPIO_InitStruct);
 8000f90:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f94:	4619      	mov	r1, r3
 8000f96:	487a      	ldr	r0, [pc, #488]	; (8001180 <iopins_ini+0x2c4>)
 8000f98:	f005 f8bc 	bl	8006114 <HAL_GPIO_Init>

    LCD_CS_PORT_RCC();
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	633b      	str	r3, [r7, #48]	; 0x30
 8000fa0:	4b75      	ldr	r3, [pc, #468]	; (8001178 <iopins_ini+0x2bc>)
 8000fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa4:	4a74      	ldr	r2, [pc, #464]	; (8001178 <iopins_ini+0x2bc>)
 8000fa6:	f043 0308 	orr.w	r3, r3, #8
 8000faa:	6313      	str	r3, [r2, #48]	; 0x30
 8000fac:	4b72      	ldr	r3, [pc, #456]	; (8001178 <iopins_ini+0x2bc>)
 8000fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb0:	f003 0308 	and.w	r3, r3, #8
 8000fb4:	633b      	str	r3, [r7, #48]	; 0x30
 8000fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pin = LCD_CS;
 8000fb8:	2380      	movs	r3, #128	; 0x80
 8000fba:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(LCD_CS_PORT, &GPIO_InitStruct);
 8000fc4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000fc8:	4619      	mov	r1, r3
 8000fca:	486c      	ldr	r0, [pc, #432]	; (800117c <iopins_ini+0x2c0>)
 8000fcc:	f005 f8a2 	bl	8006114 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(LCD_CS_PORT,LCD_CS,GPIO_PIN_SET);
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	2180      	movs	r1, #128	; 0x80
 8000fd4:	4869      	ldr	r0, [pc, #420]	; (800117c <iopins_ini+0x2c0>)
 8000fd6:	f005 fa39 	bl	800644c <HAL_GPIO_WritePin>

    LCD_RES_PORT_RCC();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000fde:	4b66      	ldr	r3, [pc, #408]	; (8001178 <iopins_ini+0x2bc>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	4a65      	ldr	r2, [pc, #404]	; (8001178 <iopins_ini+0x2bc>)
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fea:	4b63      	ldr	r3, [pc, #396]	; (8001178 <iopins_ini+0x2bc>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Pin = LCD_RES;
 8000ff6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ffa:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed =GPIO_SPEED_FREQ_VERY_HIGH;
 8001000:	2303      	movs	r3, #3
 8001002:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(LCD_RES_PORT, &GPIO_InitStruct);
 8001004:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001008:	4619      	mov	r1, r3
 800100a:	485d      	ldr	r0, [pc, #372]	; (8001180 <iopins_ini+0x2c4>)
 800100c:	f005 f882 	bl	8006114 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(LCD_RES_PORT,LCD_RES,GPIO_PIN_RESET);
 8001010:	2200      	movs	r2, #0
 8001012:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001016:	485a      	ldr	r0, [pc, #360]	; (8001180 <iopins_ini+0x2c4>)
 8001018:	f005 fa18 	bl	800644c <HAL_GPIO_WritePin>
	delay_ms(50);
 800101c:	2032      	movs	r0, #50	; 0x32
 800101e:	f000 f9cf 	bl	80013c0 <delay_ms>
	HAL_GPIO_WritePin(LCD_RES_PORT,LCD_RES,GPIO_PIN_SET);
 8001022:	2201      	movs	r2, #1
 8001024:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001028:	4855      	ldr	r0, [pc, #340]	; (8001180 <iopins_ini+0x2c4>)
 800102a:	f005 fa0f 	bl	800644c <HAL_GPIO_WritePin>

    LCD_DCX_PORT_RCC();
 800102e:	2300      	movs	r3, #0
 8001030:	62bb      	str	r3, [r7, #40]	; 0x28
 8001032:	4b51      	ldr	r3, [pc, #324]	; (8001178 <iopins_ini+0x2bc>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	4a50      	ldr	r2, [pc, #320]	; (8001178 <iopins_ini+0x2bc>)
 8001038:	f043 0308 	orr.w	r3, r3, #8
 800103c:	6313      	str	r3, [r2, #48]	; 0x30
 800103e:	4b4e      	ldr	r3, [pc, #312]	; (8001178 <iopins_ini+0x2bc>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	f003 0308 	and.w	r3, r3, #8
 8001046:	62bb      	str	r3, [r7, #40]	; 0x28
 8001048:	6abb      	ldr	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pin = LCD_DCX;
 800104a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800104e:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001050:	2301      	movs	r3, #1
 8001052:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed =GPIO_SPEED_FREQ_VERY_HIGH;
 8001054:	2303      	movs	r3, #3
 8001056:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(LCD_DCX_PORT, &GPIO_InitStruct);
 8001058:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800105c:	4619      	mov	r1, r3
 800105e:	4847      	ldr	r0, [pc, #284]	; (800117c <iopins_ini+0x2c0>)
 8001060:	f005 f858 	bl	8006114 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(LCD_DCX_PORT,LCD_DCX,GPIO_PIN_SET);
 8001064:	2201      	movs	r2, #1
 8001066:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800106a:	4844      	ldr	r0, [pc, #272]	; (800117c <iopins_ini+0x2c0>)
 800106c:	f005 f9ee 	bl	800644c <HAL_GPIO_WritePin>

    FLASH_CS_PORT_RCC();
 8001070:	2300      	movs	r3, #0
 8001072:	627b      	str	r3, [r7, #36]	; 0x24
 8001074:	4b40      	ldr	r3, [pc, #256]	; (8001178 <iopins_ini+0x2bc>)
 8001076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001078:	4a3f      	ldr	r2, [pc, #252]	; (8001178 <iopins_ini+0x2bc>)
 800107a:	f043 0301 	orr.w	r3, r3, #1
 800107e:	6313      	str	r3, [r2, #48]	; 0x30
 8001080:	4b3d      	ldr	r3, [pc, #244]	; (8001178 <iopins_ini+0x2bc>)
 8001082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001084:	f003 0301 	and.w	r3, r3, #1
 8001088:	627b      	str	r3, [r7, #36]	; 0x24
 800108a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Pin = FLASH_CS;
 800108c:	2310      	movs	r3, #16
 800108e:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001090:	2301      	movs	r3, #1
 8001092:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed =GPIO_SPEED_FREQ_VERY_HIGH;
 8001094:	2303      	movs	r3, #3
 8001096:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(FLASH_CS_PORT, &GPIO_InitStruct);
 8001098:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800109c:	4619      	mov	r1, r3
 800109e:	4838      	ldr	r0, [pc, #224]	; (8001180 <iopins_ini+0x2c4>)
 80010a0:	f005 f838 	bl	8006114 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(FLASH_CS_PORT,FLASH_CS,GPIO_PIN_SET);
 80010a4:	2201      	movs	r2, #1
 80010a6:	2110      	movs	r1, #16
 80010a8:	4835      	ldr	r0, [pc, #212]	; (8001180 <iopins_ini+0x2c4>)
 80010aa:	f005 f9cf 	bl	800644c <HAL_GPIO_WritePin>

    FLASH_WP_PORT_RCC();
 80010ae:	2300      	movs	r3, #0
 80010b0:	623b      	str	r3, [r7, #32]
 80010b2:	4b31      	ldr	r3, [pc, #196]	; (8001178 <iopins_ini+0x2bc>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	4a30      	ldr	r2, [pc, #192]	; (8001178 <iopins_ini+0x2bc>)
 80010b8:	f043 0304 	orr.w	r3, r3, #4
 80010bc:	6313      	str	r3, [r2, #48]	; 0x30
 80010be:	4b2e      	ldr	r3, [pc, #184]	; (8001178 <iopins_ini+0x2bc>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	f003 0304 	and.w	r3, r3, #4
 80010c6:	623b      	str	r3, [r7, #32]
 80010c8:	6a3b      	ldr	r3, [r7, #32]
	GPIO_InitStruct.Pin = FLASH_WP;
 80010ca:	2310      	movs	r3, #16
 80010cc:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ce:	2301      	movs	r3, #1
 80010d0:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d2:	2300      	movs	r3, #0
 80010d4:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(FLASH_WP_PORT, &GPIO_InitStruct);
 80010d6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80010da:	4619      	mov	r1, r3
 80010dc:	4829      	ldr	r0, [pc, #164]	; (8001184 <iopins_ini+0x2c8>)
 80010de:	f005 f819 	bl	8006114 <HAL_GPIO_Init>
	 HAL_GPIO_WritePin(FLASH_WP_PORT,FLASH_WP,GPIO_PIN_RESET);
 80010e2:	2200      	movs	r2, #0
 80010e4:	2110      	movs	r1, #16
 80010e6:	4827      	ldr	r0, [pc, #156]	; (8001184 <iopins_ini+0x2c8>)
 80010e8:	f005 f9b0 	bl	800644c <HAL_GPIO_WritePin>

    FRAM_CS_PORT_RCC();
 80010ec:	2300      	movs	r3, #0
 80010ee:	61fb      	str	r3, [r7, #28]
 80010f0:	4b21      	ldr	r3, [pc, #132]	; (8001178 <iopins_ini+0x2bc>)
 80010f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f4:	4a20      	ldr	r2, [pc, #128]	; (8001178 <iopins_ini+0x2bc>)
 80010f6:	f043 0302 	orr.w	r3, r3, #2
 80010fa:	6313      	str	r3, [r2, #48]	; 0x30
 80010fc:	4b1e      	ldr	r3, [pc, #120]	; (8001178 <iopins_ini+0x2bc>)
 80010fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001100:	f003 0302 	and.w	r3, r3, #2
 8001104:	61fb      	str	r3, [r7, #28]
 8001106:	69fb      	ldr	r3, [r7, #28]
	GPIO_InitStruct.Pin = FRAM_CS;
 8001108:	f44f 7300 	mov.w	r3, #512	; 0x200
 800110c:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110e:	2301      	movs	r3, #1
 8001110:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed =GPIO_SPEED_FREQ_VERY_HIGH;
 8001112:	2303      	movs	r3, #3
 8001114:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(FRAM_CS_PORT, &GPIO_InitStruct);
 8001116:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800111a:	4619      	mov	r1, r3
 800111c:	481a      	ldr	r0, [pc, #104]	; (8001188 <iopins_ini+0x2cc>)
 800111e:	f004 fff9 	bl	8006114 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(FRAM_CS_PORT,FRAM_CS,GPIO_PIN_SET);
 8001122:	2201      	movs	r2, #1
 8001124:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001128:	4817      	ldr	r0, [pc, #92]	; (8001188 <iopins_ini+0x2cc>)
 800112a:	f005 f98f 	bl	800644c <HAL_GPIO_WritePin>

    FRAM_HOLD_PORT_RCC();
 800112e:	2300      	movs	r3, #0
 8001130:	61bb      	str	r3, [r7, #24]
 8001132:	4b11      	ldr	r3, [pc, #68]	; (8001178 <iopins_ini+0x2bc>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	4a10      	ldr	r2, [pc, #64]	; (8001178 <iopins_ini+0x2bc>)
 8001138:	f043 0304 	orr.w	r3, r3, #4
 800113c:	6313      	str	r3, [r2, #48]	; 0x30
 800113e:	4b0e      	ldr	r3, [pc, #56]	; (8001178 <iopins_ini+0x2bc>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	f003 0304 	and.w	r3, r3, #4
 8001146:	61bb      	str	r3, [r7, #24]
 8001148:	69bb      	ldr	r3, [r7, #24]
	GPIO_InitStruct.Pin = FRAM_HOLD;
 800114a:	2302      	movs	r3, #2
 800114c:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800114e:	2301      	movs	r3, #1
 8001150:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed =GPIO_SPEED_FREQ_VERY_HIGH;
 8001152:	2303      	movs	r3, #3
 8001154:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(FRAM_HOLD_PORT, &GPIO_InitStruct);
 8001156:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800115a:	4619      	mov	r1, r3
 800115c:	4809      	ldr	r0, [pc, #36]	; (8001184 <iopins_ini+0x2c8>)
 800115e:	f004 ffd9 	bl	8006114 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(FRAM_HOLD_PORT,FRAM_HOLD,GPIO_PIN_SET);
 8001162:	2201      	movs	r2, #1
 8001164:	2102      	movs	r1, #2
 8001166:	4807      	ldr	r0, [pc, #28]	; (8001184 <iopins_ini+0x2c8>)
 8001168:	f005 f970 	bl	800644c <HAL_GPIO_WritePin>

    FRAM_WP_PORT_RCC();
 800116c:	2300      	movs	r3, #0
 800116e:	617b      	str	r3, [r7, #20]
 8001170:	4b01      	ldr	r3, [pc, #4]	; (8001178 <iopins_ini+0x2bc>)
 8001172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001174:	e00a      	b.n	800118c <iopins_ini+0x2d0>
 8001176:	bf00      	nop
 8001178:	40023800 	.word	0x40023800
 800117c:	40020c00 	.word	0x40020c00
 8001180:	40020000 	.word	0x40020000
 8001184:	40020800 	.word	0x40020800
 8001188:	40020400 	.word	0x40020400
 800118c:	4a4b      	ldr	r2, [pc, #300]	; (80012bc <iopins_ini+0x400>)
 800118e:	f043 0304 	orr.w	r3, r3, #4
 8001192:	6313      	str	r3, [r2, #48]	; 0x30
 8001194:	4b49      	ldr	r3, [pc, #292]	; (80012bc <iopins_ini+0x400>)
 8001196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001198:	f003 0304 	and.w	r3, r3, #4
 800119c:	617b      	str	r3, [r7, #20]
 800119e:	697b      	ldr	r3, [r7, #20]
	GPIO_InitStruct.Pin = FRAM_WP;
 80011a0:	2301      	movs	r3, #1
 80011a2:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a4:	2301      	movs	r3, #1
 80011a6:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a8:	2300      	movs	r3, #0
 80011aa:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(FRAM_WP_PORT, &GPIO_InitStruct);
 80011ac:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80011b0:	4619      	mov	r1, r3
 80011b2:	4843      	ldr	r0, [pc, #268]	; (80012c0 <iopins_ini+0x404>)
 80011b4:	f004 ffae 	bl	8006114 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(FRAM_WP_PORT,FRAM_WP,GPIO_PIN_SET);
 80011b8:	2201      	movs	r2, #1
 80011ba:	2101      	movs	r1, #1
 80011bc:	4840      	ldr	r0, [pc, #256]	; (80012c0 <iopins_ini+0x404>)
 80011be:	f005 f945 	bl	800644c <HAL_GPIO_WritePin>


    LED_DBG_PORT_RCC();
 80011c2:	2300      	movs	r3, #0
 80011c4:	613b      	str	r3, [r7, #16]
 80011c6:	4b3d      	ldr	r3, [pc, #244]	; (80012bc <iopins_ini+0x400>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	4a3c      	ldr	r2, [pc, #240]	; (80012bc <iopins_ini+0x400>)
 80011cc:	f043 0302 	orr.w	r3, r3, #2
 80011d0:	6313      	str	r3, [r2, #48]	; 0x30
 80011d2:	4b3a      	ldr	r3, [pc, #232]	; (80012bc <iopins_ini+0x400>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	f003 0302 	and.w	r3, r3, #2
 80011da:	613b      	str	r3, [r7, #16]
 80011dc:	693b      	ldr	r3, [r7, #16]
	GPIO_InitStruct.Pin = LED_DBG_1;
 80011de:	2308      	movs	r3, #8
 80011e0:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e2:	2301      	movs	r3, #1
 80011e4:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e6:	2300      	movs	r3, #0
 80011e8:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(LED_DBG_PORT, &GPIO_InitStruct);
 80011ea:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80011ee:	4619      	mov	r1, r3
 80011f0:	4834      	ldr	r0, [pc, #208]	; (80012c4 <iopins_ini+0x408>)
 80011f2:	f004 ff8f 	bl	8006114 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(LED_DBG_PORT,LED_DBG_1,GPIO_PIN_SET);
 80011f6:	2201      	movs	r2, #1
 80011f8:	2108      	movs	r1, #8
 80011fa:	4832      	ldr	r0, [pc, #200]	; (80012c4 <iopins_ini+0x408>)
 80011fc:	f005 f926 	bl	800644c <HAL_GPIO_WritePin>


    BUTTON_0_PORT_RCC();
 8001200:	2300      	movs	r3, #0
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	4b2d      	ldr	r3, [pc, #180]	; (80012bc <iopins_ini+0x400>)
 8001206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001208:	4a2c      	ldr	r2, [pc, #176]	; (80012bc <iopins_ini+0x400>)
 800120a:	f043 0301 	orr.w	r3, r3, #1
 800120e:	6313      	str	r3, [r2, #48]	; 0x30
 8001210:	4b2a      	ldr	r3, [pc, #168]	; (80012bc <iopins_ini+0x400>)
 8001212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001214:	f003 0301 	and.w	r3, r3, #1
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	68fb      	ldr	r3, [r7, #12]
	GPIO_InitStruct.Pin = BUTTON_0;
 800121c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001220:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001222:	2300      	movs	r3, #0
 8001224:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Pull= GPIO_NOPULL;
 8001226:	2300      	movs	r3, #0
 8001228:	657b      	str	r3, [r7, #84]	; 0x54
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122a:	2300      	movs	r3, #0
 800122c:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(BUTTON_0_PORT, &GPIO_InitStruct);
 800122e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001232:	4619      	mov	r1, r3
 8001234:	4824      	ldr	r0, [pc, #144]	; (80012c8 <iopins_ini+0x40c>)
 8001236:	f004 ff6d 	bl	8006114 <HAL_GPIO_Init>

    BUTTON_1_PORT_RCC();
 800123a:	2300      	movs	r3, #0
 800123c:	60bb      	str	r3, [r7, #8]
 800123e:	4b1f      	ldr	r3, [pc, #124]	; (80012bc <iopins_ini+0x400>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	4a1e      	ldr	r2, [pc, #120]	; (80012bc <iopins_ini+0x400>)
 8001244:	f043 0304 	orr.w	r3, r3, #4
 8001248:	6313      	str	r3, [r2, #48]	; 0x30
 800124a:	4b1c      	ldr	r3, [pc, #112]	; (80012bc <iopins_ini+0x400>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	f003 0304 	and.w	r3, r3, #4
 8001252:	60bb      	str	r3, [r7, #8]
 8001254:	68bb      	ldr	r3, [r7, #8]
	GPIO_InitStruct.Pin = BUTTON_1;
 8001256:	f44f 7300 	mov.w	r3, #512	; 0x200
 800125a:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800125c:	2300      	movs	r3, #0
 800125e:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Pull= GPIO_NOPULL;
 8001260:	2300      	movs	r3, #0
 8001262:	657b      	str	r3, [r7, #84]	; 0x54
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001264:	2300      	movs	r3, #0
 8001266:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(BUTTON_1_PORT, &GPIO_InitStruct);
 8001268:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800126c:	4619      	mov	r1, r3
 800126e:	4814      	ldr	r0, [pc, #80]	; (80012c0 <iopins_ini+0x404>)
 8001270:	f004 ff50 	bl	8006114 <HAL_GPIO_Init>


    TOUCH_RESET_PORT_RCC();
 8001274:	2300      	movs	r3, #0
 8001276:	607b      	str	r3, [r7, #4]
 8001278:	4b10      	ldr	r3, [pc, #64]	; (80012bc <iopins_ini+0x400>)
 800127a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127c:	4a0f      	ldr	r2, [pc, #60]	; (80012bc <iopins_ini+0x400>)
 800127e:	f043 0302 	orr.w	r3, r3, #2
 8001282:	6313      	str	r3, [r2, #48]	; 0x30
 8001284:	4b0d      	ldr	r3, [pc, #52]	; (80012bc <iopins_ini+0x400>)
 8001286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001288:	f003 0302 	and.w	r3, r3, #2
 800128c:	607b      	str	r3, [r7, #4]
 800128e:	687b      	ldr	r3, [r7, #4]
	GPIO_InitStruct.Pin = TOUCH_RESET;
 8001290:	2320      	movs	r3, #32
 8001292:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001294:	2301      	movs	r3, #1
 8001296:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001298:	2300      	movs	r3, #0
 800129a:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(TOUCH_RESET_PORT, &GPIO_InitStruct);
 800129c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80012a0:	4619      	mov	r1, r3
 80012a2:	4808      	ldr	r0, [pc, #32]	; (80012c4 <iopins_ini+0x408>)
 80012a4:	f004 ff36 	bl	8006114 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(TOUCH_RESET_PORT,TOUCH_RESET,GPIO_PIN_SET);
 80012a8:	2201      	movs	r2, #1
 80012aa:	2120      	movs	r1, #32
 80012ac:	4805      	ldr	r0, [pc, #20]	; (80012c4 <iopins_ini+0x408>)
 80012ae:	f005 f8cd 	bl	800644c <HAL_GPIO_WritePin>
}
 80012b2:	bf00      	nop
 80012b4:	3760      	adds	r7, #96	; 0x60
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40023800 	.word	0x40023800
 80012c0:	40020800 	.word	0x40020800
 80012c4:	40020400 	.word	0x40020400
 80012c8:	40020000 	.word	0x40020000

080012cc <initialize_ili9488>:
static void initialize_ili9488()
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af02      	add	r7, sp, #8
	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_RESET);
 80012d2:	2200      	movs	r2, #0
 80012d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012d8:	4838      	ldr	r0, [pc, #224]	; (80013bc <initialize_ili9488+0xf0>)
 80012da:	f005 f8b7 	bl	800644c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_RESET);
 80012de:	2200      	movs	r2, #0
 80012e0:	2180      	movs	r1, #128	; 0x80
 80012e2:	4836      	ldr	r0, [pc, #216]	; (80013bc <initialize_ili9488+0xf0>)
 80012e4:	f005 f8b2 	bl	800644c <HAL_GPIO_WritePin>
	TFT_REG=0x0011;
 80012e8:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80012ec:	2211      	movs	r2, #17
 80012ee:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_SET);
 80012f0:	2201      	movs	r2, #1
 80012f2:	2180      	movs	r1, #128	; 0x80
 80012f4:	4831      	ldr	r0, [pc, #196]	; (80013bc <initialize_ili9488+0xf0>)
 80012f6:	f005 f8a9 	bl	800644c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_RESET);
 80012fa:	2200      	movs	r2, #0
 80012fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001300:	482e      	ldr	r0, [pc, #184]	; (80013bc <initialize_ili9488+0xf0>)
 8001302:	f005 f8a3 	bl	800644c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS, GPIO_PIN_RESET);
 8001306:	2200      	movs	r2, #0
 8001308:	2180      	movs	r1, #128	; 0x80
 800130a:	482c      	ldr	r0, [pc, #176]	; (80013bc <initialize_ili9488+0xf0>)
 800130c:	f005 f89e 	bl	800644c <HAL_GPIO_WritePin>
	TFT_REG=0x0029;
 8001310:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8001314:	2229      	movs	r2, #41	; 0x29
 8001316:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS, GPIO_PIN_SET);
 8001318:	2201      	movs	r2, #1
 800131a:	2180      	movs	r1, #128	; 0x80
 800131c:	4827      	ldr	r0, [pc, #156]	; (80013bc <initialize_ili9488+0xf0>)
 800131e:	f005 f895 	bl	800644c <HAL_GPIO_WritePin>


	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_RESET);
 8001322:	2200      	movs	r2, #0
 8001324:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001328:	4824      	ldr	r0, [pc, #144]	; (80013bc <initialize_ili9488+0xf0>)
 800132a:	f005 f88f 	bl	800644c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_RESET);
 800132e:	2200      	movs	r2, #0
 8001330:	2180      	movs	r1, #128	; 0x80
 8001332:	4822      	ldr	r0, [pc, #136]	; (80013bc <initialize_ili9488+0xf0>)
 8001334:	f005 f88a 	bl	800644c <HAL_GPIO_WritePin>
	TFT_REG=0x003A;
 8001338:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800133c:	223a      	movs	r2, #58	; 0x3a
 800133e:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_SET);
 8001340:	2201      	movs	r2, #1
 8001342:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001346:	481d      	ldr	r0, [pc, #116]	; (80013bc <initialize_ili9488+0xf0>)
 8001348:	f005 f880 	bl	800644c <HAL_GPIO_WritePin>
	TFT_REG=0x0055;
 800134c:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8001350:	2255      	movs	r2, #85	; 0x55
 8001352:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS, GPIO_PIN_RESET);
 8001354:	2200      	movs	r2, #0
 8001356:	2180      	movs	r1, #128	; 0x80
 8001358:	4818      	ldr	r0, [pc, #96]	; (80013bc <initialize_ili9488+0xf0>)
 800135a:	f005 f877 	bl	800644c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_RESET);
 800135e:	2200      	movs	r2, #0
 8001360:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001364:	4815      	ldr	r0, [pc, #84]	; (80013bc <initialize_ili9488+0xf0>)
 8001366:	f005 f871 	bl	800644c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_RESET);
 800136a:	2200      	movs	r2, #0
 800136c:	2180      	movs	r1, #128	; 0x80
 800136e:	4813      	ldr	r0, [pc, #76]	; (80013bc <initialize_ili9488+0xf0>)
 8001370:	f005 f86c 	bl	800644c <HAL_GPIO_WritePin>
	TFT_REG=0x0036;
 8001374:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8001378:	2236      	movs	r2, #54	; 0x36
 800137a:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_SET);
 800137c:	2201      	movs	r2, #1
 800137e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001382:	480e      	ldr	r0, [pc, #56]	; (80013bc <initialize_ili9488+0xf0>)
 8001384:	f005 f862 	bl	800644c <HAL_GPIO_WritePin>
	TFT_REG=0x00E8;
 8001388:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800138c:	22e8      	movs	r2, #232	; 0xe8
 800138e:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_RESET);
 8001390:	2200      	movs	r2, #0
 8001392:	2180      	movs	r1, #128	; 0x80
 8001394:	4809      	ldr	r0, [pc, #36]	; (80013bc <initialize_ili9488+0xf0>)
 8001396:	f005 f859 	bl	800644c <HAL_GPIO_WritePin>

	delay_ms(100);
 800139a:	2064      	movs	r0, #100	; 0x64
 800139c:	f000 f810 	bl	80013c0 <delay_ms>
	LCD_fillRect(0,0,LCD_PIXEL_WIDTH,LCD_PIXEL_HEIGHT,ORANGE);
 80013a0:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80013a4:	9300      	str	r3, [sp, #0]
 80013a6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80013aa:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80013ae:	2100      	movs	r1, #0
 80013b0:	2000      	movs	r0, #0
 80013b2:	f7ff fc03 	bl	8000bbc <LCD_fillRect>
}
 80013b6:	bf00      	nop
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	40020c00 	.word	0x40020c00

080013c0 <delay_ms>:
	{
		TFT_REG=data[i];
	}
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_SET);
}
static void delay_ms(__IO uint32_t nCount1) {
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
	__IO uint32_t nCount=nCount1*23666;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f645 4272 	movw	r2, #23666	; 0x5c72
 80013ce:	fb02 f303 	mul.w	r3, r2, r3
 80013d2:	60fb      	str	r3, [r7, #12]
	while(nCount--) {
 80013d4:	bf00      	nop
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	1e5a      	subs	r2, r3, #1
 80013da:	60fa      	str	r2, [r7, #12]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d1fa      	bne.n	80013d6 <delay_ms+0x16>
  }
}
 80013e0:	bf00      	nop
 80013e2:	bf00      	nop
 80013e4:	3714      	adds	r7, #20
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
	...

080013f0 <touch_init>:
/*----------------------------------------------Public function-----------------------------------------------------*/
// Initialize touch screen
void set_page(uint8_t page){active_page = page;}
void set_layer(uint8_t layer){active_layer = layer;}
void touch_init(I2C_HandleTypeDef def)
{
 80013f0:	b084      	sub	sp, #16
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b084      	sub	sp, #16
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	f107 0c18 	add.w	ip, r7, #24
 80013fc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	hi2c1_touch = def;
 8001400:	4b66      	ldr	r3, [pc, #408]	; (800159c <touch_init+0x1ac>)
 8001402:	4618      	mov	r0, r3
 8001404:	f107 0318 	add.w	r3, r7, #24
 8001408:	2254      	movs	r2, #84	; 0x54
 800140a:	4619      	mov	r1, r3
 800140c:	f008 fd9e 	bl	8009f4c <memcpy>
	touch_write_register(0x0E,0xC000);
 8001410:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001414:	200e      	movs	r0, #14
 8001416:	f000 fa95 	bl	8001944 <touch_write_register>
	touch_write_control(0x80);
 800141a:	2080      	movs	r0, #128	; 0x80
 800141c:	f000 fa7a 	bl	8001914 <touch_write_control>
	for(int p = 0;p <MAX_NUM_PAGES; p++)
 8001420:	2300      	movs	r3, #0
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	e093      	b.n	800154e <touch_init+0x15e>
	{
		for(int l = 0;l <MAX_NUM_LAYERS; l++)
 8001426:	2300      	movs	r3, #0
 8001428:	60bb      	str	r3, [r7, #8]
 800142a:	e089      	b.n	8001540 <touch_init+0x150>
		{

			for(int i = 0;i <MAX_NUM_ELEMENTS; i++)
 800142c:	2300      	movs	r3, #0
 800142e:	607b      	str	r3, [r7, #4]
 8001430:	e07f      	b.n	8001532 <touch_init+0x142>
			{
				touch_elements_register[p][l][i].x = 0;
 8001432:	485b      	ldr	r0, [pc, #364]	; (80015a0 <touch_init+0x1b0>)
 8001434:	68ba      	ldr	r2, [r7, #8]
 8001436:	68f9      	ldr	r1, [r7, #12]
 8001438:	4613      	mov	r3, r2
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	4413      	add	r3, r2
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	2264      	movs	r2, #100	; 0x64
 8001442:	fb01 f202 	mul.w	r2, r1, r2
 8001446:	441a      	add	r2, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	4413      	add	r3, r2
 800144c:	011b      	lsls	r3, r3, #4
 800144e:	4403      	add	r3, r0
 8001450:	2200      	movs	r2, #0
 8001452:	801a      	strh	r2, [r3, #0]
				touch_elements_register[p][l][i].x1 = 0;
 8001454:	4852      	ldr	r0, [pc, #328]	; (80015a0 <touch_init+0x1b0>)
 8001456:	68ba      	ldr	r2, [r7, #8]
 8001458:	68f9      	ldr	r1, [r7, #12]
 800145a:	4613      	mov	r3, r2
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	4413      	add	r3, r2
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	2264      	movs	r2, #100	; 0x64
 8001464:	fb01 f202 	mul.w	r2, r1, r2
 8001468:	441a      	add	r2, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4413      	add	r3, r2
 800146e:	011b      	lsls	r3, r3, #4
 8001470:	4403      	add	r3, r0
 8001472:	3304      	adds	r3, #4
 8001474:	2200      	movs	r2, #0
 8001476:	801a      	strh	r2, [r3, #0]
				touch_elements_register[p][l][i].y = 0;
 8001478:	4849      	ldr	r0, [pc, #292]	; (80015a0 <touch_init+0x1b0>)
 800147a:	68ba      	ldr	r2, [r7, #8]
 800147c:	68f9      	ldr	r1, [r7, #12]
 800147e:	4613      	mov	r3, r2
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	4413      	add	r3, r2
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	2264      	movs	r2, #100	; 0x64
 8001488:	fb01 f202 	mul.w	r2, r1, r2
 800148c:	441a      	add	r2, r3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4413      	add	r3, r2
 8001492:	011b      	lsls	r3, r3, #4
 8001494:	4403      	add	r3, r0
 8001496:	3302      	adds	r3, #2
 8001498:	2200      	movs	r2, #0
 800149a:	801a      	strh	r2, [r3, #0]
				touch_elements_register[p][l][i].y1 = 0;
 800149c:	4840      	ldr	r0, [pc, #256]	; (80015a0 <touch_init+0x1b0>)
 800149e:	68ba      	ldr	r2, [r7, #8]
 80014a0:	68f9      	ldr	r1, [r7, #12]
 80014a2:	4613      	mov	r3, r2
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	4413      	add	r3, r2
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	2264      	movs	r2, #100	; 0x64
 80014ac:	fb01 f202 	mul.w	r2, r1, r2
 80014b0:	441a      	add	r2, r3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4413      	add	r3, r2
 80014b6:	011b      	lsls	r3, r3, #4
 80014b8:	4403      	add	r3, r0
 80014ba:	3306      	adds	r3, #6
 80014bc:	2200      	movs	r2, #0
 80014be:	801a      	strh	r2, [r3, #0]
				touch_elements_register[p][l][i].element_type = 0;
 80014c0:	4837      	ldr	r0, [pc, #220]	; (80015a0 <touch_init+0x1b0>)
 80014c2:	68ba      	ldr	r2, [r7, #8]
 80014c4:	68f9      	ldr	r1, [r7, #12]
 80014c6:	4613      	mov	r3, r2
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	4413      	add	r3, r2
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	2264      	movs	r2, #100	; 0x64
 80014d0:	fb01 f202 	mul.w	r2, r1, r2
 80014d4:	441a      	add	r2, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4413      	add	r3, r2
 80014da:	011b      	lsls	r3, r3, #4
 80014dc:	4403      	add	r3, r0
 80014de:	3308      	adds	r3, #8
 80014e0:	2200      	movs	r2, #0
 80014e2:	701a      	strb	r2, [r3, #0]
				touch_elements_register[p][l][i].isAlive = 0;
 80014e4:	482e      	ldr	r0, [pc, #184]	; (80015a0 <touch_init+0x1b0>)
 80014e6:	68ba      	ldr	r2, [r7, #8]
 80014e8:	68f9      	ldr	r1, [r7, #12]
 80014ea:	4613      	mov	r3, r2
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	4413      	add	r3, r2
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	2264      	movs	r2, #100	; 0x64
 80014f4:	fb01 f202 	mul.w	r2, r1, r2
 80014f8:	441a      	add	r2, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4413      	add	r3, r2
 80014fe:	011b      	lsls	r3, r3, #4
 8001500:	4403      	add	r3, r0
 8001502:	3309      	adds	r3, #9
 8001504:	2200      	movs	r2, #0
 8001506:	701a      	strb	r2, [r3, #0]
				touch_elements_register[p][l][i].element_pointer = 0;
 8001508:	4825      	ldr	r0, [pc, #148]	; (80015a0 <touch_init+0x1b0>)
 800150a:	68ba      	ldr	r2, [r7, #8]
 800150c:	68f9      	ldr	r1, [r7, #12]
 800150e:	4613      	mov	r3, r2
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	4413      	add	r3, r2
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	2264      	movs	r2, #100	; 0x64
 8001518:	fb01 f202 	mul.w	r2, r1, r2
 800151c:	441a      	add	r2, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4413      	add	r3, r2
 8001522:	011b      	lsls	r3, r3, #4
 8001524:	4403      	add	r3, r0
 8001526:	330c      	adds	r3, #12
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
			for(int i = 0;i <MAX_NUM_ELEMENTS; i++)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	3301      	adds	r3, #1
 8001530:	607b      	str	r3, [r7, #4]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2b13      	cmp	r3, #19
 8001536:	f77f af7c 	ble.w	8001432 <touch_init+0x42>
		for(int l = 0;l <MAX_NUM_LAYERS; l++)
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	3301      	adds	r3, #1
 800153e:	60bb      	str	r3, [r7, #8]
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	2b04      	cmp	r3, #4
 8001544:	f77f af72 	ble.w	800142c <touch_init+0x3c>
	for(int p = 0;p <MAX_NUM_PAGES; p++)
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	3301      	adds	r3, #1
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	2b04      	cmp	r3, #4
 8001552:	f77f af68 	ble.w	8001426 <touch_init+0x36>
			}
		}
	}
	pressed_element.x = 0;
 8001556:	4b13      	ldr	r3, [pc, #76]	; (80015a4 <touch_init+0x1b4>)
 8001558:	2200      	movs	r2, #0
 800155a:	801a      	strh	r2, [r3, #0]
	pressed_element.x1 = 0;
 800155c:	4b11      	ldr	r3, [pc, #68]	; (80015a4 <touch_init+0x1b4>)
 800155e:	2200      	movs	r2, #0
 8001560:	809a      	strh	r2, [r3, #4]
	pressed_element.y = 0;
 8001562:	4b10      	ldr	r3, [pc, #64]	; (80015a4 <touch_init+0x1b4>)
 8001564:	2200      	movs	r2, #0
 8001566:	805a      	strh	r2, [r3, #2]
	pressed_element.y1 = 0;
 8001568:	4b0e      	ldr	r3, [pc, #56]	; (80015a4 <touch_init+0x1b4>)
 800156a:	2200      	movs	r2, #0
 800156c:	80da      	strh	r2, [r3, #6]
	pressed_element.element_type = 0;
 800156e:	4b0d      	ldr	r3, [pc, #52]	; (80015a4 <touch_init+0x1b4>)
 8001570:	2200      	movs	r2, #0
 8001572:	721a      	strb	r2, [r3, #8]
	pressed_element.element_pointer = 0;
 8001574:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <touch_init+0x1b4>)
 8001576:	2200      	movs	r2, #0
 8001578:	60da      	str	r2, [r3, #12]
	pressed_element.isAlive = 0;
 800157a:	4b0a      	ldr	r3, [pc, #40]	; (80015a4 <touch_init+0x1b4>)
 800157c:	2200      	movs	r2, #0
 800157e:	725a      	strb	r2, [r3, #9]
	active_layer = 0;
 8001580:	4b09      	ldr	r3, [pc, #36]	; (80015a8 <touch_init+0x1b8>)
 8001582:	2200      	movs	r2, #0
 8001584:	701a      	strb	r2, [r3, #0]
	active_page = 0;
 8001586:	4b09      	ldr	r3, [pc, #36]	; (80015ac <touch_init+0x1bc>)
 8001588:	2200      	movs	r2, #0
 800158a:	701a      	strb	r2, [r3, #0]
}
 800158c:	bf00      	nop
 800158e:	3710      	adds	r7, #16
 8001590:	46bd      	mov	sp, r7
 8001592:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001596:	b004      	add	sp, #16
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	200000a8 	.word	0x200000a8
 80015a0:	20000120 	.word	0x20000120
 80015a4:	2000010c 	.word	0x2000010c
 80015a8:	2000011d 	.word	0x2000011d
 80015ac:	2000011c 	.word	0x2000011c

080015b0 <touch_reset>:
// Reset touch screen IC module
void touch_reset()
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
 	HAL_GPIO_WritePin(TOUCH_RESET_PORT,TOUCH_RESET,GPIO_PIN_RESET);
 80015b4:	2200      	movs	r2, #0
 80015b6:	2120      	movs	r1, #32
 80015b8:	4807      	ldr	r0, [pc, #28]	; (80015d8 <touch_reset+0x28>)
 80015ba:	f004 ff47 	bl	800644c <HAL_GPIO_WritePin>
 	delay_ms(10);
 80015be:	200a      	movs	r0, #10
 80015c0:	f000 fad0 	bl	8001b64 <delay_ms>
 	HAL_GPIO_WritePin(TOUCH_RESET_PORT,TOUCH_RESET,GPIO_PIN_SET);
 80015c4:	2201      	movs	r2, #1
 80015c6:	2120      	movs	r1, #32
 80015c8:	4803      	ldr	r0, [pc, #12]	; (80015d8 <touch_reset+0x28>)
 80015ca:	f004 ff3f 	bl	800644c <HAL_GPIO_WritePin>
 	delay_ms(50);
 80015ce:	2032      	movs	r0, #50	; 0x32
 80015d0:	f000 fac8 	bl	8001b64 <delay_ms>
}
 80015d4:	bf00      	nop
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40020400 	.word	0x40020400

080015dc <touch_periodic_process>:
{
	return pressed_element;
}
// After each call identifies if the touch was pressed and if TRUEm then identify the element
void touch_periodic_process()
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0

	if(touch.pressed==1)
 80015e0:	4b1d      	ldr	r3, [pc, #116]	; (8001658 <touch_periodic_process+0x7c>)
 80015e2:	891b      	ldrh	r3, [r3, #8]
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d135      	bne.n	8001654 <touch_periodic_process+0x78>
	{
		touch.pressed=0;
 80015e8:	4b1b      	ldr	r3, [pc, #108]	; (8001658 <touch_periodic_process+0x7c>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	811a      	strh	r2, [r3, #8]

		touch.x=touch_read(0x00);
 80015ee:	2000      	movs	r0, #0
 80015f0:	f000 f9d4 	bl	800199c <touch_read>
 80015f4:	4603      	mov	r3, r0
 80015f6:	461a      	mov	r2, r3
 80015f8:	4b17      	ldr	r3, [pc, #92]	; (8001658 <touch_periodic_process+0x7c>)
 80015fa:	801a      	strh	r2, [r3, #0]
		touch.x1=touch_read(0x01);
 80015fc:	2001      	movs	r0, #1
 80015fe:	f000 f9cd 	bl	800199c <touch_read>
 8001602:	4603      	mov	r3, r0
 8001604:	461a      	mov	r2, r3
 8001606:	4b14      	ldr	r3, [pc, #80]	; (8001658 <touch_periodic_process+0x7c>)
 8001608:	809a      	strh	r2, [r3, #4]
		touch.y=touch_read(0x02);
 800160a:	2002      	movs	r0, #2
 800160c:	f000 f9c6 	bl	800199c <touch_read>
 8001610:	4603      	mov	r3, r0
 8001612:	461a      	mov	r2, r3
 8001614:	4b10      	ldr	r3, [pc, #64]	; (8001658 <touch_periodic_process+0x7c>)
 8001616:	805a      	strh	r2, [r3, #2]
		touch.y1=touch_read(0x03);
 8001618:	2003      	movs	r0, #3
 800161a:	f000 f9bf 	bl	800199c <touch_read>
 800161e:	4603      	mov	r3, r0
 8001620:	461a      	mov	r2, r3
 8001622:	4b0d      	ldr	r3, [pc, #52]	; (8001658 <touch_periodic_process+0x7c>)
 8001624:	80da      	strh	r2, [r3, #6]
		printf("TOUCH x %d\n\r", touch.x);
		printf("TOUCH x1 %d\n\r", touch.x1);
		printf("TOUCH y %d\n\r", touch.y);
		printf("TOUCH y1 %d\n\r", touch.y1);
#endif
		touch.y=touch.x1;
 8001626:	4b0c      	ldr	r3, [pc, #48]	; (8001658 <touch_periodic_process+0x7c>)
 8001628:	889a      	ldrh	r2, [r3, #4]
 800162a:	4b0b      	ldr	r3, [pc, #44]	; (8001658 <touch_periodic_process+0x7c>)
 800162c:	805a      	strh	r2, [r3, #2]
		touch.x=1024-touch.y1;
 800162e:	4b0a      	ldr	r3, [pc, #40]	; (8001658 <touch_periodic_process+0x7c>)
 8001630:	88db      	ldrh	r3, [r3, #6]
 8001632:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8001636:	b29a      	uxth	r2, r3
 8001638:	4b07      	ldr	r3, [pc, #28]	; (8001658 <touch_periodic_process+0x7c>)
 800163a:	801a      	strh	r2, [r3, #0]
#if DEBUG_TOUCH == 1
		printf("TOUCH Y reverted %d\n\r", touch.y);
		printf("TOUCH X reverted %d\n\r", touch.x);
#endif
		if(validate_touch_coordinates()==1)
 800163c:	f000 f9e0 	bl	8001a00 <validate_touch_coordinates>
 8001640:	4603      	mov	r3, r0
 8001642:	2b01      	cmp	r3, #1
 8001644:	d103      	bne.n	800164e <touch_periodic_process+0x72>
		{
#if DEBUG_TOUCH == 1
			printf("TOUCH = X: %d,Y: %d\n\r",touch.x,touch.y);
#endif
			 touch_get_pressed_element(touch);
 8001646:	4b04      	ldr	r3, [pc, #16]	; (8001658 <touch_periodic_process+0x7c>)
 8001648:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800164a:	f000 f807 	bl	800165c <touch_get_pressed_element>
		}
		touch_write_control(0x80);
 800164e:	2080      	movs	r0, #128	; 0x80
 8001650:	f000 f960 	bl	8001914 <touch_write_control>
	}
}
 8001654:	bf00      	nop
 8001656:	bd80      	pop	{r7, pc}
 8001658:	200000fc 	.word	0x200000fc

0800165c <touch_get_pressed_element>:
// External interrupt callback function. Take an action when touchscreen was pressed
static void touch_get_pressed_element()
{
 800165c:	b590      	push	{r4, r7, lr}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
	uint16_t x0,x1,y1,y0;
	for(int i = 0; i<MAX_NUM_ELEMENTS;i++)
 8001662:	2300      	movs	r3, #0
 8001664:	607b      	str	r3, [r7, #4]
 8001666:	e07d      	b.n	8001764 <touch_get_pressed_element+0x108>
	{

		if((touch.x >= touch_elements_register[active_page][active_layer][i].x )
 8001668:	4b42      	ldr	r3, [pc, #264]	; (8001774 <touch_get_pressed_element+0x118>)
 800166a:	881a      	ldrh	r2, [r3, #0]
 800166c:	4b42      	ldr	r3, [pc, #264]	; (8001778 <touch_get_pressed_element+0x11c>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	461c      	mov	r4, r3
 8001672:	4b42      	ldr	r3, [pc, #264]	; (800177c <touch_get_pressed_element+0x120>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	4619      	mov	r1, r3
 8001678:	4841      	ldr	r0, [pc, #260]	; (8001780 <touch_get_pressed_element+0x124>)
 800167a:	460b      	mov	r3, r1
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	440b      	add	r3, r1
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	2164      	movs	r1, #100	; 0x64
 8001684:	fb04 f101 	mul.w	r1, r4, r1
 8001688:	4419      	add	r1, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	440b      	add	r3, r1
 800168e:	011b      	lsls	r3, r3, #4
 8001690:	4403      	add	r3, r0
 8001692:	881b      	ldrh	r3, [r3, #0]
 8001694:	429a      	cmp	r2, r3
 8001696:	d362      	bcc.n	800175e <touch_get_pressed_element+0x102>
		&& (touch.x <= touch_elements_register[active_page][active_layer][i].x1)
 8001698:	4b36      	ldr	r3, [pc, #216]	; (8001774 <touch_get_pressed_element+0x118>)
 800169a:	881a      	ldrh	r2, [r3, #0]
 800169c:	4b36      	ldr	r3, [pc, #216]	; (8001778 <touch_get_pressed_element+0x11c>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	461c      	mov	r4, r3
 80016a2:	4b36      	ldr	r3, [pc, #216]	; (800177c <touch_get_pressed_element+0x120>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	4619      	mov	r1, r3
 80016a8:	4835      	ldr	r0, [pc, #212]	; (8001780 <touch_get_pressed_element+0x124>)
 80016aa:	460b      	mov	r3, r1
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	440b      	add	r3, r1
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	2164      	movs	r1, #100	; 0x64
 80016b4:	fb04 f101 	mul.w	r1, r4, r1
 80016b8:	4419      	add	r1, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	440b      	add	r3, r1
 80016be:	011b      	lsls	r3, r3, #4
 80016c0:	4403      	add	r3, r0
 80016c2:	3304      	adds	r3, #4
 80016c4:	881b      	ldrh	r3, [r3, #0]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d849      	bhi.n	800175e <touch_get_pressed_element+0x102>
		&&(touch.y1 >= touch_elements_register[active_page][active_layer][i].y)
 80016ca:	4b2a      	ldr	r3, [pc, #168]	; (8001774 <touch_get_pressed_element+0x118>)
 80016cc:	88da      	ldrh	r2, [r3, #6]
 80016ce:	4b2a      	ldr	r3, [pc, #168]	; (8001778 <touch_get_pressed_element+0x11c>)
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	461c      	mov	r4, r3
 80016d4:	4b29      	ldr	r3, [pc, #164]	; (800177c <touch_get_pressed_element+0x120>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	4619      	mov	r1, r3
 80016da:	4829      	ldr	r0, [pc, #164]	; (8001780 <touch_get_pressed_element+0x124>)
 80016dc:	460b      	mov	r3, r1
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	440b      	add	r3, r1
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	2164      	movs	r1, #100	; 0x64
 80016e6:	fb04 f101 	mul.w	r1, r4, r1
 80016ea:	4419      	add	r1, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	440b      	add	r3, r1
 80016f0:	011b      	lsls	r3, r3, #4
 80016f2:	4403      	add	r3, r0
 80016f4:	3302      	adds	r3, #2
 80016f6:	881b      	ldrh	r3, [r3, #0]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d330      	bcc.n	800175e <touch_get_pressed_element+0x102>
		&&(touch.y <= touch_elements_register[active_page][active_layer][i].y1))
 80016fc:	4b1d      	ldr	r3, [pc, #116]	; (8001774 <touch_get_pressed_element+0x118>)
 80016fe:	885a      	ldrh	r2, [r3, #2]
 8001700:	4b1d      	ldr	r3, [pc, #116]	; (8001778 <touch_get_pressed_element+0x11c>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	461c      	mov	r4, r3
 8001706:	4b1d      	ldr	r3, [pc, #116]	; (800177c <touch_get_pressed_element+0x120>)
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	4619      	mov	r1, r3
 800170c:	481c      	ldr	r0, [pc, #112]	; (8001780 <touch_get_pressed_element+0x124>)
 800170e:	460b      	mov	r3, r1
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	440b      	add	r3, r1
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	2164      	movs	r1, #100	; 0x64
 8001718:	fb04 f101 	mul.w	r1, r4, r1
 800171c:	4419      	add	r1, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	440b      	add	r3, r1
 8001722:	011b      	lsls	r3, r3, #4
 8001724:	4403      	add	r3, r0
 8001726:	3306      	adds	r3, #6
 8001728:	881b      	ldrh	r3, [r3, #0]
 800172a:	429a      	cmp	r2, r3
 800172c:	d817      	bhi.n	800175e <touch_get_pressed_element+0x102>
			x1 = touch_elements_register[active_page][active_layer][i].x1;
			y0 = touch_elements_register[active_page][active_layer][i].y;
			y1 = touch_elements_register[active_page][active_layer][i].y1;
			printf(" GETTING PRESSED ELEMENT \n\r X: %d\n\r X1: %d\n\r Y: %d\n\r Y1: %d\n\r",x0,x1,y0,y1);
#endif
			memcpy(&pressed_element,&touch_elements_register[active_page][active_layer][i],sizeof(struct element_t));
 800172e:	4b12      	ldr	r3, [pc, #72]	; (8001778 <touch_get_pressed_element+0x11c>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	4619      	mov	r1, r3
 8001734:	4b11      	ldr	r3, [pc, #68]	; (800177c <touch_get_pressed_element+0x120>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	461a      	mov	r2, r3
 800173a:	4613      	mov	r3, r2
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	4413      	add	r3, r2
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	2264      	movs	r2, #100	; 0x64
 8001744:	fb01 f202 	mul.w	r2, r1, r2
 8001748:	441a      	add	r2, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4413      	add	r3, r2
 800174e:	011b      	lsls	r3, r3, #4
 8001750:	4a0b      	ldr	r2, [pc, #44]	; (8001780 <touch_get_pressed_element+0x124>)
 8001752:	4413      	add	r3, r2
 8001754:	2210      	movs	r2, #16
 8001756:	4619      	mov	r1, r3
 8001758:	480a      	ldr	r0, [pc, #40]	; (8001784 <touch_get_pressed_element+0x128>)
 800175a:	f008 fbf7 	bl	8009f4c <memcpy>
	for(int i = 0; i<MAX_NUM_ELEMENTS;i++)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	3301      	adds	r3, #1
 8001762:	607b      	str	r3, [r7, #4]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2b13      	cmp	r3, #19
 8001768:	f77f af7e 	ble.w	8001668 <touch_get_pressed_element+0xc>

#endif
		}
	}

	return touch_elements_register[-1];
 800176c:	bf00      	nop
}
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	bd90      	pop	{r4, r7, pc}
 8001774:	200000fc 	.word	0x200000fc
 8001778:	2000011c 	.word	0x2000011c
 800177c:	2000011d 	.word	0x2000011d
 8001780:	20000120 	.word	0x20000120
 8001784:	2000010c 	.word	0x2000010c

08001788 <touch_register_element>:
// Register element to the touch elements array.
uint8_t touch_register_element(uint8_t page,uint8_t layer,uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1,uint16_t element_type, uint32_t element_pointer)
{
 8001788:	b490      	push	{r4, r7}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	4604      	mov	r4, r0
 8001790:	4608      	mov	r0, r1
 8001792:	4611      	mov	r1, r2
 8001794:	461a      	mov	r2, r3
 8001796:	4623      	mov	r3, r4
 8001798:	71fb      	strb	r3, [r7, #7]
 800179a:	4603      	mov	r3, r0
 800179c:	71bb      	strb	r3, [r7, #6]
 800179e:	460b      	mov	r3, r1
 80017a0:	80bb      	strh	r3, [r7, #4]
 80017a2:	4613      	mov	r3, r2
 80017a4:	807b      	strh	r3, [r7, #2]
	for(int i = 0;i<MAX_NUM_ELEMENTS;i++)
 80017a6:	2300      	movs	r3, #0
 80017a8:	60fb      	str	r3, [r7, #12]
 80017aa:	e097      	b.n	80018dc <touch_register_element+0x154>
	{
		if(touch_elements_register[page][layer][i].isAlive == 0)
 80017ac:	79f9      	ldrb	r1, [r7, #7]
 80017ae:	79ba      	ldrb	r2, [r7, #6]
 80017b0:	484f      	ldr	r0, [pc, #316]	; (80018f0 <touch_register_element+0x168>)
 80017b2:	4613      	mov	r3, r2
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	4413      	add	r3, r2
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	2264      	movs	r2, #100	; 0x64
 80017bc:	fb01 f202 	mul.w	r2, r1, r2
 80017c0:	441a      	add	r2, r3
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	4413      	add	r3, r2
 80017c6:	011b      	lsls	r3, r3, #4
 80017c8:	4403      	add	r3, r0
 80017ca:	3309      	adds	r3, #9
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	f040 8081 	bne.w	80018d6 <touch_register_element+0x14e>
		{
			touch_elements_register[page][layer][i].x = x0;
 80017d4:	79f9      	ldrb	r1, [r7, #7]
 80017d6:	79ba      	ldrb	r2, [r7, #6]
 80017d8:	4845      	ldr	r0, [pc, #276]	; (80018f0 <touch_register_element+0x168>)
 80017da:	4613      	mov	r3, r2
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	4413      	add	r3, r2
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	2264      	movs	r2, #100	; 0x64
 80017e4:	fb01 f202 	mul.w	r2, r1, r2
 80017e8:	441a      	add	r2, r3
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	4413      	add	r3, r2
 80017ee:	011b      	lsls	r3, r3, #4
 80017f0:	4403      	add	r3, r0
 80017f2:	88ba      	ldrh	r2, [r7, #4]
 80017f4:	801a      	strh	r2, [r3, #0]
			touch_elements_register[page][layer][i].x1 =x1;
 80017f6:	79f9      	ldrb	r1, [r7, #7]
 80017f8:	79ba      	ldrb	r2, [r7, #6]
 80017fa:	483d      	ldr	r0, [pc, #244]	; (80018f0 <touch_register_element+0x168>)
 80017fc:	4613      	mov	r3, r2
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	4413      	add	r3, r2
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	2264      	movs	r2, #100	; 0x64
 8001806:	fb01 f202 	mul.w	r2, r1, r2
 800180a:	441a      	add	r2, r3
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	4413      	add	r3, r2
 8001810:	011b      	lsls	r3, r3, #4
 8001812:	4403      	add	r3, r0
 8001814:	3304      	adds	r3, #4
 8001816:	8b3a      	ldrh	r2, [r7, #24]
 8001818:	801a      	strh	r2, [r3, #0]
			touch_elements_register[page][layer][i].y =y0;
 800181a:	79f9      	ldrb	r1, [r7, #7]
 800181c:	79ba      	ldrb	r2, [r7, #6]
 800181e:	4834      	ldr	r0, [pc, #208]	; (80018f0 <touch_register_element+0x168>)
 8001820:	4613      	mov	r3, r2
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	4413      	add	r3, r2
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	2264      	movs	r2, #100	; 0x64
 800182a:	fb01 f202 	mul.w	r2, r1, r2
 800182e:	441a      	add	r2, r3
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	4413      	add	r3, r2
 8001834:	011b      	lsls	r3, r3, #4
 8001836:	4403      	add	r3, r0
 8001838:	3302      	adds	r3, #2
 800183a:	887a      	ldrh	r2, [r7, #2]
 800183c:	801a      	strh	r2, [r3, #0]
			touch_elements_register[page][layer][i].y1 =y1;
 800183e:	79f9      	ldrb	r1, [r7, #7]
 8001840:	79ba      	ldrb	r2, [r7, #6]
 8001842:	482b      	ldr	r0, [pc, #172]	; (80018f0 <touch_register_element+0x168>)
 8001844:	4613      	mov	r3, r2
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	4413      	add	r3, r2
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	2264      	movs	r2, #100	; 0x64
 800184e:	fb01 f202 	mul.w	r2, r1, r2
 8001852:	441a      	add	r2, r3
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	4413      	add	r3, r2
 8001858:	011b      	lsls	r3, r3, #4
 800185a:	4403      	add	r3, r0
 800185c:	3306      	adds	r3, #6
 800185e:	8bba      	ldrh	r2, [r7, #28]
 8001860:	801a      	strh	r2, [r3, #0]
			touch_elements_register[page][layer][i].element_type = element_type;
 8001862:	79f9      	ldrb	r1, [r7, #7]
 8001864:	79ba      	ldrb	r2, [r7, #6]
 8001866:	8c3b      	ldrh	r3, [r7, #32]
 8001868:	b2dc      	uxtb	r4, r3
 800186a:	4821      	ldr	r0, [pc, #132]	; (80018f0 <touch_register_element+0x168>)
 800186c:	4613      	mov	r3, r2
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	4413      	add	r3, r2
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	2264      	movs	r2, #100	; 0x64
 8001876:	fb01 f202 	mul.w	r2, r1, r2
 800187a:	441a      	add	r2, r3
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	4413      	add	r3, r2
 8001880:	011b      	lsls	r3, r3, #4
 8001882:	4403      	add	r3, r0
 8001884:	3308      	adds	r3, #8
 8001886:	4622      	mov	r2, r4
 8001888:	701a      	strb	r2, [r3, #0]
			touch_elements_register[page][layer][i].element_pointer = element_pointer;
 800188a:	79f8      	ldrb	r0, [r7, #7]
 800188c:	79ba      	ldrb	r2, [r7, #6]
 800188e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001890:	4c17      	ldr	r4, [pc, #92]	; (80018f0 <touch_register_element+0x168>)
 8001892:	4613      	mov	r3, r2
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	4413      	add	r3, r2
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	2264      	movs	r2, #100	; 0x64
 800189c:	fb00 f202 	mul.w	r2, r0, r2
 80018a0:	441a      	add	r2, r3
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	4413      	add	r3, r2
 80018a6:	011b      	lsls	r3, r3, #4
 80018a8:	4423      	add	r3, r4
 80018aa:	330c      	adds	r3, #12
 80018ac:	6019      	str	r1, [r3, #0]
			touch_elements_register[page][layer][i].isAlive = 1;
 80018ae:	79f9      	ldrb	r1, [r7, #7]
 80018b0:	79ba      	ldrb	r2, [r7, #6]
 80018b2:	480f      	ldr	r0, [pc, #60]	; (80018f0 <touch_register_element+0x168>)
 80018b4:	4613      	mov	r3, r2
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	4413      	add	r3, r2
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	2264      	movs	r2, #100	; 0x64
 80018be:	fb01 f202 	mul.w	r2, r1, r2
 80018c2:	441a      	add	r2, r3
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	4413      	add	r3, r2
 80018c8:	011b      	lsls	r3, r3, #4
 80018ca:	4403      	add	r3, r0
 80018cc:	3309      	adds	r3, #9
 80018ce:	2201      	movs	r2, #1
 80018d0:	701a      	strb	r2, [r3, #0]
#if DEBUG_TOUCH == 1
			printf("\n\rElement registered with index: %d\n\r",i);
			printf("\n\rElement values: %d %d %d %d %d %d %d\n\r",x0,x1,y0,y1,element_pointer,element_type);
#endif
			return 0;
 80018d2:	2300      	movs	r3, #0
 80018d4:	e007      	b.n	80018e6 <touch_register_element+0x15e>
	for(int i = 0;i<MAX_NUM_ELEMENTS;i++)
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	3301      	adds	r3, #1
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2b13      	cmp	r3, #19
 80018e0:	f77f af64 	ble.w	80017ac <touch_register_element+0x24>
		}
	}

	return -1;
 80018e4:	23ff      	movs	r3, #255	; 0xff
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3710      	adds	r7, #16
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bc90      	pop	{r4, r7}
 80018ee:	4770      	bx	lr
 80018f0:	20000120 	.word	0x20000120

080018f4 <HAL_GPIO_EXTI_Callback>:
//External interrupt from touc IC
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	80fb      	strh	r3, [r7, #6]
	touch.pressed=1;
 80018fe:	4b04      	ldr	r3, [pc, #16]	; (8001910 <HAL_GPIO_EXTI_Callback+0x1c>)
 8001900:	2201      	movs	r2, #1
 8001902:	811a      	strh	r2, [r3, #8]
#if DEBUG_TOUCH == 1
	printf("Interrupt touch");
#endif
}
 8001904:	bf00      	nop
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	200000fc 	.word	0x200000fc

08001914 <touch_write_control>:
	touch_elements_register[page][layer][idx].element_pointer = 0;
}
/*----------------------------------------------Private function---------------------------------------------------*/
//Write to touch IC control command via I2C
static void touch_write_control(unsigned char ctrl)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b086      	sub	sp, #24
 8001918:	af02      	add	r7, sp, #8
 800191a:	4603      	mov	r3, r0
 800191c:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status =0;
 800191e:	2300      	movs	r3, #0
 8001920:	73fb      	strb	r3, [r7, #15]
	status = HAL_I2C_Master_Transmit(&hi2c1_touch, (uint16_t)SLAVE_ADDRESS_TOUCH, &ctrl, 1 ,I2C_DELAY);
 8001922:	1dfa      	adds	r2, r7, #7
 8001924:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001928:	9300      	str	r3, [sp, #0]
 800192a:	2301      	movs	r3, #1
 800192c:	2190      	movs	r1, #144	; 0x90
 800192e:	4804      	ldr	r0, [pc, #16]	; (8001940 <touch_write_control+0x2c>)
 8001930:	f004 ff02 	bl	8006738 <HAL_I2C_Master_Transmit>
 8001934:	4603      	mov	r3, r0
 8001936:	73fb      	strb	r3, [r7, #15]
#if DEBUG_TOUCH == 1
	printf("Write control I2C\n\r");
	printf ("%d",status);
#endif
}
 8001938:	bf00      	nop
 800193a:	3710      	adds	r7, #16
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	200000a8 	.word	0x200000a8

08001944 <touch_write_register>:
//Write to touch IC data via I2C
static void touch_write_register(uint8_t adr, uint16_t val)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b088      	sub	sp, #32
 8001948:	af04      	add	r7, sp, #16
 800194a:	4603      	mov	r3, r0
 800194c:	460a      	mov	r2, r1
 800194e:	71fb      	strb	r3, [r7, #7]
 8001950:	4613      	mov	r3, r2
 8001952:	80bb      	strh	r3, [r7, #4]

	HAL_StatusTypeDef status =0;
 8001954:	2300      	movs	r3, #0
 8001956:	73fb      	strb	r3, [r7, #15]
	uint8_t data[2];
	data[0] = val>>8;
 8001958:	88bb      	ldrh	r3, [r7, #4]
 800195a:	0a1b      	lsrs	r3, r3, #8
 800195c:	b29b      	uxth	r3, r3
 800195e:	b2db      	uxtb	r3, r3
 8001960:	733b      	strb	r3, [r7, #12]
	data[1] = (uint8_t)val;
 8001962:	88bb      	ldrh	r3, [r7, #4]
 8001964:	b2db      	uxtb	r3, r3
 8001966:	737b      	strb	r3, [r7, #13]
	status = HAL_I2C_Mem_Write(&hi2c1_touch, (uint16_t)SLAVE_ADDRESS_TOUCH,(adr<<3),I2C_MEMADD_SIZE_8BIT,data,2,I2C_DELAY);
 8001968:	79fb      	ldrb	r3, [r7, #7]
 800196a:	b29b      	uxth	r3, r3
 800196c:	00db      	lsls	r3, r3, #3
 800196e:	b29a      	uxth	r2, r3
 8001970:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001974:	9302      	str	r3, [sp, #8]
 8001976:	2302      	movs	r3, #2
 8001978:	9301      	str	r3, [sp, #4]
 800197a:	f107 030c 	add.w	r3, r7, #12
 800197e:	9300      	str	r3, [sp, #0]
 8001980:	2301      	movs	r3, #1
 8001982:	2190      	movs	r1, #144	; 0x90
 8001984:	4804      	ldr	r0, [pc, #16]	; (8001998 <touch_write_register+0x54>)
 8001986:	f004 ffd5 	bl	8006934 <HAL_I2C_Mem_Write>
 800198a:	4603      	mov	r3, r0
 800198c:	73fb      	strb	r3, [r7, #15]
#if DEBUG_TOUCH == 1
	printf ("I2C write register\n\r");
	printf ("status %d \n\r",status);
#endif
}
 800198e:	bf00      	nop
 8001990:	3710      	adds	r7, #16
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	200000a8 	.word	0x200000a8

0800199c <touch_read>:
//Read data via I2C from touch IC
static unsigned short touch_read(unsigned char adr)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b088      	sub	sp, #32
 80019a0:	af04      	add	r7, sp, #16
 80019a2:	4603      	mov	r3, r0
 80019a4:	71fb      	strb	r3, [r7, #7]
	unsigned char adr_i2c= 0x01;
 80019a6:	2301      	movs	r3, #1
 80019a8:	73fb      	strb	r3, [r7, #15]
	adr_i2c+=adr<<3;
 80019aa:	79fb      	ldrb	r3, [r7, #7]
 80019ac:	00db      	lsls	r3, r3, #3
 80019ae:	b2da      	uxtb	r2, r3
 80019b0:	7bfb      	ldrb	r3, [r7, #15]
 80019b2:	4413      	add	r3, r2
 80019b4:	73fb      	strb	r3, [r7, #15]
	uint8_t data[2];
	HAL_StatusTypeDef status =0;
 80019b6:	2300      	movs	r3, #0
 80019b8:	73bb      	strb	r3, [r7, #14]
	status = HAL_I2C_Mem_Read(&hi2c1_touch, (uint16_t)SLAVE_ADDRESS_TOUCH ,adr_i2c,I2C_MEMADD_SIZE_8BIT,data, 2, I2C_DELAY);
 80019ba:	7bfb      	ldrb	r3, [r7, #15]
 80019bc:	b29a      	uxth	r2, r3
 80019be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019c2:	9302      	str	r3, [sp, #8]
 80019c4:	2302      	movs	r3, #2
 80019c6:	9301      	str	r3, [sp, #4]
 80019c8:	f107 0308 	add.w	r3, r7, #8
 80019cc:	9300      	str	r3, [sp, #0]
 80019ce:	2301      	movs	r3, #1
 80019d0:	2190      	movs	r1, #144	; 0x90
 80019d2:	4809      	ldr	r0, [pc, #36]	; (80019f8 <touch_read+0x5c>)
 80019d4:	f005 f8a8 	bl	8006b28 <HAL_I2C_Mem_Read>
 80019d8:	4603      	mov	r3, r0
 80019da:	73bb      	strb	r3, [r7, #14]
	uint16_t result = (data[0] << 8) | (data[1] & 0xFF);
 80019dc:	7a3b      	ldrb	r3, [r7, #8]
 80019de:	021b      	lsls	r3, r3, #8
 80019e0:	b21a      	sxth	r2, r3
 80019e2:	7a7b      	ldrb	r3, [r7, #9]
 80019e4:	b21b      	sxth	r3, r3
 80019e6:	4313      	orrs	r3, r2
 80019e8:	b21b      	sxth	r3, r3
 80019ea:	81bb      	strh	r3, [r7, #12]
	return result;
 80019ec:	89bb      	ldrh	r3, [r7, #12]
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3710      	adds	r7, #16
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	200000a8 	.word	0x200000a8
 80019fc:	00000000 	.word	0x00000000

08001a00 <validate_touch_coordinates>:
//Transform and validate touch coordinates
static uint8_t validate_touch_coordinates(void)
{
 8001a00:	b5b0      	push	{r4, r5, r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
	if(touch.x<MIN_X) return 0;
	if(touch.x>MAX_X) return 0;
 8001a06:	4b56      	ldr	r3, [pc, #344]	; (8001b60 <validate_touch_coordinates+0x160>)
 8001a08:	881b      	ldrh	r3, [r3, #0]
 8001a0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a0e:	d901      	bls.n	8001a14 <validate_touch_coordinates+0x14>
 8001a10:	2300      	movs	r3, #0
 8001a12:	e087      	b.n	8001b24 <validate_touch_coordinates+0x124>
	if(touch.y<MIN_Y) return 0;
	if(touch.y>MAX_Y) return 0;
 8001a14:	4b52      	ldr	r3, [pc, #328]	; (8001b60 <validate_touch_coordinates+0x160>)
 8001a16:	885b      	ldrh	r3, [r3, #2]
 8001a18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a1c:	d901      	bls.n	8001a22 <validate_touch_coordinates+0x22>
 8001a1e:	2300      	movs	r3, #0
 8001a20:	e080      	b.n	8001b24 <validate_touch_coordinates+0x124>

	touch.x=touch.x - MIN_X;
 8001a22:	4b4f      	ldr	r3, [pc, #316]	; (8001b60 <validate_touch_coordinates+0x160>)
 8001a24:	881a      	ldrh	r2, [r3, #0]
 8001a26:	4b4e      	ldr	r3, [pc, #312]	; (8001b60 <validate_touch_coordinates+0x160>)
 8001a28:	801a      	strh	r2, [r3, #0]
	touch.y=touch.y - MIN_Y;
 8001a2a:	4b4d      	ldr	r3, [pc, #308]	; (8001b60 <validate_touch_coordinates+0x160>)
 8001a2c:	885a      	ldrh	r2, [r3, #2]
 8001a2e:	4b4c      	ldr	r3, [pc, #304]	; (8001b60 <validate_touch_coordinates+0x160>)
 8001a30:	805a      	strh	r2, [r3, #2]
#if LINEAR_INTERPOLATION == 1
	touch.x = linear_interpolation((long)touch.x,40,970,0,480);
	touch.y = linear_interpolation((long)touch.y,40,970,0,340);
#else
	double x,y;
	x = X_A* (int16_t)touch.x + X_B *(int16_t)touch.y +X_L;
 8001a32:	4b4b      	ldr	r3, [pc, #300]	; (8001b60 <validate_touch_coordinates+0x160>)
 8001a34:	881b      	ldrh	r3, [r3, #0]
 8001a36:	b21b      	sxth	r3, r3
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7fe fea5 	bl	8000788 <__aeabi_i2d>
 8001a3e:	a33c      	add	r3, pc, #240	; (adr r3, 8001b30 <validate_touch_coordinates+0x130>)
 8001a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a44:	f7fe fc24 	bl	8000290 <__aeabi_dmul>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	4614      	mov	r4, r2
 8001a4e:	461d      	mov	r5, r3
 8001a50:	4b43      	ldr	r3, [pc, #268]	; (8001b60 <validate_touch_coordinates+0x160>)
 8001a52:	885b      	ldrh	r3, [r3, #2]
 8001a54:	b21b      	sxth	r3, r3
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7fe fe96 	bl	8000788 <__aeabi_i2d>
 8001a5c:	a336      	add	r3, pc, #216	; (adr r3, 8001b38 <validate_touch_coordinates+0x138>)
 8001a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a62:	f7fe fc15 	bl	8000290 <__aeabi_dmul>
 8001a66:	4602      	mov	r2, r0
 8001a68:	460b      	mov	r3, r1
 8001a6a:	4620      	mov	r0, r4
 8001a6c:	4629      	mov	r1, r5
 8001a6e:	f7fe fd3f 	bl	80004f0 <__adddf3>
 8001a72:	4602      	mov	r2, r0
 8001a74:	460b      	mov	r3, r1
 8001a76:	4610      	mov	r0, r2
 8001a78:	4619      	mov	r1, r3
 8001a7a:	a331      	add	r3, pc, #196	; (adr r3, 8001b40 <validate_touch_coordinates+0x140>)
 8001a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a80:	f7fe fd34 	bl	80004ec <__aeabi_dsub>
 8001a84:	4602      	mov	r2, r0
 8001a86:	460b      	mov	r3, r1
 8001a88:	e9c7 2302 	strd	r2, r3, [r7, #8]
	y = Y_A* (int16_t)touch.x + Y_B *(int16_t)touch.y +Y_L;
 8001a8c:	4b34      	ldr	r3, [pc, #208]	; (8001b60 <validate_touch_coordinates+0x160>)
 8001a8e:	881b      	ldrh	r3, [r3, #0]
 8001a90:	b21b      	sxth	r3, r3
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7fe fe78 	bl	8000788 <__aeabi_i2d>
 8001a98:	a32b      	add	r3, pc, #172	; (adr r3, 8001b48 <validate_touch_coordinates+0x148>)
 8001a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a9e:	f7fe fbf7 	bl	8000290 <__aeabi_dmul>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	4614      	mov	r4, r2
 8001aa8:	461d      	mov	r5, r3
 8001aaa:	4b2d      	ldr	r3, [pc, #180]	; (8001b60 <validate_touch_coordinates+0x160>)
 8001aac:	885b      	ldrh	r3, [r3, #2]
 8001aae:	b21b      	sxth	r3, r3
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7fe fe69 	bl	8000788 <__aeabi_i2d>
 8001ab6:	a326      	add	r3, pc, #152	; (adr r3, 8001b50 <validate_touch_coordinates+0x150>)
 8001ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001abc:	f7fe fbe8 	bl	8000290 <__aeabi_dmul>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	4620      	mov	r0, r4
 8001ac6:	4629      	mov	r1, r5
 8001ac8:	f7fe fd12 	bl	80004f0 <__adddf3>
 8001acc:	4602      	mov	r2, r0
 8001ace:	460b      	mov	r3, r1
 8001ad0:	4610      	mov	r0, r2
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	a320      	add	r3, pc, #128	; (adr r3, 8001b58 <validate_touch_coordinates+0x158>)
 8001ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ada:	f7fe fd07 	bl	80004ec <__aeabi_dsub>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	e9c7 2300 	strd	r2, r3, [r7]
	touch.x = (uint16_t)x;
 8001ae6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001aea:	f7fe feb7 	bl	800085c <__aeabi_d2uiz>
 8001aee:	4603      	mov	r3, r0
 8001af0:	b29a      	uxth	r2, r3
 8001af2:	4b1b      	ldr	r3, [pc, #108]	; (8001b60 <validate_touch_coordinates+0x160>)
 8001af4:	801a      	strh	r2, [r3, #0]
	touch.y = (uint16_t)y;
 8001af6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001afa:	f7fe feaf 	bl	800085c <__aeabi_d2uiz>
 8001afe:	4603      	mov	r3, r0
 8001b00:	b29a      	uxth	r2, r3
 8001b02:	4b17      	ldr	r3, [pc, #92]	; (8001b60 <validate_touch_coordinates+0x160>)
 8001b04:	805a      	strh	r2, [r3, #2]
#endif
#if DEBUG_TOUCH == 1
	printf("TOUCH y %d\n\r", touch.y);
	printf("TOUCH X %d\n\r", touch.x);
#endif
	if (touch.x >= 0 && touch.x <= LCD_PIXEL_WIDTH)
 8001b06:	4b16      	ldr	r3, [pc, #88]	; (8001b60 <validate_touch_coordinates+0x160>)
 8001b08:	881b      	ldrh	r3, [r3, #0]
 8001b0a:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001b0e:	d801      	bhi.n	8001b14 <validate_touch_coordinates+0x114>
	{
		return 1;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e007      	b.n	8001b24 <validate_touch_coordinates+0x124>
	}
	if (touch.y >= 0 && touch.y <= LCD_PIXEL_HEIGHT)
 8001b14:	4b12      	ldr	r3, [pc, #72]	; (8001b60 <validate_touch_coordinates+0x160>)
 8001b16:	885b      	ldrh	r3, [r3, #2]
 8001b18:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001b1c:	d801      	bhi.n	8001b22 <validate_touch_coordinates+0x122>
	{
		return 1;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e000      	b.n	8001b24 <validate_touch_coordinates+0x124>
	}


	return 0;
 8001b22:	2300      	movs	r3, #0
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3710      	adds	r7, #16
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bdb0      	pop	{r4, r5, r7, pc}
 8001b2c:	f3af 8000 	nop.w
 8001b30:	c7e28241 	.word	0xc7e28241
 8001b34:	3fe0bb98 	.word	0x3fe0bb98
 8001b38:	8db8bac7 	.word	0x8db8bac7
 8001b3c:	3f66f006 	.word	0x3f66f006
 8001b40:	b71758e2 	.word	0xb71758e2
 8001b44:	403fc0d1 	.word	0x403fc0d1
 8001b48:	d2f1a9fc 	.word	0xd2f1a9fc
 8001b4c:	bf70624d 	.word	0xbf70624d
 8001b50:	ab367a10 	.word	0xab367a10
 8001b54:	3fd7573e 	.word	0x3fd7573e
 8001b58:	e219652c 	.word	0xe219652c
 8001b5c:	4036d758 	.word	0x4036d758
 8001b60:	200000fc 	.word	0x200000fc

08001b64 <delay_ms>:
	{
		  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	}
#endif
//Delay in ms
static void delay_ms(__IO uint32_t nCount1) {
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
	__IO uint32_t nCount=nCount1*23666;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f645 4272 	movw	r2, #23666	; 0x5c72
 8001b72:	fb02 f303 	mul.w	r3, r2, r3
 8001b76:	60fb      	str	r3, [r7, #12]
	while(nCount--) {
 8001b78:	bf00      	nop
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	1e5a      	subs	r2, r3, #1
 8001b7e:	60fa      	str	r2, [r7, #12]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d1fa      	bne.n	8001b7a <delay_ms+0x16>
  }
}
 8001b84:	bf00      	nop
 8001b86:	bf00      	nop
 8001b88:	3714      	adds	r7, #20
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
	...

08001b94 <fetchBitmap>:
 * TODO, if needed / time allows: This function first attempts to fetch the bitmap from local cache, and failing that, loads it from external memory.
 *
 * @returns number of pixels read. When requested bitmap does not exist, zero is returned.
 *
 */
int fetchBitmap(uint16_t bitmapNumber, struct bitmap *bitmapHeader, uint16_t *pixelArray, uint16_t maxPixels){
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b086      	sub	sp, #24
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	60b9      	str	r1, [r7, #8]
 8001b9c:	607a      	str	r2, [r7, #4]
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	81fb      	strh	r3, [r7, #14]
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	81bb      	strh	r3, [r7, #12]

	//TODO (?): bitmap caching

	if(bitmapNumber >= globalBitmapList.totalBitmaps){
 8001ba8:	4b0f      	ldr	r3, [pc, #60]	; (8001be8 <fetchBitmap+0x54>)
 8001baa:	881b      	ldrh	r3, [r3, #0]
 8001bac:	89fa      	ldrh	r2, [r7, #14]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d308      	bcc.n	8001bc4 <fetchBitmap+0x30>
		printf("[BCL] Can't fetch bitmap #%d, since total bitmaps = %d. \n\r", bitmapNumber, globalBitmapList.totalBitmaps);
 8001bb2:	89fb      	ldrh	r3, [r7, #14]
 8001bb4:	4a0c      	ldr	r2, [pc, #48]	; (8001be8 <fetchBitmap+0x54>)
 8001bb6:	8812      	ldrh	r2, [r2, #0]
 8001bb8:	4619      	mov	r1, r3
 8001bba:	480c      	ldr	r0, [pc, #48]	; (8001bec <fetchBitmap+0x58>)
 8001bbc:	f008 f9dc 	bl	8009f78 <iprintf>
		return 0;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	e00d      	b.n	8001be0 <fetchBitmap+0x4c>
	}

	uint16_t bitmapSector = globalBitmapList.bitmapSectors[bitmapNumber];
 8001bc4:	89fb      	ldrh	r3, [r7, #14]
 8001bc6:	4a08      	ldr	r2, [pc, #32]	; (8001be8 <fetchBitmap+0x54>)
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	4413      	add	r3, r2
 8001bcc:	889b      	ldrh	r3, [r3, #4]
 8001bce:	82fb      	strh	r3, [r7, #22]
	int count = readBitmap(bitmapSector, bitmapHeader, pixelArray, maxPixels);
 8001bd0:	8af8      	ldrh	r0, [r7, #22]
 8001bd2:	89bb      	ldrh	r3, [r7, #12]
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	68b9      	ldr	r1, [r7, #8]
 8001bd8:	f001 fb76 	bl	80032c8 <readBitmap>
 8001bdc:	6138      	str	r0, [r7, #16]
	return count;
 8001bde:	693b      	ldr	r3, [r7, #16]

}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3718      	adds	r7, #24
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	2000222c 	.word	0x2000222c
 8001bec:	0800afd4 	.word	0x0800afd4

08001bf0 <configFromUart>:

/*
 * Attempts to read configuration / debug data from UART and save them to external flash.
 * Returns: 0 when successful, 1 when no configuration data detected on uart, 2 or greater when configuration failed
 */
int configFromUart(){
 8001bf0:	b5b0      	push	{r4, r5, r7, lr}
 8001bf2:	f5ad 6d9b 	sub.w	sp, sp, #1240	; 0x4d8
 8001bf6:	af7e      	add	r7, sp, #504	; 0x1f8

	char msg[128];

	int count = read_usart_message(msg, &huart1, sizeof(msg), NEWLINE);
 8001bf8:	f507 7017 	add.w	r0, r7, #604	; 0x25c
 8001bfc:	230d      	movs	r3, #13
 8001bfe:	2280      	movs	r2, #128	; 0x80
 8001c00:	4983      	ldr	r1, [pc, #524]	; (8001e10 <configFromUart+0x220>)
 8001c02:	f003 fff1 	bl	8005be8 <read_usart_message>
 8001c06:	4603      	mov	r3, r0
 8001c08:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc

	if(count == 0){
 8001c0c:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d104      	bne.n	8001c1e <configFromUart+0x2e>
		printf("[cl] No data on uart.\n\r");
 8001c14:	487f      	ldr	r0, [pc, #508]	; (8001e14 <configFromUart+0x224>)
 8001c16:	f008 f9af 	bl	8009f78 <iprintf>
		return 1;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e0f3      	b.n	8001e06 <configFromUart+0x216>
	}

	msg[count-1] = 0; //replace newline delimiter with null-termination
 8001c1e:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 8001c22:	3b01      	subs	r3, #1
 8001c24:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
 8001c28:	443b      	add	r3, r7
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f803 2c84 	strb.w	r2, [r3, #-132]

	char configMsg[] = "config";
 8001c30:	4a79      	ldr	r2, [pc, #484]	; (8001e18 <configFromUart+0x228>)
 8001c32:	f507 7315 	add.w	r3, r7, #596	; 0x254
 8001c36:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c3a:	6018      	str	r0, [r3, #0]
 8001c3c:	3304      	adds	r3, #4
 8001c3e:	8019      	strh	r1, [r3, #0]
 8001c40:	3302      	adds	r3, #2
 8001c42:	0c0a      	lsrs	r2, r1, #16
 8001c44:	701a      	strb	r2, [r3, #0]
	char bitmapMsg[] = "bitmap";
 8001c46:	4a75      	ldr	r2, [pc, #468]	; (8001e1c <configFromUart+0x22c>)
 8001c48:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 8001c4c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c50:	6018      	str	r0, [r3, #0]
 8001c52:	3304      	adds	r3, #4
 8001c54:	8019      	strh	r1, [r3, #0]
 8001c56:	3302      	adds	r3, #2
 8001c58:	0c0a      	lsrs	r2, r1, #16
 8001c5a:	701a      	strb	r2, [r3, #0]
	char deleteMsg[] = "delete bitmaps";
 8001c5c:	4b70      	ldr	r3, [pc, #448]	; (8001e20 <configFromUart+0x230>)
 8001c5e:	f507 740f 	add.w	r4, r7, #572	; 0x23c
 8001c62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c64:	c407      	stmia	r4!, {r0, r1, r2}
 8001c66:	8023      	strh	r3, [r4, #0]
 8001c68:	3402      	adds	r4, #2
 8001c6a:	0c1b      	lsrs	r3, r3, #16
 8001c6c:	7023      	strb	r3, [r4, #0]
	char sreportMsg[] = "report screens";
 8001c6e:	4b6d      	ldr	r3, [pc, #436]	; (8001e24 <configFromUart+0x234>)
 8001c70:	f507 740b 	add.w	r4, r7, #556	; 0x22c
 8001c74:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c76:	c407      	stmia	r4!, {r0, r1, r2}
 8001c78:	8023      	strh	r3, [r4, #0]
 8001c7a:	3402      	adds	r4, #2
 8001c7c:	0c1b      	lsrs	r3, r3, #16
 8001c7e:	7023      	strb	r3, [r4, #0]
	char breportMsg[] = "report bitmaps";
 8001c80:	4b69      	ldr	r3, [pc, #420]	; (8001e28 <configFromUart+0x238>)
 8001c82:	f507 7407 	add.w	r4, r7, #540	; 0x21c
 8001c86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c88:	c407      	stmia	r4!, {r0, r1, r2}
 8001c8a:	8023      	strh	r3, [r4, #0]
 8001c8c:	3402      	adds	r4, #2
 8001c8e:	0c1b      	lsrs	r3, r3, #16
 8001c90:	7023      	strb	r3, [r4, #0]
	char hreportMsg[] = "hex report bitmaps";
 8001c92:	4b66      	ldr	r3, [pc, #408]	; (8001e2c <configFromUart+0x23c>)
 8001c94:	f507 7402 	add.w	r4, r7, #520	; 0x208
 8001c98:	461d      	mov	r5, r3
 8001c9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c9e:	682b      	ldr	r3, [r5, #0]
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	8022      	strh	r2, [r4, #0]
 8001ca4:	3402      	adds	r4, #2
 8001ca6:	0c1b      	lsrs	r3, r3, #16
 8001ca8:	7023      	strb	r3, [r4, #0]

	if(strcmp(configMsg, msg) == 0){
 8001caa:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 8001cae:	f507 7315 	add.w	r3, r7, #596	; 0x254
 8001cb2:	4611      	mov	r1, r2
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7fe fa8b 	bl	80001d0 <strcmp>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d106      	bne.n	8001cce <configFromUart+0xde>
		printf("[cl] Okay, proceeding to configure screens.\n\r");
 8001cc0:	485b      	ldr	r0, [pc, #364]	; (8001e30 <configFromUart+0x240>)
 8001cc2:	f008 f959 	bl	8009f78 <iprintf>
		return configScreensFromUart();
 8001cc6:	f000 fbd5 	bl	8002474 <configScreensFromUart>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	e09b      	b.n	8001e06 <configFromUart+0x216>
	}
	else if(strcmp(bitmapMsg, msg) == 0){
 8001cce:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 8001cd2:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 8001cd6:	4611      	mov	r1, r2
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7fe fa79 	bl	80001d0 <strcmp>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d106      	bne.n	8001cf2 <configFromUart+0x102>
		printf("[cl] Okay, proceeding to write bitmap.\n\r");
 8001ce4:	4853      	ldr	r0, [pc, #332]	; (8001e34 <configFromUart+0x244>)
 8001ce6:	f008 f947 	bl	8009f78 <iprintf>
		return configBitmapFromUart();
 8001cea:	f000 f8b3 	bl	8001e54 <configBitmapFromUart>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	e089      	b.n	8001e06 <configFromUart+0x216>
	}
	else if(strcmp(deleteMsg, msg) == 0){
 8001cf2:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 8001cf6:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8001cfa:	4611      	mov	r1, r2
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7fe fa67 	bl	80001d0 <strcmp>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d106      	bne.n	8001d16 <configFromUart+0x126>
		printf("[cl] Okay, marking all saved bitmaps for deletion.\n\r");
 8001d08:	484b      	ldr	r0, [pc, #300]	; (8001e38 <configFromUart+0x248>)
 8001d0a:	f008 f935 	bl	8009f78 <iprintf>
		return configMarkBitmapsForDelete();
 8001d0e:	f000 fb71 	bl	80023f4 <configMarkBitmapsForDelete>
 8001d12:	4603      	mov	r3, r0
 8001d14:	e077      	b.n	8001e06 <configFromUart+0x216>
	}
	else if(strcmp(sreportMsg, msg) == 0){
 8001d16:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 8001d1a:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 8001d1e:	4611      	mov	r1, r2
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7fe fa55 	bl	80001d0 <strcmp>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d118      	bne.n	8001d5e <configFromUart+0x16e>
		printf("[cl] Okay, reporting screens.\n\r");
 8001d2c:	4843      	ldr	r0, [pc, #268]	; (8001e3c <configFromUart+0x24c>)
 8001d2e:	f008 f923 	bl	8009f78 <iprintf>
		struct generalConfig gconf;
		readGeneralConfig(&gconf);
 8001d32:	1d3b      	adds	r3, r7, #4
 8001d34:	4618      	mov	r0, r3
 8001d36:	f001 f9e5 	bl	8003104 <readGeneralConfig>
		printAllScreens(gconf);
 8001d3a:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8001d3e:	f5a3 7437 	sub.w	r4, r3, #732	; 0x2dc
 8001d42:	4668      	mov	r0, sp
 8001d44:	f104 0310 	add.w	r3, r4, #16
 8001d48:	f44f 72f9 	mov.w	r2, #498	; 0x1f2
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	f008 f8fd 	bl	8009f4c <memcpy>
 8001d52:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001d56:	f001 fb13 	bl	8003380 <printAllScreens>
		return 0;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	e053      	b.n	8001e06 <configFromUart+0x216>
	}
	else if(strcmp(breportMsg, msg) == 0){
 8001d5e:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 8001d62:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8001d66:	4611      	mov	r1, r2
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7fe fa31 	bl	80001d0 <strcmp>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d107      	bne.n	8001d84 <configFromUart+0x194>
		printf("[cl] Okay, reporting bitmaps.\n\r");
 8001d74:	4832      	ldr	r0, [pc, #200]	; (8001e40 <configFromUart+0x250>)
 8001d76:	f008 f8ff 	bl	8009f78 <iprintf>
		reportBitmaps(0);
 8001d7a:	2000      	movs	r0, #0
 8001d7c:	f001 fc94 	bl	80036a8 <reportBitmaps>
		return 0;
 8001d80:	2300      	movs	r3, #0
 8001d82:	e040      	b.n	8001e06 <configFromUart+0x216>
		}
	else if(strcmp(hreportMsg, msg) == 0){
 8001d84:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 8001d88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d8c:	4611      	mov	r1, r2
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7fe fa1e 	bl	80001d0 <strcmp>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d107      	bne.n	8001daa <configFromUart+0x1ba>
		printf("[cl] Okay, printing bitmaps' hex data...\n\r");
 8001d9a:	482a      	ldr	r0, [pc, #168]	; (8001e44 <configFromUart+0x254>)
 8001d9c:	f008 f8ec 	bl	8009f78 <iprintf>
		reportBitmaps(1);
 8001da0:	2001      	movs	r0, #1
 8001da2:	f001 fc81 	bl	80036a8 <reportBitmaps>
		return 0;
 8001da6:	2300      	movs	r3, #0
 8001da8:	e02d      	b.n	8001e06 <configFromUart+0x216>
		}
	else{
		printf("[cl] Unexpected first msg. Got %s, which is not a recognised command.\n\r", msg);
 8001daa:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8001dae:	4619      	mov	r1, r3
 8001db0:	4825      	ldr	r0, [pc, #148]	; (8001e48 <configFromUart+0x258>)
 8001db2:	f008 f8e1 	bl	8009f78 <iprintf>
		printf("[cl] Known commands: \n\r");
 8001db6:	4825      	ldr	r0, [pc, #148]	; (8001e4c <configFromUart+0x25c>)
 8001db8:	f008 f8de 	bl	8009f78 <iprintf>
		printf("[cl] %s \n\r", configMsg);
 8001dbc:	f507 7315 	add.w	r3, r7, #596	; 0x254
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4823      	ldr	r0, [pc, #140]	; (8001e50 <configFromUart+0x260>)
 8001dc4:	f008 f8d8 	bl	8009f78 <iprintf>
		printf("[cl] %s \n\r", bitmapMsg);
 8001dc8:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4820      	ldr	r0, [pc, #128]	; (8001e50 <configFromUart+0x260>)
 8001dd0:	f008 f8d2 	bl	8009f78 <iprintf>
		printf("[cl] %s \n\r", deleteMsg);
 8001dd4:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8001dd8:	4619      	mov	r1, r3
 8001dda:	481d      	ldr	r0, [pc, #116]	; (8001e50 <configFromUart+0x260>)
 8001ddc:	f008 f8cc 	bl	8009f78 <iprintf>
		printf("[cl] %s \n\r", sreportMsg);
 8001de0:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 8001de4:	4619      	mov	r1, r3
 8001de6:	481a      	ldr	r0, [pc, #104]	; (8001e50 <configFromUart+0x260>)
 8001de8:	f008 f8c6 	bl	8009f78 <iprintf>
		printf("[cl] %s \n\r", breportMsg);
 8001dec:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8001df0:	4619      	mov	r1, r3
 8001df2:	4817      	ldr	r0, [pc, #92]	; (8001e50 <configFromUart+0x260>)
 8001df4:	f008 f8c0 	bl	8009f78 <iprintf>
		printf("[cl] %s \n\r", hreportMsg);
 8001df8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4814      	ldr	r0, [pc, #80]	; (8001e50 <configFromUart+0x260>)
 8001e00:	f008 f8ba 	bl	8009f78 <iprintf>
		return 1;
 8001e04:	2301      	movs	r3, #1
	}
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	f507 7738 	add.w	r7, r7, #736	; 0x2e0
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bdb0      	pop	{r4, r5, r7, pc}
 8001e10:	20002154 	.word	0x20002154
 8001e14:	0800b010 	.word	0x0800b010
 8001e18:	0800b194 	.word	0x0800b194
 8001e1c:	0800b19c 	.word	0x0800b19c
 8001e20:	0800b1a4 	.word	0x0800b1a4
 8001e24:	0800b1b4 	.word	0x0800b1b4
 8001e28:	0800b1c4 	.word	0x0800b1c4
 8001e2c:	0800b1d4 	.word	0x0800b1d4
 8001e30:	0800b028 	.word	0x0800b028
 8001e34:	0800b058 	.word	0x0800b058
 8001e38:	0800b084 	.word	0x0800b084
 8001e3c:	0800b0bc 	.word	0x0800b0bc
 8001e40:	0800b0dc 	.word	0x0800b0dc
 8001e44:	0800b0fc 	.word	0x0800b0fc
 8001e48:	0800b128 	.word	0x0800b128
 8001e4c:	0800b170 	.word	0x0800b170
 8001e50:	0800b188 	.word	0x0800b188

08001e54 <configBitmapFromUart>:

int configBitmapFromUart(){
 8001e54:	b580      	push	{r7, lr}
 8001e56:	f5ad 5dc5 	sub.w	sp, sp, #6304	; 0x18a0
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
	int count;
	char msg[128];
	struct bitmapList blist;
	readBitmapList(&blist);
 8001e5e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001e62:	f103 030c 	add.w	r3, r3, #12
 8001e66:	4618      	mov	r0, r3
 8001e68:	f001 f970 	bl	800314c <readBitmapList>
	int currentSector = blist.lastUsedSector + 1;
 8001e6c:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8001e70:	f103 0310 	add.w	r3, r3, #16
 8001e74:	f6a3 03a4 	subw	r3, r3, #2212	; 0x8a4
 8001e78:	885b      	ldrh	r3, [r3, #2]
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	f507 52c5 	add.w	r2, r7, #6304	; 0x18a0
 8001e80:	f102 020c 	add.w	r2, r2, #12
 8001e84:	6013      	str	r3, [r2, #0]
	if(currentSector > MAX_SECTOR){
 8001e86:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8001e8a:	f103 030c 	add.w	r3, r3, #12
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e94:	db0d      	blt.n	8001eb2 <configBitmapFromUart+0x5e>
		printf("[cl] Error trying to write bitmap to memory: No more free sectors. Last used: %d \n\r", blist.lastUsedSector);
 8001e96:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8001e9a:	f103 0310 	add.w	r3, r3, #16
 8001e9e:	f6a3 03a4 	subw	r3, r3, #2212	; 0x8a4
 8001ea2:	885b      	ldrh	r3, [r3, #2]
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	48cc      	ldr	r0, [pc, #816]	; (80021d8 <configBitmapFromUart+0x384>)
 8001ea8:	f008 f866 	bl	8009f78 <iprintf>
		return 1000;
 8001eac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eb0:	e292      	b.n	80023d8 <configBitmapFromUart+0x584>
	}
	if(blist.totalBitmaps>=MAX_BITMAPS){
 8001eb2:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8001eb6:	f103 0310 	add.w	r3, r3, #16
 8001eba:	f6a3 03a4 	subw	r3, r3, #2212	; 0x8a4
 8001ebe:	881b      	ldrh	r3, [r3, #0]
 8001ec0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ec4:	d307      	bcc.n	8001ed6 <configBitmapFromUart+0x82>
		printf("[cl] Error trying to write bitmap to memory: Maximum number of bitmaps (%d) exceeded. \n\r", MAX_BITMAPS);
 8001ec6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001eca:	48c4      	ldr	r0, [pc, #784]	; (80021dc <configBitmapFromUart+0x388>)
 8001ecc:	f008 f854 	bl	8009f78 <iprintf>
		return 1001;
 8001ed0:	f240 33e9 	movw	r3, #1001	; 0x3e9
 8001ed4:	e280      	b.n	80023d8 <configBitmapFromUart+0x584>
	}
	blist.bitmapSectors[blist.totalBitmaps] = currentSector;
 8001ed6:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8001eda:	f103 0310 	add.w	r3, r3, #16
 8001ede:	f6a3 03a4 	subw	r3, r3, #2212	; 0x8a4
 8001ee2:	881b      	ldrh	r3, [r3, #0]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8001eea:	f103 030c 	add.w	r3, r3, #12
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	b299      	uxth	r1, r3
 8001ef2:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8001ef6:	f103 0310 	add.w	r3, r3, #16
 8001efa:	f6a3 02a4 	subw	r2, r3, #2212	; 0x8a4
 8001efe:	0043      	lsls	r3, r0, #1
 8001f00:	4413      	add	r3, r2
 8001f02:	460a      	mov	r2, r1
 8001f04:	809a      	strh	r2, [r3, #4]
 	blist.totalBitmaps++;
 8001f06:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8001f0a:	f103 0310 	add.w	r3, r3, #16
 8001f0e:	f6a3 03a4 	subw	r3, r3, #2212	; 0x8a4
 8001f12:	881b      	ldrh	r3, [r3, #0]
 8001f14:	3301      	adds	r3, #1
 8001f16:	b29a      	uxth	r2, r3
 8001f18:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8001f1c:	f103 0310 	add.w	r3, r3, #16
 8001f20:	f6a3 03a4 	subw	r3, r3, #2212	; 0x8a4
 8001f24:	801a      	strh	r2, [r3, #0]

 	struct bitmap bm;

 	UART_READ_STRING();
 8001f26:	f507 50c0 	add.w	r0, r7, #6144	; 0x1800
 8001f2a:	f100 0010 	add.w	r0, r0, #16
 8001f2e:	230d      	movs	r3, #13
 8001f30:	2280      	movs	r2, #128	; 0x80
 8001f32:	49ab      	ldr	r1, [pc, #684]	; (80021e0 <configBitmapFromUart+0x38c>)
 8001f34:	f003 fe58 	bl	8005be8 <read_usart_message>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	f507 52c4 	add.w	r2, r7, #6272	; 0x1880
 8001f3e:	f102 021c 	add.w	r2, r2, #28
 8001f42:	6013      	str	r3, [r2, #0]
 8001f44:	f507 53c4 	add.w	r3, r7, #6272	; 0x1880
 8001f48:	f103 031c 	add.w	r3, r3, #28
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d0e9      	beq.n	8001f26 <configBitmapFromUart+0xd2>
 8001f52:	f507 53c4 	add.w	r3, r7, #6272	; 0x1880
 8001f56:	f103 031c 	add.w	r3, r3, #28
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	3b01      	subs	r3, #1
 8001f5e:	f503 53c5 	add.w	r3, r3, #6304	; 0x18a0
 8001f62:	f103 0310 	add.w	r3, r3, #16
 8001f66:	443b      	add	r3, r7
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f803 2ca0 	strb.w	r2, [r3, #-160]
 	bm.xsize = atoi(msg);
 8001f6e:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8001f72:	f103 0310 	add.w	r3, r3, #16
 8001f76:	4618      	mov	r0, r3
 8001f78:	f007 ffba 	bl	8009ef0 <atoi>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	b29a      	uxth	r2, r3
 8001f80:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8001f84:	f103 0310 	add.w	r3, r3, #16
 8001f88:	f6a3 03ac 	subw	r3, r3, #2220	; 0x8ac
 8001f8c:	805a      	strh	r2, [r3, #2]
 	UART_READ_STRING();
 8001f8e:	f507 50c0 	add.w	r0, r7, #6144	; 0x1800
 8001f92:	f100 0010 	add.w	r0, r0, #16
 8001f96:	230d      	movs	r3, #13
 8001f98:	2280      	movs	r2, #128	; 0x80
 8001f9a:	4991      	ldr	r1, [pc, #580]	; (80021e0 <configBitmapFromUart+0x38c>)
 8001f9c:	f003 fe24 	bl	8005be8 <read_usart_message>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	f507 52c4 	add.w	r2, r7, #6272	; 0x1880
 8001fa6:	f102 021c 	add.w	r2, r2, #28
 8001faa:	6013      	str	r3, [r2, #0]
 8001fac:	f507 53c4 	add.w	r3, r7, #6272	; 0x1880
 8001fb0:	f103 031c 	add.w	r3, r3, #28
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d0e9      	beq.n	8001f8e <configBitmapFromUart+0x13a>
 8001fba:	f507 53c4 	add.w	r3, r7, #6272	; 0x1880
 8001fbe:	f103 031c 	add.w	r3, r3, #28
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	3b01      	subs	r3, #1
 8001fc6:	f503 53c5 	add.w	r3, r3, #6304	; 0x18a0
 8001fca:	f103 0310 	add.w	r3, r3, #16
 8001fce:	443b      	add	r3, r7
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f803 2ca0 	strb.w	r2, [r3, #-160]
 	bm.ysize = atoi(msg);
 8001fd6:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8001fda:	f103 0310 	add.w	r3, r3, #16
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f007 ff86 	bl	8009ef0 <atoi>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	b29a      	uxth	r2, r3
 8001fe8:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8001fec:	f103 0310 	add.w	r3, r3, #16
 8001ff0:	f6a3 03ac 	subw	r3, r3, #2220	; 0x8ac
 8001ff4:	809a      	strh	r2, [r3, #4]

 	bm.bitmapNumber = blist.totalBitmaps-1;
 8001ff6:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8001ffa:	f103 0310 	add.w	r3, r3, #16
 8001ffe:	f6a3 03a4 	subw	r3, r3, #2212	; 0x8a4
 8002002:	881b      	ldrh	r3, [r3, #0]
 8002004:	3b01      	subs	r3, #1
 8002006:	b29a      	uxth	r2, r3
 8002008:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 800200c:	f103 0310 	add.w	r3, r3, #16
 8002010:	f6a3 03ac 	subw	r3, r3, #2220	; 0x8ac
 8002014:	801a      	strh	r2, [r3, #0]

 	int expectedBytes = 2*bm.xsize*bm.ysize;
 8002016:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 800201a:	f103 0310 	add.w	r3, r3, #16
 800201e:	f6a3 03ac 	subw	r3, r3, #2220	; 0x8ac
 8002022:	885b      	ldrh	r3, [r3, #2]
 8002024:	461a      	mov	r2, r3
 8002026:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 800202a:	f103 0310 	add.w	r3, r3, #16
 800202e:	f6a3 03ac 	subw	r3, r3, #2220	; 0x8ac
 8002032:	889b      	ldrh	r3, [r3, #4]
 8002034:	fb02 f303 	mul.w	r3, r2, r3
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	f507 52c4 	add.w	r2, r7, #6272	; 0x1880
 800203e:	f102 0218 	add.w	r2, r2, #24
 8002042:	6013      	str	r3, [r2, #0]
 	int spaceLeft = SECTOR_SIZE*(MAX_SECTOR+1-currentSector) - sizeof(bm);
 8002044:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8002048:	f103 030c 	add.w	r3, r3, #12
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002052:	031b      	lsls	r3, r3, #12
 8002054:	3b06      	subs	r3, #6
 8002056:	f507 52c4 	add.w	r2, r7, #6272	; 0x1880
 800205a:	f102 0214 	add.w	r2, r2, #20
 800205e:	6013      	str	r3, [r2, #0]

 	printf("[cl] Okay, ready to parse bitmap #%d, size %dx%d pixels.\n\r", bm.bitmapNumber, bm.xsize, bm.ysize);
 8002060:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8002064:	f103 0310 	add.w	r3, r3, #16
 8002068:	f6a3 03ac 	subw	r3, r3, #2220	; 0x8ac
 800206c:	881b      	ldrh	r3, [r3, #0]
 800206e:	4619      	mov	r1, r3
 8002070:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8002074:	f103 0310 	add.w	r3, r3, #16
 8002078:	f6a3 03ac 	subw	r3, r3, #2220	; 0x8ac
 800207c:	885b      	ldrh	r3, [r3, #2]
 800207e:	461a      	mov	r2, r3
 8002080:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8002084:	f103 0310 	add.w	r3, r3, #16
 8002088:	f6a3 03ac 	subw	r3, r3, #2220	; 0x8ac
 800208c:	889b      	ldrh	r3, [r3, #4]
 800208e:	4855      	ldr	r0, [pc, #340]	; (80021e4 <configBitmapFromUart+0x390>)
 8002090:	f007 ff72 	bl	8009f78 <iprintf>

 	if(expectedBytes > spaceLeft){
 8002094:	f507 53c4 	add.w	r3, r7, #6272	; 0x1880
 8002098:	f103 0318 	add.w	r3, r3, #24
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	f507 53c4 	add.w	r3, r7, #6272	; 0x1880
 80020a2:	f103 0314 	add.w	r3, r3, #20
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	dd0c      	ble.n	80020c6 <configBitmapFromUart+0x272>
 		printf("[cl] WARNING: This bitmap is not going to fit into memory! Only first %d bytes of total %d will be written. \n\r", spaceLeft, expectedBytes);
 80020ac:	f507 53c4 	add.w	r3, r7, #6272	; 0x1880
 80020b0:	f103 0318 	add.w	r3, r3, #24
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	f507 53c4 	add.w	r3, r7, #6272	; 0x1880
 80020ba:	f103 0314 	add.w	r3, r3, #20
 80020be:	6819      	ldr	r1, [r3, #0]
 80020c0:	4849      	ldr	r0, [pc, #292]	; (80021e8 <configBitmapFromUart+0x394>)
 80020c2:	f007 ff59 	bl	8009f78 <iprintf>
 	}

 	uint8_t sectorBuffer[SECTOR_SIZE];
 	int sectorBufferIndex = 0;
 80020c6:	2300      	movs	r3, #0
 80020c8:	f507 52c5 	add.w	r2, r7, #6304	; 0x18a0
 80020cc:	f102 0208 	add.w	r2, r2, #8
 80020d0:	6013      	str	r3, [r2, #0]

 	memcpy(sectorBuffer+sectorBufferIndex, (uint8_t *) &bm, sizeof(bm));
 80020d2:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 80020d6:	f103 0308 	add.w	r3, r3, #8
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	f107 0310 	add.w	r3, r7, #16
 80020e0:	3b0c      	subs	r3, #12
 80020e2:	4413      	add	r3, r2
 80020e4:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 80020e8:	f101 0104 	add.w	r1, r1, #4
 80020ec:	2206      	movs	r2, #6
 80020ee:	4618      	mov	r0, r3
 80020f0:	f007 ff2c 	bl	8009f4c <memcpy>
 	sectorBufferIndex += sizeof(bm);
 80020f4:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 80020f8:	f103 0308 	add.w	r3, r3, #8
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	3306      	adds	r3, #6
 8002100:	f507 52c5 	add.w	r2, r7, #6304	; 0x18a0
 8002104:	f102 0208 	add.w	r2, r2, #8
 8002108:	6013      	str	r3, [r2, #0]

 	int bytesLeft = expectedBytes;
 800210a:	f507 53c4 	add.w	r3, r7, #6272	; 0x1880
 800210e:	f103 0318 	add.w	r3, r3, #24
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f507 52c5 	add.w	r2, r7, #6304	; 0x18a0
 8002118:	f102 0204 	add.w	r2, r2, #4
 800211c:	6013      	str	r3, [r2, #0]
 	int updateCount = expectedBytes / 10;
 800211e:	f507 53c4 	add.w	r3, r7, #6272	; 0x1880
 8002122:	f103 0318 	add.w	r3, r3, #24
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a30      	ldr	r2, [pc, #192]	; (80021ec <configBitmapFromUart+0x398>)
 800212a:	fb82 1203 	smull	r1, r2, r2, r3
 800212e:	1092      	asrs	r2, r2, #2
 8002130:	17db      	asrs	r3, r3, #31
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	f507 52c5 	add.w	r2, r7, #6304	; 0x18a0
 8002138:	6013      	str	r3, [r2, #0]
 	if(updateCount == 0){
 800213a:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2b00      	cmp	r3, #0
 8002142:	f040 80f0 	bne.w	8002326 <configBitmapFromUart+0x4d2>
 		updateCount = 1;
 8002146:	2301      	movs	r3, #1
 8002148:	f507 52c5 	add.w	r2, r7, #6304	; 0x18a0
 800214c:	6013      	str	r3, [r2, #0]
 	}

 	while(bytesLeft > 0){
 800214e:	e0ea      	b.n	8002326 <configBitmapFromUart+0x4d2>
 		if(bytesLeft %updateCount == 0){
 8002150:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8002154:	f103 0304 	add.w	r3, r3, #4
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f507 52c5 	add.w	r2, r7, #6304	; 0x18a0
 800215e:	6812      	ldr	r2, [r2, #0]
 8002160:	fb93 f2f2 	sdiv	r2, r3, r2
 8002164:	f507 51c5 	add.w	r1, r7, #6304	; 0x18a0
 8002168:	6809      	ldr	r1, [r1, #0]
 800216a:	fb01 f202 	mul.w	r2, r1, r2
 800216e:	1a9b      	subs	r3, r3, r2
 8002170:	2b00      	cmp	r3, #0
 8002172:	d107      	bne.n	8002184 <configBitmapFromUart+0x330>
 			printf("[cl] %d bytes left.\n\r", bytesLeft);
 8002174:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8002178:	f103 0304 	add.w	r3, r3, #4
 800217c:	6819      	ldr	r1, [r3, #0]
 800217e:	481c      	ldr	r0, [pc, #112]	; (80021f0 <configBitmapFromUart+0x39c>)
 8002180:	f007 fefa 	bl	8009f78 <iprintf>
 		}
 		do{count = read_usart_message(msg, &huart1, 2, NEWLINE);} while (count==0);
 8002184:	f507 50c0 	add.w	r0, r7, #6144	; 0x1800
 8002188:	f100 0010 	add.w	r0, r0, #16
 800218c:	230d      	movs	r3, #13
 800218e:	2202      	movs	r2, #2
 8002190:	4913      	ldr	r1, [pc, #76]	; (80021e0 <configBitmapFromUart+0x38c>)
 8002192:	f003 fd29 	bl	8005be8 <read_usart_message>
 8002196:	4603      	mov	r3, r0
 8002198:	f507 52c4 	add.w	r2, r7, #6272	; 0x1880
 800219c:	f102 021c 	add.w	r2, r2, #28
 80021a0:	6013      	str	r3, [r2, #0]
 80021a2:	f507 53c4 	add.w	r3, r7, #6272	; 0x1880
 80021a6:	f103 031c 	add.w	r3, r3, #28
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d0e9      	beq.n	8002184 <configBitmapFromUart+0x330>
 		if(count!=2){
 80021b0:	f507 53c4 	add.w	r3, r7, #6272	; 0x1880
 80021b4:	f103 031c 	add.w	r3, r3, #28
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d01c      	beq.n	80021f8 <configBitmapFromUart+0x3a4>
 			printf("[cl] Error: Unexpected end of bitmap #%d data.\n\r.", bm.bitmapNumber);
 80021be:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 80021c2:	f103 0310 	add.w	r3, r3, #16
 80021c6:	f6a3 03ac 	subw	r3, r3, #2220	; 0x8ac
 80021ca:	881b      	ldrh	r3, [r3, #0]
 80021cc:	4619      	mov	r1, r3
 80021ce:	4809      	ldr	r0, [pc, #36]	; (80021f4 <configBitmapFromUart+0x3a0>)
 80021d0:	f007 fed2 	bl	8009f78 <iprintf>
 			break;
 80021d4:	e0af      	b.n	8002336 <configBitmapFromUart+0x4e2>
 80021d6:	bf00      	nop
 80021d8:	0800b1e8 	.word	0x0800b1e8
 80021dc:	0800b23c 	.word	0x0800b23c
 80021e0:	20002154 	.word	0x20002154
 80021e4:	0800b298 	.word	0x0800b298
 80021e8:	0800b2d4 	.word	0x0800b2d4
 80021ec:	66666667 	.word	0x66666667
 80021f0:	0800b344 	.word	0x0800b344
 80021f4:	0800b35c 	.word	0x0800b35c
 		}
 		msg[2] = 0;
 80021f8:	2300      	movs	r3, #0
 80021fa:	f507 52c0 	add.w	r2, r7, #6144	; 0x1800
 80021fe:	f102 0212 	add.w	r2, r2, #18
 8002202:	7013      	strb	r3, [r2, #0]
		uint8_t deHexedByte = (uint8_t) strtol(msg, NULL, 16);
 8002204:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8002208:	f103 0310 	add.w	r3, r3, #16
 800220c:	2210      	movs	r2, #16
 800220e:	2100      	movs	r1, #0
 8002210:	4618      	mov	r0, r3
 8002212:	f007 ff53 	bl	800a0bc <strtol>
 8002216:	4603      	mov	r3, r0
 8002218:	f507 52c4 	add.w	r2, r7, #6272	; 0x1880
 800221c:	f102 0213 	add.w	r2, r2, #19
 8002220:	7013      	strb	r3, [r2, #0]
		sectorBuffer[sectorBufferIndex] = deHexedByte;
 8002222:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8002226:	f6a3 02ac 	subw	r2, r3, #2220	; 0x8ac
 800222a:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 800222e:	f103 0308 	add.w	r3, r3, #8
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4413      	add	r3, r2
 8002236:	f507 52c4 	add.w	r2, r7, #6272	; 0x1880
 800223a:	f102 0213 	add.w	r2, r2, #19
 800223e:	7812      	ldrb	r2, [r2, #0]
 8002240:	701a      	strb	r2, [r3, #0]
		sectorBufferIndex++;
 8002242:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8002246:	f103 0308 	add.w	r3, r3, #8
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	3301      	adds	r3, #1
 800224e:	f507 52c5 	add.w	r2, r7, #6304	; 0x18a0
 8002252:	f102 0208 	add.w	r2, r2, #8
 8002256:	6013      	str	r3, [r2, #0]
		bytesLeft--;
 8002258:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 800225c:	f103 0304 	add.w	r3, r3, #4
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	3b01      	subs	r3, #1
 8002264:	f507 52c5 	add.w	r2, r7, #6304	; 0x18a0
 8002268:	f102 0204 	add.w	r2, r2, #4
 800226c:	6013      	str	r3, [r2, #0]
		if(sectorBufferIndex == SECTOR_SIZE || bytesLeft == 0){
 800226e:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8002272:	f103 0308 	add.w	r3, r3, #8
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800227c:	d006      	beq.n	800228c <configBitmapFromUart+0x438>
 800227e:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8002282:	f103 0304 	add.w	r3, r3, #4
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d14c      	bne.n	8002326 <configBitmapFromUart+0x4d2>
			ext_flash_erase_4kB(currentSector*SECTOR_SIZE);
 800228c:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8002290:	f103 030c 	add.w	r3, r3, #12
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	031b      	lsls	r3, r3, #12
 8002298:	4618      	mov	r0, r3
 800229a:	f001 fb23 	bl	80038e4 <ext_flash_erase_4kB>
			ext_flash_write_multipage(currentSector*SECTOR_SIZE, sectorBuffer, sectorBufferIndex);
 800229e:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 80022a2:	f103 030c 	add.w	r3, r3, #12
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	031b      	lsls	r3, r3, #12
 80022aa:	4618      	mov	r0, r3
 80022ac:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 80022b0:	f103 0308 	add.w	r3, r3, #8
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	f107 0310 	add.w	r3, r7, #16
 80022ba:	3b0c      	subs	r3, #12
 80022bc:	4619      	mov	r1, r3
 80022be:	f001 fc2b 	bl	8003b18 <ext_flash_write_multipage>
			sectorBufferIndex = 0;
 80022c2:	2300      	movs	r3, #0
 80022c4:	f507 52c5 	add.w	r2, r7, #6304	; 0x18a0
 80022c8:	f102 0208 	add.w	r2, r2, #8
 80022cc:	6013      	str	r3, [r2, #0]
			if(bytesLeft > 0){
 80022ce:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 80022d2:	f103 0304 	add.w	r3, r3, #4
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	dd24      	ble.n	8002326 <configBitmapFromUart+0x4d2>
				if(currentSector == MAX_SECTOR){
 80022dc:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 80022e0:	f103 030c 	add.w	r3, r3, #12
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d110      	bne.n	8002310 <configBitmapFromUart+0x4bc>
					printf("[cl] Warning: Ran out of external memory while writing bitmap #%d. Last %d bytes not saved. \n\r", bm.bitmapNumber, bytesLeft);
 80022ee:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 80022f2:	f103 0310 	add.w	r3, r3, #16
 80022f6:	f6a3 03ac 	subw	r3, r3, #2220	; 0x8ac
 80022fa:	881b      	ldrh	r3, [r3, #0]
 80022fc:	f507 52c5 	add.w	r2, r7, #6304	; 0x18a0
 8002300:	f102 0204 	add.w	r2, r2, #4
 8002304:	6812      	ldr	r2, [r2, #0]
 8002306:	4619      	mov	r1, r3
 8002308:	4836      	ldr	r0, [pc, #216]	; (80023e4 <configBitmapFromUart+0x590>)
 800230a:	f007 fe35 	bl	8009f78 <iprintf>
					break;
 800230e:	e012      	b.n	8002336 <configBitmapFromUart+0x4e2>
				}
				currentSector++;
 8002310:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8002314:	f103 030c 	add.w	r3, r3, #12
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	3301      	adds	r3, #1
 800231c:	f507 52c5 	add.w	r2, r7, #6304	; 0x18a0
 8002320:	f102 020c 	add.w	r2, r2, #12
 8002324:	6013      	str	r3, [r2, #0]
 	while(bytesLeft > 0){
 8002326:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 800232a:	f103 0304 	add.w	r3, r3, #4
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2b00      	cmp	r3, #0
 8002332:	f73f af0d 	bgt.w	8002150 <configBitmapFromUart+0x2fc>
			}
		}
 	}
 	read_usart_message(msg, &huart1, 2, NEWLINE); //get rid of newline left in buffer after reading last 2 chars
 8002336:	f507 50c0 	add.w	r0, r7, #6144	; 0x1800
 800233a:	f100 0010 	add.w	r0, r0, #16
 800233e:	230d      	movs	r3, #13
 8002340:	2202      	movs	r2, #2
 8002342:	4929      	ldr	r1, [pc, #164]	; (80023e8 <configBitmapFromUart+0x594>)
 8002344:	f003 fc50 	bl	8005be8 <read_usart_message>

 	blist.lastUsedSector = currentSector;
 8002348:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 800234c:	f103 030c 	add.w	r3, r3, #12
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	b29a      	uxth	r2, r3
 8002354:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8002358:	f103 0310 	add.w	r3, r3, #16
 800235c:	f6a3 03a4 	subw	r3, r3, #2212	; 0x8a4
 8002360:	805a      	strh	r2, [r3, #2]
 	memcpy(sectorBuffer, (uint8_t *) &blist, sizeof(blist));
 8002362:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8002366:	f101 010c 	add.w	r1, r1, #12
 800236a:	f107 0310 	add.w	r3, r7, #16
 800236e:	3b0c      	subs	r3, #12
 8002370:	f640 0204 	movw	r2, #2052	; 0x804
 8002374:	4618      	mov	r0, r3
 8002376:	f007 fde9 	bl	8009f4c <memcpy>
 	ext_flash_erase_4kB(BITMAP_LIST_SECTOR*SECTOR_SIZE);
 800237a:	f44f 2048 	mov.w	r0, #819200	; 0xc8000
 800237e:	f001 fab1 	bl	80038e4 <ext_flash_erase_4kB>
 	ext_flash_write_multipage(BITMAP_LIST_SECTOR*SECTOR_SIZE, sectorBuffer, sizeof(blist));
 8002382:	f107 0310 	add.w	r3, r7, #16
 8002386:	3b0c      	subs	r3, #12
 8002388:	f640 0204 	movw	r2, #2052	; 0x804
 800238c:	4619      	mov	r1, r3
 800238e:	f44f 2048 	mov.w	r0, #819200	; 0xc8000
 8002392:	f001 fbc1 	bl	8003b18 <ext_flash_write_multipage>

	if(bytesLeft > 0){
 8002396:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 800239a:	f103 0304 	add.w	r3, r3, #4
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	dd0d      	ble.n	80023c0 <configBitmapFromUart+0x56c>
		printf("[cl] Bitmap #%d has been PARTIALLY written.\n\r", bm.bitmapNumber);
 80023a4:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 80023a8:	f103 0310 	add.w	r3, r3, #16
 80023ac:	f6a3 03ac 	subw	r3, r3, #2220	; 0x8ac
 80023b0:	881b      	ldrh	r3, [r3, #0]
 80023b2:	4619      	mov	r1, r3
 80023b4:	480d      	ldr	r0, [pc, #52]	; (80023ec <configBitmapFromUart+0x598>)
 80023b6:	f007 fddf 	bl	8009f78 <iprintf>
		return 1005;
 80023ba:	f240 33ed 	movw	r3, #1005	; 0x3ed
 80023be:	e00b      	b.n	80023d8 <configBitmapFromUart+0x584>
	}
	printf("[cl] Bitmap #%d has been written.\n\r", bm.bitmapNumber);
 80023c0:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 80023c4:	f103 0310 	add.w	r3, r3, #16
 80023c8:	f6a3 03ac 	subw	r3, r3, #2220	; 0x8ac
 80023cc:	881b      	ldrh	r3, [r3, #0]
 80023ce:	4619      	mov	r1, r3
 80023d0:	4807      	ldr	r0, [pc, #28]	; (80023f0 <configBitmapFromUart+0x59c>)
 80023d2:	f007 fdd1 	bl	8009f78 <iprintf>
	return 0;
 80023d6:	2300      	movs	r3, #0
}
 80023d8:	4618      	mov	r0, r3
 80023da:	f507 57c5 	add.w	r7, r7, #6304	; 0x18a0
 80023de:	3710      	adds	r7, #16
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	0800b390 	.word	0x0800b390
 80023e8:	20002154 	.word	0x20002154
 80023ec:	0800b3f0 	.word	0x0800b3f0
 80023f0:	0800b420 	.word	0x0800b420

080023f4 <configMarkBitmapsForDelete>:

int configMarkBitmapsForDelete(){
 80023f4:	b580      	push	{r7, lr}
 80023f6:	f5ad 5d80 	sub.w	sp, sp, #4096	; 0x1000
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
	ext_flash_erase_4kB(BITMAP_LIST_SECTOR*SECTOR_SIZE);
 80023fe:	f44f 2048 	mov.w	r0, #819200	; 0xc8000
 8002402:	f001 fa6f 	bl	80038e4 <ext_flash_erase_4kB>
	struct bitmapList bl;
	bl.totalBitmaps = 0;
 8002406:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800240a:	f103 0308 	add.w	r3, r3, #8
 800240e:	f6a3 0304 	subw	r3, r3, #2052	; 0x804
 8002412:	2200      	movs	r2, #0
 8002414:	801a      	strh	r2, [r3, #0]
	bl.lastUsedSector = BITMAP_LIST_SECTOR;
 8002416:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800241a:	f103 0308 	add.w	r3, r3, #8
 800241e:	f6a3 0304 	subw	r3, r3, #2052	; 0x804
 8002422:	22c8      	movs	r2, #200	; 0xc8
 8002424:	805a      	strh	r2, [r3, #2]
	uint8_t buff[sizeof(bl)];
	memcpy(buff, (uint8_t *) &bl, sizeof(bl));
 8002426:	f107 0308 	add.w	r3, r7, #8
 800242a:	4619      	mov	r1, r3
 800242c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002430:	f103 0308 	add.w	r3, r3, #8
 8002434:	f6a3 0204 	subw	r2, r3, #2052	; 0x804
 8002438:	f1a1 0308 	sub.w	r3, r1, #8
 800243c:	4611      	mov	r1, r2
 800243e:	f640 0204 	movw	r2, #2052	; 0x804
 8002442:	4618      	mov	r0, r3
 8002444:	f007 fd82 	bl	8009f4c <memcpy>
	ext_flash_write_multipage(BITMAP_LIST_SECTOR*SECTOR_SIZE, buff, sizeof(bl));
 8002448:	f107 0308 	add.w	r3, r7, #8
 800244c:	3b08      	subs	r3, #8
 800244e:	f640 0204 	movw	r2, #2052	; 0x804
 8002452:	4619      	mov	r1, r3
 8002454:	f44f 2048 	mov.w	r0, #819200	; 0xc8000
 8002458:	f001 fb5e 	bl	8003b18 <ext_flash_write_multipage>
	printf("[cl] Bitmaps marked for delete.\n\r");
 800245c:	4804      	ldr	r0, [pc, #16]	; (8002470 <configMarkBitmapsForDelete+0x7c>)
 800245e:	f007 fd8b 	bl	8009f78 <iprintf>
	return 0;
 8002462:	2300      	movs	r3, #0
}
 8002464:	4618      	mov	r0, r3
 8002466:	f507 5780 	add.w	r7, r7, #4096	; 0x1000
 800246a:	3708      	adds	r7, #8
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	0800b444 	.word	0x0800b444

08002474 <configScreensFromUart>:


int configScreensFromUart(){
 8002474:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002476:	f5ad 5d4b 	sub.w	sp, sp, #12992	; 0x32c0
 800247a:	b087      	sub	sp, #28
 800247c:	af04      	add	r7, sp, #16
	int count;
	char msg[128];
	UART_READ_STRING(); //read general config - number of screens
 800247e:	f507 5048 	add.w	r0, r7, #12800	; 0x3200
 8002482:	f100 0020 	add.w	r0, r0, #32
 8002486:	230d      	movs	r3, #13
 8002488:	2280      	movs	r2, #128	; 0x80
 800248a:	4989      	ldr	r1, [pc, #548]	; (80026b0 <configScreensFromUart+0x23c>)
 800248c:	f003 fbac 	bl	8005be8 <read_usart_message>
 8002490:	4603      	mov	r3, r0
 8002492:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002496:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 800249a:	6013      	str	r3, [r2, #0]
 800249c:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 80024a0:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d0e9      	beq.n	800247e <configScreensFromUart+0xa>
 80024aa:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 80024ae:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	3b01      	subs	r3, #1
 80024b6:	f503 534b 	add.w	r3, r3, #12992	; 0x32c0
 80024ba:	f103 0308 	add.w	r3, r3, #8
 80024be:	443b      	add	r3, r7
 80024c0:	2200      	movs	r2, #0
 80024c2:	f803 2ca8 	strb.w	r2, [r3, #-168]
	int totalScreens = atoi(msg);
 80024c6:	f507 5348 	add.w	r3, r7, #12800	; 0x3200
 80024ca:	f103 0320 	add.w	r3, r3, #32
 80024ce:	4618      	mov	r0, r3
 80024d0:	f007 fd0e 	bl	8009ef0 <atoi>
 80024d4:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 80024d8:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80024dc:	6018      	str	r0, [r3, #0]

	if(totalScreens < 1 || totalScreens >256){
 80024de:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 80024e2:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	dd07      	ble.n	80024fc <configScreensFromUart+0x88>
 80024ec:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 80024f0:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024fa:	dd0a      	ble.n	8002512 <configScreensFromUart+0x9e>
		printf("[cl] Got %d, which is not a valid number of screens.\n\r", totalScreens);
 80024fc:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002500:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8002504:	6819      	ldr	r1, [r3, #0]
 8002506:	486b      	ldr	r0, [pc, #428]	; (80026b4 <configScreensFromUart+0x240>)
 8002508:	f007 fd36 	bl	8009f78 <iprintf>
		return 2;
 800250c:	2302      	movs	r3, #2
 800250e:	f000 bdee 	b.w	80030ee <configScreensFromUart+0xc7a>
	}

	struct generalConfig gconf;

	memset(&gconf.screenSectors, 0, sizeof(gconf.screenSectors));
 8002512:	f507 5340 	add.w	r3, r7, #12288	; 0x3000
 8002516:	f103 031c 	add.w	r3, r3, #28
 800251a:	3302      	adds	r3, #2
 800251c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002520:	2100      	movs	r1, #0
 8002522:	4618      	mov	r0, r3
 8002524:	f007 fd20 	bl	8009f68 <memset>
	gconf.totalScreens = totalScreens;
 8002528:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 800252c:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	b2da      	uxtb	r2, r3
 8002534:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8002538:	f103 0308 	add.w	r3, r3, #8
 800253c:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 8002540:	701a      	strb	r2, [r3, #0]

	printf("[cl] Ok, expecting %d screens worth of data.\n\r", totalScreens);
 8002542:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002546:	f103 0328 	add.w	r3, r3, #40	; 0x28
 800254a:	6819      	ldr	r1, [r3, #0]
 800254c:	485a      	ldr	r0, [pc, #360]	; (80026b8 <configScreensFromUart+0x244>)
 800254e:	f007 fd13 	bl	8009f78 <iprintf>

	uint8_t currentScreenIndex = -1;
 8002552:	23ff      	movs	r3, #255	; 0xff
 8002554:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 8002558:	f102 0207 	add.w	r2, r2, #7
 800255c:	7013      	strb	r3, [r2, #0]
	uint16_t currentSector = GENERAL_CONFIG_SECTOR;
 800255e:	2300      	movs	r3, #0
 8002560:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 8002564:	f102 0204 	add.w	r2, r2, #4
 8002568:	8013      	strh	r3, [r2, #0]
	uint16_t currentScreenObjectsLeft = 0;
 800256a:	2300      	movs	r3, #0
 800256c:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 8002570:	f102 0202 	add.w	r2, r2, #2
 8002574:	8013      	strh	r3, [r2, #0]

	char screenStr[] = "screen";
 8002576:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 800257a:	f103 0308 	add.w	r3, r3, #8
 800257e:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8002582:	4a4e      	ldr	r2, [pc, #312]	; (80026bc <configScreensFromUart+0x248>)
 8002584:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002588:	6018      	str	r0, [r3, #0]
 800258a:	3304      	adds	r3, #4
 800258c:	8019      	strh	r1, [r3, #0]
 800258e:	3302      	adds	r3, #2
 8002590:	0c0a      	lsrs	r2, r1, #16
 8002592:	701a      	strb	r2, [r3, #0]

	#define MAX_DATA_SIZE 8192
	uint8_t sectorBuffer[SECTOR_SIZE]; //holds sector before writing to external flash
	int sectorBufferIndex = 0;
 8002594:	2300      	movs	r3, #0
 8002596:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 800259a:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 800259e:	6013      	str	r3, [r2, #0]
	uint8_t dataBuffer[MAX_DATA_SIZE];
	int dataBufferIndex = 0;
 80025a0:	2300      	movs	r3, #0
 80025a2:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 80025a6:	f102 0238 	add.w	r2, r2, #56	; 0x38
 80025aa:	6013      	str	r3, [r2, #0]

	while(1){

		if(currentScreenIndex + 1 == totalScreens){
 80025ac:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 80025b0:	f103 0307 	add.w	r3, r3, #7
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	3301      	adds	r3, #1
 80025b8:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 80025bc:	f102 0228 	add.w	r2, r2, #40	; 0x28
 80025c0:	6812      	ldr	r2, [r2, #0]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d131      	bne.n	800262a <configScreensFromUart+0x1b6>
			printf("[cl] All screens' data received.\n\r");
 80025c6:	483e      	ldr	r0, [pc, #248]	; (80026c0 <configScreensFromUart+0x24c>)
 80025c8:	f007 fcd6 	bl	8009f78 <iprintf>
	}

	//all screens have been written.
	//Now save generic config, since sector address array has been completed:

	printf("Gconf screens %d \n\r", gconf.totalScreens);
 80025cc:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 80025d0:	f103 0308 	add.w	r3, r3, #8
 80025d4:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	4619      	mov	r1, r3
 80025dc:	4839      	ldr	r0, [pc, #228]	; (80026c4 <configScreensFromUart+0x250>)
 80025de:	f007 fccb 	bl	8009f78 <iprintf>

	sectorBufferIndex = 0;
 80025e2:	2300      	movs	r3, #0
 80025e4:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 80025e8:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 80025ec:	6013      	str	r3, [r2, #0]
	memcpy(sectorBuffer+sectorBufferIndex, (uint8_t *) &gconf, 100);//sizeof(gconf));
 80025ee:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 80025f2:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80025fc:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8002600:	3b14      	subs	r3, #20
 8002602:	4413      	add	r3, r2
 8002604:	f507 5140 	add.w	r1, r7, #12288	; 0x3000
 8002608:	f101 011c 	add.w	r1, r1, #28
 800260c:	2264      	movs	r2, #100	; 0x64
 800260e:	4618      	mov	r0, r3
 8002610:	f007 fc9c 	bl	8009f4c <memcpy>

	printf("J ");
 8002614:	482c      	ldr	r0, [pc, #176]	; (80026c8 <configScreensFromUart+0x254>)
 8002616:	f007 fcaf 	bl	8009f78 <iprintf>
	int j;
	for(j=0; j<sizeof(gconf); j++){
 800261a:	2300      	movs	r3, #0
 800261c:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002620:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8002624:	6013      	str	r3, [r2, #0]
 8002626:	f000 bd41 	b.w	80030ac <configScreensFromUart+0xc38>
		UART_READ_STRING();
 800262a:	f507 5048 	add.w	r0, r7, #12800	; 0x3200
 800262e:	f100 0020 	add.w	r0, r0, #32
 8002632:	230d      	movs	r3, #13
 8002634:	2280      	movs	r2, #128	; 0x80
 8002636:	491e      	ldr	r1, [pc, #120]	; (80026b0 <configScreensFromUart+0x23c>)
 8002638:	f003 fad6 	bl	8005be8 <read_usart_message>
 800263c:	4603      	mov	r3, r0
 800263e:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002642:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8002646:	6013      	str	r3, [r2, #0]
 8002648:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 800264c:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d0e9      	beq.n	800262a <configScreensFromUart+0x1b6>
 8002656:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 800265a:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	3b01      	subs	r3, #1
 8002662:	f503 534b 	add.w	r3, r3, #12992	; 0x32c0
 8002666:	f103 0308 	add.w	r3, r3, #8
 800266a:	443b      	add	r3, r7
 800266c:	2200      	movs	r2, #0
 800266e:	f803 2ca8 	strb.w	r2, [r3, #-168]
		if(strcmp(screenStr, msg) != 0){
 8002672:	f507 5248 	add.w	r2, r7, #12800	; 0x3200
 8002676:	f102 0220 	add.w	r2, r2, #32
 800267a:	f507 5340 	add.w	r3, r7, #12288	; 0x3000
 800267e:	f103 0314 	add.w	r3, r3, #20
 8002682:	4611      	mov	r1, r2
 8002684:	4618      	mov	r0, r3
 8002686:	f7fd fda3 	bl	80001d0 <strcmp>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d01f      	beq.n	80026d0 <configScreensFromUart+0x25c>
			printf("[cl] Unexpected input - wanted %s, got %s. \n\r",screenStr, msg);
 8002690:	f507 5248 	add.w	r2, r7, #12800	; 0x3200
 8002694:	f102 0220 	add.w	r2, r2, #32
 8002698:	f507 5340 	add.w	r3, r7, #12288	; 0x3000
 800269c:	f103 0314 	add.w	r3, r3, #20
 80026a0:	4619      	mov	r1, r3
 80026a2:	480a      	ldr	r0, [pc, #40]	; (80026cc <configScreensFromUart+0x258>)
 80026a4:	f007 fc68 	bl	8009f78 <iprintf>
			return 3;
 80026a8:	2303      	movs	r3, #3
 80026aa:	f000 bd20 	b.w	80030ee <configScreensFromUart+0xc7a>
 80026ae:	bf00      	nop
 80026b0:	20002154 	.word	0x20002154
 80026b4:	0800b468 	.word	0x0800b468
 80026b8:	0800b4a0 	.word	0x0800b4a0
 80026bc:	0800b724 	.word	0x0800b724
 80026c0:	0800b4d0 	.word	0x0800b4d0
 80026c4:	0800b4f4 	.word	0x0800b4f4
 80026c8:	0800b508 	.word	0x0800b508
 80026cc:	0800b50c 	.word	0x0800b50c
		UART_READ_STRING();
 80026d0:	f507 5048 	add.w	r0, r7, #12800	; 0x3200
 80026d4:	f100 0020 	add.w	r0, r0, #32
 80026d8:	230d      	movs	r3, #13
 80026da:	2280      	movs	r2, #128	; 0x80
 80026dc:	497b      	ldr	r1, [pc, #492]	; (80028cc <configScreensFromUart+0x458>)
 80026de:	f003 fa83 	bl	8005be8 <read_usart_message>
 80026e2:	4603      	mov	r3, r0
 80026e4:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 80026e8:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 80026ec:	6013      	str	r3, [r2, #0]
 80026ee:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 80026f2:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d0e9      	beq.n	80026d0 <configScreensFromUart+0x25c>
 80026fc:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002700:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	3b01      	subs	r3, #1
 8002708:	f503 534b 	add.w	r3, r3, #12992	; 0x32c0
 800270c:	f103 0308 	add.w	r3, r3, #8
 8002710:	443b      	add	r3, r7
 8002712:	2200      	movs	r2, #0
 8002714:	f803 2ca8 	strb.w	r2, [r3, #-168]
		currentScreenObjectsLeft = atoi(msg);
 8002718:	f507 5348 	add.w	r3, r7, #12800	; 0x3200
 800271c:	f103 0320 	add.w	r3, r3, #32
 8002720:	4618      	mov	r0, r3
 8002722:	f007 fbe5 	bl	8009ef0 <atoi>
 8002726:	4603      	mov	r3, r0
 8002728:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 800272c:	f102 0202 	add.w	r2, r2, #2
 8002730:	8013      	strh	r3, [r2, #0]
		printf("[cl] Ok, expecting %d objects for current screen.\n\r", currentScreenObjectsLeft);
 8002732:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8002736:	f103 0302 	add.w	r3, r3, #2
 800273a:	881b      	ldrh	r3, [r3, #0]
 800273c:	4619      	mov	r1, r3
 800273e:	4864      	ldr	r0, [pc, #400]	; (80028d0 <configScreensFromUart+0x45c>)
 8002740:	f007 fc1a 	bl	8009f78 <iprintf>
		screenVar.objectCount = currentScreenObjectsLeft;
 8002744:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8002748:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 800274c:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 8002750:	f102 0202 	add.w	r2, r2, #2
 8002754:	8812      	ldrh	r2, [r2, #0]
 8002756:	805a      	strh	r2, [r3, #2]
		screenVar.screenNumber = currentScreenIndex;
 8002758:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 800275c:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 8002760:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 8002764:	f102 0207 	add.w	r2, r2, #7
 8002768:	7812      	ldrb	r2, [r2, #0]
 800276a:	701a      	strb	r2, [r3, #0]
		currentSector += 1; //begin new sector -- screens are sector-aligned for easier access
 800276c:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8002770:	f103 0304 	add.w	r3, r3, #4
 8002774:	881b      	ldrh	r3, [r3, #0]
 8002776:	3301      	adds	r3, #1
 8002778:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 800277c:	f102 0204 	add.w	r2, r2, #4
 8002780:	8013      	strh	r3, [r2, #0]
		currentScreenIndex += 1;
 8002782:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8002786:	f103 0307 	add.w	r3, r3, #7
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	3301      	adds	r3, #1
 800278e:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 8002792:	f102 0207 	add.w	r2, r2, #7
 8002796:	7013      	strb	r3, [r2, #0]
		gconf.screenSectors[currentScreenIndex] = currentSector;
 8002798:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 800279c:	f103 0307 	add.w	r3, r3, #7
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 80027a6:	f102 0208 	add.w	r2, r2, #8
 80027aa:	f5a2 722b 	sub.w	r2, r2, #684	; 0x2ac
 80027ae:	005b      	lsls	r3, r3, #1
 80027b0:	4413      	add	r3, r2
 80027b2:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 80027b6:	f102 0204 	add.w	r2, r2, #4
 80027ba:	8812      	ldrh	r2, [r2, #0]
 80027bc:	805a      	strh	r2, [r3, #2]
		ext_flash_erase_4kB(currentSector*SECTOR_SIZE);
 80027be:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 80027c2:	f103 0304 	add.w	r3, r3, #4
 80027c6:	881b      	ldrh	r3, [r3, #0]
 80027c8:	031b      	lsls	r3, r3, #12
 80027ca:	4618      	mov	r0, r3
 80027cc:	f001 f88a 	bl	80038e4 <ext_flash_erase_4kB>
		memset(sectorBuffer, 0, SECTOR_SIZE);
 80027d0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80027d4:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80027d8:	3b14      	subs	r3, #20
 80027da:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80027de:	2100      	movs	r1, #0
 80027e0:	4618      	mov	r0, r3
 80027e2:	f007 fbc1 	bl	8009f68 <memset>
		sectorBufferIndex = 0;
 80027e6:	2300      	movs	r3, #0
 80027e8:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 80027ec:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 80027f0:	6013      	str	r3, [r2, #0]
		memcpy(sectorBuffer+sectorBufferIndex, (uint8_t *) &screenVar, sizeof(screenVar));
 80027f2:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 80027f6:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8002800:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8002804:	3b14      	subs	r3, #20
 8002806:	4413      	add	r3, r2
 8002808:	f507 7232 	add.w	r2, r7, #712	; 0x2c8
 800280c:	f5a2 722e 	sub.w	r2, r2, #696	; 0x2b8
 8002810:	6812      	ldr	r2, [r2, #0]
 8002812:	601a      	str	r2, [r3, #0]
		sectorBufferIndex += sizeof(screenVar);
 8002814:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002818:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	3304      	adds	r3, #4
 8002820:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002824:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8002828:	6013      	str	r3, [r2, #0]
		while(currentScreenObjectsLeft > 0){
 800282a:	f000 bc05 	b.w	8003038 <configScreensFromUart+0xbc4>
			currentScreenObjectsLeft--;
 800282e:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8002832:	f103 0302 	add.w	r3, r3, #2
 8002836:	881b      	ldrh	r3, [r3, #0]
 8002838:	3b01      	subs	r3, #1
 800283a:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 800283e:	f102 0202 	add.w	r2, r2, #2
 8002842:	8013      	strh	r3, [r2, #0]
			UART_READ_STRING();
 8002844:	f507 5048 	add.w	r0, r7, #12800	; 0x3200
 8002848:	f100 0020 	add.w	r0, r0, #32
 800284c:	230d      	movs	r3, #13
 800284e:	2280      	movs	r2, #128	; 0x80
 8002850:	491e      	ldr	r1, [pc, #120]	; (80028cc <configScreensFromUart+0x458>)
 8002852:	f003 f9c9 	bl	8005be8 <read_usart_message>
 8002856:	4603      	mov	r3, r0
 8002858:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 800285c:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8002860:	6013      	str	r3, [r2, #0]
 8002862:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002866:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d0e9      	beq.n	8002844 <configScreensFromUart+0x3d0>
 8002870:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002874:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	3b01      	subs	r3, #1
 800287c:	f503 534b 	add.w	r3, r3, #12992	; 0x32c0
 8002880:	f103 0308 	add.w	r3, r3, #8
 8002884:	443b      	add	r3, r7
 8002886:	2200      	movs	r2, #0
 8002888:	f803 2ca8 	strb.w	r2, [r3, #-168]
			currentObject.objectType = stringToObjectType(msg);
 800288c:	f507 5348 	add.w	r3, r7, #12800	; 0x3200
 8002890:	f103 0320 	add.w	r3, r3, #32
 8002894:	4618      	mov	r0, r3
 8002896:	f000 ffe5 	bl	8003864 <stringToObjectType>
 800289a:	4603      	mov	r3, r0
 800289c:	461a      	mov	r2, r3
 800289e:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 80028a2:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 80028a6:	701a      	strb	r2, [r3, #0]
			if(currentObject.objectType == none){
 80028a8:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 80028ac:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d110      	bne.n	80028d8 <configScreensFromUart+0x464>
				printf("[cl] Object type %s not recognized. \n\r", msg);
 80028b6:	f507 5348 	add.w	r3, r7, #12800	; 0x3200
 80028ba:	f103 0320 	add.w	r3, r3, #32
 80028be:	4619      	mov	r1, r3
 80028c0:	4804      	ldr	r0, [pc, #16]	; (80028d4 <configScreensFromUart+0x460>)
 80028c2:	f007 fb59 	bl	8009f78 <iprintf>
				return 4;
 80028c6:	2304      	movs	r3, #4
 80028c8:	f000 bc11 	b.w	80030ee <configScreensFromUart+0xc7a>
 80028cc:	20002154 	.word	0x20002154
 80028d0:	0800b53c 	.word	0x0800b53c
 80028d4:	0800b570 	.word	0x0800b570
			UART_READ_STRING();
 80028d8:	f507 5048 	add.w	r0, r7, #12800	; 0x3200
 80028dc:	f100 0020 	add.w	r0, r0, #32
 80028e0:	230d      	movs	r3, #13
 80028e2:	2280      	movs	r2, #128	; 0x80
 80028e4:	49cf      	ldr	r1, [pc, #828]	; (8002c24 <configScreensFromUart+0x7b0>)
 80028e6:	f003 f97f 	bl	8005be8 <read_usart_message>
 80028ea:	4603      	mov	r3, r0
 80028ec:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 80028f0:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 80028f4:	6013      	str	r3, [r2, #0]
 80028f6:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 80028fa:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d0e9      	beq.n	80028d8 <configScreensFromUart+0x464>
 8002904:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002908:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	3b01      	subs	r3, #1
 8002910:	f503 534b 	add.w	r3, r3, #12992	; 0x32c0
 8002914:	f103 0308 	add.w	r3, r3, #8
 8002918:	443b      	add	r3, r7
 800291a:	2200      	movs	r2, #0
 800291c:	f803 2ca8 	strb.w	r2, [r3, #-168]
			currentObject.objectId = (uint16_t) atoi(msg);
 8002920:	f507 5348 	add.w	r3, r7, #12800	; 0x3200
 8002924:	f103 0320 	add.w	r3, r3, #32
 8002928:	4618      	mov	r0, r3
 800292a:	f007 fae1 	bl	8009ef0 <atoi>
 800292e:	4603      	mov	r3, r0
 8002930:	b29a      	uxth	r2, r3
 8002932:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8002936:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 800293a:	805a      	strh	r2, [r3, #2]
			UART_READ_STRING();
 800293c:	f507 5048 	add.w	r0, r7, #12800	; 0x3200
 8002940:	f100 0020 	add.w	r0, r0, #32
 8002944:	230d      	movs	r3, #13
 8002946:	2280      	movs	r2, #128	; 0x80
 8002948:	49b6      	ldr	r1, [pc, #728]	; (8002c24 <configScreensFromUart+0x7b0>)
 800294a:	f003 f94d 	bl	8005be8 <read_usart_message>
 800294e:	4603      	mov	r3, r0
 8002950:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002954:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8002958:	6013      	str	r3, [r2, #0]
 800295a:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 800295e:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d0e9      	beq.n	800293c <configScreensFromUart+0x4c8>
 8002968:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 800296c:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	3b01      	subs	r3, #1
 8002974:	f503 534b 	add.w	r3, r3, #12992	; 0x32c0
 8002978:	f103 0308 	add.w	r3, r3, #8
 800297c:	443b      	add	r3, r7
 800297e:	2200      	movs	r2, #0
 8002980:	f803 2ca8 	strb.w	r2, [r3, #-168]
			currentObject.xstart = (uint16_t) atoi(msg);
 8002984:	f507 5348 	add.w	r3, r7, #12800	; 0x3200
 8002988:	f103 0320 	add.w	r3, r3, #32
 800298c:	4618      	mov	r0, r3
 800298e:	f007 faaf 	bl	8009ef0 <atoi>
 8002992:	4603      	mov	r3, r0
 8002994:	b29a      	uxth	r2, r3
 8002996:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 800299a:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 800299e:	809a      	strh	r2, [r3, #4]
			UART_READ_STRING();
 80029a0:	f507 5048 	add.w	r0, r7, #12800	; 0x3200
 80029a4:	f100 0020 	add.w	r0, r0, #32
 80029a8:	230d      	movs	r3, #13
 80029aa:	2280      	movs	r2, #128	; 0x80
 80029ac:	499d      	ldr	r1, [pc, #628]	; (8002c24 <configScreensFromUart+0x7b0>)
 80029ae:	f003 f91b 	bl	8005be8 <read_usart_message>
 80029b2:	4603      	mov	r3, r0
 80029b4:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 80029b8:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 80029bc:	6013      	str	r3, [r2, #0]
 80029be:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 80029c2:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d0e9      	beq.n	80029a0 <configScreensFromUart+0x52c>
 80029cc:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 80029d0:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	3b01      	subs	r3, #1
 80029d8:	f503 534b 	add.w	r3, r3, #12992	; 0x32c0
 80029dc:	f103 0308 	add.w	r3, r3, #8
 80029e0:	443b      	add	r3, r7
 80029e2:	2200      	movs	r2, #0
 80029e4:	f803 2ca8 	strb.w	r2, [r3, #-168]
			currentObject.ystart = (uint16_t) atoi(msg);
 80029e8:	f507 5348 	add.w	r3, r7, #12800	; 0x3200
 80029ec:	f103 0320 	add.w	r3, r3, #32
 80029f0:	4618      	mov	r0, r3
 80029f2:	f007 fa7d 	bl	8009ef0 <atoi>
 80029f6:	4603      	mov	r3, r0
 80029f8:	b29a      	uxth	r2, r3
 80029fa:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 80029fe:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8002a02:	80da      	strh	r2, [r3, #6]
			UART_READ_STRING();
 8002a04:	f507 5048 	add.w	r0, r7, #12800	; 0x3200
 8002a08:	f100 0020 	add.w	r0, r0, #32
 8002a0c:	230d      	movs	r3, #13
 8002a0e:	2280      	movs	r2, #128	; 0x80
 8002a10:	4984      	ldr	r1, [pc, #528]	; (8002c24 <configScreensFromUart+0x7b0>)
 8002a12:	f003 f8e9 	bl	8005be8 <read_usart_message>
 8002a16:	4603      	mov	r3, r0
 8002a18:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002a1c:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8002a20:	6013      	str	r3, [r2, #0]
 8002a22:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002a26:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d0e9      	beq.n	8002a04 <configScreensFromUart+0x590>
 8002a30:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002a34:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	f503 534b 	add.w	r3, r3, #12992	; 0x32c0
 8002a40:	f103 0308 	add.w	r3, r3, #8
 8002a44:	443b      	add	r3, r7
 8002a46:	2200      	movs	r2, #0
 8002a48:	f803 2ca8 	strb.w	r2, [r3, #-168]
			currentObject.xend = (uint16_t) atoi(msg);
 8002a4c:	f507 5348 	add.w	r3, r7, #12800	; 0x3200
 8002a50:	f103 0320 	add.w	r3, r3, #32
 8002a54:	4618      	mov	r0, r3
 8002a56:	f007 fa4b 	bl	8009ef0 <atoi>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	b29a      	uxth	r2, r3
 8002a5e:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8002a62:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8002a66:	811a      	strh	r2, [r3, #8]
			UART_READ_STRING();
 8002a68:	f507 5048 	add.w	r0, r7, #12800	; 0x3200
 8002a6c:	f100 0020 	add.w	r0, r0, #32
 8002a70:	230d      	movs	r3, #13
 8002a72:	2280      	movs	r2, #128	; 0x80
 8002a74:	496b      	ldr	r1, [pc, #428]	; (8002c24 <configScreensFromUart+0x7b0>)
 8002a76:	f003 f8b7 	bl	8005be8 <read_usart_message>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002a80:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8002a84:	6013      	str	r3, [r2, #0]
 8002a86:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002a8a:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d0e9      	beq.n	8002a68 <configScreensFromUart+0x5f4>
 8002a94:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002a98:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	f503 534b 	add.w	r3, r3, #12992	; 0x32c0
 8002aa4:	f103 0308 	add.w	r3, r3, #8
 8002aa8:	443b      	add	r3, r7
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f803 2ca8 	strb.w	r2, [r3, #-168]
			currentObject.yend = (uint16_t) atoi(msg);
 8002ab0:	f507 5348 	add.w	r3, r7, #12800	; 0x3200
 8002ab4:	f103 0320 	add.w	r3, r3, #32
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f007 fa19 	bl	8009ef0 <atoi>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	b29a      	uxth	r2, r3
 8002ac2:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8002ac6:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8002aca:	815a      	strh	r2, [r3, #10]
			UART_READ_STRING();
 8002acc:	f507 5048 	add.w	r0, r7, #12800	; 0x3200
 8002ad0:	f100 0020 	add.w	r0, r0, #32
 8002ad4:	230d      	movs	r3, #13
 8002ad6:	2280      	movs	r2, #128	; 0x80
 8002ad8:	4952      	ldr	r1, [pc, #328]	; (8002c24 <configScreensFromUart+0x7b0>)
 8002ada:	f003 f885 	bl	8005be8 <read_usart_message>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002ae4:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8002ae8:	6013      	str	r3, [r2, #0]
 8002aea:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002aee:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d0e9      	beq.n	8002acc <configScreensFromUart+0x658>
 8002af8:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002afc:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	3b01      	subs	r3, #1
 8002b04:	f503 534b 	add.w	r3, r3, #12992	; 0x32c0
 8002b08:	f103 0308 	add.w	r3, r3, #8
 8002b0c:	443b      	add	r3, r7
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f803 2ca8 	strb.w	r2, [r3, #-168]
			currentObject.dataLen = (uint16_t) atoi(msg);
 8002b14:	f507 5348 	add.w	r3, r7, #12800	; 0x3200
 8002b18:	f103 0320 	add.w	r3, r3, #32
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f007 f9e7 	bl	8009ef0 <atoi>
 8002b22:	4603      	mov	r3, r0
 8002b24:	b29a      	uxth	r2, r3
 8002b26:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8002b2a:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8002b2e:	819a      	strh	r2, [r3, #12]
			PRINT_OBJECT_HEADER(currentObject);
 8002b30:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8002b34:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	461c      	mov	r4, r3
 8002b3c:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8002b40:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8002b44:	885b      	ldrh	r3, [r3, #2]
 8002b46:	461d      	mov	r5, r3
 8002b48:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8002b4c:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8002b50:	889b      	ldrh	r3, [r3, #4]
 8002b52:	461e      	mov	r6, r3
 8002b54:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8002b58:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8002b5c:	88db      	ldrh	r3, [r3, #6]
 8002b5e:	461a      	mov	r2, r3
 8002b60:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8002b64:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8002b68:	891b      	ldrh	r3, [r3, #8]
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8002b70:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8002b74:	895b      	ldrh	r3, [r3, #10]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8002b7c:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8002b80:	899b      	ldrh	r3, [r3, #12]
 8002b82:	9303      	str	r3, [sp, #12]
 8002b84:	9002      	str	r0, [sp, #8]
 8002b86:	9101      	str	r1, [sp, #4]
 8002b88:	9200      	str	r2, [sp, #0]
 8002b8a:	4633      	mov	r3, r6
 8002b8c:	462a      	mov	r2, r5
 8002b8e:	4621      	mov	r1, r4
 8002b90:	4825      	ldr	r0, [pc, #148]	; (8002c28 <configScreensFromUart+0x7b4>)
 8002b92:	f007 f9f1 	bl	8009f78 <iprintf>
			if(currentObject.dataLen > MAX_DATA_SIZE){
 8002b96:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8002b9a:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8002b9e:	899b      	ldrh	r3, [r3, #12]
 8002ba0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ba4:	d90c      	bls.n	8002bc0 <configScreensFromUart+0x74c>
				printf("[cl] Object (id=%d) data exceeds MAX_DATA_SIZE = %d.\n\r", currentObject.objectId, MAX_DATA_SIZE);
 8002ba6:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8002baa:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8002bae:	885b      	ldrh	r3, [r3, #2]
 8002bb0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	481d      	ldr	r0, [pc, #116]	; (8002c2c <configScreensFromUart+0x7b8>)
 8002bb8:	f007 f9de 	bl	8009f78 <iprintf>
				return 5;
 8002bbc:	2305      	movs	r3, #5
 8002bbe:	e23a      	b.n	8003036 <configScreensFromUart+0xbc2>
			int spaceLeft = SECTOR_SIZE - sectorBufferIndex;
 8002bc0:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002bc4:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8002bce:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002bd2:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8002bd6:	6013      	str	r3, [r2, #0]
			if(spaceLeft >= sizeof(currentObject)){
 8002bd8:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002bdc:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2b0d      	cmp	r3, #13
 8002be4:	d924      	bls.n	8002c30 <configScreensFromUart+0x7bc>
				memcpy(sectorBuffer+sectorBufferIndex, (uint8_t *) &currentObject, sizeof(currentObject));
 8002be6:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002bea:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8002bf4:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8002bf8:	3b14      	subs	r3, #20
 8002bfa:	1898      	adds	r0, r3, r2
 8002bfc:	f107 0308 	add.w	r3, r7, #8
 8002c00:	3b08      	subs	r3, #8
 8002c02:	220e      	movs	r2, #14
 8002c04:	4619      	mov	r1, r3
 8002c06:	f007 f9a1 	bl	8009f4c <memcpy>
				sectorBufferIndex += sizeof(currentObject);
 8002c0a:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002c0e:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	330e      	adds	r3, #14
 8002c16:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002c1a:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8002c1e:	6013      	str	r3, [r2, #0]
 8002c20:	e093      	b.n	8002d4a <configScreensFromUart+0x8d6>
 8002c22:	bf00      	nop
 8002c24:	20002154 	.word	0x20002154
 8002c28:	0800b598 	.word	0x0800b598
 8002c2c:	0800b5d4 	.word	0x0800b5d4
				memcpy(sectorBuffer+sectorBufferIndex, (uint8_t *) &currentObject, spaceLeft);
 8002c30:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002c34:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8002c3e:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8002c42:	3b14      	subs	r3, #20
 8002c44:	1898      	adds	r0, r3, r2
 8002c46:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002c4a:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	f107 0308 	add.w	r3, r7, #8
 8002c54:	3b08      	subs	r3, #8
 8002c56:	4619      	mov	r1, r3
 8002c58:	f007 f978 	bl	8009f4c <memcpy>
				ext_flash_write_multipage(currentSector*SECTOR_SIZE, sectorBuffer, SECTOR_SIZE);
 8002c5c:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8002c60:	f103 0304 	add.w	r3, r3, #4
 8002c64:	881b      	ldrh	r3, [r3, #0]
 8002c66:	031b      	lsls	r3, r3, #12
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8002c6e:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8002c72:	3b14      	subs	r3, #20
 8002c74:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c78:	4619      	mov	r1, r3
 8002c7a:	f000 ff4d 	bl	8003b18 <ext_flash_write_multipage>
				currentSector += 1;
 8002c7e:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8002c82:	f103 0304 	add.w	r3, r3, #4
 8002c86:	881b      	ldrh	r3, [r3, #0]
 8002c88:	3301      	adds	r3, #1
 8002c8a:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 8002c8e:	f102 0204 	add.w	r2, r2, #4
 8002c92:	8013      	strh	r3, [r2, #0]
				if(currentSector > MAX_SCREEN_SECTOR){
 8002c94:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8002c98:	f103 0304 	add.w	r3, r3, #4
 8002c9c:	881b      	ldrh	r3, [r3, #0]
 8002c9e:	2bc7      	cmp	r3, #199	; 0xc7
 8002ca0:	d90a      	bls.n	8002cb8 <configScreensFromUart+0x844>
					printf("[cl] Screen memory size exceeded trying to save header of object id %d\n\r", currentObject.objectId);
 8002ca2:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8002ca6:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8002caa:	885b      	ldrh	r3, [r3, #2]
 8002cac:	4619      	mov	r1, r3
 8002cae:	48cc      	ldr	r0, [pc, #816]	; (8002fe0 <configScreensFromUart+0xb6c>)
 8002cb0:	f007 f962 	bl	8009f78 <iprintf>
					return 6;
 8002cb4:	2306      	movs	r3, #6
 8002cb6:	e1be      	b.n	8003036 <configScreensFromUart+0xbc2>
				ext_flash_erase_4kB(currentSector*SECTOR_SIZE);
 8002cb8:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8002cbc:	f103 0304 	add.w	r3, r3, #4
 8002cc0:	881b      	ldrh	r3, [r3, #0]
 8002cc2:	031b      	lsls	r3, r3, #12
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f000 fe0d 	bl	80038e4 <ext_flash_erase_4kB>
				memset(sectorBuffer, 0, SECTOR_SIZE);
 8002cca:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8002cce:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8002cd2:	3b14      	subs	r3, #20
 8002cd4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002cd8:	2100      	movs	r1, #0
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f007 f944 	bl	8009f68 <memset>
				sectorBufferIndex = 0;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002ce6:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8002cea:	6013      	str	r3, [r2, #0]
				memcpy(sectorBuffer+sectorBufferIndex, ((uint8_t *) &currentObject)+spaceLeft, (sizeof(currentObject) - spaceLeft));
 8002cec:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002cf0:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8002cfa:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8002cfe:	3b14      	subs	r3, #20
 8002d00:	1898      	adds	r0, r3, r2
 8002d02:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002d06:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	f107 0308 	add.w	r3, r7, #8
 8002d10:	3b08      	subs	r3, #8
 8002d12:	1899      	adds	r1, r3, r2
 8002d14:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002d18:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f1c3 030e 	rsb	r3, r3, #14
 8002d22:	461a      	mov	r2, r3
 8002d24:	f007 f912 	bl	8009f4c <memcpy>
				sectorBufferIndex += (sizeof(currentObject) - spaceLeft);
 8002d28:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002d2c:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002d36:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	330e      	adds	r3, #14
 8002d40:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002d44:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8002d48:	6013      	str	r3, [r2, #0]
			uint16_t objectDataBytesLeft = currentObject.dataLen;
 8002d4a:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8002d4e:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8002d52:	899b      	ldrh	r3, [r3, #12]
 8002d54:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002d58:	f102 0236 	add.w	r2, r2, #54	; 0x36
 8002d5c:	8013      	strh	r3, [r2, #0]
			dataBufferIndex = 0;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002d64:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8002d68:	6013      	str	r3, [r2, #0]
			while(objectDataBytesLeft > 0){
 8002d6a:	e062      	b.n	8002e32 <configScreensFromUart+0x9be>
				do{count = read_usart_message(msg, &huart1, 2, NEWLINE);} while (count==0);
 8002d6c:	f507 5048 	add.w	r0, r7, #12800	; 0x3200
 8002d70:	f100 0020 	add.w	r0, r0, #32
 8002d74:	230d      	movs	r3, #13
 8002d76:	2202      	movs	r2, #2
 8002d78:	499a      	ldr	r1, [pc, #616]	; (8002fe4 <configScreensFromUart+0xb70>)
 8002d7a:	f002 ff35 	bl	8005be8 <read_usart_message>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002d84:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8002d88:	6013      	str	r3, [r2, #0]
 8002d8a:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002d8e:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d0e9      	beq.n	8002d6c <configScreensFromUart+0x8f8>
				if(count!=2){
 8002d98:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002d9c:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d00a      	beq.n	8002dbc <configScreensFromUart+0x948>
					printf("[cl] Error reading hex data of object with id %d \n\r", currentObject.objectId);
 8002da6:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8002daa:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8002dae:	885b      	ldrh	r3, [r3, #2]
 8002db0:	4619      	mov	r1, r3
 8002db2:	488d      	ldr	r0, [pc, #564]	; (8002fe8 <configScreensFromUart+0xb74>)
 8002db4:	f007 f8e0 	bl	8009f78 <iprintf>
					return 7;
 8002db8:	2307      	movs	r3, #7
 8002dba:	e13c      	b.n	8003036 <configScreensFromUart+0xbc2>
				msg[2] = 0;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	f507 5248 	add.w	r2, r7, #12800	; 0x3200
 8002dc2:	f102 0222 	add.w	r2, r2, #34	; 0x22
 8002dc6:	7013      	strb	r3, [r2, #0]
				uint8_t deHexedByte = (uint8_t) strtol(msg, NULL, 16);
 8002dc8:	f507 5348 	add.w	r3, r7, #12800	; 0x3200
 8002dcc:	f103 0320 	add.w	r3, r3, #32
 8002dd0:	2210      	movs	r2, #16
 8002dd2:	2100      	movs	r1, #0
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f007 f971 	bl	800a0bc <strtol>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002de0:	f102 0223 	add.w	r2, r2, #35	; 0x23
 8002de4:	7013      	strb	r3, [r2, #0]
				dataBuffer[dataBufferIndex] = deHexedByte;
 8002de6:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8002dea:	f5a3 722d 	sub.w	r2, r3, #692	; 0x2b4
 8002dee:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002df2:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4413      	add	r3, r2
 8002dfa:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002dfe:	f102 0223 	add.w	r2, r2, #35	; 0x23
 8002e02:	7812      	ldrb	r2, [r2, #0]
 8002e04:	701a      	strb	r2, [r3, #0]
				dataBufferIndex++;
 8002e06:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002e0a:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	3301      	adds	r3, #1
 8002e12:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002e16:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8002e1a:	6013      	str	r3, [r2, #0]
				objectDataBytesLeft--;
 8002e1c:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002e20:	f103 0336 	add.w	r3, r3, #54	; 0x36
 8002e24:	881b      	ldrh	r3, [r3, #0]
 8002e26:	3b01      	subs	r3, #1
 8002e28:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002e2c:	f102 0236 	add.w	r2, r2, #54	; 0x36
 8002e30:	8013      	strh	r3, [r2, #0]
			while(objectDataBytesLeft > 0){
 8002e32:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002e36:	f103 0336 	add.w	r3, r3, #54	; 0x36
 8002e3a:	881b      	ldrh	r3, [r3, #0]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d195      	bne.n	8002d6c <configScreensFromUart+0x8f8>
			read_usart_message(msg, &huart1, 2, NEWLINE); //to remove newline character from uart input buffer
 8002e40:	f507 5048 	add.w	r0, r7, #12800	; 0x3200
 8002e44:	f100 0020 	add.w	r0, r0, #32
 8002e48:	230d      	movs	r3, #13
 8002e4a:	2202      	movs	r2, #2
 8002e4c:	4965      	ldr	r1, [pc, #404]	; (8002fe4 <configScreensFromUart+0xb70>)
 8002e4e:	f002 fecb 	bl	8005be8 <read_usart_message>
			objectDataBytesLeft = currentObject.dataLen;
 8002e52:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8002e56:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8002e5a:	899b      	ldrh	r3, [r3, #12]
 8002e5c:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002e60:	f102 0236 	add.w	r2, r2, #54	; 0x36
 8002e64:	8013      	strh	r3, [r2, #0]
			dataBufferIndex = 0;
 8002e66:	2300      	movs	r3, #0
 8002e68:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002e6c:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8002e70:	6013      	str	r3, [r2, #0]
			while(objectDataBytesLeft > 0){
 8002e72:	e0d7      	b.n	8003024 <configScreensFromUart+0xbb0>
				spaceLeft = SECTOR_SIZE - sectorBufferIndex;
 8002e74:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002e78:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8002e82:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002e86:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8002e8a:	6013      	str	r3, [r2, #0]
				if(spaceLeft >= objectDataBytesLeft){
 8002e8c:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002e90:	f103 0336 	add.w	r3, r3, #54	; 0x36
 8002e94:	881b      	ldrh	r3, [r3, #0]
 8002e96:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002e9a:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8002e9e:	6812      	ldr	r2, [r2, #0]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	db32      	blt.n	8002f0a <configScreensFromUart+0xa96>
					memcpy(sectorBuffer+sectorBufferIndex, dataBuffer + dataBufferIndex, objectDataBytesLeft);
 8002ea4:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002ea8:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8002eb2:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8002eb6:	3b14      	subs	r3, #20
 8002eb8:	1898      	adds	r0, r3, r2
 8002eba:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002ebe:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002ec8:	3b34      	subs	r3, #52	; 0x34
 8002eca:	4413      	add	r3, r2
 8002ecc:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002ed0:	f102 0236 	add.w	r2, r2, #54	; 0x36
 8002ed4:	8812      	ldrh	r2, [r2, #0]
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	f007 f838 	bl	8009f4c <memcpy>
					sectorBufferIndex += objectDataBytesLeft;
 8002edc:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002ee0:	f103 0336 	add.w	r3, r3, #54	; 0x36
 8002ee4:	881b      	ldrh	r3, [r3, #0]
 8002ee6:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002eea:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8002eee:	6812      	ldr	r2, [r2, #0]
 8002ef0:	4413      	add	r3, r2
 8002ef2:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002ef6:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8002efa:	6013      	str	r3, [r2, #0]
					objectDataBytesLeft = 0;
 8002efc:	2300      	movs	r3, #0
 8002efe:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002f02:	f102 0236 	add.w	r2, r2, #54	; 0x36
 8002f06:	8013      	strh	r3, [r2, #0]
 8002f08:	e08c      	b.n	8003024 <configScreensFromUart+0xbb0>
					memcpy(sectorBuffer+sectorBufferIndex, dataBuffer + dataBufferIndex, spaceLeft);
 8002f0a:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002f0e:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8002f18:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8002f1c:	3b14      	subs	r3, #20
 8002f1e:	1898      	adds	r0, r3, r2
 8002f20:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002f24:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002f2e:	3b34      	subs	r3, #52	; 0x34
 8002f30:	4413      	add	r3, r2
 8002f32:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002f36:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8002f3a:	6812      	ldr	r2, [r2, #0]
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	f007 f805 	bl	8009f4c <memcpy>
					dataBufferIndex += spaceLeft;
 8002f42:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002f46:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002f50:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4413      	add	r3, r2
 8002f58:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002f5c:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8002f60:	6013      	str	r3, [r2, #0]
					objectDataBytesLeft -= spaceLeft;
 8002f62:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002f66:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002f72:	f102 0236 	add.w	r2, r2, #54	; 0x36
 8002f76:	8812      	ldrh	r2, [r2, #0]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002f7e:	f102 0236 	add.w	r2, r2, #54	; 0x36
 8002f82:	8013      	strh	r3, [r2, #0]
					ext_flash_write_multipage(currentSector*SECTOR_SIZE, sectorBuffer, SECTOR_SIZE);
 8002f84:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8002f88:	f103 0304 	add.w	r3, r3, #4
 8002f8c:	881b      	ldrh	r3, [r3, #0]
 8002f8e:	031b      	lsls	r3, r3, #12
 8002f90:	4618      	mov	r0, r3
 8002f92:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8002f96:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8002f9a:	3b14      	subs	r3, #20
 8002f9c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	f000 fdb9 	bl	8003b18 <ext_flash_write_multipage>
					currentSector += 1;
 8002fa6:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8002faa:	f103 0304 	add.w	r3, r3, #4
 8002fae:	881b      	ldrh	r3, [r3, #0]
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 8002fb6:	f102 0204 	add.w	r2, r2, #4
 8002fba:	8013      	strh	r3, [r2, #0]
					if(currentSector > MAX_SCREEN_SECTOR){
 8002fbc:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8002fc0:	f103 0304 	add.w	r3, r3, #4
 8002fc4:	881b      	ldrh	r3, [r3, #0]
 8002fc6:	2bc7      	cmp	r3, #199	; 0xc7
 8002fc8:	d912      	bls.n	8002ff0 <configScreensFromUart+0xb7c>
						printf("[cl] Screen memory size exceeded while trying to save data of object id %d\n\r", currentObject.objectId);
 8002fca:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8002fce:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8002fd2:	885b      	ldrh	r3, [r3, #2]
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	4805      	ldr	r0, [pc, #20]	; (8002fec <configScreensFromUart+0xb78>)
 8002fd8:	f006 ffce 	bl	8009f78 <iprintf>
						return 8;
 8002fdc:	2308      	movs	r3, #8
 8002fde:	e02a      	b.n	8003036 <configScreensFromUart+0xbc2>
 8002fe0:	0800b60c 	.word	0x0800b60c
 8002fe4:	20002154 	.word	0x20002154
 8002fe8:	0800b658 	.word	0x0800b658
 8002fec:	0800b68c 	.word	0x0800b68c
					ext_flash_erase_4kB(currentSector*SECTOR_SIZE);
 8002ff0:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8002ff4:	f103 0304 	add.w	r3, r3, #4
 8002ff8:	881b      	ldrh	r3, [r3, #0]
 8002ffa:	031b      	lsls	r3, r3, #12
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f000 fc71 	bl	80038e4 <ext_flash_erase_4kB>
					memset(sectorBuffer, 0, SECTOR_SIZE);
 8003002:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8003006:	f103 0328 	add.w	r3, r3, #40	; 0x28
 800300a:	3b14      	subs	r3, #20
 800300c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003010:	2100      	movs	r1, #0
 8003012:	4618      	mov	r0, r3
 8003014:	f006 ffa8 	bl	8009f68 <memset>
					sectorBufferIndex = 0;
 8003018:	2300      	movs	r3, #0
 800301a:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 800301e:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8003022:	6013      	str	r3, [r2, #0]
			while(objectDataBytesLeft > 0){
 8003024:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8003028:	f103 0336 	add.w	r3, r3, #54	; 0x36
 800302c:	881b      	ldrh	r3, [r3, #0]
 800302e:	2b00      	cmp	r3, #0
 8003030:	f47f af20 	bne.w	8002e74 <configScreensFromUart+0xa00>
 8003034:	e000      	b.n	8003038 <configScreensFromUart+0xbc4>
			return 3;
 8003036:	e05a      	b.n	80030ee <configScreensFromUart+0xc7a>
		while(currentScreenObjectsLeft > 0){
 8003038:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 800303c:	f103 0302 	add.w	r3, r3, #2
 8003040:	881b      	ldrh	r3, [r3, #0]
 8003042:	2b00      	cmp	r3, #0
 8003044:	f47f abf3 	bne.w	800282e <configScreensFromUart+0x3ba>
		ext_flash_write_multipage(currentSector*SECTOR_SIZE, sectorBuffer, sectorBufferIndex);
 8003048:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 800304c:	f103 0304 	add.w	r3, r3, #4
 8003050:	881b      	ldrh	r3, [r3, #0]
 8003052:	031b      	lsls	r3, r3, #12
 8003054:	4618      	mov	r0, r3
 8003056:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 800305a:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8003064:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8003068:	3b14      	subs	r3, #20
 800306a:	4619      	mov	r1, r3
 800306c:	f000 fd54 	bl	8003b18 <ext_flash_write_multipage>
	while(1){
 8003070:	f7ff ba9c 	b.w	80025ac <configScreensFromUart+0x138>
		printf("%x ", sectorBuffer[j]);
 8003074:	f507 530b 	add.w	r3, r7, #8896	; 0x22c0
 8003078:	f103 0308 	add.w	r3, r3, #8
 800307c:	f5a3 722d 	sub.w	r2, r3, #692	; 0x2b4
 8003080:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8003084:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4413      	add	r3, r2
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	4619      	mov	r1, r3
 8003090:	481a      	ldr	r0, [pc, #104]	; (80030fc <configScreensFromUart+0xc88>)
 8003092:	f006 ff71 	bl	8009f78 <iprintf>
	for(j=0; j<sizeof(gconf); j++){
 8003096:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 800309a:	f103 0330 	add.w	r3, r3, #48	; 0x30
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	3301      	adds	r3, #1
 80030a2:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 80030a6:	f102 0230 	add.w	r2, r2, #48	; 0x30
 80030aa:	6013      	str	r3, [r2, #0]
 80030ac:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 80030b0:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f240 2201 	movw	r2, #513	; 0x201
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d9da      	bls.n	8003074 <configScreensFromUart+0xc00>
	}

	ext_flash_erase_4kB(GENERAL_CONFIG_SECTOR*SECTOR_SIZE);
 80030be:	2000      	movs	r0, #0
 80030c0:	f000 fc10 	bl	80038e4 <ext_flash_erase_4kB>
	ext_flash_write_multipage(GENERAL_CONFIG_SECTOR*SECTOR_SIZE, sectorBuffer, sizeof(gconf));
 80030c4:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80030c8:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80030cc:	3b14      	subs	r3, #20
 80030ce:	f240 2202 	movw	r2, #514	; 0x202
 80030d2:	4619      	mov	r1, r3
 80030d4:	2000      	movs	r0, #0
 80030d6:	f000 fd1f 	bl	8003b18 <ext_flash_write_multipage>
	printf("[cl] Config from UART finished. Furthest sector written to: %d \n\r", currentSector);
 80030da:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 80030de:	f103 0304 	add.w	r3, r3, #4
 80030e2:	881b      	ldrh	r3, [r3, #0]
 80030e4:	4619      	mov	r1, r3
 80030e6:	4806      	ldr	r0, [pc, #24]	; (8003100 <configScreensFromUart+0xc8c>)
 80030e8:	f006 ff46 	bl	8009f78 <iprintf>

	return 0;
 80030ec:	2300      	movs	r3, #0

}
 80030ee:	4618      	mov	r0, r3
 80030f0:	f507 574b 	add.w	r7, r7, #12992	; 0x32c0
 80030f4:	370c      	adds	r7, #12
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030fa:	bf00      	nop
 80030fc:	0800b6dc 	.word	0x0800b6dc
 8003100:	0800b6e0 	.word	0x0800b6e0

08003104 <readGeneralConfig>:

/*
 * Reads the general configuration struct from external flash into variable pointed at by @destination.
 */
void readGeneralConfig(struct generalConfig *destination){
 8003104:	b580      	push	{r7, lr}
 8003106:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 800310a:	af00      	add	r7, sp, #0
 800310c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8003110:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8003114:	6018      	str	r0, [r3, #0]
	uint8_t buffer[sizeof(struct generalConfig)];
	ext_flash_read(GENERAL_CONFIG_SECTOR*SECTOR_SIZE, buffer, sizeof(struct generalConfig));
 8003116:	f107 030c 	add.w	r3, r7, #12
 800311a:	f240 2202 	movw	r2, #514	; 0x202
 800311e:	4619      	mov	r1, r3
 8003120:	2000      	movs	r0, #0
 8003122:	f000 fc2e 	bl	8003982 <ext_flash_read>
	*destination = *((struct generalConfig *) buffer);
 8003126:	f107 020c 	add.w	r2, r7, #12
 800312a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800312e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4618      	mov	r0, r3
 8003136:	4611      	mov	r1, r2
 8003138:	f240 2302 	movw	r3, #514	; 0x202
 800313c:	461a      	mov	r2, r3
 800313e:	f006 ff05 	bl	8009f4c <memcpy>
	/*int i;
	for(i = 0; i<sizeof(struct generalConfig); i++){
		printf("%x,", buffer[i]);
	}
	printf("\n\r");*/
}
 8003142:	bf00      	nop
 8003144:	f507 7704 	add.w	r7, r7, #528	; 0x210
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <readBitmapList>:

/*
 * Reads the list of bitmaps struct from external flash into variable pointed at by @destination.
 */
void readBitmapList(struct bitmapList *destination){
 800314c:	b580      	push	{r7, lr}
 800314e:	f5ad 6d01 	sub.w	sp, sp, #2064	; 0x810
 8003152:	af00      	add	r7, sp, #0
 8003154:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8003158:	f6a3 030c 	subw	r3, r3, #2060	; 0x80c
 800315c:	6018      	str	r0, [r3, #0]
	uint8_t buffer[sizeof(struct bitmapList)];
	ext_flash_read(BITMAP_LIST_SECTOR*SECTOR_SIZE, buffer, sizeof(struct bitmapList));
 800315e:	f107 030c 	add.w	r3, r7, #12
 8003162:	f640 0204 	movw	r2, #2052	; 0x804
 8003166:	4619      	mov	r1, r3
 8003168:	f44f 2048 	mov.w	r0, #819200	; 0xc8000
 800316c:	f000 fc09 	bl	8003982 <ext_flash_read>
	*destination = *((struct bitmapList *) buffer);
 8003170:	f107 020c 	add.w	r2, r7, #12
 8003174:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8003178:	f6a3 030c 	subw	r3, r3, #2060	; 0x80c
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4618      	mov	r0, r3
 8003180:	4611      	mov	r1, r2
 8003182:	f640 0304 	movw	r3, #2052	; 0x804
 8003186:	461a      	mov	r2, r3
 8003188:	f006 fee0 	bl	8009f4c <memcpy>
}
 800318c:	bf00      	nop
 800318e:	f507 6701 	add.w	r7, r7, #2064	; 0x810
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
	...

08003198 <openScreen>:
 *
 *	@returns: number of objects read. If maxData and maxObjects are sufficient, this will be the same as @screenHeader.objectCount. If @maxObjects limit was reached,
 *	then return value will be equal to @maxObjects. If @maxData limit was reached, then return value will be lower than @maxObjects.
 *
 */
int openScreen(uint16_t screenSector, struct screen *screenHeader, struct object *objectArray, uint8_t *dataArray, uint8_t **dataPointerArray, uint16_t maxData, uint16_t maxObjects){
 8003198:	b590      	push	{r4, r7, lr}
 800319a:	b08d      	sub	sp, #52	; 0x34
 800319c:	af00      	add	r7, sp, #0
 800319e:	60b9      	str	r1, [r7, #8]
 80031a0:	607a      	str	r2, [r7, #4]
 80031a2:	603b      	str	r3, [r7, #0]
 80031a4:	4603      	mov	r3, r0
 80031a6:	81fb      	strh	r3, [r7, #14]
	uint32_t flashAddr = screenSector*SECTOR_SIZE;
 80031a8:	89fb      	ldrh	r3, [r7, #14]
 80031aa:	031b      	lsls	r3, r3, #12
 80031ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint8_t screenHeaderBuffer[sizeof(struct screen)];
	ext_flash_read(flashAddr, screenHeaderBuffer, sizeof(struct screen));
 80031ae:	f107 0320 	add.w	r3, r7, #32
 80031b2:	2204      	movs	r2, #4
 80031b4:	4619      	mov	r1, r3
 80031b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80031b8:	f000 fbe3 	bl	8003982 <ext_flash_read>
	flashAddr += sizeof(struct screen);
 80031bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031be:	3304      	adds	r3, #4
 80031c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	*screenHeader = *((struct screen *) screenHeaderBuffer);
 80031c2:	f107 0320 	add.w	r3, r7, #32
 80031c6:	68ba      	ldr	r2, [r7, #8]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	6013      	str	r3, [r2, #0]

	uint16_t objectsToRead = (*screenHeader).objectCount;
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	885b      	ldrh	r3, [r3, #2]
 80031d0:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint16_t objectIndex = 0;
 80031d2:	2300      	movs	r3, #0
 80031d4:	853b      	strh	r3, [r7, #40]	; 0x28
	uint16_t dataIndex = 0;
 80031d6:	2300      	movs	r3, #0
 80031d8:	84fb      	strh	r3, [r7, #38]	; 0x26
	if(objectsToRead > maxObjects){
 80031da:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80031dc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d964      	bls.n	80032ae <openScreen+0x116>
		printf("[cl] Limiting objects to be read from screen to maxObjects! (down to %d from %d)", maxObjects, objectsToRead);
 80031e4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80031e8:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80031ea:	4619      	mov	r1, r3
 80031ec:	4834      	ldr	r0, [pc, #208]	; (80032c0 <openScreen+0x128>)
 80031ee:	f006 fec3 	bl	8009f78 <iprintf>
		objectsToRead = maxObjects;
 80031f2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80031f6:	857b      	strh	r3, [r7, #42]	; 0x2a
	}

	uint8_t objectHeaderBuffer[sizeof(struct object)];
	while(objectIndex < objectsToRead){
 80031f8:	e059      	b.n	80032ae <openScreen+0x116>
		ext_flash_read(flashAddr, objectHeaderBuffer, sizeof(struct object));
 80031fa:	f107 0310 	add.w	r3, r7, #16
 80031fe:	220e      	movs	r2, #14
 8003200:	4619      	mov	r1, r3
 8003202:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003204:	f000 fbbd 	bl	8003982 <ext_flash_read>
		flashAddr += sizeof(struct object);
 8003208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800320a:	330e      	adds	r3, #14
 800320c:	62fb      	str	r3, [r7, #44]	; 0x2c
		*(objectArray + objectIndex) = *((struct object *) objectHeaderBuffer);
 800320e:	f107 0110 	add.w	r1, r7, #16
 8003212:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003214:	4613      	mov	r3, r2
 8003216:	00db      	lsls	r3, r3, #3
 8003218:	1a9b      	subs	r3, r3, r2
 800321a:	005b      	lsls	r3, r3, #1
 800321c:	461a      	mov	r2, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4413      	add	r3, r2
 8003222:	460a      	mov	r2, r1
 8003224:	6814      	ldr	r4, [r2, #0]
 8003226:	6850      	ldr	r0, [r2, #4]
 8003228:	6891      	ldr	r1, [r2, #8]
 800322a:	601c      	str	r4, [r3, #0]
 800322c:	6058      	str	r0, [r3, #4]
 800322e:	6099      	str	r1, [r3, #8]
 8003230:	8992      	ldrh	r2, [r2, #12]
 8003232:	819a      	strh	r2, [r3, #12]
		uint16_t currentObjectDataLen = (objectArray + objectIndex)->dataLen;
 8003234:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003236:	4613      	mov	r3, r2
 8003238:	00db      	lsls	r3, r3, #3
 800323a:	1a9b      	subs	r3, r3, r2
 800323c:	005b      	lsls	r3, r3, #1
 800323e:	461a      	mov	r2, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4413      	add	r3, r2
 8003244:	899b      	ldrh	r3, [r3, #12]
 8003246:	84bb      	strh	r3, [r7, #36]	; 0x24
		if(currentObjectDataLen > 0){
 8003248:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800324a:	2b00      	cmp	r3, #0
 800324c:	d026      	beq.n	800329c <openScreen+0x104>
			if(dataIndex + currentObjectDataLen > maxData){
 800324e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003250:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003252:	441a      	add	r2, r3
 8003254:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003258:	429a      	cmp	r2, r3
 800325a:	dd06      	ble.n	800326a <openScreen+0xd2>
				printf("[cl] Ran out of data buffer when trying to add object #%d \n\r", objectIndex);
 800325c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800325e:	4619      	mov	r1, r3
 8003260:	4818      	ldr	r0, [pc, #96]	; (80032c4 <openScreen+0x12c>)
 8003262:	f006 fe89 	bl	8009f78 <iprintf>
				return(objectIndex);
 8003266:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003268:	e026      	b.n	80032b8 <openScreen+0x120>
			}
			//object data fits in buffer
			ext_flash_read(flashAddr, (dataArray + dataIndex), currentObjectDataLen);
 800326a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800326c:	683a      	ldr	r2, [r7, #0]
 800326e:	4413      	add	r3, r2
 8003270:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003272:	4619      	mov	r1, r3
 8003274:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003276:	f000 fb84 	bl	8003982 <ext_flash_read>
			*(dataPointerArray + objectIndex) = (dataArray + dataIndex);
 800327a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800327c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003282:	440b      	add	r3, r1
 8003284:	6839      	ldr	r1, [r7, #0]
 8003286:	440a      	add	r2, r1
 8003288:	601a      	str	r2, [r3, #0]
			flashAddr += currentObjectDataLen;
 800328a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800328c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800328e:	4413      	add	r3, r2
 8003290:	62fb      	str	r3, [r7, #44]	; 0x2c
			dataIndex += currentObjectDataLen;
 8003292:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003294:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003296:	4413      	add	r3, r2
 8003298:	84fb      	strh	r3, [r7, #38]	; 0x26
 800329a:	e005      	b.n	80032a8 <openScreen+0x110>
			}
		else{
			*(dataPointerArray + objectIndex) = NULL;
 800329c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80032a2:	4413      	add	r3, r2
 80032a4:	2200      	movs	r2, #0
 80032a6:	601a      	str	r2, [r3, #0]
		}

		objectIndex++;
 80032a8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80032aa:	3301      	adds	r3, #1
 80032ac:	853b      	strh	r3, [r7, #40]	; 0x28
	while(objectIndex < objectsToRead){
 80032ae:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80032b0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d3a1      	bcc.n	80031fa <openScreen+0x62>
	}

	return objectIndex;
 80032b6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28

}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3734      	adds	r7, #52	; 0x34
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd90      	pop	{r4, r7, pc}
 80032c0:	0800b72c 	.word	0x0800b72c
 80032c4:	0800b780 	.word	0x0800b780

080032c8 <readBitmap>:
 *
 * Caller needs to provide an array @dataArray at least @maxData pixels long. Each pixel is 2 bytes.
 *
 * @returns: number of pixels read. If maxPixels is sufficient, this will be the same as bitmapHeader.xsize*bitmapHeader.ysize.
 * */
int readBitmap(uint16_t bitmapSector, struct bitmap *bitmapHeader, uint16_t *dataArray, uint16_t maxPixels){
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b08a      	sub	sp, #40	; 0x28
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	60b9      	str	r1, [r7, #8]
 80032d0:	607a      	str	r2, [r7, #4]
 80032d2:	461a      	mov	r2, r3
 80032d4:	4603      	mov	r3, r0
 80032d6:	81fb      	strh	r3, [r7, #14]
 80032d8:	4613      	mov	r3, r2
 80032da:	81bb      	strh	r3, [r7, #12]
	uint32_t flashAddr = bitmapSector*SECTOR_SIZE;
 80032dc:	89fb      	ldrh	r3, [r7, #14]
 80032de:	031b      	lsls	r3, r3, #12
 80032e0:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t bitmapHeaderBuffer[sizeof(struct bitmap)];
	ext_flash_read(flashAddr, bitmapHeaderBuffer, sizeof(struct bitmap));
 80032e2:	f107 0318 	add.w	r3, r7, #24
 80032e6:	2206      	movs	r2, #6
 80032e8:	4619      	mov	r1, r3
 80032ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80032ec:	f000 fb49 	bl	8003982 <ext_flash_read>
	flashAddr += sizeof(struct bitmap);
 80032f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f2:	3306      	adds	r3, #6
 80032f4:	627b      	str	r3, [r7, #36]	; 0x24
	*bitmapHeader = *((struct bitmap *) bitmapHeaderBuffer);
 80032f6:	f107 0218 	add.w	r2, r7, #24
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	6811      	ldr	r1, [r2, #0]
 80032fe:	6019      	str	r1, [r3, #0]
 8003300:	8892      	ldrh	r2, [r2, #4]
 8003302:	809a      	strh	r2, [r3, #4]

	uint16_t pixelsToRead = (*bitmapHeader).xsize*(*bitmapHeader).ysize;
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	885a      	ldrh	r2, [r3, #2]
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	889b      	ldrh	r3, [r3, #4]
 800330c:	fb12 f303 	smulbb	r3, r2, r3
 8003310:	847b      	strh	r3, [r7, #34]	; 0x22
	if(pixelsToRead > maxPixels){
 8003312:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003314:	89bb      	ldrh	r3, [r7, #12]
 8003316:	429a      	cmp	r2, r3
 8003318:	d909      	bls.n	800332e <readBitmap+0x66>
		printf("[cl] Limiting number of pixels of bitmap %d down to %d (from total size %d)\n\r", (*bitmapHeader).bitmapNumber, maxPixels, pixelsToRead);
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	881b      	ldrh	r3, [r3, #0]
 800331e:	4619      	mov	r1, r3
 8003320:	89ba      	ldrh	r2, [r7, #12]
 8003322:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003324:	4815      	ldr	r0, [pc, #84]	; (800337c <readBitmap+0xb4>)
 8003326:	f006 fe27 	bl	8009f78 <iprintf>
		pixelsToRead = maxPixels;
 800332a:	89bb      	ldrh	r3, [r7, #12]
 800332c:	847b      	strh	r3, [r7, #34]	; 0x22
	}

	uint16_t pixelIndex = 0;
 800332e:	2300      	movs	r3, #0
 8003330:	843b      	strh	r3, [r7, #32]
	uint8_t pixelBuffer[2];
	while(pixelIndex < pixelsToRead){
 8003332:	e019      	b.n	8003368 <readBitmap+0xa0>
		ext_flash_read(flashAddr, pixelBuffer, 2);
 8003334:	f107 0314 	add.w	r3, r7, #20
 8003338:	2202      	movs	r2, #2
 800333a:	4619      	mov	r1, r3
 800333c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800333e:	f000 fb20 	bl	8003982 <ext_flash_read>
		*(dataArray + pixelIndex) = (uint16_t) (((*pixelBuffer) << 8) + *(pixelBuffer+1));
 8003342:	7d3b      	ldrb	r3, [r7, #20]
 8003344:	b29b      	uxth	r3, r3
 8003346:	021b      	lsls	r3, r3, #8
 8003348:	b299      	uxth	r1, r3
 800334a:	7d7b      	ldrb	r3, [r7, #21]
 800334c:	b29a      	uxth	r2, r3
 800334e:	8c3b      	ldrh	r3, [r7, #32]
 8003350:	005b      	lsls	r3, r3, #1
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	4403      	add	r3, r0
 8003356:	440a      	add	r2, r1
 8003358:	b292      	uxth	r2, r2
 800335a:	801a      	strh	r2, [r3, #0]
		flashAddr += 2;
 800335c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335e:	3302      	adds	r3, #2
 8003360:	627b      	str	r3, [r7, #36]	; 0x24
		pixelIndex += 1;
 8003362:	8c3b      	ldrh	r3, [r7, #32]
 8003364:	3301      	adds	r3, #1
 8003366:	843b      	strh	r3, [r7, #32]
	while(pixelIndex < pixelsToRead){
 8003368:	8c3a      	ldrh	r2, [r7, #32]
 800336a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800336c:	429a      	cmp	r2, r3
 800336e:	d3e1      	bcc.n	8003334 <readBitmap+0x6c>
	}
}
 8003370:	bf00      	nop
 8003372:	4618      	mov	r0, r3
 8003374:	3728      	adds	r7, #40	; 0x28
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	0800b7c0 	.word	0x0800b7c0

08003380 <printAllScreens>:

/*
 * debug function to check what is actually stored in flash
 */
void printAllScreens(struct generalConfig gconf){
 8003380:	b084      	sub	sp, #16
 8003382:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003386:	b0a9      	sub	sp, #164	; 0xa4
 8003388:	af04      	add	r7, sp, #16
 800338a:	f107 06b8 	add.w	r6, r7, #184	; 0xb8
 800338e:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8003392:	466b      	mov	r3, sp
 8003394:	607b      	str	r3, [r7, #4]
	uint8_t screenIndex = 0;
 8003396:	2300      	movs	r3, #0
 8003398:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	printf("[PAS] Supplied gconf says there are %d screens.\n\r", gconf.totalScreens);
 800339c:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
 80033a0:	4619      	mov	r1, r3
 80033a2:	48b8      	ldr	r0, [pc, #736]	; (8003684 <printAllScreens+0x304>)
 80033a4:	f006 fde8 	bl	8009f78 <iprintf>
	uint16_t maxObjects = 128;
 80033a8:	2380      	movs	r3, #128	; 0x80
 80033aa:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
	uint16_t maxData = SECTOR_SIZE*4;
 80033ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80033b2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	struct screen screenHeader;
	struct object objArr[maxObjects];
 80033b6:	f8b7 6088 	ldrh.w	r6, [r7, #136]	; 0x88
 80033ba:	4633      	mov	r3, r6
 80033bc:	3b01      	subs	r3, #1
 80033be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80033c2:	b2b3      	uxth	r3, r6
 80033c4:	2200      	movs	r2, #0
 80033c6:	469a      	mov	sl, r3
 80033c8:	4693      	mov	fp, r2
 80033ca:	4652      	mov	r2, sl
 80033cc:	465b      	mov	r3, fp
 80033ce:	f04f 0000 	mov.w	r0, #0
 80033d2:	f04f 0100 	mov.w	r1, #0
 80033d6:	00d9      	lsls	r1, r3, #3
 80033d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80033dc:	00d0      	lsls	r0, r2, #3
 80033de:	4602      	mov	r2, r0
 80033e0:	460b      	mov	r3, r1
 80033e2:	ebb2 040a 	subs.w	r4, r2, sl
 80033e6:	eb63 050b 	sbc.w	r5, r3, fp
 80033ea:	f04f 0200 	mov.w	r2, #0
 80033ee:	f04f 0300 	mov.w	r3, #0
 80033f2:	012b      	lsls	r3, r5, #4
 80033f4:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80033f8:	0122      	lsls	r2, r4, #4
 80033fa:	b2b3      	uxth	r3, r6
 80033fc:	2200      	movs	r2, #0
 80033fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8003400:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003402:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8003406:	4622      	mov	r2, r4
 8003408:	462b      	mov	r3, r5
 800340a:	f04f 0000 	mov.w	r0, #0
 800340e:	f04f 0100 	mov.w	r1, #0
 8003412:	00d9      	lsls	r1, r3, #3
 8003414:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003418:	00d0      	lsls	r0, r2, #3
 800341a:	4602      	mov	r2, r0
 800341c:	460b      	mov	r3, r1
 800341e:	4621      	mov	r1, r4
 8003420:	ebb2 0801 	subs.w	r8, r2, r1
 8003424:	4629      	mov	r1, r5
 8003426:	eb63 0901 	sbc.w	r9, r3, r1
 800342a:	f04f 0200 	mov.w	r2, #0
 800342e:	f04f 0300 	mov.w	r3, #0
 8003432:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8003436:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 800343a:	ea4f 1208 	mov.w	r2, r8, lsl #4
 800343e:	4632      	mov	r2, r6
 8003440:	4613      	mov	r3, r2
 8003442:	00db      	lsls	r3, r3, #3
 8003444:	1a9b      	subs	r3, r3, r2
 8003446:	005b      	lsls	r3, r3, #1
 8003448:	3307      	adds	r3, #7
 800344a:	08db      	lsrs	r3, r3, #3
 800344c:	00db      	lsls	r3, r3, #3
 800344e:	ebad 0d03 	sub.w	sp, sp, r3
 8003452:	ab04      	add	r3, sp, #16
 8003454:	3301      	adds	r3, #1
 8003456:	085b      	lsrs	r3, r3, #1
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	67bb      	str	r3, [r7, #120]	; 0x78
	uint8_t dataArr[maxData];
 800345c:	f8b7 108a 	ldrh.w	r1, [r7, #138]	; 0x8a
 8003460:	460b      	mov	r3, r1
 8003462:	3b01      	subs	r3, #1
 8003464:	677b      	str	r3, [r7, #116]	; 0x74
 8003466:	b28b      	uxth	r3, r1
 8003468:	2200      	movs	r2, #0
 800346a:	623b      	str	r3, [r7, #32]
 800346c:	627a      	str	r2, [r7, #36]	; 0x24
 800346e:	f04f 0200 	mov.w	r2, #0
 8003472:	f04f 0300 	mov.w	r3, #0
 8003476:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800347a:	4628      	mov	r0, r5
 800347c:	00c3      	lsls	r3, r0, #3
 800347e:	4620      	mov	r0, r4
 8003480:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003484:	4620      	mov	r0, r4
 8003486:	00c2      	lsls	r2, r0, #3
 8003488:	b28b      	uxth	r3, r1
 800348a:	2200      	movs	r2, #0
 800348c:	61bb      	str	r3, [r7, #24]
 800348e:	61fa      	str	r2, [r7, #28]
 8003490:	f04f 0200 	mov.w	r2, #0
 8003494:	f04f 0300 	mov.w	r3, #0
 8003498:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 800349c:	4628      	mov	r0, r5
 800349e:	00c3      	lsls	r3, r0, #3
 80034a0:	4620      	mov	r0, r4
 80034a2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80034a6:	4620      	mov	r0, r4
 80034a8:	00c2      	lsls	r2, r0, #3
 80034aa:	460b      	mov	r3, r1
 80034ac:	3307      	adds	r3, #7
 80034ae:	08db      	lsrs	r3, r3, #3
 80034b0:	00db      	lsls	r3, r3, #3
 80034b2:	ebad 0d03 	sub.w	sp, sp, r3
 80034b6:	ab04      	add	r3, sp, #16
 80034b8:	3300      	adds	r3, #0
 80034ba:	673b      	str	r3, [r7, #112]	; 0x70
	uint8_t *pointerArray[maxObjects];
 80034bc:	f8b7 1088 	ldrh.w	r1, [r7, #136]	; 0x88
 80034c0:	460b      	mov	r3, r1
 80034c2:	3b01      	subs	r3, #1
 80034c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80034c6:	b28b      	uxth	r3, r1
 80034c8:	2200      	movs	r2, #0
 80034ca:	613b      	str	r3, [r7, #16]
 80034cc:	617a      	str	r2, [r7, #20]
 80034ce:	f04f 0200 	mov.w	r2, #0
 80034d2:	f04f 0300 	mov.w	r3, #0
 80034d6:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80034da:	4628      	mov	r0, r5
 80034dc:	0143      	lsls	r3, r0, #5
 80034de:	4620      	mov	r0, r4
 80034e0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80034e4:	4620      	mov	r0, r4
 80034e6:	0142      	lsls	r2, r0, #5
 80034e8:	b28b      	uxth	r3, r1
 80034ea:	2200      	movs	r2, #0
 80034ec:	60bb      	str	r3, [r7, #8]
 80034ee:	60fa      	str	r2, [r7, #12]
 80034f0:	f04f 0200 	mov.w	r2, #0
 80034f4:	f04f 0300 	mov.w	r3, #0
 80034f8:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80034fc:	4628      	mov	r0, r5
 80034fe:	0143      	lsls	r3, r0, #5
 8003500:	4620      	mov	r0, r4
 8003502:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003506:	4620      	mov	r0, r4
 8003508:	0142      	lsls	r2, r0, #5
 800350a:	460b      	mov	r3, r1
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	3307      	adds	r3, #7
 8003510:	08db      	lsrs	r3, r3, #3
 8003512:	00db      	lsls	r3, r3, #3
 8003514:	ebad 0d03 	sub.w	sp, sp, r3
 8003518:	ab04      	add	r3, sp, #16
 800351a:	3303      	adds	r3, #3
 800351c:	089b      	lsrs	r3, r3, #2
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	66bb      	str	r3, [r7, #104]	; 0x68

	while(screenIndex < gconf.totalScreens){
 8003522:	e09c      	b.n	800365e <printAllScreens+0x2de>
		printf("[PAS] Opening screen #%d stored @%d \n\r", screenIndex, gconf.screenSectors[screenIndex]);
 8003524:	f897 1087 	ldrb.w	r1, [r7, #135]	; 0x87
 8003528:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800352c:	005b      	lsls	r3, r3, #1
 800352e:	3388      	adds	r3, #136	; 0x88
 8003530:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003534:	4413      	add	r3, r2
 8003536:	885b      	ldrh	r3, [r3, #2]
 8003538:	461a      	mov	r2, r3
 800353a:	4853      	ldr	r0, [pc, #332]	; (8003688 <printAllScreens+0x308>)
 800353c:	f006 fd1c 	bl	8009f78 <iprintf>
		int objectsRead = openScreen(gconf.screenSectors[screenIndex], &screenHeader, objArr, dataArr, pointerArray, maxData, maxObjects);
 8003540:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8003544:	005b      	lsls	r3, r3, #1
 8003546:	3388      	adds	r3, #136	; 0x88
 8003548:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800354c:	4413      	add	r3, r2
 800354e:	8858      	ldrh	r0, [r3, #2]
 8003550:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8003554:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8003558:	9302      	str	r3, [sp, #8]
 800355a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800355e:	9301      	str	r3, [sp, #4]
 8003560:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003562:	9300      	str	r3, [sp, #0]
 8003564:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003566:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003568:	f7ff fe16 	bl	8003198 <openScreen>
 800356c:	6678      	str	r0, [r7, #100]	; 0x64
		printf("[PAS] [%d / %d] objects have been read.\n\r", objectsRead, screenHeader.objectCount);
 800356e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8003572:	461a      	mov	r2, r3
 8003574:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003576:	4845      	ldr	r0, [pc, #276]	; (800368c <printAllScreens+0x30c>)
 8003578:	f006 fcfe 	bl	8009f78 <iprintf>
		printf("[PAS] Object report:\n\r");
 800357c:	4844      	ldr	r0, [pc, #272]	; (8003690 <printAllScreens+0x310>)
 800357e:	f006 fcfb 	bl	8009f78 <iprintf>
		uint16_t objectIndex = 0;
 8003582:	2300      	movs	r3, #0
 8003584:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
		while(objectIndex < objectsRead){
 8003588:	e059      	b.n	800363e <printAllScreens+0x2be>
			struct object thisObject = *(objArr + objectIndex);
 800358a:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 800358e:	4613      	mov	r3, r2
 8003590:	00db      	lsls	r3, r3, #3
 8003592:	1a9b      	subs	r3, r3, r2
 8003594:	005b      	lsls	r3, r3, #1
 8003596:	461a      	mov	r2, r3
 8003598:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800359a:	441a      	add	r2, r3
 800359c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80035a0:	4614      	mov	r4, r2
 80035a2:	6820      	ldr	r0, [r4, #0]
 80035a4:	6861      	ldr	r1, [r4, #4]
 80035a6:	68a2      	ldr	r2, [r4, #8]
 80035a8:	c307      	stmia	r3!, {r0, r1, r2}
 80035aa:	89a2      	ldrh	r2, [r4, #12]
 80035ac:	801a      	strh	r2, [r3, #0]
			char typeStr[30];
			objectTypeToString(thisObject.objectType, typeStr);
 80035ae:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80035b2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80035b6:	4611      	mov	r1, r2
 80035b8:	4618      	mov	r0, r3
 80035ba:	f000 f91b 	bl	80037f4 <objectTypeToString>
			printf("[PAS] %s id=%d from (%d, %d) to (%d,%d), hex data (%db) =[", typeStr, thisObject.objectId, thisObject.xstart, thisObject.ystart, thisObject.xend, thisObject.yend, thisObject.dataLen);
 80035be:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80035c2:	461d      	mov	r5, r3
 80035c4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80035c8:	461e      	mov	r6, r3
 80035ca:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80035ce:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 80035d2:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 80035d6:	4608      	mov	r0, r1
 80035d8:	f8b7 105c 	ldrh.w	r1, [r7, #92]	; 0x5c
 80035dc:	460c      	mov	r4, r1
 80035de:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80035e2:	9403      	str	r4, [sp, #12]
 80035e4:	9002      	str	r0, [sp, #8]
 80035e6:	9201      	str	r2, [sp, #4]
 80035e8:	9300      	str	r3, [sp, #0]
 80035ea:	4633      	mov	r3, r6
 80035ec:	462a      	mov	r2, r5
 80035ee:	4829      	ldr	r0, [pc, #164]	; (8003694 <printAllScreens+0x314>)
 80035f0:	f006 fcc2 	bl	8009f78 <iprintf>
			int dataIndex = 0;
 80035f4:	2300      	movs	r3, #0
 80035f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			while(dataIndex < thisObject.dataLen){
 80035fa:	e011      	b.n	8003620 <printAllScreens+0x2a0>
				printf("%02x", *(pointerArray[objectIndex] + dataIndex));
 80035fc:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8003600:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003602:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003606:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800360a:	4413      	add	r3, r2
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	4619      	mov	r1, r3
 8003610:	4821      	ldr	r0, [pc, #132]	; (8003698 <printAllScreens+0x318>)
 8003612:	f006 fcb1 	bl	8009f78 <iprintf>
				dataIndex++;
 8003616:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800361a:	3301      	adds	r3, #1
 800361c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			while(dataIndex < thisObject.dataLen){
 8003620:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003624:	461a      	mov	r2, r3
 8003626:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800362a:	4293      	cmp	r3, r2
 800362c:	dbe6      	blt.n	80035fc <printAllScreens+0x27c>
			}
			printf("]\n\r");
 800362e:	481b      	ldr	r0, [pc, #108]	; (800369c <printAllScreens+0x31c>)
 8003630:	f006 fca2 	bl	8009f78 <iprintf>
			objectIndex++;
 8003634:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8003638:	3301      	adds	r3, #1
 800363a:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
		while(objectIndex < objectsRead){
 800363e:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8003642:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003644:	429a      	cmp	r2, r3
 8003646:	dca0      	bgt.n	800358a <printAllScreens+0x20a>
		}
		printf("[PAS] End of screen #%d \n\r", screenIndex);
 8003648:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800364c:	4619      	mov	r1, r3
 800364e:	4814      	ldr	r0, [pc, #80]	; (80036a0 <printAllScreens+0x320>)
 8003650:	f006 fc92 	bl	8009f78 <iprintf>
		screenIndex++;
 8003654:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8003658:	3301      	adds	r3, #1
 800365a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	while(screenIndex < gconf.totalScreens){
 800365e:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
 8003662:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8003666:	429a      	cmp	r2, r3
 8003668:	f4ff af5c 	bcc.w	8003524 <printAllScreens+0x1a4>
	}

	printf("[PAS] Finished. \n\n\n\r");
 800366c:	480d      	ldr	r0, [pc, #52]	; (80036a4 <printAllScreens+0x324>)
 800366e:	f006 fc83 	bl	8009f78 <iprintf>
 8003672:	f8d7 d004 	ldr.w	sp, [r7, #4]
}
 8003676:	bf00      	nop
 8003678:	3794      	adds	r7, #148	; 0x94
 800367a:	46bd      	mov	sp, r7
 800367c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003680:	b004      	add	sp, #16
 8003682:	4770      	bx	lr
 8003684:	0800b810 	.word	0x0800b810
 8003688:	0800b844 	.word	0x0800b844
 800368c:	0800b86c 	.word	0x0800b86c
 8003690:	0800b898 	.word	0x0800b898
 8003694:	0800b8b0 	.word	0x0800b8b0
 8003698:	0800b8ec 	.word	0x0800b8ec
 800369c:	0800b8f4 	.word	0x0800b8f4
 80036a0:	0800b8f8 	.word	0x0800b8f8
 80036a4:	0800b914 	.word	0x0800b914

080036a8 <reportBitmaps>:


void reportBitmaps(int printHex){
 80036a8:	b580      	push	{r7, lr}
 80036aa:	f5ad 6d13 	sub.w	sp, sp, #2352	; 0x930
 80036ae:	af02      	add	r7, sp, #8
 80036b0:	f607 1328 	addw	r3, r7, #2344	; 0x928
 80036b4:	f6a3 1324 	subw	r3, r3, #2340	; 0x924
 80036b8:	6018      	str	r0, [r3, #0]
	struct bitmapList blist;
	readBitmapList(&blist);
 80036ba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80036be:	4618      	mov	r0, r3
 80036c0:	f7ff fd44 	bl	800314c <readBitmapList>
	int total = blist.totalBitmaps;
 80036c4:	f607 1328 	addw	r3, r7, #2344	; 0x928
 80036c8:	f6a3 0318 	subw	r3, r3, #2072	; 0x818
 80036cc:	881b      	ldrh	r3, [r3, #0]
 80036ce:	f8c7 391c 	str.w	r3, [r7, #2332]	; 0x91c
	printf("[BR] There are %d bitmaps in memory spanning sectors %d to %d.\n\r", total, BITMAP_LIST_SECTOR+1, blist.lastUsedSector);
 80036d2:	f607 1328 	addw	r3, r7, #2344	; 0x928
 80036d6:	f6a3 0318 	subw	r3, r3, #2072	; 0x818
 80036da:	885b      	ldrh	r3, [r3, #2]
 80036dc:	22c9      	movs	r2, #201	; 0xc9
 80036de:	f8d7 191c 	ldr.w	r1, [r7, #2332]	; 0x91c
 80036e2:	483d      	ldr	r0, [pc, #244]	; (80037d8 <reportBitmaps+0x130>)
 80036e4:	f006 fc48 	bl	8009f78 <iprintf>
	int i = 0;
 80036e8:	2300      	movs	r3, #0
 80036ea:	f8c7 3924 	str.w	r3, [r7, #2340]	; 0x924
	while(i < total){
 80036ee:	e064      	b.n	80037ba <reportBitmaps+0x112>
		int thisSector = blist.bitmapSectors[i];
 80036f0:	f607 1328 	addw	r3, r7, #2344	; 0x928
 80036f4:	f6a3 0218 	subw	r2, r3, #2072	; 0x818
 80036f8:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 80036fc:	005b      	lsls	r3, r3, #1
 80036fe:	4413      	add	r3, r2
 8003700:	889b      	ldrh	r3, [r3, #4]
 8003702:	f8c7 3918 	str.w	r3, [r7, #2328]	; 0x918
		struct bitmap bm;
		uint16_t pixelBuffer[128];
		int pixelsRead = readBitmap(thisSector, &bm, pixelBuffer, 128);
 8003706:	f8d7 3918 	ldr.w	r3, [r7, #2328]	; 0x918
 800370a:	b298      	uxth	r0, r3
 800370c:	f107 0208 	add.w	r2, r7, #8
 8003710:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8003714:	2380      	movs	r3, #128	; 0x80
 8003716:	f7ff fdd7 	bl	80032c8 <readBitmap>
 800371a:	f8c7 0914 	str.w	r0, [r7, #2324]	; 0x914
		printf("[BR] Bitmap #%d stored @ sector %d is %dx%d pixels.\n\r", bm.bitmapNumber, thisSector, bm.xsize, bm.ysize);
 800371e:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8003722:	f5a3 6302 	sub.w	r3, r3, #2080	; 0x820
 8003726:	881b      	ldrh	r3, [r3, #0]
 8003728:	4619      	mov	r1, r3
 800372a:	f607 1328 	addw	r3, r7, #2344	; 0x928
 800372e:	f5a3 6302 	sub.w	r3, r3, #2080	; 0x820
 8003732:	885b      	ldrh	r3, [r3, #2]
 8003734:	461a      	mov	r2, r3
 8003736:	f607 1328 	addw	r3, r7, #2344	; 0x928
 800373a:	f5a3 6302 	sub.w	r3, r3, #2080	; 0x820
 800373e:	889b      	ldrh	r3, [r3, #4]
 8003740:	9300      	str	r3, [sp, #0]
 8003742:	4613      	mov	r3, r2
 8003744:	f8d7 2918 	ldr.w	r2, [r7, #2328]	; 0x918
 8003748:	4824      	ldr	r0, [pc, #144]	; (80037dc <reportBitmaps+0x134>)
 800374a:	f006 fc15 	bl	8009f78 <iprintf>
		if(printHex){
 800374e:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8003752:	f6a3 1324 	subw	r3, r3, #2340	; 0x924
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d029      	beq.n	80037b0 <reportBitmaps+0x108>
			printf("[BR] It's first %d pixels are (newlines don't correspond to rows in bitmap!!):", pixelsRead);
 800375c:	f8d7 1914 	ldr.w	r1, [r7, #2324]	; 0x914
 8003760:	481f      	ldr	r0, [pc, #124]	; (80037e0 <reportBitmaps+0x138>)
 8003762:	f006 fc09 	bl	8009f78 <iprintf>
			int printIndex = 0;
 8003766:	2300      	movs	r3, #0
 8003768:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
			while(printIndex < pixelsRead){
 800376c:	e017      	b.n	800379e <reportBitmaps+0xf6>
				if(printIndex%8==0){
 800376e:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8003772:	f003 0307 	and.w	r3, r3, #7
 8003776:	2b00      	cmp	r3, #0
 8003778:	d102      	bne.n	8003780 <reportBitmaps+0xd8>
					printf("\n\r    ");
 800377a:	481a      	ldr	r0, [pc, #104]	; (80037e4 <reportBitmaps+0x13c>)
 800377c:	f006 fbfc 	bl	8009f78 <iprintf>
				}
				printf("%04X ", pixelBuffer[printIndex++]);
 8003780:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8003784:	1c5a      	adds	r2, r3, #1
 8003786:	f8c7 2920 	str.w	r2, [r7, #2336]	; 0x920
 800378a:	f607 1228 	addw	r2, r7, #2344	; 0x928
 800378e:	f5a2 6212 	sub.w	r2, r2, #2336	; 0x920
 8003792:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003796:	4619      	mov	r1, r3
 8003798:	4813      	ldr	r0, [pc, #76]	; (80037e8 <reportBitmaps+0x140>)
 800379a:	f006 fbed 	bl	8009f78 <iprintf>
			while(printIndex < pixelsRead){
 800379e:	f8d7 2920 	ldr.w	r2, [r7, #2336]	; 0x920
 80037a2:	f8d7 3914 	ldr.w	r3, [r7, #2324]	; 0x914
 80037a6:	429a      	cmp	r2, r3
 80037a8:	dbe1      	blt.n	800376e <reportBitmaps+0xc6>
			}
			printf("\n\r");
 80037aa:	4810      	ldr	r0, [pc, #64]	; (80037ec <reportBitmaps+0x144>)
 80037ac:	f006 fbe4 	bl	8009f78 <iprintf>

		}
		i++;
 80037b0:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 80037b4:	3301      	adds	r3, #1
 80037b6:	f8c7 3924 	str.w	r3, [r7, #2340]	; 0x924
	while(i < total){
 80037ba:	f8d7 2924 	ldr.w	r2, [r7, #2340]	; 0x924
 80037be:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 80037c2:	429a      	cmp	r2, r3
 80037c4:	db94      	blt.n	80036f0 <reportBitmaps+0x48>
	}
	printf("[BR] Bitmap report finished.\n\r");
 80037c6:	480a      	ldr	r0, [pc, #40]	; (80037f0 <reportBitmaps+0x148>)
 80037c8:	f006 fbd6 	bl	8009f78 <iprintf>
}
 80037cc:	bf00      	nop
 80037ce:	f607 1728 	addw	r7, r7, #2344	; 0x928
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	0800b92c 	.word	0x0800b92c
 80037dc:	0800b970 	.word	0x0800b970
 80037e0:	0800b9a8 	.word	0x0800b9a8
 80037e4:	0800b9f8 	.word	0x0800b9f8
 80037e8:	0800ba00 	.word	0x0800ba00
 80037ec:	0800ba08 	.word	0x0800ba08
 80037f0:	0800ba0c 	.word	0x0800ba0c

080037f4 <objectTypeToString>:
const char *typeNames[] 	= 		{"rectangle", "button", "label", "picture", "screenbutton"};
const objectType_t types[] 	= 		{rectangle, button, label, picture, screenbutton};
const int typeCount = 5;

// Make sure that str is long enough for longest member of typeNames!
void objectTypeToString(objectType_t type, char *str){
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b086      	sub	sp, #24
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	4603      	mov	r3, r0
 80037fc:	6039      	str	r1, [r7, #0]
 80037fe:	71fb      	strb	r3, [r7, #7]
	int i;
	for(i=0; i<typeCount; i++){
 8003800:	2300      	movs	r3, #0
 8003802:	617b      	str	r3, [r7, #20]
 8003804:	e012      	b.n	800382c <objectTypeToString+0x38>
		if(type == types[i]){
 8003806:	4a14      	ldr	r2, [pc, #80]	; (8003858 <objectTypeToString+0x64>)
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	4413      	add	r3, r2
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	79fa      	ldrb	r2, [r7, #7]
 8003810:	429a      	cmp	r2, r3
 8003812:	d108      	bne.n	8003826 <objectTypeToString+0x32>
			strcpy(str, typeNames[i]);
 8003814:	4a11      	ldr	r2, [pc, #68]	; (800385c <objectTypeToString+0x68>)
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800381c:	4619      	mov	r1, r3
 800381e:	6838      	ldr	r0, [r7, #0]
 8003820:	f006 fbc2 	bl	8009fa8 <strcpy>
 8003824:	e014      	b.n	8003850 <objectTypeToString+0x5c>
	for(i=0; i<typeCount; i++){
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	3301      	adds	r3, #1
 800382a:	617b      	str	r3, [r7, #20]
 800382c:	2205      	movs	r2, #5
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	4293      	cmp	r3, r2
 8003832:	dbe8      	blt.n	8003806 <objectTypeToString+0x12>
			return;
		}
	}
	char noneStr[] = "none";
 8003834:	4a0a      	ldr	r2, [pc, #40]	; (8003860 <objectTypeToString+0x6c>)
 8003836:	f107 030c 	add.w	r3, r7, #12
 800383a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800383e:	6018      	str	r0, [r3, #0]
 8003840:	3304      	adds	r3, #4
 8003842:	7019      	strb	r1, [r3, #0]
	strcpy(str, noneStr);
 8003844:	f107 030c 	add.w	r3, r7, #12
 8003848:	4619      	mov	r1, r3
 800384a:	6838      	ldr	r0, [r7, #0]
 800384c:	f006 fbac 	bl	8009fa8 <strcpy>
}
 8003850:	3718      	adds	r7, #24
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	0800becc 	.word	0x0800becc
 800385c:	20000000 	.word	0x20000000
 8003860:	0800ba60 	.word	0x0800ba60

08003864 <stringToObjectType>:

objectType_t stringToObjectType(char *str){
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
	int i;
	for(i=0; i<typeCount; i++){
 800386c:	2300      	movs	r3, #0
 800386e:	60fb      	str	r3, [r7, #12]
 8003870:	e012      	b.n	8003898 <stringToObjectType+0x34>
		if(strcmp(typeNames[i], str) == 0){
 8003872:	4a0e      	ldr	r2, [pc, #56]	; (80038ac <stringToObjectType+0x48>)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800387a:	6879      	ldr	r1, [r7, #4]
 800387c:	4618      	mov	r0, r3
 800387e:	f7fc fca7 	bl	80001d0 <strcmp>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d104      	bne.n	8003892 <stringToObjectType+0x2e>
			return types[i];
 8003888:	4a09      	ldr	r2, [pc, #36]	; (80038b0 <stringToObjectType+0x4c>)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	4413      	add	r3, r2
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	e007      	b.n	80038a2 <stringToObjectType+0x3e>
	for(i=0; i<typeCount; i++){
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	3301      	adds	r3, #1
 8003896:	60fb      	str	r3, [r7, #12]
 8003898:	2205      	movs	r2, #5
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	4293      	cmp	r3, r2
 800389e:	dbe8      	blt.n	8003872 <stringToObjectType+0xe>
		}
	}
	return none;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3710      	adds	r7, #16
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	20000000 	.word	0x20000000
 80038b0:	0800becc 	.word	0x0800becc

080038b4 <flashCSSet>:
#include <string.h>

#define FLASHWRITE_DEBUG_PRINT 0


void flashCSSet(){
 80038b4:	b580      	push	{r7, lr}
 80038b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80038b8:	2201      	movs	r2, #1
 80038ba:	2110      	movs	r1, #16
 80038bc:	4802      	ldr	r0, [pc, #8]	; (80038c8 <flashCSSet+0x14>)
 80038be:	f002 fdc5 	bl	800644c <HAL_GPIO_WritePin>
}
 80038c2:	bf00      	nop
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	40020000 	.word	0x40020000

080038cc <flashCSReset>:

void flashCSReset(){
 80038cc:	b580      	push	{r7, lr}
 80038ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80038d0:	2200      	movs	r2, #0
 80038d2:	2110      	movs	r1, #16
 80038d4:	4802      	ldr	r0, [pc, #8]	; (80038e0 <flashCSReset+0x14>)
 80038d6:	f002 fdb9 	bl	800644c <HAL_GPIO_WritePin>
}
 80038da:	bf00      	nop
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	40020000 	.word	0x40020000

080038e4 <ext_flash_erase_4kB>:
		}
	}
}

void ext_flash_erase_4kB(unsigned int address)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
	unsigned int i;

	printf("erase at %d \n\r", address);
 80038ec:	6879      	ldr	r1, [r7, #4]
 80038ee:	481a      	ldr	r0, [pc, #104]	; (8003958 <ext_flash_erase_4kB+0x74>)
 80038f0:	f006 fb42 	bl	8009f78 <iprintf>

	ext_flash_wren();
 80038f4:	f000 f86c 	bl	80039d0 <ext_flash_wren>

	flashCSReset();
 80038f8:	f7ff ffe8 	bl	80038cc <flashCSReset>
	SPI1_Transfer(0x20);
 80038fc:	2020      	movs	r0, #32
 80038fe:	f001 fc87 	bl	8005210 <SPI1_Transfer>
	SPI1_Transfer((address>>16)&0xFF);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	0c1b      	lsrs	r3, r3, #16
 8003906:	b2db      	uxtb	r3, r3
 8003908:	4618      	mov	r0, r3
 800390a:	f001 fc81 	bl	8005210 <SPI1_Transfer>
	SPI1_Transfer((address>>8)&0xFF);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	0a1b      	lsrs	r3, r3, #8
 8003912:	b2db      	uxtb	r3, r3
 8003914:	4618      	mov	r0, r3
 8003916:	f001 fc7b 	bl	8005210 <SPI1_Transfer>
	SPI1_Transfer(address&0xFF);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	b2db      	uxtb	r3, r3
 800391e:	4618      	mov	r0, r3
 8003920:	f001 fc76 	bl	8005210 <SPI1_Transfer>
	flashCSSet();
 8003924:	f7ff ffc6 	bl	80038b4 <flashCSSet>

	for(i=0;i<1000;i++)
 8003928:	2300      	movs	r3, #0
 800392a:	60fb      	str	r3, [r7, #12]
 800392c:	e00a      	b.n	8003944 <ext_flash_erase_4kB+0x60>
	{
		HAL_Delay(1);
 800392e:	2001      	movs	r0, #1
 8003930:	f002 fa28 	bl	8005d84 <HAL_Delay>
		if(ext_flash_read_status_register_1()==0x00)
 8003934:	f000 f838 	bl	80039a8 <ext_flash_read_status_register_1>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d007      	beq.n	800394e <ext_flash_erase_4kB+0x6a>
	for(i=0;i<1000;i++)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	3301      	adds	r3, #1
 8003942:	60fb      	str	r3, [r7, #12]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800394a:	d3f0      	bcc.n	800392e <ext_flash_erase_4kB+0x4a>
		{
			break;
		}
	}
}
 800394c:	e000      	b.n	8003950 <ext_flash_erase_4kB+0x6c>
			break;
 800394e:	bf00      	nop
}
 8003950:	bf00      	nop
 8003952:	3710      	adds	r7, #16
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}
 8003958:	0800ba68 	.word	0x0800ba68

0800395c <ext_flash_write>:




void ext_flash_write(unsigned int address, unsigned char *buff, unsigned int len)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	607a      	str	r2, [r7, #4]
	ext_flash_continuous_write_begin(address);
 8003968:	68f8      	ldr	r0, [r7, #12]
 800396a:	f000 f87c 	bl	8003a66 <ext_flash_continuous_write_begin>
	ext_flash_continuous_write_write(buff, len);
 800396e:	6879      	ldr	r1, [r7, #4]
 8003970:	68b8      	ldr	r0, [r7, #8]
 8003972:	f000 f898 	bl	8003aa6 <ext_flash_continuous_write_write>
	ext_flash_continuous_write_finish();
 8003976:	f000 f8b1 	bl	8003adc <ext_flash_continuous_write_finish>
}
 800397a:	bf00      	nop
 800397c:	3710      	adds	r7, #16
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}

08003982 <ext_flash_read>:
void ext_flash_read(unsigned int address, unsigned char *buff, unsigned int len)
{
 8003982:	b580      	push	{r7, lr}
 8003984:	b084      	sub	sp, #16
 8003986:	af00      	add	r7, sp, #0
 8003988:	60f8      	str	r0, [r7, #12]
 800398a:	60b9      	str	r1, [r7, #8]
 800398c:	607a      	str	r2, [r7, #4]
	ext_flash_continuous_read_begin(address);
 800398e:	68f8      	ldr	r0, [r7, #12]
 8003990:	f000 f829 	bl	80039e6 <ext_flash_continuous_read_begin>
	ext_flash_continuous_read_read(buff, len);
 8003994:	6879      	ldr	r1, [r7, #4]
 8003996:	68b8      	ldr	r0, [r7, #8]
 8003998:	f000 f843 	bl	8003a22 <ext_flash_continuous_read_read>
	ext_flash_continuous_read_finish();
 800399c:	f000 f85d 	bl	8003a5a <ext_flash_continuous_read_finish>
}
 80039a0:	bf00      	nop
 80039a2:	3710      	adds	r7, #16
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <ext_flash_read_status_register_1>:

	return data;
}

unsigned char ext_flash_read_status_register_1()
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
	char data;
	flashCSReset();
 80039ae:	f7ff ff8d 	bl	80038cc <flashCSReset>
	SPI1_Transfer(0x05);
 80039b2:	2005      	movs	r0, #5
 80039b4:	f001 fc2c 	bl	8005210 <SPI1_Transfer>
	data=SPI1_Transfer(0x00);
 80039b8:	2000      	movs	r0, #0
 80039ba:	f001 fc29 	bl	8005210 <SPI1_Transfer>
 80039be:	4603      	mov	r3, r0
 80039c0:	71fb      	strb	r3, [r7, #7]
	flashCSSet();
 80039c2:	f7ff ff77 	bl	80038b4 <flashCSSet>

	return data;
 80039c6:	79fb      	ldrb	r3, [r7, #7]
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3708      	adds	r7, #8
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <ext_flash_wren>:

void ext_flash_wren()
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	af00      	add	r7, sp, #0
	flashCSReset();
 80039d4:	f7ff ff7a 	bl	80038cc <flashCSReset>
	SPI1_Transfer(0x06);
 80039d8:	2006      	movs	r0, #6
 80039da:	f001 fc19 	bl	8005210 <SPI1_Transfer>
	flashCSSet();
 80039de:	f7ff ff69 	bl	80038b4 <flashCSSet>
}
 80039e2:	bf00      	nop
 80039e4:	bd80      	pop	{r7, pc}

080039e6 <ext_flash_continuous_read_begin>:


//Continuous functions below keep conection open while reading, allowing for access to data not aligned to 4kB sectors
void ext_flash_continuous_read_begin(unsigned int address){
 80039e6:	b580      	push	{r7, lr}
 80039e8:	b082      	sub	sp, #8
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
	command[0]=0x03;
	command[1]=((char *)&address)[3];
	command[2]=((char *)&address)[2];
	command[3]=((char *)&address)[1];*/

	flashCSReset();
 80039ee:	f7ff ff6d 	bl	80038cc <flashCSReset>

	SPI1_Transfer(0x03);
 80039f2:	2003      	movs	r0, #3
 80039f4:	f001 fc0c 	bl	8005210 <SPI1_Transfer>
	SPI1_Transfer((address>>16)&0xFF);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	0c1b      	lsrs	r3, r3, #16
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	4618      	mov	r0, r3
 8003a00:	f001 fc06 	bl	8005210 <SPI1_Transfer>
	SPI1_Transfer((address>>8)&0xFF);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	0a1b      	lsrs	r3, r3, #8
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f001 fc00 	bl	8005210 <SPI1_Transfer>
	SPI1_Transfer(address&0xFF);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	4618      	mov	r0, r3
 8003a16:	f001 fbfb 	bl	8005210 <SPI1_Transfer>
}
 8003a1a:	bf00      	nop
 8003a1c:	3708      	adds	r7, #8
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}

08003a22 <ext_flash_continuous_read_read>:

void ext_flash_continuous_read_read(unsigned char *buff, unsigned int len){
 8003a22:	b590      	push	{r4, r7, lr}
 8003a24:	b085      	sub	sp, #20
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]
 8003a2a:	6039      	str	r1, [r7, #0]
	for(unsigned int i = 0; i<len; i++){
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	60fb      	str	r3, [r7, #12]
 8003a30:	e00a      	b.n	8003a48 <ext_flash_continuous_read_read+0x26>
		*(buff+i) = SPI1_Transfer(0x00);
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	18d4      	adds	r4, r2, r3
 8003a38:	2000      	movs	r0, #0
 8003a3a:	f001 fbe9 	bl	8005210 <SPI1_Transfer>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	7023      	strb	r3, [r4, #0]
	for(unsigned int i = 0; i<len; i++){
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	3301      	adds	r3, #1
 8003a46:	60fb      	str	r3, [r7, #12]
 8003a48:	68fa      	ldr	r2, [r7, #12]
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d3f0      	bcc.n	8003a32 <ext_flash_continuous_read_read+0x10>
	}
}
 8003a50:	bf00      	nop
 8003a52:	bf00      	nop
 8003a54:	3714      	adds	r7, #20
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd90      	pop	{r4, r7, pc}

08003a5a <ext_flash_continuous_read_finish>:
void ext_flash_continuous_read_skip(unsigned int len){
	for(unsigned int i = 0; i<len; i++){
			SPI1_Transfer(0x00);
	}
}
void ext_flash_continuous_read_finish(){
 8003a5a:	b580      	push	{r7, lr}
 8003a5c:	af00      	add	r7, sp, #0
	flashCSSet();
 8003a5e:	f7ff ff29 	bl	80038b4 <flashCSSet>
}
 8003a62:	bf00      	nop
 8003a64:	bd80      	pop	{r7, pc}

08003a66 <ext_flash_continuous_write_begin>:

void ext_flash_continuous_write_begin(unsigned int address){
 8003a66:	b580      	push	{r7, lr}
 8003a68:	b082      	sub	sp, #8
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	6078      	str	r0, [r7, #4]
	ext_flash_wren();
 8003a6e:	f7ff ffaf 	bl	80039d0 <ext_flash_wren>
	flashCSReset();
 8003a72:	f7ff ff2b 	bl	80038cc <flashCSReset>
	SPI1_Transfer(0x02);
 8003a76:	2002      	movs	r0, #2
 8003a78:	f001 fbca 	bl	8005210 <SPI1_Transfer>
	SPI1_Transfer((address>>16)&0xFF);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	0c1b      	lsrs	r3, r3, #16
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	4618      	mov	r0, r3
 8003a84:	f001 fbc4 	bl	8005210 <SPI1_Transfer>
	SPI1_Transfer((address>>8)&0xFF);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	0a1b      	lsrs	r3, r3, #8
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f001 fbbe 	bl	8005210 <SPI1_Transfer>
	SPI1_Transfer(address&0xFF);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f001 fbb9 	bl	8005210 <SPI1_Transfer>
	if(FLASHWRITE_DEBUG_PRINT){printf("FLASHWRITE @ %x :", address);};
}
 8003a9e:	bf00      	nop
 8003aa0:	3708      	adds	r7, #8
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}

08003aa6 <ext_flash_continuous_write_write>:
void ext_flash_continuous_write_write(unsigned char *buff, unsigned int len){
 8003aa6:	b580      	push	{r7, lr}
 8003aa8:	b084      	sub	sp, #16
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]
 8003aae:	6039      	str	r1, [r7, #0]
	unsigned int i;

	for(i=0;i<len;i++)
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	60fb      	str	r3, [r7, #12]
 8003ab4:	e009      	b.n	8003aca <ext_flash_continuous_write_write+0x24>
		{
			SPI1_Transfer(buff[i]);
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	4413      	add	r3, r2
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f001 fba6 	bl	8005210 <SPI1_Transfer>
	for(i=0;i<len;i++)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	60fb      	str	r3, [r7, #12]
 8003aca:	68fa      	ldr	r2, [r7, #12]
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d3f1      	bcc.n	8003ab6 <ext_flash_continuous_write_write+0x10>
			if(FLASHWRITE_DEBUG_PRINT){printf(" %x ", buff[i]);};
		}
	if(FLASHWRITE_DEBUG_PRINT){printf("\n\r");};
}
 8003ad2:	bf00      	nop
 8003ad4:	bf00      	nop
 8003ad6:	3710      	adds	r7, #16
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <ext_flash_continuous_write_finish>:
void ext_flash_continuous_write_finish(){
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
	flashCSSet();
 8003ae2:	f7ff fee7 	bl	80038b4 <flashCSSet>
	unsigned int i;
	for(i=0;i<1000;i++)
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	607b      	str	r3, [r7, #4]
 8003aea:	e00a      	b.n	8003b02 <ext_flash_continuous_write_finish+0x26>
	{
		HAL_Delay(1);
 8003aec:	2001      	movs	r0, #1
 8003aee:	f002 f949 	bl	8005d84 <HAL_Delay>
		if(ext_flash_read_status_register_1()==0x00)
 8003af2:	f7ff ff59 	bl	80039a8 <ext_flash_read_status_register_1>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d007      	beq.n	8003b0c <ext_flash_continuous_write_finish+0x30>
	for(i=0;i<1000;i++)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	3301      	adds	r3, #1
 8003b00:	607b      	str	r3, [r7, #4]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b08:	d3f0      	bcc.n	8003aec <ext_flash_continuous_write_finish+0x10>
		{
			break;
		}
	}
}
 8003b0a:	e000      	b.n	8003b0e <ext_flash_continuous_write_finish+0x32>
			break;
 8003b0c:	bf00      	nop
}
 8003b0e:	bf00      	nop
 8003b10:	3708      	adds	r7, #8
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
	...

08003b18 <ext_flash_write_multipage>:

}



void ext_flash_write_multipage(unsigned int address, unsigned char *buff, unsigned int len){
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b0c8      	sub	sp, #288	; 0x120
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003b22:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003b26:	6018      	str	r0, [r3, #0]
 8003b28:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003b2c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003b30:	6019      	str	r1, [r3, #0]
 8003b32:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003b36:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003b3a:	601a      	str	r2, [r3, #0]
	printf("Multipage write [%d]b@%d \n\r", len, address);
 8003b3c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003b40:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 8003b44:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003b48:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003b4c:	6812      	ldr	r2, [r2, #0]
 8003b4e:	6819      	ldr	r1, [r3, #0]
 8003b50:	4837      	ldr	r0, [pc, #220]	; (8003c30 <ext_flash_write_multipage+0x118>)
 8003b52:	f006 fa11 	bl	8009f78 <iprintf>
	unsigned char pageBuff[PAGE_SIZE];
	unsigned int bytesLeft = len;
 8003b56:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003b5a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	unsigned int buffIndex = 0;
 8003b64:	2300      	movs	r3, #0
 8003b66:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	unsigned int addrIncrement = 0;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

	while(bytesLeft > 0){
 8003b70:	e054      	b.n	8003c1c <ext_flash_write_multipage+0x104>
		unsigned int writtenNow = PAGE_SIZE;
 8003b72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b76:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		if(bytesLeft <= PAGE_SIZE){
 8003b7a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003b7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b82:	d816      	bhi.n	8003bb2 <ext_flash_write_multipage+0x9a>
			memcpy(pageBuff, buff + buffIndex, bytesLeft);
 8003b84:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003b88:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003b92:	18d1      	adds	r1, r2, r3
 8003b94:	f107 0310 	add.w	r3, r7, #16
 8003b98:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f006 f9d5 	bl	8009f4c <memcpy>
			writtenNow = bytesLeft;
 8003ba2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003ba6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
			bytesLeft = 0;
 8003baa:	2300      	movs	r3, #0
 8003bac:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003bb0:	e01e      	b.n	8003bf0 <ext_flash_write_multipage+0xd8>
		}
		else{
			memcpy(pageBuff, buff + buffIndex, PAGE_SIZE);
 8003bb2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003bb6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003bc0:	441a      	add	r2, r3
 8003bc2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003bc6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003bca:	4618      	mov	r0, r3
 8003bcc:	4611      	mov	r1, r2
 8003bce:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	f006 f9ba 	bl	8009f4c <memcpy>
			bytesLeft -= PAGE_SIZE;
 8003bd8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003bdc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003be0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
			buffIndex += PAGE_SIZE;
 8003be4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003be8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003bec:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
		}
		ext_flash_write(address + addrIncrement, pageBuff, writtenNow);
 8003bf0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003bf4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bfe:	4413      	add	r3, r2
 8003c00:	f107 0110 	add.w	r1, r7, #16
 8003c04:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f7ff fea7 	bl	800395c <ext_flash_write>
		addrIncrement += writtenNow;
 8003c0e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003c12:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003c16:	4413      	add	r3, r2
 8003c18:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	while(bytesLeft > 0){
 8003c1c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d1a6      	bne.n	8003b72 <ext_flash_write_multipage+0x5a>
	}

}
 8003c24:	bf00      	nop
 8003c26:	bf00      	nop
 8003c28:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	0800ba9c 	.word	0x0800ba9c

08003c34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c38:	f5ad 7d3b 	sub.w	sp, sp, #748	; 0x2ec
 8003c3c:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003c3e:	f002 f82f 	bl	8005ca0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003c42:	f000 fa85 	bl	8004150 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003c46:	f000 fc47 	bl	80044d8 <MX_GPIO_Init>
  MX_FSMC_Init();
 8003c4a:	f000 fceb 	bl	8004624 <MX_FSMC_Init>
  MX_USART1_UART_Init();
 8003c4e:	f000 fbdf 	bl	8004410 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8003c52:	f000 fae7 	bl	8004224 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8003c56:	f000 fc0d 	bl	8004474 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8003c5a:	f000 fb19 	bl	8004290 <MX_SPI1_Init>
  MX_TIM1_Init();
 8003c5e:	f000 fb55 	bl	800430c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */



  //enable uart interrupt
  uint16_t count = 0;
 8003c62:	2300      	movs	r3, #0
 8003c64:	f8a7 3286 	strh.w	r3, [r7, #646]	; 0x286
  Init_LCD();
 8003c68:	f7fc ff9a 	bl	8000ba0 <Init_LCD>

  touch_reset();
 8003c6c:	f7fd fca0 	bl	80015b0 <touch_reset>
  touch_init(hi2c1);
 8003c70:	4cd8      	ldr	r4, [pc, #864]	; (8003fd4 <main+0x3a0>)
 8003c72:	4668      	mov	r0, sp
 8003c74:	f104 0110 	add.w	r1, r4, #16
 8003c78:	2344      	movs	r3, #68	; 0x44
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	f006 f966 	bl	8009f4c <memcpy>
 8003c80:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003c84:	f7fd fbb4 	bl	80013f0 <touch_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  	  printf("Entering main loop\n\r");
 8003c88:	48d3      	ldr	r0, [pc, #844]	; (8003fd8 <main+0x3a4>)
 8003c8a:	f006 f975 	bl	8009f78 <iprintf>


  	int loopNumber = 0;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288



	LCD_fillRect(0,0,50,50,WHITE);
 8003c94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c98:	9300      	str	r3, [sp, #0]
 8003c9a:	2332      	movs	r3, #50	; 0x32
 8003c9c:	2232      	movs	r2, #50	; 0x32
 8003c9e:	2100      	movs	r1, #0
 8003ca0:	2000      	movs	r0, #0
 8003ca2:	f7fc ff8b 	bl	8000bbc <LCD_fillRect>
	LCD_fillRect(470,0,50,50,RED);
 8003ca6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003caa:	9300      	str	r3, [sp, #0]
 8003cac:	2332      	movs	r3, #50	; 0x32
 8003cae:	2232      	movs	r2, #50	; 0x32
 8003cb0:	2100      	movs	r1, #0
 8003cb2:	f44f 70eb 	mov.w	r0, #470	; 0x1d6
 8003cb6:	f7fc ff81 	bl	8000bbc <LCD_fillRect>
	LCD_fillRect(256,154,50,50,RED);
 8003cba:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003cbe:	9300      	str	r3, [sp, #0]
 8003cc0:	2332      	movs	r3, #50	; 0x32
 8003cc2:	2232      	movs	r2, #50	; 0x32
 8003cc4:	219a      	movs	r1, #154	; 0x9a
 8003cc6:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003cca:	f7fc ff77 	bl	8000bbc <LCD_fillRect>
	LCD_fillRect(100,100,50,50,YELLOW);
 8003cce:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003cd2:	9300      	str	r3, [sp, #0]
 8003cd4:	2332      	movs	r3, #50	; 0x32
 8003cd6:	2232      	movs	r2, #50	; 0x32
 8003cd8:	2164      	movs	r1, #100	; 0x64
 8003cda:	2064      	movs	r0, #100	; 0x64
 8003cdc:	f7fc ff6e 	bl	8000bbc <LCD_fillRect>
	printf("Register result: %d\n\r",touch_register_element(0,0,0,0,50,50,0,0));
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	9303      	str	r3, [sp, #12]
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	9302      	str	r3, [sp, #8]
 8003ce8:	2332      	movs	r3, #50	; 0x32
 8003cea:	9301      	str	r3, [sp, #4]
 8003cec:	2332      	movs	r3, #50	; 0x32
 8003cee:	9300      	str	r3, [sp, #0]
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	2100      	movs	r1, #0
 8003cf6:	2000      	movs	r0, #0
 8003cf8:	f7fd fd46 	bl	8001788 <touch_register_element>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	4619      	mov	r1, r3
 8003d00:	48b6      	ldr	r0, [pc, #728]	; (8003fdc <main+0x3a8>)
 8003d02:	f006 f939 	bl	8009f78 <iprintf>
	printf("Register result: %d\n\r",touch_register_element(0,0,470,0,470+50,50,0,0));
 8003d06:	2300      	movs	r3, #0
 8003d08:	9303      	str	r3, [sp, #12]
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	9302      	str	r3, [sp, #8]
 8003d0e:	2332      	movs	r3, #50	; 0x32
 8003d10:	9301      	str	r3, [sp, #4]
 8003d12:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003d16:	9300      	str	r3, [sp, #0]
 8003d18:	2300      	movs	r3, #0
 8003d1a:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8003d1e:	2100      	movs	r1, #0
 8003d20:	2000      	movs	r0, #0
 8003d22:	f7fd fd31 	bl	8001788 <touch_register_element>
 8003d26:	4603      	mov	r3, r0
 8003d28:	4619      	mov	r1, r3
 8003d2a:	48ac      	ldr	r0, [pc, #688]	; (8003fdc <main+0x3a8>)
 8003d2c:	f006 f924 	bl	8009f78 <iprintf>
	printf("Register result: %d\n\r",touch_register_element(0,0,256,154,256+50,154+50,0,0));
 8003d30:	2300      	movs	r3, #0
 8003d32:	9303      	str	r3, [sp, #12]
 8003d34:	2300      	movs	r3, #0
 8003d36:	9302      	str	r3, [sp, #8]
 8003d38:	23cc      	movs	r3, #204	; 0xcc
 8003d3a:	9301      	str	r3, [sp, #4]
 8003d3c:	f44f 7399 	mov.w	r3, #306	; 0x132
 8003d40:	9300      	str	r3, [sp, #0]
 8003d42:	239a      	movs	r3, #154	; 0x9a
 8003d44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d48:	2100      	movs	r1, #0
 8003d4a:	2000      	movs	r0, #0
 8003d4c:	f7fd fd1c 	bl	8001788 <touch_register_element>
 8003d50:	4603      	mov	r3, r0
 8003d52:	4619      	mov	r1, r3
 8003d54:	48a1      	ldr	r0, [pc, #644]	; (8003fdc <main+0x3a8>)
 8003d56:	f006 f90f 	bl	8009f78 <iprintf>
	printf("Register result: %d\n\r",touch_register_element(0,0,100,100,150,150,0,0));
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	9303      	str	r3, [sp, #12]
 8003d5e:	2300      	movs	r3, #0
 8003d60:	9302      	str	r3, [sp, #8]
 8003d62:	2396      	movs	r3, #150	; 0x96
 8003d64:	9301      	str	r3, [sp, #4]
 8003d66:	2396      	movs	r3, #150	; 0x96
 8003d68:	9300      	str	r3, [sp, #0]
 8003d6a:	2364      	movs	r3, #100	; 0x64
 8003d6c:	2264      	movs	r2, #100	; 0x64
 8003d6e:	2100      	movs	r1, #0
 8003d70:	2000      	movs	r0, #0
 8003d72:	f7fd fd09 	bl	8001788 <touch_register_element>
 8003d76:	4603      	mov	r3, r0
 8003d78:	4619      	mov	r1, r3
 8003d7a:	4898      	ldr	r0, [pc, #608]	; (8003fdc <main+0x3a8>)
 8003d7c:	f006 f8fc 	bl	8009f78 <iprintf>

	int notYetDrawnFlag = 1;
 8003d80:	2301      	movs	r3, #1
 8003d82:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
	struct generalConfig gConf;
	int currentScreen = 1;
 8003d86:	2301      	movs	r3, #1
 8003d88:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280

	//arrays for holding object data loaded from flash
	uint16_t maxObjects = 128;
 8003d8c:	2380      	movs	r3, #128	; 0x80
 8003d8e:	f8a7 327e 	strh.w	r3, [r7, #638]	; 0x27e
	uint16_t maxData = SECTOR_SIZE*4;
 8003d92:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003d96:	f8a7 327c 	strh.w	r3, [r7, #636]	; 0x27c
	struct screen screenHeader;
	struct object objArr[maxObjects];
 8003d9a:	f8b7 427e 	ldrh.w	r4, [r7, #638]	; 0x27e
 8003d9e:	4623      	mov	r3, r4
 8003da0:	3b01      	subs	r3, #1
 8003da2:	f8c7 3278 	str.w	r3, [r7, #632]	; 0x278
 8003da6:	b2a3      	uxth	r3, r4
 8003da8:	2200      	movs	r2, #0
 8003daa:	623b      	str	r3, [r7, #32]
 8003dac:	627a      	str	r2, [r7, #36]	; 0x24
 8003dae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003db2:	f04f 0000 	mov.w	r0, #0
 8003db6:	f04f 0100 	mov.w	r1, #0
 8003dba:	00d9      	lsls	r1, r3, #3
 8003dbc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003dc0:	00d0      	lsls	r0, r2, #3
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	6a39      	ldr	r1, [r7, #32]
 8003dc8:	ebb2 0801 	subs.w	r8, r2, r1
 8003dcc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003dce:	eb63 0901 	sbc.w	r9, r3, r1
 8003dd2:	f04f 0200 	mov.w	r2, #0
 8003dd6:	f04f 0300 	mov.w	r3, #0
 8003dda:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8003dde:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8003de2:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8003de6:	b2a3      	uxth	r3, r4
 8003de8:	2200      	movs	r2, #0
 8003dea:	61bb      	str	r3, [r7, #24]
 8003dec:	61fa      	str	r2, [r7, #28]
 8003dee:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8003df2:	4642      	mov	r2, r8
 8003df4:	464b      	mov	r3, r9
 8003df6:	f04f 0000 	mov.w	r0, #0
 8003dfa:	f04f 0100 	mov.w	r1, #0
 8003dfe:	00d9      	lsls	r1, r3, #3
 8003e00:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e04:	00d0      	lsls	r0, r2, #3
 8003e06:	4602      	mov	r2, r0
 8003e08:	460b      	mov	r3, r1
 8003e0a:	4641      	mov	r1, r8
 8003e0c:	ebb2 0a01 	subs.w	sl, r2, r1
 8003e10:	4649      	mov	r1, r9
 8003e12:	eb63 0b01 	sbc.w	fp, r3, r1
 8003e16:	f04f 0200 	mov.w	r2, #0
 8003e1a:	f04f 0300 	mov.w	r3, #0
 8003e1e:	ea4f 130b 	mov.w	r3, fp, lsl #4
 8003e22:	ea43 731a 	orr.w	r3, r3, sl, lsr #28
 8003e26:	ea4f 120a 	mov.w	r2, sl, lsl #4
 8003e2a:	4622      	mov	r2, r4
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	00db      	lsls	r3, r3, #3
 8003e30:	1a9b      	subs	r3, r3, r2
 8003e32:	005b      	lsls	r3, r3, #1
 8003e34:	3307      	adds	r3, #7
 8003e36:	08db      	lsrs	r3, r3, #3
 8003e38:	00db      	lsls	r3, r3, #3
 8003e3a:	ebad 0d03 	sub.w	sp, sp, r3
 8003e3e:	ab12      	add	r3, sp, #72	; 0x48
 8003e40:	3301      	adds	r3, #1
 8003e42:	085b      	lsrs	r3, r3, #1
 8003e44:	005b      	lsls	r3, r3, #1
 8003e46:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
	uint8_t dataArr[maxData];
 8003e4a:	f8b7 127c 	ldrh.w	r1, [r7, #636]	; 0x27c
 8003e4e:	460b      	mov	r3, r1
 8003e50:	3b01      	subs	r3, #1
 8003e52:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
 8003e56:	b28b      	uxth	r3, r1
 8003e58:	2200      	movs	r2, #0
 8003e5a:	613b      	str	r3, [r7, #16]
 8003e5c:	617a      	str	r2, [r7, #20]
 8003e5e:	f04f 0200 	mov.w	r2, #0
 8003e62:	f04f 0300 	mov.w	r3, #0
 8003e66:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8003e6a:	4648      	mov	r0, r9
 8003e6c:	00c3      	lsls	r3, r0, #3
 8003e6e:	4640      	mov	r0, r8
 8003e70:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003e74:	4640      	mov	r0, r8
 8003e76:	00c2      	lsls	r2, r0, #3
 8003e78:	b28b      	uxth	r3, r1
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	60bb      	str	r3, [r7, #8]
 8003e7e:	60fa      	str	r2, [r7, #12]
 8003e80:	f04f 0200 	mov.w	r2, #0
 8003e84:	f04f 0300 	mov.w	r3, #0
 8003e88:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8003e8c:	4648      	mov	r0, r9
 8003e8e:	00c3      	lsls	r3, r0, #3
 8003e90:	4640      	mov	r0, r8
 8003e92:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003e96:	4640      	mov	r0, r8
 8003e98:	00c2      	lsls	r2, r0, #3
 8003e9a:	460b      	mov	r3, r1
 8003e9c:	3307      	adds	r3, #7
 8003e9e:	08db      	lsrs	r3, r3, #3
 8003ea0:	00db      	lsls	r3, r3, #3
 8003ea2:	ebad 0d03 	sub.w	sp, sp, r3
 8003ea6:	ab12      	add	r3, sp, #72	; 0x48
 8003ea8:	3300      	adds	r3, #0
 8003eaa:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
	uint8_t *pointerArr[maxObjects];
 8003eae:	f8b7 127e 	ldrh.w	r1, [r7, #638]	; 0x27e
 8003eb2:	460b      	mov	r3, r1
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 8003eba:	b28b      	uxth	r3, r1
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	603b      	str	r3, [r7, #0]
 8003ec0:	607a      	str	r2, [r7, #4]
 8003ec2:	f04f 0200 	mov.w	r2, #0
 8003ec6:	f04f 0300 	mov.w	r3, #0
 8003eca:	e9d7 8900 	ldrd	r8, r9, [r7]
 8003ece:	4648      	mov	r0, r9
 8003ed0:	0143      	lsls	r3, r0, #5
 8003ed2:	4640      	mov	r0, r8
 8003ed4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003ed8:	4640      	mov	r0, r8
 8003eda:	0142      	lsls	r2, r0, #5
 8003edc:	b28b      	uxth	r3, r1
 8003ede:	2200      	movs	r2, #0
 8003ee0:	461d      	mov	r5, r3
 8003ee2:	4616      	mov	r6, r2
 8003ee4:	f04f 0200 	mov.w	r2, #0
 8003ee8:	f04f 0300 	mov.w	r3, #0
 8003eec:	0173      	lsls	r3, r6, #5
 8003eee:	ea43 63d5 	orr.w	r3, r3, r5, lsr #27
 8003ef2:	016a      	lsls	r2, r5, #5
 8003ef4:	460b      	mov	r3, r1
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	3307      	adds	r3, #7
 8003efa:	08db      	lsrs	r3, r3, #3
 8003efc:	00db      	lsls	r3, r3, #3
 8003efe:	ebad 0d03 	sub.w	sp, sp, r3
 8003f02:	ab12      	add	r3, sp, #72	; 0x48
 8003f04:	3303      	adds	r3, #3
 8003f06:	089b      	lsrs	r3, r3, #2
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
	int objectsRead = 0;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290

	char str[] = "You fight \nlike a dairy\nfarmer!";
 8003f14:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003f18:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8003f1c:	4a30      	ldr	r2, [pc, #192]	; (8003fe0 <main+0x3ac>)
 8003f1e:	461c      	mov	r4, r3
 8003f20:	4615      	mov	r5, r2
 8003f22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f26:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003f2a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	drawStringToLcd5x7(100, 20, 5, 0xAA, 0, 0xFF, 3, 5, str);
 8003f2e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003f32:	9304      	str	r3, [sp, #16]
 8003f34:	2305      	movs	r3, #5
 8003f36:	9303      	str	r3, [sp, #12]
 8003f38:	2303      	movs	r3, #3
 8003f3a:	9302      	str	r3, [sp, #8]
 8003f3c:	23ff      	movs	r3, #255	; 0xff
 8003f3e:	9301      	str	r3, [sp, #4]
 8003f40:	2300      	movs	r3, #0
 8003f42:	9300      	str	r3, [sp, #0]
 8003f44:	23aa      	movs	r3, #170	; 0xaa
 8003f46:	2205      	movs	r2, #5
 8003f48:	2114      	movs	r1, #20
 8003f4a:	2064      	movs	r0, #100	; 0x64
 8003f4c:	f001 f870 	bl	8005030 <drawStringToLcd5x7>

	while (1)
	{

		loopNumber++;
 8003f50:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 8003f54:	3301      	adds	r3, #1
 8003f56:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
		int configResult = 1; //1 = no data on uart
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
		if(loopNumber % 6000000 == 0){
 8003f60:	f8d7 2288 	ldr.w	r2, [r7, #648]	; 0x288
 8003f64:	4b1f      	ldr	r3, [pc, #124]	; (8003fe4 <main+0x3b0>)
 8003f66:	fb83 1302 	smull	r1, r3, r3, r2
 8003f6a:	14d9      	asrs	r1, r3, #19
 8003f6c:	17d3      	asrs	r3, r2, #31
 8003f6e:	1acb      	subs	r3, r1, r3
 8003f70:	491d      	ldr	r1, [pc, #116]	; (8003fe8 <main+0x3b4>)
 8003f72:	fb01 f303 	mul.w	r3, r1, r3
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d103      	bne.n	8003f84 <main+0x350>
			 configResult = configFromUart(); //check if there's incoming data on config uart, if yes, attempt to read configuration
 8003f7c:	f7fd fe38 	bl	8001bf0 <configFromUart>
 8003f80:	f8c7 0294 	str.w	r0, [r7, #660]	; 0x294
		}

		//redraw display
		if(notYetDrawnFlag || configResult != 1){
 8003f84:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d103      	bne.n	8003f94 <main+0x360>
 8003f8c:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d079      	beq.n	8004088 <main+0x454>
			notYetDrawnFlag = 0;
 8003f94:	2300      	movs	r3, #0
 8003f96:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
			readGeneralConfig(&gConf);
 8003f9a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f7ff f8b0 	bl	8003104 <readGeneralConfig>
			printf("Something changed. Redrawing display and updating bitmap list.\n\r");
 8003fa4:	4811      	ldr	r0, [pc, #68]	; (8003fec <main+0x3b8>)
 8003fa6:	f005 ffe7 	bl	8009f78 <iprintf>
			readBitmapList(&globalBitmapList);
 8003faa:	4811      	ldr	r0, [pc, #68]	; (8003ff0 <main+0x3bc>)
 8003fac:	f7ff f8ce 	bl	800314c <readBitmapList>
			//printAllScreens(gConf);
			objectsRead = 0;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
			currentScreen = 0;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
			if(currentScreen < gConf.totalScreens){
 8003fbc:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003fc0:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	da2d      	bge.n	800402c <main+0x3f8>
 8003fd0:	e010      	b.n	8003ff4 <main+0x3c0>
 8003fd2:	bf00      	nop
 8003fd4:	20002060 	.word	0x20002060
 8003fd8:	0800bab8 	.word	0x0800bab8
 8003fdc:	0800bad0 	.word	0x0800bad0
 8003fe0:	0800bb2c 	.word	0x0800bb2c
 8003fe4:	165e9f81 	.word	0x165e9f81
 8003fe8:	005b8d80 	.word	0x005b8d80
 8003fec:	0800bae8 	.word	0x0800bae8
 8003ff0:	2000222c 	.word	0x2000222c
				objectsRead = openScreen(gConf.screenSectors[currentScreen], &screenHeader, objArr, dataArr, pointerArr, maxData, maxObjects);
 8003ff4:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8003ff8:	f5a3 7210 	sub.w	r2, r3, #576	; 0x240
 8003ffc:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 8004000:	005b      	lsls	r3, r3, #1
 8004002:	4413      	add	r3, r2
 8004004:	8858      	ldrh	r0, [r3, #2]
 8004006:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800400a:	f8b7 327e 	ldrh.w	r3, [r7, #638]	; 0x27e
 800400e:	9302      	str	r3, [sp, #8]
 8004010:	f8b7 327c 	ldrh.w	r3, [r7, #636]	; 0x27c
 8004014:	9301      	str	r3, [sp, #4]
 8004016:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 800401a:	9300      	str	r3, [sp, #0]
 800401c:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 8004020:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 8004024:	f7ff f8b8 	bl	8003198 <openScreen>
 8004028:	f8c7 0290 	str.w	r0, [r7, #656]	; 0x290
			}
			int i;
			for(i = 0; i<objectsRead; i++){
 800402c:	2300      	movs	r3, #0
 800402e:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8004032:	e023      	b.n	800407c <main+0x448>
				drawObjectToLcd(objArr[i], pointerArr[i], 0);
 8004034:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8004038:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
 800403c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004040:	f8d7 0274 	ldr.w	r0, [r7, #628]	; 0x274
 8004044:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
 8004048:	4613      	mov	r3, r2
 800404a:	00db      	lsls	r3, r3, #3
 800404c:	1a9b      	subs	r3, r3, r2
 800404e:	005b      	lsls	r3, r3, #1
 8004050:	4403      	add	r3, r0
 8004052:	2200      	movs	r2, #0
 8004054:	9201      	str	r2, [sp, #4]
 8004056:	9100      	str	r1, [sp, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	4610      	mov	r0, r2
 800405c:	685a      	ldr	r2, [r3, #4]
 800405e:	4611      	mov	r1, r2
 8004060:	689a      	ldr	r2, [r3, #8]
 8004062:	4614      	mov	r4, r2
 8004064:	899a      	ldrh	r2, [r3, #12]
 8004066:	2300      	movs	r3, #0
 8004068:	f362 030f 	bfi	r3, r2, #0, #16
 800406c:	4622      	mov	r2, r4
 800406e:	f000 fb59 	bl	8004724 <drawObjectToLcd>
			for(i = 0; i<objectsRead; i++){
 8004072:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8004076:	3301      	adds	r3, #1
 8004078:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 800407c:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
 8004080:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8004084:	429a      	cmp	r2, r3
 8004086:	dbd5      	blt.n	8004034 <main+0x400>
			}
		}

		//Demo: periodically redraw buttons, alternating between unpressed (0) and pressed (1) state. Feel free to remove this.
		if(loopNumber % 10000000 == 0){
 8004088:	f8d7 2288 	ldr.w	r2, [r7, #648]	; 0x288
 800408c:	4b2d      	ldr	r3, [pc, #180]	; (8004144 <main+0x510>)
 800408e:	fb83 1302 	smull	r1, r3, r3, r2
 8004092:	1599      	asrs	r1, r3, #22
 8004094:	17d3      	asrs	r3, r2, #31
 8004096:	1acb      	subs	r3, r1, r3
 8004098:	492b      	ldr	r1, [pc, #172]	; (8004148 <main+0x514>)
 800409a:	fb01 f303 	mul.w	r3, r1, r3
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d14c      	bne.n	800413e <main+0x50a>
			int i;
			static int buttonsState = 0;
			buttonsState = !buttonsState;
 80040a4:	4b29      	ldr	r3, [pc, #164]	; (800414c <main+0x518>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	bf0c      	ite	eq
 80040ac:	2301      	moveq	r3, #1
 80040ae:	2300      	movne	r3, #0
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	461a      	mov	r2, r3
 80040b4:	4b25      	ldr	r3, [pc, #148]	; (800414c <main+0x518>)
 80040b6:	601a      	str	r2, [r3, #0]
			for(i = 0; i<objectsRead; i++){
 80040b8:	2300      	movs	r3, #0
 80040ba:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 80040be:	e038      	b.n	8004132 <main+0x4fe>
				struct object o = objArr[i];
 80040c0:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80040c4:	f5a3 701d 	sub.w	r0, r3, #628	; 0x274
 80040c8:	f8d7 1274 	ldr.w	r1, [r7, #628]	; 0x274
 80040cc:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 80040d0:	4613      	mov	r3, r2
 80040d2:	00db      	lsls	r3, r3, #3
 80040d4:	1a9b      	subs	r3, r3, r2
 80040d6:	005b      	lsls	r3, r3, #1
 80040d8:	18ca      	adds	r2, r1, r3
 80040da:	4603      	mov	r3, r0
 80040dc:	4614      	mov	r4, r2
 80040de:	6820      	ldr	r0, [r4, #0]
 80040e0:	6861      	ldr	r1, [r4, #4]
 80040e2:	68a2      	ldr	r2, [r4, #8]
 80040e4:	c307      	stmia	r3!, {r0, r1, r2}
 80040e6:	89a2      	ldrh	r2, [r4, #12]
 80040e8:	801a      	strh	r2, [r3, #0]
				if(o.objectType == button || o.objectType == screenbutton){
 80040ea:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80040ee:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d006      	beq.n	8004106 <main+0x4d2>
 80040f8:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80040fc:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	2b05      	cmp	r3, #5
 8004104:	d110      	bne.n	8004128 <main+0x4f4>
					drawObjectToLcd(o, pointerArr[i], buttonsState);
 8004106:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 800410a:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 800410e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004112:	4b0e      	ldr	r3, [pc, #56]	; (800414c <main+0x518>)
 8004114:	6819      	ldr	r1, [r3, #0]
 8004116:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800411a:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 800411e:	9101      	str	r1, [sp, #4]
 8004120:	9200      	str	r2, [sp, #0]
 8004122:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004124:	f000 fafe 	bl	8004724 <drawObjectToLcd>
			for(i = 0; i<objectsRead; i++){
 8004128:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 800412c:	3301      	adds	r3, #1
 800412e:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 8004132:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8004136:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 800413a:	429a      	cmp	r2, r3
 800413c:	dbc0      	blt.n	80040c0 <main+0x48c>
			}
		}



		touch_periodic_process();
 800413e:	f7fd fa4d 	bl	80015dc <touch_periodic_process>
	{
 8004142:	e705      	b.n	8003f50 <main+0x31c>
 8004144:	6b5fca6b 	.word	0x6b5fca6b
 8004148:	00989680 	.word	0x00989680
 800414c:	20002a30 	.word	0x20002a30

08004150 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b094      	sub	sp, #80	; 0x50
 8004154:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004156:	f107 0320 	add.w	r3, r7, #32
 800415a:	2230      	movs	r2, #48	; 0x30
 800415c:	2100      	movs	r1, #0
 800415e:	4618      	mov	r0, r3
 8004160:	f005 ff02 	bl	8009f68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004164:	f107 030c 	add.w	r3, r7, #12
 8004168:	2200      	movs	r2, #0
 800416a:	601a      	str	r2, [r3, #0]
 800416c:	605a      	str	r2, [r3, #4]
 800416e:	609a      	str	r2, [r3, #8]
 8004170:	60da      	str	r2, [r3, #12]
 8004172:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004174:	2300      	movs	r3, #0
 8004176:	60bb      	str	r3, [r7, #8]
 8004178:	4b28      	ldr	r3, [pc, #160]	; (800421c <SystemClock_Config+0xcc>)
 800417a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417c:	4a27      	ldr	r2, [pc, #156]	; (800421c <SystemClock_Config+0xcc>)
 800417e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004182:	6413      	str	r3, [r2, #64]	; 0x40
 8004184:	4b25      	ldr	r3, [pc, #148]	; (800421c <SystemClock_Config+0xcc>)
 8004186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004188:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800418c:	60bb      	str	r3, [r7, #8]
 800418e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004190:	2300      	movs	r3, #0
 8004192:	607b      	str	r3, [r7, #4]
 8004194:	4b22      	ldr	r3, [pc, #136]	; (8004220 <SystemClock_Config+0xd0>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a21      	ldr	r2, [pc, #132]	; (8004220 <SystemClock_Config+0xd0>)
 800419a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800419e:	6013      	str	r3, [r2, #0]
 80041a0:	4b1f      	ldr	r3, [pc, #124]	; (8004220 <SystemClock_Config+0xd0>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041a8:	607b      	str	r3, [r7, #4]
 80041aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80041ac:	2301      	movs	r3, #1
 80041ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80041b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80041b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80041b6:	2302      	movs	r3, #2
 80041b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80041ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80041be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80041c0:	2308      	movs	r3, #8
 80041c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80041c4:	23a8      	movs	r3, #168	; 0xa8
 80041c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80041c8:	2302      	movs	r3, #2
 80041ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80041cc:	2304      	movs	r3, #4
 80041ce:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80041d0:	f107 0320 	add.w	r3, r7, #32
 80041d4:	4618      	mov	r0, r3
 80041d6:	f003 faab 	bl	8007730 <HAL_RCC_OscConfig>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d001      	beq.n	80041e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80041e0:	f000 fa9a 	bl	8004718 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80041e4:	230f      	movs	r3, #15
 80041e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80041e8:	2302      	movs	r3, #2
 80041ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80041ec:	2300      	movs	r3, #0
 80041ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80041f0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80041f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80041f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80041fc:	f107 030c 	add.w	r3, r7, #12
 8004200:	2105      	movs	r1, #5
 8004202:	4618      	mov	r0, r3
 8004204:	f003 fd0c 	bl	8007c20 <HAL_RCC_ClockConfig>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d001      	beq.n	8004212 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800420e:	f000 fa83 	bl	8004718 <Error_Handler>
  }
}
 8004212:	bf00      	nop
 8004214:	3750      	adds	r7, #80	; 0x50
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	40023800 	.word	0x40023800
 8004220:	40007000 	.word	0x40007000

08004224 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004228:	4b16      	ldr	r3, [pc, #88]	; (8004284 <MX_I2C1_Init+0x60>)
 800422a:	4a17      	ldr	r2, [pc, #92]	; (8004288 <MX_I2C1_Init+0x64>)
 800422c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800422e:	4b15      	ldr	r3, [pc, #84]	; (8004284 <MX_I2C1_Init+0x60>)
 8004230:	4a16      	ldr	r2, [pc, #88]	; (800428c <MX_I2C1_Init+0x68>)
 8004232:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004234:	4b13      	ldr	r3, [pc, #76]	; (8004284 <MX_I2C1_Init+0x60>)
 8004236:	2200      	movs	r2, #0
 8004238:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800423a:	4b12      	ldr	r3, [pc, #72]	; (8004284 <MX_I2C1_Init+0x60>)
 800423c:	2200      	movs	r2, #0
 800423e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004240:	4b10      	ldr	r3, [pc, #64]	; (8004284 <MX_I2C1_Init+0x60>)
 8004242:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004246:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004248:	4b0e      	ldr	r3, [pc, #56]	; (8004284 <MX_I2C1_Init+0x60>)
 800424a:	2200      	movs	r2, #0
 800424c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800424e:	4b0d      	ldr	r3, [pc, #52]	; (8004284 <MX_I2C1_Init+0x60>)
 8004250:	2200      	movs	r2, #0
 8004252:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004254:	4b0b      	ldr	r3, [pc, #44]	; (8004284 <MX_I2C1_Init+0x60>)
 8004256:	2200      	movs	r2, #0
 8004258:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800425a:	4b0a      	ldr	r3, [pc, #40]	; (8004284 <MX_I2C1_Init+0x60>)
 800425c:	2200      	movs	r2, #0
 800425e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004260:	4808      	ldr	r0, [pc, #32]	; (8004284 <MX_I2C1_Init+0x60>)
 8004262:	f002 f925 	bl	80064b0 <HAL_I2C_Init>
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d001      	beq.n	8004270 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800426c:	f000 fa54 	bl	8004718 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  __HAL_I2C_ENABLE(&hi2c1);
 8004270:	4b04      	ldr	r3, [pc, #16]	; (8004284 <MX_I2C1_Init+0x60>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	4b03      	ldr	r3, [pc, #12]	; (8004284 <MX_I2C1_Init+0x60>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f042 0201 	orr.w	r2, r2, #1
 800427e:	601a      	str	r2, [r3, #0]
  /* USER CODE END I2C1_Init 2 */

}
 8004280:	bf00      	nop
 8004282:	bd80      	pop	{r7, pc}
 8004284:	20002060 	.word	0x20002060
 8004288:	40005400 	.word	0x40005400
 800428c:	000186a0 	.word	0x000186a0

08004290 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004294:	4b1b      	ldr	r3, [pc, #108]	; (8004304 <MX_SPI1_Init+0x74>)
 8004296:	4a1c      	ldr	r2, [pc, #112]	; (8004308 <MX_SPI1_Init+0x78>)
 8004298:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800429a:	4b1a      	ldr	r3, [pc, #104]	; (8004304 <MX_SPI1_Init+0x74>)
 800429c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80042a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80042a2:	4b18      	ldr	r3, [pc, #96]	; (8004304 <MX_SPI1_Init+0x74>)
 80042a4:	2200      	movs	r2, #0
 80042a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80042a8:	4b16      	ldr	r3, [pc, #88]	; (8004304 <MX_SPI1_Init+0x74>)
 80042aa:	2200      	movs	r2, #0
 80042ac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80042ae:	4b15      	ldr	r3, [pc, #84]	; (8004304 <MX_SPI1_Init+0x74>)
 80042b0:	2202      	movs	r2, #2
 80042b2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80042b4:	4b13      	ldr	r3, [pc, #76]	; (8004304 <MX_SPI1_Init+0x74>)
 80042b6:	2201      	movs	r2, #1
 80042b8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80042ba:	4b12      	ldr	r3, [pc, #72]	; (8004304 <MX_SPI1_Init+0x74>)
 80042bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042c0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80042c2:	4b10      	ldr	r3, [pc, #64]	; (8004304 <MX_SPI1_Init+0x74>)
 80042c4:	2200      	movs	r2, #0
 80042c6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80042c8:	4b0e      	ldr	r3, [pc, #56]	; (8004304 <MX_SPI1_Init+0x74>)
 80042ca:	2200      	movs	r2, #0
 80042cc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80042ce:	4b0d      	ldr	r3, [pc, #52]	; (8004304 <MX_SPI1_Init+0x74>)
 80042d0:	2200      	movs	r2, #0
 80042d2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042d4:	4b0b      	ldr	r3, [pc, #44]	; (8004304 <MX_SPI1_Init+0x74>)
 80042d6:	2200      	movs	r2, #0
 80042d8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80042da:	4b0a      	ldr	r3, [pc, #40]	; (8004304 <MX_SPI1_Init+0x74>)
 80042dc:	220a      	movs	r2, #10
 80042de:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80042e0:	4808      	ldr	r0, [pc, #32]	; (8004304 <MX_SPI1_Init+0x74>)
 80042e2:	f003 febb 	bl	800805c <HAL_SPI_Init>
 80042e6:	4603      	mov	r3, r0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d001      	beq.n	80042f0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80042ec:	f000 fa14 	bl	8004718 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  __HAL_SPI_ENABLE(&hspi1);
 80042f0:	4b04      	ldr	r3, [pc, #16]	; (8004304 <MX_SPI1_Init+0x74>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	4b03      	ldr	r3, [pc, #12]	; (8004304 <MX_SPI1_Init+0x74>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042fe:	601a      	str	r2, [r3, #0]
  /* USER CODE END SPI1_Init 2 */

}
 8004300:	bf00      	nop
 8004302:	bd80      	pop	{r7, pc}
 8004304:	200020b4 	.word	0x200020b4
 8004308:	40013000 	.word	0x40013000

0800430c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b092      	sub	sp, #72	; 0x48
 8004310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004312:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004316:	2200      	movs	r2, #0
 8004318:	601a      	str	r2, [r3, #0]
 800431a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800431c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004320:	2200      	movs	r2, #0
 8004322:	601a      	str	r2, [r3, #0]
 8004324:	605a      	str	r2, [r3, #4]
 8004326:	609a      	str	r2, [r3, #8]
 8004328:	60da      	str	r2, [r3, #12]
 800432a:	611a      	str	r2, [r3, #16]
 800432c:	615a      	str	r2, [r3, #20]
 800432e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004330:	1d3b      	adds	r3, r7, #4
 8004332:	2220      	movs	r2, #32
 8004334:	2100      	movs	r1, #0
 8004336:	4618      	mov	r0, r3
 8004338:	f005 fe16 	bl	8009f68 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800433c:	4b32      	ldr	r3, [pc, #200]	; (8004408 <MX_TIM1_Init+0xfc>)
 800433e:	4a33      	ldr	r2, [pc, #204]	; (800440c <MX_TIM1_Init+0x100>)
 8004340:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004342:	4b31      	ldr	r3, [pc, #196]	; (8004408 <MX_TIM1_Init+0xfc>)
 8004344:	2200      	movs	r2, #0
 8004346:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004348:	4b2f      	ldr	r3, [pc, #188]	; (8004408 <MX_TIM1_Init+0xfc>)
 800434a:	2200      	movs	r2, #0
 800434c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800434e:	4b2e      	ldr	r3, [pc, #184]	; (8004408 <MX_TIM1_Init+0xfc>)
 8004350:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004354:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004356:	4b2c      	ldr	r3, [pc, #176]	; (8004408 <MX_TIM1_Init+0xfc>)
 8004358:	2200      	movs	r2, #0
 800435a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800435c:	4b2a      	ldr	r3, [pc, #168]	; (8004408 <MX_TIM1_Init+0xfc>)
 800435e:	2200      	movs	r2, #0
 8004360:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004362:	4b29      	ldr	r3, [pc, #164]	; (8004408 <MX_TIM1_Init+0xfc>)
 8004364:	2200      	movs	r2, #0
 8004366:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004368:	4827      	ldr	r0, [pc, #156]	; (8004408 <MX_TIM1_Init+0xfc>)
 800436a:	f003 ff48 	bl	80081fe <HAL_TIM_PWM_Init>
 800436e:	4603      	mov	r3, r0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d001      	beq.n	8004378 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8004374:	f000 f9d0 	bl	8004718 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004378:	2300      	movs	r3, #0
 800437a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800437c:	2300      	movs	r3, #0
 800437e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004380:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004384:	4619      	mov	r1, r3
 8004386:	4820      	ldr	r0, [pc, #128]	; (8004408 <MX_TIM1_Init+0xfc>)
 8004388:	f004 fbf8 	bl	8008b7c <HAL_TIMEx_MasterConfigSynchronization>
 800438c:	4603      	mov	r3, r0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d001      	beq.n	8004396 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8004392:	f000 f9c1 	bl	8004718 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004396:	2360      	movs	r3, #96	; 0x60
 8004398:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 65535;
 800439a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800439e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80043a0:	2300      	movs	r3, #0
 80043a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80043a4:	2300      	movs	r3, #0
 80043a6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80043a8:	2300      	movs	r3, #0
 80043aa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80043ac:	2300      	movs	r3, #0
 80043ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80043b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043b4:	220c      	movs	r2, #12
 80043b6:	4619      	mov	r1, r3
 80043b8:	4813      	ldr	r0, [pc, #76]	; (8004408 <MX_TIM1_Init+0xfc>)
 80043ba:	f004 f8a7 	bl	800850c <HAL_TIM_PWM_ConfigChannel>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d001      	beq.n	80043c8 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 80043c4:	f000 f9a8 	bl	8004718 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80043c8:	2300      	movs	r3, #0
 80043ca:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80043cc:	2300      	movs	r3, #0
 80043ce:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80043d0:	2300      	movs	r3, #0
 80043d2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80043d4:	2300      	movs	r3, #0
 80043d6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80043d8:	2300      	movs	r3, #0
 80043da:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80043dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80043e0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80043e2:	2300      	movs	r3, #0
 80043e4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80043e6:	1d3b      	adds	r3, r7, #4
 80043e8:	4619      	mov	r1, r3
 80043ea:	4807      	ldr	r0, [pc, #28]	; (8004408 <MX_TIM1_Init+0xfc>)
 80043ec:	f004 fc42 	bl	8008c74 <HAL_TIMEx_ConfigBreakDeadTime>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d001      	beq.n	80043fa <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 80043f6:	f000 f98f 	bl	8004718 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80043fa:	4803      	ldr	r0, [pc, #12]	; (8004408 <MX_TIM1_Init+0xfc>)
 80043fc:	f001 f80e 	bl	800541c <HAL_TIM_MspPostInit>

}
 8004400:	bf00      	nop
 8004402:	3748      	adds	r7, #72	; 0x48
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}
 8004408:	2000210c 	.word	0x2000210c
 800440c:	40010000 	.word	0x40010000

08004410 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004414:	4b15      	ldr	r3, [pc, #84]	; (800446c <MX_USART1_UART_Init+0x5c>)
 8004416:	4a16      	ldr	r2, [pc, #88]	; (8004470 <MX_USART1_UART_Init+0x60>)
 8004418:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800441a:	4b14      	ldr	r3, [pc, #80]	; (800446c <MX_USART1_UART_Init+0x5c>)
 800441c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004420:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004422:	4b12      	ldr	r3, [pc, #72]	; (800446c <MX_USART1_UART_Init+0x5c>)
 8004424:	2200      	movs	r2, #0
 8004426:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004428:	4b10      	ldr	r3, [pc, #64]	; (800446c <MX_USART1_UART_Init+0x5c>)
 800442a:	2200      	movs	r2, #0
 800442c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800442e:	4b0f      	ldr	r3, [pc, #60]	; (800446c <MX_USART1_UART_Init+0x5c>)
 8004430:	2200      	movs	r2, #0
 8004432:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004434:	4b0d      	ldr	r3, [pc, #52]	; (800446c <MX_USART1_UART_Init+0x5c>)
 8004436:	220c      	movs	r2, #12
 8004438:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800443a:	4b0c      	ldr	r3, [pc, #48]	; (800446c <MX_USART1_UART_Init+0x5c>)
 800443c:	2200      	movs	r2, #0
 800443e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004440:	4b0a      	ldr	r3, [pc, #40]	; (800446c <MX_USART1_UART_Init+0x5c>)
 8004442:	2200      	movs	r2, #0
 8004444:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004446:	4809      	ldr	r0, [pc, #36]	; (800446c <MX_USART1_UART_Init+0x5c>)
 8004448:	f004 fc66 	bl	8008d18 <HAL_UART_Init>
 800444c:	4603      	mov	r3, r0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d001      	beq.n	8004456 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004452:	f000 f961 	bl	8004718 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE); //turn on rx interrupt forever
 8004456:	4b05      	ldr	r3, [pc, #20]	; (800446c <MX_USART1_UART_Init+0x5c>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	68da      	ldr	r2, [r3, #12]
 800445c:	4b03      	ldr	r3, [pc, #12]	; (800446c <MX_USART1_UART_Init+0x5c>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f042 0220 	orr.w	r2, r2, #32
 8004464:	60da      	str	r2, [r3, #12]
  /* USER CODE END USART1_Init 2 */

}
 8004466:	bf00      	nop
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	20002154 	.word	0x20002154
 8004470:	40011000 	.word	0x40011000

08004474 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004478:	4b15      	ldr	r3, [pc, #84]	; (80044d0 <MX_USART2_UART_Init+0x5c>)
 800447a:	4a16      	ldr	r2, [pc, #88]	; (80044d4 <MX_USART2_UART_Init+0x60>)
 800447c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800447e:	4b14      	ldr	r3, [pc, #80]	; (80044d0 <MX_USART2_UART_Init+0x5c>)
 8004480:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004484:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004486:	4b12      	ldr	r3, [pc, #72]	; (80044d0 <MX_USART2_UART_Init+0x5c>)
 8004488:	2200      	movs	r2, #0
 800448a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800448c:	4b10      	ldr	r3, [pc, #64]	; (80044d0 <MX_USART2_UART_Init+0x5c>)
 800448e:	2200      	movs	r2, #0
 8004490:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004492:	4b0f      	ldr	r3, [pc, #60]	; (80044d0 <MX_USART2_UART_Init+0x5c>)
 8004494:	2200      	movs	r2, #0
 8004496:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004498:	4b0d      	ldr	r3, [pc, #52]	; (80044d0 <MX_USART2_UART_Init+0x5c>)
 800449a:	220c      	movs	r2, #12
 800449c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800449e:	4b0c      	ldr	r3, [pc, #48]	; (80044d0 <MX_USART2_UART_Init+0x5c>)
 80044a0:	2200      	movs	r2, #0
 80044a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80044a4:	4b0a      	ldr	r3, [pc, #40]	; (80044d0 <MX_USART2_UART_Init+0x5c>)
 80044a6:	2200      	movs	r2, #0
 80044a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80044aa:	4809      	ldr	r0, [pc, #36]	; (80044d0 <MX_USART2_UART_Init+0x5c>)
 80044ac:	f004 fc34 	bl	8008d18 <HAL_UART_Init>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d001      	beq.n	80044ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80044b6:	f000 f92f 	bl	8004718 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE); //turn on rx interrupt forever
 80044ba:	4b05      	ldr	r3, [pc, #20]	; (80044d0 <MX_USART2_UART_Init+0x5c>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	68da      	ldr	r2, [r3, #12]
 80044c0:	4b03      	ldr	r3, [pc, #12]	; (80044d0 <MX_USART2_UART_Init+0x5c>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f042 0220 	orr.w	r2, r2, #32
 80044c8:	60da      	str	r2, [r3, #12]
  /* USER CODE END USART2_Init 2 */

}
 80044ca:	bf00      	nop
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	20002198 	.word	0x20002198
 80044d4:	40004400 	.word	0x40004400

080044d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b08a      	sub	sp, #40	; 0x28
 80044dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044de:	f107 0314 	add.w	r3, r7, #20
 80044e2:	2200      	movs	r2, #0
 80044e4:	601a      	str	r2, [r3, #0]
 80044e6:	605a      	str	r2, [r3, #4]
 80044e8:	609a      	str	r2, [r3, #8]
 80044ea:	60da      	str	r2, [r3, #12]
 80044ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80044ee:	2300      	movs	r3, #0
 80044f0:	613b      	str	r3, [r7, #16]
 80044f2:	4b49      	ldr	r3, [pc, #292]	; (8004618 <MX_GPIO_Init+0x140>)
 80044f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f6:	4a48      	ldr	r2, [pc, #288]	; (8004618 <MX_GPIO_Init+0x140>)
 80044f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044fc:	6313      	str	r3, [r2, #48]	; 0x30
 80044fe:	4b46      	ldr	r3, [pc, #280]	; (8004618 <MX_GPIO_Init+0x140>)
 8004500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004506:	613b      	str	r3, [r7, #16]
 8004508:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800450a:	2300      	movs	r3, #0
 800450c:	60fb      	str	r3, [r7, #12]
 800450e:	4b42      	ldr	r3, [pc, #264]	; (8004618 <MX_GPIO_Init+0x140>)
 8004510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004512:	4a41      	ldr	r2, [pc, #260]	; (8004618 <MX_GPIO_Init+0x140>)
 8004514:	f043 0301 	orr.w	r3, r3, #1
 8004518:	6313      	str	r3, [r2, #48]	; 0x30
 800451a:	4b3f      	ldr	r3, [pc, #252]	; (8004618 <MX_GPIO_Init+0x140>)
 800451c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800451e:	f003 0301 	and.w	r3, r3, #1
 8004522:	60fb      	str	r3, [r7, #12]
 8004524:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004526:	2300      	movs	r3, #0
 8004528:	60bb      	str	r3, [r7, #8]
 800452a:	4b3b      	ldr	r3, [pc, #236]	; (8004618 <MX_GPIO_Init+0x140>)
 800452c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800452e:	4a3a      	ldr	r2, [pc, #232]	; (8004618 <MX_GPIO_Init+0x140>)
 8004530:	f043 0310 	orr.w	r3, r3, #16
 8004534:	6313      	str	r3, [r2, #48]	; 0x30
 8004536:	4b38      	ldr	r3, [pc, #224]	; (8004618 <MX_GPIO_Init+0x140>)
 8004538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800453a:	f003 0310 	and.w	r3, r3, #16
 800453e:	60bb      	str	r3, [r7, #8]
 8004540:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004542:	2300      	movs	r3, #0
 8004544:	607b      	str	r3, [r7, #4]
 8004546:	4b34      	ldr	r3, [pc, #208]	; (8004618 <MX_GPIO_Init+0x140>)
 8004548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800454a:	4a33      	ldr	r2, [pc, #204]	; (8004618 <MX_GPIO_Init+0x140>)
 800454c:	f043 0302 	orr.w	r3, r3, #2
 8004550:	6313      	str	r3, [r2, #48]	; 0x30
 8004552:	4b31      	ldr	r3, [pc, #196]	; (8004618 <MX_GPIO_Init+0x140>)
 8004554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004556:	f003 0302 	and.w	r3, r3, #2
 800455a:	607b      	str	r3, [r7, #4]
 800455c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800455e:	2300      	movs	r3, #0
 8004560:	603b      	str	r3, [r7, #0]
 8004562:	4b2d      	ldr	r3, [pc, #180]	; (8004618 <MX_GPIO_Init+0x140>)
 8004564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004566:	4a2c      	ldr	r2, [pc, #176]	; (8004618 <MX_GPIO_Init+0x140>)
 8004568:	f043 0308 	orr.w	r3, r3, #8
 800456c:	6313      	str	r3, [r2, #48]	; 0x30
 800456e:	4b2a      	ldr	r3, [pc, #168]	; (8004618 <MX_GPIO_Init+0x140>)
 8004570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004572:	f003 0308 	and.w	r3, r3, #8
 8004576:	603b      	str	r3, [r7, #0]
 8004578:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LCD_RES_Pin, GPIO_PIN_RESET);
 800457a:	2200      	movs	r2, #0
 800457c:	f241 0110 	movw	r1, #4112	; 0x1010
 8004580:	4826      	ldr	r0, [pc, #152]	; (800461c <MX_GPIO_Init+0x144>)
 8004582:	f001 ff63 	bl	800644c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_5, GPIO_PIN_RESET);
 8004586:	2200      	movs	r2, #0
 8004588:	2128      	movs	r1, #40	; 0x28
 800458a:	4825      	ldr	r0, [pc, #148]	; (8004620 <MX_GPIO_Init+0x148>)
 800458c:	f001 ff5e 	bl	800644c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004590:	2310      	movs	r3, #16
 8004592:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004594:	2301      	movs	r3, #1
 8004596:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004598:	2300      	movs	r3, #0
 800459a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800459c:	2300      	movs	r3, #0
 800459e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045a0:	f107 0314 	add.w	r3, r7, #20
 80045a4:	4619      	mov	r1, r3
 80045a6:	481d      	ldr	r0, [pc, #116]	; (800461c <MX_GPIO_Init+0x144>)
 80045a8:	f001 fdb4 	bl	8006114 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RES_Pin */
  GPIO_InitStruct.Pin = LCD_RES_Pin;
 80045ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80045b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80045b2:	2301      	movs	r3, #1
 80045b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80045b6:	2301      	movs	r3, #1
 80045b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045ba:	2303      	movs	r3, #3
 80045bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_RES_GPIO_Port, &GPIO_InitStruct);
 80045be:	f107 0314 	add.w	r3, r7, #20
 80045c2:	4619      	mov	r1, r3
 80045c4:	4815      	ldr	r0, [pc, #84]	; (800461c <MX_GPIO_Init+0x144>)
 80045c6:	f001 fda5 	bl	8006114 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80045ca:	2328      	movs	r3, #40	; 0x28
 80045cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80045ce:	2301      	movs	r3, #1
 80045d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045d2:	2300      	movs	r3, #0
 80045d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045d6:	2300      	movs	r3, #0
 80045d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045da:	f107 0314 	add.w	r3, r7, #20
 80045de:	4619      	mov	r1, r3
 80045e0:	480f      	ldr	r0, [pc, #60]	; (8004620 <MX_GPIO_Init+0x148>)
 80045e2:	f001 fd97 	bl	8006114 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80045e6:	2310      	movs	r3, #16
 80045e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80045ea:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80045ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80045f0:	2301      	movs	r3, #1
 80045f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045f4:	f107 0314 	add.w	r3, r7, #20
 80045f8:	4619      	mov	r1, r3
 80045fa:	4809      	ldr	r0, [pc, #36]	; (8004620 <MX_GPIO_Init+0x148>)
 80045fc:	f001 fd8a 	bl	8006114 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8004600:	2200      	movs	r2, #0
 8004602:	2100      	movs	r1, #0
 8004604:	200a      	movs	r0, #10
 8004606:	f001 fcbc 	bl	8005f82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800460a:	200a      	movs	r0, #10
 800460c:	f001 fcd5 	bl	8005fba <HAL_NVIC_EnableIRQ>

}
 8004610:	bf00      	nop
 8004612:	3728      	adds	r7, #40	; 0x28
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}
 8004618:	40023800 	.word	0x40023800
 800461c:	40020000 	.word	0x40020000
 8004620:	40020400 	.word	0x40020400

08004624 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b08e      	sub	sp, #56	; 0x38
 8004628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800462a:	f107 031c 	add.w	r3, r7, #28
 800462e:	2200      	movs	r2, #0
 8004630:	601a      	str	r2, [r3, #0]
 8004632:	605a      	str	r2, [r3, #4]
 8004634:	609a      	str	r2, [r3, #8]
 8004636:	60da      	str	r2, [r3, #12]
 8004638:	611a      	str	r2, [r3, #16]
 800463a:	615a      	str	r2, [r3, #20]
 800463c:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 800463e:	463b      	mov	r3, r7
 8004640:	2200      	movs	r2, #0
 8004642:	601a      	str	r2, [r3, #0]
 8004644:	605a      	str	r2, [r3, #4]
 8004646:	609a      	str	r2, [r3, #8]
 8004648:	60da      	str	r2, [r3, #12]
 800464a:	611a      	str	r2, [r3, #16]
 800464c:	615a      	str	r2, [r3, #20]
 800464e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8004650:	4b2f      	ldr	r3, [pc, #188]	; (8004710 <MX_FSMC_Init+0xec>)
 8004652:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8004656:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8004658:	4b2d      	ldr	r3, [pc, #180]	; (8004710 <MX_FSMC_Init+0xec>)
 800465a:	4a2e      	ldr	r2, [pc, #184]	; (8004714 <MX_FSMC_Init+0xf0>)
 800465c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800465e:	4b2c      	ldr	r3, [pc, #176]	; (8004710 <MX_FSMC_Init+0xec>)
 8004660:	2200      	movs	r2, #0
 8004662:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8004664:	4b2a      	ldr	r3, [pc, #168]	; (8004710 <MX_FSMC_Init+0xec>)
 8004666:	2200      	movs	r2, #0
 8004668:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800466a:	4b29      	ldr	r3, [pc, #164]	; (8004710 <MX_FSMC_Init+0xec>)
 800466c:	2200      	movs	r2, #0
 800466e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8004670:	4b27      	ldr	r3, [pc, #156]	; (8004710 <MX_FSMC_Init+0xec>)
 8004672:	2210      	movs	r2, #16
 8004674:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8004676:	4b26      	ldr	r3, [pc, #152]	; (8004710 <MX_FSMC_Init+0xec>)
 8004678:	2200      	movs	r2, #0
 800467a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800467c:	4b24      	ldr	r3, [pc, #144]	; (8004710 <MX_FSMC_Init+0xec>)
 800467e:	2200      	movs	r2, #0
 8004680:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8004682:	4b23      	ldr	r3, [pc, #140]	; (8004710 <MX_FSMC_Init+0xec>)
 8004684:	2200      	movs	r2, #0
 8004686:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8004688:	4b21      	ldr	r3, [pc, #132]	; (8004710 <MX_FSMC_Init+0xec>)
 800468a:	2200      	movs	r2, #0
 800468c:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800468e:	4b20      	ldr	r3, [pc, #128]	; (8004710 <MX_FSMC_Init+0xec>)
 8004690:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004694:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8004696:	4b1e      	ldr	r3, [pc, #120]	; (8004710 <MX_FSMC_Init+0xec>)
 8004698:	2200      	movs	r2, #0
 800469a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 800469c:	4b1c      	ldr	r3, [pc, #112]	; (8004710 <MX_FSMC_Init+0xec>)
 800469e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80046a2:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80046a4:	4b1a      	ldr	r3, [pc, #104]	; (8004710 <MX_FSMC_Init+0xec>)
 80046a6:	2200      	movs	r2, #0
 80046a8:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80046aa:	4b19      	ldr	r3, [pc, #100]	; (8004710 <MX_FSMC_Init+0xec>)
 80046ac:	2200      	movs	r2, #0
 80046ae:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80046b0:	4b17      	ldr	r3, [pc, #92]	; (8004710 <MX_FSMC_Init+0xec>)
 80046b2:	2200      	movs	r2, #0
 80046b4:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 80046b6:	230f      	movs	r3, #15
 80046b8:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80046ba:	230f      	movs	r3, #15
 80046bc:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 40;
 80046be:	2328      	movs	r3, #40	; 0x28
 80046c0:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 80046c2:	2300      	movs	r3, #0
 80046c4:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 80046c6:	2310      	movs	r3, #16
 80046c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 80046ca:	2311      	movs	r3, #17
 80046cc:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80046ce:	2300      	movs	r3, #0
 80046d0:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 2;
 80046d2:	2302      	movs	r3, #2
 80046d4:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 80046d6:	230f      	movs	r3, #15
 80046d8:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 4;
 80046da:	2304      	movs	r3, #4
 80046dc:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 80046de:	2300      	movs	r3, #0
 80046e0:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 80046e2:	2310      	movs	r3, #16
 80046e4:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 80046e6:	2311      	movs	r3, #17
 80046e8:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 80046ea:	2300      	movs	r3, #0
 80046ec:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 80046ee:	463a      	mov	r2, r7
 80046f0:	f107 031c 	add.w	r3, r7, #28
 80046f4:	4619      	mov	r1, r3
 80046f6:	4806      	ldr	r0, [pc, #24]	; (8004710 <MX_FSMC_Init+0xec>)
 80046f8:	f003 fd39 	bl	800816e <HAL_SRAM_Init>
 80046fc:	4603      	mov	r3, r0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d001      	beq.n	8004706 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8004702:	f000 f809 	bl	8004718 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8004706:	bf00      	nop
 8004708:	3738      	adds	r7, #56	; 0x38
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	200021dc 	.word	0x200021dc
 8004714:	a0000104 	.word	0xa0000104

08004718 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004718:	b480      	push	{r7}
 800471a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800471c:	b672      	cpsid	i
}
 800471e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004720:	e7fe      	b.n	8004720 <Error_Handler+0x8>
	...

08004724 <drawObjectToLcd>:

#define MAX_BITMAP_DRAW_XSIZE 128
#define MAX_BITMAP_DRAW_YSIZE 128


int drawObjectToLcd(struct object o, uint8_t *data, int state){
 8004724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004728:	b0bf      	sub	sp, #252	; 0xfc
 800472a:	af06      	add	r7, sp, #24
 800472c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8004730:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	char objName[30];
	objectTypeToString(o.objectType, objName);
 8004734:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8004738:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800473c:	4619      	mov	r1, r3
 800473e:	4610      	mov	r0, r2
 8004740:	f7ff f858 	bl	80037f4 <objectTypeToString>

	int objectXSize = (o.xend - o.xstart);
 8004744:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004746:	461a      	mov	r2, r3
 8004748:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	int objectYSize = (o.yend - o.ystart);
 8004750:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004752:	461a      	mov	r2, r3
 8004754:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004756:	1ad3      	subs	r3, r2, r3
 8004758:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

	printf("[OV] Drawing %s id %d \n\r", objName, o.objectId);
 800475c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800475e:	461a      	mov	r2, r3
 8004760:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004764:	4619      	mov	r1, r3
 8004766:	48c3      	ldr	r0, [pc, #780]	; (8004a74 <drawObjectToLcd+0x350>)
 8004768:	f005 fc06 	bl	8009f78 <iprintf>

	if(o.objectType == rectangle){
 800476c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004770:	2b01      	cmp	r3, #1
 8004772:	d122      	bne.n	80047ba <drawObjectToLcd+0x96>
		uint16_t color = BLACK;
 8004774:	2300      	movs	r3, #0
 8004776:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
		if(o.dataLen<2){
 800477a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800477c:	2b01      	cmp	r3, #1
 800477e:	d805      	bhi.n	800478c <drawObjectToLcd+0x68>
			printf("[OV] Warning: missing color byte in object id %d! Falling back on black. \n\r", o.objectId);
 8004780:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004782:	4619      	mov	r1, r3
 8004784:	48bc      	ldr	r0, [pc, #752]	; (8004a78 <drawObjectToLcd+0x354>)
 8004786:	f005 fbf7 	bl	8009f78 <iprintf>
 800478a:	e004      	b.n	8004796 <drawObjectToLcd+0x72>
		}
		else{
			color = *((uint16_t *) data);
 800478c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004790:	881b      	ldrh	r3, [r3, #0]
 8004792:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
		}
		LCD_fillRect(o.xstart, o.ystart, (o.xend - o.xstart), (o.yend - o.ystart), color);
 8004796:	8db8      	ldrh	r0, [r7, #44]	; 0x2c
 8004798:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 800479a:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800479c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	b29c      	uxth	r4, r3
 80047a2:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80047a4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80047a6:	1ad3      	subs	r3, r2, r3
 80047a8:	b29a      	uxth	r2, r3
 80047aa:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 80047ae:	9300      	str	r3, [sp, #0]
 80047b0:	4613      	mov	r3, r2
 80047b2:	4622      	mov	r2, r4
 80047b4:	f7fc fa02 	bl	8000bbc <LCD_fillRect>
 80047b8:	e3b2      	b.n	8004f20 <drawObjectToLcd+0x7fc>
	}
	else if(o.objectType == picture){
 80047ba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80047be:	2b04      	cmp	r3, #4
 80047c0:	f040 80a3 	bne.w	800490a <drawObjectToLcd+0x1e6>
 80047c4:	466b      	mov	r3, sp
 80047c6:	461c      	mov	r4, r3

		if(o.dataLen != 4){
 80047c8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80047ca:	2b04      	cmp	r3, #4
 80047cc:	d008      	beq.n	80047e0 <drawObjectToLcd+0xbc>
			printf("[OV] Error: Unexpected data len for picture id %d. Need: 4, got: %d \n\r", o.objectId, o.dataLen);
 80047ce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80047d0:	4619      	mov	r1, r3
 80047d2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80047d4:	461a      	mov	r2, r3
 80047d6:	48a9      	ldr	r0, [pc, #676]	; (8004a7c <drawObjectToLcd+0x358>)
 80047d8:	f005 fbce 	bl	8009f78 <iprintf>
			return 3;
 80047dc:	2303      	movs	r3, #3
 80047de:	e092      	b.n	8004906 <drawObjectToLcd+0x1e2>
		}

		uint16_t bitmapNumber =	 (*(data+0) << 8) + *(data+1);
 80047e0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80047e4:	781b      	ldrb	r3, [r3, #0]
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	021b      	lsls	r3, r3, #8
 80047ea:	b29a      	uxth	r2, r3
 80047ec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80047f0:	3301      	adds	r3, #1
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	4413      	add	r3, r2
 80047f8:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
		uint16_t scaling = 	  	 (*(data+2) << 8) + *(data+3);
 80047fc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004800:	3302      	adds	r3, #2
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	b29b      	uxth	r3, r3
 8004806:	021b      	lsls	r3, r3, #8
 8004808:	b29a      	uxth	r2, r3
 800480a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800480e:	3303      	adds	r3, #3
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	b29b      	uxth	r3, r3
 8004814:	4413      	add	r3, r2
 8004816:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c

		int maxPixels = MAX_BITMAP_DRAW_XSIZE*MAX_BITMAP_DRAW_YSIZE;
 800481a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800481e:	67bb      	str	r3, [r7, #120]	; 0x78
		uint16_t pixelBuffer[maxPixels];
 8004820:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8004822:	1e4b      	subs	r3, r1, #1
 8004824:	677b      	str	r3, [r7, #116]	; 0x74
 8004826:	460a      	mov	r2, r1
 8004828:	2300      	movs	r3, #0
 800482a:	623a      	str	r2, [r7, #32]
 800482c:	627b      	str	r3, [r7, #36]	; 0x24
 800482e:	f04f 0200 	mov.w	r2, #0
 8004832:	f04f 0300 	mov.w	r3, #0
 8004836:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800483a:	4648      	mov	r0, r9
 800483c:	0103      	lsls	r3, r0, #4
 800483e:	4640      	mov	r0, r8
 8004840:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8004844:	4640      	mov	r0, r8
 8004846:	0102      	lsls	r2, r0, #4
 8004848:	460a      	mov	r2, r1
 800484a:	2300      	movs	r3, #0
 800484c:	4615      	mov	r5, r2
 800484e:	461e      	mov	r6, r3
 8004850:	f04f 0200 	mov.w	r2, #0
 8004854:	f04f 0300 	mov.w	r3, #0
 8004858:	0133      	lsls	r3, r6, #4
 800485a:	ea43 7315 	orr.w	r3, r3, r5, lsr #28
 800485e:	012a      	lsls	r2, r5, #4
 8004860:	460b      	mov	r3, r1
 8004862:	005b      	lsls	r3, r3, #1
 8004864:	3307      	adds	r3, #7
 8004866:	08db      	lsrs	r3, r3, #3
 8004868:	00db      	lsls	r3, r3, #3
 800486a:	ebad 0d03 	sub.w	sp, sp, r3
 800486e:	ab06      	add	r3, sp, #24
 8004870:	3301      	adds	r3, #1
 8004872:	085b      	lsrs	r3, r3, #1
 8004874:	005b      	lsls	r3, r3, #1
 8004876:	673b      	str	r3, [r7, #112]	; 0x70
		struct bitmap bitmapHeader;
		int pixelsGotten = fetchBitmap(bitmapNumber, &bitmapHeader, pixelBuffer, maxPixels);
 8004878:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800487a:	b29b      	uxth	r3, r3
 800487c:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8004880:	f8b7 007e 	ldrh.w	r0, [r7, #126]	; 0x7e
 8004884:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004886:	f7fd f985 	bl	8001b94 <fetchBitmap>
 800488a:	66f8      	str	r0, [r7, #108]	; 0x6c

		if(objectXSize != bitmapHeader.xsize*scaling || objectYSize != bitmapHeader.ysize*scaling){
 800488c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004890:	461a      	mov	r2, r3
 8004892:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8004896:	fb02 f303 	mul.w	r3, r2, r3
 800489a:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800489e:	429a      	cmp	r2, r3
 80048a0:	d10a      	bne.n	80048b8 <drawObjectToLcd+0x194>
 80048a2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80048a6:	461a      	mov	r2, r3
 80048a8:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80048ac:	fb02 f303 	mul.w	r3, r2, r3
 80048b0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d014      	beq.n	80048e2 <drawObjectToLcd+0x1be>
			printf("[OV] Warning: Scaled bitmap and picture (id %d) size mismatch! Object is %d x %d, bitmap is %d x %d scaled by factor of %d.\n\r",o.objectId, objectXSize, objectYSize, bitmapHeader.xsize, bitmapHeader.ysize, scaling);
 80048b8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80048ba:	4618      	mov	r0, r3
 80048bc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80048c0:	461a      	mov	r2, r3
 80048c2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80048c6:	4619      	mov	r1, r3
 80048c8:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80048cc:	9302      	str	r3, [sp, #8]
 80048ce:	9101      	str	r1, [sp, #4]
 80048d0:	9200      	str	r2, [sp, #0]
 80048d2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80048d6:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80048da:	4601      	mov	r1, r0
 80048dc:	4868      	ldr	r0, [pc, #416]	; (8004a80 <drawObjectToLcd+0x35c>)
 80048de:	f005 fb4b 	bl	8009f78 <iprintf>
		}

		drawBitmapToLcd(o.xstart, o.ystart, bitmapHeader, pixelBuffer, pixelsGotten, scaling);
 80048e2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80048e4:	4618      	mov	r0, r3
 80048e6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80048e8:	4619      	mov	r1, r3
 80048ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 80048f2:	9202      	str	r2, [sp, #8]
 80048f4:	9301      	str	r3, [sp, #4]
 80048f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80048f8:	9300      	str	r3, [sp, #0]
 80048fa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80048fe:	cb0c      	ldmia	r3, {r2, r3}
 8004900:	f000 fb16 	bl	8004f30 <drawBitmapToLcd>
		return 0;
 8004904:	2300      	movs	r3, #0
 8004906:	46a5      	mov	sp, r4
 8004908:	e30b      	b.n	8004f22 <drawObjectToLcd+0x7fe>

	}
	else if(o.objectType==label){
 800490a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800490e:	2b03      	cmp	r3, #3
 8004910:	f040 80fe 	bne.w	8004b10 <drawObjectToLcd+0x3ec>
 8004914:	466b      	mov	r3, sp
 8004916:	461e      	mov	r6, r3
		int expectedChars = o.dataLen - 8;
 8004918:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800491a:	3b08      	subs	r3, #8
 800491c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		if(expectedChars < 0){
 8004920:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004924:	2b00      	cmp	r3, #0
 8004926:	da07      	bge.n	8004938 <drawObjectToLcd+0x214>
			printf("[OV] Error: Too few data bytes to draw string id %d. \n\r", o.objectId);
 8004928:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800492a:	4619      	mov	r1, r3
 800492c:	4855      	ldr	r0, [pc, #340]	; (8004a84 <drawObjectToLcd+0x360>)
 800492e:	f005 fb23 	bl	8009f78 <iprintf>
			return 3;
 8004932:	2303      	movs	r3, #3
 8004934:	46b5      	mov	sp, r6
 8004936:	e2f4      	b.n	8004f22 <drawObjectToLcd+0x7fe>
		}
		int dIndex = 0;
 8004938:	2300      	movs	r3, #0
 800493a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
		uint8_t pixelScaling =	*(data + dIndex++);
 800493e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004942:	1c5a      	adds	r2, r3, #1
 8004944:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8004948:	461a      	mov	r2, r3
 800494a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800494e:	4413      	add	r3, r2
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
		uint8_t hSpace = 		*(data + dIndex++);
 8004956:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800495a:	1c5a      	adds	r2, r3, #1
 800495c:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8004960:	461a      	mov	r2, r3
 8004962:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004966:	4413      	add	r3, r2
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
		uint8_t vSpace = 		*(data + dIndex++);
 800496e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004972:	1c5a      	adds	r2, r3, #1
 8004974:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8004978:	461a      	mov	r2, r3
 800497a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800497e:	4413      	add	r3, r2
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
		uint8_t useBg = 		*(data + dIndex++);
 8004986:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800498a:	1c5a      	adds	r2, r3, #1
 800498c:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8004990:	461a      	mov	r2, r3
 8004992:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004996:	4413      	add	r3, r2
 8004998:	781b      	ldrb	r3, [r3, #0]
 800499a:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
		uint16_t textColor = 	(*(data + dIndex) << 8) + *(data+dIndex+1);
 800499e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80049a2:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80049a6:	4413      	add	r3, r2
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	021b      	lsls	r3, r3, #8
 80049ae:	b29a      	uxth	r2, r3
 80049b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80049b4:	3301      	adds	r3, #1
 80049b6:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 80049ba:	440b      	add	r3, r1
 80049bc:	781b      	ldrb	r3, [r3, #0]
 80049be:	b29b      	uxth	r3, r3
 80049c0:	4413      	add	r3, r2
 80049c2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
		dIndex += 2;
 80049c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80049ca:	3302      	adds	r3, #2
 80049cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
		uint16_t bgColor = 		(*(data + dIndex) << 8) + *(data+dIndex+1);
 80049d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80049d4:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80049d8:	4413      	add	r3, r2
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	b29b      	uxth	r3, r3
 80049de:	021b      	lsls	r3, r3, #8
 80049e0:	b29a      	uxth	r2, r3
 80049e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80049e6:	3301      	adds	r3, #1
 80049e8:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 80049ec:	440b      	add	r3, r1
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	4413      	add	r3, r2
 80049f4:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
		dIndex += 2;
 80049f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80049fc:	3302      	adds	r3, #2
 80049fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
		printf("Label scale %d hspace %d textcolor %04x \n\r", pixelScaling, hSpace, textColor);
 8004a02:	f897 108f 	ldrb.w	r1, [r7, #143]	; 0x8f
 8004a06:	f897 208e 	ldrb.w	r2, [r7, #142]	; 0x8e
 8004a0a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004a0e:	481e      	ldr	r0, [pc, #120]	; (8004a88 <drawObjectToLcd+0x364>)
 8004a10:	f005 fab2 	bl	8009f78 <iprintf>
		char labelString[expectedChars + 1];
 8004a14:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004a18:	1c59      	adds	r1, r3, #1
 8004a1a:	1e4b      	subs	r3, r1, #1
 8004a1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004a20:	460a      	mov	r2, r1
 8004a22:	2300      	movs	r3, #0
 8004a24:	4692      	mov	sl, r2
 8004a26:	469b      	mov	fp, r3
 8004a28:	f04f 0200 	mov.w	r2, #0
 8004a2c:	f04f 0300 	mov.w	r3, #0
 8004a30:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004a34:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004a38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a3c:	460a      	mov	r2, r1
 8004a3e:	2300      	movs	r3, #0
 8004a40:	4690      	mov	r8, r2
 8004a42:	4699      	mov	r9, r3
 8004a44:	f04f 0200 	mov.w	r2, #0
 8004a48:	f04f 0300 	mov.w	r3, #0
 8004a4c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a50:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a54:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a58:	460b      	mov	r3, r1
 8004a5a:	3307      	adds	r3, #7
 8004a5c:	08db      	lsrs	r3, r3, #3
 8004a5e:	00db      	lsls	r3, r3, #3
 8004a60:	ebad 0d03 	sub.w	sp, sp, r3
 8004a64:	ab06      	add	r3, sp, #24
 8004a66:	3300      	adds	r3, #0
 8004a68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		int i;
		for(i = 0; i<expectedChars;i++){
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004a72:	e021      	b.n	8004ab8 <drawObjectToLcd+0x394>
 8004a74:	0800bb4c 	.word	0x0800bb4c
 8004a78:	0800bb68 	.word	0x0800bb68
 8004a7c:	0800bbb4 	.word	0x0800bbb4
 8004a80:	0800bbfc 	.word	0x0800bbfc
 8004a84:	0800bc7c 	.word	0x0800bc7c
 8004a88:	0800bcb4 	.word	0x0800bcb4
			labelString[i] = *(data + dIndex++);
 8004a8c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004a90:	1c5a      	adds	r2, r3, #1
 8004a92:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8004a96:	461a      	mov	r2, r3
 8004a98:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004a9c:	4413      	add	r3, r2
 8004a9e:	7819      	ldrb	r1, [r3, #0]
 8004aa0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004aa4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004aa8:	4413      	add	r3, r2
 8004aaa:	460a      	mov	r2, r1
 8004aac:	701a      	strb	r2, [r3, #0]
		for(i = 0; i<expectedChars;i++){
 8004aae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004ab8:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8004abc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	dbe3      	blt.n	8004a8c <drawObjectToLcd+0x368>
		}
		labelString[expectedChars] = 0;
 8004ac4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004ac8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004acc:	4413      	add	r3, r2
 8004ace:	2200      	movs	r2, #0
 8004ad0:	701a      	strb	r2, [r3, #0]
		drawStringToLcd5x7(o.xstart, o.ystart, pixelScaling, textColor, useBg, bgColor, hSpace, vSpace, labelString);
 8004ad2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004ad4:	469c      	mov	ip, r3
 8004ad6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004ad8:	469e      	mov	lr, r3
 8004ada:	f897 408f 	ldrb.w	r4, [r7, #143]	; 0x8f
 8004ade:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8004ae2:	f897 208e 	ldrb.w	r2, [r7, #142]	; 0x8e
 8004ae6:	f897 108d 	ldrb.w	r1, [r7, #141]	; 0x8d
 8004aea:	f8b7 508a 	ldrh.w	r5, [r7, #138]	; 0x8a
 8004aee:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8004af2:	9004      	str	r0, [sp, #16]
 8004af4:	9103      	str	r1, [sp, #12]
 8004af6:	9202      	str	r2, [sp, #8]
 8004af8:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
 8004afc:	9201      	str	r2, [sp, #4]
 8004afe:	9300      	str	r3, [sp, #0]
 8004b00:	462b      	mov	r3, r5
 8004b02:	4622      	mov	r2, r4
 8004b04:	4671      	mov	r1, lr
 8004b06:	4660      	mov	r0, ip
 8004b08:	f000 fa92 	bl	8005030 <drawStringToLcd5x7>
 8004b0c:	46b5      	mov	sp, r6
 8004b0e:	e207      	b.n	8004f20 <drawObjectToLcd+0x7fc>
	}
	else if(o.objectType == button || o.objectType == screenbutton){
 8004b10:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004b14:	2b02      	cmp	r3, #2
 8004b16:	d004      	beq.n	8004b22 <drawObjectToLcd+0x3fe>
 8004b18:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004b1c:	2b05      	cmp	r3, #5
 8004b1e:	f040 81f7 	bne.w	8004f10 <drawObjectToLcd+0x7ec>
 8004b22:	466b      	mov	r3, sp
 8004b24:	4698      	mov	r8, r3
		//those two objects look the same and their only difference is that screenbutton holds target page in it's data.
		int dIndex = 0;
 8004b26:	2300      	movs	r3, #0
 8004b28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
		if(o.objectType == screenbutton){
 8004b2c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004b30:	2b05      	cmp	r3, #5
 8004b32:	d104      	bne.n	8004b3e <drawObjectToLcd+0x41a>
			dIndex += 1; //skip target page data field
 8004b34:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004b38:	3301      	adds	r3, #1
 8004b3a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
		}
		int dataLeft = o.dataLen - dIndex;
 8004b3e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004b40:	461a      	mov	r2, r3
 8004b42:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004b46:	1ad3      	subs	r3, r2, r3
 8004b48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
		int expectedChars;
		if(dataLeft < 6){
 8004b4c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004b50:	2b05      	cmp	r3, #5
 8004b52:	dc09      	bgt.n	8004b68 <drawObjectToLcd+0x444>
			printf("[OV] Error: Too few visualization data bytes for (screen)button id %d. Need: 6, got: %d \n\r", o.objectId, dataLeft);
 8004b54:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004b56:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004b5a:	4619      	mov	r1, r3
 8004b5c:	48c6      	ldr	r0, [pc, #792]	; (8004e78 <drawObjectToLcd+0x754>)
 8004b5e:	f005 fa0b 	bl	8009f78 <iprintf>
			return 3;
 8004b62:	2303      	movs	r3, #3
 8004b64:	46c5      	mov	sp, r8
 8004b66:	e1dc      	b.n	8004f22 <drawObjectToLcd+0x7fe>
		}
		else if(dataLeft > 6 && dataLeft < 14){
 8004b68:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004b6c:	2b06      	cmp	r3, #6
 8004b6e:	dd0e      	ble.n	8004b8e <drawObjectToLcd+0x46a>
 8004b70:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004b74:	2b0d      	cmp	r3, #13
 8004b76:	dc0a      	bgt.n	8004b8e <drawObjectToLcd+0x46a>
			printf("[OV] Warning: Unexpected ammount of visualization databytes for (screen)button id %d. (Expected either 6 or more than 13, got %d). \n\r", o.objectId, dataLeft);
 8004b78:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004b7a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004b7e:	4619      	mov	r1, r3
 8004b80:	48be      	ldr	r0, [pc, #760]	; (8004e7c <drawObjectToLcd+0x758>)
 8004b82:	f005 f9f9 	bl	8009f78 <iprintf>
			expectedChars = 0;
 8004b86:	2300      	movs	r3, #0
 8004b88:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004b8c:	e004      	b.n	8004b98 <drawObjectToLcd+0x474>
		}
		else{
			expectedChars = dataLeft - 13;
 8004b8e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004b92:	3b0d      	subs	r3, #13
 8004b94:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		}

		uint16_t bitmapUnpressed =		 (*(data+dIndex) << 8) + *(data+dIndex+1);
 8004b98:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004b9c:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8004ba0:	4413      	add	r3, r2
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	021b      	lsls	r3, r3, #8
 8004ba8:	b29a      	uxth	r2, r3
 8004baa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004bae:	3301      	adds	r3, #1
 8004bb0:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 8004bb4:	440b      	add	r3, r1
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	4413      	add	r3, r2
 8004bbc:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
		dIndex += 2;
 8004bc0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004bc4:	3302      	adds	r3, #2
 8004bc6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
		uint16_t bitmapPressed =		 (*(data+dIndex) << 8) + *(data+dIndex+1);
 8004bca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004bce:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8004bd2:	4413      	add	r3, r2
 8004bd4:	781b      	ldrb	r3, [r3, #0]
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	021b      	lsls	r3, r3, #8
 8004bda:	b29a      	uxth	r2, r3
 8004bdc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004be0:	3301      	adds	r3, #1
 8004be2:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 8004be6:	440b      	add	r3, r1
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	4413      	add	r3, r2
 8004bee:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
		dIndex += 2;
 8004bf2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004bf6:	3302      	adds	r3, #2
 8004bf8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
		uint16_t scaling = 	 		 	 (*(data+dIndex) << 8) + *(data+dIndex+1);
 8004bfc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004c00:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8004c04:	4413      	add	r3, r2
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	021b      	lsls	r3, r3, #8
 8004c0c:	b29a      	uxth	r2, r3
 8004c0e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004c12:	3301      	adds	r3, #1
 8004c14:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 8004c18:	440b      	add	r3, r1
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	4413      	add	r3, r2
 8004c20:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
		dIndex += 2;
 8004c24:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004c28:	3302      	adds	r3, #2
 8004c2a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

		int maxPixels = MAX_BITMAP_DRAW_XSIZE*MAX_BITMAP_DRAW_YSIZE;
 8004c2e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004c32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		uint16_t pixelBuffer[maxPixels];
 8004c36:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8004c3a:	1e4b      	subs	r3, r1, #1
 8004c3c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004c40:	460a      	mov	r2, r1
 8004c42:	2300      	movs	r3, #0
 8004c44:	61ba      	str	r2, [r7, #24]
 8004c46:	61fb      	str	r3, [r7, #28]
 8004c48:	f04f 0200 	mov.w	r2, #0
 8004c4c:	f04f 0300 	mov.w	r3, #0
 8004c50:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8004c54:	4628      	mov	r0, r5
 8004c56:	0103      	lsls	r3, r0, #4
 8004c58:	4620      	mov	r0, r4
 8004c5a:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8004c5e:	4620      	mov	r0, r4
 8004c60:	0102      	lsls	r2, r0, #4
 8004c62:	460a      	mov	r2, r1
 8004c64:	2300      	movs	r3, #0
 8004c66:	613a      	str	r2, [r7, #16]
 8004c68:	617b      	str	r3, [r7, #20]
 8004c6a:	f04f 0200 	mov.w	r2, #0
 8004c6e:	f04f 0300 	mov.w	r3, #0
 8004c72:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004c76:	4628      	mov	r0, r5
 8004c78:	0103      	lsls	r3, r0, #4
 8004c7a:	4620      	mov	r0, r4
 8004c7c:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8004c80:	4620      	mov	r0, r4
 8004c82:	0102      	lsls	r2, r0, #4
 8004c84:	460b      	mov	r3, r1
 8004c86:	005b      	lsls	r3, r3, #1
 8004c88:	3307      	adds	r3, #7
 8004c8a:	08db      	lsrs	r3, r3, #3
 8004c8c:	00db      	lsls	r3, r3, #3
 8004c8e:	ebad 0d03 	sub.w	sp, sp, r3
 8004c92:	ab06      	add	r3, sp, #24
 8004c94:	3301      	adds	r3, #1
 8004c96:	085b      	lsrs	r3, r3, #1
 8004c98:	005b      	lsls	r3, r3, #1
 8004c9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		struct bitmap bitmapHeader;
		int pixelsGotten;
		if(state==0){
 8004c9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d10d      	bne.n	8004cc2 <drawObjectToLcd+0x59e>
			pixelsGotten = fetchBitmap(bitmapUnpressed, &bitmapHeader, pixelBuffer, maxPixels);
 8004ca6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8004cb0:	f8b7 00b6 	ldrh.w	r0, [r7, #182]	; 0xb6
 8004cb4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8004cb8:	f7fc ff6c 	bl	8001b94 <fetchBitmap>
 8004cbc:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
 8004cc0:	e00c      	b.n	8004cdc <drawObjectToLcd+0x5b8>
		}
		else{
			pixelsGotten = fetchBitmap(bitmapPressed, &bitmapHeader, pixelBuffer, maxPixels);
 8004cc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8004ccc:	f8b7 00b4 	ldrh.w	r0, [r7, #180]	; 0xb4
 8004cd0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8004cd4:	f7fc ff5e 	bl	8001b94 <fetchBitmap>
 8004cd8:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
		}

		if(objectXSize != bitmapHeader.xsize*scaling || objectYSize != bitmapHeader.ysize*scaling){
 8004cdc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004cde:	461a      	mov	r2, r3
 8004ce0:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8004ce4:	fb02 f303 	mul.w	r3, r2, r3
 8004ce8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d10a      	bne.n	8004d06 <drawObjectToLcd+0x5e2>
 8004cf0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8004cfa:	fb02 f303 	mul.w	r3, r2, r3
 8004cfe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d013      	beq.n	8004d2e <drawObjectToLcd+0x60a>
			printf("[OV] Warning: Scaled bitmap and (page)button (id %d) size mismatch! Object is %d x %d, bitmap is %d x %d scaled by factor of %d.\n\r",o.objectId, objectXSize, objectYSize, bitmapHeader.xsize, bitmapHeader.ysize, scaling);
 8004d06:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004d08:	4618      	mov	r0, r3
 8004d0a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004d12:	4619      	mov	r1, r3
 8004d14:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8004d18:	9302      	str	r3, [sp, #8]
 8004d1a:	9101      	str	r1, [sp, #4]
 8004d1c:	9200      	str	r2, [sp, #0]
 8004d1e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004d22:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004d26:	4601      	mov	r1, r0
 8004d28:	4855      	ldr	r0, [pc, #340]	; (8004e80 <drawObjectToLcd+0x75c>)
 8004d2a:	f005 f925 	bl	8009f78 <iprintf>
		}

		drawBitmapToLcd(o.xstart, o.ystart, bitmapHeader, pixelBuffer, pixelsGotten, scaling);
 8004d2e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004d30:	4618      	mov	r0, r3
 8004d32:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004d34:	4619      	mov	r1, r3
 8004d36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	f8b7 20b2 	ldrh.w	r2, [r7, #178]	; 0xb2
 8004d40:	9202      	str	r2, [sp, #8]
 8004d42:	9301      	str	r3, [sp, #4]
 8004d44:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004d48:	9300      	str	r3, [sp, #0]
 8004d4a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004d4e:	cb0c      	ldmia	r3, {r2, r3}
 8004d50:	f000 f8ee 	bl	8004f30 <drawBitmapToLcd>

		if(expectedChars > 0){
 8004d54:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	f340 80d7 	ble.w	8004f0c <drawObjectToLcd+0x7e8>
 8004d5e:	466b      	mov	r3, sp
 8004d60:	4699      	mov	r9, r3
			uint8_t xoffset =			*(data + dIndex++);
 8004d62:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004d66:	1c5a      	adds	r2, r3, #1
 8004d68:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004d72:	4413      	add	r3, r2
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
			uint8_t yoffset =			*(data + dIndex++);
 8004d7a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004d7e:	1c5a      	adds	r2, r3, #1
 8004d80:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8004d84:	461a      	mov	r2, r3
 8004d86:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004d8a:	4413      	add	r3, r2
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
			uint8_t pixelScaling =		*(data + dIndex++);
 8004d92:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004d96:	1c5a      	adds	r2, r3, #1
 8004d98:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004da2:	4413      	add	r3, r2
 8004da4:	781b      	ldrb	r3, [r3, #0]
 8004da6:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
			uint8_t hSpace =			*(data + dIndex++);
 8004daa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004dae:	1c5a      	adds	r2, r3, #1
 8004db0:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8004db4:	461a      	mov	r2, r3
 8004db6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004dba:	4413      	add	r3, r2
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
			uint8_t vSpace =			*(data + dIndex++);
 8004dc2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004dc6:	1c5a      	adds	r2, r3, #1
 8004dc8:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8004dcc:	461a      	mov	r2, r3
 8004dce:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004dd2:	4413      	add	r3, r2
 8004dd4:	781b      	ldrb	r3, [r3, #0]
 8004dd6:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			uint16_t textColor = (*(data+dIndex) << 8) + *(data+dIndex+1);
 8004dda:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004dde:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8004de2:	4413      	add	r3, r2
 8004de4:	781b      	ldrb	r3, [r3, #0]
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	021b      	lsls	r3, r3, #8
 8004dea:	b29a      	uxth	r2, r3
 8004dec:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004df0:	3301      	adds	r3, #1
 8004df2:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 8004df6:	440b      	add	r3, r1
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	4413      	add	r3, r2
 8004dfe:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
			dIndex += 2;
 8004e02:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004e06:	3302      	adds	r3, #2
 8004e08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
			char textString[expectedChars + 1];
 8004e0c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004e10:	1c59      	adds	r1, r3, #1
 8004e12:	1e4b      	subs	r3, r1, #1
 8004e14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004e18:	460a      	mov	r2, r1
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	60ba      	str	r2, [r7, #8]
 8004e1e:	60fb      	str	r3, [r7, #12]
 8004e20:	f04f 0200 	mov.w	r2, #0
 8004e24:	f04f 0300 	mov.w	r3, #0
 8004e28:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004e2c:	4628      	mov	r0, r5
 8004e2e:	00c3      	lsls	r3, r0, #3
 8004e30:	4620      	mov	r0, r4
 8004e32:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8004e36:	4620      	mov	r0, r4
 8004e38:	00c2      	lsls	r2, r0, #3
 8004e3a:	460a      	mov	r2, r1
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	603a      	str	r2, [r7, #0]
 8004e40:	607b      	str	r3, [r7, #4]
 8004e42:	f04f 0200 	mov.w	r2, #0
 8004e46:	f04f 0300 	mov.w	r3, #0
 8004e4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e4e:	4628      	mov	r0, r5
 8004e50:	00c3      	lsls	r3, r0, #3
 8004e52:	4620      	mov	r0, r4
 8004e54:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8004e58:	4620      	mov	r0, r4
 8004e5a:	00c2      	lsls	r2, r0, #3
 8004e5c:	460b      	mov	r3, r1
 8004e5e:	3307      	adds	r3, #7
 8004e60:	08db      	lsrs	r3, r3, #3
 8004e62:	00db      	lsls	r3, r3, #3
 8004e64:	ebad 0d03 	sub.w	sp, sp, r3
 8004e68:	ab06      	add	r3, sp, #24
 8004e6a:	3300      	adds	r3, #0
 8004e6c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
			int i;
			for(i = 0; i<expectedChars;i++){
 8004e70:	2300      	movs	r3, #0
 8004e72:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004e76:	e01b      	b.n	8004eb0 <drawObjectToLcd+0x78c>
 8004e78:	0800bce0 	.word	0x0800bce0
 8004e7c:	0800bd3c 	.word	0x0800bd3c
 8004e80:	0800bdc4 	.word	0x0800bdc4
				textString[i] = *(data + dIndex++);
 8004e84:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004e88:	1c5a      	adds	r2, r3, #1
 8004e8a:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8004e8e:	461a      	mov	r2, r3
 8004e90:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004e94:	4413      	add	r3, r2
 8004e96:	7819      	ldrb	r1, [r3, #0]
 8004e98:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004e9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ea0:	4413      	add	r3, r2
 8004ea2:	460a      	mov	r2, r1
 8004ea4:	701a      	strb	r2, [r3, #0]
			for(i = 0; i<expectedChars;i++){
 8004ea6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004eaa:	3301      	adds	r3, #1
 8004eac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004eb0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004eb4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	dbe3      	blt.n	8004e84 <drawObjectToLcd+0x760>
			}
			textString[expectedChars] = 0;
 8004ebc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004ec0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004ec4:	4413      	add	r3, r2
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	701a      	strb	r2, [r3, #0]
			drawStringToLcd5x7(o.xstart+xoffset, o.ystart+yoffset, pixelScaling, textColor, 0, 0x0000, hSpace, vSpace, textString);
 8004eca:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004ecc:	461a      	mov	r2, r3
 8004ece:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8004ed2:	18d0      	adds	r0, r2, r3
 8004ed4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	f897 30a2 	ldrb.w	r3, [r7, #162]	; 0xa2
 8004edc:	18d4      	adds	r4, r2, r3
 8004ede:	f897 50a1 	ldrb.w	r5, [r7, #161]	; 0xa1
 8004ee2:	f897 30a0 	ldrb.w	r3, [r7, #160]	; 0xa0
 8004ee6:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 8004eea:	f8b7 609c 	ldrh.w	r6, [r7, #156]	; 0x9c
 8004eee:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8004ef2:	9104      	str	r1, [sp, #16]
 8004ef4:	9203      	str	r2, [sp, #12]
 8004ef6:	9302      	str	r3, [sp, #8]
 8004ef8:	2300      	movs	r3, #0
 8004efa:	9301      	str	r3, [sp, #4]
 8004efc:	2300      	movs	r3, #0
 8004efe:	9300      	str	r3, [sp, #0]
 8004f00:	4633      	mov	r3, r6
 8004f02:	462a      	mov	r2, r5
 8004f04:	4621      	mov	r1, r4
 8004f06:	f000 f893 	bl	8005030 <drawStringToLcd5x7>
 8004f0a:	46cd      	mov	sp, r9
 8004f0c:	46c5      	mov	sp, r8
	else if(o.objectType == button || o.objectType == screenbutton){
 8004f0e:	e007      	b.n	8004f20 <drawObjectToLcd+0x7fc>
		}

	}
	else{
		printf("[OV] Error: drawObjectToLcd() not implemented for object type [%s]. \n\r", objName);
 8004f10:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004f14:	4619      	mov	r1, r3
 8004f16:	4805      	ldr	r0, [pc, #20]	; (8004f2c <drawObjectToLcd+0x808>)
 8004f18:	f005 f82e 	bl	8009f78 <iprintf>
		return 100;
 8004f1c:	2364      	movs	r3, #100	; 0x64
 8004f1e:	e000      	b.n	8004f22 <drawObjectToLcd+0x7fe>
	}
	return 0;
 8004f20:	2300      	movs	r3, #0
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	37e4      	adds	r7, #228	; 0xe4
 8004f26:	46bd      	mov	sp, r7
 8004f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f2c:	0800be48 	.word	0x0800be48

08004f30 <drawBitmapToLcd>:

/*
 * Draws first @pixelCount pixels of a bitmap to lcd starting at xstart ystart, using provided buffer of pixels and scaling.
 */
void drawBitmapToLcd(int xstart, int ystart, struct bitmap bitmapHeader, uint16_t *pixelBuffer, uint16_t pixelCount, uint16_t scaling){
 8004f30:	b590      	push	{r4, r7, lr}
 8004f32:	b08d      	sub	sp, #52	; 0x34
 8004f34:	af02      	add	r7, sp, #8
 8004f36:	60f8      	str	r0, [r7, #12]
 8004f38:	60b9      	str	r1, [r7, #8]
 8004f3a:	4639      	mov	r1, r7
 8004f3c:	e881 000c 	stmia.w	r1, {r2, r3}
	uint16_t pixelIndex = 0;
 8004f40:	2300      	movs	r3, #0
 8004f42:	84fb      	strh	r3, [r7, #38]	; 0x26
	int xpos = xstart;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	623b      	str	r3, [r7, #32]
	int ypos = ystart;
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	61fb      	str	r3, [r7, #28]
	printf("[OV] Drawing bitmap at [%d , %d], %d pixels, scale = %d\n\r", xstart, ystart, pixelCount, scaling);
 8004f4c:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8004f4e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004f52:	9300      	str	r3, [sp, #0]
 8004f54:	4613      	mov	r3, r2
 8004f56:	68ba      	ldr	r2, [r7, #8]
 8004f58:	68f9      	ldr	r1, [r7, #12]
 8004f5a:	4834      	ldr	r0, [pc, #208]	; (800502c <drawBitmapToLcd+0xfc>)
 8004f5c:	f005 f80c 	bl	8009f78 <iprintf>
	while(pixelIndex < pixelCount){
 8004f60:	e05b      	b.n	800501a <drawBitmapToLcd+0xea>
		uint16_t pixelColor = pixelBuffer[pixelIndex];
 8004f62:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004f64:	005b      	lsls	r3, r3, #1
 8004f66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f68:	4413      	add	r3, r2
 8004f6a:	881b      	ldrh	r3, [r3, #0]
 8004f6c:	833b      	strh	r3, [r7, #24]
		uint16_t pixel_x_1 = xpos;
 8004f6e:	6a3b      	ldr	r3, [r7, #32]
 8004f70:	82fb      	strh	r3, [r7, #22]
		uint16_t pixel_y_1 = ypos;
 8004f72:	69fb      	ldr	r3, [r7, #28]
 8004f74:	82bb      	strh	r3, [r7, #20]
		uint16_t pixel_x_2 = xpos + scaling;
 8004f76:	6a3b      	ldr	r3, [r7, #32]
 8004f78:	b29a      	uxth	r2, r3
 8004f7a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004f7e:	4413      	add	r3, r2
 8004f80:	837b      	strh	r3, [r7, #26]
		uint16_t pixel_y_2 = ypos + scaling;
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	b29a      	uxth	r2, r3
 8004f86:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004f8a:	4413      	add	r3, r2
 8004f8c:	827b      	strh	r3, [r7, #18]
		if(pixel_x_1 >= LCD_PIXEL_WIDTH){
 8004f8e:	8afb      	ldrh	r3, [r7, #22]
 8004f90:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8004f94:	d303      	bcc.n	8004f9e <drawBitmapToLcd+0x6e>
			pixelIndex++;
 8004f96:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004f98:	3301      	adds	r3, #1
 8004f9a:	84fb      	strh	r3, [r7, #38]	; 0x26
			continue;
 8004f9c:	e03d      	b.n	800501a <drawBitmapToLcd+0xea>
		}
		if(pixel_y_1 >= LCD_PIXEL_HEIGHT){
 8004f9e:	8abb      	ldrh	r3, [r7, #20]
 8004fa0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004fa4:	d23e      	bcs.n	8005024 <drawBitmapToLcd+0xf4>
			return;
		}
		if(pixel_x_2 >= LCD_PIXEL_WIDTH){
 8004fa6:	8b7b      	ldrh	r3, [r7, #26]
 8004fa8:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8004fac:	d302      	bcc.n	8004fb4 <drawBitmapToLcd+0x84>
			pixel_x_2 = LCD_PIXEL_WIDTH - 1;
 8004fae:	f240 13df 	movw	r3, #479	; 0x1df
 8004fb2:	837b      	strh	r3, [r7, #26]
		}
		if(pixel_y_2 >= LCD_PIXEL_HEIGHT){
 8004fb4:	8a7b      	ldrh	r3, [r7, #18]
 8004fb6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004fba:	d302      	bcc.n	8004fc2 <drawBitmapToLcd+0x92>
			pixel_x_2 = LCD_PIXEL_HEIGHT - 1;
 8004fbc:	f240 133f 	movw	r3, #319	; 0x13f
 8004fc0:	837b      	strh	r3, [r7, #26]
		}
		if(pixelColor!=TRANSPARENT){
 8004fc2:	8b3b      	ldrh	r3, [r7, #24]
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d00f      	beq.n	8004fe8 <drawBitmapToLcd+0xb8>
			LCD_fillRect(pixel_x_1, pixel_y_1, pixel_x_2-pixel_x_1, pixel_y_2 - pixel_y_1, pixelColor);
 8004fc8:	8b7a      	ldrh	r2, [r7, #26]
 8004fca:	8afb      	ldrh	r3, [r7, #22]
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	b29c      	uxth	r4, r3
 8004fd0:	8a7a      	ldrh	r2, [r7, #18]
 8004fd2:	8abb      	ldrh	r3, [r7, #20]
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	b29a      	uxth	r2, r3
 8004fd8:	8ab9      	ldrh	r1, [r7, #20]
 8004fda:	8af8      	ldrh	r0, [r7, #22]
 8004fdc:	8b3b      	ldrh	r3, [r7, #24]
 8004fde:	9300      	str	r3, [sp, #0]
 8004fe0:	4613      	mov	r3, r2
 8004fe2:	4622      	mov	r2, r4
 8004fe4:	f7fb fdea 	bl	8000bbc <LCD_fillRect>
		}
		//printf("%04x @ [%d %d]\n\r", pixelColor, pixel_x_1, pixel_y_1);
		xpos+=scaling;
 8004fe8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004fec:	6a3a      	ldr	r2, [r7, #32]
 8004fee:	4413      	add	r3, r2
 8004ff0:	623b      	str	r3, [r7, #32]
		pixelIndex++;
 8004ff2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004ff4:	3301      	adds	r3, #1
 8004ff6:	84fb      	strh	r3, [r7, #38]	; 0x26
		if(pixelIndex % bitmapHeader.xsize==0){
 8004ff8:	887a      	ldrh	r2, [r7, #2]
 8004ffa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004ffc:	fbb3 f1f2 	udiv	r1, r3, r2
 8005000:	fb01 f202 	mul.w	r2, r1, r2
 8005004:	1a9b      	subs	r3, r3, r2
 8005006:	b29b      	uxth	r3, r3
 8005008:	2b00      	cmp	r3, #0
 800500a:	d106      	bne.n	800501a <drawBitmapToLcd+0xea>
			xpos = xstart;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	623b      	str	r3, [r7, #32]
			ypos += scaling;
 8005010:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005014:	69fa      	ldr	r2, [r7, #28]
 8005016:	4413      	add	r3, r2
 8005018:	61fb      	str	r3, [r7, #28]
	while(pixelIndex < pixelCount){
 800501a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800501c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800501e:	429a      	cmp	r2, r3
 8005020:	d39f      	bcc.n	8004f62 <drawBitmapToLcd+0x32>
 8005022:	e000      	b.n	8005026 <drawBitmapToLcd+0xf6>
			return;
 8005024:	bf00      	nop
		}
	}
}
 8005026:	372c      	adds	r7, #44	; 0x2c
 8005028:	46bd      	mov	sp, r7
 800502a:	bd90      	pop	{r4, r7, pc}
 800502c:	0800be90 	.word	0x0800be90

08005030 <drawStringToLcd5x7>:
 * (example - if pixelscaling == 5, a single char will occupy 25x40 pixels on the LCD). If useBackground is 1, then
 * background of chars will be filled with bgColor, otherwise, it will be left as-is.
 * hSpacing and vSpacing define the horizontal and vertical separation of chars in lcd pixels (independent of pixelScaling).
 * Newlines in string are treated as newline + cariiage return.
 */
void drawStringToLcd5x7(int x, int y, int pixelScaling, uint16_t textColor, int useBackground, uint16_t bgColor, int hSpacing, int vSpacing, char *string){
 8005030:	b580      	push	{r7, lr}
 8005032:	b08c      	sub	sp, #48	; 0x30
 8005034:	af04      	add	r7, sp, #16
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	60b9      	str	r1, [r7, #8]
 800503a:	607a      	str	r2, [r7, #4]
 800503c:	807b      	strh	r3, [r7, #2]

	uint16_t charX = x;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	83fb      	strh	r3, [r7, #30]
	uint16_t charY = y;
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	83bb      	strh	r3, [r7, #28]

	int strIndex = 0;
 8005046:	2300      	movs	r3, #0
 8005048:	61bb      	str	r3, [r7, #24]
	while(1){
		char c = *(string + strIndex++);
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	1c5a      	adds	r2, r3, #1
 800504e:	61ba      	str	r2, [r7, #24]
 8005050:	461a      	mov	r2, r3
 8005052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005054:	4413      	add	r3, r2
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	75fb      	strb	r3, [r7, #23]
		if(c==0){
 800505a:	7dfb      	ldrb	r3, [r7, #23]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d03b      	beq.n	80050d8 <drawStringToLcd5x7+0xa8>
			break;
		}
		else if(c=='\r'){ //probably not needed, but just in case
 8005060:	7dfb      	ldrb	r3, [r7, #23]
 8005062:	2b0d      	cmp	r3, #13
 8005064:	d102      	bne.n	800506c <drawStringToLcd5x7+0x3c>
			charX = x;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	83fb      	strh	r3, [r7, #30]
 800506a:	e7ee      	b.n	800504a <drawStringToLcd5x7+0x1a>
		}
		else if(c == '\n'){
 800506c:	7dfb      	ldrb	r3, [r7, #23]
 800506e:	2b0a      	cmp	r3, #10
 8005070:	d10d      	bne.n	800508e <drawStringToLcd5x7+0x5e>
			charX = x;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	83fb      	strh	r3, [r7, #30]
			charY += 8*pixelScaling + vSpacing;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	b29b      	uxth	r3, r3
 800507a:	00db      	lsls	r3, r3, #3
 800507c:	b29a      	uxth	r2, r3
 800507e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005080:	b29b      	uxth	r3, r3
 8005082:	4413      	add	r3, r2
 8005084:	b29a      	uxth	r2, r3
 8005086:	8bbb      	ldrh	r3, [r7, #28]
 8005088:	4413      	add	r3, r2
 800508a:	83bb      	strh	r3, [r7, #28]
 800508c:	e7dd      	b.n	800504a <drawStringToLcd5x7+0x1a>
		}
		else{ //normal character, presumably.
			if(charY > LCD_PIXEL_HEIGHT){
 800508e:	8bbb      	ldrh	r3, [r7, #28]
 8005090:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005094:	d822      	bhi.n	80050dc <drawStringToLcd5x7+0xac>
				break;
			}
			if(charX > LCD_PIXEL_WIDTH){
 8005096:	8bfb      	ldrh	r3, [r7, #30]
 8005098:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800509c:	d81a      	bhi.n	80050d4 <drawStringToLcd5x7+0xa4>
				continue; //because there might be a newline later in string
			}
			drawCharToLcd5x7(charX, charY, pixelScaling, textColor, useBackground, bgColor, c);
 800509e:	8bf8      	ldrh	r0, [r7, #30]
 80050a0:	8bb9      	ldrh	r1, [r7, #28]
 80050a2:	887a      	ldrh	r2, [r7, #2]
 80050a4:	7dfb      	ldrb	r3, [r7, #23]
 80050a6:	9302      	str	r3, [sp, #8]
 80050a8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80050aa:	9301      	str	r3, [sp, #4]
 80050ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ae:	9300      	str	r3, [sp, #0]
 80050b0:	4613      	mov	r3, r2
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	f000 f818 	bl	80050e8 <drawCharToLcd5x7>
			charX += 5*pixelScaling + hSpacing;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	461a      	mov	r2, r3
 80050be:	0092      	lsls	r2, r2, #2
 80050c0:	4413      	add	r3, r2
 80050c2:	b29a      	uxth	r2, r3
 80050c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	4413      	add	r3, r2
 80050ca:	b29a      	uxth	r2, r3
 80050cc:	8bfb      	ldrh	r3, [r7, #30]
 80050ce:	4413      	add	r3, r2
 80050d0:	83fb      	strh	r3, [r7, #30]
 80050d2:	e7ba      	b.n	800504a <drawStringToLcd5x7+0x1a>
				continue; //because there might be a newline later in string
 80050d4:	bf00      	nop
	while(1){
 80050d6:	e7b8      	b.n	800504a <drawStringToLcd5x7+0x1a>
			break;
 80050d8:	bf00      	nop
 80050da:	e000      	b.n	80050de <drawStringToLcd5x7+0xae>
				break;
 80050dc:	bf00      	nop
		}
	}

}
 80050de:	bf00      	nop
 80050e0:	3720      	adds	r7, #32
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
	...

080050e8 <drawCharToLcd5x7>:

void drawCharToLcd5x7(int x, int y, int pixelScaling, uint16_t textColor, int useBackground, uint16_t bgColor, char c){
 80050e8:	b590      	push	{r4, r7, lr}
 80050ea:	b08f      	sub	sp, #60	; 0x3c
 80050ec:	af02      	add	r7, sp, #8
 80050ee:	60f8      	str	r0, [r7, #12]
 80050f0:	60b9      	str	r1, [r7, #8]
 80050f2:	607a      	str	r2, [r7, #4]
 80050f4:	807b      	strh	r3, [r7, #2]
	int ascii = (int) c;
 80050f6:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80050fa:	61fb      	str	r3, [r7, #28]
	char *charFont = font5x7 + (5*ascii);
 80050fc:	69fa      	ldr	r2, [r7, #28]
 80050fe:	4613      	mov	r3, r2
 8005100:	009b      	lsls	r3, r3, #2
 8005102:	4413      	add	r3, r2
 8005104:	461a      	mov	r2, r3
 8005106:	4b41      	ldr	r3, [pc, #260]	; (800520c <drawCharToLcd5x7+0x124>)
 8005108:	4413      	add	r3, r2
 800510a:	61bb      	str	r3, [r7, #24]
	int i;
	//printf("Drawing char %c @ [%d, %d] \n\r", c, x, y);

	//font is stored as columns!
	int column, row;
	for(column = 0; column < 5; column++){
 800510c:	2300      	movs	r3, #0
 800510e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005110:	e074      	b.n	80051fc <drawCharToLcd5x7+0x114>
		uint8_t columnByte = *(charFont + column);
 8005112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005114:	69ba      	ldr	r2, [r7, #24]
 8005116:	4413      	add	r3, r2
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	75fb      	strb	r3, [r7, #23]
		uint8_t mask = 0x01;
 800511c:	2301      	movs	r3, #1
 800511e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		for(row = 0; row < 8; row++){
 8005122:	2300      	movs	r3, #0
 8005124:	62bb      	str	r3, [r7, #40]	; 0x28
 8005126:	e063      	b.n	80051f0 <drawCharToLcd5x7+0x108>
			uint16_t pixelColor = bgColor;
 8005128:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800512c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if(columnByte & mask){
 800512e:	7dfa      	ldrb	r2, [r7, #23]
 8005130:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005134:	4013      	ands	r3, r2
 8005136:	b2db      	uxtb	r3, r3
 8005138:	2b00      	cmp	r3, #0
 800513a:	d002      	beq.n	8005142 <drawCharToLcd5x7+0x5a>
				pixelColor = textColor;
 800513c:	887b      	ldrh	r3, [r7, #2]
 800513e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005140:	e008      	b.n	8005154 <drawCharToLcd5x7+0x6c>
			}
			else{
				if(!useBackground){
 8005142:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005144:	2b00      	cmp	r3, #0
 8005146:	d105      	bne.n	8005154 <drawCharToLcd5x7+0x6c>
					mask = mask << 1;
 8005148:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800514c:	005b      	lsls	r3, r3, #1
 800514e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					continue;
 8005152:	e04a      	b.n	80051ea <drawCharToLcd5x7+0x102>
				}
			}

			uint16_t pixel_x_1 = x + pixelScaling*column;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	b29a      	uxth	r2, r3
 8005158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800515a:	b29b      	uxth	r3, r3
 800515c:	fb12 f303 	smulbb	r3, r2, r3
 8005160:	b29a      	uxth	r2, r3
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	b29b      	uxth	r3, r3
 8005166:	4413      	add	r3, r2
 8005168:	82bb      	strh	r3, [r7, #20]
			uint16_t pixel_y_1 = y + pixelScaling*row;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	b29a      	uxth	r2, r3
 800516e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005170:	b29b      	uxth	r3, r3
 8005172:	fb12 f303 	smulbb	r3, r2, r3
 8005176:	b29a      	uxth	r2, r3
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	b29b      	uxth	r3, r3
 800517c:	4413      	add	r3, r2
 800517e:	827b      	strh	r3, [r7, #18]
			uint16_t pixel_x_2 = pixel_x_1 + pixelScaling;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	b29a      	uxth	r2, r3
 8005184:	8abb      	ldrh	r3, [r7, #20]
 8005186:	4413      	add	r3, r2
 8005188:	847b      	strh	r3, [r7, #34]	; 0x22
			uint16_t pixel_y_2 = pixel_y_1 + pixelScaling;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	b29a      	uxth	r2, r3
 800518e:	8a7b      	ldrh	r3, [r7, #18]
 8005190:	4413      	add	r3, r2
 8005192:	843b      	strh	r3, [r7, #32]

			if(pixel_x_1 >= LCD_PIXEL_WIDTH || pixel_y_1 >= LCD_PIXEL_HEIGHT){
 8005194:	8abb      	ldrh	r3, [r7, #20]
 8005196:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800519a:	d22c      	bcs.n	80051f6 <drawCharToLcd5x7+0x10e>
 800519c:	8a7b      	ldrh	r3, [r7, #18]
 800519e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80051a2:	d228      	bcs.n	80051f6 <drawCharToLcd5x7+0x10e>
				break;
			}

			if(pixel_x_2 >= LCD_PIXEL_WIDTH){
 80051a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80051a6:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80051aa:	d302      	bcc.n	80051b2 <drawCharToLcd5x7+0xca>
				pixel_x_2 = LCD_PIXEL_WIDTH - 1;
 80051ac:	f240 13df 	movw	r3, #479	; 0x1df
 80051b0:	847b      	strh	r3, [r7, #34]	; 0x22
			}
			if(pixel_y_2 >= LCD_PIXEL_HEIGHT){
 80051b2:	8c3b      	ldrh	r3, [r7, #32]
 80051b4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80051b8:	d302      	bcc.n	80051c0 <drawCharToLcd5x7+0xd8>
				pixel_y_2 = LCD_PIXEL_HEIGHT - 1;
 80051ba:	f240 133f 	movw	r3, #319	; 0x13f
 80051be:	843b      	strh	r3, [r7, #32]
			}

			LCD_fillRect(pixel_x_1, pixel_y_1, pixel_x_2-pixel_x_1, pixel_y_2 - pixel_y_1, pixelColor);
 80051c0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80051c2:	8abb      	ldrh	r3, [r7, #20]
 80051c4:	1ad3      	subs	r3, r2, r3
 80051c6:	b29c      	uxth	r4, r3
 80051c8:	8c3a      	ldrh	r2, [r7, #32]
 80051ca:	8a7b      	ldrh	r3, [r7, #18]
 80051cc:	1ad3      	subs	r3, r2, r3
 80051ce:	b29a      	uxth	r2, r3
 80051d0:	8a79      	ldrh	r1, [r7, #18]
 80051d2:	8ab8      	ldrh	r0, [r7, #20]
 80051d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80051d6:	9300      	str	r3, [sp, #0]
 80051d8:	4613      	mov	r3, r2
 80051da:	4622      	mov	r2, r4
 80051dc:	f7fb fcee 	bl	8000bbc <LCD_fillRect>
			mask = mask << 1;
 80051e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80051e4:	005b      	lsls	r3, r3, #1
 80051e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		for(row = 0; row < 8; row++){
 80051ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ec:	3301      	adds	r3, #1
 80051ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80051f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f2:	2b07      	cmp	r3, #7
 80051f4:	dd98      	ble.n	8005128 <drawCharToLcd5x7+0x40>
	for(column = 0; column < 5; column++){
 80051f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051f8:	3301      	adds	r3, #1
 80051fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051fe:	2b04      	cmp	r3, #4
 8005200:	dd87      	ble.n	8005112 <drawCharToLcd5x7+0x2a>
		}
	}

}
 8005202:	bf00      	nop
 8005204:	bf00      	nop
 8005206:	3734      	adds	r7, #52	; 0x34
 8005208:	46bd      	mov	sp, r7
 800520a:	bd90      	pop	{r4, r7, pc}
 800520c:	0800bed4 	.word	0x0800bed4

08005210 <SPI1_Transfer>:
#include <stm32f4xx_hal_gpio.h>
#include <stdio.h>


uint8_t SPI1_Transfer(uint8_t data)
{
 8005210:	b480      	push	{r7}
 8005212:	b085      	sub	sp, #20
 8005214:	af00      	add	r7, sp, #0
 8005216:	4603      	mov	r3, r0
 8005218:	71fb      	strb	r3, [r7, #7]
	SPI_TypeDef *SPI1inst = hspi1.Instance;
 800521a:	4b12      	ldr	r3, [pc, #72]	; (8005264 <SPI1_Transfer+0x54>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	60fb      	str	r3, [r7, #12]
    SPI1inst->DR = data;
 8005220:	79fa      	ldrb	r2, [r7, #7]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	60da      	str	r2, [r3, #12]
    while (!(SPI1inst->SR & (SPI_FLAG_TXE)));
 8005226:	bf00      	nop
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	f003 0302 	and.w	r3, r3, #2
 8005230:	2b00      	cmp	r3, #0
 8005232:	d0f9      	beq.n	8005228 <SPI1_Transfer+0x18>
    while (!(SPI1inst->SR & (SPI_FLAG_RXNE)));
 8005234:	bf00      	nop
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	f003 0301 	and.w	r3, r3, #1
 800523e:	2b00      	cmp	r3, #0
 8005240:	d0f9      	beq.n	8005236 <SPI1_Transfer+0x26>
    while (SPI1inst->SR & (SPI_FLAG_BSY));
 8005242:	bf00      	nop
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800524c:	2b00      	cmp	r3, #0
 800524e:	d1f9      	bne.n	8005244 <SPI1_Transfer+0x34>
    return SPI1inst->DR;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	b2db      	uxtb	r3, r3
}
 8005256:	4618      	mov	r0, r3
 8005258:	3714      	adds	r7, #20
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr
 8005262:	bf00      	nop
 8005264:	200020b4 	.word	0x200020b4

08005268 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005268:	b480      	push	{r7}
 800526a:	b083      	sub	sp, #12
 800526c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800526e:	2300      	movs	r3, #0
 8005270:	607b      	str	r3, [r7, #4]
 8005272:	4b10      	ldr	r3, [pc, #64]	; (80052b4 <HAL_MspInit+0x4c>)
 8005274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005276:	4a0f      	ldr	r2, [pc, #60]	; (80052b4 <HAL_MspInit+0x4c>)
 8005278:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800527c:	6453      	str	r3, [r2, #68]	; 0x44
 800527e:	4b0d      	ldr	r3, [pc, #52]	; (80052b4 <HAL_MspInit+0x4c>)
 8005280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005282:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005286:	607b      	str	r3, [r7, #4]
 8005288:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800528a:	2300      	movs	r3, #0
 800528c:	603b      	str	r3, [r7, #0]
 800528e:	4b09      	ldr	r3, [pc, #36]	; (80052b4 <HAL_MspInit+0x4c>)
 8005290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005292:	4a08      	ldr	r2, [pc, #32]	; (80052b4 <HAL_MspInit+0x4c>)
 8005294:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005298:	6413      	str	r3, [r2, #64]	; 0x40
 800529a:	4b06      	ldr	r3, [pc, #24]	; (80052b4 <HAL_MspInit+0x4c>)
 800529c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052a2:	603b      	str	r3, [r7, #0]
 80052a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80052a6:	bf00      	nop
 80052a8:	370c      	adds	r7, #12
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr
 80052b2:	bf00      	nop
 80052b4:	40023800 	.word	0x40023800

080052b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b08a      	sub	sp, #40	; 0x28
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052c0:	f107 0314 	add.w	r3, r7, #20
 80052c4:	2200      	movs	r2, #0
 80052c6:	601a      	str	r2, [r3, #0]
 80052c8:	605a      	str	r2, [r3, #4]
 80052ca:	609a      	str	r2, [r3, #8]
 80052cc:	60da      	str	r2, [r3, #12]
 80052ce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a19      	ldr	r2, [pc, #100]	; (800533c <HAL_I2C_MspInit+0x84>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d12b      	bne.n	8005332 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80052da:	2300      	movs	r3, #0
 80052dc:	613b      	str	r3, [r7, #16]
 80052de:	4b18      	ldr	r3, [pc, #96]	; (8005340 <HAL_I2C_MspInit+0x88>)
 80052e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e2:	4a17      	ldr	r2, [pc, #92]	; (8005340 <HAL_I2C_MspInit+0x88>)
 80052e4:	f043 0302 	orr.w	r3, r3, #2
 80052e8:	6313      	str	r3, [r2, #48]	; 0x30
 80052ea:	4b15      	ldr	r3, [pc, #84]	; (8005340 <HAL_I2C_MspInit+0x88>)
 80052ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ee:	f003 0302 	and.w	r3, r3, #2
 80052f2:	613b      	str	r3, [r7, #16]
 80052f4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80052f6:	23c0      	movs	r3, #192	; 0xc0
 80052f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80052fa:	2312      	movs	r3, #18
 80052fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80052fe:	2301      	movs	r3, #1
 8005300:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005302:	2303      	movs	r3, #3
 8005304:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005306:	2304      	movs	r3, #4
 8005308:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800530a:	f107 0314 	add.w	r3, r7, #20
 800530e:	4619      	mov	r1, r3
 8005310:	480c      	ldr	r0, [pc, #48]	; (8005344 <HAL_I2C_MspInit+0x8c>)
 8005312:	f000 feff 	bl	8006114 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005316:	2300      	movs	r3, #0
 8005318:	60fb      	str	r3, [r7, #12]
 800531a:	4b09      	ldr	r3, [pc, #36]	; (8005340 <HAL_I2C_MspInit+0x88>)
 800531c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531e:	4a08      	ldr	r2, [pc, #32]	; (8005340 <HAL_I2C_MspInit+0x88>)
 8005320:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005324:	6413      	str	r3, [r2, #64]	; 0x40
 8005326:	4b06      	ldr	r3, [pc, #24]	; (8005340 <HAL_I2C_MspInit+0x88>)
 8005328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800532a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800532e:	60fb      	str	r3, [r7, #12]
 8005330:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005332:	bf00      	nop
 8005334:	3728      	adds	r7, #40	; 0x28
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	40005400 	.word	0x40005400
 8005340:	40023800 	.word	0x40023800
 8005344:	40020400 	.word	0x40020400

08005348 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b08a      	sub	sp, #40	; 0x28
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005350:	f107 0314 	add.w	r3, r7, #20
 8005354:	2200      	movs	r2, #0
 8005356:	601a      	str	r2, [r3, #0]
 8005358:	605a      	str	r2, [r3, #4]
 800535a:	609a      	str	r2, [r3, #8]
 800535c:	60da      	str	r2, [r3, #12]
 800535e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a19      	ldr	r2, [pc, #100]	; (80053cc <HAL_SPI_MspInit+0x84>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d12b      	bne.n	80053c2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800536a:	2300      	movs	r3, #0
 800536c:	613b      	str	r3, [r7, #16]
 800536e:	4b18      	ldr	r3, [pc, #96]	; (80053d0 <HAL_SPI_MspInit+0x88>)
 8005370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005372:	4a17      	ldr	r2, [pc, #92]	; (80053d0 <HAL_SPI_MspInit+0x88>)
 8005374:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005378:	6453      	str	r3, [r2, #68]	; 0x44
 800537a:	4b15      	ldr	r3, [pc, #84]	; (80053d0 <HAL_SPI_MspInit+0x88>)
 800537c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800537e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005382:	613b      	str	r3, [r7, #16]
 8005384:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005386:	2300      	movs	r3, #0
 8005388:	60fb      	str	r3, [r7, #12]
 800538a:	4b11      	ldr	r3, [pc, #68]	; (80053d0 <HAL_SPI_MspInit+0x88>)
 800538c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800538e:	4a10      	ldr	r2, [pc, #64]	; (80053d0 <HAL_SPI_MspInit+0x88>)
 8005390:	f043 0301 	orr.w	r3, r3, #1
 8005394:	6313      	str	r3, [r2, #48]	; 0x30
 8005396:	4b0e      	ldr	r3, [pc, #56]	; (80053d0 <HAL_SPI_MspInit+0x88>)
 8005398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800539a:	f003 0301 	and.w	r3, r3, #1
 800539e:	60fb      	str	r3, [r7, #12]
 80053a0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80053a2:	23e0      	movs	r3, #224	; 0xe0
 80053a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053a6:	2302      	movs	r3, #2
 80053a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053aa:	2300      	movs	r3, #0
 80053ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053ae:	2303      	movs	r3, #3
 80053b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80053b2:	2305      	movs	r3, #5
 80053b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053b6:	f107 0314 	add.w	r3, r7, #20
 80053ba:	4619      	mov	r1, r3
 80053bc:	4805      	ldr	r0, [pc, #20]	; (80053d4 <HAL_SPI_MspInit+0x8c>)
 80053be:	f000 fea9 	bl	8006114 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80053c2:	bf00      	nop
 80053c4:	3728      	adds	r7, #40	; 0x28
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	bf00      	nop
 80053cc:	40013000 	.word	0x40013000
 80053d0:	40023800 	.word	0x40023800
 80053d4:	40020000 	.word	0x40020000

080053d8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80053d8:	b480      	push	{r7}
 80053da:	b085      	sub	sp, #20
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a0b      	ldr	r2, [pc, #44]	; (8005414 <HAL_TIM_PWM_MspInit+0x3c>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d10d      	bne.n	8005406 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80053ea:	2300      	movs	r3, #0
 80053ec:	60fb      	str	r3, [r7, #12]
 80053ee:	4b0a      	ldr	r3, [pc, #40]	; (8005418 <HAL_TIM_PWM_MspInit+0x40>)
 80053f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053f2:	4a09      	ldr	r2, [pc, #36]	; (8005418 <HAL_TIM_PWM_MspInit+0x40>)
 80053f4:	f043 0301 	orr.w	r3, r3, #1
 80053f8:	6453      	str	r3, [r2, #68]	; 0x44
 80053fa:	4b07      	ldr	r3, [pc, #28]	; (8005418 <HAL_TIM_PWM_MspInit+0x40>)
 80053fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053fe:	f003 0301 	and.w	r3, r3, #1
 8005402:	60fb      	str	r3, [r7, #12]
 8005404:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8005406:	bf00      	nop
 8005408:	3714      	adds	r7, #20
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr
 8005412:	bf00      	nop
 8005414:	40010000 	.word	0x40010000
 8005418:	40023800 	.word	0x40023800

0800541c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b088      	sub	sp, #32
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005424:	f107 030c 	add.w	r3, r7, #12
 8005428:	2200      	movs	r2, #0
 800542a:	601a      	str	r2, [r3, #0]
 800542c:	605a      	str	r2, [r3, #4]
 800542e:	609a      	str	r2, [r3, #8]
 8005430:	60da      	str	r2, [r3, #12]
 8005432:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a12      	ldr	r2, [pc, #72]	; (8005484 <HAL_TIM_MspPostInit+0x68>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d11e      	bne.n	800547c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800543e:	2300      	movs	r3, #0
 8005440:	60bb      	str	r3, [r7, #8]
 8005442:	4b11      	ldr	r3, [pc, #68]	; (8005488 <HAL_TIM_MspPostInit+0x6c>)
 8005444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005446:	4a10      	ldr	r2, [pc, #64]	; (8005488 <HAL_TIM_MspPostInit+0x6c>)
 8005448:	f043 0301 	orr.w	r3, r3, #1
 800544c:	6313      	str	r3, [r2, #48]	; 0x30
 800544e:	4b0e      	ldr	r3, [pc, #56]	; (8005488 <HAL_TIM_MspPostInit+0x6c>)
 8005450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005452:	f003 0301 	and.w	r3, r3, #1
 8005456:	60bb      	str	r3, [r7, #8]
 8005458:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = LCD_BL_Pin;
 800545a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800545e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005460:	2302      	movs	r3, #2
 8005462:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005464:	2300      	movs	r3, #0
 8005466:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005468:	2300      	movs	r3, #0
 800546a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800546c:	2301      	movs	r3, #1
 800546e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8005470:	f107 030c 	add.w	r3, r7, #12
 8005474:	4619      	mov	r1, r3
 8005476:	4805      	ldr	r0, [pc, #20]	; (800548c <HAL_TIM_MspPostInit+0x70>)
 8005478:	f000 fe4c 	bl	8006114 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800547c:	bf00      	nop
 800547e:	3720      	adds	r7, #32
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}
 8005484:	40010000 	.word	0x40010000
 8005488:	40023800 	.word	0x40023800
 800548c:	40020000 	.word	0x40020000

08005490 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b08c      	sub	sp, #48	; 0x30
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005498:	f107 031c 	add.w	r3, r7, #28
 800549c:	2200      	movs	r2, #0
 800549e:	601a      	str	r2, [r3, #0]
 80054a0:	605a      	str	r2, [r3, #4]
 80054a2:	609a      	str	r2, [r3, #8]
 80054a4:	60da      	str	r2, [r3, #12]
 80054a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a3a      	ldr	r2, [pc, #232]	; (8005598 <HAL_UART_MspInit+0x108>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d135      	bne.n	800551e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80054b2:	2300      	movs	r3, #0
 80054b4:	61bb      	str	r3, [r7, #24]
 80054b6:	4b39      	ldr	r3, [pc, #228]	; (800559c <HAL_UART_MspInit+0x10c>)
 80054b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054ba:	4a38      	ldr	r2, [pc, #224]	; (800559c <HAL_UART_MspInit+0x10c>)
 80054bc:	f043 0310 	orr.w	r3, r3, #16
 80054c0:	6453      	str	r3, [r2, #68]	; 0x44
 80054c2:	4b36      	ldr	r3, [pc, #216]	; (800559c <HAL_UART_MspInit+0x10c>)
 80054c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054c6:	f003 0310 	and.w	r3, r3, #16
 80054ca:	61bb      	str	r3, [r7, #24]
 80054cc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80054ce:	2300      	movs	r3, #0
 80054d0:	617b      	str	r3, [r7, #20]
 80054d2:	4b32      	ldr	r3, [pc, #200]	; (800559c <HAL_UART_MspInit+0x10c>)
 80054d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054d6:	4a31      	ldr	r2, [pc, #196]	; (800559c <HAL_UART_MspInit+0x10c>)
 80054d8:	f043 0301 	orr.w	r3, r3, #1
 80054dc:	6313      	str	r3, [r2, #48]	; 0x30
 80054de:	4b2f      	ldr	r3, [pc, #188]	; (800559c <HAL_UART_MspInit+0x10c>)
 80054e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e2:	f003 0301 	and.w	r3, r3, #1
 80054e6:	617b      	str	r3, [r7, #20]
 80054e8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80054ea:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80054ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054f0:	2302      	movs	r3, #2
 80054f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054f4:	2300      	movs	r3, #0
 80054f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054f8:	2303      	movs	r3, #3
 80054fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80054fc:	2307      	movs	r3, #7
 80054fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005500:	f107 031c 	add.w	r3, r7, #28
 8005504:	4619      	mov	r1, r3
 8005506:	4826      	ldr	r0, [pc, #152]	; (80055a0 <HAL_UART_MspInit+0x110>)
 8005508:	f000 fe04 	bl	8006114 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800550c:	2200      	movs	r2, #0
 800550e:	2100      	movs	r1, #0
 8005510:	2025      	movs	r0, #37	; 0x25
 8005512:	f000 fd36 	bl	8005f82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005516:	2025      	movs	r0, #37	; 0x25
 8005518:	f000 fd4f 	bl	8005fba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800551c:	e038      	b.n	8005590 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a20      	ldr	r2, [pc, #128]	; (80055a4 <HAL_UART_MspInit+0x114>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d133      	bne.n	8005590 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005528:	2300      	movs	r3, #0
 800552a:	613b      	str	r3, [r7, #16]
 800552c:	4b1b      	ldr	r3, [pc, #108]	; (800559c <HAL_UART_MspInit+0x10c>)
 800552e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005530:	4a1a      	ldr	r2, [pc, #104]	; (800559c <HAL_UART_MspInit+0x10c>)
 8005532:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005536:	6413      	str	r3, [r2, #64]	; 0x40
 8005538:	4b18      	ldr	r3, [pc, #96]	; (800559c <HAL_UART_MspInit+0x10c>)
 800553a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800553c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005540:	613b      	str	r3, [r7, #16]
 8005542:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005544:	2300      	movs	r3, #0
 8005546:	60fb      	str	r3, [r7, #12]
 8005548:	4b14      	ldr	r3, [pc, #80]	; (800559c <HAL_UART_MspInit+0x10c>)
 800554a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800554c:	4a13      	ldr	r2, [pc, #76]	; (800559c <HAL_UART_MspInit+0x10c>)
 800554e:	f043 0301 	orr.w	r3, r3, #1
 8005552:	6313      	str	r3, [r2, #48]	; 0x30
 8005554:	4b11      	ldr	r3, [pc, #68]	; (800559c <HAL_UART_MspInit+0x10c>)
 8005556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005558:	f003 0301 	and.w	r3, r3, #1
 800555c:	60fb      	str	r3, [r7, #12]
 800555e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005560:	230c      	movs	r3, #12
 8005562:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005564:	2302      	movs	r3, #2
 8005566:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005568:	2300      	movs	r3, #0
 800556a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800556c:	2303      	movs	r3, #3
 800556e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005570:	2307      	movs	r3, #7
 8005572:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005574:	f107 031c 	add.w	r3, r7, #28
 8005578:	4619      	mov	r1, r3
 800557a:	4809      	ldr	r0, [pc, #36]	; (80055a0 <HAL_UART_MspInit+0x110>)
 800557c:	f000 fdca 	bl	8006114 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005580:	2200      	movs	r2, #0
 8005582:	2100      	movs	r1, #0
 8005584:	2026      	movs	r0, #38	; 0x26
 8005586:	f000 fcfc 	bl	8005f82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800558a:	2026      	movs	r0, #38	; 0x26
 800558c:	f000 fd15 	bl	8005fba <HAL_NVIC_EnableIRQ>
}
 8005590:	bf00      	nop
 8005592:	3730      	adds	r7, #48	; 0x30
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}
 8005598:	40011000 	.word	0x40011000
 800559c:	40023800 	.word	0x40023800
 80055a0:	40020000 	.word	0x40020000
 80055a4:	40004400 	.word	0x40004400

080055a8 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b086      	sub	sp, #24
 80055ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80055ae:	1d3b      	adds	r3, r7, #4
 80055b0:	2200      	movs	r2, #0
 80055b2:	601a      	str	r2, [r3, #0]
 80055b4:	605a      	str	r2, [r3, #4]
 80055b6:	609a      	str	r2, [r3, #8]
 80055b8:	60da      	str	r2, [r3, #12]
 80055ba:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80055bc:	4b1c      	ldr	r3, [pc, #112]	; (8005630 <HAL_FSMC_MspInit+0x88>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d131      	bne.n	8005628 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80055c4:	4b1a      	ldr	r3, [pc, #104]	; (8005630 <HAL_FSMC_MspInit+0x88>)
 80055c6:	2201      	movs	r2, #1
 80055c8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80055ca:	2300      	movs	r3, #0
 80055cc:	603b      	str	r3, [r7, #0]
 80055ce:	4b19      	ldr	r3, [pc, #100]	; (8005634 <HAL_FSMC_MspInit+0x8c>)
 80055d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d2:	4a18      	ldr	r2, [pc, #96]	; (8005634 <HAL_FSMC_MspInit+0x8c>)
 80055d4:	f043 0301 	orr.w	r3, r3, #1
 80055d8:	6393      	str	r3, [r2, #56]	; 0x38
 80055da:	4b16      	ldr	r3, [pc, #88]	; (8005634 <HAL_FSMC_MspInit+0x8c>)
 80055dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055de:	f003 0301 	and.w	r3, r3, #1
 80055e2:	603b      	str	r3, [r7, #0]
 80055e4:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80055e6:	f64f 7380 	movw	r3, #65408	; 0xff80
 80055ea:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055ec:	2302      	movs	r3, #2
 80055ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055f0:	2300      	movs	r3, #0
 80055f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055f4:	2303      	movs	r3, #3
 80055f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80055f8:	230c      	movs	r3, #12
 80055fa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80055fc:	1d3b      	adds	r3, r7, #4
 80055fe:	4619      	mov	r1, r3
 8005600:	480d      	ldr	r0, [pc, #52]	; (8005638 <HAL_FSMC_MspInit+0x90>)
 8005602:	f000 fd87 	bl	8006114 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13
 8005606:	f24e 73b3 	movw	r3, #59315	; 0xe7b3
 800560a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800560c:	2302      	movs	r3, #2
 800560e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005610:	2300      	movs	r3, #0
 8005612:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005614:	2303      	movs	r3, #3
 8005616:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8005618:	230c      	movs	r3, #12
 800561a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800561c:	1d3b      	adds	r3, r7, #4
 800561e:	4619      	mov	r1, r3
 8005620:	4806      	ldr	r0, [pc, #24]	; (800563c <HAL_FSMC_MspInit+0x94>)
 8005622:	f000 fd77 	bl	8006114 <HAL_GPIO_Init>
 8005626:	e000      	b.n	800562a <HAL_FSMC_MspInit+0x82>
    return;
 8005628:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800562a:	3718      	adds	r7, #24
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}
 8005630:	20002a34 	.word	0x20002a34
 8005634:	40023800 	.word	0x40023800
 8005638:	40021000 	.word	0x40021000
 800563c:	40020c00 	.word	0x40020c00

08005640 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8005640:	b580      	push	{r7, lr}
 8005642:	b082      	sub	sp, #8
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8005648:	f7ff ffae 	bl	80055a8 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800564c:	bf00      	nop
 800564e:	3708      	adds	r7, #8
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}

08005654 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005654:	b480      	push	{r7}
 8005656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005658:	e7fe      	b.n	8005658 <NMI_Handler+0x4>

0800565a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800565a:	b480      	push	{r7}
 800565c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800565e:	e7fe      	b.n	800565e <HardFault_Handler+0x4>

08005660 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005660:	b480      	push	{r7}
 8005662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005664:	e7fe      	b.n	8005664 <MemManage_Handler+0x4>

08005666 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005666:	b480      	push	{r7}
 8005668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800566a:	e7fe      	b.n	800566a <BusFault_Handler+0x4>

0800566c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800566c:	b480      	push	{r7}
 800566e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005670:	e7fe      	b.n	8005670 <UsageFault_Handler+0x4>

08005672 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005672:	b480      	push	{r7}
 8005674:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005676:	bf00      	nop
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr

08005680 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005680:	b480      	push	{r7}
 8005682:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005684:	bf00      	nop
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr

0800568e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800568e:	b480      	push	{r7}
 8005690:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005692:	bf00      	nop
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr

0800569c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80056a0:	f000 fb50 	bl	8005d44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80056a4:	bf00      	nop
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80056ac:	2010      	movs	r0, #16
 80056ae:	f000 fee7 	bl	8006480 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80056b2:	bf00      	nop
 80056b4:	bd80      	pop	{r7, pc}
	...

080056b8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b082      	sub	sp, #8
 80056bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  static int ledVal = 0;
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, ledVal);
 80056be:	4b24      	ldr	r3, [pc, #144]	; (8005750 <USART1_IRQHandler+0x98>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	461a      	mov	r2, r3
 80056c6:	2108      	movs	r1, #8
 80056c8:	4822      	ldr	r0, [pc, #136]	; (8005754 <USART1_IRQHandler+0x9c>)
 80056ca:	f000 febf 	bl	800644c <HAL_GPIO_WritePin>
  ledVal = !ledVal;
 80056ce:	4b20      	ldr	r3, [pc, #128]	; (8005750 <USART1_IRQHandler+0x98>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	bf0c      	ite	eq
 80056d6:	2301      	moveq	r3, #1
 80056d8:	2300      	movne	r3, #0
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	461a      	mov	r2, r3
 80056de:	4b1c      	ldr	r3, [pc, #112]	; (8005750 <USART1_IRQHandler+0x98>)
 80056e0:	601a      	str	r2, [r3, #0]
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80056e2:	481d      	ldr	r0, [pc, #116]	; (8005758 <USART1_IRQHandler+0xa0>)
 80056e4:	f003 fbf8 	bl	8008ed8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  volatile unsigned int IIR;
  IIR = USART1->SR;
 80056e8:	4b1c      	ldr	r3, [pc, #112]	; (800575c <USART1_IRQHandler+0xa4>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	603b      	str	r3, [r7, #0]
  if(IIR & UART_FLAG_RXNE){
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	f003 0320 	and.w	r3, r3, #32
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d009      	beq.n	800570c <USART1_IRQHandler+0x54>
  		//Read Data Register Not Empty
  		char t = USART1->DR; // the character from the USART1 data register is saved in t
 80056f8:	4b18      	ldr	r3, [pc, #96]	; (800575c <USART1_IRQHandler+0xa4>)
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	71fb      	strb	r3, [r7, #7]
  		put_in_rx_buffer(t,DBG_UART);
 80056fe:	4b18      	ldr	r3, [pc, #96]	; (8005760 <USART1_IRQHandler+0xa8>)
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	79fb      	ldrb	r3, [r7, #7]
 8005704:	4611      	mov	r1, r2
 8005706:	4618      	mov	r0, r3
 8005708:	f000 f93c 	bl	8005984 <put_in_rx_buffer>
      }
  if(IIR & UART_FLAG_TXE){
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005712:	2b00      	cmp	r3, #0
 8005714:	d018      	beq.n	8005748 <USART1_IRQHandler+0x90>
  		if(wr_pointer_dbg==rd_pointer_dbg){
 8005716:	4b13      	ldr	r3, [pc, #76]	; (8005764 <USART1_IRQHandler+0xac>)
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	4b13      	ldr	r3, [pc, #76]	; (8005768 <USART1_IRQHandler+0xb0>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	429a      	cmp	r2, r3
 8005720:	d108      	bne.n	8005734 <USART1_IRQHandler+0x7c>
  			__HAL_UART_DISABLE_IT(&huart1, UART_IT_TXE); //whole message transmitted
 8005722:	4b0d      	ldr	r3, [pc, #52]	; (8005758 <USART1_IRQHandler+0xa0>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	68da      	ldr	r2, [r3, #12]
 8005728:	4b0b      	ldr	r3, [pc, #44]	; (8005758 <USART1_IRQHandler+0xa0>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005730:	60da      	str	r2, [r3, #12]
  		}
  	}


  /* USER CODE END USART1_IRQn 1 */
}
 8005732:	e009      	b.n	8005748 <USART1_IRQHandler+0x90>
  			DBG_UART->DR = get_from_tx_buffer(DBG_UART);
 8005734:	4b0a      	ldr	r3, [pc, #40]	; (8005760 <USART1_IRQHandler+0xa8>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4618      	mov	r0, r3
 800573a:	f000 f975 	bl	8005a28 <get_from_tx_buffer>
 800573e:	4603      	mov	r3, r0
 8005740:	461a      	mov	r2, r3
 8005742:	4b07      	ldr	r3, [pc, #28]	; (8005760 <USART1_IRQHandler+0xa8>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	605a      	str	r2, [r3, #4]
}
 8005748:	bf00      	nop
 800574a:	3708      	adds	r7, #8
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}
 8005750:	20002a38 	.word	0x20002a38
 8005754:	40020400 	.word	0x40020400
 8005758:	20002154 	.word	0x20002154
 800575c:	40011000 	.word	0x40011000
 8005760:	2000001c 	.word	0x2000001c
 8005764:	2000324c 	.word	0x2000324c
 8005768:	20003248 	.word	0x20003248

0800576c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b082      	sub	sp, #8
 8005770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005772:	481b      	ldr	r0, [pc, #108]	; (80057e0 <USART2_IRQHandler+0x74>)
 8005774:	f003 fbb0 	bl	8008ed8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  volatile unsigned int IIR;
  	IIR=USART2->SR;
 8005778:	4b1a      	ldr	r3, [pc, #104]	; (80057e4 <USART2_IRQHandler+0x78>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	603b      	str	r3, [r7, #0]
    if(IIR & UART_FLAG_RXNE){
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	f003 0320 	and.w	r3, r3, #32
 8005784:	2b00      	cmp	r3, #0
 8005786:	d009      	beq.n	800579c <USART2_IRQHandler+0x30>
  		// check if the USART6 receive interrupt flag was set
  		char t = USART2->DR; // the character from the USART1 data register is saved in t
 8005788:	4b16      	ldr	r3, [pc, #88]	; (80057e4 <USART2_IRQHandler+0x78>)
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	71fb      	strb	r3, [r7, #7]
  		put_in_rx_buffer(t,RS485_UART);
 800578e:	4b16      	ldr	r3, [pc, #88]	; (80057e8 <USART2_IRQHandler+0x7c>)
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	79fb      	ldrb	r3, [r7, #7]
 8005794:	4611      	mov	r1, r2
 8005796:	4618      	mov	r0, r3
 8005798:	f000 f8f4 	bl	8005984 <put_in_rx_buffer>
      }
  	if(IIR & UART_FLAG_TXE){
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d017      	beq.n	80057d6 <USART2_IRQHandler+0x6a>
  		if(wr_pointer_rs485==rd_pointer_rs485){
 80057a6:	4b11      	ldr	r3, [pc, #68]	; (80057ec <USART2_IRQHandler+0x80>)
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	4b11      	ldr	r3, [pc, #68]	; (80057f0 <USART2_IRQHandler+0x84>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d108      	bne.n	80057c4 <USART2_IRQHandler+0x58>
  			__HAL_UART_DISABLE_IT(&huart2, UART_IT_TXE);
 80057b2:	4b0b      	ldr	r3, [pc, #44]	; (80057e0 <USART2_IRQHandler+0x74>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	68da      	ldr	r2, [r3, #12]
 80057b8:	4b09      	ldr	r3, [pc, #36]	; (80057e0 <USART2_IRQHandler+0x74>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80057c0:	60da      	str	r2, [r3, #12]
  			USART2->DR = get_from_tx_buffer(RS485_UART);
  		}
  	}

  /* USER CODE END USART2_IRQn 1 */
}
 80057c2:	e008      	b.n	80057d6 <USART2_IRQHandler+0x6a>
  			USART2->DR = get_from_tx_buffer(RS485_UART);
 80057c4:	4b08      	ldr	r3, [pc, #32]	; (80057e8 <USART2_IRQHandler+0x7c>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4618      	mov	r0, r3
 80057ca:	f000 f92d 	bl	8005a28 <get_from_tx_buffer>
 80057ce:	4603      	mov	r3, r0
 80057d0:	461a      	mov	r2, r3
 80057d2:	4b04      	ldr	r3, [pc, #16]	; (80057e4 <USART2_IRQHandler+0x78>)
 80057d4:	605a      	str	r2, [r3, #4]
}
 80057d6:	bf00      	nop
 80057d8:	3708      	adds	r7, #8
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}
 80057de:	bf00      	nop
 80057e0:	20002198 	.word	0x20002198
 80057e4:	40004400 	.word	0x40004400
 80057e8:	20000018 	.word	0x20000018
 80057ec:	20002e44 	.word	0x20002e44
 80057f0:	20002e40 	.word	0x20002e40

080057f4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b086      	sub	sp, #24
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	60f8      	str	r0, [r7, #12]
 80057fc:	60b9      	str	r1, [r7, #8]
 80057fe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005800:	2300      	movs	r3, #0
 8005802:	617b      	str	r3, [r7, #20]
 8005804:	e00a      	b.n	800581c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005806:	f3af 8000 	nop.w
 800580a:	4601      	mov	r1, r0
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	1c5a      	adds	r2, r3, #1
 8005810:	60ba      	str	r2, [r7, #8]
 8005812:	b2ca      	uxtb	r2, r1
 8005814:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	3301      	adds	r3, #1
 800581a:	617b      	str	r3, [r7, #20]
 800581c:	697a      	ldr	r2, [r7, #20]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	429a      	cmp	r2, r3
 8005822:	dbf0      	blt.n	8005806 <_read+0x12>
	}

return len;
 8005824:	687b      	ldr	r3, [r7, #4]
}
 8005826:	4618      	mov	r0, r3
 8005828:	3718      	adds	r7, #24
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}

0800582e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800582e:	b580      	push	{r7, lr}
 8005830:	b086      	sub	sp, #24
 8005832:	af00      	add	r7, sp, #0
 8005834:	60f8      	str	r0, [r7, #12]
 8005836:	60b9      	str	r1, [r7, #8]
 8005838:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800583a:	2300      	movs	r3, #0
 800583c:	617b      	str	r3, [r7, #20]
 800583e:	e009      	b.n	8005854 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	1c5a      	adds	r2, r3, #1
 8005844:	60ba      	str	r2, [r7, #8]
 8005846:	781b      	ldrb	r3, [r3, #0]
 8005848:	4618      	mov	r0, r3
 800584a:	f000 f889 	bl	8005960 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	3301      	adds	r3, #1
 8005852:	617b      	str	r3, [r7, #20]
 8005854:	697a      	ldr	r2, [r7, #20]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	429a      	cmp	r2, r3
 800585a:	dbf1      	blt.n	8005840 <_write+0x12>
	}
	return len;
 800585c:	687b      	ldr	r3, [r7, #4]
}
 800585e:	4618      	mov	r0, r3
 8005860:	3718      	adds	r7, #24
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}

08005866 <_close>:

int _close(int file)
{
 8005866:	b480      	push	{r7}
 8005868:	b083      	sub	sp, #12
 800586a:	af00      	add	r7, sp, #0
 800586c:	6078      	str	r0, [r7, #4]
	return -1;
 800586e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005872:	4618      	mov	r0, r3
 8005874:	370c      	adds	r7, #12
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr

0800587e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800587e:	b480      	push	{r7}
 8005880:	b083      	sub	sp, #12
 8005882:	af00      	add	r7, sp, #0
 8005884:	6078      	str	r0, [r7, #4]
 8005886:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800588e:	605a      	str	r2, [r3, #4]
	return 0;
 8005890:	2300      	movs	r3, #0
}
 8005892:	4618      	mov	r0, r3
 8005894:	370c      	adds	r7, #12
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr

0800589e <_isatty>:

int _isatty(int file)
{
 800589e:	b480      	push	{r7}
 80058a0:	b083      	sub	sp, #12
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	6078      	str	r0, [r7, #4]
	return 1;
 80058a6:	2301      	movs	r3, #1
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	370c      	adds	r7, #12
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr

080058b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b085      	sub	sp, #20
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	60b9      	str	r1, [r7, #8]
 80058be:	607a      	str	r2, [r7, #4]
	return 0;
 80058c0:	2300      	movs	r3, #0
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3714      	adds	r7, #20
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr
	...

080058d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b086      	sub	sp, #24
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80058d8:	4a14      	ldr	r2, [pc, #80]	; (800592c <_sbrk+0x5c>)
 80058da:	4b15      	ldr	r3, [pc, #84]	; (8005930 <_sbrk+0x60>)
 80058dc:	1ad3      	subs	r3, r2, r3
 80058de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80058e4:	4b13      	ldr	r3, [pc, #76]	; (8005934 <_sbrk+0x64>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d102      	bne.n	80058f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80058ec:	4b11      	ldr	r3, [pc, #68]	; (8005934 <_sbrk+0x64>)
 80058ee:	4a12      	ldr	r2, [pc, #72]	; (8005938 <_sbrk+0x68>)
 80058f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80058f2:	4b10      	ldr	r3, [pc, #64]	; (8005934 <_sbrk+0x64>)
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4413      	add	r3, r2
 80058fa:	693a      	ldr	r2, [r7, #16]
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d207      	bcs.n	8005910 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005900:	f004 fafa 	bl	8009ef8 <__errno>
 8005904:	4603      	mov	r3, r0
 8005906:	220c      	movs	r2, #12
 8005908:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800590a:	f04f 33ff 	mov.w	r3, #4294967295
 800590e:	e009      	b.n	8005924 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005910:	4b08      	ldr	r3, [pc, #32]	; (8005934 <_sbrk+0x64>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005916:	4b07      	ldr	r3, [pc, #28]	; (8005934 <_sbrk+0x64>)
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4413      	add	r3, r2
 800591e:	4a05      	ldr	r2, [pc, #20]	; (8005934 <_sbrk+0x64>)
 8005920:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005922:	68fb      	ldr	r3, [r7, #12]
}
 8005924:	4618      	mov	r0, r3
 8005926:	3718      	adds	r7, #24
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}
 800592c:	20020000 	.word	0x20020000
 8005930:	00000400 	.word	0x00000400
 8005934:	20002a3c 	.word	0x20002a3c
 8005938:	20005678 	.word	0x20005678

0800593c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800593c:	b480      	push	{r7}
 800593e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005940:	4b06      	ldr	r3, [pc, #24]	; (800595c <SystemInit+0x20>)
 8005942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005946:	4a05      	ldr	r2, [pc, #20]	; (800595c <SystemInit+0x20>)
 8005948:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800594c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005950:	bf00      	nop
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr
 800595a:	bf00      	nop
 800595c:	e000ed00 	.word	0xe000ed00

08005960 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

//redirect printf to uart1.
PUTCHAR_PROTOTYPE{
 8005960:	b580      	push	{r7, lr}
 8005962:	b082      	sub	sp, #8
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 0xffff);
 8005968:	1d39      	adds	r1, r7, #4
 800596a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800596e:	2201      	movs	r2, #1
 8005970:	4803      	ldr	r0, [pc, #12]	; (8005980 <__io_putchar+0x20>)
 8005972:	f003 fa1e 	bl	8008db2 <HAL_UART_Transmit>
	return ch;
 8005976:	687b      	ldr	r3, [r7, #4]
}
 8005978:	4618      	mov	r0, r3
 800597a:	3708      	adds	r7, #8
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}
 8005980:	20002154 	.word	0x20002154

08005984 <put_in_rx_buffer>:

void put_in_rx_buffer(char data, USART_TypeDef* USARTx)
{
 8005984:	b480      	push	{r7}
 8005986:	b083      	sub	sp, #12
 8005988:	af00      	add	r7, sp, #0
 800598a:	4603      	mov	r3, r0
 800598c:	6039      	str	r1, [r7, #0]
 800598e:	71fb      	strb	r3, [r7, #7]
	if(USARTx == DBG_UART)
 8005990:	4b1d      	ldr	r3, [pc, #116]	; (8005a08 <put_in_rx_buffer+0x84>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	683a      	ldr	r2, [r7, #0]
 8005996:	429a      	cmp	r2, r3
 8005998:	d114      	bne.n	80059c4 <put_in_rx_buffer+0x40>
	{
		if(SIO_RBUFLEN_DBG>=LEN_RX_BUFFER_DBG)
 800599a:	4b1c      	ldr	r3, [pc, #112]	; (8005a0c <put_in_rx_buffer+0x88>)
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	4b1c      	ldr	r3, [pc, #112]	; (8005a10 <put_in_rx_buffer+0x8c>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	1ad3      	subs	r3, r2, r3
 80059a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059a8:	d226      	bcs.n	80059f8 <put_in_rx_buffer+0x74>
			{
				return;
			}
		rx_buffer_dbg[wr_pointer_rx_dbg & (LEN_RX_BUFFER_DBG - 1)]=data;
 80059aa:	4b18      	ldr	r3, [pc, #96]	; (8005a0c <put_in_rx_buffer+0x88>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80059b2:	4918      	ldr	r1, [pc, #96]	; (8005a14 <put_in_rx_buffer+0x90>)
 80059b4:	79fa      	ldrb	r2, [r7, #7]
 80059b6:	54ca      	strb	r2, [r1, r3]
		wr_pointer_rx_dbg++;
 80059b8:	4b14      	ldr	r3, [pc, #80]	; (8005a0c <put_in_rx_buffer+0x88>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	3301      	adds	r3, #1
 80059be:	4a13      	ldr	r2, [pc, #76]	; (8005a0c <put_in_rx_buffer+0x88>)
 80059c0:	6013      	str	r3, [r2, #0]
 80059c2:	e01c      	b.n	80059fe <put_in_rx_buffer+0x7a>
	}
	else if(USARTx == RS485_UART)
 80059c4:	4b14      	ldr	r3, [pc, #80]	; (8005a18 <put_in_rx_buffer+0x94>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	683a      	ldr	r2, [r7, #0]
 80059ca:	429a      	cmp	r2, r3
 80059cc:	d117      	bne.n	80059fe <put_in_rx_buffer+0x7a>
	{
		if(SIO_RBUFLEN_RS485>=LEN_RX_BUFFER_RS485)
 80059ce:	4b13      	ldr	r3, [pc, #76]	; (8005a1c <put_in_rx_buffer+0x98>)
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	4b13      	ldr	r3, [pc, #76]	; (8005a20 <put_in_rx_buffer+0x9c>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	1ad3      	subs	r3, r2, r3
 80059d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059dc:	d20e      	bcs.n	80059fc <put_in_rx_buffer+0x78>
			{
				return;
			}
		rx_buffer_rs485[wr_pointer_rx_rs485 & (LEN_RX_BUFFER_RS485 - 1)]=data;
 80059de:	4b0f      	ldr	r3, [pc, #60]	; (8005a1c <put_in_rx_buffer+0x98>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80059e6:	490f      	ldr	r1, [pc, #60]	; (8005a24 <put_in_rx_buffer+0xa0>)
 80059e8:	79fa      	ldrb	r2, [r7, #7]
 80059ea:	54ca      	strb	r2, [r1, r3]
		wr_pointer_rx_rs485++;
 80059ec:	4b0b      	ldr	r3, [pc, #44]	; (8005a1c <put_in_rx_buffer+0x98>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	3301      	adds	r3, #1
 80059f2:	4a0a      	ldr	r2, [pc, #40]	; (8005a1c <put_in_rx_buffer+0x98>)
 80059f4:	6013      	str	r3, [r2, #0]
 80059f6:	e002      	b.n	80059fe <put_in_rx_buffer+0x7a>
				return;
 80059f8:	bf00      	nop
 80059fa:	e000      	b.n	80059fe <put_in_rx_buffer+0x7a>
				return;
 80059fc:	bf00      	nop
	}
}
 80059fe:	370c      	adds	r7, #12
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr
 8005a08:	2000001c 	.word	0x2000001c
 8005a0c:	2000565c 	.word	0x2000565c
 8005a10:	20005658 	.word	0x20005658
 8005a14:	20003658 	.word	0x20003658
 8005a18:	20000018 	.word	0x20000018
 8005a1c:	20003654 	.word	0x20003654
 8005a20:	20003650 	.word	0x20003650
 8005a24:	20003250 	.word	0x20003250

08005a28 <get_from_tx_buffer>:
		tx_buffer_dbg[wr_pointer_dbg & (LEN_TX_BUFFER_DBG - 1)]=data;
		wr_pointer_dbg++;
	}
}
char get_from_tx_buffer(USART_TypeDef* USARTx)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b085      	sub	sp, #20
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
	char data;

	if(USARTx == RS485_UART)
 8005a30:	4b14      	ldr	r3, [pc, #80]	; (8005a84 <get_from_tx_buffer+0x5c>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	687a      	ldr	r2, [r7, #4]
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d10c      	bne.n	8005a54 <get_from_tx_buffer+0x2c>
	{

		data=tx_buffer_rs485[rd_pointer_rs485 & (LEN_TX_BUFFER_RS485-1)];
 8005a3a:	4b13      	ldr	r3, [pc, #76]	; (8005a88 <get_from_tx_buffer+0x60>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a42:	4a12      	ldr	r2, [pc, #72]	; (8005a8c <get_from_tx_buffer+0x64>)
 8005a44:	5cd3      	ldrb	r3, [r2, r3]
 8005a46:	73fb      	strb	r3, [r7, #15]
		rd_pointer_rs485++;
 8005a48:	4b0f      	ldr	r3, [pc, #60]	; (8005a88 <get_from_tx_buffer+0x60>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	3301      	adds	r3, #1
 8005a4e:	4a0e      	ldr	r2, [pc, #56]	; (8005a88 <get_from_tx_buffer+0x60>)
 8005a50:	6013      	str	r3, [r2, #0]
 8005a52:	e010      	b.n	8005a76 <get_from_tx_buffer+0x4e>
	}
	else if(USARTx == DBG_UART)
 8005a54:	4b0e      	ldr	r3, [pc, #56]	; (8005a90 <get_from_tx_buffer+0x68>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d10b      	bne.n	8005a76 <get_from_tx_buffer+0x4e>
	{

		data=tx_buffer_dbg[rd_pointer_dbg & (LEN_TX_BUFFER_DBG-1)];
 8005a5e:	4b0d      	ldr	r3, [pc, #52]	; (8005a94 <get_from_tx_buffer+0x6c>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a66:	4a0c      	ldr	r2, [pc, #48]	; (8005a98 <get_from_tx_buffer+0x70>)
 8005a68:	5cd3      	ldrb	r3, [r2, r3]
 8005a6a:	73fb      	strb	r3, [r7, #15]
		rd_pointer_dbg++;
 8005a6c:	4b09      	ldr	r3, [pc, #36]	; (8005a94 <get_from_tx_buffer+0x6c>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	3301      	adds	r3, #1
 8005a72:	4a08      	ldr	r2, [pc, #32]	; (8005a94 <get_from_tx_buffer+0x6c>)
 8005a74:	6013      	str	r3, [r2, #0]
	}
	return data;
 8005a76:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3714      	adds	r7, #20
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr
 8005a84:	20000018 	.word	0x20000018
 8005a88:	20002e40 	.word	0x20002e40
 8005a8c:	20002a40 	.word	0x20002a40
 8005a90:	2000001c 	.word	0x2000001c
 8005a94:	20003248 	.word	0x20003248
 8005a98:	20002e48 	.word	0x20002e48

08005a9c <get_from_rx_buffer>:
char get_from_rx_buffer(USART_TypeDef* USARTx)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b085      	sub	sp, #20
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
	char data;

	if(USARTx == RS485_UART)
 8005aa4:	4b14      	ldr	r3, [pc, #80]	; (8005af8 <get_from_rx_buffer+0x5c>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d10c      	bne.n	8005ac8 <get_from_rx_buffer+0x2c>
	{

		data=rx_buffer_rs485[rd_pointer_rx_rs485 & (LEN_RX_BUFFER_RS485-1)];
 8005aae:	4b13      	ldr	r3, [pc, #76]	; (8005afc <get_from_rx_buffer+0x60>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ab6:	4a12      	ldr	r2, [pc, #72]	; (8005b00 <get_from_rx_buffer+0x64>)
 8005ab8:	5cd3      	ldrb	r3, [r2, r3]
 8005aba:	73fb      	strb	r3, [r7, #15]
		rd_pointer_rx_rs485++;
 8005abc:	4b0f      	ldr	r3, [pc, #60]	; (8005afc <get_from_rx_buffer+0x60>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	3301      	adds	r3, #1
 8005ac2:	4a0e      	ldr	r2, [pc, #56]	; (8005afc <get_from_rx_buffer+0x60>)
 8005ac4:	6013      	str	r3, [r2, #0]
 8005ac6:	e010      	b.n	8005aea <get_from_rx_buffer+0x4e>
	}
	else if(USARTx == DBG_UART)
 8005ac8:	4b0e      	ldr	r3, [pc, #56]	; (8005b04 <get_from_rx_buffer+0x68>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d10b      	bne.n	8005aea <get_from_rx_buffer+0x4e>
	{

		data=rx_buffer_dbg[rd_pointer_rx_dbg & (LEN_RX_BUFFER_DBG-1)];
 8005ad2:	4b0d      	ldr	r3, [pc, #52]	; (8005b08 <get_from_rx_buffer+0x6c>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005ada:	4a0c      	ldr	r2, [pc, #48]	; (8005b0c <get_from_rx_buffer+0x70>)
 8005adc:	5cd3      	ldrb	r3, [r2, r3]
 8005ade:	73fb      	strb	r3, [r7, #15]
		rd_pointer_rx_dbg++;
 8005ae0:	4b09      	ldr	r3, [pc, #36]	; (8005b08 <get_from_rx_buffer+0x6c>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	3301      	adds	r3, #1
 8005ae6:	4a08      	ldr	r2, [pc, #32]	; (8005b08 <get_from_rx_buffer+0x6c>)
 8005ae8:	6013      	str	r3, [r2, #0]
	}
	return data;
 8005aea:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3714      	adds	r7, #20
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr
 8005af8:	20000018 	.word	0x20000018
 8005afc:	20003650 	.word	0x20003650
 8005b00:	20003250 	.word	0x20003250
 8005b04:	2000001c 	.word	0x2000001c
 8005b08:	20005658 	.word	0x20005658
 8005b0c:	20003658 	.word	0x20003658

08005b10 <usart_message_ready>:

	return 0;
}
//**************************************************************************************
char usart_message_ready(USART_TypeDef* USARTx, char delimiter, int maxLen)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b089      	sub	sp, #36	; 0x24
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	460b      	mov	r3, r1
 8005b1a:	607a      	str	r2, [r7, #4]
 8005b1c:	72fb      	strb	r3, [r7, #11]
	int checked = 0;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	61fb      	str	r3, [r7, #28]
	if (USARTx == DBG_UART)
 8005b22:	4b29      	ldr	r3, [pc, #164]	; (8005bc8 <usart_message_ready+0xb8>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	68fa      	ldr	r2, [r7, #12]
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d120      	bne.n	8005b6e <usart_message_ready+0x5e>
	{
		unsigned long tail = rd_pointer_rx_dbg;
 8005b2c:	4b27      	ldr	r3, [pc, #156]	; (8005bcc <usart_message_ready+0xbc>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	61bb      	str	r3, [r7, #24]

		while ((wr_pointer_rx_dbg - tail) != 0)
 8005b32:	e016      	b.n	8005b62 <usart_message_ready+0x52>
		{
			if (rx_buffer_dbg[tail & (LEN_RX_BUFFER_DBG - 1)] == delimiter)
 8005b34:	69bb      	ldr	r3, [r7, #24]
 8005b36:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005b3a:	4a25      	ldr	r2, [pc, #148]	; (8005bd0 <usart_message_ready+0xc0>)
 8005b3c:	5cd3      	ldrb	r3, [r2, r3]
 8005b3e:	b2db      	uxtb	r3, r3
 8005b40:	7afa      	ldrb	r2, [r7, #11]
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d101      	bne.n	8005b4a <usart_message_ready+0x3a>
				return 1;
 8005b46:	2301      	movs	r3, #1
 8005b48:	e037      	b.n	8005bba <usart_message_ready+0xaa>
			++tail;
 8005b4a:	69bb      	ldr	r3, [r7, #24]
 8005b4c:	3301      	adds	r3, #1
 8005b4e:	61bb      	str	r3, [r7, #24]
			++checked;
 8005b50:	69fb      	ldr	r3, [r7, #28]
 8005b52:	3301      	adds	r3, #1
 8005b54:	61fb      	str	r3, [r7, #28]
			if(checked>= maxLen){
 8005b56:	69fa      	ldr	r2, [r7, #28]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	db01      	blt.n	8005b62 <usart_message_ready+0x52>
				return 1;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e02b      	b.n	8005bba <usart_message_ready+0xaa>
		while ((wr_pointer_rx_dbg - tail) != 0)
 8005b62:	4b1c      	ldr	r3, [pc, #112]	; (8005bd4 <usart_message_ready+0xc4>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	69ba      	ldr	r2, [r7, #24]
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d1e3      	bne.n	8005b34 <usart_message_ready+0x24>
 8005b6c:	e024      	b.n	8005bb8 <usart_message_ready+0xa8>
			}
		}
	}
	else if (USARTx == RS485_UART)
 8005b6e:	4b1a      	ldr	r3, [pc, #104]	; (8005bd8 <usart_message_ready+0xc8>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	68fa      	ldr	r2, [r7, #12]
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d11f      	bne.n	8005bb8 <usart_message_ready+0xa8>
	{
		unsigned long tail = rd_pointer_rx_rs485;
 8005b78:	4b18      	ldr	r3, [pc, #96]	; (8005bdc <usart_message_ready+0xcc>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	617b      	str	r3, [r7, #20]

		while ((wr_pointer_rx_rs485 - tail) != 0)
 8005b7e:	e016      	b.n	8005bae <usart_message_ready+0x9e>
		{
			if (rx_buffer_rs485[tail & (LEN_RX_BUFFER_RS485 - 1)] == delimiter)
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b86:	4a16      	ldr	r2, [pc, #88]	; (8005be0 <usart_message_ready+0xd0>)
 8005b88:	5cd3      	ldrb	r3, [r2, r3]
 8005b8a:	b2db      	uxtb	r3, r3
 8005b8c:	7afa      	ldrb	r2, [r7, #11]
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d101      	bne.n	8005b96 <usart_message_ready+0x86>
				return 1;
 8005b92:	2301      	movs	r3, #1
 8005b94:	e011      	b.n	8005bba <usart_message_ready+0xaa>
			++tail;
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	3301      	adds	r3, #1
 8005b9a:	617b      	str	r3, [r7, #20]
			++checked;
 8005b9c:	69fb      	ldr	r3, [r7, #28]
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	61fb      	str	r3, [r7, #28]
			if(checked>= maxLen){
 8005ba2:	69fa      	ldr	r2, [r7, #28]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	db01      	blt.n	8005bae <usart_message_ready+0x9e>
				return 1;
 8005baa:	2301      	movs	r3, #1
 8005bac:	e005      	b.n	8005bba <usart_message_ready+0xaa>
		while ((wr_pointer_rx_rs485 - tail) != 0)
 8005bae:	4b0d      	ldr	r3, [pc, #52]	; (8005be4 <usart_message_ready+0xd4>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	697a      	ldr	r2, [r7, #20]
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d1e3      	bne.n	8005b80 <usart_message_ready+0x70>
			}
		}
	}
	return 0;
 8005bb8:	2300      	movs	r3, #0
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3724      	adds	r7, #36	; 0x24
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr
 8005bc6:	bf00      	nop
 8005bc8:	2000001c 	.word	0x2000001c
 8005bcc:	20005658 	.word	0x20005658
 8005bd0:	20003658 	.word	0x20003658
 8005bd4:	2000565c 	.word	0x2000565c
 8005bd8:	20000018 	.word	0x20000018
 8005bdc:	20003650 	.word	0x20003650
 8005be0:	20003250 	.word	0x20003250
 8005be4:	20003654 	.word	0x20003654

08005be8 <read_usart_message>:
/*
 * Reads message from specified uart rx buffer into @dst until @delimiter character is encountered or @max_len exceeded.
 * Returns: number of characters read if successful, zero when there is no message ready to be read.
 */
unsigned int read_usart_message(char* dst, UART_HandleTypeDef* huart, int max_len, char delimiter)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b086      	sub	sp, #24
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	60f8      	str	r0, [r7, #12]
 8005bf0:	60b9      	str	r1, [r7, #8]
 8005bf2:	607a      	str	r2, [r7, #4]
 8005bf4:	70fb      	strb	r3, [r7, #3]
	USART_TypeDef* USARTx = huart->Instance;
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	613b      	str	r3, [r7, #16]

	if (usart_message_ready(USARTx,delimiter, max_len))
 8005bfc:	78fb      	ldrb	r3, [r7, #3]
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	4619      	mov	r1, r3
 8005c02:	6938      	ldr	r0, [r7, #16]
 8005c04:	f7ff ff84 	bl	8005b10 <usart_message_ready>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d018      	beq.n	8005c40 <read_usart_message+0x58>
	{
		int nr = 0;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	617b      	str	r3, [r7, #20]
		do
		{
			*dst = get_from_rx_buffer(USARTx);
 8005c12:	6938      	ldr	r0, [r7, #16]
 8005c14:	f7ff ff42 	bl	8005a9c <get_from_rx_buffer>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	701a      	strb	r2, [r3, #0]
			++nr;
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	3301      	adds	r3, #1
 8005c24:	617b      	str	r3, [r7, #20]
		} while (*dst++ != delimiter && nr < max_len);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	1c5a      	adds	r2, r3, #1
 8005c2a:	60fa      	str	r2, [r7, #12]
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	78fa      	ldrb	r2, [r7, #3]
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d003      	beq.n	8005c3c <read_usart_message+0x54>
 8005c34:	697a      	ldr	r2, [r7, #20]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	dbea      	blt.n	8005c12 <read_usart_message+0x2a>

		return nr;
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	e000      	b.n	8005c42 <read_usart_message+0x5a>
	}
	return 0;
 8005c40:	2300      	movs	r3, #0
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3718      	adds	r7, #24
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
	...

08005c4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005c4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005c84 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005c50:	480d      	ldr	r0, [pc, #52]	; (8005c88 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005c52:	490e      	ldr	r1, [pc, #56]	; (8005c8c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005c54:	4a0e      	ldr	r2, [pc, #56]	; (8005c90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005c56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005c58:	e002      	b.n	8005c60 <LoopCopyDataInit>

08005c5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005c5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005c5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005c5e:	3304      	adds	r3, #4

08005c60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005c60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005c62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005c64:	d3f9      	bcc.n	8005c5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005c66:	4a0b      	ldr	r2, [pc, #44]	; (8005c94 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005c68:	4c0b      	ldr	r4, [pc, #44]	; (8005c98 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005c6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005c6c:	e001      	b.n	8005c72 <LoopFillZerobss>

08005c6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005c6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005c70:	3204      	adds	r2, #4

08005c72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005c72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005c74:	d3fb      	bcc.n	8005c6e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005c76:	f7ff fe61 	bl	800593c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005c7a:	f004 f943 	bl	8009f04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005c7e:	f7fd ffd9 	bl	8003c34 <main>
  bx  lr    
 8005c82:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005c84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005c88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005c8c:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8005c90:	0800c598 	.word	0x0800c598
  ldr r2, =_sbss
 8005c94:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8005c98:	20005674 	.word	0x20005674

08005c9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005c9c:	e7fe      	b.n	8005c9c <ADC_IRQHandler>
	...

08005ca0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005ca4:	4b0e      	ldr	r3, [pc, #56]	; (8005ce0 <HAL_Init+0x40>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a0d      	ldr	r2, [pc, #52]	; (8005ce0 <HAL_Init+0x40>)
 8005caa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005cae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005cb0:	4b0b      	ldr	r3, [pc, #44]	; (8005ce0 <HAL_Init+0x40>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a0a      	ldr	r2, [pc, #40]	; (8005ce0 <HAL_Init+0x40>)
 8005cb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005cba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005cbc:	4b08      	ldr	r3, [pc, #32]	; (8005ce0 <HAL_Init+0x40>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a07      	ldr	r2, [pc, #28]	; (8005ce0 <HAL_Init+0x40>)
 8005cc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005cc8:	2003      	movs	r0, #3
 8005cca:	f000 f94f 	bl	8005f6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005cce:	2000      	movs	r0, #0
 8005cd0:	f000 f808 	bl	8005ce4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005cd4:	f7ff fac8 	bl	8005268 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005cd8:	2300      	movs	r3, #0
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	bd80      	pop	{r7, pc}
 8005cde:	bf00      	nop
 8005ce0:	40023c00 	.word	0x40023c00

08005ce4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b082      	sub	sp, #8
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005cec:	4b12      	ldr	r3, [pc, #72]	; (8005d38 <HAL_InitTick+0x54>)
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	4b12      	ldr	r3, [pc, #72]	; (8005d3c <HAL_InitTick+0x58>)
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	4619      	mov	r1, r3
 8005cf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005cfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8005cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d02:	4618      	mov	r0, r3
 8005d04:	f000 f967 	bl	8005fd6 <HAL_SYSTICK_Config>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d001      	beq.n	8005d12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e00e      	b.n	8005d30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2b0f      	cmp	r3, #15
 8005d16:	d80a      	bhi.n	8005d2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005d18:	2200      	movs	r2, #0
 8005d1a:	6879      	ldr	r1, [r7, #4]
 8005d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d20:	f000 f92f 	bl	8005f82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005d24:	4a06      	ldr	r2, [pc, #24]	; (8005d40 <HAL_InitTick+0x5c>)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	e000      	b.n	8005d30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3708      	adds	r7, #8
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}
 8005d38:	20000014 	.word	0x20000014
 8005d3c:	20000024 	.word	0x20000024
 8005d40:	20000020 	.word	0x20000020

08005d44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005d44:	b480      	push	{r7}
 8005d46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005d48:	4b06      	ldr	r3, [pc, #24]	; (8005d64 <HAL_IncTick+0x20>)
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	461a      	mov	r2, r3
 8005d4e:	4b06      	ldr	r3, [pc, #24]	; (8005d68 <HAL_IncTick+0x24>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4413      	add	r3, r2
 8005d54:	4a04      	ldr	r2, [pc, #16]	; (8005d68 <HAL_IncTick+0x24>)
 8005d56:	6013      	str	r3, [r2, #0]
}
 8005d58:	bf00      	nop
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr
 8005d62:	bf00      	nop
 8005d64:	20000024 	.word	0x20000024
 8005d68:	20005660 	.word	0x20005660

08005d6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	af00      	add	r7, sp, #0
  return uwTick;
 8005d70:	4b03      	ldr	r3, [pc, #12]	; (8005d80 <HAL_GetTick+0x14>)
 8005d72:	681b      	ldr	r3, [r3, #0]
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	46bd      	mov	sp, r7
 8005d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7c:	4770      	bx	lr
 8005d7e:	bf00      	nop
 8005d80:	20005660 	.word	0x20005660

08005d84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005d8c:	f7ff ffee 	bl	8005d6c <HAL_GetTick>
 8005d90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d9c:	d005      	beq.n	8005daa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005d9e:	4b0a      	ldr	r3, [pc, #40]	; (8005dc8 <HAL_Delay+0x44>)
 8005da0:	781b      	ldrb	r3, [r3, #0]
 8005da2:	461a      	mov	r2, r3
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	4413      	add	r3, r2
 8005da8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005daa:	bf00      	nop
 8005dac:	f7ff ffde 	bl	8005d6c <HAL_GetTick>
 8005db0:	4602      	mov	r2, r0
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	1ad3      	subs	r3, r2, r3
 8005db6:	68fa      	ldr	r2, [r7, #12]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d8f7      	bhi.n	8005dac <HAL_Delay+0x28>
  {
  }
}
 8005dbc:	bf00      	nop
 8005dbe:	bf00      	nop
 8005dc0:	3710      	adds	r7, #16
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}
 8005dc6:	bf00      	nop
 8005dc8:	20000024 	.word	0x20000024

08005dcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b085      	sub	sp, #20
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f003 0307 	and.w	r3, r3, #7
 8005dda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005ddc:	4b0c      	ldr	r3, [pc, #48]	; (8005e10 <__NVIC_SetPriorityGrouping+0x44>)
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005de2:	68ba      	ldr	r2, [r7, #8]
 8005de4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005de8:	4013      	ands	r3, r2
 8005dea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005df4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005df8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005dfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005dfe:	4a04      	ldr	r2, [pc, #16]	; (8005e10 <__NVIC_SetPriorityGrouping+0x44>)
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	60d3      	str	r3, [r2, #12]
}
 8005e04:	bf00      	nop
 8005e06:	3714      	adds	r7, #20
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr
 8005e10:	e000ed00 	.word	0xe000ed00

08005e14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005e14:	b480      	push	{r7}
 8005e16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005e18:	4b04      	ldr	r3, [pc, #16]	; (8005e2c <__NVIC_GetPriorityGrouping+0x18>)
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	0a1b      	lsrs	r3, r3, #8
 8005e1e:	f003 0307 	and.w	r3, r3, #7
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr
 8005e2c:	e000ed00 	.word	0xe000ed00

08005e30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	4603      	mov	r3, r0
 8005e38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	db0b      	blt.n	8005e5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005e42:	79fb      	ldrb	r3, [r7, #7]
 8005e44:	f003 021f 	and.w	r2, r3, #31
 8005e48:	4907      	ldr	r1, [pc, #28]	; (8005e68 <__NVIC_EnableIRQ+0x38>)
 8005e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e4e:	095b      	lsrs	r3, r3, #5
 8005e50:	2001      	movs	r0, #1
 8005e52:	fa00 f202 	lsl.w	r2, r0, r2
 8005e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005e5a:	bf00      	nop
 8005e5c:	370c      	adds	r7, #12
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr
 8005e66:	bf00      	nop
 8005e68:	e000e100 	.word	0xe000e100

08005e6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	4603      	mov	r3, r0
 8005e74:	6039      	str	r1, [r7, #0]
 8005e76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	db0a      	blt.n	8005e96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	b2da      	uxtb	r2, r3
 8005e84:	490c      	ldr	r1, [pc, #48]	; (8005eb8 <__NVIC_SetPriority+0x4c>)
 8005e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e8a:	0112      	lsls	r2, r2, #4
 8005e8c:	b2d2      	uxtb	r2, r2
 8005e8e:	440b      	add	r3, r1
 8005e90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005e94:	e00a      	b.n	8005eac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	b2da      	uxtb	r2, r3
 8005e9a:	4908      	ldr	r1, [pc, #32]	; (8005ebc <__NVIC_SetPriority+0x50>)
 8005e9c:	79fb      	ldrb	r3, [r7, #7]
 8005e9e:	f003 030f 	and.w	r3, r3, #15
 8005ea2:	3b04      	subs	r3, #4
 8005ea4:	0112      	lsls	r2, r2, #4
 8005ea6:	b2d2      	uxtb	r2, r2
 8005ea8:	440b      	add	r3, r1
 8005eaa:	761a      	strb	r2, [r3, #24]
}
 8005eac:	bf00      	nop
 8005eae:	370c      	adds	r7, #12
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr
 8005eb8:	e000e100 	.word	0xe000e100
 8005ebc:	e000ed00 	.word	0xe000ed00

08005ec0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b089      	sub	sp, #36	; 0x24
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	60f8      	str	r0, [r7, #12]
 8005ec8:	60b9      	str	r1, [r7, #8]
 8005eca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f003 0307 	and.w	r3, r3, #7
 8005ed2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005ed4:	69fb      	ldr	r3, [r7, #28]
 8005ed6:	f1c3 0307 	rsb	r3, r3, #7
 8005eda:	2b04      	cmp	r3, #4
 8005edc:	bf28      	it	cs
 8005ede:	2304      	movcs	r3, #4
 8005ee0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005ee2:	69fb      	ldr	r3, [r7, #28]
 8005ee4:	3304      	adds	r3, #4
 8005ee6:	2b06      	cmp	r3, #6
 8005ee8:	d902      	bls.n	8005ef0 <NVIC_EncodePriority+0x30>
 8005eea:	69fb      	ldr	r3, [r7, #28]
 8005eec:	3b03      	subs	r3, #3
 8005eee:	e000      	b.n	8005ef2 <NVIC_EncodePriority+0x32>
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ef8:	69bb      	ldr	r3, [r7, #24]
 8005efa:	fa02 f303 	lsl.w	r3, r2, r3
 8005efe:	43da      	mvns	r2, r3
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	401a      	ands	r2, r3
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005f08:	f04f 31ff 	mov.w	r1, #4294967295
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8005f12:	43d9      	mvns	r1, r3
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f18:	4313      	orrs	r3, r2
         );
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3724      	adds	r7, #36	; 0x24
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr
	...

08005f28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b082      	sub	sp, #8
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	3b01      	subs	r3, #1
 8005f34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005f38:	d301      	bcc.n	8005f3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e00f      	b.n	8005f5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005f3e:	4a0a      	ldr	r2, [pc, #40]	; (8005f68 <SysTick_Config+0x40>)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	3b01      	subs	r3, #1
 8005f44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005f46:	210f      	movs	r1, #15
 8005f48:	f04f 30ff 	mov.w	r0, #4294967295
 8005f4c:	f7ff ff8e 	bl	8005e6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005f50:	4b05      	ldr	r3, [pc, #20]	; (8005f68 <SysTick_Config+0x40>)
 8005f52:	2200      	movs	r2, #0
 8005f54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005f56:	4b04      	ldr	r3, [pc, #16]	; (8005f68 <SysTick_Config+0x40>)
 8005f58:	2207      	movs	r2, #7
 8005f5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005f5c:	2300      	movs	r3, #0
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3708      	adds	r7, #8
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	bf00      	nop
 8005f68:	e000e010 	.word	0xe000e010

08005f6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b082      	sub	sp, #8
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f7ff ff29 	bl	8005dcc <__NVIC_SetPriorityGrouping>
}
 8005f7a:	bf00      	nop
 8005f7c:	3708      	adds	r7, #8
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}

08005f82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005f82:	b580      	push	{r7, lr}
 8005f84:	b086      	sub	sp, #24
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	4603      	mov	r3, r0
 8005f8a:	60b9      	str	r1, [r7, #8]
 8005f8c:	607a      	str	r2, [r7, #4]
 8005f8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005f90:	2300      	movs	r3, #0
 8005f92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005f94:	f7ff ff3e 	bl	8005e14 <__NVIC_GetPriorityGrouping>
 8005f98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	68b9      	ldr	r1, [r7, #8]
 8005f9e:	6978      	ldr	r0, [r7, #20]
 8005fa0:	f7ff ff8e 	bl	8005ec0 <NVIC_EncodePriority>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005faa:	4611      	mov	r1, r2
 8005fac:	4618      	mov	r0, r3
 8005fae:	f7ff ff5d 	bl	8005e6c <__NVIC_SetPriority>
}
 8005fb2:	bf00      	nop
 8005fb4:	3718      	adds	r7, #24
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}

08005fba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005fba:	b580      	push	{r7, lr}
 8005fbc:	b082      	sub	sp, #8
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f7ff ff31 	bl	8005e30 <__NVIC_EnableIRQ>
}
 8005fce:	bf00      	nop
 8005fd0:	3708      	adds	r7, #8
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}

08005fd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005fd6:	b580      	push	{r7, lr}
 8005fd8:	b082      	sub	sp, #8
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f7ff ffa2 	bl	8005f28 <SysTick_Config>
 8005fe4:	4603      	mov	r3, r0
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3708      	adds	r7, #8
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}

08005fee <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005fee:	b580      	push	{r7, lr}
 8005ff0:	b084      	sub	sp, #16
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ffa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005ffc:	f7ff feb6 	bl	8005d6c <HAL_GetTick>
 8006000:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006008:	b2db      	uxtb	r3, r3
 800600a:	2b02      	cmp	r3, #2
 800600c:	d008      	beq.n	8006020 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2280      	movs	r2, #128	; 0x80
 8006012:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2200      	movs	r2, #0
 8006018:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800601c:	2301      	movs	r3, #1
 800601e:	e052      	b.n	80060c6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f022 0216 	bic.w	r2, r2, #22
 800602e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	695a      	ldr	r2, [r3, #20]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800603e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006044:	2b00      	cmp	r3, #0
 8006046:	d103      	bne.n	8006050 <HAL_DMA_Abort+0x62>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800604c:	2b00      	cmp	r3, #0
 800604e:	d007      	beq.n	8006060 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f022 0208 	bic.w	r2, r2, #8
 800605e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f022 0201 	bic.w	r2, r2, #1
 800606e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006070:	e013      	b.n	800609a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006072:	f7ff fe7b 	bl	8005d6c <HAL_GetTick>
 8006076:	4602      	mov	r2, r0
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	1ad3      	subs	r3, r2, r3
 800607c:	2b05      	cmp	r3, #5
 800607e:	d90c      	bls.n	800609a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2220      	movs	r2, #32
 8006084:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2203      	movs	r2, #3
 800608a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2200      	movs	r2, #0
 8006092:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006096:	2303      	movs	r3, #3
 8006098:	e015      	b.n	80060c6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f003 0301 	and.w	r3, r3, #1
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d1e4      	bne.n	8006072 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060ac:	223f      	movs	r2, #63	; 0x3f
 80060ae:	409a      	lsls	r2, r3
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2201      	movs	r2, #1
 80060b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2200      	movs	r2, #0
 80060c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80060c4:	2300      	movs	r3, #0
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3710      	adds	r7, #16
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}

080060ce <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80060ce:	b480      	push	{r7}
 80060d0:	b083      	sub	sp, #12
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80060dc:	b2db      	uxtb	r3, r3
 80060de:	2b02      	cmp	r3, #2
 80060e0:	d004      	beq.n	80060ec <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2280      	movs	r2, #128	; 0x80
 80060e6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	e00c      	b.n	8006106 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2205      	movs	r2, #5
 80060f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	681a      	ldr	r2, [r3, #0]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f022 0201 	bic.w	r2, r2, #1
 8006102:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006104:	2300      	movs	r3, #0
}
 8006106:	4618      	mov	r0, r3
 8006108:	370c      	adds	r7, #12
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr
	...

08006114 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006114:	b480      	push	{r7}
 8006116:	b089      	sub	sp, #36	; 0x24
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800611e:	2300      	movs	r3, #0
 8006120:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006122:	2300      	movs	r3, #0
 8006124:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006126:	2300      	movs	r3, #0
 8006128:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800612a:	2300      	movs	r3, #0
 800612c:	61fb      	str	r3, [r7, #28]
 800612e:	e16b      	b.n	8006408 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006130:	2201      	movs	r2, #1
 8006132:	69fb      	ldr	r3, [r7, #28]
 8006134:	fa02 f303 	lsl.w	r3, r2, r3
 8006138:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	697a      	ldr	r2, [r7, #20]
 8006140:	4013      	ands	r3, r2
 8006142:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006144:	693a      	ldr	r2, [r7, #16]
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	429a      	cmp	r2, r3
 800614a:	f040 815a 	bne.w	8006402 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	f003 0303 	and.w	r3, r3, #3
 8006156:	2b01      	cmp	r3, #1
 8006158:	d005      	beq.n	8006166 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006162:	2b02      	cmp	r3, #2
 8006164:	d130      	bne.n	80061c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800616c:	69fb      	ldr	r3, [r7, #28]
 800616e:	005b      	lsls	r3, r3, #1
 8006170:	2203      	movs	r2, #3
 8006172:	fa02 f303 	lsl.w	r3, r2, r3
 8006176:	43db      	mvns	r3, r3
 8006178:	69ba      	ldr	r2, [r7, #24]
 800617a:	4013      	ands	r3, r2
 800617c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	68da      	ldr	r2, [r3, #12]
 8006182:	69fb      	ldr	r3, [r7, #28]
 8006184:	005b      	lsls	r3, r3, #1
 8006186:	fa02 f303 	lsl.w	r3, r2, r3
 800618a:	69ba      	ldr	r2, [r7, #24]
 800618c:	4313      	orrs	r3, r2
 800618e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	69ba      	ldr	r2, [r7, #24]
 8006194:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800619c:	2201      	movs	r2, #1
 800619e:	69fb      	ldr	r3, [r7, #28]
 80061a0:	fa02 f303 	lsl.w	r3, r2, r3
 80061a4:	43db      	mvns	r3, r3
 80061a6:	69ba      	ldr	r2, [r7, #24]
 80061a8:	4013      	ands	r3, r2
 80061aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	091b      	lsrs	r3, r3, #4
 80061b2:	f003 0201 	and.w	r2, r3, #1
 80061b6:	69fb      	ldr	r3, [r7, #28]
 80061b8:	fa02 f303 	lsl.w	r3, r2, r3
 80061bc:	69ba      	ldr	r2, [r7, #24]
 80061be:	4313      	orrs	r3, r2
 80061c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	69ba      	ldr	r2, [r7, #24]
 80061c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	f003 0303 	and.w	r3, r3, #3
 80061d0:	2b03      	cmp	r3, #3
 80061d2:	d017      	beq.n	8006204 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	68db      	ldr	r3, [r3, #12]
 80061d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80061da:	69fb      	ldr	r3, [r7, #28]
 80061dc:	005b      	lsls	r3, r3, #1
 80061de:	2203      	movs	r2, #3
 80061e0:	fa02 f303 	lsl.w	r3, r2, r3
 80061e4:	43db      	mvns	r3, r3
 80061e6:	69ba      	ldr	r2, [r7, #24]
 80061e8:	4013      	ands	r3, r2
 80061ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	689a      	ldr	r2, [r3, #8]
 80061f0:	69fb      	ldr	r3, [r7, #28]
 80061f2:	005b      	lsls	r3, r3, #1
 80061f4:	fa02 f303 	lsl.w	r3, r2, r3
 80061f8:	69ba      	ldr	r2, [r7, #24]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	69ba      	ldr	r2, [r7, #24]
 8006202:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	f003 0303 	and.w	r3, r3, #3
 800620c:	2b02      	cmp	r3, #2
 800620e:	d123      	bne.n	8006258 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006210:	69fb      	ldr	r3, [r7, #28]
 8006212:	08da      	lsrs	r2, r3, #3
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	3208      	adds	r2, #8
 8006218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800621c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800621e:	69fb      	ldr	r3, [r7, #28]
 8006220:	f003 0307 	and.w	r3, r3, #7
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	220f      	movs	r2, #15
 8006228:	fa02 f303 	lsl.w	r3, r2, r3
 800622c:	43db      	mvns	r3, r3
 800622e:	69ba      	ldr	r2, [r7, #24]
 8006230:	4013      	ands	r3, r2
 8006232:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	691a      	ldr	r2, [r3, #16]
 8006238:	69fb      	ldr	r3, [r7, #28]
 800623a:	f003 0307 	and.w	r3, r3, #7
 800623e:	009b      	lsls	r3, r3, #2
 8006240:	fa02 f303 	lsl.w	r3, r2, r3
 8006244:	69ba      	ldr	r2, [r7, #24]
 8006246:	4313      	orrs	r3, r2
 8006248:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800624a:	69fb      	ldr	r3, [r7, #28]
 800624c:	08da      	lsrs	r2, r3, #3
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	3208      	adds	r2, #8
 8006252:	69b9      	ldr	r1, [r7, #24]
 8006254:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800625e:	69fb      	ldr	r3, [r7, #28]
 8006260:	005b      	lsls	r3, r3, #1
 8006262:	2203      	movs	r2, #3
 8006264:	fa02 f303 	lsl.w	r3, r2, r3
 8006268:	43db      	mvns	r3, r3
 800626a:	69ba      	ldr	r2, [r7, #24]
 800626c:	4013      	ands	r3, r2
 800626e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	f003 0203 	and.w	r2, r3, #3
 8006278:	69fb      	ldr	r3, [r7, #28]
 800627a:	005b      	lsls	r3, r3, #1
 800627c:	fa02 f303 	lsl.w	r3, r2, r3
 8006280:	69ba      	ldr	r2, [r7, #24]
 8006282:	4313      	orrs	r3, r2
 8006284:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	69ba      	ldr	r2, [r7, #24]
 800628a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006294:	2b00      	cmp	r3, #0
 8006296:	f000 80b4 	beq.w	8006402 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800629a:	2300      	movs	r3, #0
 800629c:	60fb      	str	r3, [r7, #12]
 800629e:	4b60      	ldr	r3, [pc, #384]	; (8006420 <HAL_GPIO_Init+0x30c>)
 80062a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062a2:	4a5f      	ldr	r2, [pc, #380]	; (8006420 <HAL_GPIO_Init+0x30c>)
 80062a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80062a8:	6453      	str	r3, [r2, #68]	; 0x44
 80062aa:	4b5d      	ldr	r3, [pc, #372]	; (8006420 <HAL_GPIO_Init+0x30c>)
 80062ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062b2:	60fb      	str	r3, [r7, #12]
 80062b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80062b6:	4a5b      	ldr	r2, [pc, #364]	; (8006424 <HAL_GPIO_Init+0x310>)
 80062b8:	69fb      	ldr	r3, [r7, #28]
 80062ba:	089b      	lsrs	r3, r3, #2
 80062bc:	3302      	adds	r3, #2
 80062be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80062c4:	69fb      	ldr	r3, [r7, #28]
 80062c6:	f003 0303 	and.w	r3, r3, #3
 80062ca:	009b      	lsls	r3, r3, #2
 80062cc:	220f      	movs	r2, #15
 80062ce:	fa02 f303 	lsl.w	r3, r2, r3
 80062d2:	43db      	mvns	r3, r3
 80062d4:	69ba      	ldr	r2, [r7, #24]
 80062d6:	4013      	ands	r3, r2
 80062d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	4a52      	ldr	r2, [pc, #328]	; (8006428 <HAL_GPIO_Init+0x314>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d02b      	beq.n	800633a <HAL_GPIO_Init+0x226>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	4a51      	ldr	r2, [pc, #324]	; (800642c <HAL_GPIO_Init+0x318>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d025      	beq.n	8006336 <HAL_GPIO_Init+0x222>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	4a50      	ldr	r2, [pc, #320]	; (8006430 <HAL_GPIO_Init+0x31c>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d01f      	beq.n	8006332 <HAL_GPIO_Init+0x21e>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	4a4f      	ldr	r2, [pc, #316]	; (8006434 <HAL_GPIO_Init+0x320>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d019      	beq.n	800632e <HAL_GPIO_Init+0x21a>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	4a4e      	ldr	r2, [pc, #312]	; (8006438 <HAL_GPIO_Init+0x324>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d013      	beq.n	800632a <HAL_GPIO_Init+0x216>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	4a4d      	ldr	r2, [pc, #308]	; (800643c <HAL_GPIO_Init+0x328>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d00d      	beq.n	8006326 <HAL_GPIO_Init+0x212>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	4a4c      	ldr	r2, [pc, #304]	; (8006440 <HAL_GPIO_Init+0x32c>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d007      	beq.n	8006322 <HAL_GPIO_Init+0x20e>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	4a4b      	ldr	r2, [pc, #300]	; (8006444 <HAL_GPIO_Init+0x330>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d101      	bne.n	800631e <HAL_GPIO_Init+0x20a>
 800631a:	2307      	movs	r3, #7
 800631c:	e00e      	b.n	800633c <HAL_GPIO_Init+0x228>
 800631e:	2308      	movs	r3, #8
 8006320:	e00c      	b.n	800633c <HAL_GPIO_Init+0x228>
 8006322:	2306      	movs	r3, #6
 8006324:	e00a      	b.n	800633c <HAL_GPIO_Init+0x228>
 8006326:	2305      	movs	r3, #5
 8006328:	e008      	b.n	800633c <HAL_GPIO_Init+0x228>
 800632a:	2304      	movs	r3, #4
 800632c:	e006      	b.n	800633c <HAL_GPIO_Init+0x228>
 800632e:	2303      	movs	r3, #3
 8006330:	e004      	b.n	800633c <HAL_GPIO_Init+0x228>
 8006332:	2302      	movs	r3, #2
 8006334:	e002      	b.n	800633c <HAL_GPIO_Init+0x228>
 8006336:	2301      	movs	r3, #1
 8006338:	e000      	b.n	800633c <HAL_GPIO_Init+0x228>
 800633a:	2300      	movs	r3, #0
 800633c:	69fa      	ldr	r2, [r7, #28]
 800633e:	f002 0203 	and.w	r2, r2, #3
 8006342:	0092      	lsls	r2, r2, #2
 8006344:	4093      	lsls	r3, r2
 8006346:	69ba      	ldr	r2, [r7, #24]
 8006348:	4313      	orrs	r3, r2
 800634a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800634c:	4935      	ldr	r1, [pc, #212]	; (8006424 <HAL_GPIO_Init+0x310>)
 800634e:	69fb      	ldr	r3, [r7, #28]
 8006350:	089b      	lsrs	r3, r3, #2
 8006352:	3302      	adds	r3, #2
 8006354:	69ba      	ldr	r2, [r7, #24]
 8006356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800635a:	4b3b      	ldr	r3, [pc, #236]	; (8006448 <HAL_GPIO_Init+0x334>)
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	43db      	mvns	r3, r3
 8006364:	69ba      	ldr	r2, [r7, #24]
 8006366:	4013      	ands	r3, r2
 8006368:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006372:	2b00      	cmp	r3, #0
 8006374:	d003      	beq.n	800637e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006376:	69ba      	ldr	r2, [r7, #24]
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	4313      	orrs	r3, r2
 800637c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800637e:	4a32      	ldr	r2, [pc, #200]	; (8006448 <HAL_GPIO_Init+0x334>)
 8006380:	69bb      	ldr	r3, [r7, #24]
 8006382:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006384:	4b30      	ldr	r3, [pc, #192]	; (8006448 <HAL_GPIO_Init+0x334>)
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	43db      	mvns	r3, r3
 800638e:	69ba      	ldr	r2, [r7, #24]
 8006390:	4013      	ands	r3, r2
 8006392:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800639c:	2b00      	cmp	r3, #0
 800639e:	d003      	beq.n	80063a8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80063a0:	69ba      	ldr	r2, [r7, #24]
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	4313      	orrs	r3, r2
 80063a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80063a8:	4a27      	ldr	r2, [pc, #156]	; (8006448 <HAL_GPIO_Init+0x334>)
 80063aa:	69bb      	ldr	r3, [r7, #24]
 80063ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80063ae:	4b26      	ldr	r3, [pc, #152]	; (8006448 <HAL_GPIO_Init+0x334>)
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	43db      	mvns	r3, r3
 80063b8:	69ba      	ldr	r2, [r7, #24]
 80063ba:	4013      	ands	r3, r2
 80063bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d003      	beq.n	80063d2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80063ca:	69ba      	ldr	r2, [r7, #24]
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	4313      	orrs	r3, r2
 80063d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80063d2:	4a1d      	ldr	r2, [pc, #116]	; (8006448 <HAL_GPIO_Init+0x334>)
 80063d4:	69bb      	ldr	r3, [r7, #24]
 80063d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80063d8:	4b1b      	ldr	r3, [pc, #108]	; (8006448 <HAL_GPIO_Init+0x334>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	43db      	mvns	r3, r3
 80063e2:	69ba      	ldr	r2, [r7, #24]
 80063e4:	4013      	ands	r3, r2
 80063e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d003      	beq.n	80063fc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80063f4:	69ba      	ldr	r2, [r7, #24]
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	4313      	orrs	r3, r2
 80063fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80063fc:	4a12      	ldr	r2, [pc, #72]	; (8006448 <HAL_GPIO_Init+0x334>)
 80063fe:	69bb      	ldr	r3, [r7, #24]
 8006400:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006402:	69fb      	ldr	r3, [r7, #28]
 8006404:	3301      	adds	r3, #1
 8006406:	61fb      	str	r3, [r7, #28]
 8006408:	69fb      	ldr	r3, [r7, #28]
 800640a:	2b0f      	cmp	r3, #15
 800640c:	f67f ae90 	bls.w	8006130 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006410:	bf00      	nop
 8006412:	bf00      	nop
 8006414:	3724      	adds	r7, #36	; 0x24
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr
 800641e:	bf00      	nop
 8006420:	40023800 	.word	0x40023800
 8006424:	40013800 	.word	0x40013800
 8006428:	40020000 	.word	0x40020000
 800642c:	40020400 	.word	0x40020400
 8006430:	40020800 	.word	0x40020800
 8006434:	40020c00 	.word	0x40020c00
 8006438:	40021000 	.word	0x40021000
 800643c:	40021400 	.word	0x40021400
 8006440:	40021800 	.word	0x40021800
 8006444:	40021c00 	.word	0x40021c00
 8006448:	40013c00 	.word	0x40013c00

0800644c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800644c:	b480      	push	{r7}
 800644e:	b083      	sub	sp, #12
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	460b      	mov	r3, r1
 8006456:	807b      	strh	r3, [r7, #2]
 8006458:	4613      	mov	r3, r2
 800645a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800645c:	787b      	ldrb	r3, [r7, #1]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d003      	beq.n	800646a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006462:	887a      	ldrh	r2, [r7, #2]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006468:	e003      	b.n	8006472 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800646a:	887b      	ldrh	r3, [r7, #2]
 800646c:	041a      	lsls	r2, r3, #16
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	619a      	str	r2, [r3, #24]
}
 8006472:	bf00      	nop
 8006474:	370c      	adds	r7, #12
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr
	...

08006480 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b082      	sub	sp, #8
 8006484:	af00      	add	r7, sp, #0
 8006486:	4603      	mov	r3, r0
 8006488:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800648a:	4b08      	ldr	r3, [pc, #32]	; (80064ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800648c:	695a      	ldr	r2, [r3, #20]
 800648e:	88fb      	ldrh	r3, [r7, #6]
 8006490:	4013      	ands	r3, r2
 8006492:	2b00      	cmp	r3, #0
 8006494:	d006      	beq.n	80064a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006496:	4a05      	ldr	r2, [pc, #20]	; (80064ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006498:	88fb      	ldrh	r3, [r7, #6]
 800649a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800649c:	88fb      	ldrh	r3, [r7, #6]
 800649e:	4618      	mov	r0, r3
 80064a0:	f7fb fa28 	bl	80018f4 <HAL_GPIO_EXTI_Callback>
  }
}
 80064a4:	bf00      	nop
 80064a6:	3708      	adds	r7, #8
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}
 80064ac:	40013c00 	.word	0x40013c00

080064b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b084      	sub	sp, #16
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d101      	bne.n	80064c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	e12b      	b.n	800671a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d106      	bne.n	80064dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2200      	movs	r2, #0
 80064d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f7fe feee 	bl	80052b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2224      	movs	r2, #36	; 0x24
 80064e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f022 0201 	bic.w	r2, r2, #1
 80064f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	681a      	ldr	r2, [r3, #0]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006502:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006512:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006514:	f001 fd7a 	bl	800800c <HAL_RCC_GetPCLK1Freq>
 8006518:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	4a81      	ldr	r2, [pc, #516]	; (8006724 <HAL_I2C_Init+0x274>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d807      	bhi.n	8006534 <HAL_I2C_Init+0x84>
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	4a80      	ldr	r2, [pc, #512]	; (8006728 <HAL_I2C_Init+0x278>)
 8006528:	4293      	cmp	r3, r2
 800652a:	bf94      	ite	ls
 800652c:	2301      	movls	r3, #1
 800652e:	2300      	movhi	r3, #0
 8006530:	b2db      	uxtb	r3, r3
 8006532:	e006      	b.n	8006542 <HAL_I2C_Init+0x92>
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	4a7d      	ldr	r2, [pc, #500]	; (800672c <HAL_I2C_Init+0x27c>)
 8006538:	4293      	cmp	r3, r2
 800653a:	bf94      	ite	ls
 800653c:	2301      	movls	r3, #1
 800653e:	2300      	movhi	r3, #0
 8006540:	b2db      	uxtb	r3, r3
 8006542:	2b00      	cmp	r3, #0
 8006544:	d001      	beq.n	800654a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006546:	2301      	movs	r3, #1
 8006548:	e0e7      	b.n	800671a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	4a78      	ldr	r2, [pc, #480]	; (8006730 <HAL_I2C_Init+0x280>)
 800654e:	fba2 2303 	umull	r2, r3, r2, r3
 8006552:	0c9b      	lsrs	r3, r3, #18
 8006554:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	68ba      	ldr	r2, [r7, #8]
 8006566:	430a      	orrs	r2, r1
 8006568:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	6a1b      	ldr	r3, [r3, #32]
 8006570:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	4a6a      	ldr	r2, [pc, #424]	; (8006724 <HAL_I2C_Init+0x274>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d802      	bhi.n	8006584 <HAL_I2C_Init+0xd4>
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	3301      	adds	r3, #1
 8006582:	e009      	b.n	8006598 <HAL_I2C_Init+0xe8>
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800658a:	fb02 f303 	mul.w	r3, r2, r3
 800658e:	4a69      	ldr	r2, [pc, #420]	; (8006734 <HAL_I2C_Init+0x284>)
 8006590:	fba2 2303 	umull	r2, r3, r2, r3
 8006594:	099b      	lsrs	r3, r3, #6
 8006596:	3301      	adds	r3, #1
 8006598:	687a      	ldr	r2, [r7, #4]
 800659a:	6812      	ldr	r2, [r2, #0]
 800659c:	430b      	orrs	r3, r1
 800659e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	69db      	ldr	r3, [r3, #28]
 80065a6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80065aa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	495c      	ldr	r1, [pc, #368]	; (8006724 <HAL_I2C_Init+0x274>)
 80065b4:	428b      	cmp	r3, r1
 80065b6:	d819      	bhi.n	80065ec <HAL_I2C_Init+0x13c>
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	1e59      	subs	r1, r3, #1
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	005b      	lsls	r3, r3, #1
 80065c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80065c6:	1c59      	adds	r1, r3, #1
 80065c8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80065cc:	400b      	ands	r3, r1
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d00a      	beq.n	80065e8 <HAL_I2C_Init+0x138>
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	1e59      	subs	r1, r3, #1
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	005b      	lsls	r3, r3, #1
 80065dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80065e0:	3301      	adds	r3, #1
 80065e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065e6:	e051      	b.n	800668c <HAL_I2C_Init+0x1dc>
 80065e8:	2304      	movs	r3, #4
 80065ea:	e04f      	b.n	800668c <HAL_I2C_Init+0x1dc>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d111      	bne.n	8006618 <HAL_I2C_Init+0x168>
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	1e58      	subs	r0, r3, #1
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6859      	ldr	r1, [r3, #4]
 80065fc:	460b      	mov	r3, r1
 80065fe:	005b      	lsls	r3, r3, #1
 8006600:	440b      	add	r3, r1
 8006602:	fbb0 f3f3 	udiv	r3, r0, r3
 8006606:	3301      	adds	r3, #1
 8006608:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800660c:	2b00      	cmp	r3, #0
 800660e:	bf0c      	ite	eq
 8006610:	2301      	moveq	r3, #1
 8006612:	2300      	movne	r3, #0
 8006614:	b2db      	uxtb	r3, r3
 8006616:	e012      	b.n	800663e <HAL_I2C_Init+0x18e>
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	1e58      	subs	r0, r3, #1
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6859      	ldr	r1, [r3, #4]
 8006620:	460b      	mov	r3, r1
 8006622:	009b      	lsls	r3, r3, #2
 8006624:	440b      	add	r3, r1
 8006626:	0099      	lsls	r1, r3, #2
 8006628:	440b      	add	r3, r1
 800662a:	fbb0 f3f3 	udiv	r3, r0, r3
 800662e:	3301      	adds	r3, #1
 8006630:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006634:	2b00      	cmp	r3, #0
 8006636:	bf0c      	ite	eq
 8006638:	2301      	moveq	r3, #1
 800663a:	2300      	movne	r3, #0
 800663c:	b2db      	uxtb	r3, r3
 800663e:	2b00      	cmp	r3, #0
 8006640:	d001      	beq.n	8006646 <HAL_I2C_Init+0x196>
 8006642:	2301      	movs	r3, #1
 8006644:	e022      	b.n	800668c <HAL_I2C_Init+0x1dc>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d10e      	bne.n	800666c <HAL_I2C_Init+0x1bc>
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	1e58      	subs	r0, r3, #1
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6859      	ldr	r1, [r3, #4]
 8006656:	460b      	mov	r3, r1
 8006658:	005b      	lsls	r3, r3, #1
 800665a:	440b      	add	r3, r1
 800665c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006660:	3301      	adds	r3, #1
 8006662:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006666:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800666a:	e00f      	b.n	800668c <HAL_I2C_Init+0x1dc>
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	1e58      	subs	r0, r3, #1
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6859      	ldr	r1, [r3, #4]
 8006674:	460b      	mov	r3, r1
 8006676:	009b      	lsls	r3, r3, #2
 8006678:	440b      	add	r3, r1
 800667a:	0099      	lsls	r1, r3, #2
 800667c:	440b      	add	r3, r1
 800667e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006682:	3301      	adds	r3, #1
 8006684:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006688:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800668c:	6879      	ldr	r1, [r7, #4]
 800668e:	6809      	ldr	r1, [r1, #0]
 8006690:	4313      	orrs	r3, r2
 8006692:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	69da      	ldr	r2, [r3, #28]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6a1b      	ldr	r3, [r3, #32]
 80066a6:	431a      	orrs	r2, r3
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	430a      	orrs	r2, r1
 80066ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80066ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80066be:	687a      	ldr	r2, [r7, #4]
 80066c0:	6911      	ldr	r1, [r2, #16]
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	68d2      	ldr	r2, [r2, #12]
 80066c6:	4311      	orrs	r1, r2
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	6812      	ldr	r2, [r2, #0]
 80066cc:	430b      	orrs	r3, r1
 80066ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	68db      	ldr	r3, [r3, #12]
 80066d6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	695a      	ldr	r2, [r3, #20]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	699b      	ldr	r3, [r3, #24]
 80066e2:	431a      	orrs	r2, r3
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	430a      	orrs	r2, r1
 80066ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f042 0201 	orr.w	r2, r2, #1
 80066fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2200      	movs	r2, #0
 8006700:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2220      	movs	r2, #32
 8006706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2200      	movs	r2, #0
 800670e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2200      	movs	r2, #0
 8006714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006718:	2300      	movs	r3, #0
}
 800671a:	4618      	mov	r0, r3
 800671c:	3710      	adds	r7, #16
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}
 8006722:	bf00      	nop
 8006724:	000186a0 	.word	0x000186a0
 8006728:	001e847f 	.word	0x001e847f
 800672c:	003d08ff 	.word	0x003d08ff
 8006730:	431bde83 	.word	0x431bde83
 8006734:	10624dd3 	.word	0x10624dd3

08006738 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b088      	sub	sp, #32
 800673c:	af02      	add	r7, sp, #8
 800673e:	60f8      	str	r0, [r7, #12]
 8006740:	607a      	str	r2, [r7, #4]
 8006742:	461a      	mov	r2, r3
 8006744:	460b      	mov	r3, r1
 8006746:	817b      	strh	r3, [r7, #10]
 8006748:	4613      	mov	r3, r2
 800674a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800674c:	f7ff fb0e 	bl	8005d6c <HAL_GetTick>
 8006750:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006758:	b2db      	uxtb	r3, r3
 800675a:	2b20      	cmp	r3, #32
 800675c:	f040 80e0 	bne.w	8006920 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	9300      	str	r3, [sp, #0]
 8006764:	2319      	movs	r3, #25
 8006766:	2201      	movs	r2, #1
 8006768:	4970      	ldr	r1, [pc, #448]	; (800692c <HAL_I2C_Master_Transmit+0x1f4>)
 800676a:	68f8      	ldr	r0, [r7, #12]
 800676c:	f000 fe02 	bl	8007374 <I2C_WaitOnFlagUntilTimeout>
 8006770:	4603      	mov	r3, r0
 8006772:	2b00      	cmp	r3, #0
 8006774:	d001      	beq.n	800677a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006776:	2302      	movs	r3, #2
 8006778:	e0d3      	b.n	8006922 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006780:	2b01      	cmp	r3, #1
 8006782:	d101      	bne.n	8006788 <HAL_I2C_Master_Transmit+0x50>
 8006784:	2302      	movs	r3, #2
 8006786:	e0cc      	b.n	8006922 <HAL_I2C_Master_Transmit+0x1ea>
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2201      	movs	r2, #1
 800678c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f003 0301 	and.w	r3, r3, #1
 800679a:	2b01      	cmp	r3, #1
 800679c:	d007      	beq.n	80067ae <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	681a      	ldr	r2, [r3, #0]
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f042 0201 	orr.w	r2, r2, #1
 80067ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	681a      	ldr	r2, [r3, #0]
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80067bc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	2221      	movs	r2, #33	; 0x21
 80067c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2210      	movs	r2, #16
 80067ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2200      	movs	r2, #0
 80067d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	687a      	ldr	r2, [r7, #4]
 80067d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	893a      	ldrh	r2, [r7, #8]
 80067de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067e4:	b29a      	uxth	r2, r3
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	4a50      	ldr	r2, [pc, #320]	; (8006930 <HAL_I2C_Master_Transmit+0x1f8>)
 80067ee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80067f0:	8979      	ldrh	r1, [r7, #10]
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	6a3a      	ldr	r2, [r7, #32]
 80067f6:	68f8      	ldr	r0, [r7, #12]
 80067f8:	f000 fbbc 	bl	8006f74 <I2C_MasterRequestWrite>
 80067fc:	4603      	mov	r3, r0
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d001      	beq.n	8006806 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	e08d      	b.n	8006922 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006806:	2300      	movs	r3, #0
 8006808:	613b      	str	r3, [r7, #16]
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	695b      	ldr	r3, [r3, #20]
 8006810:	613b      	str	r3, [r7, #16]
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	699b      	ldr	r3, [r3, #24]
 8006818:	613b      	str	r3, [r7, #16]
 800681a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800681c:	e066      	b.n	80068ec <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800681e:	697a      	ldr	r2, [r7, #20]
 8006820:	6a39      	ldr	r1, [r7, #32]
 8006822:	68f8      	ldr	r0, [r7, #12]
 8006824:	f000 fe7c 	bl	8007520 <I2C_WaitOnTXEFlagUntilTimeout>
 8006828:	4603      	mov	r3, r0
 800682a:	2b00      	cmp	r3, #0
 800682c:	d00d      	beq.n	800684a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006832:	2b04      	cmp	r3, #4
 8006834:	d107      	bne.n	8006846 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	681a      	ldr	r2, [r3, #0]
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006844:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	e06b      	b.n	8006922 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800684e:	781a      	ldrb	r2, [r3, #0]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800685a:	1c5a      	adds	r2, r3, #1
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006864:	b29b      	uxth	r3, r3
 8006866:	3b01      	subs	r3, #1
 8006868:	b29a      	uxth	r2, r3
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006872:	3b01      	subs	r3, #1
 8006874:	b29a      	uxth	r2, r3
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	695b      	ldr	r3, [r3, #20]
 8006880:	f003 0304 	and.w	r3, r3, #4
 8006884:	2b04      	cmp	r3, #4
 8006886:	d11b      	bne.n	80068c0 <HAL_I2C_Master_Transmit+0x188>
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800688c:	2b00      	cmp	r3, #0
 800688e:	d017      	beq.n	80068c0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006894:	781a      	ldrb	r2, [r3, #0]
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a0:	1c5a      	adds	r2, r3, #1
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068aa:	b29b      	uxth	r3, r3
 80068ac:	3b01      	subs	r3, #1
 80068ae:	b29a      	uxth	r2, r3
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068b8:	3b01      	subs	r3, #1
 80068ba:	b29a      	uxth	r2, r3
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80068c0:	697a      	ldr	r2, [r7, #20]
 80068c2:	6a39      	ldr	r1, [r7, #32]
 80068c4:	68f8      	ldr	r0, [r7, #12]
 80068c6:	f000 fe6c 	bl	80075a2 <I2C_WaitOnBTFFlagUntilTimeout>
 80068ca:	4603      	mov	r3, r0
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d00d      	beq.n	80068ec <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068d4:	2b04      	cmp	r3, #4
 80068d6:	d107      	bne.n	80068e8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068e6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80068e8:	2301      	movs	r3, #1
 80068ea:	e01a      	b.n	8006922 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d194      	bne.n	800681e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	681a      	ldr	r2, [r3, #0]
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006902:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2220      	movs	r2, #32
 8006908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2200      	movs	r2, #0
 8006910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2200      	movs	r2, #0
 8006918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800691c:	2300      	movs	r3, #0
 800691e:	e000      	b.n	8006922 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006920:	2302      	movs	r3, #2
  }
}
 8006922:	4618      	mov	r0, r3
 8006924:	3718      	adds	r7, #24
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}
 800692a:	bf00      	nop
 800692c:	00100002 	.word	0x00100002
 8006930:	ffff0000 	.word	0xffff0000

08006934 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b088      	sub	sp, #32
 8006938:	af02      	add	r7, sp, #8
 800693a:	60f8      	str	r0, [r7, #12]
 800693c:	4608      	mov	r0, r1
 800693e:	4611      	mov	r1, r2
 8006940:	461a      	mov	r2, r3
 8006942:	4603      	mov	r3, r0
 8006944:	817b      	strh	r3, [r7, #10]
 8006946:	460b      	mov	r3, r1
 8006948:	813b      	strh	r3, [r7, #8]
 800694a:	4613      	mov	r3, r2
 800694c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800694e:	f7ff fa0d 	bl	8005d6c <HAL_GetTick>
 8006952:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800695a:	b2db      	uxtb	r3, r3
 800695c:	2b20      	cmp	r3, #32
 800695e:	f040 80d9 	bne.w	8006b14 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	9300      	str	r3, [sp, #0]
 8006966:	2319      	movs	r3, #25
 8006968:	2201      	movs	r2, #1
 800696a:	496d      	ldr	r1, [pc, #436]	; (8006b20 <HAL_I2C_Mem_Write+0x1ec>)
 800696c:	68f8      	ldr	r0, [r7, #12]
 800696e:	f000 fd01 	bl	8007374 <I2C_WaitOnFlagUntilTimeout>
 8006972:	4603      	mov	r3, r0
 8006974:	2b00      	cmp	r3, #0
 8006976:	d001      	beq.n	800697c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006978:	2302      	movs	r3, #2
 800697a:	e0cc      	b.n	8006b16 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006982:	2b01      	cmp	r3, #1
 8006984:	d101      	bne.n	800698a <HAL_I2C_Mem_Write+0x56>
 8006986:	2302      	movs	r3, #2
 8006988:	e0c5      	b.n	8006b16 <HAL_I2C_Mem_Write+0x1e2>
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2201      	movs	r2, #1
 800698e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f003 0301 	and.w	r3, r3, #1
 800699c:	2b01      	cmp	r3, #1
 800699e:	d007      	beq.n	80069b0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	681a      	ldr	r2, [r3, #0]
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f042 0201 	orr.w	r2, r2, #1
 80069ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	681a      	ldr	r2, [r3, #0]
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80069be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2221      	movs	r2, #33	; 0x21
 80069c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2240      	movs	r2, #64	; 0x40
 80069cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2200      	movs	r2, #0
 80069d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	6a3a      	ldr	r2, [r7, #32]
 80069da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80069e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069e6:	b29a      	uxth	r2, r3
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	4a4d      	ldr	r2, [pc, #308]	; (8006b24 <HAL_I2C_Mem_Write+0x1f0>)
 80069f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80069f2:	88f8      	ldrh	r0, [r7, #6]
 80069f4:	893a      	ldrh	r2, [r7, #8]
 80069f6:	8979      	ldrh	r1, [r7, #10]
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	9301      	str	r3, [sp, #4]
 80069fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069fe:	9300      	str	r3, [sp, #0]
 8006a00:	4603      	mov	r3, r0
 8006a02:	68f8      	ldr	r0, [r7, #12]
 8006a04:	f000 fb38 	bl	8007078 <I2C_RequestMemoryWrite>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d052      	beq.n	8006ab4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	e081      	b.n	8006b16 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a12:	697a      	ldr	r2, [r7, #20]
 8006a14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a16:	68f8      	ldr	r0, [r7, #12]
 8006a18:	f000 fd82 	bl	8007520 <I2C_WaitOnTXEFlagUntilTimeout>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d00d      	beq.n	8006a3e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a26:	2b04      	cmp	r3, #4
 8006a28:	d107      	bne.n	8006a3a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	681a      	ldr	r2, [r3, #0]
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a38:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	e06b      	b.n	8006b16 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a42:	781a      	ldrb	r2, [r3, #0]
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a4e:	1c5a      	adds	r2, r3, #1
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a58:	3b01      	subs	r3, #1
 8006a5a:	b29a      	uxth	r2, r3
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a64:	b29b      	uxth	r3, r3
 8006a66:	3b01      	subs	r3, #1
 8006a68:	b29a      	uxth	r2, r3
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	695b      	ldr	r3, [r3, #20]
 8006a74:	f003 0304 	and.w	r3, r3, #4
 8006a78:	2b04      	cmp	r3, #4
 8006a7a:	d11b      	bne.n	8006ab4 <HAL_I2C_Mem_Write+0x180>
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d017      	beq.n	8006ab4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a88:	781a      	ldrb	r2, [r3, #0]
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a94:	1c5a      	adds	r2, r3, #1
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a9e:	3b01      	subs	r3, #1
 8006aa0:	b29a      	uxth	r2, r3
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	3b01      	subs	r3, #1
 8006aae:	b29a      	uxth	r2, r3
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d1aa      	bne.n	8006a12 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006abc:	697a      	ldr	r2, [r7, #20]
 8006abe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ac0:	68f8      	ldr	r0, [r7, #12]
 8006ac2:	f000 fd6e 	bl	80075a2 <I2C_WaitOnBTFFlagUntilTimeout>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d00d      	beq.n	8006ae8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad0:	2b04      	cmp	r3, #4
 8006ad2:	d107      	bne.n	8006ae4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	681a      	ldr	r2, [r3, #0]
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ae2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	e016      	b.n	8006b16 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	681a      	ldr	r2, [r3, #0]
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006af6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2220      	movs	r2, #32
 8006afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2200      	movs	r2, #0
 8006b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006b10:	2300      	movs	r3, #0
 8006b12:	e000      	b.n	8006b16 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006b14:	2302      	movs	r3, #2
  }
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3718      	adds	r7, #24
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}
 8006b1e:	bf00      	nop
 8006b20:	00100002 	.word	0x00100002
 8006b24:	ffff0000 	.word	0xffff0000

08006b28 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b08c      	sub	sp, #48	; 0x30
 8006b2c:	af02      	add	r7, sp, #8
 8006b2e:	60f8      	str	r0, [r7, #12]
 8006b30:	4608      	mov	r0, r1
 8006b32:	4611      	mov	r1, r2
 8006b34:	461a      	mov	r2, r3
 8006b36:	4603      	mov	r3, r0
 8006b38:	817b      	strh	r3, [r7, #10]
 8006b3a:	460b      	mov	r3, r1
 8006b3c:	813b      	strh	r3, [r7, #8]
 8006b3e:	4613      	mov	r3, r2
 8006b40:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006b42:	f7ff f913 	bl	8005d6c <HAL_GetTick>
 8006b46:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b4e:	b2db      	uxtb	r3, r3
 8006b50:	2b20      	cmp	r3, #32
 8006b52:	f040 8208 	bne.w	8006f66 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b58:	9300      	str	r3, [sp, #0]
 8006b5a:	2319      	movs	r3, #25
 8006b5c:	2201      	movs	r2, #1
 8006b5e:	497b      	ldr	r1, [pc, #492]	; (8006d4c <HAL_I2C_Mem_Read+0x224>)
 8006b60:	68f8      	ldr	r0, [r7, #12]
 8006b62:	f000 fc07 	bl	8007374 <I2C_WaitOnFlagUntilTimeout>
 8006b66:	4603      	mov	r3, r0
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d001      	beq.n	8006b70 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006b6c:	2302      	movs	r3, #2
 8006b6e:	e1fb      	b.n	8006f68 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b76:	2b01      	cmp	r3, #1
 8006b78:	d101      	bne.n	8006b7e <HAL_I2C_Mem_Read+0x56>
 8006b7a:	2302      	movs	r3, #2
 8006b7c:	e1f4      	b.n	8006f68 <HAL_I2C_Mem_Read+0x440>
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2201      	movs	r2, #1
 8006b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f003 0301 	and.w	r3, r3, #1
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d007      	beq.n	8006ba4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f042 0201 	orr.w	r2, r2, #1
 8006ba2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	681a      	ldr	r2, [r3, #0]
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006bb2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2222      	movs	r2, #34	; 0x22
 8006bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	2240      	movs	r2, #64	; 0x40
 8006bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006bd4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bda:	b29a      	uxth	r2, r3
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	4a5b      	ldr	r2, [pc, #364]	; (8006d50 <HAL_I2C_Mem_Read+0x228>)
 8006be4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006be6:	88f8      	ldrh	r0, [r7, #6]
 8006be8:	893a      	ldrh	r2, [r7, #8]
 8006bea:	8979      	ldrh	r1, [r7, #10]
 8006bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bee:	9301      	str	r3, [sp, #4]
 8006bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bf2:	9300      	str	r3, [sp, #0]
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	68f8      	ldr	r0, [r7, #12]
 8006bf8:	f000 fad4 	bl	80071a4 <I2C_RequestMemoryRead>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d001      	beq.n	8006c06 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006c02:	2301      	movs	r3, #1
 8006c04:	e1b0      	b.n	8006f68 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d113      	bne.n	8006c36 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c0e:	2300      	movs	r3, #0
 8006c10:	623b      	str	r3, [r7, #32]
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	695b      	ldr	r3, [r3, #20]
 8006c18:	623b      	str	r3, [r7, #32]
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	699b      	ldr	r3, [r3, #24]
 8006c20:	623b      	str	r3, [r7, #32]
 8006c22:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c32:	601a      	str	r2, [r3, #0]
 8006c34:	e184      	b.n	8006f40 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	d11b      	bne.n	8006c76 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	681a      	ldr	r2, [r3, #0]
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c4c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c4e:	2300      	movs	r3, #0
 8006c50:	61fb      	str	r3, [r7, #28]
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	695b      	ldr	r3, [r3, #20]
 8006c58:	61fb      	str	r3, [r7, #28]
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	699b      	ldr	r3, [r3, #24]
 8006c60:	61fb      	str	r3, [r7, #28]
 8006c62:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	681a      	ldr	r2, [r3, #0]
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c72:	601a      	str	r2, [r3, #0]
 8006c74:	e164      	b.n	8006f40 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c7a:	2b02      	cmp	r3, #2
 8006c7c:	d11b      	bne.n	8006cb6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c8c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c9c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	61bb      	str	r3, [r7, #24]
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	695b      	ldr	r3, [r3, #20]
 8006ca8:	61bb      	str	r3, [r7, #24]
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	699b      	ldr	r3, [r3, #24]
 8006cb0:	61bb      	str	r3, [r7, #24]
 8006cb2:	69bb      	ldr	r3, [r7, #24]
 8006cb4:	e144      	b.n	8006f40 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	617b      	str	r3, [r7, #20]
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	695b      	ldr	r3, [r3, #20]
 8006cc0:	617b      	str	r3, [r7, #20]
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	699b      	ldr	r3, [r3, #24]
 8006cc8:	617b      	str	r3, [r7, #20]
 8006cca:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006ccc:	e138      	b.n	8006f40 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cd2:	2b03      	cmp	r3, #3
 8006cd4:	f200 80f1 	bhi.w	8006eba <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d123      	bne.n	8006d28 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ce0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ce2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006ce4:	68f8      	ldr	r0, [r7, #12]
 8006ce6:	f000 fc9d 	bl	8007624 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006cea:	4603      	mov	r3, r0
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d001      	beq.n	8006cf4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	e139      	b.n	8006f68 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	691a      	ldr	r2, [r3, #16]
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cfe:	b2d2      	uxtb	r2, r2
 8006d00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d06:	1c5a      	adds	r2, r3, #1
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d10:	3b01      	subs	r3, #1
 8006d12:	b29a      	uxth	r2, r3
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	3b01      	subs	r3, #1
 8006d20:	b29a      	uxth	r2, r3
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006d26:	e10b      	b.n	8006f40 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d2c:	2b02      	cmp	r3, #2
 8006d2e:	d14e      	bne.n	8006dce <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d32:	9300      	str	r3, [sp, #0]
 8006d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d36:	2200      	movs	r2, #0
 8006d38:	4906      	ldr	r1, [pc, #24]	; (8006d54 <HAL_I2C_Mem_Read+0x22c>)
 8006d3a:	68f8      	ldr	r0, [r7, #12]
 8006d3c:	f000 fb1a 	bl	8007374 <I2C_WaitOnFlagUntilTimeout>
 8006d40:	4603      	mov	r3, r0
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d008      	beq.n	8006d58 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006d46:	2301      	movs	r3, #1
 8006d48:	e10e      	b.n	8006f68 <HAL_I2C_Mem_Read+0x440>
 8006d4a:	bf00      	nop
 8006d4c:	00100002 	.word	0x00100002
 8006d50:	ffff0000 	.word	0xffff0000
 8006d54:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	681a      	ldr	r2, [r3, #0]
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d66:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	691a      	ldr	r2, [r3, #16]
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d72:	b2d2      	uxtb	r2, r2
 8006d74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d7a:	1c5a      	adds	r2, r3, #1
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d84:	3b01      	subs	r3, #1
 8006d86:	b29a      	uxth	r2, r3
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d90:	b29b      	uxth	r3, r3
 8006d92:	3b01      	subs	r3, #1
 8006d94:	b29a      	uxth	r2, r3
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	691a      	ldr	r2, [r3, #16]
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da4:	b2d2      	uxtb	r2, r2
 8006da6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dac:	1c5a      	adds	r2, r3, #1
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006db6:	3b01      	subs	r3, #1
 8006db8:	b29a      	uxth	r2, r3
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	3b01      	subs	r3, #1
 8006dc6:	b29a      	uxth	r2, r3
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006dcc:	e0b8      	b.n	8006f40 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd0:	9300      	str	r3, [sp, #0]
 8006dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	4966      	ldr	r1, [pc, #408]	; (8006f70 <HAL_I2C_Mem_Read+0x448>)
 8006dd8:	68f8      	ldr	r0, [r7, #12]
 8006dda:	f000 facb 	bl	8007374 <I2C_WaitOnFlagUntilTimeout>
 8006dde:	4603      	mov	r3, r0
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d001      	beq.n	8006de8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006de4:	2301      	movs	r3, #1
 8006de6:	e0bf      	b.n	8006f68 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	681a      	ldr	r2, [r3, #0]
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006df6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	691a      	ldr	r2, [r3, #16]
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e02:	b2d2      	uxtb	r2, r2
 8006e04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e0a:	1c5a      	adds	r2, r3, #1
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e14:	3b01      	subs	r3, #1
 8006e16:	b29a      	uxth	r2, r3
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	3b01      	subs	r3, #1
 8006e24:	b29a      	uxth	r2, r3
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2c:	9300      	str	r3, [sp, #0]
 8006e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e30:	2200      	movs	r2, #0
 8006e32:	494f      	ldr	r1, [pc, #316]	; (8006f70 <HAL_I2C_Mem_Read+0x448>)
 8006e34:	68f8      	ldr	r0, [r7, #12]
 8006e36:	f000 fa9d 	bl	8007374 <I2C_WaitOnFlagUntilTimeout>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d001      	beq.n	8006e44 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006e40:	2301      	movs	r3, #1
 8006e42:	e091      	b.n	8006f68 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e52:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	691a      	ldr	r2, [r3, #16]
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e5e:	b2d2      	uxtb	r2, r2
 8006e60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e66:	1c5a      	adds	r2, r3, #1
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e70:	3b01      	subs	r3, #1
 8006e72:	b29a      	uxth	r2, r3
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	3b01      	subs	r3, #1
 8006e80:	b29a      	uxth	r2, r3
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	691a      	ldr	r2, [r3, #16]
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e90:	b2d2      	uxtb	r2, r2
 8006e92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e98:	1c5a      	adds	r2, r3, #1
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ea2:	3b01      	subs	r3, #1
 8006ea4:	b29a      	uxth	r2, r3
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	3b01      	subs	r3, #1
 8006eb2:	b29a      	uxth	r2, r3
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006eb8:	e042      	b.n	8006f40 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006eba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ebc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006ebe:	68f8      	ldr	r0, [r7, #12]
 8006ec0:	f000 fbb0 	bl	8007624 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d001      	beq.n	8006ece <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	e04c      	b.n	8006f68 <HAL_I2C_Mem_Read+0x440>
        }

        /*  data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	691a      	ldr	r2, [r3, #16]
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed8:	b2d2      	uxtb	r2, r2
 8006eda:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee0:	1c5a      	adds	r2, r3, #1
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006eea:	3b01      	subs	r3, #1
 8006eec:	b29a      	uxth	r2, r3
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ef6:	b29b      	uxth	r3, r3
 8006ef8:	3b01      	subs	r3, #1
 8006efa:	b29a      	uxth	r2, r3
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	695b      	ldr	r3, [r3, #20]
 8006f06:	f003 0304 	and.w	r3, r3, #4
 8006f0a:	2b04      	cmp	r3, #4
 8006f0c:	d118      	bne.n	8006f40 <HAL_I2C_Mem_Read+0x418>
        {
          /*  data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	691a      	ldr	r2, [r3, #16]
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f18:	b2d2      	uxtb	r2, r2
 8006f1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f20:	1c5a      	adds	r2, r3, #1
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f2a:	3b01      	subs	r3, #1
 8006f2c:	b29a      	uxth	r2, r3
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	3b01      	subs	r3, #1
 8006f3a:	b29a      	uxth	r2, r3
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	f47f aec2 	bne.w	8006cce <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2220      	movs	r2, #32
 8006f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2200      	movs	r2, #0
 8006f56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006f62:	2300      	movs	r3, #0
 8006f64:	e000      	b.n	8006f68 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006f66:	2302      	movs	r3, #2
  }
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3728      	adds	r7, #40	; 0x28
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}
 8006f70:	00010004 	.word	0x00010004

08006f74 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b088      	sub	sp, #32
 8006f78:	af02      	add	r7, sp, #8
 8006f7a:	60f8      	str	r0, [r7, #12]
 8006f7c:	607a      	str	r2, [r7, #4]
 8006f7e:	603b      	str	r3, [r7, #0]
 8006f80:	460b      	mov	r3, r1
 8006f82:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f88:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	2b08      	cmp	r3, #8
 8006f8e:	d006      	beq.n	8006f9e <I2C_MasterRequestWrite+0x2a>
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	2b01      	cmp	r3, #1
 8006f94:	d003      	beq.n	8006f9e <I2C_MasterRequestWrite+0x2a>
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006f9c:	d108      	bne.n	8006fb0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006fac:	601a      	str	r2, [r3, #0]
 8006fae:	e00b      	b.n	8006fc8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fb4:	2b12      	cmp	r3, #18
 8006fb6:	d107      	bne.n	8006fc8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006fc6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	9300      	str	r3, [sp, #0]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006fd4:	68f8      	ldr	r0, [r7, #12]
 8006fd6:	f000 f9cd 	bl	8007374 <I2C_WaitOnFlagUntilTimeout>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d00d      	beq.n	8006ffc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fee:	d103      	bne.n	8006ff8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ff6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006ff8:	2303      	movs	r3, #3
 8006ffa:	e035      	b.n	8007068 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	691b      	ldr	r3, [r3, #16]
 8007000:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007004:	d108      	bne.n	8007018 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007006:	897b      	ldrh	r3, [r7, #10]
 8007008:	b2db      	uxtb	r3, r3
 800700a:	461a      	mov	r2, r3
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007014:	611a      	str	r2, [r3, #16]
 8007016:	e01b      	b.n	8007050 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007018:	897b      	ldrh	r3, [r7, #10]
 800701a:	11db      	asrs	r3, r3, #7
 800701c:	b2db      	uxtb	r3, r3
 800701e:	f003 0306 	and.w	r3, r3, #6
 8007022:	b2db      	uxtb	r3, r3
 8007024:	f063 030f 	orn	r3, r3, #15
 8007028:	b2da      	uxtb	r2, r3
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	687a      	ldr	r2, [r7, #4]
 8007034:	490e      	ldr	r1, [pc, #56]	; (8007070 <I2C_MasterRequestWrite+0xfc>)
 8007036:	68f8      	ldr	r0, [r7, #12]
 8007038:	f000 f9f3 	bl	8007422 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800703c:	4603      	mov	r3, r0
 800703e:	2b00      	cmp	r3, #0
 8007040:	d001      	beq.n	8007046 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007042:	2301      	movs	r3, #1
 8007044:	e010      	b.n	8007068 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007046:	897b      	ldrh	r3, [r7, #10]
 8007048:	b2da      	uxtb	r2, r3
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	687a      	ldr	r2, [r7, #4]
 8007054:	4907      	ldr	r1, [pc, #28]	; (8007074 <I2C_MasterRequestWrite+0x100>)
 8007056:	68f8      	ldr	r0, [r7, #12]
 8007058:	f000 f9e3 	bl	8007422 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800705c:	4603      	mov	r3, r0
 800705e:	2b00      	cmp	r3, #0
 8007060:	d001      	beq.n	8007066 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007062:	2301      	movs	r3, #1
 8007064:	e000      	b.n	8007068 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007066:	2300      	movs	r3, #0
}
 8007068:	4618      	mov	r0, r3
 800706a:	3718      	adds	r7, #24
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}
 8007070:	00010008 	.word	0x00010008
 8007074:	00010002 	.word	0x00010002

08007078 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b088      	sub	sp, #32
 800707c:	af02      	add	r7, sp, #8
 800707e:	60f8      	str	r0, [r7, #12]
 8007080:	4608      	mov	r0, r1
 8007082:	4611      	mov	r1, r2
 8007084:	461a      	mov	r2, r3
 8007086:	4603      	mov	r3, r0
 8007088:	817b      	strh	r3, [r7, #10]
 800708a:	460b      	mov	r3, r1
 800708c:	813b      	strh	r3, [r7, #8]
 800708e:	4613      	mov	r3, r2
 8007090:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	681a      	ldr	r2, [r3, #0]
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80070a0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80070a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a4:	9300      	str	r3, [sp, #0]
 80070a6:	6a3b      	ldr	r3, [r7, #32]
 80070a8:	2200      	movs	r2, #0
 80070aa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80070ae:	68f8      	ldr	r0, [r7, #12]
 80070b0:	f000 f960 	bl	8007374 <I2C_WaitOnFlagUntilTimeout>
 80070b4:	4603      	mov	r3, r0
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d00d      	beq.n	80070d6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070c8:	d103      	bne.n	80070d2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070d0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80070d2:	2303      	movs	r3, #3
 80070d4:	e05f      	b.n	8007196 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80070d6:	897b      	ldrh	r3, [r7, #10]
 80070d8:	b2db      	uxtb	r3, r3
 80070da:	461a      	mov	r2, r3
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80070e4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80070e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e8:	6a3a      	ldr	r2, [r7, #32]
 80070ea:	492d      	ldr	r1, [pc, #180]	; (80071a0 <I2C_RequestMemoryWrite+0x128>)
 80070ec:	68f8      	ldr	r0, [r7, #12]
 80070ee:	f000 f998 	bl	8007422 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80070f2:	4603      	mov	r3, r0
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d001      	beq.n	80070fc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80070f8:	2301      	movs	r3, #1
 80070fa:	e04c      	b.n	8007196 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80070fc:	2300      	movs	r3, #0
 80070fe:	617b      	str	r3, [r7, #20]
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	695b      	ldr	r3, [r3, #20]
 8007106:	617b      	str	r3, [r7, #20]
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	699b      	ldr	r3, [r3, #24]
 800710e:	617b      	str	r3, [r7, #20]
 8007110:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007112:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007114:	6a39      	ldr	r1, [r7, #32]
 8007116:	68f8      	ldr	r0, [r7, #12]
 8007118:	f000 fa02 	bl	8007520 <I2C_WaitOnTXEFlagUntilTimeout>
 800711c:	4603      	mov	r3, r0
 800711e:	2b00      	cmp	r3, #0
 8007120:	d00d      	beq.n	800713e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007126:	2b04      	cmp	r3, #4
 8007128:	d107      	bne.n	800713a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	681a      	ldr	r2, [r3, #0]
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007138:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800713a:	2301      	movs	r3, #1
 800713c:	e02b      	b.n	8007196 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800713e:	88fb      	ldrh	r3, [r7, #6]
 8007140:	2b01      	cmp	r3, #1
 8007142:	d105      	bne.n	8007150 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007144:	893b      	ldrh	r3, [r7, #8]
 8007146:	b2da      	uxtb	r2, r3
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	611a      	str	r2, [r3, #16]
 800714e:	e021      	b.n	8007194 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007150:	893b      	ldrh	r3, [r7, #8]
 8007152:	0a1b      	lsrs	r3, r3, #8
 8007154:	b29b      	uxth	r3, r3
 8007156:	b2da      	uxtb	r2, r3
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800715e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007160:	6a39      	ldr	r1, [r7, #32]
 8007162:	68f8      	ldr	r0, [r7, #12]
 8007164:	f000 f9dc 	bl	8007520 <I2C_WaitOnTXEFlagUntilTimeout>
 8007168:	4603      	mov	r3, r0
 800716a:	2b00      	cmp	r3, #0
 800716c:	d00d      	beq.n	800718a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007172:	2b04      	cmp	r3, #4
 8007174:	d107      	bne.n	8007186 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	681a      	ldr	r2, [r3, #0]
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007184:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007186:	2301      	movs	r3, #1
 8007188:	e005      	b.n	8007196 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800718a:	893b      	ldrh	r3, [r7, #8]
 800718c:	b2da      	uxtb	r2, r3
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007194:	2300      	movs	r3, #0
}
 8007196:	4618      	mov	r0, r3
 8007198:	3718      	adds	r7, #24
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}
 800719e:	bf00      	nop
 80071a0:	00010002 	.word	0x00010002

080071a4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b088      	sub	sp, #32
 80071a8:	af02      	add	r7, sp, #8
 80071aa:	60f8      	str	r0, [r7, #12]
 80071ac:	4608      	mov	r0, r1
 80071ae:	4611      	mov	r1, r2
 80071b0:	461a      	mov	r2, r3
 80071b2:	4603      	mov	r3, r0
 80071b4:	817b      	strh	r3, [r7, #10]
 80071b6:	460b      	mov	r3, r1
 80071b8:	813b      	strh	r3, [r7, #8]
 80071ba:	4613      	mov	r3, r2
 80071bc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	681a      	ldr	r2, [r3, #0]
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80071cc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80071dc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80071de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e0:	9300      	str	r3, [sp, #0]
 80071e2:	6a3b      	ldr	r3, [r7, #32]
 80071e4:	2200      	movs	r2, #0
 80071e6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80071ea:	68f8      	ldr	r0, [r7, #12]
 80071ec:	f000 f8c2 	bl	8007374 <I2C_WaitOnFlagUntilTimeout>
 80071f0:	4603      	mov	r3, r0
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d00d      	beq.n	8007212 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007200:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007204:	d103      	bne.n	800720e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	f44f 7200 	mov.w	r2, #512	; 0x200
 800720c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800720e:	2303      	movs	r3, #3
 8007210:	e0aa      	b.n	8007368 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007212:	897b      	ldrh	r3, [r7, #10]
 8007214:	b2db      	uxtb	r3, r3
 8007216:	461a      	mov	r2, r3
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007220:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007224:	6a3a      	ldr	r2, [r7, #32]
 8007226:	4952      	ldr	r1, [pc, #328]	; (8007370 <I2C_RequestMemoryRead+0x1cc>)
 8007228:	68f8      	ldr	r0, [r7, #12]
 800722a:	f000 f8fa 	bl	8007422 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800722e:	4603      	mov	r3, r0
 8007230:	2b00      	cmp	r3, #0
 8007232:	d001      	beq.n	8007238 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007234:	2301      	movs	r3, #1
 8007236:	e097      	b.n	8007368 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007238:	2300      	movs	r3, #0
 800723a:	617b      	str	r3, [r7, #20]
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	695b      	ldr	r3, [r3, #20]
 8007242:	617b      	str	r3, [r7, #20]
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	699b      	ldr	r3, [r3, #24]
 800724a:	617b      	str	r3, [r7, #20]
 800724c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800724e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007250:	6a39      	ldr	r1, [r7, #32]
 8007252:	68f8      	ldr	r0, [r7, #12]
 8007254:	f000 f964 	bl	8007520 <I2C_WaitOnTXEFlagUntilTimeout>
 8007258:	4603      	mov	r3, r0
 800725a:	2b00      	cmp	r3, #0
 800725c:	d00d      	beq.n	800727a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007262:	2b04      	cmp	r3, #4
 8007264:	d107      	bne.n	8007276 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	681a      	ldr	r2, [r3, #0]
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007274:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007276:	2301      	movs	r3, #1
 8007278:	e076      	b.n	8007368 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800727a:	88fb      	ldrh	r3, [r7, #6]
 800727c:	2b01      	cmp	r3, #1
 800727e:	d105      	bne.n	800728c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007280:	893b      	ldrh	r3, [r7, #8]
 8007282:	b2da      	uxtb	r2, r3
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	611a      	str	r2, [r3, #16]
 800728a:	e021      	b.n	80072d0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800728c:	893b      	ldrh	r3, [r7, #8]
 800728e:	0a1b      	lsrs	r3, r3, #8
 8007290:	b29b      	uxth	r3, r3
 8007292:	b2da      	uxtb	r2, r3
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800729a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800729c:	6a39      	ldr	r1, [r7, #32]
 800729e:	68f8      	ldr	r0, [r7, #12]
 80072a0:	f000 f93e 	bl	8007520 <I2C_WaitOnTXEFlagUntilTimeout>
 80072a4:	4603      	mov	r3, r0
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d00d      	beq.n	80072c6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ae:	2b04      	cmp	r3, #4
 80072b0:	d107      	bne.n	80072c2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072c0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80072c2:	2301      	movs	r3, #1
 80072c4:	e050      	b.n	8007368 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80072c6:	893b      	ldrh	r3, [r7, #8]
 80072c8:	b2da      	uxtb	r2, r3
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80072d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072d2:	6a39      	ldr	r1, [r7, #32]
 80072d4:	68f8      	ldr	r0, [r7, #12]
 80072d6:	f000 f923 	bl	8007520 <I2C_WaitOnTXEFlagUntilTimeout>
 80072da:	4603      	mov	r3, r0
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d00d      	beq.n	80072fc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072e4:	2b04      	cmp	r3, #4
 80072e6:	d107      	bne.n	80072f8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	681a      	ldr	r2, [r3, #0]
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072f6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80072f8:	2301      	movs	r3, #1
 80072fa:	e035      	b.n	8007368 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	681a      	ldr	r2, [r3, #0]
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800730a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800730c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800730e:	9300      	str	r3, [sp, #0]
 8007310:	6a3b      	ldr	r3, [r7, #32]
 8007312:	2200      	movs	r2, #0
 8007314:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007318:	68f8      	ldr	r0, [r7, #12]
 800731a:	f000 f82b 	bl	8007374 <I2C_WaitOnFlagUntilTimeout>
 800731e:	4603      	mov	r3, r0
 8007320:	2b00      	cmp	r3, #0
 8007322:	d00d      	beq.n	8007340 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800732e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007332:	d103      	bne.n	800733c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f44f 7200 	mov.w	r2, #512	; 0x200
 800733a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800733c:	2303      	movs	r3, #3
 800733e:	e013      	b.n	8007368 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007340:	897b      	ldrh	r3, [r7, #10]
 8007342:	b2db      	uxtb	r3, r3
 8007344:	f043 0301 	orr.w	r3, r3, #1
 8007348:	b2da      	uxtb	r2, r3
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007352:	6a3a      	ldr	r2, [r7, #32]
 8007354:	4906      	ldr	r1, [pc, #24]	; (8007370 <I2C_RequestMemoryRead+0x1cc>)
 8007356:	68f8      	ldr	r0, [r7, #12]
 8007358:	f000 f863 	bl	8007422 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800735c:	4603      	mov	r3, r0
 800735e:	2b00      	cmp	r3, #0
 8007360:	d001      	beq.n	8007366 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007362:	2301      	movs	r3, #1
 8007364:	e000      	b.n	8007368 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007366:	2300      	movs	r3, #0
}
 8007368:	4618      	mov	r0, r3
 800736a:	3718      	adds	r7, #24
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}
 8007370:	00010002 	.word	0x00010002

08007374 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b084      	sub	sp, #16
 8007378:	af00      	add	r7, sp, #0
 800737a:	60f8      	str	r0, [r7, #12]
 800737c:	60b9      	str	r1, [r7, #8]
 800737e:	603b      	str	r3, [r7, #0]
 8007380:	4613      	mov	r3, r2
 8007382:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007384:	e025      	b.n	80073d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800738c:	d021      	beq.n	80073d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800738e:	f7fe fced 	bl	8005d6c <HAL_GetTick>
 8007392:	4602      	mov	r2, r0
 8007394:	69bb      	ldr	r3, [r7, #24]
 8007396:	1ad3      	subs	r3, r2, r3
 8007398:	683a      	ldr	r2, [r7, #0]
 800739a:	429a      	cmp	r2, r3
 800739c:	d302      	bcc.n	80073a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d116      	bne.n	80073d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2200      	movs	r2, #0
 80073a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2220      	movs	r2, #32
 80073ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2200      	movs	r2, #0
 80073b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073be:	f043 0220 	orr.w	r2, r3, #32
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	2200      	movs	r2, #0
 80073ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80073ce:	2301      	movs	r3, #1
 80073d0:	e023      	b.n	800741a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	0c1b      	lsrs	r3, r3, #16
 80073d6:	b2db      	uxtb	r3, r3
 80073d8:	2b01      	cmp	r3, #1
 80073da:	d10d      	bne.n	80073f8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	695b      	ldr	r3, [r3, #20]
 80073e2:	43da      	mvns	r2, r3
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	4013      	ands	r3, r2
 80073e8:	b29b      	uxth	r3, r3
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	bf0c      	ite	eq
 80073ee:	2301      	moveq	r3, #1
 80073f0:	2300      	movne	r3, #0
 80073f2:	b2db      	uxtb	r3, r3
 80073f4:	461a      	mov	r2, r3
 80073f6:	e00c      	b.n	8007412 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	699b      	ldr	r3, [r3, #24]
 80073fe:	43da      	mvns	r2, r3
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	4013      	ands	r3, r2
 8007404:	b29b      	uxth	r3, r3
 8007406:	2b00      	cmp	r3, #0
 8007408:	bf0c      	ite	eq
 800740a:	2301      	moveq	r3, #1
 800740c:	2300      	movne	r3, #0
 800740e:	b2db      	uxtb	r3, r3
 8007410:	461a      	mov	r2, r3
 8007412:	79fb      	ldrb	r3, [r7, #7]
 8007414:	429a      	cmp	r2, r3
 8007416:	d0b6      	beq.n	8007386 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007418:	2300      	movs	r3, #0
}
 800741a:	4618      	mov	r0, r3
 800741c:	3710      	adds	r7, #16
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}

08007422 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007422:	b580      	push	{r7, lr}
 8007424:	b084      	sub	sp, #16
 8007426:	af00      	add	r7, sp, #0
 8007428:	60f8      	str	r0, [r7, #12]
 800742a:	60b9      	str	r1, [r7, #8]
 800742c:	607a      	str	r2, [r7, #4]
 800742e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007430:	e051      	b.n	80074d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	695b      	ldr	r3, [r3, #20]
 8007438:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800743c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007440:	d123      	bne.n	800748a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	681a      	ldr	r2, [r3, #0]
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007450:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800745a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2200      	movs	r2, #0
 8007460:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2220      	movs	r2, #32
 8007466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2200      	movs	r2, #0
 800746e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007476:	f043 0204 	orr.w	r2, r3, #4
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2200      	movs	r2, #0
 8007482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007486:	2301      	movs	r3, #1
 8007488:	e046      	b.n	8007518 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007490:	d021      	beq.n	80074d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007492:	f7fe fc6b 	bl	8005d6c <HAL_GetTick>
 8007496:	4602      	mov	r2, r0
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	1ad3      	subs	r3, r2, r3
 800749c:	687a      	ldr	r2, [r7, #4]
 800749e:	429a      	cmp	r2, r3
 80074a0:	d302      	bcc.n	80074a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d116      	bne.n	80074d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	2200      	movs	r2, #0
 80074ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	2220      	movs	r2, #32
 80074b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2200      	movs	r2, #0
 80074ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074c2:	f043 0220 	orr.w	r2, r3, #32
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2200      	movs	r2, #0
 80074ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80074d2:	2301      	movs	r3, #1
 80074d4:	e020      	b.n	8007518 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	0c1b      	lsrs	r3, r3, #16
 80074da:	b2db      	uxtb	r3, r3
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d10c      	bne.n	80074fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	695b      	ldr	r3, [r3, #20]
 80074e6:	43da      	mvns	r2, r3
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	4013      	ands	r3, r2
 80074ec:	b29b      	uxth	r3, r3
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	bf14      	ite	ne
 80074f2:	2301      	movne	r3, #1
 80074f4:	2300      	moveq	r3, #0
 80074f6:	b2db      	uxtb	r3, r3
 80074f8:	e00b      	b.n	8007512 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	699b      	ldr	r3, [r3, #24]
 8007500:	43da      	mvns	r2, r3
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	4013      	ands	r3, r2
 8007506:	b29b      	uxth	r3, r3
 8007508:	2b00      	cmp	r3, #0
 800750a:	bf14      	ite	ne
 800750c:	2301      	movne	r3, #1
 800750e:	2300      	moveq	r3, #0
 8007510:	b2db      	uxtb	r3, r3
 8007512:	2b00      	cmp	r3, #0
 8007514:	d18d      	bne.n	8007432 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007516:	2300      	movs	r3, #0
}
 8007518:	4618      	mov	r0, r3
 800751a:	3710      	adds	r7, #16
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}

08007520 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b084      	sub	sp, #16
 8007524:	af00      	add	r7, sp, #0
 8007526:	60f8      	str	r0, [r7, #12]
 8007528:	60b9      	str	r1, [r7, #8]
 800752a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800752c:	e02d      	b.n	800758a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800752e:	68f8      	ldr	r0, [r7, #12]
 8007530:	f000 f8ce 	bl	80076d0 <I2C_IsAcknowledgeFailed>
 8007534:	4603      	mov	r3, r0
 8007536:	2b00      	cmp	r3, #0
 8007538:	d001      	beq.n	800753e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800753a:	2301      	movs	r3, #1
 800753c:	e02d      	b.n	800759a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007544:	d021      	beq.n	800758a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007546:	f7fe fc11 	bl	8005d6c <HAL_GetTick>
 800754a:	4602      	mov	r2, r0
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	1ad3      	subs	r3, r2, r3
 8007550:	68ba      	ldr	r2, [r7, #8]
 8007552:	429a      	cmp	r2, r3
 8007554:	d302      	bcc.n	800755c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d116      	bne.n	800758a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2200      	movs	r2, #0
 8007560:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	2220      	movs	r2, #32
 8007566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	2200      	movs	r2, #0
 800756e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007576:	f043 0220 	orr.w	r2, r3, #32
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2200      	movs	r2, #0
 8007582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007586:	2301      	movs	r3, #1
 8007588:	e007      	b.n	800759a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	695b      	ldr	r3, [r3, #20]
 8007590:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007594:	2b80      	cmp	r3, #128	; 0x80
 8007596:	d1ca      	bne.n	800752e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007598:	2300      	movs	r3, #0
}
 800759a:	4618      	mov	r0, r3
 800759c:	3710      	adds	r7, #16
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}

080075a2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80075a2:	b580      	push	{r7, lr}
 80075a4:	b084      	sub	sp, #16
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	60f8      	str	r0, [r7, #12]
 80075aa:	60b9      	str	r1, [r7, #8]
 80075ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80075ae:	e02d      	b.n	800760c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80075b0:	68f8      	ldr	r0, [r7, #12]
 80075b2:	f000 f88d 	bl	80076d0 <I2C_IsAcknowledgeFailed>
 80075b6:	4603      	mov	r3, r0
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d001      	beq.n	80075c0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80075bc:	2301      	movs	r3, #1
 80075be:	e02d      	b.n	800761c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075c6:	d021      	beq.n	800760c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075c8:	f7fe fbd0 	bl	8005d6c <HAL_GetTick>
 80075cc:	4602      	mov	r2, r0
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	1ad3      	subs	r3, r2, r3
 80075d2:	68ba      	ldr	r2, [r7, #8]
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d302      	bcc.n	80075de <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d116      	bne.n	800760c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2200      	movs	r2, #0
 80075e2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	2220      	movs	r2, #32
 80075e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	2200      	movs	r2, #0
 80075f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075f8:	f043 0220 	orr.w	r2, r3, #32
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2200      	movs	r2, #0
 8007604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007608:	2301      	movs	r3, #1
 800760a:	e007      	b.n	800761c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	695b      	ldr	r3, [r3, #20]
 8007612:	f003 0304 	and.w	r3, r3, #4
 8007616:	2b04      	cmp	r3, #4
 8007618:	d1ca      	bne.n	80075b0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800761a:	2300      	movs	r3, #0
}
 800761c:	4618      	mov	r0, r3
 800761e:	3710      	adds	r7, #16
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}

08007624 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b084      	sub	sp, #16
 8007628:	af00      	add	r7, sp, #0
 800762a:	60f8      	str	r0, [r7, #12]
 800762c:	60b9      	str	r1, [r7, #8]
 800762e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007630:	e042      	b.n	80076b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	695b      	ldr	r3, [r3, #20]
 8007638:	f003 0310 	and.w	r3, r3, #16
 800763c:	2b10      	cmp	r3, #16
 800763e:	d119      	bne.n	8007674 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f06f 0210 	mvn.w	r2, #16
 8007648:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2200      	movs	r2, #0
 800764e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2220      	movs	r2, #32
 8007654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	2200      	movs	r2, #0
 800765c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	2200      	movs	r2, #0
 800766c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007670:	2301      	movs	r3, #1
 8007672:	e029      	b.n	80076c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007674:	f7fe fb7a 	bl	8005d6c <HAL_GetTick>
 8007678:	4602      	mov	r2, r0
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	1ad3      	subs	r3, r2, r3
 800767e:	68ba      	ldr	r2, [r7, #8]
 8007680:	429a      	cmp	r2, r3
 8007682:	d302      	bcc.n	800768a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d116      	bne.n	80076b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2200      	movs	r2, #0
 800768e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2220      	movs	r2, #32
 8007694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	2200      	movs	r2, #0
 800769c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076a4:	f043 0220 	orr.w	r2, r3, #32
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2200      	movs	r2, #0
 80076b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80076b4:	2301      	movs	r3, #1
 80076b6:	e007      	b.n	80076c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	695b      	ldr	r3, [r3, #20]
 80076be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076c2:	2b40      	cmp	r3, #64	; 0x40
 80076c4:	d1b5      	bne.n	8007632 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80076c6:	2300      	movs	r3, #0
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3710      	adds	r7, #16
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}

080076d0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b083      	sub	sp, #12
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	695b      	ldr	r3, [r3, #20]
 80076de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076e6:	d11b      	bne.n	8007720 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80076f0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2200      	movs	r2, #0
 80076f6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2220      	movs	r2, #32
 80076fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2200      	movs	r2, #0
 8007704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800770c:	f043 0204 	orr.w	r2, r3, #4
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2200      	movs	r2, #0
 8007718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800771c:	2301      	movs	r3, #1
 800771e:	e000      	b.n	8007722 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007720:	2300      	movs	r3, #0
}
 8007722:	4618      	mov	r0, r3
 8007724:	370c      	adds	r7, #12
 8007726:	46bd      	mov	sp, r7
 8007728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772c:	4770      	bx	lr
	...

08007730 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b086      	sub	sp, #24
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d101      	bne.n	8007742 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800773e:	2301      	movs	r3, #1
 8007740:	e267      	b.n	8007c12 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f003 0301 	and.w	r3, r3, #1
 800774a:	2b00      	cmp	r3, #0
 800774c:	d075      	beq.n	800783a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800774e:	4b88      	ldr	r3, [pc, #544]	; (8007970 <HAL_RCC_OscConfig+0x240>)
 8007750:	689b      	ldr	r3, [r3, #8]
 8007752:	f003 030c 	and.w	r3, r3, #12
 8007756:	2b04      	cmp	r3, #4
 8007758:	d00c      	beq.n	8007774 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800775a:	4b85      	ldr	r3, [pc, #532]	; (8007970 <HAL_RCC_OscConfig+0x240>)
 800775c:	689b      	ldr	r3, [r3, #8]
 800775e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007762:	2b08      	cmp	r3, #8
 8007764:	d112      	bne.n	800778c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007766:	4b82      	ldr	r3, [pc, #520]	; (8007970 <HAL_RCC_OscConfig+0x240>)
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800776e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007772:	d10b      	bne.n	800778c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007774:	4b7e      	ldr	r3, [pc, #504]	; (8007970 <HAL_RCC_OscConfig+0x240>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800777c:	2b00      	cmp	r3, #0
 800777e:	d05b      	beq.n	8007838 <HAL_RCC_OscConfig+0x108>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d157      	bne.n	8007838 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007788:	2301      	movs	r3, #1
 800778a:	e242      	b.n	8007c12 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007794:	d106      	bne.n	80077a4 <HAL_RCC_OscConfig+0x74>
 8007796:	4b76      	ldr	r3, [pc, #472]	; (8007970 <HAL_RCC_OscConfig+0x240>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a75      	ldr	r2, [pc, #468]	; (8007970 <HAL_RCC_OscConfig+0x240>)
 800779c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077a0:	6013      	str	r3, [r2, #0]
 80077a2:	e01d      	b.n	80077e0 <HAL_RCC_OscConfig+0xb0>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80077ac:	d10c      	bne.n	80077c8 <HAL_RCC_OscConfig+0x98>
 80077ae:	4b70      	ldr	r3, [pc, #448]	; (8007970 <HAL_RCC_OscConfig+0x240>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a6f      	ldr	r2, [pc, #444]	; (8007970 <HAL_RCC_OscConfig+0x240>)
 80077b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80077b8:	6013      	str	r3, [r2, #0]
 80077ba:	4b6d      	ldr	r3, [pc, #436]	; (8007970 <HAL_RCC_OscConfig+0x240>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4a6c      	ldr	r2, [pc, #432]	; (8007970 <HAL_RCC_OscConfig+0x240>)
 80077c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077c4:	6013      	str	r3, [r2, #0]
 80077c6:	e00b      	b.n	80077e0 <HAL_RCC_OscConfig+0xb0>
 80077c8:	4b69      	ldr	r3, [pc, #420]	; (8007970 <HAL_RCC_OscConfig+0x240>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4a68      	ldr	r2, [pc, #416]	; (8007970 <HAL_RCC_OscConfig+0x240>)
 80077ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077d2:	6013      	str	r3, [r2, #0]
 80077d4:	4b66      	ldr	r3, [pc, #408]	; (8007970 <HAL_RCC_OscConfig+0x240>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a65      	ldr	r2, [pc, #404]	; (8007970 <HAL_RCC_OscConfig+0x240>)
 80077da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80077de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d013      	beq.n	8007810 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077e8:	f7fe fac0 	bl	8005d6c <HAL_GetTick>
 80077ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80077ee:	e008      	b.n	8007802 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80077f0:	f7fe fabc 	bl	8005d6c <HAL_GetTick>
 80077f4:	4602      	mov	r2, r0
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	1ad3      	subs	r3, r2, r3
 80077fa:	2b64      	cmp	r3, #100	; 0x64
 80077fc:	d901      	bls.n	8007802 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80077fe:	2303      	movs	r3, #3
 8007800:	e207      	b.n	8007c12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007802:	4b5b      	ldr	r3, [pc, #364]	; (8007970 <HAL_RCC_OscConfig+0x240>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800780a:	2b00      	cmp	r3, #0
 800780c:	d0f0      	beq.n	80077f0 <HAL_RCC_OscConfig+0xc0>
 800780e:	e014      	b.n	800783a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007810:	f7fe faac 	bl	8005d6c <HAL_GetTick>
 8007814:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007816:	e008      	b.n	800782a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007818:	f7fe faa8 	bl	8005d6c <HAL_GetTick>
 800781c:	4602      	mov	r2, r0
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	1ad3      	subs	r3, r2, r3
 8007822:	2b64      	cmp	r3, #100	; 0x64
 8007824:	d901      	bls.n	800782a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007826:	2303      	movs	r3, #3
 8007828:	e1f3      	b.n	8007c12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800782a:	4b51      	ldr	r3, [pc, #324]	; (8007970 <HAL_RCC_OscConfig+0x240>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007832:	2b00      	cmp	r3, #0
 8007834:	d1f0      	bne.n	8007818 <HAL_RCC_OscConfig+0xe8>
 8007836:	e000      	b.n	800783a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007838:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f003 0302 	and.w	r3, r3, #2
 8007842:	2b00      	cmp	r3, #0
 8007844:	d063      	beq.n	800790e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007846:	4b4a      	ldr	r3, [pc, #296]	; (8007970 <HAL_RCC_OscConfig+0x240>)
 8007848:	689b      	ldr	r3, [r3, #8]
 800784a:	f003 030c 	and.w	r3, r3, #12
 800784e:	2b00      	cmp	r3, #0
 8007850:	d00b      	beq.n	800786a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007852:	4b47      	ldr	r3, [pc, #284]	; (8007970 <HAL_RCC_OscConfig+0x240>)
 8007854:	689b      	ldr	r3, [r3, #8]
 8007856:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800785a:	2b08      	cmp	r3, #8
 800785c:	d11c      	bne.n	8007898 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800785e:	4b44      	ldr	r3, [pc, #272]	; (8007970 <HAL_RCC_OscConfig+0x240>)
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007866:	2b00      	cmp	r3, #0
 8007868:	d116      	bne.n	8007898 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800786a:	4b41      	ldr	r3, [pc, #260]	; (8007970 <HAL_RCC_OscConfig+0x240>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f003 0302 	and.w	r3, r3, #2
 8007872:	2b00      	cmp	r3, #0
 8007874:	d005      	beq.n	8007882 <HAL_RCC_OscConfig+0x152>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	68db      	ldr	r3, [r3, #12]
 800787a:	2b01      	cmp	r3, #1
 800787c:	d001      	beq.n	8007882 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800787e:	2301      	movs	r3, #1
 8007880:	e1c7      	b.n	8007c12 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007882:	4b3b      	ldr	r3, [pc, #236]	; (8007970 <HAL_RCC_OscConfig+0x240>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	691b      	ldr	r3, [r3, #16]
 800788e:	00db      	lsls	r3, r3, #3
 8007890:	4937      	ldr	r1, [pc, #220]	; (8007970 <HAL_RCC_OscConfig+0x240>)
 8007892:	4313      	orrs	r3, r2
 8007894:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007896:	e03a      	b.n	800790e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	68db      	ldr	r3, [r3, #12]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d020      	beq.n	80078e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80078a0:	4b34      	ldr	r3, [pc, #208]	; (8007974 <HAL_RCC_OscConfig+0x244>)
 80078a2:	2201      	movs	r2, #1
 80078a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078a6:	f7fe fa61 	bl	8005d6c <HAL_GetTick>
 80078aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078ac:	e008      	b.n	80078c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80078ae:	f7fe fa5d 	bl	8005d6c <HAL_GetTick>
 80078b2:	4602      	mov	r2, r0
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	1ad3      	subs	r3, r2, r3
 80078b8:	2b02      	cmp	r3, #2
 80078ba:	d901      	bls.n	80078c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80078bc:	2303      	movs	r3, #3
 80078be:	e1a8      	b.n	8007c12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078c0:	4b2b      	ldr	r3, [pc, #172]	; (8007970 <HAL_RCC_OscConfig+0x240>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f003 0302 	and.w	r3, r3, #2
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d0f0      	beq.n	80078ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078cc:	4b28      	ldr	r3, [pc, #160]	; (8007970 <HAL_RCC_OscConfig+0x240>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	691b      	ldr	r3, [r3, #16]
 80078d8:	00db      	lsls	r3, r3, #3
 80078da:	4925      	ldr	r1, [pc, #148]	; (8007970 <HAL_RCC_OscConfig+0x240>)
 80078dc:	4313      	orrs	r3, r2
 80078de:	600b      	str	r3, [r1, #0]
 80078e0:	e015      	b.n	800790e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80078e2:	4b24      	ldr	r3, [pc, #144]	; (8007974 <HAL_RCC_OscConfig+0x244>)
 80078e4:	2200      	movs	r2, #0
 80078e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078e8:	f7fe fa40 	bl	8005d6c <HAL_GetTick>
 80078ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80078ee:	e008      	b.n	8007902 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80078f0:	f7fe fa3c 	bl	8005d6c <HAL_GetTick>
 80078f4:	4602      	mov	r2, r0
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	1ad3      	subs	r3, r2, r3
 80078fa:	2b02      	cmp	r3, #2
 80078fc:	d901      	bls.n	8007902 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80078fe:	2303      	movs	r3, #3
 8007900:	e187      	b.n	8007c12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007902:	4b1b      	ldr	r3, [pc, #108]	; (8007970 <HAL_RCC_OscConfig+0x240>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f003 0302 	and.w	r3, r3, #2
 800790a:	2b00      	cmp	r3, #0
 800790c:	d1f0      	bne.n	80078f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f003 0308 	and.w	r3, r3, #8
 8007916:	2b00      	cmp	r3, #0
 8007918:	d036      	beq.n	8007988 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	695b      	ldr	r3, [r3, #20]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d016      	beq.n	8007950 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007922:	4b15      	ldr	r3, [pc, #84]	; (8007978 <HAL_RCC_OscConfig+0x248>)
 8007924:	2201      	movs	r2, #1
 8007926:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007928:	f7fe fa20 	bl	8005d6c <HAL_GetTick>
 800792c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800792e:	e008      	b.n	8007942 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007930:	f7fe fa1c 	bl	8005d6c <HAL_GetTick>
 8007934:	4602      	mov	r2, r0
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	1ad3      	subs	r3, r2, r3
 800793a:	2b02      	cmp	r3, #2
 800793c:	d901      	bls.n	8007942 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800793e:	2303      	movs	r3, #3
 8007940:	e167      	b.n	8007c12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007942:	4b0b      	ldr	r3, [pc, #44]	; (8007970 <HAL_RCC_OscConfig+0x240>)
 8007944:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007946:	f003 0302 	and.w	r3, r3, #2
 800794a:	2b00      	cmp	r3, #0
 800794c:	d0f0      	beq.n	8007930 <HAL_RCC_OscConfig+0x200>
 800794e:	e01b      	b.n	8007988 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007950:	4b09      	ldr	r3, [pc, #36]	; (8007978 <HAL_RCC_OscConfig+0x248>)
 8007952:	2200      	movs	r2, #0
 8007954:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007956:	f7fe fa09 	bl	8005d6c <HAL_GetTick>
 800795a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800795c:	e00e      	b.n	800797c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800795e:	f7fe fa05 	bl	8005d6c <HAL_GetTick>
 8007962:	4602      	mov	r2, r0
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	1ad3      	subs	r3, r2, r3
 8007968:	2b02      	cmp	r3, #2
 800796a:	d907      	bls.n	800797c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800796c:	2303      	movs	r3, #3
 800796e:	e150      	b.n	8007c12 <HAL_RCC_OscConfig+0x4e2>
 8007970:	40023800 	.word	0x40023800
 8007974:	42470000 	.word	0x42470000
 8007978:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800797c:	4b88      	ldr	r3, [pc, #544]	; (8007ba0 <HAL_RCC_OscConfig+0x470>)
 800797e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007980:	f003 0302 	and.w	r3, r3, #2
 8007984:	2b00      	cmp	r3, #0
 8007986:	d1ea      	bne.n	800795e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f003 0304 	and.w	r3, r3, #4
 8007990:	2b00      	cmp	r3, #0
 8007992:	f000 8097 	beq.w	8007ac4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007996:	2300      	movs	r3, #0
 8007998:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800799a:	4b81      	ldr	r3, [pc, #516]	; (8007ba0 <HAL_RCC_OscConfig+0x470>)
 800799c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800799e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d10f      	bne.n	80079c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80079a6:	2300      	movs	r3, #0
 80079a8:	60bb      	str	r3, [r7, #8]
 80079aa:	4b7d      	ldr	r3, [pc, #500]	; (8007ba0 <HAL_RCC_OscConfig+0x470>)
 80079ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ae:	4a7c      	ldr	r2, [pc, #496]	; (8007ba0 <HAL_RCC_OscConfig+0x470>)
 80079b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079b4:	6413      	str	r3, [r2, #64]	; 0x40
 80079b6:	4b7a      	ldr	r3, [pc, #488]	; (8007ba0 <HAL_RCC_OscConfig+0x470>)
 80079b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079be:	60bb      	str	r3, [r7, #8]
 80079c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80079c2:	2301      	movs	r3, #1
 80079c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079c6:	4b77      	ldr	r3, [pc, #476]	; (8007ba4 <HAL_RCC_OscConfig+0x474>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d118      	bne.n	8007a04 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80079d2:	4b74      	ldr	r3, [pc, #464]	; (8007ba4 <HAL_RCC_OscConfig+0x474>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4a73      	ldr	r2, [pc, #460]	; (8007ba4 <HAL_RCC_OscConfig+0x474>)
 80079d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80079de:	f7fe f9c5 	bl	8005d6c <HAL_GetTick>
 80079e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079e4:	e008      	b.n	80079f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80079e6:	f7fe f9c1 	bl	8005d6c <HAL_GetTick>
 80079ea:	4602      	mov	r2, r0
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	1ad3      	subs	r3, r2, r3
 80079f0:	2b02      	cmp	r3, #2
 80079f2:	d901      	bls.n	80079f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80079f4:	2303      	movs	r3, #3
 80079f6:	e10c      	b.n	8007c12 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079f8:	4b6a      	ldr	r3, [pc, #424]	; (8007ba4 <HAL_RCC_OscConfig+0x474>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d0f0      	beq.n	80079e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	689b      	ldr	r3, [r3, #8]
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d106      	bne.n	8007a1a <HAL_RCC_OscConfig+0x2ea>
 8007a0c:	4b64      	ldr	r3, [pc, #400]	; (8007ba0 <HAL_RCC_OscConfig+0x470>)
 8007a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a10:	4a63      	ldr	r2, [pc, #396]	; (8007ba0 <HAL_RCC_OscConfig+0x470>)
 8007a12:	f043 0301 	orr.w	r3, r3, #1
 8007a16:	6713      	str	r3, [r2, #112]	; 0x70
 8007a18:	e01c      	b.n	8007a54 <HAL_RCC_OscConfig+0x324>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	689b      	ldr	r3, [r3, #8]
 8007a1e:	2b05      	cmp	r3, #5
 8007a20:	d10c      	bne.n	8007a3c <HAL_RCC_OscConfig+0x30c>
 8007a22:	4b5f      	ldr	r3, [pc, #380]	; (8007ba0 <HAL_RCC_OscConfig+0x470>)
 8007a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a26:	4a5e      	ldr	r2, [pc, #376]	; (8007ba0 <HAL_RCC_OscConfig+0x470>)
 8007a28:	f043 0304 	orr.w	r3, r3, #4
 8007a2c:	6713      	str	r3, [r2, #112]	; 0x70
 8007a2e:	4b5c      	ldr	r3, [pc, #368]	; (8007ba0 <HAL_RCC_OscConfig+0x470>)
 8007a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a32:	4a5b      	ldr	r2, [pc, #364]	; (8007ba0 <HAL_RCC_OscConfig+0x470>)
 8007a34:	f043 0301 	orr.w	r3, r3, #1
 8007a38:	6713      	str	r3, [r2, #112]	; 0x70
 8007a3a:	e00b      	b.n	8007a54 <HAL_RCC_OscConfig+0x324>
 8007a3c:	4b58      	ldr	r3, [pc, #352]	; (8007ba0 <HAL_RCC_OscConfig+0x470>)
 8007a3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a40:	4a57      	ldr	r2, [pc, #348]	; (8007ba0 <HAL_RCC_OscConfig+0x470>)
 8007a42:	f023 0301 	bic.w	r3, r3, #1
 8007a46:	6713      	str	r3, [r2, #112]	; 0x70
 8007a48:	4b55      	ldr	r3, [pc, #340]	; (8007ba0 <HAL_RCC_OscConfig+0x470>)
 8007a4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a4c:	4a54      	ldr	r2, [pc, #336]	; (8007ba0 <HAL_RCC_OscConfig+0x470>)
 8007a4e:	f023 0304 	bic.w	r3, r3, #4
 8007a52:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	689b      	ldr	r3, [r3, #8]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d015      	beq.n	8007a88 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a5c:	f7fe f986 	bl	8005d6c <HAL_GetTick>
 8007a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a62:	e00a      	b.n	8007a7a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007a64:	f7fe f982 	bl	8005d6c <HAL_GetTick>
 8007a68:	4602      	mov	r2, r0
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	1ad3      	subs	r3, r2, r3
 8007a6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d901      	bls.n	8007a7a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007a76:	2303      	movs	r3, #3
 8007a78:	e0cb      	b.n	8007c12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a7a:	4b49      	ldr	r3, [pc, #292]	; (8007ba0 <HAL_RCC_OscConfig+0x470>)
 8007a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a7e:	f003 0302 	and.w	r3, r3, #2
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d0ee      	beq.n	8007a64 <HAL_RCC_OscConfig+0x334>
 8007a86:	e014      	b.n	8007ab2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007a88:	f7fe f970 	bl	8005d6c <HAL_GetTick>
 8007a8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007a8e:	e00a      	b.n	8007aa6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007a90:	f7fe f96c 	bl	8005d6c <HAL_GetTick>
 8007a94:	4602      	mov	r2, r0
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	1ad3      	subs	r3, r2, r3
 8007a9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d901      	bls.n	8007aa6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007aa2:	2303      	movs	r3, #3
 8007aa4:	e0b5      	b.n	8007c12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007aa6:	4b3e      	ldr	r3, [pc, #248]	; (8007ba0 <HAL_RCC_OscConfig+0x470>)
 8007aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aaa:	f003 0302 	and.w	r3, r3, #2
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d1ee      	bne.n	8007a90 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007ab2:	7dfb      	ldrb	r3, [r7, #23]
 8007ab4:	2b01      	cmp	r3, #1
 8007ab6:	d105      	bne.n	8007ac4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007ab8:	4b39      	ldr	r3, [pc, #228]	; (8007ba0 <HAL_RCC_OscConfig+0x470>)
 8007aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007abc:	4a38      	ldr	r2, [pc, #224]	; (8007ba0 <HAL_RCC_OscConfig+0x470>)
 8007abe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ac2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	699b      	ldr	r3, [r3, #24]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	f000 80a1 	beq.w	8007c10 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007ace:	4b34      	ldr	r3, [pc, #208]	; (8007ba0 <HAL_RCC_OscConfig+0x470>)
 8007ad0:	689b      	ldr	r3, [r3, #8]
 8007ad2:	f003 030c 	and.w	r3, r3, #12
 8007ad6:	2b08      	cmp	r3, #8
 8007ad8:	d05c      	beq.n	8007b94 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	699b      	ldr	r3, [r3, #24]
 8007ade:	2b02      	cmp	r3, #2
 8007ae0:	d141      	bne.n	8007b66 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ae2:	4b31      	ldr	r3, [pc, #196]	; (8007ba8 <HAL_RCC_OscConfig+0x478>)
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ae8:	f7fe f940 	bl	8005d6c <HAL_GetTick>
 8007aec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007aee:	e008      	b.n	8007b02 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007af0:	f7fe f93c 	bl	8005d6c <HAL_GetTick>
 8007af4:	4602      	mov	r2, r0
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	1ad3      	subs	r3, r2, r3
 8007afa:	2b02      	cmp	r3, #2
 8007afc:	d901      	bls.n	8007b02 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007afe:	2303      	movs	r3, #3
 8007b00:	e087      	b.n	8007c12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b02:	4b27      	ldr	r3, [pc, #156]	; (8007ba0 <HAL_RCC_OscConfig+0x470>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d1f0      	bne.n	8007af0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	69da      	ldr	r2, [r3, #28]
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6a1b      	ldr	r3, [r3, #32]
 8007b16:	431a      	orrs	r2, r3
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b1c:	019b      	lsls	r3, r3, #6
 8007b1e:	431a      	orrs	r2, r3
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b24:	085b      	lsrs	r3, r3, #1
 8007b26:	3b01      	subs	r3, #1
 8007b28:	041b      	lsls	r3, r3, #16
 8007b2a:	431a      	orrs	r2, r3
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b30:	061b      	lsls	r3, r3, #24
 8007b32:	491b      	ldr	r1, [pc, #108]	; (8007ba0 <HAL_RCC_OscConfig+0x470>)
 8007b34:	4313      	orrs	r3, r2
 8007b36:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007b38:	4b1b      	ldr	r3, [pc, #108]	; (8007ba8 <HAL_RCC_OscConfig+0x478>)
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b3e:	f7fe f915 	bl	8005d6c <HAL_GetTick>
 8007b42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b44:	e008      	b.n	8007b58 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b46:	f7fe f911 	bl	8005d6c <HAL_GetTick>
 8007b4a:	4602      	mov	r2, r0
 8007b4c:	693b      	ldr	r3, [r7, #16]
 8007b4e:	1ad3      	subs	r3, r2, r3
 8007b50:	2b02      	cmp	r3, #2
 8007b52:	d901      	bls.n	8007b58 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007b54:	2303      	movs	r3, #3
 8007b56:	e05c      	b.n	8007c12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b58:	4b11      	ldr	r3, [pc, #68]	; (8007ba0 <HAL_RCC_OscConfig+0x470>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d0f0      	beq.n	8007b46 <HAL_RCC_OscConfig+0x416>
 8007b64:	e054      	b.n	8007c10 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b66:	4b10      	ldr	r3, [pc, #64]	; (8007ba8 <HAL_RCC_OscConfig+0x478>)
 8007b68:	2200      	movs	r2, #0
 8007b6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b6c:	f7fe f8fe 	bl	8005d6c <HAL_GetTick>
 8007b70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b72:	e008      	b.n	8007b86 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b74:	f7fe f8fa 	bl	8005d6c <HAL_GetTick>
 8007b78:	4602      	mov	r2, r0
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	1ad3      	subs	r3, r2, r3
 8007b7e:	2b02      	cmp	r3, #2
 8007b80:	d901      	bls.n	8007b86 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007b82:	2303      	movs	r3, #3
 8007b84:	e045      	b.n	8007c12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b86:	4b06      	ldr	r3, [pc, #24]	; (8007ba0 <HAL_RCC_OscConfig+0x470>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d1f0      	bne.n	8007b74 <HAL_RCC_OscConfig+0x444>
 8007b92:	e03d      	b.n	8007c10 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	699b      	ldr	r3, [r3, #24]
 8007b98:	2b01      	cmp	r3, #1
 8007b9a:	d107      	bne.n	8007bac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	e038      	b.n	8007c12 <HAL_RCC_OscConfig+0x4e2>
 8007ba0:	40023800 	.word	0x40023800
 8007ba4:	40007000 	.word	0x40007000
 8007ba8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007bac:	4b1b      	ldr	r3, [pc, #108]	; (8007c1c <HAL_RCC_OscConfig+0x4ec>)
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	699b      	ldr	r3, [r3, #24]
 8007bb6:	2b01      	cmp	r3, #1
 8007bb8:	d028      	beq.n	8007c0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	d121      	bne.n	8007c0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	d11a      	bne.n	8007c0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007bd6:	68fa      	ldr	r2, [r7, #12]
 8007bd8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007bdc:	4013      	ands	r3, r2
 8007bde:	687a      	ldr	r2, [r7, #4]
 8007be0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007be2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d111      	bne.n	8007c0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bf2:	085b      	lsrs	r3, r3, #1
 8007bf4:	3b01      	subs	r3, #1
 8007bf6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	d107      	bne.n	8007c0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c06:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d001      	beq.n	8007c10 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	e000      	b.n	8007c12 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007c10:	2300      	movs	r3, #0
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3718      	adds	r7, #24
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}
 8007c1a:	bf00      	nop
 8007c1c:	40023800 	.word	0x40023800

08007c20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b084      	sub	sp, #16
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d101      	bne.n	8007c34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007c30:	2301      	movs	r3, #1
 8007c32:	e0cc      	b.n	8007dce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007c34:	4b68      	ldr	r3, [pc, #416]	; (8007dd8 <HAL_RCC_ClockConfig+0x1b8>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f003 0307 	and.w	r3, r3, #7
 8007c3c:	683a      	ldr	r2, [r7, #0]
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	d90c      	bls.n	8007c5c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c42:	4b65      	ldr	r3, [pc, #404]	; (8007dd8 <HAL_RCC_ClockConfig+0x1b8>)
 8007c44:	683a      	ldr	r2, [r7, #0]
 8007c46:	b2d2      	uxtb	r2, r2
 8007c48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c4a:	4b63      	ldr	r3, [pc, #396]	; (8007dd8 <HAL_RCC_ClockConfig+0x1b8>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f003 0307 	and.w	r3, r3, #7
 8007c52:	683a      	ldr	r2, [r7, #0]
 8007c54:	429a      	cmp	r2, r3
 8007c56:	d001      	beq.n	8007c5c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007c58:	2301      	movs	r3, #1
 8007c5a:	e0b8      	b.n	8007dce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f003 0302 	and.w	r3, r3, #2
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d020      	beq.n	8007caa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f003 0304 	and.w	r3, r3, #4
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d005      	beq.n	8007c80 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007c74:	4b59      	ldr	r3, [pc, #356]	; (8007ddc <HAL_RCC_ClockConfig+0x1bc>)
 8007c76:	689b      	ldr	r3, [r3, #8]
 8007c78:	4a58      	ldr	r2, [pc, #352]	; (8007ddc <HAL_RCC_ClockConfig+0x1bc>)
 8007c7a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007c7e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f003 0308 	and.w	r3, r3, #8
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d005      	beq.n	8007c98 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007c8c:	4b53      	ldr	r3, [pc, #332]	; (8007ddc <HAL_RCC_ClockConfig+0x1bc>)
 8007c8e:	689b      	ldr	r3, [r3, #8]
 8007c90:	4a52      	ldr	r2, [pc, #328]	; (8007ddc <HAL_RCC_ClockConfig+0x1bc>)
 8007c92:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007c96:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007c98:	4b50      	ldr	r3, [pc, #320]	; (8007ddc <HAL_RCC_ClockConfig+0x1bc>)
 8007c9a:	689b      	ldr	r3, [r3, #8]
 8007c9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	689b      	ldr	r3, [r3, #8]
 8007ca4:	494d      	ldr	r1, [pc, #308]	; (8007ddc <HAL_RCC_ClockConfig+0x1bc>)
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f003 0301 	and.w	r3, r3, #1
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d044      	beq.n	8007d40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	2b01      	cmp	r3, #1
 8007cbc:	d107      	bne.n	8007cce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007cbe:	4b47      	ldr	r3, [pc, #284]	; (8007ddc <HAL_RCC_ClockConfig+0x1bc>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d119      	bne.n	8007cfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007cca:	2301      	movs	r3, #1
 8007ccc:	e07f      	b.n	8007dce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	685b      	ldr	r3, [r3, #4]
 8007cd2:	2b02      	cmp	r3, #2
 8007cd4:	d003      	beq.n	8007cde <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007cda:	2b03      	cmp	r3, #3
 8007cdc:	d107      	bne.n	8007cee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007cde:	4b3f      	ldr	r3, [pc, #252]	; (8007ddc <HAL_RCC_ClockConfig+0x1bc>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d109      	bne.n	8007cfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007cea:	2301      	movs	r3, #1
 8007cec:	e06f      	b.n	8007dce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007cee:	4b3b      	ldr	r3, [pc, #236]	; (8007ddc <HAL_RCC_ClockConfig+0x1bc>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f003 0302 	and.w	r3, r3, #2
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d101      	bne.n	8007cfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	e067      	b.n	8007dce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007cfe:	4b37      	ldr	r3, [pc, #220]	; (8007ddc <HAL_RCC_ClockConfig+0x1bc>)
 8007d00:	689b      	ldr	r3, [r3, #8]
 8007d02:	f023 0203 	bic.w	r2, r3, #3
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	4934      	ldr	r1, [pc, #208]	; (8007ddc <HAL_RCC_ClockConfig+0x1bc>)
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007d10:	f7fe f82c 	bl	8005d6c <HAL_GetTick>
 8007d14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d16:	e00a      	b.n	8007d2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007d18:	f7fe f828 	bl	8005d6c <HAL_GetTick>
 8007d1c:	4602      	mov	r2, r0
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	1ad3      	subs	r3, r2, r3
 8007d22:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d901      	bls.n	8007d2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007d2a:	2303      	movs	r3, #3
 8007d2c:	e04f      	b.n	8007dce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d2e:	4b2b      	ldr	r3, [pc, #172]	; (8007ddc <HAL_RCC_ClockConfig+0x1bc>)
 8007d30:	689b      	ldr	r3, [r3, #8]
 8007d32:	f003 020c 	and.w	r2, r3, #12
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	009b      	lsls	r3, r3, #2
 8007d3c:	429a      	cmp	r2, r3
 8007d3e:	d1eb      	bne.n	8007d18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007d40:	4b25      	ldr	r3, [pc, #148]	; (8007dd8 <HAL_RCC_ClockConfig+0x1b8>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f003 0307 	and.w	r3, r3, #7
 8007d48:	683a      	ldr	r2, [r7, #0]
 8007d4a:	429a      	cmp	r2, r3
 8007d4c:	d20c      	bcs.n	8007d68 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d4e:	4b22      	ldr	r3, [pc, #136]	; (8007dd8 <HAL_RCC_ClockConfig+0x1b8>)
 8007d50:	683a      	ldr	r2, [r7, #0]
 8007d52:	b2d2      	uxtb	r2, r2
 8007d54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d56:	4b20      	ldr	r3, [pc, #128]	; (8007dd8 <HAL_RCC_ClockConfig+0x1b8>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f003 0307 	and.w	r3, r3, #7
 8007d5e:	683a      	ldr	r2, [r7, #0]
 8007d60:	429a      	cmp	r2, r3
 8007d62:	d001      	beq.n	8007d68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007d64:	2301      	movs	r3, #1
 8007d66:	e032      	b.n	8007dce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f003 0304 	and.w	r3, r3, #4
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d008      	beq.n	8007d86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007d74:	4b19      	ldr	r3, [pc, #100]	; (8007ddc <HAL_RCC_ClockConfig+0x1bc>)
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	68db      	ldr	r3, [r3, #12]
 8007d80:	4916      	ldr	r1, [pc, #88]	; (8007ddc <HAL_RCC_ClockConfig+0x1bc>)
 8007d82:	4313      	orrs	r3, r2
 8007d84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f003 0308 	and.w	r3, r3, #8
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d009      	beq.n	8007da6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007d92:	4b12      	ldr	r3, [pc, #72]	; (8007ddc <HAL_RCC_ClockConfig+0x1bc>)
 8007d94:	689b      	ldr	r3, [r3, #8]
 8007d96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	691b      	ldr	r3, [r3, #16]
 8007d9e:	00db      	lsls	r3, r3, #3
 8007da0:	490e      	ldr	r1, [pc, #56]	; (8007ddc <HAL_RCC_ClockConfig+0x1bc>)
 8007da2:	4313      	orrs	r3, r2
 8007da4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007da6:	f000 f821 	bl	8007dec <HAL_RCC_GetSysClockFreq>
 8007daa:	4602      	mov	r2, r0
 8007dac:	4b0b      	ldr	r3, [pc, #44]	; (8007ddc <HAL_RCC_ClockConfig+0x1bc>)
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	091b      	lsrs	r3, r3, #4
 8007db2:	f003 030f 	and.w	r3, r3, #15
 8007db6:	490a      	ldr	r1, [pc, #40]	; (8007de0 <HAL_RCC_ClockConfig+0x1c0>)
 8007db8:	5ccb      	ldrb	r3, [r1, r3]
 8007dba:	fa22 f303 	lsr.w	r3, r2, r3
 8007dbe:	4a09      	ldr	r2, [pc, #36]	; (8007de4 <HAL_RCC_ClockConfig+0x1c4>)
 8007dc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007dc2:	4b09      	ldr	r3, [pc, #36]	; (8007de8 <HAL_RCC_ClockConfig+0x1c8>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f7fd ff8c 	bl	8005ce4 <HAL_InitTick>

  return HAL_OK;
 8007dcc:	2300      	movs	r3, #0
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3710      	adds	r7, #16
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
 8007dd6:	bf00      	nop
 8007dd8:	40023c00 	.word	0x40023c00
 8007ddc:	40023800 	.word	0x40023800
 8007de0:	0800c3d4 	.word	0x0800c3d4
 8007de4:	20000014 	.word	0x20000014
 8007de8:	20000020 	.word	0x20000020

08007dec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007dec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007df0:	b094      	sub	sp, #80	; 0x50
 8007df2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007df4:	2300      	movs	r3, #0
 8007df6:	647b      	str	r3, [r7, #68]	; 0x44
 8007df8:	2300      	movs	r3, #0
 8007dfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007e00:	2300      	movs	r3, #0
 8007e02:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007e04:	4b79      	ldr	r3, [pc, #484]	; (8007fec <HAL_RCC_GetSysClockFreq+0x200>)
 8007e06:	689b      	ldr	r3, [r3, #8]
 8007e08:	f003 030c 	and.w	r3, r3, #12
 8007e0c:	2b08      	cmp	r3, #8
 8007e0e:	d00d      	beq.n	8007e2c <HAL_RCC_GetSysClockFreq+0x40>
 8007e10:	2b08      	cmp	r3, #8
 8007e12:	f200 80e1 	bhi.w	8007fd8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d002      	beq.n	8007e20 <HAL_RCC_GetSysClockFreq+0x34>
 8007e1a:	2b04      	cmp	r3, #4
 8007e1c:	d003      	beq.n	8007e26 <HAL_RCC_GetSysClockFreq+0x3a>
 8007e1e:	e0db      	b.n	8007fd8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007e20:	4b73      	ldr	r3, [pc, #460]	; (8007ff0 <HAL_RCC_GetSysClockFreq+0x204>)
 8007e22:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007e24:	e0db      	b.n	8007fde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007e26:	4b72      	ldr	r3, [pc, #456]	; (8007ff0 <HAL_RCC_GetSysClockFreq+0x204>)
 8007e28:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007e2a:	e0d8      	b.n	8007fde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007e2c:	4b6f      	ldr	r3, [pc, #444]	; (8007fec <HAL_RCC_GetSysClockFreq+0x200>)
 8007e2e:	685b      	ldr	r3, [r3, #4]
 8007e30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e34:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007e36:	4b6d      	ldr	r3, [pc, #436]	; (8007fec <HAL_RCC_GetSysClockFreq+0x200>)
 8007e38:	685b      	ldr	r3, [r3, #4]
 8007e3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d063      	beq.n	8007f0a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007e42:	4b6a      	ldr	r3, [pc, #424]	; (8007fec <HAL_RCC_GetSysClockFreq+0x200>)
 8007e44:	685b      	ldr	r3, [r3, #4]
 8007e46:	099b      	lsrs	r3, r3, #6
 8007e48:	2200      	movs	r2, #0
 8007e4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8007e4c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e54:	633b      	str	r3, [r7, #48]	; 0x30
 8007e56:	2300      	movs	r3, #0
 8007e58:	637b      	str	r3, [r7, #52]	; 0x34
 8007e5a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007e5e:	4622      	mov	r2, r4
 8007e60:	462b      	mov	r3, r5
 8007e62:	f04f 0000 	mov.w	r0, #0
 8007e66:	f04f 0100 	mov.w	r1, #0
 8007e6a:	0159      	lsls	r1, r3, #5
 8007e6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007e70:	0150      	lsls	r0, r2, #5
 8007e72:	4602      	mov	r2, r0
 8007e74:	460b      	mov	r3, r1
 8007e76:	4621      	mov	r1, r4
 8007e78:	1a51      	subs	r1, r2, r1
 8007e7a:	6139      	str	r1, [r7, #16]
 8007e7c:	4629      	mov	r1, r5
 8007e7e:	eb63 0301 	sbc.w	r3, r3, r1
 8007e82:	617b      	str	r3, [r7, #20]
 8007e84:	f04f 0200 	mov.w	r2, #0
 8007e88:	f04f 0300 	mov.w	r3, #0
 8007e8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007e90:	4659      	mov	r1, fp
 8007e92:	018b      	lsls	r3, r1, #6
 8007e94:	4651      	mov	r1, sl
 8007e96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007e9a:	4651      	mov	r1, sl
 8007e9c:	018a      	lsls	r2, r1, #6
 8007e9e:	4651      	mov	r1, sl
 8007ea0:	ebb2 0801 	subs.w	r8, r2, r1
 8007ea4:	4659      	mov	r1, fp
 8007ea6:	eb63 0901 	sbc.w	r9, r3, r1
 8007eaa:	f04f 0200 	mov.w	r2, #0
 8007eae:	f04f 0300 	mov.w	r3, #0
 8007eb2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007eb6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007eba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007ebe:	4690      	mov	r8, r2
 8007ec0:	4699      	mov	r9, r3
 8007ec2:	4623      	mov	r3, r4
 8007ec4:	eb18 0303 	adds.w	r3, r8, r3
 8007ec8:	60bb      	str	r3, [r7, #8]
 8007eca:	462b      	mov	r3, r5
 8007ecc:	eb49 0303 	adc.w	r3, r9, r3
 8007ed0:	60fb      	str	r3, [r7, #12]
 8007ed2:	f04f 0200 	mov.w	r2, #0
 8007ed6:	f04f 0300 	mov.w	r3, #0
 8007eda:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007ede:	4629      	mov	r1, r5
 8007ee0:	028b      	lsls	r3, r1, #10
 8007ee2:	4621      	mov	r1, r4
 8007ee4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007ee8:	4621      	mov	r1, r4
 8007eea:	028a      	lsls	r2, r1, #10
 8007eec:	4610      	mov	r0, r2
 8007eee:	4619      	mov	r1, r3
 8007ef0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ef6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007ef8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007efc:	f7f8 fcce 	bl	800089c <__aeabi_uldivmod>
 8007f00:	4602      	mov	r2, r0
 8007f02:	460b      	mov	r3, r1
 8007f04:	4613      	mov	r3, r2
 8007f06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f08:	e058      	b.n	8007fbc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007f0a:	4b38      	ldr	r3, [pc, #224]	; (8007fec <HAL_RCC_GetSysClockFreq+0x200>)
 8007f0c:	685b      	ldr	r3, [r3, #4]
 8007f0e:	099b      	lsrs	r3, r3, #6
 8007f10:	2200      	movs	r2, #0
 8007f12:	4618      	mov	r0, r3
 8007f14:	4611      	mov	r1, r2
 8007f16:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007f1a:	623b      	str	r3, [r7, #32]
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	627b      	str	r3, [r7, #36]	; 0x24
 8007f20:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007f24:	4642      	mov	r2, r8
 8007f26:	464b      	mov	r3, r9
 8007f28:	f04f 0000 	mov.w	r0, #0
 8007f2c:	f04f 0100 	mov.w	r1, #0
 8007f30:	0159      	lsls	r1, r3, #5
 8007f32:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007f36:	0150      	lsls	r0, r2, #5
 8007f38:	4602      	mov	r2, r0
 8007f3a:	460b      	mov	r3, r1
 8007f3c:	4641      	mov	r1, r8
 8007f3e:	ebb2 0a01 	subs.w	sl, r2, r1
 8007f42:	4649      	mov	r1, r9
 8007f44:	eb63 0b01 	sbc.w	fp, r3, r1
 8007f48:	f04f 0200 	mov.w	r2, #0
 8007f4c:	f04f 0300 	mov.w	r3, #0
 8007f50:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007f54:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007f58:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007f5c:	ebb2 040a 	subs.w	r4, r2, sl
 8007f60:	eb63 050b 	sbc.w	r5, r3, fp
 8007f64:	f04f 0200 	mov.w	r2, #0
 8007f68:	f04f 0300 	mov.w	r3, #0
 8007f6c:	00eb      	lsls	r3, r5, #3
 8007f6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007f72:	00e2      	lsls	r2, r4, #3
 8007f74:	4614      	mov	r4, r2
 8007f76:	461d      	mov	r5, r3
 8007f78:	4643      	mov	r3, r8
 8007f7a:	18e3      	adds	r3, r4, r3
 8007f7c:	603b      	str	r3, [r7, #0]
 8007f7e:	464b      	mov	r3, r9
 8007f80:	eb45 0303 	adc.w	r3, r5, r3
 8007f84:	607b      	str	r3, [r7, #4]
 8007f86:	f04f 0200 	mov.w	r2, #0
 8007f8a:	f04f 0300 	mov.w	r3, #0
 8007f8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007f92:	4629      	mov	r1, r5
 8007f94:	028b      	lsls	r3, r1, #10
 8007f96:	4621      	mov	r1, r4
 8007f98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007f9c:	4621      	mov	r1, r4
 8007f9e:	028a      	lsls	r2, r1, #10
 8007fa0:	4610      	mov	r0, r2
 8007fa2:	4619      	mov	r1, r3
 8007fa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	61bb      	str	r3, [r7, #24]
 8007faa:	61fa      	str	r2, [r7, #28]
 8007fac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007fb0:	f7f8 fc74 	bl	800089c <__aeabi_uldivmod>
 8007fb4:	4602      	mov	r2, r0
 8007fb6:	460b      	mov	r3, r1
 8007fb8:	4613      	mov	r3, r2
 8007fba:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007fbc:	4b0b      	ldr	r3, [pc, #44]	; (8007fec <HAL_RCC_GetSysClockFreq+0x200>)
 8007fbe:	685b      	ldr	r3, [r3, #4]
 8007fc0:	0c1b      	lsrs	r3, r3, #16
 8007fc2:	f003 0303 	and.w	r3, r3, #3
 8007fc6:	3301      	adds	r3, #1
 8007fc8:	005b      	lsls	r3, r3, #1
 8007fca:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007fcc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007fce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fd4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007fd6:	e002      	b.n	8007fde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007fd8:	4b05      	ldr	r3, [pc, #20]	; (8007ff0 <HAL_RCC_GetSysClockFreq+0x204>)
 8007fda:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007fdc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007fde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3750      	adds	r7, #80	; 0x50
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007fea:	bf00      	nop
 8007fec:	40023800 	.word	0x40023800
 8007ff0:	00f42400 	.word	0x00f42400

08007ff4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007ff8:	4b03      	ldr	r3, [pc, #12]	; (8008008 <HAL_RCC_GetHCLKFreq+0x14>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	46bd      	mov	sp, r7
 8008000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008004:	4770      	bx	lr
 8008006:	bf00      	nop
 8008008:	20000014 	.word	0x20000014

0800800c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008010:	f7ff fff0 	bl	8007ff4 <HAL_RCC_GetHCLKFreq>
 8008014:	4602      	mov	r2, r0
 8008016:	4b05      	ldr	r3, [pc, #20]	; (800802c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008018:	689b      	ldr	r3, [r3, #8]
 800801a:	0a9b      	lsrs	r3, r3, #10
 800801c:	f003 0307 	and.w	r3, r3, #7
 8008020:	4903      	ldr	r1, [pc, #12]	; (8008030 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008022:	5ccb      	ldrb	r3, [r1, r3]
 8008024:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008028:	4618      	mov	r0, r3
 800802a:	bd80      	pop	{r7, pc}
 800802c:	40023800 	.word	0x40023800
 8008030:	0800c3e4 	.word	0x0800c3e4

08008034 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008038:	f7ff ffdc 	bl	8007ff4 <HAL_RCC_GetHCLKFreq>
 800803c:	4602      	mov	r2, r0
 800803e:	4b05      	ldr	r3, [pc, #20]	; (8008054 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008040:	689b      	ldr	r3, [r3, #8]
 8008042:	0b5b      	lsrs	r3, r3, #13
 8008044:	f003 0307 	and.w	r3, r3, #7
 8008048:	4903      	ldr	r1, [pc, #12]	; (8008058 <HAL_RCC_GetPCLK2Freq+0x24>)
 800804a:	5ccb      	ldrb	r3, [r1, r3]
 800804c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008050:	4618      	mov	r0, r3
 8008052:	bd80      	pop	{r7, pc}
 8008054:	40023800 	.word	0x40023800
 8008058:	0800c3e4 	.word	0x0800c3e4

0800805c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b082      	sub	sp, #8
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d101      	bne.n	800806e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800806a:	2301      	movs	r3, #1
 800806c:	e07b      	b.n	8008166 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008072:	2b00      	cmp	r3, #0
 8008074:	d108      	bne.n	8008088 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	685b      	ldr	r3, [r3, #4]
 800807a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800807e:	d009      	beq.n	8008094 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2200      	movs	r2, #0
 8008084:	61da      	str	r2, [r3, #28]
 8008086:	e005      	b.n	8008094 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2200      	movs	r2, #0
 800808c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2200      	movs	r2, #0
 8008092:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2200      	movs	r2, #0
 8008098:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80080a0:	b2db      	uxtb	r3, r3
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d106      	bne.n	80080b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2200      	movs	r2, #0
 80080aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f7fd f94a 	bl	8005348 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2202      	movs	r2, #2
 80080b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	681a      	ldr	r2, [r3, #0]
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	685b      	ldr	r3, [r3, #4]
 80080d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	689b      	ldr	r3, [r3, #8]
 80080d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80080dc:	431a      	orrs	r2, r3
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	68db      	ldr	r3, [r3, #12]
 80080e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80080e6:	431a      	orrs	r2, r3
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	691b      	ldr	r3, [r3, #16]
 80080ec:	f003 0302 	and.w	r3, r3, #2
 80080f0:	431a      	orrs	r2, r3
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	695b      	ldr	r3, [r3, #20]
 80080f6:	f003 0301 	and.w	r3, r3, #1
 80080fa:	431a      	orrs	r2, r3
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	699b      	ldr	r3, [r3, #24]
 8008100:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008104:	431a      	orrs	r2, r3
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	69db      	ldr	r3, [r3, #28]
 800810a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800810e:	431a      	orrs	r2, r3
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6a1b      	ldr	r3, [r3, #32]
 8008114:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008118:	ea42 0103 	orr.w	r1, r2, r3
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008120:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	430a      	orrs	r2, r1
 800812a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	699b      	ldr	r3, [r3, #24]
 8008130:	0c1b      	lsrs	r3, r3, #16
 8008132:	f003 0104 	and.w	r1, r3, #4
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800813a:	f003 0210 	and.w	r2, r3, #16
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	430a      	orrs	r2, r1
 8008144:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	69da      	ldr	r2, [r3, #28]
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008154:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2200      	movs	r2, #0
 800815a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2201      	movs	r2, #1
 8008160:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008164:	2300      	movs	r3, #0
}
 8008166:	4618      	mov	r0, r3
 8008168:	3708      	adds	r7, #8
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}

0800816e <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800816e:	b580      	push	{r7, lr}
 8008170:	b084      	sub	sp, #16
 8008172:	af00      	add	r7, sp, #0
 8008174:	60f8      	str	r0, [r7, #12]
 8008176:	60b9      	str	r1, [r7, #8]
 8008178:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d101      	bne.n	8008184 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8008180:	2301      	movs	r3, #1
 8008182:	e038      	b.n	80081f6 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800818a:	b2db      	uxtb	r3, r3
 800818c:	2b00      	cmp	r3, #0
 800818e:	d106      	bne.n	800819e <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2200      	movs	r2, #0
 8008194:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8008198:	68f8      	ldr	r0, [r7, #12]
 800819a:	f7fd fa51 	bl	8005640 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681a      	ldr	r2, [r3, #0]
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	3308      	adds	r3, #8
 80081a6:	4619      	mov	r1, r3
 80081a8:	4610      	mov	r0, r2
 80081aa:	f001 fdc9 	bl	8009d40 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	6818      	ldr	r0, [r3, #0]
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	689b      	ldr	r3, [r3, #8]
 80081b6:	461a      	mov	r2, r3
 80081b8:	68b9      	ldr	r1, [r7, #8]
 80081ba:	f001 fe2b 	bl	8009e14 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	6858      	ldr	r0, [r3, #4]
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	689a      	ldr	r2, [r3, #8]
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081ca:	6879      	ldr	r1, [r7, #4]
 80081cc:	f001 fe58 	bl	8009e80 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	68fa      	ldr	r2, [r7, #12]
 80081d6:	6892      	ldr	r2, [r2, #8]
 80081d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	68fa      	ldr	r2, [r7, #12]
 80081e2:	6892      	ldr	r2, [r2, #8]
 80081e4:	f041 0101 	orr.w	r1, r1, #1
 80081e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	2201      	movs	r2, #1
 80081f0:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 80081f4:	2300      	movs	r3, #0
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3710      	adds	r7, #16
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}

080081fe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80081fe:	b580      	push	{r7, lr}
 8008200:	b082      	sub	sp, #8
 8008202:	af00      	add	r7, sp, #0
 8008204:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d101      	bne.n	8008210 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800820c:	2301      	movs	r3, #1
 800820e:	e041      	b.n	8008294 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008216:	b2db      	uxtb	r3, r3
 8008218:	2b00      	cmp	r3, #0
 800821a:	d106      	bne.n	800822a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2200      	movs	r2, #0
 8008220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f7fd f8d7 	bl	80053d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2202      	movs	r2, #2
 800822e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681a      	ldr	r2, [r3, #0]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	3304      	adds	r3, #4
 800823a:	4619      	mov	r1, r3
 800823c:	4610      	mov	r0, r2
 800823e:	f000 fa27 	bl	8008690 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2201      	movs	r2, #1
 8008246:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2201      	movs	r2, #1
 800824e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2201      	movs	r2, #1
 8008256:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2201      	movs	r2, #1
 800825e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2201      	movs	r2, #1
 8008266:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2201      	movs	r2, #1
 800826e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2201      	movs	r2, #1
 8008276:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2201      	movs	r2, #1
 800827e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2201      	movs	r2, #1
 8008286:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2201      	movs	r2, #1
 800828e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008292:	2300      	movs	r3, #0
}
 8008294:	4618      	mov	r0, r3
 8008296:	3708      	adds	r7, #8
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}

0800829c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b084      	sub	sp, #16
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d109      	bne.n	80082c0 <HAL_TIM_PWM_Start+0x24>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80082b2:	b2db      	uxtb	r3, r3
 80082b4:	2b01      	cmp	r3, #1
 80082b6:	bf14      	ite	ne
 80082b8:	2301      	movne	r3, #1
 80082ba:	2300      	moveq	r3, #0
 80082bc:	b2db      	uxtb	r3, r3
 80082be:	e022      	b.n	8008306 <HAL_TIM_PWM_Start+0x6a>
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	2b04      	cmp	r3, #4
 80082c4:	d109      	bne.n	80082da <HAL_TIM_PWM_Start+0x3e>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80082cc:	b2db      	uxtb	r3, r3
 80082ce:	2b01      	cmp	r3, #1
 80082d0:	bf14      	ite	ne
 80082d2:	2301      	movne	r3, #1
 80082d4:	2300      	moveq	r3, #0
 80082d6:	b2db      	uxtb	r3, r3
 80082d8:	e015      	b.n	8008306 <HAL_TIM_PWM_Start+0x6a>
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	2b08      	cmp	r3, #8
 80082de:	d109      	bne.n	80082f4 <HAL_TIM_PWM_Start+0x58>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80082e6:	b2db      	uxtb	r3, r3
 80082e8:	2b01      	cmp	r3, #1
 80082ea:	bf14      	ite	ne
 80082ec:	2301      	movne	r3, #1
 80082ee:	2300      	moveq	r3, #0
 80082f0:	b2db      	uxtb	r3, r3
 80082f2:	e008      	b.n	8008306 <HAL_TIM_PWM_Start+0x6a>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80082fa:	b2db      	uxtb	r3, r3
 80082fc:	2b01      	cmp	r3, #1
 80082fe:	bf14      	ite	ne
 8008300:	2301      	movne	r3, #1
 8008302:	2300      	moveq	r3, #0
 8008304:	b2db      	uxtb	r3, r3
 8008306:	2b00      	cmp	r3, #0
 8008308:	d001      	beq.n	800830e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800830a:	2301      	movs	r3, #1
 800830c:	e07c      	b.n	8008408 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d104      	bne.n	800831e <HAL_TIM_PWM_Start+0x82>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2202      	movs	r2, #2
 8008318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800831c:	e013      	b.n	8008346 <HAL_TIM_PWM_Start+0xaa>
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	2b04      	cmp	r3, #4
 8008322:	d104      	bne.n	800832e <HAL_TIM_PWM_Start+0x92>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2202      	movs	r2, #2
 8008328:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800832c:	e00b      	b.n	8008346 <HAL_TIM_PWM_Start+0xaa>
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	2b08      	cmp	r3, #8
 8008332:	d104      	bne.n	800833e <HAL_TIM_PWM_Start+0xa2>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2202      	movs	r2, #2
 8008338:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800833c:	e003      	b.n	8008346 <HAL_TIM_PWM_Start+0xaa>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2202      	movs	r2, #2
 8008342:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	2201      	movs	r2, #1
 800834c:	6839      	ldr	r1, [r7, #0]
 800834e:	4618      	mov	r0, r3
 8008350:	f000 fbee 	bl	8008b30 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	4a2d      	ldr	r2, [pc, #180]	; (8008410 <HAL_TIM_PWM_Start+0x174>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d004      	beq.n	8008368 <HAL_TIM_PWM_Start+0xcc>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	4a2c      	ldr	r2, [pc, #176]	; (8008414 <HAL_TIM_PWM_Start+0x178>)
 8008364:	4293      	cmp	r3, r2
 8008366:	d101      	bne.n	800836c <HAL_TIM_PWM_Start+0xd0>
 8008368:	2301      	movs	r3, #1
 800836a:	e000      	b.n	800836e <HAL_TIM_PWM_Start+0xd2>
 800836c:	2300      	movs	r3, #0
 800836e:	2b00      	cmp	r3, #0
 8008370:	d007      	beq.n	8008382 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008380:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4a22      	ldr	r2, [pc, #136]	; (8008410 <HAL_TIM_PWM_Start+0x174>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d022      	beq.n	80083d2 <HAL_TIM_PWM_Start+0x136>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008394:	d01d      	beq.n	80083d2 <HAL_TIM_PWM_Start+0x136>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4a1f      	ldr	r2, [pc, #124]	; (8008418 <HAL_TIM_PWM_Start+0x17c>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d018      	beq.n	80083d2 <HAL_TIM_PWM_Start+0x136>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4a1d      	ldr	r2, [pc, #116]	; (800841c <HAL_TIM_PWM_Start+0x180>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d013      	beq.n	80083d2 <HAL_TIM_PWM_Start+0x136>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a1c      	ldr	r2, [pc, #112]	; (8008420 <HAL_TIM_PWM_Start+0x184>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d00e      	beq.n	80083d2 <HAL_TIM_PWM_Start+0x136>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4a16      	ldr	r2, [pc, #88]	; (8008414 <HAL_TIM_PWM_Start+0x178>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d009      	beq.n	80083d2 <HAL_TIM_PWM_Start+0x136>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4a18      	ldr	r2, [pc, #96]	; (8008424 <HAL_TIM_PWM_Start+0x188>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d004      	beq.n	80083d2 <HAL_TIM_PWM_Start+0x136>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a16      	ldr	r2, [pc, #88]	; (8008428 <HAL_TIM_PWM_Start+0x18c>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d111      	bne.n	80083f6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	689b      	ldr	r3, [r3, #8]
 80083d8:	f003 0307 	and.w	r3, r3, #7
 80083dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	2b06      	cmp	r3, #6
 80083e2:	d010      	beq.n	8008406 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	681a      	ldr	r2, [r3, #0]
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f042 0201 	orr.w	r2, r2, #1
 80083f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083f4:	e007      	b.n	8008406 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	681a      	ldr	r2, [r3, #0]
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f042 0201 	orr.w	r2, r2, #1
 8008404:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008406:	2300      	movs	r3, #0
}
 8008408:	4618      	mov	r0, r3
 800840a:	3710      	adds	r7, #16
 800840c:	46bd      	mov	sp, r7
 800840e:	bd80      	pop	{r7, pc}
 8008410:	40010000 	.word	0x40010000
 8008414:	40010400 	.word	0x40010400
 8008418:	40000400 	.word	0x40000400
 800841c:	40000800 	.word	0x40000800
 8008420:	40000c00 	.word	0x40000c00
 8008424:	40014000 	.word	0x40014000
 8008428:	40001800 	.word	0x40001800

0800842c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b082      	sub	sp, #8
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
 8008434:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	2200      	movs	r2, #0
 800843c:	6839      	ldr	r1, [r7, #0]
 800843e:	4618      	mov	r0, r3
 8008440:	f000 fb76 	bl	8008b30 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4a2e      	ldr	r2, [pc, #184]	; (8008504 <HAL_TIM_PWM_Stop+0xd8>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d004      	beq.n	8008458 <HAL_TIM_PWM_Stop+0x2c>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	4a2d      	ldr	r2, [pc, #180]	; (8008508 <HAL_TIM_PWM_Stop+0xdc>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d101      	bne.n	800845c <HAL_TIM_PWM_Stop+0x30>
 8008458:	2301      	movs	r3, #1
 800845a:	e000      	b.n	800845e <HAL_TIM_PWM_Stop+0x32>
 800845c:	2300      	movs	r3, #0
 800845e:	2b00      	cmp	r3, #0
 8008460:	d017      	beq.n	8008492 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	6a1a      	ldr	r2, [r3, #32]
 8008468:	f241 1311 	movw	r3, #4369	; 0x1111
 800846c:	4013      	ands	r3, r2
 800846e:	2b00      	cmp	r3, #0
 8008470:	d10f      	bne.n	8008492 <HAL_TIM_PWM_Stop+0x66>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	6a1a      	ldr	r2, [r3, #32]
 8008478:	f240 4344 	movw	r3, #1092	; 0x444
 800847c:	4013      	ands	r3, r2
 800847e:	2b00      	cmp	r3, #0
 8008480:	d107      	bne.n	8008492 <HAL_TIM_PWM_Stop+0x66>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008490:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	6a1a      	ldr	r2, [r3, #32]
 8008498:	f241 1311 	movw	r3, #4369	; 0x1111
 800849c:	4013      	ands	r3, r2
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d10f      	bne.n	80084c2 <HAL_TIM_PWM_Stop+0x96>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	6a1a      	ldr	r2, [r3, #32]
 80084a8:	f240 4344 	movw	r3, #1092	; 0x444
 80084ac:	4013      	ands	r3, r2
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d107      	bne.n	80084c2 <HAL_TIM_PWM_Stop+0x96>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	681a      	ldr	r2, [r3, #0]
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f022 0201 	bic.w	r2, r2, #1
 80084c0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d104      	bne.n	80084d2 <HAL_TIM_PWM_Stop+0xa6>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2201      	movs	r2, #1
 80084cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80084d0:	e013      	b.n	80084fa <HAL_TIM_PWM_Stop+0xce>
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	2b04      	cmp	r3, #4
 80084d6:	d104      	bne.n	80084e2 <HAL_TIM_PWM_Stop+0xb6>
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2201      	movs	r2, #1
 80084dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80084e0:	e00b      	b.n	80084fa <HAL_TIM_PWM_Stop+0xce>
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	2b08      	cmp	r3, #8
 80084e6:	d104      	bne.n	80084f2 <HAL_TIM_PWM_Stop+0xc6>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2201      	movs	r2, #1
 80084ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80084f0:	e003      	b.n	80084fa <HAL_TIM_PWM_Stop+0xce>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2201      	movs	r2, #1
 80084f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80084fa:	2300      	movs	r3, #0
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3708      	adds	r7, #8
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}
 8008504:	40010000 	.word	0x40010000
 8008508:	40010400 	.word	0x40010400

0800850c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b086      	sub	sp, #24
 8008510:	af00      	add	r7, sp, #0
 8008512:	60f8      	str	r0, [r7, #12]
 8008514:	60b9      	str	r1, [r7, #8]
 8008516:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008518:	2300      	movs	r3, #0
 800851a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008522:	2b01      	cmp	r3, #1
 8008524:	d101      	bne.n	800852a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008526:	2302      	movs	r3, #2
 8008528:	e0ae      	b.n	8008688 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	2201      	movs	r2, #1
 800852e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2b0c      	cmp	r3, #12
 8008536:	f200 809f 	bhi.w	8008678 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800853a:	a201      	add	r2, pc, #4	; (adr r2, 8008540 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800853c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008540:	08008575 	.word	0x08008575
 8008544:	08008679 	.word	0x08008679
 8008548:	08008679 	.word	0x08008679
 800854c:	08008679 	.word	0x08008679
 8008550:	080085b5 	.word	0x080085b5
 8008554:	08008679 	.word	0x08008679
 8008558:	08008679 	.word	0x08008679
 800855c:	08008679 	.word	0x08008679
 8008560:	080085f7 	.word	0x080085f7
 8008564:	08008679 	.word	0x08008679
 8008568:	08008679 	.word	0x08008679
 800856c:	08008679 	.word	0x08008679
 8008570:	08008637 	.word	0x08008637
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	68b9      	ldr	r1, [r7, #8]
 800857a:	4618      	mov	r0, r3
 800857c:	f000 f928 	bl	80087d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	699a      	ldr	r2, [r3, #24]
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f042 0208 	orr.w	r2, r2, #8
 800858e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	699a      	ldr	r2, [r3, #24]
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f022 0204 	bic.w	r2, r2, #4
 800859e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	6999      	ldr	r1, [r3, #24]
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	691a      	ldr	r2, [r3, #16]
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	430a      	orrs	r2, r1
 80085b0:	619a      	str	r2, [r3, #24]
      break;
 80085b2:	e064      	b.n	800867e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	68b9      	ldr	r1, [r7, #8]
 80085ba:	4618      	mov	r0, r3
 80085bc:	f000 f978 	bl	80088b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	699a      	ldr	r2, [r3, #24]
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80085ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	699a      	ldr	r2, [r3, #24]
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80085de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	6999      	ldr	r1, [r3, #24]
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	691b      	ldr	r3, [r3, #16]
 80085ea:	021a      	lsls	r2, r3, #8
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	430a      	orrs	r2, r1
 80085f2:	619a      	str	r2, [r3, #24]
      break;
 80085f4:	e043      	b.n	800867e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	68b9      	ldr	r1, [r7, #8]
 80085fc:	4618      	mov	r0, r3
 80085fe:	f000 f9cd 	bl	800899c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	69da      	ldr	r2, [r3, #28]
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f042 0208 	orr.w	r2, r2, #8
 8008610:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	69da      	ldr	r2, [r3, #28]
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f022 0204 	bic.w	r2, r2, #4
 8008620:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	69d9      	ldr	r1, [r3, #28]
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	691a      	ldr	r2, [r3, #16]
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	430a      	orrs	r2, r1
 8008632:	61da      	str	r2, [r3, #28]
      break;
 8008634:	e023      	b.n	800867e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	68b9      	ldr	r1, [r7, #8]
 800863c:	4618      	mov	r0, r3
 800863e:	f000 fa21 	bl	8008a84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	69da      	ldr	r2, [r3, #28]
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008650:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	69da      	ldr	r2, [r3, #28]
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008660:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	69d9      	ldr	r1, [r3, #28]
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	691b      	ldr	r3, [r3, #16]
 800866c:	021a      	lsls	r2, r3, #8
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	430a      	orrs	r2, r1
 8008674:	61da      	str	r2, [r3, #28]
      break;
 8008676:	e002      	b.n	800867e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008678:	2301      	movs	r3, #1
 800867a:	75fb      	strb	r3, [r7, #23]
      break;
 800867c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	2200      	movs	r2, #0
 8008682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008686:	7dfb      	ldrb	r3, [r7, #23]
}
 8008688:	4618      	mov	r0, r3
 800868a:	3718      	adds	r7, #24
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}

08008690 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008690:	b480      	push	{r7}
 8008692:	b085      	sub	sp, #20
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
 8008698:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	4a40      	ldr	r2, [pc, #256]	; (80087a4 <TIM_Base_SetConfig+0x114>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d013      	beq.n	80086d0 <TIM_Base_SetConfig+0x40>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086ae:	d00f      	beq.n	80086d0 <TIM_Base_SetConfig+0x40>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	4a3d      	ldr	r2, [pc, #244]	; (80087a8 <TIM_Base_SetConfig+0x118>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d00b      	beq.n	80086d0 <TIM_Base_SetConfig+0x40>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	4a3c      	ldr	r2, [pc, #240]	; (80087ac <TIM_Base_SetConfig+0x11c>)
 80086bc:	4293      	cmp	r3, r2
 80086be:	d007      	beq.n	80086d0 <TIM_Base_SetConfig+0x40>
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	4a3b      	ldr	r2, [pc, #236]	; (80087b0 <TIM_Base_SetConfig+0x120>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d003      	beq.n	80086d0 <TIM_Base_SetConfig+0x40>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	4a3a      	ldr	r2, [pc, #232]	; (80087b4 <TIM_Base_SetConfig+0x124>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d108      	bne.n	80086e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	685b      	ldr	r3, [r3, #4]
 80086dc:	68fa      	ldr	r2, [r7, #12]
 80086de:	4313      	orrs	r3, r2
 80086e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	4a2f      	ldr	r2, [pc, #188]	; (80087a4 <TIM_Base_SetConfig+0x114>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d02b      	beq.n	8008742 <TIM_Base_SetConfig+0xb2>
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086f0:	d027      	beq.n	8008742 <TIM_Base_SetConfig+0xb2>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	4a2c      	ldr	r2, [pc, #176]	; (80087a8 <TIM_Base_SetConfig+0x118>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d023      	beq.n	8008742 <TIM_Base_SetConfig+0xb2>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	4a2b      	ldr	r2, [pc, #172]	; (80087ac <TIM_Base_SetConfig+0x11c>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d01f      	beq.n	8008742 <TIM_Base_SetConfig+0xb2>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	4a2a      	ldr	r2, [pc, #168]	; (80087b0 <TIM_Base_SetConfig+0x120>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d01b      	beq.n	8008742 <TIM_Base_SetConfig+0xb2>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	4a29      	ldr	r2, [pc, #164]	; (80087b4 <TIM_Base_SetConfig+0x124>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d017      	beq.n	8008742 <TIM_Base_SetConfig+0xb2>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	4a28      	ldr	r2, [pc, #160]	; (80087b8 <TIM_Base_SetConfig+0x128>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d013      	beq.n	8008742 <TIM_Base_SetConfig+0xb2>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	4a27      	ldr	r2, [pc, #156]	; (80087bc <TIM_Base_SetConfig+0x12c>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d00f      	beq.n	8008742 <TIM_Base_SetConfig+0xb2>
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	4a26      	ldr	r2, [pc, #152]	; (80087c0 <TIM_Base_SetConfig+0x130>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d00b      	beq.n	8008742 <TIM_Base_SetConfig+0xb2>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	4a25      	ldr	r2, [pc, #148]	; (80087c4 <TIM_Base_SetConfig+0x134>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d007      	beq.n	8008742 <TIM_Base_SetConfig+0xb2>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	4a24      	ldr	r2, [pc, #144]	; (80087c8 <TIM_Base_SetConfig+0x138>)
 8008736:	4293      	cmp	r3, r2
 8008738:	d003      	beq.n	8008742 <TIM_Base_SetConfig+0xb2>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	4a23      	ldr	r2, [pc, #140]	; (80087cc <TIM_Base_SetConfig+0x13c>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d108      	bne.n	8008754 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008748:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	68db      	ldr	r3, [r3, #12]
 800874e:	68fa      	ldr	r2, [r7, #12]
 8008750:	4313      	orrs	r3, r2
 8008752:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	695b      	ldr	r3, [r3, #20]
 800875e:	4313      	orrs	r3, r2
 8008760:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	68fa      	ldr	r2, [r7, #12]
 8008766:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	689a      	ldr	r2, [r3, #8]
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	681a      	ldr	r2, [r3, #0]
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	4a0a      	ldr	r2, [pc, #40]	; (80087a4 <TIM_Base_SetConfig+0x114>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d003      	beq.n	8008788 <TIM_Base_SetConfig+0xf8>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	4a0c      	ldr	r2, [pc, #48]	; (80087b4 <TIM_Base_SetConfig+0x124>)
 8008784:	4293      	cmp	r3, r2
 8008786:	d103      	bne.n	8008790 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	691a      	ldr	r2, [r3, #16]
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2201      	movs	r2, #1
 8008794:	615a      	str	r2, [r3, #20]
}
 8008796:	bf00      	nop
 8008798:	3714      	adds	r7, #20
 800879a:	46bd      	mov	sp, r7
 800879c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a0:	4770      	bx	lr
 80087a2:	bf00      	nop
 80087a4:	40010000 	.word	0x40010000
 80087a8:	40000400 	.word	0x40000400
 80087ac:	40000800 	.word	0x40000800
 80087b0:	40000c00 	.word	0x40000c00
 80087b4:	40010400 	.word	0x40010400
 80087b8:	40014000 	.word	0x40014000
 80087bc:	40014400 	.word	0x40014400
 80087c0:	40014800 	.word	0x40014800
 80087c4:	40001800 	.word	0x40001800
 80087c8:	40001c00 	.word	0x40001c00
 80087cc:	40002000 	.word	0x40002000

080087d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80087d0:	b480      	push	{r7}
 80087d2:	b087      	sub	sp, #28
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
 80087d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6a1b      	ldr	r3, [r3, #32]
 80087de:	f023 0201 	bic.w	r2, r3, #1
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6a1b      	ldr	r3, [r3, #32]
 80087ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	685b      	ldr	r3, [r3, #4]
 80087f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	699b      	ldr	r3, [r3, #24]
 80087f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	f023 0303 	bic.w	r3, r3, #3
 8008806:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	68fa      	ldr	r2, [r7, #12]
 800880e:	4313      	orrs	r3, r2
 8008810:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	f023 0302 	bic.w	r3, r3, #2
 8008818:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	689b      	ldr	r3, [r3, #8]
 800881e:	697a      	ldr	r2, [r7, #20]
 8008820:	4313      	orrs	r3, r2
 8008822:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	4a20      	ldr	r2, [pc, #128]	; (80088a8 <TIM_OC1_SetConfig+0xd8>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d003      	beq.n	8008834 <TIM_OC1_SetConfig+0x64>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	4a1f      	ldr	r2, [pc, #124]	; (80088ac <TIM_OC1_SetConfig+0xdc>)
 8008830:	4293      	cmp	r3, r2
 8008832:	d10c      	bne.n	800884e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008834:	697b      	ldr	r3, [r7, #20]
 8008836:	f023 0308 	bic.w	r3, r3, #8
 800883a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	68db      	ldr	r3, [r3, #12]
 8008840:	697a      	ldr	r2, [r7, #20]
 8008842:	4313      	orrs	r3, r2
 8008844:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008846:	697b      	ldr	r3, [r7, #20]
 8008848:	f023 0304 	bic.w	r3, r3, #4
 800884c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	4a15      	ldr	r2, [pc, #84]	; (80088a8 <TIM_OC1_SetConfig+0xd8>)
 8008852:	4293      	cmp	r3, r2
 8008854:	d003      	beq.n	800885e <TIM_OC1_SetConfig+0x8e>
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	4a14      	ldr	r2, [pc, #80]	; (80088ac <TIM_OC1_SetConfig+0xdc>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d111      	bne.n	8008882 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800885e:	693b      	ldr	r3, [r7, #16]
 8008860:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008864:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800886c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	695b      	ldr	r3, [r3, #20]
 8008872:	693a      	ldr	r2, [r7, #16]
 8008874:	4313      	orrs	r3, r2
 8008876:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	699b      	ldr	r3, [r3, #24]
 800887c:	693a      	ldr	r2, [r7, #16]
 800887e:	4313      	orrs	r3, r2
 8008880:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	693a      	ldr	r2, [r7, #16]
 8008886:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	68fa      	ldr	r2, [r7, #12]
 800888c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	685a      	ldr	r2, [r3, #4]
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	697a      	ldr	r2, [r7, #20]
 800889a:	621a      	str	r2, [r3, #32]
}
 800889c:	bf00      	nop
 800889e:	371c      	adds	r7, #28
 80088a0:	46bd      	mov	sp, r7
 80088a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a6:	4770      	bx	lr
 80088a8:	40010000 	.word	0x40010000
 80088ac:	40010400 	.word	0x40010400

080088b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80088b0:	b480      	push	{r7}
 80088b2:	b087      	sub	sp, #28
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
 80088b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6a1b      	ldr	r3, [r3, #32]
 80088be:	f023 0210 	bic.w	r2, r3, #16
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6a1b      	ldr	r3, [r3, #32]
 80088ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	685b      	ldr	r3, [r3, #4]
 80088d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	699b      	ldr	r3, [r3, #24]
 80088d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	021b      	lsls	r3, r3, #8
 80088ee:	68fa      	ldr	r2, [r7, #12]
 80088f0:	4313      	orrs	r3, r2
 80088f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80088f4:	697b      	ldr	r3, [r7, #20]
 80088f6:	f023 0320 	bic.w	r3, r3, #32
 80088fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	689b      	ldr	r3, [r3, #8]
 8008900:	011b      	lsls	r3, r3, #4
 8008902:	697a      	ldr	r2, [r7, #20]
 8008904:	4313      	orrs	r3, r2
 8008906:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	4a22      	ldr	r2, [pc, #136]	; (8008994 <TIM_OC2_SetConfig+0xe4>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d003      	beq.n	8008918 <TIM_OC2_SetConfig+0x68>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	4a21      	ldr	r2, [pc, #132]	; (8008998 <TIM_OC2_SetConfig+0xe8>)
 8008914:	4293      	cmp	r3, r2
 8008916:	d10d      	bne.n	8008934 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800891e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	68db      	ldr	r3, [r3, #12]
 8008924:	011b      	lsls	r3, r3, #4
 8008926:	697a      	ldr	r2, [r7, #20]
 8008928:	4313      	orrs	r3, r2
 800892a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008932:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	4a17      	ldr	r2, [pc, #92]	; (8008994 <TIM_OC2_SetConfig+0xe4>)
 8008938:	4293      	cmp	r3, r2
 800893a:	d003      	beq.n	8008944 <TIM_OC2_SetConfig+0x94>
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	4a16      	ldr	r2, [pc, #88]	; (8008998 <TIM_OC2_SetConfig+0xe8>)
 8008940:	4293      	cmp	r3, r2
 8008942:	d113      	bne.n	800896c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008944:	693b      	ldr	r3, [r7, #16]
 8008946:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800894a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800894c:	693b      	ldr	r3, [r7, #16]
 800894e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008952:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	695b      	ldr	r3, [r3, #20]
 8008958:	009b      	lsls	r3, r3, #2
 800895a:	693a      	ldr	r2, [r7, #16]
 800895c:	4313      	orrs	r3, r2
 800895e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	699b      	ldr	r3, [r3, #24]
 8008964:	009b      	lsls	r3, r3, #2
 8008966:	693a      	ldr	r2, [r7, #16]
 8008968:	4313      	orrs	r3, r2
 800896a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	693a      	ldr	r2, [r7, #16]
 8008970:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	68fa      	ldr	r2, [r7, #12]
 8008976:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	685a      	ldr	r2, [r3, #4]
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	697a      	ldr	r2, [r7, #20]
 8008984:	621a      	str	r2, [r3, #32]
}
 8008986:	bf00      	nop
 8008988:	371c      	adds	r7, #28
 800898a:	46bd      	mov	sp, r7
 800898c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008990:	4770      	bx	lr
 8008992:	bf00      	nop
 8008994:	40010000 	.word	0x40010000
 8008998:	40010400 	.word	0x40010400

0800899c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800899c:	b480      	push	{r7}
 800899e:	b087      	sub	sp, #28
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
 80089a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6a1b      	ldr	r3, [r3, #32]
 80089aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6a1b      	ldr	r3, [r3, #32]
 80089b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	685b      	ldr	r3, [r3, #4]
 80089bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	69db      	ldr	r3, [r3, #28]
 80089c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	f023 0303 	bic.w	r3, r3, #3
 80089d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	68fa      	ldr	r2, [r7, #12]
 80089da:	4313      	orrs	r3, r2
 80089dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80089e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	689b      	ldr	r3, [r3, #8]
 80089ea:	021b      	lsls	r3, r3, #8
 80089ec:	697a      	ldr	r2, [r7, #20]
 80089ee:	4313      	orrs	r3, r2
 80089f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	4a21      	ldr	r2, [pc, #132]	; (8008a7c <TIM_OC3_SetConfig+0xe0>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d003      	beq.n	8008a02 <TIM_OC3_SetConfig+0x66>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	4a20      	ldr	r2, [pc, #128]	; (8008a80 <TIM_OC3_SetConfig+0xe4>)
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d10d      	bne.n	8008a1e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008a08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	68db      	ldr	r3, [r3, #12]
 8008a0e:	021b      	lsls	r3, r3, #8
 8008a10:	697a      	ldr	r2, [r7, #20]
 8008a12:	4313      	orrs	r3, r2
 8008a14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008a1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	4a16      	ldr	r2, [pc, #88]	; (8008a7c <TIM_OC3_SetConfig+0xe0>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d003      	beq.n	8008a2e <TIM_OC3_SetConfig+0x92>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	4a15      	ldr	r2, [pc, #84]	; (8008a80 <TIM_OC3_SetConfig+0xe4>)
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	d113      	bne.n	8008a56 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008a2e:	693b      	ldr	r3, [r7, #16]
 8008a30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008a36:	693b      	ldr	r3, [r7, #16]
 8008a38:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008a3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	695b      	ldr	r3, [r3, #20]
 8008a42:	011b      	lsls	r3, r3, #4
 8008a44:	693a      	ldr	r2, [r7, #16]
 8008a46:	4313      	orrs	r3, r2
 8008a48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	699b      	ldr	r3, [r3, #24]
 8008a4e:	011b      	lsls	r3, r3, #4
 8008a50:	693a      	ldr	r2, [r7, #16]
 8008a52:	4313      	orrs	r3, r2
 8008a54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	693a      	ldr	r2, [r7, #16]
 8008a5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	68fa      	ldr	r2, [r7, #12]
 8008a60:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	685a      	ldr	r2, [r3, #4]
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	697a      	ldr	r2, [r7, #20]
 8008a6e:	621a      	str	r2, [r3, #32]
}
 8008a70:	bf00      	nop
 8008a72:	371c      	adds	r7, #28
 8008a74:	46bd      	mov	sp, r7
 8008a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7a:	4770      	bx	lr
 8008a7c:	40010000 	.word	0x40010000
 8008a80:	40010400 	.word	0x40010400

08008a84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008a84:	b480      	push	{r7}
 8008a86:	b087      	sub	sp, #28
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
 8008a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6a1b      	ldr	r3, [r3, #32]
 8008a92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6a1b      	ldr	r3, [r3, #32]
 8008a9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	685b      	ldr	r3, [r3, #4]
 8008aa4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	69db      	ldr	r3, [r3, #28]
 8008aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ab2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008aba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	021b      	lsls	r3, r3, #8
 8008ac2:	68fa      	ldr	r2, [r7, #12]
 8008ac4:	4313      	orrs	r3, r2
 8008ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008ac8:	693b      	ldr	r3, [r7, #16]
 8008aca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008ace:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	689b      	ldr	r3, [r3, #8]
 8008ad4:	031b      	lsls	r3, r3, #12
 8008ad6:	693a      	ldr	r2, [r7, #16]
 8008ad8:	4313      	orrs	r3, r2
 8008ada:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	4a12      	ldr	r2, [pc, #72]	; (8008b28 <TIM_OC4_SetConfig+0xa4>)
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d003      	beq.n	8008aec <TIM_OC4_SetConfig+0x68>
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	4a11      	ldr	r2, [pc, #68]	; (8008b2c <TIM_OC4_SetConfig+0xa8>)
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d109      	bne.n	8008b00 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008aec:	697b      	ldr	r3, [r7, #20]
 8008aee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008af2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	695b      	ldr	r3, [r3, #20]
 8008af8:	019b      	lsls	r3, r3, #6
 8008afa:	697a      	ldr	r2, [r7, #20]
 8008afc:	4313      	orrs	r3, r2
 8008afe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	697a      	ldr	r2, [r7, #20]
 8008b04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	68fa      	ldr	r2, [r7, #12]
 8008b0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	685a      	ldr	r2, [r3, #4]
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	693a      	ldr	r2, [r7, #16]
 8008b18:	621a      	str	r2, [r3, #32]
}
 8008b1a:	bf00      	nop
 8008b1c:	371c      	adds	r7, #28
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b24:	4770      	bx	lr
 8008b26:	bf00      	nop
 8008b28:	40010000 	.word	0x40010000
 8008b2c:	40010400 	.word	0x40010400

08008b30 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b087      	sub	sp, #28
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	60f8      	str	r0, [r7, #12]
 8008b38:	60b9      	str	r1, [r7, #8]
 8008b3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	f003 031f 	and.w	r3, r3, #31
 8008b42:	2201      	movs	r2, #1
 8008b44:	fa02 f303 	lsl.w	r3, r2, r3
 8008b48:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	6a1a      	ldr	r2, [r3, #32]
 8008b4e:	697b      	ldr	r3, [r7, #20]
 8008b50:	43db      	mvns	r3, r3
 8008b52:	401a      	ands	r2, r3
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	6a1a      	ldr	r2, [r3, #32]
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	f003 031f 	and.w	r3, r3, #31
 8008b62:	6879      	ldr	r1, [r7, #4]
 8008b64:	fa01 f303 	lsl.w	r3, r1, r3
 8008b68:	431a      	orrs	r2, r3
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	621a      	str	r2, [r3, #32]
}
 8008b6e:	bf00      	nop
 8008b70:	371c      	adds	r7, #28
 8008b72:	46bd      	mov	sp, r7
 8008b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b78:	4770      	bx	lr
	...

08008b7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	b085      	sub	sp, #20
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
 8008b84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b8c:	2b01      	cmp	r3, #1
 8008b8e:	d101      	bne.n	8008b94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008b90:	2302      	movs	r3, #2
 8008b92:	e05a      	b.n	8008c4a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2201      	movs	r2, #1
 8008b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2202      	movs	r2, #2
 8008ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	685b      	ldr	r3, [r3, #4]
 8008baa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	689b      	ldr	r3, [r3, #8]
 8008bb2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	68fa      	ldr	r2, [r7, #12]
 8008bc2:	4313      	orrs	r3, r2
 8008bc4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	68fa      	ldr	r2, [r7, #12]
 8008bcc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	4a21      	ldr	r2, [pc, #132]	; (8008c58 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d022      	beq.n	8008c1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008be0:	d01d      	beq.n	8008c1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	4a1d      	ldr	r2, [pc, #116]	; (8008c5c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008be8:	4293      	cmp	r3, r2
 8008bea:	d018      	beq.n	8008c1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	4a1b      	ldr	r2, [pc, #108]	; (8008c60 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d013      	beq.n	8008c1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	4a1a      	ldr	r2, [pc, #104]	; (8008c64 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d00e      	beq.n	8008c1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	4a18      	ldr	r2, [pc, #96]	; (8008c68 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008c06:	4293      	cmp	r3, r2
 8008c08:	d009      	beq.n	8008c1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	4a17      	ldr	r2, [pc, #92]	; (8008c6c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008c10:	4293      	cmp	r3, r2
 8008c12:	d004      	beq.n	8008c1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	4a15      	ldr	r2, [pc, #84]	; (8008c70 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d10c      	bne.n	8008c38 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008c1e:	68bb      	ldr	r3, [r7, #8]
 8008c20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	685b      	ldr	r3, [r3, #4]
 8008c2a:	68ba      	ldr	r2, [r7, #8]
 8008c2c:	4313      	orrs	r3, r2
 8008c2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	68ba      	ldr	r2, [r7, #8]
 8008c36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2201      	movs	r2, #1
 8008c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2200      	movs	r2, #0
 8008c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008c48:	2300      	movs	r3, #0
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3714      	adds	r7, #20
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c54:	4770      	bx	lr
 8008c56:	bf00      	nop
 8008c58:	40010000 	.word	0x40010000
 8008c5c:	40000400 	.word	0x40000400
 8008c60:	40000800 	.word	0x40000800
 8008c64:	40000c00 	.word	0x40000c00
 8008c68:	40010400 	.word	0x40010400
 8008c6c:	40014000 	.word	0x40014000
 8008c70:	40001800 	.word	0x40001800

08008c74 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b085      	sub	sp, #20
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
 8008c7c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c88:	2b01      	cmp	r3, #1
 8008c8a:	d101      	bne.n	8008c90 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008c8c:	2302      	movs	r3, #2
 8008c8e:	e03d      	b.n	8008d0c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2201      	movs	r2, #1
 8008c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	68db      	ldr	r3, [r3, #12]
 8008ca2:	4313      	orrs	r3, r2
 8008ca4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	689b      	ldr	r3, [r3, #8]
 8008cb0:	4313      	orrs	r3, r2
 8008cb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	685b      	ldr	r3, [r3, #4]
 8008cbe:	4313      	orrs	r3, r2
 8008cc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	4313      	orrs	r3, r2
 8008cce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	691b      	ldr	r3, [r3, #16]
 8008cda:	4313      	orrs	r3, r2
 8008cdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	695b      	ldr	r3, [r3, #20]
 8008ce8:	4313      	orrs	r3, r2
 8008cea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	69db      	ldr	r3, [r3, #28]
 8008cf6:	4313      	orrs	r3, r2
 8008cf8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	68fa      	ldr	r2, [r7, #12]
 8008d00:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2200      	movs	r2, #0
 8008d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008d0a:	2300      	movs	r3, #0
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3714      	adds	r7, #20
 8008d10:	46bd      	mov	sp, r7
 8008d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d16:	4770      	bx	lr

08008d18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b082      	sub	sp, #8
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d101      	bne.n	8008d2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008d26:	2301      	movs	r3, #1
 8008d28:	e03f      	b.n	8008daa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d30:	b2db      	uxtb	r3, r3
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d106      	bne.n	8008d44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2200      	movs	r2, #0
 8008d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f7fc fba6 	bl	8005490 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2224      	movs	r2, #36	; 0x24
 8008d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	68da      	ldr	r2, [r3, #12]
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008d5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f000 fd7b 	bl	8009858 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	691a      	ldr	r2, [r3, #16]
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008d70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	695a      	ldr	r2, [r3, #20]
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008d80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	68da      	ldr	r2, [r3, #12]
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008d90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2200      	movs	r2, #0
 8008d96:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2220      	movs	r2, #32
 8008d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2220      	movs	r2, #32
 8008da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008da8:	2300      	movs	r3, #0
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	3708      	adds	r7, #8
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}

08008db2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008db2:	b580      	push	{r7, lr}
 8008db4:	b08a      	sub	sp, #40	; 0x28
 8008db6:	af02      	add	r7, sp, #8
 8008db8:	60f8      	str	r0, [r7, #12]
 8008dba:	60b9      	str	r1, [r7, #8]
 8008dbc:	603b      	str	r3, [r7, #0]
 8008dbe:	4613      	mov	r3, r2
 8008dc0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008dcc:	b2db      	uxtb	r3, r3
 8008dce:	2b20      	cmp	r3, #32
 8008dd0:	d17c      	bne.n	8008ecc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d002      	beq.n	8008dde <HAL_UART_Transmit+0x2c>
 8008dd8:	88fb      	ldrh	r3, [r7, #6]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d101      	bne.n	8008de2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008dde:	2301      	movs	r3, #1
 8008de0:	e075      	b.n	8008ece <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008de8:	2b01      	cmp	r3, #1
 8008dea:	d101      	bne.n	8008df0 <HAL_UART_Transmit+0x3e>
 8008dec:	2302      	movs	r3, #2
 8008dee:	e06e      	b.n	8008ece <HAL_UART_Transmit+0x11c>
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	2201      	movs	r2, #1
 8008df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	2221      	movs	r2, #33	; 0x21
 8008e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008e06:	f7fc ffb1 	bl	8005d6c <HAL_GetTick>
 8008e0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	88fa      	ldrh	r2, [r7, #6]
 8008e10:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	88fa      	ldrh	r2, [r7, #6]
 8008e16:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	689b      	ldr	r3, [r3, #8]
 8008e1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e20:	d108      	bne.n	8008e34 <HAL_UART_Transmit+0x82>
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	691b      	ldr	r3, [r3, #16]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d104      	bne.n	8008e34 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	61bb      	str	r3, [r7, #24]
 8008e32:	e003      	b.n	8008e3c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008e38:	2300      	movs	r3, #0
 8008e3a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008e44:	e02a      	b.n	8008e9c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	9300      	str	r3, [sp, #0]
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	2180      	movs	r1, #128	; 0x80
 8008e50:	68f8      	ldr	r0, [r7, #12]
 8008e52:	f000 faf9 	bl	8009448 <UART_WaitOnFlagUntilTimeout>
 8008e56:	4603      	mov	r3, r0
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d001      	beq.n	8008e60 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008e5c:	2303      	movs	r3, #3
 8008e5e:	e036      	b.n	8008ece <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008e60:	69fb      	ldr	r3, [r7, #28]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d10b      	bne.n	8008e7e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008e66:	69bb      	ldr	r3, [r7, #24]
 8008e68:	881b      	ldrh	r3, [r3, #0]
 8008e6a:	461a      	mov	r2, r3
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008e74:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008e76:	69bb      	ldr	r3, [r7, #24]
 8008e78:	3302      	adds	r3, #2
 8008e7a:	61bb      	str	r3, [r7, #24]
 8008e7c:	e007      	b.n	8008e8e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008e7e:	69fb      	ldr	r3, [r7, #28]
 8008e80:	781a      	ldrb	r2, [r3, #0]
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008e88:	69fb      	ldr	r3, [r7, #28]
 8008e8a:	3301      	adds	r3, #1
 8008e8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008e92:	b29b      	uxth	r3, r3
 8008e94:	3b01      	subs	r3, #1
 8008e96:	b29a      	uxth	r2, r3
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008ea0:	b29b      	uxth	r3, r3
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d1cf      	bne.n	8008e46 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	9300      	str	r3, [sp, #0]
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	2200      	movs	r2, #0
 8008eae:	2140      	movs	r1, #64	; 0x40
 8008eb0:	68f8      	ldr	r0, [r7, #12]
 8008eb2:	f000 fac9 	bl	8009448 <UART_WaitOnFlagUntilTimeout>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d001      	beq.n	8008ec0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008ebc:	2303      	movs	r3, #3
 8008ebe:	e006      	b.n	8008ece <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	2220      	movs	r2, #32
 8008ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	e000      	b.n	8008ece <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008ecc:	2302      	movs	r3, #2
  }
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	3720      	adds	r7, #32
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}
	...

08008ed8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b0ba      	sub	sp, #232	; 0xe8
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	68db      	ldr	r3, [r3, #12]
 8008ef0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	695b      	ldr	r3, [r3, #20]
 8008efa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008efe:	2300      	movs	r3, #0
 8008f00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008f04:	2300      	movs	r3, #0
 8008f06:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008f0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f0e:	f003 030f 	and.w	r3, r3, #15
 8008f12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008f16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d10f      	bne.n	8008f3e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008f1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f22:	f003 0320 	and.w	r3, r3, #32
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d009      	beq.n	8008f3e <HAL_UART_IRQHandler+0x66>
 8008f2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f2e:	f003 0320 	and.w	r3, r3, #32
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d003      	beq.n	8008f3e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f000 fbd3 	bl	80096e2 <UART_Receive_IT>
      return;
 8008f3c:	e256      	b.n	80093ec <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008f3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	f000 80de 	beq.w	8009104 <HAL_UART_IRQHandler+0x22c>
 8008f48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008f4c:	f003 0301 	and.w	r3, r3, #1
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d106      	bne.n	8008f62 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008f54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f58:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	f000 80d1 	beq.w	8009104 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008f62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f66:	f003 0301 	and.w	r3, r3, #1
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d00b      	beq.n	8008f86 <HAL_UART_IRQHandler+0xae>
 8008f6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d005      	beq.n	8008f86 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f7e:	f043 0201 	orr.w	r2, r3, #1
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008f86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f8a:	f003 0304 	and.w	r3, r3, #4
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d00b      	beq.n	8008faa <HAL_UART_IRQHandler+0xd2>
 8008f92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008f96:	f003 0301 	and.w	r3, r3, #1
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d005      	beq.n	8008faa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fa2:	f043 0202 	orr.w	r2, r3, #2
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008faa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fae:	f003 0302 	and.w	r3, r3, #2
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d00b      	beq.n	8008fce <HAL_UART_IRQHandler+0xf6>
 8008fb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008fba:	f003 0301 	and.w	r3, r3, #1
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d005      	beq.n	8008fce <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fc6:	f043 0204 	orr.w	r2, r3, #4
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008fce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fd2:	f003 0308 	and.w	r3, r3, #8
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d011      	beq.n	8008ffe <HAL_UART_IRQHandler+0x126>
 8008fda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008fde:	f003 0320 	and.w	r3, r3, #32
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d105      	bne.n	8008ff2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008fe6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008fea:	f003 0301 	and.w	r3, r3, #1
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d005      	beq.n	8008ffe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ff6:	f043 0208 	orr.w	r2, r3, #8
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009002:	2b00      	cmp	r3, #0
 8009004:	f000 81ed 	beq.w	80093e2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009008:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800900c:	f003 0320 	and.w	r3, r3, #32
 8009010:	2b00      	cmp	r3, #0
 8009012:	d008      	beq.n	8009026 <HAL_UART_IRQHandler+0x14e>
 8009014:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009018:	f003 0320 	and.w	r3, r3, #32
 800901c:	2b00      	cmp	r3, #0
 800901e:	d002      	beq.n	8009026 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	f000 fb5e 	bl	80096e2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	695b      	ldr	r3, [r3, #20]
 800902c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009030:	2b40      	cmp	r3, #64	; 0x40
 8009032:	bf0c      	ite	eq
 8009034:	2301      	moveq	r3, #1
 8009036:	2300      	movne	r3, #0
 8009038:	b2db      	uxtb	r3, r3
 800903a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009042:	f003 0308 	and.w	r3, r3, #8
 8009046:	2b00      	cmp	r3, #0
 8009048:	d103      	bne.n	8009052 <HAL_UART_IRQHandler+0x17a>
 800904a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800904e:	2b00      	cmp	r3, #0
 8009050:	d04f      	beq.n	80090f2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f000 fa66 	bl	8009524 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	695b      	ldr	r3, [r3, #20]
 800905e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009062:	2b40      	cmp	r3, #64	; 0x40
 8009064:	d141      	bne.n	80090ea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	3314      	adds	r3, #20
 800906c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009070:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009074:	e853 3f00 	ldrex	r3, [r3]
 8009078:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800907c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009080:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009084:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	3314      	adds	r3, #20
 800908e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009092:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009096:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800909a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800909e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80090a2:	e841 2300 	strex	r3, r2, [r1]
 80090a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80090aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d1d9      	bne.n	8009066 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d013      	beq.n	80090e2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090be:	4a7d      	ldr	r2, [pc, #500]	; (80092b4 <HAL_UART_IRQHandler+0x3dc>)
 80090c0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090c6:	4618      	mov	r0, r3
 80090c8:	f7fd f801 	bl	80060ce <HAL_DMA_Abort_IT>
 80090cc:	4603      	mov	r3, r0
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d016      	beq.n	8009100 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090d8:	687a      	ldr	r2, [r7, #4]
 80090da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80090dc:	4610      	mov	r0, r2
 80090de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090e0:	e00e      	b.n	8009100 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f000 f99a 	bl	800941c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090e8:	e00a      	b.n	8009100 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f000 f996 	bl	800941c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090f0:	e006      	b.n	8009100 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f000 f992 	bl	800941c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2200      	movs	r2, #0
 80090fc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80090fe:	e170      	b.n	80093e2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009100:	bf00      	nop
    return;
 8009102:	e16e      	b.n	80093e2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009108:	2b01      	cmp	r3, #1
 800910a:	f040 814a 	bne.w	80093a2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800910e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009112:	f003 0310 	and.w	r3, r3, #16
 8009116:	2b00      	cmp	r3, #0
 8009118:	f000 8143 	beq.w	80093a2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800911c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009120:	f003 0310 	and.w	r3, r3, #16
 8009124:	2b00      	cmp	r3, #0
 8009126:	f000 813c 	beq.w	80093a2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800912a:	2300      	movs	r3, #0
 800912c:	60bb      	str	r3, [r7, #8]
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	60bb      	str	r3, [r7, #8]
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	685b      	ldr	r3, [r3, #4]
 800913c:	60bb      	str	r3, [r7, #8]
 800913e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	695b      	ldr	r3, [r3, #20]
 8009146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800914a:	2b40      	cmp	r3, #64	; 0x40
 800914c:	f040 80b4 	bne.w	80092b8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	685b      	ldr	r3, [r3, #4]
 8009158:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800915c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009160:	2b00      	cmp	r3, #0
 8009162:	f000 8140 	beq.w	80093e6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800916a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800916e:	429a      	cmp	r2, r3
 8009170:	f080 8139 	bcs.w	80093e6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800917a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009180:	69db      	ldr	r3, [r3, #28]
 8009182:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009186:	f000 8088 	beq.w	800929a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	330c      	adds	r3, #12
 8009190:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009194:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009198:	e853 3f00 	ldrex	r3, [r3]
 800919c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80091a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80091a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80091a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	330c      	adds	r3, #12
 80091b2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80091b6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80091ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091be:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80091c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80091c6:	e841 2300 	strex	r3, r2, [r1]
 80091ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80091ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d1d9      	bne.n	800918a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	3314      	adds	r3, #20
 80091dc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80091e0:	e853 3f00 	ldrex	r3, [r3]
 80091e4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80091e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80091e8:	f023 0301 	bic.w	r3, r3, #1
 80091ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	3314      	adds	r3, #20
 80091f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80091fa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80091fe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009200:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009202:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009206:	e841 2300 	strex	r3, r2, [r1]
 800920a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800920c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800920e:	2b00      	cmp	r3, #0
 8009210:	d1e1      	bne.n	80091d6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	3314      	adds	r3, #20
 8009218:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800921a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800921c:	e853 3f00 	ldrex	r3, [r3]
 8009220:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009222:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009224:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009228:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	3314      	adds	r3, #20
 8009232:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009236:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009238:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800923a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800923c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800923e:	e841 2300 	strex	r3, r2, [r1]
 8009242:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009244:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009246:	2b00      	cmp	r3, #0
 8009248:	d1e3      	bne.n	8009212 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2220      	movs	r2, #32
 800924e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2200      	movs	r2, #0
 8009256:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	330c      	adds	r3, #12
 800925e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009260:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009262:	e853 3f00 	ldrex	r3, [r3]
 8009266:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009268:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800926a:	f023 0310 	bic.w	r3, r3, #16
 800926e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	330c      	adds	r3, #12
 8009278:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800927c:	65ba      	str	r2, [r7, #88]	; 0x58
 800927e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009280:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009282:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009284:	e841 2300 	strex	r3, r2, [r1]
 8009288:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800928a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800928c:	2b00      	cmp	r3, #0
 800928e:	d1e3      	bne.n	8009258 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009294:	4618      	mov	r0, r3
 8009296:	f7fc feaa 	bl	8005fee <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80092a2:	b29b      	uxth	r3, r3
 80092a4:	1ad3      	subs	r3, r2, r3
 80092a6:	b29b      	uxth	r3, r3
 80092a8:	4619      	mov	r1, r3
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f000 f8c0 	bl	8009430 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80092b0:	e099      	b.n	80093e6 <HAL_UART_IRQHandler+0x50e>
 80092b2:	bf00      	nop
 80092b4:	080095eb 	.word	0x080095eb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80092c0:	b29b      	uxth	r3, r3
 80092c2:	1ad3      	subs	r3, r2, r3
 80092c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80092cc:	b29b      	uxth	r3, r3
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	f000 808b 	beq.w	80093ea <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80092d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80092d8:	2b00      	cmp	r3, #0
 80092da:	f000 8086 	beq.w	80093ea <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	330c      	adds	r3, #12
 80092e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092e8:	e853 3f00 	ldrex	r3, [r3]
 80092ec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80092ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80092f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	330c      	adds	r3, #12
 80092fe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009302:	647a      	str	r2, [r7, #68]	; 0x44
 8009304:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009306:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009308:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800930a:	e841 2300 	strex	r3, r2, [r1]
 800930e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009310:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009312:	2b00      	cmp	r3, #0
 8009314:	d1e3      	bne.n	80092de <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	3314      	adds	r3, #20
 800931c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800931e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009320:	e853 3f00 	ldrex	r3, [r3]
 8009324:	623b      	str	r3, [r7, #32]
   return(result);
 8009326:	6a3b      	ldr	r3, [r7, #32]
 8009328:	f023 0301 	bic.w	r3, r3, #1
 800932c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	3314      	adds	r3, #20
 8009336:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800933a:	633a      	str	r2, [r7, #48]	; 0x30
 800933c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800933e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009340:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009342:	e841 2300 	strex	r3, r2, [r1]
 8009346:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800934a:	2b00      	cmp	r3, #0
 800934c:	d1e3      	bne.n	8009316 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2220      	movs	r2, #32
 8009352:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2200      	movs	r2, #0
 800935a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	330c      	adds	r3, #12
 8009362:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009364:	693b      	ldr	r3, [r7, #16]
 8009366:	e853 3f00 	ldrex	r3, [r3]
 800936a:	60fb      	str	r3, [r7, #12]
   return(result);
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	f023 0310 	bic.w	r3, r3, #16
 8009372:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	330c      	adds	r3, #12
 800937c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009380:	61fa      	str	r2, [r7, #28]
 8009382:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009384:	69b9      	ldr	r1, [r7, #24]
 8009386:	69fa      	ldr	r2, [r7, #28]
 8009388:	e841 2300 	strex	r3, r2, [r1]
 800938c:	617b      	str	r3, [r7, #20]
   return(result);
 800938e:	697b      	ldr	r3, [r7, #20]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d1e3      	bne.n	800935c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009394:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009398:	4619      	mov	r1, r3
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	f000 f848 	bl	8009430 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80093a0:	e023      	b.n	80093ea <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80093a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d009      	beq.n	80093c2 <HAL_UART_IRQHandler+0x4ea>
 80093ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d003      	beq.n	80093c2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f000 f929 	bl	8009612 <UART_Transmit_IT>
    return;
 80093c0:	e014      	b.n	80093ec <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80093c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d00e      	beq.n	80093ec <HAL_UART_IRQHandler+0x514>
 80093ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d008      	beq.n	80093ec <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f000 f969 	bl	80096b2 <UART_EndTransmit_IT>
    return;
 80093e0:	e004      	b.n	80093ec <HAL_UART_IRQHandler+0x514>
    return;
 80093e2:	bf00      	nop
 80093e4:	e002      	b.n	80093ec <HAL_UART_IRQHandler+0x514>
      return;
 80093e6:	bf00      	nop
 80093e8:	e000      	b.n	80093ec <HAL_UART_IRQHandler+0x514>
      return;
 80093ea:	bf00      	nop
  }
}
 80093ec:	37e8      	adds	r7, #232	; 0xe8
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}
 80093f2:	bf00      	nop

080093f4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80093f4:	b480      	push	{r7}
 80093f6:	b083      	sub	sp, #12
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80093fc:	bf00      	nop
 80093fe:	370c      	adds	r7, #12
 8009400:	46bd      	mov	sp, r7
 8009402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009406:	4770      	bx	lr

08009408 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009408:	b480      	push	{r7}
 800940a:	b083      	sub	sp, #12
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009410:	bf00      	nop
 8009412:	370c      	adds	r7, #12
 8009414:	46bd      	mov	sp, r7
 8009416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941a:	4770      	bx	lr

0800941c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800941c:	b480      	push	{r7}
 800941e:	b083      	sub	sp, #12
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009424:	bf00      	nop
 8009426:	370c      	adds	r7, #12
 8009428:	46bd      	mov	sp, r7
 800942a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942e:	4770      	bx	lr

08009430 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009430:	b480      	push	{r7}
 8009432:	b083      	sub	sp, #12
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
 8009438:	460b      	mov	r3, r1
 800943a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800943c:	bf00      	nop
 800943e:	370c      	adds	r7, #12
 8009440:	46bd      	mov	sp, r7
 8009442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009446:	4770      	bx	lr

08009448 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b090      	sub	sp, #64	; 0x40
 800944c:	af00      	add	r7, sp, #0
 800944e:	60f8      	str	r0, [r7, #12]
 8009450:	60b9      	str	r1, [r7, #8]
 8009452:	603b      	str	r3, [r7, #0]
 8009454:	4613      	mov	r3, r2
 8009456:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009458:	e050      	b.n	80094fc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800945a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800945c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009460:	d04c      	beq.n	80094fc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009462:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009464:	2b00      	cmp	r3, #0
 8009466:	d007      	beq.n	8009478 <UART_WaitOnFlagUntilTimeout+0x30>
 8009468:	f7fc fc80 	bl	8005d6c <HAL_GetTick>
 800946c:	4602      	mov	r2, r0
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	1ad3      	subs	r3, r2, r3
 8009472:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009474:	429a      	cmp	r2, r3
 8009476:	d241      	bcs.n	80094fc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	330c      	adds	r3, #12
 800947e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009482:	e853 3f00 	ldrex	r3, [r3]
 8009486:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800948a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800948e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	330c      	adds	r3, #12
 8009496:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009498:	637a      	str	r2, [r7, #52]	; 0x34
 800949a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800949c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800949e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80094a0:	e841 2300 	strex	r3, r2, [r1]
 80094a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80094a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d1e5      	bne.n	8009478 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	3314      	adds	r3, #20
 80094b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094b4:	697b      	ldr	r3, [r7, #20]
 80094b6:	e853 3f00 	ldrex	r3, [r3]
 80094ba:	613b      	str	r3, [r7, #16]
   return(result);
 80094bc:	693b      	ldr	r3, [r7, #16]
 80094be:	f023 0301 	bic.w	r3, r3, #1
 80094c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	3314      	adds	r3, #20
 80094ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80094cc:	623a      	str	r2, [r7, #32]
 80094ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094d0:	69f9      	ldr	r1, [r7, #28]
 80094d2:	6a3a      	ldr	r2, [r7, #32]
 80094d4:	e841 2300 	strex	r3, r2, [r1]
 80094d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80094da:	69bb      	ldr	r3, [r7, #24]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d1e5      	bne.n	80094ac <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	2220      	movs	r2, #32
 80094e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	2220      	movs	r2, #32
 80094ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	2200      	movs	r2, #0
 80094f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80094f8:	2303      	movs	r3, #3
 80094fa:	e00f      	b.n	800951c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	681a      	ldr	r2, [r3, #0]
 8009502:	68bb      	ldr	r3, [r7, #8]
 8009504:	4013      	ands	r3, r2
 8009506:	68ba      	ldr	r2, [r7, #8]
 8009508:	429a      	cmp	r2, r3
 800950a:	bf0c      	ite	eq
 800950c:	2301      	moveq	r3, #1
 800950e:	2300      	movne	r3, #0
 8009510:	b2db      	uxtb	r3, r3
 8009512:	461a      	mov	r2, r3
 8009514:	79fb      	ldrb	r3, [r7, #7]
 8009516:	429a      	cmp	r2, r3
 8009518:	d09f      	beq.n	800945a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800951a:	2300      	movs	r3, #0
}
 800951c:	4618      	mov	r0, r3
 800951e:	3740      	adds	r7, #64	; 0x40
 8009520:	46bd      	mov	sp, r7
 8009522:	bd80      	pop	{r7, pc}

08009524 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009524:	b480      	push	{r7}
 8009526:	b095      	sub	sp, #84	; 0x54
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	330c      	adds	r3, #12
 8009532:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009536:	e853 3f00 	ldrex	r3, [r3]
 800953a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800953c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800953e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009542:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	330c      	adds	r3, #12
 800954a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800954c:	643a      	str	r2, [r7, #64]	; 0x40
 800954e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009550:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009552:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009554:	e841 2300 	strex	r3, r2, [r1]
 8009558:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800955a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800955c:	2b00      	cmp	r3, #0
 800955e:	d1e5      	bne.n	800952c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	3314      	adds	r3, #20
 8009566:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009568:	6a3b      	ldr	r3, [r7, #32]
 800956a:	e853 3f00 	ldrex	r3, [r3]
 800956e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009570:	69fb      	ldr	r3, [r7, #28]
 8009572:	f023 0301 	bic.w	r3, r3, #1
 8009576:	64bb      	str	r3, [r7, #72]	; 0x48
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	3314      	adds	r3, #20
 800957e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009580:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009582:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009584:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009586:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009588:	e841 2300 	strex	r3, r2, [r1]
 800958c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800958e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009590:	2b00      	cmp	r3, #0
 8009592:	d1e5      	bne.n	8009560 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009598:	2b01      	cmp	r3, #1
 800959a:	d119      	bne.n	80095d0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	330c      	adds	r3, #12
 80095a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	e853 3f00 	ldrex	r3, [r3]
 80095aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	f023 0310 	bic.w	r3, r3, #16
 80095b2:	647b      	str	r3, [r7, #68]	; 0x44
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	330c      	adds	r3, #12
 80095ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80095bc:	61ba      	str	r2, [r7, #24]
 80095be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095c0:	6979      	ldr	r1, [r7, #20]
 80095c2:	69ba      	ldr	r2, [r7, #24]
 80095c4:	e841 2300 	strex	r3, r2, [r1]
 80095c8:	613b      	str	r3, [r7, #16]
   return(result);
 80095ca:	693b      	ldr	r3, [r7, #16]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d1e5      	bne.n	800959c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2220      	movs	r2, #32
 80095d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2200      	movs	r2, #0
 80095dc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80095de:	bf00      	nop
 80095e0:	3754      	adds	r7, #84	; 0x54
 80095e2:	46bd      	mov	sp, r7
 80095e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e8:	4770      	bx	lr

080095ea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80095ea:	b580      	push	{r7, lr}
 80095ec:	b084      	sub	sp, #16
 80095ee:	af00      	add	r7, sp, #0
 80095f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095f6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	2200      	movs	r2, #0
 80095fc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	2200      	movs	r2, #0
 8009602:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009604:	68f8      	ldr	r0, [r7, #12]
 8009606:	f7ff ff09 	bl	800941c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800960a:	bf00      	nop
 800960c:	3710      	adds	r7, #16
 800960e:	46bd      	mov	sp, r7
 8009610:	bd80      	pop	{r7, pc}

08009612 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009612:	b480      	push	{r7}
 8009614:	b085      	sub	sp, #20
 8009616:	af00      	add	r7, sp, #0
 8009618:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009620:	b2db      	uxtb	r3, r3
 8009622:	2b21      	cmp	r3, #33	; 0x21
 8009624:	d13e      	bne.n	80096a4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	689b      	ldr	r3, [r3, #8]
 800962a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800962e:	d114      	bne.n	800965a <UART_Transmit_IT+0x48>
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	691b      	ldr	r3, [r3, #16]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d110      	bne.n	800965a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6a1b      	ldr	r3, [r3, #32]
 800963c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	881b      	ldrh	r3, [r3, #0]
 8009642:	461a      	mov	r2, r3
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800964c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6a1b      	ldr	r3, [r3, #32]
 8009652:	1c9a      	adds	r2, r3, #2
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	621a      	str	r2, [r3, #32]
 8009658:	e008      	b.n	800966c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6a1b      	ldr	r3, [r3, #32]
 800965e:	1c59      	adds	r1, r3, #1
 8009660:	687a      	ldr	r2, [r7, #4]
 8009662:	6211      	str	r1, [r2, #32]
 8009664:	781a      	ldrb	r2, [r3, #0]
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009670:	b29b      	uxth	r3, r3
 8009672:	3b01      	subs	r3, #1
 8009674:	b29b      	uxth	r3, r3
 8009676:	687a      	ldr	r2, [r7, #4]
 8009678:	4619      	mov	r1, r3
 800967a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800967c:	2b00      	cmp	r3, #0
 800967e:	d10f      	bne.n	80096a0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	68da      	ldr	r2, [r3, #12]
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800968e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	68da      	ldr	r2, [r3, #12]
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800969e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80096a0:	2300      	movs	r3, #0
 80096a2:	e000      	b.n	80096a6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80096a4:	2302      	movs	r3, #2
  }
}
 80096a6:	4618      	mov	r0, r3
 80096a8:	3714      	adds	r7, #20
 80096aa:	46bd      	mov	sp, r7
 80096ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b0:	4770      	bx	lr

080096b2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80096b2:	b580      	push	{r7, lr}
 80096b4:	b082      	sub	sp, #8
 80096b6:	af00      	add	r7, sp, #0
 80096b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	68da      	ldr	r2, [r3, #12]
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80096c8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2220      	movs	r2, #32
 80096ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f7ff fe8e 	bl	80093f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80096d8:	2300      	movs	r3, #0
}
 80096da:	4618      	mov	r0, r3
 80096dc:	3708      	adds	r7, #8
 80096de:	46bd      	mov	sp, r7
 80096e0:	bd80      	pop	{r7, pc}

080096e2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80096e2:	b580      	push	{r7, lr}
 80096e4:	b08c      	sub	sp, #48	; 0x30
 80096e6:	af00      	add	r7, sp, #0
 80096e8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80096f0:	b2db      	uxtb	r3, r3
 80096f2:	2b22      	cmp	r3, #34	; 0x22
 80096f4:	f040 80ab 	bne.w	800984e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	689b      	ldr	r3, [r3, #8]
 80096fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009700:	d117      	bne.n	8009732 <UART_Receive_IT+0x50>
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	691b      	ldr	r3, [r3, #16]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d113      	bne.n	8009732 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800970a:	2300      	movs	r3, #0
 800970c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009712:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	685b      	ldr	r3, [r3, #4]
 800971a:	b29b      	uxth	r3, r3
 800971c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009720:	b29a      	uxth	r2, r3
 8009722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009724:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800972a:	1c9a      	adds	r2, r3, #2
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	629a      	str	r2, [r3, #40]	; 0x28
 8009730:	e026      	b.n	8009780 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009736:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009738:	2300      	movs	r3, #0
 800973a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	689b      	ldr	r3, [r3, #8]
 8009740:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009744:	d007      	beq.n	8009756 <UART_Receive_IT+0x74>
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	689b      	ldr	r3, [r3, #8]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d10a      	bne.n	8009764 <UART_Receive_IT+0x82>
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	691b      	ldr	r3, [r3, #16]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d106      	bne.n	8009764 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	685b      	ldr	r3, [r3, #4]
 800975c:	b2da      	uxtb	r2, r3
 800975e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009760:	701a      	strb	r2, [r3, #0]
 8009762:	e008      	b.n	8009776 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	685b      	ldr	r3, [r3, #4]
 800976a:	b2db      	uxtb	r3, r3
 800976c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009770:	b2da      	uxtb	r2, r3
 8009772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009774:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800977a:	1c5a      	adds	r2, r3, #1
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009784:	b29b      	uxth	r3, r3
 8009786:	3b01      	subs	r3, #1
 8009788:	b29b      	uxth	r3, r3
 800978a:	687a      	ldr	r2, [r7, #4]
 800978c:	4619      	mov	r1, r3
 800978e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009790:	2b00      	cmp	r3, #0
 8009792:	d15a      	bne.n	800984a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	68da      	ldr	r2, [r3, #12]
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f022 0220 	bic.w	r2, r2, #32
 80097a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	68da      	ldr	r2, [r3, #12]
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80097b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	695a      	ldr	r2, [r3, #20]
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	f022 0201 	bic.w	r2, r2, #1
 80097c2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2220      	movs	r2, #32
 80097c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097d0:	2b01      	cmp	r3, #1
 80097d2:	d135      	bne.n	8009840 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2200      	movs	r2, #0
 80097d8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	330c      	adds	r3, #12
 80097e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097e2:	697b      	ldr	r3, [r7, #20]
 80097e4:	e853 3f00 	ldrex	r3, [r3]
 80097e8:	613b      	str	r3, [r7, #16]
   return(result);
 80097ea:	693b      	ldr	r3, [r7, #16]
 80097ec:	f023 0310 	bic.w	r3, r3, #16
 80097f0:	627b      	str	r3, [r7, #36]	; 0x24
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	330c      	adds	r3, #12
 80097f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097fa:	623a      	str	r2, [r7, #32]
 80097fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097fe:	69f9      	ldr	r1, [r7, #28]
 8009800:	6a3a      	ldr	r2, [r7, #32]
 8009802:	e841 2300 	strex	r3, r2, [r1]
 8009806:	61bb      	str	r3, [r7, #24]
   return(result);
 8009808:	69bb      	ldr	r3, [r7, #24]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d1e5      	bne.n	80097da <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f003 0310 	and.w	r3, r3, #16
 8009818:	2b10      	cmp	r3, #16
 800981a:	d10a      	bne.n	8009832 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800981c:	2300      	movs	r3, #0
 800981e:	60fb      	str	r3, [r7, #12]
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	60fb      	str	r3, [r7, #12]
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	685b      	ldr	r3, [r3, #4]
 800982e:	60fb      	str	r3, [r7, #12]
 8009830:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009836:	4619      	mov	r1, r3
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	f7ff fdf9 	bl	8009430 <HAL_UARTEx_RxEventCallback>
 800983e:	e002      	b.n	8009846 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009840:	6878      	ldr	r0, [r7, #4]
 8009842:	f7ff fde1 	bl	8009408 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009846:	2300      	movs	r3, #0
 8009848:	e002      	b.n	8009850 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800984a:	2300      	movs	r3, #0
 800984c:	e000      	b.n	8009850 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800984e:	2302      	movs	r3, #2
  }
}
 8009850:	4618      	mov	r0, r3
 8009852:	3730      	adds	r7, #48	; 0x30
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}

08009858 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009858:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800985c:	b0c0      	sub	sp, #256	; 0x100
 800985e:	af00      	add	r7, sp, #0
 8009860:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	691b      	ldr	r3, [r3, #16]
 800986c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009874:	68d9      	ldr	r1, [r3, #12]
 8009876:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800987a:	681a      	ldr	r2, [r3, #0]
 800987c:	ea40 0301 	orr.w	r3, r0, r1
 8009880:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009886:	689a      	ldr	r2, [r3, #8]
 8009888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800988c:	691b      	ldr	r3, [r3, #16]
 800988e:	431a      	orrs	r2, r3
 8009890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009894:	695b      	ldr	r3, [r3, #20]
 8009896:	431a      	orrs	r2, r3
 8009898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800989c:	69db      	ldr	r3, [r3, #28]
 800989e:	4313      	orrs	r3, r2
 80098a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80098a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	68db      	ldr	r3, [r3, #12]
 80098ac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80098b0:	f021 010c 	bic.w	r1, r1, #12
 80098b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098b8:	681a      	ldr	r2, [r3, #0]
 80098ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80098be:	430b      	orrs	r3, r1
 80098c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80098c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	695b      	ldr	r3, [r3, #20]
 80098ca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80098ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098d2:	6999      	ldr	r1, [r3, #24]
 80098d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098d8:	681a      	ldr	r2, [r3, #0]
 80098da:	ea40 0301 	orr.w	r3, r0, r1
 80098de:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80098e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098e4:	681a      	ldr	r2, [r3, #0]
 80098e6:	4b8f      	ldr	r3, [pc, #572]	; (8009b24 <UART_SetConfig+0x2cc>)
 80098e8:	429a      	cmp	r2, r3
 80098ea:	d005      	beq.n	80098f8 <UART_SetConfig+0xa0>
 80098ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098f0:	681a      	ldr	r2, [r3, #0]
 80098f2:	4b8d      	ldr	r3, [pc, #564]	; (8009b28 <UART_SetConfig+0x2d0>)
 80098f4:	429a      	cmp	r2, r3
 80098f6:	d104      	bne.n	8009902 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80098f8:	f7fe fb9c 	bl	8008034 <HAL_RCC_GetPCLK2Freq>
 80098fc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009900:	e003      	b.n	800990a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009902:	f7fe fb83 	bl	800800c <HAL_RCC_GetPCLK1Freq>
 8009906:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800990a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800990e:	69db      	ldr	r3, [r3, #28]
 8009910:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009914:	f040 810c 	bne.w	8009b30 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009918:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800991c:	2200      	movs	r2, #0
 800991e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009922:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009926:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800992a:	4622      	mov	r2, r4
 800992c:	462b      	mov	r3, r5
 800992e:	1891      	adds	r1, r2, r2
 8009930:	65b9      	str	r1, [r7, #88]	; 0x58
 8009932:	415b      	adcs	r3, r3
 8009934:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009936:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800993a:	4621      	mov	r1, r4
 800993c:	eb12 0801 	adds.w	r8, r2, r1
 8009940:	4629      	mov	r1, r5
 8009942:	eb43 0901 	adc.w	r9, r3, r1
 8009946:	f04f 0200 	mov.w	r2, #0
 800994a:	f04f 0300 	mov.w	r3, #0
 800994e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009952:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009956:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800995a:	4690      	mov	r8, r2
 800995c:	4699      	mov	r9, r3
 800995e:	4623      	mov	r3, r4
 8009960:	eb18 0303 	adds.w	r3, r8, r3
 8009964:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009968:	462b      	mov	r3, r5
 800996a:	eb49 0303 	adc.w	r3, r9, r3
 800996e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009976:	685b      	ldr	r3, [r3, #4]
 8009978:	2200      	movs	r2, #0
 800997a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800997e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009982:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009986:	460b      	mov	r3, r1
 8009988:	18db      	adds	r3, r3, r3
 800998a:	653b      	str	r3, [r7, #80]	; 0x50
 800998c:	4613      	mov	r3, r2
 800998e:	eb42 0303 	adc.w	r3, r2, r3
 8009992:	657b      	str	r3, [r7, #84]	; 0x54
 8009994:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009998:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800999c:	f7f6 ff7e 	bl	800089c <__aeabi_uldivmod>
 80099a0:	4602      	mov	r2, r0
 80099a2:	460b      	mov	r3, r1
 80099a4:	4b61      	ldr	r3, [pc, #388]	; (8009b2c <UART_SetConfig+0x2d4>)
 80099a6:	fba3 2302 	umull	r2, r3, r3, r2
 80099aa:	095b      	lsrs	r3, r3, #5
 80099ac:	011c      	lsls	r4, r3, #4
 80099ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80099b2:	2200      	movs	r2, #0
 80099b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80099b8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80099bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80099c0:	4642      	mov	r2, r8
 80099c2:	464b      	mov	r3, r9
 80099c4:	1891      	adds	r1, r2, r2
 80099c6:	64b9      	str	r1, [r7, #72]	; 0x48
 80099c8:	415b      	adcs	r3, r3
 80099ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80099cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80099d0:	4641      	mov	r1, r8
 80099d2:	eb12 0a01 	adds.w	sl, r2, r1
 80099d6:	4649      	mov	r1, r9
 80099d8:	eb43 0b01 	adc.w	fp, r3, r1
 80099dc:	f04f 0200 	mov.w	r2, #0
 80099e0:	f04f 0300 	mov.w	r3, #0
 80099e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80099e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80099ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80099f0:	4692      	mov	sl, r2
 80099f2:	469b      	mov	fp, r3
 80099f4:	4643      	mov	r3, r8
 80099f6:	eb1a 0303 	adds.w	r3, sl, r3
 80099fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80099fe:	464b      	mov	r3, r9
 8009a00:	eb4b 0303 	adc.w	r3, fp, r3
 8009a04:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a0c:	685b      	ldr	r3, [r3, #4]
 8009a0e:	2200      	movs	r2, #0
 8009a10:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009a14:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009a18:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009a1c:	460b      	mov	r3, r1
 8009a1e:	18db      	adds	r3, r3, r3
 8009a20:	643b      	str	r3, [r7, #64]	; 0x40
 8009a22:	4613      	mov	r3, r2
 8009a24:	eb42 0303 	adc.w	r3, r2, r3
 8009a28:	647b      	str	r3, [r7, #68]	; 0x44
 8009a2a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009a2e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009a32:	f7f6 ff33 	bl	800089c <__aeabi_uldivmod>
 8009a36:	4602      	mov	r2, r0
 8009a38:	460b      	mov	r3, r1
 8009a3a:	4611      	mov	r1, r2
 8009a3c:	4b3b      	ldr	r3, [pc, #236]	; (8009b2c <UART_SetConfig+0x2d4>)
 8009a3e:	fba3 2301 	umull	r2, r3, r3, r1
 8009a42:	095b      	lsrs	r3, r3, #5
 8009a44:	2264      	movs	r2, #100	; 0x64
 8009a46:	fb02 f303 	mul.w	r3, r2, r3
 8009a4a:	1acb      	subs	r3, r1, r3
 8009a4c:	00db      	lsls	r3, r3, #3
 8009a4e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009a52:	4b36      	ldr	r3, [pc, #216]	; (8009b2c <UART_SetConfig+0x2d4>)
 8009a54:	fba3 2302 	umull	r2, r3, r3, r2
 8009a58:	095b      	lsrs	r3, r3, #5
 8009a5a:	005b      	lsls	r3, r3, #1
 8009a5c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009a60:	441c      	add	r4, r3
 8009a62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009a66:	2200      	movs	r2, #0
 8009a68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009a6c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009a70:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009a74:	4642      	mov	r2, r8
 8009a76:	464b      	mov	r3, r9
 8009a78:	1891      	adds	r1, r2, r2
 8009a7a:	63b9      	str	r1, [r7, #56]	; 0x38
 8009a7c:	415b      	adcs	r3, r3
 8009a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a80:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009a84:	4641      	mov	r1, r8
 8009a86:	1851      	adds	r1, r2, r1
 8009a88:	6339      	str	r1, [r7, #48]	; 0x30
 8009a8a:	4649      	mov	r1, r9
 8009a8c:	414b      	adcs	r3, r1
 8009a8e:	637b      	str	r3, [r7, #52]	; 0x34
 8009a90:	f04f 0200 	mov.w	r2, #0
 8009a94:	f04f 0300 	mov.w	r3, #0
 8009a98:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009a9c:	4659      	mov	r1, fp
 8009a9e:	00cb      	lsls	r3, r1, #3
 8009aa0:	4651      	mov	r1, sl
 8009aa2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009aa6:	4651      	mov	r1, sl
 8009aa8:	00ca      	lsls	r2, r1, #3
 8009aaa:	4610      	mov	r0, r2
 8009aac:	4619      	mov	r1, r3
 8009aae:	4603      	mov	r3, r0
 8009ab0:	4642      	mov	r2, r8
 8009ab2:	189b      	adds	r3, r3, r2
 8009ab4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009ab8:	464b      	mov	r3, r9
 8009aba:	460a      	mov	r2, r1
 8009abc:	eb42 0303 	adc.w	r3, r2, r3
 8009ac0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ac8:	685b      	ldr	r3, [r3, #4]
 8009aca:	2200      	movs	r2, #0
 8009acc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009ad0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009ad4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009ad8:	460b      	mov	r3, r1
 8009ada:	18db      	adds	r3, r3, r3
 8009adc:	62bb      	str	r3, [r7, #40]	; 0x28
 8009ade:	4613      	mov	r3, r2
 8009ae0:	eb42 0303 	adc.w	r3, r2, r3
 8009ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009ae6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009aea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009aee:	f7f6 fed5 	bl	800089c <__aeabi_uldivmod>
 8009af2:	4602      	mov	r2, r0
 8009af4:	460b      	mov	r3, r1
 8009af6:	4b0d      	ldr	r3, [pc, #52]	; (8009b2c <UART_SetConfig+0x2d4>)
 8009af8:	fba3 1302 	umull	r1, r3, r3, r2
 8009afc:	095b      	lsrs	r3, r3, #5
 8009afe:	2164      	movs	r1, #100	; 0x64
 8009b00:	fb01 f303 	mul.w	r3, r1, r3
 8009b04:	1ad3      	subs	r3, r2, r3
 8009b06:	00db      	lsls	r3, r3, #3
 8009b08:	3332      	adds	r3, #50	; 0x32
 8009b0a:	4a08      	ldr	r2, [pc, #32]	; (8009b2c <UART_SetConfig+0x2d4>)
 8009b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8009b10:	095b      	lsrs	r3, r3, #5
 8009b12:	f003 0207 	and.w	r2, r3, #7
 8009b16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	4422      	add	r2, r4
 8009b1e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009b20:	e105      	b.n	8009d2e <UART_SetConfig+0x4d6>
 8009b22:	bf00      	nop
 8009b24:	40011000 	.word	0x40011000
 8009b28:	40011400 	.word	0x40011400
 8009b2c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009b30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009b34:	2200      	movs	r2, #0
 8009b36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009b3a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009b3e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009b42:	4642      	mov	r2, r8
 8009b44:	464b      	mov	r3, r9
 8009b46:	1891      	adds	r1, r2, r2
 8009b48:	6239      	str	r1, [r7, #32]
 8009b4a:	415b      	adcs	r3, r3
 8009b4c:	627b      	str	r3, [r7, #36]	; 0x24
 8009b4e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009b52:	4641      	mov	r1, r8
 8009b54:	1854      	adds	r4, r2, r1
 8009b56:	4649      	mov	r1, r9
 8009b58:	eb43 0501 	adc.w	r5, r3, r1
 8009b5c:	f04f 0200 	mov.w	r2, #0
 8009b60:	f04f 0300 	mov.w	r3, #0
 8009b64:	00eb      	lsls	r3, r5, #3
 8009b66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009b6a:	00e2      	lsls	r2, r4, #3
 8009b6c:	4614      	mov	r4, r2
 8009b6e:	461d      	mov	r5, r3
 8009b70:	4643      	mov	r3, r8
 8009b72:	18e3      	adds	r3, r4, r3
 8009b74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009b78:	464b      	mov	r3, r9
 8009b7a:	eb45 0303 	adc.w	r3, r5, r3
 8009b7e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b86:	685b      	ldr	r3, [r3, #4]
 8009b88:	2200      	movs	r2, #0
 8009b8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009b8e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009b92:	f04f 0200 	mov.w	r2, #0
 8009b96:	f04f 0300 	mov.w	r3, #0
 8009b9a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009b9e:	4629      	mov	r1, r5
 8009ba0:	008b      	lsls	r3, r1, #2
 8009ba2:	4621      	mov	r1, r4
 8009ba4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009ba8:	4621      	mov	r1, r4
 8009baa:	008a      	lsls	r2, r1, #2
 8009bac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009bb0:	f7f6 fe74 	bl	800089c <__aeabi_uldivmod>
 8009bb4:	4602      	mov	r2, r0
 8009bb6:	460b      	mov	r3, r1
 8009bb8:	4b60      	ldr	r3, [pc, #384]	; (8009d3c <UART_SetConfig+0x4e4>)
 8009bba:	fba3 2302 	umull	r2, r3, r3, r2
 8009bbe:	095b      	lsrs	r3, r3, #5
 8009bc0:	011c      	lsls	r4, r3, #4
 8009bc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009bcc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009bd0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009bd4:	4642      	mov	r2, r8
 8009bd6:	464b      	mov	r3, r9
 8009bd8:	1891      	adds	r1, r2, r2
 8009bda:	61b9      	str	r1, [r7, #24]
 8009bdc:	415b      	adcs	r3, r3
 8009bde:	61fb      	str	r3, [r7, #28]
 8009be0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009be4:	4641      	mov	r1, r8
 8009be6:	1851      	adds	r1, r2, r1
 8009be8:	6139      	str	r1, [r7, #16]
 8009bea:	4649      	mov	r1, r9
 8009bec:	414b      	adcs	r3, r1
 8009bee:	617b      	str	r3, [r7, #20]
 8009bf0:	f04f 0200 	mov.w	r2, #0
 8009bf4:	f04f 0300 	mov.w	r3, #0
 8009bf8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009bfc:	4659      	mov	r1, fp
 8009bfe:	00cb      	lsls	r3, r1, #3
 8009c00:	4651      	mov	r1, sl
 8009c02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009c06:	4651      	mov	r1, sl
 8009c08:	00ca      	lsls	r2, r1, #3
 8009c0a:	4610      	mov	r0, r2
 8009c0c:	4619      	mov	r1, r3
 8009c0e:	4603      	mov	r3, r0
 8009c10:	4642      	mov	r2, r8
 8009c12:	189b      	adds	r3, r3, r2
 8009c14:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009c18:	464b      	mov	r3, r9
 8009c1a:	460a      	mov	r2, r1
 8009c1c:	eb42 0303 	adc.w	r3, r2, r3
 8009c20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c28:	685b      	ldr	r3, [r3, #4]
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	67bb      	str	r3, [r7, #120]	; 0x78
 8009c2e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009c30:	f04f 0200 	mov.w	r2, #0
 8009c34:	f04f 0300 	mov.w	r3, #0
 8009c38:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009c3c:	4649      	mov	r1, r9
 8009c3e:	008b      	lsls	r3, r1, #2
 8009c40:	4641      	mov	r1, r8
 8009c42:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009c46:	4641      	mov	r1, r8
 8009c48:	008a      	lsls	r2, r1, #2
 8009c4a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009c4e:	f7f6 fe25 	bl	800089c <__aeabi_uldivmod>
 8009c52:	4602      	mov	r2, r0
 8009c54:	460b      	mov	r3, r1
 8009c56:	4b39      	ldr	r3, [pc, #228]	; (8009d3c <UART_SetConfig+0x4e4>)
 8009c58:	fba3 1302 	umull	r1, r3, r3, r2
 8009c5c:	095b      	lsrs	r3, r3, #5
 8009c5e:	2164      	movs	r1, #100	; 0x64
 8009c60:	fb01 f303 	mul.w	r3, r1, r3
 8009c64:	1ad3      	subs	r3, r2, r3
 8009c66:	011b      	lsls	r3, r3, #4
 8009c68:	3332      	adds	r3, #50	; 0x32
 8009c6a:	4a34      	ldr	r2, [pc, #208]	; (8009d3c <UART_SetConfig+0x4e4>)
 8009c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8009c70:	095b      	lsrs	r3, r3, #5
 8009c72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009c76:	441c      	add	r4, r3
 8009c78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	673b      	str	r3, [r7, #112]	; 0x70
 8009c80:	677a      	str	r2, [r7, #116]	; 0x74
 8009c82:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009c86:	4642      	mov	r2, r8
 8009c88:	464b      	mov	r3, r9
 8009c8a:	1891      	adds	r1, r2, r2
 8009c8c:	60b9      	str	r1, [r7, #8]
 8009c8e:	415b      	adcs	r3, r3
 8009c90:	60fb      	str	r3, [r7, #12]
 8009c92:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009c96:	4641      	mov	r1, r8
 8009c98:	1851      	adds	r1, r2, r1
 8009c9a:	6039      	str	r1, [r7, #0]
 8009c9c:	4649      	mov	r1, r9
 8009c9e:	414b      	adcs	r3, r1
 8009ca0:	607b      	str	r3, [r7, #4]
 8009ca2:	f04f 0200 	mov.w	r2, #0
 8009ca6:	f04f 0300 	mov.w	r3, #0
 8009caa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009cae:	4659      	mov	r1, fp
 8009cb0:	00cb      	lsls	r3, r1, #3
 8009cb2:	4651      	mov	r1, sl
 8009cb4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009cb8:	4651      	mov	r1, sl
 8009cba:	00ca      	lsls	r2, r1, #3
 8009cbc:	4610      	mov	r0, r2
 8009cbe:	4619      	mov	r1, r3
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	4642      	mov	r2, r8
 8009cc4:	189b      	adds	r3, r3, r2
 8009cc6:	66bb      	str	r3, [r7, #104]	; 0x68
 8009cc8:	464b      	mov	r3, r9
 8009cca:	460a      	mov	r2, r1
 8009ccc:	eb42 0303 	adc.w	r3, r2, r3
 8009cd0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009cd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cd6:	685b      	ldr	r3, [r3, #4]
 8009cd8:	2200      	movs	r2, #0
 8009cda:	663b      	str	r3, [r7, #96]	; 0x60
 8009cdc:	667a      	str	r2, [r7, #100]	; 0x64
 8009cde:	f04f 0200 	mov.w	r2, #0
 8009ce2:	f04f 0300 	mov.w	r3, #0
 8009ce6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009cea:	4649      	mov	r1, r9
 8009cec:	008b      	lsls	r3, r1, #2
 8009cee:	4641      	mov	r1, r8
 8009cf0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009cf4:	4641      	mov	r1, r8
 8009cf6:	008a      	lsls	r2, r1, #2
 8009cf8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009cfc:	f7f6 fdce 	bl	800089c <__aeabi_uldivmod>
 8009d00:	4602      	mov	r2, r0
 8009d02:	460b      	mov	r3, r1
 8009d04:	4b0d      	ldr	r3, [pc, #52]	; (8009d3c <UART_SetConfig+0x4e4>)
 8009d06:	fba3 1302 	umull	r1, r3, r3, r2
 8009d0a:	095b      	lsrs	r3, r3, #5
 8009d0c:	2164      	movs	r1, #100	; 0x64
 8009d0e:	fb01 f303 	mul.w	r3, r1, r3
 8009d12:	1ad3      	subs	r3, r2, r3
 8009d14:	011b      	lsls	r3, r3, #4
 8009d16:	3332      	adds	r3, #50	; 0x32
 8009d18:	4a08      	ldr	r2, [pc, #32]	; (8009d3c <UART_SetConfig+0x4e4>)
 8009d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8009d1e:	095b      	lsrs	r3, r3, #5
 8009d20:	f003 020f 	and.w	r2, r3, #15
 8009d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	4422      	add	r2, r4
 8009d2c:	609a      	str	r2, [r3, #8]
}
 8009d2e:	bf00      	nop
 8009d30:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009d34:	46bd      	mov	sp, r7
 8009d36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009d3a:	bf00      	nop
 8009d3c:	51eb851f 	.word	0x51eb851f

08009d40 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8009d40:	b480      	push	{r7}
 8009d42:	b087      	sub	sp, #28
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
 8009d48:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	681a      	ldr	r2, [r3, #0]
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d54:	683a      	ldr	r2, [r7, #0]
 8009d56:	6812      	ldr	r2, [r2, #0]
 8009d58:	f023 0101 	bic.w	r1, r3, #1
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	689b      	ldr	r3, [r3, #8]
 8009d66:	2b08      	cmp	r3, #8
 8009d68:	d102      	bne.n	8009d70 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8009d6a:	2340      	movs	r3, #64	; 0x40
 8009d6c:	617b      	str	r3, [r7, #20]
 8009d6e:	e001      	b.n	8009d74 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8009d70:	2300      	movs	r3, #0
 8009d72:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8009d78:	697b      	ldr	r3, [r7, #20]
 8009d7a:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8009d80:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8009d86:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8009d8c:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8009d92:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8009d98:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8009d9e:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8009da4:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8009daa:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8009db0:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8009db6:	4313      	orrs	r3, r2
 8009db8:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	699b      	ldr	r3, [r3, #24]
 8009dbe:	693a      	ldr	r2, [r7, #16]
 8009dc0:	4313      	orrs	r3, r2
 8009dc2:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009dc8:	693a      	ldr	r2, [r7, #16]
 8009dca:	4313      	orrs	r3, r2
 8009dcc:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 8009dce:	4b10      	ldr	r3, [pc, #64]	; (8009e10 <FSMC_NORSRAM_Init+0xd0>)
 8009dd0:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009dd8:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8009de0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	681a      	ldr	r2, [r3, #0]
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	43db      	mvns	r3, r3
 8009df0:	ea02 0103 	and.w	r1, r2, r3
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	681a      	ldr	r2, [r3, #0]
 8009df8:	693b      	ldr	r3, [r7, #16]
 8009dfa:	4319      	orrs	r1, r3
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 8009e02:	2300      	movs	r3, #0
}
 8009e04:	4618      	mov	r0, r3
 8009e06:	371c      	adds	r7, #28
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0e:	4770      	bx	lr
 8009e10:	0008fb7f 	.word	0x0008fb7f

08009e14 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009e14:	b480      	push	{r7}
 8009e16:	b085      	sub	sp, #20
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	60f8      	str	r0, [r7, #12]
 8009e1c:	60b9      	str	r1, [r7, #8]
 8009e1e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	1c5a      	adds	r2, r3, #1
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e2a:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	681a      	ldr	r2, [r3, #0]
 8009e32:	68bb      	ldr	r3, [r7, #8]
 8009e34:	685b      	ldr	r3, [r3, #4]
 8009e36:	011b      	lsls	r3, r3, #4
 8009e38:	431a      	orrs	r2, r3
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	689b      	ldr	r3, [r3, #8]
 8009e3e:	021b      	lsls	r3, r3, #8
 8009e40:	431a      	orrs	r2, r3
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	68db      	ldr	r3, [r3, #12]
 8009e46:	041b      	lsls	r3, r3, #16
 8009e48:	431a      	orrs	r2, r3
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	691b      	ldr	r3, [r3, #16]
 8009e4e:	3b01      	subs	r3, #1
 8009e50:	051b      	lsls	r3, r3, #20
 8009e52:	431a      	orrs	r2, r3
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	695b      	ldr	r3, [r3, #20]
 8009e58:	3b02      	subs	r3, #2
 8009e5a:	061b      	lsls	r3, r3, #24
 8009e5c:	431a      	orrs	r2, r3
 8009e5e:	68bb      	ldr	r3, [r7, #8]
 8009e60:	699b      	ldr	r3, [r3, #24]
 8009e62:	4313      	orrs	r3, r2
 8009e64:	687a      	ldr	r2, [r7, #4]
 8009e66:	3201      	adds	r2, #1
 8009e68:	4319      	orrs	r1, r3
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 8009e70:	2300      	movs	r3, #0
}
 8009e72:	4618      	mov	r0, r3
 8009e74:	3714      	adds	r7, #20
 8009e76:	46bd      	mov	sp, r7
 8009e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7c:	4770      	bx	lr
	...

08009e80 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8009e80:	b480      	push	{r7}
 8009e82:	b085      	sub	sp, #20
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	60f8      	str	r0, [r7, #12]
 8009e88:	60b9      	str	r1, [r7, #8]
 8009e8a:	607a      	str	r2, [r7, #4]
 8009e8c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009e94:	d11d      	bne.n	8009ed2 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	687a      	ldr	r2, [r7, #4]
 8009e9a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009e9e:	4b13      	ldr	r3, [pc, #76]	; (8009eec <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8009ea0:	4013      	ands	r3, r2
 8009ea2:	68ba      	ldr	r2, [r7, #8]
 8009ea4:	6811      	ldr	r1, [r2, #0]
 8009ea6:	68ba      	ldr	r2, [r7, #8]
 8009ea8:	6852      	ldr	r2, [r2, #4]
 8009eaa:	0112      	lsls	r2, r2, #4
 8009eac:	4311      	orrs	r1, r2
 8009eae:	68ba      	ldr	r2, [r7, #8]
 8009eb0:	6892      	ldr	r2, [r2, #8]
 8009eb2:	0212      	lsls	r2, r2, #8
 8009eb4:	4311      	orrs	r1, r2
 8009eb6:	68ba      	ldr	r2, [r7, #8]
 8009eb8:	6992      	ldr	r2, [r2, #24]
 8009eba:	4311      	orrs	r1, r2
 8009ebc:	68ba      	ldr	r2, [r7, #8]
 8009ebe:	68d2      	ldr	r2, [r2, #12]
 8009ec0:	0412      	lsls	r2, r2, #16
 8009ec2:	430a      	orrs	r2, r1
 8009ec4:	ea43 0102 	orr.w	r1, r3, r2
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	687a      	ldr	r2, [r7, #4]
 8009ecc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8009ed0:	e005      	b.n	8009ede <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	687a      	ldr	r2, [r7, #4]
 8009ed6:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8009eda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8009ede:	2300      	movs	r3, #0
}
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	3714      	adds	r7, #20
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eea:	4770      	bx	lr
 8009eec:	cff00000 	.word	0xcff00000

08009ef0 <atoi>:
 8009ef0:	220a      	movs	r2, #10
 8009ef2:	2100      	movs	r1, #0
 8009ef4:	f000 b8e2 	b.w	800a0bc <strtol>

08009ef8 <__errno>:
 8009ef8:	4b01      	ldr	r3, [pc, #4]	; (8009f00 <__errno+0x8>)
 8009efa:	6818      	ldr	r0, [r3, #0]
 8009efc:	4770      	bx	lr
 8009efe:	bf00      	nop
 8009f00:	20000028 	.word	0x20000028

08009f04 <__libc_init_array>:
 8009f04:	b570      	push	{r4, r5, r6, lr}
 8009f06:	4d0d      	ldr	r5, [pc, #52]	; (8009f3c <__libc_init_array+0x38>)
 8009f08:	4c0d      	ldr	r4, [pc, #52]	; (8009f40 <__libc_init_array+0x3c>)
 8009f0a:	1b64      	subs	r4, r4, r5
 8009f0c:	10a4      	asrs	r4, r4, #2
 8009f0e:	2600      	movs	r6, #0
 8009f10:	42a6      	cmp	r6, r4
 8009f12:	d109      	bne.n	8009f28 <__libc_init_array+0x24>
 8009f14:	4d0b      	ldr	r5, [pc, #44]	; (8009f44 <__libc_init_array+0x40>)
 8009f16:	4c0c      	ldr	r4, [pc, #48]	; (8009f48 <__libc_init_array+0x44>)
 8009f18:	f001 f850 	bl	800afbc <_init>
 8009f1c:	1b64      	subs	r4, r4, r5
 8009f1e:	10a4      	asrs	r4, r4, #2
 8009f20:	2600      	movs	r6, #0
 8009f22:	42a6      	cmp	r6, r4
 8009f24:	d105      	bne.n	8009f32 <__libc_init_array+0x2e>
 8009f26:	bd70      	pop	{r4, r5, r6, pc}
 8009f28:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f2c:	4798      	blx	r3
 8009f2e:	3601      	adds	r6, #1
 8009f30:	e7ee      	b.n	8009f10 <__libc_init_array+0xc>
 8009f32:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f36:	4798      	blx	r3
 8009f38:	3601      	adds	r6, #1
 8009f3a:	e7f2      	b.n	8009f22 <__libc_init_array+0x1e>
 8009f3c:	0800c590 	.word	0x0800c590
 8009f40:	0800c590 	.word	0x0800c590
 8009f44:	0800c590 	.word	0x0800c590
 8009f48:	0800c594 	.word	0x0800c594

08009f4c <memcpy>:
 8009f4c:	440a      	add	r2, r1
 8009f4e:	4291      	cmp	r1, r2
 8009f50:	f100 33ff 	add.w	r3, r0, #4294967295
 8009f54:	d100      	bne.n	8009f58 <memcpy+0xc>
 8009f56:	4770      	bx	lr
 8009f58:	b510      	push	{r4, lr}
 8009f5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009f62:	4291      	cmp	r1, r2
 8009f64:	d1f9      	bne.n	8009f5a <memcpy+0xe>
 8009f66:	bd10      	pop	{r4, pc}

08009f68 <memset>:
 8009f68:	4402      	add	r2, r0
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	4293      	cmp	r3, r2
 8009f6e:	d100      	bne.n	8009f72 <memset+0xa>
 8009f70:	4770      	bx	lr
 8009f72:	f803 1b01 	strb.w	r1, [r3], #1
 8009f76:	e7f9      	b.n	8009f6c <memset+0x4>

08009f78 <iprintf>:
 8009f78:	b40f      	push	{r0, r1, r2, r3}
 8009f7a:	4b0a      	ldr	r3, [pc, #40]	; (8009fa4 <iprintf+0x2c>)
 8009f7c:	b513      	push	{r0, r1, r4, lr}
 8009f7e:	681c      	ldr	r4, [r3, #0]
 8009f80:	b124      	cbz	r4, 8009f8c <iprintf+0x14>
 8009f82:	69a3      	ldr	r3, [r4, #24]
 8009f84:	b913      	cbnz	r3, 8009f8c <iprintf+0x14>
 8009f86:	4620      	mov	r0, r4
 8009f88:	f000 fa7c 	bl	800a484 <__sinit>
 8009f8c:	ab05      	add	r3, sp, #20
 8009f8e:	9a04      	ldr	r2, [sp, #16]
 8009f90:	68a1      	ldr	r1, [r4, #8]
 8009f92:	9301      	str	r3, [sp, #4]
 8009f94:	4620      	mov	r0, r4
 8009f96:	f000 fc85 	bl	800a8a4 <_vfiprintf_r>
 8009f9a:	b002      	add	sp, #8
 8009f9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009fa0:	b004      	add	sp, #16
 8009fa2:	4770      	bx	lr
 8009fa4:	20000028 	.word	0x20000028

08009fa8 <strcpy>:
 8009fa8:	4603      	mov	r3, r0
 8009faa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009fae:	f803 2b01 	strb.w	r2, [r3], #1
 8009fb2:	2a00      	cmp	r2, #0
 8009fb4:	d1f9      	bne.n	8009faa <strcpy+0x2>
 8009fb6:	4770      	bx	lr

08009fb8 <_strtol_l.constprop.0>:
 8009fb8:	2b01      	cmp	r3, #1
 8009fba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fbe:	d001      	beq.n	8009fc4 <_strtol_l.constprop.0+0xc>
 8009fc0:	2b24      	cmp	r3, #36	; 0x24
 8009fc2:	d906      	bls.n	8009fd2 <_strtol_l.constprop.0+0x1a>
 8009fc4:	f7ff ff98 	bl	8009ef8 <__errno>
 8009fc8:	2316      	movs	r3, #22
 8009fca:	6003      	str	r3, [r0, #0]
 8009fcc:	2000      	movs	r0, #0
 8009fce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fd2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a0b8 <_strtol_l.constprop.0+0x100>
 8009fd6:	460d      	mov	r5, r1
 8009fd8:	462e      	mov	r6, r5
 8009fda:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009fde:	f814 700c 	ldrb.w	r7, [r4, ip]
 8009fe2:	f017 0708 	ands.w	r7, r7, #8
 8009fe6:	d1f7      	bne.n	8009fd8 <_strtol_l.constprop.0+0x20>
 8009fe8:	2c2d      	cmp	r4, #45	; 0x2d
 8009fea:	d132      	bne.n	800a052 <_strtol_l.constprop.0+0x9a>
 8009fec:	782c      	ldrb	r4, [r5, #0]
 8009fee:	2701      	movs	r7, #1
 8009ff0:	1cb5      	adds	r5, r6, #2
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d05b      	beq.n	800a0ae <_strtol_l.constprop.0+0xf6>
 8009ff6:	2b10      	cmp	r3, #16
 8009ff8:	d109      	bne.n	800a00e <_strtol_l.constprop.0+0x56>
 8009ffa:	2c30      	cmp	r4, #48	; 0x30
 8009ffc:	d107      	bne.n	800a00e <_strtol_l.constprop.0+0x56>
 8009ffe:	782c      	ldrb	r4, [r5, #0]
 800a000:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a004:	2c58      	cmp	r4, #88	; 0x58
 800a006:	d14d      	bne.n	800a0a4 <_strtol_l.constprop.0+0xec>
 800a008:	786c      	ldrb	r4, [r5, #1]
 800a00a:	2310      	movs	r3, #16
 800a00c:	3502      	adds	r5, #2
 800a00e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a012:	f108 38ff 	add.w	r8, r8, #4294967295
 800a016:	f04f 0c00 	mov.w	ip, #0
 800a01a:	fbb8 f9f3 	udiv	r9, r8, r3
 800a01e:	4666      	mov	r6, ip
 800a020:	fb03 8a19 	mls	sl, r3, r9, r8
 800a024:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800a028:	f1be 0f09 	cmp.w	lr, #9
 800a02c:	d816      	bhi.n	800a05c <_strtol_l.constprop.0+0xa4>
 800a02e:	4674      	mov	r4, lr
 800a030:	42a3      	cmp	r3, r4
 800a032:	dd24      	ble.n	800a07e <_strtol_l.constprop.0+0xc6>
 800a034:	f1bc 0f00 	cmp.w	ip, #0
 800a038:	db1e      	blt.n	800a078 <_strtol_l.constprop.0+0xc0>
 800a03a:	45b1      	cmp	r9, r6
 800a03c:	d31c      	bcc.n	800a078 <_strtol_l.constprop.0+0xc0>
 800a03e:	d101      	bne.n	800a044 <_strtol_l.constprop.0+0x8c>
 800a040:	45a2      	cmp	sl, r4
 800a042:	db19      	blt.n	800a078 <_strtol_l.constprop.0+0xc0>
 800a044:	fb06 4603 	mla	r6, r6, r3, r4
 800a048:	f04f 0c01 	mov.w	ip, #1
 800a04c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a050:	e7e8      	b.n	800a024 <_strtol_l.constprop.0+0x6c>
 800a052:	2c2b      	cmp	r4, #43	; 0x2b
 800a054:	bf04      	itt	eq
 800a056:	782c      	ldrbeq	r4, [r5, #0]
 800a058:	1cb5      	addeq	r5, r6, #2
 800a05a:	e7ca      	b.n	8009ff2 <_strtol_l.constprop.0+0x3a>
 800a05c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800a060:	f1be 0f19 	cmp.w	lr, #25
 800a064:	d801      	bhi.n	800a06a <_strtol_l.constprop.0+0xb2>
 800a066:	3c37      	subs	r4, #55	; 0x37
 800a068:	e7e2      	b.n	800a030 <_strtol_l.constprop.0+0x78>
 800a06a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800a06e:	f1be 0f19 	cmp.w	lr, #25
 800a072:	d804      	bhi.n	800a07e <_strtol_l.constprop.0+0xc6>
 800a074:	3c57      	subs	r4, #87	; 0x57
 800a076:	e7db      	b.n	800a030 <_strtol_l.constprop.0+0x78>
 800a078:	f04f 3cff 	mov.w	ip, #4294967295
 800a07c:	e7e6      	b.n	800a04c <_strtol_l.constprop.0+0x94>
 800a07e:	f1bc 0f00 	cmp.w	ip, #0
 800a082:	da05      	bge.n	800a090 <_strtol_l.constprop.0+0xd8>
 800a084:	2322      	movs	r3, #34	; 0x22
 800a086:	6003      	str	r3, [r0, #0]
 800a088:	4646      	mov	r6, r8
 800a08a:	b942      	cbnz	r2, 800a09e <_strtol_l.constprop.0+0xe6>
 800a08c:	4630      	mov	r0, r6
 800a08e:	e79e      	b.n	8009fce <_strtol_l.constprop.0+0x16>
 800a090:	b107      	cbz	r7, 800a094 <_strtol_l.constprop.0+0xdc>
 800a092:	4276      	negs	r6, r6
 800a094:	2a00      	cmp	r2, #0
 800a096:	d0f9      	beq.n	800a08c <_strtol_l.constprop.0+0xd4>
 800a098:	f1bc 0f00 	cmp.w	ip, #0
 800a09c:	d000      	beq.n	800a0a0 <_strtol_l.constprop.0+0xe8>
 800a09e:	1e69      	subs	r1, r5, #1
 800a0a0:	6011      	str	r1, [r2, #0]
 800a0a2:	e7f3      	b.n	800a08c <_strtol_l.constprop.0+0xd4>
 800a0a4:	2430      	movs	r4, #48	; 0x30
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d1b1      	bne.n	800a00e <_strtol_l.constprop.0+0x56>
 800a0aa:	2308      	movs	r3, #8
 800a0ac:	e7af      	b.n	800a00e <_strtol_l.constprop.0+0x56>
 800a0ae:	2c30      	cmp	r4, #48	; 0x30
 800a0b0:	d0a5      	beq.n	8009ffe <_strtol_l.constprop.0+0x46>
 800a0b2:	230a      	movs	r3, #10
 800a0b4:	e7ab      	b.n	800a00e <_strtol_l.constprop.0+0x56>
 800a0b6:	bf00      	nop
 800a0b8:	0800c3f1 	.word	0x0800c3f1

0800a0bc <strtol>:
 800a0bc:	4613      	mov	r3, r2
 800a0be:	460a      	mov	r2, r1
 800a0c0:	4601      	mov	r1, r0
 800a0c2:	4802      	ldr	r0, [pc, #8]	; (800a0cc <strtol+0x10>)
 800a0c4:	6800      	ldr	r0, [r0, #0]
 800a0c6:	f7ff bf77 	b.w	8009fb8 <_strtol_l.constprop.0>
 800a0ca:	bf00      	nop
 800a0cc:	20000028 	.word	0x20000028

0800a0d0 <__swbuf_r>:
 800a0d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0d2:	460e      	mov	r6, r1
 800a0d4:	4614      	mov	r4, r2
 800a0d6:	4605      	mov	r5, r0
 800a0d8:	b118      	cbz	r0, 800a0e2 <__swbuf_r+0x12>
 800a0da:	6983      	ldr	r3, [r0, #24]
 800a0dc:	b90b      	cbnz	r3, 800a0e2 <__swbuf_r+0x12>
 800a0de:	f000 f9d1 	bl	800a484 <__sinit>
 800a0e2:	4b21      	ldr	r3, [pc, #132]	; (800a168 <__swbuf_r+0x98>)
 800a0e4:	429c      	cmp	r4, r3
 800a0e6:	d12b      	bne.n	800a140 <__swbuf_r+0x70>
 800a0e8:	686c      	ldr	r4, [r5, #4]
 800a0ea:	69a3      	ldr	r3, [r4, #24]
 800a0ec:	60a3      	str	r3, [r4, #8]
 800a0ee:	89a3      	ldrh	r3, [r4, #12]
 800a0f0:	071a      	lsls	r2, r3, #28
 800a0f2:	d52f      	bpl.n	800a154 <__swbuf_r+0x84>
 800a0f4:	6923      	ldr	r3, [r4, #16]
 800a0f6:	b36b      	cbz	r3, 800a154 <__swbuf_r+0x84>
 800a0f8:	6923      	ldr	r3, [r4, #16]
 800a0fa:	6820      	ldr	r0, [r4, #0]
 800a0fc:	1ac0      	subs	r0, r0, r3
 800a0fe:	6963      	ldr	r3, [r4, #20]
 800a100:	b2f6      	uxtb	r6, r6
 800a102:	4283      	cmp	r3, r0
 800a104:	4637      	mov	r7, r6
 800a106:	dc04      	bgt.n	800a112 <__swbuf_r+0x42>
 800a108:	4621      	mov	r1, r4
 800a10a:	4628      	mov	r0, r5
 800a10c:	f000 f926 	bl	800a35c <_fflush_r>
 800a110:	bb30      	cbnz	r0, 800a160 <__swbuf_r+0x90>
 800a112:	68a3      	ldr	r3, [r4, #8]
 800a114:	3b01      	subs	r3, #1
 800a116:	60a3      	str	r3, [r4, #8]
 800a118:	6823      	ldr	r3, [r4, #0]
 800a11a:	1c5a      	adds	r2, r3, #1
 800a11c:	6022      	str	r2, [r4, #0]
 800a11e:	701e      	strb	r6, [r3, #0]
 800a120:	6963      	ldr	r3, [r4, #20]
 800a122:	3001      	adds	r0, #1
 800a124:	4283      	cmp	r3, r0
 800a126:	d004      	beq.n	800a132 <__swbuf_r+0x62>
 800a128:	89a3      	ldrh	r3, [r4, #12]
 800a12a:	07db      	lsls	r3, r3, #31
 800a12c:	d506      	bpl.n	800a13c <__swbuf_r+0x6c>
 800a12e:	2e0a      	cmp	r6, #10
 800a130:	d104      	bne.n	800a13c <__swbuf_r+0x6c>
 800a132:	4621      	mov	r1, r4
 800a134:	4628      	mov	r0, r5
 800a136:	f000 f911 	bl	800a35c <_fflush_r>
 800a13a:	b988      	cbnz	r0, 800a160 <__swbuf_r+0x90>
 800a13c:	4638      	mov	r0, r7
 800a13e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a140:	4b0a      	ldr	r3, [pc, #40]	; (800a16c <__swbuf_r+0x9c>)
 800a142:	429c      	cmp	r4, r3
 800a144:	d101      	bne.n	800a14a <__swbuf_r+0x7a>
 800a146:	68ac      	ldr	r4, [r5, #8]
 800a148:	e7cf      	b.n	800a0ea <__swbuf_r+0x1a>
 800a14a:	4b09      	ldr	r3, [pc, #36]	; (800a170 <__swbuf_r+0xa0>)
 800a14c:	429c      	cmp	r4, r3
 800a14e:	bf08      	it	eq
 800a150:	68ec      	ldreq	r4, [r5, #12]
 800a152:	e7ca      	b.n	800a0ea <__swbuf_r+0x1a>
 800a154:	4621      	mov	r1, r4
 800a156:	4628      	mov	r0, r5
 800a158:	f000 f80c 	bl	800a174 <__swsetup_r>
 800a15c:	2800      	cmp	r0, #0
 800a15e:	d0cb      	beq.n	800a0f8 <__swbuf_r+0x28>
 800a160:	f04f 37ff 	mov.w	r7, #4294967295
 800a164:	e7ea      	b.n	800a13c <__swbuf_r+0x6c>
 800a166:	bf00      	nop
 800a168:	0800c514 	.word	0x0800c514
 800a16c:	0800c534 	.word	0x0800c534
 800a170:	0800c4f4 	.word	0x0800c4f4

0800a174 <__swsetup_r>:
 800a174:	4b32      	ldr	r3, [pc, #200]	; (800a240 <__swsetup_r+0xcc>)
 800a176:	b570      	push	{r4, r5, r6, lr}
 800a178:	681d      	ldr	r5, [r3, #0]
 800a17a:	4606      	mov	r6, r0
 800a17c:	460c      	mov	r4, r1
 800a17e:	b125      	cbz	r5, 800a18a <__swsetup_r+0x16>
 800a180:	69ab      	ldr	r3, [r5, #24]
 800a182:	b913      	cbnz	r3, 800a18a <__swsetup_r+0x16>
 800a184:	4628      	mov	r0, r5
 800a186:	f000 f97d 	bl	800a484 <__sinit>
 800a18a:	4b2e      	ldr	r3, [pc, #184]	; (800a244 <__swsetup_r+0xd0>)
 800a18c:	429c      	cmp	r4, r3
 800a18e:	d10f      	bne.n	800a1b0 <__swsetup_r+0x3c>
 800a190:	686c      	ldr	r4, [r5, #4]
 800a192:	89a3      	ldrh	r3, [r4, #12]
 800a194:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a198:	0719      	lsls	r1, r3, #28
 800a19a:	d42c      	bmi.n	800a1f6 <__swsetup_r+0x82>
 800a19c:	06dd      	lsls	r5, r3, #27
 800a19e:	d411      	bmi.n	800a1c4 <__swsetup_r+0x50>
 800a1a0:	2309      	movs	r3, #9
 800a1a2:	6033      	str	r3, [r6, #0]
 800a1a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a1a8:	81a3      	strh	r3, [r4, #12]
 800a1aa:	f04f 30ff 	mov.w	r0, #4294967295
 800a1ae:	e03e      	b.n	800a22e <__swsetup_r+0xba>
 800a1b0:	4b25      	ldr	r3, [pc, #148]	; (800a248 <__swsetup_r+0xd4>)
 800a1b2:	429c      	cmp	r4, r3
 800a1b4:	d101      	bne.n	800a1ba <__swsetup_r+0x46>
 800a1b6:	68ac      	ldr	r4, [r5, #8]
 800a1b8:	e7eb      	b.n	800a192 <__swsetup_r+0x1e>
 800a1ba:	4b24      	ldr	r3, [pc, #144]	; (800a24c <__swsetup_r+0xd8>)
 800a1bc:	429c      	cmp	r4, r3
 800a1be:	bf08      	it	eq
 800a1c0:	68ec      	ldreq	r4, [r5, #12]
 800a1c2:	e7e6      	b.n	800a192 <__swsetup_r+0x1e>
 800a1c4:	0758      	lsls	r0, r3, #29
 800a1c6:	d512      	bpl.n	800a1ee <__swsetup_r+0x7a>
 800a1c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a1ca:	b141      	cbz	r1, 800a1de <__swsetup_r+0x6a>
 800a1cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a1d0:	4299      	cmp	r1, r3
 800a1d2:	d002      	beq.n	800a1da <__swsetup_r+0x66>
 800a1d4:	4630      	mov	r0, r6
 800a1d6:	f000 fa5b 	bl	800a690 <_free_r>
 800a1da:	2300      	movs	r3, #0
 800a1dc:	6363      	str	r3, [r4, #52]	; 0x34
 800a1de:	89a3      	ldrh	r3, [r4, #12]
 800a1e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a1e4:	81a3      	strh	r3, [r4, #12]
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	6063      	str	r3, [r4, #4]
 800a1ea:	6923      	ldr	r3, [r4, #16]
 800a1ec:	6023      	str	r3, [r4, #0]
 800a1ee:	89a3      	ldrh	r3, [r4, #12]
 800a1f0:	f043 0308 	orr.w	r3, r3, #8
 800a1f4:	81a3      	strh	r3, [r4, #12]
 800a1f6:	6923      	ldr	r3, [r4, #16]
 800a1f8:	b94b      	cbnz	r3, 800a20e <__swsetup_r+0x9a>
 800a1fa:	89a3      	ldrh	r3, [r4, #12]
 800a1fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a200:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a204:	d003      	beq.n	800a20e <__swsetup_r+0x9a>
 800a206:	4621      	mov	r1, r4
 800a208:	4630      	mov	r0, r6
 800a20a:	f000 fa01 	bl	800a610 <__smakebuf_r>
 800a20e:	89a0      	ldrh	r0, [r4, #12]
 800a210:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a214:	f010 0301 	ands.w	r3, r0, #1
 800a218:	d00a      	beq.n	800a230 <__swsetup_r+0xbc>
 800a21a:	2300      	movs	r3, #0
 800a21c:	60a3      	str	r3, [r4, #8]
 800a21e:	6963      	ldr	r3, [r4, #20]
 800a220:	425b      	negs	r3, r3
 800a222:	61a3      	str	r3, [r4, #24]
 800a224:	6923      	ldr	r3, [r4, #16]
 800a226:	b943      	cbnz	r3, 800a23a <__swsetup_r+0xc6>
 800a228:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a22c:	d1ba      	bne.n	800a1a4 <__swsetup_r+0x30>
 800a22e:	bd70      	pop	{r4, r5, r6, pc}
 800a230:	0781      	lsls	r1, r0, #30
 800a232:	bf58      	it	pl
 800a234:	6963      	ldrpl	r3, [r4, #20]
 800a236:	60a3      	str	r3, [r4, #8]
 800a238:	e7f4      	b.n	800a224 <__swsetup_r+0xb0>
 800a23a:	2000      	movs	r0, #0
 800a23c:	e7f7      	b.n	800a22e <__swsetup_r+0xba>
 800a23e:	bf00      	nop
 800a240:	20000028 	.word	0x20000028
 800a244:	0800c514 	.word	0x0800c514
 800a248:	0800c534 	.word	0x0800c534
 800a24c:	0800c4f4 	.word	0x0800c4f4

0800a250 <__sflush_r>:
 800a250:	898a      	ldrh	r2, [r1, #12]
 800a252:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a256:	4605      	mov	r5, r0
 800a258:	0710      	lsls	r0, r2, #28
 800a25a:	460c      	mov	r4, r1
 800a25c:	d458      	bmi.n	800a310 <__sflush_r+0xc0>
 800a25e:	684b      	ldr	r3, [r1, #4]
 800a260:	2b00      	cmp	r3, #0
 800a262:	dc05      	bgt.n	800a270 <__sflush_r+0x20>
 800a264:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a266:	2b00      	cmp	r3, #0
 800a268:	dc02      	bgt.n	800a270 <__sflush_r+0x20>
 800a26a:	2000      	movs	r0, #0
 800a26c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a270:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a272:	2e00      	cmp	r6, #0
 800a274:	d0f9      	beq.n	800a26a <__sflush_r+0x1a>
 800a276:	2300      	movs	r3, #0
 800a278:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a27c:	682f      	ldr	r7, [r5, #0]
 800a27e:	602b      	str	r3, [r5, #0]
 800a280:	d032      	beq.n	800a2e8 <__sflush_r+0x98>
 800a282:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a284:	89a3      	ldrh	r3, [r4, #12]
 800a286:	075a      	lsls	r2, r3, #29
 800a288:	d505      	bpl.n	800a296 <__sflush_r+0x46>
 800a28a:	6863      	ldr	r3, [r4, #4]
 800a28c:	1ac0      	subs	r0, r0, r3
 800a28e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a290:	b10b      	cbz	r3, 800a296 <__sflush_r+0x46>
 800a292:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a294:	1ac0      	subs	r0, r0, r3
 800a296:	2300      	movs	r3, #0
 800a298:	4602      	mov	r2, r0
 800a29a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a29c:	6a21      	ldr	r1, [r4, #32]
 800a29e:	4628      	mov	r0, r5
 800a2a0:	47b0      	blx	r6
 800a2a2:	1c43      	adds	r3, r0, #1
 800a2a4:	89a3      	ldrh	r3, [r4, #12]
 800a2a6:	d106      	bne.n	800a2b6 <__sflush_r+0x66>
 800a2a8:	6829      	ldr	r1, [r5, #0]
 800a2aa:	291d      	cmp	r1, #29
 800a2ac:	d82c      	bhi.n	800a308 <__sflush_r+0xb8>
 800a2ae:	4a2a      	ldr	r2, [pc, #168]	; (800a358 <__sflush_r+0x108>)
 800a2b0:	40ca      	lsrs	r2, r1
 800a2b2:	07d6      	lsls	r6, r2, #31
 800a2b4:	d528      	bpl.n	800a308 <__sflush_r+0xb8>
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	6062      	str	r2, [r4, #4]
 800a2ba:	04d9      	lsls	r1, r3, #19
 800a2bc:	6922      	ldr	r2, [r4, #16]
 800a2be:	6022      	str	r2, [r4, #0]
 800a2c0:	d504      	bpl.n	800a2cc <__sflush_r+0x7c>
 800a2c2:	1c42      	adds	r2, r0, #1
 800a2c4:	d101      	bne.n	800a2ca <__sflush_r+0x7a>
 800a2c6:	682b      	ldr	r3, [r5, #0]
 800a2c8:	b903      	cbnz	r3, 800a2cc <__sflush_r+0x7c>
 800a2ca:	6560      	str	r0, [r4, #84]	; 0x54
 800a2cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a2ce:	602f      	str	r7, [r5, #0]
 800a2d0:	2900      	cmp	r1, #0
 800a2d2:	d0ca      	beq.n	800a26a <__sflush_r+0x1a>
 800a2d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a2d8:	4299      	cmp	r1, r3
 800a2da:	d002      	beq.n	800a2e2 <__sflush_r+0x92>
 800a2dc:	4628      	mov	r0, r5
 800a2de:	f000 f9d7 	bl	800a690 <_free_r>
 800a2e2:	2000      	movs	r0, #0
 800a2e4:	6360      	str	r0, [r4, #52]	; 0x34
 800a2e6:	e7c1      	b.n	800a26c <__sflush_r+0x1c>
 800a2e8:	6a21      	ldr	r1, [r4, #32]
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	4628      	mov	r0, r5
 800a2ee:	47b0      	blx	r6
 800a2f0:	1c41      	adds	r1, r0, #1
 800a2f2:	d1c7      	bne.n	800a284 <__sflush_r+0x34>
 800a2f4:	682b      	ldr	r3, [r5, #0]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d0c4      	beq.n	800a284 <__sflush_r+0x34>
 800a2fa:	2b1d      	cmp	r3, #29
 800a2fc:	d001      	beq.n	800a302 <__sflush_r+0xb2>
 800a2fe:	2b16      	cmp	r3, #22
 800a300:	d101      	bne.n	800a306 <__sflush_r+0xb6>
 800a302:	602f      	str	r7, [r5, #0]
 800a304:	e7b1      	b.n	800a26a <__sflush_r+0x1a>
 800a306:	89a3      	ldrh	r3, [r4, #12]
 800a308:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a30c:	81a3      	strh	r3, [r4, #12]
 800a30e:	e7ad      	b.n	800a26c <__sflush_r+0x1c>
 800a310:	690f      	ldr	r7, [r1, #16]
 800a312:	2f00      	cmp	r7, #0
 800a314:	d0a9      	beq.n	800a26a <__sflush_r+0x1a>
 800a316:	0793      	lsls	r3, r2, #30
 800a318:	680e      	ldr	r6, [r1, #0]
 800a31a:	bf08      	it	eq
 800a31c:	694b      	ldreq	r3, [r1, #20]
 800a31e:	600f      	str	r7, [r1, #0]
 800a320:	bf18      	it	ne
 800a322:	2300      	movne	r3, #0
 800a324:	eba6 0807 	sub.w	r8, r6, r7
 800a328:	608b      	str	r3, [r1, #8]
 800a32a:	f1b8 0f00 	cmp.w	r8, #0
 800a32e:	dd9c      	ble.n	800a26a <__sflush_r+0x1a>
 800a330:	6a21      	ldr	r1, [r4, #32]
 800a332:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a334:	4643      	mov	r3, r8
 800a336:	463a      	mov	r2, r7
 800a338:	4628      	mov	r0, r5
 800a33a:	47b0      	blx	r6
 800a33c:	2800      	cmp	r0, #0
 800a33e:	dc06      	bgt.n	800a34e <__sflush_r+0xfe>
 800a340:	89a3      	ldrh	r3, [r4, #12]
 800a342:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a346:	81a3      	strh	r3, [r4, #12]
 800a348:	f04f 30ff 	mov.w	r0, #4294967295
 800a34c:	e78e      	b.n	800a26c <__sflush_r+0x1c>
 800a34e:	4407      	add	r7, r0
 800a350:	eba8 0800 	sub.w	r8, r8, r0
 800a354:	e7e9      	b.n	800a32a <__sflush_r+0xda>
 800a356:	bf00      	nop
 800a358:	20400001 	.word	0x20400001

0800a35c <_fflush_r>:
 800a35c:	b538      	push	{r3, r4, r5, lr}
 800a35e:	690b      	ldr	r3, [r1, #16]
 800a360:	4605      	mov	r5, r0
 800a362:	460c      	mov	r4, r1
 800a364:	b913      	cbnz	r3, 800a36c <_fflush_r+0x10>
 800a366:	2500      	movs	r5, #0
 800a368:	4628      	mov	r0, r5
 800a36a:	bd38      	pop	{r3, r4, r5, pc}
 800a36c:	b118      	cbz	r0, 800a376 <_fflush_r+0x1a>
 800a36e:	6983      	ldr	r3, [r0, #24]
 800a370:	b90b      	cbnz	r3, 800a376 <_fflush_r+0x1a>
 800a372:	f000 f887 	bl	800a484 <__sinit>
 800a376:	4b14      	ldr	r3, [pc, #80]	; (800a3c8 <_fflush_r+0x6c>)
 800a378:	429c      	cmp	r4, r3
 800a37a:	d11b      	bne.n	800a3b4 <_fflush_r+0x58>
 800a37c:	686c      	ldr	r4, [r5, #4]
 800a37e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d0ef      	beq.n	800a366 <_fflush_r+0xa>
 800a386:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a388:	07d0      	lsls	r0, r2, #31
 800a38a:	d404      	bmi.n	800a396 <_fflush_r+0x3a>
 800a38c:	0599      	lsls	r1, r3, #22
 800a38e:	d402      	bmi.n	800a396 <_fflush_r+0x3a>
 800a390:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a392:	f000 f915 	bl	800a5c0 <__retarget_lock_acquire_recursive>
 800a396:	4628      	mov	r0, r5
 800a398:	4621      	mov	r1, r4
 800a39a:	f7ff ff59 	bl	800a250 <__sflush_r>
 800a39e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a3a0:	07da      	lsls	r2, r3, #31
 800a3a2:	4605      	mov	r5, r0
 800a3a4:	d4e0      	bmi.n	800a368 <_fflush_r+0xc>
 800a3a6:	89a3      	ldrh	r3, [r4, #12]
 800a3a8:	059b      	lsls	r3, r3, #22
 800a3aa:	d4dd      	bmi.n	800a368 <_fflush_r+0xc>
 800a3ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a3ae:	f000 f908 	bl	800a5c2 <__retarget_lock_release_recursive>
 800a3b2:	e7d9      	b.n	800a368 <_fflush_r+0xc>
 800a3b4:	4b05      	ldr	r3, [pc, #20]	; (800a3cc <_fflush_r+0x70>)
 800a3b6:	429c      	cmp	r4, r3
 800a3b8:	d101      	bne.n	800a3be <_fflush_r+0x62>
 800a3ba:	68ac      	ldr	r4, [r5, #8]
 800a3bc:	e7df      	b.n	800a37e <_fflush_r+0x22>
 800a3be:	4b04      	ldr	r3, [pc, #16]	; (800a3d0 <_fflush_r+0x74>)
 800a3c0:	429c      	cmp	r4, r3
 800a3c2:	bf08      	it	eq
 800a3c4:	68ec      	ldreq	r4, [r5, #12]
 800a3c6:	e7da      	b.n	800a37e <_fflush_r+0x22>
 800a3c8:	0800c514 	.word	0x0800c514
 800a3cc:	0800c534 	.word	0x0800c534
 800a3d0:	0800c4f4 	.word	0x0800c4f4

0800a3d4 <std>:
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	b510      	push	{r4, lr}
 800a3d8:	4604      	mov	r4, r0
 800a3da:	e9c0 3300 	strd	r3, r3, [r0]
 800a3de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a3e2:	6083      	str	r3, [r0, #8]
 800a3e4:	8181      	strh	r1, [r0, #12]
 800a3e6:	6643      	str	r3, [r0, #100]	; 0x64
 800a3e8:	81c2      	strh	r2, [r0, #14]
 800a3ea:	6183      	str	r3, [r0, #24]
 800a3ec:	4619      	mov	r1, r3
 800a3ee:	2208      	movs	r2, #8
 800a3f0:	305c      	adds	r0, #92	; 0x5c
 800a3f2:	f7ff fdb9 	bl	8009f68 <memset>
 800a3f6:	4b05      	ldr	r3, [pc, #20]	; (800a40c <std+0x38>)
 800a3f8:	6263      	str	r3, [r4, #36]	; 0x24
 800a3fa:	4b05      	ldr	r3, [pc, #20]	; (800a410 <std+0x3c>)
 800a3fc:	62a3      	str	r3, [r4, #40]	; 0x28
 800a3fe:	4b05      	ldr	r3, [pc, #20]	; (800a414 <std+0x40>)
 800a400:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a402:	4b05      	ldr	r3, [pc, #20]	; (800a418 <std+0x44>)
 800a404:	6224      	str	r4, [r4, #32]
 800a406:	6323      	str	r3, [r4, #48]	; 0x30
 800a408:	bd10      	pop	{r4, pc}
 800a40a:	bf00      	nop
 800a40c:	0800ae4d 	.word	0x0800ae4d
 800a410:	0800ae6f 	.word	0x0800ae6f
 800a414:	0800aea7 	.word	0x0800aea7
 800a418:	0800aecb 	.word	0x0800aecb

0800a41c <_cleanup_r>:
 800a41c:	4901      	ldr	r1, [pc, #4]	; (800a424 <_cleanup_r+0x8>)
 800a41e:	f000 b8af 	b.w	800a580 <_fwalk_reent>
 800a422:	bf00      	nop
 800a424:	0800a35d 	.word	0x0800a35d

0800a428 <__sfmoreglue>:
 800a428:	b570      	push	{r4, r5, r6, lr}
 800a42a:	2268      	movs	r2, #104	; 0x68
 800a42c:	1e4d      	subs	r5, r1, #1
 800a42e:	4355      	muls	r5, r2
 800a430:	460e      	mov	r6, r1
 800a432:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a436:	f000 f997 	bl	800a768 <_malloc_r>
 800a43a:	4604      	mov	r4, r0
 800a43c:	b140      	cbz	r0, 800a450 <__sfmoreglue+0x28>
 800a43e:	2100      	movs	r1, #0
 800a440:	e9c0 1600 	strd	r1, r6, [r0]
 800a444:	300c      	adds	r0, #12
 800a446:	60a0      	str	r0, [r4, #8]
 800a448:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a44c:	f7ff fd8c 	bl	8009f68 <memset>
 800a450:	4620      	mov	r0, r4
 800a452:	bd70      	pop	{r4, r5, r6, pc}

0800a454 <__sfp_lock_acquire>:
 800a454:	4801      	ldr	r0, [pc, #4]	; (800a45c <__sfp_lock_acquire+0x8>)
 800a456:	f000 b8b3 	b.w	800a5c0 <__retarget_lock_acquire_recursive>
 800a45a:	bf00      	nop
 800a45c:	20005665 	.word	0x20005665

0800a460 <__sfp_lock_release>:
 800a460:	4801      	ldr	r0, [pc, #4]	; (800a468 <__sfp_lock_release+0x8>)
 800a462:	f000 b8ae 	b.w	800a5c2 <__retarget_lock_release_recursive>
 800a466:	bf00      	nop
 800a468:	20005665 	.word	0x20005665

0800a46c <__sinit_lock_acquire>:
 800a46c:	4801      	ldr	r0, [pc, #4]	; (800a474 <__sinit_lock_acquire+0x8>)
 800a46e:	f000 b8a7 	b.w	800a5c0 <__retarget_lock_acquire_recursive>
 800a472:	bf00      	nop
 800a474:	20005666 	.word	0x20005666

0800a478 <__sinit_lock_release>:
 800a478:	4801      	ldr	r0, [pc, #4]	; (800a480 <__sinit_lock_release+0x8>)
 800a47a:	f000 b8a2 	b.w	800a5c2 <__retarget_lock_release_recursive>
 800a47e:	bf00      	nop
 800a480:	20005666 	.word	0x20005666

0800a484 <__sinit>:
 800a484:	b510      	push	{r4, lr}
 800a486:	4604      	mov	r4, r0
 800a488:	f7ff fff0 	bl	800a46c <__sinit_lock_acquire>
 800a48c:	69a3      	ldr	r3, [r4, #24]
 800a48e:	b11b      	cbz	r3, 800a498 <__sinit+0x14>
 800a490:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a494:	f7ff bff0 	b.w	800a478 <__sinit_lock_release>
 800a498:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a49c:	6523      	str	r3, [r4, #80]	; 0x50
 800a49e:	4b13      	ldr	r3, [pc, #76]	; (800a4ec <__sinit+0x68>)
 800a4a0:	4a13      	ldr	r2, [pc, #76]	; (800a4f0 <__sinit+0x6c>)
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	62a2      	str	r2, [r4, #40]	; 0x28
 800a4a6:	42a3      	cmp	r3, r4
 800a4a8:	bf04      	itt	eq
 800a4aa:	2301      	moveq	r3, #1
 800a4ac:	61a3      	streq	r3, [r4, #24]
 800a4ae:	4620      	mov	r0, r4
 800a4b0:	f000 f820 	bl	800a4f4 <__sfp>
 800a4b4:	6060      	str	r0, [r4, #4]
 800a4b6:	4620      	mov	r0, r4
 800a4b8:	f000 f81c 	bl	800a4f4 <__sfp>
 800a4bc:	60a0      	str	r0, [r4, #8]
 800a4be:	4620      	mov	r0, r4
 800a4c0:	f000 f818 	bl	800a4f4 <__sfp>
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	60e0      	str	r0, [r4, #12]
 800a4c8:	2104      	movs	r1, #4
 800a4ca:	6860      	ldr	r0, [r4, #4]
 800a4cc:	f7ff ff82 	bl	800a3d4 <std>
 800a4d0:	68a0      	ldr	r0, [r4, #8]
 800a4d2:	2201      	movs	r2, #1
 800a4d4:	2109      	movs	r1, #9
 800a4d6:	f7ff ff7d 	bl	800a3d4 <std>
 800a4da:	68e0      	ldr	r0, [r4, #12]
 800a4dc:	2202      	movs	r2, #2
 800a4de:	2112      	movs	r1, #18
 800a4e0:	f7ff ff78 	bl	800a3d4 <std>
 800a4e4:	2301      	movs	r3, #1
 800a4e6:	61a3      	str	r3, [r4, #24]
 800a4e8:	e7d2      	b.n	800a490 <__sinit+0xc>
 800a4ea:	bf00      	nop
 800a4ec:	0800c3ec 	.word	0x0800c3ec
 800a4f0:	0800a41d 	.word	0x0800a41d

0800a4f4 <__sfp>:
 800a4f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4f6:	4607      	mov	r7, r0
 800a4f8:	f7ff ffac 	bl	800a454 <__sfp_lock_acquire>
 800a4fc:	4b1e      	ldr	r3, [pc, #120]	; (800a578 <__sfp+0x84>)
 800a4fe:	681e      	ldr	r6, [r3, #0]
 800a500:	69b3      	ldr	r3, [r6, #24]
 800a502:	b913      	cbnz	r3, 800a50a <__sfp+0x16>
 800a504:	4630      	mov	r0, r6
 800a506:	f7ff ffbd 	bl	800a484 <__sinit>
 800a50a:	3648      	adds	r6, #72	; 0x48
 800a50c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a510:	3b01      	subs	r3, #1
 800a512:	d503      	bpl.n	800a51c <__sfp+0x28>
 800a514:	6833      	ldr	r3, [r6, #0]
 800a516:	b30b      	cbz	r3, 800a55c <__sfp+0x68>
 800a518:	6836      	ldr	r6, [r6, #0]
 800a51a:	e7f7      	b.n	800a50c <__sfp+0x18>
 800a51c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a520:	b9d5      	cbnz	r5, 800a558 <__sfp+0x64>
 800a522:	4b16      	ldr	r3, [pc, #88]	; (800a57c <__sfp+0x88>)
 800a524:	60e3      	str	r3, [r4, #12]
 800a526:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a52a:	6665      	str	r5, [r4, #100]	; 0x64
 800a52c:	f000 f847 	bl	800a5be <__retarget_lock_init_recursive>
 800a530:	f7ff ff96 	bl	800a460 <__sfp_lock_release>
 800a534:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a538:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a53c:	6025      	str	r5, [r4, #0]
 800a53e:	61a5      	str	r5, [r4, #24]
 800a540:	2208      	movs	r2, #8
 800a542:	4629      	mov	r1, r5
 800a544:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a548:	f7ff fd0e 	bl	8009f68 <memset>
 800a54c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a550:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a554:	4620      	mov	r0, r4
 800a556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a558:	3468      	adds	r4, #104	; 0x68
 800a55a:	e7d9      	b.n	800a510 <__sfp+0x1c>
 800a55c:	2104      	movs	r1, #4
 800a55e:	4638      	mov	r0, r7
 800a560:	f7ff ff62 	bl	800a428 <__sfmoreglue>
 800a564:	4604      	mov	r4, r0
 800a566:	6030      	str	r0, [r6, #0]
 800a568:	2800      	cmp	r0, #0
 800a56a:	d1d5      	bne.n	800a518 <__sfp+0x24>
 800a56c:	f7ff ff78 	bl	800a460 <__sfp_lock_release>
 800a570:	230c      	movs	r3, #12
 800a572:	603b      	str	r3, [r7, #0]
 800a574:	e7ee      	b.n	800a554 <__sfp+0x60>
 800a576:	bf00      	nop
 800a578:	0800c3ec 	.word	0x0800c3ec
 800a57c:	ffff0001 	.word	0xffff0001

0800a580 <_fwalk_reent>:
 800a580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a584:	4606      	mov	r6, r0
 800a586:	4688      	mov	r8, r1
 800a588:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a58c:	2700      	movs	r7, #0
 800a58e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a592:	f1b9 0901 	subs.w	r9, r9, #1
 800a596:	d505      	bpl.n	800a5a4 <_fwalk_reent+0x24>
 800a598:	6824      	ldr	r4, [r4, #0]
 800a59a:	2c00      	cmp	r4, #0
 800a59c:	d1f7      	bne.n	800a58e <_fwalk_reent+0xe>
 800a59e:	4638      	mov	r0, r7
 800a5a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5a4:	89ab      	ldrh	r3, [r5, #12]
 800a5a6:	2b01      	cmp	r3, #1
 800a5a8:	d907      	bls.n	800a5ba <_fwalk_reent+0x3a>
 800a5aa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a5ae:	3301      	adds	r3, #1
 800a5b0:	d003      	beq.n	800a5ba <_fwalk_reent+0x3a>
 800a5b2:	4629      	mov	r1, r5
 800a5b4:	4630      	mov	r0, r6
 800a5b6:	47c0      	blx	r8
 800a5b8:	4307      	orrs	r7, r0
 800a5ba:	3568      	adds	r5, #104	; 0x68
 800a5bc:	e7e9      	b.n	800a592 <_fwalk_reent+0x12>

0800a5be <__retarget_lock_init_recursive>:
 800a5be:	4770      	bx	lr

0800a5c0 <__retarget_lock_acquire_recursive>:
 800a5c0:	4770      	bx	lr

0800a5c2 <__retarget_lock_release_recursive>:
 800a5c2:	4770      	bx	lr

0800a5c4 <__swhatbuf_r>:
 800a5c4:	b570      	push	{r4, r5, r6, lr}
 800a5c6:	460e      	mov	r6, r1
 800a5c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5cc:	2900      	cmp	r1, #0
 800a5ce:	b096      	sub	sp, #88	; 0x58
 800a5d0:	4614      	mov	r4, r2
 800a5d2:	461d      	mov	r5, r3
 800a5d4:	da08      	bge.n	800a5e8 <__swhatbuf_r+0x24>
 800a5d6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a5da:	2200      	movs	r2, #0
 800a5dc:	602a      	str	r2, [r5, #0]
 800a5de:	061a      	lsls	r2, r3, #24
 800a5e0:	d410      	bmi.n	800a604 <__swhatbuf_r+0x40>
 800a5e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a5e6:	e00e      	b.n	800a606 <__swhatbuf_r+0x42>
 800a5e8:	466a      	mov	r2, sp
 800a5ea:	f000 fc95 	bl	800af18 <_fstat_r>
 800a5ee:	2800      	cmp	r0, #0
 800a5f0:	dbf1      	blt.n	800a5d6 <__swhatbuf_r+0x12>
 800a5f2:	9a01      	ldr	r2, [sp, #4]
 800a5f4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a5f8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a5fc:	425a      	negs	r2, r3
 800a5fe:	415a      	adcs	r2, r3
 800a600:	602a      	str	r2, [r5, #0]
 800a602:	e7ee      	b.n	800a5e2 <__swhatbuf_r+0x1e>
 800a604:	2340      	movs	r3, #64	; 0x40
 800a606:	2000      	movs	r0, #0
 800a608:	6023      	str	r3, [r4, #0]
 800a60a:	b016      	add	sp, #88	; 0x58
 800a60c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a610 <__smakebuf_r>:
 800a610:	898b      	ldrh	r3, [r1, #12]
 800a612:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a614:	079d      	lsls	r5, r3, #30
 800a616:	4606      	mov	r6, r0
 800a618:	460c      	mov	r4, r1
 800a61a:	d507      	bpl.n	800a62c <__smakebuf_r+0x1c>
 800a61c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a620:	6023      	str	r3, [r4, #0]
 800a622:	6123      	str	r3, [r4, #16]
 800a624:	2301      	movs	r3, #1
 800a626:	6163      	str	r3, [r4, #20]
 800a628:	b002      	add	sp, #8
 800a62a:	bd70      	pop	{r4, r5, r6, pc}
 800a62c:	ab01      	add	r3, sp, #4
 800a62e:	466a      	mov	r2, sp
 800a630:	f7ff ffc8 	bl	800a5c4 <__swhatbuf_r>
 800a634:	9900      	ldr	r1, [sp, #0]
 800a636:	4605      	mov	r5, r0
 800a638:	4630      	mov	r0, r6
 800a63a:	f000 f895 	bl	800a768 <_malloc_r>
 800a63e:	b948      	cbnz	r0, 800a654 <__smakebuf_r+0x44>
 800a640:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a644:	059a      	lsls	r2, r3, #22
 800a646:	d4ef      	bmi.n	800a628 <__smakebuf_r+0x18>
 800a648:	f023 0303 	bic.w	r3, r3, #3
 800a64c:	f043 0302 	orr.w	r3, r3, #2
 800a650:	81a3      	strh	r3, [r4, #12]
 800a652:	e7e3      	b.n	800a61c <__smakebuf_r+0xc>
 800a654:	4b0d      	ldr	r3, [pc, #52]	; (800a68c <__smakebuf_r+0x7c>)
 800a656:	62b3      	str	r3, [r6, #40]	; 0x28
 800a658:	89a3      	ldrh	r3, [r4, #12]
 800a65a:	6020      	str	r0, [r4, #0]
 800a65c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a660:	81a3      	strh	r3, [r4, #12]
 800a662:	9b00      	ldr	r3, [sp, #0]
 800a664:	6163      	str	r3, [r4, #20]
 800a666:	9b01      	ldr	r3, [sp, #4]
 800a668:	6120      	str	r0, [r4, #16]
 800a66a:	b15b      	cbz	r3, 800a684 <__smakebuf_r+0x74>
 800a66c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a670:	4630      	mov	r0, r6
 800a672:	f000 fc63 	bl	800af3c <_isatty_r>
 800a676:	b128      	cbz	r0, 800a684 <__smakebuf_r+0x74>
 800a678:	89a3      	ldrh	r3, [r4, #12]
 800a67a:	f023 0303 	bic.w	r3, r3, #3
 800a67e:	f043 0301 	orr.w	r3, r3, #1
 800a682:	81a3      	strh	r3, [r4, #12]
 800a684:	89a0      	ldrh	r0, [r4, #12]
 800a686:	4305      	orrs	r5, r0
 800a688:	81a5      	strh	r5, [r4, #12]
 800a68a:	e7cd      	b.n	800a628 <__smakebuf_r+0x18>
 800a68c:	0800a41d 	.word	0x0800a41d

0800a690 <_free_r>:
 800a690:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a692:	2900      	cmp	r1, #0
 800a694:	d044      	beq.n	800a720 <_free_r+0x90>
 800a696:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a69a:	9001      	str	r0, [sp, #4]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	f1a1 0404 	sub.w	r4, r1, #4
 800a6a2:	bfb8      	it	lt
 800a6a4:	18e4      	addlt	r4, r4, r3
 800a6a6:	f000 fc6b 	bl	800af80 <__malloc_lock>
 800a6aa:	4a1e      	ldr	r2, [pc, #120]	; (800a724 <_free_r+0x94>)
 800a6ac:	9801      	ldr	r0, [sp, #4]
 800a6ae:	6813      	ldr	r3, [r2, #0]
 800a6b0:	b933      	cbnz	r3, 800a6c0 <_free_r+0x30>
 800a6b2:	6063      	str	r3, [r4, #4]
 800a6b4:	6014      	str	r4, [r2, #0]
 800a6b6:	b003      	add	sp, #12
 800a6b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a6bc:	f000 bc66 	b.w	800af8c <__malloc_unlock>
 800a6c0:	42a3      	cmp	r3, r4
 800a6c2:	d908      	bls.n	800a6d6 <_free_r+0x46>
 800a6c4:	6825      	ldr	r5, [r4, #0]
 800a6c6:	1961      	adds	r1, r4, r5
 800a6c8:	428b      	cmp	r3, r1
 800a6ca:	bf01      	itttt	eq
 800a6cc:	6819      	ldreq	r1, [r3, #0]
 800a6ce:	685b      	ldreq	r3, [r3, #4]
 800a6d0:	1949      	addeq	r1, r1, r5
 800a6d2:	6021      	streq	r1, [r4, #0]
 800a6d4:	e7ed      	b.n	800a6b2 <_free_r+0x22>
 800a6d6:	461a      	mov	r2, r3
 800a6d8:	685b      	ldr	r3, [r3, #4]
 800a6da:	b10b      	cbz	r3, 800a6e0 <_free_r+0x50>
 800a6dc:	42a3      	cmp	r3, r4
 800a6de:	d9fa      	bls.n	800a6d6 <_free_r+0x46>
 800a6e0:	6811      	ldr	r1, [r2, #0]
 800a6e2:	1855      	adds	r5, r2, r1
 800a6e4:	42a5      	cmp	r5, r4
 800a6e6:	d10b      	bne.n	800a700 <_free_r+0x70>
 800a6e8:	6824      	ldr	r4, [r4, #0]
 800a6ea:	4421      	add	r1, r4
 800a6ec:	1854      	adds	r4, r2, r1
 800a6ee:	42a3      	cmp	r3, r4
 800a6f0:	6011      	str	r1, [r2, #0]
 800a6f2:	d1e0      	bne.n	800a6b6 <_free_r+0x26>
 800a6f4:	681c      	ldr	r4, [r3, #0]
 800a6f6:	685b      	ldr	r3, [r3, #4]
 800a6f8:	6053      	str	r3, [r2, #4]
 800a6fa:	4421      	add	r1, r4
 800a6fc:	6011      	str	r1, [r2, #0]
 800a6fe:	e7da      	b.n	800a6b6 <_free_r+0x26>
 800a700:	d902      	bls.n	800a708 <_free_r+0x78>
 800a702:	230c      	movs	r3, #12
 800a704:	6003      	str	r3, [r0, #0]
 800a706:	e7d6      	b.n	800a6b6 <_free_r+0x26>
 800a708:	6825      	ldr	r5, [r4, #0]
 800a70a:	1961      	adds	r1, r4, r5
 800a70c:	428b      	cmp	r3, r1
 800a70e:	bf04      	itt	eq
 800a710:	6819      	ldreq	r1, [r3, #0]
 800a712:	685b      	ldreq	r3, [r3, #4]
 800a714:	6063      	str	r3, [r4, #4]
 800a716:	bf04      	itt	eq
 800a718:	1949      	addeq	r1, r1, r5
 800a71a:	6021      	streq	r1, [r4, #0]
 800a71c:	6054      	str	r4, [r2, #4]
 800a71e:	e7ca      	b.n	800a6b6 <_free_r+0x26>
 800a720:	b003      	add	sp, #12
 800a722:	bd30      	pop	{r4, r5, pc}
 800a724:	20005668 	.word	0x20005668

0800a728 <sbrk_aligned>:
 800a728:	b570      	push	{r4, r5, r6, lr}
 800a72a:	4e0e      	ldr	r6, [pc, #56]	; (800a764 <sbrk_aligned+0x3c>)
 800a72c:	460c      	mov	r4, r1
 800a72e:	6831      	ldr	r1, [r6, #0]
 800a730:	4605      	mov	r5, r0
 800a732:	b911      	cbnz	r1, 800a73a <sbrk_aligned+0x12>
 800a734:	f000 fb7a 	bl	800ae2c <_sbrk_r>
 800a738:	6030      	str	r0, [r6, #0]
 800a73a:	4621      	mov	r1, r4
 800a73c:	4628      	mov	r0, r5
 800a73e:	f000 fb75 	bl	800ae2c <_sbrk_r>
 800a742:	1c43      	adds	r3, r0, #1
 800a744:	d00a      	beq.n	800a75c <sbrk_aligned+0x34>
 800a746:	1cc4      	adds	r4, r0, #3
 800a748:	f024 0403 	bic.w	r4, r4, #3
 800a74c:	42a0      	cmp	r0, r4
 800a74e:	d007      	beq.n	800a760 <sbrk_aligned+0x38>
 800a750:	1a21      	subs	r1, r4, r0
 800a752:	4628      	mov	r0, r5
 800a754:	f000 fb6a 	bl	800ae2c <_sbrk_r>
 800a758:	3001      	adds	r0, #1
 800a75a:	d101      	bne.n	800a760 <sbrk_aligned+0x38>
 800a75c:	f04f 34ff 	mov.w	r4, #4294967295
 800a760:	4620      	mov	r0, r4
 800a762:	bd70      	pop	{r4, r5, r6, pc}
 800a764:	2000566c 	.word	0x2000566c

0800a768 <_malloc_r>:
 800a768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a76c:	1ccd      	adds	r5, r1, #3
 800a76e:	f025 0503 	bic.w	r5, r5, #3
 800a772:	3508      	adds	r5, #8
 800a774:	2d0c      	cmp	r5, #12
 800a776:	bf38      	it	cc
 800a778:	250c      	movcc	r5, #12
 800a77a:	2d00      	cmp	r5, #0
 800a77c:	4607      	mov	r7, r0
 800a77e:	db01      	blt.n	800a784 <_malloc_r+0x1c>
 800a780:	42a9      	cmp	r1, r5
 800a782:	d905      	bls.n	800a790 <_malloc_r+0x28>
 800a784:	230c      	movs	r3, #12
 800a786:	603b      	str	r3, [r7, #0]
 800a788:	2600      	movs	r6, #0
 800a78a:	4630      	mov	r0, r6
 800a78c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a790:	4e2e      	ldr	r6, [pc, #184]	; (800a84c <_malloc_r+0xe4>)
 800a792:	f000 fbf5 	bl	800af80 <__malloc_lock>
 800a796:	6833      	ldr	r3, [r6, #0]
 800a798:	461c      	mov	r4, r3
 800a79a:	bb34      	cbnz	r4, 800a7ea <_malloc_r+0x82>
 800a79c:	4629      	mov	r1, r5
 800a79e:	4638      	mov	r0, r7
 800a7a0:	f7ff ffc2 	bl	800a728 <sbrk_aligned>
 800a7a4:	1c43      	adds	r3, r0, #1
 800a7a6:	4604      	mov	r4, r0
 800a7a8:	d14d      	bne.n	800a846 <_malloc_r+0xde>
 800a7aa:	6834      	ldr	r4, [r6, #0]
 800a7ac:	4626      	mov	r6, r4
 800a7ae:	2e00      	cmp	r6, #0
 800a7b0:	d140      	bne.n	800a834 <_malloc_r+0xcc>
 800a7b2:	6823      	ldr	r3, [r4, #0]
 800a7b4:	4631      	mov	r1, r6
 800a7b6:	4638      	mov	r0, r7
 800a7b8:	eb04 0803 	add.w	r8, r4, r3
 800a7bc:	f000 fb36 	bl	800ae2c <_sbrk_r>
 800a7c0:	4580      	cmp	r8, r0
 800a7c2:	d13a      	bne.n	800a83a <_malloc_r+0xd2>
 800a7c4:	6821      	ldr	r1, [r4, #0]
 800a7c6:	3503      	adds	r5, #3
 800a7c8:	1a6d      	subs	r5, r5, r1
 800a7ca:	f025 0503 	bic.w	r5, r5, #3
 800a7ce:	3508      	adds	r5, #8
 800a7d0:	2d0c      	cmp	r5, #12
 800a7d2:	bf38      	it	cc
 800a7d4:	250c      	movcc	r5, #12
 800a7d6:	4629      	mov	r1, r5
 800a7d8:	4638      	mov	r0, r7
 800a7da:	f7ff ffa5 	bl	800a728 <sbrk_aligned>
 800a7de:	3001      	adds	r0, #1
 800a7e0:	d02b      	beq.n	800a83a <_malloc_r+0xd2>
 800a7e2:	6823      	ldr	r3, [r4, #0]
 800a7e4:	442b      	add	r3, r5
 800a7e6:	6023      	str	r3, [r4, #0]
 800a7e8:	e00e      	b.n	800a808 <_malloc_r+0xa0>
 800a7ea:	6822      	ldr	r2, [r4, #0]
 800a7ec:	1b52      	subs	r2, r2, r5
 800a7ee:	d41e      	bmi.n	800a82e <_malloc_r+0xc6>
 800a7f0:	2a0b      	cmp	r2, #11
 800a7f2:	d916      	bls.n	800a822 <_malloc_r+0xba>
 800a7f4:	1961      	adds	r1, r4, r5
 800a7f6:	42a3      	cmp	r3, r4
 800a7f8:	6025      	str	r5, [r4, #0]
 800a7fa:	bf18      	it	ne
 800a7fc:	6059      	strne	r1, [r3, #4]
 800a7fe:	6863      	ldr	r3, [r4, #4]
 800a800:	bf08      	it	eq
 800a802:	6031      	streq	r1, [r6, #0]
 800a804:	5162      	str	r2, [r4, r5]
 800a806:	604b      	str	r3, [r1, #4]
 800a808:	4638      	mov	r0, r7
 800a80a:	f104 060b 	add.w	r6, r4, #11
 800a80e:	f000 fbbd 	bl	800af8c <__malloc_unlock>
 800a812:	f026 0607 	bic.w	r6, r6, #7
 800a816:	1d23      	adds	r3, r4, #4
 800a818:	1af2      	subs	r2, r6, r3
 800a81a:	d0b6      	beq.n	800a78a <_malloc_r+0x22>
 800a81c:	1b9b      	subs	r3, r3, r6
 800a81e:	50a3      	str	r3, [r4, r2]
 800a820:	e7b3      	b.n	800a78a <_malloc_r+0x22>
 800a822:	6862      	ldr	r2, [r4, #4]
 800a824:	42a3      	cmp	r3, r4
 800a826:	bf0c      	ite	eq
 800a828:	6032      	streq	r2, [r6, #0]
 800a82a:	605a      	strne	r2, [r3, #4]
 800a82c:	e7ec      	b.n	800a808 <_malloc_r+0xa0>
 800a82e:	4623      	mov	r3, r4
 800a830:	6864      	ldr	r4, [r4, #4]
 800a832:	e7b2      	b.n	800a79a <_malloc_r+0x32>
 800a834:	4634      	mov	r4, r6
 800a836:	6876      	ldr	r6, [r6, #4]
 800a838:	e7b9      	b.n	800a7ae <_malloc_r+0x46>
 800a83a:	230c      	movs	r3, #12
 800a83c:	603b      	str	r3, [r7, #0]
 800a83e:	4638      	mov	r0, r7
 800a840:	f000 fba4 	bl	800af8c <__malloc_unlock>
 800a844:	e7a1      	b.n	800a78a <_malloc_r+0x22>
 800a846:	6025      	str	r5, [r4, #0]
 800a848:	e7de      	b.n	800a808 <_malloc_r+0xa0>
 800a84a:	bf00      	nop
 800a84c:	20005668 	.word	0x20005668

0800a850 <__sfputc_r>:
 800a850:	6893      	ldr	r3, [r2, #8]
 800a852:	3b01      	subs	r3, #1
 800a854:	2b00      	cmp	r3, #0
 800a856:	b410      	push	{r4}
 800a858:	6093      	str	r3, [r2, #8]
 800a85a:	da08      	bge.n	800a86e <__sfputc_r+0x1e>
 800a85c:	6994      	ldr	r4, [r2, #24]
 800a85e:	42a3      	cmp	r3, r4
 800a860:	db01      	blt.n	800a866 <__sfputc_r+0x16>
 800a862:	290a      	cmp	r1, #10
 800a864:	d103      	bne.n	800a86e <__sfputc_r+0x1e>
 800a866:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a86a:	f7ff bc31 	b.w	800a0d0 <__swbuf_r>
 800a86e:	6813      	ldr	r3, [r2, #0]
 800a870:	1c58      	adds	r0, r3, #1
 800a872:	6010      	str	r0, [r2, #0]
 800a874:	7019      	strb	r1, [r3, #0]
 800a876:	4608      	mov	r0, r1
 800a878:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a87c:	4770      	bx	lr

0800a87e <__sfputs_r>:
 800a87e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a880:	4606      	mov	r6, r0
 800a882:	460f      	mov	r7, r1
 800a884:	4614      	mov	r4, r2
 800a886:	18d5      	adds	r5, r2, r3
 800a888:	42ac      	cmp	r4, r5
 800a88a:	d101      	bne.n	800a890 <__sfputs_r+0x12>
 800a88c:	2000      	movs	r0, #0
 800a88e:	e007      	b.n	800a8a0 <__sfputs_r+0x22>
 800a890:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a894:	463a      	mov	r2, r7
 800a896:	4630      	mov	r0, r6
 800a898:	f7ff ffda 	bl	800a850 <__sfputc_r>
 800a89c:	1c43      	adds	r3, r0, #1
 800a89e:	d1f3      	bne.n	800a888 <__sfputs_r+0xa>
 800a8a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a8a4 <_vfiprintf_r>:
 800a8a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8a8:	460d      	mov	r5, r1
 800a8aa:	b09d      	sub	sp, #116	; 0x74
 800a8ac:	4614      	mov	r4, r2
 800a8ae:	4698      	mov	r8, r3
 800a8b0:	4606      	mov	r6, r0
 800a8b2:	b118      	cbz	r0, 800a8bc <_vfiprintf_r+0x18>
 800a8b4:	6983      	ldr	r3, [r0, #24]
 800a8b6:	b90b      	cbnz	r3, 800a8bc <_vfiprintf_r+0x18>
 800a8b8:	f7ff fde4 	bl	800a484 <__sinit>
 800a8bc:	4b89      	ldr	r3, [pc, #548]	; (800aae4 <_vfiprintf_r+0x240>)
 800a8be:	429d      	cmp	r5, r3
 800a8c0:	d11b      	bne.n	800a8fa <_vfiprintf_r+0x56>
 800a8c2:	6875      	ldr	r5, [r6, #4]
 800a8c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a8c6:	07d9      	lsls	r1, r3, #31
 800a8c8:	d405      	bmi.n	800a8d6 <_vfiprintf_r+0x32>
 800a8ca:	89ab      	ldrh	r3, [r5, #12]
 800a8cc:	059a      	lsls	r2, r3, #22
 800a8ce:	d402      	bmi.n	800a8d6 <_vfiprintf_r+0x32>
 800a8d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a8d2:	f7ff fe75 	bl	800a5c0 <__retarget_lock_acquire_recursive>
 800a8d6:	89ab      	ldrh	r3, [r5, #12]
 800a8d8:	071b      	lsls	r3, r3, #28
 800a8da:	d501      	bpl.n	800a8e0 <_vfiprintf_r+0x3c>
 800a8dc:	692b      	ldr	r3, [r5, #16]
 800a8de:	b9eb      	cbnz	r3, 800a91c <_vfiprintf_r+0x78>
 800a8e0:	4629      	mov	r1, r5
 800a8e2:	4630      	mov	r0, r6
 800a8e4:	f7ff fc46 	bl	800a174 <__swsetup_r>
 800a8e8:	b1c0      	cbz	r0, 800a91c <_vfiprintf_r+0x78>
 800a8ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a8ec:	07dc      	lsls	r4, r3, #31
 800a8ee:	d50e      	bpl.n	800a90e <_vfiprintf_r+0x6a>
 800a8f0:	f04f 30ff 	mov.w	r0, #4294967295
 800a8f4:	b01d      	add	sp, #116	; 0x74
 800a8f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8fa:	4b7b      	ldr	r3, [pc, #492]	; (800aae8 <_vfiprintf_r+0x244>)
 800a8fc:	429d      	cmp	r5, r3
 800a8fe:	d101      	bne.n	800a904 <_vfiprintf_r+0x60>
 800a900:	68b5      	ldr	r5, [r6, #8]
 800a902:	e7df      	b.n	800a8c4 <_vfiprintf_r+0x20>
 800a904:	4b79      	ldr	r3, [pc, #484]	; (800aaec <_vfiprintf_r+0x248>)
 800a906:	429d      	cmp	r5, r3
 800a908:	bf08      	it	eq
 800a90a:	68f5      	ldreq	r5, [r6, #12]
 800a90c:	e7da      	b.n	800a8c4 <_vfiprintf_r+0x20>
 800a90e:	89ab      	ldrh	r3, [r5, #12]
 800a910:	0598      	lsls	r0, r3, #22
 800a912:	d4ed      	bmi.n	800a8f0 <_vfiprintf_r+0x4c>
 800a914:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a916:	f7ff fe54 	bl	800a5c2 <__retarget_lock_release_recursive>
 800a91a:	e7e9      	b.n	800a8f0 <_vfiprintf_r+0x4c>
 800a91c:	2300      	movs	r3, #0
 800a91e:	9309      	str	r3, [sp, #36]	; 0x24
 800a920:	2320      	movs	r3, #32
 800a922:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a926:	f8cd 800c 	str.w	r8, [sp, #12]
 800a92a:	2330      	movs	r3, #48	; 0x30
 800a92c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800aaf0 <_vfiprintf_r+0x24c>
 800a930:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a934:	f04f 0901 	mov.w	r9, #1
 800a938:	4623      	mov	r3, r4
 800a93a:	469a      	mov	sl, r3
 800a93c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a940:	b10a      	cbz	r2, 800a946 <_vfiprintf_r+0xa2>
 800a942:	2a25      	cmp	r2, #37	; 0x25
 800a944:	d1f9      	bne.n	800a93a <_vfiprintf_r+0x96>
 800a946:	ebba 0b04 	subs.w	fp, sl, r4
 800a94a:	d00b      	beq.n	800a964 <_vfiprintf_r+0xc0>
 800a94c:	465b      	mov	r3, fp
 800a94e:	4622      	mov	r2, r4
 800a950:	4629      	mov	r1, r5
 800a952:	4630      	mov	r0, r6
 800a954:	f7ff ff93 	bl	800a87e <__sfputs_r>
 800a958:	3001      	adds	r0, #1
 800a95a:	f000 80aa 	beq.w	800aab2 <_vfiprintf_r+0x20e>
 800a95e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a960:	445a      	add	r2, fp
 800a962:	9209      	str	r2, [sp, #36]	; 0x24
 800a964:	f89a 3000 	ldrb.w	r3, [sl]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	f000 80a2 	beq.w	800aab2 <_vfiprintf_r+0x20e>
 800a96e:	2300      	movs	r3, #0
 800a970:	f04f 32ff 	mov.w	r2, #4294967295
 800a974:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a978:	f10a 0a01 	add.w	sl, sl, #1
 800a97c:	9304      	str	r3, [sp, #16]
 800a97e:	9307      	str	r3, [sp, #28]
 800a980:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a984:	931a      	str	r3, [sp, #104]	; 0x68
 800a986:	4654      	mov	r4, sl
 800a988:	2205      	movs	r2, #5
 800a98a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a98e:	4858      	ldr	r0, [pc, #352]	; (800aaf0 <_vfiprintf_r+0x24c>)
 800a990:	f7f5 fc2e 	bl	80001f0 <memchr>
 800a994:	9a04      	ldr	r2, [sp, #16]
 800a996:	b9d8      	cbnz	r0, 800a9d0 <_vfiprintf_r+0x12c>
 800a998:	06d1      	lsls	r1, r2, #27
 800a99a:	bf44      	itt	mi
 800a99c:	2320      	movmi	r3, #32
 800a99e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a9a2:	0713      	lsls	r3, r2, #28
 800a9a4:	bf44      	itt	mi
 800a9a6:	232b      	movmi	r3, #43	; 0x2b
 800a9a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a9ac:	f89a 3000 	ldrb.w	r3, [sl]
 800a9b0:	2b2a      	cmp	r3, #42	; 0x2a
 800a9b2:	d015      	beq.n	800a9e0 <_vfiprintf_r+0x13c>
 800a9b4:	9a07      	ldr	r2, [sp, #28]
 800a9b6:	4654      	mov	r4, sl
 800a9b8:	2000      	movs	r0, #0
 800a9ba:	f04f 0c0a 	mov.w	ip, #10
 800a9be:	4621      	mov	r1, r4
 800a9c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a9c4:	3b30      	subs	r3, #48	; 0x30
 800a9c6:	2b09      	cmp	r3, #9
 800a9c8:	d94e      	bls.n	800aa68 <_vfiprintf_r+0x1c4>
 800a9ca:	b1b0      	cbz	r0, 800a9fa <_vfiprintf_r+0x156>
 800a9cc:	9207      	str	r2, [sp, #28]
 800a9ce:	e014      	b.n	800a9fa <_vfiprintf_r+0x156>
 800a9d0:	eba0 0308 	sub.w	r3, r0, r8
 800a9d4:	fa09 f303 	lsl.w	r3, r9, r3
 800a9d8:	4313      	orrs	r3, r2
 800a9da:	9304      	str	r3, [sp, #16]
 800a9dc:	46a2      	mov	sl, r4
 800a9de:	e7d2      	b.n	800a986 <_vfiprintf_r+0xe2>
 800a9e0:	9b03      	ldr	r3, [sp, #12]
 800a9e2:	1d19      	adds	r1, r3, #4
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	9103      	str	r1, [sp, #12]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	bfbb      	ittet	lt
 800a9ec:	425b      	neglt	r3, r3
 800a9ee:	f042 0202 	orrlt.w	r2, r2, #2
 800a9f2:	9307      	strge	r3, [sp, #28]
 800a9f4:	9307      	strlt	r3, [sp, #28]
 800a9f6:	bfb8      	it	lt
 800a9f8:	9204      	strlt	r2, [sp, #16]
 800a9fa:	7823      	ldrb	r3, [r4, #0]
 800a9fc:	2b2e      	cmp	r3, #46	; 0x2e
 800a9fe:	d10c      	bne.n	800aa1a <_vfiprintf_r+0x176>
 800aa00:	7863      	ldrb	r3, [r4, #1]
 800aa02:	2b2a      	cmp	r3, #42	; 0x2a
 800aa04:	d135      	bne.n	800aa72 <_vfiprintf_r+0x1ce>
 800aa06:	9b03      	ldr	r3, [sp, #12]
 800aa08:	1d1a      	adds	r2, r3, #4
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	9203      	str	r2, [sp, #12]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	bfb8      	it	lt
 800aa12:	f04f 33ff 	movlt.w	r3, #4294967295
 800aa16:	3402      	adds	r4, #2
 800aa18:	9305      	str	r3, [sp, #20]
 800aa1a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ab00 <_vfiprintf_r+0x25c>
 800aa1e:	7821      	ldrb	r1, [r4, #0]
 800aa20:	2203      	movs	r2, #3
 800aa22:	4650      	mov	r0, sl
 800aa24:	f7f5 fbe4 	bl	80001f0 <memchr>
 800aa28:	b140      	cbz	r0, 800aa3c <_vfiprintf_r+0x198>
 800aa2a:	2340      	movs	r3, #64	; 0x40
 800aa2c:	eba0 000a 	sub.w	r0, r0, sl
 800aa30:	fa03 f000 	lsl.w	r0, r3, r0
 800aa34:	9b04      	ldr	r3, [sp, #16]
 800aa36:	4303      	orrs	r3, r0
 800aa38:	3401      	adds	r4, #1
 800aa3a:	9304      	str	r3, [sp, #16]
 800aa3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa40:	482c      	ldr	r0, [pc, #176]	; (800aaf4 <_vfiprintf_r+0x250>)
 800aa42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aa46:	2206      	movs	r2, #6
 800aa48:	f7f5 fbd2 	bl	80001f0 <memchr>
 800aa4c:	2800      	cmp	r0, #0
 800aa4e:	d03f      	beq.n	800aad0 <_vfiprintf_r+0x22c>
 800aa50:	4b29      	ldr	r3, [pc, #164]	; (800aaf8 <_vfiprintf_r+0x254>)
 800aa52:	bb1b      	cbnz	r3, 800aa9c <_vfiprintf_r+0x1f8>
 800aa54:	9b03      	ldr	r3, [sp, #12]
 800aa56:	3307      	adds	r3, #7
 800aa58:	f023 0307 	bic.w	r3, r3, #7
 800aa5c:	3308      	adds	r3, #8
 800aa5e:	9303      	str	r3, [sp, #12]
 800aa60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa62:	443b      	add	r3, r7
 800aa64:	9309      	str	r3, [sp, #36]	; 0x24
 800aa66:	e767      	b.n	800a938 <_vfiprintf_r+0x94>
 800aa68:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa6c:	460c      	mov	r4, r1
 800aa6e:	2001      	movs	r0, #1
 800aa70:	e7a5      	b.n	800a9be <_vfiprintf_r+0x11a>
 800aa72:	2300      	movs	r3, #0
 800aa74:	3401      	adds	r4, #1
 800aa76:	9305      	str	r3, [sp, #20]
 800aa78:	4619      	mov	r1, r3
 800aa7a:	f04f 0c0a 	mov.w	ip, #10
 800aa7e:	4620      	mov	r0, r4
 800aa80:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa84:	3a30      	subs	r2, #48	; 0x30
 800aa86:	2a09      	cmp	r2, #9
 800aa88:	d903      	bls.n	800aa92 <_vfiprintf_r+0x1ee>
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d0c5      	beq.n	800aa1a <_vfiprintf_r+0x176>
 800aa8e:	9105      	str	r1, [sp, #20]
 800aa90:	e7c3      	b.n	800aa1a <_vfiprintf_r+0x176>
 800aa92:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa96:	4604      	mov	r4, r0
 800aa98:	2301      	movs	r3, #1
 800aa9a:	e7f0      	b.n	800aa7e <_vfiprintf_r+0x1da>
 800aa9c:	ab03      	add	r3, sp, #12
 800aa9e:	9300      	str	r3, [sp, #0]
 800aaa0:	462a      	mov	r2, r5
 800aaa2:	4b16      	ldr	r3, [pc, #88]	; (800aafc <_vfiprintf_r+0x258>)
 800aaa4:	a904      	add	r1, sp, #16
 800aaa6:	4630      	mov	r0, r6
 800aaa8:	f3af 8000 	nop.w
 800aaac:	4607      	mov	r7, r0
 800aaae:	1c78      	adds	r0, r7, #1
 800aab0:	d1d6      	bne.n	800aa60 <_vfiprintf_r+0x1bc>
 800aab2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aab4:	07d9      	lsls	r1, r3, #31
 800aab6:	d405      	bmi.n	800aac4 <_vfiprintf_r+0x220>
 800aab8:	89ab      	ldrh	r3, [r5, #12]
 800aaba:	059a      	lsls	r2, r3, #22
 800aabc:	d402      	bmi.n	800aac4 <_vfiprintf_r+0x220>
 800aabe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aac0:	f7ff fd7f 	bl	800a5c2 <__retarget_lock_release_recursive>
 800aac4:	89ab      	ldrh	r3, [r5, #12]
 800aac6:	065b      	lsls	r3, r3, #25
 800aac8:	f53f af12 	bmi.w	800a8f0 <_vfiprintf_r+0x4c>
 800aacc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aace:	e711      	b.n	800a8f4 <_vfiprintf_r+0x50>
 800aad0:	ab03      	add	r3, sp, #12
 800aad2:	9300      	str	r3, [sp, #0]
 800aad4:	462a      	mov	r2, r5
 800aad6:	4b09      	ldr	r3, [pc, #36]	; (800aafc <_vfiprintf_r+0x258>)
 800aad8:	a904      	add	r1, sp, #16
 800aada:	4630      	mov	r0, r6
 800aadc:	f000 f880 	bl	800abe0 <_printf_i>
 800aae0:	e7e4      	b.n	800aaac <_vfiprintf_r+0x208>
 800aae2:	bf00      	nop
 800aae4:	0800c514 	.word	0x0800c514
 800aae8:	0800c534 	.word	0x0800c534
 800aaec:	0800c4f4 	.word	0x0800c4f4
 800aaf0:	0800c554 	.word	0x0800c554
 800aaf4:	0800c55e 	.word	0x0800c55e
 800aaf8:	00000000 	.word	0x00000000
 800aafc:	0800a87f 	.word	0x0800a87f
 800ab00:	0800c55a 	.word	0x0800c55a

0800ab04 <_printf_common>:
 800ab04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab08:	4616      	mov	r6, r2
 800ab0a:	4699      	mov	r9, r3
 800ab0c:	688a      	ldr	r2, [r1, #8]
 800ab0e:	690b      	ldr	r3, [r1, #16]
 800ab10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ab14:	4293      	cmp	r3, r2
 800ab16:	bfb8      	it	lt
 800ab18:	4613      	movlt	r3, r2
 800ab1a:	6033      	str	r3, [r6, #0]
 800ab1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ab20:	4607      	mov	r7, r0
 800ab22:	460c      	mov	r4, r1
 800ab24:	b10a      	cbz	r2, 800ab2a <_printf_common+0x26>
 800ab26:	3301      	adds	r3, #1
 800ab28:	6033      	str	r3, [r6, #0]
 800ab2a:	6823      	ldr	r3, [r4, #0]
 800ab2c:	0699      	lsls	r1, r3, #26
 800ab2e:	bf42      	ittt	mi
 800ab30:	6833      	ldrmi	r3, [r6, #0]
 800ab32:	3302      	addmi	r3, #2
 800ab34:	6033      	strmi	r3, [r6, #0]
 800ab36:	6825      	ldr	r5, [r4, #0]
 800ab38:	f015 0506 	ands.w	r5, r5, #6
 800ab3c:	d106      	bne.n	800ab4c <_printf_common+0x48>
 800ab3e:	f104 0a19 	add.w	sl, r4, #25
 800ab42:	68e3      	ldr	r3, [r4, #12]
 800ab44:	6832      	ldr	r2, [r6, #0]
 800ab46:	1a9b      	subs	r3, r3, r2
 800ab48:	42ab      	cmp	r3, r5
 800ab4a:	dc26      	bgt.n	800ab9a <_printf_common+0x96>
 800ab4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ab50:	1e13      	subs	r3, r2, #0
 800ab52:	6822      	ldr	r2, [r4, #0]
 800ab54:	bf18      	it	ne
 800ab56:	2301      	movne	r3, #1
 800ab58:	0692      	lsls	r2, r2, #26
 800ab5a:	d42b      	bmi.n	800abb4 <_printf_common+0xb0>
 800ab5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ab60:	4649      	mov	r1, r9
 800ab62:	4638      	mov	r0, r7
 800ab64:	47c0      	blx	r8
 800ab66:	3001      	adds	r0, #1
 800ab68:	d01e      	beq.n	800aba8 <_printf_common+0xa4>
 800ab6a:	6823      	ldr	r3, [r4, #0]
 800ab6c:	68e5      	ldr	r5, [r4, #12]
 800ab6e:	6832      	ldr	r2, [r6, #0]
 800ab70:	f003 0306 	and.w	r3, r3, #6
 800ab74:	2b04      	cmp	r3, #4
 800ab76:	bf08      	it	eq
 800ab78:	1aad      	subeq	r5, r5, r2
 800ab7a:	68a3      	ldr	r3, [r4, #8]
 800ab7c:	6922      	ldr	r2, [r4, #16]
 800ab7e:	bf0c      	ite	eq
 800ab80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ab84:	2500      	movne	r5, #0
 800ab86:	4293      	cmp	r3, r2
 800ab88:	bfc4      	itt	gt
 800ab8a:	1a9b      	subgt	r3, r3, r2
 800ab8c:	18ed      	addgt	r5, r5, r3
 800ab8e:	2600      	movs	r6, #0
 800ab90:	341a      	adds	r4, #26
 800ab92:	42b5      	cmp	r5, r6
 800ab94:	d11a      	bne.n	800abcc <_printf_common+0xc8>
 800ab96:	2000      	movs	r0, #0
 800ab98:	e008      	b.n	800abac <_printf_common+0xa8>
 800ab9a:	2301      	movs	r3, #1
 800ab9c:	4652      	mov	r2, sl
 800ab9e:	4649      	mov	r1, r9
 800aba0:	4638      	mov	r0, r7
 800aba2:	47c0      	blx	r8
 800aba4:	3001      	adds	r0, #1
 800aba6:	d103      	bne.n	800abb0 <_printf_common+0xac>
 800aba8:	f04f 30ff 	mov.w	r0, #4294967295
 800abac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abb0:	3501      	adds	r5, #1
 800abb2:	e7c6      	b.n	800ab42 <_printf_common+0x3e>
 800abb4:	18e1      	adds	r1, r4, r3
 800abb6:	1c5a      	adds	r2, r3, #1
 800abb8:	2030      	movs	r0, #48	; 0x30
 800abba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800abbe:	4422      	add	r2, r4
 800abc0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800abc4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800abc8:	3302      	adds	r3, #2
 800abca:	e7c7      	b.n	800ab5c <_printf_common+0x58>
 800abcc:	2301      	movs	r3, #1
 800abce:	4622      	mov	r2, r4
 800abd0:	4649      	mov	r1, r9
 800abd2:	4638      	mov	r0, r7
 800abd4:	47c0      	blx	r8
 800abd6:	3001      	adds	r0, #1
 800abd8:	d0e6      	beq.n	800aba8 <_printf_common+0xa4>
 800abda:	3601      	adds	r6, #1
 800abdc:	e7d9      	b.n	800ab92 <_printf_common+0x8e>
	...

0800abe0 <_printf_i>:
 800abe0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800abe4:	7e0f      	ldrb	r7, [r1, #24]
 800abe6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800abe8:	2f78      	cmp	r7, #120	; 0x78
 800abea:	4691      	mov	r9, r2
 800abec:	4680      	mov	r8, r0
 800abee:	460c      	mov	r4, r1
 800abf0:	469a      	mov	sl, r3
 800abf2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800abf6:	d807      	bhi.n	800ac08 <_printf_i+0x28>
 800abf8:	2f62      	cmp	r7, #98	; 0x62
 800abfa:	d80a      	bhi.n	800ac12 <_printf_i+0x32>
 800abfc:	2f00      	cmp	r7, #0
 800abfe:	f000 80d8 	beq.w	800adb2 <_printf_i+0x1d2>
 800ac02:	2f58      	cmp	r7, #88	; 0x58
 800ac04:	f000 80a3 	beq.w	800ad4e <_printf_i+0x16e>
 800ac08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ac0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ac10:	e03a      	b.n	800ac88 <_printf_i+0xa8>
 800ac12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ac16:	2b15      	cmp	r3, #21
 800ac18:	d8f6      	bhi.n	800ac08 <_printf_i+0x28>
 800ac1a:	a101      	add	r1, pc, #4	; (adr r1, 800ac20 <_printf_i+0x40>)
 800ac1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ac20:	0800ac79 	.word	0x0800ac79
 800ac24:	0800ac8d 	.word	0x0800ac8d
 800ac28:	0800ac09 	.word	0x0800ac09
 800ac2c:	0800ac09 	.word	0x0800ac09
 800ac30:	0800ac09 	.word	0x0800ac09
 800ac34:	0800ac09 	.word	0x0800ac09
 800ac38:	0800ac8d 	.word	0x0800ac8d
 800ac3c:	0800ac09 	.word	0x0800ac09
 800ac40:	0800ac09 	.word	0x0800ac09
 800ac44:	0800ac09 	.word	0x0800ac09
 800ac48:	0800ac09 	.word	0x0800ac09
 800ac4c:	0800ad99 	.word	0x0800ad99
 800ac50:	0800acbd 	.word	0x0800acbd
 800ac54:	0800ad7b 	.word	0x0800ad7b
 800ac58:	0800ac09 	.word	0x0800ac09
 800ac5c:	0800ac09 	.word	0x0800ac09
 800ac60:	0800adbb 	.word	0x0800adbb
 800ac64:	0800ac09 	.word	0x0800ac09
 800ac68:	0800acbd 	.word	0x0800acbd
 800ac6c:	0800ac09 	.word	0x0800ac09
 800ac70:	0800ac09 	.word	0x0800ac09
 800ac74:	0800ad83 	.word	0x0800ad83
 800ac78:	682b      	ldr	r3, [r5, #0]
 800ac7a:	1d1a      	adds	r2, r3, #4
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	602a      	str	r2, [r5, #0]
 800ac80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ac84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ac88:	2301      	movs	r3, #1
 800ac8a:	e0a3      	b.n	800add4 <_printf_i+0x1f4>
 800ac8c:	6820      	ldr	r0, [r4, #0]
 800ac8e:	6829      	ldr	r1, [r5, #0]
 800ac90:	0606      	lsls	r6, r0, #24
 800ac92:	f101 0304 	add.w	r3, r1, #4
 800ac96:	d50a      	bpl.n	800acae <_printf_i+0xce>
 800ac98:	680e      	ldr	r6, [r1, #0]
 800ac9a:	602b      	str	r3, [r5, #0]
 800ac9c:	2e00      	cmp	r6, #0
 800ac9e:	da03      	bge.n	800aca8 <_printf_i+0xc8>
 800aca0:	232d      	movs	r3, #45	; 0x2d
 800aca2:	4276      	negs	r6, r6
 800aca4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aca8:	485e      	ldr	r0, [pc, #376]	; (800ae24 <_printf_i+0x244>)
 800acaa:	230a      	movs	r3, #10
 800acac:	e019      	b.n	800ace2 <_printf_i+0x102>
 800acae:	680e      	ldr	r6, [r1, #0]
 800acb0:	602b      	str	r3, [r5, #0]
 800acb2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800acb6:	bf18      	it	ne
 800acb8:	b236      	sxthne	r6, r6
 800acba:	e7ef      	b.n	800ac9c <_printf_i+0xbc>
 800acbc:	682b      	ldr	r3, [r5, #0]
 800acbe:	6820      	ldr	r0, [r4, #0]
 800acc0:	1d19      	adds	r1, r3, #4
 800acc2:	6029      	str	r1, [r5, #0]
 800acc4:	0601      	lsls	r1, r0, #24
 800acc6:	d501      	bpl.n	800accc <_printf_i+0xec>
 800acc8:	681e      	ldr	r6, [r3, #0]
 800acca:	e002      	b.n	800acd2 <_printf_i+0xf2>
 800accc:	0646      	lsls	r6, r0, #25
 800acce:	d5fb      	bpl.n	800acc8 <_printf_i+0xe8>
 800acd0:	881e      	ldrh	r6, [r3, #0]
 800acd2:	4854      	ldr	r0, [pc, #336]	; (800ae24 <_printf_i+0x244>)
 800acd4:	2f6f      	cmp	r7, #111	; 0x6f
 800acd6:	bf0c      	ite	eq
 800acd8:	2308      	moveq	r3, #8
 800acda:	230a      	movne	r3, #10
 800acdc:	2100      	movs	r1, #0
 800acde:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ace2:	6865      	ldr	r5, [r4, #4]
 800ace4:	60a5      	str	r5, [r4, #8]
 800ace6:	2d00      	cmp	r5, #0
 800ace8:	bfa2      	ittt	ge
 800acea:	6821      	ldrge	r1, [r4, #0]
 800acec:	f021 0104 	bicge.w	r1, r1, #4
 800acf0:	6021      	strge	r1, [r4, #0]
 800acf2:	b90e      	cbnz	r6, 800acf8 <_printf_i+0x118>
 800acf4:	2d00      	cmp	r5, #0
 800acf6:	d04d      	beq.n	800ad94 <_printf_i+0x1b4>
 800acf8:	4615      	mov	r5, r2
 800acfa:	fbb6 f1f3 	udiv	r1, r6, r3
 800acfe:	fb03 6711 	mls	r7, r3, r1, r6
 800ad02:	5dc7      	ldrb	r7, [r0, r7]
 800ad04:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ad08:	4637      	mov	r7, r6
 800ad0a:	42bb      	cmp	r3, r7
 800ad0c:	460e      	mov	r6, r1
 800ad0e:	d9f4      	bls.n	800acfa <_printf_i+0x11a>
 800ad10:	2b08      	cmp	r3, #8
 800ad12:	d10b      	bne.n	800ad2c <_printf_i+0x14c>
 800ad14:	6823      	ldr	r3, [r4, #0]
 800ad16:	07de      	lsls	r6, r3, #31
 800ad18:	d508      	bpl.n	800ad2c <_printf_i+0x14c>
 800ad1a:	6923      	ldr	r3, [r4, #16]
 800ad1c:	6861      	ldr	r1, [r4, #4]
 800ad1e:	4299      	cmp	r1, r3
 800ad20:	bfde      	ittt	le
 800ad22:	2330      	movle	r3, #48	; 0x30
 800ad24:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ad28:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ad2c:	1b52      	subs	r2, r2, r5
 800ad2e:	6122      	str	r2, [r4, #16]
 800ad30:	f8cd a000 	str.w	sl, [sp]
 800ad34:	464b      	mov	r3, r9
 800ad36:	aa03      	add	r2, sp, #12
 800ad38:	4621      	mov	r1, r4
 800ad3a:	4640      	mov	r0, r8
 800ad3c:	f7ff fee2 	bl	800ab04 <_printf_common>
 800ad40:	3001      	adds	r0, #1
 800ad42:	d14c      	bne.n	800adde <_printf_i+0x1fe>
 800ad44:	f04f 30ff 	mov.w	r0, #4294967295
 800ad48:	b004      	add	sp, #16
 800ad4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad4e:	4835      	ldr	r0, [pc, #212]	; (800ae24 <_printf_i+0x244>)
 800ad50:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ad54:	6829      	ldr	r1, [r5, #0]
 800ad56:	6823      	ldr	r3, [r4, #0]
 800ad58:	f851 6b04 	ldr.w	r6, [r1], #4
 800ad5c:	6029      	str	r1, [r5, #0]
 800ad5e:	061d      	lsls	r5, r3, #24
 800ad60:	d514      	bpl.n	800ad8c <_printf_i+0x1ac>
 800ad62:	07df      	lsls	r7, r3, #31
 800ad64:	bf44      	itt	mi
 800ad66:	f043 0320 	orrmi.w	r3, r3, #32
 800ad6a:	6023      	strmi	r3, [r4, #0]
 800ad6c:	b91e      	cbnz	r6, 800ad76 <_printf_i+0x196>
 800ad6e:	6823      	ldr	r3, [r4, #0]
 800ad70:	f023 0320 	bic.w	r3, r3, #32
 800ad74:	6023      	str	r3, [r4, #0]
 800ad76:	2310      	movs	r3, #16
 800ad78:	e7b0      	b.n	800acdc <_printf_i+0xfc>
 800ad7a:	6823      	ldr	r3, [r4, #0]
 800ad7c:	f043 0320 	orr.w	r3, r3, #32
 800ad80:	6023      	str	r3, [r4, #0]
 800ad82:	2378      	movs	r3, #120	; 0x78
 800ad84:	4828      	ldr	r0, [pc, #160]	; (800ae28 <_printf_i+0x248>)
 800ad86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ad8a:	e7e3      	b.n	800ad54 <_printf_i+0x174>
 800ad8c:	0659      	lsls	r1, r3, #25
 800ad8e:	bf48      	it	mi
 800ad90:	b2b6      	uxthmi	r6, r6
 800ad92:	e7e6      	b.n	800ad62 <_printf_i+0x182>
 800ad94:	4615      	mov	r5, r2
 800ad96:	e7bb      	b.n	800ad10 <_printf_i+0x130>
 800ad98:	682b      	ldr	r3, [r5, #0]
 800ad9a:	6826      	ldr	r6, [r4, #0]
 800ad9c:	6961      	ldr	r1, [r4, #20]
 800ad9e:	1d18      	adds	r0, r3, #4
 800ada0:	6028      	str	r0, [r5, #0]
 800ada2:	0635      	lsls	r5, r6, #24
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	d501      	bpl.n	800adac <_printf_i+0x1cc>
 800ada8:	6019      	str	r1, [r3, #0]
 800adaa:	e002      	b.n	800adb2 <_printf_i+0x1d2>
 800adac:	0670      	lsls	r0, r6, #25
 800adae:	d5fb      	bpl.n	800ada8 <_printf_i+0x1c8>
 800adb0:	8019      	strh	r1, [r3, #0]
 800adb2:	2300      	movs	r3, #0
 800adb4:	6123      	str	r3, [r4, #16]
 800adb6:	4615      	mov	r5, r2
 800adb8:	e7ba      	b.n	800ad30 <_printf_i+0x150>
 800adba:	682b      	ldr	r3, [r5, #0]
 800adbc:	1d1a      	adds	r2, r3, #4
 800adbe:	602a      	str	r2, [r5, #0]
 800adc0:	681d      	ldr	r5, [r3, #0]
 800adc2:	6862      	ldr	r2, [r4, #4]
 800adc4:	2100      	movs	r1, #0
 800adc6:	4628      	mov	r0, r5
 800adc8:	f7f5 fa12 	bl	80001f0 <memchr>
 800adcc:	b108      	cbz	r0, 800add2 <_printf_i+0x1f2>
 800adce:	1b40      	subs	r0, r0, r5
 800add0:	6060      	str	r0, [r4, #4]
 800add2:	6863      	ldr	r3, [r4, #4]
 800add4:	6123      	str	r3, [r4, #16]
 800add6:	2300      	movs	r3, #0
 800add8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800addc:	e7a8      	b.n	800ad30 <_printf_i+0x150>
 800adde:	6923      	ldr	r3, [r4, #16]
 800ade0:	462a      	mov	r2, r5
 800ade2:	4649      	mov	r1, r9
 800ade4:	4640      	mov	r0, r8
 800ade6:	47d0      	blx	sl
 800ade8:	3001      	adds	r0, #1
 800adea:	d0ab      	beq.n	800ad44 <_printf_i+0x164>
 800adec:	6823      	ldr	r3, [r4, #0]
 800adee:	079b      	lsls	r3, r3, #30
 800adf0:	d413      	bmi.n	800ae1a <_printf_i+0x23a>
 800adf2:	68e0      	ldr	r0, [r4, #12]
 800adf4:	9b03      	ldr	r3, [sp, #12]
 800adf6:	4298      	cmp	r0, r3
 800adf8:	bfb8      	it	lt
 800adfa:	4618      	movlt	r0, r3
 800adfc:	e7a4      	b.n	800ad48 <_printf_i+0x168>
 800adfe:	2301      	movs	r3, #1
 800ae00:	4632      	mov	r2, r6
 800ae02:	4649      	mov	r1, r9
 800ae04:	4640      	mov	r0, r8
 800ae06:	47d0      	blx	sl
 800ae08:	3001      	adds	r0, #1
 800ae0a:	d09b      	beq.n	800ad44 <_printf_i+0x164>
 800ae0c:	3501      	adds	r5, #1
 800ae0e:	68e3      	ldr	r3, [r4, #12]
 800ae10:	9903      	ldr	r1, [sp, #12]
 800ae12:	1a5b      	subs	r3, r3, r1
 800ae14:	42ab      	cmp	r3, r5
 800ae16:	dcf2      	bgt.n	800adfe <_printf_i+0x21e>
 800ae18:	e7eb      	b.n	800adf2 <_printf_i+0x212>
 800ae1a:	2500      	movs	r5, #0
 800ae1c:	f104 0619 	add.w	r6, r4, #25
 800ae20:	e7f5      	b.n	800ae0e <_printf_i+0x22e>
 800ae22:	bf00      	nop
 800ae24:	0800c565 	.word	0x0800c565
 800ae28:	0800c576 	.word	0x0800c576

0800ae2c <_sbrk_r>:
 800ae2c:	b538      	push	{r3, r4, r5, lr}
 800ae2e:	4d06      	ldr	r5, [pc, #24]	; (800ae48 <_sbrk_r+0x1c>)
 800ae30:	2300      	movs	r3, #0
 800ae32:	4604      	mov	r4, r0
 800ae34:	4608      	mov	r0, r1
 800ae36:	602b      	str	r3, [r5, #0]
 800ae38:	f7fa fd4a 	bl	80058d0 <_sbrk>
 800ae3c:	1c43      	adds	r3, r0, #1
 800ae3e:	d102      	bne.n	800ae46 <_sbrk_r+0x1a>
 800ae40:	682b      	ldr	r3, [r5, #0]
 800ae42:	b103      	cbz	r3, 800ae46 <_sbrk_r+0x1a>
 800ae44:	6023      	str	r3, [r4, #0]
 800ae46:	bd38      	pop	{r3, r4, r5, pc}
 800ae48:	20005670 	.word	0x20005670

0800ae4c <__sread>:
 800ae4c:	b510      	push	{r4, lr}
 800ae4e:	460c      	mov	r4, r1
 800ae50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae54:	f000 f8a0 	bl	800af98 <_read_r>
 800ae58:	2800      	cmp	r0, #0
 800ae5a:	bfab      	itete	ge
 800ae5c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ae5e:	89a3      	ldrhlt	r3, [r4, #12]
 800ae60:	181b      	addge	r3, r3, r0
 800ae62:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ae66:	bfac      	ite	ge
 800ae68:	6563      	strge	r3, [r4, #84]	; 0x54
 800ae6a:	81a3      	strhlt	r3, [r4, #12]
 800ae6c:	bd10      	pop	{r4, pc}

0800ae6e <__swrite>:
 800ae6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae72:	461f      	mov	r7, r3
 800ae74:	898b      	ldrh	r3, [r1, #12]
 800ae76:	05db      	lsls	r3, r3, #23
 800ae78:	4605      	mov	r5, r0
 800ae7a:	460c      	mov	r4, r1
 800ae7c:	4616      	mov	r6, r2
 800ae7e:	d505      	bpl.n	800ae8c <__swrite+0x1e>
 800ae80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae84:	2302      	movs	r3, #2
 800ae86:	2200      	movs	r2, #0
 800ae88:	f000 f868 	bl	800af5c <_lseek_r>
 800ae8c:	89a3      	ldrh	r3, [r4, #12]
 800ae8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ae96:	81a3      	strh	r3, [r4, #12]
 800ae98:	4632      	mov	r2, r6
 800ae9a:	463b      	mov	r3, r7
 800ae9c:	4628      	mov	r0, r5
 800ae9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aea2:	f000 b817 	b.w	800aed4 <_write_r>

0800aea6 <__sseek>:
 800aea6:	b510      	push	{r4, lr}
 800aea8:	460c      	mov	r4, r1
 800aeaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aeae:	f000 f855 	bl	800af5c <_lseek_r>
 800aeb2:	1c43      	adds	r3, r0, #1
 800aeb4:	89a3      	ldrh	r3, [r4, #12]
 800aeb6:	bf15      	itete	ne
 800aeb8:	6560      	strne	r0, [r4, #84]	; 0x54
 800aeba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800aebe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800aec2:	81a3      	strheq	r3, [r4, #12]
 800aec4:	bf18      	it	ne
 800aec6:	81a3      	strhne	r3, [r4, #12]
 800aec8:	bd10      	pop	{r4, pc}

0800aeca <__sclose>:
 800aeca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aece:	f000 b813 	b.w	800aef8 <_close_r>
	...

0800aed4 <_write_r>:
 800aed4:	b538      	push	{r3, r4, r5, lr}
 800aed6:	4d07      	ldr	r5, [pc, #28]	; (800aef4 <_write_r+0x20>)
 800aed8:	4604      	mov	r4, r0
 800aeda:	4608      	mov	r0, r1
 800aedc:	4611      	mov	r1, r2
 800aede:	2200      	movs	r2, #0
 800aee0:	602a      	str	r2, [r5, #0]
 800aee2:	461a      	mov	r2, r3
 800aee4:	f7fa fca3 	bl	800582e <_write>
 800aee8:	1c43      	adds	r3, r0, #1
 800aeea:	d102      	bne.n	800aef2 <_write_r+0x1e>
 800aeec:	682b      	ldr	r3, [r5, #0]
 800aeee:	b103      	cbz	r3, 800aef2 <_write_r+0x1e>
 800aef0:	6023      	str	r3, [r4, #0]
 800aef2:	bd38      	pop	{r3, r4, r5, pc}
 800aef4:	20005670 	.word	0x20005670

0800aef8 <_close_r>:
 800aef8:	b538      	push	{r3, r4, r5, lr}
 800aefa:	4d06      	ldr	r5, [pc, #24]	; (800af14 <_close_r+0x1c>)
 800aefc:	2300      	movs	r3, #0
 800aefe:	4604      	mov	r4, r0
 800af00:	4608      	mov	r0, r1
 800af02:	602b      	str	r3, [r5, #0]
 800af04:	f7fa fcaf 	bl	8005866 <_close>
 800af08:	1c43      	adds	r3, r0, #1
 800af0a:	d102      	bne.n	800af12 <_close_r+0x1a>
 800af0c:	682b      	ldr	r3, [r5, #0]
 800af0e:	b103      	cbz	r3, 800af12 <_close_r+0x1a>
 800af10:	6023      	str	r3, [r4, #0]
 800af12:	bd38      	pop	{r3, r4, r5, pc}
 800af14:	20005670 	.word	0x20005670

0800af18 <_fstat_r>:
 800af18:	b538      	push	{r3, r4, r5, lr}
 800af1a:	4d07      	ldr	r5, [pc, #28]	; (800af38 <_fstat_r+0x20>)
 800af1c:	2300      	movs	r3, #0
 800af1e:	4604      	mov	r4, r0
 800af20:	4608      	mov	r0, r1
 800af22:	4611      	mov	r1, r2
 800af24:	602b      	str	r3, [r5, #0]
 800af26:	f7fa fcaa 	bl	800587e <_fstat>
 800af2a:	1c43      	adds	r3, r0, #1
 800af2c:	d102      	bne.n	800af34 <_fstat_r+0x1c>
 800af2e:	682b      	ldr	r3, [r5, #0]
 800af30:	b103      	cbz	r3, 800af34 <_fstat_r+0x1c>
 800af32:	6023      	str	r3, [r4, #0]
 800af34:	bd38      	pop	{r3, r4, r5, pc}
 800af36:	bf00      	nop
 800af38:	20005670 	.word	0x20005670

0800af3c <_isatty_r>:
 800af3c:	b538      	push	{r3, r4, r5, lr}
 800af3e:	4d06      	ldr	r5, [pc, #24]	; (800af58 <_isatty_r+0x1c>)
 800af40:	2300      	movs	r3, #0
 800af42:	4604      	mov	r4, r0
 800af44:	4608      	mov	r0, r1
 800af46:	602b      	str	r3, [r5, #0]
 800af48:	f7fa fca9 	bl	800589e <_isatty>
 800af4c:	1c43      	adds	r3, r0, #1
 800af4e:	d102      	bne.n	800af56 <_isatty_r+0x1a>
 800af50:	682b      	ldr	r3, [r5, #0]
 800af52:	b103      	cbz	r3, 800af56 <_isatty_r+0x1a>
 800af54:	6023      	str	r3, [r4, #0]
 800af56:	bd38      	pop	{r3, r4, r5, pc}
 800af58:	20005670 	.word	0x20005670

0800af5c <_lseek_r>:
 800af5c:	b538      	push	{r3, r4, r5, lr}
 800af5e:	4d07      	ldr	r5, [pc, #28]	; (800af7c <_lseek_r+0x20>)
 800af60:	4604      	mov	r4, r0
 800af62:	4608      	mov	r0, r1
 800af64:	4611      	mov	r1, r2
 800af66:	2200      	movs	r2, #0
 800af68:	602a      	str	r2, [r5, #0]
 800af6a:	461a      	mov	r2, r3
 800af6c:	f7fa fca2 	bl	80058b4 <_lseek>
 800af70:	1c43      	adds	r3, r0, #1
 800af72:	d102      	bne.n	800af7a <_lseek_r+0x1e>
 800af74:	682b      	ldr	r3, [r5, #0]
 800af76:	b103      	cbz	r3, 800af7a <_lseek_r+0x1e>
 800af78:	6023      	str	r3, [r4, #0]
 800af7a:	bd38      	pop	{r3, r4, r5, pc}
 800af7c:	20005670 	.word	0x20005670

0800af80 <__malloc_lock>:
 800af80:	4801      	ldr	r0, [pc, #4]	; (800af88 <__malloc_lock+0x8>)
 800af82:	f7ff bb1d 	b.w	800a5c0 <__retarget_lock_acquire_recursive>
 800af86:	bf00      	nop
 800af88:	20005664 	.word	0x20005664

0800af8c <__malloc_unlock>:
 800af8c:	4801      	ldr	r0, [pc, #4]	; (800af94 <__malloc_unlock+0x8>)
 800af8e:	f7ff bb18 	b.w	800a5c2 <__retarget_lock_release_recursive>
 800af92:	bf00      	nop
 800af94:	20005664 	.word	0x20005664

0800af98 <_read_r>:
 800af98:	b538      	push	{r3, r4, r5, lr}
 800af9a:	4d07      	ldr	r5, [pc, #28]	; (800afb8 <_read_r+0x20>)
 800af9c:	4604      	mov	r4, r0
 800af9e:	4608      	mov	r0, r1
 800afa0:	4611      	mov	r1, r2
 800afa2:	2200      	movs	r2, #0
 800afa4:	602a      	str	r2, [r5, #0]
 800afa6:	461a      	mov	r2, r3
 800afa8:	f7fa fc24 	bl	80057f4 <_read>
 800afac:	1c43      	adds	r3, r0, #1
 800afae:	d102      	bne.n	800afb6 <_read_r+0x1e>
 800afb0:	682b      	ldr	r3, [r5, #0]
 800afb2:	b103      	cbz	r3, 800afb6 <_read_r+0x1e>
 800afb4:	6023      	str	r3, [r4, #0]
 800afb6:	bd38      	pop	{r3, r4, r5, pc}
 800afb8:	20005670 	.word	0x20005670

0800afbc <_init>:
 800afbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afbe:	bf00      	nop
 800afc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afc2:	bc08      	pop	{r3}
 800afc4:	469e      	mov	lr, r3
 800afc6:	4770      	bx	lr

0800afc8 <_fini>:
 800afc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afca:	bf00      	nop
 800afcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afce:	bc08      	pop	{r3}
 800afd0:	469e      	mov	lr, r3
 800afd2:	4770      	bx	lr
