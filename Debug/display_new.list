
display_new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bea4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ad0  0800c034  0800c034  0001c034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800db04  0800db04  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  0800db04  0800db04  0001db04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800db0c  0800db0c  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800db0c  0800db0c  0001db0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800db10  0800db10  0001db10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0800db14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000773c  20000098  0800dbac  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200077d4  0800dbac  000277d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001af06  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003aad  00000000  00000000  0003afce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001650  00000000  00000000  0003ea80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001528  00000000  00000000  000400d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025bb6  00000000  00000000  000415f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d154  00000000  00000000  000671ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d648b  00000000  00000000  00084302  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015a78d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000069b0  00000000  00000000  0015a7e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000098 	.word	0x20000098
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c01c 	.word	0x0800c01c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	0800c01c 	.word	0x0800c01c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_dmul>:
 80002a0:	b570      	push	{r4, r5, r6, lr}
 80002a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ae:	bf1d      	ittte	ne
 80002b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002b4:	ea94 0f0c 	teqne	r4, ip
 80002b8:	ea95 0f0c 	teqne	r5, ip
 80002bc:	f000 f8de 	bleq	800047c <__aeabi_dmul+0x1dc>
 80002c0:	442c      	add	r4, r5
 80002c2:	ea81 0603 	eor.w	r6, r1, r3
 80002c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002d2:	bf18      	it	ne
 80002d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002e0:	d038      	beq.n	8000354 <__aeabi_dmul+0xb4>
 80002e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002e6:	f04f 0500 	mov.w	r5, #0
 80002ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002f6:	f04f 0600 	mov.w	r6, #0
 80002fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002fe:	f09c 0f00 	teq	ip, #0
 8000302:	bf18      	it	ne
 8000304:	f04e 0e01 	orrne.w	lr, lr, #1
 8000308:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800030c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000310:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000314:	d204      	bcs.n	8000320 <__aeabi_dmul+0x80>
 8000316:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800031a:	416d      	adcs	r5, r5
 800031c:	eb46 0606 	adc.w	r6, r6, r6
 8000320:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000324:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000328:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800032c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000330:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000334:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000338:	bf88      	it	hi
 800033a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800033e:	d81e      	bhi.n	800037e <__aeabi_dmul+0xde>
 8000340:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	bd70      	pop	{r4, r5, r6, pc}
 8000354:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000358:	ea46 0101 	orr.w	r1, r6, r1
 800035c:	ea40 0002 	orr.w	r0, r0, r2
 8000360:	ea81 0103 	eor.w	r1, r1, r3
 8000364:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000368:	bfc2      	ittt	gt
 800036a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800036e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000372:	bd70      	popgt	{r4, r5, r6, pc}
 8000374:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000378:	f04f 0e00 	mov.w	lr, #0
 800037c:	3c01      	subs	r4, #1
 800037e:	f300 80ab 	bgt.w	80004d8 <__aeabi_dmul+0x238>
 8000382:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000386:	bfde      	ittt	le
 8000388:	2000      	movle	r0, #0
 800038a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800038e:	bd70      	pople	{r4, r5, r6, pc}
 8000390:	f1c4 0400 	rsb	r4, r4, #0
 8000394:	3c20      	subs	r4, #32
 8000396:	da35      	bge.n	8000404 <__aeabi_dmul+0x164>
 8000398:	340c      	adds	r4, #12
 800039a:	dc1b      	bgt.n	80003d4 <__aeabi_dmul+0x134>
 800039c:	f104 0414 	add.w	r4, r4, #20
 80003a0:	f1c4 0520 	rsb	r5, r4, #32
 80003a4:	fa00 f305 	lsl.w	r3, r0, r5
 80003a8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ac:	fa01 f205 	lsl.w	r2, r1, r5
 80003b0:	ea40 0002 	orr.w	r0, r0, r2
 80003b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c0:	fa21 f604 	lsr.w	r6, r1, r4
 80003c4:	eb42 0106 	adc.w	r1, r2, r6
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 040c 	rsb	r4, r4, #12
 80003d8:	f1c4 0520 	rsb	r5, r4, #32
 80003dc:	fa00 f304 	lsl.w	r3, r0, r4
 80003e0:	fa20 f005 	lsr.w	r0, r0, r5
 80003e4:	fa01 f204 	lsl.w	r2, r1, r4
 80003e8:	ea40 0002 	orr.w	r0, r0, r2
 80003ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003f4:	f141 0100 	adc.w	r1, r1, #0
 80003f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003fc:	bf08      	it	eq
 80003fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000402:	bd70      	pop	{r4, r5, r6, pc}
 8000404:	f1c4 0520 	rsb	r5, r4, #32
 8000408:	fa00 f205 	lsl.w	r2, r0, r5
 800040c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000410:	fa20 f304 	lsr.w	r3, r0, r4
 8000414:	fa01 f205 	lsl.w	r2, r1, r5
 8000418:	ea43 0302 	orr.w	r3, r3, r2
 800041c:	fa21 f004 	lsr.w	r0, r1, r4
 8000420:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000424:	fa21 f204 	lsr.w	r2, r1, r4
 8000428:	ea20 0002 	bic.w	r0, r0, r2
 800042c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000430:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000434:	bf08      	it	eq
 8000436:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800043a:	bd70      	pop	{r4, r5, r6, pc}
 800043c:	f094 0f00 	teq	r4, #0
 8000440:	d10f      	bne.n	8000462 <__aeabi_dmul+0x1c2>
 8000442:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000446:	0040      	lsls	r0, r0, #1
 8000448:	eb41 0101 	adc.w	r1, r1, r1
 800044c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3c01      	subeq	r4, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1a6>
 8000456:	ea41 0106 	orr.w	r1, r1, r6
 800045a:	f095 0f00 	teq	r5, #0
 800045e:	bf18      	it	ne
 8000460:	4770      	bxne	lr
 8000462:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000466:	0052      	lsls	r2, r2, #1
 8000468:	eb43 0303 	adc.w	r3, r3, r3
 800046c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000470:	bf08      	it	eq
 8000472:	3d01      	subeq	r5, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1c6>
 8000476:	ea43 0306 	orr.w	r3, r3, r6
 800047a:	4770      	bx	lr
 800047c:	ea94 0f0c 	teq	r4, ip
 8000480:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000484:	bf18      	it	ne
 8000486:	ea95 0f0c 	teqne	r5, ip
 800048a:	d00c      	beq.n	80004a6 <__aeabi_dmul+0x206>
 800048c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000490:	bf18      	it	ne
 8000492:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000496:	d1d1      	bne.n	800043c <__aeabi_dmul+0x19c>
 8000498:	ea81 0103 	eor.w	r1, r1, r3
 800049c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004a0:	f04f 0000 	mov.w	r0, #0
 80004a4:	bd70      	pop	{r4, r5, r6, pc}
 80004a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004aa:	bf06      	itte	eq
 80004ac:	4610      	moveq	r0, r2
 80004ae:	4619      	moveq	r1, r3
 80004b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b4:	d019      	beq.n	80004ea <__aeabi_dmul+0x24a>
 80004b6:	ea94 0f0c 	teq	r4, ip
 80004ba:	d102      	bne.n	80004c2 <__aeabi_dmul+0x222>
 80004bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004c0:	d113      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004c2:	ea95 0f0c 	teq	r5, ip
 80004c6:	d105      	bne.n	80004d4 <__aeabi_dmul+0x234>
 80004c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004cc:	bf1c      	itt	ne
 80004ce:	4610      	movne	r0, r2
 80004d0:	4619      	movne	r1, r3
 80004d2:	d10a      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004d4:	ea81 0103 	eor.w	r1, r1, r3
 80004d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd70      	pop	{r4, r5, r6, pc}
 80004ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004f2:	bd70      	pop	{r4, r5, r6, pc}

080004f4 <__aeabi_drsub>:
 80004f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e002      	b.n	8000500 <__adddf3>
 80004fa:	bf00      	nop

080004fc <__aeabi_dsub>:
 80004fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000500 <__adddf3>:
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000506:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800050a:	ea94 0f05 	teq	r4, r5
 800050e:	bf08      	it	eq
 8000510:	ea90 0f02 	teqeq	r0, r2
 8000514:	bf1f      	itttt	ne
 8000516:	ea54 0c00 	orrsne.w	ip, r4, r0
 800051a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800051e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000522:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000526:	f000 80e2 	beq.w	80006ee <__adddf3+0x1ee>
 800052a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800052e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000532:	bfb8      	it	lt
 8000534:	426d      	neglt	r5, r5
 8000536:	dd0c      	ble.n	8000552 <__adddf3+0x52>
 8000538:	442c      	add	r4, r5
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	ea82 0000 	eor.w	r0, r2, r0
 8000546:	ea83 0101 	eor.w	r1, r3, r1
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	2d36      	cmp	r5, #54	; 0x36
 8000554:	bf88      	it	hi
 8000556:	bd30      	pophi	{r4, r5, pc}
 8000558:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800055c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000560:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000564:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000568:	d002      	beq.n	8000570 <__adddf3+0x70>
 800056a:	4240      	negs	r0, r0
 800056c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000570:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000574:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000578:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800057c:	d002      	beq.n	8000584 <__adddf3+0x84>
 800057e:	4252      	negs	r2, r2
 8000580:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000584:	ea94 0f05 	teq	r4, r5
 8000588:	f000 80a7 	beq.w	80006da <__adddf3+0x1da>
 800058c:	f1a4 0401 	sub.w	r4, r4, #1
 8000590:	f1d5 0e20 	rsbs	lr, r5, #32
 8000594:	db0d      	blt.n	80005b2 <__adddf3+0xb2>
 8000596:	fa02 fc0e 	lsl.w	ip, r2, lr
 800059a:	fa22 f205 	lsr.w	r2, r2, r5
 800059e:	1880      	adds	r0, r0, r2
 80005a0:	f141 0100 	adc.w	r1, r1, #0
 80005a4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005a8:	1880      	adds	r0, r0, r2
 80005aa:	fa43 f305 	asr.w	r3, r3, r5
 80005ae:	4159      	adcs	r1, r3
 80005b0:	e00e      	b.n	80005d0 <__adddf3+0xd0>
 80005b2:	f1a5 0520 	sub.w	r5, r5, #32
 80005b6:	f10e 0e20 	add.w	lr, lr, #32
 80005ba:	2a01      	cmp	r2, #1
 80005bc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005c0:	bf28      	it	cs
 80005c2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005c6:	fa43 f305 	asr.w	r3, r3, r5
 80005ca:	18c0      	adds	r0, r0, r3
 80005cc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	d507      	bpl.n	80005e6 <__adddf3+0xe6>
 80005d6:	f04f 0e00 	mov.w	lr, #0
 80005da:	f1dc 0c00 	rsbs	ip, ip, #0
 80005de:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005e2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005e6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ea:	d31b      	bcc.n	8000624 <__adddf3+0x124>
 80005ec:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005f0:	d30c      	bcc.n	800060c <__adddf3+0x10c>
 80005f2:	0849      	lsrs	r1, r1, #1
 80005f4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005f8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005fc:	f104 0401 	add.w	r4, r4, #1
 8000600:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000604:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000608:	f080 809a 	bcs.w	8000740 <__adddf3+0x240>
 800060c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000610:	bf08      	it	eq
 8000612:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000616:	f150 0000 	adcs.w	r0, r0, #0
 800061a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061e:	ea41 0105 	orr.w	r1, r1, r5
 8000622:	bd30      	pop	{r4, r5, pc}
 8000624:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000628:	4140      	adcs	r0, r0
 800062a:	eb41 0101 	adc.w	r1, r1, r1
 800062e:	3c01      	subs	r4, #1
 8000630:	bf28      	it	cs
 8000632:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000636:	d2e9      	bcs.n	800060c <__adddf3+0x10c>
 8000638:	f091 0f00 	teq	r1, #0
 800063c:	bf04      	itt	eq
 800063e:	4601      	moveq	r1, r0
 8000640:	2000      	moveq	r0, #0
 8000642:	fab1 f381 	clz	r3, r1
 8000646:	bf08      	it	eq
 8000648:	3320      	addeq	r3, #32
 800064a:	f1a3 030b 	sub.w	r3, r3, #11
 800064e:	f1b3 0220 	subs.w	r2, r3, #32
 8000652:	da0c      	bge.n	800066e <__adddf3+0x16e>
 8000654:	320c      	adds	r2, #12
 8000656:	dd08      	ble.n	800066a <__adddf3+0x16a>
 8000658:	f102 0c14 	add.w	ip, r2, #20
 800065c:	f1c2 020c 	rsb	r2, r2, #12
 8000660:	fa01 f00c 	lsl.w	r0, r1, ip
 8000664:	fa21 f102 	lsr.w	r1, r1, r2
 8000668:	e00c      	b.n	8000684 <__adddf3+0x184>
 800066a:	f102 0214 	add.w	r2, r2, #20
 800066e:	bfd8      	it	le
 8000670:	f1c2 0c20 	rsble	ip, r2, #32
 8000674:	fa01 f102 	lsl.w	r1, r1, r2
 8000678:	fa20 fc0c 	lsr.w	ip, r0, ip
 800067c:	bfdc      	itt	le
 800067e:	ea41 010c 	orrle.w	r1, r1, ip
 8000682:	4090      	lslle	r0, r2
 8000684:	1ae4      	subs	r4, r4, r3
 8000686:	bfa2      	ittt	ge
 8000688:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800068c:	4329      	orrge	r1, r5
 800068e:	bd30      	popge	{r4, r5, pc}
 8000690:	ea6f 0404 	mvn.w	r4, r4
 8000694:	3c1f      	subs	r4, #31
 8000696:	da1c      	bge.n	80006d2 <__adddf3+0x1d2>
 8000698:	340c      	adds	r4, #12
 800069a:	dc0e      	bgt.n	80006ba <__adddf3+0x1ba>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0220 	rsb	r2, r4, #32
 80006a4:	fa20 f004 	lsr.w	r0, r0, r4
 80006a8:	fa01 f302 	lsl.w	r3, r1, r2
 80006ac:	ea40 0003 	orr.w	r0, r0, r3
 80006b0:	fa21 f304 	lsr.w	r3, r1, r4
 80006b4:	ea45 0103 	orr.w	r1, r5, r3
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f1c4 040c 	rsb	r4, r4, #12
 80006be:	f1c4 0220 	rsb	r2, r4, #32
 80006c2:	fa20 f002 	lsr.w	r0, r0, r2
 80006c6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ca:	ea40 0003 	orr.w	r0, r0, r3
 80006ce:	4629      	mov	r1, r5
 80006d0:	bd30      	pop	{r4, r5, pc}
 80006d2:	fa21 f004 	lsr.w	r0, r1, r4
 80006d6:	4629      	mov	r1, r5
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f094 0f00 	teq	r4, #0
 80006de:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006e2:	bf06      	itte	eq
 80006e4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006e8:	3401      	addeq	r4, #1
 80006ea:	3d01      	subne	r5, #1
 80006ec:	e74e      	b.n	800058c <__adddf3+0x8c>
 80006ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006f2:	bf18      	it	ne
 80006f4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006f8:	d029      	beq.n	800074e <__adddf3+0x24e>
 80006fa:	ea94 0f05 	teq	r4, r5
 80006fe:	bf08      	it	eq
 8000700:	ea90 0f02 	teqeq	r0, r2
 8000704:	d005      	beq.n	8000712 <__adddf3+0x212>
 8000706:	ea54 0c00 	orrs.w	ip, r4, r0
 800070a:	bf04      	itt	eq
 800070c:	4619      	moveq	r1, r3
 800070e:	4610      	moveq	r0, r2
 8000710:	bd30      	pop	{r4, r5, pc}
 8000712:	ea91 0f03 	teq	r1, r3
 8000716:	bf1e      	ittt	ne
 8000718:	2100      	movne	r1, #0
 800071a:	2000      	movne	r0, #0
 800071c:	bd30      	popne	{r4, r5, pc}
 800071e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000722:	d105      	bne.n	8000730 <__adddf3+0x230>
 8000724:	0040      	lsls	r0, r0, #1
 8000726:	4149      	adcs	r1, r1
 8000728:	bf28      	it	cs
 800072a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd30      	pop	{r4, r5, pc}
 8000730:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000734:	bf3c      	itt	cc
 8000736:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800073a:	bd30      	popcc	{r4, r5, pc}
 800073c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000740:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000744:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd30      	pop	{r4, r5, pc}
 800074e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000752:	bf1a      	itte	ne
 8000754:	4619      	movne	r1, r3
 8000756:	4610      	movne	r0, r2
 8000758:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800075c:	bf1c      	itt	ne
 800075e:	460b      	movne	r3, r1
 8000760:	4602      	movne	r2, r0
 8000762:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000766:	bf06      	itte	eq
 8000768:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800076c:	ea91 0f03 	teqeq	r1, r3
 8000770:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000774:	bd30      	pop	{r4, r5, pc}
 8000776:	bf00      	nop

08000778 <__aeabi_ui2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f04f 0500 	mov.w	r5, #0
 8000790:	f04f 0100 	mov.w	r1, #0
 8000794:	e750      	b.n	8000638 <__adddf3+0x138>
 8000796:	bf00      	nop

08000798 <__aeabi_i2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007ac:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007b0:	bf48      	it	mi
 80007b2:	4240      	negmi	r0, r0
 80007b4:	f04f 0100 	mov.w	r1, #0
 80007b8:	e73e      	b.n	8000638 <__adddf3+0x138>
 80007ba:	bf00      	nop

080007bc <__aeabi_f2d>:
 80007bc:	0042      	lsls	r2, r0, #1
 80007be:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007c2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007c6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ca:	bf1f      	itttt	ne
 80007cc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007d0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007d4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007d8:	4770      	bxne	lr
 80007da:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007de:	bf08      	it	eq
 80007e0:	4770      	bxeq	lr
 80007e2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007e6:	bf04      	itt	eq
 80007e8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007ec:	4770      	bxeq	lr
 80007ee:	b530      	push	{r4, r5, lr}
 80007f0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007fc:	e71c      	b.n	8000638 <__adddf3+0x138>
 80007fe:	bf00      	nop

08000800 <__aeabi_ul2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f04f 0500 	mov.w	r5, #0
 800080e:	e00a      	b.n	8000826 <__aeabi_l2d+0x16>

08000810 <__aeabi_l2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800081e:	d502      	bpl.n	8000826 <__aeabi_l2d+0x16>
 8000820:	4240      	negs	r0, r0
 8000822:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000826:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800082a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800082e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000832:	f43f aed8 	beq.w	80005e6 <__adddf3+0xe6>
 8000836:	f04f 0203 	mov.w	r2, #3
 800083a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800083e:	bf18      	it	ne
 8000840:	3203      	addne	r2, #3
 8000842:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000846:	bf18      	it	ne
 8000848:	3203      	addne	r2, #3
 800084a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800084e:	f1c2 0320 	rsb	r3, r2, #32
 8000852:	fa00 fc03 	lsl.w	ip, r0, r3
 8000856:	fa20 f002 	lsr.w	r0, r0, r2
 800085a:	fa01 fe03 	lsl.w	lr, r1, r3
 800085e:	ea40 000e 	orr.w	r0, r0, lr
 8000862:	fa21 f102 	lsr.w	r1, r1, r2
 8000866:	4414      	add	r4, r2
 8000868:	e6bd      	b.n	80005e6 <__adddf3+0xe6>
 800086a:	bf00      	nop

0800086c <__aeabi_d2uiz>:
 800086c:	004a      	lsls	r2, r1, #1
 800086e:	d211      	bcs.n	8000894 <__aeabi_d2uiz+0x28>
 8000870:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000874:	d211      	bcs.n	800089a <__aeabi_d2uiz+0x2e>
 8000876:	d50d      	bpl.n	8000894 <__aeabi_d2uiz+0x28>
 8000878:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800087c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000880:	d40e      	bmi.n	80008a0 <__aeabi_d2uiz+0x34>
 8000882:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000886:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800088a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800088e:	fa23 f002 	lsr.w	r0, r3, r2
 8000892:	4770      	bx	lr
 8000894:	f04f 0000 	mov.w	r0, #0
 8000898:	4770      	bx	lr
 800089a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800089e:	d102      	bne.n	80008a6 <__aeabi_d2uiz+0x3a>
 80008a0:	f04f 30ff 	mov.w	r0, #4294967295
 80008a4:	4770      	bx	lr
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	4770      	bx	lr

080008ac <__aeabi_uldivmod>:
 80008ac:	b953      	cbnz	r3, 80008c4 <__aeabi_uldivmod+0x18>
 80008ae:	b94a      	cbnz	r2, 80008c4 <__aeabi_uldivmod+0x18>
 80008b0:	2900      	cmp	r1, #0
 80008b2:	bf08      	it	eq
 80008b4:	2800      	cmpeq	r0, #0
 80008b6:	bf1c      	itt	ne
 80008b8:	f04f 31ff 	movne.w	r1, #4294967295
 80008bc:	f04f 30ff 	movne.w	r0, #4294967295
 80008c0:	f000 b974 	b.w	8000bac <__aeabi_idiv0>
 80008c4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008cc:	f000 f806 	bl	80008dc <__udivmoddi4>
 80008d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008d8:	b004      	add	sp, #16
 80008da:	4770      	bx	lr

080008dc <__udivmoddi4>:
 80008dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008e0:	9d08      	ldr	r5, [sp, #32]
 80008e2:	4604      	mov	r4, r0
 80008e4:	468e      	mov	lr, r1
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d14d      	bne.n	8000986 <__udivmoddi4+0xaa>
 80008ea:	428a      	cmp	r2, r1
 80008ec:	4694      	mov	ip, r2
 80008ee:	d969      	bls.n	80009c4 <__udivmoddi4+0xe8>
 80008f0:	fab2 f282 	clz	r2, r2
 80008f4:	b152      	cbz	r2, 800090c <__udivmoddi4+0x30>
 80008f6:	fa01 f302 	lsl.w	r3, r1, r2
 80008fa:	f1c2 0120 	rsb	r1, r2, #32
 80008fe:	fa20 f101 	lsr.w	r1, r0, r1
 8000902:	fa0c fc02 	lsl.w	ip, ip, r2
 8000906:	ea41 0e03 	orr.w	lr, r1, r3
 800090a:	4094      	lsls	r4, r2
 800090c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000910:	0c21      	lsrs	r1, r4, #16
 8000912:	fbbe f6f8 	udiv	r6, lr, r8
 8000916:	fa1f f78c 	uxth.w	r7, ip
 800091a:	fb08 e316 	mls	r3, r8, r6, lr
 800091e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000922:	fb06 f107 	mul.w	r1, r6, r7
 8000926:	4299      	cmp	r1, r3
 8000928:	d90a      	bls.n	8000940 <__udivmoddi4+0x64>
 800092a:	eb1c 0303 	adds.w	r3, ip, r3
 800092e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000932:	f080 811f 	bcs.w	8000b74 <__udivmoddi4+0x298>
 8000936:	4299      	cmp	r1, r3
 8000938:	f240 811c 	bls.w	8000b74 <__udivmoddi4+0x298>
 800093c:	3e02      	subs	r6, #2
 800093e:	4463      	add	r3, ip
 8000940:	1a5b      	subs	r3, r3, r1
 8000942:	b2a4      	uxth	r4, r4
 8000944:	fbb3 f0f8 	udiv	r0, r3, r8
 8000948:	fb08 3310 	mls	r3, r8, r0, r3
 800094c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000950:	fb00 f707 	mul.w	r7, r0, r7
 8000954:	42a7      	cmp	r7, r4
 8000956:	d90a      	bls.n	800096e <__udivmoddi4+0x92>
 8000958:	eb1c 0404 	adds.w	r4, ip, r4
 800095c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000960:	f080 810a 	bcs.w	8000b78 <__udivmoddi4+0x29c>
 8000964:	42a7      	cmp	r7, r4
 8000966:	f240 8107 	bls.w	8000b78 <__udivmoddi4+0x29c>
 800096a:	4464      	add	r4, ip
 800096c:	3802      	subs	r0, #2
 800096e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000972:	1be4      	subs	r4, r4, r7
 8000974:	2600      	movs	r6, #0
 8000976:	b11d      	cbz	r5, 8000980 <__udivmoddi4+0xa4>
 8000978:	40d4      	lsrs	r4, r2
 800097a:	2300      	movs	r3, #0
 800097c:	e9c5 4300 	strd	r4, r3, [r5]
 8000980:	4631      	mov	r1, r6
 8000982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000986:	428b      	cmp	r3, r1
 8000988:	d909      	bls.n	800099e <__udivmoddi4+0xc2>
 800098a:	2d00      	cmp	r5, #0
 800098c:	f000 80ef 	beq.w	8000b6e <__udivmoddi4+0x292>
 8000990:	2600      	movs	r6, #0
 8000992:	e9c5 0100 	strd	r0, r1, [r5]
 8000996:	4630      	mov	r0, r6
 8000998:	4631      	mov	r1, r6
 800099a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800099e:	fab3 f683 	clz	r6, r3
 80009a2:	2e00      	cmp	r6, #0
 80009a4:	d14a      	bne.n	8000a3c <__udivmoddi4+0x160>
 80009a6:	428b      	cmp	r3, r1
 80009a8:	d302      	bcc.n	80009b0 <__udivmoddi4+0xd4>
 80009aa:	4282      	cmp	r2, r0
 80009ac:	f200 80f9 	bhi.w	8000ba2 <__udivmoddi4+0x2c6>
 80009b0:	1a84      	subs	r4, r0, r2
 80009b2:	eb61 0303 	sbc.w	r3, r1, r3
 80009b6:	2001      	movs	r0, #1
 80009b8:	469e      	mov	lr, r3
 80009ba:	2d00      	cmp	r5, #0
 80009bc:	d0e0      	beq.n	8000980 <__udivmoddi4+0xa4>
 80009be:	e9c5 4e00 	strd	r4, lr, [r5]
 80009c2:	e7dd      	b.n	8000980 <__udivmoddi4+0xa4>
 80009c4:	b902      	cbnz	r2, 80009c8 <__udivmoddi4+0xec>
 80009c6:	deff      	udf	#255	; 0xff
 80009c8:	fab2 f282 	clz	r2, r2
 80009cc:	2a00      	cmp	r2, #0
 80009ce:	f040 8092 	bne.w	8000af6 <__udivmoddi4+0x21a>
 80009d2:	eba1 010c 	sub.w	r1, r1, ip
 80009d6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009da:	fa1f fe8c 	uxth.w	lr, ip
 80009de:	2601      	movs	r6, #1
 80009e0:	0c20      	lsrs	r0, r4, #16
 80009e2:	fbb1 f3f7 	udiv	r3, r1, r7
 80009e6:	fb07 1113 	mls	r1, r7, r3, r1
 80009ea:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009ee:	fb0e f003 	mul.w	r0, lr, r3
 80009f2:	4288      	cmp	r0, r1
 80009f4:	d908      	bls.n	8000a08 <__udivmoddi4+0x12c>
 80009f6:	eb1c 0101 	adds.w	r1, ip, r1
 80009fa:	f103 38ff 	add.w	r8, r3, #4294967295
 80009fe:	d202      	bcs.n	8000a06 <__udivmoddi4+0x12a>
 8000a00:	4288      	cmp	r0, r1
 8000a02:	f200 80cb 	bhi.w	8000b9c <__udivmoddi4+0x2c0>
 8000a06:	4643      	mov	r3, r8
 8000a08:	1a09      	subs	r1, r1, r0
 8000a0a:	b2a4      	uxth	r4, r4
 8000a0c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a10:	fb07 1110 	mls	r1, r7, r0, r1
 8000a14:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a18:	fb0e fe00 	mul.w	lr, lr, r0
 8000a1c:	45a6      	cmp	lr, r4
 8000a1e:	d908      	bls.n	8000a32 <__udivmoddi4+0x156>
 8000a20:	eb1c 0404 	adds.w	r4, ip, r4
 8000a24:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a28:	d202      	bcs.n	8000a30 <__udivmoddi4+0x154>
 8000a2a:	45a6      	cmp	lr, r4
 8000a2c:	f200 80bb 	bhi.w	8000ba6 <__udivmoddi4+0x2ca>
 8000a30:	4608      	mov	r0, r1
 8000a32:	eba4 040e 	sub.w	r4, r4, lr
 8000a36:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a3a:	e79c      	b.n	8000976 <__udivmoddi4+0x9a>
 8000a3c:	f1c6 0720 	rsb	r7, r6, #32
 8000a40:	40b3      	lsls	r3, r6
 8000a42:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a46:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a4a:	fa20 f407 	lsr.w	r4, r0, r7
 8000a4e:	fa01 f306 	lsl.w	r3, r1, r6
 8000a52:	431c      	orrs	r4, r3
 8000a54:	40f9      	lsrs	r1, r7
 8000a56:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a5a:	fa00 f306 	lsl.w	r3, r0, r6
 8000a5e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a62:	0c20      	lsrs	r0, r4, #16
 8000a64:	fa1f fe8c 	uxth.w	lr, ip
 8000a68:	fb09 1118 	mls	r1, r9, r8, r1
 8000a6c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a70:	fb08 f00e 	mul.w	r0, r8, lr
 8000a74:	4288      	cmp	r0, r1
 8000a76:	fa02 f206 	lsl.w	r2, r2, r6
 8000a7a:	d90b      	bls.n	8000a94 <__udivmoddi4+0x1b8>
 8000a7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a80:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a84:	f080 8088 	bcs.w	8000b98 <__udivmoddi4+0x2bc>
 8000a88:	4288      	cmp	r0, r1
 8000a8a:	f240 8085 	bls.w	8000b98 <__udivmoddi4+0x2bc>
 8000a8e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a92:	4461      	add	r1, ip
 8000a94:	1a09      	subs	r1, r1, r0
 8000a96:	b2a4      	uxth	r4, r4
 8000a98:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a9c:	fb09 1110 	mls	r1, r9, r0, r1
 8000aa0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000aa4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000aa8:	458e      	cmp	lr, r1
 8000aaa:	d908      	bls.n	8000abe <__udivmoddi4+0x1e2>
 8000aac:	eb1c 0101 	adds.w	r1, ip, r1
 8000ab0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ab4:	d26c      	bcs.n	8000b90 <__udivmoddi4+0x2b4>
 8000ab6:	458e      	cmp	lr, r1
 8000ab8:	d96a      	bls.n	8000b90 <__udivmoddi4+0x2b4>
 8000aba:	3802      	subs	r0, #2
 8000abc:	4461      	add	r1, ip
 8000abe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ac2:	fba0 9402 	umull	r9, r4, r0, r2
 8000ac6:	eba1 010e 	sub.w	r1, r1, lr
 8000aca:	42a1      	cmp	r1, r4
 8000acc:	46c8      	mov	r8, r9
 8000ace:	46a6      	mov	lr, r4
 8000ad0:	d356      	bcc.n	8000b80 <__udivmoddi4+0x2a4>
 8000ad2:	d053      	beq.n	8000b7c <__udivmoddi4+0x2a0>
 8000ad4:	b15d      	cbz	r5, 8000aee <__udivmoddi4+0x212>
 8000ad6:	ebb3 0208 	subs.w	r2, r3, r8
 8000ada:	eb61 010e 	sbc.w	r1, r1, lr
 8000ade:	fa01 f707 	lsl.w	r7, r1, r7
 8000ae2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ae6:	40f1      	lsrs	r1, r6
 8000ae8:	431f      	orrs	r7, r3
 8000aea:	e9c5 7100 	strd	r7, r1, [r5]
 8000aee:	2600      	movs	r6, #0
 8000af0:	4631      	mov	r1, r6
 8000af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af6:	f1c2 0320 	rsb	r3, r2, #32
 8000afa:	40d8      	lsrs	r0, r3
 8000afc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b00:	fa21 f303 	lsr.w	r3, r1, r3
 8000b04:	4091      	lsls	r1, r2
 8000b06:	4301      	orrs	r1, r0
 8000b08:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b0c:	fa1f fe8c 	uxth.w	lr, ip
 8000b10:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b14:	fb07 3610 	mls	r6, r7, r0, r3
 8000b18:	0c0b      	lsrs	r3, r1, #16
 8000b1a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b1e:	fb00 f60e 	mul.w	r6, r0, lr
 8000b22:	429e      	cmp	r6, r3
 8000b24:	fa04 f402 	lsl.w	r4, r4, r2
 8000b28:	d908      	bls.n	8000b3c <__udivmoddi4+0x260>
 8000b2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b2e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b32:	d22f      	bcs.n	8000b94 <__udivmoddi4+0x2b8>
 8000b34:	429e      	cmp	r6, r3
 8000b36:	d92d      	bls.n	8000b94 <__udivmoddi4+0x2b8>
 8000b38:	3802      	subs	r0, #2
 8000b3a:	4463      	add	r3, ip
 8000b3c:	1b9b      	subs	r3, r3, r6
 8000b3e:	b289      	uxth	r1, r1
 8000b40:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b44:	fb07 3316 	mls	r3, r7, r6, r3
 8000b48:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b4c:	fb06 f30e 	mul.w	r3, r6, lr
 8000b50:	428b      	cmp	r3, r1
 8000b52:	d908      	bls.n	8000b66 <__udivmoddi4+0x28a>
 8000b54:	eb1c 0101 	adds.w	r1, ip, r1
 8000b58:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b5c:	d216      	bcs.n	8000b8c <__udivmoddi4+0x2b0>
 8000b5e:	428b      	cmp	r3, r1
 8000b60:	d914      	bls.n	8000b8c <__udivmoddi4+0x2b0>
 8000b62:	3e02      	subs	r6, #2
 8000b64:	4461      	add	r1, ip
 8000b66:	1ac9      	subs	r1, r1, r3
 8000b68:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b6c:	e738      	b.n	80009e0 <__udivmoddi4+0x104>
 8000b6e:	462e      	mov	r6, r5
 8000b70:	4628      	mov	r0, r5
 8000b72:	e705      	b.n	8000980 <__udivmoddi4+0xa4>
 8000b74:	4606      	mov	r6, r0
 8000b76:	e6e3      	b.n	8000940 <__udivmoddi4+0x64>
 8000b78:	4618      	mov	r0, r3
 8000b7a:	e6f8      	b.n	800096e <__udivmoddi4+0x92>
 8000b7c:	454b      	cmp	r3, r9
 8000b7e:	d2a9      	bcs.n	8000ad4 <__udivmoddi4+0x1f8>
 8000b80:	ebb9 0802 	subs.w	r8, r9, r2
 8000b84:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b88:	3801      	subs	r0, #1
 8000b8a:	e7a3      	b.n	8000ad4 <__udivmoddi4+0x1f8>
 8000b8c:	4646      	mov	r6, r8
 8000b8e:	e7ea      	b.n	8000b66 <__udivmoddi4+0x28a>
 8000b90:	4620      	mov	r0, r4
 8000b92:	e794      	b.n	8000abe <__udivmoddi4+0x1e2>
 8000b94:	4640      	mov	r0, r8
 8000b96:	e7d1      	b.n	8000b3c <__udivmoddi4+0x260>
 8000b98:	46d0      	mov	r8, sl
 8000b9a:	e77b      	b.n	8000a94 <__udivmoddi4+0x1b8>
 8000b9c:	3b02      	subs	r3, #2
 8000b9e:	4461      	add	r1, ip
 8000ba0:	e732      	b.n	8000a08 <__udivmoddi4+0x12c>
 8000ba2:	4630      	mov	r0, r6
 8000ba4:	e709      	b.n	80009ba <__udivmoddi4+0xde>
 8000ba6:	4464      	add	r4, ip
 8000ba8:	3802      	subs	r0, #2
 8000baa:	e742      	b.n	8000a32 <__udivmoddi4+0x156>

08000bac <__aeabi_idiv0>:
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <Init_LCD>:
static void iopins_ini();
static void ili9488_showArray_wo_coordinates(uint16_t *data, uint32_t count);
/*----------------------------------------------Public  functions-----------------------------------------------------*/
//initialize LCD
void Init_LCD()
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
	interrupt_initialize_priorities();
 8000bb4:	f000 f982 	bl	8000ebc <interrupt_initialize_priorities>
	iopins_ini();
 8000bb8:	f000 f988 	bl	8000ecc <iopins_ini>
	initialize_ili9488();
 8000bbc:	f000 fb8e 	bl	80012dc <initialize_ili9488>
	LCD_backlight_set(100);
 8000bc0:	2064      	movs	r0, #100	; 0x64
 8000bc2:	f000 f8d1 	bl	8000d68 <LCD_backlight_set>
}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
	...

08000bcc <LCD_fillRect>:
//Draw filled rectangle
void LCD_fillRect(uint16_t x1, uint16_t y1, uint16_t w, uint16_t h, uint16_t color)
{
 8000bcc:	b590      	push	{r4, r7, lr}
 8000bce:	b085      	sub	sp, #20
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4604      	mov	r4, r0
 8000bd4:	4608      	mov	r0, r1
 8000bd6:	4611      	mov	r1, r2
 8000bd8:	461a      	mov	r2, r3
 8000bda:	4623      	mov	r3, r4
 8000bdc:	80fb      	strh	r3, [r7, #6]
 8000bde:	4603      	mov	r3, r0
 8000be0:	80bb      	strh	r3, [r7, #4]
 8000be2:	460b      	mov	r3, r1
 8000be4:	807b      	strh	r3, [r7, #2]
 8000be6:	4613      	mov	r3, r2
 8000be8:	803b      	strh	r3, [r7, #0]
	uint32_t count = w * h;
 8000bea:	887b      	ldrh	r3, [r7, #2]
 8000bec:	883a      	ldrh	r2, [r7, #0]
 8000bee:	fb02 f303 	mul.w	r3, r2, r3
 8000bf2:	60bb      	str	r3, [r7, #8]
	LCD_set_coordinates(x1, y1, (uint16_t) (x1 + w - 1), (uint16_t) (y1 + h - 1));
 8000bf4:	88fa      	ldrh	r2, [r7, #6]
 8000bf6:	887b      	ldrh	r3, [r7, #2]
 8000bf8:	4413      	add	r3, r2
 8000bfa:	b29b      	uxth	r3, r3
 8000bfc:	3b01      	subs	r3, #1
 8000bfe:	b29c      	uxth	r4, r3
 8000c00:	88ba      	ldrh	r2, [r7, #4]
 8000c02:	883b      	ldrh	r3, [r7, #0]
 8000c04:	4413      	add	r3, r2
 8000c06:	b29b      	uxth	r3, r3
 8000c08:	3b01      	subs	r3, #1
 8000c0a:	b29b      	uxth	r3, r3
 8000c0c:	88b9      	ldrh	r1, [r7, #4]
 8000c0e:	88f8      	ldrh	r0, [r7, #6]
 8000c10:	4622      	mov	r2, r4
 8000c12:	f000 f82f 	bl	8000c74 <LCD_set_coordinates>

	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_RESET);
 8000c16:	2200      	movs	r2, #0
 8000c18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c1c:	4814      	ldr	r0, [pc, #80]	; (8000c70 <LCD_fillRect+0xa4>)
 8000c1e:	f006 fa77 	bl	8007110 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_RESET);
 8000c22:	2200      	movs	r2, #0
 8000c24:	2180      	movs	r1, #128	; 0x80
 8000c26:	4812      	ldr	r0, [pc, #72]	; (8000c70 <LCD_fillRect+0xa4>)
 8000c28:	f006 fa72 	bl	8007110 <HAL_GPIO_WritePin>
	TFT_REG=0x002C;
 8000c2c:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000c30:	222c      	movs	r2, #44	; 0x2c
 8000c32:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_SET);
 8000c34:	2201      	movs	r2, #1
 8000c36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c3a:	480d      	ldr	r0, [pc, #52]	; (8000c70 <LCD_fillRect+0xa4>)
 8000c3c:	f006 fa68 	bl	8007110 <HAL_GPIO_WritePin>

	for(unsigned int i=0; i<count; i++)
 8000c40:	2300      	movs	r3, #0
 8000c42:	60fb      	str	r3, [r7, #12]
 8000c44:	e006      	b.n	8000c54 <LCD_fillRect+0x88>
	{
		TFT_REG=color;
 8000c46:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000c4a:	8c3b      	ldrh	r3, [r7, #32]
 8000c4c:	8013      	strh	r3, [r2, #0]
	for(unsigned int i=0; i<count; i++)
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	3301      	adds	r3, #1
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	68fa      	ldr	r2, [r7, #12]
 8000c56:	68bb      	ldr	r3, [r7, #8]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	d3f4      	bcc.n	8000c46 <LCD_fillRect+0x7a>
	}

	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_SET);
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	2180      	movs	r1, #128	; 0x80
 8000c60:	4803      	ldr	r0, [pc, #12]	; (8000c70 <LCD_fillRect+0xa4>)
 8000c62:	f006 fa55 	bl	8007110 <HAL_GPIO_WritePin>
}
 8000c66:	bf00      	nop
 8000c68:	3714      	adds	r7, #20
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd90      	pop	{r4, r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40020c00 	.word	0x40020c00

08000c74 <LCD_set_coordinates>:
//Set coordinates for LCD IC
void LCD_set_coordinates(uint16_t x1,uint16_t y1, uint16_t x2, uint16_t y2)
{
 8000c74:	b590      	push	{r4, r7, lr}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4604      	mov	r4, r0
 8000c7c:	4608      	mov	r0, r1
 8000c7e:	4611      	mov	r1, r2
 8000c80:	461a      	mov	r2, r3
 8000c82:	4623      	mov	r3, r4
 8000c84:	80fb      	strh	r3, [r7, #6]
 8000c86:	4603      	mov	r3, r0
 8000c88:	80bb      	strh	r3, [r7, #4]
 8000c8a:	460b      	mov	r3, r1
 8000c8c:	807b      	strh	r3, [r7, #2]
 8000c8e:	4613      	mov	r3, r2
 8000c90:	803b      	strh	r3, [r7, #0]
	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_RESET);
 8000c92:	2200      	movs	r2, #0
 8000c94:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c98:	4832      	ldr	r0, [pc, #200]	; (8000d64 <LCD_set_coordinates+0xf0>)
 8000c9a:	f006 fa39 	bl	8007110 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_RESET);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2180      	movs	r1, #128	; 0x80
 8000ca2:	4830      	ldr	r0, [pc, #192]	; (8000d64 <LCD_set_coordinates+0xf0>)
 8000ca4:	f006 fa34 	bl	8007110 <HAL_GPIO_WritePin>
	TFT_REG=0x002A;
 8000ca8:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000cac:	222a      	movs	r2, #42	; 0x2a
 8000cae:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_SET);
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cb6:	482b      	ldr	r0, [pc, #172]	; (8000d64 <LCD_set_coordinates+0xf0>)
 8000cb8:	f006 fa2a 	bl	8007110 <HAL_GPIO_WritePin>
	TFT_REG=x1>>8;
 8000cbc:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000cc0:	88fb      	ldrh	r3, [r7, #6]
 8000cc2:	0a1b      	lsrs	r3, r3, #8
 8000cc4:	b29b      	uxth	r3, r3
 8000cc6:	8013      	strh	r3, [r2, #0]
	TFT_REG=x1&0xFF;
 8000cc8:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000ccc:	88fa      	ldrh	r2, [r7, #6]
 8000cce:	b2d2      	uxtb	r2, r2
 8000cd0:	b292      	uxth	r2, r2
 8000cd2:	801a      	strh	r2, [r3, #0]
	TFT_REG=x2>>8;
 8000cd4:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000cd8:	887b      	ldrh	r3, [r7, #2]
 8000cda:	0a1b      	lsrs	r3, r3, #8
 8000cdc:	b29b      	uxth	r3, r3
 8000cde:	8013      	strh	r3, [r2, #0]
	TFT_REG=x2&0xFF;
 8000ce0:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000ce4:	887a      	ldrh	r2, [r7, #2]
 8000ce6:	b2d2      	uxtb	r2, r2
 8000ce8:	b292      	uxth	r2, r2
 8000cea:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_SET);
 8000cec:	2201      	movs	r2, #1
 8000cee:	2180      	movs	r1, #128	; 0x80
 8000cf0:	481c      	ldr	r0, [pc, #112]	; (8000d64 <LCD_set_coordinates+0xf0>)
 8000cf2:	f006 fa0d 	bl	8007110 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_RESET);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cfc:	4819      	ldr	r0, [pc, #100]	; (8000d64 <LCD_set_coordinates+0xf0>)
 8000cfe:	f006 fa07 	bl	8007110 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_RESET);
 8000d02:	2200      	movs	r2, #0
 8000d04:	2180      	movs	r1, #128	; 0x80
 8000d06:	4817      	ldr	r0, [pc, #92]	; (8000d64 <LCD_set_coordinates+0xf0>)
 8000d08:	f006 fa02 	bl	8007110 <HAL_GPIO_WritePin>
	TFT_REG=0x002B;
 8000d0c:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000d10:	222b      	movs	r2, #43	; 0x2b
 8000d12:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_SET);
 8000d14:	2201      	movs	r2, #1
 8000d16:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d1a:	4812      	ldr	r0, [pc, #72]	; (8000d64 <LCD_set_coordinates+0xf0>)
 8000d1c:	f006 f9f8 	bl	8007110 <HAL_GPIO_WritePin>
	TFT_REG=y1>>8;
 8000d20:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000d24:	88bb      	ldrh	r3, [r7, #4]
 8000d26:	0a1b      	lsrs	r3, r3, #8
 8000d28:	b29b      	uxth	r3, r3
 8000d2a:	8013      	strh	r3, [r2, #0]
	TFT_REG=y1&0xFF;
 8000d2c:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000d30:	88ba      	ldrh	r2, [r7, #4]
 8000d32:	b2d2      	uxtb	r2, r2
 8000d34:	b292      	uxth	r2, r2
 8000d36:	801a      	strh	r2, [r3, #0]
	TFT_REG=y2>>8;
 8000d38:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000d3c:	883b      	ldrh	r3, [r7, #0]
 8000d3e:	0a1b      	lsrs	r3, r3, #8
 8000d40:	b29b      	uxth	r3, r3
 8000d42:	8013      	strh	r3, [r2, #0]
	TFT_REG=y2&0xFF;
 8000d44:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000d48:	883a      	ldrh	r2, [r7, #0]
 8000d4a:	b2d2      	uxtb	r2, r2
 8000d4c:	b292      	uxth	r2, r2
 8000d4e:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_SET);
 8000d50:	2201      	movs	r2, #1
 8000d52:	2180      	movs	r1, #128	; 0x80
 8000d54:	4803      	ldr	r0, [pc, #12]	; (8000d64 <LCD_set_coordinates+0xf0>)
 8000d56:	f006 f9db 	bl	8007110 <HAL_GPIO_WritePin>
}
 8000d5a:	bf00      	nop
 8000d5c:	370c      	adds	r7, #12
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd90      	pop	{r4, r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40020c00 	.word	0x40020c00

08000d68 <LCD_backlight_set>:
//Set PWM duty cycle for LCD back light
void LCD_backlight_set(uint16_t pwm)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b0a6      	sub	sp, #152	; 0x98
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	80fb      	strh	r3, [r7, #6]

	if(pwm>=100)
 8000d72:	88fb      	ldrh	r3, [r7, #6]
 8000d74:	2b63      	cmp	r3, #99	; 0x63
 8000d76:	d902      	bls.n	8000d7e <LCD_backlight_set+0x16>
	{
		pwm=100;
 8000d78:	2364      	movs	r3, #100	; 0x64
 8000d7a:	80fb      	strh	r3, [r7, #6]
 8000d7c:	e004      	b.n	8000d88 <LCD_backlight_set+0x20>
	}else if(pwm <= 0)
 8000d7e:	88fb      	ldrh	r3, [r7, #6]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d101      	bne.n	8000d88 <LCD_backlight_set+0x20>
	{
		pwm = 0;
 8000d84:	2300      	movs	r3, #0
 8000d86:	80fb      	strh	r3, [r7, #6]
	}

	pwm=(unsigned int)((MAX_PWM_PULSE * pwm)/100);
 8000d88:	88fa      	ldrh	r2, [r7, #6]
 8000d8a:	4613      	mov	r3, r2
 8000d8c:	041b      	lsls	r3, r3, #16
 8000d8e:	1a9b      	subs	r3, r3, r2
 8000d90:	4a48      	ldr	r2, [pc, #288]	; (8000eb4 <LCD_backlight_set+0x14c>)
 8000d92:	fb82 1203 	smull	r1, r2, r2, r3
 8000d96:	1152      	asrs	r2, r2, #5
 8000d98:	17db      	asrs	r3, r3, #31
 8000d9a:	1ad3      	subs	r3, r2, r3
 8000d9c:	80fb      	strh	r3, [r7, #6]

	/* Common settings */
      TIM_HandleTypeDef htim1;
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d9e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	605a      	str	r2, [r3, #4]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 8000da8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]
 8000db8:	615a      	str	r2, [r3, #20]
 8000dba:	619a      	str	r2, [r3, #24]
	  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000dbc:	f107 030c 	add.w	r3, r7, #12
 8000dc0:	2220      	movs	r2, #32
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f009 ff31 	bl	800ac2c <memset>

	  htim1.Instance = TIM1;
 8000dca:	4b3b      	ldr	r3, [pc, #236]	; (8000eb8 <LCD_backlight_set+0x150>)
 8000dcc:	653b      	str	r3, [r7, #80]	; 0x50
	  htim1.Init.Prescaler = 0;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	657b      	str	r3, [r7, #84]	; 0x54
	  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	65bb      	str	r3, [r7, #88]	; 0x58
	  htim1.Init.Period = 65535;
 8000dd6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dda:	65fb      	str	r3, [r7, #92]	; 0x5c
	  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	663b      	str	r3, [r7, #96]	; 0x60
	  htim1.Init.RepetitionCounter = 0;
 8000de0:	2300      	movs	r3, #0
 8000de2:	667b      	str	r3, [r7, #100]	; 0x64
	  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000de4:	2300      	movs	r3, #0
 8000de6:	66bb      	str	r3, [r7, #104]	; 0x68
	  HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_4);
 8000de8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000dec:	210c      	movs	r1, #12
 8000dee:	4618      	mov	r0, r3
 8000df0:	f008 f97e 	bl	80090f0 <HAL_TIM_PWM_Stop>
	  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000df4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f008 f862 	bl	8008ec2 <HAL_TIM_PWM_Init>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <LCD_backlight_set+0xa0>
	  {
	    Error_Handler();
 8000e04:	f004 f81c 	bl	8004e40 <Error_Handler>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	64bb      	str	r3, [r7, #72]	; 0x48
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	64fb      	str	r3, [r7, #76]	; 0x4c
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e10:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000e14:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000e18:	4611      	mov	r1, r2
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f008 fd10 	bl	8009840 <HAL_TIMEx_MasterConfigSynchronization>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <LCD_backlight_set+0xc2>
	  {
	    Error_Handler();
 8000e26:	f004 f80b 	bl	8004e40 <Error_Handler>
	  }
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e2a:	2360      	movs	r3, #96	; 0x60
 8000e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
	  sConfigOC.Pulse = pwm;
 8000e2e:	88fb      	ldrh	r3, [r7, #6]
 8000e30:	633b      	str	r3, [r7, #48]	; 0x30
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e32:	2300      	movs	r3, #0
 8000e34:	637b      	str	r3, [r7, #52]	; 0x34
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e36:	2300      	movs	r3, #0
 8000e38:	63fb      	str	r3, [r7, #60]	; 0x3c
	  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	643b      	str	r3, [r7, #64]	; 0x40
	  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	647b      	str	r3, [r7, #68]	; 0x44
	  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e42:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8000e46:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000e4a:	220c      	movs	r2, #12
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f008 f9bf 	bl	80091d0 <HAL_TIM_PWM_ConfigChannel>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <LCD_backlight_set+0xf4>
	  {
	    Error_Handler();
 8000e58:	f003 fff2 	bl	8004e40 <Error_Handler>
	  }
	  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	60fb      	str	r3, [r7, #12]
	  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e60:	2300      	movs	r3, #0
 8000e62:	613b      	str	r3, [r7, #16]
	  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e64:	2300      	movs	r3, #0
 8000e66:	617b      	str	r3, [r7, #20]
	  sBreakDeadTimeConfig.DeadTime = 0;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	61bb      	str	r3, [r7, #24]
	  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	61fb      	str	r3, [r7, #28]
	  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e74:	623b      	str	r3, [r7, #32]
	  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e76:	2300      	movs	r3, #0
 8000e78:	62bb      	str	r3, [r7, #40]	; 0x28
	  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e7a:	f107 020c 	add.w	r2, r7, #12
 8000e7e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000e82:	4611      	mov	r1, r2
 8000e84:	4618      	mov	r0, r3
 8000e86:	f008 fd57 	bl	8009938 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <LCD_backlight_set+0x12c>
	  {
	    Error_Handler();
 8000e90:	f003 ffd6 	bl	8004e40 <Error_Handler>
	  }

	  HAL_TIM_MspPostInit(&htim1);
 8000e94:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f005 f877 	bl	8005f8c <HAL_TIM_MspPostInit>
	  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_4);
 8000e9e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000ea2:	210c      	movs	r1, #12
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f008 f85b 	bl	8008f60 <HAL_TIM_PWM_Start>


}
 8000eaa:	bf00      	nop
 8000eac:	3798      	adds	r7, #152	; 0x98
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	51eb851f 	.word	0x51eb851f
 8000eb8:	40010000 	.word	0x40010000

08000ebc <interrupt_initialize_priorities>:
	ili9488_showArray_wo_coordinates(color,1);
}

/*----------------------------------------------Private functions-----------------------------------------------------*/
static void interrupt_initialize_priorities()
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4); //4 bits for preemp priority 0 bit for sub priority
 8000ec0:	2003      	movs	r0, #3
 8000ec2:	f005 feb5 	bl	8006c30 <HAL_NVIC_SetPriorityGrouping>
}
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
	...

08000ecc <iopins_ini>:
static void iopins_ini()
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b098      	sub	sp, #96	; 0x60
 8000ed0:	af00      	add	r7, sp, #0

	 __GPIOC_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	64bb      	str	r3, [r7, #72]	; 0x48
 8000ed6:	4bac      	ldr	r3, [pc, #688]	; (8001188 <iopins_ini+0x2bc>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	4aab      	ldr	r2, [pc, #684]	; (8001188 <iopins_ini+0x2bc>)
 8000edc:	f043 0304 	orr.w	r3, r3, #4
 8000ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee2:	4ba9      	ldr	r3, [pc, #676]	; (8001188 <iopins_ini+0x2bc>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	f003 0304 	and.w	r3, r3, #4
 8000eea:	64bb      	str	r3, [r7, #72]	; 0x48
 8000eec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
	 __GPIOD_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	647b      	str	r3, [r7, #68]	; 0x44
 8000ef2:	4ba5      	ldr	r3, [pc, #660]	; (8001188 <iopins_ini+0x2bc>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	4aa4      	ldr	r2, [pc, #656]	; (8001188 <iopins_ini+0x2bc>)
 8000ef8:	f043 0308 	orr.w	r3, r3, #8
 8000efc:	6313      	str	r3, [r2, #48]	; 0x30
 8000efe:	4ba2      	ldr	r3, [pc, #648]	; (8001188 <iopins_ini+0x2bc>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	f003 0308 	and.w	r3, r3, #8
 8000f06:	647b      	str	r3, [r7, #68]	; 0x44
 8000f08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
	 __GPIOA_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	643b      	str	r3, [r7, #64]	; 0x40
 8000f0e:	4b9e      	ldr	r3, [pc, #632]	; (8001188 <iopins_ini+0x2bc>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	4a9d      	ldr	r2, [pc, #628]	; (8001188 <iopins_ini+0x2bc>)
 8000f14:	f043 0301 	orr.w	r3, r3, #1
 8000f18:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1a:	4b9b      	ldr	r3, [pc, #620]	; (8001188 <iopins_ini+0x2bc>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	f003 0301 	and.w	r3, r3, #1
 8000f22:	643b      	str	r3, [r7, #64]	; 0x40
 8000f24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
	 __GPIOB_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f2a:	4b97      	ldr	r3, [pc, #604]	; (8001188 <iopins_ini+0x2bc>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	4a96      	ldr	r2, [pc, #600]	; (8001188 <iopins_ini+0x2bc>)
 8000f30:	f043 0302 	orr.w	r3, r3, #2
 8000f34:	6313      	str	r3, [r2, #48]	; 0x30
 8000f36:	4b94      	ldr	r3, [pc, #592]	; (8001188 <iopins_ini+0x2bc>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	f003 0302 	and.w	r3, r3, #2
 8000f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
	GPIO_InitTypeDef GPIO_InitStruct;

    BUZZER_PORT_RCC();
 8000f42:	2300      	movs	r3, #0
 8000f44:	63bb      	str	r3, [r7, #56]	; 0x38
 8000f46:	4b90      	ldr	r3, [pc, #576]	; (8001188 <iopins_ini+0x2bc>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	4a8f      	ldr	r2, [pc, #572]	; (8001188 <iopins_ini+0x2bc>)
 8000f4c:	f043 0308 	orr.w	r3, r3, #8
 8000f50:	6313      	str	r3, [r2, #48]	; 0x30
 8000f52:	4b8d      	ldr	r3, [pc, #564]	; (8001188 <iopins_ini+0x2bc>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	f003 0308 	and.w	r3, r3, #8
 8000f5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8000f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Pin = BUZZER;
 8000f5e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f62:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f64:	2301      	movs	r3, #1
 8000f66:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	65bb      	str	r3, [r7, #88]	; 0x58
	HAL_GPIO_Init(BUZZER_PORT, &GPIO_InitStruct);
 8000f6c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f70:	4619      	mov	r1, r3
 8000f72:	4886      	ldr	r0, [pc, #536]	; (800118c <iopins_ini+0x2c0>)
 8000f74:	f005 ff30 	bl	8006dd8 <HAL_GPIO_Init>

    RS485DIR_PORT_RCC();
 8000f78:	2300      	movs	r3, #0
 8000f7a:	637b      	str	r3, [r7, #52]	; 0x34
 8000f7c:	4b82      	ldr	r3, [pc, #520]	; (8001188 <iopins_ini+0x2bc>)
 8000f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f80:	4a81      	ldr	r2, [pc, #516]	; (8001188 <iopins_ini+0x2bc>)
 8000f82:	f043 0301 	orr.w	r3, r3, #1
 8000f86:	6313      	str	r3, [r2, #48]	; 0x30
 8000f88:	4b7f      	ldr	r3, [pc, #508]	; (8001188 <iopins_ini+0x2bc>)
 8000f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8c:	f003 0301 	and.w	r3, r3, #1
 8000f90:	637b      	str	r3, [r7, #52]	; 0x34
 8000f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Pin = RS485DIR;
 8000f94:	2302      	movs	r3, #2
 8000f96:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	65bb      	str	r3, [r7, #88]	; 0x58
	HAL_GPIO_Init(RS485DIR_PORT, &GPIO_InitStruct);
 8000fa0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	487a      	ldr	r0, [pc, #488]	; (8001190 <iopins_ini+0x2c4>)
 8000fa8:	f005 ff16 	bl	8006dd8 <HAL_GPIO_Init>

    LCD_CS_PORT_RCC();
 8000fac:	2300      	movs	r3, #0
 8000fae:	633b      	str	r3, [r7, #48]	; 0x30
 8000fb0:	4b75      	ldr	r3, [pc, #468]	; (8001188 <iopins_ini+0x2bc>)
 8000fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb4:	4a74      	ldr	r2, [pc, #464]	; (8001188 <iopins_ini+0x2bc>)
 8000fb6:	f043 0308 	orr.w	r3, r3, #8
 8000fba:	6313      	str	r3, [r2, #48]	; 0x30
 8000fbc:	4b72      	ldr	r3, [pc, #456]	; (8001188 <iopins_ini+0x2bc>)
 8000fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc0:	f003 0308 	and.w	r3, r3, #8
 8000fc4:	633b      	str	r3, [r7, #48]	; 0x30
 8000fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pin = LCD_CS;
 8000fc8:	2380      	movs	r3, #128	; 0x80
 8000fca:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(LCD_CS_PORT, &GPIO_InitStruct);
 8000fd4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000fd8:	4619      	mov	r1, r3
 8000fda:	486c      	ldr	r0, [pc, #432]	; (800118c <iopins_ini+0x2c0>)
 8000fdc:	f005 fefc 	bl	8006dd8 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(LCD_CS_PORT,LCD_CS,GPIO_PIN_SET);
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	2180      	movs	r1, #128	; 0x80
 8000fe4:	4869      	ldr	r0, [pc, #420]	; (800118c <iopins_ini+0x2c0>)
 8000fe6:	f006 f893 	bl	8007110 <HAL_GPIO_WritePin>

    LCD_RES_PORT_RCC();
 8000fea:	2300      	movs	r3, #0
 8000fec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000fee:	4b66      	ldr	r3, [pc, #408]	; (8001188 <iopins_ini+0x2bc>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	4a65      	ldr	r2, [pc, #404]	; (8001188 <iopins_ini+0x2bc>)
 8000ff4:	f043 0301 	orr.w	r3, r3, #1
 8000ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffa:	4b63      	ldr	r3, [pc, #396]	; (8001188 <iopins_ini+0x2bc>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	f003 0301 	and.w	r3, r3, #1
 8001002:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Pin = LCD_RES;
 8001006:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800100a:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800100c:	2301      	movs	r3, #1
 800100e:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed =GPIO_SPEED_FREQ_VERY_HIGH;
 8001010:	2303      	movs	r3, #3
 8001012:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(LCD_RES_PORT, &GPIO_InitStruct);
 8001014:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001018:	4619      	mov	r1, r3
 800101a:	485d      	ldr	r0, [pc, #372]	; (8001190 <iopins_ini+0x2c4>)
 800101c:	f005 fedc 	bl	8006dd8 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(LCD_RES_PORT,LCD_RES,GPIO_PIN_RESET);
 8001020:	2200      	movs	r2, #0
 8001022:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001026:	485a      	ldr	r0, [pc, #360]	; (8001190 <iopins_ini+0x2c4>)
 8001028:	f006 f872 	bl	8007110 <HAL_GPIO_WritePin>
	delay_ms(50);
 800102c:	2032      	movs	r0, #50	; 0x32
 800102e:	f000 f9cf 	bl	80013d0 <delay_ms>
	HAL_GPIO_WritePin(LCD_RES_PORT,LCD_RES,GPIO_PIN_SET);
 8001032:	2201      	movs	r2, #1
 8001034:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001038:	4855      	ldr	r0, [pc, #340]	; (8001190 <iopins_ini+0x2c4>)
 800103a:	f006 f869 	bl	8007110 <HAL_GPIO_WritePin>

    LCD_DCX_PORT_RCC();
 800103e:	2300      	movs	r3, #0
 8001040:	62bb      	str	r3, [r7, #40]	; 0x28
 8001042:	4b51      	ldr	r3, [pc, #324]	; (8001188 <iopins_ini+0x2bc>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	4a50      	ldr	r2, [pc, #320]	; (8001188 <iopins_ini+0x2bc>)
 8001048:	f043 0308 	orr.w	r3, r3, #8
 800104c:	6313      	str	r3, [r2, #48]	; 0x30
 800104e:	4b4e      	ldr	r3, [pc, #312]	; (8001188 <iopins_ini+0x2bc>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	f003 0308 	and.w	r3, r3, #8
 8001056:	62bb      	str	r3, [r7, #40]	; 0x28
 8001058:	6abb      	ldr	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pin = LCD_DCX;
 800105a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800105e:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001060:	2301      	movs	r3, #1
 8001062:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed =GPIO_SPEED_FREQ_VERY_HIGH;
 8001064:	2303      	movs	r3, #3
 8001066:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(LCD_DCX_PORT, &GPIO_InitStruct);
 8001068:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800106c:	4619      	mov	r1, r3
 800106e:	4847      	ldr	r0, [pc, #284]	; (800118c <iopins_ini+0x2c0>)
 8001070:	f005 feb2 	bl	8006dd8 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(LCD_DCX_PORT,LCD_DCX,GPIO_PIN_SET);
 8001074:	2201      	movs	r2, #1
 8001076:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800107a:	4844      	ldr	r0, [pc, #272]	; (800118c <iopins_ini+0x2c0>)
 800107c:	f006 f848 	bl	8007110 <HAL_GPIO_WritePin>

    FLASH_CS_PORT_RCC();
 8001080:	2300      	movs	r3, #0
 8001082:	627b      	str	r3, [r7, #36]	; 0x24
 8001084:	4b40      	ldr	r3, [pc, #256]	; (8001188 <iopins_ini+0x2bc>)
 8001086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001088:	4a3f      	ldr	r2, [pc, #252]	; (8001188 <iopins_ini+0x2bc>)
 800108a:	f043 0301 	orr.w	r3, r3, #1
 800108e:	6313      	str	r3, [r2, #48]	; 0x30
 8001090:	4b3d      	ldr	r3, [pc, #244]	; (8001188 <iopins_ini+0x2bc>)
 8001092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001094:	f003 0301 	and.w	r3, r3, #1
 8001098:	627b      	str	r3, [r7, #36]	; 0x24
 800109a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Pin = FLASH_CS;
 800109c:	2310      	movs	r3, #16
 800109e:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a0:	2301      	movs	r3, #1
 80010a2:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed =GPIO_SPEED_FREQ_VERY_HIGH;
 80010a4:	2303      	movs	r3, #3
 80010a6:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(FLASH_CS_PORT, &GPIO_InitStruct);
 80010a8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80010ac:	4619      	mov	r1, r3
 80010ae:	4838      	ldr	r0, [pc, #224]	; (8001190 <iopins_ini+0x2c4>)
 80010b0:	f005 fe92 	bl	8006dd8 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(FLASH_CS_PORT,FLASH_CS,GPIO_PIN_SET);
 80010b4:	2201      	movs	r2, #1
 80010b6:	2110      	movs	r1, #16
 80010b8:	4835      	ldr	r0, [pc, #212]	; (8001190 <iopins_ini+0x2c4>)
 80010ba:	f006 f829 	bl	8007110 <HAL_GPIO_WritePin>

    FLASH_WP_PORT_RCC();
 80010be:	2300      	movs	r3, #0
 80010c0:	623b      	str	r3, [r7, #32]
 80010c2:	4b31      	ldr	r3, [pc, #196]	; (8001188 <iopins_ini+0x2bc>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	4a30      	ldr	r2, [pc, #192]	; (8001188 <iopins_ini+0x2bc>)
 80010c8:	f043 0304 	orr.w	r3, r3, #4
 80010cc:	6313      	str	r3, [r2, #48]	; 0x30
 80010ce:	4b2e      	ldr	r3, [pc, #184]	; (8001188 <iopins_ini+0x2bc>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	f003 0304 	and.w	r3, r3, #4
 80010d6:	623b      	str	r3, [r7, #32]
 80010d8:	6a3b      	ldr	r3, [r7, #32]
	GPIO_InitStruct.Pin = FLASH_WP;
 80010da:	2310      	movs	r3, #16
 80010dc:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010de:	2301      	movs	r3, #1
 80010e0:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e2:	2300      	movs	r3, #0
 80010e4:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(FLASH_WP_PORT, &GPIO_InitStruct);
 80010e6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80010ea:	4619      	mov	r1, r3
 80010ec:	4829      	ldr	r0, [pc, #164]	; (8001194 <iopins_ini+0x2c8>)
 80010ee:	f005 fe73 	bl	8006dd8 <HAL_GPIO_Init>
	 HAL_GPIO_WritePin(FLASH_WP_PORT,FLASH_WP,GPIO_PIN_RESET);
 80010f2:	2200      	movs	r2, #0
 80010f4:	2110      	movs	r1, #16
 80010f6:	4827      	ldr	r0, [pc, #156]	; (8001194 <iopins_ini+0x2c8>)
 80010f8:	f006 f80a 	bl	8007110 <HAL_GPIO_WritePin>

    FRAM_CS_PORT_RCC();
 80010fc:	2300      	movs	r3, #0
 80010fe:	61fb      	str	r3, [r7, #28]
 8001100:	4b21      	ldr	r3, [pc, #132]	; (8001188 <iopins_ini+0x2bc>)
 8001102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001104:	4a20      	ldr	r2, [pc, #128]	; (8001188 <iopins_ini+0x2bc>)
 8001106:	f043 0302 	orr.w	r3, r3, #2
 800110a:	6313      	str	r3, [r2, #48]	; 0x30
 800110c:	4b1e      	ldr	r3, [pc, #120]	; (8001188 <iopins_ini+0x2bc>)
 800110e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001110:	f003 0302 	and.w	r3, r3, #2
 8001114:	61fb      	str	r3, [r7, #28]
 8001116:	69fb      	ldr	r3, [r7, #28]
	GPIO_InitStruct.Pin = FRAM_CS;
 8001118:	f44f 7300 	mov.w	r3, #512	; 0x200
 800111c:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800111e:	2301      	movs	r3, #1
 8001120:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed =GPIO_SPEED_FREQ_VERY_HIGH;
 8001122:	2303      	movs	r3, #3
 8001124:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(FRAM_CS_PORT, &GPIO_InitStruct);
 8001126:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800112a:	4619      	mov	r1, r3
 800112c:	481a      	ldr	r0, [pc, #104]	; (8001198 <iopins_ini+0x2cc>)
 800112e:	f005 fe53 	bl	8006dd8 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(FRAM_CS_PORT,FRAM_CS,GPIO_PIN_SET);
 8001132:	2201      	movs	r2, #1
 8001134:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001138:	4817      	ldr	r0, [pc, #92]	; (8001198 <iopins_ini+0x2cc>)
 800113a:	f005 ffe9 	bl	8007110 <HAL_GPIO_WritePin>

    FRAM_HOLD_PORT_RCC();
 800113e:	2300      	movs	r3, #0
 8001140:	61bb      	str	r3, [r7, #24]
 8001142:	4b11      	ldr	r3, [pc, #68]	; (8001188 <iopins_ini+0x2bc>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	4a10      	ldr	r2, [pc, #64]	; (8001188 <iopins_ini+0x2bc>)
 8001148:	f043 0304 	orr.w	r3, r3, #4
 800114c:	6313      	str	r3, [r2, #48]	; 0x30
 800114e:	4b0e      	ldr	r3, [pc, #56]	; (8001188 <iopins_ini+0x2bc>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	f003 0304 	and.w	r3, r3, #4
 8001156:	61bb      	str	r3, [r7, #24]
 8001158:	69bb      	ldr	r3, [r7, #24]
	GPIO_InitStruct.Pin = FRAM_HOLD;
 800115a:	2302      	movs	r3, #2
 800115c:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800115e:	2301      	movs	r3, #1
 8001160:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed =GPIO_SPEED_FREQ_VERY_HIGH;
 8001162:	2303      	movs	r3, #3
 8001164:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(FRAM_HOLD_PORT, &GPIO_InitStruct);
 8001166:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800116a:	4619      	mov	r1, r3
 800116c:	4809      	ldr	r0, [pc, #36]	; (8001194 <iopins_ini+0x2c8>)
 800116e:	f005 fe33 	bl	8006dd8 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(FRAM_HOLD_PORT,FRAM_HOLD,GPIO_PIN_SET);
 8001172:	2201      	movs	r2, #1
 8001174:	2102      	movs	r1, #2
 8001176:	4807      	ldr	r0, [pc, #28]	; (8001194 <iopins_ini+0x2c8>)
 8001178:	f005 ffca 	bl	8007110 <HAL_GPIO_WritePin>

    FRAM_WP_PORT_RCC();
 800117c:	2300      	movs	r3, #0
 800117e:	617b      	str	r3, [r7, #20]
 8001180:	4b01      	ldr	r3, [pc, #4]	; (8001188 <iopins_ini+0x2bc>)
 8001182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001184:	e00a      	b.n	800119c <iopins_ini+0x2d0>
 8001186:	bf00      	nop
 8001188:	40023800 	.word	0x40023800
 800118c:	40020c00 	.word	0x40020c00
 8001190:	40020000 	.word	0x40020000
 8001194:	40020800 	.word	0x40020800
 8001198:	40020400 	.word	0x40020400
 800119c:	4a4b      	ldr	r2, [pc, #300]	; (80012cc <iopins_ini+0x400>)
 800119e:	f043 0304 	orr.w	r3, r3, #4
 80011a2:	6313      	str	r3, [r2, #48]	; 0x30
 80011a4:	4b49      	ldr	r3, [pc, #292]	; (80012cc <iopins_ini+0x400>)
 80011a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a8:	f003 0304 	and.w	r3, r3, #4
 80011ac:	617b      	str	r3, [r7, #20]
 80011ae:	697b      	ldr	r3, [r7, #20]
	GPIO_InitStruct.Pin = FRAM_WP;
 80011b0:	2301      	movs	r3, #1
 80011b2:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b4:	2301      	movs	r3, #1
 80011b6:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b8:	2300      	movs	r3, #0
 80011ba:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(FRAM_WP_PORT, &GPIO_InitStruct);
 80011bc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80011c0:	4619      	mov	r1, r3
 80011c2:	4843      	ldr	r0, [pc, #268]	; (80012d0 <iopins_ini+0x404>)
 80011c4:	f005 fe08 	bl	8006dd8 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(FRAM_WP_PORT,FRAM_WP,GPIO_PIN_SET);
 80011c8:	2201      	movs	r2, #1
 80011ca:	2101      	movs	r1, #1
 80011cc:	4840      	ldr	r0, [pc, #256]	; (80012d0 <iopins_ini+0x404>)
 80011ce:	f005 ff9f 	bl	8007110 <HAL_GPIO_WritePin>


    LED_DBG_PORT_RCC();
 80011d2:	2300      	movs	r3, #0
 80011d4:	613b      	str	r3, [r7, #16]
 80011d6:	4b3d      	ldr	r3, [pc, #244]	; (80012cc <iopins_ini+0x400>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	4a3c      	ldr	r2, [pc, #240]	; (80012cc <iopins_ini+0x400>)
 80011dc:	f043 0302 	orr.w	r3, r3, #2
 80011e0:	6313      	str	r3, [r2, #48]	; 0x30
 80011e2:	4b3a      	ldr	r3, [pc, #232]	; (80012cc <iopins_ini+0x400>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	f003 0302 	and.w	r3, r3, #2
 80011ea:	613b      	str	r3, [r7, #16]
 80011ec:	693b      	ldr	r3, [r7, #16]
	GPIO_InitStruct.Pin = LED_DBG_1;
 80011ee:	2308      	movs	r3, #8
 80011f0:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f2:	2301      	movs	r3, #1
 80011f4:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f6:	2300      	movs	r3, #0
 80011f8:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(LED_DBG_PORT, &GPIO_InitStruct);
 80011fa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80011fe:	4619      	mov	r1, r3
 8001200:	4834      	ldr	r0, [pc, #208]	; (80012d4 <iopins_ini+0x408>)
 8001202:	f005 fde9 	bl	8006dd8 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(LED_DBG_PORT,LED_DBG_1,GPIO_PIN_SET);
 8001206:	2201      	movs	r2, #1
 8001208:	2108      	movs	r1, #8
 800120a:	4832      	ldr	r0, [pc, #200]	; (80012d4 <iopins_ini+0x408>)
 800120c:	f005 ff80 	bl	8007110 <HAL_GPIO_WritePin>


    BUTTON_0_PORT_RCC();
 8001210:	2300      	movs	r3, #0
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	4b2d      	ldr	r3, [pc, #180]	; (80012cc <iopins_ini+0x400>)
 8001216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001218:	4a2c      	ldr	r2, [pc, #176]	; (80012cc <iopins_ini+0x400>)
 800121a:	f043 0301 	orr.w	r3, r3, #1
 800121e:	6313      	str	r3, [r2, #48]	; 0x30
 8001220:	4b2a      	ldr	r3, [pc, #168]	; (80012cc <iopins_ini+0x400>)
 8001222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001224:	f003 0301 	and.w	r3, r3, #1
 8001228:	60fb      	str	r3, [r7, #12]
 800122a:	68fb      	ldr	r3, [r7, #12]
	GPIO_InitStruct.Pin = BUTTON_0;
 800122c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001230:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001232:	2300      	movs	r3, #0
 8001234:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Pull= GPIO_NOPULL;
 8001236:	2300      	movs	r3, #0
 8001238:	657b      	str	r3, [r7, #84]	; 0x54
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123a:	2300      	movs	r3, #0
 800123c:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(BUTTON_0_PORT, &GPIO_InitStruct);
 800123e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001242:	4619      	mov	r1, r3
 8001244:	4824      	ldr	r0, [pc, #144]	; (80012d8 <iopins_ini+0x40c>)
 8001246:	f005 fdc7 	bl	8006dd8 <HAL_GPIO_Init>

    BUTTON_1_PORT_RCC();
 800124a:	2300      	movs	r3, #0
 800124c:	60bb      	str	r3, [r7, #8]
 800124e:	4b1f      	ldr	r3, [pc, #124]	; (80012cc <iopins_ini+0x400>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	4a1e      	ldr	r2, [pc, #120]	; (80012cc <iopins_ini+0x400>)
 8001254:	f043 0304 	orr.w	r3, r3, #4
 8001258:	6313      	str	r3, [r2, #48]	; 0x30
 800125a:	4b1c      	ldr	r3, [pc, #112]	; (80012cc <iopins_ini+0x400>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	f003 0304 	and.w	r3, r3, #4
 8001262:	60bb      	str	r3, [r7, #8]
 8001264:	68bb      	ldr	r3, [r7, #8]
	GPIO_InitStruct.Pin = BUTTON_1;
 8001266:	f44f 7300 	mov.w	r3, #512	; 0x200
 800126a:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800126c:	2300      	movs	r3, #0
 800126e:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Pull= GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	657b      	str	r3, [r7, #84]	; 0x54
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001274:	2300      	movs	r3, #0
 8001276:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(BUTTON_1_PORT, &GPIO_InitStruct);
 8001278:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800127c:	4619      	mov	r1, r3
 800127e:	4814      	ldr	r0, [pc, #80]	; (80012d0 <iopins_ini+0x404>)
 8001280:	f005 fdaa 	bl	8006dd8 <HAL_GPIO_Init>


    TOUCH_RESET_PORT_RCC();
 8001284:	2300      	movs	r3, #0
 8001286:	607b      	str	r3, [r7, #4]
 8001288:	4b10      	ldr	r3, [pc, #64]	; (80012cc <iopins_ini+0x400>)
 800128a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128c:	4a0f      	ldr	r2, [pc, #60]	; (80012cc <iopins_ini+0x400>)
 800128e:	f043 0302 	orr.w	r3, r3, #2
 8001292:	6313      	str	r3, [r2, #48]	; 0x30
 8001294:	4b0d      	ldr	r3, [pc, #52]	; (80012cc <iopins_ini+0x400>)
 8001296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001298:	f003 0302 	and.w	r3, r3, #2
 800129c:	607b      	str	r3, [r7, #4]
 800129e:	687b      	ldr	r3, [r7, #4]
	GPIO_InitStruct.Pin = TOUCH_RESET;
 80012a0:	2320      	movs	r3, #32
 80012a2:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a4:	2301      	movs	r3, #1
 80012a6:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a8:	2300      	movs	r3, #0
 80012aa:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(TOUCH_RESET_PORT, &GPIO_InitStruct);
 80012ac:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80012b0:	4619      	mov	r1, r3
 80012b2:	4808      	ldr	r0, [pc, #32]	; (80012d4 <iopins_ini+0x408>)
 80012b4:	f005 fd90 	bl	8006dd8 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(TOUCH_RESET_PORT,TOUCH_RESET,GPIO_PIN_SET);
 80012b8:	2201      	movs	r2, #1
 80012ba:	2120      	movs	r1, #32
 80012bc:	4805      	ldr	r0, [pc, #20]	; (80012d4 <iopins_ini+0x408>)
 80012be:	f005 ff27 	bl	8007110 <HAL_GPIO_WritePin>
}
 80012c2:	bf00      	nop
 80012c4:	3760      	adds	r7, #96	; 0x60
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	40023800 	.word	0x40023800
 80012d0:	40020800 	.word	0x40020800
 80012d4:	40020400 	.word	0x40020400
 80012d8:	40020000 	.word	0x40020000

080012dc <initialize_ili9488>:
static void initialize_ili9488()
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af02      	add	r7, sp, #8
	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_RESET);
 80012e2:	2200      	movs	r2, #0
 80012e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012e8:	4838      	ldr	r0, [pc, #224]	; (80013cc <initialize_ili9488+0xf0>)
 80012ea:	f005 ff11 	bl	8007110 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_RESET);
 80012ee:	2200      	movs	r2, #0
 80012f0:	2180      	movs	r1, #128	; 0x80
 80012f2:	4836      	ldr	r0, [pc, #216]	; (80013cc <initialize_ili9488+0xf0>)
 80012f4:	f005 ff0c 	bl	8007110 <HAL_GPIO_WritePin>
	TFT_REG=0x0011;
 80012f8:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80012fc:	2211      	movs	r2, #17
 80012fe:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_SET);
 8001300:	2201      	movs	r2, #1
 8001302:	2180      	movs	r1, #128	; 0x80
 8001304:	4831      	ldr	r0, [pc, #196]	; (80013cc <initialize_ili9488+0xf0>)
 8001306:	f005 ff03 	bl	8007110 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_RESET);
 800130a:	2200      	movs	r2, #0
 800130c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001310:	482e      	ldr	r0, [pc, #184]	; (80013cc <initialize_ili9488+0xf0>)
 8001312:	f005 fefd 	bl	8007110 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS, GPIO_PIN_RESET);
 8001316:	2200      	movs	r2, #0
 8001318:	2180      	movs	r1, #128	; 0x80
 800131a:	482c      	ldr	r0, [pc, #176]	; (80013cc <initialize_ili9488+0xf0>)
 800131c:	f005 fef8 	bl	8007110 <HAL_GPIO_WritePin>
	TFT_REG=0x0029;
 8001320:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8001324:	2229      	movs	r2, #41	; 0x29
 8001326:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS, GPIO_PIN_SET);
 8001328:	2201      	movs	r2, #1
 800132a:	2180      	movs	r1, #128	; 0x80
 800132c:	4827      	ldr	r0, [pc, #156]	; (80013cc <initialize_ili9488+0xf0>)
 800132e:	f005 feef 	bl	8007110 <HAL_GPIO_WritePin>


	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_RESET);
 8001332:	2200      	movs	r2, #0
 8001334:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001338:	4824      	ldr	r0, [pc, #144]	; (80013cc <initialize_ili9488+0xf0>)
 800133a:	f005 fee9 	bl	8007110 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_RESET);
 800133e:	2200      	movs	r2, #0
 8001340:	2180      	movs	r1, #128	; 0x80
 8001342:	4822      	ldr	r0, [pc, #136]	; (80013cc <initialize_ili9488+0xf0>)
 8001344:	f005 fee4 	bl	8007110 <HAL_GPIO_WritePin>
	TFT_REG=0x003A;
 8001348:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800134c:	223a      	movs	r2, #58	; 0x3a
 800134e:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_SET);
 8001350:	2201      	movs	r2, #1
 8001352:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001356:	481d      	ldr	r0, [pc, #116]	; (80013cc <initialize_ili9488+0xf0>)
 8001358:	f005 feda 	bl	8007110 <HAL_GPIO_WritePin>
	TFT_REG=0x0055;
 800135c:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8001360:	2255      	movs	r2, #85	; 0x55
 8001362:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS, GPIO_PIN_RESET);
 8001364:	2200      	movs	r2, #0
 8001366:	2180      	movs	r1, #128	; 0x80
 8001368:	4818      	ldr	r0, [pc, #96]	; (80013cc <initialize_ili9488+0xf0>)
 800136a:	f005 fed1 	bl	8007110 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_RESET);
 800136e:	2200      	movs	r2, #0
 8001370:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001374:	4815      	ldr	r0, [pc, #84]	; (80013cc <initialize_ili9488+0xf0>)
 8001376:	f005 fecb 	bl	8007110 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_RESET);
 800137a:	2200      	movs	r2, #0
 800137c:	2180      	movs	r1, #128	; 0x80
 800137e:	4813      	ldr	r0, [pc, #76]	; (80013cc <initialize_ili9488+0xf0>)
 8001380:	f005 fec6 	bl	8007110 <HAL_GPIO_WritePin>
	TFT_REG=0x0036;
 8001384:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8001388:	2236      	movs	r2, #54	; 0x36
 800138a:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_SET);
 800138c:	2201      	movs	r2, #1
 800138e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001392:	480e      	ldr	r0, [pc, #56]	; (80013cc <initialize_ili9488+0xf0>)
 8001394:	f005 febc 	bl	8007110 <HAL_GPIO_WritePin>
	TFT_REG=0x00E8;
 8001398:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800139c:	22e8      	movs	r2, #232	; 0xe8
 800139e:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_RESET);
 80013a0:	2200      	movs	r2, #0
 80013a2:	2180      	movs	r1, #128	; 0x80
 80013a4:	4809      	ldr	r0, [pc, #36]	; (80013cc <initialize_ili9488+0xf0>)
 80013a6:	f005 feb3 	bl	8007110 <HAL_GPIO_WritePin>

	delay_ms(100);
 80013aa:	2064      	movs	r0, #100	; 0x64
 80013ac:	f000 f810 	bl	80013d0 <delay_ms>
	LCD_fillRect(0,0,LCD_PIXEL_WIDTH,LCD_PIXEL_HEIGHT,ORANGE);
 80013b0:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80013b4:	9300      	str	r3, [sp, #0]
 80013b6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80013ba:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80013be:	2100      	movs	r1, #0
 80013c0:	2000      	movs	r0, #0
 80013c2:	f7ff fc03 	bl	8000bcc <LCD_fillRect>
}
 80013c6:	bf00      	nop
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40020c00 	.word	0x40020c00

080013d0 <delay_ms>:
	{
		TFT_REG=data[i];
	}
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_SET);
}
static void delay_ms(__IO uint32_t nCount1) {
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
	__IO uint32_t nCount=nCount1*23666;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f645 4272 	movw	r2, #23666	; 0x5c72
 80013de:	fb02 f303 	mul.w	r3, r2, r3
 80013e2:	60fb      	str	r3, [r7, #12]
	while(nCount--) {
 80013e4:	bf00      	nop
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	1e5a      	subs	r2, r3, #1
 80013ea:	60fa      	str	r2, [r7, #12]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d1fa      	bne.n	80013e6 <delay_ms+0x16>
  }
}
 80013f0:	bf00      	nop
 80013f2:	bf00      	nop
 80013f4:	3714      	adds	r7, #20
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
	...

08001400 <set_page>:
	static long linear_interpolation(long x, long in_min, long in_max, long out_min, long out_max);
#endif

/*----------------------------------------------Public function-----------------------------------------------------*/
// Initialize touch screen
void set_page(uint8_t page){active_page = page;}
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	71fb      	strb	r3, [r7, #7]
 800140a:	4a04      	ldr	r2, [pc, #16]	; (800141c <set_page+0x1c>)
 800140c:	79fb      	ldrb	r3, [r7, #7]
 800140e:	7013      	strb	r3, [r2, #0]
 8001410:	bf00      	nop
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr
 800141c:	20000138 	.word	0x20000138

08001420 <touch_init>:
void set_layer(uint8_t layer){active_layer = layer;}
void touch_get_conf(struct generalConfig conf){gConf = conf;};
void touch_init(I2C_HandleTypeDef def)
{
 8001420:	b084      	sub	sp, #16
 8001422:	b580      	push	{r7, lr}
 8001424:	b084      	sub	sp, #16
 8001426:	af00      	add	r7, sp, #0
 8001428:	f107 0c18 	add.w	ip, r7, #24
 800142c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	hi2c1_touch = def;
 8001430:	4b72      	ldr	r3, [pc, #456]	; (80015fc <touch_init+0x1dc>)
 8001432:	4618      	mov	r0, r3
 8001434:	f107 0318 	add.w	r3, r7, #24
 8001438:	2254      	movs	r2, #84	; 0x54
 800143a:	4619      	mov	r1, r3
 800143c:	f009 fbe8 	bl	800ac10 <memcpy>
	touch_write_register(0x0E,0xC000);
 8001440:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001444:	200e      	movs	r0, #14
 8001446:	f000 fce3 	bl	8001e10 <touch_write_register>
	touch_write_control(0x80);
 800144a:	2080      	movs	r0, #128	; 0x80
 800144c:	f000 fcbc 	bl	8001dc8 <touch_write_control>
	for(int p = 0;p <MAX_NUM_PAGES; p++)
 8001450:	2300      	movs	r3, #0
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	e0a6      	b.n	80015a4 <touch_init+0x184>
	{
		for(int l = 0;l <MAX_NUM_LAYERS; l++)
 8001456:	2300      	movs	r3, #0
 8001458:	60bb      	str	r3, [r7, #8]
 800145a:	e09c      	b.n	8001596 <touch_init+0x176>
		{

			for(int i = 0;i <MAX_NUM_ELEMENTS; i++)
 800145c:	2300      	movs	r3, #0
 800145e:	607b      	str	r3, [r7, #4]
 8001460:	e092      	b.n	8001588 <touch_init+0x168>
			{
				touch_elements_register[p][l][i].x = 0;
 8001462:	4867      	ldr	r0, [pc, #412]	; (8001600 <touch_init+0x1e0>)
 8001464:	68ba      	ldr	r2, [r7, #8]
 8001466:	68f9      	ldr	r1, [r7, #12]
 8001468:	4613      	mov	r3, r2
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	4413      	add	r3, r2
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	2264      	movs	r2, #100	; 0x64
 8001472:	fb01 f202 	mul.w	r2, r1, r2
 8001476:	441a      	add	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	4413      	add	r3, r2
 800147c:	015b      	lsls	r3, r3, #5
 800147e:	4403      	add	r3, r0
 8001480:	330e      	adds	r3, #14
 8001482:	2200      	movs	r2, #0
 8001484:	801a      	strh	r2, [r3, #0]
				touch_elements_register[p][l][i].x1 = 0;
 8001486:	485e      	ldr	r0, [pc, #376]	; (8001600 <touch_init+0x1e0>)
 8001488:	68ba      	ldr	r2, [r7, #8]
 800148a:	68f9      	ldr	r1, [r7, #12]
 800148c:	4613      	mov	r3, r2
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	4413      	add	r3, r2
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	2264      	movs	r2, #100	; 0x64
 8001496:	fb01 f202 	mul.w	r2, r1, r2
 800149a:	441a      	add	r2, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	4413      	add	r3, r2
 80014a0:	015b      	lsls	r3, r3, #5
 80014a2:	4403      	add	r3, r0
 80014a4:	3312      	adds	r3, #18
 80014a6:	2200      	movs	r2, #0
 80014a8:	801a      	strh	r2, [r3, #0]
				touch_elements_register[p][l][i].y = 0;
 80014aa:	4855      	ldr	r0, [pc, #340]	; (8001600 <touch_init+0x1e0>)
 80014ac:	68ba      	ldr	r2, [r7, #8]
 80014ae:	68f9      	ldr	r1, [r7, #12]
 80014b0:	4613      	mov	r3, r2
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	4413      	add	r3, r2
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	2264      	movs	r2, #100	; 0x64
 80014ba:	fb01 f202 	mul.w	r2, r1, r2
 80014be:	441a      	add	r2, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	4413      	add	r3, r2
 80014c4:	015b      	lsls	r3, r3, #5
 80014c6:	4403      	add	r3, r0
 80014c8:	3310      	adds	r3, #16
 80014ca:	2200      	movs	r2, #0
 80014cc:	801a      	strh	r2, [r3, #0]
				touch_elements_register[p][l][i].y1 = 0;
 80014ce:	484c      	ldr	r0, [pc, #304]	; (8001600 <touch_init+0x1e0>)
 80014d0:	68ba      	ldr	r2, [r7, #8]
 80014d2:	68f9      	ldr	r1, [r7, #12]
 80014d4:	4613      	mov	r3, r2
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	4413      	add	r3, r2
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	2264      	movs	r2, #100	; 0x64
 80014de:	fb01 f202 	mul.w	r2, r1, r2
 80014e2:	441a      	add	r2, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	4413      	add	r3, r2
 80014e8:	015b      	lsls	r3, r3, #5
 80014ea:	4403      	add	r3, r0
 80014ec:	3314      	adds	r3, #20
 80014ee:	2200      	movs	r2, #0
 80014f0:	801a      	strh	r2, [r3, #0]
				touch_elements_register[p][l][i].element_type = 0;
 80014f2:	4843      	ldr	r0, [pc, #268]	; (8001600 <touch_init+0x1e0>)
 80014f4:	68ba      	ldr	r2, [r7, #8]
 80014f6:	68f9      	ldr	r1, [r7, #12]
 80014f8:	4613      	mov	r3, r2
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	4413      	add	r3, r2
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	2264      	movs	r2, #100	; 0x64
 8001502:	fb01 f202 	mul.w	r2, r1, r2
 8001506:	441a      	add	r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	4413      	add	r3, r2
 800150c:	015b      	lsls	r3, r3, #5
 800150e:	4403      	add	r3, r0
 8001510:	3316      	adds	r3, #22
 8001512:	2200      	movs	r2, #0
 8001514:	701a      	strb	r2, [r3, #0]
				touch_elements_register[p][l][i].isAlive = 0;
 8001516:	483a      	ldr	r0, [pc, #232]	; (8001600 <touch_init+0x1e0>)
 8001518:	68ba      	ldr	r2, [r7, #8]
 800151a:	68f9      	ldr	r1, [r7, #12]
 800151c:	4613      	mov	r3, r2
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	4413      	add	r3, r2
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	2264      	movs	r2, #100	; 0x64
 8001526:	fb01 f202 	mul.w	r2, r1, r2
 800152a:	441a      	add	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	4413      	add	r3, r2
 8001530:	015b      	lsls	r3, r3, #5
 8001532:	4403      	add	r3, r0
 8001534:	3317      	adds	r3, #23
 8001536:	2200      	movs	r2, #0
 8001538:	701a      	strb	r2, [r3, #0]
				touch_elements_register[p][l][i].element_data_pointer = 0;
 800153a:	4831      	ldr	r0, [pc, #196]	; (8001600 <touch_init+0x1e0>)
 800153c:	68ba      	ldr	r2, [r7, #8]
 800153e:	68f9      	ldr	r1, [r7, #12]
 8001540:	4613      	mov	r3, r2
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	4413      	add	r3, r2
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	2264      	movs	r2, #100	; 0x64
 800154a:	fb01 f202 	mul.w	r2, r1, r2
 800154e:	441a      	add	r2, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	4413      	add	r3, r2
 8001554:	015b      	lsls	r3, r3, #5
 8001556:	4403      	add	r3, r0
 8001558:	3318      	adds	r3, #24
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
				touch_elements_register[p][l][i].ID = 0;
 800155e:	4828      	ldr	r0, [pc, #160]	; (8001600 <touch_init+0x1e0>)
 8001560:	68ba      	ldr	r2, [r7, #8]
 8001562:	68f9      	ldr	r1, [r7, #12]
 8001564:	4613      	mov	r3, r2
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	4413      	add	r3, r2
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	2264      	movs	r2, #100	; 0x64
 800156e:	fb01 f202 	mul.w	r2, r1, r2
 8001572:	441a      	add	r2, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	4413      	add	r3, r2
 8001578:	015b      	lsls	r3, r3, #5
 800157a:	4403      	add	r3, r0
 800157c:	331c      	adds	r3, #28
 800157e:	2200      	movs	r2, #0
 8001580:	801a      	strh	r2, [r3, #0]
			for(int i = 0;i <MAX_NUM_ELEMENTS; i++)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	3301      	adds	r3, #1
 8001586:	607b      	str	r3, [r7, #4]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2b13      	cmp	r3, #19
 800158c:	f77f af69 	ble.w	8001462 <touch_init+0x42>
		for(int l = 0;l <MAX_NUM_LAYERS; l++)
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	3301      	adds	r3, #1
 8001594:	60bb      	str	r3, [r7, #8]
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	2b04      	cmp	r3, #4
 800159a:	f77f af5f 	ble.w	800145c <touch_init+0x3c>
	for(int p = 0;p <MAX_NUM_PAGES; p++)
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	3301      	adds	r3, #1
 80015a2:	60fb      	str	r3, [r7, #12]
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	2b04      	cmp	r3, #4
 80015a8:	f77f af55 	ble.w	8001456 <touch_init+0x36>
			}
		}
	}
	pressed_element.x = 0;
 80015ac:	4b15      	ldr	r3, [pc, #84]	; (8001604 <touch_init+0x1e4>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	81da      	strh	r2, [r3, #14]
	pressed_element.x1 = 0;
 80015b2:	4b14      	ldr	r3, [pc, #80]	; (8001604 <touch_init+0x1e4>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	825a      	strh	r2, [r3, #18]
	pressed_element.y = 0;
 80015b8:	4b12      	ldr	r3, [pc, #72]	; (8001604 <touch_init+0x1e4>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	821a      	strh	r2, [r3, #16]
	pressed_element.y1 = 0;
 80015be:	4b11      	ldr	r3, [pc, #68]	; (8001604 <touch_init+0x1e4>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	829a      	strh	r2, [r3, #20]
	pressed_element.element_type = 0;
 80015c4:	4b0f      	ldr	r3, [pc, #60]	; (8001604 <touch_init+0x1e4>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	759a      	strb	r2, [r3, #22]
	pressed_element.element_data_pointer = 0;
 80015ca:	4b0e      	ldr	r3, [pc, #56]	; (8001604 <touch_init+0x1e4>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	619a      	str	r2, [r3, #24]
	pressed_element.isAlive = 0;
 80015d0:	4b0c      	ldr	r3, [pc, #48]	; (8001604 <touch_init+0x1e4>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	75da      	strb	r2, [r3, #23]
	pressed_element.ID = 0;
 80015d6:	4b0b      	ldr	r3, [pc, #44]	; (8001604 <touch_init+0x1e4>)
 80015d8:	2200      	movs	r2, #0
 80015da:	839a      	strh	r2, [r3, #28]
	active_layer = 0;
 80015dc:	4b0a      	ldr	r3, [pc, #40]	; (8001608 <touch_init+0x1e8>)
 80015de:	2200      	movs	r2, #0
 80015e0:	701a      	strb	r2, [r3, #0]
	active_page = 0;
 80015e2:	4b0a      	ldr	r3, [pc, #40]	; (800160c <touch_init+0x1ec>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	701a      	strb	r2, [r3, #0]
	slider_last_percents = 0;
 80015e8:	4b09      	ldr	r3, [pc, #36]	; (8001610 <touch_init+0x1f0>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	701a      	strb	r2, [r3, #0]
}
 80015ee:	bf00      	nop
 80015f0:	3710      	adds	r7, #16
 80015f2:	46bd      	mov	sp, r7
 80015f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80015f8:	b004      	add	sp, #16
 80015fa:	4770      	bx	lr
 80015fc:	200000b4 	.word	0x200000b4
 8001600:	2000013c 	.word	0x2000013c
 8001604:	20000118 	.word	0x20000118
 8001608:	20000139 	.word	0x20000139
 800160c:	20000138 	.word	0x20000138
 8001610:	2000013a 	.word	0x2000013a

08001614 <touch_reset>:
// Reset touch screen IC module
void touch_reset()
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
 	HAL_GPIO_WritePin(TOUCH_RESET_PORT,TOUCH_RESET,GPIO_PIN_RESET);
 8001618:	2200      	movs	r2, #0
 800161a:	2120      	movs	r1, #32
 800161c:	4807      	ldr	r0, [pc, #28]	; (800163c <touch_reset+0x28>)
 800161e:	f005 fd77 	bl	8007110 <HAL_GPIO_WritePin>
 	delay_ms(10);
 8001622:	200a      	movs	r0, #10
 8001624:	f000 fd1e 	bl	8002064 <delay_ms>
 	HAL_GPIO_WritePin(TOUCH_RESET_PORT,TOUCH_RESET,GPIO_PIN_SET);
 8001628:	2201      	movs	r2, #1
 800162a:	2120      	movs	r1, #32
 800162c:	4803      	ldr	r0, [pc, #12]	; (800163c <touch_reset+0x28>)
 800162e:	f005 fd6f 	bl	8007110 <HAL_GPIO_WritePin>
 	delay_ms(50);
 8001632:	2032      	movs	r0, #50	; 0x32
 8001634:	f000 fd16 	bl	8002064 <delay_ms>
}
 8001638:	bf00      	nop
 800163a:	bd80      	pop	{r7, pc}
 800163c:	40020400 	.word	0x40020400

08001640 <touch_periodic_process>:
#endif
	return pressed;
}
// After each call identifies if the touch was pressed and if TRUEm then identify the element
void touch_periodic_process()
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0

	if(touch.pressed==1)
 8001644:	4b34      	ldr	r3, [pc, #208]	; (8001718 <touch_periodic_process+0xd8>)
 8001646:	891b      	ldrh	r3, [r3, #8]
 8001648:	2b01      	cmp	r3, #1
 800164a:	d162      	bne.n	8001712 <touch_periodic_process+0xd2>
	{
		touch.pressed=0;
 800164c:	4b32      	ldr	r3, [pc, #200]	; (8001718 <touch_periodic_process+0xd8>)
 800164e:	2200      	movs	r2, #0
 8001650:	811a      	strh	r2, [r3, #8]

		touch.x=touch_read(0x00);
 8001652:	2000      	movs	r0, #0
 8001654:	f000 fc14 	bl	8001e80 <touch_read>
 8001658:	4603      	mov	r3, r0
 800165a:	461a      	mov	r2, r3
 800165c:	4b2e      	ldr	r3, [pc, #184]	; (8001718 <touch_periodic_process+0xd8>)
 800165e:	801a      	strh	r2, [r3, #0]
		touch.x1=touch_read(0x01);
 8001660:	2001      	movs	r0, #1
 8001662:	f000 fc0d 	bl	8001e80 <touch_read>
 8001666:	4603      	mov	r3, r0
 8001668:	461a      	mov	r2, r3
 800166a:	4b2b      	ldr	r3, [pc, #172]	; (8001718 <touch_periodic_process+0xd8>)
 800166c:	809a      	strh	r2, [r3, #4]
		touch.y=touch_read(0x02);
 800166e:	2002      	movs	r0, #2
 8001670:	f000 fc06 	bl	8001e80 <touch_read>
 8001674:	4603      	mov	r3, r0
 8001676:	461a      	mov	r2, r3
 8001678:	4b27      	ldr	r3, [pc, #156]	; (8001718 <touch_periodic_process+0xd8>)
 800167a:	805a      	strh	r2, [r3, #2]
		touch.y1=touch_read(0x03);
 800167c:	2003      	movs	r0, #3
 800167e:	f000 fbff 	bl	8001e80 <touch_read>
 8001682:	4603      	mov	r3, r0
 8001684:	461a      	mov	r2, r3
 8001686:	4b24      	ldr	r3, [pc, #144]	; (8001718 <touch_periodic_process+0xd8>)
 8001688:	80da      	strh	r2, [r3, #6]
#if DEBUG_TOUCH == 1
		printf("TOUCH x %d\n\r", touch.x);
 800168a:	4b23      	ldr	r3, [pc, #140]	; (8001718 <touch_periodic_process+0xd8>)
 800168c:	881b      	ldrh	r3, [r3, #0]
 800168e:	4619      	mov	r1, r3
 8001690:	4822      	ldr	r0, [pc, #136]	; (800171c <touch_periodic_process+0xdc>)
 8001692:	f009 fad3 	bl	800ac3c <iprintf>
		printf("TOUCH x1 %d\n\r", touch.x1);
 8001696:	4b20      	ldr	r3, [pc, #128]	; (8001718 <touch_periodic_process+0xd8>)
 8001698:	889b      	ldrh	r3, [r3, #4]
 800169a:	4619      	mov	r1, r3
 800169c:	4820      	ldr	r0, [pc, #128]	; (8001720 <touch_periodic_process+0xe0>)
 800169e:	f009 facd 	bl	800ac3c <iprintf>
		printf("TOUCH y %d\n\r", touch.y);
 80016a2:	4b1d      	ldr	r3, [pc, #116]	; (8001718 <touch_periodic_process+0xd8>)
 80016a4:	885b      	ldrh	r3, [r3, #2]
 80016a6:	4619      	mov	r1, r3
 80016a8:	481e      	ldr	r0, [pc, #120]	; (8001724 <touch_periodic_process+0xe4>)
 80016aa:	f009 fac7 	bl	800ac3c <iprintf>
		printf("TOUCH y1 %d\n\r", touch.y1);
 80016ae:	4b1a      	ldr	r3, [pc, #104]	; (8001718 <touch_periodic_process+0xd8>)
 80016b0:	88db      	ldrh	r3, [r3, #6]
 80016b2:	4619      	mov	r1, r3
 80016b4:	481c      	ldr	r0, [pc, #112]	; (8001728 <touch_periodic_process+0xe8>)
 80016b6:	f009 fac1 	bl	800ac3c <iprintf>
#endif
		touch.y=touch.x1;
 80016ba:	4b17      	ldr	r3, [pc, #92]	; (8001718 <touch_periodic_process+0xd8>)
 80016bc:	889a      	ldrh	r2, [r3, #4]
 80016be:	4b16      	ldr	r3, [pc, #88]	; (8001718 <touch_periodic_process+0xd8>)
 80016c0:	805a      	strh	r2, [r3, #2]
		touch.x=1024-touch.y1;
 80016c2:	4b15      	ldr	r3, [pc, #84]	; (8001718 <touch_periodic_process+0xd8>)
 80016c4:	88db      	ldrh	r3, [r3, #6]
 80016c6:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	4b12      	ldr	r3, [pc, #72]	; (8001718 <touch_periodic_process+0xd8>)
 80016ce:	801a      	strh	r2, [r3, #0]
		//last_touch.y = touch.y;
		//last_touch.x = touch.x
#if DEBUG_TOUCH == 1
		printf("TOUCH Y reverted %d\n\r", touch.y);
 80016d0:	4b11      	ldr	r3, [pc, #68]	; (8001718 <touch_periodic_process+0xd8>)
 80016d2:	885b      	ldrh	r3, [r3, #2]
 80016d4:	4619      	mov	r1, r3
 80016d6:	4815      	ldr	r0, [pc, #84]	; (800172c <touch_periodic_process+0xec>)
 80016d8:	f009 fab0 	bl	800ac3c <iprintf>
		printf("TOUCH X reverted %d\n\r", touch.x);
 80016dc:	4b0e      	ldr	r3, [pc, #56]	; (8001718 <touch_periodic_process+0xd8>)
 80016de:	881b      	ldrh	r3, [r3, #0]
 80016e0:	4619      	mov	r1, r3
 80016e2:	4813      	ldr	r0, [pc, #76]	; (8001730 <touch_periodic_process+0xf0>)
 80016e4:	f009 faaa 	bl	800ac3c <iprintf>
#endif
		if(validate_touch_coordinates()==1)
 80016e8:	f000 fbfa 	bl	8001ee0 <validate_touch_coordinates>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d10c      	bne.n	800170c <touch_periodic_process+0xcc>
		{
#if DEBUG_TOUCH == 1
			printf("TOUCH = X: %d,Y: %d\n\r",touch.x,touch.y);
 80016f2:	4b09      	ldr	r3, [pc, #36]	; (8001718 <touch_periodic_process+0xd8>)
 80016f4:	881b      	ldrh	r3, [r3, #0]
 80016f6:	4619      	mov	r1, r3
 80016f8:	4b07      	ldr	r3, [pc, #28]	; (8001718 <touch_periodic_process+0xd8>)
 80016fa:	885b      	ldrh	r3, [r3, #2]
 80016fc:	461a      	mov	r2, r3
 80016fe:	480d      	ldr	r0, [pc, #52]	; (8001734 <touch_periodic_process+0xf4>)
 8001700:	f009 fa9c 	bl	800ac3c <iprintf>
#endif
			 touch_get_pressed_element(touch);
 8001704:	4b04      	ldr	r3, [pc, #16]	; (8001718 <touch_periodic_process+0xd8>)
 8001706:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001708:	f000 f816 	bl	8001738 <touch_get_pressed_element>
		}
		touch_write_control(0x80);
 800170c:	2080      	movs	r0, #128	; 0x80
 800170e:	f000 fb5b 	bl	8001dc8 <touch_write_control>
	}
}
 8001712:	bf00      	nop
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	20000108 	.word	0x20000108
 800171c:	0800c074 	.word	0x0800c074
 8001720:	0800c084 	.word	0x0800c084
 8001724:	0800c094 	.word	0x0800c094
 8001728:	0800c0a4 	.word	0x0800c0a4
 800172c:	0800c0b4 	.word	0x0800c0b4
 8001730:	0800c0cc 	.word	0x0800c0cc
 8001734:	0800c0e4 	.word	0x0800c0e4

08001738 <touch_get_pressed_element>:
// External interrupt callback function. Take an action when touchscreen was pressed
static void touch_get_pressed_element()
{
 8001738:	b590      	push	{r4, r7, lr}
 800173a:	b087      	sub	sp, #28
 800173c:	af02      	add	r7, sp, #8
	uint16_t x0,x1,y1,y0;
	for(int i = 0; i<MAX_NUM_ELEMENTS;i++)
 800173e:	2300      	movs	r3, #0
 8001740:	60fb      	str	r3, [r7, #12]
 8001742:	e0fa      	b.n	800193a <touch_get_pressed_element+0x202>
	{

		if((touch.x >= touch_elements_register[active_page][active_layer][i].x )
 8001744:	4b81      	ldr	r3, [pc, #516]	; (800194c <touch_get_pressed_element+0x214>)
 8001746:	881a      	ldrh	r2, [r3, #0]
 8001748:	4b81      	ldr	r3, [pc, #516]	; (8001950 <touch_get_pressed_element+0x218>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	461c      	mov	r4, r3
 800174e:	4b81      	ldr	r3, [pc, #516]	; (8001954 <touch_get_pressed_element+0x21c>)
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	4619      	mov	r1, r3
 8001754:	4880      	ldr	r0, [pc, #512]	; (8001958 <touch_get_pressed_element+0x220>)
 8001756:	460b      	mov	r3, r1
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	440b      	add	r3, r1
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	2164      	movs	r1, #100	; 0x64
 8001760:	fb04 f101 	mul.w	r1, r4, r1
 8001764:	4419      	add	r1, r3
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	440b      	add	r3, r1
 800176a:	015b      	lsls	r3, r3, #5
 800176c:	4403      	add	r3, r0
 800176e:	330e      	adds	r3, #14
 8001770:	881b      	ldrh	r3, [r3, #0]
 8001772:	429a      	cmp	r2, r3
 8001774:	f0c0 80de 	bcc.w	8001934 <touch_get_pressed_element+0x1fc>
		&& (touch.x <= touch_elements_register[active_page][active_layer][i].x1)
 8001778:	4b74      	ldr	r3, [pc, #464]	; (800194c <touch_get_pressed_element+0x214>)
 800177a:	881a      	ldrh	r2, [r3, #0]
 800177c:	4b74      	ldr	r3, [pc, #464]	; (8001950 <touch_get_pressed_element+0x218>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	461c      	mov	r4, r3
 8001782:	4b74      	ldr	r3, [pc, #464]	; (8001954 <touch_get_pressed_element+0x21c>)
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	4619      	mov	r1, r3
 8001788:	4873      	ldr	r0, [pc, #460]	; (8001958 <touch_get_pressed_element+0x220>)
 800178a:	460b      	mov	r3, r1
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	440b      	add	r3, r1
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	2164      	movs	r1, #100	; 0x64
 8001794:	fb04 f101 	mul.w	r1, r4, r1
 8001798:	4419      	add	r1, r3
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	440b      	add	r3, r1
 800179e:	015b      	lsls	r3, r3, #5
 80017a0:	4403      	add	r3, r0
 80017a2:	3312      	adds	r3, #18
 80017a4:	881b      	ldrh	r3, [r3, #0]
 80017a6:	429a      	cmp	r2, r3
 80017a8:	f200 80c4 	bhi.w	8001934 <touch_get_pressed_element+0x1fc>
		&&(touch.y1 >= touch_elements_register[active_page][active_layer][i].y)
 80017ac:	4b67      	ldr	r3, [pc, #412]	; (800194c <touch_get_pressed_element+0x214>)
 80017ae:	88da      	ldrh	r2, [r3, #6]
 80017b0:	4b67      	ldr	r3, [pc, #412]	; (8001950 <touch_get_pressed_element+0x218>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	461c      	mov	r4, r3
 80017b6:	4b67      	ldr	r3, [pc, #412]	; (8001954 <touch_get_pressed_element+0x21c>)
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	4619      	mov	r1, r3
 80017bc:	4866      	ldr	r0, [pc, #408]	; (8001958 <touch_get_pressed_element+0x220>)
 80017be:	460b      	mov	r3, r1
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	440b      	add	r3, r1
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	2164      	movs	r1, #100	; 0x64
 80017c8:	fb04 f101 	mul.w	r1, r4, r1
 80017cc:	4419      	add	r1, r3
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	440b      	add	r3, r1
 80017d2:	015b      	lsls	r3, r3, #5
 80017d4:	4403      	add	r3, r0
 80017d6:	3310      	adds	r3, #16
 80017d8:	881b      	ldrh	r3, [r3, #0]
 80017da:	429a      	cmp	r2, r3
 80017dc:	f0c0 80aa 	bcc.w	8001934 <touch_get_pressed_element+0x1fc>
		&&(touch.y <= touch_elements_register[active_page][active_layer][i].y1))
 80017e0:	4b5a      	ldr	r3, [pc, #360]	; (800194c <touch_get_pressed_element+0x214>)
 80017e2:	885a      	ldrh	r2, [r3, #2]
 80017e4:	4b5a      	ldr	r3, [pc, #360]	; (8001950 <touch_get_pressed_element+0x218>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	461c      	mov	r4, r3
 80017ea:	4b5a      	ldr	r3, [pc, #360]	; (8001954 <touch_get_pressed_element+0x21c>)
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	4619      	mov	r1, r3
 80017f0:	4859      	ldr	r0, [pc, #356]	; (8001958 <touch_get_pressed_element+0x220>)
 80017f2:	460b      	mov	r3, r1
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	440b      	add	r3, r1
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	2164      	movs	r1, #100	; 0x64
 80017fc:	fb04 f101 	mul.w	r1, r4, r1
 8001800:	4419      	add	r1, r3
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	440b      	add	r3, r1
 8001806:	015b      	lsls	r3, r3, #5
 8001808:	4403      	add	r3, r0
 800180a:	3314      	adds	r3, #20
 800180c:	881b      	ldrh	r3, [r3, #0]
 800180e:	429a      	cmp	r2, r3
 8001810:	f200 8090 	bhi.w	8001934 <touch_get_pressed_element+0x1fc>
		{

#if DEBUG_TOUCH == 1
			x0 = touch_elements_register[active_page][active_layer][i].x;
 8001814:	4b4e      	ldr	r3, [pc, #312]	; (8001950 <touch_get_pressed_element+0x218>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	4618      	mov	r0, r3
 800181a:	4b4e      	ldr	r3, [pc, #312]	; (8001954 <touch_get_pressed_element+0x21c>)
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	461a      	mov	r2, r3
 8001820:	494d      	ldr	r1, [pc, #308]	; (8001958 <touch_get_pressed_element+0x220>)
 8001822:	4613      	mov	r3, r2
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	4413      	add	r3, r2
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	2264      	movs	r2, #100	; 0x64
 800182c:	fb00 f202 	mul.w	r2, r0, r2
 8001830:	441a      	add	r2, r3
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	4413      	add	r3, r2
 8001836:	015b      	lsls	r3, r3, #5
 8001838:	440b      	add	r3, r1
 800183a:	330e      	adds	r3, #14
 800183c:	881b      	ldrh	r3, [r3, #0]
 800183e:	817b      	strh	r3, [r7, #10]
			x1 = touch_elements_register[active_page][active_layer][i].x1;
 8001840:	4b43      	ldr	r3, [pc, #268]	; (8001950 <touch_get_pressed_element+0x218>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	4618      	mov	r0, r3
 8001846:	4b43      	ldr	r3, [pc, #268]	; (8001954 <touch_get_pressed_element+0x21c>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	461a      	mov	r2, r3
 800184c:	4942      	ldr	r1, [pc, #264]	; (8001958 <touch_get_pressed_element+0x220>)
 800184e:	4613      	mov	r3, r2
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	4413      	add	r3, r2
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	2264      	movs	r2, #100	; 0x64
 8001858:	fb00 f202 	mul.w	r2, r0, r2
 800185c:	441a      	add	r2, r3
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	4413      	add	r3, r2
 8001862:	015b      	lsls	r3, r3, #5
 8001864:	440b      	add	r3, r1
 8001866:	3312      	adds	r3, #18
 8001868:	881b      	ldrh	r3, [r3, #0]
 800186a:	813b      	strh	r3, [r7, #8]
			y0 = touch_elements_register[active_page][active_layer][i].y;
 800186c:	4b38      	ldr	r3, [pc, #224]	; (8001950 <touch_get_pressed_element+0x218>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	4618      	mov	r0, r3
 8001872:	4b38      	ldr	r3, [pc, #224]	; (8001954 <touch_get_pressed_element+0x21c>)
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	461a      	mov	r2, r3
 8001878:	4937      	ldr	r1, [pc, #220]	; (8001958 <touch_get_pressed_element+0x220>)
 800187a:	4613      	mov	r3, r2
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	4413      	add	r3, r2
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	2264      	movs	r2, #100	; 0x64
 8001884:	fb00 f202 	mul.w	r2, r0, r2
 8001888:	441a      	add	r2, r3
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	4413      	add	r3, r2
 800188e:	015b      	lsls	r3, r3, #5
 8001890:	440b      	add	r3, r1
 8001892:	3310      	adds	r3, #16
 8001894:	881b      	ldrh	r3, [r3, #0]
 8001896:	80fb      	strh	r3, [r7, #6]
			y1 = touch_elements_register[active_page][active_layer][i].y1;
 8001898:	4b2d      	ldr	r3, [pc, #180]	; (8001950 <touch_get_pressed_element+0x218>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	4618      	mov	r0, r3
 800189e:	4b2d      	ldr	r3, [pc, #180]	; (8001954 <touch_get_pressed_element+0x21c>)
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	461a      	mov	r2, r3
 80018a4:	492c      	ldr	r1, [pc, #176]	; (8001958 <touch_get_pressed_element+0x220>)
 80018a6:	4613      	mov	r3, r2
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	4413      	add	r3, r2
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	2264      	movs	r2, #100	; 0x64
 80018b0:	fb00 f202 	mul.w	r2, r0, r2
 80018b4:	441a      	add	r2, r3
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	4413      	add	r3, r2
 80018ba:	015b      	lsls	r3, r3, #5
 80018bc:	440b      	add	r3, r1
 80018be:	3314      	adds	r3, #20
 80018c0:	881b      	ldrh	r3, [r3, #0]
 80018c2:	80bb      	strh	r3, [r7, #4]
			printf(" GETTING PRESSED ELEMENT \n\r X: %d\n\r X1: %d\n\r Y: %d\n\r Y1: %d\n\r",x0,x1,y0,y1);
 80018c4:	8979      	ldrh	r1, [r7, #10]
 80018c6:	893a      	ldrh	r2, [r7, #8]
 80018c8:	88f8      	ldrh	r0, [r7, #6]
 80018ca:	88bb      	ldrh	r3, [r7, #4]
 80018cc:	9300      	str	r3, [sp, #0]
 80018ce:	4603      	mov	r3, r0
 80018d0:	4822      	ldr	r0, [pc, #136]	; (800195c <touch_get_pressed_element+0x224>)
 80018d2:	f009 f9b3 	bl	800ac3c <iprintf>
#endif
			memcpy(&pressed_element,&touch_elements_register[active_page][active_layer][i],sizeof(struct element_t));
 80018d6:	4b1e      	ldr	r3, [pc, #120]	; (8001950 <touch_get_pressed_element+0x218>)
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	4619      	mov	r1, r3
 80018dc:	4b1d      	ldr	r3, [pc, #116]	; (8001954 <touch_get_pressed_element+0x21c>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	461a      	mov	r2, r3
 80018e2:	4613      	mov	r3, r2
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	4413      	add	r3, r2
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	2264      	movs	r2, #100	; 0x64
 80018ec:	fb01 f202 	mul.w	r2, r1, r2
 80018f0:	441a      	add	r2, r3
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	4413      	add	r3, r2
 80018f6:	015b      	lsls	r3, r3, #5
 80018f8:	4a17      	ldr	r2, [pc, #92]	; (8001958 <touch_get_pressed_element+0x220>)
 80018fa:	4413      	add	r3, r2
 80018fc:	2220      	movs	r2, #32
 80018fe:	4619      	mov	r1, r3
 8001900:	4817      	ldr	r0, [pc, #92]	; (8001960 <touch_get_pressed_element+0x228>)
 8001902:	f009 f985 	bl	800ac10 <memcpy>

#if DEBUG_TOUCH == 1
			printf(" PRESSED ELEMENT \n\r X: %d\n\r X1: %d\n\r Y: %d\n\r Y1: %d\n\r TYPE: %d\n\r",pressed_element.x,pressed_element.x1,pressed_element.y,pressed_element.y1,pressed_element.element_type);
 8001906:	4b16      	ldr	r3, [pc, #88]	; (8001960 <touch_get_pressed_element+0x228>)
 8001908:	89db      	ldrh	r3, [r3, #14]
 800190a:	4619      	mov	r1, r3
 800190c:	4b14      	ldr	r3, [pc, #80]	; (8001960 <touch_get_pressed_element+0x228>)
 800190e:	8a5b      	ldrh	r3, [r3, #18]
 8001910:	4618      	mov	r0, r3
 8001912:	4b13      	ldr	r3, [pc, #76]	; (8001960 <touch_get_pressed_element+0x228>)
 8001914:	8a1b      	ldrh	r3, [r3, #16]
 8001916:	461c      	mov	r4, r3
 8001918:	4b11      	ldr	r3, [pc, #68]	; (8001960 <touch_get_pressed_element+0x228>)
 800191a:	8a9b      	ldrh	r3, [r3, #20]
 800191c:	461a      	mov	r2, r3
 800191e:	4b10      	ldr	r3, [pc, #64]	; (8001960 <touch_get_pressed_element+0x228>)
 8001920:	7d9b      	ldrb	r3, [r3, #22]
 8001922:	9301      	str	r3, [sp, #4]
 8001924:	9200      	str	r2, [sp, #0]
 8001926:	4623      	mov	r3, r4
 8001928:	4602      	mov	r2, r0
 800192a:	480e      	ldr	r0, [pc, #56]	; (8001964 <touch_get_pressed_element+0x22c>)
 800192c:	f009 f986 	bl	800ac3c <iprintf>

#endif
			act_pressed_element();
 8001930:	f000 f81a 	bl	8001968 <act_pressed_element>
	for(int i = 0; i<MAX_NUM_ELEMENTS;i++)
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	3301      	adds	r3, #1
 8001938:	60fb      	str	r3, [r7, #12]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	2b13      	cmp	r3, #19
 800193e:	f77f af01 	ble.w	8001744 <touch_get_pressed_element+0xc>
		}
	}

	return touch_elements_register[-1];
 8001942:	bf00      	nop
}
 8001944:	3714      	adds	r7, #20
 8001946:	46bd      	mov	sp, r7
 8001948:	bd90      	pop	{r4, r7, pc}
 800194a:	bf00      	nop
 800194c:	20000108 	.word	0x20000108
 8001950:	20000138 	.word	0x20000138
 8001954:	20000139 	.word	0x20000139
 8001958:	2000013c 	.word	0x2000013c
 800195c:	0800c0fc 	.word	0x0800c0fc
 8001960:	20000118 	.word	0x20000118
 8001964:	0800c13c 	.word	0x0800c13c

08001968 <act_pressed_element>:
void act_pressed_element()
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b0c8      	sub	sp, #288	; 0x120
 800196c:	af02      	add	r7, sp, #8
	char reply[256];

#if DEBUG_TOUCH == 1
	printf("[TCH] Element type is: %d\n\r", pressed_element.element_type);
 800196e:	4b7e      	ldr	r3, [pc, #504]	; (8001b68 <act_pressed_element+0x200>)
 8001970:	7d9b      	ldrb	r3, [r3, #22]
 8001972:	4619      	mov	r1, r3
 8001974:	487d      	ldr	r0, [pc, #500]	; (8001b6c <act_pressed_element+0x204>)
 8001976:	f009 f961 	bl	800ac3c <iprintf>
#endif
	if(pressed_element.element_type == screenbutton)
 800197a:	4b7b      	ldr	r3, [pc, #492]	; (8001b68 <act_pressed_element+0x200>)
 800197c:	7d9b      	ldrb	r3, [r3, #22]
 800197e:	2b05      	cmp	r3, #5
 8001980:	d159      	bne.n	8001a36 <act_pressed_element+0xce>
	{
		drawObjectToLcd(pressed_element.obj,pressed_element.element_data_pointer,1);
 8001982:	4b79      	ldr	r3, [pc, #484]	; (8001b68 <act_pressed_element+0x200>)
 8001984:	699a      	ldr	r2, [r3, #24]
 8001986:	4b78      	ldr	r3, [pc, #480]	; (8001b68 <act_pressed_element+0x200>)
 8001988:	2101      	movs	r1, #1
 800198a:	9101      	str	r1, [sp, #4]
 800198c:	9200      	str	r2, [sp, #0]
 800198e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001990:	f003 fa5c 	bl	8004e4c <drawObjectToLcd>
		delay_ms(50);
 8001994:	2032      	movs	r0, #50	; 0x32
 8001996:	f000 fb65 	bl	8002064 <delay_ms>
		drawObjectToLcd(pressed_element.obj,pressed_element.element_data_pointer,0);
 800199a:	4b73      	ldr	r3, [pc, #460]	; (8001b68 <act_pressed_element+0x200>)
 800199c:	699a      	ldr	r2, [r3, #24]
 800199e:	4b72      	ldr	r3, [pc, #456]	; (8001b68 <act_pressed_element+0x200>)
 80019a0:	2100      	movs	r1, #0
 80019a2:	9101      	str	r1, [sp, #4]
 80019a4:	9200      	str	r2, [sp, #0]
 80019a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019a8:	f003 fa50 	bl	8004e4c <drawObjectToLcd>
		printf("cs , ts : %d %d \n\r", currentScreen, gConf.totalScreens);
 80019ac:	4b70      	ldr	r3, [pc, #448]	; (8001b70 <act_pressed_element+0x208>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a70      	ldr	r2, [pc, #448]	; (8001b74 <act_pressed_element+0x20c>)
 80019b2:	7812      	ldrb	r2, [r2, #0]
 80019b4:	4619      	mov	r1, r3
 80019b6:	4870      	ldr	r0, [pc, #448]	; (8001b78 <act_pressed_element+0x210>)
 80019b8:	f009 f940 	bl	800ac3c <iprintf>
		if (currentScreen < gConf.totalScreens)
 80019bc:	4b6d      	ldr	r3, [pc, #436]	; (8001b74 <act_pressed_element+0x20c>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	461a      	mov	r2, r3
 80019c2:	4b6b      	ldr	r3, [pc, #428]	; (8001b70 <act_pressed_element+0x208>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	dd05      	ble.n	80019d6 <act_pressed_element+0x6e>
		{
			currentScreen++;
 80019ca:	4b69      	ldr	r3, [pc, #420]	; (8001b70 <act_pressed_element+0x208>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	3301      	adds	r3, #1
 80019d0:	4a67      	ldr	r2, [pc, #412]	; (8001b70 <act_pressed_element+0x208>)
 80019d2:	6013      	str	r3, [r2, #0]
 80019d4:	e002      	b.n	80019dc <act_pressed_element+0x74>
		}else
		{
			currentScreen = 0;
 80019d6:	4b66      	ldr	r3, [pc, #408]	; (8001b70 <act_pressed_element+0x208>)
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
		}
		//currentScreen = 1;
		set_page(currentScreen);
 80019dc:	4b64      	ldr	r3, [pc, #400]	; (8001b70 <act_pressed_element+0x208>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7ff fd0c 	bl	8001400 <set_page>
		notYetDrawnFlag = 1;
 80019e8:	4b64      	ldr	r3, [pc, #400]	; (8001b7c <act_pressed_element+0x214>)
 80019ea:	2201      	movs	r2, #1
 80019ec:	601a      	str	r2, [r3, #0]
		sprintf(reply,"Type:%d ID:%d Value:%d \n\r",pressed_element.element_type, pressed_element.ID,currentScreen);
 80019ee:	4b5e      	ldr	r3, [pc, #376]	; (8001b68 <act_pressed_element+0x200>)
 80019f0:	7d9b      	ldrb	r3, [r3, #22]
 80019f2:	461a      	mov	r2, r3
 80019f4:	4b5c      	ldr	r3, [pc, #368]	; (8001b68 <act_pressed_element+0x200>)
 80019f6:	8b9b      	ldrh	r3, [r3, #28]
 80019f8:	4619      	mov	r1, r3
 80019fa:	4b5d      	ldr	r3, [pc, #372]	; (8001b70 <act_pressed_element+0x208>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	1d38      	adds	r0, r7, #4
 8001a00:	9300      	str	r3, [sp, #0]
 8001a02:	460b      	mov	r3, r1
 8001a04:	495e      	ldr	r1, [pc, #376]	; (8001b80 <act_pressed_element+0x218>)
 8001a06:	f009 f931 	bl	800ac6c <siprintf>
#if DEBUG_TOUCH == 1
		printf("[TCH] Screenbutton was pressed\n\r");
 8001a0a:	485e      	ldr	r0, [pc, #376]	; (8001b84 <act_pressed_element+0x21c>)
 8001a0c:	f009 f916 	bl	800ac3c <iprintf>
		printf(reply);
 8001a10:	1d3b      	adds	r3, r7, #4
 8001a12:	4618      	mov	r0, r3
 8001a14:	f009 f912 	bl	800ac3c <iprintf>
#endif


		int ret = send_usart_message(reply, &huart2, strlen(reply));
 8001a18:	1d3b      	adds	r3, r7, #4
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7fe fbe2 	bl	80001e4 <strlen>
 8001a20:	4603      	mov	r3, r0
 8001a22:	461a      	mov	r2, r3
 8001a24:	1d3b      	adds	r3, r7, #4
 8001a26:	4958      	ldr	r1, [pc, #352]	; (8001b88 <act_pressed_element+0x220>)
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f004 ff19 	bl	8006860 <send_usart_message>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
		printf("[TCH] Unknown element type %d\n\r", pressed_element.element_type);
#endif

		int ret = send_usart_message(reply, &huart2, strlen(reply));
	}
}
 8001a34:	e092      	b.n	8001b5c <act_pressed_element+0x1f4>
	}else if(pressed_element.element_type == button)
 8001a36:	4b4c      	ldr	r3, [pc, #304]	; (8001b68 <act_pressed_element+0x200>)
 8001a38:	7d9b      	ldrb	r3, [r3, #22]
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d138      	bne.n	8001ab0 <act_pressed_element+0x148>
		sprintf(reply,"Type:%d ID:%d\n\r",pressed_element.element_type, pressed_element.ID,slider_last_percents);
 8001a3e:	4b4a      	ldr	r3, [pc, #296]	; (8001b68 <act_pressed_element+0x200>)
 8001a40:	7d9b      	ldrb	r3, [r3, #22]
 8001a42:	461a      	mov	r2, r3
 8001a44:	4b48      	ldr	r3, [pc, #288]	; (8001b68 <act_pressed_element+0x200>)
 8001a46:	8b9b      	ldrh	r3, [r3, #28]
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4b50      	ldr	r3, [pc, #320]	; (8001b8c <act_pressed_element+0x224>)
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	1d38      	adds	r0, r7, #4
 8001a50:	9300      	str	r3, [sp, #0]
 8001a52:	460b      	mov	r3, r1
 8001a54:	494e      	ldr	r1, [pc, #312]	; (8001b90 <act_pressed_element+0x228>)
 8001a56:	f009 f909 	bl	800ac6c <siprintf>
		printf("[TCH] Button was pressed\n\r");
 8001a5a:	484e      	ldr	r0, [pc, #312]	; (8001b94 <act_pressed_element+0x22c>)
 8001a5c:	f009 f8ee 	bl	800ac3c <iprintf>
		printf(reply);
 8001a60:	1d3b      	adds	r3, r7, #4
 8001a62:	4618      	mov	r0, r3
 8001a64:	f009 f8ea 	bl	800ac3c <iprintf>
		drawObjectToLcd(pressed_element.obj,pressed_element.element_data_pointer,1);
 8001a68:	4b3f      	ldr	r3, [pc, #252]	; (8001b68 <act_pressed_element+0x200>)
 8001a6a:	699a      	ldr	r2, [r3, #24]
 8001a6c:	4b3e      	ldr	r3, [pc, #248]	; (8001b68 <act_pressed_element+0x200>)
 8001a6e:	2101      	movs	r1, #1
 8001a70:	9101      	str	r1, [sp, #4]
 8001a72:	9200      	str	r2, [sp, #0]
 8001a74:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a76:	f003 f9e9 	bl	8004e4c <drawObjectToLcd>
		delay_ms(50);
 8001a7a:	2032      	movs	r0, #50	; 0x32
 8001a7c:	f000 faf2 	bl	8002064 <delay_ms>
		drawObjectToLcd(pressed_element.obj,pressed_element.element_data_pointer,0);
 8001a80:	4b39      	ldr	r3, [pc, #228]	; (8001b68 <act_pressed_element+0x200>)
 8001a82:	699a      	ldr	r2, [r3, #24]
 8001a84:	4b38      	ldr	r3, [pc, #224]	; (8001b68 <act_pressed_element+0x200>)
 8001a86:	2100      	movs	r1, #0
 8001a88:	9101      	str	r1, [sp, #4]
 8001a8a:	9200      	str	r2, [sp, #0]
 8001a8c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a8e:	f003 f9dd 	bl	8004e4c <drawObjectToLcd>
		int ret = send_usart_message(reply, &huart2, strlen(reply));
 8001a92:	1d3b      	adds	r3, r7, #4
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7fe fba5 	bl	80001e4 <strlen>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	1d3b      	adds	r3, r7, #4
 8001aa0:	4939      	ldr	r1, [pc, #228]	; (8001b88 <act_pressed_element+0x220>)
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f004 fedc 	bl	8006860 <send_usart_message>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
}
 8001aae:	e055      	b.n	8001b5c <act_pressed_element+0x1f4>
	}else if(pressed_element.element_type == slider)
 8001ab0:	4b2d      	ldr	r3, [pc, #180]	; (8001b68 <act_pressed_element+0x200>)
 8001ab2:	7d9b      	ldrb	r3, [r3, #22]
 8001ab4:	2b06      	cmp	r3, #6
 8001ab6:	d130      	bne.n	8001b1a <act_pressed_element+0x1b2>
		int slider_value = drawObjectToLcd(pressed_element.obj,pressed_element.element_data_pointer,touch.x);
 8001ab8:	4b2b      	ldr	r3, [pc, #172]	; (8001b68 <act_pressed_element+0x200>)
 8001aba:	699a      	ldr	r2, [r3, #24]
 8001abc:	4b36      	ldr	r3, [pc, #216]	; (8001b98 <act_pressed_element+0x230>)
 8001abe:	881b      	ldrh	r3, [r3, #0]
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4b29      	ldr	r3, [pc, #164]	; (8001b68 <act_pressed_element+0x200>)
 8001ac4:	9101      	str	r1, [sp, #4]
 8001ac6:	9200      	str	r2, [sp, #0]
 8001ac8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001aca:	f003 f9bf 	bl	8004e4c <drawObjectToLcd>
 8001ace:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
		sprintf(reply,"Type:%d ID:%d Value: %d\n\r",pressed_element.element_type, pressed_element.ID,slider_value);
 8001ad2:	4b25      	ldr	r3, [pc, #148]	; (8001b68 <act_pressed_element+0x200>)
 8001ad4:	7d9b      	ldrb	r3, [r3, #22]
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	4b23      	ldr	r3, [pc, #140]	; (8001b68 <act_pressed_element+0x200>)
 8001ada:	8b9b      	ldrh	r3, [r3, #28]
 8001adc:	4619      	mov	r1, r3
 8001ade:	1d38      	adds	r0, r7, #4
 8001ae0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001ae4:	9300      	str	r3, [sp, #0]
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	492c      	ldr	r1, [pc, #176]	; (8001b9c <act_pressed_element+0x234>)
 8001aea:	f009 f8bf 	bl	800ac6c <siprintf>
		printf("[TCH] Slider was pressed\n\r");
 8001aee:	482c      	ldr	r0, [pc, #176]	; (8001ba0 <act_pressed_element+0x238>)
 8001af0:	f009 f8a4 	bl	800ac3c <iprintf>
		printf(reply);
 8001af4:	1d3b      	adds	r3, r7, #4
 8001af6:	4618      	mov	r0, r3
 8001af8:	f009 f8a0 	bl	800ac3c <iprintf>
		int ret = send_usart_message(reply, &huart2, strlen(reply));
 8001afc:	1d3b      	adds	r3, r7, #4
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7fe fb70 	bl	80001e4 <strlen>
 8001b04:	4603      	mov	r3, r0
 8001b06:	461a      	mov	r2, r3
 8001b08:	1d3b      	adds	r3, r7, #4
 8001b0a:	491f      	ldr	r1, [pc, #124]	; (8001b88 <act_pressed_element+0x220>)
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f004 fea7 	bl	8006860 <send_usart_message>
 8001b12:	4603      	mov	r3, r0
 8001b14:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
}
 8001b18:	e020      	b.n	8001b5c <act_pressed_element+0x1f4>
		sprintf(reply,"Type:%d ID:%d",pressed_element.element_type, pressed_element.ID);
 8001b1a:	4b13      	ldr	r3, [pc, #76]	; (8001b68 <act_pressed_element+0x200>)
 8001b1c:	7d9b      	ldrb	r3, [r3, #22]
 8001b1e:	461a      	mov	r2, r3
 8001b20:	4b11      	ldr	r3, [pc, #68]	; (8001b68 <act_pressed_element+0x200>)
 8001b22:	8b9b      	ldrh	r3, [r3, #28]
 8001b24:	1d38      	adds	r0, r7, #4
 8001b26:	491f      	ldr	r1, [pc, #124]	; (8001ba4 <act_pressed_element+0x23c>)
 8001b28:	f009 f8a0 	bl	800ac6c <siprintf>
		printf(reply);
 8001b2c:	1d3b      	adds	r3, r7, #4
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f009 f884 	bl	800ac3c <iprintf>
		printf("[TCH] Unknown element type %d\n\r", pressed_element.element_type);
 8001b34:	4b0c      	ldr	r3, [pc, #48]	; (8001b68 <act_pressed_element+0x200>)
 8001b36:	7d9b      	ldrb	r3, [r3, #22]
 8001b38:	4619      	mov	r1, r3
 8001b3a:	481b      	ldr	r0, [pc, #108]	; (8001ba8 <act_pressed_element+0x240>)
 8001b3c:	f009 f87e 	bl	800ac3c <iprintf>
		int ret = send_usart_message(reply, &huart2, strlen(reply));
 8001b40:	1d3b      	adds	r3, r7, #4
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7fe fb4e 	bl	80001e4 <strlen>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	1d3b      	adds	r3, r7, #4
 8001b4e:	490e      	ldr	r1, [pc, #56]	; (8001b88 <act_pressed_element+0x220>)
 8001b50:	4618      	mov	r0, r3
 8001b52:	f004 fe85 	bl	8006860 <send_usart_message>
 8001b56:	4603      	mov	r3, r0
 8001b58:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
}
 8001b5c:	bf00      	nop
 8001b5e:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	20000118 	.word	0x20000118
 8001b6c:	0800c180 	.word	0x0800c180
 8001b70:	2000498c 	.word	0x2000498c
 8001b74:	20004990 	.word	0x20004990
 8001b78:	0800c19c 	.word	0x0800c19c
 8001b7c:	2000001c 	.word	0x2000001c
 8001b80:	0800c1b0 	.word	0x0800c1b0
 8001b84:	0800c1cc 	.word	0x0800c1cc
 8001b88:	200040f4 	.word	0x200040f4
 8001b8c:	2000013a 	.word	0x2000013a
 8001b90:	0800c1f0 	.word	0x0800c1f0
 8001b94:	0800c200 	.word	0x0800c200
 8001b98:	20000108 	.word	0x20000108
 8001b9c:	0800c21c 	.word	0x0800c21c
 8001ba0:	0800c238 	.word	0x0800c238
 8001ba4:	0800c254 	.word	0x0800c254
 8001ba8:	0800c264 	.word	0x0800c264

08001bac <touch_register_element>:
// Register element to the touch elements array.
uint8_t touch_register_element(uint8_t page,uint8_t layer,struct object obj, uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1,uint16_t element_type, uint32_t element_pointer,uint16_t ID)
{
 8001bac:	b082      	sub	sp, #8
 8001bae:	b5b0      	push	{r4, r5, r7, lr}
 8001bb0:	b088      	sub	sp, #32
 8001bb2:	af04      	add	r7, sp, #16
 8001bb4:	f107 0420 	add.w	r4, r7, #32
 8001bb8:	e884 000c 	stmia.w	r4, {r2, r3}
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	71fb      	strb	r3, [r7, #7]
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	71bb      	strb	r3, [r7, #6]
	for(int i = 0;i<MAX_NUM_ELEMENTS;i++)
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	60fb      	str	r3, [r7, #12]
 8001bc8:	e0d8      	b.n	8001d7c <touch_register_element+0x1d0>
	{
		if(touch_elements_register[page][layer][i].isAlive == 0)
 8001bca:	79f9      	ldrb	r1, [r7, #7]
 8001bcc:	79ba      	ldrb	r2, [r7, #6]
 8001bce:	4871      	ldr	r0, [pc, #452]	; (8001d94 <touch_register_element+0x1e8>)
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	4413      	add	r3, r2
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	2264      	movs	r2, #100	; 0x64
 8001bda:	fb01 f202 	mul.w	r2, r1, r2
 8001bde:	441a      	add	r2, r3
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	4413      	add	r3, r2
 8001be4:	015b      	lsls	r3, r3, #5
 8001be6:	4403      	add	r3, r0
 8001be8:	3317      	adds	r3, #23
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	f040 80c2 	bne.w	8001d76 <touch_register_element+0x1ca>
		{
			touch_elements_register[page][layer][i].obj = obj;
 8001bf2:	79f9      	ldrb	r1, [r7, #7]
 8001bf4:	79ba      	ldrb	r2, [r7, #6]
 8001bf6:	4867      	ldr	r0, [pc, #412]	; (8001d94 <touch_register_element+0x1e8>)
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	4413      	add	r3, r2
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	2264      	movs	r2, #100	; 0x64
 8001c02:	fb01 f202 	mul.w	r2, r1, r2
 8001c06:	441a      	add	r2, r3
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	015b      	lsls	r3, r3, #5
 8001c0e:	4403      	add	r3, r0
 8001c10:	461c      	mov	r4, r3
 8001c12:	f107 0320 	add.w	r3, r7, #32
 8001c16:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c18:	c407      	stmia	r4!, {r0, r1, r2}
 8001c1a:	8023      	strh	r3, [r4, #0]
			touch_elements_register[page][layer][i].x = x0;
 8001c1c:	79f9      	ldrb	r1, [r7, #7]
 8001c1e:	79ba      	ldrb	r2, [r7, #6]
 8001c20:	485c      	ldr	r0, [pc, #368]	; (8001d94 <touch_register_element+0x1e8>)
 8001c22:	4613      	mov	r3, r2
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	4413      	add	r3, r2
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	2264      	movs	r2, #100	; 0x64
 8001c2c:	fb01 f202 	mul.w	r2, r1, r2
 8001c30:	441a      	add	r2, r3
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	4413      	add	r3, r2
 8001c36:	015b      	lsls	r3, r3, #5
 8001c38:	4403      	add	r3, r0
 8001c3a:	330e      	adds	r3, #14
 8001c3c:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8001c3e:	801a      	strh	r2, [r3, #0]
			touch_elements_register[page][layer][i].x1 =x1;
 8001c40:	79f9      	ldrb	r1, [r7, #7]
 8001c42:	79ba      	ldrb	r2, [r7, #6]
 8001c44:	4853      	ldr	r0, [pc, #332]	; (8001d94 <touch_register_element+0x1e8>)
 8001c46:	4613      	mov	r3, r2
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	4413      	add	r3, r2
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	2264      	movs	r2, #100	; 0x64
 8001c50:	fb01 f202 	mul.w	r2, r1, r2
 8001c54:	441a      	add	r2, r3
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	4413      	add	r3, r2
 8001c5a:	015b      	lsls	r3, r3, #5
 8001c5c:	4403      	add	r3, r0
 8001c5e:	3312      	adds	r3, #18
 8001c60:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8001c62:	801a      	strh	r2, [r3, #0]
			touch_elements_register[page][layer][i].y =y0;
 8001c64:	79f9      	ldrb	r1, [r7, #7]
 8001c66:	79ba      	ldrb	r2, [r7, #6]
 8001c68:	484a      	ldr	r0, [pc, #296]	; (8001d94 <touch_register_element+0x1e8>)
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	4413      	add	r3, r2
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	2264      	movs	r2, #100	; 0x64
 8001c74:	fb01 f202 	mul.w	r2, r1, r2
 8001c78:	441a      	add	r2, r3
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	015b      	lsls	r3, r3, #5
 8001c80:	4403      	add	r3, r0
 8001c82:	3310      	adds	r3, #16
 8001c84:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001c86:	801a      	strh	r2, [r3, #0]
			touch_elements_register[page][layer][i].y1 =y1;
 8001c88:	79f9      	ldrb	r1, [r7, #7]
 8001c8a:	79ba      	ldrb	r2, [r7, #6]
 8001c8c:	4841      	ldr	r0, [pc, #260]	; (8001d94 <touch_register_element+0x1e8>)
 8001c8e:	4613      	mov	r3, r2
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	4413      	add	r3, r2
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	2264      	movs	r2, #100	; 0x64
 8001c98:	fb01 f202 	mul.w	r2, r1, r2
 8001c9c:	441a      	add	r2, r3
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	015b      	lsls	r3, r3, #5
 8001ca4:	4403      	add	r3, r0
 8001ca6:	3314      	adds	r3, #20
 8001ca8:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8001caa:	801a      	strh	r2, [r3, #0]
			touch_elements_register[page][layer][i].element_type = element_type;
 8001cac:	79f9      	ldrb	r1, [r7, #7]
 8001cae:	79ba      	ldrb	r2, [r7, #6]
 8001cb0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001cb4:	b2dc      	uxtb	r4, r3
 8001cb6:	4837      	ldr	r0, [pc, #220]	; (8001d94 <touch_register_element+0x1e8>)
 8001cb8:	4613      	mov	r3, r2
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	4413      	add	r3, r2
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	2264      	movs	r2, #100	; 0x64
 8001cc2:	fb01 f202 	mul.w	r2, r1, r2
 8001cc6:	441a      	add	r2, r3
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	4413      	add	r3, r2
 8001ccc:	015b      	lsls	r3, r3, #5
 8001cce:	4403      	add	r3, r0
 8001cd0:	3316      	adds	r3, #22
 8001cd2:	4622      	mov	r2, r4
 8001cd4:	701a      	strb	r2, [r3, #0]
			touch_elements_register[page][layer][i].element_data_pointer = element_pointer;
 8001cd6:	79f8      	ldrb	r0, [r7, #7]
 8001cd8:	79ba      	ldrb	r2, [r7, #6]
 8001cda:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001cdc:	4c2d      	ldr	r4, [pc, #180]	; (8001d94 <touch_register_element+0x1e8>)
 8001cde:	4613      	mov	r3, r2
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	4413      	add	r3, r2
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	2264      	movs	r2, #100	; 0x64
 8001ce8:	fb00 f202 	mul.w	r2, r0, r2
 8001cec:	441a      	add	r2, r3
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	015b      	lsls	r3, r3, #5
 8001cf4:	4423      	add	r3, r4
 8001cf6:	3318      	adds	r3, #24
 8001cf8:	6019      	str	r1, [r3, #0]
			touch_elements_register[page][layer][i].ID = ID;
 8001cfa:	79f9      	ldrb	r1, [r7, #7]
 8001cfc:	79ba      	ldrb	r2, [r7, #6]
 8001cfe:	4825      	ldr	r0, [pc, #148]	; (8001d94 <touch_register_element+0x1e8>)
 8001d00:	4613      	mov	r3, r2
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	4413      	add	r3, r2
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	2264      	movs	r2, #100	; 0x64
 8001d0a:	fb01 f202 	mul.w	r2, r1, r2
 8001d0e:	441a      	add	r2, r3
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	4413      	add	r3, r2
 8001d14:	015b      	lsls	r3, r3, #5
 8001d16:	4403      	add	r3, r0
 8001d18:	331c      	adds	r3, #28
 8001d1a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001d1e:	801a      	strh	r2, [r3, #0]
			touch_elements_register[page][layer][i].isAlive = 1;
 8001d20:	79f9      	ldrb	r1, [r7, #7]
 8001d22:	79ba      	ldrb	r2, [r7, #6]
 8001d24:	481b      	ldr	r0, [pc, #108]	; (8001d94 <touch_register_element+0x1e8>)
 8001d26:	4613      	mov	r3, r2
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	4413      	add	r3, r2
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	2264      	movs	r2, #100	; 0x64
 8001d30:	fb01 f202 	mul.w	r2, r1, r2
 8001d34:	441a      	add	r2, r3
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	4413      	add	r3, r2
 8001d3a:	015b      	lsls	r3, r3, #5
 8001d3c:	4403      	add	r3, r0
 8001d3e:	3317      	adds	r3, #23
 8001d40:	2201      	movs	r2, #1
 8001d42:	701a      	strb	r2, [r3, #0]
#if DEBUG_TOUCH == 1
			printf("\n\r [TCH] Element registered with index: %d\n\r",i);
 8001d44:	68f9      	ldr	r1, [r7, #12]
 8001d46:	4814      	ldr	r0, [pc, #80]	; (8001d98 <touch_register_element+0x1ec>)
 8001d48:	f008 ff78 	bl	800ac3c <iprintf>
			printf("\n\r [TCH] Element values: %d %d %d %d %d %d %d %d\n\r",x0,x1,y0,y1,element_pointer,element_type, ID);
 8001d4c:	8e38      	ldrh	r0, [r7, #48]	; 0x30
 8001d4e:	8f3c      	ldrh	r4, [r7, #56]	; 0x38
 8001d50:	8ebd      	ldrh	r5, [r7, #52]	; 0x34
 8001d52:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001d54:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8001d58:	f8b7 1048 	ldrh.w	r1, [r7, #72]	; 0x48
 8001d5c:	9103      	str	r1, [sp, #12]
 8001d5e:	9202      	str	r2, [sp, #8]
 8001d60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001d62:	9201      	str	r2, [sp, #4]
 8001d64:	9300      	str	r3, [sp, #0]
 8001d66:	462b      	mov	r3, r5
 8001d68:	4622      	mov	r2, r4
 8001d6a:	4601      	mov	r1, r0
 8001d6c:	480b      	ldr	r0, [pc, #44]	; (8001d9c <touch_register_element+0x1f0>)
 8001d6e:	f008 ff65 	bl	800ac3c <iprintf>
#endif
			return 0;
 8001d72:	2300      	movs	r3, #0
 8001d74:	e007      	b.n	8001d86 <touch_register_element+0x1da>
	for(int i = 0;i<MAX_NUM_ELEMENTS;i++)
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	60fb      	str	r3, [r7, #12]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2b13      	cmp	r3, #19
 8001d80:	f77f af23 	ble.w	8001bca <touch_register_element+0x1e>
		}
	}

	return -1;
 8001d84:	23ff      	movs	r3, #255	; 0xff
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3710      	adds	r7, #16
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001d90:	b002      	add	sp, #8
 8001d92:	4770      	bx	lr
 8001d94:	2000013c 	.word	0x2000013c
 8001d98:	0800c284 	.word	0x0800c284
 8001d9c:	0800c2b4 	.word	0x0800c2b4

08001da0 <HAL_GPIO_EXTI_Callback>:
//External interrupt from touc IC
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	4603      	mov	r3, r0
 8001da8:	80fb      	strh	r3, [r7, #6]
	touch.pressed=1;
 8001daa:	4b05      	ldr	r3, [pc, #20]	; (8001dc0 <HAL_GPIO_EXTI_Callback+0x20>)
 8001dac:	2201      	movs	r2, #1
 8001dae:	811a      	strh	r2, [r3, #8]
#if DEBUG_TOUCH == 1
	printf("Interrupt touch");
 8001db0:	4804      	ldr	r0, [pc, #16]	; (8001dc4 <HAL_GPIO_EXTI_Callback+0x24>)
 8001db2:	f008 ff43 	bl	800ac3c <iprintf>
#endif
}
 8001db6:	bf00      	nop
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	20000108 	.word	0x20000108
 8001dc4:	0800c2e8 	.word	0x0800c2e8

08001dc8 <touch_write_control>:
	touch_elements_register[page][layer][idx].element_data_pointer = 0;
}
/*----------------------------------------------Private function---------------------------------------------------*/
//Write to touch IC control command via I2C
static void touch_write_control(unsigned char ctrl)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b086      	sub	sp, #24
 8001dcc:	af02      	add	r7, sp, #8
 8001dce:	4603      	mov	r3, r0
 8001dd0:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status =0;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	73fb      	strb	r3, [r7, #15]
	status = HAL_I2C_Master_Transmit(&hi2c1_touch, (uint16_t)SLAVE_ADDRESS_TOUCH, &ctrl, 1 ,I2C_DELAY);
 8001dd6:	1dfa      	adds	r2, r7, #7
 8001dd8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ddc:	9300      	str	r3, [sp, #0]
 8001dde:	2301      	movs	r3, #1
 8001de0:	2190      	movs	r1, #144	; 0x90
 8001de2:	4808      	ldr	r0, [pc, #32]	; (8001e04 <touch_write_control+0x3c>)
 8001de4:	f005 fb0a 	bl	80073fc <HAL_I2C_Master_Transmit>
 8001de8:	4603      	mov	r3, r0
 8001dea:	73fb      	strb	r3, [r7, #15]
#if DEBUG_TOUCH == 1
	printf("Write control I2C\n\r");
 8001dec:	4806      	ldr	r0, [pc, #24]	; (8001e08 <touch_write_control+0x40>)
 8001dee:	f008 ff25 	bl	800ac3c <iprintf>
	printf ("%d",status);
 8001df2:	7bfb      	ldrb	r3, [r7, #15]
 8001df4:	4619      	mov	r1, r3
 8001df6:	4805      	ldr	r0, [pc, #20]	; (8001e0c <touch_write_control+0x44>)
 8001df8:	f008 ff20 	bl	800ac3c <iprintf>
#endif
}
 8001dfc:	bf00      	nop
 8001dfe:	3710      	adds	r7, #16
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	200000b4 	.word	0x200000b4
 8001e08:	0800c2f8 	.word	0x0800c2f8
 8001e0c:	0800c30c 	.word	0x0800c30c

08001e10 <touch_write_register>:
//Write to touch IC data via I2C
static void touch_write_register(uint8_t adr, uint16_t val)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b088      	sub	sp, #32
 8001e14:	af04      	add	r7, sp, #16
 8001e16:	4603      	mov	r3, r0
 8001e18:	460a      	mov	r2, r1
 8001e1a:	71fb      	strb	r3, [r7, #7]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	80bb      	strh	r3, [r7, #4]

	HAL_StatusTypeDef status =0;
 8001e20:	2300      	movs	r3, #0
 8001e22:	73fb      	strb	r3, [r7, #15]
	uint8_t data[2];
	data[0] = val>>8;
 8001e24:	88bb      	ldrh	r3, [r7, #4]
 8001e26:	0a1b      	lsrs	r3, r3, #8
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	733b      	strb	r3, [r7, #12]
	data[1] = (uint8_t)val;
 8001e2e:	88bb      	ldrh	r3, [r7, #4]
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	737b      	strb	r3, [r7, #13]
	status = HAL_I2C_Mem_Write(&hi2c1_touch, (uint16_t)SLAVE_ADDRESS_TOUCH,(adr<<3),I2C_MEMADD_SIZE_8BIT,data,2,I2C_DELAY);
 8001e34:	79fb      	ldrb	r3, [r7, #7]
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	00db      	lsls	r3, r3, #3
 8001e3a:	b29a      	uxth	r2, r3
 8001e3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e40:	9302      	str	r3, [sp, #8]
 8001e42:	2302      	movs	r3, #2
 8001e44:	9301      	str	r3, [sp, #4]
 8001e46:	f107 030c 	add.w	r3, r7, #12
 8001e4a:	9300      	str	r3, [sp, #0]
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	2190      	movs	r1, #144	; 0x90
 8001e50:	4808      	ldr	r0, [pc, #32]	; (8001e74 <touch_write_register+0x64>)
 8001e52:	f005 fbd1 	bl	80075f8 <HAL_I2C_Mem_Write>
 8001e56:	4603      	mov	r3, r0
 8001e58:	73fb      	strb	r3, [r7, #15]
#if DEBUG_TOUCH == 1
	printf ("I2C write register\n\r");
 8001e5a:	4807      	ldr	r0, [pc, #28]	; (8001e78 <touch_write_register+0x68>)
 8001e5c:	f008 feee 	bl	800ac3c <iprintf>
	printf ("status %d \n\r",status);
 8001e60:	7bfb      	ldrb	r3, [r7, #15]
 8001e62:	4619      	mov	r1, r3
 8001e64:	4805      	ldr	r0, [pc, #20]	; (8001e7c <touch_write_register+0x6c>)
 8001e66:	f008 fee9 	bl	800ac3c <iprintf>
#endif
}
 8001e6a:	bf00      	nop
 8001e6c:	3710      	adds	r7, #16
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	200000b4 	.word	0x200000b4
 8001e78:	0800c310 	.word	0x0800c310
 8001e7c:	0800c328 	.word	0x0800c328

08001e80 <touch_read>:
//Read data via I2C from touch IC
static unsigned short touch_read(unsigned char adr)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b088      	sub	sp, #32
 8001e84:	af04      	add	r7, sp, #16
 8001e86:	4603      	mov	r3, r0
 8001e88:	71fb      	strb	r3, [r7, #7]
	unsigned char adr_i2c= 0x01;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	73fb      	strb	r3, [r7, #15]
	adr_i2c+=adr<<3;
 8001e8e:	79fb      	ldrb	r3, [r7, #7]
 8001e90:	00db      	lsls	r3, r3, #3
 8001e92:	b2da      	uxtb	r2, r3
 8001e94:	7bfb      	ldrb	r3, [r7, #15]
 8001e96:	4413      	add	r3, r2
 8001e98:	73fb      	strb	r3, [r7, #15]
	uint8_t data[2];
	HAL_StatusTypeDef status =0;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	73bb      	strb	r3, [r7, #14]
	status = HAL_I2C_Mem_Read(&hi2c1_touch, (uint16_t)SLAVE_ADDRESS_TOUCH ,adr_i2c,I2C_MEMADD_SIZE_8BIT,data, 2, I2C_DELAY);
 8001e9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ea0:	b29a      	uxth	r2, r3
 8001ea2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ea6:	9302      	str	r3, [sp, #8]
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	9301      	str	r3, [sp, #4]
 8001eac:	f107 0308 	add.w	r3, r7, #8
 8001eb0:	9300      	str	r3, [sp, #0]
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	2190      	movs	r1, #144	; 0x90
 8001eb6:	4809      	ldr	r0, [pc, #36]	; (8001edc <touch_read+0x5c>)
 8001eb8:	f005 fc98 	bl	80077ec <HAL_I2C_Mem_Read>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	73bb      	strb	r3, [r7, #14]
	uint16_t result = (data[0] << 8) | (data[1] & 0xFF);
 8001ec0:	7a3b      	ldrb	r3, [r7, #8]
 8001ec2:	021b      	lsls	r3, r3, #8
 8001ec4:	b21a      	sxth	r2, r3
 8001ec6:	7a7b      	ldrb	r3, [r7, #9]
 8001ec8:	b21b      	sxth	r3, r3
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	b21b      	sxth	r3, r3
 8001ece:	81bb      	strh	r3, [r7, #12]
	return result;
 8001ed0:	89bb      	ldrh	r3, [r7, #12]
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3710      	adds	r7, #16
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	200000b4 	.word	0x200000b4

08001ee0 <validate_touch_coordinates>:
//Transform and validate touch coordinates
static uint8_t validate_touch_coordinates(void)
{
 8001ee0:	b5b0      	push	{r4, r5, r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
	if(touch.x<MIN_X) return 0;
	if(touch.x>MAX_X) return 0;
 8001ee6:	4b5c      	ldr	r3, [pc, #368]	; (8002058 <validate_touch_coordinates+0x178>)
 8001ee8:	881b      	ldrh	r3, [r3, #0]
 8001eea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001eee:	d901      	bls.n	8001ef4 <validate_touch_coordinates+0x14>
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	e093      	b.n	800201c <validate_touch_coordinates+0x13c>
	if(touch.y<MIN_Y) return 0;
	if(touch.y>MAX_Y) return 0;
 8001ef4:	4b58      	ldr	r3, [pc, #352]	; (8002058 <validate_touch_coordinates+0x178>)
 8001ef6:	885b      	ldrh	r3, [r3, #2]
 8001ef8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001efc:	d901      	bls.n	8001f02 <validate_touch_coordinates+0x22>
 8001efe:	2300      	movs	r3, #0
 8001f00:	e08c      	b.n	800201c <validate_touch_coordinates+0x13c>

	touch.x=touch.x - MIN_X;
 8001f02:	4b55      	ldr	r3, [pc, #340]	; (8002058 <validate_touch_coordinates+0x178>)
 8001f04:	881a      	ldrh	r2, [r3, #0]
 8001f06:	4b54      	ldr	r3, [pc, #336]	; (8002058 <validate_touch_coordinates+0x178>)
 8001f08:	801a      	strh	r2, [r3, #0]
	touch.y=touch.y - MIN_Y;
 8001f0a:	4b53      	ldr	r3, [pc, #332]	; (8002058 <validate_touch_coordinates+0x178>)
 8001f0c:	885a      	ldrh	r2, [r3, #2]
 8001f0e:	4b52      	ldr	r3, [pc, #328]	; (8002058 <validate_touch_coordinates+0x178>)
 8001f10:	805a      	strh	r2, [r3, #2]
#if LINEAR_INTERPOLATION == 1
	touch.x = linear_interpolation((long)touch.x,40,970,0,480);
	touch.y = linear_interpolation((long)touch.y,40,970,0,340);
#else
	double x,y;
	x = X_A* (int16_t)touch.x + X_B *(int16_t)touch.y +X_L;
 8001f12:	4b51      	ldr	r3, [pc, #324]	; (8002058 <validate_touch_coordinates+0x178>)
 8001f14:	881b      	ldrh	r3, [r3, #0]
 8001f16:	b21b      	sxth	r3, r3
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7fe fc3d 	bl	8000798 <__aeabi_i2d>
 8001f1e:	a342      	add	r3, pc, #264	; (adr r3, 8002028 <validate_touch_coordinates+0x148>)
 8001f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f24:	f7fe f9bc 	bl	80002a0 <__aeabi_dmul>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	4614      	mov	r4, r2
 8001f2e:	461d      	mov	r5, r3
 8001f30:	4b49      	ldr	r3, [pc, #292]	; (8002058 <validate_touch_coordinates+0x178>)
 8001f32:	885b      	ldrh	r3, [r3, #2]
 8001f34:	b21b      	sxth	r3, r3
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7fe fc2e 	bl	8000798 <__aeabi_i2d>
 8001f3c:	a33c      	add	r3, pc, #240	; (adr r3, 8002030 <validate_touch_coordinates+0x150>)
 8001f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f42:	f7fe f9ad 	bl	80002a0 <__aeabi_dmul>
 8001f46:	4602      	mov	r2, r0
 8001f48:	460b      	mov	r3, r1
 8001f4a:	4620      	mov	r0, r4
 8001f4c:	4629      	mov	r1, r5
 8001f4e:	f7fe fad7 	bl	8000500 <__adddf3>
 8001f52:	4602      	mov	r2, r0
 8001f54:	460b      	mov	r3, r1
 8001f56:	4610      	mov	r0, r2
 8001f58:	4619      	mov	r1, r3
 8001f5a:	a337      	add	r3, pc, #220	; (adr r3, 8002038 <validate_touch_coordinates+0x158>)
 8001f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f60:	f7fe facc 	bl	80004fc <__aeabi_dsub>
 8001f64:	4602      	mov	r2, r0
 8001f66:	460b      	mov	r3, r1
 8001f68:	e9c7 2302 	strd	r2, r3, [r7, #8]
	y = Y_A* (int16_t)touch.x + Y_B *(int16_t)touch.y +Y_L;
 8001f6c:	4b3a      	ldr	r3, [pc, #232]	; (8002058 <validate_touch_coordinates+0x178>)
 8001f6e:	881b      	ldrh	r3, [r3, #0]
 8001f70:	b21b      	sxth	r3, r3
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7fe fc10 	bl	8000798 <__aeabi_i2d>
 8001f78:	a331      	add	r3, pc, #196	; (adr r3, 8002040 <validate_touch_coordinates+0x160>)
 8001f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f7e:	f7fe f98f 	bl	80002a0 <__aeabi_dmul>
 8001f82:	4602      	mov	r2, r0
 8001f84:	460b      	mov	r3, r1
 8001f86:	4614      	mov	r4, r2
 8001f88:	461d      	mov	r5, r3
 8001f8a:	4b33      	ldr	r3, [pc, #204]	; (8002058 <validate_touch_coordinates+0x178>)
 8001f8c:	885b      	ldrh	r3, [r3, #2]
 8001f8e:	b21b      	sxth	r3, r3
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7fe fc01 	bl	8000798 <__aeabi_i2d>
 8001f96:	a32c      	add	r3, pc, #176	; (adr r3, 8002048 <validate_touch_coordinates+0x168>)
 8001f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f9c:	f7fe f980 	bl	80002a0 <__aeabi_dmul>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	4620      	mov	r0, r4
 8001fa6:	4629      	mov	r1, r5
 8001fa8:	f7fe faaa 	bl	8000500 <__adddf3>
 8001fac:	4602      	mov	r2, r0
 8001fae:	460b      	mov	r3, r1
 8001fb0:	4610      	mov	r0, r2
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	a326      	add	r3, pc, #152	; (adr r3, 8002050 <validate_touch_coordinates+0x170>)
 8001fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fba:	f7fe fa9f 	bl	80004fc <__aeabi_dsub>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	e9c7 2300 	strd	r2, r3, [r7]
	touch.x = (uint16_t)x;
 8001fc6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001fca:	f7fe fc4f 	bl	800086c <__aeabi_d2uiz>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	b29a      	uxth	r2, r3
 8001fd2:	4b21      	ldr	r3, [pc, #132]	; (8002058 <validate_touch_coordinates+0x178>)
 8001fd4:	801a      	strh	r2, [r3, #0]
	touch.y = (uint16_t)y;
 8001fd6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001fda:	f7fe fc47 	bl	800086c <__aeabi_d2uiz>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	b29a      	uxth	r2, r3
 8001fe2:	4b1d      	ldr	r3, [pc, #116]	; (8002058 <validate_touch_coordinates+0x178>)
 8001fe4:	805a      	strh	r2, [r3, #2]
#endif
#if DEBUG_TOUCH == 1
	printf("TOUCH y %d\n\r", touch.y);
 8001fe6:	4b1c      	ldr	r3, [pc, #112]	; (8002058 <validate_touch_coordinates+0x178>)
 8001fe8:	885b      	ldrh	r3, [r3, #2]
 8001fea:	4619      	mov	r1, r3
 8001fec:	481b      	ldr	r0, [pc, #108]	; (800205c <validate_touch_coordinates+0x17c>)
 8001fee:	f008 fe25 	bl	800ac3c <iprintf>
	printf("TOUCH X %d\n\r", touch.x);
 8001ff2:	4b19      	ldr	r3, [pc, #100]	; (8002058 <validate_touch_coordinates+0x178>)
 8001ff4:	881b      	ldrh	r3, [r3, #0]
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	4819      	ldr	r0, [pc, #100]	; (8002060 <validate_touch_coordinates+0x180>)
 8001ffa:	f008 fe1f 	bl	800ac3c <iprintf>
#endif
	if (touch.x >= 0 && touch.x <= LCD_PIXEL_WIDTH)
 8001ffe:	4b16      	ldr	r3, [pc, #88]	; (8002058 <validate_touch_coordinates+0x178>)
 8002000:	881b      	ldrh	r3, [r3, #0]
 8002002:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8002006:	d801      	bhi.n	800200c <validate_touch_coordinates+0x12c>
	{
		return 1;
 8002008:	2301      	movs	r3, #1
 800200a:	e007      	b.n	800201c <validate_touch_coordinates+0x13c>
	}
	if (touch.y >= 0 && touch.y <= LCD_PIXEL_HEIGHT)
 800200c:	4b12      	ldr	r3, [pc, #72]	; (8002058 <validate_touch_coordinates+0x178>)
 800200e:	885b      	ldrh	r3, [r3, #2]
 8002010:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002014:	d801      	bhi.n	800201a <validate_touch_coordinates+0x13a>
	{
		return 1;
 8002016:	2301      	movs	r3, #1
 8002018:	e000      	b.n	800201c <validate_touch_coordinates+0x13c>
	}


	return 0;
 800201a:	2300      	movs	r3, #0
}
 800201c:	4618      	mov	r0, r3
 800201e:	3710      	adds	r7, #16
 8002020:	46bd      	mov	sp, r7
 8002022:	bdb0      	pop	{r4, r5, r7, pc}
 8002024:	f3af 8000 	nop.w
 8002028:	c7e28241 	.word	0xc7e28241
 800202c:	3fe0bb98 	.word	0x3fe0bb98
 8002030:	8db8bac7 	.word	0x8db8bac7
 8002034:	3f66f006 	.word	0x3f66f006
 8002038:	b71758e2 	.word	0xb71758e2
 800203c:	403fc0d1 	.word	0x403fc0d1
 8002040:	d2f1a9fc 	.word	0xd2f1a9fc
 8002044:	bf70624d 	.word	0xbf70624d
 8002048:	ab367a10 	.word	0xab367a10
 800204c:	3fd7573e 	.word	0x3fd7573e
 8002050:	e219652c 	.word	0xe219652c
 8002054:	4036d758 	.word	0x4036d758
 8002058:	20000108 	.word	0x20000108
 800205c:	0800c094 	.word	0x0800c094
 8002060:	0800c338 	.word	0x0800c338

08002064 <delay_ms>:
	{
		  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	}
#endif
//Delay in ms
static void delay_ms(__IO uint32_t nCount1) {
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
	__IO uint32_t nCount=nCount1*23666;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f645 4272 	movw	r2, #23666	; 0x5c72
 8002072:	fb02 f303 	mul.w	r3, r2, r3
 8002076:	60fb      	str	r3, [r7, #12]
	while(nCount--) {
 8002078:	bf00      	nop
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	1e5a      	subs	r2, r3, #1
 800207e:	60fa      	str	r2, [r7, #12]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d1fa      	bne.n	800207a <delay_ms+0x16>
  }
}
 8002084:	bf00      	nop
 8002086:	bf00      	nop
 8002088:	3714      	adds	r7, #20
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
	...

08002094 <fetchBitmap>:
 * TODO, if needed / time allows: This function first attempts to fetch the bitmap from local cache, and failing that, loads it from external memory.
 *
 * @returns number of pixels read. When requested bitmap does not exist, zero is returned.
 *
 */
int fetchBitmap(uint16_t bitmapNumber, struct bitmap *bitmapHeader, uint16_t *pixelArray, uint16_t maxPixels){
 8002094:	b580      	push	{r7, lr}
 8002096:	b086      	sub	sp, #24
 8002098:	af00      	add	r7, sp, #0
 800209a:	60b9      	str	r1, [r7, #8]
 800209c:	607a      	str	r2, [r7, #4]
 800209e:	461a      	mov	r2, r3
 80020a0:	4603      	mov	r3, r0
 80020a2:	81fb      	strh	r3, [r7, #14]
 80020a4:	4613      	mov	r3, r2
 80020a6:	81bb      	strh	r3, [r7, #12]

	//TODO (?): bitmap caching

	if(bitmapNumber >= globalBitmapList.totalBitmaps){
 80020a8:	4b0f      	ldr	r3, [pc, #60]	; (80020e8 <fetchBitmap+0x54>)
 80020aa:	881b      	ldrh	r3, [r3, #0]
 80020ac:	89fa      	ldrh	r2, [r7, #14]
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d308      	bcc.n	80020c4 <fetchBitmap+0x30>
		printf("[BCL] Can't fetch bitmap #%d, since total bitmaps = %d. \n\r", bitmapNumber, globalBitmapList.totalBitmaps);
 80020b2:	89fb      	ldrh	r3, [r7, #14]
 80020b4:	4a0c      	ldr	r2, [pc, #48]	; (80020e8 <fetchBitmap+0x54>)
 80020b6:	8812      	ldrh	r2, [r2, #0]
 80020b8:	4619      	mov	r1, r3
 80020ba:	480c      	ldr	r0, [pc, #48]	; (80020ec <fetchBitmap+0x58>)
 80020bc:	f008 fdbe 	bl	800ac3c <iprintf>
		return 0;
 80020c0:	2300      	movs	r3, #0
 80020c2:	e00d      	b.n	80020e0 <fetchBitmap+0x4c>
	}

	uint16_t bitmapSector = globalBitmapList.bitmapSectors[bitmapNumber];
 80020c4:	89fb      	ldrh	r3, [r7, #14]
 80020c6:	4a08      	ldr	r2, [pc, #32]	; (80020e8 <fetchBitmap+0x54>)
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	4413      	add	r3, r2
 80020cc:	889b      	ldrh	r3, [r3, #4]
 80020ce:	82fb      	strh	r3, [r7, #22]
	int count = readBitmap(bitmapSector, bitmapHeader, pixelArray, maxPixels);
 80020d0:	8af8      	ldrh	r0, [r7, #22]
 80020d2:	89bb      	ldrh	r3, [r7, #12]
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	68b9      	ldr	r1, [r7, #8]
 80020d8:	f001 fb76 	bl	80037c8 <readBitmap>
 80020dc:	6138      	str	r0, [r7, #16]
	return count;
 80020de:	693b      	ldr	r3, [r7, #16]

}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3718      	adds	r7, #24
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	20004188 	.word	0x20004188
 80020ec:	0800c348 	.word	0x0800c348

080020f0 <configFromUart>:

/*
 * Attempts to read configuration / debug data from UART and save them to external flash.
 * Returns: 0 when successful, 1 when no configuration data detected on uart, 2 or greater when configuration failed
 */
int configFromUart(){
 80020f0:	b5b0      	push	{r4, r5, r7, lr}
 80020f2:	f5ad 6d9b 	sub.w	sp, sp, #1240	; 0x4d8
 80020f6:	af7e      	add	r7, sp, #504	; 0x1f8

	char msg[128];

	int count = read_usart_message(msg, &huart1, sizeof(msg), NEWLINE);
 80020f8:	f507 7017 	add.w	r0, r7, #604	; 0x25c
 80020fc:	230d      	movs	r3, #13
 80020fe:	2280      	movs	r2, #128	; 0x80
 8002100:	4983      	ldr	r1, [pc, #524]	; (8002310 <configFromUart+0x220>)
 8002102:	f004 fb7b 	bl	80067fc <read_usart_message>
 8002106:	4603      	mov	r3, r0
 8002108:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc

	if(count == 0){
 800210c:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 8002110:	2b00      	cmp	r3, #0
 8002112:	d104      	bne.n	800211e <configFromUart+0x2e>
		printf("[cl] No data on uart.\n\r");
 8002114:	487f      	ldr	r0, [pc, #508]	; (8002314 <configFromUart+0x224>)
 8002116:	f008 fd91 	bl	800ac3c <iprintf>
		return 1;
 800211a:	2301      	movs	r3, #1
 800211c:	e0f3      	b.n	8002306 <configFromUart+0x216>
	}

	msg[count-1] = 0; //replace newline delimiter with null-termination
 800211e:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 8002122:	3b01      	subs	r3, #1
 8002124:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
 8002128:	443b      	add	r3, r7
 800212a:	2200      	movs	r2, #0
 800212c:	f803 2c84 	strb.w	r2, [r3, #-132]

	char configMsg[] = "config";
 8002130:	4a79      	ldr	r2, [pc, #484]	; (8002318 <configFromUart+0x228>)
 8002132:	f507 7315 	add.w	r3, r7, #596	; 0x254
 8002136:	e892 0003 	ldmia.w	r2, {r0, r1}
 800213a:	6018      	str	r0, [r3, #0]
 800213c:	3304      	adds	r3, #4
 800213e:	8019      	strh	r1, [r3, #0]
 8002140:	3302      	adds	r3, #2
 8002142:	0c0a      	lsrs	r2, r1, #16
 8002144:	701a      	strb	r2, [r3, #0]
	char bitmapMsg[] = "bitmap";
 8002146:	4a75      	ldr	r2, [pc, #468]	; (800231c <configFromUart+0x22c>)
 8002148:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 800214c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002150:	6018      	str	r0, [r3, #0]
 8002152:	3304      	adds	r3, #4
 8002154:	8019      	strh	r1, [r3, #0]
 8002156:	3302      	adds	r3, #2
 8002158:	0c0a      	lsrs	r2, r1, #16
 800215a:	701a      	strb	r2, [r3, #0]
	char deleteMsg[] = "delete bitmaps";
 800215c:	4b70      	ldr	r3, [pc, #448]	; (8002320 <configFromUart+0x230>)
 800215e:	f507 740f 	add.w	r4, r7, #572	; 0x23c
 8002162:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002164:	c407      	stmia	r4!, {r0, r1, r2}
 8002166:	8023      	strh	r3, [r4, #0]
 8002168:	3402      	adds	r4, #2
 800216a:	0c1b      	lsrs	r3, r3, #16
 800216c:	7023      	strb	r3, [r4, #0]
	char sreportMsg[] = "report screens";
 800216e:	4b6d      	ldr	r3, [pc, #436]	; (8002324 <configFromUart+0x234>)
 8002170:	f507 740b 	add.w	r4, r7, #556	; 0x22c
 8002174:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002176:	c407      	stmia	r4!, {r0, r1, r2}
 8002178:	8023      	strh	r3, [r4, #0]
 800217a:	3402      	adds	r4, #2
 800217c:	0c1b      	lsrs	r3, r3, #16
 800217e:	7023      	strb	r3, [r4, #0]
	char breportMsg[] = "report bitmaps";
 8002180:	4b69      	ldr	r3, [pc, #420]	; (8002328 <configFromUart+0x238>)
 8002182:	f507 7407 	add.w	r4, r7, #540	; 0x21c
 8002186:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002188:	c407      	stmia	r4!, {r0, r1, r2}
 800218a:	8023      	strh	r3, [r4, #0]
 800218c:	3402      	adds	r4, #2
 800218e:	0c1b      	lsrs	r3, r3, #16
 8002190:	7023      	strb	r3, [r4, #0]
	char hreportMsg[] = "hex report bitmaps";
 8002192:	4b66      	ldr	r3, [pc, #408]	; (800232c <configFromUart+0x23c>)
 8002194:	f507 7402 	add.w	r4, r7, #520	; 0x208
 8002198:	461d      	mov	r5, r3
 800219a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800219c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800219e:	682b      	ldr	r3, [r5, #0]
 80021a0:	461a      	mov	r2, r3
 80021a2:	8022      	strh	r2, [r4, #0]
 80021a4:	3402      	adds	r4, #2
 80021a6:	0c1b      	lsrs	r3, r3, #16
 80021a8:	7023      	strb	r3, [r4, #0]

	if(strcmp(configMsg, msg) == 0){
 80021aa:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 80021ae:	f507 7315 	add.w	r3, r7, #596	; 0x254
 80021b2:	4611      	mov	r1, r2
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7fe f80b 	bl	80001d0 <strcmp>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d106      	bne.n	80021ce <configFromUart+0xde>
		printf("[cl] Okay, proceeding to configure screens.\n\r");
 80021c0:	485b      	ldr	r0, [pc, #364]	; (8002330 <configFromUart+0x240>)
 80021c2:	f008 fd3b 	bl	800ac3c <iprintf>
		return configScreensFromUart();
 80021c6:	f000 fbd5 	bl	8002974 <configScreensFromUart>
 80021ca:	4603      	mov	r3, r0
 80021cc:	e09b      	b.n	8002306 <configFromUart+0x216>
	}
	else if(strcmp(bitmapMsg, msg) == 0){
 80021ce:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 80021d2:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 80021d6:	4611      	mov	r1, r2
 80021d8:	4618      	mov	r0, r3
 80021da:	f7fd fff9 	bl	80001d0 <strcmp>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d106      	bne.n	80021f2 <configFromUart+0x102>
		printf("[cl] Okay, proceeding to write bitmap.\n\r");
 80021e4:	4853      	ldr	r0, [pc, #332]	; (8002334 <configFromUart+0x244>)
 80021e6:	f008 fd29 	bl	800ac3c <iprintf>
		return configBitmapFromUart();
 80021ea:	f000 f8b3 	bl	8002354 <configBitmapFromUart>
 80021ee:	4603      	mov	r3, r0
 80021f0:	e089      	b.n	8002306 <configFromUart+0x216>
	}
	else if(strcmp(deleteMsg, msg) == 0){
 80021f2:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 80021f6:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 80021fa:	4611      	mov	r1, r2
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7fd ffe7 	bl	80001d0 <strcmp>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d106      	bne.n	8002216 <configFromUart+0x126>
		printf("[cl] Okay, marking all saved bitmaps for deletion.\n\r");
 8002208:	484b      	ldr	r0, [pc, #300]	; (8002338 <configFromUart+0x248>)
 800220a:	f008 fd17 	bl	800ac3c <iprintf>
		return configMarkBitmapsForDelete();
 800220e:	f000 fb71 	bl	80028f4 <configMarkBitmapsForDelete>
 8002212:	4603      	mov	r3, r0
 8002214:	e077      	b.n	8002306 <configFromUart+0x216>
	}
	else if(strcmp(sreportMsg, msg) == 0){
 8002216:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 800221a:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 800221e:	4611      	mov	r1, r2
 8002220:	4618      	mov	r0, r3
 8002222:	f7fd ffd5 	bl	80001d0 <strcmp>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d118      	bne.n	800225e <configFromUart+0x16e>
		printf("[cl] Okay, reporting screens.\n\r");
 800222c:	4843      	ldr	r0, [pc, #268]	; (800233c <configFromUart+0x24c>)
 800222e:	f008 fd05 	bl	800ac3c <iprintf>
		struct generalConfig gconf;
		readGeneralConfig(&gconf);
 8002232:	1d3b      	adds	r3, r7, #4
 8002234:	4618      	mov	r0, r3
 8002236:	f001 f9e5 	bl	8003604 <readGeneralConfig>
		printAllScreens(gconf);
 800223a:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800223e:	f5a3 7437 	sub.w	r4, r3, #732	; 0x2dc
 8002242:	4668      	mov	r0, sp
 8002244:	f104 0310 	add.w	r3, r4, #16
 8002248:	f44f 72f9 	mov.w	r2, #498	; 0x1f2
 800224c:	4619      	mov	r1, r3
 800224e:	f008 fcdf 	bl	800ac10 <memcpy>
 8002252:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002256:	f001 fb13 	bl	8003880 <printAllScreens>
		return 0;
 800225a:	2300      	movs	r3, #0
 800225c:	e053      	b.n	8002306 <configFromUart+0x216>
	}
	else if(strcmp(breportMsg, msg) == 0){
 800225e:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 8002262:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8002266:	4611      	mov	r1, r2
 8002268:	4618      	mov	r0, r3
 800226a:	f7fd ffb1 	bl	80001d0 <strcmp>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d107      	bne.n	8002284 <configFromUart+0x194>
		printf("[cl] Okay, reporting bitmaps.\n\r");
 8002274:	4832      	ldr	r0, [pc, #200]	; (8002340 <configFromUart+0x250>)
 8002276:	f008 fce1 	bl	800ac3c <iprintf>
		reportBitmaps(0);
 800227a:	2000      	movs	r0, #0
 800227c:	f001 fc94 	bl	8003ba8 <reportBitmaps>
		return 0;
 8002280:	2300      	movs	r3, #0
 8002282:	e040      	b.n	8002306 <configFromUart+0x216>
		}
	else if(strcmp(hreportMsg, msg) == 0){
 8002284:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 8002288:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800228c:	4611      	mov	r1, r2
 800228e:	4618      	mov	r0, r3
 8002290:	f7fd ff9e 	bl	80001d0 <strcmp>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d107      	bne.n	80022aa <configFromUart+0x1ba>
		printf("[cl] Okay, printing bitmaps' hex data...\n\r");
 800229a:	482a      	ldr	r0, [pc, #168]	; (8002344 <configFromUart+0x254>)
 800229c:	f008 fcce 	bl	800ac3c <iprintf>
		reportBitmaps(1);
 80022a0:	2001      	movs	r0, #1
 80022a2:	f001 fc81 	bl	8003ba8 <reportBitmaps>
		return 0;
 80022a6:	2300      	movs	r3, #0
 80022a8:	e02d      	b.n	8002306 <configFromUart+0x216>
		}
	else{
		printf("[cl] Unexpected first msg. Got %s, which is not a recognised command.\n\r", msg);
 80022aa:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 80022ae:	4619      	mov	r1, r3
 80022b0:	4825      	ldr	r0, [pc, #148]	; (8002348 <configFromUart+0x258>)
 80022b2:	f008 fcc3 	bl	800ac3c <iprintf>
		printf("[cl] Known commands: \n\r");
 80022b6:	4825      	ldr	r0, [pc, #148]	; (800234c <configFromUart+0x25c>)
 80022b8:	f008 fcc0 	bl	800ac3c <iprintf>
		printf("[cl] %s \n\r", configMsg);
 80022bc:	f507 7315 	add.w	r3, r7, #596	; 0x254
 80022c0:	4619      	mov	r1, r3
 80022c2:	4823      	ldr	r0, [pc, #140]	; (8002350 <configFromUart+0x260>)
 80022c4:	f008 fcba 	bl	800ac3c <iprintf>
		printf("[cl] %s \n\r", bitmapMsg);
 80022c8:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 80022cc:	4619      	mov	r1, r3
 80022ce:	4820      	ldr	r0, [pc, #128]	; (8002350 <configFromUart+0x260>)
 80022d0:	f008 fcb4 	bl	800ac3c <iprintf>
		printf("[cl] %s \n\r", deleteMsg);
 80022d4:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 80022d8:	4619      	mov	r1, r3
 80022da:	481d      	ldr	r0, [pc, #116]	; (8002350 <configFromUart+0x260>)
 80022dc:	f008 fcae 	bl	800ac3c <iprintf>
		printf("[cl] %s \n\r", sreportMsg);
 80022e0:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 80022e4:	4619      	mov	r1, r3
 80022e6:	481a      	ldr	r0, [pc, #104]	; (8002350 <configFromUart+0x260>)
 80022e8:	f008 fca8 	bl	800ac3c <iprintf>
		printf("[cl] %s \n\r", breportMsg);
 80022ec:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 80022f0:	4619      	mov	r1, r3
 80022f2:	4817      	ldr	r0, [pc, #92]	; (8002350 <configFromUart+0x260>)
 80022f4:	f008 fca2 	bl	800ac3c <iprintf>
		printf("[cl] %s \n\r", hreportMsg);
 80022f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022fc:	4619      	mov	r1, r3
 80022fe:	4814      	ldr	r0, [pc, #80]	; (8002350 <configFromUart+0x260>)
 8002300:	f008 fc9c 	bl	800ac3c <iprintf>
		return 1;
 8002304:	2301      	movs	r3, #1
	}
}
 8002306:	4618      	mov	r0, r3
 8002308:	f507 7738 	add.w	r7, r7, #736	; 0x2e0
 800230c:	46bd      	mov	sp, r7
 800230e:	bdb0      	pop	{r4, r5, r7, pc}
 8002310:	200040b0 	.word	0x200040b0
 8002314:	0800c384 	.word	0x0800c384
 8002318:	0800c508 	.word	0x0800c508
 800231c:	0800c510 	.word	0x0800c510
 8002320:	0800c518 	.word	0x0800c518
 8002324:	0800c528 	.word	0x0800c528
 8002328:	0800c538 	.word	0x0800c538
 800232c:	0800c548 	.word	0x0800c548
 8002330:	0800c39c 	.word	0x0800c39c
 8002334:	0800c3cc 	.word	0x0800c3cc
 8002338:	0800c3f8 	.word	0x0800c3f8
 800233c:	0800c430 	.word	0x0800c430
 8002340:	0800c450 	.word	0x0800c450
 8002344:	0800c470 	.word	0x0800c470
 8002348:	0800c49c 	.word	0x0800c49c
 800234c:	0800c4e4 	.word	0x0800c4e4
 8002350:	0800c4fc 	.word	0x0800c4fc

08002354 <configBitmapFromUart>:

int configBitmapFromUart(){
 8002354:	b580      	push	{r7, lr}
 8002356:	f5ad 5dc5 	sub.w	sp, sp, #6304	; 0x18a0
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
	int count;
	char msg[128];
	struct bitmapList blist;
	readBitmapList(&blist);
 800235e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002362:	f103 030c 	add.w	r3, r3, #12
 8002366:	4618      	mov	r0, r3
 8002368:	f001 f970 	bl	800364c <readBitmapList>
	int currentSector = blist.lastUsedSector + 1;
 800236c:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8002370:	f103 0310 	add.w	r3, r3, #16
 8002374:	f6a3 03a4 	subw	r3, r3, #2212	; 0x8a4
 8002378:	885b      	ldrh	r3, [r3, #2]
 800237a:	3301      	adds	r3, #1
 800237c:	f507 52c5 	add.w	r2, r7, #6304	; 0x18a0
 8002380:	f102 020c 	add.w	r2, r2, #12
 8002384:	6013      	str	r3, [r2, #0]
	if(currentSector > MAX_SECTOR){
 8002386:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 800238a:	f103 030c 	add.w	r3, r3, #12
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002394:	db0d      	blt.n	80023b2 <configBitmapFromUart+0x5e>
		printf("[cl] Error trying to write bitmap to memory: No more free sectors. Last used: %d \n\r", blist.lastUsedSector);
 8002396:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 800239a:	f103 0310 	add.w	r3, r3, #16
 800239e:	f6a3 03a4 	subw	r3, r3, #2212	; 0x8a4
 80023a2:	885b      	ldrh	r3, [r3, #2]
 80023a4:	4619      	mov	r1, r3
 80023a6:	48cc      	ldr	r0, [pc, #816]	; (80026d8 <configBitmapFromUart+0x384>)
 80023a8:	f008 fc48 	bl	800ac3c <iprintf>
		return 1000;
 80023ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023b0:	e292      	b.n	80028d8 <configBitmapFromUart+0x584>
	}
	if(blist.totalBitmaps>=MAX_BITMAPS){
 80023b2:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 80023b6:	f103 0310 	add.w	r3, r3, #16
 80023ba:	f6a3 03a4 	subw	r3, r3, #2212	; 0x8a4
 80023be:	881b      	ldrh	r3, [r3, #0]
 80023c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023c4:	d307      	bcc.n	80023d6 <configBitmapFromUart+0x82>
		printf("[cl] Error trying to write bitmap to memory: Maximum number of bitmaps (%d) exceeded. \n\r", MAX_BITMAPS);
 80023c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80023ca:	48c4      	ldr	r0, [pc, #784]	; (80026dc <configBitmapFromUart+0x388>)
 80023cc:	f008 fc36 	bl	800ac3c <iprintf>
		return 1001;
 80023d0:	f240 33e9 	movw	r3, #1001	; 0x3e9
 80023d4:	e280      	b.n	80028d8 <configBitmapFromUart+0x584>
	}
	blist.bitmapSectors[blist.totalBitmaps] = currentSector;
 80023d6:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 80023da:	f103 0310 	add.w	r3, r3, #16
 80023de:	f6a3 03a4 	subw	r3, r3, #2212	; 0x8a4
 80023e2:	881b      	ldrh	r3, [r3, #0]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 80023ea:	f103 030c 	add.w	r3, r3, #12
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	b299      	uxth	r1, r3
 80023f2:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 80023f6:	f103 0310 	add.w	r3, r3, #16
 80023fa:	f6a3 02a4 	subw	r2, r3, #2212	; 0x8a4
 80023fe:	0043      	lsls	r3, r0, #1
 8002400:	4413      	add	r3, r2
 8002402:	460a      	mov	r2, r1
 8002404:	809a      	strh	r2, [r3, #4]
 	blist.totalBitmaps++;
 8002406:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 800240a:	f103 0310 	add.w	r3, r3, #16
 800240e:	f6a3 03a4 	subw	r3, r3, #2212	; 0x8a4
 8002412:	881b      	ldrh	r3, [r3, #0]
 8002414:	3301      	adds	r3, #1
 8002416:	b29a      	uxth	r2, r3
 8002418:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 800241c:	f103 0310 	add.w	r3, r3, #16
 8002420:	f6a3 03a4 	subw	r3, r3, #2212	; 0x8a4
 8002424:	801a      	strh	r2, [r3, #0]

 	struct bitmap bm;

 	UART_READ_STRING();
 8002426:	f507 50c0 	add.w	r0, r7, #6144	; 0x1800
 800242a:	f100 0010 	add.w	r0, r0, #16
 800242e:	230d      	movs	r3, #13
 8002430:	2280      	movs	r2, #128	; 0x80
 8002432:	49ab      	ldr	r1, [pc, #684]	; (80026e0 <configBitmapFromUart+0x38c>)
 8002434:	f004 f9e2 	bl	80067fc <read_usart_message>
 8002438:	4603      	mov	r3, r0
 800243a:	f507 52c4 	add.w	r2, r7, #6272	; 0x1880
 800243e:	f102 021c 	add.w	r2, r2, #28
 8002442:	6013      	str	r3, [r2, #0]
 8002444:	f507 53c4 	add.w	r3, r7, #6272	; 0x1880
 8002448:	f103 031c 	add.w	r3, r3, #28
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d0e9      	beq.n	8002426 <configBitmapFromUart+0xd2>
 8002452:	f507 53c4 	add.w	r3, r7, #6272	; 0x1880
 8002456:	f103 031c 	add.w	r3, r3, #28
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	3b01      	subs	r3, #1
 800245e:	f503 53c5 	add.w	r3, r3, #6304	; 0x18a0
 8002462:	f103 0310 	add.w	r3, r3, #16
 8002466:	443b      	add	r3, r7
 8002468:	2200      	movs	r2, #0
 800246a:	f803 2ca0 	strb.w	r2, [r3, #-160]
 	bm.xsize = atoi(msg);
 800246e:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8002472:	f103 0310 	add.w	r3, r3, #16
 8002476:	4618      	mov	r0, r3
 8002478:	f008 fb9c 	bl	800abb4 <atoi>
 800247c:	4603      	mov	r3, r0
 800247e:	b29a      	uxth	r2, r3
 8002480:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8002484:	f103 0310 	add.w	r3, r3, #16
 8002488:	f6a3 03ac 	subw	r3, r3, #2220	; 0x8ac
 800248c:	805a      	strh	r2, [r3, #2]
 	UART_READ_STRING();
 800248e:	f507 50c0 	add.w	r0, r7, #6144	; 0x1800
 8002492:	f100 0010 	add.w	r0, r0, #16
 8002496:	230d      	movs	r3, #13
 8002498:	2280      	movs	r2, #128	; 0x80
 800249a:	4991      	ldr	r1, [pc, #580]	; (80026e0 <configBitmapFromUart+0x38c>)
 800249c:	f004 f9ae 	bl	80067fc <read_usart_message>
 80024a0:	4603      	mov	r3, r0
 80024a2:	f507 52c4 	add.w	r2, r7, #6272	; 0x1880
 80024a6:	f102 021c 	add.w	r2, r2, #28
 80024aa:	6013      	str	r3, [r2, #0]
 80024ac:	f507 53c4 	add.w	r3, r7, #6272	; 0x1880
 80024b0:	f103 031c 	add.w	r3, r3, #28
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d0e9      	beq.n	800248e <configBitmapFromUart+0x13a>
 80024ba:	f507 53c4 	add.w	r3, r7, #6272	; 0x1880
 80024be:	f103 031c 	add.w	r3, r3, #28
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	3b01      	subs	r3, #1
 80024c6:	f503 53c5 	add.w	r3, r3, #6304	; 0x18a0
 80024ca:	f103 0310 	add.w	r3, r3, #16
 80024ce:	443b      	add	r3, r7
 80024d0:	2200      	movs	r2, #0
 80024d2:	f803 2ca0 	strb.w	r2, [r3, #-160]
 	bm.ysize = atoi(msg);
 80024d6:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 80024da:	f103 0310 	add.w	r3, r3, #16
 80024de:	4618      	mov	r0, r3
 80024e0:	f008 fb68 	bl	800abb4 <atoi>
 80024e4:	4603      	mov	r3, r0
 80024e6:	b29a      	uxth	r2, r3
 80024e8:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 80024ec:	f103 0310 	add.w	r3, r3, #16
 80024f0:	f6a3 03ac 	subw	r3, r3, #2220	; 0x8ac
 80024f4:	809a      	strh	r2, [r3, #4]

 	bm.bitmapNumber = blist.totalBitmaps-1;
 80024f6:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 80024fa:	f103 0310 	add.w	r3, r3, #16
 80024fe:	f6a3 03a4 	subw	r3, r3, #2212	; 0x8a4
 8002502:	881b      	ldrh	r3, [r3, #0]
 8002504:	3b01      	subs	r3, #1
 8002506:	b29a      	uxth	r2, r3
 8002508:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 800250c:	f103 0310 	add.w	r3, r3, #16
 8002510:	f6a3 03ac 	subw	r3, r3, #2220	; 0x8ac
 8002514:	801a      	strh	r2, [r3, #0]

 	int expectedBytes = 2*bm.xsize*bm.ysize;
 8002516:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 800251a:	f103 0310 	add.w	r3, r3, #16
 800251e:	f6a3 03ac 	subw	r3, r3, #2220	; 0x8ac
 8002522:	885b      	ldrh	r3, [r3, #2]
 8002524:	461a      	mov	r2, r3
 8002526:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 800252a:	f103 0310 	add.w	r3, r3, #16
 800252e:	f6a3 03ac 	subw	r3, r3, #2220	; 0x8ac
 8002532:	889b      	ldrh	r3, [r3, #4]
 8002534:	fb02 f303 	mul.w	r3, r2, r3
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	f507 52c4 	add.w	r2, r7, #6272	; 0x1880
 800253e:	f102 0218 	add.w	r2, r2, #24
 8002542:	6013      	str	r3, [r2, #0]
 	int spaceLeft = SECTOR_SIZE*(MAX_SECTOR+1-currentSector) - sizeof(bm);
 8002544:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8002548:	f103 030c 	add.w	r3, r3, #12
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002552:	031b      	lsls	r3, r3, #12
 8002554:	3b06      	subs	r3, #6
 8002556:	f507 52c4 	add.w	r2, r7, #6272	; 0x1880
 800255a:	f102 0214 	add.w	r2, r2, #20
 800255e:	6013      	str	r3, [r2, #0]

 	printf("[cl] Okay, ready to parse bitmap #%d, size %dx%d pixels.\n\r", bm.bitmapNumber, bm.xsize, bm.ysize);
 8002560:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8002564:	f103 0310 	add.w	r3, r3, #16
 8002568:	f6a3 03ac 	subw	r3, r3, #2220	; 0x8ac
 800256c:	881b      	ldrh	r3, [r3, #0]
 800256e:	4619      	mov	r1, r3
 8002570:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8002574:	f103 0310 	add.w	r3, r3, #16
 8002578:	f6a3 03ac 	subw	r3, r3, #2220	; 0x8ac
 800257c:	885b      	ldrh	r3, [r3, #2]
 800257e:	461a      	mov	r2, r3
 8002580:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8002584:	f103 0310 	add.w	r3, r3, #16
 8002588:	f6a3 03ac 	subw	r3, r3, #2220	; 0x8ac
 800258c:	889b      	ldrh	r3, [r3, #4]
 800258e:	4855      	ldr	r0, [pc, #340]	; (80026e4 <configBitmapFromUart+0x390>)
 8002590:	f008 fb54 	bl	800ac3c <iprintf>

 	if(expectedBytes > spaceLeft){
 8002594:	f507 53c4 	add.w	r3, r7, #6272	; 0x1880
 8002598:	f103 0318 	add.w	r3, r3, #24
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	f507 53c4 	add.w	r3, r7, #6272	; 0x1880
 80025a2:	f103 0314 	add.w	r3, r3, #20
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	dd0c      	ble.n	80025c6 <configBitmapFromUart+0x272>
 		printf("[cl] WARNING: This bitmap is not going to fit into memory! Only first %d bytes of total %d will be written. \n\r", spaceLeft, expectedBytes);
 80025ac:	f507 53c4 	add.w	r3, r7, #6272	; 0x1880
 80025b0:	f103 0318 	add.w	r3, r3, #24
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	f507 53c4 	add.w	r3, r7, #6272	; 0x1880
 80025ba:	f103 0314 	add.w	r3, r3, #20
 80025be:	6819      	ldr	r1, [r3, #0]
 80025c0:	4849      	ldr	r0, [pc, #292]	; (80026e8 <configBitmapFromUart+0x394>)
 80025c2:	f008 fb3b 	bl	800ac3c <iprintf>
 	}

 	uint8_t sectorBuffer[SECTOR_SIZE];
 	int sectorBufferIndex = 0;
 80025c6:	2300      	movs	r3, #0
 80025c8:	f507 52c5 	add.w	r2, r7, #6304	; 0x18a0
 80025cc:	f102 0208 	add.w	r2, r2, #8
 80025d0:	6013      	str	r3, [r2, #0]

 	memcpy(sectorBuffer+sectorBufferIndex, (uint8_t *) &bm, sizeof(bm));
 80025d2:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 80025d6:	f103 0308 	add.w	r3, r3, #8
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	f107 0310 	add.w	r3, r7, #16
 80025e0:	3b0c      	subs	r3, #12
 80025e2:	4413      	add	r3, r2
 80025e4:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 80025e8:	f101 0104 	add.w	r1, r1, #4
 80025ec:	2206      	movs	r2, #6
 80025ee:	4618      	mov	r0, r3
 80025f0:	f008 fb0e 	bl	800ac10 <memcpy>
 	sectorBufferIndex += sizeof(bm);
 80025f4:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 80025f8:	f103 0308 	add.w	r3, r3, #8
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	3306      	adds	r3, #6
 8002600:	f507 52c5 	add.w	r2, r7, #6304	; 0x18a0
 8002604:	f102 0208 	add.w	r2, r2, #8
 8002608:	6013      	str	r3, [r2, #0]

 	int bytesLeft = expectedBytes;
 800260a:	f507 53c4 	add.w	r3, r7, #6272	; 0x1880
 800260e:	f103 0318 	add.w	r3, r3, #24
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f507 52c5 	add.w	r2, r7, #6304	; 0x18a0
 8002618:	f102 0204 	add.w	r2, r2, #4
 800261c:	6013      	str	r3, [r2, #0]
 	int updateCount = expectedBytes / 10;
 800261e:	f507 53c4 	add.w	r3, r7, #6272	; 0x1880
 8002622:	f103 0318 	add.w	r3, r3, #24
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a30      	ldr	r2, [pc, #192]	; (80026ec <configBitmapFromUart+0x398>)
 800262a:	fb82 1203 	smull	r1, r2, r2, r3
 800262e:	1092      	asrs	r2, r2, #2
 8002630:	17db      	asrs	r3, r3, #31
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	f507 52c5 	add.w	r2, r7, #6304	; 0x18a0
 8002638:	6013      	str	r3, [r2, #0]
 	if(updateCount == 0){
 800263a:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2b00      	cmp	r3, #0
 8002642:	f040 80f0 	bne.w	8002826 <configBitmapFromUart+0x4d2>
 		updateCount = 1;
 8002646:	2301      	movs	r3, #1
 8002648:	f507 52c5 	add.w	r2, r7, #6304	; 0x18a0
 800264c:	6013      	str	r3, [r2, #0]
 	}

 	while(bytesLeft > 0){
 800264e:	e0ea      	b.n	8002826 <configBitmapFromUart+0x4d2>
 		if(bytesLeft %updateCount == 0){
 8002650:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8002654:	f103 0304 	add.w	r3, r3, #4
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f507 52c5 	add.w	r2, r7, #6304	; 0x18a0
 800265e:	6812      	ldr	r2, [r2, #0]
 8002660:	fb93 f2f2 	sdiv	r2, r3, r2
 8002664:	f507 51c5 	add.w	r1, r7, #6304	; 0x18a0
 8002668:	6809      	ldr	r1, [r1, #0]
 800266a:	fb01 f202 	mul.w	r2, r1, r2
 800266e:	1a9b      	subs	r3, r3, r2
 8002670:	2b00      	cmp	r3, #0
 8002672:	d107      	bne.n	8002684 <configBitmapFromUart+0x330>
 			printf("[cl] %d bytes left.\n\r", bytesLeft);
 8002674:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8002678:	f103 0304 	add.w	r3, r3, #4
 800267c:	6819      	ldr	r1, [r3, #0]
 800267e:	481c      	ldr	r0, [pc, #112]	; (80026f0 <configBitmapFromUart+0x39c>)
 8002680:	f008 fadc 	bl	800ac3c <iprintf>
 		}
 		do{count = read_usart_message(msg, &huart1, 2, NEWLINE);} while (count==0);
 8002684:	f507 50c0 	add.w	r0, r7, #6144	; 0x1800
 8002688:	f100 0010 	add.w	r0, r0, #16
 800268c:	230d      	movs	r3, #13
 800268e:	2202      	movs	r2, #2
 8002690:	4913      	ldr	r1, [pc, #76]	; (80026e0 <configBitmapFromUart+0x38c>)
 8002692:	f004 f8b3 	bl	80067fc <read_usart_message>
 8002696:	4603      	mov	r3, r0
 8002698:	f507 52c4 	add.w	r2, r7, #6272	; 0x1880
 800269c:	f102 021c 	add.w	r2, r2, #28
 80026a0:	6013      	str	r3, [r2, #0]
 80026a2:	f507 53c4 	add.w	r3, r7, #6272	; 0x1880
 80026a6:	f103 031c 	add.w	r3, r3, #28
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d0e9      	beq.n	8002684 <configBitmapFromUart+0x330>
 		if(count!=2){
 80026b0:	f507 53c4 	add.w	r3, r7, #6272	; 0x1880
 80026b4:	f103 031c 	add.w	r3, r3, #28
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d01c      	beq.n	80026f8 <configBitmapFromUart+0x3a4>
 			printf("[cl] Error: Unexpected end of bitmap #%d data.\n\r.", bm.bitmapNumber);
 80026be:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 80026c2:	f103 0310 	add.w	r3, r3, #16
 80026c6:	f6a3 03ac 	subw	r3, r3, #2220	; 0x8ac
 80026ca:	881b      	ldrh	r3, [r3, #0]
 80026cc:	4619      	mov	r1, r3
 80026ce:	4809      	ldr	r0, [pc, #36]	; (80026f4 <configBitmapFromUart+0x3a0>)
 80026d0:	f008 fab4 	bl	800ac3c <iprintf>
 			break;
 80026d4:	e0af      	b.n	8002836 <configBitmapFromUart+0x4e2>
 80026d6:	bf00      	nop
 80026d8:	0800c55c 	.word	0x0800c55c
 80026dc:	0800c5b0 	.word	0x0800c5b0
 80026e0:	200040b0 	.word	0x200040b0
 80026e4:	0800c60c 	.word	0x0800c60c
 80026e8:	0800c648 	.word	0x0800c648
 80026ec:	66666667 	.word	0x66666667
 80026f0:	0800c6b8 	.word	0x0800c6b8
 80026f4:	0800c6d0 	.word	0x0800c6d0
 		}
 		msg[2] = 0;
 80026f8:	2300      	movs	r3, #0
 80026fa:	f507 52c0 	add.w	r2, r7, #6144	; 0x1800
 80026fe:	f102 0212 	add.w	r2, r2, #18
 8002702:	7013      	strb	r3, [r2, #0]
		uint8_t deHexedByte = (uint8_t) strtol(msg, NULL, 16);
 8002704:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8002708:	f103 0310 	add.w	r3, r3, #16
 800270c:	2210      	movs	r2, #16
 800270e:	2100      	movs	r1, #0
 8002710:	4618      	mov	r0, r3
 8002712:	f008 fb55 	bl	800adc0 <strtol>
 8002716:	4603      	mov	r3, r0
 8002718:	f507 52c4 	add.w	r2, r7, #6272	; 0x1880
 800271c:	f102 0213 	add.w	r2, r2, #19
 8002720:	7013      	strb	r3, [r2, #0]
		sectorBuffer[sectorBufferIndex] = deHexedByte;
 8002722:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8002726:	f6a3 02ac 	subw	r2, r3, #2220	; 0x8ac
 800272a:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 800272e:	f103 0308 	add.w	r3, r3, #8
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4413      	add	r3, r2
 8002736:	f507 52c4 	add.w	r2, r7, #6272	; 0x1880
 800273a:	f102 0213 	add.w	r2, r2, #19
 800273e:	7812      	ldrb	r2, [r2, #0]
 8002740:	701a      	strb	r2, [r3, #0]
		sectorBufferIndex++;
 8002742:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8002746:	f103 0308 	add.w	r3, r3, #8
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	3301      	adds	r3, #1
 800274e:	f507 52c5 	add.w	r2, r7, #6304	; 0x18a0
 8002752:	f102 0208 	add.w	r2, r2, #8
 8002756:	6013      	str	r3, [r2, #0]
		bytesLeft--;
 8002758:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 800275c:	f103 0304 	add.w	r3, r3, #4
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	3b01      	subs	r3, #1
 8002764:	f507 52c5 	add.w	r2, r7, #6304	; 0x18a0
 8002768:	f102 0204 	add.w	r2, r2, #4
 800276c:	6013      	str	r3, [r2, #0]
		if(sectorBufferIndex == SECTOR_SIZE || bytesLeft == 0){
 800276e:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8002772:	f103 0308 	add.w	r3, r3, #8
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800277c:	d006      	beq.n	800278c <configBitmapFromUart+0x438>
 800277e:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8002782:	f103 0304 	add.w	r3, r3, #4
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d14c      	bne.n	8002826 <configBitmapFromUart+0x4d2>
			ext_flash_erase_4kB(currentSector*SECTOR_SIZE);
 800278c:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8002790:	f103 030c 	add.w	r3, r3, #12
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	031b      	lsls	r3, r3, #12
 8002798:	4618      	mov	r0, r3
 800279a:	f001 fb23 	bl	8003de4 <ext_flash_erase_4kB>
			ext_flash_write_multipage(currentSector*SECTOR_SIZE, sectorBuffer, sectorBufferIndex);
 800279e:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 80027a2:	f103 030c 	add.w	r3, r3, #12
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	031b      	lsls	r3, r3, #12
 80027aa:	4618      	mov	r0, r3
 80027ac:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 80027b0:	f103 0308 	add.w	r3, r3, #8
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	f107 0310 	add.w	r3, r7, #16
 80027ba:	3b0c      	subs	r3, #12
 80027bc:	4619      	mov	r1, r3
 80027be:	f001 fc2b 	bl	8004018 <ext_flash_write_multipage>
			sectorBufferIndex = 0;
 80027c2:	2300      	movs	r3, #0
 80027c4:	f507 52c5 	add.w	r2, r7, #6304	; 0x18a0
 80027c8:	f102 0208 	add.w	r2, r2, #8
 80027cc:	6013      	str	r3, [r2, #0]
			if(bytesLeft > 0){
 80027ce:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 80027d2:	f103 0304 	add.w	r3, r3, #4
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	dd24      	ble.n	8002826 <configBitmapFromUart+0x4d2>
				if(currentSector == MAX_SECTOR){
 80027dc:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 80027e0:	f103 030c 	add.w	r3, r3, #12
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d110      	bne.n	8002810 <configBitmapFromUart+0x4bc>
					printf("[cl] Warning: Ran out of external memory while writing bitmap #%d. Last %d bytes not saved. \n\r", bm.bitmapNumber, bytesLeft);
 80027ee:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 80027f2:	f103 0310 	add.w	r3, r3, #16
 80027f6:	f6a3 03ac 	subw	r3, r3, #2220	; 0x8ac
 80027fa:	881b      	ldrh	r3, [r3, #0]
 80027fc:	f507 52c5 	add.w	r2, r7, #6304	; 0x18a0
 8002800:	f102 0204 	add.w	r2, r2, #4
 8002804:	6812      	ldr	r2, [r2, #0]
 8002806:	4619      	mov	r1, r3
 8002808:	4836      	ldr	r0, [pc, #216]	; (80028e4 <configBitmapFromUart+0x590>)
 800280a:	f008 fa17 	bl	800ac3c <iprintf>
					break;
 800280e:	e012      	b.n	8002836 <configBitmapFromUart+0x4e2>
				}
				currentSector++;
 8002810:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8002814:	f103 030c 	add.w	r3, r3, #12
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	3301      	adds	r3, #1
 800281c:	f507 52c5 	add.w	r2, r7, #6304	; 0x18a0
 8002820:	f102 020c 	add.w	r2, r2, #12
 8002824:	6013      	str	r3, [r2, #0]
 	while(bytesLeft > 0){
 8002826:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 800282a:	f103 0304 	add.w	r3, r3, #4
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2b00      	cmp	r3, #0
 8002832:	f73f af0d 	bgt.w	8002650 <configBitmapFromUart+0x2fc>
			}
		}
 	}
 	read_usart_message(msg, &huart1, 2, NEWLINE); //get rid of newline left in buffer after reading last 2 chars
 8002836:	f507 50c0 	add.w	r0, r7, #6144	; 0x1800
 800283a:	f100 0010 	add.w	r0, r0, #16
 800283e:	230d      	movs	r3, #13
 8002840:	2202      	movs	r2, #2
 8002842:	4929      	ldr	r1, [pc, #164]	; (80028e8 <configBitmapFromUart+0x594>)
 8002844:	f003 ffda 	bl	80067fc <read_usart_message>

 	blist.lastUsedSector = currentSector;
 8002848:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 800284c:	f103 030c 	add.w	r3, r3, #12
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	b29a      	uxth	r2, r3
 8002854:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8002858:	f103 0310 	add.w	r3, r3, #16
 800285c:	f6a3 03a4 	subw	r3, r3, #2212	; 0x8a4
 8002860:	805a      	strh	r2, [r3, #2]
 	memcpy(sectorBuffer, (uint8_t *) &blist, sizeof(blist));
 8002862:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8002866:	f101 010c 	add.w	r1, r1, #12
 800286a:	f107 0310 	add.w	r3, r7, #16
 800286e:	3b0c      	subs	r3, #12
 8002870:	f640 0204 	movw	r2, #2052	; 0x804
 8002874:	4618      	mov	r0, r3
 8002876:	f008 f9cb 	bl	800ac10 <memcpy>
 	ext_flash_erase_4kB(BITMAP_LIST_SECTOR*SECTOR_SIZE);
 800287a:	f44f 2048 	mov.w	r0, #819200	; 0xc8000
 800287e:	f001 fab1 	bl	8003de4 <ext_flash_erase_4kB>
 	ext_flash_write_multipage(BITMAP_LIST_SECTOR*SECTOR_SIZE, sectorBuffer, sizeof(blist));
 8002882:	f107 0310 	add.w	r3, r7, #16
 8002886:	3b0c      	subs	r3, #12
 8002888:	f640 0204 	movw	r2, #2052	; 0x804
 800288c:	4619      	mov	r1, r3
 800288e:	f44f 2048 	mov.w	r0, #819200	; 0xc8000
 8002892:	f001 fbc1 	bl	8004018 <ext_flash_write_multipage>

	if(bytesLeft > 0){
 8002896:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 800289a:	f103 0304 	add.w	r3, r3, #4
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	dd0d      	ble.n	80028c0 <configBitmapFromUart+0x56c>
		printf("[cl] Bitmap #%d has been PARTIALLY written.\n\r", bm.bitmapNumber);
 80028a4:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 80028a8:	f103 0310 	add.w	r3, r3, #16
 80028ac:	f6a3 03ac 	subw	r3, r3, #2220	; 0x8ac
 80028b0:	881b      	ldrh	r3, [r3, #0]
 80028b2:	4619      	mov	r1, r3
 80028b4:	480d      	ldr	r0, [pc, #52]	; (80028ec <configBitmapFromUart+0x598>)
 80028b6:	f008 f9c1 	bl	800ac3c <iprintf>
		return 1005;
 80028ba:	f240 33ed 	movw	r3, #1005	; 0x3ed
 80028be:	e00b      	b.n	80028d8 <configBitmapFromUart+0x584>
	}
	printf("[cl] Bitmap #%d has been written.\n\r", bm.bitmapNumber);
 80028c0:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 80028c4:	f103 0310 	add.w	r3, r3, #16
 80028c8:	f6a3 03ac 	subw	r3, r3, #2220	; 0x8ac
 80028cc:	881b      	ldrh	r3, [r3, #0]
 80028ce:	4619      	mov	r1, r3
 80028d0:	4807      	ldr	r0, [pc, #28]	; (80028f0 <configBitmapFromUart+0x59c>)
 80028d2:	f008 f9b3 	bl	800ac3c <iprintf>
	return 0;
 80028d6:	2300      	movs	r3, #0
}
 80028d8:	4618      	mov	r0, r3
 80028da:	f507 57c5 	add.w	r7, r7, #6304	; 0x18a0
 80028de:	3710      	adds	r7, #16
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	0800c704 	.word	0x0800c704
 80028e8:	200040b0 	.word	0x200040b0
 80028ec:	0800c764 	.word	0x0800c764
 80028f0:	0800c794 	.word	0x0800c794

080028f4 <configMarkBitmapsForDelete>:

int configMarkBitmapsForDelete(){
 80028f4:	b580      	push	{r7, lr}
 80028f6:	f5ad 5d80 	sub.w	sp, sp, #4096	; 0x1000
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
	ext_flash_erase_4kB(BITMAP_LIST_SECTOR*SECTOR_SIZE);
 80028fe:	f44f 2048 	mov.w	r0, #819200	; 0xc8000
 8002902:	f001 fa6f 	bl	8003de4 <ext_flash_erase_4kB>
	struct bitmapList bl;
	bl.totalBitmaps = 0;
 8002906:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800290a:	f103 0308 	add.w	r3, r3, #8
 800290e:	f6a3 0304 	subw	r3, r3, #2052	; 0x804
 8002912:	2200      	movs	r2, #0
 8002914:	801a      	strh	r2, [r3, #0]
	bl.lastUsedSector = BITMAP_LIST_SECTOR;
 8002916:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800291a:	f103 0308 	add.w	r3, r3, #8
 800291e:	f6a3 0304 	subw	r3, r3, #2052	; 0x804
 8002922:	22c8      	movs	r2, #200	; 0xc8
 8002924:	805a      	strh	r2, [r3, #2]
	uint8_t buff[sizeof(bl)];
	memcpy(buff, (uint8_t *) &bl, sizeof(bl));
 8002926:	f107 0308 	add.w	r3, r7, #8
 800292a:	4619      	mov	r1, r3
 800292c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002930:	f103 0308 	add.w	r3, r3, #8
 8002934:	f6a3 0204 	subw	r2, r3, #2052	; 0x804
 8002938:	f1a1 0308 	sub.w	r3, r1, #8
 800293c:	4611      	mov	r1, r2
 800293e:	f640 0204 	movw	r2, #2052	; 0x804
 8002942:	4618      	mov	r0, r3
 8002944:	f008 f964 	bl	800ac10 <memcpy>
	ext_flash_write_multipage(BITMAP_LIST_SECTOR*SECTOR_SIZE, buff, sizeof(bl));
 8002948:	f107 0308 	add.w	r3, r7, #8
 800294c:	3b08      	subs	r3, #8
 800294e:	f640 0204 	movw	r2, #2052	; 0x804
 8002952:	4619      	mov	r1, r3
 8002954:	f44f 2048 	mov.w	r0, #819200	; 0xc8000
 8002958:	f001 fb5e 	bl	8004018 <ext_flash_write_multipage>
	printf("[cl] Bitmaps marked for delete.\n\r");
 800295c:	4804      	ldr	r0, [pc, #16]	; (8002970 <configMarkBitmapsForDelete+0x7c>)
 800295e:	f008 f96d 	bl	800ac3c <iprintf>
	return 0;
 8002962:	2300      	movs	r3, #0
}
 8002964:	4618      	mov	r0, r3
 8002966:	f507 5780 	add.w	r7, r7, #4096	; 0x1000
 800296a:	3708      	adds	r7, #8
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	0800c7b8 	.word	0x0800c7b8

08002974 <configScreensFromUart>:


int configScreensFromUart(){
 8002974:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002976:	f5ad 5d4b 	sub.w	sp, sp, #12992	; 0x32c0
 800297a:	b087      	sub	sp, #28
 800297c:	af04      	add	r7, sp, #16
	int count;
	char msg[128];
	UART_READ_STRING(); //read general config - number of screens
 800297e:	f507 5048 	add.w	r0, r7, #12800	; 0x3200
 8002982:	f100 0020 	add.w	r0, r0, #32
 8002986:	230d      	movs	r3, #13
 8002988:	2280      	movs	r2, #128	; 0x80
 800298a:	4989      	ldr	r1, [pc, #548]	; (8002bb0 <configScreensFromUart+0x23c>)
 800298c:	f003 ff36 	bl	80067fc <read_usart_message>
 8002990:	4603      	mov	r3, r0
 8002992:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002996:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 800299a:	6013      	str	r3, [r2, #0]
 800299c:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 80029a0:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d0e9      	beq.n	800297e <configScreensFromUart+0xa>
 80029aa:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 80029ae:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	3b01      	subs	r3, #1
 80029b6:	f503 534b 	add.w	r3, r3, #12992	; 0x32c0
 80029ba:	f103 0308 	add.w	r3, r3, #8
 80029be:	443b      	add	r3, r7
 80029c0:	2200      	movs	r2, #0
 80029c2:	f803 2ca8 	strb.w	r2, [r3, #-168]
	int totalScreens = atoi(msg);
 80029c6:	f507 5348 	add.w	r3, r7, #12800	; 0x3200
 80029ca:	f103 0320 	add.w	r3, r3, #32
 80029ce:	4618      	mov	r0, r3
 80029d0:	f008 f8f0 	bl	800abb4 <atoi>
 80029d4:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 80029d8:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80029dc:	6018      	str	r0, [r3, #0]

	if(totalScreens < 1 || totalScreens >256){
 80029de:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 80029e2:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	dd07      	ble.n	80029fc <configScreensFromUart+0x88>
 80029ec:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 80029f0:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029fa:	dd0a      	ble.n	8002a12 <configScreensFromUart+0x9e>
		printf("[cl] Got %d, which is not a valid number of screens.\n\r", totalScreens);
 80029fc:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002a00:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8002a04:	6819      	ldr	r1, [r3, #0]
 8002a06:	486b      	ldr	r0, [pc, #428]	; (8002bb4 <configScreensFromUart+0x240>)
 8002a08:	f008 f918 	bl	800ac3c <iprintf>
		return 2;
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	f000 bdee 	b.w	80035ee <configScreensFromUart+0xc7a>
	}

	struct generalConfig gconf;

	memset(&gconf.screenSectors, 0, sizeof(gconf.screenSectors));
 8002a12:	f507 5340 	add.w	r3, r7, #12288	; 0x3000
 8002a16:	f103 031c 	add.w	r3, r3, #28
 8002a1a:	3302      	adds	r3, #2
 8002a1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a20:	2100      	movs	r1, #0
 8002a22:	4618      	mov	r0, r3
 8002a24:	f008 f902 	bl	800ac2c <memset>
	gconf.totalScreens = totalScreens;
 8002a28:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002a2c:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	b2da      	uxtb	r2, r3
 8002a34:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8002a38:	f103 0308 	add.w	r3, r3, #8
 8002a3c:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 8002a40:	701a      	strb	r2, [r3, #0]

	printf("[cl] Ok, expecting %d screens worth of data.\n\r", totalScreens);
 8002a42:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002a46:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8002a4a:	6819      	ldr	r1, [r3, #0]
 8002a4c:	485a      	ldr	r0, [pc, #360]	; (8002bb8 <configScreensFromUart+0x244>)
 8002a4e:	f008 f8f5 	bl	800ac3c <iprintf>

	uint8_t currentScreenIndex = -1;
 8002a52:	23ff      	movs	r3, #255	; 0xff
 8002a54:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 8002a58:	f102 0207 	add.w	r2, r2, #7
 8002a5c:	7013      	strb	r3, [r2, #0]
	uint16_t currentSector = GENERAL_CONFIG_SECTOR;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 8002a64:	f102 0204 	add.w	r2, r2, #4
 8002a68:	8013      	strh	r3, [r2, #0]
	uint16_t currentScreenObjectsLeft = 0;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 8002a70:	f102 0202 	add.w	r2, r2, #2
 8002a74:	8013      	strh	r3, [r2, #0]

	char screenStr[] = "screen";
 8002a76:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8002a7a:	f103 0308 	add.w	r3, r3, #8
 8002a7e:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8002a82:	4a4e      	ldr	r2, [pc, #312]	; (8002bbc <configScreensFromUart+0x248>)
 8002a84:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002a88:	6018      	str	r0, [r3, #0]
 8002a8a:	3304      	adds	r3, #4
 8002a8c:	8019      	strh	r1, [r3, #0]
 8002a8e:	3302      	adds	r3, #2
 8002a90:	0c0a      	lsrs	r2, r1, #16
 8002a92:	701a      	strb	r2, [r3, #0]

	#define MAX_DATA_SIZE 8192
	uint8_t sectorBuffer[SECTOR_SIZE]; //holds sector before writing to external flash
	int sectorBufferIndex = 0;
 8002a94:	2300      	movs	r3, #0
 8002a96:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002a9a:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8002a9e:	6013      	str	r3, [r2, #0]
	uint8_t dataBuffer[MAX_DATA_SIZE];
	int dataBufferIndex = 0;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002aa6:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8002aaa:	6013      	str	r3, [r2, #0]

	while(1){

		if(currentScreenIndex + 1 == totalScreens){
 8002aac:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8002ab0:	f103 0307 	add.w	r3, r3, #7
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002abc:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8002ac0:	6812      	ldr	r2, [r2, #0]
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d131      	bne.n	8002b2a <configScreensFromUart+0x1b6>
			printf("[cl] All screens' data received.\n\r");
 8002ac6:	483e      	ldr	r0, [pc, #248]	; (8002bc0 <configScreensFromUart+0x24c>)
 8002ac8:	f008 f8b8 	bl	800ac3c <iprintf>
	}

	//all screens have been written.
	//Now save generic config, since sector address array has been completed:

	printf("Gconf screens %d \n\r", gconf.totalScreens);
 8002acc:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8002ad0:	f103 0308 	add.w	r3, r3, #8
 8002ad4:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	4619      	mov	r1, r3
 8002adc:	4839      	ldr	r0, [pc, #228]	; (8002bc4 <configScreensFromUart+0x250>)
 8002ade:	f008 f8ad 	bl	800ac3c <iprintf>

	sectorBufferIndex = 0;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002ae8:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8002aec:	6013      	str	r3, [r2, #0]
	memcpy(sectorBuffer+sectorBufferIndex, (uint8_t *) &gconf, 100);//sizeof(gconf));
 8002aee:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002af2:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8002afc:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8002b00:	3b14      	subs	r3, #20
 8002b02:	4413      	add	r3, r2
 8002b04:	f507 5140 	add.w	r1, r7, #12288	; 0x3000
 8002b08:	f101 011c 	add.w	r1, r1, #28
 8002b0c:	2264      	movs	r2, #100	; 0x64
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f008 f87e 	bl	800ac10 <memcpy>

	printf("J ");
 8002b14:	482c      	ldr	r0, [pc, #176]	; (8002bc8 <configScreensFromUart+0x254>)
 8002b16:	f008 f891 	bl	800ac3c <iprintf>
	int j;
	for(j=0; j<sizeof(gconf); j++){
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002b20:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8002b24:	6013      	str	r3, [r2, #0]
 8002b26:	f000 bd41 	b.w	80035ac <configScreensFromUart+0xc38>
		UART_READ_STRING();
 8002b2a:	f507 5048 	add.w	r0, r7, #12800	; 0x3200
 8002b2e:	f100 0020 	add.w	r0, r0, #32
 8002b32:	230d      	movs	r3, #13
 8002b34:	2280      	movs	r2, #128	; 0x80
 8002b36:	491e      	ldr	r1, [pc, #120]	; (8002bb0 <configScreensFromUart+0x23c>)
 8002b38:	f003 fe60 	bl	80067fc <read_usart_message>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002b42:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8002b46:	6013      	str	r3, [r2, #0]
 8002b48:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002b4c:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d0e9      	beq.n	8002b2a <configScreensFromUart+0x1b6>
 8002b56:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002b5a:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	3b01      	subs	r3, #1
 8002b62:	f503 534b 	add.w	r3, r3, #12992	; 0x32c0
 8002b66:	f103 0308 	add.w	r3, r3, #8
 8002b6a:	443b      	add	r3, r7
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f803 2ca8 	strb.w	r2, [r3, #-168]
		if(strcmp(screenStr, msg) != 0){
 8002b72:	f507 5248 	add.w	r2, r7, #12800	; 0x3200
 8002b76:	f102 0220 	add.w	r2, r2, #32
 8002b7a:	f507 5340 	add.w	r3, r7, #12288	; 0x3000
 8002b7e:	f103 0314 	add.w	r3, r3, #20
 8002b82:	4611      	mov	r1, r2
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7fd fb23 	bl	80001d0 <strcmp>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d01f      	beq.n	8002bd0 <configScreensFromUart+0x25c>
			printf("[cl] Unexpected input - wanted %s, got %s. \n\r",screenStr, msg);
 8002b90:	f507 5248 	add.w	r2, r7, #12800	; 0x3200
 8002b94:	f102 0220 	add.w	r2, r2, #32
 8002b98:	f507 5340 	add.w	r3, r7, #12288	; 0x3000
 8002b9c:	f103 0314 	add.w	r3, r3, #20
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	480a      	ldr	r0, [pc, #40]	; (8002bcc <configScreensFromUart+0x258>)
 8002ba4:	f008 f84a 	bl	800ac3c <iprintf>
			return 3;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	f000 bd20 	b.w	80035ee <configScreensFromUart+0xc7a>
 8002bae:	bf00      	nop
 8002bb0:	200040b0 	.word	0x200040b0
 8002bb4:	0800c7dc 	.word	0x0800c7dc
 8002bb8:	0800c814 	.word	0x0800c814
 8002bbc:	0800ca98 	.word	0x0800ca98
 8002bc0:	0800c844 	.word	0x0800c844
 8002bc4:	0800c868 	.word	0x0800c868
 8002bc8:	0800c87c 	.word	0x0800c87c
 8002bcc:	0800c880 	.word	0x0800c880
		UART_READ_STRING();
 8002bd0:	f507 5048 	add.w	r0, r7, #12800	; 0x3200
 8002bd4:	f100 0020 	add.w	r0, r0, #32
 8002bd8:	230d      	movs	r3, #13
 8002bda:	2280      	movs	r2, #128	; 0x80
 8002bdc:	497b      	ldr	r1, [pc, #492]	; (8002dcc <configScreensFromUart+0x458>)
 8002bde:	f003 fe0d 	bl	80067fc <read_usart_message>
 8002be2:	4603      	mov	r3, r0
 8002be4:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002be8:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8002bec:	6013      	str	r3, [r2, #0]
 8002bee:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002bf2:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d0e9      	beq.n	8002bd0 <configScreensFromUart+0x25c>
 8002bfc:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002c00:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	3b01      	subs	r3, #1
 8002c08:	f503 534b 	add.w	r3, r3, #12992	; 0x32c0
 8002c0c:	f103 0308 	add.w	r3, r3, #8
 8002c10:	443b      	add	r3, r7
 8002c12:	2200      	movs	r2, #0
 8002c14:	f803 2ca8 	strb.w	r2, [r3, #-168]
		currentScreenObjectsLeft = atoi(msg);
 8002c18:	f507 5348 	add.w	r3, r7, #12800	; 0x3200
 8002c1c:	f103 0320 	add.w	r3, r3, #32
 8002c20:	4618      	mov	r0, r3
 8002c22:	f007 ffc7 	bl	800abb4 <atoi>
 8002c26:	4603      	mov	r3, r0
 8002c28:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 8002c2c:	f102 0202 	add.w	r2, r2, #2
 8002c30:	8013      	strh	r3, [r2, #0]
		printf("[cl] Ok, expecting %d objects for current screen.\n\r", currentScreenObjectsLeft);
 8002c32:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8002c36:	f103 0302 	add.w	r3, r3, #2
 8002c3a:	881b      	ldrh	r3, [r3, #0]
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	4864      	ldr	r0, [pc, #400]	; (8002dd0 <configScreensFromUart+0x45c>)
 8002c40:	f007 fffc 	bl	800ac3c <iprintf>
		screenVar.objectCount = currentScreenObjectsLeft;
 8002c44:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8002c48:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 8002c4c:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 8002c50:	f102 0202 	add.w	r2, r2, #2
 8002c54:	8812      	ldrh	r2, [r2, #0]
 8002c56:	805a      	strh	r2, [r3, #2]
		screenVar.screenNumber = currentScreenIndex;
 8002c58:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8002c5c:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 8002c60:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 8002c64:	f102 0207 	add.w	r2, r2, #7
 8002c68:	7812      	ldrb	r2, [r2, #0]
 8002c6a:	701a      	strb	r2, [r3, #0]
		currentSector += 1; //begin new sector -- screens are sector-aligned for easier access
 8002c6c:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8002c70:	f103 0304 	add.w	r3, r3, #4
 8002c74:	881b      	ldrh	r3, [r3, #0]
 8002c76:	3301      	adds	r3, #1
 8002c78:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 8002c7c:	f102 0204 	add.w	r2, r2, #4
 8002c80:	8013      	strh	r3, [r2, #0]
		currentScreenIndex += 1;
 8002c82:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8002c86:	f103 0307 	add.w	r3, r3, #7
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 8002c92:	f102 0207 	add.w	r2, r2, #7
 8002c96:	7013      	strb	r3, [r2, #0]
		gconf.screenSectors[currentScreenIndex] = currentSector;
 8002c98:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8002c9c:	f103 0307 	add.w	r3, r3, #7
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 8002ca6:	f102 0208 	add.w	r2, r2, #8
 8002caa:	f5a2 722b 	sub.w	r2, r2, #684	; 0x2ac
 8002cae:	005b      	lsls	r3, r3, #1
 8002cb0:	4413      	add	r3, r2
 8002cb2:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 8002cb6:	f102 0204 	add.w	r2, r2, #4
 8002cba:	8812      	ldrh	r2, [r2, #0]
 8002cbc:	805a      	strh	r2, [r3, #2]
		ext_flash_erase_4kB(currentSector*SECTOR_SIZE);
 8002cbe:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8002cc2:	f103 0304 	add.w	r3, r3, #4
 8002cc6:	881b      	ldrh	r3, [r3, #0]
 8002cc8:	031b      	lsls	r3, r3, #12
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f001 f88a 	bl	8003de4 <ext_flash_erase_4kB>
		memset(sectorBuffer, 0, SECTOR_SIZE);
 8002cd0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8002cd4:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8002cd8:	3b14      	subs	r3, #20
 8002cda:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002cde:	2100      	movs	r1, #0
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f007 ffa3 	bl	800ac2c <memset>
		sectorBufferIndex = 0;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002cec:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8002cf0:	6013      	str	r3, [r2, #0]
		memcpy(sectorBuffer+sectorBufferIndex, (uint8_t *) &screenVar, sizeof(screenVar));
 8002cf2:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002cf6:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8002d00:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8002d04:	3b14      	subs	r3, #20
 8002d06:	4413      	add	r3, r2
 8002d08:	f507 7232 	add.w	r2, r7, #712	; 0x2c8
 8002d0c:	f5a2 722e 	sub.w	r2, r2, #696	; 0x2b8
 8002d10:	6812      	ldr	r2, [r2, #0]
 8002d12:	601a      	str	r2, [r3, #0]
		sectorBufferIndex += sizeof(screenVar);
 8002d14:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002d18:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	3304      	adds	r3, #4
 8002d20:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002d24:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8002d28:	6013      	str	r3, [r2, #0]
		while(currentScreenObjectsLeft > 0){
 8002d2a:	f000 bc05 	b.w	8003538 <configScreensFromUart+0xbc4>
			currentScreenObjectsLeft--;
 8002d2e:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8002d32:	f103 0302 	add.w	r3, r3, #2
 8002d36:	881b      	ldrh	r3, [r3, #0]
 8002d38:	3b01      	subs	r3, #1
 8002d3a:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 8002d3e:	f102 0202 	add.w	r2, r2, #2
 8002d42:	8013      	strh	r3, [r2, #0]
			UART_READ_STRING();
 8002d44:	f507 5048 	add.w	r0, r7, #12800	; 0x3200
 8002d48:	f100 0020 	add.w	r0, r0, #32
 8002d4c:	230d      	movs	r3, #13
 8002d4e:	2280      	movs	r2, #128	; 0x80
 8002d50:	491e      	ldr	r1, [pc, #120]	; (8002dcc <configScreensFromUart+0x458>)
 8002d52:	f003 fd53 	bl	80067fc <read_usart_message>
 8002d56:	4603      	mov	r3, r0
 8002d58:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002d5c:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8002d60:	6013      	str	r3, [r2, #0]
 8002d62:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002d66:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d0e9      	beq.n	8002d44 <configScreensFromUart+0x3d0>
 8002d70:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002d74:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	f503 534b 	add.w	r3, r3, #12992	; 0x32c0
 8002d80:	f103 0308 	add.w	r3, r3, #8
 8002d84:	443b      	add	r3, r7
 8002d86:	2200      	movs	r2, #0
 8002d88:	f803 2ca8 	strb.w	r2, [r3, #-168]
			currentObject.objectType = stringToObjectType(msg);
 8002d8c:	f507 5348 	add.w	r3, r7, #12800	; 0x3200
 8002d90:	f103 0320 	add.w	r3, r3, #32
 8002d94:	4618      	mov	r0, r3
 8002d96:	f000 ffe5 	bl	8003d64 <stringToObjectType>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8002da2:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8002da6:	701a      	strb	r2, [r3, #0]
			if(currentObject.objectType == none){
 8002da8:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8002dac:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d110      	bne.n	8002dd8 <configScreensFromUart+0x464>
				printf("[cl] Object type %s not recognized. \n\r", msg);
 8002db6:	f507 5348 	add.w	r3, r7, #12800	; 0x3200
 8002dba:	f103 0320 	add.w	r3, r3, #32
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	4804      	ldr	r0, [pc, #16]	; (8002dd4 <configScreensFromUart+0x460>)
 8002dc2:	f007 ff3b 	bl	800ac3c <iprintf>
				return 4;
 8002dc6:	2304      	movs	r3, #4
 8002dc8:	f000 bc11 	b.w	80035ee <configScreensFromUart+0xc7a>
 8002dcc:	200040b0 	.word	0x200040b0
 8002dd0:	0800c8b0 	.word	0x0800c8b0
 8002dd4:	0800c8e4 	.word	0x0800c8e4
			UART_READ_STRING();
 8002dd8:	f507 5048 	add.w	r0, r7, #12800	; 0x3200
 8002ddc:	f100 0020 	add.w	r0, r0, #32
 8002de0:	230d      	movs	r3, #13
 8002de2:	2280      	movs	r2, #128	; 0x80
 8002de4:	49cf      	ldr	r1, [pc, #828]	; (8003124 <configScreensFromUart+0x7b0>)
 8002de6:	f003 fd09 	bl	80067fc <read_usart_message>
 8002dea:	4603      	mov	r3, r0
 8002dec:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002df0:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8002df4:	6013      	str	r3, [r2, #0]
 8002df6:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002dfa:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d0e9      	beq.n	8002dd8 <configScreensFromUart+0x464>
 8002e04:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002e08:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	3b01      	subs	r3, #1
 8002e10:	f503 534b 	add.w	r3, r3, #12992	; 0x32c0
 8002e14:	f103 0308 	add.w	r3, r3, #8
 8002e18:	443b      	add	r3, r7
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f803 2ca8 	strb.w	r2, [r3, #-168]
			currentObject.objectId = (uint16_t) atoi(msg);
 8002e20:	f507 5348 	add.w	r3, r7, #12800	; 0x3200
 8002e24:	f103 0320 	add.w	r3, r3, #32
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f007 fec3 	bl	800abb4 <atoi>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	b29a      	uxth	r2, r3
 8002e32:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8002e36:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8002e3a:	805a      	strh	r2, [r3, #2]
			UART_READ_STRING();
 8002e3c:	f507 5048 	add.w	r0, r7, #12800	; 0x3200
 8002e40:	f100 0020 	add.w	r0, r0, #32
 8002e44:	230d      	movs	r3, #13
 8002e46:	2280      	movs	r2, #128	; 0x80
 8002e48:	49b6      	ldr	r1, [pc, #728]	; (8003124 <configScreensFromUart+0x7b0>)
 8002e4a:	f003 fcd7 	bl	80067fc <read_usart_message>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002e54:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8002e58:	6013      	str	r3, [r2, #0]
 8002e5a:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002e5e:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d0e9      	beq.n	8002e3c <configScreensFromUart+0x4c8>
 8002e68:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002e6c:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	3b01      	subs	r3, #1
 8002e74:	f503 534b 	add.w	r3, r3, #12992	; 0x32c0
 8002e78:	f103 0308 	add.w	r3, r3, #8
 8002e7c:	443b      	add	r3, r7
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f803 2ca8 	strb.w	r2, [r3, #-168]
			currentObject.xstart = (uint16_t) atoi(msg);
 8002e84:	f507 5348 	add.w	r3, r7, #12800	; 0x3200
 8002e88:	f103 0320 	add.w	r3, r3, #32
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f007 fe91 	bl	800abb4 <atoi>
 8002e92:	4603      	mov	r3, r0
 8002e94:	b29a      	uxth	r2, r3
 8002e96:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8002e9a:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8002e9e:	809a      	strh	r2, [r3, #4]
			UART_READ_STRING();
 8002ea0:	f507 5048 	add.w	r0, r7, #12800	; 0x3200
 8002ea4:	f100 0020 	add.w	r0, r0, #32
 8002ea8:	230d      	movs	r3, #13
 8002eaa:	2280      	movs	r2, #128	; 0x80
 8002eac:	499d      	ldr	r1, [pc, #628]	; (8003124 <configScreensFromUart+0x7b0>)
 8002eae:	f003 fca5 	bl	80067fc <read_usart_message>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002eb8:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8002ebc:	6013      	str	r3, [r2, #0]
 8002ebe:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002ec2:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d0e9      	beq.n	8002ea0 <configScreensFromUart+0x52c>
 8002ecc:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002ed0:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	f503 534b 	add.w	r3, r3, #12992	; 0x32c0
 8002edc:	f103 0308 	add.w	r3, r3, #8
 8002ee0:	443b      	add	r3, r7
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f803 2ca8 	strb.w	r2, [r3, #-168]
			currentObject.ystart = (uint16_t) atoi(msg);
 8002ee8:	f507 5348 	add.w	r3, r7, #12800	; 0x3200
 8002eec:	f103 0320 	add.w	r3, r3, #32
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f007 fe5f 	bl	800abb4 <atoi>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	b29a      	uxth	r2, r3
 8002efa:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8002efe:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8002f02:	80da      	strh	r2, [r3, #6]
			UART_READ_STRING();
 8002f04:	f507 5048 	add.w	r0, r7, #12800	; 0x3200
 8002f08:	f100 0020 	add.w	r0, r0, #32
 8002f0c:	230d      	movs	r3, #13
 8002f0e:	2280      	movs	r2, #128	; 0x80
 8002f10:	4984      	ldr	r1, [pc, #528]	; (8003124 <configScreensFromUart+0x7b0>)
 8002f12:	f003 fc73 	bl	80067fc <read_usart_message>
 8002f16:	4603      	mov	r3, r0
 8002f18:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002f1c:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8002f20:	6013      	str	r3, [r2, #0]
 8002f22:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002f26:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d0e9      	beq.n	8002f04 <configScreensFromUart+0x590>
 8002f30:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002f34:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	f503 534b 	add.w	r3, r3, #12992	; 0x32c0
 8002f40:	f103 0308 	add.w	r3, r3, #8
 8002f44:	443b      	add	r3, r7
 8002f46:	2200      	movs	r2, #0
 8002f48:	f803 2ca8 	strb.w	r2, [r3, #-168]
			currentObject.xend = (uint16_t) atoi(msg);
 8002f4c:	f507 5348 	add.w	r3, r7, #12800	; 0x3200
 8002f50:	f103 0320 	add.w	r3, r3, #32
 8002f54:	4618      	mov	r0, r3
 8002f56:	f007 fe2d 	bl	800abb4 <atoi>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	b29a      	uxth	r2, r3
 8002f5e:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8002f62:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8002f66:	811a      	strh	r2, [r3, #8]
			UART_READ_STRING();
 8002f68:	f507 5048 	add.w	r0, r7, #12800	; 0x3200
 8002f6c:	f100 0020 	add.w	r0, r0, #32
 8002f70:	230d      	movs	r3, #13
 8002f72:	2280      	movs	r2, #128	; 0x80
 8002f74:	496b      	ldr	r1, [pc, #428]	; (8003124 <configScreensFromUart+0x7b0>)
 8002f76:	f003 fc41 	bl	80067fc <read_usart_message>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002f80:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8002f84:	6013      	str	r3, [r2, #0]
 8002f86:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002f8a:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d0e9      	beq.n	8002f68 <configScreensFromUart+0x5f4>
 8002f94:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002f98:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	f503 534b 	add.w	r3, r3, #12992	; 0x32c0
 8002fa4:	f103 0308 	add.w	r3, r3, #8
 8002fa8:	443b      	add	r3, r7
 8002faa:	2200      	movs	r2, #0
 8002fac:	f803 2ca8 	strb.w	r2, [r3, #-168]
			currentObject.yend = (uint16_t) atoi(msg);
 8002fb0:	f507 5348 	add.w	r3, r7, #12800	; 0x3200
 8002fb4:	f103 0320 	add.w	r3, r3, #32
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f007 fdfb 	bl	800abb4 <atoi>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	b29a      	uxth	r2, r3
 8002fc2:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8002fc6:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8002fca:	815a      	strh	r2, [r3, #10]
			UART_READ_STRING();
 8002fcc:	f507 5048 	add.w	r0, r7, #12800	; 0x3200
 8002fd0:	f100 0020 	add.w	r0, r0, #32
 8002fd4:	230d      	movs	r3, #13
 8002fd6:	2280      	movs	r2, #128	; 0x80
 8002fd8:	4952      	ldr	r1, [pc, #328]	; (8003124 <configScreensFromUart+0x7b0>)
 8002fda:	f003 fc0f 	bl	80067fc <read_usart_message>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002fe4:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8002fe8:	6013      	str	r3, [r2, #0]
 8002fea:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002fee:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d0e9      	beq.n	8002fcc <configScreensFromUart+0x658>
 8002ff8:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002ffc:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	3b01      	subs	r3, #1
 8003004:	f503 534b 	add.w	r3, r3, #12992	; 0x32c0
 8003008:	f103 0308 	add.w	r3, r3, #8
 800300c:	443b      	add	r3, r7
 800300e:	2200      	movs	r2, #0
 8003010:	f803 2ca8 	strb.w	r2, [r3, #-168]
			currentObject.dataLen = (uint16_t) atoi(msg);
 8003014:	f507 5348 	add.w	r3, r7, #12800	; 0x3200
 8003018:	f103 0320 	add.w	r3, r3, #32
 800301c:	4618      	mov	r0, r3
 800301e:	f007 fdc9 	bl	800abb4 <atoi>
 8003022:	4603      	mov	r3, r0
 8003024:	b29a      	uxth	r2, r3
 8003026:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 800302a:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 800302e:	819a      	strh	r2, [r3, #12]
			PRINT_OBJECT_HEADER(currentObject);
 8003030:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8003034:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	461c      	mov	r4, r3
 800303c:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8003040:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8003044:	885b      	ldrh	r3, [r3, #2]
 8003046:	461d      	mov	r5, r3
 8003048:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 800304c:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8003050:	889b      	ldrh	r3, [r3, #4]
 8003052:	461e      	mov	r6, r3
 8003054:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8003058:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 800305c:	88db      	ldrh	r3, [r3, #6]
 800305e:	461a      	mov	r2, r3
 8003060:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8003064:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8003068:	891b      	ldrh	r3, [r3, #8]
 800306a:	4619      	mov	r1, r3
 800306c:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8003070:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8003074:	895b      	ldrh	r3, [r3, #10]
 8003076:	4618      	mov	r0, r3
 8003078:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 800307c:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8003080:	899b      	ldrh	r3, [r3, #12]
 8003082:	9303      	str	r3, [sp, #12]
 8003084:	9002      	str	r0, [sp, #8]
 8003086:	9101      	str	r1, [sp, #4]
 8003088:	9200      	str	r2, [sp, #0]
 800308a:	4633      	mov	r3, r6
 800308c:	462a      	mov	r2, r5
 800308e:	4621      	mov	r1, r4
 8003090:	4825      	ldr	r0, [pc, #148]	; (8003128 <configScreensFromUart+0x7b4>)
 8003092:	f007 fdd3 	bl	800ac3c <iprintf>
			if(currentObject.dataLen > MAX_DATA_SIZE){
 8003096:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 800309a:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 800309e:	899b      	ldrh	r3, [r3, #12]
 80030a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030a4:	d90c      	bls.n	80030c0 <configScreensFromUart+0x74c>
				printf("[cl] Object (id=%d) data exceeds MAX_DATA_SIZE = %d.\n\r", currentObject.objectId, MAX_DATA_SIZE);
 80030a6:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 80030aa:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 80030ae:	885b      	ldrh	r3, [r3, #2]
 80030b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80030b4:	4619      	mov	r1, r3
 80030b6:	481d      	ldr	r0, [pc, #116]	; (800312c <configScreensFromUart+0x7b8>)
 80030b8:	f007 fdc0 	bl	800ac3c <iprintf>
				return 5;
 80030bc:	2305      	movs	r3, #5
 80030be:	e23a      	b.n	8003536 <configScreensFromUart+0xbc2>
			int spaceLeft = SECTOR_SIZE - sectorBufferIndex;
 80030c0:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 80030c4:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 80030ce:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 80030d2:	f102 0224 	add.w	r2, r2, #36	; 0x24
 80030d6:	6013      	str	r3, [r2, #0]
			if(spaceLeft >= sizeof(currentObject)){
 80030d8:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 80030dc:	f103 0324 	add.w	r3, r3, #36	; 0x24
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	2b0d      	cmp	r3, #13
 80030e4:	d924      	bls.n	8003130 <configScreensFromUart+0x7bc>
				memcpy(sectorBuffer+sectorBufferIndex, (uint8_t *) &currentObject, sizeof(currentObject));
 80030e6:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 80030ea:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80030f4:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80030f8:	3b14      	subs	r3, #20
 80030fa:	1898      	adds	r0, r3, r2
 80030fc:	f107 0308 	add.w	r3, r7, #8
 8003100:	3b08      	subs	r3, #8
 8003102:	220e      	movs	r2, #14
 8003104:	4619      	mov	r1, r3
 8003106:	f007 fd83 	bl	800ac10 <memcpy>
				sectorBufferIndex += sizeof(currentObject);
 800310a:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 800310e:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	330e      	adds	r3, #14
 8003116:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 800311a:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 800311e:	6013      	str	r3, [r2, #0]
 8003120:	e093      	b.n	800324a <configScreensFromUart+0x8d6>
 8003122:	bf00      	nop
 8003124:	200040b0 	.word	0x200040b0
 8003128:	0800c90c 	.word	0x0800c90c
 800312c:	0800c948 	.word	0x0800c948
				memcpy(sectorBuffer+sectorBufferIndex, (uint8_t *) &currentObject, spaceLeft);
 8003130:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8003134:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800313e:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8003142:	3b14      	subs	r3, #20
 8003144:	1898      	adds	r0, r3, r2
 8003146:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 800314a:	f103 0324 	add.w	r3, r3, #36	; 0x24
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	f107 0308 	add.w	r3, r7, #8
 8003154:	3b08      	subs	r3, #8
 8003156:	4619      	mov	r1, r3
 8003158:	f007 fd5a 	bl	800ac10 <memcpy>
				ext_flash_write_multipage(currentSector*SECTOR_SIZE, sectorBuffer, SECTOR_SIZE);
 800315c:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8003160:	f103 0304 	add.w	r3, r3, #4
 8003164:	881b      	ldrh	r3, [r3, #0]
 8003166:	031b      	lsls	r3, r3, #12
 8003168:	4618      	mov	r0, r3
 800316a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800316e:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8003172:	3b14      	subs	r3, #20
 8003174:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003178:	4619      	mov	r1, r3
 800317a:	f000 ff4d 	bl	8004018 <ext_flash_write_multipage>
				currentSector += 1;
 800317e:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8003182:	f103 0304 	add.w	r3, r3, #4
 8003186:	881b      	ldrh	r3, [r3, #0]
 8003188:	3301      	adds	r3, #1
 800318a:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 800318e:	f102 0204 	add.w	r2, r2, #4
 8003192:	8013      	strh	r3, [r2, #0]
				if(currentSector > MAX_SCREEN_SECTOR){
 8003194:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8003198:	f103 0304 	add.w	r3, r3, #4
 800319c:	881b      	ldrh	r3, [r3, #0]
 800319e:	2bc7      	cmp	r3, #199	; 0xc7
 80031a0:	d90a      	bls.n	80031b8 <configScreensFromUart+0x844>
					printf("[cl] Screen memory size exceeded trying to save header of object id %d\n\r", currentObject.objectId);
 80031a2:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 80031a6:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 80031aa:	885b      	ldrh	r3, [r3, #2]
 80031ac:	4619      	mov	r1, r3
 80031ae:	48cc      	ldr	r0, [pc, #816]	; (80034e0 <configScreensFromUart+0xb6c>)
 80031b0:	f007 fd44 	bl	800ac3c <iprintf>
					return 6;
 80031b4:	2306      	movs	r3, #6
 80031b6:	e1be      	b.n	8003536 <configScreensFromUart+0xbc2>
				ext_flash_erase_4kB(currentSector*SECTOR_SIZE);
 80031b8:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 80031bc:	f103 0304 	add.w	r3, r3, #4
 80031c0:	881b      	ldrh	r3, [r3, #0]
 80031c2:	031b      	lsls	r3, r3, #12
 80031c4:	4618      	mov	r0, r3
 80031c6:	f000 fe0d 	bl	8003de4 <ext_flash_erase_4kB>
				memset(sectorBuffer, 0, SECTOR_SIZE);
 80031ca:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80031ce:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80031d2:	3b14      	subs	r3, #20
 80031d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80031d8:	2100      	movs	r1, #0
 80031da:	4618      	mov	r0, r3
 80031dc:	f007 fd26 	bl	800ac2c <memset>
				sectorBufferIndex = 0;
 80031e0:	2300      	movs	r3, #0
 80031e2:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 80031e6:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 80031ea:	6013      	str	r3, [r2, #0]
				memcpy(sectorBuffer+sectorBufferIndex, ((uint8_t *) &currentObject)+spaceLeft, (sizeof(currentObject) - spaceLeft));
 80031ec:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 80031f0:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80031fa:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80031fe:	3b14      	subs	r3, #20
 8003200:	1898      	adds	r0, r3, r2
 8003202:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8003206:	f103 0324 	add.w	r3, r3, #36	; 0x24
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	f107 0308 	add.w	r3, r7, #8
 8003210:	3b08      	subs	r3, #8
 8003212:	1899      	adds	r1, r3, r2
 8003214:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8003218:	f103 0324 	add.w	r3, r3, #36	; 0x24
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f1c3 030e 	rsb	r3, r3, #14
 8003222:	461a      	mov	r2, r3
 8003224:	f007 fcf4 	bl	800ac10 <memcpy>
				sectorBufferIndex += (sizeof(currentObject) - spaceLeft);
 8003228:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 800322c:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8003236:	f103 0324 	add.w	r3, r3, #36	; 0x24
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	330e      	adds	r3, #14
 8003240:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8003244:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8003248:	6013      	str	r3, [r2, #0]
			uint16_t objectDataBytesLeft = currentObject.dataLen;
 800324a:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 800324e:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8003252:	899b      	ldrh	r3, [r3, #12]
 8003254:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8003258:	f102 0236 	add.w	r2, r2, #54	; 0x36
 800325c:	8013      	strh	r3, [r2, #0]
			dataBufferIndex = 0;
 800325e:	2300      	movs	r3, #0
 8003260:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8003264:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8003268:	6013      	str	r3, [r2, #0]
			while(objectDataBytesLeft > 0){
 800326a:	e062      	b.n	8003332 <configScreensFromUart+0x9be>
				do{count = read_usart_message(msg, &huart1, 2, NEWLINE);} while (count==0);
 800326c:	f507 5048 	add.w	r0, r7, #12800	; 0x3200
 8003270:	f100 0020 	add.w	r0, r0, #32
 8003274:	230d      	movs	r3, #13
 8003276:	2202      	movs	r2, #2
 8003278:	499a      	ldr	r1, [pc, #616]	; (80034e4 <configScreensFromUart+0xb70>)
 800327a:	f003 fabf 	bl	80067fc <read_usart_message>
 800327e:	4603      	mov	r3, r0
 8003280:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8003284:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8003288:	6013      	str	r3, [r2, #0]
 800328a:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 800328e:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d0e9      	beq.n	800326c <configScreensFromUart+0x8f8>
				if(count!=2){
 8003298:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 800329c:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d00a      	beq.n	80032bc <configScreensFromUart+0x948>
					printf("[cl] Error reading hex data of object with id %d \n\r", currentObject.objectId);
 80032a6:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 80032aa:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 80032ae:	885b      	ldrh	r3, [r3, #2]
 80032b0:	4619      	mov	r1, r3
 80032b2:	488d      	ldr	r0, [pc, #564]	; (80034e8 <configScreensFromUart+0xb74>)
 80032b4:	f007 fcc2 	bl	800ac3c <iprintf>
					return 7;
 80032b8:	2307      	movs	r3, #7
 80032ba:	e13c      	b.n	8003536 <configScreensFromUart+0xbc2>
				msg[2] = 0;
 80032bc:	2300      	movs	r3, #0
 80032be:	f507 5248 	add.w	r2, r7, #12800	; 0x3200
 80032c2:	f102 0222 	add.w	r2, r2, #34	; 0x22
 80032c6:	7013      	strb	r3, [r2, #0]
				uint8_t deHexedByte = (uint8_t) strtol(msg, NULL, 16);
 80032c8:	f507 5348 	add.w	r3, r7, #12800	; 0x3200
 80032cc:	f103 0320 	add.w	r3, r3, #32
 80032d0:	2210      	movs	r2, #16
 80032d2:	2100      	movs	r1, #0
 80032d4:	4618      	mov	r0, r3
 80032d6:	f007 fd73 	bl	800adc0 <strtol>
 80032da:	4603      	mov	r3, r0
 80032dc:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 80032e0:	f102 0223 	add.w	r2, r2, #35	; 0x23
 80032e4:	7013      	strb	r3, [r2, #0]
				dataBuffer[dataBufferIndex] = deHexedByte;
 80032e6:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 80032ea:	f5a3 722d 	sub.w	r2, r3, #692	; 0x2b4
 80032ee:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 80032f2:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4413      	add	r3, r2
 80032fa:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 80032fe:	f102 0223 	add.w	r2, r2, #35	; 0x23
 8003302:	7812      	ldrb	r2, [r2, #0]
 8003304:	701a      	strb	r2, [r3, #0]
				dataBufferIndex++;
 8003306:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 800330a:	f103 0338 	add.w	r3, r3, #56	; 0x38
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	3301      	adds	r3, #1
 8003312:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8003316:	f102 0238 	add.w	r2, r2, #56	; 0x38
 800331a:	6013      	str	r3, [r2, #0]
				objectDataBytesLeft--;
 800331c:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8003320:	f103 0336 	add.w	r3, r3, #54	; 0x36
 8003324:	881b      	ldrh	r3, [r3, #0]
 8003326:	3b01      	subs	r3, #1
 8003328:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 800332c:	f102 0236 	add.w	r2, r2, #54	; 0x36
 8003330:	8013      	strh	r3, [r2, #0]
			while(objectDataBytesLeft > 0){
 8003332:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8003336:	f103 0336 	add.w	r3, r3, #54	; 0x36
 800333a:	881b      	ldrh	r3, [r3, #0]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d195      	bne.n	800326c <configScreensFromUart+0x8f8>
			read_usart_message(msg, &huart1, 2, NEWLINE); //to remove newline character from uart input buffer
 8003340:	f507 5048 	add.w	r0, r7, #12800	; 0x3200
 8003344:	f100 0020 	add.w	r0, r0, #32
 8003348:	230d      	movs	r3, #13
 800334a:	2202      	movs	r2, #2
 800334c:	4965      	ldr	r1, [pc, #404]	; (80034e4 <configScreensFromUart+0xb70>)
 800334e:	f003 fa55 	bl	80067fc <read_usart_message>
			objectDataBytesLeft = currentObject.dataLen;
 8003352:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8003356:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 800335a:	899b      	ldrh	r3, [r3, #12]
 800335c:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8003360:	f102 0236 	add.w	r2, r2, #54	; 0x36
 8003364:	8013      	strh	r3, [r2, #0]
			dataBufferIndex = 0;
 8003366:	2300      	movs	r3, #0
 8003368:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 800336c:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8003370:	6013      	str	r3, [r2, #0]
			while(objectDataBytesLeft > 0){
 8003372:	e0d7      	b.n	8003524 <configScreensFromUart+0xbb0>
				spaceLeft = SECTOR_SIZE - sectorBufferIndex;
 8003374:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8003378:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8003382:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8003386:	f102 0224 	add.w	r2, r2, #36	; 0x24
 800338a:	6013      	str	r3, [r2, #0]
				if(spaceLeft >= objectDataBytesLeft){
 800338c:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8003390:	f103 0336 	add.w	r3, r3, #54	; 0x36
 8003394:	881b      	ldrh	r3, [r3, #0]
 8003396:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 800339a:	f102 0224 	add.w	r2, r2, #36	; 0x24
 800339e:	6812      	ldr	r2, [r2, #0]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	db32      	blt.n	800340a <configScreensFromUart+0xa96>
					memcpy(sectorBuffer+sectorBufferIndex, dataBuffer + dataBufferIndex, objectDataBytesLeft);
 80033a4:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 80033a8:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80033b2:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80033b6:	3b14      	subs	r3, #20
 80033b8:	1898      	adds	r0, r3, r2
 80033ba:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 80033be:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80033c8:	3b34      	subs	r3, #52	; 0x34
 80033ca:	4413      	add	r3, r2
 80033cc:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 80033d0:	f102 0236 	add.w	r2, r2, #54	; 0x36
 80033d4:	8812      	ldrh	r2, [r2, #0]
 80033d6:	4619      	mov	r1, r3
 80033d8:	f007 fc1a 	bl	800ac10 <memcpy>
					sectorBufferIndex += objectDataBytesLeft;
 80033dc:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 80033e0:	f103 0336 	add.w	r3, r3, #54	; 0x36
 80033e4:	881b      	ldrh	r3, [r3, #0]
 80033e6:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 80033ea:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 80033ee:	6812      	ldr	r2, [r2, #0]
 80033f0:	4413      	add	r3, r2
 80033f2:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 80033f6:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 80033fa:	6013      	str	r3, [r2, #0]
					objectDataBytesLeft = 0;
 80033fc:	2300      	movs	r3, #0
 80033fe:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8003402:	f102 0236 	add.w	r2, r2, #54	; 0x36
 8003406:	8013      	strh	r3, [r2, #0]
 8003408:	e08c      	b.n	8003524 <configScreensFromUart+0xbb0>
					memcpy(sectorBuffer+sectorBufferIndex, dataBuffer + dataBufferIndex, spaceLeft);
 800340a:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 800340e:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8003418:	f103 0328 	add.w	r3, r3, #40	; 0x28
 800341c:	3b14      	subs	r3, #20
 800341e:	1898      	adds	r0, r3, r2
 8003420:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8003424:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800342e:	3b34      	subs	r3, #52	; 0x34
 8003430:	4413      	add	r3, r2
 8003432:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8003436:	f102 0224 	add.w	r2, r2, #36	; 0x24
 800343a:	6812      	ldr	r2, [r2, #0]
 800343c:	4619      	mov	r1, r3
 800343e:	f007 fbe7 	bl	800ac10 <memcpy>
					dataBufferIndex += spaceLeft;
 8003442:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8003446:	f103 0338 	add.w	r3, r3, #56	; 0x38
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8003450:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4413      	add	r3, r2
 8003458:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 800345c:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8003460:	6013      	str	r3, [r2, #0]
					objectDataBytesLeft -= spaceLeft;
 8003462:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8003466:	f103 0324 	add.w	r3, r3, #36	; 0x24
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	b29b      	uxth	r3, r3
 800346e:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8003472:	f102 0236 	add.w	r2, r2, #54	; 0x36
 8003476:	8812      	ldrh	r2, [r2, #0]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 800347e:	f102 0236 	add.w	r2, r2, #54	; 0x36
 8003482:	8013      	strh	r3, [r2, #0]
					ext_flash_write_multipage(currentSector*SECTOR_SIZE, sectorBuffer, SECTOR_SIZE);
 8003484:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8003488:	f103 0304 	add.w	r3, r3, #4
 800348c:	881b      	ldrh	r3, [r3, #0]
 800348e:	031b      	lsls	r3, r3, #12
 8003490:	4618      	mov	r0, r3
 8003492:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8003496:	f103 0328 	add.w	r3, r3, #40	; 0x28
 800349a:	3b14      	subs	r3, #20
 800349c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80034a0:	4619      	mov	r1, r3
 80034a2:	f000 fdb9 	bl	8004018 <ext_flash_write_multipage>
					currentSector += 1;
 80034a6:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 80034aa:	f103 0304 	add.w	r3, r3, #4
 80034ae:	881b      	ldrh	r3, [r3, #0]
 80034b0:	3301      	adds	r3, #1
 80034b2:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 80034b6:	f102 0204 	add.w	r2, r2, #4
 80034ba:	8013      	strh	r3, [r2, #0]
					if(currentSector > MAX_SCREEN_SECTOR){
 80034bc:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 80034c0:	f103 0304 	add.w	r3, r3, #4
 80034c4:	881b      	ldrh	r3, [r3, #0]
 80034c6:	2bc7      	cmp	r3, #199	; 0xc7
 80034c8:	d912      	bls.n	80034f0 <configScreensFromUart+0xb7c>
						printf("[cl] Screen memory size exceeded while trying to save data of object id %d\n\r", currentObject.objectId);
 80034ca:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 80034ce:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 80034d2:	885b      	ldrh	r3, [r3, #2]
 80034d4:	4619      	mov	r1, r3
 80034d6:	4805      	ldr	r0, [pc, #20]	; (80034ec <configScreensFromUart+0xb78>)
 80034d8:	f007 fbb0 	bl	800ac3c <iprintf>
						return 8;
 80034dc:	2308      	movs	r3, #8
 80034de:	e02a      	b.n	8003536 <configScreensFromUart+0xbc2>
 80034e0:	0800c980 	.word	0x0800c980
 80034e4:	200040b0 	.word	0x200040b0
 80034e8:	0800c9cc 	.word	0x0800c9cc
 80034ec:	0800ca00 	.word	0x0800ca00
					ext_flash_erase_4kB(currentSector*SECTOR_SIZE);
 80034f0:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 80034f4:	f103 0304 	add.w	r3, r3, #4
 80034f8:	881b      	ldrh	r3, [r3, #0]
 80034fa:	031b      	lsls	r3, r3, #12
 80034fc:	4618      	mov	r0, r3
 80034fe:	f000 fc71 	bl	8003de4 <ext_flash_erase_4kB>
					memset(sectorBuffer, 0, SECTOR_SIZE);
 8003502:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8003506:	f103 0328 	add.w	r3, r3, #40	; 0x28
 800350a:	3b14      	subs	r3, #20
 800350c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003510:	2100      	movs	r1, #0
 8003512:	4618      	mov	r0, r3
 8003514:	f007 fb8a 	bl	800ac2c <memset>
					sectorBufferIndex = 0;
 8003518:	2300      	movs	r3, #0
 800351a:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 800351e:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8003522:	6013      	str	r3, [r2, #0]
			while(objectDataBytesLeft > 0){
 8003524:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8003528:	f103 0336 	add.w	r3, r3, #54	; 0x36
 800352c:	881b      	ldrh	r3, [r3, #0]
 800352e:	2b00      	cmp	r3, #0
 8003530:	f47f af20 	bne.w	8003374 <configScreensFromUart+0xa00>
 8003534:	e000      	b.n	8003538 <configScreensFromUart+0xbc4>
			return 3;
 8003536:	e05a      	b.n	80035ee <configScreensFromUart+0xc7a>
		while(currentScreenObjectsLeft > 0){
 8003538:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 800353c:	f103 0302 	add.w	r3, r3, #2
 8003540:	881b      	ldrh	r3, [r3, #0]
 8003542:	2b00      	cmp	r3, #0
 8003544:	f47f abf3 	bne.w	8002d2e <configScreensFromUart+0x3ba>
		ext_flash_write_multipage(currentSector*SECTOR_SIZE, sectorBuffer, sectorBufferIndex);
 8003548:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 800354c:	f103 0304 	add.w	r3, r3, #4
 8003550:	881b      	ldrh	r3, [r3, #0]
 8003552:	031b      	lsls	r3, r3, #12
 8003554:	4618      	mov	r0, r3
 8003556:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 800355a:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8003564:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8003568:	3b14      	subs	r3, #20
 800356a:	4619      	mov	r1, r3
 800356c:	f000 fd54 	bl	8004018 <ext_flash_write_multipage>
	while(1){
 8003570:	f7ff ba9c 	b.w	8002aac <configScreensFromUart+0x138>
		printf("%x ", sectorBuffer[j]);
 8003574:	f507 530b 	add.w	r3, r7, #8896	; 0x22c0
 8003578:	f103 0308 	add.w	r3, r3, #8
 800357c:	f5a3 722d 	sub.w	r2, r3, #692	; 0x2b4
 8003580:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8003584:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4413      	add	r3, r2
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	4619      	mov	r1, r3
 8003590:	481a      	ldr	r0, [pc, #104]	; (80035fc <configScreensFromUart+0xc88>)
 8003592:	f007 fb53 	bl	800ac3c <iprintf>
	for(j=0; j<sizeof(gconf); j++){
 8003596:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 800359a:	f103 0330 	add.w	r3, r3, #48	; 0x30
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	3301      	adds	r3, #1
 80035a2:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 80035a6:	f102 0230 	add.w	r2, r2, #48	; 0x30
 80035aa:	6013      	str	r3, [r2, #0]
 80035ac:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 80035b0:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f240 2201 	movw	r2, #513	; 0x201
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d9da      	bls.n	8003574 <configScreensFromUart+0xc00>
	}

	ext_flash_erase_4kB(GENERAL_CONFIG_SECTOR*SECTOR_SIZE);
 80035be:	2000      	movs	r0, #0
 80035c0:	f000 fc10 	bl	8003de4 <ext_flash_erase_4kB>
	ext_flash_write_multipage(GENERAL_CONFIG_SECTOR*SECTOR_SIZE, sectorBuffer, sizeof(gconf));
 80035c4:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80035c8:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80035cc:	3b14      	subs	r3, #20
 80035ce:	f240 2202 	movw	r2, #514	; 0x202
 80035d2:	4619      	mov	r1, r3
 80035d4:	2000      	movs	r0, #0
 80035d6:	f000 fd1f 	bl	8004018 <ext_flash_write_multipage>
	printf("[cl] Config from UART finished. Furthest sector written to: %d \n\r", currentSector);
 80035da:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 80035de:	f103 0304 	add.w	r3, r3, #4
 80035e2:	881b      	ldrh	r3, [r3, #0]
 80035e4:	4619      	mov	r1, r3
 80035e6:	4806      	ldr	r0, [pc, #24]	; (8003600 <configScreensFromUart+0xc8c>)
 80035e8:	f007 fb28 	bl	800ac3c <iprintf>

	return 0;
 80035ec:	2300      	movs	r3, #0

}
 80035ee:	4618      	mov	r0, r3
 80035f0:	f507 574b 	add.w	r7, r7, #12992	; 0x32c0
 80035f4:	370c      	adds	r7, #12
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035fa:	bf00      	nop
 80035fc:	0800ca50 	.word	0x0800ca50
 8003600:	0800ca54 	.word	0x0800ca54

08003604 <readGeneralConfig>:

/*
 * Reads the general configuration struct from external flash into variable pointed at by @destination.
 */
void readGeneralConfig(struct generalConfig *destination){
 8003604:	b580      	push	{r7, lr}
 8003606:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 800360a:	af00      	add	r7, sp, #0
 800360c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8003610:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8003614:	6018      	str	r0, [r3, #0]
	uint8_t buffer[sizeof(struct generalConfig)];
	ext_flash_read(GENERAL_CONFIG_SECTOR*SECTOR_SIZE, buffer, sizeof(struct generalConfig));
 8003616:	f107 030c 	add.w	r3, r7, #12
 800361a:	f240 2202 	movw	r2, #514	; 0x202
 800361e:	4619      	mov	r1, r3
 8003620:	2000      	movs	r0, #0
 8003622:	f000 fc2e 	bl	8003e82 <ext_flash_read>
	*destination = *((struct generalConfig *) buffer);
 8003626:	f107 020c 	add.w	r2, r7, #12
 800362a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800362e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4618      	mov	r0, r3
 8003636:	4611      	mov	r1, r2
 8003638:	f240 2302 	movw	r3, #514	; 0x202
 800363c:	461a      	mov	r2, r3
 800363e:	f007 fae7 	bl	800ac10 <memcpy>
	/*int i;
	for(i = 0; i<sizeof(struct generalConfig); i++){
		printf("%x,", buffer[i]);
	}
	printf("\n\r");*/
}
 8003642:	bf00      	nop
 8003644:	f507 7704 	add.w	r7, r7, #528	; 0x210
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <readBitmapList>:

/*
 * Reads the list of bitmaps struct from external flash into variable pointed at by @destination.
 */
void readBitmapList(struct bitmapList *destination){
 800364c:	b580      	push	{r7, lr}
 800364e:	f5ad 6d01 	sub.w	sp, sp, #2064	; 0x810
 8003652:	af00      	add	r7, sp, #0
 8003654:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8003658:	f6a3 030c 	subw	r3, r3, #2060	; 0x80c
 800365c:	6018      	str	r0, [r3, #0]
	uint8_t buffer[sizeof(struct bitmapList)];
	ext_flash_read(BITMAP_LIST_SECTOR*SECTOR_SIZE, buffer, sizeof(struct bitmapList));
 800365e:	f107 030c 	add.w	r3, r7, #12
 8003662:	f640 0204 	movw	r2, #2052	; 0x804
 8003666:	4619      	mov	r1, r3
 8003668:	f44f 2048 	mov.w	r0, #819200	; 0xc8000
 800366c:	f000 fc09 	bl	8003e82 <ext_flash_read>
	*destination = *((struct bitmapList *) buffer);
 8003670:	f107 020c 	add.w	r2, r7, #12
 8003674:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8003678:	f6a3 030c 	subw	r3, r3, #2060	; 0x80c
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4618      	mov	r0, r3
 8003680:	4611      	mov	r1, r2
 8003682:	f640 0304 	movw	r3, #2052	; 0x804
 8003686:	461a      	mov	r2, r3
 8003688:	f007 fac2 	bl	800ac10 <memcpy>
}
 800368c:	bf00      	nop
 800368e:	f507 6701 	add.w	r7, r7, #2064	; 0x810
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
	...

08003698 <openScreen>:
 *
 *	@returns: number of objects read. If maxData and maxObjects are sufficient, this will be the same as @screenHeader.objectCount. If @maxObjects limit was reached,
 *	then return value will be equal to @maxObjects. If @maxData limit was reached, then return value will be lower than @maxObjects.
 *
 */
int openScreen(uint16_t screenSector, struct screen *screenHeader, struct object *objectArray, uint8_t *dataArray, uint8_t **dataPointerArray, uint16_t maxData, uint16_t maxObjects){
 8003698:	b590      	push	{r4, r7, lr}
 800369a:	b08d      	sub	sp, #52	; 0x34
 800369c:	af00      	add	r7, sp, #0
 800369e:	60b9      	str	r1, [r7, #8]
 80036a0:	607a      	str	r2, [r7, #4]
 80036a2:	603b      	str	r3, [r7, #0]
 80036a4:	4603      	mov	r3, r0
 80036a6:	81fb      	strh	r3, [r7, #14]

	uint32_t flashAddr = screenSector*SECTOR_SIZE;
 80036a8:	89fb      	ldrh	r3, [r7, #14]
 80036aa:	031b      	lsls	r3, r3, #12
 80036ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint8_t screenHeaderBuffer[sizeof(struct screen)];
	ext_flash_read(flashAddr, screenHeaderBuffer, sizeof(struct screen));
 80036ae:	f107 0320 	add.w	r3, r7, #32
 80036b2:	2204      	movs	r2, #4
 80036b4:	4619      	mov	r1, r3
 80036b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80036b8:	f000 fbe3 	bl	8003e82 <ext_flash_read>
	flashAddr += sizeof(struct screen);
 80036bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036be:	3304      	adds	r3, #4
 80036c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	*screenHeader = *((struct screen *) screenHeaderBuffer);
 80036c2:	f107 0320 	add.w	r3, r7, #32
 80036c6:	68ba      	ldr	r2, [r7, #8]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	6013      	str	r3, [r2, #0]

	uint16_t objectsToRead = (*screenHeader).objectCount;
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	885b      	ldrh	r3, [r3, #2]
 80036d0:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint16_t objectIndex = 0;
 80036d2:	2300      	movs	r3, #0
 80036d4:	853b      	strh	r3, [r7, #40]	; 0x28
	uint16_t dataIndex = 0;
 80036d6:	2300      	movs	r3, #0
 80036d8:	84fb      	strh	r3, [r7, #38]	; 0x26
	if(objectsToRead > maxObjects){
 80036da:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80036dc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d964      	bls.n	80037ae <openScreen+0x116>
		printf("[cl] Limiting objects to be read from screen to maxObjects! (down to %d from %d)", maxObjects, objectsToRead);
 80036e4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80036e8:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80036ea:	4619      	mov	r1, r3
 80036ec:	4834      	ldr	r0, [pc, #208]	; (80037c0 <openScreen+0x128>)
 80036ee:	f007 faa5 	bl	800ac3c <iprintf>
		objectsToRead = maxObjects;
 80036f2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80036f6:	857b      	strh	r3, [r7, #42]	; 0x2a
	}

	uint8_t objectHeaderBuffer[sizeof(struct object)];
	while(objectIndex < objectsToRead){
 80036f8:	e059      	b.n	80037ae <openScreen+0x116>
		ext_flash_read(flashAddr, objectHeaderBuffer, sizeof(struct object));
 80036fa:	f107 0310 	add.w	r3, r7, #16
 80036fe:	220e      	movs	r2, #14
 8003700:	4619      	mov	r1, r3
 8003702:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003704:	f000 fbbd 	bl	8003e82 <ext_flash_read>
		flashAddr += sizeof(struct object);
 8003708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800370a:	330e      	adds	r3, #14
 800370c:	62fb      	str	r3, [r7, #44]	; 0x2c
		*(objectArray + objectIndex) = *((struct object *) objectHeaderBuffer);
 800370e:	f107 0110 	add.w	r1, r7, #16
 8003712:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003714:	4613      	mov	r3, r2
 8003716:	00db      	lsls	r3, r3, #3
 8003718:	1a9b      	subs	r3, r3, r2
 800371a:	005b      	lsls	r3, r3, #1
 800371c:	461a      	mov	r2, r3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4413      	add	r3, r2
 8003722:	460a      	mov	r2, r1
 8003724:	6814      	ldr	r4, [r2, #0]
 8003726:	6850      	ldr	r0, [r2, #4]
 8003728:	6891      	ldr	r1, [r2, #8]
 800372a:	601c      	str	r4, [r3, #0]
 800372c:	6058      	str	r0, [r3, #4]
 800372e:	6099      	str	r1, [r3, #8]
 8003730:	8992      	ldrh	r2, [r2, #12]
 8003732:	819a      	strh	r2, [r3, #12]
		uint16_t currentObjectDataLen = (objectArray + objectIndex)->dataLen;
 8003734:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003736:	4613      	mov	r3, r2
 8003738:	00db      	lsls	r3, r3, #3
 800373a:	1a9b      	subs	r3, r3, r2
 800373c:	005b      	lsls	r3, r3, #1
 800373e:	461a      	mov	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4413      	add	r3, r2
 8003744:	899b      	ldrh	r3, [r3, #12]
 8003746:	84bb      	strh	r3, [r7, #36]	; 0x24
		if(currentObjectDataLen > 0){
 8003748:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800374a:	2b00      	cmp	r3, #0
 800374c:	d026      	beq.n	800379c <openScreen+0x104>
			if(dataIndex + currentObjectDataLen > maxData){
 800374e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003750:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003752:	441a      	add	r2, r3
 8003754:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003758:	429a      	cmp	r2, r3
 800375a:	dd06      	ble.n	800376a <openScreen+0xd2>
				printf("[cl] Ran out of data buffer when trying to add object #%d \n\r", objectIndex);
 800375c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800375e:	4619      	mov	r1, r3
 8003760:	4818      	ldr	r0, [pc, #96]	; (80037c4 <openScreen+0x12c>)
 8003762:	f007 fa6b 	bl	800ac3c <iprintf>
				return(objectIndex);
 8003766:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003768:	e026      	b.n	80037b8 <openScreen+0x120>
			}
			//object data fits in buffer
			ext_flash_read(flashAddr, (dataArray + dataIndex), currentObjectDataLen);
 800376a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800376c:	683a      	ldr	r2, [r7, #0]
 800376e:	4413      	add	r3, r2
 8003770:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003772:	4619      	mov	r1, r3
 8003774:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003776:	f000 fb84 	bl	8003e82 <ext_flash_read>
			*(dataPointerArray + objectIndex) = (dataArray + dataIndex);
 800377a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800377c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003782:	440b      	add	r3, r1
 8003784:	6839      	ldr	r1, [r7, #0]
 8003786:	440a      	add	r2, r1
 8003788:	601a      	str	r2, [r3, #0]
			flashAddr += currentObjectDataLen;
 800378a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800378c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800378e:	4413      	add	r3, r2
 8003790:	62fb      	str	r3, [r7, #44]	; 0x2c
			dataIndex += currentObjectDataLen;
 8003792:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003794:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003796:	4413      	add	r3, r2
 8003798:	84fb      	strh	r3, [r7, #38]	; 0x26
 800379a:	e005      	b.n	80037a8 <openScreen+0x110>
			}
		else{
			*(dataPointerArray + objectIndex) = NULL;
 800379c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80037a2:	4413      	add	r3, r2
 80037a4:	2200      	movs	r2, #0
 80037a6:	601a      	str	r2, [r3, #0]
		}

		objectIndex++;
 80037a8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80037aa:	3301      	adds	r3, #1
 80037ac:	853b      	strh	r3, [r7, #40]	; 0x28
	while(objectIndex < objectsToRead){
 80037ae:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80037b0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d3a1      	bcc.n	80036fa <openScreen+0x62>
	}

	return objectIndex;
 80037b6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28

}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3734      	adds	r7, #52	; 0x34
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd90      	pop	{r4, r7, pc}
 80037c0:	0800caa0 	.word	0x0800caa0
 80037c4:	0800caf4 	.word	0x0800caf4

080037c8 <readBitmap>:
 *
 * Caller needs to provide an array @dataArray at least @maxData pixels long. Each pixel is 2 bytes.
 *
 * @returns: number of pixels read. If maxPixels is sufficient, this will be the same as bitmapHeader.xsize*bitmapHeader.ysize.
 * */
int readBitmap(uint16_t bitmapSector, struct bitmap *bitmapHeader, uint16_t *dataArray, uint16_t maxPixels){
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b08a      	sub	sp, #40	; 0x28
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	60b9      	str	r1, [r7, #8]
 80037d0:	607a      	str	r2, [r7, #4]
 80037d2:	461a      	mov	r2, r3
 80037d4:	4603      	mov	r3, r0
 80037d6:	81fb      	strh	r3, [r7, #14]
 80037d8:	4613      	mov	r3, r2
 80037da:	81bb      	strh	r3, [r7, #12]
	uint32_t flashAddr = bitmapSector*SECTOR_SIZE;
 80037dc:	89fb      	ldrh	r3, [r7, #14]
 80037de:	031b      	lsls	r3, r3, #12
 80037e0:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t bitmapHeaderBuffer[sizeof(struct bitmap)];
	ext_flash_read(flashAddr, bitmapHeaderBuffer, sizeof(struct bitmap));
 80037e2:	f107 0318 	add.w	r3, r7, #24
 80037e6:	2206      	movs	r2, #6
 80037e8:	4619      	mov	r1, r3
 80037ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80037ec:	f000 fb49 	bl	8003e82 <ext_flash_read>
	flashAddr += sizeof(struct bitmap);
 80037f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f2:	3306      	adds	r3, #6
 80037f4:	627b      	str	r3, [r7, #36]	; 0x24
	*bitmapHeader = *((struct bitmap *) bitmapHeaderBuffer);
 80037f6:	f107 0218 	add.w	r2, r7, #24
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	6811      	ldr	r1, [r2, #0]
 80037fe:	6019      	str	r1, [r3, #0]
 8003800:	8892      	ldrh	r2, [r2, #4]
 8003802:	809a      	strh	r2, [r3, #4]

	uint16_t pixelsToRead = (*bitmapHeader).xsize*(*bitmapHeader).ysize;
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	885a      	ldrh	r2, [r3, #2]
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	889b      	ldrh	r3, [r3, #4]
 800380c:	fb12 f303 	smulbb	r3, r2, r3
 8003810:	847b      	strh	r3, [r7, #34]	; 0x22
	if(pixelsToRead > maxPixels){
 8003812:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003814:	89bb      	ldrh	r3, [r7, #12]
 8003816:	429a      	cmp	r2, r3
 8003818:	d909      	bls.n	800382e <readBitmap+0x66>
		printf("[cl] Limiting number of pixels of bitmap %d down to %d (from total size %d)\n\r", (*bitmapHeader).bitmapNumber, maxPixels, pixelsToRead);
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	881b      	ldrh	r3, [r3, #0]
 800381e:	4619      	mov	r1, r3
 8003820:	89ba      	ldrh	r2, [r7, #12]
 8003822:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003824:	4815      	ldr	r0, [pc, #84]	; (800387c <readBitmap+0xb4>)
 8003826:	f007 fa09 	bl	800ac3c <iprintf>
		pixelsToRead = maxPixels;
 800382a:	89bb      	ldrh	r3, [r7, #12]
 800382c:	847b      	strh	r3, [r7, #34]	; 0x22
	}

	uint16_t pixelIndex = 0;
 800382e:	2300      	movs	r3, #0
 8003830:	843b      	strh	r3, [r7, #32]
	uint8_t pixelBuffer[2];
	while(pixelIndex < pixelsToRead){
 8003832:	e019      	b.n	8003868 <readBitmap+0xa0>
		ext_flash_read(flashAddr, pixelBuffer, 2);
 8003834:	f107 0314 	add.w	r3, r7, #20
 8003838:	2202      	movs	r2, #2
 800383a:	4619      	mov	r1, r3
 800383c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800383e:	f000 fb20 	bl	8003e82 <ext_flash_read>
		*(dataArray + pixelIndex) = (uint16_t) (((*pixelBuffer) << 8) + *(pixelBuffer+1));
 8003842:	7d3b      	ldrb	r3, [r7, #20]
 8003844:	b29b      	uxth	r3, r3
 8003846:	021b      	lsls	r3, r3, #8
 8003848:	b299      	uxth	r1, r3
 800384a:	7d7b      	ldrb	r3, [r7, #21]
 800384c:	b29a      	uxth	r2, r3
 800384e:	8c3b      	ldrh	r3, [r7, #32]
 8003850:	005b      	lsls	r3, r3, #1
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	4403      	add	r3, r0
 8003856:	440a      	add	r2, r1
 8003858:	b292      	uxth	r2, r2
 800385a:	801a      	strh	r2, [r3, #0]
		flashAddr += 2;
 800385c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385e:	3302      	adds	r3, #2
 8003860:	627b      	str	r3, [r7, #36]	; 0x24
		pixelIndex += 1;
 8003862:	8c3b      	ldrh	r3, [r7, #32]
 8003864:	3301      	adds	r3, #1
 8003866:	843b      	strh	r3, [r7, #32]
	while(pixelIndex < pixelsToRead){
 8003868:	8c3a      	ldrh	r2, [r7, #32]
 800386a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800386c:	429a      	cmp	r2, r3
 800386e:	d3e1      	bcc.n	8003834 <readBitmap+0x6c>
	}
}
 8003870:	bf00      	nop
 8003872:	4618      	mov	r0, r3
 8003874:	3728      	adds	r7, #40	; 0x28
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	0800cb34 	.word	0x0800cb34

08003880 <printAllScreens>:

/*
 * debug function to check what is actually stored in flash
 */
void printAllScreens(struct generalConfig gconf){
 8003880:	b084      	sub	sp, #16
 8003882:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003886:	b0a9      	sub	sp, #164	; 0xa4
 8003888:	af04      	add	r7, sp, #16
 800388a:	f107 06b8 	add.w	r6, r7, #184	; 0xb8
 800388e:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8003892:	466b      	mov	r3, sp
 8003894:	607b      	str	r3, [r7, #4]
	uint8_t screenIndex = 0;
 8003896:	2300      	movs	r3, #0
 8003898:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	printf("[PAS] Supplied gconf says there are %d screens.\n\r", gconf.totalScreens);
 800389c:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
 80038a0:	4619      	mov	r1, r3
 80038a2:	48b8      	ldr	r0, [pc, #736]	; (8003b84 <printAllScreens+0x304>)
 80038a4:	f007 f9ca 	bl	800ac3c <iprintf>
	uint16_t maxObjects = 128;
 80038a8:	2380      	movs	r3, #128	; 0x80
 80038aa:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
	uint16_t maxData = SECTOR_SIZE*4;
 80038ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80038b2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	struct screen screenHeader;
	struct object objArr[maxObjects];
 80038b6:	f8b7 6088 	ldrh.w	r6, [r7, #136]	; 0x88
 80038ba:	4633      	mov	r3, r6
 80038bc:	3b01      	subs	r3, #1
 80038be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80038c2:	b2b3      	uxth	r3, r6
 80038c4:	2200      	movs	r2, #0
 80038c6:	469a      	mov	sl, r3
 80038c8:	4693      	mov	fp, r2
 80038ca:	4652      	mov	r2, sl
 80038cc:	465b      	mov	r3, fp
 80038ce:	f04f 0000 	mov.w	r0, #0
 80038d2:	f04f 0100 	mov.w	r1, #0
 80038d6:	00d9      	lsls	r1, r3, #3
 80038d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80038dc:	00d0      	lsls	r0, r2, #3
 80038de:	4602      	mov	r2, r0
 80038e0:	460b      	mov	r3, r1
 80038e2:	ebb2 040a 	subs.w	r4, r2, sl
 80038e6:	eb63 050b 	sbc.w	r5, r3, fp
 80038ea:	f04f 0200 	mov.w	r2, #0
 80038ee:	f04f 0300 	mov.w	r3, #0
 80038f2:	012b      	lsls	r3, r5, #4
 80038f4:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80038f8:	0122      	lsls	r2, r4, #4
 80038fa:	b2b3      	uxth	r3, r6
 80038fc:	2200      	movs	r2, #0
 80038fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8003900:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003902:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8003906:	4622      	mov	r2, r4
 8003908:	462b      	mov	r3, r5
 800390a:	f04f 0000 	mov.w	r0, #0
 800390e:	f04f 0100 	mov.w	r1, #0
 8003912:	00d9      	lsls	r1, r3, #3
 8003914:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003918:	00d0      	lsls	r0, r2, #3
 800391a:	4602      	mov	r2, r0
 800391c:	460b      	mov	r3, r1
 800391e:	4621      	mov	r1, r4
 8003920:	ebb2 0801 	subs.w	r8, r2, r1
 8003924:	4629      	mov	r1, r5
 8003926:	eb63 0901 	sbc.w	r9, r3, r1
 800392a:	f04f 0200 	mov.w	r2, #0
 800392e:	f04f 0300 	mov.w	r3, #0
 8003932:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8003936:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 800393a:	ea4f 1208 	mov.w	r2, r8, lsl #4
 800393e:	4632      	mov	r2, r6
 8003940:	4613      	mov	r3, r2
 8003942:	00db      	lsls	r3, r3, #3
 8003944:	1a9b      	subs	r3, r3, r2
 8003946:	005b      	lsls	r3, r3, #1
 8003948:	3307      	adds	r3, #7
 800394a:	08db      	lsrs	r3, r3, #3
 800394c:	00db      	lsls	r3, r3, #3
 800394e:	ebad 0d03 	sub.w	sp, sp, r3
 8003952:	ab04      	add	r3, sp, #16
 8003954:	3301      	adds	r3, #1
 8003956:	085b      	lsrs	r3, r3, #1
 8003958:	005b      	lsls	r3, r3, #1
 800395a:	67bb      	str	r3, [r7, #120]	; 0x78
	uint8_t dataArr[maxData];
 800395c:	f8b7 108a 	ldrh.w	r1, [r7, #138]	; 0x8a
 8003960:	460b      	mov	r3, r1
 8003962:	3b01      	subs	r3, #1
 8003964:	677b      	str	r3, [r7, #116]	; 0x74
 8003966:	b28b      	uxth	r3, r1
 8003968:	2200      	movs	r2, #0
 800396a:	623b      	str	r3, [r7, #32]
 800396c:	627a      	str	r2, [r7, #36]	; 0x24
 800396e:	f04f 0200 	mov.w	r2, #0
 8003972:	f04f 0300 	mov.w	r3, #0
 8003976:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800397a:	4628      	mov	r0, r5
 800397c:	00c3      	lsls	r3, r0, #3
 800397e:	4620      	mov	r0, r4
 8003980:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003984:	4620      	mov	r0, r4
 8003986:	00c2      	lsls	r2, r0, #3
 8003988:	b28b      	uxth	r3, r1
 800398a:	2200      	movs	r2, #0
 800398c:	61bb      	str	r3, [r7, #24]
 800398e:	61fa      	str	r2, [r7, #28]
 8003990:	f04f 0200 	mov.w	r2, #0
 8003994:	f04f 0300 	mov.w	r3, #0
 8003998:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 800399c:	4628      	mov	r0, r5
 800399e:	00c3      	lsls	r3, r0, #3
 80039a0:	4620      	mov	r0, r4
 80039a2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80039a6:	4620      	mov	r0, r4
 80039a8:	00c2      	lsls	r2, r0, #3
 80039aa:	460b      	mov	r3, r1
 80039ac:	3307      	adds	r3, #7
 80039ae:	08db      	lsrs	r3, r3, #3
 80039b0:	00db      	lsls	r3, r3, #3
 80039b2:	ebad 0d03 	sub.w	sp, sp, r3
 80039b6:	ab04      	add	r3, sp, #16
 80039b8:	3300      	adds	r3, #0
 80039ba:	673b      	str	r3, [r7, #112]	; 0x70
	uint8_t *pointerArray[maxObjects];
 80039bc:	f8b7 1088 	ldrh.w	r1, [r7, #136]	; 0x88
 80039c0:	460b      	mov	r3, r1
 80039c2:	3b01      	subs	r3, #1
 80039c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80039c6:	b28b      	uxth	r3, r1
 80039c8:	2200      	movs	r2, #0
 80039ca:	613b      	str	r3, [r7, #16]
 80039cc:	617a      	str	r2, [r7, #20]
 80039ce:	f04f 0200 	mov.w	r2, #0
 80039d2:	f04f 0300 	mov.w	r3, #0
 80039d6:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80039da:	4628      	mov	r0, r5
 80039dc:	0143      	lsls	r3, r0, #5
 80039de:	4620      	mov	r0, r4
 80039e0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80039e4:	4620      	mov	r0, r4
 80039e6:	0142      	lsls	r2, r0, #5
 80039e8:	b28b      	uxth	r3, r1
 80039ea:	2200      	movs	r2, #0
 80039ec:	60bb      	str	r3, [r7, #8]
 80039ee:	60fa      	str	r2, [r7, #12]
 80039f0:	f04f 0200 	mov.w	r2, #0
 80039f4:	f04f 0300 	mov.w	r3, #0
 80039f8:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80039fc:	4628      	mov	r0, r5
 80039fe:	0143      	lsls	r3, r0, #5
 8003a00:	4620      	mov	r0, r4
 8003a02:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003a06:	4620      	mov	r0, r4
 8003a08:	0142      	lsls	r2, r0, #5
 8003a0a:	460b      	mov	r3, r1
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	3307      	adds	r3, #7
 8003a10:	08db      	lsrs	r3, r3, #3
 8003a12:	00db      	lsls	r3, r3, #3
 8003a14:	ebad 0d03 	sub.w	sp, sp, r3
 8003a18:	ab04      	add	r3, sp, #16
 8003a1a:	3303      	adds	r3, #3
 8003a1c:	089b      	lsrs	r3, r3, #2
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	66bb      	str	r3, [r7, #104]	; 0x68

	while(screenIndex < gconf.totalScreens){
 8003a22:	e09c      	b.n	8003b5e <printAllScreens+0x2de>
		printf("[PAS] Opening screen #%d stored @%d \n\r", screenIndex, gconf.screenSectors[screenIndex]);
 8003a24:	f897 1087 	ldrb.w	r1, [r7, #135]	; 0x87
 8003a28:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8003a2c:	005b      	lsls	r3, r3, #1
 8003a2e:	3388      	adds	r3, #136	; 0x88
 8003a30:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003a34:	4413      	add	r3, r2
 8003a36:	885b      	ldrh	r3, [r3, #2]
 8003a38:	461a      	mov	r2, r3
 8003a3a:	4853      	ldr	r0, [pc, #332]	; (8003b88 <printAllScreens+0x308>)
 8003a3c:	f007 f8fe 	bl	800ac3c <iprintf>
		int objectsRead = openScreen(gconf.screenSectors[screenIndex], &screenHeader, objArr, dataArr, pointerArray, maxData, maxObjects);
 8003a40:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8003a44:	005b      	lsls	r3, r3, #1
 8003a46:	3388      	adds	r3, #136	; 0x88
 8003a48:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003a4c:	4413      	add	r3, r2
 8003a4e:	8858      	ldrh	r0, [r3, #2]
 8003a50:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8003a54:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8003a58:	9302      	str	r3, [sp, #8]
 8003a5a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8003a5e:	9301      	str	r3, [sp, #4]
 8003a60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a62:	9300      	str	r3, [sp, #0]
 8003a64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a66:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003a68:	f7ff fe16 	bl	8003698 <openScreen>
 8003a6c:	6678      	str	r0, [r7, #100]	; 0x64
		printf("[PAS] [%d / %d] objects have been read.\n\r", objectsRead, screenHeader.objectCount);
 8003a6e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8003a72:	461a      	mov	r2, r3
 8003a74:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003a76:	4845      	ldr	r0, [pc, #276]	; (8003b8c <printAllScreens+0x30c>)
 8003a78:	f007 f8e0 	bl	800ac3c <iprintf>
		printf("[PAS] Object report:\n\r");
 8003a7c:	4844      	ldr	r0, [pc, #272]	; (8003b90 <printAllScreens+0x310>)
 8003a7e:	f007 f8dd 	bl	800ac3c <iprintf>
		uint16_t objectIndex = 0;
 8003a82:	2300      	movs	r3, #0
 8003a84:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
		while(objectIndex < objectsRead){
 8003a88:	e059      	b.n	8003b3e <printAllScreens+0x2be>
			struct object thisObject = *(objArr + objectIndex);
 8003a8a:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8003a8e:	4613      	mov	r3, r2
 8003a90:	00db      	lsls	r3, r3, #3
 8003a92:	1a9b      	subs	r3, r3, r2
 8003a94:	005b      	lsls	r3, r3, #1
 8003a96:	461a      	mov	r2, r3
 8003a98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a9a:	441a      	add	r2, r3
 8003a9c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003aa0:	4614      	mov	r4, r2
 8003aa2:	6820      	ldr	r0, [r4, #0]
 8003aa4:	6861      	ldr	r1, [r4, #4]
 8003aa6:	68a2      	ldr	r2, [r4, #8]
 8003aa8:	c307      	stmia	r3!, {r0, r1, r2}
 8003aaa:	89a2      	ldrh	r2, [r4, #12]
 8003aac:	801a      	strh	r2, [r3, #0]
			char typeStr[30];
			objectTypeToString(thisObject.objectType, typeStr);
 8003aae:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8003ab2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003ab6:	4611      	mov	r1, r2
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f000 f91b 	bl	8003cf4 <objectTypeToString>
			printf("[PAS] %s id=%d from (%d, %d) to (%d,%d), hex data (%db) =[", typeStr, thisObject.objectId, thisObject.xstart, thisObject.ystart, thisObject.xend, thisObject.yend, thisObject.dataLen);
 8003abe:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003ac2:	461d      	mov	r5, r3
 8003ac4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003ac8:	461e      	mov	r6, r3
 8003aca:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003ace:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 8003ad2:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8003ad6:	4608      	mov	r0, r1
 8003ad8:	f8b7 105c 	ldrh.w	r1, [r7, #92]	; 0x5c
 8003adc:	460c      	mov	r4, r1
 8003ade:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8003ae2:	9403      	str	r4, [sp, #12]
 8003ae4:	9002      	str	r0, [sp, #8]
 8003ae6:	9201      	str	r2, [sp, #4]
 8003ae8:	9300      	str	r3, [sp, #0]
 8003aea:	4633      	mov	r3, r6
 8003aec:	462a      	mov	r2, r5
 8003aee:	4829      	ldr	r0, [pc, #164]	; (8003b94 <printAllScreens+0x314>)
 8003af0:	f007 f8a4 	bl	800ac3c <iprintf>
			int dataIndex = 0;
 8003af4:	2300      	movs	r3, #0
 8003af6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			while(dataIndex < thisObject.dataLen){
 8003afa:	e011      	b.n	8003b20 <printAllScreens+0x2a0>
				printf("%02x", *(pointerArray[objectIndex] + dataIndex));
 8003afc:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8003b00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b02:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003b06:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003b0a:	4413      	add	r3, r2
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	4619      	mov	r1, r3
 8003b10:	4821      	ldr	r0, [pc, #132]	; (8003b98 <printAllScreens+0x318>)
 8003b12:	f007 f893 	bl	800ac3c <iprintf>
				dataIndex++;
 8003b16:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			while(dataIndex < thisObject.dataLen){
 8003b20:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003b24:	461a      	mov	r2, r3
 8003b26:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	dbe6      	blt.n	8003afc <printAllScreens+0x27c>
			}
			printf("]\n\r");
 8003b2e:	481b      	ldr	r0, [pc, #108]	; (8003b9c <printAllScreens+0x31c>)
 8003b30:	f007 f884 	bl	800ac3c <iprintf>
			objectIndex++;
 8003b34:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8003b38:	3301      	adds	r3, #1
 8003b3a:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
		while(objectIndex < objectsRead){
 8003b3e:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8003b42:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003b44:	429a      	cmp	r2, r3
 8003b46:	dca0      	bgt.n	8003a8a <printAllScreens+0x20a>
		}
		printf("[PAS] End of screen #%d \n\r", screenIndex);
 8003b48:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	4814      	ldr	r0, [pc, #80]	; (8003ba0 <printAllScreens+0x320>)
 8003b50:	f007 f874 	bl	800ac3c <iprintf>
		screenIndex++;
 8003b54:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8003b58:	3301      	adds	r3, #1
 8003b5a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	while(screenIndex < gconf.totalScreens){
 8003b5e:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
 8003b62:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8003b66:	429a      	cmp	r2, r3
 8003b68:	f4ff af5c 	bcc.w	8003a24 <printAllScreens+0x1a4>
	}

	printf("[PAS] Finished. \n\n\n\r");
 8003b6c:	480d      	ldr	r0, [pc, #52]	; (8003ba4 <printAllScreens+0x324>)
 8003b6e:	f007 f865 	bl	800ac3c <iprintf>
 8003b72:	f8d7 d004 	ldr.w	sp, [r7, #4]
}
 8003b76:	bf00      	nop
 8003b78:	3794      	adds	r7, #148	; 0x94
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b80:	b004      	add	sp, #16
 8003b82:	4770      	bx	lr
 8003b84:	0800cb84 	.word	0x0800cb84
 8003b88:	0800cbb8 	.word	0x0800cbb8
 8003b8c:	0800cbe0 	.word	0x0800cbe0
 8003b90:	0800cc0c 	.word	0x0800cc0c
 8003b94:	0800cc24 	.word	0x0800cc24
 8003b98:	0800cc60 	.word	0x0800cc60
 8003b9c:	0800cc68 	.word	0x0800cc68
 8003ba0:	0800cc6c 	.word	0x0800cc6c
 8003ba4:	0800cc88 	.word	0x0800cc88

08003ba8 <reportBitmaps>:


void reportBitmaps(int printHex){
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	f5ad 6d13 	sub.w	sp, sp, #2352	; 0x930
 8003bae:	af02      	add	r7, sp, #8
 8003bb0:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8003bb4:	f6a3 1324 	subw	r3, r3, #2340	; 0x924
 8003bb8:	6018      	str	r0, [r3, #0]
	struct bitmapList blist;
	readBitmapList(&blist);
 8003bba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f7ff fd44 	bl	800364c <readBitmapList>
	int total = blist.totalBitmaps;
 8003bc4:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8003bc8:	f6a3 0318 	subw	r3, r3, #2072	; 0x818
 8003bcc:	881b      	ldrh	r3, [r3, #0]
 8003bce:	f8c7 391c 	str.w	r3, [r7, #2332]	; 0x91c
	printf("[BR] There are %d bitmaps in memory spanning sectors %d to %d.\n\r", total, BITMAP_LIST_SECTOR+1, blist.lastUsedSector);
 8003bd2:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8003bd6:	f6a3 0318 	subw	r3, r3, #2072	; 0x818
 8003bda:	885b      	ldrh	r3, [r3, #2]
 8003bdc:	22c9      	movs	r2, #201	; 0xc9
 8003bde:	f8d7 191c 	ldr.w	r1, [r7, #2332]	; 0x91c
 8003be2:	483d      	ldr	r0, [pc, #244]	; (8003cd8 <reportBitmaps+0x130>)
 8003be4:	f007 f82a 	bl	800ac3c <iprintf>
	int i = 0;
 8003be8:	2300      	movs	r3, #0
 8003bea:	f8c7 3924 	str.w	r3, [r7, #2340]	; 0x924
	while(i < total){
 8003bee:	e064      	b.n	8003cba <reportBitmaps+0x112>
		int thisSector = blist.bitmapSectors[i];
 8003bf0:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8003bf4:	f6a3 0218 	subw	r2, r3, #2072	; 0x818
 8003bf8:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 8003bfc:	005b      	lsls	r3, r3, #1
 8003bfe:	4413      	add	r3, r2
 8003c00:	889b      	ldrh	r3, [r3, #4]
 8003c02:	f8c7 3918 	str.w	r3, [r7, #2328]	; 0x918
		struct bitmap bm;
		uint16_t pixelBuffer[128];
		int pixelsRead = readBitmap(thisSector, &bm, pixelBuffer, 128);
 8003c06:	f8d7 3918 	ldr.w	r3, [r7, #2328]	; 0x918
 8003c0a:	b298      	uxth	r0, r3
 8003c0c:	f107 0208 	add.w	r2, r7, #8
 8003c10:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8003c14:	2380      	movs	r3, #128	; 0x80
 8003c16:	f7ff fdd7 	bl	80037c8 <readBitmap>
 8003c1a:	f8c7 0914 	str.w	r0, [r7, #2324]	; 0x914
		printf("[BR] Bitmap #%d stored @ sector %d is %dx%d pixels.\n\r", bm.bitmapNumber, thisSector, bm.xsize, bm.ysize);
 8003c1e:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8003c22:	f5a3 6302 	sub.w	r3, r3, #2080	; 0x820
 8003c26:	881b      	ldrh	r3, [r3, #0]
 8003c28:	4619      	mov	r1, r3
 8003c2a:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8003c2e:	f5a3 6302 	sub.w	r3, r3, #2080	; 0x820
 8003c32:	885b      	ldrh	r3, [r3, #2]
 8003c34:	461a      	mov	r2, r3
 8003c36:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8003c3a:	f5a3 6302 	sub.w	r3, r3, #2080	; 0x820
 8003c3e:	889b      	ldrh	r3, [r3, #4]
 8003c40:	9300      	str	r3, [sp, #0]
 8003c42:	4613      	mov	r3, r2
 8003c44:	f8d7 2918 	ldr.w	r2, [r7, #2328]	; 0x918
 8003c48:	4824      	ldr	r0, [pc, #144]	; (8003cdc <reportBitmaps+0x134>)
 8003c4a:	f006 fff7 	bl	800ac3c <iprintf>
		if(printHex){
 8003c4e:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8003c52:	f6a3 1324 	subw	r3, r3, #2340	; 0x924
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d029      	beq.n	8003cb0 <reportBitmaps+0x108>
			printf("[BR] It's first %d pixels are (newlines don't correspond to rows in bitmap!!):", pixelsRead);
 8003c5c:	f8d7 1914 	ldr.w	r1, [r7, #2324]	; 0x914
 8003c60:	481f      	ldr	r0, [pc, #124]	; (8003ce0 <reportBitmaps+0x138>)
 8003c62:	f006 ffeb 	bl	800ac3c <iprintf>
			int printIndex = 0;
 8003c66:	2300      	movs	r3, #0
 8003c68:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
			while(printIndex < pixelsRead){
 8003c6c:	e017      	b.n	8003c9e <reportBitmaps+0xf6>
				if(printIndex%8==0){
 8003c6e:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8003c72:	f003 0307 	and.w	r3, r3, #7
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d102      	bne.n	8003c80 <reportBitmaps+0xd8>
					printf("\n\r    ");
 8003c7a:	481a      	ldr	r0, [pc, #104]	; (8003ce4 <reportBitmaps+0x13c>)
 8003c7c:	f006 ffde 	bl	800ac3c <iprintf>
				}
				printf("%04X ", pixelBuffer[printIndex++]);
 8003c80:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8003c84:	1c5a      	adds	r2, r3, #1
 8003c86:	f8c7 2920 	str.w	r2, [r7, #2336]	; 0x920
 8003c8a:	f607 1228 	addw	r2, r7, #2344	; 0x928
 8003c8e:	f5a2 6212 	sub.w	r2, r2, #2336	; 0x920
 8003c92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c96:	4619      	mov	r1, r3
 8003c98:	4813      	ldr	r0, [pc, #76]	; (8003ce8 <reportBitmaps+0x140>)
 8003c9a:	f006 ffcf 	bl	800ac3c <iprintf>
			while(printIndex < pixelsRead){
 8003c9e:	f8d7 2920 	ldr.w	r2, [r7, #2336]	; 0x920
 8003ca2:	f8d7 3914 	ldr.w	r3, [r7, #2324]	; 0x914
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	dbe1      	blt.n	8003c6e <reportBitmaps+0xc6>
			}
			printf("\n\r");
 8003caa:	4810      	ldr	r0, [pc, #64]	; (8003cec <reportBitmaps+0x144>)
 8003cac:	f006 ffc6 	bl	800ac3c <iprintf>

		}
		i++;
 8003cb0:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	f8c7 3924 	str.w	r3, [r7, #2340]	; 0x924
	while(i < total){
 8003cba:	f8d7 2924 	ldr.w	r2, [r7, #2340]	; 0x924
 8003cbe:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	db94      	blt.n	8003bf0 <reportBitmaps+0x48>
	}
	printf("[BR] Bitmap report finished.\n\r");
 8003cc6:	480a      	ldr	r0, [pc, #40]	; (8003cf0 <reportBitmaps+0x148>)
 8003cc8:	f006 ffb8 	bl	800ac3c <iprintf>
}
 8003ccc:	bf00      	nop
 8003cce:	f607 1728 	addw	r7, r7, #2344	; 0x928
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	0800cca0 	.word	0x0800cca0
 8003cdc:	0800cce4 	.word	0x0800cce4
 8003ce0:	0800cd1c 	.word	0x0800cd1c
 8003ce4:	0800cd6c 	.word	0x0800cd6c
 8003ce8:	0800cd74 	.word	0x0800cd74
 8003cec:	0800cd7c 	.word	0x0800cd7c
 8003cf0:	0800cd80 	.word	0x0800cd80

08003cf4 <objectTypeToString>:
const char *typeNames[] 	= 		{"rectangle", "button", "label", "picture", "screenbutton","slider","interactivelabel"};
const objectType_t types[] 	= 		{rectangle, button, label, picture, screenbutton, slider, interactivelabel};
const int typeCount = 7;

// Make sure that str is long enough for longest member of typeNames!
void objectTypeToString(objectType_t type, char *str){
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b086      	sub	sp, #24
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	6039      	str	r1, [r7, #0]
 8003cfe:	71fb      	strb	r3, [r7, #7]
	int i;
	for(i=0; i<typeCount; i++){
 8003d00:	2300      	movs	r3, #0
 8003d02:	617b      	str	r3, [r7, #20]
 8003d04:	e012      	b.n	8003d2c <objectTypeToString+0x38>
		if(type == types[i]){
 8003d06:	4a14      	ldr	r2, [pc, #80]	; (8003d58 <objectTypeToString+0x64>)
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	79fa      	ldrb	r2, [r7, #7]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d108      	bne.n	8003d26 <objectTypeToString+0x32>
			strcpy(str, typeNames[i]);
 8003d14:	4a11      	ldr	r2, [pc, #68]	; (8003d5c <objectTypeToString+0x68>)
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d1c:	4619      	mov	r1, r3
 8003d1e:	6838      	ldr	r0, [r7, #0]
 8003d20:	f006 ffc4 	bl	800acac <strcpy>
 8003d24:	e014      	b.n	8003d50 <objectTypeToString+0x5c>
	for(i=0; i<typeCount; i++){
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	3301      	adds	r3, #1
 8003d2a:	617b      	str	r3, [r7, #20]
 8003d2c:	2207      	movs	r2, #7
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	4293      	cmp	r3, r2
 8003d32:	dbe8      	blt.n	8003d06 <objectTypeToString+0x12>
			return;
		}
	}
	char noneStr[] = "none";
 8003d34:	4a0a      	ldr	r2, [pc, #40]	; (8003d60 <objectTypeToString+0x6c>)
 8003d36:	f107 030c 	add.w	r3, r7, #12
 8003d3a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003d3e:	6018      	str	r0, [r3, #0]
 8003d40:	3304      	adds	r3, #4
 8003d42:	7019      	strb	r1, [r3, #0]
	strcpy(str, noneStr);
 8003d44:	f107 030c 	add.w	r3, r7, #12
 8003d48:	4619      	mov	r1, r3
 8003d4a:	6838      	ldr	r0, [r7, #0]
 8003d4c:	f006 ffae 	bl	800acac <strcpy>
}
 8003d50:	3718      	adds	r7, #24
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	0800d448 	.word	0x0800d448
 8003d5c:	20000000 	.word	0x20000000
 8003d60:	0800cdf0 	.word	0x0800cdf0

08003d64 <stringToObjectType>:

objectType_t stringToObjectType(char *str){
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
	int i;
	for(i=0; i<typeCount; i++){
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	60fb      	str	r3, [r7, #12]
 8003d70:	e012      	b.n	8003d98 <stringToObjectType+0x34>
		if(strcmp(typeNames[i], str) == 0){
 8003d72:	4a0e      	ldr	r2, [pc, #56]	; (8003dac <stringToObjectType+0x48>)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d7a:	6879      	ldr	r1, [r7, #4]
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f7fc fa27 	bl	80001d0 <strcmp>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d104      	bne.n	8003d92 <stringToObjectType+0x2e>
			return types[i];
 8003d88:	4a09      	ldr	r2, [pc, #36]	; (8003db0 <stringToObjectType+0x4c>)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	4413      	add	r3, r2
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	e007      	b.n	8003da2 <stringToObjectType+0x3e>
	for(i=0; i<typeCount; i++){
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	3301      	adds	r3, #1
 8003d96:	60fb      	str	r3, [r7, #12]
 8003d98:	2207      	movs	r2, #7
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	dbe8      	blt.n	8003d72 <stringToObjectType+0xe>
		}
	}
	return none;
 8003da0:	2300      	movs	r3, #0
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3710      	adds	r7, #16
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	20000000 	.word	0x20000000
 8003db0:	0800d448 	.word	0x0800d448

08003db4 <flashCSSet>:
#include <string.h>

#define FLASHWRITE_DEBUG_PRINT 0


void flashCSSet(){
 8003db4:	b580      	push	{r7, lr}
 8003db6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8003db8:	2201      	movs	r2, #1
 8003dba:	2110      	movs	r1, #16
 8003dbc:	4802      	ldr	r0, [pc, #8]	; (8003dc8 <flashCSSet+0x14>)
 8003dbe:	f003 f9a7 	bl	8007110 <HAL_GPIO_WritePin>
}
 8003dc2:	bf00      	nop
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	40020000 	.word	0x40020000

08003dcc <flashCSReset>:

void flashCSReset(){
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	2110      	movs	r1, #16
 8003dd4:	4802      	ldr	r0, [pc, #8]	; (8003de0 <flashCSReset+0x14>)
 8003dd6:	f003 f99b 	bl	8007110 <HAL_GPIO_WritePin>
}
 8003dda:	bf00      	nop
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	40020000 	.word	0x40020000

08003de4 <ext_flash_erase_4kB>:
		}
	}
}

void ext_flash_erase_4kB(unsigned int address)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
	unsigned int i;

	printf("erase at %d \n\r", address);
 8003dec:	6879      	ldr	r1, [r7, #4]
 8003dee:	481a      	ldr	r0, [pc, #104]	; (8003e58 <ext_flash_erase_4kB+0x74>)
 8003df0:	f006 ff24 	bl	800ac3c <iprintf>

	ext_flash_wren();
 8003df4:	f000 f86c 	bl	8003ed0 <ext_flash_wren>

	flashCSReset();
 8003df8:	f7ff ffe8 	bl	8003dcc <flashCSReset>
	SPI1_Transfer(0x20);
 8003dfc:	2020      	movs	r0, #32
 8003dfe:	f001 ffbf 	bl	8005d80 <SPI1_Transfer>
	SPI1_Transfer((address>>16)&0xFF);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	0c1b      	lsrs	r3, r3, #16
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f001 ffb9 	bl	8005d80 <SPI1_Transfer>
	SPI1_Transfer((address>>8)&0xFF);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	0a1b      	lsrs	r3, r3, #8
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	4618      	mov	r0, r3
 8003e16:	f001 ffb3 	bl	8005d80 <SPI1_Transfer>
	SPI1_Transfer(address&0xFF);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f001 ffae 	bl	8005d80 <SPI1_Transfer>
	flashCSSet();
 8003e24:	f7ff ffc6 	bl	8003db4 <flashCSSet>

	for(i=0;i<1000;i++)
 8003e28:	2300      	movs	r3, #0
 8003e2a:	60fb      	str	r3, [r7, #12]
 8003e2c:	e00a      	b.n	8003e44 <ext_flash_erase_4kB+0x60>
	{
		HAL_Delay(1);
 8003e2e:	2001      	movs	r0, #1
 8003e30:	f002 fe0a 	bl	8006a48 <HAL_Delay>
		if(ext_flash_read_status_register_1()==0x00)
 8003e34:	f000 f838 	bl	8003ea8 <ext_flash_read_status_register_1>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d007      	beq.n	8003e4e <ext_flash_erase_4kB+0x6a>
	for(i=0;i<1000;i++)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	3301      	adds	r3, #1
 8003e42:	60fb      	str	r3, [r7, #12]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e4a:	d3f0      	bcc.n	8003e2e <ext_flash_erase_4kB+0x4a>
		{
			break;
		}
	}
}
 8003e4c:	e000      	b.n	8003e50 <ext_flash_erase_4kB+0x6c>
			break;
 8003e4e:	bf00      	nop
}
 8003e50:	bf00      	nop
 8003e52:	3710      	adds	r7, #16
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	0800cdf8 	.word	0x0800cdf8

08003e5c <ext_flash_write>:




void ext_flash_write(unsigned int address, unsigned char *buff, unsigned int len)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	607a      	str	r2, [r7, #4]
	ext_flash_continuous_write_begin(address);
 8003e68:	68f8      	ldr	r0, [r7, #12]
 8003e6a:	f000 f87c 	bl	8003f66 <ext_flash_continuous_write_begin>
	ext_flash_continuous_write_write(buff, len);
 8003e6e:	6879      	ldr	r1, [r7, #4]
 8003e70:	68b8      	ldr	r0, [r7, #8]
 8003e72:	f000 f898 	bl	8003fa6 <ext_flash_continuous_write_write>
	ext_flash_continuous_write_finish();
 8003e76:	f000 f8b1 	bl	8003fdc <ext_flash_continuous_write_finish>
}
 8003e7a:	bf00      	nop
 8003e7c:	3710      	adds	r7, #16
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}

08003e82 <ext_flash_read>:
void ext_flash_read(unsigned int address, unsigned char *buff, unsigned int len)
{
 8003e82:	b580      	push	{r7, lr}
 8003e84:	b084      	sub	sp, #16
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	60f8      	str	r0, [r7, #12]
 8003e8a:	60b9      	str	r1, [r7, #8]
 8003e8c:	607a      	str	r2, [r7, #4]
	ext_flash_continuous_read_begin(address);
 8003e8e:	68f8      	ldr	r0, [r7, #12]
 8003e90:	f000 f829 	bl	8003ee6 <ext_flash_continuous_read_begin>
	ext_flash_continuous_read_read(buff, len);
 8003e94:	6879      	ldr	r1, [r7, #4]
 8003e96:	68b8      	ldr	r0, [r7, #8]
 8003e98:	f000 f843 	bl	8003f22 <ext_flash_continuous_read_read>
	ext_flash_continuous_read_finish();
 8003e9c:	f000 f85d 	bl	8003f5a <ext_flash_continuous_read_finish>
}
 8003ea0:	bf00      	nop
 8003ea2:	3710      	adds	r7, #16
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <ext_flash_read_status_register_1>:

	return data;
}

unsigned char ext_flash_read_status_register_1()
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
	char data;
	flashCSReset();
 8003eae:	f7ff ff8d 	bl	8003dcc <flashCSReset>
	SPI1_Transfer(0x05);
 8003eb2:	2005      	movs	r0, #5
 8003eb4:	f001 ff64 	bl	8005d80 <SPI1_Transfer>
	data=SPI1_Transfer(0x00);
 8003eb8:	2000      	movs	r0, #0
 8003eba:	f001 ff61 	bl	8005d80 <SPI1_Transfer>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	71fb      	strb	r3, [r7, #7]
	flashCSSet();
 8003ec2:	f7ff ff77 	bl	8003db4 <flashCSSet>

	return data;
 8003ec6:	79fb      	ldrb	r3, [r7, #7]
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3708      	adds	r7, #8
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <ext_flash_wren>:

void ext_flash_wren()
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	af00      	add	r7, sp, #0
	flashCSReset();
 8003ed4:	f7ff ff7a 	bl	8003dcc <flashCSReset>
	SPI1_Transfer(0x06);
 8003ed8:	2006      	movs	r0, #6
 8003eda:	f001 ff51 	bl	8005d80 <SPI1_Transfer>
	flashCSSet();
 8003ede:	f7ff ff69 	bl	8003db4 <flashCSSet>
}
 8003ee2:	bf00      	nop
 8003ee4:	bd80      	pop	{r7, pc}

08003ee6 <ext_flash_continuous_read_begin>:


//Continuous functions below keep conection open while reading, allowing for access to data not aligned to 4kB sectors
void ext_flash_continuous_read_begin(unsigned int address){
 8003ee6:	b580      	push	{r7, lr}
 8003ee8:	b082      	sub	sp, #8
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	6078      	str	r0, [r7, #4]
	command[0]=0x03;
	command[1]=((char *)&address)[3];
	command[2]=((char *)&address)[2];
	command[3]=((char *)&address)[1];*/

	flashCSReset();
 8003eee:	f7ff ff6d 	bl	8003dcc <flashCSReset>

	SPI1_Transfer(0x03);
 8003ef2:	2003      	movs	r0, #3
 8003ef4:	f001 ff44 	bl	8005d80 <SPI1_Transfer>
	SPI1_Transfer((address>>16)&0xFF);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	0c1b      	lsrs	r3, r3, #16
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	4618      	mov	r0, r3
 8003f00:	f001 ff3e 	bl	8005d80 <SPI1_Transfer>
	SPI1_Transfer((address>>8)&0xFF);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	0a1b      	lsrs	r3, r3, #8
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f001 ff38 	bl	8005d80 <SPI1_Transfer>
	SPI1_Transfer(address&0xFF);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	4618      	mov	r0, r3
 8003f16:	f001 ff33 	bl	8005d80 <SPI1_Transfer>
}
 8003f1a:	bf00      	nop
 8003f1c:	3708      	adds	r7, #8
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <ext_flash_continuous_read_read>:

void ext_flash_continuous_read_read(unsigned char *buff, unsigned int len){
 8003f22:	b590      	push	{r4, r7, lr}
 8003f24:	b085      	sub	sp, #20
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
 8003f2a:	6039      	str	r1, [r7, #0]
	for(unsigned int i = 0; i<len; i++){
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	60fb      	str	r3, [r7, #12]
 8003f30:	e00a      	b.n	8003f48 <ext_flash_continuous_read_read+0x26>
		*(buff+i) = SPI1_Transfer(0x00);
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	18d4      	adds	r4, r2, r3
 8003f38:	2000      	movs	r0, #0
 8003f3a:	f001 ff21 	bl	8005d80 <SPI1_Transfer>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	7023      	strb	r3, [r4, #0]
	for(unsigned int i = 0; i<len; i++){
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	3301      	adds	r3, #1
 8003f46:	60fb      	str	r3, [r7, #12]
 8003f48:	68fa      	ldr	r2, [r7, #12]
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d3f0      	bcc.n	8003f32 <ext_flash_continuous_read_read+0x10>
	}
}
 8003f50:	bf00      	nop
 8003f52:	bf00      	nop
 8003f54:	3714      	adds	r7, #20
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd90      	pop	{r4, r7, pc}

08003f5a <ext_flash_continuous_read_finish>:
void ext_flash_continuous_read_skip(unsigned int len){
	for(unsigned int i = 0; i<len; i++){
			SPI1_Transfer(0x00);
	}
}
void ext_flash_continuous_read_finish(){
 8003f5a:	b580      	push	{r7, lr}
 8003f5c:	af00      	add	r7, sp, #0
	flashCSSet();
 8003f5e:	f7ff ff29 	bl	8003db4 <flashCSSet>
}
 8003f62:	bf00      	nop
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <ext_flash_continuous_write_begin>:

void ext_flash_continuous_write_begin(unsigned int address){
 8003f66:	b580      	push	{r7, lr}
 8003f68:	b082      	sub	sp, #8
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
	ext_flash_wren();
 8003f6e:	f7ff ffaf 	bl	8003ed0 <ext_flash_wren>
	flashCSReset();
 8003f72:	f7ff ff2b 	bl	8003dcc <flashCSReset>
	SPI1_Transfer(0x02);
 8003f76:	2002      	movs	r0, #2
 8003f78:	f001 ff02 	bl	8005d80 <SPI1_Transfer>
	SPI1_Transfer((address>>16)&0xFF);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	0c1b      	lsrs	r3, r3, #16
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	4618      	mov	r0, r3
 8003f84:	f001 fefc 	bl	8005d80 <SPI1_Transfer>
	SPI1_Transfer((address>>8)&0xFF);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	0a1b      	lsrs	r3, r3, #8
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f001 fef6 	bl	8005d80 <SPI1_Transfer>
	SPI1_Transfer(address&0xFF);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f001 fef1 	bl	8005d80 <SPI1_Transfer>
	if(FLASHWRITE_DEBUG_PRINT){printf("FLASHWRITE @ %x :", address);};
}
 8003f9e:	bf00      	nop
 8003fa0:	3708      	adds	r7, #8
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}

08003fa6 <ext_flash_continuous_write_write>:
void ext_flash_continuous_write_write(unsigned char *buff, unsigned int len){
 8003fa6:	b580      	push	{r7, lr}
 8003fa8:	b084      	sub	sp, #16
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	6078      	str	r0, [r7, #4]
 8003fae:	6039      	str	r1, [r7, #0]
	unsigned int i;

	for(i=0;i<len;i++)
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	60fb      	str	r3, [r7, #12]
 8003fb4:	e009      	b.n	8003fca <ext_flash_continuous_write_write+0x24>
		{
			SPI1_Transfer(buff[i]);
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	4413      	add	r3, r2
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f001 fede 	bl	8005d80 <SPI1_Transfer>
	for(i=0;i<len;i++)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	60fb      	str	r3, [r7, #12]
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d3f1      	bcc.n	8003fb6 <ext_flash_continuous_write_write+0x10>
			if(FLASHWRITE_DEBUG_PRINT){printf(" %x ", buff[i]);};
		}
	if(FLASHWRITE_DEBUG_PRINT){printf("\n\r");};
}
 8003fd2:	bf00      	nop
 8003fd4:	bf00      	nop
 8003fd6:	3710      	adds	r7, #16
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <ext_flash_continuous_write_finish>:
void ext_flash_continuous_write_finish(){
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0
	flashCSSet();
 8003fe2:	f7ff fee7 	bl	8003db4 <flashCSSet>
	unsigned int i;
	for(i=0;i<1000;i++)
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	607b      	str	r3, [r7, #4]
 8003fea:	e00a      	b.n	8004002 <ext_flash_continuous_write_finish+0x26>
	{
		HAL_Delay(1);
 8003fec:	2001      	movs	r0, #1
 8003fee:	f002 fd2b 	bl	8006a48 <HAL_Delay>
		if(ext_flash_read_status_register_1()==0x00)
 8003ff2:	f7ff ff59 	bl	8003ea8 <ext_flash_read_status_register_1>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d007      	beq.n	800400c <ext_flash_continuous_write_finish+0x30>
	for(i=0;i<1000;i++)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	3301      	adds	r3, #1
 8004000:	607b      	str	r3, [r7, #4]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004008:	d3f0      	bcc.n	8003fec <ext_flash_continuous_write_finish+0x10>
		{
			break;
		}
	}
}
 800400a:	e000      	b.n	800400e <ext_flash_continuous_write_finish+0x32>
			break;
 800400c:	bf00      	nop
}
 800400e:	bf00      	nop
 8004010:	3708      	adds	r7, #8
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
	...

08004018 <ext_flash_write_multipage>:

}



void ext_flash_write_multipage(unsigned int address, unsigned char *buff, unsigned int len){
 8004018:	b580      	push	{r7, lr}
 800401a:	b0c8      	sub	sp, #288	; 0x120
 800401c:	af00      	add	r7, sp, #0
 800401e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004022:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004026:	6018      	str	r0, [r3, #0]
 8004028:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800402c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004030:	6019      	str	r1, [r3, #0]
 8004032:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004036:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800403a:	601a      	str	r2, [r3, #0]
	printf("Multipage write [%d]b@%d \n\r", len, address);
 800403c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004040:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 8004044:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004048:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800404c:	6812      	ldr	r2, [r2, #0]
 800404e:	6819      	ldr	r1, [r3, #0]
 8004050:	4837      	ldr	r0, [pc, #220]	; (8004130 <ext_flash_write_multipage+0x118>)
 8004052:	f006 fdf3 	bl	800ac3c <iprintf>
	unsigned char pageBuff[PAGE_SIZE];
	unsigned int bytesLeft = len;
 8004056:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800405a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	unsigned int buffIndex = 0;
 8004064:	2300      	movs	r3, #0
 8004066:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	unsigned int addrIncrement = 0;
 800406a:	2300      	movs	r3, #0
 800406c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

	while(bytesLeft > 0){
 8004070:	e054      	b.n	800411c <ext_flash_write_multipage+0x104>
		unsigned int writtenNow = PAGE_SIZE;
 8004072:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004076:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		if(bytesLeft <= PAGE_SIZE){
 800407a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800407e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004082:	d816      	bhi.n	80040b2 <ext_flash_write_multipage+0x9a>
			memcpy(pageBuff, buff + buffIndex, bytesLeft);
 8004084:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004088:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004092:	18d1      	adds	r1, r2, r3
 8004094:	f107 0310 	add.w	r3, r7, #16
 8004098:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800409c:	4618      	mov	r0, r3
 800409e:	f006 fdb7 	bl	800ac10 <memcpy>
			writtenNow = bytesLeft;
 80040a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80040a6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
			bytesLeft = 0;
 80040aa:	2300      	movs	r3, #0
 80040ac:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80040b0:	e01e      	b.n	80040f0 <ext_flash_write_multipage+0xd8>
		}
		else{
			memcpy(pageBuff, buff + buffIndex, PAGE_SIZE);
 80040b2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80040b6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80040c0:	441a      	add	r2, r3
 80040c2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80040c6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80040ca:	4618      	mov	r0, r3
 80040cc:	4611      	mov	r1, r2
 80040ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80040d2:	461a      	mov	r2, r3
 80040d4:	f006 fd9c 	bl	800ac10 <memcpy>
			bytesLeft -= PAGE_SIZE;
 80040d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80040dc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80040e0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
			buffIndex += PAGE_SIZE;
 80040e4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80040e8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80040ec:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
		}
		ext_flash_write(address + addrIncrement, pageBuff, writtenNow);
 80040f0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80040f4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040fe:	4413      	add	r3, r2
 8004100:	f107 0110 	add.w	r1, r7, #16
 8004104:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8004108:	4618      	mov	r0, r3
 800410a:	f7ff fea7 	bl	8003e5c <ext_flash_write>
		addrIncrement += writtenNow;
 800410e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004112:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004116:	4413      	add	r3, r2
 8004118:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	while(bytesLeft > 0){
 800411c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004120:	2b00      	cmp	r3, #0
 8004122:	d1a6      	bne.n	8004072 <ext_flash_write_multipage+0x5a>
	}

}
 8004124:	bf00      	nop
 8004126:	bf00      	nop
 8004128:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}
 8004130:	0800ce2c 	.word	0x0800ce2c

08004134 <handleIncomingProcessorMsg>:
 * \r is carriage return (Ascii 13)
 *
 * Example: To make interactivelabel id 15 show the text "Outer Wilds", you should send:
 * s15 Outer Wilds\r
 */
int handleIncomingProcessorMsg(int screenObjectCount, struct object *objectArray, uint8_t **pointerArray){
 8004134:	b590      	push	{r4, r7, lr}
 8004136:	b0d5      	sub	sp, #340	; 0x154
 8004138:	af02      	add	r7, sp, #8
 800413a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800413e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004142:	6018      	str	r0, [r3, #0]
 8004144:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8004148:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800414c:	6019      	str	r1, [r3, #0]
 800414e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8004152:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004156:	601a      	str	r2, [r3, #0]

	char msg[128];
	char reply[128];

	int count = read_usart_message(msg, &huart2, sizeof(msg), NEWLINE);
 8004158:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 800415c:	230d      	movs	r3, #13
 800415e:	2280      	movs	r2, #128	; 0x80
 8004160:	49a7      	ldr	r1, [pc, #668]	; (8004400 <handleIncomingProcessorMsg+0x2cc>)
 8004162:	f002 fb4b 	bl	80067fc <read_usart_message>
 8004166:	4603      	mov	r3, r0
 8004168:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
	msg[count] = 0;
 800416c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8004170:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004174:	4413      	add	r3, r2
 8004176:	2200      	movs	r2, #0
 8004178:	701a      	strb	r2, [r3, #0]
	if(count == 0){
		printf("[epc] No data on uart.\n\r");
		return 1;
	}*/

	char commandChar = msg[0];
 800417a:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 800417e:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
	if(commandChar != 's'){
 8004182:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8004186:	2b73      	cmp	r3, #115	; 0x73
 8004188:	d017      	beq.n	80041ba <handleIncomingProcessorMsg+0x86>
		printf("[epc] Unexpected command char. Only 's' is currently supported.\n\r");
 800418a:	489e      	ldr	r0, [pc, #632]	; (8004404 <handleIncomingProcessorMsg+0x2d0>)
 800418c:	f006 fd56 	bl	800ac3c <iprintf>
#ifdef DEBUG_EXTERNAL_UART
		sprintf(reply,"[epc] Unexpected command char. Only 's' is currently supported.\n\r");
 8004190:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004194:	499b      	ldr	r1, [pc, #620]	; (8004404 <handleIncomingProcessorMsg+0x2d0>)
 8004196:	4618      	mov	r0, r3
 8004198:	f006 fd68 	bl	800ac6c <siprintf>
		send_usart_message(reply, &huart2, strlen(reply));
 800419c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80041a0:	4618      	mov	r0, r3
 80041a2:	f7fc f81f 	bl	80001e4 <strlen>
 80041a6:	4603      	mov	r3, r0
 80041a8:	461a      	mov	r2, r3
 80041aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80041ae:	4994      	ldr	r1, [pc, #592]	; (8004400 <handleIncomingProcessorMsg+0x2cc>)
 80041b0:	4618      	mov	r0, r3
 80041b2:	f002 fb55 	bl	8006860 <send_usart_message>
#endif
		return 100;
 80041b6:	2364      	movs	r3, #100	; 0x64
 80041b8:	e11d      	b.n	80043f6 <handleIncomingProcessorMsg+0x2c2>
	}

	char numStr[10];
	int spaceIndex = 1;
 80041ba:	2301      	movs	r3, #1
 80041bc:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144

	//find space marking end of ID number
	while(spaceIndex < count){
 80041c0:	e00b      	b.n	80041da <handleIncomingProcessorMsg+0xa6>
		if(msg[spaceIndex++] == ' '){
 80041c2:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80041c6:	1c5a      	adds	r2, r3, #1
 80041c8:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
 80041cc:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80041d0:	443b      	add	r3, r7
 80041d2:	f813 3c9c 	ldrb.w	r3, [r3, #-156]
 80041d6:	2b20      	cmp	r3, #32
 80041d8:	d006      	beq.n	80041e8 <handleIncomingProcessorMsg+0xb4>
	while(spaceIndex < count){
 80041da:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80041de:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80041e2:	429a      	cmp	r2, r3
 80041e4:	dbed      	blt.n	80041c2 <handleIncomingProcessorMsg+0x8e>
 80041e6:	e000      	b.n	80041ea <handleIncomingProcessorMsg+0xb6>
			break;
 80041e8:	bf00      	nop
		}
	}

	if(spaceIndex == count){
 80041ea:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80041ee:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d11a      	bne.n	800422c <handleIncomingProcessorMsg+0xf8>
		printf("[epc] Space not found in message. (%s)\n\r", msg);
 80041f6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80041fa:	4619      	mov	r1, r3
 80041fc:	4882      	ldr	r0, [pc, #520]	; (8004408 <handleIncomingProcessorMsg+0x2d4>)
 80041fe:	f006 fd1d 	bl	800ac3c <iprintf>
#ifdef DEBUG_EXTERNAL_UART
		sprintf(reply,"[epc] Space not found in message.\n\r");
 8004202:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004206:	4981      	ldr	r1, [pc, #516]	; (800440c <handleIncomingProcessorMsg+0x2d8>)
 8004208:	4618      	mov	r0, r3
 800420a:	f006 fd2f 	bl	800ac6c <siprintf>
		send_usart_message(reply, &huart2, strlen(reply));
 800420e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004212:	4618      	mov	r0, r3
 8004214:	f7fb ffe6 	bl	80001e4 <strlen>
 8004218:	4603      	mov	r3, r0
 800421a:	461a      	mov	r2, r3
 800421c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004220:	4977      	ldr	r1, [pc, #476]	; (8004400 <handleIncomingProcessorMsg+0x2cc>)
 8004222:	4618      	mov	r0, r3
 8004224:	f002 fb1c 	bl	8006860 <send_usart_message>
#endif
		return 100;
 8004228:	2364      	movs	r3, #100	; 0x64
 800422a:	e0e4      	b.n	80043f6 <handleIncomingProcessorMsg+0x2c2>
	}

	//copy number to new string and convert to int
	memcpy(numStr, msg+1, spaceIndex-1);
 800422c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004230:	3301      	adds	r3, #1
 8004232:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004236:	3a01      	subs	r2, #1
 8004238:	f107 0020 	add.w	r0, r7, #32
 800423c:	4619      	mov	r1, r3
 800423e:	f006 fce7 	bl	800ac10 <memcpy>
	numStr[spaceIndex] = 0;
 8004242:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8004246:	f5a3 7294 	sub.w	r2, r3, #296	; 0x128
 800424a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800424e:	4413      	add	r3, r2
 8004250:	2200      	movs	r2, #0
 8004252:	701a      	strb	r2, [r3, #0]
	int soughtId = atoi(numStr);
 8004254:	f107 0320 	add.w	r3, r7, #32
 8004258:	4618      	mov	r0, r3
 800425a:	f006 fcab 	bl	800abb4 <atoi>
 800425e:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c

	sprintf(reply,"[epc] scrn cnt  %d, seek %d.\n\r", screenObjectCount, soughtId);
 8004262:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8004266:	f5a3 729e 	sub.w	r2, r3, #316	; 0x13c
 800426a:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800426e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004272:	6812      	ldr	r2, [r2, #0]
 8004274:	4966      	ldr	r1, [pc, #408]	; (8004410 <handleIncomingProcessorMsg+0x2dc>)
 8004276:	f006 fcf9 	bl	800ac6c <siprintf>
	send_usart_message(reply, &huart2, strlen(reply));
 800427a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800427e:	4618      	mov	r0, r3
 8004280:	f7fb ffb0 	bl	80001e4 <strlen>
 8004284:	4603      	mov	r3, r0
 8004286:	461a      	mov	r2, r3
 8004288:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800428c:	495c      	ldr	r1, [pc, #368]	; (8004400 <handleIncomingProcessorMsg+0x2cc>)
 800428e:	4618      	mov	r0, r3
 8004290:	f002 fae6 	bl	8006860 <send_usart_message>

	struct object targetObject;
	uint8_t *targetObjectDataPointer;
	int found = 0;
 8004294:	2300      	movs	r3, #0
 8004296:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

	int i = 0;
 800429a:	2300      	movs	r3, #0
 800429c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	while(1){
		targetObject = *(objectArray + i);
 80042a0:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80042a4:	4613      	mov	r3, r2
 80042a6:	00db      	lsls	r3, r3, #3
 80042a8:	1a9b      	subs	r3, r3, r2
 80042aa:	005b      	lsls	r3, r3, #1
 80042ac:	461a      	mov	r2, r3
 80042ae:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80042b2:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	441a      	add	r2, r3
 80042ba:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80042be:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80042c2:	4614      	mov	r4, r2
 80042c4:	6820      	ldr	r0, [r4, #0]
 80042c6:	6861      	ldr	r1, [r4, #4]
 80042c8:	68a2      	ldr	r2, [r4, #8]
 80042ca:	c307      	stmia	r3!, {r0, r1, r2}
 80042cc:	89a2      	ldrh	r2, [r4, #12]
 80042ce:	801a      	strh	r2, [r3, #0]
		sprintf(reply,"[epc] [%d] check id: %d, type: %d.\n\r", i, targetObject.objectId, (int) targetObject.objectType);
 80042d0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80042d4:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80042d8:	885b      	ldrh	r3, [r3, #2]
 80042da:	461a      	mov	r2, r3
 80042dc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80042e0:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80042ea:	9300      	str	r3, [sp, #0]
 80042ec:	4613      	mov	r3, r2
 80042ee:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80042f2:	4948      	ldr	r1, [pc, #288]	; (8004414 <handleIncomingProcessorMsg+0x2e0>)
 80042f4:	f006 fcba 	bl	800ac6c <siprintf>
		while(send_usart_message(reply, &huart2, strlen(reply)) == 0){
 80042f8:	bf00      	nop
 80042fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80042fe:	4618      	mov	r0, r3
 8004300:	f7fb ff70 	bl	80001e4 <strlen>
 8004304:	4603      	mov	r3, r0
 8004306:	461a      	mov	r2, r3
 8004308:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800430c:	493c      	ldr	r1, [pc, #240]	; (8004400 <handleIncomingProcessorMsg+0x2cc>)
 800430e:	4618      	mov	r0, r3
 8004310:	f002 faa6 	bl	8006860 <send_usart_message>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d0ef      	beq.n	80042fa <handleIncomingProcessorMsg+0x1c6>
			;
		}
		if(targetObject.objectId == soughtId){
 800431a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800431e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004322:	885b      	ldrh	r3, [r3, #2]
 8004324:	461a      	mov	r2, r3
 8004326:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800432a:	4293      	cmp	r3, r2
 800432c:	d10f      	bne.n	800434e <handleIncomingProcessorMsg+0x21a>
			targetObjectDataPointer = *(pointerArray + i);
 800432e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8004338:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
 800433c:	6812      	ldr	r2, [r2, #0]
 800433e:	4413      	add	r3, r2
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
			found = 1;
 8004346:	2301      	movs	r3, #1
 8004348:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
			break;
 800434c:	e00f      	b.n	800436e <handleIncomingProcessorMsg+0x23a>
		}
		i++;
 800434e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004352:	3301      	adds	r3, #1
 8004354:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
		if(i==screenObjectCount){
 8004358:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800435c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004360:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	429a      	cmp	r2, r3
 8004368:	d000      	beq.n	800436c <handleIncomingProcessorMsg+0x238>
		targetObject = *(objectArray + i);
 800436a:	e799      	b.n	80042a0 <handleIncomingProcessorMsg+0x16c>
			break;
 800436c:	bf00      	nop
		}
	}

	if(!found){
 800436e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004372:	2b00      	cmp	r3, #0
 8004374:	d11b      	bne.n	80043ae <handleIncomingProcessorMsg+0x27a>
		printf("[epc] Object id %d not on this page.\n\r",soughtId);
 8004376:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 800437a:	4827      	ldr	r0, [pc, #156]	; (8004418 <handleIncomingProcessorMsg+0x2e4>)
 800437c:	f006 fc5e 	bl	800ac3c <iprintf>
#ifdef DEBUG_EXTERNAL_UART
		sprintf(reply,"[epc] Object id %d not on this page.\n\r",soughtId);
 8004380:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004384:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8004388:	4923      	ldr	r1, [pc, #140]	; (8004418 <handleIncomingProcessorMsg+0x2e4>)
 800438a:	4618      	mov	r0, r3
 800438c:	f006 fc6e 	bl	800ac6c <siprintf>
		send_usart_message(reply, &huart2, strlen(reply));
 8004390:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004394:	4618      	mov	r0, r3
 8004396:	f7fb ff25 	bl	80001e4 <strlen>
 800439a:	4603      	mov	r3, r0
 800439c:	461a      	mov	r2, r3
 800439e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80043a2:	4917      	ldr	r1, [pc, #92]	; (8004400 <handleIncomingProcessorMsg+0x2cc>)
 80043a4:	4618      	mov	r0, r3
 80043a6:	f002 fa5b 	bl	8006860 <send_usart_message>
#endif
		return 200;
 80043aa:	23c8      	movs	r3, #200	; 0xc8
 80043ac:	e023      	b.n	80043f6 <handleIncomingProcessorMsg+0x2c2>
	}
	else{
		sprintf(reply,"[epc] Object found\n\r");
 80043ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80043b2:	491a      	ldr	r1, [pc, #104]	; (800441c <handleIncomingProcessorMsg+0x2e8>)
 80043b4:	4618      	mov	r0, r3
 80043b6:	f006 fc59 	bl	800ac6c <siprintf>
		send_usart_message(reply, &huart2, strlen(reply));
 80043ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80043be:	4618      	mov	r0, r3
 80043c0:	f7fb ff10 	bl	80001e4 <strlen>
 80043c4:	4603      	mov	r3, r0
 80043c6:	461a      	mov	r2, r3
 80043c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80043cc:	490c      	ldr	r1, [pc, #48]	; (8004400 <handleIncomingProcessorMsg+0x2cc>)
 80043ce:	4618      	mov	r0, r3
 80043d0:	f002 fa46 	bl	8006860 <send_usart_message>
	}

	drawInteractiveLabelToLcd(targetObject, targetObjectDataPointer, (msg + spaceIndex));
 80043d4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80043d8:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80043dc:	441a      	add	r2, r3
 80043de:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80043e2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80043e6:	9201      	str	r2, [sp, #4]
 80043e8:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 80043ec:	9200      	str	r2, [sp, #0]
 80043ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80043f0:	f001 fa02 	bl	80057f8 <drawInteractiveLabelToLcd>

	return 0;
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	f507 77a6 	add.w	r7, r7, #332	; 0x14c
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd90      	pop	{r4, r7, pc}
 8004400:	200040f4 	.word	0x200040f4
 8004404:	0800ce48 	.word	0x0800ce48
 8004408:	0800ce8c 	.word	0x0800ce8c
 800440c:	0800ceb8 	.word	0x0800ceb8
 8004410:	0800cedc 	.word	0x0800cedc
 8004414:	0800cefc 	.word	0x0800cefc
 8004418:	0800cf24 	.word	0x0800cf24
 800441c:	0800cf4c 	.word	0x0800cf4c

08004420 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004424:	b0b5      	sub	sp, #212	; 0xd4
 8004426:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004428:	f002 fa9c 	bl	8006964 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800442c:	f000 fa24 	bl	8004878 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004430:	f000 fbe6 	bl	8004c00 <MX_GPIO_Init>
  MX_FSMC_Init();
 8004434:	f000 fc8a 	bl	8004d4c <MX_FSMC_Init>
  MX_USART1_UART_Init();
 8004438:	f000 fb7e 	bl	8004b38 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 800443c:	f000 fa86 	bl	800494c <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8004440:	f000 fbac 	bl	8004b9c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8004444:	f000 fab8 	bl	80049b8 <MX_SPI1_Init>
  MX_TIM1_Init();
 8004448:	f000 faf4 	bl	8004a34 <MX_TIM1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  	  printf("Entering main loop\n\r");
 800444c:	48a8      	ldr	r0, [pc, #672]	; (80046f0 <main+0x2d0>)
 800444e:	f006 fbf5 	bl	800ac3c <iprintf>



	char str[] = "You fight \nlike a dairy\nfarmer!";
 8004452:	4ba8      	ldr	r3, [pc, #672]	; (80046f4 <main+0x2d4>)
 8004454:	f107 053c 	add.w	r5, r7, #60	; 0x3c
 8004458:	461c      	mov	r4, r3
 800445a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800445c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800445e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004462:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	drawStringToLcd5x7(250, 100, 3, 0xAA, 0, 0xFF, 3, 5, str);
 8004466:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800446a:	9304      	str	r3, [sp, #16]
 800446c:	2305      	movs	r3, #5
 800446e:	9303      	str	r3, [sp, #12]
 8004470:	2303      	movs	r3, #3
 8004472:	9302      	str	r3, [sp, #8]
 8004474:	23ff      	movs	r3, #255	; 0xff
 8004476:	9301      	str	r3, [sp, #4]
 8004478:	2300      	movs	r3, #0
 800447a:	9300      	str	r3, [sp, #0]
 800447c:	23aa      	movs	r3, #170	; 0xaa
 800447e:	2203      	movs	r2, #3
 8004480:	2164      	movs	r1, #100	; 0x64
 8004482:	20fa      	movs	r0, #250	; 0xfa
 8004484:	f001 fb76 	bl	8005b74 <drawStringToLcd5x7>

	//arrays for holding object data loaded from flash

	uint16_t maxObjects = 128;
 8004488:	2380      	movs	r3, #128	; 0x80
 800448a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	uint16_t maxData = SECTOR_SIZE*4;
 800448e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004492:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
	struct screen screenHeader;
	struct object objArr[maxObjects];
 8004496:	f8b7 4076 	ldrh.w	r4, [r7, #118]	; 0x76
 800449a:	4623      	mov	r3, r4
 800449c:	3b01      	subs	r3, #1
 800449e:	673b      	str	r3, [r7, #112]	; 0x70
 80044a0:	b2a3      	uxth	r3, r4
 80044a2:	2200      	movs	r2, #0
 80044a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80044a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044a8:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 80044ac:	462a      	mov	r2, r5
 80044ae:	4633      	mov	r3, r6
 80044b0:	f04f 0000 	mov.w	r0, #0
 80044b4:	f04f 0100 	mov.w	r1, #0
 80044b8:	00d9      	lsls	r1, r3, #3
 80044ba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80044be:	00d0      	lsls	r0, r2, #3
 80044c0:	4602      	mov	r2, r0
 80044c2:	460b      	mov	r3, r1
 80044c4:	4629      	mov	r1, r5
 80044c6:	ebb2 0801 	subs.w	r8, r2, r1
 80044ca:	4631      	mov	r1, r6
 80044cc:	eb63 0901 	sbc.w	r9, r3, r1
 80044d0:	f04f 0200 	mov.w	r2, #0
 80044d4:	f04f 0300 	mov.w	r3, #0
 80044d8:	ea4f 1309 	mov.w	r3, r9, lsl #4
 80044dc:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 80044e0:	ea4f 1208 	mov.w	r2, r8, lsl #4
 80044e4:	b2a3      	uxth	r3, r4
 80044e6:	2200      	movs	r2, #0
 80044e8:	623b      	str	r3, [r7, #32]
 80044ea:	627a      	str	r2, [r7, #36]	; 0x24
 80044ec:	e9d7 5608 	ldrd	r5, r6, [r7, #32]
 80044f0:	462a      	mov	r2, r5
 80044f2:	4633      	mov	r3, r6
 80044f4:	f04f 0000 	mov.w	r0, #0
 80044f8:	f04f 0100 	mov.w	r1, #0
 80044fc:	00d9      	lsls	r1, r3, #3
 80044fe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004502:	00d0      	lsls	r0, r2, #3
 8004504:	4602      	mov	r2, r0
 8004506:	460b      	mov	r3, r1
 8004508:	4629      	mov	r1, r5
 800450a:	ebb2 0a01 	subs.w	sl, r2, r1
 800450e:	4631      	mov	r1, r6
 8004510:	eb63 0b01 	sbc.w	fp, r3, r1
 8004514:	f04f 0200 	mov.w	r2, #0
 8004518:	f04f 0300 	mov.w	r3, #0
 800451c:	ea4f 130b 	mov.w	r3, fp, lsl #4
 8004520:	ea43 731a 	orr.w	r3, r3, sl, lsr #28
 8004524:	ea4f 120a 	mov.w	r2, sl, lsl #4
 8004528:	4622      	mov	r2, r4
 800452a:	4613      	mov	r3, r2
 800452c:	00db      	lsls	r3, r3, #3
 800452e:	1a9b      	subs	r3, r3, r2
 8004530:	005b      	lsls	r3, r3, #1
 8004532:	3307      	adds	r3, #7
 8004534:	08db      	lsrs	r3, r3, #3
 8004536:	00db      	lsls	r3, r3, #3
 8004538:	ebad 0d03 	sub.w	sp, sp, r3
 800453c:	ab12      	add	r3, sp, #72	; 0x48
 800453e:	3301      	adds	r3, #1
 8004540:	085b      	lsrs	r3, r3, #1
 8004542:	005b      	lsls	r3, r3, #1
 8004544:	66fb      	str	r3, [r7, #108]	; 0x6c
	uint8_t dataArr[maxData];
 8004546:	f8b7 1074 	ldrh.w	r1, [r7, #116]	; 0x74
 800454a:	460b      	mov	r3, r1
 800454c:	3b01      	subs	r3, #1
 800454e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004550:	b28b      	uxth	r3, r1
 8004552:	2200      	movs	r2, #0
 8004554:	61bb      	str	r3, [r7, #24]
 8004556:	61fa      	str	r2, [r7, #28]
 8004558:	f04f 0200 	mov.w	r2, #0
 800455c:	f04f 0300 	mov.w	r3, #0
 8004560:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8004564:	4628      	mov	r0, r5
 8004566:	00c3      	lsls	r3, r0, #3
 8004568:	4620      	mov	r0, r4
 800456a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800456e:	4620      	mov	r0, r4
 8004570:	00c2      	lsls	r2, r0, #3
 8004572:	b28b      	uxth	r3, r1
 8004574:	2200      	movs	r2, #0
 8004576:	613b      	str	r3, [r7, #16]
 8004578:	617a      	str	r2, [r7, #20]
 800457a:	f04f 0200 	mov.w	r2, #0
 800457e:	f04f 0300 	mov.w	r3, #0
 8004582:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004586:	4628      	mov	r0, r5
 8004588:	00c3      	lsls	r3, r0, #3
 800458a:	4620      	mov	r0, r4
 800458c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8004590:	4620      	mov	r0, r4
 8004592:	00c2      	lsls	r2, r0, #3
 8004594:	460b      	mov	r3, r1
 8004596:	3307      	adds	r3, #7
 8004598:	08db      	lsrs	r3, r3, #3
 800459a:	00db      	lsls	r3, r3, #3
 800459c:	ebad 0d03 	sub.w	sp, sp, r3
 80045a0:	ab12      	add	r3, sp, #72	; 0x48
 80045a2:	3300      	adds	r3, #0
 80045a4:	667b      	str	r3, [r7, #100]	; 0x64
	uint8_t *pointerArr[maxObjects];
 80045a6:	f8b7 1076 	ldrh.w	r1, [r7, #118]	; 0x76
 80045aa:	460b      	mov	r3, r1
 80045ac:	3b01      	subs	r3, #1
 80045ae:	663b      	str	r3, [r7, #96]	; 0x60
 80045b0:	b28b      	uxth	r3, r1
 80045b2:	2200      	movs	r2, #0
 80045b4:	60bb      	str	r3, [r7, #8]
 80045b6:	60fa      	str	r2, [r7, #12]
 80045b8:	f04f 0200 	mov.w	r2, #0
 80045bc:	f04f 0300 	mov.w	r3, #0
 80045c0:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80045c4:	4628      	mov	r0, r5
 80045c6:	0143      	lsls	r3, r0, #5
 80045c8:	4620      	mov	r0, r4
 80045ca:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80045ce:	4620      	mov	r0, r4
 80045d0:	0142      	lsls	r2, r0, #5
 80045d2:	b28b      	uxth	r3, r1
 80045d4:	2200      	movs	r2, #0
 80045d6:	603b      	str	r3, [r7, #0]
 80045d8:	607a      	str	r2, [r7, #4]
 80045da:	f04f 0200 	mov.w	r2, #0
 80045de:	f04f 0300 	mov.w	r3, #0
 80045e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80045e6:	4628      	mov	r0, r5
 80045e8:	0143      	lsls	r3, r0, #5
 80045ea:	4620      	mov	r0, r4
 80045ec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80045f0:	4620      	mov	r0, r4
 80045f2:	0142      	lsls	r2, r0, #5
 80045f4:	460b      	mov	r3, r1
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	3307      	adds	r3, #7
 80045fa:	08db      	lsrs	r3, r3, #3
 80045fc:	00db      	lsls	r3, r3, #3
 80045fe:	ebad 0d03 	sub.w	sp, sp, r3
 8004602:	ab12      	add	r3, sp, #72	; 0x48
 8004604:	3303      	adds	r3, #3
 8004606:	089b      	lsrs	r3, r3, #2
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	65fb      	str	r3, [r7, #92]	; 0x5c
	struct bitmap btimap_header;
	int objectsRead = 0;
 800460c:	2300      	movs	r3, #0
 800460e:	67bb      	str	r3, [r7, #120]	; 0x78
	int loopNumber = 0;
 8004610:	2300      	movs	r3, #0
 8004612:	67fb      	str	r3, [r7, #124]	; 0x7c


	Init_LCD();
 8004614:	f7fc facc 	bl	8000bb0 <Init_LCD>
	touch_reset();
 8004618:	f7fc fffc 	bl	8001614 <touch_reset>
	touch_init(hi2c1);
 800461c:	4c36      	ldr	r4, [pc, #216]	; (80046f8 <main+0x2d8>)
 800461e:	4668      	mov	r0, sp
 8004620:	f104 0310 	add.w	r3, r4, #16
 8004624:	2244      	movs	r2, #68	; 0x44
 8004626:	4619      	mov	r1, r3
 8004628:	f006 faf2 	bl	800ac10 <memcpy>
 800462c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004630:	f7fc fef6 	bl	8001420 <touch_init>
	while (1)
	{

		loopNumber++;
 8004634:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004636:	3301      	adds	r3, #1
 8004638:	67fb      	str	r3, [r7, #124]	; 0x7c
		int configResult = 1; //1 = no data on uart
 800463a:	2301      	movs	r3, #1
 800463c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		if(loopNumber % 6000000 == 0)
 8004640:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004642:	4b2e      	ldr	r3, [pc, #184]	; (80046fc <main+0x2dc>)
 8004644:	fb83 1302 	smull	r1, r3, r3, r2
 8004648:	14d9      	asrs	r1, r3, #19
 800464a:	17d3      	asrs	r3, r2, #31
 800464c:	1acb      	subs	r3, r1, r3
 800464e:	492c      	ldr	r1, [pc, #176]	; (8004700 <main+0x2e0>)
 8004650:	fb01 f303 	mul.w	r3, r1, r3
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	2b00      	cmp	r3, #0
 8004658:	d103      	bne.n	8004662 <main+0x242>
		{
			 configResult = configFromUart(); //check if there's incoming data on config uart, if yes, attempt to read configuration
 800465a:	f7fd fd49 	bl	80020f0 <configFromUart>
 800465e:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		}



		//redraw display
		if(notYetDrawnFlag || configResult != 1)
 8004662:	4b28      	ldr	r3, [pc, #160]	; (8004704 <main+0x2e4>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d104      	bne.n	8004674 <main+0x254>
 800466a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800466e:	2b01      	cmp	r3, #1
 8004670:	f000 80e6 	beq.w	8004840 <main+0x420>
		{
			notYetDrawnFlag = 0;
 8004674:	4b23      	ldr	r3, [pc, #140]	; (8004704 <main+0x2e4>)
 8004676:	2200      	movs	r2, #0
 8004678:	601a      	str	r2, [r3, #0]
			readGeneralConfig(&gConf);
 800467a:	4823      	ldr	r0, [pc, #140]	; (8004708 <main+0x2e8>)
 800467c:	f7fe ffc2 	bl	8003604 <readGeneralConfig>
		    Init_LCD();
 8004680:	f7fc fa96 	bl	8000bb0 <Init_LCD>
		    touch_reset();
 8004684:	f7fc ffc6 	bl	8001614 <touch_reset>
		    touch_init(hi2c1);
 8004688:	4c1b      	ldr	r4, [pc, #108]	; (80046f8 <main+0x2d8>)
 800468a:	4668      	mov	r0, sp
 800468c:	f104 0310 	add.w	r3, r4, #16
 8004690:	2244      	movs	r2, #68	; 0x44
 8004692:	4619      	mov	r1, r3
 8004694:	f006 fabc 	bl	800ac10 <memcpy>
 8004698:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800469c:	f7fc fec0 	bl	8001420 <touch_init>
			printf("Something changed. Redrawing display and updating bitmap list.\n\r");
 80046a0:	481a      	ldr	r0, [pc, #104]	; (800470c <main+0x2ec>)
 80046a2:	f006 facb 	bl	800ac3c <iprintf>
			readBitmapList(&globalBitmapList);
 80046a6:	481a      	ldr	r0, [pc, #104]	; (8004710 <main+0x2f0>)
 80046a8:	f7fe ffd0 	bl	800364c <readBitmapList>
			//printAllScreens(gConf);
			objectsRead = 0;
 80046ac:	2300      	movs	r3, #0
 80046ae:	67bb      	str	r3, [r7, #120]	; 0x78
			if(currentScreen < gConf.totalScreens)
 80046b0:	4b15      	ldr	r3, [pc, #84]	; (8004708 <main+0x2e8>)
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	461a      	mov	r2, r3
 80046b6:	4b17      	ldr	r3, [pc, #92]	; (8004714 <main+0x2f4>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	dd14      	ble.n	80046e8 <main+0x2c8>
			{
				objectsRead = openScreen(gConf.screenSectors[currentScreen], &screenHeader, objArr, dataArr, pointerArr, maxData, maxObjects);
 80046be:	4b15      	ldr	r3, [pc, #84]	; (8004714 <main+0x2f4>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a11      	ldr	r2, [pc, #68]	; (8004708 <main+0x2e8>)
 80046c4:	005b      	lsls	r3, r3, #1
 80046c6:	4413      	add	r3, r2
 80046c8:	8858      	ldrh	r0, [r3, #2]
 80046ca:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80046ce:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80046d2:	9302      	str	r3, [sp, #8]
 80046d4:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80046d8:	9301      	str	r3, [sp, #4]
 80046da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046dc:	9300      	str	r3, [sp, #0]
 80046de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046e0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80046e2:	f7fe ffd9 	bl	8003698 <openScreen>
 80046e6:	67b8      	str	r0, [r7, #120]	; 0x78
			}
			int i;
			for(i = 0; i<objectsRead; i++)
 80046e8:	2300      	movs	r3, #0
 80046ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80046ee:	e0a1      	b.n	8004834 <main+0x414>
 80046f0:	0800cf64 	.word	0x0800cf64
 80046f4:	0800cfc0 	.word	0x0800cfc0
 80046f8:	20003fbc 	.word	0x20003fbc
 80046fc:	165e9f81 	.word	0x165e9f81
 8004700:	005b8d80 	.word	0x005b8d80
 8004704:	2000001c 	.word	0x2000001c
 8004708:	20004990 	.word	0x20004990
 800470c:	0800cf7c 	.word	0x0800cf7c
 8004710:	20004188 	.word	0x20004188
 8004714:	2000498c 	.word	0x2000498c
			{
				drawObjectToLcd(objArr[i], pointerArr[i], 0);
 8004718:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800471a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800471e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004722:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004724:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004728:	4613      	mov	r3, r2
 800472a:	00db      	lsls	r3, r3, #3
 800472c:	1a9b      	subs	r3, r3, r2
 800472e:	005b      	lsls	r3, r3, #1
 8004730:	4403      	add	r3, r0
 8004732:	2200      	movs	r2, #0
 8004734:	9201      	str	r2, [sp, #4]
 8004736:	9100      	str	r1, [sp, #0]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	4610      	mov	r0, r2
 800473c:	685a      	ldr	r2, [r3, #4]
 800473e:	4611      	mov	r1, r2
 8004740:	689a      	ldr	r2, [r3, #8]
 8004742:	4614      	mov	r4, r2
 8004744:	899a      	ldrh	r2, [r3, #12]
 8004746:	2300      	movs	r3, #0
 8004748:	f362 030f 	bfi	r3, r2, #0, #16
 800474c:	4622      	mov	r2, r4
 800474e:	f000 fb7d 	bl	8004e4c <drawObjectToLcd>
				touch_register_element(currentScreen,0,objArr[i],objArr[i].xstart,objArr[i].ystart,objArr[i].xend,objArr[i].yend,objArr[i].objectType,pointerArr[i], objArr[i].objectId);
 8004752:	4b46      	ldr	r3, [pc, #280]	; (800486c <main+0x44c>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	fa5f fc83 	uxtb.w	ip, r3
 800475a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800475c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004760:	4613      	mov	r3, r2
 8004762:	00db      	lsls	r3, r3, #3
 8004764:	1a9b      	subs	r3, r3, r2
 8004766:	005b      	lsls	r3, r3, #1
 8004768:	440b      	add	r3, r1
 800476a:	3304      	adds	r3, #4
 800476c:	8819      	ldrh	r1, [r3, #0]
 800476e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004770:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004774:	4613      	mov	r3, r2
 8004776:	00db      	lsls	r3, r3, #3
 8004778:	1a9b      	subs	r3, r3, r2
 800477a:	005b      	lsls	r3, r3, #1
 800477c:	4403      	add	r3, r0
 800477e:	3306      	adds	r3, #6
 8004780:	8818      	ldrh	r0, [r3, #0]
 8004782:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8004784:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004788:	4613      	mov	r3, r2
 800478a:	00db      	lsls	r3, r3, #3
 800478c:	1a9b      	subs	r3, r3, r2
 800478e:	005b      	lsls	r3, r3, #1
 8004790:	4423      	add	r3, r4
 8004792:	3308      	adds	r3, #8
 8004794:	881c      	ldrh	r4, [r3, #0]
 8004796:	6efd      	ldr	r5, [r7, #108]	; 0x6c
 8004798:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800479c:	4613      	mov	r3, r2
 800479e:	00db      	lsls	r3, r3, #3
 80047a0:	1a9b      	subs	r3, r3, r2
 80047a2:	005b      	lsls	r3, r3, #1
 80047a4:	442b      	add	r3, r5
 80047a6:	330a      	adds	r3, #10
 80047a8:	881d      	ldrh	r5, [r3, #0]
 80047aa:	6efe      	ldr	r6, [r7, #108]	; 0x6c
 80047ac:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80047b0:	4613      	mov	r3, r2
 80047b2:	00db      	lsls	r3, r3, #3
 80047b4:	1a9b      	subs	r3, r3, r2
 80047b6:	005b      	lsls	r3, r3, #1
 80047b8:	4433      	add	r3, r6
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	b29e      	uxth	r6, r3
 80047be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047c0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80047c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80047ca:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80047cc:	623a      	str	r2, [r7, #32]
 80047ce:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80047d2:	4613      	mov	r3, r2
 80047d4:	00db      	lsls	r3, r3, #3
 80047d6:	1a9b      	subs	r3, r3, r2
 80047d8:	005b      	lsls	r3, r3, #1
 80047da:	6a3a      	ldr	r2, [r7, #32]
 80047dc:	4413      	add	r3, r2
 80047de:	3302      	adds	r3, #2
 80047e0:	881a      	ldrh	r2, [r3, #0]
 80047e2:	623a      	str	r2, [r7, #32]
 80047e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047e6:	61bb      	str	r3, [r7, #24]
 80047e8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80047ec:	4613      	mov	r3, r2
 80047ee:	00db      	lsls	r3, r3, #3
 80047f0:	1a9b      	subs	r3, r3, r2
 80047f2:	005b      	lsls	r3, r3, #1
 80047f4:	69ba      	ldr	r2, [r7, #24]
 80047f6:	4413      	add	r3, r2
 80047f8:	6a3a      	ldr	r2, [r7, #32]
 80047fa:	9208      	str	r2, [sp, #32]
 80047fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047fe:	9207      	str	r2, [sp, #28]
 8004800:	9606      	str	r6, [sp, #24]
 8004802:	9505      	str	r5, [sp, #20]
 8004804:	9404      	str	r4, [sp, #16]
 8004806:	9003      	str	r0, [sp, #12]
 8004808:	9102      	str	r1, [sp, #8]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	4614      	mov	r4, r2
 800480e:	685a      	ldr	r2, [r3, #4]
 8004810:	4611      	mov	r1, r2
 8004812:	466a      	mov	r2, sp
 8004814:	3308      	adds	r3, #8
 8004816:	6818      	ldr	r0, [r3, #0]
 8004818:	6010      	str	r0, [r2, #0]
 800481a:	889b      	ldrh	r3, [r3, #4]
 800481c:	8093      	strh	r3, [r2, #4]
 800481e:	4622      	mov	r2, r4
 8004820:	460b      	mov	r3, r1
 8004822:	2100      	movs	r1, #0
 8004824:	4660      	mov	r0, ip
 8004826:	f7fd f9c1 	bl	8001bac <touch_register_element>
			for(i = 0; i<objectsRead; i++)
 800482a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800482e:	3301      	adds	r3, #1
 8004830:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004834:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004838:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800483a:	429a      	cmp	r2, r3
 800483c:	f6ff af6c 	blt.w	8004718 <main+0x2f8>
		//			drawObjectToLcd(o, pointerArr[i], buttonsState); // for slider button state will be interpreted as a value of slider pointer
		//		}
		//}


		if(loopNumber % 3000000 == 0){
 8004840:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004842:	4b0b      	ldr	r3, [pc, #44]	; (8004870 <main+0x450>)
 8004844:	fb83 1302 	smull	r1, r3, r3, r2
 8004848:	1499      	asrs	r1, r3, #18
 800484a:	17d3      	asrs	r3, r2, #31
 800484c:	1acb      	subs	r3, r1, r3
 800484e:	4909      	ldr	r1, [pc, #36]	; (8004874 <main+0x454>)
 8004850:	fb01 f303 	mul.w	r3, r1, r3
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	2b00      	cmp	r3, #0
 8004858:	d105      	bne.n	8004866 <main+0x446>
			 handleIncomingProcessorMsg(screenHeader.objectCount , objArr, pointerArr);
 800485a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800485c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800485e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8004860:	4618      	mov	r0, r3
 8004862:	f7ff fc67 	bl	8004134 <handleIncomingProcessorMsg>
		}

		touch_periodic_process();
 8004866:	f7fc feeb 	bl	8001640 <touch_periodic_process>
	{
 800486a:	e6e3      	b.n	8004634 <main+0x214>
 800486c:	2000498c 	.word	0x2000498c
 8004870:	165e9f81 	.word	0x165e9f81
 8004874:	002dc6c0 	.word	0x002dc6c0

08004878 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b094      	sub	sp, #80	; 0x50
 800487c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800487e:	f107 0320 	add.w	r3, r7, #32
 8004882:	2230      	movs	r2, #48	; 0x30
 8004884:	2100      	movs	r1, #0
 8004886:	4618      	mov	r0, r3
 8004888:	f006 f9d0 	bl	800ac2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800488c:	f107 030c 	add.w	r3, r7, #12
 8004890:	2200      	movs	r2, #0
 8004892:	601a      	str	r2, [r3, #0]
 8004894:	605a      	str	r2, [r3, #4]
 8004896:	609a      	str	r2, [r3, #8]
 8004898:	60da      	str	r2, [r3, #12]
 800489a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800489c:	2300      	movs	r3, #0
 800489e:	60bb      	str	r3, [r7, #8]
 80048a0:	4b28      	ldr	r3, [pc, #160]	; (8004944 <SystemClock_Config+0xcc>)
 80048a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a4:	4a27      	ldr	r2, [pc, #156]	; (8004944 <SystemClock_Config+0xcc>)
 80048a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048aa:	6413      	str	r3, [r2, #64]	; 0x40
 80048ac:	4b25      	ldr	r3, [pc, #148]	; (8004944 <SystemClock_Config+0xcc>)
 80048ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048b4:	60bb      	str	r3, [r7, #8]
 80048b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80048b8:	2300      	movs	r3, #0
 80048ba:	607b      	str	r3, [r7, #4]
 80048bc:	4b22      	ldr	r3, [pc, #136]	; (8004948 <SystemClock_Config+0xd0>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a21      	ldr	r2, [pc, #132]	; (8004948 <SystemClock_Config+0xd0>)
 80048c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80048c6:	6013      	str	r3, [r2, #0]
 80048c8:	4b1f      	ldr	r3, [pc, #124]	; (8004948 <SystemClock_Config+0xd0>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048d0:	607b      	str	r3, [r7, #4]
 80048d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80048d4:	2301      	movs	r3, #1
 80048d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80048d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80048dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80048de:	2302      	movs	r3, #2
 80048e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80048e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80048e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80048e8:	2308      	movs	r3, #8
 80048ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80048ec:	23a8      	movs	r3, #168	; 0xa8
 80048ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80048f0:	2302      	movs	r3, #2
 80048f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80048f4:	2304      	movs	r3, #4
 80048f6:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80048f8:	f107 0320 	add.w	r3, r7, #32
 80048fc:	4618      	mov	r0, r3
 80048fe:	f003 fd79 	bl	80083f4 <HAL_RCC_OscConfig>
 8004902:	4603      	mov	r3, r0
 8004904:	2b00      	cmp	r3, #0
 8004906:	d001      	beq.n	800490c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004908:	f000 fa9a 	bl	8004e40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800490c:	230f      	movs	r3, #15
 800490e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004910:	2302      	movs	r3, #2
 8004912:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004914:	2300      	movs	r3, #0
 8004916:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004918:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800491c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800491e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004922:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004924:	f107 030c 	add.w	r3, r7, #12
 8004928:	2105      	movs	r1, #5
 800492a:	4618      	mov	r0, r3
 800492c:	f003 ffda 	bl	80088e4 <HAL_RCC_ClockConfig>
 8004930:	4603      	mov	r3, r0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d001      	beq.n	800493a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8004936:	f000 fa83 	bl	8004e40 <Error_Handler>
  }
}
 800493a:	bf00      	nop
 800493c:	3750      	adds	r7, #80	; 0x50
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	40023800 	.word	0x40023800
 8004948:	40007000 	.word	0x40007000

0800494c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004950:	4b16      	ldr	r3, [pc, #88]	; (80049ac <MX_I2C1_Init+0x60>)
 8004952:	4a17      	ldr	r2, [pc, #92]	; (80049b0 <MX_I2C1_Init+0x64>)
 8004954:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8004956:	4b15      	ldr	r3, [pc, #84]	; (80049ac <MX_I2C1_Init+0x60>)
 8004958:	4a16      	ldr	r2, [pc, #88]	; (80049b4 <MX_I2C1_Init+0x68>)
 800495a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800495c:	4b13      	ldr	r3, [pc, #76]	; (80049ac <MX_I2C1_Init+0x60>)
 800495e:	2200      	movs	r2, #0
 8004960:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004962:	4b12      	ldr	r3, [pc, #72]	; (80049ac <MX_I2C1_Init+0x60>)
 8004964:	2200      	movs	r2, #0
 8004966:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004968:	4b10      	ldr	r3, [pc, #64]	; (80049ac <MX_I2C1_Init+0x60>)
 800496a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800496e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004970:	4b0e      	ldr	r3, [pc, #56]	; (80049ac <MX_I2C1_Init+0x60>)
 8004972:	2200      	movs	r2, #0
 8004974:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004976:	4b0d      	ldr	r3, [pc, #52]	; (80049ac <MX_I2C1_Init+0x60>)
 8004978:	2200      	movs	r2, #0
 800497a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800497c:	4b0b      	ldr	r3, [pc, #44]	; (80049ac <MX_I2C1_Init+0x60>)
 800497e:	2200      	movs	r2, #0
 8004980:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004982:	4b0a      	ldr	r3, [pc, #40]	; (80049ac <MX_I2C1_Init+0x60>)
 8004984:	2200      	movs	r2, #0
 8004986:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004988:	4808      	ldr	r0, [pc, #32]	; (80049ac <MX_I2C1_Init+0x60>)
 800498a:	f002 fbf3 	bl	8007174 <HAL_I2C_Init>
 800498e:	4603      	mov	r3, r0
 8004990:	2b00      	cmp	r3, #0
 8004992:	d001      	beq.n	8004998 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004994:	f000 fa54 	bl	8004e40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  __HAL_I2C_ENABLE(&hi2c1);
 8004998:	4b04      	ldr	r3, [pc, #16]	; (80049ac <MX_I2C1_Init+0x60>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	4b03      	ldr	r3, [pc, #12]	; (80049ac <MX_I2C1_Init+0x60>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f042 0201 	orr.w	r2, r2, #1
 80049a6:	601a      	str	r2, [r3, #0]
  /* USER CODE END I2C1_Init 2 */

}
 80049a8:	bf00      	nop
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	20003fbc 	.word	0x20003fbc
 80049b0:	40005400 	.word	0x40005400
 80049b4:	000186a0 	.word	0x000186a0

080049b8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80049bc:	4b1b      	ldr	r3, [pc, #108]	; (8004a2c <MX_SPI1_Init+0x74>)
 80049be:	4a1c      	ldr	r2, [pc, #112]	; (8004a30 <MX_SPI1_Init+0x78>)
 80049c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80049c2:	4b1a      	ldr	r3, [pc, #104]	; (8004a2c <MX_SPI1_Init+0x74>)
 80049c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80049c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80049ca:	4b18      	ldr	r3, [pc, #96]	; (8004a2c <MX_SPI1_Init+0x74>)
 80049cc:	2200      	movs	r2, #0
 80049ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80049d0:	4b16      	ldr	r3, [pc, #88]	; (8004a2c <MX_SPI1_Init+0x74>)
 80049d2:	2200      	movs	r2, #0
 80049d4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80049d6:	4b15      	ldr	r3, [pc, #84]	; (8004a2c <MX_SPI1_Init+0x74>)
 80049d8:	2202      	movs	r2, #2
 80049da:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80049dc:	4b13      	ldr	r3, [pc, #76]	; (8004a2c <MX_SPI1_Init+0x74>)
 80049de:	2201      	movs	r2, #1
 80049e0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80049e2:	4b12      	ldr	r3, [pc, #72]	; (8004a2c <MX_SPI1_Init+0x74>)
 80049e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049e8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80049ea:	4b10      	ldr	r3, [pc, #64]	; (8004a2c <MX_SPI1_Init+0x74>)
 80049ec:	2200      	movs	r2, #0
 80049ee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80049f0:	4b0e      	ldr	r3, [pc, #56]	; (8004a2c <MX_SPI1_Init+0x74>)
 80049f2:	2200      	movs	r2, #0
 80049f4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80049f6:	4b0d      	ldr	r3, [pc, #52]	; (8004a2c <MX_SPI1_Init+0x74>)
 80049f8:	2200      	movs	r2, #0
 80049fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049fc:	4b0b      	ldr	r3, [pc, #44]	; (8004a2c <MX_SPI1_Init+0x74>)
 80049fe:	2200      	movs	r2, #0
 8004a00:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004a02:	4b0a      	ldr	r3, [pc, #40]	; (8004a2c <MX_SPI1_Init+0x74>)
 8004a04:	220a      	movs	r2, #10
 8004a06:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004a08:	4808      	ldr	r0, [pc, #32]	; (8004a2c <MX_SPI1_Init+0x74>)
 8004a0a:	f004 f989 	bl	8008d20 <HAL_SPI_Init>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d001      	beq.n	8004a18 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8004a14:	f000 fa14 	bl	8004e40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  __HAL_SPI_ENABLE(&hspi1);
 8004a18:	4b04      	ldr	r3, [pc, #16]	; (8004a2c <MX_SPI1_Init+0x74>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	4b03      	ldr	r3, [pc, #12]	; (8004a2c <MX_SPI1_Init+0x74>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a26:	601a      	str	r2, [r3, #0]
  /* USER CODE END SPI1_Init 2 */

}
 8004a28:	bf00      	nop
 8004a2a:	bd80      	pop	{r7, pc}
 8004a2c:	20004010 	.word	0x20004010
 8004a30:	40013000 	.word	0x40013000

08004a34 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b092      	sub	sp, #72	; 0x48
 8004a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004a3a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004a3e:	2200      	movs	r2, #0
 8004a40:	601a      	str	r2, [r3, #0]
 8004a42:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004a44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a48:	2200      	movs	r2, #0
 8004a4a:	601a      	str	r2, [r3, #0]
 8004a4c:	605a      	str	r2, [r3, #4]
 8004a4e:	609a      	str	r2, [r3, #8]
 8004a50:	60da      	str	r2, [r3, #12]
 8004a52:	611a      	str	r2, [r3, #16]
 8004a54:	615a      	str	r2, [r3, #20]
 8004a56:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004a58:	1d3b      	adds	r3, r7, #4
 8004a5a:	2220      	movs	r2, #32
 8004a5c:	2100      	movs	r1, #0
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f006 f8e4 	bl	800ac2c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004a64:	4b32      	ldr	r3, [pc, #200]	; (8004b30 <MX_TIM1_Init+0xfc>)
 8004a66:	4a33      	ldr	r2, [pc, #204]	; (8004b34 <MX_TIM1_Init+0x100>)
 8004a68:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004a6a:	4b31      	ldr	r3, [pc, #196]	; (8004b30 <MX_TIM1_Init+0xfc>)
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a70:	4b2f      	ldr	r3, [pc, #188]	; (8004b30 <MX_TIM1_Init+0xfc>)
 8004a72:	2200      	movs	r2, #0
 8004a74:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8004a76:	4b2e      	ldr	r3, [pc, #184]	; (8004b30 <MX_TIM1_Init+0xfc>)
 8004a78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a7c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004a7e:	4b2c      	ldr	r3, [pc, #176]	; (8004b30 <MX_TIM1_Init+0xfc>)
 8004a80:	2200      	movs	r2, #0
 8004a82:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004a84:	4b2a      	ldr	r3, [pc, #168]	; (8004b30 <MX_TIM1_Init+0xfc>)
 8004a86:	2200      	movs	r2, #0
 8004a88:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004a8a:	4b29      	ldr	r3, [pc, #164]	; (8004b30 <MX_TIM1_Init+0xfc>)
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004a90:	4827      	ldr	r0, [pc, #156]	; (8004b30 <MX_TIM1_Init+0xfc>)
 8004a92:	f004 fa16 	bl	8008ec2 <HAL_TIM_PWM_Init>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d001      	beq.n	8004aa0 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8004a9c:	f000 f9d0 	bl	8004e40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004aa8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004aac:	4619      	mov	r1, r3
 8004aae:	4820      	ldr	r0, [pc, #128]	; (8004b30 <MX_TIM1_Init+0xfc>)
 8004ab0:	f004 fec6 	bl	8009840 <HAL_TIMEx_MasterConfigSynchronization>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d001      	beq.n	8004abe <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8004aba:	f000 f9c1 	bl	8004e40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004abe:	2360      	movs	r3, #96	; 0x60
 8004ac0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 65535;
 8004ac2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004ac6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004acc:	2300      	movs	r3, #0
 8004ace:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004ad8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004adc:	220c      	movs	r2, #12
 8004ade:	4619      	mov	r1, r3
 8004ae0:	4813      	ldr	r0, [pc, #76]	; (8004b30 <MX_TIM1_Init+0xfc>)
 8004ae2:	f004 fb75 	bl	80091d0 <HAL_TIM_PWM_ConfigChannel>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d001      	beq.n	8004af0 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8004aec:	f000 f9a8 	bl	8004e40 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004af0:	2300      	movs	r3, #0
 8004af2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004af4:	2300      	movs	r3, #0
 8004af6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004af8:	2300      	movs	r3, #0
 8004afa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004afc:	2300      	movs	r3, #0
 8004afe:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004b00:	2300      	movs	r3, #0
 8004b02:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004b04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004b08:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004b0e:	1d3b      	adds	r3, r7, #4
 8004b10:	4619      	mov	r1, r3
 8004b12:	4807      	ldr	r0, [pc, #28]	; (8004b30 <MX_TIM1_Init+0xfc>)
 8004b14:	f004 ff10 	bl	8009938 <HAL_TIMEx_ConfigBreakDeadTime>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d001      	beq.n	8004b22 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8004b1e:	f000 f98f 	bl	8004e40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004b22:	4803      	ldr	r0, [pc, #12]	; (8004b30 <MX_TIM1_Init+0xfc>)
 8004b24:	f001 fa32 	bl	8005f8c <HAL_TIM_MspPostInit>

}
 8004b28:	bf00      	nop
 8004b2a:	3748      	adds	r7, #72	; 0x48
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}
 8004b30:	20004068 	.word	0x20004068
 8004b34:	40010000 	.word	0x40010000

08004b38 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004b3c:	4b15      	ldr	r3, [pc, #84]	; (8004b94 <MX_USART1_UART_Init+0x5c>)
 8004b3e:	4a16      	ldr	r2, [pc, #88]	; (8004b98 <MX_USART1_UART_Init+0x60>)
 8004b40:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004b42:	4b14      	ldr	r3, [pc, #80]	; (8004b94 <MX_USART1_UART_Init+0x5c>)
 8004b44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004b48:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004b4a:	4b12      	ldr	r3, [pc, #72]	; (8004b94 <MX_USART1_UART_Init+0x5c>)
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004b50:	4b10      	ldr	r3, [pc, #64]	; (8004b94 <MX_USART1_UART_Init+0x5c>)
 8004b52:	2200      	movs	r2, #0
 8004b54:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004b56:	4b0f      	ldr	r3, [pc, #60]	; (8004b94 <MX_USART1_UART_Init+0x5c>)
 8004b58:	2200      	movs	r2, #0
 8004b5a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004b5c:	4b0d      	ldr	r3, [pc, #52]	; (8004b94 <MX_USART1_UART_Init+0x5c>)
 8004b5e:	220c      	movs	r2, #12
 8004b60:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004b62:	4b0c      	ldr	r3, [pc, #48]	; (8004b94 <MX_USART1_UART_Init+0x5c>)
 8004b64:	2200      	movs	r2, #0
 8004b66:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004b68:	4b0a      	ldr	r3, [pc, #40]	; (8004b94 <MX_USART1_UART_Init+0x5c>)
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004b6e:	4809      	ldr	r0, [pc, #36]	; (8004b94 <MX_USART1_UART_Init+0x5c>)
 8004b70:	f004 ff34 	bl	80099dc <HAL_UART_Init>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d001      	beq.n	8004b7e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004b7a:	f000 f961 	bl	8004e40 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE); //turn on rx interrupt forever
 8004b7e:	4b05      	ldr	r3, [pc, #20]	; (8004b94 <MX_USART1_UART_Init+0x5c>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	68da      	ldr	r2, [r3, #12]
 8004b84:	4b03      	ldr	r3, [pc, #12]	; (8004b94 <MX_USART1_UART_Init+0x5c>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f042 0220 	orr.w	r2, r2, #32
 8004b8c:	60da      	str	r2, [r3, #12]
  /* USER CODE END USART1_Init 2 */

}
 8004b8e:	bf00      	nop
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop
 8004b94:	200040b0 	.word	0x200040b0
 8004b98:	40011000 	.word	0x40011000

08004b9c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004ba0:	4b15      	ldr	r3, [pc, #84]	; (8004bf8 <MX_USART2_UART_Init+0x5c>)
 8004ba2:	4a16      	ldr	r2, [pc, #88]	; (8004bfc <MX_USART2_UART_Init+0x60>)
 8004ba4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004ba6:	4b14      	ldr	r3, [pc, #80]	; (8004bf8 <MX_USART2_UART_Init+0x5c>)
 8004ba8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004bac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004bae:	4b12      	ldr	r3, [pc, #72]	; (8004bf8 <MX_USART2_UART_Init+0x5c>)
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004bb4:	4b10      	ldr	r3, [pc, #64]	; (8004bf8 <MX_USART2_UART_Init+0x5c>)
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004bba:	4b0f      	ldr	r3, [pc, #60]	; (8004bf8 <MX_USART2_UART_Init+0x5c>)
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004bc0:	4b0d      	ldr	r3, [pc, #52]	; (8004bf8 <MX_USART2_UART_Init+0x5c>)
 8004bc2:	220c      	movs	r2, #12
 8004bc4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004bc6:	4b0c      	ldr	r3, [pc, #48]	; (8004bf8 <MX_USART2_UART_Init+0x5c>)
 8004bc8:	2200      	movs	r2, #0
 8004bca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004bcc:	4b0a      	ldr	r3, [pc, #40]	; (8004bf8 <MX_USART2_UART_Init+0x5c>)
 8004bce:	2200      	movs	r2, #0
 8004bd0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004bd2:	4809      	ldr	r0, [pc, #36]	; (8004bf8 <MX_USART2_UART_Init+0x5c>)
 8004bd4:	f004 ff02 	bl	80099dc <HAL_UART_Init>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d001      	beq.n	8004be2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004bde:	f000 f92f 	bl	8004e40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE); //turn on rx interrupt forever
 8004be2:	4b05      	ldr	r3, [pc, #20]	; (8004bf8 <MX_USART2_UART_Init+0x5c>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	68da      	ldr	r2, [r3, #12]
 8004be8:	4b03      	ldr	r3, [pc, #12]	; (8004bf8 <MX_USART2_UART_Init+0x5c>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f042 0220 	orr.w	r2, r2, #32
 8004bf0:	60da      	str	r2, [r3, #12]
  /* USER CODE END USART2_Init 2 */

}
 8004bf2:	bf00      	nop
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	bf00      	nop
 8004bf8:	200040f4 	.word	0x200040f4
 8004bfc:	40004400 	.word	0x40004400

08004c00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b08a      	sub	sp, #40	; 0x28
 8004c04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c06:	f107 0314 	add.w	r3, r7, #20
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	601a      	str	r2, [r3, #0]
 8004c0e:	605a      	str	r2, [r3, #4]
 8004c10:	609a      	str	r2, [r3, #8]
 8004c12:	60da      	str	r2, [r3, #12]
 8004c14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004c16:	2300      	movs	r3, #0
 8004c18:	613b      	str	r3, [r7, #16]
 8004c1a:	4b49      	ldr	r3, [pc, #292]	; (8004d40 <MX_GPIO_Init+0x140>)
 8004c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c1e:	4a48      	ldr	r2, [pc, #288]	; (8004d40 <MX_GPIO_Init+0x140>)
 8004c20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c24:	6313      	str	r3, [r2, #48]	; 0x30
 8004c26:	4b46      	ldr	r3, [pc, #280]	; (8004d40 <MX_GPIO_Init+0x140>)
 8004c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c2e:	613b      	str	r3, [r7, #16]
 8004c30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c32:	2300      	movs	r3, #0
 8004c34:	60fb      	str	r3, [r7, #12]
 8004c36:	4b42      	ldr	r3, [pc, #264]	; (8004d40 <MX_GPIO_Init+0x140>)
 8004c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c3a:	4a41      	ldr	r2, [pc, #260]	; (8004d40 <MX_GPIO_Init+0x140>)
 8004c3c:	f043 0301 	orr.w	r3, r3, #1
 8004c40:	6313      	str	r3, [r2, #48]	; 0x30
 8004c42:	4b3f      	ldr	r3, [pc, #252]	; (8004d40 <MX_GPIO_Init+0x140>)
 8004c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c46:	f003 0301 	and.w	r3, r3, #1
 8004c4a:	60fb      	str	r3, [r7, #12]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004c4e:	2300      	movs	r3, #0
 8004c50:	60bb      	str	r3, [r7, #8]
 8004c52:	4b3b      	ldr	r3, [pc, #236]	; (8004d40 <MX_GPIO_Init+0x140>)
 8004c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c56:	4a3a      	ldr	r2, [pc, #232]	; (8004d40 <MX_GPIO_Init+0x140>)
 8004c58:	f043 0310 	orr.w	r3, r3, #16
 8004c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8004c5e:	4b38      	ldr	r3, [pc, #224]	; (8004d40 <MX_GPIO_Init+0x140>)
 8004c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c62:	f003 0310 	and.w	r3, r3, #16
 8004c66:	60bb      	str	r3, [r7, #8]
 8004c68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	607b      	str	r3, [r7, #4]
 8004c6e:	4b34      	ldr	r3, [pc, #208]	; (8004d40 <MX_GPIO_Init+0x140>)
 8004c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c72:	4a33      	ldr	r2, [pc, #204]	; (8004d40 <MX_GPIO_Init+0x140>)
 8004c74:	f043 0302 	orr.w	r3, r3, #2
 8004c78:	6313      	str	r3, [r2, #48]	; 0x30
 8004c7a:	4b31      	ldr	r3, [pc, #196]	; (8004d40 <MX_GPIO_Init+0x140>)
 8004c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c7e:	f003 0302 	and.w	r3, r3, #2
 8004c82:	607b      	str	r3, [r7, #4]
 8004c84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004c86:	2300      	movs	r3, #0
 8004c88:	603b      	str	r3, [r7, #0]
 8004c8a:	4b2d      	ldr	r3, [pc, #180]	; (8004d40 <MX_GPIO_Init+0x140>)
 8004c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c8e:	4a2c      	ldr	r2, [pc, #176]	; (8004d40 <MX_GPIO_Init+0x140>)
 8004c90:	f043 0308 	orr.w	r3, r3, #8
 8004c94:	6313      	str	r3, [r2, #48]	; 0x30
 8004c96:	4b2a      	ldr	r3, [pc, #168]	; (8004d40 <MX_GPIO_Init+0x140>)
 8004c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c9a:	f003 0308 	and.w	r3, r3, #8
 8004c9e:	603b      	str	r3, [r7, #0]
 8004ca0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LCD_RES_Pin, GPIO_PIN_RESET);
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	f241 0110 	movw	r1, #4112	; 0x1010
 8004ca8:	4826      	ldr	r0, [pc, #152]	; (8004d44 <MX_GPIO_Init+0x144>)
 8004caa:	f002 fa31 	bl	8007110 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_5, GPIO_PIN_RESET);
 8004cae:	2200      	movs	r2, #0
 8004cb0:	2128      	movs	r1, #40	; 0x28
 8004cb2:	4825      	ldr	r0, [pc, #148]	; (8004d48 <MX_GPIO_Init+0x148>)
 8004cb4:	f002 fa2c 	bl	8007110 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004cb8:	2310      	movs	r3, #16
 8004cba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cc8:	f107 0314 	add.w	r3, r7, #20
 8004ccc:	4619      	mov	r1, r3
 8004cce:	481d      	ldr	r0, [pc, #116]	; (8004d44 <MX_GPIO_Init+0x144>)
 8004cd0:	f002 f882 	bl	8006dd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RES_Pin */
  GPIO_InitStruct.Pin = LCD_RES_Pin;
 8004cd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004cd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_RES_GPIO_Port, &GPIO_InitStruct);
 8004ce6:	f107 0314 	add.w	r3, r7, #20
 8004cea:	4619      	mov	r1, r3
 8004cec:	4815      	ldr	r0, [pc, #84]	; (8004d44 <MX_GPIO_Init+0x144>)
 8004cee:	f002 f873 	bl	8006dd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8004cf2:	2328      	movs	r3, #40	; 0x28
 8004cf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d02:	f107 0314 	add.w	r3, r7, #20
 8004d06:	4619      	mov	r1, r3
 8004d08:	480f      	ldr	r0, [pc, #60]	; (8004d48 <MX_GPIO_Init+0x148>)
 8004d0a:	f002 f865 	bl	8006dd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004d0e:	2310      	movs	r3, #16
 8004d10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004d12:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004d16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d1c:	f107 0314 	add.w	r3, r7, #20
 8004d20:	4619      	mov	r1, r3
 8004d22:	4809      	ldr	r0, [pc, #36]	; (8004d48 <MX_GPIO_Init+0x148>)
 8004d24:	f002 f858 	bl	8006dd8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8004d28:	2200      	movs	r2, #0
 8004d2a:	2100      	movs	r1, #0
 8004d2c:	200a      	movs	r0, #10
 8004d2e:	f001 ff8a 	bl	8006c46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8004d32:	200a      	movs	r0, #10
 8004d34:	f001 ffa3 	bl	8006c7e <HAL_NVIC_EnableIRQ>

}
 8004d38:	bf00      	nop
 8004d3a:	3728      	adds	r7, #40	; 0x28
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	40023800 	.word	0x40023800
 8004d44:	40020000 	.word	0x40020000
 8004d48:	40020400 	.word	0x40020400

08004d4c <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b08e      	sub	sp, #56	; 0x38
 8004d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8004d52:	f107 031c 	add.w	r3, r7, #28
 8004d56:	2200      	movs	r2, #0
 8004d58:	601a      	str	r2, [r3, #0]
 8004d5a:	605a      	str	r2, [r3, #4]
 8004d5c:	609a      	str	r2, [r3, #8]
 8004d5e:	60da      	str	r2, [r3, #12]
 8004d60:	611a      	str	r2, [r3, #16]
 8004d62:	615a      	str	r2, [r3, #20]
 8004d64:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8004d66:	463b      	mov	r3, r7
 8004d68:	2200      	movs	r2, #0
 8004d6a:	601a      	str	r2, [r3, #0]
 8004d6c:	605a      	str	r2, [r3, #4]
 8004d6e:	609a      	str	r2, [r3, #8]
 8004d70:	60da      	str	r2, [r3, #12]
 8004d72:	611a      	str	r2, [r3, #16]
 8004d74:	615a      	str	r2, [r3, #20]
 8004d76:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8004d78:	4b2f      	ldr	r3, [pc, #188]	; (8004e38 <MX_FSMC_Init+0xec>)
 8004d7a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8004d7e:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8004d80:	4b2d      	ldr	r3, [pc, #180]	; (8004e38 <MX_FSMC_Init+0xec>)
 8004d82:	4a2e      	ldr	r2, [pc, #184]	; (8004e3c <MX_FSMC_Init+0xf0>)
 8004d84:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8004d86:	4b2c      	ldr	r3, [pc, #176]	; (8004e38 <MX_FSMC_Init+0xec>)
 8004d88:	2200      	movs	r2, #0
 8004d8a:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8004d8c:	4b2a      	ldr	r3, [pc, #168]	; (8004e38 <MX_FSMC_Init+0xec>)
 8004d8e:	2200      	movs	r2, #0
 8004d90:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8004d92:	4b29      	ldr	r3, [pc, #164]	; (8004e38 <MX_FSMC_Init+0xec>)
 8004d94:	2200      	movs	r2, #0
 8004d96:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8004d98:	4b27      	ldr	r3, [pc, #156]	; (8004e38 <MX_FSMC_Init+0xec>)
 8004d9a:	2210      	movs	r2, #16
 8004d9c:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8004d9e:	4b26      	ldr	r3, [pc, #152]	; (8004e38 <MX_FSMC_Init+0xec>)
 8004da0:	2200      	movs	r2, #0
 8004da2:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8004da4:	4b24      	ldr	r3, [pc, #144]	; (8004e38 <MX_FSMC_Init+0xec>)
 8004da6:	2200      	movs	r2, #0
 8004da8:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8004daa:	4b23      	ldr	r3, [pc, #140]	; (8004e38 <MX_FSMC_Init+0xec>)
 8004dac:	2200      	movs	r2, #0
 8004dae:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8004db0:	4b21      	ldr	r3, [pc, #132]	; (8004e38 <MX_FSMC_Init+0xec>)
 8004db2:	2200      	movs	r2, #0
 8004db4:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8004db6:	4b20      	ldr	r3, [pc, #128]	; (8004e38 <MX_FSMC_Init+0xec>)
 8004db8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004dbc:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8004dbe:	4b1e      	ldr	r3, [pc, #120]	; (8004e38 <MX_FSMC_Init+0xec>)
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8004dc4:	4b1c      	ldr	r3, [pc, #112]	; (8004e38 <MX_FSMC_Init+0xec>)
 8004dc6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004dca:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8004dcc:	4b1a      	ldr	r3, [pc, #104]	; (8004e38 <MX_FSMC_Init+0xec>)
 8004dce:	2200      	movs	r2, #0
 8004dd0:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8004dd2:	4b19      	ldr	r3, [pc, #100]	; (8004e38 <MX_FSMC_Init+0xec>)
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8004dd8:	4b17      	ldr	r3, [pc, #92]	; (8004e38 <MX_FSMC_Init+0xec>)
 8004dda:	2200      	movs	r2, #0
 8004ddc:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8004dde:	230f      	movs	r3, #15
 8004de0:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8004de2:	230f      	movs	r3, #15
 8004de4:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 40;
 8004de6:	2328      	movs	r3, #40	; 0x28
 8004de8:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 8004dea:	2300      	movs	r3, #0
 8004dec:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8004dee:	2310      	movs	r3, #16
 8004df0:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8004df2:	2311      	movs	r3, #17
 8004df4:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8004df6:	2300      	movs	r3, #0
 8004df8:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 2;
 8004dfa:	2302      	movs	r3, #2
 8004dfc:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8004dfe:	230f      	movs	r3, #15
 8004e00:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 4;
 8004e02:	2304      	movs	r3, #4
 8004e04:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8004e06:	2300      	movs	r3, #0
 8004e08:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8004e0a:	2310      	movs	r3, #16
 8004e0c:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8004e0e:	2311      	movs	r3, #17
 8004e10:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8004e12:	2300      	movs	r3, #0
 8004e14:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8004e16:	463a      	mov	r2, r7
 8004e18:	f107 031c 	add.w	r3, r7, #28
 8004e1c:	4619      	mov	r1, r3
 8004e1e:	4806      	ldr	r0, [pc, #24]	; (8004e38 <MX_FSMC_Init+0xec>)
 8004e20:	f004 f807 	bl	8008e32 <HAL_SRAM_Init>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d001      	beq.n	8004e2e <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8004e2a:	f000 f809 	bl	8004e40 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8004e2e:	bf00      	nop
 8004e30:	3738      	adds	r7, #56	; 0x38
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop
 8004e38:	20004138 	.word	0x20004138
 8004e3c:	a0000104 	.word	0xa0000104

08004e40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004e40:	b480      	push	{r7}
 8004e42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004e44:	b672      	cpsid	i
}
 8004e46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004e48:	e7fe      	b.n	8004e48 <Error_Handler+0x8>
	...

08004e4c <drawObjectToLcd>:

#define MAX_BITMAP_DRAW_XSIZE 128
#define MAX_BITMAP_DRAW_YSIZE 128


int drawObjectToLcd(struct object o, uint8_t *data, int state){
 8004e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e50:	b0cb      	sub	sp, #300	; 0x12c
 8004e52:	af06      	add	r7, sp, #24
 8004e54:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8004e58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	char objName[30];
	objectTypeToString(o.objectType, objName);
 8004e5c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004e60:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004e64:	4619      	mov	r1, r3
 8004e66:	4610      	mov	r0, r2
 8004e68:	f7fe ff44 	bl	8003cf4 <objectTypeToString>

	int objectXSize = (o.xend - o.xstart);
 8004e6c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004e70:	461a      	mov	r2, r3
 8004e72:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	int objectYSize = (o.yend - o.ystart);
 8004e7a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004e7e:	461a      	mov	r2, r3
 8004e80:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004e82:	1ad3      	subs	r3, r2, r3
 8004e84:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	printf("[OV] Drawing %s id %d \n\r", objName, o.objectId);
 8004e88:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004e90:	4619      	mov	r1, r3
 8004e92:	48ce      	ldr	r0, [pc, #824]	; (80051cc <drawObjectToLcd+0x380>)
 8004e94:	f005 fed2 	bl	800ac3c <iprintf>

	if(o.objectType == rectangle){
 8004e98:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d126      	bne.n	8004eee <drawObjectToLcd+0xa2>
		uint16_t color = BLACK;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
		if(o.dataLen<2){
 8004ea6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d805      	bhi.n	8004eba <drawObjectToLcd+0x6e>
			printf("[OV] Warning: missing color byte in object id %d! Falling back on black. \n\r", o.objectId);
 8004eae:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004eb0:	4619      	mov	r1, r3
 8004eb2:	48c7      	ldr	r0, [pc, #796]	; (80051d0 <drawObjectToLcd+0x384>)
 8004eb4:	f005 fec2 	bl	800ac3c <iprintf>
 8004eb8:	e004      	b.n	8004ec4 <drawObjectToLcd+0x78>
		}
		else{
			color = *((uint16_t *) data);
 8004eba:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004ebe:	881b      	ldrh	r3, [r3, #0]
 8004ec0:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
		}
		LCD_fillRect(o.xstart, o.ystart, (o.xend - o.xstart), (o.yend - o.ystart), color);
 8004ec4:	8fb8      	ldrh	r0, [r7, #60]	; 0x3c
 8004ec6:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 8004ec8:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8004ecc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	b29c      	uxth	r4, r3
 8004ed2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8004ed6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	b29a      	uxth	r2, r3
 8004edc:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 8004ee0:	9300      	str	r3, [sp, #0]
 8004ee2:	4613      	mov	r3, r2
 8004ee4:	4622      	mov	r2, r4
 8004ee6:	f7fb fe71 	bl	8000bcc <LCD_fillRect>
 8004eea:	f000 bc77 	b.w	80057dc <drawObjectToLcd+0x990>
	}
	else if(o.objectType == picture){
 8004eee:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8004ef2:	2b04      	cmp	r3, #4
 8004ef4:	f040 80ad 	bne.w	8005052 <drawObjectToLcd+0x206>
 8004ef8:	466b      	mov	r3, sp
 8004efa:	461c      	mov	r4, r3

		if(o.dataLen != 4){
 8004efc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004f00:	2b04      	cmp	r3, #4
 8004f02:	d009      	beq.n	8004f18 <drawObjectToLcd+0xcc>
			printf("[OV] Error: Unexpected data len for picture id %d. Need: 4, got: %d \n\r", o.objectId, o.dataLen);
 8004f04:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004f06:	4619      	mov	r1, r3
 8004f08:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	48b1      	ldr	r0, [pc, #708]	; (80051d4 <drawObjectToLcd+0x388>)
 8004f10:	f005 fe94 	bl	800ac3c <iprintf>
			return 3;
 8004f14:	2303      	movs	r3, #3
 8004f16:	e09a      	b.n	800504e <drawObjectToLcd+0x202>
		}

		uint16_t bitmapNumber =	 (*(data+0) << 8) + *(data+1);
 8004f18:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	021b      	lsls	r3, r3, #8
 8004f22:	b29a      	uxth	r2, r3
 8004f24:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004f28:	3301      	adds	r3, #1
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	4413      	add	r3, r2
 8004f30:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
		uint16_t scaling = 	  	 (*(data+2) << 8) + *(data+3);
 8004f34:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004f38:	3302      	adds	r3, #2
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	021b      	lsls	r3, r3, #8
 8004f40:	b29a      	uxth	r2, r3
 8004f42:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004f46:	3303      	adds	r3, #3
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	4413      	add	r3, r2
 8004f4e:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94

		int maxPixels = MAX_BITMAP_DRAW_XSIZE*MAX_BITMAP_DRAW_YSIZE;
 8004f52:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004f56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		uint16_t pixelBuffer[maxPixels];
 8004f5a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004f5e:	1e4b      	subs	r3, r1, #1
 8004f60:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004f64:	460a      	mov	r2, r1
 8004f66:	2300      	movs	r3, #0
 8004f68:	4692      	mov	sl, r2
 8004f6a:	469b      	mov	fp, r3
 8004f6c:	f04f 0200 	mov.w	r2, #0
 8004f70:	f04f 0300 	mov.w	r3, #0
 8004f74:	ea4f 130b 	mov.w	r3, fp, lsl #4
 8004f78:	ea43 731a 	orr.w	r3, r3, sl, lsr #28
 8004f7c:	ea4f 120a 	mov.w	r2, sl, lsl #4
 8004f80:	460a      	mov	r2, r1
 8004f82:	2300      	movs	r3, #0
 8004f84:	4690      	mov	r8, r2
 8004f86:	4699      	mov	r9, r3
 8004f88:	f04f 0200 	mov.w	r2, #0
 8004f8c:	f04f 0300 	mov.w	r3, #0
 8004f90:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8004f94:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8004f98:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8004f9c:	460b      	mov	r3, r1
 8004f9e:	005b      	lsls	r3, r3, #1
 8004fa0:	3307      	adds	r3, #7
 8004fa2:	08db      	lsrs	r3, r3, #3
 8004fa4:	00db      	lsls	r3, r3, #3
 8004fa6:	ebad 0d03 	sub.w	sp, sp, r3
 8004faa:	ab06      	add	r3, sp, #24
 8004fac:	3301      	adds	r3, #1
 8004fae:	085b      	lsrs	r3, r3, #1
 8004fb0:	005b      	lsls	r3, r3, #1
 8004fb2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		struct bitmap bitmapHeader;
		int pixelsGotten = fetchBitmap(bitmapNumber, &bitmapHeader, pixelBuffer, maxPixels);
 8004fb6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8004fc0:	f8b7 0096 	ldrh.w	r0, [r7, #150]	; 0x96
 8004fc4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004fc8:	f7fd f864 	bl	8002094 <fetchBitmap>
 8004fcc:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

		if(objectXSize != bitmapHeader.xsize*scaling || objectYSize != bitmapHeader.ysize*scaling){
 8004fd0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8004fda:	fb02 f303 	mul.w	r3, r2, r3
 8004fde:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d10a      	bne.n	8004ffc <drawObjectToLcd+0x1b0>
 8004fe6:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8004fea:	461a      	mov	r2, r3
 8004fec:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8004ff0:	fb02 f303 	mul.w	r3, r2, r3
 8004ff4:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d014      	beq.n	8005026 <drawObjectToLcd+0x1da>
			printf("[OV] Warning: Scaled bitmap and picture (id %d) size mismatch! Object is %d x %d, bitmap is %d x %d scaled by factor of %d.\n\r",o.objectId, objectXSize, objectYSize, bitmapHeader.xsize, bitmapHeader.ysize, scaling);
 8004ffc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004ffe:	4618      	mov	r0, r3
 8005000:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005004:	461a      	mov	r2, r3
 8005006:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800500a:	4619      	mov	r1, r3
 800500c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8005010:	9302      	str	r3, [sp, #8]
 8005012:	9101      	str	r1, [sp, #4]
 8005014:	9200      	str	r2, [sp, #0]
 8005016:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800501a:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800501e:	4601      	mov	r1, r0
 8005020:	486d      	ldr	r0, [pc, #436]	; (80051d8 <drawObjectToLcd+0x38c>)
 8005022:	f005 fe0b 	bl	800ac3c <iprintf>
		}

		drawBitmapToLcd(o.xstart, o.ystart, bitmapHeader, pixelBuffer, pixelsGotten, scaling);
 8005026:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005028:	4618      	mov	r0, r3
 800502a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800502c:	4619      	mov	r1, r3
 800502e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005032:	b29b      	uxth	r3, r3
 8005034:	f8b7 2094 	ldrh.w	r2, [r7, #148]	; 0x94
 8005038:	9202      	str	r2, [sp, #8]
 800503a:	9301      	str	r3, [sp, #4]
 800503c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005040:	9300      	str	r3, [sp, #0]
 8005042:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005046:	cb0c      	ldmia	r3, {r2, r3}
 8005048:	f000 fd14 	bl	8005a74 <drawBitmapToLcd>
		return 0;
 800504c:	2300      	movs	r3, #0
 800504e:	46a5      	mov	sp, r4
 8005050:	e3c5      	b.n	80057de <drawObjectToLcd+0x992>

	}
	else if(o.objectType==label){
 8005052:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8005056:	2b03      	cmp	r3, #3
 8005058:	f040 8106 	bne.w	8005268 <drawObjectToLcd+0x41c>
 800505c:	466b      	mov	r3, sp
 800505e:	461e      	mov	r6, r3
		int expectedChars = o.dataLen - 8;
 8005060:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005064:	3b08      	subs	r3, #8
 8005066:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		if(expectedChars < 0){
 800506a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800506e:	2b00      	cmp	r3, #0
 8005070:	da07      	bge.n	8005082 <drawObjectToLcd+0x236>
			printf("[OV] Error: Too few data bytes to draw string id %d. \n\r", o.objectId);
 8005072:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005074:	4619      	mov	r1, r3
 8005076:	4859      	ldr	r0, [pc, #356]	; (80051dc <drawObjectToLcd+0x390>)
 8005078:	f005 fde0 	bl	800ac3c <iprintf>
			return 3;
 800507c:	2303      	movs	r3, #3
 800507e:	46b5      	mov	sp, r6
 8005080:	e3ad      	b.n	80057de <drawObjectToLcd+0x992>
		}
		int dIndex = 0;
 8005082:	2300      	movs	r3, #0
 8005084:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
		uint8_t pixelScaling =	*(data + dIndex++);
 8005088:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800508c:	1c5a      	adds	r2, r3, #1
 800508e:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8005092:	461a      	mov	r2, r3
 8005094:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005098:	4413      	add	r3, r2
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		uint8_t hSpace = 		*(data + dIndex++);
 80050a0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80050a4:	1c5a      	adds	r2, r3, #1
 80050a6:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 80050aa:	461a      	mov	r2, r3
 80050ac:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80050b0:	4413      	add	r3, r2
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6
		uint8_t vSpace = 		*(data + dIndex++);
 80050b8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80050bc:	1c5a      	adds	r2, r3, #1
 80050be:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 80050c2:	461a      	mov	r2, r3
 80050c4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80050c8:	4413      	add	r3, r2
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
		uint8_t useBg = 		*(data + dIndex++);
 80050d0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80050d4:	1c5a      	adds	r2, r3, #1
 80050d6:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 80050da:	461a      	mov	r2, r3
 80050dc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80050e0:	4413      	add	r3, r2
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	f887 30a4 	strb.w	r3, [r7, #164]	; 0xa4
		uint16_t textColor = 	(*(data + dIndex) << 8) + *(data+dIndex+1);
 80050e8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80050ec:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80050f0:	4413      	add	r3, r2
 80050f2:	781b      	ldrb	r3, [r3, #0]
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	021b      	lsls	r3, r3, #8
 80050f8:	b29a      	uxth	r2, r3
 80050fa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80050fe:	3301      	adds	r3, #1
 8005100:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 8005104:	440b      	add	r3, r1
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	b29b      	uxth	r3, r3
 800510a:	4413      	add	r3, r2
 800510c:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
		dIndex += 2;
 8005110:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005114:	3302      	adds	r3, #2
 8005116:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
		uint16_t bgColor = 		(*(data + dIndex) << 8) + *(data+dIndex+1);
 800511a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800511e:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8005122:	4413      	add	r3, r2
 8005124:	781b      	ldrb	r3, [r3, #0]
 8005126:	b29b      	uxth	r3, r3
 8005128:	021b      	lsls	r3, r3, #8
 800512a:	b29a      	uxth	r2, r3
 800512c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005130:	3301      	adds	r3, #1
 8005132:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 8005136:	440b      	add	r3, r1
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	b29b      	uxth	r3, r3
 800513c:	4413      	add	r3, r2
 800513e:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
		dIndex += 2;
 8005142:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005146:	3302      	adds	r3, #2
 8005148:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
		printf("Label scale %d hspace %d textcolor %04x \n\r", pixelScaling, hSpace, textColor);
 800514c:	f897 10a7 	ldrb.w	r1, [r7, #167]	; 0xa7
 8005150:	f897 20a6 	ldrb.w	r2, [r7, #166]	; 0xa6
 8005154:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8005158:	4821      	ldr	r0, [pc, #132]	; (80051e0 <drawObjectToLcd+0x394>)
 800515a:	f005 fd6f 	bl	800ac3c <iprintf>
		char labelString[expectedChars + 1];
 800515e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005162:	1c59      	adds	r1, r3, #1
 8005164:	1e4b      	subs	r3, r1, #1
 8005166:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800516a:	460a      	mov	r2, r1
 800516c:	2300      	movs	r3, #0
 800516e:	633a      	str	r2, [r7, #48]	; 0x30
 8005170:	637b      	str	r3, [r7, #52]	; 0x34
 8005172:	f04f 0200 	mov.w	r2, #0
 8005176:	f04f 0300 	mov.w	r3, #0
 800517a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800517e:	4628      	mov	r0, r5
 8005180:	00c3      	lsls	r3, r0, #3
 8005182:	4620      	mov	r0, r4
 8005184:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8005188:	4620      	mov	r0, r4
 800518a:	00c2      	lsls	r2, r0, #3
 800518c:	460a      	mov	r2, r1
 800518e:	2300      	movs	r3, #0
 8005190:	62ba      	str	r2, [r7, #40]	; 0x28
 8005192:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005194:	f04f 0200 	mov.w	r2, #0
 8005198:	f04f 0300 	mov.w	r3, #0
 800519c:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80051a0:	4628      	mov	r0, r5
 80051a2:	00c3      	lsls	r3, r0, #3
 80051a4:	4620      	mov	r0, r4
 80051a6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80051aa:	4620      	mov	r0, r4
 80051ac:	00c2      	lsls	r2, r0, #3
 80051ae:	460b      	mov	r3, r1
 80051b0:	3307      	adds	r3, #7
 80051b2:	08db      	lsrs	r3, r3, #3
 80051b4:	00db      	lsls	r3, r3, #3
 80051b6:	ebad 0d03 	sub.w	sp, sp, r3
 80051ba:	ab06      	add	r3, sp, #24
 80051bc:	3300      	adds	r3, #0
 80051be:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		int i;
		for(i = 0; i<expectedChars;i++){
 80051c2:	2300      	movs	r3, #0
 80051c4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80051c8:	e022      	b.n	8005210 <drawObjectToLcd+0x3c4>
 80051ca:	bf00      	nop
 80051cc:	0800cfe0 	.word	0x0800cfe0
 80051d0:	0800cffc 	.word	0x0800cffc
 80051d4:	0800d048 	.word	0x0800d048
 80051d8:	0800d090 	.word	0x0800d090
 80051dc:	0800d110 	.word	0x0800d110
 80051e0:	0800d148 	.word	0x0800d148
			labelString[i] = *(data + dIndex++);
 80051e4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80051e8:	1c5a      	adds	r2, r3, #1
 80051ea:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 80051ee:	461a      	mov	r2, r3
 80051f0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80051f4:	4413      	add	r3, r2
 80051f6:	7819      	ldrb	r1, [r3, #0]
 80051f8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80051fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005200:	4413      	add	r3, r2
 8005202:	460a      	mov	r2, r1
 8005204:	701a      	strb	r2, [r3, #0]
		for(i = 0; i<expectedChars;i++){
 8005206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800520a:	3301      	adds	r3, #1
 800520c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005210:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8005214:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005218:	429a      	cmp	r2, r3
 800521a:	dbe3      	blt.n	80051e4 <drawObjectToLcd+0x398>
		}
		labelString[expectedChars] = 0;
 800521c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8005220:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005224:	4413      	add	r3, r2
 8005226:	2200      	movs	r2, #0
 8005228:	701a      	strb	r2, [r3, #0]
		drawStringToLcd5x7(o.xstart, o.ystart, pixelScaling, textColor, useBg, bgColor, hSpace, vSpace, labelString);
 800522a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800522c:	469c      	mov	ip, r3
 800522e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005230:	469e      	mov	lr, r3
 8005232:	f897 40a7 	ldrb.w	r4, [r7, #167]	; 0xa7
 8005236:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 800523a:	f897 20a6 	ldrb.w	r2, [r7, #166]	; 0xa6
 800523e:	f897 10a5 	ldrb.w	r1, [r7, #165]	; 0xa5
 8005242:	f8b7 50a2 	ldrh.w	r5, [r7, #162]	; 0xa2
 8005246:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800524a:	9004      	str	r0, [sp, #16]
 800524c:	9103      	str	r1, [sp, #12]
 800524e:	9202      	str	r2, [sp, #8]
 8005250:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 8005254:	9201      	str	r2, [sp, #4]
 8005256:	9300      	str	r3, [sp, #0]
 8005258:	462b      	mov	r3, r5
 800525a:	4622      	mov	r2, r4
 800525c:	4671      	mov	r1, lr
 800525e:	4660      	mov	r0, ip
 8005260:	f000 fc88 	bl	8005b74 <drawStringToLcd5x7>
 8005264:	46b5      	mov	sp, r6
 8005266:	e2b9      	b.n	80057dc <drawObjectToLcd+0x990>
	}
	else if(o.objectType == button || o.objectType == screenbutton){
 8005268:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800526c:	2b02      	cmp	r3, #2
 800526e:	d004      	beq.n	800527a <drawObjectToLcd+0x42e>
 8005270:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8005274:	2b05      	cmp	r3, #5
 8005276:	f040 81f5 	bne.w	8005664 <drawObjectToLcd+0x818>
 800527a:	466b      	mov	r3, sp
 800527c:	4698      	mov	r8, r3
		//those two objects look the same and their only difference is that screenbutton holds target page in it's data.
		int dIndex = 0;
 800527e:	2300      	movs	r3, #0
 8005280:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
		if(o.objectType == screenbutton){
 8005284:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8005288:	2b05      	cmp	r3, #5
 800528a:	d104      	bne.n	8005296 <drawObjectToLcd+0x44a>
			dIndex += 1; //skip target page data field
 800528c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005290:	3301      	adds	r3, #1
 8005292:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
		}
		int dataLeft = o.dataLen - dIndex;
 8005296:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800529a:	461a      	mov	r2, r3
 800529c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
		int expectedChars;
		if(dataLeft < 6){
 80052a6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80052aa:	2b05      	cmp	r3, #5
 80052ac:	dc09      	bgt.n	80052c2 <drawObjectToLcd+0x476>
			printf("[OV] Error: Too few visualization data bytes for (screen)button id %d. Need: 6, got: %d \n\r", o.objectId, dataLeft);
 80052ae:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80052b0:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80052b4:	4619      	mov	r1, r3
 80052b6:	48c5      	ldr	r0, [pc, #788]	; (80055cc <drawObjectToLcd+0x780>)
 80052b8:	f005 fcc0 	bl	800ac3c <iprintf>
			return 3;
 80052bc:	2303      	movs	r3, #3
 80052be:	46c5      	mov	sp, r8
 80052c0:	e28d      	b.n	80057de <drawObjectToLcd+0x992>
		}
		else if(dataLeft > 6 && dataLeft < 14){
 80052c2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80052c6:	2b06      	cmp	r3, #6
 80052c8:	dd0e      	ble.n	80052e8 <drawObjectToLcd+0x49c>
 80052ca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80052ce:	2b0d      	cmp	r3, #13
 80052d0:	dc0a      	bgt.n	80052e8 <drawObjectToLcd+0x49c>
			printf("[OV] Warning: Unexpected ammount of visualization databytes for (screen)button id %d. (Expected either 6 or more than 13, got %d). \n\r", o.objectId, dataLeft);
 80052d2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80052d4:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80052d8:	4619      	mov	r1, r3
 80052da:	48bd      	ldr	r0, [pc, #756]	; (80055d0 <drawObjectToLcd+0x784>)
 80052dc:	f005 fcae 	bl	800ac3c <iprintf>
			expectedChars = 0;
 80052e0:	2300      	movs	r3, #0
 80052e2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80052e6:	e004      	b.n	80052f2 <drawObjectToLcd+0x4a6>
		}
		else{
			expectedChars = dataLeft - 13;
 80052e8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80052ec:	3b0d      	subs	r3, #13
 80052ee:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
		}

		uint16_t bitmapUnpressed =		 (*(data+dIndex) << 8) + *(data+dIndex+1);
 80052f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80052f6:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80052fa:	4413      	add	r3, r2
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	b29b      	uxth	r3, r3
 8005300:	021b      	lsls	r3, r3, #8
 8005302:	b29a      	uxth	r2, r3
 8005304:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005308:	3301      	adds	r3, #1
 800530a:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 800530e:	440b      	add	r3, r1
 8005310:	781b      	ldrb	r3, [r3, #0]
 8005312:	b29b      	uxth	r3, r3
 8005314:	4413      	add	r3, r2
 8005316:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
		dIndex += 2;
 800531a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800531e:	3302      	adds	r3, #2
 8005320:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
		uint16_t bitmapPressed =		 (*(data+dIndex) << 8) + *(data+dIndex+1);
 8005324:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005328:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800532c:	4413      	add	r3, r2
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	b29b      	uxth	r3, r3
 8005332:	021b      	lsls	r3, r3, #8
 8005334:	b29a      	uxth	r2, r3
 8005336:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800533a:	3301      	adds	r3, #1
 800533c:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 8005340:	440b      	add	r3, r1
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	b29b      	uxth	r3, r3
 8005346:	4413      	add	r3, r2
 8005348:	f8a7 30cc 	strh.w	r3, [r7, #204]	; 0xcc
		dIndex += 2;
 800534c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005350:	3302      	adds	r3, #2
 8005352:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
		uint16_t scaling = 	 		 	 (*(data+dIndex) << 8) + *(data+dIndex+1);
 8005356:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800535a:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800535e:	4413      	add	r3, r2
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	b29b      	uxth	r3, r3
 8005364:	021b      	lsls	r3, r3, #8
 8005366:	b29a      	uxth	r2, r3
 8005368:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800536c:	3301      	adds	r3, #1
 800536e:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 8005372:	440b      	add	r3, r1
 8005374:	781b      	ldrb	r3, [r3, #0]
 8005376:	b29b      	uxth	r3, r3
 8005378:	4413      	add	r3, r2
 800537a:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
		dIndex += 2;
 800537e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005382:	3302      	adds	r3, #2
 8005384:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

		int maxPixels = MAX_BITMAP_DRAW_XSIZE*MAX_BITMAP_DRAW_YSIZE;
 8005388:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800538c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
		uint16_t pixelBuffer[maxPixels];
 8005390:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8005394:	1e4b      	subs	r3, r1, #1
 8005396:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800539a:	460a      	mov	r2, r1
 800539c:	2300      	movs	r3, #0
 800539e:	623a      	str	r2, [r7, #32]
 80053a0:	627b      	str	r3, [r7, #36]	; 0x24
 80053a2:	f04f 0200 	mov.w	r2, #0
 80053a6:	f04f 0300 	mov.w	r3, #0
 80053aa:	e9d7 9a08 	ldrd	r9, sl, [r7, #32]
 80053ae:	4650      	mov	r0, sl
 80053b0:	0103      	lsls	r3, r0, #4
 80053b2:	4648      	mov	r0, r9
 80053b4:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 80053b8:	4648      	mov	r0, r9
 80053ba:	0102      	lsls	r2, r0, #4
 80053bc:	460a      	mov	r2, r1
 80053be:	2300      	movs	r3, #0
 80053c0:	61ba      	str	r2, [r7, #24]
 80053c2:	61fb      	str	r3, [r7, #28]
 80053c4:	f04f 0200 	mov.w	r2, #0
 80053c8:	f04f 0300 	mov.w	r3, #0
 80053cc:	e9d7 9a06 	ldrd	r9, sl, [r7, #24]
 80053d0:	4650      	mov	r0, sl
 80053d2:	0103      	lsls	r3, r0, #4
 80053d4:	4648      	mov	r0, r9
 80053d6:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 80053da:	4648      	mov	r0, r9
 80053dc:	0102      	lsls	r2, r0, #4
 80053de:	460b      	mov	r3, r1
 80053e0:	005b      	lsls	r3, r3, #1
 80053e2:	3307      	adds	r3, #7
 80053e4:	08db      	lsrs	r3, r3, #3
 80053e6:	00db      	lsls	r3, r3, #3
 80053e8:	ebad 0d03 	sub.w	sp, sp, r3
 80053ec:	ab06      	add	r3, sp, #24
 80053ee:	3301      	adds	r3, #1
 80053f0:	085b      	lsrs	r3, r3, #1
 80053f2:	005b      	lsls	r3, r3, #1
 80053f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
		struct bitmap bitmapHeader;
		int pixelsGotten;
		if(state==0){
 80053f8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d10d      	bne.n	800541c <drawObjectToLcd+0x5d0>
			pixelsGotten = fetchBitmap(bitmapUnpressed, &bitmapHeader, pixelBuffer, maxPixels);
 8005400:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005404:	b29b      	uxth	r3, r3
 8005406:	f107 0154 	add.w	r1, r7, #84	; 0x54
 800540a:	f8b7 00ce 	ldrh.w	r0, [r7, #206]	; 0xce
 800540e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005412:	f7fc fe3f 	bl	8002094 <fetchBitmap>
 8005416:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100
 800541a:	e00c      	b.n	8005436 <drawObjectToLcd+0x5ea>
		}
		else{
			pixelsGotten = fetchBitmap(bitmapPressed, &bitmapHeader, pixelBuffer, maxPixels);
 800541c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005420:	b29b      	uxth	r3, r3
 8005422:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8005426:	f8b7 00cc 	ldrh.w	r0, [r7, #204]	; 0xcc
 800542a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800542e:	f7fc fe31 	bl	8002094 <fetchBitmap>
 8005432:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100
		}

		if(objectXSize != bitmapHeader.xsize*scaling || objectYSize != bitmapHeader.ysize*scaling){
 8005436:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800543a:	461a      	mov	r2, r3
 800543c:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8005440:	fb02 f303 	mul.w	r3, r2, r3
 8005444:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8005448:	429a      	cmp	r2, r3
 800544a:	d10a      	bne.n	8005462 <drawObjectToLcd+0x616>
 800544c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8005450:	461a      	mov	r2, r3
 8005452:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8005456:	fb02 f303 	mul.w	r3, r2, r3
 800545a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800545e:	429a      	cmp	r2, r3
 8005460:	d014      	beq.n	800548c <drawObjectToLcd+0x640>
			printf("[OV] Warning: Scaled bitmap and (page)button (id %d) size mismatch! Object is %d x %d, bitmap is %d x %d scaled by factor of %d.\n\r",o.objectId, objectXSize, objectYSize, bitmapHeader.xsize, bitmapHeader.ysize, scaling);
 8005462:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005464:	4618      	mov	r0, r3
 8005466:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800546a:	461a      	mov	r2, r3
 800546c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8005470:	4619      	mov	r1, r3
 8005472:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8005476:	9302      	str	r3, [sp, #8]
 8005478:	9101      	str	r1, [sp, #4]
 800547a:	9200      	str	r2, [sp, #0]
 800547c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005480:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8005484:	4601      	mov	r1, r0
 8005486:	4853      	ldr	r0, [pc, #332]	; (80055d4 <drawObjectToLcd+0x788>)
 8005488:	f005 fbd8 	bl	800ac3c <iprintf>
		}

		drawBitmapToLcd(o.xstart, o.ystart, bitmapHeader, pixelBuffer, pixelsGotten, scaling);
 800548c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800548e:	4618      	mov	r0, r3
 8005490:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005492:	4619      	mov	r1, r3
 8005494:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005498:	b29b      	uxth	r3, r3
 800549a:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	; 0xca
 800549e:	9202      	str	r2, [sp, #8]
 80054a0:	9301      	str	r3, [sp, #4]
 80054a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80054a6:	9300      	str	r3, [sp, #0]
 80054a8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80054ac:	cb0c      	ldmia	r3, {r2, r3}
 80054ae:	f000 fae1 	bl	8005a74 <drawBitmapToLcd>

		if(expectedChars > 0){
 80054b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	f340 80d2 	ble.w	8005660 <drawObjectToLcd+0x814>
 80054bc:	466b      	mov	r3, sp
 80054be:	4699      	mov	r9, r3
			uint8_t xoffset =			*(data + dIndex++);
 80054c0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80054c4:	1c5a      	adds	r2, r3, #1
 80054c6:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 80054ca:	461a      	mov	r2, r3
 80054cc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80054d0:	4413      	add	r3, r2
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
			uint8_t yoffset =			*(data + dIndex++);
 80054d8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80054dc:	1c5a      	adds	r2, r3, #1
 80054de:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 80054e2:	461a      	mov	r2, r3
 80054e4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80054e8:	4413      	add	r3, r2
 80054ea:	781b      	ldrb	r3, [r3, #0]
 80054ec:	f887 30ba 	strb.w	r3, [r7, #186]	; 0xba
			uint8_t pixelScaling =		*(data + dIndex++);
 80054f0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80054f4:	1c5a      	adds	r2, r3, #1
 80054f6:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 80054fa:	461a      	mov	r2, r3
 80054fc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005500:	4413      	add	r3, r2
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	f887 30b9 	strb.w	r3, [r7, #185]	; 0xb9
			uint8_t hSpace =			*(data + dIndex++);
 8005508:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800550c:	1c5a      	adds	r2, r3, #1
 800550e:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 8005512:	461a      	mov	r2, r3
 8005514:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005518:	4413      	add	r3, r2
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	f887 30b8 	strb.w	r3, [r7, #184]	; 0xb8
			uint8_t vSpace =			*(data + dIndex++);
 8005520:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005524:	1c5a      	adds	r2, r3, #1
 8005526:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 800552a:	461a      	mov	r2, r3
 800552c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005530:	4413      	add	r3, r2
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
			uint16_t textColor = (*(data+dIndex) << 8) + *(data+dIndex+1);
 8005538:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800553c:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8005540:	4413      	add	r3, r2
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	b29b      	uxth	r3, r3
 8005546:	021b      	lsls	r3, r3, #8
 8005548:	b29a      	uxth	r2, r3
 800554a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800554e:	3301      	adds	r3, #1
 8005550:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 8005554:	440b      	add	r3, r1
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	b29b      	uxth	r3, r3
 800555a:	4413      	add	r3, r2
 800555c:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
			dIndex += 2;
 8005560:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005564:	3302      	adds	r3, #2
 8005566:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
			char textString[expectedChars + 1];
 800556a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800556e:	1c59      	adds	r1, r3, #1
 8005570:	1e4b      	subs	r3, r1, #1
 8005572:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005576:	460a      	mov	r2, r1
 8005578:	2300      	movs	r3, #0
 800557a:	613a      	str	r2, [r7, #16]
 800557c:	617b      	str	r3, [r7, #20]
 800557e:	f04f 0200 	mov.w	r2, #0
 8005582:	f04f 0300 	mov.w	r3, #0
 8005586:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800558a:	4658      	mov	r0, fp
 800558c:	00c3      	lsls	r3, r0, #3
 800558e:	4650      	mov	r0, sl
 8005590:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8005594:	4650      	mov	r0, sl
 8005596:	00c2      	lsls	r2, r0, #3
 8005598:	460a      	mov	r2, r1
 800559a:	2300      	movs	r3, #0
 800559c:	4615      	mov	r5, r2
 800559e:	461e      	mov	r6, r3
 80055a0:	f04f 0200 	mov.w	r2, #0
 80055a4:	f04f 0300 	mov.w	r3, #0
 80055a8:	00f3      	lsls	r3, r6, #3
 80055aa:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 80055ae:	00ea      	lsls	r2, r5, #3
 80055b0:	460b      	mov	r3, r1
 80055b2:	3307      	adds	r3, #7
 80055b4:	08db      	lsrs	r3, r3, #3
 80055b6:	00db      	lsls	r3, r3, #3
 80055b8:	ebad 0d03 	sub.w	sp, sp, r3
 80055bc:	ab06      	add	r3, sp, #24
 80055be:	3300      	adds	r3, #0
 80055c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			int i;
			for(i = 0; i<expectedChars;i++){
 80055c4:	2300      	movs	r3, #0
 80055c6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80055ca:	e01b      	b.n	8005604 <drawObjectToLcd+0x7b8>
 80055cc:	0800d174 	.word	0x0800d174
 80055d0:	0800d1d0 	.word	0x0800d1d0
 80055d4:	0800d258 	.word	0x0800d258
				textString[i] = *(data + dIndex++);
 80055d8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80055dc:	1c5a      	adds	r2, r3, #1
 80055de:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 80055e2:	461a      	mov	r2, r3
 80055e4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80055e8:	4413      	add	r3, r2
 80055ea:	7819      	ldrb	r1, [r3, #0]
 80055ec:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80055f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055f4:	4413      	add	r3, r2
 80055f6:	460a      	mov	r2, r1
 80055f8:	701a      	strb	r2, [r3, #0]
			for(i = 0; i<expectedChars;i++){
 80055fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055fe:	3301      	adds	r3, #1
 8005600:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005604:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8005608:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800560c:	429a      	cmp	r2, r3
 800560e:	dbe3      	blt.n	80055d8 <drawObjectToLcd+0x78c>
			}
			textString[expectedChars] = 0;
 8005610:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005614:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005618:	4413      	add	r3, r2
 800561a:	2200      	movs	r2, #0
 800561c:	701a      	strb	r2, [r3, #0]
			drawStringToLcd5x7(o.xstart+xoffset, o.ystart+yoffset, pixelScaling, textColor, 0, 0x0000, hSpace, vSpace, textString);
 800561e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005620:	461a      	mov	r2, r3
 8005622:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8005626:	18d0      	adds	r0, r2, r3
 8005628:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800562a:	461a      	mov	r2, r3
 800562c:	f897 30ba 	ldrb.w	r3, [r7, #186]	; 0xba
 8005630:	18d4      	adds	r4, r2, r3
 8005632:	f897 50b9 	ldrb.w	r5, [r7, #185]	; 0xb9
 8005636:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
 800563a:	f897 20b7 	ldrb.w	r2, [r7, #183]	; 0xb7
 800563e:	f8b7 60b4 	ldrh.w	r6, [r7, #180]	; 0xb4
 8005642:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8005646:	9104      	str	r1, [sp, #16]
 8005648:	9203      	str	r2, [sp, #12]
 800564a:	9302      	str	r3, [sp, #8]
 800564c:	2300      	movs	r3, #0
 800564e:	9301      	str	r3, [sp, #4]
 8005650:	2300      	movs	r3, #0
 8005652:	9300      	str	r3, [sp, #0]
 8005654:	4633      	mov	r3, r6
 8005656:	462a      	mov	r2, r5
 8005658:	4621      	mov	r1, r4
 800565a:	f000 fa8b 	bl	8005b74 <drawStringToLcd5x7>
 800565e:	46cd      	mov	sp, r9
 8005660:	46c5      	mov	sp, r8
	else if(o.objectType == button || o.objectType == screenbutton){
 8005662:	e0bb      	b.n	80057dc <drawObjectToLcd+0x990>
		}

	}else if (o.objectType == slider)
 8005664:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8005668:	2b06      	cmp	r3, #6
 800566a:	f040 80a7 	bne.w	80057bc <drawObjectToLcd+0x970>
	{
 800566e:	466b      	mov	r3, sp
 8005670:	461c      	mov	r4, r3
		uint16_t dIndex = 0;
 8005672:	2300      	movs	r3, #0
 8005674:	f8a7 30ec 	strh.w	r3, [r7, #236]	; 0xec
		uint8_t  bitmap_number = *(data + dIndex++);
 8005678:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	; 0xec
 800567c:	1c5a      	adds	r2, r3, #1
 800567e:	f8a7 20ec 	strh.w	r2, [r7, #236]	; 0xec
 8005682:	461a      	mov	r2, r3
 8005684:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005688:	4413      	add	r3, r2
 800568a:	781b      	ldrb	r3, [r3, #0]
 800568c:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
		//uint8_t  color = *(data + dIndex++);
		uint8_t  default_value =  *(data + dIndex++);
 8005690:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	; 0xec
 8005694:	1c5a      	adds	r2, r3, #1
 8005696:	f8a7 20ec 	strh.w	r2, [r7, #236]	; 0xec
 800569a:	461a      	mov	r2, r3
 800569c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80056a0:	4413      	add	r3, r2
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	f887 30ea 	strb.w	r3, [r7, #234]	; 0xea
		uint8_t scaling = *(data + dIndex++);
 80056a8:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	; 0xec
 80056ac:	1c5a      	adds	r2, r3, #1
 80056ae:	f8a7 20ec 	strh.w	r2, [r7, #236]	; 0xec
 80056b2:	461a      	mov	r2, r3
 80056b4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80056b8:	4413      	add	r3, r2
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	f887 30e9 	strb.w	r3, [r7, #233]	; 0xe9
		uint8_t color = (*(data+dIndex) << 8) + *(data+dIndex+1);
 80056c0:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	; 0xec
 80056c4:	3301      	adds	r3, #1
 80056c6:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80056ca:	4413      	add	r3, r2
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	f887 30e8 	strb.w	r3, [r7, #232]	; 0xe8
		printf("Slider values: %d %d %d %d %d \n\r",o.xend,o.xstart,o.yend,o.ystart,o.xstart);
 80056d2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80056d6:	4619      	mov	r1, r3
 80056d8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80056da:	4618      	mov	r0, r3
 80056dc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80056e0:	461d      	mov	r5, r3
 80056e2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80056e4:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80056e6:	9201      	str	r2, [sp, #4]
 80056e8:	9300      	str	r3, [sp, #0]
 80056ea:	462b      	mov	r3, r5
 80056ec:	4602      	mov	r2, r0
 80056ee:	483f      	ldr	r0, [pc, #252]	; (80057ec <drawObjectToLcd+0x9a0>)
 80056f0:	f005 faa4 	bl	800ac3c <iprintf>

		struct bitmap bitmap_header;
		int max_pixels = MAX_BITMAP_DRAW_XSIZE*MAX_BITMAP_DRAW_YSIZE;
 80056f4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80056f8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		uint16_t pixel_buffer[max_pixels];
 80056fc:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8005700:	1e4b      	subs	r3, r1, #1
 8005702:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005706:	460a      	mov	r2, r1
 8005708:	2300      	movs	r3, #0
 800570a:	60ba      	str	r2, [r7, #8]
 800570c:	60fb      	str	r3, [r7, #12]
 800570e:	f04f 0200 	mov.w	r2, #0
 8005712:	f04f 0300 	mov.w	r3, #0
 8005716:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 800571a:	4630      	mov	r0, r6
 800571c:	0103      	lsls	r3, r0, #4
 800571e:	4628      	mov	r0, r5
 8005720:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8005724:	4628      	mov	r0, r5
 8005726:	0102      	lsls	r2, r0, #4
 8005728:	460a      	mov	r2, r1
 800572a:	2300      	movs	r3, #0
 800572c:	603a      	str	r2, [r7, #0]
 800572e:	607b      	str	r3, [r7, #4]
 8005730:	f04f 0200 	mov.w	r2, #0
 8005734:	f04f 0300 	mov.w	r3, #0
 8005738:	e9d7 5600 	ldrd	r5, r6, [r7]
 800573c:	4630      	mov	r0, r6
 800573e:	0103      	lsls	r3, r0, #4
 8005740:	4628      	mov	r0, r5
 8005742:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8005746:	4628      	mov	r0, r5
 8005748:	0102      	lsls	r2, r0, #4
 800574a:	460b      	mov	r3, r1
 800574c:	005b      	lsls	r3, r3, #1
 800574e:	3307      	adds	r3, #7
 8005750:	08db      	lsrs	r3, r3, #3
 8005752:	00db      	lsls	r3, r3, #3
 8005754:	ebad 0d03 	sub.w	sp, sp, r3
 8005758:	ab06      	add	r3, sp, #24
 800575a:	3301      	adds	r3, #1
 800575c:	085b      	lsrs	r3, r3, #1
 800575e:	005b      	lsls	r3, r3, #1
 8005760:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		int pixel_gotten = fetchBitmap(7, &bitmap_header, pixel_buffer, max_pixels);
 8005764:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005768:	b29b      	uxth	r3, r3
 800576a:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800576e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005772:	2007      	movs	r0, #7
 8005774:	f7fc fc8e 	bl	8002094 <fetchBitmap>
 8005778:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
		int slider_value = drawSlider(o.xstart, o.ystart, bitmap_header, pixel_buffer,pixel_gotten, 1, state,BLACK); //TODO change the scaling
 800577c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800577e:	4618      	mov	r0, r3
 8005780:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005782:	461d      	mov	r5, r3
 8005784:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005788:	b29b      	uxth	r3, r3
 800578a:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800578e:	b292      	uxth	r2, r2
 8005790:	2100      	movs	r1, #0
 8005792:	9104      	str	r1, [sp, #16]
 8005794:	9203      	str	r2, [sp, #12]
 8005796:	2201      	movs	r2, #1
 8005798:	9202      	str	r2, [sp, #8]
 800579a:	9301      	str	r3, [sp, #4]
 800579c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057a0:	9300      	str	r3, [sp, #0]
 80057a2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80057a6:	cb0c      	ldmia	r3, {r2, r3}
 80057a8:	4629      	mov	r1, r5
 80057aa:	f000 f897 	bl	80058dc <drawSlider>
 80057ae:	4603      	mov	r3, r0
 80057b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		return slider_value;
 80057b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80057b8:	46a5      	mov	sp, r4
 80057ba:	e010      	b.n	80057de <drawObjectToLcd+0x992>
	}
	else if (o.objectType == interactivelabel)
 80057bc:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80057c0:	2b07      	cmp	r3, #7
 80057c2:	d103      	bne.n	80057cc <drawObjectToLcd+0x980>
	{
		printf("[OV] Warning: drawObjectToLcd() does nothing for interactivelabel. Call drawInteractiveLabelToLcd() instead.\n\r");
 80057c4:	480a      	ldr	r0, [pc, #40]	; (80057f0 <drawObjectToLcd+0x9a4>)
 80057c6:	f005 fa39 	bl	800ac3c <iprintf>
 80057ca:	e007      	b.n	80057dc <drawObjectToLcd+0x990>
		//do nothing here. Interactivelabels are not visualized on their own, rather, they are redrawn whenever text is sent to them from external processor,
		//using function drawInteractiveLabelToLcd() below
	}
	else{
		printf("[OV] Error: drawObjectToLcd() not implemented for object type [%s]. \n\r", objName);
 80057cc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80057d0:	4619      	mov	r1, r3
 80057d2:	4808      	ldr	r0, [pc, #32]	; (80057f4 <drawObjectToLcd+0x9a8>)
 80057d4:	f005 fa32 	bl	800ac3c <iprintf>
		return 100;
 80057d8:	2364      	movs	r3, #100	; 0x64
 80057da:	e000      	b.n	80057de <drawObjectToLcd+0x992>
	}
	return 0;
 80057dc:	2300      	movs	r3, #0
}
 80057de:	4618      	mov	r0, r3
 80057e0:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80057e4:	46bd      	mov	sp, r7
 80057e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057ea:	bf00      	nop
 80057ec:	0800d2dc 	.word	0x0800d2dc
 80057f0:	0800d300 	.word	0x0800d300
 80057f4:	0800d370 	.word	0x0800d370

080057f8 <drawInteractiveLabelToLcd>:
 * Draws interactive label to lcd. This function is separated from drawObjectToLcd because, unlike other objects, the text that is drawn to interactivelabel is not
 * stored in external memory. Interactive labels are meant for displaying incoming messages from external processor, so this function is only called when data comes
 * from external processor.
 * Data and object are passed same way as when calling drawObjectToLcd. Expects @string to be null-terminated.
 */
void drawInteractiveLabelToLcd(struct object o, uint8_t *data, char *string){
 80057f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057fa:	b08f      	sub	sp, #60	; 0x3c
 80057fc:	af06      	add	r7, sp, #24
 80057fe:	463c      	mov	r4, r7
 8005800:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if(o.dataLen < 8){
 8005804:	89bb      	ldrh	r3, [r7, #12]
 8005806:	2b07      	cmp	r3, #7
 8005808:	d807      	bhi.n	800581a <drawInteractiveLabelToLcd+0x22>
		printf("[OV] Error: Not enough data for drawing interactive label id %d. Got %d, need 8.\n\r", o.objectId , o.dataLen);
 800580a:	887b      	ldrh	r3, [r7, #2]
 800580c:	4619      	mov	r1, r3
 800580e:	89bb      	ldrh	r3, [r7, #12]
 8005810:	461a      	mov	r2, r3
 8005812:	4831      	ldr	r0, [pc, #196]	; (80058d8 <drawInteractiveLabelToLcd+0xe0>)
 8005814:	f005 fa12 	bl	800ac3c <iprintf>
		return;
 8005818:	e05b      	b.n	80058d2 <drawInteractiveLabelToLcd+0xda>
	}
	int dIndex = 0;
 800581a:	2300      	movs	r3, #0
 800581c:	61fb      	str	r3, [r7, #28]
	uint8_t pixelScaling =	*(data + dIndex++);
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	1c5a      	adds	r2, r3, #1
 8005822:	61fa      	str	r2, [r7, #28]
 8005824:	461a      	mov	r2, r3
 8005826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005828:	4413      	add	r3, r2
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	76fb      	strb	r3, [r7, #27]
	uint8_t hSpace = 		*(data + dIndex++);
 800582e:	69fb      	ldr	r3, [r7, #28]
 8005830:	1c5a      	adds	r2, r3, #1
 8005832:	61fa      	str	r2, [r7, #28]
 8005834:	461a      	mov	r2, r3
 8005836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005838:	4413      	add	r3, r2
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	76bb      	strb	r3, [r7, #26]
	uint8_t vSpace = 		*(data + dIndex++);
 800583e:	69fb      	ldr	r3, [r7, #28]
 8005840:	1c5a      	adds	r2, r3, #1
 8005842:	61fa      	str	r2, [r7, #28]
 8005844:	461a      	mov	r2, r3
 8005846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005848:	4413      	add	r3, r2
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	767b      	strb	r3, [r7, #25]
	uint8_t useBg = 		*(data + dIndex++);
 800584e:	69fb      	ldr	r3, [r7, #28]
 8005850:	1c5a      	adds	r2, r3, #1
 8005852:	61fa      	str	r2, [r7, #28]
 8005854:	461a      	mov	r2, r3
 8005856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005858:	4413      	add	r3, r2
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	763b      	strb	r3, [r7, #24]
	uint16_t textColor = 	(*(data + dIndex) << 8) + *(data+dIndex+1);
 800585e:	69fb      	ldr	r3, [r7, #28]
 8005860:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005862:	4413      	add	r3, r2
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	b29b      	uxth	r3, r3
 8005868:	021b      	lsls	r3, r3, #8
 800586a:	b29a      	uxth	r2, r3
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	3301      	adds	r3, #1
 8005870:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005872:	440b      	add	r3, r1
 8005874:	781b      	ldrb	r3, [r3, #0]
 8005876:	b29b      	uxth	r3, r3
 8005878:	4413      	add	r3, r2
 800587a:	82fb      	strh	r3, [r7, #22]
	dIndex += 2;
 800587c:	69fb      	ldr	r3, [r7, #28]
 800587e:	3302      	adds	r3, #2
 8005880:	61fb      	str	r3, [r7, #28]
	uint16_t bgColor = 		(*(data + dIndex) << 8) + *(data+dIndex+1);
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005886:	4413      	add	r3, r2
 8005888:	781b      	ldrb	r3, [r3, #0]
 800588a:	b29b      	uxth	r3, r3
 800588c:	021b      	lsls	r3, r3, #8
 800588e:	b29a      	uxth	r2, r3
 8005890:	69fb      	ldr	r3, [r7, #28]
 8005892:	3301      	adds	r3, #1
 8005894:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005896:	440b      	add	r3, r1
 8005898:	781b      	ldrb	r3, [r3, #0]
 800589a:	b29b      	uxth	r3, r3
 800589c:	4413      	add	r3, r2
 800589e:	82bb      	strh	r3, [r7, #20]
	dIndex += 2;
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	3302      	adds	r3, #2
 80058a4:	61fb      	str	r3, [r7, #28]
	drawStringToLcd5x7(o.xstart, o.ystart, pixelScaling, textColor, useBg, bgColor, hSpace, vSpace, string);
 80058a6:	88bb      	ldrh	r3, [r7, #4]
 80058a8:	461e      	mov	r6, r3
 80058aa:	88fb      	ldrh	r3, [r7, #6]
 80058ac:	469c      	mov	ip, r3
 80058ae:	7efc      	ldrb	r4, [r7, #27]
 80058b0:	7e3b      	ldrb	r3, [r7, #24]
 80058b2:	7eba      	ldrb	r2, [r7, #26]
 80058b4:	7e79      	ldrb	r1, [r7, #25]
 80058b6:	8afd      	ldrh	r5, [r7, #22]
 80058b8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80058ba:	9004      	str	r0, [sp, #16]
 80058bc:	9103      	str	r1, [sp, #12]
 80058be:	9202      	str	r2, [sp, #8]
 80058c0:	8aba      	ldrh	r2, [r7, #20]
 80058c2:	9201      	str	r2, [sp, #4]
 80058c4:	9300      	str	r3, [sp, #0]
 80058c6:	462b      	mov	r3, r5
 80058c8:	4622      	mov	r2, r4
 80058ca:	4661      	mov	r1, ip
 80058cc:	4630      	mov	r0, r6
 80058ce:	f000 f951 	bl	8005b74 <drawStringToLcd5x7>
}
 80058d2:	3724      	adds	r7, #36	; 0x24
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058d8:	0800d3b8 	.word	0x0800d3b8

080058dc <drawSlider>:

/*
 * Draw a slider using bitmaps stored in memmory
 */
uint16_t drawSlider(int x_start, int y_start, struct bitmap bitmap_header, uint16_t *pixelBuffer, uint16_t pixelCount, uint16_t scaling, uint16_t value, uint16_t color)
{
 80058dc:	b590      	push	{r4, r7, lr}
 80058de:	b08d      	sub	sp, #52	; 0x34
 80058e0:	af04      	add	r7, sp, #16
 80058e2:	60f8      	str	r0, [r7, #12]
 80058e4:	60b9      	str	r1, [r7, #8]
 80058e6:	4639      	mov	r1, r7
 80058e8:	e881 000c 	stmia.w	r1, {r2, r3}
	//change the colors in the bitmap
	//draw a slider
	drawBitmapToLcd((int)x_start,(int)y_start, bitmap_header, pixelBuffer, pixelCount,scaling);
 80058ec:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80058ee:	9302      	str	r3, [sp, #8]
 80058f0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80058f2:	9301      	str	r3, [sp, #4]
 80058f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f6:	9300      	str	r3, [sp, #0]
 80058f8:	463b      	mov	r3, r7
 80058fa:	cb0c      	ldmia	r3, {r2, r3}
 80058fc:	68b9      	ldr	r1, [r7, #8]
 80058fe:	68f8      	ldr	r0, [r7, #12]
 8005900:	f000 f8b8 	bl	8005a74 <drawBitmapToLcd>

	uint16_t x_max = x_start + (20 +  (uint16_t)((bitmap_header.xsize) - (62)))* scaling;
 8005904:	887b      	ldrh	r3, [r7, #2]
 8005906:	3b2a      	subs	r3, #42	; 0x2a
 8005908:	b29b      	uxth	r3, r3
 800590a:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800590c:	fb12 f303 	smulbb	r3, r2, r3
 8005910:	b29a      	uxth	r2, r3
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	b29b      	uxth	r3, r3
 8005916:	4413      	add	r3, r2
 8005918:	837b      	strh	r3, [r7, #26]
	uint16_t x_min = x_start + (20 * scaling);
 800591a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800591c:	461a      	mov	r2, r3
 800591e:	0092      	lsls	r2, r2, #2
 8005920:	4413      	add	r3, r2
 8005922:	009b      	lsls	r3, r3, #2
 8005924:	b29a      	uxth	r2, r3
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	b29b      	uxth	r3, r3
 800592a:	4413      	add	r3, r2
 800592c:	833b      	strh	r3, [r7, #24]
	uint16_t x_pointer = 0;
 800592e:	2300      	movs	r3, #0
 8005930:	83fb      	strh	r3, [r7, #30]


	if (value <= x_min)
 8005932:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8005934:	8b3b      	ldrh	r3, [r7, #24]
 8005936:	429a      	cmp	r2, r3
 8005938:	d824      	bhi.n	8005984 <drawSlider+0xa8>
	{
		uint16_t y_pointer = y_start  + (uint16_t)(bitmap_header.ysize * scaling) /3;
 800593a:	88bb      	ldrh	r3, [r7, #4]
 800593c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800593e:	fb12 f303 	smulbb	r3, r2, r3
 8005942:	b29b      	uxth	r3, r3
 8005944:	4a4a      	ldr	r2, [pc, #296]	; (8005a70 <drawSlider+0x194>)
 8005946:	fba2 2303 	umull	r2, r3, r2, r3
 800594a:	085b      	lsrs	r3, r3, #1
 800594c:	b29a      	uxth	r2, r3
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	b29b      	uxth	r3, r3
 8005952:	4413      	add	r3, r2
 8005954:	827b      	strh	r3, [r7, #18]
		x_pointer = x_min;
 8005956:	8b3b      	ldrh	r3, [r7, #24]
 8005958:	83fb      	strh	r3, [r7, #30]
		LCD_fillRect(x_pointer, y_pointer, 20*scaling, 20*scaling, color);
 800595a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800595c:	461a      	mov	r2, r3
 800595e:	0092      	lsls	r2, r2, #2
 8005960:	4413      	add	r3, r2
 8005962:	009b      	lsls	r3, r3, #2
 8005964:	b29a      	uxth	r2, r3
 8005966:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005968:	4619      	mov	r1, r3
 800596a:	0089      	lsls	r1, r1, #2
 800596c:	440b      	add	r3, r1
 800596e:	009b      	lsls	r3, r3, #2
 8005970:	b29c      	uxth	r4, r3
 8005972:	8a79      	ldrh	r1, [r7, #18]
 8005974:	8bf8      	ldrh	r0, [r7, #30]
 8005976:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800597a:	9300      	str	r3, [sp, #0]
 800597c:	4623      	mov	r3, r4
 800597e:	f7fb f925 	bl	8000bcc <LCD_fillRect>
 8005982:	e054      	b.n	8005a2e <drawSlider+0x152>
		//uint16_t x_pointer = x_start+ (20 +  (uint16_t)((bitmap_header.xsize) - (62))*(value/100)) * scaling;
	}else if (value >= x_max)
 8005984:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8005986:	8b7b      	ldrh	r3, [r7, #26]
 8005988:	429a      	cmp	r2, r3
 800598a:	d324      	bcc.n	80059d6 <drawSlider+0xfa>
	{
		uint16_t y_pointer = y_start  + (uint16_t)(bitmap_header.ysize * scaling) /3;
 800598c:	88bb      	ldrh	r3, [r7, #4]
 800598e:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8005990:	fb12 f303 	smulbb	r3, r2, r3
 8005994:	b29b      	uxth	r3, r3
 8005996:	4a36      	ldr	r2, [pc, #216]	; (8005a70 <drawSlider+0x194>)
 8005998:	fba2 2303 	umull	r2, r3, r2, r3
 800599c:	085b      	lsrs	r3, r3, #1
 800599e:	b29a      	uxth	r2, r3
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	4413      	add	r3, r2
 80059a6:	82bb      	strh	r3, [r7, #20]
		x_pointer = x_max;
 80059a8:	8b7b      	ldrh	r3, [r7, #26]
 80059aa:	83fb      	strh	r3, [r7, #30]
		LCD_fillRect(x_pointer ,y_pointer, 20*scaling, 20*scaling, color);
 80059ac:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80059ae:	461a      	mov	r2, r3
 80059b0:	0092      	lsls	r2, r2, #2
 80059b2:	4413      	add	r3, r2
 80059b4:	009b      	lsls	r3, r3, #2
 80059b6:	b29a      	uxth	r2, r3
 80059b8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80059ba:	4619      	mov	r1, r3
 80059bc:	0089      	lsls	r1, r1, #2
 80059be:	440b      	add	r3, r1
 80059c0:	009b      	lsls	r3, r3, #2
 80059c2:	b29c      	uxth	r4, r3
 80059c4:	8ab9      	ldrh	r1, [r7, #20]
 80059c6:	8bf8      	ldrh	r0, [r7, #30]
 80059c8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80059cc:	9300      	str	r3, [sp, #0]
 80059ce:	4623      	mov	r3, r4
 80059d0:	f7fb f8fc 	bl	8000bcc <LCD_fillRect>
 80059d4:	e02b      	b.n	8005a2e <drawSlider+0x152>
	}else if (value > x_min && value < x_max)
 80059d6:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80059d8:	8b3b      	ldrh	r3, [r7, #24]
 80059da:	429a      	cmp	r2, r3
 80059dc:	d927      	bls.n	8005a2e <drawSlider+0x152>
 80059de:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80059e0:	8b7b      	ldrh	r3, [r7, #26]
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d223      	bcs.n	8005a2e <drawSlider+0x152>
	{
		x_pointer = value;
 80059e6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80059e8:	83fb      	strh	r3, [r7, #30]
		uint16_t y_pointer = y_start  + (uint16_t)(bitmap_header.ysize * scaling) /3;
 80059ea:	88bb      	ldrh	r3, [r7, #4]
 80059ec:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80059ee:	fb12 f303 	smulbb	r3, r2, r3
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	4a1e      	ldr	r2, [pc, #120]	; (8005a70 <drawSlider+0x194>)
 80059f6:	fba2 2303 	umull	r2, r3, r2, r3
 80059fa:	085b      	lsrs	r3, r3, #1
 80059fc:	b29a      	uxth	r2, r3
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	4413      	add	r3, r2
 8005a04:	82fb      	strh	r3, [r7, #22]
		LCD_fillRect(x_pointer, y_pointer, 20*scaling, 20*scaling, color);
 8005a06:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005a08:	461a      	mov	r2, r3
 8005a0a:	0092      	lsls	r2, r2, #2
 8005a0c:	4413      	add	r3, r2
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	b29a      	uxth	r2, r3
 8005a12:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005a14:	4619      	mov	r1, r3
 8005a16:	0089      	lsls	r1, r1, #2
 8005a18:	440b      	add	r3, r1
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	b29c      	uxth	r4, r3
 8005a1e:	8af9      	ldrh	r1, [r7, #22]
 8005a20:	8bf8      	ldrh	r0, [r7, #30]
 8005a22:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005a26:	9300      	str	r3, [sp, #0]
 8005a28:	4623      	mov	r3, r4
 8005a2a:	f7fb f8cf 	bl	8000bcc <LCD_fillRect>
	}
	uint16_t x_percent = (uint16_t) (100 * (x_pointer+20)/((bitmap_header.xsize -62) * scaling)) -35;
 8005a2e:	8bfb      	ldrh	r3, [r7, #30]
 8005a30:	3314      	adds	r3, #20
 8005a32:	2264      	movs	r2, #100	; 0x64
 8005a34:	fb03 f202 	mul.w	r2, r3, r2
 8005a38:	887b      	ldrh	r3, [r7, #2]
 8005a3a:	3b3e      	subs	r3, #62	; 0x3e
 8005a3c:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 8005a3e:	fb01 f303 	mul.w	r3, r1, r3
 8005a42:	fb92 f3f3 	sdiv	r3, r2, r3
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	3b23      	subs	r3, #35	; 0x23
 8005a4a:	83bb      	strh	r3, [r7, #28]
	if (x_percent > 100)
 8005a4c:	8bbb      	ldrh	r3, [r7, #28]
 8005a4e:	2b64      	cmp	r3, #100	; 0x64
 8005a50:	d902      	bls.n	8005a58 <drawSlider+0x17c>
	{
		x_percent = 100;
 8005a52:	2364      	movs	r3, #100	; 0x64
 8005a54:	83bb      	strh	r3, [r7, #28]
 8005a56:	e005      	b.n	8005a64 <drawSlider+0x188>
	}else if (x_percent > 500)
 8005a58:	8bbb      	ldrh	r3, [r7, #28]
 8005a5a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005a5e:	d901      	bls.n	8005a64 <drawSlider+0x188>
	{
		x_percent = 0;
 8005a60:	2300      	movs	r3, #0
 8005a62:	83bb      	strh	r3, [r7, #28]
	}
	return x_percent;
 8005a64:	8bbb      	ldrh	r3, [r7, #28]

}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3724      	adds	r7, #36	; 0x24
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd90      	pop	{r4, r7, pc}
 8005a6e:	bf00      	nop
 8005a70:	aaaaaaab 	.word	0xaaaaaaab

08005a74 <drawBitmapToLcd>:
/*
 * Draws first @pixelCount pixels of a bitmap to lcd starting at xstart ystart, using provided buffer of pixels and scaling.
 */
void drawBitmapToLcd(int xstart, int ystart, struct bitmap bitmapHeader, uint16_t *pixelBuffer, uint16_t pixelCount, uint16_t scaling){
 8005a74:	b590      	push	{r4, r7, lr}
 8005a76:	b08d      	sub	sp, #52	; 0x34
 8005a78:	af02      	add	r7, sp, #8
 8005a7a:	60f8      	str	r0, [r7, #12]
 8005a7c:	60b9      	str	r1, [r7, #8]
 8005a7e:	4639      	mov	r1, r7
 8005a80:	e881 000c 	stmia.w	r1, {r2, r3}
	uint16_t pixelIndex = 0;
 8005a84:	2300      	movs	r3, #0
 8005a86:	84fb      	strh	r3, [r7, #38]	; 0x26
	int xpos = xstart;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	623b      	str	r3, [r7, #32]
	int ypos = ystart;
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	61fb      	str	r3, [r7, #28]
	printf("[OV] Drawing bitmap at [%d , %d], %d pixels, scale = %d\n\r", xstart, ystart, pixelCount, scaling);
 8005a90:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8005a92:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005a96:	9300      	str	r3, [sp, #0]
 8005a98:	4613      	mov	r3, r2
 8005a9a:	68ba      	ldr	r2, [r7, #8]
 8005a9c:	68f9      	ldr	r1, [r7, #12]
 8005a9e:	4834      	ldr	r0, [pc, #208]	; (8005b70 <drawBitmapToLcd+0xfc>)
 8005aa0:	f005 f8cc 	bl	800ac3c <iprintf>
	while(pixelIndex < pixelCount){
 8005aa4:	e05b      	b.n	8005b5e <drawBitmapToLcd+0xea>
		uint16_t pixelColor = pixelBuffer[pixelIndex];
 8005aa6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005aa8:	005b      	lsls	r3, r3, #1
 8005aaa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005aac:	4413      	add	r3, r2
 8005aae:	881b      	ldrh	r3, [r3, #0]
 8005ab0:	833b      	strh	r3, [r7, #24]
		uint16_t pixel_x_1 = xpos;
 8005ab2:	6a3b      	ldr	r3, [r7, #32]
 8005ab4:	82fb      	strh	r3, [r7, #22]
		uint16_t pixel_y_1 = ypos;
 8005ab6:	69fb      	ldr	r3, [r7, #28]
 8005ab8:	82bb      	strh	r3, [r7, #20]
		uint16_t pixel_x_2 = xpos + scaling;
 8005aba:	6a3b      	ldr	r3, [r7, #32]
 8005abc:	b29a      	uxth	r2, r3
 8005abe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005ac2:	4413      	add	r3, r2
 8005ac4:	837b      	strh	r3, [r7, #26]
		uint16_t pixel_y_2 = ypos + scaling;
 8005ac6:	69fb      	ldr	r3, [r7, #28]
 8005ac8:	b29a      	uxth	r2, r3
 8005aca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005ace:	4413      	add	r3, r2
 8005ad0:	827b      	strh	r3, [r7, #18]
		if(pixel_x_1 >= LCD_PIXEL_WIDTH){
 8005ad2:	8afb      	ldrh	r3, [r7, #22]
 8005ad4:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8005ad8:	d303      	bcc.n	8005ae2 <drawBitmapToLcd+0x6e>
			pixelIndex++;
 8005ada:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005adc:	3301      	adds	r3, #1
 8005ade:	84fb      	strh	r3, [r7, #38]	; 0x26
			continue;
 8005ae0:	e03d      	b.n	8005b5e <drawBitmapToLcd+0xea>
		}
		if(pixel_y_1 >= LCD_PIXEL_HEIGHT){
 8005ae2:	8abb      	ldrh	r3, [r7, #20]
 8005ae4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005ae8:	d23e      	bcs.n	8005b68 <drawBitmapToLcd+0xf4>
			return;
		}
		if(pixel_x_2 >= LCD_PIXEL_WIDTH){
 8005aea:	8b7b      	ldrh	r3, [r7, #26]
 8005aec:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8005af0:	d302      	bcc.n	8005af8 <drawBitmapToLcd+0x84>
			pixel_x_2 = LCD_PIXEL_WIDTH - 1;
 8005af2:	f240 13df 	movw	r3, #479	; 0x1df
 8005af6:	837b      	strh	r3, [r7, #26]
		}
		if(pixel_y_2 >= LCD_PIXEL_HEIGHT){
 8005af8:	8a7b      	ldrh	r3, [r7, #18]
 8005afa:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005afe:	d302      	bcc.n	8005b06 <drawBitmapToLcd+0x92>
			pixel_x_2 = LCD_PIXEL_HEIGHT - 1;
 8005b00:	f240 133f 	movw	r3, #319	; 0x13f
 8005b04:	837b      	strh	r3, [r7, #26]
		}
		if(pixelColor!=TRANSPARENT){
 8005b06:	8b3b      	ldrh	r3, [r7, #24]
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d00f      	beq.n	8005b2c <drawBitmapToLcd+0xb8>
			LCD_fillRect(pixel_x_1, pixel_y_1, pixel_x_2-pixel_x_1, pixel_y_2 - pixel_y_1, pixelColor);
 8005b0c:	8b7a      	ldrh	r2, [r7, #26]
 8005b0e:	8afb      	ldrh	r3, [r7, #22]
 8005b10:	1ad3      	subs	r3, r2, r3
 8005b12:	b29c      	uxth	r4, r3
 8005b14:	8a7a      	ldrh	r2, [r7, #18]
 8005b16:	8abb      	ldrh	r3, [r7, #20]
 8005b18:	1ad3      	subs	r3, r2, r3
 8005b1a:	b29a      	uxth	r2, r3
 8005b1c:	8ab9      	ldrh	r1, [r7, #20]
 8005b1e:	8af8      	ldrh	r0, [r7, #22]
 8005b20:	8b3b      	ldrh	r3, [r7, #24]
 8005b22:	9300      	str	r3, [sp, #0]
 8005b24:	4613      	mov	r3, r2
 8005b26:	4622      	mov	r2, r4
 8005b28:	f7fb f850 	bl	8000bcc <LCD_fillRect>
		}
		//printf("%04x @ [%d %d]\n\r", pixelColor, pixel_x_1, pixel_y_1);
		xpos+=scaling;
 8005b2c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005b30:	6a3a      	ldr	r2, [r7, #32]
 8005b32:	4413      	add	r3, r2
 8005b34:	623b      	str	r3, [r7, #32]
		pixelIndex++;
 8005b36:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005b38:	3301      	adds	r3, #1
 8005b3a:	84fb      	strh	r3, [r7, #38]	; 0x26
		if(pixelIndex % bitmapHeader.xsize==0){
 8005b3c:	887a      	ldrh	r2, [r7, #2]
 8005b3e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005b40:	fbb3 f1f2 	udiv	r1, r3, r2
 8005b44:	fb01 f202 	mul.w	r2, r1, r2
 8005b48:	1a9b      	subs	r3, r3, r2
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d106      	bne.n	8005b5e <drawBitmapToLcd+0xea>
			xpos = xstart;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	623b      	str	r3, [r7, #32]
			ypos += scaling;
 8005b54:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005b58:	69fa      	ldr	r2, [r7, #28]
 8005b5a:	4413      	add	r3, r2
 8005b5c:	61fb      	str	r3, [r7, #28]
	while(pixelIndex < pixelCount){
 8005b5e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005b60:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d39f      	bcc.n	8005aa6 <drawBitmapToLcd+0x32>
 8005b66:	e000      	b.n	8005b6a <drawBitmapToLcd+0xf6>
			return;
 8005b68:	bf00      	nop
		}
	}
}
 8005b6a:	372c      	adds	r7, #44	; 0x2c
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd90      	pop	{r4, r7, pc}
 8005b70:	0800d40c 	.word	0x0800d40c

08005b74 <drawStringToLcd5x7>:
 * (example - if pixelscaling == 5, a single char will occupy 25x40 pixels on the LCD). If useBackground is 1, then
 * background of chars will be filled with bgColor, otherwise, it will be left as-is.
 * hSpacing and vSpacing define the horizontal and vertical separation of chars in lcd pixels (independent of pixelScaling).
 * Newlines in string are treated as newline + cariiage return.
 */
void drawStringToLcd5x7(int x, int y, int pixelScaling, uint16_t textColor, int useBackground, uint16_t bgColor, int hSpacing, int vSpacing, char *string){
 8005b74:	b590      	push	{r4, r7, lr}
 8005b76:	b08d      	sub	sp, #52	; 0x34
 8005b78:	af04      	add	r7, sp, #16
 8005b7a:	60f8      	str	r0, [r7, #12]
 8005b7c:	60b9      	str	r1, [r7, #8]
 8005b7e:	607a      	str	r2, [r7, #4]
 8005b80:	807b      	strh	r3, [r7, #2]

	uint16_t charX = x;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	83fb      	strh	r3, [r7, #30]
	uint16_t charY = y;
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	83bb      	strh	r3, [r7, #28]

	int strIndex = 0;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	61bb      	str	r3, [r7, #24]
	while(1){
		char c = *(string + strIndex++);
 8005b8e:	69bb      	ldr	r3, [r7, #24]
 8005b90:	1c5a      	adds	r2, r3, #1
 8005b92:	61ba      	str	r2, [r7, #24]
 8005b94:	461a      	mov	r2, r3
 8005b96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b98:	4413      	add	r3, r2
 8005b9a:	781b      	ldrb	r3, [r3, #0]
 8005b9c:	75fb      	strb	r3, [r7, #23]
		if(c==0){
 8005b9e:	7dfb      	ldrb	r3, [r7, #23]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d051      	beq.n	8005c48 <drawStringToLcd5x7+0xd4>
			break;
		}
		else if(c=='\r'){ //probably not needed, but just in case
 8005ba4:	7dfb      	ldrb	r3, [r7, #23]
 8005ba6:	2b0d      	cmp	r3, #13
 8005ba8:	d102      	bne.n	8005bb0 <drawStringToLcd5x7+0x3c>
			charX = x;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	83fb      	strh	r3, [r7, #30]
 8005bae:	e7ee      	b.n	8005b8e <drawStringToLcd5x7+0x1a>
		}
		else if(c == '\n'){
 8005bb0:	7dfb      	ldrb	r3, [r7, #23]
 8005bb2:	2b0a      	cmp	r3, #10
 8005bb4:	d10d      	bne.n	8005bd2 <drawStringToLcd5x7+0x5e>
			charX = x;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	83fb      	strh	r3, [r7, #30]
			charY += 8*pixelScaling + vSpacing;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	00db      	lsls	r3, r3, #3
 8005bc0:	b29a      	uxth	r2, r3
 8005bc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	4413      	add	r3, r2
 8005bc8:	b29a      	uxth	r2, r3
 8005bca:	8bbb      	ldrh	r3, [r7, #28]
 8005bcc:	4413      	add	r3, r2
 8005bce:	83bb      	strh	r3, [r7, #28]
 8005bd0:	e7dd      	b.n	8005b8e <drawStringToLcd5x7+0x1a>
		}
		else{ //normal character, presumably.
			if(charY > LCD_PIXEL_HEIGHT){
 8005bd2:	8bbb      	ldrh	r3, [r7, #28]
 8005bd4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005bd8:	d838      	bhi.n	8005c4c <drawStringToLcd5x7+0xd8>
				break;
			}
			if(charX > LCD_PIXEL_WIDTH){
 8005bda:	8bfb      	ldrh	r3, [r7, #30]
 8005bdc:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8005be0:	d830      	bhi.n	8005c44 <drawStringToLcd5x7+0xd0>
				continue; //because there might be a newline later in string
			}
			drawCharToLcd5x7(charX, charY, pixelScaling, textColor, useBackground, bgColor, c);
 8005be2:	8bf8      	ldrh	r0, [r7, #30]
 8005be4:	8bb9      	ldrh	r1, [r7, #28]
 8005be6:	887a      	ldrh	r2, [r7, #2]
 8005be8:	7dfb      	ldrb	r3, [r7, #23]
 8005bea:	9302      	str	r3, [sp, #8]
 8005bec:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005bee:	9301      	str	r3, [sp, #4]
 8005bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf2:	9300      	str	r3, [sp, #0]
 8005bf4:	4613      	mov	r3, r2
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	f000 f82e 	bl	8005c58 <drawCharToLcd5x7>
			charX += 5*pixelScaling;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	461a      	mov	r2, r3
 8005c02:	0092      	lsls	r2, r2, #2
 8005c04:	4413      	add	r3, r2
 8005c06:	b29a      	uxth	r2, r3
 8005c08:	8bfb      	ldrh	r3, [r7, #30]
 8005c0a:	4413      	add	r3, r2
 8005c0c:	83fb      	strh	r3, [r7, #30]
			if(useBackground){
 8005c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d011      	beq.n	8005c38 <drawStringToLcd5x7+0xc4>
				LCD_fillRect(charX, charY, hSpacing, pixelScaling*8 + vSpacing, bgColor);
 8005c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c16:	b29c      	uxth	r4, r3
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	00db      	lsls	r3, r3, #3
 8005c1e:	b29a      	uxth	r2, r3
 8005c20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	4413      	add	r3, r2
 8005c26:	b29a      	uxth	r2, r3
 8005c28:	8bb9      	ldrh	r1, [r7, #28]
 8005c2a:	8bf8      	ldrh	r0, [r7, #30]
 8005c2c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005c2e:	9300      	str	r3, [sp, #0]
 8005c30:	4613      	mov	r3, r2
 8005c32:	4622      	mov	r2, r4
 8005c34:	f7fa ffca 	bl	8000bcc <LCD_fillRect>
			}
			charX += hSpacing;
 8005c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c3a:	b29a      	uxth	r2, r3
 8005c3c:	8bfb      	ldrh	r3, [r7, #30]
 8005c3e:	4413      	add	r3, r2
 8005c40:	83fb      	strh	r3, [r7, #30]
 8005c42:	e7a4      	b.n	8005b8e <drawStringToLcd5x7+0x1a>
				continue; //because there might be a newline later in string
 8005c44:	bf00      	nop
	while(1){
 8005c46:	e7a2      	b.n	8005b8e <drawStringToLcd5x7+0x1a>
			break;
 8005c48:	bf00      	nop
 8005c4a:	e000      	b.n	8005c4e <drawStringToLcd5x7+0xda>
				break;
 8005c4c:	bf00      	nop
		}
	}

}
 8005c4e:	bf00      	nop
 8005c50:	3724      	adds	r7, #36	; 0x24
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd90      	pop	{r4, r7, pc}
	...

08005c58 <drawCharToLcd5x7>:

void drawCharToLcd5x7(int x, int y, int pixelScaling, uint16_t textColor, int useBackground, uint16_t bgColor, char c){
 8005c58:	b590      	push	{r4, r7, lr}
 8005c5a:	b08f      	sub	sp, #60	; 0x3c
 8005c5c:	af02      	add	r7, sp, #8
 8005c5e:	60f8      	str	r0, [r7, #12]
 8005c60:	60b9      	str	r1, [r7, #8]
 8005c62:	607a      	str	r2, [r7, #4]
 8005c64:	807b      	strh	r3, [r7, #2]
	int ascii = (int) c;
 8005c66:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8005c6a:	61fb      	str	r3, [r7, #28]
	char *charFont = font5x7 + (5*ascii);
 8005c6c:	69fa      	ldr	r2, [r7, #28]
 8005c6e:	4613      	mov	r3, r2
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	4413      	add	r3, r2
 8005c74:	461a      	mov	r2, r3
 8005c76:	4b41      	ldr	r3, [pc, #260]	; (8005d7c <drawCharToLcd5x7+0x124>)
 8005c78:	4413      	add	r3, r2
 8005c7a:	61bb      	str	r3, [r7, #24]
	int i;
	//printf("Drawing char %c @ [%d, %d] \n\r", c, x, y);

	//font is stored as columns!
	int column, row;
	for(column = 0; column < 5; column++){
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c80:	e074      	b.n	8005d6c <drawCharToLcd5x7+0x114>
		uint8_t columnByte = *(charFont + column);
 8005c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c84:	69ba      	ldr	r2, [r7, #24]
 8005c86:	4413      	add	r3, r2
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	75fb      	strb	r3, [r7, #23]
		uint8_t mask = 0x01;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		for(row = 0; row < 8; row++){
 8005c92:	2300      	movs	r3, #0
 8005c94:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c96:	e063      	b.n	8005d60 <drawCharToLcd5x7+0x108>
			uint16_t pixelColor = bgColor;
 8005c98:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005c9c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if(columnByte & mask){
 8005c9e:	7dfa      	ldrb	r2, [r7, #23]
 8005ca0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ca4:	4013      	ands	r3, r2
 8005ca6:	b2db      	uxtb	r3, r3
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d002      	beq.n	8005cb2 <drawCharToLcd5x7+0x5a>
				pixelColor = textColor;
 8005cac:	887b      	ldrh	r3, [r7, #2]
 8005cae:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005cb0:	e008      	b.n	8005cc4 <drawCharToLcd5x7+0x6c>
			}
			else{
				if(!useBackground){
 8005cb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d105      	bne.n	8005cc4 <drawCharToLcd5x7+0x6c>
					mask = mask << 1;
 8005cb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005cbc:	005b      	lsls	r3, r3, #1
 8005cbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					continue;
 8005cc2:	e04a      	b.n	8005d5a <drawCharToLcd5x7+0x102>
				}
			}

			uint16_t pixel_x_1 = x + pixelScaling*column;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	b29a      	uxth	r2, r3
 8005cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	fb12 f303 	smulbb	r3, r2, r3
 8005cd0:	b29a      	uxth	r2, r3
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	4413      	add	r3, r2
 8005cd8:	82bb      	strh	r3, [r7, #20]
			uint16_t pixel_y_1 = y + pixelScaling*row;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	b29a      	uxth	r2, r3
 8005cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	fb12 f303 	smulbb	r3, r2, r3
 8005ce6:	b29a      	uxth	r2, r3
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	4413      	add	r3, r2
 8005cee:	827b      	strh	r3, [r7, #18]
			uint16_t pixel_x_2 = pixel_x_1 + pixelScaling;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	b29a      	uxth	r2, r3
 8005cf4:	8abb      	ldrh	r3, [r7, #20]
 8005cf6:	4413      	add	r3, r2
 8005cf8:	847b      	strh	r3, [r7, #34]	; 0x22
			uint16_t pixel_y_2 = pixel_y_1 + pixelScaling;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	b29a      	uxth	r2, r3
 8005cfe:	8a7b      	ldrh	r3, [r7, #18]
 8005d00:	4413      	add	r3, r2
 8005d02:	843b      	strh	r3, [r7, #32]

			if(pixel_x_1 >= LCD_PIXEL_WIDTH || pixel_y_1 >= LCD_PIXEL_HEIGHT){
 8005d04:	8abb      	ldrh	r3, [r7, #20]
 8005d06:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8005d0a:	d22c      	bcs.n	8005d66 <drawCharToLcd5x7+0x10e>
 8005d0c:	8a7b      	ldrh	r3, [r7, #18]
 8005d0e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005d12:	d228      	bcs.n	8005d66 <drawCharToLcd5x7+0x10e>
				break;
			}

			if(pixel_x_2 >= LCD_PIXEL_WIDTH){
 8005d14:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005d16:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8005d1a:	d302      	bcc.n	8005d22 <drawCharToLcd5x7+0xca>
				pixel_x_2 = LCD_PIXEL_WIDTH - 1;
 8005d1c:	f240 13df 	movw	r3, #479	; 0x1df
 8005d20:	847b      	strh	r3, [r7, #34]	; 0x22
			}
			if(pixel_y_2 >= LCD_PIXEL_HEIGHT){
 8005d22:	8c3b      	ldrh	r3, [r7, #32]
 8005d24:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005d28:	d302      	bcc.n	8005d30 <drawCharToLcd5x7+0xd8>
				pixel_y_2 = LCD_PIXEL_HEIGHT - 1;
 8005d2a:	f240 133f 	movw	r3, #319	; 0x13f
 8005d2e:	843b      	strh	r3, [r7, #32]
			}

			LCD_fillRect(pixel_x_1, pixel_y_1, pixel_x_2-pixel_x_1, pixel_y_2 - pixel_y_1, pixelColor);
 8005d30:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8005d32:	8abb      	ldrh	r3, [r7, #20]
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	b29c      	uxth	r4, r3
 8005d38:	8c3a      	ldrh	r2, [r7, #32]
 8005d3a:	8a7b      	ldrh	r3, [r7, #18]
 8005d3c:	1ad3      	subs	r3, r2, r3
 8005d3e:	b29a      	uxth	r2, r3
 8005d40:	8a79      	ldrh	r1, [r7, #18]
 8005d42:	8ab8      	ldrh	r0, [r7, #20]
 8005d44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005d46:	9300      	str	r3, [sp, #0]
 8005d48:	4613      	mov	r3, r2
 8005d4a:	4622      	mov	r2, r4
 8005d4c:	f7fa ff3e 	bl	8000bcc <LCD_fillRect>
			mask = mask << 1;
 8005d50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d54:	005b      	lsls	r3, r3, #1
 8005d56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		for(row = 0; row < 8; row++){
 8005d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d5c:	3301      	adds	r3, #1
 8005d5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d62:	2b07      	cmp	r3, #7
 8005d64:	dd98      	ble.n	8005c98 <drawCharToLcd5x7+0x40>
	for(column = 0; column < 5; column++){
 8005d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d68:	3301      	adds	r3, #1
 8005d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d6e:	2b04      	cmp	r3, #4
 8005d70:	dd87      	ble.n	8005c82 <drawCharToLcd5x7+0x2a>
		}
	}

}
 8005d72:	bf00      	nop
 8005d74:	bf00      	nop
 8005d76:	3734      	adds	r7, #52	; 0x34
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd90      	pop	{r4, r7, pc}
 8005d7c:	0800d450 	.word	0x0800d450

08005d80 <SPI1_Transfer>:
#include <stm32f4xx_hal_gpio.h>
#include <stdio.h>


uint8_t SPI1_Transfer(uint8_t data)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b085      	sub	sp, #20
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	4603      	mov	r3, r0
 8005d88:	71fb      	strb	r3, [r7, #7]
	SPI_TypeDef *SPI1inst = hspi1.Instance;
 8005d8a:	4b12      	ldr	r3, [pc, #72]	; (8005dd4 <SPI1_Transfer+0x54>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	60fb      	str	r3, [r7, #12]
    SPI1inst->DR = data;
 8005d90:	79fa      	ldrb	r2, [r7, #7]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	60da      	str	r2, [r3, #12]
    while (!(SPI1inst->SR & (SPI_FLAG_TXE)));
 8005d96:	bf00      	nop
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	f003 0302 	and.w	r3, r3, #2
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d0f9      	beq.n	8005d98 <SPI1_Transfer+0x18>
    while (!(SPI1inst->SR & (SPI_FLAG_RXNE)));
 8005da4:	bf00      	nop
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	f003 0301 	and.w	r3, r3, #1
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d0f9      	beq.n	8005da6 <SPI1_Transfer+0x26>
    while (SPI1inst->SR & (SPI_FLAG_BSY));
 8005db2:	bf00      	nop
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d1f9      	bne.n	8005db4 <SPI1_Transfer+0x34>
    return SPI1inst->DR;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	b2db      	uxtb	r3, r3
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3714      	adds	r7, #20
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr
 8005dd2:	bf00      	nop
 8005dd4:	20004010 	.word	0x20004010

08005dd8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b083      	sub	sp, #12
 8005ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005dde:	2300      	movs	r3, #0
 8005de0:	607b      	str	r3, [r7, #4]
 8005de2:	4b10      	ldr	r3, [pc, #64]	; (8005e24 <HAL_MspInit+0x4c>)
 8005de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005de6:	4a0f      	ldr	r2, [pc, #60]	; (8005e24 <HAL_MspInit+0x4c>)
 8005de8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005dec:	6453      	str	r3, [r2, #68]	; 0x44
 8005dee:	4b0d      	ldr	r3, [pc, #52]	; (8005e24 <HAL_MspInit+0x4c>)
 8005df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005df2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005df6:	607b      	str	r3, [r7, #4]
 8005df8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	603b      	str	r3, [r7, #0]
 8005dfe:	4b09      	ldr	r3, [pc, #36]	; (8005e24 <HAL_MspInit+0x4c>)
 8005e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e02:	4a08      	ldr	r2, [pc, #32]	; (8005e24 <HAL_MspInit+0x4c>)
 8005e04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e08:	6413      	str	r3, [r2, #64]	; 0x40
 8005e0a:	4b06      	ldr	r3, [pc, #24]	; (8005e24 <HAL_MspInit+0x4c>)
 8005e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e12:	603b      	str	r3, [r7, #0]
 8005e14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005e16:	bf00      	nop
 8005e18:	370c      	adds	r7, #12
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr
 8005e22:	bf00      	nop
 8005e24:	40023800 	.word	0x40023800

08005e28 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b08a      	sub	sp, #40	; 0x28
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e30:	f107 0314 	add.w	r3, r7, #20
 8005e34:	2200      	movs	r2, #0
 8005e36:	601a      	str	r2, [r3, #0]
 8005e38:	605a      	str	r2, [r3, #4]
 8005e3a:	609a      	str	r2, [r3, #8]
 8005e3c:	60da      	str	r2, [r3, #12]
 8005e3e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a19      	ldr	r2, [pc, #100]	; (8005eac <HAL_I2C_MspInit+0x84>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d12b      	bne.n	8005ea2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	613b      	str	r3, [r7, #16]
 8005e4e:	4b18      	ldr	r3, [pc, #96]	; (8005eb0 <HAL_I2C_MspInit+0x88>)
 8005e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e52:	4a17      	ldr	r2, [pc, #92]	; (8005eb0 <HAL_I2C_MspInit+0x88>)
 8005e54:	f043 0302 	orr.w	r3, r3, #2
 8005e58:	6313      	str	r3, [r2, #48]	; 0x30
 8005e5a:	4b15      	ldr	r3, [pc, #84]	; (8005eb0 <HAL_I2C_MspInit+0x88>)
 8005e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e5e:	f003 0302 	and.w	r3, r3, #2
 8005e62:	613b      	str	r3, [r7, #16]
 8005e64:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005e66:	23c0      	movs	r3, #192	; 0xc0
 8005e68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005e6a:	2312      	movs	r3, #18
 8005e6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e72:	2303      	movs	r3, #3
 8005e74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005e76:	2304      	movs	r3, #4
 8005e78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005e7a:	f107 0314 	add.w	r3, r7, #20
 8005e7e:	4619      	mov	r1, r3
 8005e80:	480c      	ldr	r0, [pc, #48]	; (8005eb4 <HAL_I2C_MspInit+0x8c>)
 8005e82:	f000 ffa9 	bl	8006dd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005e86:	2300      	movs	r3, #0
 8005e88:	60fb      	str	r3, [r7, #12]
 8005e8a:	4b09      	ldr	r3, [pc, #36]	; (8005eb0 <HAL_I2C_MspInit+0x88>)
 8005e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e8e:	4a08      	ldr	r2, [pc, #32]	; (8005eb0 <HAL_I2C_MspInit+0x88>)
 8005e90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005e94:	6413      	str	r3, [r2, #64]	; 0x40
 8005e96:	4b06      	ldr	r3, [pc, #24]	; (8005eb0 <HAL_I2C_MspInit+0x88>)
 8005e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e9e:	60fb      	str	r3, [r7, #12]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005ea2:	bf00      	nop
 8005ea4:	3728      	adds	r7, #40	; 0x28
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}
 8005eaa:	bf00      	nop
 8005eac:	40005400 	.word	0x40005400
 8005eb0:	40023800 	.word	0x40023800
 8005eb4:	40020400 	.word	0x40020400

08005eb8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b08a      	sub	sp, #40	; 0x28
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ec0:	f107 0314 	add.w	r3, r7, #20
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	601a      	str	r2, [r3, #0]
 8005ec8:	605a      	str	r2, [r3, #4]
 8005eca:	609a      	str	r2, [r3, #8]
 8005ecc:	60da      	str	r2, [r3, #12]
 8005ece:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a19      	ldr	r2, [pc, #100]	; (8005f3c <HAL_SPI_MspInit+0x84>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d12b      	bne.n	8005f32 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005eda:	2300      	movs	r3, #0
 8005edc:	613b      	str	r3, [r7, #16]
 8005ede:	4b18      	ldr	r3, [pc, #96]	; (8005f40 <HAL_SPI_MspInit+0x88>)
 8005ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ee2:	4a17      	ldr	r2, [pc, #92]	; (8005f40 <HAL_SPI_MspInit+0x88>)
 8005ee4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005ee8:	6453      	str	r3, [r2, #68]	; 0x44
 8005eea:	4b15      	ldr	r3, [pc, #84]	; (8005f40 <HAL_SPI_MspInit+0x88>)
 8005eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ef2:	613b      	str	r3, [r7, #16]
 8005ef4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	60fb      	str	r3, [r7, #12]
 8005efa:	4b11      	ldr	r3, [pc, #68]	; (8005f40 <HAL_SPI_MspInit+0x88>)
 8005efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005efe:	4a10      	ldr	r2, [pc, #64]	; (8005f40 <HAL_SPI_MspInit+0x88>)
 8005f00:	f043 0301 	orr.w	r3, r3, #1
 8005f04:	6313      	str	r3, [r2, #48]	; 0x30
 8005f06:	4b0e      	ldr	r3, [pc, #56]	; (8005f40 <HAL_SPI_MspInit+0x88>)
 8005f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f0a:	f003 0301 	and.w	r3, r3, #1
 8005f0e:	60fb      	str	r3, [r7, #12]
 8005f10:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8005f12:	23e0      	movs	r3, #224	; 0xe0
 8005f14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f16:	2302      	movs	r3, #2
 8005f18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f1e:	2303      	movs	r3, #3
 8005f20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005f22:	2305      	movs	r3, #5
 8005f24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f26:	f107 0314 	add.w	r3, r7, #20
 8005f2a:	4619      	mov	r1, r3
 8005f2c:	4805      	ldr	r0, [pc, #20]	; (8005f44 <HAL_SPI_MspInit+0x8c>)
 8005f2e:	f000 ff53 	bl	8006dd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8005f32:	bf00      	nop
 8005f34:	3728      	adds	r7, #40	; 0x28
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}
 8005f3a:	bf00      	nop
 8005f3c:	40013000 	.word	0x40013000
 8005f40:	40023800 	.word	0x40023800
 8005f44:	40020000 	.word	0x40020000

08005f48 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b085      	sub	sp, #20
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a0b      	ldr	r2, [pc, #44]	; (8005f84 <HAL_TIM_PWM_MspInit+0x3c>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d10d      	bne.n	8005f76 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	60fb      	str	r3, [r7, #12]
 8005f5e:	4b0a      	ldr	r3, [pc, #40]	; (8005f88 <HAL_TIM_PWM_MspInit+0x40>)
 8005f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f62:	4a09      	ldr	r2, [pc, #36]	; (8005f88 <HAL_TIM_PWM_MspInit+0x40>)
 8005f64:	f043 0301 	orr.w	r3, r3, #1
 8005f68:	6453      	str	r3, [r2, #68]	; 0x44
 8005f6a:	4b07      	ldr	r3, [pc, #28]	; (8005f88 <HAL_TIM_PWM_MspInit+0x40>)
 8005f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f6e:	f003 0301 	and.w	r3, r3, #1
 8005f72:	60fb      	str	r3, [r7, #12]
 8005f74:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8005f76:	bf00      	nop
 8005f78:	3714      	adds	r7, #20
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr
 8005f82:	bf00      	nop
 8005f84:	40010000 	.word	0x40010000
 8005f88:	40023800 	.word	0x40023800

08005f8c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b088      	sub	sp, #32
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f94:	f107 030c 	add.w	r3, r7, #12
 8005f98:	2200      	movs	r2, #0
 8005f9a:	601a      	str	r2, [r3, #0]
 8005f9c:	605a      	str	r2, [r3, #4]
 8005f9e:	609a      	str	r2, [r3, #8]
 8005fa0:	60da      	str	r2, [r3, #12]
 8005fa2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a12      	ldr	r2, [pc, #72]	; (8005ff4 <HAL_TIM_MspPostInit+0x68>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d11e      	bne.n	8005fec <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005fae:	2300      	movs	r3, #0
 8005fb0:	60bb      	str	r3, [r7, #8]
 8005fb2:	4b11      	ldr	r3, [pc, #68]	; (8005ff8 <HAL_TIM_MspPostInit+0x6c>)
 8005fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fb6:	4a10      	ldr	r2, [pc, #64]	; (8005ff8 <HAL_TIM_MspPostInit+0x6c>)
 8005fb8:	f043 0301 	orr.w	r3, r3, #1
 8005fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8005fbe:	4b0e      	ldr	r3, [pc, #56]	; (8005ff8 <HAL_TIM_MspPostInit+0x6c>)
 8005fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc2:	f003 0301 	and.w	r3, r3, #1
 8005fc6:	60bb      	str	r3, [r7, #8]
 8005fc8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = LCD_BL_Pin;
 8005fca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005fce:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fd0:	2302      	movs	r3, #2
 8005fd2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8005fe0:	f107 030c 	add.w	r3, r7, #12
 8005fe4:	4619      	mov	r1, r3
 8005fe6:	4805      	ldr	r0, [pc, #20]	; (8005ffc <HAL_TIM_MspPostInit+0x70>)
 8005fe8:	f000 fef6 	bl	8006dd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8005fec:	bf00      	nop
 8005fee:	3720      	adds	r7, #32
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}
 8005ff4:	40010000 	.word	0x40010000
 8005ff8:	40023800 	.word	0x40023800
 8005ffc:	40020000 	.word	0x40020000

08006000 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b08c      	sub	sp, #48	; 0x30
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006008:	f107 031c 	add.w	r3, r7, #28
 800600c:	2200      	movs	r2, #0
 800600e:	601a      	str	r2, [r3, #0]
 8006010:	605a      	str	r2, [r3, #4]
 8006012:	609a      	str	r2, [r3, #8]
 8006014:	60da      	str	r2, [r3, #12]
 8006016:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a3a      	ldr	r2, [pc, #232]	; (8006108 <HAL_UART_MspInit+0x108>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d135      	bne.n	800608e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006022:	2300      	movs	r3, #0
 8006024:	61bb      	str	r3, [r7, #24]
 8006026:	4b39      	ldr	r3, [pc, #228]	; (800610c <HAL_UART_MspInit+0x10c>)
 8006028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800602a:	4a38      	ldr	r2, [pc, #224]	; (800610c <HAL_UART_MspInit+0x10c>)
 800602c:	f043 0310 	orr.w	r3, r3, #16
 8006030:	6453      	str	r3, [r2, #68]	; 0x44
 8006032:	4b36      	ldr	r3, [pc, #216]	; (800610c <HAL_UART_MspInit+0x10c>)
 8006034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006036:	f003 0310 	and.w	r3, r3, #16
 800603a:	61bb      	str	r3, [r7, #24]
 800603c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800603e:	2300      	movs	r3, #0
 8006040:	617b      	str	r3, [r7, #20]
 8006042:	4b32      	ldr	r3, [pc, #200]	; (800610c <HAL_UART_MspInit+0x10c>)
 8006044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006046:	4a31      	ldr	r2, [pc, #196]	; (800610c <HAL_UART_MspInit+0x10c>)
 8006048:	f043 0301 	orr.w	r3, r3, #1
 800604c:	6313      	str	r3, [r2, #48]	; 0x30
 800604e:	4b2f      	ldr	r3, [pc, #188]	; (800610c <HAL_UART_MspInit+0x10c>)
 8006050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006052:	f003 0301 	and.w	r3, r3, #1
 8006056:	617b      	str	r3, [r7, #20]
 8006058:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800605a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800605e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006060:	2302      	movs	r3, #2
 8006062:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006064:	2300      	movs	r3, #0
 8006066:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006068:	2303      	movs	r3, #3
 800606a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800606c:	2307      	movs	r3, #7
 800606e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006070:	f107 031c 	add.w	r3, r7, #28
 8006074:	4619      	mov	r1, r3
 8006076:	4826      	ldr	r0, [pc, #152]	; (8006110 <HAL_UART_MspInit+0x110>)
 8006078:	f000 feae 	bl	8006dd8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800607c:	2200      	movs	r2, #0
 800607e:	2100      	movs	r1, #0
 8006080:	2025      	movs	r0, #37	; 0x25
 8006082:	f000 fde0 	bl	8006c46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006086:	2025      	movs	r0, #37	; 0x25
 8006088:	f000 fdf9 	bl	8006c7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800608c:	e038      	b.n	8006100 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a20      	ldr	r2, [pc, #128]	; (8006114 <HAL_UART_MspInit+0x114>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d133      	bne.n	8006100 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006098:	2300      	movs	r3, #0
 800609a:	613b      	str	r3, [r7, #16]
 800609c:	4b1b      	ldr	r3, [pc, #108]	; (800610c <HAL_UART_MspInit+0x10c>)
 800609e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a0:	4a1a      	ldr	r2, [pc, #104]	; (800610c <HAL_UART_MspInit+0x10c>)
 80060a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060a6:	6413      	str	r3, [r2, #64]	; 0x40
 80060a8:	4b18      	ldr	r3, [pc, #96]	; (800610c <HAL_UART_MspInit+0x10c>)
 80060aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060b0:	613b      	str	r3, [r7, #16]
 80060b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80060b4:	2300      	movs	r3, #0
 80060b6:	60fb      	str	r3, [r7, #12]
 80060b8:	4b14      	ldr	r3, [pc, #80]	; (800610c <HAL_UART_MspInit+0x10c>)
 80060ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060bc:	4a13      	ldr	r2, [pc, #76]	; (800610c <HAL_UART_MspInit+0x10c>)
 80060be:	f043 0301 	orr.w	r3, r3, #1
 80060c2:	6313      	str	r3, [r2, #48]	; 0x30
 80060c4:	4b11      	ldr	r3, [pc, #68]	; (800610c <HAL_UART_MspInit+0x10c>)
 80060c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060c8:	f003 0301 	and.w	r3, r3, #1
 80060cc:	60fb      	str	r3, [r7, #12]
 80060ce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80060d0:	230c      	movs	r3, #12
 80060d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060d4:	2302      	movs	r3, #2
 80060d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060d8:	2300      	movs	r3, #0
 80060da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060dc:	2303      	movs	r3, #3
 80060de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80060e0:	2307      	movs	r3, #7
 80060e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80060e4:	f107 031c 	add.w	r3, r7, #28
 80060e8:	4619      	mov	r1, r3
 80060ea:	4809      	ldr	r0, [pc, #36]	; (8006110 <HAL_UART_MspInit+0x110>)
 80060ec:	f000 fe74 	bl	8006dd8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80060f0:	2200      	movs	r2, #0
 80060f2:	2100      	movs	r1, #0
 80060f4:	2026      	movs	r0, #38	; 0x26
 80060f6:	f000 fda6 	bl	8006c46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80060fa:	2026      	movs	r0, #38	; 0x26
 80060fc:	f000 fdbf 	bl	8006c7e <HAL_NVIC_EnableIRQ>
}
 8006100:	bf00      	nop
 8006102:	3730      	adds	r7, #48	; 0x30
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}
 8006108:	40011000 	.word	0x40011000
 800610c:	40023800 	.word	0x40023800
 8006110:	40020000 	.word	0x40020000
 8006114:	40004400 	.word	0x40004400

08006118 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8006118:	b580      	push	{r7, lr}
 800611a:	b086      	sub	sp, #24
 800611c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800611e:	1d3b      	adds	r3, r7, #4
 8006120:	2200      	movs	r2, #0
 8006122:	601a      	str	r2, [r3, #0]
 8006124:	605a      	str	r2, [r3, #4]
 8006126:	609a      	str	r2, [r3, #8]
 8006128:	60da      	str	r2, [r3, #12]
 800612a:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 800612c:	4b1c      	ldr	r3, [pc, #112]	; (80061a0 <HAL_FSMC_MspInit+0x88>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d131      	bne.n	8006198 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8006134:	4b1a      	ldr	r3, [pc, #104]	; (80061a0 <HAL_FSMC_MspInit+0x88>)
 8006136:	2201      	movs	r2, #1
 8006138:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800613a:	2300      	movs	r3, #0
 800613c:	603b      	str	r3, [r7, #0]
 800613e:	4b19      	ldr	r3, [pc, #100]	; (80061a4 <HAL_FSMC_MspInit+0x8c>)
 8006140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006142:	4a18      	ldr	r2, [pc, #96]	; (80061a4 <HAL_FSMC_MspInit+0x8c>)
 8006144:	f043 0301 	orr.w	r3, r3, #1
 8006148:	6393      	str	r3, [r2, #56]	; 0x38
 800614a:	4b16      	ldr	r3, [pc, #88]	; (80061a4 <HAL_FSMC_MspInit+0x8c>)
 800614c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800614e:	f003 0301 	and.w	r3, r3, #1
 8006152:	603b      	str	r3, [r7, #0]
 8006154:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8006156:	f64f 7380 	movw	r3, #65408	; 0xff80
 800615a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800615c:	2302      	movs	r3, #2
 800615e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006160:	2300      	movs	r3, #0
 8006162:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006164:	2303      	movs	r3, #3
 8006166:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8006168:	230c      	movs	r3, #12
 800616a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800616c:	1d3b      	adds	r3, r7, #4
 800616e:	4619      	mov	r1, r3
 8006170:	480d      	ldr	r0, [pc, #52]	; (80061a8 <HAL_FSMC_MspInit+0x90>)
 8006172:	f000 fe31 	bl	8006dd8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13
 8006176:	f24e 73b3 	movw	r3, #59315	; 0xe7b3
 800617a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800617c:	2302      	movs	r3, #2
 800617e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006180:	2300      	movs	r3, #0
 8006182:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006184:	2303      	movs	r3, #3
 8006186:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8006188:	230c      	movs	r3, #12
 800618a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800618c:	1d3b      	adds	r3, r7, #4
 800618e:	4619      	mov	r1, r3
 8006190:	4806      	ldr	r0, [pc, #24]	; (80061ac <HAL_FSMC_MspInit+0x94>)
 8006192:	f000 fe21 	bl	8006dd8 <HAL_GPIO_Init>
 8006196:	e000      	b.n	800619a <HAL_FSMC_MspInit+0x82>
    return;
 8006198:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800619a:	3718      	adds	r7, #24
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}
 80061a0:	20004b94 	.word	0x20004b94
 80061a4:	40023800 	.word	0x40023800
 80061a8:	40021000 	.word	0x40021000
 80061ac:	40020c00 	.word	0x40020c00

080061b0 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b082      	sub	sp, #8
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80061b8:	f7ff ffae 	bl	8006118 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80061bc:	bf00      	nop
 80061be:	3708      	adds	r7, #8
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}

080061c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80061c4:	b480      	push	{r7}
 80061c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80061c8:	e7fe      	b.n	80061c8 <NMI_Handler+0x4>

080061ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80061ca:	b480      	push	{r7}
 80061cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80061ce:	e7fe      	b.n	80061ce <HardFault_Handler+0x4>

080061d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80061d0:	b480      	push	{r7}
 80061d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80061d4:	e7fe      	b.n	80061d4 <MemManage_Handler+0x4>

080061d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80061d6:	b480      	push	{r7}
 80061d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80061da:	e7fe      	b.n	80061da <BusFault_Handler+0x4>

080061dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80061dc:	b480      	push	{r7}
 80061de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80061e0:	e7fe      	b.n	80061e0 <UsageFault_Handler+0x4>

080061e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80061e2:	b480      	push	{r7}
 80061e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80061e6:	bf00      	nop
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr

080061f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80061f0:	b480      	push	{r7}
 80061f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80061f4:	bf00      	nop
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr

080061fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80061fe:	b480      	push	{r7}
 8006200:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006202:	bf00      	nop
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr

0800620c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006210:	f000 fbfa 	bl	8006a08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006214:	bf00      	nop
 8006216:	bd80      	pop	{r7, pc}

08006218 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800621c:	2010      	movs	r0, #16
 800621e:	f000 ff91 	bl	8007144 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8006222:	bf00      	nop
 8006224:	bd80      	pop	{r7, pc}
	...

08006228 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b082      	sub	sp, #8
 800622c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  static int ledVal = 0;
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, ledVal);
 800622e:	4b24      	ldr	r3, [pc, #144]	; (80062c0 <USART1_IRQHandler+0x98>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	b2db      	uxtb	r3, r3
 8006234:	461a      	mov	r2, r3
 8006236:	2108      	movs	r1, #8
 8006238:	4822      	ldr	r0, [pc, #136]	; (80062c4 <USART1_IRQHandler+0x9c>)
 800623a:	f000 ff69 	bl	8007110 <HAL_GPIO_WritePin>
  ledVal = !ledVal;
 800623e:	4b20      	ldr	r3, [pc, #128]	; (80062c0 <USART1_IRQHandler+0x98>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	2b00      	cmp	r3, #0
 8006244:	bf0c      	ite	eq
 8006246:	2301      	moveq	r3, #1
 8006248:	2300      	movne	r3, #0
 800624a:	b2db      	uxtb	r3, r3
 800624c:	461a      	mov	r2, r3
 800624e:	4b1c      	ldr	r3, [pc, #112]	; (80062c0 <USART1_IRQHandler+0x98>)
 8006250:	601a      	str	r2, [r3, #0]
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006252:	481d      	ldr	r0, [pc, #116]	; (80062c8 <USART1_IRQHandler+0xa0>)
 8006254:	f003 fca2 	bl	8009b9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  volatile unsigned int IIR;
  IIR = USART1->SR;
 8006258:	4b1c      	ldr	r3, [pc, #112]	; (80062cc <USART1_IRQHandler+0xa4>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	603b      	str	r3, [r7, #0]
  if(IIR & UART_FLAG_RXNE){
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	f003 0320 	and.w	r3, r3, #32
 8006264:	2b00      	cmp	r3, #0
 8006266:	d009      	beq.n	800627c <USART1_IRQHandler+0x54>
  		//Read Data Register Not Empty
  		char t = USART1->DR; // the character from the USART1 data register is saved in t
 8006268:	4b18      	ldr	r3, [pc, #96]	; (80062cc <USART1_IRQHandler+0xa4>)
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	71fb      	strb	r3, [r7, #7]
  		put_in_rx_buffer(t,DBG_UART);
 800626e:	4b18      	ldr	r3, [pc, #96]	; (80062d0 <USART1_IRQHandler+0xa8>)
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	79fb      	ldrb	r3, [r7, #7]
 8006274:	4611      	mov	r1, r2
 8006276:	4618      	mov	r0, r3
 8006278:	f000 f93c 	bl	80064f4 <put_in_rx_buffer>
      }
  if(IIR & UART_FLAG_TXE){
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006282:	2b00      	cmp	r3, #0
 8006284:	d018      	beq.n	80062b8 <USART1_IRQHandler+0x90>
  		if(wr_pointer_dbg==rd_pointer_dbg){
 8006286:	4b13      	ldr	r3, [pc, #76]	; (80062d4 <USART1_IRQHandler+0xac>)
 8006288:	681a      	ldr	r2, [r3, #0]
 800628a:	4b13      	ldr	r3, [pc, #76]	; (80062d8 <USART1_IRQHandler+0xb0>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	429a      	cmp	r2, r3
 8006290:	d108      	bne.n	80062a4 <USART1_IRQHandler+0x7c>
  			__HAL_UART_DISABLE_IT(&huart1, UART_IT_TXE); //whole message transmitted
 8006292:	4b0d      	ldr	r3, [pc, #52]	; (80062c8 <USART1_IRQHandler+0xa0>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	68da      	ldr	r2, [r3, #12]
 8006298:	4b0b      	ldr	r3, [pc, #44]	; (80062c8 <USART1_IRQHandler+0xa0>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80062a0:	60da      	str	r2, [r3, #12]
  		}
  	}


  /* USER CODE END USART1_IRQn 1 */
}
 80062a2:	e009      	b.n	80062b8 <USART1_IRQHandler+0x90>
  			DBG_UART->DR = get_from_tx_buffer(DBG_UART);
 80062a4:	4b0a      	ldr	r3, [pc, #40]	; (80062d0 <USART1_IRQHandler+0xa8>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4618      	mov	r0, r3
 80062aa:	f000 f9c7 	bl	800663c <get_from_tx_buffer>
 80062ae:	4603      	mov	r3, r0
 80062b0:	461a      	mov	r2, r3
 80062b2:	4b07      	ldr	r3, [pc, #28]	; (80062d0 <USART1_IRQHandler+0xa8>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	605a      	str	r2, [r3, #4]
}
 80062b8:	bf00      	nop
 80062ba:	3708      	adds	r7, #8
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}
 80062c0:	20004b98 	.word	0x20004b98
 80062c4:	40020400 	.word	0x40020400
 80062c8:	200040b0 	.word	0x200040b0
 80062cc:	40011000 	.word	0x40011000
 80062d0:	20000028 	.word	0x20000028
 80062d4:	200053ac 	.word	0x200053ac
 80062d8:	200053a8 	.word	0x200053a8

080062dc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b082      	sub	sp, #8
 80062e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80062e2:	481b      	ldr	r0, [pc, #108]	; (8006350 <USART2_IRQHandler+0x74>)
 80062e4:	f003 fc5a 	bl	8009b9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  volatile unsigned int IIR;
  	IIR=USART2->SR;
 80062e8:	4b1a      	ldr	r3, [pc, #104]	; (8006354 <USART2_IRQHandler+0x78>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	603b      	str	r3, [r7, #0]
    if(IIR & UART_FLAG_RXNE){
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	f003 0320 	and.w	r3, r3, #32
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d009      	beq.n	800630c <USART2_IRQHandler+0x30>
  		// check if the USART6 receive interrupt flag was set
  		char t = USART2->DR; // the character from the USART2 data register is saved in t
 80062f8:	4b16      	ldr	r3, [pc, #88]	; (8006354 <USART2_IRQHandler+0x78>)
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	71fb      	strb	r3, [r7, #7]
  		put_in_rx_buffer(t,RS485_UART);
 80062fe:	4b16      	ldr	r3, [pc, #88]	; (8006358 <USART2_IRQHandler+0x7c>)
 8006300:	681a      	ldr	r2, [r3, #0]
 8006302:	79fb      	ldrb	r3, [r7, #7]
 8006304:	4611      	mov	r1, r2
 8006306:	4618      	mov	r0, r3
 8006308:	f000 f8f4 	bl	80064f4 <put_in_rx_buffer>
      }
  	if(IIR & UART_FLAG_TXE){
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006312:	2b00      	cmp	r3, #0
 8006314:	d017      	beq.n	8006346 <USART2_IRQHandler+0x6a>
  		if(wr_pointer_rs485==rd_pointer_rs485){
 8006316:	4b11      	ldr	r3, [pc, #68]	; (800635c <USART2_IRQHandler+0x80>)
 8006318:	681a      	ldr	r2, [r3, #0]
 800631a:	4b11      	ldr	r3, [pc, #68]	; (8006360 <USART2_IRQHandler+0x84>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	429a      	cmp	r2, r3
 8006320:	d108      	bne.n	8006334 <USART2_IRQHandler+0x58>
  			__HAL_UART_DISABLE_IT(&huart2, UART_IT_TXE);
 8006322:	4b0b      	ldr	r3, [pc, #44]	; (8006350 <USART2_IRQHandler+0x74>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	68da      	ldr	r2, [r3, #12]
 8006328:	4b09      	ldr	r3, [pc, #36]	; (8006350 <USART2_IRQHandler+0x74>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006330:	60da      	str	r2, [r3, #12]
  			USART2->DR = get_from_tx_buffer(RS485_UART);
  		}
  	}

  /* USER CODE END USART2_IRQn 1 */
}
 8006332:	e008      	b.n	8006346 <USART2_IRQHandler+0x6a>
  			USART2->DR = get_from_tx_buffer(RS485_UART);
 8006334:	4b08      	ldr	r3, [pc, #32]	; (8006358 <USART2_IRQHandler+0x7c>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4618      	mov	r0, r3
 800633a:	f000 f97f 	bl	800663c <get_from_tx_buffer>
 800633e:	4603      	mov	r3, r0
 8006340:	461a      	mov	r2, r3
 8006342:	4b04      	ldr	r3, [pc, #16]	; (8006354 <USART2_IRQHandler+0x78>)
 8006344:	605a      	str	r2, [r3, #4]
}
 8006346:	bf00      	nop
 8006348:	3708      	adds	r7, #8
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}
 800634e:	bf00      	nop
 8006350:	200040f4 	.word	0x200040f4
 8006354:	40004400 	.word	0x40004400
 8006358:	20000024 	.word	0x20000024
 800635c:	20004fa4 	.word	0x20004fa4
 8006360:	20004fa0 	.word	0x20004fa0

08006364 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b086      	sub	sp, #24
 8006368:	af00      	add	r7, sp, #0
 800636a:	60f8      	str	r0, [r7, #12]
 800636c:	60b9      	str	r1, [r7, #8]
 800636e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006370:	2300      	movs	r3, #0
 8006372:	617b      	str	r3, [r7, #20]
 8006374:	e00a      	b.n	800638c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8006376:	f3af 8000 	nop.w
 800637a:	4601      	mov	r1, r0
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	1c5a      	adds	r2, r3, #1
 8006380:	60ba      	str	r2, [r7, #8]
 8006382:	b2ca      	uxtb	r2, r1
 8006384:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	3301      	adds	r3, #1
 800638a:	617b      	str	r3, [r7, #20]
 800638c:	697a      	ldr	r2, [r7, #20]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	429a      	cmp	r2, r3
 8006392:	dbf0      	blt.n	8006376 <_read+0x12>
	}

return len;
 8006394:	687b      	ldr	r3, [r7, #4]
}
 8006396:	4618      	mov	r0, r3
 8006398:	3718      	adds	r7, #24
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}

0800639e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800639e:	b580      	push	{r7, lr}
 80063a0:	b086      	sub	sp, #24
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	60f8      	str	r0, [r7, #12]
 80063a6:	60b9      	str	r1, [r7, #8]
 80063a8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80063aa:	2300      	movs	r3, #0
 80063ac:	617b      	str	r3, [r7, #20]
 80063ae:	e009      	b.n	80063c4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	1c5a      	adds	r2, r3, #1
 80063b4:	60ba      	str	r2, [r7, #8]
 80063b6:	781b      	ldrb	r3, [r3, #0]
 80063b8:	4618      	mov	r0, r3
 80063ba:	f000 f889 	bl	80064d0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	3301      	adds	r3, #1
 80063c2:	617b      	str	r3, [r7, #20]
 80063c4:	697a      	ldr	r2, [r7, #20]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	429a      	cmp	r2, r3
 80063ca:	dbf1      	blt.n	80063b0 <_write+0x12>
	}
	return len;
 80063cc:	687b      	ldr	r3, [r7, #4]
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3718      	adds	r7, #24
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}

080063d6 <_close>:

int _close(int file)
{
 80063d6:	b480      	push	{r7}
 80063d8:	b083      	sub	sp, #12
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
	return -1;
 80063de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	370c      	adds	r7, #12
 80063e6:	46bd      	mov	sp, r7
 80063e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ec:	4770      	bx	lr

080063ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80063ee:	b480      	push	{r7}
 80063f0:	b083      	sub	sp, #12
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	6078      	str	r0, [r7, #4]
 80063f6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80063fe:	605a      	str	r2, [r3, #4]
	return 0;
 8006400:	2300      	movs	r3, #0
}
 8006402:	4618      	mov	r0, r3
 8006404:	370c      	adds	r7, #12
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr

0800640e <_isatty>:

int _isatty(int file)
{
 800640e:	b480      	push	{r7}
 8006410:	b083      	sub	sp, #12
 8006412:	af00      	add	r7, sp, #0
 8006414:	6078      	str	r0, [r7, #4]
	return 1;
 8006416:	2301      	movs	r3, #1
}
 8006418:	4618      	mov	r0, r3
 800641a:	370c      	adds	r7, #12
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr

08006424 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006424:	b480      	push	{r7}
 8006426:	b085      	sub	sp, #20
 8006428:	af00      	add	r7, sp, #0
 800642a:	60f8      	str	r0, [r7, #12]
 800642c:	60b9      	str	r1, [r7, #8]
 800642e:	607a      	str	r2, [r7, #4]
	return 0;
 8006430:	2300      	movs	r3, #0
}
 8006432:	4618      	mov	r0, r3
 8006434:	3714      	adds	r7, #20
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr
	...

08006440 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b086      	sub	sp, #24
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006448:	4a14      	ldr	r2, [pc, #80]	; (800649c <_sbrk+0x5c>)
 800644a:	4b15      	ldr	r3, [pc, #84]	; (80064a0 <_sbrk+0x60>)
 800644c:	1ad3      	subs	r3, r2, r3
 800644e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006454:	4b13      	ldr	r3, [pc, #76]	; (80064a4 <_sbrk+0x64>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d102      	bne.n	8006462 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800645c:	4b11      	ldr	r3, [pc, #68]	; (80064a4 <_sbrk+0x64>)
 800645e:	4a12      	ldr	r2, [pc, #72]	; (80064a8 <_sbrk+0x68>)
 8006460:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006462:	4b10      	ldr	r3, [pc, #64]	; (80064a4 <_sbrk+0x64>)
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	4413      	add	r3, r2
 800646a:	693a      	ldr	r2, [r7, #16]
 800646c:	429a      	cmp	r2, r3
 800646e:	d207      	bcs.n	8006480 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006470:	f004 fba4 	bl	800abbc <__errno>
 8006474:	4603      	mov	r3, r0
 8006476:	220c      	movs	r2, #12
 8006478:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800647a:	f04f 33ff 	mov.w	r3, #4294967295
 800647e:	e009      	b.n	8006494 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006480:	4b08      	ldr	r3, [pc, #32]	; (80064a4 <_sbrk+0x64>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006486:	4b07      	ldr	r3, [pc, #28]	; (80064a4 <_sbrk+0x64>)
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	4413      	add	r3, r2
 800648e:	4a05      	ldr	r2, [pc, #20]	; (80064a4 <_sbrk+0x64>)
 8006490:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006492:	68fb      	ldr	r3, [r7, #12]
}
 8006494:	4618      	mov	r0, r3
 8006496:	3718      	adds	r7, #24
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}
 800649c:	20020000 	.word	0x20020000
 80064a0:	00000400 	.word	0x00000400
 80064a4:	20004b9c 	.word	0x20004b9c
 80064a8:	200077d8 	.word	0x200077d8

080064ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80064ac:	b480      	push	{r7}
 80064ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80064b0:	4b06      	ldr	r3, [pc, #24]	; (80064cc <SystemInit+0x20>)
 80064b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064b6:	4a05      	ldr	r2, [pc, #20]	; (80064cc <SystemInit+0x20>)
 80064b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80064bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80064c0:	bf00      	nop
 80064c2:	46bd      	mov	sp, r7
 80064c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c8:	4770      	bx	lr
 80064ca:	bf00      	nop
 80064cc:	e000ed00 	.word	0xe000ed00

080064d0 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

//redirect printf to uart1.
PUTCHAR_PROTOTYPE{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b082      	sub	sp, #8
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 0xffff);
 80064d8:	1d39      	adds	r1, r7, #4
 80064da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80064de:	2201      	movs	r2, #1
 80064e0:	4803      	ldr	r0, [pc, #12]	; (80064f0 <__io_putchar+0x20>)
 80064e2:	f003 fac8 	bl	8009a76 <HAL_UART_Transmit>
	return ch;
 80064e6:	687b      	ldr	r3, [r7, #4]
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3708      	adds	r7, #8
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}
 80064f0:	200040b0 	.word	0x200040b0

080064f4 <put_in_rx_buffer>:

#endif //DEBUG_UART_PRINT

void put_in_rx_buffer(char data, USART_TypeDef* USARTx)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b083      	sub	sp, #12
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	4603      	mov	r3, r0
 80064fc:	6039      	str	r1, [r7, #0]
 80064fe:	71fb      	strb	r3, [r7, #7]
	if(USARTx == DBG_UART)
 8006500:	4b1d      	ldr	r3, [pc, #116]	; (8006578 <put_in_rx_buffer+0x84>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	683a      	ldr	r2, [r7, #0]
 8006506:	429a      	cmp	r2, r3
 8006508:	d114      	bne.n	8006534 <put_in_rx_buffer+0x40>
	{
		if(SIO_RBUFLEN_DBG>=LEN_RX_BUFFER_DBG)
 800650a:	4b1c      	ldr	r3, [pc, #112]	; (800657c <put_in_rx_buffer+0x88>)
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	4b1c      	ldr	r3, [pc, #112]	; (8006580 <put_in_rx_buffer+0x8c>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	1ad3      	subs	r3, r2, r3
 8006514:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006518:	d226      	bcs.n	8006568 <put_in_rx_buffer+0x74>
			{
				return;
			}
		rx_buffer_dbg[wr_pointer_rx_dbg & (LEN_RX_BUFFER_DBG - 1)]=data;
 800651a:	4b18      	ldr	r3, [pc, #96]	; (800657c <put_in_rx_buffer+0x88>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006522:	4918      	ldr	r1, [pc, #96]	; (8006584 <put_in_rx_buffer+0x90>)
 8006524:	79fa      	ldrb	r2, [r7, #7]
 8006526:	54ca      	strb	r2, [r1, r3]
		wr_pointer_rx_dbg++;
 8006528:	4b14      	ldr	r3, [pc, #80]	; (800657c <put_in_rx_buffer+0x88>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	3301      	adds	r3, #1
 800652e:	4a13      	ldr	r2, [pc, #76]	; (800657c <put_in_rx_buffer+0x88>)
 8006530:	6013      	str	r3, [r2, #0]
 8006532:	e01c      	b.n	800656e <put_in_rx_buffer+0x7a>
	}
	else if(USARTx == RS485_UART)
 8006534:	4b14      	ldr	r3, [pc, #80]	; (8006588 <put_in_rx_buffer+0x94>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	683a      	ldr	r2, [r7, #0]
 800653a:	429a      	cmp	r2, r3
 800653c:	d117      	bne.n	800656e <put_in_rx_buffer+0x7a>
	{
		if(SIO_RBUFLEN_RS485>=LEN_RX_BUFFER_RS485)
 800653e:	4b13      	ldr	r3, [pc, #76]	; (800658c <put_in_rx_buffer+0x98>)
 8006540:	681a      	ldr	r2, [r3, #0]
 8006542:	4b13      	ldr	r3, [pc, #76]	; (8006590 <put_in_rx_buffer+0x9c>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	1ad3      	subs	r3, r2, r3
 8006548:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800654c:	d20e      	bcs.n	800656c <put_in_rx_buffer+0x78>
			{
				return;
			}
		rx_buffer_rs485[wr_pointer_rx_rs485 & (LEN_RX_BUFFER_RS485 - 1)]=data;
 800654e:	4b0f      	ldr	r3, [pc, #60]	; (800658c <put_in_rx_buffer+0x98>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006556:	490f      	ldr	r1, [pc, #60]	; (8006594 <put_in_rx_buffer+0xa0>)
 8006558:	79fa      	ldrb	r2, [r7, #7]
 800655a:	54ca      	strb	r2, [r1, r3]
		wr_pointer_rx_rs485++;
 800655c:	4b0b      	ldr	r3, [pc, #44]	; (800658c <put_in_rx_buffer+0x98>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	3301      	adds	r3, #1
 8006562:	4a0a      	ldr	r2, [pc, #40]	; (800658c <put_in_rx_buffer+0x98>)
 8006564:	6013      	str	r3, [r2, #0]
 8006566:	e002      	b.n	800656e <put_in_rx_buffer+0x7a>
				return;
 8006568:	bf00      	nop
 800656a:	e000      	b.n	800656e <put_in_rx_buffer+0x7a>
				return;
 800656c:	bf00      	nop
	}
}
 800656e:	370c      	adds	r7, #12
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr
 8006578:	20000028 	.word	0x20000028
 800657c:	200077bc 	.word	0x200077bc
 8006580:	200077b8 	.word	0x200077b8
 8006584:	200057b8 	.word	0x200057b8
 8006588:	20000024 	.word	0x20000024
 800658c:	200057b4 	.word	0x200057b4
 8006590:	200057b0 	.word	0x200057b0
 8006594:	200053b0 	.word	0x200053b0

08006598 <put_in_tx_buffer>:

void put_in_tx_buffer(char data, USART_TypeDef* USARTx)
{
 8006598:	b480      	push	{r7}
 800659a:	b083      	sub	sp, #12
 800659c:	af00      	add	r7, sp, #0
 800659e:	4603      	mov	r3, r0
 80065a0:	6039      	str	r1, [r7, #0]
 80065a2:	71fb      	strb	r3, [r7, #7]
	if(USARTx == RS485_UART)
 80065a4:	4b1d      	ldr	r3, [pc, #116]	; (800661c <put_in_tx_buffer+0x84>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	683a      	ldr	r2, [r7, #0]
 80065aa:	429a      	cmp	r2, r3
 80065ac:	d114      	bne.n	80065d8 <put_in_tx_buffer+0x40>
	{
		if(SIO_TBUFLEN_RS485>=LEN_TX_BUFFER_RS485)
 80065ae:	4b1c      	ldr	r3, [pc, #112]	; (8006620 <put_in_tx_buffer+0x88>)
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	4b1c      	ldr	r3, [pc, #112]	; (8006624 <put_in_tx_buffer+0x8c>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	1ad3      	subs	r3, r2, r3
 80065b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065bc:	d227      	bcs.n	800660e <put_in_tx_buffer+0x76>
			{
				return;
			}
		tx_buffer_rs485[wr_pointer_rs485 & (LEN_TX_BUFFER_RS485 - 1)]=data;
 80065be:	4b18      	ldr	r3, [pc, #96]	; (8006620 <put_in_tx_buffer+0x88>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80065c6:	4918      	ldr	r1, [pc, #96]	; (8006628 <put_in_tx_buffer+0x90>)
 80065c8:	79fa      	ldrb	r2, [r7, #7]
 80065ca:	54ca      	strb	r2, [r1, r3]
		wr_pointer_rs485++;
 80065cc:	4b14      	ldr	r3, [pc, #80]	; (8006620 <put_in_tx_buffer+0x88>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	3301      	adds	r3, #1
 80065d2:	4a13      	ldr	r2, [pc, #76]	; (8006620 <put_in_tx_buffer+0x88>)
 80065d4:	6013      	str	r3, [r2, #0]
 80065d6:	e01b      	b.n	8006610 <put_in_tx_buffer+0x78>
	}
	else if(USARTx == DBG_UART)
 80065d8:	4b14      	ldr	r3, [pc, #80]	; (800662c <put_in_tx_buffer+0x94>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	683a      	ldr	r2, [r7, #0]
 80065de:	429a      	cmp	r2, r3
 80065e0:	d116      	bne.n	8006610 <put_in_tx_buffer+0x78>
	{
		while(SIO_TBUFLEN_DBG>=LEN_TX_BUFFER_DBG)
 80065e2:	bf00      	nop
 80065e4:	4b12      	ldr	r3, [pc, #72]	; (8006630 <put_in_tx_buffer+0x98>)
 80065e6:	681a      	ldr	r2, [r3, #0]
 80065e8:	4b12      	ldr	r3, [pc, #72]	; (8006634 <put_in_tx_buffer+0x9c>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	1ad3      	subs	r3, r2, r3
 80065ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065f2:	d2f7      	bcs.n	80065e4 <put_in_tx_buffer+0x4c>
			{
				//return;
			}
		tx_buffer_dbg[wr_pointer_dbg & (LEN_TX_BUFFER_DBG - 1)]=data;
 80065f4:	4b0e      	ldr	r3, [pc, #56]	; (8006630 <put_in_tx_buffer+0x98>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80065fc:	490e      	ldr	r1, [pc, #56]	; (8006638 <put_in_tx_buffer+0xa0>)
 80065fe:	79fa      	ldrb	r2, [r7, #7]
 8006600:	54ca      	strb	r2, [r1, r3]
		wr_pointer_dbg++;
 8006602:	4b0b      	ldr	r3, [pc, #44]	; (8006630 <put_in_tx_buffer+0x98>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	3301      	adds	r3, #1
 8006608:	4a09      	ldr	r2, [pc, #36]	; (8006630 <put_in_tx_buffer+0x98>)
 800660a:	6013      	str	r3, [r2, #0]
 800660c:	e000      	b.n	8006610 <put_in_tx_buffer+0x78>
				return;
 800660e:	bf00      	nop
	}
}
 8006610:	370c      	adds	r7, #12
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr
 800661a:	bf00      	nop
 800661c:	20000024 	.word	0x20000024
 8006620:	20004fa4 	.word	0x20004fa4
 8006624:	20004fa0 	.word	0x20004fa0
 8006628:	20004ba0 	.word	0x20004ba0
 800662c:	20000028 	.word	0x20000028
 8006630:	200053ac 	.word	0x200053ac
 8006634:	200053a8 	.word	0x200053a8
 8006638:	20004fa8 	.word	0x20004fa8

0800663c <get_from_tx_buffer>:
char get_from_tx_buffer(USART_TypeDef* USARTx)
{
 800663c:	b480      	push	{r7}
 800663e:	b085      	sub	sp, #20
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
	char data;

	if(USARTx == RS485_UART)
 8006644:	4b14      	ldr	r3, [pc, #80]	; (8006698 <get_from_tx_buffer+0x5c>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	429a      	cmp	r2, r3
 800664c:	d10c      	bne.n	8006668 <get_from_tx_buffer+0x2c>
	{

		data=tx_buffer_rs485[rd_pointer_rs485 & (LEN_TX_BUFFER_RS485-1)];
 800664e:	4b13      	ldr	r3, [pc, #76]	; (800669c <get_from_tx_buffer+0x60>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006656:	4a12      	ldr	r2, [pc, #72]	; (80066a0 <get_from_tx_buffer+0x64>)
 8006658:	5cd3      	ldrb	r3, [r2, r3]
 800665a:	73fb      	strb	r3, [r7, #15]
		rd_pointer_rs485++;
 800665c:	4b0f      	ldr	r3, [pc, #60]	; (800669c <get_from_tx_buffer+0x60>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	3301      	adds	r3, #1
 8006662:	4a0e      	ldr	r2, [pc, #56]	; (800669c <get_from_tx_buffer+0x60>)
 8006664:	6013      	str	r3, [r2, #0]
 8006666:	e010      	b.n	800668a <get_from_tx_buffer+0x4e>
	}
	else if(USARTx == DBG_UART)
 8006668:	4b0e      	ldr	r3, [pc, #56]	; (80066a4 <get_from_tx_buffer+0x68>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	687a      	ldr	r2, [r7, #4]
 800666e:	429a      	cmp	r2, r3
 8006670:	d10b      	bne.n	800668a <get_from_tx_buffer+0x4e>
	{

		data=tx_buffer_dbg[rd_pointer_dbg & (LEN_TX_BUFFER_DBG-1)];
 8006672:	4b0d      	ldr	r3, [pc, #52]	; (80066a8 <get_from_tx_buffer+0x6c>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800667a:	4a0c      	ldr	r2, [pc, #48]	; (80066ac <get_from_tx_buffer+0x70>)
 800667c:	5cd3      	ldrb	r3, [r2, r3]
 800667e:	73fb      	strb	r3, [r7, #15]
		rd_pointer_dbg++;
 8006680:	4b09      	ldr	r3, [pc, #36]	; (80066a8 <get_from_tx_buffer+0x6c>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	3301      	adds	r3, #1
 8006686:	4a08      	ldr	r2, [pc, #32]	; (80066a8 <get_from_tx_buffer+0x6c>)
 8006688:	6013      	str	r3, [r2, #0]
	}
	return data;
 800668a:	7bfb      	ldrb	r3, [r7, #15]
}
 800668c:	4618      	mov	r0, r3
 800668e:	3714      	adds	r7, #20
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr
 8006698:	20000024 	.word	0x20000024
 800669c:	20004fa0 	.word	0x20004fa0
 80066a0:	20004ba0 	.word	0x20004ba0
 80066a4:	20000028 	.word	0x20000028
 80066a8:	200053a8 	.word	0x200053a8
 80066ac:	20004fa8 	.word	0x20004fa8

080066b0 <get_from_rx_buffer>:
char get_from_rx_buffer(USART_TypeDef* USARTx)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b085      	sub	sp, #20
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
	char data;

	if(USARTx == RS485_UART)
 80066b8:	4b14      	ldr	r3, [pc, #80]	; (800670c <get_from_rx_buffer+0x5c>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	687a      	ldr	r2, [r7, #4]
 80066be:	429a      	cmp	r2, r3
 80066c0:	d10c      	bne.n	80066dc <get_from_rx_buffer+0x2c>
	{

		data=rx_buffer_rs485[rd_pointer_rx_rs485 & (LEN_RX_BUFFER_RS485-1)];
 80066c2:	4b13      	ldr	r3, [pc, #76]	; (8006710 <get_from_rx_buffer+0x60>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80066ca:	4a12      	ldr	r2, [pc, #72]	; (8006714 <get_from_rx_buffer+0x64>)
 80066cc:	5cd3      	ldrb	r3, [r2, r3]
 80066ce:	73fb      	strb	r3, [r7, #15]
		rd_pointer_rx_rs485++;
 80066d0:	4b0f      	ldr	r3, [pc, #60]	; (8006710 <get_from_rx_buffer+0x60>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	3301      	adds	r3, #1
 80066d6:	4a0e      	ldr	r2, [pc, #56]	; (8006710 <get_from_rx_buffer+0x60>)
 80066d8:	6013      	str	r3, [r2, #0]
 80066da:	e010      	b.n	80066fe <get_from_rx_buffer+0x4e>
	}
	else if(USARTx == DBG_UART)
 80066dc:	4b0e      	ldr	r3, [pc, #56]	; (8006718 <get_from_rx_buffer+0x68>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d10b      	bne.n	80066fe <get_from_rx_buffer+0x4e>
	{

		data=rx_buffer_dbg[rd_pointer_rx_dbg & (LEN_RX_BUFFER_DBG-1)];
 80066e6:	4b0d      	ldr	r3, [pc, #52]	; (800671c <get_from_rx_buffer+0x6c>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80066ee:	4a0c      	ldr	r2, [pc, #48]	; (8006720 <get_from_rx_buffer+0x70>)
 80066f0:	5cd3      	ldrb	r3, [r2, r3]
 80066f2:	73fb      	strb	r3, [r7, #15]
		rd_pointer_rx_dbg++;
 80066f4:	4b09      	ldr	r3, [pc, #36]	; (800671c <get_from_rx_buffer+0x6c>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	3301      	adds	r3, #1
 80066fa:	4a08      	ldr	r2, [pc, #32]	; (800671c <get_from_rx_buffer+0x6c>)
 80066fc:	6013      	str	r3, [r2, #0]
	}
	return data;
 80066fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006700:	4618      	mov	r0, r3
 8006702:	3714      	adds	r7, #20
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr
 800670c:	20000024 	.word	0x20000024
 8006710:	200057b0 	.word	0x200057b0
 8006714:	200053b0 	.word	0x200053b0
 8006718:	20000028 	.word	0x20000028
 800671c:	200077b8 	.word	0x200077b8
 8006720:	200057b8 	.word	0x200057b8

08006724 <usart_message_ready>:

	return 0;
}
//**************************************************************************************
char usart_message_ready(USART_TypeDef* USARTx, char delimiter, int maxLen)
{
 8006724:	b480      	push	{r7}
 8006726:	b089      	sub	sp, #36	; 0x24
 8006728:	af00      	add	r7, sp, #0
 800672a:	60f8      	str	r0, [r7, #12]
 800672c:	460b      	mov	r3, r1
 800672e:	607a      	str	r2, [r7, #4]
 8006730:	72fb      	strb	r3, [r7, #11]
	int checked = 0;
 8006732:	2300      	movs	r3, #0
 8006734:	61fb      	str	r3, [r7, #28]
	if (USARTx == DBG_UART)
 8006736:	4b29      	ldr	r3, [pc, #164]	; (80067dc <usart_message_ready+0xb8>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	68fa      	ldr	r2, [r7, #12]
 800673c:	429a      	cmp	r2, r3
 800673e:	d120      	bne.n	8006782 <usart_message_ready+0x5e>
	{
		unsigned long tail = rd_pointer_rx_dbg;
 8006740:	4b27      	ldr	r3, [pc, #156]	; (80067e0 <usart_message_ready+0xbc>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	61bb      	str	r3, [r7, #24]

		while ((wr_pointer_rx_dbg - tail) != 0)
 8006746:	e016      	b.n	8006776 <usart_message_ready+0x52>
		{
			if (rx_buffer_dbg[tail & (LEN_RX_BUFFER_DBG - 1)] == delimiter)
 8006748:	69bb      	ldr	r3, [r7, #24]
 800674a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800674e:	4a25      	ldr	r2, [pc, #148]	; (80067e4 <usart_message_ready+0xc0>)
 8006750:	5cd3      	ldrb	r3, [r2, r3]
 8006752:	b2db      	uxtb	r3, r3
 8006754:	7afa      	ldrb	r2, [r7, #11]
 8006756:	429a      	cmp	r2, r3
 8006758:	d101      	bne.n	800675e <usart_message_ready+0x3a>
				return 1;
 800675a:	2301      	movs	r3, #1
 800675c:	e037      	b.n	80067ce <usart_message_ready+0xaa>
			++tail;
 800675e:	69bb      	ldr	r3, [r7, #24]
 8006760:	3301      	adds	r3, #1
 8006762:	61bb      	str	r3, [r7, #24]
			++checked;
 8006764:	69fb      	ldr	r3, [r7, #28]
 8006766:	3301      	adds	r3, #1
 8006768:	61fb      	str	r3, [r7, #28]
			if(checked>= maxLen){
 800676a:	69fa      	ldr	r2, [r7, #28]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	429a      	cmp	r2, r3
 8006770:	db01      	blt.n	8006776 <usart_message_ready+0x52>
				return 1;
 8006772:	2301      	movs	r3, #1
 8006774:	e02b      	b.n	80067ce <usart_message_ready+0xaa>
		while ((wr_pointer_rx_dbg - tail) != 0)
 8006776:	4b1c      	ldr	r3, [pc, #112]	; (80067e8 <usart_message_ready+0xc4>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	69ba      	ldr	r2, [r7, #24]
 800677c:	429a      	cmp	r2, r3
 800677e:	d1e3      	bne.n	8006748 <usart_message_ready+0x24>
 8006780:	e024      	b.n	80067cc <usart_message_ready+0xa8>
			}
		}
	}
	else if (USARTx == RS485_UART)
 8006782:	4b1a      	ldr	r3, [pc, #104]	; (80067ec <usart_message_ready+0xc8>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	68fa      	ldr	r2, [r7, #12]
 8006788:	429a      	cmp	r2, r3
 800678a:	d11f      	bne.n	80067cc <usart_message_ready+0xa8>
	{
		unsigned long tail = rd_pointer_rx_rs485;
 800678c:	4b18      	ldr	r3, [pc, #96]	; (80067f0 <usart_message_ready+0xcc>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	617b      	str	r3, [r7, #20]

		while ((wr_pointer_rx_rs485 - tail) != 0)
 8006792:	e016      	b.n	80067c2 <usart_message_ready+0x9e>
		{
			if (rx_buffer_rs485[tail & (LEN_RX_BUFFER_RS485 - 1)] == delimiter)
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800679a:	4a16      	ldr	r2, [pc, #88]	; (80067f4 <usart_message_ready+0xd0>)
 800679c:	5cd3      	ldrb	r3, [r2, r3]
 800679e:	b2db      	uxtb	r3, r3
 80067a0:	7afa      	ldrb	r2, [r7, #11]
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d101      	bne.n	80067aa <usart_message_ready+0x86>
				return 1;
 80067a6:	2301      	movs	r3, #1
 80067a8:	e011      	b.n	80067ce <usart_message_ready+0xaa>
			++tail;
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	3301      	adds	r3, #1
 80067ae:	617b      	str	r3, [r7, #20]
			++checked;
 80067b0:	69fb      	ldr	r3, [r7, #28]
 80067b2:	3301      	adds	r3, #1
 80067b4:	61fb      	str	r3, [r7, #28]
			if(checked>= maxLen){
 80067b6:	69fa      	ldr	r2, [r7, #28]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	429a      	cmp	r2, r3
 80067bc:	db01      	blt.n	80067c2 <usart_message_ready+0x9e>
				return 1;
 80067be:	2301      	movs	r3, #1
 80067c0:	e005      	b.n	80067ce <usart_message_ready+0xaa>
		while ((wr_pointer_rx_rs485 - tail) != 0)
 80067c2:	4b0d      	ldr	r3, [pc, #52]	; (80067f8 <usart_message_ready+0xd4>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	697a      	ldr	r2, [r7, #20]
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d1e3      	bne.n	8006794 <usart_message_ready+0x70>
			}
		}
	}
	return 0;
 80067cc:	2300      	movs	r3, #0
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3724      	adds	r7, #36	; 0x24
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr
 80067da:	bf00      	nop
 80067dc:	20000028 	.word	0x20000028
 80067e0:	200077b8 	.word	0x200077b8
 80067e4:	200057b8 	.word	0x200057b8
 80067e8:	200077bc 	.word	0x200077bc
 80067ec:	20000024 	.word	0x20000024
 80067f0:	200057b0 	.word	0x200057b0
 80067f4:	200053b0 	.word	0x200053b0
 80067f8:	200057b4 	.word	0x200057b4

080067fc <read_usart_message>:
/*
 * Reads message from specified uart rx buffer into @dst until @delimiter character is encountered or @max_len exceeded.
 * Returns: number of characters read if successful, zero when there is no message ready to be read.
 */
unsigned int read_usart_message(char* dst, UART_HandleTypeDef* huart, int max_len, char delimiter)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b086      	sub	sp, #24
 8006800:	af00      	add	r7, sp, #0
 8006802:	60f8      	str	r0, [r7, #12]
 8006804:	60b9      	str	r1, [r7, #8]
 8006806:	607a      	str	r2, [r7, #4]
 8006808:	70fb      	strb	r3, [r7, #3]
	USART_TypeDef* USARTx = huart->Instance;
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	613b      	str	r3, [r7, #16]

	if (usart_message_ready(USARTx,delimiter, max_len))
 8006810:	78fb      	ldrb	r3, [r7, #3]
 8006812:	687a      	ldr	r2, [r7, #4]
 8006814:	4619      	mov	r1, r3
 8006816:	6938      	ldr	r0, [r7, #16]
 8006818:	f7ff ff84 	bl	8006724 <usart_message_ready>
 800681c:	4603      	mov	r3, r0
 800681e:	2b00      	cmp	r3, #0
 8006820:	d018      	beq.n	8006854 <read_usart_message+0x58>
	{
		int nr = 0;
 8006822:	2300      	movs	r3, #0
 8006824:	617b      	str	r3, [r7, #20]
		do
		{
			*dst = get_from_rx_buffer(USARTx);
 8006826:	6938      	ldr	r0, [r7, #16]
 8006828:	f7ff ff42 	bl	80066b0 <get_from_rx_buffer>
 800682c:	4603      	mov	r3, r0
 800682e:	461a      	mov	r2, r3
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	701a      	strb	r2, [r3, #0]
			++nr;
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	3301      	adds	r3, #1
 8006838:	617b      	str	r3, [r7, #20]
		} while (*dst++ != delimiter && nr < max_len);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	1c5a      	adds	r2, r3, #1
 800683e:	60fa      	str	r2, [r7, #12]
 8006840:	781b      	ldrb	r3, [r3, #0]
 8006842:	78fa      	ldrb	r2, [r7, #3]
 8006844:	429a      	cmp	r2, r3
 8006846:	d003      	beq.n	8006850 <read_usart_message+0x54>
 8006848:	697a      	ldr	r2, [r7, #20]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	429a      	cmp	r2, r3
 800684e:	dbea      	blt.n	8006826 <read_usart_message+0x2a>

		return nr;
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	e000      	b.n	8006856 <read_usart_message+0x5a>
	}
	return 0;
 8006854:	2300      	movs	r3, #0
}
 8006856:	4618      	mov	r0, r3
 8006858:	3718      	adds	r7, #24
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
	...

08006860 <send_usart_message>:
/*
 * Sends @size bytes from @src via specified uart. Nonblocking.
 * Returns: 0 when operation fails due to another message being transmitted, number of bytes written to uart buffer otherwise.
 */

unsigned int send_usart_message(char* src, UART_HandleTypeDef* huart, int size){
 8006860:	b580      	push	{r7, lr}
 8006862:	b086      	sub	sp, #24
 8006864:	af00      	add	r7, sp, #0
 8006866:	60f8      	str	r0, [r7, #12]
 8006868:	60b9      	str	r1, [r7, #8]
 800686a:	607a      	str	r2, [r7, #4]
	USART_TypeDef* USARTx = huart->Instance;
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	613b      	str	r3, [r7, #16]
	if (USARTx == DBG_UART){
 8006872:	4b21      	ldr	r3, [pc, #132]	; (80068f8 <send_usart_message+0x98>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	693a      	ldr	r2, [r7, #16]
 8006878:	429a      	cmp	r2, r3
 800687a:	d107      	bne.n	800688c <send_usart_message+0x2c>
		if(wr_pointer_dbg!=rd_pointer_dbg){
 800687c:	4b1f      	ldr	r3, [pc, #124]	; (80068fc <send_usart_message+0x9c>)
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	4b1f      	ldr	r3, [pc, #124]	; (8006900 <send_usart_message+0xa0>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	429a      	cmp	r2, r3
 8006886:	d00e      	beq.n	80068a6 <send_usart_message+0x46>
			return 0;//another message is in progress.
 8006888:	2300      	movs	r3, #0
 800688a:	e030      	b.n	80068ee <send_usart_message+0x8e>
		}

	}
	else if (USARTx == RS485_UART){
 800688c:	4b1d      	ldr	r3, [pc, #116]	; (8006904 <send_usart_message+0xa4>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	693a      	ldr	r2, [r7, #16]
 8006892:	429a      	cmp	r2, r3
 8006894:	d107      	bne.n	80068a6 <send_usart_message+0x46>
		if(wr_pointer_rs485!=rd_pointer_rs485){
 8006896:	4b1c      	ldr	r3, [pc, #112]	; (8006908 <send_usart_message+0xa8>)
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	4b1c      	ldr	r3, [pc, #112]	; (800690c <send_usart_message+0xac>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	429a      	cmp	r2, r3
 80068a0:	d001      	beq.n	80068a6 <send_usart_message+0x46>
			return 0;//another message is in progress.
 80068a2:	2300      	movs	r3, #0
 80068a4:	e023      	b.n	80068ee <send_usart_message+0x8e>
		}
	}

	int nr = 0;
 80068a6:	2300      	movs	r3, #0
 80068a8:	617b      	str	r3, [r7, #20]
	do{
		put_in_tx_buffer(*(src + nr), USARTx);
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	68fa      	ldr	r2, [r7, #12]
 80068ae:	4413      	add	r3, r2
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	6939      	ldr	r1, [r7, #16]
 80068b4:	4618      	mov	r0, r3
 80068b6:	f7ff fe6f 	bl	8006598 <put_in_tx_buffer>
		nr++;
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	3301      	adds	r3, #1
 80068be:	617b      	str	r3, [r7, #20]
	} while (nr < size);
 80068c0:	697a      	ldr	r2, [r7, #20]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	429a      	cmp	r2, r3
 80068c6:	dbf0      	blt.n	80068aa <send_usart_message+0x4a>

	if(nr>0){
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	dd0e      	ble.n	80068ec <send_usart_message+0x8c>
		USARTx->DR = get_from_tx_buffer(USARTx);
 80068ce:	6938      	ldr	r0, [r7, #16]
 80068d0:	f7ff feb4 	bl	800663c <get_from_tx_buffer>
 80068d4:	4603      	mov	r3, r0
 80068d6:	461a      	mov	r2, r3
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	605a      	str	r2, [r3, #4]
		__HAL_UART_ENABLE_IT(huart, UART_IT_TXE); //turn on tx interrupt forever (until turned off in IRQ handler)
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	68da      	ldr	r2, [r3, #12]
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80068ea:	60da      	str	r2, [r3, #12]
	}
	return nr;
 80068ec:	697b      	ldr	r3, [r7, #20]
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3718      	adds	r7, #24
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}
 80068f6:	bf00      	nop
 80068f8:	20000028 	.word	0x20000028
 80068fc:	200053ac 	.word	0x200053ac
 8006900:	200053a8 	.word	0x200053a8
 8006904:	20000024 	.word	0x20000024
 8006908:	20004fa4 	.word	0x20004fa4
 800690c:	20004fa0 	.word	0x20004fa0

08006910 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006910:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006948 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006914:	480d      	ldr	r0, [pc, #52]	; (800694c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006916:	490e      	ldr	r1, [pc, #56]	; (8006950 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006918:	4a0e      	ldr	r2, [pc, #56]	; (8006954 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800691a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800691c:	e002      	b.n	8006924 <LoopCopyDataInit>

0800691e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800691e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006920:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006922:	3304      	adds	r3, #4

08006924 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006924:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006926:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006928:	d3f9      	bcc.n	800691e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800692a:	4a0b      	ldr	r2, [pc, #44]	; (8006958 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800692c:	4c0b      	ldr	r4, [pc, #44]	; (800695c <LoopFillZerobss+0x26>)
  movs r3, #0
 800692e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006930:	e001      	b.n	8006936 <LoopFillZerobss>

08006932 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006932:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006934:	3204      	adds	r2, #4

08006936 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006936:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006938:	d3fb      	bcc.n	8006932 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800693a:	f7ff fdb7 	bl	80064ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800693e:	f004 f943 	bl	800abc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006942:	f7fd fd6d 	bl	8004420 <main>
  bx  lr    
 8006946:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006948:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800694c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006950:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8006954:	0800db14 	.word	0x0800db14
  ldr r2, =_sbss
 8006958:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 800695c:	200077d4 	.word	0x200077d4

08006960 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006960:	e7fe      	b.n	8006960 <ADC_IRQHandler>
	...

08006964 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006968:	4b0e      	ldr	r3, [pc, #56]	; (80069a4 <HAL_Init+0x40>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a0d      	ldr	r2, [pc, #52]	; (80069a4 <HAL_Init+0x40>)
 800696e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006972:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006974:	4b0b      	ldr	r3, [pc, #44]	; (80069a4 <HAL_Init+0x40>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a0a      	ldr	r2, [pc, #40]	; (80069a4 <HAL_Init+0x40>)
 800697a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800697e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006980:	4b08      	ldr	r3, [pc, #32]	; (80069a4 <HAL_Init+0x40>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a07      	ldr	r2, [pc, #28]	; (80069a4 <HAL_Init+0x40>)
 8006986:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800698a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800698c:	2003      	movs	r0, #3
 800698e:	f000 f94f 	bl	8006c30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006992:	2000      	movs	r0, #0
 8006994:	f000 f808 	bl	80069a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006998:	f7ff fa1e 	bl	8005dd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800699c:	2300      	movs	r3, #0
}
 800699e:	4618      	mov	r0, r3
 80069a0:	bd80      	pop	{r7, pc}
 80069a2:	bf00      	nop
 80069a4:	40023c00 	.word	0x40023c00

080069a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b082      	sub	sp, #8
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80069b0:	4b12      	ldr	r3, [pc, #72]	; (80069fc <HAL_InitTick+0x54>)
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	4b12      	ldr	r3, [pc, #72]	; (8006a00 <HAL_InitTick+0x58>)
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	4619      	mov	r1, r3
 80069ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80069be:	fbb3 f3f1 	udiv	r3, r3, r1
 80069c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80069c6:	4618      	mov	r0, r3
 80069c8:	f000 f967 	bl	8006c9a <HAL_SYSTICK_Config>
 80069cc:	4603      	mov	r3, r0
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d001      	beq.n	80069d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	e00e      	b.n	80069f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2b0f      	cmp	r3, #15
 80069da:	d80a      	bhi.n	80069f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80069dc:	2200      	movs	r2, #0
 80069de:	6879      	ldr	r1, [r7, #4]
 80069e0:	f04f 30ff 	mov.w	r0, #4294967295
 80069e4:	f000 f92f 	bl	8006c46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80069e8:	4a06      	ldr	r2, [pc, #24]	; (8006a04 <HAL_InitTick+0x5c>)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80069ee:	2300      	movs	r3, #0
 80069f0:	e000      	b.n	80069f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80069f2:	2301      	movs	r3, #1
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3708      	adds	r7, #8
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}
 80069fc:	20000020 	.word	0x20000020
 8006a00:	20000030 	.word	0x20000030
 8006a04:	2000002c 	.word	0x2000002c

08006a08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006a0c:	4b06      	ldr	r3, [pc, #24]	; (8006a28 <HAL_IncTick+0x20>)
 8006a0e:	781b      	ldrb	r3, [r3, #0]
 8006a10:	461a      	mov	r2, r3
 8006a12:	4b06      	ldr	r3, [pc, #24]	; (8006a2c <HAL_IncTick+0x24>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4413      	add	r3, r2
 8006a18:	4a04      	ldr	r2, [pc, #16]	; (8006a2c <HAL_IncTick+0x24>)
 8006a1a:	6013      	str	r3, [r2, #0]
}
 8006a1c:	bf00      	nop
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a24:	4770      	bx	lr
 8006a26:	bf00      	nop
 8006a28:	20000030 	.word	0x20000030
 8006a2c:	200077c0 	.word	0x200077c0

08006a30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006a30:	b480      	push	{r7}
 8006a32:	af00      	add	r7, sp, #0
  return uwTick;
 8006a34:	4b03      	ldr	r3, [pc, #12]	; (8006a44 <HAL_GetTick+0x14>)
 8006a36:	681b      	ldr	r3, [r3, #0]
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr
 8006a42:	bf00      	nop
 8006a44:	200077c0 	.word	0x200077c0

08006a48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b084      	sub	sp, #16
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006a50:	f7ff ffee 	bl	8006a30 <HAL_GetTick>
 8006a54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a60:	d005      	beq.n	8006a6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006a62:	4b0a      	ldr	r3, [pc, #40]	; (8006a8c <HAL_Delay+0x44>)
 8006a64:	781b      	ldrb	r3, [r3, #0]
 8006a66:	461a      	mov	r2, r3
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	4413      	add	r3, r2
 8006a6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006a6e:	bf00      	nop
 8006a70:	f7ff ffde 	bl	8006a30 <HAL_GetTick>
 8006a74:	4602      	mov	r2, r0
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	1ad3      	subs	r3, r2, r3
 8006a7a:	68fa      	ldr	r2, [r7, #12]
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d8f7      	bhi.n	8006a70 <HAL_Delay+0x28>
  {
  }
}
 8006a80:	bf00      	nop
 8006a82:	bf00      	nop
 8006a84:	3710      	adds	r7, #16
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}
 8006a8a:	bf00      	nop
 8006a8c:	20000030 	.word	0x20000030

08006a90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b085      	sub	sp, #20
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f003 0307 	and.w	r3, r3, #7
 8006a9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006aa0:	4b0c      	ldr	r3, [pc, #48]	; (8006ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006aa6:	68ba      	ldr	r2, [r7, #8]
 8006aa8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006aac:	4013      	ands	r3, r2
 8006aae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006ab8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006abc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ac0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006ac2:	4a04      	ldr	r2, [pc, #16]	; (8006ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	60d3      	str	r3, [r2, #12]
}
 8006ac8:	bf00      	nop
 8006aca:	3714      	adds	r7, #20
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr
 8006ad4:	e000ed00 	.word	0xe000ed00

08006ad8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006adc:	4b04      	ldr	r3, [pc, #16]	; (8006af0 <__NVIC_GetPriorityGrouping+0x18>)
 8006ade:	68db      	ldr	r3, [r3, #12]
 8006ae0:	0a1b      	lsrs	r3, r3, #8
 8006ae2:	f003 0307 	and.w	r3, r3, #7
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr
 8006af0:	e000ed00 	.word	0xe000ed00

08006af4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b083      	sub	sp, #12
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	4603      	mov	r3, r0
 8006afc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	db0b      	blt.n	8006b1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006b06:	79fb      	ldrb	r3, [r7, #7]
 8006b08:	f003 021f 	and.w	r2, r3, #31
 8006b0c:	4907      	ldr	r1, [pc, #28]	; (8006b2c <__NVIC_EnableIRQ+0x38>)
 8006b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b12:	095b      	lsrs	r3, r3, #5
 8006b14:	2001      	movs	r0, #1
 8006b16:	fa00 f202 	lsl.w	r2, r0, r2
 8006b1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006b1e:	bf00      	nop
 8006b20:	370c      	adds	r7, #12
 8006b22:	46bd      	mov	sp, r7
 8006b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b28:	4770      	bx	lr
 8006b2a:	bf00      	nop
 8006b2c:	e000e100 	.word	0xe000e100

08006b30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b083      	sub	sp, #12
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	4603      	mov	r3, r0
 8006b38:	6039      	str	r1, [r7, #0]
 8006b3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006b3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	db0a      	blt.n	8006b5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	b2da      	uxtb	r2, r3
 8006b48:	490c      	ldr	r1, [pc, #48]	; (8006b7c <__NVIC_SetPriority+0x4c>)
 8006b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b4e:	0112      	lsls	r2, r2, #4
 8006b50:	b2d2      	uxtb	r2, r2
 8006b52:	440b      	add	r3, r1
 8006b54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006b58:	e00a      	b.n	8006b70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	b2da      	uxtb	r2, r3
 8006b5e:	4908      	ldr	r1, [pc, #32]	; (8006b80 <__NVIC_SetPriority+0x50>)
 8006b60:	79fb      	ldrb	r3, [r7, #7]
 8006b62:	f003 030f 	and.w	r3, r3, #15
 8006b66:	3b04      	subs	r3, #4
 8006b68:	0112      	lsls	r2, r2, #4
 8006b6a:	b2d2      	uxtb	r2, r2
 8006b6c:	440b      	add	r3, r1
 8006b6e:	761a      	strb	r2, [r3, #24]
}
 8006b70:	bf00      	nop
 8006b72:	370c      	adds	r7, #12
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr
 8006b7c:	e000e100 	.word	0xe000e100
 8006b80:	e000ed00 	.word	0xe000ed00

08006b84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b089      	sub	sp, #36	; 0x24
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	60f8      	str	r0, [r7, #12]
 8006b8c:	60b9      	str	r1, [r7, #8]
 8006b8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f003 0307 	and.w	r3, r3, #7
 8006b96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006b98:	69fb      	ldr	r3, [r7, #28]
 8006b9a:	f1c3 0307 	rsb	r3, r3, #7
 8006b9e:	2b04      	cmp	r3, #4
 8006ba0:	bf28      	it	cs
 8006ba2:	2304      	movcs	r3, #4
 8006ba4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006ba6:	69fb      	ldr	r3, [r7, #28]
 8006ba8:	3304      	adds	r3, #4
 8006baa:	2b06      	cmp	r3, #6
 8006bac:	d902      	bls.n	8006bb4 <NVIC_EncodePriority+0x30>
 8006bae:	69fb      	ldr	r3, [r7, #28]
 8006bb0:	3b03      	subs	r3, #3
 8006bb2:	e000      	b.n	8006bb6 <NVIC_EncodePriority+0x32>
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8006bbc:	69bb      	ldr	r3, [r7, #24]
 8006bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8006bc2:	43da      	mvns	r2, r3
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	401a      	ands	r2, r3
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006bcc:	f04f 31ff 	mov.w	r1, #4294967295
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8006bd6:	43d9      	mvns	r1, r3
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006bdc:	4313      	orrs	r3, r2
         );
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3724      	adds	r7, #36	; 0x24
 8006be2:	46bd      	mov	sp, r7
 8006be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be8:	4770      	bx	lr
	...

08006bec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b082      	sub	sp, #8
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	3b01      	subs	r3, #1
 8006bf8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006bfc:	d301      	bcc.n	8006c02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006bfe:	2301      	movs	r3, #1
 8006c00:	e00f      	b.n	8006c22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006c02:	4a0a      	ldr	r2, [pc, #40]	; (8006c2c <SysTick_Config+0x40>)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	3b01      	subs	r3, #1
 8006c08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006c0a:	210f      	movs	r1, #15
 8006c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c10:	f7ff ff8e 	bl	8006b30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006c14:	4b05      	ldr	r3, [pc, #20]	; (8006c2c <SysTick_Config+0x40>)
 8006c16:	2200      	movs	r2, #0
 8006c18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006c1a:	4b04      	ldr	r3, [pc, #16]	; (8006c2c <SysTick_Config+0x40>)
 8006c1c:	2207      	movs	r2, #7
 8006c1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006c20:	2300      	movs	r3, #0
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3708      	adds	r7, #8
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}
 8006c2a:	bf00      	nop
 8006c2c:	e000e010 	.word	0xe000e010

08006c30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b082      	sub	sp, #8
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f7ff ff29 	bl	8006a90 <__NVIC_SetPriorityGrouping>
}
 8006c3e:	bf00      	nop
 8006c40:	3708      	adds	r7, #8
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}

08006c46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006c46:	b580      	push	{r7, lr}
 8006c48:	b086      	sub	sp, #24
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	60b9      	str	r1, [r7, #8]
 8006c50:	607a      	str	r2, [r7, #4]
 8006c52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006c54:	2300      	movs	r3, #0
 8006c56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006c58:	f7ff ff3e 	bl	8006ad8 <__NVIC_GetPriorityGrouping>
 8006c5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006c5e:	687a      	ldr	r2, [r7, #4]
 8006c60:	68b9      	ldr	r1, [r7, #8]
 8006c62:	6978      	ldr	r0, [r7, #20]
 8006c64:	f7ff ff8e 	bl	8006b84 <NVIC_EncodePriority>
 8006c68:	4602      	mov	r2, r0
 8006c6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c6e:	4611      	mov	r1, r2
 8006c70:	4618      	mov	r0, r3
 8006c72:	f7ff ff5d 	bl	8006b30 <__NVIC_SetPriority>
}
 8006c76:	bf00      	nop
 8006c78:	3718      	adds	r7, #24
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}

08006c7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006c7e:	b580      	push	{r7, lr}
 8006c80:	b082      	sub	sp, #8
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	4603      	mov	r3, r0
 8006c86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f7ff ff31 	bl	8006af4 <__NVIC_EnableIRQ>
}
 8006c92:	bf00      	nop
 8006c94:	3708      	adds	r7, #8
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}

08006c9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006c9a:	b580      	push	{r7, lr}
 8006c9c:	b082      	sub	sp, #8
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f7ff ffa2 	bl	8006bec <SysTick_Config>
 8006ca8:	4603      	mov	r3, r0
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3708      	adds	r7, #8
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}

08006cb2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006cb2:	b580      	push	{r7, lr}
 8006cb4:	b084      	sub	sp, #16
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cbe:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006cc0:	f7ff feb6 	bl	8006a30 <HAL_GetTick>
 8006cc4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006ccc:	b2db      	uxtb	r3, r3
 8006cce:	2b02      	cmp	r3, #2
 8006cd0:	d008      	beq.n	8006ce4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2280      	movs	r2, #128	; 0x80
 8006cd6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	e052      	b.n	8006d8a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	681a      	ldr	r2, [r3, #0]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f022 0216 	bic.w	r2, r2, #22
 8006cf2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	695a      	ldr	r2, [r3, #20]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d02:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d103      	bne.n	8006d14 <HAL_DMA_Abort+0x62>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d007      	beq.n	8006d24 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f022 0208 	bic.w	r2, r2, #8
 8006d22:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f022 0201 	bic.w	r2, r2, #1
 8006d32:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006d34:	e013      	b.n	8006d5e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006d36:	f7ff fe7b 	bl	8006a30 <HAL_GetTick>
 8006d3a:	4602      	mov	r2, r0
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	1ad3      	subs	r3, r2, r3
 8006d40:	2b05      	cmp	r3, #5
 8006d42:	d90c      	bls.n	8006d5e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2220      	movs	r2, #32
 8006d48:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2203      	movs	r2, #3
 8006d4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2200      	movs	r2, #0
 8006d56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006d5a:	2303      	movs	r3, #3
 8006d5c:	e015      	b.n	8006d8a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f003 0301 	and.w	r3, r3, #1
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d1e4      	bne.n	8006d36 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d70:	223f      	movs	r2, #63	; 0x3f
 8006d72:	409a      	lsls	r2, r3
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2200      	movs	r2, #0
 8006d84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8006d88:	2300      	movs	r3, #0
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3710      	adds	r7, #16
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}

08006d92 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006d92:	b480      	push	{r7}
 8006d94:	b083      	sub	sp, #12
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	2b02      	cmp	r3, #2
 8006da4:	d004      	beq.n	8006db0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2280      	movs	r2, #128	; 0x80
 8006daa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006dac:	2301      	movs	r3, #1
 8006dae:	e00c      	b.n	8006dca <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2205      	movs	r2, #5
 8006db4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f022 0201 	bic.w	r2, r2, #1
 8006dc6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006dc8:	2300      	movs	r3, #0
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	370c      	adds	r7, #12
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr
	...

08006dd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b089      	sub	sp, #36	; 0x24
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006de2:	2300      	movs	r3, #0
 8006de4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006de6:	2300      	movs	r3, #0
 8006de8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006dea:	2300      	movs	r3, #0
 8006dec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006dee:	2300      	movs	r3, #0
 8006df0:	61fb      	str	r3, [r7, #28]
 8006df2:	e16b      	b.n	80070cc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006df4:	2201      	movs	r2, #1
 8006df6:	69fb      	ldr	r3, [r7, #28]
 8006df8:	fa02 f303 	lsl.w	r3, r2, r3
 8006dfc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	697a      	ldr	r2, [r7, #20]
 8006e04:	4013      	ands	r3, r2
 8006e06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006e08:	693a      	ldr	r2, [r7, #16]
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	f040 815a 	bne.w	80070c6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	f003 0303 	and.w	r3, r3, #3
 8006e1a:	2b01      	cmp	r3, #1
 8006e1c:	d005      	beq.n	8006e2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006e26:	2b02      	cmp	r3, #2
 8006e28:	d130      	bne.n	8006e8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006e30:	69fb      	ldr	r3, [r7, #28]
 8006e32:	005b      	lsls	r3, r3, #1
 8006e34:	2203      	movs	r2, #3
 8006e36:	fa02 f303 	lsl.w	r3, r2, r3
 8006e3a:	43db      	mvns	r3, r3
 8006e3c:	69ba      	ldr	r2, [r7, #24]
 8006e3e:	4013      	ands	r3, r2
 8006e40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	68da      	ldr	r2, [r3, #12]
 8006e46:	69fb      	ldr	r3, [r7, #28]
 8006e48:	005b      	lsls	r3, r3, #1
 8006e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e4e:	69ba      	ldr	r2, [r7, #24]
 8006e50:	4313      	orrs	r3, r2
 8006e52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	69ba      	ldr	r2, [r7, #24]
 8006e58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006e60:	2201      	movs	r2, #1
 8006e62:	69fb      	ldr	r3, [r7, #28]
 8006e64:	fa02 f303 	lsl.w	r3, r2, r3
 8006e68:	43db      	mvns	r3, r3
 8006e6a:	69ba      	ldr	r2, [r7, #24]
 8006e6c:	4013      	ands	r3, r2
 8006e6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	091b      	lsrs	r3, r3, #4
 8006e76:	f003 0201 	and.w	r2, r3, #1
 8006e7a:	69fb      	ldr	r3, [r7, #28]
 8006e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e80:	69ba      	ldr	r2, [r7, #24]
 8006e82:	4313      	orrs	r3, r2
 8006e84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	69ba      	ldr	r2, [r7, #24]
 8006e8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	f003 0303 	and.w	r3, r3, #3
 8006e94:	2b03      	cmp	r3, #3
 8006e96:	d017      	beq.n	8006ec8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	68db      	ldr	r3, [r3, #12]
 8006e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006e9e:	69fb      	ldr	r3, [r7, #28]
 8006ea0:	005b      	lsls	r3, r3, #1
 8006ea2:	2203      	movs	r2, #3
 8006ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ea8:	43db      	mvns	r3, r3
 8006eaa:	69ba      	ldr	r2, [r7, #24]
 8006eac:	4013      	ands	r3, r2
 8006eae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	689a      	ldr	r2, [r3, #8]
 8006eb4:	69fb      	ldr	r3, [r7, #28]
 8006eb6:	005b      	lsls	r3, r3, #1
 8006eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8006ebc:	69ba      	ldr	r2, [r7, #24]
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	69ba      	ldr	r2, [r7, #24]
 8006ec6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	f003 0303 	and.w	r3, r3, #3
 8006ed0:	2b02      	cmp	r3, #2
 8006ed2:	d123      	bne.n	8006f1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006ed4:	69fb      	ldr	r3, [r7, #28]
 8006ed6:	08da      	lsrs	r2, r3, #3
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	3208      	adds	r2, #8
 8006edc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006ee2:	69fb      	ldr	r3, [r7, #28]
 8006ee4:	f003 0307 	and.w	r3, r3, #7
 8006ee8:	009b      	lsls	r3, r3, #2
 8006eea:	220f      	movs	r2, #15
 8006eec:	fa02 f303 	lsl.w	r3, r2, r3
 8006ef0:	43db      	mvns	r3, r3
 8006ef2:	69ba      	ldr	r2, [r7, #24]
 8006ef4:	4013      	ands	r3, r2
 8006ef6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	691a      	ldr	r2, [r3, #16]
 8006efc:	69fb      	ldr	r3, [r7, #28]
 8006efe:	f003 0307 	and.w	r3, r3, #7
 8006f02:	009b      	lsls	r3, r3, #2
 8006f04:	fa02 f303 	lsl.w	r3, r2, r3
 8006f08:	69ba      	ldr	r2, [r7, #24]
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006f0e:	69fb      	ldr	r3, [r7, #28]
 8006f10:	08da      	lsrs	r2, r3, #3
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	3208      	adds	r2, #8
 8006f16:	69b9      	ldr	r1, [r7, #24]
 8006f18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006f22:	69fb      	ldr	r3, [r7, #28]
 8006f24:	005b      	lsls	r3, r3, #1
 8006f26:	2203      	movs	r2, #3
 8006f28:	fa02 f303 	lsl.w	r3, r2, r3
 8006f2c:	43db      	mvns	r3, r3
 8006f2e:	69ba      	ldr	r2, [r7, #24]
 8006f30:	4013      	ands	r3, r2
 8006f32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	f003 0203 	and.w	r2, r3, #3
 8006f3c:	69fb      	ldr	r3, [r7, #28]
 8006f3e:	005b      	lsls	r3, r3, #1
 8006f40:	fa02 f303 	lsl.w	r3, r2, r3
 8006f44:	69ba      	ldr	r2, [r7, #24]
 8006f46:	4313      	orrs	r3, r2
 8006f48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	69ba      	ldr	r2, [r7, #24]
 8006f4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	f000 80b4 	beq.w	80070c6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006f5e:	2300      	movs	r3, #0
 8006f60:	60fb      	str	r3, [r7, #12]
 8006f62:	4b60      	ldr	r3, [pc, #384]	; (80070e4 <HAL_GPIO_Init+0x30c>)
 8006f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f66:	4a5f      	ldr	r2, [pc, #380]	; (80070e4 <HAL_GPIO_Init+0x30c>)
 8006f68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006f6c:	6453      	str	r3, [r2, #68]	; 0x44
 8006f6e:	4b5d      	ldr	r3, [pc, #372]	; (80070e4 <HAL_GPIO_Init+0x30c>)
 8006f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f76:	60fb      	str	r3, [r7, #12]
 8006f78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006f7a:	4a5b      	ldr	r2, [pc, #364]	; (80070e8 <HAL_GPIO_Init+0x310>)
 8006f7c:	69fb      	ldr	r3, [r7, #28]
 8006f7e:	089b      	lsrs	r3, r3, #2
 8006f80:	3302      	adds	r3, #2
 8006f82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006f88:	69fb      	ldr	r3, [r7, #28]
 8006f8a:	f003 0303 	and.w	r3, r3, #3
 8006f8e:	009b      	lsls	r3, r3, #2
 8006f90:	220f      	movs	r2, #15
 8006f92:	fa02 f303 	lsl.w	r3, r2, r3
 8006f96:	43db      	mvns	r3, r3
 8006f98:	69ba      	ldr	r2, [r7, #24]
 8006f9a:	4013      	ands	r3, r2
 8006f9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	4a52      	ldr	r2, [pc, #328]	; (80070ec <HAL_GPIO_Init+0x314>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d02b      	beq.n	8006ffe <HAL_GPIO_Init+0x226>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	4a51      	ldr	r2, [pc, #324]	; (80070f0 <HAL_GPIO_Init+0x318>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d025      	beq.n	8006ffa <HAL_GPIO_Init+0x222>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	4a50      	ldr	r2, [pc, #320]	; (80070f4 <HAL_GPIO_Init+0x31c>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d01f      	beq.n	8006ff6 <HAL_GPIO_Init+0x21e>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	4a4f      	ldr	r2, [pc, #316]	; (80070f8 <HAL_GPIO_Init+0x320>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d019      	beq.n	8006ff2 <HAL_GPIO_Init+0x21a>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	4a4e      	ldr	r2, [pc, #312]	; (80070fc <HAL_GPIO_Init+0x324>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d013      	beq.n	8006fee <HAL_GPIO_Init+0x216>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	4a4d      	ldr	r2, [pc, #308]	; (8007100 <HAL_GPIO_Init+0x328>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d00d      	beq.n	8006fea <HAL_GPIO_Init+0x212>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	4a4c      	ldr	r2, [pc, #304]	; (8007104 <HAL_GPIO_Init+0x32c>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d007      	beq.n	8006fe6 <HAL_GPIO_Init+0x20e>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	4a4b      	ldr	r2, [pc, #300]	; (8007108 <HAL_GPIO_Init+0x330>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d101      	bne.n	8006fe2 <HAL_GPIO_Init+0x20a>
 8006fde:	2307      	movs	r3, #7
 8006fe0:	e00e      	b.n	8007000 <HAL_GPIO_Init+0x228>
 8006fe2:	2308      	movs	r3, #8
 8006fe4:	e00c      	b.n	8007000 <HAL_GPIO_Init+0x228>
 8006fe6:	2306      	movs	r3, #6
 8006fe8:	e00a      	b.n	8007000 <HAL_GPIO_Init+0x228>
 8006fea:	2305      	movs	r3, #5
 8006fec:	e008      	b.n	8007000 <HAL_GPIO_Init+0x228>
 8006fee:	2304      	movs	r3, #4
 8006ff0:	e006      	b.n	8007000 <HAL_GPIO_Init+0x228>
 8006ff2:	2303      	movs	r3, #3
 8006ff4:	e004      	b.n	8007000 <HAL_GPIO_Init+0x228>
 8006ff6:	2302      	movs	r3, #2
 8006ff8:	e002      	b.n	8007000 <HAL_GPIO_Init+0x228>
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	e000      	b.n	8007000 <HAL_GPIO_Init+0x228>
 8006ffe:	2300      	movs	r3, #0
 8007000:	69fa      	ldr	r2, [r7, #28]
 8007002:	f002 0203 	and.w	r2, r2, #3
 8007006:	0092      	lsls	r2, r2, #2
 8007008:	4093      	lsls	r3, r2
 800700a:	69ba      	ldr	r2, [r7, #24]
 800700c:	4313      	orrs	r3, r2
 800700e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007010:	4935      	ldr	r1, [pc, #212]	; (80070e8 <HAL_GPIO_Init+0x310>)
 8007012:	69fb      	ldr	r3, [r7, #28]
 8007014:	089b      	lsrs	r3, r3, #2
 8007016:	3302      	adds	r3, #2
 8007018:	69ba      	ldr	r2, [r7, #24]
 800701a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800701e:	4b3b      	ldr	r3, [pc, #236]	; (800710c <HAL_GPIO_Init+0x334>)
 8007020:	689b      	ldr	r3, [r3, #8]
 8007022:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	43db      	mvns	r3, r3
 8007028:	69ba      	ldr	r2, [r7, #24]
 800702a:	4013      	ands	r3, r2
 800702c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007036:	2b00      	cmp	r3, #0
 8007038:	d003      	beq.n	8007042 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800703a:	69ba      	ldr	r2, [r7, #24]
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	4313      	orrs	r3, r2
 8007040:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007042:	4a32      	ldr	r2, [pc, #200]	; (800710c <HAL_GPIO_Init+0x334>)
 8007044:	69bb      	ldr	r3, [r7, #24]
 8007046:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007048:	4b30      	ldr	r3, [pc, #192]	; (800710c <HAL_GPIO_Init+0x334>)
 800704a:	68db      	ldr	r3, [r3, #12]
 800704c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	43db      	mvns	r3, r3
 8007052:	69ba      	ldr	r2, [r7, #24]
 8007054:	4013      	ands	r3, r2
 8007056:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007060:	2b00      	cmp	r3, #0
 8007062:	d003      	beq.n	800706c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007064:	69ba      	ldr	r2, [r7, #24]
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	4313      	orrs	r3, r2
 800706a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800706c:	4a27      	ldr	r2, [pc, #156]	; (800710c <HAL_GPIO_Init+0x334>)
 800706e:	69bb      	ldr	r3, [r7, #24]
 8007070:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007072:	4b26      	ldr	r3, [pc, #152]	; (800710c <HAL_GPIO_Init+0x334>)
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	43db      	mvns	r3, r3
 800707c:	69ba      	ldr	r2, [r7, #24]
 800707e:	4013      	ands	r3, r2
 8007080:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800708a:	2b00      	cmp	r3, #0
 800708c:	d003      	beq.n	8007096 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800708e:	69ba      	ldr	r2, [r7, #24]
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	4313      	orrs	r3, r2
 8007094:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007096:	4a1d      	ldr	r2, [pc, #116]	; (800710c <HAL_GPIO_Init+0x334>)
 8007098:	69bb      	ldr	r3, [r7, #24]
 800709a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800709c:	4b1b      	ldr	r3, [pc, #108]	; (800710c <HAL_GPIO_Init+0x334>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	43db      	mvns	r3, r3
 80070a6:	69ba      	ldr	r2, [r7, #24]
 80070a8:	4013      	ands	r3, r2
 80070aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d003      	beq.n	80070c0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80070b8:	69ba      	ldr	r2, [r7, #24]
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	4313      	orrs	r3, r2
 80070be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80070c0:	4a12      	ldr	r2, [pc, #72]	; (800710c <HAL_GPIO_Init+0x334>)
 80070c2:	69bb      	ldr	r3, [r7, #24]
 80070c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80070c6:	69fb      	ldr	r3, [r7, #28]
 80070c8:	3301      	adds	r3, #1
 80070ca:	61fb      	str	r3, [r7, #28]
 80070cc:	69fb      	ldr	r3, [r7, #28]
 80070ce:	2b0f      	cmp	r3, #15
 80070d0:	f67f ae90 	bls.w	8006df4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80070d4:	bf00      	nop
 80070d6:	bf00      	nop
 80070d8:	3724      	adds	r7, #36	; 0x24
 80070da:	46bd      	mov	sp, r7
 80070dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e0:	4770      	bx	lr
 80070e2:	bf00      	nop
 80070e4:	40023800 	.word	0x40023800
 80070e8:	40013800 	.word	0x40013800
 80070ec:	40020000 	.word	0x40020000
 80070f0:	40020400 	.word	0x40020400
 80070f4:	40020800 	.word	0x40020800
 80070f8:	40020c00 	.word	0x40020c00
 80070fc:	40021000 	.word	0x40021000
 8007100:	40021400 	.word	0x40021400
 8007104:	40021800 	.word	0x40021800
 8007108:	40021c00 	.word	0x40021c00
 800710c:	40013c00 	.word	0x40013c00

08007110 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007110:	b480      	push	{r7}
 8007112:	b083      	sub	sp, #12
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	460b      	mov	r3, r1
 800711a:	807b      	strh	r3, [r7, #2]
 800711c:	4613      	mov	r3, r2
 800711e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007120:	787b      	ldrb	r3, [r7, #1]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d003      	beq.n	800712e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007126:	887a      	ldrh	r2, [r7, #2]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800712c:	e003      	b.n	8007136 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800712e:	887b      	ldrh	r3, [r7, #2]
 8007130:	041a      	lsls	r2, r3, #16
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	619a      	str	r2, [r3, #24]
}
 8007136:	bf00      	nop
 8007138:	370c      	adds	r7, #12
 800713a:	46bd      	mov	sp, r7
 800713c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007140:	4770      	bx	lr
	...

08007144 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b082      	sub	sp, #8
 8007148:	af00      	add	r7, sp, #0
 800714a:	4603      	mov	r3, r0
 800714c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800714e:	4b08      	ldr	r3, [pc, #32]	; (8007170 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007150:	695a      	ldr	r2, [r3, #20]
 8007152:	88fb      	ldrh	r3, [r7, #6]
 8007154:	4013      	ands	r3, r2
 8007156:	2b00      	cmp	r3, #0
 8007158:	d006      	beq.n	8007168 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800715a:	4a05      	ldr	r2, [pc, #20]	; (8007170 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800715c:	88fb      	ldrh	r3, [r7, #6]
 800715e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007160:	88fb      	ldrh	r3, [r7, #6]
 8007162:	4618      	mov	r0, r3
 8007164:	f7fa fe1c 	bl	8001da0 <HAL_GPIO_EXTI_Callback>
  }
}
 8007168:	bf00      	nop
 800716a:	3708      	adds	r7, #8
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}
 8007170:	40013c00 	.word	0x40013c00

08007174 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b084      	sub	sp, #16
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d101      	bne.n	8007186 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007182:	2301      	movs	r3, #1
 8007184:	e12b      	b.n	80073de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800718c:	b2db      	uxtb	r3, r3
 800718e:	2b00      	cmp	r3, #0
 8007190:	d106      	bne.n	80071a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2200      	movs	r2, #0
 8007196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f7fe fe44 	bl	8005e28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2224      	movs	r2, #36	; 0x24
 80071a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	681a      	ldr	r2, [r3, #0]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f022 0201 	bic.w	r2, r2, #1
 80071b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	681a      	ldr	r2, [r3, #0]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80071c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	681a      	ldr	r2, [r3, #0]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80071d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80071d8:	f001 fd7a 	bl	8008cd0 <HAL_RCC_GetPCLK1Freq>
 80071dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	685b      	ldr	r3, [r3, #4]
 80071e2:	4a81      	ldr	r2, [pc, #516]	; (80073e8 <HAL_I2C_Init+0x274>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d807      	bhi.n	80071f8 <HAL_I2C_Init+0x84>
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	4a80      	ldr	r2, [pc, #512]	; (80073ec <HAL_I2C_Init+0x278>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	bf94      	ite	ls
 80071f0:	2301      	movls	r3, #1
 80071f2:	2300      	movhi	r3, #0
 80071f4:	b2db      	uxtb	r3, r3
 80071f6:	e006      	b.n	8007206 <HAL_I2C_Init+0x92>
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	4a7d      	ldr	r2, [pc, #500]	; (80073f0 <HAL_I2C_Init+0x27c>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	bf94      	ite	ls
 8007200:	2301      	movls	r3, #1
 8007202:	2300      	movhi	r3, #0
 8007204:	b2db      	uxtb	r3, r3
 8007206:	2b00      	cmp	r3, #0
 8007208:	d001      	beq.n	800720e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800720a:	2301      	movs	r3, #1
 800720c:	e0e7      	b.n	80073de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	4a78      	ldr	r2, [pc, #480]	; (80073f4 <HAL_I2C_Init+0x280>)
 8007212:	fba2 2303 	umull	r2, r3, r2, r3
 8007216:	0c9b      	lsrs	r3, r3, #18
 8007218:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	68ba      	ldr	r2, [r7, #8]
 800722a:	430a      	orrs	r2, r1
 800722c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	6a1b      	ldr	r3, [r3, #32]
 8007234:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	4a6a      	ldr	r2, [pc, #424]	; (80073e8 <HAL_I2C_Init+0x274>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d802      	bhi.n	8007248 <HAL_I2C_Init+0xd4>
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	3301      	adds	r3, #1
 8007246:	e009      	b.n	800725c <HAL_I2C_Init+0xe8>
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800724e:	fb02 f303 	mul.w	r3, r2, r3
 8007252:	4a69      	ldr	r2, [pc, #420]	; (80073f8 <HAL_I2C_Init+0x284>)
 8007254:	fba2 2303 	umull	r2, r3, r2, r3
 8007258:	099b      	lsrs	r3, r3, #6
 800725a:	3301      	adds	r3, #1
 800725c:	687a      	ldr	r2, [r7, #4]
 800725e:	6812      	ldr	r2, [r2, #0]
 8007260:	430b      	orrs	r3, r1
 8007262:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	69db      	ldr	r3, [r3, #28]
 800726a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800726e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	495c      	ldr	r1, [pc, #368]	; (80073e8 <HAL_I2C_Init+0x274>)
 8007278:	428b      	cmp	r3, r1
 800727a:	d819      	bhi.n	80072b0 <HAL_I2C_Init+0x13c>
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	1e59      	subs	r1, r3, #1
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	005b      	lsls	r3, r3, #1
 8007286:	fbb1 f3f3 	udiv	r3, r1, r3
 800728a:	1c59      	adds	r1, r3, #1
 800728c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007290:	400b      	ands	r3, r1
 8007292:	2b00      	cmp	r3, #0
 8007294:	d00a      	beq.n	80072ac <HAL_I2C_Init+0x138>
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	1e59      	subs	r1, r3, #1
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	005b      	lsls	r3, r3, #1
 80072a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80072a4:	3301      	adds	r3, #1
 80072a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072aa:	e051      	b.n	8007350 <HAL_I2C_Init+0x1dc>
 80072ac:	2304      	movs	r3, #4
 80072ae:	e04f      	b.n	8007350 <HAL_I2C_Init+0x1dc>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	689b      	ldr	r3, [r3, #8]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d111      	bne.n	80072dc <HAL_I2C_Init+0x168>
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	1e58      	subs	r0, r3, #1
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6859      	ldr	r1, [r3, #4]
 80072c0:	460b      	mov	r3, r1
 80072c2:	005b      	lsls	r3, r3, #1
 80072c4:	440b      	add	r3, r1
 80072c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80072ca:	3301      	adds	r3, #1
 80072cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	bf0c      	ite	eq
 80072d4:	2301      	moveq	r3, #1
 80072d6:	2300      	movne	r3, #0
 80072d8:	b2db      	uxtb	r3, r3
 80072da:	e012      	b.n	8007302 <HAL_I2C_Init+0x18e>
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	1e58      	subs	r0, r3, #1
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6859      	ldr	r1, [r3, #4]
 80072e4:	460b      	mov	r3, r1
 80072e6:	009b      	lsls	r3, r3, #2
 80072e8:	440b      	add	r3, r1
 80072ea:	0099      	lsls	r1, r3, #2
 80072ec:	440b      	add	r3, r1
 80072ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80072f2:	3301      	adds	r3, #1
 80072f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	bf0c      	ite	eq
 80072fc:	2301      	moveq	r3, #1
 80072fe:	2300      	movne	r3, #0
 8007300:	b2db      	uxtb	r3, r3
 8007302:	2b00      	cmp	r3, #0
 8007304:	d001      	beq.n	800730a <HAL_I2C_Init+0x196>
 8007306:	2301      	movs	r3, #1
 8007308:	e022      	b.n	8007350 <HAL_I2C_Init+0x1dc>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	689b      	ldr	r3, [r3, #8]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d10e      	bne.n	8007330 <HAL_I2C_Init+0x1bc>
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	1e58      	subs	r0, r3, #1
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6859      	ldr	r1, [r3, #4]
 800731a:	460b      	mov	r3, r1
 800731c:	005b      	lsls	r3, r3, #1
 800731e:	440b      	add	r3, r1
 8007320:	fbb0 f3f3 	udiv	r3, r0, r3
 8007324:	3301      	adds	r3, #1
 8007326:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800732a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800732e:	e00f      	b.n	8007350 <HAL_I2C_Init+0x1dc>
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	1e58      	subs	r0, r3, #1
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6859      	ldr	r1, [r3, #4]
 8007338:	460b      	mov	r3, r1
 800733a:	009b      	lsls	r3, r3, #2
 800733c:	440b      	add	r3, r1
 800733e:	0099      	lsls	r1, r3, #2
 8007340:	440b      	add	r3, r1
 8007342:	fbb0 f3f3 	udiv	r3, r0, r3
 8007346:	3301      	adds	r3, #1
 8007348:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800734c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007350:	6879      	ldr	r1, [r7, #4]
 8007352:	6809      	ldr	r1, [r1, #0]
 8007354:	4313      	orrs	r3, r2
 8007356:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	69da      	ldr	r2, [r3, #28]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6a1b      	ldr	r3, [r3, #32]
 800736a:	431a      	orrs	r2, r3
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	430a      	orrs	r2, r1
 8007372:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	689b      	ldr	r3, [r3, #8]
 800737a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800737e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007382:	687a      	ldr	r2, [r7, #4]
 8007384:	6911      	ldr	r1, [r2, #16]
 8007386:	687a      	ldr	r2, [r7, #4]
 8007388:	68d2      	ldr	r2, [r2, #12]
 800738a:	4311      	orrs	r1, r2
 800738c:	687a      	ldr	r2, [r7, #4]
 800738e:	6812      	ldr	r2, [r2, #0]
 8007390:	430b      	orrs	r3, r1
 8007392:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	68db      	ldr	r3, [r3, #12]
 800739a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	695a      	ldr	r2, [r3, #20]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	699b      	ldr	r3, [r3, #24]
 80073a6:	431a      	orrs	r2, r3
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	430a      	orrs	r2, r1
 80073ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	681a      	ldr	r2, [r3, #0]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f042 0201 	orr.w	r2, r2, #1
 80073be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2200      	movs	r2, #0
 80073c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2220      	movs	r2, #32
 80073ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2200      	movs	r2, #0
 80073d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2200      	movs	r2, #0
 80073d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80073dc:	2300      	movs	r3, #0
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3710      	adds	r7, #16
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}
 80073e6:	bf00      	nop
 80073e8:	000186a0 	.word	0x000186a0
 80073ec:	001e847f 	.word	0x001e847f
 80073f0:	003d08ff 	.word	0x003d08ff
 80073f4:	431bde83 	.word	0x431bde83
 80073f8:	10624dd3 	.word	0x10624dd3

080073fc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b088      	sub	sp, #32
 8007400:	af02      	add	r7, sp, #8
 8007402:	60f8      	str	r0, [r7, #12]
 8007404:	607a      	str	r2, [r7, #4]
 8007406:	461a      	mov	r2, r3
 8007408:	460b      	mov	r3, r1
 800740a:	817b      	strh	r3, [r7, #10]
 800740c:	4613      	mov	r3, r2
 800740e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007410:	f7ff fb0e 	bl	8006a30 <HAL_GetTick>
 8007414:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800741c:	b2db      	uxtb	r3, r3
 800741e:	2b20      	cmp	r3, #32
 8007420:	f040 80e0 	bne.w	80075e4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	9300      	str	r3, [sp, #0]
 8007428:	2319      	movs	r3, #25
 800742a:	2201      	movs	r2, #1
 800742c:	4970      	ldr	r1, [pc, #448]	; (80075f0 <HAL_I2C_Master_Transmit+0x1f4>)
 800742e:	68f8      	ldr	r0, [r7, #12]
 8007430:	f000 fe02 	bl	8008038 <I2C_WaitOnFlagUntilTimeout>
 8007434:	4603      	mov	r3, r0
 8007436:	2b00      	cmp	r3, #0
 8007438:	d001      	beq.n	800743e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800743a:	2302      	movs	r3, #2
 800743c:	e0d3      	b.n	80075e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007444:	2b01      	cmp	r3, #1
 8007446:	d101      	bne.n	800744c <HAL_I2C_Master_Transmit+0x50>
 8007448:	2302      	movs	r3, #2
 800744a:	e0cc      	b.n	80075e6 <HAL_I2C_Master_Transmit+0x1ea>
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2201      	movs	r2, #1
 8007450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f003 0301 	and.w	r3, r3, #1
 800745e:	2b01      	cmp	r3, #1
 8007460:	d007      	beq.n	8007472 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	681a      	ldr	r2, [r3, #0]
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f042 0201 	orr.w	r2, r2, #1
 8007470:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	681a      	ldr	r2, [r3, #0]
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007480:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	2221      	movs	r2, #33	; 0x21
 8007486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	2210      	movs	r2, #16
 800748e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2200      	movs	r2, #0
 8007496:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	687a      	ldr	r2, [r7, #4]
 800749c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	893a      	ldrh	r2, [r7, #8]
 80074a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074a8:	b29a      	uxth	r2, r3
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	4a50      	ldr	r2, [pc, #320]	; (80075f4 <HAL_I2C_Master_Transmit+0x1f8>)
 80074b2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80074b4:	8979      	ldrh	r1, [r7, #10]
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	6a3a      	ldr	r2, [r7, #32]
 80074ba:	68f8      	ldr	r0, [r7, #12]
 80074bc:	f000 fbbc 	bl	8007c38 <I2C_MasterRequestWrite>
 80074c0:	4603      	mov	r3, r0
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d001      	beq.n	80074ca <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80074c6:	2301      	movs	r3, #1
 80074c8:	e08d      	b.n	80075e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80074ca:	2300      	movs	r3, #0
 80074cc:	613b      	str	r3, [r7, #16]
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	695b      	ldr	r3, [r3, #20]
 80074d4:	613b      	str	r3, [r7, #16]
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	699b      	ldr	r3, [r3, #24]
 80074dc:	613b      	str	r3, [r7, #16]
 80074de:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80074e0:	e066      	b.n	80075b0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80074e2:	697a      	ldr	r2, [r7, #20]
 80074e4:	6a39      	ldr	r1, [r7, #32]
 80074e6:	68f8      	ldr	r0, [r7, #12]
 80074e8:	f000 fe7c 	bl	80081e4 <I2C_WaitOnTXEFlagUntilTimeout>
 80074ec:	4603      	mov	r3, r0
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d00d      	beq.n	800750e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074f6:	2b04      	cmp	r3, #4
 80074f8:	d107      	bne.n	800750a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	681a      	ldr	r2, [r3, #0]
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007508:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800750a:	2301      	movs	r3, #1
 800750c:	e06b      	b.n	80075e6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007512:	781a      	ldrb	r2, [r3, #0]
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800751e:	1c5a      	adds	r2, r3, #1
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007528:	b29b      	uxth	r3, r3
 800752a:	3b01      	subs	r3, #1
 800752c:	b29a      	uxth	r2, r3
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007536:	3b01      	subs	r3, #1
 8007538:	b29a      	uxth	r2, r3
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	695b      	ldr	r3, [r3, #20]
 8007544:	f003 0304 	and.w	r3, r3, #4
 8007548:	2b04      	cmp	r3, #4
 800754a:	d11b      	bne.n	8007584 <HAL_I2C_Master_Transmit+0x188>
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007550:	2b00      	cmp	r3, #0
 8007552:	d017      	beq.n	8007584 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007558:	781a      	ldrb	r2, [r3, #0]
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007564:	1c5a      	adds	r2, r3, #1
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800756e:	b29b      	uxth	r3, r3
 8007570:	3b01      	subs	r3, #1
 8007572:	b29a      	uxth	r2, r3
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800757c:	3b01      	subs	r3, #1
 800757e:	b29a      	uxth	r2, r3
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007584:	697a      	ldr	r2, [r7, #20]
 8007586:	6a39      	ldr	r1, [r7, #32]
 8007588:	68f8      	ldr	r0, [r7, #12]
 800758a:	f000 fe6c 	bl	8008266 <I2C_WaitOnBTFFlagUntilTimeout>
 800758e:	4603      	mov	r3, r0
 8007590:	2b00      	cmp	r3, #0
 8007592:	d00d      	beq.n	80075b0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007598:	2b04      	cmp	r3, #4
 800759a:	d107      	bne.n	80075ac <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	681a      	ldr	r2, [r3, #0]
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075aa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80075ac:	2301      	movs	r3, #1
 80075ae:	e01a      	b.n	80075e6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d194      	bne.n	80074e2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	681a      	ldr	r2, [r3, #0]
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	2220      	movs	r2, #32
 80075cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	2200      	movs	r2, #0
 80075d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2200      	movs	r2, #0
 80075dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80075e0:	2300      	movs	r3, #0
 80075e2:	e000      	b.n	80075e6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80075e4:	2302      	movs	r3, #2
  }
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3718      	adds	r7, #24
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}
 80075ee:	bf00      	nop
 80075f0:	00100002 	.word	0x00100002
 80075f4:	ffff0000 	.word	0xffff0000

080075f8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b088      	sub	sp, #32
 80075fc:	af02      	add	r7, sp, #8
 80075fe:	60f8      	str	r0, [r7, #12]
 8007600:	4608      	mov	r0, r1
 8007602:	4611      	mov	r1, r2
 8007604:	461a      	mov	r2, r3
 8007606:	4603      	mov	r3, r0
 8007608:	817b      	strh	r3, [r7, #10]
 800760a:	460b      	mov	r3, r1
 800760c:	813b      	strh	r3, [r7, #8]
 800760e:	4613      	mov	r3, r2
 8007610:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007612:	f7ff fa0d 	bl	8006a30 <HAL_GetTick>
 8007616:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800761e:	b2db      	uxtb	r3, r3
 8007620:	2b20      	cmp	r3, #32
 8007622:	f040 80d9 	bne.w	80077d8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	9300      	str	r3, [sp, #0]
 800762a:	2319      	movs	r3, #25
 800762c:	2201      	movs	r2, #1
 800762e:	496d      	ldr	r1, [pc, #436]	; (80077e4 <HAL_I2C_Mem_Write+0x1ec>)
 8007630:	68f8      	ldr	r0, [r7, #12]
 8007632:	f000 fd01 	bl	8008038 <I2C_WaitOnFlagUntilTimeout>
 8007636:	4603      	mov	r3, r0
 8007638:	2b00      	cmp	r3, #0
 800763a:	d001      	beq.n	8007640 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800763c:	2302      	movs	r3, #2
 800763e:	e0cc      	b.n	80077da <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007646:	2b01      	cmp	r3, #1
 8007648:	d101      	bne.n	800764e <HAL_I2C_Mem_Write+0x56>
 800764a:	2302      	movs	r3, #2
 800764c:	e0c5      	b.n	80077da <HAL_I2C_Mem_Write+0x1e2>
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2201      	movs	r2, #1
 8007652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f003 0301 	and.w	r3, r3, #1
 8007660:	2b01      	cmp	r3, #1
 8007662:	d007      	beq.n	8007674 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	681a      	ldr	r2, [r3, #0]
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f042 0201 	orr.w	r2, r2, #1
 8007672:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	681a      	ldr	r2, [r3, #0]
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007682:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2221      	movs	r2, #33	; 0x21
 8007688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2240      	movs	r2, #64	; 0x40
 8007690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2200      	movs	r2, #0
 8007698:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	6a3a      	ldr	r2, [r7, #32]
 800769e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80076a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076aa:	b29a      	uxth	r2, r3
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	4a4d      	ldr	r2, [pc, #308]	; (80077e8 <HAL_I2C_Mem_Write+0x1f0>)
 80076b4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80076b6:	88f8      	ldrh	r0, [r7, #6]
 80076b8:	893a      	ldrh	r2, [r7, #8]
 80076ba:	8979      	ldrh	r1, [r7, #10]
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	9301      	str	r3, [sp, #4]
 80076c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076c2:	9300      	str	r3, [sp, #0]
 80076c4:	4603      	mov	r3, r0
 80076c6:	68f8      	ldr	r0, [r7, #12]
 80076c8:	f000 fb38 	bl	8007d3c <I2C_RequestMemoryWrite>
 80076cc:	4603      	mov	r3, r0
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d052      	beq.n	8007778 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80076d2:	2301      	movs	r3, #1
 80076d4:	e081      	b.n	80077da <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80076d6:	697a      	ldr	r2, [r7, #20]
 80076d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80076da:	68f8      	ldr	r0, [r7, #12]
 80076dc:	f000 fd82 	bl	80081e4 <I2C_WaitOnTXEFlagUntilTimeout>
 80076e0:	4603      	mov	r3, r0
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d00d      	beq.n	8007702 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ea:	2b04      	cmp	r3, #4
 80076ec:	d107      	bne.n	80076fe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	681a      	ldr	r2, [r3, #0]
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076fc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80076fe:	2301      	movs	r3, #1
 8007700:	e06b      	b.n	80077da <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007706:	781a      	ldrb	r2, [r3, #0]
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007712:	1c5a      	adds	r2, r3, #1
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800771c:	3b01      	subs	r3, #1
 800771e:	b29a      	uxth	r2, r3
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007728:	b29b      	uxth	r3, r3
 800772a:	3b01      	subs	r3, #1
 800772c:	b29a      	uxth	r2, r3
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	695b      	ldr	r3, [r3, #20]
 8007738:	f003 0304 	and.w	r3, r3, #4
 800773c:	2b04      	cmp	r3, #4
 800773e:	d11b      	bne.n	8007778 <HAL_I2C_Mem_Write+0x180>
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007744:	2b00      	cmp	r3, #0
 8007746:	d017      	beq.n	8007778 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800774c:	781a      	ldrb	r2, [r3, #0]
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007758:	1c5a      	adds	r2, r3, #1
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007762:	3b01      	subs	r3, #1
 8007764:	b29a      	uxth	r2, r3
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800776e:	b29b      	uxth	r3, r3
 8007770:	3b01      	subs	r3, #1
 8007772:	b29a      	uxth	r2, r3
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800777c:	2b00      	cmp	r3, #0
 800777e:	d1aa      	bne.n	80076d6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007780:	697a      	ldr	r2, [r7, #20]
 8007782:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007784:	68f8      	ldr	r0, [r7, #12]
 8007786:	f000 fd6e 	bl	8008266 <I2C_WaitOnBTFFlagUntilTimeout>
 800778a:	4603      	mov	r3, r0
 800778c:	2b00      	cmp	r3, #0
 800778e:	d00d      	beq.n	80077ac <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007794:	2b04      	cmp	r3, #4
 8007796:	d107      	bne.n	80077a8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	681a      	ldr	r2, [r3, #0]
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077a6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80077a8:	2301      	movs	r3, #1
 80077aa:	e016      	b.n	80077da <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	681a      	ldr	r2, [r3, #0]
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	2220      	movs	r2, #32
 80077c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	2200      	movs	r2, #0
 80077c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	2200      	movs	r2, #0
 80077d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80077d4:	2300      	movs	r3, #0
 80077d6:	e000      	b.n	80077da <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80077d8:	2302      	movs	r3, #2
  }
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3718      	adds	r7, #24
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}
 80077e2:	bf00      	nop
 80077e4:	00100002 	.word	0x00100002
 80077e8:	ffff0000 	.word	0xffff0000

080077ec <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b08c      	sub	sp, #48	; 0x30
 80077f0:	af02      	add	r7, sp, #8
 80077f2:	60f8      	str	r0, [r7, #12]
 80077f4:	4608      	mov	r0, r1
 80077f6:	4611      	mov	r1, r2
 80077f8:	461a      	mov	r2, r3
 80077fa:	4603      	mov	r3, r0
 80077fc:	817b      	strh	r3, [r7, #10]
 80077fe:	460b      	mov	r3, r1
 8007800:	813b      	strh	r3, [r7, #8]
 8007802:	4613      	mov	r3, r2
 8007804:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007806:	f7ff f913 	bl	8006a30 <HAL_GetTick>
 800780a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007812:	b2db      	uxtb	r3, r3
 8007814:	2b20      	cmp	r3, #32
 8007816:	f040 8208 	bne.w	8007c2a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800781a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800781c:	9300      	str	r3, [sp, #0]
 800781e:	2319      	movs	r3, #25
 8007820:	2201      	movs	r2, #1
 8007822:	497b      	ldr	r1, [pc, #492]	; (8007a10 <HAL_I2C_Mem_Read+0x224>)
 8007824:	68f8      	ldr	r0, [r7, #12]
 8007826:	f000 fc07 	bl	8008038 <I2C_WaitOnFlagUntilTimeout>
 800782a:	4603      	mov	r3, r0
 800782c:	2b00      	cmp	r3, #0
 800782e:	d001      	beq.n	8007834 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007830:	2302      	movs	r3, #2
 8007832:	e1fb      	b.n	8007c2c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800783a:	2b01      	cmp	r3, #1
 800783c:	d101      	bne.n	8007842 <HAL_I2C_Mem_Read+0x56>
 800783e:	2302      	movs	r3, #2
 8007840:	e1f4      	b.n	8007c2c <HAL_I2C_Mem_Read+0x440>
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	2201      	movs	r2, #1
 8007846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f003 0301 	and.w	r3, r3, #1
 8007854:	2b01      	cmp	r3, #1
 8007856:	d007      	beq.n	8007868 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	681a      	ldr	r2, [r3, #0]
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f042 0201 	orr.w	r2, r2, #1
 8007866:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	681a      	ldr	r2, [r3, #0]
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007876:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2222      	movs	r2, #34	; 0x22
 800787c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2240      	movs	r2, #64	; 0x40
 8007884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2200      	movs	r2, #0
 800788c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007892:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007898:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800789e:	b29a      	uxth	r2, r3
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	4a5b      	ldr	r2, [pc, #364]	; (8007a14 <HAL_I2C_Mem_Read+0x228>)
 80078a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80078aa:	88f8      	ldrh	r0, [r7, #6]
 80078ac:	893a      	ldrh	r2, [r7, #8]
 80078ae:	8979      	ldrh	r1, [r7, #10]
 80078b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b2:	9301      	str	r3, [sp, #4]
 80078b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078b6:	9300      	str	r3, [sp, #0]
 80078b8:	4603      	mov	r3, r0
 80078ba:	68f8      	ldr	r0, [r7, #12]
 80078bc:	f000 fad4 	bl	8007e68 <I2C_RequestMemoryRead>
 80078c0:	4603      	mov	r3, r0
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d001      	beq.n	80078ca <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80078c6:	2301      	movs	r3, #1
 80078c8:	e1b0      	b.n	8007c2c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d113      	bne.n	80078fa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80078d2:	2300      	movs	r3, #0
 80078d4:	623b      	str	r3, [r7, #32]
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	695b      	ldr	r3, [r3, #20]
 80078dc:	623b      	str	r3, [r7, #32]
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	699b      	ldr	r3, [r3, #24]
 80078e4:	623b      	str	r3, [r7, #32]
 80078e6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	681a      	ldr	r2, [r3, #0]
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078f6:	601a      	str	r2, [r3, #0]
 80078f8:	e184      	b.n	8007c04 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078fe:	2b01      	cmp	r3, #1
 8007900:	d11b      	bne.n	800793a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	681a      	ldr	r2, [r3, #0]
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007910:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007912:	2300      	movs	r3, #0
 8007914:	61fb      	str	r3, [r7, #28]
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	695b      	ldr	r3, [r3, #20]
 800791c:	61fb      	str	r3, [r7, #28]
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	699b      	ldr	r3, [r3, #24]
 8007924:	61fb      	str	r3, [r7, #28]
 8007926:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	681a      	ldr	r2, [r3, #0]
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007936:	601a      	str	r2, [r3, #0]
 8007938:	e164      	b.n	8007c04 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800793e:	2b02      	cmp	r3, #2
 8007940:	d11b      	bne.n	800797a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	681a      	ldr	r2, [r3, #0]
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007950:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	681a      	ldr	r2, [r3, #0]
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007960:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007962:	2300      	movs	r3, #0
 8007964:	61bb      	str	r3, [r7, #24]
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	695b      	ldr	r3, [r3, #20]
 800796c:	61bb      	str	r3, [r7, #24]
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	699b      	ldr	r3, [r3, #24]
 8007974:	61bb      	str	r3, [r7, #24]
 8007976:	69bb      	ldr	r3, [r7, #24]
 8007978:	e144      	b.n	8007c04 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800797a:	2300      	movs	r3, #0
 800797c:	617b      	str	r3, [r7, #20]
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	695b      	ldr	r3, [r3, #20]
 8007984:	617b      	str	r3, [r7, #20]
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	699b      	ldr	r3, [r3, #24]
 800798c:	617b      	str	r3, [r7, #20]
 800798e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007990:	e138      	b.n	8007c04 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007996:	2b03      	cmp	r3, #3
 8007998:	f200 80f1 	bhi.w	8007b7e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079a0:	2b01      	cmp	r3, #1
 80079a2:	d123      	bne.n	80079ec <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80079a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80079a8:	68f8      	ldr	r0, [r7, #12]
 80079aa:	f000 fc9d 	bl	80082e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80079ae:	4603      	mov	r3, r0
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d001      	beq.n	80079b8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80079b4:	2301      	movs	r3, #1
 80079b6:	e139      	b.n	8007c2c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	691a      	ldr	r2, [r3, #16]
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c2:	b2d2      	uxtb	r2, r2
 80079c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ca:	1c5a      	adds	r2, r3, #1
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079d4:	3b01      	subs	r3, #1
 80079d6:	b29a      	uxth	r2, r3
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079e0:	b29b      	uxth	r3, r3
 80079e2:	3b01      	subs	r3, #1
 80079e4:	b29a      	uxth	r2, r3
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80079ea:	e10b      	b.n	8007c04 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079f0:	2b02      	cmp	r3, #2
 80079f2:	d14e      	bne.n	8007a92 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80079f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f6:	9300      	str	r3, [sp, #0]
 80079f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079fa:	2200      	movs	r2, #0
 80079fc:	4906      	ldr	r1, [pc, #24]	; (8007a18 <HAL_I2C_Mem_Read+0x22c>)
 80079fe:	68f8      	ldr	r0, [r7, #12]
 8007a00:	f000 fb1a 	bl	8008038 <I2C_WaitOnFlagUntilTimeout>
 8007a04:	4603      	mov	r3, r0
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d008      	beq.n	8007a1c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	e10e      	b.n	8007c2c <HAL_I2C_Mem_Read+0x440>
 8007a0e:	bf00      	nop
 8007a10:	00100002 	.word	0x00100002
 8007a14:	ffff0000 	.word	0xffff0000
 8007a18:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	681a      	ldr	r2, [r3, #0]
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	691a      	ldr	r2, [r3, #16]
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a36:	b2d2      	uxtb	r2, r2
 8007a38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a3e:	1c5a      	adds	r2, r3, #1
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a48:	3b01      	subs	r3, #1
 8007a4a:	b29a      	uxth	r2, r3
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a54:	b29b      	uxth	r3, r3
 8007a56:	3b01      	subs	r3, #1
 8007a58:	b29a      	uxth	r2, r3
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	691a      	ldr	r2, [r3, #16]
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a68:	b2d2      	uxtb	r2, r2
 8007a6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a70:	1c5a      	adds	r2, r3, #1
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a7a:	3b01      	subs	r3, #1
 8007a7c:	b29a      	uxth	r2, r3
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a86:	b29b      	uxth	r3, r3
 8007a88:	3b01      	subs	r3, #1
 8007a8a:	b29a      	uxth	r2, r3
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007a90:	e0b8      	b.n	8007c04 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a94:	9300      	str	r3, [sp, #0]
 8007a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a98:	2200      	movs	r2, #0
 8007a9a:	4966      	ldr	r1, [pc, #408]	; (8007c34 <HAL_I2C_Mem_Read+0x448>)
 8007a9c:	68f8      	ldr	r0, [r7, #12]
 8007a9e:	f000 facb 	bl	8008038 <I2C_WaitOnFlagUntilTimeout>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d001      	beq.n	8007aac <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	e0bf      	b.n	8007c2c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	681a      	ldr	r2, [r3, #0]
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007aba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	691a      	ldr	r2, [r3, #16]
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac6:	b2d2      	uxtb	r2, r2
 8007ac8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ace:	1c5a      	adds	r2, r3, #1
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ad8:	3b01      	subs	r3, #1
 8007ada:	b29a      	uxth	r2, r3
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ae4:	b29b      	uxth	r3, r3
 8007ae6:	3b01      	subs	r3, #1
 8007ae8:	b29a      	uxth	r2, r3
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af0:	9300      	str	r3, [sp, #0]
 8007af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007af4:	2200      	movs	r2, #0
 8007af6:	494f      	ldr	r1, [pc, #316]	; (8007c34 <HAL_I2C_Mem_Read+0x448>)
 8007af8:	68f8      	ldr	r0, [r7, #12]
 8007afa:	f000 fa9d 	bl	8008038 <I2C_WaitOnFlagUntilTimeout>
 8007afe:	4603      	mov	r3, r0
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d001      	beq.n	8007b08 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007b04:	2301      	movs	r3, #1
 8007b06:	e091      	b.n	8007c2c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	681a      	ldr	r2, [r3, #0]
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	691a      	ldr	r2, [r3, #16]
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b22:	b2d2      	uxtb	r2, r2
 8007b24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b2a:	1c5a      	adds	r2, r3, #1
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b34:	3b01      	subs	r3, #1
 8007b36:	b29a      	uxth	r2, r3
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b40:	b29b      	uxth	r3, r3
 8007b42:	3b01      	subs	r3, #1
 8007b44:	b29a      	uxth	r2, r3
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	691a      	ldr	r2, [r3, #16]
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b54:	b2d2      	uxtb	r2, r2
 8007b56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b5c:	1c5a      	adds	r2, r3, #1
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b66:	3b01      	subs	r3, #1
 8007b68:	b29a      	uxth	r2, r3
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b72:	b29b      	uxth	r3, r3
 8007b74:	3b01      	subs	r3, #1
 8007b76:	b29a      	uxth	r2, r3
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007b7c:	e042      	b.n	8007c04 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b80:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007b82:	68f8      	ldr	r0, [r7, #12]
 8007b84:	f000 fbb0 	bl	80082e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d001      	beq.n	8007b92 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	e04c      	b.n	8007c2c <HAL_I2C_Mem_Read+0x440>
        }

        /*  data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	691a      	ldr	r2, [r3, #16]
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b9c:	b2d2      	uxtb	r2, r2
 8007b9e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba4:	1c5a      	adds	r2, r3, #1
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bae:	3b01      	subs	r3, #1
 8007bb0:	b29a      	uxth	r2, r3
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bba:	b29b      	uxth	r3, r3
 8007bbc:	3b01      	subs	r3, #1
 8007bbe:	b29a      	uxth	r2, r3
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	695b      	ldr	r3, [r3, #20]
 8007bca:	f003 0304 	and.w	r3, r3, #4
 8007bce:	2b04      	cmp	r3, #4
 8007bd0:	d118      	bne.n	8007c04 <HAL_I2C_Mem_Read+0x418>
        {
          /*  data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	691a      	ldr	r2, [r3, #16]
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bdc:	b2d2      	uxtb	r2, r2
 8007bde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be4:	1c5a      	adds	r2, r3, #1
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bee:	3b01      	subs	r3, #1
 8007bf0:	b29a      	uxth	r2, r3
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bfa:	b29b      	uxth	r3, r3
 8007bfc:	3b01      	subs	r3, #1
 8007bfe:	b29a      	uxth	r2, r3
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	f47f aec2 	bne.w	8007992 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	2220      	movs	r2, #32
 8007c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2200      	movs	r2, #0
 8007c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007c26:	2300      	movs	r3, #0
 8007c28:	e000      	b.n	8007c2c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007c2a:	2302      	movs	r3, #2
  }
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	3728      	adds	r7, #40	; 0x28
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}
 8007c34:	00010004 	.word	0x00010004

08007c38 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b088      	sub	sp, #32
 8007c3c:	af02      	add	r7, sp, #8
 8007c3e:	60f8      	str	r0, [r7, #12]
 8007c40:	607a      	str	r2, [r7, #4]
 8007c42:	603b      	str	r3, [r7, #0]
 8007c44:	460b      	mov	r3, r1
 8007c46:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c4c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	2b08      	cmp	r3, #8
 8007c52:	d006      	beq.n	8007c62 <I2C_MasterRequestWrite+0x2a>
 8007c54:	697b      	ldr	r3, [r7, #20]
 8007c56:	2b01      	cmp	r3, #1
 8007c58:	d003      	beq.n	8007c62 <I2C_MasterRequestWrite+0x2a>
 8007c5a:	697b      	ldr	r3, [r7, #20]
 8007c5c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007c60:	d108      	bne.n	8007c74 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	681a      	ldr	r2, [r3, #0]
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007c70:	601a      	str	r2, [r3, #0]
 8007c72:	e00b      	b.n	8007c8c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c78:	2b12      	cmp	r3, #18
 8007c7a:	d107      	bne.n	8007c8c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	681a      	ldr	r2, [r3, #0]
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007c8a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	9300      	str	r3, [sp, #0]
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2200      	movs	r2, #0
 8007c94:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007c98:	68f8      	ldr	r0, [r7, #12]
 8007c9a:	f000 f9cd 	bl	8008038 <I2C_WaitOnFlagUntilTimeout>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d00d      	beq.n	8007cc0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cb2:	d103      	bne.n	8007cbc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007cba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007cbc:	2303      	movs	r3, #3
 8007cbe:	e035      	b.n	8007d2c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	691b      	ldr	r3, [r3, #16]
 8007cc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007cc8:	d108      	bne.n	8007cdc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007cca:	897b      	ldrh	r3, [r7, #10]
 8007ccc:	b2db      	uxtb	r3, r3
 8007cce:	461a      	mov	r2, r3
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007cd8:	611a      	str	r2, [r3, #16]
 8007cda:	e01b      	b.n	8007d14 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007cdc:	897b      	ldrh	r3, [r7, #10]
 8007cde:	11db      	asrs	r3, r3, #7
 8007ce0:	b2db      	uxtb	r3, r3
 8007ce2:	f003 0306 	and.w	r3, r3, #6
 8007ce6:	b2db      	uxtb	r3, r3
 8007ce8:	f063 030f 	orn	r3, r3, #15
 8007cec:	b2da      	uxtb	r2, r3
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	687a      	ldr	r2, [r7, #4]
 8007cf8:	490e      	ldr	r1, [pc, #56]	; (8007d34 <I2C_MasterRequestWrite+0xfc>)
 8007cfa:	68f8      	ldr	r0, [r7, #12]
 8007cfc:	f000 f9f3 	bl	80080e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007d00:	4603      	mov	r3, r0
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d001      	beq.n	8007d0a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007d06:	2301      	movs	r3, #1
 8007d08:	e010      	b.n	8007d2c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007d0a:	897b      	ldrh	r3, [r7, #10]
 8007d0c:	b2da      	uxtb	r2, r3
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	687a      	ldr	r2, [r7, #4]
 8007d18:	4907      	ldr	r1, [pc, #28]	; (8007d38 <I2C_MasterRequestWrite+0x100>)
 8007d1a:	68f8      	ldr	r0, [r7, #12]
 8007d1c:	f000 f9e3 	bl	80080e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007d20:	4603      	mov	r3, r0
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d001      	beq.n	8007d2a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007d26:	2301      	movs	r3, #1
 8007d28:	e000      	b.n	8007d2c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007d2a:	2300      	movs	r3, #0
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3718      	adds	r7, #24
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}
 8007d34:	00010008 	.word	0x00010008
 8007d38:	00010002 	.word	0x00010002

08007d3c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b088      	sub	sp, #32
 8007d40:	af02      	add	r7, sp, #8
 8007d42:	60f8      	str	r0, [r7, #12]
 8007d44:	4608      	mov	r0, r1
 8007d46:	4611      	mov	r1, r2
 8007d48:	461a      	mov	r2, r3
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	817b      	strh	r3, [r7, #10]
 8007d4e:	460b      	mov	r3, r1
 8007d50:	813b      	strh	r3, [r7, #8]
 8007d52:	4613      	mov	r3, r2
 8007d54:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	681a      	ldr	r2, [r3, #0]
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007d64:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d68:	9300      	str	r3, [sp, #0]
 8007d6a:	6a3b      	ldr	r3, [r7, #32]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007d72:	68f8      	ldr	r0, [r7, #12]
 8007d74:	f000 f960 	bl	8008038 <I2C_WaitOnFlagUntilTimeout>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d00d      	beq.n	8007d9a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d8c:	d103      	bne.n	8007d96 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d94:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007d96:	2303      	movs	r3, #3
 8007d98:	e05f      	b.n	8007e5a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007d9a:	897b      	ldrh	r3, [r7, #10]
 8007d9c:	b2db      	uxtb	r3, r3
 8007d9e:	461a      	mov	r2, r3
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007da8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dac:	6a3a      	ldr	r2, [r7, #32]
 8007dae:	492d      	ldr	r1, [pc, #180]	; (8007e64 <I2C_RequestMemoryWrite+0x128>)
 8007db0:	68f8      	ldr	r0, [r7, #12]
 8007db2:	f000 f998 	bl	80080e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007db6:	4603      	mov	r3, r0
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d001      	beq.n	8007dc0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	e04c      	b.n	8007e5a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	617b      	str	r3, [r7, #20]
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	695b      	ldr	r3, [r3, #20]
 8007dca:	617b      	str	r3, [r7, #20]
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	699b      	ldr	r3, [r3, #24]
 8007dd2:	617b      	str	r3, [r7, #20]
 8007dd4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007dd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dd8:	6a39      	ldr	r1, [r7, #32]
 8007dda:	68f8      	ldr	r0, [r7, #12]
 8007ddc:	f000 fa02 	bl	80081e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007de0:	4603      	mov	r3, r0
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d00d      	beq.n	8007e02 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dea:	2b04      	cmp	r3, #4
 8007dec:	d107      	bne.n	8007dfe <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	681a      	ldr	r2, [r3, #0]
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007dfc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007dfe:	2301      	movs	r3, #1
 8007e00:	e02b      	b.n	8007e5a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007e02:	88fb      	ldrh	r3, [r7, #6]
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	d105      	bne.n	8007e14 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007e08:	893b      	ldrh	r3, [r7, #8]
 8007e0a:	b2da      	uxtb	r2, r3
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	611a      	str	r2, [r3, #16]
 8007e12:	e021      	b.n	8007e58 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007e14:	893b      	ldrh	r3, [r7, #8]
 8007e16:	0a1b      	lsrs	r3, r3, #8
 8007e18:	b29b      	uxth	r3, r3
 8007e1a:	b2da      	uxtb	r2, r3
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e24:	6a39      	ldr	r1, [r7, #32]
 8007e26:	68f8      	ldr	r0, [r7, #12]
 8007e28:	f000 f9dc 	bl	80081e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d00d      	beq.n	8007e4e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e36:	2b04      	cmp	r3, #4
 8007e38:	d107      	bne.n	8007e4a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	681a      	ldr	r2, [r3, #0]
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e48:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	e005      	b.n	8007e5a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007e4e:	893b      	ldrh	r3, [r7, #8]
 8007e50:	b2da      	uxtb	r2, r3
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007e58:	2300      	movs	r3, #0
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3718      	adds	r7, #24
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}
 8007e62:	bf00      	nop
 8007e64:	00010002 	.word	0x00010002

08007e68 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b088      	sub	sp, #32
 8007e6c:	af02      	add	r7, sp, #8
 8007e6e:	60f8      	str	r0, [r7, #12]
 8007e70:	4608      	mov	r0, r1
 8007e72:	4611      	mov	r1, r2
 8007e74:	461a      	mov	r2, r3
 8007e76:	4603      	mov	r3, r0
 8007e78:	817b      	strh	r3, [r7, #10]
 8007e7a:	460b      	mov	r3, r1
 8007e7c:	813b      	strh	r3, [r7, #8]
 8007e7e:	4613      	mov	r3, r2
 8007e80:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	681a      	ldr	r2, [r3, #0]
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007e90:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	681a      	ldr	r2, [r3, #0]
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ea0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea4:	9300      	str	r3, [sp, #0]
 8007ea6:	6a3b      	ldr	r3, [r7, #32]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007eae:	68f8      	ldr	r0, [r7, #12]
 8007eb0:	f000 f8c2 	bl	8008038 <I2C_WaitOnFlagUntilTimeout>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d00d      	beq.n	8007ed6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ec4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ec8:	d103      	bne.n	8007ed2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ed0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007ed2:	2303      	movs	r3, #3
 8007ed4:	e0aa      	b.n	800802c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007ed6:	897b      	ldrh	r3, [r7, #10]
 8007ed8:	b2db      	uxtb	r3, r3
 8007eda:	461a      	mov	r2, r3
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007ee4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee8:	6a3a      	ldr	r2, [r7, #32]
 8007eea:	4952      	ldr	r1, [pc, #328]	; (8008034 <I2C_RequestMemoryRead+0x1cc>)
 8007eec:	68f8      	ldr	r0, [r7, #12]
 8007eee:	f000 f8fa 	bl	80080e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d001      	beq.n	8007efc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007ef8:	2301      	movs	r3, #1
 8007efa:	e097      	b.n	800802c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007efc:	2300      	movs	r3, #0
 8007efe:	617b      	str	r3, [r7, #20]
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	695b      	ldr	r3, [r3, #20]
 8007f06:	617b      	str	r3, [r7, #20]
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	699b      	ldr	r3, [r3, #24]
 8007f0e:	617b      	str	r3, [r7, #20]
 8007f10:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f14:	6a39      	ldr	r1, [r7, #32]
 8007f16:	68f8      	ldr	r0, [r7, #12]
 8007f18:	f000 f964 	bl	80081e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d00d      	beq.n	8007f3e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f26:	2b04      	cmp	r3, #4
 8007f28:	d107      	bne.n	8007f3a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	681a      	ldr	r2, [r3, #0]
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f38:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	e076      	b.n	800802c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007f3e:	88fb      	ldrh	r3, [r7, #6]
 8007f40:	2b01      	cmp	r3, #1
 8007f42:	d105      	bne.n	8007f50 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007f44:	893b      	ldrh	r3, [r7, #8]
 8007f46:	b2da      	uxtb	r2, r3
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	611a      	str	r2, [r3, #16]
 8007f4e:	e021      	b.n	8007f94 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007f50:	893b      	ldrh	r3, [r7, #8]
 8007f52:	0a1b      	lsrs	r3, r3, #8
 8007f54:	b29b      	uxth	r3, r3
 8007f56:	b2da      	uxtb	r2, r3
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f60:	6a39      	ldr	r1, [r7, #32]
 8007f62:	68f8      	ldr	r0, [r7, #12]
 8007f64:	f000 f93e 	bl	80081e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d00d      	beq.n	8007f8a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f72:	2b04      	cmp	r3, #4
 8007f74:	d107      	bne.n	8007f86 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	681a      	ldr	r2, [r3, #0]
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f84:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007f86:	2301      	movs	r3, #1
 8007f88:	e050      	b.n	800802c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007f8a:	893b      	ldrh	r3, [r7, #8]
 8007f8c:	b2da      	uxtb	r2, r3
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f96:	6a39      	ldr	r1, [r7, #32]
 8007f98:	68f8      	ldr	r0, [r7, #12]
 8007f9a:	f000 f923 	bl	80081e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d00d      	beq.n	8007fc0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fa8:	2b04      	cmp	r3, #4
 8007faa:	d107      	bne.n	8007fbc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	681a      	ldr	r2, [r3, #0]
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007fba:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	e035      	b.n	800802c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	681a      	ldr	r2, [r3, #0]
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007fce:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd2:	9300      	str	r3, [sp, #0]
 8007fd4:	6a3b      	ldr	r3, [r7, #32]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007fdc:	68f8      	ldr	r0, [r7, #12]
 8007fde:	f000 f82b 	bl	8008038 <I2C_WaitOnFlagUntilTimeout>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d00d      	beq.n	8008004 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ff2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ff6:	d103      	bne.n	8008000 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ffe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008000:	2303      	movs	r3, #3
 8008002:	e013      	b.n	800802c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008004:	897b      	ldrh	r3, [r7, #10]
 8008006:	b2db      	uxtb	r3, r3
 8008008:	f043 0301 	orr.w	r3, r3, #1
 800800c:	b2da      	uxtb	r2, r3
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008016:	6a3a      	ldr	r2, [r7, #32]
 8008018:	4906      	ldr	r1, [pc, #24]	; (8008034 <I2C_RequestMemoryRead+0x1cc>)
 800801a:	68f8      	ldr	r0, [r7, #12]
 800801c:	f000 f863 	bl	80080e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008020:	4603      	mov	r3, r0
 8008022:	2b00      	cmp	r3, #0
 8008024:	d001      	beq.n	800802a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8008026:	2301      	movs	r3, #1
 8008028:	e000      	b.n	800802c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800802a:	2300      	movs	r3, #0
}
 800802c:	4618      	mov	r0, r3
 800802e:	3718      	adds	r7, #24
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}
 8008034:	00010002 	.word	0x00010002

08008038 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b084      	sub	sp, #16
 800803c:	af00      	add	r7, sp, #0
 800803e:	60f8      	str	r0, [r7, #12]
 8008040:	60b9      	str	r1, [r7, #8]
 8008042:	603b      	str	r3, [r7, #0]
 8008044:	4613      	mov	r3, r2
 8008046:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008048:	e025      	b.n	8008096 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008050:	d021      	beq.n	8008096 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008052:	f7fe fced 	bl	8006a30 <HAL_GetTick>
 8008056:	4602      	mov	r2, r0
 8008058:	69bb      	ldr	r3, [r7, #24]
 800805a:	1ad3      	subs	r3, r2, r3
 800805c:	683a      	ldr	r2, [r7, #0]
 800805e:	429a      	cmp	r2, r3
 8008060:	d302      	bcc.n	8008068 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d116      	bne.n	8008096 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	2200      	movs	r2, #0
 800806c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	2220      	movs	r2, #32
 8008072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	2200      	movs	r2, #0
 800807a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008082:	f043 0220 	orr.w	r2, r3, #32
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2200      	movs	r2, #0
 800808e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008092:	2301      	movs	r3, #1
 8008094:	e023      	b.n	80080de <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	0c1b      	lsrs	r3, r3, #16
 800809a:	b2db      	uxtb	r3, r3
 800809c:	2b01      	cmp	r3, #1
 800809e:	d10d      	bne.n	80080bc <I2C_WaitOnFlagUntilTimeout+0x84>
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	695b      	ldr	r3, [r3, #20]
 80080a6:	43da      	mvns	r2, r3
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	4013      	ands	r3, r2
 80080ac:	b29b      	uxth	r3, r3
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	bf0c      	ite	eq
 80080b2:	2301      	moveq	r3, #1
 80080b4:	2300      	movne	r3, #0
 80080b6:	b2db      	uxtb	r3, r3
 80080b8:	461a      	mov	r2, r3
 80080ba:	e00c      	b.n	80080d6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	699b      	ldr	r3, [r3, #24]
 80080c2:	43da      	mvns	r2, r3
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	4013      	ands	r3, r2
 80080c8:	b29b      	uxth	r3, r3
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	bf0c      	ite	eq
 80080ce:	2301      	moveq	r3, #1
 80080d0:	2300      	movne	r3, #0
 80080d2:	b2db      	uxtb	r3, r3
 80080d4:	461a      	mov	r2, r3
 80080d6:	79fb      	ldrb	r3, [r7, #7]
 80080d8:	429a      	cmp	r2, r3
 80080da:	d0b6      	beq.n	800804a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80080dc:	2300      	movs	r3, #0
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3710      	adds	r7, #16
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}

080080e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80080e6:	b580      	push	{r7, lr}
 80080e8:	b084      	sub	sp, #16
 80080ea:	af00      	add	r7, sp, #0
 80080ec:	60f8      	str	r0, [r7, #12]
 80080ee:	60b9      	str	r1, [r7, #8]
 80080f0:	607a      	str	r2, [r7, #4]
 80080f2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80080f4:	e051      	b.n	800819a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	695b      	ldr	r3, [r3, #20]
 80080fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008100:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008104:	d123      	bne.n	800814e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	681a      	ldr	r2, [r3, #0]
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008114:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800811e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	2200      	movs	r2, #0
 8008124:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	2220      	movs	r2, #32
 800812a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	2200      	movs	r2, #0
 8008132:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800813a:	f043 0204 	orr.w	r2, r3, #4
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	2200      	movs	r2, #0
 8008146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800814a:	2301      	movs	r3, #1
 800814c:	e046      	b.n	80081dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008154:	d021      	beq.n	800819a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008156:	f7fe fc6b 	bl	8006a30 <HAL_GetTick>
 800815a:	4602      	mov	r2, r0
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	1ad3      	subs	r3, r2, r3
 8008160:	687a      	ldr	r2, [r7, #4]
 8008162:	429a      	cmp	r2, r3
 8008164:	d302      	bcc.n	800816c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d116      	bne.n	800819a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	2200      	movs	r2, #0
 8008170:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2220      	movs	r2, #32
 8008176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2200      	movs	r2, #0
 800817e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008186:	f043 0220 	orr.w	r2, r3, #32
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	2200      	movs	r2, #0
 8008192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008196:	2301      	movs	r3, #1
 8008198:	e020      	b.n	80081dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	0c1b      	lsrs	r3, r3, #16
 800819e:	b2db      	uxtb	r3, r3
 80081a0:	2b01      	cmp	r3, #1
 80081a2:	d10c      	bne.n	80081be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	695b      	ldr	r3, [r3, #20]
 80081aa:	43da      	mvns	r2, r3
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	4013      	ands	r3, r2
 80081b0:	b29b      	uxth	r3, r3
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	bf14      	ite	ne
 80081b6:	2301      	movne	r3, #1
 80081b8:	2300      	moveq	r3, #0
 80081ba:	b2db      	uxtb	r3, r3
 80081bc:	e00b      	b.n	80081d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	699b      	ldr	r3, [r3, #24]
 80081c4:	43da      	mvns	r2, r3
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	4013      	ands	r3, r2
 80081ca:	b29b      	uxth	r3, r3
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	bf14      	ite	ne
 80081d0:	2301      	movne	r3, #1
 80081d2:	2300      	moveq	r3, #0
 80081d4:	b2db      	uxtb	r3, r3
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d18d      	bne.n	80080f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80081da:	2300      	movs	r3, #0
}
 80081dc:	4618      	mov	r0, r3
 80081de:	3710      	adds	r7, #16
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}

080081e4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b084      	sub	sp, #16
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	60f8      	str	r0, [r7, #12]
 80081ec:	60b9      	str	r1, [r7, #8]
 80081ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80081f0:	e02d      	b.n	800824e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80081f2:	68f8      	ldr	r0, [r7, #12]
 80081f4:	f000 f8ce 	bl	8008394 <I2C_IsAcknowledgeFailed>
 80081f8:	4603      	mov	r3, r0
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d001      	beq.n	8008202 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80081fe:	2301      	movs	r3, #1
 8008200:	e02d      	b.n	800825e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008208:	d021      	beq.n	800824e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800820a:	f7fe fc11 	bl	8006a30 <HAL_GetTick>
 800820e:	4602      	mov	r2, r0
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	1ad3      	subs	r3, r2, r3
 8008214:	68ba      	ldr	r2, [r7, #8]
 8008216:	429a      	cmp	r2, r3
 8008218:	d302      	bcc.n	8008220 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d116      	bne.n	800824e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	2200      	movs	r2, #0
 8008224:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	2220      	movs	r2, #32
 800822a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	2200      	movs	r2, #0
 8008232:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800823a:	f043 0220 	orr.w	r2, r3, #32
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	2200      	movs	r2, #0
 8008246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800824a:	2301      	movs	r3, #1
 800824c:	e007      	b.n	800825e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	695b      	ldr	r3, [r3, #20]
 8008254:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008258:	2b80      	cmp	r3, #128	; 0x80
 800825a:	d1ca      	bne.n	80081f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800825c:	2300      	movs	r3, #0
}
 800825e:	4618      	mov	r0, r3
 8008260:	3710      	adds	r7, #16
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}

08008266 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008266:	b580      	push	{r7, lr}
 8008268:	b084      	sub	sp, #16
 800826a:	af00      	add	r7, sp, #0
 800826c:	60f8      	str	r0, [r7, #12]
 800826e:	60b9      	str	r1, [r7, #8]
 8008270:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008272:	e02d      	b.n	80082d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008274:	68f8      	ldr	r0, [r7, #12]
 8008276:	f000 f88d 	bl	8008394 <I2C_IsAcknowledgeFailed>
 800827a:	4603      	mov	r3, r0
 800827c:	2b00      	cmp	r3, #0
 800827e:	d001      	beq.n	8008284 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008280:	2301      	movs	r3, #1
 8008282:	e02d      	b.n	80082e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800828a:	d021      	beq.n	80082d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800828c:	f7fe fbd0 	bl	8006a30 <HAL_GetTick>
 8008290:	4602      	mov	r2, r0
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	1ad3      	subs	r3, r2, r3
 8008296:	68ba      	ldr	r2, [r7, #8]
 8008298:	429a      	cmp	r2, r3
 800829a:	d302      	bcc.n	80082a2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d116      	bne.n	80082d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	2200      	movs	r2, #0
 80082a6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	2220      	movs	r2, #32
 80082ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	2200      	movs	r2, #0
 80082b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082bc:	f043 0220 	orr.w	r2, r3, #32
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	2200      	movs	r2, #0
 80082c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80082cc:	2301      	movs	r3, #1
 80082ce:	e007      	b.n	80082e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	695b      	ldr	r3, [r3, #20]
 80082d6:	f003 0304 	and.w	r3, r3, #4
 80082da:	2b04      	cmp	r3, #4
 80082dc:	d1ca      	bne.n	8008274 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80082de:	2300      	movs	r3, #0
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	3710      	adds	r7, #16
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}

080082e8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b084      	sub	sp, #16
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	60f8      	str	r0, [r7, #12]
 80082f0:	60b9      	str	r1, [r7, #8]
 80082f2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80082f4:	e042      	b.n	800837c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	695b      	ldr	r3, [r3, #20]
 80082fc:	f003 0310 	and.w	r3, r3, #16
 8008300:	2b10      	cmp	r3, #16
 8008302:	d119      	bne.n	8008338 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f06f 0210 	mvn.w	r2, #16
 800830c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	2200      	movs	r2, #0
 8008312:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	2220      	movs	r2, #32
 8008318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	2200      	movs	r2, #0
 8008320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	2200      	movs	r2, #0
 8008330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008334:	2301      	movs	r3, #1
 8008336:	e029      	b.n	800838c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008338:	f7fe fb7a 	bl	8006a30 <HAL_GetTick>
 800833c:	4602      	mov	r2, r0
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	1ad3      	subs	r3, r2, r3
 8008342:	68ba      	ldr	r2, [r7, #8]
 8008344:	429a      	cmp	r2, r3
 8008346:	d302      	bcc.n	800834e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d116      	bne.n	800837c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	2200      	movs	r2, #0
 8008352:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	2220      	movs	r2, #32
 8008358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	2200      	movs	r2, #0
 8008360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008368:	f043 0220 	orr.w	r2, r3, #32
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	2200      	movs	r2, #0
 8008374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008378:	2301      	movs	r3, #1
 800837a:	e007      	b.n	800838c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	695b      	ldr	r3, [r3, #20]
 8008382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008386:	2b40      	cmp	r3, #64	; 0x40
 8008388:	d1b5      	bne.n	80082f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800838a:	2300      	movs	r3, #0
}
 800838c:	4618      	mov	r0, r3
 800838e:	3710      	adds	r7, #16
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}

08008394 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008394:	b480      	push	{r7}
 8008396:	b083      	sub	sp, #12
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	695b      	ldr	r3, [r3, #20]
 80083a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083aa:	d11b      	bne.n	80083e4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80083b4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2200      	movs	r2, #0
 80083ba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2220      	movs	r2, #32
 80083c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2200      	movs	r2, #0
 80083c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083d0:	f043 0204 	orr.w	r2, r3, #4
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2200      	movs	r2, #0
 80083dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80083e0:	2301      	movs	r3, #1
 80083e2:	e000      	b.n	80083e6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80083e4:	2300      	movs	r3, #0
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	370c      	adds	r7, #12
 80083ea:	46bd      	mov	sp, r7
 80083ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f0:	4770      	bx	lr
	...

080083f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b086      	sub	sp, #24
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d101      	bne.n	8008406 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008402:	2301      	movs	r3, #1
 8008404:	e267      	b.n	80088d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f003 0301 	and.w	r3, r3, #1
 800840e:	2b00      	cmp	r3, #0
 8008410:	d075      	beq.n	80084fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008412:	4b88      	ldr	r3, [pc, #544]	; (8008634 <HAL_RCC_OscConfig+0x240>)
 8008414:	689b      	ldr	r3, [r3, #8]
 8008416:	f003 030c 	and.w	r3, r3, #12
 800841a:	2b04      	cmp	r3, #4
 800841c:	d00c      	beq.n	8008438 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800841e:	4b85      	ldr	r3, [pc, #532]	; (8008634 <HAL_RCC_OscConfig+0x240>)
 8008420:	689b      	ldr	r3, [r3, #8]
 8008422:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008426:	2b08      	cmp	r3, #8
 8008428:	d112      	bne.n	8008450 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800842a:	4b82      	ldr	r3, [pc, #520]	; (8008634 <HAL_RCC_OscConfig+0x240>)
 800842c:	685b      	ldr	r3, [r3, #4]
 800842e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008432:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008436:	d10b      	bne.n	8008450 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008438:	4b7e      	ldr	r3, [pc, #504]	; (8008634 <HAL_RCC_OscConfig+0x240>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008440:	2b00      	cmp	r3, #0
 8008442:	d05b      	beq.n	80084fc <HAL_RCC_OscConfig+0x108>
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	685b      	ldr	r3, [r3, #4]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d157      	bne.n	80084fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800844c:	2301      	movs	r3, #1
 800844e:	e242      	b.n	80088d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	685b      	ldr	r3, [r3, #4]
 8008454:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008458:	d106      	bne.n	8008468 <HAL_RCC_OscConfig+0x74>
 800845a:	4b76      	ldr	r3, [pc, #472]	; (8008634 <HAL_RCC_OscConfig+0x240>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4a75      	ldr	r2, [pc, #468]	; (8008634 <HAL_RCC_OscConfig+0x240>)
 8008460:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008464:	6013      	str	r3, [r2, #0]
 8008466:	e01d      	b.n	80084a4 <HAL_RCC_OscConfig+0xb0>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008470:	d10c      	bne.n	800848c <HAL_RCC_OscConfig+0x98>
 8008472:	4b70      	ldr	r3, [pc, #448]	; (8008634 <HAL_RCC_OscConfig+0x240>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4a6f      	ldr	r2, [pc, #444]	; (8008634 <HAL_RCC_OscConfig+0x240>)
 8008478:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800847c:	6013      	str	r3, [r2, #0]
 800847e:	4b6d      	ldr	r3, [pc, #436]	; (8008634 <HAL_RCC_OscConfig+0x240>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	4a6c      	ldr	r2, [pc, #432]	; (8008634 <HAL_RCC_OscConfig+0x240>)
 8008484:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008488:	6013      	str	r3, [r2, #0]
 800848a:	e00b      	b.n	80084a4 <HAL_RCC_OscConfig+0xb0>
 800848c:	4b69      	ldr	r3, [pc, #420]	; (8008634 <HAL_RCC_OscConfig+0x240>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4a68      	ldr	r2, [pc, #416]	; (8008634 <HAL_RCC_OscConfig+0x240>)
 8008492:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008496:	6013      	str	r3, [r2, #0]
 8008498:	4b66      	ldr	r3, [pc, #408]	; (8008634 <HAL_RCC_OscConfig+0x240>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	4a65      	ldr	r2, [pc, #404]	; (8008634 <HAL_RCC_OscConfig+0x240>)
 800849e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80084a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	685b      	ldr	r3, [r3, #4]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d013      	beq.n	80084d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80084ac:	f7fe fac0 	bl	8006a30 <HAL_GetTick>
 80084b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80084b2:	e008      	b.n	80084c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80084b4:	f7fe fabc 	bl	8006a30 <HAL_GetTick>
 80084b8:	4602      	mov	r2, r0
 80084ba:	693b      	ldr	r3, [r7, #16]
 80084bc:	1ad3      	subs	r3, r2, r3
 80084be:	2b64      	cmp	r3, #100	; 0x64
 80084c0:	d901      	bls.n	80084c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80084c2:	2303      	movs	r3, #3
 80084c4:	e207      	b.n	80088d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80084c6:	4b5b      	ldr	r3, [pc, #364]	; (8008634 <HAL_RCC_OscConfig+0x240>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d0f0      	beq.n	80084b4 <HAL_RCC_OscConfig+0xc0>
 80084d2:	e014      	b.n	80084fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80084d4:	f7fe faac 	bl	8006a30 <HAL_GetTick>
 80084d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80084da:	e008      	b.n	80084ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80084dc:	f7fe faa8 	bl	8006a30 <HAL_GetTick>
 80084e0:	4602      	mov	r2, r0
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	1ad3      	subs	r3, r2, r3
 80084e6:	2b64      	cmp	r3, #100	; 0x64
 80084e8:	d901      	bls.n	80084ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80084ea:	2303      	movs	r3, #3
 80084ec:	e1f3      	b.n	80088d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80084ee:	4b51      	ldr	r3, [pc, #324]	; (8008634 <HAL_RCC_OscConfig+0x240>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d1f0      	bne.n	80084dc <HAL_RCC_OscConfig+0xe8>
 80084fa:	e000      	b.n	80084fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80084fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f003 0302 	and.w	r3, r3, #2
 8008506:	2b00      	cmp	r3, #0
 8008508:	d063      	beq.n	80085d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800850a:	4b4a      	ldr	r3, [pc, #296]	; (8008634 <HAL_RCC_OscConfig+0x240>)
 800850c:	689b      	ldr	r3, [r3, #8]
 800850e:	f003 030c 	and.w	r3, r3, #12
 8008512:	2b00      	cmp	r3, #0
 8008514:	d00b      	beq.n	800852e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008516:	4b47      	ldr	r3, [pc, #284]	; (8008634 <HAL_RCC_OscConfig+0x240>)
 8008518:	689b      	ldr	r3, [r3, #8]
 800851a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800851e:	2b08      	cmp	r3, #8
 8008520:	d11c      	bne.n	800855c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008522:	4b44      	ldr	r3, [pc, #272]	; (8008634 <HAL_RCC_OscConfig+0x240>)
 8008524:	685b      	ldr	r3, [r3, #4]
 8008526:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800852a:	2b00      	cmp	r3, #0
 800852c:	d116      	bne.n	800855c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800852e:	4b41      	ldr	r3, [pc, #260]	; (8008634 <HAL_RCC_OscConfig+0x240>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f003 0302 	and.w	r3, r3, #2
 8008536:	2b00      	cmp	r3, #0
 8008538:	d005      	beq.n	8008546 <HAL_RCC_OscConfig+0x152>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	68db      	ldr	r3, [r3, #12]
 800853e:	2b01      	cmp	r3, #1
 8008540:	d001      	beq.n	8008546 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008542:	2301      	movs	r3, #1
 8008544:	e1c7      	b.n	80088d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008546:	4b3b      	ldr	r3, [pc, #236]	; (8008634 <HAL_RCC_OscConfig+0x240>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	691b      	ldr	r3, [r3, #16]
 8008552:	00db      	lsls	r3, r3, #3
 8008554:	4937      	ldr	r1, [pc, #220]	; (8008634 <HAL_RCC_OscConfig+0x240>)
 8008556:	4313      	orrs	r3, r2
 8008558:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800855a:	e03a      	b.n	80085d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	68db      	ldr	r3, [r3, #12]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d020      	beq.n	80085a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008564:	4b34      	ldr	r3, [pc, #208]	; (8008638 <HAL_RCC_OscConfig+0x244>)
 8008566:	2201      	movs	r2, #1
 8008568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800856a:	f7fe fa61 	bl	8006a30 <HAL_GetTick>
 800856e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008570:	e008      	b.n	8008584 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008572:	f7fe fa5d 	bl	8006a30 <HAL_GetTick>
 8008576:	4602      	mov	r2, r0
 8008578:	693b      	ldr	r3, [r7, #16]
 800857a:	1ad3      	subs	r3, r2, r3
 800857c:	2b02      	cmp	r3, #2
 800857e:	d901      	bls.n	8008584 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008580:	2303      	movs	r3, #3
 8008582:	e1a8      	b.n	80088d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008584:	4b2b      	ldr	r3, [pc, #172]	; (8008634 <HAL_RCC_OscConfig+0x240>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f003 0302 	and.w	r3, r3, #2
 800858c:	2b00      	cmp	r3, #0
 800858e:	d0f0      	beq.n	8008572 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008590:	4b28      	ldr	r3, [pc, #160]	; (8008634 <HAL_RCC_OscConfig+0x240>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	691b      	ldr	r3, [r3, #16]
 800859c:	00db      	lsls	r3, r3, #3
 800859e:	4925      	ldr	r1, [pc, #148]	; (8008634 <HAL_RCC_OscConfig+0x240>)
 80085a0:	4313      	orrs	r3, r2
 80085a2:	600b      	str	r3, [r1, #0]
 80085a4:	e015      	b.n	80085d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80085a6:	4b24      	ldr	r3, [pc, #144]	; (8008638 <HAL_RCC_OscConfig+0x244>)
 80085a8:	2200      	movs	r2, #0
 80085aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085ac:	f7fe fa40 	bl	8006a30 <HAL_GetTick>
 80085b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80085b2:	e008      	b.n	80085c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80085b4:	f7fe fa3c 	bl	8006a30 <HAL_GetTick>
 80085b8:	4602      	mov	r2, r0
 80085ba:	693b      	ldr	r3, [r7, #16]
 80085bc:	1ad3      	subs	r3, r2, r3
 80085be:	2b02      	cmp	r3, #2
 80085c0:	d901      	bls.n	80085c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80085c2:	2303      	movs	r3, #3
 80085c4:	e187      	b.n	80088d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80085c6:	4b1b      	ldr	r3, [pc, #108]	; (8008634 <HAL_RCC_OscConfig+0x240>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f003 0302 	and.w	r3, r3, #2
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d1f0      	bne.n	80085b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f003 0308 	and.w	r3, r3, #8
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d036      	beq.n	800864c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	695b      	ldr	r3, [r3, #20]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d016      	beq.n	8008614 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80085e6:	4b15      	ldr	r3, [pc, #84]	; (800863c <HAL_RCC_OscConfig+0x248>)
 80085e8:	2201      	movs	r2, #1
 80085ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085ec:	f7fe fa20 	bl	8006a30 <HAL_GetTick>
 80085f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80085f2:	e008      	b.n	8008606 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80085f4:	f7fe fa1c 	bl	8006a30 <HAL_GetTick>
 80085f8:	4602      	mov	r2, r0
 80085fa:	693b      	ldr	r3, [r7, #16]
 80085fc:	1ad3      	subs	r3, r2, r3
 80085fe:	2b02      	cmp	r3, #2
 8008600:	d901      	bls.n	8008606 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008602:	2303      	movs	r3, #3
 8008604:	e167      	b.n	80088d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008606:	4b0b      	ldr	r3, [pc, #44]	; (8008634 <HAL_RCC_OscConfig+0x240>)
 8008608:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800860a:	f003 0302 	and.w	r3, r3, #2
 800860e:	2b00      	cmp	r3, #0
 8008610:	d0f0      	beq.n	80085f4 <HAL_RCC_OscConfig+0x200>
 8008612:	e01b      	b.n	800864c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008614:	4b09      	ldr	r3, [pc, #36]	; (800863c <HAL_RCC_OscConfig+0x248>)
 8008616:	2200      	movs	r2, #0
 8008618:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800861a:	f7fe fa09 	bl	8006a30 <HAL_GetTick>
 800861e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008620:	e00e      	b.n	8008640 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008622:	f7fe fa05 	bl	8006a30 <HAL_GetTick>
 8008626:	4602      	mov	r2, r0
 8008628:	693b      	ldr	r3, [r7, #16]
 800862a:	1ad3      	subs	r3, r2, r3
 800862c:	2b02      	cmp	r3, #2
 800862e:	d907      	bls.n	8008640 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008630:	2303      	movs	r3, #3
 8008632:	e150      	b.n	80088d6 <HAL_RCC_OscConfig+0x4e2>
 8008634:	40023800 	.word	0x40023800
 8008638:	42470000 	.word	0x42470000
 800863c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008640:	4b88      	ldr	r3, [pc, #544]	; (8008864 <HAL_RCC_OscConfig+0x470>)
 8008642:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008644:	f003 0302 	and.w	r3, r3, #2
 8008648:	2b00      	cmp	r3, #0
 800864a:	d1ea      	bne.n	8008622 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f003 0304 	and.w	r3, r3, #4
 8008654:	2b00      	cmp	r3, #0
 8008656:	f000 8097 	beq.w	8008788 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800865a:	2300      	movs	r3, #0
 800865c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800865e:	4b81      	ldr	r3, [pc, #516]	; (8008864 <HAL_RCC_OscConfig+0x470>)
 8008660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008666:	2b00      	cmp	r3, #0
 8008668:	d10f      	bne.n	800868a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800866a:	2300      	movs	r3, #0
 800866c:	60bb      	str	r3, [r7, #8]
 800866e:	4b7d      	ldr	r3, [pc, #500]	; (8008864 <HAL_RCC_OscConfig+0x470>)
 8008670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008672:	4a7c      	ldr	r2, [pc, #496]	; (8008864 <HAL_RCC_OscConfig+0x470>)
 8008674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008678:	6413      	str	r3, [r2, #64]	; 0x40
 800867a:	4b7a      	ldr	r3, [pc, #488]	; (8008864 <HAL_RCC_OscConfig+0x470>)
 800867c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800867e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008682:	60bb      	str	r3, [r7, #8]
 8008684:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008686:	2301      	movs	r3, #1
 8008688:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800868a:	4b77      	ldr	r3, [pc, #476]	; (8008868 <HAL_RCC_OscConfig+0x474>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008692:	2b00      	cmp	r3, #0
 8008694:	d118      	bne.n	80086c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008696:	4b74      	ldr	r3, [pc, #464]	; (8008868 <HAL_RCC_OscConfig+0x474>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4a73      	ldr	r2, [pc, #460]	; (8008868 <HAL_RCC_OscConfig+0x474>)
 800869c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80086a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80086a2:	f7fe f9c5 	bl	8006a30 <HAL_GetTick>
 80086a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80086a8:	e008      	b.n	80086bc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80086aa:	f7fe f9c1 	bl	8006a30 <HAL_GetTick>
 80086ae:	4602      	mov	r2, r0
 80086b0:	693b      	ldr	r3, [r7, #16]
 80086b2:	1ad3      	subs	r3, r2, r3
 80086b4:	2b02      	cmp	r3, #2
 80086b6:	d901      	bls.n	80086bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80086b8:	2303      	movs	r3, #3
 80086ba:	e10c      	b.n	80088d6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80086bc:	4b6a      	ldr	r3, [pc, #424]	; (8008868 <HAL_RCC_OscConfig+0x474>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d0f0      	beq.n	80086aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	689b      	ldr	r3, [r3, #8]
 80086cc:	2b01      	cmp	r3, #1
 80086ce:	d106      	bne.n	80086de <HAL_RCC_OscConfig+0x2ea>
 80086d0:	4b64      	ldr	r3, [pc, #400]	; (8008864 <HAL_RCC_OscConfig+0x470>)
 80086d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086d4:	4a63      	ldr	r2, [pc, #396]	; (8008864 <HAL_RCC_OscConfig+0x470>)
 80086d6:	f043 0301 	orr.w	r3, r3, #1
 80086da:	6713      	str	r3, [r2, #112]	; 0x70
 80086dc:	e01c      	b.n	8008718 <HAL_RCC_OscConfig+0x324>
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	689b      	ldr	r3, [r3, #8]
 80086e2:	2b05      	cmp	r3, #5
 80086e4:	d10c      	bne.n	8008700 <HAL_RCC_OscConfig+0x30c>
 80086e6:	4b5f      	ldr	r3, [pc, #380]	; (8008864 <HAL_RCC_OscConfig+0x470>)
 80086e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086ea:	4a5e      	ldr	r2, [pc, #376]	; (8008864 <HAL_RCC_OscConfig+0x470>)
 80086ec:	f043 0304 	orr.w	r3, r3, #4
 80086f0:	6713      	str	r3, [r2, #112]	; 0x70
 80086f2:	4b5c      	ldr	r3, [pc, #368]	; (8008864 <HAL_RCC_OscConfig+0x470>)
 80086f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086f6:	4a5b      	ldr	r2, [pc, #364]	; (8008864 <HAL_RCC_OscConfig+0x470>)
 80086f8:	f043 0301 	orr.w	r3, r3, #1
 80086fc:	6713      	str	r3, [r2, #112]	; 0x70
 80086fe:	e00b      	b.n	8008718 <HAL_RCC_OscConfig+0x324>
 8008700:	4b58      	ldr	r3, [pc, #352]	; (8008864 <HAL_RCC_OscConfig+0x470>)
 8008702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008704:	4a57      	ldr	r2, [pc, #348]	; (8008864 <HAL_RCC_OscConfig+0x470>)
 8008706:	f023 0301 	bic.w	r3, r3, #1
 800870a:	6713      	str	r3, [r2, #112]	; 0x70
 800870c:	4b55      	ldr	r3, [pc, #340]	; (8008864 <HAL_RCC_OscConfig+0x470>)
 800870e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008710:	4a54      	ldr	r2, [pc, #336]	; (8008864 <HAL_RCC_OscConfig+0x470>)
 8008712:	f023 0304 	bic.w	r3, r3, #4
 8008716:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	689b      	ldr	r3, [r3, #8]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d015      	beq.n	800874c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008720:	f7fe f986 	bl	8006a30 <HAL_GetTick>
 8008724:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008726:	e00a      	b.n	800873e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008728:	f7fe f982 	bl	8006a30 <HAL_GetTick>
 800872c:	4602      	mov	r2, r0
 800872e:	693b      	ldr	r3, [r7, #16]
 8008730:	1ad3      	subs	r3, r2, r3
 8008732:	f241 3288 	movw	r2, #5000	; 0x1388
 8008736:	4293      	cmp	r3, r2
 8008738:	d901      	bls.n	800873e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800873a:	2303      	movs	r3, #3
 800873c:	e0cb      	b.n	80088d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800873e:	4b49      	ldr	r3, [pc, #292]	; (8008864 <HAL_RCC_OscConfig+0x470>)
 8008740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008742:	f003 0302 	and.w	r3, r3, #2
 8008746:	2b00      	cmp	r3, #0
 8008748:	d0ee      	beq.n	8008728 <HAL_RCC_OscConfig+0x334>
 800874a:	e014      	b.n	8008776 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800874c:	f7fe f970 	bl	8006a30 <HAL_GetTick>
 8008750:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008752:	e00a      	b.n	800876a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008754:	f7fe f96c 	bl	8006a30 <HAL_GetTick>
 8008758:	4602      	mov	r2, r0
 800875a:	693b      	ldr	r3, [r7, #16]
 800875c:	1ad3      	subs	r3, r2, r3
 800875e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008762:	4293      	cmp	r3, r2
 8008764:	d901      	bls.n	800876a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008766:	2303      	movs	r3, #3
 8008768:	e0b5      	b.n	80088d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800876a:	4b3e      	ldr	r3, [pc, #248]	; (8008864 <HAL_RCC_OscConfig+0x470>)
 800876c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800876e:	f003 0302 	and.w	r3, r3, #2
 8008772:	2b00      	cmp	r3, #0
 8008774:	d1ee      	bne.n	8008754 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008776:	7dfb      	ldrb	r3, [r7, #23]
 8008778:	2b01      	cmp	r3, #1
 800877a:	d105      	bne.n	8008788 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800877c:	4b39      	ldr	r3, [pc, #228]	; (8008864 <HAL_RCC_OscConfig+0x470>)
 800877e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008780:	4a38      	ldr	r2, [pc, #224]	; (8008864 <HAL_RCC_OscConfig+0x470>)
 8008782:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008786:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	699b      	ldr	r3, [r3, #24]
 800878c:	2b00      	cmp	r3, #0
 800878e:	f000 80a1 	beq.w	80088d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008792:	4b34      	ldr	r3, [pc, #208]	; (8008864 <HAL_RCC_OscConfig+0x470>)
 8008794:	689b      	ldr	r3, [r3, #8]
 8008796:	f003 030c 	and.w	r3, r3, #12
 800879a:	2b08      	cmp	r3, #8
 800879c:	d05c      	beq.n	8008858 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	699b      	ldr	r3, [r3, #24]
 80087a2:	2b02      	cmp	r3, #2
 80087a4:	d141      	bne.n	800882a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80087a6:	4b31      	ldr	r3, [pc, #196]	; (800886c <HAL_RCC_OscConfig+0x478>)
 80087a8:	2200      	movs	r2, #0
 80087aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80087ac:	f7fe f940 	bl	8006a30 <HAL_GetTick>
 80087b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80087b2:	e008      	b.n	80087c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80087b4:	f7fe f93c 	bl	8006a30 <HAL_GetTick>
 80087b8:	4602      	mov	r2, r0
 80087ba:	693b      	ldr	r3, [r7, #16]
 80087bc:	1ad3      	subs	r3, r2, r3
 80087be:	2b02      	cmp	r3, #2
 80087c0:	d901      	bls.n	80087c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80087c2:	2303      	movs	r3, #3
 80087c4:	e087      	b.n	80088d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80087c6:	4b27      	ldr	r3, [pc, #156]	; (8008864 <HAL_RCC_OscConfig+0x470>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d1f0      	bne.n	80087b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	69da      	ldr	r2, [r3, #28]
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6a1b      	ldr	r3, [r3, #32]
 80087da:	431a      	orrs	r2, r3
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087e0:	019b      	lsls	r3, r3, #6
 80087e2:	431a      	orrs	r2, r3
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087e8:	085b      	lsrs	r3, r3, #1
 80087ea:	3b01      	subs	r3, #1
 80087ec:	041b      	lsls	r3, r3, #16
 80087ee:	431a      	orrs	r2, r3
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087f4:	061b      	lsls	r3, r3, #24
 80087f6:	491b      	ldr	r1, [pc, #108]	; (8008864 <HAL_RCC_OscConfig+0x470>)
 80087f8:	4313      	orrs	r3, r2
 80087fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80087fc:	4b1b      	ldr	r3, [pc, #108]	; (800886c <HAL_RCC_OscConfig+0x478>)
 80087fe:	2201      	movs	r2, #1
 8008800:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008802:	f7fe f915 	bl	8006a30 <HAL_GetTick>
 8008806:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008808:	e008      	b.n	800881c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800880a:	f7fe f911 	bl	8006a30 <HAL_GetTick>
 800880e:	4602      	mov	r2, r0
 8008810:	693b      	ldr	r3, [r7, #16]
 8008812:	1ad3      	subs	r3, r2, r3
 8008814:	2b02      	cmp	r3, #2
 8008816:	d901      	bls.n	800881c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008818:	2303      	movs	r3, #3
 800881a:	e05c      	b.n	80088d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800881c:	4b11      	ldr	r3, [pc, #68]	; (8008864 <HAL_RCC_OscConfig+0x470>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008824:	2b00      	cmp	r3, #0
 8008826:	d0f0      	beq.n	800880a <HAL_RCC_OscConfig+0x416>
 8008828:	e054      	b.n	80088d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800882a:	4b10      	ldr	r3, [pc, #64]	; (800886c <HAL_RCC_OscConfig+0x478>)
 800882c:	2200      	movs	r2, #0
 800882e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008830:	f7fe f8fe 	bl	8006a30 <HAL_GetTick>
 8008834:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008836:	e008      	b.n	800884a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008838:	f7fe f8fa 	bl	8006a30 <HAL_GetTick>
 800883c:	4602      	mov	r2, r0
 800883e:	693b      	ldr	r3, [r7, #16]
 8008840:	1ad3      	subs	r3, r2, r3
 8008842:	2b02      	cmp	r3, #2
 8008844:	d901      	bls.n	800884a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008846:	2303      	movs	r3, #3
 8008848:	e045      	b.n	80088d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800884a:	4b06      	ldr	r3, [pc, #24]	; (8008864 <HAL_RCC_OscConfig+0x470>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008852:	2b00      	cmp	r3, #0
 8008854:	d1f0      	bne.n	8008838 <HAL_RCC_OscConfig+0x444>
 8008856:	e03d      	b.n	80088d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	699b      	ldr	r3, [r3, #24]
 800885c:	2b01      	cmp	r3, #1
 800885e:	d107      	bne.n	8008870 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008860:	2301      	movs	r3, #1
 8008862:	e038      	b.n	80088d6 <HAL_RCC_OscConfig+0x4e2>
 8008864:	40023800 	.word	0x40023800
 8008868:	40007000 	.word	0x40007000
 800886c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008870:	4b1b      	ldr	r3, [pc, #108]	; (80088e0 <HAL_RCC_OscConfig+0x4ec>)
 8008872:	685b      	ldr	r3, [r3, #4]
 8008874:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	699b      	ldr	r3, [r3, #24]
 800887a:	2b01      	cmp	r3, #1
 800887c:	d028      	beq.n	80088d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008888:	429a      	cmp	r2, r3
 800888a:	d121      	bne.n	80088d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008896:	429a      	cmp	r2, r3
 8008898:	d11a      	bne.n	80088d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800889a:	68fa      	ldr	r2, [r7, #12]
 800889c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80088a0:	4013      	ands	r3, r2
 80088a2:	687a      	ldr	r2, [r7, #4]
 80088a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80088a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80088a8:	4293      	cmp	r3, r2
 80088aa:	d111      	bne.n	80088d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088b6:	085b      	lsrs	r3, r3, #1
 80088b8:	3b01      	subs	r3, #1
 80088ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80088bc:	429a      	cmp	r2, r3
 80088be:	d107      	bne.n	80088d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80088cc:	429a      	cmp	r2, r3
 80088ce:	d001      	beq.n	80088d4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80088d0:	2301      	movs	r3, #1
 80088d2:	e000      	b.n	80088d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80088d4:	2300      	movs	r3, #0
}
 80088d6:	4618      	mov	r0, r3
 80088d8:	3718      	adds	r7, #24
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}
 80088de:	bf00      	nop
 80088e0:	40023800 	.word	0x40023800

080088e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b084      	sub	sp, #16
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
 80088ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d101      	bne.n	80088f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80088f4:	2301      	movs	r3, #1
 80088f6:	e0cc      	b.n	8008a92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80088f8:	4b68      	ldr	r3, [pc, #416]	; (8008a9c <HAL_RCC_ClockConfig+0x1b8>)
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f003 0307 	and.w	r3, r3, #7
 8008900:	683a      	ldr	r2, [r7, #0]
 8008902:	429a      	cmp	r2, r3
 8008904:	d90c      	bls.n	8008920 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008906:	4b65      	ldr	r3, [pc, #404]	; (8008a9c <HAL_RCC_ClockConfig+0x1b8>)
 8008908:	683a      	ldr	r2, [r7, #0]
 800890a:	b2d2      	uxtb	r2, r2
 800890c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800890e:	4b63      	ldr	r3, [pc, #396]	; (8008a9c <HAL_RCC_ClockConfig+0x1b8>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f003 0307 	and.w	r3, r3, #7
 8008916:	683a      	ldr	r2, [r7, #0]
 8008918:	429a      	cmp	r2, r3
 800891a:	d001      	beq.n	8008920 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800891c:	2301      	movs	r3, #1
 800891e:	e0b8      	b.n	8008a92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f003 0302 	and.w	r3, r3, #2
 8008928:	2b00      	cmp	r3, #0
 800892a:	d020      	beq.n	800896e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f003 0304 	and.w	r3, r3, #4
 8008934:	2b00      	cmp	r3, #0
 8008936:	d005      	beq.n	8008944 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008938:	4b59      	ldr	r3, [pc, #356]	; (8008aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800893a:	689b      	ldr	r3, [r3, #8]
 800893c:	4a58      	ldr	r2, [pc, #352]	; (8008aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800893e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008942:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f003 0308 	and.w	r3, r3, #8
 800894c:	2b00      	cmp	r3, #0
 800894e:	d005      	beq.n	800895c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008950:	4b53      	ldr	r3, [pc, #332]	; (8008aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8008952:	689b      	ldr	r3, [r3, #8]
 8008954:	4a52      	ldr	r2, [pc, #328]	; (8008aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8008956:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800895a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800895c:	4b50      	ldr	r3, [pc, #320]	; (8008aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800895e:	689b      	ldr	r3, [r3, #8]
 8008960:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	689b      	ldr	r3, [r3, #8]
 8008968:	494d      	ldr	r1, [pc, #308]	; (8008aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800896a:	4313      	orrs	r3, r2
 800896c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f003 0301 	and.w	r3, r3, #1
 8008976:	2b00      	cmp	r3, #0
 8008978:	d044      	beq.n	8008a04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	685b      	ldr	r3, [r3, #4]
 800897e:	2b01      	cmp	r3, #1
 8008980:	d107      	bne.n	8008992 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008982:	4b47      	ldr	r3, [pc, #284]	; (8008aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800898a:	2b00      	cmp	r3, #0
 800898c:	d119      	bne.n	80089c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800898e:	2301      	movs	r3, #1
 8008990:	e07f      	b.n	8008a92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	685b      	ldr	r3, [r3, #4]
 8008996:	2b02      	cmp	r3, #2
 8008998:	d003      	beq.n	80089a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800899e:	2b03      	cmp	r3, #3
 80089a0:	d107      	bne.n	80089b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80089a2:	4b3f      	ldr	r3, [pc, #252]	; (8008aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d109      	bne.n	80089c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80089ae:	2301      	movs	r3, #1
 80089b0:	e06f      	b.n	8008a92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80089b2:	4b3b      	ldr	r3, [pc, #236]	; (8008aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f003 0302 	and.w	r3, r3, #2
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d101      	bne.n	80089c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80089be:	2301      	movs	r3, #1
 80089c0:	e067      	b.n	8008a92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80089c2:	4b37      	ldr	r3, [pc, #220]	; (8008aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80089c4:	689b      	ldr	r3, [r3, #8]
 80089c6:	f023 0203 	bic.w	r2, r3, #3
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	685b      	ldr	r3, [r3, #4]
 80089ce:	4934      	ldr	r1, [pc, #208]	; (8008aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80089d0:	4313      	orrs	r3, r2
 80089d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80089d4:	f7fe f82c 	bl	8006a30 <HAL_GetTick>
 80089d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80089da:	e00a      	b.n	80089f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80089dc:	f7fe f828 	bl	8006a30 <HAL_GetTick>
 80089e0:	4602      	mov	r2, r0
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	1ad3      	subs	r3, r2, r3
 80089e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d901      	bls.n	80089f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80089ee:	2303      	movs	r3, #3
 80089f0:	e04f      	b.n	8008a92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80089f2:	4b2b      	ldr	r3, [pc, #172]	; (8008aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80089f4:	689b      	ldr	r3, [r3, #8]
 80089f6:	f003 020c 	and.w	r2, r3, #12
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	685b      	ldr	r3, [r3, #4]
 80089fe:	009b      	lsls	r3, r3, #2
 8008a00:	429a      	cmp	r2, r3
 8008a02:	d1eb      	bne.n	80089dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008a04:	4b25      	ldr	r3, [pc, #148]	; (8008a9c <HAL_RCC_ClockConfig+0x1b8>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f003 0307 	and.w	r3, r3, #7
 8008a0c:	683a      	ldr	r2, [r7, #0]
 8008a0e:	429a      	cmp	r2, r3
 8008a10:	d20c      	bcs.n	8008a2c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a12:	4b22      	ldr	r3, [pc, #136]	; (8008a9c <HAL_RCC_ClockConfig+0x1b8>)
 8008a14:	683a      	ldr	r2, [r7, #0]
 8008a16:	b2d2      	uxtb	r2, r2
 8008a18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a1a:	4b20      	ldr	r3, [pc, #128]	; (8008a9c <HAL_RCC_ClockConfig+0x1b8>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f003 0307 	and.w	r3, r3, #7
 8008a22:	683a      	ldr	r2, [r7, #0]
 8008a24:	429a      	cmp	r2, r3
 8008a26:	d001      	beq.n	8008a2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008a28:	2301      	movs	r3, #1
 8008a2a:	e032      	b.n	8008a92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f003 0304 	and.w	r3, r3, #4
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d008      	beq.n	8008a4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008a38:	4b19      	ldr	r3, [pc, #100]	; (8008aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8008a3a:	689b      	ldr	r3, [r3, #8]
 8008a3c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	68db      	ldr	r3, [r3, #12]
 8008a44:	4916      	ldr	r1, [pc, #88]	; (8008aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8008a46:	4313      	orrs	r3, r2
 8008a48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f003 0308 	and.w	r3, r3, #8
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d009      	beq.n	8008a6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008a56:	4b12      	ldr	r3, [pc, #72]	; (8008aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8008a58:	689b      	ldr	r3, [r3, #8]
 8008a5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	691b      	ldr	r3, [r3, #16]
 8008a62:	00db      	lsls	r3, r3, #3
 8008a64:	490e      	ldr	r1, [pc, #56]	; (8008aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8008a66:	4313      	orrs	r3, r2
 8008a68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008a6a:	f000 f821 	bl	8008ab0 <HAL_RCC_GetSysClockFreq>
 8008a6e:	4602      	mov	r2, r0
 8008a70:	4b0b      	ldr	r3, [pc, #44]	; (8008aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8008a72:	689b      	ldr	r3, [r3, #8]
 8008a74:	091b      	lsrs	r3, r3, #4
 8008a76:	f003 030f 	and.w	r3, r3, #15
 8008a7a:	490a      	ldr	r1, [pc, #40]	; (8008aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8008a7c:	5ccb      	ldrb	r3, [r1, r3]
 8008a7e:	fa22 f303 	lsr.w	r3, r2, r3
 8008a82:	4a09      	ldr	r2, [pc, #36]	; (8008aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8008a84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008a86:	4b09      	ldr	r3, [pc, #36]	; (8008aac <HAL_RCC_ClockConfig+0x1c8>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f7fd ff8c 	bl	80069a8 <HAL_InitTick>

  return HAL_OK;
 8008a90:	2300      	movs	r3, #0
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3710      	adds	r7, #16
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}
 8008a9a:	bf00      	nop
 8008a9c:	40023c00 	.word	0x40023c00
 8008aa0:	40023800 	.word	0x40023800
 8008aa4:	0800d950 	.word	0x0800d950
 8008aa8:	20000020 	.word	0x20000020
 8008aac:	2000002c 	.word	0x2000002c

08008ab0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008ab0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ab4:	b094      	sub	sp, #80	; 0x50
 8008ab6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	647b      	str	r3, [r7, #68]	; 0x44
 8008abc:	2300      	movs	r3, #0
 8008abe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008ac8:	4b79      	ldr	r3, [pc, #484]	; (8008cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8008aca:	689b      	ldr	r3, [r3, #8]
 8008acc:	f003 030c 	and.w	r3, r3, #12
 8008ad0:	2b08      	cmp	r3, #8
 8008ad2:	d00d      	beq.n	8008af0 <HAL_RCC_GetSysClockFreq+0x40>
 8008ad4:	2b08      	cmp	r3, #8
 8008ad6:	f200 80e1 	bhi.w	8008c9c <HAL_RCC_GetSysClockFreq+0x1ec>
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d002      	beq.n	8008ae4 <HAL_RCC_GetSysClockFreq+0x34>
 8008ade:	2b04      	cmp	r3, #4
 8008ae0:	d003      	beq.n	8008aea <HAL_RCC_GetSysClockFreq+0x3a>
 8008ae2:	e0db      	b.n	8008c9c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008ae4:	4b73      	ldr	r3, [pc, #460]	; (8008cb4 <HAL_RCC_GetSysClockFreq+0x204>)
 8008ae6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8008ae8:	e0db      	b.n	8008ca2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008aea:	4b72      	ldr	r3, [pc, #456]	; (8008cb4 <HAL_RCC_GetSysClockFreq+0x204>)
 8008aec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008aee:	e0d8      	b.n	8008ca2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008af0:	4b6f      	ldr	r3, [pc, #444]	; (8008cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8008af2:	685b      	ldr	r3, [r3, #4]
 8008af4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008af8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008afa:	4b6d      	ldr	r3, [pc, #436]	; (8008cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8008afc:	685b      	ldr	r3, [r3, #4]
 8008afe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d063      	beq.n	8008bce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008b06:	4b6a      	ldr	r3, [pc, #424]	; (8008cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8008b08:	685b      	ldr	r3, [r3, #4]
 8008b0a:	099b      	lsrs	r3, r3, #6
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008b10:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b18:	633b      	str	r3, [r7, #48]	; 0x30
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	637b      	str	r3, [r7, #52]	; 0x34
 8008b1e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008b22:	4622      	mov	r2, r4
 8008b24:	462b      	mov	r3, r5
 8008b26:	f04f 0000 	mov.w	r0, #0
 8008b2a:	f04f 0100 	mov.w	r1, #0
 8008b2e:	0159      	lsls	r1, r3, #5
 8008b30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008b34:	0150      	lsls	r0, r2, #5
 8008b36:	4602      	mov	r2, r0
 8008b38:	460b      	mov	r3, r1
 8008b3a:	4621      	mov	r1, r4
 8008b3c:	1a51      	subs	r1, r2, r1
 8008b3e:	6139      	str	r1, [r7, #16]
 8008b40:	4629      	mov	r1, r5
 8008b42:	eb63 0301 	sbc.w	r3, r3, r1
 8008b46:	617b      	str	r3, [r7, #20]
 8008b48:	f04f 0200 	mov.w	r2, #0
 8008b4c:	f04f 0300 	mov.w	r3, #0
 8008b50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008b54:	4659      	mov	r1, fp
 8008b56:	018b      	lsls	r3, r1, #6
 8008b58:	4651      	mov	r1, sl
 8008b5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008b5e:	4651      	mov	r1, sl
 8008b60:	018a      	lsls	r2, r1, #6
 8008b62:	4651      	mov	r1, sl
 8008b64:	ebb2 0801 	subs.w	r8, r2, r1
 8008b68:	4659      	mov	r1, fp
 8008b6a:	eb63 0901 	sbc.w	r9, r3, r1
 8008b6e:	f04f 0200 	mov.w	r2, #0
 8008b72:	f04f 0300 	mov.w	r3, #0
 8008b76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008b7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008b7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008b82:	4690      	mov	r8, r2
 8008b84:	4699      	mov	r9, r3
 8008b86:	4623      	mov	r3, r4
 8008b88:	eb18 0303 	adds.w	r3, r8, r3
 8008b8c:	60bb      	str	r3, [r7, #8]
 8008b8e:	462b      	mov	r3, r5
 8008b90:	eb49 0303 	adc.w	r3, r9, r3
 8008b94:	60fb      	str	r3, [r7, #12]
 8008b96:	f04f 0200 	mov.w	r2, #0
 8008b9a:	f04f 0300 	mov.w	r3, #0
 8008b9e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008ba2:	4629      	mov	r1, r5
 8008ba4:	028b      	lsls	r3, r1, #10
 8008ba6:	4621      	mov	r1, r4
 8008ba8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008bac:	4621      	mov	r1, r4
 8008bae:	028a      	lsls	r2, r1, #10
 8008bb0:	4610      	mov	r0, r2
 8008bb2:	4619      	mov	r1, r3
 8008bb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8008bba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008bbc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008bc0:	f7f7 fe74 	bl	80008ac <__aeabi_uldivmod>
 8008bc4:	4602      	mov	r2, r0
 8008bc6:	460b      	mov	r3, r1
 8008bc8:	4613      	mov	r3, r2
 8008bca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008bcc:	e058      	b.n	8008c80 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008bce:	4b38      	ldr	r3, [pc, #224]	; (8008cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8008bd0:	685b      	ldr	r3, [r3, #4]
 8008bd2:	099b      	lsrs	r3, r3, #6
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	4611      	mov	r1, r2
 8008bda:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008bde:	623b      	str	r3, [r7, #32]
 8008be0:	2300      	movs	r3, #0
 8008be2:	627b      	str	r3, [r7, #36]	; 0x24
 8008be4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008be8:	4642      	mov	r2, r8
 8008bea:	464b      	mov	r3, r9
 8008bec:	f04f 0000 	mov.w	r0, #0
 8008bf0:	f04f 0100 	mov.w	r1, #0
 8008bf4:	0159      	lsls	r1, r3, #5
 8008bf6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008bfa:	0150      	lsls	r0, r2, #5
 8008bfc:	4602      	mov	r2, r0
 8008bfe:	460b      	mov	r3, r1
 8008c00:	4641      	mov	r1, r8
 8008c02:	ebb2 0a01 	subs.w	sl, r2, r1
 8008c06:	4649      	mov	r1, r9
 8008c08:	eb63 0b01 	sbc.w	fp, r3, r1
 8008c0c:	f04f 0200 	mov.w	r2, #0
 8008c10:	f04f 0300 	mov.w	r3, #0
 8008c14:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008c18:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008c1c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008c20:	ebb2 040a 	subs.w	r4, r2, sl
 8008c24:	eb63 050b 	sbc.w	r5, r3, fp
 8008c28:	f04f 0200 	mov.w	r2, #0
 8008c2c:	f04f 0300 	mov.w	r3, #0
 8008c30:	00eb      	lsls	r3, r5, #3
 8008c32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008c36:	00e2      	lsls	r2, r4, #3
 8008c38:	4614      	mov	r4, r2
 8008c3a:	461d      	mov	r5, r3
 8008c3c:	4643      	mov	r3, r8
 8008c3e:	18e3      	adds	r3, r4, r3
 8008c40:	603b      	str	r3, [r7, #0]
 8008c42:	464b      	mov	r3, r9
 8008c44:	eb45 0303 	adc.w	r3, r5, r3
 8008c48:	607b      	str	r3, [r7, #4]
 8008c4a:	f04f 0200 	mov.w	r2, #0
 8008c4e:	f04f 0300 	mov.w	r3, #0
 8008c52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008c56:	4629      	mov	r1, r5
 8008c58:	028b      	lsls	r3, r1, #10
 8008c5a:	4621      	mov	r1, r4
 8008c5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008c60:	4621      	mov	r1, r4
 8008c62:	028a      	lsls	r2, r1, #10
 8008c64:	4610      	mov	r0, r2
 8008c66:	4619      	mov	r1, r3
 8008c68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	61bb      	str	r3, [r7, #24]
 8008c6e:	61fa      	str	r2, [r7, #28]
 8008c70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008c74:	f7f7 fe1a 	bl	80008ac <__aeabi_uldivmod>
 8008c78:	4602      	mov	r2, r0
 8008c7a:	460b      	mov	r3, r1
 8008c7c:	4613      	mov	r3, r2
 8008c7e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008c80:	4b0b      	ldr	r3, [pc, #44]	; (8008cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8008c82:	685b      	ldr	r3, [r3, #4]
 8008c84:	0c1b      	lsrs	r3, r3, #16
 8008c86:	f003 0303 	and.w	r3, r3, #3
 8008c8a:	3301      	adds	r3, #1
 8008c8c:	005b      	lsls	r3, r3, #1
 8008c8e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8008c90:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008c92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c98:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008c9a:	e002      	b.n	8008ca2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008c9c:	4b05      	ldr	r3, [pc, #20]	; (8008cb4 <HAL_RCC_GetSysClockFreq+0x204>)
 8008c9e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008ca0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008ca2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3750      	adds	r7, #80	; 0x50
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008cae:	bf00      	nop
 8008cb0:	40023800 	.word	0x40023800
 8008cb4:	00f42400 	.word	0x00f42400

08008cb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008cb8:	b480      	push	{r7}
 8008cba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008cbc:	4b03      	ldr	r3, [pc, #12]	; (8008ccc <HAL_RCC_GetHCLKFreq+0x14>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc8:	4770      	bx	lr
 8008cca:	bf00      	nop
 8008ccc:	20000020 	.word	0x20000020

08008cd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008cd4:	f7ff fff0 	bl	8008cb8 <HAL_RCC_GetHCLKFreq>
 8008cd8:	4602      	mov	r2, r0
 8008cda:	4b05      	ldr	r3, [pc, #20]	; (8008cf0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008cdc:	689b      	ldr	r3, [r3, #8]
 8008cde:	0a9b      	lsrs	r3, r3, #10
 8008ce0:	f003 0307 	and.w	r3, r3, #7
 8008ce4:	4903      	ldr	r1, [pc, #12]	; (8008cf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008ce6:	5ccb      	ldrb	r3, [r1, r3]
 8008ce8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	bd80      	pop	{r7, pc}
 8008cf0:	40023800 	.word	0x40023800
 8008cf4:	0800d960 	.word	0x0800d960

08008cf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008cfc:	f7ff ffdc 	bl	8008cb8 <HAL_RCC_GetHCLKFreq>
 8008d00:	4602      	mov	r2, r0
 8008d02:	4b05      	ldr	r3, [pc, #20]	; (8008d18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008d04:	689b      	ldr	r3, [r3, #8]
 8008d06:	0b5b      	lsrs	r3, r3, #13
 8008d08:	f003 0307 	and.w	r3, r3, #7
 8008d0c:	4903      	ldr	r1, [pc, #12]	; (8008d1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008d0e:	5ccb      	ldrb	r3, [r1, r3]
 8008d10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	bd80      	pop	{r7, pc}
 8008d18:	40023800 	.word	0x40023800
 8008d1c:	0800d960 	.word	0x0800d960

08008d20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b082      	sub	sp, #8
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d101      	bne.n	8008d32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008d2e:	2301      	movs	r3, #1
 8008d30:	e07b      	b.n	8008e2a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d108      	bne.n	8008d4c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	685b      	ldr	r3, [r3, #4]
 8008d3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008d42:	d009      	beq.n	8008d58 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2200      	movs	r2, #0
 8008d48:	61da      	str	r2, [r3, #28]
 8008d4a:	e005      	b.n	8008d58 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2200      	movs	r2, #0
 8008d50:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2200      	movs	r2, #0
 8008d56:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008d64:	b2db      	uxtb	r3, r3
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d106      	bne.n	8008d78 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f7fd f8a0 	bl	8005eb8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2202      	movs	r2, #2
 8008d7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	681a      	ldr	r2, [r3, #0]
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d8e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	685b      	ldr	r3, [r3, #4]
 8008d94:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	689b      	ldr	r3, [r3, #8]
 8008d9c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008da0:	431a      	orrs	r2, r3
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	68db      	ldr	r3, [r3, #12]
 8008da6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008daa:	431a      	orrs	r2, r3
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	691b      	ldr	r3, [r3, #16]
 8008db0:	f003 0302 	and.w	r3, r3, #2
 8008db4:	431a      	orrs	r2, r3
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	695b      	ldr	r3, [r3, #20]
 8008dba:	f003 0301 	and.w	r3, r3, #1
 8008dbe:	431a      	orrs	r2, r3
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	699b      	ldr	r3, [r3, #24]
 8008dc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008dc8:	431a      	orrs	r2, r3
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	69db      	ldr	r3, [r3, #28]
 8008dce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008dd2:	431a      	orrs	r2, r3
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	6a1b      	ldr	r3, [r3, #32]
 8008dd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ddc:	ea42 0103 	orr.w	r1, r2, r3
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008de4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	430a      	orrs	r2, r1
 8008dee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	699b      	ldr	r3, [r3, #24]
 8008df4:	0c1b      	lsrs	r3, r3, #16
 8008df6:	f003 0104 	and.w	r1, r3, #4
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dfe:	f003 0210 	and.w	r2, r3, #16
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	430a      	orrs	r2, r1
 8008e08:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	69da      	ldr	r2, [r3, #28]
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008e18:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2201      	movs	r2, #1
 8008e24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008e28:	2300      	movs	r3, #0
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3708      	adds	r7, #8
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}

08008e32 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8008e32:	b580      	push	{r7, lr}
 8008e34:	b084      	sub	sp, #16
 8008e36:	af00      	add	r7, sp, #0
 8008e38:	60f8      	str	r0, [r7, #12]
 8008e3a:	60b9      	str	r1, [r7, #8]
 8008e3c:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d101      	bne.n	8008e48 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8008e44:	2301      	movs	r3, #1
 8008e46:	e038      	b.n	8008eba <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8008e4e:	b2db      	uxtb	r3, r3
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d106      	bne.n	8008e62 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	2200      	movs	r2, #0
 8008e58:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8008e5c:	68f8      	ldr	r0, [r7, #12]
 8008e5e:	f7fd f9a7 	bl	80061b0 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	681a      	ldr	r2, [r3, #0]
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	3308      	adds	r3, #8
 8008e6a:	4619      	mov	r1, r3
 8008e6c:	4610      	mov	r0, r2
 8008e6e:	f001 fdc9 	bl	800aa04 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	6818      	ldr	r0, [r3, #0]
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	689b      	ldr	r3, [r3, #8]
 8008e7a:	461a      	mov	r2, r3
 8008e7c:	68b9      	ldr	r1, [r7, #8]
 8008e7e:	f001 fe2b 	bl	800aad8 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	6858      	ldr	r0, [r3, #4]
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	689a      	ldr	r2, [r3, #8]
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e8e:	6879      	ldr	r1, [r7, #4]
 8008e90:	f001 fe58 	bl	800ab44 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	68fa      	ldr	r2, [r7, #12]
 8008e9a:	6892      	ldr	r2, [r2, #8]
 8008e9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	68fa      	ldr	r2, [r7, #12]
 8008ea6:	6892      	ldr	r2, [r2, #8]
 8008ea8:	f041 0101 	orr.w	r1, r1, #1
 8008eac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	2201      	movs	r2, #1
 8008eb4:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 8008eb8:	2300      	movs	r3, #0
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	3710      	adds	r7, #16
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}

08008ec2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008ec2:	b580      	push	{r7, lr}
 8008ec4:	b082      	sub	sp, #8
 8008ec6:	af00      	add	r7, sp, #0
 8008ec8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d101      	bne.n	8008ed4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	e041      	b.n	8008f58 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008eda:	b2db      	uxtb	r3, r3
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d106      	bne.n	8008eee <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f7fd f82d 	bl	8005f48 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2202      	movs	r2, #2
 8008ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681a      	ldr	r2, [r3, #0]
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	3304      	adds	r3, #4
 8008efe:	4619      	mov	r1, r3
 8008f00:	4610      	mov	r0, r2
 8008f02:	f000 fa27 	bl	8009354 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2201      	movs	r2, #1
 8008f0a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2201      	movs	r2, #1
 8008f12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2201      	movs	r2, #1
 8008f1a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2201      	movs	r2, #1
 8008f22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2201      	movs	r2, #1
 8008f2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2201      	movs	r2, #1
 8008f32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2201      	movs	r2, #1
 8008f3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2201      	movs	r2, #1
 8008f42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2201      	movs	r2, #1
 8008f4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2201      	movs	r2, #1
 8008f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008f56:	2300      	movs	r3, #0
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3708      	adds	r7, #8
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}

08008f60 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b084      	sub	sp, #16
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
 8008f68:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d109      	bne.n	8008f84 <HAL_TIM_PWM_Start+0x24>
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008f76:	b2db      	uxtb	r3, r3
 8008f78:	2b01      	cmp	r3, #1
 8008f7a:	bf14      	ite	ne
 8008f7c:	2301      	movne	r3, #1
 8008f7e:	2300      	moveq	r3, #0
 8008f80:	b2db      	uxtb	r3, r3
 8008f82:	e022      	b.n	8008fca <HAL_TIM_PWM_Start+0x6a>
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	2b04      	cmp	r3, #4
 8008f88:	d109      	bne.n	8008f9e <HAL_TIM_PWM_Start+0x3e>
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008f90:	b2db      	uxtb	r3, r3
 8008f92:	2b01      	cmp	r3, #1
 8008f94:	bf14      	ite	ne
 8008f96:	2301      	movne	r3, #1
 8008f98:	2300      	moveq	r3, #0
 8008f9a:	b2db      	uxtb	r3, r3
 8008f9c:	e015      	b.n	8008fca <HAL_TIM_PWM_Start+0x6a>
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	2b08      	cmp	r3, #8
 8008fa2:	d109      	bne.n	8008fb8 <HAL_TIM_PWM_Start+0x58>
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008faa:	b2db      	uxtb	r3, r3
 8008fac:	2b01      	cmp	r3, #1
 8008fae:	bf14      	ite	ne
 8008fb0:	2301      	movne	r3, #1
 8008fb2:	2300      	moveq	r3, #0
 8008fb4:	b2db      	uxtb	r3, r3
 8008fb6:	e008      	b.n	8008fca <HAL_TIM_PWM_Start+0x6a>
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008fbe:	b2db      	uxtb	r3, r3
 8008fc0:	2b01      	cmp	r3, #1
 8008fc2:	bf14      	ite	ne
 8008fc4:	2301      	movne	r3, #1
 8008fc6:	2300      	moveq	r3, #0
 8008fc8:	b2db      	uxtb	r3, r3
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d001      	beq.n	8008fd2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008fce:	2301      	movs	r3, #1
 8008fd0:	e07c      	b.n	80090cc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d104      	bne.n	8008fe2 <HAL_TIM_PWM_Start+0x82>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2202      	movs	r2, #2
 8008fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008fe0:	e013      	b.n	800900a <HAL_TIM_PWM_Start+0xaa>
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	2b04      	cmp	r3, #4
 8008fe6:	d104      	bne.n	8008ff2 <HAL_TIM_PWM_Start+0x92>
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2202      	movs	r2, #2
 8008fec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008ff0:	e00b      	b.n	800900a <HAL_TIM_PWM_Start+0xaa>
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	2b08      	cmp	r3, #8
 8008ff6:	d104      	bne.n	8009002 <HAL_TIM_PWM_Start+0xa2>
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2202      	movs	r2, #2
 8008ffc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009000:	e003      	b.n	800900a <HAL_TIM_PWM_Start+0xaa>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2202      	movs	r2, #2
 8009006:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	2201      	movs	r2, #1
 8009010:	6839      	ldr	r1, [r7, #0]
 8009012:	4618      	mov	r0, r3
 8009014:	f000 fbee 	bl	80097f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	4a2d      	ldr	r2, [pc, #180]	; (80090d4 <HAL_TIM_PWM_Start+0x174>)
 800901e:	4293      	cmp	r3, r2
 8009020:	d004      	beq.n	800902c <HAL_TIM_PWM_Start+0xcc>
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	4a2c      	ldr	r2, [pc, #176]	; (80090d8 <HAL_TIM_PWM_Start+0x178>)
 8009028:	4293      	cmp	r3, r2
 800902a:	d101      	bne.n	8009030 <HAL_TIM_PWM_Start+0xd0>
 800902c:	2301      	movs	r3, #1
 800902e:	e000      	b.n	8009032 <HAL_TIM_PWM_Start+0xd2>
 8009030:	2300      	movs	r3, #0
 8009032:	2b00      	cmp	r3, #0
 8009034:	d007      	beq.n	8009046 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009044:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	4a22      	ldr	r2, [pc, #136]	; (80090d4 <HAL_TIM_PWM_Start+0x174>)
 800904c:	4293      	cmp	r3, r2
 800904e:	d022      	beq.n	8009096 <HAL_TIM_PWM_Start+0x136>
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009058:	d01d      	beq.n	8009096 <HAL_TIM_PWM_Start+0x136>
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	4a1f      	ldr	r2, [pc, #124]	; (80090dc <HAL_TIM_PWM_Start+0x17c>)
 8009060:	4293      	cmp	r3, r2
 8009062:	d018      	beq.n	8009096 <HAL_TIM_PWM_Start+0x136>
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	4a1d      	ldr	r2, [pc, #116]	; (80090e0 <HAL_TIM_PWM_Start+0x180>)
 800906a:	4293      	cmp	r3, r2
 800906c:	d013      	beq.n	8009096 <HAL_TIM_PWM_Start+0x136>
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	4a1c      	ldr	r2, [pc, #112]	; (80090e4 <HAL_TIM_PWM_Start+0x184>)
 8009074:	4293      	cmp	r3, r2
 8009076:	d00e      	beq.n	8009096 <HAL_TIM_PWM_Start+0x136>
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	4a16      	ldr	r2, [pc, #88]	; (80090d8 <HAL_TIM_PWM_Start+0x178>)
 800907e:	4293      	cmp	r3, r2
 8009080:	d009      	beq.n	8009096 <HAL_TIM_PWM_Start+0x136>
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	4a18      	ldr	r2, [pc, #96]	; (80090e8 <HAL_TIM_PWM_Start+0x188>)
 8009088:	4293      	cmp	r3, r2
 800908a:	d004      	beq.n	8009096 <HAL_TIM_PWM_Start+0x136>
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	4a16      	ldr	r2, [pc, #88]	; (80090ec <HAL_TIM_PWM_Start+0x18c>)
 8009092:	4293      	cmp	r3, r2
 8009094:	d111      	bne.n	80090ba <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	689b      	ldr	r3, [r3, #8]
 800909c:	f003 0307 	and.w	r3, r3, #7
 80090a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	2b06      	cmp	r3, #6
 80090a6:	d010      	beq.n	80090ca <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	681a      	ldr	r2, [r3, #0]
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f042 0201 	orr.w	r2, r2, #1
 80090b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090b8:	e007      	b.n	80090ca <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	681a      	ldr	r2, [r3, #0]
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f042 0201 	orr.w	r2, r2, #1
 80090c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80090ca:	2300      	movs	r3, #0
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	3710      	adds	r7, #16
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}
 80090d4:	40010000 	.word	0x40010000
 80090d8:	40010400 	.word	0x40010400
 80090dc:	40000400 	.word	0x40000400
 80090e0:	40000800 	.word	0x40000800
 80090e4:	40000c00 	.word	0x40000c00
 80090e8:	40014000 	.word	0x40014000
 80090ec:	40001800 	.word	0x40001800

080090f0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b082      	sub	sp, #8
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
 80090f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	2200      	movs	r2, #0
 8009100:	6839      	ldr	r1, [r7, #0]
 8009102:	4618      	mov	r0, r3
 8009104:	f000 fb76 	bl	80097f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	4a2e      	ldr	r2, [pc, #184]	; (80091c8 <HAL_TIM_PWM_Stop+0xd8>)
 800910e:	4293      	cmp	r3, r2
 8009110:	d004      	beq.n	800911c <HAL_TIM_PWM_Stop+0x2c>
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	4a2d      	ldr	r2, [pc, #180]	; (80091cc <HAL_TIM_PWM_Stop+0xdc>)
 8009118:	4293      	cmp	r3, r2
 800911a:	d101      	bne.n	8009120 <HAL_TIM_PWM_Stop+0x30>
 800911c:	2301      	movs	r3, #1
 800911e:	e000      	b.n	8009122 <HAL_TIM_PWM_Stop+0x32>
 8009120:	2300      	movs	r3, #0
 8009122:	2b00      	cmp	r3, #0
 8009124:	d017      	beq.n	8009156 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	6a1a      	ldr	r2, [r3, #32]
 800912c:	f241 1311 	movw	r3, #4369	; 0x1111
 8009130:	4013      	ands	r3, r2
 8009132:	2b00      	cmp	r3, #0
 8009134:	d10f      	bne.n	8009156 <HAL_TIM_PWM_Stop+0x66>
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	6a1a      	ldr	r2, [r3, #32]
 800913c:	f240 4344 	movw	r3, #1092	; 0x444
 8009140:	4013      	ands	r3, r2
 8009142:	2b00      	cmp	r3, #0
 8009144:	d107      	bne.n	8009156 <HAL_TIM_PWM_Stop+0x66>
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009154:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	6a1a      	ldr	r2, [r3, #32]
 800915c:	f241 1311 	movw	r3, #4369	; 0x1111
 8009160:	4013      	ands	r3, r2
 8009162:	2b00      	cmp	r3, #0
 8009164:	d10f      	bne.n	8009186 <HAL_TIM_PWM_Stop+0x96>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	6a1a      	ldr	r2, [r3, #32]
 800916c:	f240 4344 	movw	r3, #1092	; 0x444
 8009170:	4013      	ands	r3, r2
 8009172:	2b00      	cmp	r3, #0
 8009174:	d107      	bne.n	8009186 <HAL_TIM_PWM_Stop+0x96>
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	681a      	ldr	r2, [r3, #0]
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f022 0201 	bic.w	r2, r2, #1
 8009184:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d104      	bne.n	8009196 <HAL_TIM_PWM_Stop+0xa6>
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2201      	movs	r2, #1
 8009190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009194:	e013      	b.n	80091be <HAL_TIM_PWM_Stop+0xce>
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	2b04      	cmp	r3, #4
 800919a:	d104      	bne.n	80091a6 <HAL_TIM_PWM_Stop+0xb6>
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2201      	movs	r2, #1
 80091a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80091a4:	e00b      	b.n	80091be <HAL_TIM_PWM_Stop+0xce>
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	2b08      	cmp	r3, #8
 80091aa:	d104      	bne.n	80091b6 <HAL_TIM_PWM_Stop+0xc6>
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2201      	movs	r2, #1
 80091b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80091b4:	e003      	b.n	80091be <HAL_TIM_PWM_Stop+0xce>
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2201      	movs	r2, #1
 80091ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80091be:	2300      	movs	r3, #0
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	3708      	adds	r7, #8
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}
 80091c8:	40010000 	.word	0x40010000
 80091cc:	40010400 	.word	0x40010400

080091d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b086      	sub	sp, #24
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	60f8      	str	r0, [r7, #12]
 80091d8:	60b9      	str	r1, [r7, #8]
 80091da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80091dc:	2300      	movs	r3, #0
 80091de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091e6:	2b01      	cmp	r3, #1
 80091e8:	d101      	bne.n	80091ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80091ea:	2302      	movs	r3, #2
 80091ec:	e0ae      	b.n	800934c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	2201      	movs	r2, #1
 80091f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2b0c      	cmp	r3, #12
 80091fa:	f200 809f 	bhi.w	800933c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80091fe:	a201      	add	r2, pc, #4	; (adr r2, 8009204 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009204:	08009239 	.word	0x08009239
 8009208:	0800933d 	.word	0x0800933d
 800920c:	0800933d 	.word	0x0800933d
 8009210:	0800933d 	.word	0x0800933d
 8009214:	08009279 	.word	0x08009279
 8009218:	0800933d 	.word	0x0800933d
 800921c:	0800933d 	.word	0x0800933d
 8009220:	0800933d 	.word	0x0800933d
 8009224:	080092bb 	.word	0x080092bb
 8009228:	0800933d 	.word	0x0800933d
 800922c:	0800933d 	.word	0x0800933d
 8009230:	0800933d 	.word	0x0800933d
 8009234:	080092fb 	.word	0x080092fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	68b9      	ldr	r1, [r7, #8]
 800923e:	4618      	mov	r0, r3
 8009240:	f000 f928 	bl	8009494 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	699a      	ldr	r2, [r3, #24]
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	f042 0208 	orr.w	r2, r2, #8
 8009252:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	699a      	ldr	r2, [r3, #24]
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f022 0204 	bic.w	r2, r2, #4
 8009262:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	6999      	ldr	r1, [r3, #24]
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	691a      	ldr	r2, [r3, #16]
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	430a      	orrs	r2, r1
 8009274:	619a      	str	r2, [r3, #24]
      break;
 8009276:	e064      	b.n	8009342 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	68b9      	ldr	r1, [r7, #8]
 800927e:	4618      	mov	r0, r3
 8009280:	f000 f978 	bl	8009574 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	699a      	ldr	r2, [r3, #24]
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009292:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	699a      	ldr	r2, [r3, #24]
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80092a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	6999      	ldr	r1, [r3, #24]
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	691b      	ldr	r3, [r3, #16]
 80092ae:	021a      	lsls	r2, r3, #8
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	430a      	orrs	r2, r1
 80092b6:	619a      	str	r2, [r3, #24]
      break;
 80092b8:	e043      	b.n	8009342 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	68b9      	ldr	r1, [r7, #8]
 80092c0:	4618      	mov	r0, r3
 80092c2:	f000 f9cd 	bl	8009660 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	69da      	ldr	r2, [r3, #28]
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f042 0208 	orr.w	r2, r2, #8
 80092d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	69da      	ldr	r2, [r3, #28]
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f022 0204 	bic.w	r2, r2, #4
 80092e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	69d9      	ldr	r1, [r3, #28]
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	691a      	ldr	r2, [r3, #16]
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	430a      	orrs	r2, r1
 80092f6:	61da      	str	r2, [r3, #28]
      break;
 80092f8:	e023      	b.n	8009342 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	68b9      	ldr	r1, [r7, #8]
 8009300:	4618      	mov	r0, r3
 8009302:	f000 fa21 	bl	8009748 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	69da      	ldr	r2, [r3, #28]
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009314:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	69da      	ldr	r2, [r3, #28]
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009324:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	69d9      	ldr	r1, [r3, #28]
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	691b      	ldr	r3, [r3, #16]
 8009330:	021a      	lsls	r2, r3, #8
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	430a      	orrs	r2, r1
 8009338:	61da      	str	r2, [r3, #28]
      break;
 800933a:	e002      	b.n	8009342 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800933c:	2301      	movs	r3, #1
 800933e:	75fb      	strb	r3, [r7, #23]
      break;
 8009340:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	2200      	movs	r2, #0
 8009346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800934a:	7dfb      	ldrb	r3, [r7, #23]
}
 800934c:	4618      	mov	r0, r3
 800934e:	3718      	adds	r7, #24
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}

08009354 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009354:	b480      	push	{r7}
 8009356:	b085      	sub	sp, #20
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
 800935c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	4a40      	ldr	r2, [pc, #256]	; (8009468 <TIM_Base_SetConfig+0x114>)
 8009368:	4293      	cmp	r3, r2
 800936a:	d013      	beq.n	8009394 <TIM_Base_SetConfig+0x40>
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009372:	d00f      	beq.n	8009394 <TIM_Base_SetConfig+0x40>
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	4a3d      	ldr	r2, [pc, #244]	; (800946c <TIM_Base_SetConfig+0x118>)
 8009378:	4293      	cmp	r3, r2
 800937a:	d00b      	beq.n	8009394 <TIM_Base_SetConfig+0x40>
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	4a3c      	ldr	r2, [pc, #240]	; (8009470 <TIM_Base_SetConfig+0x11c>)
 8009380:	4293      	cmp	r3, r2
 8009382:	d007      	beq.n	8009394 <TIM_Base_SetConfig+0x40>
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	4a3b      	ldr	r2, [pc, #236]	; (8009474 <TIM_Base_SetConfig+0x120>)
 8009388:	4293      	cmp	r3, r2
 800938a:	d003      	beq.n	8009394 <TIM_Base_SetConfig+0x40>
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	4a3a      	ldr	r2, [pc, #232]	; (8009478 <TIM_Base_SetConfig+0x124>)
 8009390:	4293      	cmp	r3, r2
 8009392:	d108      	bne.n	80093a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800939a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	685b      	ldr	r3, [r3, #4]
 80093a0:	68fa      	ldr	r2, [r7, #12]
 80093a2:	4313      	orrs	r3, r2
 80093a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	4a2f      	ldr	r2, [pc, #188]	; (8009468 <TIM_Base_SetConfig+0x114>)
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d02b      	beq.n	8009406 <TIM_Base_SetConfig+0xb2>
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093b4:	d027      	beq.n	8009406 <TIM_Base_SetConfig+0xb2>
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	4a2c      	ldr	r2, [pc, #176]	; (800946c <TIM_Base_SetConfig+0x118>)
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d023      	beq.n	8009406 <TIM_Base_SetConfig+0xb2>
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	4a2b      	ldr	r2, [pc, #172]	; (8009470 <TIM_Base_SetConfig+0x11c>)
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d01f      	beq.n	8009406 <TIM_Base_SetConfig+0xb2>
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	4a2a      	ldr	r2, [pc, #168]	; (8009474 <TIM_Base_SetConfig+0x120>)
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d01b      	beq.n	8009406 <TIM_Base_SetConfig+0xb2>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	4a29      	ldr	r2, [pc, #164]	; (8009478 <TIM_Base_SetConfig+0x124>)
 80093d2:	4293      	cmp	r3, r2
 80093d4:	d017      	beq.n	8009406 <TIM_Base_SetConfig+0xb2>
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	4a28      	ldr	r2, [pc, #160]	; (800947c <TIM_Base_SetConfig+0x128>)
 80093da:	4293      	cmp	r3, r2
 80093dc:	d013      	beq.n	8009406 <TIM_Base_SetConfig+0xb2>
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	4a27      	ldr	r2, [pc, #156]	; (8009480 <TIM_Base_SetConfig+0x12c>)
 80093e2:	4293      	cmp	r3, r2
 80093e4:	d00f      	beq.n	8009406 <TIM_Base_SetConfig+0xb2>
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	4a26      	ldr	r2, [pc, #152]	; (8009484 <TIM_Base_SetConfig+0x130>)
 80093ea:	4293      	cmp	r3, r2
 80093ec:	d00b      	beq.n	8009406 <TIM_Base_SetConfig+0xb2>
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	4a25      	ldr	r2, [pc, #148]	; (8009488 <TIM_Base_SetConfig+0x134>)
 80093f2:	4293      	cmp	r3, r2
 80093f4:	d007      	beq.n	8009406 <TIM_Base_SetConfig+0xb2>
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	4a24      	ldr	r2, [pc, #144]	; (800948c <TIM_Base_SetConfig+0x138>)
 80093fa:	4293      	cmp	r3, r2
 80093fc:	d003      	beq.n	8009406 <TIM_Base_SetConfig+0xb2>
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	4a23      	ldr	r2, [pc, #140]	; (8009490 <TIM_Base_SetConfig+0x13c>)
 8009402:	4293      	cmp	r3, r2
 8009404:	d108      	bne.n	8009418 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800940c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	68db      	ldr	r3, [r3, #12]
 8009412:	68fa      	ldr	r2, [r7, #12]
 8009414:	4313      	orrs	r3, r2
 8009416:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	695b      	ldr	r3, [r3, #20]
 8009422:	4313      	orrs	r3, r2
 8009424:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	68fa      	ldr	r2, [r7, #12]
 800942a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	689a      	ldr	r2, [r3, #8]
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	681a      	ldr	r2, [r3, #0]
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	4a0a      	ldr	r2, [pc, #40]	; (8009468 <TIM_Base_SetConfig+0x114>)
 8009440:	4293      	cmp	r3, r2
 8009442:	d003      	beq.n	800944c <TIM_Base_SetConfig+0xf8>
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	4a0c      	ldr	r2, [pc, #48]	; (8009478 <TIM_Base_SetConfig+0x124>)
 8009448:	4293      	cmp	r3, r2
 800944a:	d103      	bne.n	8009454 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	691a      	ldr	r2, [r3, #16]
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2201      	movs	r2, #1
 8009458:	615a      	str	r2, [r3, #20]
}
 800945a:	bf00      	nop
 800945c:	3714      	adds	r7, #20
 800945e:	46bd      	mov	sp, r7
 8009460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009464:	4770      	bx	lr
 8009466:	bf00      	nop
 8009468:	40010000 	.word	0x40010000
 800946c:	40000400 	.word	0x40000400
 8009470:	40000800 	.word	0x40000800
 8009474:	40000c00 	.word	0x40000c00
 8009478:	40010400 	.word	0x40010400
 800947c:	40014000 	.word	0x40014000
 8009480:	40014400 	.word	0x40014400
 8009484:	40014800 	.word	0x40014800
 8009488:	40001800 	.word	0x40001800
 800948c:	40001c00 	.word	0x40001c00
 8009490:	40002000 	.word	0x40002000

08009494 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009494:	b480      	push	{r7}
 8009496:	b087      	sub	sp, #28
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
 800949c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6a1b      	ldr	r3, [r3, #32]
 80094a2:	f023 0201 	bic.w	r2, r3, #1
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6a1b      	ldr	r3, [r3, #32]
 80094ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	685b      	ldr	r3, [r3, #4]
 80094b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	699b      	ldr	r3, [r3, #24]
 80094ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	f023 0303 	bic.w	r3, r3, #3
 80094ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	68fa      	ldr	r2, [r7, #12]
 80094d2:	4313      	orrs	r3, r2
 80094d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80094d6:	697b      	ldr	r3, [r7, #20]
 80094d8:	f023 0302 	bic.w	r3, r3, #2
 80094dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	689b      	ldr	r3, [r3, #8]
 80094e2:	697a      	ldr	r2, [r7, #20]
 80094e4:	4313      	orrs	r3, r2
 80094e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	4a20      	ldr	r2, [pc, #128]	; (800956c <TIM_OC1_SetConfig+0xd8>)
 80094ec:	4293      	cmp	r3, r2
 80094ee:	d003      	beq.n	80094f8 <TIM_OC1_SetConfig+0x64>
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	4a1f      	ldr	r2, [pc, #124]	; (8009570 <TIM_OC1_SetConfig+0xdc>)
 80094f4:	4293      	cmp	r3, r2
 80094f6:	d10c      	bne.n	8009512 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80094f8:	697b      	ldr	r3, [r7, #20]
 80094fa:	f023 0308 	bic.w	r3, r3, #8
 80094fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	68db      	ldr	r3, [r3, #12]
 8009504:	697a      	ldr	r2, [r7, #20]
 8009506:	4313      	orrs	r3, r2
 8009508:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800950a:	697b      	ldr	r3, [r7, #20]
 800950c:	f023 0304 	bic.w	r3, r3, #4
 8009510:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	4a15      	ldr	r2, [pc, #84]	; (800956c <TIM_OC1_SetConfig+0xd8>)
 8009516:	4293      	cmp	r3, r2
 8009518:	d003      	beq.n	8009522 <TIM_OC1_SetConfig+0x8e>
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	4a14      	ldr	r2, [pc, #80]	; (8009570 <TIM_OC1_SetConfig+0xdc>)
 800951e:	4293      	cmp	r3, r2
 8009520:	d111      	bne.n	8009546 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009522:	693b      	ldr	r3, [r7, #16]
 8009524:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009528:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800952a:	693b      	ldr	r3, [r7, #16]
 800952c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009530:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	695b      	ldr	r3, [r3, #20]
 8009536:	693a      	ldr	r2, [r7, #16]
 8009538:	4313      	orrs	r3, r2
 800953a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	699b      	ldr	r3, [r3, #24]
 8009540:	693a      	ldr	r2, [r7, #16]
 8009542:	4313      	orrs	r3, r2
 8009544:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	693a      	ldr	r2, [r7, #16]
 800954a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	68fa      	ldr	r2, [r7, #12]
 8009550:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	685a      	ldr	r2, [r3, #4]
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	697a      	ldr	r2, [r7, #20]
 800955e:	621a      	str	r2, [r3, #32]
}
 8009560:	bf00      	nop
 8009562:	371c      	adds	r7, #28
 8009564:	46bd      	mov	sp, r7
 8009566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956a:	4770      	bx	lr
 800956c:	40010000 	.word	0x40010000
 8009570:	40010400 	.word	0x40010400

08009574 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009574:	b480      	push	{r7}
 8009576:	b087      	sub	sp, #28
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
 800957c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6a1b      	ldr	r3, [r3, #32]
 8009582:	f023 0210 	bic.w	r2, r3, #16
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	6a1b      	ldr	r3, [r3, #32]
 800958e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	685b      	ldr	r3, [r3, #4]
 8009594:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	699b      	ldr	r3, [r3, #24]
 800959a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80095a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80095aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	021b      	lsls	r3, r3, #8
 80095b2:	68fa      	ldr	r2, [r7, #12]
 80095b4:	4313      	orrs	r3, r2
 80095b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80095b8:	697b      	ldr	r3, [r7, #20]
 80095ba:	f023 0320 	bic.w	r3, r3, #32
 80095be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	689b      	ldr	r3, [r3, #8]
 80095c4:	011b      	lsls	r3, r3, #4
 80095c6:	697a      	ldr	r2, [r7, #20]
 80095c8:	4313      	orrs	r3, r2
 80095ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	4a22      	ldr	r2, [pc, #136]	; (8009658 <TIM_OC2_SetConfig+0xe4>)
 80095d0:	4293      	cmp	r3, r2
 80095d2:	d003      	beq.n	80095dc <TIM_OC2_SetConfig+0x68>
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	4a21      	ldr	r2, [pc, #132]	; (800965c <TIM_OC2_SetConfig+0xe8>)
 80095d8:	4293      	cmp	r3, r2
 80095da:	d10d      	bne.n	80095f8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80095dc:	697b      	ldr	r3, [r7, #20]
 80095de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80095e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	68db      	ldr	r3, [r3, #12]
 80095e8:	011b      	lsls	r3, r3, #4
 80095ea:	697a      	ldr	r2, [r7, #20]
 80095ec:	4313      	orrs	r3, r2
 80095ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80095f0:	697b      	ldr	r3, [r7, #20]
 80095f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80095f6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	4a17      	ldr	r2, [pc, #92]	; (8009658 <TIM_OC2_SetConfig+0xe4>)
 80095fc:	4293      	cmp	r3, r2
 80095fe:	d003      	beq.n	8009608 <TIM_OC2_SetConfig+0x94>
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	4a16      	ldr	r2, [pc, #88]	; (800965c <TIM_OC2_SetConfig+0xe8>)
 8009604:	4293      	cmp	r3, r2
 8009606:	d113      	bne.n	8009630 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009608:	693b      	ldr	r3, [r7, #16]
 800960a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800960e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009610:	693b      	ldr	r3, [r7, #16]
 8009612:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009616:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	695b      	ldr	r3, [r3, #20]
 800961c:	009b      	lsls	r3, r3, #2
 800961e:	693a      	ldr	r2, [r7, #16]
 8009620:	4313      	orrs	r3, r2
 8009622:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	699b      	ldr	r3, [r3, #24]
 8009628:	009b      	lsls	r3, r3, #2
 800962a:	693a      	ldr	r2, [r7, #16]
 800962c:	4313      	orrs	r3, r2
 800962e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	693a      	ldr	r2, [r7, #16]
 8009634:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	68fa      	ldr	r2, [r7, #12]
 800963a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	685a      	ldr	r2, [r3, #4]
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	697a      	ldr	r2, [r7, #20]
 8009648:	621a      	str	r2, [r3, #32]
}
 800964a:	bf00      	nop
 800964c:	371c      	adds	r7, #28
 800964e:	46bd      	mov	sp, r7
 8009650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009654:	4770      	bx	lr
 8009656:	bf00      	nop
 8009658:	40010000 	.word	0x40010000
 800965c:	40010400 	.word	0x40010400

08009660 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009660:	b480      	push	{r7}
 8009662:	b087      	sub	sp, #28
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
 8009668:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6a1b      	ldr	r3, [r3, #32]
 800966e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6a1b      	ldr	r3, [r3, #32]
 800967a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	685b      	ldr	r3, [r3, #4]
 8009680:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	69db      	ldr	r3, [r3, #28]
 8009686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800968e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	f023 0303 	bic.w	r3, r3, #3
 8009696:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	68fa      	ldr	r2, [r7, #12]
 800969e:	4313      	orrs	r3, r2
 80096a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80096a2:	697b      	ldr	r3, [r7, #20]
 80096a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80096a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	689b      	ldr	r3, [r3, #8]
 80096ae:	021b      	lsls	r3, r3, #8
 80096b0:	697a      	ldr	r2, [r7, #20]
 80096b2:	4313      	orrs	r3, r2
 80096b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	4a21      	ldr	r2, [pc, #132]	; (8009740 <TIM_OC3_SetConfig+0xe0>)
 80096ba:	4293      	cmp	r3, r2
 80096bc:	d003      	beq.n	80096c6 <TIM_OC3_SetConfig+0x66>
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	4a20      	ldr	r2, [pc, #128]	; (8009744 <TIM_OC3_SetConfig+0xe4>)
 80096c2:	4293      	cmp	r3, r2
 80096c4:	d10d      	bne.n	80096e2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80096c6:	697b      	ldr	r3, [r7, #20]
 80096c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80096cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	68db      	ldr	r3, [r3, #12]
 80096d2:	021b      	lsls	r3, r3, #8
 80096d4:	697a      	ldr	r2, [r7, #20]
 80096d6:	4313      	orrs	r3, r2
 80096d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80096da:	697b      	ldr	r3, [r7, #20]
 80096dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80096e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	4a16      	ldr	r2, [pc, #88]	; (8009740 <TIM_OC3_SetConfig+0xe0>)
 80096e6:	4293      	cmp	r3, r2
 80096e8:	d003      	beq.n	80096f2 <TIM_OC3_SetConfig+0x92>
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	4a15      	ldr	r2, [pc, #84]	; (8009744 <TIM_OC3_SetConfig+0xe4>)
 80096ee:	4293      	cmp	r3, r2
 80096f0:	d113      	bne.n	800971a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80096f2:	693b      	ldr	r3, [r7, #16]
 80096f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80096f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80096fa:	693b      	ldr	r3, [r7, #16]
 80096fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009700:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	695b      	ldr	r3, [r3, #20]
 8009706:	011b      	lsls	r3, r3, #4
 8009708:	693a      	ldr	r2, [r7, #16]
 800970a:	4313      	orrs	r3, r2
 800970c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	699b      	ldr	r3, [r3, #24]
 8009712:	011b      	lsls	r3, r3, #4
 8009714:	693a      	ldr	r2, [r7, #16]
 8009716:	4313      	orrs	r3, r2
 8009718:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	693a      	ldr	r2, [r7, #16]
 800971e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	68fa      	ldr	r2, [r7, #12]
 8009724:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	685a      	ldr	r2, [r3, #4]
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	697a      	ldr	r2, [r7, #20]
 8009732:	621a      	str	r2, [r3, #32]
}
 8009734:	bf00      	nop
 8009736:	371c      	adds	r7, #28
 8009738:	46bd      	mov	sp, r7
 800973a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973e:	4770      	bx	lr
 8009740:	40010000 	.word	0x40010000
 8009744:	40010400 	.word	0x40010400

08009748 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009748:	b480      	push	{r7}
 800974a:	b087      	sub	sp, #28
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
 8009750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6a1b      	ldr	r3, [r3, #32]
 8009756:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6a1b      	ldr	r3, [r3, #32]
 8009762:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	685b      	ldr	r3, [r3, #4]
 8009768:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	69db      	ldr	r3, [r3, #28]
 800976e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009776:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800977e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	021b      	lsls	r3, r3, #8
 8009786:	68fa      	ldr	r2, [r7, #12]
 8009788:	4313      	orrs	r3, r2
 800978a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800978c:	693b      	ldr	r3, [r7, #16]
 800978e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009792:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	689b      	ldr	r3, [r3, #8]
 8009798:	031b      	lsls	r3, r3, #12
 800979a:	693a      	ldr	r2, [r7, #16]
 800979c:	4313      	orrs	r3, r2
 800979e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	4a12      	ldr	r2, [pc, #72]	; (80097ec <TIM_OC4_SetConfig+0xa4>)
 80097a4:	4293      	cmp	r3, r2
 80097a6:	d003      	beq.n	80097b0 <TIM_OC4_SetConfig+0x68>
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	4a11      	ldr	r2, [pc, #68]	; (80097f0 <TIM_OC4_SetConfig+0xa8>)
 80097ac:	4293      	cmp	r3, r2
 80097ae:	d109      	bne.n	80097c4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80097b0:	697b      	ldr	r3, [r7, #20]
 80097b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80097b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	695b      	ldr	r3, [r3, #20]
 80097bc:	019b      	lsls	r3, r3, #6
 80097be:	697a      	ldr	r2, [r7, #20]
 80097c0:	4313      	orrs	r3, r2
 80097c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	697a      	ldr	r2, [r7, #20]
 80097c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	68fa      	ldr	r2, [r7, #12]
 80097ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	685a      	ldr	r2, [r3, #4]
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	693a      	ldr	r2, [r7, #16]
 80097dc:	621a      	str	r2, [r3, #32]
}
 80097de:	bf00      	nop
 80097e0:	371c      	adds	r7, #28
 80097e2:	46bd      	mov	sp, r7
 80097e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e8:	4770      	bx	lr
 80097ea:	bf00      	nop
 80097ec:	40010000 	.word	0x40010000
 80097f0:	40010400 	.word	0x40010400

080097f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b087      	sub	sp, #28
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	60f8      	str	r0, [r7, #12]
 80097fc:	60b9      	str	r1, [r7, #8]
 80097fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	f003 031f 	and.w	r3, r3, #31
 8009806:	2201      	movs	r2, #1
 8009808:	fa02 f303 	lsl.w	r3, r2, r3
 800980c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	6a1a      	ldr	r2, [r3, #32]
 8009812:	697b      	ldr	r3, [r7, #20]
 8009814:	43db      	mvns	r3, r3
 8009816:	401a      	ands	r2, r3
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	6a1a      	ldr	r2, [r3, #32]
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	f003 031f 	and.w	r3, r3, #31
 8009826:	6879      	ldr	r1, [r7, #4]
 8009828:	fa01 f303 	lsl.w	r3, r1, r3
 800982c:	431a      	orrs	r2, r3
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	621a      	str	r2, [r3, #32]
}
 8009832:	bf00      	nop
 8009834:	371c      	adds	r7, #28
 8009836:	46bd      	mov	sp, r7
 8009838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983c:	4770      	bx	lr
	...

08009840 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009840:	b480      	push	{r7}
 8009842:	b085      	sub	sp, #20
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
 8009848:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009850:	2b01      	cmp	r3, #1
 8009852:	d101      	bne.n	8009858 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009854:	2302      	movs	r3, #2
 8009856:	e05a      	b.n	800990e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2201      	movs	r2, #1
 800985c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2202      	movs	r2, #2
 8009864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	685b      	ldr	r3, [r3, #4]
 800986e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	689b      	ldr	r3, [r3, #8]
 8009876:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800987e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	68fa      	ldr	r2, [r7, #12]
 8009886:	4313      	orrs	r3, r2
 8009888:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	68fa      	ldr	r2, [r7, #12]
 8009890:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	4a21      	ldr	r2, [pc, #132]	; (800991c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009898:	4293      	cmp	r3, r2
 800989a:	d022      	beq.n	80098e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098a4:	d01d      	beq.n	80098e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	4a1d      	ldr	r2, [pc, #116]	; (8009920 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80098ac:	4293      	cmp	r3, r2
 80098ae:	d018      	beq.n	80098e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	4a1b      	ldr	r2, [pc, #108]	; (8009924 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80098b6:	4293      	cmp	r3, r2
 80098b8:	d013      	beq.n	80098e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	4a1a      	ldr	r2, [pc, #104]	; (8009928 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80098c0:	4293      	cmp	r3, r2
 80098c2:	d00e      	beq.n	80098e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	4a18      	ldr	r2, [pc, #96]	; (800992c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80098ca:	4293      	cmp	r3, r2
 80098cc:	d009      	beq.n	80098e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	4a17      	ldr	r2, [pc, #92]	; (8009930 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80098d4:	4293      	cmp	r3, r2
 80098d6:	d004      	beq.n	80098e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	4a15      	ldr	r2, [pc, #84]	; (8009934 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80098de:	4293      	cmp	r3, r2
 80098e0:	d10c      	bne.n	80098fc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80098e2:	68bb      	ldr	r3, [r7, #8]
 80098e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80098e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	685b      	ldr	r3, [r3, #4]
 80098ee:	68ba      	ldr	r2, [r7, #8]
 80098f0:	4313      	orrs	r3, r2
 80098f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	68ba      	ldr	r2, [r7, #8]
 80098fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2201      	movs	r2, #1
 8009900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2200      	movs	r2, #0
 8009908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800990c:	2300      	movs	r3, #0
}
 800990e:	4618      	mov	r0, r3
 8009910:	3714      	adds	r7, #20
 8009912:	46bd      	mov	sp, r7
 8009914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009918:	4770      	bx	lr
 800991a:	bf00      	nop
 800991c:	40010000 	.word	0x40010000
 8009920:	40000400 	.word	0x40000400
 8009924:	40000800 	.word	0x40000800
 8009928:	40000c00 	.word	0x40000c00
 800992c:	40010400 	.word	0x40010400
 8009930:	40014000 	.word	0x40014000
 8009934:	40001800 	.word	0x40001800

08009938 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009938:	b480      	push	{r7}
 800993a:	b085      	sub	sp, #20
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
 8009940:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009942:	2300      	movs	r3, #0
 8009944:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800994c:	2b01      	cmp	r3, #1
 800994e:	d101      	bne.n	8009954 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009950:	2302      	movs	r3, #2
 8009952:	e03d      	b.n	80099d0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2201      	movs	r2, #1
 8009958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	68db      	ldr	r3, [r3, #12]
 8009966:	4313      	orrs	r3, r2
 8009968:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	689b      	ldr	r3, [r3, #8]
 8009974:	4313      	orrs	r3, r2
 8009976:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	685b      	ldr	r3, [r3, #4]
 8009982:	4313      	orrs	r3, r2
 8009984:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	4313      	orrs	r3, r2
 8009992:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	691b      	ldr	r3, [r3, #16]
 800999e:	4313      	orrs	r3, r2
 80099a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	695b      	ldr	r3, [r3, #20]
 80099ac:	4313      	orrs	r3, r2
 80099ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	69db      	ldr	r3, [r3, #28]
 80099ba:	4313      	orrs	r3, r2
 80099bc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	68fa      	ldr	r2, [r7, #12]
 80099c4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2200      	movs	r2, #0
 80099ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80099ce:	2300      	movs	r3, #0
}
 80099d0:	4618      	mov	r0, r3
 80099d2:	3714      	adds	r7, #20
 80099d4:	46bd      	mov	sp, r7
 80099d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099da:	4770      	bx	lr

080099dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b082      	sub	sp, #8
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d101      	bne.n	80099ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80099ea:	2301      	movs	r3, #1
 80099ec:	e03f      	b.n	8009a6e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099f4:	b2db      	uxtb	r3, r3
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d106      	bne.n	8009a08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2200      	movs	r2, #0
 80099fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f7fc fafc 	bl	8006000 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2224      	movs	r2, #36	; 0x24
 8009a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	68da      	ldr	r2, [r3, #12]
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009a1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	f000 fd7b 	bl	800a51c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	691a      	ldr	r2, [r3, #16]
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009a34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	695a      	ldr	r2, [r3, #20]
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009a44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	68da      	ldr	r2, [r3, #12]
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009a54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2200      	movs	r2, #0
 8009a5a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2220      	movs	r2, #32
 8009a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2220      	movs	r2, #32
 8009a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009a6c:	2300      	movs	r3, #0
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	3708      	adds	r7, #8
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}

08009a76 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009a76:	b580      	push	{r7, lr}
 8009a78:	b08a      	sub	sp, #40	; 0x28
 8009a7a:	af02      	add	r7, sp, #8
 8009a7c:	60f8      	str	r0, [r7, #12]
 8009a7e:	60b9      	str	r1, [r7, #8]
 8009a80:	603b      	str	r3, [r7, #0]
 8009a82:	4613      	mov	r3, r2
 8009a84:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009a86:	2300      	movs	r3, #0
 8009a88:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a90:	b2db      	uxtb	r3, r3
 8009a92:	2b20      	cmp	r3, #32
 8009a94:	d17c      	bne.n	8009b90 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d002      	beq.n	8009aa2 <HAL_UART_Transmit+0x2c>
 8009a9c:	88fb      	ldrh	r3, [r7, #6]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d101      	bne.n	8009aa6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	e075      	b.n	8009b92 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009aac:	2b01      	cmp	r3, #1
 8009aae:	d101      	bne.n	8009ab4 <HAL_UART_Transmit+0x3e>
 8009ab0:	2302      	movs	r3, #2
 8009ab2:	e06e      	b.n	8009b92 <HAL_UART_Transmit+0x11c>
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	2201      	movs	r2, #1
 8009ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	2200      	movs	r2, #0
 8009ac0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	2221      	movs	r2, #33	; 0x21
 8009ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009aca:	f7fc ffb1 	bl	8006a30 <HAL_GetTick>
 8009ace:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	88fa      	ldrh	r2, [r7, #6]
 8009ad4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	88fa      	ldrh	r2, [r7, #6]
 8009ada:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	689b      	ldr	r3, [r3, #8]
 8009ae0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ae4:	d108      	bne.n	8009af8 <HAL_UART_Transmit+0x82>
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	691b      	ldr	r3, [r3, #16]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d104      	bne.n	8009af8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009aee:	2300      	movs	r3, #0
 8009af0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009af2:	68bb      	ldr	r3, [r7, #8]
 8009af4:	61bb      	str	r3, [r7, #24]
 8009af6:	e003      	b.n	8009b00 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009afc:	2300      	movs	r3, #0
 8009afe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	2200      	movs	r2, #0
 8009b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009b08:	e02a      	b.n	8009b60 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	9300      	str	r3, [sp, #0]
 8009b0e:	697b      	ldr	r3, [r7, #20]
 8009b10:	2200      	movs	r2, #0
 8009b12:	2180      	movs	r1, #128	; 0x80
 8009b14:	68f8      	ldr	r0, [r7, #12]
 8009b16:	f000 faf9 	bl	800a10c <UART_WaitOnFlagUntilTimeout>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d001      	beq.n	8009b24 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009b20:	2303      	movs	r3, #3
 8009b22:	e036      	b.n	8009b92 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009b24:	69fb      	ldr	r3, [r7, #28]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d10b      	bne.n	8009b42 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009b2a:	69bb      	ldr	r3, [r7, #24]
 8009b2c:	881b      	ldrh	r3, [r3, #0]
 8009b2e:	461a      	mov	r2, r3
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009b38:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009b3a:	69bb      	ldr	r3, [r7, #24]
 8009b3c:	3302      	adds	r3, #2
 8009b3e:	61bb      	str	r3, [r7, #24]
 8009b40:	e007      	b.n	8009b52 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009b42:	69fb      	ldr	r3, [r7, #28]
 8009b44:	781a      	ldrb	r2, [r3, #0]
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009b4c:	69fb      	ldr	r3, [r7, #28]
 8009b4e:	3301      	adds	r3, #1
 8009b50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009b56:	b29b      	uxth	r3, r3
 8009b58:	3b01      	subs	r3, #1
 8009b5a:	b29a      	uxth	r2, r3
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009b64:	b29b      	uxth	r3, r3
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d1cf      	bne.n	8009b0a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	9300      	str	r3, [sp, #0]
 8009b6e:	697b      	ldr	r3, [r7, #20]
 8009b70:	2200      	movs	r2, #0
 8009b72:	2140      	movs	r1, #64	; 0x40
 8009b74:	68f8      	ldr	r0, [r7, #12]
 8009b76:	f000 fac9 	bl	800a10c <UART_WaitOnFlagUntilTimeout>
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d001      	beq.n	8009b84 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009b80:	2303      	movs	r3, #3
 8009b82:	e006      	b.n	8009b92 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	2220      	movs	r2, #32
 8009b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	e000      	b.n	8009b92 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009b90:	2302      	movs	r3, #2
  }
}
 8009b92:	4618      	mov	r0, r3
 8009b94:	3720      	adds	r7, #32
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd80      	pop	{r7, pc}
	...

08009b9c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b0ba      	sub	sp, #232	; 0xe8
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	68db      	ldr	r3, [r3, #12]
 8009bb4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	695b      	ldr	r3, [r3, #20]
 8009bbe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009bc8:	2300      	movs	r3, #0
 8009bca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009bce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009bd2:	f003 030f 	and.w	r3, r3, #15
 8009bd6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009bda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d10f      	bne.n	8009c02 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009be2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009be6:	f003 0320 	and.w	r3, r3, #32
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d009      	beq.n	8009c02 <HAL_UART_IRQHandler+0x66>
 8009bee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009bf2:	f003 0320 	and.w	r3, r3, #32
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d003      	beq.n	8009c02 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	f000 fbd3 	bl	800a3a6 <UART_Receive_IT>
      return;
 8009c00:	e256      	b.n	800a0b0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009c02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	f000 80de 	beq.w	8009dc8 <HAL_UART_IRQHandler+0x22c>
 8009c0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009c10:	f003 0301 	and.w	r3, r3, #1
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d106      	bne.n	8009c26 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009c18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c1c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	f000 80d1 	beq.w	8009dc8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009c26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c2a:	f003 0301 	and.w	r3, r3, #1
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d00b      	beq.n	8009c4a <HAL_UART_IRQHandler+0xae>
 8009c32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d005      	beq.n	8009c4a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c42:	f043 0201 	orr.w	r2, r3, #1
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009c4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c4e:	f003 0304 	and.w	r3, r3, #4
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d00b      	beq.n	8009c6e <HAL_UART_IRQHandler+0xd2>
 8009c56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009c5a:	f003 0301 	and.w	r3, r3, #1
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d005      	beq.n	8009c6e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c66:	f043 0202 	orr.w	r2, r3, #2
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009c6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c72:	f003 0302 	and.w	r3, r3, #2
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d00b      	beq.n	8009c92 <HAL_UART_IRQHandler+0xf6>
 8009c7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009c7e:	f003 0301 	and.w	r3, r3, #1
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d005      	beq.n	8009c92 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c8a:	f043 0204 	orr.w	r2, r3, #4
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009c92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c96:	f003 0308 	and.w	r3, r3, #8
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d011      	beq.n	8009cc2 <HAL_UART_IRQHandler+0x126>
 8009c9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ca2:	f003 0320 	and.w	r3, r3, #32
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d105      	bne.n	8009cb6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009caa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009cae:	f003 0301 	and.w	r3, r3, #1
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d005      	beq.n	8009cc2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cba:	f043 0208 	orr.w	r2, r3, #8
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	f000 81ed 	beq.w	800a0a6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009ccc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009cd0:	f003 0320 	and.w	r3, r3, #32
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d008      	beq.n	8009cea <HAL_UART_IRQHandler+0x14e>
 8009cd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009cdc:	f003 0320 	and.w	r3, r3, #32
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d002      	beq.n	8009cea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	f000 fb5e 	bl	800a3a6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	695b      	ldr	r3, [r3, #20]
 8009cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cf4:	2b40      	cmp	r3, #64	; 0x40
 8009cf6:	bf0c      	ite	eq
 8009cf8:	2301      	moveq	r3, #1
 8009cfa:	2300      	movne	r3, #0
 8009cfc:	b2db      	uxtb	r3, r3
 8009cfe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d06:	f003 0308 	and.w	r3, r3, #8
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d103      	bne.n	8009d16 <HAL_UART_IRQHandler+0x17a>
 8009d0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d04f      	beq.n	8009db6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	f000 fa66 	bl	800a1e8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	695b      	ldr	r3, [r3, #20]
 8009d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d26:	2b40      	cmp	r3, #64	; 0x40
 8009d28:	d141      	bne.n	8009dae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	3314      	adds	r3, #20
 8009d30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d34:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009d38:	e853 3f00 	ldrex	r3, [r3]
 8009d3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009d40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009d44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	3314      	adds	r3, #20
 8009d52:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009d56:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009d5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d5e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009d62:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009d66:	e841 2300 	strex	r3, r2, [r1]
 8009d6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009d6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d1d9      	bne.n	8009d2a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d013      	beq.n	8009da6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d82:	4a7d      	ldr	r2, [pc, #500]	; (8009f78 <HAL_UART_IRQHandler+0x3dc>)
 8009d84:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	f7fd f801 	bl	8006d92 <HAL_DMA_Abort_IT>
 8009d90:	4603      	mov	r3, r0
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d016      	beq.n	8009dc4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d9c:	687a      	ldr	r2, [r7, #4]
 8009d9e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009da0:	4610      	mov	r0, r2
 8009da2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009da4:	e00e      	b.n	8009dc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009da6:	6878      	ldr	r0, [r7, #4]
 8009da8:	f000 f99a 	bl	800a0e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009dac:	e00a      	b.n	8009dc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	f000 f996 	bl	800a0e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009db4:	e006      	b.n	8009dc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	f000 f992 	bl	800a0e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009dc2:	e170      	b.n	800a0a6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009dc4:	bf00      	nop
    return;
 8009dc6:	e16e      	b.n	800a0a6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dcc:	2b01      	cmp	r3, #1
 8009dce:	f040 814a 	bne.w	800a066 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009dd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009dd6:	f003 0310 	and.w	r3, r3, #16
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	f000 8143 	beq.w	800a066 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009de0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009de4:	f003 0310 	and.w	r3, r3, #16
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	f000 813c 	beq.w	800a066 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009dee:	2300      	movs	r3, #0
 8009df0:	60bb      	str	r3, [r7, #8]
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	60bb      	str	r3, [r7, #8]
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	685b      	ldr	r3, [r3, #4]
 8009e00:	60bb      	str	r3, [r7, #8]
 8009e02:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	695b      	ldr	r3, [r3, #20]
 8009e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e0e:	2b40      	cmp	r3, #64	; 0x40
 8009e10:	f040 80b4 	bne.w	8009f7c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	685b      	ldr	r3, [r3, #4]
 8009e1c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009e20:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	f000 8140 	beq.w	800a0aa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009e2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009e32:	429a      	cmp	r2, r3
 8009e34:	f080 8139 	bcs.w	800a0aa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009e3e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e44:	69db      	ldr	r3, [r3, #28]
 8009e46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e4a:	f000 8088 	beq.w	8009f5e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	330c      	adds	r3, #12
 8009e54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e58:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009e5c:	e853 3f00 	ldrex	r3, [r3]
 8009e60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009e64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009e68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	330c      	adds	r3, #12
 8009e76:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009e7a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009e7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e82:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009e86:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009e8a:	e841 2300 	strex	r3, r2, [r1]
 8009e8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009e92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d1d9      	bne.n	8009e4e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	3314      	adds	r3, #20
 8009ea0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ea2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009ea4:	e853 3f00 	ldrex	r3, [r3]
 8009ea8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009eaa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009eac:	f023 0301 	bic.w	r3, r3, #1
 8009eb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	3314      	adds	r3, #20
 8009eba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009ebe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009ec2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ec4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009ec6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009eca:	e841 2300 	strex	r3, r2, [r1]
 8009ece:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009ed0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d1e1      	bne.n	8009e9a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	3314      	adds	r3, #20
 8009edc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ede:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009ee0:	e853 3f00 	ldrex	r3, [r3]
 8009ee4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009ee6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009ee8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009eec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	3314      	adds	r3, #20
 8009ef6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009efa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009efc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009efe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009f00:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009f02:	e841 2300 	strex	r3, r2, [r1]
 8009f06:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009f08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d1e3      	bne.n	8009ed6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2220      	movs	r2, #32
 8009f12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2200      	movs	r2, #0
 8009f1a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	330c      	adds	r3, #12
 8009f22:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f26:	e853 3f00 	ldrex	r3, [r3]
 8009f2a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009f2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f2e:	f023 0310 	bic.w	r3, r3, #16
 8009f32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	330c      	adds	r3, #12
 8009f3c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009f40:	65ba      	str	r2, [r7, #88]	; 0x58
 8009f42:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f44:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009f46:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009f48:	e841 2300 	strex	r3, r2, [r1]
 8009f4c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009f4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d1e3      	bne.n	8009f1c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f58:	4618      	mov	r0, r3
 8009f5a:	f7fc feaa 	bl	8006cb2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009f66:	b29b      	uxth	r3, r3
 8009f68:	1ad3      	subs	r3, r2, r3
 8009f6a:	b29b      	uxth	r3, r3
 8009f6c:	4619      	mov	r1, r3
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f000 f8c0 	bl	800a0f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009f74:	e099      	b.n	800a0aa <HAL_UART_IRQHandler+0x50e>
 8009f76:	bf00      	nop
 8009f78:	0800a2af 	.word	0x0800a2af
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009f84:	b29b      	uxth	r3, r3
 8009f86:	1ad3      	subs	r3, r2, r3
 8009f88:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009f90:	b29b      	uxth	r3, r3
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	f000 808b 	beq.w	800a0ae <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009f98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	f000 8086 	beq.w	800a0ae <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	330c      	adds	r3, #12
 8009fa8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fac:	e853 3f00 	ldrex	r3, [r3]
 8009fb0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009fb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fb4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009fb8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	330c      	adds	r3, #12
 8009fc2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009fc6:	647a      	str	r2, [r7, #68]	; 0x44
 8009fc8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009fcc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009fce:	e841 2300 	strex	r3, r2, [r1]
 8009fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009fd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d1e3      	bne.n	8009fa2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	3314      	adds	r3, #20
 8009fe0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fe4:	e853 3f00 	ldrex	r3, [r3]
 8009fe8:	623b      	str	r3, [r7, #32]
   return(result);
 8009fea:	6a3b      	ldr	r3, [r7, #32]
 8009fec:	f023 0301 	bic.w	r3, r3, #1
 8009ff0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	3314      	adds	r3, #20
 8009ffa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009ffe:	633a      	str	r2, [r7, #48]	; 0x30
 800a000:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a002:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a004:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a006:	e841 2300 	strex	r3, r2, [r1]
 800a00a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a00c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d1e3      	bne.n	8009fda <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2220      	movs	r2, #32
 800a016:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	2200      	movs	r2, #0
 800a01e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	330c      	adds	r3, #12
 800a026:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a028:	693b      	ldr	r3, [r7, #16]
 800a02a:	e853 3f00 	ldrex	r3, [r3]
 800a02e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	f023 0310 	bic.w	r3, r3, #16
 800a036:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	330c      	adds	r3, #12
 800a040:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a044:	61fa      	str	r2, [r7, #28]
 800a046:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a048:	69b9      	ldr	r1, [r7, #24]
 800a04a:	69fa      	ldr	r2, [r7, #28]
 800a04c:	e841 2300 	strex	r3, r2, [r1]
 800a050:	617b      	str	r3, [r7, #20]
   return(result);
 800a052:	697b      	ldr	r3, [r7, #20]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d1e3      	bne.n	800a020 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a058:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a05c:	4619      	mov	r1, r3
 800a05e:	6878      	ldr	r0, [r7, #4]
 800a060:	f000 f848 	bl	800a0f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a064:	e023      	b.n	800a0ae <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a066:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a06a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d009      	beq.n	800a086 <HAL_UART_IRQHandler+0x4ea>
 800a072:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d003      	beq.n	800a086 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f000 f929 	bl	800a2d6 <UART_Transmit_IT>
    return;
 800a084:	e014      	b.n	800a0b0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a086:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a08a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d00e      	beq.n	800a0b0 <HAL_UART_IRQHandler+0x514>
 800a092:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d008      	beq.n	800a0b0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	f000 f969 	bl	800a376 <UART_EndTransmit_IT>
    return;
 800a0a4:	e004      	b.n	800a0b0 <HAL_UART_IRQHandler+0x514>
    return;
 800a0a6:	bf00      	nop
 800a0a8:	e002      	b.n	800a0b0 <HAL_UART_IRQHandler+0x514>
      return;
 800a0aa:	bf00      	nop
 800a0ac:	e000      	b.n	800a0b0 <HAL_UART_IRQHandler+0x514>
      return;
 800a0ae:	bf00      	nop
  }
}
 800a0b0:	37e8      	adds	r7, #232	; 0xe8
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bd80      	pop	{r7, pc}
 800a0b6:	bf00      	nop

0800a0b8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a0b8:	b480      	push	{r7}
 800a0ba:	b083      	sub	sp, #12
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a0c0:	bf00      	nop
 800a0c2:	370c      	adds	r7, #12
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ca:	4770      	bx	lr

0800a0cc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a0cc:	b480      	push	{r7}
 800a0ce:	b083      	sub	sp, #12
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800a0d4:	bf00      	nop
 800a0d6:	370c      	adds	r7, #12
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0de:	4770      	bx	lr

0800a0e0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a0e0:	b480      	push	{r7}
 800a0e2:	b083      	sub	sp, #12
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a0e8:	bf00      	nop
 800a0ea:	370c      	adds	r7, #12
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f2:	4770      	bx	lr

0800a0f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a0f4:	b480      	push	{r7}
 800a0f6:	b083      	sub	sp, #12
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
 800a0fc:	460b      	mov	r3, r1
 800a0fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a100:	bf00      	nop
 800a102:	370c      	adds	r7, #12
 800a104:	46bd      	mov	sp, r7
 800a106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10a:	4770      	bx	lr

0800a10c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b090      	sub	sp, #64	; 0x40
 800a110:	af00      	add	r7, sp, #0
 800a112:	60f8      	str	r0, [r7, #12]
 800a114:	60b9      	str	r1, [r7, #8]
 800a116:	603b      	str	r3, [r7, #0]
 800a118:	4613      	mov	r3, r2
 800a11a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a11c:	e050      	b.n	800a1c0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a11e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a120:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a124:	d04c      	beq.n	800a1c0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a126:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d007      	beq.n	800a13c <UART_WaitOnFlagUntilTimeout+0x30>
 800a12c:	f7fc fc80 	bl	8006a30 <HAL_GetTick>
 800a130:	4602      	mov	r2, r0
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	1ad3      	subs	r3, r2, r3
 800a136:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a138:	429a      	cmp	r2, r3
 800a13a:	d241      	bcs.n	800a1c0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	330c      	adds	r3, #12
 800a142:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a146:	e853 3f00 	ldrex	r3, [r3]
 800a14a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a14c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a14e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a152:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	330c      	adds	r3, #12
 800a15a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a15c:	637a      	str	r2, [r7, #52]	; 0x34
 800a15e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a160:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a162:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a164:	e841 2300 	strex	r3, r2, [r1]
 800a168:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a16a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d1e5      	bne.n	800a13c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	3314      	adds	r3, #20
 800a176:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a178:	697b      	ldr	r3, [r7, #20]
 800a17a:	e853 3f00 	ldrex	r3, [r3]
 800a17e:	613b      	str	r3, [r7, #16]
   return(result);
 800a180:	693b      	ldr	r3, [r7, #16]
 800a182:	f023 0301 	bic.w	r3, r3, #1
 800a186:	63bb      	str	r3, [r7, #56]	; 0x38
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	3314      	adds	r3, #20
 800a18e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a190:	623a      	str	r2, [r7, #32]
 800a192:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a194:	69f9      	ldr	r1, [r7, #28]
 800a196:	6a3a      	ldr	r2, [r7, #32]
 800a198:	e841 2300 	strex	r3, r2, [r1]
 800a19c:	61bb      	str	r3, [r7, #24]
   return(result);
 800a19e:	69bb      	ldr	r3, [r7, #24]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d1e5      	bne.n	800a170 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	2220      	movs	r2, #32
 800a1a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	2220      	movs	r2, #32
 800a1b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a1bc:	2303      	movs	r3, #3
 800a1be:	e00f      	b.n	800a1e0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	681a      	ldr	r2, [r3, #0]
 800a1c6:	68bb      	ldr	r3, [r7, #8]
 800a1c8:	4013      	ands	r3, r2
 800a1ca:	68ba      	ldr	r2, [r7, #8]
 800a1cc:	429a      	cmp	r2, r3
 800a1ce:	bf0c      	ite	eq
 800a1d0:	2301      	moveq	r3, #1
 800a1d2:	2300      	movne	r3, #0
 800a1d4:	b2db      	uxtb	r3, r3
 800a1d6:	461a      	mov	r2, r3
 800a1d8:	79fb      	ldrb	r3, [r7, #7]
 800a1da:	429a      	cmp	r2, r3
 800a1dc:	d09f      	beq.n	800a11e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a1de:	2300      	movs	r3, #0
}
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	3740      	adds	r7, #64	; 0x40
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd80      	pop	{r7, pc}

0800a1e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a1e8:	b480      	push	{r7}
 800a1ea:	b095      	sub	sp, #84	; 0x54
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	330c      	adds	r3, #12
 800a1f6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1fa:	e853 3f00 	ldrex	r3, [r3]
 800a1fe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a202:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a206:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	330c      	adds	r3, #12
 800a20e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a210:	643a      	str	r2, [r7, #64]	; 0x40
 800a212:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a214:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a216:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a218:	e841 2300 	strex	r3, r2, [r1]
 800a21c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a21e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a220:	2b00      	cmp	r3, #0
 800a222:	d1e5      	bne.n	800a1f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	3314      	adds	r3, #20
 800a22a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a22c:	6a3b      	ldr	r3, [r7, #32]
 800a22e:	e853 3f00 	ldrex	r3, [r3]
 800a232:	61fb      	str	r3, [r7, #28]
   return(result);
 800a234:	69fb      	ldr	r3, [r7, #28]
 800a236:	f023 0301 	bic.w	r3, r3, #1
 800a23a:	64bb      	str	r3, [r7, #72]	; 0x48
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	3314      	adds	r3, #20
 800a242:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a244:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a246:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a248:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a24a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a24c:	e841 2300 	strex	r3, r2, [r1]
 800a250:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a254:	2b00      	cmp	r3, #0
 800a256:	d1e5      	bne.n	800a224 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a25c:	2b01      	cmp	r3, #1
 800a25e:	d119      	bne.n	800a294 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	330c      	adds	r3, #12
 800a266:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	e853 3f00 	ldrex	r3, [r3]
 800a26e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	f023 0310 	bic.w	r3, r3, #16
 800a276:	647b      	str	r3, [r7, #68]	; 0x44
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	330c      	adds	r3, #12
 800a27e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a280:	61ba      	str	r2, [r7, #24]
 800a282:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a284:	6979      	ldr	r1, [r7, #20]
 800a286:	69ba      	ldr	r2, [r7, #24]
 800a288:	e841 2300 	strex	r3, r2, [r1]
 800a28c:	613b      	str	r3, [r7, #16]
   return(result);
 800a28e:	693b      	ldr	r3, [r7, #16]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d1e5      	bne.n	800a260 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2220      	movs	r2, #32
 800a298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2200      	movs	r2, #0
 800a2a0:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a2a2:	bf00      	nop
 800a2a4:	3754      	adds	r7, #84	; 0x54
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ac:	4770      	bx	lr

0800a2ae <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a2ae:	b580      	push	{r7, lr}
 800a2b0:	b084      	sub	sp, #16
 800a2b2:	af00      	add	r7, sp, #0
 800a2b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2ba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	2200      	movs	r2, #0
 800a2c0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a2c8:	68f8      	ldr	r0, [r7, #12]
 800a2ca:	f7ff ff09 	bl	800a0e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a2ce:	bf00      	nop
 800a2d0:	3710      	adds	r7, #16
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd80      	pop	{r7, pc}

0800a2d6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a2d6:	b480      	push	{r7}
 800a2d8:	b085      	sub	sp, #20
 800a2da:	af00      	add	r7, sp, #0
 800a2dc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a2e4:	b2db      	uxtb	r3, r3
 800a2e6:	2b21      	cmp	r3, #33	; 0x21
 800a2e8:	d13e      	bne.n	800a368 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	689b      	ldr	r3, [r3, #8]
 800a2ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2f2:	d114      	bne.n	800a31e <UART_Transmit_IT+0x48>
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	691b      	ldr	r3, [r3, #16]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d110      	bne.n	800a31e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	6a1b      	ldr	r3, [r3, #32]
 800a300:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	881b      	ldrh	r3, [r3, #0]
 800a306:	461a      	mov	r2, r3
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a310:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	6a1b      	ldr	r3, [r3, #32]
 800a316:	1c9a      	adds	r2, r3, #2
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	621a      	str	r2, [r3, #32]
 800a31c:	e008      	b.n	800a330 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	6a1b      	ldr	r3, [r3, #32]
 800a322:	1c59      	adds	r1, r3, #1
 800a324:	687a      	ldr	r2, [r7, #4]
 800a326:	6211      	str	r1, [r2, #32]
 800a328:	781a      	ldrb	r2, [r3, #0]
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a334:	b29b      	uxth	r3, r3
 800a336:	3b01      	subs	r3, #1
 800a338:	b29b      	uxth	r3, r3
 800a33a:	687a      	ldr	r2, [r7, #4]
 800a33c:	4619      	mov	r1, r3
 800a33e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a340:	2b00      	cmp	r3, #0
 800a342:	d10f      	bne.n	800a364 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	68da      	ldr	r2, [r3, #12]
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a352:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	68da      	ldr	r2, [r3, #12]
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a362:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a364:	2300      	movs	r3, #0
 800a366:	e000      	b.n	800a36a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a368:	2302      	movs	r3, #2
  }
}
 800a36a:	4618      	mov	r0, r3
 800a36c:	3714      	adds	r7, #20
 800a36e:	46bd      	mov	sp, r7
 800a370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a374:	4770      	bx	lr

0800a376 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a376:	b580      	push	{r7, lr}
 800a378:	b082      	sub	sp, #8
 800a37a:	af00      	add	r7, sp, #0
 800a37c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	68da      	ldr	r2, [r3, #12]
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a38c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	2220      	movs	r2, #32
 800a392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a396:	6878      	ldr	r0, [r7, #4]
 800a398:	f7ff fe8e 	bl	800a0b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a39c:	2300      	movs	r3, #0
}
 800a39e:	4618      	mov	r0, r3
 800a3a0:	3708      	adds	r7, #8
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}

0800a3a6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a3a6:	b580      	push	{r7, lr}
 800a3a8:	b08c      	sub	sp, #48	; 0x30
 800a3aa:	af00      	add	r7, sp, #0
 800a3ac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a3b4:	b2db      	uxtb	r3, r3
 800a3b6:	2b22      	cmp	r3, #34	; 0x22
 800a3b8:	f040 80ab 	bne.w	800a512 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	689b      	ldr	r3, [r3, #8]
 800a3c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3c4:	d117      	bne.n	800a3f6 <UART_Receive_IT+0x50>
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	691b      	ldr	r3, [r3, #16]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d113      	bne.n	800a3f6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3d6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	685b      	ldr	r3, [r3, #4]
 800a3de:	b29b      	uxth	r3, r3
 800a3e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3e4:	b29a      	uxth	r2, r3
 800a3e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3e8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3ee:	1c9a      	adds	r2, r3, #2
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	629a      	str	r2, [r3, #40]	; 0x28
 800a3f4:	e026      	b.n	800a444 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	689b      	ldr	r3, [r3, #8]
 800a404:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a408:	d007      	beq.n	800a41a <UART_Receive_IT+0x74>
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	689b      	ldr	r3, [r3, #8]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d10a      	bne.n	800a428 <UART_Receive_IT+0x82>
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	691b      	ldr	r3, [r3, #16]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d106      	bne.n	800a428 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	685b      	ldr	r3, [r3, #4]
 800a420:	b2da      	uxtb	r2, r3
 800a422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a424:	701a      	strb	r2, [r3, #0]
 800a426:	e008      	b.n	800a43a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	685b      	ldr	r3, [r3, #4]
 800a42e:	b2db      	uxtb	r3, r3
 800a430:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a434:	b2da      	uxtb	r2, r3
 800a436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a438:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a43e:	1c5a      	adds	r2, r3, #1
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a448:	b29b      	uxth	r3, r3
 800a44a:	3b01      	subs	r3, #1
 800a44c:	b29b      	uxth	r3, r3
 800a44e:	687a      	ldr	r2, [r7, #4]
 800a450:	4619      	mov	r1, r3
 800a452:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a454:	2b00      	cmp	r3, #0
 800a456:	d15a      	bne.n	800a50e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	68da      	ldr	r2, [r3, #12]
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	f022 0220 	bic.w	r2, r2, #32
 800a466:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	68da      	ldr	r2, [r3, #12]
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a476:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	695a      	ldr	r2, [r3, #20]
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	f022 0201 	bic.w	r2, r2, #1
 800a486:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2220      	movs	r2, #32
 800a48c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a494:	2b01      	cmp	r3, #1
 800a496:	d135      	bne.n	800a504 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2200      	movs	r2, #0
 800a49c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	330c      	adds	r3, #12
 800a4a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4a6:	697b      	ldr	r3, [r7, #20]
 800a4a8:	e853 3f00 	ldrex	r3, [r3]
 800a4ac:	613b      	str	r3, [r7, #16]
   return(result);
 800a4ae:	693b      	ldr	r3, [r7, #16]
 800a4b0:	f023 0310 	bic.w	r3, r3, #16
 800a4b4:	627b      	str	r3, [r7, #36]	; 0x24
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	330c      	adds	r3, #12
 800a4bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4be:	623a      	str	r2, [r7, #32]
 800a4c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4c2:	69f9      	ldr	r1, [r7, #28]
 800a4c4:	6a3a      	ldr	r2, [r7, #32]
 800a4c6:	e841 2300 	strex	r3, r2, [r1]
 800a4ca:	61bb      	str	r3, [r7, #24]
   return(result);
 800a4cc:	69bb      	ldr	r3, [r7, #24]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d1e5      	bne.n	800a49e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	f003 0310 	and.w	r3, r3, #16
 800a4dc:	2b10      	cmp	r3, #16
 800a4de:	d10a      	bne.n	800a4f6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	60fb      	str	r3, [r7, #12]
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	60fb      	str	r3, [r7, #12]
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	685b      	ldr	r3, [r3, #4]
 800a4f2:	60fb      	str	r3, [r7, #12]
 800a4f4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a4fa:	4619      	mov	r1, r3
 800a4fc:	6878      	ldr	r0, [r7, #4]
 800a4fe:	f7ff fdf9 	bl	800a0f4 <HAL_UARTEx_RxEventCallback>
 800a502:	e002      	b.n	800a50a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a504:	6878      	ldr	r0, [r7, #4]
 800a506:	f7ff fde1 	bl	800a0cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a50a:	2300      	movs	r3, #0
 800a50c:	e002      	b.n	800a514 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a50e:	2300      	movs	r3, #0
 800a510:	e000      	b.n	800a514 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a512:	2302      	movs	r3, #2
  }
}
 800a514:	4618      	mov	r0, r3
 800a516:	3730      	adds	r7, #48	; 0x30
 800a518:	46bd      	mov	sp, r7
 800a51a:	bd80      	pop	{r7, pc}

0800a51c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a51c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a520:	b0c0      	sub	sp, #256	; 0x100
 800a522:	af00      	add	r7, sp, #0
 800a524:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	691b      	ldr	r3, [r3, #16]
 800a530:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a538:	68d9      	ldr	r1, [r3, #12]
 800a53a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a53e:	681a      	ldr	r2, [r3, #0]
 800a540:	ea40 0301 	orr.w	r3, r0, r1
 800a544:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a54a:	689a      	ldr	r2, [r3, #8]
 800a54c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a550:	691b      	ldr	r3, [r3, #16]
 800a552:	431a      	orrs	r2, r3
 800a554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a558:	695b      	ldr	r3, [r3, #20]
 800a55a:	431a      	orrs	r2, r3
 800a55c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a560:	69db      	ldr	r3, [r3, #28]
 800a562:	4313      	orrs	r3, r2
 800a564:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	68db      	ldr	r3, [r3, #12]
 800a570:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a574:	f021 010c 	bic.w	r1, r1, #12
 800a578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a57c:	681a      	ldr	r2, [r3, #0]
 800a57e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a582:	430b      	orrs	r3, r1
 800a584:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	695b      	ldr	r3, [r3, #20]
 800a58e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a596:	6999      	ldr	r1, [r3, #24]
 800a598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a59c:	681a      	ldr	r2, [r3, #0]
 800a59e:	ea40 0301 	orr.w	r3, r0, r1
 800a5a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a5a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5a8:	681a      	ldr	r2, [r3, #0]
 800a5aa:	4b8f      	ldr	r3, [pc, #572]	; (800a7e8 <UART_SetConfig+0x2cc>)
 800a5ac:	429a      	cmp	r2, r3
 800a5ae:	d005      	beq.n	800a5bc <UART_SetConfig+0xa0>
 800a5b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5b4:	681a      	ldr	r2, [r3, #0]
 800a5b6:	4b8d      	ldr	r3, [pc, #564]	; (800a7ec <UART_SetConfig+0x2d0>)
 800a5b8:	429a      	cmp	r2, r3
 800a5ba:	d104      	bne.n	800a5c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a5bc:	f7fe fb9c 	bl	8008cf8 <HAL_RCC_GetPCLK2Freq>
 800a5c0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a5c4:	e003      	b.n	800a5ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a5c6:	f7fe fb83 	bl	8008cd0 <HAL_RCC_GetPCLK1Freq>
 800a5ca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a5ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5d2:	69db      	ldr	r3, [r3, #28]
 800a5d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a5d8:	f040 810c 	bne.w	800a7f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a5dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a5e6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a5ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a5ee:	4622      	mov	r2, r4
 800a5f0:	462b      	mov	r3, r5
 800a5f2:	1891      	adds	r1, r2, r2
 800a5f4:	65b9      	str	r1, [r7, #88]	; 0x58
 800a5f6:	415b      	adcs	r3, r3
 800a5f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a5fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a5fe:	4621      	mov	r1, r4
 800a600:	eb12 0801 	adds.w	r8, r2, r1
 800a604:	4629      	mov	r1, r5
 800a606:	eb43 0901 	adc.w	r9, r3, r1
 800a60a:	f04f 0200 	mov.w	r2, #0
 800a60e:	f04f 0300 	mov.w	r3, #0
 800a612:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a616:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a61a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a61e:	4690      	mov	r8, r2
 800a620:	4699      	mov	r9, r3
 800a622:	4623      	mov	r3, r4
 800a624:	eb18 0303 	adds.w	r3, r8, r3
 800a628:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a62c:	462b      	mov	r3, r5
 800a62e:	eb49 0303 	adc.w	r3, r9, r3
 800a632:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a63a:	685b      	ldr	r3, [r3, #4]
 800a63c:	2200      	movs	r2, #0
 800a63e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a642:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a646:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a64a:	460b      	mov	r3, r1
 800a64c:	18db      	adds	r3, r3, r3
 800a64e:	653b      	str	r3, [r7, #80]	; 0x50
 800a650:	4613      	mov	r3, r2
 800a652:	eb42 0303 	adc.w	r3, r2, r3
 800a656:	657b      	str	r3, [r7, #84]	; 0x54
 800a658:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a65c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a660:	f7f6 f924 	bl	80008ac <__aeabi_uldivmod>
 800a664:	4602      	mov	r2, r0
 800a666:	460b      	mov	r3, r1
 800a668:	4b61      	ldr	r3, [pc, #388]	; (800a7f0 <UART_SetConfig+0x2d4>)
 800a66a:	fba3 2302 	umull	r2, r3, r3, r2
 800a66e:	095b      	lsrs	r3, r3, #5
 800a670:	011c      	lsls	r4, r3, #4
 800a672:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a676:	2200      	movs	r2, #0
 800a678:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a67c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a680:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a684:	4642      	mov	r2, r8
 800a686:	464b      	mov	r3, r9
 800a688:	1891      	adds	r1, r2, r2
 800a68a:	64b9      	str	r1, [r7, #72]	; 0x48
 800a68c:	415b      	adcs	r3, r3
 800a68e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a690:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a694:	4641      	mov	r1, r8
 800a696:	eb12 0a01 	adds.w	sl, r2, r1
 800a69a:	4649      	mov	r1, r9
 800a69c:	eb43 0b01 	adc.w	fp, r3, r1
 800a6a0:	f04f 0200 	mov.w	r2, #0
 800a6a4:	f04f 0300 	mov.w	r3, #0
 800a6a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a6ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a6b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a6b4:	4692      	mov	sl, r2
 800a6b6:	469b      	mov	fp, r3
 800a6b8:	4643      	mov	r3, r8
 800a6ba:	eb1a 0303 	adds.w	r3, sl, r3
 800a6be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a6c2:	464b      	mov	r3, r9
 800a6c4:	eb4b 0303 	adc.w	r3, fp, r3
 800a6c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a6cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a6d0:	685b      	ldr	r3, [r3, #4]
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a6d8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a6dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a6e0:	460b      	mov	r3, r1
 800a6e2:	18db      	adds	r3, r3, r3
 800a6e4:	643b      	str	r3, [r7, #64]	; 0x40
 800a6e6:	4613      	mov	r3, r2
 800a6e8:	eb42 0303 	adc.w	r3, r2, r3
 800a6ec:	647b      	str	r3, [r7, #68]	; 0x44
 800a6ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a6f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a6f6:	f7f6 f8d9 	bl	80008ac <__aeabi_uldivmod>
 800a6fa:	4602      	mov	r2, r0
 800a6fc:	460b      	mov	r3, r1
 800a6fe:	4611      	mov	r1, r2
 800a700:	4b3b      	ldr	r3, [pc, #236]	; (800a7f0 <UART_SetConfig+0x2d4>)
 800a702:	fba3 2301 	umull	r2, r3, r3, r1
 800a706:	095b      	lsrs	r3, r3, #5
 800a708:	2264      	movs	r2, #100	; 0x64
 800a70a:	fb02 f303 	mul.w	r3, r2, r3
 800a70e:	1acb      	subs	r3, r1, r3
 800a710:	00db      	lsls	r3, r3, #3
 800a712:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a716:	4b36      	ldr	r3, [pc, #216]	; (800a7f0 <UART_SetConfig+0x2d4>)
 800a718:	fba3 2302 	umull	r2, r3, r3, r2
 800a71c:	095b      	lsrs	r3, r3, #5
 800a71e:	005b      	lsls	r3, r3, #1
 800a720:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a724:	441c      	add	r4, r3
 800a726:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a72a:	2200      	movs	r2, #0
 800a72c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a730:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a734:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a738:	4642      	mov	r2, r8
 800a73a:	464b      	mov	r3, r9
 800a73c:	1891      	adds	r1, r2, r2
 800a73e:	63b9      	str	r1, [r7, #56]	; 0x38
 800a740:	415b      	adcs	r3, r3
 800a742:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a744:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a748:	4641      	mov	r1, r8
 800a74a:	1851      	adds	r1, r2, r1
 800a74c:	6339      	str	r1, [r7, #48]	; 0x30
 800a74e:	4649      	mov	r1, r9
 800a750:	414b      	adcs	r3, r1
 800a752:	637b      	str	r3, [r7, #52]	; 0x34
 800a754:	f04f 0200 	mov.w	r2, #0
 800a758:	f04f 0300 	mov.w	r3, #0
 800a75c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a760:	4659      	mov	r1, fp
 800a762:	00cb      	lsls	r3, r1, #3
 800a764:	4651      	mov	r1, sl
 800a766:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a76a:	4651      	mov	r1, sl
 800a76c:	00ca      	lsls	r2, r1, #3
 800a76e:	4610      	mov	r0, r2
 800a770:	4619      	mov	r1, r3
 800a772:	4603      	mov	r3, r0
 800a774:	4642      	mov	r2, r8
 800a776:	189b      	adds	r3, r3, r2
 800a778:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a77c:	464b      	mov	r3, r9
 800a77e:	460a      	mov	r2, r1
 800a780:	eb42 0303 	adc.w	r3, r2, r3
 800a784:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a78c:	685b      	ldr	r3, [r3, #4]
 800a78e:	2200      	movs	r2, #0
 800a790:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a794:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a798:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a79c:	460b      	mov	r3, r1
 800a79e:	18db      	adds	r3, r3, r3
 800a7a0:	62bb      	str	r3, [r7, #40]	; 0x28
 800a7a2:	4613      	mov	r3, r2
 800a7a4:	eb42 0303 	adc.w	r3, r2, r3
 800a7a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a7aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a7ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a7b2:	f7f6 f87b 	bl	80008ac <__aeabi_uldivmod>
 800a7b6:	4602      	mov	r2, r0
 800a7b8:	460b      	mov	r3, r1
 800a7ba:	4b0d      	ldr	r3, [pc, #52]	; (800a7f0 <UART_SetConfig+0x2d4>)
 800a7bc:	fba3 1302 	umull	r1, r3, r3, r2
 800a7c0:	095b      	lsrs	r3, r3, #5
 800a7c2:	2164      	movs	r1, #100	; 0x64
 800a7c4:	fb01 f303 	mul.w	r3, r1, r3
 800a7c8:	1ad3      	subs	r3, r2, r3
 800a7ca:	00db      	lsls	r3, r3, #3
 800a7cc:	3332      	adds	r3, #50	; 0x32
 800a7ce:	4a08      	ldr	r2, [pc, #32]	; (800a7f0 <UART_SetConfig+0x2d4>)
 800a7d0:	fba2 2303 	umull	r2, r3, r2, r3
 800a7d4:	095b      	lsrs	r3, r3, #5
 800a7d6:	f003 0207 	and.w	r2, r3, #7
 800a7da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	4422      	add	r2, r4
 800a7e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a7e4:	e105      	b.n	800a9f2 <UART_SetConfig+0x4d6>
 800a7e6:	bf00      	nop
 800a7e8:	40011000 	.word	0x40011000
 800a7ec:	40011400 	.word	0x40011400
 800a7f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a7f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a7fe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a802:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a806:	4642      	mov	r2, r8
 800a808:	464b      	mov	r3, r9
 800a80a:	1891      	adds	r1, r2, r2
 800a80c:	6239      	str	r1, [r7, #32]
 800a80e:	415b      	adcs	r3, r3
 800a810:	627b      	str	r3, [r7, #36]	; 0x24
 800a812:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a816:	4641      	mov	r1, r8
 800a818:	1854      	adds	r4, r2, r1
 800a81a:	4649      	mov	r1, r9
 800a81c:	eb43 0501 	adc.w	r5, r3, r1
 800a820:	f04f 0200 	mov.w	r2, #0
 800a824:	f04f 0300 	mov.w	r3, #0
 800a828:	00eb      	lsls	r3, r5, #3
 800a82a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a82e:	00e2      	lsls	r2, r4, #3
 800a830:	4614      	mov	r4, r2
 800a832:	461d      	mov	r5, r3
 800a834:	4643      	mov	r3, r8
 800a836:	18e3      	adds	r3, r4, r3
 800a838:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a83c:	464b      	mov	r3, r9
 800a83e:	eb45 0303 	adc.w	r3, r5, r3
 800a842:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a84a:	685b      	ldr	r3, [r3, #4]
 800a84c:	2200      	movs	r2, #0
 800a84e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a852:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a856:	f04f 0200 	mov.w	r2, #0
 800a85a:	f04f 0300 	mov.w	r3, #0
 800a85e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a862:	4629      	mov	r1, r5
 800a864:	008b      	lsls	r3, r1, #2
 800a866:	4621      	mov	r1, r4
 800a868:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a86c:	4621      	mov	r1, r4
 800a86e:	008a      	lsls	r2, r1, #2
 800a870:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a874:	f7f6 f81a 	bl	80008ac <__aeabi_uldivmod>
 800a878:	4602      	mov	r2, r0
 800a87a:	460b      	mov	r3, r1
 800a87c:	4b60      	ldr	r3, [pc, #384]	; (800aa00 <UART_SetConfig+0x4e4>)
 800a87e:	fba3 2302 	umull	r2, r3, r3, r2
 800a882:	095b      	lsrs	r3, r3, #5
 800a884:	011c      	lsls	r4, r3, #4
 800a886:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a88a:	2200      	movs	r2, #0
 800a88c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a890:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a894:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a898:	4642      	mov	r2, r8
 800a89a:	464b      	mov	r3, r9
 800a89c:	1891      	adds	r1, r2, r2
 800a89e:	61b9      	str	r1, [r7, #24]
 800a8a0:	415b      	adcs	r3, r3
 800a8a2:	61fb      	str	r3, [r7, #28]
 800a8a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a8a8:	4641      	mov	r1, r8
 800a8aa:	1851      	adds	r1, r2, r1
 800a8ac:	6139      	str	r1, [r7, #16]
 800a8ae:	4649      	mov	r1, r9
 800a8b0:	414b      	adcs	r3, r1
 800a8b2:	617b      	str	r3, [r7, #20]
 800a8b4:	f04f 0200 	mov.w	r2, #0
 800a8b8:	f04f 0300 	mov.w	r3, #0
 800a8bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a8c0:	4659      	mov	r1, fp
 800a8c2:	00cb      	lsls	r3, r1, #3
 800a8c4:	4651      	mov	r1, sl
 800a8c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a8ca:	4651      	mov	r1, sl
 800a8cc:	00ca      	lsls	r2, r1, #3
 800a8ce:	4610      	mov	r0, r2
 800a8d0:	4619      	mov	r1, r3
 800a8d2:	4603      	mov	r3, r0
 800a8d4:	4642      	mov	r2, r8
 800a8d6:	189b      	adds	r3, r3, r2
 800a8d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a8dc:	464b      	mov	r3, r9
 800a8de:	460a      	mov	r2, r1
 800a8e0:	eb42 0303 	adc.w	r3, r2, r3
 800a8e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a8e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8ec:	685b      	ldr	r3, [r3, #4]
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	67bb      	str	r3, [r7, #120]	; 0x78
 800a8f2:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a8f4:	f04f 0200 	mov.w	r2, #0
 800a8f8:	f04f 0300 	mov.w	r3, #0
 800a8fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a900:	4649      	mov	r1, r9
 800a902:	008b      	lsls	r3, r1, #2
 800a904:	4641      	mov	r1, r8
 800a906:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a90a:	4641      	mov	r1, r8
 800a90c:	008a      	lsls	r2, r1, #2
 800a90e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a912:	f7f5 ffcb 	bl	80008ac <__aeabi_uldivmod>
 800a916:	4602      	mov	r2, r0
 800a918:	460b      	mov	r3, r1
 800a91a:	4b39      	ldr	r3, [pc, #228]	; (800aa00 <UART_SetConfig+0x4e4>)
 800a91c:	fba3 1302 	umull	r1, r3, r3, r2
 800a920:	095b      	lsrs	r3, r3, #5
 800a922:	2164      	movs	r1, #100	; 0x64
 800a924:	fb01 f303 	mul.w	r3, r1, r3
 800a928:	1ad3      	subs	r3, r2, r3
 800a92a:	011b      	lsls	r3, r3, #4
 800a92c:	3332      	adds	r3, #50	; 0x32
 800a92e:	4a34      	ldr	r2, [pc, #208]	; (800aa00 <UART_SetConfig+0x4e4>)
 800a930:	fba2 2303 	umull	r2, r3, r2, r3
 800a934:	095b      	lsrs	r3, r3, #5
 800a936:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a93a:	441c      	add	r4, r3
 800a93c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a940:	2200      	movs	r2, #0
 800a942:	673b      	str	r3, [r7, #112]	; 0x70
 800a944:	677a      	str	r2, [r7, #116]	; 0x74
 800a946:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a94a:	4642      	mov	r2, r8
 800a94c:	464b      	mov	r3, r9
 800a94e:	1891      	adds	r1, r2, r2
 800a950:	60b9      	str	r1, [r7, #8]
 800a952:	415b      	adcs	r3, r3
 800a954:	60fb      	str	r3, [r7, #12]
 800a956:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a95a:	4641      	mov	r1, r8
 800a95c:	1851      	adds	r1, r2, r1
 800a95e:	6039      	str	r1, [r7, #0]
 800a960:	4649      	mov	r1, r9
 800a962:	414b      	adcs	r3, r1
 800a964:	607b      	str	r3, [r7, #4]
 800a966:	f04f 0200 	mov.w	r2, #0
 800a96a:	f04f 0300 	mov.w	r3, #0
 800a96e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a972:	4659      	mov	r1, fp
 800a974:	00cb      	lsls	r3, r1, #3
 800a976:	4651      	mov	r1, sl
 800a978:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a97c:	4651      	mov	r1, sl
 800a97e:	00ca      	lsls	r2, r1, #3
 800a980:	4610      	mov	r0, r2
 800a982:	4619      	mov	r1, r3
 800a984:	4603      	mov	r3, r0
 800a986:	4642      	mov	r2, r8
 800a988:	189b      	adds	r3, r3, r2
 800a98a:	66bb      	str	r3, [r7, #104]	; 0x68
 800a98c:	464b      	mov	r3, r9
 800a98e:	460a      	mov	r2, r1
 800a990:	eb42 0303 	adc.w	r3, r2, r3
 800a994:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a99a:	685b      	ldr	r3, [r3, #4]
 800a99c:	2200      	movs	r2, #0
 800a99e:	663b      	str	r3, [r7, #96]	; 0x60
 800a9a0:	667a      	str	r2, [r7, #100]	; 0x64
 800a9a2:	f04f 0200 	mov.w	r2, #0
 800a9a6:	f04f 0300 	mov.w	r3, #0
 800a9aa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a9ae:	4649      	mov	r1, r9
 800a9b0:	008b      	lsls	r3, r1, #2
 800a9b2:	4641      	mov	r1, r8
 800a9b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a9b8:	4641      	mov	r1, r8
 800a9ba:	008a      	lsls	r2, r1, #2
 800a9bc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a9c0:	f7f5 ff74 	bl	80008ac <__aeabi_uldivmod>
 800a9c4:	4602      	mov	r2, r0
 800a9c6:	460b      	mov	r3, r1
 800a9c8:	4b0d      	ldr	r3, [pc, #52]	; (800aa00 <UART_SetConfig+0x4e4>)
 800a9ca:	fba3 1302 	umull	r1, r3, r3, r2
 800a9ce:	095b      	lsrs	r3, r3, #5
 800a9d0:	2164      	movs	r1, #100	; 0x64
 800a9d2:	fb01 f303 	mul.w	r3, r1, r3
 800a9d6:	1ad3      	subs	r3, r2, r3
 800a9d8:	011b      	lsls	r3, r3, #4
 800a9da:	3332      	adds	r3, #50	; 0x32
 800a9dc:	4a08      	ldr	r2, [pc, #32]	; (800aa00 <UART_SetConfig+0x4e4>)
 800a9de:	fba2 2303 	umull	r2, r3, r2, r3
 800a9e2:	095b      	lsrs	r3, r3, #5
 800a9e4:	f003 020f 	and.w	r2, r3, #15
 800a9e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	4422      	add	r2, r4
 800a9f0:	609a      	str	r2, [r3, #8]
}
 800a9f2:	bf00      	nop
 800a9f4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a9fe:	bf00      	nop
 800aa00:	51eb851f 	.word	0x51eb851f

0800aa04 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 800aa04:	b480      	push	{r7}
 800aa06:	b087      	sub	sp, #28
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
 800aa0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	681a      	ldr	r2, [r3, #0]
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa18:	683a      	ldr	r2, [r7, #0]
 800aa1a:	6812      	ldr	r2, [r2, #0]
 800aa1c:	f023 0101 	bic.w	r1, r3, #1
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	689b      	ldr	r3, [r3, #8]
 800aa2a:	2b08      	cmp	r3, #8
 800aa2c:	d102      	bne.n	800aa34 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800aa2e:	2340      	movs	r3, #64	; 0x40
 800aa30:	617b      	str	r3, [r7, #20]
 800aa32:	e001      	b.n	800aa38 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800aa34:	2300      	movs	r3, #0
 800aa36:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800aa3c:	697b      	ldr	r3, [r7, #20]
 800aa3e:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800aa44:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800aa4a:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800aa4c:	683b      	ldr	r3, [r7, #0]
 800aa4e:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800aa50:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800aa56:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 800aa5c:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 800aa62:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 800aa68:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 800aa6e:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 800aa74:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 800aa7a:	4313      	orrs	r3, r2
 800aa7c:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 800aa7e:	683b      	ldr	r3, [r7, #0]
 800aa80:	699b      	ldr	r3, [r3, #24]
 800aa82:	693a      	ldr	r2, [r7, #16]
 800aa84:	4313      	orrs	r3, r2
 800aa86:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa8c:	693a      	ldr	r2, [r7, #16]
 800aa8e:	4313      	orrs	r3, r2
 800aa90:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 800aa92:	4b10      	ldr	r3, [pc, #64]	; (800aad4 <FSMC_NORSRAM_Init+0xd0>)
 800aa94:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800aa9c:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800aaa4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	681a      	ldr	r2, [r3, #0]
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	43db      	mvns	r3, r3
 800aab4:	ea02 0103 	and.w	r1, r2, r3
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	681a      	ldr	r2, [r3, #0]
 800aabc:	693b      	ldr	r3, [r7, #16]
 800aabe:	4319      	orrs	r1, r3
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 800aac6:	2300      	movs	r3, #0
}
 800aac8:	4618      	mov	r0, r3
 800aaca:	371c      	adds	r7, #28
 800aacc:	46bd      	mov	sp, r7
 800aace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad2:	4770      	bx	lr
 800aad4:	0008fb7f 	.word	0x0008fb7f

0800aad8 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800aad8:	b480      	push	{r7}
 800aada:	b085      	sub	sp, #20
 800aadc:	af00      	add	r7, sp, #0
 800aade:	60f8      	str	r0, [r7, #12]
 800aae0:	60b9      	str	r1, [r7, #8]
 800aae2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	1c5a      	adds	r2, r3, #1
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aaee:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800aaf2:	68bb      	ldr	r3, [r7, #8]
 800aaf4:	681a      	ldr	r2, [r3, #0]
 800aaf6:	68bb      	ldr	r3, [r7, #8]
 800aaf8:	685b      	ldr	r3, [r3, #4]
 800aafa:	011b      	lsls	r3, r3, #4
 800aafc:	431a      	orrs	r2, r3
 800aafe:	68bb      	ldr	r3, [r7, #8]
 800ab00:	689b      	ldr	r3, [r3, #8]
 800ab02:	021b      	lsls	r3, r3, #8
 800ab04:	431a      	orrs	r2, r3
 800ab06:	68bb      	ldr	r3, [r7, #8]
 800ab08:	68db      	ldr	r3, [r3, #12]
 800ab0a:	041b      	lsls	r3, r3, #16
 800ab0c:	431a      	orrs	r2, r3
 800ab0e:	68bb      	ldr	r3, [r7, #8]
 800ab10:	691b      	ldr	r3, [r3, #16]
 800ab12:	3b01      	subs	r3, #1
 800ab14:	051b      	lsls	r3, r3, #20
 800ab16:	431a      	orrs	r2, r3
 800ab18:	68bb      	ldr	r3, [r7, #8]
 800ab1a:	695b      	ldr	r3, [r3, #20]
 800ab1c:	3b02      	subs	r3, #2
 800ab1e:	061b      	lsls	r3, r3, #24
 800ab20:	431a      	orrs	r2, r3
 800ab22:	68bb      	ldr	r3, [r7, #8]
 800ab24:	699b      	ldr	r3, [r3, #24]
 800ab26:	4313      	orrs	r3, r2
 800ab28:	687a      	ldr	r2, [r7, #4]
 800ab2a:	3201      	adds	r2, #1
 800ab2c:	4319      	orrs	r1, r3
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 800ab34:	2300      	movs	r3, #0
}
 800ab36:	4618      	mov	r0, r3
 800ab38:	3714      	adds	r7, #20
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab40:	4770      	bx	lr
	...

0800ab44 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800ab44:	b480      	push	{r7}
 800ab46:	b085      	sub	sp, #20
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	60f8      	str	r0, [r7, #12]
 800ab4c:	60b9      	str	r1, [r7, #8]
 800ab4e:	607a      	str	r2, [r7, #4]
 800ab50:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ab58:	d11d      	bne.n	800ab96 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	687a      	ldr	r2, [r7, #4]
 800ab5e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ab62:	4b13      	ldr	r3, [pc, #76]	; (800abb0 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800ab64:	4013      	ands	r3, r2
 800ab66:	68ba      	ldr	r2, [r7, #8]
 800ab68:	6811      	ldr	r1, [r2, #0]
 800ab6a:	68ba      	ldr	r2, [r7, #8]
 800ab6c:	6852      	ldr	r2, [r2, #4]
 800ab6e:	0112      	lsls	r2, r2, #4
 800ab70:	4311      	orrs	r1, r2
 800ab72:	68ba      	ldr	r2, [r7, #8]
 800ab74:	6892      	ldr	r2, [r2, #8]
 800ab76:	0212      	lsls	r2, r2, #8
 800ab78:	4311      	orrs	r1, r2
 800ab7a:	68ba      	ldr	r2, [r7, #8]
 800ab7c:	6992      	ldr	r2, [r2, #24]
 800ab7e:	4311      	orrs	r1, r2
 800ab80:	68ba      	ldr	r2, [r7, #8]
 800ab82:	68d2      	ldr	r2, [r2, #12]
 800ab84:	0412      	lsls	r2, r2, #16
 800ab86:	430a      	orrs	r2, r1
 800ab88:	ea43 0102 	orr.w	r1, r3, r2
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	687a      	ldr	r2, [r7, #4]
 800ab90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800ab94:	e005      	b.n	800aba2 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	687a      	ldr	r2, [r7, #4]
 800ab9a:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800ab9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800aba2:	2300      	movs	r3, #0
}
 800aba4:	4618      	mov	r0, r3
 800aba6:	3714      	adds	r7, #20
 800aba8:	46bd      	mov	sp, r7
 800abaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abae:	4770      	bx	lr
 800abb0:	cff00000 	.word	0xcff00000

0800abb4 <atoi>:
 800abb4:	220a      	movs	r2, #10
 800abb6:	2100      	movs	r1, #0
 800abb8:	f000 b902 	b.w	800adc0 <strtol>

0800abbc <__errno>:
 800abbc:	4b01      	ldr	r3, [pc, #4]	; (800abc4 <__errno+0x8>)
 800abbe:	6818      	ldr	r0, [r3, #0]
 800abc0:	4770      	bx	lr
 800abc2:	bf00      	nop
 800abc4:	20000034 	.word	0x20000034

0800abc8 <__libc_init_array>:
 800abc8:	b570      	push	{r4, r5, r6, lr}
 800abca:	4d0d      	ldr	r5, [pc, #52]	; (800ac00 <__libc_init_array+0x38>)
 800abcc:	4c0d      	ldr	r4, [pc, #52]	; (800ac04 <__libc_init_array+0x3c>)
 800abce:	1b64      	subs	r4, r4, r5
 800abd0:	10a4      	asrs	r4, r4, #2
 800abd2:	2600      	movs	r6, #0
 800abd4:	42a6      	cmp	r6, r4
 800abd6:	d109      	bne.n	800abec <__libc_init_array+0x24>
 800abd8:	4d0b      	ldr	r5, [pc, #44]	; (800ac08 <__libc_init_array+0x40>)
 800abda:	4c0c      	ldr	r4, [pc, #48]	; (800ac0c <__libc_init_array+0x44>)
 800abdc:	f001 fa1e 	bl	800c01c <_init>
 800abe0:	1b64      	subs	r4, r4, r5
 800abe2:	10a4      	asrs	r4, r4, #2
 800abe4:	2600      	movs	r6, #0
 800abe6:	42a6      	cmp	r6, r4
 800abe8:	d105      	bne.n	800abf6 <__libc_init_array+0x2e>
 800abea:	bd70      	pop	{r4, r5, r6, pc}
 800abec:	f855 3b04 	ldr.w	r3, [r5], #4
 800abf0:	4798      	blx	r3
 800abf2:	3601      	adds	r6, #1
 800abf4:	e7ee      	b.n	800abd4 <__libc_init_array+0xc>
 800abf6:	f855 3b04 	ldr.w	r3, [r5], #4
 800abfa:	4798      	blx	r3
 800abfc:	3601      	adds	r6, #1
 800abfe:	e7f2      	b.n	800abe6 <__libc_init_array+0x1e>
 800ac00:	0800db0c 	.word	0x0800db0c
 800ac04:	0800db0c 	.word	0x0800db0c
 800ac08:	0800db0c 	.word	0x0800db0c
 800ac0c:	0800db10 	.word	0x0800db10

0800ac10 <memcpy>:
 800ac10:	440a      	add	r2, r1
 800ac12:	4291      	cmp	r1, r2
 800ac14:	f100 33ff 	add.w	r3, r0, #4294967295
 800ac18:	d100      	bne.n	800ac1c <memcpy+0xc>
 800ac1a:	4770      	bx	lr
 800ac1c:	b510      	push	{r4, lr}
 800ac1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac22:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac26:	4291      	cmp	r1, r2
 800ac28:	d1f9      	bne.n	800ac1e <memcpy+0xe>
 800ac2a:	bd10      	pop	{r4, pc}

0800ac2c <memset>:
 800ac2c:	4402      	add	r2, r0
 800ac2e:	4603      	mov	r3, r0
 800ac30:	4293      	cmp	r3, r2
 800ac32:	d100      	bne.n	800ac36 <memset+0xa>
 800ac34:	4770      	bx	lr
 800ac36:	f803 1b01 	strb.w	r1, [r3], #1
 800ac3a:	e7f9      	b.n	800ac30 <memset+0x4>

0800ac3c <iprintf>:
 800ac3c:	b40f      	push	{r0, r1, r2, r3}
 800ac3e:	4b0a      	ldr	r3, [pc, #40]	; (800ac68 <iprintf+0x2c>)
 800ac40:	b513      	push	{r0, r1, r4, lr}
 800ac42:	681c      	ldr	r4, [r3, #0]
 800ac44:	b124      	cbz	r4, 800ac50 <iprintf+0x14>
 800ac46:	69a3      	ldr	r3, [r4, #24]
 800ac48:	b913      	cbnz	r3, 800ac50 <iprintf+0x14>
 800ac4a:	4620      	mov	r0, r4
 800ac4c:	f000 fa9c 	bl	800b188 <__sinit>
 800ac50:	ab05      	add	r3, sp, #20
 800ac52:	9a04      	ldr	r2, [sp, #16]
 800ac54:	68a1      	ldr	r1, [r4, #8]
 800ac56:	9301      	str	r3, [sp, #4]
 800ac58:	4620      	mov	r0, r4
 800ac5a:	f000 fe01 	bl	800b860 <_vfiprintf_r>
 800ac5e:	b002      	add	sp, #8
 800ac60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac64:	b004      	add	sp, #16
 800ac66:	4770      	bx	lr
 800ac68:	20000034 	.word	0x20000034

0800ac6c <siprintf>:
 800ac6c:	b40e      	push	{r1, r2, r3}
 800ac6e:	b500      	push	{lr}
 800ac70:	b09c      	sub	sp, #112	; 0x70
 800ac72:	ab1d      	add	r3, sp, #116	; 0x74
 800ac74:	9002      	str	r0, [sp, #8]
 800ac76:	9006      	str	r0, [sp, #24]
 800ac78:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ac7c:	4809      	ldr	r0, [pc, #36]	; (800aca4 <siprintf+0x38>)
 800ac7e:	9107      	str	r1, [sp, #28]
 800ac80:	9104      	str	r1, [sp, #16]
 800ac82:	4909      	ldr	r1, [pc, #36]	; (800aca8 <siprintf+0x3c>)
 800ac84:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac88:	9105      	str	r1, [sp, #20]
 800ac8a:	6800      	ldr	r0, [r0, #0]
 800ac8c:	9301      	str	r3, [sp, #4]
 800ac8e:	a902      	add	r1, sp, #8
 800ac90:	f000 fcbc 	bl	800b60c <_svfiprintf_r>
 800ac94:	9b02      	ldr	r3, [sp, #8]
 800ac96:	2200      	movs	r2, #0
 800ac98:	701a      	strb	r2, [r3, #0]
 800ac9a:	b01c      	add	sp, #112	; 0x70
 800ac9c:	f85d eb04 	ldr.w	lr, [sp], #4
 800aca0:	b003      	add	sp, #12
 800aca2:	4770      	bx	lr
 800aca4:	20000034 	.word	0x20000034
 800aca8:	ffff0208 	.word	0xffff0208

0800acac <strcpy>:
 800acac:	4603      	mov	r3, r0
 800acae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800acb2:	f803 2b01 	strb.w	r2, [r3], #1
 800acb6:	2a00      	cmp	r2, #0
 800acb8:	d1f9      	bne.n	800acae <strcpy+0x2>
 800acba:	4770      	bx	lr

0800acbc <_strtol_l.constprop.0>:
 800acbc:	2b01      	cmp	r3, #1
 800acbe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800acc2:	d001      	beq.n	800acc8 <_strtol_l.constprop.0+0xc>
 800acc4:	2b24      	cmp	r3, #36	; 0x24
 800acc6:	d906      	bls.n	800acd6 <_strtol_l.constprop.0+0x1a>
 800acc8:	f7ff ff78 	bl	800abbc <__errno>
 800accc:	2316      	movs	r3, #22
 800acce:	6003      	str	r3, [r0, #0]
 800acd0:	2000      	movs	r0, #0
 800acd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acd6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800adbc <_strtol_l.constprop.0+0x100>
 800acda:	460d      	mov	r5, r1
 800acdc:	462e      	mov	r6, r5
 800acde:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ace2:	f814 700c 	ldrb.w	r7, [r4, ip]
 800ace6:	f017 0708 	ands.w	r7, r7, #8
 800acea:	d1f7      	bne.n	800acdc <_strtol_l.constprop.0+0x20>
 800acec:	2c2d      	cmp	r4, #45	; 0x2d
 800acee:	d132      	bne.n	800ad56 <_strtol_l.constprop.0+0x9a>
 800acf0:	782c      	ldrb	r4, [r5, #0]
 800acf2:	2701      	movs	r7, #1
 800acf4:	1cb5      	adds	r5, r6, #2
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d05b      	beq.n	800adb2 <_strtol_l.constprop.0+0xf6>
 800acfa:	2b10      	cmp	r3, #16
 800acfc:	d109      	bne.n	800ad12 <_strtol_l.constprop.0+0x56>
 800acfe:	2c30      	cmp	r4, #48	; 0x30
 800ad00:	d107      	bne.n	800ad12 <_strtol_l.constprop.0+0x56>
 800ad02:	782c      	ldrb	r4, [r5, #0]
 800ad04:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ad08:	2c58      	cmp	r4, #88	; 0x58
 800ad0a:	d14d      	bne.n	800ada8 <_strtol_l.constprop.0+0xec>
 800ad0c:	786c      	ldrb	r4, [r5, #1]
 800ad0e:	2310      	movs	r3, #16
 800ad10:	3502      	adds	r5, #2
 800ad12:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800ad16:	f108 38ff 	add.w	r8, r8, #4294967295
 800ad1a:	f04f 0c00 	mov.w	ip, #0
 800ad1e:	fbb8 f9f3 	udiv	r9, r8, r3
 800ad22:	4666      	mov	r6, ip
 800ad24:	fb03 8a19 	mls	sl, r3, r9, r8
 800ad28:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800ad2c:	f1be 0f09 	cmp.w	lr, #9
 800ad30:	d816      	bhi.n	800ad60 <_strtol_l.constprop.0+0xa4>
 800ad32:	4674      	mov	r4, lr
 800ad34:	42a3      	cmp	r3, r4
 800ad36:	dd24      	ble.n	800ad82 <_strtol_l.constprop.0+0xc6>
 800ad38:	f1bc 0f00 	cmp.w	ip, #0
 800ad3c:	db1e      	blt.n	800ad7c <_strtol_l.constprop.0+0xc0>
 800ad3e:	45b1      	cmp	r9, r6
 800ad40:	d31c      	bcc.n	800ad7c <_strtol_l.constprop.0+0xc0>
 800ad42:	d101      	bne.n	800ad48 <_strtol_l.constprop.0+0x8c>
 800ad44:	45a2      	cmp	sl, r4
 800ad46:	db19      	blt.n	800ad7c <_strtol_l.constprop.0+0xc0>
 800ad48:	fb06 4603 	mla	r6, r6, r3, r4
 800ad4c:	f04f 0c01 	mov.w	ip, #1
 800ad50:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ad54:	e7e8      	b.n	800ad28 <_strtol_l.constprop.0+0x6c>
 800ad56:	2c2b      	cmp	r4, #43	; 0x2b
 800ad58:	bf04      	itt	eq
 800ad5a:	782c      	ldrbeq	r4, [r5, #0]
 800ad5c:	1cb5      	addeq	r5, r6, #2
 800ad5e:	e7ca      	b.n	800acf6 <_strtol_l.constprop.0+0x3a>
 800ad60:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800ad64:	f1be 0f19 	cmp.w	lr, #25
 800ad68:	d801      	bhi.n	800ad6e <_strtol_l.constprop.0+0xb2>
 800ad6a:	3c37      	subs	r4, #55	; 0x37
 800ad6c:	e7e2      	b.n	800ad34 <_strtol_l.constprop.0+0x78>
 800ad6e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800ad72:	f1be 0f19 	cmp.w	lr, #25
 800ad76:	d804      	bhi.n	800ad82 <_strtol_l.constprop.0+0xc6>
 800ad78:	3c57      	subs	r4, #87	; 0x57
 800ad7a:	e7db      	b.n	800ad34 <_strtol_l.constprop.0+0x78>
 800ad7c:	f04f 3cff 	mov.w	ip, #4294967295
 800ad80:	e7e6      	b.n	800ad50 <_strtol_l.constprop.0+0x94>
 800ad82:	f1bc 0f00 	cmp.w	ip, #0
 800ad86:	da05      	bge.n	800ad94 <_strtol_l.constprop.0+0xd8>
 800ad88:	2322      	movs	r3, #34	; 0x22
 800ad8a:	6003      	str	r3, [r0, #0]
 800ad8c:	4646      	mov	r6, r8
 800ad8e:	b942      	cbnz	r2, 800ada2 <_strtol_l.constprop.0+0xe6>
 800ad90:	4630      	mov	r0, r6
 800ad92:	e79e      	b.n	800acd2 <_strtol_l.constprop.0+0x16>
 800ad94:	b107      	cbz	r7, 800ad98 <_strtol_l.constprop.0+0xdc>
 800ad96:	4276      	negs	r6, r6
 800ad98:	2a00      	cmp	r2, #0
 800ad9a:	d0f9      	beq.n	800ad90 <_strtol_l.constprop.0+0xd4>
 800ad9c:	f1bc 0f00 	cmp.w	ip, #0
 800ada0:	d000      	beq.n	800ada4 <_strtol_l.constprop.0+0xe8>
 800ada2:	1e69      	subs	r1, r5, #1
 800ada4:	6011      	str	r1, [r2, #0]
 800ada6:	e7f3      	b.n	800ad90 <_strtol_l.constprop.0+0xd4>
 800ada8:	2430      	movs	r4, #48	; 0x30
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d1b1      	bne.n	800ad12 <_strtol_l.constprop.0+0x56>
 800adae:	2308      	movs	r3, #8
 800adb0:	e7af      	b.n	800ad12 <_strtol_l.constprop.0+0x56>
 800adb2:	2c30      	cmp	r4, #48	; 0x30
 800adb4:	d0a5      	beq.n	800ad02 <_strtol_l.constprop.0+0x46>
 800adb6:	230a      	movs	r3, #10
 800adb8:	e7ab      	b.n	800ad12 <_strtol_l.constprop.0+0x56>
 800adba:	bf00      	nop
 800adbc:	0800d96d 	.word	0x0800d96d

0800adc0 <strtol>:
 800adc0:	4613      	mov	r3, r2
 800adc2:	460a      	mov	r2, r1
 800adc4:	4601      	mov	r1, r0
 800adc6:	4802      	ldr	r0, [pc, #8]	; (800add0 <strtol+0x10>)
 800adc8:	6800      	ldr	r0, [r0, #0]
 800adca:	f7ff bf77 	b.w	800acbc <_strtol_l.constprop.0>
 800adce:	bf00      	nop
 800add0:	20000034 	.word	0x20000034

0800add4 <__swbuf_r>:
 800add4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800add6:	460e      	mov	r6, r1
 800add8:	4614      	mov	r4, r2
 800adda:	4605      	mov	r5, r0
 800addc:	b118      	cbz	r0, 800ade6 <__swbuf_r+0x12>
 800adde:	6983      	ldr	r3, [r0, #24]
 800ade0:	b90b      	cbnz	r3, 800ade6 <__swbuf_r+0x12>
 800ade2:	f000 f9d1 	bl	800b188 <__sinit>
 800ade6:	4b21      	ldr	r3, [pc, #132]	; (800ae6c <__swbuf_r+0x98>)
 800ade8:	429c      	cmp	r4, r3
 800adea:	d12b      	bne.n	800ae44 <__swbuf_r+0x70>
 800adec:	686c      	ldr	r4, [r5, #4]
 800adee:	69a3      	ldr	r3, [r4, #24]
 800adf0:	60a3      	str	r3, [r4, #8]
 800adf2:	89a3      	ldrh	r3, [r4, #12]
 800adf4:	071a      	lsls	r2, r3, #28
 800adf6:	d52f      	bpl.n	800ae58 <__swbuf_r+0x84>
 800adf8:	6923      	ldr	r3, [r4, #16]
 800adfa:	b36b      	cbz	r3, 800ae58 <__swbuf_r+0x84>
 800adfc:	6923      	ldr	r3, [r4, #16]
 800adfe:	6820      	ldr	r0, [r4, #0]
 800ae00:	1ac0      	subs	r0, r0, r3
 800ae02:	6963      	ldr	r3, [r4, #20]
 800ae04:	b2f6      	uxtb	r6, r6
 800ae06:	4283      	cmp	r3, r0
 800ae08:	4637      	mov	r7, r6
 800ae0a:	dc04      	bgt.n	800ae16 <__swbuf_r+0x42>
 800ae0c:	4621      	mov	r1, r4
 800ae0e:	4628      	mov	r0, r5
 800ae10:	f000 f926 	bl	800b060 <_fflush_r>
 800ae14:	bb30      	cbnz	r0, 800ae64 <__swbuf_r+0x90>
 800ae16:	68a3      	ldr	r3, [r4, #8]
 800ae18:	3b01      	subs	r3, #1
 800ae1a:	60a3      	str	r3, [r4, #8]
 800ae1c:	6823      	ldr	r3, [r4, #0]
 800ae1e:	1c5a      	adds	r2, r3, #1
 800ae20:	6022      	str	r2, [r4, #0]
 800ae22:	701e      	strb	r6, [r3, #0]
 800ae24:	6963      	ldr	r3, [r4, #20]
 800ae26:	3001      	adds	r0, #1
 800ae28:	4283      	cmp	r3, r0
 800ae2a:	d004      	beq.n	800ae36 <__swbuf_r+0x62>
 800ae2c:	89a3      	ldrh	r3, [r4, #12]
 800ae2e:	07db      	lsls	r3, r3, #31
 800ae30:	d506      	bpl.n	800ae40 <__swbuf_r+0x6c>
 800ae32:	2e0a      	cmp	r6, #10
 800ae34:	d104      	bne.n	800ae40 <__swbuf_r+0x6c>
 800ae36:	4621      	mov	r1, r4
 800ae38:	4628      	mov	r0, r5
 800ae3a:	f000 f911 	bl	800b060 <_fflush_r>
 800ae3e:	b988      	cbnz	r0, 800ae64 <__swbuf_r+0x90>
 800ae40:	4638      	mov	r0, r7
 800ae42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae44:	4b0a      	ldr	r3, [pc, #40]	; (800ae70 <__swbuf_r+0x9c>)
 800ae46:	429c      	cmp	r4, r3
 800ae48:	d101      	bne.n	800ae4e <__swbuf_r+0x7a>
 800ae4a:	68ac      	ldr	r4, [r5, #8]
 800ae4c:	e7cf      	b.n	800adee <__swbuf_r+0x1a>
 800ae4e:	4b09      	ldr	r3, [pc, #36]	; (800ae74 <__swbuf_r+0xa0>)
 800ae50:	429c      	cmp	r4, r3
 800ae52:	bf08      	it	eq
 800ae54:	68ec      	ldreq	r4, [r5, #12]
 800ae56:	e7ca      	b.n	800adee <__swbuf_r+0x1a>
 800ae58:	4621      	mov	r1, r4
 800ae5a:	4628      	mov	r0, r5
 800ae5c:	f000 f80c 	bl	800ae78 <__swsetup_r>
 800ae60:	2800      	cmp	r0, #0
 800ae62:	d0cb      	beq.n	800adfc <__swbuf_r+0x28>
 800ae64:	f04f 37ff 	mov.w	r7, #4294967295
 800ae68:	e7ea      	b.n	800ae40 <__swbuf_r+0x6c>
 800ae6a:	bf00      	nop
 800ae6c:	0800da90 	.word	0x0800da90
 800ae70:	0800dab0 	.word	0x0800dab0
 800ae74:	0800da70 	.word	0x0800da70

0800ae78 <__swsetup_r>:
 800ae78:	4b32      	ldr	r3, [pc, #200]	; (800af44 <__swsetup_r+0xcc>)
 800ae7a:	b570      	push	{r4, r5, r6, lr}
 800ae7c:	681d      	ldr	r5, [r3, #0]
 800ae7e:	4606      	mov	r6, r0
 800ae80:	460c      	mov	r4, r1
 800ae82:	b125      	cbz	r5, 800ae8e <__swsetup_r+0x16>
 800ae84:	69ab      	ldr	r3, [r5, #24]
 800ae86:	b913      	cbnz	r3, 800ae8e <__swsetup_r+0x16>
 800ae88:	4628      	mov	r0, r5
 800ae8a:	f000 f97d 	bl	800b188 <__sinit>
 800ae8e:	4b2e      	ldr	r3, [pc, #184]	; (800af48 <__swsetup_r+0xd0>)
 800ae90:	429c      	cmp	r4, r3
 800ae92:	d10f      	bne.n	800aeb4 <__swsetup_r+0x3c>
 800ae94:	686c      	ldr	r4, [r5, #4]
 800ae96:	89a3      	ldrh	r3, [r4, #12]
 800ae98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ae9c:	0719      	lsls	r1, r3, #28
 800ae9e:	d42c      	bmi.n	800aefa <__swsetup_r+0x82>
 800aea0:	06dd      	lsls	r5, r3, #27
 800aea2:	d411      	bmi.n	800aec8 <__swsetup_r+0x50>
 800aea4:	2309      	movs	r3, #9
 800aea6:	6033      	str	r3, [r6, #0]
 800aea8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800aeac:	81a3      	strh	r3, [r4, #12]
 800aeae:	f04f 30ff 	mov.w	r0, #4294967295
 800aeb2:	e03e      	b.n	800af32 <__swsetup_r+0xba>
 800aeb4:	4b25      	ldr	r3, [pc, #148]	; (800af4c <__swsetup_r+0xd4>)
 800aeb6:	429c      	cmp	r4, r3
 800aeb8:	d101      	bne.n	800aebe <__swsetup_r+0x46>
 800aeba:	68ac      	ldr	r4, [r5, #8]
 800aebc:	e7eb      	b.n	800ae96 <__swsetup_r+0x1e>
 800aebe:	4b24      	ldr	r3, [pc, #144]	; (800af50 <__swsetup_r+0xd8>)
 800aec0:	429c      	cmp	r4, r3
 800aec2:	bf08      	it	eq
 800aec4:	68ec      	ldreq	r4, [r5, #12]
 800aec6:	e7e6      	b.n	800ae96 <__swsetup_r+0x1e>
 800aec8:	0758      	lsls	r0, r3, #29
 800aeca:	d512      	bpl.n	800aef2 <__swsetup_r+0x7a>
 800aecc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aece:	b141      	cbz	r1, 800aee2 <__swsetup_r+0x6a>
 800aed0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aed4:	4299      	cmp	r1, r3
 800aed6:	d002      	beq.n	800aede <__swsetup_r+0x66>
 800aed8:	4630      	mov	r0, r6
 800aeda:	f000 fa5b 	bl	800b394 <_free_r>
 800aede:	2300      	movs	r3, #0
 800aee0:	6363      	str	r3, [r4, #52]	; 0x34
 800aee2:	89a3      	ldrh	r3, [r4, #12]
 800aee4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800aee8:	81a3      	strh	r3, [r4, #12]
 800aeea:	2300      	movs	r3, #0
 800aeec:	6063      	str	r3, [r4, #4]
 800aeee:	6923      	ldr	r3, [r4, #16]
 800aef0:	6023      	str	r3, [r4, #0]
 800aef2:	89a3      	ldrh	r3, [r4, #12]
 800aef4:	f043 0308 	orr.w	r3, r3, #8
 800aef8:	81a3      	strh	r3, [r4, #12]
 800aefa:	6923      	ldr	r3, [r4, #16]
 800aefc:	b94b      	cbnz	r3, 800af12 <__swsetup_r+0x9a>
 800aefe:	89a3      	ldrh	r3, [r4, #12]
 800af00:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800af04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af08:	d003      	beq.n	800af12 <__swsetup_r+0x9a>
 800af0a:	4621      	mov	r1, r4
 800af0c:	4630      	mov	r0, r6
 800af0e:	f000 fa01 	bl	800b314 <__smakebuf_r>
 800af12:	89a0      	ldrh	r0, [r4, #12]
 800af14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800af18:	f010 0301 	ands.w	r3, r0, #1
 800af1c:	d00a      	beq.n	800af34 <__swsetup_r+0xbc>
 800af1e:	2300      	movs	r3, #0
 800af20:	60a3      	str	r3, [r4, #8]
 800af22:	6963      	ldr	r3, [r4, #20]
 800af24:	425b      	negs	r3, r3
 800af26:	61a3      	str	r3, [r4, #24]
 800af28:	6923      	ldr	r3, [r4, #16]
 800af2a:	b943      	cbnz	r3, 800af3e <__swsetup_r+0xc6>
 800af2c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800af30:	d1ba      	bne.n	800aea8 <__swsetup_r+0x30>
 800af32:	bd70      	pop	{r4, r5, r6, pc}
 800af34:	0781      	lsls	r1, r0, #30
 800af36:	bf58      	it	pl
 800af38:	6963      	ldrpl	r3, [r4, #20]
 800af3a:	60a3      	str	r3, [r4, #8]
 800af3c:	e7f4      	b.n	800af28 <__swsetup_r+0xb0>
 800af3e:	2000      	movs	r0, #0
 800af40:	e7f7      	b.n	800af32 <__swsetup_r+0xba>
 800af42:	bf00      	nop
 800af44:	20000034 	.word	0x20000034
 800af48:	0800da90 	.word	0x0800da90
 800af4c:	0800dab0 	.word	0x0800dab0
 800af50:	0800da70 	.word	0x0800da70

0800af54 <__sflush_r>:
 800af54:	898a      	ldrh	r2, [r1, #12]
 800af56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af5a:	4605      	mov	r5, r0
 800af5c:	0710      	lsls	r0, r2, #28
 800af5e:	460c      	mov	r4, r1
 800af60:	d458      	bmi.n	800b014 <__sflush_r+0xc0>
 800af62:	684b      	ldr	r3, [r1, #4]
 800af64:	2b00      	cmp	r3, #0
 800af66:	dc05      	bgt.n	800af74 <__sflush_r+0x20>
 800af68:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	dc02      	bgt.n	800af74 <__sflush_r+0x20>
 800af6e:	2000      	movs	r0, #0
 800af70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800af76:	2e00      	cmp	r6, #0
 800af78:	d0f9      	beq.n	800af6e <__sflush_r+0x1a>
 800af7a:	2300      	movs	r3, #0
 800af7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800af80:	682f      	ldr	r7, [r5, #0]
 800af82:	602b      	str	r3, [r5, #0]
 800af84:	d032      	beq.n	800afec <__sflush_r+0x98>
 800af86:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800af88:	89a3      	ldrh	r3, [r4, #12]
 800af8a:	075a      	lsls	r2, r3, #29
 800af8c:	d505      	bpl.n	800af9a <__sflush_r+0x46>
 800af8e:	6863      	ldr	r3, [r4, #4]
 800af90:	1ac0      	subs	r0, r0, r3
 800af92:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800af94:	b10b      	cbz	r3, 800af9a <__sflush_r+0x46>
 800af96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800af98:	1ac0      	subs	r0, r0, r3
 800af9a:	2300      	movs	r3, #0
 800af9c:	4602      	mov	r2, r0
 800af9e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800afa0:	6a21      	ldr	r1, [r4, #32]
 800afa2:	4628      	mov	r0, r5
 800afa4:	47b0      	blx	r6
 800afa6:	1c43      	adds	r3, r0, #1
 800afa8:	89a3      	ldrh	r3, [r4, #12]
 800afaa:	d106      	bne.n	800afba <__sflush_r+0x66>
 800afac:	6829      	ldr	r1, [r5, #0]
 800afae:	291d      	cmp	r1, #29
 800afb0:	d82c      	bhi.n	800b00c <__sflush_r+0xb8>
 800afb2:	4a2a      	ldr	r2, [pc, #168]	; (800b05c <__sflush_r+0x108>)
 800afb4:	40ca      	lsrs	r2, r1
 800afb6:	07d6      	lsls	r6, r2, #31
 800afb8:	d528      	bpl.n	800b00c <__sflush_r+0xb8>
 800afba:	2200      	movs	r2, #0
 800afbc:	6062      	str	r2, [r4, #4]
 800afbe:	04d9      	lsls	r1, r3, #19
 800afc0:	6922      	ldr	r2, [r4, #16]
 800afc2:	6022      	str	r2, [r4, #0]
 800afc4:	d504      	bpl.n	800afd0 <__sflush_r+0x7c>
 800afc6:	1c42      	adds	r2, r0, #1
 800afc8:	d101      	bne.n	800afce <__sflush_r+0x7a>
 800afca:	682b      	ldr	r3, [r5, #0]
 800afcc:	b903      	cbnz	r3, 800afd0 <__sflush_r+0x7c>
 800afce:	6560      	str	r0, [r4, #84]	; 0x54
 800afd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800afd2:	602f      	str	r7, [r5, #0]
 800afd4:	2900      	cmp	r1, #0
 800afd6:	d0ca      	beq.n	800af6e <__sflush_r+0x1a>
 800afd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800afdc:	4299      	cmp	r1, r3
 800afde:	d002      	beq.n	800afe6 <__sflush_r+0x92>
 800afe0:	4628      	mov	r0, r5
 800afe2:	f000 f9d7 	bl	800b394 <_free_r>
 800afe6:	2000      	movs	r0, #0
 800afe8:	6360      	str	r0, [r4, #52]	; 0x34
 800afea:	e7c1      	b.n	800af70 <__sflush_r+0x1c>
 800afec:	6a21      	ldr	r1, [r4, #32]
 800afee:	2301      	movs	r3, #1
 800aff0:	4628      	mov	r0, r5
 800aff2:	47b0      	blx	r6
 800aff4:	1c41      	adds	r1, r0, #1
 800aff6:	d1c7      	bne.n	800af88 <__sflush_r+0x34>
 800aff8:	682b      	ldr	r3, [r5, #0]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d0c4      	beq.n	800af88 <__sflush_r+0x34>
 800affe:	2b1d      	cmp	r3, #29
 800b000:	d001      	beq.n	800b006 <__sflush_r+0xb2>
 800b002:	2b16      	cmp	r3, #22
 800b004:	d101      	bne.n	800b00a <__sflush_r+0xb6>
 800b006:	602f      	str	r7, [r5, #0]
 800b008:	e7b1      	b.n	800af6e <__sflush_r+0x1a>
 800b00a:	89a3      	ldrh	r3, [r4, #12]
 800b00c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b010:	81a3      	strh	r3, [r4, #12]
 800b012:	e7ad      	b.n	800af70 <__sflush_r+0x1c>
 800b014:	690f      	ldr	r7, [r1, #16]
 800b016:	2f00      	cmp	r7, #0
 800b018:	d0a9      	beq.n	800af6e <__sflush_r+0x1a>
 800b01a:	0793      	lsls	r3, r2, #30
 800b01c:	680e      	ldr	r6, [r1, #0]
 800b01e:	bf08      	it	eq
 800b020:	694b      	ldreq	r3, [r1, #20]
 800b022:	600f      	str	r7, [r1, #0]
 800b024:	bf18      	it	ne
 800b026:	2300      	movne	r3, #0
 800b028:	eba6 0807 	sub.w	r8, r6, r7
 800b02c:	608b      	str	r3, [r1, #8]
 800b02e:	f1b8 0f00 	cmp.w	r8, #0
 800b032:	dd9c      	ble.n	800af6e <__sflush_r+0x1a>
 800b034:	6a21      	ldr	r1, [r4, #32]
 800b036:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b038:	4643      	mov	r3, r8
 800b03a:	463a      	mov	r2, r7
 800b03c:	4628      	mov	r0, r5
 800b03e:	47b0      	blx	r6
 800b040:	2800      	cmp	r0, #0
 800b042:	dc06      	bgt.n	800b052 <__sflush_r+0xfe>
 800b044:	89a3      	ldrh	r3, [r4, #12]
 800b046:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b04a:	81a3      	strh	r3, [r4, #12]
 800b04c:	f04f 30ff 	mov.w	r0, #4294967295
 800b050:	e78e      	b.n	800af70 <__sflush_r+0x1c>
 800b052:	4407      	add	r7, r0
 800b054:	eba8 0800 	sub.w	r8, r8, r0
 800b058:	e7e9      	b.n	800b02e <__sflush_r+0xda>
 800b05a:	bf00      	nop
 800b05c:	20400001 	.word	0x20400001

0800b060 <_fflush_r>:
 800b060:	b538      	push	{r3, r4, r5, lr}
 800b062:	690b      	ldr	r3, [r1, #16]
 800b064:	4605      	mov	r5, r0
 800b066:	460c      	mov	r4, r1
 800b068:	b913      	cbnz	r3, 800b070 <_fflush_r+0x10>
 800b06a:	2500      	movs	r5, #0
 800b06c:	4628      	mov	r0, r5
 800b06e:	bd38      	pop	{r3, r4, r5, pc}
 800b070:	b118      	cbz	r0, 800b07a <_fflush_r+0x1a>
 800b072:	6983      	ldr	r3, [r0, #24]
 800b074:	b90b      	cbnz	r3, 800b07a <_fflush_r+0x1a>
 800b076:	f000 f887 	bl	800b188 <__sinit>
 800b07a:	4b14      	ldr	r3, [pc, #80]	; (800b0cc <_fflush_r+0x6c>)
 800b07c:	429c      	cmp	r4, r3
 800b07e:	d11b      	bne.n	800b0b8 <_fflush_r+0x58>
 800b080:	686c      	ldr	r4, [r5, #4]
 800b082:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d0ef      	beq.n	800b06a <_fflush_r+0xa>
 800b08a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b08c:	07d0      	lsls	r0, r2, #31
 800b08e:	d404      	bmi.n	800b09a <_fflush_r+0x3a>
 800b090:	0599      	lsls	r1, r3, #22
 800b092:	d402      	bmi.n	800b09a <_fflush_r+0x3a>
 800b094:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b096:	f000 f915 	bl	800b2c4 <__retarget_lock_acquire_recursive>
 800b09a:	4628      	mov	r0, r5
 800b09c:	4621      	mov	r1, r4
 800b09e:	f7ff ff59 	bl	800af54 <__sflush_r>
 800b0a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b0a4:	07da      	lsls	r2, r3, #31
 800b0a6:	4605      	mov	r5, r0
 800b0a8:	d4e0      	bmi.n	800b06c <_fflush_r+0xc>
 800b0aa:	89a3      	ldrh	r3, [r4, #12]
 800b0ac:	059b      	lsls	r3, r3, #22
 800b0ae:	d4dd      	bmi.n	800b06c <_fflush_r+0xc>
 800b0b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b0b2:	f000 f908 	bl	800b2c6 <__retarget_lock_release_recursive>
 800b0b6:	e7d9      	b.n	800b06c <_fflush_r+0xc>
 800b0b8:	4b05      	ldr	r3, [pc, #20]	; (800b0d0 <_fflush_r+0x70>)
 800b0ba:	429c      	cmp	r4, r3
 800b0bc:	d101      	bne.n	800b0c2 <_fflush_r+0x62>
 800b0be:	68ac      	ldr	r4, [r5, #8]
 800b0c0:	e7df      	b.n	800b082 <_fflush_r+0x22>
 800b0c2:	4b04      	ldr	r3, [pc, #16]	; (800b0d4 <_fflush_r+0x74>)
 800b0c4:	429c      	cmp	r4, r3
 800b0c6:	bf08      	it	eq
 800b0c8:	68ec      	ldreq	r4, [r5, #12]
 800b0ca:	e7da      	b.n	800b082 <_fflush_r+0x22>
 800b0cc:	0800da90 	.word	0x0800da90
 800b0d0:	0800dab0 	.word	0x0800dab0
 800b0d4:	0800da70 	.word	0x0800da70

0800b0d8 <std>:
 800b0d8:	2300      	movs	r3, #0
 800b0da:	b510      	push	{r4, lr}
 800b0dc:	4604      	mov	r4, r0
 800b0de:	e9c0 3300 	strd	r3, r3, [r0]
 800b0e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b0e6:	6083      	str	r3, [r0, #8]
 800b0e8:	8181      	strh	r1, [r0, #12]
 800b0ea:	6643      	str	r3, [r0, #100]	; 0x64
 800b0ec:	81c2      	strh	r2, [r0, #14]
 800b0ee:	6183      	str	r3, [r0, #24]
 800b0f0:	4619      	mov	r1, r3
 800b0f2:	2208      	movs	r2, #8
 800b0f4:	305c      	adds	r0, #92	; 0x5c
 800b0f6:	f7ff fd99 	bl	800ac2c <memset>
 800b0fa:	4b05      	ldr	r3, [pc, #20]	; (800b110 <std+0x38>)
 800b0fc:	6263      	str	r3, [r4, #36]	; 0x24
 800b0fe:	4b05      	ldr	r3, [pc, #20]	; (800b114 <std+0x3c>)
 800b100:	62a3      	str	r3, [r4, #40]	; 0x28
 800b102:	4b05      	ldr	r3, [pc, #20]	; (800b118 <std+0x40>)
 800b104:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b106:	4b05      	ldr	r3, [pc, #20]	; (800b11c <std+0x44>)
 800b108:	6224      	str	r4, [r4, #32]
 800b10a:	6323      	str	r3, [r4, #48]	; 0x30
 800b10c:	bd10      	pop	{r4, pc}
 800b10e:	bf00      	nop
 800b110:	0800be09 	.word	0x0800be09
 800b114:	0800be2b 	.word	0x0800be2b
 800b118:	0800be63 	.word	0x0800be63
 800b11c:	0800be87 	.word	0x0800be87

0800b120 <_cleanup_r>:
 800b120:	4901      	ldr	r1, [pc, #4]	; (800b128 <_cleanup_r+0x8>)
 800b122:	f000 b8af 	b.w	800b284 <_fwalk_reent>
 800b126:	bf00      	nop
 800b128:	0800b061 	.word	0x0800b061

0800b12c <__sfmoreglue>:
 800b12c:	b570      	push	{r4, r5, r6, lr}
 800b12e:	2268      	movs	r2, #104	; 0x68
 800b130:	1e4d      	subs	r5, r1, #1
 800b132:	4355      	muls	r5, r2
 800b134:	460e      	mov	r6, r1
 800b136:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b13a:	f000 f997 	bl	800b46c <_malloc_r>
 800b13e:	4604      	mov	r4, r0
 800b140:	b140      	cbz	r0, 800b154 <__sfmoreglue+0x28>
 800b142:	2100      	movs	r1, #0
 800b144:	e9c0 1600 	strd	r1, r6, [r0]
 800b148:	300c      	adds	r0, #12
 800b14a:	60a0      	str	r0, [r4, #8]
 800b14c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b150:	f7ff fd6c 	bl	800ac2c <memset>
 800b154:	4620      	mov	r0, r4
 800b156:	bd70      	pop	{r4, r5, r6, pc}

0800b158 <__sfp_lock_acquire>:
 800b158:	4801      	ldr	r0, [pc, #4]	; (800b160 <__sfp_lock_acquire+0x8>)
 800b15a:	f000 b8b3 	b.w	800b2c4 <__retarget_lock_acquire_recursive>
 800b15e:	bf00      	nop
 800b160:	200077c5 	.word	0x200077c5

0800b164 <__sfp_lock_release>:
 800b164:	4801      	ldr	r0, [pc, #4]	; (800b16c <__sfp_lock_release+0x8>)
 800b166:	f000 b8ae 	b.w	800b2c6 <__retarget_lock_release_recursive>
 800b16a:	bf00      	nop
 800b16c:	200077c5 	.word	0x200077c5

0800b170 <__sinit_lock_acquire>:
 800b170:	4801      	ldr	r0, [pc, #4]	; (800b178 <__sinit_lock_acquire+0x8>)
 800b172:	f000 b8a7 	b.w	800b2c4 <__retarget_lock_acquire_recursive>
 800b176:	bf00      	nop
 800b178:	200077c6 	.word	0x200077c6

0800b17c <__sinit_lock_release>:
 800b17c:	4801      	ldr	r0, [pc, #4]	; (800b184 <__sinit_lock_release+0x8>)
 800b17e:	f000 b8a2 	b.w	800b2c6 <__retarget_lock_release_recursive>
 800b182:	bf00      	nop
 800b184:	200077c6 	.word	0x200077c6

0800b188 <__sinit>:
 800b188:	b510      	push	{r4, lr}
 800b18a:	4604      	mov	r4, r0
 800b18c:	f7ff fff0 	bl	800b170 <__sinit_lock_acquire>
 800b190:	69a3      	ldr	r3, [r4, #24]
 800b192:	b11b      	cbz	r3, 800b19c <__sinit+0x14>
 800b194:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b198:	f7ff bff0 	b.w	800b17c <__sinit_lock_release>
 800b19c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b1a0:	6523      	str	r3, [r4, #80]	; 0x50
 800b1a2:	4b13      	ldr	r3, [pc, #76]	; (800b1f0 <__sinit+0x68>)
 800b1a4:	4a13      	ldr	r2, [pc, #76]	; (800b1f4 <__sinit+0x6c>)
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	62a2      	str	r2, [r4, #40]	; 0x28
 800b1aa:	42a3      	cmp	r3, r4
 800b1ac:	bf04      	itt	eq
 800b1ae:	2301      	moveq	r3, #1
 800b1b0:	61a3      	streq	r3, [r4, #24]
 800b1b2:	4620      	mov	r0, r4
 800b1b4:	f000 f820 	bl	800b1f8 <__sfp>
 800b1b8:	6060      	str	r0, [r4, #4]
 800b1ba:	4620      	mov	r0, r4
 800b1bc:	f000 f81c 	bl	800b1f8 <__sfp>
 800b1c0:	60a0      	str	r0, [r4, #8]
 800b1c2:	4620      	mov	r0, r4
 800b1c4:	f000 f818 	bl	800b1f8 <__sfp>
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	60e0      	str	r0, [r4, #12]
 800b1cc:	2104      	movs	r1, #4
 800b1ce:	6860      	ldr	r0, [r4, #4]
 800b1d0:	f7ff ff82 	bl	800b0d8 <std>
 800b1d4:	68a0      	ldr	r0, [r4, #8]
 800b1d6:	2201      	movs	r2, #1
 800b1d8:	2109      	movs	r1, #9
 800b1da:	f7ff ff7d 	bl	800b0d8 <std>
 800b1de:	68e0      	ldr	r0, [r4, #12]
 800b1e0:	2202      	movs	r2, #2
 800b1e2:	2112      	movs	r1, #18
 800b1e4:	f7ff ff78 	bl	800b0d8 <std>
 800b1e8:	2301      	movs	r3, #1
 800b1ea:	61a3      	str	r3, [r4, #24]
 800b1ec:	e7d2      	b.n	800b194 <__sinit+0xc>
 800b1ee:	bf00      	nop
 800b1f0:	0800d968 	.word	0x0800d968
 800b1f4:	0800b121 	.word	0x0800b121

0800b1f8 <__sfp>:
 800b1f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1fa:	4607      	mov	r7, r0
 800b1fc:	f7ff ffac 	bl	800b158 <__sfp_lock_acquire>
 800b200:	4b1e      	ldr	r3, [pc, #120]	; (800b27c <__sfp+0x84>)
 800b202:	681e      	ldr	r6, [r3, #0]
 800b204:	69b3      	ldr	r3, [r6, #24]
 800b206:	b913      	cbnz	r3, 800b20e <__sfp+0x16>
 800b208:	4630      	mov	r0, r6
 800b20a:	f7ff ffbd 	bl	800b188 <__sinit>
 800b20e:	3648      	adds	r6, #72	; 0x48
 800b210:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b214:	3b01      	subs	r3, #1
 800b216:	d503      	bpl.n	800b220 <__sfp+0x28>
 800b218:	6833      	ldr	r3, [r6, #0]
 800b21a:	b30b      	cbz	r3, 800b260 <__sfp+0x68>
 800b21c:	6836      	ldr	r6, [r6, #0]
 800b21e:	e7f7      	b.n	800b210 <__sfp+0x18>
 800b220:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b224:	b9d5      	cbnz	r5, 800b25c <__sfp+0x64>
 800b226:	4b16      	ldr	r3, [pc, #88]	; (800b280 <__sfp+0x88>)
 800b228:	60e3      	str	r3, [r4, #12]
 800b22a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b22e:	6665      	str	r5, [r4, #100]	; 0x64
 800b230:	f000 f847 	bl	800b2c2 <__retarget_lock_init_recursive>
 800b234:	f7ff ff96 	bl	800b164 <__sfp_lock_release>
 800b238:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b23c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b240:	6025      	str	r5, [r4, #0]
 800b242:	61a5      	str	r5, [r4, #24]
 800b244:	2208      	movs	r2, #8
 800b246:	4629      	mov	r1, r5
 800b248:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b24c:	f7ff fcee 	bl	800ac2c <memset>
 800b250:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b254:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b258:	4620      	mov	r0, r4
 800b25a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b25c:	3468      	adds	r4, #104	; 0x68
 800b25e:	e7d9      	b.n	800b214 <__sfp+0x1c>
 800b260:	2104      	movs	r1, #4
 800b262:	4638      	mov	r0, r7
 800b264:	f7ff ff62 	bl	800b12c <__sfmoreglue>
 800b268:	4604      	mov	r4, r0
 800b26a:	6030      	str	r0, [r6, #0]
 800b26c:	2800      	cmp	r0, #0
 800b26e:	d1d5      	bne.n	800b21c <__sfp+0x24>
 800b270:	f7ff ff78 	bl	800b164 <__sfp_lock_release>
 800b274:	230c      	movs	r3, #12
 800b276:	603b      	str	r3, [r7, #0]
 800b278:	e7ee      	b.n	800b258 <__sfp+0x60>
 800b27a:	bf00      	nop
 800b27c:	0800d968 	.word	0x0800d968
 800b280:	ffff0001 	.word	0xffff0001

0800b284 <_fwalk_reent>:
 800b284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b288:	4606      	mov	r6, r0
 800b28a:	4688      	mov	r8, r1
 800b28c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b290:	2700      	movs	r7, #0
 800b292:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b296:	f1b9 0901 	subs.w	r9, r9, #1
 800b29a:	d505      	bpl.n	800b2a8 <_fwalk_reent+0x24>
 800b29c:	6824      	ldr	r4, [r4, #0]
 800b29e:	2c00      	cmp	r4, #0
 800b2a0:	d1f7      	bne.n	800b292 <_fwalk_reent+0xe>
 800b2a2:	4638      	mov	r0, r7
 800b2a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2a8:	89ab      	ldrh	r3, [r5, #12]
 800b2aa:	2b01      	cmp	r3, #1
 800b2ac:	d907      	bls.n	800b2be <_fwalk_reent+0x3a>
 800b2ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b2b2:	3301      	adds	r3, #1
 800b2b4:	d003      	beq.n	800b2be <_fwalk_reent+0x3a>
 800b2b6:	4629      	mov	r1, r5
 800b2b8:	4630      	mov	r0, r6
 800b2ba:	47c0      	blx	r8
 800b2bc:	4307      	orrs	r7, r0
 800b2be:	3568      	adds	r5, #104	; 0x68
 800b2c0:	e7e9      	b.n	800b296 <_fwalk_reent+0x12>

0800b2c2 <__retarget_lock_init_recursive>:
 800b2c2:	4770      	bx	lr

0800b2c4 <__retarget_lock_acquire_recursive>:
 800b2c4:	4770      	bx	lr

0800b2c6 <__retarget_lock_release_recursive>:
 800b2c6:	4770      	bx	lr

0800b2c8 <__swhatbuf_r>:
 800b2c8:	b570      	push	{r4, r5, r6, lr}
 800b2ca:	460e      	mov	r6, r1
 800b2cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2d0:	2900      	cmp	r1, #0
 800b2d2:	b096      	sub	sp, #88	; 0x58
 800b2d4:	4614      	mov	r4, r2
 800b2d6:	461d      	mov	r5, r3
 800b2d8:	da08      	bge.n	800b2ec <__swhatbuf_r+0x24>
 800b2da:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b2de:	2200      	movs	r2, #0
 800b2e0:	602a      	str	r2, [r5, #0]
 800b2e2:	061a      	lsls	r2, r3, #24
 800b2e4:	d410      	bmi.n	800b308 <__swhatbuf_r+0x40>
 800b2e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b2ea:	e00e      	b.n	800b30a <__swhatbuf_r+0x42>
 800b2ec:	466a      	mov	r2, sp
 800b2ee:	f000 fdf1 	bl	800bed4 <_fstat_r>
 800b2f2:	2800      	cmp	r0, #0
 800b2f4:	dbf1      	blt.n	800b2da <__swhatbuf_r+0x12>
 800b2f6:	9a01      	ldr	r2, [sp, #4]
 800b2f8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b2fc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b300:	425a      	negs	r2, r3
 800b302:	415a      	adcs	r2, r3
 800b304:	602a      	str	r2, [r5, #0]
 800b306:	e7ee      	b.n	800b2e6 <__swhatbuf_r+0x1e>
 800b308:	2340      	movs	r3, #64	; 0x40
 800b30a:	2000      	movs	r0, #0
 800b30c:	6023      	str	r3, [r4, #0]
 800b30e:	b016      	add	sp, #88	; 0x58
 800b310:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b314 <__smakebuf_r>:
 800b314:	898b      	ldrh	r3, [r1, #12]
 800b316:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b318:	079d      	lsls	r5, r3, #30
 800b31a:	4606      	mov	r6, r0
 800b31c:	460c      	mov	r4, r1
 800b31e:	d507      	bpl.n	800b330 <__smakebuf_r+0x1c>
 800b320:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b324:	6023      	str	r3, [r4, #0]
 800b326:	6123      	str	r3, [r4, #16]
 800b328:	2301      	movs	r3, #1
 800b32a:	6163      	str	r3, [r4, #20]
 800b32c:	b002      	add	sp, #8
 800b32e:	bd70      	pop	{r4, r5, r6, pc}
 800b330:	ab01      	add	r3, sp, #4
 800b332:	466a      	mov	r2, sp
 800b334:	f7ff ffc8 	bl	800b2c8 <__swhatbuf_r>
 800b338:	9900      	ldr	r1, [sp, #0]
 800b33a:	4605      	mov	r5, r0
 800b33c:	4630      	mov	r0, r6
 800b33e:	f000 f895 	bl	800b46c <_malloc_r>
 800b342:	b948      	cbnz	r0, 800b358 <__smakebuf_r+0x44>
 800b344:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b348:	059a      	lsls	r2, r3, #22
 800b34a:	d4ef      	bmi.n	800b32c <__smakebuf_r+0x18>
 800b34c:	f023 0303 	bic.w	r3, r3, #3
 800b350:	f043 0302 	orr.w	r3, r3, #2
 800b354:	81a3      	strh	r3, [r4, #12]
 800b356:	e7e3      	b.n	800b320 <__smakebuf_r+0xc>
 800b358:	4b0d      	ldr	r3, [pc, #52]	; (800b390 <__smakebuf_r+0x7c>)
 800b35a:	62b3      	str	r3, [r6, #40]	; 0x28
 800b35c:	89a3      	ldrh	r3, [r4, #12]
 800b35e:	6020      	str	r0, [r4, #0]
 800b360:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b364:	81a3      	strh	r3, [r4, #12]
 800b366:	9b00      	ldr	r3, [sp, #0]
 800b368:	6163      	str	r3, [r4, #20]
 800b36a:	9b01      	ldr	r3, [sp, #4]
 800b36c:	6120      	str	r0, [r4, #16]
 800b36e:	b15b      	cbz	r3, 800b388 <__smakebuf_r+0x74>
 800b370:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b374:	4630      	mov	r0, r6
 800b376:	f000 fdbf 	bl	800bef8 <_isatty_r>
 800b37a:	b128      	cbz	r0, 800b388 <__smakebuf_r+0x74>
 800b37c:	89a3      	ldrh	r3, [r4, #12]
 800b37e:	f023 0303 	bic.w	r3, r3, #3
 800b382:	f043 0301 	orr.w	r3, r3, #1
 800b386:	81a3      	strh	r3, [r4, #12]
 800b388:	89a0      	ldrh	r0, [r4, #12]
 800b38a:	4305      	orrs	r5, r0
 800b38c:	81a5      	strh	r5, [r4, #12]
 800b38e:	e7cd      	b.n	800b32c <__smakebuf_r+0x18>
 800b390:	0800b121 	.word	0x0800b121

0800b394 <_free_r>:
 800b394:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b396:	2900      	cmp	r1, #0
 800b398:	d044      	beq.n	800b424 <_free_r+0x90>
 800b39a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b39e:	9001      	str	r0, [sp, #4]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	f1a1 0404 	sub.w	r4, r1, #4
 800b3a6:	bfb8      	it	lt
 800b3a8:	18e4      	addlt	r4, r4, r3
 800b3aa:	f000 fde1 	bl	800bf70 <__malloc_lock>
 800b3ae:	4a1e      	ldr	r2, [pc, #120]	; (800b428 <_free_r+0x94>)
 800b3b0:	9801      	ldr	r0, [sp, #4]
 800b3b2:	6813      	ldr	r3, [r2, #0]
 800b3b4:	b933      	cbnz	r3, 800b3c4 <_free_r+0x30>
 800b3b6:	6063      	str	r3, [r4, #4]
 800b3b8:	6014      	str	r4, [r2, #0]
 800b3ba:	b003      	add	sp, #12
 800b3bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b3c0:	f000 bddc 	b.w	800bf7c <__malloc_unlock>
 800b3c4:	42a3      	cmp	r3, r4
 800b3c6:	d908      	bls.n	800b3da <_free_r+0x46>
 800b3c8:	6825      	ldr	r5, [r4, #0]
 800b3ca:	1961      	adds	r1, r4, r5
 800b3cc:	428b      	cmp	r3, r1
 800b3ce:	bf01      	itttt	eq
 800b3d0:	6819      	ldreq	r1, [r3, #0]
 800b3d2:	685b      	ldreq	r3, [r3, #4]
 800b3d4:	1949      	addeq	r1, r1, r5
 800b3d6:	6021      	streq	r1, [r4, #0]
 800b3d8:	e7ed      	b.n	800b3b6 <_free_r+0x22>
 800b3da:	461a      	mov	r2, r3
 800b3dc:	685b      	ldr	r3, [r3, #4]
 800b3de:	b10b      	cbz	r3, 800b3e4 <_free_r+0x50>
 800b3e0:	42a3      	cmp	r3, r4
 800b3e2:	d9fa      	bls.n	800b3da <_free_r+0x46>
 800b3e4:	6811      	ldr	r1, [r2, #0]
 800b3e6:	1855      	adds	r5, r2, r1
 800b3e8:	42a5      	cmp	r5, r4
 800b3ea:	d10b      	bne.n	800b404 <_free_r+0x70>
 800b3ec:	6824      	ldr	r4, [r4, #0]
 800b3ee:	4421      	add	r1, r4
 800b3f0:	1854      	adds	r4, r2, r1
 800b3f2:	42a3      	cmp	r3, r4
 800b3f4:	6011      	str	r1, [r2, #0]
 800b3f6:	d1e0      	bne.n	800b3ba <_free_r+0x26>
 800b3f8:	681c      	ldr	r4, [r3, #0]
 800b3fa:	685b      	ldr	r3, [r3, #4]
 800b3fc:	6053      	str	r3, [r2, #4]
 800b3fe:	4421      	add	r1, r4
 800b400:	6011      	str	r1, [r2, #0]
 800b402:	e7da      	b.n	800b3ba <_free_r+0x26>
 800b404:	d902      	bls.n	800b40c <_free_r+0x78>
 800b406:	230c      	movs	r3, #12
 800b408:	6003      	str	r3, [r0, #0]
 800b40a:	e7d6      	b.n	800b3ba <_free_r+0x26>
 800b40c:	6825      	ldr	r5, [r4, #0]
 800b40e:	1961      	adds	r1, r4, r5
 800b410:	428b      	cmp	r3, r1
 800b412:	bf04      	itt	eq
 800b414:	6819      	ldreq	r1, [r3, #0]
 800b416:	685b      	ldreq	r3, [r3, #4]
 800b418:	6063      	str	r3, [r4, #4]
 800b41a:	bf04      	itt	eq
 800b41c:	1949      	addeq	r1, r1, r5
 800b41e:	6021      	streq	r1, [r4, #0]
 800b420:	6054      	str	r4, [r2, #4]
 800b422:	e7ca      	b.n	800b3ba <_free_r+0x26>
 800b424:	b003      	add	sp, #12
 800b426:	bd30      	pop	{r4, r5, pc}
 800b428:	200077c8 	.word	0x200077c8

0800b42c <sbrk_aligned>:
 800b42c:	b570      	push	{r4, r5, r6, lr}
 800b42e:	4e0e      	ldr	r6, [pc, #56]	; (800b468 <sbrk_aligned+0x3c>)
 800b430:	460c      	mov	r4, r1
 800b432:	6831      	ldr	r1, [r6, #0]
 800b434:	4605      	mov	r5, r0
 800b436:	b911      	cbnz	r1, 800b43e <sbrk_aligned+0x12>
 800b438:	f000 fcd6 	bl	800bde8 <_sbrk_r>
 800b43c:	6030      	str	r0, [r6, #0]
 800b43e:	4621      	mov	r1, r4
 800b440:	4628      	mov	r0, r5
 800b442:	f000 fcd1 	bl	800bde8 <_sbrk_r>
 800b446:	1c43      	adds	r3, r0, #1
 800b448:	d00a      	beq.n	800b460 <sbrk_aligned+0x34>
 800b44a:	1cc4      	adds	r4, r0, #3
 800b44c:	f024 0403 	bic.w	r4, r4, #3
 800b450:	42a0      	cmp	r0, r4
 800b452:	d007      	beq.n	800b464 <sbrk_aligned+0x38>
 800b454:	1a21      	subs	r1, r4, r0
 800b456:	4628      	mov	r0, r5
 800b458:	f000 fcc6 	bl	800bde8 <_sbrk_r>
 800b45c:	3001      	adds	r0, #1
 800b45e:	d101      	bne.n	800b464 <sbrk_aligned+0x38>
 800b460:	f04f 34ff 	mov.w	r4, #4294967295
 800b464:	4620      	mov	r0, r4
 800b466:	bd70      	pop	{r4, r5, r6, pc}
 800b468:	200077cc 	.word	0x200077cc

0800b46c <_malloc_r>:
 800b46c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b470:	1ccd      	adds	r5, r1, #3
 800b472:	f025 0503 	bic.w	r5, r5, #3
 800b476:	3508      	adds	r5, #8
 800b478:	2d0c      	cmp	r5, #12
 800b47a:	bf38      	it	cc
 800b47c:	250c      	movcc	r5, #12
 800b47e:	2d00      	cmp	r5, #0
 800b480:	4607      	mov	r7, r0
 800b482:	db01      	blt.n	800b488 <_malloc_r+0x1c>
 800b484:	42a9      	cmp	r1, r5
 800b486:	d905      	bls.n	800b494 <_malloc_r+0x28>
 800b488:	230c      	movs	r3, #12
 800b48a:	603b      	str	r3, [r7, #0]
 800b48c:	2600      	movs	r6, #0
 800b48e:	4630      	mov	r0, r6
 800b490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b494:	4e2e      	ldr	r6, [pc, #184]	; (800b550 <_malloc_r+0xe4>)
 800b496:	f000 fd6b 	bl	800bf70 <__malloc_lock>
 800b49a:	6833      	ldr	r3, [r6, #0]
 800b49c:	461c      	mov	r4, r3
 800b49e:	bb34      	cbnz	r4, 800b4ee <_malloc_r+0x82>
 800b4a0:	4629      	mov	r1, r5
 800b4a2:	4638      	mov	r0, r7
 800b4a4:	f7ff ffc2 	bl	800b42c <sbrk_aligned>
 800b4a8:	1c43      	adds	r3, r0, #1
 800b4aa:	4604      	mov	r4, r0
 800b4ac:	d14d      	bne.n	800b54a <_malloc_r+0xde>
 800b4ae:	6834      	ldr	r4, [r6, #0]
 800b4b0:	4626      	mov	r6, r4
 800b4b2:	2e00      	cmp	r6, #0
 800b4b4:	d140      	bne.n	800b538 <_malloc_r+0xcc>
 800b4b6:	6823      	ldr	r3, [r4, #0]
 800b4b8:	4631      	mov	r1, r6
 800b4ba:	4638      	mov	r0, r7
 800b4bc:	eb04 0803 	add.w	r8, r4, r3
 800b4c0:	f000 fc92 	bl	800bde8 <_sbrk_r>
 800b4c4:	4580      	cmp	r8, r0
 800b4c6:	d13a      	bne.n	800b53e <_malloc_r+0xd2>
 800b4c8:	6821      	ldr	r1, [r4, #0]
 800b4ca:	3503      	adds	r5, #3
 800b4cc:	1a6d      	subs	r5, r5, r1
 800b4ce:	f025 0503 	bic.w	r5, r5, #3
 800b4d2:	3508      	adds	r5, #8
 800b4d4:	2d0c      	cmp	r5, #12
 800b4d6:	bf38      	it	cc
 800b4d8:	250c      	movcc	r5, #12
 800b4da:	4629      	mov	r1, r5
 800b4dc:	4638      	mov	r0, r7
 800b4de:	f7ff ffa5 	bl	800b42c <sbrk_aligned>
 800b4e2:	3001      	adds	r0, #1
 800b4e4:	d02b      	beq.n	800b53e <_malloc_r+0xd2>
 800b4e6:	6823      	ldr	r3, [r4, #0]
 800b4e8:	442b      	add	r3, r5
 800b4ea:	6023      	str	r3, [r4, #0]
 800b4ec:	e00e      	b.n	800b50c <_malloc_r+0xa0>
 800b4ee:	6822      	ldr	r2, [r4, #0]
 800b4f0:	1b52      	subs	r2, r2, r5
 800b4f2:	d41e      	bmi.n	800b532 <_malloc_r+0xc6>
 800b4f4:	2a0b      	cmp	r2, #11
 800b4f6:	d916      	bls.n	800b526 <_malloc_r+0xba>
 800b4f8:	1961      	adds	r1, r4, r5
 800b4fa:	42a3      	cmp	r3, r4
 800b4fc:	6025      	str	r5, [r4, #0]
 800b4fe:	bf18      	it	ne
 800b500:	6059      	strne	r1, [r3, #4]
 800b502:	6863      	ldr	r3, [r4, #4]
 800b504:	bf08      	it	eq
 800b506:	6031      	streq	r1, [r6, #0]
 800b508:	5162      	str	r2, [r4, r5]
 800b50a:	604b      	str	r3, [r1, #4]
 800b50c:	4638      	mov	r0, r7
 800b50e:	f104 060b 	add.w	r6, r4, #11
 800b512:	f000 fd33 	bl	800bf7c <__malloc_unlock>
 800b516:	f026 0607 	bic.w	r6, r6, #7
 800b51a:	1d23      	adds	r3, r4, #4
 800b51c:	1af2      	subs	r2, r6, r3
 800b51e:	d0b6      	beq.n	800b48e <_malloc_r+0x22>
 800b520:	1b9b      	subs	r3, r3, r6
 800b522:	50a3      	str	r3, [r4, r2]
 800b524:	e7b3      	b.n	800b48e <_malloc_r+0x22>
 800b526:	6862      	ldr	r2, [r4, #4]
 800b528:	42a3      	cmp	r3, r4
 800b52a:	bf0c      	ite	eq
 800b52c:	6032      	streq	r2, [r6, #0]
 800b52e:	605a      	strne	r2, [r3, #4]
 800b530:	e7ec      	b.n	800b50c <_malloc_r+0xa0>
 800b532:	4623      	mov	r3, r4
 800b534:	6864      	ldr	r4, [r4, #4]
 800b536:	e7b2      	b.n	800b49e <_malloc_r+0x32>
 800b538:	4634      	mov	r4, r6
 800b53a:	6876      	ldr	r6, [r6, #4]
 800b53c:	e7b9      	b.n	800b4b2 <_malloc_r+0x46>
 800b53e:	230c      	movs	r3, #12
 800b540:	603b      	str	r3, [r7, #0]
 800b542:	4638      	mov	r0, r7
 800b544:	f000 fd1a 	bl	800bf7c <__malloc_unlock>
 800b548:	e7a1      	b.n	800b48e <_malloc_r+0x22>
 800b54a:	6025      	str	r5, [r4, #0]
 800b54c:	e7de      	b.n	800b50c <_malloc_r+0xa0>
 800b54e:	bf00      	nop
 800b550:	200077c8 	.word	0x200077c8

0800b554 <__ssputs_r>:
 800b554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b558:	688e      	ldr	r6, [r1, #8]
 800b55a:	429e      	cmp	r6, r3
 800b55c:	4682      	mov	sl, r0
 800b55e:	460c      	mov	r4, r1
 800b560:	4690      	mov	r8, r2
 800b562:	461f      	mov	r7, r3
 800b564:	d838      	bhi.n	800b5d8 <__ssputs_r+0x84>
 800b566:	898a      	ldrh	r2, [r1, #12]
 800b568:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b56c:	d032      	beq.n	800b5d4 <__ssputs_r+0x80>
 800b56e:	6825      	ldr	r5, [r4, #0]
 800b570:	6909      	ldr	r1, [r1, #16]
 800b572:	eba5 0901 	sub.w	r9, r5, r1
 800b576:	6965      	ldr	r5, [r4, #20]
 800b578:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b57c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b580:	3301      	adds	r3, #1
 800b582:	444b      	add	r3, r9
 800b584:	106d      	asrs	r5, r5, #1
 800b586:	429d      	cmp	r5, r3
 800b588:	bf38      	it	cc
 800b58a:	461d      	movcc	r5, r3
 800b58c:	0553      	lsls	r3, r2, #21
 800b58e:	d531      	bpl.n	800b5f4 <__ssputs_r+0xa0>
 800b590:	4629      	mov	r1, r5
 800b592:	f7ff ff6b 	bl	800b46c <_malloc_r>
 800b596:	4606      	mov	r6, r0
 800b598:	b950      	cbnz	r0, 800b5b0 <__ssputs_r+0x5c>
 800b59a:	230c      	movs	r3, #12
 800b59c:	f8ca 3000 	str.w	r3, [sl]
 800b5a0:	89a3      	ldrh	r3, [r4, #12]
 800b5a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5a6:	81a3      	strh	r3, [r4, #12]
 800b5a8:	f04f 30ff 	mov.w	r0, #4294967295
 800b5ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5b0:	6921      	ldr	r1, [r4, #16]
 800b5b2:	464a      	mov	r2, r9
 800b5b4:	f7ff fb2c 	bl	800ac10 <memcpy>
 800b5b8:	89a3      	ldrh	r3, [r4, #12]
 800b5ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b5be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5c2:	81a3      	strh	r3, [r4, #12]
 800b5c4:	6126      	str	r6, [r4, #16]
 800b5c6:	6165      	str	r5, [r4, #20]
 800b5c8:	444e      	add	r6, r9
 800b5ca:	eba5 0509 	sub.w	r5, r5, r9
 800b5ce:	6026      	str	r6, [r4, #0]
 800b5d0:	60a5      	str	r5, [r4, #8]
 800b5d2:	463e      	mov	r6, r7
 800b5d4:	42be      	cmp	r6, r7
 800b5d6:	d900      	bls.n	800b5da <__ssputs_r+0x86>
 800b5d8:	463e      	mov	r6, r7
 800b5da:	6820      	ldr	r0, [r4, #0]
 800b5dc:	4632      	mov	r2, r6
 800b5de:	4641      	mov	r1, r8
 800b5e0:	f000 fcac 	bl	800bf3c <memmove>
 800b5e4:	68a3      	ldr	r3, [r4, #8]
 800b5e6:	1b9b      	subs	r3, r3, r6
 800b5e8:	60a3      	str	r3, [r4, #8]
 800b5ea:	6823      	ldr	r3, [r4, #0]
 800b5ec:	4433      	add	r3, r6
 800b5ee:	6023      	str	r3, [r4, #0]
 800b5f0:	2000      	movs	r0, #0
 800b5f2:	e7db      	b.n	800b5ac <__ssputs_r+0x58>
 800b5f4:	462a      	mov	r2, r5
 800b5f6:	f000 fcc7 	bl	800bf88 <_realloc_r>
 800b5fa:	4606      	mov	r6, r0
 800b5fc:	2800      	cmp	r0, #0
 800b5fe:	d1e1      	bne.n	800b5c4 <__ssputs_r+0x70>
 800b600:	6921      	ldr	r1, [r4, #16]
 800b602:	4650      	mov	r0, sl
 800b604:	f7ff fec6 	bl	800b394 <_free_r>
 800b608:	e7c7      	b.n	800b59a <__ssputs_r+0x46>
	...

0800b60c <_svfiprintf_r>:
 800b60c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b610:	4698      	mov	r8, r3
 800b612:	898b      	ldrh	r3, [r1, #12]
 800b614:	061b      	lsls	r3, r3, #24
 800b616:	b09d      	sub	sp, #116	; 0x74
 800b618:	4607      	mov	r7, r0
 800b61a:	460d      	mov	r5, r1
 800b61c:	4614      	mov	r4, r2
 800b61e:	d50e      	bpl.n	800b63e <_svfiprintf_r+0x32>
 800b620:	690b      	ldr	r3, [r1, #16]
 800b622:	b963      	cbnz	r3, 800b63e <_svfiprintf_r+0x32>
 800b624:	2140      	movs	r1, #64	; 0x40
 800b626:	f7ff ff21 	bl	800b46c <_malloc_r>
 800b62a:	6028      	str	r0, [r5, #0]
 800b62c:	6128      	str	r0, [r5, #16]
 800b62e:	b920      	cbnz	r0, 800b63a <_svfiprintf_r+0x2e>
 800b630:	230c      	movs	r3, #12
 800b632:	603b      	str	r3, [r7, #0]
 800b634:	f04f 30ff 	mov.w	r0, #4294967295
 800b638:	e0d1      	b.n	800b7de <_svfiprintf_r+0x1d2>
 800b63a:	2340      	movs	r3, #64	; 0x40
 800b63c:	616b      	str	r3, [r5, #20]
 800b63e:	2300      	movs	r3, #0
 800b640:	9309      	str	r3, [sp, #36]	; 0x24
 800b642:	2320      	movs	r3, #32
 800b644:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b648:	f8cd 800c 	str.w	r8, [sp, #12]
 800b64c:	2330      	movs	r3, #48	; 0x30
 800b64e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b7f8 <_svfiprintf_r+0x1ec>
 800b652:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b656:	f04f 0901 	mov.w	r9, #1
 800b65a:	4623      	mov	r3, r4
 800b65c:	469a      	mov	sl, r3
 800b65e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b662:	b10a      	cbz	r2, 800b668 <_svfiprintf_r+0x5c>
 800b664:	2a25      	cmp	r2, #37	; 0x25
 800b666:	d1f9      	bne.n	800b65c <_svfiprintf_r+0x50>
 800b668:	ebba 0b04 	subs.w	fp, sl, r4
 800b66c:	d00b      	beq.n	800b686 <_svfiprintf_r+0x7a>
 800b66e:	465b      	mov	r3, fp
 800b670:	4622      	mov	r2, r4
 800b672:	4629      	mov	r1, r5
 800b674:	4638      	mov	r0, r7
 800b676:	f7ff ff6d 	bl	800b554 <__ssputs_r>
 800b67a:	3001      	adds	r0, #1
 800b67c:	f000 80aa 	beq.w	800b7d4 <_svfiprintf_r+0x1c8>
 800b680:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b682:	445a      	add	r2, fp
 800b684:	9209      	str	r2, [sp, #36]	; 0x24
 800b686:	f89a 3000 	ldrb.w	r3, [sl]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	f000 80a2 	beq.w	800b7d4 <_svfiprintf_r+0x1c8>
 800b690:	2300      	movs	r3, #0
 800b692:	f04f 32ff 	mov.w	r2, #4294967295
 800b696:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b69a:	f10a 0a01 	add.w	sl, sl, #1
 800b69e:	9304      	str	r3, [sp, #16]
 800b6a0:	9307      	str	r3, [sp, #28]
 800b6a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b6a6:	931a      	str	r3, [sp, #104]	; 0x68
 800b6a8:	4654      	mov	r4, sl
 800b6aa:	2205      	movs	r2, #5
 800b6ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6b0:	4851      	ldr	r0, [pc, #324]	; (800b7f8 <_svfiprintf_r+0x1ec>)
 800b6b2:	f7f4 fda5 	bl	8000200 <memchr>
 800b6b6:	9a04      	ldr	r2, [sp, #16]
 800b6b8:	b9d8      	cbnz	r0, 800b6f2 <_svfiprintf_r+0xe6>
 800b6ba:	06d0      	lsls	r0, r2, #27
 800b6bc:	bf44      	itt	mi
 800b6be:	2320      	movmi	r3, #32
 800b6c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b6c4:	0711      	lsls	r1, r2, #28
 800b6c6:	bf44      	itt	mi
 800b6c8:	232b      	movmi	r3, #43	; 0x2b
 800b6ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b6ce:	f89a 3000 	ldrb.w	r3, [sl]
 800b6d2:	2b2a      	cmp	r3, #42	; 0x2a
 800b6d4:	d015      	beq.n	800b702 <_svfiprintf_r+0xf6>
 800b6d6:	9a07      	ldr	r2, [sp, #28]
 800b6d8:	4654      	mov	r4, sl
 800b6da:	2000      	movs	r0, #0
 800b6dc:	f04f 0c0a 	mov.w	ip, #10
 800b6e0:	4621      	mov	r1, r4
 800b6e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b6e6:	3b30      	subs	r3, #48	; 0x30
 800b6e8:	2b09      	cmp	r3, #9
 800b6ea:	d94e      	bls.n	800b78a <_svfiprintf_r+0x17e>
 800b6ec:	b1b0      	cbz	r0, 800b71c <_svfiprintf_r+0x110>
 800b6ee:	9207      	str	r2, [sp, #28]
 800b6f0:	e014      	b.n	800b71c <_svfiprintf_r+0x110>
 800b6f2:	eba0 0308 	sub.w	r3, r0, r8
 800b6f6:	fa09 f303 	lsl.w	r3, r9, r3
 800b6fa:	4313      	orrs	r3, r2
 800b6fc:	9304      	str	r3, [sp, #16]
 800b6fe:	46a2      	mov	sl, r4
 800b700:	e7d2      	b.n	800b6a8 <_svfiprintf_r+0x9c>
 800b702:	9b03      	ldr	r3, [sp, #12]
 800b704:	1d19      	adds	r1, r3, #4
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	9103      	str	r1, [sp, #12]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	bfbb      	ittet	lt
 800b70e:	425b      	neglt	r3, r3
 800b710:	f042 0202 	orrlt.w	r2, r2, #2
 800b714:	9307      	strge	r3, [sp, #28]
 800b716:	9307      	strlt	r3, [sp, #28]
 800b718:	bfb8      	it	lt
 800b71a:	9204      	strlt	r2, [sp, #16]
 800b71c:	7823      	ldrb	r3, [r4, #0]
 800b71e:	2b2e      	cmp	r3, #46	; 0x2e
 800b720:	d10c      	bne.n	800b73c <_svfiprintf_r+0x130>
 800b722:	7863      	ldrb	r3, [r4, #1]
 800b724:	2b2a      	cmp	r3, #42	; 0x2a
 800b726:	d135      	bne.n	800b794 <_svfiprintf_r+0x188>
 800b728:	9b03      	ldr	r3, [sp, #12]
 800b72a:	1d1a      	adds	r2, r3, #4
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	9203      	str	r2, [sp, #12]
 800b730:	2b00      	cmp	r3, #0
 800b732:	bfb8      	it	lt
 800b734:	f04f 33ff 	movlt.w	r3, #4294967295
 800b738:	3402      	adds	r4, #2
 800b73a:	9305      	str	r3, [sp, #20]
 800b73c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b808 <_svfiprintf_r+0x1fc>
 800b740:	7821      	ldrb	r1, [r4, #0]
 800b742:	2203      	movs	r2, #3
 800b744:	4650      	mov	r0, sl
 800b746:	f7f4 fd5b 	bl	8000200 <memchr>
 800b74a:	b140      	cbz	r0, 800b75e <_svfiprintf_r+0x152>
 800b74c:	2340      	movs	r3, #64	; 0x40
 800b74e:	eba0 000a 	sub.w	r0, r0, sl
 800b752:	fa03 f000 	lsl.w	r0, r3, r0
 800b756:	9b04      	ldr	r3, [sp, #16]
 800b758:	4303      	orrs	r3, r0
 800b75a:	3401      	adds	r4, #1
 800b75c:	9304      	str	r3, [sp, #16]
 800b75e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b762:	4826      	ldr	r0, [pc, #152]	; (800b7fc <_svfiprintf_r+0x1f0>)
 800b764:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b768:	2206      	movs	r2, #6
 800b76a:	f7f4 fd49 	bl	8000200 <memchr>
 800b76e:	2800      	cmp	r0, #0
 800b770:	d038      	beq.n	800b7e4 <_svfiprintf_r+0x1d8>
 800b772:	4b23      	ldr	r3, [pc, #140]	; (800b800 <_svfiprintf_r+0x1f4>)
 800b774:	bb1b      	cbnz	r3, 800b7be <_svfiprintf_r+0x1b2>
 800b776:	9b03      	ldr	r3, [sp, #12]
 800b778:	3307      	adds	r3, #7
 800b77a:	f023 0307 	bic.w	r3, r3, #7
 800b77e:	3308      	adds	r3, #8
 800b780:	9303      	str	r3, [sp, #12]
 800b782:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b784:	4433      	add	r3, r6
 800b786:	9309      	str	r3, [sp, #36]	; 0x24
 800b788:	e767      	b.n	800b65a <_svfiprintf_r+0x4e>
 800b78a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b78e:	460c      	mov	r4, r1
 800b790:	2001      	movs	r0, #1
 800b792:	e7a5      	b.n	800b6e0 <_svfiprintf_r+0xd4>
 800b794:	2300      	movs	r3, #0
 800b796:	3401      	adds	r4, #1
 800b798:	9305      	str	r3, [sp, #20]
 800b79a:	4619      	mov	r1, r3
 800b79c:	f04f 0c0a 	mov.w	ip, #10
 800b7a0:	4620      	mov	r0, r4
 800b7a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b7a6:	3a30      	subs	r2, #48	; 0x30
 800b7a8:	2a09      	cmp	r2, #9
 800b7aa:	d903      	bls.n	800b7b4 <_svfiprintf_r+0x1a8>
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d0c5      	beq.n	800b73c <_svfiprintf_r+0x130>
 800b7b0:	9105      	str	r1, [sp, #20]
 800b7b2:	e7c3      	b.n	800b73c <_svfiprintf_r+0x130>
 800b7b4:	fb0c 2101 	mla	r1, ip, r1, r2
 800b7b8:	4604      	mov	r4, r0
 800b7ba:	2301      	movs	r3, #1
 800b7bc:	e7f0      	b.n	800b7a0 <_svfiprintf_r+0x194>
 800b7be:	ab03      	add	r3, sp, #12
 800b7c0:	9300      	str	r3, [sp, #0]
 800b7c2:	462a      	mov	r2, r5
 800b7c4:	4b0f      	ldr	r3, [pc, #60]	; (800b804 <_svfiprintf_r+0x1f8>)
 800b7c6:	a904      	add	r1, sp, #16
 800b7c8:	4638      	mov	r0, r7
 800b7ca:	f3af 8000 	nop.w
 800b7ce:	1c42      	adds	r2, r0, #1
 800b7d0:	4606      	mov	r6, r0
 800b7d2:	d1d6      	bne.n	800b782 <_svfiprintf_r+0x176>
 800b7d4:	89ab      	ldrh	r3, [r5, #12]
 800b7d6:	065b      	lsls	r3, r3, #25
 800b7d8:	f53f af2c 	bmi.w	800b634 <_svfiprintf_r+0x28>
 800b7dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b7de:	b01d      	add	sp, #116	; 0x74
 800b7e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7e4:	ab03      	add	r3, sp, #12
 800b7e6:	9300      	str	r3, [sp, #0]
 800b7e8:	462a      	mov	r2, r5
 800b7ea:	4b06      	ldr	r3, [pc, #24]	; (800b804 <_svfiprintf_r+0x1f8>)
 800b7ec:	a904      	add	r1, sp, #16
 800b7ee:	4638      	mov	r0, r7
 800b7f0:	f000 f9d4 	bl	800bb9c <_printf_i>
 800b7f4:	e7eb      	b.n	800b7ce <_svfiprintf_r+0x1c2>
 800b7f6:	bf00      	nop
 800b7f8:	0800dad0 	.word	0x0800dad0
 800b7fc:	0800dada 	.word	0x0800dada
 800b800:	00000000 	.word	0x00000000
 800b804:	0800b555 	.word	0x0800b555
 800b808:	0800dad6 	.word	0x0800dad6

0800b80c <__sfputc_r>:
 800b80c:	6893      	ldr	r3, [r2, #8]
 800b80e:	3b01      	subs	r3, #1
 800b810:	2b00      	cmp	r3, #0
 800b812:	b410      	push	{r4}
 800b814:	6093      	str	r3, [r2, #8]
 800b816:	da08      	bge.n	800b82a <__sfputc_r+0x1e>
 800b818:	6994      	ldr	r4, [r2, #24]
 800b81a:	42a3      	cmp	r3, r4
 800b81c:	db01      	blt.n	800b822 <__sfputc_r+0x16>
 800b81e:	290a      	cmp	r1, #10
 800b820:	d103      	bne.n	800b82a <__sfputc_r+0x1e>
 800b822:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b826:	f7ff bad5 	b.w	800add4 <__swbuf_r>
 800b82a:	6813      	ldr	r3, [r2, #0]
 800b82c:	1c58      	adds	r0, r3, #1
 800b82e:	6010      	str	r0, [r2, #0]
 800b830:	7019      	strb	r1, [r3, #0]
 800b832:	4608      	mov	r0, r1
 800b834:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b838:	4770      	bx	lr

0800b83a <__sfputs_r>:
 800b83a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b83c:	4606      	mov	r6, r0
 800b83e:	460f      	mov	r7, r1
 800b840:	4614      	mov	r4, r2
 800b842:	18d5      	adds	r5, r2, r3
 800b844:	42ac      	cmp	r4, r5
 800b846:	d101      	bne.n	800b84c <__sfputs_r+0x12>
 800b848:	2000      	movs	r0, #0
 800b84a:	e007      	b.n	800b85c <__sfputs_r+0x22>
 800b84c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b850:	463a      	mov	r2, r7
 800b852:	4630      	mov	r0, r6
 800b854:	f7ff ffda 	bl	800b80c <__sfputc_r>
 800b858:	1c43      	adds	r3, r0, #1
 800b85a:	d1f3      	bne.n	800b844 <__sfputs_r+0xa>
 800b85c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b860 <_vfiprintf_r>:
 800b860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b864:	460d      	mov	r5, r1
 800b866:	b09d      	sub	sp, #116	; 0x74
 800b868:	4614      	mov	r4, r2
 800b86a:	4698      	mov	r8, r3
 800b86c:	4606      	mov	r6, r0
 800b86e:	b118      	cbz	r0, 800b878 <_vfiprintf_r+0x18>
 800b870:	6983      	ldr	r3, [r0, #24]
 800b872:	b90b      	cbnz	r3, 800b878 <_vfiprintf_r+0x18>
 800b874:	f7ff fc88 	bl	800b188 <__sinit>
 800b878:	4b89      	ldr	r3, [pc, #548]	; (800baa0 <_vfiprintf_r+0x240>)
 800b87a:	429d      	cmp	r5, r3
 800b87c:	d11b      	bne.n	800b8b6 <_vfiprintf_r+0x56>
 800b87e:	6875      	ldr	r5, [r6, #4]
 800b880:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b882:	07d9      	lsls	r1, r3, #31
 800b884:	d405      	bmi.n	800b892 <_vfiprintf_r+0x32>
 800b886:	89ab      	ldrh	r3, [r5, #12]
 800b888:	059a      	lsls	r2, r3, #22
 800b88a:	d402      	bmi.n	800b892 <_vfiprintf_r+0x32>
 800b88c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b88e:	f7ff fd19 	bl	800b2c4 <__retarget_lock_acquire_recursive>
 800b892:	89ab      	ldrh	r3, [r5, #12]
 800b894:	071b      	lsls	r3, r3, #28
 800b896:	d501      	bpl.n	800b89c <_vfiprintf_r+0x3c>
 800b898:	692b      	ldr	r3, [r5, #16]
 800b89a:	b9eb      	cbnz	r3, 800b8d8 <_vfiprintf_r+0x78>
 800b89c:	4629      	mov	r1, r5
 800b89e:	4630      	mov	r0, r6
 800b8a0:	f7ff faea 	bl	800ae78 <__swsetup_r>
 800b8a4:	b1c0      	cbz	r0, 800b8d8 <_vfiprintf_r+0x78>
 800b8a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b8a8:	07dc      	lsls	r4, r3, #31
 800b8aa:	d50e      	bpl.n	800b8ca <_vfiprintf_r+0x6a>
 800b8ac:	f04f 30ff 	mov.w	r0, #4294967295
 800b8b0:	b01d      	add	sp, #116	; 0x74
 800b8b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8b6:	4b7b      	ldr	r3, [pc, #492]	; (800baa4 <_vfiprintf_r+0x244>)
 800b8b8:	429d      	cmp	r5, r3
 800b8ba:	d101      	bne.n	800b8c0 <_vfiprintf_r+0x60>
 800b8bc:	68b5      	ldr	r5, [r6, #8]
 800b8be:	e7df      	b.n	800b880 <_vfiprintf_r+0x20>
 800b8c0:	4b79      	ldr	r3, [pc, #484]	; (800baa8 <_vfiprintf_r+0x248>)
 800b8c2:	429d      	cmp	r5, r3
 800b8c4:	bf08      	it	eq
 800b8c6:	68f5      	ldreq	r5, [r6, #12]
 800b8c8:	e7da      	b.n	800b880 <_vfiprintf_r+0x20>
 800b8ca:	89ab      	ldrh	r3, [r5, #12]
 800b8cc:	0598      	lsls	r0, r3, #22
 800b8ce:	d4ed      	bmi.n	800b8ac <_vfiprintf_r+0x4c>
 800b8d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b8d2:	f7ff fcf8 	bl	800b2c6 <__retarget_lock_release_recursive>
 800b8d6:	e7e9      	b.n	800b8ac <_vfiprintf_r+0x4c>
 800b8d8:	2300      	movs	r3, #0
 800b8da:	9309      	str	r3, [sp, #36]	; 0x24
 800b8dc:	2320      	movs	r3, #32
 800b8de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b8e2:	f8cd 800c 	str.w	r8, [sp, #12]
 800b8e6:	2330      	movs	r3, #48	; 0x30
 800b8e8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800baac <_vfiprintf_r+0x24c>
 800b8ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b8f0:	f04f 0901 	mov.w	r9, #1
 800b8f4:	4623      	mov	r3, r4
 800b8f6:	469a      	mov	sl, r3
 800b8f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b8fc:	b10a      	cbz	r2, 800b902 <_vfiprintf_r+0xa2>
 800b8fe:	2a25      	cmp	r2, #37	; 0x25
 800b900:	d1f9      	bne.n	800b8f6 <_vfiprintf_r+0x96>
 800b902:	ebba 0b04 	subs.w	fp, sl, r4
 800b906:	d00b      	beq.n	800b920 <_vfiprintf_r+0xc0>
 800b908:	465b      	mov	r3, fp
 800b90a:	4622      	mov	r2, r4
 800b90c:	4629      	mov	r1, r5
 800b90e:	4630      	mov	r0, r6
 800b910:	f7ff ff93 	bl	800b83a <__sfputs_r>
 800b914:	3001      	adds	r0, #1
 800b916:	f000 80aa 	beq.w	800ba6e <_vfiprintf_r+0x20e>
 800b91a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b91c:	445a      	add	r2, fp
 800b91e:	9209      	str	r2, [sp, #36]	; 0x24
 800b920:	f89a 3000 	ldrb.w	r3, [sl]
 800b924:	2b00      	cmp	r3, #0
 800b926:	f000 80a2 	beq.w	800ba6e <_vfiprintf_r+0x20e>
 800b92a:	2300      	movs	r3, #0
 800b92c:	f04f 32ff 	mov.w	r2, #4294967295
 800b930:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b934:	f10a 0a01 	add.w	sl, sl, #1
 800b938:	9304      	str	r3, [sp, #16]
 800b93a:	9307      	str	r3, [sp, #28]
 800b93c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b940:	931a      	str	r3, [sp, #104]	; 0x68
 800b942:	4654      	mov	r4, sl
 800b944:	2205      	movs	r2, #5
 800b946:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b94a:	4858      	ldr	r0, [pc, #352]	; (800baac <_vfiprintf_r+0x24c>)
 800b94c:	f7f4 fc58 	bl	8000200 <memchr>
 800b950:	9a04      	ldr	r2, [sp, #16]
 800b952:	b9d8      	cbnz	r0, 800b98c <_vfiprintf_r+0x12c>
 800b954:	06d1      	lsls	r1, r2, #27
 800b956:	bf44      	itt	mi
 800b958:	2320      	movmi	r3, #32
 800b95a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b95e:	0713      	lsls	r3, r2, #28
 800b960:	bf44      	itt	mi
 800b962:	232b      	movmi	r3, #43	; 0x2b
 800b964:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b968:	f89a 3000 	ldrb.w	r3, [sl]
 800b96c:	2b2a      	cmp	r3, #42	; 0x2a
 800b96e:	d015      	beq.n	800b99c <_vfiprintf_r+0x13c>
 800b970:	9a07      	ldr	r2, [sp, #28]
 800b972:	4654      	mov	r4, sl
 800b974:	2000      	movs	r0, #0
 800b976:	f04f 0c0a 	mov.w	ip, #10
 800b97a:	4621      	mov	r1, r4
 800b97c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b980:	3b30      	subs	r3, #48	; 0x30
 800b982:	2b09      	cmp	r3, #9
 800b984:	d94e      	bls.n	800ba24 <_vfiprintf_r+0x1c4>
 800b986:	b1b0      	cbz	r0, 800b9b6 <_vfiprintf_r+0x156>
 800b988:	9207      	str	r2, [sp, #28]
 800b98a:	e014      	b.n	800b9b6 <_vfiprintf_r+0x156>
 800b98c:	eba0 0308 	sub.w	r3, r0, r8
 800b990:	fa09 f303 	lsl.w	r3, r9, r3
 800b994:	4313      	orrs	r3, r2
 800b996:	9304      	str	r3, [sp, #16]
 800b998:	46a2      	mov	sl, r4
 800b99a:	e7d2      	b.n	800b942 <_vfiprintf_r+0xe2>
 800b99c:	9b03      	ldr	r3, [sp, #12]
 800b99e:	1d19      	adds	r1, r3, #4
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	9103      	str	r1, [sp, #12]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	bfbb      	ittet	lt
 800b9a8:	425b      	neglt	r3, r3
 800b9aa:	f042 0202 	orrlt.w	r2, r2, #2
 800b9ae:	9307      	strge	r3, [sp, #28]
 800b9b0:	9307      	strlt	r3, [sp, #28]
 800b9b2:	bfb8      	it	lt
 800b9b4:	9204      	strlt	r2, [sp, #16]
 800b9b6:	7823      	ldrb	r3, [r4, #0]
 800b9b8:	2b2e      	cmp	r3, #46	; 0x2e
 800b9ba:	d10c      	bne.n	800b9d6 <_vfiprintf_r+0x176>
 800b9bc:	7863      	ldrb	r3, [r4, #1]
 800b9be:	2b2a      	cmp	r3, #42	; 0x2a
 800b9c0:	d135      	bne.n	800ba2e <_vfiprintf_r+0x1ce>
 800b9c2:	9b03      	ldr	r3, [sp, #12]
 800b9c4:	1d1a      	adds	r2, r3, #4
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	9203      	str	r2, [sp, #12]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	bfb8      	it	lt
 800b9ce:	f04f 33ff 	movlt.w	r3, #4294967295
 800b9d2:	3402      	adds	r4, #2
 800b9d4:	9305      	str	r3, [sp, #20]
 800b9d6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800babc <_vfiprintf_r+0x25c>
 800b9da:	7821      	ldrb	r1, [r4, #0]
 800b9dc:	2203      	movs	r2, #3
 800b9de:	4650      	mov	r0, sl
 800b9e0:	f7f4 fc0e 	bl	8000200 <memchr>
 800b9e4:	b140      	cbz	r0, 800b9f8 <_vfiprintf_r+0x198>
 800b9e6:	2340      	movs	r3, #64	; 0x40
 800b9e8:	eba0 000a 	sub.w	r0, r0, sl
 800b9ec:	fa03 f000 	lsl.w	r0, r3, r0
 800b9f0:	9b04      	ldr	r3, [sp, #16]
 800b9f2:	4303      	orrs	r3, r0
 800b9f4:	3401      	adds	r4, #1
 800b9f6:	9304      	str	r3, [sp, #16]
 800b9f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9fc:	482c      	ldr	r0, [pc, #176]	; (800bab0 <_vfiprintf_r+0x250>)
 800b9fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ba02:	2206      	movs	r2, #6
 800ba04:	f7f4 fbfc 	bl	8000200 <memchr>
 800ba08:	2800      	cmp	r0, #0
 800ba0a:	d03f      	beq.n	800ba8c <_vfiprintf_r+0x22c>
 800ba0c:	4b29      	ldr	r3, [pc, #164]	; (800bab4 <_vfiprintf_r+0x254>)
 800ba0e:	bb1b      	cbnz	r3, 800ba58 <_vfiprintf_r+0x1f8>
 800ba10:	9b03      	ldr	r3, [sp, #12]
 800ba12:	3307      	adds	r3, #7
 800ba14:	f023 0307 	bic.w	r3, r3, #7
 800ba18:	3308      	adds	r3, #8
 800ba1a:	9303      	str	r3, [sp, #12]
 800ba1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba1e:	443b      	add	r3, r7
 800ba20:	9309      	str	r3, [sp, #36]	; 0x24
 800ba22:	e767      	b.n	800b8f4 <_vfiprintf_r+0x94>
 800ba24:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba28:	460c      	mov	r4, r1
 800ba2a:	2001      	movs	r0, #1
 800ba2c:	e7a5      	b.n	800b97a <_vfiprintf_r+0x11a>
 800ba2e:	2300      	movs	r3, #0
 800ba30:	3401      	adds	r4, #1
 800ba32:	9305      	str	r3, [sp, #20]
 800ba34:	4619      	mov	r1, r3
 800ba36:	f04f 0c0a 	mov.w	ip, #10
 800ba3a:	4620      	mov	r0, r4
 800ba3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba40:	3a30      	subs	r2, #48	; 0x30
 800ba42:	2a09      	cmp	r2, #9
 800ba44:	d903      	bls.n	800ba4e <_vfiprintf_r+0x1ee>
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d0c5      	beq.n	800b9d6 <_vfiprintf_r+0x176>
 800ba4a:	9105      	str	r1, [sp, #20]
 800ba4c:	e7c3      	b.n	800b9d6 <_vfiprintf_r+0x176>
 800ba4e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ba52:	4604      	mov	r4, r0
 800ba54:	2301      	movs	r3, #1
 800ba56:	e7f0      	b.n	800ba3a <_vfiprintf_r+0x1da>
 800ba58:	ab03      	add	r3, sp, #12
 800ba5a:	9300      	str	r3, [sp, #0]
 800ba5c:	462a      	mov	r2, r5
 800ba5e:	4b16      	ldr	r3, [pc, #88]	; (800bab8 <_vfiprintf_r+0x258>)
 800ba60:	a904      	add	r1, sp, #16
 800ba62:	4630      	mov	r0, r6
 800ba64:	f3af 8000 	nop.w
 800ba68:	4607      	mov	r7, r0
 800ba6a:	1c78      	adds	r0, r7, #1
 800ba6c:	d1d6      	bne.n	800ba1c <_vfiprintf_r+0x1bc>
 800ba6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba70:	07d9      	lsls	r1, r3, #31
 800ba72:	d405      	bmi.n	800ba80 <_vfiprintf_r+0x220>
 800ba74:	89ab      	ldrh	r3, [r5, #12]
 800ba76:	059a      	lsls	r2, r3, #22
 800ba78:	d402      	bmi.n	800ba80 <_vfiprintf_r+0x220>
 800ba7a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba7c:	f7ff fc23 	bl	800b2c6 <__retarget_lock_release_recursive>
 800ba80:	89ab      	ldrh	r3, [r5, #12]
 800ba82:	065b      	lsls	r3, r3, #25
 800ba84:	f53f af12 	bmi.w	800b8ac <_vfiprintf_r+0x4c>
 800ba88:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ba8a:	e711      	b.n	800b8b0 <_vfiprintf_r+0x50>
 800ba8c:	ab03      	add	r3, sp, #12
 800ba8e:	9300      	str	r3, [sp, #0]
 800ba90:	462a      	mov	r2, r5
 800ba92:	4b09      	ldr	r3, [pc, #36]	; (800bab8 <_vfiprintf_r+0x258>)
 800ba94:	a904      	add	r1, sp, #16
 800ba96:	4630      	mov	r0, r6
 800ba98:	f000 f880 	bl	800bb9c <_printf_i>
 800ba9c:	e7e4      	b.n	800ba68 <_vfiprintf_r+0x208>
 800ba9e:	bf00      	nop
 800baa0:	0800da90 	.word	0x0800da90
 800baa4:	0800dab0 	.word	0x0800dab0
 800baa8:	0800da70 	.word	0x0800da70
 800baac:	0800dad0 	.word	0x0800dad0
 800bab0:	0800dada 	.word	0x0800dada
 800bab4:	00000000 	.word	0x00000000
 800bab8:	0800b83b 	.word	0x0800b83b
 800babc:	0800dad6 	.word	0x0800dad6

0800bac0 <_printf_common>:
 800bac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bac4:	4616      	mov	r6, r2
 800bac6:	4699      	mov	r9, r3
 800bac8:	688a      	ldr	r2, [r1, #8]
 800baca:	690b      	ldr	r3, [r1, #16]
 800bacc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bad0:	4293      	cmp	r3, r2
 800bad2:	bfb8      	it	lt
 800bad4:	4613      	movlt	r3, r2
 800bad6:	6033      	str	r3, [r6, #0]
 800bad8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800badc:	4607      	mov	r7, r0
 800bade:	460c      	mov	r4, r1
 800bae0:	b10a      	cbz	r2, 800bae6 <_printf_common+0x26>
 800bae2:	3301      	adds	r3, #1
 800bae4:	6033      	str	r3, [r6, #0]
 800bae6:	6823      	ldr	r3, [r4, #0]
 800bae8:	0699      	lsls	r1, r3, #26
 800baea:	bf42      	ittt	mi
 800baec:	6833      	ldrmi	r3, [r6, #0]
 800baee:	3302      	addmi	r3, #2
 800baf0:	6033      	strmi	r3, [r6, #0]
 800baf2:	6825      	ldr	r5, [r4, #0]
 800baf4:	f015 0506 	ands.w	r5, r5, #6
 800baf8:	d106      	bne.n	800bb08 <_printf_common+0x48>
 800bafa:	f104 0a19 	add.w	sl, r4, #25
 800bafe:	68e3      	ldr	r3, [r4, #12]
 800bb00:	6832      	ldr	r2, [r6, #0]
 800bb02:	1a9b      	subs	r3, r3, r2
 800bb04:	42ab      	cmp	r3, r5
 800bb06:	dc26      	bgt.n	800bb56 <_printf_common+0x96>
 800bb08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bb0c:	1e13      	subs	r3, r2, #0
 800bb0e:	6822      	ldr	r2, [r4, #0]
 800bb10:	bf18      	it	ne
 800bb12:	2301      	movne	r3, #1
 800bb14:	0692      	lsls	r2, r2, #26
 800bb16:	d42b      	bmi.n	800bb70 <_printf_common+0xb0>
 800bb18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bb1c:	4649      	mov	r1, r9
 800bb1e:	4638      	mov	r0, r7
 800bb20:	47c0      	blx	r8
 800bb22:	3001      	adds	r0, #1
 800bb24:	d01e      	beq.n	800bb64 <_printf_common+0xa4>
 800bb26:	6823      	ldr	r3, [r4, #0]
 800bb28:	68e5      	ldr	r5, [r4, #12]
 800bb2a:	6832      	ldr	r2, [r6, #0]
 800bb2c:	f003 0306 	and.w	r3, r3, #6
 800bb30:	2b04      	cmp	r3, #4
 800bb32:	bf08      	it	eq
 800bb34:	1aad      	subeq	r5, r5, r2
 800bb36:	68a3      	ldr	r3, [r4, #8]
 800bb38:	6922      	ldr	r2, [r4, #16]
 800bb3a:	bf0c      	ite	eq
 800bb3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bb40:	2500      	movne	r5, #0
 800bb42:	4293      	cmp	r3, r2
 800bb44:	bfc4      	itt	gt
 800bb46:	1a9b      	subgt	r3, r3, r2
 800bb48:	18ed      	addgt	r5, r5, r3
 800bb4a:	2600      	movs	r6, #0
 800bb4c:	341a      	adds	r4, #26
 800bb4e:	42b5      	cmp	r5, r6
 800bb50:	d11a      	bne.n	800bb88 <_printf_common+0xc8>
 800bb52:	2000      	movs	r0, #0
 800bb54:	e008      	b.n	800bb68 <_printf_common+0xa8>
 800bb56:	2301      	movs	r3, #1
 800bb58:	4652      	mov	r2, sl
 800bb5a:	4649      	mov	r1, r9
 800bb5c:	4638      	mov	r0, r7
 800bb5e:	47c0      	blx	r8
 800bb60:	3001      	adds	r0, #1
 800bb62:	d103      	bne.n	800bb6c <_printf_common+0xac>
 800bb64:	f04f 30ff 	mov.w	r0, #4294967295
 800bb68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb6c:	3501      	adds	r5, #1
 800bb6e:	e7c6      	b.n	800bafe <_printf_common+0x3e>
 800bb70:	18e1      	adds	r1, r4, r3
 800bb72:	1c5a      	adds	r2, r3, #1
 800bb74:	2030      	movs	r0, #48	; 0x30
 800bb76:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bb7a:	4422      	add	r2, r4
 800bb7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bb80:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bb84:	3302      	adds	r3, #2
 800bb86:	e7c7      	b.n	800bb18 <_printf_common+0x58>
 800bb88:	2301      	movs	r3, #1
 800bb8a:	4622      	mov	r2, r4
 800bb8c:	4649      	mov	r1, r9
 800bb8e:	4638      	mov	r0, r7
 800bb90:	47c0      	blx	r8
 800bb92:	3001      	adds	r0, #1
 800bb94:	d0e6      	beq.n	800bb64 <_printf_common+0xa4>
 800bb96:	3601      	adds	r6, #1
 800bb98:	e7d9      	b.n	800bb4e <_printf_common+0x8e>
	...

0800bb9c <_printf_i>:
 800bb9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bba0:	7e0f      	ldrb	r7, [r1, #24]
 800bba2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bba4:	2f78      	cmp	r7, #120	; 0x78
 800bba6:	4691      	mov	r9, r2
 800bba8:	4680      	mov	r8, r0
 800bbaa:	460c      	mov	r4, r1
 800bbac:	469a      	mov	sl, r3
 800bbae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bbb2:	d807      	bhi.n	800bbc4 <_printf_i+0x28>
 800bbb4:	2f62      	cmp	r7, #98	; 0x62
 800bbb6:	d80a      	bhi.n	800bbce <_printf_i+0x32>
 800bbb8:	2f00      	cmp	r7, #0
 800bbba:	f000 80d8 	beq.w	800bd6e <_printf_i+0x1d2>
 800bbbe:	2f58      	cmp	r7, #88	; 0x58
 800bbc0:	f000 80a3 	beq.w	800bd0a <_printf_i+0x16e>
 800bbc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bbc8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bbcc:	e03a      	b.n	800bc44 <_printf_i+0xa8>
 800bbce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bbd2:	2b15      	cmp	r3, #21
 800bbd4:	d8f6      	bhi.n	800bbc4 <_printf_i+0x28>
 800bbd6:	a101      	add	r1, pc, #4	; (adr r1, 800bbdc <_printf_i+0x40>)
 800bbd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bbdc:	0800bc35 	.word	0x0800bc35
 800bbe0:	0800bc49 	.word	0x0800bc49
 800bbe4:	0800bbc5 	.word	0x0800bbc5
 800bbe8:	0800bbc5 	.word	0x0800bbc5
 800bbec:	0800bbc5 	.word	0x0800bbc5
 800bbf0:	0800bbc5 	.word	0x0800bbc5
 800bbf4:	0800bc49 	.word	0x0800bc49
 800bbf8:	0800bbc5 	.word	0x0800bbc5
 800bbfc:	0800bbc5 	.word	0x0800bbc5
 800bc00:	0800bbc5 	.word	0x0800bbc5
 800bc04:	0800bbc5 	.word	0x0800bbc5
 800bc08:	0800bd55 	.word	0x0800bd55
 800bc0c:	0800bc79 	.word	0x0800bc79
 800bc10:	0800bd37 	.word	0x0800bd37
 800bc14:	0800bbc5 	.word	0x0800bbc5
 800bc18:	0800bbc5 	.word	0x0800bbc5
 800bc1c:	0800bd77 	.word	0x0800bd77
 800bc20:	0800bbc5 	.word	0x0800bbc5
 800bc24:	0800bc79 	.word	0x0800bc79
 800bc28:	0800bbc5 	.word	0x0800bbc5
 800bc2c:	0800bbc5 	.word	0x0800bbc5
 800bc30:	0800bd3f 	.word	0x0800bd3f
 800bc34:	682b      	ldr	r3, [r5, #0]
 800bc36:	1d1a      	adds	r2, r3, #4
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	602a      	str	r2, [r5, #0]
 800bc3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bc40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bc44:	2301      	movs	r3, #1
 800bc46:	e0a3      	b.n	800bd90 <_printf_i+0x1f4>
 800bc48:	6820      	ldr	r0, [r4, #0]
 800bc4a:	6829      	ldr	r1, [r5, #0]
 800bc4c:	0606      	lsls	r6, r0, #24
 800bc4e:	f101 0304 	add.w	r3, r1, #4
 800bc52:	d50a      	bpl.n	800bc6a <_printf_i+0xce>
 800bc54:	680e      	ldr	r6, [r1, #0]
 800bc56:	602b      	str	r3, [r5, #0]
 800bc58:	2e00      	cmp	r6, #0
 800bc5a:	da03      	bge.n	800bc64 <_printf_i+0xc8>
 800bc5c:	232d      	movs	r3, #45	; 0x2d
 800bc5e:	4276      	negs	r6, r6
 800bc60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bc64:	485e      	ldr	r0, [pc, #376]	; (800bde0 <_printf_i+0x244>)
 800bc66:	230a      	movs	r3, #10
 800bc68:	e019      	b.n	800bc9e <_printf_i+0x102>
 800bc6a:	680e      	ldr	r6, [r1, #0]
 800bc6c:	602b      	str	r3, [r5, #0]
 800bc6e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bc72:	bf18      	it	ne
 800bc74:	b236      	sxthne	r6, r6
 800bc76:	e7ef      	b.n	800bc58 <_printf_i+0xbc>
 800bc78:	682b      	ldr	r3, [r5, #0]
 800bc7a:	6820      	ldr	r0, [r4, #0]
 800bc7c:	1d19      	adds	r1, r3, #4
 800bc7e:	6029      	str	r1, [r5, #0]
 800bc80:	0601      	lsls	r1, r0, #24
 800bc82:	d501      	bpl.n	800bc88 <_printf_i+0xec>
 800bc84:	681e      	ldr	r6, [r3, #0]
 800bc86:	e002      	b.n	800bc8e <_printf_i+0xf2>
 800bc88:	0646      	lsls	r6, r0, #25
 800bc8a:	d5fb      	bpl.n	800bc84 <_printf_i+0xe8>
 800bc8c:	881e      	ldrh	r6, [r3, #0]
 800bc8e:	4854      	ldr	r0, [pc, #336]	; (800bde0 <_printf_i+0x244>)
 800bc90:	2f6f      	cmp	r7, #111	; 0x6f
 800bc92:	bf0c      	ite	eq
 800bc94:	2308      	moveq	r3, #8
 800bc96:	230a      	movne	r3, #10
 800bc98:	2100      	movs	r1, #0
 800bc9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bc9e:	6865      	ldr	r5, [r4, #4]
 800bca0:	60a5      	str	r5, [r4, #8]
 800bca2:	2d00      	cmp	r5, #0
 800bca4:	bfa2      	ittt	ge
 800bca6:	6821      	ldrge	r1, [r4, #0]
 800bca8:	f021 0104 	bicge.w	r1, r1, #4
 800bcac:	6021      	strge	r1, [r4, #0]
 800bcae:	b90e      	cbnz	r6, 800bcb4 <_printf_i+0x118>
 800bcb0:	2d00      	cmp	r5, #0
 800bcb2:	d04d      	beq.n	800bd50 <_printf_i+0x1b4>
 800bcb4:	4615      	mov	r5, r2
 800bcb6:	fbb6 f1f3 	udiv	r1, r6, r3
 800bcba:	fb03 6711 	mls	r7, r3, r1, r6
 800bcbe:	5dc7      	ldrb	r7, [r0, r7]
 800bcc0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bcc4:	4637      	mov	r7, r6
 800bcc6:	42bb      	cmp	r3, r7
 800bcc8:	460e      	mov	r6, r1
 800bcca:	d9f4      	bls.n	800bcb6 <_printf_i+0x11a>
 800bccc:	2b08      	cmp	r3, #8
 800bcce:	d10b      	bne.n	800bce8 <_printf_i+0x14c>
 800bcd0:	6823      	ldr	r3, [r4, #0]
 800bcd2:	07de      	lsls	r6, r3, #31
 800bcd4:	d508      	bpl.n	800bce8 <_printf_i+0x14c>
 800bcd6:	6923      	ldr	r3, [r4, #16]
 800bcd8:	6861      	ldr	r1, [r4, #4]
 800bcda:	4299      	cmp	r1, r3
 800bcdc:	bfde      	ittt	le
 800bcde:	2330      	movle	r3, #48	; 0x30
 800bce0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bce4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bce8:	1b52      	subs	r2, r2, r5
 800bcea:	6122      	str	r2, [r4, #16]
 800bcec:	f8cd a000 	str.w	sl, [sp]
 800bcf0:	464b      	mov	r3, r9
 800bcf2:	aa03      	add	r2, sp, #12
 800bcf4:	4621      	mov	r1, r4
 800bcf6:	4640      	mov	r0, r8
 800bcf8:	f7ff fee2 	bl	800bac0 <_printf_common>
 800bcfc:	3001      	adds	r0, #1
 800bcfe:	d14c      	bne.n	800bd9a <_printf_i+0x1fe>
 800bd00:	f04f 30ff 	mov.w	r0, #4294967295
 800bd04:	b004      	add	sp, #16
 800bd06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd0a:	4835      	ldr	r0, [pc, #212]	; (800bde0 <_printf_i+0x244>)
 800bd0c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bd10:	6829      	ldr	r1, [r5, #0]
 800bd12:	6823      	ldr	r3, [r4, #0]
 800bd14:	f851 6b04 	ldr.w	r6, [r1], #4
 800bd18:	6029      	str	r1, [r5, #0]
 800bd1a:	061d      	lsls	r5, r3, #24
 800bd1c:	d514      	bpl.n	800bd48 <_printf_i+0x1ac>
 800bd1e:	07df      	lsls	r7, r3, #31
 800bd20:	bf44      	itt	mi
 800bd22:	f043 0320 	orrmi.w	r3, r3, #32
 800bd26:	6023      	strmi	r3, [r4, #0]
 800bd28:	b91e      	cbnz	r6, 800bd32 <_printf_i+0x196>
 800bd2a:	6823      	ldr	r3, [r4, #0]
 800bd2c:	f023 0320 	bic.w	r3, r3, #32
 800bd30:	6023      	str	r3, [r4, #0]
 800bd32:	2310      	movs	r3, #16
 800bd34:	e7b0      	b.n	800bc98 <_printf_i+0xfc>
 800bd36:	6823      	ldr	r3, [r4, #0]
 800bd38:	f043 0320 	orr.w	r3, r3, #32
 800bd3c:	6023      	str	r3, [r4, #0]
 800bd3e:	2378      	movs	r3, #120	; 0x78
 800bd40:	4828      	ldr	r0, [pc, #160]	; (800bde4 <_printf_i+0x248>)
 800bd42:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bd46:	e7e3      	b.n	800bd10 <_printf_i+0x174>
 800bd48:	0659      	lsls	r1, r3, #25
 800bd4a:	bf48      	it	mi
 800bd4c:	b2b6      	uxthmi	r6, r6
 800bd4e:	e7e6      	b.n	800bd1e <_printf_i+0x182>
 800bd50:	4615      	mov	r5, r2
 800bd52:	e7bb      	b.n	800bccc <_printf_i+0x130>
 800bd54:	682b      	ldr	r3, [r5, #0]
 800bd56:	6826      	ldr	r6, [r4, #0]
 800bd58:	6961      	ldr	r1, [r4, #20]
 800bd5a:	1d18      	adds	r0, r3, #4
 800bd5c:	6028      	str	r0, [r5, #0]
 800bd5e:	0635      	lsls	r5, r6, #24
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	d501      	bpl.n	800bd68 <_printf_i+0x1cc>
 800bd64:	6019      	str	r1, [r3, #0]
 800bd66:	e002      	b.n	800bd6e <_printf_i+0x1d2>
 800bd68:	0670      	lsls	r0, r6, #25
 800bd6a:	d5fb      	bpl.n	800bd64 <_printf_i+0x1c8>
 800bd6c:	8019      	strh	r1, [r3, #0]
 800bd6e:	2300      	movs	r3, #0
 800bd70:	6123      	str	r3, [r4, #16]
 800bd72:	4615      	mov	r5, r2
 800bd74:	e7ba      	b.n	800bcec <_printf_i+0x150>
 800bd76:	682b      	ldr	r3, [r5, #0]
 800bd78:	1d1a      	adds	r2, r3, #4
 800bd7a:	602a      	str	r2, [r5, #0]
 800bd7c:	681d      	ldr	r5, [r3, #0]
 800bd7e:	6862      	ldr	r2, [r4, #4]
 800bd80:	2100      	movs	r1, #0
 800bd82:	4628      	mov	r0, r5
 800bd84:	f7f4 fa3c 	bl	8000200 <memchr>
 800bd88:	b108      	cbz	r0, 800bd8e <_printf_i+0x1f2>
 800bd8a:	1b40      	subs	r0, r0, r5
 800bd8c:	6060      	str	r0, [r4, #4]
 800bd8e:	6863      	ldr	r3, [r4, #4]
 800bd90:	6123      	str	r3, [r4, #16]
 800bd92:	2300      	movs	r3, #0
 800bd94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bd98:	e7a8      	b.n	800bcec <_printf_i+0x150>
 800bd9a:	6923      	ldr	r3, [r4, #16]
 800bd9c:	462a      	mov	r2, r5
 800bd9e:	4649      	mov	r1, r9
 800bda0:	4640      	mov	r0, r8
 800bda2:	47d0      	blx	sl
 800bda4:	3001      	adds	r0, #1
 800bda6:	d0ab      	beq.n	800bd00 <_printf_i+0x164>
 800bda8:	6823      	ldr	r3, [r4, #0]
 800bdaa:	079b      	lsls	r3, r3, #30
 800bdac:	d413      	bmi.n	800bdd6 <_printf_i+0x23a>
 800bdae:	68e0      	ldr	r0, [r4, #12]
 800bdb0:	9b03      	ldr	r3, [sp, #12]
 800bdb2:	4298      	cmp	r0, r3
 800bdb4:	bfb8      	it	lt
 800bdb6:	4618      	movlt	r0, r3
 800bdb8:	e7a4      	b.n	800bd04 <_printf_i+0x168>
 800bdba:	2301      	movs	r3, #1
 800bdbc:	4632      	mov	r2, r6
 800bdbe:	4649      	mov	r1, r9
 800bdc0:	4640      	mov	r0, r8
 800bdc2:	47d0      	blx	sl
 800bdc4:	3001      	adds	r0, #1
 800bdc6:	d09b      	beq.n	800bd00 <_printf_i+0x164>
 800bdc8:	3501      	adds	r5, #1
 800bdca:	68e3      	ldr	r3, [r4, #12]
 800bdcc:	9903      	ldr	r1, [sp, #12]
 800bdce:	1a5b      	subs	r3, r3, r1
 800bdd0:	42ab      	cmp	r3, r5
 800bdd2:	dcf2      	bgt.n	800bdba <_printf_i+0x21e>
 800bdd4:	e7eb      	b.n	800bdae <_printf_i+0x212>
 800bdd6:	2500      	movs	r5, #0
 800bdd8:	f104 0619 	add.w	r6, r4, #25
 800bddc:	e7f5      	b.n	800bdca <_printf_i+0x22e>
 800bdde:	bf00      	nop
 800bde0:	0800dae1 	.word	0x0800dae1
 800bde4:	0800daf2 	.word	0x0800daf2

0800bde8 <_sbrk_r>:
 800bde8:	b538      	push	{r3, r4, r5, lr}
 800bdea:	4d06      	ldr	r5, [pc, #24]	; (800be04 <_sbrk_r+0x1c>)
 800bdec:	2300      	movs	r3, #0
 800bdee:	4604      	mov	r4, r0
 800bdf0:	4608      	mov	r0, r1
 800bdf2:	602b      	str	r3, [r5, #0]
 800bdf4:	f7fa fb24 	bl	8006440 <_sbrk>
 800bdf8:	1c43      	adds	r3, r0, #1
 800bdfa:	d102      	bne.n	800be02 <_sbrk_r+0x1a>
 800bdfc:	682b      	ldr	r3, [r5, #0]
 800bdfe:	b103      	cbz	r3, 800be02 <_sbrk_r+0x1a>
 800be00:	6023      	str	r3, [r4, #0]
 800be02:	bd38      	pop	{r3, r4, r5, pc}
 800be04:	200077d0 	.word	0x200077d0

0800be08 <__sread>:
 800be08:	b510      	push	{r4, lr}
 800be0a:	460c      	mov	r4, r1
 800be0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be10:	f000 f8ea 	bl	800bfe8 <_read_r>
 800be14:	2800      	cmp	r0, #0
 800be16:	bfab      	itete	ge
 800be18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800be1a:	89a3      	ldrhlt	r3, [r4, #12]
 800be1c:	181b      	addge	r3, r3, r0
 800be1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800be22:	bfac      	ite	ge
 800be24:	6563      	strge	r3, [r4, #84]	; 0x54
 800be26:	81a3      	strhlt	r3, [r4, #12]
 800be28:	bd10      	pop	{r4, pc}

0800be2a <__swrite>:
 800be2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be2e:	461f      	mov	r7, r3
 800be30:	898b      	ldrh	r3, [r1, #12]
 800be32:	05db      	lsls	r3, r3, #23
 800be34:	4605      	mov	r5, r0
 800be36:	460c      	mov	r4, r1
 800be38:	4616      	mov	r6, r2
 800be3a:	d505      	bpl.n	800be48 <__swrite+0x1e>
 800be3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be40:	2302      	movs	r3, #2
 800be42:	2200      	movs	r2, #0
 800be44:	f000 f868 	bl	800bf18 <_lseek_r>
 800be48:	89a3      	ldrh	r3, [r4, #12]
 800be4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800be52:	81a3      	strh	r3, [r4, #12]
 800be54:	4632      	mov	r2, r6
 800be56:	463b      	mov	r3, r7
 800be58:	4628      	mov	r0, r5
 800be5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800be5e:	f000 b817 	b.w	800be90 <_write_r>

0800be62 <__sseek>:
 800be62:	b510      	push	{r4, lr}
 800be64:	460c      	mov	r4, r1
 800be66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be6a:	f000 f855 	bl	800bf18 <_lseek_r>
 800be6e:	1c43      	adds	r3, r0, #1
 800be70:	89a3      	ldrh	r3, [r4, #12]
 800be72:	bf15      	itete	ne
 800be74:	6560      	strne	r0, [r4, #84]	; 0x54
 800be76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800be7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800be7e:	81a3      	strheq	r3, [r4, #12]
 800be80:	bf18      	it	ne
 800be82:	81a3      	strhne	r3, [r4, #12]
 800be84:	bd10      	pop	{r4, pc}

0800be86 <__sclose>:
 800be86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be8a:	f000 b813 	b.w	800beb4 <_close_r>
	...

0800be90 <_write_r>:
 800be90:	b538      	push	{r3, r4, r5, lr}
 800be92:	4d07      	ldr	r5, [pc, #28]	; (800beb0 <_write_r+0x20>)
 800be94:	4604      	mov	r4, r0
 800be96:	4608      	mov	r0, r1
 800be98:	4611      	mov	r1, r2
 800be9a:	2200      	movs	r2, #0
 800be9c:	602a      	str	r2, [r5, #0]
 800be9e:	461a      	mov	r2, r3
 800bea0:	f7fa fa7d 	bl	800639e <_write>
 800bea4:	1c43      	adds	r3, r0, #1
 800bea6:	d102      	bne.n	800beae <_write_r+0x1e>
 800bea8:	682b      	ldr	r3, [r5, #0]
 800beaa:	b103      	cbz	r3, 800beae <_write_r+0x1e>
 800beac:	6023      	str	r3, [r4, #0]
 800beae:	bd38      	pop	{r3, r4, r5, pc}
 800beb0:	200077d0 	.word	0x200077d0

0800beb4 <_close_r>:
 800beb4:	b538      	push	{r3, r4, r5, lr}
 800beb6:	4d06      	ldr	r5, [pc, #24]	; (800bed0 <_close_r+0x1c>)
 800beb8:	2300      	movs	r3, #0
 800beba:	4604      	mov	r4, r0
 800bebc:	4608      	mov	r0, r1
 800bebe:	602b      	str	r3, [r5, #0]
 800bec0:	f7fa fa89 	bl	80063d6 <_close>
 800bec4:	1c43      	adds	r3, r0, #1
 800bec6:	d102      	bne.n	800bece <_close_r+0x1a>
 800bec8:	682b      	ldr	r3, [r5, #0]
 800beca:	b103      	cbz	r3, 800bece <_close_r+0x1a>
 800becc:	6023      	str	r3, [r4, #0]
 800bece:	bd38      	pop	{r3, r4, r5, pc}
 800bed0:	200077d0 	.word	0x200077d0

0800bed4 <_fstat_r>:
 800bed4:	b538      	push	{r3, r4, r5, lr}
 800bed6:	4d07      	ldr	r5, [pc, #28]	; (800bef4 <_fstat_r+0x20>)
 800bed8:	2300      	movs	r3, #0
 800beda:	4604      	mov	r4, r0
 800bedc:	4608      	mov	r0, r1
 800bede:	4611      	mov	r1, r2
 800bee0:	602b      	str	r3, [r5, #0]
 800bee2:	f7fa fa84 	bl	80063ee <_fstat>
 800bee6:	1c43      	adds	r3, r0, #1
 800bee8:	d102      	bne.n	800bef0 <_fstat_r+0x1c>
 800beea:	682b      	ldr	r3, [r5, #0]
 800beec:	b103      	cbz	r3, 800bef0 <_fstat_r+0x1c>
 800beee:	6023      	str	r3, [r4, #0]
 800bef0:	bd38      	pop	{r3, r4, r5, pc}
 800bef2:	bf00      	nop
 800bef4:	200077d0 	.word	0x200077d0

0800bef8 <_isatty_r>:
 800bef8:	b538      	push	{r3, r4, r5, lr}
 800befa:	4d06      	ldr	r5, [pc, #24]	; (800bf14 <_isatty_r+0x1c>)
 800befc:	2300      	movs	r3, #0
 800befe:	4604      	mov	r4, r0
 800bf00:	4608      	mov	r0, r1
 800bf02:	602b      	str	r3, [r5, #0]
 800bf04:	f7fa fa83 	bl	800640e <_isatty>
 800bf08:	1c43      	adds	r3, r0, #1
 800bf0a:	d102      	bne.n	800bf12 <_isatty_r+0x1a>
 800bf0c:	682b      	ldr	r3, [r5, #0]
 800bf0e:	b103      	cbz	r3, 800bf12 <_isatty_r+0x1a>
 800bf10:	6023      	str	r3, [r4, #0]
 800bf12:	bd38      	pop	{r3, r4, r5, pc}
 800bf14:	200077d0 	.word	0x200077d0

0800bf18 <_lseek_r>:
 800bf18:	b538      	push	{r3, r4, r5, lr}
 800bf1a:	4d07      	ldr	r5, [pc, #28]	; (800bf38 <_lseek_r+0x20>)
 800bf1c:	4604      	mov	r4, r0
 800bf1e:	4608      	mov	r0, r1
 800bf20:	4611      	mov	r1, r2
 800bf22:	2200      	movs	r2, #0
 800bf24:	602a      	str	r2, [r5, #0]
 800bf26:	461a      	mov	r2, r3
 800bf28:	f7fa fa7c 	bl	8006424 <_lseek>
 800bf2c:	1c43      	adds	r3, r0, #1
 800bf2e:	d102      	bne.n	800bf36 <_lseek_r+0x1e>
 800bf30:	682b      	ldr	r3, [r5, #0]
 800bf32:	b103      	cbz	r3, 800bf36 <_lseek_r+0x1e>
 800bf34:	6023      	str	r3, [r4, #0]
 800bf36:	bd38      	pop	{r3, r4, r5, pc}
 800bf38:	200077d0 	.word	0x200077d0

0800bf3c <memmove>:
 800bf3c:	4288      	cmp	r0, r1
 800bf3e:	b510      	push	{r4, lr}
 800bf40:	eb01 0402 	add.w	r4, r1, r2
 800bf44:	d902      	bls.n	800bf4c <memmove+0x10>
 800bf46:	4284      	cmp	r4, r0
 800bf48:	4623      	mov	r3, r4
 800bf4a:	d807      	bhi.n	800bf5c <memmove+0x20>
 800bf4c:	1e43      	subs	r3, r0, #1
 800bf4e:	42a1      	cmp	r1, r4
 800bf50:	d008      	beq.n	800bf64 <memmove+0x28>
 800bf52:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bf56:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bf5a:	e7f8      	b.n	800bf4e <memmove+0x12>
 800bf5c:	4402      	add	r2, r0
 800bf5e:	4601      	mov	r1, r0
 800bf60:	428a      	cmp	r2, r1
 800bf62:	d100      	bne.n	800bf66 <memmove+0x2a>
 800bf64:	bd10      	pop	{r4, pc}
 800bf66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bf6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bf6e:	e7f7      	b.n	800bf60 <memmove+0x24>

0800bf70 <__malloc_lock>:
 800bf70:	4801      	ldr	r0, [pc, #4]	; (800bf78 <__malloc_lock+0x8>)
 800bf72:	f7ff b9a7 	b.w	800b2c4 <__retarget_lock_acquire_recursive>
 800bf76:	bf00      	nop
 800bf78:	200077c4 	.word	0x200077c4

0800bf7c <__malloc_unlock>:
 800bf7c:	4801      	ldr	r0, [pc, #4]	; (800bf84 <__malloc_unlock+0x8>)
 800bf7e:	f7ff b9a2 	b.w	800b2c6 <__retarget_lock_release_recursive>
 800bf82:	bf00      	nop
 800bf84:	200077c4 	.word	0x200077c4

0800bf88 <_realloc_r>:
 800bf88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf8c:	4680      	mov	r8, r0
 800bf8e:	4614      	mov	r4, r2
 800bf90:	460e      	mov	r6, r1
 800bf92:	b921      	cbnz	r1, 800bf9e <_realloc_r+0x16>
 800bf94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bf98:	4611      	mov	r1, r2
 800bf9a:	f7ff ba67 	b.w	800b46c <_malloc_r>
 800bf9e:	b92a      	cbnz	r2, 800bfac <_realloc_r+0x24>
 800bfa0:	f7ff f9f8 	bl	800b394 <_free_r>
 800bfa4:	4625      	mov	r5, r4
 800bfa6:	4628      	mov	r0, r5
 800bfa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfac:	f000 f82e 	bl	800c00c <_malloc_usable_size_r>
 800bfb0:	4284      	cmp	r4, r0
 800bfb2:	4607      	mov	r7, r0
 800bfb4:	d802      	bhi.n	800bfbc <_realloc_r+0x34>
 800bfb6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bfba:	d812      	bhi.n	800bfe2 <_realloc_r+0x5a>
 800bfbc:	4621      	mov	r1, r4
 800bfbe:	4640      	mov	r0, r8
 800bfc0:	f7ff fa54 	bl	800b46c <_malloc_r>
 800bfc4:	4605      	mov	r5, r0
 800bfc6:	2800      	cmp	r0, #0
 800bfc8:	d0ed      	beq.n	800bfa6 <_realloc_r+0x1e>
 800bfca:	42bc      	cmp	r4, r7
 800bfcc:	4622      	mov	r2, r4
 800bfce:	4631      	mov	r1, r6
 800bfd0:	bf28      	it	cs
 800bfd2:	463a      	movcs	r2, r7
 800bfd4:	f7fe fe1c 	bl	800ac10 <memcpy>
 800bfd8:	4631      	mov	r1, r6
 800bfda:	4640      	mov	r0, r8
 800bfdc:	f7ff f9da 	bl	800b394 <_free_r>
 800bfe0:	e7e1      	b.n	800bfa6 <_realloc_r+0x1e>
 800bfe2:	4635      	mov	r5, r6
 800bfe4:	e7df      	b.n	800bfa6 <_realloc_r+0x1e>
	...

0800bfe8 <_read_r>:
 800bfe8:	b538      	push	{r3, r4, r5, lr}
 800bfea:	4d07      	ldr	r5, [pc, #28]	; (800c008 <_read_r+0x20>)
 800bfec:	4604      	mov	r4, r0
 800bfee:	4608      	mov	r0, r1
 800bff0:	4611      	mov	r1, r2
 800bff2:	2200      	movs	r2, #0
 800bff4:	602a      	str	r2, [r5, #0]
 800bff6:	461a      	mov	r2, r3
 800bff8:	f7fa f9b4 	bl	8006364 <_read>
 800bffc:	1c43      	adds	r3, r0, #1
 800bffe:	d102      	bne.n	800c006 <_read_r+0x1e>
 800c000:	682b      	ldr	r3, [r5, #0]
 800c002:	b103      	cbz	r3, 800c006 <_read_r+0x1e>
 800c004:	6023      	str	r3, [r4, #0]
 800c006:	bd38      	pop	{r3, r4, r5, pc}
 800c008:	200077d0 	.word	0x200077d0

0800c00c <_malloc_usable_size_r>:
 800c00c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c010:	1f18      	subs	r0, r3, #4
 800c012:	2b00      	cmp	r3, #0
 800c014:	bfbc      	itt	lt
 800c016:	580b      	ldrlt	r3, [r1, r0]
 800c018:	18c0      	addlt	r0, r0, r3
 800c01a:	4770      	bx	lr

0800c01c <_init>:
 800c01c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c01e:	bf00      	nop
 800c020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c022:	bc08      	pop	{r3}
 800c024:	469e      	mov	lr, r3
 800c026:	4770      	bx	lr

0800c028 <_fini>:
 800c028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c02a:	bf00      	nop
 800c02c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c02e:	bc08      	pop	{r3}
 800c030:	469e      	mov	lr, r3
 800c032:	4770      	bx	lr
