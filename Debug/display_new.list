
display_new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061a0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000056c  08006330  08006330  00016330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800689c  0800689c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800689c  0800689c  0001689c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080068a4  080068a4  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068a4  080068a4  000168a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080068a8  080068a8  000168a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080068ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002e38  20000078  08006924  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002eb0  08006924  00022eb0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001294d  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cc3  00000000  00000000  000329f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f80  00000000  00000000  000356b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e78  00000000  00000000  00036638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023bdc  00000000  00000000  000374b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001482c  00000000  00000000  0005b08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd1a6  00000000  00000000  0006f8b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013ca5e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004828  00000000  00000000  0013cab0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006318 	.word	0x08006318

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08006318 	.word	0x08006318

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <Init_LCD>:
void ili9488_fillRect(uint16_t x1, uint16_t y1, uint16_t w, uint16_t h, uint16_t color);
void delay_ms(__IO uint32_t nCount1);
void ili9488_set_coordinates(uint16_t x1,uint16_t y1, uint16_t x2,uint16_t y2);

void Init_LCD()
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
	interrupt_initialize_priorities();		// initialize IRQ
 8000598:	f000 f806 	bl	80005a8 <interrupt_initialize_priorities>
	//*****************************************************************************
		iopins_ini();							// initialize IO pins
 800059c:	f000 f80c 	bl	80005b8 <iopins_ini>

	//*****************************************************************************
		initialize_ili9488();					// initialize LCD
 80005a0:	f000 fa12 	bl	80009c8 <initialize_ili9488>
}
 80005a4:	bf00      	nop
 80005a6:	bd80      	pop	{r7, pc}

080005a8 <interrupt_initialize_priorities>:

void interrupt_initialize_priorities()
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4); //4 bits for preemp priority 0 bit for sub priority
 80005ac:	2003      	movs	r0, #3
 80005ae:	f002 fc35 	bl	8002e1c <HAL_NVIC_SetPriorityGrouping>
}
 80005b2:	bf00      	nop
 80005b4:	bd80      	pop	{r7, pc}
	...

080005b8 <iopins_ini>:

void iopins_ini()
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b098      	sub	sp, #96	; 0x60
 80005bc:	af00      	add	r7, sp, #0

	 __GPIOC_CLK_ENABLE();
 80005be:	2300      	movs	r3, #0
 80005c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80005c2:	4bac      	ldr	r3, [pc, #688]	; (8000874 <iopins_ini+0x2bc>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	4aab      	ldr	r2, [pc, #684]	; (8000874 <iopins_ini+0x2bc>)
 80005c8:	f043 0304 	orr.w	r3, r3, #4
 80005cc:	6313      	str	r3, [r2, #48]	; 0x30
 80005ce:	4ba9      	ldr	r3, [pc, #676]	; (8000874 <iopins_ini+0x2bc>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	f003 0304 	and.w	r3, r3, #4
 80005d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80005d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
	 __GPIOD_CLK_ENABLE();
 80005da:	2300      	movs	r3, #0
 80005dc:	647b      	str	r3, [r7, #68]	; 0x44
 80005de:	4ba5      	ldr	r3, [pc, #660]	; (8000874 <iopins_ini+0x2bc>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	4aa4      	ldr	r2, [pc, #656]	; (8000874 <iopins_ini+0x2bc>)
 80005e4:	f043 0308 	orr.w	r3, r3, #8
 80005e8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ea:	4ba2      	ldr	r3, [pc, #648]	; (8000874 <iopins_ini+0x2bc>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	f003 0308 	and.w	r3, r3, #8
 80005f2:	647b      	str	r3, [r7, #68]	; 0x44
 80005f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
	 __GPIOA_CLK_ENABLE();
 80005f6:	2300      	movs	r3, #0
 80005f8:	643b      	str	r3, [r7, #64]	; 0x40
 80005fa:	4b9e      	ldr	r3, [pc, #632]	; (8000874 <iopins_ini+0x2bc>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	4a9d      	ldr	r2, [pc, #628]	; (8000874 <iopins_ini+0x2bc>)
 8000600:	f043 0301 	orr.w	r3, r3, #1
 8000604:	6313      	str	r3, [r2, #48]	; 0x30
 8000606:	4b9b      	ldr	r3, [pc, #620]	; (8000874 <iopins_ini+0x2bc>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	f003 0301 	and.w	r3, r3, #1
 800060e:	643b      	str	r3, [r7, #64]	; 0x40
 8000610:	6c3b      	ldr	r3, [r7, #64]	; 0x40
	 __GPIOB_CLK_ENABLE();
 8000612:	2300      	movs	r3, #0
 8000614:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000616:	4b97      	ldr	r3, [pc, #604]	; (8000874 <iopins_ini+0x2bc>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	4a96      	ldr	r2, [pc, #600]	; (8000874 <iopins_ini+0x2bc>)
 800061c:	f043 0302 	orr.w	r3, r3, #2
 8000620:	6313      	str	r3, [r2, #48]	; 0x30
 8000622:	4b94      	ldr	r3, [pc, #592]	; (8000874 <iopins_ini+0x2bc>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	f003 0302 	and.w	r3, r3, #2
 800062a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800062c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
	GPIO_InitTypeDef GPIO_InitStruct;

    BUZZER_PORT_RCC();
 800062e:	2300      	movs	r3, #0
 8000630:	63bb      	str	r3, [r7, #56]	; 0x38
 8000632:	4b90      	ldr	r3, [pc, #576]	; (8000874 <iopins_ini+0x2bc>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	4a8f      	ldr	r2, [pc, #572]	; (8000874 <iopins_ini+0x2bc>)
 8000638:	f043 0308 	orr.w	r3, r3, #8
 800063c:	6313      	str	r3, [r2, #48]	; 0x30
 800063e:	4b8d      	ldr	r3, [pc, #564]	; (8000874 <iopins_ini+0x2bc>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	f003 0308 	and.w	r3, r3, #8
 8000646:	63bb      	str	r3, [r7, #56]	; 0x38
 8000648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Pin = BUZZER;
 800064a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800064e:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000650:	2301      	movs	r3, #1
 8000652:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000654:	2300      	movs	r3, #0
 8000656:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(BUZZER_PORT, &GPIO_InitStruct);
 8000658:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800065c:	4619      	mov	r1, r3
 800065e:	4886      	ldr	r0, [pc, #536]	; (8000878 <iopins_ini+0x2c0>)
 8000660:	f002 fcb0 	bl	8002fc4 <HAL_GPIO_Init>

    RS485DIR_PORT_RCC();
 8000664:	2300      	movs	r3, #0
 8000666:	637b      	str	r3, [r7, #52]	; 0x34
 8000668:	4b82      	ldr	r3, [pc, #520]	; (8000874 <iopins_ini+0x2bc>)
 800066a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066c:	4a81      	ldr	r2, [pc, #516]	; (8000874 <iopins_ini+0x2bc>)
 800066e:	f043 0301 	orr.w	r3, r3, #1
 8000672:	6313      	str	r3, [r2, #48]	; 0x30
 8000674:	4b7f      	ldr	r3, [pc, #508]	; (8000874 <iopins_ini+0x2bc>)
 8000676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000678:	f003 0301 	and.w	r3, r3, #1
 800067c:	637b      	str	r3, [r7, #52]	; 0x34
 800067e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Pin = RS485DIR;
 8000680:	2302      	movs	r3, #2
 8000682:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000684:	2301      	movs	r3, #1
 8000686:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000688:	2300      	movs	r3, #0
 800068a:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(RS485DIR_PORT, &GPIO_InitStruct);
 800068c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000690:	4619      	mov	r1, r3
 8000692:	487a      	ldr	r0, [pc, #488]	; (800087c <iopins_ini+0x2c4>)
 8000694:	f002 fc96 	bl	8002fc4 <HAL_GPIO_Init>
//	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
//	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//	 HAL_GPIO_Init(LCD_BACKLIGHT_PORT, &GPIO_InitStruct);
//	HAL_GPIO_WritePin(LCD_BACKLIGHT_PORT,LCD_BACKLIGHT);

    LCD_CS_PORT_RCC();
 8000698:	2300      	movs	r3, #0
 800069a:	633b      	str	r3, [r7, #48]	; 0x30
 800069c:	4b75      	ldr	r3, [pc, #468]	; (8000874 <iopins_ini+0x2bc>)
 800069e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a0:	4a74      	ldr	r2, [pc, #464]	; (8000874 <iopins_ini+0x2bc>)
 80006a2:	f043 0308 	orr.w	r3, r3, #8
 80006a6:	6313      	str	r3, [r2, #48]	; 0x30
 80006a8:	4b72      	ldr	r3, [pc, #456]	; (8000874 <iopins_ini+0x2bc>)
 80006aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ac:	f003 0308 	and.w	r3, r3, #8
 80006b0:	633b      	str	r3, [r7, #48]	; 0x30
 80006b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pin = LCD_CS;
 80006b4:	2380      	movs	r3, #128	; 0x80
 80006b6:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b8:	2301      	movs	r3, #1
 80006ba:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006bc:	2303      	movs	r3, #3
 80006be:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(LCD_CS_PORT, &GPIO_InitStruct);
 80006c0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80006c4:	4619      	mov	r1, r3
 80006c6:	486c      	ldr	r0, [pc, #432]	; (8000878 <iopins_ini+0x2c0>)
 80006c8:	f002 fc7c 	bl	8002fc4 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(LCD_CS_PORT,LCD_CS,GPIO_PIN_SET);
 80006cc:	2201      	movs	r2, #1
 80006ce:	2180      	movs	r1, #128	; 0x80
 80006d0:	4869      	ldr	r0, [pc, #420]	; (8000878 <iopins_ini+0x2c0>)
 80006d2:	f002 fe13 	bl	80032fc <HAL_GPIO_WritePin>

    LCD_RES_PORT_RCC();
 80006d6:	2300      	movs	r3, #0
 80006d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80006da:	4b66      	ldr	r3, [pc, #408]	; (8000874 <iopins_ini+0x2bc>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	4a65      	ldr	r2, [pc, #404]	; (8000874 <iopins_ini+0x2bc>)
 80006e0:	f043 0301 	orr.w	r3, r3, #1
 80006e4:	6313      	str	r3, [r2, #48]	; 0x30
 80006e6:	4b63      	ldr	r3, [pc, #396]	; (8000874 <iopins_ini+0x2bc>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	f003 0301 	and.w	r3, r3, #1
 80006ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80006f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Pin = LCD_RES;
 80006f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006f6:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f8:	2301      	movs	r3, #1
 80006fa:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed =GPIO_SPEED_FREQ_VERY_HIGH;
 80006fc:	2303      	movs	r3, #3
 80006fe:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(LCD_RES_PORT, &GPIO_InitStruct);
 8000700:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000704:	4619      	mov	r1, r3
 8000706:	485d      	ldr	r0, [pc, #372]	; (800087c <iopins_ini+0x2c4>)
 8000708:	f002 fc5c 	bl	8002fc4 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(LCD_RES_PORT,LCD_RES,GPIO_PIN_RESET);
 800070c:	2200      	movs	r2, #0
 800070e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000712:	485a      	ldr	r0, [pc, #360]	; (800087c <iopins_ini+0x2c4>)
 8000714:	f002 fdf2 	bl	80032fc <HAL_GPIO_WritePin>
	delay_ms(50);
 8000718:	2032      	movs	r0, #50	; 0x32
 800071a:	f000 f9cf 	bl	8000abc <delay_ms>
	HAL_GPIO_WritePin(LCD_RES_PORT,LCD_RES,GPIO_PIN_SET);
 800071e:	2201      	movs	r2, #1
 8000720:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000724:	4855      	ldr	r0, [pc, #340]	; (800087c <iopins_ini+0x2c4>)
 8000726:	f002 fde9 	bl	80032fc <HAL_GPIO_WritePin>

    LCD_DCX_PORT_RCC();
 800072a:	2300      	movs	r3, #0
 800072c:	62bb      	str	r3, [r7, #40]	; 0x28
 800072e:	4b51      	ldr	r3, [pc, #324]	; (8000874 <iopins_ini+0x2bc>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	4a50      	ldr	r2, [pc, #320]	; (8000874 <iopins_ini+0x2bc>)
 8000734:	f043 0308 	orr.w	r3, r3, #8
 8000738:	6313      	str	r3, [r2, #48]	; 0x30
 800073a:	4b4e      	ldr	r3, [pc, #312]	; (8000874 <iopins_ini+0x2bc>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	f003 0308 	and.w	r3, r3, #8
 8000742:	62bb      	str	r3, [r7, #40]	; 0x28
 8000744:	6abb      	ldr	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pin = LCD_DCX;
 8000746:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800074a:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800074c:	2301      	movs	r3, #1
 800074e:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed =GPIO_SPEED_FREQ_VERY_HIGH;
 8000750:	2303      	movs	r3, #3
 8000752:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(LCD_DCX_PORT, &GPIO_InitStruct);
 8000754:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000758:	4619      	mov	r1, r3
 800075a:	4847      	ldr	r0, [pc, #284]	; (8000878 <iopins_ini+0x2c0>)
 800075c:	f002 fc32 	bl	8002fc4 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(LCD_DCX_PORT,LCD_DCX,GPIO_PIN_SET);
 8000760:	2201      	movs	r2, #1
 8000762:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000766:	4844      	ldr	r0, [pc, #272]	; (8000878 <iopins_ini+0x2c0>)
 8000768:	f002 fdc8 	bl	80032fc <HAL_GPIO_WritePin>

    FLASH_CS_PORT_RCC();
 800076c:	2300      	movs	r3, #0
 800076e:	627b      	str	r3, [r7, #36]	; 0x24
 8000770:	4b40      	ldr	r3, [pc, #256]	; (8000874 <iopins_ini+0x2bc>)
 8000772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000774:	4a3f      	ldr	r2, [pc, #252]	; (8000874 <iopins_ini+0x2bc>)
 8000776:	f043 0301 	orr.w	r3, r3, #1
 800077a:	6313      	str	r3, [r2, #48]	; 0x30
 800077c:	4b3d      	ldr	r3, [pc, #244]	; (8000874 <iopins_ini+0x2bc>)
 800077e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000780:	f003 0301 	and.w	r3, r3, #1
 8000784:	627b      	str	r3, [r7, #36]	; 0x24
 8000786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Pin = FLASH_CS;
 8000788:	2310      	movs	r3, #16
 800078a:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078c:	2301      	movs	r3, #1
 800078e:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed =GPIO_SPEED_FREQ_VERY_HIGH;
 8000790:	2303      	movs	r3, #3
 8000792:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(FLASH_CS_PORT, &GPIO_InitStruct);
 8000794:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000798:	4619      	mov	r1, r3
 800079a:	4838      	ldr	r0, [pc, #224]	; (800087c <iopins_ini+0x2c4>)
 800079c:	f002 fc12 	bl	8002fc4 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(FLASH_CS_PORT,FLASH_CS,GPIO_PIN_SET);
 80007a0:	2201      	movs	r2, #1
 80007a2:	2110      	movs	r1, #16
 80007a4:	4835      	ldr	r0, [pc, #212]	; (800087c <iopins_ini+0x2c4>)
 80007a6:	f002 fda9 	bl	80032fc <HAL_GPIO_WritePin>

    FLASH_WP_PORT_RCC();
 80007aa:	2300      	movs	r3, #0
 80007ac:	623b      	str	r3, [r7, #32]
 80007ae:	4b31      	ldr	r3, [pc, #196]	; (8000874 <iopins_ini+0x2bc>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a30      	ldr	r2, [pc, #192]	; (8000874 <iopins_ini+0x2bc>)
 80007b4:	f043 0304 	orr.w	r3, r3, #4
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b2e      	ldr	r3, [pc, #184]	; (8000874 <iopins_ini+0x2bc>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0304 	and.w	r3, r3, #4
 80007c2:	623b      	str	r3, [r7, #32]
 80007c4:	6a3b      	ldr	r3, [r7, #32]
	GPIO_InitStruct.Pin = FLASH_WP;
 80007c6:	2310      	movs	r3, #16
 80007c8:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ca:	2301      	movs	r3, #1
 80007cc:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ce:	2300      	movs	r3, #0
 80007d0:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(FLASH_WP_PORT, &GPIO_InitStruct);
 80007d2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80007d6:	4619      	mov	r1, r3
 80007d8:	4829      	ldr	r0, [pc, #164]	; (8000880 <iopins_ini+0x2c8>)
 80007da:	f002 fbf3 	bl	8002fc4 <HAL_GPIO_Init>
	 HAL_GPIO_WritePin(FLASH_WP_PORT,FLASH_WP,GPIO_PIN_RESET);
 80007de:	2200      	movs	r2, #0
 80007e0:	2110      	movs	r1, #16
 80007e2:	4827      	ldr	r0, [pc, #156]	; (8000880 <iopins_ini+0x2c8>)
 80007e4:	f002 fd8a 	bl	80032fc <HAL_GPIO_WritePin>

    FRAM_CS_PORT_RCC();
 80007e8:	2300      	movs	r3, #0
 80007ea:	61fb      	str	r3, [r7, #28]
 80007ec:	4b21      	ldr	r3, [pc, #132]	; (8000874 <iopins_ini+0x2bc>)
 80007ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f0:	4a20      	ldr	r2, [pc, #128]	; (8000874 <iopins_ini+0x2bc>)
 80007f2:	f043 0302 	orr.w	r3, r3, #2
 80007f6:	6313      	str	r3, [r2, #48]	; 0x30
 80007f8:	4b1e      	ldr	r3, [pc, #120]	; (8000874 <iopins_ini+0x2bc>)
 80007fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fc:	f003 0302 	and.w	r3, r3, #2
 8000800:	61fb      	str	r3, [r7, #28]
 8000802:	69fb      	ldr	r3, [r7, #28]
	GPIO_InitStruct.Pin = FRAM_CS;
 8000804:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000808:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080a:	2301      	movs	r3, #1
 800080c:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed =GPIO_SPEED_FREQ_VERY_HIGH;
 800080e:	2303      	movs	r3, #3
 8000810:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(FRAM_CS_PORT, &GPIO_InitStruct);
 8000812:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000816:	4619      	mov	r1, r3
 8000818:	481a      	ldr	r0, [pc, #104]	; (8000884 <iopins_ini+0x2cc>)
 800081a:	f002 fbd3 	bl	8002fc4 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(FRAM_CS_PORT,FRAM_CS,GPIO_PIN_SET);
 800081e:	2201      	movs	r2, #1
 8000820:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000824:	4817      	ldr	r0, [pc, #92]	; (8000884 <iopins_ini+0x2cc>)
 8000826:	f002 fd69 	bl	80032fc <HAL_GPIO_WritePin>

    FRAM_HOLD_PORT_RCC();
 800082a:	2300      	movs	r3, #0
 800082c:	61bb      	str	r3, [r7, #24]
 800082e:	4b11      	ldr	r3, [pc, #68]	; (8000874 <iopins_ini+0x2bc>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4a10      	ldr	r2, [pc, #64]	; (8000874 <iopins_ini+0x2bc>)
 8000834:	f043 0304 	orr.w	r3, r3, #4
 8000838:	6313      	str	r3, [r2, #48]	; 0x30
 800083a:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <iopins_ini+0x2bc>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f003 0304 	and.w	r3, r3, #4
 8000842:	61bb      	str	r3, [r7, #24]
 8000844:	69bb      	ldr	r3, [r7, #24]
	GPIO_InitStruct.Pin = FRAM_HOLD;
 8000846:	2302      	movs	r3, #2
 8000848:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084a:	2301      	movs	r3, #1
 800084c:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed =GPIO_SPEED_FREQ_VERY_HIGH;
 800084e:	2303      	movs	r3, #3
 8000850:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(FRAM_HOLD_PORT, &GPIO_InitStruct);
 8000852:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000856:	4619      	mov	r1, r3
 8000858:	4809      	ldr	r0, [pc, #36]	; (8000880 <iopins_ini+0x2c8>)
 800085a:	f002 fbb3 	bl	8002fc4 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(FRAM_HOLD_PORT,FRAM_HOLD,GPIO_PIN_SET);
 800085e:	2201      	movs	r2, #1
 8000860:	2102      	movs	r1, #2
 8000862:	4807      	ldr	r0, [pc, #28]	; (8000880 <iopins_ini+0x2c8>)
 8000864:	f002 fd4a 	bl	80032fc <HAL_GPIO_WritePin>

    FRAM_WP_PORT_RCC();
 8000868:	2300      	movs	r3, #0
 800086a:	617b      	str	r3, [r7, #20]
 800086c:	4b01      	ldr	r3, [pc, #4]	; (8000874 <iopins_ini+0x2bc>)
 800086e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000870:	e00a      	b.n	8000888 <iopins_ini+0x2d0>
 8000872:	bf00      	nop
 8000874:	40023800 	.word	0x40023800
 8000878:	40020c00 	.word	0x40020c00
 800087c:	40020000 	.word	0x40020000
 8000880:	40020800 	.word	0x40020800
 8000884:	40020400 	.word	0x40020400
 8000888:	4a4b      	ldr	r2, [pc, #300]	; (80009b8 <iopins_ini+0x400>)
 800088a:	f043 0304 	orr.w	r3, r3, #4
 800088e:	6313      	str	r3, [r2, #48]	; 0x30
 8000890:	4b49      	ldr	r3, [pc, #292]	; (80009b8 <iopins_ini+0x400>)
 8000892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000894:	f003 0304 	and.w	r3, r3, #4
 8000898:	617b      	str	r3, [r7, #20]
 800089a:	697b      	ldr	r3, [r7, #20]
	GPIO_InitStruct.Pin = FRAM_WP;
 800089c:	2301      	movs	r3, #1
 800089e:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a0:	2301      	movs	r3, #1
 80008a2:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a4:	2300      	movs	r3, #0
 80008a6:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(FRAM_WP_PORT, &GPIO_InitStruct);
 80008a8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80008ac:	4619      	mov	r1, r3
 80008ae:	4843      	ldr	r0, [pc, #268]	; (80009bc <iopins_ini+0x404>)
 80008b0:	f002 fb88 	bl	8002fc4 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(FRAM_WP_PORT,FRAM_WP,GPIO_PIN_SET);
 80008b4:	2201      	movs	r2, #1
 80008b6:	2101      	movs	r1, #1
 80008b8:	4840      	ldr	r0, [pc, #256]	; (80009bc <iopins_ini+0x404>)
 80008ba:	f002 fd1f 	bl	80032fc <HAL_GPIO_WritePin>


    LED_DBG_PORT_RCC();
 80008be:	2300      	movs	r3, #0
 80008c0:	613b      	str	r3, [r7, #16]
 80008c2:	4b3d      	ldr	r3, [pc, #244]	; (80009b8 <iopins_ini+0x400>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a3c      	ldr	r2, [pc, #240]	; (80009b8 <iopins_ini+0x400>)
 80008c8:	f043 0302 	orr.w	r3, r3, #2
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b3a      	ldr	r3, [pc, #232]	; (80009b8 <iopins_ini+0x400>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0302 	and.w	r3, r3, #2
 80008d6:	613b      	str	r3, [r7, #16]
 80008d8:	693b      	ldr	r3, [r7, #16]
	GPIO_InitStruct.Pin = LED_DBG_1;
 80008da:	2308      	movs	r3, #8
 80008dc:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008de:	2301      	movs	r3, #1
 80008e0:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e2:	2300      	movs	r3, #0
 80008e4:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(LED_DBG_PORT, &GPIO_InitStruct);
 80008e6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80008ea:	4619      	mov	r1, r3
 80008ec:	4834      	ldr	r0, [pc, #208]	; (80009c0 <iopins_ini+0x408>)
 80008ee:	f002 fb69 	bl	8002fc4 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(LED_DBG_PORT,LED_DBG_1,GPIO_PIN_SET);
 80008f2:	2201      	movs	r2, #1
 80008f4:	2108      	movs	r1, #8
 80008f6:	4832      	ldr	r0, [pc, #200]	; (80009c0 <iopins_ini+0x408>)
 80008f8:	f002 fd00 	bl	80032fc <HAL_GPIO_WritePin>


    BUTTON_0_PORT_RCC();
 80008fc:	2300      	movs	r3, #0
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	4b2d      	ldr	r3, [pc, #180]	; (80009b8 <iopins_ini+0x400>)
 8000902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000904:	4a2c      	ldr	r2, [pc, #176]	; (80009b8 <iopins_ini+0x400>)
 8000906:	f043 0301 	orr.w	r3, r3, #1
 800090a:	6313      	str	r3, [r2, #48]	; 0x30
 800090c:	4b2a      	ldr	r3, [pc, #168]	; (80009b8 <iopins_ini+0x400>)
 800090e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000910:	f003 0301 	and.w	r3, r3, #1
 8000914:	60fb      	str	r3, [r7, #12]
 8000916:	68fb      	ldr	r3, [r7, #12]
	GPIO_InitStruct.Pin = BUTTON_0;
 8000918:	f44f 7380 	mov.w	r3, #256	; 0x100
 800091c:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800091e:	2300      	movs	r3, #0
 8000920:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Pull= GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	657b      	str	r3, [r7, #84]	; 0x54
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000926:	2300      	movs	r3, #0
 8000928:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(BUTTON_0_PORT, &GPIO_InitStruct);
 800092a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800092e:	4619      	mov	r1, r3
 8000930:	4824      	ldr	r0, [pc, #144]	; (80009c4 <iopins_ini+0x40c>)
 8000932:	f002 fb47 	bl	8002fc4 <HAL_GPIO_Init>

    BUTTON_1_PORT_RCC();
 8000936:	2300      	movs	r3, #0
 8000938:	60bb      	str	r3, [r7, #8]
 800093a:	4b1f      	ldr	r3, [pc, #124]	; (80009b8 <iopins_ini+0x400>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a1e      	ldr	r2, [pc, #120]	; (80009b8 <iopins_ini+0x400>)
 8000940:	f043 0304 	orr.w	r3, r3, #4
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b1c      	ldr	r3, [pc, #112]	; (80009b8 <iopins_ini+0x400>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0304 	and.w	r3, r3, #4
 800094e:	60bb      	str	r3, [r7, #8]
 8000950:	68bb      	ldr	r3, [r7, #8]
	GPIO_InitStruct.Pin = BUTTON_1;
 8000952:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000956:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000958:	2300      	movs	r3, #0
 800095a:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Pull= GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	657b      	str	r3, [r7, #84]	; 0x54
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000960:	2300      	movs	r3, #0
 8000962:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(BUTTON_1_PORT, &GPIO_InitStruct);
 8000964:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000968:	4619      	mov	r1, r3
 800096a:	4814      	ldr	r0, [pc, #80]	; (80009bc <iopins_ini+0x404>)
 800096c:	f002 fb2a 	bl	8002fc4 <HAL_GPIO_Init>


    TOUCH_RESET_PORT_RCC();
 8000970:	2300      	movs	r3, #0
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	4b10      	ldr	r3, [pc, #64]	; (80009b8 <iopins_ini+0x400>)
 8000976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000978:	4a0f      	ldr	r2, [pc, #60]	; (80009b8 <iopins_ini+0x400>)
 800097a:	f043 0302 	orr.w	r3, r3, #2
 800097e:	6313      	str	r3, [r2, #48]	; 0x30
 8000980:	4b0d      	ldr	r3, [pc, #52]	; (80009b8 <iopins_ini+0x400>)
 8000982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000984:	f003 0302 	and.w	r3, r3, #2
 8000988:	607b      	str	r3, [r7, #4]
 800098a:	687b      	ldr	r3, [r7, #4]
	GPIO_InitStruct.Pin = TOUCH_RESET;
 800098c:	2320      	movs	r3, #32
 800098e:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000990:	2301      	movs	r3, #1
 8000992:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000994:	2300      	movs	r3, #0
 8000996:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(TOUCH_RESET_PORT, &GPIO_InitStruct);
 8000998:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800099c:	4619      	mov	r1, r3
 800099e:	4808      	ldr	r0, [pc, #32]	; (80009c0 <iopins_ini+0x408>)
 80009a0:	f002 fb10 	bl	8002fc4 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(TOUCH_RESET_PORT,TOUCH_RESET,GPIO_PIN_SET);
 80009a4:	2201      	movs	r2, #1
 80009a6:	2120      	movs	r1, #32
 80009a8:	4805      	ldr	r0, [pc, #20]	; (80009c0 <iopins_ini+0x408>)
 80009aa:	f002 fca7 	bl	80032fc <HAL_GPIO_WritePin>
}
 80009ae:	bf00      	nop
 80009b0:	3760      	adds	r7, #96	; 0x60
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40023800 	.word	0x40023800
 80009bc:	40020800 	.word	0x40020800
 80009c0:	40020400 	.word	0x40020400
 80009c4:	40020000 	.word	0x40020000

080009c8 <initialize_ili9488>:
//*****************************************************************************
void initialize_ili9488()
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af02      	add	r7, sp, #8
	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_RESET);
 80009ce:	2200      	movs	r2, #0
 80009d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009d4:	4838      	ldr	r0, [pc, #224]	; (8000ab8 <initialize_ili9488+0xf0>)
 80009d6:	f002 fc91 	bl	80032fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_RESET);
 80009da:	2200      	movs	r2, #0
 80009dc:	2180      	movs	r1, #128	; 0x80
 80009de:	4836      	ldr	r0, [pc, #216]	; (8000ab8 <initialize_ili9488+0xf0>)
 80009e0:	f002 fc8c 	bl	80032fc <HAL_GPIO_WritePin>
	TFT_REG=0x0011;
 80009e4:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80009e8:	2211      	movs	r2, #17
 80009ea:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_SET);
 80009ec:	2201      	movs	r2, #1
 80009ee:	2180      	movs	r1, #128	; 0x80
 80009f0:	4831      	ldr	r0, [pc, #196]	; (8000ab8 <initialize_ili9488+0xf0>)
 80009f2:	f002 fc83 	bl	80032fc <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_RESET);
 80009f6:	2200      	movs	r2, #0
 80009f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009fc:	482e      	ldr	r0, [pc, #184]	; (8000ab8 <initialize_ili9488+0xf0>)
 80009fe:	f002 fc7d 	bl	80032fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS, GPIO_PIN_RESET);
 8000a02:	2200      	movs	r2, #0
 8000a04:	2180      	movs	r1, #128	; 0x80
 8000a06:	482c      	ldr	r0, [pc, #176]	; (8000ab8 <initialize_ili9488+0xf0>)
 8000a08:	f002 fc78 	bl	80032fc <HAL_GPIO_WritePin>
	TFT_REG=0x0029;
 8000a0c:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000a10:	2229      	movs	r2, #41	; 0x29
 8000a12:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS, GPIO_PIN_SET);
 8000a14:	2201      	movs	r2, #1
 8000a16:	2180      	movs	r1, #128	; 0x80
 8000a18:	4827      	ldr	r0, [pc, #156]	; (8000ab8 <initialize_ili9488+0xf0>)
 8000a1a:	f002 fc6f 	bl	80032fc <HAL_GPIO_WritePin>


	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_RESET);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a24:	4824      	ldr	r0, [pc, #144]	; (8000ab8 <initialize_ili9488+0xf0>)
 8000a26:	f002 fc69 	bl	80032fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_RESET);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2180      	movs	r1, #128	; 0x80
 8000a2e:	4822      	ldr	r0, [pc, #136]	; (8000ab8 <initialize_ili9488+0xf0>)
 8000a30:	f002 fc64 	bl	80032fc <HAL_GPIO_WritePin>
	TFT_REG=0x003A;
 8000a34:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000a38:	223a      	movs	r2, #58	; 0x3a
 8000a3a:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_SET);
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a42:	481d      	ldr	r0, [pc, #116]	; (8000ab8 <initialize_ili9488+0xf0>)
 8000a44:	f002 fc5a 	bl	80032fc <HAL_GPIO_WritePin>
	TFT_REG=0x0055;
 8000a48:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000a4c:	2255      	movs	r2, #85	; 0x55
 8000a4e:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS, GPIO_PIN_RESET);
 8000a50:	2200      	movs	r2, #0
 8000a52:	2180      	movs	r1, #128	; 0x80
 8000a54:	4818      	ldr	r0, [pc, #96]	; (8000ab8 <initialize_ili9488+0xf0>)
 8000a56:	f002 fc51 	bl	80032fc <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_RESET);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a60:	4815      	ldr	r0, [pc, #84]	; (8000ab8 <initialize_ili9488+0xf0>)
 8000a62:	f002 fc4b 	bl	80032fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_RESET);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2180      	movs	r1, #128	; 0x80
 8000a6a:	4813      	ldr	r0, [pc, #76]	; (8000ab8 <initialize_ili9488+0xf0>)
 8000a6c:	f002 fc46 	bl	80032fc <HAL_GPIO_WritePin>
	TFT_REG=0x0036;
 8000a70:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000a74:	2236      	movs	r2, #54	; 0x36
 8000a76:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_SET);
 8000a78:	2201      	movs	r2, #1
 8000a7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a7e:	480e      	ldr	r0, [pc, #56]	; (8000ab8 <initialize_ili9488+0xf0>)
 8000a80:	f002 fc3c 	bl	80032fc <HAL_GPIO_WritePin>
	TFT_REG=0x00E8;
 8000a84:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000a88:	22e8      	movs	r2, #232	; 0xe8
 8000a8a:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_RESET);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	2180      	movs	r1, #128	; 0x80
 8000a90:	4809      	ldr	r0, [pc, #36]	; (8000ab8 <initialize_ili9488+0xf0>)
 8000a92:	f002 fc33 	bl	80032fc <HAL_GPIO_WritePin>

	delay_ms(100);
 8000a96:	2064      	movs	r0, #100	; 0x64
 8000a98:	f000 f810 	bl	8000abc <delay_ms>
	ili9488_fillRect(0,0,LCD_PIXEL_WIDTH,LCD_PIXEL_HEIGHT,ORANGE);
 8000a9c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8000aa0:	9300      	str	r3, [sp, #0]
 8000aa2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000aa6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000aaa:	2100      	movs	r1, #0
 8000aac:	2000      	movs	r0, #0
 8000aae:	f000 f81d 	bl	8000aec <ili9488_fillRect>
}
 8000ab2:	bf00      	nop
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	40020c00 	.word	0x40020c00

08000abc <delay_ms>:
void delay_ms(__IO uint32_t nCount1) {
 8000abc:	b480      	push	{r7}
 8000abe:	b085      	sub	sp, #20
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
	__IO uint32_t nCount=nCount1*23666;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	f645 4272 	movw	r2, #23666	; 0x5c72
 8000aca:	fb02 f303 	mul.w	r3, r2, r3
 8000ace:	60fb      	str	r3, [r7, #12]
	while(nCount--) {
 8000ad0:	bf00      	nop
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	1e5a      	subs	r2, r3, #1
 8000ad6:	60fa      	str	r2, [r7, #12]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d1fa      	bne.n	8000ad2 <delay_ms+0x16>
  }
}
 8000adc:	bf00      	nop
 8000ade:	bf00      	nop
 8000ae0:	3714      	adds	r7, #20
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
	...

08000aec <ili9488_fillRect>:
void ili9488_fillRect(uint16_t x1, uint16_t y1, uint16_t w, uint16_t h, uint16_t color)
{
 8000aec:	b590      	push	{r4, r7, lr}
 8000aee:	b085      	sub	sp, #20
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4604      	mov	r4, r0
 8000af4:	4608      	mov	r0, r1
 8000af6:	4611      	mov	r1, r2
 8000af8:	461a      	mov	r2, r3
 8000afa:	4623      	mov	r3, r4
 8000afc:	80fb      	strh	r3, [r7, #6]
 8000afe:	4603      	mov	r3, r0
 8000b00:	80bb      	strh	r3, [r7, #4]
 8000b02:	460b      	mov	r3, r1
 8000b04:	807b      	strh	r3, [r7, #2]
 8000b06:	4613      	mov	r3, r2
 8000b08:	803b      	strh	r3, [r7, #0]
	uint32_t count = w * h;
 8000b0a:	887b      	ldrh	r3, [r7, #2]
 8000b0c:	883a      	ldrh	r2, [r7, #0]
 8000b0e:	fb02 f303 	mul.w	r3, r2, r3
 8000b12:	60bb      	str	r3, [r7, #8]
	ili9488_set_coordinates(x1, y1, (uint16_t) (x1 + w - 1), (uint16_t) (y1 + h - 1));
 8000b14:	88fa      	ldrh	r2, [r7, #6]
 8000b16:	887b      	ldrh	r3, [r7, #2]
 8000b18:	4413      	add	r3, r2
 8000b1a:	b29b      	uxth	r3, r3
 8000b1c:	3b01      	subs	r3, #1
 8000b1e:	b29c      	uxth	r4, r3
 8000b20:	88ba      	ldrh	r2, [r7, #4]
 8000b22:	883b      	ldrh	r3, [r7, #0]
 8000b24:	4413      	add	r3, r2
 8000b26:	b29b      	uxth	r3, r3
 8000b28:	3b01      	subs	r3, #1
 8000b2a:	b29b      	uxth	r3, r3
 8000b2c:	88b9      	ldrh	r1, [r7, #4]
 8000b2e:	88f8      	ldrh	r0, [r7, #6]
 8000b30:	4622      	mov	r2, r4
 8000b32:	f000 f82f 	bl	8000b94 <ili9488_set_coordinates>

	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_RESET);
 8000b36:	2200      	movs	r2, #0
 8000b38:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b3c:	4814      	ldr	r0, [pc, #80]	; (8000b90 <ili9488_fillRect+0xa4>)
 8000b3e:	f002 fbdd 	bl	80032fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_RESET);
 8000b42:	2200      	movs	r2, #0
 8000b44:	2180      	movs	r1, #128	; 0x80
 8000b46:	4812      	ldr	r0, [pc, #72]	; (8000b90 <ili9488_fillRect+0xa4>)
 8000b48:	f002 fbd8 	bl	80032fc <HAL_GPIO_WritePin>
	TFT_REG=0x002C;
 8000b4c:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000b50:	222c      	movs	r2, #44	; 0x2c
 8000b52:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_SET);
 8000b54:	2201      	movs	r2, #1
 8000b56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b5a:	480d      	ldr	r0, [pc, #52]	; (8000b90 <ili9488_fillRect+0xa4>)
 8000b5c:	f002 fbce 	bl	80032fc <HAL_GPIO_WritePin>

	for(unsigned int i=0; i<count; i++)
 8000b60:	2300      	movs	r3, #0
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	e006      	b.n	8000b74 <ili9488_fillRect+0x88>
	{
		TFT_REG=color;
 8000b66:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000b6a:	8c3b      	ldrh	r3, [r7, #32]
 8000b6c:	8013      	strh	r3, [r2, #0]
	for(unsigned int i=0; i<count; i++)
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	3301      	adds	r3, #1
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	68fa      	ldr	r2, [r7, #12]
 8000b76:	68bb      	ldr	r3, [r7, #8]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	d3f4      	bcc.n	8000b66 <ili9488_fillRect+0x7a>
	}
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_SET);
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	2180      	movs	r1, #128	; 0x80
 8000b80:	4803      	ldr	r0, [pc, #12]	; (8000b90 <ili9488_fillRect+0xa4>)
 8000b82:	f002 fbbb 	bl	80032fc <HAL_GPIO_WritePin>
}
 8000b86:	bf00      	nop
 8000b88:	3714      	adds	r7, #20
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd90      	pop	{r4, r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40020c00 	.word	0x40020c00

08000b94 <ili9488_set_coordinates>:
void ili9488_set_coordinates(uint16_t x1,uint16_t y1, uint16_t x2, uint16_t y2)
{
 8000b94:	b590      	push	{r4, r7, lr}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4604      	mov	r4, r0
 8000b9c:	4608      	mov	r0, r1
 8000b9e:	4611      	mov	r1, r2
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	4623      	mov	r3, r4
 8000ba4:	80fb      	strh	r3, [r7, #6]
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	80bb      	strh	r3, [r7, #4]
 8000baa:	460b      	mov	r3, r1
 8000bac:	807b      	strh	r3, [r7, #2]
 8000bae:	4613      	mov	r3, r2
 8000bb0:	803b      	strh	r3, [r7, #0]
	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_RESET);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bb8:	4832      	ldr	r0, [pc, #200]	; (8000c84 <ili9488_set_coordinates+0xf0>)
 8000bba:	f002 fb9f 	bl	80032fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_RESET);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2180      	movs	r1, #128	; 0x80
 8000bc2:	4830      	ldr	r0, [pc, #192]	; (8000c84 <ili9488_set_coordinates+0xf0>)
 8000bc4:	f002 fb9a 	bl	80032fc <HAL_GPIO_WritePin>
	TFT_REG=0x002A;
 8000bc8:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000bcc:	222a      	movs	r2, #42	; 0x2a
 8000bce:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_SET);
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bd6:	482b      	ldr	r0, [pc, #172]	; (8000c84 <ili9488_set_coordinates+0xf0>)
 8000bd8:	f002 fb90 	bl	80032fc <HAL_GPIO_WritePin>
	TFT_REG=x1>>8;
 8000bdc:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000be0:	88fb      	ldrh	r3, [r7, #6]
 8000be2:	0a1b      	lsrs	r3, r3, #8
 8000be4:	b29b      	uxth	r3, r3
 8000be6:	8013      	strh	r3, [r2, #0]
	TFT_REG=x1&0xFF;
 8000be8:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000bec:	88fa      	ldrh	r2, [r7, #6]
 8000bee:	b2d2      	uxtb	r2, r2
 8000bf0:	b292      	uxth	r2, r2
 8000bf2:	801a      	strh	r2, [r3, #0]
	TFT_REG=x2>>8;
 8000bf4:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000bf8:	887b      	ldrh	r3, [r7, #2]
 8000bfa:	0a1b      	lsrs	r3, r3, #8
 8000bfc:	b29b      	uxth	r3, r3
 8000bfe:	8013      	strh	r3, [r2, #0]
	TFT_REG=x2&0xFF;
 8000c00:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000c04:	887a      	ldrh	r2, [r7, #2]
 8000c06:	b2d2      	uxtb	r2, r2
 8000c08:	b292      	uxth	r2, r2
 8000c0a:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_SET);
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	2180      	movs	r1, #128	; 0x80
 8000c10:	481c      	ldr	r0, [pc, #112]	; (8000c84 <ili9488_set_coordinates+0xf0>)
 8000c12:	f002 fb73 	bl	80032fc <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_RESET);
 8000c16:	2200      	movs	r2, #0
 8000c18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c1c:	4819      	ldr	r0, [pc, #100]	; (8000c84 <ili9488_set_coordinates+0xf0>)
 8000c1e:	f002 fb6d 	bl	80032fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_RESET);
 8000c22:	2200      	movs	r2, #0
 8000c24:	2180      	movs	r1, #128	; 0x80
 8000c26:	4817      	ldr	r0, [pc, #92]	; (8000c84 <ili9488_set_coordinates+0xf0>)
 8000c28:	f002 fb68 	bl	80032fc <HAL_GPIO_WritePin>
	TFT_REG=0x002B;
 8000c2c:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000c30:	222b      	movs	r2, #43	; 0x2b
 8000c32:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_SET);
 8000c34:	2201      	movs	r2, #1
 8000c36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c3a:	4812      	ldr	r0, [pc, #72]	; (8000c84 <ili9488_set_coordinates+0xf0>)
 8000c3c:	f002 fb5e 	bl	80032fc <HAL_GPIO_WritePin>
	TFT_REG=y1>>8;
 8000c40:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000c44:	88bb      	ldrh	r3, [r7, #4]
 8000c46:	0a1b      	lsrs	r3, r3, #8
 8000c48:	b29b      	uxth	r3, r3
 8000c4a:	8013      	strh	r3, [r2, #0]
	TFT_REG=y1&0xFF;
 8000c4c:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000c50:	88ba      	ldrh	r2, [r7, #4]
 8000c52:	b2d2      	uxtb	r2, r2
 8000c54:	b292      	uxth	r2, r2
 8000c56:	801a      	strh	r2, [r3, #0]
	TFT_REG=y2>>8;
 8000c58:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000c5c:	883b      	ldrh	r3, [r7, #0]
 8000c5e:	0a1b      	lsrs	r3, r3, #8
 8000c60:	b29b      	uxth	r3, r3
 8000c62:	8013      	strh	r3, [r2, #0]
	TFT_REG=y2&0xFF;
 8000c64:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000c68:	883a      	ldrh	r2, [r7, #0]
 8000c6a:	b2d2      	uxtb	r2, r2
 8000c6c:	b292      	uxth	r2, r2
 8000c6e:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_SET);
 8000c70:	2201      	movs	r2, #1
 8000c72:	2180      	movs	r1, #128	; 0x80
 8000c74:	4803      	ldr	r0, [pc, #12]	; (8000c84 <ili9488_set_coordinates+0xf0>)
 8000c76:	f002 fb41 	bl	80032fc <HAL_GPIO_WritePin>
}
 8000c7a:	bf00      	nop
 8000c7c:	370c      	adds	r7, #12
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd90      	pop	{r4, r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40020c00 	.word	0x40020c00

08000c88 <configFromUart>:

/*
 * Attempts to read configuration data from UART and save them to external flash.
 * Returns: 0 when configuration successful, 1 when no configuration data detected on uart, 2 or greater when configuration failed
 */
int configFromUart(){
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	f5ad 5d4b 	sub.w	sp, sp, #12992	; 0x32c0
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0

	char msg[128];

	int count = read_usart_message(msg, &huart1, sizeof(msg), NEWLINE);
 8000c92:	f507 5048 	add.w	r0, r7, #12800	; 0x3200
 8000c96:	f100 0028 	add.w	r0, r0, #40	; 0x28
 8000c9a:	230d      	movs	r3, #13
 8000c9c:	2280      	movs	r2, #128	; 0x80
 8000c9e:	49b4      	ldr	r1, [pc, #720]	; (8000f70 <configFromUart+0x2e8>)
 8000ca0:	f001 fefc 	bl	8002a9c <read_usart_message>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8000caa:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8000cae:	6013      	str	r3, [r2, #0]



	if(count == 0){
 8000cb0:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8000cb4:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d105      	bne.n	8000cca <configFromUart+0x42>
		printf("[cl] No data on uart.\n\r");
 8000cbe:	48ad      	ldr	r0, [pc, #692]	; (8000f74 <configFromUart+0x2ec>)
 8000cc0:	f004 fb10 	bl	80052e4 <iprintf>
		return 1;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	f000 bdbd 	b.w	8001844 <configFromUart+0xbbc>
	}

	msg[count-1] = 0; //replace newline delimiter with null-termination
 8000cca:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8000cce:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	3b01      	subs	r3, #1
 8000cd6:	f503 534b 	add.w	r3, r3, #12992	; 0x32c0
 8000cda:	f103 0310 	add.w	r3, r3, #16
 8000cde:	443b      	add	r3, r7
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	f803 2ca8 	strb.w	r2, [r3, #-168]

	char expectedFirstMsg[] = "config";
 8000ce6:	4aa4      	ldr	r2, [pc, #656]	; (8000f78 <configFromUart+0x2f0>)
 8000ce8:	f507 5348 	add.w	r3, r7, #12800	; 0x3200
 8000cec:	f103 0320 	add.w	r3, r3, #32
 8000cf0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000cf4:	6018      	str	r0, [r3, #0]
 8000cf6:	3304      	adds	r3, #4
 8000cf8:	8019      	strh	r1, [r3, #0]
 8000cfa:	3302      	adds	r3, #2
 8000cfc:	0c0a      	lsrs	r2, r1, #16
 8000cfe:	701a      	strb	r2, [r3, #0]

	if(strcmp(expectedFirstMsg, msg) != 0){
 8000d00:	f507 5248 	add.w	r2, r7, #12800	; 0x3200
 8000d04:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8000d08:	f507 5348 	add.w	r3, r7, #12800	; 0x3200
 8000d0c:	f103 0320 	add.w	r3, r3, #32
 8000d10:	4611      	mov	r1, r2
 8000d12:	4618      	mov	r0, r3
 8000d14:	f7ff fa5c 	bl	80001d0 <strcmp>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d00e      	beq.n	8000d3c <configFromUart+0xb4>
		printf("[cl] Unexpected first msg. Got %s, wanted %s.\n\r", msg, expectedFirstMsg);
 8000d1e:	f507 5248 	add.w	r2, r7, #12800	; 0x3200
 8000d22:	f102 0220 	add.w	r2, r2, #32
 8000d26:	f507 5348 	add.w	r3, r7, #12800	; 0x3200
 8000d2a:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4892      	ldr	r0, [pc, #584]	; (8000f7c <configFromUart+0x2f4>)
 8000d32:	f004 fad7 	bl	80052e4 <iprintf>
		return 1;
 8000d36:	2301      	movs	r3, #1
 8000d38:	f000 bd84 	b.w	8001844 <configFromUart+0xbbc>
	}

	UART_READ_STRING(); //read general config - number of screens
 8000d3c:	f507 5048 	add.w	r0, r7, #12800	; 0x3200
 8000d40:	f100 0028 	add.w	r0, r0, #40	; 0x28
 8000d44:	230d      	movs	r3, #13
 8000d46:	2280      	movs	r2, #128	; 0x80
 8000d48:	4989      	ldr	r1, [pc, #548]	; (8000f70 <configFromUart+0x2e8>)
 8000d4a:	f001 fea7 	bl	8002a9c <read_usart_message>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8000d54:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8000d58:	6013      	str	r3, [r2, #0]
 8000d5a:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8000d5e:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d0e9      	beq.n	8000d3c <configFromUart+0xb4>
 8000d68:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8000d6c:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	3b01      	subs	r3, #1
 8000d74:	f503 534b 	add.w	r3, r3, #12992	; 0x32c0
 8000d78:	f103 0310 	add.w	r3, r3, #16
 8000d7c:	443b      	add	r3, r7
 8000d7e:	2200      	movs	r2, #0
 8000d80:	f803 2ca8 	strb.w	r2, [r3, #-168]

	int totalScreens = atoi(msg);
 8000d84:	f507 5348 	add.w	r3, r7, #12800	; 0x3200
 8000d88:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f004 fa65 	bl	800525c <atoi>
 8000d92:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8000d96:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8000d9a:	6018      	str	r0, [r3, #0]

	if(totalScreens < 1 || totalScreens >256){
 8000d9c:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8000da0:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	dd07      	ble.n	8000dba <configFromUart+0x132>
 8000daa:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8000dae:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000db8:	dd0a      	ble.n	8000dd0 <configFromUart+0x148>
		printf("[cl] Got %d, which is not a valid number of screens.\n\r", totalScreens);
 8000dba:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8000dbe:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8000dc2:	6819      	ldr	r1, [r3, #0]
 8000dc4:	486e      	ldr	r0, [pc, #440]	; (8000f80 <configFromUart+0x2f8>)
 8000dc6:	f004 fa8d 	bl	80052e4 <iprintf>
		return 2;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	f000 bd3a 	b.w	8001844 <configFromUart+0xbbc>
	}

	struct generalConfig gconf;

	memset(&gconf.screenSectors, 0, sizeof(gconf.screenSectors));
 8000dd0:	f507 5340 	add.w	r3, r7, #12288	; 0x3000
 8000dd4:	f103 031c 	add.w	r3, r3, #28
 8000dd8:	3302      	adds	r3, #2
 8000dda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dde:	2100      	movs	r1, #0
 8000de0:	4618      	mov	r0, r3
 8000de2:	f004 fa77 	bl	80052d4 <memset>
	gconf.totalScreens = totalScreens;
 8000de6:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8000dea:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	b2da      	uxtb	r2, r3
 8000df2:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8000df6:	f103 0310 	add.w	r3, r3, #16
 8000dfa:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8000dfe:	701a      	strb	r2, [r3, #0]

	printf("[cl] Ok, expecting %d screens worth of data.\n\r", totalScreens);
 8000e00:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8000e04:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8000e08:	6819      	ldr	r1, [r3, #0]
 8000e0a:	485e      	ldr	r0, [pc, #376]	; (8000f84 <configFromUart+0x2fc>)
 8000e0c:	f004 fa6a 	bl	80052e4 <iprintf>

	uint8_t currentScreenIndex = -1;
 8000e10:	23ff      	movs	r3, #255	; 0xff
 8000e12:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 8000e16:	f102 020f 	add.w	r2, r2, #15
 8000e1a:	7013      	strb	r3, [r2, #0]
	uint16_t currentSector = GENERAL_CONFIG_SECTOR;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 8000e22:	f102 020c 	add.w	r2, r2, #12
 8000e26:	8013      	strh	r3, [r2, #0]
	uint16_t currentScreenObjectsLeft = 0;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8000e2e:	f102 0236 	add.w	r2, r2, #54	; 0x36
 8000e32:	8013      	strh	r3, [r2, #0]

	char screenStr[] = "screen";
 8000e34:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8000e38:	f103 0310 	add.w	r3, r3, #16
 8000e3c:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 8000e40:	4a51      	ldr	r2, [pc, #324]	; (8000f88 <configFromUart+0x300>)
 8000e42:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e46:	6018      	str	r0, [r3, #0]
 8000e48:	3304      	adds	r3, #4
 8000e4a:	8019      	strh	r1, [r3, #0]
 8000e4c:	3302      	adds	r3, #2
 8000e4e:	0c0a      	lsrs	r2, r1, #16
 8000e50:	701a      	strb	r2, [r3, #0]

	#define MAX_DATA_SIZE 8192
	uint8_t sectorBuffer[SECTOR_SIZE]; //holds sector before writing to external flash
	int sectorBufferIndex = 0;
 8000e52:	2300      	movs	r3, #0
 8000e54:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 8000e58:	f102 0208 	add.w	r2, r2, #8
 8000e5c:	6013      	str	r3, [r2, #0]
	uint8_t dataBuffer[MAX_DATA_SIZE];
	int dataBufferIndex = 0;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8000e64:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8000e68:	6013      	str	r3, [r2, #0]

	while(1){

		if(currentScreenIndex + 1 == totalScreens){
 8000e6a:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8000e6e:	f103 030f 	add.w	r3, r3, #15
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	3301      	adds	r3, #1
 8000e76:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8000e7a:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8000e7e:	6812      	ldr	r2, [r2, #0]
 8000e80:	429a      	cmp	r2, r3
 8000e82:	d133      	bne.n	8000eec <configFromUart+0x264>
			printf("[cl] All screens' data received.\n\r");
 8000e84:	4841      	ldr	r0, [pc, #260]	; (8000f8c <configFromUart+0x304>)
 8000e86:	f004 fa2d 	bl	80052e4 <iprintf>

	//all screens have been written.
	//Now save generic config, since sector address array has been completed:


	sectorBufferIndex = 0;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 8000e90:	f102 0208 	add.w	r2, r2, #8
 8000e94:	6013      	str	r3, [r2, #0]
	memcpy(sectorBuffer+sectorBufferIndex, (uint8_t *) &gconf, sizeof(gconf));
 8000e96:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8000e9a:	f103 0308 	add.w	r3, r3, #8
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000ea4:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8000ea8:	3b1c      	subs	r3, #28
 8000eaa:	4413      	add	r3, r2
 8000eac:	f507 5140 	add.w	r1, r7, #12288	; 0x3000
 8000eb0:	f101 011c 	add.w	r1, r1, #28
 8000eb4:	f240 2202 	movw	r2, #514	; 0x202
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f004 f9fd 	bl	80052b8 <memcpy>
	ext_flash_write(GENERAL_CONFIG_SECTOR, sectorBuffer, SECTOR_SIZE);
 8000ebe:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000ec2:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8000ec6:	3b1c      	subs	r3, #28
 8000ec8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ecc:	4619      	mov	r1, r3
 8000ece:	2000      	movs	r0, #0
 8000ed0:	f000 fd4e 	bl	8001970 <ext_flash_write>

	printf("[cl] Config from UART finished. Last sector written to: %d \n\r", currentSector);
 8000ed4:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8000ed8:	f103 030c 	add.w	r3, r3, #12
 8000edc:	881b      	ldrh	r3, [r3, #0]
 8000ede:	4619      	mov	r1, r3
 8000ee0:	482b      	ldr	r0, [pc, #172]	; (8000f90 <configFromUart+0x308>)
 8000ee2:	f004 f9ff 	bl	80052e4 <iprintf>

	return 0;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	f000 bcac 	b.w	8001844 <configFromUart+0xbbc>
		UART_READ_STRING();
 8000eec:	f507 5048 	add.w	r0, r7, #12800	; 0x3200
 8000ef0:	f100 0028 	add.w	r0, r0, #40	; 0x28
 8000ef4:	230d      	movs	r3, #13
 8000ef6:	2280      	movs	r2, #128	; 0x80
 8000ef8:	491d      	ldr	r1, [pc, #116]	; (8000f70 <configFromUart+0x2e8>)
 8000efa:	f001 fdcf 	bl	8002a9c <read_usart_message>
 8000efe:	4603      	mov	r3, r0
 8000f00:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8000f04:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8000f08:	6013      	str	r3, [r2, #0]
 8000f0a:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8000f0e:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d0e9      	beq.n	8000eec <configFromUart+0x264>
 8000f18:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8000f1c:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	3b01      	subs	r3, #1
 8000f24:	f503 534b 	add.w	r3, r3, #12992	; 0x32c0
 8000f28:	f103 0310 	add.w	r3, r3, #16
 8000f2c:	443b      	add	r3, r7
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f803 2ca8 	strb.w	r2, [r3, #-168]
		if(strcmp(screenStr, msg) != 0){
 8000f34:	f507 5248 	add.w	r2, r7, #12800	; 0x3200
 8000f38:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8000f3c:	f507 5340 	add.w	r3, r7, #12288	; 0x3000
 8000f40:	f103 0314 	add.w	r3, r3, #20
 8000f44:	4611      	mov	r1, r2
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff f942 	bl	80001d0 <strcmp>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d022      	beq.n	8000f98 <configFromUart+0x310>
			printf("[cl] Unexpected input - wanted %s, got %s. \n\r",screenStr, msg);
 8000f52:	f507 5248 	add.w	r2, r7, #12800	; 0x3200
 8000f56:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8000f5a:	f507 5340 	add.w	r3, r7, #12288	; 0x3000
 8000f5e:	f103 0314 	add.w	r3, r3, #20
 8000f62:	4619      	mov	r1, r3
 8000f64:	480b      	ldr	r0, [pc, #44]	; (8000f94 <configFromUart+0x30c>)
 8000f66:	f004 f9bd 	bl	80052e4 <iprintf>
			return 3;
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	f000 bc6a 	b.w	8001844 <configFromUart+0xbbc>
 8000f70:	20000198 	.word	0x20000198
 8000f74:	0800634c 	.word	0x0800634c
 8000f78:	080065f0 	.word	0x080065f0
 8000f7c:	08006364 	.word	0x08006364
 8000f80:	08006394 	.word	0x08006394
 8000f84:	080063cc 	.word	0x080063cc
 8000f88:	080065f8 	.word	0x080065f8
 8000f8c:	080063fc 	.word	0x080063fc
 8000f90:	08006420 	.word	0x08006420
 8000f94:	08006460 	.word	0x08006460
		UART_READ_STRING();
 8000f98:	f507 5048 	add.w	r0, r7, #12800	; 0x3200
 8000f9c:	f100 0028 	add.w	r0, r0, #40	; 0x28
 8000fa0:	230d      	movs	r3, #13
 8000fa2:	2280      	movs	r2, #128	; 0x80
 8000fa4:	4974      	ldr	r1, [pc, #464]	; (8001178 <configFromUart+0x4f0>)
 8000fa6:	f001 fd79 	bl	8002a9c <read_usart_message>
 8000faa:	4603      	mov	r3, r0
 8000fac:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8000fb0:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8000fb4:	6013      	str	r3, [r2, #0]
 8000fb6:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8000fba:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d0e9      	beq.n	8000f98 <configFromUart+0x310>
 8000fc4:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8000fc8:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	3b01      	subs	r3, #1
 8000fd0:	f503 534b 	add.w	r3, r3, #12992	; 0x32c0
 8000fd4:	f103 0310 	add.w	r3, r3, #16
 8000fd8:	443b      	add	r3, r7
 8000fda:	2200      	movs	r2, #0
 8000fdc:	f803 2ca8 	strb.w	r2, [r3, #-168]
		currentScreenObjectsLeft = atoi(msg);
 8000fe0:	f507 5348 	add.w	r3, r7, #12800	; 0x3200
 8000fe4:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f004 f937 	bl	800525c <atoi>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8000ff4:	f102 0236 	add.w	r2, r2, #54	; 0x36
 8000ff8:	8013      	strh	r3, [r2, #0]
		printf("[cl] Ok, expecting %d objects for current screen.\n\r", currentScreenObjectsLeft);
 8000ffa:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8000ffe:	f103 0336 	add.w	r3, r3, #54	; 0x36
 8001002:	881b      	ldrh	r3, [r3, #0]
 8001004:	4619      	mov	r1, r3
 8001006:	485d      	ldr	r0, [pc, #372]	; (800117c <configFromUart+0x4f4>)
 8001008:	f004 f96c 	bl	80052e4 <iprintf>
		screenVar.objectCount = currentScreenObjectsLeft;
 800100c:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8001010:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8001014:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8001018:	f102 0236 	add.w	r2, r2, #54	; 0x36
 800101c:	8812      	ldrh	r2, [r2, #0]
 800101e:	805a      	strh	r2, [r3, #2]
		screenVar.screenNumber = currentScreenIndex;
 8001020:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8001024:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 8001028:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 800102c:	f102 020f 	add.w	r2, r2, #15
 8001030:	7812      	ldrb	r2, [r2, #0]
 8001032:	701a      	strb	r2, [r3, #0]
		currentSector += 1; //begin new sector -- screens are sector-aligned for easier access
 8001034:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8001038:	f103 030c 	add.w	r3, r3, #12
 800103c:	881b      	ldrh	r3, [r3, #0]
 800103e:	3301      	adds	r3, #1
 8001040:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 8001044:	f102 020c 	add.w	r2, r2, #12
 8001048:	8013      	strh	r3, [r2, #0]
		currentScreenIndex += 1;
 800104a:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 800104e:	f103 030f 	add.w	r3, r3, #15
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	3301      	adds	r3, #1
 8001056:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 800105a:	f102 020f 	add.w	r2, r2, #15
 800105e:	7013      	strb	r3, [r2, #0]
		gconf.screenSectors[currentScreenIndex] = currentSector;
 8001060:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8001064:	f103 030f 	add.w	r3, r3, #15
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 800106e:	f102 0210 	add.w	r2, r2, #16
 8001072:	f5a2 722d 	sub.w	r2, r2, #692	; 0x2b4
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	4413      	add	r3, r2
 800107a:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 800107e:	f102 020c 	add.w	r2, r2, #12
 8001082:	8812      	ldrh	r2, [r2, #0]
 8001084:	805a      	strh	r2, [r3, #2]
		ext_flash_erase_4kB(currentSector);
 8001086:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 800108a:	f103 030c 	add.w	r3, r3, #12
 800108e:	881b      	ldrh	r3, [r3, #0]
 8001090:	4618      	mov	r0, r3
 8001092:	f000 fc37 	bl	8001904 <ext_flash_erase_4kB>
		memset(sectorBuffer, 0, SECTOR_SIZE);
 8001096:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800109a:	f103 0330 	add.w	r3, r3, #48	; 0x30
 800109e:	3b1c      	subs	r3, #28
 80010a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010a4:	2100      	movs	r1, #0
 80010a6:	4618      	mov	r0, r3
 80010a8:	f004 f914 	bl	80052d4 <memset>
		sectorBufferIndex = 0;
 80010ac:	2300      	movs	r3, #0
 80010ae:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 80010b2:	f102 0208 	add.w	r2, r2, #8
 80010b6:	6013      	str	r3, [r2, #0]
		memcpy(sectorBuffer+sectorBufferIndex, (uint8_t *) &screenVar, sizeof(screenVar));
 80010b8:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 80010bc:	f103 0308 	add.w	r3, r3, #8
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80010c6:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80010ca:	3b1c      	subs	r3, #28
 80010cc:	4413      	add	r3, r2
 80010ce:	f507 7234 	add.w	r2, r7, #720	; 0x2d0
 80010d2:	f5a2 7230 	sub.w	r2, r2, #704	; 0x2c0
 80010d6:	6812      	ldr	r2, [r2, #0]
 80010d8:	601a      	str	r2, [r3, #0]
		sectorBufferIndex += sizeof(screenVar);
 80010da:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 80010de:	f103 0308 	add.w	r3, r3, #8
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	3304      	adds	r3, #4
 80010e6:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 80010ea:	f102 0208 	add.w	r2, r2, #8
 80010ee:	6013      	str	r3, [r2, #0]
		while(currentScreenObjectsLeft > 0){
 80010f0:	e38f      	b.n	8001812 <configFromUart+0xb8a>
			UART_READ_STRING();
 80010f2:	f507 5048 	add.w	r0, r7, #12800	; 0x3200
 80010f6:	f100 0028 	add.w	r0, r0, #40	; 0x28
 80010fa:	230d      	movs	r3, #13
 80010fc:	2280      	movs	r2, #128	; 0x80
 80010fe:	491e      	ldr	r1, [pc, #120]	; (8001178 <configFromUart+0x4f0>)
 8001100:	f001 fccc 	bl	8002a9c <read_usart_message>
 8001104:	4603      	mov	r3, r0
 8001106:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 800110a:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 800110e:	6013      	str	r3, [r2, #0]
 8001110:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8001114:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d0e9      	beq.n	80010f2 <configFromUart+0x46a>
 800111e:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8001122:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	3b01      	subs	r3, #1
 800112a:	f503 534b 	add.w	r3, r3, #12992	; 0x32c0
 800112e:	f103 0310 	add.w	r3, r3, #16
 8001132:	443b      	add	r3, r7
 8001134:	2200      	movs	r2, #0
 8001136:	f803 2ca8 	strb.w	r2, [r3, #-168]
			currentObject.objectType = parseTypeFromString(msg);
 800113a:	f507 5348 	add.w	r3, r7, #12800	; 0x3200
 800113e:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001142:	4618      	mov	r0, r3
 8001144:	f000 fb8a 	bl	800185c <parseTypeFromString>
 8001148:	4603      	mov	r3, r0
 800114a:	461a      	mov	r2, r3
 800114c:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8001150:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8001154:	701a      	strb	r2, [r3, #0]
			if(currentObject.objectType == none){
 8001156:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800115a:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d10f      	bne.n	8001184 <configFromUart+0x4fc>
				printf("[cl] Object type %s not recognized. \n\r", msg);
 8001164:	f507 5348 	add.w	r3, r7, #12800	; 0x3200
 8001168:	f103 0328 	add.w	r3, r3, #40	; 0x28
 800116c:	4619      	mov	r1, r3
 800116e:	4804      	ldr	r0, [pc, #16]	; (8001180 <configFromUart+0x4f8>)
 8001170:	f004 f8b8 	bl	80052e4 <iprintf>
				return 4;
 8001174:	2304      	movs	r3, #4
 8001176:	e365      	b.n	8001844 <configFromUart+0xbbc>
 8001178:	20000198 	.word	0x20000198
 800117c:	08006490 	.word	0x08006490
 8001180:	080064c4 	.word	0x080064c4
			UART_READ_STRING();
 8001184:	f507 5048 	add.w	r0, r7, #12800	; 0x3200
 8001188:	f100 0028 	add.w	r0, r0, #40	; 0x28
 800118c:	230d      	movs	r3, #13
 800118e:	2280      	movs	r2, #128	; 0x80
 8001190:	49d6      	ldr	r1, [pc, #856]	; (80014ec <configFromUart+0x864>)
 8001192:	f001 fc83 	bl	8002a9c <read_usart_message>
 8001196:	4603      	mov	r3, r0
 8001198:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 800119c:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 80011a0:	6013      	str	r3, [r2, #0]
 80011a2:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 80011a6:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d0e9      	beq.n	8001184 <configFromUart+0x4fc>
 80011b0:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 80011b4:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	3b01      	subs	r3, #1
 80011bc:	f503 534b 	add.w	r3, r3, #12992	; 0x32c0
 80011c0:	f103 0310 	add.w	r3, r3, #16
 80011c4:	443b      	add	r3, r7
 80011c6:	2200      	movs	r2, #0
 80011c8:	f803 2ca8 	strb.w	r2, [r3, #-168]
			currentObject.objectId = (uint16_t) atoi(msg);
 80011cc:	f507 5348 	add.w	r3, r7, #12800	; 0x3200
 80011d0:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80011d4:	4618      	mov	r0, r3
 80011d6:	f004 f841 	bl	800525c <atoi>
 80011da:	4603      	mov	r3, r0
 80011dc:	b29a      	uxth	r2, r3
 80011de:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80011e2:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80011e6:	805a      	strh	r2, [r3, #2]
			UART_READ_STRING();
 80011e8:	f507 5048 	add.w	r0, r7, #12800	; 0x3200
 80011ec:	f100 0028 	add.w	r0, r0, #40	; 0x28
 80011f0:	230d      	movs	r3, #13
 80011f2:	2280      	movs	r2, #128	; 0x80
 80011f4:	49bd      	ldr	r1, [pc, #756]	; (80014ec <configFromUart+0x864>)
 80011f6:	f001 fc51 	bl	8002a9c <read_usart_message>
 80011fa:	4603      	mov	r3, r0
 80011fc:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8001200:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8001204:	6013      	str	r3, [r2, #0]
 8001206:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 800120a:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d0e9      	beq.n	80011e8 <configFromUart+0x560>
 8001214:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8001218:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	3b01      	subs	r3, #1
 8001220:	f503 534b 	add.w	r3, r3, #12992	; 0x32c0
 8001224:	f103 0310 	add.w	r3, r3, #16
 8001228:	443b      	add	r3, r7
 800122a:	2200      	movs	r2, #0
 800122c:	f803 2ca8 	strb.w	r2, [r3, #-168]
			currentObject.xstart = (uint16_t) atoi(msg);
 8001230:	f507 5348 	add.w	r3, r7, #12800	; 0x3200
 8001234:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001238:	4618      	mov	r0, r3
 800123a:	f004 f80f 	bl	800525c <atoi>
 800123e:	4603      	mov	r3, r0
 8001240:	b29a      	uxth	r2, r3
 8001242:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8001246:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 800124a:	809a      	strh	r2, [r3, #4]
			UART_READ_STRING();
 800124c:	f507 5048 	add.w	r0, r7, #12800	; 0x3200
 8001250:	f100 0028 	add.w	r0, r0, #40	; 0x28
 8001254:	230d      	movs	r3, #13
 8001256:	2280      	movs	r2, #128	; 0x80
 8001258:	49a4      	ldr	r1, [pc, #656]	; (80014ec <configFromUart+0x864>)
 800125a:	f001 fc1f 	bl	8002a9c <read_usart_message>
 800125e:	4603      	mov	r3, r0
 8001260:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8001264:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8001268:	6013      	str	r3, [r2, #0]
 800126a:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 800126e:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d0e9      	beq.n	800124c <configFromUart+0x5c4>
 8001278:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 800127c:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	3b01      	subs	r3, #1
 8001284:	f503 534b 	add.w	r3, r3, #12992	; 0x32c0
 8001288:	f103 0310 	add.w	r3, r3, #16
 800128c:	443b      	add	r3, r7
 800128e:	2200      	movs	r2, #0
 8001290:	f803 2ca8 	strb.w	r2, [r3, #-168]
			currentObject.ystart = (uint16_t) atoi(msg);
 8001294:	f507 5348 	add.w	r3, r7, #12800	; 0x3200
 8001298:	f103 0328 	add.w	r3, r3, #40	; 0x28
 800129c:	4618      	mov	r0, r3
 800129e:	f003 ffdd 	bl	800525c <atoi>
 80012a2:	4603      	mov	r3, r0
 80012a4:	b29a      	uxth	r2, r3
 80012a6:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80012aa:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80012ae:	80da      	strh	r2, [r3, #6]
			UART_READ_STRING();
 80012b0:	f507 5048 	add.w	r0, r7, #12800	; 0x3200
 80012b4:	f100 0028 	add.w	r0, r0, #40	; 0x28
 80012b8:	230d      	movs	r3, #13
 80012ba:	2280      	movs	r2, #128	; 0x80
 80012bc:	498b      	ldr	r1, [pc, #556]	; (80014ec <configFromUart+0x864>)
 80012be:	f001 fbed 	bl	8002a9c <read_usart_message>
 80012c2:	4603      	mov	r3, r0
 80012c4:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 80012c8:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 80012cc:	6013      	str	r3, [r2, #0]
 80012ce:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 80012d2:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d0e9      	beq.n	80012b0 <configFromUart+0x628>
 80012dc:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 80012e0:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	3b01      	subs	r3, #1
 80012e8:	f503 534b 	add.w	r3, r3, #12992	; 0x32c0
 80012ec:	f103 0310 	add.w	r3, r3, #16
 80012f0:	443b      	add	r3, r7
 80012f2:	2200      	movs	r2, #0
 80012f4:	f803 2ca8 	strb.w	r2, [r3, #-168]
			currentObject.xend = (uint16_t) atoi(msg);
 80012f8:	f507 5348 	add.w	r3, r7, #12800	; 0x3200
 80012fc:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001300:	4618      	mov	r0, r3
 8001302:	f003 ffab 	bl	800525c <atoi>
 8001306:	4603      	mov	r3, r0
 8001308:	b29a      	uxth	r2, r3
 800130a:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800130e:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8001312:	811a      	strh	r2, [r3, #8]
			UART_READ_STRING();
 8001314:	f507 5048 	add.w	r0, r7, #12800	; 0x3200
 8001318:	f100 0028 	add.w	r0, r0, #40	; 0x28
 800131c:	230d      	movs	r3, #13
 800131e:	2280      	movs	r2, #128	; 0x80
 8001320:	4972      	ldr	r1, [pc, #456]	; (80014ec <configFromUart+0x864>)
 8001322:	f001 fbbb 	bl	8002a9c <read_usart_message>
 8001326:	4603      	mov	r3, r0
 8001328:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 800132c:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8001330:	6013      	str	r3, [r2, #0]
 8001332:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8001336:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d0e9      	beq.n	8001314 <configFromUart+0x68c>
 8001340:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8001344:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	3b01      	subs	r3, #1
 800134c:	f503 534b 	add.w	r3, r3, #12992	; 0x32c0
 8001350:	f103 0310 	add.w	r3, r3, #16
 8001354:	443b      	add	r3, r7
 8001356:	2200      	movs	r2, #0
 8001358:	f803 2ca8 	strb.w	r2, [r3, #-168]
			currentObject.yend = (uint16_t) atoi(msg);
 800135c:	f507 5348 	add.w	r3, r7, #12800	; 0x3200
 8001360:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001364:	4618      	mov	r0, r3
 8001366:	f003 ff79 	bl	800525c <atoi>
 800136a:	4603      	mov	r3, r0
 800136c:	b29a      	uxth	r2, r3
 800136e:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8001372:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8001376:	815a      	strh	r2, [r3, #10]
			UART_READ_STRING();
 8001378:	f507 5048 	add.w	r0, r7, #12800	; 0x3200
 800137c:	f100 0028 	add.w	r0, r0, #40	; 0x28
 8001380:	230d      	movs	r3, #13
 8001382:	2280      	movs	r2, #128	; 0x80
 8001384:	4959      	ldr	r1, [pc, #356]	; (80014ec <configFromUart+0x864>)
 8001386:	f001 fb89 	bl	8002a9c <read_usart_message>
 800138a:	4603      	mov	r3, r0
 800138c:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8001390:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8001394:	6013      	str	r3, [r2, #0]
 8001396:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 800139a:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d0e9      	beq.n	8001378 <configFromUart+0x6f0>
 80013a4:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 80013a8:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	3b01      	subs	r3, #1
 80013b0:	f503 534b 	add.w	r3, r3, #12992	; 0x32c0
 80013b4:	f103 0310 	add.w	r3, r3, #16
 80013b8:	443b      	add	r3, r7
 80013ba:	2200      	movs	r2, #0
 80013bc:	f803 2ca8 	strb.w	r2, [r3, #-168]
			currentObject.dataLen = (uint16_t) atoi(msg);
 80013c0:	f507 5348 	add.w	r3, r7, #12800	; 0x3200
 80013c4:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80013c8:	4618      	mov	r0, r3
 80013ca:	f003 ff47 	bl	800525c <atoi>
 80013ce:	4603      	mov	r3, r0
 80013d0:	b29a      	uxth	r2, r3
 80013d2:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80013d6:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80013da:	819a      	strh	r2, [r3, #12]
			if(currentObject.dataLen > MAX_DATA_SIZE){
 80013dc:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80013e0:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80013e4:	899b      	ldrh	r3, [r3, #12]
 80013e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80013ea:	d90a      	bls.n	8001402 <configFromUart+0x77a>
				printf("[cl] Object (id=%d) data too large. %d\n\r", currentObject.objectId);
 80013ec:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80013f0:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80013f4:	885b      	ldrh	r3, [r3, #2]
 80013f6:	4619      	mov	r1, r3
 80013f8:	483d      	ldr	r0, [pc, #244]	; (80014f0 <configFromUart+0x868>)
 80013fa:	f003 ff73 	bl	80052e4 <iprintf>
				return 5;
 80013fe:	2305      	movs	r3, #5
 8001400:	e220      	b.n	8001844 <configFromUart+0xbbc>
			int spaceLeft = SECTOR_SIZE - sectorBufferIndex;
 8001402:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8001406:	f103 0308 	add.w	r3, r3, #8
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8001410:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8001414:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8001418:	6013      	str	r3, [r2, #0]
			if(spaceLeft >= sizeof(currentObject)){
 800141a:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 800141e:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2b0d      	cmp	r3, #13
 8001426:	d91d      	bls.n	8001464 <configFromUart+0x7dc>
				memcpy(sectorBuffer+sectorBufferIndex, (uint8_t *) &currentObject, sizeof(currentObject));
 8001428:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 800142c:	f103 0308 	add.w	r3, r3, #8
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001436:	f103 0330 	add.w	r3, r3, #48	; 0x30
 800143a:	3b1c      	subs	r3, #28
 800143c:	1898      	adds	r0, r3, r2
 800143e:	f107 0310 	add.w	r3, r7, #16
 8001442:	3b10      	subs	r3, #16
 8001444:	220e      	movs	r2, #14
 8001446:	4619      	mov	r1, r3
 8001448:	f003 ff36 	bl	80052b8 <memcpy>
				sectorBufferIndex += sizeof(currentObject);
 800144c:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8001450:	f103 0308 	add.w	r3, r3, #8
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	330e      	adds	r3, #14
 8001458:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 800145c:	f102 0208 	add.w	r2, r2, #8
 8001460:	6013      	str	r3, [r2, #0]
 8001462:	e091      	b.n	8001588 <configFromUart+0x900>
				memcpy(sectorBuffer+sectorBufferIndex, (uint8_t *) &currentObject, spaceLeft);
 8001464:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8001468:	f103 0308 	add.w	r3, r3, #8
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001472:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8001476:	3b1c      	subs	r3, #28
 8001478:	1898      	adds	r0, r3, r2
 800147a:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 800147e:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	f107 0310 	add.w	r3, r7, #16
 8001488:	3b10      	subs	r3, #16
 800148a:	4619      	mov	r1, r3
 800148c:	f003 ff14 	bl	80052b8 <memcpy>
				ext_flash_write(currentSector, sectorBuffer, SECTOR_SIZE);
 8001490:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8001494:	f103 030c 	add.w	r3, r3, #12
 8001498:	8818      	ldrh	r0, [r3, #0]
 800149a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800149e:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80014a2:	3b1c      	subs	r3, #28
 80014a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014a8:	4619      	mov	r1, r3
 80014aa:	f000 fa61 	bl	8001970 <ext_flash_write>
				currentSector += 1;
 80014ae:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 80014b2:	f103 030c 	add.w	r3, r3, #12
 80014b6:	881b      	ldrh	r3, [r3, #0]
 80014b8:	3301      	adds	r3, #1
 80014ba:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 80014be:	f102 020c 	add.w	r2, r2, #12
 80014c2:	8013      	strh	r3, [r2, #0]
				if(currentSector > MAX_SECTOR){
 80014c4:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 80014c8:	f103 030c 	add.w	r3, r3, #12
 80014cc:	881b      	ldrh	r3, [r3, #0]
 80014ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80014d2:	d311      	bcc.n	80014f8 <configFromUart+0x870>
					printf("[cl] External memory size exceeded trying to save header of object id %d\n\r", currentObject.objectId);
 80014d4:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80014d8:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80014dc:	885b      	ldrh	r3, [r3, #2]
 80014de:	4619      	mov	r1, r3
 80014e0:	4804      	ldr	r0, [pc, #16]	; (80014f4 <configFromUart+0x86c>)
 80014e2:	f003 feff 	bl	80052e4 <iprintf>
					return 6;
 80014e6:	2306      	movs	r3, #6
 80014e8:	e1ac      	b.n	8001844 <configFromUart+0xbbc>
 80014ea:	bf00      	nop
 80014ec:	20000198 	.word	0x20000198
 80014f0:	080064ec 	.word	0x080064ec
 80014f4:	08006518 	.word	0x08006518
				ext_flash_erase_4kB(currentSector);
 80014f8:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 80014fc:	f103 030c 	add.w	r3, r3, #12
 8001500:	881b      	ldrh	r3, [r3, #0]
 8001502:	4618      	mov	r0, r3
 8001504:	f000 f9fe 	bl	8001904 <ext_flash_erase_4kB>
				memset(sectorBuffer, 0, SECTOR_SIZE);
 8001508:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800150c:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8001510:	3b1c      	subs	r3, #28
 8001512:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001516:	2100      	movs	r1, #0
 8001518:	4618      	mov	r0, r3
 800151a:	f003 fedb 	bl	80052d4 <memset>
				sectorBufferIndex = 0;
 800151e:	2300      	movs	r3, #0
 8001520:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 8001524:	f102 0208 	add.w	r2, r2, #8
 8001528:	6013      	str	r3, [r2, #0]
				memcpy(sectorBuffer+sectorBufferIndex, ((uint8_t *) &currentObject)+spaceLeft, (sizeof(currentObject) - spaceLeft));
 800152a:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 800152e:	f103 0308 	add.w	r3, r3, #8
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001538:	f103 0330 	add.w	r3, r3, #48	; 0x30
 800153c:	3b1c      	subs	r3, #28
 800153e:	1898      	adds	r0, r3, r2
 8001540:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8001544:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	f107 0310 	add.w	r3, r7, #16
 800154e:	3b10      	subs	r3, #16
 8001550:	1899      	adds	r1, r3, r2
 8001552:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8001556:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f1c3 030e 	rsb	r3, r3, #14
 8001560:	461a      	mov	r2, r3
 8001562:	f003 fea9 	bl	80052b8 <memcpy>
				sectorBufferIndex += (sizeof(currentObject) - spaceLeft);
 8001566:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 800156a:	f103 0308 	add.w	r3, r3, #8
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8001574:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	330e      	adds	r3, #14
 800157e:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 8001582:	f102 0208 	add.w	r2, r2, #8
 8001586:	6013      	str	r3, [r2, #0]
			uint16_t objectDataBytesLeft = currentObject.dataLen;
 8001588:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800158c:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8001590:	899b      	ldrh	r3, [r3, #12]
 8001592:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 8001596:	f102 0206 	add.w	r2, r2, #6
 800159a:	8013      	strh	r3, [r2, #0]
			int dataBufferIndex = 0;
 800159c:	2300      	movs	r3, #0
 800159e:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 80015a2:	6013      	str	r3, [r2, #0]
			while(objectDataBytesLeft > 0){
 80015a4:	e051      	b.n	800164a <configFromUart+0x9c2>
				do{count = read_usart_message(msg, &huart1, 2, NEWLINE);} while (count==0);
 80015a6:	f507 5048 	add.w	r0, r7, #12800	; 0x3200
 80015aa:	f100 0028 	add.w	r0, r0, #40	; 0x28
 80015ae:	230d      	movs	r3, #13
 80015b0:	2202      	movs	r2, #2
 80015b2:	49a7      	ldr	r1, [pc, #668]	; (8001850 <configFromUart+0xbc8>)
 80015b4:	f001 fa72 	bl	8002a9c <read_usart_message>
 80015b8:	4603      	mov	r3, r0
 80015ba:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 80015be:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 80015c2:	6013      	str	r3, [r2, #0]
 80015c4:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 80015c8:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d0e9      	beq.n	80015a6 <configFromUart+0x91e>
				if(count!=2){
 80015d2:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 80015d6:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d00a      	beq.n	80015f6 <configFromUart+0x96e>
					printf("[cl] Unexpected newline in hex data of object with id %d \n\r", currentObject.objectId);
 80015e0:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80015e4:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80015e8:	885b      	ldrh	r3, [r3, #2]
 80015ea:	4619      	mov	r1, r3
 80015ec:	4899      	ldr	r0, [pc, #612]	; (8001854 <configFromUart+0xbcc>)
 80015ee:	f003 fe79 	bl	80052e4 <iprintf>
					return 7;
 80015f2:	2307      	movs	r3, #7
 80015f4:	e126      	b.n	8001844 <configFromUart+0xbbc>
				msg[2] = 0;
 80015f6:	2300      	movs	r3, #0
 80015f8:	f507 5248 	add.w	r2, r7, #12800	; 0x3200
 80015fc:	f102 022a 	add.w	r2, r2, #42	; 0x2a
 8001600:	7013      	strb	r3, [r2, #0]
				uint8_t deHexedByte = (uint8_t) strtol(msg, NULL, 16);
 8001602:	f507 5348 	add.w	r3, r7, #12800	; 0x3200
 8001606:	f103 0328 	add.w	r3, r3, #40	; 0x28
 800160a:	2210      	movs	r2, #16
 800160c:	2100      	movs	r1, #0
 800160e:	4618      	mov	r0, r3
 8001610:	f003 ff02 	bl	8005418 <strtol>
 8001614:	4603      	mov	r3, r0
 8001616:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 800161a:	f102 022b 	add.w	r2, r2, #43	; 0x2b
 800161e:	7013      	strb	r3, [r2, #0]
				dataBuffer[dataBufferIndex] = deHexedByte;
 8001620:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8001624:	f5a3 722f 	sub.w	r2, r3, #700	; 0x2bc
 8001628:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4413      	add	r3, r2
 8001630:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8001634:	f102 022b 	add.w	r2, r2, #43	; 0x2b
 8001638:	7812      	ldrb	r2, [r2, #0]
 800163a:	701a      	strb	r2, [r3, #0]
				dataBufferIndex++;
 800163c:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	3301      	adds	r3, #1
 8001644:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 8001648:	6013      	str	r3, [r2, #0]
			while(objectDataBytesLeft > 0){
 800164a:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 800164e:	f103 0306 	add.w	r3, r3, #6
 8001652:	881b      	ldrh	r3, [r3, #0]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d1a6      	bne.n	80015a6 <configFromUart+0x91e>
			objectDataBytesLeft = currentObject.dataLen;
 8001658:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800165c:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 8001660:	899b      	ldrh	r3, [r3, #12]
 8001662:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 8001666:	f102 0206 	add.w	r2, r2, #6
 800166a:	8013      	strh	r3, [r2, #0]
			dataBufferIndex = 0;
 800166c:	2300      	movs	r3, #0
 800166e:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 8001672:	6013      	str	r3, [r2, #0]
			while(objectDataBytesLeft > 0){
 8001674:	e0c5      	b.n	8001802 <configFromUart+0xb7a>
				spaceLeft = SECTOR_SIZE - sectorBufferIndex;
 8001676:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 800167a:	f103 0308 	add.w	r3, r3, #8
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8001684:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8001688:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 800168c:	6013      	str	r3, [r2, #0]
				if(spaceLeft >= objectDataBytesLeft){
 800168e:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8001692:	f103 0306 	add.w	r3, r3, #6
 8001696:	881b      	ldrh	r3, [r3, #0]
 8001698:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 800169c:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 80016a0:	6812      	ldr	r2, [r2, #0]
 80016a2:	429a      	cmp	r2, r3
 80016a4:	db30      	blt.n	8001708 <configFromUart+0xa80>
					memcpy(sectorBuffer+sectorBufferIndex, dataBuffer + dataBufferIndex, objectDataBytesLeft);
 80016a6:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 80016aa:	f103 0308 	add.w	r3, r3, #8
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80016b4:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80016b8:	3b1c      	subs	r3, #28
 80016ba:	1898      	adds	r0, r3, r2
 80016bc:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80016c6:	3b3c      	subs	r3, #60	; 0x3c
 80016c8:	4413      	add	r3, r2
 80016ca:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 80016ce:	f102 0206 	add.w	r2, r2, #6
 80016d2:	8812      	ldrh	r2, [r2, #0]
 80016d4:	4619      	mov	r1, r3
 80016d6:	f003 fdef 	bl	80052b8 <memcpy>
					sectorBufferIndex += objectDataBytesLeft;
 80016da:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 80016de:	f103 0306 	add.w	r3, r3, #6
 80016e2:	881b      	ldrh	r3, [r3, #0]
 80016e4:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 80016e8:	f102 0208 	add.w	r2, r2, #8
 80016ec:	6812      	ldr	r2, [r2, #0]
 80016ee:	4413      	add	r3, r2
 80016f0:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 80016f4:	f102 0208 	add.w	r2, r2, #8
 80016f8:	6013      	str	r3, [r2, #0]
					objectDataBytesLeft = 0;
 80016fa:	2300      	movs	r3, #0
 80016fc:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 8001700:	f102 0206 	add.w	r2, r2, #6
 8001704:	8013      	strh	r3, [r2, #0]
 8001706:	e07c      	b.n	8001802 <configFromUart+0xb7a>
					memcpy(sectorBuffer+sectorBufferIndex, dataBuffer + dataBufferIndex, spaceLeft);
 8001708:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 800170c:	f103 0308 	add.w	r3, r3, #8
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001716:	f103 0330 	add.w	r3, r3, #48	; 0x30
 800171a:	3b1c      	subs	r3, #28
 800171c:	1898      	adds	r0, r3, r2
 800171e:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001728:	3b3c      	subs	r3, #60	; 0x3c
 800172a:	4413      	add	r3, r2
 800172c:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8001730:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8001734:	6812      	ldr	r2, [r2, #0]
 8001736:	4619      	mov	r1, r3
 8001738:	f003 fdbe 	bl	80052b8 <memcpy>
					dataBufferIndex += spaceLeft;
 800173c:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8001746:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4413      	add	r3, r2
 800174e:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 8001752:	6013      	str	r3, [r2, #0]
					objectDataBytesLeft -= spaceLeft;
 8001754:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8001758:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	b29b      	uxth	r3, r3
 8001760:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 8001764:	f102 0206 	add.w	r2, r2, #6
 8001768:	8812      	ldrh	r2, [r2, #0]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 8001770:	f102 0206 	add.w	r2, r2, #6
 8001774:	8013      	strh	r3, [r2, #0]
					ext_flash_write(currentSector, sectorBuffer, SECTOR_SIZE);
 8001776:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 800177a:	f103 030c 	add.w	r3, r3, #12
 800177e:	8818      	ldrh	r0, [r3, #0]
 8001780:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001784:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8001788:	3b1c      	subs	r3, #28
 800178a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800178e:	4619      	mov	r1, r3
 8001790:	f000 f8ee 	bl	8001970 <ext_flash_write>
					currentSector += 1;
 8001794:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8001798:	f103 030c 	add.w	r3, r3, #12
 800179c:	881b      	ldrh	r3, [r3, #0]
 800179e:	3301      	adds	r3, #1
 80017a0:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 80017a4:	f102 020c 	add.w	r2, r2, #12
 80017a8:	8013      	strh	r3, [r2, #0]
					if(currentSector > MAX_SECTOR){
 80017aa:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 80017ae:	f103 030c 	add.w	r3, r3, #12
 80017b2:	881b      	ldrh	r3, [r3, #0]
 80017b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80017b8:	d30a      	bcc.n	80017d0 <configFromUart+0xb48>
						printf("[cl] External memory size exceeded while trying to save data of object id %d\n\r", currentObject.objectId);
 80017ba:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80017be:	f5a3 7334 	sub.w	r3, r3, #720	; 0x2d0
 80017c2:	885b      	ldrh	r3, [r3, #2]
 80017c4:	4619      	mov	r1, r3
 80017c6:	4824      	ldr	r0, [pc, #144]	; (8001858 <configFromUart+0xbd0>)
 80017c8:	f003 fd8c 	bl	80052e4 <iprintf>
						return 8;
 80017cc:	2308      	movs	r3, #8
 80017ce:	e039      	b.n	8001844 <configFromUart+0xbbc>
					ext_flash_erase_4kB(currentSector);
 80017d0:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 80017d4:	f103 030c 	add.w	r3, r3, #12
 80017d8:	881b      	ldrh	r3, [r3, #0]
 80017da:	4618      	mov	r0, r3
 80017dc:	f000 f892 	bl	8001904 <ext_flash_erase_4kB>
					memset(sectorBuffer, 0, SECTOR_SIZE);
 80017e0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80017e4:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80017e8:	3b1c      	subs	r3, #28
 80017ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017ee:	2100      	movs	r1, #0
 80017f0:	4618      	mov	r0, r3
 80017f2:	f003 fd6f 	bl	80052d4 <memset>
					sectorBufferIndex = 0;
 80017f6:	2300      	movs	r3, #0
 80017f8:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 80017fc:	f102 0208 	add.w	r2, r2, #8
 8001800:	6013      	str	r3, [r2, #0]
			while(objectDataBytesLeft > 0){
 8001802:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8001806:	f103 0306 	add.w	r3, r3, #6
 800180a:	881b      	ldrh	r3, [r3, #0]
 800180c:	2b00      	cmp	r3, #0
 800180e:	f47f af32 	bne.w	8001676 <configFromUart+0x9ee>
		while(currentScreenObjectsLeft > 0){
 8001812:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8001816:	f103 0336 	add.w	r3, r3, #54	; 0x36
 800181a:	881b      	ldrh	r3, [r3, #0]
 800181c:	2b00      	cmp	r3, #0
 800181e:	f47f ac68 	bne.w	80010f2 <configFromUart+0x46a>
		ext_flash_write(currentSector, sectorBuffer, SECTOR_SIZE);
 8001822:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8001826:	f103 030c 	add.w	r3, r3, #12
 800182a:	8818      	ldrh	r0, [r3, #0]
 800182c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001830:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8001834:	3b1c      	subs	r3, #28
 8001836:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800183a:	4619      	mov	r1, r3
 800183c:	f000 f898 	bl	8001970 <ext_flash_write>
	while(1){
 8001840:	f7ff bb13 	b.w	8000e6a <configFromUart+0x1e2>

}
 8001844:	4618      	mov	r0, r3
 8001846:	f507 574b 	add.w	r7, r7, #12992	; 0x32c0
 800184a:	3710      	adds	r7, #16
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	20000198 	.word	0x20000198
 8001854:	08006564 	.word	0x08006564
 8001858:	080065a0 	.word	0x080065a0

0800185c <parseTypeFromString>:


objectType_t parseTypeFromString(char *str){
 800185c:	b580      	push	{r7, lr}
 800185e:	b088      	sub	sp, #32
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
	const char *typeNames[] 	= 		{"rectangle", "button", "label"};
 8001864:	4a19      	ldr	r2, [pc, #100]	; (80018cc <parseTypeFromString+0x70>)
 8001866:	f107 030c 	add.w	r3, r7, #12
 800186a:	ca07      	ldmia	r2, {r0, r1, r2}
 800186c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	const objectType_t types[] 	= 		{rectangle, button, label};
 8001870:	4a17      	ldr	r2, [pc, #92]	; (80018d0 <parseTypeFromString+0x74>)
 8001872:	f107 0308 	add.w	r3, r7, #8
 8001876:	6812      	ldr	r2, [r2, #0]
 8001878:	4611      	mov	r1, r2
 800187a:	8019      	strh	r1, [r3, #0]
 800187c:	3302      	adds	r3, #2
 800187e:	0c12      	lsrs	r2, r2, #16
 8001880:	701a      	strb	r2, [r3, #0]

	int typeCount = 3;
 8001882:	2303      	movs	r3, #3
 8001884:	61bb      	str	r3, [r7, #24]
	int i;

	for(i=0; i<typeCount; i++){
 8001886:	2300      	movs	r3, #0
 8001888:	61fb      	str	r3, [r7, #28]
 800188a:	e015      	b.n	80018b8 <parseTypeFromString+0x5c>
		if(strcmp(typeNames[i], str) == 0){
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	3320      	adds	r3, #32
 8001892:	443b      	add	r3, r7
 8001894:	f853 3c14 	ldr.w	r3, [r3, #-20]
 8001898:	6879      	ldr	r1, [r7, #4]
 800189a:	4618      	mov	r0, r3
 800189c:	f7fe fc98 	bl	80001d0 <strcmp>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d105      	bne.n	80018b2 <parseTypeFromString+0x56>
			return types[i];
 80018a6:	f107 0208 	add.w	r2, r7, #8
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	4413      	add	r3, r2
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	e007      	b.n	80018c2 <parseTypeFromString+0x66>
	for(i=0; i<typeCount; i++){
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	3301      	adds	r3, #1
 80018b6:	61fb      	str	r3, [r7, #28]
 80018b8:	69fa      	ldr	r2, [r7, #28]
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	429a      	cmp	r2, r3
 80018be:	dbe5      	blt.n	800188c <parseTypeFromString+0x30>
		}
	}

	return none;
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3720      	adds	r7, #32
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	08006600 	.word	0x08006600
 80018d0:	0800660c 	.word	0x0800660c

080018d4 <flashCSSet>:
#include "spiRoutines.h"
#include <stm32f4xx_hal.h>
#include <stm32f4xx_hal_gpio.h>
#include <stdio.h>

void flashCSSet(){
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80018d8:	2201      	movs	r2, #1
 80018da:	2110      	movs	r1, #16
 80018dc:	4802      	ldr	r0, [pc, #8]	; (80018e8 <flashCSSet+0x14>)
 80018de:	f001 fd0d 	bl	80032fc <HAL_GPIO_WritePin>
}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40020000 	.word	0x40020000

080018ec <flashCSReset>:

void flashCSReset(){
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80018f0:	2200      	movs	r2, #0
 80018f2:	2110      	movs	r1, #16
 80018f4:	4802      	ldr	r0, [pc, #8]	; (8001900 <flashCSReset+0x14>)
 80018f6:	f001 fd01 	bl	80032fc <HAL_GPIO_WritePin>
}
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40020000 	.word	0x40020000

08001904 <ext_flash_erase_4kB>:
		}
	}
}

void ext_flash_erase_4kB(unsigned int sector_adress)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
	unsigned int i;

	ext_flash_wren();
 800190c:	f000 f86a 	bl	80019e4 <ext_flash_wren>

	flashCSReset();
 8001910:	f7ff ffec 	bl	80018ec <flashCSReset>
	SPI1_Transfer(0x20);
 8001914:	2020      	movs	r0, #32
 8001916:	f000 fbf9 	bl	800210c <SPI1_Transfer>
	SPI1_Transfer((sector_adress>>16)&0xFF);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	0c1b      	lsrs	r3, r3, #16
 800191e:	b2db      	uxtb	r3, r3
 8001920:	4618      	mov	r0, r3
 8001922:	f000 fbf3 	bl	800210c <SPI1_Transfer>
	SPI1_Transfer((sector_adress>>8)&0xFF);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	0a1b      	lsrs	r3, r3, #8
 800192a:	b2db      	uxtb	r3, r3
 800192c:	4618      	mov	r0, r3
 800192e:	f000 fbed 	bl	800210c <SPI1_Transfer>
	SPI1_Transfer(sector_adress&0xFF);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	b2db      	uxtb	r3, r3
 8001936:	4618      	mov	r0, r3
 8001938:	f000 fbe8 	bl	800210c <SPI1_Transfer>
	flashCSSet();
 800193c:	f7ff ffca 	bl	80018d4 <flashCSSet>

	for(i=0;i<1000;i++)
 8001940:	2300      	movs	r3, #0
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	e00a      	b.n	800195c <ext_flash_erase_4kB+0x58>
	{
		HAL_Delay(1);
 8001946:	2001      	movs	r0, #1
 8001948:	f001 f974 	bl	8002c34 <HAL_Delay>
		if(ext_flash_read_status_register_1()==0x00)
 800194c:	f000 f836 	bl	80019bc <ext_flash_read_status_register_1>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d007      	beq.n	8001966 <ext_flash_erase_4kB+0x62>
	for(i=0;i<1000;i++)
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	3301      	adds	r3, #1
 800195a:	60fb      	str	r3, [r7, #12]
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001962:	d3f0      	bcc.n	8001946 <ext_flash_erase_4kB+0x42>
		{
			break;
		}
	}
}
 8001964:	e000      	b.n	8001968 <ext_flash_erase_4kB+0x64>
			break;
 8001966:	bf00      	nop
}
 8001968:	bf00      	nop
 800196a:	3710      	adds	r7, #16
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}

08001970 <ext_flash_write>:

void ext_flash_write(unsigned int sector_adress, unsigned char *buff, unsigned int len)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	60b9      	str	r1, [r7, #8]
 800197a:	607a      	str	r2, [r7, #4]
	ext_flash_continuous_write_begin(sector_adress);
 800197c:	68f8      	ldr	r0, [r7, #12]
 800197e:	f000 f87c 	bl	8001a7a <ext_flash_continuous_write_begin>
	ext_flash_continuous_write_write(buff, len);
 8001982:	6879      	ldr	r1, [r7, #4]
 8001984:	68b8      	ldr	r0, [r7, #8]
 8001986:	f000 f898 	bl	8001aba <ext_flash_continuous_write_write>
	ext_flash_continuous_write_finish();
 800198a:	f000 f8b1 	bl	8001af0 <ext_flash_continuous_write_finish>
}
 800198e:	bf00      	nop
 8001990:	3710      	adds	r7, #16
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <ext_flash_read>:
void ext_flash_read(unsigned int sector_adress, unsigned char *buff, unsigned int len)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b084      	sub	sp, #16
 800199a:	af00      	add	r7, sp, #0
 800199c:	60f8      	str	r0, [r7, #12]
 800199e:	60b9      	str	r1, [r7, #8]
 80019a0:	607a      	str	r2, [r7, #4]
	ext_flash_continuous_read_begin(sector_adress);
 80019a2:	68f8      	ldr	r0, [r7, #12]
 80019a4:	f000 f829 	bl	80019fa <ext_flash_continuous_read_begin>
	ext_flash_continuous_read_read(buff, len);
 80019a8:	6879      	ldr	r1, [r7, #4]
 80019aa:	68b8      	ldr	r0, [r7, #8]
 80019ac:	f000 f843 	bl	8001a36 <ext_flash_continuous_read_read>
	ext_flash_continuous_read_finish();
 80019b0:	f000 f85d 	bl	8001a6e <ext_flash_continuous_read_finish>
}
 80019b4:	bf00      	nop
 80019b6:	3710      	adds	r7, #16
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}

080019bc <ext_flash_read_status_register_1>:

	return data;
}

unsigned char ext_flash_read_status_register_1()
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
	char data;
	flashCSReset();
 80019c2:	f7ff ff93 	bl	80018ec <flashCSReset>
	SPI1_Transfer(0x05);
 80019c6:	2005      	movs	r0, #5
 80019c8:	f000 fba0 	bl	800210c <SPI1_Transfer>
	data=SPI1_Transfer(0x00);
 80019cc:	2000      	movs	r0, #0
 80019ce:	f000 fb9d 	bl	800210c <SPI1_Transfer>
 80019d2:	4603      	mov	r3, r0
 80019d4:	71fb      	strb	r3, [r7, #7]
	flashCSSet();
 80019d6:	f7ff ff7d 	bl	80018d4 <flashCSSet>

	return data;
 80019da:	79fb      	ldrb	r3, [r7, #7]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3708      	adds	r7, #8
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <ext_flash_wren>:

void ext_flash_wren()
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
	flashCSReset();
 80019e8:	f7ff ff80 	bl	80018ec <flashCSReset>
	SPI1_Transfer(0x06);
 80019ec:	2006      	movs	r0, #6
 80019ee:	f000 fb8d 	bl	800210c <SPI1_Transfer>
	flashCSSet();
 80019f2:	f7ff ff6f 	bl	80018d4 <flashCSSet>
}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}

080019fa <ext_flash_continuous_read_begin>:


//Continuous functions below keep conection open while reading, allowing for access to data not aligned to 4kB sectors
void ext_flash_continuous_read_begin(unsigned int sector_adress){
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b082      	sub	sp, #8
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
	command[0]=0x03;
	command[1]=((char *)&sector_adress)[3];
	command[2]=((char *)&sector_adress)[2];
	command[3]=((char *)&sector_adress)[1];*/

	flashCSReset();
 8001a02:	f7ff ff73 	bl	80018ec <flashCSReset>

	SPI1_Transfer(0x03);
 8001a06:	2003      	movs	r0, #3
 8001a08:	f000 fb80 	bl	800210c <SPI1_Transfer>
	SPI1_Transfer((sector_adress>>16)&0xFF);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	0c1b      	lsrs	r3, r3, #16
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	4618      	mov	r0, r3
 8001a14:	f000 fb7a 	bl	800210c <SPI1_Transfer>
	SPI1_Transfer((sector_adress>>8)&0xFF);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	0a1b      	lsrs	r3, r3, #8
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f000 fb74 	bl	800210c <SPI1_Transfer>
	SPI1_Transfer(sector_adress&0xFF);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f000 fb6f 	bl	800210c <SPI1_Transfer>
}
 8001a2e:	bf00      	nop
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <ext_flash_continuous_read_read>:

void ext_flash_continuous_read_read(unsigned char *buff, unsigned int len){
 8001a36:	b590      	push	{r4, r7, lr}
 8001a38:	b085      	sub	sp, #20
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
 8001a3e:	6039      	str	r1, [r7, #0]
	for(unsigned int i = 0; i<len; i++){
 8001a40:	2300      	movs	r3, #0
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	e00a      	b.n	8001a5c <ext_flash_continuous_read_read+0x26>
		*(buff+i) = SPI1_Transfer(0x00);
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	18d4      	adds	r4, r2, r3
 8001a4c:	2000      	movs	r0, #0
 8001a4e:	f000 fb5d 	bl	800210c <SPI1_Transfer>
 8001a52:	4603      	mov	r3, r0
 8001a54:	7023      	strb	r3, [r4, #0]
	for(unsigned int i = 0; i<len; i++){
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	60fb      	str	r3, [r7, #12]
 8001a5c:	68fa      	ldr	r2, [r7, #12]
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d3f0      	bcc.n	8001a46 <ext_flash_continuous_read_read+0x10>
	}
}
 8001a64:	bf00      	nop
 8001a66:	bf00      	nop
 8001a68:	3714      	adds	r7, #20
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd90      	pop	{r4, r7, pc}

08001a6e <ext_flash_continuous_read_finish>:
void ext_flash_continuous_read_skip(unsigned int len){
	for(unsigned int i = 0; i<len; i++){
			SPI1_Transfer(0x00);
	}
}
void ext_flash_continuous_read_finish(){
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	af00      	add	r7, sp, #0
	flashCSSet();
 8001a72:	f7ff ff2f 	bl	80018d4 <flashCSSet>
}
 8001a76:	bf00      	nop
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <ext_flash_continuous_write_begin>:

void ext_flash_continuous_write_begin(unsigned int sector_adress){
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b082      	sub	sp, #8
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]
	ext_flash_wren();
 8001a82:	f7ff ffaf 	bl	80019e4 <ext_flash_wren>
	flashCSReset();
 8001a86:	f7ff ff31 	bl	80018ec <flashCSReset>
	SPI1_Transfer(0x02);
 8001a8a:	2002      	movs	r0, #2
 8001a8c:	f000 fb3e 	bl	800210c <SPI1_Transfer>
	SPI1_Transfer((sector_adress>>16)&0xFF);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	0c1b      	lsrs	r3, r3, #16
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	4618      	mov	r0, r3
 8001a98:	f000 fb38 	bl	800210c <SPI1_Transfer>
	SPI1_Transfer((sector_adress>>8)&0xFF);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	0a1b      	lsrs	r3, r3, #8
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f000 fb32 	bl	800210c <SPI1_Transfer>
	SPI1_Transfer(sector_adress&0xFF);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	4618      	mov	r0, r3
 8001aae:	f000 fb2d 	bl	800210c <SPI1_Transfer>
}
 8001ab2:	bf00      	nop
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <ext_flash_continuous_write_write>:
void ext_flash_continuous_write_write(unsigned char *buff, unsigned int len){
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b084      	sub	sp, #16
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
 8001ac2:	6039      	str	r1, [r7, #0]
	unsigned int i;
	for(i=0;i<len;i++)
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	e009      	b.n	8001ade <ext_flash_continuous_write_write+0x24>
		{
			SPI1_Transfer(buff[i]);
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	4413      	add	r3, r2
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f000 fb1a 	bl	800210c <SPI1_Transfer>
	for(i=0;i<len;i++)
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	3301      	adds	r3, #1
 8001adc:	60fb      	str	r3, [r7, #12]
 8001ade:	68fa      	ldr	r2, [r7, #12]
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d3f1      	bcc.n	8001aca <ext_flash_continuous_write_write+0x10>
		}
}
 8001ae6:	bf00      	nop
 8001ae8:	bf00      	nop
 8001aea:	3710      	adds	r7, #16
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <ext_flash_continuous_write_finish>:
void ext_flash_continuous_write_finish(){
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
	flashCSSet();
 8001af6:	f7ff feed 	bl	80018d4 <flashCSSet>
	unsigned int i;
	for(i=0;i<1000;i++)
 8001afa:	2300      	movs	r3, #0
 8001afc:	607b      	str	r3, [r7, #4]
 8001afe:	e00a      	b.n	8001b16 <ext_flash_continuous_write_finish+0x26>
	{
		HAL_Delay(1);
 8001b00:	2001      	movs	r0, #1
 8001b02:	f001 f897 	bl	8002c34 <HAL_Delay>
		if(ext_flash_read_status_register_1()==0x00)
 8001b06:	f7ff ff59 	bl	80019bc <ext_flash_read_status_register_1>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d007      	beq.n	8001b20 <ext_flash_continuous_write_finish+0x30>
	for(i=0;i<1000;i++)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	3301      	adds	r3, #1
 8001b14:	607b      	str	r3, [r7, #4]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b1c:	d3f0      	bcc.n	8001b00 <ext_flash_continuous_write_finish+0x10>
		{
			break;
		}
	}
}
 8001b1e:	e000      	b.n	8001b22 <ext_flash_continuous_write_finish+0x32>
			break;
 8001b20:	bf00      	nop
}
 8001b22:	bf00      	nop
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
	...

08001b2c <flashDemoPrintLast>:
#include <string.h>
#include "extFlash.h"

#define demoFlashAddr 0x00

void flashDemoPrintLast(){
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b090      	sub	sp, #64	; 0x40
 8001b30:	af00      	add	r7, sp, #0
	char flashMsg[64];
	ext_flash_read(demoFlashAddr, flashMsg, 64);
 8001b32:	463b      	mov	r3, r7
 8001b34:	2240      	movs	r2, #64	; 0x40
 8001b36:	4619      	mov	r1, r3
 8001b38:	2000      	movs	r0, #0
 8001b3a:	f7ff ff2c 	bl	8001996 <ext_flash_read>
	flashMsg[63] = 0; //just to be safe
 8001b3e:	2300      	movs	r3, #0
 8001b40:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	printf("[FLASH demo] Read message from flash: \"%s\".\r\n", flashMsg);
 8001b44:	463b      	mov	r3, r7
 8001b46:	4619      	mov	r1, r3
 8001b48:	4803      	ldr	r0, [pc, #12]	; (8001b58 <flashDemoPrintLast+0x2c>)
 8001b4a:	f003 fbcb 	bl	80052e4 <iprintf>
}
 8001b4e:	bf00      	nop
 8001b50:	3740      	adds	r7, #64	; 0x40
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	08006610 	.word	0x08006610

08001b5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b62:	f000 fff5 	bl	8002b50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b66:	f000 f835 	bl	8001bd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b6a:	f000 f9a3 	bl	8001eb4 <MX_GPIO_Init>
  MX_FSMC_Init();
 8001b6e:	f000 fa4d 	bl	800200c <MX_FSMC_Init>
  MX_USART1_UART_Init();
 8001b72:	f000 f93b 	bl	8001dec <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001b76:	f000 f897 	bl	8001ca8 <MX_I2C1_Init>
  MX_SPI3_Init();
 8001b7a:	f000 f901 	bl	8001d80 <MX_SPI3_Init>
  MX_SPI1_Init();
 8001b7e:	f000 f8c1 	bl	8001d04 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001b82:	f000 f965 	bl	8001e50 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  //enable uart interrupt
  Init_LCD();
 8001b86:	f7fe fd05 	bl	8000594 <Init_LCD>
  static int blOn = 0;
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("Entering main loop\n\r");
 8001b8a:	4810      	ldr	r0, [pc, #64]	; (8001bcc <main+0x70>)
 8001b8c:	f003 fbaa 	bl	80052e4 <iprintf>

  flashDemoPrintLast();
 8001b90:	f7ff ffcc 	bl	8001b2c <flashDemoPrintLast>

  int loopNumber = 0;
 8001b94:	2300      	movs	r3, #0
 8001b96:	60fb      	str	r3, [r7, #12]

  while (1)
  {
	int secSleep = 2;
 8001b98:	2302      	movs	r3, #2
 8001b9a:	60bb      	str	r3, [r7, #8]
	int msecSleep = 500;
 8001b9c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001ba0:	607b      	str	r3, [r7, #4]
	printf("Sleeping %d.%d secs.  LN %d\r\n", secSleep, msecSleep, loopNumber++);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	1c5a      	adds	r2, r3, #1
 8001ba6:	60fa      	str	r2, [r7, #12]
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	68b9      	ldr	r1, [r7, #8]
 8001bac:	4808      	ldr	r0, [pc, #32]	; (8001bd0 <main+0x74>)
 8001bae:	f003 fb99 	bl	80052e4 <iprintf>
	HAL_Delay(1000*secSleep + msecSleep);
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001bb8:	fb03 f202 	mul.w	r2, r3, r2
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f001 f837 	bl	8002c34 <HAL_Delay>

	configFromUart();
 8001bc6:	f7ff f85f 	bl	8000c88 <configFromUart>
  {
 8001bca:	e7e5      	b.n	8001b98 <main+0x3c>
 8001bcc:	080066b0 	.word	0x080066b0
 8001bd0:	080066c8 	.word	0x080066c8

08001bd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b094      	sub	sp, #80	; 0x50
 8001bd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bda:	f107 0320 	add.w	r3, r7, #32
 8001bde:	2230      	movs	r2, #48	; 0x30
 8001be0:	2100      	movs	r1, #0
 8001be2:	4618      	mov	r0, r3
 8001be4:	f003 fb76 	bl	80052d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001be8:	f107 030c 	add.w	r3, r7, #12
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	605a      	str	r2, [r3, #4]
 8001bf2:	609a      	str	r2, [r3, #8]
 8001bf4:	60da      	str	r2, [r3, #12]
 8001bf6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	60bb      	str	r3, [r7, #8]
 8001bfc:	4b28      	ldr	r3, [pc, #160]	; (8001ca0 <SystemClock_Config+0xcc>)
 8001bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c00:	4a27      	ldr	r2, [pc, #156]	; (8001ca0 <SystemClock_Config+0xcc>)
 8001c02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c06:	6413      	str	r3, [r2, #64]	; 0x40
 8001c08:	4b25      	ldr	r3, [pc, #148]	; (8001ca0 <SystemClock_Config+0xcc>)
 8001c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c10:	60bb      	str	r3, [r7, #8]
 8001c12:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c14:	2300      	movs	r3, #0
 8001c16:	607b      	str	r3, [r7, #4]
 8001c18:	4b22      	ldr	r3, [pc, #136]	; (8001ca4 <SystemClock_Config+0xd0>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a21      	ldr	r2, [pc, #132]	; (8001ca4 <SystemClock_Config+0xd0>)
 8001c1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c22:	6013      	str	r3, [r2, #0]
 8001c24:	4b1f      	ldr	r3, [pc, #124]	; (8001ca4 <SystemClock_Config+0xd0>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c2c:	607b      	str	r3, [r7, #4]
 8001c2e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c30:	2301      	movs	r3, #1
 8001c32:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c38:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c3e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c42:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001c44:	2308      	movs	r3, #8
 8001c46:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001c48:	23a8      	movs	r3, #168	; 0xa8
 8001c4a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c50:	2304      	movs	r3, #4
 8001c52:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c54:	f107 0320 	add.w	r3, r7, #32
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f001 fcad 	bl	80035b8 <HAL_RCC_OscConfig>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001c64:	f000 fa4c 	bl	8002100 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c68:	230f      	movs	r3, #15
 8001c6a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c70:	2300      	movs	r3, #0
 8001c72:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c74:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001c78:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c7e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001c80:	f107 030c 	add.w	r3, r7, #12
 8001c84:	2105      	movs	r1, #5
 8001c86:	4618      	mov	r0, r3
 8001c88:	f001 ff0e 	bl	8003aa8 <HAL_RCC_ClockConfig>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001c92:	f000 fa35 	bl	8002100 <Error_Handler>
  }
}
 8001c96:	bf00      	nop
 8001c98:	3750      	adds	r7, #80	; 0x50
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	40023800 	.word	0x40023800
 8001ca4:	40007000 	.word	0x40007000

08001ca8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001cac:	4b12      	ldr	r3, [pc, #72]	; (8001cf8 <MX_I2C1_Init+0x50>)
 8001cae:	4a13      	ldr	r2, [pc, #76]	; (8001cfc <MX_I2C1_Init+0x54>)
 8001cb0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001cb2:	4b11      	ldr	r3, [pc, #68]	; (8001cf8 <MX_I2C1_Init+0x50>)
 8001cb4:	4a12      	ldr	r2, [pc, #72]	; (8001d00 <MX_I2C1_Init+0x58>)
 8001cb6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001cb8:	4b0f      	ldr	r3, [pc, #60]	; (8001cf8 <MX_I2C1_Init+0x50>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001cbe:	4b0e      	ldr	r3, [pc, #56]	; (8001cf8 <MX_I2C1_Init+0x50>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001cc4:	4b0c      	ldr	r3, [pc, #48]	; (8001cf8 <MX_I2C1_Init+0x50>)
 8001cc6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001cca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ccc:	4b0a      	ldr	r3, [pc, #40]	; (8001cf8 <MX_I2C1_Init+0x50>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001cd2:	4b09      	ldr	r3, [pc, #36]	; (8001cf8 <MX_I2C1_Init+0x50>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cd8:	4b07      	ldr	r3, [pc, #28]	; (8001cf8 <MX_I2C1_Init+0x50>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cde:	4b06      	ldr	r3, [pc, #24]	; (8001cf8 <MX_I2C1_Init+0x50>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ce4:	4804      	ldr	r0, [pc, #16]	; (8001cf8 <MX_I2C1_Init+0x50>)
 8001ce6:	f001 fb23 	bl	8003330 <HAL_I2C_Init>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001cf0:	f000 fa06 	bl	8002100 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001cf4:	bf00      	nop
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	20000094 	.word	0x20000094
 8001cfc:	40005400 	.word	0x40005400
 8001d00:	000186a0 	.word	0x000186a0

08001d04 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001d08:	4b1b      	ldr	r3, [pc, #108]	; (8001d78 <MX_SPI1_Init+0x74>)
 8001d0a:	4a1c      	ldr	r2, [pc, #112]	; (8001d7c <MX_SPI1_Init+0x78>)
 8001d0c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d0e:	4b1a      	ldr	r3, [pc, #104]	; (8001d78 <MX_SPI1_Init+0x74>)
 8001d10:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d14:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d16:	4b18      	ldr	r3, [pc, #96]	; (8001d78 <MX_SPI1_Init+0x74>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d1c:	4b16      	ldr	r3, [pc, #88]	; (8001d78 <MX_SPI1_Init+0x74>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001d22:	4b15      	ldr	r3, [pc, #84]	; (8001d78 <MX_SPI1_Init+0x74>)
 8001d24:	2202      	movs	r2, #2
 8001d26:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001d28:	4b13      	ldr	r3, [pc, #76]	; (8001d78 <MX_SPI1_Init+0x74>)
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d2e:	4b12      	ldr	r3, [pc, #72]	; (8001d78 <MX_SPI1_Init+0x74>)
 8001d30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d34:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d36:	4b10      	ldr	r3, [pc, #64]	; (8001d78 <MX_SPI1_Init+0x74>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d3c:	4b0e      	ldr	r3, [pc, #56]	; (8001d78 <MX_SPI1_Init+0x74>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d42:	4b0d      	ldr	r3, [pc, #52]	; (8001d78 <MX_SPI1_Init+0x74>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d48:	4b0b      	ldr	r3, [pc, #44]	; (8001d78 <MX_SPI1_Init+0x74>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001d4e:	4b0a      	ldr	r3, [pc, #40]	; (8001d78 <MX_SPI1_Init+0x74>)
 8001d50:	220a      	movs	r2, #10
 8001d52:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d54:	4808      	ldr	r0, [pc, #32]	; (8001d78 <MX_SPI1_Init+0x74>)
 8001d56:	f002 f8c5 	bl	8003ee4 <HAL_SPI_Init>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001d60:	f000 f9ce 	bl	8002100 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  __HAL_SPI_ENABLE(&hspi1);
 8001d64:	4b04      	ldr	r3, [pc, #16]	; (8001d78 <MX_SPI1_Init+0x74>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	4b03      	ldr	r3, [pc, #12]	; (8001d78 <MX_SPI1_Init+0x74>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d72:	601a      	str	r2, [r3, #0]
  /* USER CODE END SPI1_Init 2 */

}
 8001d74:	bf00      	nop
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	200000e8 	.word	0x200000e8
 8001d7c:	40013000 	.word	0x40013000

08001d80 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001d84:	4b17      	ldr	r3, [pc, #92]	; (8001de4 <MX_SPI3_Init+0x64>)
 8001d86:	4a18      	ldr	r2, [pc, #96]	; (8001de8 <MX_SPI3_Init+0x68>)
 8001d88:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001d8a:	4b16      	ldr	r3, [pc, #88]	; (8001de4 <MX_SPI3_Init+0x64>)
 8001d8c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d90:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001d92:	4b14      	ldr	r3, [pc, #80]	; (8001de4 <MX_SPI3_Init+0x64>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d98:	4b12      	ldr	r3, [pc, #72]	; (8001de4 <MX_SPI3_Init+0x64>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d9e:	4b11      	ldr	r3, [pc, #68]	; (8001de4 <MX_SPI3_Init+0x64>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001da4:	4b0f      	ldr	r3, [pc, #60]	; (8001de4 <MX_SPI3_Init+0x64>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001daa:	4b0e      	ldr	r3, [pc, #56]	; (8001de4 <MX_SPI3_Init+0x64>)
 8001dac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001db0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001db2:	4b0c      	ldr	r3, [pc, #48]	; (8001de4 <MX_SPI3_Init+0x64>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001db8:	4b0a      	ldr	r3, [pc, #40]	; (8001de4 <MX_SPI3_Init+0x64>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001dbe:	4b09      	ldr	r3, [pc, #36]	; (8001de4 <MX_SPI3_Init+0x64>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001dc4:	4b07      	ldr	r3, [pc, #28]	; (8001de4 <MX_SPI3_Init+0x64>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001dca:	4b06      	ldr	r3, [pc, #24]	; (8001de4 <MX_SPI3_Init+0x64>)
 8001dcc:	220a      	movs	r2, #10
 8001dce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001dd0:	4804      	ldr	r0, [pc, #16]	; (8001de4 <MX_SPI3_Init+0x64>)
 8001dd2:	f002 f887 	bl	8003ee4 <HAL_SPI_Init>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001ddc:	f000 f990 	bl	8002100 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001de0:	bf00      	nop
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	20000140 	.word	0x20000140
 8001de8:	40003c00 	.word	0x40003c00

08001dec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001df0:	4b15      	ldr	r3, [pc, #84]	; (8001e48 <MX_USART1_UART_Init+0x5c>)
 8001df2:	4a16      	ldr	r2, [pc, #88]	; (8001e4c <MX_USART1_UART_Init+0x60>)
 8001df4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001df6:	4b14      	ldr	r3, [pc, #80]	; (8001e48 <MX_USART1_UART_Init+0x5c>)
 8001df8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001dfc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001dfe:	4b12      	ldr	r3, [pc, #72]	; (8001e48 <MX_USART1_UART_Init+0x5c>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e04:	4b10      	ldr	r3, [pc, #64]	; (8001e48 <MX_USART1_UART_Init+0x5c>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e0a:	4b0f      	ldr	r3, [pc, #60]	; (8001e48 <MX_USART1_UART_Init+0x5c>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e10:	4b0d      	ldr	r3, [pc, #52]	; (8001e48 <MX_USART1_UART_Init+0x5c>)
 8001e12:	220c      	movs	r2, #12
 8001e14:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e16:	4b0c      	ldr	r3, [pc, #48]	; (8001e48 <MX_USART1_UART_Init+0x5c>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e1c:	4b0a      	ldr	r3, [pc, #40]	; (8001e48 <MX_USART1_UART_Init+0x5c>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e22:	4809      	ldr	r0, [pc, #36]	; (8001e48 <MX_USART1_UART_Init+0x5c>)
 8001e24:	f002 f92f 	bl	8004086 <HAL_UART_Init>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001e2e:	f000 f967 	bl	8002100 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE); //turn on rx interrupt forever
 8001e32:	4b05      	ldr	r3, [pc, #20]	; (8001e48 <MX_USART1_UART_Init+0x5c>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	68da      	ldr	r2, [r3, #12]
 8001e38:	4b03      	ldr	r3, [pc, #12]	; (8001e48 <MX_USART1_UART_Init+0x5c>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f042 0220 	orr.w	r2, r2, #32
 8001e40:	60da      	str	r2, [r3, #12]
  /* USER CODE END USART1_Init 2 */

}
 8001e42:	bf00      	nop
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	20000198 	.word	0x20000198
 8001e4c:	40011000 	.word	0x40011000

08001e50 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e54:	4b15      	ldr	r3, [pc, #84]	; (8001eac <MX_USART2_UART_Init+0x5c>)
 8001e56:	4a16      	ldr	r2, [pc, #88]	; (8001eb0 <MX_USART2_UART_Init+0x60>)
 8001e58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e5a:	4b14      	ldr	r3, [pc, #80]	; (8001eac <MX_USART2_UART_Init+0x5c>)
 8001e5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e62:	4b12      	ldr	r3, [pc, #72]	; (8001eac <MX_USART2_UART_Init+0x5c>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e68:	4b10      	ldr	r3, [pc, #64]	; (8001eac <MX_USART2_UART_Init+0x5c>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e6e:	4b0f      	ldr	r3, [pc, #60]	; (8001eac <MX_USART2_UART_Init+0x5c>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e74:	4b0d      	ldr	r3, [pc, #52]	; (8001eac <MX_USART2_UART_Init+0x5c>)
 8001e76:	220c      	movs	r2, #12
 8001e78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e7a:	4b0c      	ldr	r3, [pc, #48]	; (8001eac <MX_USART2_UART_Init+0x5c>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e80:	4b0a      	ldr	r3, [pc, #40]	; (8001eac <MX_USART2_UART_Init+0x5c>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e86:	4809      	ldr	r0, [pc, #36]	; (8001eac <MX_USART2_UART_Init+0x5c>)
 8001e88:	f002 f8fd 	bl	8004086 <HAL_UART_Init>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e92:	f000 f935 	bl	8002100 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE); //turn on rx interrupt forever
 8001e96:	4b05      	ldr	r3, [pc, #20]	; (8001eac <MX_USART2_UART_Init+0x5c>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	68da      	ldr	r2, [r3, #12]
 8001e9c:	4b03      	ldr	r3, [pc, #12]	; (8001eac <MX_USART2_UART_Init+0x5c>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f042 0220 	orr.w	r2, r2, #32
 8001ea4:	60da      	str	r2, [r3, #12]
  /* USER CODE END USART2_Init 2 */

}
 8001ea6:	bf00      	nop
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	200001dc 	.word	0x200001dc
 8001eb0:	40004400 	.word	0x40004400

08001eb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b08c      	sub	sp, #48	; 0x30
 8001eb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eba:	f107 031c 	add.w	r3, r7, #28
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	601a      	str	r2, [r3, #0]
 8001ec2:	605a      	str	r2, [r3, #4]
 8001ec4:	609a      	str	r2, [r3, #8]
 8001ec6:	60da      	str	r2, [r3, #12]
 8001ec8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001eca:	2300      	movs	r3, #0
 8001ecc:	61bb      	str	r3, [r7, #24]
 8001ece:	4b4c      	ldr	r3, [pc, #304]	; (8002000 <MX_GPIO_Init+0x14c>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed2:	4a4b      	ldr	r2, [pc, #300]	; (8002000 <MX_GPIO_Init+0x14c>)
 8001ed4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eda:	4b49      	ldr	r3, [pc, #292]	; (8002000 <MX_GPIO_Init+0x14c>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ee2:	61bb      	str	r3, [r7, #24]
 8001ee4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	617b      	str	r3, [r7, #20]
 8001eea:	4b45      	ldr	r3, [pc, #276]	; (8002000 <MX_GPIO_Init+0x14c>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eee:	4a44      	ldr	r2, [pc, #272]	; (8002000 <MX_GPIO_Init+0x14c>)
 8001ef0:	f043 0301 	orr.w	r3, r3, #1
 8001ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ef6:	4b42      	ldr	r3, [pc, #264]	; (8002000 <MX_GPIO_Init+0x14c>)
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	617b      	str	r3, [r7, #20]
 8001f00:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f02:	2300      	movs	r3, #0
 8001f04:	613b      	str	r3, [r7, #16]
 8001f06:	4b3e      	ldr	r3, [pc, #248]	; (8002000 <MX_GPIO_Init+0x14c>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0a:	4a3d      	ldr	r2, [pc, #244]	; (8002000 <MX_GPIO_Init+0x14c>)
 8001f0c:	f043 0310 	orr.w	r3, r3, #16
 8001f10:	6313      	str	r3, [r2, #48]	; 0x30
 8001f12:	4b3b      	ldr	r3, [pc, #236]	; (8002000 <MX_GPIO_Init+0x14c>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f16:	f003 0310 	and.w	r3, r3, #16
 8001f1a:	613b      	str	r3, [r7, #16]
 8001f1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f1e:	2300      	movs	r3, #0
 8001f20:	60fb      	str	r3, [r7, #12]
 8001f22:	4b37      	ldr	r3, [pc, #220]	; (8002000 <MX_GPIO_Init+0x14c>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f26:	4a36      	ldr	r2, [pc, #216]	; (8002000 <MX_GPIO_Init+0x14c>)
 8001f28:	f043 0308 	orr.w	r3, r3, #8
 8001f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f2e:	4b34      	ldr	r3, [pc, #208]	; (8002000 <MX_GPIO_Init+0x14c>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f32:	f003 0308 	and.w	r3, r3, #8
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	60bb      	str	r3, [r7, #8]
 8001f3e:	4b30      	ldr	r3, [pc, #192]	; (8002000 <MX_GPIO_Init+0x14c>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f42:	4a2f      	ldr	r2, [pc, #188]	; (8002000 <MX_GPIO_Init+0x14c>)
 8001f44:	f043 0304 	orr.w	r3, r3, #4
 8001f48:	6313      	str	r3, [r2, #48]	; 0x30
 8001f4a:	4b2d      	ldr	r3, [pc, #180]	; (8002000 <MX_GPIO_Init+0x14c>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4e:	f003 0304 	and.w	r3, r3, #4
 8001f52:	60bb      	str	r3, [r7, #8]
 8001f54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f56:	2300      	movs	r3, #0
 8001f58:	607b      	str	r3, [r7, #4]
 8001f5a:	4b29      	ldr	r3, [pc, #164]	; (8002000 <MX_GPIO_Init+0x14c>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5e:	4a28      	ldr	r2, [pc, #160]	; (8002000 <MX_GPIO_Init+0x14c>)
 8001f60:	f043 0302 	orr.w	r3, r3, #2
 8001f64:	6313      	str	r3, [r2, #48]	; 0x30
 8001f66:	4b26      	ldr	r3, [pc, #152]	; (8002000 <MX_GPIO_Init+0x14c>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	607b      	str	r3, [r7, #4]
 8001f70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LCD_RES_Pin, GPIO_PIN_RESET);
 8001f72:	2200      	movs	r2, #0
 8001f74:	f241 0110 	movw	r1, #4112	; 0x1010
 8001f78:	4822      	ldr	r0, [pc, #136]	; (8002004 <MX_GPIO_Init+0x150>)
 8001f7a:	f001 f9bf 	bl	80032fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8001f7e:	2200      	movs	r2, #0
 8001f80:	2108      	movs	r1, #8
 8001f82:	4821      	ldr	r0, [pc, #132]	; (8002008 <MX_GPIO_Init+0x154>)
 8001f84:	f001 f9ba 	bl	80032fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001f88:	2310      	movs	r3, #16
 8001f8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f90:	2300      	movs	r3, #0
 8001f92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f94:	2300      	movs	r3, #0
 8001f96:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f98:	f107 031c 	add.w	r3, r7, #28
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	4819      	ldr	r0, [pc, #100]	; (8002004 <MX_GPIO_Init+0x150>)
 8001fa0:	f001 f810 	bl	8002fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001fa4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001fa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001faa:	2300      	movs	r3, #0
 8001fac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb2:	f107 031c 	add.w	r3, r7, #28
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	4812      	ldr	r0, [pc, #72]	; (8002004 <MX_GPIO_Init+0x150>)
 8001fba:	f001 f803 	bl	8002fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RES_Pin */
  GPIO_InitStruct.Pin = LCD_RES_Pin;
 8001fbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_RES_GPIO_Port, &GPIO_InitStruct);
 8001fd0:	f107 031c 	add.w	r3, r7, #28
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	480b      	ldr	r0, [pc, #44]	; (8002004 <MX_GPIO_Init+0x150>)
 8001fd8:	f000 fff4 	bl	8002fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001fdc:	2308      	movs	r3, #8
 8001fde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fec:	f107 031c 	add.w	r3, r7, #28
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	4805      	ldr	r0, [pc, #20]	; (8002008 <MX_GPIO_Init+0x154>)
 8001ff4:	f000 ffe6 	bl	8002fc4 <HAL_GPIO_Init>

}
 8001ff8:	bf00      	nop
 8001ffa:	3730      	adds	r7, #48	; 0x30
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	40023800 	.word	0x40023800
 8002004:	40020000 	.word	0x40020000
 8002008:	40020400 	.word	0x40020400

0800200c <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b08e      	sub	sp, #56	; 0x38
 8002010:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8002012:	f107 031c 	add.w	r3, r7, #28
 8002016:	2200      	movs	r2, #0
 8002018:	601a      	str	r2, [r3, #0]
 800201a:	605a      	str	r2, [r3, #4]
 800201c:	609a      	str	r2, [r3, #8]
 800201e:	60da      	str	r2, [r3, #12]
 8002020:	611a      	str	r2, [r3, #16]
 8002022:	615a      	str	r2, [r3, #20]
 8002024:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8002026:	463b      	mov	r3, r7
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
 800202c:	605a      	str	r2, [r3, #4]
 800202e:	609a      	str	r2, [r3, #8]
 8002030:	60da      	str	r2, [r3, #12]
 8002032:	611a      	str	r2, [r3, #16]
 8002034:	615a      	str	r2, [r3, #20]
 8002036:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8002038:	4b2f      	ldr	r3, [pc, #188]	; (80020f8 <MX_FSMC_Init+0xec>)
 800203a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800203e:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8002040:	4b2d      	ldr	r3, [pc, #180]	; (80020f8 <MX_FSMC_Init+0xec>)
 8002042:	4a2e      	ldr	r2, [pc, #184]	; (80020fc <MX_FSMC_Init+0xf0>)
 8002044:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8002046:	4b2c      	ldr	r3, [pc, #176]	; (80020f8 <MX_FSMC_Init+0xec>)
 8002048:	2200      	movs	r2, #0
 800204a:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 800204c:	4b2a      	ldr	r3, [pc, #168]	; (80020f8 <MX_FSMC_Init+0xec>)
 800204e:	2200      	movs	r2, #0
 8002050:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8002052:	4b29      	ldr	r3, [pc, #164]	; (80020f8 <MX_FSMC_Init+0xec>)
 8002054:	2200      	movs	r2, #0
 8002056:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8002058:	4b27      	ldr	r3, [pc, #156]	; (80020f8 <MX_FSMC_Init+0xec>)
 800205a:	2210      	movs	r2, #16
 800205c:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800205e:	4b26      	ldr	r3, [pc, #152]	; (80020f8 <MX_FSMC_Init+0xec>)
 8002060:	2200      	movs	r2, #0
 8002062:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8002064:	4b24      	ldr	r3, [pc, #144]	; (80020f8 <MX_FSMC_Init+0xec>)
 8002066:	2200      	movs	r2, #0
 8002068:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800206a:	4b23      	ldr	r3, [pc, #140]	; (80020f8 <MX_FSMC_Init+0xec>)
 800206c:	2200      	movs	r2, #0
 800206e:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8002070:	4b21      	ldr	r3, [pc, #132]	; (80020f8 <MX_FSMC_Init+0xec>)
 8002072:	2200      	movs	r2, #0
 8002074:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8002076:	4b20      	ldr	r3, [pc, #128]	; (80020f8 <MX_FSMC_Init+0xec>)
 8002078:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800207c:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800207e:	4b1e      	ldr	r3, [pc, #120]	; (80020f8 <MX_FSMC_Init+0xec>)
 8002080:	2200      	movs	r2, #0
 8002082:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8002084:	4b1c      	ldr	r3, [pc, #112]	; (80020f8 <MX_FSMC_Init+0xec>)
 8002086:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800208a:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800208c:	4b1a      	ldr	r3, [pc, #104]	; (80020f8 <MX_FSMC_Init+0xec>)
 800208e:	2200      	movs	r2, #0
 8002090:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8002092:	4b19      	ldr	r3, [pc, #100]	; (80020f8 <MX_FSMC_Init+0xec>)
 8002094:	2200      	movs	r2, #0
 8002096:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8002098:	4b17      	ldr	r3, [pc, #92]	; (80020f8 <MX_FSMC_Init+0xec>)
 800209a:	2200      	movs	r2, #0
 800209c:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 2;
 800209e:	2302      	movs	r3, #2
 80020a0:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80020a2:	230f      	movs	r3, #15
 80020a4:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 4;
 80020a6:	2304      	movs	r3, #4
 80020a8:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 80020aa:	2300      	movs	r3, #0
 80020ac:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 80020ae:	2310      	movs	r3, #16
 80020b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 80020b2:	2311      	movs	r3, #17
 80020b4:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80020b6:	2300      	movs	r3, #0
 80020b8:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 15;
 80020ba:	230f      	movs	r3, #15
 80020bc:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 80020be:	230f      	movs	r3, #15
 80020c0:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 40;
 80020c2:	2328      	movs	r3, #40	; 0x28
 80020c4:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 80020c6:	2300      	movs	r3, #0
 80020c8:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 80020ca:	2310      	movs	r3, #16
 80020cc:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 80020ce:	2311      	movs	r3, #17
 80020d0:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 80020d2:	2300      	movs	r3, #0
 80020d4:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 80020d6:	463a      	mov	r2, r7
 80020d8:	f107 031c 	add.w	r3, r7, #28
 80020dc:	4619      	mov	r1, r3
 80020de:	4806      	ldr	r0, [pc, #24]	; (80020f8 <MX_FSMC_Init+0xec>)
 80020e0:	f001 ff89 	bl	8003ff6 <HAL_SRAM_Init>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 80020ea:	f000 f809 	bl	8002100 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80020ee:	bf00      	nop
 80020f0:	3738      	adds	r7, #56	; 0x38
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	20000220 	.word	0x20000220
 80020fc:	a0000104 	.word	0xa0000104

08002100 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002104:	b672      	cpsid	i
}
 8002106:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002108:	e7fe      	b.n	8002108 <Error_Handler+0x8>
	...

0800210c <SPI1_Transfer>:
#include <stm32f4xx_hal_gpio.h>
#include <stdio.h>


uint8_t SPI1_Transfer(uint8_t data)
{
 800210c:	b480      	push	{r7}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0
 8002112:	4603      	mov	r3, r0
 8002114:	71fb      	strb	r3, [r7, #7]
	SPI_TypeDef *SPI1inst = hspi1.Instance;
 8002116:	4b12      	ldr	r3, [pc, #72]	; (8002160 <SPI1_Transfer+0x54>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	60fb      	str	r3, [r7, #12]
    SPI1inst->DR = data;
 800211c:	79fa      	ldrb	r2, [r7, #7]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	60da      	str	r2, [r3, #12]
    while (!(SPI1inst->SR & (SPI_FLAG_TXE)));
 8002122:	bf00      	nop
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	f003 0302 	and.w	r3, r3, #2
 800212c:	2b00      	cmp	r3, #0
 800212e:	d0f9      	beq.n	8002124 <SPI1_Transfer+0x18>
    while (!(SPI1inst->SR & (SPI_FLAG_RXNE)));
 8002130:	bf00      	nop
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	2b00      	cmp	r3, #0
 800213c:	d0f9      	beq.n	8002132 <SPI1_Transfer+0x26>
    while (SPI1inst->SR & (SPI_FLAG_BSY));
 800213e:	bf00      	nop
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002148:	2b00      	cmp	r3, #0
 800214a:	d1f9      	bne.n	8002140 <SPI1_Transfer+0x34>
    return SPI1inst->DR;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	b2db      	uxtb	r3, r3
}
 8002152:	4618      	mov	r0, r3
 8002154:	3714      	adds	r7, #20
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	200000e8 	.word	0x200000e8

08002164 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800216a:	2300      	movs	r3, #0
 800216c:	607b      	str	r3, [r7, #4]
 800216e:	4b10      	ldr	r3, [pc, #64]	; (80021b0 <HAL_MspInit+0x4c>)
 8002170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002172:	4a0f      	ldr	r2, [pc, #60]	; (80021b0 <HAL_MspInit+0x4c>)
 8002174:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002178:	6453      	str	r3, [r2, #68]	; 0x44
 800217a:	4b0d      	ldr	r3, [pc, #52]	; (80021b0 <HAL_MspInit+0x4c>)
 800217c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002182:	607b      	str	r3, [r7, #4]
 8002184:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002186:	2300      	movs	r3, #0
 8002188:	603b      	str	r3, [r7, #0]
 800218a:	4b09      	ldr	r3, [pc, #36]	; (80021b0 <HAL_MspInit+0x4c>)
 800218c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218e:	4a08      	ldr	r2, [pc, #32]	; (80021b0 <HAL_MspInit+0x4c>)
 8002190:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002194:	6413      	str	r3, [r2, #64]	; 0x40
 8002196:	4b06      	ldr	r3, [pc, #24]	; (80021b0 <HAL_MspInit+0x4c>)
 8002198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800219e:	603b      	str	r3, [r7, #0]
 80021a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021a2:	bf00      	nop
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	40023800 	.word	0x40023800

080021b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b08a      	sub	sp, #40	; 0x28
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021bc:	f107 0314 	add.w	r3, r7, #20
 80021c0:	2200      	movs	r2, #0
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	605a      	str	r2, [r3, #4]
 80021c6:	609a      	str	r2, [r3, #8]
 80021c8:	60da      	str	r2, [r3, #12]
 80021ca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a19      	ldr	r2, [pc, #100]	; (8002238 <HAL_I2C_MspInit+0x84>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d12b      	bne.n	800222e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021d6:	2300      	movs	r3, #0
 80021d8:	613b      	str	r3, [r7, #16]
 80021da:	4b18      	ldr	r3, [pc, #96]	; (800223c <HAL_I2C_MspInit+0x88>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021de:	4a17      	ldr	r2, [pc, #92]	; (800223c <HAL_I2C_MspInit+0x88>)
 80021e0:	f043 0302 	orr.w	r3, r3, #2
 80021e4:	6313      	str	r3, [r2, #48]	; 0x30
 80021e6:	4b15      	ldr	r3, [pc, #84]	; (800223c <HAL_I2C_MspInit+0x88>)
 80021e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	613b      	str	r3, [r7, #16]
 80021f0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80021f2:	23c0      	movs	r3, #192	; 0xc0
 80021f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021f6:	2312      	movs	r3, #18
 80021f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021fa:	2301      	movs	r3, #1
 80021fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021fe:	2303      	movs	r3, #3
 8002200:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002202:	2304      	movs	r3, #4
 8002204:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002206:	f107 0314 	add.w	r3, r7, #20
 800220a:	4619      	mov	r1, r3
 800220c:	480c      	ldr	r0, [pc, #48]	; (8002240 <HAL_I2C_MspInit+0x8c>)
 800220e:	f000 fed9 	bl	8002fc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002212:	2300      	movs	r3, #0
 8002214:	60fb      	str	r3, [r7, #12]
 8002216:	4b09      	ldr	r3, [pc, #36]	; (800223c <HAL_I2C_MspInit+0x88>)
 8002218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221a:	4a08      	ldr	r2, [pc, #32]	; (800223c <HAL_I2C_MspInit+0x88>)
 800221c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002220:	6413      	str	r3, [r2, #64]	; 0x40
 8002222:	4b06      	ldr	r3, [pc, #24]	; (800223c <HAL_I2C_MspInit+0x88>)
 8002224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002226:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800222a:	60fb      	str	r3, [r7, #12]
 800222c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800222e:	bf00      	nop
 8002230:	3728      	adds	r7, #40	; 0x28
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	40005400 	.word	0x40005400
 800223c:	40023800 	.word	0x40023800
 8002240:	40020400 	.word	0x40020400

08002244 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b08c      	sub	sp, #48	; 0x30
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800224c:	f107 031c 	add.w	r3, r7, #28
 8002250:	2200      	movs	r2, #0
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	605a      	str	r2, [r3, #4]
 8002256:	609a      	str	r2, [r3, #8]
 8002258:	60da      	str	r2, [r3, #12]
 800225a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a41      	ldr	r2, [pc, #260]	; (8002368 <HAL_SPI_MspInit+0x124>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d12c      	bne.n	80022c0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002266:	2300      	movs	r3, #0
 8002268:	61bb      	str	r3, [r7, #24]
 800226a:	4b40      	ldr	r3, [pc, #256]	; (800236c <HAL_SPI_MspInit+0x128>)
 800226c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226e:	4a3f      	ldr	r2, [pc, #252]	; (800236c <HAL_SPI_MspInit+0x128>)
 8002270:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002274:	6453      	str	r3, [r2, #68]	; 0x44
 8002276:	4b3d      	ldr	r3, [pc, #244]	; (800236c <HAL_SPI_MspInit+0x128>)
 8002278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800227e:	61bb      	str	r3, [r7, #24]
 8002280:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002282:	2300      	movs	r3, #0
 8002284:	617b      	str	r3, [r7, #20]
 8002286:	4b39      	ldr	r3, [pc, #228]	; (800236c <HAL_SPI_MspInit+0x128>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228a:	4a38      	ldr	r2, [pc, #224]	; (800236c <HAL_SPI_MspInit+0x128>)
 800228c:	f043 0301 	orr.w	r3, r3, #1
 8002290:	6313      	str	r3, [r2, #48]	; 0x30
 8002292:	4b36      	ldr	r3, [pc, #216]	; (800236c <HAL_SPI_MspInit+0x128>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002296:	f003 0301 	and.w	r3, r3, #1
 800229a:	617b      	str	r3, [r7, #20]
 800229c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800229e:	23e0      	movs	r3, #224	; 0xe0
 80022a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a2:	2302      	movs	r3, #2
 80022a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a6:	2300      	movs	r3, #0
 80022a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022aa:	2303      	movs	r3, #3
 80022ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80022ae:	2305      	movs	r3, #5
 80022b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022b2:	f107 031c 	add.w	r3, r7, #28
 80022b6:	4619      	mov	r1, r3
 80022b8:	482d      	ldr	r0, [pc, #180]	; (8002370 <HAL_SPI_MspInit+0x12c>)
 80022ba:	f000 fe83 	bl	8002fc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80022be:	e04f      	b.n	8002360 <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI3)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a2b      	ldr	r2, [pc, #172]	; (8002374 <HAL_SPI_MspInit+0x130>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d14a      	bne.n	8002360 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80022ca:	2300      	movs	r3, #0
 80022cc:	613b      	str	r3, [r7, #16]
 80022ce:	4b27      	ldr	r3, [pc, #156]	; (800236c <HAL_SPI_MspInit+0x128>)
 80022d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d2:	4a26      	ldr	r2, [pc, #152]	; (800236c <HAL_SPI_MspInit+0x128>)
 80022d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022d8:	6413      	str	r3, [r2, #64]	; 0x40
 80022da:	4b24      	ldr	r3, [pc, #144]	; (800236c <HAL_SPI_MspInit+0x128>)
 80022dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022e2:	613b      	str	r3, [r7, #16]
 80022e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022e6:	2300      	movs	r3, #0
 80022e8:	60fb      	str	r3, [r7, #12]
 80022ea:	4b20      	ldr	r3, [pc, #128]	; (800236c <HAL_SPI_MspInit+0x128>)
 80022ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ee:	4a1f      	ldr	r2, [pc, #124]	; (800236c <HAL_SPI_MspInit+0x128>)
 80022f0:	f043 0304 	orr.w	r3, r3, #4
 80022f4:	6313      	str	r3, [r2, #48]	; 0x30
 80022f6:	4b1d      	ldr	r3, [pc, #116]	; (800236c <HAL_SPI_MspInit+0x128>)
 80022f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fa:	f003 0304 	and.w	r3, r3, #4
 80022fe:	60fb      	str	r3, [r7, #12]
 8002300:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002302:	2300      	movs	r3, #0
 8002304:	60bb      	str	r3, [r7, #8]
 8002306:	4b19      	ldr	r3, [pc, #100]	; (800236c <HAL_SPI_MspInit+0x128>)
 8002308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230a:	4a18      	ldr	r2, [pc, #96]	; (800236c <HAL_SPI_MspInit+0x128>)
 800230c:	f043 0302 	orr.w	r3, r3, #2
 8002310:	6313      	str	r3, [r2, #48]	; 0x30
 8002312:	4b16      	ldr	r3, [pc, #88]	; (800236c <HAL_SPI_MspInit+0x128>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	60bb      	str	r3, [r7, #8]
 800231c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800231e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002322:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002324:	2302      	movs	r3, #2
 8002326:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002328:	2300      	movs	r3, #0
 800232a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800232c:	2303      	movs	r3, #3
 800232e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002330:	2306      	movs	r3, #6
 8002332:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002334:	f107 031c 	add.w	r3, r7, #28
 8002338:	4619      	mov	r1, r3
 800233a:	480f      	ldr	r0, [pc, #60]	; (8002378 <HAL_SPI_MspInit+0x134>)
 800233c:	f000 fe42 	bl	8002fc4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002340:	2330      	movs	r3, #48	; 0x30
 8002342:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002344:	2302      	movs	r3, #2
 8002346:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002348:	2300      	movs	r3, #0
 800234a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800234c:	2303      	movs	r3, #3
 800234e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002350:	2306      	movs	r3, #6
 8002352:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002354:	f107 031c 	add.w	r3, r7, #28
 8002358:	4619      	mov	r1, r3
 800235a:	4808      	ldr	r0, [pc, #32]	; (800237c <HAL_SPI_MspInit+0x138>)
 800235c:	f000 fe32 	bl	8002fc4 <HAL_GPIO_Init>
}
 8002360:	bf00      	nop
 8002362:	3730      	adds	r7, #48	; 0x30
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	40013000 	.word	0x40013000
 800236c:	40023800 	.word	0x40023800
 8002370:	40020000 	.word	0x40020000
 8002374:	40003c00 	.word	0x40003c00
 8002378:	40020800 	.word	0x40020800
 800237c:	40020400 	.word	0x40020400

08002380 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b08c      	sub	sp, #48	; 0x30
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002388:	f107 031c 	add.w	r3, r7, #28
 800238c:	2200      	movs	r2, #0
 800238e:	601a      	str	r2, [r3, #0]
 8002390:	605a      	str	r2, [r3, #4]
 8002392:	609a      	str	r2, [r3, #8]
 8002394:	60da      	str	r2, [r3, #12]
 8002396:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a3a      	ldr	r2, [pc, #232]	; (8002488 <HAL_UART_MspInit+0x108>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d135      	bne.n	800240e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80023a2:	2300      	movs	r3, #0
 80023a4:	61bb      	str	r3, [r7, #24]
 80023a6:	4b39      	ldr	r3, [pc, #228]	; (800248c <HAL_UART_MspInit+0x10c>)
 80023a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023aa:	4a38      	ldr	r2, [pc, #224]	; (800248c <HAL_UART_MspInit+0x10c>)
 80023ac:	f043 0310 	orr.w	r3, r3, #16
 80023b0:	6453      	str	r3, [r2, #68]	; 0x44
 80023b2:	4b36      	ldr	r3, [pc, #216]	; (800248c <HAL_UART_MspInit+0x10c>)
 80023b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b6:	f003 0310 	and.w	r3, r3, #16
 80023ba:	61bb      	str	r3, [r7, #24]
 80023bc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023be:	2300      	movs	r3, #0
 80023c0:	617b      	str	r3, [r7, #20]
 80023c2:	4b32      	ldr	r3, [pc, #200]	; (800248c <HAL_UART_MspInit+0x10c>)
 80023c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c6:	4a31      	ldr	r2, [pc, #196]	; (800248c <HAL_UART_MspInit+0x10c>)
 80023c8:	f043 0301 	orr.w	r3, r3, #1
 80023cc:	6313      	str	r3, [r2, #48]	; 0x30
 80023ce:	4b2f      	ldr	r3, [pc, #188]	; (800248c <HAL_UART_MspInit+0x10c>)
 80023d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	617b      	str	r3, [r7, #20]
 80023d8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80023da:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80023de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e0:	2302      	movs	r3, #2
 80023e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e4:	2300      	movs	r3, #0
 80023e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023e8:	2303      	movs	r3, #3
 80023ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023ec:	2307      	movs	r3, #7
 80023ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023f0:	f107 031c 	add.w	r3, r7, #28
 80023f4:	4619      	mov	r1, r3
 80023f6:	4826      	ldr	r0, [pc, #152]	; (8002490 <HAL_UART_MspInit+0x110>)
 80023f8:	f000 fde4 	bl	8002fc4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80023fc:	2200      	movs	r2, #0
 80023fe:	2100      	movs	r1, #0
 8002400:	2025      	movs	r0, #37	; 0x25
 8002402:	f000 fd16 	bl	8002e32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002406:	2025      	movs	r0, #37	; 0x25
 8002408:	f000 fd2f 	bl	8002e6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800240c:	e038      	b.n	8002480 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a20      	ldr	r2, [pc, #128]	; (8002494 <HAL_UART_MspInit+0x114>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d133      	bne.n	8002480 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002418:	2300      	movs	r3, #0
 800241a:	613b      	str	r3, [r7, #16]
 800241c:	4b1b      	ldr	r3, [pc, #108]	; (800248c <HAL_UART_MspInit+0x10c>)
 800241e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002420:	4a1a      	ldr	r2, [pc, #104]	; (800248c <HAL_UART_MspInit+0x10c>)
 8002422:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002426:	6413      	str	r3, [r2, #64]	; 0x40
 8002428:	4b18      	ldr	r3, [pc, #96]	; (800248c <HAL_UART_MspInit+0x10c>)
 800242a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002430:	613b      	str	r3, [r7, #16]
 8002432:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002434:	2300      	movs	r3, #0
 8002436:	60fb      	str	r3, [r7, #12]
 8002438:	4b14      	ldr	r3, [pc, #80]	; (800248c <HAL_UART_MspInit+0x10c>)
 800243a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243c:	4a13      	ldr	r2, [pc, #76]	; (800248c <HAL_UART_MspInit+0x10c>)
 800243e:	f043 0301 	orr.w	r3, r3, #1
 8002442:	6313      	str	r3, [r2, #48]	; 0x30
 8002444:	4b11      	ldr	r3, [pc, #68]	; (800248c <HAL_UART_MspInit+0x10c>)
 8002446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002448:	f003 0301 	and.w	r3, r3, #1
 800244c:	60fb      	str	r3, [r7, #12]
 800244e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002450:	230c      	movs	r3, #12
 8002452:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002454:	2302      	movs	r3, #2
 8002456:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002458:	2300      	movs	r3, #0
 800245a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800245c:	2303      	movs	r3, #3
 800245e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002460:	2307      	movs	r3, #7
 8002462:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002464:	f107 031c 	add.w	r3, r7, #28
 8002468:	4619      	mov	r1, r3
 800246a:	4809      	ldr	r0, [pc, #36]	; (8002490 <HAL_UART_MspInit+0x110>)
 800246c:	f000 fdaa 	bl	8002fc4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002470:	2200      	movs	r2, #0
 8002472:	2100      	movs	r1, #0
 8002474:	2026      	movs	r0, #38	; 0x26
 8002476:	f000 fcdc 	bl	8002e32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800247a:	2026      	movs	r0, #38	; 0x26
 800247c:	f000 fcf5 	bl	8002e6a <HAL_NVIC_EnableIRQ>
}
 8002480:	bf00      	nop
 8002482:	3730      	adds	r7, #48	; 0x30
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	40011000 	.word	0x40011000
 800248c:	40023800 	.word	0x40023800
 8002490:	40020000 	.word	0x40020000
 8002494:	40004400 	.word	0x40004400

08002498 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8002498:	b580      	push	{r7, lr}
 800249a:	b086      	sub	sp, #24
 800249c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800249e:	1d3b      	adds	r3, r7, #4
 80024a0:	2200      	movs	r2, #0
 80024a2:	601a      	str	r2, [r3, #0]
 80024a4:	605a      	str	r2, [r3, #4]
 80024a6:	609a      	str	r2, [r3, #8]
 80024a8:	60da      	str	r2, [r3, #12]
 80024aa:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80024ac:	4b1c      	ldr	r3, [pc, #112]	; (8002520 <HAL_FSMC_MspInit+0x88>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d131      	bne.n	8002518 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80024b4:	4b1a      	ldr	r3, [pc, #104]	; (8002520 <HAL_FSMC_MspInit+0x88>)
 80024b6:	2201      	movs	r2, #1
 80024b8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80024ba:	2300      	movs	r3, #0
 80024bc:	603b      	str	r3, [r7, #0]
 80024be:	4b19      	ldr	r3, [pc, #100]	; (8002524 <HAL_FSMC_MspInit+0x8c>)
 80024c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024c2:	4a18      	ldr	r2, [pc, #96]	; (8002524 <HAL_FSMC_MspInit+0x8c>)
 80024c4:	f043 0301 	orr.w	r3, r3, #1
 80024c8:	6393      	str	r3, [r2, #56]	; 0x38
 80024ca:	4b16      	ldr	r3, [pc, #88]	; (8002524 <HAL_FSMC_MspInit+0x8c>)
 80024cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	603b      	str	r3, [r7, #0]
 80024d4:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80024d6:	f64f 7380 	movw	r3, #65408	; 0xff80
 80024da:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024dc:	2302      	movs	r3, #2
 80024de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e0:	2300      	movs	r3, #0
 80024e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024e4:	2303      	movs	r3, #3
 80024e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80024e8:	230c      	movs	r3, #12
 80024ea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024ec:	1d3b      	adds	r3, r7, #4
 80024ee:	4619      	mov	r1, r3
 80024f0:	480d      	ldr	r0, [pc, #52]	; (8002528 <HAL_FSMC_MspInit+0x90>)
 80024f2:	f000 fd67 	bl	8002fc4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13
 80024f6:	f24e 73b3 	movw	r3, #59315	; 0xe7b3
 80024fa:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024fc:	2302      	movs	r3, #2
 80024fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002500:	2300      	movs	r3, #0
 8002502:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002504:	2303      	movs	r3, #3
 8002506:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002508:	230c      	movs	r3, #12
 800250a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800250c:	1d3b      	adds	r3, r7, #4
 800250e:	4619      	mov	r1, r3
 8002510:	4806      	ldr	r0, [pc, #24]	; (800252c <HAL_FSMC_MspInit+0x94>)
 8002512:	f000 fd57 	bl	8002fc4 <HAL_GPIO_Init>
 8002516:	e000      	b.n	800251a <HAL_FSMC_MspInit+0x82>
    return;
 8002518:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800251a:	3718      	adds	r7, #24
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	20000270 	.word	0x20000270
 8002524:	40023800 	.word	0x40023800
 8002528:	40021000 	.word	0x40021000
 800252c:	40020c00 	.word	0x40020c00

08002530 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8002538:	f7ff ffae 	bl	8002498 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800253c:	bf00      	nop
 800253e:	3708      	adds	r7, #8
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002548:	e7fe      	b.n	8002548 <NMI_Handler+0x4>

0800254a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800254a:	b480      	push	{r7}
 800254c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800254e:	e7fe      	b.n	800254e <HardFault_Handler+0x4>

08002550 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002554:	e7fe      	b.n	8002554 <MemManage_Handler+0x4>

08002556 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002556:	b480      	push	{r7}
 8002558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800255a:	e7fe      	b.n	800255a <BusFault_Handler+0x4>

0800255c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002560:	e7fe      	b.n	8002560 <UsageFault_Handler+0x4>

08002562 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002562:	b480      	push	{r7}
 8002564:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002566:	bf00      	nop
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002574:	bf00      	nop
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr

0800257e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800257e:	b480      	push	{r7}
 8002580:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002582:	bf00      	nop
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002590:	f000 fb30 	bl	8002bf4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002594:	bf00      	nop
 8002596:	bd80      	pop	{r7, pc}

08002598 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  static int ledVal = 0;
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, ledVal);
 800259e:	4b24      	ldr	r3, [pc, #144]	; (8002630 <USART1_IRQHandler+0x98>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	461a      	mov	r2, r3
 80025a6:	2108      	movs	r1, #8
 80025a8:	4822      	ldr	r0, [pc, #136]	; (8002634 <USART1_IRQHandler+0x9c>)
 80025aa:	f000 fea7 	bl	80032fc <HAL_GPIO_WritePin>
  ledVal = !ledVal;
 80025ae:	4b20      	ldr	r3, [pc, #128]	; (8002630 <USART1_IRQHandler+0x98>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	bf0c      	ite	eq
 80025b6:	2301      	moveq	r3, #1
 80025b8:	2300      	movne	r3, #0
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	461a      	mov	r2, r3
 80025be:	4b1c      	ldr	r3, [pc, #112]	; (8002630 <USART1_IRQHandler+0x98>)
 80025c0:	601a      	str	r2, [r3, #0]
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80025c2:	481d      	ldr	r0, [pc, #116]	; (8002638 <USART1_IRQHandler+0xa0>)
 80025c4:	f001 fe3e 	bl	8004244 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  volatile unsigned int IIR;
  IIR = USART1->SR;
 80025c8:	4b1c      	ldr	r3, [pc, #112]	; (800263c <USART1_IRQHandler+0xa4>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	603b      	str	r3, [r7, #0]
  if(IIR & UART_FLAG_RXNE){
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	f003 0320 	and.w	r3, r3, #32
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d009      	beq.n	80025ec <USART1_IRQHandler+0x54>
  		//Read Data Register Not Empty
  		char t = USART1->DR; // the character from the USART1 data register is saved in t
 80025d8:	4b18      	ldr	r3, [pc, #96]	; (800263c <USART1_IRQHandler+0xa4>)
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	71fb      	strb	r3, [r7, #7]
  		put_in_rx_buffer(t,DBG_UART);
 80025de:	4b18      	ldr	r3, [pc, #96]	; (8002640 <USART1_IRQHandler+0xa8>)
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	79fb      	ldrb	r3, [r7, #7]
 80025e4:	4611      	mov	r1, r2
 80025e6:	4618      	mov	r0, r3
 80025e8:	f000 f93c 	bl	8002864 <put_in_rx_buffer>
      }
  if(IIR & UART_FLAG_TXE){
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d018      	beq.n	8002628 <USART1_IRQHandler+0x90>
  		if(wr_pointer_dbg==rd_pointer_dbg){
 80025f6:	4b13      	ldr	r3, [pc, #76]	; (8002644 <USART1_IRQHandler+0xac>)
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	4b13      	ldr	r3, [pc, #76]	; (8002648 <USART1_IRQHandler+0xb0>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	429a      	cmp	r2, r3
 8002600:	d108      	bne.n	8002614 <USART1_IRQHandler+0x7c>
  			__HAL_UART_DISABLE_IT(&huart1, UART_IT_TXE); //whole message transmitted
 8002602:	4b0d      	ldr	r3, [pc, #52]	; (8002638 <USART1_IRQHandler+0xa0>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	68da      	ldr	r2, [r3, #12]
 8002608:	4b0b      	ldr	r3, [pc, #44]	; (8002638 <USART1_IRQHandler+0xa0>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002610:	60da      	str	r2, [r3, #12]
  		}
  	}


  /* USER CODE END USART1_IRQn 1 */
}
 8002612:	e009      	b.n	8002628 <USART1_IRQHandler+0x90>
  			DBG_UART->DR = get_from_tx_buffer(DBG_UART);
 8002614:	4b0a      	ldr	r3, [pc, #40]	; (8002640 <USART1_IRQHandler+0xa8>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4618      	mov	r0, r3
 800261a:	f000 f975 	bl	8002908 <get_from_tx_buffer>
 800261e:	4603      	mov	r3, r0
 8002620:	461a      	mov	r2, r3
 8002622:	4b07      	ldr	r3, [pc, #28]	; (8002640 <USART1_IRQHandler+0xa8>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	605a      	str	r2, [r3, #4]
}
 8002628:	bf00      	nop
 800262a:	3708      	adds	r7, #8
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	20000274 	.word	0x20000274
 8002634:	40020400 	.word	0x40020400
 8002638:	20000198 	.word	0x20000198
 800263c:	40011000 	.word	0x40011000
 8002640:	20000008 	.word	0x20000008
 8002644:	20000a88 	.word	0x20000a88
 8002648:	20000a84 	.word	0x20000a84

0800264c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002652:	481b      	ldr	r0, [pc, #108]	; (80026c0 <USART2_IRQHandler+0x74>)
 8002654:	f001 fdf6 	bl	8004244 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  volatile unsigned int IIR;
  	IIR=USART2->SR;
 8002658:	4b1a      	ldr	r3, [pc, #104]	; (80026c4 <USART2_IRQHandler+0x78>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	603b      	str	r3, [r7, #0]
    if(IIR & UART_FLAG_RXNE){
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	f003 0320 	and.w	r3, r3, #32
 8002664:	2b00      	cmp	r3, #0
 8002666:	d009      	beq.n	800267c <USART2_IRQHandler+0x30>
  		// check if the USART6 receive interrupt flag was set
  		char t = USART2->DR; // the character from the USART1 data register is saved in t
 8002668:	4b16      	ldr	r3, [pc, #88]	; (80026c4 <USART2_IRQHandler+0x78>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	71fb      	strb	r3, [r7, #7]
  		put_in_rx_buffer(t,RS485_UART);
 800266e:	4b16      	ldr	r3, [pc, #88]	; (80026c8 <USART2_IRQHandler+0x7c>)
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	79fb      	ldrb	r3, [r7, #7]
 8002674:	4611      	mov	r1, r2
 8002676:	4618      	mov	r0, r3
 8002678:	f000 f8f4 	bl	8002864 <put_in_rx_buffer>
      }
  	if(IIR & UART_FLAG_TXE){
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002682:	2b00      	cmp	r3, #0
 8002684:	d017      	beq.n	80026b6 <USART2_IRQHandler+0x6a>
  		if(wr_pointer_rs485==rd_pointer_rs485){
 8002686:	4b11      	ldr	r3, [pc, #68]	; (80026cc <USART2_IRQHandler+0x80>)
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	4b11      	ldr	r3, [pc, #68]	; (80026d0 <USART2_IRQHandler+0x84>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	429a      	cmp	r2, r3
 8002690:	d108      	bne.n	80026a4 <USART2_IRQHandler+0x58>
  			__HAL_UART_DISABLE_IT(&huart2, UART_IT_TXE);
 8002692:	4b0b      	ldr	r3, [pc, #44]	; (80026c0 <USART2_IRQHandler+0x74>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68da      	ldr	r2, [r3, #12]
 8002698:	4b09      	ldr	r3, [pc, #36]	; (80026c0 <USART2_IRQHandler+0x74>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026a0:	60da      	str	r2, [r3, #12]
  			USART2->DR = get_from_tx_buffer(RS485_UART);
  		}
  	}

  /* USER CODE END USART2_IRQn 1 */
}
 80026a2:	e008      	b.n	80026b6 <USART2_IRQHandler+0x6a>
  			USART2->DR = get_from_tx_buffer(RS485_UART);
 80026a4:	4b08      	ldr	r3, [pc, #32]	; (80026c8 <USART2_IRQHandler+0x7c>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4618      	mov	r0, r3
 80026aa:	f000 f92d 	bl	8002908 <get_from_tx_buffer>
 80026ae:	4603      	mov	r3, r0
 80026b0:	461a      	mov	r2, r3
 80026b2:	4b04      	ldr	r3, [pc, #16]	; (80026c4 <USART2_IRQHandler+0x78>)
 80026b4:	605a      	str	r2, [r3, #4]
}
 80026b6:	bf00      	nop
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	200001dc 	.word	0x200001dc
 80026c4:	40004400 	.word	0x40004400
 80026c8:	20000004 	.word	0x20000004
 80026cc:	20000680 	.word	0x20000680
 80026d0:	2000067c 	.word	0x2000067c

080026d4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b086      	sub	sp, #24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026e0:	2300      	movs	r3, #0
 80026e2:	617b      	str	r3, [r7, #20]
 80026e4:	e00a      	b.n	80026fc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80026e6:	f3af 8000 	nop.w
 80026ea:	4601      	mov	r1, r0
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	1c5a      	adds	r2, r3, #1
 80026f0:	60ba      	str	r2, [r7, #8]
 80026f2:	b2ca      	uxtb	r2, r1
 80026f4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	3301      	adds	r3, #1
 80026fa:	617b      	str	r3, [r7, #20]
 80026fc:	697a      	ldr	r2, [r7, #20]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	429a      	cmp	r2, r3
 8002702:	dbf0      	blt.n	80026e6 <_read+0x12>
	}

return len;
 8002704:	687b      	ldr	r3, [r7, #4]
}
 8002706:	4618      	mov	r0, r3
 8002708:	3718      	adds	r7, #24
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800270e:	b580      	push	{r7, lr}
 8002710:	b086      	sub	sp, #24
 8002712:	af00      	add	r7, sp, #0
 8002714:	60f8      	str	r0, [r7, #12]
 8002716:	60b9      	str	r1, [r7, #8]
 8002718:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800271a:	2300      	movs	r3, #0
 800271c:	617b      	str	r3, [r7, #20]
 800271e:	e009      	b.n	8002734 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	1c5a      	adds	r2, r3, #1
 8002724:	60ba      	str	r2, [r7, #8]
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	4618      	mov	r0, r3
 800272a:	f000 f889 	bl	8002840 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	3301      	adds	r3, #1
 8002732:	617b      	str	r3, [r7, #20]
 8002734:	697a      	ldr	r2, [r7, #20]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	429a      	cmp	r2, r3
 800273a:	dbf1      	blt.n	8002720 <_write+0x12>
	}
	return len;
 800273c:	687b      	ldr	r3, [r7, #4]
}
 800273e:	4618      	mov	r0, r3
 8002740:	3718      	adds	r7, #24
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}

08002746 <_close>:

int _close(int file)
{
 8002746:	b480      	push	{r7}
 8002748:	b083      	sub	sp, #12
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
	return -1;
 800274e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002752:	4618      	mov	r0, r3
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr

0800275e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800275e:	b480      	push	{r7}
 8002760:	b083      	sub	sp, #12
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
 8002766:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800276e:	605a      	str	r2, [r3, #4]
	return 0;
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr

0800277e <_isatty>:

int _isatty(int file)
{
 800277e:	b480      	push	{r7}
 8002780:	b083      	sub	sp, #12
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
	return 1;
 8002786:	2301      	movs	r3, #1
}
 8002788:	4618      	mov	r0, r3
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002794:	b480      	push	{r7}
 8002796:	b085      	sub	sp, #20
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
	return 0;
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3714      	adds	r7, #20
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
	...

080027b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b086      	sub	sp, #24
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027b8:	4a14      	ldr	r2, [pc, #80]	; (800280c <_sbrk+0x5c>)
 80027ba:	4b15      	ldr	r3, [pc, #84]	; (8002810 <_sbrk+0x60>)
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027c4:	4b13      	ldr	r3, [pc, #76]	; (8002814 <_sbrk+0x64>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d102      	bne.n	80027d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027cc:	4b11      	ldr	r3, [pc, #68]	; (8002814 <_sbrk+0x64>)
 80027ce:	4a12      	ldr	r2, [pc, #72]	; (8002818 <_sbrk+0x68>)
 80027d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027d2:	4b10      	ldr	r3, [pc, #64]	; (8002814 <_sbrk+0x64>)
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4413      	add	r3, r2
 80027da:	693a      	ldr	r2, [r7, #16]
 80027dc:	429a      	cmp	r2, r3
 80027de:	d207      	bcs.n	80027f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027e0:	f002 fd40 	bl	8005264 <__errno>
 80027e4:	4603      	mov	r3, r0
 80027e6:	220c      	movs	r2, #12
 80027e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027ea:	f04f 33ff 	mov.w	r3, #4294967295
 80027ee:	e009      	b.n	8002804 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027f0:	4b08      	ldr	r3, [pc, #32]	; (8002814 <_sbrk+0x64>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027f6:	4b07      	ldr	r3, [pc, #28]	; (8002814 <_sbrk+0x64>)
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4413      	add	r3, r2
 80027fe:	4a05      	ldr	r2, [pc, #20]	; (8002814 <_sbrk+0x64>)
 8002800:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002802:	68fb      	ldr	r3, [r7, #12]
}
 8002804:	4618      	mov	r0, r3
 8002806:	3718      	adds	r7, #24
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	20020000 	.word	0x20020000
 8002810:	00000400 	.word	0x00000400
 8002814:	20000278 	.word	0x20000278
 8002818:	20002eb0 	.word	0x20002eb0

0800281c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002820:	4b06      	ldr	r3, [pc, #24]	; (800283c <SystemInit+0x20>)
 8002822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002826:	4a05      	ldr	r2, [pc, #20]	; (800283c <SystemInit+0x20>)
 8002828:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800282c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002830:	bf00      	nop
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	e000ed00 	.word	0xe000ed00

08002840 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

//redirect printf to uart1.
PUTCHAR_PROTOTYPE{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 0xffff);
 8002848:	1d39      	adds	r1, r7, #4
 800284a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800284e:	2201      	movs	r2, #1
 8002850:	4803      	ldr	r0, [pc, #12]	; (8002860 <__io_putchar+0x20>)
 8002852:	f001 fc65 	bl	8004120 <HAL_UART_Transmit>
	return ch;
 8002856:	687b      	ldr	r3, [r7, #4]
}
 8002858:	4618      	mov	r0, r3
 800285a:	3708      	adds	r7, #8
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	20000198 	.word	0x20000198

08002864 <put_in_rx_buffer>:

void put_in_rx_buffer(char data, USART_TypeDef* USARTx)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	4603      	mov	r3, r0
 800286c:	6039      	str	r1, [r7, #0]
 800286e:	71fb      	strb	r3, [r7, #7]
	if(USARTx == DBG_UART)
 8002870:	4b1d      	ldr	r3, [pc, #116]	; (80028e8 <put_in_rx_buffer+0x84>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	683a      	ldr	r2, [r7, #0]
 8002876:	429a      	cmp	r2, r3
 8002878:	d114      	bne.n	80028a4 <put_in_rx_buffer+0x40>
	{
		if(SIO_RBUFLEN_DBG>=LEN_RX_BUFFER_DBG)
 800287a:	4b1c      	ldr	r3, [pc, #112]	; (80028ec <put_in_rx_buffer+0x88>)
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	4b1c      	ldr	r3, [pc, #112]	; (80028f0 <put_in_rx_buffer+0x8c>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002888:	d226      	bcs.n	80028d8 <put_in_rx_buffer+0x74>
			{
				return;
			}
		rx_buffer_dbg[wr_pointer_rx_dbg & (LEN_RX_BUFFER_DBG - 1)]=data;
 800288a:	4b18      	ldr	r3, [pc, #96]	; (80028ec <put_in_rx_buffer+0x88>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002892:	4918      	ldr	r1, [pc, #96]	; (80028f4 <put_in_rx_buffer+0x90>)
 8002894:	79fa      	ldrb	r2, [r7, #7]
 8002896:	54ca      	strb	r2, [r1, r3]
		wr_pointer_rx_dbg++;
 8002898:	4b14      	ldr	r3, [pc, #80]	; (80028ec <put_in_rx_buffer+0x88>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	3301      	adds	r3, #1
 800289e:	4a13      	ldr	r2, [pc, #76]	; (80028ec <put_in_rx_buffer+0x88>)
 80028a0:	6013      	str	r3, [r2, #0]
 80028a2:	e01c      	b.n	80028de <put_in_rx_buffer+0x7a>
	}
	else if(USARTx == RS485_UART)
 80028a4:	4b14      	ldr	r3, [pc, #80]	; (80028f8 <put_in_rx_buffer+0x94>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	683a      	ldr	r2, [r7, #0]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d117      	bne.n	80028de <put_in_rx_buffer+0x7a>
	{
		if(SIO_RBUFLEN_RS485>=LEN_RX_BUFFER_RS485)
 80028ae:	4b13      	ldr	r3, [pc, #76]	; (80028fc <put_in_rx_buffer+0x98>)
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	4b13      	ldr	r3, [pc, #76]	; (8002900 <put_in_rx_buffer+0x9c>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028bc:	d20e      	bcs.n	80028dc <put_in_rx_buffer+0x78>
			{
				return;
			}
		rx_buffer_rs485[wr_pointer_rx_rs485 & (LEN_RX_BUFFER_RS485 - 1)]=data;
 80028be:	4b0f      	ldr	r3, [pc, #60]	; (80028fc <put_in_rx_buffer+0x98>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028c6:	490f      	ldr	r1, [pc, #60]	; (8002904 <put_in_rx_buffer+0xa0>)
 80028c8:	79fa      	ldrb	r2, [r7, #7]
 80028ca:	54ca      	strb	r2, [r1, r3]
		wr_pointer_rx_rs485++;
 80028cc:	4b0b      	ldr	r3, [pc, #44]	; (80028fc <put_in_rx_buffer+0x98>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	3301      	adds	r3, #1
 80028d2:	4a0a      	ldr	r2, [pc, #40]	; (80028fc <put_in_rx_buffer+0x98>)
 80028d4:	6013      	str	r3, [r2, #0]
 80028d6:	e002      	b.n	80028de <put_in_rx_buffer+0x7a>
				return;
 80028d8:	bf00      	nop
 80028da:	e000      	b.n	80028de <put_in_rx_buffer+0x7a>
				return;
 80028dc:	bf00      	nop
	}
}
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr
 80028e8:	20000008 	.word	0x20000008
 80028ec:	20002e98 	.word	0x20002e98
 80028f0:	20002e94 	.word	0x20002e94
 80028f4:	20000e94 	.word	0x20000e94
 80028f8:	20000004 	.word	0x20000004
 80028fc:	20000e90 	.word	0x20000e90
 8002900:	20000e8c 	.word	0x20000e8c
 8002904:	20000a8c 	.word	0x20000a8c

08002908 <get_from_tx_buffer>:
		tx_buffer_dbg[wr_pointer_dbg & (LEN_TX_BUFFER_DBG - 1)]=data;
		wr_pointer_dbg++;
	}
}
char get_from_tx_buffer(USART_TypeDef* USARTx)
{
 8002908:	b480      	push	{r7}
 800290a:	b085      	sub	sp, #20
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
	char data;

	if(USARTx == RS485_UART)
 8002910:	4b14      	ldr	r3, [pc, #80]	; (8002964 <get_from_tx_buffer+0x5c>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	429a      	cmp	r2, r3
 8002918:	d10c      	bne.n	8002934 <get_from_tx_buffer+0x2c>
	{

		data=tx_buffer_rs485[rd_pointer_rs485 & (LEN_TX_BUFFER_RS485-1)];
 800291a:	4b13      	ldr	r3, [pc, #76]	; (8002968 <get_from_tx_buffer+0x60>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002922:	4a12      	ldr	r2, [pc, #72]	; (800296c <get_from_tx_buffer+0x64>)
 8002924:	5cd3      	ldrb	r3, [r2, r3]
 8002926:	73fb      	strb	r3, [r7, #15]
		rd_pointer_rs485++;
 8002928:	4b0f      	ldr	r3, [pc, #60]	; (8002968 <get_from_tx_buffer+0x60>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	3301      	adds	r3, #1
 800292e:	4a0e      	ldr	r2, [pc, #56]	; (8002968 <get_from_tx_buffer+0x60>)
 8002930:	6013      	str	r3, [r2, #0]
 8002932:	e010      	b.n	8002956 <get_from_tx_buffer+0x4e>
	}
	else if(USARTx == DBG_UART)
 8002934:	4b0e      	ldr	r3, [pc, #56]	; (8002970 <get_from_tx_buffer+0x68>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	429a      	cmp	r2, r3
 800293c:	d10b      	bne.n	8002956 <get_from_tx_buffer+0x4e>
	{

		data=tx_buffer_dbg[rd_pointer_dbg & (LEN_TX_BUFFER_DBG-1)];
 800293e:	4b0d      	ldr	r3, [pc, #52]	; (8002974 <get_from_tx_buffer+0x6c>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002946:	4a0c      	ldr	r2, [pc, #48]	; (8002978 <get_from_tx_buffer+0x70>)
 8002948:	5cd3      	ldrb	r3, [r2, r3]
 800294a:	73fb      	strb	r3, [r7, #15]
		rd_pointer_dbg++;
 800294c:	4b09      	ldr	r3, [pc, #36]	; (8002974 <get_from_tx_buffer+0x6c>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	3301      	adds	r3, #1
 8002952:	4a08      	ldr	r2, [pc, #32]	; (8002974 <get_from_tx_buffer+0x6c>)
 8002954:	6013      	str	r3, [r2, #0]
	}
	return data;
 8002956:	7bfb      	ldrb	r3, [r7, #15]
}
 8002958:	4618      	mov	r0, r3
 800295a:	3714      	adds	r7, #20
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr
 8002964:	20000004 	.word	0x20000004
 8002968:	2000067c 	.word	0x2000067c
 800296c:	2000027c 	.word	0x2000027c
 8002970:	20000008 	.word	0x20000008
 8002974:	20000a84 	.word	0x20000a84
 8002978:	20000684 	.word	0x20000684

0800297c <get_from_rx_buffer>:
char get_from_rx_buffer(USART_TypeDef* USARTx)
{
 800297c:	b480      	push	{r7}
 800297e:	b085      	sub	sp, #20
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
	char data;

	if(USARTx == RS485_UART)
 8002984:	4b14      	ldr	r3, [pc, #80]	; (80029d8 <get_from_rx_buffer+0x5c>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	429a      	cmp	r2, r3
 800298c:	d10c      	bne.n	80029a8 <get_from_rx_buffer+0x2c>
	{

		data=rx_buffer_rs485[rd_pointer_rx_rs485 & (LEN_RX_BUFFER_RS485-1)];
 800298e:	4b13      	ldr	r3, [pc, #76]	; (80029dc <get_from_rx_buffer+0x60>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002996:	4a12      	ldr	r2, [pc, #72]	; (80029e0 <get_from_rx_buffer+0x64>)
 8002998:	5cd3      	ldrb	r3, [r2, r3]
 800299a:	73fb      	strb	r3, [r7, #15]
		rd_pointer_rx_rs485++;
 800299c:	4b0f      	ldr	r3, [pc, #60]	; (80029dc <get_from_rx_buffer+0x60>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	3301      	adds	r3, #1
 80029a2:	4a0e      	ldr	r2, [pc, #56]	; (80029dc <get_from_rx_buffer+0x60>)
 80029a4:	6013      	str	r3, [r2, #0]
 80029a6:	e010      	b.n	80029ca <get_from_rx_buffer+0x4e>
	}
	else if(USARTx == DBG_UART)
 80029a8:	4b0e      	ldr	r3, [pc, #56]	; (80029e4 <get_from_rx_buffer+0x68>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d10b      	bne.n	80029ca <get_from_rx_buffer+0x4e>
	{

		data=rx_buffer_dbg[rd_pointer_rx_dbg & (LEN_RX_BUFFER_DBG-1)];
 80029b2:	4b0d      	ldr	r3, [pc, #52]	; (80029e8 <get_from_rx_buffer+0x6c>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80029ba:	4a0c      	ldr	r2, [pc, #48]	; (80029ec <get_from_rx_buffer+0x70>)
 80029bc:	5cd3      	ldrb	r3, [r2, r3]
 80029be:	73fb      	strb	r3, [r7, #15]
		rd_pointer_rx_dbg++;
 80029c0:	4b09      	ldr	r3, [pc, #36]	; (80029e8 <get_from_rx_buffer+0x6c>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	3301      	adds	r3, #1
 80029c6:	4a08      	ldr	r2, [pc, #32]	; (80029e8 <get_from_rx_buffer+0x6c>)
 80029c8:	6013      	str	r3, [r2, #0]
	}
	return data;
 80029ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3714      	adds	r7, #20
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr
 80029d8:	20000004 	.word	0x20000004
 80029dc:	20000e8c 	.word	0x20000e8c
 80029e0:	20000a8c 	.word	0x20000a8c
 80029e4:	20000008 	.word	0x20000008
 80029e8:	20002e94 	.word	0x20002e94
 80029ec:	20000e94 	.word	0x20000e94

080029f0 <usart_message_ready>:

	return 0;
}
//**************************************************************************************
char usart_message_ready(USART_TypeDef* USARTx, char delimiter)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	460b      	mov	r3, r1
 80029fa:	70fb      	strb	r3, [r7, #3]
	if (USARTx == DBG_UART)
 80029fc:	4b1f      	ldr	r3, [pc, #124]	; (8002a7c <usart_message_ready+0x8c>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d117      	bne.n	8002a36 <usart_message_ready+0x46>
	{
		unsigned long tail = rd_pointer_rx_dbg;
 8002a06:	4b1e      	ldr	r3, [pc, #120]	; (8002a80 <usart_message_ready+0x90>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	60fb      	str	r3, [r7, #12]

		while ((wr_pointer_rx_dbg - tail) != 0)
 8002a0c:	e00d      	b.n	8002a2a <usart_message_ready+0x3a>
		{
			if (rx_buffer_dbg[tail & (LEN_RX_BUFFER_DBG - 1)] == delimiter)
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002a14:	4a1b      	ldr	r2, [pc, #108]	; (8002a84 <usart_message_ready+0x94>)
 8002a16:	5cd3      	ldrb	r3, [r2, r3]
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	78fa      	ldrb	r2, [r7, #3]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d101      	bne.n	8002a24 <usart_message_ready+0x34>
				return 1;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e025      	b.n	8002a70 <usart_message_ready+0x80>
			++tail;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	3301      	adds	r3, #1
 8002a28:	60fb      	str	r3, [r7, #12]
		while ((wr_pointer_rx_dbg - tail) != 0)
 8002a2a:	4b17      	ldr	r3, [pc, #92]	; (8002a88 <usart_message_ready+0x98>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	68fa      	ldr	r2, [r7, #12]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d1ec      	bne.n	8002a0e <usart_message_ready+0x1e>
 8002a34:	e01b      	b.n	8002a6e <usart_message_ready+0x7e>
		}
	}
	else if (USARTx == RS485_UART)
 8002a36:	4b15      	ldr	r3, [pc, #84]	; (8002a8c <usart_message_ready+0x9c>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d116      	bne.n	8002a6e <usart_message_ready+0x7e>
	{
		unsigned long tail = rd_pointer_rx_rs485;
 8002a40:	4b13      	ldr	r3, [pc, #76]	; (8002a90 <usart_message_ready+0xa0>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	60bb      	str	r3, [r7, #8]

		while ((wr_pointer_rx_rs485 - tail) != 0)
 8002a46:	e00d      	b.n	8002a64 <usart_message_ready+0x74>
		{
			if (rx_buffer_rs485[tail & (LEN_RX_BUFFER_RS485 - 1)] == delimiter)
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a4e:	4a11      	ldr	r2, [pc, #68]	; (8002a94 <usart_message_ready+0xa4>)
 8002a50:	5cd3      	ldrb	r3, [r2, r3]
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	78fa      	ldrb	r2, [r7, #3]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d101      	bne.n	8002a5e <usart_message_ready+0x6e>
				return 1;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e008      	b.n	8002a70 <usart_message_ready+0x80>
			++tail;
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	3301      	adds	r3, #1
 8002a62:	60bb      	str	r3, [r7, #8]
		while ((wr_pointer_rx_rs485 - tail) != 0)
 8002a64:	4b0c      	ldr	r3, [pc, #48]	; (8002a98 <usart_message_ready+0xa8>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	68ba      	ldr	r2, [r7, #8]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d1ec      	bne.n	8002a48 <usart_message_ready+0x58>
		}
	}
	return 0;
 8002a6e:	2300      	movs	r3, #0
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3714      	adds	r7, #20
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr
 8002a7c:	20000008 	.word	0x20000008
 8002a80:	20002e94 	.word	0x20002e94
 8002a84:	20000e94 	.word	0x20000e94
 8002a88:	20002e98 	.word	0x20002e98
 8002a8c:	20000004 	.word	0x20000004
 8002a90:	20000e8c 	.word	0x20000e8c
 8002a94:	20000a8c 	.word	0x20000a8c
 8002a98:	20000e90 	.word	0x20000e90

08002a9c <read_usart_message>:
/*
 * Reads message from specified uart rx buffer into @dst until @delimiter character is encountered or @max_len exceeded.
 * Returns: number of characters read if successful, zero when there is no message ready to be read.
 */
unsigned int read_usart_message(char* dst, UART_HandleTypeDef* huart, int max_len, char delimiter)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b086      	sub	sp, #24
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	60b9      	str	r1, [r7, #8]
 8002aa6:	607a      	str	r2, [r7, #4]
 8002aa8:	70fb      	strb	r3, [r7, #3]
	USART_TypeDef* USARTx = huart->Instance;
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	613b      	str	r3, [r7, #16]
	if (usart_message_ready(USARTx,delimiter))
 8002ab0:	78fb      	ldrb	r3, [r7, #3]
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	6938      	ldr	r0, [r7, #16]
 8002ab6:	f7ff ff9b 	bl	80029f0 <usart_message_ready>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d018      	beq.n	8002af2 <read_usart_message+0x56>
	{
		int nr = 0;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	617b      	str	r3, [r7, #20]
		do
		{
			*dst = get_from_rx_buffer(USARTx);
 8002ac4:	6938      	ldr	r0, [r7, #16]
 8002ac6:	f7ff ff59 	bl	800297c <get_from_rx_buffer>
 8002aca:	4603      	mov	r3, r0
 8002acc:	461a      	mov	r2, r3
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	701a      	strb	r2, [r3, #0]
			++nr;
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	617b      	str	r3, [r7, #20]
		} while (*dst++ != delimiter && nr < max_len);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	1c5a      	adds	r2, r3, #1
 8002adc:	60fa      	str	r2, [r7, #12]
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	78fa      	ldrb	r2, [r7, #3]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d003      	beq.n	8002aee <read_usart_message+0x52>
 8002ae6:	697a      	ldr	r2, [r7, #20]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	dbea      	blt.n	8002ac4 <read_usart_message+0x28>

		return nr;
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	e000      	b.n	8002af4 <read_usart_message+0x58>
	}
	return 0;
 8002af2:	2300      	movs	r3, #0
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3718      	adds	r7, #24
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002afc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b34 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b00:	480d      	ldr	r0, [pc, #52]	; (8002b38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002b02:	490e      	ldr	r1, [pc, #56]	; (8002b3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002b04:	4a0e      	ldr	r2, [pc, #56]	; (8002b40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002b06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b08:	e002      	b.n	8002b10 <LoopCopyDataInit>

08002b0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b0e:	3304      	adds	r3, #4

08002b10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b14:	d3f9      	bcc.n	8002b0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b16:	4a0b      	ldr	r2, [pc, #44]	; (8002b44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002b18:	4c0b      	ldr	r4, [pc, #44]	; (8002b48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002b1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b1c:	e001      	b.n	8002b22 <LoopFillZerobss>

08002b1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b20:	3204      	adds	r2, #4

08002b22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b24:	d3fb      	bcc.n	8002b1e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002b26:	f7ff fe79 	bl	800281c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b2a:	f002 fba1 	bl	8005270 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b2e:	f7ff f815 	bl	8001b5c <main>
  bx  lr    
 8002b32:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002b34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002b38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b3c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002b40:	080068ac 	.word	0x080068ac
  ldr r2, =_sbss
 8002b44:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002b48:	20002eb0 	.word	0x20002eb0

08002b4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b4c:	e7fe      	b.n	8002b4c <ADC_IRQHandler>
	...

08002b50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b54:	4b0e      	ldr	r3, [pc, #56]	; (8002b90 <HAL_Init+0x40>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a0d      	ldr	r2, [pc, #52]	; (8002b90 <HAL_Init+0x40>)
 8002b5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b60:	4b0b      	ldr	r3, [pc, #44]	; (8002b90 <HAL_Init+0x40>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a0a      	ldr	r2, [pc, #40]	; (8002b90 <HAL_Init+0x40>)
 8002b66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b6c:	4b08      	ldr	r3, [pc, #32]	; (8002b90 <HAL_Init+0x40>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a07      	ldr	r2, [pc, #28]	; (8002b90 <HAL_Init+0x40>)
 8002b72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b78:	2003      	movs	r0, #3
 8002b7a:	f000 f94f 	bl	8002e1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b7e:	2000      	movs	r0, #0
 8002b80:	f000 f808 	bl	8002b94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b84:	f7ff faee 	bl	8002164 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	40023c00 	.word	0x40023c00

08002b94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b9c:	4b12      	ldr	r3, [pc, #72]	; (8002be8 <HAL_InitTick+0x54>)
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	4b12      	ldr	r3, [pc, #72]	; (8002bec <HAL_InitTick+0x58>)
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002baa:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f000 f967 	bl	8002e86 <HAL_SYSTICK_Config>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e00e      	b.n	8002be0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2b0f      	cmp	r3, #15
 8002bc6:	d80a      	bhi.n	8002bde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bc8:	2200      	movs	r2, #0
 8002bca:	6879      	ldr	r1, [r7, #4]
 8002bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8002bd0:	f000 f92f 	bl	8002e32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002bd4:	4a06      	ldr	r2, [pc, #24]	; (8002bf0 <HAL_InitTick+0x5c>)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	e000      	b.n	8002be0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3708      	adds	r7, #8
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	20000000 	.word	0x20000000
 8002bec:	20000010 	.word	0x20000010
 8002bf0:	2000000c 	.word	0x2000000c

08002bf4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bf8:	4b06      	ldr	r3, [pc, #24]	; (8002c14 <HAL_IncTick+0x20>)
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	4b06      	ldr	r3, [pc, #24]	; (8002c18 <HAL_IncTick+0x24>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4413      	add	r3, r2
 8002c04:	4a04      	ldr	r2, [pc, #16]	; (8002c18 <HAL_IncTick+0x24>)
 8002c06:	6013      	str	r3, [r2, #0]
}
 8002c08:	bf00      	nop
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	20000010 	.word	0x20000010
 8002c18:	20002e9c 	.word	0x20002e9c

08002c1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
  return uwTick;
 8002c20:	4b03      	ldr	r3, [pc, #12]	; (8002c30 <HAL_GetTick+0x14>)
 8002c22:	681b      	ldr	r3, [r3, #0]
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop
 8002c30:	20002e9c 	.word	0x20002e9c

08002c34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c3c:	f7ff ffee 	bl	8002c1c <HAL_GetTick>
 8002c40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c4c:	d005      	beq.n	8002c5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c4e:	4b0a      	ldr	r3, [pc, #40]	; (8002c78 <HAL_Delay+0x44>)
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	461a      	mov	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	4413      	add	r3, r2
 8002c58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c5a:	bf00      	nop
 8002c5c:	f7ff ffde 	bl	8002c1c <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	68fa      	ldr	r2, [r7, #12]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d8f7      	bhi.n	8002c5c <HAL_Delay+0x28>
  {
  }
}
 8002c6c:	bf00      	nop
 8002c6e:	bf00      	nop
 8002c70:	3710      	adds	r7, #16
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	20000010 	.word	0x20000010

08002c7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b085      	sub	sp, #20
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f003 0307 	and.w	r3, r3, #7
 8002c8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c8c:	4b0c      	ldr	r3, [pc, #48]	; (8002cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c92:	68ba      	ldr	r2, [r7, #8]
 8002c94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c98:	4013      	ands	r3, r2
 8002c9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ca4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ca8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cae:	4a04      	ldr	r2, [pc, #16]	; (8002cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	60d3      	str	r3, [r2, #12]
}
 8002cb4:	bf00      	nop
 8002cb6:	3714      	adds	r7, #20
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr
 8002cc0:	e000ed00 	.word	0xe000ed00

08002cc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cc8:	4b04      	ldr	r3, [pc, #16]	; (8002cdc <__NVIC_GetPriorityGrouping+0x18>)
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	0a1b      	lsrs	r3, r3, #8
 8002cce:	f003 0307 	and.w	r3, r3, #7
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr
 8002cdc:	e000ed00 	.word	0xe000ed00

08002ce0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	db0b      	blt.n	8002d0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cf2:	79fb      	ldrb	r3, [r7, #7]
 8002cf4:	f003 021f 	and.w	r2, r3, #31
 8002cf8:	4907      	ldr	r1, [pc, #28]	; (8002d18 <__NVIC_EnableIRQ+0x38>)
 8002cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cfe:	095b      	lsrs	r3, r3, #5
 8002d00:	2001      	movs	r0, #1
 8002d02:	fa00 f202 	lsl.w	r2, r0, r2
 8002d06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d0a:	bf00      	nop
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	e000e100 	.word	0xe000e100

08002d1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	4603      	mov	r3, r0
 8002d24:	6039      	str	r1, [r7, #0]
 8002d26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	db0a      	blt.n	8002d46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	b2da      	uxtb	r2, r3
 8002d34:	490c      	ldr	r1, [pc, #48]	; (8002d68 <__NVIC_SetPriority+0x4c>)
 8002d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d3a:	0112      	lsls	r2, r2, #4
 8002d3c:	b2d2      	uxtb	r2, r2
 8002d3e:	440b      	add	r3, r1
 8002d40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d44:	e00a      	b.n	8002d5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	b2da      	uxtb	r2, r3
 8002d4a:	4908      	ldr	r1, [pc, #32]	; (8002d6c <__NVIC_SetPriority+0x50>)
 8002d4c:	79fb      	ldrb	r3, [r7, #7]
 8002d4e:	f003 030f 	and.w	r3, r3, #15
 8002d52:	3b04      	subs	r3, #4
 8002d54:	0112      	lsls	r2, r2, #4
 8002d56:	b2d2      	uxtb	r2, r2
 8002d58:	440b      	add	r3, r1
 8002d5a:	761a      	strb	r2, [r3, #24]
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr
 8002d68:	e000e100 	.word	0xe000e100
 8002d6c:	e000ed00 	.word	0xe000ed00

08002d70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b089      	sub	sp, #36	; 0x24
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f003 0307 	and.w	r3, r3, #7
 8002d82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	f1c3 0307 	rsb	r3, r3, #7
 8002d8a:	2b04      	cmp	r3, #4
 8002d8c:	bf28      	it	cs
 8002d8e:	2304      	movcs	r3, #4
 8002d90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	3304      	adds	r3, #4
 8002d96:	2b06      	cmp	r3, #6
 8002d98:	d902      	bls.n	8002da0 <NVIC_EncodePriority+0x30>
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	3b03      	subs	r3, #3
 8002d9e:	e000      	b.n	8002da2 <NVIC_EncodePriority+0x32>
 8002da0:	2300      	movs	r3, #0
 8002da2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002da4:	f04f 32ff 	mov.w	r2, #4294967295
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dae:	43da      	mvns	r2, r3
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	401a      	ands	r2, r3
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002db8:	f04f 31ff 	mov.w	r1, #4294967295
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc2:	43d9      	mvns	r1, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dc8:	4313      	orrs	r3, r2
         );
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3724      	adds	r7, #36	; 0x24
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
	...

08002dd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	3b01      	subs	r3, #1
 8002de4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002de8:	d301      	bcc.n	8002dee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dea:	2301      	movs	r3, #1
 8002dec:	e00f      	b.n	8002e0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dee:	4a0a      	ldr	r2, [pc, #40]	; (8002e18 <SysTick_Config+0x40>)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	3b01      	subs	r3, #1
 8002df4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002df6:	210f      	movs	r1, #15
 8002df8:	f04f 30ff 	mov.w	r0, #4294967295
 8002dfc:	f7ff ff8e 	bl	8002d1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e00:	4b05      	ldr	r3, [pc, #20]	; (8002e18 <SysTick_Config+0x40>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e06:	4b04      	ldr	r3, [pc, #16]	; (8002e18 <SysTick_Config+0x40>)
 8002e08:	2207      	movs	r2, #7
 8002e0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3708      	adds	r7, #8
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	e000e010 	.word	0xe000e010

08002e1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f7ff ff29 	bl	8002c7c <__NVIC_SetPriorityGrouping>
}
 8002e2a:	bf00      	nop
 8002e2c:	3708      	adds	r7, #8
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}

08002e32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e32:	b580      	push	{r7, lr}
 8002e34:	b086      	sub	sp, #24
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	4603      	mov	r3, r0
 8002e3a:	60b9      	str	r1, [r7, #8]
 8002e3c:	607a      	str	r2, [r7, #4]
 8002e3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e40:	2300      	movs	r3, #0
 8002e42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e44:	f7ff ff3e 	bl	8002cc4 <__NVIC_GetPriorityGrouping>
 8002e48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	68b9      	ldr	r1, [r7, #8]
 8002e4e:	6978      	ldr	r0, [r7, #20]
 8002e50:	f7ff ff8e 	bl	8002d70 <NVIC_EncodePriority>
 8002e54:	4602      	mov	r2, r0
 8002e56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e5a:	4611      	mov	r1, r2
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7ff ff5d 	bl	8002d1c <__NVIC_SetPriority>
}
 8002e62:	bf00      	nop
 8002e64:	3718      	adds	r7, #24
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	b082      	sub	sp, #8
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	4603      	mov	r3, r0
 8002e72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7ff ff31 	bl	8002ce0 <__NVIC_EnableIRQ>
}
 8002e7e:	bf00      	nop
 8002e80:	3708      	adds	r7, #8
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}

08002e86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e86:	b580      	push	{r7, lr}
 8002e88:	b082      	sub	sp, #8
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f7ff ffa2 	bl	8002dd8 <SysTick_Config>
 8002e94:	4603      	mov	r3, r0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3708      	adds	r7, #8
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e9e:	b580      	push	{r7, lr}
 8002ea0:	b084      	sub	sp, #16
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eaa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002eac:	f7ff feb6 	bl	8002c1c <HAL_GetTick>
 8002eb0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d008      	beq.n	8002ed0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2280      	movs	r2, #128	; 0x80
 8002ec2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e052      	b.n	8002f76 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f022 0216 	bic.w	r2, r2, #22
 8002ede:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	695a      	ldr	r2, [r3, #20]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002eee:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d103      	bne.n	8002f00 <HAL_DMA_Abort+0x62>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d007      	beq.n	8002f10 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f022 0208 	bic.w	r2, r2, #8
 8002f0e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f022 0201 	bic.w	r2, r2, #1
 8002f1e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f20:	e013      	b.n	8002f4a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f22:	f7ff fe7b 	bl	8002c1c <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	2b05      	cmp	r3, #5
 8002f2e:	d90c      	bls.n	8002f4a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2220      	movs	r2, #32
 8002f34:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2203      	movs	r2, #3
 8002f3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e015      	b.n	8002f76 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0301 	and.w	r3, r3, #1
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d1e4      	bne.n	8002f22 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f5c:	223f      	movs	r2, #63	; 0x3f
 8002f5e:	409a      	lsls	r2, r3
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3710      	adds	r7, #16
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}

08002f7e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f7e:	b480      	push	{r7}
 8002f80:	b083      	sub	sp, #12
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d004      	beq.n	8002f9c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2280      	movs	r2, #128	; 0x80
 8002f96:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e00c      	b.n	8002fb6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2205      	movs	r2, #5
 8002fa0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f022 0201 	bic.w	r2, r2, #1
 8002fb2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	370c      	adds	r7, #12
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
	...

08002fc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b089      	sub	sp, #36	; 0x24
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fda:	2300      	movs	r3, #0
 8002fdc:	61fb      	str	r3, [r7, #28]
 8002fde:	e16b      	b.n	80032b8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	697a      	ldr	r2, [r7, #20]
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ff4:	693a      	ldr	r2, [r7, #16]
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	f040 815a 	bne.w	80032b2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f003 0303 	and.w	r3, r3, #3
 8003006:	2b01      	cmp	r3, #1
 8003008:	d005      	beq.n	8003016 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003012:	2b02      	cmp	r3, #2
 8003014:	d130      	bne.n	8003078 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	005b      	lsls	r3, r3, #1
 8003020:	2203      	movs	r2, #3
 8003022:	fa02 f303 	lsl.w	r3, r2, r3
 8003026:	43db      	mvns	r3, r3
 8003028:	69ba      	ldr	r2, [r7, #24]
 800302a:	4013      	ands	r3, r2
 800302c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	68da      	ldr	r2, [r3, #12]
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	005b      	lsls	r3, r3, #1
 8003036:	fa02 f303 	lsl.w	r3, r2, r3
 800303a:	69ba      	ldr	r2, [r7, #24]
 800303c:	4313      	orrs	r3, r2
 800303e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	69ba      	ldr	r2, [r7, #24]
 8003044:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800304c:	2201      	movs	r2, #1
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	fa02 f303 	lsl.w	r3, r2, r3
 8003054:	43db      	mvns	r3, r3
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	4013      	ands	r3, r2
 800305a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	091b      	lsrs	r3, r3, #4
 8003062:	f003 0201 	and.w	r2, r3, #1
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	fa02 f303 	lsl.w	r3, r2, r3
 800306c:	69ba      	ldr	r2, [r7, #24]
 800306e:	4313      	orrs	r3, r2
 8003070:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f003 0303 	and.w	r3, r3, #3
 8003080:	2b03      	cmp	r3, #3
 8003082:	d017      	beq.n	80030b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	2203      	movs	r2, #3
 8003090:	fa02 f303 	lsl.w	r3, r2, r3
 8003094:	43db      	mvns	r3, r3
 8003096:	69ba      	ldr	r2, [r7, #24]
 8003098:	4013      	ands	r3, r2
 800309a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	689a      	ldr	r2, [r3, #8]
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	005b      	lsls	r3, r3, #1
 80030a4:	fa02 f303 	lsl.w	r3, r2, r3
 80030a8:	69ba      	ldr	r2, [r7, #24]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f003 0303 	and.w	r3, r3, #3
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d123      	bne.n	8003108 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	08da      	lsrs	r2, r3, #3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	3208      	adds	r2, #8
 80030c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	f003 0307 	and.w	r3, r3, #7
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	220f      	movs	r2, #15
 80030d8:	fa02 f303 	lsl.w	r3, r2, r3
 80030dc:	43db      	mvns	r3, r3
 80030de:	69ba      	ldr	r2, [r7, #24]
 80030e0:	4013      	ands	r3, r2
 80030e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	691a      	ldr	r2, [r3, #16]
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	f003 0307 	and.w	r3, r3, #7
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	fa02 f303 	lsl.w	r3, r2, r3
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	08da      	lsrs	r2, r3, #3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	3208      	adds	r2, #8
 8003102:	69b9      	ldr	r1, [r7, #24]
 8003104:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	2203      	movs	r2, #3
 8003114:	fa02 f303 	lsl.w	r3, r2, r3
 8003118:	43db      	mvns	r3, r3
 800311a:	69ba      	ldr	r2, [r7, #24]
 800311c:	4013      	ands	r3, r2
 800311e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f003 0203 	and.w	r2, r3, #3
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	005b      	lsls	r3, r3, #1
 800312c:	fa02 f303 	lsl.w	r3, r2, r3
 8003130:	69ba      	ldr	r2, [r7, #24]
 8003132:	4313      	orrs	r3, r2
 8003134:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	69ba      	ldr	r2, [r7, #24]
 800313a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003144:	2b00      	cmp	r3, #0
 8003146:	f000 80b4 	beq.w	80032b2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800314a:	2300      	movs	r3, #0
 800314c:	60fb      	str	r3, [r7, #12]
 800314e:	4b60      	ldr	r3, [pc, #384]	; (80032d0 <HAL_GPIO_Init+0x30c>)
 8003150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003152:	4a5f      	ldr	r2, [pc, #380]	; (80032d0 <HAL_GPIO_Init+0x30c>)
 8003154:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003158:	6453      	str	r3, [r2, #68]	; 0x44
 800315a:	4b5d      	ldr	r3, [pc, #372]	; (80032d0 <HAL_GPIO_Init+0x30c>)
 800315c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800315e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003162:	60fb      	str	r3, [r7, #12]
 8003164:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003166:	4a5b      	ldr	r2, [pc, #364]	; (80032d4 <HAL_GPIO_Init+0x310>)
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	089b      	lsrs	r3, r3, #2
 800316c:	3302      	adds	r3, #2
 800316e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003172:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	f003 0303 	and.w	r3, r3, #3
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	220f      	movs	r2, #15
 800317e:	fa02 f303 	lsl.w	r3, r2, r3
 8003182:	43db      	mvns	r3, r3
 8003184:	69ba      	ldr	r2, [r7, #24]
 8003186:	4013      	ands	r3, r2
 8003188:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a52      	ldr	r2, [pc, #328]	; (80032d8 <HAL_GPIO_Init+0x314>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d02b      	beq.n	80031ea <HAL_GPIO_Init+0x226>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a51      	ldr	r2, [pc, #324]	; (80032dc <HAL_GPIO_Init+0x318>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d025      	beq.n	80031e6 <HAL_GPIO_Init+0x222>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a50      	ldr	r2, [pc, #320]	; (80032e0 <HAL_GPIO_Init+0x31c>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d01f      	beq.n	80031e2 <HAL_GPIO_Init+0x21e>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a4f      	ldr	r2, [pc, #316]	; (80032e4 <HAL_GPIO_Init+0x320>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d019      	beq.n	80031de <HAL_GPIO_Init+0x21a>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a4e      	ldr	r2, [pc, #312]	; (80032e8 <HAL_GPIO_Init+0x324>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d013      	beq.n	80031da <HAL_GPIO_Init+0x216>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a4d      	ldr	r2, [pc, #308]	; (80032ec <HAL_GPIO_Init+0x328>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d00d      	beq.n	80031d6 <HAL_GPIO_Init+0x212>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a4c      	ldr	r2, [pc, #304]	; (80032f0 <HAL_GPIO_Init+0x32c>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d007      	beq.n	80031d2 <HAL_GPIO_Init+0x20e>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a4b      	ldr	r2, [pc, #300]	; (80032f4 <HAL_GPIO_Init+0x330>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d101      	bne.n	80031ce <HAL_GPIO_Init+0x20a>
 80031ca:	2307      	movs	r3, #7
 80031cc:	e00e      	b.n	80031ec <HAL_GPIO_Init+0x228>
 80031ce:	2308      	movs	r3, #8
 80031d0:	e00c      	b.n	80031ec <HAL_GPIO_Init+0x228>
 80031d2:	2306      	movs	r3, #6
 80031d4:	e00a      	b.n	80031ec <HAL_GPIO_Init+0x228>
 80031d6:	2305      	movs	r3, #5
 80031d8:	e008      	b.n	80031ec <HAL_GPIO_Init+0x228>
 80031da:	2304      	movs	r3, #4
 80031dc:	e006      	b.n	80031ec <HAL_GPIO_Init+0x228>
 80031de:	2303      	movs	r3, #3
 80031e0:	e004      	b.n	80031ec <HAL_GPIO_Init+0x228>
 80031e2:	2302      	movs	r3, #2
 80031e4:	e002      	b.n	80031ec <HAL_GPIO_Init+0x228>
 80031e6:	2301      	movs	r3, #1
 80031e8:	e000      	b.n	80031ec <HAL_GPIO_Init+0x228>
 80031ea:	2300      	movs	r3, #0
 80031ec:	69fa      	ldr	r2, [r7, #28]
 80031ee:	f002 0203 	and.w	r2, r2, #3
 80031f2:	0092      	lsls	r2, r2, #2
 80031f4:	4093      	lsls	r3, r2
 80031f6:	69ba      	ldr	r2, [r7, #24]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031fc:	4935      	ldr	r1, [pc, #212]	; (80032d4 <HAL_GPIO_Init+0x310>)
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	089b      	lsrs	r3, r3, #2
 8003202:	3302      	adds	r3, #2
 8003204:	69ba      	ldr	r2, [r7, #24]
 8003206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800320a:	4b3b      	ldr	r3, [pc, #236]	; (80032f8 <HAL_GPIO_Init+0x334>)
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	43db      	mvns	r3, r3
 8003214:	69ba      	ldr	r2, [r7, #24]
 8003216:	4013      	ands	r3, r2
 8003218:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d003      	beq.n	800322e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003226:	69ba      	ldr	r2, [r7, #24]
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	4313      	orrs	r3, r2
 800322c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800322e:	4a32      	ldr	r2, [pc, #200]	; (80032f8 <HAL_GPIO_Init+0x334>)
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003234:	4b30      	ldr	r3, [pc, #192]	; (80032f8 <HAL_GPIO_Init+0x334>)
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	43db      	mvns	r3, r3
 800323e:	69ba      	ldr	r2, [r7, #24]
 8003240:	4013      	ands	r3, r2
 8003242:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d003      	beq.n	8003258 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003250:	69ba      	ldr	r2, [r7, #24]
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	4313      	orrs	r3, r2
 8003256:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003258:	4a27      	ldr	r2, [pc, #156]	; (80032f8 <HAL_GPIO_Init+0x334>)
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800325e:	4b26      	ldr	r3, [pc, #152]	; (80032f8 <HAL_GPIO_Init+0x334>)
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	43db      	mvns	r3, r3
 8003268:	69ba      	ldr	r2, [r7, #24]
 800326a:	4013      	ands	r3, r2
 800326c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d003      	beq.n	8003282 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800327a:	69ba      	ldr	r2, [r7, #24]
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	4313      	orrs	r3, r2
 8003280:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003282:	4a1d      	ldr	r2, [pc, #116]	; (80032f8 <HAL_GPIO_Init+0x334>)
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003288:	4b1b      	ldr	r3, [pc, #108]	; (80032f8 <HAL_GPIO_Init+0x334>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	43db      	mvns	r3, r3
 8003292:	69ba      	ldr	r2, [r7, #24]
 8003294:	4013      	ands	r3, r2
 8003296:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d003      	beq.n	80032ac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80032a4:	69ba      	ldr	r2, [r7, #24]
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032ac:	4a12      	ldr	r2, [pc, #72]	; (80032f8 <HAL_GPIO_Init+0x334>)
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	3301      	adds	r3, #1
 80032b6:	61fb      	str	r3, [r7, #28]
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	2b0f      	cmp	r3, #15
 80032bc:	f67f ae90 	bls.w	8002fe0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032c0:	bf00      	nop
 80032c2:	bf00      	nop
 80032c4:	3724      	adds	r7, #36	; 0x24
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	40023800 	.word	0x40023800
 80032d4:	40013800 	.word	0x40013800
 80032d8:	40020000 	.word	0x40020000
 80032dc:	40020400 	.word	0x40020400
 80032e0:	40020800 	.word	0x40020800
 80032e4:	40020c00 	.word	0x40020c00
 80032e8:	40021000 	.word	0x40021000
 80032ec:	40021400 	.word	0x40021400
 80032f0:	40021800 	.word	0x40021800
 80032f4:	40021c00 	.word	0x40021c00
 80032f8:	40013c00 	.word	0x40013c00

080032fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	460b      	mov	r3, r1
 8003306:	807b      	strh	r3, [r7, #2]
 8003308:	4613      	mov	r3, r2
 800330a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800330c:	787b      	ldrb	r3, [r7, #1]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d003      	beq.n	800331a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003312:	887a      	ldrh	r2, [r7, #2]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003318:	e003      	b.n	8003322 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800331a:	887b      	ldrh	r3, [r7, #2]
 800331c:	041a      	lsls	r2, r3, #16
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	619a      	str	r2, [r3, #24]
}
 8003322:	bf00      	nop
 8003324:	370c      	adds	r7, #12
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
	...

08003330 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d101      	bne.n	8003342 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e12b      	b.n	800359a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003348:	b2db      	uxtb	r3, r3
 800334a:	2b00      	cmp	r3, #0
 800334c:	d106      	bne.n	800335c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f7fe ff2c 	bl	80021b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2224      	movs	r2, #36	; 0x24
 8003360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f022 0201 	bic.w	r2, r2, #1
 8003372:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003382:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003392:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003394:	f000 fd7e 	bl	8003e94 <HAL_RCC_GetPCLK1Freq>
 8003398:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	4a81      	ldr	r2, [pc, #516]	; (80035a4 <HAL_I2C_Init+0x274>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d807      	bhi.n	80033b4 <HAL_I2C_Init+0x84>
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	4a80      	ldr	r2, [pc, #512]	; (80035a8 <HAL_I2C_Init+0x278>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	bf94      	ite	ls
 80033ac:	2301      	movls	r3, #1
 80033ae:	2300      	movhi	r3, #0
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	e006      	b.n	80033c2 <HAL_I2C_Init+0x92>
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	4a7d      	ldr	r2, [pc, #500]	; (80035ac <HAL_I2C_Init+0x27c>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	bf94      	ite	ls
 80033bc:	2301      	movls	r3, #1
 80033be:	2300      	movhi	r3, #0
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d001      	beq.n	80033ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e0e7      	b.n	800359a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	4a78      	ldr	r2, [pc, #480]	; (80035b0 <HAL_I2C_Init+0x280>)
 80033ce:	fba2 2303 	umull	r2, r3, r2, r3
 80033d2:	0c9b      	lsrs	r3, r3, #18
 80033d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	68ba      	ldr	r2, [r7, #8]
 80033e6:	430a      	orrs	r2, r1
 80033e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	6a1b      	ldr	r3, [r3, #32]
 80033f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	4a6a      	ldr	r2, [pc, #424]	; (80035a4 <HAL_I2C_Init+0x274>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d802      	bhi.n	8003404 <HAL_I2C_Init+0xd4>
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	3301      	adds	r3, #1
 8003402:	e009      	b.n	8003418 <HAL_I2C_Init+0xe8>
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800340a:	fb02 f303 	mul.w	r3, r2, r3
 800340e:	4a69      	ldr	r2, [pc, #420]	; (80035b4 <HAL_I2C_Init+0x284>)
 8003410:	fba2 2303 	umull	r2, r3, r2, r3
 8003414:	099b      	lsrs	r3, r3, #6
 8003416:	3301      	adds	r3, #1
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	6812      	ldr	r2, [r2, #0]
 800341c:	430b      	orrs	r3, r1
 800341e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	69db      	ldr	r3, [r3, #28]
 8003426:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800342a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	495c      	ldr	r1, [pc, #368]	; (80035a4 <HAL_I2C_Init+0x274>)
 8003434:	428b      	cmp	r3, r1
 8003436:	d819      	bhi.n	800346c <HAL_I2C_Init+0x13c>
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	1e59      	subs	r1, r3, #1
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	005b      	lsls	r3, r3, #1
 8003442:	fbb1 f3f3 	udiv	r3, r1, r3
 8003446:	1c59      	adds	r1, r3, #1
 8003448:	f640 73fc 	movw	r3, #4092	; 0xffc
 800344c:	400b      	ands	r3, r1
 800344e:	2b00      	cmp	r3, #0
 8003450:	d00a      	beq.n	8003468 <HAL_I2C_Init+0x138>
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	1e59      	subs	r1, r3, #1
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	005b      	lsls	r3, r3, #1
 800345c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003460:	3301      	adds	r3, #1
 8003462:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003466:	e051      	b.n	800350c <HAL_I2C_Init+0x1dc>
 8003468:	2304      	movs	r3, #4
 800346a:	e04f      	b.n	800350c <HAL_I2C_Init+0x1dc>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d111      	bne.n	8003498 <HAL_I2C_Init+0x168>
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	1e58      	subs	r0, r3, #1
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6859      	ldr	r1, [r3, #4]
 800347c:	460b      	mov	r3, r1
 800347e:	005b      	lsls	r3, r3, #1
 8003480:	440b      	add	r3, r1
 8003482:	fbb0 f3f3 	udiv	r3, r0, r3
 8003486:	3301      	adds	r3, #1
 8003488:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800348c:	2b00      	cmp	r3, #0
 800348e:	bf0c      	ite	eq
 8003490:	2301      	moveq	r3, #1
 8003492:	2300      	movne	r3, #0
 8003494:	b2db      	uxtb	r3, r3
 8003496:	e012      	b.n	80034be <HAL_I2C_Init+0x18e>
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	1e58      	subs	r0, r3, #1
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6859      	ldr	r1, [r3, #4]
 80034a0:	460b      	mov	r3, r1
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	440b      	add	r3, r1
 80034a6:	0099      	lsls	r1, r3, #2
 80034a8:	440b      	add	r3, r1
 80034aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80034ae:	3301      	adds	r3, #1
 80034b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	bf0c      	ite	eq
 80034b8:	2301      	moveq	r3, #1
 80034ba:	2300      	movne	r3, #0
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d001      	beq.n	80034c6 <HAL_I2C_Init+0x196>
 80034c2:	2301      	movs	r3, #1
 80034c4:	e022      	b.n	800350c <HAL_I2C_Init+0x1dc>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d10e      	bne.n	80034ec <HAL_I2C_Init+0x1bc>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	1e58      	subs	r0, r3, #1
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6859      	ldr	r1, [r3, #4]
 80034d6:	460b      	mov	r3, r1
 80034d8:	005b      	lsls	r3, r3, #1
 80034da:	440b      	add	r3, r1
 80034dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80034e0:	3301      	adds	r3, #1
 80034e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034ea:	e00f      	b.n	800350c <HAL_I2C_Init+0x1dc>
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	1e58      	subs	r0, r3, #1
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6859      	ldr	r1, [r3, #4]
 80034f4:	460b      	mov	r3, r1
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	440b      	add	r3, r1
 80034fa:	0099      	lsls	r1, r3, #2
 80034fc:	440b      	add	r3, r1
 80034fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003502:	3301      	adds	r3, #1
 8003504:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003508:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800350c:	6879      	ldr	r1, [r7, #4]
 800350e:	6809      	ldr	r1, [r1, #0]
 8003510:	4313      	orrs	r3, r2
 8003512:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	69da      	ldr	r2, [r3, #28]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a1b      	ldr	r3, [r3, #32]
 8003526:	431a      	orrs	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	430a      	orrs	r2, r1
 800352e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800353a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	6911      	ldr	r1, [r2, #16]
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	68d2      	ldr	r2, [r2, #12]
 8003546:	4311      	orrs	r1, r2
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	6812      	ldr	r2, [r2, #0]
 800354c:	430b      	orrs	r3, r1
 800354e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	695a      	ldr	r2, [r3, #20]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	431a      	orrs	r2, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	430a      	orrs	r2, r1
 800356a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f042 0201 	orr.w	r2, r2, #1
 800357a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2220      	movs	r2, #32
 8003586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3710      	adds	r7, #16
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	000186a0 	.word	0x000186a0
 80035a8:	001e847f 	.word	0x001e847f
 80035ac:	003d08ff 	.word	0x003d08ff
 80035b0:	431bde83 	.word	0x431bde83
 80035b4:	10624dd3 	.word	0x10624dd3

080035b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b086      	sub	sp, #24
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d101      	bne.n	80035ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e267      	b.n	8003a9a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0301 	and.w	r3, r3, #1
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d075      	beq.n	80036c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035d6:	4b88      	ldr	r3, [pc, #544]	; (80037f8 <HAL_RCC_OscConfig+0x240>)
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f003 030c 	and.w	r3, r3, #12
 80035de:	2b04      	cmp	r3, #4
 80035e0:	d00c      	beq.n	80035fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035e2:	4b85      	ldr	r3, [pc, #532]	; (80037f8 <HAL_RCC_OscConfig+0x240>)
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035ea:	2b08      	cmp	r3, #8
 80035ec:	d112      	bne.n	8003614 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035ee:	4b82      	ldr	r3, [pc, #520]	; (80037f8 <HAL_RCC_OscConfig+0x240>)
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035fa:	d10b      	bne.n	8003614 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035fc:	4b7e      	ldr	r3, [pc, #504]	; (80037f8 <HAL_RCC_OscConfig+0x240>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003604:	2b00      	cmp	r3, #0
 8003606:	d05b      	beq.n	80036c0 <HAL_RCC_OscConfig+0x108>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d157      	bne.n	80036c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e242      	b.n	8003a9a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800361c:	d106      	bne.n	800362c <HAL_RCC_OscConfig+0x74>
 800361e:	4b76      	ldr	r3, [pc, #472]	; (80037f8 <HAL_RCC_OscConfig+0x240>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a75      	ldr	r2, [pc, #468]	; (80037f8 <HAL_RCC_OscConfig+0x240>)
 8003624:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003628:	6013      	str	r3, [r2, #0]
 800362a:	e01d      	b.n	8003668 <HAL_RCC_OscConfig+0xb0>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003634:	d10c      	bne.n	8003650 <HAL_RCC_OscConfig+0x98>
 8003636:	4b70      	ldr	r3, [pc, #448]	; (80037f8 <HAL_RCC_OscConfig+0x240>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a6f      	ldr	r2, [pc, #444]	; (80037f8 <HAL_RCC_OscConfig+0x240>)
 800363c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003640:	6013      	str	r3, [r2, #0]
 8003642:	4b6d      	ldr	r3, [pc, #436]	; (80037f8 <HAL_RCC_OscConfig+0x240>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a6c      	ldr	r2, [pc, #432]	; (80037f8 <HAL_RCC_OscConfig+0x240>)
 8003648:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800364c:	6013      	str	r3, [r2, #0]
 800364e:	e00b      	b.n	8003668 <HAL_RCC_OscConfig+0xb0>
 8003650:	4b69      	ldr	r3, [pc, #420]	; (80037f8 <HAL_RCC_OscConfig+0x240>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a68      	ldr	r2, [pc, #416]	; (80037f8 <HAL_RCC_OscConfig+0x240>)
 8003656:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800365a:	6013      	str	r3, [r2, #0]
 800365c:	4b66      	ldr	r3, [pc, #408]	; (80037f8 <HAL_RCC_OscConfig+0x240>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a65      	ldr	r2, [pc, #404]	; (80037f8 <HAL_RCC_OscConfig+0x240>)
 8003662:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003666:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d013      	beq.n	8003698 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003670:	f7ff fad4 	bl	8002c1c <HAL_GetTick>
 8003674:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003676:	e008      	b.n	800368a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003678:	f7ff fad0 	bl	8002c1c <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	2b64      	cmp	r3, #100	; 0x64
 8003684:	d901      	bls.n	800368a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e207      	b.n	8003a9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800368a:	4b5b      	ldr	r3, [pc, #364]	; (80037f8 <HAL_RCC_OscConfig+0x240>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d0f0      	beq.n	8003678 <HAL_RCC_OscConfig+0xc0>
 8003696:	e014      	b.n	80036c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003698:	f7ff fac0 	bl	8002c1c <HAL_GetTick>
 800369c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800369e:	e008      	b.n	80036b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036a0:	f7ff fabc 	bl	8002c1c <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	2b64      	cmp	r3, #100	; 0x64
 80036ac:	d901      	bls.n	80036b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e1f3      	b.n	8003a9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036b2:	4b51      	ldr	r3, [pc, #324]	; (80037f8 <HAL_RCC_OscConfig+0x240>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d1f0      	bne.n	80036a0 <HAL_RCC_OscConfig+0xe8>
 80036be:	e000      	b.n	80036c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0302 	and.w	r3, r3, #2
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d063      	beq.n	8003796 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036ce:	4b4a      	ldr	r3, [pc, #296]	; (80037f8 <HAL_RCC_OscConfig+0x240>)
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f003 030c 	and.w	r3, r3, #12
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d00b      	beq.n	80036f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036da:	4b47      	ldr	r3, [pc, #284]	; (80037f8 <HAL_RCC_OscConfig+0x240>)
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036e2:	2b08      	cmp	r3, #8
 80036e4:	d11c      	bne.n	8003720 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036e6:	4b44      	ldr	r3, [pc, #272]	; (80037f8 <HAL_RCC_OscConfig+0x240>)
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d116      	bne.n	8003720 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036f2:	4b41      	ldr	r3, [pc, #260]	; (80037f8 <HAL_RCC_OscConfig+0x240>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0302 	and.w	r3, r3, #2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d005      	beq.n	800370a <HAL_RCC_OscConfig+0x152>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	2b01      	cmp	r3, #1
 8003704:	d001      	beq.n	800370a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e1c7      	b.n	8003a9a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800370a:	4b3b      	ldr	r3, [pc, #236]	; (80037f8 <HAL_RCC_OscConfig+0x240>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	00db      	lsls	r3, r3, #3
 8003718:	4937      	ldr	r1, [pc, #220]	; (80037f8 <HAL_RCC_OscConfig+0x240>)
 800371a:	4313      	orrs	r3, r2
 800371c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800371e:	e03a      	b.n	8003796 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d020      	beq.n	800376a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003728:	4b34      	ldr	r3, [pc, #208]	; (80037fc <HAL_RCC_OscConfig+0x244>)
 800372a:	2201      	movs	r2, #1
 800372c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800372e:	f7ff fa75 	bl	8002c1c <HAL_GetTick>
 8003732:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003734:	e008      	b.n	8003748 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003736:	f7ff fa71 	bl	8002c1c <HAL_GetTick>
 800373a:	4602      	mov	r2, r0
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	2b02      	cmp	r3, #2
 8003742:	d901      	bls.n	8003748 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e1a8      	b.n	8003a9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003748:	4b2b      	ldr	r3, [pc, #172]	; (80037f8 <HAL_RCC_OscConfig+0x240>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0302 	and.w	r3, r3, #2
 8003750:	2b00      	cmp	r3, #0
 8003752:	d0f0      	beq.n	8003736 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003754:	4b28      	ldr	r3, [pc, #160]	; (80037f8 <HAL_RCC_OscConfig+0x240>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	691b      	ldr	r3, [r3, #16]
 8003760:	00db      	lsls	r3, r3, #3
 8003762:	4925      	ldr	r1, [pc, #148]	; (80037f8 <HAL_RCC_OscConfig+0x240>)
 8003764:	4313      	orrs	r3, r2
 8003766:	600b      	str	r3, [r1, #0]
 8003768:	e015      	b.n	8003796 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800376a:	4b24      	ldr	r3, [pc, #144]	; (80037fc <HAL_RCC_OscConfig+0x244>)
 800376c:	2200      	movs	r2, #0
 800376e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003770:	f7ff fa54 	bl	8002c1c <HAL_GetTick>
 8003774:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003776:	e008      	b.n	800378a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003778:	f7ff fa50 	bl	8002c1c <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	2b02      	cmp	r3, #2
 8003784:	d901      	bls.n	800378a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e187      	b.n	8003a9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800378a:	4b1b      	ldr	r3, [pc, #108]	; (80037f8 <HAL_RCC_OscConfig+0x240>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0302 	and.w	r3, r3, #2
 8003792:	2b00      	cmp	r3, #0
 8003794:	d1f0      	bne.n	8003778 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0308 	and.w	r3, r3, #8
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d036      	beq.n	8003810 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	695b      	ldr	r3, [r3, #20]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d016      	beq.n	80037d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037aa:	4b15      	ldr	r3, [pc, #84]	; (8003800 <HAL_RCC_OscConfig+0x248>)
 80037ac:	2201      	movs	r2, #1
 80037ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037b0:	f7ff fa34 	bl	8002c1c <HAL_GetTick>
 80037b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037b6:	e008      	b.n	80037ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037b8:	f7ff fa30 	bl	8002c1c <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d901      	bls.n	80037ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e167      	b.n	8003a9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037ca:	4b0b      	ldr	r3, [pc, #44]	; (80037f8 <HAL_RCC_OscConfig+0x240>)
 80037cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037ce:	f003 0302 	and.w	r3, r3, #2
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d0f0      	beq.n	80037b8 <HAL_RCC_OscConfig+0x200>
 80037d6:	e01b      	b.n	8003810 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037d8:	4b09      	ldr	r3, [pc, #36]	; (8003800 <HAL_RCC_OscConfig+0x248>)
 80037da:	2200      	movs	r2, #0
 80037dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037de:	f7ff fa1d 	bl	8002c1c <HAL_GetTick>
 80037e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037e4:	e00e      	b.n	8003804 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037e6:	f7ff fa19 	bl	8002c1c <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d907      	bls.n	8003804 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e150      	b.n	8003a9a <HAL_RCC_OscConfig+0x4e2>
 80037f8:	40023800 	.word	0x40023800
 80037fc:	42470000 	.word	0x42470000
 8003800:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003804:	4b88      	ldr	r3, [pc, #544]	; (8003a28 <HAL_RCC_OscConfig+0x470>)
 8003806:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003808:	f003 0302 	and.w	r3, r3, #2
 800380c:	2b00      	cmp	r3, #0
 800380e:	d1ea      	bne.n	80037e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0304 	and.w	r3, r3, #4
 8003818:	2b00      	cmp	r3, #0
 800381a:	f000 8097 	beq.w	800394c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800381e:	2300      	movs	r3, #0
 8003820:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003822:	4b81      	ldr	r3, [pc, #516]	; (8003a28 <HAL_RCC_OscConfig+0x470>)
 8003824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d10f      	bne.n	800384e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800382e:	2300      	movs	r3, #0
 8003830:	60bb      	str	r3, [r7, #8]
 8003832:	4b7d      	ldr	r3, [pc, #500]	; (8003a28 <HAL_RCC_OscConfig+0x470>)
 8003834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003836:	4a7c      	ldr	r2, [pc, #496]	; (8003a28 <HAL_RCC_OscConfig+0x470>)
 8003838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800383c:	6413      	str	r3, [r2, #64]	; 0x40
 800383e:	4b7a      	ldr	r3, [pc, #488]	; (8003a28 <HAL_RCC_OscConfig+0x470>)
 8003840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003846:	60bb      	str	r3, [r7, #8]
 8003848:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800384a:	2301      	movs	r3, #1
 800384c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800384e:	4b77      	ldr	r3, [pc, #476]	; (8003a2c <HAL_RCC_OscConfig+0x474>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003856:	2b00      	cmp	r3, #0
 8003858:	d118      	bne.n	800388c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800385a:	4b74      	ldr	r3, [pc, #464]	; (8003a2c <HAL_RCC_OscConfig+0x474>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a73      	ldr	r2, [pc, #460]	; (8003a2c <HAL_RCC_OscConfig+0x474>)
 8003860:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003864:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003866:	f7ff f9d9 	bl	8002c1c <HAL_GetTick>
 800386a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800386c:	e008      	b.n	8003880 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800386e:	f7ff f9d5 	bl	8002c1c <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	2b02      	cmp	r3, #2
 800387a:	d901      	bls.n	8003880 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	e10c      	b.n	8003a9a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003880:	4b6a      	ldr	r3, [pc, #424]	; (8003a2c <HAL_RCC_OscConfig+0x474>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003888:	2b00      	cmp	r3, #0
 800388a:	d0f0      	beq.n	800386e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	2b01      	cmp	r3, #1
 8003892:	d106      	bne.n	80038a2 <HAL_RCC_OscConfig+0x2ea>
 8003894:	4b64      	ldr	r3, [pc, #400]	; (8003a28 <HAL_RCC_OscConfig+0x470>)
 8003896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003898:	4a63      	ldr	r2, [pc, #396]	; (8003a28 <HAL_RCC_OscConfig+0x470>)
 800389a:	f043 0301 	orr.w	r3, r3, #1
 800389e:	6713      	str	r3, [r2, #112]	; 0x70
 80038a0:	e01c      	b.n	80038dc <HAL_RCC_OscConfig+0x324>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	2b05      	cmp	r3, #5
 80038a8:	d10c      	bne.n	80038c4 <HAL_RCC_OscConfig+0x30c>
 80038aa:	4b5f      	ldr	r3, [pc, #380]	; (8003a28 <HAL_RCC_OscConfig+0x470>)
 80038ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ae:	4a5e      	ldr	r2, [pc, #376]	; (8003a28 <HAL_RCC_OscConfig+0x470>)
 80038b0:	f043 0304 	orr.w	r3, r3, #4
 80038b4:	6713      	str	r3, [r2, #112]	; 0x70
 80038b6:	4b5c      	ldr	r3, [pc, #368]	; (8003a28 <HAL_RCC_OscConfig+0x470>)
 80038b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ba:	4a5b      	ldr	r2, [pc, #364]	; (8003a28 <HAL_RCC_OscConfig+0x470>)
 80038bc:	f043 0301 	orr.w	r3, r3, #1
 80038c0:	6713      	str	r3, [r2, #112]	; 0x70
 80038c2:	e00b      	b.n	80038dc <HAL_RCC_OscConfig+0x324>
 80038c4:	4b58      	ldr	r3, [pc, #352]	; (8003a28 <HAL_RCC_OscConfig+0x470>)
 80038c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038c8:	4a57      	ldr	r2, [pc, #348]	; (8003a28 <HAL_RCC_OscConfig+0x470>)
 80038ca:	f023 0301 	bic.w	r3, r3, #1
 80038ce:	6713      	str	r3, [r2, #112]	; 0x70
 80038d0:	4b55      	ldr	r3, [pc, #340]	; (8003a28 <HAL_RCC_OscConfig+0x470>)
 80038d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038d4:	4a54      	ldr	r2, [pc, #336]	; (8003a28 <HAL_RCC_OscConfig+0x470>)
 80038d6:	f023 0304 	bic.w	r3, r3, #4
 80038da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d015      	beq.n	8003910 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038e4:	f7ff f99a 	bl	8002c1c <HAL_GetTick>
 80038e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ea:	e00a      	b.n	8003902 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038ec:	f7ff f996 	bl	8002c1c <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d901      	bls.n	8003902 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	e0cb      	b.n	8003a9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003902:	4b49      	ldr	r3, [pc, #292]	; (8003a28 <HAL_RCC_OscConfig+0x470>)
 8003904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003906:	f003 0302 	and.w	r3, r3, #2
 800390a:	2b00      	cmp	r3, #0
 800390c:	d0ee      	beq.n	80038ec <HAL_RCC_OscConfig+0x334>
 800390e:	e014      	b.n	800393a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003910:	f7ff f984 	bl	8002c1c <HAL_GetTick>
 8003914:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003916:	e00a      	b.n	800392e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003918:	f7ff f980 	bl	8002c1c <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	f241 3288 	movw	r2, #5000	; 0x1388
 8003926:	4293      	cmp	r3, r2
 8003928:	d901      	bls.n	800392e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e0b5      	b.n	8003a9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800392e:	4b3e      	ldr	r3, [pc, #248]	; (8003a28 <HAL_RCC_OscConfig+0x470>)
 8003930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003932:	f003 0302 	and.w	r3, r3, #2
 8003936:	2b00      	cmp	r3, #0
 8003938:	d1ee      	bne.n	8003918 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800393a:	7dfb      	ldrb	r3, [r7, #23]
 800393c:	2b01      	cmp	r3, #1
 800393e:	d105      	bne.n	800394c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003940:	4b39      	ldr	r3, [pc, #228]	; (8003a28 <HAL_RCC_OscConfig+0x470>)
 8003942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003944:	4a38      	ldr	r2, [pc, #224]	; (8003a28 <HAL_RCC_OscConfig+0x470>)
 8003946:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800394a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	699b      	ldr	r3, [r3, #24]
 8003950:	2b00      	cmp	r3, #0
 8003952:	f000 80a1 	beq.w	8003a98 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003956:	4b34      	ldr	r3, [pc, #208]	; (8003a28 <HAL_RCC_OscConfig+0x470>)
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	f003 030c 	and.w	r3, r3, #12
 800395e:	2b08      	cmp	r3, #8
 8003960:	d05c      	beq.n	8003a1c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	699b      	ldr	r3, [r3, #24]
 8003966:	2b02      	cmp	r3, #2
 8003968:	d141      	bne.n	80039ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800396a:	4b31      	ldr	r3, [pc, #196]	; (8003a30 <HAL_RCC_OscConfig+0x478>)
 800396c:	2200      	movs	r2, #0
 800396e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003970:	f7ff f954 	bl	8002c1c <HAL_GetTick>
 8003974:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003976:	e008      	b.n	800398a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003978:	f7ff f950 	bl	8002c1c <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	2b02      	cmp	r3, #2
 8003984:	d901      	bls.n	800398a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e087      	b.n	8003a9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800398a:	4b27      	ldr	r3, [pc, #156]	; (8003a28 <HAL_RCC_OscConfig+0x470>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d1f0      	bne.n	8003978 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	69da      	ldr	r2, [r3, #28]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a1b      	ldr	r3, [r3, #32]
 800399e:	431a      	orrs	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a4:	019b      	lsls	r3, r3, #6
 80039a6:	431a      	orrs	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ac:	085b      	lsrs	r3, r3, #1
 80039ae:	3b01      	subs	r3, #1
 80039b0:	041b      	lsls	r3, r3, #16
 80039b2:	431a      	orrs	r2, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b8:	061b      	lsls	r3, r3, #24
 80039ba:	491b      	ldr	r1, [pc, #108]	; (8003a28 <HAL_RCC_OscConfig+0x470>)
 80039bc:	4313      	orrs	r3, r2
 80039be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039c0:	4b1b      	ldr	r3, [pc, #108]	; (8003a30 <HAL_RCC_OscConfig+0x478>)
 80039c2:	2201      	movs	r2, #1
 80039c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039c6:	f7ff f929 	bl	8002c1c <HAL_GetTick>
 80039ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039cc:	e008      	b.n	80039e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039ce:	f7ff f925 	bl	8002c1c <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d901      	bls.n	80039e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e05c      	b.n	8003a9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039e0:	4b11      	ldr	r3, [pc, #68]	; (8003a28 <HAL_RCC_OscConfig+0x470>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d0f0      	beq.n	80039ce <HAL_RCC_OscConfig+0x416>
 80039ec:	e054      	b.n	8003a98 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039ee:	4b10      	ldr	r3, [pc, #64]	; (8003a30 <HAL_RCC_OscConfig+0x478>)
 80039f0:	2200      	movs	r2, #0
 80039f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039f4:	f7ff f912 	bl	8002c1c <HAL_GetTick>
 80039f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039fa:	e008      	b.n	8003a0e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039fc:	f7ff f90e 	bl	8002c1c <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d901      	bls.n	8003a0e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e045      	b.n	8003a9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a0e:	4b06      	ldr	r3, [pc, #24]	; (8003a28 <HAL_RCC_OscConfig+0x470>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d1f0      	bne.n	80039fc <HAL_RCC_OscConfig+0x444>
 8003a1a:	e03d      	b.n	8003a98 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	699b      	ldr	r3, [r3, #24]
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d107      	bne.n	8003a34 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e038      	b.n	8003a9a <HAL_RCC_OscConfig+0x4e2>
 8003a28:	40023800 	.word	0x40023800
 8003a2c:	40007000 	.word	0x40007000
 8003a30:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a34:	4b1b      	ldr	r3, [pc, #108]	; (8003aa4 <HAL_RCC_OscConfig+0x4ec>)
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	699b      	ldr	r3, [r3, #24]
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d028      	beq.n	8003a94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d121      	bne.n	8003a94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d11a      	bne.n	8003a94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a5e:	68fa      	ldr	r2, [r7, #12]
 8003a60:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a64:	4013      	ands	r3, r2
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a6a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d111      	bne.n	8003a94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a7a:	085b      	lsrs	r3, r3, #1
 8003a7c:	3b01      	subs	r3, #1
 8003a7e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d107      	bne.n	8003a94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d001      	beq.n	8003a98 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e000      	b.n	8003a9a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003a98:	2300      	movs	r3, #0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3718      	adds	r7, #24
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	40023800 	.word	0x40023800

08003aa8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d101      	bne.n	8003abc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e0cc      	b.n	8003c56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003abc:	4b68      	ldr	r3, [pc, #416]	; (8003c60 <HAL_RCC_ClockConfig+0x1b8>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0307 	and.w	r3, r3, #7
 8003ac4:	683a      	ldr	r2, [r7, #0]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d90c      	bls.n	8003ae4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aca:	4b65      	ldr	r3, [pc, #404]	; (8003c60 <HAL_RCC_ClockConfig+0x1b8>)
 8003acc:	683a      	ldr	r2, [r7, #0]
 8003ace:	b2d2      	uxtb	r2, r2
 8003ad0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ad2:	4b63      	ldr	r3, [pc, #396]	; (8003c60 <HAL_RCC_ClockConfig+0x1b8>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0307 	and.w	r3, r3, #7
 8003ada:	683a      	ldr	r2, [r7, #0]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d001      	beq.n	8003ae4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e0b8      	b.n	8003c56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0302 	and.w	r3, r3, #2
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d020      	beq.n	8003b32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0304 	and.w	r3, r3, #4
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d005      	beq.n	8003b08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003afc:	4b59      	ldr	r3, [pc, #356]	; (8003c64 <HAL_RCC_ClockConfig+0x1bc>)
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	4a58      	ldr	r2, [pc, #352]	; (8003c64 <HAL_RCC_ClockConfig+0x1bc>)
 8003b02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0308 	and.w	r3, r3, #8
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d005      	beq.n	8003b20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b14:	4b53      	ldr	r3, [pc, #332]	; (8003c64 <HAL_RCC_ClockConfig+0x1bc>)
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	4a52      	ldr	r2, [pc, #328]	; (8003c64 <HAL_RCC_ClockConfig+0x1bc>)
 8003b1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b20:	4b50      	ldr	r3, [pc, #320]	; (8003c64 <HAL_RCC_ClockConfig+0x1bc>)
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	494d      	ldr	r1, [pc, #308]	; (8003c64 <HAL_RCC_ClockConfig+0x1bc>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0301 	and.w	r3, r3, #1
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d044      	beq.n	8003bc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d107      	bne.n	8003b56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b46:	4b47      	ldr	r3, [pc, #284]	; (8003c64 <HAL_RCC_ClockConfig+0x1bc>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d119      	bne.n	8003b86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e07f      	b.n	8003c56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d003      	beq.n	8003b66 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b62:	2b03      	cmp	r3, #3
 8003b64:	d107      	bne.n	8003b76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b66:	4b3f      	ldr	r3, [pc, #252]	; (8003c64 <HAL_RCC_ClockConfig+0x1bc>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d109      	bne.n	8003b86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e06f      	b.n	8003c56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b76:	4b3b      	ldr	r3, [pc, #236]	; (8003c64 <HAL_RCC_ClockConfig+0x1bc>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0302 	and.w	r3, r3, #2
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d101      	bne.n	8003b86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e067      	b.n	8003c56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b86:	4b37      	ldr	r3, [pc, #220]	; (8003c64 <HAL_RCC_ClockConfig+0x1bc>)
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f023 0203 	bic.w	r2, r3, #3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	4934      	ldr	r1, [pc, #208]	; (8003c64 <HAL_RCC_ClockConfig+0x1bc>)
 8003b94:	4313      	orrs	r3, r2
 8003b96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b98:	f7ff f840 	bl	8002c1c <HAL_GetTick>
 8003b9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b9e:	e00a      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ba0:	f7ff f83c 	bl	8002c1c <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d901      	bls.n	8003bb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e04f      	b.n	8003c56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bb6:	4b2b      	ldr	r3, [pc, #172]	; (8003c64 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	f003 020c 	and.w	r2, r3, #12
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d1eb      	bne.n	8003ba0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bc8:	4b25      	ldr	r3, [pc, #148]	; (8003c60 <HAL_RCC_ClockConfig+0x1b8>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0307 	and.w	r3, r3, #7
 8003bd0:	683a      	ldr	r2, [r7, #0]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d20c      	bcs.n	8003bf0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bd6:	4b22      	ldr	r3, [pc, #136]	; (8003c60 <HAL_RCC_ClockConfig+0x1b8>)
 8003bd8:	683a      	ldr	r2, [r7, #0]
 8003bda:	b2d2      	uxtb	r2, r2
 8003bdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bde:	4b20      	ldr	r3, [pc, #128]	; (8003c60 <HAL_RCC_ClockConfig+0x1b8>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0307 	and.w	r3, r3, #7
 8003be6:	683a      	ldr	r2, [r7, #0]
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d001      	beq.n	8003bf0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e032      	b.n	8003c56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0304 	and.w	r3, r3, #4
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d008      	beq.n	8003c0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bfc:	4b19      	ldr	r3, [pc, #100]	; (8003c64 <HAL_RCC_ClockConfig+0x1bc>)
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	4916      	ldr	r1, [pc, #88]	; (8003c64 <HAL_RCC_ClockConfig+0x1bc>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0308 	and.w	r3, r3, #8
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d009      	beq.n	8003c2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c1a:	4b12      	ldr	r3, [pc, #72]	; (8003c64 <HAL_RCC_ClockConfig+0x1bc>)
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	691b      	ldr	r3, [r3, #16]
 8003c26:	00db      	lsls	r3, r3, #3
 8003c28:	490e      	ldr	r1, [pc, #56]	; (8003c64 <HAL_RCC_ClockConfig+0x1bc>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c2e:	f000 f821 	bl	8003c74 <HAL_RCC_GetSysClockFreq>
 8003c32:	4602      	mov	r2, r0
 8003c34:	4b0b      	ldr	r3, [pc, #44]	; (8003c64 <HAL_RCC_ClockConfig+0x1bc>)
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	091b      	lsrs	r3, r3, #4
 8003c3a:	f003 030f 	and.w	r3, r3, #15
 8003c3e:	490a      	ldr	r1, [pc, #40]	; (8003c68 <HAL_RCC_ClockConfig+0x1c0>)
 8003c40:	5ccb      	ldrb	r3, [r1, r3]
 8003c42:	fa22 f303 	lsr.w	r3, r2, r3
 8003c46:	4a09      	ldr	r2, [pc, #36]	; (8003c6c <HAL_RCC_ClockConfig+0x1c4>)
 8003c48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c4a:	4b09      	ldr	r3, [pc, #36]	; (8003c70 <HAL_RCC_ClockConfig+0x1c8>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f7fe ffa0 	bl	8002b94 <HAL_InitTick>

  return HAL_OK;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3710      	adds	r7, #16
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	40023c00 	.word	0x40023c00
 8003c64:	40023800 	.word	0x40023800
 8003c68:	080066e8 	.word	0x080066e8
 8003c6c:	20000000 	.word	0x20000000
 8003c70:	2000000c 	.word	0x2000000c

08003c74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c78:	b094      	sub	sp, #80	; 0x50
 8003c7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	647b      	str	r3, [r7, #68]	; 0x44
 8003c80:	2300      	movs	r3, #0
 8003c82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c84:	2300      	movs	r3, #0
 8003c86:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c8c:	4b79      	ldr	r3, [pc, #484]	; (8003e74 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	f003 030c 	and.w	r3, r3, #12
 8003c94:	2b08      	cmp	r3, #8
 8003c96:	d00d      	beq.n	8003cb4 <HAL_RCC_GetSysClockFreq+0x40>
 8003c98:	2b08      	cmp	r3, #8
 8003c9a:	f200 80e1 	bhi.w	8003e60 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d002      	beq.n	8003ca8 <HAL_RCC_GetSysClockFreq+0x34>
 8003ca2:	2b04      	cmp	r3, #4
 8003ca4:	d003      	beq.n	8003cae <HAL_RCC_GetSysClockFreq+0x3a>
 8003ca6:	e0db      	b.n	8003e60 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ca8:	4b73      	ldr	r3, [pc, #460]	; (8003e78 <HAL_RCC_GetSysClockFreq+0x204>)
 8003caa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003cac:	e0db      	b.n	8003e66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003cae:	4b72      	ldr	r3, [pc, #456]	; (8003e78 <HAL_RCC_GetSysClockFreq+0x204>)
 8003cb0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003cb2:	e0d8      	b.n	8003e66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cb4:	4b6f      	ldr	r3, [pc, #444]	; (8003e74 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cbc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003cbe:	4b6d      	ldr	r3, [pc, #436]	; (8003e74 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d063      	beq.n	8003d92 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cca:	4b6a      	ldr	r3, [pc, #424]	; (8003e74 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	099b      	lsrs	r3, r3, #6
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003cd4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cdc:	633b      	str	r3, [r7, #48]	; 0x30
 8003cde:	2300      	movs	r3, #0
 8003ce0:	637b      	str	r3, [r7, #52]	; 0x34
 8003ce2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003ce6:	4622      	mov	r2, r4
 8003ce8:	462b      	mov	r3, r5
 8003cea:	f04f 0000 	mov.w	r0, #0
 8003cee:	f04f 0100 	mov.w	r1, #0
 8003cf2:	0159      	lsls	r1, r3, #5
 8003cf4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cf8:	0150      	lsls	r0, r2, #5
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	460b      	mov	r3, r1
 8003cfe:	4621      	mov	r1, r4
 8003d00:	1a51      	subs	r1, r2, r1
 8003d02:	6139      	str	r1, [r7, #16]
 8003d04:	4629      	mov	r1, r5
 8003d06:	eb63 0301 	sbc.w	r3, r3, r1
 8003d0a:	617b      	str	r3, [r7, #20]
 8003d0c:	f04f 0200 	mov.w	r2, #0
 8003d10:	f04f 0300 	mov.w	r3, #0
 8003d14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d18:	4659      	mov	r1, fp
 8003d1a:	018b      	lsls	r3, r1, #6
 8003d1c:	4651      	mov	r1, sl
 8003d1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d22:	4651      	mov	r1, sl
 8003d24:	018a      	lsls	r2, r1, #6
 8003d26:	4651      	mov	r1, sl
 8003d28:	ebb2 0801 	subs.w	r8, r2, r1
 8003d2c:	4659      	mov	r1, fp
 8003d2e:	eb63 0901 	sbc.w	r9, r3, r1
 8003d32:	f04f 0200 	mov.w	r2, #0
 8003d36:	f04f 0300 	mov.w	r3, #0
 8003d3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d46:	4690      	mov	r8, r2
 8003d48:	4699      	mov	r9, r3
 8003d4a:	4623      	mov	r3, r4
 8003d4c:	eb18 0303 	adds.w	r3, r8, r3
 8003d50:	60bb      	str	r3, [r7, #8]
 8003d52:	462b      	mov	r3, r5
 8003d54:	eb49 0303 	adc.w	r3, r9, r3
 8003d58:	60fb      	str	r3, [r7, #12]
 8003d5a:	f04f 0200 	mov.w	r2, #0
 8003d5e:	f04f 0300 	mov.w	r3, #0
 8003d62:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003d66:	4629      	mov	r1, r5
 8003d68:	028b      	lsls	r3, r1, #10
 8003d6a:	4621      	mov	r1, r4
 8003d6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d70:	4621      	mov	r1, r4
 8003d72:	028a      	lsls	r2, r1, #10
 8003d74:	4610      	mov	r0, r2
 8003d76:	4619      	mov	r1, r3
 8003d78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d80:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d84:	f7fc fa84 	bl	8000290 <__aeabi_uldivmod>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	460b      	mov	r3, r1
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d90:	e058      	b.n	8003e44 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d92:	4b38      	ldr	r3, [pc, #224]	; (8003e74 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	099b      	lsrs	r3, r3, #6
 8003d98:	2200      	movs	r2, #0
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	4611      	mov	r1, r2
 8003d9e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003da2:	623b      	str	r3, [r7, #32]
 8003da4:	2300      	movs	r3, #0
 8003da6:	627b      	str	r3, [r7, #36]	; 0x24
 8003da8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003dac:	4642      	mov	r2, r8
 8003dae:	464b      	mov	r3, r9
 8003db0:	f04f 0000 	mov.w	r0, #0
 8003db4:	f04f 0100 	mov.w	r1, #0
 8003db8:	0159      	lsls	r1, r3, #5
 8003dba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003dbe:	0150      	lsls	r0, r2, #5
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	460b      	mov	r3, r1
 8003dc4:	4641      	mov	r1, r8
 8003dc6:	ebb2 0a01 	subs.w	sl, r2, r1
 8003dca:	4649      	mov	r1, r9
 8003dcc:	eb63 0b01 	sbc.w	fp, r3, r1
 8003dd0:	f04f 0200 	mov.w	r2, #0
 8003dd4:	f04f 0300 	mov.w	r3, #0
 8003dd8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003ddc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003de0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003de4:	ebb2 040a 	subs.w	r4, r2, sl
 8003de8:	eb63 050b 	sbc.w	r5, r3, fp
 8003dec:	f04f 0200 	mov.w	r2, #0
 8003df0:	f04f 0300 	mov.w	r3, #0
 8003df4:	00eb      	lsls	r3, r5, #3
 8003df6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003dfa:	00e2      	lsls	r2, r4, #3
 8003dfc:	4614      	mov	r4, r2
 8003dfe:	461d      	mov	r5, r3
 8003e00:	4643      	mov	r3, r8
 8003e02:	18e3      	adds	r3, r4, r3
 8003e04:	603b      	str	r3, [r7, #0]
 8003e06:	464b      	mov	r3, r9
 8003e08:	eb45 0303 	adc.w	r3, r5, r3
 8003e0c:	607b      	str	r3, [r7, #4]
 8003e0e:	f04f 0200 	mov.w	r2, #0
 8003e12:	f04f 0300 	mov.w	r3, #0
 8003e16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e1a:	4629      	mov	r1, r5
 8003e1c:	028b      	lsls	r3, r1, #10
 8003e1e:	4621      	mov	r1, r4
 8003e20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e24:	4621      	mov	r1, r4
 8003e26:	028a      	lsls	r2, r1, #10
 8003e28:	4610      	mov	r0, r2
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e2e:	2200      	movs	r2, #0
 8003e30:	61bb      	str	r3, [r7, #24]
 8003e32:	61fa      	str	r2, [r7, #28]
 8003e34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e38:	f7fc fa2a 	bl	8000290 <__aeabi_uldivmod>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	460b      	mov	r3, r1
 8003e40:	4613      	mov	r3, r2
 8003e42:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e44:	4b0b      	ldr	r3, [pc, #44]	; (8003e74 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	0c1b      	lsrs	r3, r3, #16
 8003e4a:	f003 0303 	and.w	r3, r3, #3
 8003e4e:	3301      	adds	r3, #1
 8003e50:	005b      	lsls	r3, r3, #1
 8003e52:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003e54:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e5c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e5e:	e002      	b.n	8003e66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e60:	4b05      	ldr	r3, [pc, #20]	; (8003e78 <HAL_RCC_GetSysClockFreq+0x204>)
 8003e62:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3750      	adds	r7, #80	; 0x50
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e72:	bf00      	nop
 8003e74:	40023800 	.word	0x40023800
 8003e78:	00f42400 	.word	0x00f42400

08003e7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e80:	4b03      	ldr	r3, [pc, #12]	; (8003e90 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e82:	681b      	ldr	r3, [r3, #0]
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr
 8003e8e:	bf00      	nop
 8003e90:	20000000 	.word	0x20000000

08003e94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e98:	f7ff fff0 	bl	8003e7c <HAL_RCC_GetHCLKFreq>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	4b05      	ldr	r3, [pc, #20]	; (8003eb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	0a9b      	lsrs	r3, r3, #10
 8003ea4:	f003 0307 	and.w	r3, r3, #7
 8003ea8:	4903      	ldr	r1, [pc, #12]	; (8003eb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003eaa:	5ccb      	ldrb	r3, [r1, r3]
 8003eac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	40023800 	.word	0x40023800
 8003eb8:	080066f8 	.word	0x080066f8

08003ebc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ec0:	f7ff ffdc 	bl	8003e7c <HAL_RCC_GetHCLKFreq>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	4b05      	ldr	r3, [pc, #20]	; (8003edc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	0b5b      	lsrs	r3, r3, #13
 8003ecc:	f003 0307 	and.w	r3, r3, #7
 8003ed0:	4903      	ldr	r1, [pc, #12]	; (8003ee0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ed2:	5ccb      	ldrb	r3, [r1, r3]
 8003ed4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	40023800 	.word	0x40023800
 8003ee0:	080066f8 	.word	0x080066f8

08003ee4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d101      	bne.n	8003ef6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e07b      	b.n	8003fee <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d108      	bne.n	8003f10 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f06:	d009      	beq.n	8003f1c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	61da      	str	r2, [r3, #28]
 8003f0e:	e005      	b.n	8003f1c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d106      	bne.n	8003f3c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f7fe f984 	bl	8002244 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2202      	movs	r2, #2
 8003f40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f52:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003f64:	431a      	orrs	r2, r3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f6e:	431a      	orrs	r2, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	691b      	ldr	r3, [r3, #16]
 8003f74:	f003 0302 	and.w	r3, r3, #2
 8003f78:	431a      	orrs	r2, r3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	695b      	ldr	r3, [r3, #20]
 8003f7e:	f003 0301 	and.w	r3, r3, #1
 8003f82:	431a      	orrs	r2, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	699b      	ldr	r3, [r3, #24]
 8003f88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f8c:	431a      	orrs	r2, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	69db      	ldr	r3, [r3, #28]
 8003f92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f96:	431a      	orrs	r2, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6a1b      	ldr	r3, [r3, #32]
 8003f9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fa0:	ea42 0103 	orr.w	r1, r2, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	430a      	orrs	r2, r1
 8003fb2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	699b      	ldr	r3, [r3, #24]
 8003fb8:	0c1b      	lsrs	r3, r3, #16
 8003fba:	f003 0104 	and.w	r1, r3, #4
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc2:	f003 0210 	and.w	r2, r3, #16
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	430a      	orrs	r2, r1
 8003fcc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	69da      	ldr	r2, [r3, #28]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fdc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003fec:	2300      	movs	r3, #0
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3708      	adds	r7, #8
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}

08003ff6 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8003ff6:	b580      	push	{r7, lr}
 8003ff8:	b084      	sub	sp, #16
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	60f8      	str	r0, [r7, #12]
 8003ffe:	60b9      	str	r1, [r7, #8]
 8004000:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d101      	bne.n	800400c <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e038      	b.n	800407e <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8004012:	b2db      	uxtb	r3, r3
 8004014:	2b00      	cmp	r3, #0
 8004016:	d106      	bne.n	8004026 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2200      	movs	r2, #0
 800401c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8004020:	68f8      	ldr	r0, [r7, #12]
 8004022:	f7fe fa85 	bl	8002530 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	3308      	adds	r3, #8
 800402e:	4619      	mov	r1, r3
 8004030:	4610      	mov	r0, r2
 8004032:	f001 f83b 	bl	80050ac <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6818      	ldr	r0, [r3, #0]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	461a      	mov	r2, r3
 8004040:	68b9      	ldr	r1, [r7, #8]
 8004042:	f001 f89d 	bl	8005180 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6858      	ldr	r0, [r3, #4]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	689a      	ldr	r2, [r3, #8]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004052:	6879      	ldr	r1, [r7, #4]
 8004054:	f001 f8ca 	bl	80051ec <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	68fa      	ldr	r2, [r7, #12]
 800405e:	6892      	ldr	r2, [r2, #8]
 8004060:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	68fa      	ldr	r2, [r7, #12]
 800406a:	6892      	ldr	r2, [r2, #8]
 800406c:	f041 0101 	orr.w	r1, r1, #1
 8004070:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 800407c:	2300      	movs	r3, #0
}
 800407e:	4618      	mov	r0, r3
 8004080:	3710      	adds	r7, #16
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}

08004086 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004086:	b580      	push	{r7, lr}
 8004088:	b082      	sub	sp, #8
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d101      	bne.n	8004098 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e03f      	b.n	8004118 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d106      	bne.n	80040b2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f7fe f967 	bl	8002380 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2224      	movs	r2, #36	; 0x24
 80040b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	68da      	ldr	r2, [r3, #12]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040c8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f000 fd7a 	bl	8004bc4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	691a      	ldr	r2, [r3, #16]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040de:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	695a      	ldr	r2, [r3, #20]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040ee:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	68da      	ldr	r2, [r3, #12]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040fe:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2220      	movs	r2, #32
 800410a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2220      	movs	r2, #32
 8004112:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004116:	2300      	movs	r3, #0
}
 8004118:	4618      	mov	r0, r3
 800411a:	3708      	adds	r7, #8
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b08a      	sub	sp, #40	; 0x28
 8004124:	af02      	add	r7, sp, #8
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	60b9      	str	r1, [r7, #8]
 800412a:	603b      	str	r3, [r7, #0]
 800412c:	4613      	mov	r3, r2
 800412e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004130:	2300      	movs	r3, #0
 8004132:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800413a:	b2db      	uxtb	r3, r3
 800413c:	2b20      	cmp	r3, #32
 800413e:	d17c      	bne.n	800423a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d002      	beq.n	800414c <HAL_UART_Transmit+0x2c>
 8004146:	88fb      	ldrh	r3, [r7, #6]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d101      	bne.n	8004150 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	e075      	b.n	800423c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004156:	2b01      	cmp	r3, #1
 8004158:	d101      	bne.n	800415e <HAL_UART_Transmit+0x3e>
 800415a:	2302      	movs	r3, #2
 800415c:	e06e      	b.n	800423c <HAL_UART_Transmit+0x11c>
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2201      	movs	r2, #1
 8004162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2200      	movs	r2, #0
 800416a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2221      	movs	r2, #33	; 0x21
 8004170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004174:	f7fe fd52 	bl	8002c1c <HAL_GetTick>
 8004178:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	88fa      	ldrh	r2, [r7, #6]
 800417e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	88fa      	ldrh	r2, [r7, #6]
 8004184:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800418e:	d108      	bne.n	80041a2 <HAL_UART_Transmit+0x82>
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	691b      	ldr	r3, [r3, #16]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d104      	bne.n	80041a2 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004198:	2300      	movs	r3, #0
 800419a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	61bb      	str	r3, [r7, #24]
 80041a0:	e003      	b.n	80041aa <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041a6:	2300      	movs	r3, #0
 80041a8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2200      	movs	r2, #0
 80041ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80041b2:	e02a      	b.n	800420a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	9300      	str	r3, [sp, #0]
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	2200      	movs	r2, #0
 80041bc:	2180      	movs	r1, #128	; 0x80
 80041be:	68f8      	ldr	r0, [r7, #12]
 80041c0:	f000 faf8 	bl	80047b4 <UART_WaitOnFlagUntilTimeout>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d001      	beq.n	80041ce <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e036      	b.n	800423c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d10b      	bne.n	80041ec <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	881b      	ldrh	r3, [r3, #0]
 80041d8:	461a      	mov	r2, r3
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041e2:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	3302      	adds	r3, #2
 80041e8:	61bb      	str	r3, [r7, #24]
 80041ea:	e007      	b.n	80041fc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	781a      	ldrb	r2, [r3, #0]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	3301      	adds	r3, #1
 80041fa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004200:	b29b      	uxth	r3, r3
 8004202:	3b01      	subs	r3, #1
 8004204:	b29a      	uxth	r2, r3
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800420e:	b29b      	uxth	r3, r3
 8004210:	2b00      	cmp	r3, #0
 8004212:	d1cf      	bne.n	80041b4 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	9300      	str	r3, [sp, #0]
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	2200      	movs	r2, #0
 800421c:	2140      	movs	r1, #64	; 0x40
 800421e:	68f8      	ldr	r0, [r7, #12]
 8004220:	f000 fac8 	bl	80047b4 <UART_WaitOnFlagUntilTimeout>
 8004224:	4603      	mov	r3, r0
 8004226:	2b00      	cmp	r3, #0
 8004228:	d001      	beq.n	800422e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e006      	b.n	800423c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2220      	movs	r2, #32
 8004232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004236:	2300      	movs	r3, #0
 8004238:	e000      	b.n	800423c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800423a:	2302      	movs	r3, #2
  }
}
 800423c:	4618      	mov	r0, r3
 800423e:	3720      	adds	r7, #32
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}

08004244 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b0ba      	sub	sp, #232	; 0xe8
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	695b      	ldr	r3, [r3, #20]
 8004266:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800426a:	2300      	movs	r3, #0
 800426c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004270:	2300      	movs	r3, #0
 8004272:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004276:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800427a:	f003 030f 	and.w	r3, r3, #15
 800427e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004282:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004286:	2b00      	cmp	r3, #0
 8004288:	d10f      	bne.n	80042aa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800428a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800428e:	f003 0320 	and.w	r3, r3, #32
 8004292:	2b00      	cmp	r3, #0
 8004294:	d009      	beq.n	80042aa <HAL_UART_IRQHandler+0x66>
 8004296:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800429a:	f003 0320 	and.w	r3, r3, #32
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d003      	beq.n	80042aa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f000 fbd3 	bl	8004a4e <UART_Receive_IT>
      return;
 80042a8:	e256      	b.n	8004758 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80042aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	f000 80de 	beq.w	8004470 <HAL_UART_IRQHandler+0x22c>
 80042b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042b8:	f003 0301 	and.w	r3, r3, #1
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d106      	bne.n	80042ce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80042c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042c4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	f000 80d1 	beq.w	8004470 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80042ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042d2:	f003 0301 	and.w	r3, r3, #1
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d00b      	beq.n	80042f2 <HAL_UART_IRQHandler+0xae>
 80042da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d005      	beq.n	80042f2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ea:	f043 0201 	orr.w	r2, r3, #1
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80042f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042f6:	f003 0304 	and.w	r3, r3, #4
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d00b      	beq.n	8004316 <HAL_UART_IRQHandler+0xd2>
 80042fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004302:	f003 0301 	and.w	r3, r3, #1
 8004306:	2b00      	cmp	r3, #0
 8004308:	d005      	beq.n	8004316 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430e:	f043 0202 	orr.w	r2, r3, #2
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004316:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800431a:	f003 0302 	and.w	r3, r3, #2
 800431e:	2b00      	cmp	r3, #0
 8004320:	d00b      	beq.n	800433a <HAL_UART_IRQHandler+0xf6>
 8004322:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004326:	f003 0301 	and.w	r3, r3, #1
 800432a:	2b00      	cmp	r3, #0
 800432c:	d005      	beq.n	800433a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004332:	f043 0204 	orr.w	r2, r3, #4
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800433a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800433e:	f003 0308 	and.w	r3, r3, #8
 8004342:	2b00      	cmp	r3, #0
 8004344:	d011      	beq.n	800436a <HAL_UART_IRQHandler+0x126>
 8004346:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800434a:	f003 0320 	and.w	r3, r3, #32
 800434e:	2b00      	cmp	r3, #0
 8004350:	d105      	bne.n	800435e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004352:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004356:	f003 0301 	and.w	r3, r3, #1
 800435a:	2b00      	cmp	r3, #0
 800435c:	d005      	beq.n	800436a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004362:	f043 0208 	orr.w	r2, r3, #8
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436e:	2b00      	cmp	r3, #0
 8004370:	f000 81ed 	beq.w	800474e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004374:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004378:	f003 0320 	and.w	r3, r3, #32
 800437c:	2b00      	cmp	r3, #0
 800437e:	d008      	beq.n	8004392 <HAL_UART_IRQHandler+0x14e>
 8004380:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004384:	f003 0320 	and.w	r3, r3, #32
 8004388:	2b00      	cmp	r3, #0
 800438a:	d002      	beq.n	8004392 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f000 fb5e 	bl	8004a4e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	695b      	ldr	r3, [r3, #20]
 8004398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800439c:	2b40      	cmp	r3, #64	; 0x40
 800439e:	bf0c      	ite	eq
 80043a0:	2301      	moveq	r3, #1
 80043a2:	2300      	movne	r3, #0
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ae:	f003 0308 	and.w	r3, r3, #8
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d103      	bne.n	80043be <HAL_UART_IRQHandler+0x17a>
 80043b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d04f      	beq.n	800445e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f000 fa66 	bl	8004890 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	695b      	ldr	r3, [r3, #20]
 80043ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ce:	2b40      	cmp	r3, #64	; 0x40
 80043d0:	d141      	bne.n	8004456 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	3314      	adds	r3, #20
 80043d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80043e0:	e853 3f00 	ldrex	r3, [r3]
 80043e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80043e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80043ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	3314      	adds	r3, #20
 80043fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80043fe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004402:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004406:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800440a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800440e:	e841 2300 	strex	r3, r2, [r1]
 8004412:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004416:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d1d9      	bne.n	80043d2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004422:	2b00      	cmp	r3, #0
 8004424:	d013      	beq.n	800444e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800442a:	4a7d      	ldr	r2, [pc, #500]	; (8004620 <HAL_UART_IRQHandler+0x3dc>)
 800442c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004432:	4618      	mov	r0, r3
 8004434:	f7fe fda3 	bl	8002f7e <HAL_DMA_Abort_IT>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d016      	beq.n	800446c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004442:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004448:	4610      	mov	r0, r2
 800444a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800444c:	e00e      	b.n	800446c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 f99a 	bl	8004788 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004454:	e00a      	b.n	800446c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 f996 	bl	8004788 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800445c:	e006      	b.n	800446c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f000 f992 	bl	8004788 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800446a:	e170      	b.n	800474e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800446c:	bf00      	nop
    return;
 800446e:	e16e      	b.n	800474e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004474:	2b01      	cmp	r3, #1
 8004476:	f040 814a 	bne.w	800470e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800447a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800447e:	f003 0310 	and.w	r3, r3, #16
 8004482:	2b00      	cmp	r3, #0
 8004484:	f000 8143 	beq.w	800470e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004488:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800448c:	f003 0310 	and.w	r3, r3, #16
 8004490:	2b00      	cmp	r3, #0
 8004492:	f000 813c 	beq.w	800470e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004496:	2300      	movs	r3, #0
 8004498:	60bb      	str	r3, [r7, #8]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	60bb      	str	r3, [r7, #8]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	60bb      	str	r3, [r7, #8]
 80044aa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	695b      	ldr	r3, [r3, #20]
 80044b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044b6:	2b40      	cmp	r3, #64	; 0x40
 80044b8:	f040 80b4 	bne.w	8004624 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80044c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	f000 8140 	beq.w	8004752 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80044d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80044da:	429a      	cmp	r2, r3
 80044dc:	f080 8139 	bcs.w	8004752 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80044e6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ec:	69db      	ldr	r3, [r3, #28]
 80044ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044f2:	f000 8088 	beq.w	8004606 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	330c      	adds	r3, #12
 80044fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004500:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004504:	e853 3f00 	ldrex	r3, [r3]
 8004508:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800450c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004510:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004514:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	330c      	adds	r3, #12
 800451e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004522:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004526:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800452a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800452e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004532:	e841 2300 	strex	r3, r2, [r1]
 8004536:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800453a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800453e:	2b00      	cmp	r3, #0
 8004540:	d1d9      	bne.n	80044f6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	3314      	adds	r3, #20
 8004548:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800454a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800454c:	e853 3f00 	ldrex	r3, [r3]
 8004550:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004552:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004554:	f023 0301 	bic.w	r3, r3, #1
 8004558:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	3314      	adds	r3, #20
 8004562:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004566:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800456a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800456c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800456e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004572:	e841 2300 	strex	r3, r2, [r1]
 8004576:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004578:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800457a:	2b00      	cmp	r3, #0
 800457c:	d1e1      	bne.n	8004542 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	3314      	adds	r3, #20
 8004584:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004586:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004588:	e853 3f00 	ldrex	r3, [r3]
 800458c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800458e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004590:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004594:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	3314      	adds	r3, #20
 800459e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80045a2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80045a4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80045a8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80045aa:	e841 2300 	strex	r3, r2, [r1]
 80045ae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80045b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d1e3      	bne.n	800457e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2220      	movs	r2, #32
 80045ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	330c      	adds	r3, #12
 80045ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045ce:	e853 3f00 	ldrex	r3, [r3]
 80045d2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80045d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045d6:	f023 0310 	bic.w	r3, r3, #16
 80045da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	330c      	adds	r3, #12
 80045e4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80045e8:	65ba      	str	r2, [r7, #88]	; 0x58
 80045ea:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80045ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80045f0:	e841 2300 	strex	r3, r2, [r1]
 80045f4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80045f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d1e3      	bne.n	80045c4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004600:	4618      	mov	r0, r3
 8004602:	f7fe fc4c 	bl	8002e9e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800460e:	b29b      	uxth	r3, r3
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	b29b      	uxth	r3, r3
 8004614:	4619      	mov	r1, r3
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 f8c0 	bl	800479c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800461c:	e099      	b.n	8004752 <HAL_UART_IRQHandler+0x50e>
 800461e:	bf00      	nop
 8004620:	08004957 	.word	0x08004957
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800462c:	b29b      	uxth	r3, r3
 800462e:	1ad3      	subs	r3, r2, r3
 8004630:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004638:	b29b      	uxth	r3, r3
 800463a:	2b00      	cmp	r3, #0
 800463c:	f000 808b 	beq.w	8004756 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004640:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004644:	2b00      	cmp	r3, #0
 8004646:	f000 8086 	beq.w	8004756 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	330c      	adds	r3, #12
 8004650:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004654:	e853 3f00 	ldrex	r3, [r3]
 8004658:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800465a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800465c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004660:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	330c      	adds	r3, #12
 800466a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800466e:	647a      	str	r2, [r7, #68]	; 0x44
 8004670:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004672:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004674:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004676:	e841 2300 	strex	r3, r2, [r1]
 800467a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800467c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800467e:	2b00      	cmp	r3, #0
 8004680:	d1e3      	bne.n	800464a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	3314      	adds	r3, #20
 8004688:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800468a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468c:	e853 3f00 	ldrex	r3, [r3]
 8004690:	623b      	str	r3, [r7, #32]
   return(result);
 8004692:	6a3b      	ldr	r3, [r7, #32]
 8004694:	f023 0301 	bic.w	r3, r3, #1
 8004698:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	3314      	adds	r3, #20
 80046a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80046a6:	633a      	str	r2, [r7, #48]	; 0x30
 80046a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046ae:	e841 2300 	strex	r3, r2, [r1]
 80046b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80046b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d1e3      	bne.n	8004682 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2220      	movs	r2, #32
 80046be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	330c      	adds	r3, #12
 80046ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	e853 3f00 	ldrex	r3, [r3]
 80046d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f023 0310 	bic.w	r3, r3, #16
 80046de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	330c      	adds	r3, #12
 80046e8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80046ec:	61fa      	str	r2, [r7, #28]
 80046ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f0:	69b9      	ldr	r1, [r7, #24]
 80046f2:	69fa      	ldr	r2, [r7, #28]
 80046f4:	e841 2300 	strex	r3, r2, [r1]
 80046f8:	617b      	str	r3, [r7, #20]
   return(result);
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d1e3      	bne.n	80046c8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004700:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004704:	4619      	mov	r1, r3
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 f848 	bl	800479c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800470c:	e023      	b.n	8004756 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800470e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004716:	2b00      	cmp	r3, #0
 8004718:	d009      	beq.n	800472e <HAL_UART_IRQHandler+0x4ea>
 800471a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800471e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004722:	2b00      	cmp	r3, #0
 8004724:	d003      	beq.n	800472e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 f929 	bl	800497e <UART_Transmit_IT>
    return;
 800472c:	e014      	b.n	8004758 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800472e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004736:	2b00      	cmp	r3, #0
 8004738:	d00e      	beq.n	8004758 <HAL_UART_IRQHandler+0x514>
 800473a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800473e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004742:	2b00      	cmp	r3, #0
 8004744:	d008      	beq.n	8004758 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 f969 	bl	8004a1e <UART_EndTransmit_IT>
    return;
 800474c:	e004      	b.n	8004758 <HAL_UART_IRQHandler+0x514>
    return;
 800474e:	bf00      	nop
 8004750:	e002      	b.n	8004758 <HAL_UART_IRQHandler+0x514>
      return;
 8004752:	bf00      	nop
 8004754:	e000      	b.n	8004758 <HAL_UART_IRQHandler+0x514>
      return;
 8004756:	bf00      	nop
  }
}
 8004758:	37e8      	adds	r7, #232	; 0xe8
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop

08004760 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004768:	bf00      	nop
 800476a:	370c      	adds	r7, #12
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr

08004774 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800477c:	bf00      	nop
 800477e:	370c      	adds	r7, #12
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004790:	bf00      	nop
 8004792:	370c      	adds	r7, #12
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	460b      	mov	r3, r1
 80047a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80047a8:	bf00      	nop
 80047aa:	370c      	adds	r7, #12
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b090      	sub	sp, #64	; 0x40
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	60b9      	str	r1, [r7, #8]
 80047be:	603b      	str	r3, [r7, #0]
 80047c0:	4613      	mov	r3, r2
 80047c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047c4:	e050      	b.n	8004868 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047cc:	d04c      	beq.n	8004868 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80047ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d007      	beq.n	80047e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80047d4:	f7fe fa22 	bl	8002c1c <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d241      	bcs.n	8004868 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	330c      	adds	r3, #12
 80047ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ee:	e853 3f00 	ldrex	r3, [r3]
 80047f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80047f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80047fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	330c      	adds	r3, #12
 8004802:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004804:	637a      	str	r2, [r7, #52]	; 0x34
 8004806:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004808:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800480a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800480c:	e841 2300 	strex	r3, r2, [r1]
 8004810:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004814:	2b00      	cmp	r3, #0
 8004816:	d1e5      	bne.n	80047e4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	3314      	adds	r3, #20
 800481e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	e853 3f00 	ldrex	r3, [r3]
 8004826:	613b      	str	r3, [r7, #16]
   return(result);
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	f023 0301 	bic.w	r3, r3, #1
 800482e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	3314      	adds	r3, #20
 8004836:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004838:	623a      	str	r2, [r7, #32]
 800483a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800483c:	69f9      	ldr	r1, [r7, #28]
 800483e:	6a3a      	ldr	r2, [r7, #32]
 8004840:	e841 2300 	strex	r3, r2, [r1]
 8004844:	61bb      	str	r3, [r7, #24]
   return(result);
 8004846:	69bb      	ldr	r3, [r7, #24]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d1e5      	bne.n	8004818 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2220      	movs	r2, #32
 8004850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2220      	movs	r2, #32
 8004858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2200      	movs	r2, #0
 8004860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004864:	2303      	movs	r3, #3
 8004866:	e00f      	b.n	8004888 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	4013      	ands	r3, r2
 8004872:	68ba      	ldr	r2, [r7, #8]
 8004874:	429a      	cmp	r2, r3
 8004876:	bf0c      	ite	eq
 8004878:	2301      	moveq	r3, #1
 800487a:	2300      	movne	r3, #0
 800487c:	b2db      	uxtb	r3, r3
 800487e:	461a      	mov	r2, r3
 8004880:	79fb      	ldrb	r3, [r7, #7]
 8004882:	429a      	cmp	r2, r3
 8004884:	d09f      	beq.n	80047c6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004886:	2300      	movs	r3, #0
}
 8004888:	4618      	mov	r0, r3
 800488a:	3740      	adds	r7, #64	; 0x40
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}

08004890 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004890:	b480      	push	{r7}
 8004892:	b095      	sub	sp, #84	; 0x54
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	330c      	adds	r3, #12
 800489e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048a2:	e853 3f00 	ldrex	r3, [r3]
 80048a6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80048a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	330c      	adds	r3, #12
 80048b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80048b8:	643a      	str	r2, [r7, #64]	; 0x40
 80048ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80048be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80048c0:	e841 2300 	strex	r3, r2, [r1]
 80048c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80048c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d1e5      	bne.n	8004898 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	3314      	adds	r3, #20
 80048d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d4:	6a3b      	ldr	r3, [r7, #32]
 80048d6:	e853 3f00 	ldrex	r3, [r3]
 80048da:	61fb      	str	r3, [r7, #28]
   return(result);
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	f023 0301 	bic.w	r3, r3, #1
 80048e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	3314      	adds	r3, #20
 80048ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80048ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80048f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048f4:	e841 2300 	strex	r3, r2, [r1]
 80048f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80048fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d1e5      	bne.n	80048cc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004904:	2b01      	cmp	r3, #1
 8004906:	d119      	bne.n	800493c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	330c      	adds	r3, #12
 800490e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	e853 3f00 	ldrex	r3, [r3]
 8004916:	60bb      	str	r3, [r7, #8]
   return(result);
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	f023 0310 	bic.w	r3, r3, #16
 800491e:	647b      	str	r3, [r7, #68]	; 0x44
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	330c      	adds	r3, #12
 8004926:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004928:	61ba      	str	r2, [r7, #24]
 800492a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800492c:	6979      	ldr	r1, [r7, #20]
 800492e:	69ba      	ldr	r2, [r7, #24]
 8004930:	e841 2300 	strex	r3, r2, [r1]
 8004934:	613b      	str	r3, [r7, #16]
   return(result);
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d1e5      	bne.n	8004908 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2220      	movs	r2, #32
 8004940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	631a      	str	r2, [r3, #48]	; 0x30
}
 800494a:	bf00      	nop
 800494c:	3754      	adds	r7, #84	; 0x54
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr

08004956 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004956:	b580      	push	{r7, lr}
 8004958:	b084      	sub	sp, #16
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004962:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2200      	movs	r2, #0
 8004968:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2200      	movs	r2, #0
 800496e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004970:	68f8      	ldr	r0, [r7, #12]
 8004972:	f7ff ff09 	bl	8004788 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004976:	bf00      	nop
 8004978:	3710      	adds	r7, #16
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}

0800497e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800497e:	b480      	push	{r7}
 8004980:	b085      	sub	sp, #20
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800498c:	b2db      	uxtb	r3, r3
 800498e:	2b21      	cmp	r3, #33	; 0x21
 8004990:	d13e      	bne.n	8004a10 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800499a:	d114      	bne.n	80049c6 <UART_Transmit_IT+0x48>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	691b      	ldr	r3, [r3, #16]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d110      	bne.n	80049c6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6a1b      	ldr	r3, [r3, #32]
 80049a8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	881b      	ldrh	r3, [r3, #0]
 80049ae:	461a      	mov	r2, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049b8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a1b      	ldr	r3, [r3, #32]
 80049be:	1c9a      	adds	r2, r3, #2
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	621a      	str	r2, [r3, #32]
 80049c4:	e008      	b.n	80049d8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a1b      	ldr	r3, [r3, #32]
 80049ca:	1c59      	adds	r1, r3, #1
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	6211      	str	r1, [r2, #32]
 80049d0:	781a      	ldrb	r2, [r3, #0]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049dc:	b29b      	uxth	r3, r3
 80049de:	3b01      	subs	r3, #1
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	4619      	mov	r1, r3
 80049e6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d10f      	bne.n	8004a0c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	68da      	ldr	r2, [r3, #12]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049fa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	68da      	ldr	r2, [r3, #12]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a0a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	e000      	b.n	8004a12 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004a10:	2302      	movs	r3, #2
  }
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3714      	adds	r7, #20
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr

08004a1e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a1e:	b580      	push	{r7, lr}
 8004a20:	b082      	sub	sp, #8
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	68da      	ldr	r2, [r3, #12]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a34:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2220      	movs	r2, #32
 8004a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f7ff fe8e 	bl	8004760 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3708      	adds	r7, #8
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}

08004a4e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004a4e:	b580      	push	{r7, lr}
 8004a50:	b08c      	sub	sp, #48	; 0x30
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	2b22      	cmp	r3, #34	; 0x22
 8004a60:	f040 80ab 	bne.w	8004bba <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a6c:	d117      	bne.n	8004a9e <UART_Receive_IT+0x50>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	691b      	ldr	r3, [r3, #16]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d113      	bne.n	8004a9e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004a76:	2300      	movs	r3, #0
 8004a78:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a7e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a8c:	b29a      	uxth	r2, r3
 8004a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a90:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a96:	1c9a      	adds	r2, r3, #2
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	629a      	str	r2, [r3, #40]	; 0x28
 8004a9c:	e026      	b.n	8004aec <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ab0:	d007      	beq.n	8004ac2 <UART_Receive_IT+0x74>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d10a      	bne.n	8004ad0 <UART_Receive_IT+0x82>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	691b      	ldr	r3, [r3, #16]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d106      	bne.n	8004ad0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	b2da      	uxtb	r2, r3
 8004aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004acc:	701a      	strb	r2, [r3, #0]
 8004ace:	e008      	b.n	8004ae2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004adc:	b2da      	uxtb	r2, r3
 8004ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ae0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae6:	1c5a      	adds	r2, r3, #1
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	3b01      	subs	r3, #1
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	4619      	mov	r1, r3
 8004afa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d15a      	bne.n	8004bb6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	68da      	ldr	r2, [r3, #12]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f022 0220 	bic.w	r2, r2, #32
 8004b0e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	68da      	ldr	r2, [r3, #12]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b1e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	695a      	ldr	r2, [r3, #20]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f022 0201 	bic.w	r2, r2, #1
 8004b2e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2220      	movs	r2, #32
 8004b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d135      	bne.n	8004bac <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	330c      	adds	r3, #12
 8004b4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	e853 3f00 	ldrex	r3, [r3]
 8004b54:	613b      	str	r3, [r7, #16]
   return(result);
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	f023 0310 	bic.w	r3, r3, #16
 8004b5c:	627b      	str	r3, [r7, #36]	; 0x24
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	330c      	adds	r3, #12
 8004b64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b66:	623a      	str	r2, [r7, #32]
 8004b68:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b6a:	69f9      	ldr	r1, [r7, #28]
 8004b6c:	6a3a      	ldr	r2, [r7, #32]
 8004b6e:	e841 2300 	strex	r3, r2, [r1]
 8004b72:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d1e5      	bne.n	8004b46 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0310 	and.w	r3, r3, #16
 8004b84:	2b10      	cmp	r3, #16
 8004b86:	d10a      	bne.n	8004b9e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b88:	2300      	movs	r3, #0
 8004b8a:	60fb      	str	r3, [r7, #12]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	60fb      	str	r3, [r7, #12]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	60fb      	str	r3, [r7, #12]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004ba2:	4619      	mov	r1, r3
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f7ff fdf9 	bl	800479c <HAL_UARTEx_RxEventCallback>
 8004baa:	e002      	b.n	8004bb2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f7ff fde1 	bl	8004774 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	e002      	b.n	8004bbc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	e000      	b.n	8004bbc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004bba:	2302      	movs	r3, #2
  }
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3730      	adds	r7, #48	; 0x30
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}

08004bc4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bc8:	b0c0      	sub	sp, #256	; 0x100
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	691b      	ldr	r3, [r3, #16]
 8004bd8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004be0:	68d9      	ldr	r1, [r3, #12]
 8004be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	ea40 0301 	orr.w	r3, r0, r1
 8004bec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bf2:	689a      	ldr	r2, [r3, #8]
 8004bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	431a      	orrs	r2, r3
 8004bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c00:	695b      	ldr	r3, [r3, #20]
 8004c02:	431a      	orrs	r2, r3
 8004c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c08:	69db      	ldr	r3, [r3, #28]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004c1c:	f021 010c 	bic.w	r1, r1, #12
 8004c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004c2a:	430b      	orrs	r3, r1
 8004c2c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	695b      	ldr	r3, [r3, #20]
 8004c36:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c3e:	6999      	ldr	r1, [r3, #24]
 8004c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	ea40 0301 	orr.w	r3, r0, r1
 8004c4a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	4b8f      	ldr	r3, [pc, #572]	; (8004e90 <UART_SetConfig+0x2cc>)
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d005      	beq.n	8004c64 <UART_SetConfig+0xa0>
 8004c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	4b8d      	ldr	r3, [pc, #564]	; (8004e94 <UART_SetConfig+0x2d0>)
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d104      	bne.n	8004c6e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c64:	f7ff f92a 	bl	8003ebc <HAL_RCC_GetPCLK2Freq>
 8004c68:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004c6c:	e003      	b.n	8004c76 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c6e:	f7ff f911 	bl	8003e94 <HAL_RCC_GetPCLK1Freq>
 8004c72:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c7a:	69db      	ldr	r3, [r3, #28]
 8004c7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c80:	f040 810c 	bne.w	8004e9c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004c8e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004c92:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004c96:	4622      	mov	r2, r4
 8004c98:	462b      	mov	r3, r5
 8004c9a:	1891      	adds	r1, r2, r2
 8004c9c:	65b9      	str	r1, [r7, #88]	; 0x58
 8004c9e:	415b      	adcs	r3, r3
 8004ca0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ca2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004ca6:	4621      	mov	r1, r4
 8004ca8:	eb12 0801 	adds.w	r8, r2, r1
 8004cac:	4629      	mov	r1, r5
 8004cae:	eb43 0901 	adc.w	r9, r3, r1
 8004cb2:	f04f 0200 	mov.w	r2, #0
 8004cb6:	f04f 0300 	mov.w	r3, #0
 8004cba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004cbe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004cc2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004cc6:	4690      	mov	r8, r2
 8004cc8:	4699      	mov	r9, r3
 8004cca:	4623      	mov	r3, r4
 8004ccc:	eb18 0303 	adds.w	r3, r8, r3
 8004cd0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004cd4:	462b      	mov	r3, r5
 8004cd6:	eb49 0303 	adc.w	r3, r9, r3
 8004cda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004cde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004cea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004cee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004cf2:	460b      	mov	r3, r1
 8004cf4:	18db      	adds	r3, r3, r3
 8004cf6:	653b      	str	r3, [r7, #80]	; 0x50
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	eb42 0303 	adc.w	r3, r2, r3
 8004cfe:	657b      	str	r3, [r7, #84]	; 0x54
 8004d00:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004d04:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004d08:	f7fb fac2 	bl	8000290 <__aeabi_uldivmod>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	460b      	mov	r3, r1
 8004d10:	4b61      	ldr	r3, [pc, #388]	; (8004e98 <UART_SetConfig+0x2d4>)
 8004d12:	fba3 2302 	umull	r2, r3, r3, r2
 8004d16:	095b      	lsrs	r3, r3, #5
 8004d18:	011c      	lsls	r4, r3, #4
 8004d1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d24:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004d28:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004d2c:	4642      	mov	r2, r8
 8004d2e:	464b      	mov	r3, r9
 8004d30:	1891      	adds	r1, r2, r2
 8004d32:	64b9      	str	r1, [r7, #72]	; 0x48
 8004d34:	415b      	adcs	r3, r3
 8004d36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d38:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004d3c:	4641      	mov	r1, r8
 8004d3e:	eb12 0a01 	adds.w	sl, r2, r1
 8004d42:	4649      	mov	r1, r9
 8004d44:	eb43 0b01 	adc.w	fp, r3, r1
 8004d48:	f04f 0200 	mov.w	r2, #0
 8004d4c:	f04f 0300 	mov.w	r3, #0
 8004d50:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004d54:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004d58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d5c:	4692      	mov	sl, r2
 8004d5e:	469b      	mov	fp, r3
 8004d60:	4643      	mov	r3, r8
 8004d62:	eb1a 0303 	adds.w	r3, sl, r3
 8004d66:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004d6a:	464b      	mov	r3, r9
 8004d6c:	eb4b 0303 	adc.w	r3, fp, r3
 8004d70:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004d80:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004d84:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004d88:	460b      	mov	r3, r1
 8004d8a:	18db      	adds	r3, r3, r3
 8004d8c:	643b      	str	r3, [r7, #64]	; 0x40
 8004d8e:	4613      	mov	r3, r2
 8004d90:	eb42 0303 	adc.w	r3, r2, r3
 8004d94:	647b      	str	r3, [r7, #68]	; 0x44
 8004d96:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004d9a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004d9e:	f7fb fa77 	bl	8000290 <__aeabi_uldivmod>
 8004da2:	4602      	mov	r2, r0
 8004da4:	460b      	mov	r3, r1
 8004da6:	4611      	mov	r1, r2
 8004da8:	4b3b      	ldr	r3, [pc, #236]	; (8004e98 <UART_SetConfig+0x2d4>)
 8004daa:	fba3 2301 	umull	r2, r3, r3, r1
 8004dae:	095b      	lsrs	r3, r3, #5
 8004db0:	2264      	movs	r2, #100	; 0x64
 8004db2:	fb02 f303 	mul.w	r3, r2, r3
 8004db6:	1acb      	subs	r3, r1, r3
 8004db8:	00db      	lsls	r3, r3, #3
 8004dba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004dbe:	4b36      	ldr	r3, [pc, #216]	; (8004e98 <UART_SetConfig+0x2d4>)
 8004dc0:	fba3 2302 	umull	r2, r3, r3, r2
 8004dc4:	095b      	lsrs	r3, r3, #5
 8004dc6:	005b      	lsls	r3, r3, #1
 8004dc8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004dcc:	441c      	add	r4, r3
 8004dce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004dd8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004ddc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004de0:	4642      	mov	r2, r8
 8004de2:	464b      	mov	r3, r9
 8004de4:	1891      	adds	r1, r2, r2
 8004de6:	63b9      	str	r1, [r7, #56]	; 0x38
 8004de8:	415b      	adcs	r3, r3
 8004dea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004dec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004df0:	4641      	mov	r1, r8
 8004df2:	1851      	adds	r1, r2, r1
 8004df4:	6339      	str	r1, [r7, #48]	; 0x30
 8004df6:	4649      	mov	r1, r9
 8004df8:	414b      	adcs	r3, r1
 8004dfa:	637b      	str	r3, [r7, #52]	; 0x34
 8004dfc:	f04f 0200 	mov.w	r2, #0
 8004e00:	f04f 0300 	mov.w	r3, #0
 8004e04:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004e08:	4659      	mov	r1, fp
 8004e0a:	00cb      	lsls	r3, r1, #3
 8004e0c:	4651      	mov	r1, sl
 8004e0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e12:	4651      	mov	r1, sl
 8004e14:	00ca      	lsls	r2, r1, #3
 8004e16:	4610      	mov	r0, r2
 8004e18:	4619      	mov	r1, r3
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	4642      	mov	r2, r8
 8004e1e:	189b      	adds	r3, r3, r2
 8004e20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004e24:	464b      	mov	r3, r9
 8004e26:	460a      	mov	r2, r1
 8004e28:	eb42 0303 	adc.w	r3, r2, r3
 8004e2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004e3c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004e40:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004e44:	460b      	mov	r3, r1
 8004e46:	18db      	adds	r3, r3, r3
 8004e48:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e4a:	4613      	mov	r3, r2
 8004e4c:	eb42 0303 	adc.w	r3, r2, r3
 8004e50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004e56:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004e5a:	f7fb fa19 	bl	8000290 <__aeabi_uldivmod>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	460b      	mov	r3, r1
 8004e62:	4b0d      	ldr	r3, [pc, #52]	; (8004e98 <UART_SetConfig+0x2d4>)
 8004e64:	fba3 1302 	umull	r1, r3, r3, r2
 8004e68:	095b      	lsrs	r3, r3, #5
 8004e6a:	2164      	movs	r1, #100	; 0x64
 8004e6c:	fb01 f303 	mul.w	r3, r1, r3
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	00db      	lsls	r3, r3, #3
 8004e74:	3332      	adds	r3, #50	; 0x32
 8004e76:	4a08      	ldr	r2, [pc, #32]	; (8004e98 <UART_SetConfig+0x2d4>)
 8004e78:	fba2 2303 	umull	r2, r3, r2, r3
 8004e7c:	095b      	lsrs	r3, r3, #5
 8004e7e:	f003 0207 	and.w	r2, r3, #7
 8004e82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4422      	add	r2, r4
 8004e8a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004e8c:	e105      	b.n	800509a <UART_SetConfig+0x4d6>
 8004e8e:	bf00      	nop
 8004e90:	40011000 	.word	0x40011000
 8004e94:	40011400 	.word	0x40011400
 8004e98:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004ea6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004eaa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004eae:	4642      	mov	r2, r8
 8004eb0:	464b      	mov	r3, r9
 8004eb2:	1891      	adds	r1, r2, r2
 8004eb4:	6239      	str	r1, [r7, #32]
 8004eb6:	415b      	adcs	r3, r3
 8004eb8:	627b      	str	r3, [r7, #36]	; 0x24
 8004eba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004ebe:	4641      	mov	r1, r8
 8004ec0:	1854      	adds	r4, r2, r1
 8004ec2:	4649      	mov	r1, r9
 8004ec4:	eb43 0501 	adc.w	r5, r3, r1
 8004ec8:	f04f 0200 	mov.w	r2, #0
 8004ecc:	f04f 0300 	mov.w	r3, #0
 8004ed0:	00eb      	lsls	r3, r5, #3
 8004ed2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ed6:	00e2      	lsls	r2, r4, #3
 8004ed8:	4614      	mov	r4, r2
 8004eda:	461d      	mov	r5, r3
 8004edc:	4643      	mov	r3, r8
 8004ede:	18e3      	adds	r3, r4, r3
 8004ee0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004ee4:	464b      	mov	r3, r9
 8004ee6:	eb45 0303 	adc.w	r3, r5, r3
 8004eea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004efa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004efe:	f04f 0200 	mov.w	r2, #0
 8004f02:	f04f 0300 	mov.w	r3, #0
 8004f06:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004f0a:	4629      	mov	r1, r5
 8004f0c:	008b      	lsls	r3, r1, #2
 8004f0e:	4621      	mov	r1, r4
 8004f10:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f14:	4621      	mov	r1, r4
 8004f16:	008a      	lsls	r2, r1, #2
 8004f18:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004f1c:	f7fb f9b8 	bl	8000290 <__aeabi_uldivmod>
 8004f20:	4602      	mov	r2, r0
 8004f22:	460b      	mov	r3, r1
 8004f24:	4b60      	ldr	r3, [pc, #384]	; (80050a8 <UART_SetConfig+0x4e4>)
 8004f26:	fba3 2302 	umull	r2, r3, r3, r2
 8004f2a:	095b      	lsrs	r3, r3, #5
 8004f2c:	011c      	lsls	r4, r3, #4
 8004f2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f32:	2200      	movs	r2, #0
 8004f34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004f38:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004f3c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004f40:	4642      	mov	r2, r8
 8004f42:	464b      	mov	r3, r9
 8004f44:	1891      	adds	r1, r2, r2
 8004f46:	61b9      	str	r1, [r7, #24]
 8004f48:	415b      	adcs	r3, r3
 8004f4a:	61fb      	str	r3, [r7, #28]
 8004f4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f50:	4641      	mov	r1, r8
 8004f52:	1851      	adds	r1, r2, r1
 8004f54:	6139      	str	r1, [r7, #16]
 8004f56:	4649      	mov	r1, r9
 8004f58:	414b      	adcs	r3, r1
 8004f5a:	617b      	str	r3, [r7, #20]
 8004f5c:	f04f 0200 	mov.w	r2, #0
 8004f60:	f04f 0300 	mov.w	r3, #0
 8004f64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f68:	4659      	mov	r1, fp
 8004f6a:	00cb      	lsls	r3, r1, #3
 8004f6c:	4651      	mov	r1, sl
 8004f6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f72:	4651      	mov	r1, sl
 8004f74:	00ca      	lsls	r2, r1, #3
 8004f76:	4610      	mov	r0, r2
 8004f78:	4619      	mov	r1, r3
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	4642      	mov	r2, r8
 8004f7e:	189b      	adds	r3, r3, r2
 8004f80:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004f84:	464b      	mov	r3, r9
 8004f86:	460a      	mov	r2, r1
 8004f88:	eb42 0303 	adc.w	r3, r2, r3
 8004f8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	67bb      	str	r3, [r7, #120]	; 0x78
 8004f9a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004f9c:	f04f 0200 	mov.w	r2, #0
 8004fa0:	f04f 0300 	mov.w	r3, #0
 8004fa4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004fa8:	4649      	mov	r1, r9
 8004faa:	008b      	lsls	r3, r1, #2
 8004fac:	4641      	mov	r1, r8
 8004fae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fb2:	4641      	mov	r1, r8
 8004fb4:	008a      	lsls	r2, r1, #2
 8004fb6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004fba:	f7fb f969 	bl	8000290 <__aeabi_uldivmod>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	460b      	mov	r3, r1
 8004fc2:	4b39      	ldr	r3, [pc, #228]	; (80050a8 <UART_SetConfig+0x4e4>)
 8004fc4:	fba3 1302 	umull	r1, r3, r3, r2
 8004fc8:	095b      	lsrs	r3, r3, #5
 8004fca:	2164      	movs	r1, #100	; 0x64
 8004fcc:	fb01 f303 	mul.w	r3, r1, r3
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	011b      	lsls	r3, r3, #4
 8004fd4:	3332      	adds	r3, #50	; 0x32
 8004fd6:	4a34      	ldr	r2, [pc, #208]	; (80050a8 <UART_SetConfig+0x4e4>)
 8004fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8004fdc:	095b      	lsrs	r3, r3, #5
 8004fde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fe2:	441c      	add	r4, r3
 8004fe4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fe8:	2200      	movs	r2, #0
 8004fea:	673b      	str	r3, [r7, #112]	; 0x70
 8004fec:	677a      	str	r2, [r7, #116]	; 0x74
 8004fee:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004ff2:	4642      	mov	r2, r8
 8004ff4:	464b      	mov	r3, r9
 8004ff6:	1891      	adds	r1, r2, r2
 8004ff8:	60b9      	str	r1, [r7, #8]
 8004ffa:	415b      	adcs	r3, r3
 8004ffc:	60fb      	str	r3, [r7, #12]
 8004ffe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005002:	4641      	mov	r1, r8
 8005004:	1851      	adds	r1, r2, r1
 8005006:	6039      	str	r1, [r7, #0]
 8005008:	4649      	mov	r1, r9
 800500a:	414b      	adcs	r3, r1
 800500c:	607b      	str	r3, [r7, #4]
 800500e:	f04f 0200 	mov.w	r2, #0
 8005012:	f04f 0300 	mov.w	r3, #0
 8005016:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800501a:	4659      	mov	r1, fp
 800501c:	00cb      	lsls	r3, r1, #3
 800501e:	4651      	mov	r1, sl
 8005020:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005024:	4651      	mov	r1, sl
 8005026:	00ca      	lsls	r2, r1, #3
 8005028:	4610      	mov	r0, r2
 800502a:	4619      	mov	r1, r3
 800502c:	4603      	mov	r3, r0
 800502e:	4642      	mov	r2, r8
 8005030:	189b      	adds	r3, r3, r2
 8005032:	66bb      	str	r3, [r7, #104]	; 0x68
 8005034:	464b      	mov	r3, r9
 8005036:	460a      	mov	r2, r1
 8005038:	eb42 0303 	adc.w	r3, r2, r3
 800503c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800503e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	663b      	str	r3, [r7, #96]	; 0x60
 8005048:	667a      	str	r2, [r7, #100]	; 0x64
 800504a:	f04f 0200 	mov.w	r2, #0
 800504e:	f04f 0300 	mov.w	r3, #0
 8005052:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005056:	4649      	mov	r1, r9
 8005058:	008b      	lsls	r3, r1, #2
 800505a:	4641      	mov	r1, r8
 800505c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005060:	4641      	mov	r1, r8
 8005062:	008a      	lsls	r2, r1, #2
 8005064:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005068:	f7fb f912 	bl	8000290 <__aeabi_uldivmod>
 800506c:	4602      	mov	r2, r0
 800506e:	460b      	mov	r3, r1
 8005070:	4b0d      	ldr	r3, [pc, #52]	; (80050a8 <UART_SetConfig+0x4e4>)
 8005072:	fba3 1302 	umull	r1, r3, r3, r2
 8005076:	095b      	lsrs	r3, r3, #5
 8005078:	2164      	movs	r1, #100	; 0x64
 800507a:	fb01 f303 	mul.w	r3, r1, r3
 800507e:	1ad3      	subs	r3, r2, r3
 8005080:	011b      	lsls	r3, r3, #4
 8005082:	3332      	adds	r3, #50	; 0x32
 8005084:	4a08      	ldr	r2, [pc, #32]	; (80050a8 <UART_SetConfig+0x4e4>)
 8005086:	fba2 2303 	umull	r2, r3, r2, r3
 800508a:	095b      	lsrs	r3, r3, #5
 800508c:	f003 020f 	and.w	r2, r3, #15
 8005090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4422      	add	r2, r4
 8005098:	609a      	str	r2, [r3, #8]
}
 800509a:	bf00      	nop
 800509c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80050a0:	46bd      	mov	sp, r7
 80050a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050a6:	bf00      	nop
 80050a8:	51eb851f 	.word	0x51eb851f

080050ac <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b087      	sub	sp, #28
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050c0:	683a      	ldr	r2, [r7, #0]
 80050c2:	6812      	ldr	r2, [r2, #0]
 80050c4:	f023 0101 	bic.w	r1, r3, #1
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	2b08      	cmp	r3, #8
 80050d4:	d102      	bne.n	80050dc <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80050d6:	2340      	movs	r3, #64	; 0x40
 80050d8:	617b      	str	r3, [r7, #20]
 80050da:	e001      	b.n	80050e0 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80050dc:	2300      	movs	r3, #0
 80050de:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80050ec:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80050f2:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80050f8:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80050fe:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8005104:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 800510a:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8005110:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8005116:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 800511c:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8005122:	4313      	orrs	r3, r2
 8005124:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	699b      	ldr	r3, [r3, #24]
 800512a:	693a      	ldr	r2, [r7, #16]
 800512c:	4313      	orrs	r3, r2
 800512e:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005134:	693a      	ldr	r2, [r7, #16]
 8005136:	4313      	orrs	r3, r2
 8005138:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 800513a:	4b10      	ldr	r3, [pc, #64]	; (800517c <FSMC_NORSRAM_Init+0xd0>)
 800513c:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005144:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800514c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	43db      	mvns	r3, r3
 800515c:	ea02 0103 	and.w	r1, r2, r3
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	4319      	orrs	r1, r3
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 800516e:	2300      	movs	r3, #0
}
 8005170:	4618      	mov	r0, r3
 8005172:	371c      	adds	r7, #28
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr
 800517c:	0008fb7f 	.word	0x0008fb7f

08005180 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005180:	b480      	push	{r7}
 8005182:	b085      	sub	sp, #20
 8005184:	af00      	add	r7, sp, #0
 8005186:	60f8      	str	r0, [r7, #12]
 8005188:	60b9      	str	r1, [r7, #8]
 800518a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	1c5a      	adds	r2, r3, #1
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005196:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	011b      	lsls	r3, r3, #4
 80051a4:	431a      	orrs	r2, r3
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	021b      	lsls	r3, r3, #8
 80051ac:	431a      	orrs	r2, r3
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	041b      	lsls	r3, r3, #16
 80051b4:	431a      	orrs	r2, r3
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	691b      	ldr	r3, [r3, #16]
 80051ba:	3b01      	subs	r3, #1
 80051bc:	051b      	lsls	r3, r3, #20
 80051be:	431a      	orrs	r2, r3
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	695b      	ldr	r3, [r3, #20]
 80051c4:	3b02      	subs	r3, #2
 80051c6:	061b      	lsls	r3, r3, #24
 80051c8:	431a      	orrs	r2, r3
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	699b      	ldr	r3, [r3, #24]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	3201      	adds	r2, #1
 80051d4:	4319      	orrs	r1, r3
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 80051dc:	2300      	movs	r3, #0
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3714      	adds	r7, #20
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr
	...

080051ec <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b085      	sub	sp, #20
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	60b9      	str	r1, [r7, #8]
 80051f6:	607a      	str	r2, [r7, #4]
 80051f8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005200:	d11d      	bne.n	800523e <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800520a:	4b13      	ldr	r3, [pc, #76]	; (8005258 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800520c:	4013      	ands	r3, r2
 800520e:	68ba      	ldr	r2, [r7, #8]
 8005210:	6811      	ldr	r1, [r2, #0]
 8005212:	68ba      	ldr	r2, [r7, #8]
 8005214:	6852      	ldr	r2, [r2, #4]
 8005216:	0112      	lsls	r2, r2, #4
 8005218:	4311      	orrs	r1, r2
 800521a:	68ba      	ldr	r2, [r7, #8]
 800521c:	6892      	ldr	r2, [r2, #8]
 800521e:	0212      	lsls	r2, r2, #8
 8005220:	4311      	orrs	r1, r2
 8005222:	68ba      	ldr	r2, [r7, #8]
 8005224:	6992      	ldr	r2, [r2, #24]
 8005226:	4311      	orrs	r1, r2
 8005228:	68ba      	ldr	r2, [r7, #8]
 800522a:	68d2      	ldr	r2, [r2, #12]
 800522c:	0412      	lsls	r2, r2, #16
 800522e:	430a      	orrs	r2, r1
 8005230:	ea43 0102 	orr.w	r1, r3, r2
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800523c:	e005      	b.n	800524a <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8005246:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800524a:	2300      	movs	r3, #0
}
 800524c:	4618      	mov	r0, r3
 800524e:	3714      	adds	r7, #20
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr
 8005258:	cff00000 	.word	0xcff00000

0800525c <atoi>:
 800525c:	220a      	movs	r2, #10
 800525e:	2100      	movs	r1, #0
 8005260:	f000 b8da 	b.w	8005418 <strtol>

08005264 <__errno>:
 8005264:	4b01      	ldr	r3, [pc, #4]	; (800526c <__errno+0x8>)
 8005266:	6818      	ldr	r0, [r3, #0]
 8005268:	4770      	bx	lr
 800526a:	bf00      	nop
 800526c:	20000014 	.word	0x20000014

08005270 <__libc_init_array>:
 8005270:	b570      	push	{r4, r5, r6, lr}
 8005272:	4d0d      	ldr	r5, [pc, #52]	; (80052a8 <__libc_init_array+0x38>)
 8005274:	4c0d      	ldr	r4, [pc, #52]	; (80052ac <__libc_init_array+0x3c>)
 8005276:	1b64      	subs	r4, r4, r5
 8005278:	10a4      	asrs	r4, r4, #2
 800527a:	2600      	movs	r6, #0
 800527c:	42a6      	cmp	r6, r4
 800527e:	d109      	bne.n	8005294 <__libc_init_array+0x24>
 8005280:	4d0b      	ldr	r5, [pc, #44]	; (80052b0 <__libc_init_array+0x40>)
 8005282:	4c0c      	ldr	r4, [pc, #48]	; (80052b4 <__libc_init_array+0x44>)
 8005284:	f001 f848 	bl	8006318 <_init>
 8005288:	1b64      	subs	r4, r4, r5
 800528a:	10a4      	asrs	r4, r4, #2
 800528c:	2600      	movs	r6, #0
 800528e:	42a6      	cmp	r6, r4
 8005290:	d105      	bne.n	800529e <__libc_init_array+0x2e>
 8005292:	bd70      	pop	{r4, r5, r6, pc}
 8005294:	f855 3b04 	ldr.w	r3, [r5], #4
 8005298:	4798      	blx	r3
 800529a:	3601      	adds	r6, #1
 800529c:	e7ee      	b.n	800527c <__libc_init_array+0xc>
 800529e:	f855 3b04 	ldr.w	r3, [r5], #4
 80052a2:	4798      	blx	r3
 80052a4:	3601      	adds	r6, #1
 80052a6:	e7f2      	b.n	800528e <__libc_init_array+0x1e>
 80052a8:	080068a4 	.word	0x080068a4
 80052ac:	080068a4 	.word	0x080068a4
 80052b0:	080068a4 	.word	0x080068a4
 80052b4:	080068a8 	.word	0x080068a8

080052b8 <memcpy>:
 80052b8:	440a      	add	r2, r1
 80052ba:	4291      	cmp	r1, r2
 80052bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80052c0:	d100      	bne.n	80052c4 <memcpy+0xc>
 80052c2:	4770      	bx	lr
 80052c4:	b510      	push	{r4, lr}
 80052c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80052ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80052ce:	4291      	cmp	r1, r2
 80052d0:	d1f9      	bne.n	80052c6 <memcpy+0xe>
 80052d2:	bd10      	pop	{r4, pc}

080052d4 <memset>:
 80052d4:	4402      	add	r2, r0
 80052d6:	4603      	mov	r3, r0
 80052d8:	4293      	cmp	r3, r2
 80052da:	d100      	bne.n	80052de <memset+0xa>
 80052dc:	4770      	bx	lr
 80052de:	f803 1b01 	strb.w	r1, [r3], #1
 80052e2:	e7f9      	b.n	80052d8 <memset+0x4>

080052e4 <iprintf>:
 80052e4:	b40f      	push	{r0, r1, r2, r3}
 80052e6:	4b0a      	ldr	r3, [pc, #40]	; (8005310 <iprintf+0x2c>)
 80052e8:	b513      	push	{r0, r1, r4, lr}
 80052ea:	681c      	ldr	r4, [r3, #0]
 80052ec:	b124      	cbz	r4, 80052f8 <iprintf+0x14>
 80052ee:	69a3      	ldr	r3, [r4, #24]
 80052f0:	b913      	cbnz	r3, 80052f8 <iprintf+0x14>
 80052f2:	4620      	mov	r0, r4
 80052f4:	f000 fa74 	bl	80057e0 <__sinit>
 80052f8:	ab05      	add	r3, sp, #20
 80052fa:	9a04      	ldr	r2, [sp, #16]
 80052fc:	68a1      	ldr	r1, [r4, #8]
 80052fe:	9301      	str	r3, [sp, #4]
 8005300:	4620      	mov	r0, r4
 8005302:	f000 fc7d 	bl	8005c00 <_vfiprintf_r>
 8005306:	b002      	add	sp, #8
 8005308:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800530c:	b004      	add	sp, #16
 800530e:	4770      	bx	lr
 8005310:	20000014 	.word	0x20000014

08005314 <_strtol_l.constprop.0>:
 8005314:	2b01      	cmp	r3, #1
 8005316:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800531a:	d001      	beq.n	8005320 <_strtol_l.constprop.0+0xc>
 800531c:	2b24      	cmp	r3, #36	; 0x24
 800531e:	d906      	bls.n	800532e <_strtol_l.constprop.0+0x1a>
 8005320:	f7ff ffa0 	bl	8005264 <__errno>
 8005324:	2316      	movs	r3, #22
 8005326:	6003      	str	r3, [r0, #0]
 8005328:	2000      	movs	r0, #0
 800532a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800532e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005414 <_strtol_l.constprop.0+0x100>
 8005332:	460d      	mov	r5, r1
 8005334:	462e      	mov	r6, r5
 8005336:	f815 4b01 	ldrb.w	r4, [r5], #1
 800533a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800533e:	f017 0708 	ands.w	r7, r7, #8
 8005342:	d1f7      	bne.n	8005334 <_strtol_l.constprop.0+0x20>
 8005344:	2c2d      	cmp	r4, #45	; 0x2d
 8005346:	d132      	bne.n	80053ae <_strtol_l.constprop.0+0x9a>
 8005348:	782c      	ldrb	r4, [r5, #0]
 800534a:	2701      	movs	r7, #1
 800534c:	1cb5      	adds	r5, r6, #2
 800534e:	2b00      	cmp	r3, #0
 8005350:	d05b      	beq.n	800540a <_strtol_l.constprop.0+0xf6>
 8005352:	2b10      	cmp	r3, #16
 8005354:	d109      	bne.n	800536a <_strtol_l.constprop.0+0x56>
 8005356:	2c30      	cmp	r4, #48	; 0x30
 8005358:	d107      	bne.n	800536a <_strtol_l.constprop.0+0x56>
 800535a:	782c      	ldrb	r4, [r5, #0]
 800535c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005360:	2c58      	cmp	r4, #88	; 0x58
 8005362:	d14d      	bne.n	8005400 <_strtol_l.constprop.0+0xec>
 8005364:	786c      	ldrb	r4, [r5, #1]
 8005366:	2310      	movs	r3, #16
 8005368:	3502      	adds	r5, #2
 800536a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800536e:	f108 38ff 	add.w	r8, r8, #4294967295
 8005372:	f04f 0c00 	mov.w	ip, #0
 8005376:	fbb8 f9f3 	udiv	r9, r8, r3
 800537a:	4666      	mov	r6, ip
 800537c:	fb03 8a19 	mls	sl, r3, r9, r8
 8005380:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8005384:	f1be 0f09 	cmp.w	lr, #9
 8005388:	d816      	bhi.n	80053b8 <_strtol_l.constprop.0+0xa4>
 800538a:	4674      	mov	r4, lr
 800538c:	42a3      	cmp	r3, r4
 800538e:	dd24      	ble.n	80053da <_strtol_l.constprop.0+0xc6>
 8005390:	f1bc 0f00 	cmp.w	ip, #0
 8005394:	db1e      	blt.n	80053d4 <_strtol_l.constprop.0+0xc0>
 8005396:	45b1      	cmp	r9, r6
 8005398:	d31c      	bcc.n	80053d4 <_strtol_l.constprop.0+0xc0>
 800539a:	d101      	bne.n	80053a0 <_strtol_l.constprop.0+0x8c>
 800539c:	45a2      	cmp	sl, r4
 800539e:	db19      	blt.n	80053d4 <_strtol_l.constprop.0+0xc0>
 80053a0:	fb06 4603 	mla	r6, r6, r3, r4
 80053a4:	f04f 0c01 	mov.w	ip, #1
 80053a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80053ac:	e7e8      	b.n	8005380 <_strtol_l.constprop.0+0x6c>
 80053ae:	2c2b      	cmp	r4, #43	; 0x2b
 80053b0:	bf04      	itt	eq
 80053b2:	782c      	ldrbeq	r4, [r5, #0]
 80053b4:	1cb5      	addeq	r5, r6, #2
 80053b6:	e7ca      	b.n	800534e <_strtol_l.constprop.0+0x3a>
 80053b8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80053bc:	f1be 0f19 	cmp.w	lr, #25
 80053c0:	d801      	bhi.n	80053c6 <_strtol_l.constprop.0+0xb2>
 80053c2:	3c37      	subs	r4, #55	; 0x37
 80053c4:	e7e2      	b.n	800538c <_strtol_l.constprop.0+0x78>
 80053c6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80053ca:	f1be 0f19 	cmp.w	lr, #25
 80053ce:	d804      	bhi.n	80053da <_strtol_l.constprop.0+0xc6>
 80053d0:	3c57      	subs	r4, #87	; 0x57
 80053d2:	e7db      	b.n	800538c <_strtol_l.constprop.0+0x78>
 80053d4:	f04f 3cff 	mov.w	ip, #4294967295
 80053d8:	e7e6      	b.n	80053a8 <_strtol_l.constprop.0+0x94>
 80053da:	f1bc 0f00 	cmp.w	ip, #0
 80053de:	da05      	bge.n	80053ec <_strtol_l.constprop.0+0xd8>
 80053e0:	2322      	movs	r3, #34	; 0x22
 80053e2:	6003      	str	r3, [r0, #0]
 80053e4:	4646      	mov	r6, r8
 80053e6:	b942      	cbnz	r2, 80053fa <_strtol_l.constprop.0+0xe6>
 80053e8:	4630      	mov	r0, r6
 80053ea:	e79e      	b.n	800532a <_strtol_l.constprop.0+0x16>
 80053ec:	b107      	cbz	r7, 80053f0 <_strtol_l.constprop.0+0xdc>
 80053ee:	4276      	negs	r6, r6
 80053f0:	2a00      	cmp	r2, #0
 80053f2:	d0f9      	beq.n	80053e8 <_strtol_l.constprop.0+0xd4>
 80053f4:	f1bc 0f00 	cmp.w	ip, #0
 80053f8:	d000      	beq.n	80053fc <_strtol_l.constprop.0+0xe8>
 80053fa:	1e69      	subs	r1, r5, #1
 80053fc:	6011      	str	r1, [r2, #0]
 80053fe:	e7f3      	b.n	80053e8 <_strtol_l.constprop.0+0xd4>
 8005400:	2430      	movs	r4, #48	; 0x30
 8005402:	2b00      	cmp	r3, #0
 8005404:	d1b1      	bne.n	800536a <_strtol_l.constprop.0+0x56>
 8005406:	2308      	movs	r3, #8
 8005408:	e7af      	b.n	800536a <_strtol_l.constprop.0+0x56>
 800540a:	2c30      	cmp	r4, #48	; 0x30
 800540c:	d0a5      	beq.n	800535a <_strtol_l.constprop.0+0x46>
 800540e:	230a      	movs	r3, #10
 8005410:	e7ab      	b.n	800536a <_strtol_l.constprop.0+0x56>
 8005412:	bf00      	nop
 8005414:	08006705 	.word	0x08006705

08005418 <strtol>:
 8005418:	4613      	mov	r3, r2
 800541a:	460a      	mov	r2, r1
 800541c:	4601      	mov	r1, r0
 800541e:	4802      	ldr	r0, [pc, #8]	; (8005428 <strtol+0x10>)
 8005420:	6800      	ldr	r0, [r0, #0]
 8005422:	f7ff bf77 	b.w	8005314 <_strtol_l.constprop.0>
 8005426:	bf00      	nop
 8005428:	20000014 	.word	0x20000014

0800542c <__swbuf_r>:
 800542c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800542e:	460e      	mov	r6, r1
 8005430:	4614      	mov	r4, r2
 8005432:	4605      	mov	r5, r0
 8005434:	b118      	cbz	r0, 800543e <__swbuf_r+0x12>
 8005436:	6983      	ldr	r3, [r0, #24]
 8005438:	b90b      	cbnz	r3, 800543e <__swbuf_r+0x12>
 800543a:	f000 f9d1 	bl	80057e0 <__sinit>
 800543e:	4b21      	ldr	r3, [pc, #132]	; (80054c4 <__swbuf_r+0x98>)
 8005440:	429c      	cmp	r4, r3
 8005442:	d12b      	bne.n	800549c <__swbuf_r+0x70>
 8005444:	686c      	ldr	r4, [r5, #4]
 8005446:	69a3      	ldr	r3, [r4, #24]
 8005448:	60a3      	str	r3, [r4, #8]
 800544a:	89a3      	ldrh	r3, [r4, #12]
 800544c:	071a      	lsls	r2, r3, #28
 800544e:	d52f      	bpl.n	80054b0 <__swbuf_r+0x84>
 8005450:	6923      	ldr	r3, [r4, #16]
 8005452:	b36b      	cbz	r3, 80054b0 <__swbuf_r+0x84>
 8005454:	6923      	ldr	r3, [r4, #16]
 8005456:	6820      	ldr	r0, [r4, #0]
 8005458:	1ac0      	subs	r0, r0, r3
 800545a:	6963      	ldr	r3, [r4, #20]
 800545c:	b2f6      	uxtb	r6, r6
 800545e:	4283      	cmp	r3, r0
 8005460:	4637      	mov	r7, r6
 8005462:	dc04      	bgt.n	800546e <__swbuf_r+0x42>
 8005464:	4621      	mov	r1, r4
 8005466:	4628      	mov	r0, r5
 8005468:	f000 f926 	bl	80056b8 <_fflush_r>
 800546c:	bb30      	cbnz	r0, 80054bc <__swbuf_r+0x90>
 800546e:	68a3      	ldr	r3, [r4, #8]
 8005470:	3b01      	subs	r3, #1
 8005472:	60a3      	str	r3, [r4, #8]
 8005474:	6823      	ldr	r3, [r4, #0]
 8005476:	1c5a      	adds	r2, r3, #1
 8005478:	6022      	str	r2, [r4, #0]
 800547a:	701e      	strb	r6, [r3, #0]
 800547c:	6963      	ldr	r3, [r4, #20]
 800547e:	3001      	adds	r0, #1
 8005480:	4283      	cmp	r3, r0
 8005482:	d004      	beq.n	800548e <__swbuf_r+0x62>
 8005484:	89a3      	ldrh	r3, [r4, #12]
 8005486:	07db      	lsls	r3, r3, #31
 8005488:	d506      	bpl.n	8005498 <__swbuf_r+0x6c>
 800548a:	2e0a      	cmp	r6, #10
 800548c:	d104      	bne.n	8005498 <__swbuf_r+0x6c>
 800548e:	4621      	mov	r1, r4
 8005490:	4628      	mov	r0, r5
 8005492:	f000 f911 	bl	80056b8 <_fflush_r>
 8005496:	b988      	cbnz	r0, 80054bc <__swbuf_r+0x90>
 8005498:	4638      	mov	r0, r7
 800549a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800549c:	4b0a      	ldr	r3, [pc, #40]	; (80054c8 <__swbuf_r+0x9c>)
 800549e:	429c      	cmp	r4, r3
 80054a0:	d101      	bne.n	80054a6 <__swbuf_r+0x7a>
 80054a2:	68ac      	ldr	r4, [r5, #8]
 80054a4:	e7cf      	b.n	8005446 <__swbuf_r+0x1a>
 80054a6:	4b09      	ldr	r3, [pc, #36]	; (80054cc <__swbuf_r+0xa0>)
 80054a8:	429c      	cmp	r4, r3
 80054aa:	bf08      	it	eq
 80054ac:	68ec      	ldreq	r4, [r5, #12]
 80054ae:	e7ca      	b.n	8005446 <__swbuf_r+0x1a>
 80054b0:	4621      	mov	r1, r4
 80054b2:	4628      	mov	r0, r5
 80054b4:	f000 f80c 	bl	80054d0 <__swsetup_r>
 80054b8:	2800      	cmp	r0, #0
 80054ba:	d0cb      	beq.n	8005454 <__swbuf_r+0x28>
 80054bc:	f04f 37ff 	mov.w	r7, #4294967295
 80054c0:	e7ea      	b.n	8005498 <__swbuf_r+0x6c>
 80054c2:	bf00      	nop
 80054c4:	08006828 	.word	0x08006828
 80054c8:	08006848 	.word	0x08006848
 80054cc:	08006808 	.word	0x08006808

080054d0 <__swsetup_r>:
 80054d0:	4b32      	ldr	r3, [pc, #200]	; (800559c <__swsetup_r+0xcc>)
 80054d2:	b570      	push	{r4, r5, r6, lr}
 80054d4:	681d      	ldr	r5, [r3, #0]
 80054d6:	4606      	mov	r6, r0
 80054d8:	460c      	mov	r4, r1
 80054da:	b125      	cbz	r5, 80054e6 <__swsetup_r+0x16>
 80054dc:	69ab      	ldr	r3, [r5, #24]
 80054de:	b913      	cbnz	r3, 80054e6 <__swsetup_r+0x16>
 80054e0:	4628      	mov	r0, r5
 80054e2:	f000 f97d 	bl	80057e0 <__sinit>
 80054e6:	4b2e      	ldr	r3, [pc, #184]	; (80055a0 <__swsetup_r+0xd0>)
 80054e8:	429c      	cmp	r4, r3
 80054ea:	d10f      	bne.n	800550c <__swsetup_r+0x3c>
 80054ec:	686c      	ldr	r4, [r5, #4]
 80054ee:	89a3      	ldrh	r3, [r4, #12]
 80054f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80054f4:	0719      	lsls	r1, r3, #28
 80054f6:	d42c      	bmi.n	8005552 <__swsetup_r+0x82>
 80054f8:	06dd      	lsls	r5, r3, #27
 80054fa:	d411      	bmi.n	8005520 <__swsetup_r+0x50>
 80054fc:	2309      	movs	r3, #9
 80054fe:	6033      	str	r3, [r6, #0]
 8005500:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005504:	81a3      	strh	r3, [r4, #12]
 8005506:	f04f 30ff 	mov.w	r0, #4294967295
 800550a:	e03e      	b.n	800558a <__swsetup_r+0xba>
 800550c:	4b25      	ldr	r3, [pc, #148]	; (80055a4 <__swsetup_r+0xd4>)
 800550e:	429c      	cmp	r4, r3
 8005510:	d101      	bne.n	8005516 <__swsetup_r+0x46>
 8005512:	68ac      	ldr	r4, [r5, #8]
 8005514:	e7eb      	b.n	80054ee <__swsetup_r+0x1e>
 8005516:	4b24      	ldr	r3, [pc, #144]	; (80055a8 <__swsetup_r+0xd8>)
 8005518:	429c      	cmp	r4, r3
 800551a:	bf08      	it	eq
 800551c:	68ec      	ldreq	r4, [r5, #12]
 800551e:	e7e6      	b.n	80054ee <__swsetup_r+0x1e>
 8005520:	0758      	lsls	r0, r3, #29
 8005522:	d512      	bpl.n	800554a <__swsetup_r+0x7a>
 8005524:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005526:	b141      	cbz	r1, 800553a <__swsetup_r+0x6a>
 8005528:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800552c:	4299      	cmp	r1, r3
 800552e:	d002      	beq.n	8005536 <__swsetup_r+0x66>
 8005530:	4630      	mov	r0, r6
 8005532:	f000 fa5b 	bl	80059ec <_free_r>
 8005536:	2300      	movs	r3, #0
 8005538:	6363      	str	r3, [r4, #52]	; 0x34
 800553a:	89a3      	ldrh	r3, [r4, #12]
 800553c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005540:	81a3      	strh	r3, [r4, #12]
 8005542:	2300      	movs	r3, #0
 8005544:	6063      	str	r3, [r4, #4]
 8005546:	6923      	ldr	r3, [r4, #16]
 8005548:	6023      	str	r3, [r4, #0]
 800554a:	89a3      	ldrh	r3, [r4, #12]
 800554c:	f043 0308 	orr.w	r3, r3, #8
 8005550:	81a3      	strh	r3, [r4, #12]
 8005552:	6923      	ldr	r3, [r4, #16]
 8005554:	b94b      	cbnz	r3, 800556a <__swsetup_r+0x9a>
 8005556:	89a3      	ldrh	r3, [r4, #12]
 8005558:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800555c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005560:	d003      	beq.n	800556a <__swsetup_r+0x9a>
 8005562:	4621      	mov	r1, r4
 8005564:	4630      	mov	r0, r6
 8005566:	f000 fa01 	bl	800596c <__smakebuf_r>
 800556a:	89a0      	ldrh	r0, [r4, #12]
 800556c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005570:	f010 0301 	ands.w	r3, r0, #1
 8005574:	d00a      	beq.n	800558c <__swsetup_r+0xbc>
 8005576:	2300      	movs	r3, #0
 8005578:	60a3      	str	r3, [r4, #8]
 800557a:	6963      	ldr	r3, [r4, #20]
 800557c:	425b      	negs	r3, r3
 800557e:	61a3      	str	r3, [r4, #24]
 8005580:	6923      	ldr	r3, [r4, #16]
 8005582:	b943      	cbnz	r3, 8005596 <__swsetup_r+0xc6>
 8005584:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005588:	d1ba      	bne.n	8005500 <__swsetup_r+0x30>
 800558a:	bd70      	pop	{r4, r5, r6, pc}
 800558c:	0781      	lsls	r1, r0, #30
 800558e:	bf58      	it	pl
 8005590:	6963      	ldrpl	r3, [r4, #20]
 8005592:	60a3      	str	r3, [r4, #8]
 8005594:	e7f4      	b.n	8005580 <__swsetup_r+0xb0>
 8005596:	2000      	movs	r0, #0
 8005598:	e7f7      	b.n	800558a <__swsetup_r+0xba>
 800559a:	bf00      	nop
 800559c:	20000014 	.word	0x20000014
 80055a0:	08006828 	.word	0x08006828
 80055a4:	08006848 	.word	0x08006848
 80055a8:	08006808 	.word	0x08006808

080055ac <__sflush_r>:
 80055ac:	898a      	ldrh	r2, [r1, #12]
 80055ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055b2:	4605      	mov	r5, r0
 80055b4:	0710      	lsls	r0, r2, #28
 80055b6:	460c      	mov	r4, r1
 80055b8:	d458      	bmi.n	800566c <__sflush_r+0xc0>
 80055ba:	684b      	ldr	r3, [r1, #4]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	dc05      	bgt.n	80055cc <__sflush_r+0x20>
 80055c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	dc02      	bgt.n	80055cc <__sflush_r+0x20>
 80055c6:	2000      	movs	r0, #0
 80055c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80055ce:	2e00      	cmp	r6, #0
 80055d0:	d0f9      	beq.n	80055c6 <__sflush_r+0x1a>
 80055d2:	2300      	movs	r3, #0
 80055d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80055d8:	682f      	ldr	r7, [r5, #0]
 80055da:	602b      	str	r3, [r5, #0]
 80055dc:	d032      	beq.n	8005644 <__sflush_r+0x98>
 80055de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80055e0:	89a3      	ldrh	r3, [r4, #12]
 80055e2:	075a      	lsls	r2, r3, #29
 80055e4:	d505      	bpl.n	80055f2 <__sflush_r+0x46>
 80055e6:	6863      	ldr	r3, [r4, #4]
 80055e8:	1ac0      	subs	r0, r0, r3
 80055ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80055ec:	b10b      	cbz	r3, 80055f2 <__sflush_r+0x46>
 80055ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80055f0:	1ac0      	subs	r0, r0, r3
 80055f2:	2300      	movs	r3, #0
 80055f4:	4602      	mov	r2, r0
 80055f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80055f8:	6a21      	ldr	r1, [r4, #32]
 80055fa:	4628      	mov	r0, r5
 80055fc:	47b0      	blx	r6
 80055fe:	1c43      	adds	r3, r0, #1
 8005600:	89a3      	ldrh	r3, [r4, #12]
 8005602:	d106      	bne.n	8005612 <__sflush_r+0x66>
 8005604:	6829      	ldr	r1, [r5, #0]
 8005606:	291d      	cmp	r1, #29
 8005608:	d82c      	bhi.n	8005664 <__sflush_r+0xb8>
 800560a:	4a2a      	ldr	r2, [pc, #168]	; (80056b4 <__sflush_r+0x108>)
 800560c:	40ca      	lsrs	r2, r1
 800560e:	07d6      	lsls	r6, r2, #31
 8005610:	d528      	bpl.n	8005664 <__sflush_r+0xb8>
 8005612:	2200      	movs	r2, #0
 8005614:	6062      	str	r2, [r4, #4]
 8005616:	04d9      	lsls	r1, r3, #19
 8005618:	6922      	ldr	r2, [r4, #16]
 800561a:	6022      	str	r2, [r4, #0]
 800561c:	d504      	bpl.n	8005628 <__sflush_r+0x7c>
 800561e:	1c42      	adds	r2, r0, #1
 8005620:	d101      	bne.n	8005626 <__sflush_r+0x7a>
 8005622:	682b      	ldr	r3, [r5, #0]
 8005624:	b903      	cbnz	r3, 8005628 <__sflush_r+0x7c>
 8005626:	6560      	str	r0, [r4, #84]	; 0x54
 8005628:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800562a:	602f      	str	r7, [r5, #0]
 800562c:	2900      	cmp	r1, #0
 800562e:	d0ca      	beq.n	80055c6 <__sflush_r+0x1a>
 8005630:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005634:	4299      	cmp	r1, r3
 8005636:	d002      	beq.n	800563e <__sflush_r+0x92>
 8005638:	4628      	mov	r0, r5
 800563a:	f000 f9d7 	bl	80059ec <_free_r>
 800563e:	2000      	movs	r0, #0
 8005640:	6360      	str	r0, [r4, #52]	; 0x34
 8005642:	e7c1      	b.n	80055c8 <__sflush_r+0x1c>
 8005644:	6a21      	ldr	r1, [r4, #32]
 8005646:	2301      	movs	r3, #1
 8005648:	4628      	mov	r0, r5
 800564a:	47b0      	blx	r6
 800564c:	1c41      	adds	r1, r0, #1
 800564e:	d1c7      	bne.n	80055e0 <__sflush_r+0x34>
 8005650:	682b      	ldr	r3, [r5, #0]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d0c4      	beq.n	80055e0 <__sflush_r+0x34>
 8005656:	2b1d      	cmp	r3, #29
 8005658:	d001      	beq.n	800565e <__sflush_r+0xb2>
 800565a:	2b16      	cmp	r3, #22
 800565c:	d101      	bne.n	8005662 <__sflush_r+0xb6>
 800565e:	602f      	str	r7, [r5, #0]
 8005660:	e7b1      	b.n	80055c6 <__sflush_r+0x1a>
 8005662:	89a3      	ldrh	r3, [r4, #12]
 8005664:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005668:	81a3      	strh	r3, [r4, #12]
 800566a:	e7ad      	b.n	80055c8 <__sflush_r+0x1c>
 800566c:	690f      	ldr	r7, [r1, #16]
 800566e:	2f00      	cmp	r7, #0
 8005670:	d0a9      	beq.n	80055c6 <__sflush_r+0x1a>
 8005672:	0793      	lsls	r3, r2, #30
 8005674:	680e      	ldr	r6, [r1, #0]
 8005676:	bf08      	it	eq
 8005678:	694b      	ldreq	r3, [r1, #20]
 800567a:	600f      	str	r7, [r1, #0]
 800567c:	bf18      	it	ne
 800567e:	2300      	movne	r3, #0
 8005680:	eba6 0807 	sub.w	r8, r6, r7
 8005684:	608b      	str	r3, [r1, #8]
 8005686:	f1b8 0f00 	cmp.w	r8, #0
 800568a:	dd9c      	ble.n	80055c6 <__sflush_r+0x1a>
 800568c:	6a21      	ldr	r1, [r4, #32]
 800568e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005690:	4643      	mov	r3, r8
 8005692:	463a      	mov	r2, r7
 8005694:	4628      	mov	r0, r5
 8005696:	47b0      	blx	r6
 8005698:	2800      	cmp	r0, #0
 800569a:	dc06      	bgt.n	80056aa <__sflush_r+0xfe>
 800569c:	89a3      	ldrh	r3, [r4, #12]
 800569e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056a2:	81a3      	strh	r3, [r4, #12]
 80056a4:	f04f 30ff 	mov.w	r0, #4294967295
 80056a8:	e78e      	b.n	80055c8 <__sflush_r+0x1c>
 80056aa:	4407      	add	r7, r0
 80056ac:	eba8 0800 	sub.w	r8, r8, r0
 80056b0:	e7e9      	b.n	8005686 <__sflush_r+0xda>
 80056b2:	bf00      	nop
 80056b4:	20400001 	.word	0x20400001

080056b8 <_fflush_r>:
 80056b8:	b538      	push	{r3, r4, r5, lr}
 80056ba:	690b      	ldr	r3, [r1, #16]
 80056bc:	4605      	mov	r5, r0
 80056be:	460c      	mov	r4, r1
 80056c0:	b913      	cbnz	r3, 80056c8 <_fflush_r+0x10>
 80056c2:	2500      	movs	r5, #0
 80056c4:	4628      	mov	r0, r5
 80056c6:	bd38      	pop	{r3, r4, r5, pc}
 80056c8:	b118      	cbz	r0, 80056d2 <_fflush_r+0x1a>
 80056ca:	6983      	ldr	r3, [r0, #24]
 80056cc:	b90b      	cbnz	r3, 80056d2 <_fflush_r+0x1a>
 80056ce:	f000 f887 	bl	80057e0 <__sinit>
 80056d2:	4b14      	ldr	r3, [pc, #80]	; (8005724 <_fflush_r+0x6c>)
 80056d4:	429c      	cmp	r4, r3
 80056d6:	d11b      	bne.n	8005710 <_fflush_r+0x58>
 80056d8:	686c      	ldr	r4, [r5, #4]
 80056da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d0ef      	beq.n	80056c2 <_fflush_r+0xa>
 80056e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80056e4:	07d0      	lsls	r0, r2, #31
 80056e6:	d404      	bmi.n	80056f2 <_fflush_r+0x3a>
 80056e8:	0599      	lsls	r1, r3, #22
 80056ea:	d402      	bmi.n	80056f2 <_fflush_r+0x3a>
 80056ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80056ee:	f000 f915 	bl	800591c <__retarget_lock_acquire_recursive>
 80056f2:	4628      	mov	r0, r5
 80056f4:	4621      	mov	r1, r4
 80056f6:	f7ff ff59 	bl	80055ac <__sflush_r>
 80056fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80056fc:	07da      	lsls	r2, r3, #31
 80056fe:	4605      	mov	r5, r0
 8005700:	d4e0      	bmi.n	80056c4 <_fflush_r+0xc>
 8005702:	89a3      	ldrh	r3, [r4, #12]
 8005704:	059b      	lsls	r3, r3, #22
 8005706:	d4dd      	bmi.n	80056c4 <_fflush_r+0xc>
 8005708:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800570a:	f000 f908 	bl	800591e <__retarget_lock_release_recursive>
 800570e:	e7d9      	b.n	80056c4 <_fflush_r+0xc>
 8005710:	4b05      	ldr	r3, [pc, #20]	; (8005728 <_fflush_r+0x70>)
 8005712:	429c      	cmp	r4, r3
 8005714:	d101      	bne.n	800571a <_fflush_r+0x62>
 8005716:	68ac      	ldr	r4, [r5, #8]
 8005718:	e7df      	b.n	80056da <_fflush_r+0x22>
 800571a:	4b04      	ldr	r3, [pc, #16]	; (800572c <_fflush_r+0x74>)
 800571c:	429c      	cmp	r4, r3
 800571e:	bf08      	it	eq
 8005720:	68ec      	ldreq	r4, [r5, #12]
 8005722:	e7da      	b.n	80056da <_fflush_r+0x22>
 8005724:	08006828 	.word	0x08006828
 8005728:	08006848 	.word	0x08006848
 800572c:	08006808 	.word	0x08006808

08005730 <std>:
 8005730:	2300      	movs	r3, #0
 8005732:	b510      	push	{r4, lr}
 8005734:	4604      	mov	r4, r0
 8005736:	e9c0 3300 	strd	r3, r3, [r0]
 800573a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800573e:	6083      	str	r3, [r0, #8]
 8005740:	8181      	strh	r1, [r0, #12]
 8005742:	6643      	str	r3, [r0, #100]	; 0x64
 8005744:	81c2      	strh	r2, [r0, #14]
 8005746:	6183      	str	r3, [r0, #24]
 8005748:	4619      	mov	r1, r3
 800574a:	2208      	movs	r2, #8
 800574c:	305c      	adds	r0, #92	; 0x5c
 800574e:	f7ff fdc1 	bl	80052d4 <memset>
 8005752:	4b05      	ldr	r3, [pc, #20]	; (8005768 <std+0x38>)
 8005754:	6263      	str	r3, [r4, #36]	; 0x24
 8005756:	4b05      	ldr	r3, [pc, #20]	; (800576c <std+0x3c>)
 8005758:	62a3      	str	r3, [r4, #40]	; 0x28
 800575a:	4b05      	ldr	r3, [pc, #20]	; (8005770 <std+0x40>)
 800575c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800575e:	4b05      	ldr	r3, [pc, #20]	; (8005774 <std+0x44>)
 8005760:	6224      	str	r4, [r4, #32]
 8005762:	6323      	str	r3, [r4, #48]	; 0x30
 8005764:	bd10      	pop	{r4, pc}
 8005766:	bf00      	nop
 8005768:	080061a9 	.word	0x080061a9
 800576c:	080061cb 	.word	0x080061cb
 8005770:	08006203 	.word	0x08006203
 8005774:	08006227 	.word	0x08006227

08005778 <_cleanup_r>:
 8005778:	4901      	ldr	r1, [pc, #4]	; (8005780 <_cleanup_r+0x8>)
 800577a:	f000 b8af 	b.w	80058dc <_fwalk_reent>
 800577e:	bf00      	nop
 8005780:	080056b9 	.word	0x080056b9

08005784 <__sfmoreglue>:
 8005784:	b570      	push	{r4, r5, r6, lr}
 8005786:	2268      	movs	r2, #104	; 0x68
 8005788:	1e4d      	subs	r5, r1, #1
 800578a:	4355      	muls	r5, r2
 800578c:	460e      	mov	r6, r1
 800578e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005792:	f000 f997 	bl	8005ac4 <_malloc_r>
 8005796:	4604      	mov	r4, r0
 8005798:	b140      	cbz	r0, 80057ac <__sfmoreglue+0x28>
 800579a:	2100      	movs	r1, #0
 800579c:	e9c0 1600 	strd	r1, r6, [r0]
 80057a0:	300c      	adds	r0, #12
 80057a2:	60a0      	str	r0, [r4, #8]
 80057a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80057a8:	f7ff fd94 	bl	80052d4 <memset>
 80057ac:	4620      	mov	r0, r4
 80057ae:	bd70      	pop	{r4, r5, r6, pc}

080057b0 <__sfp_lock_acquire>:
 80057b0:	4801      	ldr	r0, [pc, #4]	; (80057b8 <__sfp_lock_acquire+0x8>)
 80057b2:	f000 b8b3 	b.w	800591c <__retarget_lock_acquire_recursive>
 80057b6:	bf00      	nop
 80057b8:	20002ea1 	.word	0x20002ea1

080057bc <__sfp_lock_release>:
 80057bc:	4801      	ldr	r0, [pc, #4]	; (80057c4 <__sfp_lock_release+0x8>)
 80057be:	f000 b8ae 	b.w	800591e <__retarget_lock_release_recursive>
 80057c2:	bf00      	nop
 80057c4:	20002ea1 	.word	0x20002ea1

080057c8 <__sinit_lock_acquire>:
 80057c8:	4801      	ldr	r0, [pc, #4]	; (80057d0 <__sinit_lock_acquire+0x8>)
 80057ca:	f000 b8a7 	b.w	800591c <__retarget_lock_acquire_recursive>
 80057ce:	bf00      	nop
 80057d0:	20002ea2 	.word	0x20002ea2

080057d4 <__sinit_lock_release>:
 80057d4:	4801      	ldr	r0, [pc, #4]	; (80057dc <__sinit_lock_release+0x8>)
 80057d6:	f000 b8a2 	b.w	800591e <__retarget_lock_release_recursive>
 80057da:	bf00      	nop
 80057dc:	20002ea2 	.word	0x20002ea2

080057e0 <__sinit>:
 80057e0:	b510      	push	{r4, lr}
 80057e2:	4604      	mov	r4, r0
 80057e4:	f7ff fff0 	bl	80057c8 <__sinit_lock_acquire>
 80057e8:	69a3      	ldr	r3, [r4, #24]
 80057ea:	b11b      	cbz	r3, 80057f4 <__sinit+0x14>
 80057ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057f0:	f7ff bff0 	b.w	80057d4 <__sinit_lock_release>
 80057f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80057f8:	6523      	str	r3, [r4, #80]	; 0x50
 80057fa:	4b13      	ldr	r3, [pc, #76]	; (8005848 <__sinit+0x68>)
 80057fc:	4a13      	ldr	r2, [pc, #76]	; (800584c <__sinit+0x6c>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	62a2      	str	r2, [r4, #40]	; 0x28
 8005802:	42a3      	cmp	r3, r4
 8005804:	bf04      	itt	eq
 8005806:	2301      	moveq	r3, #1
 8005808:	61a3      	streq	r3, [r4, #24]
 800580a:	4620      	mov	r0, r4
 800580c:	f000 f820 	bl	8005850 <__sfp>
 8005810:	6060      	str	r0, [r4, #4]
 8005812:	4620      	mov	r0, r4
 8005814:	f000 f81c 	bl	8005850 <__sfp>
 8005818:	60a0      	str	r0, [r4, #8]
 800581a:	4620      	mov	r0, r4
 800581c:	f000 f818 	bl	8005850 <__sfp>
 8005820:	2200      	movs	r2, #0
 8005822:	60e0      	str	r0, [r4, #12]
 8005824:	2104      	movs	r1, #4
 8005826:	6860      	ldr	r0, [r4, #4]
 8005828:	f7ff ff82 	bl	8005730 <std>
 800582c:	68a0      	ldr	r0, [r4, #8]
 800582e:	2201      	movs	r2, #1
 8005830:	2109      	movs	r1, #9
 8005832:	f7ff ff7d 	bl	8005730 <std>
 8005836:	68e0      	ldr	r0, [r4, #12]
 8005838:	2202      	movs	r2, #2
 800583a:	2112      	movs	r1, #18
 800583c:	f7ff ff78 	bl	8005730 <std>
 8005840:	2301      	movs	r3, #1
 8005842:	61a3      	str	r3, [r4, #24]
 8005844:	e7d2      	b.n	80057ec <__sinit+0xc>
 8005846:	bf00      	nop
 8005848:	08006700 	.word	0x08006700
 800584c:	08005779 	.word	0x08005779

08005850 <__sfp>:
 8005850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005852:	4607      	mov	r7, r0
 8005854:	f7ff ffac 	bl	80057b0 <__sfp_lock_acquire>
 8005858:	4b1e      	ldr	r3, [pc, #120]	; (80058d4 <__sfp+0x84>)
 800585a:	681e      	ldr	r6, [r3, #0]
 800585c:	69b3      	ldr	r3, [r6, #24]
 800585e:	b913      	cbnz	r3, 8005866 <__sfp+0x16>
 8005860:	4630      	mov	r0, r6
 8005862:	f7ff ffbd 	bl	80057e0 <__sinit>
 8005866:	3648      	adds	r6, #72	; 0x48
 8005868:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800586c:	3b01      	subs	r3, #1
 800586e:	d503      	bpl.n	8005878 <__sfp+0x28>
 8005870:	6833      	ldr	r3, [r6, #0]
 8005872:	b30b      	cbz	r3, 80058b8 <__sfp+0x68>
 8005874:	6836      	ldr	r6, [r6, #0]
 8005876:	e7f7      	b.n	8005868 <__sfp+0x18>
 8005878:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800587c:	b9d5      	cbnz	r5, 80058b4 <__sfp+0x64>
 800587e:	4b16      	ldr	r3, [pc, #88]	; (80058d8 <__sfp+0x88>)
 8005880:	60e3      	str	r3, [r4, #12]
 8005882:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005886:	6665      	str	r5, [r4, #100]	; 0x64
 8005888:	f000 f847 	bl	800591a <__retarget_lock_init_recursive>
 800588c:	f7ff ff96 	bl	80057bc <__sfp_lock_release>
 8005890:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005894:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005898:	6025      	str	r5, [r4, #0]
 800589a:	61a5      	str	r5, [r4, #24]
 800589c:	2208      	movs	r2, #8
 800589e:	4629      	mov	r1, r5
 80058a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80058a4:	f7ff fd16 	bl	80052d4 <memset>
 80058a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80058ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80058b0:	4620      	mov	r0, r4
 80058b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058b4:	3468      	adds	r4, #104	; 0x68
 80058b6:	e7d9      	b.n	800586c <__sfp+0x1c>
 80058b8:	2104      	movs	r1, #4
 80058ba:	4638      	mov	r0, r7
 80058bc:	f7ff ff62 	bl	8005784 <__sfmoreglue>
 80058c0:	4604      	mov	r4, r0
 80058c2:	6030      	str	r0, [r6, #0]
 80058c4:	2800      	cmp	r0, #0
 80058c6:	d1d5      	bne.n	8005874 <__sfp+0x24>
 80058c8:	f7ff ff78 	bl	80057bc <__sfp_lock_release>
 80058cc:	230c      	movs	r3, #12
 80058ce:	603b      	str	r3, [r7, #0]
 80058d0:	e7ee      	b.n	80058b0 <__sfp+0x60>
 80058d2:	bf00      	nop
 80058d4:	08006700 	.word	0x08006700
 80058d8:	ffff0001 	.word	0xffff0001

080058dc <_fwalk_reent>:
 80058dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058e0:	4606      	mov	r6, r0
 80058e2:	4688      	mov	r8, r1
 80058e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80058e8:	2700      	movs	r7, #0
 80058ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80058ee:	f1b9 0901 	subs.w	r9, r9, #1
 80058f2:	d505      	bpl.n	8005900 <_fwalk_reent+0x24>
 80058f4:	6824      	ldr	r4, [r4, #0]
 80058f6:	2c00      	cmp	r4, #0
 80058f8:	d1f7      	bne.n	80058ea <_fwalk_reent+0xe>
 80058fa:	4638      	mov	r0, r7
 80058fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005900:	89ab      	ldrh	r3, [r5, #12]
 8005902:	2b01      	cmp	r3, #1
 8005904:	d907      	bls.n	8005916 <_fwalk_reent+0x3a>
 8005906:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800590a:	3301      	adds	r3, #1
 800590c:	d003      	beq.n	8005916 <_fwalk_reent+0x3a>
 800590e:	4629      	mov	r1, r5
 8005910:	4630      	mov	r0, r6
 8005912:	47c0      	blx	r8
 8005914:	4307      	orrs	r7, r0
 8005916:	3568      	adds	r5, #104	; 0x68
 8005918:	e7e9      	b.n	80058ee <_fwalk_reent+0x12>

0800591a <__retarget_lock_init_recursive>:
 800591a:	4770      	bx	lr

0800591c <__retarget_lock_acquire_recursive>:
 800591c:	4770      	bx	lr

0800591e <__retarget_lock_release_recursive>:
 800591e:	4770      	bx	lr

08005920 <__swhatbuf_r>:
 8005920:	b570      	push	{r4, r5, r6, lr}
 8005922:	460e      	mov	r6, r1
 8005924:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005928:	2900      	cmp	r1, #0
 800592a:	b096      	sub	sp, #88	; 0x58
 800592c:	4614      	mov	r4, r2
 800592e:	461d      	mov	r5, r3
 8005930:	da08      	bge.n	8005944 <__swhatbuf_r+0x24>
 8005932:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005936:	2200      	movs	r2, #0
 8005938:	602a      	str	r2, [r5, #0]
 800593a:	061a      	lsls	r2, r3, #24
 800593c:	d410      	bmi.n	8005960 <__swhatbuf_r+0x40>
 800593e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005942:	e00e      	b.n	8005962 <__swhatbuf_r+0x42>
 8005944:	466a      	mov	r2, sp
 8005946:	f000 fc95 	bl	8006274 <_fstat_r>
 800594a:	2800      	cmp	r0, #0
 800594c:	dbf1      	blt.n	8005932 <__swhatbuf_r+0x12>
 800594e:	9a01      	ldr	r2, [sp, #4]
 8005950:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005954:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005958:	425a      	negs	r2, r3
 800595a:	415a      	adcs	r2, r3
 800595c:	602a      	str	r2, [r5, #0]
 800595e:	e7ee      	b.n	800593e <__swhatbuf_r+0x1e>
 8005960:	2340      	movs	r3, #64	; 0x40
 8005962:	2000      	movs	r0, #0
 8005964:	6023      	str	r3, [r4, #0]
 8005966:	b016      	add	sp, #88	; 0x58
 8005968:	bd70      	pop	{r4, r5, r6, pc}
	...

0800596c <__smakebuf_r>:
 800596c:	898b      	ldrh	r3, [r1, #12]
 800596e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005970:	079d      	lsls	r5, r3, #30
 8005972:	4606      	mov	r6, r0
 8005974:	460c      	mov	r4, r1
 8005976:	d507      	bpl.n	8005988 <__smakebuf_r+0x1c>
 8005978:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800597c:	6023      	str	r3, [r4, #0]
 800597e:	6123      	str	r3, [r4, #16]
 8005980:	2301      	movs	r3, #1
 8005982:	6163      	str	r3, [r4, #20]
 8005984:	b002      	add	sp, #8
 8005986:	bd70      	pop	{r4, r5, r6, pc}
 8005988:	ab01      	add	r3, sp, #4
 800598a:	466a      	mov	r2, sp
 800598c:	f7ff ffc8 	bl	8005920 <__swhatbuf_r>
 8005990:	9900      	ldr	r1, [sp, #0]
 8005992:	4605      	mov	r5, r0
 8005994:	4630      	mov	r0, r6
 8005996:	f000 f895 	bl	8005ac4 <_malloc_r>
 800599a:	b948      	cbnz	r0, 80059b0 <__smakebuf_r+0x44>
 800599c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059a0:	059a      	lsls	r2, r3, #22
 80059a2:	d4ef      	bmi.n	8005984 <__smakebuf_r+0x18>
 80059a4:	f023 0303 	bic.w	r3, r3, #3
 80059a8:	f043 0302 	orr.w	r3, r3, #2
 80059ac:	81a3      	strh	r3, [r4, #12]
 80059ae:	e7e3      	b.n	8005978 <__smakebuf_r+0xc>
 80059b0:	4b0d      	ldr	r3, [pc, #52]	; (80059e8 <__smakebuf_r+0x7c>)
 80059b2:	62b3      	str	r3, [r6, #40]	; 0x28
 80059b4:	89a3      	ldrh	r3, [r4, #12]
 80059b6:	6020      	str	r0, [r4, #0]
 80059b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059bc:	81a3      	strh	r3, [r4, #12]
 80059be:	9b00      	ldr	r3, [sp, #0]
 80059c0:	6163      	str	r3, [r4, #20]
 80059c2:	9b01      	ldr	r3, [sp, #4]
 80059c4:	6120      	str	r0, [r4, #16]
 80059c6:	b15b      	cbz	r3, 80059e0 <__smakebuf_r+0x74>
 80059c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80059cc:	4630      	mov	r0, r6
 80059ce:	f000 fc63 	bl	8006298 <_isatty_r>
 80059d2:	b128      	cbz	r0, 80059e0 <__smakebuf_r+0x74>
 80059d4:	89a3      	ldrh	r3, [r4, #12]
 80059d6:	f023 0303 	bic.w	r3, r3, #3
 80059da:	f043 0301 	orr.w	r3, r3, #1
 80059de:	81a3      	strh	r3, [r4, #12]
 80059e0:	89a0      	ldrh	r0, [r4, #12]
 80059e2:	4305      	orrs	r5, r0
 80059e4:	81a5      	strh	r5, [r4, #12]
 80059e6:	e7cd      	b.n	8005984 <__smakebuf_r+0x18>
 80059e8:	08005779 	.word	0x08005779

080059ec <_free_r>:
 80059ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80059ee:	2900      	cmp	r1, #0
 80059f0:	d044      	beq.n	8005a7c <_free_r+0x90>
 80059f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059f6:	9001      	str	r0, [sp, #4]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	f1a1 0404 	sub.w	r4, r1, #4
 80059fe:	bfb8      	it	lt
 8005a00:	18e4      	addlt	r4, r4, r3
 8005a02:	f000 fc6b 	bl	80062dc <__malloc_lock>
 8005a06:	4a1e      	ldr	r2, [pc, #120]	; (8005a80 <_free_r+0x94>)
 8005a08:	9801      	ldr	r0, [sp, #4]
 8005a0a:	6813      	ldr	r3, [r2, #0]
 8005a0c:	b933      	cbnz	r3, 8005a1c <_free_r+0x30>
 8005a0e:	6063      	str	r3, [r4, #4]
 8005a10:	6014      	str	r4, [r2, #0]
 8005a12:	b003      	add	sp, #12
 8005a14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005a18:	f000 bc66 	b.w	80062e8 <__malloc_unlock>
 8005a1c:	42a3      	cmp	r3, r4
 8005a1e:	d908      	bls.n	8005a32 <_free_r+0x46>
 8005a20:	6825      	ldr	r5, [r4, #0]
 8005a22:	1961      	adds	r1, r4, r5
 8005a24:	428b      	cmp	r3, r1
 8005a26:	bf01      	itttt	eq
 8005a28:	6819      	ldreq	r1, [r3, #0]
 8005a2a:	685b      	ldreq	r3, [r3, #4]
 8005a2c:	1949      	addeq	r1, r1, r5
 8005a2e:	6021      	streq	r1, [r4, #0]
 8005a30:	e7ed      	b.n	8005a0e <_free_r+0x22>
 8005a32:	461a      	mov	r2, r3
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	b10b      	cbz	r3, 8005a3c <_free_r+0x50>
 8005a38:	42a3      	cmp	r3, r4
 8005a3a:	d9fa      	bls.n	8005a32 <_free_r+0x46>
 8005a3c:	6811      	ldr	r1, [r2, #0]
 8005a3e:	1855      	adds	r5, r2, r1
 8005a40:	42a5      	cmp	r5, r4
 8005a42:	d10b      	bne.n	8005a5c <_free_r+0x70>
 8005a44:	6824      	ldr	r4, [r4, #0]
 8005a46:	4421      	add	r1, r4
 8005a48:	1854      	adds	r4, r2, r1
 8005a4a:	42a3      	cmp	r3, r4
 8005a4c:	6011      	str	r1, [r2, #0]
 8005a4e:	d1e0      	bne.n	8005a12 <_free_r+0x26>
 8005a50:	681c      	ldr	r4, [r3, #0]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	6053      	str	r3, [r2, #4]
 8005a56:	4421      	add	r1, r4
 8005a58:	6011      	str	r1, [r2, #0]
 8005a5a:	e7da      	b.n	8005a12 <_free_r+0x26>
 8005a5c:	d902      	bls.n	8005a64 <_free_r+0x78>
 8005a5e:	230c      	movs	r3, #12
 8005a60:	6003      	str	r3, [r0, #0]
 8005a62:	e7d6      	b.n	8005a12 <_free_r+0x26>
 8005a64:	6825      	ldr	r5, [r4, #0]
 8005a66:	1961      	adds	r1, r4, r5
 8005a68:	428b      	cmp	r3, r1
 8005a6a:	bf04      	itt	eq
 8005a6c:	6819      	ldreq	r1, [r3, #0]
 8005a6e:	685b      	ldreq	r3, [r3, #4]
 8005a70:	6063      	str	r3, [r4, #4]
 8005a72:	bf04      	itt	eq
 8005a74:	1949      	addeq	r1, r1, r5
 8005a76:	6021      	streq	r1, [r4, #0]
 8005a78:	6054      	str	r4, [r2, #4]
 8005a7a:	e7ca      	b.n	8005a12 <_free_r+0x26>
 8005a7c:	b003      	add	sp, #12
 8005a7e:	bd30      	pop	{r4, r5, pc}
 8005a80:	20002ea4 	.word	0x20002ea4

08005a84 <sbrk_aligned>:
 8005a84:	b570      	push	{r4, r5, r6, lr}
 8005a86:	4e0e      	ldr	r6, [pc, #56]	; (8005ac0 <sbrk_aligned+0x3c>)
 8005a88:	460c      	mov	r4, r1
 8005a8a:	6831      	ldr	r1, [r6, #0]
 8005a8c:	4605      	mov	r5, r0
 8005a8e:	b911      	cbnz	r1, 8005a96 <sbrk_aligned+0x12>
 8005a90:	f000 fb7a 	bl	8006188 <_sbrk_r>
 8005a94:	6030      	str	r0, [r6, #0]
 8005a96:	4621      	mov	r1, r4
 8005a98:	4628      	mov	r0, r5
 8005a9a:	f000 fb75 	bl	8006188 <_sbrk_r>
 8005a9e:	1c43      	adds	r3, r0, #1
 8005aa0:	d00a      	beq.n	8005ab8 <sbrk_aligned+0x34>
 8005aa2:	1cc4      	adds	r4, r0, #3
 8005aa4:	f024 0403 	bic.w	r4, r4, #3
 8005aa8:	42a0      	cmp	r0, r4
 8005aaa:	d007      	beq.n	8005abc <sbrk_aligned+0x38>
 8005aac:	1a21      	subs	r1, r4, r0
 8005aae:	4628      	mov	r0, r5
 8005ab0:	f000 fb6a 	bl	8006188 <_sbrk_r>
 8005ab4:	3001      	adds	r0, #1
 8005ab6:	d101      	bne.n	8005abc <sbrk_aligned+0x38>
 8005ab8:	f04f 34ff 	mov.w	r4, #4294967295
 8005abc:	4620      	mov	r0, r4
 8005abe:	bd70      	pop	{r4, r5, r6, pc}
 8005ac0:	20002ea8 	.word	0x20002ea8

08005ac4 <_malloc_r>:
 8005ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ac8:	1ccd      	adds	r5, r1, #3
 8005aca:	f025 0503 	bic.w	r5, r5, #3
 8005ace:	3508      	adds	r5, #8
 8005ad0:	2d0c      	cmp	r5, #12
 8005ad2:	bf38      	it	cc
 8005ad4:	250c      	movcc	r5, #12
 8005ad6:	2d00      	cmp	r5, #0
 8005ad8:	4607      	mov	r7, r0
 8005ada:	db01      	blt.n	8005ae0 <_malloc_r+0x1c>
 8005adc:	42a9      	cmp	r1, r5
 8005ade:	d905      	bls.n	8005aec <_malloc_r+0x28>
 8005ae0:	230c      	movs	r3, #12
 8005ae2:	603b      	str	r3, [r7, #0]
 8005ae4:	2600      	movs	r6, #0
 8005ae6:	4630      	mov	r0, r6
 8005ae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005aec:	4e2e      	ldr	r6, [pc, #184]	; (8005ba8 <_malloc_r+0xe4>)
 8005aee:	f000 fbf5 	bl	80062dc <__malloc_lock>
 8005af2:	6833      	ldr	r3, [r6, #0]
 8005af4:	461c      	mov	r4, r3
 8005af6:	bb34      	cbnz	r4, 8005b46 <_malloc_r+0x82>
 8005af8:	4629      	mov	r1, r5
 8005afa:	4638      	mov	r0, r7
 8005afc:	f7ff ffc2 	bl	8005a84 <sbrk_aligned>
 8005b00:	1c43      	adds	r3, r0, #1
 8005b02:	4604      	mov	r4, r0
 8005b04:	d14d      	bne.n	8005ba2 <_malloc_r+0xde>
 8005b06:	6834      	ldr	r4, [r6, #0]
 8005b08:	4626      	mov	r6, r4
 8005b0a:	2e00      	cmp	r6, #0
 8005b0c:	d140      	bne.n	8005b90 <_malloc_r+0xcc>
 8005b0e:	6823      	ldr	r3, [r4, #0]
 8005b10:	4631      	mov	r1, r6
 8005b12:	4638      	mov	r0, r7
 8005b14:	eb04 0803 	add.w	r8, r4, r3
 8005b18:	f000 fb36 	bl	8006188 <_sbrk_r>
 8005b1c:	4580      	cmp	r8, r0
 8005b1e:	d13a      	bne.n	8005b96 <_malloc_r+0xd2>
 8005b20:	6821      	ldr	r1, [r4, #0]
 8005b22:	3503      	adds	r5, #3
 8005b24:	1a6d      	subs	r5, r5, r1
 8005b26:	f025 0503 	bic.w	r5, r5, #3
 8005b2a:	3508      	adds	r5, #8
 8005b2c:	2d0c      	cmp	r5, #12
 8005b2e:	bf38      	it	cc
 8005b30:	250c      	movcc	r5, #12
 8005b32:	4629      	mov	r1, r5
 8005b34:	4638      	mov	r0, r7
 8005b36:	f7ff ffa5 	bl	8005a84 <sbrk_aligned>
 8005b3a:	3001      	adds	r0, #1
 8005b3c:	d02b      	beq.n	8005b96 <_malloc_r+0xd2>
 8005b3e:	6823      	ldr	r3, [r4, #0]
 8005b40:	442b      	add	r3, r5
 8005b42:	6023      	str	r3, [r4, #0]
 8005b44:	e00e      	b.n	8005b64 <_malloc_r+0xa0>
 8005b46:	6822      	ldr	r2, [r4, #0]
 8005b48:	1b52      	subs	r2, r2, r5
 8005b4a:	d41e      	bmi.n	8005b8a <_malloc_r+0xc6>
 8005b4c:	2a0b      	cmp	r2, #11
 8005b4e:	d916      	bls.n	8005b7e <_malloc_r+0xba>
 8005b50:	1961      	adds	r1, r4, r5
 8005b52:	42a3      	cmp	r3, r4
 8005b54:	6025      	str	r5, [r4, #0]
 8005b56:	bf18      	it	ne
 8005b58:	6059      	strne	r1, [r3, #4]
 8005b5a:	6863      	ldr	r3, [r4, #4]
 8005b5c:	bf08      	it	eq
 8005b5e:	6031      	streq	r1, [r6, #0]
 8005b60:	5162      	str	r2, [r4, r5]
 8005b62:	604b      	str	r3, [r1, #4]
 8005b64:	4638      	mov	r0, r7
 8005b66:	f104 060b 	add.w	r6, r4, #11
 8005b6a:	f000 fbbd 	bl	80062e8 <__malloc_unlock>
 8005b6e:	f026 0607 	bic.w	r6, r6, #7
 8005b72:	1d23      	adds	r3, r4, #4
 8005b74:	1af2      	subs	r2, r6, r3
 8005b76:	d0b6      	beq.n	8005ae6 <_malloc_r+0x22>
 8005b78:	1b9b      	subs	r3, r3, r6
 8005b7a:	50a3      	str	r3, [r4, r2]
 8005b7c:	e7b3      	b.n	8005ae6 <_malloc_r+0x22>
 8005b7e:	6862      	ldr	r2, [r4, #4]
 8005b80:	42a3      	cmp	r3, r4
 8005b82:	bf0c      	ite	eq
 8005b84:	6032      	streq	r2, [r6, #0]
 8005b86:	605a      	strne	r2, [r3, #4]
 8005b88:	e7ec      	b.n	8005b64 <_malloc_r+0xa0>
 8005b8a:	4623      	mov	r3, r4
 8005b8c:	6864      	ldr	r4, [r4, #4]
 8005b8e:	e7b2      	b.n	8005af6 <_malloc_r+0x32>
 8005b90:	4634      	mov	r4, r6
 8005b92:	6876      	ldr	r6, [r6, #4]
 8005b94:	e7b9      	b.n	8005b0a <_malloc_r+0x46>
 8005b96:	230c      	movs	r3, #12
 8005b98:	603b      	str	r3, [r7, #0]
 8005b9a:	4638      	mov	r0, r7
 8005b9c:	f000 fba4 	bl	80062e8 <__malloc_unlock>
 8005ba0:	e7a1      	b.n	8005ae6 <_malloc_r+0x22>
 8005ba2:	6025      	str	r5, [r4, #0]
 8005ba4:	e7de      	b.n	8005b64 <_malloc_r+0xa0>
 8005ba6:	bf00      	nop
 8005ba8:	20002ea4 	.word	0x20002ea4

08005bac <__sfputc_r>:
 8005bac:	6893      	ldr	r3, [r2, #8]
 8005bae:	3b01      	subs	r3, #1
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	b410      	push	{r4}
 8005bb4:	6093      	str	r3, [r2, #8]
 8005bb6:	da08      	bge.n	8005bca <__sfputc_r+0x1e>
 8005bb8:	6994      	ldr	r4, [r2, #24]
 8005bba:	42a3      	cmp	r3, r4
 8005bbc:	db01      	blt.n	8005bc2 <__sfputc_r+0x16>
 8005bbe:	290a      	cmp	r1, #10
 8005bc0:	d103      	bne.n	8005bca <__sfputc_r+0x1e>
 8005bc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005bc6:	f7ff bc31 	b.w	800542c <__swbuf_r>
 8005bca:	6813      	ldr	r3, [r2, #0]
 8005bcc:	1c58      	adds	r0, r3, #1
 8005bce:	6010      	str	r0, [r2, #0]
 8005bd0:	7019      	strb	r1, [r3, #0]
 8005bd2:	4608      	mov	r0, r1
 8005bd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005bd8:	4770      	bx	lr

08005bda <__sfputs_r>:
 8005bda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bdc:	4606      	mov	r6, r0
 8005bde:	460f      	mov	r7, r1
 8005be0:	4614      	mov	r4, r2
 8005be2:	18d5      	adds	r5, r2, r3
 8005be4:	42ac      	cmp	r4, r5
 8005be6:	d101      	bne.n	8005bec <__sfputs_r+0x12>
 8005be8:	2000      	movs	r0, #0
 8005bea:	e007      	b.n	8005bfc <__sfputs_r+0x22>
 8005bec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bf0:	463a      	mov	r2, r7
 8005bf2:	4630      	mov	r0, r6
 8005bf4:	f7ff ffda 	bl	8005bac <__sfputc_r>
 8005bf8:	1c43      	adds	r3, r0, #1
 8005bfa:	d1f3      	bne.n	8005be4 <__sfputs_r+0xa>
 8005bfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005c00 <_vfiprintf_r>:
 8005c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c04:	460d      	mov	r5, r1
 8005c06:	b09d      	sub	sp, #116	; 0x74
 8005c08:	4614      	mov	r4, r2
 8005c0a:	4698      	mov	r8, r3
 8005c0c:	4606      	mov	r6, r0
 8005c0e:	b118      	cbz	r0, 8005c18 <_vfiprintf_r+0x18>
 8005c10:	6983      	ldr	r3, [r0, #24]
 8005c12:	b90b      	cbnz	r3, 8005c18 <_vfiprintf_r+0x18>
 8005c14:	f7ff fde4 	bl	80057e0 <__sinit>
 8005c18:	4b89      	ldr	r3, [pc, #548]	; (8005e40 <_vfiprintf_r+0x240>)
 8005c1a:	429d      	cmp	r5, r3
 8005c1c:	d11b      	bne.n	8005c56 <_vfiprintf_r+0x56>
 8005c1e:	6875      	ldr	r5, [r6, #4]
 8005c20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c22:	07d9      	lsls	r1, r3, #31
 8005c24:	d405      	bmi.n	8005c32 <_vfiprintf_r+0x32>
 8005c26:	89ab      	ldrh	r3, [r5, #12]
 8005c28:	059a      	lsls	r2, r3, #22
 8005c2a:	d402      	bmi.n	8005c32 <_vfiprintf_r+0x32>
 8005c2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c2e:	f7ff fe75 	bl	800591c <__retarget_lock_acquire_recursive>
 8005c32:	89ab      	ldrh	r3, [r5, #12]
 8005c34:	071b      	lsls	r3, r3, #28
 8005c36:	d501      	bpl.n	8005c3c <_vfiprintf_r+0x3c>
 8005c38:	692b      	ldr	r3, [r5, #16]
 8005c3a:	b9eb      	cbnz	r3, 8005c78 <_vfiprintf_r+0x78>
 8005c3c:	4629      	mov	r1, r5
 8005c3e:	4630      	mov	r0, r6
 8005c40:	f7ff fc46 	bl	80054d0 <__swsetup_r>
 8005c44:	b1c0      	cbz	r0, 8005c78 <_vfiprintf_r+0x78>
 8005c46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c48:	07dc      	lsls	r4, r3, #31
 8005c4a:	d50e      	bpl.n	8005c6a <_vfiprintf_r+0x6a>
 8005c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c50:	b01d      	add	sp, #116	; 0x74
 8005c52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c56:	4b7b      	ldr	r3, [pc, #492]	; (8005e44 <_vfiprintf_r+0x244>)
 8005c58:	429d      	cmp	r5, r3
 8005c5a:	d101      	bne.n	8005c60 <_vfiprintf_r+0x60>
 8005c5c:	68b5      	ldr	r5, [r6, #8]
 8005c5e:	e7df      	b.n	8005c20 <_vfiprintf_r+0x20>
 8005c60:	4b79      	ldr	r3, [pc, #484]	; (8005e48 <_vfiprintf_r+0x248>)
 8005c62:	429d      	cmp	r5, r3
 8005c64:	bf08      	it	eq
 8005c66:	68f5      	ldreq	r5, [r6, #12]
 8005c68:	e7da      	b.n	8005c20 <_vfiprintf_r+0x20>
 8005c6a:	89ab      	ldrh	r3, [r5, #12]
 8005c6c:	0598      	lsls	r0, r3, #22
 8005c6e:	d4ed      	bmi.n	8005c4c <_vfiprintf_r+0x4c>
 8005c70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c72:	f7ff fe54 	bl	800591e <__retarget_lock_release_recursive>
 8005c76:	e7e9      	b.n	8005c4c <_vfiprintf_r+0x4c>
 8005c78:	2300      	movs	r3, #0
 8005c7a:	9309      	str	r3, [sp, #36]	; 0x24
 8005c7c:	2320      	movs	r3, #32
 8005c7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005c82:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c86:	2330      	movs	r3, #48	; 0x30
 8005c88:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005e4c <_vfiprintf_r+0x24c>
 8005c8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005c90:	f04f 0901 	mov.w	r9, #1
 8005c94:	4623      	mov	r3, r4
 8005c96:	469a      	mov	sl, r3
 8005c98:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c9c:	b10a      	cbz	r2, 8005ca2 <_vfiprintf_r+0xa2>
 8005c9e:	2a25      	cmp	r2, #37	; 0x25
 8005ca0:	d1f9      	bne.n	8005c96 <_vfiprintf_r+0x96>
 8005ca2:	ebba 0b04 	subs.w	fp, sl, r4
 8005ca6:	d00b      	beq.n	8005cc0 <_vfiprintf_r+0xc0>
 8005ca8:	465b      	mov	r3, fp
 8005caa:	4622      	mov	r2, r4
 8005cac:	4629      	mov	r1, r5
 8005cae:	4630      	mov	r0, r6
 8005cb0:	f7ff ff93 	bl	8005bda <__sfputs_r>
 8005cb4:	3001      	adds	r0, #1
 8005cb6:	f000 80aa 	beq.w	8005e0e <_vfiprintf_r+0x20e>
 8005cba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005cbc:	445a      	add	r2, fp
 8005cbe:	9209      	str	r2, [sp, #36]	; 0x24
 8005cc0:	f89a 3000 	ldrb.w	r3, [sl]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	f000 80a2 	beq.w	8005e0e <_vfiprintf_r+0x20e>
 8005cca:	2300      	movs	r3, #0
 8005ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8005cd0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005cd4:	f10a 0a01 	add.w	sl, sl, #1
 8005cd8:	9304      	str	r3, [sp, #16]
 8005cda:	9307      	str	r3, [sp, #28]
 8005cdc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005ce0:	931a      	str	r3, [sp, #104]	; 0x68
 8005ce2:	4654      	mov	r4, sl
 8005ce4:	2205      	movs	r2, #5
 8005ce6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cea:	4858      	ldr	r0, [pc, #352]	; (8005e4c <_vfiprintf_r+0x24c>)
 8005cec:	f7fa fa80 	bl	80001f0 <memchr>
 8005cf0:	9a04      	ldr	r2, [sp, #16]
 8005cf2:	b9d8      	cbnz	r0, 8005d2c <_vfiprintf_r+0x12c>
 8005cf4:	06d1      	lsls	r1, r2, #27
 8005cf6:	bf44      	itt	mi
 8005cf8:	2320      	movmi	r3, #32
 8005cfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005cfe:	0713      	lsls	r3, r2, #28
 8005d00:	bf44      	itt	mi
 8005d02:	232b      	movmi	r3, #43	; 0x2b
 8005d04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d08:	f89a 3000 	ldrb.w	r3, [sl]
 8005d0c:	2b2a      	cmp	r3, #42	; 0x2a
 8005d0e:	d015      	beq.n	8005d3c <_vfiprintf_r+0x13c>
 8005d10:	9a07      	ldr	r2, [sp, #28]
 8005d12:	4654      	mov	r4, sl
 8005d14:	2000      	movs	r0, #0
 8005d16:	f04f 0c0a 	mov.w	ip, #10
 8005d1a:	4621      	mov	r1, r4
 8005d1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d20:	3b30      	subs	r3, #48	; 0x30
 8005d22:	2b09      	cmp	r3, #9
 8005d24:	d94e      	bls.n	8005dc4 <_vfiprintf_r+0x1c4>
 8005d26:	b1b0      	cbz	r0, 8005d56 <_vfiprintf_r+0x156>
 8005d28:	9207      	str	r2, [sp, #28]
 8005d2a:	e014      	b.n	8005d56 <_vfiprintf_r+0x156>
 8005d2c:	eba0 0308 	sub.w	r3, r0, r8
 8005d30:	fa09 f303 	lsl.w	r3, r9, r3
 8005d34:	4313      	orrs	r3, r2
 8005d36:	9304      	str	r3, [sp, #16]
 8005d38:	46a2      	mov	sl, r4
 8005d3a:	e7d2      	b.n	8005ce2 <_vfiprintf_r+0xe2>
 8005d3c:	9b03      	ldr	r3, [sp, #12]
 8005d3e:	1d19      	adds	r1, r3, #4
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	9103      	str	r1, [sp, #12]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	bfbb      	ittet	lt
 8005d48:	425b      	neglt	r3, r3
 8005d4a:	f042 0202 	orrlt.w	r2, r2, #2
 8005d4e:	9307      	strge	r3, [sp, #28]
 8005d50:	9307      	strlt	r3, [sp, #28]
 8005d52:	bfb8      	it	lt
 8005d54:	9204      	strlt	r2, [sp, #16]
 8005d56:	7823      	ldrb	r3, [r4, #0]
 8005d58:	2b2e      	cmp	r3, #46	; 0x2e
 8005d5a:	d10c      	bne.n	8005d76 <_vfiprintf_r+0x176>
 8005d5c:	7863      	ldrb	r3, [r4, #1]
 8005d5e:	2b2a      	cmp	r3, #42	; 0x2a
 8005d60:	d135      	bne.n	8005dce <_vfiprintf_r+0x1ce>
 8005d62:	9b03      	ldr	r3, [sp, #12]
 8005d64:	1d1a      	adds	r2, r3, #4
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	9203      	str	r2, [sp, #12]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	bfb8      	it	lt
 8005d6e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005d72:	3402      	adds	r4, #2
 8005d74:	9305      	str	r3, [sp, #20]
 8005d76:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005e5c <_vfiprintf_r+0x25c>
 8005d7a:	7821      	ldrb	r1, [r4, #0]
 8005d7c:	2203      	movs	r2, #3
 8005d7e:	4650      	mov	r0, sl
 8005d80:	f7fa fa36 	bl	80001f0 <memchr>
 8005d84:	b140      	cbz	r0, 8005d98 <_vfiprintf_r+0x198>
 8005d86:	2340      	movs	r3, #64	; 0x40
 8005d88:	eba0 000a 	sub.w	r0, r0, sl
 8005d8c:	fa03 f000 	lsl.w	r0, r3, r0
 8005d90:	9b04      	ldr	r3, [sp, #16]
 8005d92:	4303      	orrs	r3, r0
 8005d94:	3401      	adds	r4, #1
 8005d96:	9304      	str	r3, [sp, #16]
 8005d98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d9c:	482c      	ldr	r0, [pc, #176]	; (8005e50 <_vfiprintf_r+0x250>)
 8005d9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005da2:	2206      	movs	r2, #6
 8005da4:	f7fa fa24 	bl	80001f0 <memchr>
 8005da8:	2800      	cmp	r0, #0
 8005daa:	d03f      	beq.n	8005e2c <_vfiprintf_r+0x22c>
 8005dac:	4b29      	ldr	r3, [pc, #164]	; (8005e54 <_vfiprintf_r+0x254>)
 8005dae:	bb1b      	cbnz	r3, 8005df8 <_vfiprintf_r+0x1f8>
 8005db0:	9b03      	ldr	r3, [sp, #12]
 8005db2:	3307      	adds	r3, #7
 8005db4:	f023 0307 	bic.w	r3, r3, #7
 8005db8:	3308      	adds	r3, #8
 8005dba:	9303      	str	r3, [sp, #12]
 8005dbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dbe:	443b      	add	r3, r7
 8005dc0:	9309      	str	r3, [sp, #36]	; 0x24
 8005dc2:	e767      	b.n	8005c94 <_vfiprintf_r+0x94>
 8005dc4:	fb0c 3202 	mla	r2, ip, r2, r3
 8005dc8:	460c      	mov	r4, r1
 8005dca:	2001      	movs	r0, #1
 8005dcc:	e7a5      	b.n	8005d1a <_vfiprintf_r+0x11a>
 8005dce:	2300      	movs	r3, #0
 8005dd0:	3401      	adds	r4, #1
 8005dd2:	9305      	str	r3, [sp, #20]
 8005dd4:	4619      	mov	r1, r3
 8005dd6:	f04f 0c0a 	mov.w	ip, #10
 8005dda:	4620      	mov	r0, r4
 8005ddc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005de0:	3a30      	subs	r2, #48	; 0x30
 8005de2:	2a09      	cmp	r2, #9
 8005de4:	d903      	bls.n	8005dee <_vfiprintf_r+0x1ee>
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d0c5      	beq.n	8005d76 <_vfiprintf_r+0x176>
 8005dea:	9105      	str	r1, [sp, #20]
 8005dec:	e7c3      	b.n	8005d76 <_vfiprintf_r+0x176>
 8005dee:	fb0c 2101 	mla	r1, ip, r1, r2
 8005df2:	4604      	mov	r4, r0
 8005df4:	2301      	movs	r3, #1
 8005df6:	e7f0      	b.n	8005dda <_vfiprintf_r+0x1da>
 8005df8:	ab03      	add	r3, sp, #12
 8005dfa:	9300      	str	r3, [sp, #0]
 8005dfc:	462a      	mov	r2, r5
 8005dfe:	4b16      	ldr	r3, [pc, #88]	; (8005e58 <_vfiprintf_r+0x258>)
 8005e00:	a904      	add	r1, sp, #16
 8005e02:	4630      	mov	r0, r6
 8005e04:	f3af 8000 	nop.w
 8005e08:	4607      	mov	r7, r0
 8005e0a:	1c78      	adds	r0, r7, #1
 8005e0c:	d1d6      	bne.n	8005dbc <_vfiprintf_r+0x1bc>
 8005e0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e10:	07d9      	lsls	r1, r3, #31
 8005e12:	d405      	bmi.n	8005e20 <_vfiprintf_r+0x220>
 8005e14:	89ab      	ldrh	r3, [r5, #12]
 8005e16:	059a      	lsls	r2, r3, #22
 8005e18:	d402      	bmi.n	8005e20 <_vfiprintf_r+0x220>
 8005e1a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e1c:	f7ff fd7f 	bl	800591e <__retarget_lock_release_recursive>
 8005e20:	89ab      	ldrh	r3, [r5, #12]
 8005e22:	065b      	lsls	r3, r3, #25
 8005e24:	f53f af12 	bmi.w	8005c4c <_vfiprintf_r+0x4c>
 8005e28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005e2a:	e711      	b.n	8005c50 <_vfiprintf_r+0x50>
 8005e2c:	ab03      	add	r3, sp, #12
 8005e2e:	9300      	str	r3, [sp, #0]
 8005e30:	462a      	mov	r2, r5
 8005e32:	4b09      	ldr	r3, [pc, #36]	; (8005e58 <_vfiprintf_r+0x258>)
 8005e34:	a904      	add	r1, sp, #16
 8005e36:	4630      	mov	r0, r6
 8005e38:	f000 f880 	bl	8005f3c <_printf_i>
 8005e3c:	e7e4      	b.n	8005e08 <_vfiprintf_r+0x208>
 8005e3e:	bf00      	nop
 8005e40:	08006828 	.word	0x08006828
 8005e44:	08006848 	.word	0x08006848
 8005e48:	08006808 	.word	0x08006808
 8005e4c:	08006868 	.word	0x08006868
 8005e50:	08006872 	.word	0x08006872
 8005e54:	00000000 	.word	0x00000000
 8005e58:	08005bdb 	.word	0x08005bdb
 8005e5c:	0800686e 	.word	0x0800686e

08005e60 <_printf_common>:
 8005e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e64:	4616      	mov	r6, r2
 8005e66:	4699      	mov	r9, r3
 8005e68:	688a      	ldr	r2, [r1, #8]
 8005e6a:	690b      	ldr	r3, [r1, #16]
 8005e6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e70:	4293      	cmp	r3, r2
 8005e72:	bfb8      	it	lt
 8005e74:	4613      	movlt	r3, r2
 8005e76:	6033      	str	r3, [r6, #0]
 8005e78:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e7c:	4607      	mov	r7, r0
 8005e7e:	460c      	mov	r4, r1
 8005e80:	b10a      	cbz	r2, 8005e86 <_printf_common+0x26>
 8005e82:	3301      	adds	r3, #1
 8005e84:	6033      	str	r3, [r6, #0]
 8005e86:	6823      	ldr	r3, [r4, #0]
 8005e88:	0699      	lsls	r1, r3, #26
 8005e8a:	bf42      	ittt	mi
 8005e8c:	6833      	ldrmi	r3, [r6, #0]
 8005e8e:	3302      	addmi	r3, #2
 8005e90:	6033      	strmi	r3, [r6, #0]
 8005e92:	6825      	ldr	r5, [r4, #0]
 8005e94:	f015 0506 	ands.w	r5, r5, #6
 8005e98:	d106      	bne.n	8005ea8 <_printf_common+0x48>
 8005e9a:	f104 0a19 	add.w	sl, r4, #25
 8005e9e:	68e3      	ldr	r3, [r4, #12]
 8005ea0:	6832      	ldr	r2, [r6, #0]
 8005ea2:	1a9b      	subs	r3, r3, r2
 8005ea4:	42ab      	cmp	r3, r5
 8005ea6:	dc26      	bgt.n	8005ef6 <_printf_common+0x96>
 8005ea8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005eac:	1e13      	subs	r3, r2, #0
 8005eae:	6822      	ldr	r2, [r4, #0]
 8005eb0:	bf18      	it	ne
 8005eb2:	2301      	movne	r3, #1
 8005eb4:	0692      	lsls	r2, r2, #26
 8005eb6:	d42b      	bmi.n	8005f10 <_printf_common+0xb0>
 8005eb8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ebc:	4649      	mov	r1, r9
 8005ebe:	4638      	mov	r0, r7
 8005ec0:	47c0      	blx	r8
 8005ec2:	3001      	adds	r0, #1
 8005ec4:	d01e      	beq.n	8005f04 <_printf_common+0xa4>
 8005ec6:	6823      	ldr	r3, [r4, #0]
 8005ec8:	68e5      	ldr	r5, [r4, #12]
 8005eca:	6832      	ldr	r2, [r6, #0]
 8005ecc:	f003 0306 	and.w	r3, r3, #6
 8005ed0:	2b04      	cmp	r3, #4
 8005ed2:	bf08      	it	eq
 8005ed4:	1aad      	subeq	r5, r5, r2
 8005ed6:	68a3      	ldr	r3, [r4, #8]
 8005ed8:	6922      	ldr	r2, [r4, #16]
 8005eda:	bf0c      	ite	eq
 8005edc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ee0:	2500      	movne	r5, #0
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	bfc4      	itt	gt
 8005ee6:	1a9b      	subgt	r3, r3, r2
 8005ee8:	18ed      	addgt	r5, r5, r3
 8005eea:	2600      	movs	r6, #0
 8005eec:	341a      	adds	r4, #26
 8005eee:	42b5      	cmp	r5, r6
 8005ef0:	d11a      	bne.n	8005f28 <_printf_common+0xc8>
 8005ef2:	2000      	movs	r0, #0
 8005ef4:	e008      	b.n	8005f08 <_printf_common+0xa8>
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	4652      	mov	r2, sl
 8005efa:	4649      	mov	r1, r9
 8005efc:	4638      	mov	r0, r7
 8005efe:	47c0      	blx	r8
 8005f00:	3001      	adds	r0, #1
 8005f02:	d103      	bne.n	8005f0c <_printf_common+0xac>
 8005f04:	f04f 30ff 	mov.w	r0, #4294967295
 8005f08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f0c:	3501      	adds	r5, #1
 8005f0e:	e7c6      	b.n	8005e9e <_printf_common+0x3e>
 8005f10:	18e1      	adds	r1, r4, r3
 8005f12:	1c5a      	adds	r2, r3, #1
 8005f14:	2030      	movs	r0, #48	; 0x30
 8005f16:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005f1a:	4422      	add	r2, r4
 8005f1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005f20:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005f24:	3302      	adds	r3, #2
 8005f26:	e7c7      	b.n	8005eb8 <_printf_common+0x58>
 8005f28:	2301      	movs	r3, #1
 8005f2a:	4622      	mov	r2, r4
 8005f2c:	4649      	mov	r1, r9
 8005f2e:	4638      	mov	r0, r7
 8005f30:	47c0      	blx	r8
 8005f32:	3001      	adds	r0, #1
 8005f34:	d0e6      	beq.n	8005f04 <_printf_common+0xa4>
 8005f36:	3601      	adds	r6, #1
 8005f38:	e7d9      	b.n	8005eee <_printf_common+0x8e>
	...

08005f3c <_printf_i>:
 8005f3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f40:	7e0f      	ldrb	r7, [r1, #24]
 8005f42:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005f44:	2f78      	cmp	r7, #120	; 0x78
 8005f46:	4691      	mov	r9, r2
 8005f48:	4680      	mov	r8, r0
 8005f4a:	460c      	mov	r4, r1
 8005f4c:	469a      	mov	sl, r3
 8005f4e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005f52:	d807      	bhi.n	8005f64 <_printf_i+0x28>
 8005f54:	2f62      	cmp	r7, #98	; 0x62
 8005f56:	d80a      	bhi.n	8005f6e <_printf_i+0x32>
 8005f58:	2f00      	cmp	r7, #0
 8005f5a:	f000 80d8 	beq.w	800610e <_printf_i+0x1d2>
 8005f5e:	2f58      	cmp	r7, #88	; 0x58
 8005f60:	f000 80a3 	beq.w	80060aa <_printf_i+0x16e>
 8005f64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005f6c:	e03a      	b.n	8005fe4 <_printf_i+0xa8>
 8005f6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005f72:	2b15      	cmp	r3, #21
 8005f74:	d8f6      	bhi.n	8005f64 <_printf_i+0x28>
 8005f76:	a101      	add	r1, pc, #4	; (adr r1, 8005f7c <_printf_i+0x40>)
 8005f78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f7c:	08005fd5 	.word	0x08005fd5
 8005f80:	08005fe9 	.word	0x08005fe9
 8005f84:	08005f65 	.word	0x08005f65
 8005f88:	08005f65 	.word	0x08005f65
 8005f8c:	08005f65 	.word	0x08005f65
 8005f90:	08005f65 	.word	0x08005f65
 8005f94:	08005fe9 	.word	0x08005fe9
 8005f98:	08005f65 	.word	0x08005f65
 8005f9c:	08005f65 	.word	0x08005f65
 8005fa0:	08005f65 	.word	0x08005f65
 8005fa4:	08005f65 	.word	0x08005f65
 8005fa8:	080060f5 	.word	0x080060f5
 8005fac:	08006019 	.word	0x08006019
 8005fb0:	080060d7 	.word	0x080060d7
 8005fb4:	08005f65 	.word	0x08005f65
 8005fb8:	08005f65 	.word	0x08005f65
 8005fbc:	08006117 	.word	0x08006117
 8005fc0:	08005f65 	.word	0x08005f65
 8005fc4:	08006019 	.word	0x08006019
 8005fc8:	08005f65 	.word	0x08005f65
 8005fcc:	08005f65 	.word	0x08005f65
 8005fd0:	080060df 	.word	0x080060df
 8005fd4:	682b      	ldr	r3, [r5, #0]
 8005fd6:	1d1a      	adds	r2, r3, #4
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	602a      	str	r2, [r5, #0]
 8005fdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005fe0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e0a3      	b.n	8006130 <_printf_i+0x1f4>
 8005fe8:	6820      	ldr	r0, [r4, #0]
 8005fea:	6829      	ldr	r1, [r5, #0]
 8005fec:	0606      	lsls	r6, r0, #24
 8005fee:	f101 0304 	add.w	r3, r1, #4
 8005ff2:	d50a      	bpl.n	800600a <_printf_i+0xce>
 8005ff4:	680e      	ldr	r6, [r1, #0]
 8005ff6:	602b      	str	r3, [r5, #0]
 8005ff8:	2e00      	cmp	r6, #0
 8005ffa:	da03      	bge.n	8006004 <_printf_i+0xc8>
 8005ffc:	232d      	movs	r3, #45	; 0x2d
 8005ffe:	4276      	negs	r6, r6
 8006000:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006004:	485e      	ldr	r0, [pc, #376]	; (8006180 <_printf_i+0x244>)
 8006006:	230a      	movs	r3, #10
 8006008:	e019      	b.n	800603e <_printf_i+0x102>
 800600a:	680e      	ldr	r6, [r1, #0]
 800600c:	602b      	str	r3, [r5, #0]
 800600e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006012:	bf18      	it	ne
 8006014:	b236      	sxthne	r6, r6
 8006016:	e7ef      	b.n	8005ff8 <_printf_i+0xbc>
 8006018:	682b      	ldr	r3, [r5, #0]
 800601a:	6820      	ldr	r0, [r4, #0]
 800601c:	1d19      	adds	r1, r3, #4
 800601e:	6029      	str	r1, [r5, #0]
 8006020:	0601      	lsls	r1, r0, #24
 8006022:	d501      	bpl.n	8006028 <_printf_i+0xec>
 8006024:	681e      	ldr	r6, [r3, #0]
 8006026:	e002      	b.n	800602e <_printf_i+0xf2>
 8006028:	0646      	lsls	r6, r0, #25
 800602a:	d5fb      	bpl.n	8006024 <_printf_i+0xe8>
 800602c:	881e      	ldrh	r6, [r3, #0]
 800602e:	4854      	ldr	r0, [pc, #336]	; (8006180 <_printf_i+0x244>)
 8006030:	2f6f      	cmp	r7, #111	; 0x6f
 8006032:	bf0c      	ite	eq
 8006034:	2308      	moveq	r3, #8
 8006036:	230a      	movne	r3, #10
 8006038:	2100      	movs	r1, #0
 800603a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800603e:	6865      	ldr	r5, [r4, #4]
 8006040:	60a5      	str	r5, [r4, #8]
 8006042:	2d00      	cmp	r5, #0
 8006044:	bfa2      	ittt	ge
 8006046:	6821      	ldrge	r1, [r4, #0]
 8006048:	f021 0104 	bicge.w	r1, r1, #4
 800604c:	6021      	strge	r1, [r4, #0]
 800604e:	b90e      	cbnz	r6, 8006054 <_printf_i+0x118>
 8006050:	2d00      	cmp	r5, #0
 8006052:	d04d      	beq.n	80060f0 <_printf_i+0x1b4>
 8006054:	4615      	mov	r5, r2
 8006056:	fbb6 f1f3 	udiv	r1, r6, r3
 800605a:	fb03 6711 	mls	r7, r3, r1, r6
 800605e:	5dc7      	ldrb	r7, [r0, r7]
 8006060:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006064:	4637      	mov	r7, r6
 8006066:	42bb      	cmp	r3, r7
 8006068:	460e      	mov	r6, r1
 800606a:	d9f4      	bls.n	8006056 <_printf_i+0x11a>
 800606c:	2b08      	cmp	r3, #8
 800606e:	d10b      	bne.n	8006088 <_printf_i+0x14c>
 8006070:	6823      	ldr	r3, [r4, #0]
 8006072:	07de      	lsls	r6, r3, #31
 8006074:	d508      	bpl.n	8006088 <_printf_i+0x14c>
 8006076:	6923      	ldr	r3, [r4, #16]
 8006078:	6861      	ldr	r1, [r4, #4]
 800607a:	4299      	cmp	r1, r3
 800607c:	bfde      	ittt	le
 800607e:	2330      	movle	r3, #48	; 0x30
 8006080:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006084:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006088:	1b52      	subs	r2, r2, r5
 800608a:	6122      	str	r2, [r4, #16]
 800608c:	f8cd a000 	str.w	sl, [sp]
 8006090:	464b      	mov	r3, r9
 8006092:	aa03      	add	r2, sp, #12
 8006094:	4621      	mov	r1, r4
 8006096:	4640      	mov	r0, r8
 8006098:	f7ff fee2 	bl	8005e60 <_printf_common>
 800609c:	3001      	adds	r0, #1
 800609e:	d14c      	bne.n	800613a <_printf_i+0x1fe>
 80060a0:	f04f 30ff 	mov.w	r0, #4294967295
 80060a4:	b004      	add	sp, #16
 80060a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060aa:	4835      	ldr	r0, [pc, #212]	; (8006180 <_printf_i+0x244>)
 80060ac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80060b0:	6829      	ldr	r1, [r5, #0]
 80060b2:	6823      	ldr	r3, [r4, #0]
 80060b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80060b8:	6029      	str	r1, [r5, #0]
 80060ba:	061d      	lsls	r5, r3, #24
 80060bc:	d514      	bpl.n	80060e8 <_printf_i+0x1ac>
 80060be:	07df      	lsls	r7, r3, #31
 80060c0:	bf44      	itt	mi
 80060c2:	f043 0320 	orrmi.w	r3, r3, #32
 80060c6:	6023      	strmi	r3, [r4, #0]
 80060c8:	b91e      	cbnz	r6, 80060d2 <_printf_i+0x196>
 80060ca:	6823      	ldr	r3, [r4, #0]
 80060cc:	f023 0320 	bic.w	r3, r3, #32
 80060d0:	6023      	str	r3, [r4, #0]
 80060d2:	2310      	movs	r3, #16
 80060d4:	e7b0      	b.n	8006038 <_printf_i+0xfc>
 80060d6:	6823      	ldr	r3, [r4, #0]
 80060d8:	f043 0320 	orr.w	r3, r3, #32
 80060dc:	6023      	str	r3, [r4, #0]
 80060de:	2378      	movs	r3, #120	; 0x78
 80060e0:	4828      	ldr	r0, [pc, #160]	; (8006184 <_printf_i+0x248>)
 80060e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80060e6:	e7e3      	b.n	80060b0 <_printf_i+0x174>
 80060e8:	0659      	lsls	r1, r3, #25
 80060ea:	bf48      	it	mi
 80060ec:	b2b6      	uxthmi	r6, r6
 80060ee:	e7e6      	b.n	80060be <_printf_i+0x182>
 80060f0:	4615      	mov	r5, r2
 80060f2:	e7bb      	b.n	800606c <_printf_i+0x130>
 80060f4:	682b      	ldr	r3, [r5, #0]
 80060f6:	6826      	ldr	r6, [r4, #0]
 80060f8:	6961      	ldr	r1, [r4, #20]
 80060fa:	1d18      	adds	r0, r3, #4
 80060fc:	6028      	str	r0, [r5, #0]
 80060fe:	0635      	lsls	r5, r6, #24
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	d501      	bpl.n	8006108 <_printf_i+0x1cc>
 8006104:	6019      	str	r1, [r3, #0]
 8006106:	e002      	b.n	800610e <_printf_i+0x1d2>
 8006108:	0670      	lsls	r0, r6, #25
 800610a:	d5fb      	bpl.n	8006104 <_printf_i+0x1c8>
 800610c:	8019      	strh	r1, [r3, #0]
 800610e:	2300      	movs	r3, #0
 8006110:	6123      	str	r3, [r4, #16]
 8006112:	4615      	mov	r5, r2
 8006114:	e7ba      	b.n	800608c <_printf_i+0x150>
 8006116:	682b      	ldr	r3, [r5, #0]
 8006118:	1d1a      	adds	r2, r3, #4
 800611a:	602a      	str	r2, [r5, #0]
 800611c:	681d      	ldr	r5, [r3, #0]
 800611e:	6862      	ldr	r2, [r4, #4]
 8006120:	2100      	movs	r1, #0
 8006122:	4628      	mov	r0, r5
 8006124:	f7fa f864 	bl	80001f0 <memchr>
 8006128:	b108      	cbz	r0, 800612e <_printf_i+0x1f2>
 800612a:	1b40      	subs	r0, r0, r5
 800612c:	6060      	str	r0, [r4, #4]
 800612e:	6863      	ldr	r3, [r4, #4]
 8006130:	6123      	str	r3, [r4, #16]
 8006132:	2300      	movs	r3, #0
 8006134:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006138:	e7a8      	b.n	800608c <_printf_i+0x150>
 800613a:	6923      	ldr	r3, [r4, #16]
 800613c:	462a      	mov	r2, r5
 800613e:	4649      	mov	r1, r9
 8006140:	4640      	mov	r0, r8
 8006142:	47d0      	blx	sl
 8006144:	3001      	adds	r0, #1
 8006146:	d0ab      	beq.n	80060a0 <_printf_i+0x164>
 8006148:	6823      	ldr	r3, [r4, #0]
 800614a:	079b      	lsls	r3, r3, #30
 800614c:	d413      	bmi.n	8006176 <_printf_i+0x23a>
 800614e:	68e0      	ldr	r0, [r4, #12]
 8006150:	9b03      	ldr	r3, [sp, #12]
 8006152:	4298      	cmp	r0, r3
 8006154:	bfb8      	it	lt
 8006156:	4618      	movlt	r0, r3
 8006158:	e7a4      	b.n	80060a4 <_printf_i+0x168>
 800615a:	2301      	movs	r3, #1
 800615c:	4632      	mov	r2, r6
 800615e:	4649      	mov	r1, r9
 8006160:	4640      	mov	r0, r8
 8006162:	47d0      	blx	sl
 8006164:	3001      	adds	r0, #1
 8006166:	d09b      	beq.n	80060a0 <_printf_i+0x164>
 8006168:	3501      	adds	r5, #1
 800616a:	68e3      	ldr	r3, [r4, #12]
 800616c:	9903      	ldr	r1, [sp, #12]
 800616e:	1a5b      	subs	r3, r3, r1
 8006170:	42ab      	cmp	r3, r5
 8006172:	dcf2      	bgt.n	800615a <_printf_i+0x21e>
 8006174:	e7eb      	b.n	800614e <_printf_i+0x212>
 8006176:	2500      	movs	r5, #0
 8006178:	f104 0619 	add.w	r6, r4, #25
 800617c:	e7f5      	b.n	800616a <_printf_i+0x22e>
 800617e:	bf00      	nop
 8006180:	08006879 	.word	0x08006879
 8006184:	0800688a 	.word	0x0800688a

08006188 <_sbrk_r>:
 8006188:	b538      	push	{r3, r4, r5, lr}
 800618a:	4d06      	ldr	r5, [pc, #24]	; (80061a4 <_sbrk_r+0x1c>)
 800618c:	2300      	movs	r3, #0
 800618e:	4604      	mov	r4, r0
 8006190:	4608      	mov	r0, r1
 8006192:	602b      	str	r3, [r5, #0]
 8006194:	f7fc fb0c 	bl	80027b0 <_sbrk>
 8006198:	1c43      	adds	r3, r0, #1
 800619a:	d102      	bne.n	80061a2 <_sbrk_r+0x1a>
 800619c:	682b      	ldr	r3, [r5, #0]
 800619e:	b103      	cbz	r3, 80061a2 <_sbrk_r+0x1a>
 80061a0:	6023      	str	r3, [r4, #0]
 80061a2:	bd38      	pop	{r3, r4, r5, pc}
 80061a4:	20002eac 	.word	0x20002eac

080061a8 <__sread>:
 80061a8:	b510      	push	{r4, lr}
 80061aa:	460c      	mov	r4, r1
 80061ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061b0:	f000 f8a0 	bl	80062f4 <_read_r>
 80061b4:	2800      	cmp	r0, #0
 80061b6:	bfab      	itete	ge
 80061b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80061ba:	89a3      	ldrhlt	r3, [r4, #12]
 80061bc:	181b      	addge	r3, r3, r0
 80061be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80061c2:	bfac      	ite	ge
 80061c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80061c6:	81a3      	strhlt	r3, [r4, #12]
 80061c8:	bd10      	pop	{r4, pc}

080061ca <__swrite>:
 80061ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061ce:	461f      	mov	r7, r3
 80061d0:	898b      	ldrh	r3, [r1, #12]
 80061d2:	05db      	lsls	r3, r3, #23
 80061d4:	4605      	mov	r5, r0
 80061d6:	460c      	mov	r4, r1
 80061d8:	4616      	mov	r6, r2
 80061da:	d505      	bpl.n	80061e8 <__swrite+0x1e>
 80061dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061e0:	2302      	movs	r3, #2
 80061e2:	2200      	movs	r2, #0
 80061e4:	f000 f868 	bl	80062b8 <_lseek_r>
 80061e8:	89a3      	ldrh	r3, [r4, #12]
 80061ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80061ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80061f2:	81a3      	strh	r3, [r4, #12]
 80061f4:	4632      	mov	r2, r6
 80061f6:	463b      	mov	r3, r7
 80061f8:	4628      	mov	r0, r5
 80061fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80061fe:	f000 b817 	b.w	8006230 <_write_r>

08006202 <__sseek>:
 8006202:	b510      	push	{r4, lr}
 8006204:	460c      	mov	r4, r1
 8006206:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800620a:	f000 f855 	bl	80062b8 <_lseek_r>
 800620e:	1c43      	adds	r3, r0, #1
 8006210:	89a3      	ldrh	r3, [r4, #12]
 8006212:	bf15      	itete	ne
 8006214:	6560      	strne	r0, [r4, #84]	; 0x54
 8006216:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800621a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800621e:	81a3      	strheq	r3, [r4, #12]
 8006220:	bf18      	it	ne
 8006222:	81a3      	strhne	r3, [r4, #12]
 8006224:	bd10      	pop	{r4, pc}

08006226 <__sclose>:
 8006226:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800622a:	f000 b813 	b.w	8006254 <_close_r>
	...

08006230 <_write_r>:
 8006230:	b538      	push	{r3, r4, r5, lr}
 8006232:	4d07      	ldr	r5, [pc, #28]	; (8006250 <_write_r+0x20>)
 8006234:	4604      	mov	r4, r0
 8006236:	4608      	mov	r0, r1
 8006238:	4611      	mov	r1, r2
 800623a:	2200      	movs	r2, #0
 800623c:	602a      	str	r2, [r5, #0]
 800623e:	461a      	mov	r2, r3
 8006240:	f7fc fa65 	bl	800270e <_write>
 8006244:	1c43      	adds	r3, r0, #1
 8006246:	d102      	bne.n	800624e <_write_r+0x1e>
 8006248:	682b      	ldr	r3, [r5, #0]
 800624a:	b103      	cbz	r3, 800624e <_write_r+0x1e>
 800624c:	6023      	str	r3, [r4, #0]
 800624e:	bd38      	pop	{r3, r4, r5, pc}
 8006250:	20002eac 	.word	0x20002eac

08006254 <_close_r>:
 8006254:	b538      	push	{r3, r4, r5, lr}
 8006256:	4d06      	ldr	r5, [pc, #24]	; (8006270 <_close_r+0x1c>)
 8006258:	2300      	movs	r3, #0
 800625a:	4604      	mov	r4, r0
 800625c:	4608      	mov	r0, r1
 800625e:	602b      	str	r3, [r5, #0]
 8006260:	f7fc fa71 	bl	8002746 <_close>
 8006264:	1c43      	adds	r3, r0, #1
 8006266:	d102      	bne.n	800626e <_close_r+0x1a>
 8006268:	682b      	ldr	r3, [r5, #0]
 800626a:	b103      	cbz	r3, 800626e <_close_r+0x1a>
 800626c:	6023      	str	r3, [r4, #0]
 800626e:	bd38      	pop	{r3, r4, r5, pc}
 8006270:	20002eac 	.word	0x20002eac

08006274 <_fstat_r>:
 8006274:	b538      	push	{r3, r4, r5, lr}
 8006276:	4d07      	ldr	r5, [pc, #28]	; (8006294 <_fstat_r+0x20>)
 8006278:	2300      	movs	r3, #0
 800627a:	4604      	mov	r4, r0
 800627c:	4608      	mov	r0, r1
 800627e:	4611      	mov	r1, r2
 8006280:	602b      	str	r3, [r5, #0]
 8006282:	f7fc fa6c 	bl	800275e <_fstat>
 8006286:	1c43      	adds	r3, r0, #1
 8006288:	d102      	bne.n	8006290 <_fstat_r+0x1c>
 800628a:	682b      	ldr	r3, [r5, #0]
 800628c:	b103      	cbz	r3, 8006290 <_fstat_r+0x1c>
 800628e:	6023      	str	r3, [r4, #0]
 8006290:	bd38      	pop	{r3, r4, r5, pc}
 8006292:	bf00      	nop
 8006294:	20002eac 	.word	0x20002eac

08006298 <_isatty_r>:
 8006298:	b538      	push	{r3, r4, r5, lr}
 800629a:	4d06      	ldr	r5, [pc, #24]	; (80062b4 <_isatty_r+0x1c>)
 800629c:	2300      	movs	r3, #0
 800629e:	4604      	mov	r4, r0
 80062a0:	4608      	mov	r0, r1
 80062a2:	602b      	str	r3, [r5, #0]
 80062a4:	f7fc fa6b 	bl	800277e <_isatty>
 80062a8:	1c43      	adds	r3, r0, #1
 80062aa:	d102      	bne.n	80062b2 <_isatty_r+0x1a>
 80062ac:	682b      	ldr	r3, [r5, #0]
 80062ae:	b103      	cbz	r3, 80062b2 <_isatty_r+0x1a>
 80062b0:	6023      	str	r3, [r4, #0]
 80062b2:	bd38      	pop	{r3, r4, r5, pc}
 80062b4:	20002eac 	.word	0x20002eac

080062b8 <_lseek_r>:
 80062b8:	b538      	push	{r3, r4, r5, lr}
 80062ba:	4d07      	ldr	r5, [pc, #28]	; (80062d8 <_lseek_r+0x20>)
 80062bc:	4604      	mov	r4, r0
 80062be:	4608      	mov	r0, r1
 80062c0:	4611      	mov	r1, r2
 80062c2:	2200      	movs	r2, #0
 80062c4:	602a      	str	r2, [r5, #0]
 80062c6:	461a      	mov	r2, r3
 80062c8:	f7fc fa64 	bl	8002794 <_lseek>
 80062cc:	1c43      	adds	r3, r0, #1
 80062ce:	d102      	bne.n	80062d6 <_lseek_r+0x1e>
 80062d0:	682b      	ldr	r3, [r5, #0]
 80062d2:	b103      	cbz	r3, 80062d6 <_lseek_r+0x1e>
 80062d4:	6023      	str	r3, [r4, #0]
 80062d6:	bd38      	pop	{r3, r4, r5, pc}
 80062d8:	20002eac 	.word	0x20002eac

080062dc <__malloc_lock>:
 80062dc:	4801      	ldr	r0, [pc, #4]	; (80062e4 <__malloc_lock+0x8>)
 80062de:	f7ff bb1d 	b.w	800591c <__retarget_lock_acquire_recursive>
 80062e2:	bf00      	nop
 80062e4:	20002ea0 	.word	0x20002ea0

080062e8 <__malloc_unlock>:
 80062e8:	4801      	ldr	r0, [pc, #4]	; (80062f0 <__malloc_unlock+0x8>)
 80062ea:	f7ff bb18 	b.w	800591e <__retarget_lock_release_recursive>
 80062ee:	bf00      	nop
 80062f0:	20002ea0 	.word	0x20002ea0

080062f4 <_read_r>:
 80062f4:	b538      	push	{r3, r4, r5, lr}
 80062f6:	4d07      	ldr	r5, [pc, #28]	; (8006314 <_read_r+0x20>)
 80062f8:	4604      	mov	r4, r0
 80062fa:	4608      	mov	r0, r1
 80062fc:	4611      	mov	r1, r2
 80062fe:	2200      	movs	r2, #0
 8006300:	602a      	str	r2, [r5, #0]
 8006302:	461a      	mov	r2, r3
 8006304:	f7fc f9e6 	bl	80026d4 <_read>
 8006308:	1c43      	adds	r3, r0, #1
 800630a:	d102      	bne.n	8006312 <_read_r+0x1e>
 800630c:	682b      	ldr	r3, [r5, #0]
 800630e:	b103      	cbz	r3, 8006312 <_read_r+0x1e>
 8006310:	6023      	str	r3, [r4, #0]
 8006312:	bd38      	pop	{r3, r4, r5, pc}
 8006314:	20002eac 	.word	0x20002eac

08006318 <_init>:
 8006318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800631a:	bf00      	nop
 800631c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800631e:	bc08      	pop	{r3}
 8006320:	469e      	mov	lr, r3
 8006322:	4770      	bx	lr

08006324 <_fini>:
 8006324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006326:	bf00      	nop
 8006328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800632a:	bc08      	pop	{r3}
 800632c:	469e      	mov	lr, r3
 800632e:	4770      	bx	lr
