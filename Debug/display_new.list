
display_new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a810  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000013e0  0800a9a0  0800a9a0  0001a9a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd80  0800bd80  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800bd80  0800bd80  0001bd80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bd88  0800bd88  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd88  0800bd88  0001bd88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bd8c  0800bd8c  0001bd8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800bd90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000055e4  20000088  0800be18  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000566c  0800be18  0002566c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019bff  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037c6  00000000  00000000  00039cb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001610  00000000  00000000  0003d480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014f8  00000000  00000000  0003ea90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000255ef  00000000  00000000  0003ff88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bed5  00000000  00000000  00065577  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d621e  00000000  00000000  0008144c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015766a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006748  00000000  00000000  001576bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a988 	.word	0x0800a988

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	0800a988 	.word	0x0800a988

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	; 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__aeabi_d2uiz>:
 800085c:	004a      	lsls	r2, r1, #1
 800085e:	d211      	bcs.n	8000884 <__aeabi_d2uiz+0x28>
 8000860:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000864:	d211      	bcs.n	800088a <__aeabi_d2uiz+0x2e>
 8000866:	d50d      	bpl.n	8000884 <__aeabi_d2uiz+0x28>
 8000868:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800086c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000870:	d40e      	bmi.n	8000890 <__aeabi_d2uiz+0x34>
 8000872:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000876:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800087a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800087e:	fa23 f002 	lsr.w	r0, r3, r2
 8000882:	4770      	bx	lr
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	4770      	bx	lr
 800088a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800088e:	d102      	bne.n	8000896 <__aeabi_d2uiz+0x3a>
 8000890:	f04f 30ff 	mov.w	r0, #4294967295
 8000894:	4770      	bx	lr
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	4770      	bx	lr

0800089c <__aeabi_uldivmod>:
 800089c:	b953      	cbnz	r3, 80008b4 <__aeabi_uldivmod+0x18>
 800089e:	b94a      	cbnz	r2, 80008b4 <__aeabi_uldivmod+0x18>
 80008a0:	2900      	cmp	r1, #0
 80008a2:	bf08      	it	eq
 80008a4:	2800      	cmpeq	r0, #0
 80008a6:	bf1c      	itt	ne
 80008a8:	f04f 31ff 	movne.w	r1, #4294967295
 80008ac:	f04f 30ff 	movne.w	r0, #4294967295
 80008b0:	f000 b974 	b.w	8000b9c <__aeabi_idiv0>
 80008b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008bc:	f000 f806 	bl	80008cc <__udivmoddi4>
 80008c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008c8:	b004      	add	sp, #16
 80008ca:	4770      	bx	lr

080008cc <__udivmoddi4>:
 80008cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008d0:	9d08      	ldr	r5, [sp, #32]
 80008d2:	4604      	mov	r4, r0
 80008d4:	468e      	mov	lr, r1
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d14d      	bne.n	8000976 <__udivmoddi4+0xaa>
 80008da:	428a      	cmp	r2, r1
 80008dc:	4694      	mov	ip, r2
 80008de:	d969      	bls.n	80009b4 <__udivmoddi4+0xe8>
 80008e0:	fab2 f282 	clz	r2, r2
 80008e4:	b152      	cbz	r2, 80008fc <__udivmoddi4+0x30>
 80008e6:	fa01 f302 	lsl.w	r3, r1, r2
 80008ea:	f1c2 0120 	rsb	r1, r2, #32
 80008ee:	fa20 f101 	lsr.w	r1, r0, r1
 80008f2:	fa0c fc02 	lsl.w	ip, ip, r2
 80008f6:	ea41 0e03 	orr.w	lr, r1, r3
 80008fa:	4094      	lsls	r4, r2
 80008fc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000900:	0c21      	lsrs	r1, r4, #16
 8000902:	fbbe f6f8 	udiv	r6, lr, r8
 8000906:	fa1f f78c 	uxth.w	r7, ip
 800090a:	fb08 e316 	mls	r3, r8, r6, lr
 800090e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000912:	fb06 f107 	mul.w	r1, r6, r7
 8000916:	4299      	cmp	r1, r3
 8000918:	d90a      	bls.n	8000930 <__udivmoddi4+0x64>
 800091a:	eb1c 0303 	adds.w	r3, ip, r3
 800091e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000922:	f080 811f 	bcs.w	8000b64 <__udivmoddi4+0x298>
 8000926:	4299      	cmp	r1, r3
 8000928:	f240 811c 	bls.w	8000b64 <__udivmoddi4+0x298>
 800092c:	3e02      	subs	r6, #2
 800092e:	4463      	add	r3, ip
 8000930:	1a5b      	subs	r3, r3, r1
 8000932:	b2a4      	uxth	r4, r4
 8000934:	fbb3 f0f8 	udiv	r0, r3, r8
 8000938:	fb08 3310 	mls	r3, r8, r0, r3
 800093c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000940:	fb00 f707 	mul.w	r7, r0, r7
 8000944:	42a7      	cmp	r7, r4
 8000946:	d90a      	bls.n	800095e <__udivmoddi4+0x92>
 8000948:	eb1c 0404 	adds.w	r4, ip, r4
 800094c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000950:	f080 810a 	bcs.w	8000b68 <__udivmoddi4+0x29c>
 8000954:	42a7      	cmp	r7, r4
 8000956:	f240 8107 	bls.w	8000b68 <__udivmoddi4+0x29c>
 800095a:	4464      	add	r4, ip
 800095c:	3802      	subs	r0, #2
 800095e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000962:	1be4      	subs	r4, r4, r7
 8000964:	2600      	movs	r6, #0
 8000966:	b11d      	cbz	r5, 8000970 <__udivmoddi4+0xa4>
 8000968:	40d4      	lsrs	r4, r2
 800096a:	2300      	movs	r3, #0
 800096c:	e9c5 4300 	strd	r4, r3, [r5]
 8000970:	4631      	mov	r1, r6
 8000972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000976:	428b      	cmp	r3, r1
 8000978:	d909      	bls.n	800098e <__udivmoddi4+0xc2>
 800097a:	2d00      	cmp	r5, #0
 800097c:	f000 80ef 	beq.w	8000b5e <__udivmoddi4+0x292>
 8000980:	2600      	movs	r6, #0
 8000982:	e9c5 0100 	strd	r0, r1, [r5]
 8000986:	4630      	mov	r0, r6
 8000988:	4631      	mov	r1, r6
 800098a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800098e:	fab3 f683 	clz	r6, r3
 8000992:	2e00      	cmp	r6, #0
 8000994:	d14a      	bne.n	8000a2c <__udivmoddi4+0x160>
 8000996:	428b      	cmp	r3, r1
 8000998:	d302      	bcc.n	80009a0 <__udivmoddi4+0xd4>
 800099a:	4282      	cmp	r2, r0
 800099c:	f200 80f9 	bhi.w	8000b92 <__udivmoddi4+0x2c6>
 80009a0:	1a84      	subs	r4, r0, r2
 80009a2:	eb61 0303 	sbc.w	r3, r1, r3
 80009a6:	2001      	movs	r0, #1
 80009a8:	469e      	mov	lr, r3
 80009aa:	2d00      	cmp	r5, #0
 80009ac:	d0e0      	beq.n	8000970 <__udivmoddi4+0xa4>
 80009ae:	e9c5 4e00 	strd	r4, lr, [r5]
 80009b2:	e7dd      	b.n	8000970 <__udivmoddi4+0xa4>
 80009b4:	b902      	cbnz	r2, 80009b8 <__udivmoddi4+0xec>
 80009b6:	deff      	udf	#255	; 0xff
 80009b8:	fab2 f282 	clz	r2, r2
 80009bc:	2a00      	cmp	r2, #0
 80009be:	f040 8092 	bne.w	8000ae6 <__udivmoddi4+0x21a>
 80009c2:	eba1 010c 	sub.w	r1, r1, ip
 80009c6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009ca:	fa1f fe8c 	uxth.w	lr, ip
 80009ce:	2601      	movs	r6, #1
 80009d0:	0c20      	lsrs	r0, r4, #16
 80009d2:	fbb1 f3f7 	udiv	r3, r1, r7
 80009d6:	fb07 1113 	mls	r1, r7, r3, r1
 80009da:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009de:	fb0e f003 	mul.w	r0, lr, r3
 80009e2:	4288      	cmp	r0, r1
 80009e4:	d908      	bls.n	80009f8 <__udivmoddi4+0x12c>
 80009e6:	eb1c 0101 	adds.w	r1, ip, r1
 80009ea:	f103 38ff 	add.w	r8, r3, #4294967295
 80009ee:	d202      	bcs.n	80009f6 <__udivmoddi4+0x12a>
 80009f0:	4288      	cmp	r0, r1
 80009f2:	f200 80cb 	bhi.w	8000b8c <__udivmoddi4+0x2c0>
 80009f6:	4643      	mov	r3, r8
 80009f8:	1a09      	subs	r1, r1, r0
 80009fa:	b2a4      	uxth	r4, r4
 80009fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a00:	fb07 1110 	mls	r1, r7, r0, r1
 8000a04:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a08:	fb0e fe00 	mul.w	lr, lr, r0
 8000a0c:	45a6      	cmp	lr, r4
 8000a0e:	d908      	bls.n	8000a22 <__udivmoddi4+0x156>
 8000a10:	eb1c 0404 	adds.w	r4, ip, r4
 8000a14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a18:	d202      	bcs.n	8000a20 <__udivmoddi4+0x154>
 8000a1a:	45a6      	cmp	lr, r4
 8000a1c:	f200 80bb 	bhi.w	8000b96 <__udivmoddi4+0x2ca>
 8000a20:	4608      	mov	r0, r1
 8000a22:	eba4 040e 	sub.w	r4, r4, lr
 8000a26:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a2a:	e79c      	b.n	8000966 <__udivmoddi4+0x9a>
 8000a2c:	f1c6 0720 	rsb	r7, r6, #32
 8000a30:	40b3      	lsls	r3, r6
 8000a32:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a36:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a3a:	fa20 f407 	lsr.w	r4, r0, r7
 8000a3e:	fa01 f306 	lsl.w	r3, r1, r6
 8000a42:	431c      	orrs	r4, r3
 8000a44:	40f9      	lsrs	r1, r7
 8000a46:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a4a:	fa00 f306 	lsl.w	r3, r0, r6
 8000a4e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a52:	0c20      	lsrs	r0, r4, #16
 8000a54:	fa1f fe8c 	uxth.w	lr, ip
 8000a58:	fb09 1118 	mls	r1, r9, r8, r1
 8000a5c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a60:	fb08 f00e 	mul.w	r0, r8, lr
 8000a64:	4288      	cmp	r0, r1
 8000a66:	fa02 f206 	lsl.w	r2, r2, r6
 8000a6a:	d90b      	bls.n	8000a84 <__udivmoddi4+0x1b8>
 8000a6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a70:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a74:	f080 8088 	bcs.w	8000b88 <__udivmoddi4+0x2bc>
 8000a78:	4288      	cmp	r0, r1
 8000a7a:	f240 8085 	bls.w	8000b88 <__udivmoddi4+0x2bc>
 8000a7e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a82:	4461      	add	r1, ip
 8000a84:	1a09      	subs	r1, r1, r0
 8000a86:	b2a4      	uxth	r4, r4
 8000a88:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a8c:	fb09 1110 	mls	r1, r9, r0, r1
 8000a90:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a98:	458e      	cmp	lr, r1
 8000a9a:	d908      	bls.n	8000aae <__udivmoddi4+0x1e2>
 8000a9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000aa0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000aa4:	d26c      	bcs.n	8000b80 <__udivmoddi4+0x2b4>
 8000aa6:	458e      	cmp	lr, r1
 8000aa8:	d96a      	bls.n	8000b80 <__udivmoddi4+0x2b4>
 8000aaa:	3802      	subs	r0, #2
 8000aac:	4461      	add	r1, ip
 8000aae:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ab2:	fba0 9402 	umull	r9, r4, r0, r2
 8000ab6:	eba1 010e 	sub.w	r1, r1, lr
 8000aba:	42a1      	cmp	r1, r4
 8000abc:	46c8      	mov	r8, r9
 8000abe:	46a6      	mov	lr, r4
 8000ac0:	d356      	bcc.n	8000b70 <__udivmoddi4+0x2a4>
 8000ac2:	d053      	beq.n	8000b6c <__udivmoddi4+0x2a0>
 8000ac4:	b15d      	cbz	r5, 8000ade <__udivmoddi4+0x212>
 8000ac6:	ebb3 0208 	subs.w	r2, r3, r8
 8000aca:	eb61 010e 	sbc.w	r1, r1, lr
 8000ace:	fa01 f707 	lsl.w	r7, r1, r7
 8000ad2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ad6:	40f1      	lsrs	r1, r6
 8000ad8:	431f      	orrs	r7, r3
 8000ada:	e9c5 7100 	strd	r7, r1, [r5]
 8000ade:	2600      	movs	r6, #0
 8000ae0:	4631      	mov	r1, r6
 8000ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae6:	f1c2 0320 	rsb	r3, r2, #32
 8000aea:	40d8      	lsrs	r0, r3
 8000aec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000af0:	fa21 f303 	lsr.w	r3, r1, r3
 8000af4:	4091      	lsls	r1, r2
 8000af6:	4301      	orrs	r1, r0
 8000af8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000afc:	fa1f fe8c 	uxth.w	lr, ip
 8000b00:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b04:	fb07 3610 	mls	r6, r7, r0, r3
 8000b08:	0c0b      	lsrs	r3, r1, #16
 8000b0a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b0e:	fb00 f60e 	mul.w	r6, r0, lr
 8000b12:	429e      	cmp	r6, r3
 8000b14:	fa04 f402 	lsl.w	r4, r4, r2
 8000b18:	d908      	bls.n	8000b2c <__udivmoddi4+0x260>
 8000b1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b22:	d22f      	bcs.n	8000b84 <__udivmoddi4+0x2b8>
 8000b24:	429e      	cmp	r6, r3
 8000b26:	d92d      	bls.n	8000b84 <__udivmoddi4+0x2b8>
 8000b28:	3802      	subs	r0, #2
 8000b2a:	4463      	add	r3, ip
 8000b2c:	1b9b      	subs	r3, r3, r6
 8000b2e:	b289      	uxth	r1, r1
 8000b30:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b34:	fb07 3316 	mls	r3, r7, r6, r3
 8000b38:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b3c:	fb06 f30e 	mul.w	r3, r6, lr
 8000b40:	428b      	cmp	r3, r1
 8000b42:	d908      	bls.n	8000b56 <__udivmoddi4+0x28a>
 8000b44:	eb1c 0101 	adds.w	r1, ip, r1
 8000b48:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b4c:	d216      	bcs.n	8000b7c <__udivmoddi4+0x2b0>
 8000b4e:	428b      	cmp	r3, r1
 8000b50:	d914      	bls.n	8000b7c <__udivmoddi4+0x2b0>
 8000b52:	3e02      	subs	r6, #2
 8000b54:	4461      	add	r1, ip
 8000b56:	1ac9      	subs	r1, r1, r3
 8000b58:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b5c:	e738      	b.n	80009d0 <__udivmoddi4+0x104>
 8000b5e:	462e      	mov	r6, r5
 8000b60:	4628      	mov	r0, r5
 8000b62:	e705      	b.n	8000970 <__udivmoddi4+0xa4>
 8000b64:	4606      	mov	r6, r0
 8000b66:	e6e3      	b.n	8000930 <__udivmoddi4+0x64>
 8000b68:	4618      	mov	r0, r3
 8000b6a:	e6f8      	b.n	800095e <__udivmoddi4+0x92>
 8000b6c:	454b      	cmp	r3, r9
 8000b6e:	d2a9      	bcs.n	8000ac4 <__udivmoddi4+0x1f8>
 8000b70:	ebb9 0802 	subs.w	r8, r9, r2
 8000b74:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b78:	3801      	subs	r0, #1
 8000b7a:	e7a3      	b.n	8000ac4 <__udivmoddi4+0x1f8>
 8000b7c:	4646      	mov	r6, r8
 8000b7e:	e7ea      	b.n	8000b56 <__udivmoddi4+0x28a>
 8000b80:	4620      	mov	r0, r4
 8000b82:	e794      	b.n	8000aae <__udivmoddi4+0x1e2>
 8000b84:	4640      	mov	r0, r8
 8000b86:	e7d1      	b.n	8000b2c <__udivmoddi4+0x260>
 8000b88:	46d0      	mov	r8, sl
 8000b8a:	e77b      	b.n	8000a84 <__udivmoddi4+0x1b8>
 8000b8c:	3b02      	subs	r3, #2
 8000b8e:	4461      	add	r1, ip
 8000b90:	e732      	b.n	80009f8 <__udivmoddi4+0x12c>
 8000b92:	4630      	mov	r0, r6
 8000b94:	e709      	b.n	80009aa <__udivmoddi4+0xde>
 8000b96:	4464      	add	r4, ip
 8000b98:	3802      	subs	r0, #2
 8000b9a:	e742      	b.n	8000a22 <__udivmoddi4+0x156>

08000b9c <__aeabi_idiv0>:
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <Init_LCD>:
static void iopins_ini();
static void ili9488_showArray_wo_coordinates(uint16_t *data, uint32_t count);
/*----------------------------------------------Public  functions-----------------------------------------------------*/
//initialize LCD
void Init_LCD()
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
	interrupt_initialize_priorities();
 8000ba4:	f000 f982 	bl	8000eac <interrupt_initialize_priorities>
	iopins_ini();
 8000ba8:	f000 f988 	bl	8000ebc <iopins_ini>
	initialize_ili9488();
 8000bac:	f000 fb8e 	bl	80012cc <initialize_ili9488>
	LCD_backlight_set(100);
 8000bb0:	2064      	movs	r0, #100	; 0x64
 8000bb2:	f000 f8d1 	bl	8000d58 <LCD_backlight_set>
}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
	...

08000bbc <LCD_fillRect>:
//Draw filled rectangle
void LCD_fillRect(uint16_t x1, uint16_t y1, uint16_t w, uint16_t h, uint16_t color)
{
 8000bbc:	b590      	push	{r4, r7, lr}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4604      	mov	r4, r0
 8000bc4:	4608      	mov	r0, r1
 8000bc6:	4611      	mov	r1, r2
 8000bc8:	461a      	mov	r2, r3
 8000bca:	4623      	mov	r3, r4
 8000bcc:	80fb      	strh	r3, [r7, #6]
 8000bce:	4603      	mov	r3, r0
 8000bd0:	80bb      	strh	r3, [r7, #4]
 8000bd2:	460b      	mov	r3, r1
 8000bd4:	807b      	strh	r3, [r7, #2]
 8000bd6:	4613      	mov	r3, r2
 8000bd8:	803b      	strh	r3, [r7, #0]
	uint32_t count = w * h;
 8000bda:	887b      	ldrh	r3, [r7, #2]
 8000bdc:	883a      	ldrh	r2, [r7, #0]
 8000bde:	fb02 f303 	mul.w	r3, r2, r3
 8000be2:	60bb      	str	r3, [r7, #8]
	LCD_set_coordinates(x1, y1, (uint16_t) (x1 + w - 1), (uint16_t) (y1 + h - 1));
 8000be4:	88fa      	ldrh	r2, [r7, #6]
 8000be6:	887b      	ldrh	r3, [r7, #2]
 8000be8:	4413      	add	r3, r2
 8000bea:	b29b      	uxth	r3, r3
 8000bec:	3b01      	subs	r3, #1
 8000bee:	b29c      	uxth	r4, r3
 8000bf0:	88ba      	ldrh	r2, [r7, #4]
 8000bf2:	883b      	ldrh	r3, [r7, #0]
 8000bf4:	4413      	add	r3, r2
 8000bf6:	b29b      	uxth	r3, r3
 8000bf8:	3b01      	subs	r3, #1
 8000bfa:	b29b      	uxth	r3, r3
 8000bfc:	88b9      	ldrh	r1, [r7, #4]
 8000bfe:	88f8      	ldrh	r0, [r7, #6]
 8000c00:	4622      	mov	r2, r4
 8000c02:	f000 f82f 	bl	8000c64 <LCD_set_coordinates>

	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_RESET);
 8000c06:	2200      	movs	r2, #0
 8000c08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c0c:	4814      	ldr	r0, [pc, #80]	; (8000c60 <LCD_fillRect+0xa4>)
 8000c0e:	f005 f903 	bl	8005e18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_RESET);
 8000c12:	2200      	movs	r2, #0
 8000c14:	2180      	movs	r1, #128	; 0x80
 8000c16:	4812      	ldr	r0, [pc, #72]	; (8000c60 <LCD_fillRect+0xa4>)
 8000c18:	f005 f8fe 	bl	8005e18 <HAL_GPIO_WritePin>
	TFT_REG=0x002C;
 8000c1c:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000c20:	222c      	movs	r2, #44	; 0x2c
 8000c22:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_SET);
 8000c24:	2201      	movs	r2, #1
 8000c26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c2a:	480d      	ldr	r0, [pc, #52]	; (8000c60 <LCD_fillRect+0xa4>)
 8000c2c:	f005 f8f4 	bl	8005e18 <HAL_GPIO_WritePin>

	for(unsigned int i=0; i<count; i++)
 8000c30:	2300      	movs	r3, #0
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	e006      	b.n	8000c44 <LCD_fillRect+0x88>
	{
		TFT_REG=color;
 8000c36:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000c3a:	8c3b      	ldrh	r3, [r7, #32]
 8000c3c:	8013      	strh	r3, [r2, #0]
	for(unsigned int i=0; i<count; i++)
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	3301      	adds	r3, #1
 8000c42:	60fb      	str	r3, [r7, #12]
 8000c44:	68fa      	ldr	r2, [r7, #12]
 8000c46:	68bb      	ldr	r3, [r7, #8]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d3f4      	bcc.n	8000c36 <LCD_fillRect+0x7a>
	}

	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_SET);
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	2180      	movs	r1, #128	; 0x80
 8000c50:	4803      	ldr	r0, [pc, #12]	; (8000c60 <LCD_fillRect+0xa4>)
 8000c52:	f005 f8e1 	bl	8005e18 <HAL_GPIO_WritePin>
}
 8000c56:	bf00      	nop
 8000c58:	3714      	adds	r7, #20
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd90      	pop	{r4, r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40020c00 	.word	0x40020c00

08000c64 <LCD_set_coordinates>:
//Set coordinates for LCD IC
void LCD_set_coordinates(uint16_t x1,uint16_t y1, uint16_t x2, uint16_t y2)
{
 8000c64:	b590      	push	{r4, r7, lr}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4604      	mov	r4, r0
 8000c6c:	4608      	mov	r0, r1
 8000c6e:	4611      	mov	r1, r2
 8000c70:	461a      	mov	r2, r3
 8000c72:	4623      	mov	r3, r4
 8000c74:	80fb      	strh	r3, [r7, #6]
 8000c76:	4603      	mov	r3, r0
 8000c78:	80bb      	strh	r3, [r7, #4]
 8000c7a:	460b      	mov	r3, r1
 8000c7c:	807b      	strh	r3, [r7, #2]
 8000c7e:	4613      	mov	r3, r2
 8000c80:	803b      	strh	r3, [r7, #0]
	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_RESET);
 8000c82:	2200      	movs	r2, #0
 8000c84:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c88:	4832      	ldr	r0, [pc, #200]	; (8000d54 <LCD_set_coordinates+0xf0>)
 8000c8a:	f005 f8c5 	bl	8005e18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_RESET);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2180      	movs	r1, #128	; 0x80
 8000c92:	4830      	ldr	r0, [pc, #192]	; (8000d54 <LCD_set_coordinates+0xf0>)
 8000c94:	f005 f8c0 	bl	8005e18 <HAL_GPIO_WritePin>
	TFT_REG=0x002A;
 8000c98:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000c9c:	222a      	movs	r2, #42	; 0x2a
 8000c9e:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_SET);
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ca6:	482b      	ldr	r0, [pc, #172]	; (8000d54 <LCD_set_coordinates+0xf0>)
 8000ca8:	f005 f8b6 	bl	8005e18 <HAL_GPIO_WritePin>
	TFT_REG=x1>>8;
 8000cac:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000cb0:	88fb      	ldrh	r3, [r7, #6]
 8000cb2:	0a1b      	lsrs	r3, r3, #8
 8000cb4:	b29b      	uxth	r3, r3
 8000cb6:	8013      	strh	r3, [r2, #0]
	TFT_REG=x1&0xFF;
 8000cb8:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000cbc:	88fa      	ldrh	r2, [r7, #6]
 8000cbe:	b2d2      	uxtb	r2, r2
 8000cc0:	b292      	uxth	r2, r2
 8000cc2:	801a      	strh	r2, [r3, #0]
	TFT_REG=x2>>8;
 8000cc4:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000cc8:	887b      	ldrh	r3, [r7, #2]
 8000cca:	0a1b      	lsrs	r3, r3, #8
 8000ccc:	b29b      	uxth	r3, r3
 8000cce:	8013      	strh	r3, [r2, #0]
	TFT_REG=x2&0xFF;
 8000cd0:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000cd4:	887a      	ldrh	r2, [r7, #2]
 8000cd6:	b2d2      	uxtb	r2, r2
 8000cd8:	b292      	uxth	r2, r2
 8000cda:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_SET);
 8000cdc:	2201      	movs	r2, #1
 8000cde:	2180      	movs	r1, #128	; 0x80
 8000ce0:	481c      	ldr	r0, [pc, #112]	; (8000d54 <LCD_set_coordinates+0xf0>)
 8000ce2:	f005 f899 	bl	8005e18 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_RESET);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cec:	4819      	ldr	r0, [pc, #100]	; (8000d54 <LCD_set_coordinates+0xf0>)
 8000cee:	f005 f893 	bl	8005e18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_RESET);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	2180      	movs	r1, #128	; 0x80
 8000cf6:	4817      	ldr	r0, [pc, #92]	; (8000d54 <LCD_set_coordinates+0xf0>)
 8000cf8:	f005 f88e 	bl	8005e18 <HAL_GPIO_WritePin>
	TFT_REG=0x002B;
 8000cfc:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000d00:	222b      	movs	r2, #43	; 0x2b
 8000d02:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_SET);
 8000d04:	2201      	movs	r2, #1
 8000d06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d0a:	4812      	ldr	r0, [pc, #72]	; (8000d54 <LCD_set_coordinates+0xf0>)
 8000d0c:	f005 f884 	bl	8005e18 <HAL_GPIO_WritePin>
	TFT_REG=y1>>8;
 8000d10:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000d14:	88bb      	ldrh	r3, [r7, #4]
 8000d16:	0a1b      	lsrs	r3, r3, #8
 8000d18:	b29b      	uxth	r3, r3
 8000d1a:	8013      	strh	r3, [r2, #0]
	TFT_REG=y1&0xFF;
 8000d1c:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000d20:	88ba      	ldrh	r2, [r7, #4]
 8000d22:	b2d2      	uxtb	r2, r2
 8000d24:	b292      	uxth	r2, r2
 8000d26:	801a      	strh	r2, [r3, #0]
	TFT_REG=y2>>8;
 8000d28:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000d2c:	883b      	ldrh	r3, [r7, #0]
 8000d2e:	0a1b      	lsrs	r3, r3, #8
 8000d30:	b29b      	uxth	r3, r3
 8000d32:	8013      	strh	r3, [r2, #0]
	TFT_REG=y2&0xFF;
 8000d34:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000d38:	883a      	ldrh	r2, [r7, #0]
 8000d3a:	b2d2      	uxtb	r2, r2
 8000d3c:	b292      	uxth	r2, r2
 8000d3e:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_SET);
 8000d40:	2201      	movs	r2, #1
 8000d42:	2180      	movs	r1, #128	; 0x80
 8000d44:	4803      	ldr	r0, [pc, #12]	; (8000d54 <LCD_set_coordinates+0xf0>)
 8000d46:	f005 f867 	bl	8005e18 <HAL_GPIO_WritePin>
}
 8000d4a:	bf00      	nop
 8000d4c:	370c      	adds	r7, #12
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd90      	pop	{r4, r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40020c00 	.word	0x40020c00

08000d58 <LCD_backlight_set>:
//Set PWM duty cycle for LCD back light
void LCD_backlight_set(uint16_t pwm)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b0a6      	sub	sp, #152	; 0x98
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	80fb      	strh	r3, [r7, #6]

	if(pwm>=100)
 8000d62:	88fb      	ldrh	r3, [r7, #6]
 8000d64:	2b63      	cmp	r3, #99	; 0x63
 8000d66:	d902      	bls.n	8000d6e <LCD_backlight_set+0x16>
	{
		pwm=100;
 8000d68:	2364      	movs	r3, #100	; 0x64
 8000d6a:	80fb      	strh	r3, [r7, #6]
 8000d6c:	e004      	b.n	8000d78 <LCD_backlight_set+0x20>
	}else if(pwm <= 0)
 8000d6e:	88fb      	ldrh	r3, [r7, #6]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d101      	bne.n	8000d78 <LCD_backlight_set+0x20>
	{
		pwm = 0;
 8000d74:	2300      	movs	r3, #0
 8000d76:	80fb      	strh	r3, [r7, #6]
	}

	pwm=(unsigned int)((MAX_PWM_PULSE * pwm)/100);
 8000d78:	88fa      	ldrh	r2, [r7, #6]
 8000d7a:	4613      	mov	r3, r2
 8000d7c:	041b      	lsls	r3, r3, #16
 8000d7e:	1a9b      	subs	r3, r3, r2
 8000d80:	4a48      	ldr	r2, [pc, #288]	; (8000ea4 <LCD_backlight_set+0x14c>)
 8000d82:	fb82 1203 	smull	r1, r2, r2, r3
 8000d86:	1152      	asrs	r2, r2, #5
 8000d88:	17db      	asrs	r3, r3, #31
 8000d8a:	1ad3      	subs	r3, r2, r3
 8000d8c:	80fb      	strh	r3, [r7, #6]

	/* Common settings */
      TIM_HandleTypeDef htim1;
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d8e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	605a      	str	r2, [r3, #4]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
 8000da6:	611a      	str	r2, [r3, #16]
 8000da8:	615a      	str	r2, [r3, #20]
 8000daa:	619a      	str	r2, [r3, #24]
	  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000dac:	f107 030c 	add.w	r3, r7, #12
 8000db0:	2220      	movs	r2, #32
 8000db2:	2100      	movs	r1, #0
 8000db4:	4618      	mov	r0, r3
 8000db6:	f008 fdbd 	bl	8009934 <memset>

	  htim1.Instance = TIM1;
 8000dba:	4b3b      	ldr	r3, [pc, #236]	; (8000ea8 <LCD_backlight_set+0x150>)
 8000dbc:	653b      	str	r3, [r7, #80]	; 0x50
	  htim1.Init.Prescaler = 0;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	657b      	str	r3, [r7, #84]	; 0x54
	  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	65bb      	str	r3, [r7, #88]	; 0x58
	  htim1.Init.Period = 65535;
 8000dc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dca:	65fb      	str	r3, [r7, #92]	; 0x5c
	  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	663b      	str	r3, [r7, #96]	; 0x60
	  htim1.Init.RepetitionCounter = 0;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	667b      	str	r3, [r7, #100]	; 0x64
	  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	66bb      	str	r3, [r7, #104]	; 0x68
	  HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_4);
 8000dd8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000ddc:	210c      	movs	r1, #12
 8000dde:	4618      	mov	r0, r3
 8000de0:	f007 f80a 	bl	8007df8 <HAL_TIM_PWM_Stop>
	  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000de4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000de8:	4618      	mov	r0, r3
 8000dea:	f006 feee 	bl	8007bca <HAL_TIM_PWM_Init>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <LCD_backlight_set+0xa0>
	  {
	    Error_Handler();
 8000df4:	f003 fc04 	bl	8004600 <Error_Handler>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	64bb      	str	r3, [r7, #72]	; 0x48
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	64fb      	str	r3, [r7, #76]	; 0x4c
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e00:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000e04:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000e08:	4611      	mov	r1, r2
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f007 fb9c 	bl	8008548 <HAL_TIMEx_MasterConfigSynchronization>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <LCD_backlight_set+0xc2>
	  {
	    Error_Handler();
 8000e16:	f003 fbf3 	bl	8004600 <Error_Handler>
	  }
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e1a:	2360      	movs	r3, #96	; 0x60
 8000e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
	  sConfigOC.Pulse = pwm;
 8000e1e:	88fb      	ldrh	r3, [r7, #6]
 8000e20:	633b      	str	r3, [r7, #48]	; 0x30
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e22:	2300      	movs	r3, #0
 8000e24:	637b      	str	r3, [r7, #52]	; 0x34
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e26:	2300      	movs	r3, #0
 8000e28:	63fb      	str	r3, [r7, #60]	; 0x3c
	  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	643b      	str	r3, [r7, #64]	; 0x40
	  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	647b      	str	r3, [r7, #68]	; 0x44
	  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e32:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8000e36:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000e3a:	220c      	movs	r2, #12
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f007 f84b 	bl	8007ed8 <HAL_TIM_PWM_ConfigChannel>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <LCD_backlight_set+0xf4>
	  {
	    Error_Handler();
 8000e48:	f003 fbda 	bl	8004600 <Error_Handler>
	  }
	  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	60fb      	str	r3, [r7, #12]
	  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e50:	2300      	movs	r3, #0
 8000e52:	613b      	str	r3, [r7, #16]
	  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e54:	2300      	movs	r3, #0
 8000e56:	617b      	str	r3, [r7, #20]
	  sBreakDeadTimeConfig.DeadTime = 0;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	61bb      	str	r3, [r7, #24]
	  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	61fb      	str	r3, [r7, #28]
	  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e64:	623b      	str	r3, [r7, #32]
	  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e66:	2300      	movs	r3, #0
 8000e68:	62bb      	str	r3, [r7, #40]	; 0x28
	  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e6a:	f107 020c 	add.w	r2, r7, #12
 8000e6e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000e72:	4611      	mov	r1, r2
 8000e74:	4618      	mov	r0, r3
 8000e76:	f007 fbe3 	bl	8008640 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <LCD_backlight_set+0x12c>
	  {
	    Error_Handler();
 8000e80:	f003 fbbe 	bl	8004600 <Error_Handler>
	  }

	  HAL_TIM_MspPostInit(&htim1);
 8000e84:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f003 ffc5 	bl	8004e18 <HAL_TIM_MspPostInit>
	  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_4);
 8000e8e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000e92:	210c      	movs	r1, #12
 8000e94:	4618      	mov	r0, r3
 8000e96:	f006 fee7 	bl	8007c68 <HAL_TIM_PWM_Start>


}
 8000e9a:	bf00      	nop
 8000e9c:	3798      	adds	r7, #152	; 0x98
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	51eb851f 	.word	0x51eb851f
 8000ea8:	40010000 	.word	0x40010000

08000eac <interrupt_initialize_priorities>:
	ili9488_showArray_wo_coordinates(color,1);
}

/*----------------------------------------------Private functions-----------------------------------------------------*/
static void interrupt_initialize_priorities()
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4); //4 bits for preemp priority 0 bit for sub priority
 8000eb0:	2003      	movs	r0, #3
 8000eb2:	f004 fd41 	bl	8005938 <HAL_NVIC_SetPriorityGrouping>
}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}
	...

08000ebc <iopins_ini>:
static void iopins_ini()
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b098      	sub	sp, #96	; 0x60
 8000ec0:	af00      	add	r7, sp, #0

	 __GPIOC_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	64bb      	str	r3, [r7, #72]	; 0x48
 8000ec6:	4bac      	ldr	r3, [pc, #688]	; (8001178 <iopins_ini+0x2bc>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	4aab      	ldr	r2, [pc, #684]	; (8001178 <iopins_ini+0x2bc>)
 8000ecc:	f043 0304 	orr.w	r3, r3, #4
 8000ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed2:	4ba9      	ldr	r3, [pc, #676]	; (8001178 <iopins_ini+0x2bc>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	f003 0304 	and.w	r3, r3, #4
 8000eda:	64bb      	str	r3, [r7, #72]	; 0x48
 8000edc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
	 __GPIOD_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	647b      	str	r3, [r7, #68]	; 0x44
 8000ee2:	4ba5      	ldr	r3, [pc, #660]	; (8001178 <iopins_ini+0x2bc>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	4aa4      	ldr	r2, [pc, #656]	; (8001178 <iopins_ini+0x2bc>)
 8000ee8:	f043 0308 	orr.w	r3, r3, #8
 8000eec:	6313      	str	r3, [r2, #48]	; 0x30
 8000eee:	4ba2      	ldr	r3, [pc, #648]	; (8001178 <iopins_ini+0x2bc>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	f003 0308 	and.w	r3, r3, #8
 8000ef6:	647b      	str	r3, [r7, #68]	; 0x44
 8000ef8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
	 __GPIOA_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	643b      	str	r3, [r7, #64]	; 0x40
 8000efe:	4b9e      	ldr	r3, [pc, #632]	; (8001178 <iopins_ini+0x2bc>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	4a9d      	ldr	r2, [pc, #628]	; (8001178 <iopins_ini+0x2bc>)
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0a:	4b9b      	ldr	r3, [pc, #620]	; (8001178 <iopins_ini+0x2bc>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	643b      	str	r3, [r7, #64]	; 0x40
 8000f14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
	 __GPIOB_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f1a:	4b97      	ldr	r3, [pc, #604]	; (8001178 <iopins_ini+0x2bc>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	4a96      	ldr	r2, [pc, #600]	; (8001178 <iopins_ini+0x2bc>)
 8000f20:	f043 0302 	orr.w	r3, r3, #2
 8000f24:	6313      	str	r3, [r2, #48]	; 0x30
 8000f26:	4b94      	ldr	r3, [pc, #592]	; (8001178 <iopins_ini+0x2bc>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	f003 0302 	and.w	r3, r3, #2
 8000f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
	GPIO_InitTypeDef GPIO_InitStruct;

    BUZZER_PORT_RCC();
 8000f32:	2300      	movs	r3, #0
 8000f34:	63bb      	str	r3, [r7, #56]	; 0x38
 8000f36:	4b90      	ldr	r3, [pc, #576]	; (8001178 <iopins_ini+0x2bc>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	4a8f      	ldr	r2, [pc, #572]	; (8001178 <iopins_ini+0x2bc>)
 8000f3c:	f043 0308 	orr.w	r3, r3, #8
 8000f40:	6313      	str	r3, [r2, #48]	; 0x30
 8000f42:	4b8d      	ldr	r3, [pc, #564]	; (8001178 <iopins_ini+0x2bc>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	f003 0308 	and.w	r3, r3, #8
 8000f4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8000f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Pin = BUZZER;
 8000f4e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f52:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f54:	2301      	movs	r3, #1
 8000f56:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	65bb      	str	r3, [r7, #88]	; 0x58
	HAL_GPIO_Init(BUZZER_PORT, &GPIO_InitStruct);
 8000f5c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f60:	4619      	mov	r1, r3
 8000f62:	4886      	ldr	r0, [pc, #536]	; (800117c <iopins_ini+0x2c0>)
 8000f64:	f004 fdbc 	bl	8005ae0 <HAL_GPIO_Init>

    RS485DIR_PORT_RCC();
 8000f68:	2300      	movs	r3, #0
 8000f6a:	637b      	str	r3, [r7, #52]	; 0x34
 8000f6c:	4b82      	ldr	r3, [pc, #520]	; (8001178 <iopins_ini+0x2bc>)
 8000f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f70:	4a81      	ldr	r2, [pc, #516]	; (8001178 <iopins_ini+0x2bc>)
 8000f72:	f043 0301 	orr.w	r3, r3, #1
 8000f76:	6313      	str	r3, [r2, #48]	; 0x30
 8000f78:	4b7f      	ldr	r3, [pc, #508]	; (8001178 <iopins_ini+0x2bc>)
 8000f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7c:	f003 0301 	and.w	r3, r3, #1
 8000f80:	637b      	str	r3, [r7, #52]	; 0x34
 8000f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Pin = RS485DIR;
 8000f84:	2302      	movs	r3, #2
 8000f86:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	65bb      	str	r3, [r7, #88]	; 0x58
	HAL_GPIO_Init(RS485DIR_PORT, &GPIO_InitStruct);
 8000f90:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f94:	4619      	mov	r1, r3
 8000f96:	487a      	ldr	r0, [pc, #488]	; (8001180 <iopins_ini+0x2c4>)
 8000f98:	f004 fda2 	bl	8005ae0 <HAL_GPIO_Init>

    LCD_CS_PORT_RCC();
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	633b      	str	r3, [r7, #48]	; 0x30
 8000fa0:	4b75      	ldr	r3, [pc, #468]	; (8001178 <iopins_ini+0x2bc>)
 8000fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa4:	4a74      	ldr	r2, [pc, #464]	; (8001178 <iopins_ini+0x2bc>)
 8000fa6:	f043 0308 	orr.w	r3, r3, #8
 8000faa:	6313      	str	r3, [r2, #48]	; 0x30
 8000fac:	4b72      	ldr	r3, [pc, #456]	; (8001178 <iopins_ini+0x2bc>)
 8000fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb0:	f003 0308 	and.w	r3, r3, #8
 8000fb4:	633b      	str	r3, [r7, #48]	; 0x30
 8000fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pin = LCD_CS;
 8000fb8:	2380      	movs	r3, #128	; 0x80
 8000fba:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(LCD_CS_PORT, &GPIO_InitStruct);
 8000fc4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000fc8:	4619      	mov	r1, r3
 8000fca:	486c      	ldr	r0, [pc, #432]	; (800117c <iopins_ini+0x2c0>)
 8000fcc:	f004 fd88 	bl	8005ae0 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(LCD_CS_PORT,LCD_CS,GPIO_PIN_SET);
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	2180      	movs	r1, #128	; 0x80
 8000fd4:	4869      	ldr	r0, [pc, #420]	; (800117c <iopins_ini+0x2c0>)
 8000fd6:	f004 ff1f 	bl	8005e18 <HAL_GPIO_WritePin>

    LCD_RES_PORT_RCC();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000fde:	4b66      	ldr	r3, [pc, #408]	; (8001178 <iopins_ini+0x2bc>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	4a65      	ldr	r2, [pc, #404]	; (8001178 <iopins_ini+0x2bc>)
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fea:	4b63      	ldr	r3, [pc, #396]	; (8001178 <iopins_ini+0x2bc>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Pin = LCD_RES;
 8000ff6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ffa:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed =GPIO_SPEED_FREQ_VERY_HIGH;
 8001000:	2303      	movs	r3, #3
 8001002:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(LCD_RES_PORT, &GPIO_InitStruct);
 8001004:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001008:	4619      	mov	r1, r3
 800100a:	485d      	ldr	r0, [pc, #372]	; (8001180 <iopins_ini+0x2c4>)
 800100c:	f004 fd68 	bl	8005ae0 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(LCD_RES_PORT,LCD_RES,GPIO_PIN_RESET);
 8001010:	2200      	movs	r2, #0
 8001012:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001016:	485a      	ldr	r0, [pc, #360]	; (8001180 <iopins_ini+0x2c4>)
 8001018:	f004 fefe 	bl	8005e18 <HAL_GPIO_WritePin>
	delay_ms(50);
 800101c:	2032      	movs	r0, #50	; 0x32
 800101e:	f000 f9cf 	bl	80013c0 <delay_ms>
	HAL_GPIO_WritePin(LCD_RES_PORT,LCD_RES,GPIO_PIN_SET);
 8001022:	2201      	movs	r2, #1
 8001024:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001028:	4855      	ldr	r0, [pc, #340]	; (8001180 <iopins_ini+0x2c4>)
 800102a:	f004 fef5 	bl	8005e18 <HAL_GPIO_WritePin>

    LCD_DCX_PORT_RCC();
 800102e:	2300      	movs	r3, #0
 8001030:	62bb      	str	r3, [r7, #40]	; 0x28
 8001032:	4b51      	ldr	r3, [pc, #324]	; (8001178 <iopins_ini+0x2bc>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	4a50      	ldr	r2, [pc, #320]	; (8001178 <iopins_ini+0x2bc>)
 8001038:	f043 0308 	orr.w	r3, r3, #8
 800103c:	6313      	str	r3, [r2, #48]	; 0x30
 800103e:	4b4e      	ldr	r3, [pc, #312]	; (8001178 <iopins_ini+0x2bc>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	f003 0308 	and.w	r3, r3, #8
 8001046:	62bb      	str	r3, [r7, #40]	; 0x28
 8001048:	6abb      	ldr	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pin = LCD_DCX;
 800104a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800104e:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001050:	2301      	movs	r3, #1
 8001052:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed =GPIO_SPEED_FREQ_VERY_HIGH;
 8001054:	2303      	movs	r3, #3
 8001056:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(LCD_DCX_PORT, &GPIO_InitStruct);
 8001058:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800105c:	4619      	mov	r1, r3
 800105e:	4847      	ldr	r0, [pc, #284]	; (800117c <iopins_ini+0x2c0>)
 8001060:	f004 fd3e 	bl	8005ae0 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(LCD_DCX_PORT,LCD_DCX,GPIO_PIN_SET);
 8001064:	2201      	movs	r2, #1
 8001066:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800106a:	4844      	ldr	r0, [pc, #272]	; (800117c <iopins_ini+0x2c0>)
 800106c:	f004 fed4 	bl	8005e18 <HAL_GPIO_WritePin>

    FLASH_CS_PORT_RCC();
 8001070:	2300      	movs	r3, #0
 8001072:	627b      	str	r3, [r7, #36]	; 0x24
 8001074:	4b40      	ldr	r3, [pc, #256]	; (8001178 <iopins_ini+0x2bc>)
 8001076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001078:	4a3f      	ldr	r2, [pc, #252]	; (8001178 <iopins_ini+0x2bc>)
 800107a:	f043 0301 	orr.w	r3, r3, #1
 800107e:	6313      	str	r3, [r2, #48]	; 0x30
 8001080:	4b3d      	ldr	r3, [pc, #244]	; (8001178 <iopins_ini+0x2bc>)
 8001082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001084:	f003 0301 	and.w	r3, r3, #1
 8001088:	627b      	str	r3, [r7, #36]	; 0x24
 800108a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Pin = FLASH_CS;
 800108c:	2310      	movs	r3, #16
 800108e:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001090:	2301      	movs	r3, #1
 8001092:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed =GPIO_SPEED_FREQ_VERY_HIGH;
 8001094:	2303      	movs	r3, #3
 8001096:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(FLASH_CS_PORT, &GPIO_InitStruct);
 8001098:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800109c:	4619      	mov	r1, r3
 800109e:	4838      	ldr	r0, [pc, #224]	; (8001180 <iopins_ini+0x2c4>)
 80010a0:	f004 fd1e 	bl	8005ae0 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(FLASH_CS_PORT,FLASH_CS,GPIO_PIN_SET);
 80010a4:	2201      	movs	r2, #1
 80010a6:	2110      	movs	r1, #16
 80010a8:	4835      	ldr	r0, [pc, #212]	; (8001180 <iopins_ini+0x2c4>)
 80010aa:	f004 feb5 	bl	8005e18 <HAL_GPIO_WritePin>

    FLASH_WP_PORT_RCC();
 80010ae:	2300      	movs	r3, #0
 80010b0:	623b      	str	r3, [r7, #32]
 80010b2:	4b31      	ldr	r3, [pc, #196]	; (8001178 <iopins_ini+0x2bc>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	4a30      	ldr	r2, [pc, #192]	; (8001178 <iopins_ini+0x2bc>)
 80010b8:	f043 0304 	orr.w	r3, r3, #4
 80010bc:	6313      	str	r3, [r2, #48]	; 0x30
 80010be:	4b2e      	ldr	r3, [pc, #184]	; (8001178 <iopins_ini+0x2bc>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	f003 0304 	and.w	r3, r3, #4
 80010c6:	623b      	str	r3, [r7, #32]
 80010c8:	6a3b      	ldr	r3, [r7, #32]
	GPIO_InitStruct.Pin = FLASH_WP;
 80010ca:	2310      	movs	r3, #16
 80010cc:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ce:	2301      	movs	r3, #1
 80010d0:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d2:	2300      	movs	r3, #0
 80010d4:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(FLASH_WP_PORT, &GPIO_InitStruct);
 80010d6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80010da:	4619      	mov	r1, r3
 80010dc:	4829      	ldr	r0, [pc, #164]	; (8001184 <iopins_ini+0x2c8>)
 80010de:	f004 fcff 	bl	8005ae0 <HAL_GPIO_Init>
	 HAL_GPIO_WritePin(FLASH_WP_PORT,FLASH_WP,GPIO_PIN_RESET);
 80010e2:	2200      	movs	r2, #0
 80010e4:	2110      	movs	r1, #16
 80010e6:	4827      	ldr	r0, [pc, #156]	; (8001184 <iopins_ini+0x2c8>)
 80010e8:	f004 fe96 	bl	8005e18 <HAL_GPIO_WritePin>

    FRAM_CS_PORT_RCC();
 80010ec:	2300      	movs	r3, #0
 80010ee:	61fb      	str	r3, [r7, #28]
 80010f0:	4b21      	ldr	r3, [pc, #132]	; (8001178 <iopins_ini+0x2bc>)
 80010f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f4:	4a20      	ldr	r2, [pc, #128]	; (8001178 <iopins_ini+0x2bc>)
 80010f6:	f043 0302 	orr.w	r3, r3, #2
 80010fa:	6313      	str	r3, [r2, #48]	; 0x30
 80010fc:	4b1e      	ldr	r3, [pc, #120]	; (8001178 <iopins_ini+0x2bc>)
 80010fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001100:	f003 0302 	and.w	r3, r3, #2
 8001104:	61fb      	str	r3, [r7, #28]
 8001106:	69fb      	ldr	r3, [r7, #28]
	GPIO_InitStruct.Pin = FRAM_CS;
 8001108:	f44f 7300 	mov.w	r3, #512	; 0x200
 800110c:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110e:	2301      	movs	r3, #1
 8001110:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed =GPIO_SPEED_FREQ_VERY_HIGH;
 8001112:	2303      	movs	r3, #3
 8001114:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(FRAM_CS_PORT, &GPIO_InitStruct);
 8001116:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800111a:	4619      	mov	r1, r3
 800111c:	481a      	ldr	r0, [pc, #104]	; (8001188 <iopins_ini+0x2cc>)
 800111e:	f004 fcdf 	bl	8005ae0 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(FRAM_CS_PORT,FRAM_CS,GPIO_PIN_SET);
 8001122:	2201      	movs	r2, #1
 8001124:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001128:	4817      	ldr	r0, [pc, #92]	; (8001188 <iopins_ini+0x2cc>)
 800112a:	f004 fe75 	bl	8005e18 <HAL_GPIO_WritePin>

    FRAM_HOLD_PORT_RCC();
 800112e:	2300      	movs	r3, #0
 8001130:	61bb      	str	r3, [r7, #24]
 8001132:	4b11      	ldr	r3, [pc, #68]	; (8001178 <iopins_ini+0x2bc>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	4a10      	ldr	r2, [pc, #64]	; (8001178 <iopins_ini+0x2bc>)
 8001138:	f043 0304 	orr.w	r3, r3, #4
 800113c:	6313      	str	r3, [r2, #48]	; 0x30
 800113e:	4b0e      	ldr	r3, [pc, #56]	; (8001178 <iopins_ini+0x2bc>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	f003 0304 	and.w	r3, r3, #4
 8001146:	61bb      	str	r3, [r7, #24]
 8001148:	69bb      	ldr	r3, [r7, #24]
	GPIO_InitStruct.Pin = FRAM_HOLD;
 800114a:	2302      	movs	r3, #2
 800114c:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800114e:	2301      	movs	r3, #1
 8001150:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed =GPIO_SPEED_FREQ_VERY_HIGH;
 8001152:	2303      	movs	r3, #3
 8001154:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(FRAM_HOLD_PORT, &GPIO_InitStruct);
 8001156:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800115a:	4619      	mov	r1, r3
 800115c:	4809      	ldr	r0, [pc, #36]	; (8001184 <iopins_ini+0x2c8>)
 800115e:	f004 fcbf 	bl	8005ae0 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(FRAM_HOLD_PORT,FRAM_HOLD,GPIO_PIN_SET);
 8001162:	2201      	movs	r2, #1
 8001164:	2102      	movs	r1, #2
 8001166:	4807      	ldr	r0, [pc, #28]	; (8001184 <iopins_ini+0x2c8>)
 8001168:	f004 fe56 	bl	8005e18 <HAL_GPIO_WritePin>

    FRAM_WP_PORT_RCC();
 800116c:	2300      	movs	r3, #0
 800116e:	617b      	str	r3, [r7, #20]
 8001170:	4b01      	ldr	r3, [pc, #4]	; (8001178 <iopins_ini+0x2bc>)
 8001172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001174:	e00a      	b.n	800118c <iopins_ini+0x2d0>
 8001176:	bf00      	nop
 8001178:	40023800 	.word	0x40023800
 800117c:	40020c00 	.word	0x40020c00
 8001180:	40020000 	.word	0x40020000
 8001184:	40020800 	.word	0x40020800
 8001188:	40020400 	.word	0x40020400
 800118c:	4a4b      	ldr	r2, [pc, #300]	; (80012bc <iopins_ini+0x400>)
 800118e:	f043 0304 	orr.w	r3, r3, #4
 8001192:	6313      	str	r3, [r2, #48]	; 0x30
 8001194:	4b49      	ldr	r3, [pc, #292]	; (80012bc <iopins_ini+0x400>)
 8001196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001198:	f003 0304 	and.w	r3, r3, #4
 800119c:	617b      	str	r3, [r7, #20]
 800119e:	697b      	ldr	r3, [r7, #20]
	GPIO_InitStruct.Pin = FRAM_WP;
 80011a0:	2301      	movs	r3, #1
 80011a2:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a4:	2301      	movs	r3, #1
 80011a6:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a8:	2300      	movs	r3, #0
 80011aa:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(FRAM_WP_PORT, &GPIO_InitStruct);
 80011ac:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80011b0:	4619      	mov	r1, r3
 80011b2:	4843      	ldr	r0, [pc, #268]	; (80012c0 <iopins_ini+0x404>)
 80011b4:	f004 fc94 	bl	8005ae0 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(FRAM_WP_PORT,FRAM_WP,GPIO_PIN_SET);
 80011b8:	2201      	movs	r2, #1
 80011ba:	2101      	movs	r1, #1
 80011bc:	4840      	ldr	r0, [pc, #256]	; (80012c0 <iopins_ini+0x404>)
 80011be:	f004 fe2b 	bl	8005e18 <HAL_GPIO_WritePin>


    LED_DBG_PORT_RCC();
 80011c2:	2300      	movs	r3, #0
 80011c4:	613b      	str	r3, [r7, #16]
 80011c6:	4b3d      	ldr	r3, [pc, #244]	; (80012bc <iopins_ini+0x400>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	4a3c      	ldr	r2, [pc, #240]	; (80012bc <iopins_ini+0x400>)
 80011cc:	f043 0302 	orr.w	r3, r3, #2
 80011d0:	6313      	str	r3, [r2, #48]	; 0x30
 80011d2:	4b3a      	ldr	r3, [pc, #232]	; (80012bc <iopins_ini+0x400>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	f003 0302 	and.w	r3, r3, #2
 80011da:	613b      	str	r3, [r7, #16]
 80011dc:	693b      	ldr	r3, [r7, #16]
	GPIO_InitStruct.Pin = LED_DBG_1;
 80011de:	2308      	movs	r3, #8
 80011e0:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e2:	2301      	movs	r3, #1
 80011e4:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e6:	2300      	movs	r3, #0
 80011e8:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(LED_DBG_PORT, &GPIO_InitStruct);
 80011ea:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80011ee:	4619      	mov	r1, r3
 80011f0:	4834      	ldr	r0, [pc, #208]	; (80012c4 <iopins_ini+0x408>)
 80011f2:	f004 fc75 	bl	8005ae0 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(LED_DBG_PORT,LED_DBG_1,GPIO_PIN_SET);
 80011f6:	2201      	movs	r2, #1
 80011f8:	2108      	movs	r1, #8
 80011fa:	4832      	ldr	r0, [pc, #200]	; (80012c4 <iopins_ini+0x408>)
 80011fc:	f004 fe0c 	bl	8005e18 <HAL_GPIO_WritePin>


    BUTTON_0_PORT_RCC();
 8001200:	2300      	movs	r3, #0
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	4b2d      	ldr	r3, [pc, #180]	; (80012bc <iopins_ini+0x400>)
 8001206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001208:	4a2c      	ldr	r2, [pc, #176]	; (80012bc <iopins_ini+0x400>)
 800120a:	f043 0301 	orr.w	r3, r3, #1
 800120e:	6313      	str	r3, [r2, #48]	; 0x30
 8001210:	4b2a      	ldr	r3, [pc, #168]	; (80012bc <iopins_ini+0x400>)
 8001212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001214:	f003 0301 	and.w	r3, r3, #1
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	68fb      	ldr	r3, [r7, #12]
	GPIO_InitStruct.Pin = BUTTON_0;
 800121c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001220:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001222:	2300      	movs	r3, #0
 8001224:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Pull= GPIO_NOPULL;
 8001226:	2300      	movs	r3, #0
 8001228:	657b      	str	r3, [r7, #84]	; 0x54
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122a:	2300      	movs	r3, #0
 800122c:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(BUTTON_0_PORT, &GPIO_InitStruct);
 800122e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001232:	4619      	mov	r1, r3
 8001234:	4824      	ldr	r0, [pc, #144]	; (80012c8 <iopins_ini+0x40c>)
 8001236:	f004 fc53 	bl	8005ae0 <HAL_GPIO_Init>

    BUTTON_1_PORT_RCC();
 800123a:	2300      	movs	r3, #0
 800123c:	60bb      	str	r3, [r7, #8]
 800123e:	4b1f      	ldr	r3, [pc, #124]	; (80012bc <iopins_ini+0x400>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	4a1e      	ldr	r2, [pc, #120]	; (80012bc <iopins_ini+0x400>)
 8001244:	f043 0304 	orr.w	r3, r3, #4
 8001248:	6313      	str	r3, [r2, #48]	; 0x30
 800124a:	4b1c      	ldr	r3, [pc, #112]	; (80012bc <iopins_ini+0x400>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	f003 0304 	and.w	r3, r3, #4
 8001252:	60bb      	str	r3, [r7, #8]
 8001254:	68bb      	ldr	r3, [r7, #8]
	GPIO_InitStruct.Pin = BUTTON_1;
 8001256:	f44f 7300 	mov.w	r3, #512	; 0x200
 800125a:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800125c:	2300      	movs	r3, #0
 800125e:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Pull= GPIO_NOPULL;
 8001260:	2300      	movs	r3, #0
 8001262:	657b      	str	r3, [r7, #84]	; 0x54
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001264:	2300      	movs	r3, #0
 8001266:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(BUTTON_1_PORT, &GPIO_InitStruct);
 8001268:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800126c:	4619      	mov	r1, r3
 800126e:	4814      	ldr	r0, [pc, #80]	; (80012c0 <iopins_ini+0x404>)
 8001270:	f004 fc36 	bl	8005ae0 <HAL_GPIO_Init>


    TOUCH_RESET_PORT_RCC();
 8001274:	2300      	movs	r3, #0
 8001276:	607b      	str	r3, [r7, #4]
 8001278:	4b10      	ldr	r3, [pc, #64]	; (80012bc <iopins_ini+0x400>)
 800127a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127c:	4a0f      	ldr	r2, [pc, #60]	; (80012bc <iopins_ini+0x400>)
 800127e:	f043 0302 	orr.w	r3, r3, #2
 8001282:	6313      	str	r3, [r2, #48]	; 0x30
 8001284:	4b0d      	ldr	r3, [pc, #52]	; (80012bc <iopins_ini+0x400>)
 8001286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001288:	f003 0302 	and.w	r3, r3, #2
 800128c:	607b      	str	r3, [r7, #4]
 800128e:	687b      	ldr	r3, [r7, #4]
	GPIO_InitStruct.Pin = TOUCH_RESET;
 8001290:	2320      	movs	r3, #32
 8001292:	64fb      	str	r3, [r7, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001294:	2301      	movs	r3, #1
 8001296:	653b      	str	r3, [r7, #80]	; 0x50
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001298:	2300      	movs	r3, #0
 800129a:	65bb      	str	r3, [r7, #88]	; 0x58
	 HAL_GPIO_Init(TOUCH_RESET_PORT, &GPIO_InitStruct);
 800129c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80012a0:	4619      	mov	r1, r3
 80012a2:	4808      	ldr	r0, [pc, #32]	; (80012c4 <iopins_ini+0x408>)
 80012a4:	f004 fc1c 	bl	8005ae0 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(TOUCH_RESET_PORT,TOUCH_RESET,GPIO_PIN_SET);
 80012a8:	2201      	movs	r2, #1
 80012aa:	2120      	movs	r1, #32
 80012ac:	4805      	ldr	r0, [pc, #20]	; (80012c4 <iopins_ini+0x408>)
 80012ae:	f004 fdb3 	bl	8005e18 <HAL_GPIO_WritePin>
}
 80012b2:	bf00      	nop
 80012b4:	3760      	adds	r7, #96	; 0x60
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40023800 	.word	0x40023800
 80012c0:	40020800 	.word	0x40020800
 80012c4:	40020400 	.word	0x40020400
 80012c8:	40020000 	.word	0x40020000

080012cc <initialize_ili9488>:
static void initialize_ili9488()
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af02      	add	r7, sp, #8
	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_RESET);
 80012d2:	2200      	movs	r2, #0
 80012d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012d8:	4838      	ldr	r0, [pc, #224]	; (80013bc <initialize_ili9488+0xf0>)
 80012da:	f004 fd9d 	bl	8005e18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_RESET);
 80012de:	2200      	movs	r2, #0
 80012e0:	2180      	movs	r1, #128	; 0x80
 80012e2:	4836      	ldr	r0, [pc, #216]	; (80013bc <initialize_ili9488+0xf0>)
 80012e4:	f004 fd98 	bl	8005e18 <HAL_GPIO_WritePin>
	TFT_REG=0x0011;
 80012e8:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80012ec:	2211      	movs	r2, #17
 80012ee:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_SET);
 80012f0:	2201      	movs	r2, #1
 80012f2:	2180      	movs	r1, #128	; 0x80
 80012f4:	4831      	ldr	r0, [pc, #196]	; (80013bc <initialize_ili9488+0xf0>)
 80012f6:	f004 fd8f 	bl	8005e18 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_RESET);
 80012fa:	2200      	movs	r2, #0
 80012fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001300:	482e      	ldr	r0, [pc, #184]	; (80013bc <initialize_ili9488+0xf0>)
 8001302:	f004 fd89 	bl	8005e18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS, GPIO_PIN_RESET);
 8001306:	2200      	movs	r2, #0
 8001308:	2180      	movs	r1, #128	; 0x80
 800130a:	482c      	ldr	r0, [pc, #176]	; (80013bc <initialize_ili9488+0xf0>)
 800130c:	f004 fd84 	bl	8005e18 <HAL_GPIO_WritePin>
	TFT_REG=0x0029;
 8001310:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8001314:	2229      	movs	r2, #41	; 0x29
 8001316:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS, GPIO_PIN_SET);
 8001318:	2201      	movs	r2, #1
 800131a:	2180      	movs	r1, #128	; 0x80
 800131c:	4827      	ldr	r0, [pc, #156]	; (80013bc <initialize_ili9488+0xf0>)
 800131e:	f004 fd7b 	bl	8005e18 <HAL_GPIO_WritePin>


	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_RESET);
 8001322:	2200      	movs	r2, #0
 8001324:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001328:	4824      	ldr	r0, [pc, #144]	; (80013bc <initialize_ili9488+0xf0>)
 800132a:	f004 fd75 	bl	8005e18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_RESET);
 800132e:	2200      	movs	r2, #0
 8001330:	2180      	movs	r1, #128	; 0x80
 8001332:	4822      	ldr	r0, [pc, #136]	; (80013bc <initialize_ili9488+0xf0>)
 8001334:	f004 fd70 	bl	8005e18 <HAL_GPIO_WritePin>
	TFT_REG=0x003A;
 8001338:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800133c:	223a      	movs	r2, #58	; 0x3a
 800133e:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_SET);
 8001340:	2201      	movs	r2, #1
 8001342:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001346:	481d      	ldr	r0, [pc, #116]	; (80013bc <initialize_ili9488+0xf0>)
 8001348:	f004 fd66 	bl	8005e18 <HAL_GPIO_WritePin>
	TFT_REG=0x0055;
 800134c:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8001350:	2255      	movs	r2, #85	; 0x55
 8001352:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS, GPIO_PIN_RESET);
 8001354:	2200      	movs	r2, #0
 8001356:	2180      	movs	r1, #128	; 0x80
 8001358:	4818      	ldr	r0, [pc, #96]	; (80013bc <initialize_ili9488+0xf0>)
 800135a:	f004 fd5d 	bl	8005e18 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_RESET);
 800135e:	2200      	movs	r2, #0
 8001360:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001364:	4815      	ldr	r0, [pc, #84]	; (80013bc <initialize_ili9488+0xf0>)
 8001366:	f004 fd57 	bl	8005e18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_RESET);
 800136a:	2200      	movs	r2, #0
 800136c:	2180      	movs	r1, #128	; 0x80
 800136e:	4813      	ldr	r0, [pc, #76]	; (80013bc <initialize_ili9488+0xf0>)
 8001370:	f004 fd52 	bl	8005e18 <HAL_GPIO_WritePin>
	TFT_REG=0x0036;
 8001374:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8001378:	2236      	movs	r2, #54	; 0x36
 800137a:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_DCX_PORT, LCD_DCX,GPIO_PIN_SET);
 800137c:	2201      	movs	r2, #1
 800137e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001382:	480e      	ldr	r0, [pc, #56]	; (80013bc <initialize_ili9488+0xf0>)
 8001384:	f004 fd48 	bl	8005e18 <HAL_GPIO_WritePin>
	TFT_REG=0x00E8;
 8001388:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800138c:	22e8      	movs	r2, #232	; 0xe8
 800138e:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_RESET);
 8001390:	2200      	movs	r2, #0
 8001392:	2180      	movs	r1, #128	; 0x80
 8001394:	4809      	ldr	r0, [pc, #36]	; (80013bc <initialize_ili9488+0xf0>)
 8001396:	f004 fd3f 	bl	8005e18 <HAL_GPIO_WritePin>

	delay_ms(100);
 800139a:	2064      	movs	r0, #100	; 0x64
 800139c:	f000 f810 	bl	80013c0 <delay_ms>
	LCD_fillRect(0,0,LCD_PIXEL_WIDTH,LCD_PIXEL_HEIGHT,ORANGE);
 80013a0:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80013a4:	9300      	str	r3, [sp, #0]
 80013a6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80013aa:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80013ae:	2100      	movs	r1, #0
 80013b0:	2000      	movs	r0, #0
 80013b2:	f7ff fc03 	bl	8000bbc <LCD_fillRect>
}
 80013b6:	bf00      	nop
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	40020c00 	.word	0x40020c00

080013c0 <delay_ms>:
	{
		TFT_REG=data[i];
	}
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS,GPIO_PIN_SET);
}
static void delay_ms(__IO uint32_t nCount1) {
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
	__IO uint32_t nCount=nCount1*23666;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f645 4272 	movw	r2, #23666	; 0x5c72
 80013ce:	fb02 f303 	mul.w	r3, r2, r3
 80013d2:	60fb      	str	r3, [r7, #12]
	while(nCount--) {
 80013d4:	bf00      	nop
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	1e5a      	subs	r2, r3, #1
 80013da:	60fa      	str	r2, [r7, #12]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d1fa      	bne.n	80013d6 <delay_ms+0x16>
  }
}
 80013e0:	bf00      	nop
 80013e2:	bf00      	nop
 80013e4:	3714      	adds	r7, #20
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
	...

080013f0 <touch_init>:
/*----------------------------------------------Public function-----------------------------------------------------*/
// Initialize touch screen
void set_page(uint8_t page){active_page = page;}
void set_layer(uint8_t layer){active_layer = layer;}
void touch_init(I2C_HandleTypeDef def)
{
 80013f0:	b084      	sub	sp, #16
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b084      	sub	sp, #16
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	f107 0c18 	add.w	ip, r7, #24
 80013fc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	hi2c1_touch = def;
 8001400:	4b66      	ldr	r3, [pc, #408]	; (800159c <touch_init+0x1ac>)
 8001402:	4618      	mov	r0, r3
 8001404:	f107 0318 	add.w	r3, r7, #24
 8001408:	2254      	movs	r2, #84	; 0x54
 800140a:	4619      	mov	r1, r3
 800140c:	f008 fa84 	bl	8009918 <memcpy>
	touch_write_register(0x0E,0xC000);
 8001410:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001414:	200e      	movs	r0, #14
 8001416:	f000 fa95 	bl	8001944 <touch_write_register>
	touch_write_control(0x80);
 800141a:	2080      	movs	r0, #128	; 0x80
 800141c:	f000 fa7a 	bl	8001914 <touch_write_control>
	for(int p = 0;p <MAX_NUM_PAGES; p++)
 8001420:	2300      	movs	r3, #0
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	e093      	b.n	800154e <touch_init+0x15e>
	{
		for(int l = 0;l <MAX_NUM_LAYERS; l++)
 8001426:	2300      	movs	r3, #0
 8001428:	60bb      	str	r3, [r7, #8]
 800142a:	e089      	b.n	8001540 <touch_init+0x150>
		{

			for(int i = 0;i <MAX_NUM_ELEMENTS; i++)
 800142c:	2300      	movs	r3, #0
 800142e:	607b      	str	r3, [r7, #4]
 8001430:	e07f      	b.n	8001532 <touch_init+0x142>
			{
				touch_elements_register[p][l][i].x = 0;
 8001432:	485b      	ldr	r0, [pc, #364]	; (80015a0 <touch_init+0x1b0>)
 8001434:	68ba      	ldr	r2, [r7, #8]
 8001436:	68f9      	ldr	r1, [r7, #12]
 8001438:	4613      	mov	r3, r2
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	4413      	add	r3, r2
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	2264      	movs	r2, #100	; 0x64
 8001442:	fb01 f202 	mul.w	r2, r1, r2
 8001446:	441a      	add	r2, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	4413      	add	r3, r2
 800144c:	011b      	lsls	r3, r3, #4
 800144e:	4403      	add	r3, r0
 8001450:	2200      	movs	r2, #0
 8001452:	801a      	strh	r2, [r3, #0]
				touch_elements_register[p][l][i].x1 = 0;
 8001454:	4852      	ldr	r0, [pc, #328]	; (80015a0 <touch_init+0x1b0>)
 8001456:	68ba      	ldr	r2, [r7, #8]
 8001458:	68f9      	ldr	r1, [r7, #12]
 800145a:	4613      	mov	r3, r2
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	4413      	add	r3, r2
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	2264      	movs	r2, #100	; 0x64
 8001464:	fb01 f202 	mul.w	r2, r1, r2
 8001468:	441a      	add	r2, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4413      	add	r3, r2
 800146e:	011b      	lsls	r3, r3, #4
 8001470:	4403      	add	r3, r0
 8001472:	3304      	adds	r3, #4
 8001474:	2200      	movs	r2, #0
 8001476:	801a      	strh	r2, [r3, #0]
				touch_elements_register[p][l][i].y = 0;
 8001478:	4849      	ldr	r0, [pc, #292]	; (80015a0 <touch_init+0x1b0>)
 800147a:	68ba      	ldr	r2, [r7, #8]
 800147c:	68f9      	ldr	r1, [r7, #12]
 800147e:	4613      	mov	r3, r2
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	4413      	add	r3, r2
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	2264      	movs	r2, #100	; 0x64
 8001488:	fb01 f202 	mul.w	r2, r1, r2
 800148c:	441a      	add	r2, r3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4413      	add	r3, r2
 8001492:	011b      	lsls	r3, r3, #4
 8001494:	4403      	add	r3, r0
 8001496:	3302      	adds	r3, #2
 8001498:	2200      	movs	r2, #0
 800149a:	801a      	strh	r2, [r3, #0]
				touch_elements_register[p][l][i].y1 = 0;
 800149c:	4840      	ldr	r0, [pc, #256]	; (80015a0 <touch_init+0x1b0>)
 800149e:	68ba      	ldr	r2, [r7, #8]
 80014a0:	68f9      	ldr	r1, [r7, #12]
 80014a2:	4613      	mov	r3, r2
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	4413      	add	r3, r2
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	2264      	movs	r2, #100	; 0x64
 80014ac:	fb01 f202 	mul.w	r2, r1, r2
 80014b0:	441a      	add	r2, r3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4413      	add	r3, r2
 80014b6:	011b      	lsls	r3, r3, #4
 80014b8:	4403      	add	r3, r0
 80014ba:	3306      	adds	r3, #6
 80014bc:	2200      	movs	r2, #0
 80014be:	801a      	strh	r2, [r3, #0]
				touch_elements_register[p][l][i].element_type = 0;
 80014c0:	4837      	ldr	r0, [pc, #220]	; (80015a0 <touch_init+0x1b0>)
 80014c2:	68ba      	ldr	r2, [r7, #8]
 80014c4:	68f9      	ldr	r1, [r7, #12]
 80014c6:	4613      	mov	r3, r2
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	4413      	add	r3, r2
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	2264      	movs	r2, #100	; 0x64
 80014d0:	fb01 f202 	mul.w	r2, r1, r2
 80014d4:	441a      	add	r2, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4413      	add	r3, r2
 80014da:	011b      	lsls	r3, r3, #4
 80014dc:	4403      	add	r3, r0
 80014de:	3308      	adds	r3, #8
 80014e0:	2200      	movs	r2, #0
 80014e2:	701a      	strb	r2, [r3, #0]
				touch_elements_register[p][l][i].isAlive = 0;
 80014e4:	482e      	ldr	r0, [pc, #184]	; (80015a0 <touch_init+0x1b0>)
 80014e6:	68ba      	ldr	r2, [r7, #8]
 80014e8:	68f9      	ldr	r1, [r7, #12]
 80014ea:	4613      	mov	r3, r2
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	4413      	add	r3, r2
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	2264      	movs	r2, #100	; 0x64
 80014f4:	fb01 f202 	mul.w	r2, r1, r2
 80014f8:	441a      	add	r2, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4413      	add	r3, r2
 80014fe:	011b      	lsls	r3, r3, #4
 8001500:	4403      	add	r3, r0
 8001502:	3309      	adds	r3, #9
 8001504:	2200      	movs	r2, #0
 8001506:	701a      	strb	r2, [r3, #0]
				touch_elements_register[p][l][i].element_pointer = 0;
 8001508:	4825      	ldr	r0, [pc, #148]	; (80015a0 <touch_init+0x1b0>)
 800150a:	68ba      	ldr	r2, [r7, #8]
 800150c:	68f9      	ldr	r1, [r7, #12]
 800150e:	4613      	mov	r3, r2
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	4413      	add	r3, r2
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	2264      	movs	r2, #100	; 0x64
 8001518:	fb01 f202 	mul.w	r2, r1, r2
 800151c:	441a      	add	r2, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4413      	add	r3, r2
 8001522:	011b      	lsls	r3, r3, #4
 8001524:	4403      	add	r3, r0
 8001526:	330c      	adds	r3, #12
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
			for(int i = 0;i <MAX_NUM_ELEMENTS; i++)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	3301      	adds	r3, #1
 8001530:	607b      	str	r3, [r7, #4]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2b13      	cmp	r3, #19
 8001536:	f77f af7c 	ble.w	8001432 <touch_init+0x42>
		for(int l = 0;l <MAX_NUM_LAYERS; l++)
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	3301      	adds	r3, #1
 800153e:	60bb      	str	r3, [r7, #8]
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	2b04      	cmp	r3, #4
 8001544:	f77f af72 	ble.w	800142c <touch_init+0x3c>
	for(int p = 0;p <MAX_NUM_PAGES; p++)
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	3301      	adds	r3, #1
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	2b04      	cmp	r3, #4
 8001552:	f77f af68 	ble.w	8001426 <touch_init+0x36>
			}
		}
	}
	pressed_element.x = 0;
 8001556:	4b13      	ldr	r3, [pc, #76]	; (80015a4 <touch_init+0x1b4>)
 8001558:	2200      	movs	r2, #0
 800155a:	801a      	strh	r2, [r3, #0]
	pressed_element.x1 = 0;
 800155c:	4b11      	ldr	r3, [pc, #68]	; (80015a4 <touch_init+0x1b4>)
 800155e:	2200      	movs	r2, #0
 8001560:	809a      	strh	r2, [r3, #4]
	pressed_element.y = 0;
 8001562:	4b10      	ldr	r3, [pc, #64]	; (80015a4 <touch_init+0x1b4>)
 8001564:	2200      	movs	r2, #0
 8001566:	805a      	strh	r2, [r3, #2]
	pressed_element.y1 = 0;
 8001568:	4b0e      	ldr	r3, [pc, #56]	; (80015a4 <touch_init+0x1b4>)
 800156a:	2200      	movs	r2, #0
 800156c:	80da      	strh	r2, [r3, #6]
	pressed_element.element_type = 0;
 800156e:	4b0d      	ldr	r3, [pc, #52]	; (80015a4 <touch_init+0x1b4>)
 8001570:	2200      	movs	r2, #0
 8001572:	721a      	strb	r2, [r3, #8]
	pressed_element.element_pointer = 0;
 8001574:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <touch_init+0x1b4>)
 8001576:	2200      	movs	r2, #0
 8001578:	60da      	str	r2, [r3, #12]
	pressed_element.isAlive = 0;
 800157a:	4b0a      	ldr	r3, [pc, #40]	; (80015a4 <touch_init+0x1b4>)
 800157c:	2200      	movs	r2, #0
 800157e:	725a      	strb	r2, [r3, #9]
	active_layer = 0;
 8001580:	4b09      	ldr	r3, [pc, #36]	; (80015a8 <touch_init+0x1b8>)
 8001582:	2200      	movs	r2, #0
 8001584:	701a      	strb	r2, [r3, #0]
	active_page = 0;
 8001586:	4b09      	ldr	r3, [pc, #36]	; (80015ac <touch_init+0x1bc>)
 8001588:	2200      	movs	r2, #0
 800158a:	701a      	strb	r2, [r3, #0]
}
 800158c:	bf00      	nop
 800158e:	3710      	adds	r7, #16
 8001590:	46bd      	mov	sp, r7
 8001592:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001596:	b004      	add	sp, #16
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	200000a4 	.word	0x200000a4
 80015a0:	2000011c 	.word	0x2000011c
 80015a4:	20000108 	.word	0x20000108
 80015a8:	20000119 	.word	0x20000119
 80015ac:	20000118 	.word	0x20000118

080015b0 <touch_reset>:
// Reset touch screen IC module
void touch_reset()
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
 	HAL_GPIO_WritePin(TOUCH_RESET_PORT,TOUCH_RESET,GPIO_PIN_RESET);
 80015b4:	2200      	movs	r2, #0
 80015b6:	2120      	movs	r1, #32
 80015b8:	4807      	ldr	r0, [pc, #28]	; (80015d8 <touch_reset+0x28>)
 80015ba:	f004 fc2d 	bl	8005e18 <HAL_GPIO_WritePin>
 	delay_ms(10);
 80015be:	200a      	movs	r0, #10
 80015c0:	f000 fad0 	bl	8001b64 <delay_ms>
 	HAL_GPIO_WritePin(TOUCH_RESET_PORT,TOUCH_RESET,GPIO_PIN_SET);
 80015c4:	2201      	movs	r2, #1
 80015c6:	2120      	movs	r1, #32
 80015c8:	4803      	ldr	r0, [pc, #12]	; (80015d8 <touch_reset+0x28>)
 80015ca:	f004 fc25 	bl	8005e18 <HAL_GPIO_WritePin>
 	delay_ms(50);
 80015ce:	2032      	movs	r0, #50	; 0x32
 80015d0:	f000 fac8 	bl	8001b64 <delay_ms>
}
 80015d4:	bf00      	nop
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40020400 	.word	0x40020400

080015dc <touch_periodic_process>:
{
	return pressed_element;
}
// After each call identifies if the touch was pressed and if TRUEm then identify the element
void touch_periodic_process()
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0

	if(touch.pressed==1)
 80015e0:	4b1d      	ldr	r3, [pc, #116]	; (8001658 <touch_periodic_process+0x7c>)
 80015e2:	891b      	ldrh	r3, [r3, #8]
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d135      	bne.n	8001654 <touch_periodic_process+0x78>
	{
		touch.pressed=0;
 80015e8:	4b1b      	ldr	r3, [pc, #108]	; (8001658 <touch_periodic_process+0x7c>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	811a      	strh	r2, [r3, #8]

		touch.x=touch_read(0x00);
 80015ee:	2000      	movs	r0, #0
 80015f0:	f000 f9d4 	bl	800199c <touch_read>
 80015f4:	4603      	mov	r3, r0
 80015f6:	461a      	mov	r2, r3
 80015f8:	4b17      	ldr	r3, [pc, #92]	; (8001658 <touch_periodic_process+0x7c>)
 80015fa:	801a      	strh	r2, [r3, #0]
		touch.x1=touch_read(0x01);
 80015fc:	2001      	movs	r0, #1
 80015fe:	f000 f9cd 	bl	800199c <touch_read>
 8001602:	4603      	mov	r3, r0
 8001604:	461a      	mov	r2, r3
 8001606:	4b14      	ldr	r3, [pc, #80]	; (8001658 <touch_periodic_process+0x7c>)
 8001608:	809a      	strh	r2, [r3, #4]
		touch.y=touch_read(0x02);
 800160a:	2002      	movs	r0, #2
 800160c:	f000 f9c6 	bl	800199c <touch_read>
 8001610:	4603      	mov	r3, r0
 8001612:	461a      	mov	r2, r3
 8001614:	4b10      	ldr	r3, [pc, #64]	; (8001658 <touch_periodic_process+0x7c>)
 8001616:	805a      	strh	r2, [r3, #2]
		touch.y1=touch_read(0x03);
 8001618:	2003      	movs	r0, #3
 800161a:	f000 f9bf 	bl	800199c <touch_read>
 800161e:	4603      	mov	r3, r0
 8001620:	461a      	mov	r2, r3
 8001622:	4b0d      	ldr	r3, [pc, #52]	; (8001658 <touch_periodic_process+0x7c>)
 8001624:	80da      	strh	r2, [r3, #6]
		printf("TOUCH x %d\n\r", touch.x);
		printf("TOUCH x1 %d\n\r", touch.x1);
		printf("TOUCH y %d\n\r", touch.y);
		printf("TOUCH y1 %d\n\r", touch.y1);
#endif
		touch.y=touch.x1;
 8001626:	4b0c      	ldr	r3, [pc, #48]	; (8001658 <touch_periodic_process+0x7c>)
 8001628:	889a      	ldrh	r2, [r3, #4]
 800162a:	4b0b      	ldr	r3, [pc, #44]	; (8001658 <touch_periodic_process+0x7c>)
 800162c:	805a      	strh	r2, [r3, #2]
		touch.x=1024-touch.y1;
 800162e:	4b0a      	ldr	r3, [pc, #40]	; (8001658 <touch_periodic_process+0x7c>)
 8001630:	88db      	ldrh	r3, [r3, #6]
 8001632:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8001636:	b29a      	uxth	r2, r3
 8001638:	4b07      	ldr	r3, [pc, #28]	; (8001658 <touch_periodic_process+0x7c>)
 800163a:	801a      	strh	r2, [r3, #0]
#if DEBUG_TOUCH == 1
		printf("TOUCH Y reverted %d\n\r", touch.y);
		printf("TOUCH X reverted %d\n\r", touch.x);
#endif
		if(validate_touch_coordinates()==1)
 800163c:	f000 f9e0 	bl	8001a00 <validate_touch_coordinates>
 8001640:	4603      	mov	r3, r0
 8001642:	2b01      	cmp	r3, #1
 8001644:	d103      	bne.n	800164e <touch_periodic_process+0x72>
		{
#if DEBUG_TOUCH == 1
			printf("TOUCH = X: %d,Y: %d\n\r",touch.x,touch.y);
#endif
			 touch_get_pressed_element(touch);
 8001646:	4b04      	ldr	r3, [pc, #16]	; (8001658 <touch_periodic_process+0x7c>)
 8001648:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800164a:	f000 f807 	bl	800165c <touch_get_pressed_element>
		}
		touch_write_control(0x80);
 800164e:	2080      	movs	r0, #128	; 0x80
 8001650:	f000 f960 	bl	8001914 <touch_write_control>
	}
}
 8001654:	bf00      	nop
 8001656:	bd80      	pop	{r7, pc}
 8001658:	200000f8 	.word	0x200000f8

0800165c <touch_get_pressed_element>:
// External interrupt callback function. Take an action when touchscreen was pressed
static void touch_get_pressed_element()
{
 800165c:	b590      	push	{r4, r7, lr}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
	uint16_t x0,x1,y1,y0;
	for(int i = 0; i<MAX_NUM_ELEMENTS;i++)
 8001662:	2300      	movs	r3, #0
 8001664:	607b      	str	r3, [r7, #4]
 8001666:	e07d      	b.n	8001764 <touch_get_pressed_element+0x108>
	{

		if((touch.x >= touch_elements_register[active_page][active_layer][i].x )
 8001668:	4b42      	ldr	r3, [pc, #264]	; (8001774 <touch_get_pressed_element+0x118>)
 800166a:	881a      	ldrh	r2, [r3, #0]
 800166c:	4b42      	ldr	r3, [pc, #264]	; (8001778 <touch_get_pressed_element+0x11c>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	461c      	mov	r4, r3
 8001672:	4b42      	ldr	r3, [pc, #264]	; (800177c <touch_get_pressed_element+0x120>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	4619      	mov	r1, r3
 8001678:	4841      	ldr	r0, [pc, #260]	; (8001780 <touch_get_pressed_element+0x124>)
 800167a:	460b      	mov	r3, r1
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	440b      	add	r3, r1
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	2164      	movs	r1, #100	; 0x64
 8001684:	fb04 f101 	mul.w	r1, r4, r1
 8001688:	4419      	add	r1, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	440b      	add	r3, r1
 800168e:	011b      	lsls	r3, r3, #4
 8001690:	4403      	add	r3, r0
 8001692:	881b      	ldrh	r3, [r3, #0]
 8001694:	429a      	cmp	r2, r3
 8001696:	d362      	bcc.n	800175e <touch_get_pressed_element+0x102>
		&& (touch.x <= touch_elements_register[active_page][active_layer][i].x1)
 8001698:	4b36      	ldr	r3, [pc, #216]	; (8001774 <touch_get_pressed_element+0x118>)
 800169a:	881a      	ldrh	r2, [r3, #0]
 800169c:	4b36      	ldr	r3, [pc, #216]	; (8001778 <touch_get_pressed_element+0x11c>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	461c      	mov	r4, r3
 80016a2:	4b36      	ldr	r3, [pc, #216]	; (800177c <touch_get_pressed_element+0x120>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	4619      	mov	r1, r3
 80016a8:	4835      	ldr	r0, [pc, #212]	; (8001780 <touch_get_pressed_element+0x124>)
 80016aa:	460b      	mov	r3, r1
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	440b      	add	r3, r1
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	2164      	movs	r1, #100	; 0x64
 80016b4:	fb04 f101 	mul.w	r1, r4, r1
 80016b8:	4419      	add	r1, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	440b      	add	r3, r1
 80016be:	011b      	lsls	r3, r3, #4
 80016c0:	4403      	add	r3, r0
 80016c2:	3304      	adds	r3, #4
 80016c4:	881b      	ldrh	r3, [r3, #0]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d849      	bhi.n	800175e <touch_get_pressed_element+0x102>
		&&(touch.y1 >= touch_elements_register[active_page][active_layer][i].y)
 80016ca:	4b2a      	ldr	r3, [pc, #168]	; (8001774 <touch_get_pressed_element+0x118>)
 80016cc:	88da      	ldrh	r2, [r3, #6]
 80016ce:	4b2a      	ldr	r3, [pc, #168]	; (8001778 <touch_get_pressed_element+0x11c>)
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	461c      	mov	r4, r3
 80016d4:	4b29      	ldr	r3, [pc, #164]	; (800177c <touch_get_pressed_element+0x120>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	4619      	mov	r1, r3
 80016da:	4829      	ldr	r0, [pc, #164]	; (8001780 <touch_get_pressed_element+0x124>)
 80016dc:	460b      	mov	r3, r1
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	440b      	add	r3, r1
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	2164      	movs	r1, #100	; 0x64
 80016e6:	fb04 f101 	mul.w	r1, r4, r1
 80016ea:	4419      	add	r1, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	440b      	add	r3, r1
 80016f0:	011b      	lsls	r3, r3, #4
 80016f2:	4403      	add	r3, r0
 80016f4:	3302      	adds	r3, #2
 80016f6:	881b      	ldrh	r3, [r3, #0]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d330      	bcc.n	800175e <touch_get_pressed_element+0x102>
		&&(touch.y <= touch_elements_register[active_page][active_layer][i].y1))
 80016fc:	4b1d      	ldr	r3, [pc, #116]	; (8001774 <touch_get_pressed_element+0x118>)
 80016fe:	885a      	ldrh	r2, [r3, #2]
 8001700:	4b1d      	ldr	r3, [pc, #116]	; (8001778 <touch_get_pressed_element+0x11c>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	461c      	mov	r4, r3
 8001706:	4b1d      	ldr	r3, [pc, #116]	; (800177c <touch_get_pressed_element+0x120>)
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	4619      	mov	r1, r3
 800170c:	481c      	ldr	r0, [pc, #112]	; (8001780 <touch_get_pressed_element+0x124>)
 800170e:	460b      	mov	r3, r1
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	440b      	add	r3, r1
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	2164      	movs	r1, #100	; 0x64
 8001718:	fb04 f101 	mul.w	r1, r4, r1
 800171c:	4419      	add	r1, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	440b      	add	r3, r1
 8001722:	011b      	lsls	r3, r3, #4
 8001724:	4403      	add	r3, r0
 8001726:	3306      	adds	r3, #6
 8001728:	881b      	ldrh	r3, [r3, #0]
 800172a:	429a      	cmp	r2, r3
 800172c:	d817      	bhi.n	800175e <touch_get_pressed_element+0x102>
			x1 = touch_elements_register[active_page][active_layer][i].x1;
			y0 = touch_elements_register[active_page][active_layer][i].y;
			y1 = touch_elements_register[active_page][active_layer][i].y1;
			printf(" GETTING PRESSED ELEMENT \n\r X: %d\n\r X1: %d\n\r Y: %d\n\r Y1: %d\n\r",x0,x1,y0,y1);
#endif
			memcpy(&pressed_element,&touch_elements_register[active_page][active_layer][i],sizeof(struct element_t));
 800172e:	4b12      	ldr	r3, [pc, #72]	; (8001778 <touch_get_pressed_element+0x11c>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	4619      	mov	r1, r3
 8001734:	4b11      	ldr	r3, [pc, #68]	; (800177c <touch_get_pressed_element+0x120>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	461a      	mov	r2, r3
 800173a:	4613      	mov	r3, r2
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	4413      	add	r3, r2
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	2264      	movs	r2, #100	; 0x64
 8001744:	fb01 f202 	mul.w	r2, r1, r2
 8001748:	441a      	add	r2, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4413      	add	r3, r2
 800174e:	011b      	lsls	r3, r3, #4
 8001750:	4a0b      	ldr	r2, [pc, #44]	; (8001780 <touch_get_pressed_element+0x124>)
 8001752:	4413      	add	r3, r2
 8001754:	2210      	movs	r2, #16
 8001756:	4619      	mov	r1, r3
 8001758:	480a      	ldr	r0, [pc, #40]	; (8001784 <touch_get_pressed_element+0x128>)
 800175a:	f008 f8dd 	bl	8009918 <memcpy>
	for(int i = 0; i<MAX_NUM_ELEMENTS;i++)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	3301      	adds	r3, #1
 8001762:	607b      	str	r3, [r7, #4]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2b13      	cmp	r3, #19
 8001768:	f77f af7e 	ble.w	8001668 <touch_get_pressed_element+0xc>

#endif
		}
	}

	return touch_elements_register[-1];
 800176c:	bf00      	nop
}
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	bd90      	pop	{r4, r7, pc}
 8001774:	200000f8 	.word	0x200000f8
 8001778:	20000118 	.word	0x20000118
 800177c:	20000119 	.word	0x20000119
 8001780:	2000011c 	.word	0x2000011c
 8001784:	20000108 	.word	0x20000108

08001788 <touch_register_element>:
// Register element to the touch elements array.
uint8_t touch_register_element(uint8_t page,uint8_t layer,uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1,uint16_t element_type, uint32_t element_pointer)
{
 8001788:	b490      	push	{r4, r7}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	4604      	mov	r4, r0
 8001790:	4608      	mov	r0, r1
 8001792:	4611      	mov	r1, r2
 8001794:	461a      	mov	r2, r3
 8001796:	4623      	mov	r3, r4
 8001798:	71fb      	strb	r3, [r7, #7]
 800179a:	4603      	mov	r3, r0
 800179c:	71bb      	strb	r3, [r7, #6]
 800179e:	460b      	mov	r3, r1
 80017a0:	80bb      	strh	r3, [r7, #4]
 80017a2:	4613      	mov	r3, r2
 80017a4:	807b      	strh	r3, [r7, #2]
	for(int i = 0;i<MAX_NUM_ELEMENTS;i++)
 80017a6:	2300      	movs	r3, #0
 80017a8:	60fb      	str	r3, [r7, #12]
 80017aa:	e097      	b.n	80018dc <touch_register_element+0x154>
	{
		if(touch_elements_register[page][layer][i].isAlive == 0)
 80017ac:	79f9      	ldrb	r1, [r7, #7]
 80017ae:	79ba      	ldrb	r2, [r7, #6]
 80017b0:	484f      	ldr	r0, [pc, #316]	; (80018f0 <touch_register_element+0x168>)
 80017b2:	4613      	mov	r3, r2
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	4413      	add	r3, r2
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	2264      	movs	r2, #100	; 0x64
 80017bc:	fb01 f202 	mul.w	r2, r1, r2
 80017c0:	441a      	add	r2, r3
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	4413      	add	r3, r2
 80017c6:	011b      	lsls	r3, r3, #4
 80017c8:	4403      	add	r3, r0
 80017ca:	3309      	adds	r3, #9
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	f040 8081 	bne.w	80018d6 <touch_register_element+0x14e>
		{
			touch_elements_register[page][layer][i].x = x0;
 80017d4:	79f9      	ldrb	r1, [r7, #7]
 80017d6:	79ba      	ldrb	r2, [r7, #6]
 80017d8:	4845      	ldr	r0, [pc, #276]	; (80018f0 <touch_register_element+0x168>)
 80017da:	4613      	mov	r3, r2
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	4413      	add	r3, r2
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	2264      	movs	r2, #100	; 0x64
 80017e4:	fb01 f202 	mul.w	r2, r1, r2
 80017e8:	441a      	add	r2, r3
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	4413      	add	r3, r2
 80017ee:	011b      	lsls	r3, r3, #4
 80017f0:	4403      	add	r3, r0
 80017f2:	88ba      	ldrh	r2, [r7, #4]
 80017f4:	801a      	strh	r2, [r3, #0]
			touch_elements_register[page][layer][i].x1 =x1;
 80017f6:	79f9      	ldrb	r1, [r7, #7]
 80017f8:	79ba      	ldrb	r2, [r7, #6]
 80017fa:	483d      	ldr	r0, [pc, #244]	; (80018f0 <touch_register_element+0x168>)
 80017fc:	4613      	mov	r3, r2
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	4413      	add	r3, r2
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	2264      	movs	r2, #100	; 0x64
 8001806:	fb01 f202 	mul.w	r2, r1, r2
 800180a:	441a      	add	r2, r3
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	4413      	add	r3, r2
 8001810:	011b      	lsls	r3, r3, #4
 8001812:	4403      	add	r3, r0
 8001814:	3304      	adds	r3, #4
 8001816:	8b3a      	ldrh	r2, [r7, #24]
 8001818:	801a      	strh	r2, [r3, #0]
			touch_elements_register[page][layer][i].y =y0;
 800181a:	79f9      	ldrb	r1, [r7, #7]
 800181c:	79ba      	ldrb	r2, [r7, #6]
 800181e:	4834      	ldr	r0, [pc, #208]	; (80018f0 <touch_register_element+0x168>)
 8001820:	4613      	mov	r3, r2
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	4413      	add	r3, r2
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	2264      	movs	r2, #100	; 0x64
 800182a:	fb01 f202 	mul.w	r2, r1, r2
 800182e:	441a      	add	r2, r3
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	4413      	add	r3, r2
 8001834:	011b      	lsls	r3, r3, #4
 8001836:	4403      	add	r3, r0
 8001838:	3302      	adds	r3, #2
 800183a:	887a      	ldrh	r2, [r7, #2]
 800183c:	801a      	strh	r2, [r3, #0]
			touch_elements_register[page][layer][i].y1 =y1;
 800183e:	79f9      	ldrb	r1, [r7, #7]
 8001840:	79ba      	ldrb	r2, [r7, #6]
 8001842:	482b      	ldr	r0, [pc, #172]	; (80018f0 <touch_register_element+0x168>)
 8001844:	4613      	mov	r3, r2
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	4413      	add	r3, r2
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	2264      	movs	r2, #100	; 0x64
 800184e:	fb01 f202 	mul.w	r2, r1, r2
 8001852:	441a      	add	r2, r3
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	4413      	add	r3, r2
 8001858:	011b      	lsls	r3, r3, #4
 800185a:	4403      	add	r3, r0
 800185c:	3306      	adds	r3, #6
 800185e:	8bba      	ldrh	r2, [r7, #28]
 8001860:	801a      	strh	r2, [r3, #0]
			touch_elements_register[page][layer][i].element_type = element_type;
 8001862:	79f9      	ldrb	r1, [r7, #7]
 8001864:	79ba      	ldrb	r2, [r7, #6]
 8001866:	8c3b      	ldrh	r3, [r7, #32]
 8001868:	b2dc      	uxtb	r4, r3
 800186a:	4821      	ldr	r0, [pc, #132]	; (80018f0 <touch_register_element+0x168>)
 800186c:	4613      	mov	r3, r2
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	4413      	add	r3, r2
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	2264      	movs	r2, #100	; 0x64
 8001876:	fb01 f202 	mul.w	r2, r1, r2
 800187a:	441a      	add	r2, r3
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	4413      	add	r3, r2
 8001880:	011b      	lsls	r3, r3, #4
 8001882:	4403      	add	r3, r0
 8001884:	3308      	adds	r3, #8
 8001886:	4622      	mov	r2, r4
 8001888:	701a      	strb	r2, [r3, #0]
			touch_elements_register[page][layer][i].element_pointer = element_pointer;
 800188a:	79f8      	ldrb	r0, [r7, #7]
 800188c:	79ba      	ldrb	r2, [r7, #6]
 800188e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001890:	4c17      	ldr	r4, [pc, #92]	; (80018f0 <touch_register_element+0x168>)
 8001892:	4613      	mov	r3, r2
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	4413      	add	r3, r2
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	2264      	movs	r2, #100	; 0x64
 800189c:	fb00 f202 	mul.w	r2, r0, r2
 80018a0:	441a      	add	r2, r3
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	4413      	add	r3, r2
 80018a6:	011b      	lsls	r3, r3, #4
 80018a8:	4423      	add	r3, r4
 80018aa:	330c      	adds	r3, #12
 80018ac:	6019      	str	r1, [r3, #0]
			touch_elements_register[page][layer][i].isAlive = 1;
 80018ae:	79f9      	ldrb	r1, [r7, #7]
 80018b0:	79ba      	ldrb	r2, [r7, #6]
 80018b2:	480f      	ldr	r0, [pc, #60]	; (80018f0 <touch_register_element+0x168>)
 80018b4:	4613      	mov	r3, r2
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	4413      	add	r3, r2
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	2264      	movs	r2, #100	; 0x64
 80018be:	fb01 f202 	mul.w	r2, r1, r2
 80018c2:	441a      	add	r2, r3
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	4413      	add	r3, r2
 80018c8:	011b      	lsls	r3, r3, #4
 80018ca:	4403      	add	r3, r0
 80018cc:	3309      	adds	r3, #9
 80018ce:	2201      	movs	r2, #1
 80018d0:	701a      	strb	r2, [r3, #0]
#if DEBUG_TOUCH == 1
			printf("\n\rElement registered with index: %d\n\r",i);
			printf("\n\rElement values: %d %d %d %d %d %d %d\n\r",x0,x1,y0,y1,element_pointer,element_type);
#endif
			return 0;
 80018d2:	2300      	movs	r3, #0
 80018d4:	e007      	b.n	80018e6 <touch_register_element+0x15e>
	for(int i = 0;i<MAX_NUM_ELEMENTS;i++)
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	3301      	adds	r3, #1
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2b13      	cmp	r3, #19
 80018e0:	f77f af64 	ble.w	80017ac <touch_register_element+0x24>
		}
	}

	return -1;
 80018e4:	23ff      	movs	r3, #255	; 0xff
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3710      	adds	r7, #16
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bc90      	pop	{r4, r7}
 80018ee:	4770      	bx	lr
 80018f0:	2000011c 	.word	0x2000011c

080018f4 <HAL_GPIO_EXTI_Callback>:
//External interrupt from touc IC
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	80fb      	strh	r3, [r7, #6]
	touch.pressed=1;
 80018fe:	4b04      	ldr	r3, [pc, #16]	; (8001910 <HAL_GPIO_EXTI_Callback+0x1c>)
 8001900:	2201      	movs	r2, #1
 8001902:	811a      	strh	r2, [r3, #8]
#if DEBUG_TOUCH == 1
	printf("Interrupt touch");
#endif
}
 8001904:	bf00      	nop
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	200000f8 	.word	0x200000f8

08001914 <touch_write_control>:
	touch_elements_register[page][layer][idx].element_pointer = 0;
}
/*----------------------------------------------Private function---------------------------------------------------*/
//Write to touch IC control command via I2C
static void touch_write_control(unsigned char ctrl)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b086      	sub	sp, #24
 8001918:	af02      	add	r7, sp, #8
 800191a:	4603      	mov	r3, r0
 800191c:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status =0;
 800191e:	2300      	movs	r3, #0
 8001920:	73fb      	strb	r3, [r7, #15]
	status = HAL_I2C_Master_Transmit(&hi2c1_touch, (uint16_t)SLAVE_ADDRESS_TOUCH, &ctrl, 1 ,I2C_DELAY);
 8001922:	1dfa      	adds	r2, r7, #7
 8001924:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001928:	9300      	str	r3, [sp, #0]
 800192a:	2301      	movs	r3, #1
 800192c:	2190      	movs	r1, #144	; 0x90
 800192e:	4804      	ldr	r0, [pc, #16]	; (8001940 <touch_write_control+0x2c>)
 8001930:	f004 fbe8 	bl	8006104 <HAL_I2C_Master_Transmit>
 8001934:	4603      	mov	r3, r0
 8001936:	73fb      	strb	r3, [r7, #15]
#if DEBUG_TOUCH == 1
	printf("Write control I2C\n\r");
	printf ("%d",status);
#endif
}
 8001938:	bf00      	nop
 800193a:	3710      	adds	r7, #16
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	200000a4 	.word	0x200000a4

08001944 <touch_write_register>:
//Write to touch IC data via I2C
static void touch_write_register(uint8_t adr, uint16_t val)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b088      	sub	sp, #32
 8001948:	af04      	add	r7, sp, #16
 800194a:	4603      	mov	r3, r0
 800194c:	460a      	mov	r2, r1
 800194e:	71fb      	strb	r3, [r7, #7]
 8001950:	4613      	mov	r3, r2
 8001952:	80bb      	strh	r3, [r7, #4]

	HAL_StatusTypeDef status =0;
 8001954:	2300      	movs	r3, #0
 8001956:	73fb      	strb	r3, [r7, #15]
	uint8_t data[2];
	data[0] = val>>8;
 8001958:	88bb      	ldrh	r3, [r7, #4]
 800195a:	0a1b      	lsrs	r3, r3, #8
 800195c:	b29b      	uxth	r3, r3
 800195e:	b2db      	uxtb	r3, r3
 8001960:	733b      	strb	r3, [r7, #12]
	data[1] = (uint8_t)val;
 8001962:	88bb      	ldrh	r3, [r7, #4]
 8001964:	b2db      	uxtb	r3, r3
 8001966:	737b      	strb	r3, [r7, #13]
	status = HAL_I2C_Mem_Write(&hi2c1_touch, (uint16_t)SLAVE_ADDRESS_TOUCH,(adr<<3),I2C_MEMADD_SIZE_8BIT,data,2,I2C_DELAY);
 8001968:	79fb      	ldrb	r3, [r7, #7]
 800196a:	b29b      	uxth	r3, r3
 800196c:	00db      	lsls	r3, r3, #3
 800196e:	b29a      	uxth	r2, r3
 8001970:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001974:	9302      	str	r3, [sp, #8]
 8001976:	2302      	movs	r3, #2
 8001978:	9301      	str	r3, [sp, #4]
 800197a:	f107 030c 	add.w	r3, r7, #12
 800197e:	9300      	str	r3, [sp, #0]
 8001980:	2301      	movs	r3, #1
 8001982:	2190      	movs	r1, #144	; 0x90
 8001984:	4804      	ldr	r0, [pc, #16]	; (8001998 <touch_write_register+0x54>)
 8001986:	f004 fcbb 	bl	8006300 <HAL_I2C_Mem_Write>
 800198a:	4603      	mov	r3, r0
 800198c:	73fb      	strb	r3, [r7, #15]
#if DEBUG_TOUCH == 1
	printf ("I2C write register\n\r");
	printf ("status %d \n\r",status);
#endif
}
 800198e:	bf00      	nop
 8001990:	3710      	adds	r7, #16
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	200000a4 	.word	0x200000a4

0800199c <touch_read>:
//Read data via I2C from touch IC
static unsigned short touch_read(unsigned char adr)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b088      	sub	sp, #32
 80019a0:	af04      	add	r7, sp, #16
 80019a2:	4603      	mov	r3, r0
 80019a4:	71fb      	strb	r3, [r7, #7]
	unsigned char adr_i2c= 0x01;
 80019a6:	2301      	movs	r3, #1
 80019a8:	73fb      	strb	r3, [r7, #15]
	adr_i2c+=adr<<3;
 80019aa:	79fb      	ldrb	r3, [r7, #7]
 80019ac:	00db      	lsls	r3, r3, #3
 80019ae:	b2da      	uxtb	r2, r3
 80019b0:	7bfb      	ldrb	r3, [r7, #15]
 80019b2:	4413      	add	r3, r2
 80019b4:	73fb      	strb	r3, [r7, #15]
	uint8_t data[2];
	HAL_StatusTypeDef status =0;
 80019b6:	2300      	movs	r3, #0
 80019b8:	73bb      	strb	r3, [r7, #14]
	status = HAL_I2C_Mem_Read(&hi2c1_touch, (uint16_t)SLAVE_ADDRESS_TOUCH ,adr_i2c,I2C_MEMADD_SIZE_8BIT,data, 2, I2C_DELAY);
 80019ba:	7bfb      	ldrb	r3, [r7, #15]
 80019bc:	b29a      	uxth	r2, r3
 80019be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019c2:	9302      	str	r3, [sp, #8]
 80019c4:	2302      	movs	r3, #2
 80019c6:	9301      	str	r3, [sp, #4]
 80019c8:	f107 0308 	add.w	r3, r7, #8
 80019cc:	9300      	str	r3, [sp, #0]
 80019ce:	2301      	movs	r3, #1
 80019d0:	2190      	movs	r1, #144	; 0x90
 80019d2:	4809      	ldr	r0, [pc, #36]	; (80019f8 <touch_read+0x5c>)
 80019d4:	f004 fd8e 	bl	80064f4 <HAL_I2C_Mem_Read>
 80019d8:	4603      	mov	r3, r0
 80019da:	73bb      	strb	r3, [r7, #14]
	uint16_t result = (data[0] << 8) | (data[1] & 0xFF);
 80019dc:	7a3b      	ldrb	r3, [r7, #8]
 80019de:	021b      	lsls	r3, r3, #8
 80019e0:	b21a      	sxth	r2, r3
 80019e2:	7a7b      	ldrb	r3, [r7, #9]
 80019e4:	b21b      	sxth	r3, r3
 80019e6:	4313      	orrs	r3, r2
 80019e8:	b21b      	sxth	r3, r3
 80019ea:	81bb      	strh	r3, [r7, #12]
	return result;
 80019ec:	89bb      	ldrh	r3, [r7, #12]
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3710      	adds	r7, #16
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	200000a4 	.word	0x200000a4
 80019fc:	00000000 	.word	0x00000000

08001a00 <validate_touch_coordinates>:
//Transform and validate touch coordinates
static uint8_t validate_touch_coordinates(void)
{
 8001a00:	b5b0      	push	{r4, r5, r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
	if(touch.x<MIN_X) return 0;
	if(touch.x>MAX_X) return 0;
 8001a06:	4b56      	ldr	r3, [pc, #344]	; (8001b60 <validate_touch_coordinates+0x160>)
 8001a08:	881b      	ldrh	r3, [r3, #0]
 8001a0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a0e:	d901      	bls.n	8001a14 <validate_touch_coordinates+0x14>
 8001a10:	2300      	movs	r3, #0
 8001a12:	e087      	b.n	8001b24 <validate_touch_coordinates+0x124>
	if(touch.y<MIN_Y) return 0;
	if(touch.y>MAX_Y) return 0;
 8001a14:	4b52      	ldr	r3, [pc, #328]	; (8001b60 <validate_touch_coordinates+0x160>)
 8001a16:	885b      	ldrh	r3, [r3, #2]
 8001a18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a1c:	d901      	bls.n	8001a22 <validate_touch_coordinates+0x22>
 8001a1e:	2300      	movs	r3, #0
 8001a20:	e080      	b.n	8001b24 <validate_touch_coordinates+0x124>

	touch.x=touch.x - MIN_X;
 8001a22:	4b4f      	ldr	r3, [pc, #316]	; (8001b60 <validate_touch_coordinates+0x160>)
 8001a24:	881a      	ldrh	r2, [r3, #0]
 8001a26:	4b4e      	ldr	r3, [pc, #312]	; (8001b60 <validate_touch_coordinates+0x160>)
 8001a28:	801a      	strh	r2, [r3, #0]
	touch.y=touch.y - MIN_Y;
 8001a2a:	4b4d      	ldr	r3, [pc, #308]	; (8001b60 <validate_touch_coordinates+0x160>)
 8001a2c:	885a      	ldrh	r2, [r3, #2]
 8001a2e:	4b4c      	ldr	r3, [pc, #304]	; (8001b60 <validate_touch_coordinates+0x160>)
 8001a30:	805a      	strh	r2, [r3, #2]
#if LINEAR_INTERPOLATION == 1
	touch.x = linear_interpolation((long)touch.x,40,970,0,480);
	touch.y = linear_interpolation((long)touch.y,40,970,0,340);
#else
	double x,y;
	x = X_A* (int16_t)touch.x + X_B *(int16_t)touch.y +X_L;
 8001a32:	4b4b      	ldr	r3, [pc, #300]	; (8001b60 <validate_touch_coordinates+0x160>)
 8001a34:	881b      	ldrh	r3, [r3, #0]
 8001a36:	b21b      	sxth	r3, r3
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7fe fea5 	bl	8000788 <__aeabi_i2d>
 8001a3e:	a33c      	add	r3, pc, #240	; (adr r3, 8001b30 <validate_touch_coordinates+0x130>)
 8001a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a44:	f7fe fc24 	bl	8000290 <__aeabi_dmul>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	4614      	mov	r4, r2
 8001a4e:	461d      	mov	r5, r3
 8001a50:	4b43      	ldr	r3, [pc, #268]	; (8001b60 <validate_touch_coordinates+0x160>)
 8001a52:	885b      	ldrh	r3, [r3, #2]
 8001a54:	b21b      	sxth	r3, r3
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7fe fe96 	bl	8000788 <__aeabi_i2d>
 8001a5c:	a336      	add	r3, pc, #216	; (adr r3, 8001b38 <validate_touch_coordinates+0x138>)
 8001a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a62:	f7fe fc15 	bl	8000290 <__aeabi_dmul>
 8001a66:	4602      	mov	r2, r0
 8001a68:	460b      	mov	r3, r1
 8001a6a:	4620      	mov	r0, r4
 8001a6c:	4629      	mov	r1, r5
 8001a6e:	f7fe fd3f 	bl	80004f0 <__adddf3>
 8001a72:	4602      	mov	r2, r0
 8001a74:	460b      	mov	r3, r1
 8001a76:	4610      	mov	r0, r2
 8001a78:	4619      	mov	r1, r3
 8001a7a:	a331      	add	r3, pc, #196	; (adr r3, 8001b40 <validate_touch_coordinates+0x140>)
 8001a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a80:	f7fe fd34 	bl	80004ec <__aeabi_dsub>
 8001a84:	4602      	mov	r2, r0
 8001a86:	460b      	mov	r3, r1
 8001a88:	e9c7 2302 	strd	r2, r3, [r7, #8]
	y = Y_A* (int16_t)touch.x + Y_B *(int16_t)touch.y +Y_L;
 8001a8c:	4b34      	ldr	r3, [pc, #208]	; (8001b60 <validate_touch_coordinates+0x160>)
 8001a8e:	881b      	ldrh	r3, [r3, #0]
 8001a90:	b21b      	sxth	r3, r3
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7fe fe78 	bl	8000788 <__aeabi_i2d>
 8001a98:	a32b      	add	r3, pc, #172	; (adr r3, 8001b48 <validate_touch_coordinates+0x148>)
 8001a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a9e:	f7fe fbf7 	bl	8000290 <__aeabi_dmul>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	4614      	mov	r4, r2
 8001aa8:	461d      	mov	r5, r3
 8001aaa:	4b2d      	ldr	r3, [pc, #180]	; (8001b60 <validate_touch_coordinates+0x160>)
 8001aac:	885b      	ldrh	r3, [r3, #2]
 8001aae:	b21b      	sxth	r3, r3
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7fe fe69 	bl	8000788 <__aeabi_i2d>
 8001ab6:	a326      	add	r3, pc, #152	; (adr r3, 8001b50 <validate_touch_coordinates+0x150>)
 8001ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001abc:	f7fe fbe8 	bl	8000290 <__aeabi_dmul>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	4620      	mov	r0, r4
 8001ac6:	4629      	mov	r1, r5
 8001ac8:	f7fe fd12 	bl	80004f0 <__adddf3>
 8001acc:	4602      	mov	r2, r0
 8001ace:	460b      	mov	r3, r1
 8001ad0:	4610      	mov	r0, r2
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	a320      	add	r3, pc, #128	; (adr r3, 8001b58 <validate_touch_coordinates+0x158>)
 8001ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ada:	f7fe fd07 	bl	80004ec <__aeabi_dsub>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	e9c7 2300 	strd	r2, r3, [r7]
	touch.x = (uint16_t)x;
 8001ae6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001aea:	f7fe feb7 	bl	800085c <__aeabi_d2uiz>
 8001aee:	4603      	mov	r3, r0
 8001af0:	b29a      	uxth	r2, r3
 8001af2:	4b1b      	ldr	r3, [pc, #108]	; (8001b60 <validate_touch_coordinates+0x160>)
 8001af4:	801a      	strh	r2, [r3, #0]
	touch.y = (uint16_t)y;
 8001af6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001afa:	f7fe feaf 	bl	800085c <__aeabi_d2uiz>
 8001afe:	4603      	mov	r3, r0
 8001b00:	b29a      	uxth	r2, r3
 8001b02:	4b17      	ldr	r3, [pc, #92]	; (8001b60 <validate_touch_coordinates+0x160>)
 8001b04:	805a      	strh	r2, [r3, #2]
#endif
#if DEBUG_TOUCH == 1
	printf("TOUCH y %d\n\r", touch.y);
	printf("TOUCH X %d\n\r", touch.x);
#endif
	if (touch.x >= 0 && touch.x <= LCD_PIXEL_WIDTH)
 8001b06:	4b16      	ldr	r3, [pc, #88]	; (8001b60 <validate_touch_coordinates+0x160>)
 8001b08:	881b      	ldrh	r3, [r3, #0]
 8001b0a:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001b0e:	d801      	bhi.n	8001b14 <validate_touch_coordinates+0x114>
	{
		return 1;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e007      	b.n	8001b24 <validate_touch_coordinates+0x124>
	}
	if (touch.y >= 0 && touch.y <= LCD_PIXEL_HEIGHT)
 8001b14:	4b12      	ldr	r3, [pc, #72]	; (8001b60 <validate_touch_coordinates+0x160>)
 8001b16:	885b      	ldrh	r3, [r3, #2]
 8001b18:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001b1c:	d801      	bhi.n	8001b22 <validate_touch_coordinates+0x122>
	{
		return 1;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e000      	b.n	8001b24 <validate_touch_coordinates+0x124>
	}


	return 0;
 8001b22:	2300      	movs	r3, #0
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3710      	adds	r7, #16
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bdb0      	pop	{r4, r5, r7, pc}
 8001b2c:	f3af 8000 	nop.w
 8001b30:	c7e28241 	.word	0xc7e28241
 8001b34:	3fe0bb98 	.word	0x3fe0bb98
 8001b38:	8db8bac7 	.word	0x8db8bac7
 8001b3c:	3f66f006 	.word	0x3f66f006
 8001b40:	b71758e2 	.word	0xb71758e2
 8001b44:	403fc0d1 	.word	0x403fc0d1
 8001b48:	d2f1a9fc 	.word	0xd2f1a9fc
 8001b4c:	bf70624d 	.word	0xbf70624d
 8001b50:	ab367a10 	.word	0xab367a10
 8001b54:	3fd7573e 	.word	0x3fd7573e
 8001b58:	e219652c 	.word	0xe219652c
 8001b5c:	4036d758 	.word	0x4036d758
 8001b60:	200000f8 	.word	0x200000f8

08001b64 <delay_ms>:
	{
		  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	}
#endif
//Delay in ms
static void delay_ms(__IO uint32_t nCount1) {
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
	__IO uint32_t nCount=nCount1*23666;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f645 4272 	movw	r2, #23666	; 0x5c72
 8001b72:	fb02 f303 	mul.w	r3, r2, r3
 8001b76:	60fb      	str	r3, [r7, #12]
	while(nCount--) {
 8001b78:	bf00      	nop
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	1e5a      	subs	r2, r3, #1
 8001b7e:	60fa      	str	r2, [r7, #12]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d1fa      	bne.n	8001b7a <delay_ms+0x16>
  }
}
 8001b84:	bf00      	nop
 8001b86:	bf00      	nop
 8001b88:	3714      	adds	r7, #20
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
	...

08001b94 <fetchBitmap>:
 * TODO: This function first attempts to fetch the bitmap from local cache, and failing that, loads it from external memory.
 *
 * @returns number of pixels read. When requested bitmap does not exist, zero is returned.
 *
 */
int fetchBitmap(uint16_t bitmapNumber, struct bitmap *bitmapHeader, uint16_t *pixelArray, uint16_t maxPixels){
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b086      	sub	sp, #24
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	60b9      	str	r1, [r7, #8]
 8001b9c:	607a      	str	r2, [r7, #4]
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	81fb      	strh	r3, [r7, #14]
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	81bb      	strh	r3, [r7, #12]

	//TODO: bitmap caching


	if(bitmapNumber >= globalBitmapList.totalBitmaps){
 8001ba8:	4b0f      	ldr	r3, [pc, #60]	; (8001be8 <fetchBitmap+0x54>)
 8001baa:	881b      	ldrh	r3, [r3, #0]
 8001bac:	89fa      	ldrh	r2, [r7, #14]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d308      	bcc.n	8001bc4 <fetchBitmap+0x30>
		printf("[BCL] Can't fetch bitmap #%d, since total bitmaps = %d. \n\r", bitmapNumber, globalBitmapList.totalBitmaps);
 8001bb2:	89fb      	ldrh	r3, [r7, #14]
 8001bb4:	4a0c      	ldr	r2, [pc, #48]	; (8001be8 <fetchBitmap+0x54>)
 8001bb6:	8812      	ldrh	r2, [r2, #0]
 8001bb8:	4619      	mov	r1, r3
 8001bba:	480c      	ldr	r0, [pc, #48]	; (8001bec <fetchBitmap+0x58>)
 8001bbc:	f007 fec2 	bl	8009944 <iprintf>
		return 0;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	e00d      	b.n	8001be0 <fetchBitmap+0x4c>
	}

	uint16_t bitmapSector = globalBitmapList.bitmapSectors[bitmapNumber];
 8001bc4:	89fb      	ldrh	r3, [r7, #14]
 8001bc6:	4a08      	ldr	r2, [pc, #32]	; (8001be8 <fetchBitmap+0x54>)
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	4413      	add	r3, r2
 8001bcc:	889b      	ldrh	r3, [r3, #4]
 8001bce:	82fb      	strh	r3, [r7, #22]
	int count = readBitmap(bitmapSector, bitmapHeader, pixelArray, maxPixels);
 8001bd0:	8af8      	ldrh	r0, [r7, #22]
 8001bd2:	89bb      	ldrh	r3, [r7, #12]
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	68b9      	ldr	r1, [r7, #8]
 8001bd8:	f001 fb72 	bl	80032c0 <readBitmap>
 8001bdc:	6138      	str	r0, [r7, #16]
	return count;
 8001bde:	693b      	ldr	r3, [r7, #16]

}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3718      	adds	r7, #24
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	20002228 	.word	0x20002228
 8001bec:	0800a9a0 	.word	0x0800a9a0

08001bf0 <configFromUart>:

/*
 * Attempts to read configuration / debug data from UART and save them to external flash.
 * Returns: 0 when successful, 1 when no configuration data detected on uart, 2 or greater when configuration failed
 */
int configFromUart(){
 8001bf0:	b5b0      	push	{r4, r5, r7, lr}
 8001bf2:	f5ad 6d9b 	sub.w	sp, sp, #1240	; 0x4d8
 8001bf6:	af7e      	add	r7, sp, #504	; 0x1f8

	char msg[128];

	int count = read_usart_message(msg, &huart1, sizeof(msg), NEWLINE);
 8001bf8:	f507 7017 	add.w	r0, r7, #604	; 0x25c
 8001bfc:	230d      	movs	r3, #13
 8001bfe:	2280      	movs	r2, #128	; 0x80
 8001c00:	4983      	ldr	r1, [pc, #524]	; (8001e10 <configFromUart+0x220>)
 8001c02:	f003 fcd9 	bl	80055b8 <read_usart_message>
 8001c06:	4603      	mov	r3, r0
 8001c08:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc

	if(count == 0){
 8001c0c:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d104      	bne.n	8001c1e <configFromUart+0x2e>
		printf("[cl] No data on uart.\n\r");
 8001c14:	487f      	ldr	r0, [pc, #508]	; (8001e14 <configFromUart+0x224>)
 8001c16:	f007 fe95 	bl	8009944 <iprintf>
		return 1;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e0f3      	b.n	8001e06 <configFromUart+0x216>
	}

	msg[count-1] = 0; //replace newline delimiter with null-termination
 8001c1e:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 8001c22:	3b01      	subs	r3, #1
 8001c24:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
 8001c28:	443b      	add	r3, r7
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f803 2c84 	strb.w	r2, [r3, #-132]

	char configMsg[] = "config";
 8001c30:	4a79      	ldr	r2, [pc, #484]	; (8001e18 <configFromUart+0x228>)
 8001c32:	f507 7315 	add.w	r3, r7, #596	; 0x254
 8001c36:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c3a:	6018      	str	r0, [r3, #0]
 8001c3c:	3304      	adds	r3, #4
 8001c3e:	8019      	strh	r1, [r3, #0]
 8001c40:	3302      	adds	r3, #2
 8001c42:	0c0a      	lsrs	r2, r1, #16
 8001c44:	701a      	strb	r2, [r3, #0]
	char bitmapMsg[] = "bitmap";
 8001c46:	4a75      	ldr	r2, [pc, #468]	; (8001e1c <configFromUart+0x22c>)
 8001c48:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 8001c4c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c50:	6018      	str	r0, [r3, #0]
 8001c52:	3304      	adds	r3, #4
 8001c54:	8019      	strh	r1, [r3, #0]
 8001c56:	3302      	adds	r3, #2
 8001c58:	0c0a      	lsrs	r2, r1, #16
 8001c5a:	701a      	strb	r2, [r3, #0]
	char deleteMsg[] = "delete bitmaps";
 8001c5c:	4b70      	ldr	r3, [pc, #448]	; (8001e20 <configFromUart+0x230>)
 8001c5e:	f507 740f 	add.w	r4, r7, #572	; 0x23c
 8001c62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c64:	c407      	stmia	r4!, {r0, r1, r2}
 8001c66:	8023      	strh	r3, [r4, #0]
 8001c68:	3402      	adds	r4, #2
 8001c6a:	0c1b      	lsrs	r3, r3, #16
 8001c6c:	7023      	strb	r3, [r4, #0]
	char sreportMsg[] = "report screens";
 8001c6e:	4b6d      	ldr	r3, [pc, #436]	; (8001e24 <configFromUart+0x234>)
 8001c70:	f507 740b 	add.w	r4, r7, #556	; 0x22c
 8001c74:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c76:	c407      	stmia	r4!, {r0, r1, r2}
 8001c78:	8023      	strh	r3, [r4, #0]
 8001c7a:	3402      	adds	r4, #2
 8001c7c:	0c1b      	lsrs	r3, r3, #16
 8001c7e:	7023      	strb	r3, [r4, #0]
	char breportMsg[] = "report bitmaps";
 8001c80:	4b69      	ldr	r3, [pc, #420]	; (8001e28 <configFromUart+0x238>)
 8001c82:	f507 7407 	add.w	r4, r7, #540	; 0x21c
 8001c86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c88:	c407      	stmia	r4!, {r0, r1, r2}
 8001c8a:	8023      	strh	r3, [r4, #0]
 8001c8c:	3402      	adds	r4, #2
 8001c8e:	0c1b      	lsrs	r3, r3, #16
 8001c90:	7023      	strb	r3, [r4, #0]
	char hreportMsg[] = "hex report bitmaps";
 8001c92:	4b66      	ldr	r3, [pc, #408]	; (8001e2c <configFromUart+0x23c>)
 8001c94:	f507 7402 	add.w	r4, r7, #520	; 0x208
 8001c98:	461d      	mov	r5, r3
 8001c9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c9e:	682b      	ldr	r3, [r5, #0]
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	8022      	strh	r2, [r4, #0]
 8001ca4:	3402      	adds	r4, #2
 8001ca6:	0c1b      	lsrs	r3, r3, #16
 8001ca8:	7023      	strb	r3, [r4, #0]

	if(strcmp(configMsg, msg) == 0){
 8001caa:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 8001cae:	f507 7315 	add.w	r3, r7, #596	; 0x254
 8001cb2:	4611      	mov	r1, r2
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7fe fa8b 	bl	80001d0 <strcmp>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d106      	bne.n	8001cce <configFromUart+0xde>
		printf("[cl] Okay, proceeding to configure screens.\n\r");
 8001cc0:	485b      	ldr	r0, [pc, #364]	; (8001e30 <configFromUart+0x240>)
 8001cc2:	f007 fe3f 	bl	8009944 <iprintf>
		return configScreensFromUart();
 8001cc6:	f000 fbd1 	bl	800246c <configScreensFromUart>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	e09b      	b.n	8001e06 <configFromUart+0x216>
	}
	else if(strcmp(bitmapMsg, msg) == 0){
 8001cce:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 8001cd2:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 8001cd6:	4611      	mov	r1, r2
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7fe fa79 	bl	80001d0 <strcmp>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d106      	bne.n	8001cf2 <configFromUart+0x102>
		printf("[cl] Okay, proceeding to write bitmap.\n\r");
 8001ce4:	4853      	ldr	r0, [pc, #332]	; (8001e34 <configFromUart+0x244>)
 8001ce6:	f007 fe2d 	bl	8009944 <iprintf>
		return configBitmapFromUart();
 8001cea:	f000 f8b3 	bl	8001e54 <configBitmapFromUart>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	e089      	b.n	8001e06 <configFromUart+0x216>
	}
	else if(strcmp(deleteMsg, msg) == 0){
 8001cf2:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 8001cf6:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8001cfa:	4611      	mov	r1, r2
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7fe fa67 	bl	80001d0 <strcmp>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d106      	bne.n	8001d16 <configFromUart+0x126>
		printf("[cl] Okay, marking all saved bitmaps for deletion.\n\r");
 8001d08:	484b      	ldr	r0, [pc, #300]	; (8001e38 <configFromUart+0x248>)
 8001d0a:	f007 fe1b 	bl	8009944 <iprintf>
		return configMarkBitmapsForDelete();
 8001d0e:	f000 fb6d 	bl	80023ec <configMarkBitmapsForDelete>
 8001d12:	4603      	mov	r3, r0
 8001d14:	e077      	b.n	8001e06 <configFromUart+0x216>
	}
	else if(strcmp(sreportMsg, msg) == 0){
 8001d16:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 8001d1a:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 8001d1e:	4611      	mov	r1, r2
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7fe fa55 	bl	80001d0 <strcmp>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d118      	bne.n	8001d5e <configFromUart+0x16e>
		printf("[cl] Okay, reporting screens.\n\r");
 8001d2c:	4843      	ldr	r0, [pc, #268]	; (8001e3c <configFromUart+0x24c>)
 8001d2e:	f007 fe09 	bl	8009944 <iprintf>
		struct generalConfig gconf;
		readGeneralConfig(&gconf);
 8001d32:	1d3b      	adds	r3, r7, #4
 8001d34:	4618      	mov	r0, r3
 8001d36:	f001 f9e1 	bl	80030fc <readGeneralConfig>
		printAllScreens(gconf);
 8001d3a:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8001d3e:	f5a3 7437 	sub.w	r4, r3, #732	; 0x2dc
 8001d42:	4668      	mov	r0, sp
 8001d44:	f104 0310 	add.w	r3, r4, #16
 8001d48:	f44f 72f9 	mov.w	r2, #498	; 0x1f2
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	f007 fde3 	bl	8009918 <memcpy>
 8001d52:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001d56:	f001 fb09 	bl	800336c <printAllScreens>
		return 0;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	e053      	b.n	8001e06 <configFromUart+0x216>
	}
	else if(strcmp(breportMsg, msg) == 0){
 8001d5e:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 8001d62:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8001d66:	4611      	mov	r1, r2
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7fe fa31 	bl	80001d0 <strcmp>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d107      	bne.n	8001d84 <configFromUart+0x194>
		printf("[cl] Okay, reporting bitmaps.\n\r");
 8001d74:	4832      	ldr	r0, [pc, #200]	; (8001e40 <configFromUart+0x250>)
 8001d76:	f007 fde5 	bl	8009944 <iprintf>
		reportBitmaps(0);
 8001d7a:	2000      	movs	r0, #0
 8001d7c:	f001 fc8a 	bl	8003694 <reportBitmaps>
		return 0;
 8001d80:	2300      	movs	r3, #0
 8001d82:	e040      	b.n	8001e06 <configFromUart+0x216>
		}
	else if(strcmp(hreportMsg, msg) == 0){
 8001d84:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 8001d88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d8c:	4611      	mov	r1, r2
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7fe fa1e 	bl	80001d0 <strcmp>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d107      	bne.n	8001daa <configFromUart+0x1ba>
		printf("[cl] Okay, printing bitmaps' hex data...\n\r");
 8001d9a:	482a      	ldr	r0, [pc, #168]	; (8001e44 <configFromUart+0x254>)
 8001d9c:	f007 fdd2 	bl	8009944 <iprintf>
		reportBitmaps(1);
 8001da0:	2001      	movs	r0, #1
 8001da2:	f001 fc77 	bl	8003694 <reportBitmaps>
		return 0;
 8001da6:	2300      	movs	r3, #0
 8001da8:	e02d      	b.n	8001e06 <configFromUart+0x216>
		}
	else{
		printf("[cl] Unexpected first msg. Got %s, which is not a recognised command.\n\r", msg);
 8001daa:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8001dae:	4619      	mov	r1, r3
 8001db0:	4825      	ldr	r0, [pc, #148]	; (8001e48 <configFromUart+0x258>)
 8001db2:	f007 fdc7 	bl	8009944 <iprintf>
		printf("[cl] Known commands: \n\r");
 8001db6:	4825      	ldr	r0, [pc, #148]	; (8001e4c <configFromUart+0x25c>)
 8001db8:	f007 fdc4 	bl	8009944 <iprintf>
		printf("[cl] %s \n\r", configMsg);
 8001dbc:	f507 7315 	add.w	r3, r7, #596	; 0x254
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4823      	ldr	r0, [pc, #140]	; (8001e50 <configFromUart+0x260>)
 8001dc4:	f007 fdbe 	bl	8009944 <iprintf>
		printf("[cl] %s \n\r", bitmapMsg);
 8001dc8:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4820      	ldr	r0, [pc, #128]	; (8001e50 <configFromUart+0x260>)
 8001dd0:	f007 fdb8 	bl	8009944 <iprintf>
		printf("[cl] %s \n\r", deleteMsg);
 8001dd4:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8001dd8:	4619      	mov	r1, r3
 8001dda:	481d      	ldr	r0, [pc, #116]	; (8001e50 <configFromUart+0x260>)
 8001ddc:	f007 fdb2 	bl	8009944 <iprintf>
		printf("[cl] %s \n\r", sreportMsg);
 8001de0:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 8001de4:	4619      	mov	r1, r3
 8001de6:	481a      	ldr	r0, [pc, #104]	; (8001e50 <configFromUart+0x260>)
 8001de8:	f007 fdac 	bl	8009944 <iprintf>
		printf("[cl] %s \n\r", breportMsg);
 8001dec:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8001df0:	4619      	mov	r1, r3
 8001df2:	4817      	ldr	r0, [pc, #92]	; (8001e50 <configFromUart+0x260>)
 8001df4:	f007 fda6 	bl	8009944 <iprintf>
		printf("[cl] %s \n\r", hreportMsg);
 8001df8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4814      	ldr	r0, [pc, #80]	; (8001e50 <configFromUart+0x260>)
 8001e00:	f007 fda0 	bl	8009944 <iprintf>
		return 1;
 8001e04:	2301      	movs	r3, #1
	}
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	f507 7738 	add.w	r7, r7, #736	; 0x2e0
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bdb0      	pop	{r4, r5, r7, pc}
 8001e10:	20002150 	.word	0x20002150
 8001e14:	0800a9dc 	.word	0x0800a9dc
 8001e18:	0800ab60 	.word	0x0800ab60
 8001e1c:	0800ab68 	.word	0x0800ab68
 8001e20:	0800ab70 	.word	0x0800ab70
 8001e24:	0800ab80 	.word	0x0800ab80
 8001e28:	0800ab90 	.word	0x0800ab90
 8001e2c:	0800aba0 	.word	0x0800aba0
 8001e30:	0800a9f4 	.word	0x0800a9f4
 8001e34:	0800aa24 	.word	0x0800aa24
 8001e38:	0800aa50 	.word	0x0800aa50
 8001e3c:	0800aa88 	.word	0x0800aa88
 8001e40:	0800aaa8 	.word	0x0800aaa8
 8001e44:	0800aac8 	.word	0x0800aac8
 8001e48:	0800aaf4 	.word	0x0800aaf4
 8001e4c:	0800ab3c 	.word	0x0800ab3c
 8001e50:	0800ab54 	.word	0x0800ab54

08001e54 <configBitmapFromUart>:

int configBitmapFromUart(){
 8001e54:	b580      	push	{r7, lr}
 8001e56:	f5ad 5dc5 	sub.w	sp, sp, #6304	; 0x18a0
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
	int count;
	char msg[128];
	struct bitmapList blist;
	readBitmapList(&blist);
 8001e5e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001e62:	f103 030c 	add.w	r3, r3, #12
 8001e66:	4618      	mov	r0, r3
 8001e68:	f001 f96c 	bl	8003144 <readBitmapList>
	int currentSector = blist.lastUsedSector + 1;
 8001e6c:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8001e70:	f103 0310 	add.w	r3, r3, #16
 8001e74:	f6a3 03a4 	subw	r3, r3, #2212	; 0x8a4
 8001e78:	885b      	ldrh	r3, [r3, #2]
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	f507 52c5 	add.w	r2, r7, #6304	; 0x18a0
 8001e80:	f102 020c 	add.w	r2, r2, #12
 8001e84:	6013      	str	r3, [r2, #0]
	if(currentSector > MAX_SECTOR){
 8001e86:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8001e8a:	f103 030c 	add.w	r3, r3, #12
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e94:	db0d      	blt.n	8001eb2 <configBitmapFromUart+0x5e>
		printf("[cl] Error trying to write bitmap to memory: No more free sectors. Last used: %d \n\r", blist.lastUsedSector);
 8001e96:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8001e9a:	f103 0310 	add.w	r3, r3, #16
 8001e9e:	f6a3 03a4 	subw	r3, r3, #2212	; 0x8a4
 8001ea2:	885b      	ldrh	r3, [r3, #2]
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	48ca      	ldr	r0, [pc, #808]	; (80021d0 <configBitmapFromUart+0x37c>)
 8001ea8:	f007 fd4c 	bl	8009944 <iprintf>
		return 1000;
 8001eac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eb0:	e28e      	b.n	80023d0 <configBitmapFromUart+0x57c>
	}
	if(blist.totalBitmaps>=MAX_BITMAPS){
 8001eb2:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8001eb6:	f103 0310 	add.w	r3, r3, #16
 8001eba:	f6a3 03a4 	subw	r3, r3, #2212	; 0x8a4
 8001ebe:	881b      	ldrh	r3, [r3, #0]
 8001ec0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ec4:	d307      	bcc.n	8001ed6 <configBitmapFromUart+0x82>
		printf("[cl] Error trying to write bitmap to memory: Maximum number of bitmaps (%d) exceeded. \n\r", MAX_BITMAPS);
 8001ec6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001eca:	48c2      	ldr	r0, [pc, #776]	; (80021d4 <configBitmapFromUart+0x380>)
 8001ecc:	f007 fd3a 	bl	8009944 <iprintf>
		return 1001;
 8001ed0:	f240 33e9 	movw	r3, #1001	; 0x3e9
 8001ed4:	e27c      	b.n	80023d0 <configBitmapFromUart+0x57c>
	}
	blist.bitmapSectors[blist.totalBitmaps] = currentSector;
 8001ed6:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8001eda:	f103 0310 	add.w	r3, r3, #16
 8001ede:	f6a3 03a4 	subw	r3, r3, #2212	; 0x8a4
 8001ee2:	881b      	ldrh	r3, [r3, #0]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8001eea:	f103 030c 	add.w	r3, r3, #12
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	b299      	uxth	r1, r3
 8001ef2:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8001ef6:	f103 0310 	add.w	r3, r3, #16
 8001efa:	f6a3 02a4 	subw	r2, r3, #2212	; 0x8a4
 8001efe:	0043      	lsls	r3, r0, #1
 8001f00:	4413      	add	r3, r2
 8001f02:	460a      	mov	r2, r1
 8001f04:	809a      	strh	r2, [r3, #4]
 	blist.totalBitmaps++;
 8001f06:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8001f0a:	f103 0310 	add.w	r3, r3, #16
 8001f0e:	f6a3 03a4 	subw	r3, r3, #2212	; 0x8a4
 8001f12:	881b      	ldrh	r3, [r3, #0]
 8001f14:	3301      	adds	r3, #1
 8001f16:	b29a      	uxth	r2, r3
 8001f18:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8001f1c:	f103 0310 	add.w	r3, r3, #16
 8001f20:	f6a3 03a4 	subw	r3, r3, #2212	; 0x8a4
 8001f24:	801a      	strh	r2, [r3, #0]

 	struct bitmap bm;

 	UART_READ_STRING();
 8001f26:	f507 50c0 	add.w	r0, r7, #6144	; 0x1800
 8001f2a:	f100 0010 	add.w	r0, r0, #16
 8001f2e:	230d      	movs	r3, #13
 8001f30:	2280      	movs	r2, #128	; 0x80
 8001f32:	49a9      	ldr	r1, [pc, #676]	; (80021d8 <configBitmapFromUart+0x384>)
 8001f34:	f003 fb40 	bl	80055b8 <read_usart_message>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	f507 52c5 	add.w	r2, r7, #6304	; 0x18a0
 8001f3e:	6013      	str	r3, [r2, #0]
 8001f40:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d0ed      	beq.n	8001f26 <configBitmapFromUart+0xd2>
 8001f4a:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	3b01      	subs	r3, #1
 8001f52:	f503 53c5 	add.w	r3, r3, #6304	; 0x18a0
 8001f56:	f103 0310 	add.w	r3, r3, #16
 8001f5a:	443b      	add	r3, r7
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f803 2ca0 	strb.w	r2, [r3, #-160]
 	bm.xsize = atoi(msg);
 8001f62:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8001f66:	f103 0310 	add.w	r3, r3, #16
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f007 fca6 	bl	80098bc <atoi>
 8001f70:	4603      	mov	r3, r0
 8001f72:	b29a      	uxth	r2, r3
 8001f74:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8001f78:	f103 0310 	add.w	r3, r3, #16
 8001f7c:	f6a3 03ac 	subw	r3, r3, #2220	; 0x8ac
 8001f80:	805a      	strh	r2, [r3, #2]
 	UART_READ_STRING();
 8001f82:	f507 50c0 	add.w	r0, r7, #6144	; 0x1800
 8001f86:	f100 0010 	add.w	r0, r0, #16
 8001f8a:	230d      	movs	r3, #13
 8001f8c:	2280      	movs	r2, #128	; 0x80
 8001f8e:	4992      	ldr	r1, [pc, #584]	; (80021d8 <configBitmapFromUart+0x384>)
 8001f90:	f003 fb12 	bl	80055b8 <read_usart_message>
 8001f94:	4603      	mov	r3, r0
 8001f96:	f507 52c5 	add.w	r2, r7, #6304	; 0x18a0
 8001f9a:	6013      	str	r3, [r2, #0]
 8001f9c:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d0ed      	beq.n	8001f82 <configBitmapFromUart+0x12e>
 8001fa6:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	3b01      	subs	r3, #1
 8001fae:	f503 53c5 	add.w	r3, r3, #6304	; 0x18a0
 8001fb2:	f103 0310 	add.w	r3, r3, #16
 8001fb6:	443b      	add	r3, r7
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f803 2ca0 	strb.w	r2, [r3, #-160]
 	bm.ysize = atoi(msg);
 8001fbe:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8001fc2:	f103 0310 	add.w	r3, r3, #16
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f007 fc78 	bl	80098bc <atoi>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	b29a      	uxth	r2, r3
 8001fd0:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8001fd4:	f103 0310 	add.w	r3, r3, #16
 8001fd8:	f6a3 03ac 	subw	r3, r3, #2220	; 0x8ac
 8001fdc:	809a      	strh	r2, [r3, #4]

 	bm.bitmapNumber = blist.totalBitmaps-1;
 8001fde:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8001fe2:	f103 0310 	add.w	r3, r3, #16
 8001fe6:	f6a3 03a4 	subw	r3, r3, #2212	; 0x8a4
 8001fea:	881b      	ldrh	r3, [r3, #0]
 8001fec:	3b01      	subs	r3, #1
 8001fee:	b29a      	uxth	r2, r3
 8001ff0:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8001ff4:	f103 0310 	add.w	r3, r3, #16
 8001ff8:	f6a3 03ac 	subw	r3, r3, #2220	; 0x8ac
 8001ffc:	801a      	strh	r2, [r3, #0]

 	int expectedBytes = 2*bm.xsize*bm.ysize;
 8001ffe:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8002002:	f103 0310 	add.w	r3, r3, #16
 8002006:	f6a3 03ac 	subw	r3, r3, #2220	; 0x8ac
 800200a:	885b      	ldrh	r3, [r3, #2]
 800200c:	461a      	mov	r2, r3
 800200e:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8002012:	f103 0310 	add.w	r3, r3, #16
 8002016:	f6a3 03ac 	subw	r3, r3, #2220	; 0x8ac
 800201a:	889b      	ldrh	r3, [r3, #4]
 800201c:	fb02 f303 	mul.w	r3, r2, r3
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	f507 52c4 	add.w	r2, r7, #6272	; 0x1880
 8002026:	f102 021c 	add.w	r2, r2, #28
 800202a:	6013      	str	r3, [r2, #0]
 	int spaceLeft = SECTOR_SIZE*(MAX_SECTOR+1-currentSector) - sizeof(bm);
 800202c:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8002030:	f103 030c 	add.w	r3, r3, #12
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 800203a:	031b      	lsls	r3, r3, #12
 800203c:	3b06      	subs	r3, #6
 800203e:	f507 52c4 	add.w	r2, r7, #6272	; 0x1880
 8002042:	f102 0218 	add.w	r2, r2, #24
 8002046:	6013      	str	r3, [r2, #0]

 	printf("[cl] Okay, ready to parse bitmap #%d, size %dx%d pixels.\n\r", bm.bitmapNumber, bm.xsize, bm.ysize);
 8002048:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 800204c:	f103 0310 	add.w	r3, r3, #16
 8002050:	f6a3 03ac 	subw	r3, r3, #2220	; 0x8ac
 8002054:	881b      	ldrh	r3, [r3, #0]
 8002056:	4619      	mov	r1, r3
 8002058:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 800205c:	f103 0310 	add.w	r3, r3, #16
 8002060:	f6a3 03ac 	subw	r3, r3, #2220	; 0x8ac
 8002064:	885b      	ldrh	r3, [r3, #2]
 8002066:	461a      	mov	r2, r3
 8002068:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 800206c:	f103 0310 	add.w	r3, r3, #16
 8002070:	f6a3 03ac 	subw	r3, r3, #2220	; 0x8ac
 8002074:	889b      	ldrh	r3, [r3, #4]
 8002076:	4859      	ldr	r0, [pc, #356]	; (80021dc <configBitmapFromUart+0x388>)
 8002078:	f007 fc64 	bl	8009944 <iprintf>

 	if(expectedBytes > spaceLeft){
 800207c:	f507 53c4 	add.w	r3, r7, #6272	; 0x1880
 8002080:	f103 031c 	add.w	r3, r3, #28
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	f507 53c4 	add.w	r3, r7, #6272	; 0x1880
 800208a:	f103 0318 	add.w	r3, r3, #24
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	429a      	cmp	r2, r3
 8002092:	dd0c      	ble.n	80020ae <configBitmapFromUart+0x25a>
 		printf("[cl] WARNING: This bitmap is not going to fit into memory! Only first %d bytes of total %d will be written. \n\r", spaceLeft, expectedBytes);
 8002094:	f507 53c4 	add.w	r3, r7, #6272	; 0x1880
 8002098:	f103 031c 	add.w	r3, r3, #28
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	f507 53c4 	add.w	r3, r7, #6272	; 0x1880
 80020a2:	f103 0318 	add.w	r3, r3, #24
 80020a6:	6819      	ldr	r1, [r3, #0]
 80020a8:	484d      	ldr	r0, [pc, #308]	; (80021e0 <configBitmapFromUart+0x38c>)
 80020aa:	f007 fc4b 	bl	8009944 <iprintf>
 	}

 	uint8_t sectorBuffer[SECTOR_SIZE];
 	int sectorBufferIndex = 0;
 80020ae:	2300      	movs	r3, #0
 80020b0:	f507 52c5 	add.w	r2, r7, #6304	; 0x18a0
 80020b4:	f102 0208 	add.w	r2, r2, #8
 80020b8:	6013      	str	r3, [r2, #0]

 	memcpy(sectorBuffer+sectorBufferIndex, (uint8_t *) &bm, sizeof(bm));
 80020ba:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 80020be:	f103 0308 	add.w	r3, r3, #8
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	f107 0310 	add.w	r3, r7, #16
 80020c8:	3b0c      	subs	r3, #12
 80020ca:	4413      	add	r3, r2
 80020cc:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 80020d0:	f101 0104 	add.w	r1, r1, #4
 80020d4:	2206      	movs	r2, #6
 80020d6:	4618      	mov	r0, r3
 80020d8:	f007 fc1e 	bl	8009918 <memcpy>
 	sectorBufferIndex += sizeof(bm);
 80020dc:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 80020e0:	f103 0308 	add.w	r3, r3, #8
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	3306      	adds	r3, #6
 80020e8:	f507 52c5 	add.w	r2, r7, #6304	; 0x18a0
 80020ec:	f102 0208 	add.w	r2, r2, #8
 80020f0:	6013      	str	r3, [r2, #0]

 	int bytesLeft = expectedBytes;
 80020f2:	f507 53c4 	add.w	r3, r7, #6272	; 0x1880
 80020f6:	f103 031c 	add.w	r3, r3, #28
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f507 52c5 	add.w	r2, r7, #6304	; 0x18a0
 8002100:	f102 0204 	add.w	r2, r2, #4
 8002104:	6013      	str	r3, [r2, #0]
 	int updateCount = expectedBytes / 10;
 8002106:	f507 53c4 	add.w	r3, r7, #6272	; 0x1880
 800210a:	f103 031c 	add.w	r3, r3, #28
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a34      	ldr	r2, [pc, #208]	; (80021e4 <configBitmapFromUart+0x390>)
 8002112:	fb82 1203 	smull	r1, r2, r2, r3
 8002116:	1092      	asrs	r2, r2, #2
 8002118:	17db      	asrs	r3, r3, #31
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	f507 52c4 	add.w	r2, r7, #6272	; 0x1880
 8002120:	f102 0214 	add.w	r2, r2, #20
 8002124:	6013      	str	r3, [r2, #0]
 	if(updateCount == 0){
 8002126:	f507 53c4 	add.w	r3, r7, #6272	; 0x1880
 800212a:	f103 0314 	add.w	r3, r3, #20
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d105      	bne.n	8002140 <configBitmapFromUart+0x2ec>
 		updateCount = 1;
 8002134:	2301      	movs	r3, #1
 8002136:	f507 52c4 	add.w	r2, r7, #6272	; 0x1880
 800213a:	f102 0214 	add.w	r2, r2, #20
 800213e:	6013      	str	r3, [r2, #0]
 	}
 	updateCount = 1;
 8002140:	2301      	movs	r3, #1
 8002142:	f507 52c4 	add.w	r2, r7, #6272	; 0x1880
 8002146:	f102 0214 	add.w	r2, r2, #20
 800214a:	6013      	str	r3, [r2, #0]

 	while(bytesLeft > 0){
 800214c:	e0e7      	b.n	800231e <configBitmapFromUart+0x4ca>
 		if(bytesLeft %updateCount == 0){
 800214e:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8002152:	f103 0304 	add.w	r3, r3, #4
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f507 52c4 	add.w	r2, r7, #6272	; 0x1880
 800215c:	f102 0214 	add.w	r2, r2, #20
 8002160:	6812      	ldr	r2, [r2, #0]
 8002162:	fb93 f2f2 	sdiv	r2, r3, r2
 8002166:	f507 51c4 	add.w	r1, r7, #6272	; 0x1880
 800216a:	f101 0114 	add.w	r1, r1, #20
 800216e:	6809      	ldr	r1, [r1, #0]
 8002170:	fb01 f202 	mul.w	r2, r1, r2
 8002174:	1a9b      	subs	r3, r3, r2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d107      	bne.n	800218a <configBitmapFromUart+0x336>
 			printf("[cl] %d bytes left.\n\r", bytesLeft);
 800217a:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 800217e:	f103 0304 	add.w	r3, r3, #4
 8002182:	6819      	ldr	r1, [r3, #0]
 8002184:	4818      	ldr	r0, [pc, #96]	; (80021e8 <configBitmapFromUart+0x394>)
 8002186:	f007 fbdd 	bl	8009944 <iprintf>
 		}
 		do{count = read_usart_message(msg, &huart1, 2, NEWLINE);} while (count==0);
 800218a:	f507 50c0 	add.w	r0, r7, #6144	; 0x1800
 800218e:	f100 0010 	add.w	r0, r0, #16
 8002192:	230d      	movs	r3, #13
 8002194:	2202      	movs	r2, #2
 8002196:	4910      	ldr	r1, [pc, #64]	; (80021d8 <configBitmapFromUart+0x384>)
 8002198:	f003 fa0e 	bl	80055b8 <read_usart_message>
 800219c:	4603      	mov	r3, r0
 800219e:	f507 52c5 	add.w	r2, r7, #6304	; 0x18a0
 80021a2:	6013      	str	r3, [r2, #0]
 80021a4:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d0ed      	beq.n	800218a <configBitmapFromUart+0x336>
 		if(count!=2){
 80021ae:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d01b      	beq.n	80021f0 <configBitmapFromUart+0x39c>
 			printf("[cl] Error: Unexpected end of bitmap #%d data.\n\r.", bm.bitmapNumber);
 80021b8:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 80021bc:	f103 0310 	add.w	r3, r3, #16
 80021c0:	f6a3 03ac 	subw	r3, r3, #2220	; 0x8ac
 80021c4:	881b      	ldrh	r3, [r3, #0]
 80021c6:	4619      	mov	r1, r3
 80021c8:	4808      	ldr	r0, [pc, #32]	; (80021ec <configBitmapFromUart+0x398>)
 80021ca:	f007 fbbb 	bl	8009944 <iprintf>
 			break;
 80021ce:	e0ae      	b.n	800232e <configBitmapFromUart+0x4da>
 80021d0:	0800abb4 	.word	0x0800abb4
 80021d4:	0800ac08 	.word	0x0800ac08
 80021d8:	20002150 	.word	0x20002150
 80021dc:	0800ac64 	.word	0x0800ac64
 80021e0:	0800aca0 	.word	0x0800aca0
 80021e4:	66666667 	.word	0x66666667
 80021e8:	0800ad10 	.word	0x0800ad10
 80021ec:	0800ad28 	.word	0x0800ad28
 		}
 		msg[2] = 0;
 80021f0:	2300      	movs	r3, #0
 80021f2:	f507 52c0 	add.w	r2, r7, #6144	; 0x1800
 80021f6:	f102 0212 	add.w	r2, r2, #18
 80021fa:	7013      	strb	r3, [r2, #0]
		uint8_t deHexedByte = (uint8_t) strtol(msg, NULL, 16);
 80021fc:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8002200:	f103 0310 	add.w	r3, r3, #16
 8002204:	2210      	movs	r2, #16
 8002206:	2100      	movs	r1, #0
 8002208:	4618      	mov	r0, r3
 800220a:	f007 fc3d 	bl	8009a88 <strtol>
 800220e:	4603      	mov	r3, r0
 8002210:	f507 52c4 	add.w	r2, r7, #6272	; 0x1880
 8002214:	f102 0213 	add.w	r2, r2, #19
 8002218:	7013      	strb	r3, [r2, #0]
		sectorBuffer[sectorBufferIndex] = deHexedByte;
 800221a:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800221e:	f6a3 02ac 	subw	r2, r3, #2220	; 0x8ac
 8002222:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8002226:	f103 0308 	add.w	r3, r3, #8
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4413      	add	r3, r2
 800222e:	f507 52c4 	add.w	r2, r7, #6272	; 0x1880
 8002232:	f102 0213 	add.w	r2, r2, #19
 8002236:	7812      	ldrb	r2, [r2, #0]
 8002238:	701a      	strb	r2, [r3, #0]
		sectorBufferIndex++;
 800223a:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 800223e:	f103 0308 	add.w	r3, r3, #8
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	3301      	adds	r3, #1
 8002246:	f507 52c5 	add.w	r2, r7, #6304	; 0x18a0
 800224a:	f102 0208 	add.w	r2, r2, #8
 800224e:	6013      	str	r3, [r2, #0]
		bytesLeft--;
 8002250:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8002254:	f103 0304 	add.w	r3, r3, #4
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	3b01      	subs	r3, #1
 800225c:	f507 52c5 	add.w	r2, r7, #6304	; 0x18a0
 8002260:	f102 0204 	add.w	r2, r2, #4
 8002264:	6013      	str	r3, [r2, #0]
		if(sectorBufferIndex == SECTOR_SIZE || bytesLeft == 0){
 8002266:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 800226a:	f103 0308 	add.w	r3, r3, #8
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002274:	d006      	beq.n	8002284 <configBitmapFromUart+0x430>
 8002276:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 800227a:	f103 0304 	add.w	r3, r3, #4
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d14c      	bne.n	800231e <configBitmapFromUart+0x4ca>
			ext_flash_erase_4kB(currentSector*SECTOR_SIZE);
 8002284:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8002288:	f103 030c 	add.w	r3, r3, #12
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	031b      	lsls	r3, r3, #12
 8002290:	4618      	mov	r0, r3
 8002292:	f001 fb0d 	bl	80038b0 <ext_flash_erase_4kB>
			ext_flash_write_multipage(currentSector*SECTOR_SIZE, sectorBuffer, sectorBufferIndex);
 8002296:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 800229a:	f103 030c 	add.w	r3, r3, #12
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	031b      	lsls	r3, r3, #12
 80022a2:	4618      	mov	r0, r3
 80022a4:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 80022a8:	f103 0308 	add.w	r3, r3, #8
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	f107 0310 	add.w	r3, r7, #16
 80022b2:	3b0c      	subs	r3, #12
 80022b4:	4619      	mov	r1, r3
 80022b6:	f001 fc15 	bl	8003ae4 <ext_flash_write_multipage>
			sectorBufferIndex = 0;
 80022ba:	2300      	movs	r3, #0
 80022bc:	f507 52c5 	add.w	r2, r7, #6304	; 0x18a0
 80022c0:	f102 0208 	add.w	r2, r2, #8
 80022c4:	6013      	str	r3, [r2, #0]
			if(bytesLeft > 0){
 80022c6:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 80022ca:	f103 0304 	add.w	r3, r3, #4
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	dd24      	ble.n	800231e <configBitmapFromUart+0x4ca>
				if(currentSector == MAX_SECTOR){
 80022d4:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 80022d8:	f103 030c 	add.w	r3, r3, #12
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d110      	bne.n	8002308 <configBitmapFromUart+0x4b4>
					printf("[cl] Warning: Ran out of external memory while writing bitmap #%d. Last %d bytes not saved. \n\r", bm.bitmapNumber, bytesLeft);
 80022e6:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 80022ea:	f103 0310 	add.w	r3, r3, #16
 80022ee:	f6a3 03ac 	subw	r3, r3, #2220	; 0x8ac
 80022f2:	881b      	ldrh	r3, [r3, #0]
 80022f4:	f507 52c5 	add.w	r2, r7, #6304	; 0x18a0
 80022f8:	f102 0204 	add.w	r2, r2, #4
 80022fc:	6812      	ldr	r2, [r2, #0]
 80022fe:	4619      	mov	r1, r3
 8002300:	4836      	ldr	r0, [pc, #216]	; (80023dc <configBitmapFromUart+0x588>)
 8002302:	f007 fb1f 	bl	8009944 <iprintf>
					break;
 8002306:	e012      	b.n	800232e <configBitmapFromUart+0x4da>
				}
				currentSector++;
 8002308:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 800230c:	f103 030c 	add.w	r3, r3, #12
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	3301      	adds	r3, #1
 8002314:	f507 52c5 	add.w	r2, r7, #6304	; 0x18a0
 8002318:	f102 020c 	add.w	r2, r2, #12
 800231c:	6013      	str	r3, [r2, #0]
 	while(bytesLeft > 0){
 800231e:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8002322:	f103 0304 	add.w	r3, r3, #4
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	f73f af10 	bgt.w	800214e <configBitmapFromUart+0x2fa>
			}
		}
 	}
 	read_usart_message(msg, &huart1, 2, NEWLINE); //get rid of newline left in buffer after reading last 2 chars
 800232e:	f507 50c0 	add.w	r0, r7, #6144	; 0x1800
 8002332:	f100 0010 	add.w	r0, r0, #16
 8002336:	230d      	movs	r3, #13
 8002338:	2202      	movs	r2, #2
 800233a:	4929      	ldr	r1, [pc, #164]	; (80023e0 <configBitmapFromUart+0x58c>)
 800233c:	f003 f93c 	bl	80055b8 <read_usart_message>

 	blist.lastUsedSector = currentSector;
 8002340:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8002344:	f103 030c 	add.w	r3, r3, #12
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	b29a      	uxth	r2, r3
 800234c:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8002350:	f103 0310 	add.w	r3, r3, #16
 8002354:	f6a3 03a4 	subw	r3, r3, #2212	; 0x8a4
 8002358:	805a      	strh	r2, [r3, #2]
 	memcpy(sectorBuffer, (uint8_t *) &blist, sizeof(blist));
 800235a:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 800235e:	f101 010c 	add.w	r1, r1, #12
 8002362:	f107 0310 	add.w	r3, r7, #16
 8002366:	3b0c      	subs	r3, #12
 8002368:	f640 0204 	movw	r2, #2052	; 0x804
 800236c:	4618      	mov	r0, r3
 800236e:	f007 fad3 	bl	8009918 <memcpy>
 	ext_flash_erase_4kB(BITMAP_LIST_SECTOR*SECTOR_SIZE);
 8002372:	f44f 2048 	mov.w	r0, #819200	; 0xc8000
 8002376:	f001 fa9b 	bl	80038b0 <ext_flash_erase_4kB>
 	ext_flash_write_multipage(BITMAP_LIST_SECTOR*SECTOR_SIZE, sectorBuffer, sizeof(blist));
 800237a:	f107 0310 	add.w	r3, r7, #16
 800237e:	3b0c      	subs	r3, #12
 8002380:	f640 0204 	movw	r2, #2052	; 0x804
 8002384:	4619      	mov	r1, r3
 8002386:	f44f 2048 	mov.w	r0, #819200	; 0xc8000
 800238a:	f001 fbab 	bl	8003ae4 <ext_flash_write_multipage>

	if(bytesLeft > 0){
 800238e:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 8002392:	f103 0304 	add.w	r3, r3, #4
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2b00      	cmp	r3, #0
 800239a:	dd0d      	ble.n	80023b8 <configBitmapFromUart+0x564>
		printf("[cl] Bitmap #%d has been PARTIALLY written.\n\r", bm.bitmapNumber);
 800239c:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 80023a0:	f103 0310 	add.w	r3, r3, #16
 80023a4:	f6a3 03ac 	subw	r3, r3, #2220	; 0x8ac
 80023a8:	881b      	ldrh	r3, [r3, #0]
 80023aa:	4619      	mov	r1, r3
 80023ac:	480d      	ldr	r0, [pc, #52]	; (80023e4 <configBitmapFromUart+0x590>)
 80023ae:	f007 fac9 	bl	8009944 <iprintf>
		return 1005;
 80023b2:	f240 33ed 	movw	r3, #1005	; 0x3ed
 80023b6:	e00b      	b.n	80023d0 <configBitmapFromUart+0x57c>
	}
	printf("[cl] Bitmap #%d has been written.\n\r", bm.bitmapNumber);
 80023b8:	f507 53c5 	add.w	r3, r7, #6304	; 0x18a0
 80023bc:	f103 0310 	add.w	r3, r3, #16
 80023c0:	f6a3 03ac 	subw	r3, r3, #2220	; 0x8ac
 80023c4:	881b      	ldrh	r3, [r3, #0]
 80023c6:	4619      	mov	r1, r3
 80023c8:	4807      	ldr	r0, [pc, #28]	; (80023e8 <configBitmapFromUart+0x594>)
 80023ca:	f007 fabb 	bl	8009944 <iprintf>
	return 0;
 80023ce:	2300      	movs	r3, #0
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	f507 57c5 	add.w	r7, r7, #6304	; 0x18a0
 80023d6:	3710      	adds	r7, #16
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	0800ad5c 	.word	0x0800ad5c
 80023e0:	20002150 	.word	0x20002150
 80023e4:	0800adbc 	.word	0x0800adbc
 80023e8:	0800adec 	.word	0x0800adec

080023ec <configMarkBitmapsForDelete>:

int configMarkBitmapsForDelete(){
 80023ec:	b580      	push	{r7, lr}
 80023ee:	f5ad 5d80 	sub.w	sp, sp, #4096	; 0x1000
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
	ext_flash_erase_4kB(BITMAP_LIST_SECTOR*SECTOR_SIZE);
 80023f6:	f44f 2048 	mov.w	r0, #819200	; 0xc8000
 80023fa:	f001 fa59 	bl	80038b0 <ext_flash_erase_4kB>
	struct bitmapList bl;
	bl.totalBitmaps = 0;
 80023fe:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002402:	f103 0308 	add.w	r3, r3, #8
 8002406:	f6a3 0304 	subw	r3, r3, #2052	; 0x804
 800240a:	2200      	movs	r2, #0
 800240c:	801a      	strh	r2, [r3, #0]
	bl.lastUsedSector = BITMAP_LIST_SECTOR;
 800240e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002412:	f103 0308 	add.w	r3, r3, #8
 8002416:	f6a3 0304 	subw	r3, r3, #2052	; 0x804
 800241a:	22c8      	movs	r2, #200	; 0xc8
 800241c:	805a      	strh	r2, [r3, #2]
	uint8_t buff[sizeof(bl)];
	memcpy(buff, (uint8_t *) &bl, sizeof(bl));
 800241e:	f107 0308 	add.w	r3, r7, #8
 8002422:	4619      	mov	r1, r3
 8002424:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002428:	f103 0308 	add.w	r3, r3, #8
 800242c:	f6a3 0204 	subw	r2, r3, #2052	; 0x804
 8002430:	f1a1 0308 	sub.w	r3, r1, #8
 8002434:	4611      	mov	r1, r2
 8002436:	f640 0204 	movw	r2, #2052	; 0x804
 800243a:	4618      	mov	r0, r3
 800243c:	f007 fa6c 	bl	8009918 <memcpy>
	ext_flash_write_multipage(BITMAP_LIST_SECTOR*SECTOR_SIZE, buff, sizeof(bl));
 8002440:	f107 0308 	add.w	r3, r7, #8
 8002444:	3b08      	subs	r3, #8
 8002446:	f640 0204 	movw	r2, #2052	; 0x804
 800244a:	4619      	mov	r1, r3
 800244c:	f44f 2048 	mov.w	r0, #819200	; 0xc8000
 8002450:	f001 fb48 	bl	8003ae4 <ext_flash_write_multipage>
	printf("[cl] Bitmaps marked for delete.\n\r");
 8002454:	4804      	ldr	r0, [pc, #16]	; (8002468 <configMarkBitmapsForDelete+0x7c>)
 8002456:	f007 fa75 	bl	8009944 <iprintf>
	return 0;
 800245a:	2300      	movs	r3, #0
}
 800245c:	4618      	mov	r0, r3
 800245e:	f507 5780 	add.w	r7, r7, #4096	; 0x1000
 8002462:	3708      	adds	r7, #8
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	0800ae10 	.word	0x0800ae10

0800246c <configScreensFromUart>:


int configScreensFromUart(){
 800246c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800246e:	f5ad 5d4b 	sub.w	sp, sp, #12992	; 0x32c0
 8002472:	b087      	sub	sp, #28
 8002474:	af04      	add	r7, sp, #16
	int count;
	char msg[128];
	UART_READ_STRING(); //read general config - number of screens
 8002476:	f507 5048 	add.w	r0, r7, #12800	; 0x3200
 800247a:	f100 0020 	add.w	r0, r0, #32
 800247e:	230d      	movs	r3, #13
 8002480:	2280      	movs	r2, #128	; 0x80
 8002482:	4989      	ldr	r1, [pc, #548]	; (80026a8 <configScreensFromUart+0x23c>)
 8002484:	f003 f898 	bl	80055b8 <read_usart_message>
 8002488:	4603      	mov	r3, r0
 800248a:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 800248e:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8002492:	6013      	str	r3, [r2, #0]
 8002494:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002498:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d0e9      	beq.n	8002476 <configScreensFromUart+0xa>
 80024a2:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 80024a6:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	3b01      	subs	r3, #1
 80024ae:	f503 534b 	add.w	r3, r3, #12992	; 0x32c0
 80024b2:	f103 0308 	add.w	r3, r3, #8
 80024b6:	443b      	add	r3, r7
 80024b8:	2200      	movs	r2, #0
 80024ba:	f803 2ca8 	strb.w	r2, [r3, #-168]
	int totalScreens = atoi(msg);
 80024be:	f507 5348 	add.w	r3, r7, #12800	; 0x3200
 80024c2:	f103 0320 	add.w	r3, r3, #32
 80024c6:	4618      	mov	r0, r3
 80024c8:	f007 f9f8 	bl	80098bc <atoi>
 80024cc:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 80024d0:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80024d4:	6018      	str	r0, [r3, #0]

	if(totalScreens < 1 || totalScreens >256){
 80024d6:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 80024da:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	dd07      	ble.n	80024f4 <configScreensFromUart+0x88>
 80024e4:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 80024e8:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024f2:	dd0a      	ble.n	800250a <configScreensFromUart+0x9e>
		printf("[cl] Got %d, which is not a valid number of screens.\n\r", totalScreens);
 80024f4:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 80024f8:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80024fc:	6819      	ldr	r1, [r3, #0]
 80024fe:	486b      	ldr	r0, [pc, #428]	; (80026ac <configScreensFromUart+0x240>)
 8002500:	f007 fa20 	bl	8009944 <iprintf>
		return 2;
 8002504:	2302      	movs	r3, #2
 8002506:	f000 bdee 	b.w	80030e6 <configScreensFromUart+0xc7a>
	}

	struct generalConfig gconf;

	memset(&gconf.screenSectors, 0, sizeof(gconf.screenSectors));
 800250a:	f507 5340 	add.w	r3, r7, #12288	; 0x3000
 800250e:	f103 031c 	add.w	r3, r3, #28
 8002512:	3302      	adds	r3, #2
 8002514:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002518:	2100      	movs	r1, #0
 800251a:	4618      	mov	r0, r3
 800251c:	f007 fa0a 	bl	8009934 <memset>
	gconf.totalScreens = totalScreens;
 8002520:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002524:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	b2da      	uxtb	r2, r3
 800252c:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8002530:	f103 0308 	add.w	r3, r3, #8
 8002534:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 8002538:	701a      	strb	r2, [r3, #0]

	printf("[cl] Ok, expecting %d screens worth of data.\n\r", totalScreens);
 800253a:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 800253e:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8002542:	6819      	ldr	r1, [r3, #0]
 8002544:	485a      	ldr	r0, [pc, #360]	; (80026b0 <configScreensFromUart+0x244>)
 8002546:	f007 f9fd 	bl	8009944 <iprintf>

	uint8_t currentScreenIndex = -1;
 800254a:	23ff      	movs	r3, #255	; 0xff
 800254c:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 8002550:	f102 0207 	add.w	r2, r2, #7
 8002554:	7013      	strb	r3, [r2, #0]
	uint16_t currentSector = GENERAL_CONFIG_SECTOR;
 8002556:	2300      	movs	r3, #0
 8002558:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 800255c:	f102 0204 	add.w	r2, r2, #4
 8002560:	8013      	strh	r3, [r2, #0]
	uint16_t currentScreenObjectsLeft = 0;
 8002562:	2300      	movs	r3, #0
 8002564:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 8002568:	f102 0202 	add.w	r2, r2, #2
 800256c:	8013      	strh	r3, [r2, #0]

	char screenStr[] = "screen";
 800256e:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8002572:	f103 0308 	add.w	r3, r3, #8
 8002576:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 800257a:	4a4e      	ldr	r2, [pc, #312]	; (80026b4 <configScreensFromUart+0x248>)
 800257c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002580:	6018      	str	r0, [r3, #0]
 8002582:	3304      	adds	r3, #4
 8002584:	8019      	strh	r1, [r3, #0]
 8002586:	3302      	adds	r3, #2
 8002588:	0c0a      	lsrs	r2, r1, #16
 800258a:	701a      	strb	r2, [r3, #0]

	#define MAX_DATA_SIZE 8192
	uint8_t sectorBuffer[SECTOR_SIZE]; //holds sector before writing to external flash
	int sectorBufferIndex = 0;
 800258c:	2300      	movs	r3, #0
 800258e:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002592:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8002596:	6013      	str	r3, [r2, #0]
	uint8_t dataBuffer[MAX_DATA_SIZE];
	int dataBufferIndex = 0;
 8002598:	2300      	movs	r3, #0
 800259a:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 800259e:	f102 0238 	add.w	r2, r2, #56	; 0x38
 80025a2:	6013      	str	r3, [r2, #0]

	while(1){

		if(currentScreenIndex + 1 == totalScreens){
 80025a4:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 80025a8:	f103 0307 	add.w	r3, r3, #7
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	3301      	adds	r3, #1
 80025b0:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 80025b4:	f102 0228 	add.w	r2, r2, #40	; 0x28
 80025b8:	6812      	ldr	r2, [r2, #0]
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d131      	bne.n	8002622 <configScreensFromUart+0x1b6>
			printf("[cl] All screens' data received.\n\r");
 80025be:	483e      	ldr	r0, [pc, #248]	; (80026b8 <configScreensFromUart+0x24c>)
 80025c0:	f007 f9c0 	bl	8009944 <iprintf>
	}

	//all screens have been written.
	//Now save generic config, since sector address array has been completed:

	printf("Gconf screens %d \n\r", gconf.totalScreens);
 80025c4:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 80025c8:	f103 0308 	add.w	r3, r3, #8
 80025cc:	f5a3 732b 	sub.w	r3, r3, #684	; 0x2ac
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	4619      	mov	r1, r3
 80025d4:	4839      	ldr	r0, [pc, #228]	; (80026bc <configScreensFromUart+0x250>)
 80025d6:	f007 f9b5 	bl	8009944 <iprintf>

	sectorBufferIndex = 0;
 80025da:	2300      	movs	r3, #0
 80025dc:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 80025e0:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 80025e4:	6013      	str	r3, [r2, #0]
	memcpy(sectorBuffer+sectorBufferIndex, (uint8_t *) &gconf, 100);//sizeof(gconf));
 80025e6:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 80025ea:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80025f4:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80025f8:	3b14      	subs	r3, #20
 80025fa:	4413      	add	r3, r2
 80025fc:	f507 5140 	add.w	r1, r7, #12288	; 0x3000
 8002600:	f101 011c 	add.w	r1, r1, #28
 8002604:	2264      	movs	r2, #100	; 0x64
 8002606:	4618      	mov	r0, r3
 8002608:	f007 f986 	bl	8009918 <memcpy>

	printf("J ");
 800260c:	482c      	ldr	r0, [pc, #176]	; (80026c0 <configScreensFromUart+0x254>)
 800260e:	f007 f999 	bl	8009944 <iprintf>
	int j;
	for(j=0; j<sizeof(gconf); j++){
 8002612:	2300      	movs	r3, #0
 8002614:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002618:	f102 0230 	add.w	r2, r2, #48	; 0x30
 800261c:	6013      	str	r3, [r2, #0]
 800261e:	f000 bd41 	b.w	80030a4 <configScreensFromUart+0xc38>
		UART_READ_STRING();
 8002622:	f507 5048 	add.w	r0, r7, #12800	; 0x3200
 8002626:	f100 0020 	add.w	r0, r0, #32
 800262a:	230d      	movs	r3, #13
 800262c:	2280      	movs	r2, #128	; 0x80
 800262e:	491e      	ldr	r1, [pc, #120]	; (80026a8 <configScreensFromUart+0x23c>)
 8002630:	f002 ffc2 	bl	80055b8 <read_usart_message>
 8002634:	4603      	mov	r3, r0
 8002636:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 800263a:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 800263e:	6013      	str	r3, [r2, #0]
 8002640:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002644:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d0e9      	beq.n	8002622 <configScreensFromUart+0x1b6>
 800264e:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002652:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	3b01      	subs	r3, #1
 800265a:	f503 534b 	add.w	r3, r3, #12992	; 0x32c0
 800265e:	f103 0308 	add.w	r3, r3, #8
 8002662:	443b      	add	r3, r7
 8002664:	2200      	movs	r2, #0
 8002666:	f803 2ca8 	strb.w	r2, [r3, #-168]
		if(strcmp(screenStr, msg) != 0){
 800266a:	f507 5248 	add.w	r2, r7, #12800	; 0x3200
 800266e:	f102 0220 	add.w	r2, r2, #32
 8002672:	f507 5340 	add.w	r3, r7, #12288	; 0x3000
 8002676:	f103 0314 	add.w	r3, r3, #20
 800267a:	4611      	mov	r1, r2
 800267c:	4618      	mov	r0, r3
 800267e:	f7fd fda7 	bl	80001d0 <strcmp>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d01f      	beq.n	80026c8 <configScreensFromUart+0x25c>
			printf("[cl] Unexpected input - wanted %s, got %s. \n\r",screenStr, msg);
 8002688:	f507 5248 	add.w	r2, r7, #12800	; 0x3200
 800268c:	f102 0220 	add.w	r2, r2, #32
 8002690:	f507 5340 	add.w	r3, r7, #12288	; 0x3000
 8002694:	f103 0314 	add.w	r3, r3, #20
 8002698:	4619      	mov	r1, r3
 800269a:	480a      	ldr	r0, [pc, #40]	; (80026c4 <configScreensFromUart+0x258>)
 800269c:	f007 f952 	bl	8009944 <iprintf>
			return 3;
 80026a0:	2303      	movs	r3, #3
 80026a2:	f000 bd20 	b.w	80030e6 <configScreensFromUart+0xc7a>
 80026a6:	bf00      	nop
 80026a8:	20002150 	.word	0x20002150
 80026ac:	0800ae34 	.word	0x0800ae34
 80026b0:	0800ae6c 	.word	0x0800ae6c
 80026b4:	0800b0f0 	.word	0x0800b0f0
 80026b8:	0800ae9c 	.word	0x0800ae9c
 80026bc:	0800aec0 	.word	0x0800aec0
 80026c0:	0800aed4 	.word	0x0800aed4
 80026c4:	0800aed8 	.word	0x0800aed8
		UART_READ_STRING();
 80026c8:	f507 5048 	add.w	r0, r7, #12800	; 0x3200
 80026cc:	f100 0020 	add.w	r0, r0, #32
 80026d0:	230d      	movs	r3, #13
 80026d2:	2280      	movs	r2, #128	; 0x80
 80026d4:	497b      	ldr	r1, [pc, #492]	; (80028c4 <configScreensFromUart+0x458>)
 80026d6:	f002 ff6f 	bl	80055b8 <read_usart_message>
 80026da:	4603      	mov	r3, r0
 80026dc:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 80026e0:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 80026e4:	6013      	str	r3, [r2, #0]
 80026e6:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 80026ea:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d0e9      	beq.n	80026c8 <configScreensFromUart+0x25c>
 80026f4:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 80026f8:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	3b01      	subs	r3, #1
 8002700:	f503 534b 	add.w	r3, r3, #12992	; 0x32c0
 8002704:	f103 0308 	add.w	r3, r3, #8
 8002708:	443b      	add	r3, r7
 800270a:	2200      	movs	r2, #0
 800270c:	f803 2ca8 	strb.w	r2, [r3, #-168]
		currentScreenObjectsLeft = atoi(msg);
 8002710:	f507 5348 	add.w	r3, r7, #12800	; 0x3200
 8002714:	f103 0320 	add.w	r3, r3, #32
 8002718:	4618      	mov	r0, r3
 800271a:	f007 f8cf 	bl	80098bc <atoi>
 800271e:	4603      	mov	r3, r0
 8002720:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 8002724:	f102 0202 	add.w	r2, r2, #2
 8002728:	8013      	strh	r3, [r2, #0]
		printf("[cl] Ok, expecting %d objects for current screen.\n\r", currentScreenObjectsLeft);
 800272a:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 800272e:	f103 0302 	add.w	r3, r3, #2
 8002732:	881b      	ldrh	r3, [r3, #0]
 8002734:	4619      	mov	r1, r3
 8002736:	4864      	ldr	r0, [pc, #400]	; (80028c8 <configScreensFromUart+0x45c>)
 8002738:	f007 f904 	bl	8009944 <iprintf>
		screenVar.objectCount = currentScreenObjectsLeft;
 800273c:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8002740:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 8002744:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 8002748:	f102 0202 	add.w	r2, r2, #2
 800274c:	8812      	ldrh	r2, [r2, #0]
 800274e:	805a      	strh	r2, [r3, #2]
		screenVar.screenNumber = currentScreenIndex;
 8002750:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8002754:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 8002758:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 800275c:	f102 0207 	add.w	r2, r2, #7
 8002760:	7812      	ldrb	r2, [r2, #0]
 8002762:	701a      	strb	r2, [r3, #0]
		currentSector += 1; //begin new sector -- screens are sector-aligned for easier access
 8002764:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8002768:	f103 0304 	add.w	r3, r3, #4
 800276c:	881b      	ldrh	r3, [r3, #0]
 800276e:	3301      	adds	r3, #1
 8002770:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 8002774:	f102 0204 	add.w	r2, r2, #4
 8002778:	8013      	strh	r3, [r2, #0]
		currentScreenIndex += 1;
 800277a:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 800277e:	f103 0307 	add.w	r3, r3, #7
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	3301      	adds	r3, #1
 8002786:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 800278a:	f102 0207 	add.w	r2, r2, #7
 800278e:	7013      	strb	r3, [r2, #0]
		gconf.screenSectors[currentScreenIndex] = currentSector;
 8002790:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8002794:	f103 0307 	add.w	r3, r3, #7
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 800279e:	f102 0208 	add.w	r2, r2, #8
 80027a2:	f5a2 722b 	sub.w	r2, r2, #684	; 0x2ac
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	4413      	add	r3, r2
 80027aa:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 80027ae:	f102 0204 	add.w	r2, r2, #4
 80027b2:	8812      	ldrh	r2, [r2, #0]
 80027b4:	805a      	strh	r2, [r3, #2]
		ext_flash_erase_4kB(currentSector*SECTOR_SIZE);
 80027b6:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 80027ba:	f103 0304 	add.w	r3, r3, #4
 80027be:	881b      	ldrh	r3, [r3, #0]
 80027c0:	031b      	lsls	r3, r3, #12
 80027c2:	4618      	mov	r0, r3
 80027c4:	f001 f874 	bl	80038b0 <ext_flash_erase_4kB>
		memset(sectorBuffer, 0, SECTOR_SIZE);
 80027c8:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80027cc:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80027d0:	3b14      	subs	r3, #20
 80027d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80027d6:	2100      	movs	r1, #0
 80027d8:	4618      	mov	r0, r3
 80027da:	f007 f8ab 	bl	8009934 <memset>
		sectorBufferIndex = 0;
 80027de:	2300      	movs	r3, #0
 80027e0:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 80027e4:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 80027e8:	6013      	str	r3, [r2, #0]
		memcpy(sectorBuffer+sectorBufferIndex, (uint8_t *) &screenVar, sizeof(screenVar));
 80027ea:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 80027ee:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80027f8:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80027fc:	3b14      	subs	r3, #20
 80027fe:	4413      	add	r3, r2
 8002800:	f507 7232 	add.w	r2, r7, #712	; 0x2c8
 8002804:	f5a2 722e 	sub.w	r2, r2, #696	; 0x2b8
 8002808:	6812      	ldr	r2, [r2, #0]
 800280a:	601a      	str	r2, [r3, #0]
		sectorBufferIndex += sizeof(screenVar);
 800280c:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002810:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	3304      	adds	r3, #4
 8002818:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 800281c:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8002820:	6013      	str	r3, [r2, #0]
		while(currentScreenObjectsLeft > 0){
 8002822:	f000 bc05 	b.w	8003030 <configScreensFromUart+0xbc4>
			currentScreenObjectsLeft--;
 8002826:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 800282a:	f103 0302 	add.w	r3, r3, #2
 800282e:	881b      	ldrh	r3, [r3, #0]
 8002830:	3b01      	subs	r3, #1
 8002832:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 8002836:	f102 0202 	add.w	r2, r2, #2
 800283a:	8013      	strh	r3, [r2, #0]
			UART_READ_STRING();
 800283c:	f507 5048 	add.w	r0, r7, #12800	; 0x3200
 8002840:	f100 0020 	add.w	r0, r0, #32
 8002844:	230d      	movs	r3, #13
 8002846:	2280      	movs	r2, #128	; 0x80
 8002848:	491e      	ldr	r1, [pc, #120]	; (80028c4 <configScreensFromUart+0x458>)
 800284a:	f002 feb5 	bl	80055b8 <read_usart_message>
 800284e:	4603      	mov	r3, r0
 8002850:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002854:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8002858:	6013      	str	r3, [r2, #0]
 800285a:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 800285e:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d0e9      	beq.n	800283c <configScreensFromUart+0x3d0>
 8002868:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 800286c:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	3b01      	subs	r3, #1
 8002874:	f503 534b 	add.w	r3, r3, #12992	; 0x32c0
 8002878:	f103 0308 	add.w	r3, r3, #8
 800287c:	443b      	add	r3, r7
 800287e:	2200      	movs	r2, #0
 8002880:	f803 2ca8 	strb.w	r2, [r3, #-168]
			currentObject.objectType = stringToObjectType(msg);
 8002884:	f507 5348 	add.w	r3, r7, #12800	; 0x3200
 8002888:	f103 0320 	add.w	r3, r3, #32
 800288c:	4618      	mov	r0, r3
 800288e:	f000 ffcf 	bl	8003830 <stringToObjectType>
 8002892:	4603      	mov	r3, r0
 8002894:	461a      	mov	r2, r3
 8002896:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 800289a:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 800289e:	701a      	strb	r2, [r3, #0]
			if(currentObject.objectType == none){
 80028a0:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 80028a4:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d110      	bne.n	80028d0 <configScreensFromUart+0x464>
				printf("[cl] Object type %s not recognized. \n\r", msg);
 80028ae:	f507 5348 	add.w	r3, r7, #12800	; 0x3200
 80028b2:	f103 0320 	add.w	r3, r3, #32
 80028b6:	4619      	mov	r1, r3
 80028b8:	4804      	ldr	r0, [pc, #16]	; (80028cc <configScreensFromUart+0x460>)
 80028ba:	f007 f843 	bl	8009944 <iprintf>
				return 4;
 80028be:	2304      	movs	r3, #4
 80028c0:	f000 bc11 	b.w	80030e6 <configScreensFromUart+0xc7a>
 80028c4:	20002150 	.word	0x20002150
 80028c8:	0800af08 	.word	0x0800af08
 80028cc:	0800af3c 	.word	0x0800af3c
			UART_READ_STRING();
 80028d0:	f507 5048 	add.w	r0, r7, #12800	; 0x3200
 80028d4:	f100 0020 	add.w	r0, r0, #32
 80028d8:	230d      	movs	r3, #13
 80028da:	2280      	movs	r2, #128	; 0x80
 80028dc:	49cf      	ldr	r1, [pc, #828]	; (8002c1c <configScreensFromUart+0x7b0>)
 80028de:	f002 fe6b 	bl	80055b8 <read_usart_message>
 80028e2:	4603      	mov	r3, r0
 80028e4:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 80028e8:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 80028ec:	6013      	str	r3, [r2, #0]
 80028ee:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 80028f2:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d0e9      	beq.n	80028d0 <configScreensFromUart+0x464>
 80028fc:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002900:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	3b01      	subs	r3, #1
 8002908:	f503 534b 	add.w	r3, r3, #12992	; 0x32c0
 800290c:	f103 0308 	add.w	r3, r3, #8
 8002910:	443b      	add	r3, r7
 8002912:	2200      	movs	r2, #0
 8002914:	f803 2ca8 	strb.w	r2, [r3, #-168]
			currentObject.objectId = (uint16_t) atoi(msg);
 8002918:	f507 5348 	add.w	r3, r7, #12800	; 0x3200
 800291c:	f103 0320 	add.w	r3, r3, #32
 8002920:	4618      	mov	r0, r3
 8002922:	f006 ffcb 	bl	80098bc <atoi>
 8002926:	4603      	mov	r3, r0
 8002928:	b29a      	uxth	r2, r3
 800292a:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 800292e:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8002932:	805a      	strh	r2, [r3, #2]
			UART_READ_STRING();
 8002934:	f507 5048 	add.w	r0, r7, #12800	; 0x3200
 8002938:	f100 0020 	add.w	r0, r0, #32
 800293c:	230d      	movs	r3, #13
 800293e:	2280      	movs	r2, #128	; 0x80
 8002940:	49b6      	ldr	r1, [pc, #728]	; (8002c1c <configScreensFromUart+0x7b0>)
 8002942:	f002 fe39 	bl	80055b8 <read_usart_message>
 8002946:	4603      	mov	r3, r0
 8002948:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 800294c:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8002950:	6013      	str	r3, [r2, #0]
 8002952:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002956:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d0e9      	beq.n	8002934 <configScreensFromUart+0x4c8>
 8002960:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002964:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	3b01      	subs	r3, #1
 800296c:	f503 534b 	add.w	r3, r3, #12992	; 0x32c0
 8002970:	f103 0308 	add.w	r3, r3, #8
 8002974:	443b      	add	r3, r7
 8002976:	2200      	movs	r2, #0
 8002978:	f803 2ca8 	strb.w	r2, [r3, #-168]
			currentObject.xstart = (uint16_t) atoi(msg);
 800297c:	f507 5348 	add.w	r3, r7, #12800	; 0x3200
 8002980:	f103 0320 	add.w	r3, r3, #32
 8002984:	4618      	mov	r0, r3
 8002986:	f006 ff99 	bl	80098bc <atoi>
 800298a:	4603      	mov	r3, r0
 800298c:	b29a      	uxth	r2, r3
 800298e:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8002992:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8002996:	809a      	strh	r2, [r3, #4]
			UART_READ_STRING();
 8002998:	f507 5048 	add.w	r0, r7, #12800	; 0x3200
 800299c:	f100 0020 	add.w	r0, r0, #32
 80029a0:	230d      	movs	r3, #13
 80029a2:	2280      	movs	r2, #128	; 0x80
 80029a4:	499d      	ldr	r1, [pc, #628]	; (8002c1c <configScreensFromUart+0x7b0>)
 80029a6:	f002 fe07 	bl	80055b8 <read_usart_message>
 80029aa:	4603      	mov	r3, r0
 80029ac:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 80029b0:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 80029b4:	6013      	str	r3, [r2, #0]
 80029b6:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 80029ba:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d0e9      	beq.n	8002998 <configScreensFromUart+0x52c>
 80029c4:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 80029c8:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	3b01      	subs	r3, #1
 80029d0:	f503 534b 	add.w	r3, r3, #12992	; 0x32c0
 80029d4:	f103 0308 	add.w	r3, r3, #8
 80029d8:	443b      	add	r3, r7
 80029da:	2200      	movs	r2, #0
 80029dc:	f803 2ca8 	strb.w	r2, [r3, #-168]
			currentObject.ystart = (uint16_t) atoi(msg);
 80029e0:	f507 5348 	add.w	r3, r7, #12800	; 0x3200
 80029e4:	f103 0320 	add.w	r3, r3, #32
 80029e8:	4618      	mov	r0, r3
 80029ea:	f006 ff67 	bl	80098bc <atoi>
 80029ee:	4603      	mov	r3, r0
 80029f0:	b29a      	uxth	r2, r3
 80029f2:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 80029f6:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 80029fa:	80da      	strh	r2, [r3, #6]
			UART_READ_STRING();
 80029fc:	f507 5048 	add.w	r0, r7, #12800	; 0x3200
 8002a00:	f100 0020 	add.w	r0, r0, #32
 8002a04:	230d      	movs	r3, #13
 8002a06:	2280      	movs	r2, #128	; 0x80
 8002a08:	4984      	ldr	r1, [pc, #528]	; (8002c1c <configScreensFromUart+0x7b0>)
 8002a0a:	f002 fdd5 	bl	80055b8 <read_usart_message>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002a14:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8002a18:	6013      	str	r3, [r2, #0]
 8002a1a:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002a1e:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d0e9      	beq.n	80029fc <configScreensFromUart+0x590>
 8002a28:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002a2c:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	3b01      	subs	r3, #1
 8002a34:	f503 534b 	add.w	r3, r3, #12992	; 0x32c0
 8002a38:	f103 0308 	add.w	r3, r3, #8
 8002a3c:	443b      	add	r3, r7
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f803 2ca8 	strb.w	r2, [r3, #-168]
			currentObject.xend = (uint16_t) atoi(msg);
 8002a44:	f507 5348 	add.w	r3, r7, #12800	; 0x3200
 8002a48:	f103 0320 	add.w	r3, r3, #32
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f006 ff35 	bl	80098bc <atoi>
 8002a52:	4603      	mov	r3, r0
 8002a54:	b29a      	uxth	r2, r3
 8002a56:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8002a5a:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8002a5e:	811a      	strh	r2, [r3, #8]
			UART_READ_STRING();
 8002a60:	f507 5048 	add.w	r0, r7, #12800	; 0x3200
 8002a64:	f100 0020 	add.w	r0, r0, #32
 8002a68:	230d      	movs	r3, #13
 8002a6a:	2280      	movs	r2, #128	; 0x80
 8002a6c:	496b      	ldr	r1, [pc, #428]	; (8002c1c <configScreensFromUart+0x7b0>)
 8002a6e:	f002 fda3 	bl	80055b8 <read_usart_message>
 8002a72:	4603      	mov	r3, r0
 8002a74:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002a78:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8002a7c:	6013      	str	r3, [r2, #0]
 8002a7e:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002a82:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d0e9      	beq.n	8002a60 <configScreensFromUart+0x5f4>
 8002a8c:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002a90:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	3b01      	subs	r3, #1
 8002a98:	f503 534b 	add.w	r3, r3, #12992	; 0x32c0
 8002a9c:	f103 0308 	add.w	r3, r3, #8
 8002aa0:	443b      	add	r3, r7
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f803 2ca8 	strb.w	r2, [r3, #-168]
			currentObject.yend = (uint16_t) atoi(msg);
 8002aa8:	f507 5348 	add.w	r3, r7, #12800	; 0x3200
 8002aac:	f103 0320 	add.w	r3, r3, #32
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f006 ff03 	bl	80098bc <atoi>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	b29a      	uxth	r2, r3
 8002aba:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8002abe:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8002ac2:	815a      	strh	r2, [r3, #10]
			UART_READ_STRING();
 8002ac4:	f507 5048 	add.w	r0, r7, #12800	; 0x3200
 8002ac8:	f100 0020 	add.w	r0, r0, #32
 8002acc:	230d      	movs	r3, #13
 8002ace:	2280      	movs	r2, #128	; 0x80
 8002ad0:	4952      	ldr	r1, [pc, #328]	; (8002c1c <configScreensFromUart+0x7b0>)
 8002ad2:	f002 fd71 	bl	80055b8 <read_usart_message>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002adc:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8002ae0:	6013      	str	r3, [r2, #0]
 8002ae2:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002ae6:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d0e9      	beq.n	8002ac4 <configScreensFromUart+0x658>
 8002af0:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002af4:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	3b01      	subs	r3, #1
 8002afc:	f503 534b 	add.w	r3, r3, #12992	; 0x32c0
 8002b00:	f103 0308 	add.w	r3, r3, #8
 8002b04:	443b      	add	r3, r7
 8002b06:	2200      	movs	r2, #0
 8002b08:	f803 2ca8 	strb.w	r2, [r3, #-168]
			currentObject.dataLen = (uint16_t) atoi(msg);
 8002b0c:	f507 5348 	add.w	r3, r7, #12800	; 0x3200
 8002b10:	f103 0320 	add.w	r3, r3, #32
 8002b14:	4618      	mov	r0, r3
 8002b16:	f006 fed1 	bl	80098bc <atoi>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	b29a      	uxth	r2, r3
 8002b1e:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8002b22:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8002b26:	819a      	strh	r2, [r3, #12]
			PRINT_OBJECT_HEADER(currentObject);
 8002b28:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8002b2c:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	461c      	mov	r4, r3
 8002b34:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8002b38:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8002b3c:	885b      	ldrh	r3, [r3, #2]
 8002b3e:	461d      	mov	r5, r3
 8002b40:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8002b44:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8002b48:	889b      	ldrh	r3, [r3, #4]
 8002b4a:	461e      	mov	r6, r3
 8002b4c:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8002b50:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8002b54:	88db      	ldrh	r3, [r3, #6]
 8002b56:	461a      	mov	r2, r3
 8002b58:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8002b5c:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8002b60:	891b      	ldrh	r3, [r3, #8]
 8002b62:	4619      	mov	r1, r3
 8002b64:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8002b68:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8002b6c:	895b      	ldrh	r3, [r3, #10]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8002b74:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8002b78:	899b      	ldrh	r3, [r3, #12]
 8002b7a:	9303      	str	r3, [sp, #12]
 8002b7c:	9002      	str	r0, [sp, #8]
 8002b7e:	9101      	str	r1, [sp, #4]
 8002b80:	9200      	str	r2, [sp, #0]
 8002b82:	4633      	mov	r3, r6
 8002b84:	462a      	mov	r2, r5
 8002b86:	4621      	mov	r1, r4
 8002b88:	4825      	ldr	r0, [pc, #148]	; (8002c20 <configScreensFromUart+0x7b4>)
 8002b8a:	f006 fedb 	bl	8009944 <iprintf>
			if(currentObject.dataLen > MAX_DATA_SIZE){
 8002b8e:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8002b92:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8002b96:	899b      	ldrh	r3, [r3, #12]
 8002b98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b9c:	d90c      	bls.n	8002bb8 <configScreensFromUart+0x74c>
				printf("[cl] Object (id=%d) data exceeds MAX_DATA_SIZE = %d.\n\r", currentObject.objectId, MAX_DATA_SIZE);
 8002b9e:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8002ba2:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8002ba6:	885b      	ldrh	r3, [r3, #2]
 8002ba8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002bac:	4619      	mov	r1, r3
 8002bae:	481d      	ldr	r0, [pc, #116]	; (8002c24 <configScreensFromUart+0x7b8>)
 8002bb0:	f006 fec8 	bl	8009944 <iprintf>
				return 5;
 8002bb4:	2305      	movs	r3, #5
 8002bb6:	e23a      	b.n	800302e <configScreensFromUart+0xbc2>
			int spaceLeft = SECTOR_SIZE - sectorBufferIndex;
 8002bb8:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002bbc:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8002bc6:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002bca:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8002bce:	6013      	str	r3, [r2, #0]
			if(spaceLeft >= sizeof(currentObject)){
 8002bd0:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002bd4:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2b0d      	cmp	r3, #13
 8002bdc:	d924      	bls.n	8002c28 <configScreensFromUart+0x7bc>
				memcpy(sectorBuffer+sectorBufferIndex, (uint8_t *) &currentObject, sizeof(currentObject));
 8002bde:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002be2:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8002bec:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8002bf0:	3b14      	subs	r3, #20
 8002bf2:	1898      	adds	r0, r3, r2
 8002bf4:	f107 0308 	add.w	r3, r7, #8
 8002bf8:	3b08      	subs	r3, #8
 8002bfa:	220e      	movs	r2, #14
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	f006 fe8b 	bl	8009918 <memcpy>
				sectorBufferIndex += sizeof(currentObject);
 8002c02:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002c06:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	330e      	adds	r3, #14
 8002c0e:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002c12:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8002c16:	6013      	str	r3, [r2, #0]
 8002c18:	e093      	b.n	8002d42 <configScreensFromUart+0x8d6>
 8002c1a:	bf00      	nop
 8002c1c:	20002150 	.word	0x20002150
 8002c20:	0800af64 	.word	0x0800af64
 8002c24:	0800afa0 	.word	0x0800afa0
				memcpy(sectorBuffer+sectorBufferIndex, (uint8_t *) &currentObject, spaceLeft);
 8002c28:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002c2c:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8002c36:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8002c3a:	3b14      	subs	r3, #20
 8002c3c:	1898      	adds	r0, r3, r2
 8002c3e:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002c42:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	f107 0308 	add.w	r3, r7, #8
 8002c4c:	3b08      	subs	r3, #8
 8002c4e:	4619      	mov	r1, r3
 8002c50:	f006 fe62 	bl	8009918 <memcpy>
				ext_flash_write_multipage(currentSector*SECTOR_SIZE, sectorBuffer, SECTOR_SIZE);
 8002c54:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8002c58:	f103 0304 	add.w	r3, r3, #4
 8002c5c:	881b      	ldrh	r3, [r3, #0]
 8002c5e:	031b      	lsls	r3, r3, #12
 8002c60:	4618      	mov	r0, r3
 8002c62:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8002c66:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8002c6a:	3b14      	subs	r3, #20
 8002c6c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c70:	4619      	mov	r1, r3
 8002c72:	f000 ff37 	bl	8003ae4 <ext_flash_write_multipage>
				currentSector += 1;
 8002c76:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8002c7a:	f103 0304 	add.w	r3, r3, #4
 8002c7e:	881b      	ldrh	r3, [r3, #0]
 8002c80:	3301      	adds	r3, #1
 8002c82:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 8002c86:	f102 0204 	add.w	r2, r2, #4
 8002c8a:	8013      	strh	r3, [r2, #0]
				if(currentSector > MAX_SCREEN_SECTOR){
 8002c8c:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8002c90:	f103 0304 	add.w	r3, r3, #4
 8002c94:	881b      	ldrh	r3, [r3, #0]
 8002c96:	2bc7      	cmp	r3, #199	; 0xc7
 8002c98:	d90a      	bls.n	8002cb0 <configScreensFromUart+0x844>
					printf("[cl] Screen memory size exceeded trying to save header of object id %d\n\r", currentObject.objectId);
 8002c9a:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8002c9e:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8002ca2:	885b      	ldrh	r3, [r3, #2]
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	48cc      	ldr	r0, [pc, #816]	; (8002fd8 <configScreensFromUart+0xb6c>)
 8002ca8:	f006 fe4c 	bl	8009944 <iprintf>
					return 6;
 8002cac:	2306      	movs	r3, #6
 8002cae:	e1be      	b.n	800302e <configScreensFromUart+0xbc2>
				ext_flash_erase_4kB(currentSector*SECTOR_SIZE);
 8002cb0:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8002cb4:	f103 0304 	add.w	r3, r3, #4
 8002cb8:	881b      	ldrh	r3, [r3, #0]
 8002cba:	031b      	lsls	r3, r3, #12
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f000 fdf7 	bl	80038b0 <ext_flash_erase_4kB>
				memset(sectorBuffer, 0, SECTOR_SIZE);
 8002cc2:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8002cc6:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8002cca:	3b14      	subs	r3, #20
 8002ccc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f006 fe2e 	bl	8009934 <memset>
				sectorBufferIndex = 0;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002cde:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8002ce2:	6013      	str	r3, [r2, #0]
				memcpy(sectorBuffer+sectorBufferIndex, ((uint8_t *) &currentObject)+spaceLeft, (sizeof(currentObject) - spaceLeft));
 8002ce4:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002ce8:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8002cf2:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8002cf6:	3b14      	subs	r3, #20
 8002cf8:	1898      	adds	r0, r3, r2
 8002cfa:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002cfe:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	f107 0308 	add.w	r3, r7, #8
 8002d08:	3b08      	subs	r3, #8
 8002d0a:	1899      	adds	r1, r3, r2
 8002d0c:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002d10:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f1c3 030e 	rsb	r3, r3, #14
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	f006 fdfc 	bl	8009918 <memcpy>
				sectorBufferIndex += (sizeof(currentObject) - spaceLeft);
 8002d20:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002d24:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002d2e:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	330e      	adds	r3, #14
 8002d38:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002d3c:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8002d40:	6013      	str	r3, [r2, #0]
			uint16_t objectDataBytesLeft = currentObject.dataLen;
 8002d42:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8002d46:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8002d4a:	899b      	ldrh	r3, [r3, #12]
 8002d4c:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002d50:	f102 0236 	add.w	r2, r2, #54	; 0x36
 8002d54:	8013      	strh	r3, [r2, #0]
			dataBufferIndex = 0;
 8002d56:	2300      	movs	r3, #0
 8002d58:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002d5c:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8002d60:	6013      	str	r3, [r2, #0]
			while(objectDataBytesLeft > 0){
 8002d62:	e062      	b.n	8002e2a <configScreensFromUart+0x9be>
				do{count = read_usart_message(msg, &huart1, 2, NEWLINE);} while (count==0);
 8002d64:	f507 5048 	add.w	r0, r7, #12800	; 0x3200
 8002d68:	f100 0020 	add.w	r0, r0, #32
 8002d6c:	230d      	movs	r3, #13
 8002d6e:	2202      	movs	r2, #2
 8002d70:	499a      	ldr	r1, [pc, #616]	; (8002fdc <configScreensFromUart+0xb70>)
 8002d72:	f002 fc21 	bl	80055b8 <read_usart_message>
 8002d76:	4603      	mov	r3, r0
 8002d78:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002d7c:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8002d80:	6013      	str	r3, [r2, #0]
 8002d82:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002d86:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d0e9      	beq.n	8002d64 <configScreensFromUart+0x8f8>
				if(count!=2){
 8002d90:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002d94:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d00a      	beq.n	8002db4 <configScreensFromUart+0x948>
					printf("[cl] Error reading hex data of object with id %d \n\r", currentObject.objectId);
 8002d9e:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8002da2:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8002da6:	885b      	ldrh	r3, [r3, #2]
 8002da8:	4619      	mov	r1, r3
 8002daa:	488d      	ldr	r0, [pc, #564]	; (8002fe0 <configScreensFromUart+0xb74>)
 8002dac:	f006 fdca 	bl	8009944 <iprintf>
					return 7;
 8002db0:	2307      	movs	r3, #7
 8002db2:	e13c      	b.n	800302e <configScreensFromUart+0xbc2>
				msg[2] = 0;
 8002db4:	2300      	movs	r3, #0
 8002db6:	f507 5248 	add.w	r2, r7, #12800	; 0x3200
 8002dba:	f102 0222 	add.w	r2, r2, #34	; 0x22
 8002dbe:	7013      	strb	r3, [r2, #0]
				uint8_t deHexedByte = (uint8_t) strtol(msg, NULL, 16);
 8002dc0:	f507 5348 	add.w	r3, r7, #12800	; 0x3200
 8002dc4:	f103 0320 	add.w	r3, r3, #32
 8002dc8:	2210      	movs	r2, #16
 8002dca:	2100      	movs	r1, #0
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f006 fe5b 	bl	8009a88 <strtol>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002dd8:	f102 0223 	add.w	r2, r2, #35	; 0x23
 8002ddc:	7013      	strb	r3, [r2, #0]
				dataBuffer[dataBufferIndex] = deHexedByte;
 8002dde:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8002de2:	f5a3 722d 	sub.w	r2, r3, #692	; 0x2b4
 8002de6:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002dea:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4413      	add	r3, r2
 8002df2:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002df6:	f102 0223 	add.w	r2, r2, #35	; 0x23
 8002dfa:	7812      	ldrb	r2, [r2, #0]
 8002dfc:	701a      	strb	r2, [r3, #0]
				dataBufferIndex++;
 8002dfe:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002e02:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	3301      	adds	r3, #1
 8002e0a:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002e0e:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8002e12:	6013      	str	r3, [r2, #0]
				objectDataBytesLeft--;
 8002e14:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002e18:	f103 0336 	add.w	r3, r3, #54	; 0x36
 8002e1c:	881b      	ldrh	r3, [r3, #0]
 8002e1e:	3b01      	subs	r3, #1
 8002e20:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002e24:	f102 0236 	add.w	r2, r2, #54	; 0x36
 8002e28:	8013      	strh	r3, [r2, #0]
			while(objectDataBytesLeft > 0){
 8002e2a:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002e2e:	f103 0336 	add.w	r3, r3, #54	; 0x36
 8002e32:	881b      	ldrh	r3, [r3, #0]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d195      	bne.n	8002d64 <configScreensFromUart+0x8f8>
			read_usart_message(msg, &huart1, 2, NEWLINE); //to remove newline character from uart input buffer
 8002e38:	f507 5048 	add.w	r0, r7, #12800	; 0x3200
 8002e3c:	f100 0020 	add.w	r0, r0, #32
 8002e40:	230d      	movs	r3, #13
 8002e42:	2202      	movs	r2, #2
 8002e44:	4965      	ldr	r1, [pc, #404]	; (8002fdc <configScreensFromUart+0xb70>)
 8002e46:	f002 fbb7 	bl	80055b8 <read_usart_message>
			objectDataBytesLeft = currentObject.dataLen;
 8002e4a:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8002e4e:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8002e52:	899b      	ldrh	r3, [r3, #12]
 8002e54:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002e58:	f102 0236 	add.w	r2, r2, #54	; 0x36
 8002e5c:	8013      	strh	r3, [r2, #0]
			dataBufferIndex = 0;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002e64:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8002e68:	6013      	str	r3, [r2, #0]
			while(objectDataBytesLeft > 0){
 8002e6a:	e0d7      	b.n	800301c <configScreensFromUart+0xbb0>
				spaceLeft = SECTOR_SIZE - sectorBufferIndex;
 8002e6c:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002e70:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8002e7a:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002e7e:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8002e82:	6013      	str	r3, [r2, #0]
				if(spaceLeft >= objectDataBytesLeft){
 8002e84:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002e88:	f103 0336 	add.w	r3, r3, #54	; 0x36
 8002e8c:	881b      	ldrh	r3, [r3, #0]
 8002e8e:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002e92:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8002e96:	6812      	ldr	r2, [r2, #0]
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	db32      	blt.n	8002f02 <configScreensFromUart+0xa96>
					memcpy(sectorBuffer+sectorBufferIndex, dataBuffer + dataBufferIndex, objectDataBytesLeft);
 8002e9c:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002ea0:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8002eaa:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8002eae:	3b14      	subs	r3, #20
 8002eb0:	1898      	adds	r0, r3, r2
 8002eb2:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002eb6:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002ec0:	3b34      	subs	r3, #52	; 0x34
 8002ec2:	4413      	add	r3, r2
 8002ec4:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002ec8:	f102 0236 	add.w	r2, r2, #54	; 0x36
 8002ecc:	8812      	ldrh	r2, [r2, #0]
 8002ece:	4619      	mov	r1, r3
 8002ed0:	f006 fd22 	bl	8009918 <memcpy>
					sectorBufferIndex += objectDataBytesLeft;
 8002ed4:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002ed8:	f103 0336 	add.w	r3, r3, #54	; 0x36
 8002edc:	881b      	ldrh	r3, [r3, #0]
 8002ede:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002ee2:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8002ee6:	6812      	ldr	r2, [r2, #0]
 8002ee8:	4413      	add	r3, r2
 8002eea:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002eee:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8002ef2:	6013      	str	r3, [r2, #0]
					objectDataBytesLeft = 0;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002efa:	f102 0236 	add.w	r2, r2, #54	; 0x36
 8002efe:	8013      	strh	r3, [r2, #0]
 8002f00:	e08c      	b.n	800301c <configScreensFromUart+0xbb0>
					memcpy(sectorBuffer+sectorBufferIndex, dataBuffer + dataBufferIndex, spaceLeft);
 8002f02:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002f06:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8002f10:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8002f14:	3b14      	subs	r3, #20
 8002f16:	1898      	adds	r0, r3, r2
 8002f18:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002f1c:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002f26:	3b34      	subs	r3, #52	; 0x34
 8002f28:	4413      	add	r3, r2
 8002f2a:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002f2e:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8002f32:	6812      	ldr	r2, [r2, #0]
 8002f34:	4619      	mov	r1, r3
 8002f36:	f006 fcef 	bl	8009918 <memcpy>
					dataBufferIndex += spaceLeft;
 8002f3a:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002f3e:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002f48:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4413      	add	r3, r2
 8002f50:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002f54:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8002f58:	6013      	str	r3, [r2, #0]
					objectDataBytesLeft -= spaceLeft;
 8002f5a:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8002f5e:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002f6a:	f102 0236 	add.w	r2, r2, #54	; 0x36
 8002f6e:	8812      	ldrh	r2, [r2, #0]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8002f76:	f102 0236 	add.w	r2, r2, #54	; 0x36
 8002f7a:	8013      	strh	r3, [r2, #0]
					ext_flash_write_multipage(currentSector*SECTOR_SIZE, sectorBuffer, SECTOR_SIZE);
 8002f7c:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8002f80:	f103 0304 	add.w	r3, r3, #4
 8002f84:	881b      	ldrh	r3, [r3, #0]
 8002f86:	031b      	lsls	r3, r3, #12
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8002f8e:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8002f92:	3b14      	subs	r3, #20
 8002f94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002f98:	4619      	mov	r1, r3
 8002f9a:	f000 fda3 	bl	8003ae4 <ext_flash_write_multipage>
					currentSector += 1;
 8002f9e:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8002fa2:	f103 0304 	add.w	r3, r3, #4
 8002fa6:	881b      	ldrh	r3, [r3, #0]
 8002fa8:	3301      	adds	r3, #1
 8002faa:	f507 524b 	add.w	r2, r7, #12992	; 0x32c0
 8002fae:	f102 0204 	add.w	r2, r2, #4
 8002fb2:	8013      	strh	r3, [r2, #0]
					if(currentSector > MAX_SCREEN_SECTOR){
 8002fb4:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8002fb8:	f103 0304 	add.w	r3, r3, #4
 8002fbc:	881b      	ldrh	r3, [r3, #0]
 8002fbe:	2bc7      	cmp	r3, #199	; 0xc7
 8002fc0:	d912      	bls.n	8002fe8 <configScreensFromUart+0xb7c>
						printf("[cl] Screen memory size exceeded while trying to save data of object id %d\n\r", currentObject.objectId);
 8002fc2:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8002fc6:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 8002fca:	885b      	ldrh	r3, [r3, #2]
 8002fcc:	4619      	mov	r1, r3
 8002fce:	4805      	ldr	r0, [pc, #20]	; (8002fe4 <configScreensFromUart+0xb78>)
 8002fd0:	f006 fcb8 	bl	8009944 <iprintf>
						return 8;
 8002fd4:	2308      	movs	r3, #8
 8002fd6:	e02a      	b.n	800302e <configScreensFromUart+0xbc2>
 8002fd8:	0800afd8 	.word	0x0800afd8
 8002fdc:	20002150 	.word	0x20002150
 8002fe0:	0800b024 	.word	0x0800b024
 8002fe4:	0800b058 	.word	0x0800b058
					ext_flash_erase_4kB(currentSector*SECTOR_SIZE);
 8002fe8:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8002fec:	f103 0304 	add.w	r3, r3, #4
 8002ff0:	881b      	ldrh	r3, [r3, #0]
 8002ff2:	031b      	lsls	r3, r3, #12
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f000 fc5b 	bl	80038b0 <ext_flash_erase_4kB>
					memset(sectorBuffer, 0, SECTOR_SIZE);
 8002ffa:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8002ffe:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8003002:	3b14      	subs	r3, #20
 8003004:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003008:	2100      	movs	r1, #0
 800300a:	4618      	mov	r0, r3
 800300c:	f006 fc92 	bl	8009934 <memset>
					sectorBufferIndex = 0;
 8003010:	2300      	movs	r3, #0
 8003012:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 8003016:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 800301a:	6013      	str	r3, [r2, #0]
			while(objectDataBytesLeft > 0){
 800301c:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8003020:	f103 0336 	add.w	r3, r3, #54	; 0x36
 8003024:	881b      	ldrh	r3, [r3, #0]
 8003026:	2b00      	cmp	r3, #0
 8003028:	f47f af20 	bne.w	8002e6c <configScreensFromUart+0xa00>
 800302c:	e000      	b.n	8003030 <configScreensFromUart+0xbc4>
			return 3;
 800302e:	e05a      	b.n	80030e6 <configScreensFromUart+0xc7a>
		while(currentScreenObjectsLeft > 0){
 8003030:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8003034:	f103 0302 	add.w	r3, r3, #2
 8003038:	881b      	ldrh	r3, [r3, #0]
 800303a:	2b00      	cmp	r3, #0
 800303c:	f47f abf3 	bne.w	8002826 <configScreensFromUart+0x3ba>
		ext_flash_write_multipage(currentSector*SECTOR_SIZE, sectorBuffer, sectorBufferIndex);
 8003040:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 8003044:	f103 0304 	add.w	r3, r3, #4
 8003048:	881b      	ldrh	r3, [r3, #0]
 800304a:	031b      	lsls	r3, r3, #12
 800304c:	4618      	mov	r0, r3
 800304e:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8003052:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800305c:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8003060:	3b14      	subs	r3, #20
 8003062:	4619      	mov	r1, r3
 8003064:	f000 fd3e 	bl	8003ae4 <ext_flash_write_multipage>
	while(1){
 8003068:	f7ff ba9c 	b.w	80025a4 <configScreensFromUart+0x138>
		printf("%x ", sectorBuffer[j]);
 800306c:	f507 530b 	add.w	r3, r7, #8896	; 0x22c0
 8003070:	f103 0308 	add.w	r3, r3, #8
 8003074:	f5a3 722d 	sub.w	r2, r3, #692	; 0x2b4
 8003078:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 800307c:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4413      	add	r3, r2
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	4619      	mov	r1, r3
 8003088:	481a      	ldr	r0, [pc, #104]	; (80030f4 <configScreensFromUart+0xc88>)
 800308a:	f006 fc5b 	bl	8009944 <iprintf>
	for(j=0; j<sizeof(gconf); j++){
 800308e:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 8003092:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	3301      	adds	r3, #1
 800309a:	f507 524a 	add.w	r2, r7, #12928	; 0x3280
 800309e:	f102 0230 	add.w	r2, r2, #48	; 0x30
 80030a2:	6013      	str	r3, [r2, #0]
 80030a4:	f507 534a 	add.w	r3, r7, #12928	; 0x3280
 80030a8:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f240 2201 	movw	r2, #513	; 0x201
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d9da      	bls.n	800306c <configScreensFromUart+0xc00>
	}

	ext_flash_erase_4kB(GENERAL_CONFIG_SECTOR*SECTOR_SIZE);
 80030b6:	2000      	movs	r0, #0
 80030b8:	f000 fbfa 	bl	80038b0 <ext_flash_erase_4kB>
	ext_flash_write_multipage(GENERAL_CONFIG_SECTOR*SECTOR_SIZE, sectorBuffer, sizeof(gconf));
 80030bc:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80030c0:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80030c4:	3b14      	subs	r3, #20
 80030c6:	f240 2202 	movw	r2, #514	; 0x202
 80030ca:	4619      	mov	r1, r3
 80030cc:	2000      	movs	r0, #0
 80030ce:	f000 fd09 	bl	8003ae4 <ext_flash_write_multipage>
	printf("[cl] Config from UART finished. Furthest sector written to: %d \n\r", currentSector);
 80030d2:	f507 534b 	add.w	r3, r7, #12992	; 0x32c0
 80030d6:	f103 0304 	add.w	r3, r3, #4
 80030da:	881b      	ldrh	r3, [r3, #0]
 80030dc:	4619      	mov	r1, r3
 80030de:	4806      	ldr	r0, [pc, #24]	; (80030f8 <configScreensFromUart+0xc8c>)
 80030e0:	f006 fc30 	bl	8009944 <iprintf>

	return 0;
 80030e4:	2300      	movs	r3, #0

}
 80030e6:	4618      	mov	r0, r3
 80030e8:	f507 574b 	add.w	r7, r7, #12992	; 0x32c0
 80030ec:	370c      	adds	r7, #12
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030f2:	bf00      	nop
 80030f4:	0800b0a8 	.word	0x0800b0a8
 80030f8:	0800b0ac 	.word	0x0800b0ac

080030fc <readGeneralConfig>:

/*
 * Reads the general configuration struct from external flash into variable pointed at by @destination.
 */
void readGeneralConfig(struct generalConfig *destination){
 80030fc:	b580      	push	{r7, lr}
 80030fe:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8003102:	af00      	add	r7, sp, #0
 8003104:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8003108:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800310c:	6018      	str	r0, [r3, #0]
	uint8_t buffer[sizeof(struct generalConfig)];
	ext_flash_read(GENERAL_CONFIG_SECTOR*SECTOR_SIZE, buffer, sizeof(struct generalConfig));
 800310e:	f107 030c 	add.w	r3, r7, #12
 8003112:	f240 2202 	movw	r2, #514	; 0x202
 8003116:	4619      	mov	r1, r3
 8003118:	2000      	movs	r0, #0
 800311a:	f000 fc18 	bl	800394e <ext_flash_read>
	*destination = *((struct generalConfig *) buffer);
 800311e:	f107 020c 	add.w	r2, r7, #12
 8003122:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8003126:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4618      	mov	r0, r3
 800312e:	4611      	mov	r1, r2
 8003130:	f240 2302 	movw	r3, #514	; 0x202
 8003134:	461a      	mov	r2, r3
 8003136:	f006 fbef 	bl	8009918 <memcpy>
	/*int i;
	for(i = 0; i<sizeof(struct generalConfig); i++){
		printf("%x,", buffer[i]);
	}
	printf("\n\r");*/
}
 800313a:	bf00      	nop
 800313c:	f507 7704 	add.w	r7, r7, #528	; 0x210
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <readBitmapList>:

/*
 * Reads the list of bitmaps struct from external flash into variable pointed at by @destination.
 */
void readBitmapList(struct bitmapList *destination){
 8003144:	b580      	push	{r7, lr}
 8003146:	f5ad 6d01 	sub.w	sp, sp, #2064	; 0x810
 800314a:	af00      	add	r7, sp, #0
 800314c:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8003150:	f6a3 030c 	subw	r3, r3, #2060	; 0x80c
 8003154:	6018      	str	r0, [r3, #0]
	uint8_t buffer[sizeof(struct bitmapList)];
	ext_flash_read(BITMAP_LIST_SECTOR*SECTOR_SIZE, buffer, sizeof(struct bitmapList));
 8003156:	f107 030c 	add.w	r3, r7, #12
 800315a:	f640 0204 	movw	r2, #2052	; 0x804
 800315e:	4619      	mov	r1, r3
 8003160:	f44f 2048 	mov.w	r0, #819200	; 0xc8000
 8003164:	f000 fbf3 	bl	800394e <ext_flash_read>
	*destination = *((struct bitmapList *) buffer);
 8003168:	f107 020c 	add.w	r2, r7, #12
 800316c:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8003170:	f6a3 030c 	subw	r3, r3, #2060	; 0x80c
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4618      	mov	r0, r3
 8003178:	4611      	mov	r1, r2
 800317a:	f640 0304 	movw	r3, #2052	; 0x804
 800317e:	461a      	mov	r2, r3
 8003180:	f006 fbca 	bl	8009918 <memcpy>
}
 8003184:	bf00      	nop
 8003186:	f507 6701 	add.w	r7, r7, #2064	; 0x810
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
	...

08003190 <openScreen>:
 *
 *	@returns: number of objects read. If maxData and maxObjects are sufficient, this will be the same as @screenHeader.objectCount. If @maxObjects limit was reached,
 *	then return value will be equal to @maxObjects. If @maxData limit was reached, then return value will be lower than @maxObjects.
 *
 */
int openScreen(uint16_t screenSector, struct screen *screenHeader, struct object *objectArray, uint8_t *dataArray, uint8_t **dataPointerArray, uint16_t maxData, uint16_t maxObjects){
 8003190:	b590      	push	{r4, r7, lr}
 8003192:	b08d      	sub	sp, #52	; 0x34
 8003194:	af00      	add	r7, sp, #0
 8003196:	60b9      	str	r1, [r7, #8]
 8003198:	607a      	str	r2, [r7, #4]
 800319a:	603b      	str	r3, [r7, #0]
 800319c:	4603      	mov	r3, r0
 800319e:	81fb      	strh	r3, [r7, #14]
	uint32_t flashAddr = screenSector*SECTOR_SIZE;
 80031a0:	89fb      	ldrh	r3, [r7, #14]
 80031a2:	031b      	lsls	r3, r3, #12
 80031a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint8_t screenHeaderBuffer[sizeof(struct screen)];
	ext_flash_read(flashAddr, screenHeaderBuffer, sizeof(struct screen));
 80031a6:	f107 0320 	add.w	r3, r7, #32
 80031aa:	2204      	movs	r2, #4
 80031ac:	4619      	mov	r1, r3
 80031ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80031b0:	f000 fbcd 	bl	800394e <ext_flash_read>
	flashAddr += sizeof(struct screen);
 80031b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031b6:	3304      	adds	r3, #4
 80031b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	*screenHeader = *((struct screen *) screenHeaderBuffer);
 80031ba:	f107 0320 	add.w	r3, r7, #32
 80031be:	68ba      	ldr	r2, [r7, #8]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	6013      	str	r3, [r2, #0]

	uint16_t objectsToRead = (*screenHeader).objectCount;
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	885b      	ldrh	r3, [r3, #2]
 80031c8:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint16_t objectIndex = 0;
 80031ca:	2300      	movs	r3, #0
 80031cc:	853b      	strh	r3, [r7, #40]	; 0x28
	uint16_t dataIndex = 0;
 80031ce:	2300      	movs	r3, #0
 80031d0:	84fb      	strh	r3, [r7, #38]	; 0x26
	if(objectsToRead > maxObjects){
 80031d2:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80031d4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80031d8:	429a      	cmp	r2, r3
 80031da:	d964      	bls.n	80032a6 <openScreen+0x116>
		printf("[cl] Limiting objects to be read from screen to maxObjects! (down to %d from %d)", maxObjects, objectsToRead);
 80031dc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80031e0:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80031e2:	4619      	mov	r1, r3
 80031e4:	4834      	ldr	r0, [pc, #208]	; (80032b8 <openScreen+0x128>)
 80031e6:	f006 fbad 	bl	8009944 <iprintf>
		objectsToRead = maxObjects;
 80031ea:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80031ee:	857b      	strh	r3, [r7, #42]	; 0x2a
	}

	uint8_t objectHeaderBuffer[sizeof(struct object)];
	while(objectIndex < objectsToRead){
 80031f0:	e059      	b.n	80032a6 <openScreen+0x116>
		ext_flash_read(flashAddr, objectHeaderBuffer, sizeof(struct object));
 80031f2:	f107 0310 	add.w	r3, r7, #16
 80031f6:	220e      	movs	r2, #14
 80031f8:	4619      	mov	r1, r3
 80031fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80031fc:	f000 fba7 	bl	800394e <ext_flash_read>
		flashAddr += sizeof(struct object);
 8003200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003202:	330e      	adds	r3, #14
 8003204:	62fb      	str	r3, [r7, #44]	; 0x2c
		*(objectArray + objectIndex) = *((struct object *) objectHeaderBuffer);
 8003206:	f107 0110 	add.w	r1, r7, #16
 800320a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800320c:	4613      	mov	r3, r2
 800320e:	00db      	lsls	r3, r3, #3
 8003210:	1a9b      	subs	r3, r3, r2
 8003212:	005b      	lsls	r3, r3, #1
 8003214:	461a      	mov	r2, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4413      	add	r3, r2
 800321a:	460a      	mov	r2, r1
 800321c:	6814      	ldr	r4, [r2, #0]
 800321e:	6850      	ldr	r0, [r2, #4]
 8003220:	6891      	ldr	r1, [r2, #8]
 8003222:	601c      	str	r4, [r3, #0]
 8003224:	6058      	str	r0, [r3, #4]
 8003226:	6099      	str	r1, [r3, #8]
 8003228:	8992      	ldrh	r2, [r2, #12]
 800322a:	819a      	strh	r2, [r3, #12]
		uint16_t currentObjectDataLen = (objectArray + objectIndex)->dataLen;
 800322c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800322e:	4613      	mov	r3, r2
 8003230:	00db      	lsls	r3, r3, #3
 8003232:	1a9b      	subs	r3, r3, r2
 8003234:	005b      	lsls	r3, r3, #1
 8003236:	461a      	mov	r2, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	4413      	add	r3, r2
 800323c:	899b      	ldrh	r3, [r3, #12]
 800323e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if(currentObjectDataLen > 0){
 8003240:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003242:	2b00      	cmp	r3, #0
 8003244:	d026      	beq.n	8003294 <openScreen+0x104>
			if(dataIndex + currentObjectDataLen > maxData){
 8003246:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003248:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800324a:	441a      	add	r2, r3
 800324c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003250:	429a      	cmp	r2, r3
 8003252:	dd06      	ble.n	8003262 <openScreen+0xd2>
				printf("[cl] Ran out of data buffer when trying to add object #%d \n\r", objectIndex);
 8003254:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003256:	4619      	mov	r1, r3
 8003258:	4818      	ldr	r0, [pc, #96]	; (80032bc <openScreen+0x12c>)
 800325a:	f006 fb73 	bl	8009944 <iprintf>
				return(objectIndex);
 800325e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003260:	e026      	b.n	80032b0 <openScreen+0x120>
			}
			//object data fits in buffer
			ext_flash_read(flashAddr, (dataArray + dataIndex), currentObjectDataLen);
 8003262:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003264:	683a      	ldr	r2, [r7, #0]
 8003266:	4413      	add	r3, r2
 8003268:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800326a:	4619      	mov	r1, r3
 800326c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800326e:	f000 fb6e 	bl	800394e <ext_flash_read>
			*(dataPointerArray + objectIndex) = (dataArray + dataIndex);
 8003272:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003274:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800327a:	440b      	add	r3, r1
 800327c:	6839      	ldr	r1, [r7, #0]
 800327e:	440a      	add	r2, r1
 8003280:	601a      	str	r2, [r3, #0]
			flashAddr += currentObjectDataLen;
 8003282:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003284:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003286:	4413      	add	r3, r2
 8003288:	62fb      	str	r3, [r7, #44]	; 0x2c
			dataIndex += currentObjectDataLen;
 800328a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800328c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800328e:	4413      	add	r3, r2
 8003290:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003292:	e005      	b.n	80032a0 <openScreen+0x110>
			}
		else{
			*(dataPointerArray + objectIndex) = NULL;
 8003294:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800329a:	4413      	add	r3, r2
 800329c:	2200      	movs	r2, #0
 800329e:	601a      	str	r2, [r3, #0]
		}

		objectIndex++;
 80032a0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80032a2:	3301      	adds	r3, #1
 80032a4:	853b      	strh	r3, [r7, #40]	; 0x28
	while(objectIndex < objectsToRead){
 80032a6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80032a8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d3a1      	bcc.n	80031f2 <openScreen+0x62>
	}

	return objectIndex;
 80032ae:	8d3b      	ldrh	r3, [r7, #40]	; 0x28

}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3734      	adds	r7, #52	; 0x34
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd90      	pop	{r4, r7, pc}
 80032b8:	0800b0f8 	.word	0x0800b0f8
 80032bc:	0800b14c 	.word	0x0800b14c

080032c0 <readBitmap>:
 *
 * Caller needs to provide an array @dataArray at least @maxData pixels long. Each pixel is 2 bytes.
 *
 * @returns: number of pixels read. If maxPixels is sufficient, this will be the same as bitmapHeader.xsize*bitmapHeader.ysize.
 * */
int readBitmap(uint16_t bitmapSector, struct bitmap *bitmapHeader, uint16_t *dataArray, uint16_t maxPixels){
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b08a      	sub	sp, #40	; 0x28
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60b9      	str	r1, [r7, #8]
 80032c8:	607a      	str	r2, [r7, #4]
 80032ca:	461a      	mov	r2, r3
 80032cc:	4603      	mov	r3, r0
 80032ce:	81fb      	strh	r3, [r7, #14]
 80032d0:	4613      	mov	r3, r2
 80032d2:	81bb      	strh	r3, [r7, #12]
	uint32_t flashAddr = bitmapSector*SECTOR_SIZE;
 80032d4:	89fb      	ldrh	r3, [r7, #14]
 80032d6:	031b      	lsls	r3, r3, #12
 80032d8:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t bitmapHeaderBuffer[sizeof(struct bitmap)];
	ext_flash_read(flashAddr, bitmapHeaderBuffer, sizeof(struct bitmap));
 80032da:	f107 0318 	add.w	r3, r7, #24
 80032de:	2206      	movs	r2, #6
 80032e0:	4619      	mov	r1, r3
 80032e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80032e4:	f000 fb33 	bl	800394e <ext_flash_read>
	flashAddr += sizeof(struct bitmap);
 80032e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ea:	3306      	adds	r3, #6
 80032ec:	627b      	str	r3, [r7, #36]	; 0x24
	*bitmapHeader = *((struct bitmap *) bitmapHeaderBuffer);
 80032ee:	f107 0218 	add.w	r2, r7, #24
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	6811      	ldr	r1, [r2, #0]
 80032f6:	6019      	str	r1, [r3, #0]
 80032f8:	8892      	ldrh	r2, [r2, #4]
 80032fa:	809a      	strh	r2, [r3, #4]

	uint16_t pixelsToRead = (*bitmapHeader).xsize*(*bitmapHeader).ysize;
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	885a      	ldrh	r2, [r3, #2]
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	889b      	ldrh	r3, [r3, #4]
 8003304:	fb12 f303 	smulbb	r3, r2, r3
 8003308:	847b      	strh	r3, [r7, #34]	; 0x22
	if(pixelsToRead > maxPixels){
 800330a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800330c:	89bb      	ldrh	r3, [r7, #12]
 800330e:	429a      	cmp	r2, r3
 8003310:	d909      	bls.n	8003326 <readBitmap+0x66>
		printf("[cl] Limiting number of pixels of bitmap %d down to %d (from total size %d)\n\r", (*bitmapHeader).bitmapNumber, maxPixels, pixelsToRead);
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	881b      	ldrh	r3, [r3, #0]
 8003316:	4619      	mov	r1, r3
 8003318:	89ba      	ldrh	r2, [r7, #12]
 800331a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800331c:	4812      	ldr	r0, [pc, #72]	; (8003368 <readBitmap+0xa8>)
 800331e:	f006 fb11 	bl	8009944 <iprintf>
		pixelsToRead = maxPixels;
 8003322:	89bb      	ldrh	r3, [r7, #12]
 8003324:	847b      	strh	r3, [r7, #34]	; 0x22
	}

	uint16_t pixelIndex = 0;
 8003326:	2300      	movs	r3, #0
 8003328:	843b      	strh	r3, [r7, #32]
	uint8_t pixelBuffer[2];
	while(pixelIndex < pixelsToRead){
 800332a:	e014      	b.n	8003356 <readBitmap+0x96>
		ext_flash_read(flashAddr, pixelBuffer, 2);
 800332c:	f107 0314 	add.w	r3, r7, #20
 8003330:	2202      	movs	r2, #2
 8003332:	4619      	mov	r1, r3
 8003334:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003336:	f000 fb0a 	bl	800394e <ext_flash_read>
		*(dataArray + pixelIndex) = *((uint16_t *) pixelBuffer);
 800333a:	f107 0214 	add.w	r2, r7, #20
 800333e:	8c3b      	ldrh	r3, [r7, #32]
 8003340:	005b      	lsls	r3, r3, #1
 8003342:	6879      	ldr	r1, [r7, #4]
 8003344:	440b      	add	r3, r1
 8003346:	8812      	ldrh	r2, [r2, #0]
 8003348:	801a      	strh	r2, [r3, #0]
		flashAddr += 2;
 800334a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334c:	3302      	adds	r3, #2
 800334e:	627b      	str	r3, [r7, #36]	; 0x24
		pixelIndex += 1;
 8003350:	8c3b      	ldrh	r3, [r7, #32]
 8003352:	3301      	adds	r3, #1
 8003354:	843b      	strh	r3, [r7, #32]
	while(pixelIndex < pixelsToRead){
 8003356:	8c3a      	ldrh	r2, [r7, #32]
 8003358:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800335a:	429a      	cmp	r2, r3
 800335c:	d3e6      	bcc.n	800332c <readBitmap+0x6c>
	}
}
 800335e:	bf00      	nop
 8003360:	4618      	mov	r0, r3
 8003362:	3728      	adds	r7, #40	; 0x28
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}
 8003368:	0800b18c 	.word	0x0800b18c

0800336c <printAllScreens>:

/*
 * debug function to check what is actually stored in flash
 */
void printAllScreens(struct generalConfig gconf){
 800336c:	b084      	sub	sp, #16
 800336e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003372:	b0a9      	sub	sp, #164	; 0xa4
 8003374:	af04      	add	r7, sp, #16
 8003376:	f107 06b8 	add.w	r6, r7, #184	; 0xb8
 800337a:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 800337e:	466b      	mov	r3, sp
 8003380:	607b      	str	r3, [r7, #4]
	uint8_t screenIndex = 0;
 8003382:	2300      	movs	r3, #0
 8003384:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	printf("[PAS] Supplied gconf says there are %d screens.\n\r", gconf.totalScreens);
 8003388:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
 800338c:	4619      	mov	r1, r3
 800338e:	48b8      	ldr	r0, [pc, #736]	; (8003670 <printAllScreens+0x304>)
 8003390:	f006 fad8 	bl	8009944 <iprintf>
	uint16_t maxObjects = 128;
 8003394:	2380      	movs	r3, #128	; 0x80
 8003396:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
	uint16_t maxData = SECTOR_SIZE*4;
 800339a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800339e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	struct screen screenHeader;
	struct object objArr[maxObjects];
 80033a2:	f8b7 6088 	ldrh.w	r6, [r7, #136]	; 0x88
 80033a6:	4633      	mov	r3, r6
 80033a8:	3b01      	subs	r3, #1
 80033aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80033ae:	b2b3      	uxth	r3, r6
 80033b0:	2200      	movs	r2, #0
 80033b2:	469a      	mov	sl, r3
 80033b4:	4693      	mov	fp, r2
 80033b6:	4652      	mov	r2, sl
 80033b8:	465b      	mov	r3, fp
 80033ba:	f04f 0000 	mov.w	r0, #0
 80033be:	f04f 0100 	mov.w	r1, #0
 80033c2:	00d9      	lsls	r1, r3, #3
 80033c4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80033c8:	00d0      	lsls	r0, r2, #3
 80033ca:	4602      	mov	r2, r0
 80033cc:	460b      	mov	r3, r1
 80033ce:	ebb2 040a 	subs.w	r4, r2, sl
 80033d2:	eb63 050b 	sbc.w	r5, r3, fp
 80033d6:	f04f 0200 	mov.w	r2, #0
 80033da:	f04f 0300 	mov.w	r3, #0
 80033de:	012b      	lsls	r3, r5, #4
 80033e0:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80033e4:	0122      	lsls	r2, r4, #4
 80033e6:	b2b3      	uxth	r3, r6
 80033e8:	2200      	movs	r2, #0
 80033ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80033ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80033ee:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80033f2:	4622      	mov	r2, r4
 80033f4:	462b      	mov	r3, r5
 80033f6:	f04f 0000 	mov.w	r0, #0
 80033fa:	f04f 0100 	mov.w	r1, #0
 80033fe:	00d9      	lsls	r1, r3, #3
 8003400:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003404:	00d0      	lsls	r0, r2, #3
 8003406:	4602      	mov	r2, r0
 8003408:	460b      	mov	r3, r1
 800340a:	4621      	mov	r1, r4
 800340c:	ebb2 0801 	subs.w	r8, r2, r1
 8003410:	4629      	mov	r1, r5
 8003412:	eb63 0901 	sbc.w	r9, r3, r1
 8003416:	f04f 0200 	mov.w	r2, #0
 800341a:	f04f 0300 	mov.w	r3, #0
 800341e:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8003422:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8003426:	ea4f 1208 	mov.w	r2, r8, lsl #4
 800342a:	4632      	mov	r2, r6
 800342c:	4613      	mov	r3, r2
 800342e:	00db      	lsls	r3, r3, #3
 8003430:	1a9b      	subs	r3, r3, r2
 8003432:	005b      	lsls	r3, r3, #1
 8003434:	3307      	adds	r3, #7
 8003436:	08db      	lsrs	r3, r3, #3
 8003438:	00db      	lsls	r3, r3, #3
 800343a:	ebad 0d03 	sub.w	sp, sp, r3
 800343e:	ab04      	add	r3, sp, #16
 8003440:	3301      	adds	r3, #1
 8003442:	085b      	lsrs	r3, r3, #1
 8003444:	005b      	lsls	r3, r3, #1
 8003446:	67bb      	str	r3, [r7, #120]	; 0x78
	uint8_t dataArr[maxData];
 8003448:	f8b7 108a 	ldrh.w	r1, [r7, #138]	; 0x8a
 800344c:	460b      	mov	r3, r1
 800344e:	3b01      	subs	r3, #1
 8003450:	677b      	str	r3, [r7, #116]	; 0x74
 8003452:	b28b      	uxth	r3, r1
 8003454:	2200      	movs	r2, #0
 8003456:	623b      	str	r3, [r7, #32]
 8003458:	627a      	str	r2, [r7, #36]	; 0x24
 800345a:	f04f 0200 	mov.w	r2, #0
 800345e:	f04f 0300 	mov.w	r3, #0
 8003462:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003466:	4628      	mov	r0, r5
 8003468:	00c3      	lsls	r3, r0, #3
 800346a:	4620      	mov	r0, r4
 800346c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003470:	4620      	mov	r0, r4
 8003472:	00c2      	lsls	r2, r0, #3
 8003474:	b28b      	uxth	r3, r1
 8003476:	2200      	movs	r2, #0
 8003478:	61bb      	str	r3, [r7, #24]
 800347a:	61fa      	str	r2, [r7, #28]
 800347c:	f04f 0200 	mov.w	r2, #0
 8003480:	f04f 0300 	mov.w	r3, #0
 8003484:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8003488:	4628      	mov	r0, r5
 800348a:	00c3      	lsls	r3, r0, #3
 800348c:	4620      	mov	r0, r4
 800348e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003492:	4620      	mov	r0, r4
 8003494:	00c2      	lsls	r2, r0, #3
 8003496:	460b      	mov	r3, r1
 8003498:	3307      	adds	r3, #7
 800349a:	08db      	lsrs	r3, r3, #3
 800349c:	00db      	lsls	r3, r3, #3
 800349e:	ebad 0d03 	sub.w	sp, sp, r3
 80034a2:	ab04      	add	r3, sp, #16
 80034a4:	3300      	adds	r3, #0
 80034a6:	673b      	str	r3, [r7, #112]	; 0x70
	uint8_t *pointerArray[maxObjects];
 80034a8:	f8b7 1088 	ldrh.w	r1, [r7, #136]	; 0x88
 80034ac:	460b      	mov	r3, r1
 80034ae:	3b01      	subs	r3, #1
 80034b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80034b2:	b28b      	uxth	r3, r1
 80034b4:	2200      	movs	r2, #0
 80034b6:	613b      	str	r3, [r7, #16]
 80034b8:	617a      	str	r2, [r7, #20]
 80034ba:	f04f 0200 	mov.w	r2, #0
 80034be:	f04f 0300 	mov.w	r3, #0
 80034c2:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80034c6:	4628      	mov	r0, r5
 80034c8:	0143      	lsls	r3, r0, #5
 80034ca:	4620      	mov	r0, r4
 80034cc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80034d0:	4620      	mov	r0, r4
 80034d2:	0142      	lsls	r2, r0, #5
 80034d4:	b28b      	uxth	r3, r1
 80034d6:	2200      	movs	r2, #0
 80034d8:	60bb      	str	r3, [r7, #8]
 80034da:	60fa      	str	r2, [r7, #12]
 80034dc:	f04f 0200 	mov.w	r2, #0
 80034e0:	f04f 0300 	mov.w	r3, #0
 80034e4:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80034e8:	4628      	mov	r0, r5
 80034ea:	0143      	lsls	r3, r0, #5
 80034ec:	4620      	mov	r0, r4
 80034ee:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80034f2:	4620      	mov	r0, r4
 80034f4:	0142      	lsls	r2, r0, #5
 80034f6:	460b      	mov	r3, r1
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	3307      	adds	r3, #7
 80034fc:	08db      	lsrs	r3, r3, #3
 80034fe:	00db      	lsls	r3, r3, #3
 8003500:	ebad 0d03 	sub.w	sp, sp, r3
 8003504:	ab04      	add	r3, sp, #16
 8003506:	3303      	adds	r3, #3
 8003508:	089b      	lsrs	r3, r3, #2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	66bb      	str	r3, [r7, #104]	; 0x68

	while(screenIndex < gconf.totalScreens){
 800350e:	e09c      	b.n	800364a <printAllScreens+0x2de>
		printf("[PAS] Opening screen #%d stored @%d \n\r", screenIndex, gconf.screenSectors[screenIndex]);
 8003510:	f897 1087 	ldrb.w	r1, [r7, #135]	; 0x87
 8003514:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8003518:	005b      	lsls	r3, r3, #1
 800351a:	3388      	adds	r3, #136	; 0x88
 800351c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003520:	4413      	add	r3, r2
 8003522:	885b      	ldrh	r3, [r3, #2]
 8003524:	461a      	mov	r2, r3
 8003526:	4853      	ldr	r0, [pc, #332]	; (8003674 <printAllScreens+0x308>)
 8003528:	f006 fa0c 	bl	8009944 <iprintf>
		int objectsRead = openScreen(gconf.screenSectors[screenIndex], &screenHeader, objArr, dataArr, pointerArray, maxData, maxObjects);
 800352c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8003530:	005b      	lsls	r3, r3, #1
 8003532:	3388      	adds	r3, #136	; 0x88
 8003534:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003538:	4413      	add	r3, r2
 800353a:	8858      	ldrh	r0, [r3, #2]
 800353c:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8003540:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8003544:	9302      	str	r3, [sp, #8]
 8003546:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800354a:	9301      	str	r3, [sp, #4]
 800354c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800354e:	9300      	str	r3, [sp, #0]
 8003550:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003552:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003554:	f7ff fe1c 	bl	8003190 <openScreen>
 8003558:	6678      	str	r0, [r7, #100]	; 0x64
		printf("[PAS] [%d / %d] objects have been read.\n\r", objectsRead, screenHeader.objectCount);
 800355a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800355e:	461a      	mov	r2, r3
 8003560:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003562:	4845      	ldr	r0, [pc, #276]	; (8003678 <printAllScreens+0x30c>)
 8003564:	f006 f9ee 	bl	8009944 <iprintf>
		printf("[PAS] Object report:\n\r");
 8003568:	4844      	ldr	r0, [pc, #272]	; (800367c <printAllScreens+0x310>)
 800356a:	f006 f9eb 	bl	8009944 <iprintf>
		uint16_t objectIndex = 0;
 800356e:	2300      	movs	r3, #0
 8003570:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
		while(objectIndex < objectsRead){
 8003574:	e059      	b.n	800362a <printAllScreens+0x2be>
			struct object thisObject = *(objArr + objectIndex);
 8003576:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 800357a:	4613      	mov	r3, r2
 800357c:	00db      	lsls	r3, r3, #3
 800357e:	1a9b      	subs	r3, r3, r2
 8003580:	005b      	lsls	r3, r3, #1
 8003582:	461a      	mov	r2, r3
 8003584:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003586:	441a      	add	r2, r3
 8003588:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800358c:	4614      	mov	r4, r2
 800358e:	6820      	ldr	r0, [r4, #0]
 8003590:	6861      	ldr	r1, [r4, #4]
 8003592:	68a2      	ldr	r2, [r4, #8]
 8003594:	c307      	stmia	r3!, {r0, r1, r2}
 8003596:	89a2      	ldrh	r2, [r4, #12]
 8003598:	801a      	strh	r2, [r3, #0]
			char typeStr[30];
			objectTypeToString(thisObject.objectType, typeStr);
 800359a:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800359e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80035a2:	4611      	mov	r1, r2
 80035a4:	4618      	mov	r0, r3
 80035a6:	f000 f91b 	bl	80037e0 <objectTypeToString>
			printf("[PAS] %s id=%d from (%d, %d) to (%d,%d), hex data (%db) =[", typeStr, thisObject.objectId, thisObject.xstart, thisObject.ystart, thisObject.xend, thisObject.yend, thisObject.dataLen);
 80035aa:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80035ae:	461d      	mov	r5, r3
 80035b0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80035b4:	461e      	mov	r6, r3
 80035b6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80035ba:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 80035be:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 80035c2:	4608      	mov	r0, r1
 80035c4:	f8b7 105c 	ldrh.w	r1, [r7, #92]	; 0x5c
 80035c8:	460c      	mov	r4, r1
 80035ca:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80035ce:	9403      	str	r4, [sp, #12]
 80035d0:	9002      	str	r0, [sp, #8]
 80035d2:	9201      	str	r2, [sp, #4]
 80035d4:	9300      	str	r3, [sp, #0]
 80035d6:	4633      	mov	r3, r6
 80035d8:	462a      	mov	r2, r5
 80035da:	4829      	ldr	r0, [pc, #164]	; (8003680 <printAllScreens+0x314>)
 80035dc:	f006 f9b2 	bl	8009944 <iprintf>
			int dataIndex = 0;
 80035e0:	2300      	movs	r3, #0
 80035e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			while(dataIndex < thisObject.dataLen){
 80035e6:	e011      	b.n	800360c <printAllScreens+0x2a0>
				printf("%02x", *(pointerArray[objectIndex] + dataIndex));
 80035e8:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 80035ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035ee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80035f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80035f6:	4413      	add	r3, r2
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	4619      	mov	r1, r3
 80035fc:	4821      	ldr	r0, [pc, #132]	; (8003684 <printAllScreens+0x318>)
 80035fe:	f006 f9a1 	bl	8009944 <iprintf>
				dataIndex++;
 8003602:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003606:	3301      	adds	r3, #1
 8003608:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			while(dataIndex < thisObject.dataLen){
 800360c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003610:	461a      	mov	r2, r3
 8003612:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003616:	4293      	cmp	r3, r2
 8003618:	dbe6      	blt.n	80035e8 <printAllScreens+0x27c>
			}
			printf("]\n\r");
 800361a:	481b      	ldr	r0, [pc, #108]	; (8003688 <printAllScreens+0x31c>)
 800361c:	f006 f992 	bl	8009944 <iprintf>
			objectIndex++;
 8003620:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8003624:	3301      	adds	r3, #1
 8003626:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
		while(objectIndex < objectsRead){
 800362a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800362e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003630:	429a      	cmp	r2, r3
 8003632:	dca0      	bgt.n	8003576 <printAllScreens+0x20a>
		}
		printf("[PAS] End of screen #%d \n\r", screenIndex);
 8003634:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8003638:	4619      	mov	r1, r3
 800363a:	4814      	ldr	r0, [pc, #80]	; (800368c <printAllScreens+0x320>)
 800363c:	f006 f982 	bl	8009944 <iprintf>
		screenIndex++;
 8003640:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8003644:	3301      	adds	r3, #1
 8003646:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	while(screenIndex < gconf.totalScreens){
 800364a:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
 800364e:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8003652:	429a      	cmp	r2, r3
 8003654:	f4ff af5c 	bcc.w	8003510 <printAllScreens+0x1a4>
	}

	printf("[PAS] Finished. \n\n\n\r");
 8003658:	480d      	ldr	r0, [pc, #52]	; (8003690 <printAllScreens+0x324>)
 800365a:	f006 f973 	bl	8009944 <iprintf>
 800365e:	f8d7 d004 	ldr.w	sp, [r7, #4]
}
 8003662:	bf00      	nop
 8003664:	3794      	adds	r7, #148	; 0x94
 8003666:	46bd      	mov	sp, r7
 8003668:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800366c:	b004      	add	sp, #16
 800366e:	4770      	bx	lr
 8003670:	0800b1dc 	.word	0x0800b1dc
 8003674:	0800b210 	.word	0x0800b210
 8003678:	0800b238 	.word	0x0800b238
 800367c:	0800b264 	.word	0x0800b264
 8003680:	0800b27c 	.word	0x0800b27c
 8003684:	0800b2b8 	.word	0x0800b2b8
 8003688:	0800b2c0 	.word	0x0800b2c0
 800368c:	0800b2c4 	.word	0x0800b2c4
 8003690:	0800b2e0 	.word	0x0800b2e0

08003694 <reportBitmaps>:


void reportBitmaps(int printHex){
 8003694:	b580      	push	{r7, lr}
 8003696:	f5ad 6d13 	sub.w	sp, sp, #2352	; 0x930
 800369a:	af02      	add	r7, sp, #8
 800369c:	f607 1328 	addw	r3, r7, #2344	; 0x928
 80036a0:	f6a3 1324 	subw	r3, r3, #2340	; 0x924
 80036a4:	6018      	str	r0, [r3, #0]
	struct bitmapList blist;
	readBitmapList(&blist);
 80036a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80036aa:	4618      	mov	r0, r3
 80036ac:	f7ff fd4a 	bl	8003144 <readBitmapList>
	int total = blist.totalBitmaps;
 80036b0:	f607 1328 	addw	r3, r7, #2344	; 0x928
 80036b4:	f6a3 0318 	subw	r3, r3, #2072	; 0x818
 80036b8:	881b      	ldrh	r3, [r3, #0]
 80036ba:	f8c7 391c 	str.w	r3, [r7, #2332]	; 0x91c
	printf("[BR] There are %d bitmaps in memory spanning sectors %d to %d.\n\r", total, BITMAP_LIST_SECTOR+1, blist.lastUsedSector);
 80036be:	f607 1328 	addw	r3, r7, #2344	; 0x928
 80036c2:	f6a3 0318 	subw	r3, r3, #2072	; 0x818
 80036c6:	885b      	ldrh	r3, [r3, #2]
 80036c8:	22c9      	movs	r2, #201	; 0xc9
 80036ca:	f8d7 191c 	ldr.w	r1, [r7, #2332]	; 0x91c
 80036ce:	483d      	ldr	r0, [pc, #244]	; (80037c4 <reportBitmaps+0x130>)
 80036d0:	f006 f938 	bl	8009944 <iprintf>
	int i = 0;
 80036d4:	2300      	movs	r3, #0
 80036d6:	f8c7 3924 	str.w	r3, [r7, #2340]	; 0x924
	while(i < total){
 80036da:	e064      	b.n	80037a6 <reportBitmaps+0x112>
		int thisSector = blist.bitmapSectors[i];
 80036dc:	f607 1328 	addw	r3, r7, #2344	; 0x928
 80036e0:	f6a3 0218 	subw	r2, r3, #2072	; 0x818
 80036e4:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 80036e8:	005b      	lsls	r3, r3, #1
 80036ea:	4413      	add	r3, r2
 80036ec:	889b      	ldrh	r3, [r3, #4]
 80036ee:	f8c7 3918 	str.w	r3, [r7, #2328]	; 0x918
		struct bitmap bm;
		uint16_t pixelBuffer[128];
		int pixelsRead = readBitmap(thisSector, &bm, pixelBuffer, 128);
 80036f2:	f8d7 3918 	ldr.w	r3, [r7, #2328]	; 0x918
 80036f6:	b298      	uxth	r0, r3
 80036f8:	f107 0208 	add.w	r2, r7, #8
 80036fc:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8003700:	2380      	movs	r3, #128	; 0x80
 8003702:	f7ff fddd 	bl	80032c0 <readBitmap>
 8003706:	f8c7 0914 	str.w	r0, [r7, #2324]	; 0x914
		printf("[BR] Bitmap #%d stored @ sector %d is %dx%d pixels.\n\r", bm.bitmapNumber, thisSector, bm.xsize, bm.ysize);
 800370a:	f607 1328 	addw	r3, r7, #2344	; 0x928
 800370e:	f5a3 6302 	sub.w	r3, r3, #2080	; 0x820
 8003712:	881b      	ldrh	r3, [r3, #0]
 8003714:	4619      	mov	r1, r3
 8003716:	f607 1328 	addw	r3, r7, #2344	; 0x928
 800371a:	f5a3 6302 	sub.w	r3, r3, #2080	; 0x820
 800371e:	885b      	ldrh	r3, [r3, #2]
 8003720:	461a      	mov	r2, r3
 8003722:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8003726:	f5a3 6302 	sub.w	r3, r3, #2080	; 0x820
 800372a:	889b      	ldrh	r3, [r3, #4]
 800372c:	9300      	str	r3, [sp, #0]
 800372e:	4613      	mov	r3, r2
 8003730:	f8d7 2918 	ldr.w	r2, [r7, #2328]	; 0x918
 8003734:	4824      	ldr	r0, [pc, #144]	; (80037c8 <reportBitmaps+0x134>)
 8003736:	f006 f905 	bl	8009944 <iprintf>
		if(printHex){
 800373a:	f607 1328 	addw	r3, r7, #2344	; 0x928
 800373e:	f6a3 1324 	subw	r3, r3, #2340	; 0x924
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d029      	beq.n	800379c <reportBitmaps+0x108>
			printf("[BR] It's first %d pixels are (newlines don't correspond to rows in bitmap!!):", pixelsRead);
 8003748:	f8d7 1914 	ldr.w	r1, [r7, #2324]	; 0x914
 800374c:	481f      	ldr	r0, [pc, #124]	; (80037cc <reportBitmaps+0x138>)
 800374e:	f006 f8f9 	bl	8009944 <iprintf>
			int printIndex = 0;
 8003752:	2300      	movs	r3, #0
 8003754:	f8c7 3920 	str.w	r3, [r7, #2336]	; 0x920
			while(printIndex < pixelsRead){
 8003758:	e017      	b.n	800378a <reportBitmaps+0xf6>
				if(printIndex%8==0){
 800375a:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 800375e:	f003 0307 	and.w	r3, r3, #7
 8003762:	2b00      	cmp	r3, #0
 8003764:	d102      	bne.n	800376c <reportBitmaps+0xd8>
					printf("\n\r    ");
 8003766:	481a      	ldr	r0, [pc, #104]	; (80037d0 <reportBitmaps+0x13c>)
 8003768:	f006 f8ec 	bl	8009944 <iprintf>
				}
				printf("%04X ", pixelBuffer[printIndex++]);
 800376c:	f8d7 3920 	ldr.w	r3, [r7, #2336]	; 0x920
 8003770:	1c5a      	adds	r2, r3, #1
 8003772:	f8c7 2920 	str.w	r2, [r7, #2336]	; 0x920
 8003776:	f607 1228 	addw	r2, r7, #2344	; 0x928
 800377a:	f5a2 6212 	sub.w	r2, r2, #2336	; 0x920
 800377e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003782:	4619      	mov	r1, r3
 8003784:	4813      	ldr	r0, [pc, #76]	; (80037d4 <reportBitmaps+0x140>)
 8003786:	f006 f8dd 	bl	8009944 <iprintf>
			while(printIndex < pixelsRead){
 800378a:	f8d7 2920 	ldr.w	r2, [r7, #2336]	; 0x920
 800378e:	f8d7 3914 	ldr.w	r3, [r7, #2324]	; 0x914
 8003792:	429a      	cmp	r2, r3
 8003794:	dbe1      	blt.n	800375a <reportBitmaps+0xc6>
			}
			printf("\n\r");
 8003796:	4810      	ldr	r0, [pc, #64]	; (80037d8 <reportBitmaps+0x144>)
 8003798:	f006 f8d4 	bl	8009944 <iprintf>

		}
		i++;
 800379c:	f8d7 3924 	ldr.w	r3, [r7, #2340]	; 0x924
 80037a0:	3301      	adds	r3, #1
 80037a2:	f8c7 3924 	str.w	r3, [r7, #2340]	; 0x924
	while(i < total){
 80037a6:	f8d7 2924 	ldr.w	r2, [r7, #2340]	; 0x924
 80037aa:	f8d7 391c 	ldr.w	r3, [r7, #2332]	; 0x91c
 80037ae:	429a      	cmp	r2, r3
 80037b0:	db94      	blt.n	80036dc <reportBitmaps+0x48>
	}
	printf("[BR] Bitmap report finished.\n\r");
 80037b2:	480a      	ldr	r0, [pc, #40]	; (80037dc <reportBitmaps+0x148>)
 80037b4:	f006 f8c6 	bl	8009944 <iprintf>
}
 80037b8:	bf00      	nop
 80037ba:	f607 1728 	addw	r7, r7, #2344	; 0x928
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	0800b2f8 	.word	0x0800b2f8
 80037c8:	0800b33c 	.word	0x0800b33c
 80037cc:	0800b374 	.word	0x0800b374
 80037d0:	0800b3c4 	.word	0x0800b3c4
 80037d4:	0800b3cc 	.word	0x0800b3cc
 80037d8:	0800b3d4 	.word	0x0800b3d4
 80037dc:	0800b3d8 	.word	0x0800b3d8

080037e0 <objectTypeToString>:
const char *typeNames[] 	= 		{"rectangle", "button", "label", "picture"};
const objectType_t types[] 	= 		{rectangle, button, label, picture};
const int typeCount = 3;

// Make sure that str is long enough for longest member of typeNames!
void objectTypeToString(objectType_t type, char *str){
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	4603      	mov	r3, r0
 80037e8:	6039      	str	r1, [r7, #0]
 80037ea:	71fb      	strb	r3, [r7, #7]
	int i;
	for(i=0; i<typeCount; i++){
 80037ec:	2300      	movs	r3, #0
 80037ee:	60fb      	str	r3, [r7, #12]
 80037f0:	e012      	b.n	8003818 <objectTypeToString+0x38>
		if(type == types[i]){
 80037f2:	4a0d      	ldr	r2, [pc, #52]	; (8003828 <objectTypeToString+0x48>)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	4413      	add	r3, r2
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	79fa      	ldrb	r2, [r7, #7]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d108      	bne.n	8003812 <objectTypeToString+0x32>
			strcpy(str, typeNames[i]);
 8003800:	4a0a      	ldr	r2, [pc, #40]	; (800382c <objectTypeToString+0x4c>)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003808:	4619      	mov	r1, r3
 800380a:	6838      	ldr	r0, [r7, #0]
 800380c:	f006 f8b2 	bl	8009974 <strcpy>
			return;
 8003810:	e006      	b.n	8003820 <objectTypeToString+0x40>
	for(i=0; i<typeCount; i++){
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	3301      	adds	r3, #1
 8003816:	60fb      	str	r3, [r7, #12]
 8003818:	2203      	movs	r2, #3
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	4293      	cmp	r3, r2
 800381e:	dbe8      	blt.n	80037f2 <objectTypeToString+0x12>
		}
	}

}
 8003820:	3710      	adds	r7, #16
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	0800b6c8 	.word	0x0800b6c8
 800382c:	20000000 	.word	0x20000000

08003830 <stringToObjectType>:

objectType_t stringToObjectType(char *str){
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
	int i;
	for(i=0; i<typeCount; i++){
 8003838:	2300      	movs	r3, #0
 800383a:	60fb      	str	r3, [r7, #12]
 800383c:	e012      	b.n	8003864 <stringToObjectType+0x34>
		if(strcmp(typeNames[i], str) == 0){
 800383e:	4a0e      	ldr	r2, [pc, #56]	; (8003878 <stringToObjectType+0x48>)
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003846:	6879      	ldr	r1, [r7, #4]
 8003848:	4618      	mov	r0, r3
 800384a:	f7fc fcc1 	bl	80001d0 <strcmp>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d104      	bne.n	800385e <stringToObjectType+0x2e>
			return types[i];
 8003854:	4a09      	ldr	r2, [pc, #36]	; (800387c <stringToObjectType+0x4c>)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	4413      	add	r3, r2
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	e007      	b.n	800386e <stringToObjectType+0x3e>
	for(i=0; i<typeCount; i++){
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	3301      	adds	r3, #1
 8003862:	60fb      	str	r3, [r7, #12]
 8003864:	2203      	movs	r2, #3
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	4293      	cmp	r3, r2
 800386a:	dbe8      	blt.n	800383e <stringToObjectType+0xe>
		}
	}
	return none;
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3710      	adds	r7, #16
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	20000000 	.word	0x20000000
 800387c:	0800b6c8 	.word	0x0800b6c8

08003880 <flashCSSet>:
#include <string.h>

#define FLASHWRITE_DEBUG_PRINT 0


void flashCSSet(){
 8003880:	b580      	push	{r7, lr}
 8003882:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8003884:	2201      	movs	r2, #1
 8003886:	2110      	movs	r1, #16
 8003888:	4802      	ldr	r0, [pc, #8]	; (8003894 <flashCSSet+0x14>)
 800388a:	f002 fac5 	bl	8005e18 <HAL_GPIO_WritePin>
}
 800388e:	bf00      	nop
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	40020000 	.word	0x40020000

08003898 <flashCSReset>:

void flashCSReset(){
 8003898:	b580      	push	{r7, lr}
 800389a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800389c:	2200      	movs	r2, #0
 800389e:	2110      	movs	r1, #16
 80038a0:	4802      	ldr	r0, [pc, #8]	; (80038ac <flashCSReset+0x14>)
 80038a2:	f002 fab9 	bl	8005e18 <HAL_GPIO_WritePin>
}
 80038a6:	bf00      	nop
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	40020000 	.word	0x40020000

080038b0 <ext_flash_erase_4kB>:
		}
	}
}

void ext_flash_erase_4kB(unsigned int address)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
	unsigned int i;

	printf("erase at %d \n\r", address);
 80038b8:	6879      	ldr	r1, [r7, #4]
 80038ba:	481a      	ldr	r0, [pc, #104]	; (8003924 <ext_flash_erase_4kB+0x74>)
 80038bc:	f006 f842 	bl	8009944 <iprintf>

	ext_flash_wren();
 80038c0:	f000 f86c 	bl	800399c <ext_flash_wren>

	flashCSReset();
 80038c4:	f7ff ffe8 	bl	8003898 <flashCSReset>
	SPI1_Transfer(0x20);
 80038c8:	2020      	movs	r0, #32
 80038ca:	f001 f99f 	bl	8004c0c <SPI1_Transfer>
	SPI1_Transfer((address>>16)&0xFF);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	0c1b      	lsrs	r3, r3, #16
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	4618      	mov	r0, r3
 80038d6:	f001 f999 	bl	8004c0c <SPI1_Transfer>
	SPI1_Transfer((address>>8)&0xFF);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	0a1b      	lsrs	r3, r3, #8
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	4618      	mov	r0, r3
 80038e2:	f001 f993 	bl	8004c0c <SPI1_Transfer>
	SPI1_Transfer(address&0xFF);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	4618      	mov	r0, r3
 80038ec:	f001 f98e 	bl	8004c0c <SPI1_Transfer>
	flashCSSet();
 80038f0:	f7ff ffc6 	bl	8003880 <flashCSSet>

	for(i=0;i<1000;i++)
 80038f4:	2300      	movs	r3, #0
 80038f6:	60fb      	str	r3, [r7, #12]
 80038f8:	e00a      	b.n	8003910 <ext_flash_erase_4kB+0x60>
	{
		HAL_Delay(1);
 80038fa:	2001      	movs	r0, #1
 80038fc:	f001 ff28 	bl	8005750 <HAL_Delay>
		if(ext_flash_read_status_register_1()==0x00)
 8003900:	f000 f838 	bl	8003974 <ext_flash_read_status_register_1>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	d007      	beq.n	800391a <ext_flash_erase_4kB+0x6a>
	for(i=0;i<1000;i++)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	3301      	adds	r3, #1
 800390e:	60fb      	str	r3, [r7, #12]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003916:	d3f0      	bcc.n	80038fa <ext_flash_erase_4kB+0x4a>
		{
			break;
		}
	}
}
 8003918:	e000      	b.n	800391c <ext_flash_erase_4kB+0x6c>
			break;
 800391a:	bf00      	nop
}
 800391c:	bf00      	nop
 800391e:	3710      	adds	r7, #16
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}
 8003924:	0800b41c 	.word	0x0800b41c

08003928 <ext_flash_write>:




void ext_flash_write(unsigned int address, unsigned char *buff, unsigned int len)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	607a      	str	r2, [r7, #4]
	ext_flash_continuous_write_begin(address);
 8003934:	68f8      	ldr	r0, [r7, #12]
 8003936:	f000 f87c 	bl	8003a32 <ext_flash_continuous_write_begin>
	ext_flash_continuous_write_write(buff, len);
 800393a:	6879      	ldr	r1, [r7, #4]
 800393c:	68b8      	ldr	r0, [r7, #8]
 800393e:	f000 f898 	bl	8003a72 <ext_flash_continuous_write_write>
	ext_flash_continuous_write_finish();
 8003942:	f000 f8b1 	bl	8003aa8 <ext_flash_continuous_write_finish>
}
 8003946:	bf00      	nop
 8003948:	3710      	adds	r7, #16
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}

0800394e <ext_flash_read>:
void ext_flash_read(unsigned int address, unsigned char *buff, unsigned int len)
{
 800394e:	b580      	push	{r7, lr}
 8003950:	b084      	sub	sp, #16
 8003952:	af00      	add	r7, sp, #0
 8003954:	60f8      	str	r0, [r7, #12]
 8003956:	60b9      	str	r1, [r7, #8]
 8003958:	607a      	str	r2, [r7, #4]
	ext_flash_continuous_read_begin(address);
 800395a:	68f8      	ldr	r0, [r7, #12]
 800395c:	f000 f829 	bl	80039b2 <ext_flash_continuous_read_begin>
	ext_flash_continuous_read_read(buff, len);
 8003960:	6879      	ldr	r1, [r7, #4]
 8003962:	68b8      	ldr	r0, [r7, #8]
 8003964:	f000 f843 	bl	80039ee <ext_flash_continuous_read_read>
	ext_flash_continuous_read_finish();
 8003968:	f000 f85d 	bl	8003a26 <ext_flash_continuous_read_finish>
}
 800396c:	bf00      	nop
 800396e:	3710      	adds	r7, #16
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}

08003974 <ext_flash_read_status_register_1>:

	return data;
}

unsigned char ext_flash_read_status_register_1()
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
	char data;
	flashCSReset();
 800397a:	f7ff ff8d 	bl	8003898 <flashCSReset>
	SPI1_Transfer(0x05);
 800397e:	2005      	movs	r0, #5
 8003980:	f001 f944 	bl	8004c0c <SPI1_Transfer>
	data=SPI1_Transfer(0x00);
 8003984:	2000      	movs	r0, #0
 8003986:	f001 f941 	bl	8004c0c <SPI1_Transfer>
 800398a:	4603      	mov	r3, r0
 800398c:	71fb      	strb	r3, [r7, #7]
	flashCSSet();
 800398e:	f7ff ff77 	bl	8003880 <flashCSSet>

	return data;
 8003992:	79fb      	ldrb	r3, [r7, #7]
}
 8003994:	4618      	mov	r0, r3
 8003996:	3708      	adds	r7, #8
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <ext_flash_wren>:

void ext_flash_wren()
{
 800399c:	b580      	push	{r7, lr}
 800399e:	af00      	add	r7, sp, #0
	flashCSReset();
 80039a0:	f7ff ff7a 	bl	8003898 <flashCSReset>
	SPI1_Transfer(0x06);
 80039a4:	2006      	movs	r0, #6
 80039a6:	f001 f931 	bl	8004c0c <SPI1_Transfer>
	flashCSSet();
 80039aa:	f7ff ff69 	bl	8003880 <flashCSSet>
}
 80039ae:	bf00      	nop
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <ext_flash_continuous_read_begin>:


//Continuous functions below keep conection open while reading, allowing for access to data not aligned to 4kB sectors
void ext_flash_continuous_read_begin(unsigned int address){
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b082      	sub	sp, #8
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
	command[0]=0x03;
	command[1]=((char *)&address)[3];
	command[2]=((char *)&address)[2];
	command[3]=((char *)&address)[1];*/

	flashCSReset();
 80039ba:	f7ff ff6d 	bl	8003898 <flashCSReset>

	SPI1_Transfer(0x03);
 80039be:	2003      	movs	r0, #3
 80039c0:	f001 f924 	bl	8004c0c <SPI1_Transfer>
	SPI1_Transfer((address>>16)&0xFF);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	0c1b      	lsrs	r3, r3, #16
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	4618      	mov	r0, r3
 80039cc:	f001 f91e 	bl	8004c0c <SPI1_Transfer>
	SPI1_Transfer((address>>8)&0xFF);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	0a1b      	lsrs	r3, r3, #8
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	4618      	mov	r0, r3
 80039d8:	f001 f918 	bl	8004c0c <SPI1_Transfer>
	SPI1_Transfer(address&0xFF);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	4618      	mov	r0, r3
 80039e2:	f001 f913 	bl	8004c0c <SPI1_Transfer>
}
 80039e6:	bf00      	nop
 80039e8:	3708      	adds	r7, #8
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}

080039ee <ext_flash_continuous_read_read>:

void ext_flash_continuous_read_read(unsigned char *buff, unsigned int len){
 80039ee:	b590      	push	{r4, r7, lr}
 80039f0:	b085      	sub	sp, #20
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
 80039f6:	6039      	str	r1, [r7, #0]
	for(unsigned int i = 0; i<len; i++){
 80039f8:	2300      	movs	r3, #0
 80039fa:	60fb      	str	r3, [r7, #12]
 80039fc:	e00a      	b.n	8003a14 <ext_flash_continuous_read_read+0x26>
		*(buff+i) = SPI1_Transfer(0x00);
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	18d4      	adds	r4, r2, r3
 8003a04:	2000      	movs	r0, #0
 8003a06:	f001 f901 	bl	8004c0c <SPI1_Transfer>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	7023      	strb	r3, [r4, #0]
	for(unsigned int i = 0; i<len; i++){
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	3301      	adds	r3, #1
 8003a12:	60fb      	str	r3, [r7, #12]
 8003a14:	68fa      	ldr	r2, [r7, #12]
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d3f0      	bcc.n	80039fe <ext_flash_continuous_read_read+0x10>
	}
}
 8003a1c:	bf00      	nop
 8003a1e:	bf00      	nop
 8003a20:	3714      	adds	r7, #20
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd90      	pop	{r4, r7, pc}

08003a26 <ext_flash_continuous_read_finish>:
void ext_flash_continuous_read_skip(unsigned int len){
	for(unsigned int i = 0; i<len; i++){
			SPI1_Transfer(0x00);
	}
}
void ext_flash_continuous_read_finish(){
 8003a26:	b580      	push	{r7, lr}
 8003a28:	af00      	add	r7, sp, #0
	flashCSSet();
 8003a2a:	f7ff ff29 	bl	8003880 <flashCSSet>
}
 8003a2e:	bf00      	nop
 8003a30:	bd80      	pop	{r7, pc}

08003a32 <ext_flash_continuous_write_begin>:

void ext_flash_continuous_write_begin(unsigned int address){
 8003a32:	b580      	push	{r7, lr}
 8003a34:	b082      	sub	sp, #8
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
	ext_flash_wren();
 8003a3a:	f7ff ffaf 	bl	800399c <ext_flash_wren>
	flashCSReset();
 8003a3e:	f7ff ff2b 	bl	8003898 <flashCSReset>
	SPI1_Transfer(0x02);
 8003a42:	2002      	movs	r0, #2
 8003a44:	f001 f8e2 	bl	8004c0c <SPI1_Transfer>
	SPI1_Transfer((address>>16)&0xFF);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	0c1b      	lsrs	r3, r3, #16
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f001 f8dc 	bl	8004c0c <SPI1_Transfer>
	SPI1_Transfer((address>>8)&0xFF);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	0a1b      	lsrs	r3, r3, #8
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f001 f8d6 	bl	8004c0c <SPI1_Transfer>
	SPI1_Transfer(address&0xFF);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	4618      	mov	r0, r3
 8003a66:	f001 f8d1 	bl	8004c0c <SPI1_Transfer>
	if(FLASHWRITE_DEBUG_PRINT){printf("FLASHWRITE @ %x :", address);};
}
 8003a6a:	bf00      	nop
 8003a6c:	3708      	adds	r7, #8
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}

08003a72 <ext_flash_continuous_write_write>:
void ext_flash_continuous_write_write(unsigned char *buff, unsigned int len){
 8003a72:	b580      	push	{r7, lr}
 8003a74:	b084      	sub	sp, #16
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
 8003a7a:	6039      	str	r1, [r7, #0]
	unsigned int i;

	for(i=0;i<len;i++)
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	60fb      	str	r3, [r7, #12]
 8003a80:	e009      	b.n	8003a96 <ext_flash_continuous_write_write+0x24>
		{
			SPI1_Transfer(buff[i]);
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	4413      	add	r3, r2
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f001 f8be 	bl	8004c0c <SPI1_Transfer>
	for(i=0;i<len;i++)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	3301      	adds	r3, #1
 8003a94:	60fb      	str	r3, [r7, #12]
 8003a96:	68fa      	ldr	r2, [r7, #12]
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d3f1      	bcc.n	8003a82 <ext_flash_continuous_write_write+0x10>
			if(FLASHWRITE_DEBUG_PRINT){printf(" %x ", buff[i]);};
		}
	if(FLASHWRITE_DEBUG_PRINT){printf("\n\r");};
}
 8003a9e:	bf00      	nop
 8003aa0:	bf00      	nop
 8003aa2:	3710      	adds	r7, #16
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <ext_flash_continuous_write_finish>:
void ext_flash_continuous_write_finish(){
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
	flashCSSet();
 8003aae:	f7ff fee7 	bl	8003880 <flashCSSet>
	unsigned int i;
	for(i=0;i<1000;i++)
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	607b      	str	r3, [r7, #4]
 8003ab6:	e00a      	b.n	8003ace <ext_flash_continuous_write_finish+0x26>
	{
		HAL_Delay(1);
 8003ab8:	2001      	movs	r0, #1
 8003aba:	f001 fe49 	bl	8005750 <HAL_Delay>
		if(ext_flash_read_status_register_1()==0x00)
 8003abe:	f7ff ff59 	bl	8003974 <ext_flash_read_status_register_1>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d007      	beq.n	8003ad8 <ext_flash_continuous_write_finish+0x30>
	for(i=0;i<1000;i++)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	3301      	adds	r3, #1
 8003acc:	607b      	str	r3, [r7, #4]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ad4:	d3f0      	bcc.n	8003ab8 <ext_flash_continuous_write_finish+0x10>
		{
			break;
		}
	}
}
 8003ad6:	e000      	b.n	8003ada <ext_flash_continuous_write_finish+0x32>
			break;
 8003ad8:	bf00      	nop
}
 8003ada:	bf00      	nop
 8003adc:	3708      	adds	r7, #8
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
	...

08003ae4 <ext_flash_write_multipage>:

}



void ext_flash_write_multipage(unsigned int address, unsigned char *buff, unsigned int len){
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b0c8      	sub	sp, #288	; 0x120
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003aee:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003af2:	6018      	str	r0, [r3, #0]
 8003af4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003af8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003afc:	6019      	str	r1, [r3, #0]
 8003afe:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003b02:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003b06:	601a      	str	r2, [r3, #0]
	printf("Multipage write [%d]b@%d \n\r", len, address);
 8003b08:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003b0c:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 8003b10:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003b14:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003b18:	6812      	ldr	r2, [r2, #0]
 8003b1a:	6819      	ldr	r1, [r3, #0]
 8003b1c:	4830      	ldr	r0, [pc, #192]	; (8003be0 <ext_flash_write_multipage+0xfc>)
 8003b1e:	f005 ff11 	bl	8009944 <iprintf>
	unsigned char pageBuff[PAGE_SIZE];
	unsigned int bytesLeft = len;
 8003b22:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003b26:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	unsigned int buffIndex = 0;
 8003b30:	2300      	movs	r3, #0
 8003b32:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	unsigned int addrIncrement = 0;
 8003b36:	2300      	movs	r3, #0
 8003b38:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	while(bytesLeft > 0){
 8003b3c:	e045      	b.n	8003bca <ext_flash_write_multipage+0xe6>
		if(bytesLeft <= PAGE_SIZE){
 8003b3e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003b42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b46:	d812      	bhi.n	8003b6e <ext_flash_write_multipage+0x8a>
			memcpy(pageBuff, buff + buffIndex, bytesLeft);
 8003b48:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003b4c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b56:	18d1      	adds	r1, r2, r3
 8003b58:	f107 0314 	add.w	r3, r7, #20
 8003b5c:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8003b60:	4618      	mov	r0, r3
 8003b62:	f005 fed9 	bl	8009918 <memcpy>
			bytesLeft = 0;
 8003b66:	2300      	movs	r3, #0
 8003b68:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003b6c:	e018      	b.n	8003ba0 <ext_flash_write_multipage+0xbc>
		}
		else{
			memcpy(pageBuff, buff + buffIndex, PAGE_SIZE);
 8003b6e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003b72:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b7c:	441a      	add	r2, r3
 8003b7e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003b82:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003b86:	4618      	mov	r0, r3
 8003b88:	4611      	mov	r1, r2
 8003b8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b8e:	461a      	mov	r2, r3
 8003b90:	f005 fec2 	bl	8009918 <memcpy>
			bytesLeft -= PAGE_SIZE;
 8003b94:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003b98:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003b9c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
		}
		ext_flash_write(address + addrIncrement, pageBuff, PAGE_SIZE);
 8003ba0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003ba4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003bae:	4413      	add	r3, r2
 8003bb0:	f107 0114 	add.w	r1, r7, #20
 8003bb4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f7ff feb5 	bl	8003928 <ext_flash_write>
		addrIncrement += PAGE_SIZE;
 8003bbe:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003bc2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003bc6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	while(bytesLeft > 0){
 8003bca:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d1b5      	bne.n	8003b3e <ext_flash_write_multipage+0x5a>
	}

}
 8003bd2:	bf00      	nop
 8003bd4:	bf00      	nop
 8003bd6:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	0800b450 	.word	0x0800b450

08003be4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003be8:	f5ad 7d35 	sub.w	sp, sp, #724	; 0x2d4
 8003bec:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003bee:	f001 fd3d 	bl	800566c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003bf2:	f000 fa21 	bl	8004038 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003bf6:	f000 fbe3 	bl	80043c0 <MX_GPIO_Init>
  MX_FSMC_Init();
 8003bfa:	f000 fc87 	bl	800450c <MX_FSMC_Init>
  MX_USART1_UART_Init();
 8003bfe:	f000 fb7b 	bl	80042f8 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8003c02:	f000 fa83 	bl	800410c <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8003c06:	f000 fba9 	bl	800435c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8003c0a:	f000 fab5 	bl	8004178 <MX_SPI1_Init>
  MX_TIM1_Init();
 8003c0e:	f000 faf1 	bl	80041f4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */



  //enable uart interrupt
  uint16_t count = 0;
 8003c12:	2300      	movs	r3, #0
 8003c14:	f8a7 3272 	strh.w	r3, [r7, #626]	; 0x272
  Init_LCD();
 8003c18:	f7fc ffc2 	bl	8000ba0 <Init_LCD>

  touch_reset();
 8003c1c:	f7fd fcc8 	bl	80015b0 <touch_reset>
  touch_init(hi2c1);
 8003c20:	4cd6      	ldr	r4, [pc, #856]	; (8003f7c <main+0x398>)
 8003c22:	4668      	mov	r0, sp
 8003c24:	f104 0110 	add.w	r1, r4, #16
 8003c28:	2344      	movs	r3, #68	; 0x44
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	f005 fe74 	bl	8009918 <memcpy>
 8003c30:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003c34:	f7fd fbdc 	bl	80013f0 <touch_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  	  printf("Entering main loop\n\r");
 8003c38:	48d1      	ldr	r0, [pc, #836]	; (8003f80 <main+0x39c>)
 8003c3a:	f005 fe83 	bl	8009944 <iprintf>


  	int loopNumber = 0;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274



	LCD_fillRect(0,0,50,50,WHITE);
 8003c44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c48:	9300      	str	r3, [sp, #0]
 8003c4a:	2332      	movs	r3, #50	; 0x32
 8003c4c:	2232      	movs	r2, #50	; 0x32
 8003c4e:	2100      	movs	r1, #0
 8003c50:	2000      	movs	r0, #0
 8003c52:	f7fc ffb3 	bl	8000bbc <LCD_fillRect>
	LCD_fillRect(470,0,50,50,RED);
 8003c56:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003c5a:	9300      	str	r3, [sp, #0]
 8003c5c:	2332      	movs	r3, #50	; 0x32
 8003c5e:	2232      	movs	r2, #50	; 0x32
 8003c60:	2100      	movs	r1, #0
 8003c62:	f44f 70eb 	mov.w	r0, #470	; 0x1d6
 8003c66:	f7fc ffa9 	bl	8000bbc <LCD_fillRect>
	LCD_fillRect(256,154,50,50,RED);
 8003c6a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003c6e:	9300      	str	r3, [sp, #0]
 8003c70:	2332      	movs	r3, #50	; 0x32
 8003c72:	2232      	movs	r2, #50	; 0x32
 8003c74:	219a      	movs	r1, #154	; 0x9a
 8003c76:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003c7a:	f7fc ff9f 	bl	8000bbc <LCD_fillRect>
	LCD_fillRect(100,100,50,50,YELLOW);
 8003c7e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003c82:	9300      	str	r3, [sp, #0]
 8003c84:	2332      	movs	r3, #50	; 0x32
 8003c86:	2232      	movs	r2, #50	; 0x32
 8003c88:	2164      	movs	r1, #100	; 0x64
 8003c8a:	2064      	movs	r0, #100	; 0x64
 8003c8c:	f7fc ff96 	bl	8000bbc <LCD_fillRect>
	printf("Register result: %d\n\r",touch_register_element(0,0,0,0,50,50,0,0));
 8003c90:	2300      	movs	r3, #0
 8003c92:	9303      	str	r3, [sp, #12]
 8003c94:	2300      	movs	r3, #0
 8003c96:	9302      	str	r3, [sp, #8]
 8003c98:	2332      	movs	r3, #50	; 0x32
 8003c9a:	9301      	str	r3, [sp, #4]
 8003c9c:	2332      	movs	r3, #50	; 0x32
 8003c9e:	9300      	str	r3, [sp, #0]
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	2100      	movs	r1, #0
 8003ca6:	2000      	movs	r0, #0
 8003ca8:	f7fd fd6e 	bl	8001788 <touch_register_element>
 8003cac:	4603      	mov	r3, r0
 8003cae:	4619      	mov	r1, r3
 8003cb0:	48b4      	ldr	r0, [pc, #720]	; (8003f84 <main+0x3a0>)
 8003cb2:	f005 fe47 	bl	8009944 <iprintf>
	printf("Register result: %d\n\r",touch_register_element(0,0,470,0,470+50,50,0,0));
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	9303      	str	r3, [sp, #12]
 8003cba:	2300      	movs	r3, #0
 8003cbc:	9302      	str	r3, [sp, #8]
 8003cbe:	2332      	movs	r3, #50	; 0x32
 8003cc0:	9301      	str	r3, [sp, #4]
 8003cc2:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003cc6:	9300      	str	r3, [sp, #0]
 8003cc8:	2300      	movs	r3, #0
 8003cca:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8003cce:	2100      	movs	r1, #0
 8003cd0:	2000      	movs	r0, #0
 8003cd2:	f7fd fd59 	bl	8001788 <touch_register_element>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	4619      	mov	r1, r3
 8003cda:	48aa      	ldr	r0, [pc, #680]	; (8003f84 <main+0x3a0>)
 8003cdc:	f005 fe32 	bl	8009944 <iprintf>
	printf("Register result: %d\n\r",touch_register_element(0,0,256,154,256+50,154+50,0,0));
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	9303      	str	r3, [sp, #12]
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	9302      	str	r3, [sp, #8]
 8003ce8:	23cc      	movs	r3, #204	; 0xcc
 8003cea:	9301      	str	r3, [sp, #4]
 8003cec:	f44f 7399 	mov.w	r3, #306	; 0x132
 8003cf0:	9300      	str	r3, [sp, #0]
 8003cf2:	239a      	movs	r3, #154	; 0x9a
 8003cf4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003cf8:	2100      	movs	r1, #0
 8003cfa:	2000      	movs	r0, #0
 8003cfc:	f7fd fd44 	bl	8001788 <touch_register_element>
 8003d00:	4603      	mov	r3, r0
 8003d02:	4619      	mov	r1, r3
 8003d04:	489f      	ldr	r0, [pc, #636]	; (8003f84 <main+0x3a0>)
 8003d06:	f005 fe1d 	bl	8009944 <iprintf>
	printf("Register result: %d\n\r",touch_register_element(0,0,100,100,150,150,0,0));
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	9303      	str	r3, [sp, #12]
 8003d0e:	2300      	movs	r3, #0
 8003d10:	9302      	str	r3, [sp, #8]
 8003d12:	2396      	movs	r3, #150	; 0x96
 8003d14:	9301      	str	r3, [sp, #4]
 8003d16:	2396      	movs	r3, #150	; 0x96
 8003d18:	9300      	str	r3, [sp, #0]
 8003d1a:	2364      	movs	r3, #100	; 0x64
 8003d1c:	2264      	movs	r2, #100	; 0x64
 8003d1e:	2100      	movs	r1, #0
 8003d20:	2000      	movs	r0, #0
 8003d22:	f7fd fd31 	bl	8001788 <touch_register_element>
 8003d26:	4603      	mov	r3, r0
 8003d28:	4619      	mov	r1, r3
 8003d2a:	4896      	ldr	r0, [pc, #600]	; (8003f84 <main+0x3a0>)
 8003d2c:	f005 fe0a 	bl	8009944 <iprintf>

	int notYetDrawnFlag = 1;
 8003d30:	2301      	movs	r3, #1
 8003d32:	f8c7 3278 	str.w	r3, [r7, #632]	; 0x278
	struct generalConfig gConf;
	int currentScreen = 1;
 8003d36:	2301      	movs	r3, #1
 8003d38:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c

	//arrays for holding object data loaded from flash
	uint16_t maxObjects = 128;
 8003d3c:	2380      	movs	r3, #128	; 0x80
 8003d3e:	f8a7 326a 	strh.w	r3, [r7, #618]	; 0x26a
	uint16_t maxData = SECTOR_SIZE*4;
 8003d42:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003d46:	f8a7 3268 	strh.w	r3, [r7, #616]	; 0x268
	struct screen screenHeader;
	struct object objArr[maxObjects];
 8003d4a:	f8b7 426a 	ldrh.w	r4, [r7, #618]	; 0x26a
 8003d4e:	4623      	mov	r3, r4
 8003d50:	3b01      	subs	r3, #1
 8003d52:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8003d56:	b2a3      	uxth	r3, r4
 8003d58:	2200      	movs	r2, #0
 8003d5a:	623b      	str	r3, [r7, #32]
 8003d5c:	627a      	str	r2, [r7, #36]	; 0x24
 8003d5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d62:	f04f 0000 	mov.w	r0, #0
 8003d66:	f04f 0100 	mov.w	r1, #0
 8003d6a:	00d9      	lsls	r1, r3, #3
 8003d6c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d70:	00d0      	lsls	r0, r2, #3
 8003d72:	4602      	mov	r2, r0
 8003d74:	460b      	mov	r3, r1
 8003d76:	6a39      	ldr	r1, [r7, #32]
 8003d78:	ebb2 0801 	subs.w	r8, r2, r1
 8003d7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d7e:	eb63 0901 	sbc.w	r9, r3, r1
 8003d82:	f04f 0200 	mov.w	r2, #0
 8003d86:	f04f 0300 	mov.w	r3, #0
 8003d8a:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8003d8e:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8003d92:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8003d96:	b2a3      	uxth	r3, r4
 8003d98:	2200      	movs	r2, #0
 8003d9a:	61bb      	str	r3, [r7, #24]
 8003d9c:	61fa      	str	r2, [r7, #28]
 8003d9e:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8003da2:	4642      	mov	r2, r8
 8003da4:	464b      	mov	r3, r9
 8003da6:	f04f 0000 	mov.w	r0, #0
 8003daa:	f04f 0100 	mov.w	r1, #0
 8003dae:	00d9      	lsls	r1, r3, #3
 8003db0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003db4:	00d0      	lsls	r0, r2, #3
 8003db6:	4602      	mov	r2, r0
 8003db8:	460b      	mov	r3, r1
 8003dba:	4641      	mov	r1, r8
 8003dbc:	ebb2 0a01 	subs.w	sl, r2, r1
 8003dc0:	4649      	mov	r1, r9
 8003dc2:	eb63 0b01 	sbc.w	fp, r3, r1
 8003dc6:	f04f 0200 	mov.w	r2, #0
 8003dca:	f04f 0300 	mov.w	r3, #0
 8003dce:	ea4f 130b 	mov.w	r3, fp, lsl #4
 8003dd2:	ea43 731a 	orr.w	r3, r3, sl, lsr #28
 8003dd6:	ea4f 120a 	mov.w	r2, sl, lsl #4
 8003dda:	4622      	mov	r2, r4
 8003ddc:	4613      	mov	r3, r2
 8003dde:	00db      	lsls	r3, r3, #3
 8003de0:	1a9b      	subs	r3, r3, r2
 8003de2:	005b      	lsls	r3, r3, #1
 8003de4:	3307      	adds	r3, #7
 8003de6:	08db      	lsrs	r3, r3, #3
 8003de8:	00db      	lsls	r3, r3, #3
 8003dea:	ebad 0d03 	sub.w	sp, sp, r3
 8003dee:	ab12      	add	r3, sp, #72	; 0x48
 8003df0:	3301      	adds	r3, #1
 8003df2:	085b      	lsrs	r3, r3, #1
 8003df4:	005b      	lsls	r3, r3, #1
 8003df6:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
	uint8_t dataArr[maxData];
 8003dfa:	f8b7 1268 	ldrh.w	r1, [r7, #616]	; 0x268
 8003dfe:	460b      	mov	r3, r1
 8003e00:	3b01      	subs	r3, #1
 8003e02:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8003e06:	b28b      	uxth	r3, r1
 8003e08:	2200      	movs	r2, #0
 8003e0a:	613b      	str	r3, [r7, #16]
 8003e0c:	617a      	str	r2, [r7, #20]
 8003e0e:	f04f 0200 	mov.w	r2, #0
 8003e12:	f04f 0300 	mov.w	r3, #0
 8003e16:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8003e1a:	4648      	mov	r0, r9
 8003e1c:	00c3      	lsls	r3, r0, #3
 8003e1e:	4640      	mov	r0, r8
 8003e20:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003e24:	4640      	mov	r0, r8
 8003e26:	00c2      	lsls	r2, r0, #3
 8003e28:	b28b      	uxth	r3, r1
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	60bb      	str	r3, [r7, #8]
 8003e2e:	60fa      	str	r2, [r7, #12]
 8003e30:	f04f 0200 	mov.w	r2, #0
 8003e34:	f04f 0300 	mov.w	r3, #0
 8003e38:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8003e3c:	4648      	mov	r0, r9
 8003e3e:	00c3      	lsls	r3, r0, #3
 8003e40:	4640      	mov	r0, r8
 8003e42:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003e46:	4640      	mov	r0, r8
 8003e48:	00c2      	lsls	r2, r0, #3
 8003e4a:	460b      	mov	r3, r1
 8003e4c:	3307      	adds	r3, #7
 8003e4e:	08db      	lsrs	r3, r3, #3
 8003e50:	00db      	lsls	r3, r3, #3
 8003e52:	ebad 0d03 	sub.w	sp, sp, r3
 8003e56:	ab12      	add	r3, sp, #72	; 0x48
 8003e58:	3300      	adds	r3, #0
 8003e5a:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
	uint8_t *pointerArr[maxObjects];
 8003e5e:	f8b7 126a 	ldrh.w	r1, [r7, #618]	; 0x26a
 8003e62:	460b      	mov	r3, r1
 8003e64:	3b01      	subs	r3, #1
 8003e66:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8003e6a:	b28b      	uxth	r3, r1
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	603b      	str	r3, [r7, #0]
 8003e70:	607a      	str	r2, [r7, #4]
 8003e72:	f04f 0200 	mov.w	r2, #0
 8003e76:	f04f 0300 	mov.w	r3, #0
 8003e7a:	e9d7 8900 	ldrd	r8, r9, [r7]
 8003e7e:	4648      	mov	r0, r9
 8003e80:	0143      	lsls	r3, r0, #5
 8003e82:	4640      	mov	r0, r8
 8003e84:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003e88:	4640      	mov	r0, r8
 8003e8a:	0142      	lsls	r2, r0, #5
 8003e8c:	b28b      	uxth	r3, r1
 8003e8e:	2200      	movs	r2, #0
 8003e90:	461d      	mov	r5, r3
 8003e92:	4616      	mov	r6, r2
 8003e94:	f04f 0200 	mov.w	r2, #0
 8003e98:	f04f 0300 	mov.w	r3, #0
 8003e9c:	0173      	lsls	r3, r6, #5
 8003e9e:	ea43 63d5 	orr.w	r3, r3, r5, lsr #27
 8003ea2:	016a      	lsls	r2, r5, #5
 8003ea4:	460b      	mov	r3, r1
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	3307      	adds	r3, #7
 8003eaa:	08db      	lsrs	r3, r3, #3
 8003eac:	00db      	lsls	r3, r3, #3
 8003eae:	ebad 0d03 	sub.w	sp, sp, r3
 8003eb2:	ab12      	add	r3, sp, #72	; 0x48
 8003eb4:	3303      	adds	r3, #3
 8003eb6:	089b      	lsrs	r3, r3, #2
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250

	char str[] = "You fight \nlike a dairy\nfarmer!";
 8003ebe:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8003ec2:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8003ec6:	4a30      	ldr	r2, [pc, #192]	; (8003f88 <main+0x3a4>)
 8003ec8:	461c      	mov	r4, r3
 8003eca:	4615      	mov	r5, r2
 8003ecc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ece:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ed0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003ed4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	drawStringToLcd5x7(100, 20, 5, 0xAA, 0, 0xFF, 3, 5, str);
 8003ed8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003edc:	9304      	str	r3, [sp, #16]
 8003ede:	2305      	movs	r3, #5
 8003ee0:	9303      	str	r3, [sp, #12]
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	9302      	str	r3, [sp, #8]
 8003ee6:	23ff      	movs	r3, #255	; 0xff
 8003ee8:	9301      	str	r3, [sp, #4]
 8003eea:	2300      	movs	r3, #0
 8003eec:	9300      	str	r3, [sp, #0]
 8003eee:	23aa      	movs	r3, #170	; 0xaa
 8003ef0:	2205      	movs	r2, #5
 8003ef2:	2114      	movs	r1, #20
 8003ef4:	2064      	movs	r0, #100	; 0x64
 8003ef6:	f000 fd9a 	bl	8004a2e <drawStringToLcd5x7>

	while (1)
	{

		loopNumber++;
 8003efa:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8003efe:	3301      	adds	r3, #1
 8003f00:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
		int configResult = 1; //1 = no data on uart
 8003f04:	2301      	movs	r3, #1
 8003f06:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
		if(loopNumber % 6000000 == 0){
 8003f0a:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 8003f0e:	4b1f      	ldr	r3, [pc, #124]	; (8003f8c <main+0x3a8>)
 8003f10:	fb83 1302 	smull	r1, r3, r3, r2
 8003f14:	14d9      	asrs	r1, r3, #19
 8003f16:	17d3      	asrs	r3, r2, #31
 8003f18:	1acb      	subs	r3, r1, r3
 8003f1a:	491d      	ldr	r1, [pc, #116]	; (8003f90 <main+0x3ac>)
 8003f1c:	fb01 f303 	mul.w	r3, r1, r3
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d103      	bne.n	8003f2e <main+0x34a>
			 configResult = configFromUart(); //check if there's incoming data on config uart, if yes, attempt to read configuration
 8003f26:	f7fd fe63 	bl	8001bf0 <configFromUart>
 8003f2a:	f8c7 027c 	str.w	r0, [r7, #636]	; 0x27c
		}

		//redraw display
		if(notYetDrawnFlag || configResult != 1){
 8003f2e:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d103      	bne.n	8003f3e <main+0x35a>
 8003f36:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d078      	beq.n	8004030 <main+0x44c>
			notYetDrawnFlag = 0;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	f8c7 3278 	str.w	r3, [r7, #632]	; 0x278
			readGeneralConfig(&gConf);
 8003f44:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f7ff f8d7 	bl	80030fc <readGeneralConfig>
			printf("Something changed. Redrawing display and updating bitmap list.\n\r");
 8003f4e:	4811      	ldr	r0, [pc, #68]	; (8003f94 <main+0x3b0>)
 8003f50:	f005 fcf8 	bl	8009944 <iprintf>
			readBitmapList(&globalBitmapList);
 8003f54:	4810      	ldr	r0, [pc, #64]	; (8003f98 <main+0x3b4>)
 8003f56:	f7ff f8f5 	bl	8003144 <readBitmapList>
			//printAllScreens(gConf);
			int objectsRead = 0;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
			currentScreen = 0;
 8003f60:	2300      	movs	r3, #0
 8003f62:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
			if(currentScreen < gConf.totalScreens){
 8003f66:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8003f6a:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	461a      	mov	r2, r3
 8003f72:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 8003f76:	4293      	cmp	r3, r2
 8003f78:	da2c      	bge.n	8003fd4 <main+0x3f0>
 8003f7a:	e00f      	b.n	8003f9c <main+0x3b8>
 8003f7c:	2000205c 	.word	0x2000205c
 8003f80:	0800b46c 	.word	0x0800b46c
 8003f84:	0800b484 	.word	0x0800b484
 8003f88:	0800b4e0 	.word	0x0800b4e0
 8003f8c:	165e9f81 	.word	0x165e9f81
 8003f90:	005b8d80 	.word	0x005b8d80
 8003f94:	0800b49c 	.word	0x0800b49c
 8003f98:	20002228 	.word	0x20002228
				objectsRead = openScreen(gConf.screenSectors[currentScreen], &screenHeader, objArr, dataArr, pointerArr, maxData, maxObjects);
 8003f9c:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8003fa0:	f5a3 720f 	sub.w	r2, r3, #572	; 0x23c
 8003fa4:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 8003fa8:	005b      	lsls	r3, r3, #1
 8003faa:	4413      	add	r3, r2
 8003fac:	8858      	ldrh	r0, [r3, #2]
 8003fae:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8003fb2:	f8b7 326a 	ldrh.w	r3, [r7, #618]	; 0x26a
 8003fb6:	9302      	str	r3, [sp, #8]
 8003fb8:	f8b7 3268 	ldrh.w	r3, [r7, #616]	; 0x268
 8003fbc:	9301      	str	r3, [sp, #4]
 8003fbe:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8003fc2:	9300      	str	r3, [sp, #0]
 8003fc4:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8003fc8:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 8003fcc:	f7ff f8e0 	bl	8003190 <openScreen>
 8003fd0:	f8c7 0280 	str.w	r0, [r7, #640]	; 0x280
			}
			int i;
			for(i = 0; i<objectsRead; i++){
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8003fda:	e023      	b.n	8004024 <main+0x440>
				drawObjectToLcd(objArr[i], pointerArr[i], 0);
 8003fdc:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8003fe0:	f8d7 2284 	ldr.w	r2, [r7, #644]	; 0x284
 8003fe4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003fe8:	f8d7 0260 	ldr.w	r0, [r7, #608]	; 0x260
 8003fec:	f8d7 2284 	ldr.w	r2, [r7, #644]	; 0x284
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	00db      	lsls	r3, r3, #3
 8003ff4:	1a9b      	subs	r3, r3, r2
 8003ff6:	005b      	lsls	r3, r3, #1
 8003ff8:	4403      	add	r3, r0
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	9201      	str	r2, [sp, #4]
 8003ffe:	9100      	str	r1, [sp, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	4610      	mov	r0, r2
 8004004:	685a      	ldr	r2, [r3, #4]
 8004006:	4611      	mov	r1, r2
 8004008:	689a      	ldr	r2, [r3, #8]
 800400a:	4614      	mov	r4, r2
 800400c:	899a      	ldrh	r2, [r3, #12]
 800400e:	2300      	movs	r3, #0
 8004010:	f362 030f 	bfi	r3, r2, #0, #16
 8004014:	4622      	mov	r2, r4
 8004016:	f000 faf9 	bl	800460c <drawObjectToLcd>
			for(i = 0; i<objectsRead; i++){
 800401a:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 800401e:	3301      	adds	r3, #1
 8004020:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8004024:	f8d7 2284 	ldr.w	r2, [r7, #644]	; 0x284
 8004028:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 800402c:	429a      	cmp	r2, r3
 800402e:	dbd5      	blt.n	8003fdc <main+0x3f8>
			}
		}



		touch_periodic_process();
 8004030:	f7fd fad4 	bl	80015dc <touch_periodic_process>
	{
 8004034:	e761      	b.n	8003efa <main+0x316>
 8004036:	bf00      	nop

08004038 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b094      	sub	sp, #80	; 0x50
 800403c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800403e:	f107 0320 	add.w	r3, r7, #32
 8004042:	2230      	movs	r2, #48	; 0x30
 8004044:	2100      	movs	r1, #0
 8004046:	4618      	mov	r0, r3
 8004048:	f005 fc74 	bl	8009934 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800404c:	f107 030c 	add.w	r3, r7, #12
 8004050:	2200      	movs	r2, #0
 8004052:	601a      	str	r2, [r3, #0]
 8004054:	605a      	str	r2, [r3, #4]
 8004056:	609a      	str	r2, [r3, #8]
 8004058:	60da      	str	r2, [r3, #12]
 800405a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800405c:	2300      	movs	r3, #0
 800405e:	60bb      	str	r3, [r7, #8]
 8004060:	4b28      	ldr	r3, [pc, #160]	; (8004104 <SystemClock_Config+0xcc>)
 8004062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004064:	4a27      	ldr	r2, [pc, #156]	; (8004104 <SystemClock_Config+0xcc>)
 8004066:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800406a:	6413      	str	r3, [r2, #64]	; 0x40
 800406c:	4b25      	ldr	r3, [pc, #148]	; (8004104 <SystemClock_Config+0xcc>)
 800406e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004070:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004074:	60bb      	str	r3, [r7, #8]
 8004076:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004078:	2300      	movs	r3, #0
 800407a:	607b      	str	r3, [r7, #4]
 800407c:	4b22      	ldr	r3, [pc, #136]	; (8004108 <SystemClock_Config+0xd0>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a21      	ldr	r2, [pc, #132]	; (8004108 <SystemClock_Config+0xd0>)
 8004082:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004086:	6013      	str	r3, [r2, #0]
 8004088:	4b1f      	ldr	r3, [pc, #124]	; (8004108 <SystemClock_Config+0xd0>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004090:	607b      	str	r3, [r7, #4]
 8004092:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004094:	2301      	movs	r3, #1
 8004096:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004098:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800409c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800409e:	2302      	movs	r3, #2
 80040a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80040a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80040a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80040a8:	2308      	movs	r3, #8
 80040aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80040ac:	23a8      	movs	r3, #168	; 0xa8
 80040ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80040b0:	2302      	movs	r3, #2
 80040b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80040b4:	2304      	movs	r3, #4
 80040b6:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80040b8:	f107 0320 	add.w	r3, r7, #32
 80040bc:	4618      	mov	r0, r3
 80040be:	f003 f81d 	bl	80070fc <HAL_RCC_OscConfig>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d001      	beq.n	80040cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80040c8:	f000 fa9a 	bl	8004600 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80040cc:	230f      	movs	r3, #15
 80040ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80040d0:	2302      	movs	r3, #2
 80040d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80040d4:	2300      	movs	r3, #0
 80040d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80040d8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80040dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80040de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80040e4:	f107 030c 	add.w	r3, r7, #12
 80040e8:	2105      	movs	r1, #5
 80040ea:	4618      	mov	r0, r3
 80040ec:	f003 fa7e 	bl	80075ec <HAL_RCC_ClockConfig>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d001      	beq.n	80040fa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80040f6:	f000 fa83 	bl	8004600 <Error_Handler>
  }
}
 80040fa:	bf00      	nop
 80040fc:	3750      	adds	r7, #80	; 0x50
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	40023800 	.word	0x40023800
 8004108:	40007000 	.word	0x40007000

0800410c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004110:	4b16      	ldr	r3, [pc, #88]	; (800416c <MX_I2C1_Init+0x60>)
 8004112:	4a17      	ldr	r2, [pc, #92]	; (8004170 <MX_I2C1_Init+0x64>)
 8004114:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8004116:	4b15      	ldr	r3, [pc, #84]	; (800416c <MX_I2C1_Init+0x60>)
 8004118:	4a16      	ldr	r2, [pc, #88]	; (8004174 <MX_I2C1_Init+0x68>)
 800411a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800411c:	4b13      	ldr	r3, [pc, #76]	; (800416c <MX_I2C1_Init+0x60>)
 800411e:	2200      	movs	r2, #0
 8004120:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004122:	4b12      	ldr	r3, [pc, #72]	; (800416c <MX_I2C1_Init+0x60>)
 8004124:	2200      	movs	r2, #0
 8004126:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004128:	4b10      	ldr	r3, [pc, #64]	; (800416c <MX_I2C1_Init+0x60>)
 800412a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800412e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004130:	4b0e      	ldr	r3, [pc, #56]	; (800416c <MX_I2C1_Init+0x60>)
 8004132:	2200      	movs	r2, #0
 8004134:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004136:	4b0d      	ldr	r3, [pc, #52]	; (800416c <MX_I2C1_Init+0x60>)
 8004138:	2200      	movs	r2, #0
 800413a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800413c:	4b0b      	ldr	r3, [pc, #44]	; (800416c <MX_I2C1_Init+0x60>)
 800413e:	2200      	movs	r2, #0
 8004140:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004142:	4b0a      	ldr	r3, [pc, #40]	; (800416c <MX_I2C1_Init+0x60>)
 8004144:	2200      	movs	r2, #0
 8004146:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004148:	4808      	ldr	r0, [pc, #32]	; (800416c <MX_I2C1_Init+0x60>)
 800414a:	f001 fe97 	bl	8005e7c <HAL_I2C_Init>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d001      	beq.n	8004158 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004154:	f000 fa54 	bl	8004600 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  __HAL_I2C_ENABLE(&hi2c1);
 8004158:	4b04      	ldr	r3, [pc, #16]	; (800416c <MX_I2C1_Init+0x60>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	4b03      	ldr	r3, [pc, #12]	; (800416c <MX_I2C1_Init+0x60>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f042 0201 	orr.w	r2, r2, #1
 8004166:	601a      	str	r2, [r3, #0]
  /* USER CODE END I2C1_Init 2 */

}
 8004168:	bf00      	nop
 800416a:	bd80      	pop	{r7, pc}
 800416c:	2000205c 	.word	0x2000205c
 8004170:	40005400 	.word	0x40005400
 8004174:	000186a0 	.word	0x000186a0

08004178 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800417c:	4b1b      	ldr	r3, [pc, #108]	; (80041ec <MX_SPI1_Init+0x74>)
 800417e:	4a1c      	ldr	r2, [pc, #112]	; (80041f0 <MX_SPI1_Init+0x78>)
 8004180:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004182:	4b1a      	ldr	r3, [pc, #104]	; (80041ec <MX_SPI1_Init+0x74>)
 8004184:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004188:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800418a:	4b18      	ldr	r3, [pc, #96]	; (80041ec <MX_SPI1_Init+0x74>)
 800418c:	2200      	movs	r2, #0
 800418e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004190:	4b16      	ldr	r3, [pc, #88]	; (80041ec <MX_SPI1_Init+0x74>)
 8004192:	2200      	movs	r2, #0
 8004194:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8004196:	4b15      	ldr	r3, [pc, #84]	; (80041ec <MX_SPI1_Init+0x74>)
 8004198:	2202      	movs	r2, #2
 800419a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800419c:	4b13      	ldr	r3, [pc, #76]	; (80041ec <MX_SPI1_Init+0x74>)
 800419e:	2201      	movs	r2, #1
 80041a0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80041a2:	4b12      	ldr	r3, [pc, #72]	; (80041ec <MX_SPI1_Init+0x74>)
 80041a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041a8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80041aa:	4b10      	ldr	r3, [pc, #64]	; (80041ec <MX_SPI1_Init+0x74>)
 80041ac:	2200      	movs	r2, #0
 80041ae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80041b0:	4b0e      	ldr	r3, [pc, #56]	; (80041ec <MX_SPI1_Init+0x74>)
 80041b2:	2200      	movs	r2, #0
 80041b4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80041b6:	4b0d      	ldr	r3, [pc, #52]	; (80041ec <MX_SPI1_Init+0x74>)
 80041b8:	2200      	movs	r2, #0
 80041ba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041bc:	4b0b      	ldr	r3, [pc, #44]	; (80041ec <MX_SPI1_Init+0x74>)
 80041be:	2200      	movs	r2, #0
 80041c0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80041c2:	4b0a      	ldr	r3, [pc, #40]	; (80041ec <MX_SPI1_Init+0x74>)
 80041c4:	220a      	movs	r2, #10
 80041c6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80041c8:	4808      	ldr	r0, [pc, #32]	; (80041ec <MX_SPI1_Init+0x74>)
 80041ca:	f003 fc2d 	bl	8007a28 <HAL_SPI_Init>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d001      	beq.n	80041d8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80041d4:	f000 fa14 	bl	8004600 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  __HAL_SPI_ENABLE(&hspi1);
 80041d8:	4b04      	ldr	r3, [pc, #16]	; (80041ec <MX_SPI1_Init+0x74>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	4b03      	ldr	r3, [pc, #12]	; (80041ec <MX_SPI1_Init+0x74>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041e6:	601a      	str	r2, [r3, #0]
  /* USER CODE END SPI1_Init 2 */

}
 80041e8:	bf00      	nop
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	200020b0 	.word	0x200020b0
 80041f0:	40013000 	.word	0x40013000

080041f4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b092      	sub	sp, #72	; 0x48
 80041f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80041fa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80041fe:	2200      	movs	r2, #0
 8004200:	601a      	str	r2, [r3, #0]
 8004202:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004204:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004208:	2200      	movs	r2, #0
 800420a:	601a      	str	r2, [r3, #0]
 800420c:	605a      	str	r2, [r3, #4]
 800420e:	609a      	str	r2, [r3, #8]
 8004210:	60da      	str	r2, [r3, #12]
 8004212:	611a      	str	r2, [r3, #16]
 8004214:	615a      	str	r2, [r3, #20]
 8004216:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004218:	1d3b      	adds	r3, r7, #4
 800421a:	2220      	movs	r2, #32
 800421c:	2100      	movs	r1, #0
 800421e:	4618      	mov	r0, r3
 8004220:	f005 fb88 	bl	8009934 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004224:	4b32      	ldr	r3, [pc, #200]	; (80042f0 <MX_TIM1_Init+0xfc>)
 8004226:	4a33      	ldr	r2, [pc, #204]	; (80042f4 <MX_TIM1_Init+0x100>)
 8004228:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800422a:	4b31      	ldr	r3, [pc, #196]	; (80042f0 <MX_TIM1_Init+0xfc>)
 800422c:	2200      	movs	r2, #0
 800422e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004230:	4b2f      	ldr	r3, [pc, #188]	; (80042f0 <MX_TIM1_Init+0xfc>)
 8004232:	2200      	movs	r2, #0
 8004234:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8004236:	4b2e      	ldr	r3, [pc, #184]	; (80042f0 <MX_TIM1_Init+0xfc>)
 8004238:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800423c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800423e:	4b2c      	ldr	r3, [pc, #176]	; (80042f0 <MX_TIM1_Init+0xfc>)
 8004240:	2200      	movs	r2, #0
 8004242:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004244:	4b2a      	ldr	r3, [pc, #168]	; (80042f0 <MX_TIM1_Init+0xfc>)
 8004246:	2200      	movs	r2, #0
 8004248:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800424a:	4b29      	ldr	r3, [pc, #164]	; (80042f0 <MX_TIM1_Init+0xfc>)
 800424c:	2200      	movs	r2, #0
 800424e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004250:	4827      	ldr	r0, [pc, #156]	; (80042f0 <MX_TIM1_Init+0xfc>)
 8004252:	f003 fcba 	bl	8007bca <HAL_TIM_PWM_Init>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d001      	beq.n	8004260 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 800425c:	f000 f9d0 	bl	8004600 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004260:	2300      	movs	r3, #0
 8004262:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004264:	2300      	movs	r3, #0
 8004266:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004268:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800426c:	4619      	mov	r1, r3
 800426e:	4820      	ldr	r0, [pc, #128]	; (80042f0 <MX_TIM1_Init+0xfc>)
 8004270:	f004 f96a 	bl	8008548 <HAL_TIMEx_MasterConfigSynchronization>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d001      	beq.n	800427e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800427a:	f000 f9c1 	bl	8004600 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800427e:	2360      	movs	r3, #96	; 0x60
 8004280:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 65535;
 8004282:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004286:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004288:	2300      	movs	r3, #0
 800428a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800428c:	2300      	movs	r3, #0
 800428e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004290:	2300      	movs	r3, #0
 8004292:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004294:	2300      	movs	r3, #0
 8004296:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004298:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800429c:	220c      	movs	r2, #12
 800429e:	4619      	mov	r1, r3
 80042a0:	4813      	ldr	r0, [pc, #76]	; (80042f0 <MX_TIM1_Init+0xfc>)
 80042a2:	f003 fe19 	bl	8007ed8 <HAL_TIM_PWM_ConfigChannel>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d001      	beq.n	80042b0 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 80042ac:	f000 f9a8 	bl	8004600 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80042b0:	2300      	movs	r3, #0
 80042b2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80042b4:	2300      	movs	r3, #0
 80042b6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80042b8:	2300      	movs	r3, #0
 80042ba:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80042bc:	2300      	movs	r3, #0
 80042be:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80042c0:	2300      	movs	r3, #0
 80042c2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80042c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80042c8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80042ca:	2300      	movs	r3, #0
 80042cc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80042ce:	1d3b      	adds	r3, r7, #4
 80042d0:	4619      	mov	r1, r3
 80042d2:	4807      	ldr	r0, [pc, #28]	; (80042f0 <MX_TIM1_Init+0xfc>)
 80042d4:	f004 f9b4 	bl	8008640 <HAL_TIMEx_ConfigBreakDeadTime>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d001      	beq.n	80042e2 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 80042de:	f000 f98f 	bl	8004600 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80042e2:	4803      	ldr	r0, [pc, #12]	; (80042f0 <MX_TIM1_Init+0xfc>)
 80042e4:	f000 fd98 	bl	8004e18 <HAL_TIM_MspPostInit>

}
 80042e8:	bf00      	nop
 80042ea:	3748      	adds	r7, #72	; 0x48
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}
 80042f0:	20002108 	.word	0x20002108
 80042f4:	40010000 	.word	0x40010000

080042f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80042fc:	4b15      	ldr	r3, [pc, #84]	; (8004354 <MX_USART1_UART_Init+0x5c>)
 80042fe:	4a16      	ldr	r2, [pc, #88]	; (8004358 <MX_USART1_UART_Init+0x60>)
 8004300:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004302:	4b14      	ldr	r3, [pc, #80]	; (8004354 <MX_USART1_UART_Init+0x5c>)
 8004304:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004308:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800430a:	4b12      	ldr	r3, [pc, #72]	; (8004354 <MX_USART1_UART_Init+0x5c>)
 800430c:	2200      	movs	r2, #0
 800430e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004310:	4b10      	ldr	r3, [pc, #64]	; (8004354 <MX_USART1_UART_Init+0x5c>)
 8004312:	2200      	movs	r2, #0
 8004314:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004316:	4b0f      	ldr	r3, [pc, #60]	; (8004354 <MX_USART1_UART_Init+0x5c>)
 8004318:	2200      	movs	r2, #0
 800431a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800431c:	4b0d      	ldr	r3, [pc, #52]	; (8004354 <MX_USART1_UART_Init+0x5c>)
 800431e:	220c      	movs	r2, #12
 8004320:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004322:	4b0c      	ldr	r3, [pc, #48]	; (8004354 <MX_USART1_UART_Init+0x5c>)
 8004324:	2200      	movs	r2, #0
 8004326:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004328:	4b0a      	ldr	r3, [pc, #40]	; (8004354 <MX_USART1_UART_Init+0x5c>)
 800432a:	2200      	movs	r2, #0
 800432c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800432e:	4809      	ldr	r0, [pc, #36]	; (8004354 <MX_USART1_UART_Init+0x5c>)
 8004330:	f004 f9d8 	bl	80086e4 <HAL_UART_Init>
 8004334:	4603      	mov	r3, r0
 8004336:	2b00      	cmp	r3, #0
 8004338:	d001      	beq.n	800433e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800433a:	f000 f961 	bl	8004600 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE); //turn on rx interrupt forever
 800433e:	4b05      	ldr	r3, [pc, #20]	; (8004354 <MX_USART1_UART_Init+0x5c>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68da      	ldr	r2, [r3, #12]
 8004344:	4b03      	ldr	r3, [pc, #12]	; (8004354 <MX_USART1_UART_Init+0x5c>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f042 0220 	orr.w	r2, r2, #32
 800434c:	60da      	str	r2, [r3, #12]
  /* USER CODE END USART1_Init 2 */

}
 800434e:	bf00      	nop
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	20002150 	.word	0x20002150
 8004358:	40011000 	.word	0x40011000

0800435c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004360:	4b15      	ldr	r3, [pc, #84]	; (80043b8 <MX_USART2_UART_Init+0x5c>)
 8004362:	4a16      	ldr	r2, [pc, #88]	; (80043bc <MX_USART2_UART_Init+0x60>)
 8004364:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004366:	4b14      	ldr	r3, [pc, #80]	; (80043b8 <MX_USART2_UART_Init+0x5c>)
 8004368:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800436c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800436e:	4b12      	ldr	r3, [pc, #72]	; (80043b8 <MX_USART2_UART_Init+0x5c>)
 8004370:	2200      	movs	r2, #0
 8004372:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004374:	4b10      	ldr	r3, [pc, #64]	; (80043b8 <MX_USART2_UART_Init+0x5c>)
 8004376:	2200      	movs	r2, #0
 8004378:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800437a:	4b0f      	ldr	r3, [pc, #60]	; (80043b8 <MX_USART2_UART_Init+0x5c>)
 800437c:	2200      	movs	r2, #0
 800437e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004380:	4b0d      	ldr	r3, [pc, #52]	; (80043b8 <MX_USART2_UART_Init+0x5c>)
 8004382:	220c      	movs	r2, #12
 8004384:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004386:	4b0c      	ldr	r3, [pc, #48]	; (80043b8 <MX_USART2_UART_Init+0x5c>)
 8004388:	2200      	movs	r2, #0
 800438a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800438c:	4b0a      	ldr	r3, [pc, #40]	; (80043b8 <MX_USART2_UART_Init+0x5c>)
 800438e:	2200      	movs	r2, #0
 8004390:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004392:	4809      	ldr	r0, [pc, #36]	; (80043b8 <MX_USART2_UART_Init+0x5c>)
 8004394:	f004 f9a6 	bl	80086e4 <HAL_UART_Init>
 8004398:	4603      	mov	r3, r0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d001      	beq.n	80043a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800439e:	f000 f92f 	bl	8004600 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE); //turn on rx interrupt forever
 80043a2:	4b05      	ldr	r3, [pc, #20]	; (80043b8 <MX_USART2_UART_Init+0x5c>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68da      	ldr	r2, [r3, #12]
 80043a8:	4b03      	ldr	r3, [pc, #12]	; (80043b8 <MX_USART2_UART_Init+0x5c>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f042 0220 	orr.w	r2, r2, #32
 80043b0:	60da      	str	r2, [r3, #12]
  /* USER CODE END USART2_Init 2 */

}
 80043b2:	bf00      	nop
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	20002194 	.word	0x20002194
 80043bc:	40004400 	.word	0x40004400

080043c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b08a      	sub	sp, #40	; 0x28
 80043c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043c6:	f107 0314 	add.w	r3, r7, #20
 80043ca:	2200      	movs	r2, #0
 80043cc:	601a      	str	r2, [r3, #0]
 80043ce:	605a      	str	r2, [r3, #4]
 80043d0:	609a      	str	r2, [r3, #8]
 80043d2:	60da      	str	r2, [r3, #12]
 80043d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80043d6:	2300      	movs	r3, #0
 80043d8:	613b      	str	r3, [r7, #16]
 80043da:	4b49      	ldr	r3, [pc, #292]	; (8004500 <MX_GPIO_Init+0x140>)
 80043dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043de:	4a48      	ldr	r2, [pc, #288]	; (8004500 <MX_GPIO_Init+0x140>)
 80043e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043e4:	6313      	str	r3, [r2, #48]	; 0x30
 80043e6:	4b46      	ldr	r3, [pc, #280]	; (8004500 <MX_GPIO_Init+0x140>)
 80043e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ee:	613b      	str	r3, [r7, #16]
 80043f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80043f2:	2300      	movs	r3, #0
 80043f4:	60fb      	str	r3, [r7, #12]
 80043f6:	4b42      	ldr	r3, [pc, #264]	; (8004500 <MX_GPIO_Init+0x140>)
 80043f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043fa:	4a41      	ldr	r2, [pc, #260]	; (8004500 <MX_GPIO_Init+0x140>)
 80043fc:	f043 0301 	orr.w	r3, r3, #1
 8004400:	6313      	str	r3, [r2, #48]	; 0x30
 8004402:	4b3f      	ldr	r3, [pc, #252]	; (8004500 <MX_GPIO_Init+0x140>)
 8004404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004406:	f003 0301 	and.w	r3, r3, #1
 800440a:	60fb      	str	r3, [r7, #12]
 800440c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800440e:	2300      	movs	r3, #0
 8004410:	60bb      	str	r3, [r7, #8]
 8004412:	4b3b      	ldr	r3, [pc, #236]	; (8004500 <MX_GPIO_Init+0x140>)
 8004414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004416:	4a3a      	ldr	r2, [pc, #232]	; (8004500 <MX_GPIO_Init+0x140>)
 8004418:	f043 0310 	orr.w	r3, r3, #16
 800441c:	6313      	str	r3, [r2, #48]	; 0x30
 800441e:	4b38      	ldr	r3, [pc, #224]	; (8004500 <MX_GPIO_Init+0x140>)
 8004420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004422:	f003 0310 	and.w	r3, r3, #16
 8004426:	60bb      	str	r3, [r7, #8]
 8004428:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800442a:	2300      	movs	r3, #0
 800442c:	607b      	str	r3, [r7, #4]
 800442e:	4b34      	ldr	r3, [pc, #208]	; (8004500 <MX_GPIO_Init+0x140>)
 8004430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004432:	4a33      	ldr	r2, [pc, #204]	; (8004500 <MX_GPIO_Init+0x140>)
 8004434:	f043 0302 	orr.w	r3, r3, #2
 8004438:	6313      	str	r3, [r2, #48]	; 0x30
 800443a:	4b31      	ldr	r3, [pc, #196]	; (8004500 <MX_GPIO_Init+0x140>)
 800443c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800443e:	f003 0302 	and.w	r3, r3, #2
 8004442:	607b      	str	r3, [r7, #4]
 8004444:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004446:	2300      	movs	r3, #0
 8004448:	603b      	str	r3, [r7, #0]
 800444a:	4b2d      	ldr	r3, [pc, #180]	; (8004500 <MX_GPIO_Init+0x140>)
 800444c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800444e:	4a2c      	ldr	r2, [pc, #176]	; (8004500 <MX_GPIO_Init+0x140>)
 8004450:	f043 0308 	orr.w	r3, r3, #8
 8004454:	6313      	str	r3, [r2, #48]	; 0x30
 8004456:	4b2a      	ldr	r3, [pc, #168]	; (8004500 <MX_GPIO_Init+0x140>)
 8004458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800445a:	f003 0308 	and.w	r3, r3, #8
 800445e:	603b      	str	r3, [r7, #0]
 8004460:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LCD_RES_Pin, GPIO_PIN_RESET);
 8004462:	2200      	movs	r2, #0
 8004464:	f241 0110 	movw	r1, #4112	; 0x1010
 8004468:	4826      	ldr	r0, [pc, #152]	; (8004504 <MX_GPIO_Init+0x144>)
 800446a:	f001 fcd5 	bl	8005e18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_5, GPIO_PIN_RESET);
 800446e:	2200      	movs	r2, #0
 8004470:	2128      	movs	r1, #40	; 0x28
 8004472:	4825      	ldr	r0, [pc, #148]	; (8004508 <MX_GPIO_Init+0x148>)
 8004474:	f001 fcd0 	bl	8005e18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004478:	2310      	movs	r3, #16
 800447a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800447c:	2301      	movs	r3, #1
 800447e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004480:	2300      	movs	r3, #0
 8004482:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004484:	2300      	movs	r3, #0
 8004486:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004488:	f107 0314 	add.w	r3, r7, #20
 800448c:	4619      	mov	r1, r3
 800448e:	481d      	ldr	r0, [pc, #116]	; (8004504 <MX_GPIO_Init+0x144>)
 8004490:	f001 fb26 	bl	8005ae0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RES_Pin */
  GPIO_InitStruct.Pin = LCD_RES_Pin;
 8004494:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004498:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800449a:	2301      	movs	r3, #1
 800449c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800449e:	2301      	movs	r3, #1
 80044a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044a2:	2303      	movs	r3, #3
 80044a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_RES_GPIO_Port, &GPIO_InitStruct);
 80044a6:	f107 0314 	add.w	r3, r7, #20
 80044aa:	4619      	mov	r1, r3
 80044ac:	4815      	ldr	r0, [pc, #84]	; (8004504 <MX_GPIO_Init+0x144>)
 80044ae:	f001 fb17 	bl	8005ae0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80044b2:	2328      	movs	r3, #40	; 0x28
 80044b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044b6:	2301      	movs	r3, #1
 80044b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ba:	2300      	movs	r3, #0
 80044bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044be:	2300      	movs	r3, #0
 80044c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044c2:	f107 0314 	add.w	r3, r7, #20
 80044c6:	4619      	mov	r1, r3
 80044c8:	480f      	ldr	r0, [pc, #60]	; (8004508 <MX_GPIO_Init+0x148>)
 80044ca:	f001 fb09 	bl	8005ae0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80044ce:	2310      	movs	r3, #16
 80044d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80044d2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80044d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80044d8:	2301      	movs	r3, #1
 80044da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044dc:	f107 0314 	add.w	r3, r7, #20
 80044e0:	4619      	mov	r1, r3
 80044e2:	4809      	ldr	r0, [pc, #36]	; (8004508 <MX_GPIO_Init+0x148>)
 80044e4:	f001 fafc 	bl	8005ae0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80044e8:	2200      	movs	r2, #0
 80044ea:	2100      	movs	r1, #0
 80044ec:	200a      	movs	r0, #10
 80044ee:	f001 fa2e 	bl	800594e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80044f2:	200a      	movs	r0, #10
 80044f4:	f001 fa47 	bl	8005986 <HAL_NVIC_EnableIRQ>

}
 80044f8:	bf00      	nop
 80044fa:	3728      	adds	r7, #40	; 0x28
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	40023800 	.word	0x40023800
 8004504:	40020000 	.word	0x40020000
 8004508:	40020400 	.word	0x40020400

0800450c <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b08e      	sub	sp, #56	; 0x38
 8004510:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8004512:	f107 031c 	add.w	r3, r7, #28
 8004516:	2200      	movs	r2, #0
 8004518:	601a      	str	r2, [r3, #0]
 800451a:	605a      	str	r2, [r3, #4]
 800451c:	609a      	str	r2, [r3, #8]
 800451e:	60da      	str	r2, [r3, #12]
 8004520:	611a      	str	r2, [r3, #16]
 8004522:	615a      	str	r2, [r3, #20]
 8004524:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8004526:	463b      	mov	r3, r7
 8004528:	2200      	movs	r2, #0
 800452a:	601a      	str	r2, [r3, #0]
 800452c:	605a      	str	r2, [r3, #4]
 800452e:	609a      	str	r2, [r3, #8]
 8004530:	60da      	str	r2, [r3, #12]
 8004532:	611a      	str	r2, [r3, #16]
 8004534:	615a      	str	r2, [r3, #20]
 8004536:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8004538:	4b2f      	ldr	r3, [pc, #188]	; (80045f8 <MX_FSMC_Init+0xec>)
 800453a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800453e:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8004540:	4b2d      	ldr	r3, [pc, #180]	; (80045f8 <MX_FSMC_Init+0xec>)
 8004542:	4a2e      	ldr	r2, [pc, #184]	; (80045fc <MX_FSMC_Init+0xf0>)
 8004544:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8004546:	4b2c      	ldr	r3, [pc, #176]	; (80045f8 <MX_FSMC_Init+0xec>)
 8004548:	2200      	movs	r2, #0
 800454a:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 800454c:	4b2a      	ldr	r3, [pc, #168]	; (80045f8 <MX_FSMC_Init+0xec>)
 800454e:	2200      	movs	r2, #0
 8004550:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8004552:	4b29      	ldr	r3, [pc, #164]	; (80045f8 <MX_FSMC_Init+0xec>)
 8004554:	2200      	movs	r2, #0
 8004556:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8004558:	4b27      	ldr	r3, [pc, #156]	; (80045f8 <MX_FSMC_Init+0xec>)
 800455a:	2210      	movs	r2, #16
 800455c:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800455e:	4b26      	ldr	r3, [pc, #152]	; (80045f8 <MX_FSMC_Init+0xec>)
 8004560:	2200      	movs	r2, #0
 8004562:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8004564:	4b24      	ldr	r3, [pc, #144]	; (80045f8 <MX_FSMC_Init+0xec>)
 8004566:	2200      	movs	r2, #0
 8004568:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800456a:	4b23      	ldr	r3, [pc, #140]	; (80045f8 <MX_FSMC_Init+0xec>)
 800456c:	2200      	movs	r2, #0
 800456e:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8004570:	4b21      	ldr	r3, [pc, #132]	; (80045f8 <MX_FSMC_Init+0xec>)
 8004572:	2200      	movs	r2, #0
 8004574:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8004576:	4b20      	ldr	r3, [pc, #128]	; (80045f8 <MX_FSMC_Init+0xec>)
 8004578:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800457c:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800457e:	4b1e      	ldr	r3, [pc, #120]	; (80045f8 <MX_FSMC_Init+0xec>)
 8004580:	2200      	movs	r2, #0
 8004582:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8004584:	4b1c      	ldr	r3, [pc, #112]	; (80045f8 <MX_FSMC_Init+0xec>)
 8004586:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800458a:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800458c:	4b1a      	ldr	r3, [pc, #104]	; (80045f8 <MX_FSMC_Init+0xec>)
 800458e:	2200      	movs	r2, #0
 8004590:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8004592:	4b19      	ldr	r3, [pc, #100]	; (80045f8 <MX_FSMC_Init+0xec>)
 8004594:	2200      	movs	r2, #0
 8004596:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8004598:	4b17      	ldr	r3, [pc, #92]	; (80045f8 <MX_FSMC_Init+0xec>)
 800459a:	2200      	movs	r2, #0
 800459c:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 800459e:	230f      	movs	r3, #15
 80045a0:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80045a2:	230f      	movs	r3, #15
 80045a4:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 40;
 80045a6:	2328      	movs	r3, #40	; 0x28
 80045a8:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 80045aa:	2300      	movs	r3, #0
 80045ac:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 80045ae:	2310      	movs	r3, #16
 80045b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 80045b2:	2311      	movs	r3, #17
 80045b4:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80045b6:	2300      	movs	r3, #0
 80045b8:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 2;
 80045ba:	2302      	movs	r3, #2
 80045bc:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 80045be:	230f      	movs	r3, #15
 80045c0:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 4;
 80045c2:	2304      	movs	r3, #4
 80045c4:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 80045c6:	2300      	movs	r3, #0
 80045c8:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 80045ca:	2310      	movs	r3, #16
 80045cc:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 80045ce:	2311      	movs	r3, #17
 80045d0:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 80045d2:	2300      	movs	r3, #0
 80045d4:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 80045d6:	463a      	mov	r2, r7
 80045d8:	f107 031c 	add.w	r3, r7, #28
 80045dc:	4619      	mov	r1, r3
 80045de:	4806      	ldr	r0, [pc, #24]	; (80045f8 <MX_FSMC_Init+0xec>)
 80045e0:	f003 faab 	bl	8007b3a <HAL_SRAM_Init>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d001      	beq.n	80045ee <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 80045ea:	f000 f809 	bl	8004600 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80045ee:	bf00      	nop
 80045f0:	3738      	adds	r7, #56	; 0x38
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	200021d8 	.word	0x200021d8
 80045fc:	a0000104 	.word	0xa0000104

08004600 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004600:	b480      	push	{r7}
 8004602:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004604:	b672      	cpsid	i
}
 8004606:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004608:	e7fe      	b.n	8004608 <Error_Handler+0x8>
	...

0800460c <drawObjectToLcd>:

#define MAX_BITMAP_DRAW_XSIZE 128
#define MAX_BITMAP_DRAW_YSIZE 128


int drawObjectToLcd(struct object o, uint8_t *data, int state){
 800460c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004610:	b0a7      	sub	sp, #156	; 0x9c
 8004612:	af06      	add	r7, sp, #24
 8004614:	f107 0608 	add.w	r6, r7, #8
 8004618:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
	char objName[30];
	objectTypeToString(o.objectType, objName);
 800461c:	7a3b      	ldrb	r3, [r7, #8]
 800461e:	f107 0220 	add.w	r2, r7, #32
 8004622:	4611      	mov	r1, r2
 8004624:	4618      	mov	r0, r3
 8004626:	f7ff f8db 	bl	80037e0 <objectTypeToString>

	int objectXSize = (o.xend - o.xstart);
 800462a:	8a3b      	ldrh	r3, [r7, #16]
 800462c:	461a      	mov	r2, r3
 800462e:	89bb      	ldrh	r3, [r7, #12]
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	673b      	str	r3, [r7, #112]	; 0x70
	int objectYSize = (o.yend - o.ystart);
 8004634:	8a7b      	ldrh	r3, [r7, #18]
 8004636:	461a      	mov	r2, r3
 8004638:	89fb      	ldrh	r3, [r7, #14]
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	66fb      	str	r3, [r7, #108]	; 0x6c

	printf("[OV] Drawing %s id %d \n\r", objName, o.objectId);
 800463e:	897b      	ldrh	r3, [r7, #10]
 8004640:	461a      	mov	r2, r3
 8004642:	f107 0320 	add.w	r3, r7, #32
 8004646:	4619      	mov	r1, r3
 8004648:	48b9      	ldr	r0, [pc, #740]	; (8004930 <drawObjectToLcd+0x324>)
 800464a:	f005 f97b 	bl	8009944 <iprintf>

	if(o.objectType == rectangle){
 800464e:	7a3b      	ldrb	r3, [r7, #8]
 8004650:	2b01      	cmp	r3, #1
 8004652:	d122      	bne.n	800469a <drawObjectToLcd+0x8e>
		uint16_t color = BLACK;
 8004654:	2300      	movs	r3, #0
 8004656:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
		if(o.dataLen<2){
 800465a:	8abb      	ldrh	r3, [r7, #20]
 800465c:	2b01      	cmp	r3, #1
 800465e:	d805      	bhi.n	800466c <drawObjectToLcd+0x60>
			printf("[OV] Warning: missing color byte in object id %d! Falling back on black. \n\r", o.objectId);
 8004660:	897b      	ldrh	r3, [r7, #10]
 8004662:	4619      	mov	r1, r3
 8004664:	48b3      	ldr	r0, [pc, #716]	; (8004934 <drawObjectToLcd+0x328>)
 8004666:	f005 f96d 	bl	8009944 <iprintf>
 800466a:	e004      	b.n	8004676 <drawObjectToLcd+0x6a>
		}
		else{
			color = *((uint16_t *) data);
 800466c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004670:	881b      	ldrh	r3, [r3, #0]
 8004672:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
		}
		LCD_fillRect(o.xstart, o.ystart, (o.xend - o.xstart), (o.yend - o.ystart), color);
 8004676:	89b8      	ldrh	r0, [r7, #12]
 8004678:	89f9      	ldrh	r1, [r7, #14]
 800467a:	8a3a      	ldrh	r2, [r7, #16]
 800467c:	89bb      	ldrh	r3, [r7, #12]
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	b29c      	uxth	r4, r3
 8004682:	8a7a      	ldrh	r2, [r7, #18]
 8004684:	89fb      	ldrh	r3, [r7, #14]
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	b29a      	uxth	r2, r3
 800468a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800468e:	9300      	str	r3, [sp, #0]
 8004690:	4613      	mov	r3, r2
 8004692:	4622      	mov	r2, r4
 8004694:	f7fc fa92 	bl	8000bbc <LCD_fillRect>
 8004698:	e144      	b.n	8004924 <drawObjectToLcd+0x318>
	}
	else if(o.objectType == picture){
 800469a:	7a3b      	ldrb	r3, [r7, #8]
 800469c:	2b04      	cmp	r3, #4
 800469e:	f040 8086 	bne.w	80047ae <drawObjectToLcd+0x1a2>
 80046a2:	466b      	mov	r3, sp
 80046a4:	461c      	mov	r4, r3

		if(o.dataLen != 3){
 80046a6:	8abb      	ldrh	r3, [r7, #20]
 80046a8:	2b03      	cmp	r3, #3
 80046aa:	d008      	beq.n	80046be <drawObjectToLcd+0xb2>
			printf("[OV] Error: Unexpected data len for picture id %d. Need: 3, got: %d \n\r", o.objectId, o.dataLen);
 80046ac:	897b      	ldrh	r3, [r7, #10]
 80046ae:	4619      	mov	r1, r3
 80046b0:	8abb      	ldrh	r3, [r7, #20]
 80046b2:	461a      	mov	r2, r3
 80046b4:	48a0      	ldr	r0, [pc, #640]	; (8004938 <drawObjectToLcd+0x32c>)
 80046b6:	f005 f945 	bl	8009944 <iprintf>
			return 3;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e075      	b.n	80047aa <drawObjectToLcd+0x19e>
		}

		int bitmapNumber = *((uint16_t *) data);
 80046be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80046c2:	881b      	ldrh	r3, [r3, #0]
 80046c4:	657b      	str	r3, [r7, #84]	; 0x54
		int scaling = *((uint16_t *) (data+2));
 80046c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80046ca:	3302      	adds	r3, #2
 80046cc:	881b      	ldrh	r3, [r3, #0]
 80046ce:	653b      	str	r3, [r7, #80]	; 0x50

		int maxPixels = MAX_BITMAP_DRAW_XSIZE*MAX_BITMAP_DRAW_YSIZE;
 80046d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80046d4:	64fb      	str	r3, [r7, #76]	; 0x4c
		uint16_t pixelBuffer[maxPixels];
 80046d6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80046d8:	1e4b      	subs	r3, r1, #1
 80046da:	64bb      	str	r3, [r7, #72]	; 0x48
 80046dc:	460a      	mov	r2, r1
 80046de:	2300      	movs	r3, #0
 80046e0:	603a      	str	r2, [r7, #0]
 80046e2:	607b      	str	r3, [r7, #4]
 80046e4:	f04f 0200 	mov.w	r2, #0
 80046e8:	f04f 0300 	mov.w	r3, #0
 80046ec:	e9d7 5600 	ldrd	r5, r6, [r7]
 80046f0:	4630      	mov	r0, r6
 80046f2:	0103      	lsls	r3, r0, #4
 80046f4:	4628      	mov	r0, r5
 80046f6:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 80046fa:	4628      	mov	r0, r5
 80046fc:	0102      	lsls	r2, r0, #4
 80046fe:	460a      	mov	r2, r1
 8004700:	2300      	movs	r3, #0
 8004702:	4692      	mov	sl, r2
 8004704:	469b      	mov	fp, r3
 8004706:	f04f 0200 	mov.w	r2, #0
 800470a:	f04f 0300 	mov.w	r3, #0
 800470e:	ea4f 130b 	mov.w	r3, fp, lsl #4
 8004712:	ea43 731a 	orr.w	r3, r3, sl, lsr #28
 8004716:	ea4f 120a 	mov.w	r2, sl, lsl #4
 800471a:	460b      	mov	r3, r1
 800471c:	005b      	lsls	r3, r3, #1
 800471e:	3307      	adds	r3, #7
 8004720:	08db      	lsrs	r3, r3, #3
 8004722:	00db      	lsls	r3, r3, #3
 8004724:	ebad 0d03 	sub.w	sp, sp, r3
 8004728:	ab06      	add	r3, sp, #24
 800472a:	3301      	adds	r3, #1
 800472c:	085b      	lsrs	r3, r3, #1
 800472e:	005b      	lsls	r3, r3, #1
 8004730:	647b      	str	r3, [r7, #68]	; 0x44
		struct bitmap bitmapHeader;
		int pixelsGotten = fetchBitmap(bitmapNumber, &bitmapHeader, pixelBuffer, maxPixels);
 8004732:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004734:	b298      	uxth	r0, r3
 8004736:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004738:	b29b      	uxth	r3, r3
 800473a:	f107 0118 	add.w	r1, r7, #24
 800473e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004740:	f7fd fa28 	bl	8001b94 <fetchBitmap>
 8004744:	6438      	str	r0, [r7, #64]	; 0x40

		if(objectXSize != bitmapHeader.xsize*scaling || objectYSize != bitmapHeader.ysize*scaling){
 8004746:	8b7b      	ldrh	r3, [r7, #26]
 8004748:	461a      	mov	r2, r3
 800474a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800474c:	fb02 f303 	mul.w	r3, r2, r3
 8004750:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004752:	429a      	cmp	r2, r3
 8004754:	d107      	bne.n	8004766 <drawObjectToLcd+0x15a>
 8004756:	8bbb      	ldrh	r3, [r7, #28]
 8004758:	461a      	mov	r2, r3
 800475a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800475c:	fb02 f303 	mul.w	r3, r2, r3
 8004760:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004762:	429a      	cmp	r2, r3
 8004764:	d00f      	beq.n	8004786 <drawObjectToLcd+0x17a>
			printf("[OV] Warning: Scaled bitmap and picture (id %d) size mismatch! Object is %d x %d, bitmap is %d x %d scaled by factor of %d. Drawing scaled bitmap.\n\r",o.objectId, objectXSize, objectYSize, bitmapHeader.xsize, bitmapHeader.ysize, scaling);
 8004766:	897b      	ldrh	r3, [r7, #10]
 8004768:	4618      	mov	r0, r3
 800476a:	8b7b      	ldrh	r3, [r7, #26]
 800476c:	461a      	mov	r2, r3
 800476e:	8bbb      	ldrh	r3, [r7, #28]
 8004770:	4619      	mov	r1, r3
 8004772:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004774:	9302      	str	r3, [sp, #8]
 8004776:	9101      	str	r1, [sp, #4]
 8004778:	9200      	str	r2, [sp, #0]
 800477a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800477c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800477e:	4601      	mov	r1, r0
 8004780:	486e      	ldr	r0, [pc, #440]	; (800493c <drawObjectToLcd+0x330>)
 8004782:	f005 f8df 	bl	8009944 <iprintf>
		}

		drawBitmapToLcd(o.xstart, o.ystart, bitmapHeader, pixelBuffer, maxPixels, scaling);
 8004786:	89bb      	ldrh	r3, [r7, #12]
 8004788:	4618      	mov	r0, r3
 800478a:	89fb      	ldrh	r3, [r7, #14]
 800478c:	4619      	mov	r1, r3
 800478e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004790:	b29b      	uxth	r3, r3
 8004792:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004794:	b2d2      	uxtb	r2, r2
 8004796:	9202      	str	r2, [sp, #8]
 8004798:	9301      	str	r3, [sp, #4]
 800479a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800479c:	9300      	str	r3, [sp, #0]
 800479e:	f107 0318 	add.w	r3, r7, #24
 80047a2:	cb0c      	ldmia	r3, {r2, r3}
 80047a4:	f000 f8d0 	bl	8004948 <drawBitmapToLcd>
		return 0;
 80047a8:	2300      	movs	r3, #0
 80047aa:	46a5      	mov	sp, r4
 80047ac:	e0bb      	b.n	8004926 <drawObjectToLcd+0x31a>

	}
	else if(o.objectType==label){
 80047ae:	7a3b      	ldrb	r3, [r7, #8]
 80047b0:	2b03      	cmp	r3, #3
 80047b2:	f040 80af 	bne.w	8004914 <drawObjectToLcd+0x308>
 80047b6:	466b      	mov	r3, sp
 80047b8:	461e      	mov	r6, r3
		int expectedChars = o.dataLen - 8;
 80047ba:	8abb      	ldrh	r3, [r7, #20]
 80047bc:	3b08      	subs	r3, #8
 80047be:	66bb      	str	r3, [r7, #104]	; 0x68
		if(expectedChars < 0){
 80047c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	da07      	bge.n	80047d6 <drawObjectToLcd+0x1ca>
			printf("[OV] Error: Too few data bytes to draw string id %d. \n\r", o.objectId);
 80047c6:	897b      	ldrh	r3, [r7, #10]
 80047c8:	4619      	mov	r1, r3
 80047ca:	485d      	ldr	r0, [pc, #372]	; (8004940 <drawObjectToLcd+0x334>)
 80047cc:	f005 f8ba 	bl	8009944 <iprintf>
			return 3;
 80047d0:	2303      	movs	r3, #3
 80047d2:	46b5      	mov	sp, r6
 80047d4:	e0a7      	b.n	8004926 <drawObjectToLcd+0x31a>
		}
		int dIndex = 0;
 80047d6:	2300      	movs	r3, #0
 80047d8:	67bb      	str	r3, [r7, #120]	; 0x78
		uint8_t pixelScaling = *((uint8_t *) (data + dIndex++));
 80047da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047dc:	1c5a      	adds	r2, r3, #1
 80047de:	67ba      	str	r2, [r7, #120]	; 0x78
 80047e0:	461a      	mov	r2, r3
 80047e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80047e6:	4413      	add	r3, r2
 80047e8:	781b      	ldrb	r3, [r3, #0]
 80047ea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		uint8_t hSpace = *((uint8_t *) (data + dIndex++));
 80047ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047f0:	1c5a      	adds	r2, r3, #1
 80047f2:	67ba      	str	r2, [r7, #120]	; 0x78
 80047f4:	461a      	mov	r2, r3
 80047f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80047fa:	4413      	add	r3, r2
 80047fc:	781b      	ldrb	r3, [r3, #0]
 80047fe:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
		uint8_t vSpace = *((uint8_t *) (data + dIndex++));
 8004802:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004804:	1c5a      	adds	r2, r3, #1
 8004806:	67ba      	str	r2, [r7, #120]	; 0x78
 8004808:	461a      	mov	r2, r3
 800480a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800480e:	4413      	add	r3, r2
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
		uint8_t useBg = *((uint8_t *) (data + dIndex++));
 8004816:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004818:	1c5a      	adds	r2, r3, #1
 800481a:	67ba      	str	r2, [r7, #120]	; 0x78
 800481c:	461a      	mov	r2, r3
 800481e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004822:	4413      	add	r3, r2
 8004824:	781b      	ldrb	r3, [r3, #0]
 8004826:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
		uint16_t textColor = *((uint16_t *) (data + dIndex));
 800482a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800482c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004830:	4413      	add	r3, r2
 8004832:	881b      	ldrh	r3, [r3, #0]
 8004834:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
		dIndex += 2;
 8004838:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800483a:	3302      	adds	r3, #2
 800483c:	67bb      	str	r3, [r7, #120]	; 0x78
		uint16_t bgColor = *((uint16_t *) (data + dIndex));
 800483e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004840:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004844:	4413      	add	r3, r2
 8004846:	881b      	ldrh	r3, [r3, #0]
 8004848:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
		dIndex += 2;
 800484c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800484e:	3302      	adds	r3, #2
 8004850:	67bb      	str	r3, [r7, #120]	; 0x78

		char labelString[expectedChars + 1];
 8004852:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004854:	1c59      	adds	r1, r3, #1
 8004856:	1e4b      	subs	r3, r1, #1
 8004858:	65fb      	str	r3, [r7, #92]	; 0x5c
 800485a:	460a      	mov	r2, r1
 800485c:	2300      	movs	r3, #0
 800485e:	4690      	mov	r8, r2
 8004860:	4699      	mov	r9, r3
 8004862:	f04f 0200 	mov.w	r2, #0
 8004866:	f04f 0300 	mov.w	r3, #0
 800486a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800486e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004872:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004876:	460a      	mov	r2, r1
 8004878:	2300      	movs	r3, #0
 800487a:	4614      	mov	r4, r2
 800487c:	461d      	mov	r5, r3
 800487e:	f04f 0200 	mov.w	r2, #0
 8004882:	f04f 0300 	mov.w	r3, #0
 8004886:	00eb      	lsls	r3, r5, #3
 8004888:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800488c:	00e2      	lsls	r2, r4, #3
 800488e:	460b      	mov	r3, r1
 8004890:	3307      	adds	r3, #7
 8004892:	08db      	lsrs	r3, r3, #3
 8004894:	00db      	lsls	r3, r3, #3
 8004896:	ebad 0d03 	sub.w	sp, sp, r3
 800489a:	ab06      	add	r3, sp, #24
 800489c:	3300      	adds	r3, #0
 800489e:	65bb      	str	r3, [r7, #88]	; 0x58
		int i;
		for(i = 0; i<expectedChars;i++){
 80048a0:	2300      	movs	r3, #0
 80048a2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80048a4:	e00f      	b.n	80048c6 <drawObjectToLcd+0x2ba>
			labelString[i] = *((uint8_t *) (data + dIndex++));
 80048a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048a8:	1c5a      	adds	r2, r3, #1
 80048aa:	67ba      	str	r2, [r7, #120]	; 0x78
 80048ac:	461a      	mov	r2, r3
 80048ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80048b2:	4413      	add	r3, r2
 80048b4:	7819      	ldrb	r1, [r3, #0]
 80048b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80048b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80048ba:	4413      	add	r3, r2
 80048bc:	460a      	mov	r2, r1
 80048be:	701a      	strb	r2, [r3, #0]
		for(i = 0; i<expectedChars;i++){
 80048c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80048c2:	3301      	adds	r3, #1
 80048c4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80048c6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80048c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80048ca:	429a      	cmp	r2, r3
 80048cc:	dbeb      	blt.n	80048a6 <drawObjectToLcd+0x29a>
		}
		labelString[expectedChars] = 0;
 80048ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80048d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80048d2:	4413      	add	r3, r2
 80048d4:	2200      	movs	r2, #0
 80048d6:	701a      	strb	r2, [r3, #0]
		drawStringToLcd5x7(o.xstart, o.ystart, pixelScaling, textColor, useBg, bgColor, hSpace, vSpace, labelString);
 80048d8:	89bb      	ldrh	r3, [r7, #12]
 80048da:	469c      	mov	ip, r3
 80048dc:	89fb      	ldrh	r3, [r7, #14]
 80048de:	469e      	mov	lr, r3
 80048e0:	f897 4067 	ldrb.w	r4, [r7, #103]	; 0x67
 80048e4:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80048e8:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 80048ec:	f897 1065 	ldrb.w	r1, [r7, #101]	; 0x65
 80048f0:	f8b7 5062 	ldrh.w	r5, [r7, #98]	; 0x62
 80048f4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80048f6:	9004      	str	r0, [sp, #16]
 80048f8:	9103      	str	r1, [sp, #12]
 80048fa:	9202      	str	r2, [sp, #8]
 80048fc:	f8b7 2060 	ldrh.w	r2, [r7, #96]	; 0x60
 8004900:	9201      	str	r2, [sp, #4]
 8004902:	9300      	str	r3, [sp, #0]
 8004904:	462b      	mov	r3, r5
 8004906:	4622      	mov	r2, r4
 8004908:	4671      	mov	r1, lr
 800490a:	4660      	mov	r0, ip
 800490c:	f000 f88f 	bl	8004a2e <drawStringToLcd5x7>
 8004910:	46b5      	mov	sp, r6
 8004912:	e007      	b.n	8004924 <drawObjectToLcd+0x318>
	}
	else{
		printf("[OV] Error: drawObjectToLcd() not implemented for object type [%s]. \n\r", objName);
 8004914:	f107 0320 	add.w	r3, r7, #32
 8004918:	4619      	mov	r1, r3
 800491a:	480a      	ldr	r0, [pc, #40]	; (8004944 <drawObjectToLcd+0x338>)
 800491c:	f005 f812 	bl	8009944 <iprintf>
		return 100;
 8004920:	2364      	movs	r3, #100	; 0x64
 8004922:	e000      	b.n	8004926 <drawObjectToLcd+0x31a>
	}
	return 0;
 8004924:	2300      	movs	r3, #0
}
 8004926:	4618      	mov	r0, r3
 8004928:	3784      	adds	r7, #132	; 0x84
 800492a:	46bd      	mov	sp, r7
 800492c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004930:	0800b500 	.word	0x0800b500
 8004934:	0800b51c 	.word	0x0800b51c
 8004938:	0800b568 	.word	0x0800b568
 800493c:	0800b5b0 	.word	0x0800b5b0
 8004940:	0800b648 	.word	0x0800b648
 8004944:	0800b680 	.word	0x0800b680

08004948 <drawBitmapToLcd>:

/*
 * Draws first @pixelCount pixels of a bitmap to lcd starting at xstart ystart, using provided buffer of pixels and scaling.
 */
void drawBitmapToLcd(int xstart, int ystart, struct bitmap bitmapHeader, uint16_t *pixelBuffer, uint16_t pixelCount, uint8_t scaling){
 8004948:	b590      	push	{r4, r7, lr}
 800494a:	b08d      	sub	sp, #52	; 0x34
 800494c:	af02      	add	r7, sp, #8
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	4639      	mov	r1, r7
 8004954:	e881 000c 	stmia.w	r1, {r2, r3}
	int pixelIndex = 0;
 8004958:	2300      	movs	r3, #0
 800495a:	627b      	str	r3, [r7, #36]	; 0x24
	int xpos = xstart;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	623b      	str	r3, [r7, #32]
	int ypos = ystart;
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	61fb      	str	r3, [r7, #28]
	while(pixelIndex < pixelCount){
 8004964:	e05a      	b.n	8004a1c <drawBitmapToLcd+0xd4>
		uint16_t pixelColor = pixelBuffer[pixelIndex];
 8004966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004968:	005b      	lsls	r3, r3, #1
 800496a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800496c:	4413      	add	r3, r2
 800496e:	881b      	ldrh	r3, [r3, #0]
 8004970:	833b      	strh	r3, [r7, #24]
		uint16_t pixel_x_1 = xpos;
 8004972:	6a3b      	ldr	r3, [r7, #32]
 8004974:	82fb      	strh	r3, [r7, #22]
		uint16_t pixel_y_1 = ypos;
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	82bb      	strh	r3, [r7, #20]
		uint16_t pixel_x_2 = xpos + scaling;
 800497a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800497e:	b29a      	uxth	r2, r3
 8004980:	6a3b      	ldr	r3, [r7, #32]
 8004982:	b29b      	uxth	r3, r3
 8004984:	4413      	add	r3, r2
 8004986:	837b      	strh	r3, [r7, #26]
		uint16_t pixel_y_2 = ypos + scaling;
 8004988:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800498c:	b29a      	uxth	r2, r3
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	b29b      	uxth	r3, r3
 8004992:	4413      	add	r3, r2
 8004994:	827b      	strh	r3, [r7, #18]
		if(pixel_x_1 >= LCD_PIXEL_WIDTH){
 8004996:	8afb      	ldrh	r3, [r7, #22]
 8004998:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800499c:	d303      	bcc.n	80049a6 <drawBitmapToLcd+0x5e>
			pixelIndex++;
 800499e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a0:	3301      	adds	r3, #1
 80049a2:	627b      	str	r3, [r7, #36]	; 0x24
			continue;
 80049a4:	e03a      	b.n	8004a1c <drawBitmapToLcd+0xd4>
		}
		if(pixel_y_1 >= LCD_PIXEL_HEIGHT){
 80049a6:	8abb      	ldrh	r3, [r7, #20]
 80049a8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80049ac:	d23b      	bcs.n	8004a26 <drawBitmapToLcd+0xde>
			return;
		}
		if(pixel_x_2 >= LCD_PIXEL_WIDTH){
 80049ae:	8b7b      	ldrh	r3, [r7, #26]
 80049b0:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80049b4:	d302      	bcc.n	80049bc <drawBitmapToLcd+0x74>
			pixel_x_2 = LCD_PIXEL_WIDTH - 1;
 80049b6:	f240 13df 	movw	r3, #479	; 0x1df
 80049ba:	837b      	strh	r3, [r7, #26]
		}
		if(pixel_y_2 >= LCD_PIXEL_HEIGHT){
 80049bc:	8a7b      	ldrh	r3, [r7, #18]
 80049be:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80049c2:	d302      	bcc.n	80049ca <drawBitmapToLcd+0x82>
			pixel_x_2 = LCD_PIXEL_HEIGHT - 1;
 80049c4:	f240 133f 	movw	r3, #319	; 0x13f
 80049c8:	837b      	strh	r3, [r7, #26]
		}
		LCD_fillRect(pixel_x_1, pixel_y_1, pixel_x_2-pixel_x_1, pixel_y_2 - pixel_y_1, pixelColor);
 80049ca:	8b7a      	ldrh	r2, [r7, #26]
 80049cc:	8afb      	ldrh	r3, [r7, #22]
 80049ce:	1ad3      	subs	r3, r2, r3
 80049d0:	b29c      	uxth	r4, r3
 80049d2:	8a7a      	ldrh	r2, [r7, #18]
 80049d4:	8abb      	ldrh	r3, [r7, #20]
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	b29a      	uxth	r2, r3
 80049da:	8ab9      	ldrh	r1, [r7, #20]
 80049dc:	8af8      	ldrh	r0, [r7, #22]
 80049de:	8b3b      	ldrh	r3, [r7, #24]
 80049e0:	9300      	str	r3, [sp, #0]
 80049e2:	4613      	mov	r3, r2
 80049e4:	4622      	mov	r2, r4
 80049e6:	f7fc f8e9 	bl	8000bbc <LCD_fillRect>
		xpos+=scaling;
 80049ea:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80049ee:	6a3a      	ldr	r2, [r7, #32]
 80049f0:	4413      	add	r3, r2
 80049f2:	623b      	str	r3, [r7, #32]
		pixelIndex++;
 80049f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f6:	3301      	adds	r3, #1
 80049f8:	627b      	str	r3, [r7, #36]	; 0x24
		if(pixelIndex % bitmapHeader.xsize==0){
 80049fa:	887b      	ldrh	r3, [r7, #2]
 80049fc:	461a      	mov	r2, r3
 80049fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a00:	fb93 f1f2 	sdiv	r1, r3, r2
 8004a04:	fb01 f202 	mul.w	r2, r1, r2
 8004a08:	1a9b      	subs	r3, r3, r2
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d106      	bne.n	8004a1c <drawBitmapToLcd+0xd4>
			xpos = xstart;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	623b      	str	r3, [r7, #32]
			ypos += scaling;
 8004a12:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8004a16:	69fa      	ldr	r2, [r7, #28]
 8004a18:	4413      	add	r3, r2
 8004a1a:	61fb      	str	r3, [r7, #28]
	while(pixelIndex < pixelCount){
 8004a1c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004a1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a20:	429a      	cmp	r2, r3
 8004a22:	dba0      	blt.n	8004966 <drawBitmapToLcd+0x1e>
 8004a24:	e000      	b.n	8004a28 <drawBitmapToLcd+0xe0>
			return;
 8004a26:	bf00      	nop
		}
	}
}
 8004a28:	372c      	adds	r7, #44	; 0x2c
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd90      	pop	{r4, r7, pc}

08004a2e <drawStringToLcd5x7>:
 * (example - if pixelscaling == 5, a single char will occupy 25x40 pixels on the LCD). If useBackground is 1, then
 * background of chars will be filled with bgColor, otherwise, it will be left as-is.
 * hSpacing and vSpacing define the horizontal and vertical separation of chars in lcd pixels (independent of pixelScaling).
 * Newlines in string are treated as newline + cariiage return.
 */
void drawStringToLcd5x7(int x, int y, int pixelScaling, uint16_t textColor, int useBackground, uint16_t bgColor, int hSpacing, int vSpacing, char *string){
 8004a2e:	b580      	push	{r7, lr}
 8004a30:	b08c      	sub	sp, #48	; 0x30
 8004a32:	af04      	add	r7, sp, #16
 8004a34:	60f8      	str	r0, [r7, #12]
 8004a36:	60b9      	str	r1, [r7, #8]
 8004a38:	607a      	str	r2, [r7, #4]
 8004a3a:	807b      	strh	r3, [r7, #2]

	uint16_t charX = x;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	83fb      	strh	r3, [r7, #30]
	uint16_t charY = y;
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	83bb      	strh	r3, [r7, #28]

	int strIndex = 0;
 8004a44:	2300      	movs	r3, #0
 8004a46:	61bb      	str	r3, [r7, #24]
	while(1){
		char c = *(string + strIndex++);
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	1c5a      	adds	r2, r3, #1
 8004a4c:	61ba      	str	r2, [r7, #24]
 8004a4e:	461a      	mov	r2, r3
 8004a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a52:	4413      	add	r3, r2
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	75fb      	strb	r3, [r7, #23]
		if(c==0){
 8004a58:	7dfb      	ldrb	r3, [r7, #23]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d03b      	beq.n	8004ad6 <drawStringToLcd5x7+0xa8>
			break;
		}
		else if(c=='\r'){ //probably not needed, but just in case
 8004a5e:	7dfb      	ldrb	r3, [r7, #23]
 8004a60:	2b0d      	cmp	r3, #13
 8004a62:	d102      	bne.n	8004a6a <drawStringToLcd5x7+0x3c>
			charX = x;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	83fb      	strh	r3, [r7, #30]
 8004a68:	e7ee      	b.n	8004a48 <drawStringToLcd5x7+0x1a>
		}
		else if(c == '\n'){
 8004a6a:	7dfb      	ldrb	r3, [r7, #23]
 8004a6c:	2b0a      	cmp	r3, #10
 8004a6e:	d10d      	bne.n	8004a8c <drawStringToLcd5x7+0x5e>
			charX = x;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	83fb      	strh	r3, [r7, #30]
			charY += 8*pixelScaling + vSpacing;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	00db      	lsls	r3, r3, #3
 8004a7a:	b29a      	uxth	r2, r3
 8004a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	4413      	add	r3, r2
 8004a82:	b29a      	uxth	r2, r3
 8004a84:	8bbb      	ldrh	r3, [r7, #28]
 8004a86:	4413      	add	r3, r2
 8004a88:	83bb      	strh	r3, [r7, #28]
 8004a8a:	e7dd      	b.n	8004a48 <drawStringToLcd5x7+0x1a>
		}
		else{ //normal character, presumably.
			if(charY > LCD_PIXEL_HEIGHT){
 8004a8c:	8bbb      	ldrh	r3, [r7, #28]
 8004a8e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004a92:	d822      	bhi.n	8004ada <drawStringToLcd5x7+0xac>
				break;
			}
			if(charX > LCD_PIXEL_WIDTH){
 8004a94:	8bfb      	ldrh	r3, [r7, #30]
 8004a96:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8004a9a:	d81a      	bhi.n	8004ad2 <drawStringToLcd5x7+0xa4>
				continue; //because there might be a newline later in string
			}
			drawCharToLcd5x7(charX, charY, pixelScaling, textColor, useBackground, bgColor, c);
 8004a9c:	8bf8      	ldrh	r0, [r7, #30]
 8004a9e:	8bb9      	ldrh	r1, [r7, #28]
 8004aa0:	887a      	ldrh	r2, [r7, #2]
 8004aa2:	7dfb      	ldrb	r3, [r7, #23]
 8004aa4:	9302      	str	r3, [sp, #8]
 8004aa6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004aa8:	9301      	str	r3, [sp, #4]
 8004aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aac:	9300      	str	r3, [sp, #0]
 8004aae:	4613      	mov	r3, r2
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	f000 f817 	bl	8004ae4 <drawCharToLcd5x7>
			charX += 5*pixelScaling + hSpacing;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	461a      	mov	r2, r3
 8004abc:	0092      	lsls	r2, r2, #2
 8004abe:	4413      	add	r3, r2
 8004ac0:	b29a      	uxth	r2, r3
 8004ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	4413      	add	r3, r2
 8004ac8:	b29a      	uxth	r2, r3
 8004aca:	8bfb      	ldrh	r3, [r7, #30]
 8004acc:	4413      	add	r3, r2
 8004ace:	83fb      	strh	r3, [r7, #30]
 8004ad0:	e7ba      	b.n	8004a48 <drawStringToLcd5x7+0x1a>
				continue; //because there might be a newline later in string
 8004ad2:	bf00      	nop
	while(1){
 8004ad4:	e7b8      	b.n	8004a48 <drawStringToLcd5x7+0x1a>
			break;
 8004ad6:	bf00      	nop
 8004ad8:	e000      	b.n	8004adc <drawStringToLcd5x7+0xae>
				break;
 8004ada:	bf00      	nop
		}
	}

}
 8004adc:	bf00      	nop
 8004ade:	3720      	adds	r7, #32
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}

08004ae4 <drawCharToLcd5x7>:

void drawCharToLcd5x7(int x, int y, int pixelScaling, uint16_t textColor, int useBackground, uint16_t bgColor, char c){
 8004ae4:	b590      	push	{r4, r7, lr}
 8004ae6:	b08f      	sub	sp, #60	; 0x3c
 8004ae8:	af02      	add	r7, sp, #8
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	60b9      	str	r1, [r7, #8]
 8004aee:	607a      	str	r2, [r7, #4]
 8004af0:	807b      	strh	r3, [r7, #2]
	int ascii = (int) c;
 8004af2:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8004af6:	61fb      	str	r3, [r7, #28]
	char *charFont = font5x7 + (5*ascii);
 8004af8:	69fa      	ldr	r2, [r7, #28]
 8004afa:	4613      	mov	r3, r2
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	4413      	add	r3, r2
 8004b00:	461a      	mov	r2, r3
 8004b02:	4b41      	ldr	r3, [pc, #260]	; (8004c08 <drawCharToLcd5x7+0x124>)
 8004b04:	4413      	add	r3, r2
 8004b06:	61bb      	str	r3, [r7, #24]
	int i;
	//printf("Drawing char %c @ [%d, %d] \n\r", c, x, y);

	//font is stored as columns!
	int column, row;
	for(column = 0; column < 5; column++){
 8004b08:	2300      	movs	r3, #0
 8004b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b0c:	e074      	b.n	8004bf8 <drawCharToLcd5x7+0x114>
		uint8_t columnByte = *(charFont + column);
 8004b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b10:	69ba      	ldr	r2, [r7, #24]
 8004b12:	4413      	add	r3, r2
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	75fb      	strb	r3, [r7, #23]
		uint8_t mask = 0x01;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		for(row = 0; row < 8; row++){
 8004b1e:	2300      	movs	r3, #0
 8004b20:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b22:	e063      	b.n	8004bec <drawCharToLcd5x7+0x108>
			uint16_t pixelColor = bgColor;
 8004b24:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004b28:	84bb      	strh	r3, [r7, #36]	; 0x24
			if(columnByte & mask){
 8004b2a:	7dfa      	ldrb	r2, [r7, #23]
 8004b2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004b30:	4013      	ands	r3, r2
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d002      	beq.n	8004b3e <drawCharToLcd5x7+0x5a>
				pixelColor = textColor;
 8004b38:	887b      	ldrh	r3, [r7, #2]
 8004b3a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004b3c:	e008      	b.n	8004b50 <drawCharToLcd5x7+0x6c>
			}
			else{
				if(!useBackground){
 8004b3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d105      	bne.n	8004b50 <drawCharToLcd5x7+0x6c>
					mask = mask << 1;
 8004b44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004b48:	005b      	lsls	r3, r3, #1
 8004b4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					continue;
 8004b4e:	e04a      	b.n	8004be6 <drawCharToLcd5x7+0x102>
				}
			}

			uint16_t pixel_x_1 = x + pixelScaling*column;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	b29a      	uxth	r2, r3
 8004b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	fb12 f303 	smulbb	r3, r2, r3
 8004b5c:	b29a      	uxth	r2, r3
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	4413      	add	r3, r2
 8004b64:	82bb      	strh	r3, [r7, #20]
			uint16_t pixel_y_1 = y + pixelScaling*row;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	b29a      	uxth	r2, r3
 8004b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	fb12 f303 	smulbb	r3, r2, r3
 8004b72:	b29a      	uxth	r2, r3
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	4413      	add	r3, r2
 8004b7a:	827b      	strh	r3, [r7, #18]
			uint16_t pixel_x_2 = pixel_x_1 + pixelScaling;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	b29a      	uxth	r2, r3
 8004b80:	8abb      	ldrh	r3, [r7, #20]
 8004b82:	4413      	add	r3, r2
 8004b84:	847b      	strh	r3, [r7, #34]	; 0x22
			uint16_t pixel_y_2 = pixel_y_1 + pixelScaling;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	b29a      	uxth	r2, r3
 8004b8a:	8a7b      	ldrh	r3, [r7, #18]
 8004b8c:	4413      	add	r3, r2
 8004b8e:	843b      	strh	r3, [r7, #32]

			if(pixel_x_1 >= LCD_PIXEL_WIDTH || pixel_y_1 >= LCD_PIXEL_HEIGHT){
 8004b90:	8abb      	ldrh	r3, [r7, #20]
 8004b92:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8004b96:	d22c      	bcs.n	8004bf2 <drawCharToLcd5x7+0x10e>
 8004b98:	8a7b      	ldrh	r3, [r7, #18]
 8004b9a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004b9e:	d228      	bcs.n	8004bf2 <drawCharToLcd5x7+0x10e>
				break;
			}

			if(pixel_x_2 >= LCD_PIXEL_WIDTH){
 8004ba0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004ba2:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8004ba6:	d302      	bcc.n	8004bae <drawCharToLcd5x7+0xca>
				pixel_x_2 = LCD_PIXEL_WIDTH - 1;
 8004ba8:	f240 13df 	movw	r3, #479	; 0x1df
 8004bac:	847b      	strh	r3, [r7, #34]	; 0x22
			}
			if(pixel_y_2 >= LCD_PIXEL_HEIGHT){
 8004bae:	8c3b      	ldrh	r3, [r7, #32]
 8004bb0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004bb4:	d302      	bcc.n	8004bbc <drawCharToLcd5x7+0xd8>
				pixel_y_2 = LCD_PIXEL_HEIGHT - 1;
 8004bb6:	f240 133f 	movw	r3, #319	; 0x13f
 8004bba:	843b      	strh	r3, [r7, #32]
			}

			LCD_fillRect(pixel_x_1, pixel_y_1, pixel_x_2-pixel_x_1, pixel_y_2 - pixel_y_1, pixelColor);
 8004bbc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8004bbe:	8abb      	ldrh	r3, [r7, #20]
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	b29c      	uxth	r4, r3
 8004bc4:	8c3a      	ldrh	r2, [r7, #32]
 8004bc6:	8a7b      	ldrh	r3, [r7, #18]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	b29a      	uxth	r2, r3
 8004bcc:	8a79      	ldrh	r1, [r7, #18]
 8004bce:	8ab8      	ldrh	r0, [r7, #20]
 8004bd0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004bd2:	9300      	str	r3, [sp, #0]
 8004bd4:	4613      	mov	r3, r2
 8004bd6:	4622      	mov	r2, r4
 8004bd8:	f7fb fff0 	bl	8000bbc <LCD_fillRect>
			mask = mask << 1;
 8004bdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004be0:	005b      	lsls	r3, r3, #1
 8004be2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		for(row = 0; row < 8; row++){
 8004be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be8:	3301      	adds	r3, #1
 8004bea:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bee:	2b07      	cmp	r3, #7
 8004bf0:	dd98      	ble.n	8004b24 <drawCharToLcd5x7+0x40>
	for(column = 0; column < 5; column++){
 8004bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf4:	3301      	adds	r3, #1
 8004bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bfa:	2b04      	cmp	r3, #4
 8004bfc:	dd87      	ble.n	8004b0e <drawCharToLcd5x7+0x2a>
		}
	}

}
 8004bfe:	bf00      	nop
 8004c00:	bf00      	nop
 8004c02:	3734      	adds	r7, #52	; 0x34
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd90      	pop	{r4, r7, pc}
 8004c08:	0800b6cc 	.word	0x0800b6cc

08004c0c <SPI1_Transfer>:
#include <stm32f4xx_hal_gpio.h>
#include <stdio.h>


uint8_t SPI1_Transfer(uint8_t data)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b085      	sub	sp, #20
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	4603      	mov	r3, r0
 8004c14:	71fb      	strb	r3, [r7, #7]
	SPI_TypeDef *SPI1inst = hspi1.Instance;
 8004c16:	4b12      	ldr	r3, [pc, #72]	; (8004c60 <SPI1_Transfer+0x54>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	60fb      	str	r3, [r7, #12]
    SPI1inst->DR = data;
 8004c1c:	79fa      	ldrb	r2, [r7, #7]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	60da      	str	r2, [r3, #12]
    while (!(SPI1inst->SR & (SPI_FLAG_TXE)));
 8004c22:	bf00      	nop
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	f003 0302 	and.w	r3, r3, #2
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d0f9      	beq.n	8004c24 <SPI1_Transfer+0x18>
    while (!(SPI1inst->SR & (SPI_FLAG_RXNE)));
 8004c30:	bf00      	nop
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	f003 0301 	and.w	r3, r3, #1
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d0f9      	beq.n	8004c32 <SPI1_Transfer+0x26>
    while (SPI1inst->SR & (SPI_FLAG_BSY));
 8004c3e:	bf00      	nop
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d1f9      	bne.n	8004c40 <SPI1_Transfer+0x34>
    return SPI1inst->DR;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	b2db      	uxtb	r3, r3
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3714      	adds	r7, #20
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr
 8004c5e:	bf00      	nop
 8004c60:	200020b0 	.word	0x200020b0

08004c64 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	607b      	str	r3, [r7, #4]
 8004c6e:	4b10      	ldr	r3, [pc, #64]	; (8004cb0 <HAL_MspInit+0x4c>)
 8004c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c72:	4a0f      	ldr	r2, [pc, #60]	; (8004cb0 <HAL_MspInit+0x4c>)
 8004c74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c78:	6453      	str	r3, [r2, #68]	; 0x44
 8004c7a:	4b0d      	ldr	r3, [pc, #52]	; (8004cb0 <HAL_MspInit+0x4c>)
 8004c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c82:	607b      	str	r3, [r7, #4]
 8004c84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004c86:	2300      	movs	r3, #0
 8004c88:	603b      	str	r3, [r7, #0]
 8004c8a:	4b09      	ldr	r3, [pc, #36]	; (8004cb0 <HAL_MspInit+0x4c>)
 8004c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8e:	4a08      	ldr	r2, [pc, #32]	; (8004cb0 <HAL_MspInit+0x4c>)
 8004c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c94:	6413      	str	r3, [r2, #64]	; 0x40
 8004c96:	4b06      	ldr	r3, [pc, #24]	; (8004cb0 <HAL_MspInit+0x4c>)
 8004c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c9e:	603b      	str	r3, [r7, #0]
 8004ca0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004ca2:	bf00      	nop
 8004ca4:	370c      	adds	r7, #12
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	40023800 	.word	0x40023800

08004cb4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b08a      	sub	sp, #40	; 0x28
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cbc:	f107 0314 	add.w	r3, r7, #20
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	601a      	str	r2, [r3, #0]
 8004cc4:	605a      	str	r2, [r3, #4]
 8004cc6:	609a      	str	r2, [r3, #8]
 8004cc8:	60da      	str	r2, [r3, #12]
 8004cca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a19      	ldr	r2, [pc, #100]	; (8004d38 <HAL_I2C_MspInit+0x84>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d12b      	bne.n	8004d2e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	613b      	str	r3, [r7, #16]
 8004cda:	4b18      	ldr	r3, [pc, #96]	; (8004d3c <HAL_I2C_MspInit+0x88>)
 8004cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cde:	4a17      	ldr	r2, [pc, #92]	; (8004d3c <HAL_I2C_MspInit+0x88>)
 8004ce0:	f043 0302 	orr.w	r3, r3, #2
 8004ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8004ce6:	4b15      	ldr	r3, [pc, #84]	; (8004d3c <HAL_I2C_MspInit+0x88>)
 8004ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cea:	f003 0302 	and.w	r3, r3, #2
 8004cee:	613b      	str	r3, [r7, #16]
 8004cf0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004cf2:	23c0      	movs	r3, #192	; 0xc0
 8004cf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004cf6:	2312      	movs	r3, #18
 8004cf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004d02:	2304      	movs	r3, #4
 8004d04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d06:	f107 0314 	add.w	r3, r7, #20
 8004d0a:	4619      	mov	r1, r3
 8004d0c:	480c      	ldr	r0, [pc, #48]	; (8004d40 <HAL_I2C_MspInit+0x8c>)
 8004d0e:	f000 fee7 	bl	8005ae0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004d12:	2300      	movs	r3, #0
 8004d14:	60fb      	str	r3, [r7, #12]
 8004d16:	4b09      	ldr	r3, [pc, #36]	; (8004d3c <HAL_I2C_MspInit+0x88>)
 8004d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1a:	4a08      	ldr	r2, [pc, #32]	; (8004d3c <HAL_I2C_MspInit+0x88>)
 8004d1c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004d20:	6413      	str	r3, [r2, #64]	; 0x40
 8004d22:	4b06      	ldr	r3, [pc, #24]	; (8004d3c <HAL_I2C_MspInit+0x88>)
 8004d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d2a:	60fb      	str	r3, [r7, #12]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004d2e:	bf00      	nop
 8004d30:	3728      	adds	r7, #40	; 0x28
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	40005400 	.word	0x40005400
 8004d3c:	40023800 	.word	0x40023800
 8004d40:	40020400 	.word	0x40020400

08004d44 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b08a      	sub	sp, #40	; 0x28
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d4c:	f107 0314 	add.w	r3, r7, #20
 8004d50:	2200      	movs	r2, #0
 8004d52:	601a      	str	r2, [r3, #0]
 8004d54:	605a      	str	r2, [r3, #4]
 8004d56:	609a      	str	r2, [r3, #8]
 8004d58:	60da      	str	r2, [r3, #12]
 8004d5a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a19      	ldr	r2, [pc, #100]	; (8004dc8 <HAL_SPI_MspInit+0x84>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d12b      	bne.n	8004dbe <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004d66:	2300      	movs	r3, #0
 8004d68:	613b      	str	r3, [r7, #16]
 8004d6a:	4b18      	ldr	r3, [pc, #96]	; (8004dcc <HAL_SPI_MspInit+0x88>)
 8004d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d6e:	4a17      	ldr	r2, [pc, #92]	; (8004dcc <HAL_SPI_MspInit+0x88>)
 8004d70:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004d74:	6453      	str	r3, [r2, #68]	; 0x44
 8004d76:	4b15      	ldr	r3, [pc, #84]	; (8004dcc <HAL_SPI_MspInit+0x88>)
 8004d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d7e:	613b      	str	r3, [r7, #16]
 8004d80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d82:	2300      	movs	r3, #0
 8004d84:	60fb      	str	r3, [r7, #12]
 8004d86:	4b11      	ldr	r3, [pc, #68]	; (8004dcc <HAL_SPI_MspInit+0x88>)
 8004d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d8a:	4a10      	ldr	r2, [pc, #64]	; (8004dcc <HAL_SPI_MspInit+0x88>)
 8004d8c:	f043 0301 	orr.w	r3, r3, #1
 8004d90:	6313      	str	r3, [r2, #48]	; 0x30
 8004d92:	4b0e      	ldr	r3, [pc, #56]	; (8004dcc <HAL_SPI_MspInit+0x88>)
 8004d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d96:	f003 0301 	and.w	r3, r3, #1
 8004d9a:	60fb      	str	r3, [r7, #12]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004d9e:	23e0      	movs	r3, #224	; 0xe0
 8004da0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004da2:	2302      	movs	r3, #2
 8004da4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004da6:	2300      	movs	r3, #0
 8004da8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004daa:	2303      	movs	r3, #3
 8004dac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004dae:	2305      	movs	r3, #5
 8004db0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004db2:	f107 0314 	add.w	r3, r7, #20
 8004db6:	4619      	mov	r1, r3
 8004db8:	4805      	ldr	r0, [pc, #20]	; (8004dd0 <HAL_SPI_MspInit+0x8c>)
 8004dba:	f000 fe91 	bl	8005ae0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004dbe:	bf00      	nop
 8004dc0:	3728      	adds	r7, #40	; 0x28
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	bf00      	nop
 8004dc8:	40013000 	.word	0x40013000
 8004dcc:	40023800 	.word	0x40023800
 8004dd0:	40020000 	.word	0x40020000

08004dd4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b085      	sub	sp, #20
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a0b      	ldr	r2, [pc, #44]	; (8004e10 <HAL_TIM_PWM_MspInit+0x3c>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d10d      	bne.n	8004e02 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004de6:	2300      	movs	r3, #0
 8004de8:	60fb      	str	r3, [r7, #12]
 8004dea:	4b0a      	ldr	r3, [pc, #40]	; (8004e14 <HAL_TIM_PWM_MspInit+0x40>)
 8004dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dee:	4a09      	ldr	r2, [pc, #36]	; (8004e14 <HAL_TIM_PWM_MspInit+0x40>)
 8004df0:	f043 0301 	orr.w	r3, r3, #1
 8004df4:	6453      	str	r3, [r2, #68]	; 0x44
 8004df6:	4b07      	ldr	r3, [pc, #28]	; (8004e14 <HAL_TIM_PWM_MspInit+0x40>)
 8004df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dfa:	f003 0301 	and.w	r3, r3, #1
 8004dfe:	60fb      	str	r3, [r7, #12]
 8004e00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8004e02:	bf00      	nop
 8004e04:	3714      	adds	r7, #20
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr
 8004e0e:	bf00      	nop
 8004e10:	40010000 	.word	0x40010000
 8004e14:	40023800 	.word	0x40023800

08004e18 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b088      	sub	sp, #32
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e20:	f107 030c 	add.w	r3, r7, #12
 8004e24:	2200      	movs	r2, #0
 8004e26:	601a      	str	r2, [r3, #0]
 8004e28:	605a      	str	r2, [r3, #4]
 8004e2a:	609a      	str	r2, [r3, #8]
 8004e2c:	60da      	str	r2, [r3, #12]
 8004e2e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a12      	ldr	r2, [pc, #72]	; (8004e80 <HAL_TIM_MspPostInit+0x68>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d11e      	bne.n	8004e78 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	60bb      	str	r3, [r7, #8]
 8004e3e:	4b11      	ldr	r3, [pc, #68]	; (8004e84 <HAL_TIM_MspPostInit+0x6c>)
 8004e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e42:	4a10      	ldr	r2, [pc, #64]	; (8004e84 <HAL_TIM_MspPostInit+0x6c>)
 8004e44:	f043 0301 	orr.w	r3, r3, #1
 8004e48:	6313      	str	r3, [r2, #48]	; 0x30
 8004e4a:	4b0e      	ldr	r3, [pc, #56]	; (8004e84 <HAL_TIM_MspPostInit+0x6c>)
 8004e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e4e:	f003 0301 	and.w	r3, r3, #1
 8004e52:	60bb      	str	r3, [r7, #8]
 8004e54:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = LCD_BL_Pin;
 8004e56:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004e5a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e5c:	2302      	movs	r3, #2
 8004e5e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e60:	2300      	movs	r3, #0
 8004e62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e64:	2300      	movs	r3, #0
 8004e66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8004e6c:	f107 030c 	add.w	r3, r7, #12
 8004e70:	4619      	mov	r1, r3
 8004e72:	4805      	ldr	r0, [pc, #20]	; (8004e88 <HAL_TIM_MspPostInit+0x70>)
 8004e74:	f000 fe34 	bl	8005ae0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004e78:	bf00      	nop
 8004e7a:	3720      	adds	r7, #32
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	40010000 	.word	0x40010000
 8004e84:	40023800 	.word	0x40023800
 8004e88:	40020000 	.word	0x40020000

08004e8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b08c      	sub	sp, #48	; 0x30
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e94:	f107 031c 	add.w	r3, r7, #28
 8004e98:	2200      	movs	r2, #0
 8004e9a:	601a      	str	r2, [r3, #0]
 8004e9c:	605a      	str	r2, [r3, #4]
 8004e9e:	609a      	str	r2, [r3, #8]
 8004ea0:	60da      	str	r2, [r3, #12]
 8004ea2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a3a      	ldr	r2, [pc, #232]	; (8004f94 <HAL_UART_MspInit+0x108>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d135      	bne.n	8004f1a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004eae:	2300      	movs	r3, #0
 8004eb0:	61bb      	str	r3, [r7, #24]
 8004eb2:	4b39      	ldr	r3, [pc, #228]	; (8004f98 <HAL_UART_MspInit+0x10c>)
 8004eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eb6:	4a38      	ldr	r2, [pc, #224]	; (8004f98 <HAL_UART_MspInit+0x10c>)
 8004eb8:	f043 0310 	orr.w	r3, r3, #16
 8004ebc:	6453      	str	r3, [r2, #68]	; 0x44
 8004ebe:	4b36      	ldr	r3, [pc, #216]	; (8004f98 <HAL_UART_MspInit+0x10c>)
 8004ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ec2:	f003 0310 	and.w	r3, r3, #16
 8004ec6:	61bb      	str	r3, [r7, #24]
 8004ec8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004eca:	2300      	movs	r3, #0
 8004ecc:	617b      	str	r3, [r7, #20]
 8004ece:	4b32      	ldr	r3, [pc, #200]	; (8004f98 <HAL_UART_MspInit+0x10c>)
 8004ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed2:	4a31      	ldr	r2, [pc, #196]	; (8004f98 <HAL_UART_MspInit+0x10c>)
 8004ed4:	f043 0301 	orr.w	r3, r3, #1
 8004ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8004eda:	4b2f      	ldr	r3, [pc, #188]	; (8004f98 <HAL_UART_MspInit+0x10c>)
 8004edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ede:	f003 0301 	and.w	r3, r3, #1
 8004ee2:	617b      	str	r3, [r7, #20]
 8004ee4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004ee6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004eea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004eec:	2302      	movs	r3, #2
 8004eee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004ef8:	2307      	movs	r3, #7
 8004efa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004efc:	f107 031c 	add.w	r3, r7, #28
 8004f00:	4619      	mov	r1, r3
 8004f02:	4826      	ldr	r0, [pc, #152]	; (8004f9c <HAL_UART_MspInit+0x110>)
 8004f04:	f000 fdec 	bl	8005ae0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004f08:	2200      	movs	r2, #0
 8004f0a:	2100      	movs	r1, #0
 8004f0c:	2025      	movs	r0, #37	; 0x25
 8004f0e:	f000 fd1e 	bl	800594e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004f12:	2025      	movs	r0, #37	; 0x25
 8004f14:	f000 fd37 	bl	8005986 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004f18:	e038      	b.n	8004f8c <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a20      	ldr	r2, [pc, #128]	; (8004fa0 <HAL_UART_MspInit+0x114>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d133      	bne.n	8004f8c <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004f24:	2300      	movs	r3, #0
 8004f26:	613b      	str	r3, [r7, #16]
 8004f28:	4b1b      	ldr	r3, [pc, #108]	; (8004f98 <HAL_UART_MspInit+0x10c>)
 8004f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2c:	4a1a      	ldr	r2, [pc, #104]	; (8004f98 <HAL_UART_MspInit+0x10c>)
 8004f2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f32:	6413      	str	r3, [r2, #64]	; 0x40
 8004f34:	4b18      	ldr	r3, [pc, #96]	; (8004f98 <HAL_UART_MspInit+0x10c>)
 8004f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f3c:	613b      	str	r3, [r7, #16]
 8004f3e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f40:	2300      	movs	r3, #0
 8004f42:	60fb      	str	r3, [r7, #12]
 8004f44:	4b14      	ldr	r3, [pc, #80]	; (8004f98 <HAL_UART_MspInit+0x10c>)
 8004f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f48:	4a13      	ldr	r2, [pc, #76]	; (8004f98 <HAL_UART_MspInit+0x10c>)
 8004f4a:	f043 0301 	orr.w	r3, r3, #1
 8004f4e:	6313      	str	r3, [r2, #48]	; 0x30
 8004f50:	4b11      	ldr	r3, [pc, #68]	; (8004f98 <HAL_UART_MspInit+0x10c>)
 8004f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f54:	f003 0301 	and.w	r3, r3, #1
 8004f58:	60fb      	str	r3, [r7, #12]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004f5c:	230c      	movs	r3, #12
 8004f5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f60:	2302      	movs	r3, #2
 8004f62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f64:	2300      	movs	r3, #0
 8004f66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004f6c:	2307      	movs	r3, #7
 8004f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f70:	f107 031c 	add.w	r3, r7, #28
 8004f74:	4619      	mov	r1, r3
 8004f76:	4809      	ldr	r0, [pc, #36]	; (8004f9c <HAL_UART_MspInit+0x110>)
 8004f78:	f000 fdb2 	bl	8005ae0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	2100      	movs	r1, #0
 8004f80:	2026      	movs	r0, #38	; 0x26
 8004f82:	f000 fce4 	bl	800594e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004f86:	2026      	movs	r0, #38	; 0x26
 8004f88:	f000 fcfd 	bl	8005986 <HAL_NVIC_EnableIRQ>
}
 8004f8c:	bf00      	nop
 8004f8e:	3730      	adds	r7, #48	; 0x30
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	40011000 	.word	0x40011000
 8004f98:	40023800 	.word	0x40023800
 8004f9c:	40020000 	.word	0x40020000
 8004fa0:	40004400 	.word	0x40004400

08004fa4 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b086      	sub	sp, #24
 8004fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8004faa:	1d3b      	adds	r3, r7, #4
 8004fac:	2200      	movs	r2, #0
 8004fae:	601a      	str	r2, [r3, #0]
 8004fb0:	605a      	str	r2, [r3, #4]
 8004fb2:	609a      	str	r2, [r3, #8]
 8004fb4:	60da      	str	r2, [r3, #12]
 8004fb6:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8004fb8:	4b1c      	ldr	r3, [pc, #112]	; (800502c <HAL_FSMC_MspInit+0x88>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d131      	bne.n	8005024 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8004fc0:	4b1a      	ldr	r3, [pc, #104]	; (800502c <HAL_FSMC_MspInit+0x88>)
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	603b      	str	r3, [r7, #0]
 8004fca:	4b19      	ldr	r3, [pc, #100]	; (8005030 <HAL_FSMC_MspInit+0x8c>)
 8004fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fce:	4a18      	ldr	r2, [pc, #96]	; (8005030 <HAL_FSMC_MspInit+0x8c>)
 8004fd0:	f043 0301 	orr.w	r3, r3, #1
 8004fd4:	6393      	str	r3, [r2, #56]	; 0x38
 8004fd6:	4b16      	ldr	r3, [pc, #88]	; (8005030 <HAL_FSMC_MspInit+0x8c>)
 8004fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fda:	f003 0301 	and.w	r3, r3, #1
 8004fde:	603b      	str	r3, [r7, #0]
 8004fe0:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8004fe2:	f64f 7380 	movw	r3, #65408	; 0xff80
 8004fe6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fe8:	2302      	movs	r3, #2
 8004fea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fec:	2300      	movs	r3, #0
 8004fee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ff0:	2303      	movs	r3, #3
 8004ff2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8004ff4:	230c      	movs	r3, #12
 8004ff6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004ff8:	1d3b      	adds	r3, r7, #4
 8004ffa:	4619      	mov	r1, r3
 8004ffc:	480d      	ldr	r0, [pc, #52]	; (8005034 <HAL_FSMC_MspInit+0x90>)
 8004ffe:	f000 fd6f 	bl	8005ae0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13
 8005002:	f24e 73b3 	movw	r3, #59315	; 0xe7b3
 8005006:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005008:	2302      	movs	r3, #2
 800500a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800500c:	2300      	movs	r3, #0
 800500e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005010:	2303      	movs	r3, #3
 8005012:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8005014:	230c      	movs	r3, #12
 8005016:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005018:	1d3b      	adds	r3, r7, #4
 800501a:	4619      	mov	r1, r3
 800501c:	4806      	ldr	r0, [pc, #24]	; (8005038 <HAL_FSMC_MspInit+0x94>)
 800501e:	f000 fd5f 	bl	8005ae0 <HAL_GPIO_Init>
 8005022:	e000      	b.n	8005026 <HAL_FSMC_MspInit+0x82>
    return;
 8005024:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8005026:	3718      	adds	r7, #24
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}
 800502c:	20002a2c 	.word	0x20002a2c
 8005030:	40023800 	.word	0x40023800
 8005034:	40021000 	.word	0x40021000
 8005038:	40020c00 	.word	0x40020c00

0800503c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 800503c:	b580      	push	{r7, lr}
 800503e:	b082      	sub	sp, #8
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8005044:	f7ff ffae 	bl	8004fa4 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8005048:	bf00      	nop
 800504a:	3708      	adds	r7, #8
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}

08005050 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005050:	b480      	push	{r7}
 8005052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005054:	e7fe      	b.n	8005054 <NMI_Handler+0x4>

08005056 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005056:	b480      	push	{r7}
 8005058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800505a:	e7fe      	b.n	800505a <HardFault_Handler+0x4>

0800505c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800505c:	b480      	push	{r7}
 800505e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005060:	e7fe      	b.n	8005060 <MemManage_Handler+0x4>

08005062 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005062:	b480      	push	{r7}
 8005064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005066:	e7fe      	b.n	8005066 <BusFault_Handler+0x4>

08005068 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005068:	b480      	push	{r7}
 800506a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800506c:	e7fe      	b.n	800506c <UsageFault_Handler+0x4>

0800506e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800506e:	b480      	push	{r7}
 8005070:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005072:	bf00      	nop
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr

0800507c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800507c:	b480      	push	{r7}
 800507e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005080:	bf00      	nop
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr

0800508a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800508a:	b480      	push	{r7}
 800508c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800508e:	bf00      	nop
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr

08005098 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800509c:	f000 fb38 	bl	8005710 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80050a0:	bf00      	nop
 80050a2:	bd80      	pop	{r7, pc}

080050a4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80050a8:	2010      	movs	r0, #16
 80050aa:	f000 fecf 	bl	8005e4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80050ae:	bf00      	nop
 80050b0:	bd80      	pop	{r7, pc}
	...

080050b4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b082      	sub	sp, #8
 80050b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  static int ledVal = 0;
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, ledVal);
 80050ba:	4b24      	ldr	r3, [pc, #144]	; (800514c <USART1_IRQHandler+0x98>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	461a      	mov	r2, r3
 80050c2:	2108      	movs	r1, #8
 80050c4:	4822      	ldr	r0, [pc, #136]	; (8005150 <USART1_IRQHandler+0x9c>)
 80050c6:	f000 fea7 	bl	8005e18 <HAL_GPIO_WritePin>
  ledVal = !ledVal;
 80050ca:	4b20      	ldr	r3, [pc, #128]	; (800514c <USART1_IRQHandler+0x98>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	bf0c      	ite	eq
 80050d2:	2301      	moveq	r3, #1
 80050d4:	2300      	movne	r3, #0
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	461a      	mov	r2, r3
 80050da:	4b1c      	ldr	r3, [pc, #112]	; (800514c <USART1_IRQHandler+0x98>)
 80050dc:	601a      	str	r2, [r3, #0]
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80050de:	481d      	ldr	r0, [pc, #116]	; (8005154 <USART1_IRQHandler+0xa0>)
 80050e0:	f003 fbe0 	bl	80088a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  volatile unsigned int IIR;
  IIR = USART1->SR;
 80050e4:	4b1c      	ldr	r3, [pc, #112]	; (8005158 <USART1_IRQHandler+0xa4>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	603b      	str	r3, [r7, #0]
  if(IIR & UART_FLAG_RXNE){
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	f003 0320 	and.w	r3, r3, #32
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d009      	beq.n	8005108 <USART1_IRQHandler+0x54>
  		//Read Data Register Not Empty
  		char t = USART1->DR; // the character from the USART1 data register is saved in t
 80050f4:	4b18      	ldr	r3, [pc, #96]	; (8005158 <USART1_IRQHandler+0xa4>)
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	71fb      	strb	r3, [r7, #7]
  		put_in_rx_buffer(t,DBG_UART);
 80050fa:	4b18      	ldr	r3, [pc, #96]	; (800515c <USART1_IRQHandler+0xa8>)
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	79fb      	ldrb	r3, [r7, #7]
 8005100:	4611      	mov	r1, r2
 8005102:	4618      	mov	r0, r3
 8005104:	f000 f93c 	bl	8005380 <put_in_rx_buffer>
      }
  if(IIR & UART_FLAG_TXE){
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800510e:	2b00      	cmp	r3, #0
 8005110:	d018      	beq.n	8005144 <USART1_IRQHandler+0x90>
  		if(wr_pointer_dbg==rd_pointer_dbg){
 8005112:	4b13      	ldr	r3, [pc, #76]	; (8005160 <USART1_IRQHandler+0xac>)
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	4b13      	ldr	r3, [pc, #76]	; (8005164 <USART1_IRQHandler+0xb0>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	429a      	cmp	r2, r3
 800511c:	d108      	bne.n	8005130 <USART1_IRQHandler+0x7c>
  			__HAL_UART_DISABLE_IT(&huart1, UART_IT_TXE); //whole message transmitted
 800511e:	4b0d      	ldr	r3, [pc, #52]	; (8005154 <USART1_IRQHandler+0xa0>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	68da      	ldr	r2, [r3, #12]
 8005124:	4b0b      	ldr	r3, [pc, #44]	; (8005154 <USART1_IRQHandler+0xa0>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800512c:	60da      	str	r2, [r3, #12]
  		}
  	}


  /* USER CODE END USART1_IRQn 1 */
}
 800512e:	e009      	b.n	8005144 <USART1_IRQHandler+0x90>
  			DBG_UART->DR = get_from_tx_buffer(DBG_UART);
 8005130:	4b0a      	ldr	r3, [pc, #40]	; (800515c <USART1_IRQHandler+0xa8>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4618      	mov	r0, r3
 8005136:	f000 f975 	bl	8005424 <get_from_tx_buffer>
 800513a:	4603      	mov	r3, r0
 800513c:	461a      	mov	r2, r3
 800513e:	4b07      	ldr	r3, [pc, #28]	; (800515c <USART1_IRQHandler+0xa8>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	605a      	str	r2, [r3, #4]
}
 8005144:	bf00      	nop
 8005146:	3708      	adds	r7, #8
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}
 800514c:	20002a30 	.word	0x20002a30
 8005150:	40020400 	.word	0x40020400
 8005154:	20002150 	.word	0x20002150
 8005158:	40011000 	.word	0x40011000
 800515c:	20000018 	.word	0x20000018
 8005160:	20003244 	.word	0x20003244
 8005164:	20003240 	.word	0x20003240

08005168 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b082      	sub	sp, #8
 800516c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800516e:	481b      	ldr	r0, [pc, #108]	; (80051dc <USART2_IRQHandler+0x74>)
 8005170:	f003 fb98 	bl	80088a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  volatile unsigned int IIR;
  	IIR=USART2->SR;
 8005174:	4b1a      	ldr	r3, [pc, #104]	; (80051e0 <USART2_IRQHandler+0x78>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	603b      	str	r3, [r7, #0]
    if(IIR & UART_FLAG_RXNE){
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	f003 0320 	and.w	r3, r3, #32
 8005180:	2b00      	cmp	r3, #0
 8005182:	d009      	beq.n	8005198 <USART2_IRQHandler+0x30>
  		// check if the USART6 receive interrupt flag was set
  		char t = USART2->DR; // the character from the USART1 data register is saved in t
 8005184:	4b16      	ldr	r3, [pc, #88]	; (80051e0 <USART2_IRQHandler+0x78>)
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	71fb      	strb	r3, [r7, #7]
  		put_in_rx_buffer(t,RS485_UART);
 800518a:	4b16      	ldr	r3, [pc, #88]	; (80051e4 <USART2_IRQHandler+0x7c>)
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	79fb      	ldrb	r3, [r7, #7]
 8005190:	4611      	mov	r1, r2
 8005192:	4618      	mov	r0, r3
 8005194:	f000 f8f4 	bl	8005380 <put_in_rx_buffer>
      }
  	if(IIR & UART_FLAG_TXE){
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d017      	beq.n	80051d2 <USART2_IRQHandler+0x6a>
  		if(wr_pointer_rs485==rd_pointer_rs485){
 80051a2:	4b11      	ldr	r3, [pc, #68]	; (80051e8 <USART2_IRQHandler+0x80>)
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	4b11      	ldr	r3, [pc, #68]	; (80051ec <USART2_IRQHandler+0x84>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d108      	bne.n	80051c0 <USART2_IRQHandler+0x58>
  			__HAL_UART_DISABLE_IT(&huart2, UART_IT_TXE);
 80051ae:	4b0b      	ldr	r3, [pc, #44]	; (80051dc <USART2_IRQHandler+0x74>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	68da      	ldr	r2, [r3, #12]
 80051b4:	4b09      	ldr	r3, [pc, #36]	; (80051dc <USART2_IRQHandler+0x74>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80051bc:	60da      	str	r2, [r3, #12]
  			USART2->DR = get_from_tx_buffer(RS485_UART);
  		}
  	}

  /* USER CODE END USART2_IRQn 1 */
}
 80051be:	e008      	b.n	80051d2 <USART2_IRQHandler+0x6a>
  			USART2->DR = get_from_tx_buffer(RS485_UART);
 80051c0:	4b08      	ldr	r3, [pc, #32]	; (80051e4 <USART2_IRQHandler+0x7c>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4618      	mov	r0, r3
 80051c6:	f000 f92d 	bl	8005424 <get_from_tx_buffer>
 80051ca:	4603      	mov	r3, r0
 80051cc:	461a      	mov	r2, r3
 80051ce:	4b04      	ldr	r3, [pc, #16]	; (80051e0 <USART2_IRQHandler+0x78>)
 80051d0:	605a      	str	r2, [r3, #4]
}
 80051d2:	bf00      	nop
 80051d4:	3708      	adds	r7, #8
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}
 80051da:	bf00      	nop
 80051dc:	20002194 	.word	0x20002194
 80051e0:	40004400 	.word	0x40004400
 80051e4:	20000014 	.word	0x20000014
 80051e8:	20002e3c 	.word	0x20002e3c
 80051ec:	20002e38 	.word	0x20002e38

080051f0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b086      	sub	sp, #24
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	60f8      	str	r0, [r7, #12]
 80051f8:	60b9      	str	r1, [r7, #8]
 80051fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80051fc:	2300      	movs	r3, #0
 80051fe:	617b      	str	r3, [r7, #20]
 8005200:	e00a      	b.n	8005218 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005202:	f3af 8000 	nop.w
 8005206:	4601      	mov	r1, r0
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	1c5a      	adds	r2, r3, #1
 800520c:	60ba      	str	r2, [r7, #8]
 800520e:	b2ca      	uxtb	r2, r1
 8005210:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	3301      	adds	r3, #1
 8005216:	617b      	str	r3, [r7, #20]
 8005218:	697a      	ldr	r2, [r7, #20]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	429a      	cmp	r2, r3
 800521e:	dbf0      	blt.n	8005202 <_read+0x12>
	}

return len;
 8005220:	687b      	ldr	r3, [r7, #4]
}
 8005222:	4618      	mov	r0, r3
 8005224:	3718      	adds	r7, #24
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}

0800522a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800522a:	b580      	push	{r7, lr}
 800522c:	b086      	sub	sp, #24
 800522e:	af00      	add	r7, sp, #0
 8005230:	60f8      	str	r0, [r7, #12]
 8005232:	60b9      	str	r1, [r7, #8]
 8005234:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005236:	2300      	movs	r3, #0
 8005238:	617b      	str	r3, [r7, #20]
 800523a:	e009      	b.n	8005250 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	1c5a      	adds	r2, r3, #1
 8005240:	60ba      	str	r2, [r7, #8]
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	4618      	mov	r0, r3
 8005246:	f000 f889 	bl	800535c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	3301      	adds	r3, #1
 800524e:	617b      	str	r3, [r7, #20]
 8005250:	697a      	ldr	r2, [r7, #20]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	429a      	cmp	r2, r3
 8005256:	dbf1      	blt.n	800523c <_write+0x12>
	}
	return len;
 8005258:	687b      	ldr	r3, [r7, #4]
}
 800525a:	4618      	mov	r0, r3
 800525c:	3718      	adds	r7, #24
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}

08005262 <_close>:

int _close(int file)
{
 8005262:	b480      	push	{r7}
 8005264:	b083      	sub	sp, #12
 8005266:	af00      	add	r7, sp, #0
 8005268:	6078      	str	r0, [r7, #4]
	return -1;
 800526a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800526e:	4618      	mov	r0, r3
 8005270:	370c      	adds	r7, #12
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr

0800527a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800527a:	b480      	push	{r7}
 800527c:	b083      	sub	sp, #12
 800527e:	af00      	add	r7, sp, #0
 8005280:	6078      	str	r0, [r7, #4]
 8005282:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800528a:	605a      	str	r2, [r3, #4]
	return 0;
 800528c:	2300      	movs	r3, #0
}
 800528e:	4618      	mov	r0, r3
 8005290:	370c      	adds	r7, #12
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr

0800529a <_isatty>:

int _isatty(int file)
{
 800529a:	b480      	push	{r7}
 800529c:	b083      	sub	sp, #12
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]
	return 1;
 80052a2:	2301      	movs	r3, #1
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	370c      	adds	r7, #12
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr

080052b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b085      	sub	sp, #20
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	60b9      	str	r1, [r7, #8]
 80052ba:	607a      	str	r2, [r7, #4]
	return 0;
 80052bc:	2300      	movs	r3, #0
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3714      	adds	r7, #20
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr
	...

080052cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b086      	sub	sp, #24
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80052d4:	4a14      	ldr	r2, [pc, #80]	; (8005328 <_sbrk+0x5c>)
 80052d6:	4b15      	ldr	r3, [pc, #84]	; (800532c <_sbrk+0x60>)
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80052e0:	4b13      	ldr	r3, [pc, #76]	; (8005330 <_sbrk+0x64>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d102      	bne.n	80052ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80052e8:	4b11      	ldr	r3, [pc, #68]	; (8005330 <_sbrk+0x64>)
 80052ea:	4a12      	ldr	r2, [pc, #72]	; (8005334 <_sbrk+0x68>)
 80052ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80052ee:	4b10      	ldr	r3, [pc, #64]	; (8005330 <_sbrk+0x64>)
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4413      	add	r3, r2
 80052f6:	693a      	ldr	r2, [r7, #16]
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d207      	bcs.n	800530c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80052fc:	f004 fae2 	bl	80098c4 <__errno>
 8005300:	4603      	mov	r3, r0
 8005302:	220c      	movs	r2, #12
 8005304:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005306:	f04f 33ff 	mov.w	r3, #4294967295
 800530a:	e009      	b.n	8005320 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800530c:	4b08      	ldr	r3, [pc, #32]	; (8005330 <_sbrk+0x64>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005312:	4b07      	ldr	r3, [pc, #28]	; (8005330 <_sbrk+0x64>)
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4413      	add	r3, r2
 800531a:	4a05      	ldr	r2, [pc, #20]	; (8005330 <_sbrk+0x64>)
 800531c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800531e:	68fb      	ldr	r3, [r7, #12]
}
 8005320:	4618      	mov	r0, r3
 8005322:	3718      	adds	r7, #24
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}
 8005328:	20020000 	.word	0x20020000
 800532c:	00000400 	.word	0x00000400
 8005330:	20002a34 	.word	0x20002a34
 8005334:	20005670 	.word	0x20005670

08005338 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005338:	b480      	push	{r7}
 800533a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800533c:	4b06      	ldr	r3, [pc, #24]	; (8005358 <SystemInit+0x20>)
 800533e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005342:	4a05      	ldr	r2, [pc, #20]	; (8005358 <SystemInit+0x20>)
 8005344:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005348:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800534c:	bf00      	nop
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr
 8005356:	bf00      	nop
 8005358:	e000ed00 	.word	0xe000ed00

0800535c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

//redirect printf to uart1.
PUTCHAR_PROTOTYPE{
 800535c:	b580      	push	{r7, lr}
 800535e:	b082      	sub	sp, #8
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 0xffff);
 8005364:	1d39      	adds	r1, r7, #4
 8005366:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800536a:	2201      	movs	r2, #1
 800536c:	4803      	ldr	r0, [pc, #12]	; (800537c <__io_putchar+0x20>)
 800536e:	f003 fa06 	bl	800877e <HAL_UART_Transmit>
	return ch;
 8005372:	687b      	ldr	r3, [r7, #4]
}
 8005374:	4618      	mov	r0, r3
 8005376:	3708      	adds	r7, #8
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}
 800537c:	20002150 	.word	0x20002150

08005380 <put_in_rx_buffer>:

void put_in_rx_buffer(char data, USART_TypeDef* USARTx)
{
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
 8005386:	4603      	mov	r3, r0
 8005388:	6039      	str	r1, [r7, #0]
 800538a:	71fb      	strb	r3, [r7, #7]
	if(USARTx == DBG_UART)
 800538c:	4b1d      	ldr	r3, [pc, #116]	; (8005404 <put_in_rx_buffer+0x84>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	683a      	ldr	r2, [r7, #0]
 8005392:	429a      	cmp	r2, r3
 8005394:	d114      	bne.n	80053c0 <put_in_rx_buffer+0x40>
	{
		if(SIO_RBUFLEN_DBG>=LEN_RX_BUFFER_DBG)
 8005396:	4b1c      	ldr	r3, [pc, #112]	; (8005408 <put_in_rx_buffer+0x88>)
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	4b1c      	ldr	r3, [pc, #112]	; (800540c <put_in_rx_buffer+0x8c>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	1ad3      	subs	r3, r2, r3
 80053a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053a4:	d226      	bcs.n	80053f4 <put_in_rx_buffer+0x74>
			{
				return;
			}
		rx_buffer_dbg[wr_pointer_rx_dbg & (LEN_RX_BUFFER_DBG - 1)]=data;
 80053a6:	4b18      	ldr	r3, [pc, #96]	; (8005408 <put_in_rx_buffer+0x88>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80053ae:	4918      	ldr	r1, [pc, #96]	; (8005410 <put_in_rx_buffer+0x90>)
 80053b0:	79fa      	ldrb	r2, [r7, #7]
 80053b2:	54ca      	strb	r2, [r1, r3]
		wr_pointer_rx_dbg++;
 80053b4:	4b14      	ldr	r3, [pc, #80]	; (8005408 <put_in_rx_buffer+0x88>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	3301      	adds	r3, #1
 80053ba:	4a13      	ldr	r2, [pc, #76]	; (8005408 <put_in_rx_buffer+0x88>)
 80053bc:	6013      	str	r3, [r2, #0]
 80053be:	e01c      	b.n	80053fa <put_in_rx_buffer+0x7a>
	}
	else if(USARTx == RS485_UART)
 80053c0:	4b14      	ldr	r3, [pc, #80]	; (8005414 <put_in_rx_buffer+0x94>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	683a      	ldr	r2, [r7, #0]
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d117      	bne.n	80053fa <put_in_rx_buffer+0x7a>
	{
		if(SIO_RBUFLEN_RS485>=LEN_RX_BUFFER_RS485)
 80053ca:	4b13      	ldr	r3, [pc, #76]	; (8005418 <put_in_rx_buffer+0x98>)
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	4b13      	ldr	r3, [pc, #76]	; (800541c <put_in_rx_buffer+0x9c>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	1ad3      	subs	r3, r2, r3
 80053d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053d8:	d20e      	bcs.n	80053f8 <put_in_rx_buffer+0x78>
			{
				return;
			}
		rx_buffer_rs485[wr_pointer_rx_rs485 & (LEN_RX_BUFFER_RS485 - 1)]=data;
 80053da:	4b0f      	ldr	r3, [pc, #60]	; (8005418 <put_in_rx_buffer+0x98>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053e2:	490f      	ldr	r1, [pc, #60]	; (8005420 <put_in_rx_buffer+0xa0>)
 80053e4:	79fa      	ldrb	r2, [r7, #7]
 80053e6:	54ca      	strb	r2, [r1, r3]
		wr_pointer_rx_rs485++;
 80053e8:	4b0b      	ldr	r3, [pc, #44]	; (8005418 <put_in_rx_buffer+0x98>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	3301      	adds	r3, #1
 80053ee:	4a0a      	ldr	r2, [pc, #40]	; (8005418 <put_in_rx_buffer+0x98>)
 80053f0:	6013      	str	r3, [r2, #0]
 80053f2:	e002      	b.n	80053fa <put_in_rx_buffer+0x7a>
				return;
 80053f4:	bf00      	nop
 80053f6:	e000      	b.n	80053fa <put_in_rx_buffer+0x7a>
				return;
 80053f8:	bf00      	nop
	}
}
 80053fa:	370c      	adds	r7, #12
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr
 8005404:	20000018 	.word	0x20000018
 8005408:	20005654 	.word	0x20005654
 800540c:	20005650 	.word	0x20005650
 8005410:	20003650 	.word	0x20003650
 8005414:	20000014 	.word	0x20000014
 8005418:	2000364c 	.word	0x2000364c
 800541c:	20003648 	.word	0x20003648
 8005420:	20003248 	.word	0x20003248

08005424 <get_from_tx_buffer>:
		tx_buffer_dbg[wr_pointer_dbg & (LEN_TX_BUFFER_DBG - 1)]=data;
		wr_pointer_dbg++;
	}
}
char get_from_tx_buffer(USART_TypeDef* USARTx)
{
 8005424:	b480      	push	{r7}
 8005426:	b085      	sub	sp, #20
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
	char data;

	if(USARTx == RS485_UART)
 800542c:	4b14      	ldr	r3, [pc, #80]	; (8005480 <get_from_tx_buffer+0x5c>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	429a      	cmp	r2, r3
 8005434:	d10c      	bne.n	8005450 <get_from_tx_buffer+0x2c>
	{

		data=tx_buffer_rs485[rd_pointer_rs485 & (LEN_TX_BUFFER_RS485-1)];
 8005436:	4b13      	ldr	r3, [pc, #76]	; (8005484 <get_from_tx_buffer+0x60>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800543e:	4a12      	ldr	r2, [pc, #72]	; (8005488 <get_from_tx_buffer+0x64>)
 8005440:	5cd3      	ldrb	r3, [r2, r3]
 8005442:	73fb      	strb	r3, [r7, #15]
		rd_pointer_rs485++;
 8005444:	4b0f      	ldr	r3, [pc, #60]	; (8005484 <get_from_tx_buffer+0x60>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	3301      	adds	r3, #1
 800544a:	4a0e      	ldr	r2, [pc, #56]	; (8005484 <get_from_tx_buffer+0x60>)
 800544c:	6013      	str	r3, [r2, #0]
 800544e:	e010      	b.n	8005472 <get_from_tx_buffer+0x4e>
	}
	else if(USARTx == DBG_UART)
 8005450:	4b0e      	ldr	r3, [pc, #56]	; (800548c <get_from_tx_buffer+0x68>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	429a      	cmp	r2, r3
 8005458:	d10b      	bne.n	8005472 <get_from_tx_buffer+0x4e>
	{

		data=tx_buffer_dbg[rd_pointer_dbg & (LEN_TX_BUFFER_DBG-1)];
 800545a:	4b0d      	ldr	r3, [pc, #52]	; (8005490 <get_from_tx_buffer+0x6c>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005462:	4a0c      	ldr	r2, [pc, #48]	; (8005494 <get_from_tx_buffer+0x70>)
 8005464:	5cd3      	ldrb	r3, [r2, r3]
 8005466:	73fb      	strb	r3, [r7, #15]
		rd_pointer_dbg++;
 8005468:	4b09      	ldr	r3, [pc, #36]	; (8005490 <get_from_tx_buffer+0x6c>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	3301      	adds	r3, #1
 800546e:	4a08      	ldr	r2, [pc, #32]	; (8005490 <get_from_tx_buffer+0x6c>)
 8005470:	6013      	str	r3, [r2, #0]
	}
	return data;
 8005472:	7bfb      	ldrb	r3, [r7, #15]
}
 8005474:	4618      	mov	r0, r3
 8005476:	3714      	adds	r7, #20
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr
 8005480:	20000014 	.word	0x20000014
 8005484:	20002e38 	.word	0x20002e38
 8005488:	20002a38 	.word	0x20002a38
 800548c:	20000018 	.word	0x20000018
 8005490:	20003240 	.word	0x20003240
 8005494:	20002e40 	.word	0x20002e40

08005498 <get_from_rx_buffer>:
char get_from_rx_buffer(USART_TypeDef* USARTx)
{
 8005498:	b480      	push	{r7}
 800549a:	b085      	sub	sp, #20
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
	char data;

	if(USARTx == RS485_UART)
 80054a0:	4b14      	ldr	r3, [pc, #80]	; (80054f4 <get_from_rx_buffer+0x5c>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d10c      	bne.n	80054c4 <get_from_rx_buffer+0x2c>
	{

		data=rx_buffer_rs485[rd_pointer_rx_rs485 & (LEN_RX_BUFFER_RS485-1)];
 80054aa:	4b13      	ldr	r3, [pc, #76]	; (80054f8 <get_from_rx_buffer+0x60>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054b2:	4a12      	ldr	r2, [pc, #72]	; (80054fc <get_from_rx_buffer+0x64>)
 80054b4:	5cd3      	ldrb	r3, [r2, r3]
 80054b6:	73fb      	strb	r3, [r7, #15]
		rd_pointer_rx_rs485++;
 80054b8:	4b0f      	ldr	r3, [pc, #60]	; (80054f8 <get_from_rx_buffer+0x60>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	3301      	adds	r3, #1
 80054be:	4a0e      	ldr	r2, [pc, #56]	; (80054f8 <get_from_rx_buffer+0x60>)
 80054c0:	6013      	str	r3, [r2, #0]
 80054c2:	e010      	b.n	80054e6 <get_from_rx_buffer+0x4e>
	}
	else if(USARTx == DBG_UART)
 80054c4:	4b0e      	ldr	r3, [pc, #56]	; (8005500 <get_from_rx_buffer+0x68>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d10b      	bne.n	80054e6 <get_from_rx_buffer+0x4e>
	{

		data=rx_buffer_dbg[rd_pointer_rx_dbg & (LEN_RX_BUFFER_DBG-1)];
 80054ce:	4b0d      	ldr	r3, [pc, #52]	; (8005504 <get_from_rx_buffer+0x6c>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80054d6:	4a0c      	ldr	r2, [pc, #48]	; (8005508 <get_from_rx_buffer+0x70>)
 80054d8:	5cd3      	ldrb	r3, [r2, r3]
 80054da:	73fb      	strb	r3, [r7, #15]
		rd_pointer_rx_dbg++;
 80054dc:	4b09      	ldr	r3, [pc, #36]	; (8005504 <get_from_rx_buffer+0x6c>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	3301      	adds	r3, #1
 80054e2:	4a08      	ldr	r2, [pc, #32]	; (8005504 <get_from_rx_buffer+0x6c>)
 80054e4:	6013      	str	r3, [r2, #0]
	}
	return data;
 80054e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3714      	adds	r7, #20
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr
 80054f4:	20000014 	.word	0x20000014
 80054f8:	20003648 	.word	0x20003648
 80054fc:	20003248 	.word	0x20003248
 8005500:	20000018 	.word	0x20000018
 8005504:	20005650 	.word	0x20005650
 8005508:	20003650 	.word	0x20003650

0800550c <usart_message_ready>:

	return 0;
}
//**************************************************************************************
char usart_message_ready(USART_TypeDef* USARTx, char delimiter)
{
 800550c:	b480      	push	{r7}
 800550e:	b085      	sub	sp, #20
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	460b      	mov	r3, r1
 8005516:	70fb      	strb	r3, [r7, #3]
	if (USARTx == DBG_UART)
 8005518:	4b1f      	ldr	r3, [pc, #124]	; (8005598 <usart_message_ready+0x8c>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	687a      	ldr	r2, [r7, #4]
 800551e:	429a      	cmp	r2, r3
 8005520:	d117      	bne.n	8005552 <usart_message_ready+0x46>
	{
		unsigned long tail = rd_pointer_rx_dbg;
 8005522:	4b1e      	ldr	r3, [pc, #120]	; (800559c <usart_message_ready+0x90>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	60fb      	str	r3, [r7, #12]

		while ((wr_pointer_rx_dbg - tail) != 0)
 8005528:	e00d      	b.n	8005546 <usart_message_ready+0x3a>
		{
			if (rx_buffer_dbg[tail & (LEN_RX_BUFFER_DBG - 1)] == delimiter)
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005530:	4a1b      	ldr	r2, [pc, #108]	; (80055a0 <usart_message_ready+0x94>)
 8005532:	5cd3      	ldrb	r3, [r2, r3]
 8005534:	b2db      	uxtb	r3, r3
 8005536:	78fa      	ldrb	r2, [r7, #3]
 8005538:	429a      	cmp	r2, r3
 800553a:	d101      	bne.n	8005540 <usart_message_ready+0x34>
				return 1;
 800553c:	2301      	movs	r3, #1
 800553e:	e025      	b.n	800558c <usart_message_ready+0x80>
			++tail;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	3301      	adds	r3, #1
 8005544:	60fb      	str	r3, [r7, #12]
		while ((wr_pointer_rx_dbg - tail) != 0)
 8005546:	4b17      	ldr	r3, [pc, #92]	; (80055a4 <usart_message_ready+0x98>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	68fa      	ldr	r2, [r7, #12]
 800554c:	429a      	cmp	r2, r3
 800554e:	d1ec      	bne.n	800552a <usart_message_ready+0x1e>
 8005550:	e01b      	b.n	800558a <usart_message_ready+0x7e>
		}
	}
	else if (USARTx == RS485_UART)
 8005552:	4b15      	ldr	r3, [pc, #84]	; (80055a8 <usart_message_ready+0x9c>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	429a      	cmp	r2, r3
 800555a:	d116      	bne.n	800558a <usart_message_ready+0x7e>
	{
		unsigned long tail = rd_pointer_rx_rs485;
 800555c:	4b13      	ldr	r3, [pc, #76]	; (80055ac <usart_message_ready+0xa0>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	60bb      	str	r3, [r7, #8]

		while ((wr_pointer_rx_rs485 - tail) != 0)
 8005562:	e00d      	b.n	8005580 <usart_message_ready+0x74>
		{
			if (rx_buffer_rs485[tail & (LEN_RX_BUFFER_RS485 - 1)] == delimiter)
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800556a:	4a11      	ldr	r2, [pc, #68]	; (80055b0 <usart_message_ready+0xa4>)
 800556c:	5cd3      	ldrb	r3, [r2, r3]
 800556e:	b2db      	uxtb	r3, r3
 8005570:	78fa      	ldrb	r2, [r7, #3]
 8005572:	429a      	cmp	r2, r3
 8005574:	d101      	bne.n	800557a <usart_message_ready+0x6e>
				return 1;
 8005576:	2301      	movs	r3, #1
 8005578:	e008      	b.n	800558c <usart_message_ready+0x80>
			++tail;
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	3301      	adds	r3, #1
 800557e:	60bb      	str	r3, [r7, #8]
		while ((wr_pointer_rx_rs485 - tail) != 0)
 8005580:	4b0c      	ldr	r3, [pc, #48]	; (80055b4 <usart_message_ready+0xa8>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	68ba      	ldr	r2, [r7, #8]
 8005586:	429a      	cmp	r2, r3
 8005588:	d1ec      	bne.n	8005564 <usart_message_ready+0x58>
		}
	}
	return 0;
 800558a:	2300      	movs	r3, #0
}
 800558c:	4618      	mov	r0, r3
 800558e:	3714      	adds	r7, #20
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr
 8005598:	20000018 	.word	0x20000018
 800559c:	20005650 	.word	0x20005650
 80055a0:	20003650 	.word	0x20003650
 80055a4:	20005654 	.word	0x20005654
 80055a8:	20000014 	.word	0x20000014
 80055ac:	20003648 	.word	0x20003648
 80055b0:	20003248 	.word	0x20003248
 80055b4:	2000364c 	.word	0x2000364c

080055b8 <read_usart_message>:
/*
 * Reads message from specified uart rx buffer into @dst until @delimiter character is encountered or @max_len exceeded.
 * Returns: number of characters read if successful, zero when there is no message ready to be read.
 */
unsigned int read_usart_message(char* dst, UART_HandleTypeDef* huart, int max_len, char delimiter)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b086      	sub	sp, #24
 80055bc:	af00      	add	r7, sp, #0
 80055be:	60f8      	str	r0, [r7, #12]
 80055c0:	60b9      	str	r1, [r7, #8]
 80055c2:	607a      	str	r2, [r7, #4]
 80055c4:	70fb      	strb	r3, [r7, #3]
	USART_TypeDef* USARTx = huart->Instance;
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	613b      	str	r3, [r7, #16]
	if (usart_message_ready(USARTx,delimiter))
 80055cc:	78fb      	ldrb	r3, [r7, #3]
 80055ce:	4619      	mov	r1, r3
 80055d0:	6938      	ldr	r0, [r7, #16]
 80055d2:	f7ff ff9b 	bl	800550c <usart_message_ready>
 80055d6:	4603      	mov	r3, r0
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d018      	beq.n	800560e <read_usart_message+0x56>
	{
		int nr = 0;
 80055dc:	2300      	movs	r3, #0
 80055de:	617b      	str	r3, [r7, #20]
		do
		{
			*dst = get_from_rx_buffer(USARTx);
 80055e0:	6938      	ldr	r0, [r7, #16]
 80055e2:	f7ff ff59 	bl	8005498 <get_from_rx_buffer>
 80055e6:	4603      	mov	r3, r0
 80055e8:	461a      	mov	r2, r3
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	701a      	strb	r2, [r3, #0]
			++nr;
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	3301      	adds	r3, #1
 80055f2:	617b      	str	r3, [r7, #20]
		} while (*dst++ != delimiter && nr < max_len);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	1c5a      	adds	r2, r3, #1
 80055f8:	60fa      	str	r2, [r7, #12]
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	78fa      	ldrb	r2, [r7, #3]
 80055fe:	429a      	cmp	r2, r3
 8005600:	d003      	beq.n	800560a <read_usart_message+0x52>
 8005602:	697a      	ldr	r2, [r7, #20]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	429a      	cmp	r2, r3
 8005608:	dbea      	blt.n	80055e0 <read_usart_message+0x28>

		return nr;
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	e000      	b.n	8005610 <read_usart_message+0x58>
	}
	return 0;
 800560e:	2300      	movs	r3, #0
}
 8005610:	4618      	mov	r0, r3
 8005612:	3718      	adds	r7, #24
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}

08005618 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005618:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005650 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800561c:	480d      	ldr	r0, [pc, #52]	; (8005654 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800561e:	490e      	ldr	r1, [pc, #56]	; (8005658 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005620:	4a0e      	ldr	r2, [pc, #56]	; (800565c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005622:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005624:	e002      	b.n	800562c <LoopCopyDataInit>

08005626 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005626:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005628:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800562a:	3304      	adds	r3, #4

0800562c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800562c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800562e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005630:	d3f9      	bcc.n	8005626 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005632:	4a0b      	ldr	r2, [pc, #44]	; (8005660 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005634:	4c0b      	ldr	r4, [pc, #44]	; (8005664 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005636:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005638:	e001      	b.n	800563e <LoopFillZerobss>

0800563a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800563a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800563c:	3204      	adds	r2, #4

0800563e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800563e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005640:	d3fb      	bcc.n	800563a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005642:	f7ff fe79 	bl	8005338 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005646:	f004 f943 	bl	80098d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800564a:	f7fe facb 	bl	8003be4 <main>
  bx  lr    
 800564e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005650:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005654:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005658:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 800565c:	0800bd90 	.word	0x0800bd90
  ldr r2, =_sbss
 8005660:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8005664:	2000566c 	.word	0x2000566c

08005668 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005668:	e7fe      	b.n	8005668 <ADC_IRQHandler>
	...

0800566c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005670:	4b0e      	ldr	r3, [pc, #56]	; (80056ac <HAL_Init+0x40>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a0d      	ldr	r2, [pc, #52]	; (80056ac <HAL_Init+0x40>)
 8005676:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800567a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800567c:	4b0b      	ldr	r3, [pc, #44]	; (80056ac <HAL_Init+0x40>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a0a      	ldr	r2, [pc, #40]	; (80056ac <HAL_Init+0x40>)
 8005682:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005686:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005688:	4b08      	ldr	r3, [pc, #32]	; (80056ac <HAL_Init+0x40>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a07      	ldr	r2, [pc, #28]	; (80056ac <HAL_Init+0x40>)
 800568e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005692:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005694:	2003      	movs	r0, #3
 8005696:	f000 f94f 	bl	8005938 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800569a:	2000      	movs	r0, #0
 800569c:	f000 f808 	bl	80056b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80056a0:	f7ff fae0 	bl	8004c64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80056a4:	2300      	movs	r3, #0
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	bf00      	nop
 80056ac:	40023c00 	.word	0x40023c00

080056b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b082      	sub	sp, #8
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80056b8:	4b12      	ldr	r3, [pc, #72]	; (8005704 <HAL_InitTick+0x54>)
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	4b12      	ldr	r3, [pc, #72]	; (8005708 <HAL_InitTick+0x58>)
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	4619      	mov	r1, r3
 80056c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80056c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80056ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ce:	4618      	mov	r0, r3
 80056d0:	f000 f967 	bl	80059a2 <HAL_SYSTICK_Config>
 80056d4:	4603      	mov	r3, r0
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d001      	beq.n	80056de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	e00e      	b.n	80056fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2b0f      	cmp	r3, #15
 80056e2:	d80a      	bhi.n	80056fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80056e4:	2200      	movs	r2, #0
 80056e6:	6879      	ldr	r1, [r7, #4]
 80056e8:	f04f 30ff 	mov.w	r0, #4294967295
 80056ec:	f000 f92f 	bl	800594e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80056f0:	4a06      	ldr	r2, [pc, #24]	; (800570c <HAL_InitTick+0x5c>)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80056f6:	2300      	movs	r3, #0
 80056f8:	e000      	b.n	80056fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3708      	adds	r7, #8
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}
 8005704:	20000010 	.word	0x20000010
 8005708:	20000020 	.word	0x20000020
 800570c:	2000001c 	.word	0x2000001c

08005710 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005710:	b480      	push	{r7}
 8005712:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005714:	4b06      	ldr	r3, [pc, #24]	; (8005730 <HAL_IncTick+0x20>)
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	461a      	mov	r2, r3
 800571a:	4b06      	ldr	r3, [pc, #24]	; (8005734 <HAL_IncTick+0x24>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4413      	add	r3, r2
 8005720:	4a04      	ldr	r2, [pc, #16]	; (8005734 <HAL_IncTick+0x24>)
 8005722:	6013      	str	r3, [r2, #0]
}
 8005724:	bf00      	nop
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr
 800572e:	bf00      	nop
 8005730:	20000020 	.word	0x20000020
 8005734:	20005658 	.word	0x20005658

08005738 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005738:	b480      	push	{r7}
 800573a:	af00      	add	r7, sp, #0
  return uwTick;
 800573c:	4b03      	ldr	r3, [pc, #12]	; (800574c <HAL_GetTick+0x14>)
 800573e:	681b      	ldr	r3, [r3, #0]
}
 8005740:	4618      	mov	r0, r3
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr
 800574a:	bf00      	nop
 800574c:	20005658 	.word	0x20005658

08005750 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b084      	sub	sp, #16
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005758:	f7ff ffee 	bl	8005738 <HAL_GetTick>
 800575c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005768:	d005      	beq.n	8005776 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800576a:	4b0a      	ldr	r3, [pc, #40]	; (8005794 <HAL_Delay+0x44>)
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	461a      	mov	r2, r3
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	4413      	add	r3, r2
 8005774:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005776:	bf00      	nop
 8005778:	f7ff ffde 	bl	8005738 <HAL_GetTick>
 800577c:	4602      	mov	r2, r0
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	1ad3      	subs	r3, r2, r3
 8005782:	68fa      	ldr	r2, [r7, #12]
 8005784:	429a      	cmp	r2, r3
 8005786:	d8f7      	bhi.n	8005778 <HAL_Delay+0x28>
  {
  }
}
 8005788:	bf00      	nop
 800578a:	bf00      	nop
 800578c:	3710      	adds	r7, #16
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop
 8005794:	20000020 	.word	0x20000020

08005798 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005798:	b480      	push	{r7}
 800579a:	b085      	sub	sp, #20
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f003 0307 	and.w	r3, r3, #7
 80057a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80057a8:	4b0c      	ldr	r3, [pc, #48]	; (80057dc <__NVIC_SetPriorityGrouping+0x44>)
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80057ae:	68ba      	ldr	r2, [r7, #8]
 80057b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80057b4:	4013      	ands	r3, r2
 80057b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80057c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80057c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80057ca:	4a04      	ldr	r2, [pc, #16]	; (80057dc <__NVIC_SetPriorityGrouping+0x44>)
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	60d3      	str	r3, [r2, #12]
}
 80057d0:	bf00      	nop
 80057d2:	3714      	adds	r7, #20
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr
 80057dc:	e000ed00 	.word	0xe000ed00

080057e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80057e0:	b480      	push	{r7}
 80057e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80057e4:	4b04      	ldr	r3, [pc, #16]	; (80057f8 <__NVIC_GetPriorityGrouping+0x18>)
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	0a1b      	lsrs	r3, r3, #8
 80057ea:	f003 0307 	and.w	r3, r3, #7
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr
 80057f8:	e000ed00 	.word	0xe000ed00

080057fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b083      	sub	sp, #12
 8005800:	af00      	add	r7, sp, #0
 8005802:	4603      	mov	r3, r0
 8005804:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800580a:	2b00      	cmp	r3, #0
 800580c:	db0b      	blt.n	8005826 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800580e:	79fb      	ldrb	r3, [r7, #7]
 8005810:	f003 021f 	and.w	r2, r3, #31
 8005814:	4907      	ldr	r1, [pc, #28]	; (8005834 <__NVIC_EnableIRQ+0x38>)
 8005816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800581a:	095b      	lsrs	r3, r3, #5
 800581c:	2001      	movs	r0, #1
 800581e:	fa00 f202 	lsl.w	r2, r0, r2
 8005822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005826:	bf00      	nop
 8005828:	370c      	adds	r7, #12
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr
 8005832:	bf00      	nop
 8005834:	e000e100 	.word	0xe000e100

08005838 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005838:	b480      	push	{r7}
 800583a:	b083      	sub	sp, #12
 800583c:	af00      	add	r7, sp, #0
 800583e:	4603      	mov	r3, r0
 8005840:	6039      	str	r1, [r7, #0]
 8005842:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005848:	2b00      	cmp	r3, #0
 800584a:	db0a      	blt.n	8005862 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	b2da      	uxtb	r2, r3
 8005850:	490c      	ldr	r1, [pc, #48]	; (8005884 <__NVIC_SetPriority+0x4c>)
 8005852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005856:	0112      	lsls	r2, r2, #4
 8005858:	b2d2      	uxtb	r2, r2
 800585a:	440b      	add	r3, r1
 800585c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005860:	e00a      	b.n	8005878 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	b2da      	uxtb	r2, r3
 8005866:	4908      	ldr	r1, [pc, #32]	; (8005888 <__NVIC_SetPriority+0x50>)
 8005868:	79fb      	ldrb	r3, [r7, #7]
 800586a:	f003 030f 	and.w	r3, r3, #15
 800586e:	3b04      	subs	r3, #4
 8005870:	0112      	lsls	r2, r2, #4
 8005872:	b2d2      	uxtb	r2, r2
 8005874:	440b      	add	r3, r1
 8005876:	761a      	strb	r2, [r3, #24]
}
 8005878:	bf00      	nop
 800587a:	370c      	adds	r7, #12
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr
 8005884:	e000e100 	.word	0xe000e100
 8005888:	e000ed00 	.word	0xe000ed00

0800588c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800588c:	b480      	push	{r7}
 800588e:	b089      	sub	sp, #36	; 0x24
 8005890:	af00      	add	r7, sp, #0
 8005892:	60f8      	str	r0, [r7, #12]
 8005894:	60b9      	str	r1, [r7, #8]
 8005896:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f003 0307 	and.w	r3, r3, #7
 800589e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	f1c3 0307 	rsb	r3, r3, #7
 80058a6:	2b04      	cmp	r3, #4
 80058a8:	bf28      	it	cs
 80058aa:	2304      	movcs	r3, #4
 80058ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80058ae:	69fb      	ldr	r3, [r7, #28]
 80058b0:	3304      	adds	r3, #4
 80058b2:	2b06      	cmp	r3, #6
 80058b4:	d902      	bls.n	80058bc <NVIC_EncodePriority+0x30>
 80058b6:	69fb      	ldr	r3, [r7, #28]
 80058b8:	3b03      	subs	r3, #3
 80058ba:	e000      	b.n	80058be <NVIC_EncodePriority+0x32>
 80058bc:	2300      	movs	r3, #0
 80058be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80058c0:	f04f 32ff 	mov.w	r2, #4294967295
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	fa02 f303 	lsl.w	r3, r2, r3
 80058ca:	43da      	mvns	r2, r3
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	401a      	ands	r2, r3
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80058d4:	f04f 31ff 	mov.w	r1, #4294967295
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	fa01 f303 	lsl.w	r3, r1, r3
 80058de:	43d9      	mvns	r1, r3
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80058e4:	4313      	orrs	r3, r2
         );
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3724      	adds	r7, #36	; 0x24
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr
	...

080058f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b082      	sub	sp, #8
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	3b01      	subs	r3, #1
 8005900:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005904:	d301      	bcc.n	800590a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005906:	2301      	movs	r3, #1
 8005908:	e00f      	b.n	800592a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800590a:	4a0a      	ldr	r2, [pc, #40]	; (8005934 <SysTick_Config+0x40>)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	3b01      	subs	r3, #1
 8005910:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005912:	210f      	movs	r1, #15
 8005914:	f04f 30ff 	mov.w	r0, #4294967295
 8005918:	f7ff ff8e 	bl	8005838 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800591c:	4b05      	ldr	r3, [pc, #20]	; (8005934 <SysTick_Config+0x40>)
 800591e:	2200      	movs	r2, #0
 8005920:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005922:	4b04      	ldr	r3, [pc, #16]	; (8005934 <SysTick_Config+0x40>)
 8005924:	2207      	movs	r2, #7
 8005926:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005928:	2300      	movs	r3, #0
}
 800592a:	4618      	mov	r0, r3
 800592c:	3708      	adds	r7, #8
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}
 8005932:	bf00      	nop
 8005934:	e000e010 	.word	0xe000e010

08005938 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b082      	sub	sp, #8
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f7ff ff29 	bl	8005798 <__NVIC_SetPriorityGrouping>
}
 8005946:	bf00      	nop
 8005948:	3708      	adds	r7, #8
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}

0800594e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800594e:	b580      	push	{r7, lr}
 8005950:	b086      	sub	sp, #24
 8005952:	af00      	add	r7, sp, #0
 8005954:	4603      	mov	r3, r0
 8005956:	60b9      	str	r1, [r7, #8]
 8005958:	607a      	str	r2, [r7, #4]
 800595a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800595c:	2300      	movs	r3, #0
 800595e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005960:	f7ff ff3e 	bl	80057e0 <__NVIC_GetPriorityGrouping>
 8005964:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	68b9      	ldr	r1, [r7, #8]
 800596a:	6978      	ldr	r0, [r7, #20]
 800596c:	f7ff ff8e 	bl	800588c <NVIC_EncodePriority>
 8005970:	4602      	mov	r2, r0
 8005972:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005976:	4611      	mov	r1, r2
 8005978:	4618      	mov	r0, r3
 800597a:	f7ff ff5d 	bl	8005838 <__NVIC_SetPriority>
}
 800597e:	bf00      	nop
 8005980:	3718      	adds	r7, #24
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}

08005986 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005986:	b580      	push	{r7, lr}
 8005988:	b082      	sub	sp, #8
 800598a:	af00      	add	r7, sp, #0
 800598c:	4603      	mov	r3, r0
 800598e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005990:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005994:	4618      	mov	r0, r3
 8005996:	f7ff ff31 	bl	80057fc <__NVIC_EnableIRQ>
}
 800599a:	bf00      	nop
 800599c:	3708      	adds	r7, #8
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}

080059a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80059a2:	b580      	push	{r7, lr}
 80059a4:	b082      	sub	sp, #8
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f7ff ffa2 	bl	80058f4 <SysTick_Config>
 80059b0:	4603      	mov	r3, r0
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3708      	adds	r7, #8
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}

080059ba <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80059ba:	b580      	push	{r7, lr}
 80059bc:	b084      	sub	sp, #16
 80059be:	af00      	add	r7, sp, #0
 80059c0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059c6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80059c8:	f7ff feb6 	bl	8005738 <HAL_GetTick>
 80059cc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80059d4:	b2db      	uxtb	r3, r3
 80059d6:	2b02      	cmp	r3, #2
 80059d8:	d008      	beq.n	80059ec <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2280      	movs	r2, #128	; 0x80
 80059de:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2200      	movs	r2, #0
 80059e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	e052      	b.n	8005a92 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f022 0216 	bic.w	r2, r2, #22
 80059fa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	695a      	ldr	r2, [r3, #20]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a0a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d103      	bne.n	8005a1c <HAL_DMA_Abort+0x62>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d007      	beq.n	8005a2c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f022 0208 	bic.w	r2, r2, #8
 8005a2a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f022 0201 	bic.w	r2, r2, #1
 8005a3a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005a3c:	e013      	b.n	8005a66 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005a3e:	f7ff fe7b 	bl	8005738 <HAL_GetTick>
 8005a42:	4602      	mov	r2, r0
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	1ad3      	subs	r3, r2, r3
 8005a48:	2b05      	cmp	r3, #5
 8005a4a:	d90c      	bls.n	8005a66 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2220      	movs	r2, #32
 8005a50:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2203      	movs	r2, #3
 8005a56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005a62:	2303      	movs	r3, #3
 8005a64:	e015      	b.n	8005a92 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 0301 	and.w	r3, r3, #1
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d1e4      	bne.n	8005a3e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a78:	223f      	movs	r2, #63	; 0x3f
 8005a7a:	409a      	lsls	r2, r3
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005a90:	2300      	movs	r3, #0
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3710      	adds	r7, #16
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}

08005a9a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005a9a:	b480      	push	{r7}
 8005a9c:	b083      	sub	sp, #12
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005aa8:	b2db      	uxtb	r3, r3
 8005aaa:	2b02      	cmp	r3, #2
 8005aac:	d004      	beq.n	8005ab8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2280      	movs	r2, #128	; 0x80
 8005ab2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	e00c      	b.n	8005ad2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2205      	movs	r2, #5
 8005abc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f022 0201 	bic.w	r2, r2, #1
 8005ace:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005ad0:	2300      	movs	r3, #0
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	370c      	adds	r7, #12
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr
	...

08005ae0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b089      	sub	sp, #36	; 0x24
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005aea:	2300      	movs	r3, #0
 8005aec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005aee:	2300      	movs	r3, #0
 8005af0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005af2:	2300      	movs	r3, #0
 8005af4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005af6:	2300      	movs	r3, #0
 8005af8:	61fb      	str	r3, [r7, #28]
 8005afa:	e16b      	b.n	8005dd4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005afc:	2201      	movs	r2, #1
 8005afe:	69fb      	ldr	r3, [r7, #28]
 8005b00:	fa02 f303 	lsl.w	r3, r2, r3
 8005b04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	697a      	ldr	r2, [r7, #20]
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005b10:	693a      	ldr	r2, [r7, #16]
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	429a      	cmp	r2, r3
 8005b16:	f040 815a 	bne.w	8005dce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	f003 0303 	and.w	r3, r3, #3
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d005      	beq.n	8005b32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005b2e:	2b02      	cmp	r3, #2
 8005b30:	d130      	bne.n	8005b94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005b38:	69fb      	ldr	r3, [r7, #28]
 8005b3a:	005b      	lsls	r3, r3, #1
 8005b3c:	2203      	movs	r2, #3
 8005b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b42:	43db      	mvns	r3, r3
 8005b44:	69ba      	ldr	r2, [r7, #24]
 8005b46:	4013      	ands	r3, r2
 8005b48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	68da      	ldr	r2, [r3, #12]
 8005b4e:	69fb      	ldr	r3, [r7, #28]
 8005b50:	005b      	lsls	r3, r3, #1
 8005b52:	fa02 f303 	lsl.w	r3, r2, r3
 8005b56:	69ba      	ldr	r2, [r7, #24]
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	69ba      	ldr	r2, [r7, #24]
 8005b60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005b68:	2201      	movs	r2, #1
 8005b6a:	69fb      	ldr	r3, [r7, #28]
 8005b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b70:	43db      	mvns	r3, r3
 8005b72:	69ba      	ldr	r2, [r7, #24]
 8005b74:	4013      	ands	r3, r2
 8005b76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	091b      	lsrs	r3, r3, #4
 8005b7e:	f003 0201 	and.w	r2, r3, #1
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	fa02 f303 	lsl.w	r3, r2, r3
 8005b88:	69ba      	ldr	r2, [r7, #24]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	69ba      	ldr	r2, [r7, #24]
 8005b92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	f003 0303 	and.w	r3, r3, #3
 8005b9c:	2b03      	cmp	r3, #3
 8005b9e:	d017      	beq.n	8005bd0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	005b      	lsls	r3, r3, #1
 8005baa:	2203      	movs	r2, #3
 8005bac:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb0:	43db      	mvns	r3, r3
 8005bb2:	69ba      	ldr	r2, [r7, #24]
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	689a      	ldr	r2, [r3, #8]
 8005bbc:	69fb      	ldr	r3, [r7, #28]
 8005bbe:	005b      	lsls	r3, r3, #1
 8005bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc4:	69ba      	ldr	r2, [r7, #24]
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	69ba      	ldr	r2, [r7, #24]
 8005bce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	f003 0303 	and.w	r3, r3, #3
 8005bd8:	2b02      	cmp	r3, #2
 8005bda:	d123      	bne.n	8005c24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	08da      	lsrs	r2, r3, #3
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	3208      	adds	r2, #8
 8005be4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005be8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005bea:	69fb      	ldr	r3, [r7, #28]
 8005bec:	f003 0307 	and.w	r3, r3, #7
 8005bf0:	009b      	lsls	r3, r3, #2
 8005bf2:	220f      	movs	r2, #15
 8005bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8005bf8:	43db      	mvns	r3, r3
 8005bfa:	69ba      	ldr	r2, [r7, #24]
 8005bfc:	4013      	ands	r3, r2
 8005bfe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	691a      	ldr	r2, [r3, #16]
 8005c04:	69fb      	ldr	r3, [r7, #28]
 8005c06:	f003 0307 	and.w	r3, r3, #7
 8005c0a:	009b      	lsls	r3, r3, #2
 8005c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c10:	69ba      	ldr	r2, [r7, #24]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005c16:	69fb      	ldr	r3, [r7, #28]
 8005c18:	08da      	lsrs	r2, r3, #3
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	3208      	adds	r2, #8
 8005c1e:	69b9      	ldr	r1, [r7, #24]
 8005c20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005c2a:	69fb      	ldr	r3, [r7, #28]
 8005c2c:	005b      	lsls	r3, r3, #1
 8005c2e:	2203      	movs	r2, #3
 8005c30:	fa02 f303 	lsl.w	r3, r2, r3
 8005c34:	43db      	mvns	r3, r3
 8005c36:	69ba      	ldr	r2, [r7, #24]
 8005c38:	4013      	ands	r3, r2
 8005c3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	f003 0203 	and.w	r2, r3, #3
 8005c44:	69fb      	ldr	r3, [r7, #28]
 8005c46:	005b      	lsls	r3, r3, #1
 8005c48:	fa02 f303 	lsl.w	r3, r2, r3
 8005c4c:	69ba      	ldr	r2, [r7, #24]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	69ba      	ldr	r2, [r7, #24]
 8005c56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	f000 80b4 	beq.w	8005dce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c66:	2300      	movs	r3, #0
 8005c68:	60fb      	str	r3, [r7, #12]
 8005c6a:	4b60      	ldr	r3, [pc, #384]	; (8005dec <HAL_GPIO_Init+0x30c>)
 8005c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c6e:	4a5f      	ldr	r2, [pc, #380]	; (8005dec <HAL_GPIO_Init+0x30c>)
 8005c70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005c74:	6453      	str	r3, [r2, #68]	; 0x44
 8005c76:	4b5d      	ldr	r3, [pc, #372]	; (8005dec <HAL_GPIO_Init+0x30c>)
 8005c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c7e:	60fb      	str	r3, [r7, #12]
 8005c80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005c82:	4a5b      	ldr	r2, [pc, #364]	; (8005df0 <HAL_GPIO_Init+0x310>)
 8005c84:	69fb      	ldr	r3, [r7, #28]
 8005c86:	089b      	lsrs	r3, r3, #2
 8005c88:	3302      	adds	r3, #2
 8005c8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005c90:	69fb      	ldr	r3, [r7, #28]
 8005c92:	f003 0303 	and.w	r3, r3, #3
 8005c96:	009b      	lsls	r3, r3, #2
 8005c98:	220f      	movs	r2, #15
 8005c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c9e:	43db      	mvns	r3, r3
 8005ca0:	69ba      	ldr	r2, [r7, #24]
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4a52      	ldr	r2, [pc, #328]	; (8005df4 <HAL_GPIO_Init+0x314>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d02b      	beq.n	8005d06 <HAL_GPIO_Init+0x226>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4a51      	ldr	r2, [pc, #324]	; (8005df8 <HAL_GPIO_Init+0x318>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d025      	beq.n	8005d02 <HAL_GPIO_Init+0x222>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a50      	ldr	r2, [pc, #320]	; (8005dfc <HAL_GPIO_Init+0x31c>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d01f      	beq.n	8005cfe <HAL_GPIO_Init+0x21e>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4a4f      	ldr	r2, [pc, #316]	; (8005e00 <HAL_GPIO_Init+0x320>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d019      	beq.n	8005cfa <HAL_GPIO_Init+0x21a>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4a4e      	ldr	r2, [pc, #312]	; (8005e04 <HAL_GPIO_Init+0x324>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d013      	beq.n	8005cf6 <HAL_GPIO_Init+0x216>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	4a4d      	ldr	r2, [pc, #308]	; (8005e08 <HAL_GPIO_Init+0x328>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d00d      	beq.n	8005cf2 <HAL_GPIO_Init+0x212>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4a4c      	ldr	r2, [pc, #304]	; (8005e0c <HAL_GPIO_Init+0x32c>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d007      	beq.n	8005cee <HAL_GPIO_Init+0x20e>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4a4b      	ldr	r2, [pc, #300]	; (8005e10 <HAL_GPIO_Init+0x330>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d101      	bne.n	8005cea <HAL_GPIO_Init+0x20a>
 8005ce6:	2307      	movs	r3, #7
 8005ce8:	e00e      	b.n	8005d08 <HAL_GPIO_Init+0x228>
 8005cea:	2308      	movs	r3, #8
 8005cec:	e00c      	b.n	8005d08 <HAL_GPIO_Init+0x228>
 8005cee:	2306      	movs	r3, #6
 8005cf0:	e00a      	b.n	8005d08 <HAL_GPIO_Init+0x228>
 8005cf2:	2305      	movs	r3, #5
 8005cf4:	e008      	b.n	8005d08 <HAL_GPIO_Init+0x228>
 8005cf6:	2304      	movs	r3, #4
 8005cf8:	e006      	b.n	8005d08 <HAL_GPIO_Init+0x228>
 8005cfa:	2303      	movs	r3, #3
 8005cfc:	e004      	b.n	8005d08 <HAL_GPIO_Init+0x228>
 8005cfe:	2302      	movs	r3, #2
 8005d00:	e002      	b.n	8005d08 <HAL_GPIO_Init+0x228>
 8005d02:	2301      	movs	r3, #1
 8005d04:	e000      	b.n	8005d08 <HAL_GPIO_Init+0x228>
 8005d06:	2300      	movs	r3, #0
 8005d08:	69fa      	ldr	r2, [r7, #28]
 8005d0a:	f002 0203 	and.w	r2, r2, #3
 8005d0e:	0092      	lsls	r2, r2, #2
 8005d10:	4093      	lsls	r3, r2
 8005d12:	69ba      	ldr	r2, [r7, #24]
 8005d14:	4313      	orrs	r3, r2
 8005d16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005d18:	4935      	ldr	r1, [pc, #212]	; (8005df0 <HAL_GPIO_Init+0x310>)
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	089b      	lsrs	r3, r3, #2
 8005d1e:	3302      	adds	r3, #2
 8005d20:	69ba      	ldr	r2, [r7, #24]
 8005d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005d26:	4b3b      	ldr	r3, [pc, #236]	; (8005e14 <HAL_GPIO_Init+0x334>)
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	43db      	mvns	r3, r3
 8005d30:	69ba      	ldr	r2, [r7, #24]
 8005d32:	4013      	ands	r3, r2
 8005d34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d003      	beq.n	8005d4a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005d42:	69ba      	ldr	r2, [r7, #24]
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	4313      	orrs	r3, r2
 8005d48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005d4a:	4a32      	ldr	r2, [pc, #200]	; (8005e14 <HAL_GPIO_Init+0x334>)
 8005d4c:	69bb      	ldr	r3, [r7, #24]
 8005d4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005d50:	4b30      	ldr	r3, [pc, #192]	; (8005e14 <HAL_GPIO_Init+0x334>)
 8005d52:	68db      	ldr	r3, [r3, #12]
 8005d54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	43db      	mvns	r3, r3
 8005d5a:	69ba      	ldr	r2, [r7, #24]
 8005d5c:	4013      	ands	r3, r2
 8005d5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d003      	beq.n	8005d74 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005d6c:	69ba      	ldr	r2, [r7, #24]
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	4313      	orrs	r3, r2
 8005d72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005d74:	4a27      	ldr	r2, [pc, #156]	; (8005e14 <HAL_GPIO_Init+0x334>)
 8005d76:	69bb      	ldr	r3, [r7, #24]
 8005d78:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005d7a:	4b26      	ldr	r3, [pc, #152]	; (8005e14 <HAL_GPIO_Init+0x334>)
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	43db      	mvns	r3, r3
 8005d84:	69ba      	ldr	r2, [r7, #24]
 8005d86:	4013      	ands	r3, r2
 8005d88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d003      	beq.n	8005d9e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005d96:	69ba      	ldr	r2, [r7, #24]
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005d9e:	4a1d      	ldr	r2, [pc, #116]	; (8005e14 <HAL_GPIO_Init+0x334>)
 8005da0:	69bb      	ldr	r3, [r7, #24]
 8005da2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005da4:	4b1b      	ldr	r3, [pc, #108]	; (8005e14 <HAL_GPIO_Init+0x334>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	43db      	mvns	r3, r3
 8005dae:	69ba      	ldr	r2, [r7, #24]
 8005db0:	4013      	ands	r3, r2
 8005db2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d003      	beq.n	8005dc8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005dc0:	69ba      	ldr	r2, [r7, #24]
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005dc8:	4a12      	ldr	r2, [pc, #72]	; (8005e14 <HAL_GPIO_Init+0x334>)
 8005dca:	69bb      	ldr	r3, [r7, #24]
 8005dcc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005dce:	69fb      	ldr	r3, [r7, #28]
 8005dd0:	3301      	adds	r3, #1
 8005dd2:	61fb      	str	r3, [r7, #28]
 8005dd4:	69fb      	ldr	r3, [r7, #28]
 8005dd6:	2b0f      	cmp	r3, #15
 8005dd8:	f67f ae90 	bls.w	8005afc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005ddc:	bf00      	nop
 8005dde:	bf00      	nop
 8005de0:	3724      	adds	r7, #36	; 0x24
 8005de2:	46bd      	mov	sp, r7
 8005de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de8:	4770      	bx	lr
 8005dea:	bf00      	nop
 8005dec:	40023800 	.word	0x40023800
 8005df0:	40013800 	.word	0x40013800
 8005df4:	40020000 	.word	0x40020000
 8005df8:	40020400 	.word	0x40020400
 8005dfc:	40020800 	.word	0x40020800
 8005e00:	40020c00 	.word	0x40020c00
 8005e04:	40021000 	.word	0x40021000
 8005e08:	40021400 	.word	0x40021400
 8005e0c:	40021800 	.word	0x40021800
 8005e10:	40021c00 	.word	0x40021c00
 8005e14:	40013c00 	.word	0x40013c00

08005e18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b083      	sub	sp, #12
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	460b      	mov	r3, r1
 8005e22:	807b      	strh	r3, [r7, #2]
 8005e24:	4613      	mov	r3, r2
 8005e26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005e28:	787b      	ldrb	r3, [r7, #1]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d003      	beq.n	8005e36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005e2e:	887a      	ldrh	r2, [r7, #2]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005e34:	e003      	b.n	8005e3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005e36:	887b      	ldrh	r3, [r7, #2]
 8005e38:	041a      	lsls	r2, r3, #16
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	619a      	str	r2, [r3, #24]
}
 8005e3e:	bf00      	nop
 8005e40:	370c      	adds	r7, #12
 8005e42:	46bd      	mov	sp, r7
 8005e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e48:	4770      	bx	lr
	...

08005e4c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b082      	sub	sp, #8
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	4603      	mov	r3, r0
 8005e54:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005e56:	4b08      	ldr	r3, [pc, #32]	; (8005e78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005e58:	695a      	ldr	r2, [r3, #20]
 8005e5a:	88fb      	ldrh	r3, [r7, #6]
 8005e5c:	4013      	ands	r3, r2
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d006      	beq.n	8005e70 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005e62:	4a05      	ldr	r2, [pc, #20]	; (8005e78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005e64:	88fb      	ldrh	r3, [r7, #6]
 8005e66:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005e68:	88fb      	ldrh	r3, [r7, #6]
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f7fb fd42 	bl	80018f4 <HAL_GPIO_EXTI_Callback>
  }
}
 8005e70:	bf00      	nop
 8005e72:	3708      	adds	r7, #8
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}
 8005e78:	40013c00 	.word	0x40013c00

08005e7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d101      	bne.n	8005e8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e12b      	b.n	80060e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d106      	bne.n	8005ea8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f7fe ff06 	bl	8004cb4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2224      	movs	r2, #36	; 0x24
 8005eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f022 0201 	bic.w	r2, r2, #1
 8005ebe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ece:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005ede:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005ee0:	f001 fd7a 	bl	80079d8 <HAL_RCC_GetPCLK1Freq>
 8005ee4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	4a81      	ldr	r2, [pc, #516]	; (80060f0 <HAL_I2C_Init+0x274>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d807      	bhi.n	8005f00 <HAL_I2C_Init+0x84>
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	4a80      	ldr	r2, [pc, #512]	; (80060f4 <HAL_I2C_Init+0x278>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	bf94      	ite	ls
 8005ef8:	2301      	movls	r3, #1
 8005efa:	2300      	movhi	r3, #0
 8005efc:	b2db      	uxtb	r3, r3
 8005efe:	e006      	b.n	8005f0e <HAL_I2C_Init+0x92>
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	4a7d      	ldr	r2, [pc, #500]	; (80060f8 <HAL_I2C_Init+0x27c>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	bf94      	ite	ls
 8005f08:	2301      	movls	r3, #1
 8005f0a:	2300      	movhi	r3, #0
 8005f0c:	b2db      	uxtb	r3, r3
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d001      	beq.n	8005f16 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	e0e7      	b.n	80060e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	4a78      	ldr	r2, [pc, #480]	; (80060fc <HAL_I2C_Init+0x280>)
 8005f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f1e:	0c9b      	lsrs	r3, r3, #18
 8005f20:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	68ba      	ldr	r2, [r7, #8]
 8005f32:	430a      	orrs	r2, r1
 8005f34:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	6a1b      	ldr	r3, [r3, #32]
 8005f3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	4a6a      	ldr	r2, [pc, #424]	; (80060f0 <HAL_I2C_Init+0x274>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d802      	bhi.n	8005f50 <HAL_I2C_Init+0xd4>
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	3301      	adds	r3, #1
 8005f4e:	e009      	b.n	8005f64 <HAL_I2C_Init+0xe8>
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005f56:	fb02 f303 	mul.w	r3, r2, r3
 8005f5a:	4a69      	ldr	r2, [pc, #420]	; (8006100 <HAL_I2C_Init+0x284>)
 8005f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f60:	099b      	lsrs	r3, r3, #6
 8005f62:	3301      	adds	r3, #1
 8005f64:	687a      	ldr	r2, [r7, #4]
 8005f66:	6812      	ldr	r2, [r2, #0]
 8005f68:	430b      	orrs	r3, r1
 8005f6a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	69db      	ldr	r3, [r3, #28]
 8005f72:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005f76:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	495c      	ldr	r1, [pc, #368]	; (80060f0 <HAL_I2C_Init+0x274>)
 8005f80:	428b      	cmp	r3, r1
 8005f82:	d819      	bhi.n	8005fb8 <HAL_I2C_Init+0x13c>
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	1e59      	subs	r1, r3, #1
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	005b      	lsls	r3, r3, #1
 8005f8e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005f92:	1c59      	adds	r1, r3, #1
 8005f94:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005f98:	400b      	ands	r3, r1
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d00a      	beq.n	8005fb4 <HAL_I2C_Init+0x138>
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	1e59      	subs	r1, r3, #1
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	005b      	lsls	r3, r3, #1
 8005fa8:	fbb1 f3f3 	udiv	r3, r1, r3
 8005fac:	3301      	adds	r3, #1
 8005fae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fb2:	e051      	b.n	8006058 <HAL_I2C_Init+0x1dc>
 8005fb4:	2304      	movs	r3, #4
 8005fb6:	e04f      	b.n	8006058 <HAL_I2C_Init+0x1dc>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d111      	bne.n	8005fe4 <HAL_I2C_Init+0x168>
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	1e58      	subs	r0, r3, #1
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6859      	ldr	r1, [r3, #4]
 8005fc8:	460b      	mov	r3, r1
 8005fca:	005b      	lsls	r3, r3, #1
 8005fcc:	440b      	add	r3, r1
 8005fce:	fbb0 f3f3 	udiv	r3, r0, r3
 8005fd2:	3301      	adds	r3, #1
 8005fd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	bf0c      	ite	eq
 8005fdc:	2301      	moveq	r3, #1
 8005fde:	2300      	movne	r3, #0
 8005fe0:	b2db      	uxtb	r3, r3
 8005fe2:	e012      	b.n	800600a <HAL_I2C_Init+0x18e>
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	1e58      	subs	r0, r3, #1
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6859      	ldr	r1, [r3, #4]
 8005fec:	460b      	mov	r3, r1
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	440b      	add	r3, r1
 8005ff2:	0099      	lsls	r1, r3, #2
 8005ff4:	440b      	add	r3, r1
 8005ff6:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ffa:	3301      	adds	r3, #1
 8005ffc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006000:	2b00      	cmp	r3, #0
 8006002:	bf0c      	ite	eq
 8006004:	2301      	moveq	r3, #1
 8006006:	2300      	movne	r3, #0
 8006008:	b2db      	uxtb	r3, r3
 800600a:	2b00      	cmp	r3, #0
 800600c:	d001      	beq.n	8006012 <HAL_I2C_Init+0x196>
 800600e:	2301      	movs	r3, #1
 8006010:	e022      	b.n	8006058 <HAL_I2C_Init+0x1dc>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d10e      	bne.n	8006038 <HAL_I2C_Init+0x1bc>
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	1e58      	subs	r0, r3, #1
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6859      	ldr	r1, [r3, #4]
 8006022:	460b      	mov	r3, r1
 8006024:	005b      	lsls	r3, r3, #1
 8006026:	440b      	add	r3, r1
 8006028:	fbb0 f3f3 	udiv	r3, r0, r3
 800602c:	3301      	adds	r3, #1
 800602e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006032:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006036:	e00f      	b.n	8006058 <HAL_I2C_Init+0x1dc>
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	1e58      	subs	r0, r3, #1
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6859      	ldr	r1, [r3, #4]
 8006040:	460b      	mov	r3, r1
 8006042:	009b      	lsls	r3, r3, #2
 8006044:	440b      	add	r3, r1
 8006046:	0099      	lsls	r1, r3, #2
 8006048:	440b      	add	r3, r1
 800604a:	fbb0 f3f3 	udiv	r3, r0, r3
 800604e:	3301      	adds	r3, #1
 8006050:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006054:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006058:	6879      	ldr	r1, [r7, #4]
 800605a:	6809      	ldr	r1, [r1, #0]
 800605c:	4313      	orrs	r3, r2
 800605e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	69da      	ldr	r2, [r3, #28]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6a1b      	ldr	r3, [r3, #32]
 8006072:	431a      	orrs	r2, r3
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	430a      	orrs	r2, r1
 800607a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006086:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	6911      	ldr	r1, [r2, #16]
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	68d2      	ldr	r2, [r2, #12]
 8006092:	4311      	orrs	r1, r2
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	6812      	ldr	r2, [r2, #0]
 8006098:	430b      	orrs	r3, r1
 800609a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	68db      	ldr	r3, [r3, #12]
 80060a2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	695a      	ldr	r2, [r3, #20]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	699b      	ldr	r3, [r3, #24]
 80060ae:	431a      	orrs	r2, r3
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	430a      	orrs	r2, r1
 80060b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f042 0201 	orr.w	r2, r2, #1
 80060c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2220      	movs	r2, #32
 80060d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2200      	movs	r2, #0
 80060da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2200      	movs	r2, #0
 80060e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80060e4:	2300      	movs	r3, #0
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3710      	adds	r7, #16
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}
 80060ee:	bf00      	nop
 80060f0:	000186a0 	.word	0x000186a0
 80060f4:	001e847f 	.word	0x001e847f
 80060f8:	003d08ff 	.word	0x003d08ff
 80060fc:	431bde83 	.word	0x431bde83
 8006100:	10624dd3 	.word	0x10624dd3

08006104 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b088      	sub	sp, #32
 8006108:	af02      	add	r7, sp, #8
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	607a      	str	r2, [r7, #4]
 800610e:	461a      	mov	r2, r3
 8006110:	460b      	mov	r3, r1
 8006112:	817b      	strh	r3, [r7, #10]
 8006114:	4613      	mov	r3, r2
 8006116:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006118:	f7ff fb0e 	bl	8005738 <HAL_GetTick>
 800611c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006124:	b2db      	uxtb	r3, r3
 8006126:	2b20      	cmp	r3, #32
 8006128:	f040 80e0 	bne.w	80062ec <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	9300      	str	r3, [sp, #0]
 8006130:	2319      	movs	r3, #25
 8006132:	2201      	movs	r2, #1
 8006134:	4970      	ldr	r1, [pc, #448]	; (80062f8 <HAL_I2C_Master_Transmit+0x1f4>)
 8006136:	68f8      	ldr	r0, [r7, #12]
 8006138:	f000 fe02 	bl	8006d40 <I2C_WaitOnFlagUntilTimeout>
 800613c:	4603      	mov	r3, r0
 800613e:	2b00      	cmp	r3, #0
 8006140:	d001      	beq.n	8006146 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006142:	2302      	movs	r3, #2
 8006144:	e0d3      	b.n	80062ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800614c:	2b01      	cmp	r3, #1
 800614e:	d101      	bne.n	8006154 <HAL_I2C_Master_Transmit+0x50>
 8006150:	2302      	movs	r3, #2
 8006152:	e0cc      	b.n	80062ee <HAL_I2C_Master_Transmit+0x1ea>
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2201      	movs	r2, #1
 8006158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f003 0301 	and.w	r3, r3, #1
 8006166:	2b01      	cmp	r3, #1
 8006168:	d007      	beq.n	800617a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f042 0201 	orr.w	r2, r2, #1
 8006178:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006188:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2221      	movs	r2, #33	; 0x21
 800618e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2210      	movs	r2, #16
 8006196:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2200      	movs	r2, #0
 800619e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	687a      	ldr	r2, [r7, #4]
 80061a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	893a      	ldrh	r2, [r7, #8]
 80061aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061b0:	b29a      	uxth	r2, r3
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	4a50      	ldr	r2, [pc, #320]	; (80062fc <HAL_I2C_Master_Transmit+0x1f8>)
 80061ba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80061bc:	8979      	ldrh	r1, [r7, #10]
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	6a3a      	ldr	r2, [r7, #32]
 80061c2:	68f8      	ldr	r0, [r7, #12]
 80061c4:	f000 fbbc 	bl	8006940 <I2C_MasterRequestWrite>
 80061c8:	4603      	mov	r3, r0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d001      	beq.n	80061d2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	e08d      	b.n	80062ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061d2:	2300      	movs	r3, #0
 80061d4:	613b      	str	r3, [r7, #16]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	695b      	ldr	r3, [r3, #20]
 80061dc:	613b      	str	r3, [r7, #16]
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	699b      	ldr	r3, [r3, #24]
 80061e4:	613b      	str	r3, [r7, #16]
 80061e6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80061e8:	e066      	b.n	80062b8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061ea:	697a      	ldr	r2, [r7, #20]
 80061ec:	6a39      	ldr	r1, [r7, #32]
 80061ee:	68f8      	ldr	r0, [r7, #12]
 80061f0:	f000 fe7c 	bl	8006eec <I2C_WaitOnTXEFlagUntilTimeout>
 80061f4:	4603      	mov	r3, r0
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d00d      	beq.n	8006216 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061fe:	2b04      	cmp	r3, #4
 8006200:	d107      	bne.n	8006212 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	681a      	ldr	r2, [r3, #0]
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006210:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	e06b      	b.n	80062ee <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621a:	781a      	ldrb	r2, [r3, #0]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006226:	1c5a      	adds	r2, r3, #1
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006230:	b29b      	uxth	r3, r3
 8006232:	3b01      	subs	r3, #1
 8006234:	b29a      	uxth	r2, r3
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800623e:	3b01      	subs	r3, #1
 8006240:	b29a      	uxth	r2, r3
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	695b      	ldr	r3, [r3, #20]
 800624c:	f003 0304 	and.w	r3, r3, #4
 8006250:	2b04      	cmp	r3, #4
 8006252:	d11b      	bne.n	800628c <HAL_I2C_Master_Transmit+0x188>
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006258:	2b00      	cmp	r3, #0
 800625a:	d017      	beq.n	800628c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006260:	781a      	ldrb	r2, [r3, #0]
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800626c:	1c5a      	adds	r2, r3, #1
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006276:	b29b      	uxth	r3, r3
 8006278:	3b01      	subs	r3, #1
 800627a:	b29a      	uxth	r2, r3
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006284:	3b01      	subs	r3, #1
 8006286:	b29a      	uxth	r2, r3
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800628c:	697a      	ldr	r2, [r7, #20]
 800628e:	6a39      	ldr	r1, [r7, #32]
 8006290:	68f8      	ldr	r0, [r7, #12]
 8006292:	f000 fe6c 	bl	8006f6e <I2C_WaitOnBTFFlagUntilTimeout>
 8006296:	4603      	mov	r3, r0
 8006298:	2b00      	cmp	r3, #0
 800629a:	d00d      	beq.n	80062b8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a0:	2b04      	cmp	r3, #4
 80062a2:	d107      	bne.n	80062b4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062b2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80062b4:	2301      	movs	r3, #1
 80062b6:	e01a      	b.n	80062ee <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d194      	bne.n	80061ea <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2220      	movs	r2, #32
 80062d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2200      	movs	r2, #0
 80062dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2200      	movs	r2, #0
 80062e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80062e8:	2300      	movs	r3, #0
 80062ea:	e000      	b.n	80062ee <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80062ec:	2302      	movs	r3, #2
  }
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3718      	adds	r7, #24
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
 80062f6:	bf00      	nop
 80062f8:	00100002 	.word	0x00100002
 80062fc:	ffff0000 	.word	0xffff0000

08006300 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b088      	sub	sp, #32
 8006304:	af02      	add	r7, sp, #8
 8006306:	60f8      	str	r0, [r7, #12]
 8006308:	4608      	mov	r0, r1
 800630a:	4611      	mov	r1, r2
 800630c:	461a      	mov	r2, r3
 800630e:	4603      	mov	r3, r0
 8006310:	817b      	strh	r3, [r7, #10]
 8006312:	460b      	mov	r3, r1
 8006314:	813b      	strh	r3, [r7, #8]
 8006316:	4613      	mov	r3, r2
 8006318:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800631a:	f7ff fa0d 	bl	8005738 <HAL_GetTick>
 800631e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006326:	b2db      	uxtb	r3, r3
 8006328:	2b20      	cmp	r3, #32
 800632a:	f040 80d9 	bne.w	80064e0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	9300      	str	r3, [sp, #0]
 8006332:	2319      	movs	r3, #25
 8006334:	2201      	movs	r2, #1
 8006336:	496d      	ldr	r1, [pc, #436]	; (80064ec <HAL_I2C_Mem_Write+0x1ec>)
 8006338:	68f8      	ldr	r0, [r7, #12]
 800633a:	f000 fd01 	bl	8006d40 <I2C_WaitOnFlagUntilTimeout>
 800633e:	4603      	mov	r3, r0
 8006340:	2b00      	cmp	r3, #0
 8006342:	d001      	beq.n	8006348 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006344:	2302      	movs	r3, #2
 8006346:	e0cc      	b.n	80064e2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800634e:	2b01      	cmp	r3, #1
 8006350:	d101      	bne.n	8006356 <HAL_I2C_Mem_Write+0x56>
 8006352:	2302      	movs	r3, #2
 8006354:	e0c5      	b.n	80064e2 <HAL_I2C_Mem_Write+0x1e2>
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2201      	movs	r2, #1
 800635a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f003 0301 	and.w	r3, r3, #1
 8006368:	2b01      	cmp	r3, #1
 800636a:	d007      	beq.n	800637c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f042 0201 	orr.w	r2, r2, #1
 800637a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800638a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2221      	movs	r2, #33	; 0x21
 8006390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2240      	movs	r2, #64	; 0x40
 8006398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2200      	movs	r2, #0
 80063a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	6a3a      	ldr	r2, [r7, #32]
 80063a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80063ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063b2:	b29a      	uxth	r2, r3
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	4a4d      	ldr	r2, [pc, #308]	; (80064f0 <HAL_I2C_Mem_Write+0x1f0>)
 80063bc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80063be:	88f8      	ldrh	r0, [r7, #6]
 80063c0:	893a      	ldrh	r2, [r7, #8]
 80063c2:	8979      	ldrh	r1, [r7, #10]
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	9301      	str	r3, [sp, #4]
 80063c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ca:	9300      	str	r3, [sp, #0]
 80063cc:	4603      	mov	r3, r0
 80063ce:	68f8      	ldr	r0, [r7, #12]
 80063d0:	f000 fb38 	bl	8006a44 <I2C_RequestMemoryWrite>
 80063d4:	4603      	mov	r3, r0
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d052      	beq.n	8006480 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	e081      	b.n	80064e2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063de:	697a      	ldr	r2, [r7, #20]
 80063e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063e2:	68f8      	ldr	r0, [r7, #12]
 80063e4:	f000 fd82 	bl	8006eec <I2C_WaitOnTXEFlagUntilTimeout>
 80063e8:	4603      	mov	r3, r0
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d00d      	beq.n	800640a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f2:	2b04      	cmp	r3, #4
 80063f4:	d107      	bne.n	8006406 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006404:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	e06b      	b.n	80064e2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800640e:	781a      	ldrb	r2, [r3, #0]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800641a:	1c5a      	adds	r2, r3, #1
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006424:	3b01      	subs	r3, #1
 8006426:	b29a      	uxth	r2, r3
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006430:	b29b      	uxth	r3, r3
 8006432:	3b01      	subs	r3, #1
 8006434:	b29a      	uxth	r2, r3
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	695b      	ldr	r3, [r3, #20]
 8006440:	f003 0304 	and.w	r3, r3, #4
 8006444:	2b04      	cmp	r3, #4
 8006446:	d11b      	bne.n	8006480 <HAL_I2C_Mem_Write+0x180>
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800644c:	2b00      	cmp	r3, #0
 800644e:	d017      	beq.n	8006480 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006454:	781a      	ldrb	r2, [r3, #0]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006460:	1c5a      	adds	r2, r3, #1
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800646a:	3b01      	subs	r3, #1
 800646c:	b29a      	uxth	r2, r3
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006476:	b29b      	uxth	r3, r3
 8006478:	3b01      	subs	r3, #1
 800647a:	b29a      	uxth	r2, r3
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006484:	2b00      	cmp	r3, #0
 8006486:	d1aa      	bne.n	80063de <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006488:	697a      	ldr	r2, [r7, #20]
 800648a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800648c:	68f8      	ldr	r0, [r7, #12]
 800648e:	f000 fd6e 	bl	8006f6e <I2C_WaitOnBTFFlagUntilTimeout>
 8006492:	4603      	mov	r3, r0
 8006494:	2b00      	cmp	r3, #0
 8006496:	d00d      	beq.n	80064b4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800649c:	2b04      	cmp	r3, #4
 800649e:	d107      	bne.n	80064b0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	681a      	ldr	r2, [r3, #0]
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064ae:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80064b0:	2301      	movs	r3, #1
 80064b2:	e016      	b.n	80064e2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2220      	movs	r2, #32
 80064c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2200      	movs	r2, #0
 80064d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2200      	movs	r2, #0
 80064d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80064dc:	2300      	movs	r3, #0
 80064de:	e000      	b.n	80064e2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80064e0:	2302      	movs	r3, #2
  }
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3718      	adds	r7, #24
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
 80064ea:	bf00      	nop
 80064ec:	00100002 	.word	0x00100002
 80064f0:	ffff0000 	.word	0xffff0000

080064f4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b08c      	sub	sp, #48	; 0x30
 80064f8:	af02      	add	r7, sp, #8
 80064fa:	60f8      	str	r0, [r7, #12]
 80064fc:	4608      	mov	r0, r1
 80064fe:	4611      	mov	r1, r2
 8006500:	461a      	mov	r2, r3
 8006502:	4603      	mov	r3, r0
 8006504:	817b      	strh	r3, [r7, #10]
 8006506:	460b      	mov	r3, r1
 8006508:	813b      	strh	r3, [r7, #8]
 800650a:	4613      	mov	r3, r2
 800650c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800650e:	f7ff f913 	bl	8005738 <HAL_GetTick>
 8006512:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800651a:	b2db      	uxtb	r3, r3
 800651c:	2b20      	cmp	r3, #32
 800651e:	f040 8208 	bne.w	8006932 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006524:	9300      	str	r3, [sp, #0]
 8006526:	2319      	movs	r3, #25
 8006528:	2201      	movs	r2, #1
 800652a:	497b      	ldr	r1, [pc, #492]	; (8006718 <HAL_I2C_Mem_Read+0x224>)
 800652c:	68f8      	ldr	r0, [r7, #12]
 800652e:	f000 fc07 	bl	8006d40 <I2C_WaitOnFlagUntilTimeout>
 8006532:	4603      	mov	r3, r0
 8006534:	2b00      	cmp	r3, #0
 8006536:	d001      	beq.n	800653c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006538:	2302      	movs	r3, #2
 800653a:	e1fb      	b.n	8006934 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006542:	2b01      	cmp	r3, #1
 8006544:	d101      	bne.n	800654a <HAL_I2C_Mem_Read+0x56>
 8006546:	2302      	movs	r3, #2
 8006548:	e1f4      	b.n	8006934 <HAL_I2C_Mem_Read+0x440>
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2201      	movs	r2, #1
 800654e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f003 0301 	and.w	r3, r3, #1
 800655c:	2b01      	cmp	r3, #1
 800655e:	d007      	beq.n	8006570 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	681a      	ldr	r2, [r3, #0]
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f042 0201 	orr.w	r2, r2, #1
 800656e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800657e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2222      	movs	r2, #34	; 0x22
 8006584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2240      	movs	r2, #64	; 0x40
 800658c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2200      	movs	r2, #0
 8006594:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800659a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80065a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065a6:	b29a      	uxth	r2, r3
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	4a5b      	ldr	r2, [pc, #364]	; (800671c <HAL_I2C_Mem_Read+0x228>)
 80065b0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80065b2:	88f8      	ldrh	r0, [r7, #6]
 80065b4:	893a      	ldrh	r2, [r7, #8]
 80065b6:	8979      	ldrh	r1, [r7, #10]
 80065b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ba:	9301      	str	r3, [sp, #4]
 80065bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065be:	9300      	str	r3, [sp, #0]
 80065c0:	4603      	mov	r3, r0
 80065c2:	68f8      	ldr	r0, [r7, #12]
 80065c4:	f000 fad4 	bl	8006b70 <I2C_RequestMemoryRead>
 80065c8:	4603      	mov	r3, r0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d001      	beq.n	80065d2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	e1b0      	b.n	8006934 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d113      	bne.n	8006602 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065da:	2300      	movs	r3, #0
 80065dc:	623b      	str	r3, [r7, #32]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	695b      	ldr	r3, [r3, #20]
 80065e4:	623b      	str	r3, [r7, #32]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	699b      	ldr	r3, [r3, #24]
 80065ec:	623b      	str	r3, [r7, #32]
 80065ee:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	681a      	ldr	r2, [r3, #0]
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065fe:	601a      	str	r2, [r3, #0]
 8006600:	e184      	b.n	800690c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006606:	2b01      	cmp	r3, #1
 8006608:	d11b      	bne.n	8006642 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006618:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800661a:	2300      	movs	r3, #0
 800661c:	61fb      	str	r3, [r7, #28]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	695b      	ldr	r3, [r3, #20]
 8006624:	61fb      	str	r3, [r7, #28]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	699b      	ldr	r3, [r3, #24]
 800662c:	61fb      	str	r3, [r7, #28]
 800662e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800663e:	601a      	str	r2, [r3, #0]
 8006640:	e164      	b.n	800690c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006646:	2b02      	cmp	r3, #2
 8006648:	d11b      	bne.n	8006682 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006658:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006668:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800666a:	2300      	movs	r3, #0
 800666c:	61bb      	str	r3, [r7, #24]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	695b      	ldr	r3, [r3, #20]
 8006674:	61bb      	str	r3, [r7, #24]
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	699b      	ldr	r3, [r3, #24]
 800667c:	61bb      	str	r3, [r7, #24]
 800667e:	69bb      	ldr	r3, [r7, #24]
 8006680:	e144      	b.n	800690c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006682:	2300      	movs	r3, #0
 8006684:	617b      	str	r3, [r7, #20]
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	695b      	ldr	r3, [r3, #20]
 800668c:	617b      	str	r3, [r7, #20]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	699b      	ldr	r3, [r3, #24]
 8006694:	617b      	str	r3, [r7, #20]
 8006696:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006698:	e138      	b.n	800690c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800669e:	2b03      	cmp	r3, #3
 80066a0:	f200 80f1 	bhi.w	8006886 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d123      	bne.n	80066f4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80066b0:	68f8      	ldr	r0, [r7, #12]
 80066b2:	f000 fc9d 	bl	8006ff0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80066b6:	4603      	mov	r3, r0
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d001      	beq.n	80066c0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80066bc:	2301      	movs	r3, #1
 80066be:	e139      	b.n	8006934 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	691a      	ldr	r2, [r3, #16]
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ca:	b2d2      	uxtb	r2, r2
 80066cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d2:	1c5a      	adds	r2, r3, #1
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066dc:	3b01      	subs	r3, #1
 80066de:	b29a      	uxth	r2, r3
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066e8:	b29b      	uxth	r3, r3
 80066ea:	3b01      	subs	r3, #1
 80066ec:	b29a      	uxth	r2, r3
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80066f2:	e10b      	b.n	800690c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066f8:	2b02      	cmp	r3, #2
 80066fa:	d14e      	bne.n	800679a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80066fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066fe:	9300      	str	r3, [sp, #0]
 8006700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006702:	2200      	movs	r2, #0
 8006704:	4906      	ldr	r1, [pc, #24]	; (8006720 <HAL_I2C_Mem_Read+0x22c>)
 8006706:	68f8      	ldr	r0, [r7, #12]
 8006708:	f000 fb1a 	bl	8006d40 <I2C_WaitOnFlagUntilTimeout>
 800670c:	4603      	mov	r3, r0
 800670e:	2b00      	cmp	r3, #0
 8006710:	d008      	beq.n	8006724 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006712:	2301      	movs	r3, #1
 8006714:	e10e      	b.n	8006934 <HAL_I2C_Mem_Read+0x440>
 8006716:	bf00      	nop
 8006718:	00100002 	.word	0x00100002
 800671c:	ffff0000 	.word	0xffff0000
 8006720:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006732:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	691a      	ldr	r2, [r3, #16]
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800673e:	b2d2      	uxtb	r2, r2
 8006740:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006746:	1c5a      	adds	r2, r3, #1
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006750:	3b01      	subs	r3, #1
 8006752:	b29a      	uxth	r2, r3
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800675c:	b29b      	uxth	r3, r3
 800675e:	3b01      	subs	r3, #1
 8006760:	b29a      	uxth	r2, r3
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	691a      	ldr	r2, [r3, #16]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006770:	b2d2      	uxtb	r2, r2
 8006772:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006778:	1c5a      	adds	r2, r3, #1
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006782:	3b01      	subs	r3, #1
 8006784:	b29a      	uxth	r2, r3
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800678e:	b29b      	uxth	r3, r3
 8006790:	3b01      	subs	r3, #1
 8006792:	b29a      	uxth	r2, r3
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006798:	e0b8      	b.n	800690c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800679a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800679c:	9300      	str	r3, [sp, #0]
 800679e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067a0:	2200      	movs	r2, #0
 80067a2:	4966      	ldr	r1, [pc, #408]	; (800693c <HAL_I2C_Mem_Read+0x448>)
 80067a4:	68f8      	ldr	r0, [r7, #12]
 80067a6:	f000 facb 	bl	8006d40 <I2C_WaitOnFlagUntilTimeout>
 80067aa:	4603      	mov	r3, r0
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d001      	beq.n	80067b4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	e0bf      	b.n	8006934 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	691a      	ldr	r2, [r3, #16]
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ce:	b2d2      	uxtb	r2, r2
 80067d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d6:	1c5a      	adds	r2, r3, #1
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067e0:	3b01      	subs	r3, #1
 80067e2:	b29a      	uxth	r2, r3
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	3b01      	subs	r3, #1
 80067f0:	b29a      	uxth	r2, r3
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80067f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f8:	9300      	str	r3, [sp, #0]
 80067fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067fc:	2200      	movs	r2, #0
 80067fe:	494f      	ldr	r1, [pc, #316]	; (800693c <HAL_I2C_Mem_Read+0x448>)
 8006800:	68f8      	ldr	r0, [r7, #12]
 8006802:	f000 fa9d 	bl	8006d40 <I2C_WaitOnFlagUntilTimeout>
 8006806:	4603      	mov	r3, r0
 8006808:	2b00      	cmp	r3, #0
 800680a:	d001      	beq.n	8006810 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800680c:	2301      	movs	r3, #1
 800680e:	e091      	b.n	8006934 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	681a      	ldr	r2, [r3, #0]
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800681e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	691a      	ldr	r2, [r3, #16]
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800682a:	b2d2      	uxtb	r2, r2
 800682c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006832:	1c5a      	adds	r2, r3, #1
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800683c:	3b01      	subs	r3, #1
 800683e:	b29a      	uxth	r2, r3
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006848:	b29b      	uxth	r3, r3
 800684a:	3b01      	subs	r3, #1
 800684c:	b29a      	uxth	r2, r3
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	691a      	ldr	r2, [r3, #16]
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800685c:	b2d2      	uxtb	r2, r2
 800685e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006864:	1c5a      	adds	r2, r3, #1
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800686e:	3b01      	subs	r3, #1
 8006870:	b29a      	uxth	r2, r3
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800687a:	b29b      	uxth	r3, r3
 800687c:	3b01      	subs	r3, #1
 800687e:	b29a      	uxth	r2, r3
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006884:	e042      	b.n	800690c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006886:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006888:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800688a:	68f8      	ldr	r0, [r7, #12]
 800688c:	f000 fbb0 	bl	8006ff0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006890:	4603      	mov	r3, r0
 8006892:	2b00      	cmp	r3, #0
 8006894:	d001      	beq.n	800689a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	e04c      	b.n	8006934 <HAL_I2C_Mem_Read+0x440>
        }

        /*  data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	691a      	ldr	r2, [r3, #16]
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a4:	b2d2      	uxtb	r2, r2
 80068a6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ac:	1c5a      	adds	r2, r3, #1
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068b6:	3b01      	subs	r3, #1
 80068b8:	b29a      	uxth	r2, r3
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	3b01      	subs	r3, #1
 80068c6:	b29a      	uxth	r2, r3
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	695b      	ldr	r3, [r3, #20]
 80068d2:	f003 0304 	and.w	r3, r3, #4
 80068d6:	2b04      	cmp	r3, #4
 80068d8:	d118      	bne.n	800690c <HAL_I2C_Mem_Read+0x418>
        {
          /*  data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	691a      	ldr	r2, [r3, #16]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e4:	b2d2      	uxtb	r2, r2
 80068e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ec:	1c5a      	adds	r2, r3, #1
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068f6:	3b01      	subs	r3, #1
 80068f8:	b29a      	uxth	r2, r3
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006902:	b29b      	uxth	r3, r3
 8006904:	3b01      	subs	r3, #1
 8006906:	b29a      	uxth	r2, r3
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006910:	2b00      	cmp	r3, #0
 8006912:	f47f aec2 	bne.w	800669a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	2220      	movs	r2, #32
 800691a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2200      	movs	r2, #0
 8006922:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2200      	movs	r2, #0
 800692a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800692e:	2300      	movs	r3, #0
 8006930:	e000      	b.n	8006934 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006932:	2302      	movs	r3, #2
  }
}
 8006934:	4618      	mov	r0, r3
 8006936:	3728      	adds	r7, #40	; 0x28
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}
 800693c:	00010004 	.word	0x00010004

08006940 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b088      	sub	sp, #32
 8006944:	af02      	add	r7, sp, #8
 8006946:	60f8      	str	r0, [r7, #12]
 8006948:	607a      	str	r2, [r7, #4]
 800694a:	603b      	str	r3, [r7, #0]
 800694c:	460b      	mov	r3, r1
 800694e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006954:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	2b08      	cmp	r3, #8
 800695a:	d006      	beq.n	800696a <I2C_MasterRequestWrite+0x2a>
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	2b01      	cmp	r3, #1
 8006960:	d003      	beq.n	800696a <I2C_MasterRequestWrite+0x2a>
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006968:	d108      	bne.n	800697c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006978:	601a      	str	r2, [r3, #0]
 800697a:	e00b      	b.n	8006994 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006980:	2b12      	cmp	r3, #18
 8006982:	d107      	bne.n	8006994 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006992:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	9300      	str	r3, [sp, #0]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2200      	movs	r2, #0
 800699c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80069a0:	68f8      	ldr	r0, [r7, #12]
 80069a2:	f000 f9cd 	bl	8006d40 <I2C_WaitOnFlagUntilTimeout>
 80069a6:	4603      	mov	r3, r0
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d00d      	beq.n	80069c8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069ba:	d103      	bne.n	80069c4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80069c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80069c4:	2303      	movs	r3, #3
 80069c6:	e035      	b.n	8006a34 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	691b      	ldr	r3, [r3, #16]
 80069cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069d0:	d108      	bne.n	80069e4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80069d2:	897b      	ldrh	r3, [r7, #10]
 80069d4:	b2db      	uxtb	r3, r3
 80069d6:	461a      	mov	r2, r3
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80069e0:	611a      	str	r2, [r3, #16]
 80069e2:	e01b      	b.n	8006a1c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80069e4:	897b      	ldrh	r3, [r7, #10]
 80069e6:	11db      	asrs	r3, r3, #7
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	f003 0306 	and.w	r3, r3, #6
 80069ee:	b2db      	uxtb	r3, r3
 80069f0:	f063 030f 	orn	r3, r3, #15
 80069f4:	b2da      	uxtb	r2, r3
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	490e      	ldr	r1, [pc, #56]	; (8006a3c <I2C_MasterRequestWrite+0xfc>)
 8006a02:	68f8      	ldr	r0, [r7, #12]
 8006a04:	f000 f9f3 	bl	8006dee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d001      	beq.n	8006a12 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	e010      	b.n	8006a34 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006a12:	897b      	ldrh	r3, [r7, #10]
 8006a14:	b2da      	uxtb	r2, r3
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	4907      	ldr	r1, [pc, #28]	; (8006a40 <I2C_MasterRequestWrite+0x100>)
 8006a22:	68f8      	ldr	r0, [r7, #12]
 8006a24:	f000 f9e3 	bl	8006dee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d001      	beq.n	8006a32 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	e000      	b.n	8006a34 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006a32:	2300      	movs	r3, #0
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3718      	adds	r7, #24
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}
 8006a3c:	00010008 	.word	0x00010008
 8006a40:	00010002 	.word	0x00010002

08006a44 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b088      	sub	sp, #32
 8006a48:	af02      	add	r7, sp, #8
 8006a4a:	60f8      	str	r0, [r7, #12]
 8006a4c:	4608      	mov	r0, r1
 8006a4e:	4611      	mov	r1, r2
 8006a50:	461a      	mov	r2, r3
 8006a52:	4603      	mov	r3, r0
 8006a54:	817b      	strh	r3, [r7, #10]
 8006a56:	460b      	mov	r3, r1
 8006a58:	813b      	strh	r3, [r7, #8]
 8006a5a:	4613      	mov	r3, r2
 8006a5c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	681a      	ldr	r2, [r3, #0]
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a6c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a70:	9300      	str	r3, [sp, #0]
 8006a72:	6a3b      	ldr	r3, [r7, #32]
 8006a74:	2200      	movs	r2, #0
 8006a76:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006a7a:	68f8      	ldr	r0, [r7, #12]
 8006a7c:	f000 f960 	bl	8006d40 <I2C_WaitOnFlagUntilTimeout>
 8006a80:	4603      	mov	r3, r0
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d00d      	beq.n	8006aa2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a94:	d103      	bne.n	8006a9e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a9c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006a9e:	2303      	movs	r3, #3
 8006aa0:	e05f      	b.n	8006b62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006aa2:	897b      	ldrh	r3, [r7, #10]
 8006aa4:	b2db      	uxtb	r3, r3
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006ab0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab4:	6a3a      	ldr	r2, [r7, #32]
 8006ab6:	492d      	ldr	r1, [pc, #180]	; (8006b6c <I2C_RequestMemoryWrite+0x128>)
 8006ab8:	68f8      	ldr	r0, [r7, #12]
 8006aba:	f000 f998 	bl	8006dee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d001      	beq.n	8006ac8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	e04c      	b.n	8006b62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ac8:	2300      	movs	r3, #0
 8006aca:	617b      	str	r3, [r7, #20]
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	695b      	ldr	r3, [r3, #20]
 8006ad2:	617b      	str	r3, [r7, #20]
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	699b      	ldr	r3, [r3, #24]
 8006ada:	617b      	str	r3, [r7, #20]
 8006adc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ade:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ae0:	6a39      	ldr	r1, [r7, #32]
 8006ae2:	68f8      	ldr	r0, [r7, #12]
 8006ae4:	f000 fa02 	bl	8006eec <I2C_WaitOnTXEFlagUntilTimeout>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d00d      	beq.n	8006b0a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af2:	2b04      	cmp	r3, #4
 8006af4:	d107      	bne.n	8006b06 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	681a      	ldr	r2, [r3, #0]
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b04:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006b06:	2301      	movs	r3, #1
 8006b08:	e02b      	b.n	8006b62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006b0a:	88fb      	ldrh	r3, [r7, #6]
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d105      	bne.n	8006b1c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006b10:	893b      	ldrh	r3, [r7, #8]
 8006b12:	b2da      	uxtb	r2, r3
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	611a      	str	r2, [r3, #16]
 8006b1a:	e021      	b.n	8006b60 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006b1c:	893b      	ldrh	r3, [r7, #8]
 8006b1e:	0a1b      	lsrs	r3, r3, #8
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	b2da      	uxtb	r2, r3
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b2c:	6a39      	ldr	r1, [r7, #32]
 8006b2e:	68f8      	ldr	r0, [r7, #12]
 8006b30:	f000 f9dc 	bl	8006eec <I2C_WaitOnTXEFlagUntilTimeout>
 8006b34:	4603      	mov	r3, r0
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d00d      	beq.n	8006b56 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b3e:	2b04      	cmp	r3, #4
 8006b40:	d107      	bne.n	8006b52 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	681a      	ldr	r2, [r3, #0]
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b50:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006b52:	2301      	movs	r3, #1
 8006b54:	e005      	b.n	8006b62 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006b56:	893b      	ldrh	r3, [r7, #8]
 8006b58:	b2da      	uxtb	r2, r3
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006b60:	2300      	movs	r3, #0
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3718      	adds	r7, #24
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}
 8006b6a:	bf00      	nop
 8006b6c:	00010002 	.word	0x00010002

08006b70 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b088      	sub	sp, #32
 8006b74:	af02      	add	r7, sp, #8
 8006b76:	60f8      	str	r0, [r7, #12]
 8006b78:	4608      	mov	r0, r1
 8006b7a:	4611      	mov	r1, r2
 8006b7c:	461a      	mov	r2, r3
 8006b7e:	4603      	mov	r3, r0
 8006b80:	817b      	strh	r3, [r7, #10]
 8006b82:	460b      	mov	r3, r1
 8006b84:	813b      	strh	r3, [r7, #8]
 8006b86:	4613      	mov	r3, r2
 8006b88:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006b98:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ba8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bac:	9300      	str	r3, [sp, #0]
 8006bae:	6a3b      	ldr	r3, [r7, #32]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006bb6:	68f8      	ldr	r0, [r7, #12]
 8006bb8:	f000 f8c2 	bl	8006d40 <I2C_WaitOnFlagUntilTimeout>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d00d      	beq.n	8006bde <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bd0:	d103      	bne.n	8006bda <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006bd8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006bda:	2303      	movs	r3, #3
 8006bdc:	e0aa      	b.n	8006d34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006bde:	897b      	ldrh	r3, [r7, #10]
 8006be0:	b2db      	uxtb	r3, r3
 8006be2:	461a      	mov	r2, r3
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006bec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf0:	6a3a      	ldr	r2, [r7, #32]
 8006bf2:	4952      	ldr	r1, [pc, #328]	; (8006d3c <I2C_RequestMemoryRead+0x1cc>)
 8006bf4:	68f8      	ldr	r0, [r7, #12]
 8006bf6:	f000 f8fa 	bl	8006dee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d001      	beq.n	8006c04 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006c00:	2301      	movs	r3, #1
 8006c02:	e097      	b.n	8006d34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c04:	2300      	movs	r3, #0
 8006c06:	617b      	str	r3, [r7, #20]
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	695b      	ldr	r3, [r3, #20]
 8006c0e:	617b      	str	r3, [r7, #20]
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	699b      	ldr	r3, [r3, #24]
 8006c16:	617b      	str	r3, [r7, #20]
 8006c18:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c1c:	6a39      	ldr	r1, [r7, #32]
 8006c1e:	68f8      	ldr	r0, [r7, #12]
 8006c20:	f000 f964 	bl	8006eec <I2C_WaitOnTXEFlagUntilTimeout>
 8006c24:	4603      	mov	r3, r0
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d00d      	beq.n	8006c46 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c2e:	2b04      	cmp	r3, #4
 8006c30:	d107      	bne.n	8006c42 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c40:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006c42:	2301      	movs	r3, #1
 8006c44:	e076      	b.n	8006d34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006c46:	88fb      	ldrh	r3, [r7, #6]
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	d105      	bne.n	8006c58 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006c4c:	893b      	ldrh	r3, [r7, #8]
 8006c4e:	b2da      	uxtb	r2, r3
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	611a      	str	r2, [r3, #16]
 8006c56:	e021      	b.n	8006c9c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006c58:	893b      	ldrh	r3, [r7, #8]
 8006c5a:	0a1b      	lsrs	r3, r3, #8
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	b2da      	uxtb	r2, r3
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c68:	6a39      	ldr	r1, [r7, #32]
 8006c6a:	68f8      	ldr	r0, [r7, #12]
 8006c6c:	f000 f93e 	bl	8006eec <I2C_WaitOnTXEFlagUntilTimeout>
 8006c70:	4603      	mov	r3, r0
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d00d      	beq.n	8006c92 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c7a:	2b04      	cmp	r3, #4
 8006c7c:	d107      	bne.n	8006c8e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c8c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	e050      	b.n	8006d34 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006c92:	893b      	ldrh	r3, [r7, #8]
 8006c94:	b2da      	uxtb	r2, r3
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c9e:	6a39      	ldr	r1, [r7, #32]
 8006ca0:	68f8      	ldr	r0, [r7, #12]
 8006ca2:	f000 f923 	bl	8006eec <I2C_WaitOnTXEFlagUntilTimeout>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d00d      	beq.n	8006cc8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb0:	2b04      	cmp	r3, #4
 8006cb2:	d107      	bne.n	8006cc4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	681a      	ldr	r2, [r3, #0]
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cc2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	e035      	b.n	8006d34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	681a      	ldr	r2, [r3, #0]
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006cd6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cda:	9300      	str	r3, [sp, #0]
 8006cdc:	6a3b      	ldr	r3, [r7, #32]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006ce4:	68f8      	ldr	r0, [r7, #12]
 8006ce6:	f000 f82b 	bl	8006d40 <I2C_WaitOnFlagUntilTimeout>
 8006cea:	4603      	mov	r3, r0
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d00d      	beq.n	8006d0c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cfe:	d103      	bne.n	8006d08 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d06:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006d08:	2303      	movs	r3, #3
 8006d0a:	e013      	b.n	8006d34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006d0c:	897b      	ldrh	r3, [r7, #10]
 8006d0e:	b2db      	uxtb	r3, r3
 8006d10:	f043 0301 	orr.w	r3, r3, #1
 8006d14:	b2da      	uxtb	r2, r3
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1e:	6a3a      	ldr	r2, [r7, #32]
 8006d20:	4906      	ldr	r1, [pc, #24]	; (8006d3c <I2C_RequestMemoryRead+0x1cc>)
 8006d22:	68f8      	ldr	r0, [r7, #12]
 8006d24:	f000 f863 	bl	8006dee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d001      	beq.n	8006d32 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	e000      	b.n	8006d34 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006d32:	2300      	movs	r3, #0
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3718      	adds	r7, #24
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}
 8006d3c:	00010002 	.word	0x00010002

08006d40 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b084      	sub	sp, #16
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	60f8      	str	r0, [r7, #12]
 8006d48:	60b9      	str	r1, [r7, #8]
 8006d4a:	603b      	str	r3, [r7, #0]
 8006d4c:	4613      	mov	r3, r2
 8006d4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d50:	e025      	b.n	8006d9e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d58:	d021      	beq.n	8006d9e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d5a:	f7fe fced 	bl	8005738 <HAL_GetTick>
 8006d5e:	4602      	mov	r2, r0
 8006d60:	69bb      	ldr	r3, [r7, #24]
 8006d62:	1ad3      	subs	r3, r2, r3
 8006d64:	683a      	ldr	r2, [r7, #0]
 8006d66:	429a      	cmp	r2, r3
 8006d68:	d302      	bcc.n	8006d70 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d116      	bne.n	8006d9e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2200      	movs	r2, #0
 8006d74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2220      	movs	r2, #32
 8006d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2200      	movs	r2, #0
 8006d82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d8a:	f043 0220 	orr.w	r2, r3, #32
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	2200      	movs	r2, #0
 8006d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	e023      	b.n	8006de6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	0c1b      	lsrs	r3, r3, #16
 8006da2:	b2db      	uxtb	r3, r3
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d10d      	bne.n	8006dc4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	695b      	ldr	r3, [r3, #20]
 8006dae:	43da      	mvns	r2, r3
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	4013      	ands	r3, r2
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	bf0c      	ite	eq
 8006dba:	2301      	moveq	r3, #1
 8006dbc:	2300      	movne	r3, #0
 8006dbe:	b2db      	uxtb	r3, r3
 8006dc0:	461a      	mov	r2, r3
 8006dc2:	e00c      	b.n	8006dde <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	699b      	ldr	r3, [r3, #24]
 8006dca:	43da      	mvns	r2, r3
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	4013      	ands	r3, r2
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	bf0c      	ite	eq
 8006dd6:	2301      	moveq	r3, #1
 8006dd8:	2300      	movne	r3, #0
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	461a      	mov	r2, r3
 8006dde:	79fb      	ldrb	r3, [r7, #7]
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d0b6      	beq.n	8006d52 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006de4:	2300      	movs	r3, #0
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3710      	adds	r7, #16
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}

08006dee <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006dee:	b580      	push	{r7, lr}
 8006df0:	b084      	sub	sp, #16
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	60f8      	str	r0, [r7, #12]
 8006df6:	60b9      	str	r1, [r7, #8]
 8006df8:	607a      	str	r2, [r7, #4]
 8006dfa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006dfc:	e051      	b.n	8006ea2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	695b      	ldr	r3, [r3, #20]
 8006e04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e0c:	d123      	bne.n	8006e56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	681a      	ldr	r2, [r3, #0]
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e1c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006e26:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2220      	movs	r2, #32
 8006e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e42:	f043 0204 	orr.w	r2, r3, #4
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006e52:	2301      	movs	r3, #1
 8006e54:	e046      	b.n	8006ee4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e5c:	d021      	beq.n	8006ea2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e5e:	f7fe fc6b 	bl	8005738 <HAL_GetTick>
 8006e62:	4602      	mov	r2, r0
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	1ad3      	subs	r3, r2, r3
 8006e68:	687a      	ldr	r2, [r7, #4]
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d302      	bcc.n	8006e74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d116      	bne.n	8006ea2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2200      	movs	r2, #0
 8006e78:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2220      	movs	r2, #32
 8006e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2200      	movs	r2, #0
 8006e86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e8e:	f043 0220 	orr.w	r2, r3, #32
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	e020      	b.n	8006ee4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	0c1b      	lsrs	r3, r3, #16
 8006ea6:	b2db      	uxtb	r3, r3
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	d10c      	bne.n	8006ec6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	695b      	ldr	r3, [r3, #20]
 8006eb2:	43da      	mvns	r2, r3
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	4013      	ands	r3, r2
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	bf14      	ite	ne
 8006ebe:	2301      	movne	r3, #1
 8006ec0:	2300      	moveq	r3, #0
 8006ec2:	b2db      	uxtb	r3, r3
 8006ec4:	e00b      	b.n	8006ede <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	699b      	ldr	r3, [r3, #24]
 8006ecc:	43da      	mvns	r2, r3
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	4013      	ands	r3, r2
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	bf14      	ite	ne
 8006ed8:	2301      	movne	r3, #1
 8006eda:	2300      	moveq	r3, #0
 8006edc:	b2db      	uxtb	r3, r3
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d18d      	bne.n	8006dfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006ee2:	2300      	movs	r3, #0
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3710      	adds	r7, #16
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}

08006eec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b084      	sub	sp, #16
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	60f8      	str	r0, [r7, #12]
 8006ef4:	60b9      	str	r1, [r7, #8]
 8006ef6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006ef8:	e02d      	b.n	8006f56 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006efa:	68f8      	ldr	r0, [r7, #12]
 8006efc:	f000 f8ce 	bl	800709c <I2C_IsAcknowledgeFailed>
 8006f00:	4603      	mov	r3, r0
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d001      	beq.n	8006f0a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006f06:	2301      	movs	r3, #1
 8006f08:	e02d      	b.n	8006f66 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f10:	d021      	beq.n	8006f56 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f12:	f7fe fc11 	bl	8005738 <HAL_GetTick>
 8006f16:	4602      	mov	r2, r0
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	1ad3      	subs	r3, r2, r3
 8006f1c:	68ba      	ldr	r2, [r7, #8]
 8006f1e:	429a      	cmp	r2, r3
 8006f20:	d302      	bcc.n	8006f28 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d116      	bne.n	8006f56 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2220      	movs	r2, #32
 8006f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f42:	f043 0220 	orr.w	r2, r3, #32
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006f52:	2301      	movs	r3, #1
 8006f54:	e007      	b.n	8006f66 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	695b      	ldr	r3, [r3, #20]
 8006f5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f60:	2b80      	cmp	r3, #128	; 0x80
 8006f62:	d1ca      	bne.n	8006efa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006f64:	2300      	movs	r3, #0
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3710      	adds	r7, #16
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}

08006f6e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006f6e:	b580      	push	{r7, lr}
 8006f70:	b084      	sub	sp, #16
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	60f8      	str	r0, [r7, #12]
 8006f76:	60b9      	str	r1, [r7, #8]
 8006f78:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006f7a:	e02d      	b.n	8006fd8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006f7c:	68f8      	ldr	r0, [r7, #12]
 8006f7e:	f000 f88d 	bl	800709c <I2C_IsAcknowledgeFailed>
 8006f82:	4603      	mov	r3, r0
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d001      	beq.n	8006f8c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	e02d      	b.n	8006fe8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f92:	d021      	beq.n	8006fd8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f94:	f7fe fbd0 	bl	8005738 <HAL_GetTick>
 8006f98:	4602      	mov	r2, r0
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	1ad3      	subs	r3, r2, r3
 8006f9e:	68ba      	ldr	r2, [r7, #8]
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	d302      	bcc.n	8006faa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d116      	bne.n	8006fd8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2200      	movs	r2, #0
 8006fae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	2220      	movs	r2, #32
 8006fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fc4:	f043 0220 	orr.w	r2, r3, #32
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	e007      	b.n	8006fe8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	695b      	ldr	r3, [r3, #20]
 8006fde:	f003 0304 	and.w	r3, r3, #4
 8006fe2:	2b04      	cmp	r3, #4
 8006fe4:	d1ca      	bne.n	8006f7c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006fe6:	2300      	movs	r3, #0
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3710      	adds	r7, #16
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}

08006ff0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b084      	sub	sp, #16
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	60f8      	str	r0, [r7, #12]
 8006ff8:	60b9      	str	r1, [r7, #8]
 8006ffa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006ffc:	e042      	b.n	8007084 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	695b      	ldr	r3, [r3, #20]
 8007004:	f003 0310 	and.w	r3, r3, #16
 8007008:	2b10      	cmp	r3, #16
 800700a:	d119      	bne.n	8007040 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f06f 0210 	mvn.w	r2, #16
 8007014:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2200      	movs	r2, #0
 800701a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2220      	movs	r2, #32
 8007020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2200      	movs	r2, #0
 8007028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2200      	movs	r2, #0
 8007038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800703c:	2301      	movs	r3, #1
 800703e:	e029      	b.n	8007094 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007040:	f7fe fb7a 	bl	8005738 <HAL_GetTick>
 8007044:	4602      	mov	r2, r0
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	1ad3      	subs	r3, r2, r3
 800704a:	68ba      	ldr	r2, [r7, #8]
 800704c:	429a      	cmp	r2, r3
 800704e:	d302      	bcc.n	8007056 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d116      	bne.n	8007084 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	2200      	movs	r2, #0
 800705a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2220      	movs	r2, #32
 8007060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2200      	movs	r2, #0
 8007068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007070:	f043 0220 	orr.w	r2, r3, #32
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2200      	movs	r2, #0
 800707c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007080:	2301      	movs	r3, #1
 8007082:	e007      	b.n	8007094 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	695b      	ldr	r3, [r3, #20]
 800708a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800708e:	2b40      	cmp	r3, #64	; 0x40
 8007090:	d1b5      	bne.n	8006ffe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007092:	2300      	movs	r3, #0
}
 8007094:	4618      	mov	r0, r3
 8007096:	3710      	adds	r7, #16
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}

0800709c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800709c:	b480      	push	{r7}
 800709e:	b083      	sub	sp, #12
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	695b      	ldr	r3, [r3, #20]
 80070aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070b2:	d11b      	bne.n	80070ec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80070bc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2200      	movs	r2, #0
 80070c2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2220      	movs	r2, #32
 80070c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2200      	movs	r2, #0
 80070d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070d8:	f043 0204 	orr.w	r2, r3, #4
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2200      	movs	r2, #0
 80070e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80070e8:	2301      	movs	r3, #1
 80070ea:	e000      	b.n	80070ee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80070ec:	2300      	movs	r3, #0
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	370c      	adds	r7, #12
 80070f2:	46bd      	mov	sp, r7
 80070f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f8:	4770      	bx	lr
	...

080070fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b086      	sub	sp, #24
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d101      	bne.n	800710e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800710a:	2301      	movs	r3, #1
 800710c:	e267      	b.n	80075de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f003 0301 	and.w	r3, r3, #1
 8007116:	2b00      	cmp	r3, #0
 8007118:	d075      	beq.n	8007206 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800711a:	4b88      	ldr	r3, [pc, #544]	; (800733c <HAL_RCC_OscConfig+0x240>)
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	f003 030c 	and.w	r3, r3, #12
 8007122:	2b04      	cmp	r3, #4
 8007124:	d00c      	beq.n	8007140 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007126:	4b85      	ldr	r3, [pc, #532]	; (800733c <HAL_RCC_OscConfig+0x240>)
 8007128:	689b      	ldr	r3, [r3, #8]
 800712a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800712e:	2b08      	cmp	r3, #8
 8007130:	d112      	bne.n	8007158 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007132:	4b82      	ldr	r3, [pc, #520]	; (800733c <HAL_RCC_OscConfig+0x240>)
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800713a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800713e:	d10b      	bne.n	8007158 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007140:	4b7e      	ldr	r3, [pc, #504]	; (800733c <HAL_RCC_OscConfig+0x240>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007148:	2b00      	cmp	r3, #0
 800714a:	d05b      	beq.n	8007204 <HAL_RCC_OscConfig+0x108>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d157      	bne.n	8007204 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007154:	2301      	movs	r3, #1
 8007156:	e242      	b.n	80075de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007160:	d106      	bne.n	8007170 <HAL_RCC_OscConfig+0x74>
 8007162:	4b76      	ldr	r3, [pc, #472]	; (800733c <HAL_RCC_OscConfig+0x240>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a75      	ldr	r2, [pc, #468]	; (800733c <HAL_RCC_OscConfig+0x240>)
 8007168:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800716c:	6013      	str	r3, [r2, #0]
 800716e:	e01d      	b.n	80071ac <HAL_RCC_OscConfig+0xb0>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007178:	d10c      	bne.n	8007194 <HAL_RCC_OscConfig+0x98>
 800717a:	4b70      	ldr	r3, [pc, #448]	; (800733c <HAL_RCC_OscConfig+0x240>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a6f      	ldr	r2, [pc, #444]	; (800733c <HAL_RCC_OscConfig+0x240>)
 8007180:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007184:	6013      	str	r3, [r2, #0]
 8007186:	4b6d      	ldr	r3, [pc, #436]	; (800733c <HAL_RCC_OscConfig+0x240>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a6c      	ldr	r2, [pc, #432]	; (800733c <HAL_RCC_OscConfig+0x240>)
 800718c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007190:	6013      	str	r3, [r2, #0]
 8007192:	e00b      	b.n	80071ac <HAL_RCC_OscConfig+0xb0>
 8007194:	4b69      	ldr	r3, [pc, #420]	; (800733c <HAL_RCC_OscConfig+0x240>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a68      	ldr	r2, [pc, #416]	; (800733c <HAL_RCC_OscConfig+0x240>)
 800719a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800719e:	6013      	str	r3, [r2, #0]
 80071a0:	4b66      	ldr	r3, [pc, #408]	; (800733c <HAL_RCC_OscConfig+0x240>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a65      	ldr	r2, [pc, #404]	; (800733c <HAL_RCC_OscConfig+0x240>)
 80071a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80071aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d013      	beq.n	80071dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071b4:	f7fe fac0 	bl	8005738 <HAL_GetTick>
 80071b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071ba:	e008      	b.n	80071ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80071bc:	f7fe fabc 	bl	8005738 <HAL_GetTick>
 80071c0:	4602      	mov	r2, r0
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	1ad3      	subs	r3, r2, r3
 80071c6:	2b64      	cmp	r3, #100	; 0x64
 80071c8:	d901      	bls.n	80071ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80071ca:	2303      	movs	r3, #3
 80071cc:	e207      	b.n	80075de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071ce:	4b5b      	ldr	r3, [pc, #364]	; (800733c <HAL_RCC_OscConfig+0x240>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d0f0      	beq.n	80071bc <HAL_RCC_OscConfig+0xc0>
 80071da:	e014      	b.n	8007206 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071dc:	f7fe faac 	bl	8005738 <HAL_GetTick>
 80071e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80071e2:	e008      	b.n	80071f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80071e4:	f7fe faa8 	bl	8005738 <HAL_GetTick>
 80071e8:	4602      	mov	r2, r0
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	1ad3      	subs	r3, r2, r3
 80071ee:	2b64      	cmp	r3, #100	; 0x64
 80071f0:	d901      	bls.n	80071f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80071f2:	2303      	movs	r3, #3
 80071f4:	e1f3      	b.n	80075de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80071f6:	4b51      	ldr	r3, [pc, #324]	; (800733c <HAL_RCC_OscConfig+0x240>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d1f0      	bne.n	80071e4 <HAL_RCC_OscConfig+0xe8>
 8007202:	e000      	b.n	8007206 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007204:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f003 0302 	and.w	r3, r3, #2
 800720e:	2b00      	cmp	r3, #0
 8007210:	d063      	beq.n	80072da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007212:	4b4a      	ldr	r3, [pc, #296]	; (800733c <HAL_RCC_OscConfig+0x240>)
 8007214:	689b      	ldr	r3, [r3, #8]
 8007216:	f003 030c 	and.w	r3, r3, #12
 800721a:	2b00      	cmp	r3, #0
 800721c:	d00b      	beq.n	8007236 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800721e:	4b47      	ldr	r3, [pc, #284]	; (800733c <HAL_RCC_OscConfig+0x240>)
 8007220:	689b      	ldr	r3, [r3, #8]
 8007222:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007226:	2b08      	cmp	r3, #8
 8007228:	d11c      	bne.n	8007264 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800722a:	4b44      	ldr	r3, [pc, #272]	; (800733c <HAL_RCC_OscConfig+0x240>)
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007232:	2b00      	cmp	r3, #0
 8007234:	d116      	bne.n	8007264 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007236:	4b41      	ldr	r3, [pc, #260]	; (800733c <HAL_RCC_OscConfig+0x240>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f003 0302 	and.w	r3, r3, #2
 800723e:	2b00      	cmp	r3, #0
 8007240:	d005      	beq.n	800724e <HAL_RCC_OscConfig+0x152>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	68db      	ldr	r3, [r3, #12]
 8007246:	2b01      	cmp	r3, #1
 8007248:	d001      	beq.n	800724e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800724a:	2301      	movs	r3, #1
 800724c:	e1c7      	b.n	80075de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800724e:	4b3b      	ldr	r3, [pc, #236]	; (800733c <HAL_RCC_OscConfig+0x240>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	691b      	ldr	r3, [r3, #16]
 800725a:	00db      	lsls	r3, r3, #3
 800725c:	4937      	ldr	r1, [pc, #220]	; (800733c <HAL_RCC_OscConfig+0x240>)
 800725e:	4313      	orrs	r3, r2
 8007260:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007262:	e03a      	b.n	80072da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	68db      	ldr	r3, [r3, #12]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d020      	beq.n	80072ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800726c:	4b34      	ldr	r3, [pc, #208]	; (8007340 <HAL_RCC_OscConfig+0x244>)
 800726e:	2201      	movs	r2, #1
 8007270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007272:	f7fe fa61 	bl	8005738 <HAL_GetTick>
 8007276:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007278:	e008      	b.n	800728c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800727a:	f7fe fa5d 	bl	8005738 <HAL_GetTick>
 800727e:	4602      	mov	r2, r0
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	1ad3      	subs	r3, r2, r3
 8007284:	2b02      	cmp	r3, #2
 8007286:	d901      	bls.n	800728c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007288:	2303      	movs	r3, #3
 800728a:	e1a8      	b.n	80075de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800728c:	4b2b      	ldr	r3, [pc, #172]	; (800733c <HAL_RCC_OscConfig+0x240>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f003 0302 	and.w	r3, r3, #2
 8007294:	2b00      	cmp	r3, #0
 8007296:	d0f0      	beq.n	800727a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007298:	4b28      	ldr	r3, [pc, #160]	; (800733c <HAL_RCC_OscConfig+0x240>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	691b      	ldr	r3, [r3, #16]
 80072a4:	00db      	lsls	r3, r3, #3
 80072a6:	4925      	ldr	r1, [pc, #148]	; (800733c <HAL_RCC_OscConfig+0x240>)
 80072a8:	4313      	orrs	r3, r2
 80072aa:	600b      	str	r3, [r1, #0]
 80072ac:	e015      	b.n	80072da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80072ae:	4b24      	ldr	r3, [pc, #144]	; (8007340 <HAL_RCC_OscConfig+0x244>)
 80072b0:	2200      	movs	r2, #0
 80072b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072b4:	f7fe fa40 	bl	8005738 <HAL_GetTick>
 80072b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80072ba:	e008      	b.n	80072ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80072bc:	f7fe fa3c 	bl	8005738 <HAL_GetTick>
 80072c0:	4602      	mov	r2, r0
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	1ad3      	subs	r3, r2, r3
 80072c6:	2b02      	cmp	r3, #2
 80072c8:	d901      	bls.n	80072ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80072ca:	2303      	movs	r3, #3
 80072cc:	e187      	b.n	80075de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80072ce:	4b1b      	ldr	r3, [pc, #108]	; (800733c <HAL_RCC_OscConfig+0x240>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f003 0302 	and.w	r3, r3, #2
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d1f0      	bne.n	80072bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f003 0308 	and.w	r3, r3, #8
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d036      	beq.n	8007354 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	695b      	ldr	r3, [r3, #20]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d016      	beq.n	800731c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80072ee:	4b15      	ldr	r3, [pc, #84]	; (8007344 <HAL_RCC_OscConfig+0x248>)
 80072f0:	2201      	movs	r2, #1
 80072f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072f4:	f7fe fa20 	bl	8005738 <HAL_GetTick>
 80072f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80072fa:	e008      	b.n	800730e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80072fc:	f7fe fa1c 	bl	8005738 <HAL_GetTick>
 8007300:	4602      	mov	r2, r0
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	1ad3      	subs	r3, r2, r3
 8007306:	2b02      	cmp	r3, #2
 8007308:	d901      	bls.n	800730e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800730a:	2303      	movs	r3, #3
 800730c:	e167      	b.n	80075de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800730e:	4b0b      	ldr	r3, [pc, #44]	; (800733c <HAL_RCC_OscConfig+0x240>)
 8007310:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007312:	f003 0302 	and.w	r3, r3, #2
 8007316:	2b00      	cmp	r3, #0
 8007318:	d0f0      	beq.n	80072fc <HAL_RCC_OscConfig+0x200>
 800731a:	e01b      	b.n	8007354 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800731c:	4b09      	ldr	r3, [pc, #36]	; (8007344 <HAL_RCC_OscConfig+0x248>)
 800731e:	2200      	movs	r2, #0
 8007320:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007322:	f7fe fa09 	bl	8005738 <HAL_GetTick>
 8007326:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007328:	e00e      	b.n	8007348 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800732a:	f7fe fa05 	bl	8005738 <HAL_GetTick>
 800732e:	4602      	mov	r2, r0
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	1ad3      	subs	r3, r2, r3
 8007334:	2b02      	cmp	r3, #2
 8007336:	d907      	bls.n	8007348 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007338:	2303      	movs	r3, #3
 800733a:	e150      	b.n	80075de <HAL_RCC_OscConfig+0x4e2>
 800733c:	40023800 	.word	0x40023800
 8007340:	42470000 	.word	0x42470000
 8007344:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007348:	4b88      	ldr	r3, [pc, #544]	; (800756c <HAL_RCC_OscConfig+0x470>)
 800734a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800734c:	f003 0302 	and.w	r3, r3, #2
 8007350:	2b00      	cmp	r3, #0
 8007352:	d1ea      	bne.n	800732a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f003 0304 	and.w	r3, r3, #4
 800735c:	2b00      	cmp	r3, #0
 800735e:	f000 8097 	beq.w	8007490 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007362:	2300      	movs	r3, #0
 8007364:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007366:	4b81      	ldr	r3, [pc, #516]	; (800756c <HAL_RCC_OscConfig+0x470>)
 8007368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800736a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800736e:	2b00      	cmp	r3, #0
 8007370:	d10f      	bne.n	8007392 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007372:	2300      	movs	r3, #0
 8007374:	60bb      	str	r3, [r7, #8]
 8007376:	4b7d      	ldr	r3, [pc, #500]	; (800756c <HAL_RCC_OscConfig+0x470>)
 8007378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800737a:	4a7c      	ldr	r2, [pc, #496]	; (800756c <HAL_RCC_OscConfig+0x470>)
 800737c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007380:	6413      	str	r3, [r2, #64]	; 0x40
 8007382:	4b7a      	ldr	r3, [pc, #488]	; (800756c <HAL_RCC_OscConfig+0x470>)
 8007384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800738a:	60bb      	str	r3, [r7, #8]
 800738c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800738e:	2301      	movs	r3, #1
 8007390:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007392:	4b77      	ldr	r3, [pc, #476]	; (8007570 <HAL_RCC_OscConfig+0x474>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800739a:	2b00      	cmp	r3, #0
 800739c:	d118      	bne.n	80073d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800739e:	4b74      	ldr	r3, [pc, #464]	; (8007570 <HAL_RCC_OscConfig+0x474>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a73      	ldr	r2, [pc, #460]	; (8007570 <HAL_RCC_OscConfig+0x474>)
 80073a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80073aa:	f7fe f9c5 	bl	8005738 <HAL_GetTick>
 80073ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073b0:	e008      	b.n	80073c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073b2:	f7fe f9c1 	bl	8005738 <HAL_GetTick>
 80073b6:	4602      	mov	r2, r0
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	1ad3      	subs	r3, r2, r3
 80073bc:	2b02      	cmp	r3, #2
 80073be:	d901      	bls.n	80073c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80073c0:	2303      	movs	r3, #3
 80073c2:	e10c      	b.n	80075de <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073c4:	4b6a      	ldr	r3, [pc, #424]	; (8007570 <HAL_RCC_OscConfig+0x474>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d0f0      	beq.n	80073b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	689b      	ldr	r3, [r3, #8]
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d106      	bne.n	80073e6 <HAL_RCC_OscConfig+0x2ea>
 80073d8:	4b64      	ldr	r3, [pc, #400]	; (800756c <HAL_RCC_OscConfig+0x470>)
 80073da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073dc:	4a63      	ldr	r2, [pc, #396]	; (800756c <HAL_RCC_OscConfig+0x470>)
 80073de:	f043 0301 	orr.w	r3, r3, #1
 80073e2:	6713      	str	r3, [r2, #112]	; 0x70
 80073e4:	e01c      	b.n	8007420 <HAL_RCC_OscConfig+0x324>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	689b      	ldr	r3, [r3, #8]
 80073ea:	2b05      	cmp	r3, #5
 80073ec:	d10c      	bne.n	8007408 <HAL_RCC_OscConfig+0x30c>
 80073ee:	4b5f      	ldr	r3, [pc, #380]	; (800756c <HAL_RCC_OscConfig+0x470>)
 80073f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073f2:	4a5e      	ldr	r2, [pc, #376]	; (800756c <HAL_RCC_OscConfig+0x470>)
 80073f4:	f043 0304 	orr.w	r3, r3, #4
 80073f8:	6713      	str	r3, [r2, #112]	; 0x70
 80073fa:	4b5c      	ldr	r3, [pc, #368]	; (800756c <HAL_RCC_OscConfig+0x470>)
 80073fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073fe:	4a5b      	ldr	r2, [pc, #364]	; (800756c <HAL_RCC_OscConfig+0x470>)
 8007400:	f043 0301 	orr.w	r3, r3, #1
 8007404:	6713      	str	r3, [r2, #112]	; 0x70
 8007406:	e00b      	b.n	8007420 <HAL_RCC_OscConfig+0x324>
 8007408:	4b58      	ldr	r3, [pc, #352]	; (800756c <HAL_RCC_OscConfig+0x470>)
 800740a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800740c:	4a57      	ldr	r2, [pc, #348]	; (800756c <HAL_RCC_OscConfig+0x470>)
 800740e:	f023 0301 	bic.w	r3, r3, #1
 8007412:	6713      	str	r3, [r2, #112]	; 0x70
 8007414:	4b55      	ldr	r3, [pc, #340]	; (800756c <HAL_RCC_OscConfig+0x470>)
 8007416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007418:	4a54      	ldr	r2, [pc, #336]	; (800756c <HAL_RCC_OscConfig+0x470>)
 800741a:	f023 0304 	bic.w	r3, r3, #4
 800741e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	689b      	ldr	r3, [r3, #8]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d015      	beq.n	8007454 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007428:	f7fe f986 	bl	8005738 <HAL_GetTick>
 800742c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800742e:	e00a      	b.n	8007446 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007430:	f7fe f982 	bl	8005738 <HAL_GetTick>
 8007434:	4602      	mov	r2, r0
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	1ad3      	subs	r3, r2, r3
 800743a:	f241 3288 	movw	r2, #5000	; 0x1388
 800743e:	4293      	cmp	r3, r2
 8007440:	d901      	bls.n	8007446 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007442:	2303      	movs	r3, #3
 8007444:	e0cb      	b.n	80075de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007446:	4b49      	ldr	r3, [pc, #292]	; (800756c <HAL_RCC_OscConfig+0x470>)
 8007448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800744a:	f003 0302 	and.w	r3, r3, #2
 800744e:	2b00      	cmp	r3, #0
 8007450:	d0ee      	beq.n	8007430 <HAL_RCC_OscConfig+0x334>
 8007452:	e014      	b.n	800747e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007454:	f7fe f970 	bl	8005738 <HAL_GetTick>
 8007458:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800745a:	e00a      	b.n	8007472 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800745c:	f7fe f96c 	bl	8005738 <HAL_GetTick>
 8007460:	4602      	mov	r2, r0
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	1ad3      	subs	r3, r2, r3
 8007466:	f241 3288 	movw	r2, #5000	; 0x1388
 800746a:	4293      	cmp	r3, r2
 800746c:	d901      	bls.n	8007472 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800746e:	2303      	movs	r3, #3
 8007470:	e0b5      	b.n	80075de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007472:	4b3e      	ldr	r3, [pc, #248]	; (800756c <HAL_RCC_OscConfig+0x470>)
 8007474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007476:	f003 0302 	and.w	r3, r3, #2
 800747a:	2b00      	cmp	r3, #0
 800747c:	d1ee      	bne.n	800745c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800747e:	7dfb      	ldrb	r3, [r7, #23]
 8007480:	2b01      	cmp	r3, #1
 8007482:	d105      	bne.n	8007490 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007484:	4b39      	ldr	r3, [pc, #228]	; (800756c <HAL_RCC_OscConfig+0x470>)
 8007486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007488:	4a38      	ldr	r2, [pc, #224]	; (800756c <HAL_RCC_OscConfig+0x470>)
 800748a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800748e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	699b      	ldr	r3, [r3, #24]
 8007494:	2b00      	cmp	r3, #0
 8007496:	f000 80a1 	beq.w	80075dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800749a:	4b34      	ldr	r3, [pc, #208]	; (800756c <HAL_RCC_OscConfig+0x470>)
 800749c:	689b      	ldr	r3, [r3, #8]
 800749e:	f003 030c 	and.w	r3, r3, #12
 80074a2:	2b08      	cmp	r3, #8
 80074a4:	d05c      	beq.n	8007560 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	699b      	ldr	r3, [r3, #24]
 80074aa:	2b02      	cmp	r3, #2
 80074ac:	d141      	bne.n	8007532 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074ae:	4b31      	ldr	r3, [pc, #196]	; (8007574 <HAL_RCC_OscConfig+0x478>)
 80074b0:	2200      	movs	r2, #0
 80074b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074b4:	f7fe f940 	bl	8005738 <HAL_GetTick>
 80074b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074ba:	e008      	b.n	80074ce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80074bc:	f7fe f93c 	bl	8005738 <HAL_GetTick>
 80074c0:	4602      	mov	r2, r0
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	1ad3      	subs	r3, r2, r3
 80074c6:	2b02      	cmp	r3, #2
 80074c8:	d901      	bls.n	80074ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80074ca:	2303      	movs	r3, #3
 80074cc:	e087      	b.n	80075de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074ce:	4b27      	ldr	r3, [pc, #156]	; (800756c <HAL_RCC_OscConfig+0x470>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d1f0      	bne.n	80074bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	69da      	ldr	r2, [r3, #28]
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6a1b      	ldr	r3, [r3, #32]
 80074e2:	431a      	orrs	r2, r3
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e8:	019b      	lsls	r3, r3, #6
 80074ea:	431a      	orrs	r2, r3
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074f0:	085b      	lsrs	r3, r3, #1
 80074f2:	3b01      	subs	r3, #1
 80074f4:	041b      	lsls	r3, r3, #16
 80074f6:	431a      	orrs	r2, r3
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074fc:	061b      	lsls	r3, r3, #24
 80074fe:	491b      	ldr	r1, [pc, #108]	; (800756c <HAL_RCC_OscConfig+0x470>)
 8007500:	4313      	orrs	r3, r2
 8007502:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007504:	4b1b      	ldr	r3, [pc, #108]	; (8007574 <HAL_RCC_OscConfig+0x478>)
 8007506:	2201      	movs	r2, #1
 8007508:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800750a:	f7fe f915 	bl	8005738 <HAL_GetTick>
 800750e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007510:	e008      	b.n	8007524 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007512:	f7fe f911 	bl	8005738 <HAL_GetTick>
 8007516:	4602      	mov	r2, r0
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	1ad3      	subs	r3, r2, r3
 800751c:	2b02      	cmp	r3, #2
 800751e:	d901      	bls.n	8007524 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007520:	2303      	movs	r3, #3
 8007522:	e05c      	b.n	80075de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007524:	4b11      	ldr	r3, [pc, #68]	; (800756c <HAL_RCC_OscConfig+0x470>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800752c:	2b00      	cmp	r3, #0
 800752e:	d0f0      	beq.n	8007512 <HAL_RCC_OscConfig+0x416>
 8007530:	e054      	b.n	80075dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007532:	4b10      	ldr	r3, [pc, #64]	; (8007574 <HAL_RCC_OscConfig+0x478>)
 8007534:	2200      	movs	r2, #0
 8007536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007538:	f7fe f8fe 	bl	8005738 <HAL_GetTick>
 800753c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800753e:	e008      	b.n	8007552 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007540:	f7fe f8fa 	bl	8005738 <HAL_GetTick>
 8007544:	4602      	mov	r2, r0
 8007546:	693b      	ldr	r3, [r7, #16]
 8007548:	1ad3      	subs	r3, r2, r3
 800754a:	2b02      	cmp	r3, #2
 800754c:	d901      	bls.n	8007552 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800754e:	2303      	movs	r3, #3
 8007550:	e045      	b.n	80075de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007552:	4b06      	ldr	r3, [pc, #24]	; (800756c <HAL_RCC_OscConfig+0x470>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800755a:	2b00      	cmp	r3, #0
 800755c:	d1f0      	bne.n	8007540 <HAL_RCC_OscConfig+0x444>
 800755e:	e03d      	b.n	80075dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	699b      	ldr	r3, [r3, #24]
 8007564:	2b01      	cmp	r3, #1
 8007566:	d107      	bne.n	8007578 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007568:	2301      	movs	r3, #1
 800756a:	e038      	b.n	80075de <HAL_RCC_OscConfig+0x4e2>
 800756c:	40023800 	.word	0x40023800
 8007570:	40007000 	.word	0x40007000
 8007574:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007578:	4b1b      	ldr	r3, [pc, #108]	; (80075e8 <HAL_RCC_OscConfig+0x4ec>)
 800757a:	685b      	ldr	r3, [r3, #4]
 800757c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	699b      	ldr	r3, [r3, #24]
 8007582:	2b01      	cmp	r3, #1
 8007584:	d028      	beq.n	80075d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007590:	429a      	cmp	r2, r3
 8007592:	d121      	bne.n	80075d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800759e:	429a      	cmp	r2, r3
 80075a0:	d11a      	bne.n	80075d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80075a2:	68fa      	ldr	r2, [r7, #12]
 80075a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80075a8:	4013      	ands	r3, r2
 80075aa:	687a      	ldr	r2, [r7, #4]
 80075ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80075ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d111      	bne.n	80075d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075be:	085b      	lsrs	r3, r3, #1
 80075c0:	3b01      	subs	r3, #1
 80075c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80075c4:	429a      	cmp	r2, r3
 80075c6:	d107      	bne.n	80075d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d001      	beq.n	80075dc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80075d8:	2301      	movs	r3, #1
 80075da:	e000      	b.n	80075de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80075dc:	2300      	movs	r3, #0
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3718      	adds	r7, #24
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}
 80075e6:	bf00      	nop
 80075e8:	40023800 	.word	0x40023800

080075ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b084      	sub	sp, #16
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d101      	bne.n	8007600 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80075fc:	2301      	movs	r3, #1
 80075fe:	e0cc      	b.n	800779a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007600:	4b68      	ldr	r3, [pc, #416]	; (80077a4 <HAL_RCC_ClockConfig+0x1b8>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f003 0307 	and.w	r3, r3, #7
 8007608:	683a      	ldr	r2, [r7, #0]
 800760a:	429a      	cmp	r2, r3
 800760c:	d90c      	bls.n	8007628 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800760e:	4b65      	ldr	r3, [pc, #404]	; (80077a4 <HAL_RCC_ClockConfig+0x1b8>)
 8007610:	683a      	ldr	r2, [r7, #0]
 8007612:	b2d2      	uxtb	r2, r2
 8007614:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007616:	4b63      	ldr	r3, [pc, #396]	; (80077a4 <HAL_RCC_ClockConfig+0x1b8>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f003 0307 	and.w	r3, r3, #7
 800761e:	683a      	ldr	r2, [r7, #0]
 8007620:	429a      	cmp	r2, r3
 8007622:	d001      	beq.n	8007628 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007624:	2301      	movs	r3, #1
 8007626:	e0b8      	b.n	800779a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f003 0302 	and.w	r3, r3, #2
 8007630:	2b00      	cmp	r3, #0
 8007632:	d020      	beq.n	8007676 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f003 0304 	and.w	r3, r3, #4
 800763c:	2b00      	cmp	r3, #0
 800763e:	d005      	beq.n	800764c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007640:	4b59      	ldr	r3, [pc, #356]	; (80077a8 <HAL_RCC_ClockConfig+0x1bc>)
 8007642:	689b      	ldr	r3, [r3, #8]
 8007644:	4a58      	ldr	r2, [pc, #352]	; (80077a8 <HAL_RCC_ClockConfig+0x1bc>)
 8007646:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800764a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f003 0308 	and.w	r3, r3, #8
 8007654:	2b00      	cmp	r3, #0
 8007656:	d005      	beq.n	8007664 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007658:	4b53      	ldr	r3, [pc, #332]	; (80077a8 <HAL_RCC_ClockConfig+0x1bc>)
 800765a:	689b      	ldr	r3, [r3, #8]
 800765c:	4a52      	ldr	r2, [pc, #328]	; (80077a8 <HAL_RCC_ClockConfig+0x1bc>)
 800765e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007662:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007664:	4b50      	ldr	r3, [pc, #320]	; (80077a8 <HAL_RCC_ClockConfig+0x1bc>)
 8007666:	689b      	ldr	r3, [r3, #8]
 8007668:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	689b      	ldr	r3, [r3, #8]
 8007670:	494d      	ldr	r1, [pc, #308]	; (80077a8 <HAL_RCC_ClockConfig+0x1bc>)
 8007672:	4313      	orrs	r3, r2
 8007674:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f003 0301 	and.w	r3, r3, #1
 800767e:	2b00      	cmp	r3, #0
 8007680:	d044      	beq.n	800770c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	2b01      	cmp	r3, #1
 8007688:	d107      	bne.n	800769a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800768a:	4b47      	ldr	r3, [pc, #284]	; (80077a8 <HAL_RCC_ClockConfig+0x1bc>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007692:	2b00      	cmp	r3, #0
 8007694:	d119      	bne.n	80076ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007696:	2301      	movs	r3, #1
 8007698:	e07f      	b.n	800779a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	2b02      	cmp	r3, #2
 80076a0:	d003      	beq.n	80076aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80076a6:	2b03      	cmp	r3, #3
 80076a8:	d107      	bne.n	80076ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80076aa:	4b3f      	ldr	r3, [pc, #252]	; (80077a8 <HAL_RCC_ClockConfig+0x1bc>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d109      	bne.n	80076ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80076b6:	2301      	movs	r3, #1
 80076b8:	e06f      	b.n	800779a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076ba:	4b3b      	ldr	r3, [pc, #236]	; (80077a8 <HAL_RCC_ClockConfig+0x1bc>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f003 0302 	and.w	r3, r3, #2
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d101      	bne.n	80076ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80076c6:	2301      	movs	r3, #1
 80076c8:	e067      	b.n	800779a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80076ca:	4b37      	ldr	r3, [pc, #220]	; (80077a8 <HAL_RCC_ClockConfig+0x1bc>)
 80076cc:	689b      	ldr	r3, [r3, #8]
 80076ce:	f023 0203 	bic.w	r2, r3, #3
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	685b      	ldr	r3, [r3, #4]
 80076d6:	4934      	ldr	r1, [pc, #208]	; (80077a8 <HAL_RCC_ClockConfig+0x1bc>)
 80076d8:	4313      	orrs	r3, r2
 80076da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80076dc:	f7fe f82c 	bl	8005738 <HAL_GetTick>
 80076e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076e2:	e00a      	b.n	80076fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80076e4:	f7fe f828 	bl	8005738 <HAL_GetTick>
 80076e8:	4602      	mov	r2, r0
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	1ad3      	subs	r3, r2, r3
 80076ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d901      	bls.n	80076fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80076f6:	2303      	movs	r3, #3
 80076f8:	e04f      	b.n	800779a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076fa:	4b2b      	ldr	r3, [pc, #172]	; (80077a8 <HAL_RCC_ClockConfig+0x1bc>)
 80076fc:	689b      	ldr	r3, [r3, #8]
 80076fe:	f003 020c 	and.w	r2, r3, #12
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	009b      	lsls	r3, r3, #2
 8007708:	429a      	cmp	r2, r3
 800770a:	d1eb      	bne.n	80076e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800770c:	4b25      	ldr	r3, [pc, #148]	; (80077a4 <HAL_RCC_ClockConfig+0x1b8>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f003 0307 	and.w	r3, r3, #7
 8007714:	683a      	ldr	r2, [r7, #0]
 8007716:	429a      	cmp	r2, r3
 8007718:	d20c      	bcs.n	8007734 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800771a:	4b22      	ldr	r3, [pc, #136]	; (80077a4 <HAL_RCC_ClockConfig+0x1b8>)
 800771c:	683a      	ldr	r2, [r7, #0]
 800771e:	b2d2      	uxtb	r2, r2
 8007720:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007722:	4b20      	ldr	r3, [pc, #128]	; (80077a4 <HAL_RCC_ClockConfig+0x1b8>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f003 0307 	and.w	r3, r3, #7
 800772a:	683a      	ldr	r2, [r7, #0]
 800772c:	429a      	cmp	r2, r3
 800772e:	d001      	beq.n	8007734 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007730:	2301      	movs	r3, #1
 8007732:	e032      	b.n	800779a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f003 0304 	and.w	r3, r3, #4
 800773c:	2b00      	cmp	r3, #0
 800773e:	d008      	beq.n	8007752 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007740:	4b19      	ldr	r3, [pc, #100]	; (80077a8 <HAL_RCC_ClockConfig+0x1bc>)
 8007742:	689b      	ldr	r3, [r3, #8]
 8007744:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	68db      	ldr	r3, [r3, #12]
 800774c:	4916      	ldr	r1, [pc, #88]	; (80077a8 <HAL_RCC_ClockConfig+0x1bc>)
 800774e:	4313      	orrs	r3, r2
 8007750:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f003 0308 	and.w	r3, r3, #8
 800775a:	2b00      	cmp	r3, #0
 800775c:	d009      	beq.n	8007772 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800775e:	4b12      	ldr	r3, [pc, #72]	; (80077a8 <HAL_RCC_ClockConfig+0x1bc>)
 8007760:	689b      	ldr	r3, [r3, #8]
 8007762:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	691b      	ldr	r3, [r3, #16]
 800776a:	00db      	lsls	r3, r3, #3
 800776c:	490e      	ldr	r1, [pc, #56]	; (80077a8 <HAL_RCC_ClockConfig+0x1bc>)
 800776e:	4313      	orrs	r3, r2
 8007770:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007772:	f000 f821 	bl	80077b8 <HAL_RCC_GetSysClockFreq>
 8007776:	4602      	mov	r2, r0
 8007778:	4b0b      	ldr	r3, [pc, #44]	; (80077a8 <HAL_RCC_ClockConfig+0x1bc>)
 800777a:	689b      	ldr	r3, [r3, #8]
 800777c:	091b      	lsrs	r3, r3, #4
 800777e:	f003 030f 	and.w	r3, r3, #15
 8007782:	490a      	ldr	r1, [pc, #40]	; (80077ac <HAL_RCC_ClockConfig+0x1c0>)
 8007784:	5ccb      	ldrb	r3, [r1, r3]
 8007786:	fa22 f303 	lsr.w	r3, r2, r3
 800778a:	4a09      	ldr	r2, [pc, #36]	; (80077b0 <HAL_RCC_ClockConfig+0x1c4>)
 800778c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800778e:	4b09      	ldr	r3, [pc, #36]	; (80077b4 <HAL_RCC_ClockConfig+0x1c8>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4618      	mov	r0, r3
 8007794:	f7fd ff8c 	bl	80056b0 <HAL_InitTick>

  return HAL_OK;
 8007798:	2300      	movs	r3, #0
}
 800779a:	4618      	mov	r0, r3
 800779c:	3710      	adds	r7, #16
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}
 80077a2:	bf00      	nop
 80077a4:	40023c00 	.word	0x40023c00
 80077a8:	40023800 	.word	0x40023800
 80077ac:	0800bbcc 	.word	0x0800bbcc
 80077b0:	20000010 	.word	0x20000010
 80077b4:	2000001c 	.word	0x2000001c

080077b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80077b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80077bc:	b094      	sub	sp, #80	; 0x50
 80077be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80077c0:	2300      	movs	r3, #0
 80077c2:	647b      	str	r3, [r7, #68]	; 0x44
 80077c4:	2300      	movs	r3, #0
 80077c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80077c8:	2300      	movs	r3, #0
 80077ca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80077cc:	2300      	movs	r3, #0
 80077ce:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80077d0:	4b79      	ldr	r3, [pc, #484]	; (80079b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80077d2:	689b      	ldr	r3, [r3, #8]
 80077d4:	f003 030c 	and.w	r3, r3, #12
 80077d8:	2b08      	cmp	r3, #8
 80077da:	d00d      	beq.n	80077f8 <HAL_RCC_GetSysClockFreq+0x40>
 80077dc:	2b08      	cmp	r3, #8
 80077de:	f200 80e1 	bhi.w	80079a4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d002      	beq.n	80077ec <HAL_RCC_GetSysClockFreq+0x34>
 80077e6:	2b04      	cmp	r3, #4
 80077e8:	d003      	beq.n	80077f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80077ea:	e0db      	b.n	80079a4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80077ec:	4b73      	ldr	r3, [pc, #460]	; (80079bc <HAL_RCC_GetSysClockFreq+0x204>)
 80077ee:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80077f0:	e0db      	b.n	80079aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80077f2:	4b72      	ldr	r3, [pc, #456]	; (80079bc <HAL_RCC_GetSysClockFreq+0x204>)
 80077f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80077f6:	e0d8      	b.n	80079aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80077f8:	4b6f      	ldr	r3, [pc, #444]	; (80079b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007800:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007802:	4b6d      	ldr	r3, [pc, #436]	; (80079b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800780a:	2b00      	cmp	r3, #0
 800780c:	d063      	beq.n	80078d6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800780e:	4b6a      	ldr	r3, [pc, #424]	; (80079b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007810:	685b      	ldr	r3, [r3, #4]
 8007812:	099b      	lsrs	r3, r3, #6
 8007814:	2200      	movs	r2, #0
 8007816:	63bb      	str	r3, [r7, #56]	; 0x38
 8007818:	63fa      	str	r2, [r7, #60]	; 0x3c
 800781a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800781c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007820:	633b      	str	r3, [r7, #48]	; 0x30
 8007822:	2300      	movs	r3, #0
 8007824:	637b      	str	r3, [r7, #52]	; 0x34
 8007826:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800782a:	4622      	mov	r2, r4
 800782c:	462b      	mov	r3, r5
 800782e:	f04f 0000 	mov.w	r0, #0
 8007832:	f04f 0100 	mov.w	r1, #0
 8007836:	0159      	lsls	r1, r3, #5
 8007838:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800783c:	0150      	lsls	r0, r2, #5
 800783e:	4602      	mov	r2, r0
 8007840:	460b      	mov	r3, r1
 8007842:	4621      	mov	r1, r4
 8007844:	1a51      	subs	r1, r2, r1
 8007846:	6139      	str	r1, [r7, #16]
 8007848:	4629      	mov	r1, r5
 800784a:	eb63 0301 	sbc.w	r3, r3, r1
 800784e:	617b      	str	r3, [r7, #20]
 8007850:	f04f 0200 	mov.w	r2, #0
 8007854:	f04f 0300 	mov.w	r3, #0
 8007858:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800785c:	4659      	mov	r1, fp
 800785e:	018b      	lsls	r3, r1, #6
 8007860:	4651      	mov	r1, sl
 8007862:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007866:	4651      	mov	r1, sl
 8007868:	018a      	lsls	r2, r1, #6
 800786a:	4651      	mov	r1, sl
 800786c:	ebb2 0801 	subs.w	r8, r2, r1
 8007870:	4659      	mov	r1, fp
 8007872:	eb63 0901 	sbc.w	r9, r3, r1
 8007876:	f04f 0200 	mov.w	r2, #0
 800787a:	f04f 0300 	mov.w	r3, #0
 800787e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007882:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007886:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800788a:	4690      	mov	r8, r2
 800788c:	4699      	mov	r9, r3
 800788e:	4623      	mov	r3, r4
 8007890:	eb18 0303 	adds.w	r3, r8, r3
 8007894:	60bb      	str	r3, [r7, #8]
 8007896:	462b      	mov	r3, r5
 8007898:	eb49 0303 	adc.w	r3, r9, r3
 800789c:	60fb      	str	r3, [r7, #12]
 800789e:	f04f 0200 	mov.w	r2, #0
 80078a2:	f04f 0300 	mov.w	r3, #0
 80078a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80078aa:	4629      	mov	r1, r5
 80078ac:	028b      	lsls	r3, r1, #10
 80078ae:	4621      	mov	r1, r4
 80078b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80078b4:	4621      	mov	r1, r4
 80078b6:	028a      	lsls	r2, r1, #10
 80078b8:	4610      	mov	r0, r2
 80078ba:	4619      	mov	r1, r3
 80078bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078be:	2200      	movs	r2, #0
 80078c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80078c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80078c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80078c8:	f7f8 ffe8 	bl	800089c <__aeabi_uldivmod>
 80078cc:	4602      	mov	r2, r0
 80078ce:	460b      	mov	r3, r1
 80078d0:	4613      	mov	r3, r2
 80078d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80078d4:	e058      	b.n	8007988 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80078d6:	4b38      	ldr	r3, [pc, #224]	; (80079b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	099b      	lsrs	r3, r3, #6
 80078dc:	2200      	movs	r2, #0
 80078de:	4618      	mov	r0, r3
 80078e0:	4611      	mov	r1, r2
 80078e2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80078e6:	623b      	str	r3, [r7, #32]
 80078e8:	2300      	movs	r3, #0
 80078ea:	627b      	str	r3, [r7, #36]	; 0x24
 80078ec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80078f0:	4642      	mov	r2, r8
 80078f2:	464b      	mov	r3, r9
 80078f4:	f04f 0000 	mov.w	r0, #0
 80078f8:	f04f 0100 	mov.w	r1, #0
 80078fc:	0159      	lsls	r1, r3, #5
 80078fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007902:	0150      	lsls	r0, r2, #5
 8007904:	4602      	mov	r2, r0
 8007906:	460b      	mov	r3, r1
 8007908:	4641      	mov	r1, r8
 800790a:	ebb2 0a01 	subs.w	sl, r2, r1
 800790e:	4649      	mov	r1, r9
 8007910:	eb63 0b01 	sbc.w	fp, r3, r1
 8007914:	f04f 0200 	mov.w	r2, #0
 8007918:	f04f 0300 	mov.w	r3, #0
 800791c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007920:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007924:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007928:	ebb2 040a 	subs.w	r4, r2, sl
 800792c:	eb63 050b 	sbc.w	r5, r3, fp
 8007930:	f04f 0200 	mov.w	r2, #0
 8007934:	f04f 0300 	mov.w	r3, #0
 8007938:	00eb      	lsls	r3, r5, #3
 800793a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800793e:	00e2      	lsls	r2, r4, #3
 8007940:	4614      	mov	r4, r2
 8007942:	461d      	mov	r5, r3
 8007944:	4643      	mov	r3, r8
 8007946:	18e3      	adds	r3, r4, r3
 8007948:	603b      	str	r3, [r7, #0]
 800794a:	464b      	mov	r3, r9
 800794c:	eb45 0303 	adc.w	r3, r5, r3
 8007950:	607b      	str	r3, [r7, #4]
 8007952:	f04f 0200 	mov.w	r2, #0
 8007956:	f04f 0300 	mov.w	r3, #0
 800795a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800795e:	4629      	mov	r1, r5
 8007960:	028b      	lsls	r3, r1, #10
 8007962:	4621      	mov	r1, r4
 8007964:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007968:	4621      	mov	r1, r4
 800796a:	028a      	lsls	r2, r1, #10
 800796c:	4610      	mov	r0, r2
 800796e:	4619      	mov	r1, r3
 8007970:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007972:	2200      	movs	r2, #0
 8007974:	61bb      	str	r3, [r7, #24]
 8007976:	61fa      	str	r2, [r7, #28]
 8007978:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800797c:	f7f8 ff8e 	bl	800089c <__aeabi_uldivmod>
 8007980:	4602      	mov	r2, r0
 8007982:	460b      	mov	r3, r1
 8007984:	4613      	mov	r3, r2
 8007986:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007988:	4b0b      	ldr	r3, [pc, #44]	; (80079b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	0c1b      	lsrs	r3, r3, #16
 800798e:	f003 0303 	and.w	r3, r3, #3
 8007992:	3301      	adds	r3, #1
 8007994:	005b      	lsls	r3, r3, #1
 8007996:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007998:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800799a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800799c:	fbb2 f3f3 	udiv	r3, r2, r3
 80079a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80079a2:	e002      	b.n	80079aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80079a4:	4b05      	ldr	r3, [pc, #20]	; (80079bc <HAL_RCC_GetSysClockFreq+0x204>)
 80079a6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80079a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80079aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3750      	adds	r7, #80	; 0x50
 80079b0:	46bd      	mov	sp, r7
 80079b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80079b6:	bf00      	nop
 80079b8:	40023800 	.word	0x40023800
 80079bc:	00f42400 	.word	0x00f42400

080079c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80079c0:	b480      	push	{r7}
 80079c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80079c4:	4b03      	ldr	r3, [pc, #12]	; (80079d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80079c6:	681b      	ldr	r3, [r3, #0]
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	46bd      	mov	sp, r7
 80079cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d0:	4770      	bx	lr
 80079d2:	bf00      	nop
 80079d4:	20000010 	.word	0x20000010

080079d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80079dc:	f7ff fff0 	bl	80079c0 <HAL_RCC_GetHCLKFreq>
 80079e0:	4602      	mov	r2, r0
 80079e2:	4b05      	ldr	r3, [pc, #20]	; (80079f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80079e4:	689b      	ldr	r3, [r3, #8]
 80079e6:	0a9b      	lsrs	r3, r3, #10
 80079e8:	f003 0307 	and.w	r3, r3, #7
 80079ec:	4903      	ldr	r1, [pc, #12]	; (80079fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80079ee:	5ccb      	ldrb	r3, [r1, r3]
 80079f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	bd80      	pop	{r7, pc}
 80079f8:	40023800 	.word	0x40023800
 80079fc:	0800bbdc 	.word	0x0800bbdc

08007a00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007a04:	f7ff ffdc 	bl	80079c0 <HAL_RCC_GetHCLKFreq>
 8007a08:	4602      	mov	r2, r0
 8007a0a:	4b05      	ldr	r3, [pc, #20]	; (8007a20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007a0c:	689b      	ldr	r3, [r3, #8]
 8007a0e:	0b5b      	lsrs	r3, r3, #13
 8007a10:	f003 0307 	and.w	r3, r3, #7
 8007a14:	4903      	ldr	r1, [pc, #12]	; (8007a24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007a16:	5ccb      	ldrb	r3, [r1, r3]
 8007a18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	bd80      	pop	{r7, pc}
 8007a20:	40023800 	.word	0x40023800
 8007a24:	0800bbdc 	.word	0x0800bbdc

08007a28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b082      	sub	sp, #8
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d101      	bne.n	8007a3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007a36:	2301      	movs	r3, #1
 8007a38:	e07b      	b.n	8007b32 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d108      	bne.n	8007a54 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a4a:	d009      	beq.n	8007a60 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	61da      	str	r2, [r3, #28]
 8007a52:	e005      	b.n	8007a60 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2200      	movs	r2, #0
 8007a58:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2200      	movs	r2, #0
 8007a64:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007a6c:	b2db      	uxtb	r3, r3
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d106      	bne.n	8007a80 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2200      	movs	r2, #0
 8007a76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f7fd f962 	bl	8004d44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2202      	movs	r2, #2
 8007a84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	681a      	ldr	r2, [r3, #0]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a96:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	689b      	ldr	r3, [r3, #8]
 8007aa4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007aa8:	431a      	orrs	r2, r3
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	68db      	ldr	r3, [r3, #12]
 8007aae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ab2:	431a      	orrs	r2, r3
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	691b      	ldr	r3, [r3, #16]
 8007ab8:	f003 0302 	and.w	r3, r3, #2
 8007abc:	431a      	orrs	r2, r3
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	695b      	ldr	r3, [r3, #20]
 8007ac2:	f003 0301 	and.w	r3, r3, #1
 8007ac6:	431a      	orrs	r2, r3
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	699b      	ldr	r3, [r3, #24]
 8007acc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ad0:	431a      	orrs	r2, r3
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	69db      	ldr	r3, [r3, #28]
 8007ad6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007ada:	431a      	orrs	r2, r3
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6a1b      	ldr	r3, [r3, #32]
 8007ae0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ae4:	ea42 0103 	orr.w	r1, r2, r3
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aec:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	430a      	orrs	r2, r1
 8007af6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	699b      	ldr	r3, [r3, #24]
 8007afc:	0c1b      	lsrs	r3, r3, #16
 8007afe:	f003 0104 	and.w	r1, r3, #4
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b06:	f003 0210 	and.w	r2, r3, #16
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	430a      	orrs	r2, r1
 8007b10:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	69da      	ldr	r2, [r3, #28]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007b20:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2200      	movs	r2, #0
 8007b26:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007b30:	2300      	movs	r3, #0
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3708      	adds	r7, #8
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}

08007b3a <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8007b3a:	b580      	push	{r7, lr}
 8007b3c:	b084      	sub	sp, #16
 8007b3e:	af00      	add	r7, sp, #0
 8007b40:	60f8      	str	r0, [r7, #12]
 8007b42:	60b9      	str	r1, [r7, #8]
 8007b44:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d101      	bne.n	8007b50 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	e038      	b.n	8007bc2 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8007b56:	b2db      	uxtb	r3, r3
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d106      	bne.n	8007b6a <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8007b64:	68f8      	ldr	r0, [r7, #12]
 8007b66:	f7fd fa69 	bl	800503c <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681a      	ldr	r2, [r3, #0]
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	3308      	adds	r3, #8
 8007b72:	4619      	mov	r1, r3
 8007b74:	4610      	mov	r0, r2
 8007b76:	f001 fdc9 	bl	800970c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	6818      	ldr	r0, [r3, #0]
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	689b      	ldr	r3, [r3, #8]
 8007b82:	461a      	mov	r2, r3
 8007b84:	68b9      	ldr	r1, [r7, #8]
 8007b86:	f001 fe2b 	bl	80097e0 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	6858      	ldr	r0, [r3, #4]
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	689a      	ldr	r2, [r3, #8]
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b96:	6879      	ldr	r1, [r7, #4]
 8007b98:	f001 fe58 	bl	800984c <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	68fa      	ldr	r2, [r7, #12]
 8007ba2:	6892      	ldr	r2, [r2, #8]
 8007ba4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	68fa      	ldr	r2, [r7, #12]
 8007bae:	6892      	ldr	r2, [r2, #8]
 8007bb0:	f041 0101 	orr.w	r1, r1, #1
 8007bb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2201      	movs	r2, #1
 8007bbc:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 8007bc0:	2300      	movs	r3, #0
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	3710      	adds	r7, #16
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}

08007bca <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007bca:	b580      	push	{r7, lr}
 8007bcc:	b082      	sub	sp, #8
 8007bce:	af00      	add	r7, sp, #0
 8007bd0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d101      	bne.n	8007bdc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007bd8:	2301      	movs	r3, #1
 8007bda:	e041      	b.n	8007c60 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007be2:	b2db      	uxtb	r3, r3
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d106      	bne.n	8007bf6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2200      	movs	r2, #0
 8007bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f7fd f8ef 	bl	8004dd4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2202      	movs	r2, #2
 8007bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681a      	ldr	r2, [r3, #0]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	3304      	adds	r3, #4
 8007c06:	4619      	mov	r1, r3
 8007c08:	4610      	mov	r0, r2
 8007c0a:	f000 fa27 	bl	800805c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2201      	movs	r2, #1
 8007c12:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2201      	movs	r2, #1
 8007c1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2201      	movs	r2, #1
 8007c22:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2201      	movs	r2, #1
 8007c2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2201      	movs	r2, #1
 8007c32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2201      	movs	r2, #1
 8007c3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2201      	movs	r2, #1
 8007c42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2201      	movs	r2, #1
 8007c4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2201      	movs	r2, #1
 8007c52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2201      	movs	r2, #1
 8007c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007c5e:	2300      	movs	r3, #0
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	3708      	adds	r7, #8
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}

08007c68 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b084      	sub	sp, #16
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d109      	bne.n	8007c8c <HAL_TIM_PWM_Start+0x24>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c7e:	b2db      	uxtb	r3, r3
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	bf14      	ite	ne
 8007c84:	2301      	movne	r3, #1
 8007c86:	2300      	moveq	r3, #0
 8007c88:	b2db      	uxtb	r3, r3
 8007c8a:	e022      	b.n	8007cd2 <HAL_TIM_PWM_Start+0x6a>
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	2b04      	cmp	r3, #4
 8007c90:	d109      	bne.n	8007ca6 <HAL_TIM_PWM_Start+0x3e>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007c98:	b2db      	uxtb	r3, r3
 8007c9a:	2b01      	cmp	r3, #1
 8007c9c:	bf14      	ite	ne
 8007c9e:	2301      	movne	r3, #1
 8007ca0:	2300      	moveq	r3, #0
 8007ca2:	b2db      	uxtb	r3, r3
 8007ca4:	e015      	b.n	8007cd2 <HAL_TIM_PWM_Start+0x6a>
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	2b08      	cmp	r3, #8
 8007caa:	d109      	bne.n	8007cc0 <HAL_TIM_PWM_Start+0x58>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007cb2:	b2db      	uxtb	r3, r3
 8007cb4:	2b01      	cmp	r3, #1
 8007cb6:	bf14      	ite	ne
 8007cb8:	2301      	movne	r3, #1
 8007cba:	2300      	moveq	r3, #0
 8007cbc:	b2db      	uxtb	r3, r3
 8007cbe:	e008      	b.n	8007cd2 <HAL_TIM_PWM_Start+0x6a>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007cc6:	b2db      	uxtb	r3, r3
 8007cc8:	2b01      	cmp	r3, #1
 8007cca:	bf14      	ite	ne
 8007ccc:	2301      	movne	r3, #1
 8007cce:	2300      	moveq	r3, #0
 8007cd0:	b2db      	uxtb	r3, r3
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d001      	beq.n	8007cda <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	e07c      	b.n	8007dd4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d104      	bne.n	8007cea <HAL_TIM_PWM_Start+0x82>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2202      	movs	r2, #2
 8007ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007ce8:	e013      	b.n	8007d12 <HAL_TIM_PWM_Start+0xaa>
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	2b04      	cmp	r3, #4
 8007cee:	d104      	bne.n	8007cfa <HAL_TIM_PWM_Start+0x92>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2202      	movs	r2, #2
 8007cf4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007cf8:	e00b      	b.n	8007d12 <HAL_TIM_PWM_Start+0xaa>
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	2b08      	cmp	r3, #8
 8007cfe:	d104      	bne.n	8007d0a <HAL_TIM_PWM_Start+0xa2>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2202      	movs	r2, #2
 8007d04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d08:	e003      	b.n	8007d12 <HAL_TIM_PWM_Start+0xaa>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2202      	movs	r2, #2
 8007d0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	2201      	movs	r2, #1
 8007d18:	6839      	ldr	r1, [r7, #0]
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f000 fbee 	bl	80084fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4a2d      	ldr	r2, [pc, #180]	; (8007ddc <HAL_TIM_PWM_Start+0x174>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d004      	beq.n	8007d34 <HAL_TIM_PWM_Start+0xcc>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4a2c      	ldr	r2, [pc, #176]	; (8007de0 <HAL_TIM_PWM_Start+0x178>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d101      	bne.n	8007d38 <HAL_TIM_PWM_Start+0xd0>
 8007d34:	2301      	movs	r3, #1
 8007d36:	e000      	b.n	8007d3a <HAL_TIM_PWM_Start+0xd2>
 8007d38:	2300      	movs	r3, #0
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d007      	beq.n	8007d4e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007d4c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4a22      	ldr	r2, [pc, #136]	; (8007ddc <HAL_TIM_PWM_Start+0x174>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d022      	beq.n	8007d9e <HAL_TIM_PWM_Start+0x136>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d60:	d01d      	beq.n	8007d9e <HAL_TIM_PWM_Start+0x136>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a1f      	ldr	r2, [pc, #124]	; (8007de4 <HAL_TIM_PWM_Start+0x17c>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d018      	beq.n	8007d9e <HAL_TIM_PWM_Start+0x136>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a1d      	ldr	r2, [pc, #116]	; (8007de8 <HAL_TIM_PWM_Start+0x180>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d013      	beq.n	8007d9e <HAL_TIM_PWM_Start+0x136>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4a1c      	ldr	r2, [pc, #112]	; (8007dec <HAL_TIM_PWM_Start+0x184>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d00e      	beq.n	8007d9e <HAL_TIM_PWM_Start+0x136>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a16      	ldr	r2, [pc, #88]	; (8007de0 <HAL_TIM_PWM_Start+0x178>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d009      	beq.n	8007d9e <HAL_TIM_PWM_Start+0x136>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4a18      	ldr	r2, [pc, #96]	; (8007df0 <HAL_TIM_PWM_Start+0x188>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d004      	beq.n	8007d9e <HAL_TIM_PWM_Start+0x136>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4a16      	ldr	r2, [pc, #88]	; (8007df4 <HAL_TIM_PWM_Start+0x18c>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d111      	bne.n	8007dc2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	689b      	ldr	r3, [r3, #8]
 8007da4:	f003 0307 	and.w	r3, r3, #7
 8007da8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	2b06      	cmp	r3, #6
 8007dae:	d010      	beq.n	8007dd2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	681a      	ldr	r2, [r3, #0]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f042 0201 	orr.w	r2, r2, #1
 8007dbe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007dc0:	e007      	b.n	8007dd2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	681a      	ldr	r2, [r3, #0]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f042 0201 	orr.w	r2, r2, #1
 8007dd0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007dd2:	2300      	movs	r3, #0
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3710      	adds	r7, #16
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}
 8007ddc:	40010000 	.word	0x40010000
 8007de0:	40010400 	.word	0x40010400
 8007de4:	40000400 	.word	0x40000400
 8007de8:	40000800 	.word	0x40000800
 8007dec:	40000c00 	.word	0x40000c00
 8007df0:	40014000 	.word	0x40014000
 8007df4:	40001800 	.word	0x40001800

08007df8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b082      	sub	sp, #8
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	2200      	movs	r2, #0
 8007e08:	6839      	ldr	r1, [r7, #0]
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f000 fb76 	bl	80084fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a2e      	ldr	r2, [pc, #184]	; (8007ed0 <HAL_TIM_PWM_Stop+0xd8>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d004      	beq.n	8007e24 <HAL_TIM_PWM_Stop+0x2c>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4a2d      	ldr	r2, [pc, #180]	; (8007ed4 <HAL_TIM_PWM_Stop+0xdc>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d101      	bne.n	8007e28 <HAL_TIM_PWM_Stop+0x30>
 8007e24:	2301      	movs	r3, #1
 8007e26:	e000      	b.n	8007e2a <HAL_TIM_PWM_Stop+0x32>
 8007e28:	2300      	movs	r3, #0
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d017      	beq.n	8007e5e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	6a1a      	ldr	r2, [r3, #32]
 8007e34:	f241 1311 	movw	r3, #4369	; 0x1111
 8007e38:	4013      	ands	r3, r2
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d10f      	bne.n	8007e5e <HAL_TIM_PWM_Stop+0x66>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	6a1a      	ldr	r2, [r3, #32]
 8007e44:	f240 4344 	movw	r3, #1092	; 0x444
 8007e48:	4013      	ands	r3, r2
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d107      	bne.n	8007e5e <HAL_TIM_PWM_Stop+0x66>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007e5c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	6a1a      	ldr	r2, [r3, #32]
 8007e64:	f241 1311 	movw	r3, #4369	; 0x1111
 8007e68:	4013      	ands	r3, r2
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d10f      	bne.n	8007e8e <HAL_TIM_PWM_Stop+0x96>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	6a1a      	ldr	r2, [r3, #32]
 8007e74:	f240 4344 	movw	r3, #1092	; 0x444
 8007e78:	4013      	ands	r3, r2
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d107      	bne.n	8007e8e <HAL_TIM_PWM_Stop+0x96>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	681a      	ldr	r2, [r3, #0]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f022 0201 	bic.w	r2, r2, #1
 8007e8c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d104      	bne.n	8007e9e <HAL_TIM_PWM_Stop+0xa6>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2201      	movs	r2, #1
 8007e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e9c:	e013      	b.n	8007ec6 <HAL_TIM_PWM_Stop+0xce>
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	2b04      	cmp	r3, #4
 8007ea2:	d104      	bne.n	8007eae <HAL_TIM_PWM_Stop+0xb6>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007eac:	e00b      	b.n	8007ec6 <HAL_TIM_PWM_Stop+0xce>
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	2b08      	cmp	r3, #8
 8007eb2:	d104      	bne.n	8007ebe <HAL_TIM_PWM_Stop+0xc6>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ebc:	e003      	b.n	8007ec6 <HAL_TIM_PWM_Stop+0xce>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2201      	movs	r2, #1
 8007ec2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8007ec6:	2300      	movs	r3, #0
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	3708      	adds	r7, #8
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}
 8007ed0:	40010000 	.word	0x40010000
 8007ed4:	40010400 	.word	0x40010400

08007ed8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b086      	sub	sp, #24
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	60f8      	str	r0, [r7, #12]
 8007ee0:	60b9      	str	r1, [r7, #8]
 8007ee2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007eee:	2b01      	cmp	r3, #1
 8007ef0:	d101      	bne.n	8007ef6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007ef2:	2302      	movs	r3, #2
 8007ef4:	e0ae      	b.n	8008054 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	2201      	movs	r2, #1
 8007efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2b0c      	cmp	r3, #12
 8007f02:	f200 809f 	bhi.w	8008044 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007f06:	a201      	add	r2, pc, #4	; (adr r2, 8007f0c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f0c:	08007f41 	.word	0x08007f41
 8007f10:	08008045 	.word	0x08008045
 8007f14:	08008045 	.word	0x08008045
 8007f18:	08008045 	.word	0x08008045
 8007f1c:	08007f81 	.word	0x08007f81
 8007f20:	08008045 	.word	0x08008045
 8007f24:	08008045 	.word	0x08008045
 8007f28:	08008045 	.word	0x08008045
 8007f2c:	08007fc3 	.word	0x08007fc3
 8007f30:	08008045 	.word	0x08008045
 8007f34:	08008045 	.word	0x08008045
 8007f38:	08008045 	.word	0x08008045
 8007f3c:	08008003 	.word	0x08008003
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	68b9      	ldr	r1, [r7, #8]
 8007f46:	4618      	mov	r0, r3
 8007f48:	f000 f928 	bl	800819c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	699a      	ldr	r2, [r3, #24]
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f042 0208 	orr.w	r2, r2, #8
 8007f5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	699a      	ldr	r2, [r3, #24]
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f022 0204 	bic.w	r2, r2, #4
 8007f6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	6999      	ldr	r1, [r3, #24]
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	691a      	ldr	r2, [r3, #16]
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	430a      	orrs	r2, r1
 8007f7c:	619a      	str	r2, [r3, #24]
      break;
 8007f7e:	e064      	b.n	800804a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	68b9      	ldr	r1, [r7, #8]
 8007f86:	4618      	mov	r0, r3
 8007f88:	f000 f978 	bl	800827c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	699a      	ldr	r2, [r3, #24]
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	699a      	ldr	r2, [r3, #24]
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007faa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	6999      	ldr	r1, [r3, #24]
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	691b      	ldr	r3, [r3, #16]
 8007fb6:	021a      	lsls	r2, r3, #8
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	430a      	orrs	r2, r1
 8007fbe:	619a      	str	r2, [r3, #24]
      break;
 8007fc0:	e043      	b.n	800804a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	68b9      	ldr	r1, [r7, #8]
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f000 f9cd 	bl	8008368 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	69da      	ldr	r2, [r3, #28]
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f042 0208 	orr.w	r2, r2, #8
 8007fdc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	69da      	ldr	r2, [r3, #28]
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f022 0204 	bic.w	r2, r2, #4
 8007fec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	69d9      	ldr	r1, [r3, #28]
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	691a      	ldr	r2, [r3, #16]
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	430a      	orrs	r2, r1
 8007ffe:	61da      	str	r2, [r3, #28]
      break;
 8008000:	e023      	b.n	800804a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	68b9      	ldr	r1, [r7, #8]
 8008008:	4618      	mov	r0, r3
 800800a:	f000 fa21 	bl	8008450 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	69da      	ldr	r2, [r3, #28]
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800801c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	69da      	ldr	r2, [r3, #28]
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800802c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	69d9      	ldr	r1, [r3, #28]
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	691b      	ldr	r3, [r3, #16]
 8008038:	021a      	lsls	r2, r3, #8
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	430a      	orrs	r2, r1
 8008040:	61da      	str	r2, [r3, #28]
      break;
 8008042:	e002      	b.n	800804a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008044:	2301      	movs	r3, #1
 8008046:	75fb      	strb	r3, [r7, #23]
      break;
 8008048:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	2200      	movs	r2, #0
 800804e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008052:	7dfb      	ldrb	r3, [r7, #23]
}
 8008054:	4618      	mov	r0, r3
 8008056:	3718      	adds	r7, #24
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}

0800805c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800805c:	b480      	push	{r7}
 800805e:	b085      	sub	sp, #20
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
 8008064:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	4a40      	ldr	r2, [pc, #256]	; (8008170 <TIM_Base_SetConfig+0x114>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d013      	beq.n	800809c <TIM_Base_SetConfig+0x40>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800807a:	d00f      	beq.n	800809c <TIM_Base_SetConfig+0x40>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	4a3d      	ldr	r2, [pc, #244]	; (8008174 <TIM_Base_SetConfig+0x118>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d00b      	beq.n	800809c <TIM_Base_SetConfig+0x40>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	4a3c      	ldr	r2, [pc, #240]	; (8008178 <TIM_Base_SetConfig+0x11c>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d007      	beq.n	800809c <TIM_Base_SetConfig+0x40>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	4a3b      	ldr	r2, [pc, #236]	; (800817c <TIM_Base_SetConfig+0x120>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d003      	beq.n	800809c <TIM_Base_SetConfig+0x40>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	4a3a      	ldr	r2, [pc, #232]	; (8008180 <TIM_Base_SetConfig+0x124>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d108      	bne.n	80080ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	685b      	ldr	r3, [r3, #4]
 80080a8:	68fa      	ldr	r2, [r7, #12]
 80080aa:	4313      	orrs	r3, r2
 80080ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	4a2f      	ldr	r2, [pc, #188]	; (8008170 <TIM_Base_SetConfig+0x114>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d02b      	beq.n	800810e <TIM_Base_SetConfig+0xb2>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080bc:	d027      	beq.n	800810e <TIM_Base_SetConfig+0xb2>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	4a2c      	ldr	r2, [pc, #176]	; (8008174 <TIM_Base_SetConfig+0x118>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d023      	beq.n	800810e <TIM_Base_SetConfig+0xb2>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	4a2b      	ldr	r2, [pc, #172]	; (8008178 <TIM_Base_SetConfig+0x11c>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d01f      	beq.n	800810e <TIM_Base_SetConfig+0xb2>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	4a2a      	ldr	r2, [pc, #168]	; (800817c <TIM_Base_SetConfig+0x120>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d01b      	beq.n	800810e <TIM_Base_SetConfig+0xb2>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	4a29      	ldr	r2, [pc, #164]	; (8008180 <TIM_Base_SetConfig+0x124>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d017      	beq.n	800810e <TIM_Base_SetConfig+0xb2>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	4a28      	ldr	r2, [pc, #160]	; (8008184 <TIM_Base_SetConfig+0x128>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d013      	beq.n	800810e <TIM_Base_SetConfig+0xb2>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	4a27      	ldr	r2, [pc, #156]	; (8008188 <TIM_Base_SetConfig+0x12c>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d00f      	beq.n	800810e <TIM_Base_SetConfig+0xb2>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	4a26      	ldr	r2, [pc, #152]	; (800818c <TIM_Base_SetConfig+0x130>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d00b      	beq.n	800810e <TIM_Base_SetConfig+0xb2>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	4a25      	ldr	r2, [pc, #148]	; (8008190 <TIM_Base_SetConfig+0x134>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d007      	beq.n	800810e <TIM_Base_SetConfig+0xb2>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	4a24      	ldr	r2, [pc, #144]	; (8008194 <TIM_Base_SetConfig+0x138>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d003      	beq.n	800810e <TIM_Base_SetConfig+0xb2>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	4a23      	ldr	r2, [pc, #140]	; (8008198 <TIM_Base_SetConfig+0x13c>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d108      	bne.n	8008120 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008114:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	68db      	ldr	r3, [r3, #12]
 800811a:	68fa      	ldr	r2, [r7, #12]
 800811c:	4313      	orrs	r3, r2
 800811e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	695b      	ldr	r3, [r3, #20]
 800812a:	4313      	orrs	r3, r2
 800812c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	68fa      	ldr	r2, [r7, #12]
 8008132:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	689a      	ldr	r2, [r3, #8]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	681a      	ldr	r2, [r3, #0]
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	4a0a      	ldr	r2, [pc, #40]	; (8008170 <TIM_Base_SetConfig+0x114>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d003      	beq.n	8008154 <TIM_Base_SetConfig+0xf8>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	4a0c      	ldr	r2, [pc, #48]	; (8008180 <TIM_Base_SetConfig+0x124>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d103      	bne.n	800815c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	691a      	ldr	r2, [r3, #16]
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2201      	movs	r2, #1
 8008160:	615a      	str	r2, [r3, #20]
}
 8008162:	bf00      	nop
 8008164:	3714      	adds	r7, #20
 8008166:	46bd      	mov	sp, r7
 8008168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816c:	4770      	bx	lr
 800816e:	bf00      	nop
 8008170:	40010000 	.word	0x40010000
 8008174:	40000400 	.word	0x40000400
 8008178:	40000800 	.word	0x40000800
 800817c:	40000c00 	.word	0x40000c00
 8008180:	40010400 	.word	0x40010400
 8008184:	40014000 	.word	0x40014000
 8008188:	40014400 	.word	0x40014400
 800818c:	40014800 	.word	0x40014800
 8008190:	40001800 	.word	0x40001800
 8008194:	40001c00 	.word	0x40001c00
 8008198:	40002000 	.word	0x40002000

0800819c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800819c:	b480      	push	{r7}
 800819e:	b087      	sub	sp, #28
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6a1b      	ldr	r3, [r3, #32]
 80081aa:	f023 0201 	bic.w	r2, r3, #1
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6a1b      	ldr	r3, [r3, #32]
 80081b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	685b      	ldr	r3, [r3, #4]
 80081bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	699b      	ldr	r3, [r3, #24]
 80081c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	f023 0303 	bic.w	r3, r3, #3
 80081d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	68fa      	ldr	r2, [r7, #12]
 80081da:	4313      	orrs	r3, r2
 80081dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	f023 0302 	bic.w	r3, r3, #2
 80081e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	689b      	ldr	r3, [r3, #8]
 80081ea:	697a      	ldr	r2, [r7, #20]
 80081ec:	4313      	orrs	r3, r2
 80081ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	4a20      	ldr	r2, [pc, #128]	; (8008274 <TIM_OC1_SetConfig+0xd8>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d003      	beq.n	8008200 <TIM_OC1_SetConfig+0x64>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	4a1f      	ldr	r2, [pc, #124]	; (8008278 <TIM_OC1_SetConfig+0xdc>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d10c      	bne.n	800821a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008200:	697b      	ldr	r3, [r7, #20]
 8008202:	f023 0308 	bic.w	r3, r3, #8
 8008206:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	68db      	ldr	r3, [r3, #12]
 800820c:	697a      	ldr	r2, [r7, #20]
 800820e:	4313      	orrs	r3, r2
 8008210:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	f023 0304 	bic.w	r3, r3, #4
 8008218:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	4a15      	ldr	r2, [pc, #84]	; (8008274 <TIM_OC1_SetConfig+0xd8>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d003      	beq.n	800822a <TIM_OC1_SetConfig+0x8e>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	4a14      	ldr	r2, [pc, #80]	; (8008278 <TIM_OC1_SetConfig+0xdc>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d111      	bne.n	800824e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008230:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008232:	693b      	ldr	r3, [r7, #16]
 8008234:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008238:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	695b      	ldr	r3, [r3, #20]
 800823e:	693a      	ldr	r2, [r7, #16]
 8008240:	4313      	orrs	r3, r2
 8008242:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	699b      	ldr	r3, [r3, #24]
 8008248:	693a      	ldr	r2, [r7, #16]
 800824a:	4313      	orrs	r3, r2
 800824c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	693a      	ldr	r2, [r7, #16]
 8008252:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	68fa      	ldr	r2, [r7, #12]
 8008258:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	685a      	ldr	r2, [r3, #4]
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	697a      	ldr	r2, [r7, #20]
 8008266:	621a      	str	r2, [r3, #32]
}
 8008268:	bf00      	nop
 800826a:	371c      	adds	r7, #28
 800826c:	46bd      	mov	sp, r7
 800826e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008272:	4770      	bx	lr
 8008274:	40010000 	.word	0x40010000
 8008278:	40010400 	.word	0x40010400

0800827c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800827c:	b480      	push	{r7}
 800827e:	b087      	sub	sp, #28
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
 8008284:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6a1b      	ldr	r3, [r3, #32]
 800828a:	f023 0210 	bic.w	r2, r3, #16
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6a1b      	ldr	r3, [r3, #32]
 8008296:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	685b      	ldr	r3, [r3, #4]
 800829c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	699b      	ldr	r3, [r3, #24]
 80082a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	021b      	lsls	r3, r3, #8
 80082ba:	68fa      	ldr	r2, [r7, #12]
 80082bc:	4313      	orrs	r3, r2
 80082be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	f023 0320 	bic.w	r3, r3, #32
 80082c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	689b      	ldr	r3, [r3, #8]
 80082cc:	011b      	lsls	r3, r3, #4
 80082ce:	697a      	ldr	r2, [r7, #20]
 80082d0:	4313      	orrs	r3, r2
 80082d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	4a22      	ldr	r2, [pc, #136]	; (8008360 <TIM_OC2_SetConfig+0xe4>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d003      	beq.n	80082e4 <TIM_OC2_SetConfig+0x68>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	4a21      	ldr	r2, [pc, #132]	; (8008364 <TIM_OC2_SetConfig+0xe8>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d10d      	bne.n	8008300 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80082ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	68db      	ldr	r3, [r3, #12]
 80082f0:	011b      	lsls	r3, r3, #4
 80082f2:	697a      	ldr	r2, [r7, #20]
 80082f4:	4313      	orrs	r3, r2
 80082f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80082f8:	697b      	ldr	r3, [r7, #20]
 80082fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	4a17      	ldr	r2, [pc, #92]	; (8008360 <TIM_OC2_SetConfig+0xe4>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d003      	beq.n	8008310 <TIM_OC2_SetConfig+0x94>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	4a16      	ldr	r2, [pc, #88]	; (8008364 <TIM_OC2_SetConfig+0xe8>)
 800830c:	4293      	cmp	r3, r2
 800830e:	d113      	bne.n	8008338 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008310:	693b      	ldr	r3, [r7, #16]
 8008312:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008316:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800831e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	695b      	ldr	r3, [r3, #20]
 8008324:	009b      	lsls	r3, r3, #2
 8008326:	693a      	ldr	r2, [r7, #16]
 8008328:	4313      	orrs	r3, r2
 800832a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	699b      	ldr	r3, [r3, #24]
 8008330:	009b      	lsls	r3, r3, #2
 8008332:	693a      	ldr	r2, [r7, #16]
 8008334:	4313      	orrs	r3, r2
 8008336:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	693a      	ldr	r2, [r7, #16]
 800833c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	68fa      	ldr	r2, [r7, #12]
 8008342:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	685a      	ldr	r2, [r3, #4]
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	697a      	ldr	r2, [r7, #20]
 8008350:	621a      	str	r2, [r3, #32]
}
 8008352:	bf00      	nop
 8008354:	371c      	adds	r7, #28
 8008356:	46bd      	mov	sp, r7
 8008358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835c:	4770      	bx	lr
 800835e:	bf00      	nop
 8008360:	40010000 	.word	0x40010000
 8008364:	40010400 	.word	0x40010400

08008368 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008368:	b480      	push	{r7}
 800836a:	b087      	sub	sp, #28
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
 8008370:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6a1b      	ldr	r3, [r3, #32]
 8008376:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6a1b      	ldr	r3, [r3, #32]
 8008382:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	685b      	ldr	r3, [r3, #4]
 8008388:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	69db      	ldr	r3, [r3, #28]
 800838e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008396:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	f023 0303 	bic.w	r3, r3, #3
 800839e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	68fa      	ldr	r2, [r7, #12]
 80083a6:	4313      	orrs	r3, r2
 80083a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80083aa:	697b      	ldr	r3, [r7, #20]
 80083ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80083b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	689b      	ldr	r3, [r3, #8]
 80083b6:	021b      	lsls	r3, r3, #8
 80083b8:	697a      	ldr	r2, [r7, #20]
 80083ba:	4313      	orrs	r3, r2
 80083bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	4a21      	ldr	r2, [pc, #132]	; (8008448 <TIM_OC3_SetConfig+0xe0>)
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d003      	beq.n	80083ce <TIM_OC3_SetConfig+0x66>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	4a20      	ldr	r2, [pc, #128]	; (800844c <TIM_OC3_SetConfig+0xe4>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d10d      	bne.n	80083ea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80083d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	68db      	ldr	r3, [r3, #12]
 80083da:	021b      	lsls	r3, r3, #8
 80083dc:	697a      	ldr	r2, [r7, #20]
 80083de:	4313      	orrs	r3, r2
 80083e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80083e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	4a16      	ldr	r2, [pc, #88]	; (8008448 <TIM_OC3_SetConfig+0xe0>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d003      	beq.n	80083fa <TIM_OC3_SetConfig+0x92>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	4a15      	ldr	r2, [pc, #84]	; (800844c <TIM_OC3_SetConfig+0xe4>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d113      	bne.n	8008422 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80083fa:	693b      	ldr	r3, [r7, #16]
 80083fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008400:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008402:	693b      	ldr	r3, [r7, #16]
 8008404:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008408:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	695b      	ldr	r3, [r3, #20]
 800840e:	011b      	lsls	r3, r3, #4
 8008410:	693a      	ldr	r2, [r7, #16]
 8008412:	4313      	orrs	r3, r2
 8008414:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	699b      	ldr	r3, [r3, #24]
 800841a:	011b      	lsls	r3, r3, #4
 800841c:	693a      	ldr	r2, [r7, #16]
 800841e:	4313      	orrs	r3, r2
 8008420:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	693a      	ldr	r2, [r7, #16]
 8008426:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	68fa      	ldr	r2, [r7, #12]
 800842c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	685a      	ldr	r2, [r3, #4]
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	697a      	ldr	r2, [r7, #20]
 800843a:	621a      	str	r2, [r3, #32]
}
 800843c:	bf00      	nop
 800843e:	371c      	adds	r7, #28
 8008440:	46bd      	mov	sp, r7
 8008442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008446:	4770      	bx	lr
 8008448:	40010000 	.word	0x40010000
 800844c:	40010400 	.word	0x40010400

08008450 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008450:	b480      	push	{r7}
 8008452:	b087      	sub	sp, #28
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
 8008458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6a1b      	ldr	r3, [r3, #32]
 800845e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6a1b      	ldr	r3, [r3, #32]
 800846a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	685b      	ldr	r3, [r3, #4]
 8008470:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	69db      	ldr	r3, [r3, #28]
 8008476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800847e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008486:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	021b      	lsls	r3, r3, #8
 800848e:	68fa      	ldr	r2, [r7, #12]
 8008490:	4313      	orrs	r3, r2
 8008492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008494:	693b      	ldr	r3, [r7, #16]
 8008496:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800849a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	689b      	ldr	r3, [r3, #8]
 80084a0:	031b      	lsls	r3, r3, #12
 80084a2:	693a      	ldr	r2, [r7, #16]
 80084a4:	4313      	orrs	r3, r2
 80084a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	4a12      	ldr	r2, [pc, #72]	; (80084f4 <TIM_OC4_SetConfig+0xa4>)
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d003      	beq.n	80084b8 <TIM_OC4_SetConfig+0x68>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	4a11      	ldr	r2, [pc, #68]	; (80084f8 <TIM_OC4_SetConfig+0xa8>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d109      	bne.n	80084cc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80084b8:	697b      	ldr	r3, [r7, #20]
 80084ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80084be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	695b      	ldr	r3, [r3, #20]
 80084c4:	019b      	lsls	r3, r3, #6
 80084c6:	697a      	ldr	r2, [r7, #20]
 80084c8:	4313      	orrs	r3, r2
 80084ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	697a      	ldr	r2, [r7, #20]
 80084d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	68fa      	ldr	r2, [r7, #12]
 80084d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	685a      	ldr	r2, [r3, #4]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	693a      	ldr	r2, [r7, #16]
 80084e4:	621a      	str	r2, [r3, #32]
}
 80084e6:	bf00      	nop
 80084e8:	371c      	adds	r7, #28
 80084ea:	46bd      	mov	sp, r7
 80084ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f0:	4770      	bx	lr
 80084f2:	bf00      	nop
 80084f4:	40010000 	.word	0x40010000
 80084f8:	40010400 	.word	0x40010400

080084fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80084fc:	b480      	push	{r7}
 80084fe:	b087      	sub	sp, #28
 8008500:	af00      	add	r7, sp, #0
 8008502:	60f8      	str	r0, [r7, #12]
 8008504:	60b9      	str	r1, [r7, #8]
 8008506:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	f003 031f 	and.w	r3, r3, #31
 800850e:	2201      	movs	r2, #1
 8008510:	fa02 f303 	lsl.w	r3, r2, r3
 8008514:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	6a1a      	ldr	r2, [r3, #32]
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	43db      	mvns	r3, r3
 800851e:	401a      	ands	r2, r3
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	6a1a      	ldr	r2, [r3, #32]
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	f003 031f 	and.w	r3, r3, #31
 800852e:	6879      	ldr	r1, [r7, #4]
 8008530:	fa01 f303 	lsl.w	r3, r1, r3
 8008534:	431a      	orrs	r2, r3
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	621a      	str	r2, [r3, #32]
}
 800853a:	bf00      	nop
 800853c:	371c      	adds	r7, #28
 800853e:	46bd      	mov	sp, r7
 8008540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008544:	4770      	bx	lr
	...

08008548 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008548:	b480      	push	{r7}
 800854a:	b085      	sub	sp, #20
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
 8008550:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008558:	2b01      	cmp	r3, #1
 800855a:	d101      	bne.n	8008560 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800855c:	2302      	movs	r3, #2
 800855e:	e05a      	b.n	8008616 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2201      	movs	r2, #1
 8008564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2202      	movs	r2, #2
 800856c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	685b      	ldr	r3, [r3, #4]
 8008576:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	689b      	ldr	r3, [r3, #8]
 800857e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008586:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	68fa      	ldr	r2, [r7, #12]
 800858e:	4313      	orrs	r3, r2
 8008590:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	68fa      	ldr	r2, [r7, #12]
 8008598:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4a21      	ldr	r2, [pc, #132]	; (8008624 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d022      	beq.n	80085ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085ac:	d01d      	beq.n	80085ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	4a1d      	ldr	r2, [pc, #116]	; (8008628 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d018      	beq.n	80085ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	4a1b      	ldr	r2, [pc, #108]	; (800862c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d013      	beq.n	80085ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	4a1a      	ldr	r2, [pc, #104]	; (8008630 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d00e      	beq.n	80085ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4a18      	ldr	r2, [pc, #96]	; (8008634 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d009      	beq.n	80085ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4a17      	ldr	r2, [pc, #92]	; (8008638 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d004      	beq.n	80085ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4a15      	ldr	r2, [pc, #84]	; (800863c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d10c      	bne.n	8008604 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80085f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	685b      	ldr	r3, [r3, #4]
 80085f6:	68ba      	ldr	r2, [r7, #8]
 80085f8:	4313      	orrs	r3, r2
 80085fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	68ba      	ldr	r2, [r7, #8]
 8008602:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2201      	movs	r2, #1
 8008608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2200      	movs	r2, #0
 8008610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008614:	2300      	movs	r3, #0
}
 8008616:	4618      	mov	r0, r3
 8008618:	3714      	adds	r7, #20
 800861a:	46bd      	mov	sp, r7
 800861c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008620:	4770      	bx	lr
 8008622:	bf00      	nop
 8008624:	40010000 	.word	0x40010000
 8008628:	40000400 	.word	0x40000400
 800862c:	40000800 	.word	0x40000800
 8008630:	40000c00 	.word	0x40000c00
 8008634:	40010400 	.word	0x40010400
 8008638:	40014000 	.word	0x40014000
 800863c:	40001800 	.word	0x40001800

08008640 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008640:	b480      	push	{r7}
 8008642:	b085      	sub	sp, #20
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
 8008648:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800864a:	2300      	movs	r3, #0
 800864c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008654:	2b01      	cmp	r3, #1
 8008656:	d101      	bne.n	800865c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008658:	2302      	movs	r3, #2
 800865a:	e03d      	b.n	80086d8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2201      	movs	r2, #1
 8008660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	68db      	ldr	r3, [r3, #12]
 800866e:	4313      	orrs	r3, r2
 8008670:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	689b      	ldr	r3, [r3, #8]
 800867c:	4313      	orrs	r3, r2
 800867e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	685b      	ldr	r3, [r3, #4]
 800868a:	4313      	orrs	r3, r2
 800868c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	4313      	orrs	r3, r2
 800869a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	691b      	ldr	r3, [r3, #16]
 80086a6:	4313      	orrs	r3, r2
 80086a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	695b      	ldr	r3, [r3, #20]
 80086b4:	4313      	orrs	r3, r2
 80086b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	69db      	ldr	r3, [r3, #28]
 80086c2:	4313      	orrs	r3, r2
 80086c4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	68fa      	ldr	r2, [r7, #12]
 80086cc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2200      	movs	r2, #0
 80086d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80086d6:	2300      	movs	r3, #0
}
 80086d8:	4618      	mov	r0, r3
 80086da:	3714      	adds	r7, #20
 80086dc:	46bd      	mov	sp, r7
 80086de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e2:	4770      	bx	lr

080086e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b082      	sub	sp, #8
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d101      	bne.n	80086f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80086f2:	2301      	movs	r3, #1
 80086f4:	e03f      	b.n	8008776 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086fc:	b2db      	uxtb	r3, r3
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d106      	bne.n	8008710 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2200      	movs	r2, #0
 8008706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f7fc fbbe 	bl	8004e8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2224      	movs	r2, #36	; 0x24
 8008714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	68da      	ldr	r2, [r3, #12]
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008726:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f000 fd7b 	bl	8009224 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	691a      	ldr	r2, [r3, #16]
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800873c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	695a      	ldr	r2, [r3, #20]
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800874c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	68da      	ldr	r2, [r3, #12]
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800875c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2200      	movs	r2, #0
 8008762:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2220      	movs	r2, #32
 8008768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2220      	movs	r2, #32
 8008770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008774:	2300      	movs	r3, #0
}
 8008776:	4618      	mov	r0, r3
 8008778:	3708      	adds	r7, #8
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}

0800877e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800877e:	b580      	push	{r7, lr}
 8008780:	b08a      	sub	sp, #40	; 0x28
 8008782:	af02      	add	r7, sp, #8
 8008784:	60f8      	str	r0, [r7, #12]
 8008786:	60b9      	str	r1, [r7, #8]
 8008788:	603b      	str	r3, [r7, #0]
 800878a:	4613      	mov	r3, r2
 800878c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800878e:	2300      	movs	r3, #0
 8008790:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008798:	b2db      	uxtb	r3, r3
 800879a:	2b20      	cmp	r3, #32
 800879c:	d17c      	bne.n	8008898 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d002      	beq.n	80087aa <HAL_UART_Transmit+0x2c>
 80087a4:	88fb      	ldrh	r3, [r7, #6]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d101      	bne.n	80087ae <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80087aa:	2301      	movs	r3, #1
 80087ac:	e075      	b.n	800889a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087b4:	2b01      	cmp	r3, #1
 80087b6:	d101      	bne.n	80087bc <HAL_UART_Transmit+0x3e>
 80087b8:	2302      	movs	r3, #2
 80087ba:	e06e      	b.n	800889a <HAL_UART_Transmit+0x11c>
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	2201      	movs	r2, #1
 80087c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	2200      	movs	r2, #0
 80087c8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	2221      	movs	r2, #33	; 0x21
 80087ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80087d2:	f7fc ffb1 	bl	8005738 <HAL_GetTick>
 80087d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	88fa      	ldrh	r2, [r7, #6]
 80087dc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	88fa      	ldrh	r2, [r7, #6]
 80087e2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	689b      	ldr	r3, [r3, #8]
 80087e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087ec:	d108      	bne.n	8008800 <HAL_UART_Transmit+0x82>
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	691b      	ldr	r3, [r3, #16]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d104      	bne.n	8008800 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80087f6:	2300      	movs	r3, #0
 80087f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	61bb      	str	r3, [r7, #24]
 80087fe:	e003      	b.n	8008808 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008804:	2300      	movs	r3, #0
 8008806:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2200      	movs	r2, #0
 800880c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008810:	e02a      	b.n	8008868 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	9300      	str	r3, [sp, #0]
 8008816:	697b      	ldr	r3, [r7, #20]
 8008818:	2200      	movs	r2, #0
 800881a:	2180      	movs	r1, #128	; 0x80
 800881c:	68f8      	ldr	r0, [r7, #12]
 800881e:	f000 faf9 	bl	8008e14 <UART_WaitOnFlagUntilTimeout>
 8008822:	4603      	mov	r3, r0
 8008824:	2b00      	cmp	r3, #0
 8008826:	d001      	beq.n	800882c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008828:	2303      	movs	r3, #3
 800882a:	e036      	b.n	800889a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800882c:	69fb      	ldr	r3, [r7, #28]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d10b      	bne.n	800884a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008832:	69bb      	ldr	r3, [r7, #24]
 8008834:	881b      	ldrh	r3, [r3, #0]
 8008836:	461a      	mov	r2, r3
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008840:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008842:	69bb      	ldr	r3, [r7, #24]
 8008844:	3302      	adds	r3, #2
 8008846:	61bb      	str	r3, [r7, #24]
 8008848:	e007      	b.n	800885a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800884a:	69fb      	ldr	r3, [r7, #28]
 800884c:	781a      	ldrb	r2, [r3, #0]
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008854:	69fb      	ldr	r3, [r7, #28]
 8008856:	3301      	adds	r3, #1
 8008858:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800885e:	b29b      	uxth	r3, r3
 8008860:	3b01      	subs	r3, #1
 8008862:	b29a      	uxth	r2, r3
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800886c:	b29b      	uxth	r3, r3
 800886e:	2b00      	cmp	r3, #0
 8008870:	d1cf      	bne.n	8008812 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	9300      	str	r3, [sp, #0]
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	2200      	movs	r2, #0
 800887a:	2140      	movs	r1, #64	; 0x40
 800887c:	68f8      	ldr	r0, [r7, #12]
 800887e:	f000 fac9 	bl	8008e14 <UART_WaitOnFlagUntilTimeout>
 8008882:	4603      	mov	r3, r0
 8008884:	2b00      	cmp	r3, #0
 8008886:	d001      	beq.n	800888c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008888:	2303      	movs	r3, #3
 800888a:	e006      	b.n	800889a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	2220      	movs	r2, #32
 8008890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008894:	2300      	movs	r3, #0
 8008896:	e000      	b.n	800889a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008898:	2302      	movs	r3, #2
  }
}
 800889a:	4618      	mov	r0, r3
 800889c:	3720      	adds	r7, #32
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}
	...

080088a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b0ba      	sub	sp, #232	; 0xe8
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	68db      	ldr	r3, [r3, #12]
 80088bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	695b      	ldr	r3, [r3, #20]
 80088c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80088ca:	2300      	movs	r3, #0
 80088cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80088d0:	2300      	movs	r3, #0
 80088d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80088d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088da:	f003 030f 	and.w	r3, r3, #15
 80088de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80088e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d10f      	bne.n	800890a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80088ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088ee:	f003 0320 	and.w	r3, r3, #32
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d009      	beq.n	800890a <HAL_UART_IRQHandler+0x66>
 80088f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088fa:	f003 0320 	and.w	r3, r3, #32
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d003      	beq.n	800890a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008902:	6878      	ldr	r0, [r7, #4]
 8008904:	f000 fbd3 	bl	80090ae <UART_Receive_IT>
      return;
 8008908:	e256      	b.n	8008db8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800890a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800890e:	2b00      	cmp	r3, #0
 8008910:	f000 80de 	beq.w	8008ad0 <HAL_UART_IRQHandler+0x22c>
 8008914:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008918:	f003 0301 	and.w	r3, r3, #1
 800891c:	2b00      	cmp	r3, #0
 800891e:	d106      	bne.n	800892e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008920:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008924:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008928:	2b00      	cmp	r3, #0
 800892a:	f000 80d1 	beq.w	8008ad0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800892e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008932:	f003 0301 	and.w	r3, r3, #1
 8008936:	2b00      	cmp	r3, #0
 8008938:	d00b      	beq.n	8008952 <HAL_UART_IRQHandler+0xae>
 800893a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800893e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008942:	2b00      	cmp	r3, #0
 8008944:	d005      	beq.n	8008952 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800894a:	f043 0201 	orr.w	r2, r3, #1
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008952:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008956:	f003 0304 	and.w	r3, r3, #4
 800895a:	2b00      	cmp	r3, #0
 800895c:	d00b      	beq.n	8008976 <HAL_UART_IRQHandler+0xd2>
 800895e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008962:	f003 0301 	and.w	r3, r3, #1
 8008966:	2b00      	cmp	r3, #0
 8008968:	d005      	beq.n	8008976 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800896e:	f043 0202 	orr.w	r2, r3, #2
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008976:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800897a:	f003 0302 	and.w	r3, r3, #2
 800897e:	2b00      	cmp	r3, #0
 8008980:	d00b      	beq.n	800899a <HAL_UART_IRQHandler+0xf6>
 8008982:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008986:	f003 0301 	and.w	r3, r3, #1
 800898a:	2b00      	cmp	r3, #0
 800898c:	d005      	beq.n	800899a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008992:	f043 0204 	orr.w	r2, r3, #4
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800899a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800899e:	f003 0308 	and.w	r3, r3, #8
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d011      	beq.n	80089ca <HAL_UART_IRQHandler+0x126>
 80089a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089aa:	f003 0320 	and.w	r3, r3, #32
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d105      	bne.n	80089be <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80089b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80089b6:	f003 0301 	and.w	r3, r3, #1
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d005      	beq.n	80089ca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089c2:	f043 0208 	orr.w	r2, r3, #8
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	f000 81ed 	beq.w	8008dae <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80089d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089d8:	f003 0320 	and.w	r3, r3, #32
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d008      	beq.n	80089f2 <HAL_UART_IRQHandler+0x14e>
 80089e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089e4:	f003 0320 	and.w	r3, r3, #32
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d002      	beq.n	80089f2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f000 fb5e 	bl	80090ae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	695b      	ldr	r3, [r3, #20]
 80089f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089fc:	2b40      	cmp	r3, #64	; 0x40
 80089fe:	bf0c      	ite	eq
 8008a00:	2301      	moveq	r3, #1
 8008a02:	2300      	movne	r3, #0
 8008a04:	b2db      	uxtb	r3, r3
 8008a06:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a0e:	f003 0308 	and.w	r3, r3, #8
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d103      	bne.n	8008a1e <HAL_UART_IRQHandler+0x17a>
 8008a16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d04f      	beq.n	8008abe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f000 fa66 	bl	8008ef0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	695b      	ldr	r3, [r3, #20]
 8008a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a2e:	2b40      	cmp	r3, #64	; 0x40
 8008a30:	d141      	bne.n	8008ab6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	3314      	adds	r3, #20
 8008a38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008a40:	e853 3f00 	ldrex	r3, [r3]
 8008a44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008a48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008a4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	3314      	adds	r3, #20
 8008a5a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008a5e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008a62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a66:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008a6a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008a6e:	e841 2300 	strex	r3, r2, [r1]
 8008a72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008a76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d1d9      	bne.n	8008a32 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d013      	beq.n	8008aae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a8a:	4a7d      	ldr	r2, [pc, #500]	; (8008c80 <HAL_UART_IRQHandler+0x3dc>)
 8008a8c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a92:	4618      	mov	r0, r3
 8008a94:	f7fd f801 	bl	8005a9a <HAL_DMA_Abort_IT>
 8008a98:	4603      	mov	r3, r0
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d016      	beq.n	8008acc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008aa4:	687a      	ldr	r2, [r7, #4]
 8008aa6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008aa8:	4610      	mov	r0, r2
 8008aaa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008aac:	e00e      	b.n	8008acc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f000 f99a 	bl	8008de8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ab4:	e00a      	b.n	8008acc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f000 f996 	bl	8008de8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008abc:	e006      	b.n	8008acc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f000 f992 	bl	8008de8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008aca:	e170      	b.n	8008dae <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008acc:	bf00      	nop
    return;
 8008ace:	e16e      	b.n	8008dae <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ad4:	2b01      	cmp	r3, #1
 8008ad6:	f040 814a 	bne.w	8008d6e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008ada:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ade:	f003 0310 	and.w	r3, r3, #16
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	f000 8143 	beq.w	8008d6e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008ae8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008aec:	f003 0310 	and.w	r3, r3, #16
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	f000 813c 	beq.w	8008d6e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008af6:	2300      	movs	r3, #0
 8008af8:	60bb      	str	r3, [r7, #8]
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	60bb      	str	r3, [r7, #8]
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	685b      	ldr	r3, [r3, #4]
 8008b08:	60bb      	str	r3, [r7, #8]
 8008b0a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	695b      	ldr	r3, [r3, #20]
 8008b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b16:	2b40      	cmp	r3, #64	; 0x40
 8008b18:	f040 80b4 	bne.w	8008c84 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	685b      	ldr	r3, [r3, #4]
 8008b24:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008b28:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	f000 8140 	beq.w	8008db2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008b36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008b3a:	429a      	cmp	r2, r3
 8008b3c:	f080 8139 	bcs.w	8008db2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008b46:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b4c:	69db      	ldr	r3, [r3, #28]
 8008b4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b52:	f000 8088 	beq.w	8008c66 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	330c      	adds	r3, #12
 8008b5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b60:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008b64:	e853 3f00 	ldrex	r3, [r3]
 8008b68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008b6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008b70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	330c      	adds	r3, #12
 8008b7e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008b82:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008b86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b8a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008b8e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008b92:	e841 2300 	strex	r3, r2, [r1]
 8008b96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008b9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d1d9      	bne.n	8008b56 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	3314      	adds	r3, #20
 8008ba8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008baa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008bac:	e853 3f00 	ldrex	r3, [r3]
 8008bb0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008bb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008bb4:	f023 0301 	bic.w	r3, r3, #1
 8008bb8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	3314      	adds	r3, #20
 8008bc2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008bc6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008bca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bcc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008bce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008bd2:	e841 2300 	strex	r3, r2, [r1]
 8008bd6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008bd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d1e1      	bne.n	8008ba2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	3314      	adds	r3, #20
 8008be4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008be6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008be8:	e853 3f00 	ldrex	r3, [r3]
 8008bec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008bee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008bf0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008bf4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	3314      	adds	r3, #20
 8008bfe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008c02:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008c04:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c06:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008c08:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008c0a:	e841 2300 	strex	r3, r2, [r1]
 8008c0e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008c10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d1e3      	bne.n	8008bde <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2220      	movs	r2, #32
 8008c1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2200      	movs	r2, #0
 8008c22:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	330c      	adds	r3, #12
 8008c2a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c2e:	e853 3f00 	ldrex	r3, [r3]
 8008c32:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008c34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c36:	f023 0310 	bic.w	r3, r3, #16
 8008c3a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	330c      	adds	r3, #12
 8008c44:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008c48:	65ba      	str	r2, [r7, #88]	; 0x58
 8008c4a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c4c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008c4e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008c50:	e841 2300 	strex	r3, r2, [r1]
 8008c54:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008c56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d1e3      	bne.n	8008c24 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c60:	4618      	mov	r0, r3
 8008c62:	f7fc feaa 	bl	80059ba <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008c6e:	b29b      	uxth	r3, r3
 8008c70:	1ad3      	subs	r3, r2, r3
 8008c72:	b29b      	uxth	r3, r3
 8008c74:	4619      	mov	r1, r3
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f000 f8c0 	bl	8008dfc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008c7c:	e099      	b.n	8008db2 <HAL_UART_IRQHandler+0x50e>
 8008c7e:	bf00      	nop
 8008c80:	08008fb7 	.word	0x08008fb7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008c8c:	b29b      	uxth	r3, r3
 8008c8e:	1ad3      	subs	r3, r2, r3
 8008c90:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008c98:	b29b      	uxth	r3, r3
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	f000 808b 	beq.w	8008db6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008ca0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	f000 8086 	beq.w	8008db6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	330c      	adds	r3, #12
 8008cb0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cb4:	e853 3f00 	ldrex	r3, [r3]
 8008cb8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cbc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008cc0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	330c      	adds	r3, #12
 8008cca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008cce:	647a      	str	r2, [r7, #68]	; 0x44
 8008cd0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cd2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008cd4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008cd6:	e841 2300 	strex	r3, r2, [r1]
 8008cda:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008cdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d1e3      	bne.n	8008caa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	3314      	adds	r3, #20
 8008ce8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cec:	e853 3f00 	ldrex	r3, [r3]
 8008cf0:	623b      	str	r3, [r7, #32]
   return(result);
 8008cf2:	6a3b      	ldr	r3, [r7, #32]
 8008cf4:	f023 0301 	bic.w	r3, r3, #1
 8008cf8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	3314      	adds	r3, #20
 8008d02:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008d06:	633a      	str	r2, [r7, #48]	; 0x30
 8008d08:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008d0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d0e:	e841 2300 	strex	r3, r2, [r1]
 8008d12:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d1e3      	bne.n	8008ce2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2220      	movs	r2, #32
 8008d1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2200      	movs	r2, #0
 8008d26:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	330c      	adds	r3, #12
 8008d2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d30:	693b      	ldr	r3, [r7, #16]
 8008d32:	e853 3f00 	ldrex	r3, [r3]
 8008d36:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	f023 0310 	bic.w	r3, r3, #16
 8008d3e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	330c      	adds	r3, #12
 8008d48:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008d4c:	61fa      	str	r2, [r7, #28]
 8008d4e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d50:	69b9      	ldr	r1, [r7, #24]
 8008d52:	69fa      	ldr	r2, [r7, #28]
 8008d54:	e841 2300 	strex	r3, r2, [r1]
 8008d58:	617b      	str	r3, [r7, #20]
   return(result);
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d1e3      	bne.n	8008d28 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008d60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008d64:	4619      	mov	r1, r3
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f000 f848 	bl	8008dfc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008d6c:	e023      	b.n	8008db6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008d6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d009      	beq.n	8008d8e <HAL_UART_IRQHandler+0x4ea>
 8008d7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d003      	beq.n	8008d8e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f000 f929 	bl	8008fde <UART_Transmit_IT>
    return;
 8008d8c:	e014      	b.n	8008db8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008d8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d00e      	beq.n	8008db8 <HAL_UART_IRQHandler+0x514>
 8008d9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d008      	beq.n	8008db8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f000 f969 	bl	800907e <UART_EndTransmit_IT>
    return;
 8008dac:	e004      	b.n	8008db8 <HAL_UART_IRQHandler+0x514>
    return;
 8008dae:	bf00      	nop
 8008db0:	e002      	b.n	8008db8 <HAL_UART_IRQHandler+0x514>
      return;
 8008db2:	bf00      	nop
 8008db4:	e000      	b.n	8008db8 <HAL_UART_IRQHandler+0x514>
      return;
 8008db6:	bf00      	nop
  }
}
 8008db8:	37e8      	adds	r7, #232	; 0xe8
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}
 8008dbe:	bf00      	nop

08008dc0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	b083      	sub	sp, #12
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008dc8:	bf00      	nop
 8008dca:	370c      	adds	r7, #12
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd2:	4770      	bx	lr

08008dd4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b083      	sub	sp, #12
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008ddc:	bf00      	nop
 8008dde:	370c      	adds	r7, #12
 8008de0:	46bd      	mov	sp, r7
 8008de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de6:	4770      	bx	lr

08008de8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008de8:	b480      	push	{r7}
 8008dea:	b083      	sub	sp, #12
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008df0:	bf00      	nop
 8008df2:	370c      	adds	r7, #12
 8008df4:	46bd      	mov	sp, r7
 8008df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfa:	4770      	bx	lr

08008dfc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b083      	sub	sp, #12
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
 8008e04:	460b      	mov	r3, r1
 8008e06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008e08:	bf00      	nop
 8008e0a:	370c      	adds	r7, #12
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e12:	4770      	bx	lr

08008e14 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b090      	sub	sp, #64	; 0x40
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	60f8      	str	r0, [r7, #12]
 8008e1c:	60b9      	str	r1, [r7, #8]
 8008e1e:	603b      	str	r3, [r7, #0]
 8008e20:	4613      	mov	r3, r2
 8008e22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e24:	e050      	b.n	8008ec8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e2c:	d04c      	beq.n	8008ec8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008e2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d007      	beq.n	8008e44 <UART_WaitOnFlagUntilTimeout+0x30>
 8008e34:	f7fc fc80 	bl	8005738 <HAL_GetTick>
 8008e38:	4602      	mov	r2, r0
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	1ad3      	subs	r3, r2, r3
 8008e3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008e40:	429a      	cmp	r2, r3
 8008e42:	d241      	bcs.n	8008ec8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	330c      	adds	r3, #12
 8008e4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e4e:	e853 3f00 	ldrex	r3, [r3]
 8008e52:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e56:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	330c      	adds	r3, #12
 8008e62:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008e64:	637a      	str	r2, [r7, #52]	; 0x34
 8008e66:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008e6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e6c:	e841 2300 	strex	r3, r2, [r1]
 8008e70:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d1e5      	bne.n	8008e44 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	3314      	adds	r3, #20
 8008e7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e80:	697b      	ldr	r3, [r7, #20]
 8008e82:	e853 3f00 	ldrex	r3, [r3]
 8008e86:	613b      	str	r3, [r7, #16]
   return(result);
 8008e88:	693b      	ldr	r3, [r7, #16]
 8008e8a:	f023 0301 	bic.w	r3, r3, #1
 8008e8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	3314      	adds	r3, #20
 8008e96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008e98:	623a      	str	r2, [r7, #32]
 8008e9a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e9c:	69f9      	ldr	r1, [r7, #28]
 8008e9e:	6a3a      	ldr	r2, [r7, #32]
 8008ea0:	e841 2300 	strex	r3, r2, [r1]
 8008ea4:	61bb      	str	r3, [r7, #24]
   return(result);
 8008ea6:	69bb      	ldr	r3, [r7, #24]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d1e5      	bne.n	8008e78 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	2220      	movs	r2, #32
 8008eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	2220      	movs	r2, #32
 8008eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008ec4:	2303      	movs	r3, #3
 8008ec6:	e00f      	b.n	8008ee8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	681a      	ldr	r2, [r3, #0]
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	4013      	ands	r3, r2
 8008ed2:	68ba      	ldr	r2, [r7, #8]
 8008ed4:	429a      	cmp	r2, r3
 8008ed6:	bf0c      	ite	eq
 8008ed8:	2301      	moveq	r3, #1
 8008eda:	2300      	movne	r3, #0
 8008edc:	b2db      	uxtb	r3, r3
 8008ede:	461a      	mov	r2, r3
 8008ee0:	79fb      	ldrb	r3, [r7, #7]
 8008ee2:	429a      	cmp	r2, r3
 8008ee4:	d09f      	beq.n	8008e26 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008ee6:	2300      	movs	r3, #0
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3740      	adds	r7, #64	; 0x40
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}

08008ef0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b095      	sub	sp, #84	; 0x54
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	330c      	adds	r3, #12
 8008efe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f02:	e853 3f00 	ldrex	r3, [r3]
 8008f06:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f0a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008f0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	330c      	adds	r3, #12
 8008f16:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008f18:	643a      	str	r2, [r7, #64]	; 0x40
 8008f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f1c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008f1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008f20:	e841 2300 	strex	r3, r2, [r1]
 8008f24:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d1e5      	bne.n	8008ef8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	3314      	adds	r3, #20
 8008f32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f34:	6a3b      	ldr	r3, [r7, #32]
 8008f36:	e853 3f00 	ldrex	r3, [r3]
 8008f3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f3c:	69fb      	ldr	r3, [r7, #28]
 8008f3e:	f023 0301 	bic.w	r3, r3, #1
 8008f42:	64bb      	str	r3, [r7, #72]	; 0x48
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	3314      	adds	r3, #20
 8008f4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f4c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008f4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008f52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f54:	e841 2300 	strex	r3, r2, [r1]
 8008f58:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d1e5      	bne.n	8008f2c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f64:	2b01      	cmp	r3, #1
 8008f66:	d119      	bne.n	8008f9c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	330c      	adds	r3, #12
 8008f6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	e853 3f00 	ldrex	r3, [r3]
 8008f76:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	f023 0310 	bic.w	r3, r3, #16
 8008f7e:	647b      	str	r3, [r7, #68]	; 0x44
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	330c      	adds	r3, #12
 8008f86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008f88:	61ba      	str	r2, [r7, #24]
 8008f8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f8c:	6979      	ldr	r1, [r7, #20]
 8008f8e:	69ba      	ldr	r2, [r7, #24]
 8008f90:	e841 2300 	strex	r3, r2, [r1]
 8008f94:	613b      	str	r3, [r7, #16]
   return(result);
 8008f96:	693b      	ldr	r3, [r7, #16]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d1e5      	bne.n	8008f68 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2220      	movs	r2, #32
 8008fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008faa:	bf00      	nop
 8008fac:	3754      	adds	r7, #84	; 0x54
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb4:	4770      	bx	lr

08008fb6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008fb6:	b580      	push	{r7, lr}
 8008fb8:	b084      	sub	sp, #16
 8008fba:	af00      	add	r7, sp, #0
 8008fbc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fc2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	2200      	movs	r2, #0
 8008fce:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008fd0:	68f8      	ldr	r0, [r7, #12]
 8008fd2:	f7ff ff09 	bl	8008de8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008fd6:	bf00      	nop
 8008fd8:	3710      	adds	r7, #16
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}

08008fde <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008fde:	b480      	push	{r7}
 8008fe0:	b085      	sub	sp, #20
 8008fe2:	af00      	add	r7, sp, #0
 8008fe4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fec:	b2db      	uxtb	r3, r3
 8008fee:	2b21      	cmp	r3, #33	; 0x21
 8008ff0:	d13e      	bne.n	8009070 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	689b      	ldr	r3, [r3, #8]
 8008ff6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ffa:	d114      	bne.n	8009026 <UART_Transmit_IT+0x48>
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	691b      	ldr	r3, [r3, #16]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d110      	bne.n	8009026 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6a1b      	ldr	r3, [r3, #32]
 8009008:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	881b      	ldrh	r3, [r3, #0]
 800900e:	461a      	mov	r2, r3
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009018:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6a1b      	ldr	r3, [r3, #32]
 800901e:	1c9a      	adds	r2, r3, #2
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	621a      	str	r2, [r3, #32]
 8009024:	e008      	b.n	8009038 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6a1b      	ldr	r3, [r3, #32]
 800902a:	1c59      	adds	r1, r3, #1
 800902c:	687a      	ldr	r2, [r7, #4]
 800902e:	6211      	str	r1, [r2, #32]
 8009030:	781a      	ldrb	r2, [r3, #0]
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800903c:	b29b      	uxth	r3, r3
 800903e:	3b01      	subs	r3, #1
 8009040:	b29b      	uxth	r3, r3
 8009042:	687a      	ldr	r2, [r7, #4]
 8009044:	4619      	mov	r1, r3
 8009046:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009048:	2b00      	cmp	r3, #0
 800904a:	d10f      	bne.n	800906c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	68da      	ldr	r2, [r3, #12]
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800905a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	68da      	ldr	r2, [r3, #12]
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800906a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800906c:	2300      	movs	r3, #0
 800906e:	e000      	b.n	8009072 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009070:	2302      	movs	r3, #2
  }
}
 8009072:	4618      	mov	r0, r3
 8009074:	3714      	adds	r7, #20
 8009076:	46bd      	mov	sp, r7
 8009078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907c:	4770      	bx	lr

0800907e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800907e:	b580      	push	{r7, lr}
 8009080:	b082      	sub	sp, #8
 8009082:	af00      	add	r7, sp, #0
 8009084:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	68da      	ldr	r2, [r3, #12]
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009094:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2220      	movs	r2, #32
 800909a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f7ff fe8e 	bl	8008dc0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80090a4:	2300      	movs	r3, #0
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	3708      	adds	r7, #8
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}

080090ae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80090ae:	b580      	push	{r7, lr}
 80090b0:	b08c      	sub	sp, #48	; 0x30
 80090b2:	af00      	add	r7, sp, #0
 80090b4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80090bc:	b2db      	uxtb	r3, r3
 80090be:	2b22      	cmp	r3, #34	; 0x22
 80090c0:	f040 80ab 	bne.w	800921a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	689b      	ldr	r3, [r3, #8]
 80090c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090cc:	d117      	bne.n	80090fe <UART_Receive_IT+0x50>
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	691b      	ldr	r3, [r3, #16]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d113      	bne.n	80090fe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80090d6:	2300      	movs	r3, #0
 80090d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090de:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	685b      	ldr	r3, [r3, #4]
 80090e6:	b29b      	uxth	r3, r3
 80090e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090ec:	b29a      	uxth	r2, r3
 80090ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090f0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090f6:	1c9a      	adds	r2, r3, #2
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	629a      	str	r2, [r3, #40]	; 0x28
 80090fc:	e026      	b.n	800914c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009102:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009104:	2300      	movs	r3, #0
 8009106:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	689b      	ldr	r3, [r3, #8]
 800910c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009110:	d007      	beq.n	8009122 <UART_Receive_IT+0x74>
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	689b      	ldr	r3, [r3, #8]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d10a      	bne.n	8009130 <UART_Receive_IT+0x82>
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	691b      	ldr	r3, [r3, #16]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d106      	bne.n	8009130 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	685b      	ldr	r3, [r3, #4]
 8009128:	b2da      	uxtb	r2, r3
 800912a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800912c:	701a      	strb	r2, [r3, #0]
 800912e:	e008      	b.n	8009142 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	685b      	ldr	r3, [r3, #4]
 8009136:	b2db      	uxtb	r3, r3
 8009138:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800913c:	b2da      	uxtb	r2, r3
 800913e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009140:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009146:	1c5a      	adds	r2, r3, #1
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009150:	b29b      	uxth	r3, r3
 8009152:	3b01      	subs	r3, #1
 8009154:	b29b      	uxth	r3, r3
 8009156:	687a      	ldr	r2, [r7, #4]
 8009158:	4619      	mov	r1, r3
 800915a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800915c:	2b00      	cmp	r3, #0
 800915e:	d15a      	bne.n	8009216 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	68da      	ldr	r2, [r3, #12]
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f022 0220 	bic.w	r2, r2, #32
 800916e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	68da      	ldr	r2, [r3, #12]
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800917e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	695a      	ldr	r2, [r3, #20]
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f022 0201 	bic.w	r2, r2, #1
 800918e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2220      	movs	r2, #32
 8009194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800919c:	2b01      	cmp	r3, #1
 800919e:	d135      	bne.n	800920c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2200      	movs	r2, #0
 80091a4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	330c      	adds	r3, #12
 80091ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	e853 3f00 	ldrex	r3, [r3]
 80091b4:	613b      	str	r3, [r7, #16]
   return(result);
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	f023 0310 	bic.w	r3, r3, #16
 80091bc:	627b      	str	r3, [r7, #36]	; 0x24
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	330c      	adds	r3, #12
 80091c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091c6:	623a      	str	r2, [r7, #32]
 80091c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ca:	69f9      	ldr	r1, [r7, #28]
 80091cc:	6a3a      	ldr	r2, [r7, #32]
 80091ce:	e841 2300 	strex	r3, r2, [r1]
 80091d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80091d4:	69bb      	ldr	r3, [r7, #24]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d1e5      	bne.n	80091a6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f003 0310 	and.w	r3, r3, #16
 80091e4:	2b10      	cmp	r3, #16
 80091e6:	d10a      	bne.n	80091fe <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80091e8:	2300      	movs	r3, #0
 80091ea:	60fb      	str	r3, [r7, #12]
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	60fb      	str	r3, [r7, #12]
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	685b      	ldr	r3, [r3, #4]
 80091fa:	60fb      	str	r3, [r7, #12]
 80091fc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009202:	4619      	mov	r1, r3
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f7ff fdf9 	bl	8008dfc <HAL_UARTEx_RxEventCallback>
 800920a:	e002      	b.n	8009212 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f7ff fde1 	bl	8008dd4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009212:	2300      	movs	r3, #0
 8009214:	e002      	b.n	800921c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009216:	2300      	movs	r3, #0
 8009218:	e000      	b.n	800921c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800921a:	2302      	movs	r3, #2
  }
}
 800921c:	4618      	mov	r0, r3
 800921e:	3730      	adds	r7, #48	; 0x30
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}

08009224 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009224:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009228:	b0c0      	sub	sp, #256	; 0x100
 800922a:	af00      	add	r7, sp, #0
 800922c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	691b      	ldr	r3, [r3, #16]
 8009238:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800923c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009240:	68d9      	ldr	r1, [r3, #12]
 8009242:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009246:	681a      	ldr	r2, [r3, #0]
 8009248:	ea40 0301 	orr.w	r3, r0, r1
 800924c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800924e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009252:	689a      	ldr	r2, [r3, #8]
 8009254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009258:	691b      	ldr	r3, [r3, #16]
 800925a:	431a      	orrs	r2, r3
 800925c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009260:	695b      	ldr	r3, [r3, #20]
 8009262:	431a      	orrs	r2, r3
 8009264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009268:	69db      	ldr	r3, [r3, #28]
 800926a:	4313      	orrs	r3, r2
 800926c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	68db      	ldr	r3, [r3, #12]
 8009278:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800927c:	f021 010c 	bic.w	r1, r1, #12
 8009280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009284:	681a      	ldr	r2, [r3, #0]
 8009286:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800928a:	430b      	orrs	r3, r1
 800928c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800928e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	695b      	ldr	r3, [r3, #20]
 8009296:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800929a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800929e:	6999      	ldr	r1, [r3, #24]
 80092a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092a4:	681a      	ldr	r2, [r3, #0]
 80092a6:	ea40 0301 	orr.w	r3, r0, r1
 80092aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80092ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092b0:	681a      	ldr	r2, [r3, #0]
 80092b2:	4b8f      	ldr	r3, [pc, #572]	; (80094f0 <UART_SetConfig+0x2cc>)
 80092b4:	429a      	cmp	r2, r3
 80092b6:	d005      	beq.n	80092c4 <UART_SetConfig+0xa0>
 80092b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092bc:	681a      	ldr	r2, [r3, #0]
 80092be:	4b8d      	ldr	r3, [pc, #564]	; (80094f4 <UART_SetConfig+0x2d0>)
 80092c0:	429a      	cmp	r2, r3
 80092c2:	d104      	bne.n	80092ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80092c4:	f7fe fb9c 	bl	8007a00 <HAL_RCC_GetPCLK2Freq>
 80092c8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80092cc:	e003      	b.n	80092d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80092ce:	f7fe fb83 	bl	80079d8 <HAL_RCC_GetPCLK1Freq>
 80092d2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80092d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092da:	69db      	ldr	r3, [r3, #28]
 80092dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80092e0:	f040 810c 	bne.w	80094fc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80092e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80092e8:	2200      	movs	r2, #0
 80092ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80092ee:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80092f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80092f6:	4622      	mov	r2, r4
 80092f8:	462b      	mov	r3, r5
 80092fa:	1891      	adds	r1, r2, r2
 80092fc:	65b9      	str	r1, [r7, #88]	; 0x58
 80092fe:	415b      	adcs	r3, r3
 8009300:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009302:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009306:	4621      	mov	r1, r4
 8009308:	eb12 0801 	adds.w	r8, r2, r1
 800930c:	4629      	mov	r1, r5
 800930e:	eb43 0901 	adc.w	r9, r3, r1
 8009312:	f04f 0200 	mov.w	r2, #0
 8009316:	f04f 0300 	mov.w	r3, #0
 800931a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800931e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009322:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009326:	4690      	mov	r8, r2
 8009328:	4699      	mov	r9, r3
 800932a:	4623      	mov	r3, r4
 800932c:	eb18 0303 	adds.w	r3, r8, r3
 8009330:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009334:	462b      	mov	r3, r5
 8009336:	eb49 0303 	adc.w	r3, r9, r3
 800933a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800933e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009342:	685b      	ldr	r3, [r3, #4]
 8009344:	2200      	movs	r2, #0
 8009346:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800934a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800934e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009352:	460b      	mov	r3, r1
 8009354:	18db      	adds	r3, r3, r3
 8009356:	653b      	str	r3, [r7, #80]	; 0x50
 8009358:	4613      	mov	r3, r2
 800935a:	eb42 0303 	adc.w	r3, r2, r3
 800935e:	657b      	str	r3, [r7, #84]	; 0x54
 8009360:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009364:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009368:	f7f7 fa98 	bl	800089c <__aeabi_uldivmod>
 800936c:	4602      	mov	r2, r0
 800936e:	460b      	mov	r3, r1
 8009370:	4b61      	ldr	r3, [pc, #388]	; (80094f8 <UART_SetConfig+0x2d4>)
 8009372:	fba3 2302 	umull	r2, r3, r3, r2
 8009376:	095b      	lsrs	r3, r3, #5
 8009378:	011c      	lsls	r4, r3, #4
 800937a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800937e:	2200      	movs	r2, #0
 8009380:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009384:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009388:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800938c:	4642      	mov	r2, r8
 800938e:	464b      	mov	r3, r9
 8009390:	1891      	adds	r1, r2, r2
 8009392:	64b9      	str	r1, [r7, #72]	; 0x48
 8009394:	415b      	adcs	r3, r3
 8009396:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009398:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800939c:	4641      	mov	r1, r8
 800939e:	eb12 0a01 	adds.w	sl, r2, r1
 80093a2:	4649      	mov	r1, r9
 80093a4:	eb43 0b01 	adc.w	fp, r3, r1
 80093a8:	f04f 0200 	mov.w	r2, #0
 80093ac:	f04f 0300 	mov.w	r3, #0
 80093b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80093b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80093b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80093bc:	4692      	mov	sl, r2
 80093be:	469b      	mov	fp, r3
 80093c0:	4643      	mov	r3, r8
 80093c2:	eb1a 0303 	adds.w	r3, sl, r3
 80093c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80093ca:	464b      	mov	r3, r9
 80093cc:	eb4b 0303 	adc.w	r3, fp, r3
 80093d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80093d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093d8:	685b      	ldr	r3, [r3, #4]
 80093da:	2200      	movs	r2, #0
 80093dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80093e0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80093e4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80093e8:	460b      	mov	r3, r1
 80093ea:	18db      	adds	r3, r3, r3
 80093ec:	643b      	str	r3, [r7, #64]	; 0x40
 80093ee:	4613      	mov	r3, r2
 80093f0:	eb42 0303 	adc.w	r3, r2, r3
 80093f4:	647b      	str	r3, [r7, #68]	; 0x44
 80093f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80093fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80093fe:	f7f7 fa4d 	bl	800089c <__aeabi_uldivmod>
 8009402:	4602      	mov	r2, r0
 8009404:	460b      	mov	r3, r1
 8009406:	4611      	mov	r1, r2
 8009408:	4b3b      	ldr	r3, [pc, #236]	; (80094f8 <UART_SetConfig+0x2d4>)
 800940a:	fba3 2301 	umull	r2, r3, r3, r1
 800940e:	095b      	lsrs	r3, r3, #5
 8009410:	2264      	movs	r2, #100	; 0x64
 8009412:	fb02 f303 	mul.w	r3, r2, r3
 8009416:	1acb      	subs	r3, r1, r3
 8009418:	00db      	lsls	r3, r3, #3
 800941a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800941e:	4b36      	ldr	r3, [pc, #216]	; (80094f8 <UART_SetConfig+0x2d4>)
 8009420:	fba3 2302 	umull	r2, r3, r3, r2
 8009424:	095b      	lsrs	r3, r3, #5
 8009426:	005b      	lsls	r3, r3, #1
 8009428:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800942c:	441c      	add	r4, r3
 800942e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009432:	2200      	movs	r2, #0
 8009434:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009438:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800943c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009440:	4642      	mov	r2, r8
 8009442:	464b      	mov	r3, r9
 8009444:	1891      	adds	r1, r2, r2
 8009446:	63b9      	str	r1, [r7, #56]	; 0x38
 8009448:	415b      	adcs	r3, r3
 800944a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800944c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009450:	4641      	mov	r1, r8
 8009452:	1851      	adds	r1, r2, r1
 8009454:	6339      	str	r1, [r7, #48]	; 0x30
 8009456:	4649      	mov	r1, r9
 8009458:	414b      	adcs	r3, r1
 800945a:	637b      	str	r3, [r7, #52]	; 0x34
 800945c:	f04f 0200 	mov.w	r2, #0
 8009460:	f04f 0300 	mov.w	r3, #0
 8009464:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009468:	4659      	mov	r1, fp
 800946a:	00cb      	lsls	r3, r1, #3
 800946c:	4651      	mov	r1, sl
 800946e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009472:	4651      	mov	r1, sl
 8009474:	00ca      	lsls	r2, r1, #3
 8009476:	4610      	mov	r0, r2
 8009478:	4619      	mov	r1, r3
 800947a:	4603      	mov	r3, r0
 800947c:	4642      	mov	r2, r8
 800947e:	189b      	adds	r3, r3, r2
 8009480:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009484:	464b      	mov	r3, r9
 8009486:	460a      	mov	r2, r1
 8009488:	eb42 0303 	adc.w	r3, r2, r3
 800948c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009494:	685b      	ldr	r3, [r3, #4]
 8009496:	2200      	movs	r2, #0
 8009498:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800949c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80094a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80094a4:	460b      	mov	r3, r1
 80094a6:	18db      	adds	r3, r3, r3
 80094a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80094aa:	4613      	mov	r3, r2
 80094ac:	eb42 0303 	adc.w	r3, r2, r3
 80094b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80094b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80094b6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80094ba:	f7f7 f9ef 	bl	800089c <__aeabi_uldivmod>
 80094be:	4602      	mov	r2, r0
 80094c0:	460b      	mov	r3, r1
 80094c2:	4b0d      	ldr	r3, [pc, #52]	; (80094f8 <UART_SetConfig+0x2d4>)
 80094c4:	fba3 1302 	umull	r1, r3, r3, r2
 80094c8:	095b      	lsrs	r3, r3, #5
 80094ca:	2164      	movs	r1, #100	; 0x64
 80094cc:	fb01 f303 	mul.w	r3, r1, r3
 80094d0:	1ad3      	subs	r3, r2, r3
 80094d2:	00db      	lsls	r3, r3, #3
 80094d4:	3332      	adds	r3, #50	; 0x32
 80094d6:	4a08      	ldr	r2, [pc, #32]	; (80094f8 <UART_SetConfig+0x2d4>)
 80094d8:	fba2 2303 	umull	r2, r3, r2, r3
 80094dc:	095b      	lsrs	r3, r3, #5
 80094de:	f003 0207 	and.w	r2, r3, #7
 80094e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	4422      	add	r2, r4
 80094ea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80094ec:	e105      	b.n	80096fa <UART_SetConfig+0x4d6>
 80094ee:	bf00      	nop
 80094f0:	40011000 	.word	0x40011000
 80094f4:	40011400 	.word	0x40011400
 80094f8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80094fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009500:	2200      	movs	r2, #0
 8009502:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009506:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800950a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800950e:	4642      	mov	r2, r8
 8009510:	464b      	mov	r3, r9
 8009512:	1891      	adds	r1, r2, r2
 8009514:	6239      	str	r1, [r7, #32]
 8009516:	415b      	adcs	r3, r3
 8009518:	627b      	str	r3, [r7, #36]	; 0x24
 800951a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800951e:	4641      	mov	r1, r8
 8009520:	1854      	adds	r4, r2, r1
 8009522:	4649      	mov	r1, r9
 8009524:	eb43 0501 	adc.w	r5, r3, r1
 8009528:	f04f 0200 	mov.w	r2, #0
 800952c:	f04f 0300 	mov.w	r3, #0
 8009530:	00eb      	lsls	r3, r5, #3
 8009532:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009536:	00e2      	lsls	r2, r4, #3
 8009538:	4614      	mov	r4, r2
 800953a:	461d      	mov	r5, r3
 800953c:	4643      	mov	r3, r8
 800953e:	18e3      	adds	r3, r4, r3
 8009540:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009544:	464b      	mov	r3, r9
 8009546:	eb45 0303 	adc.w	r3, r5, r3
 800954a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800954e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009552:	685b      	ldr	r3, [r3, #4]
 8009554:	2200      	movs	r2, #0
 8009556:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800955a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800955e:	f04f 0200 	mov.w	r2, #0
 8009562:	f04f 0300 	mov.w	r3, #0
 8009566:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800956a:	4629      	mov	r1, r5
 800956c:	008b      	lsls	r3, r1, #2
 800956e:	4621      	mov	r1, r4
 8009570:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009574:	4621      	mov	r1, r4
 8009576:	008a      	lsls	r2, r1, #2
 8009578:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800957c:	f7f7 f98e 	bl	800089c <__aeabi_uldivmod>
 8009580:	4602      	mov	r2, r0
 8009582:	460b      	mov	r3, r1
 8009584:	4b60      	ldr	r3, [pc, #384]	; (8009708 <UART_SetConfig+0x4e4>)
 8009586:	fba3 2302 	umull	r2, r3, r3, r2
 800958a:	095b      	lsrs	r3, r3, #5
 800958c:	011c      	lsls	r4, r3, #4
 800958e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009592:	2200      	movs	r2, #0
 8009594:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009598:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800959c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80095a0:	4642      	mov	r2, r8
 80095a2:	464b      	mov	r3, r9
 80095a4:	1891      	adds	r1, r2, r2
 80095a6:	61b9      	str	r1, [r7, #24]
 80095a8:	415b      	adcs	r3, r3
 80095aa:	61fb      	str	r3, [r7, #28]
 80095ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80095b0:	4641      	mov	r1, r8
 80095b2:	1851      	adds	r1, r2, r1
 80095b4:	6139      	str	r1, [r7, #16]
 80095b6:	4649      	mov	r1, r9
 80095b8:	414b      	adcs	r3, r1
 80095ba:	617b      	str	r3, [r7, #20]
 80095bc:	f04f 0200 	mov.w	r2, #0
 80095c0:	f04f 0300 	mov.w	r3, #0
 80095c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80095c8:	4659      	mov	r1, fp
 80095ca:	00cb      	lsls	r3, r1, #3
 80095cc:	4651      	mov	r1, sl
 80095ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80095d2:	4651      	mov	r1, sl
 80095d4:	00ca      	lsls	r2, r1, #3
 80095d6:	4610      	mov	r0, r2
 80095d8:	4619      	mov	r1, r3
 80095da:	4603      	mov	r3, r0
 80095dc:	4642      	mov	r2, r8
 80095de:	189b      	adds	r3, r3, r2
 80095e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80095e4:	464b      	mov	r3, r9
 80095e6:	460a      	mov	r2, r1
 80095e8:	eb42 0303 	adc.w	r3, r2, r3
 80095ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80095f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095f4:	685b      	ldr	r3, [r3, #4]
 80095f6:	2200      	movs	r2, #0
 80095f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80095fa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80095fc:	f04f 0200 	mov.w	r2, #0
 8009600:	f04f 0300 	mov.w	r3, #0
 8009604:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009608:	4649      	mov	r1, r9
 800960a:	008b      	lsls	r3, r1, #2
 800960c:	4641      	mov	r1, r8
 800960e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009612:	4641      	mov	r1, r8
 8009614:	008a      	lsls	r2, r1, #2
 8009616:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800961a:	f7f7 f93f 	bl	800089c <__aeabi_uldivmod>
 800961e:	4602      	mov	r2, r0
 8009620:	460b      	mov	r3, r1
 8009622:	4b39      	ldr	r3, [pc, #228]	; (8009708 <UART_SetConfig+0x4e4>)
 8009624:	fba3 1302 	umull	r1, r3, r3, r2
 8009628:	095b      	lsrs	r3, r3, #5
 800962a:	2164      	movs	r1, #100	; 0x64
 800962c:	fb01 f303 	mul.w	r3, r1, r3
 8009630:	1ad3      	subs	r3, r2, r3
 8009632:	011b      	lsls	r3, r3, #4
 8009634:	3332      	adds	r3, #50	; 0x32
 8009636:	4a34      	ldr	r2, [pc, #208]	; (8009708 <UART_SetConfig+0x4e4>)
 8009638:	fba2 2303 	umull	r2, r3, r2, r3
 800963c:	095b      	lsrs	r3, r3, #5
 800963e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009642:	441c      	add	r4, r3
 8009644:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009648:	2200      	movs	r2, #0
 800964a:	673b      	str	r3, [r7, #112]	; 0x70
 800964c:	677a      	str	r2, [r7, #116]	; 0x74
 800964e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009652:	4642      	mov	r2, r8
 8009654:	464b      	mov	r3, r9
 8009656:	1891      	adds	r1, r2, r2
 8009658:	60b9      	str	r1, [r7, #8]
 800965a:	415b      	adcs	r3, r3
 800965c:	60fb      	str	r3, [r7, #12]
 800965e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009662:	4641      	mov	r1, r8
 8009664:	1851      	adds	r1, r2, r1
 8009666:	6039      	str	r1, [r7, #0]
 8009668:	4649      	mov	r1, r9
 800966a:	414b      	adcs	r3, r1
 800966c:	607b      	str	r3, [r7, #4]
 800966e:	f04f 0200 	mov.w	r2, #0
 8009672:	f04f 0300 	mov.w	r3, #0
 8009676:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800967a:	4659      	mov	r1, fp
 800967c:	00cb      	lsls	r3, r1, #3
 800967e:	4651      	mov	r1, sl
 8009680:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009684:	4651      	mov	r1, sl
 8009686:	00ca      	lsls	r2, r1, #3
 8009688:	4610      	mov	r0, r2
 800968a:	4619      	mov	r1, r3
 800968c:	4603      	mov	r3, r0
 800968e:	4642      	mov	r2, r8
 8009690:	189b      	adds	r3, r3, r2
 8009692:	66bb      	str	r3, [r7, #104]	; 0x68
 8009694:	464b      	mov	r3, r9
 8009696:	460a      	mov	r2, r1
 8009698:	eb42 0303 	adc.w	r3, r2, r3
 800969c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800969e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096a2:	685b      	ldr	r3, [r3, #4]
 80096a4:	2200      	movs	r2, #0
 80096a6:	663b      	str	r3, [r7, #96]	; 0x60
 80096a8:	667a      	str	r2, [r7, #100]	; 0x64
 80096aa:	f04f 0200 	mov.w	r2, #0
 80096ae:	f04f 0300 	mov.w	r3, #0
 80096b2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80096b6:	4649      	mov	r1, r9
 80096b8:	008b      	lsls	r3, r1, #2
 80096ba:	4641      	mov	r1, r8
 80096bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80096c0:	4641      	mov	r1, r8
 80096c2:	008a      	lsls	r2, r1, #2
 80096c4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80096c8:	f7f7 f8e8 	bl	800089c <__aeabi_uldivmod>
 80096cc:	4602      	mov	r2, r0
 80096ce:	460b      	mov	r3, r1
 80096d0:	4b0d      	ldr	r3, [pc, #52]	; (8009708 <UART_SetConfig+0x4e4>)
 80096d2:	fba3 1302 	umull	r1, r3, r3, r2
 80096d6:	095b      	lsrs	r3, r3, #5
 80096d8:	2164      	movs	r1, #100	; 0x64
 80096da:	fb01 f303 	mul.w	r3, r1, r3
 80096de:	1ad3      	subs	r3, r2, r3
 80096e0:	011b      	lsls	r3, r3, #4
 80096e2:	3332      	adds	r3, #50	; 0x32
 80096e4:	4a08      	ldr	r2, [pc, #32]	; (8009708 <UART_SetConfig+0x4e4>)
 80096e6:	fba2 2303 	umull	r2, r3, r2, r3
 80096ea:	095b      	lsrs	r3, r3, #5
 80096ec:	f003 020f 	and.w	r2, r3, #15
 80096f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	4422      	add	r2, r4
 80096f8:	609a      	str	r2, [r3, #8]
}
 80096fa:	bf00      	nop
 80096fc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009700:	46bd      	mov	sp, r7
 8009702:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009706:	bf00      	nop
 8009708:	51eb851f 	.word	0x51eb851f

0800970c <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 800970c:	b480      	push	{r7}
 800970e:	b087      	sub	sp, #28
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
 8009714:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	681a      	ldr	r2, [r3, #0]
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009720:	683a      	ldr	r2, [r7, #0]
 8009722:	6812      	ldr	r2, [r2, #0]
 8009724:	f023 0101 	bic.w	r1, r3, #1
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	689b      	ldr	r3, [r3, #8]
 8009732:	2b08      	cmp	r3, #8
 8009734:	d102      	bne.n	800973c <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8009736:	2340      	movs	r3, #64	; 0x40
 8009738:	617b      	str	r3, [r7, #20]
 800973a:	e001      	b.n	8009740 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800973c:	2300      	movs	r3, #0
 800973e:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8009744:	697b      	ldr	r3, [r7, #20]
 8009746:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800974c:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8009752:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8009758:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800975e:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8009764:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 800976a:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8009770:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8009776:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 800977c:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8009782:	4313      	orrs	r3, r2
 8009784:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	699b      	ldr	r3, [r3, #24]
 800978a:	693a      	ldr	r2, [r7, #16]
 800978c:	4313      	orrs	r3, r2
 800978e:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009794:	693a      	ldr	r2, [r7, #16]
 8009796:	4313      	orrs	r3, r2
 8009798:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 800979a:	4b10      	ldr	r3, [pc, #64]	; (80097dc <FSMC_NORSRAM_Init+0xd0>)
 800979c:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80097a4:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80097ac:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	681a      	ldr	r2, [r3, #0]
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	43db      	mvns	r3, r3
 80097bc:	ea02 0103 	and.w	r1, r2, r3
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	681a      	ldr	r2, [r3, #0]
 80097c4:	693b      	ldr	r3, [r7, #16]
 80097c6:	4319      	orrs	r1, r3
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 80097ce:	2300      	movs	r3, #0
}
 80097d0:	4618      	mov	r0, r3
 80097d2:	371c      	adds	r7, #28
 80097d4:	46bd      	mov	sp, r7
 80097d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097da:	4770      	bx	lr
 80097dc:	0008fb7f 	.word	0x0008fb7f

080097e0 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80097e0:	b480      	push	{r7}
 80097e2:	b085      	sub	sp, #20
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	60f8      	str	r0, [r7, #12]
 80097e8:	60b9      	str	r1, [r7, #8]
 80097ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	1c5a      	adds	r2, r3, #1
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097f6:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80097fa:	68bb      	ldr	r3, [r7, #8]
 80097fc:	681a      	ldr	r2, [r3, #0]
 80097fe:	68bb      	ldr	r3, [r7, #8]
 8009800:	685b      	ldr	r3, [r3, #4]
 8009802:	011b      	lsls	r3, r3, #4
 8009804:	431a      	orrs	r2, r3
 8009806:	68bb      	ldr	r3, [r7, #8]
 8009808:	689b      	ldr	r3, [r3, #8]
 800980a:	021b      	lsls	r3, r3, #8
 800980c:	431a      	orrs	r2, r3
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	68db      	ldr	r3, [r3, #12]
 8009812:	041b      	lsls	r3, r3, #16
 8009814:	431a      	orrs	r2, r3
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	691b      	ldr	r3, [r3, #16]
 800981a:	3b01      	subs	r3, #1
 800981c:	051b      	lsls	r3, r3, #20
 800981e:	431a      	orrs	r2, r3
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	695b      	ldr	r3, [r3, #20]
 8009824:	3b02      	subs	r3, #2
 8009826:	061b      	lsls	r3, r3, #24
 8009828:	431a      	orrs	r2, r3
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	699b      	ldr	r3, [r3, #24]
 800982e:	4313      	orrs	r3, r2
 8009830:	687a      	ldr	r2, [r7, #4]
 8009832:	3201      	adds	r2, #1
 8009834:	4319      	orrs	r1, r3
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 800983c:	2300      	movs	r3, #0
}
 800983e:	4618      	mov	r0, r3
 8009840:	3714      	adds	r7, #20
 8009842:	46bd      	mov	sp, r7
 8009844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009848:	4770      	bx	lr
	...

0800984c <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800984c:	b480      	push	{r7}
 800984e:	b085      	sub	sp, #20
 8009850:	af00      	add	r7, sp, #0
 8009852:	60f8      	str	r0, [r7, #12]
 8009854:	60b9      	str	r1, [r7, #8]
 8009856:	607a      	str	r2, [r7, #4]
 8009858:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009860:	d11d      	bne.n	800989e <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	687a      	ldr	r2, [r7, #4]
 8009866:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800986a:	4b13      	ldr	r3, [pc, #76]	; (80098b8 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800986c:	4013      	ands	r3, r2
 800986e:	68ba      	ldr	r2, [r7, #8]
 8009870:	6811      	ldr	r1, [r2, #0]
 8009872:	68ba      	ldr	r2, [r7, #8]
 8009874:	6852      	ldr	r2, [r2, #4]
 8009876:	0112      	lsls	r2, r2, #4
 8009878:	4311      	orrs	r1, r2
 800987a:	68ba      	ldr	r2, [r7, #8]
 800987c:	6892      	ldr	r2, [r2, #8]
 800987e:	0212      	lsls	r2, r2, #8
 8009880:	4311      	orrs	r1, r2
 8009882:	68ba      	ldr	r2, [r7, #8]
 8009884:	6992      	ldr	r2, [r2, #24]
 8009886:	4311      	orrs	r1, r2
 8009888:	68ba      	ldr	r2, [r7, #8]
 800988a:	68d2      	ldr	r2, [r2, #12]
 800988c:	0412      	lsls	r2, r2, #16
 800988e:	430a      	orrs	r2, r1
 8009890:	ea43 0102 	orr.w	r1, r3, r2
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	687a      	ldr	r2, [r7, #4]
 8009898:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800989c:	e005      	b.n	80098aa <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	687a      	ldr	r2, [r7, #4]
 80098a2:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80098a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80098aa:	2300      	movs	r3, #0
}
 80098ac:	4618      	mov	r0, r3
 80098ae:	3714      	adds	r7, #20
 80098b0:	46bd      	mov	sp, r7
 80098b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b6:	4770      	bx	lr
 80098b8:	cff00000 	.word	0xcff00000

080098bc <atoi>:
 80098bc:	220a      	movs	r2, #10
 80098be:	2100      	movs	r1, #0
 80098c0:	f000 b8e2 	b.w	8009a88 <strtol>

080098c4 <__errno>:
 80098c4:	4b01      	ldr	r3, [pc, #4]	; (80098cc <__errno+0x8>)
 80098c6:	6818      	ldr	r0, [r3, #0]
 80098c8:	4770      	bx	lr
 80098ca:	bf00      	nop
 80098cc:	20000024 	.word	0x20000024

080098d0 <__libc_init_array>:
 80098d0:	b570      	push	{r4, r5, r6, lr}
 80098d2:	4d0d      	ldr	r5, [pc, #52]	; (8009908 <__libc_init_array+0x38>)
 80098d4:	4c0d      	ldr	r4, [pc, #52]	; (800990c <__libc_init_array+0x3c>)
 80098d6:	1b64      	subs	r4, r4, r5
 80098d8:	10a4      	asrs	r4, r4, #2
 80098da:	2600      	movs	r6, #0
 80098dc:	42a6      	cmp	r6, r4
 80098de:	d109      	bne.n	80098f4 <__libc_init_array+0x24>
 80098e0:	4d0b      	ldr	r5, [pc, #44]	; (8009910 <__libc_init_array+0x40>)
 80098e2:	4c0c      	ldr	r4, [pc, #48]	; (8009914 <__libc_init_array+0x44>)
 80098e4:	f001 f850 	bl	800a988 <_init>
 80098e8:	1b64      	subs	r4, r4, r5
 80098ea:	10a4      	asrs	r4, r4, #2
 80098ec:	2600      	movs	r6, #0
 80098ee:	42a6      	cmp	r6, r4
 80098f0:	d105      	bne.n	80098fe <__libc_init_array+0x2e>
 80098f2:	bd70      	pop	{r4, r5, r6, pc}
 80098f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80098f8:	4798      	blx	r3
 80098fa:	3601      	adds	r6, #1
 80098fc:	e7ee      	b.n	80098dc <__libc_init_array+0xc>
 80098fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8009902:	4798      	blx	r3
 8009904:	3601      	adds	r6, #1
 8009906:	e7f2      	b.n	80098ee <__libc_init_array+0x1e>
 8009908:	0800bd88 	.word	0x0800bd88
 800990c:	0800bd88 	.word	0x0800bd88
 8009910:	0800bd88 	.word	0x0800bd88
 8009914:	0800bd8c 	.word	0x0800bd8c

08009918 <memcpy>:
 8009918:	440a      	add	r2, r1
 800991a:	4291      	cmp	r1, r2
 800991c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009920:	d100      	bne.n	8009924 <memcpy+0xc>
 8009922:	4770      	bx	lr
 8009924:	b510      	push	{r4, lr}
 8009926:	f811 4b01 	ldrb.w	r4, [r1], #1
 800992a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800992e:	4291      	cmp	r1, r2
 8009930:	d1f9      	bne.n	8009926 <memcpy+0xe>
 8009932:	bd10      	pop	{r4, pc}

08009934 <memset>:
 8009934:	4402      	add	r2, r0
 8009936:	4603      	mov	r3, r0
 8009938:	4293      	cmp	r3, r2
 800993a:	d100      	bne.n	800993e <memset+0xa>
 800993c:	4770      	bx	lr
 800993e:	f803 1b01 	strb.w	r1, [r3], #1
 8009942:	e7f9      	b.n	8009938 <memset+0x4>

08009944 <iprintf>:
 8009944:	b40f      	push	{r0, r1, r2, r3}
 8009946:	4b0a      	ldr	r3, [pc, #40]	; (8009970 <iprintf+0x2c>)
 8009948:	b513      	push	{r0, r1, r4, lr}
 800994a:	681c      	ldr	r4, [r3, #0]
 800994c:	b124      	cbz	r4, 8009958 <iprintf+0x14>
 800994e:	69a3      	ldr	r3, [r4, #24]
 8009950:	b913      	cbnz	r3, 8009958 <iprintf+0x14>
 8009952:	4620      	mov	r0, r4
 8009954:	f000 fa7c 	bl	8009e50 <__sinit>
 8009958:	ab05      	add	r3, sp, #20
 800995a:	9a04      	ldr	r2, [sp, #16]
 800995c:	68a1      	ldr	r1, [r4, #8]
 800995e:	9301      	str	r3, [sp, #4]
 8009960:	4620      	mov	r0, r4
 8009962:	f000 fc85 	bl	800a270 <_vfiprintf_r>
 8009966:	b002      	add	sp, #8
 8009968:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800996c:	b004      	add	sp, #16
 800996e:	4770      	bx	lr
 8009970:	20000024 	.word	0x20000024

08009974 <strcpy>:
 8009974:	4603      	mov	r3, r0
 8009976:	f811 2b01 	ldrb.w	r2, [r1], #1
 800997a:	f803 2b01 	strb.w	r2, [r3], #1
 800997e:	2a00      	cmp	r2, #0
 8009980:	d1f9      	bne.n	8009976 <strcpy+0x2>
 8009982:	4770      	bx	lr

08009984 <_strtol_l.constprop.0>:
 8009984:	2b01      	cmp	r3, #1
 8009986:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800998a:	d001      	beq.n	8009990 <_strtol_l.constprop.0+0xc>
 800998c:	2b24      	cmp	r3, #36	; 0x24
 800998e:	d906      	bls.n	800999e <_strtol_l.constprop.0+0x1a>
 8009990:	f7ff ff98 	bl	80098c4 <__errno>
 8009994:	2316      	movs	r3, #22
 8009996:	6003      	str	r3, [r0, #0]
 8009998:	2000      	movs	r0, #0
 800999a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800999e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009a84 <_strtol_l.constprop.0+0x100>
 80099a2:	460d      	mov	r5, r1
 80099a4:	462e      	mov	r6, r5
 80099a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80099aa:	f814 700c 	ldrb.w	r7, [r4, ip]
 80099ae:	f017 0708 	ands.w	r7, r7, #8
 80099b2:	d1f7      	bne.n	80099a4 <_strtol_l.constprop.0+0x20>
 80099b4:	2c2d      	cmp	r4, #45	; 0x2d
 80099b6:	d132      	bne.n	8009a1e <_strtol_l.constprop.0+0x9a>
 80099b8:	782c      	ldrb	r4, [r5, #0]
 80099ba:	2701      	movs	r7, #1
 80099bc:	1cb5      	adds	r5, r6, #2
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d05b      	beq.n	8009a7a <_strtol_l.constprop.0+0xf6>
 80099c2:	2b10      	cmp	r3, #16
 80099c4:	d109      	bne.n	80099da <_strtol_l.constprop.0+0x56>
 80099c6:	2c30      	cmp	r4, #48	; 0x30
 80099c8:	d107      	bne.n	80099da <_strtol_l.constprop.0+0x56>
 80099ca:	782c      	ldrb	r4, [r5, #0]
 80099cc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80099d0:	2c58      	cmp	r4, #88	; 0x58
 80099d2:	d14d      	bne.n	8009a70 <_strtol_l.constprop.0+0xec>
 80099d4:	786c      	ldrb	r4, [r5, #1]
 80099d6:	2310      	movs	r3, #16
 80099d8:	3502      	adds	r5, #2
 80099da:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80099de:	f108 38ff 	add.w	r8, r8, #4294967295
 80099e2:	f04f 0c00 	mov.w	ip, #0
 80099e6:	fbb8 f9f3 	udiv	r9, r8, r3
 80099ea:	4666      	mov	r6, ip
 80099ec:	fb03 8a19 	mls	sl, r3, r9, r8
 80099f0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80099f4:	f1be 0f09 	cmp.w	lr, #9
 80099f8:	d816      	bhi.n	8009a28 <_strtol_l.constprop.0+0xa4>
 80099fa:	4674      	mov	r4, lr
 80099fc:	42a3      	cmp	r3, r4
 80099fe:	dd24      	ble.n	8009a4a <_strtol_l.constprop.0+0xc6>
 8009a00:	f1bc 0f00 	cmp.w	ip, #0
 8009a04:	db1e      	blt.n	8009a44 <_strtol_l.constprop.0+0xc0>
 8009a06:	45b1      	cmp	r9, r6
 8009a08:	d31c      	bcc.n	8009a44 <_strtol_l.constprop.0+0xc0>
 8009a0a:	d101      	bne.n	8009a10 <_strtol_l.constprop.0+0x8c>
 8009a0c:	45a2      	cmp	sl, r4
 8009a0e:	db19      	blt.n	8009a44 <_strtol_l.constprop.0+0xc0>
 8009a10:	fb06 4603 	mla	r6, r6, r3, r4
 8009a14:	f04f 0c01 	mov.w	ip, #1
 8009a18:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009a1c:	e7e8      	b.n	80099f0 <_strtol_l.constprop.0+0x6c>
 8009a1e:	2c2b      	cmp	r4, #43	; 0x2b
 8009a20:	bf04      	itt	eq
 8009a22:	782c      	ldrbeq	r4, [r5, #0]
 8009a24:	1cb5      	addeq	r5, r6, #2
 8009a26:	e7ca      	b.n	80099be <_strtol_l.constprop.0+0x3a>
 8009a28:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009a2c:	f1be 0f19 	cmp.w	lr, #25
 8009a30:	d801      	bhi.n	8009a36 <_strtol_l.constprop.0+0xb2>
 8009a32:	3c37      	subs	r4, #55	; 0x37
 8009a34:	e7e2      	b.n	80099fc <_strtol_l.constprop.0+0x78>
 8009a36:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8009a3a:	f1be 0f19 	cmp.w	lr, #25
 8009a3e:	d804      	bhi.n	8009a4a <_strtol_l.constprop.0+0xc6>
 8009a40:	3c57      	subs	r4, #87	; 0x57
 8009a42:	e7db      	b.n	80099fc <_strtol_l.constprop.0+0x78>
 8009a44:	f04f 3cff 	mov.w	ip, #4294967295
 8009a48:	e7e6      	b.n	8009a18 <_strtol_l.constprop.0+0x94>
 8009a4a:	f1bc 0f00 	cmp.w	ip, #0
 8009a4e:	da05      	bge.n	8009a5c <_strtol_l.constprop.0+0xd8>
 8009a50:	2322      	movs	r3, #34	; 0x22
 8009a52:	6003      	str	r3, [r0, #0]
 8009a54:	4646      	mov	r6, r8
 8009a56:	b942      	cbnz	r2, 8009a6a <_strtol_l.constprop.0+0xe6>
 8009a58:	4630      	mov	r0, r6
 8009a5a:	e79e      	b.n	800999a <_strtol_l.constprop.0+0x16>
 8009a5c:	b107      	cbz	r7, 8009a60 <_strtol_l.constprop.0+0xdc>
 8009a5e:	4276      	negs	r6, r6
 8009a60:	2a00      	cmp	r2, #0
 8009a62:	d0f9      	beq.n	8009a58 <_strtol_l.constprop.0+0xd4>
 8009a64:	f1bc 0f00 	cmp.w	ip, #0
 8009a68:	d000      	beq.n	8009a6c <_strtol_l.constprop.0+0xe8>
 8009a6a:	1e69      	subs	r1, r5, #1
 8009a6c:	6011      	str	r1, [r2, #0]
 8009a6e:	e7f3      	b.n	8009a58 <_strtol_l.constprop.0+0xd4>
 8009a70:	2430      	movs	r4, #48	; 0x30
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d1b1      	bne.n	80099da <_strtol_l.constprop.0+0x56>
 8009a76:	2308      	movs	r3, #8
 8009a78:	e7af      	b.n	80099da <_strtol_l.constprop.0+0x56>
 8009a7a:	2c30      	cmp	r4, #48	; 0x30
 8009a7c:	d0a5      	beq.n	80099ca <_strtol_l.constprop.0+0x46>
 8009a7e:	230a      	movs	r3, #10
 8009a80:	e7ab      	b.n	80099da <_strtol_l.constprop.0+0x56>
 8009a82:	bf00      	nop
 8009a84:	0800bbe9 	.word	0x0800bbe9

08009a88 <strtol>:
 8009a88:	4613      	mov	r3, r2
 8009a8a:	460a      	mov	r2, r1
 8009a8c:	4601      	mov	r1, r0
 8009a8e:	4802      	ldr	r0, [pc, #8]	; (8009a98 <strtol+0x10>)
 8009a90:	6800      	ldr	r0, [r0, #0]
 8009a92:	f7ff bf77 	b.w	8009984 <_strtol_l.constprop.0>
 8009a96:	bf00      	nop
 8009a98:	20000024 	.word	0x20000024

08009a9c <__swbuf_r>:
 8009a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a9e:	460e      	mov	r6, r1
 8009aa0:	4614      	mov	r4, r2
 8009aa2:	4605      	mov	r5, r0
 8009aa4:	b118      	cbz	r0, 8009aae <__swbuf_r+0x12>
 8009aa6:	6983      	ldr	r3, [r0, #24]
 8009aa8:	b90b      	cbnz	r3, 8009aae <__swbuf_r+0x12>
 8009aaa:	f000 f9d1 	bl	8009e50 <__sinit>
 8009aae:	4b21      	ldr	r3, [pc, #132]	; (8009b34 <__swbuf_r+0x98>)
 8009ab0:	429c      	cmp	r4, r3
 8009ab2:	d12b      	bne.n	8009b0c <__swbuf_r+0x70>
 8009ab4:	686c      	ldr	r4, [r5, #4]
 8009ab6:	69a3      	ldr	r3, [r4, #24]
 8009ab8:	60a3      	str	r3, [r4, #8]
 8009aba:	89a3      	ldrh	r3, [r4, #12]
 8009abc:	071a      	lsls	r2, r3, #28
 8009abe:	d52f      	bpl.n	8009b20 <__swbuf_r+0x84>
 8009ac0:	6923      	ldr	r3, [r4, #16]
 8009ac2:	b36b      	cbz	r3, 8009b20 <__swbuf_r+0x84>
 8009ac4:	6923      	ldr	r3, [r4, #16]
 8009ac6:	6820      	ldr	r0, [r4, #0]
 8009ac8:	1ac0      	subs	r0, r0, r3
 8009aca:	6963      	ldr	r3, [r4, #20]
 8009acc:	b2f6      	uxtb	r6, r6
 8009ace:	4283      	cmp	r3, r0
 8009ad0:	4637      	mov	r7, r6
 8009ad2:	dc04      	bgt.n	8009ade <__swbuf_r+0x42>
 8009ad4:	4621      	mov	r1, r4
 8009ad6:	4628      	mov	r0, r5
 8009ad8:	f000 f926 	bl	8009d28 <_fflush_r>
 8009adc:	bb30      	cbnz	r0, 8009b2c <__swbuf_r+0x90>
 8009ade:	68a3      	ldr	r3, [r4, #8]
 8009ae0:	3b01      	subs	r3, #1
 8009ae2:	60a3      	str	r3, [r4, #8]
 8009ae4:	6823      	ldr	r3, [r4, #0]
 8009ae6:	1c5a      	adds	r2, r3, #1
 8009ae8:	6022      	str	r2, [r4, #0]
 8009aea:	701e      	strb	r6, [r3, #0]
 8009aec:	6963      	ldr	r3, [r4, #20]
 8009aee:	3001      	adds	r0, #1
 8009af0:	4283      	cmp	r3, r0
 8009af2:	d004      	beq.n	8009afe <__swbuf_r+0x62>
 8009af4:	89a3      	ldrh	r3, [r4, #12]
 8009af6:	07db      	lsls	r3, r3, #31
 8009af8:	d506      	bpl.n	8009b08 <__swbuf_r+0x6c>
 8009afa:	2e0a      	cmp	r6, #10
 8009afc:	d104      	bne.n	8009b08 <__swbuf_r+0x6c>
 8009afe:	4621      	mov	r1, r4
 8009b00:	4628      	mov	r0, r5
 8009b02:	f000 f911 	bl	8009d28 <_fflush_r>
 8009b06:	b988      	cbnz	r0, 8009b2c <__swbuf_r+0x90>
 8009b08:	4638      	mov	r0, r7
 8009b0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b0c:	4b0a      	ldr	r3, [pc, #40]	; (8009b38 <__swbuf_r+0x9c>)
 8009b0e:	429c      	cmp	r4, r3
 8009b10:	d101      	bne.n	8009b16 <__swbuf_r+0x7a>
 8009b12:	68ac      	ldr	r4, [r5, #8]
 8009b14:	e7cf      	b.n	8009ab6 <__swbuf_r+0x1a>
 8009b16:	4b09      	ldr	r3, [pc, #36]	; (8009b3c <__swbuf_r+0xa0>)
 8009b18:	429c      	cmp	r4, r3
 8009b1a:	bf08      	it	eq
 8009b1c:	68ec      	ldreq	r4, [r5, #12]
 8009b1e:	e7ca      	b.n	8009ab6 <__swbuf_r+0x1a>
 8009b20:	4621      	mov	r1, r4
 8009b22:	4628      	mov	r0, r5
 8009b24:	f000 f80c 	bl	8009b40 <__swsetup_r>
 8009b28:	2800      	cmp	r0, #0
 8009b2a:	d0cb      	beq.n	8009ac4 <__swbuf_r+0x28>
 8009b2c:	f04f 37ff 	mov.w	r7, #4294967295
 8009b30:	e7ea      	b.n	8009b08 <__swbuf_r+0x6c>
 8009b32:	bf00      	nop
 8009b34:	0800bd0c 	.word	0x0800bd0c
 8009b38:	0800bd2c 	.word	0x0800bd2c
 8009b3c:	0800bcec 	.word	0x0800bcec

08009b40 <__swsetup_r>:
 8009b40:	4b32      	ldr	r3, [pc, #200]	; (8009c0c <__swsetup_r+0xcc>)
 8009b42:	b570      	push	{r4, r5, r6, lr}
 8009b44:	681d      	ldr	r5, [r3, #0]
 8009b46:	4606      	mov	r6, r0
 8009b48:	460c      	mov	r4, r1
 8009b4a:	b125      	cbz	r5, 8009b56 <__swsetup_r+0x16>
 8009b4c:	69ab      	ldr	r3, [r5, #24]
 8009b4e:	b913      	cbnz	r3, 8009b56 <__swsetup_r+0x16>
 8009b50:	4628      	mov	r0, r5
 8009b52:	f000 f97d 	bl	8009e50 <__sinit>
 8009b56:	4b2e      	ldr	r3, [pc, #184]	; (8009c10 <__swsetup_r+0xd0>)
 8009b58:	429c      	cmp	r4, r3
 8009b5a:	d10f      	bne.n	8009b7c <__swsetup_r+0x3c>
 8009b5c:	686c      	ldr	r4, [r5, #4]
 8009b5e:	89a3      	ldrh	r3, [r4, #12]
 8009b60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009b64:	0719      	lsls	r1, r3, #28
 8009b66:	d42c      	bmi.n	8009bc2 <__swsetup_r+0x82>
 8009b68:	06dd      	lsls	r5, r3, #27
 8009b6a:	d411      	bmi.n	8009b90 <__swsetup_r+0x50>
 8009b6c:	2309      	movs	r3, #9
 8009b6e:	6033      	str	r3, [r6, #0]
 8009b70:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009b74:	81a3      	strh	r3, [r4, #12]
 8009b76:	f04f 30ff 	mov.w	r0, #4294967295
 8009b7a:	e03e      	b.n	8009bfa <__swsetup_r+0xba>
 8009b7c:	4b25      	ldr	r3, [pc, #148]	; (8009c14 <__swsetup_r+0xd4>)
 8009b7e:	429c      	cmp	r4, r3
 8009b80:	d101      	bne.n	8009b86 <__swsetup_r+0x46>
 8009b82:	68ac      	ldr	r4, [r5, #8]
 8009b84:	e7eb      	b.n	8009b5e <__swsetup_r+0x1e>
 8009b86:	4b24      	ldr	r3, [pc, #144]	; (8009c18 <__swsetup_r+0xd8>)
 8009b88:	429c      	cmp	r4, r3
 8009b8a:	bf08      	it	eq
 8009b8c:	68ec      	ldreq	r4, [r5, #12]
 8009b8e:	e7e6      	b.n	8009b5e <__swsetup_r+0x1e>
 8009b90:	0758      	lsls	r0, r3, #29
 8009b92:	d512      	bpl.n	8009bba <__swsetup_r+0x7a>
 8009b94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b96:	b141      	cbz	r1, 8009baa <__swsetup_r+0x6a>
 8009b98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b9c:	4299      	cmp	r1, r3
 8009b9e:	d002      	beq.n	8009ba6 <__swsetup_r+0x66>
 8009ba0:	4630      	mov	r0, r6
 8009ba2:	f000 fa5b 	bl	800a05c <_free_r>
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	6363      	str	r3, [r4, #52]	; 0x34
 8009baa:	89a3      	ldrh	r3, [r4, #12]
 8009bac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009bb0:	81a3      	strh	r3, [r4, #12]
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	6063      	str	r3, [r4, #4]
 8009bb6:	6923      	ldr	r3, [r4, #16]
 8009bb8:	6023      	str	r3, [r4, #0]
 8009bba:	89a3      	ldrh	r3, [r4, #12]
 8009bbc:	f043 0308 	orr.w	r3, r3, #8
 8009bc0:	81a3      	strh	r3, [r4, #12]
 8009bc2:	6923      	ldr	r3, [r4, #16]
 8009bc4:	b94b      	cbnz	r3, 8009bda <__swsetup_r+0x9a>
 8009bc6:	89a3      	ldrh	r3, [r4, #12]
 8009bc8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009bcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009bd0:	d003      	beq.n	8009bda <__swsetup_r+0x9a>
 8009bd2:	4621      	mov	r1, r4
 8009bd4:	4630      	mov	r0, r6
 8009bd6:	f000 fa01 	bl	8009fdc <__smakebuf_r>
 8009bda:	89a0      	ldrh	r0, [r4, #12]
 8009bdc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009be0:	f010 0301 	ands.w	r3, r0, #1
 8009be4:	d00a      	beq.n	8009bfc <__swsetup_r+0xbc>
 8009be6:	2300      	movs	r3, #0
 8009be8:	60a3      	str	r3, [r4, #8]
 8009bea:	6963      	ldr	r3, [r4, #20]
 8009bec:	425b      	negs	r3, r3
 8009bee:	61a3      	str	r3, [r4, #24]
 8009bf0:	6923      	ldr	r3, [r4, #16]
 8009bf2:	b943      	cbnz	r3, 8009c06 <__swsetup_r+0xc6>
 8009bf4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009bf8:	d1ba      	bne.n	8009b70 <__swsetup_r+0x30>
 8009bfa:	bd70      	pop	{r4, r5, r6, pc}
 8009bfc:	0781      	lsls	r1, r0, #30
 8009bfe:	bf58      	it	pl
 8009c00:	6963      	ldrpl	r3, [r4, #20]
 8009c02:	60a3      	str	r3, [r4, #8]
 8009c04:	e7f4      	b.n	8009bf0 <__swsetup_r+0xb0>
 8009c06:	2000      	movs	r0, #0
 8009c08:	e7f7      	b.n	8009bfa <__swsetup_r+0xba>
 8009c0a:	bf00      	nop
 8009c0c:	20000024 	.word	0x20000024
 8009c10:	0800bd0c 	.word	0x0800bd0c
 8009c14:	0800bd2c 	.word	0x0800bd2c
 8009c18:	0800bcec 	.word	0x0800bcec

08009c1c <__sflush_r>:
 8009c1c:	898a      	ldrh	r2, [r1, #12]
 8009c1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c22:	4605      	mov	r5, r0
 8009c24:	0710      	lsls	r0, r2, #28
 8009c26:	460c      	mov	r4, r1
 8009c28:	d458      	bmi.n	8009cdc <__sflush_r+0xc0>
 8009c2a:	684b      	ldr	r3, [r1, #4]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	dc05      	bgt.n	8009c3c <__sflush_r+0x20>
 8009c30:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	dc02      	bgt.n	8009c3c <__sflush_r+0x20>
 8009c36:	2000      	movs	r0, #0
 8009c38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009c3e:	2e00      	cmp	r6, #0
 8009c40:	d0f9      	beq.n	8009c36 <__sflush_r+0x1a>
 8009c42:	2300      	movs	r3, #0
 8009c44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009c48:	682f      	ldr	r7, [r5, #0]
 8009c4a:	602b      	str	r3, [r5, #0]
 8009c4c:	d032      	beq.n	8009cb4 <__sflush_r+0x98>
 8009c4e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009c50:	89a3      	ldrh	r3, [r4, #12]
 8009c52:	075a      	lsls	r2, r3, #29
 8009c54:	d505      	bpl.n	8009c62 <__sflush_r+0x46>
 8009c56:	6863      	ldr	r3, [r4, #4]
 8009c58:	1ac0      	subs	r0, r0, r3
 8009c5a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009c5c:	b10b      	cbz	r3, 8009c62 <__sflush_r+0x46>
 8009c5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009c60:	1ac0      	subs	r0, r0, r3
 8009c62:	2300      	movs	r3, #0
 8009c64:	4602      	mov	r2, r0
 8009c66:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009c68:	6a21      	ldr	r1, [r4, #32]
 8009c6a:	4628      	mov	r0, r5
 8009c6c:	47b0      	blx	r6
 8009c6e:	1c43      	adds	r3, r0, #1
 8009c70:	89a3      	ldrh	r3, [r4, #12]
 8009c72:	d106      	bne.n	8009c82 <__sflush_r+0x66>
 8009c74:	6829      	ldr	r1, [r5, #0]
 8009c76:	291d      	cmp	r1, #29
 8009c78:	d82c      	bhi.n	8009cd4 <__sflush_r+0xb8>
 8009c7a:	4a2a      	ldr	r2, [pc, #168]	; (8009d24 <__sflush_r+0x108>)
 8009c7c:	40ca      	lsrs	r2, r1
 8009c7e:	07d6      	lsls	r6, r2, #31
 8009c80:	d528      	bpl.n	8009cd4 <__sflush_r+0xb8>
 8009c82:	2200      	movs	r2, #0
 8009c84:	6062      	str	r2, [r4, #4]
 8009c86:	04d9      	lsls	r1, r3, #19
 8009c88:	6922      	ldr	r2, [r4, #16]
 8009c8a:	6022      	str	r2, [r4, #0]
 8009c8c:	d504      	bpl.n	8009c98 <__sflush_r+0x7c>
 8009c8e:	1c42      	adds	r2, r0, #1
 8009c90:	d101      	bne.n	8009c96 <__sflush_r+0x7a>
 8009c92:	682b      	ldr	r3, [r5, #0]
 8009c94:	b903      	cbnz	r3, 8009c98 <__sflush_r+0x7c>
 8009c96:	6560      	str	r0, [r4, #84]	; 0x54
 8009c98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c9a:	602f      	str	r7, [r5, #0]
 8009c9c:	2900      	cmp	r1, #0
 8009c9e:	d0ca      	beq.n	8009c36 <__sflush_r+0x1a>
 8009ca0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ca4:	4299      	cmp	r1, r3
 8009ca6:	d002      	beq.n	8009cae <__sflush_r+0x92>
 8009ca8:	4628      	mov	r0, r5
 8009caa:	f000 f9d7 	bl	800a05c <_free_r>
 8009cae:	2000      	movs	r0, #0
 8009cb0:	6360      	str	r0, [r4, #52]	; 0x34
 8009cb2:	e7c1      	b.n	8009c38 <__sflush_r+0x1c>
 8009cb4:	6a21      	ldr	r1, [r4, #32]
 8009cb6:	2301      	movs	r3, #1
 8009cb8:	4628      	mov	r0, r5
 8009cba:	47b0      	blx	r6
 8009cbc:	1c41      	adds	r1, r0, #1
 8009cbe:	d1c7      	bne.n	8009c50 <__sflush_r+0x34>
 8009cc0:	682b      	ldr	r3, [r5, #0]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d0c4      	beq.n	8009c50 <__sflush_r+0x34>
 8009cc6:	2b1d      	cmp	r3, #29
 8009cc8:	d001      	beq.n	8009cce <__sflush_r+0xb2>
 8009cca:	2b16      	cmp	r3, #22
 8009ccc:	d101      	bne.n	8009cd2 <__sflush_r+0xb6>
 8009cce:	602f      	str	r7, [r5, #0]
 8009cd0:	e7b1      	b.n	8009c36 <__sflush_r+0x1a>
 8009cd2:	89a3      	ldrh	r3, [r4, #12]
 8009cd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009cd8:	81a3      	strh	r3, [r4, #12]
 8009cda:	e7ad      	b.n	8009c38 <__sflush_r+0x1c>
 8009cdc:	690f      	ldr	r7, [r1, #16]
 8009cde:	2f00      	cmp	r7, #0
 8009ce0:	d0a9      	beq.n	8009c36 <__sflush_r+0x1a>
 8009ce2:	0793      	lsls	r3, r2, #30
 8009ce4:	680e      	ldr	r6, [r1, #0]
 8009ce6:	bf08      	it	eq
 8009ce8:	694b      	ldreq	r3, [r1, #20]
 8009cea:	600f      	str	r7, [r1, #0]
 8009cec:	bf18      	it	ne
 8009cee:	2300      	movne	r3, #0
 8009cf0:	eba6 0807 	sub.w	r8, r6, r7
 8009cf4:	608b      	str	r3, [r1, #8]
 8009cf6:	f1b8 0f00 	cmp.w	r8, #0
 8009cfa:	dd9c      	ble.n	8009c36 <__sflush_r+0x1a>
 8009cfc:	6a21      	ldr	r1, [r4, #32]
 8009cfe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009d00:	4643      	mov	r3, r8
 8009d02:	463a      	mov	r2, r7
 8009d04:	4628      	mov	r0, r5
 8009d06:	47b0      	blx	r6
 8009d08:	2800      	cmp	r0, #0
 8009d0a:	dc06      	bgt.n	8009d1a <__sflush_r+0xfe>
 8009d0c:	89a3      	ldrh	r3, [r4, #12]
 8009d0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d12:	81a3      	strh	r3, [r4, #12]
 8009d14:	f04f 30ff 	mov.w	r0, #4294967295
 8009d18:	e78e      	b.n	8009c38 <__sflush_r+0x1c>
 8009d1a:	4407      	add	r7, r0
 8009d1c:	eba8 0800 	sub.w	r8, r8, r0
 8009d20:	e7e9      	b.n	8009cf6 <__sflush_r+0xda>
 8009d22:	bf00      	nop
 8009d24:	20400001 	.word	0x20400001

08009d28 <_fflush_r>:
 8009d28:	b538      	push	{r3, r4, r5, lr}
 8009d2a:	690b      	ldr	r3, [r1, #16]
 8009d2c:	4605      	mov	r5, r0
 8009d2e:	460c      	mov	r4, r1
 8009d30:	b913      	cbnz	r3, 8009d38 <_fflush_r+0x10>
 8009d32:	2500      	movs	r5, #0
 8009d34:	4628      	mov	r0, r5
 8009d36:	bd38      	pop	{r3, r4, r5, pc}
 8009d38:	b118      	cbz	r0, 8009d42 <_fflush_r+0x1a>
 8009d3a:	6983      	ldr	r3, [r0, #24]
 8009d3c:	b90b      	cbnz	r3, 8009d42 <_fflush_r+0x1a>
 8009d3e:	f000 f887 	bl	8009e50 <__sinit>
 8009d42:	4b14      	ldr	r3, [pc, #80]	; (8009d94 <_fflush_r+0x6c>)
 8009d44:	429c      	cmp	r4, r3
 8009d46:	d11b      	bne.n	8009d80 <_fflush_r+0x58>
 8009d48:	686c      	ldr	r4, [r5, #4]
 8009d4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d0ef      	beq.n	8009d32 <_fflush_r+0xa>
 8009d52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009d54:	07d0      	lsls	r0, r2, #31
 8009d56:	d404      	bmi.n	8009d62 <_fflush_r+0x3a>
 8009d58:	0599      	lsls	r1, r3, #22
 8009d5a:	d402      	bmi.n	8009d62 <_fflush_r+0x3a>
 8009d5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d5e:	f000 f915 	bl	8009f8c <__retarget_lock_acquire_recursive>
 8009d62:	4628      	mov	r0, r5
 8009d64:	4621      	mov	r1, r4
 8009d66:	f7ff ff59 	bl	8009c1c <__sflush_r>
 8009d6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009d6c:	07da      	lsls	r2, r3, #31
 8009d6e:	4605      	mov	r5, r0
 8009d70:	d4e0      	bmi.n	8009d34 <_fflush_r+0xc>
 8009d72:	89a3      	ldrh	r3, [r4, #12]
 8009d74:	059b      	lsls	r3, r3, #22
 8009d76:	d4dd      	bmi.n	8009d34 <_fflush_r+0xc>
 8009d78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d7a:	f000 f908 	bl	8009f8e <__retarget_lock_release_recursive>
 8009d7e:	e7d9      	b.n	8009d34 <_fflush_r+0xc>
 8009d80:	4b05      	ldr	r3, [pc, #20]	; (8009d98 <_fflush_r+0x70>)
 8009d82:	429c      	cmp	r4, r3
 8009d84:	d101      	bne.n	8009d8a <_fflush_r+0x62>
 8009d86:	68ac      	ldr	r4, [r5, #8]
 8009d88:	e7df      	b.n	8009d4a <_fflush_r+0x22>
 8009d8a:	4b04      	ldr	r3, [pc, #16]	; (8009d9c <_fflush_r+0x74>)
 8009d8c:	429c      	cmp	r4, r3
 8009d8e:	bf08      	it	eq
 8009d90:	68ec      	ldreq	r4, [r5, #12]
 8009d92:	e7da      	b.n	8009d4a <_fflush_r+0x22>
 8009d94:	0800bd0c 	.word	0x0800bd0c
 8009d98:	0800bd2c 	.word	0x0800bd2c
 8009d9c:	0800bcec 	.word	0x0800bcec

08009da0 <std>:
 8009da0:	2300      	movs	r3, #0
 8009da2:	b510      	push	{r4, lr}
 8009da4:	4604      	mov	r4, r0
 8009da6:	e9c0 3300 	strd	r3, r3, [r0]
 8009daa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009dae:	6083      	str	r3, [r0, #8]
 8009db0:	8181      	strh	r1, [r0, #12]
 8009db2:	6643      	str	r3, [r0, #100]	; 0x64
 8009db4:	81c2      	strh	r2, [r0, #14]
 8009db6:	6183      	str	r3, [r0, #24]
 8009db8:	4619      	mov	r1, r3
 8009dba:	2208      	movs	r2, #8
 8009dbc:	305c      	adds	r0, #92	; 0x5c
 8009dbe:	f7ff fdb9 	bl	8009934 <memset>
 8009dc2:	4b05      	ldr	r3, [pc, #20]	; (8009dd8 <std+0x38>)
 8009dc4:	6263      	str	r3, [r4, #36]	; 0x24
 8009dc6:	4b05      	ldr	r3, [pc, #20]	; (8009ddc <std+0x3c>)
 8009dc8:	62a3      	str	r3, [r4, #40]	; 0x28
 8009dca:	4b05      	ldr	r3, [pc, #20]	; (8009de0 <std+0x40>)
 8009dcc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009dce:	4b05      	ldr	r3, [pc, #20]	; (8009de4 <std+0x44>)
 8009dd0:	6224      	str	r4, [r4, #32]
 8009dd2:	6323      	str	r3, [r4, #48]	; 0x30
 8009dd4:	bd10      	pop	{r4, pc}
 8009dd6:	bf00      	nop
 8009dd8:	0800a819 	.word	0x0800a819
 8009ddc:	0800a83b 	.word	0x0800a83b
 8009de0:	0800a873 	.word	0x0800a873
 8009de4:	0800a897 	.word	0x0800a897

08009de8 <_cleanup_r>:
 8009de8:	4901      	ldr	r1, [pc, #4]	; (8009df0 <_cleanup_r+0x8>)
 8009dea:	f000 b8af 	b.w	8009f4c <_fwalk_reent>
 8009dee:	bf00      	nop
 8009df0:	08009d29 	.word	0x08009d29

08009df4 <__sfmoreglue>:
 8009df4:	b570      	push	{r4, r5, r6, lr}
 8009df6:	2268      	movs	r2, #104	; 0x68
 8009df8:	1e4d      	subs	r5, r1, #1
 8009dfa:	4355      	muls	r5, r2
 8009dfc:	460e      	mov	r6, r1
 8009dfe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009e02:	f000 f997 	bl	800a134 <_malloc_r>
 8009e06:	4604      	mov	r4, r0
 8009e08:	b140      	cbz	r0, 8009e1c <__sfmoreglue+0x28>
 8009e0a:	2100      	movs	r1, #0
 8009e0c:	e9c0 1600 	strd	r1, r6, [r0]
 8009e10:	300c      	adds	r0, #12
 8009e12:	60a0      	str	r0, [r4, #8]
 8009e14:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009e18:	f7ff fd8c 	bl	8009934 <memset>
 8009e1c:	4620      	mov	r0, r4
 8009e1e:	bd70      	pop	{r4, r5, r6, pc}

08009e20 <__sfp_lock_acquire>:
 8009e20:	4801      	ldr	r0, [pc, #4]	; (8009e28 <__sfp_lock_acquire+0x8>)
 8009e22:	f000 b8b3 	b.w	8009f8c <__retarget_lock_acquire_recursive>
 8009e26:	bf00      	nop
 8009e28:	2000565d 	.word	0x2000565d

08009e2c <__sfp_lock_release>:
 8009e2c:	4801      	ldr	r0, [pc, #4]	; (8009e34 <__sfp_lock_release+0x8>)
 8009e2e:	f000 b8ae 	b.w	8009f8e <__retarget_lock_release_recursive>
 8009e32:	bf00      	nop
 8009e34:	2000565d 	.word	0x2000565d

08009e38 <__sinit_lock_acquire>:
 8009e38:	4801      	ldr	r0, [pc, #4]	; (8009e40 <__sinit_lock_acquire+0x8>)
 8009e3a:	f000 b8a7 	b.w	8009f8c <__retarget_lock_acquire_recursive>
 8009e3e:	bf00      	nop
 8009e40:	2000565e 	.word	0x2000565e

08009e44 <__sinit_lock_release>:
 8009e44:	4801      	ldr	r0, [pc, #4]	; (8009e4c <__sinit_lock_release+0x8>)
 8009e46:	f000 b8a2 	b.w	8009f8e <__retarget_lock_release_recursive>
 8009e4a:	bf00      	nop
 8009e4c:	2000565e 	.word	0x2000565e

08009e50 <__sinit>:
 8009e50:	b510      	push	{r4, lr}
 8009e52:	4604      	mov	r4, r0
 8009e54:	f7ff fff0 	bl	8009e38 <__sinit_lock_acquire>
 8009e58:	69a3      	ldr	r3, [r4, #24]
 8009e5a:	b11b      	cbz	r3, 8009e64 <__sinit+0x14>
 8009e5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e60:	f7ff bff0 	b.w	8009e44 <__sinit_lock_release>
 8009e64:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009e68:	6523      	str	r3, [r4, #80]	; 0x50
 8009e6a:	4b13      	ldr	r3, [pc, #76]	; (8009eb8 <__sinit+0x68>)
 8009e6c:	4a13      	ldr	r2, [pc, #76]	; (8009ebc <__sinit+0x6c>)
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	62a2      	str	r2, [r4, #40]	; 0x28
 8009e72:	42a3      	cmp	r3, r4
 8009e74:	bf04      	itt	eq
 8009e76:	2301      	moveq	r3, #1
 8009e78:	61a3      	streq	r3, [r4, #24]
 8009e7a:	4620      	mov	r0, r4
 8009e7c:	f000 f820 	bl	8009ec0 <__sfp>
 8009e80:	6060      	str	r0, [r4, #4]
 8009e82:	4620      	mov	r0, r4
 8009e84:	f000 f81c 	bl	8009ec0 <__sfp>
 8009e88:	60a0      	str	r0, [r4, #8]
 8009e8a:	4620      	mov	r0, r4
 8009e8c:	f000 f818 	bl	8009ec0 <__sfp>
 8009e90:	2200      	movs	r2, #0
 8009e92:	60e0      	str	r0, [r4, #12]
 8009e94:	2104      	movs	r1, #4
 8009e96:	6860      	ldr	r0, [r4, #4]
 8009e98:	f7ff ff82 	bl	8009da0 <std>
 8009e9c:	68a0      	ldr	r0, [r4, #8]
 8009e9e:	2201      	movs	r2, #1
 8009ea0:	2109      	movs	r1, #9
 8009ea2:	f7ff ff7d 	bl	8009da0 <std>
 8009ea6:	68e0      	ldr	r0, [r4, #12]
 8009ea8:	2202      	movs	r2, #2
 8009eaa:	2112      	movs	r1, #18
 8009eac:	f7ff ff78 	bl	8009da0 <std>
 8009eb0:	2301      	movs	r3, #1
 8009eb2:	61a3      	str	r3, [r4, #24]
 8009eb4:	e7d2      	b.n	8009e5c <__sinit+0xc>
 8009eb6:	bf00      	nop
 8009eb8:	0800bbe4 	.word	0x0800bbe4
 8009ebc:	08009de9 	.word	0x08009de9

08009ec0 <__sfp>:
 8009ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ec2:	4607      	mov	r7, r0
 8009ec4:	f7ff ffac 	bl	8009e20 <__sfp_lock_acquire>
 8009ec8:	4b1e      	ldr	r3, [pc, #120]	; (8009f44 <__sfp+0x84>)
 8009eca:	681e      	ldr	r6, [r3, #0]
 8009ecc:	69b3      	ldr	r3, [r6, #24]
 8009ece:	b913      	cbnz	r3, 8009ed6 <__sfp+0x16>
 8009ed0:	4630      	mov	r0, r6
 8009ed2:	f7ff ffbd 	bl	8009e50 <__sinit>
 8009ed6:	3648      	adds	r6, #72	; 0x48
 8009ed8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009edc:	3b01      	subs	r3, #1
 8009ede:	d503      	bpl.n	8009ee8 <__sfp+0x28>
 8009ee0:	6833      	ldr	r3, [r6, #0]
 8009ee2:	b30b      	cbz	r3, 8009f28 <__sfp+0x68>
 8009ee4:	6836      	ldr	r6, [r6, #0]
 8009ee6:	e7f7      	b.n	8009ed8 <__sfp+0x18>
 8009ee8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009eec:	b9d5      	cbnz	r5, 8009f24 <__sfp+0x64>
 8009eee:	4b16      	ldr	r3, [pc, #88]	; (8009f48 <__sfp+0x88>)
 8009ef0:	60e3      	str	r3, [r4, #12]
 8009ef2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009ef6:	6665      	str	r5, [r4, #100]	; 0x64
 8009ef8:	f000 f847 	bl	8009f8a <__retarget_lock_init_recursive>
 8009efc:	f7ff ff96 	bl	8009e2c <__sfp_lock_release>
 8009f00:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009f04:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009f08:	6025      	str	r5, [r4, #0]
 8009f0a:	61a5      	str	r5, [r4, #24]
 8009f0c:	2208      	movs	r2, #8
 8009f0e:	4629      	mov	r1, r5
 8009f10:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009f14:	f7ff fd0e 	bl	8009934 <memset>
 8009f18:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009f1c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009f20:	4620      	mov	r0, r4
 8009f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f24:	3468      	adds	r4, #104	; 0x68
 8009f26:	e7d9      	b.n	8009edc <__sfp+0x1c>
 8009f28:	2104      	movs	r1, #4
 8009f2a:	4638      	mov	r0, r7
 8009f2c:	f7ff ff62 	bl	8009df4 <__sfmoreglue>
 8009f30:	4604      	mov	r4, r0
 8009f32:	6030      	str	r0, [r6, #0]
 8009f34:	2800      	cmp	r0, #0
 8009f36:	d1d5      	bne.n	8009ee4 <__sfp+0x24>
 8009f38:	f7ff ff78 	bl	8009e2c <__sfp_lock_release>
 8009f3c:	230c      	movs	r3, #12
 8009f3e:	603b      	str	r3, [r7, #0]
 8009f40:	e7ee      	b.n	8009f20 <__sfp+0x60>
 8009f42:	bf00      	nop
 8009f44:	0800bbe4 	.word	0x0800bbe4
 8009f48:	ffff0001 	.word	0xffff0001

08009f4c <_fwalk_reent>:
 8009f4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f50:	4606      	mov	r6, r0
 8009f52:	4688      	mov	r8, r1
 8009f54:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009f58:	2700      	movs	r7, #0
 8009f5a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009f5e:	f1b9 0901 	subs.w	r9, r9, #1
 8009f62:	d505      	bpl.n	8009f70 <_fwalk_reent+0x24>
 8009f64:	6824      	ldr	r4, [r4, #0]
 8009f66:	2c00      	cmp	r4, #0
 8009f68:	d1f7      	bne.n	8009f5a <_fwalk_reent+0xe>
 8009f6a:	4638      	mov	r0, r7
 8009f6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f70:	89ab      	ldrh	r3, [r5, #12]
 8009f72:	2b01      	cmp	r3, #1
 8009f74:	d907      	bls.n	8009f86 <_fwalk_reent+0x3a>
 8009f76:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009f7a:	3301      	adds	r3, #1
 8009f7c:	d003      	beq.n	8009f86 <_fwalk_reent+0x3a>
 8009f7e:	4629      	mov	r1, r5
 8009f80:	4630      	mov	r0, r6
 8009f82:	47c0      	blx	r8
 8009f84:	4307      	orrs	r7, r0
 8009f86:	3568      	adds	r5, #104	; 0x68
 8009f88:	e7e9      	b.n	8009f5e <_fwalk_reent+0x12>

08009f8a <__retarget_lock_init_recursive>:
 8009f8a:	4770      	bx	lr

08009f8c <__retarget_lock_acquire_recursive>:
 8009f8c:	4770      	bx	lr

08009f8e <__retarget_lock_release_recursive>:
 8009f8e:	4770      	bx	lr

08009f90 <__swhatbuf_r>:
 8009f90:	b570      	push	{r4, r5, r6, lr}
 8009f92:	460e      	mov	r6, r1
 8009f94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f98:	2900      	cmp	r1, #0
 8009f9a:	b096      	sub	sp, #88	; 0x58
 8009f9c:	4614      	mov	r4, r2
 8009f9e:	461d      	mov	r5, r3
 8009fa0:	da08      	bge.n	8009fb4 <__swhatbuf_r+0x24>
 8009fa2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	602a      	str	r2, [r5, #0]
 8009faa:	061a      	lsls	r2, r3, #24
 8009fac:	d410      	bmi.n	8009fd0 <__swhatbuf_r+0x40>
 8009fae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009fb2:	e00e      	b.n	8009fd2 <__swhatbuf_r+0x42>
 8009fb4:	466a      	mov	r2, sp
 8009fb6:	f000 fc95 	bl	800a8e4 <_fstat_r>
 8009fba:	2800      	cmp	r0, #0
 8009fbc:	dbf1      	blt.n	8009fa2 <__swhatbuf_r+0x12>
 8009fbe:	9a01      	ldr	r2, [sp, #4]
 8009fc0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009fc4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009fc8:	425a      	negs	r2, r3
 8009fca:	415a      	adcs	r2, r3
 8009fcc:	602a      	str	r2, [r5, #0]
 8009fce:	e7ee      	b.n	8009fae <__swhatbuf_r+0x1e>
 8009fd0:	2340      	movs	r3, #64	; 0x40
 8009fd2:	2000      	movs	r0, #0
 8009fd4:	6023      	str	r3, [r4, #0]
 8009fd6:	b016      	add	sp, #88	; 0x58
 8009fd8:	bd70      	pop	{r4, r5, r6, pc}
	...

08009fdc <__smakebuf_r>:
 8009fdc:	898b      	ldrh	r3, [r1, #12]
 8009fde:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009fe0:	079d      	lsls	r5, r3, #30
 8009fe2:	4606      	mov	r6, r0
 8009fe4:	460c      	mov	r4, r1
 8009fe6:	d507      	bpl.n	8009ff8 <__smakebuf_r+0x1c>
 8009fe8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009fec:	6023      	str	r3, [r4, #0]
 8009fee:	6123      	str	r3, [r4, #16]
 8009ff0:	2301      	movs	r3, #1
 8009ff2:	6163      	str	r3, [r4, #20]
 8009ff4:	b002      	add	sp, #8
 8009ff6:	bd70      	pop	{r4, r5, r6, pc}
 8009ff8:	ab01      	add	r3, sp, #4
 8009ffa:	466a      	mov	r2, sp
 8009ffc:	f7ff ffc8 	bl	8009f90 <__swhatbuf_r>
 800a000:	9900      	ldr	r1, [sp, #0]
 800a002:	4605      	mov	r5, r0
 800a004:	4630      	mov	r0, r6
 800a006:	f000 f895 	bl	800a134 <_malloc_r>
 800a00a:	b948      	cbnz	r0, 800a020 <__smakebuf_r+0x44>
 800a00c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a010:	059a      	lsls	r2, r3, #22
 800a012:	d4ef      	bmi.n	8009ff4 <__smakebuf_r+0x18>
 800a014:	f023 0303 	bic.w	r3, r3, #3
 800a018:	f043 0302 	orr.w	r3, r3, #2
 800a01c:	81a3      	strh	r3, [r4, #12]
 800a01e:	e7e3      	b.n	8009fe8 <__smakebuf_r+0xc>
 800a020:	4b0d      	ldr	r3, [pc, #52]	; (800a058 <__smakebuf_r+0x7c>)
 800a022:	62b3      	str	r3, [r6, #40]	; 0x28
 800a024:	89a3      	ldrh	r3, [r4, #12]
 800a026:	6020      	str	r0, [r4, #0]
 800a028:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a02c:	81a3      	strh	r3, [r4, #12]
 800a02e:	9b00      	ldr	r3, [sp, #0]
 800a030:	6163      	str	r3, [r4, #20]
 800a032:	9b01      	ldr	r3, [sp, #4]
 800a034:	6120      	str	r0, [r4, #16]
 800a036:	b15b      	cbz	r3, 800a050 <__smakebuf_r+0x74>
 800a038:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a03c:	4630      	mov	r0, r6
 800a03e:	f000 fc63 	bl	800a908 <_isatty_r>
 800a042:	b128      	cbz	r0, 800a050 <__smakebuf_r+0x74>
 800a044:	89a3      	ldrh	r3, [r4, #12]
 800a046:	f023 0303 	bic.w	r3, r3, #3
 800a04a:	f043 0301 	orr.w	r3, r3, #1
 800a04e:	81a3      	strh	r3, [r4, #12]
 800a050:	89a0      	ldrh	r0, [r4, #12]
 800a052:	4305      	orrs	r5, r0
 800a054:	81a5      	strh	r5, [r4, #12]
 800a056:	e7cd      	b.n	8009ff4 <__smakebuf_r+0x18>
 800a058:	08009de9 	.word	0x08009de9

0800a05c <_free_r>:
 800a05c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a05e:	2900      	cmp	r1, #0
 800a060:	d044      	beq.n	800a0ec <_free_r+0x90>
 800a062:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a066:	9001      	str	r0, [sp, #4]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	f1a1 0404 	sub.w	r4, r1, #4
 800a06e:	bfb8      	it	lt
 800a070:	18e4      	addlt	r4, r4, r3
 800a072:	f000 fc6b 	bl	800a94c <__malloc_lock>
 800a076:	4a1e      	ldr	r2, [pc, #120]	; (800a0f0 <_free_r+0x94>)
 800a078:	9801      	ldr	r0, [sp, #4]
 800a07a:	6813      	ldr	r3, [r2, #0]
 800a07c:	b933      	cbnz	r3, 800a08c <_free_r+0x30>
 800a07e:	6063      	str	r3, [r4, #4]
 800a080:	6014      	str	r4, [r2, #0]
 800a082:	b003      	add	sp, #12
 800a084:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a088:	f000 bc66 	b.w	800a958 <__malloc_unlock>
 800a08c:	42a3      	cmp	r3, r4
 800a08e:	d908      	bls.n	800a0a2 <_free_r+0x46>
 800a090:	6825      	ldr	r5, [r4, #0]
 800a092:	1961      	adds	r1, r4, r5
 800a094:	428b      	cmp	r3, r1
 800a096:	bf01      	itttt	eq
 800a098:	6819      	ldreq	r1, [r3, #0]
 800a09a:	685b      	ldreq	r3, [r3, #4]
 800a09c:	1949      	addeq	r1, r1, r5
 800a09e:	6021      	streq	r1, [r4, #0]
 800a0a0:	e7ed      	b.n	800a07e <_free_r+0x22>
 800a0a2:	461a      	mov	r2, r3
 800a0a4:	685b      	ldr	r3, [r3, #4]
 800a0a6:	b10b      	cbz	r3, 800a0ac <_free_r+0x50>
 800a0a8:	42a3      	cmp	r3, r4
 800a0aa:	d9fa      	bls.n	800a0a2 <_free_r+0x46>
 800a0ac:	6811      	ldr	r1, [r2, #0]
 800a0ae:	1855      	adds	r5, r2, r1
 800a0b0:	42a5      	cmp	r5, r4
 800a0b2:	d10b      	bne.n	800a0cc <_free_r+0x70>
 800a0b4:	6824      	ldr	r4, [r4, #0]
 800a0b6:	4421      	add	r1, r4
 800a0b8:	1854      	adds	r4, r2, r1
 800a0ba:	42a3      	cmp	r3, r4
 800a0bc:	6011      	str	r1, [r2, #0]
 800a0be:	d1e0      	bne.n	800a082 <_free_r+0x26>
 800a0c0:	681c      	ldr	r4, [r3, #0]
 800a0c2:	685b      	ldr	r3, [r3, #4]
 800a0c4:	6053      	str	r3, [r2, #4]
 800a0c6:	4421      	add	r1, r4
 800a0c8:	6011      	str	r1, [r2, #0]
 800a0ca:	e7da      	b.n	800a082 <_free_r+0x26>
 800a0cc:	d902      	bls.n	800a0d4 <_free_r+0x78>
 800a0ce:	230c      	movs	r3, #12
 800a0d0:	6003      	str	r3, [r0, #0]
 800a0d2:	e7d6      	b.n	800a082 <_free_r+0x26>
 800a0d4:	6825      	ldr	r5, [r4, #0]
 800a0d6:	1961      	adds	r1, r4, r5
 800a0d8:	428b      	cmp	r3, r1
 800a0da:	bf04      	itt	eq
 800a0dc:	6819      	ldreq	r1, [r3, #0]
 800a0de:	685b      	ldreq	r3, [r3, #4]
 800a0e0:	6063      	str	r3, [r4, #4]
 800a0e2:	bf04      	itt	eq
 800a0e4:	1949      	addeq	r1, r1, r5
 800a0e6:	6021      	streq	r1, [r4, #0]
 800a0e8:	6054      	str	r4, [r2, #4]
 800a0ea:	e7ca      	b.n	800a082 <_free_r+0x26>
 800a0ec:	b003      	add	sp, #12
 800a0ee:	bd30      	pop	{r4, r5, pc}
 800a0f0:	20005660 	.word	0x20005660

0800a0f4 <sbrk_aligned>:
 800a0f4:	b570      	push	{r4, r5, r6, lr}
 800a0f6:	4e0e      	ldr	r6, [pc, #56]	; (800a130 <sbrk_aligned+0x3c>)
 800a0f8:	460c      	mov	r4, r1
 800a0fa:	6831      	ldr	r1, [r6, #0]
 800a0fc:	4605      	mov	r5, r0
 800a0fe:	b911      	cbnz	r1, 800a106 <sbrk_aligned+0x12>
 800a100:	f000 fb7a 	bl	800a7f8 <_sbrk_r>
 800a104:	6030      	str	r0, [r6, #0]
 800a106:	4621      	mov	r1, r4
 800a108:	4628      	mov	r0, r5
 800a10a:	f000 fb75 	bl	800a7f8 <_sbrk_r>
 800a10e:	1c43      	adds	r3, r0, #1
 800a110:	d00a      	beq.n	800a128 <sbrk_aligned+0x34>
 800a112:	1cc4      	adds	r4, r0, #3
 800a114:	f024 0403 	bic.w	r4, r4, #3
 800a118:	42a0      	cmp	r0, r4
 800a11a:	d007      	beq.n	800a12c <sbrk_aligned+0x38>
 800a11c:	1a21      	subs	r1, r4, r0
 800a11e:	4628      	mov	r0, r5
 800a120:	f000 fb6a 	bl	800a7f8 <_sbrk_r>
 800a124:	3001      	adds	r0, #1
 800a126:	d101      	bne.n	800a12c <sbrk_aligned+0x38>
 800a128:	f04f 34ff 	mov.w	r4, #4294967295
 800a12c:	4620      	mov	r0, r4
 800a12e:	bd70      	pop	{r4, r5, r6, pc}
 800a130:	20005664 	.word	0x20005664

0800a134 <_malloc_r>:
 800a134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a138:	1ccd      	adds	r5, r1, #3
 800a13a:	f025 0503 	bic.w	r5, r5, #3
 800a13e:	3508      	adds	r5, #8
 800a140:	2d0c      	cmp	r5, #12
 800a142:	bf38      	it	cc
 800a144:	250c      	movcc	r5, #12
 800a146:	2d00      	cmp	r5, #0
 800a148:	4607      	mov	r7, r0
 800a14a:	db01      	blt.n	800a150 <_malloc_r+0x1c>
 800a14c:	42a9      	cmp	r1, r5
 800a14e:	d905      	bls.n	800a15c <_malloc_r+0x28>
 800a150:	230c      	movs	r3, #12
 800a152:	603b      	str	r3, [r7, #0]
 800a154:	2600      	movs	r6, #0
 800a156:	4630      	mov	r0, r6
 800a158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a15c:	4e2e      	ldr	r6, [pc, #184]	; (800a218 <_malloc_r+0xe4>)
 800a15e:	f000 fbf5 	bl	800a94c <__malloc_lock>
 800a162:	6833      	ldr	r3, [r6, #0]
 800a164:	461c      	mov	r4, r3
 800a166:	bb34      	cbnz	r4, 800a1b6 <_malloc_r+0x82>
 800a168:	4629      	mov	r1, r5
 800a16a:	4638      	mov	r0, r7
 800a16c:	f7ff ffc2 	bl	800a0f4 <sbrk_aligned>
 800a170:	1c43      	adds	r3, r0, #1
 800a172:	4604      	mov	r4, r0
 800a174:	d14d      	bne.n	800a212 <_malloc_r+0xde>
 800a176:	6834      	ldr	r4, [r6, #0]
 800a178:	4626      	mov	r6, r4
 800a17a:	2e00      	cmp	r6, #0
 800a17c:	d140      	bne.n	800a200 <_malloc_r+0xcc>
 800a17e:	6823      	ldr	r3, [r4, #0]
 800a180:	4631      	mov	r1, r6
 800a182:	4638      	mov	r0, r7
 800a184:	eb04 0803 	add.w	r8, r4, r3
 800a188:	f000 fb36 	bl	800a7f8 <_sbrk_r>
 800a18c:	4580      	cmp	r8, r0
 800a18e:	d13a      	bne.n	800a206 <_malloc_r+0xd2>
 800a190:	6821      	ldr	r1, [r4, #0]
 800a192:	3503      	adds	r5, #3
 800a194:	1a6d      	subs	r5, r5, r1
 800a196:	f025 0503 	bic.w	r5, r5, #3
 800a19a:	3508      	adds	r5, #8
 800a19c:	2d0c      	cmp	r5, #12
 800a19e:	bf38      	it	cc
 800a1a0:	250c      	movcc	r5, #12
 800a1a2:	4629      	mov	r1, r5
 800a1a4:	4638      	mov	r0, r7
 800a1a6:	f7ff ffa5 	bl	800a0f4 <sbrk_aligned>
 800a1aa:	3001      	adds	r0, #1
 800a1ac:	d02b      	beq.n	800a206 <_malloc_r+0xd2>
 800a1ae:	6823      	ldr	r3, [r4, #0]
 800a1b0:	442b      	add	r3, r5
 800a1b2:	6023      	str	r3, [r4, #0]
 800a1b4:	e00e      	b.n	800a1d4 <_malloc_r+0xa0>
 800a1b6:	6822      	ldr	r2, [r4, #0]
 800a1b8:	1b52      	subs	r2, r2, r5
 800a1ba:	d41e      	bmi.n	800a1fa <_malloc_r+0xc6>
 800a1bc:	2a0b      	cmp	r2, #11
 800a1be:	d916      	bls.n	800a1ee <_malloc_r+0xba>
 800a1c0:	1961      	adds	r1, r4, r5
 800a1c2:	42a3      	cmp	r3, r4
 800a1c4:	6025      	str	r5, [r4, #0]
 800a1c6:	bf18      	it	ne
 800a1c8:	6059      	strne	r1, [r3, #4]
 800a1ca:	6863      	ldr	r3, [r4, #4]
 800a1cc:	bf08      	it	eq
 800a1ce:	6031      	streq	r1, [r6, #0]
 800a1d0:	5162      	str	r2, [r4, r5]
 800a1d2:	604b      	str	r3, [r1, #4]
 800a1d4:	4638      	mov	r0, r7
 800a1d6:	f104 060b 	add.w	r6, r4, #11
 800a1da:	f000 fbbd 	bl	800a958 <__malloc_unlock>
 800a1de:	f026 0607 	bic.w	r6, r6, #7
 800a1e2:	1d23      	adds	r3, r4, #4
 800a1e4:	1af2      	subs	r2, r6, r3
 800a1e6:	d0b6      	beq.n	800a156 <_malloc_r+0x22>
 800a1e8:	1b9b      	subs	r3, r3, r6
 800a1ea:	50a3      	str	r3, [r4, r2]
 800a1ec:	e7b3      	b.n	800a156 <_malloc_r+0x22>
 800a1ee:	6862      	ldr	r2, [r4, #4]
 800a1f0:	42a3      	cmp	r3, r4
 800a1f2:	bf0c      	ite	eq
 800a1f4:	6032      	streq	r2, [r6, #0]
 800a1f6:	605a      	strne	r2, [r3, #4]
 800a1f8:	e7ec      	b.n	800a1d4 <_malloc_r+0xa0>
 800a1fa:	4623      	mov	r3, r4
 800a1fc:	6864      	ldr	r4, [r4, #4]
 800a1fe:	e7b2      	b.n	800a166 <_malloc_r+0x32>
 800a200:	4634      	mov	r4, r6
 800a202:	6876      	ldr	r6, [r6, #4]
 800a204:	e7b9      	b.n	800a17a <_malloc_r+0x46>
 800a206:	230c      	movs	r3, #12
 800a208:	603b      	str	r3, [r7, #0]
 800a20a:	4638      	mov	r0, r7
 800a20c:	f000 fba4 	bl	800a958 <__malloc_unlock>
 800a210:	e7a1      	b.n	800a156 <_malloc_r+0x22>
 800a212:	6025      	str	r5, [r4, #0]
 800a214:	e7de      	b.n	800a1d4 <_malloc_r+0xa0>
 800a216:	bf00      	nop
 800a218:	20005660 	.word	0x20005660

0800a21c <__sfputc_r>:
 800a21c:	6893      	ldr	r3, [r2, #8]
 800a21e:	3b01      	subs	r3, #1
 800a220:	2b00      	cmp	r3, #0
 800a222:	b410      	push	{r4}
 800a224:	6093      	str	r3, [r2, #8]
 800a226:	da08      	bge.n	800a23a <__sfputc_r+0x1e>
 800a228:	6994      	ldr	r4, [r2, #24]
 800a22a:	42a3      	cmp	r3, r4
 800a22c:	db01      	blt.n	800a232 <__sfputc_r+0x16>
 800a22e:	290a      	cmp	r1, #10
 800a230:	d103      	bne.n	800a23a <__sfputc_r+0x1e>
 800a232:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a236:	f7ff bc31 	b.w	8009a9c <__swbuf_r>
 800a23a:	6813      	ldr	r3, [r2, #0]
 800a23c:	1c58      	adds	r0, r3, #1
 800a23e:	6010      	str	r0, [r2, #0]
 800a240:	7019      	strb	r1, [r3, #0]
 800a242:	4608      	mov	r0, r1
 800a244:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a248:	4770      	bx	lr

0800a24a <__sfputs_r>:
 800a24a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a24c:	4606      	mov	r6, r0
 800a24e:	460f      	mov	r7, r1
 800a250:	4614      	mov	r4, r2
 800a252:	18d5      	adds	r5, r2, r3
 800a254:	42ac      	cmp	r4, r5
 800a256:	d101      	bne.n	800a25c <__sfputs_r+0x12>
 800a258:	2000      	movs	r0, #0
 800a25a:	e007      	b.n	800a26c <__sfputs_r+0x22>
 800a25c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a260:	463a      	mov	r2, r7
 800a262:	4630      	mov	r0, r6
 800a264:	f7ff ffda 	bl	800a21c <__sfputc_r>
 800a268:	1c43      	adds	r3, r0, #1
 800a26a:	d1f3      	bne.n	800a254 <__sfputs_r+0xa>
 800a26c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a270 <_vfiprintf_r>:
 800a270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a274:	460d      	mov	r5, r1
 800a276:	b09d      	sub	sp, #116	; 0x74
 800a278:	4614      	mov	r4, r2
 800a27a:	4698      	mov	r8, r3
 800a27c:	4606      	mov	r6, r0
 800a27e:	b118      	cbz	r0, 800a288 <_vfiprintf_r+0x18>
 800a280:	6983      	ldr	r3, [r0, #24]
 800a282:	b90b      	cbnz	r3, 800a288 <_vfiprintf_r+0x18>
 800a284:	f7ff fde4 	bl	8009e50 <__sinit>
 800a288:	4b89      	ldr	r3, [pc, #548]	; (800a4b0 <_vfiprintf_r+0x240>)
 800a28a:	429d      	cmp	r5, r3
 800a28c:	d11b      	bne.n	800a2c6 <_vfiprintf_r+0x56>
 800a28e:	6875      	ldr	r5, [r6, #4]
 800a290:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a292:	07d9      	lsls	r1, r3, #31
 800a294:	d405      	bmi.n	800a2a2 <_vfiprintf_r+0x32>
 800a296:	89ab      	ldrh	r3, [r5, #12]
 800a298:	059a      	lsls	r2, r3, #22
 800a29a:	d402      	bmi.n	800a2a2 <_vfiprintf_r+0x32>
 800a29c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a29e:	f7ff fe75 	bl	8009f8c <__retarget_lock_acquire_recursive>
 800a2a2:	89ab      	ldrh	r3, [r5, #12]
 800a2a4:	071b      	lsls	r3, r3, #28
 800a2a6:	d501      	bpl.n	800a2ac <_vfiprintf_r+0x3c>
 800a2a8:	692b      	ldr	r3, [r5, #16]
 800a2aa:	b9eb      	cbnz	r3, 800a2e8 <_vfiprintf_r+0x78>
 800a2ac:	4629      	mov	r1, r5
 800a2ae:	4630      	mov	r0, r6
 800a2b0:	f7ff fc46 	bl	8009b40 <__swsetup_r>
 800a2b4:	b1c0      	cbz	r0, 800a2e8 <_vfiprintf_r+0x78>
 800a2b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a2b8:	07dc      	lsls	r4, r3, #31
 800a2ba:	d50e      	bpl.n	800a2da <_vfiprintf_r+0x6a>
 800a2bc:	f04f 30ff 	mov.w	r0, #4294967295
 800a2c0:	b01d      	add	sp, #116	; 0x74
 800a2c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2c6:	4b7b      	ldr	r3, [pc, #492]	; (800a4b4 <_vfiprintf_r+0x244>)
 800a2c8:	429d      	cmp	r5, r3
 800a2ca:	d101      	bne.n	800a2d0 <_vfiprintf_r+0x60>
 800a2cc:	68b5      	ldr	r5, [r6, #8]
 800a2ce:	e7df      	b.n	800a290 <_vfiprintf_r+0x20>
 800a2d0:	4b79      	ldr	r3, [pc, #484]	; (800a4b8 <_vfiprintf_r+0x248>)
 800a2d2:	429d      	cmp	r5, r3
 800a2d4:	bf08      	it	eq
 800a2d6:	68f5      	ldreq	r5, [r6, #12]
 800a2d8:	e7da      	b.n	800a290 <_vfiprintf_r+0x20>
 800a2da:	89ab      	ldrh	r3, [r5, #12]
 800a2dc:	0598      	lsls	r0, r3, #22
 800a2de:	d4ed      	bmi.n	800a2bc <_vfiprintf_r+0x4c>
 800a2e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a2e2:	f7ff fe54 	bl	8009f8e <__retarget_lock_release_recursive>
 800a2e6:	e7e9      	b.n	800a2bc <_vfiprintf_r+0x4c>
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	9309      	str	r3, [sp, #36]	; 0x24
 800a2ec:	2320      	movs	r3, #32
 800a2ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a2f2:	f8cd 800c 	str.w	r8, [sp, #12]
 800a2f6:	2330      	movs	r3, #48	; 0x30
 800a2f8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a4bc <_vfiprintf_r+0x24c>
 800a2fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a300:	f04f 0901 	mov.w	r9, #1
 800a304:	4623      	mov	r3, r4
 800a306:	469a      	mov	sl, r3
 800a308:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a30c:	b10a      	cbz	r2, 800a312 <_vfiprintf_r+0xa2>
 800a30e:	2a25      	cmp	r2, #37	; 0x25
 800a310:	d1f9      	bne.n	800a306 <_vfiprintf_r+0x96>
 800a312:	ebba 0b04 	subs.w	fp, sl, r4
 800a316:	d00b      	beq.n	800a330 <_vfiprintf_r+0xc0>
 800a318:	465b      	mov	r3, fp
 800a31a:	4622      	mov	r2, r4
 800a31c:	4629      	mov	r1, r5
 800a31e:	4630      	mov	r0, r6
 800a320:	f7ff ff93 	bl	800a24a <__sfputs_r>
 800a324:	3001      	adds	r0, #1
 800a326:	f000 80aa 	beq.w	800a47e <_vfiprintf_r+0x20e>
 800a32a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a32c:	445a      	add	r2, fp
 800a32e:	9209      	str	r2, [sp, #36]	; 0x24
 800a330:	f89a 3000 	ldrb.w	r3, [sl]
 800a334:	2b00      	cmp	r3, #0
 800a336:	f000 80a2 	beq.w	800a47e <_vfiprintf_r+0x20e>
 800a33a:	2300      	movs	r3, #0
 800a33c:	f04f 32ff 	mov.w	r2, #4294967295
 800a340:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a344:	f10a 0a01 	add.w	sl, sl, #1
 800a348:	9304      	str	r3, [sp, #16]
 800a34a:	9307      	str	r3, [sp, #28]
 800a34c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a350:	931a      	str	r3, [sp, #104]	; 0x68
 800a352:	4654      	mov	r4, sl
 800a354:	2205      	movs	r2, #5
 800a356:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a35a:	4858      	ldr	r0, [pc, #352]	; (800a4bc <_vfiprintf_r+0x24c>)
 800a35c:	f7f5 ff48 	bl	80001f0 <memchr>
 800a360:	9a04      	ldr	r2, [sp, #16]
 800a362:	b9d8      	cbnz	r0, 800a39c <_vfiprintf_r+0x12c>
 800a364:	06d1      	lsls	r1, r2, #27
 800a366:	bf44      	itt	mi
 800a368:	2320      	movmi	r3, #32
 800a36a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a36e:	0713      	lsls	r3, r2, #28
 800a370:	bf44      	itt	mi
 800a372:	232b      	movmi	r3, #43	; 0x2b
 800a374:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a378:	f89a 3000 	ldrb.w	r3, [sl]
 800a37c:	2b2a      	cmp	r3, #42	; 0x2a
 800a37e:	d015      	beq.n	800a3ac <_vfiprintf_r+0x13c>
 800a380:	9a07      	ldr	r2, [sp, #28]
 800a382:	4654      	mov	r4, sl
 800a384:	2000      	movs	r0, #0
 800a386:	f04f 0c0a 	mov.w	ip, #10
 800a38a:	4621      	mov	r1, r4
 800a38c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a390:	3b30      	subs	r3, #48	; 0x30
 800a392:	2b09      	cmp	r3, #9
 800a394:	d94e      	bls.n	800a434 <_vfiprintf_r+0x1c4>
 800a396:	b1b0      	cbz	r0, 800a3c6 <_vfiprintf_r+0x156>
 800a398:	9207      	str	r2, [sp, #28]
 800a39a:	e014      	b.n	800a3c6 <_vfiprintf_r+0x156>
 800a39c:	eba0 0308 	sub.w	r3, r0, r8
 800a3a0:	fa09 f303 	lsl.w	r3, r9, r3
 800a3a4:	4313      	orrs	r3, r2
 800a3a6:	9304      	str	r3, [sp, #16]
 800a3a8:	46a2      	mov	sl, r4
 800a3aa:	e7d2      	b.n	800a352 <_vfiprintf_r+0xe2>
 800a3ac:	9b03      	ldr	r3, [sp, #12]
 800a3ae:	1d19      	adds	r1, r3, #4
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	9103      	str	r1, [sp, #12]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	bfbb      	ittet	lt
 800a3b8:	425b      	neglt	r3, r3
 800a3ba:	f042 0202 	orrlt.w	r2, r2, #2
 800a3be:	9307      	strge	r3, [sp, #28]
 800a3c0:	9307      	strlt	r3, [sp, #28]
 800a3c2:	bfb8      	it	lt
 800a3c4:	9204      	strlt	r2, [sp, #16]
 800a3c6:	7823      	ldrb	r3, [r4, #0]
 800a3c8:	2b2e      	cmp	r3, #46	; 0x2e
 800a3ca:	d10c      	bne.n	800a3e6 <_vfiprintf_r+0x176>
 800a3cc:	7863      	ldrb	r3, [r4, #1]
 800a3ce:	2b2a      	cmp	r3, #42	; 0x2a
 800a3d0:	d135      	bne.n	800a43e <_vfiprintf_r+0x1ce>
 800a3d2:	9b03      	ldr	r3, [sp, #12]
 800a3d4:	1d1a      	adds	r2, r3, #4
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	9203      	str	r2, [sp, #12]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	bfb8      	it	lt
 800a3de:	f04f 33ff 	movlt.w	r3, #4294967295
 800a3e2:	3402      	adds	r4, #2
 800a3e4:	9305      	str	r3, [sp, #20]
 800a3e6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a4cc <_vfiprintf_r+0x25c>
 800a3ea:	7821      	ldrb	r1, [r4, #0]
 800a3ec:	2203      	movs	r2, #3
 800a3ee:	4650      	mov	r0, sl
 800a3f0:	f7f5 fefe 	bl	80001f0 <memchr>
 800a3f4:	b140      	cbz	r0, 800a408 <_vfiprintf_r+0x198>
 800a3f6:	2340      	movs	r3, #64	; 0x40
 800a3f8:	eba0 000a 	sub.w	r0, r0, sl
 800a3fc:	fa03 f000 	lsl.w	r0, r3, r0
 800a400:	9b04      	ldr	r3, [sp, #16]
 800a402:	4303      	orrs	r3, r0
 800a404:	3401      	adds	r4, #1
 800a406:	9304      	str	r3, [sp, #16]
 800a408:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a40c:	482c      	ldr	r0, [pc, #176]	; (800a4c0 <_vfiprintf_r+0x250>)
 800a40e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a412:	2206      	movs	r2, #6
 800a414:	f7f5 feec 	bl	80001f0 <memchr>
 800a418:	2800      	cmp	r0, #0
 800a41a:	d03f      	beq.n	800a49c <_vfiprintf_r+0x22c>
 800a41c:	4b29      	ldr	r3, [pc, #164]	; (800a4c4 <_vfiprintf_r+0x254>)
 800a41e:	bb1b      	cbnz	r3, 800a468 <_vfiprintf_r+0x1f8>
 800a420:	9b03      	ldr	r3, [sp, #12]
 800a422:	3307      	adds	r3, #7
 800a424:	f023 0307 	bic.w	r3, r3, #7
 800a428:	3308      	adds	r3, #8
 800a42a:	9303      	str	r3, [sp, #12]
 800a42c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a42e:	443b      	add	r3, r7
 800a430:	9309      	str	r3, [sp, #36]	; 0x24
 800a432:	e767      	b.n	800a304 <_vfiprintf_r+0x94>
 800a434:	fb0c 3202 	mla	r2, ip, r2, r3
 800a438:	460c      	mov	r4, r1
 800a43a:	2001      	movs	r0, #1
 800a43c:	e7a5      	b.n	800a38a <_vfiprintf_r+0x11a>
 800a43e:	2300      	movs	r3, #0
 800a440:	3401      	adds	r4, #1
 800a442:	9305      	str	r3, [sp, #20]
 800a444:	4619      	mov	r1, r3
 800a446:	f04f 0c0a 	mov.w	ip, #10
 800a44a:	4620      	mov	r0, r4
 800a44c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a450:	3a30      	subs	r2, #48	; 0x30
 800a452:	2a09      	cmp	r2, #9
 800a454:	d903      	bls.n	800a45e <_vfiprintf_r+0x1ee>
 800a456:	2b00      	cmp	r3, #0
 800a458:	d0c5      	beq.n	800a3e6 <_vfiprintf_r+0x176>
 800a45a:	9105      	str	r1, [sp, #20]
 800a45c:	e7c3      	b.n	800a3e6 <_vfiprintf_r+0x176>
 800a45e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a462:	4604      	mov	r4, r0
 800a464:	2301      	movs	r3, #1
 800a466:	e7f0      	b.n	800a44a <_vfiprintf_r+0x1da>
 800a468:	ab03      	add	r3, sp, #12
 800a46a:	9300      	str	r3, [sp, #0]
 800a46c:	462a      	mov	r2, r5
 800a46e:	4b16      	ldr	r3, [pc, #88]	; (800a4c8 <_vfiprintf_r+0x258>)
 800a470:	a904      	add	r1, sp, #16
 800a472:	4630      	mov	r0, r6
 800a474:	f3af 8000 	nop.w
 800a478:	4607      	mov	r7, r0
 800a47a:	1c78      	adds	r0, r7, #1
 800a47c:	d1d6      	bne.n	800a42c <_vfiprintf_r+0x1bc>
 800a47e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a480:	07d9      	lsls	r1, r3, #31
 800a482:	d405      	bmi.n	800a490 <_vfiprintf_r+0x220>
 800a484:	89ab      	ldrh	r3, [r5, #12]
 800a486:	059a      	lsls	r2, r3, #22
 800a488:	d402      	bmi.n	800a490 <_vfiprintf_r+0x220>
 800a48a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a48c:	f7ff fd7f 	bl	8009f8e <__retarget_lock_release_recursive>
 800a490:	89ab      	ldrh	r3, [r5, #12]
 800a492:	065b      	lsls	r3, r3, #25
 800a494:	f53f af12 	bmi.w	800a2bc <_vfiprintf_r+0x4c>
 800a498:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a49a:	e711      	b.n	800a2c0 <_vfiprintf_r+0x50>
 800a49c:	ab03      	add	r3, sp, #12
 800a49e:	9300      	str	r3, [sp, #0]
 800a4a0:	462a      	mov	r2, r5
 800a4a2:	4b09      	ldr	r3, [pc, #36]	; (800a4c8 <_vfiprintf_r+0x258>)
 800a4a4:	a904      	add	r1, sp, #16
 800a4a6:	4630      	mov	r0, r6
 800a4a8:	f000 f880 	bl	800a5ac <_printf_i>
 800a4ac:	e7e4      	b.n	800a478 <_vfiprintf_r+0x208>
 800a4ae:	bf00      	nop
 800a4b0:	0800bd0c 	.word	0x0800bd0c
 800a4b4:	0800bd2c 	.word	0x0800bd2c
 800a4b8:	0800bcec 	.word	0x0800bcec
 800a4bc:	0800bd4c 	.word	0x0800bd4c
 800a4c0:	0800bd56 	.word	0x0800bd56
 800a4c4:	00000000 	.word	0x00000000
 800a4c8:	0800a24b 	.word	0x0800a24b
 800a4cc:	0800bd52 	.word	0x0800bd52

0800a4d0 <_printf_common>:
 800a4d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4d4:	4616      	mov	r6, r2
 800a4d6:	4699      	mov	r9, r3
 800a4d8:	688a      	ldr	r2, [r1, #8]
 800a4da:	690b      	ldr	r3, [r1, #16]
 800a4dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a4e0:	4293      	cmp	r3, r2
 800a4e2:	bfb8      	it	lt
 800a4e4:	4613      	movlt	r3, r2
 800a4e6:	6033      	str	r3, [r6, #0]
 800a4e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a4ec:	4607      	mov	r7, r0
 800a4ee:	460c      	mov	r4, r1
 800a4f0:	b10a      	cbz	r2, 800a4f6 <_printf_common+0x26>
 800a4f2:	3301      	adds	r3, #1
 800a4f4:	6033      	str	r3, [r6, #0]
 800a4f6:	6823      	ldr	r3, [r4, #0]
 800a4f8:	0699      	lsls	r1, r3, #26
 800a4fa:	bf42      	ittt	mi
 800a4fc:	6833      	ldrmi	r3, [r6, #0]
 800a4fe:	3302      	addmi	r3, #2
 800a500:	6033      	strmi	r3, [r6, #0]
 800a502:	6825      	ldr	r5, [r4, #0]
 800a504:	f015 0506 	ands.w	r5, r5, #6
 800a508:	d106      	bne.n	800a518 <_printf_common+0x48>
 800a50a:	f104 0a19 	add.w	sl, r4, #25
 800a50e:	68e3      	ldr	r3, [r4, #12]
 800a510:	6832      	ldr	r2, [r6, #0]
 800a512:	1a9b      	subs	r3, r3, r2
 800a514:	42ab      	cmp	r3, r5
 800a516:	dc26      	bgt.n	800a566 <_printf_common+0x96>
 800a518:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a51c:	1e13      	subs	r3, r2, #0
 800a51e:	6822      	ldr	r2, [r4, #0]
 800a520:	bf18      	it	ne
 800a522:	2301      	movne	r3, #1
 800a524:	0692      	lsls	r2, r2, #26
 800a526:	d42b      	bmi.n	800a580 <_printf_common+0xb0>
 800a528:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a52c:	4649      	mov	r1, r9
 800a52e:	4638      	mov	r0, r7
 800a530:	47c0      	blx	r8
 800a532:	3001      	adds	r0, #1
 800a534:	d01e      	beq.n	800a574 <_printf_common+0xa4>
 800a536:	6823      	ldr	r3, [r4, #0]
 800a538:	68e5      	ldr	r5, [r4, #12]
 800a53a:	6832      	ldr	r2, [r6, #0]
 800a53c:	f003 0306 	and.w	r3, r3, #6
 800a540:	2b04      	cmp	r3, #4
 800a542:	bf08      	it	eq
 800a544:	1aad      	subeq	r5, r5, r2
 800a546:	68a3      	ldr	r3, [r4, #8]
 800a548:	6922      	ldr	r2, [r4, #16]
 800a54a:	bf0c      	ite	eq
 800a54c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a550:	2500      	movne	r5, #0
 800a552:	4293      	cmp	r3, r2
 800a554:	bfc4      	itt	gt
 800a556:	1a9b      	subgt	r3, r3, r2
 800a558:	18ed      	addgt	r5, r5, r3
 800a55a:	2600      	movs	r6, #0
 800a55c:	341a      	adds	r4, #26
 800a55e:	42b5      	cmp	r5, r6
 800a560:	d11a      	bne.n	800a598 <_printf_common+0xc8>
 800a562:	2000      	movs	r0, #0
 800a564:	e008      	b.n	800a578 <_printf_common+0xa8>
 800a566:	2301      	movs	r3, #1
 800a568:	4652      	mov	r2, sl
 800a56a:	4649      	mov	r1, r9
 800a56c:	4638      	mov	r0, r7
 800a56e:	47c0      	blx	r8
 800a570:	3001      	adds	r0, #1
 800a572:	d103      	bne.n	800a57c <_printf_common+0xac>
 800a574:	f04f 30ff 	mov.w	r0, #4294967295
 800a578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a57c:	3501      	adds	r5, #1
 800a57e:	e7c6      	b.n	800a50e <_printf_common+0x3e>
 800a580:	18e1      	adds	r1, r4, r3
 800a582:	1c5a      	adds	r2, r3, #1
 800a584:	2030      	movs	r0, #48	; 0x30
 800a586:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a58a:	4422      	add	r2, r4
 800a58c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a590:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a594:	3302      	adds	r3, #2
 800a596:	e7c7      	b.n	800a528 <_printf_common+0x58>
 800a598:	2301      	movs	r3, #1
 800a59a:	4622      	mov	r2, r4
 800a59c:	4649      	mov	r1, r9
 800a59e:	4638      	mov	r0, r7
 800a5a0:	47c0      	blx	r8
 800a5a2:	3001      	adds	r0, #1
 800a5a4:	d0e6      	beq.n	800a574 <_printf_common+0xa4>
 800a5a6:	3601      	adds	r6, #1
 800a5a8:	e7d9      	b.n	800a55e <_printf_common+0x8e>
	...

0800a5ac <_printf_i>:
 800a5ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a5b0:	7e0f      	ldrb	r7, [r1, #24]
 800a5b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a5b4:	2f78      	cmp	r7, #120	; 0x78
 800a5b6:	4691      	mov	r9, r2
 800a5b8:	4680      	mov	r8, r0
 800a5ba:	460c      	mov	r4, r1
 800a5bc:	469a      	mov	sl, r3
 800a5be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a5c2:	d807      	bhi.n	800a5d4 <_printf_i+0x28>
 800a5c4:	2f62      	cmp	r7, #98	; 0x62
 800a5c6:	d80a      	bhi.n	800a5de <_printf_i+0x32>
 800a5c8:	2f00      	cmp	r7, #0
 800a5ca:	f000 80d8 	beq.w	800a77e <_printf_i+0x1d2>
 800a5ce:	2f58      	cmp	r7, #88	; 0x58
 800a5d0:	f000 80a3 	beq.w	800a71a <_printf_i+0x16e>
 800a5d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a5d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a5dc:	e03a      	b.n	800a654 <_printf_i+0xa8>
 800a5de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a5e2:	2b15      	cmp	r3, #21
 800a5e4:	d8f6      	bhi.n	800a5d4 <_printf_i+0x28>
 800a5e6:	a101      	add	r1, pc, #4	; (adr r1, 800a5ec <_printf_i+0x40>)
 800a5e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a5ec:	0800a645 	.word	0x0800a645
 800a5f0:	0800a659 	.word	0x0800a659
 800a5f4:	0800a5d5 	.word	0x0800a5d5
 800a5f8:	0800a5d5 	.word	0x0800a5d5
 800a5fc:	0800a5d5 	.word	0x0800a5d5
 800a600:	0800a5d5 	.word	0x0800a5d5
 800a604:	0800a659 	.word	0x0800a659
 800a608:	0800a5d5 	.word	0x0800a5d5
 800a60c:	0800a5d5 	.word	0x0800a5d5
 800a610:	0800a5d5 	.word	0x0800a5d5
 800a614:	0800a5d5 	.word	0x0800a5d5
 800a618:	0800a765 	.word	0x0800a765
 800a61c:	0800a689 	.word	0x0800a689
 800a620:	0800a747 	.word	0x0800a747
 800a624:	0800a5d5 	.word	0x0800a5d5
 800a628:	0800a5d5 	.word	0x0800a5d5
 800a62c:	0800a787 	.word	0x0800a787
 800a630:	0800a5d5 	.word	0x0800a5d5
 800a634:	0800a689 	.word	0x0800a689
 800a638:	0800a5d5 	.word	0x0800a5d5
 800a63c:	0800a5d5 	.word	0x0800a5d5
 800a640:	0800a74f 	.word	0x0800a74f
 800a644:	682b      	ldr	r3, [r5, #0]
 800a646:	1d1a      	adds	r2, r3, #4
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	602a      	str	r2, [r5, #0]
 800a64c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a650:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a654:	2301      	movs	r3, #1
 800a656:	e0a3      	b.n	800a7a0 <_printf_i+0x1f4>
 800a658:	6820      	ldr	r0, [r4, #0]
 800a65a:	6829      	ldr	r1, [r5, #0]
 800a65c:	0606      	lsls	r6, r0, #24
 800a65e:	f101 0304 	add.w	r3, r1, #4
 800a662:	d50a      	bpl.n	800a67a <_printf_i+0xce>
 800a664:	680e      	ldr	r6, [r1, #0]
 800a666:	602b      	str	r3, [r5, #0]
 800a668:	2e00      	cmp	r6, #0
 800a66a:	da03      	bge.n	800a674 <_printf_i+0xc8>
 800a66c:	232d      	movs	r3, #45	; 0x2d
 800a66e:	4276      	negs	r6, r6
 800a670:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a674:	485e      	ldr	r0, [pc, #376]	; (800a7f0 <_printf_i+0x244>)
 800a676:	230a      	movs	r3, #10
 800a678:	e019      	b.n	800a6ae <_printf_i+0x102>
 800a67a:	680e      	ldr	r6, [r1, #0]
 800a67c:	602b      	str	r3, [r5, #0]
 800a67e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a682:	bf18      	it	ne
 800a684:	b236      	sxthne	r6, r6
 800a686:	e7ef      	b.n	800a668 <_printf_i+0xbc>
 800a688:	682b      	ldr	r3, [r5, #0]
 800a68a:	6820      	ldr	r0, [r4, #0]
 800a68c:	1d19      	adds	r1, r3, #4
 800a68e:	6029      	str	r1, [r5, #0]
 800a690:	0601      	lsls	r1, r0, #24
 800a692:	d501      	bpl.n	800a698 <_printf_i+0xec>
 800a694:	681e      	ldr	r6, [r3, #0]
 800a696:	e002      	b.n	800a69e <_printf_i+0xf2>
 800a698:	0646      	lsls	r6, r0, #25
 800a69a:	d5fb      	bpl.n	800a694 <_printf_i+0xe8>
 800a69c:	881e      	ldrh	r6, [r3, #0]
 800a69e:	4854      	ldr	r0, [pc, #336]	; (800a7f0 <_printf_i+0x244>)
 800a6a0:	2f6f      	cmp	r7, #111	; 0x6f
 800a6a2:	bf0c      	ite	eq
 800a6a4:	2308      	moveq	r3, #8
 800a6a6:	230a      	movne	r3, #10
 800a6a8:	2100      	movs	r1, #0
 800a6aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a6ae:	6865      	ldr	r5, [r4, #4]
 800a6b0:	60a5      	str	r5, [r4, #8]
 800a6b2:	2d00      	cmp	r5, #0
 800a6b4:	bfa2      	ittt	ge
 800a6b6:	6821      	ldrge	r1, [r4, #0]
 800a6b8:	f021 0104 	bicge.w	r1, r1, #4
 800a6bc:	6021      	strge	r1, [r4, #0]
 800a6be:	b90e      	cbnz	r6, 800a6c4 <_printf_i+0x118>
 800a6c0:	2d00      	cmp	r5, #0
 800a6c2:	d04d      	beq.n	800a760 <_printf_i+0x1b4>
 800a6c4:	4615      	mov	r5, r2
 800a6c6:	fbb6 f1f3 	udiv	r1, r6, r3
 800a6ca:	fb03 6711 	mls	r7, r3, r1, r6
 800a6ce:	5dc7      	ldrb	r7, [r0, r7]
 800a6d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a6d4:	4637      	mov	r7, r6
 800a6d6:	42bb      	cmp	r3, r7
 800a6d8:	460e      	mov	r6, r1
 800a6da:	d9f4      	bls.n	800a6c6 <_printf_i+0x11a>
 800a6dc:	2b08      	cmp	r3, #8
 800a6de:	d10b      	bne.n	800a6f8 <_printf_i+0x14c>
 800a6e0:	6823      	ldr	r3, [r4, #0]
 800a6e2:	07de      	lsls	r6, r3, #31
 800a6e4:	d508      	bpl.n	800a6f8 <_printf_i+0x14c>
 800a6e6:	6923      	ldr	r3, [r4, #16]
 800a6e8:	6861      	ldr	r1, [r4, #4]
 800a6ea:	4299      	cmp	r1, r3
 800a6ec:	bfde      	ittt	le
 800a6ee:	2330      	movle	r3, #48	; 0x30
 800a6f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a6f4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a6f8:	1b52      	subs	r2, r2, r5
 800a6fa:	6122      	str	r2, [r4, #16]
 800a6fc:	f8cd a000 	str.w	sl, [sp]
 800a700:	464b      	mov	r3, r9
 800a702:	aa03      	add	r2, sp, #12
 800a704:	4621      	mov	r1, r4
 800a706:	4640      	mov	r0, r8
 800a708:	f7ff fee2 	bl	800a4d0 <_printf_common>
 800a70c:	3001      	adds	r0, #1
 800a70e:	d14c      	bne.n	800a7aa <_printf_i+0x1fe>
 800a710:	f04f 30ff 	mov.w	r0, #4294967295
 800a714:	b004      	add	sp, #16
 800a716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a71a:	4835      	ldr	r0, [pc, #212]	; (800a7f0 <_printf_i+0x244>)
 800a71c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a720:	6829      	ldr	r1, [r5, #0]
 800a722:	6823      	ldr	r3, [r4, #0]
 800a724:	f851 6b04 	ldr.w	r6, [r1], #4
 800a728:	6029      	str	r1, [r5, #0]
 800a72a:	061d      	lsls	r5, r3, #24
 800a72c:	d514      	bpl.n	800a758 <_printf_i+0x1ac>
 800a72e:	07df      	lsls	r7, r3, #31
 800a730:	bf44      	itt	mi
 800a732:	f043 0320 	orrmi.w	r3, r3, #32
 800a736:	6023      	strmi	r3, [r4, #0]
 800a738:	b91e      	cbnz	r6, 800a742 <_printf_i+0x196>
 800a73a:	6823      	ldr	r3, [r4, #0]
 800a73c:	f023 0320 	bic.w	r3, r3, #32
 800a740:	6023      	str	r3, [r4, #0]
 800a742:	2310      	movs	r3, #16
 800a744:	e7b0      	b.n	800a6a8 <_printf_i+0xfc>
 800a746:	6823      	ldr	r3, [r4, #0]
 800a748:	f043 0320 	orr.w	r3, r3, #32
 800a74c:	6023      	str	r3, [r4, #0]
 800a74e:	2378      	movs	r3, #120	; 0x78
 800a750:	4828      	ldr	r0, [pc, #160]	; (800a7f4 <_printf_i+0x248>)
 800a752:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a756:	e7e3      	b.n	800a720 <_printf_i+0x174>
 800a758:	0659      	lsls	r1, r3, #25
 800a75a:	bf48      	it	mi
 800a75c:	b2b6      	uxthmi	r6, r6
 800a75e:	e7e6      	b.n	800a72e <_printf_i+0x182>
 800a760:	4615      	mov	r5, r2
 800a762:	e7bb      	b.n	800a6dc <_printf_i+0x130>
 800a764:	682b      	ldr	r3, [r5, #0]
 800a766:	6826      	ldr	r6, [r4, #0]
 800a768:	6961      	ldr	r1, [r4, #20]
 800a76a:	1d18      	adds	r0, r3, #4
 800a76c:	6028      	str	r0, [r5, #0]
 800a76e:	0635      	lsls	r5, r6, #24
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	d501      	bpl.n	800a778 <_printf_i+0x1cc>
 800a774:	6019      	str	r1, [r3, #0]
 800a776:	e002      	b.n	800a77e <_printf_i+0x1d2>
 800a778:	0670      	lsls	r0, r6, #25
 800a77a:	d5fb      	bpl.n	800a774 <_printf_i+0x1c8>
 800a77c:	8019      	strh	r1, [r3, #0]
 800a77e:	2300      	movs	r3, #0
 800a780:	6123      	str	r3, [r4, #16]
 800a782:	4615      	mov	r5, r2
 800a784:	e7ba      	b.n	800a6fc <_printf_i+0x150>
 800a786:	682b      	ldr	r3, [r5, #0]
 800a788:	1d1a      	adds	r2, r3, #4
 800a78a:	602a      	str	r2, [r5, #0]
 800a78c:	681d      	ldr	r5, [r3, #0]
 800a78e:	6862      	ldr	r2, [r4, #4]
 800a790:	2100      	movs	r1, #0
 800a792:	4628      	mov	r0, r5
 800a794:	f7f5 fd2c 	bl	80001f0 <memchr>
 800a798:	b108      	cbz	r0, 800a79e <_printf_i+0x1f2>
 800a79a:	1b40      	subs	r0, r0, r5
 800a79c:	6060      	str	r0, [r4, #4]
 800a79e:	6863      	ldr	r3, [r4, #4]
 800a7a0:	6123      	str	r3, [r4, #16]
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a7a8:	e7a8      	b.n	800a6fc <_printf_i+0x150>
 800a7aa:	6923      	ldr	r3, [r4, #16]
 800a7ac:	462a      	mov	r2, r5
 800a7ae:	4649      	mov	r1, r9
 800a7b0:	4640      	mov	r0, r8
 800a7b2:	47d0      	blx	sl
 800a7b4:	3001      	adds	r0, #1
 800a7b6:	d0ab      	beq.n	800a710 <_printf_i+0x164>
 800a7b8:	6823      	ldr	r3, [r4, #0]
 800a7ba:	079b      	lsls	r3, r3, #30
 800a7bc:	d413      	bmi.n	800a7e6 <_printf_i+0x23a>
 800a7be:	68e0      	ldr	r0, [r4, #12]
 800a7c0:	9b03      	ldr	r3, [sp, #12]
 800a7c2:	4298      	cmp	r0, r3
 800a7c4:	bfb8      	it	lt
 800a7c6:	4618      	movlt	r0, r3
 800a7c8:	e7a4      	b.n	800a714 <_printf_i+0x168>
 800a7ca:	2301      	movs	r3, #1
 800a7cc:	4632      	mov	r2, r6
 800a7ce:	4649      	mov	r1, r9
 800a7d0:	4640      	mov	r0, r8
 800a7d2:	47d0      	blx	sl
 800a7d4:	3001      	adds	r0, #1
 800a7d6:	d09b      	beq.n	800a710 <_printf_i+0x164>
 800a7d8:	3501      	adds	r5, #1
 800a7da:	68e3      	ldr	r3, [r4, #12]
 800a7dc:	9903      	ldr	r1, [sp, #12]
 800a7de:	1a5b      	subs	r3, r3, r1
 800a7e0:	42ab      	cmp	r3, r5
 800a7e2:	dcf2      	bgt.n	800a7ca <_printf_i+0x21e>
 800a7e4:	e7eb      	b.n	800a7be <_printf_i+0x212>
 800a7e6:	2500      	movs	r5, #0
 800a7e8:	f104 0619 	add.w	r6, r4, #25
 800a7ec:	e7f5      	b.n	800a7da <_printf_i+0x22e>
 800a7ee:	bf00      	nop
 800a7f0:	0800bd5d 	.word	0x0800bd5d
 800a7f4:	0800bd6e 	.word	0x0800bd6e

0800a7f8 <_sbrk_r>:
 800a7f8:	b538      	push	{r3, r4, r5, lr}
 800a7fa:	4d06      	ldr	r5, [pc, #24]	; (800a814 <_sbrk_r+0x1c>)
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	4604      	mov	r4, r0
 800a800:	4608      	mov	r0, r1
 800a802:	602b      	str	r3, [r5, #0]
 800a804:	f7fa fd62 	bl	80052cc <_sbrk>
 800a808:	1c43      	adds	r3, r0, #1
 800a80a:	d102      	bne.n	800a812 <_sbrk_r+0x1a>
 800a80c:	682b      	ldr	r3, [r5, #0]
 800a80e:	b103      	cbz	r3, 800a812 <_sbrk_r+0x1a>
 800a810:	6023      	str	r3, [r4, #0]
 800a812:	bd38      	pop	{r3, r4, r5, pc}
 800a814:	20005668 	.word	0x20005668

0800a818 <__sread>:
 800a818:	b510      	push	{r4, lr}
 800a81a:	460c      	mov	r4, r1
 800a81c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a820:	f000 f8a0 	bl	800a964 <_read_r>
 800a824:	2800      	cmp	r0, #0
 800a826:	bfab      	itete	ge
 800a828:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a82a:	89a3      	ldrhlt	r3, [r4, #12]
 800a82c:	181b      	addge	r3, r3, r0
 800a82e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a832:	bfac      	ite	ge
 800a834:	6563      	strge	r3, [r4, #84]	; 0x54
 800a836:	81a3      	strhlt	r3, [r4, #12]
 800a838:	bd10      	pop	{r4, pc}

0800a83a <__swrite>:
 800a83a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a83e:	461f      	mov	r7, r3
 800a840:	898b      	ldrh	r3, [r1, #12]
 800a842:	05db      	lsls	r3, r3, #23
 800a844:	4605      	mov	r5, r0
 800a846:	460c      	mov	r4, r1
 800a848:	4616      	mov	r6, r2
 800a84a:	d505      	bpl.n	800a858 <__swrite+0x1e>
 800a84c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a850:	2302      	movs	r3, #2
 800a852:	2200      	movs	r2, #0
 800a854:	f000 f868 	bl	800a928 <_lseek_r>
 800a858:	89a3      	ldrh	r3, [r4, #12]
 800a85a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a85e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a862:	81a3      	strh	r3, [r4, #12]
 800a864:	4632      	mov	r2, r6
 800a866:	463b      	mov	r3, r7
 800a868:	4628      	mov	r0, r5
 800a86a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a86e:	f000 b817 	b.w	800a8a0 <_write_r>

0800a872 <__sseek>:
 800a872:	b510      	push	{r4, lr}
 800a874:	460c      	mov	r4, r1
 800a876:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a87a:	f000 f855 	bl	800a928 <_lseek_r>
 800a87e:	1c43      	adds	r3, r0, #1
 800a880:	89a3      	ldrh	r3, [r4, #12]
 800a882:	bf15      	itete	ne
 800a884:	6560      	strne	r0, [r4, #84]	; 0x54
 800a886:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a88a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a88e:	81a3      	strheq	r3, [r4, #12]
 800a890:	bf18      	it	ne
 800a892:	81a3      	strhne	r3, [r4, #12]
 800a894:	bd10      	pop	{r4, pc}

0800a896 <__sclose>:
 800a896:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a89a:	f000 b813 	b.w	800a8c4 <_close_r>
	...

0800a8a0 <_write_r>:
 800a8a0:	b538      	push	{r3, r4, r5, lr}
 800a8a2:	4d07      	ldr	r5, [pc, #28]	; (800a8c0 <_write_r+0x20>)
 800a8a4:	4604      	mov	r4, r0
 800a8a6:	4608      	mov	r0, r1
 800a8a8:	4611      	mov	r1, r2
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	602a      	str	r2, [r5, #0]
 800a8ae:	461a      	mov	r2, r3
 800a8b0:	f7fa fcbb 	bl	800522a <_write>
 800a8b4:	1c43      	adds	r3, r0, #1
 800a8b6:	d102      	bne.n	800a8be <_write_r+0x1e>
 800a8b8:	682b      	ldr	r3, [r5, #0]
 800a8ba:	b103      	cbz	r3, 800a8be <_write_r+0x1e>
 800a8bc:	6023      	str	r3, [r4, #0]
 800a8be:	bd38      	pop	{r3, r4, r5, pc}
 800a8c0:	20005668 	.word	0x20005668

0800a8c4 <_close_r>:
 800a8c4:	b538      	push	{r3, r4, r5, lr}
 800a8c6:	4d06      	ldr	r5, [pc, #24]	; (800a8e0 <_close_r+0x1c>)
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	4604      	mov	r4, r0
 800a8cc:	4608      	mov	r0, r1
 800a8ce:	602b      	str	r3, [r5, #0]
 800a8d0:	f7fa fcc7 	bl	8005262 <_close>
 800a8d4:	1c43      	adds	r3, r0, #1
 800a8d6:	d102      	bne.n	800a8de <_close_r+0x1a>
 800a8d8:	682b      	ldr	r3, [r5, #0]
 800a8da:	b103      	cbz	r3, 800a8de <_close_r+0x1a>
 800a8dc:	6023      	str	r3, [r4, #0]
 800a8de:	bd38      	pop	{r3, r4, r5, pc}
 800a8e0:	20005668 	.word	0x20005668

0800a8e4 <_fstat_r>:
 800a8e4:	b538      	push	{r3, r4, r5, lr}
 800a8e6:	4d07      	ldr	r5, [pc, #28]	; (800a904 <_fstat_r+0x20>)
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	4604      	mov	r4, r0
 800a8ec:	4608      	mov	r0, r1
 800a8ee:	4611      	mov	r1, r2
 800a8f0:	602b      	str	r3, [r5, #0]
 800a8f2:	f7fa fcc2 	bl	800527a <_fstat>
 800a8f6:	1c43      	adds	r3, r0, #1
 800a8f8:	d102      	bne.n	800a900 <_fstat_r+0x1c>
 800a8fa:	682b      	ldr	r3, [r5, #0]
 800a8fc:	b103      	cbz	r3, 800a900 <_fstat_r+0x1c>
 800a8fe:	6023      	str	r3, [r4, #0]
 800a900:	bd38      	pop	{r3, r4, r5, pc}
 800a902:	bf00      	nop
 800a904:	20005668 	.word	0x20005668

0800a908 <_isatty_r>:
 800a908:	b538      	push	{r3, r4, r5, lr}
 800a90a:	4d06      	ldr	r5, [pc, #24]	; (800a924 <_isatty_r+0x1c>)
 800a90c:	2300      	movs	r3, #0
 800a90e:	4604      	mov	r4, r0
 800a910:	4608      	mov	r0, r1
 800a912:	602b      	str	r3, [r5, #0]
 800a914:	f7fa fcc1 	bl	800529a <_isatty>
 800a918:	1c43      	adds	r3, r0, #1
 800a91a:	d102      	bne.n	800a922 <_isatty_r+0x1a>
 800a91c:	682b      	ldr	r3, [r5, #0]
 800a91e:	b103      	cbz	r3, 800a922 <_isatty_r+0x1a>
 800a920:	6023      	str	r3, [r4, #0]
 800a922:	bd38      	pop	{r3, r4, r5, pc}
 800a924:	20005668 	.word	0x20005668

0800a928 <_lseek_r>:
 800a928:	b538      	push	{r3, r4, r5, lr}
 800a92a:	4d07      	ldr	r5, [pc, #28]	; (800a948 <_lseek_r+0x20>)
 800a92c:	4604      	mov	r4, r0
 800a92e:	4608      	mov	r0, r1
 800a930:	4611      	mov	r1, r2
 800a932:	2200      	movs	r2, #0
 800a934:	602a      	str	r2, [r5, #0]
 800a936:	461a      	mov	r2, r3
 800a938:	f7fa fcba 	bl	80052b0 <_lseek>
 800a93c:	1c43      	adds	r3, r0, #1
 800a93e:	d102      	bne.n	800a946 <_lseek_r+0x1e>
 800a940:	682b      	ldr	r3, [r5, #0]
 800a942:	b103      	cbz	r3, 800a946 <_lseek_r+0x1e>
 800a944:	6023      	str	r3, [r4, #0]
 800a946:	bd38      	pop	{r3, r4, r5, pc}
 800a948:	20005668 	.word	0x20005668

0800a94c <__malloc_lock>:
 800a94c:	4801      	ldr	r0, [pc, #4]	; (800a954 <__malloc_lock+0x8>)
 800a94e:	f7ff bb1d 	b.w	8009f8c <__retarget_lock_acquire_recursive>
 800a952:	bf00      	nop
 800a954:	2000565c 	.word	0x2000565c

0800a958 <__malloc_unlock>:
 800a958:	4801      	ldr	r0, [pc, #4]	; (800a960 <__malloc_unlock+0x8>)
 800a95a:	f7ff bb18 	b.w	8009f8e <__retarget_lock_release_recursive>
 800a95e:	bf00      	nop
 800a960:	2000565c 	.word	0x2000565c

0800a964 <_read_r>:
 800a964:	b538      	push	{r3, r4, r5, lr}
 800a966:	4d07      	ldr	r5, [pc, #28]	; (800a984 <_read_r+0x20>)
 800a968:	4604      	mov	r4, r0
 800a96a:	4608      	mov	r0, r1
 800a96c:	4611      	mov	r1, r2
 800a96e:	2200      	movs	r2, #0
 800a970:	602a      	str	r2, [r5, #0]
 800a972:	461a      	mov	r2, r3
 800a974:	f7fa fc3c 	bl	80051f0 <_read>
 800a978:	1c43      	adds	r3, r0, #1
 800a97a:	d102      	bne.n	800a982 <_read_r+0x1e>
 800a97c:	682b      	ldr	r3, [r5, #0]
 800a97e:	b103      	cbz	r3, 800a982 <_read_r+0x1e>
 800a980:	6023      	str	r3, [r4, #0]
 800a982:	bd38      	pop	{r3, r4, r5, pc}
 800a984:	20005668 	.word	0x20005668

0800a988 <_init>:
 800a988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a98a:	bf00      	nop
 800a98c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a98e:	bc08      	pop	{r3}
 800a990:	469e      	mov	lr, r3
 800a992:	4770      	bx	lr

0800a994 <_fini>:
 800a994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a996:	bf00      	nop
 800a998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a99a:	bc08      	pop	{r3}
 800a99c:	469e      	mov	lr, r3
 800a99e:	4770      	bx	lr
