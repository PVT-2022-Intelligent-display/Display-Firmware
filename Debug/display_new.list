
display_new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004790  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000248  08004920  08004920  00014920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b68  08004b68  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08004b68  08004b68  00014b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b70  08004b70  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b70  08004b70  00014b70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b74  08004b74  00014b74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004b78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003f7c  20000078  08004bf0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003ff4  08004bf0  00023ff4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f4fb  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021ed  00000000  00000000  0002f5a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f8  00000000  00000000  00031790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000930  00000000  00000000  00032188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002dea  00000000  00000000  00032ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c68d  00000000  00000000  000358a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c617b  00000000  00000000  00041f2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001080aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003168  00000000  00000000  00108100  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004908 	.word	0x08004908

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08004908 	.word	0x08004908

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057e:	f000 ffcb 	bl	8001518 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000582:	f000 f82f 	bl	80005e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000586:	f000 f993 	bl	80008b0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800058a:	f000 f92d 	bl	80007e8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800058e:	f000 f95d 	bl	800084c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000592:	f000 f887 	bl	80006a4 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000596:	f000 f8bb 	bl	8000710 <MX_SPI2_Init>
  MX_SPI3_Init();
 800059a:	f000 f8ef 	bl	800077c <MX_SPI3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("Entering main loop\n\r");
 800059e:	480f      	ldr	r0, [pc, #60]	; (80005dc <main+0x64>)
 80005a0:	f003 f814 	bl	80035cc <iprintf>
  int loopNumber = 0;
 80005a4:	2300      	movs	r3, #0
 80005a6:	60fb      	str	r3, [r7, #12]

  while (1)
  {
	int secSleep = 1;
 80005a8:	2301      	movs	r3, #1
 80005aa:	60bb      	str	r3, [r7, #8]
	int msecSleep = 500;
 80005ac:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80005b0:	607b      	str	r3, [r7, #4]
	printf("Sleeping %d.%d secs. LN %d\r\n", secSleep, msecSleep, loopNumber++);
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	1c5a      	adds	r2, r3, #1
 80005b6:	60fa      	str	r2, [r7, #12]
 80005b8:	687a      	ldr	r2, [r7, #4]
 80005ba:	68b9      	ldr	r1, [r7, #8]
 80005bc:	4808      	ldr	r0, [pc, #32]	; (80005e0 <main+0x68>)
 80005be:	f003 f805 	bl	80035cc <iprintf>
	HAL_Delay(1000*secSleep + msecSleep);
 80005c2:	68bb      	ldr	r3, [r7, #8]
 80005c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005c8:	fb02 f203 	mul.w	r2, r2, r3
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	4413      	add	r3, r2
 80005d0:	4618      	mov	r0, r3
 80005d2:	f001 f813 	bl	80015fc <HAL_Delay>

	uartDemoLoop();
 80005d6:	f000 ff0f 	bl	80013f8 <uartDemoLoop>
  {
 80005da:	e7e5      	b.n	80005a8 <main+0x30>
 80005dc:	08004920 	.word	0x08004920
 80005e0:	08004938 	.word	0x08004938

080005e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b094      	sub	sp, #80	; 0x50
 80005e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ea:	f107 0320 	add.w	r3, r7, #32
 80005ee:	2230      	movs	r2, #48	; 0x30
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f002 ffe2 	bl	80035bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f8:	f107 030c 	add.w	r3, r7, #12
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]
 8000606:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000608:	2300      	movs	r3, #0
 800060a:	60bb      	str	r3, [r7, #8]
 800060c:	4b23      	ldr	r3, [pc, #140]	; (800069c <SystemClock_Config+0xb8>)
 800060e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000610:	4a22      	ldr	r2, [pc, #136]	; (800069c <SystemClock_Config+0xb8>)
 8000612:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000616:	6413      	str	r3, [r2, #64]	; 0x40
 8000618:	4b20      	ldr	r3, [pc, #128]	; (800069c <SystemClock_Config+0xb8>)
 800061a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000620:	60bb      	str	r3, [r7, #8]
 8000622:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000624:	2300      	movs	r3, #0
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	4b1d      	ldr	r3, [pc, #116]	; (80006a0 <SystemClock_Config+0xbc>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a1c      	ldr	r2, [pc, #112]	; (80006a0 <SystemClock_Config+0xbc>)
 800062e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000632:	6013      	str	r3, [r2, #0]
 8000634:	4b1a      	ldr	r3, [pc, #104]	; (80006a0 <SystemClock_Config+0xbc>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800063c:	607b      	str	r3, [r7, #4]
 800063e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000640:	2302      	movs	r3, #2
 8000642:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000644:	2301      	movs	r3, #1
 8000646:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000648:	2310      	movs	r3, #16
 800064a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800064c:	2300      	movs	r3, #0
 800064e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000650:	f107 0320 	add.w	r3, r7, #32
 8000654:	4618      	mov	r0, r3
 8000656:	f001 fb4f 	bl	8001cf8 <HAL_RCC_OscConfig>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000660:	f000 f9b6 	bl	80009d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000664:	230f      	movs	r3, #15
 8000666:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000668:	2300      	movs	r3, #0
 800066a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066c:	2300      	movs	r3, #0
 800066e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000670:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000674:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000676:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800067a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800067c:	f107 030c 	add.w	r3, r7, #12
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f001 fdb0 	bl	80021e8 <HAL_RCC_ClockConfig>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800068e:	f000 f99f 	bl	80009d0 <Error_Handler>
  }
}
 8000692:	bf00      	nop
 8000694:	3750      	adds	r7, #80	; 0x50
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	40023800 	.word	0x40023800
 80006a0:	40007000 	.word	0x40007000

080006a4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006a8:	4b17      	ldr	r3, [pc, #92]	; (8000708 <MX_SPI1_Init+0x64>)
 80006aa:	4a18      	ldr	r2, [pc, #96]	; (800070c <MX_SPI1_Init+0x68>)
 80006ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006ae:	4b16      	ldr	r3, [pc, #88]	; (8000708 <MX_SPI1_Init+0x64>)
 80006b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006b6:	4b14      	ldr	r3, [pc, #80]	; (8000708 <MX_SPI1_Init+0x64>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006bc:	4b12      	ldr	r3, [pc, #72]	; (8000708 <MX_SPI1_Init+0x64>)
 80006be:	2200      	movs	r2, #0
 80006c0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80006c2:	4b11      	ldr	r3, [pc, #68]	; (8000708 <MX_SPI1_Init+0x64>)
 80006c4:	2202      	movs	r2, #2
 80006c6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80006c8:	4b0f      	ldr	r3, [pc, #60]	; (8000708 <MX_SPI1_Init+0x64>)
 80006ca:	2201      	movs	r2, #1
 80006cc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006ce:	4b0e      	ldr	r3, [pc, #56]	; (8000708 <MX_SPI1_Init+0x64>)
 80006d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006d4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006d6:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <MX_SPI1_Init+0x64>)
 80006d8:	2200      	movs	r2, #0
 80006da:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006dc:	4b0a      	ldr	r3, [pc, #40]	; (8000708 <MX_SPI1_Init+0x64>)
 80006de:	2200      	movs	r2, #0
 80006e0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006e2:	4b09      	ldr	r3, [pc, #36]	; (8000708 <MX_SPI1_Init+0x64>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006e8:	4b07      	ldr	r3, [pc, #28]	; (8000708 <MX_SPI1_Init+0x64>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006ee:	4b06      	ldr	r3, [pc, #24]	; (8000708 <MX_SPI1_Init+0x64>)
 80006f0:	220a      	movs	r2, #10
 80006f2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006f4:	4804      	ldr	r0, [pc, #16]	; (8000708 <MX_SPI1_Init+0x64>)
 80006f6:	f001 ff47 	bl	8002588 <HAL_SPI_Init>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000700:	f000 f966 	bl	80009d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000704:	bf00      	nop
 8000706:	bd80      	pop	{r7, pc}
 8000708:	200001bc 	.word	0x200001bc
 800070c:	40013000 	.word	0x40013000

08000710 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000714:	4b17      	ldr	r3, [pc, #92]	; (8000774 <MX_SPI2_Init+0x64>)
 8000716:	4a18      	ldr	r2, [pc, #96]	; (8000778 <MX_SPI2_Init+0x68>)
 8000718:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800071a:	4b16      	ldr	r3, [pc, #88]	; (8000774 <MX_SPI2_Init+0x64>)
 800071c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000720:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000722:	4b14      	ldr	r3, [pc, #80]	; (8000774 <MX_SPI2_Init+0x64>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000728:	4b12      	ldr	r3, [pc, #72]	; (8000774 <MX_SPI2_Init+0x64>)
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800072e:	4b11      	ldr	r3, [pc, #68]	; (8000774 <MX_SPI2_Init+0x64>)
 8000730:	2200      	movs	r2, #0
 8000732:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000734:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <MX_SPI2_Init+0x64>)
 8000736:	2200      	movs	r2, #0
 8000738:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800073a:	4b0e      	ldr	r3, [pc, #56]	; (8000774 <MX_SPI2_Init+0x64>)
 800073c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000740:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000742:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <MX_SPI2_Init+0x64>)
 8000744:	2230      	movs	r2, #48	; 0x30
 8000746:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000748:	4b0a      	ldr	r3, [pc, #40]	; (8000774 <MX_SPI2_Init+0x64>)
 800074a:	2200      	movs	r2, #0
 800074c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800074e:	4b09      	ldr	r3, [pc, #36]	; (8000774 <MX_SPI2_Init+0x64>)
 8000750:	2200      	movs	r2, #0
 8000752:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000754:	4b07      	ldr	r3, [pc, #28]	; (8000774 <MX_SPI2_Init+0x64>)
 8000756:	2200      	movs	r2, #0
 8000758:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800075a:	4b06      	ldr	r3, [pc, #24]	; (8000774 <MX_SPI2_Init+0x64>)
 800075c:	220a      	movs	r2, #10
 800075e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000760:	4804      	ldr	r0, [pc, #16]	; (8000774 <MX_SPI2_Init+0x64>)
 8000762:	f001 ff11 	bl	8002588 <HAL_SPI_Init>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800076c:	f000 f930 	bl	80009d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}
 8000774:	200000c8 	.word	0x200000c8
 8000778:	40003800 	.word	0x40003800

0800077c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000780:	4b17      	ldr	r3, [pc, #92]	; (80007e0 <MX_SPI3_Init+0x64>)
 8000782:	4a18      	ldr	r2, [pc, #96]	; (80007e4 <MX_SPI3_Init+0x68>)
 8000784:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000786:	4b16      	ldr	r3, [pc, #88]	; (80007e0 <MX_SPI3_Init+0x64>)
 8000788:	f44f 7282 	mov.w	r2, #260	; 0x104
 800078c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800078e:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <MX_SPI3_Init+0x64>)
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000794:	4b12      	ldr	r3, [pc, #72]	; (80007e0 <MX_SPI3_Init+0x64>)
 8000796:	2200      	movs	r2, #0
 8000798:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800079a:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <MX_SPI3_Init+0x64>)
 800079c:	2200      	movs	r2, #0
 800079e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007a0:	4b0f      	ldr	r3, [pc, #60]	; (80007e0 <MX_SPI3_Init+0x64>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80007a6:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <MX_SPI3_Init+0x64>)
 80007a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007ac:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007ae:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <MX_SPI3_Init+0x64>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007b4:	4b0a      	ldr	r3, [pc, #40]	; (80007e0 <MX_SPI3_Init+0x64>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80007ba:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <MX_SPI3_Init+0x64>)
 80007bc:	2200      	movs	r2, #0
 80007be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007c0:	4b07      	ldr	r3, [pc, #28]	; (80007e0 <MX_SPI3_Init+0x64>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80007c6:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <MX_SPI3_Init+0x64>)
 80007c8:	220a      	movs	r2, #10
 80007ca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80007cc:	4804      	ldr	r0, [pc, #16]	; (80007e0 <MX_SPI3_Init+0x64>)
 80007ce:	f001 fedb 	bl	8002588 <HAL_SPI_Init>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80007d8:	f000 f8fa 	bl	80009d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80007dc:	bf00      	nop
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	20000120 	.word	0x20000120
 80007e4:	40003c00 	.word	0x40003c00

080007e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007ec:	4b15      	ldr	r3, [pc, #84]	; (8000844 <MX_USART1_UART_Init+0x5c>)
 80007ee:	4a16      	ldr	r2, [pc, #88]	; (8000848 <MX_USART1_UART_Init+0x60>)
 80007f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007f2:	4b14      	ldr	r3, [pc, #80]	; (8000844 <MX_USART1_UART_Init+0x5c>)
 80007f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007fa:	4b12      	ldr	r3, [pc, #72]	; (8000844 <MX_USART1_UART_Init+0x5c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000800:	4b10      	ldr	r3, [pc, #64]	; (8000844 <MX_USART1_UART_Init+0x5c>)
 8000802:	2200      	movs	r2, #0
 8000804:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000806:	4b0f      	ldr	r3, [pc, #60]	; (8000844 <MX_USART1_UART_Init+0x5c>)
 8000808:	2200      	movs	r2, #0
 800080a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800080c:	4b0d      	ldr	r3, [pc, #52]	; (8000844 <MX_USART1_UART_Init+0x5c>)
 800080e:	220c      	movs	r2, #12
 8000810:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000812:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <MX_USART1_UART_Init+0x5c>)
 8000814:	2200      	movs	r2, #0
 8000816:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000818:	4b0a      	ldr	r3, [pc, #40]	; (8000844 <MX_USART1_UART_Init+0x5c>)
 800081a:	2200      	movs	r2, #0
 800081c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800081e:	4809      	ldr	r0, [pc, #36]	; (8000844 <MX_USART1_UART_Init+0x5c>)
 8000820:	f001 ff3b 	bl	800269a <HAL_UART_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800082a:	f000 f8d1 	bl	80009d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE); //turn on rx interrupt forever
 800082e:	4b05      	ldr	r3, [pc, #20]	; (8000844 <MX_USART1_UART_Init+0x5c>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	68da      	ldr	r2, [r3, #12]
 8000834:	4b03      	ldr	r3, [pc, #12]	; (8000844 <MX_USART1_UART_Init+0x5c>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	f042 0220 	orr.w	r2, r2, #32
 800083c:	60da      	str	r2, [r3, #12]
  /* USER CODE END USART1_Init 2 */

}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	20000178 	.word	0x20000178
 8000848:	40011000 	.word	0x40011000

0800084c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000850:	4b15      	ldr	r3, [pc, #84]	; (80008a8 <MX_USART2_UART_Init+0x5c>)
 8000852:	4a16      	ldr	r2, [pc, #88]	; (80008ac <MX_USART2_UART_Init+0x60>)
 8000854:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000856:	4b14      	ldr	r3, [pc, #80]	; (80008a8 <MX_USART2_UART_Init+0x5c>)
 8000858:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800085c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800085e:	4b12      	ldr	r3, [pc, #72]	; (80008a8 <MX_USART2_UART_Init+0x5c>)
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000864:	4b10      	ldr	r3, [pc, #64]	; (80008a8 <MX_USART2_UART_Init+0x5c>)
 8000866:	2200      	movs	r2, #0
 8000868:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800086a:	4b0f      	ldr	r3, [pc, #60]	; (80008a8 <MX_USART2_UART_Init+0x5c>)
 800086c:	2200      	movs	r2, #0
 800086e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000870:	4b0d      	ldr	r3, [pc, #52]	; (80008a8 <MX_USART2_UART_Init+0x5c>)
 8000872:	220c      	movs	r2, #12
 8000874:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000876:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <MX_USART2_UART_Init+0x5c>)
 8000878:	2200      	movs	r2, #0
 800087a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800087c:	4b0a      	ldr	r3, [pc, #40]	; (80008a8 <MX_USART2_UART_Init+0x5c>)
 800087e:	2200      	movs	r2, #0
 8000880:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000882:	4809      	ldr	r0, [pc, #36]	; (80008a8 <MX_USART2_UART_Init+0x5c>)
 8000884:	f001 ff09 	bl	800269a <HAL_UART_Init>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800088e:	f000 f89f 	bl	80009d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE); //turn on rx interrupt forever
 8000892:	4b05      	ldr	r3, [pc, #20]	; (80008a8 <MX_USART2_UART_Init+0x5c>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	68da      	ldr	r2, [r3, #12]
 8000898:	4b03      	ldr	r3, [pc, #12]	; (80008a8 <MX_USART2_UART_Init+0x5c>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	f042 0220 	orr.w	r2, r2, #32
 80008a0:	60da      	str	r2, [r3, #12]
  /* USER CODE END USART2_Init 2 */

}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	20000214 	.word	0x20000214
 80008ac:	40004400 	.word	0x40004400

080008b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08a      	sub	sp, #40	; 0x28
 80008b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b6:	f107 0314 	add.w	r3, r7, #20
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	605a      	str	r2, [r3, #4]
 80008c0:	609a      	str	r2, [r3, #8]
 80008c2:	60da      	str	r2, [r3, #12]
 80008c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	613b      	str	r3, [r7, #16]
 80008ca:	4b3e      	ldr	r3, [pc, #248]	; (80009c4 <MX_GPIO_Init+0x114>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	4a3d      	ldr	r2, [pc, #244]	; (80009c4 <MX_GPIO_Init+0x114>)
 80008d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008d4:	6313      	str	r3, [r2, #48]	; 0x30
 80008d6:	4b3b      	ldr	r3, [pc, #236]	; (80009c4 <MX_GPIO_Init+0x114>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008de:	613b      	str	r3, [r7, #16]
 80008e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	60fb      	str	r3, [r7, #12]
 80008e6:	4b37      	ldr	r3, [pc, #220]	; (80009c4 <MX_GPIO_Init+0x114>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	4a36      	ldr	r2, [pc, #216]	; (80009c4 <MX_GPIO_Init+0x114>)
 80008ec:	f043 0304 	orr.w	r3, r3, #4
 80008f0:	6313      	str	r3, [r2, #48]	; 0x30
 80008f2:	4b34      	ldr	r3, [pc, #208]	; (80009c4 <MX_GPIO_Init+0x114>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	f003 0304 	and.w	r3, r3, #4
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	60bb      	str	r3, [r7, #8]
 8000902:	4b30      	ldr	r3, [pc, #192]	; (80009c4 <MX_GPIO_Init+0x114>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	4a2f      	ldr	r2, [pc, #188]	; (80009c4 <MX_GPIO_Init+0x114>)
 8000908:	f043 0301 	orr.w	r3, r3, #1
 800090c:	6313      	str	r3, [r2, #48]	; 0x30
 800090e:	4b2d      	ldr	r3, [pc, #180]	; (80009c4 <MX_GPIO_Init+0x114>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	f003 0301 	and.w	r3, r3, #1
 8000916:	60bb      	str	r3, [r7, #8]
 8000918:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	607b      	str	r3, [r7, #4]
 800091e:	4b29      	ldr	r3, [pc, #164]	; (80009c4 <MX_GPIO_Init+0x114>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a28      	ldr	r2, [pc, #160]	; (80009c4 <MX_GPIO_Init+0x114>)
 8000924:	f043 0302 	orr.w	r3, r3, #2
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4b26      	ldr	r3, [pc, #152]	; (80009c4 <MX_GPIO_Init+0x114>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f003 0302 	and.w	r3, r3, #2
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LCD_RES_Pin, GPIO_PIN_RESET);
 8000936:	2200      	movs	r2, #0
 8000938:	f241 0110 	movw	r1, #4112	; 0x1010
 800093c:	4822      	ldr	r0, [pc, #136]	; (80009c8 <MX_GPIO_Init+0x118>)
 800093e:	f001 f9c1 	bl	8001cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000942:	2200      	movs	r2, #0
 8000944:	2108      	movs	r1, #8
 8000946:	4821      	ldr	r0, [pc, #132]	; (80009cc <MX_GPIO_Init+0x11c>)
 8000948:	f001 f9bc 	bl	8001cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800094c:	2310      	movs	r3, #16
 800094e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000950:	2301      	movs	r3, #1
 8000952:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000958:	2300      	movs	r3, #0
 800095a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095c:	f107 0314 	add.w	r3, r7, #20
 8000960:	4619      	mov	r1, r3
 8000962:	4819      	ldr	r0, [pc, #100]	; (80009c8 <MX_GPIO_Init+0x118>)
 8000964:	f001 f812 	bl	800198c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000968:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800096c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800096e:	2300      	movs	r3, #0
 8000970:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000976:	f107 0314 	add.w	r3, r7, #20
 800097a:	4619      	mov	r1, r3
 800097c:	4812      	ldr	r0, [pc, #72]	; (80009c8 <MX_GPIO_Init+0x118>)
 800097e:	f001 f805 	bl	800198c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RES_Pin */
  GPIO_InitStruct.Pin = LCD_RES_Pin;
 8000982:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000986:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000988:	2301      	movs	r3, #1
 800098a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800098c:	2301      	movs	r3, #1
 800098e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000990:	2303      	movs	r3, #3
 8000992:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_RES_GPIO_Port, &GPIO_InitStruct);
 8000994:	f107 0314 	add.w	r3, r7, #20
 8000998:	4619      	mov	r1, r3
 800099a:	480b      	ldr	r0, [pc, #44]	; (80009c8 <MX_GPIO_Init+0x118>)
 800099c:	f000 fff6 	bl	800198c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80009a0:	2308      	movs	r3, #8
 80009a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a4:	2301      	movs	r3, #1
 80009a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ac:	2300      	movs	r3, #0
 80009ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	4619      	mov	r1, r3
 80009b6:	4805      	ldr	r0, [pc, #20]	; (80009cc <MX_GPIO_Init+0x11c>)
 80009b8:	f000 ffe8 	bl	800198c <HAL_GPIO_Init>

}
 80009bc:	bf00      	nop
 80009be:	3728      	adds	r7, #40	; 0x28
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	40023800 	.word	0x40023800
 80009c8:	40020000 	.word	0x40020000
 80009cc:	40020400 	.word	0x40020400

080009d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d4:	b672      	cpsid	i
}
 80009d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009d8:	e7fe      	b.n	80009d8 <Error_Handler+0x8>
	...

080009dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	607b      	str	r3, [r7, #4]
 80009e6:	4b10      	ldr	r3, [pc, #64]	; (8000a28 <HAL_MspInit+0x4c>)
 80009e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ea:	4a0f      	ldr	r2, [pc, #60]	; (8000a28 <HAL_MspInit+0x4c>)
 80009ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009f0:	6453      	str	r3, [r2, #68]	; 0x44
 80009f2:	4b0d      	ldr	r3, [pc, #52]	; (8000a28 <HAL_MspInit+0x4c>)
 80009f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009fa:	607b      	str	r3, [r7, #4]
 80009fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	603b      	str	r3, [r7, #0]
 8000a02:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <HAL_MspInit+0x4c>)
 8000a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a06:	4a08      	ldr	r2, [pc, #32]	; (8000a28 <HAL_MspInit+0x4c>)
 8000a08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a0e:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <HAL_MspInit+0x4c>)
 8000a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a16:	603b      	str	r3, [r7, #0]
 8000a18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	370c      	adds	r7, #12
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	40023800 	.word	0x40023800

08000a2c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b08e      	sub	sp, #56	; 0x38
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
 8000a42:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a5b      	ldr	r2, [pc, #364]	; (8000bb8 <HAL_SPI_MspInit+0x18c>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d12c      	bne.n	8000aa8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	623b      	str	r3, [r7, #32]
 8000a52:	4b5a      	ldr	r3, [pc, #360]	; (8000bbc <HAL_SPI_MspInit+0x190>)
 8000a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a56:	4a59      	ldr	r2, [pc, #356]	; (8000bbc <HAL_SPI_MspInit+0x190>)
 8000a58:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a5e:	4b57      	ldr	r3, [pc, #348]	; (8000bbc <HAL_SPI_MspInit+0x190>)
 8000a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a66:	623b      	str	r3, [r7, #32]
 8000a68:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	61fb      	str	r3, [r7, #28]
 8000a6e:	4b53      	ldr	r3, [pc, #332]	; (8000bbc <HAL_SPI_MspInit+0x190>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	4a52      	ldr	r2, [pc, #328]	; (8000bbc <HAL_SPI_MspInit+0x190>)
 8000a74:	f043 0301 	orr.w	r3, r3, #1
 8000a78:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7a:	4b50      	ldr	r3, [pc, #320]	; (8000bbc <HAL_SPI_MspInit+0x190>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	f003 0301 	and.w	r3, r3, #1
 8000a82:	61fb      	str	r3, [r7, #28]
 8000a84:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000a86:	23e0      	movs	r3, #224	; 0xe0
 8000a88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a92:	2303      	movs	r3, #3
 8000a94:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a96:	2305      	movs	r3, #5
 8000a98:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4847      	ldr	r0, [pc, #284]	; (8000bc0 <HAL_SPI_MspInit+0x194>)
 8000aa2:	f000 ff73 	bl	800198c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000aa6:	e082      	b.n	8000bae <HAL_SPI_MspInit+0x182>
  else if(hspi->Instance==SPI2)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a45      	ldr	r2, [pc, #276]	; (8000bc4 <HAL_SPI_MspInit+0x198>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d14b      	bne.n	8000b4a <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	61bb      	str	r3, [r7, #24]
 8000ab6:	4b41      	ldr	r3, [pc, #260]	; (8000bbc <HAL_SPI_MspInit+0x190>)
 8000ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aba:	4a40      	ldr	r2, [pc, #256]	; (8000bbc <HAL_SPI_MspInit+0x190>)
 8000abc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac2:	4b3e      	ldr	r3, [pc, #248]	; (8000bbc <HAL_SPI_MspInit+0x190>)
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aca:	61bb      	str	r3, [r7, #24]
 8000acc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	617b      	str	r3, [r7, #20]
 8000ad2:	4b3a      	ldr	r3, [pc, #232]	; (8000bbc <HAL_SPI_MspInit+0x190>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	4a39      	ldr	r2, [pc, #228]	; (8000bbc <HAL_SPI_MspInit+0x190>)
 8000ad8:	f043 0304 	orr.w	r3, r3, #4
 8000adc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ade:	4b37      	ldr	r3, [pc, #220]	; (8000bbc <HAL_SPI_MspInit+0x190>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	f003 0304 	and.w	r3, r3, #4
 8000ae6:	617b      	str	r3, [r7, #20]
 8000ae8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	613b      	str	r3, [r7, #16]
 8000aee:	4b33      	ldr	r3, [pc, #204]	; (8000bbc <HAL_SPI_MspInit+0x190>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	4a32      	ldr	r2, [pc, #200]	; (8000bbc <HAL_SPI_MspInit+0x190>)
 8000af4:	f043 0302 	orr.w	r3, r3, #2
 8000af8:	6313      	str	r3, [r2, #48]	; 0x30
 8000afa:	4b30      	ldr	r3, [pc, #192]	; (8000bbc <HAL_SPI_MspInit+0x190>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	f003 0302 	and.w	r3, r3, #2
 8000b02:	613b      	str	r3, [r7, #16]
 8000b04:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b06:	230c      	movs	r3, #12
 8000b08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b12:	2303      	movs	r3, #3
 8000b14:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b16:	2305      	movs	r3, #5
 8000b18:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4829      	ldr	r0, [pc, #164]	; (8000bc8 <HAL_SPI_MspInit+0x19c>)
 8000b22:	f000 ff33 	bl	800198c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b34:	2303      	movs	r3, #3
 8000b36:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b38:	2305      	movs	r3, #5
 8000b3a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b40:	4619      	mov	r1, r3
 8000b42:	4822      	ldr	r0, [pc, #136]	; (8000bcc <HAL_SPI_MspInit+0x1a0>)
 8000b44:	f000 ff22 	bl	800198c <HAL_GPIO_Init>
}
 8000b48:	e031      	b.n	8000bae <HAL_SPI_MspInit+0x182>
  else if(hspi->Instance==SPI3)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4a20      	ldr	r2, [pc, #128]	; (8000bd0 <HAL_SPI_MspInit+0x1a4>)
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d12c      	bne.n	8000bae <HAL_SPI_MspInit+0x182>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b54:	2300      	movs	r3, #0
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	4b18      	ldr	r3, [pc, #96]	; (8000bbc <HAL_SPI_MspInit+0x190>)
 8000b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5c:	4a17      	ldr	r2, [pc, #92]	; (8000bbc <HAL_SPI_MspInit+0x190>)
 8000b5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b62:	6413      	str	r3, [r2, #64]	; 0x40
 8000b64:	4b15      	ldr	r3, [pc, #84]	; (8000bbc <HAL_SPI_MspInit+0x190>)
 8000b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b70:	2300      	movs	r3, #0
 8000b72:	60bb      	str	r3, [r7, #8]
 8000b74:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <HAL_SPI_MspInit+0x190>)
 8000b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b78:	4a10      	ldr	r2, [pc, #64]	; (8000bbc <HAL_SPI_MspInit+0x190>)
 8000b7a:	f043 0304 	orr.w	r3, r3, #4
 8000b7e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b80:	4b0e      	ldr	r3, [pc, #56]	; (8000bbc <HAL_SPI_MspInit+0x190>)
 8000b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b84:	f003 0304 	and.w	r3, r3, #4
 8000b88:	60bb      	str	r3, [r7, #8]
 8000b8a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000b8c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000b90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b92:	2302      	movs	r3, #2
 8000b94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b9a:	2303      	movs	r3, #3
 8000b9c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b9e:	2306      	movs	r3, #6
 8000ba0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ba2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4807      	ldr	r0, [pc, #28]	; (8000bc8 <HAL_SPI_MspInit+0x19c>)
 8000baa:	f000 feef 	bl	800198c <HAL_GPIO_Init>
}
 8000bae:	bf00      	nop
 8000bb0:	3738      	adds	r7, #56	; 0x38
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40013000 	.word	0x40013000
 8000bbc:	40023800 	.word	0x40023800
 8000bc0:	40020000 	.word	0x40020000
 8000bc4:	40003800 	.word	0x40003800
 8000bc8:	40020800 	.word	0x40020800
 8000bcc:	40020400 	.word	0x40020400
 8000bd0:	40003c00 	.word	0x40003c00

08000bd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b08c      	sub	sp, #48	; 0x30
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bdc:	f107 031c 	add.w	r3, r7, #28
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]
 8000bea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a3a      	ldr	r2, [pc, #232]	; (8000cdc <HAL_UART_MspInit+0x108>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d135      	bne.n	8000c62 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	61bb      	str	r3, [r7, #24]
 8000bfa:	4b39      	ldr	r3, [pc, #228]	; (8000ce0 <HAL_UART_MspInit+0x10c>)
 8000bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfe:	4a38      	ldr	r2, [pc, #224]	; (8000ce0 <HAL_UART_MspInit+0x10c>)
 8000c00:	f043 0310 	orr.w	r3, r3, #16
 8000c04:	6453      	str	r3, [r2, #68]	; 0x44
 8000c06:	4b36      	ldr	r3, [pc, #216]	; (8000ce0 <HAL_UART_MspInit+0x10c>)
 8000c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0a:	f003 0310 	and.w	r3, r3, #16
 8000c0e:	61bb      	str	r3, [r7, #24]
 8000c10:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	617b      	str	r3, [r7, #20]
 8000c16:	4b32      	ldr	r3, [pc, #200]	; (8000ce0 <HAL_UART_MspInit+0x10c>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	4a31      	ldr	r2, [pc, #196]	; (8000ce0 <HAL_UART_MspInit+0x10c>)
 8000c1c:	f043 0301 	orr.w	r3, r3, #1
 8000c20:	6313      	str	r3, [r2, #48]	; 0x30
 8000c22:	4b2f      	ldr	r3, [pc, #188]	; (8000ce0 <HAL_UART_MspInit+0x10c>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	f003 0301 	and.w	r3, r3, #1
 8000c2a:	617b      	str	r3, [r7, #20]
 8000c2c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c2e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c34:	2302      	movs	r3, #2
 8000c36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c3c:	2303      	movs	r3, #3
 8000c3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c40:	2307      	movs	r3, #7
 8000c42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c44:	f107 031c 	add.w	r3, r7, #28
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4826      	ldr	r0, [pc, #152]	; (8000ce4 <HAL_UART_MspInit+0x110>)
 8000c4c:	f000 fe9e 	bl	800198c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c50:	2200      	movs	r2, #0
 8000c52:	2100      	movs	r1, #0
 8000c54:	2025      	movs	r0, #37	; 0x25
 8000c56:	f000 fdd0 	bl	80017fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c5a:	2025      	movs	r0, #37	; 0x25
 8000c5c:	f000 fde9 	bl	8001832 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c60:	e038      	b.n	8000cd4 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a20      	ldr	r2, [pc, #128]	; (8000ce8 <HAL_UART_MspInit+0x114>)
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d133      	bne.n	8000cd4 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	613b      	str	r3, [r7, #16]
 8000c70:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <HAL_UART_MspInit+0x10c>)
 8000c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c74:	4a1a      	ldr	r2, [pc, #104]	; (8000ce0 <HAL_UART_MspInit+0x10c>)
 8000c76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c7a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c7c:	4b18      	ldr	r3, [pc, #96]	; (8000ce0 <HAL_UART_MspInit+0x10c>)
 8000c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c84:	613b      	str	r3, [r7, #16]
 8000c86:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c88:	2300      	movs	r3, #0
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	4b14      	ldr	r3, [pc, #80]	; (8000ce0 <HAL_UART_MspInit+0x10c>)
 8000c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c90:	4a13      	ldr	r2, [pc, #76]	; (8000ce0 <HAL_UART_MspInit+0x10c>)
 8000c92:	f043 0301 	orr.w	r3, r3, #1
 8000c96:	6313      	str	r3, [r2, #48]	; 0x30
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <HAL_UART_MspInit+0x10c>)
 8000c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9c:	f003 0301 	and.w	r3, r3, #1
 8000ca0:	60fb      	str	r3, [r7, #12]
 8000ca2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ca4:	230c      	movs	r3, #12
 8000ca6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb0:	2303      	movs	r3, #3
 8000cb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cb4:	2307      	movs	r3, #7
 8000cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb8:	f107 031c 	add.w	r3, r7, #28
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4809      	ldr	r0, [pc, #36]	; (8000ce4 <HAL_UART_MspInit+0x110>)
 8000cc0:	f000 fe64 	bl	800198c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	2026      	movs	r0, #38	; 0x26
 8000cca:	f000 fd96 	bl	80017fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000cce:	2026      	movs	r0, #38	; 0x26
 8000cd0:	f000 fdaf 	bl	8001832 <HAL_NVIC_EnableIRQ>
}
 8000cd4:	bf00      	nop
 8000cd6:	3730      	adds	r7, #48	; 0x30
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	40011000 	.word	0x40011000
 8000ce0:	40023800 	.word	0x40023800
 8000ce4:	40020000 	.word	0x40020000
 8000ce8:	40004400 	.word	0x40004400

08000cec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cf0:	e7fe      	b.n	8000cf0 <NMI_Handler+0x4>

08000cf2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cf6:	e7fe      	b.n	8000cf6 <HardFault_Handler+0x4>

08000cf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cfc:	e7fe      	b.n	8000cfc <MemManage_Handler+0x4>

08000cfe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d02:	e7fe      	b.n	8000d02 <BusFault_Handler+0x4>

08000d04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d08:	e7fe      	b.n	8000d08 <UsageFault_Handler+0x4>

08000d0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d1c:	bf00      	nop
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr

08000d26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d26:	b480      	push	{r7}
 8000d28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr

08000d34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d38:	f000 fc40 	bl	80015bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d3c:	bf00      	nop
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  static int ledVal = 0;
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, ledVal);
 8000d46:	4b24      	ldr	r3, [pc, #144]	; (8000dd8 <USART1_IRQHandler+0x98>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	2108      	movs	r1, #8
 8000d50:	4822      	ldr	r0, [pc, #136]	; (8000ddc <USART1_IRQHandler+0x9c>)
 8000d52:	f000 ffb7 	bl	8001cc4 <HAL_GPIO_WritePin>
  ledVal = !ledVal;
 8000d56:	4b20      	ldr	r3, [pc, #128]	; (8000dd8 <USART1_IRQHandler+0x98>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	bf0c      	ite	eq
 8000d5e:	2301      	moveq	r3, #1
 8000d60:	2300      	movne	r3, #0
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	461a      	mov	r2, r3
 8000d66:	4b1c      	ldr	r3, [pc, #112]	; (8000dd8 <USART1_IRQHandler+0x98>)
 8000d68:	601a      	str	r2, [r3, #0]
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d6a:	481d      	ldr	r0, [pc, #116]	; (8000de0 <USART1_IRQHandler+0xa0>)
 8000d6c:	f001 fd74 	bl	8002858 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  volatile unsigned int IIR;
  IIR = USART1->SR;
 8000d70:	4b1c      	ldr	r3, [pc, #112]	; (8000de4 <USART1_IRQHandler+0xa4>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	603b      	str	r3, [r7, #0]
  if(IIR & UART_FLAG_RXNE){
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	f003 0320 	and.w	r3, r3, #32
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d009      	beq.n	8000d94 <USART1_IRQHandler+0x54>
  		//Read Data Register Not Empty
  		char t = USART1->DR; // the character from the USART1 data register is saved in t
 8000d80:	4b18      	ldr	r3, [pc, #96]	; (8000de4 <USART1_IRQHandler+0xa4>)
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	71fb      	strb	r3, [r7, #7]
  		put_in_rx_buffer(t,DBG_UART);
 8000d86:	4b18      	ldr	r3, [pc, #96]	; (8000de8 <USART1_IRQHandler+0xa8>)
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	4611      	mov	r1, r2
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f000 f93c 	bl	800100c <put_in_rx_buffer>
      }
  if(IIR & UART_FLAG_TXE){
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d018      	beq.n	8000dd0 <USART1_IRQHandler+0x90>
  		if(wr_pointer_dbg==rd_pointer_dbg){
 8000d9e:	4b13      	ldr	r3, [pc, #76]	; (8000dec <USART1_IRQHandler+0xac>)
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	4b13      	ldr	r3, [pc, #76]	; (8000df0 <USART1_IRQHandler+0xb0>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	429a      	cmp	r2, r3
 8000da8:	d108      	bne.n	8000dbc <USART1_IRQHandler+0x7c>
  			__HAL_UART_DISABLE_IT(&huart1, UART_IT_TXE); //whole message transmitted
 8000daa:	4b0d      	ldr	r3, [pc, #52]	; (8000de0 <USART1_IRQHandler+0xa0>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	68da      	ldr	r2, [r3, #12]
 8000db0:	4b0b      	ldr	r3, [pc, #44]	; (8000de0 <USART1_IRQHandler+0xa0>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000db8:	60da      	str	r2, [r3, #12]
  		}
  	}


  /* USER CODE END USART1_IRQn 1 */
}
 8000dba:	e009      	b.n	8000dd0 <USART1_IRQHandler+0x90>
  			DBG_UART->DR = get_from_tx_buffer(DBG_UART);
 8000dbc:	4b0a      	ldr	r3, [pc, #40]	; (8000de8 <USART1_IRQHandler+0xa8>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f000 f9c7 	bl	8001154 <get_from_tx_buffer>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	461a      	mov	r2, r3
 8000dca:	4b07      	ldr	r3, [pc, #28]	; (8000de8 <USART1_IRQHandler+0xa8>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	605a      	str	r2, [r3, #4]
}
 8000dd0:	bf00      	nop
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	20000094 	.word	0x20000094
 8000ddc:	40020400 	.word	0x40020400
 8000de0:	20000178 	.word	0x20000178
 8000de4:	40011000 	.word	0x40011000
 8000de8:	20000008 	.word	0x20000008
 8000dec:	200000a8 	.word	0x200000a8
 8000df0:	200000a4 	.word	0x200000a4

08000df4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000dfa:	481b      	ldr	r0, [pc, #108]	; (8000e68 <USART2_IRQHandler+0x74>)
 8000dfc:	f001 fd2c 	bl	8002858 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  volatile unsigned int IIR;
  	IIR=USART2->SR;
 8000e00:	4b1a      	ldr	r3, [pc, #104]	; (8000e6c <USART2_IRQHandler+0x78>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	603b      	str	r3, [r7, #0]
    if(IIR & UART_FLAG_RXNE){
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	f003 0320 	and.w	r3, r3, #32
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d009      	beq.n	8000e24 <USART2_IRQHandler+0x30>
  		// check if the USART6 receive interrupt flag was set
  		char t = USART2->DR; // the character from the USART1 data register is saved in t
 8000e10:	4b16      	ldr	r3, [pc, #88]	; (8000e6c <USART2_IRQHandler+0x78>)
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	71fb      	strb	r3, [r7, #7]
  		put_in_rx_buffer(t,RS485_UART);
 8000e16:	4b16      	ldr	r3, [pc, #88]	; (8000e70 <USART2_IRQHandler+0x7c>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	79fb      	ldrb	r3, [r7, #7]
 8000e1c:	4611      	mov	r1, r2
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f000 f8f4 	bl	800100c <put_in_rx_buffer>
      }
  	if(IIR & UART_FLAG_TXE){
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d017      	beq.n	8000e5e <USART2_IRQHandler+0x6a>
  		if(wr_pointer_rs485==rd_pointer_rs485){
 8000e2e:	4b11      	ldr	r3, [pc, #68]	; (8000e74 <USART2_IRQHandler+0x80>)
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	4b11      	ldr	r3, [pc, #68]	; (8000e78 <USART2_IRQHandler+0x84>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	429a      	cmp	r2, r3
 8000e38:	d108      	bne.n	8000e4c <USART2_IRQHandler+0x58>
  			__HAL_UART_DISABLE_IT(&huart2, UART_IT_TXE);
 8000e3a:	4b0b      	ldr	r3, [pc, #44]	; (8000e68 <USART2_IRQHandler+0x74>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	68da      	ldr	r2, [r3, #12]
 8000e40:	4b09      	ldr	r3, [pc, #36]	; (8000e68 <USART2_IRQHandler+0x74>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e48:	60da      	str	r2, [r3, #12]
  		else{
  			USART2->DR = get_from_tx_buffer(RS485_UART);
  		}
  	}
  /* USER CODE END USART2_IRQn 1 */
}
 8000e4a:	e008      	b.n	8000e5e <USART2_IRQHandler+0x6a>
  			USART2->DR = get_from_tx_buffer(RS485_UART);
 8000e4c:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <USART2_IRQHandler+0x7c>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4618      	mov	r0, r3
 8000e52:	f000 f97f 	bl	8001154 <get_from_tx_buffer>
 8000e56:	4603      	mov	r3, r0
 8000e58:	461a      	mov	r2, r3
 8000e5a:	4b04      	ldr	r3, [pc, #16]	; (8000e6c <USART2_IRQHandler+0x78>)
 8000e5c:	605a      	str	r2, [r3, #4]
}
 8000e5e:	bf00      	nop
 8000e60:	3708      	adds	r7, #8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	20000214 	.word	0x20000214
 8000e6c:	40004400 	.word	0x40004400
 8000e70:	20000004 	.word	0x20000004
 8000e74:	200000a0 	.word	0x200000a0
 8000e78:	2000009c 	.word	0x2000009c

08000e7c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b086      	sub	sp, #24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e88:	2300      	movs	r3, #0
 8000e8a:	617b      	str	r3, [r7, #20]
 8000e8c:	e00a      	b.n	8000ea4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e8e:	f3af 8000 	nop.w
 8000e92:	4601      	mov	r1, r0
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	1c5a      	adds	r2, r3, #1
 8000e98:	60ba      	str	r2, [r7, #8]
 8000e9a:	b2ca      	uxtb	r2, r1
 8000e9c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	617b      	str	r3, [r7, #20]
 8000ea4:	697a      	ldr	r2, [r7, #20]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	dbf0      	blt.n	8000e8e <_read+0x12>
	}

return len;
 8000eac:	687b      	ldr	r3, [r7, #4]
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3718      	adds	r7, #24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b086      	sub	sp, #24
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	60f8      	str	r0, [r7, #12]
 8000ebe:	60b9      	str	r1, [r7, #8]
 8000ec0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	617b      	str	r3, [r7, #20]
 8000ec6:	e009      	b.n	8000edc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	1c5a      	adds	r2, r3, #1
 8000ecc:	60ba      	str	r2, [r7, #8]
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f000 f889 	bl	8000fe8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	3301      	adds	r3, #1
 8000eda:	617b      	str	r3, [r7, #20]
 8000edc:	697a      	ldr	r2, [r7, #20]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	dbf1      	blt.n	8000ec8 <_write+0x12>
	}
	return len;
 8000ee4:	687b      	ldr	r3, [r7, #4]
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3718      	adds	r7, #24
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}

08000eee <_close>:

int _close(int file)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	b083      	sub	sp, #12
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
	return -1;
 8000ef6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr

08000f06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f06:	b480      	push	{r7}
 8000f08:	b083      	sub	sp, #12
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
 8000f0e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f16:	605a      	str	r2, [r3, #4]
	return 0;
 8000f18:	2300      	movs	r3, #0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	370c      	adds	r7, #12
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr

08000f26 <_isatty>:

int _isatty(int file)
{
 8000f26:	b480      	push	{r7}
 8000f28:	b083      	sub	sp, #12
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
	return 1;
 8000f2e:	2301      	movs	r3, #1
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	370c      	adds	r7, #12
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr

08000f3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b085      	sub	sp, #20
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
	return 0;
 8000f48:	2300      	movs	r3, #0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3714      	adds	r7, #20
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
	...

08000f58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b086      	sub	sp, #24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f60:	4a14      	ldr	r2, [pc, #80]	; (8000fb4 <_sbrk+0x5c>)
 8000f62:	4b15      	ldr	r3, [pc, #84]	; (8000fb8 <_sbrk+0x60>)
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f6c:	4b13      	ldr	r3, [pc, #76]	; (8000fbc <_sbrk+0x64>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d102      	bne.n	8000f7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f74:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <_sbrk+0x64>)
 8000f76:	4a12      	ldr	r2, [pc, #72]	; (8000fc0 <_sbrk+0x68>)
 8000f78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f7a:	4b10      	ldr	r3, [pc, #64]	; (8000fbc <_sbrk+0x64>)
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4413      	add	r3, r2
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	d207      	bcs.n	8000f98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f88:	f002 faee 	bl	8003568 <__errno>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	220c      	movs	r2, #12
 8000f90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f92:	f04f 33ff 	mov.w	r3, #4294967295
 8000f96:	e009      	b.n	8000fac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f98:	4b08      	ldr	r3, [pc, #32]	; (8000fbc <_sbrk+0x64>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f9e:	4b07      	ldr	r3, [pc, #28]	; (8000fbc <_sbrk+0x64>)
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	4a05      	ldr	r2, [pc, #20]	; (8000fbc <_sbrk+0x64>)
 8000fa8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000faa:	68fb      	ldr	r3, [r7, #12]
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3718      	adds	r7, #24
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20020000 	.word	0x20020000
 8000fb8:	00000400 	.word	0x00000400
 8000fbc:	20000098 	.word	0x20000098
 8000fc0:	20003ff8 	.word	0x20003ff8

08000fc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fc8:	4b06      	ldr	r3, [pc, #24]	; (8000fe4 <SystemInit+0x20>)
 8000fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fce:	4a05      	ldr	r2, [pc, #20]	; (8000fe4 <SystemInit+0x20>)
 8000fd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fd8:	bf00      	nop
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

//redirect printf to uart1.
PUTCHAR_PROTOTYPE{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 0xffff);
 8000ff0:	1d39      	adds	r1, r7, #4
 8000ff2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	4803      	ldr	r0, [pc, #12]	; (8001008 <__io_putchar+0x20>)
 8000ffa:	f001 fb9b 	bl	8002734 <HAL_UART_Transmit>
	return ch;
 8000ffe:	687b      	ldr	r3, [r7, #4]
}
 8001000:	4618      	mov	r0, r3
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	20000178 	.word	0x20000178

0800100c <put_in_rx_buffer>:

void put_in_rx_buffer(char data, USART_TypeDef* USARTx)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	6039      	str	r1, [r7, #0]
 8001016:	71fb      	strb	r3, [r7, #7]
	if(USARTx == DBG_UART)
 8001018:	4b1d      	ldr	r3, [pc, #116]	; (8001090 <put_in_rx_buffer+0x84>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	683a      	ldr	r2, [r7, #0]
 800101e:	429a      	cmp	r2, r3
 8001020:	d114      	bne.n	800104c <put_in_rx_buffer+0x40>
	{
		if(SIO_RBUFLEN_DBG>=LEN_RX_BUFFER_DBG)
 8001022:	4b1c      	ldr	r3, [pc, #112]	; (8001094 <put_in_rx_buffer+0x88>)
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	4b1c      	ldr	r3, [pc, #112]	; (8001098 <put_in_rx_buffer+0x8c>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	1ad3      	subs	r3, r2, r3
 800102c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001030:	d226      	bcs.n	8001080 <put_in_rx_buffer+0x74>
			{
				return;
			}
		rx_buffer_dbg[wr_pointer_rx_dbg & (LEN_RX_BUFFER_DBG - 1)]=data;
 8001032:	4b18      	ldr	r3, [pc, #96]	; (8001094 <put_in_rx_buffer+0x88>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800103a:	4918      	ldr	r1, [pc, #96]	; (800109c <put_in_rx_buffer+0x90>)
 800103c:	79fa      	ldrb	r2, [r7, #7]
 800103e:	54ca      	strb	r2, [r1, r3]
		wr_pointer_rx_dbg++;
 8001040:	4b14      	ldr	r3, [pc, #80]	; (8001094 <put_in_rx_buffer+0x88>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	3301      	adds	r3, #1
 8001046:	4a13      	ldr	r2, [pc, #76]	; (8001094 <put_in_rx_buffer+0x88>)
 8001048:	6013      	str	r3, [r2, #0]
 800104a:	e01c      	b.n	8001086 <put_in_rx_buffer+0x7a>
	}
	else if(USARTx == RS485_UART)
 800104c:	4b14      	ldr	r3, [pc, #80]	; (80010a0 <put_in_rx_buffer+0x94>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	683a      	ldr	r2, [r7, #0]
 8001052:	429a      	cmp	r2, r3
 8001054:	d117      	bne.n	8001086 <put_in_rx_buffer+0x7a>
	{
		if(SIO_RBUFLEN_RS485>=LEN_RX_BUFFER_RS485)
 8001056:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <put_in_rx_buffer+0x98>)
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	4b13      	ldr	r3, [pc, #76]	; (80010a8 <put_in_rx_buffer+0x9c>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	1ad3      	subs	r3, r2, r3
 8001060:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001064:	d20e      	bcs.n	8001084 <put_in_rx_buffer+0x78>
			{
				return;
			}
		rx_buffer_rs485[wr_pointer_rx_rs485 & (LEN_RX_BUFFER_RS485 - 1)]=data;
 8001066:	4b0f      	ldr	r3, [pc, #60]	; (80010a4 <put_in_rx_buffer+0x98>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800106e:	490f      	ldr	r1, [pc, #60]	; (80010ac <put_in_rx_buffer+0xa0>)
 8001070:	79fa      	ldrb	r2, [r7, #7]
 8001072:	54ca      	strb	r2, [r1, r3]
		wr_pointer_rx_rs485++;
 8001074:	4b0b      	ldr	r3, [pc, #44]	; (80010a4 <put_in_rx_buffer+0x98>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	3301      	adds	r3, #1
 800107a:	4a0a      	ldr	r2, [pc, #40]	; (80010a4 <put_in_rx_buffer+0x98>)
 800107c:	6013      	str	r3, [r2, #0]
 800107e:	e002      	b.n	8001086 <put_in_rx_buffer+0x7a>
				return;
 8001080:	bf00      	nop
 8001082:	e000      	b.n	8001086 <put_in_rx_buffer+0x7a>
				return;
 8001084:	bf00      	nop
	}
}
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	20000008 	.word	0x20000008
 8001094:	200000b8 	.word	0x200000b8
 8001098:	200000b4 	.word	0x200000b4
 800109c:	20001b60 	.word	0x20001b60
 80010a0:	20000004 	.word	0x20000004
 80010a4:	200000b0 	.word	0x200000b0
 80010a8:	200000ac 	.word	0x200000ac
 80010ac:	20000358 	.word	0x20000358

080010b0 <put_in_tx_buffer>:

void put_in_tx_buffer(char data, USART_TypeDef* USARTx)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	6039      	str	r1, [r7, #0]
 80010ba:	71fb      	strb	r3, [r7, #7]
	if(USARTx == RS485_UART)
 80010bc:	4b1d      	ldr	r3, [pc, #116]	; (8001134 <put_in_tx_buffer+0x84>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	683a      	ldr	r2, [r7, #0]
 80010c2:	429a      	cmp	r2, r3
 80010c4:	d114      	bne.n	80010f0 <put_in_tx_buffer+0x40>
	{
		if(SIO_TBUFLEN_RS485>=LEN_TX_BUFFER_RS485)
 80010c6:	4b1c      	ldr	r3, [pc, #112]	; (8001138 <put_in_tx_buffer+0x88>)
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	4b1c      	ldr	r3, [pc, #112]	; (800113c <put_in_tx_buffer+0x8c>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	1ad3      	subs	r3, r2, r3
 80010d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010d4:	d227      	bcs.n	8001126 <put_in_tx_buffer+0x76>
			{
				return;
			}
		tx_buffer_rs485[wr_pointer_rs485 & (LEN_TX_BUFFER_RS485 - 1)]=data;
 80010d6:	4b18      	ldr	r3, [pc, #96]	; (8001138 <put_in_tx_buffer+0x88>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80010de:	4918      	ldr	r1, [pc, #96]	; (8001140 <put_in_tx_buffer+0x90>)
 80010e0:	79fa      	ldrb	r2, [r7, #7]
 80010e2:	54ca      	strb	r2, [r1, r3]
		wr_pointer_rs485++;
 80010e4:	4b14      	ldr	r3, [pc, #80]	; (8001138 <put_in_tx_buffer+0x88>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	3301      	adds	r3, #1
 80010ea:	4a13      	ldr	r2, [pc, #76]	; (8001138 <put_in_tx_buffer+0x88>)
 80010ec:	6013      	str	r3, [r2, #0]
 80010ee:	e01b      	b.n	8001128 <put_in_tx_buffer+0x78>
	}
	else if(USARTx == DBG_UART)
 80010f0:	4b14      	ldr	r3, [pc, #80]	; (8001144 <put_in_tx_buffer+0x94>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	683a      	ldr	r2, [r7, #0]
 80010f6:	429a      	cmp	r2, r3
 80010f8:	d116      	bne.n	8001128 <put_in_tx_buffer+0x78>
	{
		while(SIO_TBUFLEN_DBG>=LEN_TX_BUFFER_DBG)
 80010fa:	bf00      	nop
 80010fc:	4b12      	ldr	r3, [pc, #72]	; (8001148 <put_in_tx_buffer+0x98>)
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	4b12      	ldr	r3, [pc, #72]	; (800114c <put_in_tx_buffer+0x9c>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800110a:	d2f7      	bcs.n	80010fc <put_in_tx_buffer+0x4c>
			{
				//return;
			}
		tx_buffer_dbg[wr_pointer_dbg & (LEN_TX_BUFFER_DBG - 1)]=data;
 800110c:	4b0e      	ldr	r3, [pc, #56]	; (8001148 <put_in_tx_buffer+0x98>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001114:	490e      	ldr	r1, [pc, #56]	; (8001150 <put_in_tx_buffer+0xa0>)
 8001116:	79fa      	ldrb	r2, [r7, #7]
 8001118:	54ca      	strb	r2, [r1, r3]
		wr_pointer_dbg++;
 800111a:	4b0b      	ldr	r3, [pc, #44]	; (8001148 <put_in_tx_buffer+0x98>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	3301      	adds	r3, #1
 8001120:	4a09      	ldr	r2, [pc, #36]	; (8001148 <put_in_tx_buffer+0x98>)
 8001122:	6013      	str	r3, [r2, #0]
 8001124:	e000      	b.n	8001128 <put_in_tx_buffer+0x78>
				return;
 8001126:	bf00      	nop
	}
}
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	20000004 	.word	0x20000004
 8001138:	200000a0 	.word	0x200000a0
 800113c:	2000009c 	.word	0x2000009c
 8001140:	20000758 	.word	0x20000758
 8001144:	20000008 	.word	0x20000008
 8001148:	200000a8 	.word	0x200000a8
 800114c:	200000a4 	.word	0x200000a4
 8001150:	20003b60 	.word	0x20003b60

08001154 <get_from_tx_buffer>:
char get_from_tx_buffer(USART_TypeDef* USARTx)
{
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
	char data;

	if(USARTx == RS485_UART)
 800115c:	4b14      	ldr	r3, [pc, #80]	; (80011b0 <get_from_tx_buffer+0x5c>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	687a      	ldr	r2, [r7, #4]
 8001162:	429a      	cmp	r2, r3
 8001164:	d10c      	bne.n	8001180 <get_from_tx_buffer+0x2c>
	{

		data=tx_buffer_rs485[rd_pointer_rs485 & (LEN_TX_BUFFER_RS485-1)];
 8001166:	4b13      	ldr	r3, [pc, #76]	; (80011b4 <get_from_tx_buffer+0x60>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800116e:	4a12      	ldr	r2, [pc, #72]	; (80011b8 <get_from_tx_buffer+0x64>)
 8001170:	5cd3      	ldrb	r3, [r2, r3]
 8001172:	73fb      	strb	r3, [r7, #15]
		rd_pointer_rs485++;
 8001174:	4b0f      	ldr	r3, [pc, #60]	; (80011b4 <get_from_tx_buffer+0x60>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	3301      	adds	r3, #1
 800117a:	4a0e      	ldr	r2, [pc, #56]	; (80011b4 <get_from_tx_buffer+0x60>)
 800117c:	6013      	str	r3, [r2, #0]
 800117e:	e010      	b.n	80011a2 <get_from_tx_buffer+0x4e>
	}
	else if(USARTx == DBG_UART)
 8001180:	4b0e      	ldr	r3, [pc, #56]	; (80011bc <get_from_tx_buffer+0x68>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	687a      	ldr	r2, [r7, #4]
 8001186:	429a      	cmp	r2, r3
 8001188:	d10b      	bne.n	80011a2 <get_from_tx_buffer+0x4e>
	{

		data=tx_buffer_dbg[rd_pointer_dbg & (LEN_TX_BUFFER_DBG-1)];
 800118a:	4b0d      	ldr	r3, [pc, #52]	; (80011c0 <get_from_tx_buffer+0x6c>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001192:	4a0c      	ldr	r2, [pc, #48]	; (80011c4 <get_from_tx_buffer+0x70>)
 8001194:	5cd3      	ldrb	r3, [r2, r3]
 8001196:	73fb      	strb	r3, [r7, #15]
		rd_pointer_dbg++;
 8001198:	4b09      	ldr	r3, [pc, #36]	; (80011c0 <get_from_tx_buffer+0x6c>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	3301      	adds	r3, #1
 800119e:	4a08      	ldr	r2, [pc, #32]	; (80011c0 <get_from_tx_buffer+0x6c>)
 80011a0:	6013      	str	r3, [r2, #0]
	}
	return data;
 80011a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3714      	adds	r7, #20
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr
 80011b0:	20000004 	.word	0x20000004
 80011b4:	2000009c 	.word	0x2000009c
 80011b8:	20000758 	.word	0x20000758
 80011bc:	20000008 	.word	0x20000008
 80011c0:	200000a4 	.word	0x200000a4
 80011c4:	20003b60 	.word	0x20003b60

080011c8 <get_from_rx_buffer>:
char get_from_rx_buffer(USART_TypeDef* USARTx)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
	char data;

	if(USARTx == RS485_UART)
 80011d0:	4b14      	ldr	r3, [pc, #80]	; (8001224 <get_from_rx_buffer+0x5c>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	687a      	ldr	r2, [r7, #4]
 80011d6:	429a      	cmp	r2, r3
 80011d8:	d10c      	bne.n	80011f4 <get_from_rx_buffer+0x2c>
	{

		data=rx_buffer_rs485[rd_pointer_rx_rs485 & (LEN_RX_BUFFER_RS485-1)];
 80011da:	4b13      	ldr	r3, [pc, #76]	; (8001228 <get_from_rx_buffer+0x60>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80011e2:	4a12      	ldr	r2, [pc, #72]	; (800122c <get_from_rx_buffer+0x64>)
 80011e4:	5cd3      	ldrb	r3, [r2, r3]
 80011e6:	73fb      	strb	r3, [r7, #15]
		rd_pointer_rx_rs485++;
 80011e8:	4b0f      	ldr	r3, [pc, #60]	; (8001228 <get_from_rx_buffer+0x60>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	3301      	adds	r3, #1
 80011ee:	4a0e      	ldr	r2, [pc, #56]	; (8001228 <get_from_rx_buffer+0x60>)
 80011f0:	6013      	str	r3, [r2, #0]
 80011f2:	e010      	b.n	8001216 <get_from_rx_buffer+0x4e>
	}
	else if(USARTx == DBG_UART)
 80011f4:	4b0e      	ldr	r3, [pc, #56]	; (8001230 <get_from_rx_buffer+0x68>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	687a      	ldr	r2, [r7, #4]
 80011fa:	429a      	cmp	r2, r3
 80011fc:	d10b      	bne.n	8001216 <get_from_rx_buffer+0x4e>
	{

		data=rx_buffer_dbg[rd_pointer_rx_dbg & (LEN_RX_BUFFER_DBG-1)];
 80011fe:	4b0d      	ldr	r3, [pc, #52]	; (8001234 <get_from_rx_buffer+0x6c>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001206:	4a0c      	ldr	r2, [pc, #48]	; (8001238 <get_from_rx_buffer+0x70>)
 8001208:	5cd3      	ldrb	r3, [r2, r3]
 800120a:	73fb      	strb	r3, [r7, #15]
		rd_pointer_rx_dbg++;
 800120c:	4b09      	ldr	r3, [pc, #36]	; (8001234 <get_from_rx_buffer+0x6c>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	3301      	adds	r3, #1
 8001212:	4a08      	ldr	r2, [pc, #32]	; (8001234 <get_from_rx_buffer+0x6c>)
 8001214:	6013      	str	r3, [r2, #0]
	}
	return data;
 8001216:	7bfb      	ldrb	r3, [r7, #15]
}
 8001218:	4618      	mov	r0, r3
 800121a:	3714      	adds	r7, #20
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	20000004 	.word	0x20000004
 8001228:	200000ac 	.word	0x200000ac
 800122c:	20000358 	.word	0x20000358
 8001230:	20000008 	.word	0x20000008
 8001234:	200000b4 	.word	0x200000b4
 8001238:	20001b60 	.word	0x20001b60

0800123c <usart_message_ready>:

	return 0;
}
//**************************************************************************************
char usart_message_ready(USART_TypeDef* USARTx, char delimiter)
{
 800123c:	b480      	push	{r7}
 800123e:	b085      	sub	sp, #20
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	460b      	mov	r3, r1
 8001246:	70fb      	strb	r3, [r7, #3]
	if (USARTx == DBG_UART)
 8001248:	4b1f      	ldr	r3, [pc, #124]	; (80012c8 <usart_message_ready+0x8c>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	687a      	ldr	r2, [r7, #4]
 800124e:	429a      	cmp	r2, r3
 8001250:	d117      	bne.n	8001282 <usart_message_ready+0x46>
	{
		unsigned long tail = rd_pointer_rx_dbg;
 8001252:	4b1e      	ldr	r3, [pc, #120]	; (80012cc <usart_message_ready+0x90>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	60fb      	str	r3, [r7, #12]

		while ((wr_pointer_rx_dbg - tail) != 0)
 8001258:	e00d      	b.n	8001276 <usart_message_ready+0x3a>
		{
			if (rx_buffer_dbg[tail & (LEN_RX_BUFFER_DBG - 1)] == delimiter)
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001260:	4a1b      	ldr	r2, [pc, #108]	; (80012d0 <usart_message_ready+0x94>)
 8001262:	5cd3      	ldrb	r3, [r2, r3]
 8001264:	b2db      	uxtb	r3, r3
 8001266:	78fa      	ldrb	r2, [r7, #3]
 8001268:	429a      	cmp	r2, r3
 800126a:	d101      	bne.n	8001270 <usart_message_ready+0x34>
				return 1;
 800126c:	2301      	movs	r3, #1
 800126e:	e025      	b.n	80012bc <usart_message_ready+0x80>
			++tail;
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	3301      	adds	r3, #1
 8001274:	60fb      	str	r3, [r7, #12]
		while ((wr_pointer_rx_dbg - tail) != 0)
 8001276:	4b17      	ldr	r3, [pc, #92]	; (80012d4 <usart_message_ready+0x98>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	68fa      	ldr	r2, [r7, #12]
 800127c:	429a      	cmp	r2, r3
 800127e:	d1ec      	bne.n	800125a <usart_message_ready+0x1e>
 8001280:	e01b      	b.n	80012ba <usart_message_ready+0x7e>
		}
	}
	else if (USARTx == RS485_UART)
 8001282:	4b15      	ldr	r3, [pc, #84]	; (80012d8 <usart_message_ready+0x9c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	429a      	cmp	r2, r3
 800128a:	d116      	bne.n	80012ba <usart_message_ready+0x7e>
	{
		unsigned long tail = rd_pointer_rx_rs485;
 800128c:	4b13      	ldr	r3, [pc, #76]	; (80012dc <usart_message_ready+0xa0>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	60bb      	str	r3, [r7, #8]

		while ((wr_pointer_rx_rs485 - tail) != 0)
 8001292:	e00d      	b.n	80012b0 <usart_message_ready+0x74>
		{
			if (rx_buffer_rs485[tail & (LEN_RX_BUFFER_RS485 - 1)] == delimiter)
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800129a:	4a11      	ldr	r2, [pc, #68]	; (80012e0 <usart_message_ready+0xa4>)
 800129c:	5cd3      	ldrb	r3, [r2, r3]
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	78fa      	ldrb	r2, [r7, #3]
 80012a2:	429a      	cmp	r2, r3
 80012a4:	d101      	bne.n	80012aa <usart_message_ready+0x6e>
				return 1;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e008      	b.n	80012bc <usart_message_ready+0x80>
			++tail;
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	3301      	adds	r3, #1
 80012ae:	60bb      	str	r3, [r7, #8]
		while ((wr_pointer_rx_rs485 - tail) != 0)
 80012b0:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <usart_message_ready+0xa8>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	68ba      	ldr	r2, [r7, #8]
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d1ec      	bne.n	8001294 <usart_message_ready+0x58>
		}
	}
	return 0;
 80012ba:	2300      	movs	r3, #0
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3714      	adds	r7, #20
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	20000008 	.word	0x20000008
 80012cc:	200000b4 	.word	0x200000b4
 80012d0:	20001b60 	.word	0x20001b60
 80012d4:	200000b8 	.word	0x200000b8
 80012d8:	20000004 	.word	0x20000004
 80012dc:	200000ac 	.word	0x200000ac
 80012e0:	20000358 	.word	0x20000358
 80012e4:	200000b0 	.word	0x200000b0

080012e8 <read_usart_message>:
/*
 * Reads message from specified uart rx buffer into @dst until @delimiter character is encountered or @max_len exceeded.
 * Returns: number of characters read if successful, zero when there is no message ready to be read.
 */
unsigned int read_usart_message(char* dst, UART_HandleTypeDef* huart, int max_len, char delimiter)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b086      	sub	sp, #24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	607a      	str	r2, [r7, #4]
 80012f4:	70fb      	strb	r3, [r7, #3]
	USART_TypeDef* USARTx = huart->Instance;
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	613b      	str	r3, [r7, #16]
	if (usart_message_ready(USARTx,delimiter))
 80012fc:	78fb      	ldrb	r3, [r7, #3]
 80012fe:	4619      	mov	r1, r3
 8001300:	6938      	ldr	r0, [r7, #16]
 8001302:	f7ff ff9b 	bl	800123c <usart_message_ready>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d018      	beq.n	800133e <read_usart_message+0x56>
	{
		int nr = 0;
 800130c:	2300      	movs	r3, #0
 800130e:	617b      	str	r3, [r7, #20]
		do
		{
			*dst = get_from_rx_buffer(USARTx);
 8001310:	6938      	ldr	r0, [r7, #16]
 8001312:	f7ff ff59 	bl	80011c8 <get_from_rx_buffer>
 8001316:	4603      	mov	r3, r0
 8001318:	461a      	mov	r2, r3
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	701a      	strb	r2, [r3, #0]
			++nr;
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	3301      	adds	r3, #1
 8001322:	617b      	str	r3, [r7, #20]
		} while (*dst++ != delimiter && nr < max_len);
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	1c5a      	adds	r2, r3, #1
 8001328:	60fa      	str	r2, [r7, #12]
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	78fa      	ldrb	r2, [r7, #3]
 800132e:	429a      	cmp	r2, r3
 8001330:	d003      	beq.n	800133a <read_usart_message+0x52>
 8001332:	697a      	ldr	r2, [r7, #20]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	429a      	cmp	r2, r3
 8001338:	dbea      	blt.n	8001310 <read_usart_message+0x28>

		return nr;
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	e000      	b.n	8001340 <read_usart_message+0x58>
	}
	return 0;
 800133e:	2300      	movs	r3, #0
}
 8001340:	4618      	mov	r0, r3
 8001342:	3718      	adds	r7, #24
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}

08001348 <send_usart_message>:
/*
 * Sends @size bytes from @src via specified uart. Nonblocking.
 * Returns: 0 when operation fails due to another message being transmitted, number of bytes written to uart buffer otherwise.
 */

unsigned int send_usart_message(char* src, UART_HandleTypeDef* huart, int size){
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	607a      	str	r2, [r7, #4]
	USART_TypeDef* USARTx = huart->Instance;
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	613b      	str	r3, [r7, #16]
	if (USARTx == DBG_UART){
 800135a:	4b21      	ldr	r3, [pc, #132]	; (80013e0 <send_usart_message+0x98>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	429a      	cmp	r2, r3
 8001362:	d107      	bne.n	8001374 <send_usart_message+0x2c>
		if(wr_pointer_dbg!=rd_pointer_dbg){
 8001364:	4b1f      	ldr	r3, [pc, #124]	; (80013e4 <send_usart_message+0x9c>)
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	4b1f      	ldr	r3, [pc, #124]	; (80013e8 <send_usart_message+0xa0>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	429a      	cmp	r2, r3
 800136e:	d00e      	beq.n	800138e <send_usart_message+0x46>
			return 0;//another message is in progress.
 8001370:	2300      	movs	r3, #0
 8001372:	e030      	b.n	80013d6 <send_usart_message+0x8e>
		}

	}
	else if (USARTx == RS485_UART){
 8001374:	4b1d      	ldr	r3, [pc, #116]	; (80013ec <send_usart_message+0xa4>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	693a      	ldr	r2, [r7, #16]
 800137a:	429a      	cmp	r2, r3
 800137c:	d107      	bne.n	800138e <send_usart_message+0x46>
		if(wr_pointer_rs485!=rd_pointer_rs485){
 800137e:	4b1c      	ldr	r3, [pc, #112]	; (80013f0 <send_usart_message+0xa8>)
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	4b1c      	ldr	r3, [pc, #112]	; (80013f4 <send_usart_message+0xac>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	429a      	cmp	r2, r3
 8001388:	d001      	beq.n	800138e <send_usart_message+0x46>
			return 0;//another message is in progress.
 800138a:	2300      	movs	r3, #0
 800138c:	e023      	b.n	80013d6 <send_usart_message+0x8e>
		}
	}

	int nr = 0;
 800138e:	2300      	movs	r3, #0
 8001390:	617b      	str	r3, [r7, #20]
	do{
		put_in_tx_buffer(*(src + nr), USARTx);
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	68fa      	ldr	r2, [r7, #12]
 8001396:	4413      	add	r3, r2
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	6939      	ldr	r1, [r7, #16]
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff fe87 	bl	80010b0 <put_in_tx_buffer>
		nr++;
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	3301      	adds	r3, #1
 80013a6:	617b      	str	r3, [r7, #20]
	} while (nr < size);
 80013a8:	697a      	ldr	r2, [r7, #20]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	dbf0      	blt.n	8001392 <send_usart_message+0x4a>

	if(nr>0){
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	dd0e      	ble.n	80013d4 <send_usart_message+0x8c>
		USARTx->DR = get_from_tx_buffer(USARTx);
 80013b6:	6938      	ldr	r0, [r7, #16]
 80013b8:	f7ff fecc 	bl	8001154 <get_from_tx_buffer>
 80013bc:	4603      	mov	r3, r0
 80013be:	461a      	mov	r2, r3
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	605a      	str	r2, [r3, #4]
		__HAL_UART_ENABLE_IT(huart, UART_IT_TXE); //turn on tx interrupt forever (until turned off in IRQ handler)
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	68da      	ldr	r2, [r3, #12]
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80013d2:	60da      	str	r2, [r3, #12]
	}
	return nr;
 80013d4:	697b      	ldr	r3, [r7, #20]
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3718      	adds	r7, #24
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	20000008 	.word	0x20000008
 80013e4:	200000a8 	.word	0x200000a8
 80013e8:	200000a4 	.word	0x200000a4
 80013ec:	20000004 	.word	0x20000004
 80013f0:	200000a0 	.word	0x200000a0
 80013f4:	2000009c 	.word	0x2000009c

080013f8 <uartDemoLoop>:
#include <stm32f4xx_hal.h>
#include <string.h>



void uartDemoLoop(){
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b0d4      	sub	sp, #336	; 0x150
 80013fc:	af00      	add	r7, sp, #0

	static int firstFlag = 0;

	if(firstFlag == 0){
 80013fe:	4b29      	ldr	r3, [pc, #164]	; (80014a4 <uartDemoLoop+0xac>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d105      	bne.n	8001412 <uartDemoLoop+0x1a>
		firstFlag = 1;
 8001406:	4b27      	ldr	r3, [pc, #156]	; (80014a4 <uartDemoLoop+0xac>)
 8001408:	2201      	movs	r2, #1
 800140a:	601a      	str	r2, [r3, #0]
		printf("[UART demo] Send a string over debug uart and terminate it by ENTER (ascii 13).\r\n");
 800140c:	4826      	ldr	r0, [pc, #152]	; (80014a8 <uartDemoLoop+0xb0>)
 800140e:	f002 f963 	bl	80036d8 <puts>
	}

	char delimiter = 13;
 8001412:	230d      	movs	r3, #13
 8001414:	f887 314f 	strb.w	r3, [r7, #335]	; 0x14f
	char msg[64];

	int count = read_usart_message(msg, &huart1, sizeof(msg), delimiter);
 8001418:	f897 314f 	ldrb.w	r3, [r7, #335]	; 0x14f
 800141c:	f507 7082 	add.w	r0, r7, #260	; 0x104
 8001420:	2240      	movs	r2, #64	; 0x40
 8001422:	4922      	ldr	r1, [pc, #136]	; (80014ac <uartDemoLoop+0xb4>)
 8001424:	f7ff ff60 	bl	80012e8 <read_usart_message>
 8001428:	4603      	mov	r3, r0
 800142a:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148

	if(count == 0){
 800142e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8001432:	2b00      	cmp	r3, #0
 8001434:	d103      	bne.n	800143e <uartDemoLoop+0x46>
		//While reading buffer of received chars, delimiter char was not encountered.
		printf("[UART demo] message not yet ready.\r\n");
 8001436:	481e      	ldr	r0, [pc, #120]	; (80014b0 <uartDemoLoop+0xb8>)
 8001438:	f002 f94e 	bl	80036d8 <puts>
 800143c:	e02e      	b.n	800149c <uartDemoLoop+0xa4>
		return;
	}

	printf("[UART demo] message ready!\r\n");
 800143e:	481d      	ldr	r0, [pc, #116]	; (80014b4 <uartDemoLoop+0xbc>)
 8001440:	f002 f94a 	bl	80036d8 <puts>

	msg[count-1] = 0; //null terminate received string
 8001444:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8001448:	3b01      	subs	r3, #1
 800144a:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 800144e:	4413      	add	r3, r2
 8001450:	2200      	movs	r2, #0
 8001452:	f803 2c4c 	strb.w	r2, [r3, #-76]

	char reply[256];

	sprintf(reply, " Sending this as a buffer instead of printf just for demonstration. \n\r The message I got was \"%s\". \n\r", msg);
 8001456:	f507 7282 	add.w	r2, r7, #260	; 0x104
 800145a:	1d3b      	adds	r3, r7, #4
 800145c:	4916      	ldr	r1, [pc, #88]	; (80014b8 <uartDemoLoop+0xc0>)
 800145e:	4618      	mov	r0, r3
 8001460:	f002 f942 	bl	80036e8 <siprintf>

	int ret = send_usart_message(reply, &huart1, strlen(reply));
 8001464:	1d3b      	adds	r3, r7, #4
 8001466:	4618      	mov	r0, r3
 8001468:	f7fe feb2 	bl	80001d0 <strlen>
 800146c:	4603      	mov	r3, r0
 800146e:	461a      	mov	r2, r3
 8001470:	1d3b      	adds	r3, r7, #4
 8001472:	490e      	ldr	r1, [pc, #56]	; (80014ac <uartDemoLoop+0xb4>)
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff ff67 	bl	8001348 <send_usart_message>
 800147a:	4603      	mov	r3, r0
 800147c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144

	if(ret == 0){
 8001480:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001484:	2b00      	cmp	r3, #0
 8001486:	d102      	bne.n	800148e <uartDemoLoop+0x96>
		printf("[UART demo] Fail: Cannot transmit now, another transmission in progress.\n\r");
 8001488:	480c      	ldr	r0, [pc, #48]	; (80014bc <uartDemoLoop+0xc4>)
 800148a:	f002 f89f 	bl	80035cc <iprintf>
	}

	HAL_Delay(500); //sleep for a bit so that next printf does not interfere with send_uart_message();
 800148e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001492:	f000 f8b3 	bl	80015fc <HAL_Delay>

	printf("[UART demo] Success.\n\r");
 8001496:	480a      	ldr	r0, [pc, #40]	; (80014c0 <uartDemoLoop+0xc8>)
 8001498:	f002 f898 	bl	80035cc <iprintf>

}
 800149c:	f507 77a8 	add.w	r7, r7, #336	; 0x150
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	200000bc 	.word	0x200000bc
 80014a8:	08004958 	.word	0x08004958
 80014ac:	20000178 	.word	0x20000178
 80014b0:	080049ac 	.word	0x080049ac
 80014b4:	080049d0 	.word	0x080049d0
 80014b8:	080049ec 	.word	0x080049ec
 80014bc:	08004a54 	.word	0x08004a54
 80014c0:	08004aa0 	.word	0x08004aa0

080014c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80014c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014c8:	480d      	ldr	r0, [pc, #52]	; (8001500 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014ca:	490e      	ldr	r1, [pc, #56]	; (8001504 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014cc:	4a0e      	ldr	r2, [pc, #56]	; (8001508 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014d0:	e002      	b.n	80014d8 <LoopCopyDataInit>

080014d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014d6:	3304      	adds	r3, #4

080014d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014dc:	d3f9      	bcc.n	80014d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014de:	4a0b      	ldr	r2, [pc, #44]	; (800150c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014e0:	4c0b      	ldr	r4, [pc, #44]	; (8001510 <LoopFillZerobss+0x26>)
  movs r3, #0
 80014e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014e4:	e001      	b.n	80014ea <LoopFillZerobss>

080014e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014e8:	3204      	adds	r2, #4

080014ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014ec:	d3fb      	bcc.n	80014e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80014ee:	f7ff fd69 	bl	8000fc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014f2:	f002 f83f 	bl	8003574 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014f6:	f7ff f83f 	bl	8000578 <main>
  bx  lr    
 80014fa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80014fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001500:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001504:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001508:	08004b78 	.word	0x08004b78
  ldr r2, =_sbss
 800150c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001510:	20003ff4 	.word	0x20003ff4

08001514 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001514:	e7fe      	b.n	8001514 <ADC_IRQHandler>
	...

08001518 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800151c:	4b0e      	ldr	r3, [pc, #56]	; (8001558 <HAL_Init+0x40>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a0d      	ldr	r2, [pc, #52]	; (8001558 <HAL_Init+0x40>)
 8001522:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001526:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001528:	4b0b      	ldr	r3, [pc, #44]	; (8001558 <HAL_Init+0x40>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a0a      	ldr	r2, [pc, #40]	; (8001558 <HAL_Init+0x40>)
 800152e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001532:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001534:	4b08      	ldr	r3, [pc, #32]	; (8001558 <HAL_Init+0x40>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a07      	ldr	r2, [pc, #28]	; (8001558 <HAL_Init+0x40>)
 800153a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800153e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001540:	2003      	movs	r0, #3
 8001542:	f000 f94f 	bl	80017e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001546:	2000      	movs	r0, #0
 8001548:	f000 f808 	bl	800155c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800154c:	f7ff fa46 	bl	80009dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40023c00 	.word	0x40023c00

0800155c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001564:	4b12      	ldr	r3, [pc, #72]	; (80015b0 <HAL_InitTick+0x54>)
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	4b12      	ldr	r3, [pc, #72]	; (80015b4 <HAL_InitTick+0x58>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	4619      	mov	r1, r3
 800156e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001572:	fbb3 f3f1 	udiv	r3, r3, r1
 8001576:	fbb2 f3f3 	udiv	r3, r2, r3
 800157a:	4618      	mov	r0, r3
 800157c:	f000 f967 	bl	800184e <HAL_SYSTICK_Config>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e00e      	b.n	80015a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2b0f      	cmp	r3, #15
 800158e:	d80a      	bhi.n	80015a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001590:	2200      	movs	r2, #0
 8001592:	6879      	ldr	r1, [r7, #4]
 8001594:	f04f 30ff 	mov.w	r0, #4294967295
 8001598:	f000 f92f 	bl	80017fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800159c:	4a06      	ldr	r2, [pc, #24]	; (80015b8 <HAL_InitTick+0x5c>)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015a2:	2300      	movs	r3, #0
 80015a4:	e000      	b.n	80015a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3708      	adds	r7, #8
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	20000000 	.word	0x20000000
 80015b4:	20000010 	.word	0x20000010
 80015b8:	2000000c 	.word	0x2000000c

080015bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015c0:	4b06      	ldr	r3, [pc, #24]	; (80015dc <HAL_IncTick+0x20>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	461a      	mov	r2, r3
 80015c6:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <HAL_IncTick+0x24>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4413      	add	r3, r2
 80015cc:	4a04      	ldr	r2, [pc, #16]	; (80015e0 <HAL_IncTick+0x24>)
 80015ce:	6013      	str	r3, [r2, #0]
}
 80015d0:	bf00      	nop
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	20000010 	.word	0x20000010
 80015e0:	20003fe0 	.word	0x20003fe0

080015e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  return uwTick;
 80015e8:	4b03      	ldr	r3, [pc, #12]	; (80015f8 <HAL_GetTick+0x14>)
 80015ea:	681b      	ldr	r3, [r3, #0]
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	20003fe0 	.word	0x20003fe0

080015fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001604:	f7ff ffee 	bl	80015e4 <HAL_GetTick>
 8001608:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001614:	d005      	beq.n	8001622 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001616:	4b0a      	ldr	r3, [pc, #40]	; (8001640 <HAL_Delay+0x44>)
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	461a      	mov	r2, r3
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	4413      	add	r3, r2
 8001620:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001622:	bf00      	nop
 8001624:	f7ff ffde 	bl	80015e4 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	68fa      	ldr	r2, [r7, #12]
 8001630:	429a      	cmp	r2, r3
 8001632:	d8f7      	bhi.n	8001624 <HAL_Delay+0x28>
  {
  }
}
 8001634:	bf00      	nop
 8001636:	bf00      	nop
 8001638:	3710      	adds	r7, #16
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	20000010 	.word	0x20000010

08001644 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001644:	b480      	push	{r7}
 8001646:	b085      	sub	sp, #20
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f003 0307 	and.w	r3, r3, #7
 8001652:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001654:	4b0c      	ldr	r3, [pc, #48]	; (8001688 <__NVIC_SetPriorityGrouping+0x44>)
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800165a:	68ba      	ldr	r2, [r7, #8]
 800165c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001660:	4013      	ands	r3, r2
 8001662:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800166c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001670:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001674:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001676:	4a04      	ldr	r2, [pc, #16]	; (8001688 <__NVIC_SetPriorityGrouping+0x44>)
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	60d3      	str	r3, [r2, #12]
}
 800167c:	bf00      	nop
 800167e:	3714      	adds	r7, #20
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr
 8001688:	e000ed00 	.word	0xe000ed00

0800168c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001690:	4b04      	ldr	r3, [pc, #16]	; (80016a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	0a1b      	lsrs	r3, r3, #8
 8001696:	f003 0307 	and.w	r3, r3, #7
}
 800169a:	4618      	mov	r0, r3
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr
 80016a4:	e000ed00 	.word	0xe000ed00

080016a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	4603      	mov	r3, r0
 80016b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	db0b      	blt.n	80016d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016ba:	79fb      	ldrb	r3, [r7, #7]
 80016bc:	f003 021f 	and.w	r2, r3, #31
 80016c0:	4907      	ldr	r1, [pc, #28]	; (80016e0 <__NVIC_EnableIRQ+0x38>)
 80016c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c6:	095b      	lsrs	r3, r3, #5
 80016c8:	2001      	movs	r0, #1
 80016ca:	fa00 f202 	lsl.w	r2, r0, r2
 80016ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016d2:	bf00      	nop
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	e000e100 	.word	0xe000e100

080016e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	4603      	mov	r3, r0
 80016ec:	6039      	str	r1, [r7, #0]
 80016ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	db0a      	blt.n	800170e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	b2da      	uxtb	r2, r3
 80016fc:	490c      	ldr	r1, [pc, #48]	; (8001730 <__NVIC_SetPriority+0x4c>)
 80016fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001702:	0112      	lsls	r2, r2, #4
 8001704:	b2d2      	uxtb	r2, r2
 8001706:	440b      	add	r3, r1
 8001708:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800170c:	e00a      	b.n	8001724 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	b2da      	uxtb	r2, r3
 8001712:	4908      	ldr	r1, [pc, #32]	; (8001734 <__NVIC_SetPriority+0x50>)
 8001714:	79fb      	ldrb	r3, [r7, #7]
 8001716:	f003 030f 	and.w	r3, r3, #15
 800171a:	3b04      	subs	r3, #4
 800171c:	0112      	lsls	r2, r2, #4
 800171e:	b2d2      	uxtb	r2, r2
 8001720:	440b      	add	r3, r1
 8001722:	761a      	strb	r2, [r3, #24]
}
 8001724:	bf00      	nop
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr
 8001730:	e000e100 	.word	0xe000e100
 8001734:	e000ed00 	.word	0xe000ed00

08001738 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001738:	b480      	push	{r7}
 800173a:	b089      	sub	sp, #36	; 0x24
 800173c:	af00      	add	r7, sp, #0
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	60b9      	str	r1, [r7, #8]
 8001742:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	f003 0307 	and.w	r3, r3, #7
 800174a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	f1c3 0307 	rsb	r3, r3, #7
 8001752:	2b04      	cmp	r3, #4
 8001754:	bf28      	it	cs
 8001756:	2304      	movcs	r3, #4
 8001758:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	3304      	adds	r3, #4
 800175e:	2b06      	cmp	r3, #6
 8001760:	d902      	bls.n	8001768 <NVIC_EncodePriority+0x30>
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	3b03      	subs	r3, #3
 8001766:	e000      	b.n	800176a <NVIC_EncodePriority+0x32>
 8001768:	2300      	movs	r3, #0
 800176a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800176c:	f04f 32ff 	mov.w	r2, #4294967295
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	43da      	mvns	r2, r3
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	401a      	ands	r2, r3
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001780:	f04f 31ff 	mov.w	r1, #4294967295
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	fa01 f303 	lsl.w	r3, r1, r3
 800178a:	43d9      	mvns	r1, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001790:	4313      	orrs	r3, r2
         );
}
 8001792:	4618      	mov	r0, r3
 8001794:	3724      	adds	r7, #36	; 0x24
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
	...

080017a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	3b01      	subs	r3, #1
 80017ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017b0:	d301      	bcc.n	80017b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017b2:	2301      	movs	r3, #1
 80017b4:	e00f      	b.n	80017d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017b6:	4a0a      	ldr	r2, [pc, #40]	; (80017e0 <SysTick_Config+0x40>)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	3b01      	subs	r3, #1
 80017bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017be:	210f      	movs	r1, #15
 80017c0:	f04f 30ff 	mov.w	r0, #4294967295
 80017c4:	f7ff ff8e 	bl	80016e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017c8:	4b05      	ldr	r3, [pc, #20]	; (80017e0 <SysTick_Config+0x40>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017ce:	4b04      	ldr	r3, [pc, #16]	; (80017e0 <SysTick_Config+0x40>)
 80017d0:	2207      	movs	r2, #7
 80017d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	e000e010 	.word	0xe000e010

080017e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f7ff ff29 	bl	8001644 <__NVIC_SetPriorityGrouping>
}
 80017f2:	bf00      	nop
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}

080017fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b086      	sub	sp, #24
 80017fe:	af00      	add	r7, sp, #0
 8001800:	4603      	mov	r3, r0
 8001802:	60b9      	str	r1, [r7, #8]
 8001804:	607a      	str	r2, [r7, #4]
 8001806:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001808:	2300      	movs	r3, #0
 800180a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800180c:	f7ff ff3e 	bl	800168c <__NVIC_GetPriorityGrouping>
 8001810:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	68b9      	ldr	r1, [r7, #8]
 8001816:	6978      	ldr	r0, [r7, #20]
 8001818:	f7ff ff8e 	bl	8001738 <NVIC_EncodePriority>
 800181c:	4602      	mov	r2, r0
 800181e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001822:	4611      	mov	r1, r2
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff ff5d 	bl	80016e4 <__NVIC_SetPriority>
}
 800182a:	bf00      	nop
 800182c:	3718      	adds	r7, #24
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}

08001832 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001832:	b580      	push	{r7, lr}
 8001834:	b082      	sub	sp, #8
 8001836:	af00      	add	r7, sp, #0
 8001838:	4603      	mov	r3, r0
 800183a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800183c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff ff31 	bl	80016a8 <__NVIC_EnableIRQ>
}
 8001846:	bf00      	nop
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800184e:	b580      	push	{r7, lr}
 8001850:	b082      	sub	sp, #8
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f7ff ffa2 	bl	80017a0 <SysTick_Config>
 800185c:	4603      	mov	r3, r0
}
 800185e:	4618      	mov	r0, r3
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}

08001866 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001866:	b580      	push	{r7, lr}
 8001868:	b084      	sub	sp, #16
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001872:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001874:	f7ff feb6 	bl	80015e4 <HAL_GetTick>
 8001878:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001880:	b2db      	uxtb	r3, r3
 8001882:	2b02      	cmp	r3, #2
 8001884:	d008      	beq.n	8001898 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2280      	movs	r2, #128	; 0x80
 800188a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2200      	movs	r2, #0
 8001890:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e052      	b.n	800193e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f022 0216 	bic.w	r2, r2, #22
 80018a6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	695a      	ldr	r2, [r3, #20]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018b6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d103      	bne.n	80018c8 <HAL_DMA_Abort+0x62>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d007      	beq.n	80018d8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f022 0208 	bic.w	r2, r2, #8
 80018d6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f022 0201 	bic.w	r2, r2, #1
 80018e6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018e8:	e013      	b.n	8001912 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018ea:	f7ff fe7b 	bl	80015e4 <HAL_GetTick>
 80018ee:	4602      	mov	r2, r0
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	2b05      	cmp	r3, #5
 80018f6:	d90c      	bls.n	8001912 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2220      	movs	r2, #32
 80018fc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2203      	movs	r2, #3
 8001902:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2200      	movs	r2, #0
 800190a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e015      	b.n	800193e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 0301 	and.w	r3, r3, #1
 800191c:	2b00      	cmp	r3, #0
 800191e:	d1e4      	bne.n	80018ea <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001924:	223f      	movs	r2, #63	; 0x3f
 8001926:	409a      	lsls	r2, r3
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2201      	movs	r2, #1
 8001930:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2200      	movs	r2, #0
 8001938:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	3710      	adds	r7, #16
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001946:	b480      	push	{r7}
 8001948:	b083      	sub	sp, #12
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001954:	b2db      	uxtb	r3, r3
 8001956:	2b02      	cmp	r3, #2
 8001958:	d004      	beq.n	8001964 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2280      	movs	r2, #128	; 0x80
 800195e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e00c      	b.n	800197e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2205      	movs	r2, #5
 8001968:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f022 0201 	bic.w	r2, r2, #1
 800197a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
	...

0800198c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800198c:	b480      	push	{r7}
 800198e:	b089      	sub	sp, #36	; 0x24
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001996:	2300      	movs	r3, #0
 8001998:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800199a:	2300      	movs	r3, #0
 800199c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800199e:	2300      	movs	r3, #0
 80019a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019a2:	2300      	movs	r3, #0
 80019a4:	61fb      	str	r3, [r7, #28]
 80019a6:	e16b      	b.n	8001c80 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019a8:	2201      	movs	r2, #1
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	697a      	ldr	r2, [r7, #20]
 80019b8:	4013      	ands	r3, r2
 80019ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019bc:	693a      	ldr	r2, [r7, #16]
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	f040 815a 	bne.w	8001c7a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f003 0303 	and.w	r3, r3, #3
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d005      	beq.n	80019de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d130      	bne.n	8001a40 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	2203      	movs	r2, #3
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	43db      	mvns	r3, r3
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	4013      	ands	r3, r2
 80019f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	68da      	ldr	r2, [r3, #12]
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	69ba      	ldr	r2, [r7, #24]
 8001a0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a14:	2201      	movs	r2, #1
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	4013      	ands	r3, r2
 8001a22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	091b      	lsrs	r3, r3, #4
 8001a2a:	f003 0201 	and.w	r2, r3, #1
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f003 0303 	and.w	r3, r3, #3
 8001a48:	2b03      	cmp	r3, #3
 8001a4a:	d017      	beq.n	8001a7c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	2203      	movs	r2, #3
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	4013      	ands	r3, r2
 8001a62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	689a      	ldr	r2, [r3, #8]
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f003 0303 	and.w	r3, r3, #3
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d123      	bne.n	8001ad0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	08da      	lsrs	r2, r3, #3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	3208      	adds	r2, #8
 8001a90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	f003 0307 	and.w	r3, r3, #7
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	220f      	movs	r2, #15
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	691a      	ldr	r2, [r3, #16]
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	f003 0307 	and.w	r3, r3, #7
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	08da      	lsrs	r2, r3, #3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	3208      	adds	r2, #8
 8001aca:	69b9      	ldr	r1, [r7, #24]
 8001acc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	2203      	movs	r2, #3
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f003 0203 	and.w	r2, r3, #3
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	f000 80b4 	beq.w	8001c7a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	60fb      	str	r3, [r7, #12]
 8001b16:	4b60      	ldr	r3, [pc, #384]	; (8001c98 <HAL_GPIO_Init+0x30c>)
 8001b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1a:	4a5f      	ldr	r2, [pc, #380]	; (8001c98 <HAL_GPIO_Init+0x30c>)
 8001b1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b20:	6453      	str	r3, [r2, #68]	; 0x44
 8001b22:	4b5d      	ldr	r3, [pc, #372]	; (8001c98 <HAL_GPIO_Init+0x30c>)
 8001b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b2e:	4a5b      	ldr	r2, [pc, #364]	; (8001c9c <HAL_GPIO_Init+0x310>)
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	089b      	lsrs	r3, r3, #2
 8001b34:	3302      	adds	r3, #2
 8001b36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	f003 0303 	and.w	r3, r3, #3
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	220f      	movs	r2, #15
 8001b46:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4a:	43db      	mvns	r3, r3
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	4013      	ands	r3, r2
 8001b50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4a52      	ldr	r2, [pc, #328]	; (8001ca0 <HAL_GPIO_Init+0x314>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d02b      	beq.n	8001bb2 <HAL_GPIO_Init+0x226>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a51      	ldr	r2, [pc, #324]	; (8001ca4 <HAL_GPIO_Init+0x318>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d025      	beq.n	8001bae <HAL_GPIO_Init+0x222>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a50      	ldr	r2, [pc, #320]	; (8001ca8 <HAL_GPIO_Init+0x31c>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d01f      	beq.n	8001baa <HAL_GPIO_Init+0x21e>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4a4f      	ldr	r2, [pc, #316]	; (8001cac <HAL_GPIO_Init+0x320>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d019      	beq.n	8001ba6 <HAL_GPIO_Init+0x21a>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a4e      	ldr	r2, [pc, #312]	; (8001cb0 <HAL_GPIO_Init+0x324>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d013      	beq.n	8001ba2 <HAL_GPIO_Init+0x216>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a4d      	ldr	r2, [pc, #308]	; (8001cb4 <HAL_GPIO_Init+0x328>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d00d      	beq.n	8001b9e <HAL_GPIO_Init+0x212>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a4c      	ldr	r2, [pc, #304]	; (8001cb8 <HAL_GPIO_Init+0x32c>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d007      	beq.n	8001b9a <HAL_GPIO_Init+0x20e>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a4b      	ldr	r2, [pc, #300]	; (8001cbc <HAL_GPIO_Init+0x330>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d101      	bne.n	8001b96 <HAL_GPIO_Init+0x20a>
 8001b92:	2307      	movs	r3, #7
 8001b94:	e00e      	b.n	8001bb4 <HAL_GPIO_Init+0x228>
 8001b96:	2308      	movs	r3, #8
 8001b98:	e00c      	b.n	8001bb4 <HAL_GPIO_Init+0x228>
 8001b9a:	2306      	movs	r3, #6
 8001b9c:	e00a      	b.n	8001bb4 <HAL_GPIO_Init+0x228>
 8001b9e:	2305      	movs	r3, #5
 8001ba0:	e008      	b.n	8001bb4 <HAL_GPIO_Init+0x228>
 8001ba2:	2304      	movs	r3, #4
 8001ba4:	e006      	b.n	8001bb4 <HAL_GPIO_Init+0x228>
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e004      	b.n	8001bb4 <HAL_GPIO_Init+0x228>
 8001baa:	2302      	movs	r3, #2
 8001bac:	e002      	b.n	8001bb4 <HAL_GPIO_Init+0x228>
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e000      	b.n	8001bb4 <HAL_GPIO_Init+0x228>
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	69fa      	ldr	r2, [r7, #28]
 8001bb6:	f002 0203 	and.w	r2, r2, #3
 8001bba:	0092      	lsls	r2, r2, #2
 8001bbc:	4093      	lsls	r3, r2
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bc4:	4935      	ldr	r1, [pc, #212]	; (8001c9c <HAL_GPIO_Init+0x310>)
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	089b      	lsrs	r3, r3, #2
 8001bca:	3302      	adds	r3, #2
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bd2:	4b3b      	ldr	r3, [pc, #236]	; (8001cc0 <HAL_GPIO_Init+0x334>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	43db      	mvns	r3, r3
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	4013      	ands	r3, r2
 8001be0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d003      	beq.n	8001bf6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bf6:	4a32      	ldr	r2, [pc, #200]	; (8001cc0 <HAL_GPIO_Init+0x334>)
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001bfc:	4b30      	ldr	r3, [pc, #192]	; (8001cc0 <HAL_GPIO_Init+0x334>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	43db      	mvns	r3, r3
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d003      	beq.n	8001c20 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c20:	4a27      	ldr	r2, [pc, #156]	; (8001cc0 <HAL_GPIO_Init+0x334>)
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c26:	4b26      	ldr	r3, [pc, #152]	; (8001cc0 <HAL_GPIO_Init+0x334>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	43db      	mvns	r3, r3
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	4013      	ands	r3, r2
 8001c34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d003      	beq.n	8001c4a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c4a:	4a1d      	ldr	r2, [pc, #116]	; (8001cc0 <HAL_GPIO_Init+0x334>)
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c50:	4b1b      	ldr	r3, [pc, #108]	; (8001cc0 <HAL_GPIO_Init+0x334>)
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d003      	beq.n	8001c74 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c74:	4a12      	ldr	r2, [pc, #72]	; (8001cc0 <HAL_GPIO_Init+0x334>)
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	61fb      	str	r3, [r7, #28]
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	2b0f      	cmp	r3, #15
 8001c84:	f67f ae90 	bls.w	80019a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c88:	bf00      	nop
 8001c8a:	bf00      	nop
 8001c8c:	3724      	adds	r7, #36	; 0x24
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	40023800 	.word	0x40023800
 8001c9c:	40013800 	.word	0x40013800
 8001ca0:	40020000 	.word	0x40020000
 8001ca4:	40020400 	.word	0x40020400
 8001ca8:	40020800 	.word	0x40020800
 8001cac:	40020c00 	.word	0x40020c00
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	40021400 	.word	0x40021400
 8001cb8:	40021800 	.word	0x40021800
 8001cbc:	40021c00 	.word	0x40021c00
 8001cc0:	40013c00 	.word	0x40013c00

08001cc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	460b      	mov	r3, r1
 8001cce:	807b      	strh	r3, [r7, #2]
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cd4:	787b      	ldrb	r3, [r7, #1]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d003      	beq.n	8001ce2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cda:	887a      	ldrh	r2, [r7, #2]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ce0:	e003      	b.n	8001cea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ce2:	887b      	ldrh	r3, [r7, #2]
 8001ce4:	041a      	lsls	r2, r3, #16
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	619a      	str	r2, [r3, #24]
}
 8001cea:	bf00      	nop
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
	...

08001cf8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d101      	bne.n	8001d0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e264      	b.n	80021d4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d075      	beq.n	8001e02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d16:	4ba3      	ldr	r3, [pc, #652]	; (8001fa4 <HAL_RCC_OscConfig+0x2ac>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f003 030c 	and.w	r3, r3, #12
 8001d1e:	2b04      	cmp	r3, #4
 8001d20:	d00c      	beq.n	8001d3c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d22:	4ba0      	ldr	r3, [pc, #640]	; (8001fa4 <HAL_RCC_OscConfig+0x2ac>)
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d2a:	2b08      	cmp	r3, #8
 8001d2c:	d112      	bne.n	8001d54 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d2e:	4b9d      	ldr	r3, [pc, #628]	; (8001fa4 <HAL_RCC_OscConfig+0x2ac>)
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d3a:	d10b      	bne.n	8001d54 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d3c:	4b99      	ldr	r3, [pc, #612]	; (8001fa4 <HAL_RCC_OscConfig+0x2ac>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d05b      	beq.n	8001e00 <HAL_RCC_OscConfig+0x108>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d157      	bne.n	8001e00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e23f      	b.n	80021d4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d5c:	d106      	bne.n	8001d6c <HAL_RCC_OscConfig+0x74>
 8001d5e:	4b91      	ldr	r3, [pc, #580]	; (8001fa4 <HAL_RCC_OscConfig+0x2ac>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a90      	ldr	r2, [pc, #576]	; (8001fa4 <HAL_RCC_OscConfig+0x2ac>)
 8001d64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d68:	6013      	str	r3, [r2, #0]
 8001d6a:	e01d      	b.n	8001da8 <HAL_RCC_OscConfig+0xb0>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d74:	d10c      	bne.n	8001d90 <HAL_RCC_OscConfig+0x98>
 8001d76:	4b8b      	ldr	r3, [pc, #556]	; (8001fa4 <HAL_RCC_OscConfig+0x2ac>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a8a      	ldr	r2, [pc, #552]	; (8001fa4 <HAL_RCC_OscConfig+0x2ac>)
 8001d7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d80:	6013      	str	r3, [r2, #0]
 8001d82:	4b88      	ldr	r3, [pc, #544]	; (8001fa4 <HAL_RCC_OscConfig+0x2ac>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a87      	ldr	r2, [pc, #540]	; (8001fa4 <HAL_RCC_OscConfig+0x2ac>)
 8001d88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d8c:	6013      	str	r3, [r2, #0]
 8001d8e:	e00b      	b.n	8001da8 <HAL_RCC_OscConfig+0xb0>
 8001d90:	4b84      	ldr	r3, [pc, #528]	; (8001fa4 <HAL_RCC_OscConfig+0x2ac>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a83      	ldr	r2, [pc, #524]	; (8001fa4 <HAL_RCC_OscConfig+0x2ac>)
 8001d96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d9a:	6013      	str	r3, [r2, #0]
 8001d9c:	4b81      	ldr	r3, [pc, #516]	; (8001fa4 <HAL_RCC_OscConfig+0x2ac>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a80      	ldr	r2, [pc, #512]	; (8001fa4 <HAL_RCC_OscConfig+0x2ac>)
 8001da2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001da6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d013      	beq.n	8001dd8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db0:	f7ff fc18 	bl	80015e4 <HAL_GetTick>
 8001db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001db6:	e008      	b.n	8001dca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001db8:	f7ff fc14 	bl	80015e4 <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	2b64      	cmp	r3, #100	; 0x64
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e204      	b.n	80021d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dca:	4b76      	ldr	r3, [pc, #472]	; (8001fa4 <HAL_RCC_OscConfig+0x2ac>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d0f0      	beq.n	8001db8 <HAL_RCC_OscConfig+0xc0>
 8001dd6:	e014      	b.n	8001e02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd8:	f7ff fc04 	bl	80015e4 <HAL_GetTick>
 8001ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dde:	e008      	b.n	8001df2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001de0:	f7ff fc00 	bl	80015e4 <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	2b64      	cmp	r3, #100	; 0x64
 8001dec:	d901      	bls.n	8001df2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e1f0      	b.n	80021d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001df2:	4b6c      	ldr	r3, [pc, #432]	; (8001fa4 <HAL_RCC_OscConfig+0x2ac>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d1f0      	bne.n	8001de0 <HAL_RCC_OscConfig+0xe8>
 8001dfe:	e000      	b.n	8001e02 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d063      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e0e:	4b65      	ldr	r3, [pc, #404]	; (8001fa4 <HAL_RCC_OscConfig+0x2ac>)
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f003 030c 	and.w	r3, r3, #12
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d00b      	beq.n	8001e32 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e1a:	4b62      	ldr	r3, [pc, #392]	; (8001fa4 <HAL_RCC_OscConfig+0x2ac>)
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e22:	2b08      	cmp	r3, #8
 8001e24:	d11c      	bne.n	8001e60 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e26:	4b5f      	ldr	r3, [pc, #380]	; (8001fa4 <HAL_RCC_OscConfig+0x2ac>)
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d116      	bne.n	8001e60 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e32:	4b5c      	ldr	r3, [pc, #368]	; (8001fa4 <HAL_RCC_OscConfig+0x2ac>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d005      	beq.n	8001e4a <HAL_RCC_OscConfig+0x152>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d001      	beq.n	8001e4a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e1c4      	b.n	80021d4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e4a:	4b56      	ldr	r3, [pc, #344]	; (8001fa4 <HAL_RCC_OscConfig+0x2ac>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	00db      	lsls	r3, r3, #3
 8001e58:	4952      	ldr	r1, [pc, #328]	; (8001fa4 <HAL_RCC_OscConfig+0x2ac>)
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e5e:	e03a      	b.n	8001ed6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d020      	beq.n	8001eaa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e68:	4b4f      	ldr	r3, [pc, #316]	; (8001fa8 <HAL_RCC_OscConfig+0x2b0>)
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6e:	f7ff fbb9 	bl	80015e4 <HAL_GetTick>
 8001e72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e74:	e008      	b.n	8001e88 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e76:	f7ff fbb5 	bl	80015e4 <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d901      	bls.n	8001e88 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e1a5      	b.n	80021d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e88:	4b46      	ldr	r3, [pc, #280]	; (8001fa4 <HAL_RCC_OscConfig+0x2ac>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d0f0      	beq.n	8001e76 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e94:	4b43      	ldr	r3, [pc, #268]	; (8001fa4 <HAL_RCC_OscConfig+0x2ac>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	691b      	ldr	r3, [r3, #16]
 8001ea0:	00db      	lsls	r3, r3, #3
 8001ea2:	4940      	ldr	r1, [pc, #256]	; (8001fa4 <HAL_RCC_OscConfig+0x2ac>)
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	600b      	str	r3, [r1, #0]
 8001ea8:	e015      	b.n	8001ed6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eaa:	4b3f      	ldr	r3, [pc, #252]	; (8001fa8 <HAL_RCC_OscConfig+0x2b0>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb0:	f7ff fb98 	bl	80015e4 <HAL_GetTick>
 8001eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eb6:	e008      	b.n	8001eca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001eb8:	f7ff fb94 	bl	80015e4 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e184      	b.n	80021d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eca:	4b36      	ldr	r3, [pc, #216]	; (8001fa4 <HAL_RCC_OscConfig+0x2ac>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d1f0      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0308 	and.w	r3, r3, #8
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d030      	beq.n	8001f44 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	695b      	ldr	r3, [r3, #20]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d016      	beq.n	8001f18 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001eea:	4b30      	ldr	r3, [pc, #192]	; (8001fac <HAL_RCC_OscConfig+0x2b4>)
 8001eec:	2201      	movs	r2, #1
 8001eee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ef0:	f7ff fb78 	bl	80015e4 <HAL_GetTick>
 8001ef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ef6:	e008      	b.n	8001f0a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ef8:	f7ff fb74 	bl	80015e4 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e164      	b.n	80021d4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f0a:	4b26      	ldr	r3, [pc, #152]	; (8001fa4 <HAL_RCC_OscConfig+0x2ac>)
 8001f0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f0e:	f003 0302 	and.w	r3, r3, #2
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d0f0      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x200>
 8001f16:	e015      	b.n	8001f44 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f18:	4b24      	ldr	r3, [pc, #144]	; (8001fac <HAL_RCC_OscConfig+0x2b4>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f1e:	f7ff fb61 	bl	80015e4 <HAL_GetTick>
 8001f22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f24:	e008      	b.n	8001f38 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f26:	f7ff fb5d 	bl	80015e4 <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d901      	bls.n	8001f38 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e14d      	b.n	80021d4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f38:	4b1a      	ldr	r3, [pc, #104]	; (8001fa4 <HAL_RCC_OscConfig+0x2ac>)
 8001f3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f3c:	f003 0302 	and.w	r3, r3, #2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d1f0      	bne.n	8001f26 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0304 	and.w	r3, r3, #4
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	f000 80a0 	beq.w	8002092 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f52:	2300      	movs	r3, #0
 8001f54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f56:	4b13      	ldr	r3, [pc, #76]	; (8001fa4 <HAL_RCC_OscConfig+0x2ac>)
 8001f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d10f      	bne.n	8001f82 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f62:	2300      	movs	r3, #0
 8001f64:	60bb      	str	r3, [r7, #8]
 8001f66:	4b0f      	ldr	r3, [pc, #60]	; (8001fa4 <HAL_RCC_OscConfig+0x2ac>)
 8001f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6a:	4a0e      	ldr	r2, [pc, #56]	; (8001fa4 <HAL_RCC_OscConfig+0x2ac>)
 8001f6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f70:	6413      	str	r3, [r2, #64]	; 0x40
 8001f72:	4b0c      	ldr	r3, [pc, #48]	; (8001fa4 <HAL_RCC_OscConfig+0x2ac>)
 8001f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f7a:	60bb      	str	r3, [r7, #8]
 8001f7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f82:	4b0b      	ldr	r3, [pc, #44]	; (8001fb0 <HAL_RCC_OscConfig+0x2b8>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d121      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f8e:	4b08      	ldr	r3, [pc, #32]	; (8001fb0 <HAL_RCC_OscConfig+0x2b8>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a07      	ldr	r2, [pc, #28]	; (8001fb0 <HAL_RCC_OscConfig+0x2b8>)
 8001f94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f9a:	f7ff fb23 	bl	80015e4 <HAL_GetTick>
 8001f9e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa0:	e011      	b.n	8001fc6 <HAL_RCC_OscConfig+0x2ce>
 8001fa2:	bf00      	nop
 8001fa4:	40023800 	.word	0x40023800
 8001fa8:	42470000 	.word	0x42470000
 8001fac:	42470e80 	.word	0x42470e80
 8001fb0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fb4:	f7ff fb16 	bl	80015e4 <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e106      	b.n	80021d4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fc6:	4b85      	ldr	r3, [pc, #532]	; (80021dc <HAL_RCC_OscConfig+0x4e4>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d0f0      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d106      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x2f0>
 8001fda:	4b81      	ldr	r3, [pc, #516]	; (80021e0 <HAL_RCC_OscConfig+0x4e8>)
 8001fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fde:	4a80      	ldr	r2, [pc, #512]	; (80021e0 <HAL_RCC_OscConfig+0x4e8>)
 8001fe0:	f043 0301 	orr.w	r3, r3, #1
 8001fe4:	6713      	str	r3, [r2, #112]	; 0x70
 8001fe6:	e01c      	b.n	8002022 <HAL_RCC_OscConfig+0x32a>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	2b05      	cmp	r3, #5
 8001fee:	d10c      	bne.n	800200a <HAL_RCC_OscConfig+0x312>
 8001ff0:	4b7b      	ldr	r3, [pc, #492]	; (80021e0 <HAL_RCC_OscConfig+0x4e8>)
 8001ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff4:	4a7a      	ldr	r2, [pc, #488]	; (80021e0 <HAL_RCC_OscConfig+0x4e8>)
 8001ff6:	f043 0304 	orr.w	r3, r3, #4
 8001ffa:	6713      	str	r3, [r2, #112]	; 0x70
 8001ffc:	4b78      	ldr	r3, [pc, #480]	; (80021e0 <HAL_RCC_OscConfig+0x4e8>)
 8001ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002000:	4a77      	ldr	r2, [pc, #476]	; (80021e0 <HAL_RCC_OscConfig+0x4e8>)
 8002002:	f043 0301 	orr.w	r3, r3, #1
 8002006:	6713      	str	r3, [r2, #112]	; 0x70
 8002008:	e00b      	b.n	8002022 <HAL_RCC_OscConfig+0x32a>
 800200a:	4b75      	ldr	r3, [pc, #468]	; (80021e0 <HAL_RCC_OscConfig+0x4e8>)
 800200c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800200e:	4a74      	ldr	r2, [pc, #464]	; (80021e0 <HAL_RCC_OscConfig+0x4e8>)
 8002010:	f023 0301 	bic.w	r3, r3, #1
 8002014:	6713      	str	r3, [r2, #112]	; 0x70
 8002016:	4b72      	ldr	r3, [pc, #456]	; (80021e0 <HAL_RCC_OscConfig+0x4e8>)
 8002018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800201a:	4a71      	ldr	r2, [pc, #452]	; (80021e0 <HAL_RCC_OscConfig+0x4e8>)
 800201c:	f023 0304 	bic.w	r3, r3, #4
 8002020:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d015      	beq.n	8002056 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800202a:	f7ff fadb 	bl	80015e4 <HAL_GetTick>
 800202e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002030:	e00a      	b.n	8002048 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002032:	f7ff fad7 	bl	80015e4 <HAL_GetTick>
 8002036:	4602      	mov	r2, r0
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002040:	4293      	cmp	r3, r2
 8002042:	d901      	bls.n	8002048 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e0c5      	b.n	80021d4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002048:	4b65      	ldr	r3, [pc, #404]	; (80021e0 <HAL_RCC_OscConfig+0x4e8>)
 800204a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800204c:	f003 0302 	and.w	r3, r3, #2
 8002050:	2b00      	cmp	r3, #0
 8002052:	d0ee      	beq.n	8002032 <HAL_RCC_OscConfig+0x33a>
 8002054:	e014      	b.n	8002080 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002056:	f7ff fac5 	bl	80015e4 <HAL_GetTick>
 800205a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800205c:	e00a      	b.n	8002074 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800205e:	f7ff fac1 	bl	80015e4 <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	f241 3288 	movw	r2, #5000	; 0x1388
 800206c:	4293      	cmp	r3, r2
 800206e:	d901      	bls.n	8002074 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e0af      	b.n	80021d4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002074:	4b5a      	ldr	r3, [pc, #360]	; (80021e0 <HAL_RCC_OscConfig+0x4e8>)
 8002076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002078:	f003 0302 	and.w	r3, r3, #2
 800207c:	2b00      	cmp	r3, #0
 800207e:	d1ee      	bne.n	800205e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002080:	7dfb      	ldrb	r3, [r7, #23]
 8002082:	2b01      	cmp	r3, #1
 8002084:	d105      	bne.n	8002092 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002086:	4b56      	ldr	r3, [pc, #344]	; (80021e0 <HAL_RCC_OscConfig+0x4e8>)
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	4a55      	ldr	r2, [pc, #340]	; (80021e0 <HAL_RCC_OscConfig+0x4e8>)
 800208c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002090:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	699b      	ldr	r3, [r3, #24]
 8002096:	2b00      	cmp	r3, #0
 8002098:	f000 809b 	beq.w	80021d2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800209c:	4b50      	ldr	r3, [pc, #320]	; (80021e0 <HAL_RCC_OscConfig+0x4e8>)
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f003 030c 	and.w	r3, r3, #12
 80020a4:	2b08      	cmp	r3, #8
 80020a6:	d05c      	beq.n	8002162 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d141      	bne.n	8002134 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020b0:	4b4c      	ldr	r3, [pc, #304]	; (80021e4 <HAL_RCC_OscConfig+0x4ec>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b6:	f7ff fa95 	bl	80015e4 <HAL_GetTick>
 80020ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020bc:	e008      	b.n	80020d0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020be:	f7ff fa91 	bl	80015e4 <HAL_GetTick>
 80020c2:	4602      	mov	r2, r0
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d901      	bls.n	80020d0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80020cc:	2303      	movs	r3, #3
 80020ce:	e081      	b.n	80021d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020d0:	4b43      	ldr	r3, [pc, #268]	; (80021e0 <HAL_RCC_OscConfig+0x4e8>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d1f0      	bne.n	80020be <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	69da      	ldr	r2, [r3, #28]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a1b      	ldr	r3, [r3, #32]
 80020e4:	431a      	orrs	r2, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ea:	019b      	lsls	r3, r3, #6
 80020ec:	431a      	orrs	r2, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f2:	085b      	lsrs	r3, r3, #1
 80020f4:	3b01      	subs	r3, #1
 80020f6:	041b      	lsls	r3, r3, #16
 80020f8:	431a      	orrs	r2, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020fe:	061b      	lsls	r3, r3, #24
 8002100:	4937      	ldr	r1, [pc, #220]	; (80021e0 <HAL_RCC_OscConfig+0x4e8>)
 8002102:	4313      	orrs	r3, r2
 8002104:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002106:	4b37      	ldr	r3, [pc, #220]	; (80021e4 <HAL_RCC_OscConfig+0x4ec>)
 8002108:	2201      	movs	r2, #1
 800210a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800210c:	f7ff fa6a 	bl	80015e4 <HAL_GetTick>
 8002110:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002112:	e008      	b.n	8002126 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002114:	f7ff fa66 	bl	80015e4 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b02      	cmp	r3, #2
 8002120:	d901      	bls.n	8002126 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e056      	b.n	80021d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002126:	4b2e      	ldr	r3, [pc, #184]	; (80021e0 <HAL_RCC_OscConfig+0x4e8>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d0f0      	beq.n	8002114 <HAL_RCC_OscConfig+0x41c>
 8002132:	e04e      	b.n	80021d2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002134:	4b2b      	ldr	r3, [pc, #172]	; (80021e4 <HAL_RCC_OscConfig+0x4ec>)
 8002136:	2200      	movs	r2, #0
 8002138:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800213a:	f7ff fa53 	bl	80015e4 <HAL_GetTick>
 800213e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002140:	e008      	b.n	8002154 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002142:	f7ff fa4f 	bl	80015e4 <HAL_GetTick>
 8002146:	4602      	mov	r2, r0
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	2b02      	cmp	r3, #2
 800214e:	d901      	bls.n	8002154 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002150:	2303      	movs	r3, #3
 8002152:	e03f      	b.n	80021d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002154:	4b22      	ldr	r3, [pc, #136]	; (80021e0 <HAL_RCC_OscConfig+0x4e8>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d1f0      	bne.n	8002142 <HAL_RCC_OscConfig+0x44a>
 8002160:	e037      	b.n	80021d2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	699b      	ldr	r3, [r3, #24]
 8002166:	2b01      	cmp	r3, #1
 8002168:	d101      	bne.n	800216e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e032      	b.n	80021d4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800216e:	4b1c      	ldr	r3, [pc, #112]	; (80021e0 <HAL_RCC_OscConfig+0x4e8>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	699b      	ldr	r3, [r3, #24]
 8002178:	2b01      	cmp	r3, #1
 800217a:	d028      	beq.n	80021ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002186:	429a      	cmp	r2, r3
 8002188:	d121      	bne.n	80021ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002194:	429a      	cmp	r2, r3
 8002196:	d11a      	bne.n	80021ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002198:	68fa      	ldr	r2, [r7, #12]
 800219a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800219e:	4013      	ands	r3, r2
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80021a4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d111      	bne.n	80021ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b4:	085b      	lsrs	r3, r3, #1
 80021b6:	3b01      	subs	r3, #1
 80021b8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d107      	bne.n	80021ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d001      	beq.n	80021d2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e000      	b.n	80021d4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80021d2:	2300      	movs	r3, #0
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3718      	adds	r7, #24
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	40007000 	.word	0x40007000
 80021e0:	40023800 	.word	0x40023800
 80021e4:	42470060 	.word	0x42470060

080021e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d101      	bne.n	80021fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e0cc      	b.n	8002396 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021fc:	4b68      	ldr	r3, [pc, #416]	; (80023a0 <HAL_RCC_ClockConfig+0x1b8>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0307 	and.w	r3, r3, #7
 8002204:	683a      	ldr	r2, [r7, #0]
 8002206:	429a      	cmp	r2, r3
 8002208:	d90c      	bls.n	8002224 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800220a:	4b65      	ldr	r3, [pc, #404]	; (80023a0 <HAL_RCC_ClockConfig+0x1b8>)
 800220c:	683a      	ldr	r2, [r7, #0]
 800220e:	b2d2      	uxtb	r2, r2
 8002210:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002212:	4b63      	ldr	r3, [pc, #396]	; (80023a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0307 	and.w	r3, r3, #7
 800221a:	683a      	ldr	r2, [r7, #0]
 800221c:	429a      	cmp	r2, r3
 800221e:	d001      	beq.n	8002224 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e0b8      	b.n	8002396 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0302 	and.w	r3, r3, #2
 800222c:	2b00      	cmp	r3, #0
 800222e:	d020      	beq.n	8002272 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0304 	and.w	r3, r3, #4
 8002238:	2b00      	cmp	r3, #0
 800223a:	d005      	beq.n	8002248 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800223c:	4b59      	ldr	r3, [pc, #356]	; (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	4a58      	ldr	r2, [pc, #352]	; (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002242:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002246:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0308 	and.w	r3, r3, #8
 8002250:	2b00      	cmp	r3, #0
 8002252:	d005      	beq.n	8002260 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002254:	4b53      	ldr	r3, [pc, #332]	; (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	4a52      	ldr	r2, [pc, #328]	; (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 800225a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800225e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002260:	4b50      	ldr	r3, [pc, #320]	; (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	494d      	ldr	r1, [pc, #308]	; (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 800226e:	4313      	orrs	r3, r2
 8002270:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0301 	and.w	r3, r3, #1
 800227a:	2b00      	cmp	r3, #0
 800227c:	d044      	beq.n	8002308 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d107      	bne.n	8002296 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002286:	4b47      	ldr	r3, [pc, #284]	; (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d119      	bne.n	80022c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e07f      	b.n	8002396 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	2b02      	cmp	r3, #2
 800229c:	d003      	beq.n	80022a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022a2:	2b03      	cmp	r3, #3
 80022a4:	d107      	bne.n	80022b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022a6:	4b3f      	ldr	r3, [pc, #252]	; (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d109      	bne.n	80022c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e06f      	b.n	8002396 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022b6:	4b3b      	ldr	r3, [pc, #236]	; (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d101      	bne.n	80022c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e067      	b.n	8002396 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022c6:	4b37      	ldr	r3, [pc, #220]	; (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	f023 0203 	bic.w	r2, r3, #3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	4934      	ldr	r1, [pc, #208]	; (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022d8:	f7ff f984 	bl	80015e4 <HAL_GetTick>
 80022dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022de:	e00a      	b.n	80022f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022e0:	f7ff f980 	bl	80015e4 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e04f      	b.n	8002396 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022f6:	4b2b      	ldr	r3, [pc, #172]	; (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	f003 020c 	and.w	r2, r3, #12
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	429a      	cmp	r2, r3
 8002306:	d1eb      	bne.n	80022e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002308:	4b25      	ldr	r3, [pc, #148]	; (80023a0 <HAL_RCC_ClockConfig+0x1b8>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0307 	and.w	r3, r3, #7
 8002310:	683a      	ldr	r2, [r7, #0]
 8002312:	429a      	cmp	r2, r3
 8002314:	d20c      	bcs.n	8002330 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002316:	4b22      	ldr	r3, [pc, #136]	; (80023a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	b2d2      	uxtb	r2, r2
 800231c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800231e:	4b20      	ldr	r3, [pc, #128]	; (80023a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0307 	and.w	r3, r3, #7
 8002326:	683a      	ldr	r2, [r7, #0]
 8002328:	429a      	cmp	r2, r3
 800232a:	d001      	beq.n	8002330 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e032      	b.n	8002396 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0304 	and.w	r3, r3, #4
 8002338:	2b00      	cmp	r3, #0
 800233a:	d008      	beq.n	800234e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800233c:	4b19      	ldr	r3, [pc, #100]	; (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	4916      	ldr	r1, [pc, #88]	; (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 800234a:	4313      	orrs	r3, r2
 800234c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0308 	and.w	r3, r3, #8
 8002356:	2b00      	cmp	r3, #0
 8002358:	d009      	beq.n	800236e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800235a:	4b12      	ldr	r3, [pc, #72]	; (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	490e      	ldr	r1, [pc, #56]	; (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 800236a:	4313      	orrs	r3, r2
 800236c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800236e:	f000 f821 	bl	80023b4 <HAL_RCC_GetSysClockFreq>
 8002372:	4602      	mov	r2, r0
 8002374:	4b0b      	ldr	r3, [pc, #44]	; (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	091b      	lsrs	r3, r3, #4
 800237a:	f003 030f 	and.w	r3, r3, #15
 800237e:	490a      	ldr	r1, [pc, #40]	; (80023a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002380:	5ccb      	ldrb	r3, [r1, r3]
 8002382:	fa22 f303 	lsr.w	r3, r2, r3
 8002386:	4a09      	ldr	r2, [pc, #36]	; (80023ac <HAL_RCC_ClockConfig+0x1c4>)
 8002388:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800238a:	4b09      	ldr	r3, [pc, #36]	; (80023b0 <HAL_RCC_ClockConfig+0x1c8>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4618      	mov	r0, r3
 8002390:	f7ff f8e4 	bl	800155c <HAL_InitTick>

  return HAL_OK;
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	40023c00 	.word	0x40023c00
 80023a4:	40023800 	.word	0x40023800
 80023a8:	08004ab8 	.word	0x08004ab8
 80023ac:	20000000 	.word	0x20000000
 80023b0:	2000000c 	.word	0x2000000c

080023b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023b4:	b5b0      	push	{r4, r5, r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80023ba:	2100      	movs	r1, #0
 80023bc:	6079      	str	r1, [r7, #4]
 80023be:	2100      	movs	r1, #0
 80023c0:	60f9      	str	r1, [r7, #12]
 80023c2:	2100      	movs	r1, #0
 80023c4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80023c6:	2100      	movs	r1, #0
 80023c8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023ca:	4952      	ldr	r1, [pc, #328]	; (8002514 <HAL_RCC_GetSysClockFreq+0x160>)
 80023cc:	6889      	ldr	r1, [r1, #8]
 80023ce:	f001 010c 	and.w	r1, r1, #12
 80023d2:	2908      	cmp	r1, #8
 80023d4:	d00d      	beq.n	80023f2 <HAL_RCC_GetSysClockFreq+0x3e>
 80023d6:	2908      	cmp	r1, #8
 80023d8:	f200 8094 	bhi.w	8002504 <HAL_RCC_GetSysClockFreq+0x150>
 80023dc:	2900      	cmp	r1, #0
 80023de:	d002      	beq.n	80023e6 <HAL_RCC_GetSysClockFreq+0x32>
 80023e0:	2904      	cmp	r1, #4
 80023e2:	d003      	beq.n	80023ec <HAL_RCC_GetSysClockFreq+0x38>
 80023e4:	e08e      	b.n	8002504 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023e6:	4b4c      	ldr	r3, [pc, #304]	; (8002518 <HAL_RCC_GetSysClockFreq+0x164>)
 80023e8:	60bb      	str	r3, [r7, #8]
       break;
 80023ea:	e08e      	b.n	800250a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023ec:	4b4b      	ldr	r3, [pc, #300]	; (800251c <HAL_RCC_GetSysClockFreq+0x168>)
 80023ee:	60bb      	str	r3, [r7, #8]
      break;
 80023f0:	e08b      	b.n	800250a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023f2:	4948      	ldr	r1, [pc, #288]	; (8002514 <HAL_RCC_GetSysClockFreq+0x160>)
 80023f4:	6849      	ldr	r1, [r1, #4]
 80023f6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80023fa:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023fc:	4945      	ldr	r1, [pc, #276]	; (8002514 <HAL_RCC_GetSysClockFreq+0x160>)
 80023fe:	6849      	ldr	r1, [r1, #4]
 8002400:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002404:	2900      	cmp	r1, #0
 8002406:	d024      	beq.n	8002452 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002408:	4942      	ldr	r1, [pc, #264]	; (8002514 <HAL_RCC_GetSysClockFreq+0x160>)
 800240a:	6849      	ldr	r1, [r1, #4]
 800240c:	0989      	lsrs	r1, r1, #6
 800240e:	4608      	mov	r0, r1
 8002410:	f04f 0100 	mov.w	r1, #0
 8002414:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002418:	f04f 0500 	mov.w	r5, #0
 800241c:	ea00 0204 	and.w	r2, r0, r4
 8002420:	ea01 0305 	and.w	r3, r1, r5
 8002424:	493d      	ldr	r1, [pc, #244]	; (800251c <HAL_RCC_GetSysClockFreq+0x168>)
 8002426:	fb01 f003 	mul.w	r0, r1, r3
 800242a:	2100      	movs	r1, #0
 800242c:	fb01 f102 	mul.w	r1, r1, r2
 8002430:	1844      	adds	r4, r0, r1
 8002432:	493a      	ldr	r1, [pc, #232]	; (800251c <HAL_RCC_GetSysClockFreq+0x168>)
 8002434:	fba2 0101 	umull	r0, r1, r2, r1
 8002438:	1863      	adds	r3, r4, r1
 800243a:	4619      	mov	r1, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	461a      	mov	r2, r3
 8002440:	f04f 0300 	mov.w	r3, #0
 8002444:	f7fd ff1c 	bl	8000280 <__aeabi_uldivmod>
 8002448:	4602      	mov	r2, r0
 800244a:	460b      	mov	r3, r1
 800244c:	4613      	mov	r3, r2
 800244e:	60fb      	str	r3, [r7, #12]
 8002450:	e04a      	b.n	80024e8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002452:	4b30      	ldr	r3, [pc, #192]	; (8002514 <HAL_RCC_GetSysClockFreq+0x160>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	099b      	lsrs	r3, r3, #6
 8002458:	461a      	mov	r2, r3
 800245a:	f04f 0300 	mov.w	r3, #0
 800245e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002462:	f04f 0100 	mov.w	r1, #0
 8002466:	ea02 0400 	and.w	r4, r2, r0
 800246a:	ea03 0501 	and.w	r5, r3, r1
 800246e:	4620      	mov	r0, r4
 8002470:	4629      	mov	r1, r5
 8002472:	f04f 0200 	mov.w	r2, #0
 8002476:	f04f 0300 	mov.w	r3, #0
 800247a:	014b      	lsls	r3, r1, #5
 800247c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002480:	0142      	lsls	r2, r0, #5
 8002482:	4610      	mov	r0, r2
 8002484:	4619      	mov	r1, r3
 8002486:	1b00      	subs	r0, r0, r4
 8002488:	eb61 0105 	sbc.w	r1, r1, r5
 800248c:	f04f 0200 	mov.w	r2, #0
 8002490:	f04f 0300 	mov.w	r3, #0
 8002494:	018b      	lsls	r3, r1, #6
 8002496:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800249a:	0182      	lsls	r2, r0, #6
 800249c:	1a12      	subs	r2, r2, r0
 800249e:	eb63 0301 	sbc.w	r3, r3, r1
 80024a2:	f04f 0000 	mov.w	r0, #0
 80024a6:	f04f 0100 	mov.w	r1, #0
 80024aa:	00d9      	lsls	r1, r3, #3
 80024ac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80024b0:	00d0      	lsls	r0, r2, #3
 80024b2:	4602      	mov	r2, r0
 80024b4:	460b      	mov	r3, r1
 80024b6:	1912      	adds	r2, r2, r4
 80024b8:	eb45 0303 	adc.w	r3, r5, r3
 80024bc:	f04f 0000 	mov.w	r0, #0
 80024c0:	f04f 0100 	mov.w	r1, #0
 80024c4:	0299      	lsls	r1, r3, #10
 80024c6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80024ca:	0290      	lsls	r0, r2, #10
 80024cc:	4602      	mov	r2, r0
 80024ce:	460b      	mov	r3, r1
 80024d0:	4610      	mov	r0, r2
 80024d2:	4619      	mov	r1, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	461a      	mov	r2, r3
 80024d8:	f04f 0300 	mov.w	r3, #0
 80024dc:	f7fd fed0 	bl	8000280 <__aeabi_uldivmod>
 80024e0:	4602      	mov	r2, r0
 80024e2:	460b      	mov	r3, r1
 80024e4:	4613      	mov	r3, r2
 80024e6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80024e8:	4b0a      	ldr	r3, [pc, #40]	; (8002514 <HAL_RCC_GetSysClockFreq+0x160>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	0c1b      	lsrs	r3, r3, #16
 80024ee:	f003 0303 	and.w	r3, r3, #3
 80024f2:	3301      	adds	r3, #1
 80024f4:	005b      	lsls	r3, r3, #1
 80024f6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80024f8:	68fa      	ldr	r2, [r7, #12]
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002500:	60bb      	str	r3, [r7, #8]
      break;
 8002502:	e002      	b.n	800250a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002504:	4b04      	ldr	r3, [pc, #16]	; (8002518 <HAL_RCC_GetSysClockFreq+0x164>)
 8002506:	60bb      	str	r3, [r7, #8]
      break;
 8002508:	bf00      	nop
    }
  }
  return sysclockfreq;
 800250a:	68bb      	ldr	r3, [r7, #8]
}
 800250c:	4618      	mov	r0, r3
 800250e:	3710      	adds	r7, #16
 8002510:	46bd      	mov	sp, r7
 8002512:	bdb0      	pop	{r4, r5, r7, pc}
 8002514:	40023800 	.word	0x40023800
 8002518:	00f42400 	.word	0x00f42400
 800251c:	017d7840 	.word	0x017d7840

08002520 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002524:	4b03      	ldr	r3, [pc, #12]	; (8002534 <HAL_RCC_GetHCLKFreq+0x14>)
 8002526:	681b      	ldr	r3, [r3, #0]
}
 8002528:	4618      	mov	r0, r3
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	20000000 	.word	0x20000000

08002538 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800253c:	f7ff fff0 	bl	8002520 <HAL_RCC_GetHCLKFreq>
 8002540:	4602      	mov	r2, r0
 8002542:	4b05      	ldr	r3, [pc, #20]	; (8002558 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	0a9b      	lsrs	r3, r3, #10
 8002548:	f003 0307 	and.w	r3, r3, #7
 800254c:	4903      	ldr	r1, [pc, #12]	; (800255c <HAL_RCC_GetPCLK1Freq+0x24>)
 800254e:	5ccb      	ldrb	r3, [r1, r3]
 8002550:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002554:	4618      	mov	r0, r3
 8002556:	bd80      	pop	{r7, pc}
 8002558:	40023800 	.word	0x40023800
 800255c:	08004ac8 	.word	0x08004ac8

08002560 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002564:	f7ff ffdc 	bl	8002520 <HAL_RCC_GetHCLKFreq>
 8002568:	4602      	mov	r2, r0
 800256a:	4b05      	ldr	r3, [pc, #20]	; (8002580 <HAL_RCC_GetPCLK2Freq+0x20>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	0b5b      	lsrs	r3, r3, #13
 8002570:	f003 0307 	and.w	r3, r3, #7
 8002574:	4903      	ldr	r1, [pc, #12]	; (8002584 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002576:	5ccb      	ldrb	r3, [r1, r3]
 8002578:	fa22 f303 	lsr.w	r3, r2, r3
}
 800257c:	4618      	mov	r0, r3
 800257e:	bd80      	pop	{r7, pc}
 8002580:	40023800 	.word	0x40023800
 8002584:	08004ac8 	.word	0x08004ac8

08002588 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d101      	bne.n	800259a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e07b      	b.n	8002692 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d108      	bne.n	80025b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025aa:	d009      	beq.n	80025c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	61da      	str	r2, [r3, #28]
 80025b2:	e005      	b.n	80025c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d106      	bne.n	80025e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f7fe fa26 	bl	8000a2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2202      	movs	r2, #2
 80025e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025f6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002608:	431a      	orrs	r2, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002612:	431a      	orrs	r2, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	691b      	ldr	r3, [r3, #16]
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	431a      	orrs	r2, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	431a      	orrs	r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	699b      	ldr	r3, [r3, #24]
 800262c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002630:	431a      	orrs	r2, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	69db      	ldr	r3, [r3, #28]
 8002636:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800263a:	431a      	orrs	r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6a1b      	ldr	r3, [r3, #32]
 8002640:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002644:	ea42 0103 	orr.w	r1, r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	430a      	orrs	r2, r1
 8002656:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	699b      	ldr	r3, [r3, #24]
 800265c:	0c1b      	lsrs	r3, r3, #16
 800265e:	f003 0104 	and.w	r1, r3, #4
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002666:	f003 0210 	and.w	r2, r3, #16
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	430a      	orrs	r2, r1
 8002670:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	69da      	ldr	r2, [r3, #28]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002680:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002690:	2300      	movs	r3, #0
}
 8002692:	4618      	mov	r0, r3
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	b082      	sub	sp, #8
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d101      	bne.n	80026ac <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e03f      	b.n	800272c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d106      	bne.n	80026c6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f7fe fa87 	bl	8000bd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2224      	movs	r2, #36	; 0x24
 80026ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68da      	ldr	r2, [r3, #12]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026dc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f000 fd7a 	bl	80031d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	691a      	ldr	r2, [r3, #16]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026f2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	695a      	ldr	r2, [r3, #20]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002702:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	68da      	ldr	r2, [r3, #12]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002712:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2200      	movs	r2, #0
 8002718:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2220      	movs	r2, #32
 800271e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2220      	movs	r2, #32
 8002726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800272a:	2300      	movs	r3, #0
}
 800272c:	4618      	mov	r0, r3
 800272e:	3708      	adds	r7, #8
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}

08002734 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b08a      	sub	sp, #40	; 0x28
 8002738:	af02      	add	r7, sp, #8
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	60b9      	str	r1, [r7, #8]
 800273e:	603b      	str	r3, [r7, #0]
 8002740:	4613      	mov	r3, r2
 8002742:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002744:	2300      	movs	r3, #0
 8002746:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800274e:	b2db      	uxtb	r3, r3
 8002750:	2b20      	cmp	r3, #32
 8002752:	d17c      	bne.n	800284e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d002      	beq.n	8002760 <HAL_UART_Transmit+0x2c>
 800275a:	88fb      	ldrh	r3, [r7, #6]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d101      	bne.n	8002764 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e075      	b.n	8002850 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800276a:	2b01      	cmp	r3, #1
 800276c:	d101      	bne.n	8002772 <HAL_UART_Transmit+0x3e>
 800276e:	2302      	movs	r3, #2
 8002770:	e06e      	b.n	8002850 <HAL_UART_Transmit+0x11c>
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2201      	movs	r2, #1
 8002776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2200      	movs	r2, #0
 800277e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2221      	movs	r2, #33	; 0x21
 8002784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002788:	f7fe ff2c 	bl	80015e4 <HAL_GetTick>
 800278c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	88fa      	ldrh	r2, [r7, #6]
 8002792:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	88fa      	ldrh	r2, [r7, #6]
 8002798:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027a2:	d108      	bne.n	80027b6 <HAL_UART_Transmit+0x82>
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	691b      	ldr	r3, [r3, #16]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d104      	bne.n	80027b6 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80027ac:	2300      	movs	r3, #0
 80027ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	61bb      	str	r3, [r7, #24]
 80027b4:	e003      	b.n	80027be <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80027ba:	2300      	movs	r3, #0
 80027bc:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80027c6:	e02a      	b.n	800281e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	9300      	str	r3, [sp, #0]
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	2200      	movs	r2, #0
 80027d0:	2180      	movs	r1, #128	; 0x80
 80027d2:	68f8      	ldr	r0, [r7, #12]
 80027d4:	f000 faf8 	bl	8002dc8 <UART_WaitOnFlagUntilTimeout>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e036      	b.n	8002850 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d10b      	bne.n	8002800 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	881b      	ldrh	r3, [r3, #0]
 80027ec:	461a      	mov	r2, r3
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027f6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	3302      	adds	r3, #2
 80027fc:	61bb      	str	r3, [r7, #24]
 80027fe:	e007      	b.n	8002810 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	781a      	ldrb	r2, [r3, #0]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	3301      	adds	r3, #1
 800280e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002814:	b29b      	uxth	r3, r3
 8002816:	3b01      	subs	r3, #1
 8002818:	b29a      	uxth	r2, r3
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002822:	b29b      	uxth	r3, r3
 8002824:	2b00      	cmp	r3, #0
 8002826:	d1cf      	bne.n	80027c8 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	9300      	str	r3, [sp, #0]
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	2200      	movs	r2, #0
 8002830:	2140      	movs	r1, #64	; 0x40
 8002832:	68f8      	ldr	r0, [r7, #12]
 8002834:	f000 fac8 	bl	8002dc8 <UART_WaitOnFlagUntilTimeout>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e006      	b.n	8002850 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2220      	movs	r2, #32
 8002846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800284a:	2300      	movs	r3, #0
 800284c:	e000      	b.n	8002850 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800284e:	2302      	movs	r3, #2
  }
}
 8002850:	4618      	mov	r0, r3
 8002852:	3720      	adds	r7, #32
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b0ba      	sub	sp, #232	; 0xe8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	695b      	ldr	r3, [r3, #20]
 800287a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800287e:	2300      	movs	r3, #0
 8002880:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002884:	2300      	movs	r3, #0
 8002886:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800288a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800288e:	f003 030f 	and.w	r3, r3, #15
 8002892:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002896:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800289a:	2b00      	cmp	r3, #0
 800289c:	d10f      	bne.n	80028be <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800289e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028a2:	f003 0320 	and.w	r3, r3, #32
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d009      	beq.n	80028be <HAL_UART_IRQHandler+0x66>
 80028aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028ae:	f003 0320 	and.w	r3, r3, #32
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d003      	beq.n	80028be <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f000 fbd3 	bl	8003062 <UART_Receive_IT>
      return;
 80028bc:	e256      	b.n	8002d6c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80028be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	f000 80de 	beq.w	8002a84 <HAL_UART_IRQHandler+0x22c>
 80028c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80028cc:	f003 0301 	and.w	r3, r3, #1
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d106      	bne.n	80028e2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80028d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028d8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80028dc:	2b00      	cmp	r3, #0
 80028de:	f000 80d1 	beq.w	8002a84 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80028e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028e6:	f003 0301 	and.w	r3, r3, #1
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d00b      	beq.n	8002906 <HAL_UART_IRQHandler+0xae>
 80028ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d005      	beq.n	8002906 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fe:	f043 0201 	orr.w	r2, r3, #1
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800290a:	f003 0304 	and.w	r3, r3, #4
 800290e:	2b00      	cmp	r3, #0
 8002910:	d00b      	beq.n	800292a <HAL_UART_IRQHandler+0xd2>
 8002912:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002916:	f003 0301 	and.w	r3, r3, #1
 800291a:	2b00      	cmp	r3, #0
 800291c:	d005      	beq.n	800292a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002922:	f043 0202 	orr.w	r2, r3, #2
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800292a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	2b00      	cmp	r3, #0
 8002934:	d00b      	beq.n	800294e <HAL_UART_IRQHandler+0xf6>
 8002936:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	2b00      	cmp	r3, #0
 8002940:	d005      	beq.n	800294e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002946:	f043 0204 	orr.w	r2, r3, #4
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800294e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002952:	f003 0308 	and.w	r3, r3, #8
 8002956:	2b00      	cmp	r3, #0
 8002958:	d011      	beq.n	800297e <HAL_UART_IRQHandler+0x126>
 800295a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800295e:	f003 0320 	and.w	r3, r3, #32
 8002962:	2b00      	cmp	r3, #0
 8002964:	d105      	bne.n	8002972 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002966:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	2b00      	cmp	r3, #0
 8002970:	d005      	beq.n	800297e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002976:	f043 0208 	orr.w	r2, r3, #8
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002982:	2b00      	cmp	r3, #0
 8002984:	f000 81ed 	beq.w	8002d62 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002988:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800298c:	f003 0320 	and.w	r3, r3, #32
 8002990:	2b00      	cmp	r3, #0
 8002992:	d008      	beq.n	80029a6 <HAL_UART_IRQHandler+0x14e>
 8002994:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002998:	f003 0320 	and.w	r3, r3, #32
 800299c:	2b00      	cmp	r3, #0
 800299e:	d002      	beq.n	80029a6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f000 fb5e 	bl	8003062 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	695b      	ldr	r3, [r3, #20]
 80029ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029b0:	2b40      	cmp	r3, #64	; 0x40
 80029b2:	bf0c      	ite	eq
 80029b4:	2301      	moveq	r3, #1
 80029b6:	2300      	movne	r3, #0
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c2:	f003 0308 	and.w	r3, r3, #8
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d103      	bne.n	80029d2 <HAL_UART_IRQHandler+0x17a>
 80029ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d04f      	beq.n	8002a72 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 fa66 	bl	8002ea4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	695b      	ldr	r3, [r3, #20]
 80029de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029e2:	2b40      	cmp	r3, #64	; 0x40
 80029e4:	d141      	bne.n	8002a6a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	3314      	adds	r3, #20
 80029ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80029f4:	e853 3f00 	ldrex	r3, [r3]
 80029f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80029fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	3314      	adds	r3, #20
 8002a0e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002a12:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002a16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a1a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002a1e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002a22:	e841 2300 	strex	r3, r2, [r1]
 8002a26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002a2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d1d9      	bne.n	80029e6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d013      	beq.n	8002a62 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a3e:	4a7d      	ldr	r2, [pc, #500]	; (8002c34 <HAL_UART_IRQHandler+0x3dc>)
 8002a40:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7fe ff7d 	bl	8001946 <HAL_DMA_Abort_IT>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d016      	beq.n	8002a80 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a5c:	4610      	mov	r0, r2
 8002a5e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a60:	e00e      	b.n	8002a80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f000 f99a 	bl	8002d9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a68:	e00a      	b.n	8002a80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f000 f996 	bl	8002d9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a70:	e006      	b.n	8002a80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f000 f992 	bl	8002d9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002a7e:	e170      	b.n	8002d62 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a80:	bf00      	nop
    return;
 8002a82:	e16e      	b.n	8002d62 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	f040 814a 	bne.w	8002d22 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002a8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a92:	f003 0310 	and.w	r3, r3, #16
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	f000 8143 	beq.w	8002d22 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002a9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002aa0:	f003 0310 	and.w	r3, r3, #16
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	f000 813c 	beq.w	8002d22 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002aaa:	2300      	movs	r3, #0
 8002aac:	60bb      	str	r3, [r7, #8]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	60bb      	str	r3, [r7, #8]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	60bb      	str	r3, [r7, #8]
 8002abe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	695b      	ldr	r3, [r3, #20]
 8002ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aca:	2b40      	cmp	r3, #64	; 0x40
 8002acc:	f040 80b4 	bne.w	8002c38 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002adc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	f000 8140 	beq.w	8002d66 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002aea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002aee:	429a      	cmp	r2, r3
 8002af0:	f080 8139 	bcs.w	8002d66 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002afa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b00:	69db      	ldr	r3, [r3, #28]
 8002b02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b06:	f000 8088 	beq.w	8002c1a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	330c      	adds	r3, #12
 8002b10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b14:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002b18:	e853 3f00 	ldrex	r3, [r3]
 8002b1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002b20:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	330c      	adds	r3, #12
 8002b32:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002b36:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002b3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b3e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002b42:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002b46:	e841 2300 	strex	r3, r2, [r1]
 8002b4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002b4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1d9      	bne.n	8002b0a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	3314      	adds	r3, #20
 8002b5c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b60:	e853 3f00 	ldrex	r3, [r3]
 8002b64:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002b66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b68:	f023 0301 	bic.w	r3, r3, #1
 8002b6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	3314      	adds	r3, #20
 8002b76:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002b7a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002b7e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b80:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002b82:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002b86:	e841 2300 	strex	r3, r2, [r1]
 8002b8a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002b8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d1e1      	bne.n	8002b56 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	3314      	adds	r3, #20
 8002b98:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b9c:	e853 3f00 	ldrex	r3, [r3]
 8002ba0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002ba2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ba4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ba8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	3314      	adds	r3, #20
 8002bb2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002bb6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002bb8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002bbc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002bbe:	e841 2300 	strex	r3, r2, [r1]
 8002bc2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002bc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1e3      	bne.n	8002b92 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2220      	movs	r2, #32
 8002bce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	330c      	adds	r3, #12
 8002bde:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002be0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002be2:	e853 3f00 	ldrex	r3, [r3]
 8002be6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002be8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bea:	f023 0310 	bic.w	r3, r3, #16
 8002bee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	330c      	adds	r3, #12
 8002bf8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002bfc:	65ba      	str	r2, [r7, #88]	; 0x58
 8002bfe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c00:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002c02:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c04:	e841 2300 	strex	r3, r2, [r1]
 8002c08:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002c0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d1e3      	bne.n	8002bd8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7fe fe26 	bl	8001866 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	4619      	mov	r1, r3
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f000 f8c0 	bl	8002db0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002c30:	e099      	b.n	8002d66 <HAL_UART_IRQHandler+0x50e>
 8002c32:	bf00      	nop
 8002c34:	08002f6b 	.word	0x08002f6b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	f000 808b 	beq.w	8002d6a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002c54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	f000 8086 	beq.w	8002d6a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	330c      	adds	r3, #12
 8002c64:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c68:	e853 3f00 	ldrex	r3, [r3]
 8002c6c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c70:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002c74:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	330c      	adds	r3, #12
 8002c7e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002c82:	647a      	str	r2, [r7, #68]	; 0x44
 8002c84:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c86:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002c88:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c8a:	e841 2300 	strex	r3, r2, [r1]
 8002c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002c90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d1e3      	bne.n	8002c5e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	3314      	adds	r3, #20
 8002c9c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca0:	e853 3f00 	ldrex	r3, [r3]
 8002ca4:	623b      	str	r3, [r7, #32]
   return(result);
 8002ca6:	6a3b      	ldr	r3, [r7, #32]
 8002ca8:	f023 0301 	bic.w	r3, r3, #1
 8002cac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	3314      	adds	r3, #20
 8002cb6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002cba:	633a      	str	r2, [r7, #48]	; 0x30
 8002cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cbe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002cc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cc2:	e841 2300 	strex	r3, r2, [r1]
 8002cc6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d1e3      	bne.n	8002c96 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2220      	movs	r2, #32
 8002cd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	330c      	adds	r3, #12
 8002ce2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	e853 3f00 	ldrex	r3, [r3]
 8002cea:	60fb      	str	r3, [r7, #12]
   return(result);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f023 0310 	bic.w	r3, r3, #16
 8002cf2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	330c      	adds	r3, #12
 8002cfc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002d00:	61fa      	str	r2, [r7, #28]
 8002d02:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d04:	69b9      	ldr	r1, [r7, #24]
 8002d06:	69fa      	ldr	r2, [r7, #28]
 8002d08:	e841 2300 	strex	r3, r2, [r1]
 8002d0c:	617b      	str	r3, [r7, #20]
   return(result);
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d1e3      	bne.n	8002cdc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002d14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002d18:	4619      	mov	r1, r3
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 f848 	bl	8002db0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002d20:	e023      	b.n	8002d6a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002d22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d009      	beq.n	8002d42 <HAL_UART_IRQHandler+0x4ea>
 8002d2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d003      	beq.n	8002d42 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f000 f929 	bl	8002f92 <UART_Transmit_IT>
    return;
 8002d40:	e014      	b.n	8002d6c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002d42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d00e      	beq.n	8002d6c <HAL_UART_IRQHandler+0x514>
 8002d4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d008      	beq.n	8002d6c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f000 f969 	bl	8003032 <UART_EndTransmit_IT>
    return;
 8002d60:	e004      	b.n	8002d6c <HAL_UART_IRQHandler+0x514>
    return;
 8002d62:	bf00      	nop
 8002d64:	e002      	b.n	8002d6c <HAL_UART_IRQHandler+0x514>
      return;
 8002d66:	bf00      	nop
 8002d68:	e000      	b.n	8002d6c <HAL_UART_IRQHandler+0x514>
      return;
 8002d6a:	bf00      	nop
  }
}
 8002d6c:	37e8      	adds	r7, #232	; 0xe8
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop

08002d74 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002d7c:	bf00      	nop
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr

08002d88 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002d90:	bf00      	nop
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr

08002d9c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002da4:	bf00      	nop
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	460b      	mov	r3, r1
 8002dba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002dbc:	bf00      	nop
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b090      	sub	sp, #64	; 0x40
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	603b      	str	r3, [r7, #0]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dd8:	e050      	b.n	8002e7c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de0:	d04c      	beq.n	8002e7c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002de2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d007      	beq.n	8002df8 <UART_WaitOnFlagUntilTimeout+0x30>
 8002de8:	f7fe fbfc 	bl	80015e4 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d241      	bcs.n	8002e7c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	330c      	adds	r3, #12
 8002dfe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e02:	e853 3f00 	ldrex	r3, [r3]
 8002e06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	330c      	adds	r3, #12
 8002e16:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e18:	637a      	str	r2, [r7, #52]	; 0x34
 8002e1a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e20:	e841 2300 	strex	r3, r2, [r1]
 8002e24:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d1e5      	bne.n	8002df8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	3314      	adds	r3, #20
 8002e32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	e853 3f00 	ldrex	r3, [r3]
 8002e3a:	613b      	str	r3, [r7, #16]
   return(result);
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	f023 0301 	bic.w	r3, r3, #1
 8002e42:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	3314      	adds	r3, #20
 8002e4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e4c:	623a      	str	r2, [r7, #32]
 8002e4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e50:	69f9      	ldr	r1, [r7, #28]
 8002e52:	6a3a      	ldr	r2, [r7, #32]
 8002e54:	e841 2300 	strex	r3, r2, [r1]
 8002e58:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d1e5      	bne.n	8002e2c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2220      	movs	r2, #32
 8002e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2220      	movs	r2, #32
 8002e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e00f      	b.n	8002e9c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	4013      	ands	r3, r2
 8002e86:	68ba      	ldr	r2, [r7, #8]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	bf0c      	ite	eq
 8002e8c:	2301      	moveq	r3, #1
 8002e8e:	2300      	movne	r3, #0
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	461a      	mov	r2, r3
 8002e94:	79fb      	ldrb	r3, [r7, #7]
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d09f      	beq.n	8002dda <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e9a:	2300      	movs	r3, #0
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3740      	adds	r7, #64	; 0x40
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b095      	sub	sp, #84	; 0x54
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	330c      	adds	r3, #12
 8002eb2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eb6:	e853 3f00 	ldrex	r3, [r3]
 8002eba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ebe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002ec2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	330c      	adds	r3, #12
 8002eca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ecc:	643a      	str	r2, [r7, #64]	; 0x40
 8002ece:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ed0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002ed2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002ed4:	e841 2300 	strex	r3, r2, [r1]
 8002ed8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d1e5      	bne.n	8002eac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	3314      	adds	r3, #20
 8002ee6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ee8:	6a3b      	ldr	r3, [r7, #32]
 8002eea:	e853 3f00 	ldrex	r3, [r3]
 8002eee:	61fb      	str	r3, [r7, #28]
   return(result);
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	f023 0301 	bic.w	r3, r3, #1
 8002ef6:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	3314      	adds	r3, #20
 8002efe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f00:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f08:	e841 2300 	strex	r3, r2, [r1]
 8002f0c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d1e5      	bne.n	8002ee0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d119      	bne.n	8002f50 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	330c      	adds	r3, #12
 8002f22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	e853 3f00 	ldrex	r3, [r3]
 8002f2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	f023 0310 	bic.w	r3, r3, #16
 8002f32:	647b      	str	r3, [r7, #68]	; 0x44
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	330c      	adds	r3, #12
 8002f3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f3c:	61ba      	str	r2, [r7, #24]
 8002f3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f40:	6979      	ldr	r1, [r7, #20]
 8002f42:	69ba      	ldr	r2, [r7, #24]
 8002f44:	e841 2300 	strex	r3, r2, [r1]
 8002f48:	613b      	str	r3, [r7, #16]
   return(result);
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d1e5      	bne.n	8002f1c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2220      	movs	r2, #32
 8002f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002f5e:	bf00      	nop
 8002f60:	3754      	adds	r7, #84	; 0x54
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr

08002f6a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b084      	sub	sp, #16
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f76:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2200      	movs	r2, #0
 8002f82:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002f84:	68f8      	ldr	r0, [r7, #12]
 8002f86:	f7ff ff09 	bl	8002d9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f8a:	bf00      	nop
 8002f8c:	3710      	adds	r7, #16
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}

08002f92 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002f92:	b480      	push	{r7}
 8002f94:	b085      	sub	sp, #20
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	2b21      	cmp	r3, #33	; 0x21
 8002fa4:	d13e      	bne.n	8003024 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fae:	d114      	bne.n	8002fda <UART_Transmit_IT+0x48>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	691b      	ldr	r3, [r3, #16]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d110      	bne.n	8002fda <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a1b      	ldr	r3, [r3, #32]
 8002fbc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	881b      	ldrh	r3, [r3, #0]
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fcc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a1b      	ldr	r3, [r3, #32]
 8002fd2:	1c9a      	adds	r2, r3, #2
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	621a      	str	r2, [r3, #32]
 8002fd8:	e008      	b.n	8002fec <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6a1b      	ldr	r3, [r3, #32]
 8002fde:	1c59      	adds	r1, r3, #1
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	6211      	str	r1, [r2, #32]
 8002fe4:	781a      	ldrb	r2, [r3, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d10f      	bne.n	8003020 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	68da      	ldr	r2, [r3, #12]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800300e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	68da      	ldr	r2, [r3, #12]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800301e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003020:	2300      	movs	r3, #0
 8003022:	e000      	b.n	8003026 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003024:	2302      	movs	r3, #2
  }
}
 8003026:	4618      	mov	r0, r3
 8003028:	3714      	adds	r7, #20
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr

08003032 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003032:	b580      	push	{r7, lr}
 8003034:	b082      	sub	sp, #8
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	68da      	ldr	r2, [r3, #12]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003048:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2220      	movs	r2, #32
 800304e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f7ff fe8e 	bl	8002d74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	3708      	adds	r7, #8
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}

08003062 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003062:	b580      	push	{r7, lr}
 8003064:	b08c      	sub	sp, #48	; 0x30
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003070:	b2db      	uxtb	r3, r3
 8003072:	2b22      	cmp	r3, #34	; 0x22
 8003074:	f040 80ab 	bne.w	80031ce <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003080:	d117      	bne.n	80030b2 <UART_Receive_IT+0x50>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d113      	bne.n	80030b2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800308a:	2300      	movs	r3, #0
 800308c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003092:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	b29b      	uxth	r3, r3
 800309c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030a0:	b29a      	uxth	r2, r3
 80030a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030aa:	1c9a      	adds	r2, r3, #2
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	629a      	str	r2, [r3, #40]	; 0x28
 80030b0:	e026      	b.n	8003100 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80030b8:	2300      	movs	r3, #0
 80030ba:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030c4:	d007      	beq.n	80030d6 <UART_Receive_IT+0x74>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d10a      	bne.n	80030e4 <UART_Receive_IT+0x82>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	691b      	ldr	r3, [r3, #16]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d106      	bne.n	80030e4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	b2da      	uxtb	r2, r3
 80030de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030e0:	701a      	strb	r2, [r3, #0]
 80030e2:	e008      	b.n	80030f6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030f0:	b2da      	uxtb	r2, r3
 80030f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030f4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030fa:	1c5a      	adds	r2, r3, #1
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003104:	b29b      	uxth	r3, r3
 8003106:	3b01      	subs	r3, #1
 8003108:	b29b      	uxth	r3, r3
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	4619      	mov	r1, r3
 800310e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003110:	2b00      	cmp	r3, #0
 8003112:	d15a      	bne.n	80031ca <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68da      	ldr	r2, [r3, #12]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f022 0220 	bic.w	r2, r2, #32
 8003122:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68da      	ldr	r2, [r3, #12]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003132:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	695a      	ldr	r2, [r3, #20]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f022 0201 	bic.w	r2, r2, #1
 8003142:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2220      	movs	r2, #32
 8003148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003150:	2b01      	cmp	r3, #1
 8003152:	d135      	bne.n	80031c0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	330c      	adds	r3, #12
 8003160:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	e853 3f00 	ldrex	r3, [r3]
 8003168:	613b      	str	r3, [r7, #16]
   return(result);
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	f023 0310 	bic.w	r3, r3, #16
 8003170:	627b      	str	r3, [r7, #36]	; 0x24
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	330c      	adds	r3, #12
 8003178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800317a:	623a      	str	r2, [r7, #32]
 800317c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800317e:	69f9      	ldr	r1, [r7, #28]
 8003180:	6a3a      	ldr	r2, [r7, #32]
 8003182:	e841 2300 	strex	r3, r2, [r1]
 8003186:	61bb      	str	r3, [r7, #24]
   return(result);
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d1e5      	bne.n	800315a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0310 	and.w	r3, r3, #16
 8003198:	2b10      	cmp	r3, #16
 800319a:	d10a      	bne.n	80031b2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800319c:	2300      	movs	r3, #0
 800319e:	60fb      	str	r3, [r7, #12]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	60fb      	str	r3, [r7, #12]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	60fb      	str	r3, [r7, #12]
 80031b0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80031b6:	4619      	mov	r1, r3
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f7ff fdf9 	bl	8002db0 <HAL_UARTEx_RxEventCallback>
 80031be:	e002      	b.n	80031c6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f7ff fde1 	bl	8002d88 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80031c6:	2300      	movs	r3, #0
 80031c8:	e002      	b.n	80031d0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80031ca:	2300      	movs	r3, #0
 80031cc:	e000      	b.n	80031d0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80031ce:	2302      	movs	r3, #2
  }
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3730      	adds	r7, #48	; 0x30
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031dc:	b09f      	sub	sp, #124	; 0x7c
 80031de:	af00      	add	r7, sp, #0
 80031e0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	691b      	ldr	r3, [r3, #16]
 80031e8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80031ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031ee:	68d9      	ldr	r1, [r3, #12]
 80031f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	ea40 0301 	orr.w	r3, r0, r1
 80031f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80031fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031fc:	689a      	ldr	r2, [r3, #8]
 80031fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	431a      	orrs	r2, r3
 8003204:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003206:	695b      	ldr	r3, [r3, #20]
 8003208:	431a      	orrs	r2, r3
 800320a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800320c:	69db      	ldr	r3, [r3, #28]
 800320e:	4313      	orrs	r3, r2
 8003210:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003212:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800321c:	f021 010c 	bic.w	r1, r1, #12
 8003220:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003226:	430b      	orrs	r3, r1
 8003228:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800322a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	695b      	ldr	r3, [r3, #20]
 8003230:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003234:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003236:	6999      	ldr	r1, [r3, #24]
 8003238:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	ea40 0301 	orr.w	r3, r0, r1
 8003240:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003242:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	4bc5      	ldr	r3, [pc, #788]	; (800355c <UART_SetConfig+0x384>)
 8003248:	429a      	cmp	r2, r3
 800324a:	d004      	beq.n	8003256 <UART_SetConfig+0x7e>
 800324c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	4bc3      	ldr	r3, [pc, #780]	; (8003560 <UART_SetConfig+0x388>)
 8003252:	429a      	cmp	r2, r3
 8003254:	d103      	bne.n	800325e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003256:	f7ff f983 	bl	8002560 <HAL_RCC_GetPCLK2Freq>
 800325a:	6778      	str	r0, [r7, #116]	; 0x74
 800325c:	e002      	b.n	8003264 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800325e:	f7ff f96b 	bl	8002538 <HAL_RCC_GetPCLK1Freq>
 8003262:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003264:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003266:	69db      	ldr	r3, [r3, #28]
 8003268:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800326c:	f040 80b6 	bne.w	80033dc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003270:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003272:	461c      	mov	r4, r3
 8003274:	f04f 0500 	mov.w	r5, #0
 8003278:	4622      	mov	r2, r4
 800327a:	462b      	mov	r3, r5
 800327c:	1891      	adds	r1, r2, r2
 800327e:	6439      	str	r1, [r7, #64]	; 0x40
 8003280:	415b      	adcs	r3, r3
 8003282:	647b      	str	r3, [r7, #68]	; 0x44
 8003284:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003288:	1912      	adds	r2, r2, r4
 800328a:	eb45 0303 	adc.w	r3, r5, r3
 800328e:	f04f 0000 	mov.w	r0, #0
 8003292:	f04f 0100 	mov.w	r1, #0
 8003296:	00d9      	lsls	r1, r3, #3
 8003298:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800329c:	00d0      	lsls	r0, r2, #3
 800329e:	4602      	mov	r2, r0
 80032a0:	460b      	mov	r3, r1
 80032a2:	1911      	adds	r1, r2, r4
 80032a4:	6639      	str	r1, [r7, #96]	; 0x60
 80032a6:	416b      	adcs	r3, r5
 80032a8:	667b      	str	r3, [r7, #100]	; 0x64
 80032aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	461a      	mov	r2, r3
 80032b0:	f04f 0300 	mov.w	r3, #0
 80032b4:	1891      	adds	r1, r2, r2
 80032b6:	63b9      	str	r1, [r7, #56]	; 0x38
 80032b8:	415b      	adcs	r3, r3
 80032ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80032c0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80032c4:	f7fc ffdc 	bl	8000280 <__aeabi_uldivmod>
 80032c8:	4602      	mov	r2, r0
 80032ca:	460b      	mov	r3, r1
 80032cc:	4ba5      	ldr	r3, [pc, #660]	; (8003564 <UART_SetConfig+0x38c>)
 80032ce:	fba3 2302 	umull	r2, r3, r3, r2
 80032d2:	095b      	lsrs	r3, r3, #5
 80032d4:	011e      	lsls	r6, r3, #4
 80032d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032d8:	461c      	mov	r4, r3
 80032da:	f04f 0500 	mov.w	r5, #0
 80032de:	4622      	mov	r2, r4
 80032e0:	462b      	mov	r3, r5
 80032e2:	1891      	adds	r1, r2, r2
 80032e4:	6339      	str	r1, [r7, #48]	; 0x30
 80032e6:	415b      	adcs	r3, r3
 80032e8:	637b      	str	r3, [r7, #52]	; 0x34
 80032ea:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80032ee:	1912      	adds	r2, r2, r4
 80032f0:	eb45 0303 	adc.w	r3, r5, r3
 80032f4:	f04f 0000 	mov.w	r0, #0
 80032f8:	f04f 0100 	mov.w	r1, #0
 80032fc:	00d9      	lsls	r1, r3, #3
 80032fe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003302:	00d0      	lsls	r0, r2, #3
 8003304:	4602      	mov	r2, r0
 8003306:	460b      	mov	r3, r1
 8003308:	1911      	adds	r1, r2, r4
 800330a:	65b9      	str	r1, [r7, #88]	; 0x58
 800330c:	416b      	adcs	r3, r5
 800330e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003310:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	461a      	mov	r2, r3
 8003316:	f04f 0300 	mov.w	r3, #0
 800331a:	1891      	adds	r1, r2, r2
 800331c:	62b9      	str	r1, [r7, #40]	; 0x28
 800331e:	415b      	adcs	r3, r3
 8003320:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003322:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003326:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800332a:	f7fc ffa9 	bl	8000280 <__aeabi_uldivmod>
 800332e:	4602      	mov	r2, r0
 8003330:	460b      	mov	r3, r1
 8003332:	4b8c      	ldr	r3, [pc, #560]	; (8003564 <UART_SetConfig+0x38c>)
 8003334:	fba3 1302 	umull	r1, r3, r3, r2
 8003338:	095b      	lsrs	r3, r3, #5
 800333a:	2164      	movs	r1, #100	; 0x64
 800333c:	fb01 f303 	mul.w	r3, r1, r3
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	00db      	lsls	r3, r3, #3
 8003344:	3332      	adds	r3, #50	; 0x32
 8003346:	4a87      	ldr	r2, [pc, #540]	; (8003564 <UART_SetConfig+0x38c>)
 8003348:	fba2 2303 	umull	r2, r3, r2, r3
 800334c:	095b      	lsrs	r3, r3, #5
 800334e:	005b      	lsls	r3, r3, #1
 8003350:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003354:	441e      	add	r6, r3
 8003356:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003358:	4618      	mov	r0, r3
 800335a:	f04f 0100 	mov.w	r1, #0
 800335e:	4602      	mov	r2, r0
 8003360:	460b      	mov	r3, r1
 8003362:	1894      	adds	r4, r2, r2
 8003364:	623c      	str	r4, [r7, #32]
 8003366:	415b      	adcs	r3, r3
 8003368:	627b      	str	r3, [r7, #36]	; 0x24
 800336a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800336e:	1812      	adds	r2, r2, r0
 8003370:	eb41 0303 	adc.w	r3, r1, r3
 8003374:	f04f 0400 	mov.w	r4, #0
 8003378:	f04f 0500 	mov.w	r5, #0
 800337c:	00dd      	lsls	r5, r3, #3
 800337e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003382:	00d4      	lsls	r4, r2, #3
 8003384:	4622      	mov	r2, r4
 8003386:	462b      	mov	r3, r5
 8003388:	1814      	adds	r4, r2, r0
 800338a:	653c      	str	r4, [r7, #80]	; 0x50
 800338c:	414b      	adcs	r3, r1
 800338e:	657b      	str	r3, [r7, #84]	; 0x54
 8003390:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	461a      	mov	r2, r3
 8003396:	f04f 0300 	mov.w	r3, #0
 800339a:	1891      	adds	r1, r2, r2
 800339c:	61b9      	str	r1, [r7, #24]
 800339e:	415b      	adcs	r3, r3
 80033a0:	61fb      	str	r3, [r7, #28]
 80033a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033a6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80033aa:	f7fc ff69 	bl	8000280 <__aeabi_uldivmod>
 80033ae:	4602      	mov	r2, r0
 80033b0:	460b      	mov	r3, r1
 80033b2:	4b6c      	ldr	r3, [pc, #432]	; (8003564 <UART_SetConfig+0x38c>)
 80033b4:	fba3 1302 	umull	r1, r3, r3, r2
 80033b8:	095b      	lsrs	r3, r3, #5
 80033ba:	2164      	movs	r1, #100	; 0x64
 80033bc:	fb01 f303 	mul.w	r3, r1, r3
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	00db      	lsls	r3, r3, #3
 80033c4:	3332      	adds	r3, #50	; 0x32
 80033c6:	4a67      	ldr	r2, [pc, #412]	; (8003564 <UART_SetConfig+0x38c>)
 80033c8:	fba2 2303 	umull	r2, r3, r2, r3
 80033cc:	095b      	lsrs	r3, r3, #5
 80033ce:	f003 0207 	and.w	r2, r3, #7
 80033d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4432      	add	r2, r6
 80033d8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80033da:	e0b9      	b.n	8003550 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033de:	461c      	mov	r4, r3
 80033e0:	f04f 0500 	mov.w	r5, #0
 80033e4:	4622      	mov	r2, r4
 80033e6:	462b      	mov	r3, r5
 80033e8:	1891      	adds	r1, r2, r2
 80033ea:	6139      	str	r1, [r7, #16]
 80033ec:	415b      	adcs	r3, r3
 80033ee:	617b      	str	r3, [r7, #20]
 80033f0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80033f4:	1912      	adds	r2, r2, r4
 80033f6:	eb45 0303 	adc.w	r3, r5, r3
 80033fa:	f04f 0000 	mov.w	r0, #0
 80033fe:	f04f 0100 	mov.w	r1, #0
 8003402:	00d9      	lsls	r1, r3, #3
 8003404:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003408:	00d0      	lsls	r0, r2, #3
 800340a:	4602      	mov	r2, r0
 800340c:	460b      	mov	r3, r1
 800340e:	eb12 0804 	adds.w	r8, r2, r4
 8003412:	eb43 0905 	adc.w	r9, r3, r5
 8003416:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	4618      	mov	r0, r3
 800341c:	f04f 0100 	mov.w	r1, #0
 8003420:	f04f 0200 	mov.w	r2, #0
 8003424:	f04f 0300 	mov.w	r3, #0
 8003428:	008b      	lsls	r3, r1, #2
 800342a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800342e:	0082      	lsls	r2, r0, #2
 8003430:	4640      	mov	r0, r8
 8003432:	4649      	mov	r1, r9
 8003434:	f7fc ff24 	bl	8000280 <__aeabi_uldivmod>
 8003438:	4602      	mov	r2, r0
 800343a:	460b      	mov	r3, r1
 800343c:	4b49      	ldr	r3, [pc, #292]	; (8003564 <UART_SetConfig+0x38c>)
 800343e:	fba3 2302 	umull	r2, r3, r3, r2
 8003442:	095b      	lsrs	r3, r3, #5
 8003444:	011e      	lsls	r6, r3, #4
 8003446:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003448:	4618      	mov	r0, r3
 800344a:	f04f 0100 	mov.w	r1, #0
 800344e:	4602      	mov	r2, r0
 8003450:	460b      	mov	r3, r1
 8003452:	1894      	adds	r4, r2, r2
 8003454:	60bc      	str	r4, [r7, #8]
 8003456:	415b      	adcs	r3, r3
 8003458:	60fb      	str	r3, [r7, #12]
 800345a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800345e:	1812      	adds	r2, r2, r0
 8003460:	eb41 0303 	adc.w	r3, r1, r3
 8003464:	f04f 0400 	mov.w	r4, #0
 8003468:	f04f 0500 	mov.w	r5, #0
 800346c:	00dd      	lsls	r5, r3, #3
 800346e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003472:	00d4      	lsls	r4, r2, #3
 8003474:	4622      	mov	r2, r4
 8003476:	462b      	mov	r3, r5
 8003478:	1814      	adds	r4, r2, r0
 800347a:	64bc      	str	r4, [r7, #72]	; 0x48
 800347c:	414b      	adcs	r3, r1
 800347e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003480:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	4618      	mov	r0, r3
 8003486:	f04f 0100 	mov.w	r1, #0
 800348a:	f04f 0200 	mov.w	r2, #0
 800348e:	f04f 0300 	mov.w	r3, #0
 8003492:	008b      	lsls	r3, r1, #2
 8003494:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003498:	0082      	lsls	r2, r0, #2
 800349a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800349e:	f7fc feef 	bl	8000280 <__aeabi_uldivmod>
 80034a2:	4602      	mov	r2, r0
 80034a4:	460b      	mov	r3, r1
 80034a6:	4b2f      	ldr	r3, [pc, #188]	; (8003564 <UART_SetConfig+0x38c>)
 80034a8:	fba3 1302 	umull	r1, r3, r3, r2
 80034ac:	095b      	lsrs	r3, r3, #5
 80034ae:	2164      	movs	r1, #100	; 0x64
 80034b0:	fb01 f303 	mul.w	r3, r1, r3
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	011b      	lsls	r3, r3, #4
 80034b8:	3332      	adds	r3, #50	; 0x32
 80034ba:	4a2a      	ldr	r2, [pc, #168]	; (8003564 <UART_SetConfig+0x38c>)
 80034bc:	fba2 2303 	umull	r2, r3, r2, r3
 80034c0:	095b      	lsrs	r3, r3, #5
 80034c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034c6:	441e      	add	r6, r3
 80034c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034ca:	4618      	mov	r0, r3
 80034cc:	f04f 0100 	mov.w	r1, #0
 80034d0:	4602      	mov	r2, r0
 80034d2:	460b      	mov	r3, r1
 80034d4:	1894      	adds	r4, r2, r2
 80034d6:	603c      	str	r4, [r7, #0]
 80034d8:	415b      	adcs	r3, r3
 80034da:	607b      	str	r3, [r7, #4]
 80034dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80034e0:	1812      	adds	r2, r2, r0
 80034e2:	eb41 0303 	adc.w	r3, r1, r3
 80034e6:	f04f 0400 	mov.w	r4, #0
 80034ea:	f04f 0500 	mov.w	r5, #0
 80034ee:	00dd      	lsls	r5, r3, #3
 80034f0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80034f4:	00d4      	lsls	r4, r2, #3
 80034f6:	4622      	mov	r2, r4
 80034f8:	462b      	mov	r3, r5
 80034fa:	eb12 0a00 	adds.w	sl, r2, r0
 80034fe:	eb43 0b01 	adc.w	fp, r3, r1
 8003502:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	4618      	mov	r0, r3
 8003508:	f04f 0100 	mov.w	r1, #0
 800350c:	f04f 0200 	mov.w	r2, #0
 8003510:	f04f 0300 	mov.w	r3, #0
 8003514:	008b      	lsls	r3, r1, #2
 8003516:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800351a:	0082      	lsls	r2, r0, #2
 800351c:	4650      	mov	r0, sl
 800351e:	4659      	mov	r1, fp
 8003520:	f7fc feae 	bl	8000280 <__aeabi_uldivmod>
 8003524:	4602      	mov	r2, r0
 8003526:	460b      	mov	r3, r1
 8003528:	4b0e      	ldr	r3, [pc, #56]	; (8003564 <UART_SetConfig+0x38c>)
 800352a:	fba3 1302 	umull	r1, r3, r3, r2
 800352e:	095b      	lsrs	r3, r3, #5
 8003530:	2164      	movs	r1, #100	; 0x64
 8003532:	fb01 f303 	mul.w	r3, r1, r3
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	011b      	lsls	r3, r3, #4
 800353a:	3332      	adds	r3, #50	; 0x32
 800353c:	4a09      	ldr	r2, [pc, #36]	; (8003564 <UART_SetConfig+0x38c>)
 800353e:	fba2 2303 	umull	r2, r3, r2, r3
 8003542:	095b      	lsrs	r3, r3, #5
 8003544:	f003 020f 	and.w	r2, r3, #15
 8003548:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4432      	add	r2, r6
 800354e:	609a      	str	r2, [r3, #8]
}
 8003550:	bf00      	nop
 8003552:	377c      	adds	r7, #124	; 0x7c
 8003554:	46bd      	mov	sp, r7
 8003556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800355a:	bf00      	nop
 800355c:	40011000 	.word	0x40011000
 8003560:	40011400 	.word	0x40011400
 8003564:	51eb851f 	.word	0x51eb851f

08003568 <__errno>:
 8003568:	4b01      	ldr	r3, [pc, #4]	; (8003570 <__errno+0x8>)
 800356a:	6818      	ldr	r0, [r3, #0]
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop
 8003570:	20000014 	.word	0x20000014

08003574 <__libc_init_array>:
 8003574:	b570      	push	{r4, r5, r6, lr}
 8003576:	4d0d      	ldr	r5, [pc, #52]	; (80035ac <__libc_init_array+0x38>)
 8003578:	4c0d      	ldr	r4, [pc, #52]	; (80035b0 <__libc_init_array+0x3c>)
 800357a:	1b64      	subs	r4, r4, r5
 800357c:	10a4      	asrs	r4, r4, #2
 800357e:	2600      	movs	r6, #0
 8003580:	42a6      	cmp	r6, r4
 8003582:	d109      	bne.n	8003598 <__libc_init_array+0x24>
 8003584:	4d0b      	ldr	r5, [pc, #44]	; (80035b4 <__libc_init_array+0x40>)
 8003586:	4c0c      	ldr	r4, [pc, #48]	; (80035b8 <__libc_init_array+0x44>)
 8003588:	f001 f9be 	bl	8004908 <_init>
 800358c:	1b64      	subs	r4, r4, r5
 800358e:	10a4      	asrs	r4, r4, #2
 8003590:	2600      	movs	r6, #0
 8003592:	42a6      	cmp	r6, r4
 8003594:	d105      	bne.n	80035a2 <__libc_init_array+0x2e>
 8003596:	bd70      	pop	{r4, r5, r6, pc}
 8003598:	f855 3b04 	ldr.w	r3, [r5], #4
 800359c:	4798      	blx	r3
 800359e:	3601      	adds	r6, #1
 80035a0:	e7ee      	b.n	8003580 <__libc_init_array+0xc>
 80035a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80035a6:	4798      	blx	r3
 80035a8:	3601      	adds	r6, #1
 80035aa:	e7f2      	b.n	8003592 <__libc_init_array+0x1e>
 80035ac:	08004b70 	.word	0x08004b70
 80035b0:	08004b70 	.word	0x08004b70
 80035b4:	08004b70 	.word	0x08004b70
 80035b8:	08004b74 	.word	0x08004b74

080035bc <memset>:
 80035bc:	4402      	add	r2, r0
 80035be:	4603      	mov	r3, r0
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d100      	bne.n	80035c6 <memset+0xa>
 80035c4:	4770      	bx	lr
 80035c6:	f803 1b01 	strb.w	r1, [r3], #1
 80035ca:	e7f9      	b.n	80035c0 <memset+0x4>

080035cc <iprintf>:
 80035cc:	b40f      	push	{r0, r1, r2, r3}
 80035ce:	4b0a      	ldr	r3, [pc, #40]	; (80035f8 <iprintf+0x2c>)
 80035d0:	b513      	push	{r0, r1, r4, lr}
 80035d2:	681c      	ldr	r4, [r3, #0]
 80035d4:	b124      	cbz	r4, 80035e0 <iprintf+0x14>
 80035d6:	69a3      	ldr	r3, [r4, #24]
 80035d8:	b913      	cbnz	r3, 80035e0 <iprintf+0x14>
 80035da:	4620      	mov	r0, r4
 80035dc:	f000 fa7e 	bl	8003adc <__sinit>
 80035e0:	ab05      	add	r3, sp, #20
 80035e2:	9a04      	ldr	r2, [sp, #16]
 80035e4:	68a1      	ldr	r1, [r4, #8]
 80035e6:	9301      	str	r3, [sp, #4]
 80035e8:	4620      	mov	r0, r4
 80035ea:	f000 fdab 	bl	8004144 <_vfiprintf_r>
 80035ee:	b002      	add	sp, #8
 80035f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035f4:	b004      	add	sp, #16
 80035f6:	4770      	bx	lr
 80035f8:	20000014 	.word	0x20000014

080035fc <_puts_r>:
 80035fc:	b570      	push	{r4, r5, r6, lr}
 80035fe:	460e      	mov	r6, r1
 8003600:	4605      	mov	r5, r0
 8003602:	b118      	cbz	r0, 800360c <_puts_r+0x10>
 8003604:	6983      	ldr	r3, [r0, #24]
 8003606:	b90b      	cbnz	r3, 800360c <_puts_r+0x10>
 8003608:	f000 fa68 	bl	8003adc <__sinit>
 800360c:	69ab      	ldr	r3, [r5, #24]
 800360e:	68ac      	ldr	r4, [r5, #8]
 8003610:	b913      	cbnz	r3, 8003618 <_puts_r+0x1c>
 8003612:	4628      	mov	r0, r5
 8003614:	f000 fa62 	bl	8003adc <__sinit>
 8003618:	4b2c      	ldr	r3, [pc, #176]	; (80036cc <_puts_r+0xd0>)
 800361a:	429c      	cmp	r4, r3
 800361c:	d120      	bne.n	8003660 <_puts_r+0x64>
 800361e:	686c      	ldr	r4, [r5, #4]
 8003620:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003622:	07db      	lsls	r3, r3, #31
 8003624:	d405      	bmi.n	8003632 <_puts_r+0x36>
 8003626:	89a3      	ldrh	r3, [r4, #12]
 8003628:	0598      	lsls	r0, r3, #22
 800362a:	d402      	bmi.n	8003632 <_puts_r+0x36>
 800362c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800362e:	f000 faf3 	bl	8003c18 <__retarget_lock_acquire_recursive>
 8003632:	89a3      	ldrh	r3, [r4, #12]
 8003634:	0719      	lsls	r1, r3, #28
 8003636:	d51d      	bpl.n	8003674 <_puts_r+0x78>
 8003638:	6923      	ldr	r3, [r4, #16]
 800363a:	b1db      	cbz	r3, 8003674 <_puts_r+0x78>
 800363c:	3e01      	subs	r6, #1
 800363e:	68a3      	ldr	r3, [r4, #8]
 8003640:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003644:	3b01      	subs	r3, #1
 8003646:	60a3      	str	r3, [r4, #8]
 8003648:	bb39      	cbnz	r1, 800369a <_puts_r+0x9e>
 800364a:	2b00      	cmp	r3, #0
 800364c:	da38      	bge.n	80036c0 <_puts_r+0xc4>
 800364e:	4622      	mov	r2, r4
 8003650:	210a      	movs	r1, #10
 8003652:	4628      	mov	r0, r5
 8003654:	f000 f868 	bl	8003728 <__swbuf_r>
 8003658:	3001      	adds	r0, #1
 800365a:	d011      	beq.n	8003680 <_puts_r+0x84>
 800365c:	250a      	movs	r5, #10
 800365e:	e011      	b.n	8003684 <_puts_r+0x88>
 8003660:	4b1b      	ldr	r3, [pc, #108]	; (80036d0 <_puts_r+0xd4>)
 8003662:	429c      	cmp	r4, r3
 8003664:	d101      	bne.n	800366a <_puts_r+0x6e>
 8003666:	68ac      	ldr	r4, [r5, #8]
 8003668:	e7da      	b.n	8003620 <_puts_r+0x24>
 800366a:	4b1a      	ldr	r3, [pc, #104]	; (80036d4 <_puts_r+0xd8>)
 800366c:	429c      	cmp	r4, r3
 800366e:	bf08      	it	eq
 8003670:	68ec      	ldreq	r4, [r5, #12]
 8003672:	e7d5      	b.n	8003620 <_puts_r+0x24>
 8003674:	4621      	mov	r1, r4
 8003676:	4628      	mov	r0, r5
 8003678:	f000 f8a8 	bl	80037cc <__swsetup_r>
 800367c:	2800      	cmp	r0, #0
 800367e:	d0dd      	beq.n	800363c <_puts_r+0x40>
 8003680:	f04f 35ff 	mov.w	r5, #4294967295
 8003684:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003686:	07da      	lsls	r2, r3, #31
 8003688:	d405      	bmi.n	8003696 <_puts_r+0x9a>
 800368a:	89a3      	ldrh	r3, [r4, #12]
 800368c:	059b      	lsls	r3, r3, #22
 800368e:	d402      	bmi.n	8003696 <_puts_r+0x9a>
 8003690:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003692:	f000 fac2 	bl	8003c1a <__retarget_lock_release_recursive>
 8003696:	4628      	mov	r0, r5
 8003698:	bd70      	pop	{r4, r5, r6, pc}
 800369a:	2b00      	cmp	r3, #0
 800369c:	da04      	bge.n	80036a8 <_puts_r+0xac>
 800369e:	69a2      	ldr	r2, [r4, #24]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	dc06      	bgt.n	80036b2 <_puts_r+0xb6>
 80036a4:	290a      	cmp	r1, #10
 80036a6:	d004      	beq.n	80036b2 <_puts_r+0xb6>
 80036a8:	6823      	ldr	r3, [r4, #0]
 80036aa:	1c5a      	adds	r2, r3, #1
 80036ac:	6022      	str	r2, [r4, #0]
 80036ae:	7019      	strb	r1, [r3, #0]
 80036b0:	e7c5      	b.n	800363e <_puts_r+0x42>
 80036b2:	4622      	mov	r2, r4
 80036b4:	4628      	mov	r0, r5
 80036b6:	f000 f837 	bl	8003728 <__swbuf_r>
 80036ba:	3001      	adds	r0, #1
 80036bc:	d1bf      	bne.n	800363e <_puts_r+0x42>
 80036be:	e7df      	b.n	8003680 <_puts_r+0x84>
 80036c0:	6823      	ldr	r3, [r4, #0]
 80036c2:	250a      	movs	r5, #10
 80036c4:	1c5a      	adds	r2, r3, #1
 80036c6:	6022      	str	r2, [r4, #0]
 80036c8:	701d      	strb	r5, [r3, #0]
 80036ca:	e7db      	b.n	8003684 <_puts_r+0x88>
 80036cc:	08004af4 	.word	0x08004af4
 80036d0:	08004b14 	.word	0x08004b14
 80036d4:	08004ad4 	.word	0x08004ad4

080036d8 <puts>:
 80036d8:	4b02      	ldr	r3, [pc, #8]	; (80036e4 <puts+0xc>)
 80036da:	4601      	mov	r1, r0
 80036dc:	6818      	ldr	r0, [r3, #0]
 80036de:	f7ff bf8d 	b.w	80035fc <_puts_r>
 80036e2:	bf00      	nop
 80036e4:	20000014 	.word	0x20000014

080036e8 <siprintf>:
 80036e8:	b40e      	push	{r1, r2, r3}
 80036ea:	b500      	push	{lr}
 80036ec:	b09c      	sub	sp, #112	; 0x70
 80036ee:	ab1d      	add	r3, sp, #116	; 0x74
 80036f0:	9002      	str	r0, [sp, #8]
 80036f2:	9006      	str	r0, [sp, #24]
 80036f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80036f8:	4809      	ldr	r0, [pc, #36]	; (8003720 <siprintf+0x38>)
 80036fa:	9107      	str	r1, [sp, #28]
 80036fc:	9104      	str	r1, [sp, #16]
 80036fe:	4909      	ldr	r1, [pc, #36]	; (8003724 <siprintf+0x3c>)
 8003700:	f853 2b04 	ldr.w	r2, [r3], #4
 8003704:	9105      	str	r1, [sp, #20]
 8003706:	6800      	ldr	r0, [r0, #0]
 8003708:	9301      	str	r3, [sp, #4]
 800370a:	a902      	add	r1, sp, #8
 800370c:	f000 fbf0 	bl	8003ef0 <_svfiprintf_r>
 8003710:	9b02      	ldr	r3, [sp, #8]
 8003712:	2200      	movs	r2, #0
 8003714:	701a      	strb	r2, [r3, #0]
 8003716:	b01c      	add	sp, #112	; 0x70
 8003718:	f85d eb04 	ldr.w	lr, [sp], #4
 800371c:	b003      	add	sp, #12
 800371e:	4770      	bx	lr
 8003720:	20000014 	.word	0x20000014
 8003724:	ffff0208 	.word	0xffff0208

08003728 <__swbuf_r>:
 8003728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800372a:	460e      	mov	r6, r1
 800372c:	4614      	mov	r4, r2
 800372e:	4605      	mov	r5, r0
 8003730:	b118      	cbz	r0, 800373a <__swbuf_r+0x12>
 8003732:	6983      	ldr	r3, [r0, #24]
 8003734:	b90b      	cbnz	r3, 800373a <__swbuf_r+0x12>
 8003736:	f000 f9d1 	bl	8003adc <__sinit>
 800373a:	4b21      	ldr	r3, [pc, #132]	; (80037c0 <__swbuf_r+0x98>)
 800373c:	429c      	cmp	r4, r3
 800373e:	d12b      	bne.n	8003798 <__swbuf_r+0x70>
 8003740:	686c      	ldr	r4, [r5, #4]
 8003742:	69a3      	ldr	r3, [r4, #24]
 8003744:	60a3      	str	r3, [r4, #8]
 8003746:	89a3      	ldrh	r3, [r4, #12]
 8003748:	071a      	lsls	r2, r3, #28
 800374a:	d52f      	bpl.n	80037ac <__swbuf_r+0x84>
 800374c:	6923      	ldr	r3, [r4, #16]
 800374e:	b36b      	cbz	r3, 80037ac <__swbuf_r+0x84>
 8003750:	6923      	ldr	r3, [r4, #16]
 8003752:	6820      	ldr	r0, [r4, #0]
 8003754:	1ac0      	subs	r0, r0, r3
 8003756:	6963      	ldr	r3, [r4, #20]
 8003758:	b2f6      	uxtb	r6, r6
 800375a:	4283      	cmp	r3, r0
 800375c:	4637      	mov	r7, r6
 800375e:	dc04      	bgt.n	800376a <__swbuf_r+0x42>
 8003760:	4621      	mov	r1, r4
 8003762:	4628      	mov	r0, r5
 8003764:	f000 f926 	bl	80039b4 <_fflush_r>
 8003768:	bb30      	cbnz	r0, 80037b8 <__swbuf_r+0x90>
 800376a:	68a3      	ldr	r3, [r4, #8]
 800376c:	3b01      	subs	r3, #1
 800376e:	60a3      	str	r3, [r4, #8]
 8003770:	6823      	ldr	r3, [r4, #0]
 8003772:	1c5a      	adds	r2, r3, #1
 8003774:	6022      	str	r2, [r4, #0]
 8003776:	701e      	strb	r6, [r3, #0]
 8003778:	6963      	ldr	r3, [r4, #20]
 800377a:	3001      	adds	r0, #1
 800377c:	4283      	cmp	r3, r0
 800377e:	d004      	beq.n	800378a <__swbuf_r+0x62>
 8003780:	89a3      	ldrh	r3, [r4, #12]
 8003782:	07db      	lsls	r3, r3, #31
 8003784:	d506      	bpl.n	8003794 <__swbuf_r+0x6c>
 8003786:	2e0a      	cmp	r6, #10
 8003788:	d104      	bne.n	8003794 <__swbuf_r+0x6c>
 800378a:	4621      	mov	r1, r4
 800378c:	4628      	mov	r0, r5
 800378e:	f000 f911 	bl	80039b4 <_fflush_r>
 8003792:	b988      	cbnz	r0, 80037b8 <__swbuf_r+0x90>
 8003794:	4638      	mov	r0, r7
 8003796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003798:	4b0a      	ldr	r3, [pc, #40]	; (80037c4 <__swbuf_r+0x9c>)
 800379a:	429c      	cmp	r4, r3
 800379c:	d101      	bne.n	80037a2 <__swbuf_r+0x7a>
 800379e:	68ac      	ldr	r4, [r5, #8]
 80037a0:	e7cf      	b.n	8003742 <__swbuf_r+0x1a>
 80037a2:	4b09      	ldr	r3, [pc, #36]	; (80037c8 <__swbuf_r+0xa0>)
 80037a4:	429c      	cmp	r4, r3
 80037a6:	bf08      	it	eq
 80037a8:	68ec      	ldreq	r4, [r5, #12]
 80037aa:	e7ca      	b.n	8003742 <__swbuf_r+0x1a>
 80037ac:	4621      	mov	r1, r4
 80037ae:	4628      	mov	r0, r5
 80037b0:	f000 f80c 	bl	80037cc <__swsetup_r>
 80037b4:	2800      	cmp	r0, #0
 80037b6:	d0cb      	beq.n	8003750 <__swbuf_r+0x28>
 80037b8:	f04f 37ff 	mov.w	r7, #4294967295
 80037bc:	e7ea      	b.n	8003794 <__swbuf_r+0x6c>
 80037be:	bf00      	nop
 80037c0:	08004af4 	.word	0x08004af4
 80037c4:	08004b14 	.word	0x08004b14
 80037c8:	08004ad4 	.word	0x08004ad4

080037cc <__swsetup_r>:
 80037cc:	4b32      	ldr	r3, [pc, #200]	; (8003898 <__swsetup_r+0xcc>)
 80037ce:	b570      	push	{r4, r5, r6, lr}
 80037d0:	681d      	ldr	r5, [r3, #0]
 80037d2:	4606      	mov	r6, r0
 80037d4:	460c      	mov	r4, r1
 80037d6:	b125      	cbz	r5, 80037e2 <__swsetup_r+0x16>
 80037d8:	69ab      	ldr	r3, [r5, #24]
 80037da:	b913      	cbnz	r3, 80037e2 <__swsetup_r+0x16>
 80037dc:	4628      	mov	r0, r5
 80037de:	f000 f97d 	bl	8003adc <__sinit>
 80037e2:	4b2e      	ldr	r3, [pc, #184]	; (800389c <__swsetup_r+0xd0>)
 80037e4:	429c      	cmp	r4, r3
 80037e6:	d10f      	bne.n	8003808 <__swsetup_r+0x3c>
 80037e8:	686c      	ldr	r4, [r5, #4]
 80037ea:	89a3      	ldrh	r3, [r4, #12]
 80037ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80037f0:	0719      	lsls	r1, r3, #28
 80037f2:	d42c      	bmi.n	800384e <__swsetup_r+0x82>
 80037f4:	06dd      	lsls	r5, r3, #27
 80037f6:	d411      	bmi.n	800381c <__swsetup_r+0x50>
 80037f8:	2309      	movs	r3, #9
 80037fa:	6033      	str	r3, [r6, #0]
 80037fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003800:	81a3      	strh	r3, [r4, #12]
 8003802:	f04f 30ff 	mov.w	r0, #4294967295
 8003806:	e03e      	b.n	8003886 <__swsetup_r+0xba>
 8003808:	4b25      	ldr	r3, [pc, #148]	; (80038a0 <__swsetup_r+0xd4>)
 800380a:	429c      	cmp	r4, r3
 800380c:	d101      	bne.n	8003812 <__swsetup_r+0x46>
 800380e:	68ac      	ldr	r4, [r5, #8]
 8003810:	e7eb      	b.n	80037ea <__swsetup_r+0x1e>
 8003812:	4b24      	ldr	r3, [pc, #144]	; (80038a4 <__swsetup_r+0xd8>)
 8003814:	429c      	cmp	r4, r3
 8003816:	bf08      	it	eq
 8003818:	68ec      	ldreq	r4, [r5, #12]
 800381a:	e7e6      	b.n	80037ea <__swsetup_r+0x1e>
 800381c:	0758      	lsls	r0, r3, #29
 800381e:	d512      	bpl.n	8003846 <__swsetup_r+0x7a>
 8003820:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003822:	b141      	cbz	r1, 8003836 <__swsetup_r+0x6a>
 8003824:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003828:	4299      	cmp	r1, r3
 800382a:	d002      	beq.n	8003832 <__swsetup_r+0x66>
 800382c:	4630      	mov	r0, r6
 800382e:	f000 fa59 	bl	8003ce4 <_free_r>
 8003832:	2300      	movs	r3, #0
 8003834:	6363      	str	r3, [r4, #52]	; 0x34
 8003836:	89a3      	ldrh	r3, [r4, #12]
 8003838:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800383c:	81a3      	strh	r3, [r4, #12]
 800383e:	2300      	movs	r3, #0
 8003840:	6063      	str	r3, [r4, #4]
 8003842:	6923      	ldr	r3, [r4, #16]
 8003844:	6023      	str	r3, [r4, #0]
 8003846:	89a3      	ldrh	r3, [r4, #12]
 8003848:	f043 0308 	orr.w	r3, r3, #8
 800384c:	81a3      	strh	r3, [r4, #12]
 800384e:	6923      	ldr	r3, [r4, #16]
 8003850:	b94b      	cbnz	r3, 8003866 <__swsetup_r+0x9a>
 8003852:	89a3      	ldrh	r3, [r4, #12]
 8003854:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003858:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800385c:	d003      	beq.n	8003866 <__swsetup_r+0x9a>
 800385e:	4621      	mov	r1, r4
 8003860:	4630      	mov	r0, r6
 8003862:	f000 f9ff 	bl	8003c64 <__smakebuf_r>
 8003866:	89a0      	ldrh	r0, [r4, #12]
 8003868:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800386c:	f010 0301 	ands.w	r3, r0, #1
 8003870:	d00a      	beq.n	8003888 <__swsetup_r+0xbc>
 8003872:	2300      	movs	r3, #0
 8003874:	60a3      	str	r3, [r4, #8]
 8003876:	6963      	ldr	r3, [r4, #20]
 8003878:	425b      	negs	r3, r3
 800387a:	61a3      	str	r3, [r4, #24]
 800387c:	6923      	ldr	r3, [r4, #16]
 800387e:	b943      	cbnz	r3, 8003892 <__swsetup_r+0xc6>
 8003880:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003884:	d1ba      	bne.n	80037fc <__swsetup_r+0x30>
 8003886:	bd70      	pop	{r4, r5, r6, pc}
 8003888:	0781      	lsls	r1, r0, #30
 800388a:	bf58      	it	pl
 800388c:	6963      	ldrpl	r3, [r4, #20]
 800388e:	60a3      	str	r3, [r4, #8]
 8003890:	e7f4      	b.n	800387c <__swsetup_r+0xb0>
 8003892:	2000      	movs	r0, #0
 8003894:	e7f7      	b.n	8003886 <__swsetup_r+0xba>
 8003896:	bf00      	nop
 8003898:	20000014 	.word	0x20000014
 800389c:	08004af4 	.word	0x08004af4
 80038a0:	08004b14 	.word	0x08004b14
 80038a4:	08004ad4 	.word	0x08004ad4

080038a8 <__sflush_r>:
 80038a8:	898a      	ldrh	r2, [r1, #12]
 80038aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038ae:	4605      	mov	r5, r0
 80038b0:	0710      	lsls	r0, r2, #28
 80038b2:	460c      	mov	r4, r1
 80038b4:	d458      	bmi.n	8003968 <__sflush_r+0xc0>
 80038b6:	684b      	ldr	r3, [r1, #4]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	dc05      	bgt.n	80038c8 <__sflush_r+0x20>
 80038bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80038be:	2b00      	cmp	r3, #0
 80038c0:	dc02      	bgt.n	80038c8 <__sflush_r+0x20>
 80038c2:	2000      	movs	r0, #0
 80038c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80038c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80038ca:	2e00      	cmp	r6, #0
 80038cc:	d0f9      	beq.n	80038c2 <__sflush_r+0x1a>
 80038ce:	2300      	movs	r3, #0
 80038d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80038d4:	682f      	ldr	r7, [r5, #0]
 80038d6:	602b      	str	r3, [r5, #0]
 80038d8:	d032      	beq.n	8003940 <__sflush_r+0x98>
 80038da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80038dc:	89a3      	ldrh	r3, [r4, #12]
 80038de:	075a      	lsls	r2, r3, #29
 80038e0:	d505      	bpl.n	80038ee <__sflush_r+0x46>
 80038e2:	6863      	ldr	r3, [r4, #4]
 80038e4:	1ac0      	subs	r0, r0, r3
 80038e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80038e8:	b10b      	cbz	r3, 80038ee <__sflush_r+0x46>
 80038ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80038ec:	1ac0      	subs	r0, r0, r3
 80038ee:	2300      	movs	r3, #0
 80038f0:	4602      	mov	r2, r0
 80038f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80038f4:	6a21      	ldr	r1, [r4, #32]
 80038f6:	4628      	mov	r0, r5
 80038f8:	47b0      	blx	r6
 80038fa:	1c43      	adds	r3, r0, #1
 80038fc:	89a3      	ldrh	r3, [r4, #12]
 80038fe:	d106      	bne.n	800390e <__sflush_r+0x66>
 8003900:	6829      	ldr	r1, [r5, #0]
 8003902:	291d      	cmp	r1, #29
 8003904:	d82c      	bhi.n	8003960 <__sflush_r+0xb8>
 8003906:	4a2a      	ldr	r2, [pc, #168]	; (80039b0 <__sflush_r+0x108>)
 8003908:	40ca      	lsrs	r2, r1
 800390a:	07d6      	lsls	r6, r2, #31
 800390c:	d528      	bpl.n	8003960 <__sflush_r+0xb8>
 800390e:	2200      	movs	r2, #0
 8003910:	6062      	str	r2, [r4, #4]
 8003912:	04d9      	lsls	r1, r3, #19
 8003914:	6922      	ldr	r2, [r4, #16]
 8003916:	6022      	str	r2, [r4, #0]
 8003918:	d504      	bpl.n	8003924 <__sflush_r+0x7c>
 800391a:	1c42      	adds	r2, r0, #1
 800391c:	d101      	bne.n	8003922 <__sflush_r+0x7a>
 800391e:	682b      	ldr	r3, [r5, #0]
 8003920:	b903      	cbnz	r3, 8003924 <__sflush_r+0x7c>
 8003922:	6560      	str	r0, [r4, #84]	; 0x54
 8003924:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003926:	602f      	str	r7, [r5, #0]
 8003928:	2900      	cmp	r1, #0
 800392a:	d0ca      	beq.n	80038c2 <__sflush_r+0x1a>
 800392c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003930:	4299      	cmp	r1, r3
 8003932:	d002      	beq.n	800393a <__sflush_r+0x92>
 8003934:	4628      	mov	r0, r5
 8003936:	f000 f9d5 	bl	8003ce4 <_free_r>
 800393a:	2000      	movs	r0, #0
 800393c:	6360      	str	r0, [r4, #52]	; 0x34
 800393e:	e7c1      	b.n	80038c4 <__sflush_r+0x1c>
 8003940:	6a21      	ldr	r1, [r4, #32]
 8003942:	2301      	movs	r3, #1
 8003944:	4628      	mov	r0, r5
 8003946:	47b0      	blx	r6
 8003948:	1c41      	adds	r1, r0, #1
 800394a:	d1c7      	bne.n	80038dc <__sflush_r+0x34>
 800394c:	682b      	ldr	r3, [r5, #0]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d0c4      	beq.n	80038dc <__sflush_r+0x34>
 8003952:	2b1d      	cmp	r3, #29
 8003954:	d001      	beq.n	800395a <__sflush_r+0xb2>
 8003956:	2b16      	cmp	r3, #22
 8003958:	d101      	bne.n	800395e <__sflush_r+0xb6>
 800395a:	602f      	str	r7, [r5, #0]
 800395c:	e7b1      	b.n	80038c2 <__sflush_r+0x1a>
 800395e:	89a3      	ldrh	r3, [r4, #12]
 8003960:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003964:	81a3      	strh	r3, [r4, #12]
 8003966:	e7ad      	b.n	80038c4 <__sflush_r+0x1c>
 8003968:	690f      	ldr	r7, [r1, #16]
 800396a:	2f00      	cmp	r7, #0
 800396c:	d0a9      	beq.n	80038c2 <__sflush_r+0x1a>
 800396e:	0793      	lsls	r3, r2, #30
 8003970:	680e      	ldr	r6, [r1, #0]
 8003972:	bf08      	it	eq
 8003974:	694b      	ldreq	r3, [r1, #20]
 8003976:	600f      	str	r7, [r1, #0]
 8003978:	bf18      	it	ne
 800397a:	2300      	movne	r3, #0
 800397c:	eba6 0807 	sub.w	r8, r6, r7
 8003980:	608b      	str	r3, [r1, #8]
 8003982:	f1b8 0f00 	cmp.w	r8, #0
 8003986:	dd9c      	ble.n	80038c2 <__sflush_r+0x1a>
 8003988:	6a21      	ldr	r1, [r4, #32]
 800398a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800398c:	4643      	mov	r3, r8
 800398e:	463a      	mov	r2, r7
 8003990:	4628      	mov	r0, r5
 8003992:	47b0      	blx	r6
 8003994:	2800      	cmp	r0, #0
 8003996:	dc06      	bgt.n	80039a6 <__sflush_r+0xfe>
 8003998:	89a3      	ldrh	r3, [r4, #12]
 800399a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800399e:	81a3      	strh	r3, [r4, #12]
 80039a0:	f04f 30ff 	mov.w	r0, #4294967295
 80039a4:	e78e      	b.n	80038c4 <__sflush_r+0x1c>
 80039a6:	4407      	add	r7, r0
 80039a8:	eba8 0800 	sub.w	r8, r8, r0
 80039ac:	e7e9      	b.n	8003982 <__sflush_r+0xda>
 80039ae:	bf00      	nop
 80039b0:	20400001 	.word	0x20400001

080039b4 <_fflush_r>:
 80039b4:	b538      	push	{r3, r4, r5, lr}
 80039b6:	690b      	ldr	r3, [r1, #16]
 80039b8:	4605      	mov	r5, r0
 80039ba:	460c      	mov	r4, r1
 80039bc:	b913      	cbnz	r3, 80039c4 <_fflush_r+0x10>
 80039be:	2500      	movs	r5, #0
 80039c0:	4628      	mov	r0, r5
 80039c2:	bd38      	pop	{r3, r4, r5, pc}
 80039c4:	b118      	cbz	r0, 80039ce <_fflush_r+0x1a>
 80039c6:	6983      	ldr	r3, [r0, #24]
 80039c8:	b90b      	cbnz	r3, 80039ce <_fflush_r+0x1a>
 80039ca:	f000 f887 	bl	8003adc <__sinit>
 80039ce:	4b14      	ldr	r3, [pc, #80]	; (8003a20 <_fflush_r+0x6c>)
 80039d0:	429c      	cmp	r4, r3
 80039d2:	d11b      	bne.n	8003a0c <_fflush_r+0x58>
 80039d4:	686c      	ldr	r4, [r5, #4]
 80039d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d0ef      	beq.n	80039be <_fflush_r+0xa>
 80039de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80039e0:	07d0      	lsls	r0, r2, #31
 80039e2:	d404      	bmi.n	80039ee <_fflush_r+0x3a>
 80039e4:	0599      	lsls	r1, r3, #22
 80039e6:	d402      	bmi.n	80039ee <_fflush_r+0x3a>
 80039e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80039ea:	f000 f915 	bl	8003c18 <__retarget_lock_acquire_recursive>
 80039ee:	4628      	mov	r0, r5
 80039f0:	4621      	mov	r1, r4
 80039f2:	f7ff ff59 	bl	80038a8 <__sflush_r>
 80039f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80039f8:	07da      	lsls	r2, r3, #31
 80039fa:	4605      	mov	r5, r0
 80039fc:	d4e0      	bmi.n	80039c0 <_fflush_r+0xc>
 80039fe:	89a3      	ldrh	r3, [r4, #12]
 8003a00:	059b      	lsls	r3, r3, #22
 8003a02:	d4dd      	bmi.n	80039c0 <_fflush_r+0xc>
 8003a04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003a06:	f000 f908 	bl	8003c1a <__retarget_lock_release_recursive>
 8003a0a:	e7d9      	b.n	80039c0 <_fflush_r+0xc>
 8003a0c:	4b05      	ldr	r3, [pc, #20]	; (8003a24 <_fflush_r+0x70>)
 8003a0e:	429c      	cmp	r4, r3
 8003a10:	d101      	bne.n	8003a16 <_fflush_r+0x62>
 8003a12:	68ac      	ldr	r4, [r5, #8]
 8003a14:	e7df      	b.n	80039d6 <_fflush_r+0x22>
 8003a16:	4b04      	ldr	r3, [pc, #16]	; (8003a28 <_fflush_r+0x74>)
 8003a18:	429c      	cmp	r4, r3
 8003a1a:	bf08      	it	eq
 8003a1c:	68ec      	ldreq	r4, [r5, #12]
 8003a1e:	e7da      	b.n	80039d6 <_fflush_r+0x22>
 8003a20:	08004af4 	.word	0x08004af4
 8003a24:	08004b14 	.word	0x08004b14
 8003a28:	08004ad4 	.word	0x08004ad4

08003a2c <std>:
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	b510      	push	{r4, lr}
 8003a30:	4604      	mov	r4, r0
 8003a32:	e9c0 3300 	strd	r3, r3, [r0]
 8003a36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003a3a:	6083      	str	r3, [r0, #8]
 8003a3c:	8181      	strh	r1, [r0, #12]
 8003a3e:	6643      	str	r3, [r0, #100]	; 0x64
 8003a40:	81c2      	strh	r2, [r0, #14]
 8003a42:	6183      	str	r3, [r0, #24]
 8003a44:	4619      	mov	r1, r3
 8003a46:	2208      	movs	r2, #8
 8003a48:	305c      	adds	r0, #92	; 0x5c
 8003a4a:	f7ff fdb7 	bl	80035bc <memset>
 8003a4e:	4b05      	ldr	r3, [pc, #20]	; (8003a64 <std+0x38>)
 8003a50:	6263      	str	r3, [r4, #36]	; 0x24
 8003a52:	4b05      	ldr	r3, [pc, #20]	; (8003a68 <std+0x3c>)
 8003a54:	62a3      	str	r3, [r4, #40]	; 0x28
 8003a56:	4b05      	ldr	r3, [pc, #20]	; (8003a6c <std+0x40>)
 8003a58:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003a5a:	4b05      	ldr	r3, [pc, #20]	; (8003a70 <std+0x44>)
 8003a5c:	6224      	str	r4, [r4, #32]
 8003a5e:	6323      	str	r3, [r4, #48]	; 0x30
 8003a60:	bd10      	pop	{r4, pc}
 8003a62:	bf00      	nop
 8003a64:	080046ed 	.word	0x080046ed
 8003a68:	0800470f 	.word	0x0800470f
 8003a6c:	08004747 	.word	0x08004747
 8003a70:	0800476b 	.word	0x0800476b

08003a74 <_cleanup_r>:
 8003a74:	4901      	ldr	r1, [pc, #4]	; (8003a7c <_cleanup_r+0x8>)
 8003a76:	f000 b8af 	b.w	8003bd8 <_fwalk_reent>
 8003a7a:	bf00      	nop
 8003a7c:	080039b5 	.word	0x080039b5

08003a80 <__sfmoreglue>:
 8003a80:	b570      	push	{r4, r5, r6, lr}
 8003a82:	1e4a      	subs	r2, r1, #1
 8003a84:	2568      	movs	r5, #104	; 0x68
 8003a86:	4355      	muls	r5, r2
 8003a88:	460e      	mov	r6, r1
 8003a8a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003a8e:	f000 f979 	bl	8003d84 <_malloc_r>
 8003a92:	4604      	mov	r4, r0
 8003a94:	b140      	cbz	r0, 8003aa8 <__sfmoreglue+0x28>
 8003a96:	2100      	movs	r1, #0
 8003a98:	e9c0 1600 	strd	r1, r6, [r0]
 8003a9c:	300c      	adds	r0, #12
 8003a9e:	60a0      	str	r0, [r4, #8]
 8003aa0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003aa4:	f7ff fd8a 	bl	80035bc <memset>
 8003aa8:	4620      	mov	r0, r4
 8003aaa:	bd70      	pop	{r4, r5, r6, pc}

08003aac <__sfp_lock_acquire>:
 8003aac:	4801      	ldr	r0, [pc, #4]	; (8003ab4 <__sfp_lock_acquire+0x8>)
 8003aae:	f000 b8b3 	b.w	8003c18 <__retarget_lock_acquire_recursive>
 8003ab2:	bf00      	nop
 8003ab4:	20003fec 	.word	0x20003fec

08003ab8 <__sfp_lock_release>:
 8003ab8:	4801      	ldr	r0, [pc, #4]	; (8003ac0 <__sfp_lock_release+0x8>)
 8003aba:	f000 b8ae 	b.w	8003c1a <__retarget_lock_release_recursive>
 8003abe:	bf00      	nop
 8003ac0:	20003fec 	.word	0x20003fec

08003ac4 <__sinit_lock_acquire>:
 8003ac4:	4801      	ldr	r0, [pc, #4]	; (8003acc <__sinit_lock_acquire+0x8>)
 8003ac6:	f000 b8a7 	b.w	8003c18 <__retarget_lock_acquire_recursive>
 8003aca:	bf00      	nop
 8003acc:	20003fe7 	.word	0x20003fe7

08003ad0 <__sinit_lock_release>:
 8003ad0:	4801      	ldr	r0, [pc, #4]	; (8003ad8 <__sinit_lock_release+0x8>)
 8003ad2:	f000 b8a2 	b.w	8003c1a <__retarget_lock_release_recursive>
 8003ad6:	bf00      	nop
 8003ad8:	20003fe7 	.word	0x20003fe7

08003adc <__sinit>:
 8003adc:	b510      	push	{r4, lr}
 8003ade:	4604      	mov	r4, r0
 8003ae0:	f7ff fff0 	bl	8003ac4 <__sinit_lock_acquire>
 8003ae4:	69a3      	ldr	r3, [r4, #24]
 8003ae6:	b11b      	cbz	r3, 8003af0 <__sinit+0x14>
 8003ae8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003aec:	f7ff bff0 	b.w	8003ad0 <__sinit_lock_release>
 8003af0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003af4:	6523      	str	r3, [r4, #80]	; 0x50
 8003af6:	4b13      	ldr	r3, [pc, #76]	; (8003b44 <__sinit+0x68>)
 8003af8:	4a13      	ldr	r2, [pc, #76]	; (8003b48 <__sinit+0x6c>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	62a2      	str	r2, [r4, #40]	; 0x28
 8003afe:	42a3      	cmp	r3, r4
 8003b00:	bf04      	itt	eq
 8003b02:	2301      	moveq	r3, #1
 8003b04:	61a3      	streq	r3, [r4, #24]
 8003b06:	4620      	mov	r0, r4
 8003b08:	f000 f820 	bl	8003b4c <__sfp>
 8003b0c:	6060      	str	r0, [r4, #4]
 8003b0e:	4620      	mov	r0, r4
 8003b10:	f000 f81c 	bl	8003b4c <__sfp>
 8003b14:	60a0      	str	r0, [r4, #8]
 8003b16:	4620      	mov	r0, r4
 8003b18:	f000 f818 	bl	8003b4c <__sfp>
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	60e0      	str	r0, [r4, #12]
 8003b20:	2104      	movs	r1, #4
 8003b22:	6860      	ldr	r0, [r4, #4]
 8003b24:	f7ff ff82 	bl	8003a2c <std>
 8003b28:	68a0      	ldr	r0, [r4, #8]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	2109      	movs	r1, #9
 8003b2e:	f7ff ff7d 	bl	8003a2c <std>
 8003b32:	68e0      	ldr	r0, [r4, #12]
 8003b34:	2202      	movs	r2, #2
 8003b36:	2112      	movs	r1, #18
 8003b38:	f7ff ff78 	bl	8003a2c <std>
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	61a3      	str	r3, [r4, #24]
 8003b40:	e7d2      	b.n	8003ae8 <__sinit+0xc>
 8003b42:	bf00      	nop
 8003b44:	08004ad0 	.word	0x08004ad0
 8003b48:	08003a75 	.word	0x08003a75

08003b4c <__sfp>:
 8003b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b4e:	4607      	mov	r7, r0
 8003b50:	f7ff ffac 	bl	8003aac <__sfp_lock_acquire>
 8003b54:	4b1e      	ldr	r3, [pc, #120]	; (8003bd0 <__sfp+0x84>)
 8003b56:	681e      	ldr	r6, [r3, #0]
 8003b58:	69b3      	ldr	r3, [r6, #24]
 8003b5a:	b913      	cbnz	r3, 8003b62 <__sfp+0x16>
 8003b5c:	4630      	mov	r0, r6
 8003b5e:	f7ff ffbd 	bl	8003adc <__sinit>
 8003b62:	3648      	adds	r6, #72	; 0x48
 8003b64:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	d503      	bpl.n	8003b74 <__sfp+0x28>
 8003b6c:	6833      	ldr	r3, [r6, #0]
 8003b6e:	b30b      	cbz	r3, 8003bb4 <__sfp+0x68>
 8003b70:	6836      	ldr	r6, [r6, #0]
 8003b72:	e7f7      	b.n	8003b64 <__sfp+0x18>
 8003b74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003b78:	b9d5      	cbnz	r5, 8003bb0 <__sfp+0x64>
 8003b7a:	4b16      	ldr	r3, [pc, #88]	; (8003bd4 <__sfp+0x88>)
 8003b7c:	60e3      	str	r3, [r4, #12]
 8003b7e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003b82:	6665      	str	r5, [r4, #100]	; 0x64
 8003b84:	f000 f847 	bl	8003c16 <__retarget_lock_init_recursive>
 8003b88:	f7ff ff96 	bl	8003ab8 <__sfp_lock_release>
 8003b8c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003b90:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003b94:	6025      	str	r5, [r4, #0]
 8003b96:	61a5      	str	r5, [r4, #24]
 8003b98:	2208      	movs	r2, #8
 8003b9a:	4629      	mov	r1, r5
 8003b9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003ba0:	f7ff fd0c 	bl	80035bc <memset>
 8003ba4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003ba8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003bac:	4620      	mov	r0, r4
 8003bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bb0:	3468      	adds	r4, #104	; 0x68
 8003bb2:	e7d9      	b.n	8003b68 <__sfp+0x1c>
 8003bb4:	2104      	movs	r1, #4
 8003bb6:	4638      	mov	r0, r7
 8003bb8:	f7ff ff62 	bl	8003a80 <__sfmoreglue>
 8003bbc:	4604      	mov	r4, r0
 8003bbe:	6030      	str	r0, [r6, #0]
 8003bc0:	2800      	cmp	r0, #0
 8003bc2:	d1d5      	bne.n	8003b70 <__sfp+0x24>
 8003bc4:	f7ff ff78 	bl	8003ab8 <__sfp_lock_release>
 8003bc8:	230c      	movs	r3, #12
 8003bca:	603b      	str	r3, [r7, #0]
 8003bcc:	e7ee      	b.n	8003bac <__sfp+0x60>
 8003bce:	bf00      	nop
 8003bd0:	08004ad0 	.word	0x08004ad0
 8003bd4:	ffff0001 	.word	0xffff0001

08003bd8 <_fwalk_reent>:
 8003bd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003bdc:	4606      	mov	r6, r0
 8003bde:	4688      	mov	r8, r1
 8003be0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003be4:	2700      	movs	r7, #0
 8003be6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003bea:	f1b9 0901 	subs.w	r9, r9, #1
 8003bee:	d505      	bpl.n	8003bfc <_fwalk_reent+0x24>
 8003bf0:	6824      	ldr	r4, [r4, #0]
 8003bf2:	2c00      	cmp	r4, #0
 8003bf4:	d1f7      	bne.n	8003be6 <_fwalk_reent+0xe>
 8003bf6:	4638      	mov	r0, r7
 8003bf8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003bfc:	89ab      	ldrh	r3, [r5, #12]
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d907      	bls.n	8003c12 <_fwalk_reent+0x3a>
 8003c02:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003c06:	3301      	adds	r3, #1
 8003c08:	d003      	beq.n	8003c12 <_fwalk_reent+0x3a>
 8003c0a:	4629      	mov	r1, r5
 8003c0c:	4630      	mov	r0, r6
 8003c0e:	47c0      	blx	r8
 8003c10:	4307      	orrs	r7, r0
 8003c12:	3568      	adds	r5, #104	; 0x68
 8003c14:	e7e9      	b.n	8003bea <_fwalk_reent+0x12>

08003c16 <__retarget_lock_init_recursive>:
 8003c16:	4770      	bx	lr

08003c18 <__retarget_lock_acquire_recursive>:
 8003c18:	4770      	bx	lr

08003c1a <__retarget_lock_release_recursive>:
 8003c1a:	4770      	bx	lr

08003c1c <__swhatbuf_r>:
 8003c1c:	b570      	push	{r4, r5, r6, lr}
 8003c1e:	460e      	mov	r6, r1
 8003c20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c24:	2900      	cmp	r1, #0
 8003c26:	b096      	sub	sp, #88	; 0x58
 8003c28:	4614      	mov	r4, r2
 8003c2a:	461d      	mov	r5, r3
 8003c2c:	da07      	bge.n	8003c3e <__swhatbuf_r+0x22>
 8003c2e:	2300      	movs	r3, #0
 8003c30:	602b      	str	r3, [r5, #0]
 8003c32:	89b3      	ldrh	r3, [r6, #12]
 8003c34:	061a      	lsls	r2, r3, #24
 8003c36:	d410      	bmi.n	8003c5a <__swhatbuf_r+0x3e>
 8003c38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c3c:	e00e      	b.n	8003c5c <__swhatbuf_r+0x40>
 8003c3e:	466a      	mov	r2, sp
 8003c40:	f000 fdba 	bl	80047b8 <_fstat_r>
 8003c44:	2800      	cmp	r0, #0
 8003c46:	dbf2      	blt.n	8003c2e <__swhatbuf_r+0x12>
 8003c48:	9a01      	ldr	r2, [sp, #4]
 8003c4a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003c4e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003c52:	425a      	negs	r2, r3
 8003c54:	415a      	adcs	r2, r3
 8003c56:	602a      	str	r2, [r5, #0]
 8003c58:	e7ee      	b.n	8003c38 <__swhatbuf_r+0x1c>
 8003c5a:	2340      	movs	r3, #64	; 0x40
 8003c5c:	2000      	movs	r0, #0
 8003c5e:	6023      	str	r3, [r4, #0]
 8003c60:	b016      	add	sp, #88	; 0x58
 8003c62:	bd70      	pop	{r4, r5, r6, pc}

08003c64 <__smakebuf_r>:
 8003c64:	898b      	ldrh	r3, [r1, #12]
 8003c66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003c68:	079d      	lsls	r5, r3, #30
 8003c6a:	4606      	mov	r6, r0
 8003c6c:	460c      	mov	r4, r1
 8003c6e:	d507      	bpl.n	8003c80 <__smakebuf_r+0x1c>
 8003c70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003c74:	6023      	str	r3, [r4, #0]
 8003c76:	6123      	str	r3, [r4, #16]
 8003c78:	2301      	movs	r3, #1
 8003c7a:	6163      	str	r3, [r4, #20]
 8003c7c:	b002      	add	sp, #8
 8003c7e:	bd70      	pop	{r4, r5, r6, pc}
 8003c80:	ab01      	add	r3, sp, #4
 8003c82:	466a      	mov	r2, sp
 8003c84:	f7ff ffca 	bl	8003c1c <__swhatbuf_r>
 8003c88:	9900      	ldr	r1, [sp, #0]
 8003c8a:	4605      	mov	r5, r0
 8003c8c:	4630      	mov	r0, r6
 8003c8e:	f000 f879 	bl	8003d84 <_malloc_r>
 8003c92:	b948      	cbnz	r0, 8003ca8 <__smakebuf_r+0x44>
 8003c94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c98:	059a      	lsls	r2, r3, #22
 8003c9a:	d4ef      	bmi.n	8003c7c <__smakebuf_r+0x18>
 8003c9c:	f023 0303 	bic.w	r3, r3, #3
 8003ca0:	f043 0302 	orr.w	r3, r3, #2
 8003ca4:	81a3      	strh	r3, [r4, #12]
 8003ca6:	e7e3      	b.n	8003c70 <__smakebuf_r+0xc>
 8003ca8:	4b0d      	ldr	r3, [pc, #52]	; (8003ce0 <__smakebuf_r+0x7c>)
 8003caa:	62b3      	str	r3, [r6, #40]	; 0x28
 8003cac:	89a3      	ldrh	r3, [r4, #12]
 8003cae:	6020      	str	r0, [r4, #0]
 8003cb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cb4:	81a3      	strh	r3, [r4, #12]
 8003cb6:	9b00      	ldr	r3, [sp, #0]
 8003cb8:	6163      	str	r3, [r4, #20]
 8003cba:	9b01      	ldr	r3, [sp, #4]
 8003cbc:	6120      	str	r0, [r4, #16]
 8003cbe:	b15b      	cbz	r3, 8003cd8 <__smakebuf_r+0x74>
 8003cc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003cc4:	4630      	mov	r0, r6
 8003cc6:	f000 fd89 	bl	80047dc <_isatty_r>
 8003cca:	b128      	cbz	r0, 8003cd8 <__smakebuf_r+0x74>
 8003ccc:	89a3      	ldrh	r3, [r4, #12]
 8003cce:	f023 0303 	bic.w	r3, r3, #3
 8003cd2:	f043 0301 	orr.w	r3, r3, #1
 8003cd6:	81a3      	strh	r3, [r4, #12]
 8003cd8:	89a0      	ldrh	r0, [r4, #12]
 8003cda:	4305      	orrs	r5, r0
 8003cdc:	81a5      	strh	r5, [r4, #12]
 8003cde:	e7cd      	b.n	8003c7c <__smakebuf_r+0x18>
 8003ce0:	08003a75 	.word	0x08003a75

08003ce4 <_free_r>:
 8003ce4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003ce6:	2900      	cmp	r1, #0
 8003ce8:	d048      	beq.n	8003d7c <_free_r+0x98>
 8003cea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003cee:	9001      	str	r0, [sp, #4]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	f1a1 0404 	sub.w	r4, r1, #4
 8003cf6:	bfb8      	it	lt
 8003cf8:	18e4      	addlt	r4, r4, r3
 8003cfa:	f000 fdb9 	bl	8004870 <__malloc_lock>
 8003cfe:	4a20      	ldr	r2, [pc, #128]	; (8003d80 <_free_r+0x9c>)
 8003d00:	9801      	ldr	r0, [sp, #4]
 8003d02:	6813      	ldr	r3, [r2, #0]
 8003d04:	4615      	mov	r5, r2
 8003d06:	b933      	cbnz	r3, 8003d16 <_free_r+0x32>
 8003d08:	6063      	str	r3, [r4, #4]
 8003d0a:	6014      	str	r4, [r2, #0]
 8003d0c:	b003      	add	sp, #12
 8003d0e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003d12:	f000 bdb3 	b.w	800487c <__malloc_unlock>
 8003d16:	42a3      	cmp	r3, r4
 8003d18:	d90b      	bls.n	8003d32 <_free_r+0x4e>
 8003d1a:	6821      	ldr	r1, [r4, #0]
 8003d1c:	1862      	adds	r2, r4, r1
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	bf04      	itt	eq
 8003d22:	681a      	ldreq	r2, [r3, #0]
 8003d24:	685b      	ldreq	r3, [r3, #4]
 8003d26:	6063      	str	r3, [r4, #4]
 8003d28:	bf04      	itt	eq
 8003d2a:	1852      	addeq	r2, r2, r1
 8003d2c:	6022      	streq	r2, [r4, #0]
 8003d2e:	602c      	str	r4, [r5, #0]
 8003d30:	e7ec      	b.n	8003d0c <_free_r+0x28>
 8003d32:	461a      	mov	r2, r3
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	b10b      	cbz	r3, 8003d3c <_free_r+0x58>
 8003d38:	42a3      	cmp	r3, r4
 8003d3a:	d9fa      	bls.n	8003d32 <_free_r+0x4e>
 8003d3c:	6811      	ldr	r1, [r2, #0]
 8003d3e:	1855      	adds	r5, r2, r1
 8003d40:	42a5      	cmp	r5, r4
 8003d42:	d10b      	bne.n	8003d5c <_free_r+0x78>
 8003d44:	6824      	ldr	r4, [r4, #0]
 8003d46:	4421      	add	r1, r4
 8003d48:	1854      	adds	r4, r2, r1
 8003d4a:	42a3      	cmp	r3, r4
 8003d4c:	6011      	str	r1, [r2, #0]
 8003d4e:	d1dd      	bne.n	8003d0c <_free_r+0x28>
 8003d50:	681c      	ldr	r4, [r3, #0]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	6053      	str	r3, [r2, #4]
 8003d56:	4421      	add	r1, r4
 8003d58:	6011      	str	r1, [r2, #0]
 8003d5a:	e7d7      	b.n	8003d0c <_free_r+0x28>
 8003d5c:	d902      	bls.n	8003d64 <_free_r+0x80>
 8003d5e:	230c      	movs	r3, #12
 8003d60:	6003      	str	r3, [r0, #0]
 8003d62:	e7d3      	b.n	8003d0c <_free_r+0x28>
 8003d64:	6825      	ldr	r5, [r4, #0]
 8003d66:	1961      	adds	r1, r4, r5
 8003d68:	428b      	cmp	r3, r1
 8003d6a:	bf04      	itt	eq
 8003d6c:	6819      	ldreq	r1, [r3, #0]
 8003d6e:	685b      	ldreq	r3, [r3, #4]
 8003d70:	6063      	str	r3, [r4, #4]
 8003d72:	bf04      	itt	eq
 8003d74:	1949      	addeq	r1, r1, r5
 8003d76:	6021      	streq	r1, [r4, #0]
 8003d78:	6054      	str	r4, [r2, #4]
 8003d7a:	e7c7      	b.n	8003d0c <_free_r+0x28>
 8003d7c:	b003      	add	sp, #12
 8003d7e:	bd30      	pop	{r4, r5, pc}
 8003d80:	200000c0 	.word	0x200000c0

08003d84 <_malloc_r>:
 8003d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d86:	1ccd      	adds	r5, r1, #3
 8003d88:	f025 0503 	bic.w	r5, r5, #3
 8003d8c:	3508      	adds	r5, #8
 8003d8e:	2d0c      	cmp	r5, #12
 8003d90:	bf38      	it	cc
 8003d92:	250c      	movcc	r5, #12
 8003d94:	2d00      	cmp	r5, #0
 8003d96:	4606      	mov	r6, r0
 8003d98:	db01      	blt.n	8003d9e <_malloc_r+0x1a>
 8003d9a:	42a9      	cmp	r1, r5
 8003d9c:	d903      	bls.n	8003da6 <_malloc_r+0x22>
 8003d9e:	230c      	movs	r3, #12
 8003da0:	6033      	str	r3, [r6, #0]
 8003da2:	2000      	movs	r0, #0
 8003da4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003da6:	f000 fd63 	bl	8004870 <__malloc_lock>
 8003daa:	4921      	ldr	r1, [pc, #132]	; (8003e30 <_malloc_r+0xac>)
 8003dac:	680a      	ldr	r2, [r1, #0]
 8003dae:	4614      	mov	r4, r2
 8003db0:	b99c      	cbnz	r4, 8003dda <_malloc_r+0x56>
 8003db2:	4f20      	ldr	r7, [pc, #128]	; (8003e34 <_malloc_r+0xb0>)
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	b923      	cbnz	r3, 8003dc2 <_malloc_r+0x3e>
 8003db8:	4621      	mov	r1, r4
 8003dba:	4630      	mov	r0, r6
 8003dbc:	f000 fc86 	bl	80046cc <_sbrk_r>
 8003dc0:	6038      	str	r0, [r7, #0]
 8003dc2:	4629      	mov	r1, r5
 8003dc4:	4630      	mov	r0, r6
 8003dc6:	f000 fc81 	bl	80046cc <_sbrk_r>
 8003dca:	1c43      	adds	r3, r0, #1
 8003dcc:	d123      	bne.n	8003e16 <_malloc_r+0x92>
 8003dce:	230c      	movs	r3, #12
 8003dd0:	6033      	str	r3, [r6, #0]
 8003dd2:	4630      	mov	r0, r6
 8003dd4:	f000 fd52 	bl	800487c <__malloc_unlock>
 8003dd8:	e7e3      	b.n	8003da2 <_malloc_r+0x1e>
 8003dda:	6823      	ldr	r3, [r4, #0]
 8003ddc:	1b5b      	subs	r3, r3, r5
 8003dde:	d417      	bmi.n	8003e10 <_malloc_r+0x8c>
 8003de0:	2b0b      	cmp	r3, #11
 8003de2:	d903      	bls.n	8003dec <_malloc_r+0x68>
 8003de4:	6023      	str	r3, [r4, #0]
 8003de6:	441c      	add	r4, r3
 8003de8:	6025      	str	r5, [r4, #0]
 8003dea:	e004      	b.n	8003df6 <_malloc_r+0x72>
 8003dec:	6863      	ldr	r3, [r4, #4]
 8003dee:	42a2      	cmp	r2, r4
 8003df0:	bf0c      	ite	eq
 8003df2:	600b      	streq	r3, [r1, #0]
 8003df4:	6053      	strne	r3, [r2, #4]
 8003df6:	4630      	mov	r0, r6
 8003df8:	f000 fd40 	bl	800487c <__malloc_unlock>
 8003dfc:	f104 000b 	add.w	r0, r4, #11
 8003e00:	1d23      	adds	r3, r4, #4
 8003e02:	f020 0007 	bic.w	r0, r0, #7
 8003e06:	1ac2      	subs	r2, r0, r3
 8003e08:	d0cc      	beq.n	8003da4 <_malloc_r+0x20>
 8003e0a:	1a1b      	subs	r3, r3, r0
 8003e0c:	50a3      	str	r3, [r4, r2]
 8003e0e:	e7c9      	b.n	8003da4 <_malloc_r+0x20>
 8003e10:	4622      	mov	r2, r4
 8003e12:	6864      	ldr	r4, [r4, #4]
 8003e14:	e7cc      	b.n	8003db0 <_malloc_r+0x2c>
 8003e16:	1cc4      	adds	r4, r0, #3
 8003e18:	f024 0403 	bic.w	r4, r4, #3
 8003e1c:	42a0      	cmp	r0, r4
 8003e1e:	d0e3      	beq.n	8003de8 <_malloc_r+0x64>
 8003e20:	1a21      	subs	r1, r4, r0
 8003e22:	4630      	mov	r0, r6
 8003e24:	f000 fc52 	bl	80046cc <_sbrk_r>
 8003e28:	3001      	adds	r0, #1
 8003e2a:	d1dd      	bne.n	8003de8 <_malloc_r+0x64>
 8003e2c:	e7cf      	b.n	8003dce <_malloc_r+0x4a>
 8003e2e:	bf00      	nop
 8003e30:	200000c0 	.word	0x200000c0
 8003e34:	200000c4 	.word	0x200000c4

08003e38 <__ssputs_r>:
 8003e38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e3c:	688e      	ldr	r6, [r1, #8]
 8003e3e:	429e      	cmp	r6, r3
 8003e40:	4682      	mov	sl, r0
 8003e42:	460c      	mov	r4, r1
 8003e44:	4690      	mov	r8, r2
 8003e46:	461f      	mov	r7, r3
 8003e48:	d838      	bhi.n	8003ebc <__ssputs_r+0x84>
 8003e4a:	898a      	ldrh	r2, [r1, #12]
 8003e4c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003e50:	d032      	beq.n	8003eb8 <__ssputs_r+0x80>
 8003e52:	6825      	ldr	r5, [r4, #0]
 8003e54:	6909      	ldr	r1, [r1, #16]
 8003e56:	eba5 0901 	sub.w	r9, r5, r1
 8003e5a:	6965      	ldr	r5, [r4, #20]
 8003e5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003e60:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003e64:	3301      	adds	r3, #1
 8003e66:	444b      	add	r3, r9
 8003e68:	106d      	asrs	r5, r5, #1
 8003e6a:	429d      	cmp	r5, r3
 8003e6c:	bf38      	it	cc
 8003e6e:	461d      	movcc	r5, r3
 8003e70:	0553      	lsls	r3, r2, #21
 8003e72:	d531      	bpl.n	8003ed8 <__ssputs_r+0xa0>
 8003e74:	4629      	mov	r1, r5
 8003e76:	f7ff ff85 	bl	8003d84 <_malloc_r>
 8003e7a:	4606      	mov	r6, r0
 8003e7c:	b950      	cbnz	r0, 8003e94 <__ssputs_r+0x5c>
 8003e7e:	230c      	movs	r3, #12
 8003e80:	f8ca 3000 	str.w	r3, [sl]
 8003e84:	89a3      	ldrh	r3, [r4, #12]
 8003e86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e8a:	81a3      	strh	r3, [r4, #12]
 8003e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e94:	6921      	ldr	r1, [r4, #16]
 8003e96:	464a      	mov	r2, r9
 8003e98:	f000 fcc2 	bl	8004820 <memcpy>
 8003e9c:	89a3      	ldrh	r3, [r4, #12]
 8003e9e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003ea2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ea6:	81a3      	strh	r3, [r4, #12]
 8003ea8:	6126      	str	r6, [r4, #16]
 8003eaa:	6165      	str	r5, [r4, #20]
 8003eac:	444e      	add	r6, r9
 8003eae:	eba5 0509 	sub.w	r5, r5, r9
 8003eb2:	6026      	str	r6, [r4, #0]
 8003eb4:	60a5      	str	r5, [r4, #8]
 8003eb6:	463e      	mov	r6, r7
 8003eb8:	42be      	cmp	r6, r7
 8003eba:	d900      	bls.n	8003ebe <__ssputs_r+0x86>
 8003ebc:	463e      	mov	r6, r7
 8003ebe:	4632      	mov	r2, r6
 8003ec0:	6820      	ldr	r0, [r4, #0]
 8003ec2:	4641      	mov	r1, r8
 8003ec4:	f000 fcba 	bl	800483c <memmove>
 8003ec8:	68a3      	ldr	r3, [r4, #8]
 8003eca:	6822      	ldr	r2, [r4, #0]
 8003ecc:	1b9b      	subs	r3, r3, r6
 8003ece:	4432      	add	r2, r6
 8003ed0:	60a3      	str	r3, [r4, #8]
 8003ed2:	6022      	str	r2, [r4, #0]
 8003ed4:	2000      	movs	r0, #0
 8003ed6:	e7db      	b.n	8003e90 <__ssputs_r+0x58>
 8003ed8:	462a      	mov	r2, r5
 8003eda:	f000 fcd5 	bl	8004888 <_realloc_r>
 8003ede:	4606      	mov	r6, r0
 8003ee0:	2800      	cmp	r0, #0
 8003ee2:	d1e1      	bne.n	8003ea8 <__ssputs_r+0x70>
 8003ee4:	6921      	ldr	r1, [r4, #16]
 8003ee6:	4650      	mov	r0, sl
 8003ee8:	f7ff fefc 	bl	8003ce4 <_free_r>
 8003eec:	e7c7      	b.n	8003e7e <__ssputs_r+0x46>
	...

08003ef0 <_svfiprintf_r>:
 8003ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ef4:	4698      	mov	r8, r3
 8003ef6:	898b      	ldrh	r3, [r1, #12]
 8003ef8:	061b      	lsls	r3, r3, #24
 8003efa:	b09d      	sub	sp, #116	; 0x74
 8003efc:	4607      	mov	r7, r0
 8003efe:	460d      	mov	r5, r1
 8003f00:	4614      	mov	r4, r2
 8003f02:	d50e      	bpl.n	8003f22 <_svfiprintf_r+0x32>
 8003f04:	690b      	ldr	r3, [r1, #16]
 8003f06:	b963      	cbnz	r3, 8003f22 <_svfiprintf_r+0x32>
 8003f08:	2140      	movs	r1, #64	; 0x40
 8003f0a:	f7ff ff3b 	bl	8003d84 <_malloc_r>
 8003f0e:	6028      	str	r0, [r5, #0]
 8003f10:	6128      	str	r0, [r5, #16]
 8003f12:	b920      	cbnz	r0, 8003f1e <_svfiprintf_r+0x2e>
 8003f14:	230c      	movs	r3, #12
 8003f16:	603b      	str	r3, [r7, #0]
 8003f18:	f04f 30ff 	mov.w	r0, #4294967295
 8003f1c:	e0d1      	b.n	80040c2 <_svfiprintf_r+0x1d2>
 8003f1e:	2340      	movs	r3, #64	; 0x40
 8003f20:	616b      	str	r3, [r5, #20]
 8003f22:	2300      	movs	r3, #0
 8003f24:	9309      	str	r3, [sp, #36]	; 0x24
 8003f26:	2320      	movs	r3, #32
 8003f28:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003f2c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f30:	2330      	movs	r3, #48	; 0x30
 8003f32:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80040dc <_svfiprintf_r+0x1ec>
 8003f36:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003f3a:	f04f 0901 	mov.w	r9, #1
 8003f3e:	4623      	mov	r3, r4
 8003f40:	469a      	mov	sl, r3
 8003f42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f46:	b10a      	cbz	r2, 8003f4c <_svfiprintf_r+0x5c>
 8003f48:	2a25      	cmp	r2, #37	; 0x25
 8003f4a:	d1f9      	bne.n	8003f40 <_svfiprintf_r+0x50>
 8003f4c:	ebba 0b04 	subs.w	fp, sl, r4
 8003f50:	d00b      	beq.n	8003f6a <_svfiprintf_r+0x7a>
 8003f52:	465b      	mov	r3, fp
 8003f54:	4622      	mov	r2, r4
 8003f56:	4629      	mov	r1, r5
 8003f58:	4638      	mov	r0, r7
 8003f5a:	f7ff ff6d 	bl	8003e38 <__ssputs_r>
 8003f5e:	3001      	adds	r0, #1
 8003f60:	f000 80aa 	beq.w	80040b8 <_svfiprintf_r+0x1c8>
 8003f64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003f66:	445a      	add	r2, fp
 8003f68:	9209      	str	r2, [sp, #36]	; 0x24
 8003f6a:	f89a 3000 	ldrb.w	r3, [sl]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	f000 80a2 	beq.w	80040b8 <_svfiprintf_r+0x1c8>
 8003f74:	2300      	movs	r3, #0
 8003f76:	f04f 32ff 	mov.w	r2, #4294967295
 8003f7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f7e:	f10a 0a01 	add.w	sl, sl, #1
 8003f82:	9304      	str	r3, [sp, #16]
 8003f84:	9307      	str	r3, [sp, #28]
 8003f86:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f8a:	931a      	str	r3, [sp, #104]	; 0x68
 8003f8c:	4654      	mov	r4, sl
 8003f8e:	2205      	movs	r2, #5
 8003f90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f94:	4851      	ldr	r0, [pc, #324]	; (80040dc <_svfiprintf_r+0x1ec>)
 8003f96:	f7fc f923 	bl	80001e0 <memchr>
 8003f9a:	9a04      	ldr	r2, [sp, #16]
 8003f9c:	b9d8      	cbnz	r0, 8003fd6 <_svfiprintf_r+0xe6>
 8003f9e:	06d0      	lsls	r0, r2, #27
 8003fa0:	bf44      	itt	mi
 8003fa2:	2320      	movmi	r3, #32
 8003fa4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003fa8:	0711      	lsls	r1, r2, #28
 8003faa:	bf44      	itt	mi
 8003fac:	232b      	movmi	r3, #43	; 0x2b
 8003fae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003fb2:	f89a 3000 	ldrb.w	r3, [sl]
 8003fb6:	2b2a      	cmp	r3, #42	; 0x2a
 8003fb8:	d015      	beq.n	8003fe6 <_svfiprintf_r+0xf6>
 8003fba:	9a07      	ldr	r2, [sp, #28]
 8003fbc:	4654      	mov	r4, sl
 8003fbe:	2000      	movs	r0, #0
 8003fc0:	f04f 0c0a 	mov.w	ip, #10
 8003fc4:	4621      	mov	r1, r4
 8003fc6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003fca:	3b30      	subs	r3, #48	; 0x30
 8003fcc:	2b09      	cmp	r3, #9
 8003fce:	d94e      	bls.n	800406e <_svfiprintf_r+0x17e>
 8003fd0:	b1b0      	cbz	r0, 8004000 <_svfiprintf_r+0x110>
 8003fd2:	9207      	str	r2, [sp, #28]
 8003fd4:	e014      	b.n	8004000 <_svfiprintf_r+0x110>
 8003fd6:	eba0 0308 	sub.w	r3, r0, r8
 8003fda:	fa09 f303 	lsl.w	r3, r9, r3
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	9304      	str	r3, [sp, #16]
 8003fe2:	46a2      	mov	sl, r4
 8003fe4:	e7d2      	b.n	8003f8c <_svfiprintf_r+0x9c>
 8003fe6:	9b03      	ldr	r3, [sp, #12]
 8003fe8:	1d19      	adds	r1, r3, #4
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	9103      	str	r1, [sp, #12]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	bfbb      	ittet	lt
 8003ff2:	425b      	neglt	r3, r3
 8003ff4:	f042 0202 	orrlt.w	r2, r2, #2
 8003ff8:	9307      	strge	r3, [sp, #28]
 8003ffa:	9307      	strlt	r3, [sp, #28]
 8003ffc:	bfb8      	it	lt
 8003ffe:	9204      	strlt	r2, [sp, #16]
 8004000:	7823      	ldrb	r3, [r4, #0]
 8004002:	2b2e      	cmp	r3, #46	; 0x2e
 8004004:	d10c      	bne.n	8004020 <_svfiprintf_r+0x130>
 8004006:	7863      	ldrb	r3, [r4, #1]
 8004008:	2b2a      	cmp	r3, #42	; 0x2a
 800400a:	d135      	bne.n	8004078 <_svfiprintf_r+0x188>
 800400c:	9b03      	ldr	r3, [sp, #12]
 800400e:	1d1a      	adds	r2, r3, #4
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	9203      	str	r2, [sp, #12]
 8004014:	2b00      	cmp	r3, #0
 8004016:	bfb8      	it	lt
 8004018:	f04f 33ff 	movlt.w	r3, #4294967295
 800401c:	3402      	adds	r4, #2
 800401e:	9305      	str	r3, [sp, #20]
 8004020:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80040ec <_svfiprintf_r+0x1fc>
 8004024:	7821      	ldrb	r1, [r4, #0]
 8004026:	2203      	movs	r2, #3
 8004028:	4650      	mov	r0, sl
 800402a:	f7fc f8d9 	bl	80001e0 <memchr>
 800402e:	b140      	cbz	r0, 8004042 <_svfiprintf_r+0x152>
 8004030:	2340      	movs	r3, #64	; 0x40
 8004032:	eba0 000a 	sub.w	r0, r0, sl
 8004036:	fa03 f000 	lsl.w	r0, r3, r0
 800403a:	9b04      	ldr	r3, [sp, #16]
 800403c:	4303      	orrs	r3, r0
 800403e:	3401      	adds	r4, #1
 8004040:	9304      	str	r3, [sp, #16]
 8004042:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004046:	4826      	ldr	r0, [pc, #152]	; (80040e0 <_svfiprintf_r+0x1f0>)
 8004048:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800404c:	2206      	movs	r2, #6
 800404e:	f7fc f8c7 	bl	80001e0 <memchr>
 8004052:	2800      	cmp	r0, #0
 8004054:	d038      	beq.n	80040c8 <_svfiprintf_r+0x1d8>
 8004056:	4b23      	ldr	r3, [pc, #140]	; (80040e4 <_svfiprintf_r+0x1f4>)
 8004058:	bb1b      	cbnz	r3, 80040a2 <_svfiprintf_r+0x1b2>
 800405a:	9b03      	ldr	r3, [sp, #12]
 800405c:	3307      	adds	r3, #7
 800405e:	f023 0307 	bic.w	r3, r3, #7
 8004062:	3308      	adds	r3, #8
 8004064:	9303      	str	r3, [sp, #12]
 8004066:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004068:	4433      	add	r3, r6
 800406a:	9309      	str	r3, [sp, #36]	; 0x24
 800406c:	e767      	b.n	8003f3e <_svfiprintf_r+0x4e>
 800406e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004072:	460c      	mov	r4, r1
 8004074:	2001      	movs	r0, #1
 8004076:	e7a5      	b.n	8003fc4 <_svfiprintf_r+0xd4>
 8004078:	2300      	movs	r3, #0
 800407a:	3401      	adds	r4, #1
 800407c:	9305      	str	r3, [sp, #20]
 800407e:	4619      	mov	r1, r3
 8004080:	f04f 0c0a 	mov.w	ip, #10
 8004084:	4620      	mov	r0, r4
 8004086:	f810 2b01 	ldrb.w	r2, [r0], #1
 800408a:	3a30      	subs	r2, #48	; 0x30
 800408c:	2a09      	cmp	r2, #9
 800408e:	d903      	bls.n	8004098 <_svfiprintf_r+0x1a8>
 8004090:	2b00      	cmp	r3, #0
 8004092:	d0c5      	beq.n	8004020 <_svfiprintf_r+0x130>
 8004094:	9105      	str	r1, [sp, #20]
 8004096:	e7c3      	b.n	8004020 <_svfiprintf_r+0x130>
 8004098:	fb0c 2101 	mla	r1, ip, r1, r2
 800409c:	4604      	mov	r4, r0
 800409e:	2301      	movs	r3, #1
 80040a0:	e7f0      	b.n	8004084 <_svfiprintf_r+0x194>
 80040a2:	ab03      	add	r3, sp, #12
 80040a4:	9300      	str	r3, [sp, #0]
 80040a6:	462a      	mov	r2, r5
 80040a8:	4b0f      	ldr	r3, [pc, #60]	; (80040e8 <_svfiprintf_r+0x1f8>)
 80040aa:	a904      	add	r1, sp, #16
 80040ac:	4638      	mov	r0, r7
 80040ae:	f3af 8000 	nop.w
 80040b2:	1c42      	adds	r2, r0, #1
 80040b4:	4606      	mov	r6, r0
 80040b6:	d1d6      	bne.n	8004066 <_svfiprintf_r+0x176>
 80040b8:	89ab      	ldrh	r3, [r5, #12]
 80040ba:	065b      	lsls	r3, r3, #25
 80040bc:	f53f af2c 	bmi.w	8003f18 <_svfiprintf_r+0x28>
 80040c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80040c2:	b01d      	add	sp, #116	; 0x74
 80040c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040c8:	ab03      	add	r3, sp, #12
 80040ca:	9300      	str	r3, [sp, #0]
 80040cc:	462a      	mov	r2, r5
 80040ce:	4b06      	ldr	r3, [pc, #24]	; (80040e8 <_svfiprintf_r+0x1f8>)
 80040d0:	a904      	add	r1, sp, #16
 80040d2:	4638      	mov	r0, r7
 80040d4:	f000 f9d4 	bl	8004480 <_printf_i>
 80040d8:	e7eb      	b.n	80040b2 <_svfiprintf_r+0x1c2>
 80040da:	bf00      	nop
 80040dc:	08004b34 	.word	0x08004b34
 80040e0:	08004b3e 	.word	0x08004b3e
 80040e4:	00000000 	.word	0x00000000
 80040e8:	08003e39 	.word	0x08003e39
 80040ec:	08004b3a 	.word	0x08004b3a

080040f0 <__sfputc_r>:
 80040f0:	6893      	ldr	r3, [r2, #8]
 80040f2:	3b01      	subs	r3, #1
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	b410      	push	{r4}
 80040f8:	6093      	str	r3, [r2, #8]
 80040fa:	da08      	bge.n	800410e <__sfputc_r+0x1e>
 80040fc:	6994      	ldr	r4, [r2, #24]
 80040fe:	42a3      	cmp	r3, r4
 8004100:	db01      	blt.n	8004106 <__sfputc_r+0x16>
 8004102:	290a      	cmp	r1, #10
 8004104:	d103      	bne.n	800410e <__sfputc_r+0x1e>
 8004106:	f85d 4b04 	ldr.w	r4, [sp], #4
 800410a:	f7ff bb0d 	b.w	8003728 <__swbuf_r>
 800410e:	6813      	ldr	r3, [r2, #0]
 8004110:	1c58      	adds	r0, r3, #1
 8004112:	6010      	str	r0, [r2, #0]
 8004114:	7019      	strb	r1, [r3, #0]
 8004116:	4608      	mov	r0, r1
 8004118:	f85d 4b04 	ldr.w	r4, [sp], #4
 800411c:	4770      	bx	lr

0800411e <__sfputs_r>:
 800411e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004120:	4606      	mov	r6, r0
 8004122:	460f      	mov	r7, r1
 8004124:	4614      	mov	r4, r2
 8004126:	18d5      	adds	r5, r2, r3
 8004128:	42ac      	cmp	r4, r5
 800412a:	d101      	bne.n	8004130 <__sfputs_r+0x12>
 800412c:	2000      	movs	r0, #0
 800412e:	e007      	b.n	8004140 <__sfputs_r+0x22>
 8004130:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004134:	463a      	mov	r2, r7
 8004136:	4630      	mov	r0, r6
 8004138:	f7ff ffda 	bl	80040f0 <__sfputc_r>
 800413c:	1c43      	adds	r3, r0, #1
 800413e:	d1f3      	bne.n	8004128 <__sfputs_r+0xa>
 8004140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004144 <_vfiprintf_r>:
 8004144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004148:	460d      	mov	r5, r1
 800414a:	b09d      	sub	sp, #116	; 0x74
 800414c:	4614      	mov	r4, r2
 800414e:	4698      	mov	r8, r3
 8004150:	4606      	mov	r6, r0
 8004152:	b118      	cbz	r0, 800415c <_vfiprintf_r+0x18>
 8004154:	6983      	ldr	r3, [r0, #24]
 8004156:	b90b      	cbnz	r3, 800415c <_vfiprintf_r+0x18>
 8004158:	f7ff fcc0 	bl	8003adc <__sinit>
 800415c:	4b89      	ldr	r3, [pc, #548]	; (8004384 <_vfiprintf_r+0x240>)
 800415e:	429d      	cmp	r5, r3
 8004160:	d11b      	bne.n	800419a <_vfiprintf_r+0x56>
 8004162:	6875      	ldr	r5, [r6, #4]
 8004164:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004166:	07d9      	lsls	r1, r3, #31
 8004168:	d405      	bmi.n	8004176 <_vfiprintf_r+0x32>
 800416a:	89ab      	ldrh	r3, [r5, #12]
 800416c:	059a      	lsls	r2, r3, #22
 800416e:	d402      	bmi.n	8004176 <_vfiprintf_r+0x32>
 8004170:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004172:	f7ff fd51 	bl	8003c18 <__retarget_lock_acquire_recursive>
 8004176:	89ab      	ldrh	r3, [r5, #12]
 8004178:	071b      	lsls	r3, r3, #28
 800417a:	d501      	bpl.n	8004180 <_vfiprintf_r+0x3c>
 800417c:	692b      	ldr	r3, [r5, #16]
 800417e:	b9eb      	cbnz	r3, 80041bc <_vfiprintf_r+0x78>
 8004180:	4629      	mov	r1, r5
 8004182:	4630      	mov	r0, r6
 8004184:	f7ff fb22 	bl	80037cc <__swsetup_r>
 8004188:	b1c0      	cbz	r0, 80041bc <_vfiprintf_r+0x78>
 800418a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800418c:	07dc      	lsls	r4, r3, #31
 800418e:	d50e      	bpl.n	80041ae <_vfiprintf_r+0x6a>
 8004190:	f04f 30ff 	mov.w	r0, #4294967295
 8004194:	b01d      	add	sp, #116	; 0x74
 8004196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800419a:	4b7b      	ldr	r3, [pc, #492]	; (8004388 <_vfiprintf_r+0x244>)
 800419c:	429d      	cmp	r5, r3
 800419e:	d101      	bne.n	80041a4 <_vfiprintf_r+0x60>
 80041a0:	68b5      	ldr	r5, [r6, #8]
 80041a2:	e7df      	b.n	8004164 <_vfiprintf_r+0x20>
 80041a4:	4b79      	ldr	r3, [pc, #484]	; (800438c <_vfiprintf_r+0x248>)
 80041a6:	429d      	cmp	r5, r3
 80041a8:	bf08      	it	eq
 80041aa:	68f5      	ldreq	r5, [r6, #12]
 80041ac:	e7da      	b.n	8004164 <_vfiprintf_r+0x20>
 80041ae:	89ab      	ldrh	r3, [r5, #12]
 80041b0:	0598      	lsls	r0, r3, #22
 80041b2:	d4ed      	bmi.n	8004190 <_vfiprintf_r+0x4c>
 80041b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80041b6:	f7ff fd30 	bl	8003c1a <__retarget_lock_release_recursive>
 80041ba:	e7e9      	b.n	8004190 <_vfiprintf_r+0x4c>
 80041bc:	2300      	movs	r3, #0
 80041be:	9309      	str	r3, [sp, #36]	; 0x24
 80041c0:	2320      	movs	r3, #32
 80041c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80041c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80041ca:	2330      	movs	r3, #48	; 0x30
 80041cc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004390 <_vfiprintf_r+0x24c>
 80041d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80041d4:	f04f 0901 	mov.w	r9, #1
 80041d8:	4623      	mov	r3, r4
 80041da:	469a      	mov	sl, r3
 80041dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80041e0:	b10a      	cbz	r2, 80041e6 <_vfiprintf_r+0xa2>
 80041e2:	2a25      	cmp	r2, #37	; 0x25
 80041e4:	d1f9      	bne.n	80041da <_vfiprintf_r+0x96>
 80041e6:	ebba 0b04 	subs.w	fp, sl, r4
 80041ea:	d00b      	beq.n	8004204 <_vfiprintf_r+0xc0>
 80041ec:	465b      	mov	r3, fp
 80041ee:	4622      	mov	r2, r4
 80041f0:	4629      	mov	r1, r5
 80041f2:	4630      	mov	r0, r6
 80041f4:	f7ff ff93 	bl	800411e <__sfputs_r>
 80041f8:	3001      	adds	r0, #1
 80041fa:	f000 80aa 	beq.w	8004352 <_vfiprintf_r+0x20e>
 80041fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004200:	445a      	add	r2, fp
 8004202:	9209      	str	r2, [sp, #36]	; 0x24
 8004204:	f89a 3000 	ldrb.w	r3, [sl]
 8004208:	2b00      	cmp	r3, #0
 800420a:	f000 80a2 	beq.w	8004352 <_vfiprintf_r+0x20e>
 800420e:	2300      	movs	r3, #0
 8004210:	f04f 32ff 	mov.w	r2, #4294967295
 8004214:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004218:	f10a 0a01 	add.w	sl, sl, #1
 800421c:	9304      	str	r3, [sp, #16]
 800421e:	9307      	str	r3, [sp, #28]
 8004220:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004224:	931a      	str	r3, [sp, #104]	; 0x68
 8004226:	4654      	mov	r4, sl
 8004228:	2205      	movs	r2, #5
 800422a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800422e:	4858      	ldr	r0, [pc, #352]	; (8004390 <_vfiprintf_r+0x24c>)
 8004230:	f7fb ffd6 	bl	80001e0 <memchr>
 8004234:	9a04      	ldr	r2, [sp, #16]
 8004236:	b9d8      	cbnz	r0, 8004270 <_vfiprintf_r+0x12c>
 8004238:	06d1      	lsls	r1, r2, #27
 800423a:	bf44      	itt	mi
 800423c:	2320      	movmi	r3, #32
 800423e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004242:	0713      	lsls	r3, r2, #28
 8004244:	bf44      	itt	mi
 8004246:	232b      	movmi	r3, #43	; 0x2b
 8004248:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800424c:	f89a 3000 	ldrb.w	r3, [sl]
 8004250:	2b2a      	cmp	r3, #42	; 0x2a
 8004252:	d015      	beq.n	8004280 <_vfiprintf_r+0x13c>
 8004254:	9a07      	ldr	r2, [sp, #28]
 8004256:	4654      	mov	r4, sl
 8004258:	2000      	movs	r0, #0
 800425a:	f04f 0c0a 	mov.w	ip, #10
 800425e:	4621      	mov	r1, r4
 8004260:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004264:	3b30      	subs	r3, #48	; 0x30
 8004266:	2b09      	cmp	r3, #9
 8004268:	d94e      	bls.n	8004308 <_vfiprintf_r+0x1c4>
 800426a:	b1b0      	cbz	r0, 800429a <_vfiprintf_r+0x156>
 800426c:	9207      	str	r2, [sp, #28]
 800426e:	e014      	b.n	800429a <_vfiprintf_r+0x156>
 8004270:	eba0 0308 	sub.w	r3, r0, r8
 8004274:	fa09 f303 	lsl.w	r3, r9, r3
 8004278:	4313      	orrs	r3, r2
 800427a:	9304      	str	r3, [sp, #16]
 800427c:	46a2      	mov	sl, r4
 800427e:	e7d2      	b.n	8004226 <_vfiprintf_r+0xe2>
 8004280:	9b03      	ldr	r3, [sp, #12]
 8004282:	1d19      	adds	r1, r3, #4
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	9103      	str	r1, [sp, #12]
 8004288:	2b00      	cmp	r3, #0
 800428a:	bfbb      	ittet	lt
 800428c:	425b      	neglt	r3, r3
 800428e:	f042 0202 	orrlt.w	r2, r2, #2
 8004292:	9307      	strge	r3, [sp, #28]
 8004294:	9307      	strlt	r3, [sp, #28]
 8004296:	bfb8      	it	lt
 8004298:	9204      	strlt	r2, [sp, #16]
 800429a:	7823      	ldrb	r3, [r4, #0]
 800429c:	2b2e      	cmp	r3, #46	; 0x2e
 800429e:	d10c      	bne.n	80042ba <_vfiprintf_r+0x176>
 80042a0:	7863      	ldrb	r3, [r4, #1]
 80042a2:	2b2a      	cmp	r3, #42	; 0x2a
 80042a4:	d135      	bne.n	8004312 <_vfiprintf_r+0x1ce>
 80042a6:	9b03      	ldr	r3, [sp, #12]
 80042a8:	1d1a      	adds	r2, r3, #4
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	9203      	str	r2, [sp, #12]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	bfb8      	it	lt
 80042b2:	f04f 33ff 	movlt.w	r3, #4294967295
 80042b6:	3402      	adds	r4, #2
 80042b8:	9305      	str	r3, [sp, #20]
 80042ba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80043a0 <_vfiprintf_r+0x25c>
 80042be:	7821      	ldrb	r1, [r4, #0]
 80042c0:	2203      	movs	r2, #3
 80042c2:	4650      	mov	r0, sl
 80042c4:	f7fb ff8c 	bl	80001e0 <memchr>
 80042c8:	b140      	cbz	r0, 80042dc <_vfiprintf_r+0x198>
 80042ca:	2340      	movs	r3, #64	; 0x40
 80042cc:	eba0 000a 	sub.w	r0, r0, sl
 80042d0:	fa03 f000 	lsl.w	r0, r3, r0
 80042d4:	9b04      	ldr	r3, [sp, #16]
 80042d6:	4303      	orrs	r3, r0
 80042d8:	3401      	adds	r4, #1
 80042da:	9304      	str	r3, [sp, #16]
 80042dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042e0:	482c      	ldr	r0, [pc, #176]	; (8004394 <_vfiprintf_r+0x250>)
 80042e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80042e6:	2206      	movs	r2, #6
 80042e8:	f7fb ff7a 	bl	80001e0 <memchr>
 80042ec:	2800      	cmp	r0, #0
 80042ee:	d03f      	beq.n	8004370 <_vfiprintf_r+0x22c>
 80042f0:	4b29      	ldr	r3, [pc, #164]	; (8004398 <_vfiprintf_r+0x254>)
 80042f2:	bb1b      	cbnz	r3, 800433c <_vfiprintf_r+0x1f8>
 80042f4:	9b03      	ldr	r3, [sp, #12]
 80042f6:	3307      	adds	r3, #7
 80042f8:	f023 0307 	bic.w	r3, r3, #7
 80042fc:	3308      	adds	r3, #8
 80042fe:	9303      	str	r3, [sp, #12]
 8004300:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004302:	443b      	add	r3, r7
 8004304:	9309      	str	r3, [sp, #36]	; 0x24
 8004306:	e767      	b.n	80041d8 <_vfiprintf_r+0x94>
 8004308:	fb0c 3202 	mla	r2, ip, r2, r3
 800430c:	460c      	mov	r4, r1
 800430e:	2001      	movs	r0, #1
 8004310:	e7a5      	b.n	800425e <_vfiprintf_r+0x11a>
 8004312:	2300      	movs	r3, #0
 8004314:	3401      	adds	r4, #1
 8004316:	9305      	str	r3, [sp, #20]
 8004318:	4619      	mov	r1, r3
 800431a:	f04f 0c0a 	mov.w	ip, #10
 800431e:	4620      	mov	r0, r4
 8004320:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004324:	3a30      	subs	r2, #48	; 0x30
 8004326:	2a09      	cmp	r2, #9
 8004328:	d903      	bls.n	8004332 <_vfiprintf_r+0x1ee>
 800432a:	2b00      	cmp	r3, #0
 800432c:	d0c5      	beq.n	80042ba <_vfiprintf_r+0x176>
 800432e:	9105      	str	r1, [sp, #20]
 8004330:	e7c3      	b.n	80042ba <_vfiprintf_r+0x176>
 8004332:	fb0c 2101 	mla	r1, ip, r1, r2
 8004336:	4604      	mov	r4, r0
 8004338:	2301      	movs	r3, #1
 800433a:	e7f0      	b.n	800431e <_vfiprintf_r+0x1da>
 800433c:	ab03      	add	r3, sp, #12
 800433e:	9300      	str	r3, [sp, #0]
 8004340:	462a      	mov	r2, r5
 8004342:	4b16      	ldr	r3, [pc, #88]	; (800439c <_vfiprintf_r+0x258>)
 8004344:	a904      	add	r1, sp, #16
 8004346:	4630      	mov	r0, r6
 8004348:	f3af 8000 	nop.w
 800434c:	4607      	mov	r7, r0
 800434e:	1c78      	adds	r0, r7, #1
 8004350:	d1d6      	bne.n	8004300 <_vfiprintf_r+0x1bc>
 8004352:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004354:	07d9      	lsls	r1, r3, #31
 8004356:	d405      	bmi.n	8004364 <_vfiprintf_r+0x220>
 8004358:	89ab      	ldrh	r3, [r5, #12]
 800435a:	059a      	lsls	r2, r3, #22
 800435c:	d402      	bmi.n	8004364 <_vfiprintf_r+0x220>
 800435e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004360:	f7ff fc5b 	bl	8003c1a <__retarget_lock_release_recursive>
 8004364:	89ab      	ldrh	r3, [r5, #12]
 8004366:	065b      	lsls	r3, r3, #25
 8004368:	f53f af12 	bmi.w	8004190 <_vfiprintf_r+0x4c>
 800436c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800436e:	e711      	b.n	8004194 <_vfiprintf_r+0x50>
 8004370:	ab03      	add	r3, sp, #12
 8004372:	9300      	str	r3, [sp, #0]
 8004374:	462a      	mov	r2, r5
 8004376:	4b09      	ldr	r3, [pc, #36]	; (800439c <_vfiprintf_r+0x258>)
 8004378:	a904      	add	r1, sp, #16
 800437a:	4630      	mov	r0, r6
 800437c:	f000 f880 	bl	8004480 <_printf_i>
 8004380:	e7e4      	b.n	800434c <_vfiprintf_r+0x208>
 8004382:	bf00      	nop
 8004384:	08004af4 	.word	0x08004af4
 8004388:	08004b14 	.word	0x08004b14
 800438c:	08004ad4 	.word	0x08004ad4
 8004390:	08004b34 	.word	0x08004b34
 8004394:	08004b3e 	.word	0x08004b3e
 8004398:	00000000 	.word	0x00000000
 800439c:	0800411f 	.word	0x0800411f
 80043a0:	08004b3a 	.word	0x08004b3a

080043a4 <_printf_common>:
 80043a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043a8:	4616      	mov	r6, r2
 80043aa:	4699      	mov	r9, r3
 80043ac:	688a      	ldr	r2, [r1, #8]
 80043ae:	690b      	ldr	r3, [r1, #16]
 80043b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80043b4:	4293      	cmp	r3, r2
 80043b6:	bfb8      	it	lt
 80043b8:	4613      	movlt	r3, r2
 80043ba:	6033      	str	r3, [r6, #0]
 80043bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80043c0:	4607      	mov	r7, r0
 80043c2:	460c      	mov	r4, r1
 80043c4:	b10a      	cbz	r2, 80043ca <_printf_common+0x26>
 80043c6:	3301      	adds	r3, #1
 80043c8:	6033      	str	r3, [r6, #0]
 80043ca:	6823      	ldr	r3, [r4, #0]
 80043cc:	0699      	lsls	r1, r3, #26
 80043ce:	bf42      	ittt	mi
 80043d0:	6833      	ldrmi	r3, [r6, #0]
 80043d2:	3302      	addmi	r3, #2
 80043d4:	6033      	strmi	r3, [r6, #0]
 80043d6:	6825      	ldr	r5, [r4, #0]
 80043d8:	f015 0506 	ands.w	r5, r5, #6
 80043dc:	d106      	bne.n	80043ec <_printf_common+0x48>
 80043de:	f104 0a19 	add.w	sl, r4, #25
 80043e2:	68e3      	ldr	r3, [r4, #12]
 80043e4:	6832      	ldr	r2, [r6, #0]
 80043e6:	1a9b      	subs	r3, r3, r2
 80043e8:	42ab      	cmp	r3, r5
 80043ea:	dc26      	bgt.n	800443a <_printf_common+0x96>
 80043ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80043f0:	1e13      	subs	r3, r2, #0
 80043f2:	6822      	ldr	r2, [r4, #0]
 80043f4:	bf18      	it	ne
 80043f6:	2301      	movne	r3, #1
 80043f8:	0692      	lsls	r2, r2, #26
 80043fa:	d42b      	bmi.n	8004454 <_printf_common+0xb0>
 80043fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004400:	4649      	mov	r1, r9
 8004402:	4638      	mov	r0, r7
 8004404:	47c0      	blx	r8
 8004406:	3001      	adds	r0, #1
 8004408:	d01e      	beq.n	8004448 <_printf_common+0xa4>
 800440a:	6823      	ldr	r3, [r4, #0]
 800440c:	68e5      	ldr	r5, [r4, #12]
 800440e:	6832      	ldr	r2, [r6, #0]
 8004410:	f003 0306 	and.w	r3, r3, #6
 8004414:	2b04      	cmp	r3, #4
 8004416:	bf08      	it	eq
 8004418:	1aad      	subeq	r5, r5, r2
 800441a:	68a3      	ldr	r3, [r4, #8]
 800441c:	6922      	ldr	r2, [r4, #16]
 800441e:	bf0c      	ite	eq
 8004420:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004424:	2500      	movne	r5, #0
 8004426:	4293      	cmp	r3, r2
 8004428:	bfc4      	itt	gt
 800442a:	1a9b      	subgt	r3, r3, r2
 800442c:	18ed      	addgt	r5, r5, r3
 800442e:	2600      	movs	r6, #0
 8004430:	341a      	adds	r4, #26
 8004432:	42b5      	cmp	r5, r6
 8004434:	d11a      	bne.n	800446c <_printf_common+0xc8>
 8004436:	2000      	movs	r0, #0
 8004438:	e008      	b.n	800444c <_printf_common+0xa8>
 800443a:	2301      	movs	r3, #1
 800443c:	4652      	mov	r2, sl
 800443e:	4649      	mov	r1, r9
 8004440:	4638      	mov	r0, r7
 8004442:	47c0      	blx	r8
 8004444:	3001      	adds	r0, #1
 8004446:	d103      	bne.n	8004450 <_printf_common+0xac>
 8004448:	f04f 30ff 	mov.w	r0, #4294967295
 800444c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004450:	3501      	adds	r5, #1
 8004452:	e7c6      	b.n	80043e2 <_printf_common+0x3e>
 8004454:	18e1      	adds	r1, r4, r3
 8004456:	1c5a      	adds	r2, r3, #1
 8004458:	2030      	movs	r0, #48	; 0x30
 800445a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800445e:	4422      	add	r2, r4
 8004460:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004464:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004468:	3302      	adds	r3, #2
 800446a:	e7c7      	b.n	80043fc <_printf_common+0x58>
 800446c:	2301      	movs	r3, #1
 800446e:	4622      	mov	r2, r4
 8004470:	4649      	mov	r1, r9
 8004472:	4638      	mov	r0, r7
 8004474:	47c0      	blx	r8
 8004476:	3001      	adds	r0, #1
 8004478:	d0e6      	beq.n	8004448 <_printf_common+0xa4>
 800447a:	3601      	adds	r6, #1
 800447c:	e7d9      	b.n	8004432 <_printf_common+0x8e>
	...

08004480 <_printf_i>:
 8004480:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004484:	460c      	mov	r4, r1
 8004486:	4691      	mov	r9, r2
 8004488:	7e27      	ldrb	r7, [r4, #24]
 800448a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800448c:	2f78      	cmp	r7, #120	; 0x78
 800448e:	4680      	mov	r8, r0
 8004490:	469a      	mov	sl, r3
 8004492:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004496:	d807      	bhi.n	80044a8 <_printf_i+0x28>
 8004498:	2f62      	cmp	r7, #98	; 0x62
 800449a:	d80a      	bhi.n	80044b2 <_printf_i+0x32>
 800449c:	2f00      	cmp	r7, #0
 800449e:	f000 80d8 	beq.w	8004652 <_printf_i+0x1d2>
 80044a2:	2f58      	cmp	r7, #88	; 0x58
 80044a4:	f000 80a3 	beq.w	80045ee <_printf_i+0x16e>
 80044a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80044ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80044b0:	e03a      	b.n	8004528 <_printf_i+0xa8>
 80044b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80044b6:	2b15      	cmp	r3, #21
 80044b8:	d8f6      	bhi.n	80044a8 <_printf_i+0x28>
 80044ba:	a001      	add	r0, pc, #4	; (adr r0, 80044c0 <_printf_i+0x40>)
 80044bc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80044c0:	08004519 	.word	0x08004519
 80044c4:	0800452d 	.word	0x0800452d
 80044c8:	080044a9 	.word	0x080044a9
 80044cc:	080044a9 	.word	0x080044a9
 80044d0:	080044a9 	.word	0x080044a9
 80044d4:	080044a9 	.word	0x080044a9
 80044d8:	0800452d 	.word	0x0800452d
 80044dc:	080044a9 	.word	0x080044a9
 80044e0:	080044a9 	.word	0x080044a9
 80044e4:	080044a9 	.word	0x080044a9
 80044e8:	080044a9 	.word	0x080044a9
 80044ec:	08004639 	.word	0x08004639
 80044f0:	0800455d 	.word	0x0800455d
 80044f4:	0800461b 	.word	0x0800461b
 80044f8:	080044a9 	.word	0x080044a9
 80044fc:	080044a9 	.word	0x080044a9
 8004500:	0800465b 	.word	0x0800465b
 8004504:	080044a9 	.word	0x080044a9
 8004508:	0800455d 	.word	0x0800455d
 800450c:	080044a9 	.word	0x080044a9
 8004510:	080044a9 	.word	0x080044a9
 8004514:	08004623 	.word	0x08004623
 8004518:	680b      	ldr	r3, [r1, #0]
 800451a:	1d1a      	adds	r2, r3, #4
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	600a      	str	r2, [r1, #0]
 8004520:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004524:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004528:	2301      	movs	r3, #1
 800452a:	e0a3      	b.n	8004674 <_printf_i+0x1f4>
 800452c:	6825      	ldr	r5, [r4, #0]
 800452e:	6808      	ldr	r0, [r1, #0]
 8004530:	062e      	lsls	r6, r5, #24
 8004532:	f100 0304 	add.w	r3, r0, #4
 8004536:	d50a      	bpl.n	800454e <_printf_i+0xce>
 8004538:	6805      	ldr	r5, [r0, #0]
 800453a:	600b      	str	r3, [r1, #0]
 800453c:	2d00      	cmp	r5, #0
 800453e:	da03      	bge.n	8004548 <_printf_i+0xc8>
 8004540:	232d      	movs	r3, #45	; 0x2d
 8004542:	426d      	negs	r5, r5
 8004544:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004548:	485e      	ldr	r0, [pc, #376]	; (80046c4 <_printf_i+0x244>)
 800454a:	230a      	movs	r3, #10
 800454c:	e019      	b.n	8004582 <_printf_i+0x102>
 800454e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004552:	6805      	ldr	r5, [r0, #0]
 8004554:	600b      	str	r3, [r1, #0]
 8004556:	bf18      	it	ne
 8004558:	b22d      	sxthne	r5, r5
 800455a:	e7ef      	b.n	800453c <_printf_i+0xbc>
 800455c:	680b      	ldr	r3, [r1, #0]
 800455e:	6825      	ldr	r5, [r4, #0]
 8004560:	1d18      	adds	r0, r3, #4
 8004562:	6008      	str	r0, [r1, #0]
 8004564:	0628      	lsls	r0, r5, #24
 8004566:	d501      	bpl.n	800456c <_printf_i+0xec>
 8004568:	681d      	ldr	r5, [r3, #0]
 800456a:	e002      	b.n	8004572 <_printf_i+0xf2>
 800456c:	0669      	lsls	r1, r5, #25
 800456e:	d5fb      	bpl.n	8004568 <_printf_i+0xe8>
 8004570:	881d      	ldrh	r5, [r3, #0]
 8004572:	4854      	ldr	r0, [pc, #336]	; (80046c4 <_printf_i+0x244>)
 8004574:	2f6f      	cmp	r7, #111	; 0x6f
 8004576:	bf0c      	ite	eq
 8004578:	2308      	moveq	r3, #8
 800457a:	230a      	movne	r3, #10
 800457c:	2100      	movs	r1, #0
 800457e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004582:	6866      	ldr	r6, [r4, #4]
 8004584:	60a6      	str	r6, [r4, #8]
 8004586:	2e00      	cmp	r6, #0
 8004588:	bfa2      	ittt	ge
 800458a:	6821      	ldrge	r1, [r4, #0]
 800458c:	f021 0104 	bicge.w	r1, r1, #4
 8004590:	6021      	strge	r1, [r4, #0]
 8004592:	b90d      	cbnz	r5, 8004598 <_printf_i+0x118>
 8004594:	2e00      	cmp	r6, #0
 8004596:	d04d      	beq.n	8004634 <_printf_i+0x1b4>
 8004598:	4616      	mov	r6, r2
 800459a:	fbb5 f1f3 	udiv	r1, r5, r3
 800459e:	fb03 5711 	mls	r7, r3, r1, r5
 80045a2:	5dc7      	ldrb	r7, [r0, r7]
 80045a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80045a8:	462f      	mov	r7, r5
 80045aa:	42bb      	cmp	r3, r7
 80045ac:	460d      	mov	r5, r1
 80045ae:	d9f4      	bls.n	800459a <_printf_i+0x11a>
 80045b0:	2b08      	cmp	r3, #8
 80045b2:	d10b      	bne.n	80045cc <_printf_i+0x14c>
 80045b4:	6823      	ldr	r3, [r4, #0]
 80045b6:	07df      	lsls	r7, r3, #31
 80045b8:	d508      	bpl.n	80045cc <_printf_i+0x14c>
 80045ba:	6923      	ldr	r3, [r4, #16]
 80045bc:	6861      	ldr	r1, [r4, #4]
 80045be:	4299      	cmp	r1, r3
 80045c0:	bfde      	ittt	le
 80045c2:	2330      	movle	r3, #48	; 0x30
 80045c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80045c8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80045cc:	1b92      	subs	r2, r2, r6
 80045ce:	6122      	str	r2, [r4, #16]
 80045d0:	f8cd a000 	str.w	sl, [sp]
 80045d4:	464b      	mov	r3, r9
 80045d6:	aa03      	add	r2, sp, #12
 80045d8:	4621      	mov	r1, r4
 80045da:	4640      	mov	r0, r8
 80045dc:	f7ff fee2 	bl	80043a4 <_printf_common>
 80045e0:	3001      	adds	r0, #1
 80045e2:	d14c      	bne.n	800467e <_printf_i+0x1fe>
 80045e4:	f04f 30ff 	mov.w	r0, #4294967295
 80045e8:	b004      	add	sp, #16
 80045ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045ee:	4835      	ldr	r0, [pc, #212]	; (80046c4 <_printf_i+0x244>)
 80045f0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80045f4:	6823      	ldr	r3, [r4, #0]
 80045f6:	680e      	ldr	r6, [r1, #0]
 80045f8:	061f      	lsls	r7, r3, #24
 80045fa:	f856 5b04 	ldr.w	r5, [r6], #4
 80045fe:	600e      	str	r6, [r1, #0]
 8004600:	d514      	bpl.n	800462c <_printf_i+0x1ac>
 8004602:	07d9      	lsls	r1, r3, #31
 8004604:	bf44      	itt	mi
 8004606:	f043 0320 	orrmi.w	r3, r3, #32
 800460a:	6023      	strmi	r3, [r4, #0]
 800460c:	b91d      	cbnz	r5, 8004616 <_printf_i+0x196>
 800460e:	6823      	ldr	r3, [r4, #0]
 8004610:	f023 0320 	bic.w	r3, r3, #32
 8004614:	6023      	str	r3, [r4, #0]
 8004616:	2310      	movs	r3, #16
 8004618:	e7b0      	b.n	800457c <_printf_i+0xfc>
 800461a:	6823      	ldr	r3, [r4, #0]
 800461c:	f043 0320 	orr.w	r3, r3, #32
 8004620:	6023      	str	r3, [r4, #0]
 8004622:	2378      	movs	r3, #120	; 0x78
 8004624:	4828      	ldr	r0, [pc, #160]	; (80046c8 <_printf_i+0x248>)
 8004626:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800462a:	e7e3      	b.n	80045f4 <_printf_i+0x174>
 800462c:	065e      	lsls	r6, r3, #25
 800462e:	bf48      	it	mi
 8004630:	b2ad      	uxthmi	r5, r5
 8004632:	e7e6      	b.n	8004602 <_printf_i+0x182>
 8004634:	4616      	mov	r6, r2
 8004636:	e7bb      	b.n	80045b0 <_printf_i+0x130>
 8004638:	680b      	ldr	r3, [r1, #0]
 800463a:	6826      	ldr	r6, [r4, #0]
 800463c:	6960      	ldr	r0, [r4, #20]
 800463e:	1d1d      	adds	r5, r3, #4
 8004640:	600d      	str	r5, [r1, #0]
 8004642:	0635      	lsls	r5, r6, #24
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	d501      	bpl.n	800464c <_printf_i+0x1cc>
 8004648:	6018      	str	r0, [r3, #0]
 800464a:	e002      	b.n	8004652 <_printf_i+0x1d2>
 800464c:	0671      	lsls	r1, r6, #25
 800464e:	d5fb      	bpl.n	8004648 <_printf_i+0x1c8>
 8004650:	8018      	strh	r0, [r3, #0]
 8004652:	2300      	movs	r3, #0
 8004654:	6123      	str	r3, [r4, #16]
 8004656:	4616      	mov	r6, r2
 8004658:	e7ba      	b.n	80045d0 <_printf_i+0x150>
 800465a:	680b      	ldr	r3, [r1, #0]
 800465c:	1d1a      	adds	r2, r3, #4
 800465e:	600a      	str	r2, [r1, #0]
 8004660:	681e      	ldr	r6, [r3, #0]
 8004662:	6862      	ldr	r2, [r4, #4]
 8004664:	2100      	movs	r1, #0
 8004666:	4630      	mov	r0, r6
 8004668:	f7fb fdba 	bl	80001e0 <memchr>
 800466c:	b108      	cbz	r0, 8004672 <_printf_i+0x1f2>
 800466e:	1b80      	subs	r0, r0, r6
 8004670:	6060      	str	r0, [r4, #4]
 8004672:	6863      	ldr	r3, [r4, #4]
 8004674:	6123      	str	r3, [r4, #16]
 8004676:	2300      	movs	r3, #0
 8004678:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800467c:	e7a8      	b.n	80045d0 <_printf_i+0x150>
 800467e:	6923      	ldr	r3, [r4, #16]
 8004680:	4632      	mov	r2, r6
 8004682:	4649      	mov	r1, r9
 8004684:	4640      	mov	r0, r8
 8004686:	47d0      	blx	sl
 8004688:	3001      	adds	r0, #1
 800468a:	d0ab      	beq.n	80045e4 <_printf_i+0x164>
 800468c:	6823      	ldr	r3, [r4, #0]
 800468e:	079b      	lsls	r3, r3, #30
 8004690:	d413      	bmi.n	80046ba <_printf_i+0x23a>
 8004692:	68e0      	ldr	r0, [r4, #12]
 8004694:	9b03      	ldr	r3, [sp, #12]
 8004696:	4298      	cmp	r0, r3
 8004698:	bfb8      	it	lt
 800469a:	4618      	movlt	r0, r3
 800469c:	e7a4      	b.n	80045e8 <_printf_i+0x168>
 800469e:	2301      	movs	r3, #1
 80046a0:	4632      	mov	r2, r6
 80046a2:	4649      	mov	r1, r9
 80046a4:	4640      	mov	r0, r8
 80046a6:	47d0      	blx	sl
 80046a8:	3001      	adds	r0, #1
 80046aa:	d09b      	beq.n	80045e4 <_printf_i+0x164>
 80046ac:	3501      	adds	r5, #1
 80046ae:	68e3      	ldr	r3, [r4, #12]
 80046b0:	9903      	ldr	r1, [sp, #12]
 80046b2:	1a5b      	subs	r3, r3, r1
 80046b4:	42ab      	cmp	r3, r5
 80046b6:	dcf2      	bgt.n	800469e <_printf_i+0x21e>
 80046b8:	e7eb      	b.n	8004692 <_printf_i+0x212>
 80046ba:	2500      	movs	r5, #0
 80046bc:	f104 0619 	add.w	r6, r4, #25
 80046c0:	e7f5      	b.n	80046ae <_printf_i+0x22e>
 80046c2:	bf00      	nop
 80046c4:	08004b45 	.word	0x08004b45
 80046c8:	08004b56 	.word	0x08004b56

080046cc <_sbrk_r>:
 80046cc:	b538      	push	{r3, r4, r5, lr}
 80046ce:	4d06      	ldr	r5, [pc, #24]	; (80046e8 <_sbrk_r+0x1c>)
 80046d0:	2300      	movs	r3, #0
 80046d2:	4604      	mov	r4, r0
 80046d4:	4608      	mov	r0, r1
 80046d6:	602b      	str	r3, [r5, #0]
 80046d8:	f7fc fc3e 	bl	8000f58 <_sbrk>
 80046dc:	1c43      	adds	r3, r0, #1
 80046de:	d102      	bne.n	80046e6 <_sbrk_r+0x1a>
 80046e0:	682b      	ldr	r3, [r5, #0]
 80046e2:	b103      	cbz	r3, 80046e6 <_sbrk_r+0x1a>
 80046e4:	6023      	str	r3, [r4, #0]
 80046e6:	bd38      	pop	{r3, r4, r5, pc}
 80046e8:	20003ff0 	.word	0x20003ff0

080046ec <__sread>:
 80046ec:	b510      	push	{r4, lr}
 80046ee:	460c      	mov	r4, r1
 80046f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046f4:	f000 f8ee 	bl	80048d4 <_read_r>
 80046f8:	2800      	cmp	r0, #0
 80046fa:	bfab      	itete	ge
 80046fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80046fe:	89a3      	ldrhlt	r3, [r4, #12]
 8004700:	181b      	addge	r3, r3, r0
 8004702:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004706:	bfac      	ite	ge
 8004708:	6563      	strge	r3, [r4, #84]	; 0x54
 800470a:	81a3      	strhlt	r3, [r4, #12]
 800470c:	bd10      	pop	{r4, pc}

0800470e <__swrite>:
 800470e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004712:	461f      	mov	r7, r3
 8004714:	898b      	ldrh	r3, [r1, #12]
 8004716:	05db      	lsls	r3, r3, #23
 8004718:	4605      	mov	r5, r0
 800471a:	460c      	mov	r4, r1
 800471c:	4616      	mov	r6, r2
 800471e:	d505      	bpl.n	800472c <__swrite+0x1e>
 8004720:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004724:	2302      	movs	r3, #2
 8004726:	2200      	movs	r2, #0
 8004728:	f000 f868 	bl	80047fc <_lseek_r>
 800472c:	89a3      	ldrh	r3, [r4, #12]
 800472e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004732:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004736:	81a3      	strh	r3, [r4, #12]
 8004738:	4632      	mov	r2, r6
 800473a:	463b      	mov	r3, r7
 800473c:	4628      	mov	r0, r5
 800473e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004742:	f000 b817 	b.w	8004774 <_write_r>

08004746 <__sseek>:
 8004746:	b510      	push	{r4, lr}
 8004748:	460c      	mov	r4, r1
 800474a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800474e:	f000 f855 	bl	80047fc <_lseek_r>
 8004752:	1c43      	adds	r3, r0, #1
 8004754:	89a3      	ldrh	r3, [r4, #12]
 8004756:	bf15      	itete	ne
 8004758:	6560      	strne	r0, [r4, #84]	; 0x54
 800475a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800475e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004762:	81a3      	strheq	r3, [r4, #12]
 8004764:	bf18      	it	ne
 8004766:	81a3      	strhne	r3, [r4, #12]
 8004768:	bd10      	pop	{r4, pc}

0800476a <__sclose>:
 800476a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800476e:	f000 b813 	b.w	8004798 <_close_r>
	...

08004774 <_write_r>:
 8004774:	b538      	push	{r3, r4, r5, lr}
 8004776:	4d07      	ldr	r5, [pc, #28]	; (8004794 <_write_r+0x20>)
 8004778:	4604      	mov	r4, r0
 800477a:	4608      	mov	r0, r1
 800477c:	4611      	mov	r1, r2
 800477e:	2200      	movs	r2, #0
 8004780:	602a      	str	r2, [r5, #0]
 8004782:	461a      	mov	r2, r3
 8004784:	f7fc fb97 	bl	8000eb6 <_write>
 8004788:	1c43      	adds	r3, r0, #1
 800478a:	d102      	bne.n	8004792 <_write_r+0x1e>
 800478c:	682b      	ldr	r3, [r5, #0]
 800478e:	b103      	cbz	r3, 8004792 <_write_r+0x1e>
 8004790:	6023      	str	r3, [r4, #0]
 8004792:	bd38      	pop	{r3, r4, r5, pc}
 8004794:	20003ff0 	.word	0x20003ff0

08004798 <_close_r>:
 8004798:	b538      	push	{r3, r4, r5, lr}
 800479a:	4d06      	ldr	r5, [pc, #24]	; (80047b4 <_close_r+0x1c>)
 800479c:	2300      	movs	r3, #0
 800479e:	4604      	mov	r4, r0
 80047a0:	4608      	mov	r0, r1
 80047a2:	602b      	str	r3, [r5, #0]
 80047a4:	f7fc fba3 	bl	8000eee <_close>
 80047a8:	1c43      	adds	r3, r0, #1
 80047aa:	d102      	bne.n	80047b2 <_close_r+0x1a>
 80047ac:	682b      	ldr	r3, [r5, #0]
 80047ae:	b103      	cbz	r3, 80047b2 <_close_r+0x1a>
 80047b0:	6023      	str	r3, [r4, #0]
 80047b2:	bd38      	pop	{r3, r4, r5, pc}
 80047b4:	20003ff0 	.word	0x20003ff0

080047b8 <_fstat_r>:
 80047b8:	b538      	push	{r3, r4, r5, lr}
 80047ba:	4d07      	ldr	r5, [pc, #28]	; (80047d8 <_fstat_r+0x20>)
 80047bc:	2300      	movs	r3, #0
 80047be:	4604      	mov	r4, r0
 80047c0:	4608      	mov	r0, r1
 80047c2:	4611      	mov	r1, r2
 80047c4:	602b      	str	r3, [r5, #0]
 80047c6:	f7fc fb9e 	bl	8000f06 <_fstat>
 80047ca:	1c43      	adds	r3, r0, #1
 80047cc:	d102      	bne.n	80047d4 <_fstat_r+0x1c>
 80047ce:	682b      	ldr	r3, [r5, #0]
 80047d0:	b103      	cbz	r3, 80047d4 <_fstat_r+0x1c>
 80047d2:	6023      	str	r3, [r4, #0]
 80047d4:	bd38      	pop	{r3, r4, r5, pc}
 80047d6:	bf00      	nop
 80047d8:	20003ff0 	.word	0x20003ff0

080047dc <_isatty_r>:
 80047dc:	b538      	push	{r3, r4, r5, lr}
 80047de:	4d06      	ldr	r5, [pc, #24]	; (80047f8 <_isatty_r+0x1c>)
 80047e0:	2300      	movs	r3, #0
 80047e2:	4604      	mov	r4, r0
 80047e4:	4608      	mov	r0, r1
 80047e6:	602b      	str	r3, [r5, #0]
 80047e8:	f7fc fb9d 	bl	8000f26 <_isatty>
 80047ec:	1c43      	adds	r3, r0, #1
 80047ee:	d102      	bne.n	80047f6 <_isatty_r+0x1a>
 80047f0:	682b      	ldr	r3, [r5, #0]
 80047f2:	b103      	cbz	r3, 80047f6 <_isatty_r+0x1a>
 80047f4:	6023      	str	r3, [r4, #0]
 80047f6:	bd38      	pop	{r3, r4, r5, pc}
 80047f8:	20003ff0 	.word	0x20003ff0

080047fc <_lseek_r>:
 80047fc:	b538      	push	{r3, r4, r5, lr}
 80047fe:	4d07      	ldr	r5, [pc, #28]	; (800481c <_lseek_r+0x20>)
 8004800:	4604      	mov	r4, r0
 8004802:	4608      	mov	r0, r1
 8004804:	4611      	mov	r1, r2
 8004806:	2200      	movs	r2, #0
 8004808:	602a      	str	r2, [r5, #0]
 800480a:	461a      	mov	r2, r3
 800480c:	f7fc fb96 	bl	8000f3c <_lseek>
 8004810:	1c43      	adds	r3, r0, #1
 8004812:	d102      	bne.n	800481a <_lseek_r+0x1e>
 8004814:	682b      	ldr	r3, [r5, #0]
 8004816:	b103      	cbz	r3, 800481a <_lseek_r+0x1e>
 8004818:	6023      	str	r3, [r4, #0]
 800481a:	bd38      	pop	{r3, r4, r5, pc}
 800481c:	20003ff0 	.word	0x20003ff0

08004820 <memcpy>:
 8004820:	440a      	add	r2, r1
 8004822:	4291      	cmp	r1, r2
 8004824:	f100 33ff 	add.w	r3, r0, #4294967295
 8004828:	d100      	bne.n	800482c <memcpy+0xc>
 800482a:	4770      	bx	lr
 800482c:	b510      	push	{r4, lr}
 800482e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004832:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004836:	4291      	cmp	r1, r2
 8004838:	d1f9      	bne.n	800482e <memcpy+0xe>
 800483a:	bd10      	pop	{r4, pc}

0800483c <memmove>:
 800483c:	4288      	cmp	r0, r1
 800483e:	b510      	push	{r4, lr}
 8004840:	eb01 0402 	add.w	r4, r1, r2
 8004844:	d902      	bls.n	800484c <memmove+0x10>
 8004846:	4284      	cmp	r4, r0
 8004848:	4623      	mov	r3, r4
 800484a:	d807      	bhi.n	800485c <memmove+0x20>
 800484c:	1e43      	subs	r3, r0, #1
 800484e:	42a1      	cmp	r1, r4
 8004850:	d008      	beq.n	8004864 <memmove+0x28>
 8004852:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004856:	f803 2f01 	strb.w	r2, [r3, #1]!
 800485a:	e7f8      	b.n	800484e <memmove+0x12>
 800485c:	4402      	add	r2, r0
 800485e:	4601      	mov	r1, r0
 8004860:	428a      	cmp	r2, r1
 8004862:	d100      	bne.n	8004866 <memmove+0x2a>
 8004864:	bd10      	pop	{r4, pc}
 8004866:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800486a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800486e:	e7f7      	b.n	8004860 <memmove+0x24>

08004870 <__malloc_lock>:
 8004870:	4801      	ldr	r0, [pc, #4]	; (8004878 <__malloc_lock+0x8>)
 8004872:	f7ff b9d1 	b.w	8003c18 <__retarget_lock_acquire_recursive>
 8004876:	bf00      	nop
 8004878:	20003fe8 	.word	0x20003fe8

0800487c <__malloc_unlock>:
 800487c:	4801      	ldr	r0, [pc, #4]	; (8004884 <__malloc_unlock+0x8>)
 800487e:	f7ff b9cc 	b.w	8003c1a <__retarget_lock_release_recursive>
 8004882:	bf00      	nop
 8004884:	20003fe8 	.word	0x20003fe8

08004888 <_realloc_r>:
 8004888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800488a:	4607      	mov	r7, r0
 800488c:	4614      	mov	r4, r2
 800488e:	460e      	mov	r6, r1
 8004890:	b921      	cbnz	r1, 800489c <_realloc_r+0x14>
 8004892:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004896:	4611      	mov	r1, r2
 8004898:	f7ff ba74 	b.w	8003d84 <_malloc_r>
 800489c:	b922      	cbnz	r2, 80048a8 <_realloc_r+0x20>
 800489e:	f7ff fa21 	bl	8003ce4 <_free_r>
 80048a2:	4625      	mov	r5, r4
 80048a4:	4628      	mov	r0, r5
 80048a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048a8:	f000 f826 	bl	80048f8 <_malloc_usable_size_r>
 80048ac:	42a0      	cmp	r0, r4
 80048ae:	d20f      	bcs.n	80048d0 <_realloc_r+0x48>
 80048b0:	4621      	mov	r1, r4
 80048b2:	4638      	mov	r0, r7
 80048b4:	f7ff fa66 	bl	8003d84 <_malloc_r>
 80048b8:	4605      	mov	r5, r0
 80048ba:	2800      	cmp	r0, #0
 80048bc:	d0f2      	beq.n	80048a4 <_realloc_r+0x1c>
 80048be:	4631      	mov	r1, r6
 80048c0:	4622      	mov	r2, r4
 80048c2:	f7ff ffad 	bl	8004820 <memcpy>
 80048c6:	4631      	mov	r1, r6
 80048c8:	4638      	mov	r0, r7
 80048ca:	f7ff fa0b 	bl	8003ce4 <_free_r>
 80048ce:	e7e9      	b.n	80048a4 <_realloc_r+0x1c>
 80048d0:	4635      	mov	r5, r6
 80048d2:	e7e7      	b.n	80048a4 <_realloc_r+0x1c>

080048d4 <_read_r>:
 80048d4:	b538      	push	{r3, r4, r5, lr}
 80048d6:	4d07      	ldr	r5, [pc, #28]	; (80048f4 <_read_r+0x20>)
 80048d8:	4604      	mov	r4, r0
 80048da:	4608      	mov	r0, r1
 80048dc:	4611      	mov	r1, r2
 80048de:	2200      	movs	r2, #0
 80048e0:	602a      	str	r2, [r5, #0]
 80048e2:	461a      	mov	r2, r3
 80048e4:	f7fc faca 	bl	8000e7c <_read>
 80048e8:	1c43      	adds	r3, r0, #1
 80048ea:	d102      	bne.n	80048f2 <_read_r+0x1e>
 80048ec:	682b      	ldr	r3, [r5, #0]
 80048ee:	b103      	cbz	r3, 80048f2 <_read_r+0x1e>
 80048f0:	6023      	str	r3, [r4, #0]
 80048f2:	bd38      	pop	{r3, r4, r5, pc}
 80048f4:	20003ff0 	.word	0x20003ff0

080048f8 <_malloc_usable_size_r>:
 80048f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048fc:	1f18      	subs	r0, r3, #4
 80048fe:	2b00      	cmp	r3, #0
 8004900:	bfbc      	itt	lt
 8004902:	580b      	ldrlt	r3, [r1, r0]
 8004904:	18c0      	addlt	r0, r0, r3
 8004906:	4770      	bx	lr

08004908 <_init>:
 8004908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800490a:	bf00      	nop
 800490c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800490e:	bc08      	pop	{r3}
 8004910:	469e      	mov	lr, r3
 8004912:	4770      	bx	lr

08004914 <_fini>:
 8004914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004916:	bf00      	nop
 8004918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800491a:	bc08      	pop	{r3}
 800491c:	469e      	mov	lr, r3
 800491e:	4770      	bx	lr
